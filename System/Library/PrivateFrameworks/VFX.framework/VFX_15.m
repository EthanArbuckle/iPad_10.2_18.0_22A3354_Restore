uint64_t sub_1B1F95B28(unsigned __int8 a1, unsigned __int8 a2)
{
  int v2;
  unint64_t v3;
  unint64_t v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  char v8;

  v2 = a1;
  if (a1)
  {
    if (a1 == 1)
      v3 = 0xD000000000000015;
    else
      v3 = 0xD000000000000016;
    if (v2 == 1)
      v4 = 0x80000001B2329500;
    else
      v4 = 0x80000001B2329520;
    v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1)
        v6 = 0xD000000000000015;
      else
        v6 = 0xD000000000000016;
      if (v5 == 1)
        v7 = 0x80000001B2329500;
      else
        v7 = 0x80000001B2329520;
      if (v3 != v6)
        goto LABEL_21;
      goto LABEL_19;
    }
  }
  else
  {
    v4 = 0xE400000000000000;
    v3 = 1701869940;
    v5 = a2;
    if (a2)
      goto LABEL_9;
  }
  v7 = 0xE400000000000000;
  if (v3 != 1701869940)
  {
LABEL_21:
    v8 = sub_1B2229D24();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7)
    goto LABEL_21;
  v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_1B1F95C18(unsigned __int8 a1, unsigned __int8 a2)
{
  int v2;
  uint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  char v8;

  v2 = a1;
  if (a1)
  {
    if (a1 == 1)
      v3 = 0x6570795465736162;
    else
      v3 = 0x6574656D61726170;
    if (v2 == 1)
      v4 = 0xE800000000000000;
    else
      v4 = 0xED0000656D614E72;
    v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1)
        v6 = 0x6570795465736162;
      else
        v6 = 0x6574656D61726170;
      if (v5 == 1)
        v7 = 0xE800000000000000;
      else
        v7 = 0xED0000656D614E72;
      if (v3 != v6)
        goto LABEL_21;
      goto LABEL_19;
    }
  }
  else
  {
    v4 = 0xE700000000000000;
    v3 = 0x44495565736162;
    v5 = a2;
    if (a2)
      goto LABEL_9;
  }
  v7 = 0xE700000000000000;
  if (v3 != 0x44495565736162)
  {
LABEL_21:
    v8 = sub_1B2229D24();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7)
    goto LABEL_21;
  v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_1B1F95D48(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x7374657070696E73;
  else
    v3 = 0x726F6C6F63;
  if (v2)
    v4 = 0xE500000000000000;
  else
    v4 = 0xE800000000000000;
  if ((a2 & 1) != 0)
    v5 = 0x7374657070696E73;
  else
    v5 = 0x726F6C6F63;
  if ((a2 & 1) != 0)
    v6 = 0xE800000000000000;
  else
    v6 = 0xE500000000000000;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_1B1F95DE8(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x726F74636166;
  else
    v3 = 1701080941;
  if (v2)
    v4 = 0xE400000000000000;
  else
    v4 = 0xE600000000000000;
  if ((a2 & 1) != 0)
    v5 = 0x726F74636166;
  else
    v5 = 1701080941;
  if ((a2 & 1) != 0)
    v6 = 0xE600000000000000;
  else
    v6 = 0xE400000000000000;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_1B1F95E84(unsigned __int8 a1, unsigned __int8 a2)
{
  unint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  char v8;

  v2 = 0xEB000000006E6F69;
  v3 = 0x7469736F706D6F63;
  v4 = a1;
  if (a1)
  {
    if (a1 == 1)
      v5 = 1886216562;
    else
      v5 = 0x4173746365666661;
    if (v4 == 1)
      v6 = 0xE400000000000000;
    else
      v6 = 0xEC0000006168706CLL;
    v7 = a2;
    if (!a2)
      goto LABEL_15;
    goto LABEL_9;
  }
  v5 = 0x7469736F706D6F63;
  v6 = 0xEB000000006E6F69;
  v7 = a2;
  if (a2)
  {
LABEL_9:
    if (v7 == 1)
      v3 = 1886216562;
    else
      v3 = 0x4173746365666661;
    if (v7 == 1)
      v2 = 0xE400000000000000;
    else
      v2 = 0xEC0000006168706CLL;
  }
LABEL_15:
  if (v5 == v3 && v6 == v2)
    v8 = 1;
  else
    v8 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_1B1F95FA4(char a1, unsigned __int8 a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int v6;
  char v7;

  v2 = 0xEC000000656D6954;
  v3 = 0x7265764F65746172;
  if (a1)
  {
    if (a1 == 1)
      v4 = 0x7473727562;
    else
      v4 = 0x74696D655FLL;
    v5 = 0xE500000000000000;
    v6 = a2;
    if (!a2)
      goto LABEL_10;
    goto LABEL_6;
  }
  v4 = 0x7265764F65746172;
  v5 = 0xEC000000656D6954;
  v6 = a2;
  if (a2)
  {
LABEL_6:
    if (v6 == 1)
      v3 = 0x7473727562;
    else
      v3 = 0x74696D655FLL;
    v2 = 0xE500000000000000;
  }
LABEL_10:
  if (v4 == v3 && v5 == v2)
    v7 = 1;
  else
    v7 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_1B1F960B4(unsigned __int8 a1, unsigned __int8 a2)
{
  unint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  char v8;

  v2 = 0xEC000000656D6954;
  v3 = 0x7265764F65746172;
  v4 = a1;
  if (a1)
  {
    if (a1 == 1)
      v5 = 0x6E6F697461727564;
    else
      v5 = 0x6954746165706572;
    if (v4 == 1)
      v6 = 0xE800000000000000;
    else
      v6 = 0xEA0000000000656DLL;
    v7 = a2;
    if (!a2)
      goto LABEL_15;
    goto LABEL_9;
  }
  v5 = 0x7265764F65746172;
  v6 = 0xEC000000656D6954;
  v7 = a2;
  if (a2)
  {
LABEL_9:
    if (v7 == 1)
      v3 = 0x6E6F697461727564;
    else
      v3 = 0x6954746165706572;
    if (v7 == 1)
      v2 = 0xE800000000000000;
    else
      v2 = 0xEA0000000000656DLL;
  }
LABEL_15:
  if (v5 == v3 && v6 == v2)
    v8 = 1;
  else
    v8 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_1B1F961DC(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x726F6C6F63;
  else
    v3 = 0x7974696361706FLL;
  if (v2)
    v4 = 0xE700000000000000;
  else
    v4 = 0xE500000000000000;
  if ((a2 & 1) != 0)
    v5 = 0x726F6C6F63;
  else
    v5 = 0x7974696361706FLL;
  if ((a2 & 1) != 0)
    v6 = 0xE500000000000000;
  else
    v6 = 0xE700000000000000;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_1B1F9627C(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x676E6979616C70;
  else
    v3 = 0x746E457465737361;
  if (v2)
    v4 = 0xEB00000000797469;
  else
    v4 = 0xE700000000000000;
  if ((a2 & 1) != 0)
    v5 = 0x676E6979616C70;
  else
    v5 = 0x746E457465737361;
  if ((a2 & 1) != 0)
    v6 = 0xE700000000000000;
  else
    v6 = 0xEB00000000797469;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_1B1F96328(char a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;

  if ((a1 & 1) != 0)
    v2 = 1702521203;
  else
    v2 = 1701667182;
  if ((a2 & 1) != 0)
    v3 = 1702521203;
  else
    v3 = 1701667182;
  if (v2 == v3)
    v4 = 1;
  else
    v4 = sub_1B2229D24();
  swift_bridgeObjectRelease_n();
  return v4 & 1;
}

uint64_t sub_1B1F96394(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x7374756F79616CLL;
  else
    v3 = 0x7475626972747461;
  if (v2)
    v4 = 0xEA00000000007365;
  else
    v4 = 0xE700000000000000;
  if ((a2 & 1) != 0)
    v5 = 0x7374756F79616CLL;
  else
    v5 = 0x7475626972747461;
  if ((a2 & 1) != 0)
    v6 = 0xE700000000000000;
  else
    v6 = 0xEA00000000007365;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_1B1F9643C(unsigned __int8 a1, unsigned __int8 a2)
{
  int v2;
  uint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  char v8;

  v2 = a1;
  if (a1)
  {
    if (a1 == 1)
      v3 = 0x6E75665F70657473;
    else
      v3 = 0x7461725F70657473;
    if (v2 == 1)
      v4 = 0xED00006E6F697463;
    else
      v4 = 0xE900000000000065;
    v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1)
        v6 = 0x6E75665F70657473;
      else
        v6 = 0x7461725F70657473;
      if (v5 == 1)
        v7 = 0xED00006E6F697463;
      else
        v7 = 0xE900000000000065;
      if (v3 != v6)
        goto LABEL_21;
      goto LABEL_19;
    }
  }
  else
  {
    v4 = 0xE600000000000000;
    v3 = 0x656469727473;
    v5 = a2;
    if (a2)
      goto LABEL_9;
  }
  v7 = 0xE600000000000000;
  if (v3 != 0x656469727473)
  {
LABEL_21:
    v8 = sub_1B2229D24();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7)
    goto LABEL_21;
  v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_1B1F9656C(char a1, unsigned __int8 a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int v6;
  char v7;

  v2 = 0xEC0000007865646ELL;
  v3 = 0x695F726566667562;
  if (a1)
  {
    if (a1 == 1)
      v4 = 0x74657366666FLL;
    else
      v4 = 0x74616D726F66;
    v5 = 0xE600000000000000;
    v6 = a2;
    if (!a2)
      goto LABEL_10;
    goto LABEL_6;
  }
  v4 = 0x695F726566667562;
  v5 = 0xEC0000007865646ELL;
  v6 = a2;
  if (a2)
  {
LABEL_6:
    if (v6 == 1)
      v3 = 0x74657366666FLL;
    else
      v3 = 0x74616D726F66;
    v2 = 0xE600000000000000;
  }
LABEL_10:
  if (v4 == v3 && v5 == v2)
    v7 = 1;
  else
    v7 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_1B1F9667C(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x6576727563;
  else
    v3 = 0x797469636F6C6576;
  if (v2)
    v4 = 0xE800000000000000;
  else
    v4 = 0xE500000000000000;
  if ((a2 & 1) != 0)
    v5 = 0x6576727563;
  else
    v5 = 0x797469636F6C6576;
  if ((a2 & 1) != 0)
    v6 = 0xE500000000000000;
  else
    v6 = 0xE800000000000000;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_1B1F9671C(unsigned __int8 a1, unsigned __int8 a2)
{
  int v2;
  uint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  char v8;

  v2 = a1;
  if (a1)
  {
    if (a1 == 1)
      v3 = 0x746152706574735FLL;
    else
      v3 = 0x6E7546706574735FLL;
    if (v2 == 1)
      v4 = 0xE900000000000065;
    else
      v4 = 0xED00006E6F697463;
    v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1)
        v6 = 0x746152706574735FLL;
      else
        v6 = 0x6E7546706574735FLL;
      if (v5 == 1)
        v7 = 0xE900000000000065;
      else
        v7 = 0xED00006E6F697463;
      if (v3 != v6)
        goto LABEL_21;
      goto LABEL_19;
    }
  }
  else
  {
    v4 = 0xE700000000000000;
    v3 = 0x6564697274735FLL;
    v5 = a2;
    if (a2)
      goto LABEL_9;
  }
  v7 = 0xE700000000000000;
  if (v3 != 0x6564697274735FLL)
  {
LABEL_21:
    v8 = sub_1B2229D24();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7)
    goto LABEL_21;
  v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_1B1F96854(unsigned __int8 a1, unsigned __int8 a2)
{
  int v2;
  uint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  char v8;

  v2 = a1;
  if (a1)
  {
    if (a1 == 1)
      v3 = 0x74616D726F665FLL;
    else
      v3 = 0x497265666675625FLL;
    if (v2 == 1)
      v4 = 0xE700000000000000;
    else
      v4 = 0xEC0000007865646ELL;
    v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1)
        v6 = 0x74616D726F665FLL;
      else
        v6 = 0x497265666675625FLL;
      if (v5 == 1)
        v7 = 0xE700000000000000;
      else
        v7 = 0xEC0000007865646ELL;
      if (v3 != v6)
        goto LABEL_21;
      goto LABEL_19;
    }
  }
  else
  {
    v4 = 0xE700000000000000;
    v3 = 0x74657366666F5FLL;
    v5 = a2;
    if (a2)
      goto LABEL_9;
  }
  v7 = 0xE700000000000000;
  if (v3 != 0x74657366666F5FLL)
  {
LABEL_21:
    v8 = sub_1B2229D24();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7)
    goto LABEL_21;
  v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_1B1F9697C(char a1, char a2)
{
  BOOL v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0xD000000000000011;
  else
    v3 = 0x797469746E65;
  if (v2)
    v4 = 0xE600000000000000;
  else
    v4 = 0x80000001B23298D0;
  if ((a2 & 1) != 0)
    v5 = 0xD000000000000011;
  else
    v5 = 0x797469746E65;
  if ((a2 & 1) != 0)
    v6 = 0x80000001B23298D0;
  else
    v6 = 0xE600000000000000;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

void sub_1B1F96A20(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1B1F96A84(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1B1F96AE8 + 4 * byte_1B22A85F2[a2]))(0x737475706E69);
}

uint64_t sub_1B1F96AE8(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x737475706E69 && v1 == 0xE600000000000000)
    v2 = 1;
  else
    v2 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

void sub_1B1F96B94(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1B1F96BD4(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1B1F96C94 + 4 * byte_1B22A85FD[a2]))(0x7865646E69);
}

uint64_t sub_1B1F96C94(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x7865646E69 && v1 == 0xE500000000000000)
    v2 = 1;
  else
    v2 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t sub_1B1F96DA0(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x6F69746365726964;
  else
    v3 = 0x726F74636166;
  if (v2)
    v4 = 0xE600000000000000;
  else
    v4 = 0xED0000736978416ELL;
  if ((a2 & 1) != 0)
    v5 = 0x6F69746365726964;
  else
    v5 = 0x726F74636166;
  if ((a2 & 1) != 0)
    v6 = 0xED0000736978416ELL;
  else
    v6 = 0xE600000000000000;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_1B1F96E4C(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x7469736E65746E69;
  else
    v3 = 0x657265687073;
  if (v2)
    v4 = 0xE600000000000000;
  else
    v4 = 0xE900000000000079;
  if ((a2 & 1) != 0)
    v5 = 0x7469736E65746E69;
  else
    v5 = 0x657265687073;
  if ((a2 & 1) != 0)
    v6 = 0xE900000000000079;
  else
    v6 = 0xE600000000000000;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

void sub_1B1F96EF0(char a1)
{
  __asm { BR              X11 }
}

uint64_t sub_1B1F96F54@<X0>(unsigned __int8 a1@<W1>, uint64_t a2@<X8>)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1B1F96FCC + 4 * byte_1B22A860A[a1]))(a2 + 1);
}

uint64_t sub_1B1F96FCC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  char v3;

  if (a1 == a2 + 1 && v2 == 0x80000001B232CE90)
    v3 = 1;
  else
    v3 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v3 & 1;
}

uint64_t sub_1B1F97084(unsigned __int8 a1, unsigned __int8 a2)
{
  int v2;
  uint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  char v8;

  v2 = a1;
  if (a1)
  {
    if (a1 == 1)
      v3 = 0x686769654878616DLL;
    else
      v3 = 0x657073417065656BLL;
    if (v2 == 1)
      v4 = 0xE900000000000074;
    else
      v4 = 0xEF6F697461527463;
    v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1)
        v6 = 0x686769654878616DLL;
      else
        v6 = 0x657073417065656BLL;
      if (v5 == 1)
        v7 = 0xE900000000000074;
      else
        v7 = 0xEF6F697461527463;
      if (v3 != v6)
        goto LABEL_21;
      goto LABEL_19;
    }
  }
  else
  {
    v4 = 0xE800000000000000;
    v3 = 0x687464695778616DLL;
    v5 = a2;
    if (a2)
      goto LABEL_9;
  }
  v7 = 0xE800000000000000;
  if (v3 != 0x687464695778616DLL)
  {
LABEL_21:
    v8 = sub_1B2229D24();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7)
    goto LABEL_21;
  v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_1B1F971BC(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 1701869940;
  else
    v3 = 0x797469746E65;
  if (v2)
    v4 = 0xE600000000000000;
  else
    v4 = 0xE400000000000000;
  if ((a2 & 1) != 0)
    v5 = 1701869940;
  else
    v5 = 0x797469746E65;
  if ((a2 & 1) != 0)
    v6 = 0xE400000000000000;
  else
    v6 = 0xE600000000000000;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_1B1F97254(unsigned __int8 a1, unsigned __int8 a2)
{
  char v2;

  if ((unint64_t)a1 << 48 == (unint64_t)a2 << 48)
    v2 = 1;
  else
    v2 = sub_1B2229D24();
  swift_bridgeObjectRelease_n();
  return v2 & 1;
}

uint64_t sub_1B1F972C8(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x7469736E65746E69;
  else
    v3 = 0x656C616373;
  if (v2)
    v4 = 0xE500000000000000;
  else
    v4 = 0xE900000000000079;
  if ((a2 & 1) != 0)
    v5 = 0x7469736E65746E69;
  else
    v5 = 0x656C616373;
  if ((a2 & 1) != 0)
    v6 = 0xE900000000000079;
  else
    v6 = 0xE500000000000000;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

void sub_1B1F9736C(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1B1F973D0(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1B1F97454 + 4 * byte_1B22A8616[a2]))(0x65727574786574);
}

uint64_t sub_1B1F97454(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x65727574786574 && v1 == 0xE700000000000000)
    v2 = 1;
  else
    v2 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

void sub_1B1F97528(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1B1F97578(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1B1F97608 + 4 * byte_1B22A8622[a2]))(0x65646F4D74726F73);
}

uint64_t sub_1B1F97608(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  if (a1 == 0x65646F4D74726F73 && v1 == v2)
    v3 = 1;
  else
    v3 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v3 & 1;
}

void sub_1B1F976E8(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1B1F97728(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1B1F97788 + 4 * byte_1B22A862C[a2]))(0x6963697473616C65);
}

uint64_t sub_1B1F97788(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x6963697473616C65 && v1 == 0xEA00000000007974)
    v2 = 1;
  else
    v2 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t sub_1B1F9782C(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x6576727563;
  else
    v3 = 1701080941;
  if (v2)
    v4 = 0xE400000000000000;
  else
    v4 = 0xE500000000000000;
  if ((a2 & 1) != 0)
    v5 = 0x6576727563;
  else
    v5 = 1701080941;
  if ((a2 & 1) != 0)
    v6 = 0xE500000000000000;
  else
    v6 = 0xE400000000000000;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

void sub_1B1F978C4(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1B1F97928(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1B1F979B4 + 4 * byte_1B22A8636[a2]))(1701080941);
}

uint64_t sub_1B1F979B4(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 1701080941 && v1 == 0xE400000000000000)
    v2 = 1;
  else
    v2 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

void sub_1B1F97A78(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1B1F97AB8(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1B1F97B20 + 4 * byte_1B22A8640[a2]))(0x4D73736572646461);
}

uint64_t sub_1B1F97B20(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x4D73736572646461 && v1 == 0xEB0000000065646FLL)
    v2 = 1;
  else
    v2 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t sub_1B1F97BCC(unsigned __int8 a1, unsigned __int8 a2)
{
  unint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  char v8;

  v2 = 0xEB000000006E6F69;
  v3 = 0x7469736F706D6F63;
  v4 = a1;
  if (a1)
  {
    if (a1 == 1)
      v5 = 0x65676E6172;
    else
      v5 = 1886216562;
    if (v4 == 1)
      v6 = 0xE500000000000000;
    else
      v6 = 0xE400000000000000;
    v7 = a2;
    if (!a2)
      goto LABEL_15;
    goto LABEL_9;
  }
  v5 = 0x7469736F706D6F63;
  v6 = 0xEB000000006E6F69;
  v7 = a2;
  if (a2)
  {
LABEL_9:
    if (v7 == 1)
      v3 = 0x65676E6172;
    else
      v3 = 1886216562;
    if (v7 == 1)
      v2 = 0xE500000000000000;
    else
      v2 = 0xE400000000000000;
  }
LABEL_15:
  if (v5 == v3 && v6 == v2)
    v8 = 1;
  else
    v8 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_1B1F97CD4(char a1, unsigned __int8 a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  int v6;
  char v7;

  v2 = 0xD000000000000010;
  v3 = 0x80000001B2329930;
  if (a1)
  {
    if (a1 == 1)
      v4 = 0x776F6C6C6F66;
    else
      v4 = 0x7261656E696CLL;
    v5 = 0xE600000000000000;
    v6 = a2;
    if (!a2)
      goto LABEL_10;
    goto LABEL_6;
  }
  v4 = 0xD000000000000010;
  v5 = 0x80000001B2329930;
  v6 = a2;
  if (a2)
  {
LABEL_6:
    if (v6 == 1)
      v2 = 0x776F6C6C6F66;
    else
      v2 = 0x7261656E696CLL;
    v3 = 0xE600000000000000;
  }
LABEL_10:
  if (v4 == v2 && v5 == v3)
    v7 = 1;
  else
    v7 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_1B1F97DD0(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x6954746165706572;
  else
    v3 = 0x746E756F63;
  if (v2)
    v4 = 0xE500000000000000;
  else
    v4 = 0xEA0000000000656DLL;
  if ((a2 & 1) != 0)
    v5 = 0x6954746165706572;
  else
    v5 = 0x746E756F63;
  if ((a2 & 1) != 0)
    v6 = 0xEA0000000000656DLL;
  else
    v6 = 0xE500000000000000;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_1B1F97E74(unsigned __int8 a1, unsigned __int8 a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  char v8;

  v2 = 0xEA00000000007373;
  v3 = 0x656E68746F6F6D73;
  v4 = a1;
  if (a1)
  {
    if (a1 == 1)
      v5 = 0xD000000000000015;
    else
      v5 = 0xD000000000000011;
    if (v4 == 1)
      v6 = 0x80000001B232E2B0;
    else
      v6 = 0x80000001B232E2D0;
    v7 = a2;
    if (!a2)
      goto LABEL_15;
    goto LABEL_9;
  }
  v5 = 0x656E68746F6F6D73;
  v6 = 0xEA00000000007373;
  v7 = a2;
  if (a2)
  {
LABEL_9:
    if (v7 == 1)
      v3 = 0xD000000000000015;
    else
      v3 = 0xD000000000000011;
    if (v7 == 1)
      v2 = 0x80000001B232E2B0;
    else
      v2 = 0x80000001B232E2D0;
  }
LABEL_15:
  if (v5 == v3 && v6 == v2)
    v8 = 1;
  else
    v8 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_1B1F97F7C(char a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;

  if ((a1 & 1) != 0)
    v2 = 0x65676E6172;
  else
    v2 = 0x6576727563;
  if ((a2 & 1) != 0)
    v3 = 0x65676E6172;
  else
    v3 = 0x6576727563;
  if (v2 == v3)
    v4 = 1;
  else
    v4 = sub_1B2229D24();
  swift_bridgeObjectRelease_n();
  return v4 & 1;
}

void sub_1B1F97FF0(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1B1F98040(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1B1F980D4 + 4 * byte_1B22A864B[a2]))(0x6C656E6E616863);
}

uint64_t sub_1B1F980D4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  if (a1 == 0x6C656E6E616863 && v1 == v2)
    v3 = 1;
  else
    v3 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v3 & 1;
}

void sub_1B1F981B4(char a1)
{
  __asm { BR              X11 }
}

uint64_t sub_1B1F98204(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1B1F982AC + 4 * byte_1B22A8658[a2]))(0x676E697369757263);
}

uint64_t sub_1B1F982AC(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x676E697369757263 && v1 == 0xED00006465657053)
    v2 = 1;
  else
    v2 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

void sub_1B1F98388(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1B1F983C8(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1B1F9847C + 4 * byte_1B22A8665[a2]))(0x656372756F73);
}

uint64_t sub_1B1F9847C(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x656372756F73 && v1 == 0xE600000000000000)
    v2 = 1;
  else
    v2 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t sub_1B1F98588(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x6576727563;
  else
    v3 = 0x6E6F697461727564;
  if (v2)
    v4 = 0xE800000000000000;
  else
    v4 = 0xE500000000000000;
  if ((a2 & 1) != 0)
    v5 = 0x6576727563;
  else
    v5 = 0x6E6F697461727564;
  if ((a2 & 1) != 0)
    v6 = 0xE500000000000000;
  else
    v6 = 0xE800000000000000;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

void sub_1B1F98628(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1B1F98684(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1B1F98734 + 4 * byte_1B22A8673[a2]))(0x737569646172);
}

uint64_t sub_1B1F98734(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x737569646172 && v1 == 0xE600000000000000)
    v2 = 1;
  else
    v2 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t sub_1B1F98840(char a1, char a2)
{
  char v2;

  if (a1 == a2)
    v2 = 1;
  else
    v2 = sub_1B2229D24();
  swift_bridgeObjectRelease_n();
  return v2 & 1;
}

void sub_1B1F988A4(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1B1F98910(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1B1F98970 + 4 * byte_1B22A867E[a2]))(0x3172656E726F63);
}

uint64_t sub_1B1F98970(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x3172656E726F63 && v1 == 0xE700000000000000)
    v2 = 1;
  else
    v2 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

void sub_1B1F98A18(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1B1F98A74(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1B1F98B20 + 4 * byte_1B22A8688[a2]))(0x6556746F5278616DLL);
}

uint64_t sub_1B1F98B20(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x6556746F5278616DLL && v1 == 0xEC0000007269446CLL)
    v2 = 1;
  else
    v2 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

void sub_1B1F98C24(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1B1F98C80(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1B1F98CEC + 4 * byte_1B22A8692[a2]))(0x6E6543656E616C70);
}

uint64_t sub_1B1F98CEC(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x6E6543656E616C70 && v1 == 0xEB00000000726574)
    v2 = 1;
  else
    v2 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t sub_1B1F98DA0(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x726F4E656E616C70;
  else
    v3 = 0x636E65756C666E69;
  if (v2)
    v4 = 0xE900000000000065;
  else
    v4 = 0xEB000000006C616DLL;
  if ((a2 & 1) != 0)
    v5 = 0x726F4E656E616C70;
  else
    v5 = 0x636E65756C666E69;
  if ((a2 & 1) != 0)
    v6 = 0xEB000000006C616DLL;
  else
    v6 = 0xE900000000000065;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

void sub_1B1F98E50(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1B1F98EAC(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1B1F98F38 + 4 * byte_1B22A869B[a2]))(0x726550656D617266);
}

uint64_t sub_1B1F98F38(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x726550656D617266 && v1 == 0xEB00000000776F52)
    v2 = 1;
  else
    v2 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t sub_1B1F99014(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x73746567726174;
  else
    v3 = 0x656372756F73;
  if (v2)
    v4 = 0xE600000000000000;
  else
    v4 = 0xE700000000000000;
  if ((a2 & 1) != 0)
    v5 = 0x73746567726174;
  else
    v5 = 0x656372756F73;
  if ((a2 & 1) != 0)
    v6 = 0xE700000000000000;
  else
    v6 = 0xE600000000000000;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_1B1F990B4(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x657A6953666C6168;
  else
    v3 = 0x7265746E6563;
  if (v2)
    v4 = 0xE600000000000000;
  else
    v4 = 0xE800000000000000;
  if ((a2 & 1) != 0)
    v5 = 0x657A6953666C6168;
  else
    v5 = 0x7265746E6563;
  if ((a2 & 1) != 0)
    v6 = 0xE800000000000000;
  else
    v6 = 0xE600000000000000;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

void sub_1B1F99154(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1B1F9919C(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1B1F99220 + 4 * byte_1B22A86A5[a2]))(0x73726566667562);
}

uint64_t sub_1B1F99220(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x73726566667562 && v1 == 0xE700000000000000)
    v2 = 1;
  else
    v2 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t sub_1B1F992EC(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x7A696D6F646E6172;
  else
    v3 = 0x65756C6176;
  if (v2)
    v4 = 0xE500000000000000;
  else
    v4 = 0xE900000000000065;
  if ((a2 & 1) != 0)
    v5 = 0x7A696D6F646E6172;
  else
    v5 = 0x65756C6176;
  if ((a2 & 1) != 0)
    v6 = 0xE900000000000065;
  else
    v6 = 0xE500000000000000;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_1B1F99390(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x6566694C7265766FLL;
  else
    v3 = 0x726F74636166;
  if (v2)
    v4 = 0xE600000000000000;
  else
    v4 = 0xE800000000000000;
  if ((a2 & 1) != 0)
    v5 = 0x6566694C7265766FLL;
  else
    v5 = 0x726F74636166;
  if ((a2 & 1) != 0)
    v6 = 0xE800000000000000;
  else
    v6 = 0xE600000000000000;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_1B1F99430(unsigned __int8 a1, unsigned __int8 a2)
{
  int v2;
  uint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  char v8;

  v2 = a1;
  if (a1)
  {
    if (a1 == 1)
      v3 = 1953460082;
    else
      v3 = 0x6C6576654C706F74;
    if (v2 == 1)
      v4 = 0xE400000000000000;
    else
      v4 = 0xEF737463656A624FLL;
    v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1)
        v6 = 1953460082;
      else
        v6 = 0x6C6576654C706F74;
      if (v5 == 1)
        v7 = 0xE400000000000000;
      else
        v7 = 0xEF737463656A624FLL;
      if (v3 != v6)
        goto LABEL_21;
      goto LABEL_19;
    }
  }
  else
  {
    v4 = 0xE600000000000000;
    v3 = 0x656372756F73;
    v5 = a2;
    if (a2)
      goto LABEL_9;
  }
  v7 = 0xE600000000000000;
  if (v3 != 0x656372756F73)
  {
LABEL_21:
    v8 = sub_1B2229D24();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7)
    goto LABEL_21;
  v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

void sub_1B1F99548(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1B1F99598(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1B1F99644 + 4 * byte_1B22A86B0[a2]))(0x7469736E65746E69);
}

uint64_t sub_1B1F99644(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x7469736E65746E69 && v1 == 0xE900000000000079)
    v2 = 1;
  else
    v2 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

void sub_1B1F99740(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1B1F99788(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1B1F997F8 + 4 * byte_1B22A86BA[a2]))(0x7053646E756F7261);
}

uint64_t sub_1B1F997F8(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x7053646E756F7261 && v1 == 0xEB00000000646565)
    v2 = 1;
  else
    v2 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t sub_1B1F998AC(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 1701869940;
  else
    v3 = 0x65756C6176;
  if (v2)
    v4 = 0xE500000000000000;
  else
    v4 = 0xE400000000000000;
  if ((a2 & 1) != 0)
    v5 = 1701869940;
  else
    v5 = 0x65756C6176;
  if ((a2 & 1) != 0)
    v6 = 0xE400000000000000;
  else
    v6 = 0xE500000000000000;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_1B1F99944(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x73657361436C6C61;
  else
    v3 = 1701667182;
  if (v2)
    v4 = 0xE400000000000000;
  else
    v4 = 0xE800000000000000;
  if ((a2 & 1) != 0)
    v5 = 0x73657361436C6C61;
  else
    v5 = 1701667182;
  if ((a2 & 1) != 0)
    v6 = 0xE800000000000000;
  else
    v6 = 0xE400000000000000;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_1B1F999E0(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x49646F4C7473616CLL;
  else
    v3 = 0x676E61527473616CLL;
  if (v2)
    v4 = 0xE900000000000065;
  else
    v4 = 0xEC0000007865646ELL;
  if ((a2 & 1) != 0)
    v5 = 0x49646F4C7473616CLL;
  else
    v5 = 0x676E61527473616CLL;
  if ((a2 & 1) != 0)
    v6 = 0xEC0000007865646ELL;
  else
    v6 = 0xE900000000000065;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

void sub_1B1F99A90(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1B1F99AD0(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1B1F99BCC + 4 * byte_1B22A86C7[a2]))(0x646F4D646E656C62);
}

uint64_t sub_1B1F99BCC(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x646F4D646E656C62 && v1 == 0xE900000000000065)
    v2 = 1;
  else
    v2 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t sub_1B1F99D24(unsigned __int8 a1, unsigned __int8 a2)
{
  int v2;
  uint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  char v8;

  v2 = a1;
  if (a1)
  {
    if (a1 == 1)
      v3 = 0x737569646172;
    else
      v3 = 0x726F6C6F63;
    if (v2 == 1)
      v4 = 0xE600000000000000;
    else
      v4 = 0xE500000000000000;
    v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1)
        v6 = 0x737569646172;
      else
        v6 = 0x726F6C6F63;
      if (v5 == 1)
        v7 = 0xE600000000000000;
      else
        v7 = 0xE500000000000000;
      if (v3 != v6)
        goto LABEL_21;
      goto LABEL_19;
    }
  }
  else
  {
    v4 = 0xE600000000000000;
    v3 = 0x74657366666FLL;
    v5 = a2;
    if (a2)
      goto LABEL_9;
  }
  v7 = 0xE600000000000000;
  if (v3 != 0x74657366666FLL)
  {
LABEL_21:
    v8 = sub_1B2229D24();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7)
    goto LABEL_21;
  v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_1B1F99E24(unsigned __int8 a1, unsigned __int8 a2)
{
  int v2;
  uint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  char v8;

  v2 = a1;
  if (a1)
  {
    if (a1 == 1)
      v3 = 0x73656D6974;
    else
      v3 = 1701080941;
    if (v2 == 1)
      v4 = 0xE500000000000000;
    else
      v4 = 0xE400000000000000;
    v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1)
        v6 = 0x73656D6974;
      else
        v6 = 1701080941;
      if (v5 == 1)
        v7 = 0xE500000000000000;
      else
        v7 = 0xE400000000000000;
      if (v3 != v6)
        goto LABEL_21;
      goto LABEL_19;
    }
  }
  else
  {
    v4 = 0xE600000000000000;
    v3 = 0x73726F6C6F63;
    v5 = a2;
    if (a2)
      goto LABEL_9;
  }
  v7 = 0xE600000000000000;
  if (v3 != 0x73726F6C6F63)
  {
LABEL_21:
    v8 = sub_1B2229D24();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7)
    goto LABEL_21;
  v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

void sub_1B1F99F1C(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1B1F99F6C(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1B1F99FDC + 4 * byte_1B22A86D4[a2]))(0x646E497475706E69);
}

uint64_t sub_1B1F99FDC(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x646E497475706E69 && v1 == 0xEA00000000007865)
    v2 = 1;
  else
    v2 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t sub_1B1F9A090(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x656469736E69;
  else
    v3 = 0x6570616873;
  if (v2)
    v4 = 0xE500000000000000;
  else
    v4 = 0xE600000000000000;
  if ((a2 & 1) != 0)
    v5 = 0x656469736E69;
  else
    v5 = 0x6570616873;
  if ((a2 & 1) != 0)
    v6 = 0xE600000000000000;
  else
    v6 = 0xE500000000000000;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_1B1F9A12C(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x6C6169726574616DLL;
  else
    v3 = 1752393069;
  if (v2)
    v4 = 0xE400000000000000;
  else
    v4 = 0xE900000000000073;
  if ((a2 & 1) != 0)
    v5 = 0x6C6169726574616DLL;
  else
    v5 = 1752393069;
  if ((a2 & 1) != 0)
    v6 = 0xE900000000000073;
  else
    v6 = 0xE400000000000000;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

void sub_1B1F9A1CC(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1B1F9A228(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1B1F9A2A8 + 4 * byte_1B22A86DE[a2]))(0xD000000000000011);
}

uint64_t sub_1B1F9A2A8(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0xD000000000000011 && v1 == 0x80000001B2328200)
    v2 = 1;
  else
    v2 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t sub_1B1F9A374(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x4572657474696D65;
  else
    v3 = 0x746E65726170;
  if (v2)
    v4 = 0xE600000000000000;
  else
    v4 = 0xED0000797469746ELL;
  if ((a2 & 1) != 0)
    v5 = 0x4572657474696D65;
  else
    v5 = 0x746E65726170;
  if ((a2 & 1) != 0)
    v6 = 0xED0000797469746ELL;
  else
    v6 = 0xE600000000000000;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

void sub_1B1F9A420(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1B1F9A460(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1B1F9A4B4 + 4 * byte_1B22A86E8[a2]))(0x6E65657267);
}

uint64_t sub_1B1F9A4B4(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x6E65657267 && v1 == 0xE500000000000000)
    v2 = 1;
  else
    v2 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t sub_1B1F9A54C()
{
  void *v0;
  void *v1;
  char *v2;
  id v3;
  uint64_t v5;

  v1 = v0;
  v2 = (char *)objc_msgSend(v0, sel_pixelFormat);
  v3 = objc_msgSend(v1, sel_width);
  if ((unint64_t)(v2 - 160) > 0x3A || ((1 << (v2 + 96)) & 0x7FDF1FF7CFD54FFLL) == 0)
    return sub_1B1F9BE6C((uint64_t)v2) * (_QWORD)v3;
  if ((unint64_t)(v2 - 186) > 0x20)
    v5 = 1;
  else
    v5 = qword_1B22A9968[(_QWORD)(v2 - 186)];
  return 16 * (((uint64_t)v3 + v5 - 1) / v5);
}

uint64_t sub_1B1F9A5FC(uint64_t (*a1)(uint64_t *), uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  char v11;
  uint64_t v13;

  if (!(a3 >> 62))
  {
    v6 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v6)
      goto LABEL_3;
LABEL_10:
    swift_bridgeObjectRelease();
    v11 = 0;
    return v11 & 1;
  }
  swift_bridgeObjectRetain();
  v6 = sub_1B22296AC();
  if (!v6)
    goto LABEL_10;
LABEL_3:
  v7 = 0;
  while (1)
  {
    if ((a3 & 0xC000000000000001) != 0)
    {
      v8 = MEMORY[0x1B5E21018](v7, a3);
    }
    else
    {
      v8 = *(_QWORD *)(a3 + 8 * v7 + 32);
      swift_unknownObjectRetain();
    }
    v13 = v8;
    v9 = a1(&v13);
    if (v3)
    {
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
      return v11 & 1;
    }
    v10 = v9;
    swift_unknownObjectRelease();
    if ((v10 & 1) != 0)
      break;
    if (v6 == ++v7)
      goto LABEL_10;
  }
  swift_bridgeObjectRelease();
  v11 = 1;
  return v11 & 1;
}

uint64_t sub_1B1F9A724(uint64_t a1)
{
  uint64_t result;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  result = 0x6D726F6E553861;
  switch(a1)
  {
    case 0:
      return 0x64696C61766E69;
    case 1:
      return result;
    case 10:
      return 0x6D726F6E553872;
    case 12:
      return 0x6D726F6E533872;
    case 13:
      return 0x746E69553872;
    case 14:
      return 0x746E69533872;
    case 20:
      v3 = 1429614962;
      return v3 | 0x6D726F6E00000000;
    case 22:
      v3 = 1396060530;
      return v3 | 0x6D726F6E00000000;
    case 23:
      v4 = 1429614962;
      return v4 | 0x746E6900000000;
    case 24:
      v4 = 1396060530;
      return v4 | 0x746E6900000000;
    case 25:
      v5 = 1177956722;
      return v5 | 0x74616F6C00000000;
    case 30:
      v3 = 1429759858;
      return v3 | 0x6D726F6E00000000;
    case 32:
      v3 = 1396205426;
      return v3 | 0x6D726F6E00000000;
    case 33:
      v4 = 1429759858;
      return v4 | 0x746E6900000000;
    case 34:
      v4 = 1396205426;
      return v4 | 0x746E6900000000;
    case 53:
      v4 = 1429353330;
      return v4 | 0x746E6900000000;
    case 54:
      v4 = 1395798898;
      return v4 | 0x746E6900000000;
    case 55:
      v5 = 1177695090;
      return v5 | 0x74616F6C00000000;
    case 60:
      return 0x726F6E5536316772;
    case 62:
      return 0x726F6E5336316772;
    case 63:
      v6 = 909207410;
      return v6 | 0x746E695500000000;
    case 64:
      v7 = 909207410;
      return v7 | 0x746E695300000000;
    case 65:
      v8 = 909207410;
      return v8 | 0x616F6C4600000000;
    case 70:
      v9 = 1633838962;
      return v9 | 0x6F6E553800000000;
    case 71:
      v10 = 1633838962;
      return v10 | 0x6F6E553800000000;
    case 72:
      return 0x6F6E533861626772;
    case 73:
      v11 = 0x553861626772;
      return v11 & 0xFFFFFFFFFFFFLL | 0x6E69000000000000;
    case 74:
      v11 = 0x533861626772;
      return v11 & 0xFFFFFFFFFFFFLL | 0x6E69000000000000;
    case 80:
      v9 = 1634887522;
      return v9 | 0x6F6E553800000000;
    case 81:
      v10 = 1634887522;
      return v10 | 0x6F6E553800000000;
    case 90:
      v12 = 828532594;
      return v12 | 0x5532613000000000;
    case 91:
      return 0x5532613031626772;
    case 92:
      return 0x4630316231316772;
    case 93:
      v13 = 0x356539626772;
      return v13 & 0xFFFFFFFFFFFFLL | 0x6C46000000000000;
    case 94:
      v12 = 829581154;
      return v12 | 0x5532613000000000;
    case 103:
      v6 = 842229618;
      return v6 | 0x746E695500000000;
    case 104:
      v7 = 842229618;
      return v7 | 0x746E695300000000;
    case 105:
      v8 = 842229618;
      return v8 | 0x616F6C4600000000;
    case 110:
      return 0x6E55363161626772;
    case 112:
      return 0x6E53363161626772;
    case 113:
      v14 = 0x363161626772;
      return v14 & 0xFFFFFFFFFFFFLL | 0x6955000000000000;
    case 114:
      v15 = 0x363161626772;
      return v15 & 0xFFFFFFFFFFFFLL | 0x6953000000000000;
    case 115:
      v13 = 0x363161626772;
      return v13 & 0xFFFFFFFFFFFFLL | 0x6C46000000000000;
    case 123:
      v14 = 0x323361626772;
      return v14 & 0xFFFFFFFFFFFFLL | 0x6955000000000000;
    case 124:
      v15 = 0x323361626772;
      return v15 & 0xFFFFFFFFFFFFLL | 0x6953000000000000;
    case 125:
      v13 = 0x323361626772;
      return v13 & 0xFFFFFFFFFFFFLL | 0x6C46000000000000;
    case 186:
      v16 = 0x345F63747361;
      return v16 & 0xFFFFFFFFFFFFLL | 0x3478000000000000;
    case 187:
      v16 = 0x355F63747361;
      return v16 & 0xFFFFFFFFFFFFLL | 0x3478000000000000;
    case 188:
      v17 = 0x355F63747361;
      return v17 & 0xFFFFFFFFFFFFLL | 0x3578000000000000;
    case 189:
      v17 = 0x365F63747361;
      return v17 & 0xFFFFFFFFFFFFLL | 0x3578000000000000;
    case 190:
      v18 = 0x365F63747361;
      return v18 & 0xFFFFFFFFFFFFLL | 0x3678000000000000;
    case 192:
      v17 = 0x385F63747361;
      return v17 & 0xFFFFFFFFFFFFLL | 0x3578000000000000;
    case 193:
      v18 = 0x385F63747361;
      return v18 & 0xFFFFFFFFFFFFLL | 0x3678000000000000;
    case 194:
      return 0x3878385F63747361;
    case 195:
      return 0x7830315F63747361;
    case 196:
      return 0x7830315F63747361;
    case 197:
      return 0x7830315F63747361;
    case 198:
      return 0x7830315F63747361;
    case 199:
      return 0x7832315F63747361;
    case 200:
      return 0x7832315F63747361;
    case 204:
      v19 = 0x345F63747361;
      return v19 & 0xFFFFFFFFFFFFLL | 0x3478000000000000;
    case 205:
      v19 = 0x355F63747361;
      return v19 & 0xFFFFFFFFFFFFLL | 0x3478000000000000;
    case 206:
      v20 = 0x355F63747361;
      goto LABEL_87;
    case 207:
      v20 = 0x365F63747361;
      goto LABEL_87;
    case 208:
      v21 = 0x365F63747361;
      goto LABEL_89;
    case 210:
      v20 = 0x385F63747361;
LABEL_87:
      result = v20 & 0xFFFFFFFFFFFFLL | 0x3578000000000000;
      break;
    case 211:
      v21 = 0x385F63747361;
LABEL_89:
      result = v21 & 0xFFFFFFFFFFFFLL | 0x3678000000000000;
      break;
    case 212:
      result = 0x3878385F63747361;
      break;
    case 213:
      result = 0x7830315F63747361;
      break;
    case 214:
      result = 0x7830315F63747361;
      break;
    case 215:
      result = 0x7830315F63747361;
      break;
    case 216:
      result = 0x7830315F63747361;
      break;
    case 217:
      result = 0x7832315F63747361;
      break;
    case 218:
      result = 0x7832315F63747361;
      break;
    case 252:
      result = 0x4632336874706564;
      break;
    case 253:
      result = 0x386C69636E657473;
      break;
    case 260:
      result = 0xD000000000000015;
      break;
    case 552:
      result = 0x785F303161726762;
      break;
    case 553:
      result = 0x785F303161726762;
      break;
    case 554:
      result = 0x72785F3031726762;
      break;
    case 555:
      result = 0x72785F3031726762;
      break;
    default:
      MTLPixelFormatGetInfo();
      result = sub_1B22288A8();
      break;
  }
  return result;
}

double sub_1B1F9AEC4@<D0>(uint64_t a1@<X8>)
{
  void *v1;
  void *v2;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  uint64_t v40;
  __int128 v41;
  double result;
  __int128 v43;
  id v44;
  id v45;
  id v46;
  id v47;
  id v48;
  id v49;
  _OWORD v50[5];
  uint64_t v51;

  v2 = v1;
  v4 = objc_msgSend(v1, sel_colorAttachments);
  v5 = objc_msgSend(v4, sel_objectAtIndexedSubscript_, 0);

  v6 = objc_msgSend(v5, sel_texture);
  if (!v6)
  {
    v7 = objc_msgSend(v2, sel_depthAttachment);
    v6 = objc_msgSend(v7, sel_texture);

  }
  v8 = objc_msgSend(v2, sel_colorAttachments);
  v9 = objc_msgSend(v8, sel_objectAtIndexedSubscript_, 0);

  v10 = objc_msgSend(v9, sel_texture);
  if (v10)
  {
    v49 = objc_msgSend(v10, sel_pixelFormat);
    swift_unknownObjectRelease();
  }
  else
  {
    v49 = 0;
  }
  v11 = objc_msgSend(v2, sel_colorAttachments);
  v12 = objc_msgSend(v11, sel_objectAtIndexedSubscript_, 1);

  v13 = objc_msgSend(v12, sel_texture);
  if (v13)
  {
    v48 = objc_msgSend(v13, sel_pixelFormat);
    swift_unknownObjectRelease();
  }
  else
  {
    v48 = 0;
  }
  v14 = objc_msgSend(v2, sel_colorAttachments);
  v15 = objc_msgSend(v14, sel_objectAtIndexedSubscript_, 2);

  v16 = objc_msgSend(v15, sel_texture);
  if (v16)
  {
    v47 = objc_msgSend(v16, sel_pixelFormat);
    swift_unknownObjectRelease();
  }
  else
  {
    v47 = 0;
  }
  v17 = objc_msgSend(v2, sel_colorAttachments);
  v18 = objc_msgSend(v17, sel_objectAtIndexedSubscript_, 3);

  v19 = objc_msgSend(v18, sel_texture);
  if (v19)
  {
    v46 = objc_msgSend(v19, sel_pixelFormat);
    swift_unknownObjectRelease();
  }
  else
  {
    v46 = 0;
  }
  v20 = objc_msgSend(v2, sel_colorAttachments);
  v21 = objc_msgSend(v20, sel_objectAtIndexedSubscript_, 4);

  v22 = objc_msgSend(v21, sel_texture);
  if (v22)
  {
    v45 = objc_msgSend(v22, sel_pixelFormat);
    swift_unknownObjectRelease();
  }
  else
  {
    v45 = 0;
  }
  v23 = objc_msgSend(v2, sel_colorAttachments);
  v24 = objc_msgSend(v23, sel_objectAtIndexedSubscript_, 5);

  v25 = objc_msgSend(v24, sel_texture);
  if (v25)
  {
    v44 = objc_msgSend(v25, sel_pixelFormat);
    swift_unknownObjectRelease();
  }
  else
  {
    v44 = 0;
  }
  v26 = objc_msgSend(v2, sel_colorAttachments);
  v27 = objc_msgSend(v26, sel_objectAtIndexedSubscript_, 6);

  v28 = objc_msgSend(v27, sel_texture);
  if (v28)
  {
    v29 = objc_msgSend(v28, sel_pixelFormat);
    swift_unknownObjectRelease();
  }
  else
  {
    v29 = 0;
  }
  v30 = objc_msgSend(v2, sel_colorAttachments);
  v31 = objc_msgSend(v30, sel_objectAtIndexedSubscript_, 7);

  v32 = objc_msgSend(v31, sel_texture);
  if (v32)
  {
    v33 = objc_msgSend(v32, (SEL)&selRef_renderResourceForProgramDesc_renderPassDescriptor_);
    swift_unknownObjectRelease();
  }
  else
  {
    v33 = 0;
  }
  v34 = objc_msgSend(v2, sel_depthAttachment);
  v35 = objc_msgSend(v34, sel_texture);

  if (v35)
  {
    v36 = objc_msgSend(v35, (SEL)&selRef_renderResourceForProgramDesc_renderPassDescriptor_);
    swift_unknownObjectRelease();
  }
  else
  {
    v36 = 0;
  }
  v37 = objc_msgSend(v2, sel_stencilAttachment);
  v38 = objc_msgSend(v37, sel_texture);

  if (!v38)
  {
    v39 = 0;
    if (v6)
      goto LABEL_32;
LABEL_34:
    v40 = 1;
    goto LABEL_35;
  }
  v39 = objc_msgSend(v38, (SEL)&selRef_renderResourceForProgramDesc_renderPassDescriptor_);
  swift_unknownObjectRelease();
  if (!v6)
    goto LABEL_34;
LABEL_32:
  v40 = (uint64_t)objc_msgSend(v6, sel_sampleCount);
LABEL_35:
  sub_1B1B6B6F8((uint64_t)v49, (uint64_t)v48, (uint64_t)v47, (uint64_t)v46, (uint64_t)v45, (uint64_t)v44, (uint64_t)v29, (uint64_t)v33, v50, (uint64_t)v36, (uint64_t)v39, 0, v40);
  swift_unknownObjectRelease();
  v41 = v50[3];
  *(_OWORD *)(a1 + 32) = v50[2];
  *(_OWORD *)(a1 + 48) = v41;
  *(_OWORD *)(a1 + 64) = v50[4];
  *(_QWORD *)(a1 + 80) = v51;
  result = *(double *)v50;
  v43 = v50[1];
  *(_OWORD *)a1 = v50[0];
  *(_OWORD *)(a1 + 16) = v43;
  return result;
}

id sub_1B1F9B468()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  id v4;
  id v5;
  id v6;

  v1 = 0;
  do
  {
    v2 = v1 + 1;
    v3 = objc_msgSend(v0, sel_colorAttachments);
    v4 = objc_msgSend(v3, sel_objectAtIndexedSubscript_, v1);

    objc_msgSend(v4, sel_setTexture_, 0);
    objc_msgSend(v4, sel_setLoadAction_, 2);
    objc_msgSend(v4, sel_setStoreAction_, 0);
    objc_msgSend(v4, sel_setStoreActionOptions_, 0);
    objc_msgSend(v4, sel_setLevel_, 0);
    objc_msgSend(v4, sel_setSlice_, 0);
    objc_msgSend(v4, sel_setDepthPlane_, 0);
    objc_msgSend(v4, sel_setResolveTexture_, 0);
    objc_msgSend(v4, sel_setResolveLevel_, 0);
    objc_msgSend(v4, sel_setResolveDepthPlane_, 0);
    objc_msgSend(v4, sel_setResolveSlice_, 0);
    objc_msgSend(v4, sel_setLoadAction_, 0);
    objc_msgSend(v4, sel_setStoreAction_, 1);
    objc_msgSend(v4, sel_setClearColor_, 0.0, 0.0, 0.0, 1.0);

    v1 = v2;
  }
  while (v2 != 8);
  v5 = objc_msgSend(v0, sel_depthAttachment);
  objc_msgSend(v5, sel_setTexture_, 0);
  objc_msgSend(v5, sel_setLoadAction_, 2);
  objc_msgSend(v5, sel_setStoreAction_, 0);
  objc_msgSend(v5, sel_setStoreActionOptions_, 0);
  objc_msgSend(v5, sel_setLevel_, 0);
  objc_msgSend(v5, sel_setSlice_, 0);
  objc_msgSend(v5, sel_setDepthPlane_, 0);
  objc_msgSend(v5, sel_setResolveTexture_, 0);
  objc_msgSend(v5, sel_setResolveLevel_, 0);
  objc_msgSend(v5, sel_setResolveDepthPlane_, 0);
  objc_msgSend(v5, sel_setResolveSlice_, 0);
  objc_msgSend(v5, sel_setDepthResolveFilter_, 0);
  objc_msgSend(v5, sel_setClearDepth_, 1.0);

  v6 = objc_msgSend(v0, sel_stencilAttachment);
  objc_msgSend(v6, sel_setTexture_, 0);
  objc_msgSend(v6, sel_setLoadAction_, 2);
  objc_msgSend(v6, sel_setStoreAction_, 0);
  objc_msgSend(v6, sel_setStoreActionOptions_, 0);
  objc_msgSend(v6, sel_setLevel_, 0);
  objc_msgSend(v6, sel_setSlice_, 0);
  objc_msgSend(v6, sel_setDepthPlane_, 0);
  objc_msgSend(v6, sel_setResolveTexture_, 0);
  objc_msgSend(v6, sel_setResolveLevel_, 0);
  objc_msgSend(v6, sel_setResolveDepthPlane_, 0);
  objc_msgSend(v6, sel_setResolveSlice_, 0);
  objc_msgSend(v6, sel_setStencilResolveFilter_, 0);
  objc_msgSend(v6, sel_setClearStencil_, 0);

  return objc_msgSend(v0, sel_setVisibilityResultBuffer_, 0);
}

void sub_1B1F9B834()
{
  void *v0;
  id v1;
  id v2;
  id v3;
  id v4;

  v1 = objc_msgSend(v0, sel_depthAttachment);
  v2 = objc_msgSend(v1, sel_texture);

  if (v2)
  {
    if (objc_msgSend(v2, sel_pixelFormat) == (id)260)
    {
      v3 = objc_msgSend(v0, sel_stencilAttachment);
      v4 = objc_msgSend(v0, sel_depthAttachment);
      sub_1B1F9E80C(v4);

    }
    swift_unknownObjectRelease();
  }
}

BOOL sub_1B1F9B900(void *a1)
{
  void *v1;
  void *v2;
  uint64_t v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  BOOL v11;
  id v12;
  id v13;
  BOOL v14;

  v2 = v1;
  v4 = 0;
  while (1)
  {
    v5 = objc_msgSend(v2, sel_colorAttachments);
    v6 = objc_msgSend(v5, sel_objectAtIndexedSubscript_, v4);

    v7 = objc_msgSend(a1, sel_colorAttachments);
    v8 = objc_msgSend(v7, sel_objectAtIndexedSubscript_, v4);

    LOBYTE(v7) = sub_1B1F9E9DC(v8);
    if ((v7 & 1) == 0)
      break;
    if (++v4 == 8)
    {
      v9 = objc_msgSend(v2, sel_depthAttachment);
      v10 = objc_msgSend(a1, sel_depthAttachment);
      v11 = sub_1B1F9E9DC(v10);

      if (v11)
      {
        v12 = objc_msgSend(v2, sel_stencilAttachment);
        v13 = objc_msgSend(a1, sel_stencilAttachment);
        v14 = sub_1B1F9E9DC(v13);

        return v14;
      }
      return 0;
    }
  }
  return 0;
}

double sub_1B1F9BA6C()
{
  void *v0;
  id v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int64x2_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;

  v1 = objc_msgSend(v0, sel_colorAttachments);
  v2 = objc_msgSend(v1, sel_objectAtIndexedSubscript_, 0);

  if (objc_msgSend(v2, sel_texture))
  {
    v3 = sub_1B1F9CFAC((uint64_t)objc_msgSend(v2, sel_level));
    v5 = v4;

    swift_unknownObjectRelease();
    v6.i64[0] = v3;
  }
  else
  {

    v7 = objc_msgSend(v0, sel_depthAttachment);
    if (!objc_msgSend(v7, sel_texture))
    {

      v6.i64[0] = 0;
      return *(double *)v6.i64;
    }
    v8 = sub_1B1F9CFAC((uint64_t)objc_msgSend(v7, sel_level));
    v5 = v9;

    swift_unknownObjectRelease();
    v6.i64[0] = v8;
  }
  v6.i64[1] = v5;
  v6.i64[0] = vcvt_hight_f32_f64(0, vcvtq_f64_s64(v6)).u64[0];
  return *(double *)v6.i64;
}

uint64_t sub_1B1F9BB9C()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint8_t *v12;
  uint64_t v13;
  id v14;
  void *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  NSObject *v19;
  os_signpost_type_t v20;
  os_signpost_id_t v21;
  os_signpost_type_t v22;
  os_signpost_id_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v1 = v0;
  v2 = sub_1B22283B0();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1B2228380();
  v25 = *(_QWORD *)(v7 - 8);
  v26 = v7;
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1ED4BA0E0 != -1)
    swift_once();
  v11 = sub_1B1B40EC8(v2, (uint64_t)qword_1ED4D0E48);
  sub_1B2228398();
  sub_1B2228368();
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v6, v11, v2);
  swift_unknownObjectRetain_n();
  v12 = (uint8_t *)swift_slowAlloc();
  v13 = swift_slowAlloc();
  v30 = v13;
  *(_DWORD *)v12 = 136315138;
  v14 = objc_msgSend(v1, sel_label);
  v27 = v3;
  v28 = v2;
  if (v14)
  {
    v15 = v14;
    v16 = sub_1B222874C();
    v18 = v17;

  }
  else
  {
    v18 = 0xE700000000000000;
    v16 = 0x64656D616E6E55;
  }
  v29 = sub_1B1B3EF90(v16, v18, &v30);
  sub_1B22291D8();
  swift_unknownObjectRelease_n();
  swift_bridgeObjectRelease();
  v19 = sub_1B2228398();
  v20 = sub_1B2228FA4();
  v21 = sub_1B2228374();
  _os_signpost_emit_with_name_impl(&dword_1B178D000, v19, v20, v21, "waitUntilCompleted", "CB: %s", v12, 0xCu);
  objc_msgSend(v1, sel_waitUntilCompleted);
  v22 = sub_1B2228F98();
  v23 = sub_1B2228374();
  _os_signpost_emit_with_name_impl(&dword_1B178D000, v19, v22, v23, "waitUntilCompleted", "CB: %s", v12, 0xCu);

  swift_arrayDestroy();
  MEMORY[0x1B5E23F88](v13, -1, -1);
  MEMORY[0x1B5E23F88](v12, -1, -1);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v6, v28);
  return (*(uint64_t (**)(char *, uint64_t))(v25 + 8))(v10, v26);
}

uint64_t sub_1B1F9BE6C(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = 1;
  switch(a1)
  {
    case 1:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 253:
      return v1;
    case 20:
    case 22:
    case 23:
    case 24:
    case 25:
    case 30:
    case 32:
    case 33:
    case 34:
    case 250:
      return 2;
    case 53:
    case 54:
    case 55:
    case 60:
    case 62:
    case 63:
    case 64:
    case 65:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 80:
    case 81:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 252:
      return 4;
    case 103:
    case 104:
    case 105:
    case 110:
    case 112:
    case 113:
    case 114:
    case 115:
      return 8;
    case 123:
    case 124:
    case 125:
      return 16;
    case 260:
      return 5;
    default:
      if (qword_1EEF574A8 != -1)
      {
        v3 = a1;
        swift_once();
        a1 = v3;
      }
      if (qword_1EEFD5790 == a1)
        return 2;
      if (qword_1EEF574B0 != -1)
      {
        v4 = a1;
        swift_once();
        a1 = v4;
      }
      if (qword_1EEFD5798 == a1)
        return 2;
      if (qword_1EEF574C8 != -1)
      {
        v5 = a1;
        swift_once();
        a1 = v5;
      }
      if (qword_1EEFD57B0 == a1)
        return 3;
      if (qword_1EEF574D0 != -1)
      {
        v6 = a1;
        swift_once();
        a1 = v6;
      }
      if (qword_1EEFD57B8 == a1)
        return 3;
      if (qword_1EEF574B8 != -1)
      {
        v7 = a1;
        swift_once();
        a1 = v7;
      }
      if (qword_1EEFD57A0 == a1)
        return 3;
      if (qword_1EEF574C0 != -1)
      {
        v8 = a1;
        swift_once();
        a1 = v8;
      }
      if (qword_1EEFD57A8 == a1)
        return 3;
      if (qword_1EEF574D8 != -1)
      {
        v9 = a1;
        swift_once();
        a1 = v9;
      }
      if (qword_1EEFD57C0 == a1)
        return 4;
      if (qword_1EEF574E0 != -1)
      {
        v10 = a1;
        swift_once();
        a1 = v10;
      }
      if (qword_1EEFD57C8 == a1)
        return 4;
      v11 = a1;
      if (!a1)
        return 0;
      sub_1B2229430();
      swift_bridgeObjectRelease();
      sub_1B1F9A724(v11);
      sub_1B2228890();
      swift_bridgeObjectRelease();
      result = sub_1B2229688();
      __break(1u);
      return result;
  }
}

double sub_1B1F9C1A0()
{
  void *v0;
  unsigned int v2;
  unsigned int v3;

  *(float *)&v3 = (float)(uint64_t)objc_msgSend(v0, sel_width);
  *(float *)&v2 = (float)(uint64_t)objc_msgSend(v0, sel_height);
  objc_msgSend(v0, sel_depth);
  return COERCE_DOUBLE(__PAIR64__(v2, v3));
}

id sub_1B1F9C214(uint64_t a1, int a2, unint64_t *a3)
{
  void *v3;
  void *v4;
  id result;
  uint64_t v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  _QWORD v12[6];

  v4 = v3;
  result = objc_msgSend(v4, sel_setTexture_atIndex_, a1, a2);
  if (a1)
  {
    v9 = *a3;
    MEMORY[0x1E0C80A78](result, v8);
    v12[2] = a1;
    swift_unknownObjectRetain_n();
    swift_bridgeObjectRetain();
    v10 = sub_1B1F9A5FC((uint64_t (*)(uint64_t *))sub_1B1FA1200, (uint64_t)v12, v9);
    swift_bridgeObjectRelease();
    if ((v10 & 1) == 0)
    {
      v11 = swift_unknownObjectRetain();
      MEMORY[0x1B5E2064C](v11);
      if (*(_QWORD *)((*a3 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*a3 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        sub_1B2228AF4();
      sub_1B2228B30();
      sub_1B2228AD0();
    }
    return (id)swift_unknownObjectRelease_n();
  }
  return result;
}

id sub_1B1F9C328(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v4;

  return objc_msgSend(v4, sel_setArgumentBuffer_offset_, a1, a4 + a2);
}

uint64_t sub_1B1F9C340(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v4;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[3];
  uint64_t v10;
  id v11;
  uint64_t v12;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 - 8) + 72);
  v9[2] = a3;
  v10 = a4;
  v11 = objc_msgSend(v4, sel_constantDataAtIndex_, a2);
  v12 = v6;
  return sub_1B1EFFA50(a1, (uint64_t)sub_1B1FA0F9C, (uint64_t)v9, v10, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEE9C0] + 8, MEMORY[0x1E0DEDD18], v7);
}

id sub_1B1F9C3D8(uint64_t a1, int a2)
{
  void *v2;

  return objc_msgSend(v2, sel_setSamplerState_atIndex_, a1, a2);
}

uint64_t sub_1B1F9C3F0(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = a1 - 3;
  result = 1;
  switch(v1)
  {
    case 0:
    case 14:
    case 26:
    case 30:
    case 35:
    case 39:
    case 44:
    case 45:
    case 48:
    case 49:
    case 52:
    case 53:
      result = 4;
      break;
    case 1:
    case 15:
    case 16:
    case 17:
    case 27:
    case 31:
    case 36:
    case 37:
    case 40:
    case 41:
    case 55:
    case 56:
    case 57:
    case 78:
    case 82:
      result = 8;
      break;
    case 2:
    case 3:
    case 4:
    case 18:
    case 19:
    case 23:
    case 28:
    case 29:
    case 32:
    case 33:
      result = 16;
      break;
    case 5:
    case 6:
    case 10:
    case 24:
    case 25:
      result = 32;
      break;
    case 7:
    case 21:
    case 22:
      result = 24;
      break;
    case 8:
    case 9:
      result = 48;
      break;
    case 11:
    case 12:
      result = 64;
      break;
    case 13:
    case 34:
    case 38:
    case 43:
    case 47:
    case 51:
      result = 2;
      break;
    case 20:
      result = 12;
      break;
    case 42:
    case 46:
    case 50:
      return result;
    default:
      result = sub_1B2229688();
      __break(1u);
      break;
  }
  return result;
}

uint64_t sub_1B1F9C4B8(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  result = 0x64696C61766E69;
  switch(a1)
  {
    case 0:
      return result;
    case 1:
      return 0x327261686375;
    case 2:
      return 0x337261686375;
    case 3:
      return 0x347261686375;
    case 4:
      return 0x3272616863;
    case 5:
      return 0x3372616863;
    case 6:
      return 0x3472616863;
    case 7:
    case 8:
    case 9:
    case 22:
    case 23:
    case 24:
    case 51:
      return 0xD000000000000010;
    case 10:
      v3 = 0x4E3272616863;
      goto LABEL_25;
    case 11:
      v3 = 0x4E3372616863;
      goto LABEL_25;
    case 12:
      v3 = 0x4E3472616863;
      goto LABEL_25;
    case 13:
      return 0x3274726F687375;
    case 14:
      return 0x3374726F687375;
    case 15:
      return 0x3474726F687375;
    case 16:
      return 0x3274726F6873;
    case 17:
      return 0x3374726F6873;
    case 18:
      return 0x3474726F6873;
    case 19:
      return 0xD000000000000011;
    case 20:
      return 0xD000000000000011;
    case 21:
      return 0xD000000000000011;
    case 25:
      return 0x32666C6168;
    case 26:
      return 0x33666C6168;
    case 27:
      return 0x34666C6168;
    case 28:
      return 0x74616F6C66;
    case 29:
      return 0x3274616F6C66;
    case 30:
      return 0x3374616F6C66;
    case 31:
      return 0x3474616F6C66;
    case 32:
      return 7630441;
    case 33:
      return 846491241;
    case 34:
      return 863268457;
    case 35:
      return 880045673;
    case 36:
      return 1953393013;
    case 37:
      return 0x32746E6975;
    case 38:
      return 0x33746E6975;
    case 39:
      return 0x34746E6975;
    case 40:
      return 0xD000000000000013;
    case 41:
      return 0xD000000000000014;
    case 45:
      return 0x7261686375;
    case 46:
      return 1918986339;
    case 47:
      v3 = 0x4E7261686375;
      goto LABEL_25;
    case 48:
      return 0x6D726F4E72616863;
    case 49:
      return 0x74726F687375;
    case 50:
      return 0x74726F6873;
    case 52:
      v3 = 0x4E74726F6873;
LABEL_25:
      result = v3 & 0xFFFFFFFFFFFFLL | 0x726F000000000000;
      break;
    case 53:
      result = 1718378856;
      break;
    default:
      result = sub_1B2229688();
      __break(1u);
      break;
  }
  return result;
}

uint64_t sub_1B1F9C91C(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = a1 - 1;
  if ((unint64_t)(a1 - 1) < 0x35 && ((0x1FF1FFFFFFFFFFuLL >> v1) & 1) != 0)
    return qword_1B22A97C0[v1];
  result = sub_1B2229688();
  __break(1u);
  return result;
}

uint64_t sub_1B1F9C9A8()
{
  char v1;

  MTLPixelFormatGetInfoForDevice();
  return v1 & 1;
}

id sub_1B1F9C9D8(uint64_t a1, int a2)
{
  void *v2;

  return objc_msgSend(v2, sel_setTexture_atIndex_, a1, a2);
}

id sub_1B1F9C9F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, unint64_t *a6)
{
  void *v6;
  void *v7;
  uint64_t v10;
  uint64_t v11;
  id v12;
  unint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  _QWORD v18[6];

  v7 = v6;
  if (!a1)
    return objc_msgSend(v6, sel_setBuffer_offset_atIndex_, 0, 0, a5);
  v10 = a4 + a2;
  v11 = a5;
  swift_unknownObjectRetain();
  v12 = objc_msgSend(v7, sel_setBuffer_offset_atIndex_, a1, v10, v11);
  v13 = *a6;
  MEMORY[0x1E0C80A78](v12, v14);
  v18[2] = a1;
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  v15 = sub_1B1F9A5FC((uint64_t (*)(uint64_t *))sub_1B1FA0F88, (uint64_t)v18, v13);
  swift_bridgeObjectRelease();
  if ((v15 & 1) == 0)
  {
    v16 = swift_unknownObjectRetain();
    MEMORY[0x1B5E2064C](v16);
    if (*(_QWORD *)((*a6 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*a6 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      sub_1B2228AF4();
    sub_1B2228B30();
    sub_1B2228AD0();
  }
  return (id)swift_unknownObjectRelease_n();
}

uint64_t sub_1B1F9CB40()
{
  void *v0;
  id v1;
  id v2;
  id v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  uint64_t v10;
  id v11;
  id v12;
  id v13;

  v1 = objc_msgSend(v0, sel_dataType);
  if (v1 != (id)2)
  {
    if (v1 != (id)1)
      return sub_1B1F9C3F0((uint64_t)objc_msgSend(v0, sel_dataType));
    v2 = objc_msgSend(v0, sel_structType);
    v3 = objc_msgSend(v2, sel_members);
    sub_1B1B9DAD4(0, (unint64_t *)&qword_1ED4B79E0);
    v4 = sub_1B2228AB8();

    if (v4 >> 62)
    {
      swift_bridgeObjectRetain();
      v5 = sub_1B22296AC();
      if (v5)
      {
LABEL_5:
        v6 = 0;
        v7 = 0;
        do
        {
          if ((v4 & 0xC000000000000001) != 0)
            v8 = (id)MEMORY[0x1B5E21018](v6, v4);
          else
            v8 = *(id *)(v4 + 8 * v6 + 32);
          v9 = v8;
          ++v6;
          v10 = sub_1B1F9CB40();

          v7 += v10;
        }
        while (v5 != v6);
        goto LABEL_14;
      }
    }
    else
    {
      v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v5)
        goto LABEL_5;
    }
    v7 = 0;
LABEL_14:

    swift_bridgeObjectRelease_n();
    return v7;
  }
  v11 = objc_msgSend(v0, sel_arrayType);
  v12 = objc_msgSend(v11, sel_arrayLength);
  v13 = objc_msgSend(v11, sel_stride);

  return (_QWORD)v13 * (_QWORD)v12;
}

uint64_t sub_1B1F9CD08()
{
  void *v0;

  objc_msgSend(v0, sel_pixelFormat);
  objc_msgSend(v0, sel_mipmapLevelCount);
  return sub_1B2228E60();
}

uint64_t sub_1B1F9CD70()
{
  void *v0;
  unint64_t v1;
  id v2;
  id v3;
  id v5;
  id v6;
  id v7;
  id v8;

  v1 = (unint64_t)objc_msgSend(v0, sel_textureType);
  if (v1 > 8)
    return 1;
  if (((1 << v1) & 0x63) != 0)
  {
    v3 = objc_msgSend(v0, sel_width);
  }
  else if (((1 << v1) & 0x11C) != 0)
  {
    v2 = objc_msgSend(v0, sel_width);
    v3 = objc_msgSend(v0, sel_height);
    if ((uint64_t)v3 <= (uint64_t)v2)
      v3 = v2;
  }
  else
  {
    v5 = objc_msgSend(v0, sel_width);
    v6 = objc_msgSend(v0, sel_height);
    v7 = objc_msgSend(v0, sel_depth);
    if ((uint64_t)v7 <= (uint64_t)v6)
      v8 = v6;
    else
      v8 = v7;
    if ((uint64_t)v8 <= (uint64_t)v5)
      v3 = v5;
    else
      v3 = v8;
  }
  return (uint64_t)(float)(floorf(log2f(fmaxf((float)(uint64_t)v3, 1.0))) + 1.0);
}

uint64_t sub_1B1F9CE88()
{
  void *v0;
  id v1;
  id v2;
  uint64_t v3;
  uint64_t i;

  v1 = objc_msgSend(v0, sel_mipmapLevelCount);
  if (v1)
  {
    v2 = v1;
    v3 = 0;
    for (i = 0; (id)i != v2; ++i)
      v3 += sub_1B1F9D7EC((uint64_t)objc_msgSend(v0, sel_width), (uint64_t)objc_msgSend(v0, sel_height), (uint64_t)objc_msgSend(v0, sel_depth), i, (uint64_t)objc_msgSend(v0, sel_pixelFormat));
  }
  else
  {
    v3 = 0;
  }
  return sub_1B1F9DD74() * v3;
}

uint64_t sub_1B1F9CF68()
{
  void *v0;
  uint64_t v2;

  sub_1B1BA8088(2 * (_QWORD)objc_msgSend(v0, sel_threadExecutionWidth), 1, 1, &v2);
  return v2;
}

uint64_t sub_1B1F9CFAC(uint64_t a1)
{
  void *v1;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v3 = (unint64_t)objc_msgSend(v1, sel_textureType);
  if (v3 <= 8)
  {
    if (((1 << v3) & 0x17C) != 0)
    {
      v4 = (uint64_t)objc_msgSend(v1, sel_width);
      if (a1 < -64)
      {
LABEL_4:
        objc_msgSend(v1, sel_height);
        v5 = 1;
        v6 = 1;
LABEL_25:
        v8 = v5;
LABEL_39:
        v17 = 1;
LABEL_40:
        sub_1B1BA8088(v8, v6, v17, &v29);
        return v29;
      }
      if (a1 <= 64)
      {
        if (a1 < 0)
        {
          if ((unint64_t)a1 <= 0xFFFFFFFFFFFFFFC0)
            goto LABEL_4;
          v9 = v4 << -(char)a1;
        }
        else
        {
          v9 = v4 >> a1;
          if ((unint64_t)a1 >= 0x40)
            v9 = v4 >> 63;
        }
      }
      else
      {
        v9 = v4 >> 63;
      }
      if (v9 <= 1)
        v5 = 1;
      else
        v5 = v9;
      v10 = (uint64_t)objc_msgSend(v1, sel_height);
      v11 = v10 >> 63;
      v12 = v10 << -(char)a1;
      v13 = v10 >> a1;
      if ((unint64_t)a1 >= 0x40)
        v13 = v10 >> 63;
      if (a1 >= 0)
        v12 = v13;
      if (a1 <= 64)
        v11 = v12;
      if (v11 <= 1)
        v6 = 1;
      else
        v6 = v11;
      goto LABEL_25;
    }
    if (((1 << v3) & 3) != 0)
    {
      v7 = (uint64_t)objc_msgSend(v1, sel_width);
      if (a1 < -64)
      {
LABEL_7:
        v8 = 1;
LABEL_38:
        v6 = 1;
        goto LABEL_39;
      }
      if (a1 <= 64)
      {
        if (a1 < 0)
        {
          if ((unint64_t)a1 <= 0xFFFFFFFFFFFFFFC0)
            goto LABEL_7;
          v18 = v7 << -(char)a1;
        }
        else
        {
          v18 = v7 >> a1;
          if ((unint64_t)a1 >= 0x40)
            v18 = v7 >> 63;
        }
      }
      else
      {
        v18 = v7 >> 63;
      }
      if (v18 <= 1)
        v8 = 1;
      else
        v8 = v18;
      goto LABEL_38;
    }
    v14 = (uint64_t)objc_msgSend(v1, sel_width);
    if (a1 < -64)
      goto LABEL_27;
    if (a1 <= 64)
    {
      if (a1 < 0)
      {
        if ((unint64_t)a1 <= 0xFFFFFFFFFFFFFFC0)
        {
LABEL_27:
          objc_msgSend(v1, sel_height);
          objc_msgSend(v1, sel_depth);
          v15 = 1;
          v16 = 1;
          v17 = 1;
LABEL_65:
          v8 = v16;
          v6 = v15;
          goto LABEL_40;
        }
        v19 = v14 << -(char)a1;
      }
      else
      {
        v19 = v14 >> a1;
        if ((unint64_t)a1 >= 0x40)
          v19 = v14 >> 63;
      }
    }
    else
    {
      v19 = v14 >> 63;
    }
    if (v19 <= 1)
      v16 = 1;
    else
      v16 = v19;
    v21 = (uint64_t)objc_msgSend(v1, sel_height);
    v22 = v21 >> 63;
    v23 = v21 << -(char)a1;
    v24 = v21 >> a1;
    if ((unint64_t)a1 >= 0x40)
      v24 = v21 >> 63;
    if (a1 >= 0)
      v23 = v24;
    if (a1 <= 64)
      v22 = v23;
    if (v22 <= 1)
      v15 = 1;
    else
      v15 = v22;
    v25 = (uint64_t)objc_msgSend(v1, sel_depth);
    v26 = v25 >> 63;
    v27 = v25 << -(char)a1;
    v28 = v25 >> a1;
    if ((unint64_t)a1 >= 0x40)
      v28 = v25 >> 63;
    if (a1 >= 0)
      v27 = v28;
    if (a1 <= 64)
      v26 = v27;
    if (v26 <= 1)
      v17 = 1;
    else
      v17 = v26;
    goto LABEL_65;
  }
  result = sub_1B2229688();
  __break(1u);
  return result;
}

void sub_1B1F9D2B0(uint64_t a1)
{
  unint64_t *v1;
  unint64_t (*v2)();
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t, uint64_t);

  switch(a1)
  {
    case 3:
    case 16:
    case 29:
    case 33:
    case 37:
    case 41:
    case 45:
    case 49:
    case 53:
    case 59:
      return;
    case 4:
      v1 = &qword_1ED4BB080;
      v2 = sub_1B19F8DCC;
      v3 = MEMORY[0x1E0DEB188];
      goto LABEL_34;
    case 5:
      v1 = (unint64_t *)&qword_1ED4BB0A0;
      v2 = sub_1B19F8DCC;
      v3 = MEMORY[0x1E0DEB188];
      goto LABEL_29;
    case 6:
      v1 = (unint64_t *)&qword_1ED4BB0E0;
      v2 = sub_1B19F8DCC;
      v3 = MEMORY[0x1E0DEB188];
      goto LABEL_32;
    case 7:
      type metadata accessor for simd_float2x2(0);
      return;
    case 8:
      type metadata accessor for simd_float2x3(0);
      return;
    case 9:
      type metadata accessor for simd_float2x4(0);
      return;
    case 10:
      type metadata accessor for simd_float3x2(0);
      return;
    case 11:
      type metadata accessor for simd_float3x3(0);
      return;
    case 12:
      type metadata accessor for simd_float3x4(0);
      return;
    case 13:
      type metadata accessor for simd_float4x2(0);
      return;
    case 14:
      type metadata accessor for simd_float4x3(0);
      return;
    case 15:
      type metadata accessor for simd_float4x4(0);
      return;
    case 17:
    case 38:
      v1 = &qword_1ED4BB088;
      v2 = sub_1B19F8E10;
      v3 = MEMORY[0x1E0DEDB58];
      goto LABEL_34;
    case 18:
    case 39:
      v1 = &qword_1ED4BB0A8;
      v2 = sub_1B19F8E10;
      v3 = MEMORY[0x1E0DEDB58];
      goto LABEL_29;
    case 19:
    case 40:
      v1 = &qword_1ED4BB0F0;
      v2 = sub_1B19F8E10;
      v3 = MEMORY[0x1E0DEDB58];
      goto LABEL_32;
    case 30:
      v1 = (unint64_t *)&unk_1EEF619A0;
      v2 = sub_1B1FA0F44;
      v3 = MEMORY[0x1E0DEDBC8];
      goto LABEL_34;
    case 31:
      v1 = (unint64_t *)&unk_1EEF61998;
      v2 = sub_1B1FA0F44;
      v3 = MEMORY[0x1E0DEDBC8];
      goto LABEL_29;
    case 32:
      v1 = (unint64_t *)&unk_1EEF61988;
      v2 = sub_1B1FA0F44;
      v3 = MEMORY[0x1E0DEDBC8];
      goto LABEL_32;
    case 34:
      v1 = &qword_1ED4BB090;
      v2 = sub_1B1AF0D08;
      v3 = MEMORY[0x1E0DEE0F8];
      goto LABEL_34;
    case 35:
      v1 = (unint64_t *)&unk_1ED4BB0B0;
      v2 = sub_1B1AF0D08;
      v3 = MEMORY[0x1E0DEE0F8];
      goto LABEL_29;
    case 36:
      v1 = &qword_1ED4BB0F8;
      v2 = sub_1B1AF0D08;
      v3 = MEMORY[0x1E0DEE0F8];
      goto LABEL_32;
    case 42:
      v1 = (unint64_t *)&unk_1EEF61940;
      v2 = sub_1B1FA0E78;
      v3 = MEMORY[0x1E0DEE068];
      goto LABEL_34;
    case 43:
      v1 = (unint64_t *)&unk_1EEF61938;
      v2 = sub_1B1FA0E78;
      v3 = MEMORY[0x1E0DEE068];
      goto LABEL_29;
    case 44:
      v1 = (unint64_t *)&unk_1EEF61928;
      v2 = sub_1B1FA0E78;
      v3 = MEMORY[0x1E0DEE068];
      goto LABEL_32;
    case 46:
      v1 = (unint64_t *)&unk_1EEF61980;
      v2 = sub_1B1FA0F00;
      v3 = MEMORY[0x1E0DEDA70];
      goto LABEL_34;
    case 47:
      v1 = (unint64_t *)&unk_1EEF61978;
      v2 = sub_1B1FA0F00;
      v3 = MEMORY[0x1E0DEDA70];
      goto LABEL_29;
    case 48:
      v1 = (unint64_t *)&unk_1EEF61968;
      v2 = sub_1B1FA0F00;
      v3 = MEMORY[0x1E0DEDA70];
      goto LABEL_32;
    case 50:
      v1 = (unint64_t *)&unk_1EEF61960;
      v2 = sub_1B1FA0EBC;
      v3 = MEMORY[0x1E0DEDE70];
LABEL_34:
      v4 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD20];
      goto LABEL_35;
    case 51:
      v1 = (unint64_t *)&unk_1EEF61958;
      v2 = sub_1B1FA0EBC;
      v3 = MEMORY[0x1E0DEDE70];
LABEL_29:
      v4 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50];
      goto LABEL_35;
    case 52:
      v1 = (unint64_t *)&unk_1EEF61948;
      v2 = sub_1B1FA0EBC;
      v3 = MEMORY[0x1E0DEDE70];
LABEL_32:
      v4 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDDA8];
LABEL_35:
      sub_1B19F8E54(0, v1, (uint64_t (*)(void))v2, v3, v4);
      break;
    default:
      sub_1B2229688();
      __break(1u);
      break;
  }
}

uint64_t sub_1B1F9D678()
{
  sub_1B19E52CC((unint64_t *)&unk_1ED4BA630, (uint64_t (*)(uint64_t))type metadata accessor for MTLDataType, (uint64_t)&unk_1B2269CB8);
  return sub_1B2228A64();
}

uint64_t sub_1B1F9D6EC()
{
  sub_1B19E52CC((unint64_t *)&unk_1ED4BA630, (uint64_t (*)(uint64_t))type metadata accessor for MTLDataType, (uint64_t)&unk_1B2269CB8);
  return sub_1B22289EC();
}

id sub_1B1F9D750()
{
  void *v0;
  id v1;
  void *v2;
  id v3;

  v1 = objc_msgSend(v0, sel_bufferPointerType);
  if (!v1)
    return 0;
  v2 = v1;
  v3 = objc_msgSend(v1, sel_elementIsArgumentBuffer);

  return v3;
}

uint64_t sub_1B1F9D7A8()
{
  return sub_1B2228FBC();
}

id sub_1B1F9D7C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  void *v7;

  return objc_msgSend(v7, sel_copyFromBuffer_sourceOffset_toBuffer_destinationOffset_size_, a1, a2, a4, a7 + a5, a3);
}

uint64_t sub_1B1F9D7EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (a4 < -64)
  {
LABEL_2:
    if ((unint64_t)(a5 - 160) >= 0x3B)
    {
      v9 = 1;
    }
    else
    {
      v9 = 1;
      if (((0x7FDF1FF7CFD54FFuLL >> (a5 + 96)) & 1) != 0)
        goto LABEL_18;
    }
    goto LABEL_8;
  }
  if (a4 <= 64)
  {
    if (a4 < 0)
    {
      if ((unint64_t)a4 <= 0xFFFFFFFFFFFFFFC0)
        goto LABEL_2;
      v10 = a1 << -(char)a4;
    }
    else
    {
      v10 = a1 >> a4;
      if ((unint64_t)a4 >= 0x40)
        v10 = a1 >> 63;
    }
  }
  else
  {
    v10 = a1 >> 63;
  }
  if (v10 <= 1)
    v9 = 1;
  else
    v9 = v10;
  if ((unint64_t)(a5 - 160) <= 0x3A && ((1 << (a5 + 96)) & 0x7FDF1FF7CFD54FFLL) != 0)
  {
LABEL_18:
    if ((unint64_t)(a5 - 186) > 0x20)
      v12 = 1;
    else
      v12 = qword_1B22A9968[a5 - 186];
    v11 = 16 * ((v9 + v12 - 1) / v12);
    if (a4 < -64)
      goto LABEL_22;
    goto LABEL_25;
  }
LABEL_8:
  v11 = sub_1B1F9BE6C(a5) * v9;
  if (a4 < -64)
    goto LABEL_22;
LABEL_25:
  if (a4 > 64)
    goto LABEL_37;
  if (a4 < 0)
  {
    if ((unint64_t)a4 > 0xFFFFFFFFFFFFFFC0)
    {
      v13 = a2 << -(char)a4;
      if (v13 > 0)
        goto LABEL_29;
      goto LABEL_37;
    }
LABEL_22:
    if ((unint64_t)(a5 - 160) >= 0x3B)
    {
      v14 = 1;
      v13 = 1;
      return v14 * v11 * v13;
    }
    v13 = 1;
    v14 = 1;
    if (((0x7FDF1FF7CFD54FFuLL >> (a5 + 96)) & 1) == 0)
      return v14 * v11 * v13;
    goto LABEL_45;
  }
  if ((unint64_t)a4 < 0x40)
  {
    v13 = a2 >> a4;
    if (a2 >> a4 > 0)
    {
LABEL_29:
      if ((unint64_t)(a5 - 160) > 0x3A || ((1 << (a5 + 96)) & 0x7FDF1FF7CFD54FFLL) == 0)
      {
LABEL_52:
        if ((a4 & 0x8000000000000000) == 0)
        {
          if ((unint64_t)a4 < 0x40)
          {
LABEL_54:
            v14 = a3 >> a4;
            goto LABEL_55;
          }
LABEL_51:
          v14 = a3 >> 63;
          goto LABEL_55;
        }
        if ((unint64_t)a4 <= 0xFFFFFFFFFFFFFFC0)
        {
LABEL_49:
          v14 = 1;
          return v14 * v11 * v13;
        }
        goto LABEL_60;
      }
LABEL_45:
      if ((unint64_t)(a5 - 186) > 0x20)
        v15 = 1;
      else
        v15 = qword_1B22A9A70[a5 - 186];
      v13 = (v13 + v15 - 1) / v15;
      if (a4 < -64)
        goto LABEL_49;
      if (a4 > 64)
        goto LABEL_51;
      goto LABEL_52;
    }
  }
LABEL_37:
  if ((unint64_t)(a5 - 160) < 0x3B && ((0x7FDF1FF7CFD54FFuLL >> (a5 + 96)) & 1) != 0)
  {
    v13 = 1;
    goto LABEL_45;
  }
  if (a4 > 64)
  {
    v13 = 1;
    goto LABEL_51;
  }
  if ((a4 & 0x8000000000000000) == 0)
  {
    v14 = 1;
    v13 = 1;
    if ((unint64_t)a4 >= 0x40)
      return v14 * v11 * v13;
    goto LABEL_54;
  }
  v13 = 1;
LABEL_60:
  v14 = a3 << -(char)a4;
LABEL_55:
  if (v14 <= 1)
    v14 = 1;
  return v14 * v11 * v13;
}

uint64_t sub_1B1F9DA94(uint64_t result)
{
  switch(result)
  {
    case 71:
      result = 70;
      break;
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
    case 124:
    case 125:
    case 126:
    case 127:
    case 128:
    case 129:
    case 130:
    case 131:
    case 132:
    case 133:
    case 134:
    case 135:
    case 136:
    case 137:
    case 138:
    case 139:
    case 140:
    case 141:
    case 142:
    case 143:
    case 144:
    case 145:
    case 146:
    case 147:
    case 148:
    case 149:
    case 150:
    case 151:
    case 152:
    case 153:
    case 154:
    case 155:
    case 156:
    case 157:
    case 158:
    case 159:
    case 160:
    case 161:
    case 162:
    case 163:
    case 164:
    case 165:
    case 166:
    case 167:
    case 168:
    case 169:
    case 170:
    case 171:
    case 172:
    case 173:
    case 174:
    case 175:
    case 176:
    case 177:
    case 178:
    case 179:
    case 180:
    case 181:
    case 182:
    case 183:
    case 184:
    case 185:
    case 191:
      return result;
    case 81:
      result = 80;
      break;
    case 186:
      result = 204;
      break;
    case 187:
      result = 205;
      break;
    case 188:
      result = 206;
      break;
    case 189:
      result = 207;
      break;
    case 190:
      result = 208;
      break;
    case 192:
      result = 210;
      break;
    case 193:
      result = 211;
      break;
    case 194:
      result = 212;
      break;
    case 195:
      result = 213;
      break;
    case 196:
      result = 214;
      break;
    case 197:
      result = 215;
      break;
    case 198:
      result = 216;
      break;
    case 199:
      result = 217;
      break;
    case 200:
      result = 218;
      break;
    default:
      if (result == 11)
        result = 10;
      break;
  }
  return result;
}

uint64_t sub_1B1F9DB48(uint64_t result)
{
  switch(result)
  {
    case 70:
      result = 71;
      break;
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
    case 124:
    case 125:
    case 126:
    case 127:
    case 128:
    case 129:
    case 130:
    case 131:
    case 132:
    case 133:
    case 134:
    case 135:
    case 136:
    case 137:
    case 138:
    case 139:
    case 140:
    case 141:
    case 142:
    case 143:
    case 144:
    case 145:
    case 146:
    case 147:
    case 148:
    case 149:
    case 150:
    case 151:
    case 152:
    case 153:
    case 154:
    case 155:
    case 156:
    case 157:
    case 158:
    case 159:
    case 160:
    case 161:
    case 162:
    case 163:
    case 164:
    case 165:
    case 166:
    case 167:
    case 168:
    case 169:
    case 170:
    case 171:
    case 172:
    case 173:
    case 174:
    case 175:
    case 176:
    case 177:
    case 178:
    case 179:
    case 180:
    case 181:
    case 182:
    case 183:
    case 184:
    case 185:
    case 186:
    case 187:
    case 188:
    case 189:
    case 190:
    case 191:
    case 192:
    case 193:
    case 194:
    case 195:
    case 196:
    case 197:
    case 198:
    case 199:
    case 200:
    case 201:
    case 202:
    case 203:
    case 209:
      return result;
    case 80:
      result = 81;
      break;
    case 204:
      result = 186;
      break;
    case 205:
      result = 187;
      break;
    case 206:
      result = 188;
      break;
    case 207:
      result = 189;
      break;
    case 208:
      result = 190;
      break;
    case 210:
      result = 192;
      break;
    case 211:
      result = 193;
      break;
    case 212:
      result = 194;
      break;
    case 213:
      result = 195;
      break;
    case 214:
      result = 196;
      break;
    case 215:
      result = 197;
      break;
    case 216:
      result = 198;
      break;
    case 217:
      result = 199;
      break;
    case 218:
      result = 200;
      break;
    default:
      if (result == 10)
        result = 11;
      break;
  }
  return result;
}

void sub_1B1F9DBFC()
{
  qword_1EEFD5790 = 500;
}

void sub_1B1F9DC0C()
{
  qword_1EEFD5798 = 520;
}

void sub_1B1F9DC1C()
{
  qword_1EEFD57A0 = 505;
}

void sub_1B1F9DC2C()
{
  qword_1EEFD57A8 = 525;
}

void sub_1B1F9DC3C()
{
  qword_1EEFD57B0 = 502;
}

void sub_1B1F9DC4C()
{
  qword_1EEFD57B8 = 522;
}

void sub_1B1F9DC5C()
{
  qword_1EEFD57C0 = 506;
}

void sub_1B1F9DC6C()
{
  qword_1EEFD57C8 = 526;
}

uint64_t sub_1B1F9DC7C()
{
  void *v0;

  return sub_1B1F9D7EC((uint64_t)objc_msgSend(v0, sel_width), (uint64_t)objc_msgSend(v0, sel_height), 1, 0, (uint64_t)objc_msgSend(v0, sel_pixelFormat));
}

uint64_t sub_1B1F9DCE8(uint64_t a1)
{
  void *v1;

  return sub_1B1F9D7EC((uint64_t)objc_msgSend(v1, sel_width), (uint64_t)objc_msgSend(v1, sel_height), (uint64_t)objc_msgSend(v1, sel_depth), a1, (uint64_t)objc_msgSend(v1, sel_pixelFormat));
}

uint64_t sub_1B1F9DD74()
{
  void *v0;
  id v1;
  uint64_t result;

  v1 = objc_msgSend(v0, sel_textureType);
  result = 1;
  switch((unint64_t)v1)
  {
    case 1uLL:
    case 3uLL:
    case 8uLL:
      result = (uint64_t)objc_msgSend(v0, sel_arrayLength);
      break;
    case 5uLL:
      result = 6;
      break;
    case 6uLL:
      result = 6 * (_QWORD)objc_msgSend(v0, sel_arrayLength);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1B1F9DDF8()
{
  void *v0;

  objc_msgSend(v0, sel_pixelFormat);
  objc_msgSend(v0, sel_mipmapLevelCount);
  return sub_1B2228E60();
}

uint64_t sub_1B1F9DE5C()
{
  void *v0;

  switch((unint64_t)objc_msgSend(v0, sel_textureType))
  {
    case 0uLL:
    case 5uLL:
      sub_1B2229430();
      sub_1B2228890();
      objc_msgSend(v0, sel_pixelFormat);
      type metadata accessor for MTLPixelFormat(0);
      sub_1B22295EC();
      sub_1B2228890();
      objc_msgSend(v0, sel_width);
      goto LABEL_6;
    case 2uLL:
      sub_1B2229430();
      sub_1B2228890();
      objc_msgSend(v0, sel_pixelFormat);
      type metadata accessor for MTLPixelFormat(0);
      sub_1B22295EC();
      sub_1B2228890();
      objc_msgSend(v0, sel_width);
      sub_1B2229A0C();
      sub_1B2228890();
      swift_bridgeObjectRelease();
      sub_1B2228890();
      objc_msgSend(v0, sel_height);
      goto LABEL_6;
    case 7uLL:
      sub_1B2229430();
      sub_1B2228890();
      objc_msgSend(v0, sel_pixelFormat);
      type metadata accessor for MTLPixelFormat(0);
      sub_1B22295EC();
      sub_1B2228890();
      objc_msgSend(v0, sel_width);
      sub_1B2229A0C();
      sub_1B2228890();
      swift_bridgeObjectRelease();
      sub_1B2228890();
      objc_msgSend(v0, sel_height);
      sub_1B2229A0C();
      sub_1B2228890();
      swift_bridgeObjectRelease();
      sub_1B2228890();
      objc_msgSend(v0, sel_depth);
LABEL_6:
      sub_1B2229A0C();
      sub_1B2228890();
      swift_bridgeObjectRelease();
      sub_1B2228890();
      objc_msgSend(v0, sel_mipmapLevelCount);
      sub_1B2229A0C();
      sub_1B2228890();
      swift_bridgeObjectRelease();
      sub_1B2228890();
      objc_msgSend(v0, sel_usage);
      type metadata accessor for MTLTextureUsage(0);
      sub_1B22295EC();
      sub_1B2228890();
      break;
    default:
      sub_1B2228890();
      sub_1B2229CDC();
      break;
  }
  return 0;
}

id sub_1B1F9E2E8()
{
  void *v0;
  void *v1;
  id v2;
  id v3;
  id v4;
  __int128 v6;

  sub_1B1B9DAD4(0, &qword_1ED4842F0);
  v1 = (void *)swift_unknownObjectRetain();
  v2 = sub_1B1FA04C4(v1);
  objc_msgSend(v2, sel_setResourceOptions_, 0);
  objc_msgSend(v2, sel_setUsage_, 0);
  v3 = objc_msgSend(objc_msgSend(v0, sel_device), sel_newTextureWithDescriptor_, v2);
  swift_unknownObjectRelease();
  sub_1B19FB884(&v6);
  v4 = objc_msgSend(v0, sel_device);
  sub_1B1F9E5B0((void (*)(void))sub_1B1FA0FA8);

  swift_unknownObjectRelease();
  return v3;
}

char *sub_1B1F9E414(void *a1, id a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  char *result;
  char *v13;
  uint64_t i;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  __int128 v24;
  uint64_t v27;
  id v28;
  __int128 v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;

  *((_QWORD *)&v24 + 1) = a4;
  *(_QWORD *)&v24 = a3;
  v7 = (uint64_t)objc_msgSend(a2, sel_width);
  v8 = (uint64_t)objc_msgSend(a2, sel_height);
  v9 = (uint64_t)objc_msgSend(a2, sel_depth);
  v10 = objc_msgSend(a2, sel_textureType);
  v11 = 6;
  if (v10 != (id)5)
    v11 = 1;
  v27 = v11;
  v28 = a2;
  result = (char *)objc_msgSend(a2, sel_mipmapLevelCount);
  v23 = result;
  if (result)
  {
    v13 = 0;
    do
    {
      for (i = 0; i != v27; ++i)
      {
        sub_1B1BA8088(v7, v8, v9, &v34);
        v15 = v35;
        v16 = v34;
        v34 = v24;
        v35 = a5;
        v32 = v16;
        v33 = v15;
        v30 = v24;
        v31 = a5;
        result = (char *)objc_msgSend(a1, sel_copyFromTexture_sourceSlice_sourceLevel_sourceOrigin_sourceSize_toTexture_destinationSlice_destinationLevel_destinationOrigin_, v28, i, v13, &v34, &v32, a6, i, v13, &v30);
      }
      ++v13;
      if (v7 >= 0)
        v17 = v7;
      else
        v17 = v7 + 1;
      v18 = v17 >> 1;
      if (v7 > 1)
        v7 = v18;
      if (v8 >= 0)
        v19 = v8;
      else
        v19 = v8 + 1;
      v20 = v19 >> 1;
      if (v8 > 1)
        v8 = v20;
      if (v9 >= 0)
        v21 = v9;
      else
        v21 = v9 + 1;
      v22 = v21 >> 1;
      if (v9 > 1)
        v9 = v22;
    }
    while (v13 != v23);
  }
  return result;
}

uint64_t sub_1B1F9E5B0(void (*a1)(void))
{
  void *v1;
  id v3;
  id v4;

  v3 = objc_msgSend(objc_msgSend(v1, sel_newCommandQueue), sel_commandBuffer);
  v4 = objc_msgSend(v3, sel_blitCommandEncoder);
  a1();
  objc_msgSend(v4, sel_endEncoding);
  objc_msgSend(v3, sel_commit);
  sub_1B1F9BB9C();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return swift_unknownObjectRelease();
}

uint64_t MTLClearColor.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  _BYTE v3[24];
  uint64_t v4;

  sub_1B19FA070(a1, a1[3]);
  sub_1B222A15C();
  sub_1B19FC264((uint64_t)v3, v4);
  sub_1B2229B80();
  if (!v1)
  {
    sub_1B19FC264((uint64_t)v3, v4);
    sub_1B2229B80();
    sub_1B19FC264((uint64_t)v3, v4);
    sub_1B2229B80();
    sub_1B19FC264((uint64_t)v3, v4);
    sub_1B2229B80();
  }
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v3);
}

double MTLClearColor.init(from:)(_QWORD *a1)
{
  return sub_1B1FA0770(a1);
}

void sub_1B1F9E7C4(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = sub_1B1FA0770(a1);
  if (!v2)
  {
    *(double *)a2 = v4;
    *(_QWORD *)(a2 + 8) = v5;
    *(_QWORD *)(a2 + 16) = v6;
    *(_QWORD *)(a2 + 24) = v7;
  }
}

uint64_t sub_1B1F9E7F0(_QWORD *a1)
{
  return MTLClearColor.encode(to:)(a1);
}

id sub_1B1F9E80C(void *a1)
{
  void *v1;

  objc_msgSend(v1, sel_setTexture_, objc_msgSend(a1, sel_texture));
  swift_unknownObjectRelease();
  objc_msgSend(v1, sel_setLoadAction_, objc_msgSend(a1, sel_loadAction));
  objc_msgSend(v1, sel_setStoreAction_, objc_msgSend(a1, sel_storeAction));
  objc_msgSend(v1, sel_setStoreActionOptions_, objc_msgSend(a1, sel_storeActionOptions));
  objc_msgSend(v1, sel_setLevel_, objc_msgSend(a1, sel_level));
  objc_msgSend(v1, sel_setSlice_, objc_msgSend(a1, sel_slice));
  objc_msgSend(v1, sel_setDepthPlane_, objc_msgSend(a1, sel_depthPlane));
  objc_msgSend(v1, sel_setResolveTexture_, objc_msgSend(a1, sel_resolveTexture));
  swift_unknownObjectRelease();
  objc_msgSend(v1, sel_setResolveLevel_, objc_msgSend(a1, sel_resolveLevel));
  objc_msgSend(v1, sel_setResolveDepthPlane_, objc_msgSend(a1, sel_resolveDepthPlane));
  return objc_msgSend(v1, sel_setResolveSlice_, objc_msgSend(a1, sel_resolveSlice));
}

BOOL sub_1B1F9E9DC(void *a1)
{
  void *v1;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;

  v3 = objc_msgSend(v1, sel_texture);
  v4 = objc_msgSend(a1, sel_texture);
  v5 = v4;
  if (v3)
  {
    swift_unknownObjectRelease();
    if (!v5)
      return 0;
    swift_unknownObjectRelease();
    if (v3 != v5)
      return 0;
  }
  else if (v4)
  {
    goto LABEL_6;
  }
  v6 = objc_msgSend(v1, sel_loadAction);
  if (v6 != objc_msgSend(a1, sel_loadAction))
    return 0;
  v7 = objc_msgSend(v1, sel_storeAction);
  if (v7 != objc_msgSend(a1, sel_storeAction))
    return 0;
  v8 = objc_msgSend(v1, sel_level);
  if (v8 != objc_msgSend(a1, sel_level))
    return 0;
  v9 = objc_msgSend(v1, sel_resolveTexture);
  v10 = objc_msgSend(a1, sel_resolveTexture);
  v11 = v10;
  if (v9)
  {
    swift_unknownObjectRelease();
    if (v11)
    {
      swift_unknownObjectRelease();
      return v9 == v11;
    }
    return 0;
  }
  if (v10)
  {
LABEL_6:
    swift_unknownObjectRelease();
    return 0;
  }
  return 1;
}

uint64_t MTLTextureType.encode(to:)(_QWORD *a1, uint64_t a2)
{
  return sub_1B1F9FC80(a1, a2, (void (*)(_QWORD *__return_ptr, uint64_t, uint64_t))MEMORY[0x1E0DEE258], MEMORY[0x1E0DED3C8]);
}

uint64_t MTLTextureType.init(from:)(_QWORD *a1)
{
  return sub_1B1F9EBF8(a1);
}

uint64_t sub_1B1F9EB88@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1B1F9ECB0(a1, a2);
}

uint64_t sub_1B1F9EB9C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1B1F9FDEC(a1, a2, a3, (void (*)(_QWORD *__return_ptr, uint64_t, uint64_t))MEMORY[0x1E0DEE258], MEMORY[0x1E0DED3C8]);
}

uint64_t MTLPixelFormat.encode(to:)(_QWORD *a1, uint64_t a2)
{
  return sub_1B1F9FC80(a1, a2, (void (*)(_QWORD *__return_ptr, uint64_t, uint64_t))MEMORY[0x1E0DEE258], MEMORY[0x1E0DED3C8]);
}

uint64_t MTLPixelFormat.init(from:)(_QWORD *a1)
{
  return sub_1B1F9EBF8(a1);
}

uint64_t sub_1B1F9EBF8(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];
  uint64_t v6;

  v3 = (uint64_t)sub_1B19FA070(a1, a1[3]);
  sub_1B222A12C();
  if (v1)
  {
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  }
  else
  {
    sub_1B19FC264((uint64_t)v5, v6);
    v3 = sub_1B2229A9C();
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v5);
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  }
  return v3;
}

uint64_t sub_1B1F9ECB0@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t result;
  _BYTE v7[24];
  uint64_t v8;

  sub_1B19FA070(a1, a1[3]);
  sub_1B222A12C();
  if (v2)
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  sub_1B19FC264((uint64_t)v7, v8);
  v5 = sub_1B2229A9C();
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v7);
  result = _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  *a2 = v5;
  return result;
}

uint64_t MTLTextureSwizzle.encode(to:)(_QWORD *a1)
{
  _BYTE v2[24];
  uint64_t v3;

  sub_1B19FA070(a1, a1[3]);
  sub_1B222A168();
  sub_1B19FC264((uint64_t)v2, v3);
  sub_1B2229E08();
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v2);
}

uint64_t MTLTextureSwizzle.init(from:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD v5[4];

  v3 = (uint64_t)sub_1B19FA070(a1, a1[3]);
  sub_1B222A138();
  if (v1)
  {
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  }
  else
  {
    sub_1B19FA070(v5, v5[3]);
    v3 = sub_1B2229D84();
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v5);
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  }
  return v3;
}

uint64_t sub_1B1F9EEB4@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  char v5;
  uint64_t result;
  _QWORD v7[4];

  sub_1B19FA070(a1, a1[3]);
  sub_1B222A138();
  if (v2)
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  sub_1B19FA070(v7, v7[3]);
  v5 = sub_1B2229D84();
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v7);
  result = _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  *a2 = v5;
  return result;
}

uint64_t MTLResourceOptions.encode(to:)(_QWORD *a1, uint64_t a2)
{
  return sub_1B1F9FC80(a1, a2, (void (*)(_QWORD *__return_ptr, uint64_t, uint64_t))MEMORY[0x1E0DEE260], (void (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED6F0]);
}

unint64_t MTLResourceOptions.init(from:)(_QWORD *a1)
{
  return sub_1B1FA08DC(a1);
}

unint64_t sub_1B1F9EFA8@<X0>(_QWORD *a1@<X0>, unint64_t *a2@<X8>)
{
  uint64_t v2;
  unint64_t result;

  result = sub_1B1FA08DC(a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t sub_1B1F9EFD0(_QWORD *a1)
{
  return sub_1B1F9F2AC(a1);
}

uint64_t MTLStorageMode.encode(to:)(_QWORD *a1, uint64_t a2)
{
  return sub_1B1F9FC80(a1, a2, (void (*)(_QWORD *__return_ptr, uint64_t, uint64_t))MEMORY[0x1E0DEE260], (void (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED6F0]);
}

_QWORD *MTLStorageMode.init(from:)(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[4];

  v3 = sub_1B19FA070(a1, a1[3]);
  sub_1B222A138();
  if (v1)
  {
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  }
  else
  {
    sub_1B19FA070(v6, v6[3]);
    v4 = sub_1B2229D60();
    if (v4 == 1)
      v3 = 0;
    else
      v3 = (_QWORD *)v4;
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v6);
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  }
  return v3;
}

uint64_t sub_1B1F9F0CC@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  _QWORD v8[4];

  sub_1B19FA070(a1, a1[3]);
  sub_1B222A138();
  if (v2)
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  sub_1B19FA070(v8, v8[3]);
  v5 = sub_1B2229D60();
  if (v5 == 1)
    v7 = 0;
  else
    v7 = v5;
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v8);
  result = _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  *a2 = v7;
  return result;
}

uint64_t sub_1B1F9F194(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1B1F9FDEC(a1, a2, a3, (void (*)(_QWORD *__return_ptr, uint64_t, uint64_t))MEMORY[0x1E0DEE260], (void (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED6F0]);
}

uint64_t MTLTextureUsage.encode(to:)(_QWORD *a1, uint64_t a2)
{
  return sub_1B1F9FC80(a1, a2, (void (*)(_QWORD *__return_ptr, uint64_t, uint64_t))MEMORY[0x1E0DEE260], (void (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED6F0]);
}

uint64_t MTLTextureUsage.init(from:)(_QWORD *a1)
{
  return sub_1B1F9FD34(a1);
}

uint64_t sub_1B1F9F1F0@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t result;
  _QWORD v7[4];

  sub_1B19FA070(a1, a1[3]);
  sub_1B222A138();
  if (v2)
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  sub_1B19FA070(v7, v7[3]);
  v5 = sub_1B2229D60();
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v7);
  result = _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  *a2 = v5;
  return result;
}

uint64_t sub_1B1F9F2AC(_QWORD *a1)
{
  _BYTE v2[24];
  uint64_t v3;

  sub_1B19FA070(a1, a1[3]);
  sub_1B222A168();
  sub_1B19FC264((uint64_t)v2, v3);
  sub_1B2229DE4();
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v2);
}

uint64_t MTLCPUCacheMode.encode(to:)(_QWORD *a1, uint64_t a2)
{
  return sub_1B1F9FC80(a1, a2, (void (*)(_QWORD *__return_ptr, uint64_t, uint64_t))MEMORY[0x1E0DEE260], (void (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED6F0]);
}

uint64_t MTLCPUCacheMode.init(from:)(_QWORD *a1)
{
  return sub_1B1F9FD34(a1);
}

uint64_t sub_1B1F9F374@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1B1F9F1F0(a1, a2);
}

uint64_t MTLCullMode.encode(to:)(_QWORD *a1, uint64_t a2)
{
  return sub_1B1F9FC80(a1, a2, (void (*)(_QWORD *__return_ptr, uint64_t, uint64_t))MEMORY[0x1E0DEE260], (void (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED6F0]);
}

uint64_t MTLCullMode.init(from:)(_QWORD *a1)
{
  return sub_1B1F9FD34(a1);
}

void *static MTLCullMode.allCases.getter()
{
  return &unk_1E63C69B8;
}

void sub_1B1F9F3CC(_QWORD *a1@<X8>)
{
  *a1 = &unk_1E63C6A20;
}

uint64_t MTLWinding.encode(to:)(_QWORD *a1, uint64_t a2)
{
  return sub_1B1F9FC80(a1, a2, (void (*)(_QWORD *__return_ptr, uint64_t, uint64_t))MEMORY[0x1E0DEE260], (void (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED6F0]);
}

uint64_t MTLWinding.init(from:)(_QWORD *a1)
{
  return sub_1B1F9FD34(a1);
}

void *static MTLWinding.allCases.getter()
{
  return &unk_1E63C67B8;
}

void sub_1B1F9F420(_QWORD *a1@<X8>)
{
  *a1 = &unk_1E63C6818;
}

uint64_t MTLHazardTrackingMode.encode(to:)(_QWORD *a1, uint64_t a2)
{
  return sub_1B1F9FC80(a1, a2, (void (*)(_QWORD *__return_ptr, uint64_t, uint64_t))MEMORY[0x1E0DEE260], (void (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED6F0]);
}

uint64_t MTLHazardTrackingMode.init(from:)(_QWORD *a1)
{
  return sub_1B1F9FD34(a1);
}

void sub_1B1F9F468(char *a1)
{
  sub_1B1F9A420(*a1);
}

void sub_1B1F9F474()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  sub_1B222A06C();
  __asm { BR              X9 }
}

uint64_t sub_1B1F9F4B8()
{
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

void sub_1B1F9F518()
{
  __asm { BR              X10 }
}

uint64_t sub_1B1F9F54C()
{
  sub_1B2228824();
  return swift_bridgeObjectRelease();
}

void sub_1B1F9F598()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  sub_1B222A06C();
  __asm { BR              X9 }
}

uint64_t sub_1B1F9F5D8()
{
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

uint64_t sub_1B1F9F638@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B1FA06C0();
  *a1 = result;
  return result;
}

uint64_t sub_1B1F9F664()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_1B1F9F68C + 4 * byte_1B22A8E3D[*v0]))();
}

void sub_1B1F9F68C(_QWORD *a1@<X8>)
{
  *a1 = 0x6E65657267;
  a1[1] = 0xE500000000000000;
}

void sub_1B1F9F6A4(_QWORD *a1@<X8>)
{
  *a1 = 1702194274;
  a1[1] = 0xE400000000000000;
}

void sub_1B1F9F6B8(_QWORD *a1@<X8>)
{
  *a1 = 0x6168706C61;
  a1[1] = 0xE500000000000000;
}

uint64_t sub_1B1F9F6D0()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1B1F9F6F8 + 4 * byte_1B22A8E41[*v0]))(6579570, 0xE300000000000000);
}

uint64_t sub_1B1F9F6F8()
{
  return 0x6E65657267;
}

uint64_t sub_1B1F9F70C()
{
  return 1702194274;
}

uint64_t sub_1B1F9F71C()
{
  return 0x6168706C61;
}

uint64_t sub_1B1F9F730@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B1FA06C0();
  *a1 = result;
  return result;
}

uint64_t sub_1B1F9F754()
{
  sub_1B1FA099C();
  return sub_1B222A1D4();
}

uint64_t sub_1B1F9F77C()
{
  sub_1B1FA099C();
  return sub_1B222A1E0();
}

uint64_t MTLTextureSwizzleChannels.encode(to:)(_QWORD *a1, int a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v12;
  char v13;
  char v14;
  char v15;
  char v16;
  char v17;
  char v18;
  char v19;
  char v20;

  sub_1B19F8E54(0, &qword_1EEF618C0, (uint64_t (*)(void))sub_1B1FA099C, (uint64_t)&_s10CodingKeysON, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = (char *)&v12 - v9;
  sub_1B19FA070(a1, a1[3]);
  sub_1B1FA099C();
  sub_1B222A180();
  v20 = a2;
  v19 = 0;
  type metadata accessor for MTLTextureSwizzle(0);
  sub_1B19E52CC(&qword_1EEF618D0, (uint64_t (*)(uint64_t))type metadata accessor for MTLTextureSwizzle, (uint64_t)&protocol conformance descriptor for MTLTextureSwizzle);
  sub_1B2229958();
  if (!v2)
  {
    v18 = BYTE1(a2);
    v17 = 1;
    sub_1B2229958();
    v16 = BYTE2(a2);
    v15 = 2;
    sub_1B2229958();
    v14 = HIBYTE(a2);
    v13 = 3;
    sub_1B2229958();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
}

uint64_t MTLTextureSwizzleChannels.init(from:)(_QWORD *a1)
{
  return sub_1B1FA09E0(a1);
}

uint64_t sub_1B1F9F9A0@<X0>(_QWORD *a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = sub_1B1FA09E0(a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t sub_1B1F9F9C8(_QWORD *a1)
{
  int *v1;

  return MTLTextureSwizzleChannels.encode(to:)(a1, *v1);
}

uint64_t sub_1B1F9F9E0(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  int v4;
  uint64_t v5;
  unint64_t v6;

  MTLPixelFormatGetInfoForDevice();
  switch(a2)
  {
    case 3:
      result = WORD1(v6) & 1;
      break;
    case 16:
      result = (v6 >> 17) & 1;
      break;
    case 29:
      result = (v6 >> 18) & 1;
      break;
    case 33:
      result = (v6 >> 19) & 1;
      break;
    case 37:
      result = (v6 >> 20) & 1;
      break;
    case 41:
      result = (v6 >> 21) & 1;
      break;
    default:
      if (qword_1ED4BF430 != -1)
        swift_once();
      v6 = 0xE000000000000000;
      swift_retain();
      sub_1B2229430();
      type metadata accessor for MTLDataType(0);
      sub_1B22295EC();
      sub_1B2228890();
      v4 = sub_1B2228E90();
      if (qword_1ED4BF658 != -1)
        swift_once();
      v5 = 0;
      swift_retain();
      sub_1B1F1AD70(v4, &v5, 0, 0xE000000000000000);
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      result = 0;
      break;
  }
  return result;
}

id sub_1B1F9FB98()
{
  void *v0;

  return objc_msgSend(v0, sel_supportsFeatureSet_, 11);
}

id sub_1B1F9FBBC()
{
  void *v0;

  return objc_msgSend(v0, sel_supportsFamily_, 1001);
}

void sub_1B1F9FBE0(_QWORD *a1@<X8>)
{
  *a1 = &unk_1E636F7D8;
}

void sub_1B1F9FBF0(_QWORD *a1@<X8>)
{
  *a1 = &unk_1E636D820;
}

id sub_1B1F9FC00(uint64_t a1, uint64_t a2)
{
  void *v2;

  return objc_msgSend(v2, sel_newBufferWithLength_options_, a1, a2);
}

void *static MTLCompareFunction.allCases.getter()
{
  return &unk_1E63C8308;
}

void sub_1B1F9FC4C(_QWORD *a1@<X8>)
{
  *a1 = &unk_1E63C8308;
}

uint64_t MTLCompareFunction.encode(to:)(_QWORD *a1, uint64_t a2)
{
  return sub_1B1F9FC80(a1, a2, (void (*)(_QWORD *__return_ptr, uint64_t, uint64_t))MEMORY[0x1E0DEE260], (void (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED6F0]);
}

uint64_t sub_1B1F9FC80(_QWORD *a1, uint64_t a2, void (*a3)(_QWORD *__return_ptr, uint64_t, uint64_t), void (*a4)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[3];
  uint64_t v13;
  uint64_t v14;

  v7 = a1[3];
  v8 = a1[4];
  sub_1B19FA070(a1, v7);
  a3(v12, v7, v8);
  v9 = v13;
  v10 = v14;
  sub_1B19FC264((uint64_t)v12, v13);
  a4(a2, v9, v10);
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v12);
}

uint64_t MTLCompareFunction.init(from:)(_QWORD *a1)
{
  return sub_1B1F9FD34(a1);
}

uint64_t sub_1B1F9FD34(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD v5[4];

  v3 = (uint64_t)sub_1B19FA070(a1, a1[3]);
  sub_1B222A138();
  if (v1)
  {
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  }
  else
  {
    sub_1B19FA070(v5, v5[3]);
    v3 = sub_1B2229D60();
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v5);
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  }
  return v3;
}

uint64_t sub_1B1F9FDEC(_QWORD *a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD *__return_ptr, uint64_t, uint64_t), void (*a5)(uint64_t, uint64_t, uint64_t))
{
  uint64_t *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[3];
  uint64_t v15;
  uint64_t v16;

  v8 = *v5;
  v9 = a1[3];
  v10 = a1[4];
  sub_1B19FA070(a1, v9);
  a4(v14, v9, v10);
  v11 = v15;
  v12 = v16;
  sub_1B19FC264((uint64_t)v14, v15);
  a5(v8, v11, v12);
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v14);
}

uint64_t sub_1B1F9FE8C(uint64_t a1)
{
  uint64_t result;

  result = 0x706C41646E656C42;
  switch(a1)
  {
    case 0:
      result = 1869768026;
      break;
    case 1:
      result = 6647375;
      break;
    case 2:
      result = 0x6F43656372756F53;
      break;
    case 3:
      result = 0xD000000000000013;
      break;
    case 4:
      result = 0x6C41656372756F53;
      break;
    case 5:
      result = 0xD000000000000013;
      break;
    case 6:
      result = 0xD000000000000010;
      break;
    case 7:
      result = 0xD000000000000018;
      break;
    case 8:
      result = 0xD000000000000010;
      break;
    case 9:
      result = 0xD000000000000018;
      break;
    case 10:
    case 16:
    case 18:
      result = 0xD000000000000014;
      break;
    case 11:
      result = 0x6C6F43646E656C42;
      break;
    case 12:
      result = 0xD000000000000012;
      break;
    case 13:
      return result;
    case 14:
      result = 0xD000000000000012;
      break;
    case 15:
      result = 0x4331656372756F53;
      break;
    case 17:
      result = 0x4131656372756F53;
      break;
    default:
      result = sub_1B2229688();
      __break(1u);
      break;
  }
  return result;
}

uint64_t sub_1B1FA00DC(uint64_t a1)
{
  char v1;

  v1 = a1;
  if ((~(_BYTE)a1 & 0xF) != 0)
  {
    if (!a1)
      return 1701736270;
    if ((a1 & 8) != 0)
    {
      sub_1B2228890();
      if ((v1 & 4) == 0)
      {
LABEL_6:
        if ((v1 & 2) == 0)
          goto LABEL_7;
        goto LABEL_14;
      }
    }
    else if ((a1 & 4) == 0)
    {
      goto LABEL_6;
    }
    sub_1B2228890();
    if ((v1 & 2) == 0)
    {
LABEL_7:
      if ((v1 & 1) == 0)
        return 0;
LABEL_8:
      sub_1B2228890();
      return 0;
    }
LABEL_14:
    sub_1B2228890();
    if ((v1 & 1) == 0)
      return 0;
    goto LABEL_8;
  }
  return 7105601;
}

uint64_t sub_1B1FA0230(uint64_t a1)
{
  uint64_t result;

  switch(a1)
  {
    case 3:
    case 4:
    case 5:
    case 6:
    case 16:
    case 17:
    case 18:
    case 19:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
      result = 0x746E6174736E6F43;
      break;
    default:
      result = sub_1B2229688();
      __break(1u);
      break;
  }
  return result;
}

id sub_1B1FA04C4(void *a1)
{
  id v2;

  v2 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
  objc_msgSend(v2, sel_setTextureType_, objc_msgSend(a1, sel_textureType));
  objc_msgSend(v2, sel_setPixelFormat_, objc_msgSend(a1, sel_pixelFormat));
  objc_msgSend(v2, sel_setWidth_, objc_msgSend(a1, sel_width));
  objc_msgSend(v2, sel_setHeight_, objc_msgSend(a1, sel_height));
  objc_msgSend(v2, sel_setDepth_, objc_msgSend(a1, sel_depth));
  objc_msgSend(v2, sel_setMipmapLevelCount_, objc_msgSend(a1, sel_mipmapLevelCount));
  objc_msgSend(v2, sel_setSampleCount_, objc_msgSend(a1, sel_sampleCount));
  objc_msgSend(v2, sel_setArrayLength_, objc_msgSend(a1, sel_arrayLength));
  objc_msgSend(v2, sel_setCpuCacheMode_, objc_msgSend(a1, sel_cpuCacheMode));
  objc_msgSend(v2, sel_setStorageMode_, objc_msgSend(a1, sel_storageMode));
  objc_msgSend(v2, sel_setHazardTrackingMode_, objc_msgSend(a1, sel_hazardTrackingMode));
  objc_msgSend(v2, sel_setUsage_, objc_msgSend(a1, sel_usage));

  swift_unknownObjectRelease();
  return v2;
}

uint64_t sub_1B1FA06C0()
{
  unint64_t v0;

  v0 = sub_1B2229730();
  swift_bridgeObjectRelease();
  if (v0 >= 4)
    return 4;
  else
    return v0;
}

uint64_t sub_1B1FA0708(int32x4_t a1, int32x4_t a2)
{
  int32x4_t v2;
  uint64_t v4;

  v2 = vaddq_s32(a2, a1);
  sub_1B1BA8088((v2.i32[0] - 1) / a2.i32[0], (v2.i32[1] - 1) / a2.i32[1], (v2.i32[2] - 1) / a2.i32[2], &v4);
  return v4;
}

double sub_1B1FA0770(_QWORD *a1)
{
  double v2;
  double v3;
  _BYTE v5[24];
  uint64_t v6;

  sub_1B19FA070(a1, a1[3]);
  sub_1B222A12C();
  sub_1B19FC264((uint64_t)v5, v6);
  sub_1B2229A78();
  v3 = v2;
  sub_1B19FC264((uint64_t)v5, v6);
  sub_1B2229A78();
  sub_1B19FC264((uint64_t)v5, v6);
  sub_1B2229A78();
  sub_1B19FC264((uint64_t)v5, v6);
  sub_1B2229A78();
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v5);
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  return v3;
}

unint64_t sub_1B1FA08DC(_QWORD *a1)
{
  uint64_t v1;
  unint64_t v3;
  _QWORD v5[4];

  v3 = (unint64_t)sub_1B19FA070(a1, a1[3]);
  sub_1B222A138();
  if (!v1)
  {
    sub_1B19FA070(v5, v5[3]);
    v3 = sub_1B2229D60() & 0xFFFFFFFFFFFFFFEFLL;
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v5);
  }
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  return v3;
}

unint64_t sub_1B1FA099C()
{
  unint64_t result;

  result = qword_1EEF618C8;
  if (!qword_1EEF618C8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22A95F4, &_s10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EEF618C8);
  }
  return result;
}

uint64_t sub_1B1FA09E0(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t v14;
  int v15;
  int v16;
  char v17;
  unsigned __int8 v18;
  char v19;
  unsigned __int8 v20;
  char v21;
  unsigned __int8 v22;
  char v23;
  unsigned __int8 v24;

  sub_1B19F8E54(0, &qword_1EEF619A8, (uint64_t (*)(void))sub_1B1FA099C, (uint64_t)&_s10CodingKeysON, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v6);
  v8 = (char *)&v14 - v7;
  sub_1B19FA070(a1, a1[3]);
  sub_1B1FA099C();
  sub_1B222A150();
  if (v1)
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  type metadata accessor for MTLTextureSwizzle(0);
  v23 = 0;
  sub_1B19E52CC(&qword_1EEF619B0, (uint64_t (*)(uint64_t))type metadata accessor for MTLTextureSwizzle, (uint64_t)&protocol conformance descriptor for MTLTextureSwizzle);
  sub_1B2229814();
  v9 = v24;
  v21 = 1;
  sub_1B2229814();
  v16 = v9;
  v10 = v22;
  v19 = 2;
  sub_1B2229814();
  v15 = v10;
  v11 = v20;
  v17 = 3;
  sub_1B2229814();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  v12 = v18;
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  return v16 | (v15 << 8) | (v11 << 16) | (v12 << 24);
}

uint64_t sub_1B1FA0C1C()
{
  return sub_1B1FA0C50(&qword_1EEF618D8, (uint64_t)&unk_1EEF618E0, (uint64_t)type metadata accessor for MTLCullMode, (uint64_t (*)(uint64_t))sub_1B1FA0CF8);
}

uint64_t sub_1B1FA0C50(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a4(255);
    result = MEMORY[0x1B5E23E74](MEMORY[0x1E0DEAF50], v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1B1FA0C90()
{
  return sub_1B1FA0C50(&qword_1EEF618E8, (uint64_t)&unk_1EEF618F0, (uint64_t)type metadata accessor for MTLWinding, (uint64_t (*)(uint64_t))sub_1B1FA0CF8);
}

uint64_t sub_1B1FA0CC4()
{
  return sub_1B1FA0C50(&qword_1EEF618F8, (uint64_t)&unk_1EEF61900, (uint64_t)type metadata accessor for MTLCompareFunction, (uint64_t (*)(uint64_t))sub_1B1FA0CF8);
}

void sub_1B1FA0CF8(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    a3(255);
    v4 = sub_1B2228B6C();
    if (!v5)
      atomic_store(v4, a2);
  }
}

ValueMetadata *_s10CodingKeysOMa()
{
  return &_s10CodingKeysON;
}

unint64_t sub_1B1FA0D5C()
{
  unint64_t result;

  result = qword_1EEF61908;
  if (!qword_1EEF61908)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22A9564, &_s10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EEF61908);
  }
  return result;
}

unint64_t sub_1B1FA0DA4()
{
  unint64_t result;

  result = qword_1EEF61910;
  if (!qword_1EEF61910)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22A95CC, &type metadata for AddressMode);
    atomic_store(result, (unint64_t *)&qword_1EEF61910);
  }
  return result;
}

unint64_t sub_1B1FA0DEC()
{
  unint64_t result;

  result = qword_1EEF61918;
  if (!qword_1EEF61918)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22A949C, &_s10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EEF61918);
  }
  return result;
}

unint64_t sub_1B1FA0E34()
{
  unint64_t result;

  result = qword_1EEF61920;
  if (!qword_1EEF61920)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22A94C4, &_s10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EEF61920);
  }
  return result;
}

unint64_t sub_1B1FA0E78()
{
  unint64_t result;

  result = qword_1EEF61930;
  if (!qword_1EEF61930)
  {
    result = MEMORY[0x1B5E23E74](MEMORY[0x1E0DEE0A8], MEMORY[0x1E0DEE068]);
    atomic_store(result, (unint64_t *)&qword_1EEF61930);
  }
  return result;
}

unint64_t sub_1B1FA0EBC()
{
  unint64_t result;

  result = qword_1EEF61950;
  if (!qword_1EEF61950)
  {
    result = MEMORY[0x1B5E23E74](MEMORY[0x1E0DEDEA8], MEMORY[0x1E0DEDE70]);
    atomic_store(result, (unint64_t *)&qword_1EEF61950);
  }
  return result;
}

unint64_t sub_1B1FA0F00()
{
  unint64_t result;

  result = qword_1EEF61970;
  if (!qword_1EEF61970)
  {
    result = MEMORY[0x1B5E23E74](MEMORY[0x1E0DEDAA0], MEMORY[0x1E0DEDA70]);
    atomic_store(result, (unint64_t *)&qword_1EEF61970);
  }
  return result;
}

unint64_t sub_1B1FA0F44()
{
  unint64_t result;

  result = qword_1EEF61990;
  if (!qword_1EEF61990)
  {
    result = MEMORY[0x1B5E23E74](MEMORY[0x1E0DEDC08], MEMORY[0x1E0DEDBC8]);
    atomic_store(result, (unint64_t *)&qword_1EEF61990);
  }
  return result;
}

BOOL sub_1B1FA0F88(_QWORD *a1)
{
  uint64_t v1;

  return *a1 == *(_QWORD *)(v1 + 16);
}

void *sub_1B1FA0F9C(void *__src)
{
  uint64_t v1;

  return memcpy(*(void **)(v1 + 32), __src, *(_QWORD *)(v1 + 40));
}

char *sub_1B1FA0FA8(void *a1)
{
  uint64_t v1;

  return sub_1B1F9E414(a1, *(id *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56));
}

uint64_t storeEnumTagSinglePayload for FilterMode(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1B1FA1004 + 4 * byte_1B22A8EBA[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1B1FA1038 + 4 * byte_1B22A8EB5[v4]))();
}

uint64_t sub_1B1FA1038(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1FA1040(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B1FA1048);
  return result;
}

uint64_t sub_1B1FA1054(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B1FA105CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1B1FA1060(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1FA1068(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FilterMode()
{
  return &type metadata for FilterMode;
}

uint64_t _s3VFX11AddressModeOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1B1FA10D0 + 4 * byte_1B22A8EC4[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1B1FA1104 + 4 * byte_1B22A8EBF[v4]))();
}

uint64_t sub_1B1FA1104(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1FA110C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B1FA1114);
  return result;
}

uint64_t sub_1B1FA1120(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B1FA1128);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1B1FA112C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1FA1134(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AddressMode()
{
  return &type metadata for AddressMode;
}

uint64_t sub_1B1FA1150()
{
  return sub_1B1FA0C50(&qword_1EEF619B8, (uint64_t)&unk_1EEF619C0, (uint64_t)&type metadata for AddressMode, (uint64_t (*)(uint64_t))sub_1B1D5E43C);
}

uint64_t sub_1B1FA1184()
{
  return sub_1B1FA0C50(&qword_1EEF619C8, (uint64_t)&unk_1EEF619D0, (uint64_t)&type metadata for FilterMode, (uint64_t (*)(uint64_t))sub_1B1D5E43C);
}

unint64_t sub_1B1FA11BC()
{
  unint64_t result;

  result = qword_1EEF619D8;
  if (!qword_1EEF619D8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22A970C, &type metadata for FilterMode);
    atomic_store(result, (unint64_t *)&qword_1EEF619D8);
  }
  return result;
}

BOOL sub_1B1FA1200(_QWORD *a1)
{
  return sub_1B1FA0F88(a1);
}

uint64_t *sub_1B1FA1218(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  __int128 v3;
  uint64_t *result;
  uint64_t v5;
  _QWORD *v6;
  int v7;
  uint64_t v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  os_unfair_lock_s *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t i;
  uint64_t v23;
  unint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  void (*v27)(uint64_t);
  uint64_t v28;
  BOOL v29;
  unint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  unint64_t v34;
  uint64_t v35;
  unsigned int v36;
  BOOL v37;
  int v38;
  uint64_t v40;
  _QWORD *v41;
  unint64_t v42;
  uint64_t v43;
  unsigned int v44;
  int v45;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  unint64_t v50;
  int v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unsigned __int16 *v68;
  uint64_t v69[12];
  _QWORD v70[7];
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  _OWORD v75[2];
  uint64_t v76;
  _QWORD v77[10];
  char v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;

  v3 = *(_OWORD *)(a3 + 104);
  v75[0] = *(_OWORD *)(a3 + 88);
  v75[1] = v3;
  v76 = *(_QWORD *)(a3 + 120);
  sub_1B1E8FCE4(a2, (uint64_t)v75, 0x200000000, v69);
  result = (uint64_t *)sub_1B19ED688((uint64_t)v69, (uint64_t)v70);
  v68 = (unsigned __int16 *)v70[0];
  if (v70[0])
  {
    v57 = v74;
    if (v74 >= 1)
    {
      v56 = v71;
      if (v71)
      {
        v5 = 0;
        v55 = v70[5];
        v6 = v73;
        v7 = *(unsigned __int8 *)(v72 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
        v8 = v73[4];
        v52 = v73 + 8;
        v67 = v70[0] + 41;
        v51 = v7;
        v53 = v8;
        v54 = v72;
        v82 = v73;
        do
        {
          v9 = (unsigned int *)(v55 + 48 * v5);
          v10 = *v9;
          v11 = v9[1];
          v12 = v9[2];
          v13 = *((_QWORD *)v9 + 3);
          v14 = *((_QWORD *)v9 + 5);
          v63 = *((_QWORD *)v9 + 4);
          if (v7)
          {
            v15 = *((_QWORD *)v9 + 2);
            v16 = *(os_unfair_lock_s **)(v14 + 376);
            swift_retain_n();
            os_unfair_lock_lock(v16);
            os_unfair_lock_lock(*(os_unfair_lock_t *)(v14 + 344));
            swift_release();
          }
          else
          {
            v15 = *((_QWORD *)v9 + 2);
            swift_retain();
          }
          ecs_stack_allocator_push_snapshot(v8);
          v60 = v6[7];
          v61 = v6[6];
          v59 = v6[8];
          v65 = v6[10];
          v66 = v6[9];
          v17 = v6[4];
          v18 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v14 + 40) + 16) + 32) + 16) + 1;
          swift_retain();
          v19 = ecs_stack_allocator_allocate(v17, 48 * v18, 8);
          v82[6] = v19;
          v82[7] = v18;
          v6 = v82;
          v52[1] = 0;
          v52[2] = 0;
          *v52 = 0;
          swift_release();
          v77[0] = v54;
          v77[1] = v14;
          v62 = v14;
          v77[2] = v6;
          v77[3] = v12;
          v77[4] = (v11 - v10 + v12);
          v77[5] = v57;
          v77[6] = v10;
          v77[7] = v11;
          v77[8] = 0;
          v77[9] = 0;
          v78 = 1;
          v79 = v15;
          v80 = v13;
          v81 = v63;
          sub_1B1FA1A74(v77, a1);
          v20 = v6[6];
          v21 = v6[8];
          if (!v21)
          {
            v48 = v6[7];
            v49 = (_QWORD *)v6[4];
            v7 = v51;
            goto LABEL_47;
          }
          v64 = v5;
          for (i = 0; i != v21; ++i)
          {
            v24 = v20;
            v25 = (uint64_t *)(v20 + 48 * i);
            v26 = *v25;
            v27 = (void (*)(uint64_t))v25[4];
            v28 = v6[9];
            if (v28)
              v29 = v26 == v28;
            else
              v29 = 0;
            if (v29 || !v68[11])
              goto LABEL_11;
            v30 = v68[9];
            v31 = (_QWORD *)(v67 + v68[8]);
            v32 = v25[2];
            v33 = v31;
            v34 = v30 >> 4;
            v35 = v67;
            if (v30 >= 0x10)
            {
              while (*v33 != v26)
              {
                ++v35;
                v33 += 2;
                if (!--v34)
                  goto LABEL_26;
              }
              v36 = *(unsigned __int8 *)(v35 + v68[10]);
              v37 = v36 > 5;
              v38 = (1 << v36) & 0x23;
              if (v37 || v38 == 0)
              {
LABEL_11:
                v23 = swift_retain();
                v27(v23);
                swift_release();
                goto LABEL_12;
              }
            }
LABEL_26:
            if (swift_conformsToProtocol2())
              v40 = v32;
            else
              v40 = 0;
            if (v40)
            {
              if (v30 < 0x10)
                goto LABEL_11;
              v41 = v31;
              v42 = v30 >> 4;
              v43 = v67;
              while (*v41 != v40)
              {
                ++v43;
                v41 += 2;
                if (!--v42)
                  goto LABEL_39;
              }
              v44 = *(unsigned __int8 *)(v43 + v68[10]);
              v37 = v44 > 5;
              v45 = (1 << v44) & 0x23;
              if (v37 || v45 == 0)
                goto LABEL_11;
LABEL_39:
              v47 = 16 * (v30 >> 4);
              while (*v31 != v40)
              {
                v31 += 2;
                v47 -= 16;
                if (!v47)
                  goto LABEL_11;
              }
            }
LABEL_12:
            v6 = v82;
            v20 = v24;
          }
          v48 = v82[7];
          v20 = v82[6];
          v49 = (_QWORD *)v82[4];
          v7 = v51;
          if ((uint64_t)v82[8] >= 1)
          {
            v50 = v82[6];
            swift_arrayDestroy();
            v20 = v50;
          }
          v5 = v64;
LABEL_47:
          ecs_stack_allocator_deallocate(v49, v20, 48 * v48);
          v6[6] = v61;
          v6[7] = v60;
          v6[8] = v59;
          v6[9] = v66;
          v6[10] = v65;
          sub_1B1F03804((char *)v62);
          v8 = v53;
          ecs_stack_allocator_pop_snapshot(v53);
          if ((v7 & 1) != 0)
          {
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v62 + 344));
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v62 + 376));
          }
          swift_release();
          ++v5;
        }
        while (v5 != v56);
      }
    }
    return sub_1B19ED748(v69);
  }
  return result;
}

uint64_t type metadata accessor for ParticleTargetFromPositionInit.System()
{
  return objc_opt_self();
}

uint64_t sub_1B1FA16C4(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v12;
  uint64_t v13;

  v3 = v1;
  sub_1B1FA1EEC(0, &qword_1EEF619F0, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED170]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = (char *)&v12 - v9;
  sub_1B19FA070(a1, a1[3]);
  sub_1B1FA1EA8();
  sub_1B222A180();
  v13 = *v3;
  HIBYTE(v12) = 0;
  sub_1B1B4D924();
  sub_1B1B67480(qword_1EEF5B108, MEMORY[0x1E0DEB198], MEMORY[0x1E0DEB880]);
  sub_1B2229958();
  if (!v2)
  {
    v13 = v3[1];
    HIBYTE(v12) = 1;
    sub_1B2229958();
    v13 = v3[2];
    HIBYTE(v12) = 2;
    sub_1B2229958();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
}

uint64_t sub_1B1FA1864(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char v9;
  char v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  _DWORD v19[6];

  v2 = *a1;
  v3 = a1[1];
  swift_retain_n();
  v4 = sub_1B1D192AC(v3);
  v6 = v5;
  v8 = v7;
  v10 = v9;
  swift_release();
  v11 = HIDWORD(v4);
  v12 = HIDWORD(v8);
  if ((v10 & 1) != 0)
    v13 = 0;
  else
    v13 = v4;
  if ((v10 & 1) != 0)
  {
    LODWORD(v11) = 0;
    v14 = 1065353216;
  }
  else
  {
    v14 = v6;
  }
  if ((v10 & 1) != 0)
    v15 = 1065353216;
  else
    v15 = HIDWORD(v6);
  if ((v10 & 1) != 0)
    v16 = 0;
  else
    v16 = v8;
  if ((v10 & 1) != 0)
    LODWORD(v12) = 0;
  v19[0] = v13;
  v19[1] = v11;
  v19[2] = v14;
  v19[3] = v15;
  v19[4] = v16;
  v19[5] = v12;
  v17 = a1[4];
  swift_retain();
  sub_1B1BEE528((uint64_t)a1);
  sub_1B1FEA5B0(v17, v2, v2, (uint64_t)a1, (uint64_t)v19);
  sub_1B1B4F21C((uint64_t)a1);
  return swift_release_n();
}

const char *sub_1B1FA1948()
{
  return "ParticleTargetFromPositionInitSystem";
}

uint64_t sub_1B1FA195C()
{
  sub_1B1FA1EA8();
  return sub_1B222A1D4();
}

uint64_t sub_1B1FA1984()
{
  sub_1B1FA1EA8();
  return sub_1B222A1E0();
}

double sub_1B1FA19AC@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  uint64_t v6;

  sub_1B1FA1CB4(a1, &v5);
  if (!v2)
  {
    result = *(double *)&v5;
    *(_OWORD *)a2 = v5;
    *(_QWORD *)(a2 + 16) = v6;
  }
  return result;
}

uint64_t sub_1B1FA19EC(_QWORD *a1)
{
  return sub_1B1FA16C4(a1);
}

uint64_t sub_1B1FA1A00()
{
  return type metadata accessor for ParticleTargetFromPositionInit.System();
}

double sub_1B1FA1A1C()
{
  uint64_t v0;
  double result;

  sub_1B1BDB5D0();
  v0 = swift_allocObject();
  *(_QWORD *)&result = 1;
  *(_OWORD *)(v0 + 16) = xmmword_1B226D240;
  *(_QWORD *)(v0 + 32) = &type metadata for ParticleTarget;
  *(_QWORD *)(v0 + 40) = &off_1E63802C8;
  return result;
}

double sub_1B1FA1A60@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 0.0;
  *(_OWORD *)a1 = xmmword_1B2244E10;
  *(_QWORD *)(a1 + 16) = 0;
  return result;
}

uint64_t sub_1B1FA1A74(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  __int32 v11;
  __int32 v12;
  float32x4_t v13;
  float32x4_t v14;
  float v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  float32x4_t *v19;
  float32x4_t *v20;
  float32x4_t v21;
  float32x4_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  uint64_t v34;
  float32x4_t *v35;
  float32x4_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  float v45;
  uint64_t v46;
  uint64_t v47;
  float32x4_t v48;

  v5 = (uint64_t *)a1[11];
  v6 = a1[12];
  v7 = a1[13];
  v8 = a1[2];
  v9 = sub_1B1A12038((uint64_t)&type metadata for Position, (uint64_t)&off_1E63C2398, v5, v6, v7, v8);
  result = sub_1B1A12038((uint64_t)&type metadata for ParticleTarget, (uint64_t)&off_1E63802C8, v5, v6, v7, v8);
  v14.i32[0] = *(_DWORD *)v2;
  v15 = *(float *)(v2 + 4);
  if (*(float *)v2 == v15 && *(float *)(v2 + 8) == *(float *)(v2 + 12) && *(float *)(v2 + 16) == *(float *)(v2 + 20))
  {
    v16 = a1[6];
    v17 = a1[7] - v16;
    if (v17)
    {
      v14.i32[1] = *(_DWORD *)(v2 + 8);
      v14.i32[2] = *(_DWORD *)(v2 + 16);
      v18 = 16 * v16;
      v19 = (float32x4_t *)(result + 16 * v16);
      v20 = (float32x4_t *)(v9 + v18);
      do
      {
        v21 = *v20++;
        v22 = vaddq_f32(v14, v21);
        v22.i32[3] = v11;
        *v19++ = v22;
        --v17;
      }
      while (v17);
    }
  }
  else
  {
    v23 = a1[6];
    v24 = a1[7] - v23;
    if (v24)
    {
      v25 = a2[3];
      v26 = a2[4];
      v28 = a2[1];
      v27 = a2[2];
      v29 = v15 - v14.f32[0];
      v30 = *(float *)(v2 + 8);
      v31 = *(float *)(v2 + 12) - v30;
      v32 = *(float *)(v2 + 16);
      v33 = *(float *)(v2 + 20) - v32;
      v34 = 16 * v23;
      v35 = (float32x4_t *)(result + 16 * v23);
      v36 = (float32x4_t *)(v9 + v34);
      do
      {
        v37 = v28 ^ v25;
        v38 = v27 ^ v26;
        v39 = v37 ^ v27;
        v40 = v28 ^ v38;
        v13.f32[0] = (float)((9 * ((((unint64_t)(5 * v27) >> 32) >> 25) | (640 * v27))) & 0xFFFFFF)
                   * 0.000000059605;
        v41 = v37 ^ (v27 << 17) ^ v40;
        v42 = v39 ^ __ROR8__(v38, 19);
        v43 = v41 ^ v39;
        v44 = v42 ^ v40;
        v45 = v31
            * (float)((float)((9 * ((((unint64_t)(5 * v39) >> 32) >> 25) | (640 * v39))) & 0xFFFFFF)
                    * 0.000000059605);
        v13.f32[0] = v14.f32[0] + (float)(v29 * v13.f32[0]);
        v46 = v41 ^ (v39 << 17) ^ v44;
        v47 = __ROR8__(v42, 19);
        v13.f32[1] = v30 + v45;
        v27 = v46 ^ v43;
        v13.f32[2] = v32
                   + (float)(v33
                           * (float)((float)((9
                                            * ((((unint64_t)(5 * v43) >> 32) >> 25) | (640 * v43))) & 0xFFFFFF)
                                   * 0.000000059605));
        v48 = *v36++;
        v13 = vaddq_f32(v48, v13);
        v28 = v43 ^ v47 ^ v44;
        v13.i32[3] = v12;
        v26 = __ROR8__(v43 ^ v47, 19);
        v25 = v46 ^ (v43 << 17);
        *v35++ = v13;
        --v24;
      }
      while (v24);
      a2[1] = v28;
      a2[2] = v27;
      a2[3] = v25;
      a2[4] = v26;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ParticleTargetFromPositionInit()
{
  return &type metadata for ParticleTargetFromPositionInit;
}

uint64_t sub_1B1FA1CB4@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;

  sub_1B1FA1EEC(0, &qword_1EEF619E0, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED048]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = (char *)&v15 - v9;
  sub_1B19FA070(a1, a1[3]);
  sub_1B1FA1EA8();
  sub_1B222A150();
  if (v2)
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  sub_1B1B4D924();
  HIBYTE(v15) = 0;
  sub_1B1B67480((unint64_t *)&qword_1ED4BA5B0, MEMORY[0x1E0DEB1C0], MEMORY[0x1E0DEB8B0]);
  sub_1B2229814();
  v11 = v16;
  HIBYTE(v15) = 1;
  sub_1B2229814();
  v12 = v16;
  HIBYTE(v15) = 2;
  sub_1B2229814();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  v13 = v16;
  result = _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  *a2 = v11;
  a2[1] = v12;
  a2[2] = v13;
  return result;
}

unint64_t sub_1B1FA1EA8()
{
  unint64_t result;

  result = qword_1EEF619E8;
  if (!qword_1EEF619E8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22A9D54, &type metadata for ParticleTargetFromPositionInit.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF619E8);
  }
  return result;
}

void sub_1B1FA1EEC(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_1B1FA1EA8();
    v7 = a3(a1, &type metadata for ParticleTargetFromPositionInit.CodingKeys, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t storeEnumTagSinglePayload for ParticleTargetFromPositionInit.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1B1FA1F94 + 4 * byte_1B22A9B85[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1B1FA1FC8 + 4 * byte_1B22A9B80[v4]))();
}

uint64_t sub_1B1FA1FC8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1FA1FD0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B1FA1FD8);
  return result;
}

uint64_t sub_1B1FA1FE4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B1FA1FECLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1B1FA1FF0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1FA1FF8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ParticleTargetFromPositionInit.CodingKeys()
{
  return &type metadata for ParticleTargetFromPositionInit.CodingKeys;
}

unint64_t sub_1B1FA2018()
{
  unint64_t result;

  result = qword_1EEF619F8;
  if (!qword_1EEF619F8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22A9D2C, &type metadata for ParticleTargetFromPositionInit.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF619F8);
  }
  return result;
}

unint64_t sub_1B1FA2060()
{
  unint64_t result;

  result = qword_1EEF61A00;
  if (!qword_1EEF61A00)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22A9C9C, &type metadata for ParticleTargetFromPositionInit.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF61A00);
  }
  return result;
}

unint64_t sub_1B1FA20A8()
{
  unint64_t result;

  result = qword_1EEF61A08;
  if (!qword_1EEF61A08)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22A9CC4, &type metadata for ParticleTargetFromPositionInit.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF61A08);
  }
  return result;
}

uint64_t sub_1B1FA20EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  char v7;
  unint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  id v13;
  _QWORD v14[7];
  char v15;

  v6 = a1;
  v15 = 0;
  if (qword_1EEF572D0 != -1)
    a1 = swift_once();
  MEMORY[0x1E0C80A78](a1, a2);
  v14[2] = v6;
  v14[3] = a2;
  v14[4] = a3;
  v14[5] = &v15;
  sub_1B1C5A9E8((uint64_t)sub_1B1FA3514, (uint64_t)v14, v7, v8, v9, MEMORY[0x1E0DEE9D8]);
  v10 = sub_1B1C6A11C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v3 + 16) = v10;
  result = swift_bridgeObjectRelease();
  if (v15 == 1)
  {
    v12 = *(_QWORD *)(a3 + OBJC_IVAR____TtC3VFX16GraphDiagnostics_diagnostics);
    if (*(_QWORD *)(v12 + 16))
    {
      v13 = *(id *)(v12 + 32);
      return swift_willThrow();
    }
  }
  return result;
}

uint64_t sub_1B1FA222C(uint64_t a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  void *v8;
  uint64_t v9;
  BOOL v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t result;
  _QWORD v21[8];
  BOOL v22;
  uint64_t v23;
  uint64_t v24[2];

  if (a1)
  {
    swift_getObjectType();
    v8 = sub_1B1F58CAC();
    v10 = v9 == 0;
    if (v9)
      v11 = v8;
    else
      v11 = 0;
  }
  else
  {
    v11 = 0;
    v10 = 1;
  }
  v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues)
                              + 8 * *(_QWORD *)thread_worker_index(a2)
                              + 8)
                  + 32);
  v13 = ecs_stack_allocator_push_snapshot(v12);
  MEMORY[0x1E0C80A78](v13, v14);
  v21[6] = a4;
  v21[7] = v11;
  v22 = v10;
  v23 = a5;
  MEMORY[0x1E0C80A78](v15, v16);
  v21[2] = sub_1B1FA34F4;
  v21[3] = v17;
  v18 = MEMORY[0x1E0DEE9D8];
  v24[0] = sub_1B1C6D068(MEMORY[0x1E0DEE9D8]);
  v24[1] = v19;
  sub_1B1C5CC00((uint64_t)sub_1B1B28F5C, (uint64_t)v21, 1, 0x1000000000000000uLL, 0, v18, v24);
  swift_bridgeObjectRelease();
  if (v5)
  {
    result = swift_bridgeObjectRelease();
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease();
    return ecs_stack_allocator_pop_snapshot(v12);
  }
  return result;
}

uint64_t sub_1B1FA23AC(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  char v4;
  unint64_t v5;
  int v6;
  uint64_t v7;
  _QWORD v9[6];

  v3 = *v2;
  if (qword_1EEF572D0 != -1)
    a1 = swift_once();
  MEMORY[0x1E0C80A78](a1, a2);
  v9[2] = v3;
  sub_1B1C5A9E8((uint64_t)sub_1B1FA2CA8, (uint64_t)v9, v4, v5, v6, MEMORY[0x1E0DEE9D8]);
  v7 = sub_1B1C6A11C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v2[2] = v7;
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B1FA2484@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  char isUniquelyReferenced_nonNull_native;
  uint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  _QWORD *v44;
  char v45;
  unint64_t v46;
  _QWORD *v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  char v55;
  char v56;
  _QWORD *v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  char v64;
  char v65;
  _QWORD *v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  _QWORD *v72;
  char v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD v78[4];
  uint64_t *v79;

  v3 = *(_QWORD *)(a1 + 8);
  type metadata accessor for EnumConstantNode(0);
  v4 = swift_dynamicCastClass();
  if (v4)
  {
    v5 = v4;
    sub_1B19FA198(v4 + OBJC_IVAR____TtC3VFX16EnumConstantNode_value, (uint64_t)&v74);
    v6 = v76;
    v7 = v77;
    sub_1B19FA070(&v74, v76);
    v8 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 48);
    swift_retain();
    v9 = v8(v6, v7);
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v74);
    v78[3] = MEMORY[0x1E0DEDC60];
    v78[0] = v9;
    sub_1B1A02864((uint64_t)v78, (uint64_t)&v75);
    v74 = 0x8000000000000040;
    type metadata accessor for ConstantNode(0);
    v10 = (_QWORD *)swift_allocObject();
    v11 = OBJC_IVAR____TtC3VFX12ConstantNode_semantic;
    sub_1B1A02828(&v74, (_QWORD *)((char *)v10 + OBJC_IVAR____TtC3VFX12ConstantNode_holder));
    *(_OWORD *)((char *)v10 + v11) = xmmword_1B2246910;
    v12 = MEMORY[0x1E0DEE9D8];
    v10[2] = MEMORY[0x1E0DEE9D8];
    v10[3] = 0;
    v10[4] = 0;
    v13 = (char *)v10 + OBJC_IVAR____TtC3VFX4Node_authoringID;
    sub_1B2228260();
    sub_1B1A028A0(&v74);
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v78);
    v14 = v5 + OBJC_IVAR____TtC3VFX4Node_authoringID;
    v15 = sub_1B222826C();
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 24))(v13, v14, v15);
    swift_retain();
    swift_release();
    v16 = v10[3];
    v10[3] = v12;
    v10[4] = &unk_1E63BA5D8;
    sub_1B1B28F18(v16);
    result = swift_release();
    *a2 = (uint64_t)v10;
    return result;
  }
  type metadata accessor for _ECSValueNode(0);
  v18 = swift_dynamicCastClass();
  if (v18)
  {
    v19 = v18;
    v20 = v18 + OBJC_IVAR____TtC3VFX13_ECSValueNode_entityKeyPath;
    v21 = *(_QWORD *)(v18 + OBJC_IVAR____TtC3VFX13_ECSValueNode_entityKeyPath + 32);
    swift_retain_n();
    if (!swift_conformsToProtocol2())
      v21 = 0;
    if (v21)
    {
      v79 = a2;
      v22 = *(_QWORD *)(v20 + 8);
      v23 = *(_QWORD *)(v20 + 16);
      swift_bridgeObjectRetain();
      swift_retain();
      v24 = sub_1B1FA340C();
      if (v24)
      {
        v25 = v24;
        v74 = v22;
        v75 = v23;
        swift_bridgeObjectRetain();
        sub_1B2228890();
        swift_release();
        swift_bridgeObjectRelease();
        *(_QWORD *)(v20 + 8) = v22;
        *(_QWORD *)(v20 + 16) = v23;
        v26 = MEMORY[0x1E0DEDC60];
        *(_QWORD *)(v20 + 24) = v25;
        *(_QWORD *)(v20 + 32) = v26;
        *(_QWORD *)(v20 + 40) = 0;
        *(_BYTE *)(v20 + 48) = 1;
        *(_WORD *)(v20 + 50) = 0;
        swift_bridgeObjectRetain();
        swift_retain();
        swift_release();
        swift_bridgeObjectRelease();
        type metadata accessor for SetECSValueNode(0);
        if (swift_dynamicCastClass())
        {
          swift_retain();
          v27 = sub_1B1D88B74();
          v28 = *(_QWORD **)(v19 + 24);
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          *(_QWORD *)(v19 + 24) = v28;
          v30 = v79;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            v28 = sub_1B1FFF090(v28);
            *(_QWORD *)(v19 + 24) = v28;
          }
          v31 = v28[5];
          v28[5] = v27;
        }
        else
        {
          swift_retain();
          v46 = sub_1B1D88B74();
          v47 = *(_QWORD **)(v19 + 32);
          v48 = swift_isUniquelyReferenced_nonNull_native();
          *(_QWORD *)(v19 + 32) = v47;
          v30 = v79;
          if ((v48 & 1) == 0)
          {
            v47 = sub_1B1FFF090(v47);
            *(_QWORD *)(v19 + 32) = v47;
          }
          v31 = v47[4];
          v47[4] = v46;
        }
LABEL_58:
        sub_1B1B28D2C(v31);
        swift_release_n();
        swift_release();
        result = swift_bridgeObjectRelease();
        *v30 = v19;
        return result;
      }
      goto LABEL_59;
    }
    result = swift_release();
LABEL_29:
    *a2 = v3;
    return result;
  }
  type metadata accessor for _WorldValueNode(0);
  v32 = swift_dynamicCastClass();
  if (!v32)
  {
    v49 = *(_QWORD *)(v3 + 24);
    swift_retain();
    sub_1B1BCCD2C(v49);
    swift_bridgeObjectRelease();
    v50 = *(_QWORD *)(v49 + 16);
    result = swift_bridgeObjectRelease();
    if (v50)
    {
      v51 = -v50;
      v52 = 4;
      do
      {
        v54 = *(_QWORD *)(*(_QWORD *)(v3 + 24) + 8 * v52);
        sub_1B1BCCD2C(*(_QWORD *)(v3 + 24));
        sub_1B1B632F0(v54);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_1B1D76C18(v54);
        v56 = v55;
        result = sub_1B1B28D2C(v54);
        if ((v56 & 1) != 0)
        {
          v57 = *(_QWORD **)(v3 + 24);
          v58 = swift_isUniquelyReferenced_nonNull_native();
          *(_QWORD *)(v3 + 24) = v57;
          if ((v58 & 1) == 0)
          {
            v57 = sub_1B1FFF090(v57);
            *(_QWORD *)(v3 + 24) = v57;
          }
          v53 = v57[v52];
          v57[v52] = 0x8000000000000040;
          result = sub_1B1B28D2C(v53);
        }
        ++v52;
      }
      while (v51 + v52 != 4);
    }
    v59 = *(_QWORD *)(*(_QWORD *)(v3 + 32) + 16);
    if (v59)
    {
      v60 = -v59;
      v61 = 4;
      do
      {
        v63 = *(_QWORD *)(*(_QWORD *)(v3 + 32) + 8 * v61);
        sub_1B1BCCD2C(*(_QWORD *)(v3 + 24));
        sub_1B1B632F0(v63);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_1B1D76C18(v63);
        v65 = v64;
        result = sub_1B1B28D2C(v63);
        if ((v65 & 1) != 0)
        {
          v66 = *(_QWORD **)(v3 + 32);
          v67 = swift_isUniquelyReferenced_nonNull_native();
          *(_QWORD *)(v3 + 32) = v66;
          if ((v67 & 1) == 0)
          {
            v66 = sub_1B1FFF090(v66);
            *(_QWORD *)(v3 + 32) = v66;
          }
          v62 = v66[v61];
          v66[v61] = 0x8000000000000040;
          result = sub_1B1B28D2C(v62);
        }
        ++v61;
      }
      while (v60 + v61 != 4);
    }
    goto LABEL_29;
  }
  v19 = v32;
  v79 = a2;
  v33 = v32 + OBJC_IVAR____TtC3VFX15_WorldValueNode_scriptKeyPath;
  v34 = *(_QWORD *)(v32 + OBJC_IVAR____TtC3VFX15_WorldValueNode_scriptKeyPath + 24);
  if (!swift_conformsToProtocol2())
    v34 = 0;
  if (!v34)
  {
    *v79 = v3;
    return swift_retain();
  }
  v35 = *(_QWORD *)v33;
  v36 = *(_QWORD *)(v33 + 8);
  swift_retain_n();
  swift_bridgeObjectRetain();
  swift_retain();
  v37 = sub_1B1FA340C();
  if (v37)
  {
    v38 = v37;
    v74 = v35;
    v75 = v36;
    swift_bridgeObjectRetain();
    sub_1B2228890();
    swift_release();
    swift_bridgeObjectRelease();
    *(_QWORD *)v33 = v35;
    *(_QWORD *)(v33 + 8) = v36;
    v39 = MEMORY[0x1E0DEDC60];
    *(_QWORD *)(v33 + 16) = v38;
    *(_QWORD *)(v33 + 24) = v39;
    *(_QWORD *)(v33 + 32) = 0;
    *(_BYTE *)(v33 + 40) = 1;
    *(_WORD *)(v33 + 42) = 0;
    swift_bridgeObjectRetain();
    swift_retain();
    swift_release();
    swift_bridgeObjectRelease();
    type metadata accessor for SetWorldValueNode(0);
    if (swift_dynamicCastClass())
    {
      v40 = *(_QWORD *)(v33 + 24);
      if (swift_conformsToProtocol2())
        v41 = v40;
      else
        v41 = 0;
      swift_retain();
      v42 = 0x8000000000000020;
      if (!v41)
      {
        v43 = sub_1B1D76F30(v40);
        if ((~v43 & 0xF000000000000007) != 0)
          v42 = v43;
        else
          v42 = 0x8000000000000000;
      }
      v44 = *(_QWORD **)(v19 + 24);
      v45 = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)(v19 + 24) = v44;
      v30 = v79;
      if ((v45 & 1) == 0)
      {
        v44 = sub_1B1FFF090(v44);
        *(_QWORD *)(v19 + 24) = v44;
      }
      v31 = v44[5];
      v44[5] = v42;
    }
    else
    {
      type metadata accessor for GetWorldValueNode(0);
      swift_dynamicCastClass();
      v68 = *(_QWORD *)(v33 + 24);
      if (swift_conformsToProtocol2())
        v69 = v68;
      else
        v69 = 0;
      swift_retain();
      v70 = 0x8000000000000020;
      if (!v69)
      {
        v71 = sub_1B1D76F30(v68);
        if ((~v71 & 0xF000000000000007) != 0)
          v70 = v71;
        else
          v70 = 0x8000000000000000;
      }
      v72 = *(_QWORD **)(v19 + 32);
      v73 = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)(v19 + 32) = v72;
      v30 = v79;
      if ((v73 & 1) == 0)
      {
        v72 = sub_1B1FFF090(v72);
        *(_QWORD *)(v19 + 32) = v72;
      }
      v31 = v72[4];
      v72[4] = v70;
    }
    goto LABEL_58;
  }
LABEL_59:
  result = sub_1B2229688();
  __break(1u);
  return result;
}

uint64_t sub_1B1FA2CA8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1B1FA2484(a1, a2);
}

void sub_1B1FA2CC0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _BYTE *a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v6;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t ObjectType;
  uint64_t (*v23)(uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int *v27;
  void *v28;
  _QWORD *v29;
  _QWORD *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  id v36;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v38;
  unint64_t v39;
  uint64_t *v40;
  _BYTE *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  char v45[8];
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD v49[6];

  v42 = a4;
  v12 = sub_1B222826C();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v14);
  v16 = (char *)&v41 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *(_QWORD *)(a1 + 8);
  type metadata accessor for _WorldValueNode(0);
  v18 = swift_dynamicCastClass();
  if (v18)
  {
    v41 = a5;
    v44 = a6;
    v49[5] = v6;
    v43 = v18;
    v19 = v18 + OBJC_IVAR____TtC3VFX15_WorldValueNode_target;
    sub_1B1FA3530(v18 + OBJC_IVAR____TtC3VFX15_WorldValueNode_target, (uint64_t)v49);
    v21 = v49[0];
    v20 = v49[1];
    swift_retain();
    sub_1B1FA35C8((uint64_t)v49);
    if (v21 || v20 != 1)
      goto LABEL_6;
    if (a2)
    {
      v46 = 0;
      swift_unknownObjectWeakInit();
      v46 = a3;
      swift_unknownObjectWeakAssign();
      ObjectType = swift_getObjectType();
      v23 = *(uint64_t (**)(uint64_t, uint64_t))(a3 + 16);
      swift_unknownObjectRetain();
      v24 = v23(ObjectType, a3);
      v26 = v25;
      swift_unknownObjectRelease();
      v47 = v24;
      v48 = v26;
      sub_1B19FC2D0((uint64_t)v45, (uint64_t)v49);
      sub_1B1FA3604((uint64_t)v49, v19);
LABEL_6:
      *v44 = v43;
      return;
    }
    (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v16, v17 + OBJC_IVAR____TtC3VFX4Node_authoringID, v12);
    v27 = (int *)type metadata accessor for GraphError();
    sub_1B1BE2940();
    v28 = (void *)swift_allocError();
    v30 = v29;
    *v29 = 0;
    v31 = (char *)v29 + v27[5];
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v31, v16, v12);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v31, 0, 1, v12);
    v32 = (char *)v30 + v27[6];
    *(_QWORD *)v32 = 2;
    v32[8] = -96;
    *(_OWORD *)((char *)v30 + v27[7]) = xmmword_1B22A9DB0;
    v33 = OBJC_IVAR____TtC3VFX16GraphDiagnostics_diagnostics;
    v34 = v42;
    v35 = *(_QWORD **)(v42 + OBJC_IVAR____TtC3VFX16GraphDiagnostics_diagnostics);
    v36 = v28;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(v34 + v33) = v35;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v35 = sub_1B1C63944(0, v35[2] + 1, 1, v35);
      *(_QWORD *)(v34 + v33) = v35;
    }
    v39 = v35[2];
    v38 = v35[3];
    v40 = v44;
    if (v39 >= v38 >> 1)
    {
      v35 = sub_1B1C63944(v38 > 1, v39 + 1, 1, v35);
      *(_QWORD *)(v34 + v33) = v35;
    }
    v35[2] = v39 + 1;
    v35[v39 + 4] = v28;

    *v41 = 1;
    *v40 = v43;
  }
  else
  {
    *a6 = v17;
    swift_retain();
  }
}

unint64_t sub_1B1FA2FB4(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t *v16;
  unint64_t result;
  unint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t, unint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int8 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int8 v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  int *v41;
  void *v42;
  _QWORD *v43;
  _QWORD *v44;
  char *v45;
  char *v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  id v51;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v53;
  unint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t (*v61)(double);
  uint64_t v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;

  v6 = v5;
  v64 = a3;
  v11 = sub_1B222826C();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v13);
  v15 = (char *)&v55 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(uint64_t **)(a1 + 8);
  result = swift_conformsToProtocol2();
  if (result)
    v18 = result;
  else
    v18 = 0;
  if (result)
    v19 = v16;
  else
    v19 = 0;
  if (!v19)
    return result;
  v55 = v15;
  v56 = v12;
  v57 = v11;
  v58 = a5;
  v20 = *v19;
  v21 = *(uint64_t (**)(uint64_t, unint64_t))(v18 + 32);
  swift_retain();
  v22 = v21(v20, v18);
  v23 = *(_QWORD *)(v22 + 16);
  if (!v23)
  {
LABEL_14:
    swift_release();
    return swift_bridgeObjectRelease();
  }
  v59 = v16;
  v60 = v6;
  v63 = a4 & 1;
  v62 = OBJC_IVAR____TtC3VFX13EntityManager_commandQueues;
  v24 = 32;
  v61 = thread_worker_index;
  while (1)
  {
    v25 = *(_QWORD *)(v22 + v24);
    if ((v25 >> 60) - 9 >= 2)
      break;
LABEL_10:
    v24 += 32;
    if (!--v23)
      goto LABEL_14;
  }
  ((void (*)(uint64_t (**)(double)))v61)(&thread_worker_index);
  sub_1B1B1DD24(v25);
  sub_1B1B1DD24(v25);
  sub_1B1E6B02C(v25);
  if (v29 < 0xFCu)
  {
    v30 = v26;
    v31 = v27;
    v32 = v28;
    v33 = v29;
    sub_1B1A05610(v25);
    sub_1B1E6C810(v30, v31, v32, v33);
    sub_1B1A05610(v25);
    goto LABEL_10;
  }
  if (*(_BYTE *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager_isInPrepare) != 1)
  {
    v34 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager_logger);
    v65 = 0;
    v66 = 0xE000000000000000;
    swift_retain();
    sub_1B2229430();
    sub_1B2228890();
    v67 = v25;
    sub_1B22295EC();
    v35 = v65;
    v36 = v66;
    v37 = sub_1B2228E90();
    v65 = 0;
    (*(void (**)(uint64_t, uint64_t *, uint64_t, unint64_t))(*(_QWORD *)v34 + 88))(v37, &v65, v35, v36);
    swift_release();
    swift_bridgeObjectRelease();
  }
  sub_1B1A05610(v25);
  swift_bridgeObjectRelease();
  v38 = v55;
  v39 = v56;
  v40 = v57;
  (*(void (**)(char *, uint64_t, uint64_t))(v56 + 16))(v55, (uint64_t)v59 + OBJC_IVAR____TtC3VFX4Node_authoringID, v57);
  v41 = (int *)type metadata accessor for GraphError();
  sub_1B1BE2940();
  v42 = (void *)swift_allocError();
  v44 = v43;
  *v43 = 0;
  v45 = (char *)v43 + v41[5];
  (*(void (**)(char *, char *, uint64_t))(v39 + 32))(v45, v38, v40);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v39 + 56))(v45, 0, 1, v40);
  v46 = (char *)v44 + v41[6];
  *(_QWORD *)v46 = 0;
  v46[8] = -127;
  v47 = (_QWORD *)((char *)v44 + v41[7]);
  *v47 = 0xD000000000000012;
  v47[1] = 0x80000001B2346380;
  v48 = OBJC_IVAR____TtC3VFX16GraphDiagnostics_diagnostics;
  v49 = v58;
  v50 = *(_QWORD **)(v58 + OBJC_IVAR____TtC3VFX16GraphDiagnostics_diagnostics);
  v51 = v42;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v49 + v48) = v50;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v50 = sub_1B1C63944(0, v50[2] + 1, 1, v50);
    *(_QWORD *)(v49 + v48) = v50;
  }
  v54 = v50[2];
  v53 = v50[3];
  if (v54 >= v53 >> 1)
  {
    v50 = sub_1B1C63944(v53 > 1, v54 + 1, 1, v50);
    *(_QWORD *)(v49 + v48) = v50;
  }
  v50[2] = v54 + 1;
  v50[v54 + 4] = v42;
  swift_release();

  return sub_1B1A05610(v25);
}

uint64_t sub_1B1FA340C()
{
  uint64_t v0;

  swift_getKeyPath();
  sub_1B2229328();
  v0 = sub_1B2229724();
  swift_release();
  return v0;
}

uint64_t sub_1B1FA3470@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)(a2 + a1 - 8) + 48))(*(_QWORD *)(a2 + a1 - 16));
  *a3 = result;
  return result;
}

uint64_t sub_1B1FA34A8(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a4 + a3 - 8) + 56))(*a1, *(_QWORD *)(a4 + a3 - 16));
}

uint64_t sub_1B1FA34DC()
{
  return 16;
}

__n128 sub_1B1FA34E8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

unint64_t sub_1B1FA34F4(uint64_t a1)
{
  uint64_t v1;

  return sub_1B1FA2FB4(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_BYTE *)(v1 + 32), *(_QWORD *)(v1 + 40));
}

void sub_1B1FA3514(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  sub_1B1FA2CC0(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(_BYTE **)(v2 + 40), a2);
}

uint64_t sub_1B1FA3530(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1B1FA3574();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_1B1FA3574()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF60B50)
  {
    v0 = sub_1B2229124();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF60B50);
  }
}

uint64_t sub_1B1FA35C8(uint64_t a1)
{
  uint64_t v2;

  sub_1B1FA3574();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1B1FA3604(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1B1FA3574();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

double sub_1B1FA3648@<D0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  double result;

  sub_1B1FA3860();
  v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_1B226E100;
  v3 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v2 + 32) = sub_1B1B95CD0(MEMORY[0x1E0DEE9D8]);
  *(_QWORD *)(v2 + 40) = sub_1B1B95CD0(v3);
  *(_QWORD *)(v2 + 48) = sub_1B1B95CD0(v3);
  result = 0.00781250183;
  *a1 = 0x3F8000003F000000;
  a1[1] = v2;
  return result;
}

uint64_t type metadata accessor for FluidSpheresRenderSystem()
{
  return objc_opt_self();
}

const char *sub_1B1FA36EC()
{
  return "FluidSpheresRender";
}

uint64_t type metadata accessor for FluidAbsorbRenderSystem()
{
  return objc_opt_self();
}

const char *sub_1B1FA3720()
{
  return "FluidAbsorbRender";
}

uint64_t type metadata accessor for FluidBlurRenderSystem()
{
  return objc_opt_self();
}

const char *sub_1B1FA3754()
{
  return "FluidBlur";
}

uint64_t type metadata accessor for FluidCompositeRenderSystem()
{
  return objc_opt_self();
}

const char *sub_1B1FA3788()
{
  return "FluidCompositeRender";
}

_QWORD *initializeBufferWithCopyOfBuffer for FluidRenderSystemState(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for FluidRenderSystemState(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *assignWithTake for FluidRenderSystemState(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for FluidRenderSystemState()
{
  return &type metadata for FluidRenderSystemState;
}

void sub_1B1FA3860()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF61A10)
  {
    sub_1B1FA38B4();
    v0 = sub_1B2229A18();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF61A10);
  }
}

void sub_1B1FA38B4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF61A18)
  {
    v0 = sub_1B22285A8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF61A18);
  }
}

uint64_t sub_1B1FA391C(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  char v5;
  BOOL v7;
  char v8;
  BOOL v9;
  BOOL v10;
  char v11;
  BOOL v12;
  BOOL v13;
  char v14;
  BOOL v15;
  BOOL v16;
  char v17;
  BOOL v18;
  BOOL v19;
  char v20;
  BOOL v22;

  if (a1 == 0x74616F6C66 && a2 == 0xE500000000000000
    || (sub_1B2229D24() & 1) != 0
    || a1 == 0x323374616F6C66 && a2 == 0xE700000000000000
    || (sub_1B2229D24() & 1) != 0)
  {
    return 28;
  }
  if (a1 == 0x7261686375 && a2 == 0xE500000000000000)
    return 45;
  v5 = sub_1B2229D24();
  v7 = a1 == 0x38746E6975 && a2 == 0xE500000000000000;
  result = 45;
  if ((v5 & 1) == 0 && !v7)
  {
    if ((sub_1B2229D24() & 1) != 0)
      return 45;
    if (a1 == 1918986339 && a2 == 0xE400000000000000)
      return 46;
    v8 = sub_1B2229D24();
    v9 = a1 == 947154537 && a2 == 0xE400000000000000;
    v10 = v9;
    result = 46;
    if ((v8 & 1) == 0 && !v10)
    {
      if ((sub_1B2229D24() & 1) != 0)
        return 46;
      if (a1 == 0x74726F687375 && a2 == 0xE600000000000000)
        return 49;
      v11 = sub_1B2229D24();
      v12 = a1 == 0x3631746E6975 && a2 == 0xE600000000000000;
      v13 = v12;
      result = 49;
      if ((v11 & 1) == 0 && !v13)
      {
        if ((sub_1B2229D24() & 1) != 0)
          return 49;
        if (a1 == 0x74726F6873 && a2 == 0xE500000000000000)
          return 50;
        v14 = sub_1B2229D24();
        v15 = a1 == 0x3631746E69 && a2 == 0xE500000000000000;
        v16 = v15;
        result = 50;
        if ((v14 & 1) == 0 && !v16)
        {
          if ((sub_1B2229D24() & 1) != 0)
            return 50;
          if (a1 == 1953393013 && a2 == 0xE400000000000000)
            return 36;
          v17 = sub_1B2229D24();
          v18 = a1 == 0x3233746E6975 && a2 == 0xE600000000000000;
          v19 = v18;
          result = 36;
          if ((v17 & 1) == 0 && !v19)
          {
            if ((sub_1B2229D24() & 1) != 0)
              return 36;
            if (a1 == 7630441 && a2 == 0xE300000000000000)
              return 32;
            v20 = sub_1B2229D24();
            v22 = a1 == 0x3233746E69 && a2 == 0xE500000000000000;
            result = 32;
            if ((v20 & 1) == 0 && !v22)
            {
              if ((sub_1B2229D24() & 1) == 0)
              {
                result = sub_1B2229688();
                __break(1u);
                return result;
              }
              return 32;
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_1B1FA3D9C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, _QWORD *a8)
{
  uint64_t v8;
  uint64_t v15;
  uint64_t v16;
  char v17;
  void **v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  void **v24;
  void *v25;
  void *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  void *v34;
  float32x4_t *v35;
  char *v36;
  unint64_t v37;
  char *v38;
  unint64_t v39;
  uint64_t v40;
  __int32 *v41;
  char *v42;
  int v43;
  int v44;
  int v45;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v47;
  char *v48;
  BOOL v49;
  BOOL v50;
  float *v52;
  float32x4_t *v53;
  float32x4_t *v54;
  unint64_t v55;
  float *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  float32x4x2_t v68;
  float32x4x2_t v69;

  v8 = *a8;
  if (*(_QWORD *)(*a8 + 16))
  {
    v15 = result;
    swift_bridgeObjectRetain();
    v16 = sub_1B1DC3B00(v15, a2);
    if ((v17 & 1) != 0)
    {
      v18 = (void **)(*(_QWORD *)(v8 + 56) + 32 * v16);
      v19 = *v18;
      v20 = v18[3];
      v64 = (uint64_t)v18[2];
      v65 = (uint64_t)v18[1];
      swift_unknownObjectRetain();
      swift_bridgeObjectRelease();
      if (v20 != (void *)28)
        return swift_unknownObjectRelease();
      v21 = *a8;
      if (!*(_QWORD *)(*a8 + 16))
        return swift_unknownObjectRelease();
      swift_bridgeObjectRetain();
      v22 = sub_1B1DC3B00(a3, a4);
      if ((v23 & 1) != 0)
      {
        v63 = v19;
        v24 = (void **)(*(_QWORD *)(v21 + 56) + 32 * v22);
        v25 = *v24;
        v26 = v24[3];
        v61 = (uint64_t)v24[2];
        v62 = (uint64_t)v24[1];
        swift_unknownObjectRetain();
        swift_bridgeObjectRelease();
        if (v26 == (void *)28)
        {
          v60 = v25;
          v27 = a8[3];
          swift_bridgeObjectRetain();
          sub_1B2228890();
          sub_1B2228890();
          v28 = sub_1B2082FD0(v27, 29);
          v59 = v29;
          v58 = v30;
          v32 = v31;
          swift_bridgeObjectRelease();
          if (v28)
          {
            v57 = sub_1B20831FC(v63, v65, v64, 28);
            v33 = sub_1B20831FC(v60, v62, v61, 28);
            v34 = (void *)v28;
            v35 = (float32x4_t *)v33;
            v66 = (uint64_t)v34;
            v36 = sub_1B2083298(v34, v59, v58, v32);
            if (v27)
            {
              if (v27 >= 0x18)
              {
                v37 = 0;
                v47 = 8 * (v27 - 1);
                if (&v36[v47] >= v36 && &v36[v47 + 4] >= v36 + 4 && !((v27 - 1) >> 61))
                {
                  v37 = 0;
                  v48 = &v36[8 * v27];
                  v49 = &v35->f32[v27] > (float32_t *)v36 && v48 > (char *)v35;
                  v50 = v49;
                  if ((v48 <= v57 || &v57[4 * v27] <= v36) && !v50)
                  {
                    v37 = v27 & 0xFFFFFFFFFFFFFFF8;
                    v52 = (float *)(v36 + 32);
                    v53 = (float32x4_t *)(v57 + 16);
                    v54 = v35 + 1;
                    v55 = v27 & 0xFFFFFFFFFFFFFFF8;
                    do
                    {
                      v68.val[0] = v53[-1];
                      v69.val[0] = *v53;
                      v68.val[1] = v54[-1];
                      v69.val[1] = *v54;
                      v56 = v52 - 8;
                      vst2q_f32(v56, v68);
                      vst2q_f32(v52, v69);
                      v52 += 16;
                      v53 += 2;
                      v54 += 2;
                      v55 -= 8;
                    }
                    while (v55);
                    if (v27 == v37)
                      goto LABEL_13;
                  }
                }
              }
              else
              {
                v37 = 0;
              }
              v38 = &v36[8 * v37 + 4];
              v39 = v27 - v37;
              v40 = 4 * v37;
              v41 = &v35->i32[v37];
              v42 = &v57[v40];
              do
              {
                v43 = *(_DWORD *)v42;
                v42 += 4;
                v44 = v43;
                v45 = *v41++;
                *((_DWORD *)v38 - 1) = v44;
                *(_DWORD *)v38 = v45;
                v38 += 8;
                --v39;
              }
              while (v39);
            }
LABEL_13:
            swift_bridgeObjectRetain();
            sub_1B1B84078(v15, a2);
            swift_bridgeObjectRelease();
            swift_unknownObjectRelease();
            swift_bridgeObjectRetain();
            sub_1B1B84078(a3, a4);
            swift_bridgeObjectRelease();
            swift_unknownObjectRelease();
            swift_bridgeObjectRetain();
            swift_unknownObjectRetain();
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            v67 = *a8;
            *a8 = 0x8000000000000000;
            sub_1B1B89F54(v66, v59, v58, v32, a5, a6, isUniquelyReferenced_nonNull_native);
            *a8 = v67;
            swift_unknownObjectRelease();
            swift_unknownObjectRelease();
            swift_unknownObjectRelease();
            swift_bridgeObjectRelease();
            return swift_bridgeObjectRelease();
          }
        }
        swift_unknownObjectRelease();
        return swift_unknownObjectRelease();
      }
      swift_unknownObjectRelease();
    }
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1B1FA4198(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, _QWORD *a11)
{
  uint64_t v11;
  uint64_t v17;
  uint64_t v18;
  char v19;
  void **v20;
  void *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  void **v26;
  void *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  void **v32;
  void *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  char *v42;
  float32x4_t *v43;
  char *v44;
  unint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  unint64_t v49;
  char *v50;
  __int32 *v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  char *v57;
  char *v58;
  unint64_t v59;
  char *v60;
  __int128 v66;
  char isUniquelyReferenced_nonNull_native;
  BOOL v68;
  uint64_t v69;
  char *v70;
  BOOL v71;
  BOOL v72;
  BOOL v73;
  BOOL v74;
  float32x4_t *v76;
  float32x4_t *v77;
  float32x4_t *v78;
  unint64_t v79;
  float *v80;
  float *v81;
  float *v82;
  unint64_t v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  void *v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  void *v96;
  uint64_t v97;
  uint64_t v100;
  float32x4x3_t v101;
  float32x4x3_t v102;

  if ((a9 & 0xFFFFFFFFFFFFFFFELL) != 0x1E)
  {
    result = sub_1B2229688();
    __break(1u);
    return result;
  }
  v11 = *a11;
  if (*(_QWORD *)(*a11 + 16))
  {
    v17 = result;
    swift_bridgeObjectRetain();
    v18 = sub_1B1DC3B00(v17, a2);
    if ((v19 & 1) != 0)
    {
      v97 = a5;
      v20 = (void **)(*(_QWORD *)(v11 + 56) + 32 * v18);
      v21 = *v20;
      v22 = v20[3];
      v94 = (uint64_t)v20[2];
      v95 = (uint64_t)v20[1];
      swift_unknownObjectRetain();
      swift_bridgeObjectRelease();
      if (v22 != (void *)28)
        return swift_unknownObjectRelease();
      v96 = v21;
      v23 = *a11;
      if (!*(_QWORD *)(*a11 + 16))
        return swift_unknownObjectRelease();
      swift_bridgeObjectRetain();
      v24 = sub_1B1DC3B00(a3, a4);
      if ((v25 & 1) != 0)
      {
        v26 = (void **)(*(_QWORD *)(v23 + 56) + 32 * v24);
        v27 = *v26;
        v28 = v26[3];
        v92 = (uint64_t)v26[2];
        v93 = (uint64_t)v26[1];
        swift_unknownObjectRetain();
        swift_bridgeObjectRelease();
        if (v28 != (void *)28)
          goto LABEL_23;
        v29 = *a11;
        if (!*(_QWORD *)(*a11 + 16))
          goto LABEL_23;
        swift_bridgeObjectRetain();
        v30 = sub_1B1DC3B00(v97, a6);
        if ((v31 & 1) != 0)
        {
          v91 = v27;
          v32 = (void **)(*(_QWORD *)(v29 + 56) + 32 * v30);
          v33 = *v32;
          v34 = v32[3];
          v88 = (uint64_t)v32[2];
          v89 = (uint64_t)v32[1];
          swift_unknownObjectRetain();
          swift_bridgeObjectRelease();
          if (v34 == (void *)28)
          {
            v90 = v33;
            v35 = a11[3];
            swift_bridgeObjectRetain();
            sub_1B2228890();
            sub_1B2228890();
            v83 = v35;
            v36 = sub_1B2082FD0(v35, a9);
            v86 = v38;
            v87 = v37;
            v85 = v39;
            swift_bridgeObjectRelease();
            v84 = (void *)v36;
            if (v36)
            {
              v40 = sub_1B20831FC(v96, v95, v94, 28);
              v41 = sub_1B20831FC(v91, v93, v92, 28);
              v42 = sub_1B20831FC(v90, v89, v88, 28);
              if (a9 == 31)
              {
                v57 = v42;
                v58 = sub_1B20833D8(v84, v87, v86, v85);
                v59 = v83;
                if (v83)
                {
                  v60 = v57;
                  __asm { FMOV            V0.4S, #1.0 }
                  do
                  {
                    HIDWORD(v66) = HIDWORD(_Q0);
                    LODWORD(v66) = *(_DWORD *)v40;
                    v40 += 4;
                    DWORD1(v66) = *(_DWORD *)v41;
                    v41 += 4;
                    DWORD2(v66) = *(_DWORD *)v60;
                    v60 += 4;
                    *(_OWORD *)v58 = v66;
                    v58 += 16;
                    --v59;
                  }
                  while (v59);
                }
                goto LABEL_31;
              }
              if (a9 == 30)
              {
                v43 = (float32x4_t *)v42;
                v44 = sub_1B2083334(v84, v87, v86, v85);
                if (v83)
                {
                  if (v83 >= 0x1C)
                  {
                    v45 = 0;
                    v68 = !is_mul_ok(v83 - 1, 0xCuLL);
                    v69 = 12 * (v83 - 1);
                    if (&v44[v69 + 4] >= v44 + 4
                      && !v68
                      && &v44[v69 + 8] >= v44 + 8
                      && !v68
                      && &v44[v69] >= v44
                      && !v68)
                    {
                      v45 = 0;
                      v70 = &v44[12 * v83];
                      v71 = &v41[4 * v83] > v44 && v70 > v41;
                      v72 = v71;
                      v73 = &v43->f32[v83] > (float32_t *)v44 && v70 > (char *)v43;
                      v74 = v73;
                      if ((v70 <= v40 || &v40[4 * v83] <= v44) && !v72 && !v74)
                      {
                        v45 = v83 & 0xFFFFFFFFFFFFFFF8;
                        v76 = (float32x4_t *)(v40 + 16);
                        v77 = (float32x4_t *)(v41 + 16);
                        v78 = v43 + 1;
                        v79 = v83 & 0xFFFFFFFFFFFFFFF8;
                        v80 = (float *)v44;
                        do
                        {
                          v101.val[0] = v76[-1];
                          v102.val[0] = *v76;
                          v101.val[1] = v77[-1];
                          v102.val[1] = *v77;
                          v101.val[2] = v78[-1];
                          v102.val[2] = *v78;
                          v81 = v80 + 24;
                          vst3q_f32(v80, v101);
                          v82 = v80 + 12;
                          vst3q_f32(v82, v102);
                          v76 += 2;
                          v77 += 2;
                          v78 += 2;
                          v80 = v81;
                          v79 -= 8;
                        }
                        while (v79);
                        if (v83 == v45)
                          goto LABEL_31;
                      }
                    }
                  }
                  else
                  {
                    v45 = 0;
                  }
                  v46 = 4 * v45;
                  v47 = &v40[4 * v45];
                  v48 = &v41[4 * v45];
                  v49 = v83 - v45;
                  v50 = &v44[12 * v45 + 4];
                  v51 = (__int32 *)((char *)v43 + v46);
                  do
                  {
                    v52 = *(_DWORD *)v47;
                    v47 += 4;
                    v53 = v52;
                    v54 = *(_DWORD *)v48;
                    v48 += 4;
                    v55 = v54;
                    v56 = *v51++;
                    *((_DWORD *)v50 - 1) = v53;
                    *(_DWORD *)v50 = v55;
                    *((_DWORD *)v50 + 1) = v56;
                    v50 += 12;
                    --v49;
                  }
                  while (v49);
                }
              }
LABEL_31:
              swift_bridgeObjectRetain();
              sub_1B1B84078(v17, a2);
              swift_bridgeObjectRelease();
              swift_unknownObjectRelease();
              swift_bridgeObjectRetain();
              sub_1B1B84078(a3, a4);
              swift_bridgeObjectRelease();
              swift_unknownObjectRelease();
              swift_bridgeObjectRetain();
              sub_1B1B84078(v97, a6);
              swift_bridgeObjectRelease();
              swift_unknownObjectRelease();
              swift_bridgeObjectRetain();
              swift_unknownObjectRetain();
              isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
              v100 = *a11;
              *a11 = 0x8000000000000000;
              sub_1B1B89F54((uint64_t)v84, v87, v86, v85, a7, a8, isUniquelyReferenced_nonNull_native);
              *a11 = v100;
              swift_unknownObjectRelease();
              swift_unknownObjectRelease();
              swift_unknownObjectRelease();
              swift_unknownObjectRelease();
              swift_bridgeObjectRelease();
              return swift_bridgeObjectRelease();
            }
            swift_unknownObjectRelease();
            swift_unknownObjectRelease();
            return swift_unknownObjectRelease();
          }
          swift_unknownObjectRelease();
LABEL_23:
          swift_unknownObjectRelease();
          return swift_unknownObjectRelease();
        }
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
      }
      else
      {
        swift_unknownObjectRelease();
      }
    }
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1B1FA4740(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, _QWORD *a12)
{
  uint64_t v12;
  uint64_t v18;
  uint64_t v19;
  char v20;
  void **v21;
  void *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  void **v27;
  void *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  void **v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  char *v47;
  char *v48;
  char *v49;
  char *v50;
  uint64_t i;
  __int128 v52;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v75;

  v12 = *a12;
  if (!*(_QWORD *)(*a12 + 16))
    return result;
  v18 = result;
  swift_bridgeObjectRetain();
  v19 = sub_1B1DC3B00(v18, a2);
  if ((v20 & 1) == 0)
    return swift_bridgeObjectRelease();
  v21 = (void **)(*(_QWORD *)(v12 + 56) + 32 * v19);
  v22 = *v21;
  v23 = v21[3];
  v70 = (uint64_t)v21[2];
  v71 = (uint64_t)v21[1];
  swift_unknownObjectRetain();
  swift_bridgeObjectRelease();
  if (v23 != (void *)28)
    return swift_unknownObjectRelease();
  v69 = v22;
  v24 = *a12;
  if (!*(_QWORD *)(*a12 + 16))
    return swift_unknownObjectRelease();
  swift_bridgeObjectRetain();
  v25 = sub_1B1DC3B00(a3, a4);
  if ((v26 & 1) == 0)
  {
    swift_unknownObjectRelease();
    return swift_bridgeObjectRelease();
  }
  v27 = (void **)(*(_QWORD *)(v24 + 56) + 32 * v25);
  v28 = *v27;
  v29 = v27[3];
  v65 = (uint64_t)v27[2];
  v67 = (uint64_t)v27[1];
  swift_unknownObjectRetain();
  swift_bridgeObjectRelease();
  if (v29 != (void *)28 || (v30 = *a12, !*(_QWORD *)(*a12 + 16)))
  {
    swift_unknownObjectRelease();
    return swift_unknownObjectRelease();
  }
  swift_bridgeObjectRetain();
  v31 = sub_1B1DC3B00(a5, a6);
  if ((v32 & 1) == 0)
  {
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    return swift_bridgeObjectRelease();
  }
  v33 = (void **)(*(_QWORD *)(v30 + 56) + 32 * v31);
  v34 = *v33;
  v61 = (uint64_t)v33[2];
  v62 = (uint64_t)v33[1];
  v63 = v33[3];
  swift_unknownObjectRetain();
  swift_bridgeObjectRelease();
  if (v63 != (void *)28 || (v64 = v34, v35 = *a12, !*(_QWORD *)(*a12 + 16)))
  {
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    return swift_unknownObjectRelease();
  }
  v60 = v28;
  swift_bridgeObjectRetain();
  v36 = sub_1B1DC3B00(a7, a8);
  if ((v37 & 1) == 0)
  {
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    return swift_unknownObjectRelease();
  }
  v38 = *(_QWORD *)(v35 + 56) + 32 * v36;
  v39 = *(_QWORD *)(v38 + 24);
  v57 = *(_QWORD *)(v38 + 16);
  v58 = *(_QWORD *)(v38 + 8);
  v59 = *(void **)v38;
  swift_unknownObjectRetain();
  swift_bridgeObjectRelease();
  if (v39 != 28)
    goto LABEL_27;
  v40 = a12[3];
  swift_bridgeObjectRetain();
  sub_1B2228890();
  sub_1B2228890();
  v54 = v40;
  v41 = sub_1B2082FD0(v40, 31);
  v43 = v42;
  v55 = v45;
  v56 = v44;
  swift_bridgeObjectRelease();
  if (!v41)
  {
LABEL_27:
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    return swift_unknownObjectRelease();
  }
  v72 = sub_1B20831FC(v69, v71, v70, 28);
  v68 = sub_1B20831FC(v60, v67, v65, 28);
  v66 = v43;
  v46 = (void *)v41;
  v47 = sub_1B20831FC(v64, v62, v61, 28);
  v48 = sub_1B20831FC(v59, v58, v57, 28);
  v49 = sub_1B20833D8(v46, v66, v56, v55);
  v50 = v68;
  for (i = v54; i; --i)
  {
    LODWORD(v52) = *(_DWORD *)v72;
    v72 += 4;
    DWORD1(v52) = *(_DWORD *)v50;
    v50 += 4;
    DWORD2(v52) = *(_DWORD *)v47;
    v47 += 4;
    HIDWORD(v52) = *(_DWORD *)v48;
    v48 += 4;
    *(_OWORD *)v49 = v52;
    v49 += 16;
  }
  swift_bridgeObjectRetain();
  sub_1B1B84078(v18, a2);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRetain();
  sub_1B1B84078(a3, a4);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRetain();
  sub_1B1B84078(a5, a6);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRetain();
  sub_1B1B84078(a7, a8);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v75 = *a12;
  *a12 = 0x8000000000000000;
  sub_1B1B89F54((uint64_t)v46, v66, v56, v55, a9, a10, isUniquelyReferenced_nonNull_native);
  *a12 = v75;
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B1FA4C24(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, _QWORD *a12)
{
  uint64_t v12;
  uint64_t v18;
  uint64_t v19;
  char v20;
  void **v21;
  void *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  void **v27;
  void *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  void **v33;
  void *v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  char *v54;
  unsigned int v55;
  unsigned int v56;
  float v57;
  __int128 v58;
  uint64_t v59;
  char *v60;
  char *v61;
  char *v62;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  float v71;
  __int128 v72;
  char isUniquelyReferenced_nonNull_native;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  uint64_t v86;
  char *v87;
  float v88;
  uint64_t v89;
  char *v90;
  float v91;
  unsigned int v92;
  void *v93;
  uint64_t v94;
  char *v95;
  char *v96;
  float v97;
  uint64_t v98;
  char *v99;
  unsigned __int8 *v100;
  float v101;
  uint64_t v104;

  v12 = *a12;
  if (*(_QWORD *)(*a12 + 16))
  {
    v18 = result;
    swift_bridgeObjectRetain();
    v19 = sub_1B1DC3B00(v18, a2);
    if ((v20 & 1) != 0)
    {
      v21 = (void **)(*(_QWORD *)(v12 + 56) + 32 * v19);
      v22 = *v21;
      v98 = (uint64_t)v21[1];
      v23 = v21[3];
      v94 = (uint64_t)v21[2];
      swift_unknownObjectRetain();
      swift_bridgeObjectRelease();
      if (v23 != (void *)45)
        return swift_unknownObjectRelease();
      v93 = v22;
      v24 = *a12;
      if (!*(_QWORD *)(*a12 + 16))
        return swift_unknownObjectRelease();
      swift_bridgeObjectRetain();
      v25 = sub_1B1DC3B00(a3, a4);
      if ((v26 & 1) != 0)
      {
        v27 = (void **)(*(_QWORD *)(v24 + 56) + 32 * v25);
        v28 = *v27;
        v89 = (uint64_t)v27[1];
        v29 = v27[3];
        v86 = (uint64_t)v27[2];
        swift_unknownObjectRetain();
        swift_bridgeObjectRelease();
        if (v29 != (void *)45 || (v30 = *a12, !*(_QWORD *)(*a12 + 16)))
        {
          swift_unknownObjectRelease();
          return swift_unknownObjectRelease();
        }
        v85 = v28;
        swift_bridgeObjectRetain();
        v31 = sub_1B1DC3B00(a5, a6);
        if ((v32 & 1) != 0)
        {
          v33 = (void **)(*(_QWORD *)(v30 + 56) + 32 * v31);
          v34 = *v33;
          v78 = (uint64_t)v33[2];
          v80 = (uint64_t)v33[1];
          v82 = v33[3];
          swift_unknownObjectRetain();
          swift_bridgeObjectRelease();
          if (v82 == (void *)45)
          {
            v77 = v34;
            v35 = a12[3];
            swift_bridgeObjectRetain();
            sub_1B2228890();
            sub_1B2228890();
            v83 = v35;
            v36 = (void *)sub_1B2082FD0(v35, 31);
            v38 = v37;
            v75 = v40;
            v76 = v39;
            swift_bridgeObjectRelease();
            if (v36)
            {
              v99 = sub_1B2083474(v93, v98, v94, 45);
              v95 = sub_1B2083474(v85, v89, v86, 45);
              v90 = sub_1B2083474(v77, v80, v78, 45);
              v79 = v38;
              v81 = (uint64_t)v36;
              v41 = sub_1B20833D8(v36, v38, v76, v75);
              v42 = v41;
              if (a8)
              {
                v43 = *a12;
                if (*(_QWORD *)(*a12 + 16))
                {
                  v87 = v41;
                  swift_bridgeObjectRetain();
                  v44 = sub_1B1DC3B00(a7, a8);
                  if ((v45 & 1) != 0)
                  {
                    v46 = (_QWORD *)(*(_QWORD *)(v43 + 56) + 32 * v44);
                    if (v46[3] == 28)
                    {
                      v48 = v46[1];
                      v47 = v46[2];
                      v74 = (void *)swift_unknownObjectRetain();
                      v49 = sub_1B20831FC(v74, v48, v47, 28);
                      v50 = v83;
                      v51 = v99;
                      v52 = v95;
                      v53 = v90;
                      v54 = v87;
                      if (v83)
                      {
                        do
                        {
                          v84 = v50;
                          v96 = v49;
                          v100 = (unsigned __int8 *)(v51 + 1);
                          v91 = sub_1B1FA7AF8(*v51);
                          v55 = *v52++;
                          v88 = sub_1B1FA7AF8(v55);
                          v56 = *v53++;
                          v57 = sub_1B1FA7AF8(v56);
                          v51 = (char *)v100;
                          *(_QWORD *)&v58 = __PAIR64__(LODWORD(v88), LODWORD(v91));
                          *((float *)&v58 + 2) = v57;
                          HIDWORD(v58) = *(_DWORD *)v96;
                          v49 = v96 + 4;
                          *(_OWORD *)v54 = v58;
                          v54 += 16;
                          v50 = v84 - 1;
                        }
                        while (v84 != 1);
                      }
                      sub_1B1B84078(a7, a8);
                      swift_unknownObjectRelease();
                      swift_bridgeObjectRelease();
                      swift_unknownObjectRelease();
LABEL_30:
                      swift_bridgeObjectRetain();
                      sub_1B1B84078(v18, a2);
                      swift_bridgeObjectRelease();
                      swift_unknownObjectRelease();
                      swift_bridgeObjectRetain();
                      sub_1B1B84078(a3, a4);
                      swift_bridgeObjectRelease();
                      swift_unknownObjectRelease();
                      swift_bridgeObjectRetain();
                      sub_1B1B84078(a5, a6);
                      swift_bridgeObjectRelease();
                      swift_unknownObjectRelease();
                      swift_bridgeObjectRetain();
                      swift_unknownObjectRetain();
                      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
                      v104 = *a12;
                      *a12 = 0x8000000000000000;
                      sub_1B1B89F54(v81, v79, v76, v75, a9, a10, isUniquelyReferenced_nonNull_native);
                      *a12 = v104;
                      swift_unknownObjectRelease();
                      swift_unknownObjectRelease();
                      swift_unknownObjectRelease();
                      swift_unknownObjectRelease();
                      swift_bridgeObjectRelease();
                      return swift_bridgeObjectRelease();
                    }
                  }
                  swift_bridgeObjectRelease();
                  v42 = v87;
                }
              }
              v59 = v83;
              v60 = v99;
              v61 = v95;
              v62 = v90;
              if (v83)
              {
                __asm { FMOV            V0.4S, #1.0 }
                v92 = HIDWORD(_Q0);
                do
                {
                  v68 = *v60++;
                  v101 = sub_1B1FA7AF8(v68);
                  v69 = *v61++;
                  v97 = sub_1B1FA7AF8(v69);
                  v70 = *v62++;
                  v71 = sub_1B1FA7AF8(v70);
                  *(_QWORD *)&v72 = __PAIR64__(LODWORD(v97), LODWORD(v101));
                  *((_QWORD *)&v72 + 1) = __PAIR64__(v92, LODWORD(v71));
                  *(_OWORD *)v42 = v72;
                  v42 += 16;
                  --v59;
                }
                while (v59);
              }
              goto LABEL_30;
            }
          }
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          return swift_unknownObjectRelease();
        }
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
      }
      else
      {
        swift_unknownObjectRelease();
      }
    }
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1B1FA5180(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t result;
  uint64_t v21;
  _QWORD v22[16];

  v22[15] = *MEMORY[0x1E0C80C00];
  v10 = sub_1B22295D4();
  v22[4] = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v11);
  v22[2] = (char *)v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)v22 - v15;
  v17 = *(_QWORD *)(v5 + OBJC_IVAR____TtC3VFX13EntityManager_renderer);
  if (v17)
  {
    swift_retain();
    v22[6] = v16;
    sub_1B22295BC();
    MEMORY[0x1E0C80A78](v22, v18);
    v22[7] = v17;
    v22[8] = a3;
    v22[-6] = v17;
    v22[-5] = a3;
    v22[-4] = a4;
    v22[-3] = v5;
    v22[3] = v5;
    v21 = a5;
    v19 = (char *)&loc_1B1FA52A8 + 4 * byte_1B22A9F58[a2 >> 62];
    v22[5] = v10;
    __asm { BR              X10 }
  }
  result = sub_1B2229688();
  __break(1u);
  return result;
}

uint64_t sub_1B1FA5750(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5, unint64_t *a6)
{
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  unint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  id v29;
  void *v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void (*v66)(uint64_t, uint64_t);
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  id v88;
  char *v89;
  id v90;
  _QWORD *v91;
  unint64_t v92;
  unint64_t v93;
  _QWORD *v94;
  _QWORD *v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t result;
  uint64_t *v101;
  unint64_t *v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  int64_t v106;
  uint64_t v107;
  int64_t v108;
  int v109;
  unint64_t v110;
  int v111;
  uint64_t v112;
  id v113;
  void *v114;
  id v115;
  uint64_t v116;
  uint64_t *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  float v122;
  uint64_t *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  char v131;
  char v132;
  unint64_t v133;
  uint64_t v134;
  unint64_t v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  unint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t *v143;
  uint64_t *v144;
  _QWORD *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v152;
  char v153;
  unint64_t v154;
  char v155;
  uint64_t v156;
  uint64_t v157;
  char v158;
  _QWORD *v159;
  _QWORD *v160;
  uint64_t v161;
  uint64_t v162;
  char v163;
  uint64_t v164;
  unint64_t v165;
  unint64_t v166;
  uint64_t v167;
  char v168;
  _QWORD *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  void *v173;
  float32x4_t *v174;
  char v175;
  unint64_t v176;
  float32x4_t v177;
  float32x4_t v178;
  simd_float4 v179;
  simd_float4 v180;
  int32x4_t v181;
  float v182;
  float32x4_t v183;
  unint64_t v184;
  uint64_t v185;
  char v186;
  _QWORD *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  void *v191;
  char *v192;
  char v193;
  float32x4_t v194;
  float32x4_t v195;
  __int128 v196;
  unint64_t v197;
  uint64_t v198;
  uint64_t v200;
  uint64_t v201;
  uint64_t *v202;
  uint64_t v203;
  int v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  char v208;
  uint64_t v209;
  unint64_t v210;
  unint64_t v211;
  uint64_t v212;
  BOOL v213;
  uint64_t v214;
  unint64_t v215;
  float *v216;
  uint64_t v217;
  float32x4_t v218;
  __int128 v219;
  __int128 v220;
  uint64_t v221;
  float v222;
  __int128 v223;
  uint64_t v224;
  __int32 v225;
  __int32 v226;
  float *v227;
  unint64_t v228;
  unint64_t v229;
  uint64_t v230;
  char v231;
  _QWORD *v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  void *v236;
  float32x4_t *v237;
  char v238;
  int8x16_t v243;
  float32x4_t v244;
  float32x4_t v245;
  float32x4_t v246;
  unint64_t v247;
  unint64_t v248;
  unint64_t *v249;
  unint64_t v250;
  unint64_t v251;
  unint64_t *v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  int v257;
  uint64_t v258;
  char *v259;
  uint64_t v260;
  uint64_t v261;
  unint64_t v262;
  unint64_t v263;
  uint64_t *v264;
  unint64_t v265;
  char *v266;
  uint64_t v267;
  _QWORD *v268;
  unint64_t *v269;
  unint64_t v270;
  unint64_t v271;
  uint64_t *v272;
  float32x4_t v273;
  simd_float4 v274;
  float32x4_t v275;
  float32x4_t v276;
  float32x4_t v277;
  float32x4_t v278;
  float32x4_t v279;
  __int128 v280;
  __int128 v281;
  float32x4_t v282;
  float32x4_t v283;
  __int128 v284;
  unint64_t v285;
  unint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;

  v273.i64[0] = a5;
  v263 = a4;
  v262 = a3;
  v278.i64[0] = sub_1B2229070();
  v277.i64[0] = *(_QWORD *)(v278.i64[0] - 8);
  MEMORY[0x1E0C80A78](v278.i64[0], v10);
  v276.i64[0] = (uint64_t)&v253 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v282.i64[0] = sub_1B2227DA4();
  v12 = *(_QWORD *)(v282.i64[0] - 8);
  MEMORY[0x1E0C80A78](v282.i64[0], v13);
  v279.i64[0] = (uint64_t)&v253 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_1B22287A0();
  MEMORY[0x1E0C80A78](v15, v16);
  v266 = (char *)&v253 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_1B1D354A8();
  if (!v19)
    goto LABEL_93;
  if (v18 != 7957616 || v19 != 0xE300000000000000)
  {
    v20 = sub_1B2229D24();
    swift_bridgeObjectRelease();
    if ((v20 & 1) != 0)
      goto LABEL_6;
LABEL_93:
    sub_1B1FA7AB4();
    swift_allocError();
    *v99 = 0;
    v99[1] = 0;
    return swift_willThrow();
  }
  swift_bridgeObjectRelease();
LABEL_6:
  v261 = a2;
  v260 = v6;
  v272 = 0;
  v267 = 0;
  v268 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v265 = 0xE000000000000000;
  v275.i32[0] = *MEMORY[0x1E0CB2398];
  LODWORD(v270) = 4;
  v271 = (unint64_t)"VFX/PointCache+PLY.swift";
  v269 = a6;
  v274.i64[0] = a1;
  while (1)
  {
    v21 = *(_QWORD *)(a1 + 16);
    v22 = *(_QWORD *)a1;
    if (*(_QWORD *)a1)
    {
      v23 = *(_QWORD *)(a1 + 8) - v22;
      if (v21 >= v23)
        goto LABEL_95;
    }
    else
    {
      if ((v21 & 0x8000000000000000) == 0)
        goto LABEL_95;
      v23 = 0;
    }
    v24 = *(unsigned __int8 *)(a1 + 24);
    v25 = *(_QWORD *)(a1 + 16);
    if (*(unsigned __int8 *)(v22 + v21) != v24)
    {
      v25 = v23;
      if (v21 + 1 != v23)
      {
        v25 = v21 + 1;
        if (*(unsigned __int8 *)(v22 + v21 + 1) != v24)
        {
          v26 = v21 + 2;
          while (v23 != v26)
          {
            v27 = *(unsigned __int8 *)(v22 + v26++);
            if (v27 == v24)
            {
              v25 = v26 - 1;
              goto LABEL_20;
            }
          }
          v25 = v23;
        }
      }
    }
LABEL_20:
    v285 = *(_QWORD *)(a1 + 16);
    v286 = v25;
    v287 = v22;
    v288 = v23;
    sub_1B2228794();
    sub_1B1D3568C();
    sub_1B19E52CC(&qword_1EEF5DC70, (uint64_t (*)(uint64_t))sub_1B1D3568C, MEMORY[0x1E0DEDE38]);
    sub_1B2228770();
    if (!v28)
      goto LABEL_95;
    v21 += sub_1B2228830() + 1;
    *(_QWORD *)(v274.i64[0] + 16) = v21;
    v29 = objc_allocWithZone(MEMORY[0x1E0CB3900]);
    swift_bridgeObjectRetain();
    v30 = (void *)sub_1B2228728();
    swift_bridgeObjectRelease();
    v31 = objc_msgSend(v29, sel_initWithString_, v30);

    sub_1B2229058();
    v33 = v32;
    swift_bridgeObjectRelease();
    if (v33)
    {
LABEL_22:
      swift_bridgeObjectRelease();

      goto LABEL_23;
    }
    sub_1B2229058();
    v35 = v34;
    swift_bridgeObjectRelease();
    if (v35)
      break;
    sub_1B2229058();
    v37 = v36;
    swift_bridgeObjectRelease();
    if (v37)
    {
      v53 = v279.i64[0];
      sub_1B2227D5C();
      v54 = sub_1B2229064();
      v56 = v55;
      (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v53, v282.i64[0]);
      swift_bridgeObjectRelease();
      if (v56)
      {
        if (v54 == 0x6969637361 && v56 == 0xE500000000000000)
        {
          v265 = 0xE500000000000000;
          v57 = 0x6969637361;
          goto LABEL_54;
        }
      }
      else
      {
        v54 = 0;
        v56 = 0xE000000000000000;
      }
      if ((sub_1B2229D24() & 1) == 0)
      {
        if (v54 == 0xD000000000000014 && v56 == (v271 | 0x8000000000000000))
        {
          v265 = v271 | 0x8000000000000000;
          v57 = 0xD000000000000014;
LABEL_54:
          v272 = (uint64_t *)v57;
LABEL_57:
          v58 = v277.i64[0];
          v59 = v276.i64[0];
          v60 = v278.i64[0];
          (*(void (**)(uint64_t, _QWORD, uint64_t))(v277.i64[0] + 104))(v276.i64[0], v275.u32[0], v278.i64[0]);
          v61 = sub_1B2229088();
          (*(void (**)(uint64_t, uint64_t))(v58 + 8))(v59, v60);
          if ((v61 & 0x100000000) != 0 || *(float *)&v61 != 1.0)
          {
            swift_bridgeObjectRelease();
            v285 = 0;
            v286 = 0xE000000000000000;
            sub_1B2229430();
            swift_bridgeObjectRelease();
            v285 = 0xD000000000000010;
            v286 = 0x80000001B2346590;
            goto LABEL_198;
          }
          swift_bridgeObjectRelease();

          goto LABEL_60;
        }
        if ((sub_1B2229D24() & 1) == 0)
        {
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v285 = 0;
          v286 = 0xE000000000000000;
          sub_1B2229430();
          swift_bridgeObjectRelease();
          v285 = 0xD000000000000015;
          v286 = 0x80000001B2346570;
          sub_1B2228890();
          swift_bridgeObjectRelease();
          sub_1B2228890();
          v250 = v285;
          v251 = v286;
          sub_1B1FA7AB4();
          swift_allocError();
          *v252 = v250;
          v252[1] = v251;
          swift_willThrow();

          return swift_bridgeObjectRelease();
        }
      }
      v272 = (uint64_t *)v54;
      v265 = v56;
      goto LABEL_57;
    }
    sub_1B2229058();
    v39 = v38;
    swift_bridgeObjectRelease();
    if (v39)
    {
      v40 = v279.i64[0];
      sub_1B2227D5C();
      v41 = sub_1B2229064();
      v43 = v42;
      (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v40, v282.i64[0]);
      if (!v43)
        goto LABEL_22;
      if (v41 == 1701011814 && v43 == 0xE400000000000000 || (sub_1B2229D24() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        LODWORD(v270) = 1;
        goto LABEL_23;
      }
      if (v41 == 0x786574726576 && v43 == 0xE600000000000000 || (sub_1B2229D24() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v46 = v277.i64[0];
        v47 = v276.i64[0];
        v48 = v278.i64[0];
        (*(void (**)(uint64_t, _QWORD, uint64_t))(v277.i64[0] + 104))(v276.i64[0], v275.u32[0], v278.i64[0]);
        v49 = sub_1B222907C();
        v51 = v50;

        (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v47, v48);
        LODWORD(v270) = 0;
        if ((v51 & 1) != 0)
          v52 = 0;
        else
          v52 = v49;
        v267 = v52;
LABEL_23:
        a1 = v274.i64[0];
      }
      else
      {
        if (v41 == 0x69736E6972746E69 && v43 == 0xE900000000000063 || (sub_1B2229D24() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v80 = v277.i64[0];
          v81 = v276.i64[0];
          v82 = v278.i64[0];
          (*(void (**)(uint64_t, _QWORD, uint64_t))(v277.i64[0] + 104))(v276.i64[0], v275.u32[0], v278.i64[0]);
          sub_1B222907C();

          (*(void (**)(uint64_t, uint64_t))(v80 + 8))(v81, v82);
          v83 = 2;
        }
        else
        {
          if ((v41 != 0x69736E6972747865 || v43 != 0xE900000000000063) && (sub_1B2229D24() & 1) == 0)
          {
            swift_bridgeObjectRelease();
            v285 = 0;
            v286 = 0xE000000000000000;
            sub_1B2229430();
            swift_bridgeObjectRelease();
            v285 = v41;
            v286 = v43;
            sub_1B2228890();
LABEL_198:
            sub_1B2228890();
            swift_bridgeObjectRelease();
            sub_1B2228890();
            v247 = v285;
            v248 = v286;
            sub_1B1FA7AB4();
            swift_allocError();
            *v249 = v247;
            v249[1] = v248;
            swift_willThrow();

            return swift_bridgeObjectRelease();
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v84 = v277.i64[0];
          v85 = v276.i64[0];
          v86 = v278.i64[0];
          (*(void (**)(uint64_t, _QWORD, uint64_t))(v277.i64[0] + 104))(v276.i64[0], v275.u32[0], v278.i64[0]);
          sub_1B222907C();

          (*(void (**)(uint64_t, uint64_t))(v84 + 8))(v85, v86);
          v83 = 3;
        }
        LODWORD(v270) = v83;
LABEL_60:
        a1 = v274.i64[0];
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      sub_1B2229058();
      v45 = v44;
      swift_bridgeObjectRelease();
      a1 = v274.i64[0];
      if (!v45)
        goto LABEL_36;
      if (!(_BYTE)v270)
      {
        v62 = v279.i64[0];
        sub_1B2227D5C();
        v63 = sub_1B2229064();
        v65 = v64;
        v66 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
        v67 = v282.i64[0];
        v66(v62, v282.i64[0]);
        if (v65)
        {
          sub_1B2227D5C();
          v68 = sub_1B2229064();
          v69 = v62;
          v71 = v70;
          v66(v69, v67);
          if (!v71)
            goto LABEL_72;
          v72 = sub_1B1FA391C(v63, v65);
          swift_bridgeObjectRelease();
          v285 = v262;
          v286 = v263;
          swift_bridgeObjectRetain();
          sub_1B2228890();
          sub_1B2228890();
          v73 = (void *)sub_1B2082FD0(v267, v72);
          v75 = v74;
          v77 = v76;
          v79 = v78;
          swift_bridgeObjectRelease();
          if (v73)
          {
            v270 = v75;
            if (v79 == 28)
            {
              if (objc_msgSend((id)swift_unknownObjectRetain(), sel_storageMode) == (id)2)
              {
                v258 = 0;
                v259 = 0;
                v264 = 0;
                v256 = 0;
              }
              else
              {
                v87 = (char *)objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
                v88 = v73;
                v264 = 0;
                v256 = 0;
                v259 = &v87[v270];
                v258 = v77 / 4;
              }
              v257 = 1;
            }
            else
            {
              v255 = v77;
              swift_unknownObjectRetain();
              v254 = v79;
              if (v79 == 45)
              {
                if (objc_msgSend(v73, sel_storageMode) == (id)2)
                {
                  v257 = 0;
                  v258 = 0;
                  v259 = 0;
                  v264 = 0;
                  v256 = 0;
                  goto LABEL_82;
                }
                v89 = (char *)objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
                v90 = v73;
                v257 = 0;
                v258 = 0;
                v259 = 0;
                v264 = (uint64_t *)&v89[v75];
                v77 = v255;
                v256 = v255;
              }
              else
              {
                v258 = 0;
                v259 = 0;
                v264 = 0;
                v256 = 0;
                v257 = 1;
LABEL_82:
                v77 = v255;
              }
              v79 = v254;
            }
            v91 = v268;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              v91 = sub_1B1C694CC(0, v91[2] + 1, 1, v91);
            v268 = v91;
            v93 = v91[2];
            v92 = v91[3];
            if (v93 >= v92 >> 1)
              v268 = sub_1B1C694CC(v92 > 1, v93 + 1, 1, v268);
            v94 = v268;
            v268[2] = v93 + 1;
            v95 = &v94[12 * v93];
            v95[4] = v68;
            v95[5] = v71;
            v96 = v270;
            v95[6] = v73;
            v95[7] = v96;
            v95[8] = v77;
            v95[9] = v79;
            v97 = v258;
            v95[10] = v259;
            v95[11] = v97;
            *((_BYTE *)v95 + 96) = v79 != 28;
            v98 = v256;
            v95[13] = v264;
            v95[14] = v98;
            *((_BYTE *)v95 + 120) = v257;
            swift_unknownObjectRelease();
          }
          else
          {
LABEL_72:
            swift_bridgeObjectRelease();
          }
        }

        LODWORD(v270) = 0;
        goto LABEL_60;
      }
      if (v270 == 4)
      {

        LODWORD(v270) = 4;
      }
      else
      {
LABEL_36:

      }
    }
  }
  swift_bridgeObjectRelease();

LABEL_95:
  v101 = v272;
  if ((v272 != (uint64_t *)0x6969637361 || v265 != 0xE500000000000000) && (sub_1B2229D24() & 1) == 0)
  {
    v279.i64[0] = v22;
    _ZF = v101 == (uint64_t *)0xD000000000000014;
    v102 = v269;
    v103 = v267;
    v104 = v268;
    v200 = v274.i64[0];
    if (_ZF && v265 == (v271 | 0x8000000000000000))
    {
      if (!v267)
      {
        v265 = v271 | 0x8000000000000000;
        goto LABEL_131;
      }
    }
    else if ((sub_1B2229D24() & 1) == 0 || !v103)
    {
LABEL_131:
      v102[1] = v262;
      v102[2] = v263;
      v102[3] = v103;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v142 = v104[2];
      if (v142)
      {
        v143 = v268 + 9;
        do
        {
          v149 = *(v143 - 5);
          v148 = *(v143 - 4);
          v150 = *(v143 - 3);
          v278.i64[0] = *(v143 - 2);
          v279.i64[0] = *(v143 - 1);
          v282.i64[0] = *v143;
          swift_bridgeObjectRetain_n();
          swift_unknownObjectRetain_n();
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v285 = *v102;
          v152 = v285;
          *v102 = 0x8000000000000000;
          v154 = sub_1B1DC3B00(v149, v148);
          v155 = v153;
          v156 = *(_QWORD *)(v152 + 16) + ((v153 & 1) == 0);
          if (*(_QWORD *)(v152 + 24) >= v156)
          {
            if ((isUniquelyReferenced_nonNull_native & 1) != 0)
            {
              v159 = (_QWORD *)v285;
              if ((v153 & 1) != 0)
                goto LABEL_141;
            }
            else
            {
              sub_1B1EB1E14();
              v159 = (_QWORD *)v285;
              if ((v155 & 1) != 0)
                goto LABEL_141;
            }
          }
          else
          {
            sub_1B1EA2094(v156, isUniquelyReferenced_nonNull_native);
            v157 = sub_1B1DC3B00(v149, v148);
            if ((v155 & 1) != (v158 & 1))
              goto LABEL_202;
            v154 = v157;
            v159 = (_QWORD *)v285;
            if ((v155 & 1) != 0)
            {
LABEL_141:
              v160 = (_QWORD *)(v159[7] + 32 * v154);
              swift_unknownObjectRelease();
              v161 = v278.i64[0];
              *v160 = v150;
              v160[1] = v161;
              v162 = v282.i64[0];
              v160[2] = v279.i64[0];
              v160[3] = v162;
              goto LABEL_134;
            }
          }
          v159[(v154 >> 6) + 8] |= 1 << v154;
          v144 = (uint64_t *)(v159[6] + 16 * v154);
          *v144 = v149;
          v144[1] = v148;
          v145 = (_QWORD *)(v159[7] + 32 * v154);
          v146 = v278.i64[0];
          *v145 = v150;
          v145[1] = v146;
          v147 = v282.i64[0];
          v145[2] = v279.i64[0];
          v145[3] = v147;
          ++v159[2];
          swift_bridgeObjectRetain();
LABEL_134:
          v143 += 12;
          v102 = v269;
          *v269 = (unint64_t)v159;
          swift_unknownObjectRelease();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease();
          --v142;
        }
        while (v142);
      }
      swift_bridgeObjectRelease();
      if (!*(_QWORD *)(*v102 + 16) || (sub_1B1DC3B00(0x305F63645F66, 0xE600000000000000), (v163 & 1) == 0))
      {
        v198 = v261;
        sub_1B1FA4198(120, 0xE100000000000000, 121, 0xE100000000000000, 122, 0xE100000000000000, 0x6E6F697469736F70, 0xE800000000000000, 30, v261, v102);
        sub_1B1FA4198(30830, 0xE200000000000000, 31086, 0xE200000000000000, 31342, 0xE200000000000000, 0x6C616D726F6ELL, 0xE600000000000000, 30, v198, v102);
        sub_1B1FA4198(0x305F656C616373, 0xE700000000000000, 0x315F656C616373, 0xE700000000000000, 0x325F656C616373, 0xE700000000000000, 1702521203, 0xE400000000000000, 30, v198, v102);
        sub_1B1FA3D9C(117, 0xE100000000000000, 118, 0xE100000000000000, 30325, 0xE200000000000000, v198, v102);
        sub_1B1FA4C24(6579570, 0xE300000000000000, 0x6E65657267, 0xE500000000000000, 1702194274, 0xE400000000000000, 0, 0, 0x726F6C6F63, 0xE500000000000000, v198, v102);
        sub_1B1FA4C24(0x5F65737566666964, 0xEB00000000646572, 0x5F65737566666964, 0xED00006E65657267, 0x5F65737566666964, 0xEC00000065756C62, 0x7469736E65746E69, 0xE900000000000079, 0x726F6C6F63, 0xE500000000000000, v198, v102);
        sub_1B1FA4740(0x305F63645F66, 0xE600000000000000, 0x315F63645F66, 0xE600000000000000, 0x325F63645F66, 0xE600000000000000, 0x7974696361706FLL, 0xE700000000000000, 0x726F6C6F63, 0xE500000000000000, v198, v102);
        sub_1B1FA4740(0x315F746F72, 0xE500000000000000, 0x325F746F72, 0xE500000000000000, 0x335F746F72, 0xE500000000000000, 0x305F746F72, 0xE500000000000000, 0x7461746E6569726FLL, 0xEB000000006E6F69, v198, v102);
        return swift_bridgeObjectRelease();
      }
      v164 = v261;
      sub_1B1FA4198(120, 0xE100000000000000, 121, 0xE100000000000000, 122, 0xE100000000000000, 0x6E6F697469736F70, 0xE800000000000000, 30, v261, v102);
      sub_1B1FA4198(30830, 0xE200000000000000, 31086, 0xE200000000000000, 31342, 0xE200000000000000, 0x6C616D726F6ELL, 0xE600000000000000, 30, v164, v102);
      sub_1B1FA4198(0x305F656C616373, 0xE700000000000000, 0x315F656C616373, 0xE700000000000000, 0x325F656C616373, 0xE700000000000000, 1702521203, 0xE400000000000000, 30, v164, v102);
      sub_1B1FA3D9C(117, 0xE100000000000000, 118, 0xE100000000000000, 30325, 0xE200000000000000, v164, v102);
      sub_1B1FA4C24(6579570, 0xE300000000000000, 0x6E65657267, 0xE500000000000000, 1702194274, 0xE400000000000000, 0, 0, 0x726F6C6F63, 0xE500000000000000, v164, v102);
      sub_1B1FA4C24(0x5F65737566666964, 0xEB00000000646572, 0x5F65737566666964, 0xED00006E65657267, 0x5F65737566666964, 0xEC00000065756C62, 0x7469736E65746E69, 0xE900000000000079, 0x726F6C6F63, 0xE500000000000000, v164, v102);
      sub_1B1FA4740(0x305F63645F66, 0xE600000000000000, 0x315F63645F66, 0xE600000000000000, 0x325F63645F66, 0xE600000000000000, 0x7974696361706FLL, 0xE700000000000000, 0x726F6C6F63, 0xE500000000000000, v164, v102);
      sub_1B1FA4740(0x315F746F72, 0xE500000000000000, 0x325F746F72, 0xE500000000000000, 0x335F746F72, 0xE500000000000000, 0x305F746F72, 0xE500000000000000, 0x7461746E6569726FLL, 0xEB000000006E6F69, v164, v102);
      v165 = *v102;
      v166 = v267;
      if (*(_QWORD *)(*v102 + 16))
      {
        v167 = sub_1B1DC3B00(0x726F6C6F63, 0xE500000000000000);
        if ((v168 & 1) != 0)
        {
          v169 = (_QWORD *)(*(_QWORD *)(v165 + 56) + 32 * v167);
          v170 = v169[1];
          v171 = v169[2];
          v172 = v169[3];
          v173 = (void *)swift_unknownObjectRetain();
          v174 = (float32x4_t *)sub_1B20833D8(v173, v170, v171, v172);
          LOBYTE(v172) = v175;
          swift_unknownObjectRelease();
          if ((v172 & 1) == 0)
          {
            if (v166)
            {
              v277 = (float32x4_t)vdupq_n_s32(0x3D6147AEu);
              v278 = (float32x4_t)vdupq_n_s32(0x3E906EBBu);
              v276 = (float32x4_t)vdupq_n_s32(0x3F870A3Du);
              v275 = (float32x4_t)vdupq_n_s32(0x414EB852u);
              v274 = (simd_float4)xmmword_1B2268F30;
              v273 = (float32x4_t)vdupq_n_s32(0x3D25AEE6u);
              v176 = v166;
              do
              {
                v282 = *v174;
                v177.i64[0] = 0x3F0000003F000000;
                v177.i64[1] = 0x3F0000003F000000;
                v178 = vaddq_f32(vmulq_f32(v282, v278), v177);
                v178.i32[3] = 0;
                v177.i8[3] = 0;
                v177.i8[7] = 0;
                v177.i8[11] = 0;
                v177.i8[15] = 0;
                v279 = vmaxnmq_f32(v178, v177);
                v179 = (simd_float4)vdivq_f32(vaddq_f32(v279, v277), v276);
                v179.i32[3] = 0;
                v180 = _simd_pow_f4(v179, v274);
                v181 = vcgeq_f32(v273, v279);
                v181.i32[3] = 0;
                v279 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v181), (int8x16_t)vdivq_f32(v279, v275), (int8x16_t)v180);
                v182 = expf(-v282.f32[3]);
                v183 = v279;
                v183.f32[3] = 1.0 / (float)(v182 + 1.0);
                *v174++ = v183;
                --v176;
              }
              while (v176);
            }
          }
        }
      }
      v184 = *v102;
      if (*(_QWORD *)(*v102 + 16))
      {
        v185 = sub_1B1DC3B00(1702521203, 0xE400000000000000);
        if ((v186 & 1) != 0)
        {
          v187 = (_QWORD *)(*(_QWORD *)(v184 + 56) + 32 * v185);
          v188 = v187[1];
          v189 = v187[2];
          v190 = v187[3];
          v191 = (void *)swift_unknownObjectRetain();
          v192 = sub_1B2083334(v191, v188, v189, v190);
          LOBYTE(v190) = v193;
          swift_unknownObjectRelease();
          if ((v190 & 1) == 0)
          {
            if (v166)
            {
              if (v166 < 0x16)
              {
                v197 = 0;
LABEL_188:
                v227 = (float *)&v192[12 * v197 + 8];
                v228 = v166 - v197;
                do
                {
                  *(v227 - 2) = expf(*(v227 - 2));
                  *(v227 - 1) = expf(*(v227 - 1));
                  *v227 = expf(*v227);
                  v227 += 3;
                  --v228;
                }
                while (v228);
                goto LABEL_190;
              }
              v197 = 0;
              v213 = !is_mul_ok(v166 - 1, 0xCuLL);
              v214 = 12 * (v166 - 1);
              if (&v192[v214 + 8] < v192 + 8)
                goto LABEL_188;
              if (v213)
                goto LABEL_188;
              if (&v192[v214 + 4] < v192 + 4)
                goto LABEL_188;
              if (v213)
                goto LABEL_188;
              if (&v192[v214] < v192)
                goto LABEL_188;
              if (v213)
                goto LABEL_188;
              v197 = v166 & 0xFFFFFFFFFFFFFFFELL;
              v215 = v166 & 0xFFFFFFFFFFFFFFFELL;
              v216 = (float *)v192;
              do
              {
                *(float32x2x3_t *)v194.f32 = vld3_f32(v216);
                v282 = v194;
                v283 = v195;
                v284 = v196;
                *(float *)&v217 = expf(v194.f32[1]);
                v279.i64[0] = v217;
                v218.f32[0] = expf(v282.f32[0]);
                v218.i32[1] = v279.i32[0];
                v279 = v218;
                v280 = v219;
                v281 = v220;
                *(float *)&v221 = expf(v283.f32[1]);
                v278.i64[0] = v221;
                v222 = expf(v283.f32[0]);
                *((_QWORD *)&v223 + 1) = *((_QWORD *)&v280 + 1);
                *(_QWORD *)&v223 = __PAIR64__(v278.u32[0], LODWORD(v222));
                v280 = v223;
                *(float *)&v224 = expf(*((float *)&v284 + 1));
                v278.i64[0] = v224;
                v194.f32[0] = expf(*(float *)&v284);
                v195 = v279;
                v196 = v280;
                v225 = v194.i32[0];
                v194.i64[1] = v278.i64[1];
                v226 = v278.i32[0];
                vst3_f32(v216, *(float32x2x3_t *)v195.f32);
                v216 += 6;
                v215 -= 2;
              }
              while (v215);
              if (v166 != v197)
                goto LABEL_188;
            }
          }
        }
      }
LABEL_190:
      v229 = *v102;
      if (*(_QWORD *)(*v102 + 16))
      {
        v230 = sub_1B1DC3B00(0x7461746E6569726FLL, 0xEB000000006E6F69);
        if ((v231 & 1) != 0)
        {
          v232 = (_QWORD *)(*(_QWORD *)(v229 + 56) + 32 * v230);
          v233 = v232[1];
          v234 = v232[2];
          v235 = v232[3];
          v236 = (void *)swift_unknownObjectRetain();
          v237 = (float32x4_t *)sub_1B20833D8(v236, v233, v234, v235);
          LOBYTE(v235) = v238;
          swift_unknownObjectRelease();
          if ((v235 & 1) == 0)
          {
            if (v166)
            {
              __asm { FMOV            V0.4S, #1.0 }
              do
              {
                v243 = (int8x16_t)vmulq_f32(*v237, *v237);
                *(float32x2_t *)v243.i8 = vadd_f32(*(float32x2_t *)v243.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v243, v243, 8uLL));
                v244 = (float32x4_t)vdupq_lane_s32((int32x2_t)vadd_f32(*(float32x2_t *)v243.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v243.i8, 1)), 0);
                v245 = vrsqrteq_f32(v244);
                v246 = vmulq_f32(v245, vrsqrtsq_f32(v244, vmulq_f32(v245, v245)));
                *v237 = vmulq_f32(*v237, (float32x4_t)vbslq_s8((int8x16_t)vceqzq_f32(v244), _Q0, (int8x16_t)vmulq_f32(v246, vrsqrtsq_f32(v244, vmulq_f32(v246, v246)))));
                ++v237;
                --v166;
              }
              while (v166);
            }
          }
        }
      }
      return swift_bridgeObjectRelease();
    }
    v282.i64[0] = 0;
    v201 = v104[2];
    v278.i64[0] = OBJC_IVAR____TtC3VFX13EntityManager_logger;
    v272 = v104 + 9;
    v277.i64[0] = 0xD000000000000011;
    v276.i64[0] = 0x80000001B23464F0;
    v275.i64[0] = v201;
    while (!v201)
    {
LABEL_169:
      if (++v282.i64[0] == v103)
        goto LABEL_131;
    }
    swift_bridgeObjectRetain();
    v202 = v272;
    v203 = v201;
    while (1)
    {
      v206 = *v202;
      v205 = v202[1];
      v207 = v202[4];
      swift_bridgeObjectRetain();
      swift_unknownObjectRetain();
      if (v206 == 28)
      {
        v204 = *(_DWORD *)(v279.i64[0] + v21);
        v21 += 4;
        *(_QWORD *)(v200 + 16) = v21;
        *(_DWORD *)(v205 + 4 * v282.i64[0]) = v204;
      }
      else
      {
        if (v206 != 45)
        {
          v209 = *(_QWORD *)(v273.i64[0] + v278.i64[0]);
          v285 = 0;
          v286 = 0xE000000000000000;
          swift_retain();
          sub_1B2229430();
          sub_1B2228890();
          v289 = v206;
          type metadata accessor for MTLVertexFormat(0);
          sub_1B22295EC();
          sub_1B2228890();
          sub_1B2228890();
          v210 = v285;
          v211 = v286;
          v212 = sub_1B2228E90();
          v285 = 0;
          (*(void (**)(uint64_t, unint64_t *, unint64_t, unint64_t))(*(_QWORD *)v209
                                                                                                  + 88))(v212, &v285, v210, v211);
          swift_unknownObjectRelease();
          swift_bridgeObjectRelease();
          v200 = v274.i64[0];
          swift_release();
          goto LABEL_174;
        }
        v208 = *(_BYTE *)(v279.i64[0] + v21++);
        *(_QWORD *)(v200 + 16) = v21;
        *(_BYTE *)(v207 + v282.i64[0]) = v208;
      }
      swift_unknownObjectRelease();
LABEL_174:
      swift_bridgeObjectRelease();
      v202 += 12;
      if (!--v203)
      {
        v104 = v268;
        swift_bridgeObjectRelease();
        v102 = v269;
        v103 = v267;
        v201 = v275.i64[0];
        goto LABEL_169;
      }
    }
  }
  v102 = v269;
  v103 = v267;
  v104 = v268;
  v105 = v274.i64[0];
  if (!v267)
    goto LABEL_131;
  v282.i64[0] = 0;
  v271 = OBJC_IVAR____TtC3VFX13EntityManager_logger;
  v264 = v268 + 9;
  v270 = 0x80000001B23464F0;
  while (1)
  {
    v106 = *(_QWORD *)(v105 + 16);
    v107 = *(_QWORD *)v105;
    if (*(_QWORD *)v105)
    {
      v108 = *(_QWORD *)(v105 + 8) - v107;
      if (v106 >= v108)
        goto LABEL_130;
    }
    else
    {
      if ((v106 & 0x8000000000000000) == 0)
        goto LABEL_130;
      v108 = 0;
    }
    v109 = *(unsigned __int8 *)(v105 + 24);
    v110 = *(_QWORD *)(v105 + 16);
    if (*(unsigned __int8 *)(v107 + v106) != v109)
    {
      v110 = *(_QWORD *)(v105 + 16);
      while (v108 - 1 != v110)
      {
        v111 = *(unsigned __int8 *)(v107 + 1 + v110++);
        if (v111 == v109)
          goto LABEL_113;
      }
      v110 = v108;
    }
LABEL_113:
    v285 = *(_QWORD *)(v105 + 16);
    v286 = v110;
    v287 = v107;
    v288 = v108;
    sub_1B2228794();
    sub_1B1D3568C();
    sub_1B19E52CC(&qword_1EEF5DC70, (uint64_t (*)(uint64_t))sub_1B1D3568C, MEMORY[0x1E0DEDE38]);
    sub_1B2228770();
    if (!v112)
    {
LABEL_130:
      v138 = *(_QWORD *)(v273.i64[0] + v271);
      v285 = 0;
      v286 = 0xE000000000000000;
      swift_retain();
      sub_1B2229430();
      swift_bridgeObjectRelease();
      v285 = 0xD000000000000027;
      v286 = 0x80000001B2346510;
      v289 = v282.i64[0];
      sub_1B2229A0C();
      sub_1B2228890();
      swift_bridgeObjectRelease();
      sub_1B2228890();
      v289 = v103;
      sub_1B2229A0C();
      sub_1B2228890();
      swift_bridgeObjectRelease();
      v139 = v285;
      v140 = v286;
      v141 = sub_1B2228E90();
      v285 = 0;
      (*(void (**)(uint64_t, unint64_t *, unint64_t, unint64_t))(*(_QWORD *)v138 + 88))(v141, &v285, v139, v140);
      v102 = v269;
      swift_release();
      swift_bridgeObjectRelease();
      v104 = v268;
      goto LABEL_131;
    }
    *(_QWORD *)(v105 + 16) = v106 + sub_1B2228830() + 1;
    v113 = objc_allocWithZone(MEMORY[0x1E0CB3900]);
    v114 = (void *)sub_1B2228728();
    swift_bridgeObjectRelease();
    v115 = objc_msgSend(v113, sel_initWithString_, v114);

    v104 = v268;
    v116 = v268[2];
    if (!v116)
    {

      v103 = v267;
      goto LABEL_101;
    }
    v279.i64[0] = (uint64_t)v115;
    swift_bridgeObjectRetain();
    v117 = v264;
LABEL_120:
    v123 = (uint64_t *)*(v117 - 4);
    v124 = *v117;
    v125 = v117[1];
    v126 = v117[4];
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    if (v124 != 28)
      break;
    v118 = v277.i64[0];
    v119 = v276.i64[0];
    v120 = v278.i64[0];
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v277.i64[0] + 104))(v276.i64[0], v275.u32[0], v278.i64[0]);
    v121 = sub_1B2229088();
    (*(void (**)(uint64_t, uint64_t))(v118 + 8))(v119, v120);
    v122 = *(float *)&v121;
    if ((v121 & 0x100000000) != 0)
      v122 = 0.0;
    *(float *)(v125 + 4 * v282.i64[0]) = v122;
    swift_unknownObjectRelease();
LABEL_119:
    swift_bridgeObjectRelease();
    v117 += 12;
    if (--v116)
      goto LABEL_120;

    v104 = v268;
    swift_bridgeObjectRelease();
    v102 = v269;
    v103 = v267;
    v105 = v274.i64[0];
LABEL_101:
    if (++v282.i64[0] == v103)
      goto LABEL_131;
  }
  if (v124 != 45)
  {
    v134 = *(_QWORD *)(v273.i64[0] + v271);
    v285 = 0;
    v286 = 0xE000000000000000;
    swift_retain();
    sub_1B2229430();
    sub_1B2228890();
    v289 = v124;
    type metadata accessor for MTLVertexFormat(0);
    sub_1B22295EC();
    sub_1B2228890();
    sub_1B2228890();
    v135 = v285;
    v136 = v286;
    v137 = sub_1B2228E90();
    v285 = 0;
    (*(void (**)(uint64_t, unint64_t *, unint64_t, unint64_t))(*(_QWORD *)v134 + 88))(v137, &v285, v135, v136);
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    goto LABEL_119;
  }
  v272 = v123;
  v127 = v277.i64[0];
  v128 = v276.i64[0];
  v129 = v278.i64[0];
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v277.i64[0] + 104))(v276.i64[0], v275.u32[0], v278.i64[0]);
  v130 = sub_1B222907C();
  v132 = v131;
  (*(void (**)(uint64_t, uint64_t))(v127 + 8))(v128, v129);
  if ((v132 & 1) != 0)
    v133 = 0;
  else
    v133 = v130;
  if ((v133 & 0x8000000000000000) == 0 && v133 < 0x100)
  {
    *(_BYTE *)(v126 + v282.i64[0]) = v133;
    swift_unknownObjectRelease();
    goto LABEL_119;
  }
  sub_1B222967C();
  __break(1u);
LABEL_202:
  result = sub_1B2229FC4();
  __break(1u);
  return result;
}

uint64_t sub_1B1FA79EC(uint64_t a1)
{
  uint64_t v1;

  return sub_1B1FA5750(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(unint64_t **)(v1 + 48));
}

uint64_t sub_1B1FA7A0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD *))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  _QWORD v11[3];
  char v12;

  v6 = sub_1B2227E4C();
  if (v6)
    v6 += a1 - sub_1B2227E70();
  sub_1B2227E64();
  v11[0] = sub_1B1D355F8(v6);
  v11[1] = v7;
  v11[2] = v8;
  v12 = v9;
  return a4(v11);
}

unint64_t sub_1B1FA7AB4()
{
  unint64_t result;

  result = qword_1EEF61A20;
  if (!qword_1EEF61A20)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B86E4, &type metadata for PCacheError);
    atomic_store(result, (unint64_t *)&qword_1EEF61A20);
  }
  return result;
}

float sub_1B1FA7AF8(unsigned int a1)
{
  return (float)a1 * 0.0039216;
}

uint64_t sub_1B1FA7B80()
{
  swift_weakDestroy();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for DisplayLinkTarget()
{
  return objc_opt_self();
}

void sub_1B1FA7BC4()
{
  uint64_t v0;
  _DWORD *v1;
  uint64_t v2;

  type metadata accessor for DisplayClock();
  v0 = swift_allocObject();
  v1 = (_DWORD *)swift_slowAlloc();
  *v1 = 0;
  *(_QWORD *)(v0 + 16) = "DisplayClock.tickHandlers";
  *(_QWORD *)(v0 + 24) = 25;
  *(_BYTE *)(v0 + 32) = 2;
  v2 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v0 + 40) = v1;
  *(_QWORD *)(v0 + 48) = v2;
  *(_QWORD *)(v0 + 56) = v2;
  *(_QWORD *)(v0 + 64) = 0;
  *(_WORD *)(v0 + 72) = 256;
  sub_1B1FA80D4();
  qword_1EEFD57D0 = v0;
}

void sub_1B1FA7C3C()
{
  uint64_t v0;
  _DWORD *v1;
  uint64_t v2;

  type metadata accessor for DisplayClock();
  v0 = swift_allocObject();
  v1 = (_DWORD *)swift_slowAlloc();
  *v1 = 0;
  *(_QWORD *)(v0 + 16) = "DisplayClock.tickHandlers";
  *(_QWORD *)(v0 + 24) = 25;
  *(_BYTE *)(v0 + 32) = 2;
  v2 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v0 + 40) = v1;
  *(_QWORD *)(v0 + 48) = v2;
  *(_QWORD *)(v0 + 56) = v2;
  *(_QWORD *)(v0 + 64) = 0;
  *(_WORD *)(v0 + 72) = 257;
  sub_1B1FA80D4();
  qword_1ED4D0A18 = v0;
}

uint64_t sub_1B1FA7CB4()
{
  uint64_t result;

  type metadata accessor for RunloopThread();
  swift_allocObject();
  result = sub_1B1EB71C4(0x707369642E786676, 0xEF6B6E696C79616CLL, 33);
  qword_1ED4D0910 = result;
  return result;
}

uint64_t sub_1B1FA7D14()
{
  uint64_t v0;
  id v1;
  void *v2;

  v1 = objc_msgSend((id)objc_opt_self(), sel_defaultCenter);
  objc_msgSend(v1, sel_removeObserver_, v0);

  objc_msgSend(*(id *)(v0 + 64), sel_invalidate);
  v2 = *(void **)(v0 + 64);
  *(_QWORD *)(v0 + 64) = 0;

  MEMORY[0x1B5E23F88](*(_QWORD *)(v0 + 40), -1, -1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return v0;
}

uint64_t sub_1B1FA7DAC()
{
  sub_1B1FA7D14();
  return swift_deallocClassInstance();
}

void sub_1B1FA7DCC(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v5;

  os_unfair_lock_lock(*(os_unfair_lock_t *)(v1 + 40));
  if ((a1 & 0x8000000000000000) == 0)
  {
    v3 = *(_QWORD **)(v1 + 48);
    if (v3[2] > a1)
    {
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)(v1 + 48) = v3;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        v3 = sub_1B1FFEF88(v3);
        *(_QWORD *)(v1 + 48) = v3;
      }
      v5 = &v3[2 * a1];
      sub_1B19E5A18(v5[4]);
      v5[4] = 0;
      v5[5] = 0;
    }
  }
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v1 + 40));
}

void sub_1B1FA7E44(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t);
  uint64_t v6;

  os_unfair_lock_lock(*(os_unfair_lock_t *)(a1 + 40));
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a1 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(a1 + 40));
  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(v2 + 16);
  if (v3)
  {
    swift_bridgeObjectRetain();
    v4 = v2 + 40;
    do
    {
      v5 = *(void (**)(uint64_t))(v4 - 8);
      if (v5)
      {
        v6 = swift_retain();
        v5(v6);
        sub_1B19E5A18((uint64_t)v5);
      }
      v4 += 16;
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease();
  }
}

uint64_t type metadata accessor for DisplayClock()
{
  return objc_opt_self();
}

void sub_1B1FA80D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  id v4;
  void *v5;
  void *v6;
  id v7;
  uint64_t v8;
  id v9;
  void *v10;
  id v11;
  id v12;

  v1 = v0;
  type metadata accessor for DisplayLinkTarget();
  v2 = swift_allocObject();
  swift_weakInit();
  swift_weakAssign();
  v3 = objc_msgSend((id)objc_opt_self(), sel_mainScreen);
  v4 = objc_msgSend(v3, sel_displayLinkWithTarget_selector_, v2, sel_drawAndReturnError_);

  v5 = *(void **)(v1 + 64);
  *(_QWORD *)(v1 + 64) = v4;

  v6 = *(void **)(v1 + 64);
  if (v6)
  {
    v7 = v6;
    objc_msgSend(v7, sel_setPaused_, objc_msgSend(v7, sel_isPaused));
    if (qword_1ED4B7638 != -1)
      swift_once();
    v8 = swift_allocObject();
    *(_QWORD *)(v8 + 16) = v7;
    v9 = v7;
    sub_1B1EB7404((uint64_t)sub_1B1FA83A8, v8);
    swift_release();
    v10 = (void *)objc_opt_self();
    v11 = objc_msgSend(v10, sel_defaultCenter);
    objc_msgSend(v11, sel_addObserver_selector_name_object_, v1, sel__applicationDidEnterBackground_, *MEMORY[0x1E0DC4768], 0);

    v12 = objc_msgSend(v10, sel_defaultCenter);
    objc_msgSend(v12, sel_addObserver_selector_name_object_, v1, sel__applicationWillEnterForeground_, *MEMORY[0x1E0DC4860], 0);
    swift_release();

  }
  else
  {
    sub_1B2229688();
    __break(1u);
  }
}

void sub_1B1FA8318(void *a1)
{
  id v2;

  v2 = objc_msgSend((id)objc_opt_self(), sel_currentRunLoop);
  objc_msgSend(a1, sel_addToRunLoop_forMode_, v2, *MEMORY[0x1E0C99860]);

}

uint64_t sub_1B1FA8384()
{
  uint64_t v0;

  return swift_deallocObject();
}

void sub_1B1FA83A8()
{
  uint64_t v0;

  sub_1B1FA8318(*(void **)(v0 + 16));
}

uint64_t sub_1B1FA83B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  id v36;
  uint64_t v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  __int128 v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;

  sub_1B1B1F358();
  v60 = v1;
  MEMORY[0x1E0C80A78](v1, v2);
  v59 = (char *)&v43 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_1B222820C();
  v57 = *(_QWORD *)(v4 - 8);
  v58 = v4;
  MEMORY[0x1E0C80A78](v4, v5);
  v56 = (char *)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63 = type metadata accessor for TextureCache.TextureKey();
  v52 = *(_QWORD *)(v63 - 8);
  MEMORY[0x1E0C80A78](v63, v7);
  v9 = (char *)&v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1B1FAF2BC(0, (unint64_t *)&unk_1EEF61A38, (unint64_t *)&unk_1EEF61A28);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)&v43 - v16;
  v47 = v0;
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v0 + 48));
  if (qword_1ED4BF430 != -1)
    swift_once();
  swift_retain();
  v18 = sub_1B2228EA8();
  if (qword_1ED4BF658 != -1)
    swift_once();
  v67 = 0;
  swift_retain();
  sub_1B1F1AD70(v18, &v67, 0xD000000000000015, 0x80000001B2346A00);
  swift_release();
  swift_release();
  v19 = *(_QWORD *)(v47 + 72);
  v20 = *(_QWORD *)(v19 + 64);
  v48 = (_QWORD *)(v19 + 64);
  v21 = 1 << *(_BYTE *)(v19 + 32);
  v22 = -1;
  if (v21 < 64)
    v22 = ~(-1 << v21);
  v23 = v22 & v20;
  v24 = (unint64_t)(v21 + 63) >> 6;
  v51 = &v66;
  v44 = v24 - 1;
  v25 = swift_bridgeObjectRetain();
  v49 = 0;
  v50 = v24;
  v26 = 0;
  v53 = v25;
  v45 = v25 + 104;
  v46 = v24 - 5;
  v61 = xmmword_1B226D240;
  v54 = v17;
  v55 = v13;
  v62 = v9;
  if (v23)
  {
    v64 = (v23 - 1) & v23;
    v65 = 0;
    v27 = __clz(__rbit64(v23));
LABEL_9:
    v28 = v53;
    sub_1B1792810(*(_QWORD *)(v53 + 48) + *(_QWORD *)(v52 + 72) * v27, (uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for TextureCache.TextureKey);
    v29 = *(_QWORD *)(v28 + 56) + 160 * v27;
    sub_1B1FAEDA0(0, (unint64_t *)&unk_1EEF61A28);
    v31 = v30;
    sub_1B1C1AA1C(v29, (uint64_t)&v13[*(int *)(v30 + 48)]);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(v13, 0, 1, v31);
    goto LABEL_15;
  }
  v32 = 1;
  if (v50 <= 1)
  {
    v32 = 0;
  }
  else
  {
    v33 = v48[1];
    if (v33)
    {
LABEL_12:
      v64 = (v33 - 1) & v33;
      v65 = v32;
      v27 = __clz(__rbit64(v33)) + (v32 << 6);
      goto LABEL_9;
    }
    if (v50 > 2)
    {
      v33 = v48[2];
      if (v33)
      {
        v32 = 2;
        goto LABEL_12;
      }
      v32 = 2;
      if (v50 > 3)
      {
        v33 = v48[3];
        if (v33)
        {
          v32 = 3;
          goto LABEL_12;
        }
        v32 = 3;
        if (v50 > 4)
        {
          v33 = v48[4];
          v32 = 4;
          if (v33)
            goto LABEL_12;
          while (v46 != v26)
          {
            v33 = *(_QWORD *)(v45 + 8 * v26++);
            if (v33)
            {
              v32 = v26 + 4;
              goto LABEL_12;
            }
          }
          v32 = v44;
        }
      }
    }
  }
  sub_1B1FAEDA0(0, (unint64_t *)&unk_1EEF61A28);
  v31 = v34;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v13, 1, 1, v34);
  v64 = 0;
  v65 = v32;
LABEL_15:
  sub_1B1FAF310((uint64_t)v13, (uint64_t)v17, (unint64_t *)&unk_1EEF61A38, (unint64_t *)&unk_1EEF61A28);
  sub_1B1FAEDA0(0, (unint64_t *)&unk_1EEF61A28);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 48))(v17, 1, v31) != 1)
  {
    v35 = (uint64_t *)&v17[*(int *)(v31 + 48)];
    sub_1B1A025EC((uint64_t)v17, (uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for TextureCache.TextureKey);
    sub_1B1FAE9A8(v35, (uint64_t)&v67);
    sub_1B1FAE9DC((uint64_t)v35);
    __asm { BR              X9 }
  }
  swift_release();
  v67 = 0;
  v68 = 0xE000000000000000;
  swift_retain();
  sub_1B2229430();
  swift_bridgeObjectRelease();
  v67 = 0xD000000000000014;
  v68 = 0x80000001B2346A20;
  v36 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB34E8]), sel_init);
  objc_msgSend(v36, sel_setCountStyle_, 3);
  v37 = v49;
  v38 = objc_msgSend(v36, sel_stringFromByteCount_, v49);
  sub_1B222874C();

  sub_1B2228890();
  swift_bridgeObjectRelease();
  v39 = v67;
  v40 = v68;
  v41 = sub_1B2228EA8();
  v67 = 0;
  swift_retain();
  sub_1B1F1AD70(v41, &v67, v39, v40);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v47 + 48));
  return v37;
}

uint64_t sub_1B1FA9470(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;
  uint64_t (*v12)(_QWORD);
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v14;
  unint64_t v15;
  char v16;
  char v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  _QWORD *v21;
  uint64_t result;
  uint64_t v23;
  _QWORD *v24;

  v2 = v1;
  v4 = type metadata accessor for TextureCache.TextureKey();
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (unsigned __int8 *)&v23 - v10;
  sub_1B1792810(a1, (uint64_t)&v23 - v10, v12);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v24 = (_QWORD *)*v2;
  v14 = v24;
  *v2 = 0x8000000000000000;
  v15 = sub_1B1DC457C(v11);
  v17 = v16;
  v18 = v14[2] + ((v16 & 1) == 0);
  if (v14[3] >= v18)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_1B1EB1FF4();
      v14 = v24;
    }
  }
  else
  {
    sub_1B1EA23B0(v18, isUniquelyReferenced_nonNull_native);
    v14 = v24;
    v19 = sub_1B1DC457C(v11);
    if ((v17 & 1) != (v20 & 1))
    {
      result = sub_1B2229FC4();
      __break(1u);
      return result;
    }
    v15 = v19;
  }
  *v2 = v14;
  swift_bridgeObjectRelease();
  v21 = (_QWORD *)*v2;
  if ((v17 & 1) == 0)
  {
    sub_1B1792810((uint64_t)v11, (uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for TextureCache.TextureKey);
    sub_1B1EB44F0(v15, (uint64_t)v7, 0, v21);
  }
  ++*(_QWORD *)(v21[7] + 8 * v15);
  return sub_1B1A04628((uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for TextureCache.TextureKey);
}

_QWORD *sub_1B1FA960C@<X0>(_QWORD *result@<X0>, char *a2@<X8>)
{
  char v2;
  char v3;

  if (*result == 1)
    v2 = 1;
  else
    v2 = 2;
  if (*result)
    v3 = v2;
  else
    v3 = 0;
  *a2 = v3;
  return result;
}

void sub_1B1FA962C()
{
  uint64_t *v0;
  _BYTE v1[160];

  sub_1B1FAE9A8(v0, (uint64_t)v1);
  __asm { BR              X11 }
}

uint64_t sub_1B1FA9670()
{
  char v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(v2 - 192);
  v4 = *(_QWORD *)(v2 - 184) + (v0 & 1);
  sub_1B1FAAB78(v1);
  *(_QWORD *)v1 = v3;
  *(_QWORD *)(v1 + 8) = v4;
  *(_BYTE *)(v1 + 152) = 0;
  return 1;
}

uint64_t sub_1B1FA98A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;
  _QWORD v4[3];
  _BYTE v5[120];
  uint64_t v6;
  uint64_t v7;

  sub_1B1E10010(v0, (uint64_t)v5, &qword_1ED4B84D0, (uint64_t)&type metadata for TextureCache.WeakStorage.CPU);
  if (v6)
  {
    v1 = MEMORY[0x1B5E240CC](v5);
    sub_1B1FAED40((uint64_t)v5);
    if (v1)
    {
      swift_unknownObjectRelease();
      sub_1B1FAED6C(v0, (uint64_t)v5);
      sub_1B1FAEC00((uint64_t)v5);
      return 0;
    }
  }
  else
  {
    sub_1B1B1F3E4((uint64_t)v5, &qword_1ED4B84D0, (uint64_t)&type metadata for TextureCache.WeakStorage.CPU);
  }
  sub_1B1FAED6C(v0, (uint64_t)v5);
  sub_1B1E10010((uint64_t)&v7, (uint64_t)v4, &qword_1ED4B7758, (uint64_t)&type metadata for TextureCache.WeakStorage.GPU);
  if (v4[1] == 1)
  {
    sub_1B1FAEC00((uint64_t)v5);
    sub_1B1B1F3E4((uint64_t)v4, &qword_1ED4B7758, (uint64_t)&type metadata for TextureCache.WeakStorage.GPU);
  }
  else
  {
    v3 = MEMORY[0x1B5E240CC](v4);
    sub_1B1FAEC00((uint64_t)v5);
    sub_1B1FAEC68((uint64_t)v4);
    if (v3)
    {
      swift_unknownObjectRelease();
      return 0;
    }
  }
  return 1;
}

void sub_1B1FA99D0(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  _OWORD v40[8];
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  char v44;
  _QWORD v45[16];
  uint64_t v46;
  _QWORD v47[19];
  char v48;
  _QWORD v49[16];

  sub_1B1FAE9A8(v1, (uint64_t)v47);
  if (v48 == 2)
  {
    v3 = (void *)v47[0];
    if (qword_1ED4BF430 != -1)
      swift_once();
    v42 = 0xE000000000000000;
    swift_retain();
    sub_1B2229430();
    sub_1B2228890();
    v45[0] = v3;
    sub_1B1A025A0(0, (unint64_t *)&qword_1ED4BB030);
    sub_1B22295EC();
    v4 = sub_1B2228E90();
    v41 = 1;
    sub_1B1F1AAF0(v4, 0, 0xE000000000000000, &v41);
    swift_release();
    swift_bridgeObjectRelease();

    v5 = 0;
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v15 = 0;
    v16 = 0;
    v17 = 0;
    v18 = 0;
    v19 = 0x1FFFFFFFELL;
LABEL_17:
    *a1 = v5;
    a1[1] = v6;
    a1[2] = v7;
    a1[3] = v19;
    a1[4] = v8;
    a1[5] = v9;
    a1[6] = v10;
    a1[7] = v11;
    a1[8] = v12;
    a1[9] = v13;
    a1[10] = v14;
    a1[11] = v15;
    a1[12] = v16;
    a1[13] = v17;
    a1[14] = v18;
    return;
  }
  if (v48 == 1)
  {
    sub_1B1FAEBCC((uint64_t)v47, (uint64_t)v45);
    sub_1B1FA9DEC((uint64_t)v49);
    v26 = v49[1];
    v27 = v49[0];
    v19 = v49[3];
    v24 = v49[4];
    v25 = v49[2];
    v22 = v49[6];
    v23 = v49[5];
    v13 = v49[9];
    v20 = v49[8];
    v21 = v49[7];
    v14 = v49[10];
    v15 = v49[11];
    v16 = v49[12];
    v17 = v49[13];
    v18 = v49[14];
    sub_1B1E10010((uint64_t)v45, (uint64_t)&v41, &qword_1ED4B84D0, (uint64_t)&type metadata for TextureCache.WeakStorage.CPU);
    if (v43)
    {
      sub_1B1FAEC94((uint64_t)&v41, (uint64_t)&v28);
      *(_QWORD *)&v29 = v29 - 1;
      if (!(_QWORD)v29)
      {
        swift_unknownObjectRelease();
        *((_QWORD *)&v28 + 1) = 0;
      }
      sub_1B1FAECC8((uint64_t)&v28, (uint64_t)v40);
      sub_1B1FAED40((uint64_t)&v41);
    }
    else
    {
      sub_1B1B1F3E4((uint64_t)&v41, &qword_1ED4B84D0, (uint64_t)&type metadata for TextureCache.WeakStorage.CPU);
      memset(v40, 0, sizeof(v40));
    }
    sub_1B1E10010((uint64_t)&v46, (uint64_t)&v41, &qword_1ED4B7758, (uint64_t)&type metadata for TextureCache.WeakStorage.GPU);
    if (v42 == 1)
    {
      sub_1B1B1F3E4((uint64_t)&v41, &qword_1ED4B7758, (uint64_t)&type metadata for TextureCache.WeakStorage.GPU);
      v38 = xmmword_1B2244C80;
      v39 = 0;
    }
    else
    {
      sub_1B1FAEC2C((uint64_t)&v41, (uint64_t)&v28);
      *(_QWORD *)&v29 = v29 - 1;
      if (!(_QWORD)v29)
      {
        swift_unknownObjectRelease();
        *((_QWORD *)&v28 + 1) = 0;
      }
      sub_1B1FAEAD4((uint64_t)&v28, (uint64_t)&v38);
      sub_1B1FAEC68((uint64_t)&v41);
    }
    v36 = 0;
    v34 = 0u;
    v35 = 0u;
    v32 = 0u;
    v33 = 0u;
    v30 = 0u;
    v31 = 0u;
    v28 = 0u;
    v29 = 0u;
    v37 = xmmword_1B2246910;
    sub_1B1FAEB0C((uint64_t)v40, (uint64_t)&v28, &qword_1ED4B84D0, (uint64_t)&type metadata for TextureCache.WeakStorage.CPU);
    sub_1B1FAEB0C((uint64_t)&v38, (uint64_t)&v36, &qword_1ED4B7758, (uint64_t)&type metadata for TextureCache.WeakStorage.GPU);
    sub_1B1FAEBCC((uint64_t)&v28, (uint64_t)&v41);
    sub_1B1FAEC00((uint64_t)v45);
    v44 = 1;
    sub_1B1FAEA70((uint64_t)&v41, (uint64_t)v1);
    v6 = v26;
    v5 = v27;
    v8 = v24;
    v7 = v25;
    v10 = v22;
    v9 = v23;
    v12 = v20;
    v11 = v21;
    goto LABEL_17;
  }
  sub_1B2229688();
  __break(1u);
}

uint64_t sub_1B1FA9DEC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD v17[3];
  _BYTE v18[120];
  __int128 v19;
  uint64_t v20;
  unsigned __int8 v21;
  uint64_t v22;
  unsigned __int16 v23;
  char v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;

  sub_1B1FAA598((uint64_t)v18);
  result = sub_1B1A18378((uint64_t)v18, (uint64_t)&v19, (unint64_t *)&unk_1ED4B9160, (uint64_t)&type metadata for TextureCPURuntime);
  v4 = v30;
  if (v30)
  {
    v5 = v19;
    v6 = v20;
    v7 = v21;
    v8 = v22;
    v9 = v25;
    v10 = v26;
    v11 = v27;
    v12 = v28;
    v13 = 0x10000;
    if (!v24)
      v13 = 0;
    v14 = v23 | (unint64_t)v13;
    v15 = v29 | 0x8000000000000000;
  }
  else
  {
    sub_1B1E10010(v1 + 128, (uint64_t)v17, &qword_1ED4B7758, (uint64_t)&type metadata for TextureCache.WeakStorage.GPU);
    if (v17[1] == 1)
    {
      result = sub_1B1B1F3E4((uint64_t)v17, &qword_1ED4B7758, (uint64_t)&type metadata for TextureCache.WeakStorage.GPU);
      v6 = 0;
      v8 = 0;
      v14 = 0;
      v12 = 0;
      v15 = 0;
      v5 = 0uLL;
      v9 = 0uLL;
      v7 = 0x1FFFFFFFELL;
    }
    else
    {
      v16 = MEMORY[0x1B5E240CC](v17);
      result = sub_1B1FAEC68((uint64_t)v17);
      v6 = 0;
      v8 = 0;
      v14 = 0;
      v12 = 0;
      v15 = 0;
      v7 = 0x1FFFFFFFELL;
      if (v16)
        v7 = 0;
      v9 = 0uLL;
      v5 = (unint64_t)v16;
    }
    v10 = 0uLL;
    v11 = 0uLL;
  }
  *(_OWORD *)a1 = v5;
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 32) = v8;
  *(_QWORD *)(a1 + 40) = v14;
  *(_OWORD *)(a1 + 48) = v9;
  *(_OWORD *)(a1 + 64) = v10;
  *(_OWORD *)(a1 + 80) = v11;
  *(_QWORD *)(a1 + 96) = v12;
  *(_QWORD *)(a1 + 104) = v15;
  *(_QWORD *)(a1 + 112) = v4;
  return result;
}

void sub_1B1FA9F4C(uint64_t a1)
{
  uint64_t *v1;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  _OWORD v15[8];
  _BYTE v16[8];
  uint64_t v17;
  uint64_t v18;
  char v19;
  _BYTE v20[128];
  uint64_t v21;
  id v22[19];
  char v23;

  sub_1B1FAE9A8(v1, (uint64_t)v22);
  if (v23 == 2)
  {

  }
  else if (v23 == 1)
  {
    sub_1B1FAEBCC((uint64_t)v22, (uint64_t)v20);
    sub_1B1E10010((uint64_t)v20, (uint64_t)v16, &qword_1ED4B84D0, (uint64_t)&type metadata for TextureCache.WeakStorage.CPU);
    if (v18)
    {
      sub_1B1FAEC94((uint64_t)v16, (uint64_t)&v3);
      *(_QWORD *)&v4 = v4 - a1;
      if (!(_QWORD)v4)
      {
        swift_unknownObjectRelease();
        *((_QWORD *)&v3 + 1) = 0;
      }
      sub_1B1FAECC8((uint64_t)&v3, (uint64_t)v15);
      sub_1B1FAED40((uint64_t)v16);
    }
    else
    {
      sub_1B1B1F3E4((uint64_t)v16, &qword_1ED4B84D0, (uint64_t)&type metadata for TextureCache.WeakStorage.CPU);
      memset(v15, 0, sizeof(v15));
    }
    sub_1B1E10010((uint64_t)&v21, (uint64_t)v16, &qword_1ED4B7758, (uint64_t)&type metadata for TextureCache.WeakStorage.GPU);
    if (v17 == 1)
    {
      sub_1B1B1F3E4((uint64_t)v16, &qword_1ED4B7758, (uint64_t)&type metadata for TextureCache.WeakStorage.GPU);
      v13 = xmmword_1B2244C80;
      v14 = 0;
    }
    else
    {
      sub_1B1FAEC2C((uint64_t)v16, (uint64_t)&v3);
      *(_QWORD *)&v4 = v4 - a1;
      if (!(_QWORD)v4)
      {
        swift_unknownObjectRelease();
        *((_QWORD *)&v3 + 1) = 0;
      }
      sub_1B1FAEAD4((uint64_t)&v3, (uint64_t)&v13);
      sub_1B1FAEC68((uint64_t)v16);
    }
    v11 = 0;
    v9 = 0u;
    v10 = 0u;
    v7 = 0u;
    v8 = 0u;
    v5 = 0u;
    v6 = 0u;
    v3 = 0u;
    v4 = 0u;
    v12 = xmmword_1B2246910;
    sub_1B1FAEB0C((uint64_t)v15, (uint64_t)&v3, &qword_1ED4B84D0, (uint64_t)&type metadata for TextureCache.WeakStorage.CPU);
    sub_1B1FAEB0C((uint64_t)&v13, (uint64_t)&v11, &qword_1ED4B7758, (uint64_t)&type metadata for TextureCache.WeakStorage.GPU);
    sub_1B1FAEBCC((uint64_t)&v3, (uint64_t)v16);
    sub_1B1FAEC00((uint64_t)v20);
    v19 = 1;
    sub_1B1FAEA70((uint64_t)v16, (uint64_t)v1);
  }
  else
  {
    sub_1B2229688();
    __break(1u);
  }
}

void sub_1B1FAA1A4(__int128 *a1)
{
  uint64_t *v1;
  NSObject *v3;
  uint64_t v4;
  _QWORD v5[19];
  char v6;

  sub_1B1FAE9A8(v1, (uint64_t)v5);
  if (v6)
  {
    sub_1B1FAAB78((uint64_t)v5);
    sub_1B2229688();
    __break(1u);
  }
  else
  {
    v3 = v5[0];
    v4 = v5[1];
    sub_1B1E6E004(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1FAEA38);
    sub_1B1FAA27C(a1, v4, (uint64_t)v5);
    v6 = 1;
    sub_1B1FAEA70((uint64_t)v5, (uint64_t)v1);
    dispatch_group_leave(v3);

  }
}

uint64_t sub_1B1FAA27C@<X0>(__int128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  ValueMetadata *v10;
  uint64_t v11;
  _BYTE v13[128];
  _OWORD v14[6];
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;

  *(_QWORD *)(a3 + 128) = 0;
  v6 = a3 + 128;
  *(_OWORD *)(a3 + 96) = 0u;
  *(_OWORD *)(a3 + 112) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 136) = xmmword_1B2246910;
  sub_1B1FAEAA4(a1, (uint64_t)v14);
  if ((*((_QWORD *)&v15 + 1) & 0x8000000000000000) != 0)
  {
    *((_QWORD *)&v15 + 1) &= ~0x8000000000000000;
    v21 = v14[4];
    v22 = v14[5];
    v24 = v16;
    v17 = v14[0];
    v18 = v14[1];
    v19 = v14[2];
    v20 = v14[3];
    v23 = v15;
    sub_1B1FAA45C(&v17, a2, (uint64_t)v13);
    v9 = &qword_1ED4B84D0;
    v10 = &type metadata for TextureCache.WeakStorage.CPU;
    v11 = a3;
  }
  else
  {
    swift_unknownObjectWeakInit();
    *((_QWORD *)&v17 + 1) = 0;
    *(_QWORD *)&v18 = 0;
    v7 = swift_unknownObjectWeakAssign();
    if (a2 >= 1)
    {
      v8 = MEMORY[0x1B5E240CC](v7);
      swift_unknownObjectRelease();
      *((_QWORD *)&v17 + 1) = v8;
      *(_QWORD *)&v18 = a2;
    }
    sub_1B1FAEAD4((uint64_t)&v17, (uint64_t)v13);
    sub_1B1E6E004(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1FAEA08);
    v9 = &qword_1ED4B7758;
    v10 = &type metadata for TextureCache.WeakStorage.GPU;
    v11 = v6;
  }
  return sub_1B1FAEB0C((uint64_t)v13, v11, v9, (uint64_t)v10);
}

uint64_t sub_1B1FAA3CC(void *a1)
{
  uint64_t v1;
  id v3;
  uint64_t *v4;
  NSObject *v5;
  id v6;
  _QWORD v8[19];
  char v9;
  uint64_t v10[20];

  sub_1B1FAEB98(v1, (uint64_t)v10);
  *(_QWORD *)v1 = a1;
  *(_BYTE *)(v1 + 152) = 2;
  sub_1B1FAE9A8(v10, (uint64_t)v8);
  if (v9)
  {
    v3 = a1;
    sub_1B1FAAB78((uint64_t)v10);
    v4 = v8;
  }
  else
  {
    v5 = v8[0];
    v6 = a1;
    dispatch_group_leave(v5);

    v4 = v10;
  }
  return sub_1B1FAAB78((uint64_t)v4);
}

uint64_t sub_1B1FAA45C@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t result;
  _OWORD v15[5];
  _BYTE v16[24];
  _QWORD v17[3];

  swift_unknownObjectWeakInit();
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  sub_1B1A18378((uint64_t)a1, (uint64_t)v16, (unint64_t *)&qword_1ED4B7C40, (uint64_t)&type metadata for BufferSlice);
  sub_1B1A18378((uint64_t)v16, (uint64_t)v17, (unint64_t *)&qword_1ED4B7C40, (uint64_t)&type metadata for BufferSlice);
  if (v17[0])
  {
    v6 = v17[1];
    v7 = v17[2];
    swift_unknownObjectWeakAssign();
    *(_QWORD *)(a3 + 24) = v6;
    *(_QWORD *)(a3 + 32) = v7;
    v8 = a1[2];
    *(_OWORD *)(a3 + 56) = a1[3];
    v9 = a1[5];
    *(_OWORD *)(a3 + 72) = a1[4];
    *(_OWORD *)(a3 + 88) = v9;
    *(_OWORD *)(a3 + 104) = a1[6];
    *(_OWORD *)(a3 + 40) = v8;
    v10 = swift_bridgeObjectRetain();
  }
  else
  {
    swift_unknownObjectWeakAssign();
    *(_QWORD *)(a3 + 24) = 0;
    *(_QWORD *)(a3 + 32) = 0;
    RGTextureDescriptor.init()((uint64_t)v15);
    v11 = v15[0];
    *(_OWORD *)(a3 + 56) = v15[1];
    v12 = v15[3];
    *(_OWORD *)(a3 + 72) = v15[2];
    *(_OWORD *)(a3 + 88) = v12;
    *(_OWORD *)(a3 + 104) = v15[4];
    *(_OWORD *)(a3 + 40) = v11;
    v10 = MEMORY[0x1E0DEE9D8];
  }
  *(_QWORD *)(a3 + 120) = v10;
  if (a2 < 1)
    return sub_1B1FAEB64((uint64_t)a1);
  v13 = MEMORY[0x1B5E240CC](a3);
  swift_unknownObjectRelease();
  result = sub_1B1FAEB64((uint64_t)a1);
  *(_QWORD *)(a3 + 8) = v13;
  *(_QWORD *)(a3 + 16) = a2;
  return result;
}

uint64_t sub_1B1FAA598@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[120];
  uint64_t v23;
  _BYTE v24[24];
  __int128 v25;
  uint64_t v26;
  unsigned __int16 v27;
  unsigned __int8 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;

  sub_1B1E10010(v1, (uint64_t)v22, &qword_1ED4B84D0, (uint64_t)&type metadata for TextureCache.WeakStorage.CPU);
  if (!v23)
  {
    result = sub_1B1B1F3E4((uint64_t)v22, &qword_1ED4B84D0, (uint64_t)&type metadata for TextureCache.WeakStorage.CPU);
    v3 = 0;
LABEL_8:
    v17 = 0;
    v4 = 0;
    v16 = 0;
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v13 = 0uLL;
    v14 = 0uLL;
    v11 = 0uLL;
    v12 = 0uLL;
    goto LABEL_9;
  }
  sub_1B1FAECC8((uint64_t)v22, (uint64_t)v24);
  v3 = MEMORY[0x1B5E240CC](v24);
  if (!v3)
  {
    result = sub_1B1FAED40((uint64_t)v24);
    goto LABEL_8;
  }
  RGTextureDescriptor.init()((uint64_t)v22);
  v4 = v26;
  v5 = v28;
  v20 = v29;
  v21 = v25;
  v18 = v31;
  v19 = v30;
  v6 = v32;
  v7 = v33;
  v8 = v34;
  v9 = v27;
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  sub_1B1FAED40((uint64_t)v24);
  swift_unknownObjectRelease();
  result = swift_bridgeObjectRelease();
  v12 = v18;
  v11 = v19;
  v14 = v20;
  v13 = v21;
  v15 = 0x10000;
  if (!v5)
    v15 = 0;
  v16 = v9 | v15;
  v17 = 1;
LABEL_9:
  *(_QWORD *)a1 = v3;
  *(_OWORD *)(a1 + 8) = v13;
  *(_QWORD *)(a1 + 24) = v17;
  *(_QWORD *)(a1 + 32) = v4;
  *(_QWORD *)(a1 + 40) = v16;
  *(_OWORD *)(a1 + 48) = v14;
  *(_OWORD *)(a1 + 64) = v11;
  *(_OWORD *)(a1 + 80) = v12;
  *(_QWORD *)(a1 + 96) = v6;
  *(_QWORD *)(a1 + 104) = v7;
  *(_QWORD *)(a1 + 112) = v8;
  return result;
}

uint64_t sub_1B1FAA714()
{
  uint64_t v0;

  MEMORY[0x1B5E23F88](*(_QWORD *)(v0 + 48), -1, -1);
  swift_unknownObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_1B1FAA798()
{
  sub_1B1FAA714();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for TextureCache()
{
  return objc_opt_self();
}

void destroy for TextureCache.CacheEntry(uint64_t a1)
{
  int v2;

  v2 = *(unsigned __int8 *)(a1 + 152);
  if (v2 == 2)
    goto LABEL_4;
  if (v2 == 1)
  {
    if (*(_QWORD *)(a1 + 120))
    {
      swift_unknownObjectWeakDestroy();
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
    }
    if (*(_QWORD *)(a1 + 136) != 1)
    {
      swift_unknownObjectWeakDestroy();
      swift_unknownObjectRelease();
    }
  }
  else if (!*(_BYTE *)(a1 + 152))
  {
LABEL_4:

  }
}

uint64_t initializeWithCopy for TextureCache.CacheEntry(uint64_t a1, uint64_t a2)
{
  int v4;
  id v5;
  uint64_t v6;
  id v7;
  id v8;
  id v9;
  char v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;

  v4 = *(unsigned __int8 *)(a2 + 152);
  if (v4 == 2)
  {
    v8 = *(id *)a2;
    v9 = *(id *)a2;
    *(_QWORD *)a1 = v8;
    v10 = 2;
LABEL_14:
    *(_BYTE *)(a1 + 152) = v10;
    return a1;
  }
  if (v4 == 1)
  {
    if (*(_QWORD *)(a2 + 120))
    {
      swift_unknownObjectWeakCopyInit();
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
      *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
      *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
      *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
      *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      v15 = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 80) = v15;
      v16 = *(_OWORD *)(a2 + 112);
      *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
      *(_OWORD *)(a1 + 112) = v16;
      v17 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v17;
      v18 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 48) = v18;
    }
    if (*(_QWORD *)(a2 + 136) == 1)
    {
      *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
      *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
    }
    else
    {
      swift_unknownObjectWeakCopyInit();
      v19 = *(_QWORD *)(a2 + 144);
      *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
      *(_QWORD *)(a1 + 144) = v19;
      swift_unknownObjectRetain();
    }
    v10 = 1;
    goto LABEL_14;
  }
  if (*(_BYTE *)(a2 + 152))
  {
    v11 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v11;
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 137) = *(_OWORD *)(a2 + 137);
    v12 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v12;
    v13 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v13;
    v14 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v14;
  }
  else
  {
    v5 = *(id *)a2;
    v6 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v6;
    *(_BYTE *)(a1 + 152) = 0;
    v7 = v5;
  }
  return a1;
}

uint64_t assignWithCopy for TextureCache.CacheEntry(uint64_t a1, __int128 *a2)
{
  int v4;
  void *v5;
  id v6;
  void *v7;
  id v8;
  char v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;

  if ((__int128 *)a1 != a2)
  {
    sub_1B1FAAB78(a1);
    v4 = *((unsigned __int8 *)a2 + 152);
    if (v4 == 2)
    {
      v7 = *(void **)a2;
      v8 = v7;
      *(_QWORD *)a1 = v7;
      v9 = 2;
    }
    else
    {
      if (v4 != 1)
      {
        if (*((_BYTE *)a2 + 152))
        {
          v13 = a2[1];
          *(_OWORD *)a1 = *a2;
          *(_OWORD *)(a1 + 16) = v13;
          v14 = a2[2];
          v15 = a2[3];
          v16 = a2[5];
          *(_OWORD *)(a1 + 64) = a2[4];
          *(_OWORD *)(a1 + 80) = v16;
          *(_OWORD *)(a1 + 32) = v14;
          *(_OWORD *)(a1 + 48) = v15;
          v17 = a2[6];
          v18 = a2[7];
          v19 = a2[8];
          *(_OWORD *)(a1 + 137) = *(__int128 *)((char *)a2 + 137);
          *(_OWORD *)(a1 + 112) = v18;
          *(_OWORD *)(a1 + 128) = v19;
          *(_OWORD *)(a1 + 96) = v17;
        }
        else
        {
          v5 = *(void **)a2;
          *(_QWORD *)a1 = *(_QWORD *)a2;
          *(_QWORD *)(a1 + 8) = *((_QWORD *)a2 + 1);
          *(_BYTE *)(a1 + 152) = 0;
          v6 = v5;
        }
        return a1;
      }
      if (*((_QWORD *)a2 + 15))
      {
        swift_unknownObjectWeakCopyInit();
        *(_QWORD *)(a1 + 8) = *((_QWORD *)a2 + 1);
        *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
        *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 3);
        *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
        *(_OWORD *)(a1 + 40) = *(__int128 *)((char *)a2 + 40);
        v10 = *(__int128 *)((char *)a2 + 56);
        v11 = *(__int128 *)((char *)a2 + 72);
        v12 = *(__int128 *)((char *)a2 + 88);
        *(_OWORD *)(a1 + 104) = *(__int128 *)((char *)a2 + 104);
        *(_OWORD *)(a1 + 88) = v12;
        *(_OWORD *)(a1 + 72) = v11;
        *(_OWORD *)(a1 + 56) = v10;
        *(_QWORD *)(a1 + 120) = *((_QWORD *)a2 + 15);
        swift_unknownObjectRetain();
        swift_bridgeObjectRetain();
      }
      else
      {
        v20 = *a2;
        v21 = a2[1];
        v22 = a2[3];
        *(_OWORD *)(a1 + 32) = a2[2];
        *(_OWORD *)(a1 + 48) = v22;
        *(_OWORD *)a1 = v20;
        *(_OWORD *)(a1 + 16) = v21;
        v23 = a2[4];
        v24 = a2[5];
        v25 = a2[7];
        *(_OWORD *)(a1 + 96) = a2[6];
        *(_OWORD *)(a1 + 112) = v25;
        *(_OWORD *)(a1 + 64) = v23;
        *(_OWORD *)(a1 + 80) = v24;
      }
      if (*((_QWORD *)a2 + 17) == 1)
      {
        v26 = a2[8];
        *(_QWORD *)(a1 + 144) = *((_QWORD *)a2 + 18);
        *(_OWORD *)(a1 + 128) = v26;
      }
      else
      {
        swift_unknownObjectWeakCopyInit();
        *(_QWORD *)(a1 + 136) = *((_QWORD *)a2 + 17);
        *(_QWORD *)(a1 + 144) = *((_QWORD *)a2 + 18);
        swift_unknownObjectRetain();
      }
      v9 = 1;
    }
    *(_BYTE *)(a1 + 152) = v9;
  }
  return a1;
}

uint64_t sub_1B1FAAB78(uint64_t a1)
{
  destroy for TextureCache.CacheEntry.State(a1);
  return a1;
}

uint64_t initializeWithTake for TextureCache.CacheEntry(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;

  if (*(_BYTE *)(a2 + 152) == 1)
  {
    if (*(_QWORD *)(a2 + 120))
    {
      swift_unknownObjectWeakTakeInit();
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
      *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
      *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
      *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
      *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
    }
    else
    {
      v8 = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 80) = v8;
      v9 = *(_OWORD *)(a2 + 112);
      *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
      *(_OWORD *)(a1 + 112) = v9;
      v10 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v10;
      v11 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 48) = v11;
    }
    if (*(_QWORD *)(a2 + 136) == 1)
    {
      *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
      *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
    }
    else
    {
      swift_unknownObjectWeakTakeInit();
      v12 = *(_QWORD *)(a2 + 144);
      *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
      *(_QWORD *)(a1 + 144) = v12;
    }
    *(_BYTE *)(a1 + 152) = 1;
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v4;
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 137) = *(_OWORD *)(a2 + 137);
    v5 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v5;
    v6 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v6;
    v7 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v7;
  }
  return a1;
}

uint64_t assignWithTake for TextureCache.CacheEntry(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;

  if (a1 != a2)
  {
    sub_1B1FAAB78(a1);
    if (*(_BYTE *)(a2 + 152) == 1)
    {
      if (*(_QWORD *)(a2 + 120))
      {
        swift_unknownObjectWeakTakeInit();
        *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
        *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
        *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
        *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
        *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
        *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
        *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
        *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
      }
      else
      {
        v8 = *(_OWORD *)(a2 + 80);
        *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
        *(_OWORD *)(a1 + 80) = v8;
        v9 = *(_OWORD *)(a2 + 112);
        *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
        *(_OWORD *)(a1 + 112) = v9;
        v10 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v10;
        v11 = *(_OWORD *)(a2 + 48);
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 48) = v11;
      }
      if (*(_QWORD *)(a2 + 136) == 1)
      {
        *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
        *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
      }
      else
      {
        swift_unknownObjectWeakTakeInit();
        v12 = *(_QWORD *)(a2 + 144);
        *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
        *(_QWORD *)(a1 + 144) = v12;
      }
      *(_BYTE *)(a1 + 152) = 1;
    }
    else
    {
      v4 = *(_OWORD *)(a2 + 112);
      *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
      *(_OWORD *)(a1 + 112) = v4;
      *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
      *(_OWORD *)(a1 + 137) = *(_OWORD *)(a2 + 137);
      v5 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 48) = v5;
      v6 = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 80) = v6;
      v7 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v7;
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for TextureCache.CacheEntry(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFD && *(_BYTE *)(a1 + 153))
    return (*(_DWORD *)a1 + 253);
  v3 = *(unsigned __int8 *)(a1 + 152);
  if (v3 <= 3)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for TextureCache.CacheEntry(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 152) = 0;
    *(_QWORD *)result = a2 - 253;
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 153) = 1;
  }
  else
  {
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 153) = 0;
    if (a2)
      *(_BYTE *)(result + 152) = -(char)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for TextureCache.CacheEntry()
{
  return &type metadata for TextureCache.CacheEntry;
}

void destroy for TextureCache.CacheEntry.State(uint64_t a1)
{
  unsigned int v2;

  v2 = *(unsigned __int8 *)(a1 + 152);
  if (v2 >= 3)
    v2 = *(_DWORD *)a1 + 3;
  switch(v2)
  {
    case 2u:
      goto LABEL_6;
    case 1u:
      if (*(_QWORD *)(a1 + 120))
      {
        swift_unknownObjectWeakDestroy();
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
      }
      if (*(_QWORD *)(a1 + 136) != 1)
      {
        swift_unknownObjectWeakDestroy();
        swift_unknownObjectRelease();
      }
      break;
    case 0u:
LABEL_6:

      break;
  }
}

uint64_t initializeWithCopy for TextureCache.CacheEntry.State(uint64_t a1, uint64_t *a2)
{
  unsigned int v4;
  id v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  id v9;
  char v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;

  v4 = *((unsigned __int8 *)a2 + 152);
  if (v4 >= 3)
    v4 = *(_DWORD *)a2 + 3;
  if (v4 == 2)
  {
    v8 = *a2;
    v9 = (id)*a2;
    *(_QWORD *)a1 = v8;
    v10 = 2;
LABEL_16:
    *(_BYTE *)(a1 + 152) = v10;
    return a1;
  }
  if (v4 == 1)
  {
    if (a2[15])
    {
      swift_unknownObjectWeakCopyInit();
      *(_QWORD *)(a1 + 8) = a2[1];
      *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
      *(_QWORD *)(a1 + 32) = a2[4];
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 7);
      *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 9);
      *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 11);
      *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 13);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 5);
      *(_QWORD *)(a1 + 120) = a2[15];
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      v15 = *((_OWORD *)a2 + 5);
      *(_OWORD *)(a1 + 64) = *((_OWORD *)a2 + 4);
      *(_OWORD *)(a1 + 80) = v15;
      v16 = *((_OWORD *)a2 + 7);
      *(_OWORD *)(a1 + 96) = *((_OWORD *)a2 + 6);
      *(_OWORD *)(a1 + 112) = v16;
      v17 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v17;
      v18 = *((_OWORD *)a2 + 3);
      *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
      *(_OWORD *)(a1 + 48) = v18;
    }
    if (a2[17] == 1)
    {
      *(_OWORD *)(a1 + 128) = *((_OWORD *)a2 + 8);
      *(_QWORD *)(a1 + 144) = a2[18];
    }
    else
    {
      swift_unknownObjectWeakCopyInit();
      v19 = a2[18];
      *(_QWORD *)(a1 + 136) = a2[17];
      *(_QWORD *)(a1 + 144) = v19;
      swift_unknownObjectRetain();
    }
    v10 = 1;
    goto LABEL_16;
  }
  if (v4)
  {
    v11 = *((_OWORD *)a2 + 7);
    *(_OWORD *)(a1 + 96) = *((_OWORD *)a2 + 6);
    *(_OWORD *)(a1 + 112) = v11;
    *(_OWORD *)(a1 + 128) = *((_OWORD *)a2 + 8);
    *(_OWORD *)(a1 + 137) = *(_OWORD *)((char *)a2 + 137);
    v12 = *((_OWORD *)a2 + 3);
    *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
    *(_OWORD *)(a1 + 48) = v12;
    v13 = *((_OWORD *)a2 + 5);
    *(_OWORD *)(a1 + 64) = *((_OWORD *)a2 + 4);
    *(_OWORD *)(a1 + 80) = v13;
    v14 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v14;
  }
  else
  {
    v5 = (id)*a2;
    v6 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v6;
    *(_BYTE *)(a1 + 152) = 0;
    v7 = v5;
  }
  return a1;
}

uint64_t assignWithCopy for TextureCache.CacheEntry.State(uint64_t a1, __int128 *a2)
{
  unsigned int v4;
  unsigned int v5;
  void *v6;
  id v7;
  void *v8;
  id v9;
  char v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;

  if ((__int128 *)a1 != a2)
  {
    v4 = *(unsigned __int8 *)(a1 + 152);
    if (v4 >= 3)
      v4 = *(_DWORD *)a1 + 3;
    if (v4 != 2)
    {
      if (v4 == 1)
      {
        if (*(_QWORD *)(a1 + 120))
        {
          swift_unknownObjectWeakDestroy();
          swift_unknownObjectRelease();
          swift_bridgeObjectRelease();
        }
        if (*(_QWORD *)(a1 + 136) != 1)
        {
          swift_unknownObjectWeakDestroy();
          swift_unknownObjectRelease();
        }
LABEL_13:
        v5 = *((unsigned __int8 *)a2 + 152);
        if (v5 >= 3)
          v5 = *(_DWORD *)a2 + 3;
        if (v5 == 2)
        {
          v8 = *(void **)a2;
          v9 = v8;
          *(_QWORD *)a1 = v8;
          v10 = 2;
        }
        else
        {
          if (v5 != 1)
          {
            if (v5)
            {
              v14 = a2[1];
              *(_OWORD *)a1 = *a2;
              *(_OWORD *)(a1 + 16) = v14;
              v15 = a2[2];
              v16 = a2[3];
              v17 = a2[5];
              *(_OWORD *)(a1 + 64) = a2[4];
              *(_OWORD *)(a1 + 80) = v17;
              *(_OWORD *)(a1 + 32) = v15;
              *(_OWORD *)(a1 + 48) = v16;
              v18 = a2[6];
              v19 = a2[7];
              v20 = a2[8];
              *(_OWORD *)(a1 + 137) = *(__int128 *)((char *)a2 + 137);
              *(_OWORD *)(a1 + 112) = v19;
              *(_OWORD *)(a1 + 128) = v20;
              *(_OWORD *)(a1 + 96) = v18;
            }
            else
            {
              v6 = *(void **)a2;
              *(_QWORD *)a1 = *(_QWORD *)a2;
              *(_QWORD *)(a1 + 8) = *((_QWORD *)a2 + 1);
              *(_BYTE *)(a1 + 152) = 0;
              v7 = v6;
            }
            return a1;
          }
          if (*((_QWORD *)a2 + 15))
          {
            swift_unknownObjectWeakCopyInit();
            *(_QWORD *)(a1 + 8) = *((_QWORD *)a2 + 1);
            *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
            *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 3);
            *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
            *(_OWORD *)(a1 + 40) = *(__int128 *)((char *)a2 + 40);
            v11 = *(__int128 *)((char *)a2 + 56);
            v12 = *(__int128 *)((char *)a2 + 72);
            v13 = *(__int128 *)((char *)a2 + 88);
            *(_OWORD *)(a1 + 104) = *(__int128 *)((char *)a2 + 104);
            *(_OWORD *)(a1 + 88) = v13;
            *(_OWORD *)(a1 + 72) = v12;
            *(_OWORD *)(a1 + 56) = v11;
            *(_QWORD *)(a1 + 120) = *((_QWORD *)a2 + 15);
            swift_unknownObjectRetain();
            swift_bridgeObjectRetain();
          }
          else
          {
            v21 = *a2;
            v22 = a2[1];
            v23 = a2[3];
            *(_OWORD *)(a1 + 32) = a2[2];
            *(_OWORD *)(a1 + 48) = v23;
            *(_OWORD *)a1 = v21;
            *(_OWORD *)(a1 + 16) = v22;
            v24 = a2[4];
            v25 = a2[5];
            v26 = a2[7];
            *(_OWORD *)(a1 + 96) = a2[6];
            *(_OWORD *)(a1 + 112) = v26;
            *(_OWORD *)(a1 + 64) = v24;
            *(_OWORD *)(a1 + 80) = v25;
          }
          if (*((_QWORD *)a2 + 17) == 1)
          {
            v27 = a2[8];
            *(_QWORD *)(a1 + 144) = *((_QWORD *)a2 + 18);
            *(_OWORD *)(a1 + 128) = v27;
          }
          else
          {
            swift_unknownObjectWeakCopyInit();
            *(_QWORD *)(a1 + 136) = *((_QWORD *)a2 + 17);
            *(_QWORD *)(a1 + 144) = *((_QWORD *)a2 + 18);
            swift_unknownObjectRetain();
          }
          v10 = 1;
        }
        *(_BYTE *)(a1 + 152) = v10;
        return a1;
      }
      if (v4)
        goto LABEL_13;
    }

    goto LABEL_13;
  }
  return a1;
}

uint64_t initializeWithTake for TextureCache.CacheEntry.State(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  char v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  v4 = *(unsigned __int8 *)(a2 + 152);
  if (v4 >= 3)
    v4 = *(_DWORD *)a2 + 3;
  if (v4 == 2)
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    v5 = 2;
LABEL_16:
    *(_BYTE *)(a1 + 152) = v5;
    return a1;
  }
  if (v4 == 1)
  {
    if (*(_QWORD *)(a2 + 120))
    {
      swift_unknownObjectWeakTakeInit();
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
      *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
      *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
      *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
      *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
    }
    else
    {
      v10 = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 80) = v10;
      v11 = *(_OWORD *)(a2 + 112);
      *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
      *(_OWORD *)(a1 + 112) = v11;
      v12 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v12;
      v13 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 48) = v13;
    }
    if (*(_QWORD *)(a2 + 136) == 1)
    {
      *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
      *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
    }
    else
    {
      swift_unknownObjectWeakTakeInit();
      v14 = *(_QWORD *)(a2 + 144);
      *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
      *(_QWORD *)(a1 + 144) = v14;
    }
    v5 = 1;
    goto LABEL_16;
  }
  if (v4)
  {
    v6 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v6;
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 137) = *(_OWORD *)(a2 + 137);
    v7 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v7;
    v8 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v8;
    v9 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v9;
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_BYTE *)(a1 + 152) = 0;
  }
  return a1;
}

uint64_t assignWithTake for TextureCache.CacheEntry.State(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  char v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;

  if (a1 != a2)
  {
    v4 = *(unsigned __int8 *)(a1 + 152);
    if (v4 >= 3)
      v4 = *(_DWORD *)a1 + 3;
    if (v4 != 2)
    {
      if (v4 == 1)
      {
        if (*(_QWORD *)(a1 + 120))
        {
          swift_unknownObjectWeakDestroy();
          swift_unknownObjectRelease();
          swift_bridgeObjectRelease();
        }
        if (*(_QWORD *)(a1 + 136) != 1)
        {
          swift_unknownObjectWeakDestroy();
          swift_unknownObjectRelease();
        }
LABEL_13:
        v5 = *(unsigned __int8 *)(a2 + 152);
        if (v5 >= 3)
          v5 = *(_DWORD *)a2 + 3;
        if (v5 == 2)
        {
          *(_QWORD *)a1 = *(_QWORD *)a2;
          v6 = 2;
        }
        else
        {
          if (v5 != 1)
          {
            if (v5)
            {
              v7 = *(_OWORD *)(a2 + 112);
              *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
              *(_OWORD *)(a1 + 112) = v7;
              *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
              *(_OWORD *)(a1 + 137) = *(_OWORD *)(a2 + 137);
              v8 = *(_OWORD *)(a2 + 48);
              *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
              *(_OWORD *)(a1 + 48) = v8;
              v9 = *(_OWORD *)(a2 + 80);
              *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
              *(_OWORD *)(a1 + 80) = v9;
              v10 = *(_OWORD *)(a2 + 16);
              *(_OWORD *)a1 = *(_OWORD *)a2;
              *(_OWORD *)(a1 + 16) = v10;
            }
            else
            {
              *(_OWORD *)a1 = *(_OWORD *)a2;
              *(_BYTE *)(a1 + 152) = 0;
            }
            return a1;
          }
          if (*(_QWORD *)(a2 + 120))
          {
            swift_unknownObjectWeakTakeInit();
            *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
            *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
            *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
            *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
            *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
            *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
            *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
            *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
            *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
          }
          else
          {
            v11 = *(_OWORD *)(a2 + 80);
            *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
            *(_OWORD *)(a1 + 80) = v11;
            v12 = *(_OWORD *)(a2 + 112);
            *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
            *(_OWORD *)(a1 + 112) = v12;
            v13 = *(_OWORD *)(a2 + 16);
            *(_OWORD *)a1 = *(_OWORD *)a2;
            *(_OWORD *)(a1 + 16) = v13;
            v14 = *(_OWORD *)(a2 + 48);
            *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
            *(_OWORD *)(a1 + 48) = v14;
          }
          if (*(_QWORD *)(a2 + 136) == 1)
          {
            *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
            *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
          }
          else
          {
            swift_unknownObjectWeakTakeInit();
            v15 = *(_QWORD *)(a2 + 144);
            *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
            *(_QWORD *)(a1 + 144) = v15;
          }
          v6 = 1;
        }
        *(_BYTE *)(a1 + 152) = v6;
        return a1;
      }
      if (v4)
        goto LABEL_13;
    }

    goto LABEL_13;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for TextureCache.CacheEntry.State(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xFD && *(_BYTE *)(a1 + 153))
    return (*(_DWORD *)a1 + 253);
  v3 = *(unsigned __int8 *)(a1 + 152);
  if (v3 >= 4)
    return (v3 ^ 0xFF) + 1;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for TextureCache.CacheEntry.State(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_OWORD *)(result + 137) = 0u;
    *(_OWORD *)(result + 112) = 0u;
    *(_OWORD *)(result + 128) = 0u;
    *(_OWORD *)(result + 80) = 0u;
    *(_OWORD *)(result + 96) = 0u;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)(result + 64) = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)result = 0u;
    *(_DWORD *)result = a2 - 253;
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 153) = 1;
  }
  else
  {
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 153) = 0;
    if (a2)
      *(_BYTE *)(result + 152) = -(char)a2;
  }
  return result;
}

uint64_t sub_1B1FAB6D0(uint64_t a1)
{
  uint64_t result;

  result = *(unsigned __int8 *)(a1 + 152);
  if (result >= 3)
    return (*(_DWORD *)a1 + 3);
  return result;
}

uint64_t sub_1B1FAB6EC(uint64_t result, unsigned int a2)
{
  unsigned int v2;

  if (a2 > 2)
  {
    v2 = a2 - 3;
    *(_QWORD *)(result + 144) = 0;
    *(_OWORD *)(result + 112) = 0u;
    *(_OWORD *)(result + 128) = 0u;
    *(_OWORD *)(result + 80) = 0u;
    *(_OWORD *)(result + 96) = 0u;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)(result + 64) = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)result = 0u;
    LOBYTE(a2) = 3;
    *(_DWORD *)result = v2;
  }
  *(_BYTE *)(result + 152) = a2;
  return result;
}

ValueMetadata *type metadata accessor for TextureCache.CacheEntry.State()
{
  return &type metadata for TextureCache.CacheEntry.State;
}

uint64_t *sub_1B1FAB734(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  _BYTE *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  __int128 v14;
  uint64_t v15;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    v7 = *(int *)(a3 + 20);
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = sub_1B2228110();
    (*(void (**)(_BYTE *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
    v11 = *(int *)(a3 + 24);
    v12 = (_OWORD *)((char *)v4 + v11);
    v13 = (_OWORD *)((char *)a2 + v11);
    v14 = v13[1];
    *v12 = *v13;
    v12[1] = v14;
    v12[2] = v13[2];
    *(_OWORD *)((char *)v12 + 42) = *(_OWORD *)((char *)v13 + 42);
  }
  return v4;
}

uint64_t sub_1B1FAB7F0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + *(int *)(a2 + 20);
  v3 = sub_1B2228110();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
}

_BYTE *sub_1B1FAB828(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  _OWORD *v12;
  __int128 v13;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = sub_1B2228110();
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
  v10 = *(int *)(a3 + 24);
  v11 = &a1[v10];
  v12 = &a2[v10];
  v13 = v12[1];
  *v11 = *v12;
  v11[1] = v13;
  v11[2] = v12[2];
  *(_OWORD *)((char *)v11 + 42) = *(_OWORD *)((char *)v12 + 42);
  return a1;
}

_BYTE *sub_1B1FAB8B8(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  __int128 v13;
  __int128 v14;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = sub_1B2228110();
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  v10 = *(int *)(a3 + 24);
  v11 = &a1[v10];
  v12 = &a2[v10];
  *(_QWORD *)v11 = *(_QWORD *)v12;
  v13 = *(_OWORD *)(v12 + 8);
  v11[24] = v12[24];
  *(_OWORD *)(v11 + 8) = v13;
  v14 = *(_OWORD *)(v12 + 42);
  *((_OWORD *)v11 + 2) = *((_OWORD *)v12 + 2);
  *(_OWORD *)(v11 + 42) = v14;
  return a1;
}

_BYTE *sub_1B1FAB958(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  _OWORD *v12;
  __int128 v13;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = sub_1B2228110();
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = *(int *)(a3 + 24);
  v11 = &a1[v10];
  v12 = &a2[v10];
  v13 = v12[1];
  *v11 = *v12;
  v11[1] = v13;
  v11[2] = v12[2];
  *(_OWORD *)((char *)v11 + 42) = *(_OWORD *)((char *)v12 + 42);
  return a1;
}

_BYTE *sub_1B1FAB9E8(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  _BYTE *v12;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = sub_1B2228110();
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  v10 = *(int *)(a3 + 24);
  v11 = &a1[v10];
  v12 = &a2[v10];
  *(_QWORD *)v11 = *(_QWORD *)v12;
  *(_OWORD *)(v11 + 8) = *(_OWORD *)(v12 + 8);
  v11[24] = v12[24];
  *((_OWORD *)v11 + 2) = *((_OWORD *)v12 + 2);
  *(_OWORD *)(v11 + 42) = *(_OWORD *)(v12 + 42);
  return a1;
}

uint64_t sub_1B1FABA88()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1B1FABA94(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4;
  uint64_t v8;

  if ((_DWORD)a2 == 254)
  {
    v4 = *a1;
    if (v4 >= 2)
      return v4 - 1;
    else
      return 0;
  }
  else
  {
    v8 = sub_1B2228110();
    return (*(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 20)], a2, v8);
  }
}

uint64_t sub_1B1FABB08()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

_BYTE *sub_1B1FABB14(_BYTE *result, uint64_t a2, int a3, uint64_t a4)
{
  _BYTE *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 254)
  {
    *result = a2 + 1;
  }
  else
  {
    v7 = sub_1B2228110();
    return (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for TextureCache.TextureKey()
{
  uint64_t result;

  result = qword_1ED4BF560;
  if (!qword_1ED4BF560)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_1B1FABBC0()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1B2228110();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for TextureCache.AsyncGroupRequestState()
{
  return &type metadata for TextureCache.AsyncGroupRequestState;
}

uint64_t sub_1B1FABC4C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;
  __int16 v4;

  sub_1B222A06C();
  sub_1B222A078();
  v1 = type metadata accessor for TextureCache.TextureKey();
  sub_1B2228110();
  sub_1B19E52CC((unint64_t *)&unk_1ED4B7B10, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], MEMORY[0x1E0CB0018]);
  sub_1B22285E4();
  v2 = v0 + *(int *)(v1 + 24);
  v3 = *(unsigned __int8 *)(v2 + 24);
  v4 = *(_WORD *)(v2 + 56);
  sub_1B222A078();
  if (v3 >= 0xFE || (sub_1B222A084(), sub_1B222A078(), sub_1B222A078(), sub_1B222A078(), (v3 & 0x80) == 0))
    sub_1B222A084();
  if ((v4 & 0xFF00) != 0x300)
  {
    sub_1B222A084();
    sub_1B222A078();
    sub_1B222A078();
    sub_1B222A084();
    if ((v4 & 1) == 0)
      sub_1B222A078();
  }
  sub_1B222A084();
  return sub_1B222A0C0();
}

uint64_t sub_1B1FABE10(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unsigned int v5;
  __int16 v6;

  sub_1B222A078();
  sub_1B2228110();
  sub_1B19E52CC((unint64_t *)&unk_1ED4B7B10, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], MEMORY[0x1E0CB0018]);
  sub_1B22285E4();
  v4 = v2 + *(int *)(a2 + 24);
  v5 = *(unsigned __int8 *)(v4 + 24);
  v6 = *(_WORD *)(v4 + 56);
  sub_1B222A078();
  if (v5 >= 0xFE || (sub_1B222A084(), sub_1B222A078(), sub_1B222A078(), sub_1B222A078(), (v5 & 0x80) == 0))
    sub_1B222A084();
  if ((v6 & 0xFF00) != 0x300)
  {
    sub_1B222A084();
    sub_1B222A078();
    sub_1B222A078();
    sub_1B222A084();
    if ((v6 & 1) == 0)
      sub_1B222A078();
  }
  return sub_1B222A084();
}

uint64_t sub_1B1FABFA0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unsigned int v5;
  __int16 v6;

  sub_1B222A06C();
  sub_1B222A078();
  sub_1B2228110();
  sub_1B19E52CC((unint64_t *)&unk_1ED4B7B10, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], MEMORY[0x1E0CB0018]);
  sub_1B22285E4();
  v4 = v2 + *(int *)(a2 + 24);
  v5 = *(unsigned __int8 *)(v4 + 24);
  v6 = *(_WORD *)(v4 + 56);
  sub_1B222A078();
  if (v5 >= 0xFE || (sub_1B222A084(), sub_1B222A078(), sub_1B222A078(), sub_1B222A078(), (v5 & 0x80) == 0))
    sub_1B222A084();
  if ((v6 & 0xFF00) != 0x300)
  {
    sub_1B222A084();
    sub_1B222A078();
    sub_1B222A078();
    sub_1B222A084();
    if ((v6 & 1) == 0)
      sub_1B222A078();
  }
  sub_1B222A084();
  return sub_1B222A0C0();
}

BOOL sub_1B1FAC154(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v6;
  __int128 v7;
  unsigned __int8 *v8;
  __int128 v9;
  _OWORD v12[2];
  _OWORD v13[2];
  _OWORD v14[2];
  _OWORD v15[2];

  if (*a1 == *a2 && (MEMORY[0x1B5E1FC68](&a1[*(int *)(a3 + 20)], &a2[*(int *)(a3 + 20)]) & 1) != 0)
  {
    v6 = *(int *)(a3 + 24);
    v7 = *(_OWORD *)&a1[v6 + 16];
    v12[0] = *(_OWORD *)&a1[v6];
    v12[1] = v7;
    v13[0] = *(_OWORD *)&a1[v6 + 32];
    *(_OWORD *)((char *)v13 + 10) = *(_OWORD *)&a1[v6 + 42];
    v8 = &a2[v6];
    v9 = *((_OWORD *)v8 + 1);
    v14[0] = *(_OWORD *)v8;
    v14[1] = v9;
    v15[0] = *((_OWORD *)v8 + 2);
    *(_OWORD *)((char *)v15 + 10) = *(_OWORD *)(v8 + 42);
    return sub_1B210A098((uint64_t)v12, (uint64_t)v14);
  }
  else
  {
    return 0;
  }
}

uint64_t sub_1B1FAC200()
{
  return sub_1B19E52CC((unint64_t *)&unk_1ED4B84B0, (uint64_t (*)(uint64_t))type metadata accessor for TextureCache.TextureKey, (uint64_t)&unk_1B22AA108);
}

uint64_t sub_1B1FAC22C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v4;
  uint64_t v6;

  v1 = v0;
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v0 + 48));
  v2 = *(_QWORD *)(v0 + 144) + 1;
  *(_QWORD *)(v0 + 144) = v2;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v6 = *(_QWORD *)(v0 + 64);
  *(_QWORD *)(v0 + 64) = 0x8000000000000000;
  sub_1B1B8A0A8(MEMORY[0x1E0DEE9E0], v2, isUniquelyReferenced_nonNull_native);
  *(_QWORD *)(v0 + 64) = v6;
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(v0 + 144);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v1 + 48));
  return v4;
}

uint64_t sub_1B1FAC2BC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  char v6;
  uint64_t v7;

  v2 = v1;
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v1 + 48));
  v4 = *(_QWORD *)(v1 + 64);
  if (*(_QWORD *)(v4 + 16) && (v5 = sub_1B1DC3AC8(a1), (v6 & 1) != 0))
  {
    v7 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v5);
    swift_bridgeObjectRetain();
  }
  else
  {
    v7 = 0;
  }
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v2 + 48));
  return v7;
}

uint64_t sub_1B1FAC328(unsigned __int8 *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  char v6;
  int v7;
  id v8;
  id *v9;
  uint64_t result;
  id v11[19];
  unsigned __int8 v12;
  uint64_t v13[20];
  _OWORD v14[9];
  uint64_t v15;
  char v16;

  v2 = v1;
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v1 + 48));
  v4 = *(_QWORD *)(v1 + 72);
  if (*(_QWORD *)(v4 + 16) && (v5 = sub_1B1DC457C(a1), (v6 & 1) != 0))
  {
    sub_1B1C1AA1C(*(_QWORD *)(v4 + 56) + 160 * v5, (uint64_t)v14);
  }
  else
  {
    v15 = 0;
    memset(v14, 0, sizeof(v14));
    v16 = -1;
  }
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v2 + 48));
  sub_1B1E10010((uint64_t)v14, (uint64_t)v11, (unint64_t *)&unk_1ED4B84C0, (uint64_t)&type metadata for TextureCache.CacheEntry);
  if (v12 == 255)
  {
    sub_1B1B1F3E4((uint64_t)v14, (unint64_t *)&unk_1ED4B84C0, (uint64_t)&type metadata for TextureCache.CacheEntry);
    v9 = v11;
    return sub_1B1B1F3E4((uint64_t)v9, (unint64_t *)&unk_1ED4B84C0, (uint64_t)&type metadata for TextureCache.CacheEntry);
  }
  sub_1B1B9C128((uint64_t)v11, (uint64_t)v13);
  sub_1B1FAE9A8(v13, (uint64_t)v11);
  v7 = v12;
  sub_1B1FAAB78((uint64_t)v11);
  if (v7)
  {
LABEL_9:
    sub_1B1FAE9DC((uint64_t)v13);
    v9 = (id *)v14;
    return sub_1B1B1F3E4((uint64_t)v9, (unint64_t *)&unk_1ED4B84C0, (uint64_t)&type metadata for TextureCache.CacheEntry);
  }
  sub_1B1FAE9A8(v13, (uint64_t)v11);
  if (!v12)
  {
    v8 = v11[0];
    sub_1B2228EFC();

    goto LABEL_9;
  }
  sub_1B1FAAB78((uint64_t)v11);
  result = sub_1B2229688();
  __break(1u);
  return result;
}

uint64_t sub_1B1FAC4DC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unsigned __int8 *v30;
  uint64_t result;
  uint64_t v32;
  int64_t v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  int64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned __int8 *v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;

  v2 = type metadata accessor for TextureCache.TextureKey();
  v38 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v3);
  v40 = (unsigned __int8 *)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1B1FAF2BC(0, &qword_1ED4B8498, &qword_1ED4B8490);
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v32 - v11;
  v13 = sub_1B1FAC2BC(a1);
  if (v13)
  {
    v14 = 0;
    v39 = v13;
    v17 = *(_QWORD *)(v13 + 64);
    v15 = v13 + 64;
    v16 = v17;
    v18 = 1 << *(_BYTE *)(v15 - 32);
    v19 = -1;
    if (v18 < 64)
      v19 = ~(-1 << v18);
    v20 = v19 & v16;
    v36 = v15;
    v37 = (unint64_t)(v18 + 63) >> 6;
    v35 = v37 - 5;
    v33 = v37 - 1;
    v34 = v15 + 40;
    if ((v19 & v16) == 0)
      goto LABEL_7;
LABEL_5:
    v21 = __clz(__rbit64(v20));
    v20 &= v20 - 1;
    v22 = v14;
    v23 = v21 | (v14 << 6);
LABEL_6:
    v24 = v39;
    sub_1B1792810(*(_QWORD *)(v39 + 48) + *(_QWORD *)(v38 + 72) * v23, (uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for TextureCache.TextureKey);
    v25 = *(_QWORD *)(v24 + 56);
    sub_1B1FAEDA0(0, &qword_1ED4B8490);
    v27 = v26;
    *(_QWORD *)&v8[*(int *)(v26 + 48)] = *(_QWORD *)(v25 + 8 * v23);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v8, 0, 1, v26);
    while (1)
    {
      sub_1B1FAF310((uint64_t)v8, (uint64_t)v12, &qword_1ED4B8498, &qword_1ED4B8490);
      sub_1B1FAEDA0(0, &qword_1ED4B8490);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 48))(v12, 1, v27) == 1)
        return swift_release();
      v30 = v40;
      sub_1B1A025EC((uint64_t)v12, (uint64_t)v40, (uint64_t (*)(_QWORD))type metadata accessor for TextureCache.TextureKey);
      sub_1B1FAC328(v30);
      sub_1B1A04628((uint64_t)v30, (uint64_t (*)(_QWORD))type metadata accessor for TextureCache.TextureKey);
      v14 = v22;
      if (v20)
        goto LABEL_5;
LABEL_7:
      v22 = v14 + 1;
      if (v14 + 1 >= v37)
      {
        v22 = v14;
      }
      else
      {
        v28 = *(_QWORD *)(v36 + 8 * v22);
        if (v28)
          goto LABEL_9;
        if (v14 + 2 < v37)
        {
          v28 = *(_QWORD *)(v36 + 8 * (v14 + 2));
          if (v28)
          {
            v22 = v14 + 2;
LABEL_9:
            v20 = (v28 - 1) & v28;
            v23 = __clz(__rbit64(v28)) + (v22 << 6);
            goto LABEL_6;
          }
          v22 = v14 + 2;
          if (v14 + 3 < v37)
          {
            v28 = *(_QWORD *)(v36 + 8 * (v14 + 3));
            if (v28)
            {
              v22 = v14 + 3;
              goto LABEL_9;
            }
            v22 = v14 + 3;
            if (v14 + 4 < v37)
            {
              v28 = *(_QWORD *)(v36 + 8 * (v14 + 4));
              v22 = v14 + 4;
              if (v28)
                goto LABEL_9;
              while (v35 != v14)
              {
                v28 = *(_QWORD *)(v34 + 8 * v14++);
                if (v28)
                {
                  v22 = v14 + 4;
                  goto LABEL_9;
                }
              }
              v22 = v33;
            }
          }
        }
      }
      sub_1B1FAEDA0(0, &qword_1ED4B8490);
      v27 = v29;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v8, 1, 1, v29);
      v20 = 0;
    }
  }
  else
  {
    v42 = 0;
    v43 = 0xE000000000000000;
    sub_1B2229430();
    swift_bridgeObjectRelease();
    v42 = 0xD00000000000002BLL;
    v43 = 0x80000001B2346970;
    v41 = a1;
    sub_1B2229A0C();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    result = sub_1B2229688();
    __break(1u);
  }
  return result;
}

uint64_t sub_1B1FAC8F8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  int64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(_QWORD *);
  uint64_t v40;
  uint64_t result;
  uint64_t v42;
  int64_t v43;
  uint64_t v44;
  int64_t v45;
  uint64_t v46;
  int64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;

  v2 = v1;
  v4 = type metadata accessor for TextureCache.TextureKey();
  v49 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (unsigned __int8 *)&v42 - v10;
  sub_1B1FAF2BC(0, &qword_1ED4B8498, &qword_1ED4B8490);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)&v42 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = (char *)&v42 - v18;
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v1 + 48));
  v20 = sub_1B1B84174(a1);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v2 + 48));
  if (v20)
  {
    v21 = 0;
    v50 = v20;
    v24 = *(_QWORD *)(v20 + 64);
    v23 = v20 + 64;
    v22 = v24;
    v25 = 1 << *(_BYTE *)(v23 - 32);
    v26 = -1;
    if (v25 < 64)
      v26 = ~(-1 << v25);
    v27 = v26 & v22;
    v51 = v7;
    v52 = v2 + 72;
    v46 = v23;
    v47 = (unint64_t)(v25 + 63) >> 6;
    v45 = v47 - 5;
    v43 = v47 - 1;
    v44 = v23 + 40;
    v48 = v2;
    while (!v27)
    {
      v29 = v21 + 1;
      if (v21 + 1 >= v47)
      {
        v29 = v21;
      }
      else
      {
        v35 = *(_QWORD *)(v46 + 8 * v29);
        if (v35)
          goto LABEL_11;
        if (v21 + 2 < v47)
        {
          v35 = *(_QWORD *)(v46 + 8 * (v21 + 2));
          if (v35)
          {
            v29 = v21 + 2;
            goto LABEL_11;
          }
          v29 = v21 + 2;
          if (v21 + 3 < v47)
          {
            v35 = *(_QWORD *)(v46 + 8 * (v21 + 3));
            if (v35)
            {
              v29 = v21 + 3;
LABEL_11:
              v27 = (v35 - 1) & v35;
              v30 = __clz(__rbit64(v35)) + (v29 << 6);
LABEL_8:
              v31 = v50;
              sub_1B1792810(*(_QWORD *)(v50 + 48) + *(_QWORD *)(v49 + 72) * v30, (uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for TextureCache.TextureKey);
              v32 = *(_QWORD *)(v31 + 56);
              sub_1B1FAEDA0(0, &qword_1ED4B8490);
              v34 = v33;
              *(_QWORD *)&v15[*(int *)(v33 + 48)] = *(_QWORD *)(v32 + 8 * v30);
              (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 56))(v15, 0, 1, v33);
              v2 = v48;
              goto LABEL_14;
            }
            v29 = v21 + 3;
            if (v21 + 4 < v47)
            {
              v35 = *(_QWORD *)(v46 + 8 * (v21 + 4));
              v29 = v21 + 4;
              if (v35)
                goto LABEL_11;
              while (v45 != v21)
              {
                v35 = *(_QWORD *)(v44 + 8 * v21++);
                if (v35)
                {
                  v29 = v21 + 4;
                  goto LABEL_11;
                }
              }
              v29 = v43;
            }
          }
        }
      }
      sub_1B1FAEDA0(0, &qword_1ED4B8490);
      v34 = v36;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 56))(v15, 1, 1, v36);
      v27 = 0;
LABEL_14:
      sub_1B1FAF310((uint64_t)v15, (uint64_t)v19, &qword_1ED4B8498, &qword_1ED4B8490);
      sub_1B1FAEDA0(0, &qword_1ED4B8490);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 48))(v19, 1, v34) == 1)
        return swift_release();
      v37 = *(_QWORD *)&v19[*(int *)(v34 + 48)];
      sub_1B1A025EC((uint64_t)v19, (uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for TextureCache.TextureKey);
      sub_1B1FAC328(v11);
      os_unfair_lock_lock(*(os_unfair_lock_t *)(v2 + 48));
      v38 = (uint64_t)v51;
      sub_1B1792810((uint64_t)v11, (uint64_t)v51, (uint64_t (*)(_QWORD))type metadata accessor for TextureCache.TextureKey);
      v39 = sub_1B1E8DEE0(&v53, v38);
      if (*(unsigned __int8 *)(v40 + 152) != 255)
        sub_1B1FA9F4C(v37);
      ((void (*)(unint64_t *, _QWORD))v39)(&v53, 0);
      sub_1B1A04628(v38, (uint64_t (*)(_QWORD))type metadata accessor for TextureCache.TextureKey);
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v2 + 48));
      sub_1B1A04628((uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for TextureCache.TextureKey);
      v21 = v29;
    }
    v28 = __clz(__rbit64(v27));
    v27 &= v27 - 1;
    v29 = v21;
    v30 = v28 | (v21 << 6);
    goto LABEL_8;
  }
  v53 = 0;
  v54 = 0xE000000000000000;
  sub_1B2229430();
  swift_bridgeObjectRelease();
  v53 = 0xD00000000000002BLL;
  v54 = 0x80000001B2346970;
  v55 = a1;
  sub_1B2229A0C();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  result = sub_1B2229688();
  __break(1u);
  return result;
}

void sub_1B1FACDE0(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int v15;
  id v16;
  void (*v17)(_QWORD *);
  uint64_t v18;
  uint64_t v19;
  char v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  id v35[19];
  unsigned __int8 v36;
  uint64_t v37[20];
  _OWORD v38[7];
  uint64_t v39;

  v6 = v4;
  v11 = type metadata accessor for TextureCache.TextureKey();
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1B1FAD0C0(v6, a2, a3, a1, (uint64_t)v35);
  if (!v5)
  {
    if (v36 == 255)
    {
      sub_1B1B1F3E4((uint64_t)v35, (unint64_t *)&unk_1ED4B84C0, (uint64_t)&type metadata for TextureCache.CacheEntry);
      v19 = 0;
      v20 = 0;
      v21 = xmmword_1B22A9FD0;
      v22 = 0uLL;
    }
    else
    {
      sub_1B1B9C128((uint64_t)v35, (uint64_t)v37);
      sub_1B1FAE9A8(v37, (uint64_t)v35);
      v15 = v36;
      sub_1B1FAAB78((uint64_t)v35);
      if (v15)
      {
LABEL_8:
        os_unfair_lock_lock(*(os_unfair_lock_t *)(v6 + 48));
        sub_1B1792810(a1, (uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for TextureCache.TextureKey);
        v17 = sub_1B1E8DEE0(v35, (uint64_t)v14);
        if (*(unsigned __int8 *)(v18 + 152) == 255)
        {
          ((void (*)(id *, _QWORD))v17)(v35, 0);
          v19 = 0;
          v33 = 0u;
          v34 = xmmword_1B22A9FD0;
          v31 = 0u;
          v32 = 0u;
          v29 = 0u;
          v30 = 0u;
          v28 = 0u;
        }
        else
        {
          sub_1B1FA99D0(v38);
          v33 = v38[0];
          v34 = v38[1];
          v31 = v38[3];
          v32 = v38[2];
          v29 = v38[5];
          v30 = v38[4];
          v28 = v38[6];
          v19 = v39;
          ((void (*)(id *, _QWORD))v17)(v35, 0);
        }
        sub_1B1A04628((uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for TextureCache.TextureKey);
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v6 + 48));
        sub_1B1FAE9DC((uint64_t)v37);
        v20 = 0;
        v22 = v33;
        v21 = v34;
        v24 = v31;
        v23 = v32;
        v26 = v29;
        v25 = v30;
        v27 = v28;
        goto LABEL_15;
      }
      if ((a2 & 1) != 0 && (a3 & 1) != 0)
      {
        sub_1B1FAE9A8(v37, (uint64_t)v35);
        if (v36)
        {
          sub_1B1FAAB78((uint64_t)v35);
          sub_1B2229688();
          __break(1u);
          return;
        }
        v16 = v35[0];
        sub_1B2228EFC();

        goto LABEL_8;
      }
      sub_1B1FAE9DC((uint64_t)v37);
      v19 = 0;
      v21 = xmmword_1B22A9FD0;
      v22 = 0uLL;
      v20 = 1;
    }
    v23 = 0uLL;
    v24 = 0uLL;
    v25 = 0uLL;
    v26 = 0uLL;
    v27 = 0uLL;
LABEL_15:
    *(_OWORD *)a4 = v22;
    *(_OWORD *)(a4 + 16) = v21;
    *(_OWORD *)(a4 + 32) = v23;
    *(_OWORD *)(a4 + 48) = v24;
    *(_OWORD *)(a4 + 64) = v25;
    *(_OWORD *)(a4 + 80) = v26;
    *(_OWORD *)(a4 + 96) = v27;
    *(_QWORD *)(a4 + 112) = v19;
    *(_BYTE *)(a4 + 120) = v20;
  }
}

void sub_1B1FAD0C0(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v16;
  unint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  char v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  _OWORD v28[9];
  uint64_t v29;
  char v30;
  int v31;
  int v32;

  v31 = a2;
  v32 = a3;
  v27 = a5;
  v7 = type metadata accessor for TextureCache.TextureKey();
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (unsigned __int8 *)&v26 - v13;
  os_unfair_lock_lock(*(os_unfair_lock_t *)(a1 + 48));
  sub_1B1792810(a4, (uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for TextureCache.TextureKey);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)&v28[0] = *(_QWORD *)(a1 + 72);
  v16 = *(_QWORD *)&v28[0];
  *(_QWORD *)(a1 + 72) = 0x8000000000000000;
  v17 = sub_1B1DC457C(v14);
  v19 = v18;
  v20 = *(_QWORD *)(v16 + 16) + ((v18 & 1) == 0);
  if (*(_QWORD *)(v16 + 24) >= v20)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_1B1EB23D8();
      v16 = *(_QWORD *)&v28[0];
    }
  }
  else
  {
    sub_1B1EA28B8(v20, isUniquelyReferenced_nonNull_native);
    v16 = *(_QWORD *)&v28[0];
    v21 = sub_1B1DC457C(v14);
    if ((v19 & 1) != (v22 & 1))
    {
      sub_1B2229FC4();
      __break(1u);
      return;
    }
    v17 = v21;
  }
  v23 = v32;
  v24 = v27;
  *(_QWORD *)(a1 + 72) = v16;
  swift_bridgeObjectRelease();
  v25 = *(_QWORD **)(a1 + 72);
  if ((v19 & 1) == 0)
  {
    v29 = 0;
    memset(v28, 0, sizeof(v28));
    v30 = 3;
    sub_1B1792810((uint64_t)v14, (uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for TextureCache.TextureKey);
    sub_1B1EB4580(v17, (uint64_t)v10, (uint64_t)v28, v25);
  }
  sub_1B1FAD2D0(v25[7] + 160 * v17, v31 & 1, v23 & 1, v24);
  sub_1B1A04628((uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for TextureCache.TextureKey);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(a1 + 48));
}

uint64_t sub_1B1FAD2D0@<X0>(uint64_t a1@<X0>, char a2@<W1>, char a3@<W2>, uint64_t a4@<X8>)
{
  char v8;
  uint64_t result;
  NSObject *v10;
  _QWORD v11[19];
  char v12;

  sub_1B1FA962C();
  if ((v8 & 1) != 0)
    return sub_1B1C1AA1C(a1, a4);
  if ((a2 & 1) != 0)
  {
    v10 = dispatch_group_create();
    dispatch_group_enter(v10);
    result = sub_1B1FAAB78(a1);
    *(_QWORD *)a1 = v10;
    *(_QWORD *)(a1 + 8) = (a3 & 1) == 0;
    *(_BYTE *)(a1 + 152) = 0;
  }
  else
  {
    sub_1B1FAE9A8((uint64_t *)a1, (uint64_t)v11);
    if (v12 == 2)
      return swift_willThrow();
    result = sub_1B1FAAB78((uint64_t)v11);
  }
  *(_QWORD *)(a4 + 144) = 0;
  *(_OWORD *)(a4 + 112) = 0u;
  *(_OWORD *)(a4 + 128) = 0u;
  *(_OWORD *)(a4 + 80) = 0u;
  *(_OWORD *)(a4 + 96) = 0u;
  *(_OWORD *)(a4 + 48) = 0u;
  *(_OWORD *)(a4 + 64) = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_OWORD *)a4 = 0u;
  *(_BYTE *)(a4 + 152) = -1;
  return result;
}

_QWORD *sub_1B1FAD3B4(void (*a1)(_QWORD *__return_ptr))
{
  _QWORD v2[15];

  a1(v2);
  return sub_1B1E6E004(v2, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1FAEA08);
}

uint64_t sub_1B1FAD418@<X0>(char a1@<W0>, uint64_t *a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, int a6@<W6>, _QWORD *a7@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 *v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  char v32;
  uint64_t v33;
  __int16 v34;
  uint64_t v35;
  unsigned __int8 *v36;
  _BOOL4 v38;
  _QWORD *v39;
  uint64_t result;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  char v47;
  unsigned __int8 v48;
  uint64_t v49;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v51;
  uint64_t v52;
  unint64_t v53;
  char v54;
  char v55;
  uint64_t v56;
  unint64_t v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  void (*v61)(__int128 *__return_ptr, uint64_t);
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  unsigned __int8 v65;
  unint64_t v66;
  _QWORD *v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  id v71;
  unsigned __int8 v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  uint64_t v78;
  void (*v79)(_QWORD *);
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  void (*v86)(_QWORD *);
  uint64_t v87;
  int v88;
  void (*v89)(_QWORD **, _QWORD);
  uint64_t v90;
  unsigned __int8 v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unsigned __int8 *v101;
  void *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  _QWORD *v109;
  __int128 v110;
  __int128 v111;
  uint64_t v112;
  uint64_t v113;
  _QWORD *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  int v119;
  _QWORD *v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  char v135;
  __int128 v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  uint64_t v149;
  uint64_t v150;

  v115 = a3;
  v118 = a5;
  v119 = a6;
  v116 = a4;
  v109 = a7;
  LODWORD(v113) = a1 & 1;
  v112 = sub_1B2228110();
  v9 = *(_QWORD *)(v112 - 8);
  MEMORY[0x1E0C80A78](v112, v10);
  v12 = (char *)&v96 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for TextureCache.TextureKey();
  v106 = *(_QWORD *)(v13 - 8);
  v14 = *(_QWORD *)(v106 + 64);
  MEMORY[0x1E0C80A78](v13, v15);
  v104 = (uint64_t)&v96 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16, v17);
  v103 = (uint64_t)&v96 - v18;
  MEMORY[0x1E0C80A78](v19, v20);
  v108 = (uint64_t)&v96 - v21;
  MEMORY[0x1E0C80A78](v22, v23);
  v105 = (uint64_t)&v96 - v24;
  MEMORY[0x1E0C80A78](v25, v26);
  v28 = (unsigned __int8 *)&v96 - v27;
  sub_1B2227FE4();
  v29 = *a2;
  v107 = v14;
  if ((a1 & 1) == 0)
  {
    v30 = v29 & 0x9C;
LABEL_5:
    v31 = *(_OWORD *)(a2 + 1);
    v32 = *((_BYTE *)a2 + 24);
    v110 = *((_OWORD *)a2 + 2);
    v111 = v31;
    v33 = a2[6];
    v34 = *((_WORD *)a2 + 28);
    goto LABEL_7;
  }
  if ((v29 & 0x100) == 0)
  {
    v30 = v29 & 0x1FC;
    goto LABEL_5;
  }
  v33 = 0;
  v30 = v29 & 0x104;
  v110 = 0u;
  v111 = 0u;
  v34 = 768;
  v32 = -2;
LABEL_7:
  v35 = v112;
  *v28 = v113;
  (*(void (**)(unsigned __int8 *, char *, uint64_t))(v9 + 32))(&v28[*(int *)(v13 + 20)], v12, v35);
  v36 = &v28[*(int *)(v13 + 24)];
  *(_QWORD *)v36 = v30;
  *(_OWORD *)(v36 + 8) = v111;
  v36[24] = v32;
  *((_OWORD *)v36 + 2) = v110;
  *((_QWORD *)v36 + 6) = v33;
  *((_WORD *)v36 + 28) = v34;
  v38 = v119 != 2 || (v116 | v115 | v118) != 0;
  v39 = v114;
  sub_1B1FACDE0((uint64_t)v28, v38, v119 != 1, (uint64_t)&v120);
  if (v39)
    return sub_1B1A04628((uint64_t)v28, (uint64_t (*)(_QWORD))type metadata accessor for TextureCache.TextureKey);
  v41 = v123;
  v42 = v125;
  v43 = v131;
  v44 = v132;
  v45 = v133;
  v46 = v134;
  if (v123 >> 1 != 0xFFFFFFFF || v125 >> 17 || HIDWORD(v133))
  {
    v104 = v130;
    v105 = v129;
    v106 = v128;
    v107 = v127;
    *(_QWORD *)&v110 = v126;
    *(_QWORD *)&v111 = v124;
    v112 = v122;
    v113 = v121;
    v114 = v120;
LABEL_52:
    result = sub_1B1A04628((uint64_t)v28, (uint64_t (*)(_QWORD))type metadata accessor for TextureCache.TextureKey);
    goto LABEL_53;
  }
  v47 = v135;
  v48 = v119;
  if (v119 != 1)
  {
    v49 = v117;
    if ((v135 & 1) != 0)
    {
      if (!(_BYTE)v119)
      {
        sub_1B1FAC328(v28);
        sub_1B1FACDE0((uint64_t)v28, 0, 1, (uint64_t)&v120);
        v113 = v121;
        v114 = v120;
        v41 = v123;
        v112 = v122;
        v42 = v125;
        *(_QWORD *)&v111 = v124;
        *(_QWORD *)&v110 = v126;
        v106 = v128;
        v107 = v127;
        v43 = v131;
        v104 = v130;
        v105 = v129;
        v44 = v132;
        v45 = v133;
        v46 = v134;
        result = sub_1B1A04628((uint64_t)v28, (uint64_t (*)(_QWORD))type metadata accessor for TextureCache.TextureKey);
LABEL_53:
        v92 = v109;
        v93 = v113;
        *v109 = v114;
        v92[1] = v93;
        v92[2] = v112;
        v92[3] = v41;
        v92[4] = v111;
        v92[5] = v42;
        v94 = v107;
        v92[6] = v110;
        v92[7] = v94;
        v95 = v105;
        v92[8] = v106;
        v92[9] = v95;
        v92[10] = v104;
        v92[11] = v43;
        v92[12] = v44;
        v92[13] = v45;
        v92[14] = v46;
        return result;
      }
    }
    else
    {
      v102 = 0;
      v61 = (void (*)(__int128 *__return_ptr, uint64_t))v115;
      v59 = v116;
      if (!(_BYTE)v119)
      {
LABEL_40:
        LODWORD(v114) = v48;
        swift_unownedRetainStrong();
        v63 = v118;
        sub_1B1FAE868((uint64_t)v61, v59, v118, v48);
        swift_unownedRetain();
        swift_unownedRetain();
        sub_1B1FAE868((uint64_t)v61, v59, v63, v48);
        swift_unownedRelease();
        swift_unownedRetain();
        swift_release();
        v101 = v28;
        v64 = v105;
        sub_1B1792810((uint64_t)v28, v105, (uint64_t (*)(_QWORD))type metadata accessor for TextureCache.TextureKey);
        sub_1B1792810(v64, v108, (uint64_t (*)(_QWORD))type metadata accessor for TextureCache.TextureKey);
        v65 = v48;
        v66 = (*(unsigned __int8 *)(v106 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v106 + 80);
        v67 = (_QWORD *)swift_allocObject();
        v67[2] = v61;
        v67[3] = v59;
        v67[4] = v49;
        sub_1B1A025EC(v64, (uint64_t)v67 + v66, (uint64_t (*)(_QWORD))type metadata accessor for TextureCache.TextureKey);
        if ((_DWORD)v114 == 1)
        {
          v68 = *(void **)(v49 + 56);
          v69 = swift_allocObject();
          *(_QWORD *)(v69 + 16) = sub_1B1FAE914;
          *(_QWORD *)(v69 + 24) = v67;
          v70 = v118;
          sub_1B1FAE868((uint64_t)v61, v59, v118, v65);
          swift_unownedRetain();
          v71 = v68;
          swift_retain();
          sub_1B1E8CA40((uint64_t)sub_1B1FAE9A0, v69);
          swift_release();

          swift_release();
          v113 = 0;
          v114 = 0;
          v112 = 0;
          *(_QWORD *)&v111 = 0;
          v72 = v65;
          v73 = v59;
          v97 = 0;
          v98 = 0;
          *(_QWORD *)&v110 = 0;
          v106 = 0;
          v107 = 0;
          v104 = 0;
          v105 = 0;
          v74 = (uint64_t)v61;
          v99 = 0;
          v100 = 0;
          v75 = v70;
          v45 = 0;
          v41 = 0x1FFFFFFFELL;
        }
        else
        {
          sub_1B1FAE868((uint64_t)v61, v59, v118, v65);
          v76 = swift_unownedRetain();
          v77 = v102;
          v61(&v136, v76);
          v102 = v77;
          if (v77)
          {
            swift_unownedRetainStrong();
            os_unfair_lock_lock(*(os_unfair_lock_t *)(v49 + 48));
            v78 = v104;
            sub_1B1792810(v108, v104, (uint64_t (*)(_QWORD))type metadata accessor for TextureCache.TextureKey);
            v79 = sub_1B1E8DEE0(&v120, v78);
            if (*(unsigned __int8 *)(v80 + 152) != 255)
              sub_1B1FAA3CC(v102);
            ((void (*)(_QWORD **, _QWORD))v79)(&v120, 0);
            sub_1B1A04628(v104, (uint64_t (*)(_QWORD))type metadata accessor for TextureCache.TextureKey);
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v49 + 48));
            swift_release();
            swift_willThrow();
            swift_release();
            v90 = v118;
            sub_1B1FAE964((uint64_t)v61, v59, v118, v65);
            swift_unownedRelease();
            sub_1B1A04628(v108, (uint64_t (*)(_QWORD))type metadata accessor for TextureCache.TextureKey);
            swift_unownedRelease();
            sub_1B1FAE964((uint64_t)v61, v59, v90, v65);
            v28 = v101;
            return sub_1B1A04628((uint64_t)v28, (uint64_t (*)(_QWORD))type metadata accessor for TextureCache.TextureKey);
          }
          v113 = *((_QWORD *)&v136 + 1);
          v114 = (_QWORD *)v136;
          v41 = v138;
          v112 = v137;
          v81 = v140;
          *(_QWORD *)&v111 = v139;
          *(_QWORD *)&v110 = v141;
          v106 = v143;
          v107 = v142;
          v104 = v145;
          v105 = v144;
          v82 = v147;
          v100 = v146;
          v83 = v49;
          v45 = v148;
          v84 = v149;
          swift_unownedRetainStrong();
          os_unfair_lock_lock(*(os_unfair_lock_t *)(v83 + 48));
          v85 = v103;
          sub_1B1792810(v108, v103, (uint64_t (*)(_QWORD))type metadata accessor for TextureCache.TextureKey);
          v86 = sub_1B1E8DEE0(&v120, v85);
          v88 = *(unsigned __int8 *)(v87 + 152);
          v98 = v84;
          v99 = v82;
          v97 = v81;
          if (v88 == 255)
          {
            ((void (*)(_QWORD **, _QWORD))v86)(&v120, 0);
          }
          else
          {
            v89 = (void (*)(_QWORD **, _QWORD))v86;
            sub_1B1FAA1A4(&v136);
            v89(&v120, 0);
          }
          sub_1B1A04628(v103, (uint64_t (*)(_QWORD))type metadata accessor for TextureCache.TextureKey);
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v117 + 48));
          swift_release();
          swift_release();
          v72 = v119;
          v75 = v118;
          v74 = v115;
          v73 = v116;
        }
        v91 = v72;
        sub_1B1FAE964(v74, v73, v75, v72);
        swift_unownedRelease();
        sub_1B1A04628(v108, (uint64_t (*)(_QWORD))type metadata accessor for TextureCache.TextureKey);
        swift_unownedRelease();
        sub_1B1FAE964(v74, v73, v75, v91);
        v43 = v100;
        v28 = v101;
        v46 = v98;
        v44 = v99;
        v42 = v97;
        goto LABEL_52;
      }
    }
    goto LABEL_25;
  }
  v102 = 0;
  v49 = v117;
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v117 + 48));
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v120 = *(_QWORD **)(v49 + 64);
  v51 = v120;
  *(_QWORD *)(v49 + 64) = 0x8000000000000000;
  v52 = v118;
  v53 = sub_1B1DC3AC8(v118);
  v55 = v54;
  v56 = v51[2] + ((v54 & 1) == 0);
  if (v51[3] >= v56)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      sub_1B1EB2224();
LABEL_28:
    v59 = v116;
    v48 = v119;
    if ((v55 & 1) != 0)
      v60 = *(_QWORD *)(v120[7] + 8 * v53);
    else
      v60 = 0;
    v150 = v60;
    sub_1B1FA9470((uint64_t)v28);
    if (v150)
    {
      v62 = v120;
      if ((v55 & 1) != 0)
        *(_QWORD *)(v120[7] + 8 * v53) = v150;
      else
        sub_1B1EB3340(v53, v118, v150, v120);
    }
    else
    {
      v62 = v120;
      if ((v55 & 1) != 0)
        sub_1B1EA4F70(v53, (uint64_t)v120);
    }
    *(_QWORD *)(v49 + 64) = v62;
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v49 + 48));
    v61 = (void (*)(__int128 *__return_ptr, uint64_t))v115;
    if ((v47 & 1) == 0)
      goto LABEL_40;
LABEL_25:
    v113 = 0;
    v114 = 0;
    v112 = 0;
    *(_QWORD *)&v111 = 0;
    v42 = 0;
    *(_QWORD *)&v110 = 0;
    v106 = 0;
    v107 = 0;
    v104 = 0;
    v105 = 0;
    v43 = 0;
    v44 = 0;
    v45 = 0;
    v46 = 0;
    v41 = 0x1FFFFFFFELL;
    goto LABEL_52;
  }
  sub_1B1EA2608(v56, isUniquelyReferenced_nonNull_native);
  v57 = sub_1B1DC3AC8(v52);
  if ((v55 & 1) == (v58 & 1))
  {
    v53 = v57;
    goto LABEL_28;
  }
  result = sub_1B2229FC4();
  __break(1u);
  return result;
}

uint64_t sub_1B1FADDB8@<X0>(void (*a1)(__int128 *__return_ptr, double)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  void *v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  char *v17;
  void (*v18)(_QWORD *);
  uint64_t v19;
  void (*v21)(_QWORD *);
  uint64_t v22;
  _QWORD v24[4];
  __int128 v25[7];

  v9 = type metadata accessor for TextureCache.TextureKey();
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v24[-1] - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x1E0C80A78](v13, v14);
  v17 = (char *)&v24[-1] - v16;
  a1(v25, v15);
  if (v4)
  {
    swift_unownedRetainStrong();
    os_unfair_lock_lock(*(os_unfair_lock_t *)(a2 + 48));
    sub_1B1792810(a3, (uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for TextureCache.TextureKey);
    v18 = sub_1B1E8DEE0(v24, (uint64_t)v12);
    if (*(unsigned __int8 *)(v19 + 152) != 255)
      sub_1B1FAA3CC(v4);
    ((void (*)(_QWORD *, _QWORD))v18)(v24, 0);
    sub_1B1A04628((uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for TextureCache.TextureKey);
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(a2 + 48));
    swift_release();
    return swift_willThrow();
  }
  else
  {
    swift_unownedRetainStrong();
    os_unfair_lock_lock(*(os_unfair_lock_t *)(a2 + 48));
    sub_1B1792810(a3, (uint64_t)v17, (uint64_t (*)(_QWORD))type metadata accessor for TextureCache.TextureKey);
    v21 = sub_1B1E8DEE0(v24, (uint64_t)v17);
    if (*(unsigned __int8 *)(v22 + 152) != 255)
      sub_1B1FAA1A4(v25);
    ((void (*)(_QWORD *, _QWORD))v21)(v24, 0);
    sub_1B1A04628((uint64_t)v17, (uint64_t (*)(_QWORD))type metadata accessor for TextureCache.TextureKey);
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(a2 + 48));
    swift_release();
    return sub_1B1FAEAA4(v25, a4);
  }
}

BOOL sub_1B1FADF80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23[2];

  v23[0] = a2;
  v23[1] = a3;
  v4 = sub_1B2228110();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1B1FAEDA0(0, (unint64_t *)&unk_1EEF61A28);
  v10 = v9;
  MEMORY[0x1E0C80A78](v9, v11);
  v13 = (char *)v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)v23 - v16;
  v19 = (uint64_t)v23 + *(int *)(v18 + 48) - v16;
  sub_1B1792810(a1, (uint64_t)v23 - v16, (uint64_t (*)(_QWORD))type metadata accessor for TextureCache.TextureKey);
  sub_1B1C1AA1C(v23[0], v19);
  v20 = (uint64_t)&v13[*(int *)(v10 + 48)];
  sub_1B1792810((uint64_t)v17, (uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for TextureCache.TextureKey);
  sub_1B1C1AA1C(v19, v20);
  v21 = type metadata accessor for TextureCache.TextureKey();
  (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v8, &v13[*(int *)(v21 + 20)], v4);
  sub_1B1A04628((uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for TextureCache.TextureKey);
  sub_1B19E52CC((unint64_t *)&qword_1EEF5D850, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], MEMORY[0x1E0CB0028]);
  LOBYTE(v19) = sub_1B22286E0();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  sub_1B1FAEE08((uint64_t)v17);
  sub_1B1FAE9DC(v20);
  return (v19 & 1) == 0;
}

id sub_1B1FAE144()
{
  id result;

  result = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB3740]), sel_init);
  qword_1ED4BF540 = (uint64_t)result;
  return result;
}

_QWORD *sub_1B1FAE174()
{
  _QWORD *result;

  result = sub_1B1B976A4(MEMORY[0x1E0DEE9D8]);
  off_1ED4BF528 = result;
  return result;
}

void *sub_1B1FAE198(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1FAE73C(a1, a2, a3, a4, sub_1B1BA1E3C);
}

void *sub_1B1FAE1A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1FAE73C(a1, a2, a3, a4, sub_1B1BA218C);
}

void *sub_1B1FAE1B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1FAE73C(a1, a2, a3, a4, sub_1B1BA1B14);
}

void sub_1B1FAE1BC(unsigned __int8 a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unsigned __int8 a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v14;
  unint64_t v15;
  char v16;
  __int128 *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  os_unfair_lock_s *v31;
  os_unfair_lock_s *v32;
  char isUniquelyReferenced_nonNull_native;
  char v34;
  uint64_t v35;
  char v36;
  char v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  char v47;
  char v48;
  __int16 v49;
  __int16 v50;
  __int16 v51;
  __int16 v52;
  __int128 v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  __int16 v57;
  char v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  int v63;
  __int128 v64;
  uint64_t v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;

  os_unfair_lock_lock(*(os_unfair_lock_t *)(a3 + 48));
  v14 = *(_QWORD *)(a3 + 136);
  if (*(_QWORD *)(v14 + 16) && (v15 = sub_1B1DC4510(a1, a2), (v16 & 1) != 0))
  {
    v17 = (__int128 *)(*(_QWORD *)(v14 + 56) + (v15 << 7));
    v19 = v17[2];
    v18 = v17[3];
    v20 = v17[1];
    v66 = *v17;
    v67 = v20;
    v68 = v19;
    v69 = v18;
    v22 = v17[6];
    v21 = v17[7];
    v23 = v17[5];
    v70 = v17[4];
    v71 = v23;
    v72 = v22;
    v73 = v21;
    v25 = *((_QWORD *)&v66 + 1);
    v24 = v66;
    v26 = v67;
    v27 = BYTE8(v67);
    v51 = WORD1(v68);
    v52 = v68;
    v49 = WORD3(v68);
    v50 = WORD2(v68);
    v47 = BYTE9(v68);
    v48 = BYTE8(v68);
    v46 = BYTE10(v68);
    v44 = *((_QWORD *)&v69 + 1);
    v45 = v69;
    v42 = *((_QWORD *)&v70 + 1);
    v43 = v70;
    v40 = *((_QWORD *)&v23 + 1);
    v41 = v23;
    v39 = v22;
    v37 = BYTE9(v22);
    v38 = BYTE8(v22);
    v36 = BYTE10(v22);
    v28 = BYTE11(v22);
    v29 = *((_QWORD *)&v21 + 1);
    v30 = v21;
    v31 = *(os_unfair_lock_s **)(a3 + 48);
    sub_1B1CC6C0C((uint64_t)&v66);
    v32 = v31;
  }
  else
  {
    sub_1B1D9A3D0(a4, a5, a6, (uint64_t)&v66);
    v35 = a2;
    v34 = a1;
    v25 = *((_QWORD *)&v66 + 1);
    v24 = v66;
    v26 = v67;
    v27 = BYTE8(v67);
    v28 = BYTE11(v72);
    v29 = *((_QWORD *)&v73 + 1);
    v30 = v73;
    v51 = WORD1(v68);
    v52 = v68;
    v49 = WORD3(v68);
    v50 = WORD2(v68);
    v47 = BYTE9(v68);
    v48 = BYTE8(v68);
    v46 = BYTE10(v68);
    v44 = *((_QWORD *)&v69 + 1);
    v45 = v69;
    v42 = *((_QWORD *)&v70 + 1);
    v43 = v70;
    v40 = *((_QWORD *)&v71 + 1);
    v41 = v71;
    v39 = v72;
    v37 = BYTE9(v72);
    v38 = BYTE8(v72);
    v36 = BYTE10(v72);
    sub_1B1CC6C0C((uint64_t)&v66);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v65 = *(_QWORD *)(a3 + 136);
    *(_QWORD *)(a3 + 136) = 0x8000000000000000;
    v53 = v66;
    v54 = v67;
    v55 = BYTE8(v67);
    v56 = v68;
    v57 = WORD4(v68);
    v58 = BYTE10(v68);
    v59 = v69;
    v60 = v70;
    v61 = v71;
    v62 = v72;
    v63 = DWORD2(v72);
    v64 = v73;
    sub_1B1B87BAC((uint64_t *)&v53, v34, v35, isUniquelyReferenced_nonNull_native);
    *(_QWORD *)(a3 + 136) = v65;
    swift_bridgeObjectRelease();
    v32 = *(os_unfair_lock_s **)(a3 + 48);
  }
  os_unfair_lock_unlock(v32);
  *(_QWORD *)a7 = v24;
  *(_QWORD *)(a7 + 8) = v25;
  *(_QWORD *)(a7 + 16) = v26;
  *(_BYTE *)(a7 + 24) = v27;
  *(_WORD *)(a7 + 32) = v52;
  *(_WORD *)(a7 + 34) = v51;
  *(_WORD *)(a7 + 36) = v50;
  *(_WORD *)(a7 + 38) = v49;
  *(_BYTE *)(a7 + 40) = v48;
  *(_BYTE *)(a7 + 41) = v47;
  *(_BYTE *)(a7 + 42) = v46;
  *(_QWORD *)(a7 + 48) = v45;
  *(_QWORD *)(a7 + 56) = v44;
  *(_QWORD *)(a7 + 64) = v43;
  *(_QWORD *)(a7 + 72) = v42;
  *(_QWORD *)(a7 + 80) = v41;
  *(_QWORD *)(a7 + 88) = v40;
  *(_QWORD *)(a7 + 96) = v39;
  *(_BYTE *)(a7 + 104) = v38;
  *(_BYTE *)(a7 + 105) = v37;
  *(_BYTE *)(a7 + 106) = v36;
  *(_BYTE *)(a7 + 107) = v28;
  *(_QWORD *)(a7 + 112) = v30;
  *(_QWORD *)(a7 + 120) = v29;
}

void *sub_1B1FAE50C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1FAE73C(a1, a2, a3, a4, (uint64_t (*)(uint64_t))sub_1B1BA76E4);
}

void *sub_1B1FAE518(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1FAE73C(a1, a2, a3, a4, (uint64_t (*)(uint64_t))sub_1B1BA760C);
}

void *sub_1B1FAE524(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1FAE73C(a1, a2, a3, a4, sub_1B1BA1E64);
}

uint64_t sub_1B1FAE530(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  void *v9;
  uint64_t v10;
  void *v11;
  char isUniquelyReferenced_nonNull_native;
  uint64_t result;
  uint64_t v14;
  _QWORD v15[3];
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int16 v20;

  os_unfair_lock_lock(*(os_unfair_lock_t *)(a3 + 48));
  v6 = *(_QWORD *)(a3 + 128);
  if (*(_QWORD *)(v6 + 16))
  {
    swift_bridgeObjectRetain();
    v7 = sub_1B1DC3B00(a1, a2);
    if ((v8 & 1) != 0)
    {
      v9 = *(void **)(*(_QWORD *)(v6 + 56) + 8 * v7);
      swift_unknownObjectRetain();
LABEL_7:
      swift_bridgeObjectRelease();
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(a3 + 48));
      return (uint64_t)v9;
    }
    swift_bridgeObjectRelease();
  }
  v15[1] = 0;
  v15[2] = 0;
  v15[0] = 2;
  v16 = -2;
  v18 = 0;
  v19 = 0;
  v17 = 0;
  v20 = 768;
  v10 = sub_1B1BA7104(0x46445242584656, 0xE700000000000000, (uint64_t)v15);
  if (v10)
  {
    v9 = (void *)v10;
    v11 = (void *)sub_1B2228728();
    objc_msgSend(v9, sel_setLabel_, v11);

    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v14 = *(_QWORD *)(a3 + 128);
    *(_QWORD *)(a3 + 128) = 0x8000000000000000;
    sub_1B1B84668((uint64_t)v9, a1, a2, isUniquelyReferenced_nonNull_native);
    *(_QWORD *)(a3 + 128) = v14;
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  sub_1B2229430();
  swift_bridgeObjectRelease();
  result = sub_1B2229688();
  __break(1u);
  return result;
}

void *sub_1B1FAE700(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1FAE73C(a1, a2, a3, a4, sub_1B1BA1E84);
}

void *sub_1B1FAE70C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1FAE73C(a1, a2, a3, a4, sub_1B1BA21B4);
}

void *sub_1B1FAE718(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1FAE73C(a1, a2, a3, a4, sub_1B1BA24C0);
}

void *sub_1B1FAE724(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1FAE73C(a1, a2, a3, a4, sub_1B1BA27EC);
}

void *sub_1B1FAE730(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1FAE73C(a1, a2, a3, a4, sub_1B1BA1B3C);
}

void *sub_1B1FAE73C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t))
{
  uint64_t v10;
  uint64_t v11;
  char v12;
  void *v13;
  void *v14;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v17;

  os_unfair_lock_lock(*(os_unfair_lock_t *)(a3 + 48));
  v10 = *(_QWORD *)(a3 + 128);
  if (!*(_QWORD *)(v10 + 16))
    goto LABEL_5;
  swift_bridgeObjectRetain();
  v11 = sub_1B1DC3B00(a1, a2);
  if ((v12 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_5:
    v13 = (void *)a5(a4);
    v14 = (void *)sub_1B2228728();
    objc_msgSend(v13, sel_setLabel_, v14);

    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v17 = *(_QWORD *)(a3 + 128);
    *(_QWORD *)(a3 + 128) = 0x8000000000000000;
    sub_1B1B84668((uint64_t)v13, a1, a2, isUniquelyReferenced_nonNull_native);
    *(_QWORD *)(a3 + 128) = v17;
    swift_bridgeObjectRelease();
    goto LABEL_6;
  }
  v13 = *(void **)(*(_QWORD *)(v10 + 56) + 8 * v11);
  swift_unknownObjectRetain();
LABEL_6:
  swift_bridgeObjectRelease();
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(a3 + 48));
  return v13;
}

uint64_t sub_1B1FAE868(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  uint64_t result;

  if (a4 <= 1u)
    return swift_retain();
  return result;
}

uint64_t sub_1B1FAE880()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = type metadata accessor for TextureCache.TextureKey();
  v2 = *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  v3 = (v2 + 40) & ~v2;
  swift_release();
  swift_unownedRelease();
  v4 = v0 + *(int *)(v1 + 20) + v3;
  v5 = sub_1B2228110();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  return swift_deallocObject();
}

uint64_t sub_1B1FAE914@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for TextureCache.TextureKey() - 8) + 80);
  return sub_1B1FADDB8(*(void (**)(__int128 *__return_ptr, double))(v1 + 16), *(_QWORD *)(v1 + 32), v1 + ((v3 + 40) & ~v3), a1);
}

uint64_t sub_1B1FAE964(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  uint64_t result;

  if (a4 <= 1u)
    return swift_release();
  return result;
}

uint64_t sub_1B1FAE97C()
{
  swift_release();
  return swift_deallocObject();
}

_QWORD *sub_1B1FAE9A0()
{
  uint64_t v0;

  return sub_1B1FAD3B4(*(void (**)(_QWORD *__return_ptr))(v0 + 16));
}

uint64_t sub_1B1FAE9A8(uint64_t *a1, uint64_t a2)
{
  initializeWithCopy for TextureCache.CacheEntry.State(a2, a1);
  return a2;
}

uint64_t sub_1B1FAE9DC(uint64_t a1)
{
  destroy for TextureCache.CacheEntry(a1);
  return a1;
}

uint64_t sub_1B1FAEA08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a14 < 0)
    swift_bridgeObjectRelease();
  return swift_unknownObjectRelease();
}

uint64_t sub_1B1FAEA38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if ((a14 & 0x8000000000000000) == 0)
    return swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t sub_1B1FAEA70(uint64_t a1, uint64_t a2)
{
  assignWithTake for TextureCache.CacheEntry.State(a2, a1);
  return a2;
}

uint64_t sub_1B1FAEAA4(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  v2 = *a1;
  v3 = a1[1];
  v4 = a1[3];
  *(_OWORD *)(a2 + 32) = a1[2];
  *(_OWORD *)(a2 + 48) = v4;
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  v5 = a1[4];
  v6 = a1[5];
  v7 = a1[6];
  *(_QWORD *)(a2 + 112) = *((_QWORD *)a1 + 14);
  *(_OWORD *)(a2 + 80) = v6;
  *(_OWORD *)(a2 + 96) = v7;
  *(_OWORD *)(a2 + 64) = v5;
  return a2;
}

uint64_t sub_1B1FAEAD4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  swift_unknownObjectWeakTakeInit();
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a2 + 8) = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 16) = v4;
  return a2;
}

uint64_t sub_1B1FAEB0C(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  uint64_t v6;

  sub_1B1A02758(0, a3, a4, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a2, a1, v6);
  return a2;
}

uint64_t sub_1B1FAEB64(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  return a1;
}

uint64_t sub_1B1FAEB98(uint64_t a1, uint64_t a2)
{
  initializeWithTake for TextureCache.CacheEntry.State(a2, a1);
  return a2;
}

uint64_t sub_1B1FAEBCC(uint64_t a1, uint64_t a2)
{
  initializeWithTake for TextureCache.WeakStorage(a2, a1);
  return a2;
}

uint64_t sub_1B1FAEC00(uint64_t a1)
{
  destroy for TextureCache.WeakStorage(a1);
  return a1;
}

uint64_t sub_1B1FAEC2C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  swift_unknownObjectWeakCopyInit();
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a2 + 8) = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 16) = v4;
  swift_unknownObjectRetain();
  return a2;
}

uint64_t sub_1B1FAEC68(uint64_t a1)
{
  swift_unknownObjectWeakDestroy();
  swift_unknownObjectRelease();
  return a1;
}

uint64_t sub_1B1FAEC94(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for TextureCache.WeakStorage.CPU(a2, a1);
  return a2;
}

uint64_t sub_1B1FAECC8(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;

  swift_unknownObjectWeakTakeInit();
  *(_QWORD *)(a2 + 8) = *(_QWORD *)(a1 + 8);
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  v4 = *(_OWORD *)(a1 + 56);
  v5 = *(_OWORD *)(a1 + 72);
  v6 = *(_OWORD *)(a1 + 88);
  *(_OWORD *)(a2 + 104) = *(_OWORD *)(a1 + 104);
  *(_OWORD *)(a2 + 88) = v6;
  *(_OWORD *)(a2 + 72) = v5;
  *(_OWORD *)(a2 + 56) = v4;
  *(_QWORD *)(a2 + 120) = *(_QWORD *)(a1 + 120);
  return a2;
}

uint64_t sub_1B1FAED40(uint64_t a1)
{
  destroy for TextureCache.WeakStorage.CPU();
  return a1;
}

uint64_t sub_1B1FAED6C(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for TextureCache.WeakStorage(a2, a1);
  return a2;
}

void sub_1B1FAEDA0(uint64_t a1, unint64_t *a2)
{
  unint64_t TupleTypeMetadata2;
  uint64_t v4;

  if (!*a2)
  {
    type metadata accessor for TextureCache.TextureKey();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v4)
      atomic_store(TupleTypeMetadata2, a2);
  }
}

uint64_t sub_1B1FAEE08(uint64_t a1)
{
  uint64_t v2;

  sub_1B1FAEDA0(0, (unint64_t *)&unk_1EEF61A28);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1B1FAEE54(void *a1)
{
  uint64_t v1;
  _DWORD *v3;
  id v4;
  id v5;
  id v6;
  uint64_t v7;
  id v8;
  id v9;
  id v10;

  v3 = (_DWORD *)swift_slowAlloc();
  *v3 = 0;
  *(_QWORD *)(v1 + 24) = "lock TextureCache";
  *(_QWORD *)(v1 + 32) = 17;
  *(_BYTE *)(v1 + 40) = 2;
  *(_QWORD *)(v1 + 48) = v3;
  v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB3828]), sel_init);
  v5 = objc_msgSend((id)objc_opt_self(), sel_processInfo);
  v6 = objc_msgSend(v5, sel_processorCount);

  objc_msgSend(v4, sel_setMaxConcurrentOperationCount_, v6);
  *(_QWORD *)(v1 + 56) = v4;
  v7 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v1 + 64) = sub_1B1B976C8(MEMORY[0x1E0DEE9D8]);
  *(_QWORD *)(v1 + 72) = sub_1B1B80070(v7);
  *(_QWORD *)(v1 + 128) = sub_1B1B7E998(v7);
  *(_QWORD *)(v1 + 136) = sub_1B1B97790(v7);
  *(_QWORD *)(v1 + 144) = 0;
  *(_QWORD *)(v1 + 16) = a1;
  v8 = objc_allocWithZone(MEMORY[0x1E0CC6B80]);
  swift_unknownObjectRetain();
  v9 = objc_msgSend(v8, sel_init);
  objc_msgSend(v9, sel_setSupportArgumentBuffers_, 1);
  objc_msgSend(v9, sel_setMipFilter_, 2);
  objc_msgSend(v9, sel_setMinFilter_, 1);
  objc_msgSend(v9, sel_setMagFilter_, 1);
  *(_QWORD *)(v1 + 80) = objc_msgSend(a1, sel_newSamplerStateWithDescriptor_, v9);
  objc_msgSend(v9, sel_setMipFilter_, 1);
  *(_QWORD *)(v1 + 96) = objc_msgSend(a1, sel_newSamplerStateWithDescriptor_, v9);
  objc_msgSend(v9, sel_setSAddressMode_, 2);
  *(_QWORD *)(v1 + 112) = objc_msgSend(a1, sel_newSamplerStateWithDescriptor_, v9);
  objc_msgSend(v9, sel_setRAddressMode_, 2);
  objc_msgSend(v9, sel_setTAddressMode_, 2);
  *(_QWORD *)(v1 + 104) = objc_msgSend(a1, sel_newSamplerStateWithDescriptor_, v9);
  objc_msgSend(v9, sel_setMipFilter_, 2);
  *(_QWORD *)(v1 + 88) = objc_msgSend(a1, sel_newSamplerStateWithDescriptor_, v9);
  objc_msgSend(v9, sel_setMipFilter_, 1);
  objc_msgSend(v9, sel_setRAddressMode_, 3);
  objc_msgSend(v9, sel_setSAddressMode_, 3);
  objc_msgSend(v9, sel_setTAddressMode_, 3);
  v10 = objc_msgSend(a1, sel_newSamplerStateWithDescriptor_, v9);

  *(_QWORD *)(v1 + 120) = v10;
  return v1;
}

uint64_t sub_1B1FAF0F4(uint64_t a1)
{
  _QWORD *v2;
  unint64_t v3;
  char v4;
  uint64_t Strong;
  void *v6;
  _BYTE v8[8];
  uint64_t v9;
  char v10;

  if (qword_1ED4BF550 != -1)
    swift_once();
  objc_msgSend((id)qword_1ED4BF540, sel_lock);
  if (qword_1ED4BF538 != -1)
    swift_once();
  v2 = off_1ED4BF528;
  if (!*((_QWORD *)off_1ED4BF528 + 2) || (v3 = sub_1B1DC3AC8(a1), (v4 & 1) == 0))
  {
    v9 = 0;
    v10 = 1;
    sub_1B1A04628((uint64_t)&v9, (uint64_t (*)(_QWORD))sub_1B1FAF280);
LABEL_10:
    type metadata accessor for TextureCache();
    swift_allocObject();
    v6 = (void *)swift_unknownObjectRetain();
    Strong = sub_1B1FAEE54(v6);
    swift_unknownObjectRelease();
    swift_weakInit();
    swift_weakAssign();
    sub_1B1A025EC((uint64_t)v8, (uint64_t)&v9, (uint64_t (*)(_QWORD))sub_1B1FAF2A0);
    v10 = 0;
    sub_1B20E14CC((uint64_t)&v9, a1);
    goto LABEL_11;
  }
  sub_1B1792810(v2[7] + 8 * v3, (uint64_t)&v9, (uint64_t (*)(_QWORD))sub_1B1FAF2A0);
  v10 = 0;
  Strong = swift_weakLoadStrong();
  sub_1B1A04628((uint64_t)&v9, (uint64_t (*)(_QWORD))sub_1B1FAF280);
  if (!Strong)
    goto LABEL_10;
LABEL_11:
  objc_msgSend((id)qword_1ED4BF540, sel_unlock);
  return Strong;
}

void sub_1B1FAF280(uint64_t a1)
{
  sub_1B1B7C554(a1, (unint64_t *)&unk_1ED4BF630, 255, (uint64_t (*)(uint64_t))sub_1B1FAF2A0, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
}

void sub_1B1FAF2A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1B1B7C554(a1, (unint64_t *)&unk_1ED4BF620, a3, (uint64_t (*)(uint64_t))type metadata accessor for TextureCache, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for WeakReference);
}

void sub_1B1FAF2BC(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    sub_1B1FAEDA0(255, a3);
    v4 = sub_1B2229124();
    if (!v5)
      atomic_store(v4, a2);
  }
}

uint64_t sub_1B1FAF310(uint64_t a1, uint64_t a2, unint64_t *a3, unint64_t *a4)
{
  uint64_t v6;

  sub_1B1FAF2BC(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a2, a1, v6);
  return a2;
}

uint64_t destroy for TextureCache.WeakStorage.GPU()
{
  swift_unknownObjectWeakDestroy();
  return swift_unknownObjectRelease();
}

uint64_t initializeWithCopy for TextureCache.WeakStorage.GPU(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  swift_unknownObjectWeakCopyInit();
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v4;
  swift_unknownObjectRetain();
  return a1;
}

uint64_t assignWithCopy for TextureCache.WeakStorage.GPU(uint64_t a1, uint64_t a2)
{
  swift_unknownObjectWeakCopyAssign();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  return a1;
}

uint64_t initializeWithTake for TextureCache.WeakStorage.GPU(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;

  result = swift_unknownObjectWeakTakeInit();
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(result + 16) = v4;
  return result;
}

uint64_t assignWithTake for TextureCache.WeakStorage.GPU(uint64_t a1, uint64_t a2)
{
  swift_unknownObjectWeakTakeAssign();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_unknownObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  return a1;
}

ValueMetadata *type metadata accessor for TextureCache.WeakStorage.GPU()
{
  return &type metadata for TextureCache.WeakStorage.GPU;
}

uint64_t destroy for TextureCache.WeakStorage.CPU()
{
  swift_unknownObjectWeakDestroy();
  swift_unknownObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for TextureCache.WeakStorage.CPU(uint64_t a1, uint64_t a2)
{
  swift_unknownObjectWeakCopyInit();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for TextureCache.WeakStorage.CPU(uint64_t a1, uint64_t a2)
{
  swift_unknownObjectWeakCopyAssign();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
  *(_WORD *)(a1 + 42) = *(_WORD *)(a2 + 42);
  *(_WORD *)(a1 + 44) = *(_WORD *)(a2 + 44);
  *(_WORD *)(a1 + 46) = *(_WORD *)(a2 + 46);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_BYTE *)(a1 + 49) = *(_BYTE *)(a2 + 49);
  *(_BYTE *)(a1 + 50) = *(_BYTE *)(a2 + 50);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  *(_BYTE *)(a1 + 113) = *(_BYTE *)(a2 + 113);
  *(_BYTE *)(a1 + 114) = *(_BYTE *)(a2 + 114);
  *(_BYTE *)(a1 + 115) = *(_BYTE *)(a2 + 115);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for TextureCache.WeakStorage.CPU(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __n128 result;

  v3 = swift_unknownObjectWeakTakeInit();
  *(_QWORD *)(v3 + 8) = *(_QWORD *)(a2 + 8);
  *(_OWORD *)(v3 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(v3 + 32) = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(v3 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(v3 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(v3 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(v3 + 104) = *(_OWORD *)(a2 + 104);
  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(v3 + 40) = result;
  *(_QWORD *)(v3 + 120) = *(_QWORD *)(a2 + 120);
  return result;
}

uint64_t assignWithTake for TextureCache.WeakStorage.CPU(uint64_t a1, uint64_t a2)
{
  swift_unknownObjectWeakTakeAssign();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_WORD *)(a1 + 48) = *(_WORD *)(a2 + 48);
  *(_BYTE *)(a1 + 50) = *(_BYTE *)(a2 + 50);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for TextureCache.WeakStorage.CPU(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 128))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 120);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TextureCache.WeakStorage.CPU(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 120) = 0;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 128) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 120) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 128) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for TextureCache.WeakStorage.CPU()
{
  return &type metadata for TextureCache.WeakStorage.CPU;
}

uint64_t destroy for TextureCache.Texture(uint64_t *a1)
{
  return sub_1B1FAEA08(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11], a1[12], a1[13]);
}

uint64_t *initializeWithCopy for TextureCache.Texture(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  v7 = a2[4];
  v8 = a2[5];
  v9 = a2[6];
  v10 = a2[7];
  v11 = a2[8];
  v13 = a2[9];
  v14 = a2[10];
  v15 = a2[11];
  v16 = a2[12];
  v17 = a2[13];
  v18 = a2[14];
  sub_1B1FAEA38(*a2, v4, v5, v6, v7, v8, v9, v10, v11, v13, v14, v15, v16, v17);
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v7;
  a1[5] = v8;
  a1[6] = v9;
  a1[7] = v10;
  a1[8] = v11;
  a1[9] = v13;
  a1[10] = v14;
  a1[11] = v15;
  a1[12] = v16;
  a1[13] = v17;
  a1[14] = v18;
  return a1;
}

uint64_t assignWithCopy for TextureCache.Texture(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  v7 = a2[4];
  v8 = a2[5];
  v9 = a2[6];
  v10 = a2[7];
  v11 = a2[8];
  v24 = a2[9];
  v25 = a2[10];
  v26 = a2[11];
  v27 = a2[12];
  v28 = a2[13];
  v29 = a2[14];
  sub_1B1FAEA38(*a2, v4, v5, v6, v7, v8, v9, v10, v11, v24, v25, v26, v27, v28);
  v12 = *(_QWORD *)a1;
  v13 = *(_QWORD *)(a1 + 8);
  v14 = *(_QWORD *)(a1 + 16);
  v15 = *(_QWORD *)(a1 + 24);
  v16 = *(_QWORD *)(a1 + 32);
  v17 = *(_QWORD *)(a1 + 40);
  v18 = *(_QWORD *)(a1 + 48);
  v19 = *(_QWORD *)(a1 + 56);
  v20 = *(_OWORD *)(a1 + 64);
  v21 = *(_OWORD *)(a1 + 80);
  v22 = *(_OWORD *)(a1 + 96);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = v9;
  *(_QWORD *)(a1 + 56) = v10;
  *(_QWORD *)(a1 + 64) = v11;
  *(_QWORD *)(a1 + 72) = v24;
  *(_QWORD *)(a1 + 80) = v25;
  *(_QWORD *)(a1 + 88) = v26;
  *(_QWORD *)(a1 + 96) = v27;
  *(_QWORD *)(a1 + 104) = v28;
  *(_QWORD *)(a1 + 112) = v29;
  sub_1B1FAEA08(v12, v13, v14, v15, v16, v17, v18, v19, v20, *((uint64_t *)&v20 + 1), v21, *((uint64_t *)&v21 + 1), v22, *((uint64_t *)&v22 + 1));
  return a1;
}

__n128 initializeWithTake for TextureCPURuntime(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  result = (__n128)a2[4];
  v6 = a2[5];
  v7 = a2[6];
  *(_QWORD *)(a1 + 112) = *((_QWORD *)a2 + 14);
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 96) = v7;
  *(__n128 *)(a1 + 64) = result;
  return result;
}

uint64_t assignWithTake for TextureCache.Texture(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;

  v3 = *(_QWORD *)(a2 + 112);
  v4 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(_QWORD *)(a1 + 40);
  v10 = *(_QWORD *)(a1 + 48);
  v11 = *(_QWORD *)(a1 + 56);
  v12 = *(_OWORD *)(a1 + 64);
  v13 = *(_OWORD *)(a1 + 80);
  v14 = *(_OWORD *)(a1 + 96);
  v15 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v15;
  v16 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v16;
  v17 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v17;
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 112) = v3;
  sub_1B1FAEA08(v4, v6, v5, v7, v8, v9, v10, v11, v12, *((uint64_t *)&v12 + 1), v13, *((uint64_t *)&v13 + 1), v14, *((uint64_t *)&v14 + 1));
  return a1;
}

uint64_t getEnumTagSinglePayload for TextureCache.Texture(uint64_t a1, int a2)
{
  uint64_t v2;
  int v3;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 120))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24) >> 1;
  if (v2 > 0x80000000)
    v3 = ~(_DWORD)v2;
  else
    v3 = -1;
  return (v3 + 1);
}

double storeEnumTagSinglePayload for TextureCache.Texture(uint64_t a1, int a2, int a3)
{
  double result;

  if (a2 < 0)
  {
    result = 0.0;
    *(_OWORD *)(a1 + 104) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_QWORD *)a1 = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(a1 + 120) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
      *(_QWORD *)(a1 + 24) = 2 * -a2;
      result = 0.0;
      *(_OWORD *)(a1 + 32) = 0u;
      *(_OWORD *)(a1 + 48) = 0u;
      *(_OWORD *)(a1 + 64) = 0u;
      *(_OWORD *)(a1 + 80) = 0u;
      *(_OWORD *)(a1 + 96) = 0u;
      *(_QWORD *)(a1 + 112) = 0;
      return result;
    }
    *(_BYTE *)(a1 + 120) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t sub_1B1FAFBAC(uint64_t a1)
{
  return *(_QWORD *)(a1 + 104) >> 63;
}

uint64_t sub_1B1FAFBB8(uint64_t result)
{
  *(_QWORD *)(result + 104) &= ~0x8000000000000000;
  return result;
}

uint64_t sub_1B1FAFBC8(uint64_t result, int a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 40) & 0x1FFFFLL;
  *(_QWORD *)(result + 24) &= 1uLL;
  *(_QWORD *)(result + 40) = v2;
  *(_DWORD *)(result + 108) = a2 << 31;
  return result;
}

ValueMetadata *type metadata accessor for TextureCache.Texture()
{
  return &type metadata for TextureCache.Texture;
}

uint64_t destroy for TextureCache.WeakStorage(uint64_t result)
{
  uint64_t v1;

  v1 = result;
  if (*(_QWORD *)(result + 120))
  {
    swift_unknownObjectWeakDestroy();
    swift_unknownObjectRelease();
    result = swift_bridgeObjectRelease();
  }
  if (*(_QWORD *)(v1 + 136) != 1)
  {
    swift_unknownObjectWeakDestroy();
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for TextureCache.WeakStorage(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;

  if (*(_QWORD *)(a2 + 120))
  {
    swift_unknownObjectWeakCopyInit();
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v4;
    v5 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v5;
    v6 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v6;
    v7 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v7;
  }
  if (*(_QWORD *)(a2 + 136) == 1)
  {
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  }
  else
  {
    swift_unknownObjectWeakCopyInit();
    v8 = *(_QWORD *)(a2 + 144);
    *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
    *(_QWORD *)(a1 + 144) = v8;
    swift_unknownObjectRetain();
  }
  return a1;
}

uint64_t assignWithCopy for TextureCache.WeakStorage(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 *v20;
  __int128 *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;

  v4 = *((_QWORD *)a2 + 15);
  if (*(_QWORD *)(a1 + 120))
  {
    if (v4)
    {
      swift_unknownObjectWeakCopyAssign();
      *(_QWORD *)(a1 + 8) = *((_QWORD *)a2 + 1);
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
      *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 3);
      *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
      *(_WORD *)(a1 + 40) = *((_WORD *)a2 + 20);
      *(_WORD *)(a1 + 42) = *((_WORD *)a2 + 21);
      *(_WORD *)(a1 + 44) = *((_WORD *)a2 + 22);
      *(_WORD *)(a1 + 46) = *((_WORD *)a2 + 23);
      *(_BYTE *)(a1 + 48) = *((_BYTE *)a2 + 48);
      *(_BYTE *)(a1 + 49) = *((_BYTE *)a2 + 49);
      *(_BYTE *)(a1 + 50) = *((_BYTE *)a2 + 50);
      *(_QWORD *)(a1 + 56) = *((_QWORD *)a2 + 7);
      *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 8);
      *(_QWORD *)(a1 + 72) = *((_QWORD *)a2 + 9);
      *(_QWORD *)(a1 + 80) = *((_QWORD *)a2 + 10);
      *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 11);
      *(_QWORD *)(a1 + 96) = *((_QWORD *)a2 + 12);
      *(_QWORD *)(a1 + 104) = *((_QWORD *)a2 + 13);
      *(_BYTE *)(a1 + 112) = *((_BYTE *)a2 + 112);
      *(_BYTE *)(a1 + 113) = *((_BYTE *)a2 + 113);
      *(_BYTE *)(a1 + 114) = *((_BYTE *)a2 + 114);
      *(_BYTE *)(a1 + 115) = *((_BYTE *)a2 + 115);
      *(_QWORD *)(a1 + 120) = *((_QWORD *)a2 + 15);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_1B1FAED40(a1);
      v8 = a2[3];
      v10 = *a2;
      v9 = a2[1];
      *(_OWORD *)(a1 + 32) = a2[2];
      *(_OWORD *)(a1 + 48) = v8;
      *(_OWORD *)a1 = v10;
      *(_OWORD *)(a1 + 16) = v9;
      v11 = a2[7];
      v13 = a2[4];
      v12 = a2[5];
      *(_OWORD *)(a1 + 96) = a2[6];
      *(_OWORD *)(a1 + 112) = v11;
      *(_OWORD *)(a1 + 64) = v13;
      *(_OWORD *)(a1 + 80) = v12;
    }
  }
  else if (v4)
  {
    swift_unknownObjectWeakCopyInit();
    *(_QWORD *)(a1 + 8) = *((_QWORD *)a2 + 1);
    *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
    *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 3);
    *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
    *(_OWORD *)(a1 + 40) = *(__int128 *)((char *)a2 + 40);
    v5 = *(__int128 *)((char *)a2 + 56);
    v6 = *(__int128 *)((char *)a2 + 72);
    v7 = *(__int128 *)((char *)a2 + 88);
    *(_OWORD *)(a1 + 104) = *(__int128 *)((char *)a2 + 104);
    *(_OWORD *)(a1 + 88) = v7;
    *(_OWORD *)(a1 + 72) = v6;
    *(_OWORD *)(a1 + 56) = v5;
    *(_QWORD *)(a1 + 120) = *((_QWORD *)a2 + 15);
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v14 = *a2;
    v15 = a2[1];
    v16 = a2[3];
    *(_OWORD *)(a1 + 32) = a2[2];
    *(_OWORD *)(a1 + 48) = v16;
    *(_OWORD *)a1 = v14;
    *(_OWORD *)(a1 + 16) = v15;
    v17 = a2[4];
    v18 = a2[5];
    v19 = a2[7];
    *(_OWORD *)(a1 + 96) = a2[6];
    *(_OWORD *)(a1 + 112) = v19;
    *(_OWORD *)(a1 + 64) = v17;
    *(_OWORD *)(a1 + 80) = v18;
  }
  v20 = (__int128 *)(a1 + 128);
  v21 = a2 + 8;
  v22 = *((_QWORD *)a2 + 17);
  if (*(_QWORD *)(a1 + 136) == 1)
  {
    if (v22 == 1)
    {
      v23 = *v21;
      *(_QWORD *)(a1 + 144) = *((_QWORD *)a2 + 18);
      *v20 = v23;
    }
    else
    {
      swift_unknownObjectWeakCopyInit();
      *(_QWORD *)(a1 + 136) = *((_QWORD *)a2 + 17);
      *(_QWORD *)(a1 + 144) = *((_QWORD *)a2 + 18);
      swift_unknownObjectRetain();
    }
  }
  else if (v22 == 1)
  {
    sub_1B1FAEC68(a1 + 128);
    v24 = *((_QWORD *)a2 + 18);
    *v20 = *v21;
    *(_QWORD *)(a1 + 144) = v24;
  }
  else
  {
    swift_unknownObjectWeakCopyAssign();
    *(_QWORD *)(a1 + 136) = *((_QWORD *)a2 + 17);
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    *(_QWORD *)(a1 + 144) = *((_QWORD *)a2 + 18);
  }
  return a1;
}

uint64_t initializeWithTake for TextureCache.WeakStorage(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;

  if (*(_QWORD *)(a2 + 120))
  {
    swift_unknownObjectWeakTakeInit();
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v4;
    v5 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v5;
    v6 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v6;
    v7 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v7;
  }
  if (*(_QWORD *)(a2 + 136) == 1)
  {
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  }
  else
  {
    swift_unknownObjectWeakTakeInit();
    v8 = *(_QWORD *)(a2 + 144);
    *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
    *(_QWORD *)(a1 + 144) = v8;
  }
  return a1;
}

uint64_t assignWithTake for TextureCache.WeakStorage(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *(_QWORD *)(a2 + 120);
  if (*(_QWORD *)(a1 + 120))
  {
    if (v4)
    {
      swift_unknownObjectWeakTakeAssign();
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      swift_unknownObjectRelease();
      *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      *(_WORD *)(a1 + 48) = *(_WORD *)(a2 + 48);
      *(_BYTE *)(a1 + 50) = *(_BYTE *)(a2 + 50);
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
      *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
      *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
      *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
      *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
      *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
      swift_bridgeObjectRelease();
      goto LABEL_8;
    }
    sub_1B1FAED40(a1);
  }
  else if (v4)
  {
    swift_unknownObjectWeakTakeInit();
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
    goto LABEL_8;
  }
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  v6 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v6;
  v7 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v7;
  v8 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v8;
LABEL_8:
  v9 = *(_QWORD *)(a2 + 136);
  if (*(_QWORD *)(a1 + 136) != 1)
  {
    if (v9 != 1)
    {
      swift_unknownObjectWeakTakeAssign();
      *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
      swift_unknownObjectRelease();
      *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
      return a1;
    }
    sub_1B1FAEC68(a1 + 128);
    goto LABEL_13;
  }
  if (v9 == 1)
  {
LABEL_13:
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
    return a1;
  }
  swift_unknownObjectWeakTakeInit();
  v10 = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = v10;
  return a1;
}

uint64_t getEnumTagSinglePayload for TextureCache.WeakStorage(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 152))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 120);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for TextureCache.WeakStorage(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 152) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 152) = 0;
    if (a2)
      *(_QWORD *)(result + 120) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for TextureCache.WeakStorage()
{
  return &type metadata for TextureCache.WeakStorage;
}

_QWORD *initializeBufferWithCopyOfBuffer for TextureCache.CacheEntry.Loading(_QWORD *a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  id v5;

  v3 = *(void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  a1[1] = v4;
  v5 = v3;
  return a1;
}

uint64_t assignWithCopy for TextureCache.CacheEntry.Loading(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  return a1;
}

uint64_t assignWithTake for TextureCache.CacheEntry.Loading(uint64_t a1, _QWORD *a2)
{
  void *v4;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = *a2;

  *(_QWORD *)(a1 + 8) = a2[1];
  return a1;
}

ValueMetadata *type metadata accessor for TextureCache.CacheEntry.Loading()
{
  return &type metadata for TextureCache.CacheEntry.Loading;
}

uint64_t storeEnumTagSinglePayload for TextureCache.StorageKind(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1B1FB0454 + 4 * byte_1B22A9FE9[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1B1FB0488 + 4 * byte_1B22A9FE4[v4]))();
}

uint64_t sub_1B1FB0488(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1FB0490(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B1FB0498);
  return result;
}

uint64_t sub_1B1FB04A4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B1FB04ACLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1B1FB04B0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1FB04B8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TextureCache.StorageKind()
{
  return &type metadata for TextureCache.StorageKind;
}

unint64_t sub_1B1FB04D8()
{
  unint64_t result;

  result = qword_1EEF61A48;
  if (!qword_1EEF61A48)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22AA220, &type metadata for TextureCache.StorageKind);
    atomic_store(result, (unint64_t *)&qword_1EEF61A48);
  }
  return result;
}

uint64_t type metadata accessor for ParticleTargetFromPosition.System()
{
  return objc_opt_self();
}

const char *sub_1B1FB0544()
{
  return "ParticleTargetFromPosition";
}

uint64_t sub_1B1FB0558()
{
  sub_1B1FB0A84();
  return sub_1B222A1D4();
}

uint64_t sub_1B1FB0580()
{
  sub_1B1FB0A84();
  return sub_1B222A1E0();
}

uint64_t sub_1B1FB05A8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v9;

  sub_1B1FB0A2C();
  v3 = v2;
  v4 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v5);
  v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1B19FA070(a1, a1[3]);
  sub_1B1FB0A84();
  sub_1B222A180();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v3);
}

uint64_t sub_1B1FB0668()
{
  return type metadata accessor for ParticleTargetFromPosition.System();
}

uint64_t *sub_1B1FB0684(uint64_t a1)
{
  uint64_t v1;
  __int128 v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  os_unfair_lock_s *v13;
  uint64_t v14;
  uint64_t v15;
  __int128 *v16;
  _OWORD *v17;
  __int128 v18;
  int v19;
  __int128 v20;
  uint64_t v21;
  _OWORD *v22;
  __int128 *v23;
  __int128 v24;
  int v25;
  __int128 v26;
  int v28;
  int v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  _OWORD v38[2];
  uint64_t v39;
  uint64_t v40[8];
  _OWORD v41[2];
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  _OWORD v48[2];
  uint64_t v49;
  _OWORD v50[2];
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  _BYTE v55[48];

  v1 = *(_QWORD *)a1;
  v2 = *(_OWORD *)(a1 + 104);
  v52 = *(_OWORD *)(a1 + 88);
  v53 = v2;
  v54 = *(_QWORD *)(a1 + 120);
  swift_retain();
  sub_1B19F25EC((uint64_t)v38);
  v50[0] = v38[0];
  v50[1] = v38[1];
  v51 = v39;
  sub_1B1E8FCE4(v1, (uint64_t)v50, 0x200000000, v40);
  sub_1B19F66A0((uint64_t)v40, (uint64_t)v41, (unint64_t *)&qword_1ED4B7DE0);
  if (*(_QWORD *)&v41[0])
  {
    if (v47 > 0 && (v34 = v44) != 0)
    {
      v3 = v46;
      v4 = v46[4];
      v37 = *(_BYTE *)(v45 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
      v48[0] = v41[0];
      v48[1] = v41[1];
      v49 = v42;
      v32 = (uint64_t)(v46 + 6);
      v33 = v43;
      v31 = v46 + 8;
      swift_retain();
      swift_retain();
      swift_retain();
      v5 = 0;
      v6 = 0;
      v30 = v4;
      do
      {
        v7 = (unsigned int *)(v33 + 48 * v5);
        v8 = *v7;
        v35 = v7[1];
        v36 = v6;
        v10 = (uint64_t *)*((_QWORD *)v7 + 2);
        v9 = *((_QWORD *)v7 + 3);
        v12 = *((_QWORD *)v7 + 4);
        v11 = *((_QWORD *)v7 + 5);
        if ((v37 & 1) != 0)
        {
          v13 = *(os_unfair_lock_s **)(v11 + 376);
          swift_retain_n();
          os_unfair_lock_lock(v13);
          os_unfair_lock_lock(*(os_unfair_lock_t *)(v11 + 344));
          swift_release();
        }
        else
        {
          swift_retain();
        }
        ecs_stack_allocator_push_snapshot(v4);
        sub_1B19F66A0(v32, (uint64_t)v55, &qword_1ED4B7FB0);
        v14 = v3[4];
        v15 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v11 + 40) + 16) + 32) + 16) + 1;
        swift_retain();
        v3[6] = ecs_stack_allocator_allocate(v14, 48 * v15, 8);
        v3[7] = v15;
        v31[1] = 0;
        v31[2] = 0;
        *v31 = 0;
        swift_release();
        v16 = (__int128 *)sub_1B1A12038((uint64_t)&type metadata for Position, (uint64_t)&off_1E63C2398, v10, v9, v12, (uint64_t)v3);
        v17 = (_OWORD *)sub_1B1A12038((uint64_t)&type metadata for ParticleTarget, (uint64_t)&off_1E63802C8, v10, v9, v12, (uint64_t)v3);
        if (v10)
        {
          if (v12)
          {
            HIDWORD(v18) = v29;
            do
            {
              v19 = HIDWORD(v18);
              v20 = *v16++;
              v18 = v20;
              HIDWORD(v18) = v19;
              *v17++ = v18;
              --v12;
            }
            while (v12);
            v29 = v19;
          }
        }
        else if ((_DWORD)v8 != (_DWORD)v35)
        {
          v21 = v35 - v8;
          v22 = &v17[v8];
          v23 = &v16[v8];
          HIDWORD(v24) = v28;
          do
          {
            v25 = HIDWORD(v24);
            v26 = *v23++;
            v24 = v26;
            HIDWORD(v24) = v25;
            *v22++ = v24;
            --v21;
          }
          while (v21);
          v28 = v25;
        }
        v4 = v30;
        v6 = v36;
        sub_1B1F05D48(v3, (unsigned __int16 **)v48, (uint64_t)v55);
        sub_1B1F03804((char *)v11);
        ecs_stack_allocator_pop_snapshot(v30);
        if ((v37 & 1) != 0)
        {
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v11 + 344));
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v11 + 376));
        }
        swift_release();
        ++v5;
      }
      while (v5 != v34);
      sub_1B19ED720((uint64_t)v38);
    }
    else
    {
      swift_retain();
      swift_retain();
      swift_retain();
      sub_1B19ED720((uint64_t)v38);
    }
    swift_release();
    sub_1B19ED748(v40);
    return sub_1B19ED748(v40);
  }
  else
  {
    sub_1B19ED720((uint64_t)v38);
    return (uint64_t *)swift_release();
  }
}

ValueMetadata *type metadata accessor for ParticleTargetFromPosition()
{
  return &type metadata for ParticleTargetFromPosition;
}

void sub_1B1FB0A2C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF61A50)
  {
    sub_1B1FB0A84();
    v0 = sub_1B22299C4();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF61A50);
  }
}

unint64_t sub_1B1FB0A84()
{
  unint64_t result;

  result = qword_1EEF61A58;
  if (!qword_1EEF61A58)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22AA3C8, &type metadata for ParticleTargetFromPosition.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF61A58);
  }
  return result;
}

ValueMetadata *type metadata accessor for ParticleTargetFromPosition.CodingKeys()
{
  return &type metadata for ParticleTargetFromPosition.CodingKeys;
}

unint64_t sub_1B1FB0ADC()
{
  unint64_t result;

  result = qword_1EEF61A60;
  if (!qword_1EEF61A60)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22AA378, &type metadata for ParticleTargetFromPosition.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF61A60);
  }
  return result;
}

unint64_t sub_1B1FB0B24()
{
  unint64_t result;

  result = qword_1EEF61A68;
  if (!qword_1EEF61A68)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22AA3A0, &type metadata for ParticleTargetFromPosition.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF61A68);
  }
  return result;
}

uint64_t sub_1B1FB0B68(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  id v12;
  id v13;
  char *v14;
  char *v15;
  id v16;
  int v17;
  uint64_t v18;
  unsigned int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  os_unfair_lock_s *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  int v32;
  int v33;
  int v34;
  double v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  uint64_t v41;
  double v42;
  int v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  int v49;
  int v50;
  int v51;
  double v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  uint64_t v58;
  double v59;
  int v60;
  int v61;
  unsigned int *v62;
  uint64_t v63;
  uint64_t v65;
  id v66;
  void *v67;
  char *v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  int v76;
  int v77;
  unsigned int v78;
  int v79;
  int v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  uint64_t v84[82];
  uint64_t v85[8];
  int v86;
  char v87;
  uint64_t v88;
  char v89;
  uint64_t v90;
  char v91;
  _BYTE v92[401];
  _OWORD v93[2];
  uint64_t v94;
  uint64_t v95[8];
  _OWORD v96[2];
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  __int128 v103;
  __int128 v104;
  uint64_t v105;
  _OWORD v106[2];
  uint64_t v107;
  _OWORD v108[2];
  uint64_t v109;
  _BYTE v110[40];
  uint64_t v111;
  int v112;
  char v113;
  uint64_t v114;
  char v115;
  uint64_t v116;

  v2 = *(_QWORD *)(v1 + OBJC_IVAR____TtC3VFX8VFXScene_entityManager);
  if (!*(_QWORD *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager_renderer))
    return MEMORY[0x1E0DEE9D8];
  v3 = 0;
  v4 = a1 ? a1 : -1;
  if ((v4 != -1 || HIDWORD(a1))
    && (v4 & 0x80000000) == 0
    && *(_QWORD *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8) > v4
    && ((v5 = *(_QWORD *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager__entries), HIDWORD(a1) == -1)
     || *(_DWORD *)(v5 + 12 * v4 + 8) == HIDWORD(a1)))
  {
    v62 = (unsigned int *)(v5 + 12 * v4);
    sub_1B1D1DC3C(*(_QWORD *)(*(_QWORD *)(v2 + 136) + 8 * (int)*v62 + 32), *v62 | ((unint64_t)*((unsigned __int16 *)v62 + 3) << 48) | ((unint64_t)*((unsigned __int16 *)v62 + 2) << 32), 656, *(_QWORD *)(v1 + OBJC_IVAR____TtC3VFX8VFXScene_entityManager), (uint64_t)v92);
  }
  else
  {
    sub_1B1D2004C(v85);
    sub_1B1A18378((uint64_t)v85, (uint64_t)v92, &qword_1ED4B8A80, (uint64_t)&type metadata for EmitterRuntime);
  }
  sub_1B1A18378((uint64_t)v92, (uint64_t)v84, &qword_1ED4B8A80, (uint64_t)&type metadata for EmitterRuntime);
  sub_1B1A18378((uint64_t)v84, (uint64_t)v85, &qword_1ED4B8A80, (uint64_t)&type metadata for EmitterRuntime);
  if (sub_1B1B3C438(v85) == 1)
    return MEMORY[0x1E0DEE9D8];
  if (v91 == 1)
  {
LABEL_38:
    sub_1B1C1F7D0(v84);
    return MEMORY[0x1E0DEE9D8];
  }
  v111 = v85[7];
  v112 = v86;
  v113 = v87;
  v114 = v88;
  v115 = v89;
  v116 = v90;
  swift_retain();
  sub_1B19EFD9C((uint64_t)v93);
  v108[0] = v93[0];
  v108[1] = v93[1];
  v109 = v94;
  sub_1B1E8FCE4(v2, (uint64_t)v108, 0x200000000, v95);
  sub_1B1A18378((uint64_t)v95, (uint64_t)v96, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (!*(_QWORD *)&v96[0])
  {
    sub_1B19ED720((uint64_t)v93);
    swift_release();
    goto LABEL_38;
  }
  v103 = v96[0];
  v104 = v96[1];
  v105 = v97;
  v70 = v98;
  v71 = v99;
  v81 = v100;
  v6 = v101;
  v7 = v102;
  sub_1B19ED720((uint64_t)v93);
  v8 = sub_1B1BA2B0C(24 * v7, 0);
  if (!v8)
  {
    swift_release();
    sub_1B19ED748(v95);
    goto LABEL_38;
  }
  v10 = v8;
  v11 = v9;
  v12 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CC6A08]), sel_init);
  objc_msgSend(v12, sel_setIntersectionFunctionTableOffset_, 0);
  objc_msgSend(v12, sel_setBoundingBoxBuffer_, v10);
  objc_msgSend(v12, sel_setBoundingBoxBufferOffset_, v11);
  objc_msgSend(v12, sel_setBoundingBoxStride_, 24);
  v66 = v12;
  objc_msgSend(v12, sel_setBoundingBoxCount_, v7);
  v67 = v10;
  v13 = objc_msgSend(v10, sel_storageMode);
  v14 = 0;
  if (v13 != (id)2)
  {
    v15 = (char *)objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
    v16 = v67;
    v14 = &v15[v11];
  }
  if (v7 > 0 && v71)
  {
    v74 = v6[4];
    v17 = *(unsigned __int8 *)(v81 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
    v106[0] = v103;
    v106[1] = v104;
    v107 = v105;
    swift_retain();
    swift_retain();
    swift_retain();
    v18 = 0;
    v68 = v14 + 12;
    v69 = v17;
    do
    {
      v19 = (unsigned int *)(v70 + 48 * v18);
      v20 = *v19;
      v22 = (uint64_t *)*((_QWORD *)v19 + 2);
      v21 = *((_QWORD *)v19 + 3);
      v23 = *((_QWORD *)v19 + 4);
      v24 = *((_QWORD *)v19 + 5);
      v78 = v19[2];
      v72 = v19[1];
      v73 = v3;
      if (v17)
      {
        v25 = *(os_unfair_lock_s **)(v24 + 376);
        swift_retain_n();
        os_unfair_lock_lock(v25);
        os_unfair_lock_lock(*(os_unfair_lock_t *)(v24 + 344));
        swift_release();
      }
      else
      {
        swift_retain();
      }
      ecs_stack_allocator_push_snapshot(v74);
      sub_1B1A18378((uint64_t)(v6 + 6), (uint64_t)v110, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
      v26 = v6[4];
      v27 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v24 + 40) + 16) + 32) + 16) + 1;
      swift_retain();
      v6[6] = ecs_stack_allocator_allocate(v26, 48 * v27, 8);
      v6[7] = v27;
      v6[9] = 0;
      v6[10] = 0;
      v6[8] = 0;
      swift_release();
      v28 = sub_1B1A12038((uint64_t)&type metadata for Position, (uint64_t)&off_1E63C2398, v22, v21, v23, (uint64_t)v6);
      v29 = sub_1B1A12038((uint64_t)&type metadata for Scale, (uint64_t)&off_1E63BA9B8, v22, v21, v23, (uint64_t)v6);
      v30 = v29;
      if (v22)
      {
        if (v23)
        {
          v31 = &v68[24 * v78];
          v32 = v80;
          v33 = v82;
          v34 = v79;
          do
          {
            v30 += 16;
            v28 += 16;
            v80 = v32;
            v79 = v34;
            v82 = v33;
            v35 = nullsub_16(v29);
            v36 = LODWORD(v35);
            v38 = v37;
            v40 = v39;
            v42 = nullsub_16(v41);
            *((_DWORD *)v31 - 3) = v36;
            *((_DWORD *)v31 - 2) = v38;
            *((_DWORD *)v31 - 1) = v40;
            *(_DWORD *)v31 = LODWORD(v42);
            v32 = v80;
            v33 = v82;
            *((_DWORD *)v31 + 1) = v43;
            *((_DWORD *)v31 + 2) = v44;
            v34 = v79;
            v31 += 24;
            --v23;
          }
          while (v23);
        }
      }
      else if ((_DWORD)v20 != (_DWORD)v72)
      {
        v45 = v28 + 16 * v20;
        v46 = v29 + 16 * v20;
        v47 = v72 - v20;
        v48 = &v68[24 * v78];
        v49 = v76;
        v50 = v77;
        v51 = v75;
        do
        {
          v46 += 16;
          v45 += 16;
          v76 = v49;
          v75 = v51;
          v77 = v50;
          v52 = nullsub_16(v29);
          v53 = LODWORD(v52);
          v55 = v54;
          v57 = v56;
          v59 = nullsub_16(v58);
          *((_DWORD *)v48 - 3) = v53;
          *((_DWORD *)v48 - 2) = v55;
          *((_DWORD *)v48 - 1) = v57;
          *(_DWORD *)v48 = LODWORD(v59);
          v49 = v76;
          v50 = v77;
          *((_DWORD *)v48 + 1) = v60;
          *((_DWORD *)v48 + 2) = v61;
          v51 = v75;
          v48 += 24;
          --v47;
        }
        while (v47);
      }
      v3 = v73;
      sub_1B1F05D48(v6, (unsigned __int16 **)v106, (uint64_t)v110);
      sub_1B1F03804((char *)v24);
      ecs_stack_allocator_pop_snapshot(v74);
      v17 = v69;
      if ((v69 & 1) != 0)
      {
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v24 + 344));
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v24 + 376));
      }
      swift_release();
      ++v18;
    }
    while (v18 != v71);
    sub_1B19ED748(v95);
  }
  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v65 = swift_allocObject();
  *(_OWORD *)(v65 + 16) = xmmword_1B226E440;
  *(_QWORD *)(v65 + 32) = v66;
  v83 = v65;
  sub_1B2228AD0();
  v63 = v83;
  swift_unknownObjectRelease();
  sub_1B19ED748(v95);
  sub_1B1C1F7D0(v84);
  swift_release();
  return v63;
}

unint64_t sub_1B1FB1334()
{
  unint64_t result;

  result = qword_1EEF61A70;
  if (!qword_1EEF61A70)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EEF61A70);
  }
  return result;
}

uint64_t sub_1B1FB1370(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v12;
  uint64_t v13;

  v3 = v1;
  sub_1B1FB21C8(0, &qword_1EEF61A78, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED170]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = (char *)&v12 - v9;
  sub_1B19FA070(a1, a1[3]);
  sub_1B1FB2184();
  sub_1B222A180();
  v13 = *v3;
  HIBYTE(v12) = 0;
  sub_1B1B4D924();
  sub_1B1B67480(qword_1EEF5B108, MEMORY[0x1E0DEB198], MEMORY[0x1E0DEB880]);
  sub_1B2229958();
  if (!v2)
  {
    v13 = v3[1];
    HIBYTE(v12) = 1;
    sub_1B2229958();
    v13 = v3[2];
    HIBYTE(v12) = 2;
    sub_1B2229958();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
}

uint64_t sub_1B1FB1510()
{
  sub_1B1FB2184();
  return sub_1B222A1D4();
}

uint64_t sub_1B1FB1538()
{
  sub_1B1FB2184();
  return sub_1B222A1E0();
}

double sub_1B1FB1560@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  uint64_t v6;

  sub_1B1FB1F90(a1, &v5);
  if (!v2)
  {
    result = *(double *)&v5;
    *(_OWORD *)a2 = v5;
    *(_QWORD *)(a2 + 16) = v6;
  }
  return result;
}

uint64_t sub_1B1FB15A0(_QWORD *a1)
{
  return sub_1B1FB1370(a1);
}

uint64_t sub_1B1FB15B4()
{
  return type metadata accessor for ParticlePivotInit.System();
}

double sub_1B1FB15D0()
{
  uint64_t v0;
  double result;

  sub_1B1BF28AC(0, (unint64_t *)&qword_1ED4BAD80, (void (*)(uint64_t))sub_1B19ED84C);
  v0 = swift_allocObject();
  *(_QWORD *)&result = 1;
  *(_OWORD *)(v0 + 16) = xmmword_1B226D240;
  *(_QWORD *)(v0 + 32) = &type metadata for ParticlePivot;
  *(_QWORD *)(v0 + 40) = &off_1E637C6B8;
  return result;
}

__n128 sub_1B1FB1624@<Q0>(__n128 *a1@<X8>)
{
  __n128 result;

  result.n128_u64[0] = 0x3F0000003F000000;
  result.n128_u64[1] = 0x3F0000003F000000;
  *a1 = result;
  a1[1].n128_u64[0] = 0x3F0000003F000000;
  return result;
}

void sub_1B1FB1638(_QWORD *a1, uint64_t a2, uint64_t a3, float *a4, float *a5)
{
  void *v5;
  void *v6;
  __int128 v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  int v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  os_unfair_lock_s *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v23;
  _QWORD *v24;
  size_t v25;
  char *v26;
  char *v27;
  char *v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42[12];
  _OWORD v43[2];
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  _OWORD v53[2];
  uint64_t v54;
  _OWORD v55[2];
  uint64_t v56;
  _OWORD v57[2];
  uint64_t v58;
  _BYTE v59[40];
  _QWORD v60[10];
  char v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;

  v6 = v5;
  v7 = *(_OWORD *)(a3 + 104);
  v57[0] = *(_OWORD *)(a3 + 88);
  v57[1] = v7;
  v58 = *(_QWORD *)(a3 + 120);
  sub_1B1E8FCE4(a2, (uint64_t)v57, 0x200000000, v42);
  sub_1B1A18378((uint64_t)v42, (uint64_t)v43, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (*(_QWORD *)&v43[0])
  {
    v50 = v43[0];
    v51 = v43[1];
    v52 = v44;
    v35 = v49;
    if (v49 >= 1 && (v8 = v46) != 0)
    {
      v9 = v48;
      v10 = v48[4];
      v33 = v47;
      v34 = v10;
      v11 = *(unsigned __int8 *)(v47 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
      v29 = v48 + 13;
      v30 = v48 + 8;
      v31 = (uint64_t)(v48 + 6);
      v12 = (uint64_t *)(v45 + 24);
      v32 = v11;
      while (1)
      {
        v13 = *((unsigned int *)v12 - 6);
        v14 = *((unsigned int *)v12 - 5);
        v15 = *((unsigned int *)v12 - 4);
        v40 = *v12;
        v41 = *(v12 - 1);
        v16 = v12[2];
        v39 = v12[1];
        v65 = v8;
        if (v11)
        {
          v17 = v6;
          v18 = *(os_unfair_lock_s **)(v16 + 376);
          swift_retain();
          os_unfair_lock_lock(v18);
          os_unfair_lock_lock(*(os_unfair_lock_t *)(v16 + 344));
        }
        else
        {
          v17 = v6;
          swift_retain();
        }
        ecs_stack_allocator_push_snapshot(v10);
        sub_1B1A18378(v31, (uint64_t)v59, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
        v19 = v9[4];
        v20 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v16 + 40) + 16) + 32) + 16) + 1;
        swift_retain();
        v9[6] = ecs_stack_allocator_allocate(v19, 48 * v20, 8);
        v9[7] = v20;
        v30[1] = 0;
        v30[2] = 0;
        *v30 = 0;
        swift_release();
        v60[0] = v33;
        v60[1] = v16;
        v60[2] = v9;
        v60[3] = v15;
        v60[4] = (v14 - v13 + v15);
        v60[5] = v35;
        v60[6] = v13;
        v60[7] = v14;
        v60[8] = 0;
        v60[9] = 0;
        v61 = 1;
        v62 = v41;
        v63 = v40;
        v64 = v39;
        sub_1B1FB1A70((uint64_t)v60, a4, a5, a1);
        if (v17)
          break;
        v55[0] = v50;
        v55[1] = v51;
        v56 = v52;
        sub_1B1F05D48(v9, (unsigned __int16 **)v55, (uint64_t)v59);
        v6 = 0;
        v11 = v32;
        if (*(_QWORD *)(v9[13] + 16))
        {
          v21 = (_QWORD *)swift_bridgeObjectRetain();
          sub_1B1F05034(v21, v16);
          swift_bridgeObjectRelease();
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v23 = v9[13];
          if ((isUniquelyReferenced_nonNull_native & 1) != 0)
          {
            sub_1B1C92670(0, *(_QWORD *)(v23 + 16));
          }
          else
          {
            v24 = (_QWORD *)MEMORY[0x1E0DEE9D8];
            if (*(_QWORD *)(v23 + 24) >= 2uLL)
            {
              sub_1B1BF28AC(0, (unint64_t *)&qword_1ED4BADE0, (void (*)(uint64_t))sub_1B1B1F228);
              v24 = (_QWORD *)swift_allocObject();
              v25 = j__malloc_size(v24);
              v24[2] = 0;
              v24[3] = 2 * ((uint64_t)(v25 - 32) / 72);
            }
            *v29 = v24;
            swift_bridgeObjectRelease();
          }
          if (*(unsigned __int8 *)(v9[2] + OBJC_IVAR____TtC3VFX13EntityManager_currentState) - 1 >= 2)
          {
            v26 = *(char **)(v16 + 232);
            v27 = *(char **)(v16 + 256);
            if (v26 == v27)
            {
              v28 = *(char **)(v16 + 240);
            }
            else
            {
              sub_1B1A1059C(v27, v26);
              v27 = *(char **)(v16 + 232);
              v28 = *(char **)(v16 + 240);
              if (v28 == v27)
              {
                v28 = 0;
                v27 = 0;
                *(_QWORD *)(v16 + 232) = 0;
                *(_QWORD *)(v16 + 240) = 0;
              }
            }
            *(_QWORD *)(v16 + 248) = v28;
            *(_QWORD *)(v16 + 256) = v27;
          }
        }
        v10 = v34;
        ecs_stack_allocator_pop_snapshot(v34);
        if ((v32 & 1) != 0)
        {
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v16 + 344));
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v16 + 376));
        }
        swift_release();
        v12 += 6;
        v8 = v65 - 1;
        if (v65 == 1)
          goto LABEL_24;
      }

      v53[0] = v50;
      v53[1] = v51;
      v54 = v52;
      sub_1B1F05D48(v9, (unsigned __int16 **)v53, (uint64_t)v59);
      sub_1B1F03804((char *)v16);
      ecs_stack_allocator_pop_snapshot(v34);
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v16 + 344));
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v16 + 376));
      __break(1u);
    }
    else
    {
LABEL_24:
      sub_1B19ED748(v42);
    }
  }
}

uint64_t sub_1B1FB1A70(uint64_t a1, float *a2, float *a3, _QWORD *a4)
{
  uint64_t result;
  uint64_t v9;
  float v10;
  float v11;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  float32x4_t v21;
  float32x4_t *v22;
  unint64_t v23;
  uint64_t v24;
  _DWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  _DWORD *v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  float32_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  float32x4_t v49;
  __int32 v50;
  float v51;

  result = sub_1B1A12038((uint64_t)&type metadata for ParticlePivot, (uint64_t)&off_1E637C6B8, *(uint64_t **)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 16));
  v9 = result;
  v11 = *a2;
  v10 = a2[1];
  if (*a2 == v10 && a2[2] == a2[3] && a2[4] == a2[5])
  {
    __asm { FMOV            V0.4S, #1.0 }
    _Q0.f32[0] = *a2;
    _Q0.f32[1] = a2[2];
    _Q0.f32[2] = a2[4];
    result = sub_1B1AE40EC(_Q0);
    *(_DWORD *)a3 = result;
    v17 = *(_QWORD *)(a1 + 48);
    v18 = *(_QWORD *)(a1 + 56);
    v19 = v18 - v17;
    if (v18 != v17)
    {
      if (v19 < 0xC)
        goto LABEL_11;
      v20 = v9 + 4 * v17;
      if (v20 < (unint64_t)(a3 + 1) && v9 + 4 * v18 > (unint64_t)a3)
        goto LABEL_11;
      v17 += v19 & 0xFFFFFFFFFFFFFFF8;
      v21 = vld1q_dup_f32(a3);
      v22 = (float32x4_t *)(v20 + 16);
      v23 = v19 & 0xFFFFFFFFFFFFFFF8;
      do
      {
        v22[-1] = v21;
        *v22 = v21;
        v22 += 2;
        v23 -= 8;
      }
      while (v23);
      if (v19 != (v19 & 0xFFFFFFFFFFFFFFF8))
      {
LABEL_11:
        v24 = v18 - v17;
        v25 = (_DWORD *)(v9 + 4 * v17);
        do
        {
          *v25++ = *(_DWORD *)a3;
          --v24;
        }
        while (v24);
      }
    }
  }
  else
  {
    v26 = *(_QWORD *)(a1 + 48);
    v27 = *(_QWORD *)(a1 + 56);
    v28 = v27 - v26;
    if (v27 != v26)
    {
      v29 = v10 - v11;
      v30 = a2[2];
      v31 = a2[3] - v30;
      v32 = a2[4];
      v33 = a2[5] - v32;
      v34 = (_DWORD *)(result + 4 * v26);
      __asm { FMOV            V0.4S, #1.0 }
      v50 = HIDWORD(_Q0);
      v51 = *a2;
      do
      {
        v37 = a4[1];
        v36 = a4[2];
        v38 = a4[3] ^ v37;
        v39 = a4[4] ^ v36;
        v40 = v38 ^ v36;
        v41 = v39 ^ v37;
        v42 = v11
            + (float)(v29
                    * (float)((float)((9 * ((((unint64_t)(5 * v36) >> 32) >> 25) | (640 * v36))) & 0xFFFFFF)
                            * 0.000000059605));
        v43 = v38 ^ (v36 << 17) ^ v41;
        v44 = __ROR8__(v39, 19);
        v45 = v43 ^ v40;
        v46 = v40 ^ v44 ^ v41;
        v47 = v43 ^ (v40 << 17) ^ v46;
        v48 = __ROR8__(v40 ^ v44, 19);
        a4[1] = v45 ^ v48 ^ v46;
        a4[2] = v47 ^ v45;
        a4[3] = v47 ^ (v45 << 17);
        a4[4] = __ROR8__(v45 ^ v48, 19);
        v49.i32[3] = v50;
        v49.f32[0] = v42;
        v49.f32[1] = v30
                   + (float)(v31
                           * (float)((float)((9
                                            * ((((unint64_t)(5 * v40) >> 32) >> 25) | (640 * v40))) & 0xFFFFFF)
                                   * 0.000000059605));
        v49.f32[2] = v32
                   + (float)(v33
                           * (float)((float)((9
                                            * ((((unint64_t)(5 * v45) >> 32) >> 25) | (640 * v45))) & 0xFFFFFF)
                                   * 0.000000059605));
        result = sub_1B1AE40EC(v49);
        v11 = v51;
        *(_DWORD *)a3 = result;
        *v34++ = result;
        --v28;
      }
      while (v28);
    }
  }
  return result;
}

uint64_t type metadata accessor for ParticlePivotInit.System()
{
  return objc_opt_self();
}

uint64_t sub_1B1FB1CEC(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  unint64_t v11;
  unint64_t v12;
  float v13;
  float v14;
  float v15;
  float v16;
  uint64_t v17;
  int v19;
  float v20[6];

  v2 = *a1;
  v3 = a1[1];
  swift_retain_n();
  v4 = sub_1B1D17CC8(v3);
  v6 = v5;
  v8 = v7;
  v10 = v9;
  swift_release();
  v11 = HIDWORD(v4);
  v12 = HIDWORD(v6);
  if ((v10 & 1) != 0)
    v13 = 0.5;
  else
    v13 = *(float *)&v4;
  if ((v10 & 1) != 0)
  {
    LODWORD(v11) = 1056964608;
    v14 = 0.5;
  }
  else
  {
    v14 = *(float *)&v6;
  }
  if ((v10 & 1) != 0)
  {
    LODWORD(v12) = 1056964608;
    v15 = 0.5;
  }
  else
  {
    v15 = *(float *)&v8;
  }
  if ((v10 & 1) != 0)
    v16 = 0.5;
  else
    v16 = *((float *)&v8 + 1);
  v20[0] = v13;
  LODWORD(v20[1]) = v11;
  v20[2] = v14;
  LODWORD(v20[3]) = v12;
  v20[4] = v15;
  v20[5] = v16;
  v19 = -2139062144;
  v17 = a1[4];
  swift_retain();
  sub_1B1BEE528((uint64_t)a1);
  sub_1B1FE9370(v17, v2, v2, (uint64_t)a1, v20, (float *)&v19);
  sub_1B1B4F21C((uint64_t)a1);
  return swift_release_n();
}

const char *sub_1B1FB1DDC()
{
  return "SetPivot.CPU";
}

uint64_t type metadata accessor for ParticlePivotInit.GPUSystem()
{
  return objc_opt_self();
}

const char *sub_1B1FB1E14()
{
  return "SetPivot.GPU";
}

uint64_t sub_1B1FB1E28()
{
  return type metadata accessor for ParticlePivotInit.GPUSystem();
}

uint64_t sub_1B1FB1E44(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  unint64_t v12;
  unint64_t v13;
  int v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t ObjectType;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _DWORD v26[6];

  v2 = a1[2];
  v3 = a1[3];
  v4 = a1[6];
  swift_retain();
  v5 = sub_1B1D17CC8(v3);
  v7 = v6;
  v9 = v8;
  v11 = v10;
  swift_release();
  v12 = HIDWORD(v5);
  v13 = HIDWORD(v7);
  if ((v11 & 1) != 0)
    v14 = 1056964608;
  else
    v14 = v5;
  if ((v11 & 1) != 0)
  {
    LODWORD(v12) = 1056964608;
    v15 = 1056964608;
  }
  else
  {
    v15 = v7;
  }
  if ((v11 & 1) != 0)
  {
    LODWORD(v13) = 1056964608;
    v16 = 1056964608;
  }
  else
  {
    v16 = v9;
  }
  if ((v11 & 1) != 0)
    v17 = 1056964608;
  else
    v17 = HIDWORD(v9);
  v26[0] = v14;
  v26[1] = v12;
  v26[2] = v15;
  v26[3] = v13;
  v26[4] = v16;
  v26[5] = v17;
  v18 = *a1;
  if (*a1)
  {
    ObjectType = swift_getObjectType();
    type metadata accessor for particle_set_pivot_uniforms(0);
    sub_1B1F40E1C((uint64_t)v26, 1, ObjectType, v20, v21, v22, v23, v24);
  }
  swift_retain();
  sub_1B1B1FC34((uint64_t)a1);
  sub_1B1FE6FB8(v4, v2, v18 == 0, 0, (uint64_t)a1, 0xD000000000000012, 0x80000001B2346AF0, 0);
  sub_1B1B1FC88((uint64_t)a1);
  return swift_release();
}

ValueMetadata *type metadata accessor for ParticlePivotInit()
{
  return &type metadata for ParticlePivotInit;
}

uint64_t sub_1B1FB1F90@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;

  sub_1B1FB21C8(0, &qword_1ED4BAB68, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED048]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = (char *)&v15 - v9;
  sub_1B19FA070(a1, a1[3]);
  sub_1B1FB2184();
  sub_1B222A150();
  if (v2)
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  sub_1B1B4D924();
  HIBYTE(v15) = 0;
  sub_1B1B67480((unint64_t *)&qword_1ED4BA5B0, MEMORY[0x1E0DEB1C0], MEMORY[0x1E0DEB8B0]);
  sub_1B2229814();
  v11 = v16;
  HIBYTE(v15) = 1;
  sub_1B2229814();
  v12 = v16;
  HIBYTE(v15) = 2;
  sub_1B2229814();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  v13 = v16;
  result = _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  *a2 = v11;
  a2[1] = v12;
  a2[2] = v13;
  return result;
}

unint64_t sub_1B1FB2184()
{
  unint64_t result;

  result = qword_1ED4B9108;
  if (!qword_1ED4B9108)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22AA618, &type metadata for ParticlePivotInit.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED4B9108);
  }
  return result;
}

void sub_1B1FB21C8(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_1B1FB2184();
    v7 = a3(a1, &type metadata for ParticlePivotInit.CodingKeys, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t storeEnumTagSinglePayload for ParticlePivotInit.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1B1FB2270 + 4 * byte_1B22AA425[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1B1FB22A4 + 4 * byte_1B22AA420[v4]))();
}

uint64_t sub_1B1FB22A4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1FB22AC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B1FB22B4);
  return result;
}

uint64_t sub_1B1FB22C0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B1FB22C8);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1B1FB22CC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1FB22D4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ParticlePivotInit.CodingKeys()
{
  return &type metadata for ParticlePivotInit.CodingKeys;
}

unint64_t sub_1B1FB22F4()
{
  unint64_t result;

  result = qword_1EEF61A80;
  if (!qword_1EEF61A80)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22AA5F0, &type metadata for ParticlePivotInit.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF61A80);
  }
  return result;
}

unint64_t sub_1B1FB233C()
{
  unint64_t result;

  result = qword_1ED4B9118;
  if (!qword_1ED4B9118)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22AA560, &type metadata for ParticlePivotInit.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED4B9118);
  }
  return result;
}

unint64_t sub_1B1FB2384()
{
  unint64_t result;

  result = qword_1ED4B9110;
  if (!qword_1ED4B9110)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22AA588, &type metadata for ParticlePivotInit.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED4B9110);
  }
  return result;
}

void sub_1B1FB23C8(char a1)
{
  sub_1B222A06C();
  __asm { BR              X10 }
}

uint64_t sub_1B1FB241C()
{
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

void sub_1B1FB2484(char a1)
{
  sub_1B222A06C();
  __asm { BR              X10 }
}

uint64_t sub_1B1FB24CC()
{
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

uint64_t sub_1B1FB257C()
{
  sub_1B222A06C();
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

uint64_t sub_1B1FB2624()
{
  sub_1B222A06C();
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

void sub_1B1FB26A8(char a1)
{
  sub_1B222A06C();
  __asm { BR              X10 }
}

uint64_t sub_1B1FB26F0()
{
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

void sub_1B1FB276C(char a1)
{
  sub_1B222A06C();
  __asm { BR              X10 }
}

uint64_t sub_1B1FB27BC()
{
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

void sub_1B1FB282C(char a1)
{
  sub_1B222A06C();
  __asm { BR              X10 }
}

uint64_t sub_1B1FB2874()
{
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

void sub_1B1FB2904(char a1)
{
  sub_1B222A06C();
  __asm { BR              X10 }
}

uint64_t sub_1B1FB2950()
{
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

void sub_1B1FB29F0(char a1)
{
  sub_1B222A06C();
  __asm { BR              X10 }
}

uint64_t sub_1B1FB2A4C()
{
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

void sub_1B1FB2ABC(char a1)
{
  sub_1B222A06C();
  __asm { BR              X10 }
}

uint64_t sub_1B1FB2B14()
{
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

void sub_1B1FB2B84(char a1)
{
  sub_1B222A06C();
  __asm { BR              X10 }
}

uint64_t sub_1B1FB2BD4()
{
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

uint64_t sub_1B1FB2C58()
{
  sub_1B222A06C();
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

void sub_1B1FB2CE0(char a1)
{
  sub_1B222A06C();
  __asm { BR              X10 }
}

uint64_t sub_1B1FB2D28()
{
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

void sub_1B1FB2DAC(char a1)
{
  sub_1B222A06C();
  __asm { BR              X10 }
}

uint64_t sub_1B1FB2E00()
{
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

void sub_1B1FB2E90(char a1)
{
  sub_1B222A06C();
  __asm { BR              X10 }
}

uint64_t sub_1B1FB2ED8()
{
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

void sub_1B1FB2F84(char a1)
{
  sub_1B222A06C();
  __asm { BR              X10 }
}

uint64_t sub_1B1FB2FCC()
{
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

uint64_t sub_1B1FB3054()
{
  sub_1B222A06C();
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

void sub_1B1FB30EC(char a1)
{
  sub_1B222A06C();
  __asm { BR              X10 }
}

uint64_t sub_1B1FB3144()
{
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

void sub_1B1FB31F8(char a1)
{
  sub_1B222A06C();
  __asm { BR              X10 }
}

uint64_t sub_1B1FB324C()
{
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

void sub_1B1FB32FC(char a1)
{
  sub_1B222A06C();
  __asm { BR              X10 }
}

uint64_t sub_1B1FB334C()
{
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

void sub_1B1FB3404(char a1)
{
  sub_1B222A06C();
  __asm { BR              X10 }
}

uint64_t sub_1B1FB3458()
{
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

uint64_t sub_1B1FB34E8()
{
  __objc2_class **v0;
  __objc2_class *v2;

  _s17TypedArraySnippetCMa();
  if (swift_dynamicCastClass())
    return 4;
  _s19StaticSwitchSnippetCMa();
  if (swift_dynamicCastClass())
    return 5;
  _s15VariableSnippetCMa();
  if (swift_dynamicCastClass())
    return 1;
  _s24VariableReferenceSnippetCMa();
  if (swift_dynamicCastClass())
    return 2;
  _s20ArraySequenceSnippetCMa();
  if (swift_dynamicCastClass())
    return 9;
  v2 = *v0;
  if (*v0 == _TtCO3VFX21GraphV1CodeGeneration11CodeSnippet)
    return 0;
  _s17CustomCodeSnippetCMa();
  if (swift_dynamicCastClass())
    return 3;
  if (v2 == _TtCO3VFX21GraphV1CodeGeneration11ContextExit)
    return 6;
  if (v2 == _TtCO3VFX21GraphV1CodeGeneration12ContextEntry)
    return 7;
  _s10SubContextCMa();
  if (swift_dynamicCastClass())
    return 8;
  else
    return 10;
}

uint64_t sub_1B1FB3620()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t result;
  _OWORD v10[5];
  uint64_t v11;
  __int128 v12;
  __int128 v13;

  if (!*(_QWORD *)(v0 + 16))
    goto LABEL_15;
  v1 = swift_bridgeObjectRetain();
  v2 = sub_1B1FBDDA0(v1, (uint64_t (*)(char *, unint64_t, uint64_t))sub_1B1FBDEFC);
  swift_bridgeObjectRelease();
  v3 = sub_1B1BF708C(v2);
  swift_release();
  if (*(_QWORD *)(v3 + 16))
  {
    sub_1B1B99AD8();
    v4 = sub_1B22296DC();
  }
  else
  {
    v4 = MEMORY[0x1E0DEE9E0];
  }
  *(_QWORD *)&v12 = v4;
  v5 = swift_bridgeObjectRetain();
  sub_1B1C067BC(v5, 1, &v12);
  swift_bridgeObjectRelease();
  v6 = v12;
  if (!*(_QWORD *)(v12 + 16))
  {
    swift_release();
LABEL_15:
    v12 = 0u;
    v13 = 0u;
    goto LABEL_16;
  }
  v7 = sub_1B1DC3B00(0x646465626D457369, 0xEF74657373416465);
  if ((v8 & 1) != 0)
  {
    sub_1B19F8F0C(*(_QWORD *)(v6 + 56) + 88 * v7, (uint64_t)v10);
  }
  else
  {
    v11 = 0;
    memset(v10, 0, sizeof(v10));
  }
  swift_release();
  if (!*((_QWORD *)&v10[0] + 1))
  {
    sub_1B1B1F3E4((uint64_t)v10, (unint64_t *)&unk_1ED4BB3A0, (uint64_t)&_s8MetadataVN);
    goto LABEL_15;
  }
  sub_1B1A0DCD4((uint64_t)&v10[3] + 8, (uint64_t)&v12);
  sub_1B1A203C4((uint64_t)v10);
  if (!*((_QWORD *)&v13 + 1))
  {
LABEL_16:
    sub_1B1B1F3E4((uint64_t)&v12, (unint64_t *)&qword_1ED4BB150, MEMORY[0x1E0DEE9B8] + 8);
    return 0;
  }
  result = swift_dynamicCast();
  if ((_DWORD)result)
    return LOBYTE(v10[0]);
  return result;
}

uint64_t sub_1B1FB3808(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;
  uint64_t v5;

  *(_QWORD *)&v4 = a1;
  *((_QWORD *)&v4 + 1) = a2;
  swift_bridgeObjectRetain();
  sub_1B2228890();
  sub_1B1E02C04(v4, *((uint64_t *)&v4 + 1), &v4);
  swift_bridgeObjectRelease();
  if (v5)
  {
    sub_1B1A02758(0, (unint64_t *)&qword_1ED4BA490, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    if (swift_dynamicCast())
      return v3;
    else
      return 0;
  }
  else
  {
    sub_1B1B1F3E4((uint64_t)&v4, (unint64_t *)&qword_1ED4BB150, MEMORY[0x1E0DEE9B8] + 8);
    return 0;
  }
}

uint64_t sub_1B1FB38F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (a3)
  {
    v7 = a1;
    v8 = a2;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1B2228890();
    v4 = v7;
    sub_1B1A02758(0, (unint64_t *)&qword_1ED4BA490, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    v9 = v5;
    v7 = a3;
    sub_1B1E02AF4(v4, v8, (uint64_t)&v7);
    swift_bridgeObjectRelease();
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v7);
  }
  else
  {
    v7 = a1;
    v8 = a2;
    swift_bridgeObjectRetain();
    sub_1B2228890();
    sub_1B1E029F8(v7, v8);
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_1B1FB3A04(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;
  uint64_t v5;

  *(_QWORD *)&v4 = a1;
  *((_QWORD *)&v4 + 1) = a2;
  swift_bridgeObjectRetain();
  sub_1B2228890();
  sub_1B1E02C04(v4, *((uint64_t *)&v4 + 1), &v4);
  swift_bridgeObjectRelease();
  if (v5)
  {
    if (swift_dynamicCast())
      return v3;
    else
      return 0;
  }
  else
  {
    sub_1B1B1F3E4((uint64_t)&v4, (unint64_t *)&qword_1ED4BB150, MEMORY[0x1E0DEE9B8] + 8);
    return 0;
  }
}

uint64_t sub_1B1FB3ADC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (a4)
  {
    v9 = a1;
    v10 = a2;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1B2228890();
    v6 = v9;
    v7 = v10;
    v11 = MEMORY[0x1E0DEA968];
    v9 = a3;
    v10 = a4;
    sub_1B1E02AF4(v6, v7, (uint64_t)&v9);
    swift_bridgeObjectRelease();
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v9);
  }
  else
  {
    v9 = a1;
    v10 = a2;
    swift_bridgeObjectRetain();
    sub_1B2228890();
    sub_1B1E029F8(v9, v10);
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_1B1FB3BE0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;

  v1 = v0;
  v2 = *(_QWORD *)(v0 + 16);
  if (!v2 || !*(_QWORD *)(v2 + 16))
  {
    v22 = 0;
    v20 = 0u;
    v21 = 0u;
    v18 = 0u;
    v19 = 0u;
    v17 = 0u;
    goto LABEL_10;
  }
  swift_bridgeObjectRetain();
  v3 = sub_1B1DC3B00(0xD000000000000012, 0x80000001B23293A0);
  if ((v4 & 1) == 0)
  {
    v22 = 0;
    v20 = 0u;
    v21 = 0u;
    v18 = 0u;
    v19 = 0u;
    v17 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  sub_1B19F8F0C(*(_QWORD *)(v2 + 56) + 88 * v3, (uint64_t)&v17);
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v17 + 1))
  {
LABEL_10:
    sub_1B1B1F3E4((uint64_t)&v17, (unint64_t *)&unk_1ED4BB3A0, (uint64_t)&_s8MetadataVN);
    v23 = 0u;
    v24 = 0u;
    goto LABEL_11;
  }
  sub_1B1A0DCD4((uint64_t)&v20 + 8, (uint64_t)&v23);
  sub_1B1A203C4((uint64_t)&v17);
  if (!*((_QWORD *)&v24 + 1))
  {
LABEL_11:
    sub_1B1B1F3E4((uint64_t)&v23, (unint64_t *)&qword_1ED4BB150, MEMORY[0x1E0DEE9B8] + 8);
    goto LABEL_12;
  }
  if ((swift_dynamicCast() & 1) != 0)
  {
    v5 = sub_1B1DB99B0(v17, *((uint64_t *)&v17 + 1), *(_QWORD **)(v1 + 40));
    swift_bridgeObjectRelease();
    return v5;
  }
LABEL_12:
  v6 = *(_QWORD *)(v1 + 48);
  if (!*(_QWORD *)(v6 + 16))
    return -1;
  v7 = *(_QWORD **)(v1 + 88);
  if (v7[2] != 1)
    return -1;
  v8 = v7[4];
  v9 = v7[5];
  v10 = v7[6];
  v11 = v7[7];
  v12 = v7[8];
  sub_1B19FA2B4(v8, v9);
  *(_QWORD *)&v17 = v8;
  *((_QWORD *)&v17 + 1) = v9;
  *(_QWORD *)&v18 = v10;
  *((_QWORD *)&v18 + 1) = v11;
  *(_QWORD *)&v19 = v12;
  swift_bridgeObjectRetain();
  sub_1B1A20350(v8, v9);
  v13 = sub_1B1B254AC(v6);
  v15 = v14;
  sub_1B1A20360(v8, v9);
  swift_bridgeObjectRelease();
  sub_1B1A20360(v8, v9);
  if ((v15 & 1) != 0)
    return -1;
  else
    return v13;
}

_QWORD *sub_1B1FB3E20()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  uint64_t (*v6)(uint64_t, unint64_t);
  uint64_t v7;
  uint64_t Strong;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t (*v15)(uint64_t, unint64_t);
  uint64_t v16;
  uint64_t v17;
  char v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  _QWORD v43[6];

  v1 = *(_QWORD *)(v0 + 56);
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain_n();
    v2 = sub_1B22296AC();
    if (v2)
      goto LABEL_3;
  }
  else
  {
    v2 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain_n();
    if (v2)
    {
LABEL_3:
      v3 = 0;
      v4 = v1 & 0xC000000000000001;
      v5 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v6 = sub_1B19FA2B4;
      v24 = v1;
      while (1)
      {
        if (v4)
        {
          v7 = MEMORY[0x1B5E21018](v3, v1);
        }
        else
        {
          v7 = *(_QWORD *)(v1 + 8 * v3 + 32);
          swift_retain();
        }
        Strong = swift_weakLoadStrong();
        if (Strong)
        {
          v9 = Strong;
          v10 = *(_QWORD *)(v7 + 32);
          *(_QWORD *)&v25 = *(_QWORD *)(v7 + 24);
          *((_QWORD *)&v25 + 1) = v10;
          swift_bridgeObjectRetain_n();
          sub_1B2228890();
          swift_bridgeObjectRelease();
          v11 = *((_QWORD *)&v25 + 1);
          v12 = *(_QWORD *)(v9 + 16);
          if (v12 && *(_QWORD *)(v12 + 16))
          {
            v13 = v2;
            v14 = v4;
            v15 = v6;
            v16 = v25;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            v17 = sub_1B1DC3B00(v16, v11);
            if ((v18 & 1) != 0)
            {
              sub_1B19F8F0C(*(_QWORD *)(v12 + 56) + 88 * v17, (uint64_t)&v25);
            }
            else
            {
              v30 = 0;
              v28 = 0u;
              v29 = 0u;
              v26 = 0u;
              v27 = 0u;
              v25 = 0u;
            }
            swift_release();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v6 = v15;
            v4 = v14;
            v2 = v13;
            v1 = v24;
          }
          else
          {
            v30 = 0;
            v28 = 0u;
            v29 = 0u;
            v26 = 0u;
            v27 = 0u;
            v25 = 0u;
            swift_release();
          }
          swift_bridgeObjectRelease();
          if (*((_QWORD *)&v25 + 1))
          {
            v33 = v27;
            v34 = v28;
            v35 = v29;
            v36 = v30;
            v31 = v25;
            v32 = v26;
            goto LABEL_26;
          }
        }
        else
        {
          v30 = 0;
          v28 = 0u;
          v29 = 0u;
          v26 = 0u;
          v27 = 0u;
          v25 = 0u;
        }
        sub_1B19FA278(v7 + 56, (uint64_t)v43);
        sub_1B19F8C58(v43, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))v6);
        sub_1B1E02E1C(v43, 1, (uint64_t)&v31);
        sub_1B19F8C58(v43, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19F9FEC);
        sub_1B1B1F3E4((uint64_t)&v25, (unint64_t *)&unk_1ED4BB3A0, (uint64_t)&_s8MetadataVN);
        if (!*((_QWORD *)&v31 + 1))
        {
          sub_1B1B1F3E4((uint64_t)&v31, (unint64_t *)&unk_1ED4BB3A0, (uint64_t)&_s8MetadataVN);
          v42 = 0;
          v40 = 0u;
          v41 = 0u;
          v38 = 0u;
          v39 = 0u;
          v37 = 0u;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v5 = sub_1B1C634CC(0, v5[2] + 1, 1, v5);
          v20 = v5[2];
          v19 = v5[3];
          if (v20 >= v19 >> 1)
            v5 = sub_1B1C634CC(v19 > 1, v20 + 1, 1, v5);
          v5[2] = v20 + 1;
          sub_1B1FC0F10((uint64_t)&v37, (uint64_t)&v5[11 * v20 + 4]);
          goto LABEL_5;
        }
LABEL_26:
        v39 = v33;
        v40 = v34;
        v41 = v35;
        v42 = v36;
        v37 = v31;
        v38 = v32;
        sub_1B19F8F0C((uint64_t)&v37, (uint64_t)&v31);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v5 = sub_1B1C634CC(0, v5[2] + 1, 1, v5);
        v22 = v5[2];
        v21 = v5[3];
        if (v22 >= v21 >> 1)
          v5 = sub_1B1C634CC(v21 > 1, v22 + 1, 1, v5);
        v5[2] = v22 + 1;
        sub_1B1FC0F10((uint64_t)&v31, (uint64_t)&v5[11 * v22 + 4]);
        sub_1B1A203C4((uint64_t)&v37);
LABEL_5:
        swift_release();
        if (v2 == ++v3)
          goto LABEL_32;
      }
    }
  }
  v5 = (_QWORD *)MEMORY[0x1E0DEE9D8];
LABEL_32:
  swift_bridgeObjectRelease_n();
  return v5;
}

uint64_t sub_1B1FB4220()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;

  v1 = *(_QWORD *)(v0 + 16);
  if (!v1 || !*(_QWORD *)(v1 + 16))
  {
    v10 = 0;
    v8 = 0u;
    v9 = 0u;
    v6 = 0u;
    v7 = 0u;
    v5 = 0u;
    goto LABEL_10;
  }
  swift_bridgeObjectRetain();
  v2 = sub_1B1DC3B00(0xD00000000000001CLL, 0x80000001B2329400);
  if ((v3 & 1) == 0)
  {
    v10 = 0;
    v8 = 0u;
    v9 = 0u;
    v6 = 0u;
    v7 = 0u;
    v5 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  sub_1B19F8F0C(*(_QWORD *)(v1 + 56) + 88 * v2, (uint64_t)&v5);
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v5 + 1))
  {
LABEL_10:
    sub_1B1B1F3E4((uint64_t)&v5, (unint64_t *)&unk_1ED4BB3A0, (uint64_t)&_s8MetadataVN);
    v11 = 0u;
    v12 = 0u;
    goto LABEL_11;
  }
  sub_1B1A0DCD4((uint64_t)&v8 + 8, (uint64_t)&v11);
  sub_1B1A203C4((uint64_t)&v5);
  if (!*((_QWORD *)&v12 + 1))
  {
LABEL_11:
    sub_1B1B1F3E4((uint64_t)&v11, (unint64_t *)&qword_1ED4BB150, MEMORY[0x1E0DEE9B8] + 8);
    return MEMORY[0x1E0DEE9D8];
  }
  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BA490, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
  if (swift_dynamicCast())
    return v5;
  return MEMORY[0x1E0DEE9D8];
}

uint64_t sub_1B1FB4380()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;

  v1 = *(_QWORD *)(v0 + 16);
  if (!v1 || !*(_QWORD *)(v1 + 16))
  {
    v10 = 0;
    v8 = 0u;
    v9 = 0u;
    v6 = 0u;
    v7 = 0u;
    v5 = 0u;
    goto LABEL_10;
  }
  swift_bridgeObjectRetain();
  v2 = sub_1B1DC3B00(0xD000000000000015, 0x80000001B2329420);
  if ((v3 & 1) == 0)
  {
    v10 = 0;
    v8 = 0u;
    v9 = 0u;
    v6 = 0u;
    v7 = 0u;
    v5 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  sub_1B19F8F0C(*(_QWORD *)(v1 + 56) + 88 * v2, (uint64_t)&v5);
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v5 + 1))
  {
LABEL_10:
    sub_1B1B1F3E4((uint64_t)&v5, (unint64_t *)&unk_1ED4BB3A0, (uint64_t)&_s8MetadataVN);
    v11 = 0u;
    v12 = 0u;
    goto LABEL_11;
  }
  sub_1B1A0DCD4((uint64_t)&v8 + 8, (uint64_t)&v11);
  sub_1B1A203C4((uint64_t)&v5);
  if (!*((_QWORD *)&v12 + 1))
  {
LABEL_11:
    sub_1B1B1F3E4((uint64_t)&v11, (unint64_t *)&qword_1ED4BB150, MEMORY[0x1E0DEE9B8] + 8);
    return MEMORY[0x1E0DEE9D8];
  }
  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BA490, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
  if (swift_dynamicCast())
    return v5;
  return MEMORY[0x1E0DEE9D8];
}

uint64_t sub_1B1FB44E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 48);
  v2 = *(_QWORD *)(v0 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v3 = sub_1B1FBEAEC(v1, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t sub_1B1FB4544()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  char v3;
  unsigned __int8 v5;
  _OWORD v6[2];
  __int128 v7;

  v1 = *(_QWORD *)(v0 + 16);
  if (!v1)
    return 0;
  if (!*(_QWORD *)(v1 + 16))
    return 0;
  swift_bridgeObjectRetain();
  sub_1B1DC3B00(0x64656C6261736964, 0xE800000000000000);
  v3 = v2;
  swift_bridgeObjectRelease();
  if ((v3 & 1) == 0)
    return 0;
  sub_1B1E02C04(0x64656C6261736964, 0xE800000000000000, v6);
  sub_1B1A0DDAC(v6, &v7);
  swift_dynamicCast();
  return v5;
}

uint64_t sub_1B1FB460C(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v3;
  _QWORD *v4;

  a1[5] = v1[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = v1[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[10] = v1[10];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[11] = v1[11];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (v1[2])
  {
    v3 = swift_bridgeObjectRetain();
    v4 = sub_1B1FBE360(v3);
    swift_bridgeObjectRelease();
  }
  else
  {
    v4 = 0;
  }
  a1[2] = v4;
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B1FB46CC(uint64_t a1)
{
  uint64_t v1;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v5;

  if (!*(_QWORD *)(v1 + 16))
  {
    *(_QWORD *)(v1 + 16) = sub_1B1B7DB30(MEMORY[0x1E0DEE9D8]);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v5 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v1 + 16) = 0x8000000000000000;
  sub_1B1FBE5C0(a1, (uint64_t)sub_1B1FBE580, 0, isUniquelyReferenced_nonNull_native, &v5);
  *(_QWORD *)(v1 + 16) = v5;
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B1FB4768()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v9;
  _OWORD v10[2];
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _OWORD v14[2];
  uint64_t v15;
  _OWORD v16[2];

  v1 = v0;
  v2 = *(_QWORD *)(v0 + 16);
  if (v2
    && *(_QWORD *)(v2 + 16)
    && (swift_bridgeObjectRetain(),
        sub_1B1DC3B00(0x6C6562616CLL, 0xE500000000000000),
        v4 = v3,
        swift_bridgeObjectRelease(),
        (v4 & 1) != 0))
  {
    v5 = *(_QWORD *)(v1 + 16);
    swift_bridgeObjectRetain();
    v6 = sub_1B1DC3B00(0x6C6562616CLL, 0xE500000000000000);
    if ((v7 & 1) != 0)
    {
      sub_1B19F8F0C(*(_QWORD *)(v5 + 56) + 88 * v6, (uint64_t)&v11);
    }
    else
    {
      v15 = 0;
      memset(v14, 0, sizeof(v14));
      v12 = 0u;
      v13 = 0u;
      v11 = 0u;
    }
    swift_bridgeObjectRelease();
    sub_1B1A0DCD4((uint64_t)v14 + 8, (uint64_t)v10);
    sub_1B1A203C4((uint64_t)&v11);
    sub_1B1A0DDAC(v10, v16);
    swift_dynamicCast();
    return v9;
  }
  else
  {
    *((_QWORD *)&v12 + 1) = MEMORY[0x1E0DEA968];
    *(_QWORD *)&v11 = 0;
    *((_QWORD *)&v11 + 1) = 0xE000000000000000;
    sub_1B1E02D58(1701667182, 0xE400000000000000, (uint64_t)&v11, v16);
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v11);
    sub_1B1A0DDAC(v16, &v11);
    swift_dynamicCast();
    return *(_QWORD *)&v10[0];
  }
}

void sub_1B1FB48E0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  _DWORD v12[4];
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  const char *v19;
  char *v20;
  char *v21;
  uint64_t *v22;
  char *v23;
  __int128 v24;
  uint64_t v25;

  sub_1B1FC0EBC();
  MEMORY[0x1E0C80A78](v2, v3);
  v13 = (char *)v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5, v6);
  v23 = (char *)v12 - v7;
  v8 = sub_1B222A108();
  v16 = *(_QWORD *)(v8 - 8);
  v17 = v8;
  MEMORY[0x1E0C80A78](v8, v9);
  v21 = (char *)v12 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = &v25;
  v11 = *MEMORY[0x1E0DEDFB8];
  v12[2] = *MEMORY[0x1E0DEDFB0];
  v12[3] = v11;
  v12[1] = *MEMORY[0x1E0DEDFA8];
  v14 = MEMORY[0x1E0DEE9B8] + 8;
  v15 = a1;
  v19 = "): unable to connect ";
  v20 = "in bakedTemplates: ";
  v18 = "pport for type: ";
  v24 = xmmword_1EEF5ECE0;
  __asm { BR              X8 }
}

uint64_t sub_1B1FB4F38()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 24);
  swift_bridgeObjectRetain();
  sub_1B2228890();
  swift_bridgeObjectRetain();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t sub_1B1FB4FB0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_1B1A06460();
  v1 = sub_1B2229214();
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v3 = *(_QWORD *)(v1 + 16 * v2 + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    v3 = *(_QWORD *)(v0 + 24);
    swift_bridgeObjectRetain();
  }
  return v3;
}

uint64_t sub_1B1FB5058()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;

  v0[7] = MEMORY[0x1E0DEE9D8];
  swift_bridgeObjectRelease();
  v1 = (_QWORD *)v0[5];
  v2 = v0[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1B1DF6860(v1, v2, (void (*)(uint64_t, uint64_t, _QWORD *))sub_1B1B25BD0);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B1FB50D0(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v4;
  uint64_t v5;

  v2[10] = a1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v2[11] = a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v2[12] = MEMORY[0x1E0DEE9D8];
  swift_bridgeObjectRelease();
  v4 = (_QWORD *)v2[10];
  v5 = v2[11];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1B1DF6860(v4, v5, (void (*)(uint64_t, uint64_t, _QWORD *))sub_1B1BB959C);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B1FB5178()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;

  (*(void (**)(void))(*v0 + 1336))();
  v0[12] = MEMORY[0x1E0DEE9D8];
  swift_bridgeObjectRelease();
  v1 = (_QWORD *)v0[10];
  v2 = v0[11];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1B1DF6860(v1, v2, (void (*)(uint64_t, uint64_t, _QWORD *))sub_1B1BB959C);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B1FB51FC(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v5)(uint64_t, uint64_t);
  uint64_t *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *i;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t *v39;
  _QWORD *v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *j;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  _QWORD *v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  _QWORD v88[4];
  uint64_t (*v89)(uint64_t, uint64_t);
  _QWORD *v90;
  _QWORD *v91;
  _QWORD *v92;
  _QWORD *v93;
  _QWORD *v94;
  uint64_t *v95;
  void (*v96)(uint64_t);
  uint64_t (*v97)(uint64_t, uint64_t);
  _QWORD *v98;
  _QWORD *v99;
  uint64_t *v100;
  _QWORD *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  _QWORD *v105;
  _QWORD *v106[2];
  _QWORD *v107[5];
  _QWORD *v108[6];

  v103 = result;
  if (*(_QWORD *)(v1 + 16))
  {
    v2 = swift_bridgeObjectRetain();
    sub_1B1DF5424(v2);
    swift_bridgeObjectRelease();
    v3 = swift_bridgeObjectRetain();
    v4 = sub_1B1DC8A9C(v3);
    swift_release();
    v108[0] = v4;
    sub_1B1DD6758(v108);
    v92 = 0;
    swift_release();
    v100 = (uint64_t *)v108[0][2];
    if (v100)
    {
      v99 = v108[0] + 4;
      v5 = *(uint64_t (**)(_QWORD, _QWORD))(*v98 + 1440);
      v96 = *(void (**)(uint64_t))(*v98 + 1336);
      v97 = v5;
      v91 = v108[0];
      swift_retain();
      v6 = 0;
      do
      {
        v10 = &v99[13 * (_QWORD)v6];
        v11 = *v10;
        v12 = v10[1];
        v13 = sub_1B2228920();
        swift_bridgeObjectRetain();
        if ((v13 & 1) != 0)
        {
          sub_1B2228830();
          sub_1B2228854();
          v14 = sub_1B2228974();
          v16 = v15;
          v18 = v17;
          v20 = v19;
          swift_bridgeObjectRelease();
          v11 = MEMORY[0x1B5E20388](v14, v16, v18, v20);
          v12 = v21;
          swift_bridgeObjectRelease();
        }
        v22 = v11;
        v23 = v98;
        v101 = (_QWORD *)v97(v22, v12);
        swift_bridgeObjectRelease();
        v107[0] = (_QWORD *)MEMORY[0x1E0DEE9D8];
        v106[0] = (_QWORD *)MEMORY[0x1E0DEE9D8];
        v24 = (_QWORD *)v23[5];
        v102 = v23[6];
        v25 = v24[2];
        if (v25 && (v26 = *(_QWORD *)(v102 + 16)) != 0)
        {
          v94 = v88;
          v95 = v6;
          v27 = v24[5];
          v104 = v24[4];
          swift_bridgeObjectRetain_n();
          swift_bridgeObjectRetain_n();
          v28 = 0;
          v29 = v25 - 1;
          v30 = v26 - 1;
          v93 = v24;
          for (i = v24 + 7; ; i += 2)
          {
            swift_bridgeObjectRetain();
            v32 = v102 + v28;
            sub_1B19FA278(v102 + v28 + 32, (uint64_t)v108);
            v34 = *(_QWORD *)(v32 + 32);
            v33 = *(_QWORD *)(v32 + 40);
            sub_1B19F8C58(v108, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19FA2B4);
            sub_1B1FBB4BC(v104, v27, v108, (uint64_t)v101, v103, v107, v106);
            swift_bridgeObjectRelease();
            sub_1B19F9FEC(v34, v33);
            if (!v29 || !v30)
              break;
            v27 = *i;
            v104 = *(i - 1);
            --v29;
            --v30;
            v28 += 40;
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
          v6 = v95;
        }
        else
        {
          swift_bridgeObjectRetain();
        }
        swift_bridgeObjectRelease();
        v6 = (uint64_t *)((char *)v6 + 1);
        v7 = v106[0];
        v8 = v98;
        v98[5] = v107[0];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        v8[6] = v7;
        swift_bridgeObjectRetain();
        v9 = swift_bridgeObjectRelease();
        v96(v9);
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      while (v6 != v100);
      result = swift_release_n();
    }
    else
    {
      result = swift_release();
    }
    if (v98[2])
    {
      v35 = swift_bridgeObjectRetain();
      v36 = v92;
      sub_1B1DF5474(v35);
      swift_bridgeObjectRelease();
      v37 = swift_bridgeObjectRetain();
      v38 = sub_1B1DC8A9C(v37);
      swift_release();
      v107[0] = v38;
      sub_1B1DD6758(v107);
      if (v36)
      {
        result = swift_release();
        __break(1u);
      }
      else
      {
        swift_release();
        v91 = (_QWORD *)v107[0][2];
        if (v91)
        {
          v39 = v98 + 12;
          v89 = *(uint64_t (**)(uint64_t, uint64_t))(*v98 + 1456);
          v90 = v107[0] + 4;
          v88[1] = v107[0];
          swift_retain();
          v40 = 0;
          v95 = v39;
          do
          {
            v41 = &v90[13 * (_QWORD)v40];
            v42 = *v41;
            v43 = v41[1];
            v44 = sub_1B2228920();
            swift_bridgeObjectRetain();
            if ((v44 & 1) != 0)
            {
              sub_1B2228830();
              sub_1B2228854();
              v45 = sub_1B2228974();
              v47 = v46;
              v49 = v48;
              v51 = v50;
              swift_bridgeObjectRelease();
              v42 = MEMORY[0x1B5E20388](v45, v47, v49, v51);
              v43 = v52;
              swift_bridgeObjectRelease();
            }
            v53 = v42;
            v54 = v98;
            v97 = (uint64_t (*)(uint64_t, uint64_t))v89(v53, v43);
            swift_bridgeObjectRelease();
            v105 = (_QWORD *)MEMORY[0x1E0DEE9D8];
            v106[0] = (_QWORD *)MEMORY[0x1E0DEE9D8];
            v55 = (uint64_t *)v54[10];
            v102 = v54[11];
            v56 = v55[2];
            if (v56 && (v57 = *(_QWORD *)(v102 + 16)) != 0)
            {
              v101 = v88;
              v92 = v40;
              v58 = v55[5];
              v104 = v55[4];
              swift_bridgeObjectRetain_n();
              swift_bridgeObjectRetain_n();
              v59 = 0;
              v60 = v56 - 1;
              v61 = v57 - 1;
              v100 = v55;
              for (j = v55 + 7; ; j += 2)
              {
                swift_bridgeObjectRetain();
                v63 = v102 + v59;
                sub_1B19FA278(v102 + v59 + 32, (uint64_t)v107);
                v64 = *(_QWORD *)(v63 + 32);
                v65 = *(_QWORD *)(v63 + 40);
                sub_1B19F8C58(v107, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19FA2B4);
                sub_1B1FBBF20(v104, v58, v107, (uint64_t)v97, v103, v106, &v105);
                swift_bridgeObjectRelease();
                sub_1B19F9FEC(v64, v65);
                if (!v60 || !v61)
                  break;
                v58 = *j;
                v104 = *(j - 1);
                --v60;
                --v61;
                v59 += 40;
              }
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease_n();
              v40 = v92;
            }
            else
            {
              swift_bridgeObjectRetain();
            }
            swift_bridgeObjectRelease();
            v67 = v105;
            v66 = v106[0];
            v68 = v98;
            v98[10] = v106[0];
            v94 = v66;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            v68[11] = v67;
            v93 = v67;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            v68[12] = MEMORY[0x1E0DEE9D8];
            swift_bridgeObjectRelease();
            v70 = (_QWORD *)v68[10];
            v69 = v68[11];
            v71 = v70[2];
            if (v71 && (v72 = *(_QWORD *)(v69 + 16)) != 0)
            {
              v92 = v40;
              v74 = v70[4];
              v73 = v70[5];
              v96 = *(void (**)(uint64_t))(*v98 + 1272);
              swift_bridgeObjectRetain_n();
              swift_bridgeObjectRetain_n();
              v104 = v71 - 1;
              v88[2] = v70;
              v88[3] = v69;
              v100 = v70 + 7;
              v101 = (_QWORD *)(v72 - 1);
              v75 = (_QWORD *)(v69 + 64);
              while (1)
              {
                v102 = v74;
                swift_bridgeObjectRetain();
                v76 = *(v75 - 4);
                v77 = *(v75 - 3);
                v78 = *(v75 - 2);
                v79 = *(v75 - 1);
                v99 = v75;
                v80 = *v75;
                sub_1B19FA2B4(v76, v77);
                swift_bridgeObjectRetain();
                v81 = v98;
                v82 = ((uint64_t (*)(uint64_t, uint64_t))v96)(v74, v73);
                v84 = v83;
                _s12ParameterOutCMa();
                v85 = v73;
                v86 = (_QWORD *)swift_allocObject();
                swift_weakInit();
                swift_weakAssign();
                v86[3] = v102;
                v86[4] = v85;
                v102 = v85;
                v86[5] = v82;
                v86[6] = v84;
                v86[7] = v76;
                v86[8] = v77;
                v86[9] = v78;
                v86[10] = v79;
                v86[11] = v80;
                v87 = sub_1B19FA2B4(v76, v77);
                MEMORY[0x1B5E2064C](v87);
                if (*(_QWORD *)((v81[12] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v81[12] & 0xFFFFFFFFFFFFFF8)
                                                                                      + 0x18) >> 1)
                  sub_1B2228AF4();
                sub_1B2228B30();
                sub_1B2228AD0();
                swift_bridgeObjectRelease();
                sub_1B19F9FEC(v76, v77);
                if (!v104 || !v101)
                  break;
                v75 = v99 + 5;
                v74 = *(v100 - 1);
                v73 = *v100;
                --v104;
                v100 += 2;
                v101 = (_QWORD *)((char *)v101 - 1);
              }
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease_n();
              v40 = v92;
            }
            else
            {
              swift_bridgeObjectRetain();
            }
            swift_release();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v40 = (_QWORD *)((char *)v40 + 1);
          }
          while (v40 != v91);
          return swift_release_n();
        }
        else
        {
          return swift_release();
        }
      }
    }
  }
  return result;
}

uint64_t sub_1B1FB5B18(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = v1[9];
  v5 = v1[13];
  v4 = v1[14];
  v1[5] = v1[8];
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v1[6] = v3;
  swift_bridgeObjectRetain();
  v6 = swift_bridgeObjectRelease();
  (*(void (**)(uint64_t))(*v1 + 1336))(v6);
  sub_1B1FB50D0(v5, v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return sub_1B1FB51FC(a1);
}

uint64_t sub_1B1FB5BDC(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  char *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t i;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  BOOL v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char v85;
  char v86;
  uint64_t v87;
  uint64_t v88;
  char v89;
  uint64_t v90;
  uint64_t v91;
  char v92;
  char v93;
  double (*v94)(_QWORD);
  uint64_t *v95;
  uint64_t *v96;
  char v97;
  char v98;
  char v99;
  uint64_t v100;
  uint64_t v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  _QWORD *v112;
  uint64_t v113;
  uint64_t result;
  unint64_t v115;
  void (*v116)(_OWORD *, _QWORD);
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v121;
  uint64_t v122;
  _QWORD *v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  char *v129;
  _OWORD v130[3];
  _OWORD v131[2];
  uint64_t v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  _BYTE v136[40];
  _OWORD v137[2];
  __int128 v138;
  uint64_t v139;
  _OWORD v140[2];
  uint64_t v141;
  _QWORD v142[5];
  _QWORD v143[5];
  __int128 v144;
  __int128 v145;
  uint64_t v146;

  v2 = v1;
  v3 = sub_1B1FB74F8();
  if (v3)
  {
    v125 = v3[2];
    if (v125)
    {
      v4 = 0;
      v123 = v3 + 4;
      v5 = (char *)MEMORY[0x1E0DEE9D8];
      do
      {
        v128 = v5;
        v6 = &v123[13 * v4];
        v8 = *v6;
        v7 = v6[1];
        v9 = sub_1B2228920();
        swift_bridgeObjectRetain();
        if ((v9 & 1) != 0)
        {
          sub_1B2228830();
          sub_1B2228854();
          v10 = sub_1B2228974();
          v12 = v11;
          v14 = v13;
          v16 = v15;
          swift_bridgeObjectRelease();
          v8 = MEMORY[0x1B5E20388](v10, v12, v14, v16);
          v7 = v17;
          swift_bridgeObjectRelease();
        }
        v18 = (_QWORD *)v2[8];
        v19 = v18[2];
        if (v19)
        {
          v20 = v18[4] == v8 && v18[5] == v7;
          if (!v20 && (sub_1B2229D24() & 1) == 0)
          {
            v24 = 0;
            v25 = v18 + 7;
            v26 = 1;
            while (v19 != v26)
            {
              ++v24;
              if (*(v25 - 1) == v8 && *v25 == v7)
              {
                v21 = v24;
                goto LABEL_13;
              }
              v21 = v26++;
              v25 += 2;
              if ((sub_1B2229D24() & 1) != 0)
                goto LABEL_13;
            }
          }
        }
        v21 = 0;
LABEL_13:
        swift_bridgeObjectRelease();
        v5 = v128;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v5 = sub_1B1C62D94(0, *((_QWORD *)v128 + 2) + 1, 1, v128);
        v23 = *((_QWORD *)v5 + 2);
        v22 = *((_QWORD *)v5 + 3);
        if (v23 >= v22 >> 1)
          v5 = sub_1B1C62D94(v22 > 1, v23 + 1, 1, v5);
        ++v4;
        *((_QWORD *)v5 + 2) = v23 + 1;
        *(_QWORD *)&v5[8 * v23 + 32] = v21;
      }
      while (v4 != v125);
    }
    else
    {
      v5 = (char *)MEMORY[0x1E0DEE9D8];
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    v5 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v28 = (char *)MEMORY[0x1E0DEE9D8];
  v129 = v5;
  if (*(_QWORD *)(a1 + 16))
  {
    v29 = swift_bridgeObjectRetain();
    sub_1B1FBDDA0(v29, (uint64_t (*)(char *, unint64_t, uint64_t))sub_1B1FBE150);
    swift_bridgeObjectRelease();
    v30 = swift_bridgeObjectRetain();
    v31 = sub_1B1DC8A9C(v30);
    swift_release();
    *(_QWORD *)&v133 = v31;
    sub_1B1FBADF4((_QWORD **)&v133);
    swift_release();
    v126 = *(_QWORD *)(v133 + 16);
    if (v126)
    {
      v121 = v133 + 32;
      swift_retain();
      for (i = 0; i != v126; ++i)
      {
        v33 = (uint64_t *)(v121 + 104 * i);
        v35 = *v33;
        v34 = v33[1];
        v36 = sub_1B2228920();
        swift_bridgeObjectRetain();
        v124 = v28;
        if ((v36 & 1) != 0)
        {
          sub_1B2228830();
          sub_1B2228854();
          v37 = sub_1B2228974();
          v39 = v38;
          v41 = v40;
          v43 = v42;
          swift_bridgeObjectRelease();
          v35 = MEMORY[0x1B5E20388](v37, v39, v41, v43);
          v34 = v44;
          swift_bridgeObjectRelease();
        }
        v45 = (_QWORD *)v2[13];
        v46 = v45[2];
        if (v46)
        {
          v47 = v45[4] == v35 && v45[5] == v34;
          if (!v47 && (sub_1B2229D24() & 1) == 0)
          {
            v51 = 0;
            v52 = v45 + 7;
            v53 = 1;
            while (v46 != v53)
            {
              ++v51;
              if (*(v52 - 1) == v35 && *v52 == v34)
              {
                v48 = v51;
                goto LABEL_43;
              }
              v48 = v53++;
              v52 += 2;
              if ((sub_1B2229D24() & 1) != 0)
                goto LABEL_43;
            }
          }
        }
        v48 = 0;
LABEL_43:
        swift_bridgeObjectRelease();
        v28 = v124;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v28 = sub_1B1C62D94(0, *((_QWORD *)v124 + 2) + 1, 1, v124);
        v5 = v129;
        v50 = *((_QWORD *)v28 + 2);
        v49 = *((_QWORD *)v28 + 3);
        if (v50 >= v49 >> 1)
          v28 = sub_1B1C62D94(v49 > 1, v50 + 1, 1, v28);
        *((_QWORD *)v28 + 2) = v50 + 1;
        *(_QWORD *)&v28[8 * v50 + 32] = v48;
      }
      swift_release_n();
    }
    else
    {
      swift_release();
    }
  }
  *(_QWORD *)&v133 = v5;
  swift_bridgeObjectRetain_n();
  sub_1B1FBAE5C((uint64_t *)&v133);
  swift_bridgeObjectRelease();
  v55 = v133;
  v56 = *(_QWORD *)(v133 + 16);
  if (v56)
  {
    v57 = v28;
    swift_retain();
    v58 = 0;
    do
    {
      v59 = *(_QWORD *)(v55 + 8 * v58++ + 32);
      v60 = v2[5] + 16 * v59;
      v61 = *(_QWORD *)(v60 + 32);
      v62 = *(_QWORD *)(v60 + 40);
      swift_bridgeObjectRetain();
      sub_1B1FB9650(v61, v62);
      swift_bridgeObjectRelease();
    }
    while (v56 != v58);
    swift_release();
    v28 = v57;
  }
  swift_release();
  *(_QWORD *)&v133 = v28;
  swift_bridgeObjectRetain_n();
  sub_1B1FBAE5C((uint64_t *)&v133);
  swift_bridgeObjectRelease();
  v63 = v133;
  v122 = *(_QWORD *)(v133 + 16);
  if (v122)
  {
    swift_retain();
    v64 = 0;
    v118 = MEMORY[0x1E0DEE9B8] + 8;
    v119 = v63;
    while (1)
    {
      v78 = v2[10] + 16 * *(_QWORD *)(v63 + 8 * v64 + 32);
      v80 = *(_QWORD *)(v78 + 32);
      v79 = *(_QWORD *)(v78 + 40);
      *(_QWORD *)&v133 = v80;
      *((_QWORD *)&v133 + 1) = v79;
      v81 = v79;
      swift_bridgeObjectRetain_n();
      sub_1B2228890();
      v83 = *((_QWORD *)&v133 + 1);
      v82 = v133;
      v84 = v2[2];
      if (!v84
        || !*(_QWORD *)(v84 + 16)
        || (swift_bridgeObjectRetain(), sub_1B1DC3B00(v82, v83), v86 = v85, swift_bridgeObjectRelease(), (v86 & 1) == 0))
      {
        v65 = (*(uint64_t (**)(uint64_t, uint64_t))(*v2 + 1456))(v80, v81);
        sub_1B19FA278(v65 + 56, (uint64_t)v143);
        sub_1B19F8C58(v143, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19FA2B4);
        v66 = sub_1B1E03DBC();
        v68 = v67;
        sub_1B19F8C58(v143, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19F9FEC);
        v139 = MEMORY[0x1E0DEA968];
        *(_QWORD *)&v138 = v66;
        *((_QWORD *)&v138 + 1) = v68;
        if (!v2[2])
        {
          v2[2] = sub_1B1B7DB30(MEMORY[0x1E0DEE9D8]);
          swift_bridgeObjectRelease();
        }
        sub_1B1A02864((uint64_t)&v138, (uint64_t)v137);
        memset(&v136[8], 0, 32);
        *(_QWORD *)&v133 = v82;
        *((_QWORD *)&v133 + 1) = v83;
        swift_bridgeObjectRetain_n();
        sub_1B1E0E5B0(v137, v142);
        sub_1B19FA278((uint64_t)v142, (uint64_t)&v134);
        sub_1B1B1F3E4((uint64_t)&v136[8], (unint64_t *)&qword_1ED4BB150, v118);
        sub_1B1A0DDAC(v137, &v136[8]);
        v130[2] = v135;
        v131[0] = *(_OWORD *)v136;
        v131[1] = *(_OWORD *)&v136[16];
        v132 = *(_QWORD *)&v136[32];
        v130[0] = v133;
        v130[1] = v134;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)&v133 = v2[2];
        v2[2] = 0x8000000000000000;
        sub_1B1B8440C((uint64_t)v130, v82, v83, isUniquelyReferenced_nonNull_native);
        v2[2] = v133;
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        v70 = _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v138);
        v71 = MEMORY[0x1E0DEE9D8];
        *(_QWORD *)&v133 = MEMORY[0x1E0DEE9D8];
        *(_QWORD *)&v130[0] = MEMORY[0x1E0DEE9D8];
        v72 = (_QWORD *)v2[10];
        v73 = v2[11];
        MEMORY[0x1E0C80A78](v70, v74);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_1B1DF6860(v72, v73, (void (*)(uint64_t, uint64_t, _QWORD *))sub_1B1FC12B0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v75 = *(_QWORD *)&v130[0];
        v2[10] = v133;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        v2[11] = v75;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        v2[12] = v71;
        swift_bridgeObjectRelease();
        v76 = (_QWORD *)v2[10];
        v77 = v2[11];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_1B1DF6860(v76, v77, (void (*)(uint64_t, uint64_t, _QWORD *))sub_1B1BB959C);
        swift_bridgeObjectRelease();
        swift_release();
        goto LABEL_69;
      }
      v87 = v2[2];
      if (*(_QWORD *)(v87 + 16))
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v88 = sub_1B1DC3B00(v82, v83);
        if ((v89 & 1) != 0)
        {
          sub_1B19F8F0C(*(_QWORD *)(v87 + 56) + 88 * v88, (uint64_t)&v133);
        }
        else
        {
          memset(v136, 0, sizeof(v136));
          v134 = 0u;
          v135 = 0u;
          v133 = 0u;
        }
        swift_bridgeObjectRelease();
      }
      else
      {
        memset(v136, 0, sizeof(v136));
        v134 = 0u;
        v135 = 0u;
        v133 = 0u;
        swift_bridgeObjectRetain();
      }
      if (!*((_QWORD *)&v133 + 1))
      {
        sub_1B1B1F3E4((uint64_t)&v133, (unint64_t *)&unk_1ED4BB3A0, (uint64_t)&_s8MetadataVN);
        swift_bridgeObjectRelease();
        __break(1u);
        result = swift_release();
        __break(1u);
        return result;
      }
      sub_1B19F8F0C((uint64_t)&v133, (uint64_t)v130);
      sub_1B1B1F3E4((uint64_t)&v133, (unint64_t *)&unk_1ED4BB3A0, (uint64_t)&_s8MetadataVN);
      swift_bridgeObjectRelease();
      sub_1B1A0DCD4((uint64_t)v131 + 8, (uint64_t)&v138);
      sub_1B1A203C4((uint64_t)v130);
      sub_1B1A0DDAC(&v138, &v133);
      swift_dynamicCast();
      v127 = *((_QWORD *)&v130[0] + 1);
      v90 = *(_QWORD *)&v130[0];
      v91 = v2[2];
      if (v91 && *(_QWORD *)(v91 + 16))
      {
        v117 = *(_QWORD *)&v130[0];
        swift_bridgeObjectRetain();
        sub_1B1DC3B00(v82, v83);
        v93 = v92;
        swift_bridgeObjectRelease();
        if ((v93 & 1) != 0)
        {
          v94 = sub_1B1E029E8();
          if (*v95)
          {
            v96 = v95;
            v116 = (void (*)(_OWORD *, _QWORD))v94;
            swift_bridgeObjectRetain();
            v115 = sub_1B1DC3B00(v82, v83);
            v98 = v97;
            swift_bridgeObjectRelease();
            if ((v98 & 1) != 0)
            {
              v99 = swift_isUniquelyReferenced_nonNull_native();
              *(_QWORD *)&v138 = *v96;
              *v96 = 0x8000000000000000;
              if ((v99 & 1) == 0)
                sub_1B1EA805C();
              v100 = v138;
              swift_bridgeObjectRelease();
              v101 = *(_QWORD *)(v100 + 56) + 88 * v115;
              v102 = *(_OWORD *)(v101 + 16);
              v133 = *(_OWORD *)v101;
              v134 = v102;
              v104 = *(_OWORD *)(v101 + 48);
              v103 = *(_OWORD *)(v101 + 64);
              v105 = *(_OWORD *)(v101 + 32);
              *(_QWORD *)&v136[32] = *(_QWORD *)(v101 + 80);
              *(_OWORD *)v136 = v104;
              *(_OWORD *)&v136[16] = v103;
              v135 = v105;
              sub_1B1EA4748(v115, v100);
              *v96 = v100;
              swift_bridgeObjectRelease();
            }
            else
            {
              memset(v136, 0, sizeof(v136));
              v134 = 0u;
              v135 = 0u;
              v133 = 0u;
            }
            sub_1B1B1F3E4((uint64_t)&v133, (unint64_t *)&unk_1ED4BB3A0, (uint64_t)&_s8MetadataVN);
            v116(v130, 0);
          }
          else
          {
            ((void (*)(_OWORD *, _QWORD))v94)(v130, 0);
            v133 = 0u;
            v134 = 0u;
            v135 = 0u;
            memset(v136, 0, sizeof(v136));
            sub_1B1B1F3E4((uint64_t)&v133, (unint64_t *)&unk_1ED4BB3A0, (uint64_t)&_s8MetadataVN);
          }
          v90 = v117;
          v106 = v127;
          swift_bridgeObjectRelease();
          goto LABEL_91;
        }
        swift_bridgeObjectRelease();
        v90 = v117;
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      v106 = v127;
LABEL_91:
      v107 = sub_1B1E0E85C(v90, v106, (uint64_t *)v140);
      v144 = v140[0];
      v145 = v140[1];
      v146 = v141;
      *(_QWORD *)&v133 = MEMORY[0x1E0DEE9D8];
      *(_QWORD *)&v130[0] = MEMORY[0x1E0DEE9D8];
      LOBYTE(v138) = 0;
      v108 = (_QWORD *)v2[10];
      v109 = v2[11];
      MEMORY[0x1E0C80A78](v107, v110);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1B1DF6860(v108, v109, (void (*)(uint64_t, uint64_t, _QWORD *))sub_1B1FC0DD4);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1B19F8C58(v140, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1A20360);
      v111 = *(_QWORD *)&v130[0];
      v2[10] = v133;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v2[11] = v111;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v2[12] = MEMORY[0x1E0DEE9D8];
      swift_bridgeObjectRelease();
      v112 = (_QWORD *)v2[10];
      v113 = v2[11];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1B1DF6860(v112, v113, (void (*)(uint64_t, uint64_t, _QWORD *))sub_1B1BB959C);
      swift_bridgeObjectRelease();
LABEL_69:
      v63 = v119;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v122 == ++v64)
      {
        swift_bridgeObjectRelease();
        swift_release_n();
        return swift_bridgeObjectRelease();
      }
    }
  }
  swift_bridgeObjectRelease();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B1FB69EC()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  char v3;
  uint64_t v4;
  uint64_t result;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  char v26;
  char v27;
  unint64_t v28;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v30;
  char v31;
  unint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  _QWORD *v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  _QWORD *v44;
  BOOL v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  _QWORD v62[7];

  v1 = v0;
  v2 = (_QWORD *)sub_1B1FB4220();
  v3 = sub_1B1CC9D08(v2, qword_1E63A1298);
  swift_arrayDestroy();
  swift_bridgeObjectRelease();
  if ((v3 & 1) != 0 || (v4 = *(_QWORD *)(sub_1B1FB4220() + 16), result = swift_bridgeObjectRelease(), v4))
  {
    v6 = *(_QWORD *)(v1 + 56);
    if (v6 >> 62)
    {
      swift_bridgeObjectRetain_n();
      v7 = sub_1B22296AC();
      if (v7)
        goto LABEL_5;
    }
    else
    {
      v7 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain_n();
      if (v7)
      {
LABEL_5:
        v8 = 0;
        v49 = v6 & 0xC000000000000001;
        v46 = v6 + 32;
        v47 = v7;
        v48 = MEMORY[0x1E0DEE9B8] + 8;
        while (1)
        {
          if (v49)
          {
            v9 = MEMORY[0x1B5E21018](v8, v6);
          }
          else
          {
            v9 = *(_QWORD *)(v46 + 8 * v8);
            swift_retain();
          }
          v10 = *(_QWORD *)(v1 + 16);
          if (!v10 || !*(_QWORD *)(v10 + 16))
            break;
          swift_bridgeObjectRetain();
          v11 = sub_1B1DC3B00(0xD00000000000001CLL, 0x80000001B2329400);
          if ((v12 & 1) != 0)
          {
            sub_1B19F8F0C(*(_QWORD *)(v10 + 56) + 88 * v11, (uint64_t)&v56);
          }
          else
          {
            v61 = 0;
            v59 = 0u;
            v60 = 0u;
            v58 = 0u;
            v56 = 0u;
            v57 = 0u;
          }
          swift_bridgeObjectRelease();
          if (!*((_QWORD *)&v56 + 1))
            goto LABEL_16;
          sub_1B1A0DCD4((uint64_t)&v59 + 8, (uint64_t)&v50);
          sub_1B1A203C4((uint64_t)&v56);
          if (!*((_QWORD *)&v51 + 1))
            goto LABEL_17;
          sub_1B1A02758(0, (unint64_t *)&qword_1ED4BA490, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
          if (!swift_dynamicCast())
            goto LABEL_18;
          v13 = v56;
LABEL_19:
          if (*(_QWORD *)(v13 + 16) != 1)
          {
            swift_bridgeObjectRelease();
            v16 = *(_QWORD *)(v1 + 16);
            if (!v16)
              goto LABEL_32;
            goto LABEL_29;
          }
          if ((_UNKNOWN *)v13 == &unk_1E63A1268)
            goto LABEL_39;
          if (*(_QWORD *)(v13 + 32) == 42 && *(_QWORD *)(v13 + 40) == 0xE100000000000000)
            goto LABEL_39;
          v15 = sub_1B2229D24();
          swift_bridgeObjectRelease();
          if ((v15 & 1) == 0)
          {
            v16 = *(_QWORD *)(v1 + 16);
            if (!v16)
            {
LABEL_32:
              v61 = 0;
              v59 = 0u;
              v60 = 0u;
              v58 = 0u;
              v56 = 0u;
              v57 = 0u;
              goto LABEL_33;
            }
LABEL_29:
            if (!*(_QWORD *)(v16 + 16))
              goto LABEL_32;
            swift_bridgeObjectRetain();
            v17 = sub_1B1DC3B00(0xD00000000000001CLL, 0x80000001B2329400);
            if ((v18 & 1) != 0)
            {
              sub_1B19F8F0C(*(_QWORD *)(v16 + 56) + 88 * v17, (uint64_t)&v56);
            }
            else
            {
              v61 = 0;
              v59 = 0u;
              v60 = 0u;
              v58 = 0u;
              v56 = 0u;
              v57 = 0u;
            }
            swift_bridgeObjectRelease();
            if (*((_QWORD *)&v56 + 1))
            {
              sub_1B1A0DCD4((uint64_t)&v59 + 8, (uint64_t)&v50);
              sub_1B1A203C4((uint64_t)&v56);
              if (*((_QWORD *)&v51 + 1))
              {
                sub_1B1A02758(0, (unint64_t *)&qword_1ED4BA490, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
                if (swift_dynamicCast())
                {
                  v19 = (_QWORD *)v56;
                  v20 = *(_QWORD *)(v56 + 16);
                  if (!v20)
                    goto LABEL_6;
LABEL_36:
                  v21 = *(_QWORD *)(v9 + 24);
                  v22 = *(_QWORD *)(v9 + 32);
                  if ((v19[4] != v21 || v19[5] != v22) && (sub_1B2229D24() & 1) == 0)
                  {
                    if (v20 == 1)
                      goto LABEL_6;
                    if ((v19[6] != v21 || v19[7] != v22) && (sub_1B2229D24() & 1) == 0)
                    {
                      if (v20 == 2)
                        goto LABEL_6;
                      if ((v19[8] != v21 || v19[9] != v22) && (sub_1B2229D24() & 1) == 0)
                      {
                        v43 = v20 - 3;
                        if (!v43)
                          goto LABEL_6;
                        v44 = v19 + 11;
                        while (1)
                        {
                          v45 = *(v44 - 1) == v21 && *v44 == v22;
                          if (v45 || (sub_1B2229D24() & 1) != 0)
                            break;
                          v44 += 2;
                          if (!--v43)
                            goto LABEL_6;
                        }
                      }
                    }
                  }
LABEL_39:
                  swift_bridgeObjectRelease();
                  goto LABEL_40;
                }
LABEL_35:
                v19 = (_QWORD *)MEMORY[0x1E0DEE9D8];
                v20 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
                if (!v20)
                  goto LABEL_6;
                goto LABEL_36;
              }
            }
            else
            {
LABEL_33:
              sub_1B1B1F3E4((uint64_t)&v56, (unint64_t *)&unk_1ED4BB3A0, (uint64_t)&_s8MetadataVN);
              v50 = 0u;
              v51 = 0u;
            }
            sub_1B1B1F3E4((uint64_t)&v50, (unint64_t *)&qword_1ED4BB150, MEMORY[0x1E0DEE9B8] + 8);
            goto LABEL_35;
          }
LABEL_40:
          v23 = *(_QWORD *)(v9 + 32);
          *(_QWORD *)&v56 = *(_QWORD *)(v9 + 24);
          *((_QWORD *)&v56 + 1) = v23;
          swift_bridgeObjectRetain_n();
          sub_1B2228890();
          swift_bridgeObjectRelease();
          v24 = v56;
          v25 = *(_QWORD *)(v1 + 16);
          if (!v25
            || !*(_QWORD *)(v25 + 16)
            || (swift_bridgeObjectRetain(),
                sub_1B1DC3B00(v24, *((uint64_t *)&v24 + 1)),
                v27 = v26,
                swift_bridgeObjectRelease(),
                (v27 & 1) == 0))
          {
            v28 = v6;
            sub_1B19FA278(v9 + 56, (uint64_t)v62);
            sub_1B19F8C58(v62, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19FA2B4);
            sub_1B1E02E1C(v62, 1, (uint64_t)&v56);
            sub_1B19F8C58(v62, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19F9FEC);
            if (!*(_QWORD *)(v1 + 16))
            {
              *(_QWORD *)(v1 + 16) = sub_1B1B7DB30(MEMORY[0x1E0DEE9D8]);
              swift_bridgeObjectRelease();
            }
            sub_1B19F8F0C((uint64_t)&v56, (uint64_t)&v50);
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            v30 = *(_QWORD **)(v1 + 16);
            *(_QWORD *)(v1 + 16) = 0x8000000000000000;
            v32 = sub_1B1DC3B00(v24, *((uint64_t *)&v24 + 1));
            v33 = v31;
            v34 = v30[2] + ((v31 & 1) == 0);
            if (v30[3] >= v34)
            {
              if ((isUniquelyReferenced_nonNull_native & 1) != 0)
              {
                v37 = v30;
                if ((v31 & 1) == 0)
                  goto LABEL_48;
              }
              else
              {
                sub_1B1EA805C();
                v37 = v30;
                if ((v33 & 1) == 0)
                  goto LABEL_48;
              }
            }
            else
            {
              sub_1B1E90CBC(v34, isUniquelyReferenced_nonNull_native);
              v35 = sub_1B1DC3B00(v24, *((uint64_t *)&v24 + 1));
              if ((v33 & 1) != (v36 & 1))
              {
                result = sub_1B2229FC4();
                __break(1u);
                return result;
              }
              v32 = v35;
              v37 = v30;
              if ((v33 & 1) == 0)
              {
LABEL_48:
                v37[(v32 >> 6) + 8] |= 1 << v32;
                *(_OWORD *)(v37[6] + 16 * v32) = v24;
                v38 = v37[7] + 88 * v32;
                v39 = v51;
                *(_OWORD *)v38 = v50;
                *(_OWORD *)(v38 + 16) = v39;
                v40 = v52;
                v41 = v53;
                v42 = v54;
                *(_QWORD *)(v38 + 80) = v55;
                *(_OWORD *)(v38 + 48) = v41;
                *(_OWORD *)(v38 + 64) = v42;
                *(_OWORD *)(v38 + 32) = v40;
                ++v37[2];
                swift_bridgeObjectRetain();
LABEL_52:
                *(_QWORD *)(v1 + 16) = v37;
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                sub_1B1A203C4((uint64_t)&v56);
                swift_release();
                v6 = v28;
                v7 = v47;
                goto LABEL_7;
              }
            }
            sub_1B1B25BD8((uint64_t)&v50, v37[7] + 88 * v32);
            goto LABEL_52;
          }
LABEL_6:
          swift_release();
          swift_bridgeObjectRelease();
LABEL_7:
          if (++v8 == v7)
            return swift_bridgeObjectRelease_n();
        }
        v61 = 0;
        v59 = 0uLL;
        v60 = 0uLL;
        v58 = 0uLL;
        v56 = 0uLL;
        v57 = 0uLL;
LABEL_16:
        sub_1B1B1F3E4((uint64_t)&v56, (unint64_t *)&unk_1ED4BB3A0, (uint64_t)&_s8MetadataVN);
        v50 = 0u;
        v51 = 0u;
LABEL_17:
        sub_1B1B1F3E4((uint64_t)&v50, (unint64_t *)&qword_1ED4BB150, v48);
LABEL_18:
        v13 = MEMORY[0x1E0DEE9D8];
        goto LABEL_19;
      }
    }
    return swift_bridgeObjectRelease_n();
  }
  return result;
}

uint64_t sub_1B1FB717C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_retain();
  v1 = swift_bridgeObjectRetain();
  v2 = sub_1B1DF6580(v1, v0);
  swift_bridgeObjectRelease();
  swift_release();
  return v2;
}

uint64_t sub_1B1FB71E0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  BOOL v7;
  BOOL v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *i;
  BOOL v17;
  uint64_t v18;

  v3 = *(_QWORD **)(v2 + 40);
  v4 = v3[2];
  if (v4)
  {
    v7 = v3[4] == a1 && v3[5] == a2;
    if (!v7 && (sub_1B2229D24() & 1) == 0)
    {
      if (v4 == 1)
        return 0;
      v8 = v3[6] == a1 && v3[7] == a2;
      if (!v8 && (sub_1B2229D24() & 1) == 0)
      {
        v14 = v4 - 2;
        if (v4 == 2)
          return 0;
        for (i = v3 + 9; ; i += 2)
        {
          v17 = *(i - 1) == a1 && *i == a2;
          if (v17 || (sub_1B2229D24() & 1) != 0)
            break;
          v4 = 0;
          if (!--v14)
            return v4;
        }
      }
    }
    v9 = sub_1B1DB99B0(a1, a2, v3);
    if ((v10 & 1) == 0)
    {
      v11 = v9;
      v12 = *(_QWORD *)(v2 + 56);
      if (v12 >> 62)
      {
        swift_bridgeObjectRetain();
        v18 = sub_1B22296AC();
        swift_bridgeObjectRelease();
        if (v11 < v18)
        {
LABEL_16:
          v13 = *(_QWORD *)(v2 + 56);
          if ((v13 & 0xC000000000000001) != 0)
          {
            swift_bridgeObjectRetain();
            v4 = MEMORY[0x1B5E21018](v11, v13);
            swift_bridgeObjectRelease();
          }
          else
          {
            v4 = *(_QWORD *)(v13 + 8 * v11 + 32);
            swift_retain();
          }
          return v4;
        }
      }
      else if (v9 < *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        goto LABEL_16;
      }
    }
    return 0;
  }
  return v4;
}

uint64_t sub_1B1FB736C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  BOOL v7;
  BOOL v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *i;
  BOOL v17;
  uint64_t v18;

  v3 = *(_QWORD **)(v2 + 80);
  v4 = v3[2];
  if (v4)
  {
    v7 = v3[4] == a1 && v3[5] == a2;
    if (!v7 && (sub_1B2229D24() & 1) == 0)
    {
      if (v4 == 1)
        return 0;
      v8 = v3[6] == a1 && v3[7] == a2;
      if (!v8 && (sub_1B2229D24() & 1) == 0)
      {
        v14 = v4 - 2;
        if (v4 == 2)
          return 0;
        for (i = v3 + 9; ; i += 2)
        {
          v17 = *(i - 1) == a1 && *i == a2;
          if (v17 || (sub_1B2229D24() & 1) != 0)
            break;
          v4 = 0;
          if (!--v14)
            return v4;
        }
      }
    }
    v9 = sub_1B1DB99B0(a1, a2, v3);
    if ((v10 & 1) == 0)
    {
      v11 = v9;
      v12 = *(_QWORD *)(v2 + 96);
      if (v12 >> 62)
      {
        swift_bridgeObjectRetain();
        v18 = sub_1B22296AC();
        swift_bridgeObjectRelease();
        if (v11 < v18)
        {
LABEL_16:
          v13 = *(_QWORD *)(v2 + 96);
          if ((v13 & 0xC000000000000001) != 0)
          {
            swift_bridgeObjectRetain();
            v4 = MEMORY[0x1B5E21018](v11, v13);
            swift_bridgeObjectRelease();
          }
          else
          {
            v4 = *(_QWORD *)(v13 + 8 * v11 + 32);
            swift_retain();
          }
          return v4;
        }
      }
      else if (v9 < *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        goto LABEL_16;
      }
    }
    return 0;
  }
  return v4;
}

_QWORD *sub_1B1FB74F8()
{
  return sub_1B1FB7520((void (*)(uint64_t))sub_1B1DF5424, (void (*)(_QWORD **))sub_1B1DD6758);
}

_QWORD *sub_1B1FB750C()
{
  return sub_1B1FB7520((void (*)(uint64_t))sub_1B1DF5474, (void (*)(_QWORD **))sub_1B1DD6758);
}

_QWORD *sub_1B1FB7520(void (*a1)(uint64_t), void (*a2)(_QWORD **))
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v9;

  if (!*(_QWORD *)(v2 + 16))
    return 0;
  v5 = swift_bridgeObjectRetain();
  a1(v5);
  swift_bridgeObjectRelease();
  v6 = swift_bridgeObjectRetain();
  v7 = sub_1B1DC8A9C(v6);
  swift_release();
  v9 = v7;
  a2(&v9);
  swift_release();
  return v9;
}

uint64_t sub_1B1FB75C4()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;

  v4 = MEMORY[0x1E0DEE9D8];
  v1 = *(_QWORD **)(v0 + 40);
  v2 = *(_QWORD *)(v0 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1B1DF6860(v1, v2, (void (*)(uint64_t, uint64_t, _QWORD *))sub_1B1FC0DD4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_1B1FB7658()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;

  v4 = MEMORY[0x1E0DEE9D8];
  v1 = *(_QWORD **)(v0 + 40);
  v2 = *(_QWORD *)(v0 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1B1DF6860(v1, v2, (void (*)(uint64_t, uint64_t, _QWORD *))sub_1B1FC0E78);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_1B1FB76E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  int v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;

  v5 = v4;
  swift_bridgeObjectRetain();
  v9 = swift_bridgeObjectRetain();
  v10 = sub_1B1FBECEC(v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v11 = *(_QWORD *)(v10 + 16);
  if (!v11)
  {
    swift_bridgeObjectRelease();
    v13 = (char *)MEMORY[0x1E0DEE9D8];
    if (!*(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16))
      return swift_bridgeObjectRelease();
    goto LABEL_23;
  }
  v32 = a2;
  v33 = a3;
  v34 = a4;
  swift_bridgeObjectRetain();
  v12 = (uint64_t *)(v10 + 40);
  v13 = (char *)MEMORY[0x1E0DEE9D8];
  v14 = MEMORY[0x1E0DEE9B8] + 8;
  do
  {
    v15 = *v12;
    *(_QWORD *)&v37 = *(v12 - 1);
    *((_QWORD *)&v37 + 1) = v15;
    swift_bridgeObjectRetain_n();
    sub_1B2228890();
    v16 = *((_QWORD *)&v37 + 1);
    v17 = v5[2];
    if (v17 && *(_QWORD *)(v17 + 16))
    {
      v18 = v37;
      swift_bridgeObjectRetain();
      v19 = sub_1B1DC3B00(v18, v16);
      if ((v20 & 1) != 0)
      {
        sub_1B19F8F0C(*(_QWORD *)(v17 + 56) + 88 * v19, (uint64_t)&v38);
      }
      else
      {
        v43 = 0;
        v41 = 0u;
        v42 = 0u;
        v39 = 0u;
        v40 = 0u;
        v38 = 0u;
      }
      swift_bridgeObjectRelease();
    }
    else
    {
      v43 = 0;
      v41 = 0u;
      v42 = 0u;
      v39 = 0u;
      v40 = 0u;
      v38 = 0u;
    }
    swift_bridgeObjectRelease();
    if (!*((_QWORD *)&v38 + 1))
    {
      sub_1B1B1F3E4((uint64_t)&v38, (unint64_t *)&unk_1ED4BB3A0, (uint64_t)&_s8MetadataVN);
      v35 = 0u;
      v36 = 0u;
LABEL_4:
      sub_1B1B1F3E4((uint64_t)&v35, (unint64_t *)&qword_1ED4BB150, v14);
      goto LABEL_5;
    }
    sub_1B1A0DCD4((uint64_t)&v41 + 8, (uint64_t)&v35);
    sub_1B1A203C4((uint64_t)&v38);
    if (!*((_QWORD *)&v36 + 1))
      goto LABEL_4;
    sub_1B1A0DDAC(&v35, &v38);
    sub_1B1A02864((uint64_t)&v38, (uint64_t)&v35);
    swift_dynamicCast();
    v21 = v37;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v13 = sub_1B1C62D94(0, *((_QWORD *)v13 + 2) + 1, 1, v13);
    v23 = *((_QWORD *)v13 + 2);
    v22 = *((_QWORD *)v13 + 3);
    if (v23 >= v22 >> 1)
      v13 = sub_1B1C62D94(v22 > 1, v23 + 1, 1, v13);
    *((_QWORD *)v13 + 2) = v23 + 1;
    *(_QWORD *)&v13[8 * v23 + 32] = v21;
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v38);
LABEL_5:
    swift_bridgeObjectRelease();
    v12 += 2;
    --v11;
  }
  while (v11);
  swift_bridgeObjectRelease_n();
  a3 = v33;
  a4 = v34;
  a2 = v32;
  if (!*((_QWORD *)v13 + 2))
    return swift_bridgeObjectRelease();
LABEL_23:
  sub_1B19FA278(a4, (uint64_t)&v38);
  if (*((_QWORD *)&v38 + 1) == 39)
  {
    v24 = (*(uint64_t (**)(uint64_t, uint64_t))(*v5 + 1440))(a2, a3);
    v25 = *((_QWORD *)v13 + 4);
    v26 = *((_QWORD *)v13 + 5);
    sub_1B1C8AC7C(0, (unint64_t *)&qword_1ED4BA5B8);
    *((_QWORD *)&v36 + 1) = v27;
    *(_QWORD *)&v35 = v25;
    *((_QWORD *)&v35 + 1) = v26;
    if (swift_weakLoadStrong())
    {
      v28 = *(_QWORD *)(v24 + 32);
      *(_QWORD *)&v37 = *(_QWORD *)(v24 + 24);
      *((_QWORD *)&v37 + 1) = v28;
      swift_bridgeObjectRetain_n();
      sub_1B2228890();
      swift_bridgeObjectRelease();
      sub_1B1E02AF4(v37, *((uint64_t *)&v37 + 1), (uint64_t)&v35);
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_release();
    }
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v35);
    return swift_bridgeObjectRelease();
  }
  else
  {
    if (qword_1ED4BF430 != -1)
      swift_once();
    *(_QWORD *)&v35 = 0;
    *((_QWORD *)&v35 + 1) = 0xE000000000000000;
    swift_retain();
    sub_1B2229430();
    v37 = v35;
    sub_1B2228890();
    sub_1B19FA278(a4, (uint64_t)&v35);
    sub_1B22295EC();
    v29 = v37;
    v30 = sub_1B2228E90();
    if (qword_1ED4BF658 != -1)
      swift_once();
    *(_QWORD *)&v35 = 0;
    swift_retain();
    sub_1B1F1AD70(v30, (uint64_t *)&v35, v29, *((uint64_t *)&v29 + 1));
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    return swift_release();
  }
}

uint64_t sub_1B1FB7BE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  int v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  __int128 v31;
  int v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;

  v5 = v4;
  swift_bridgeObjectRetain();
  v9 = swift_bridgeObjectRetain();
  v10 = sub_1B1FBECEC(v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v11 = *(_QWORD *)(v10 + 16);
  if (v11)
  {
    v36 = a2;
    v37 = a3;
    v38 = a4;
    swift_bridgeObjectRetain();
    v12 = (uint64_t *)(v10 + 40);
    v13 = (char *)MEMORY[0x1E0DEE9D8];
    v14 = MEMORY[0x1E0DEE9B8] + 8;
    while (1)
    {
      v15 = *v12;
      *(_QWORD *)&v43 = *(v12 - 1);
      *((_QWORD *)&v43 + 1) = v15;
      swift_bridgeObjectRetain_n();
      sub_1B2228890();
      v16 = *((_QWORD *)&v43 + 1);
      v17 = v5[2];
      if (v17 && *(_QWORD *)(v17 + 16))
      {
        v18 = v43;
        swift_bridgeObjectRetain();
        v19 = sub_1B1DC3B00(v18, v16);
        if ((v20 & 1) != 0)
        {
          sub_1B19F8F0C(*(_QWORD *)(v17 + 56) + 88 * v19, (uint64_t)&v44);
        }
        else
        {
          v49 = 0;
          v47 = 0u;
          v48 = 0u;
          v45 = 0u;
          v46 = 0u;
          v44 = 0u;
        }
        swift_bridgeObjectRelease();
      }
      else
      {
        v49 = 0;
        v47 = 0u;
        v48 = 0u;
        v45 = 0u;
        v46 = 0u;
        v44 = 0u;
      }
      swift_bridgeObjectRelease();
      if (*((_QWORD *)&v44 + 1))
      {
        sub_1B1A0DCD4((uint64_t)&v47 + 8, (uint64_t)&v41);
        sub_1B1A203C4((uint64_t)&v44);
        if (*((_QWORD *)&v42 + 1))
        {
          sub_1B1A0DDAC(&v41, &v44);
          sub_1B1A02864((uint64_t)&v44, (uint64_t)&v41);
          swift_dynamicCast();
          v21 = v43;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v13 = sub_1B1C635D8(0, *((_QWORD *)v13 + 2) + 1, 1, v13);
          v23 = *((_QWORD *)v13 + 2);
          v22 = *((_QWORD *)v13 + 3);
          if (v23 >= v22 >> 1)
            v13 = sub_1B1C635D8(v22 > 1, v23 + 1, 1, v13);
          *((_QWORD *)v13 + 2) = v23 + 1;
          *(_DWORD *)&v13[4 * v23 + 32] = v21;
          _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v44);
          goto LABEL_5;
        }
      }
      else
      {
        sub_1B1B1F3E4((uint64_t)&v44, (unint64_t *)&unk_1ED4BB3A0, (uint64_t)&_s8MetadataVN);
        v41 = 0u;
        v42 = 0u;
      }
      sub_1B1B1F3E4((uint64_t)&v41, (unint64_t *)&qword_1ED4BB150, v14);
LABEL_5:
      swift_bridgeObjectRelease();
      v12 += 2;
      if (!--v11)
      {
        swift_bridgeObjectRelease_n();
        a3 = v37;
        a4 = v38;
        a2 = v36;
        if (!*((_QWORD *)v13 + 2))
          return swift_bridgeObjectRelease();
LABEL_23:
        sub_1B19FA278(a4, (uint64_t)&v44);
        switch(*((_QWORD *)&v44 + 1))
        {
          case 0xELL:
            v24 = (*(uint64_t (**)(uint64_t, uint64_t))(*v5 + 1440))(a2, a3);
            v25 = *((_QWORD *)v13 + 4);
            sub_1B19F8E54(0, &qword_1ED4BB080, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], MEMORY[0x1E0DEDD20]);
            *((_QWORD *)&v42 + 1) = v26;
            *(_QWORD *)&v41 = v25;
            goto LABEL_33;
          case 0xFLL:
            v24 = (*(uint64_t (**)(uint64_t, uint64_t))(*v5 + 1440))(a2, a3);
            *(_QWORD *)&v27 = *((_QWORD *)v13 + 4);
            DWORD2(v27) = *((_DWORD *)v13 + 10);
            v39 = v27;
            sub_1B19F8E54(0, (unint64_t *)&qword_1ED4BB0A0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50]);
            *((_QWORD *)&v42 + 1) = v28;
            *(_QWORD *)&v41 = swift_allocObject();
            v29 = v39;
            HIDWORD(v29) = 0;
            *(_OWORD *)(v41 + 16) = v29;
            goto LABEL_33;
          case 0x10:
            v24 = (*(uint64_t (**)(uint64_t, uint64_t))(*v5 + 1440))(a2, a3);
            v40 = *((_OWORD *)v13 + 2);
            sub_1B19F8E54(0, (unint64_t *)&qword_1ED4BB0E0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDDA8]);
            *((_QWORD *)&v42 + 1) = v30;
            *(_QWORD *)&v41 = swift_allocObject();
            *(_OWORD *)(v41 + 16) = v40;
            goto LABEL_33;
          case 0x28:
            v24 = (*(uint64_t (**)(uint64_t, uint64_t))(*v5 + 1440))(a2, a3);
            sub_1B1C8AC7C(0, (unint64_t *)&qword_1ED4BA5A8);
            *((_QWORD *)&v42 + 1) = v34;
            *(_QWORD *)&v41 = *((_QWORD *)v13 + 4);
LABEL_33:
            if (swift_weakLoadStrong())
            {
              v35 = *(_QWORD *)(v24 + 32);
              *(_QWORD *)&v43 = *(_QWORD *)(v24 + 24);
              *((_QWORD *)&v43 + 1) = v35;
              swift_bridgeObjectRetain_n();
              sub_1B2228890();
              swift_bridgeObjectRelease();
              sub_1B1E02AF4(v43, *((uint64_t *)&v43 + 1), (uint64_t)&v41);
              swift_release();
              swift_release();
              swift_bridgeObjectRelease();
            }
            else
            {
              swift_release();
            }
            _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v41);
            return swift_bridgeObjectRelease();
          default:
            if (qword_1ED4BF430 != -1)
              swift_once();
            *(_QWORD *)&v41 = 0;
            *((_QWORD *)&v41 + 1) = 0xE000000000000000;
            swift_retain();
            sub_1B2229430();
            v43 = v41;
            sub_1B2228890();
            sub_1B19FA278(a4, (uint64_t)&v41);
            sub_1B22295EC();
            v31 = v43;
            v32 = sub_1B2228E90();
            if (qword_1ED4BF658 != -1)
              swift_once();
            *(_QWORD *)&v41 = 0;
            swift_retain();
            sub_1B1F1AD70(v32, (uint64_t *)&v41, v31, *((uint64_t *)&v31 + 1));
            swift_bridgeObjectRelease();
            swift_release();
            swift_bridgeObjectRelease();
            return swift_release();
        }
      }
    }
  }
  swift_bridgeObjectRelease();
  v13 = (char *)MEMORY[0x1E0DEE9D8];
  if (*(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16))
    goto LABEL_23;
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B1FB825C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _OWORD *v27;
  uint64_t v28;
  _OWORD *v29;
  uint64_t v30;
  __int128 v32;
  int v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;

  v5 = v4;
  swift_bridgeObjectRetain();
  v9 = swift_bridgeObjectRetain();
  v10 = sub_1B1FBECEC(v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v11 = *(_QWORD *)(v10 + 16);
  if (!v11)
  {
    swift_bridgeObjectRelease();
    v13 = (char *)MEMORY[0x1E0DEE9D8];
    if (!*(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16))
      return swift_bridgeObjectRelease();
    goto LABEL_23;
  }
  v34 = a2;
  v36 = a3;
  v39 = a4;
  swift_bridgeObjectRetain();
  v12 = (uint64_t *)(v10 + 40);
  v13 = (char *)MEMORY[0x1E0DEE9D8];
  v14 = MEMORY[0x1E0DEE9B8] + 8;
  do
  {
    v15 = *v12;
    *(_QWORD *)&v49 = *(v12 - 1);
    *((_QWORD *)&v49 + 1) = v15;
    swift_bridgeObjectRetain_n();
    sub_1B2228890();
    v16 = *((_QWORD *)&v49 + 1);
    v17 = v5[2];
    if (v17 && *(_QWORD *)(v17 + 16))
    {
      v18 = v49;
      swift_bridgeObjectRetain();
      v19 = sub_1B1DC3B00(v18, v16);
      if ((v20 & 1) != 0)
      {
        sub_1B19F8F0C(*(_QWORD *)(v17 + 56) + 88 * v19, (uint64_t)&v50);
      }
      else
      {
        v55 = 0;
        v53 = 0u;
        v54 = 0u;
        v51 = 0u;
        v52 = 0u;
        v50 = 0u;
      }
      swift_bridgeObjectRelease();
    }
    else
    {
      v55 = 0;
      v53 = 0u;
      v54 = 0u;
      v51 = 0u;
      v52 = 0u;
      v50 = 0u;
    }
    swift_bridgeObjectRelease();
    if (!*((_QWORD *)&v50 + 1))
    {
      sub_1B1B1F3E4((uint64_t)&v50, (unint64_t *)&unk_1ED4BB3A0, (uint64_t)&_s8MetadataVN);
      v47 = 0u;
      v48 = 0u;
LABEL_4:
      sub_1B1B1F3E4((uint64_t)&v47, (unint64_t *)&qword_1ED4BB150, v14);
      goto LABEL_5;
    }
    sub_1B1A0DCD4((uint64_t)&v53 + 8, (uint64_t)&v47);
    sub_1B1A203C4((uint64_t)&v50);
    if (!*((_QWORD *)&v48 + 1))
      goto LABEL_4;
    sub_1B1A0DDAC(&v47, &v50);
    sub_1B1A02864((uint64_t)&v50, (uint64_t)&v47);
    sub_1B19F8E54(0, (unint64_t *)&qword_1ED4BB0A0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50]);
    swift_dynamicCast();
    v43 = v49;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v13 = sub_1B1C636E0(0, *((_QWORD *)v13 + 2) + 1, 1, v13);
    v22 = *((_QWORD *)v13 + 2);
    v21 = *((_QWORD *)v13 + 3);
    if (v22 >= v21 >> 1)
      v13 = sub_1B1C636E0(v21 > 1, v22 + 1, 1, v13);
    *((_QWORD *)v13 + 2) = v22 + 1;
    *(_OWORD *)&v13[16 * v22 + 32] = v43;
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v50);
LABEL_5:
    swift_bridgeObjectRelease();
    v12 += 2;
    --v11;
  }
  while (v11);
  swift_bridgeObjectRelease_n();
  a4 = v39;
  a3 = v36;
  a2 = v34;
  if (!*((_QWORD *)v13 + 2))
    return swift_bridgeObjectRelease();
LABEL_23:
  sub_1B19FA278(a4, (uint64_t)&v50);
  switch(*((_QWORD *)&v50 + 1))
  {
    case 0x18:
      v23 = (*(uint64_t (**)(uint64_t, uint64_t))(*v5 + 1440))(a2, a3);
      v35 = *((_OWORD *)v13 + 3);
      v37 = *((_OWORD *)v13 + 2);
      v41 = *((_OWORD *)v13 + 5);
      v45 = *((_OWORD *)v13 + 4);
      type metadata accessor for simd_float4x3(0);
      *((_QWORD *)&v48 + 1) = v26;
      v27 = (_OWORD *)swift_allocObject();
      *(_QWORD *)&v47 = v27;
      v27[1] = v37;
      v27[2] = v35;
      v27[3] = v45;
      v27[4] = v41;
      if (swift_weakLoadStrong())
      {
LABEL_31:
        v30 = *(_QWORD *)(v23 + 32);
        *(_QWORD *)&v49 = *(_QWORD *)(v23 + 24);
        *((_QWORD *)&v49 + 1) = v30;
        swift_bridgeObjectRetain_n();
        sub_1B2228890();
        swift_bridgeObjectRelease();
        sub_1B1E02AF4(v49, *((uint64_t *)&v49 + 1), (uint64_t)&v47);
        swift_release();
        swift_release();
        swift_bridgeObjectRelease();
        goto LABEL_32;
      }
LABEL_28:
      swift_release();
LABEL_32:
      _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v47);
      return swift_bridgeObjectRelease();
    case 0x15:
      v23 = (*(uint64_t (**)(uint64_t, uint64_t))(*v5 + 1440))(a2, a3);
      v42 = *((_OWORD *)v13 + 3);
      v46 = *((_OWORD *)v13 + 2);
      v38 = *((_OWORD *)v13 + 4);
      type metadata accessor for simd_float3x3(0);
      *((_QWORD *)&v48 + 1) = v28;
      v29 = (_OWORD *)swift_allocObject();
      *(_QWORD *)&v47 = v29;
      v29[1] = v46;
      v29[2] = v42;
      v29[3] = v38;
LABEL_30:
      if (swift_weakLoadStrong())
        goto LABEL_31;
      goto LABEL_28;
    case 0x12:
      v23 = (*(uint64_t (**)(uint64_t, uint64_t))(*v5 + 1440))(a2, a3);
      v40 = *((_OWORD *)v13 + 3);
      v44 = *((_OWORD *)v13 + 2);
      type metadata accessor for simd_float2x3(0);
      *((_QWORD *)&v48 + 1) = v24;
      v25 = swift_allocObject();
      *(_QWORD *)&v47 = v25;
      *(_OWORD *)(v25 + 16) = v44;
      *(_OWORD *)(v25 + 32) = v40;
      goto LABEL_30;
  }
  if (qword_1ED4BF430 != -1)
    swift_once();
  *(_QWORD *)&v47 = 0;
  *((_QWORD *)&v47 + 1) = 0xE000000000000000;
  swift_retain();
  sub_1B2229430();
  v49 = v47;
  sub_1B2228890();
  sub_1B19FA278(a4, (uint64_t)&v47);
  sub_1B22295EC();
  v32 = v49;
  v33 = sub_1B2228E90();
  if (qword_1ED4BF658 != -1)
    swift_once();
  *(_QWORD *)&v47 = 0;
  swift_retain();
  sub_1B1F1AD70(v33, (uint64_t *)&v47, v32, *((uint64_t *)&v32 + 1));
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t sub_1B1FB88A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _OWORD *v27;
  uint64_t v28;
  _OWORD *v29;
  uint64_t v30;
  __int128 v32;
  int v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;

  v5 = v4;
  swift_bridgeObjectRetain();
  v9 = swift_bridgeObjectRetain();
  v10 = sub_1B1FBECEC(v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v11 = *(_QWORD *)(v10 + 16);
  if (!v11)
  {
    swift_bridgeObjectRelease();
    v13 = (char *)MEMORY[0x1E0DEE9D8];
    if (!*(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16))
      return swift_bridgeObjectRelease();
    goto LABEL_23;
  }
  v34 = a2;
  v36 = a3;
  v39 = a4;
  swift_bridgeObjectRetain();
  v12 = (uint64_t *)(v10 + 40);
  v13 = (char *)MEMORY[0x1E0DEE9D8];
  v14 = MEMORY[0x1E0DEE9B8] + 8;
  do
  {
    v15 = *v12;
    *(_QWORD *)&v49 = *(v12 - 1);
    *((_QWORD *)&v49 + 1) = v15;
    swift_bridgeObjectRetain_n();
    sub_1B2228890();
    v16 = *((_QWORD *)&v49 + 1);
    v17 = v5[2];
    if (v17 && *(_QWORD *)(v17 + 16))
    {
      v18 = v49;
      swift_bridgeObjectRetain();
      v19 = sub_1B1DC3B00(v18, v16);
      if ((v20 & 1) != 0)
      {
        sub_1B19F8F0C(*(_QWORD *)(v17 + 56) + 88 * v19, (uint64_t)&v50);
      }
      else
      {
        v55 = 0;
        v53 = 0u;
        v54 = 0u;
        v51 = 0u;
        v52 = 0u;
        v50 = 0u;
      }
      swift_bridgeObjectRelease();
    }
    else
    {
      v55 = 0;
      v53 = 0u;
      v54 = 0u;
      v51 = 0u;
      v52 = 0u;
      v50 = 0u;
    }
    swift_bridgeObjectRelease();
    if (!*((_QWORD *)&v50 + 1))
    {
      sub_1B1B1F3E4((uint64_t)&v50, (unint64_t *)&unk_1ED4BB3A0, (uint64_t)&_s8MetadataVN);
      v47 = 0u;
      v48 = 0u;
LABEL_4:
      sub_1B1B1F3E4((uint64_t)&v47, (unint64_t *)&qword_1ED4BB150, v14);
      goto LABEL_5;
    }
    sub_1B1A0DCD4((uint64_t)&v53 + 8, (uint64_t)&v47);
    sub_1B1A203C4((uint64_t)&v50);
    if (!*((_QWORD *)&v48 + 1))
      goto LABEL_4;
    sub_1B1A0DDAC(&v47, &v50);
    sub_1B1A02864((uint64_t)&v50, (uint64_t)&v47);
    sub_1B19F8E54(0, (unint64_t *)&qword_1ED4BB0E0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDDA8]);
    swift_dynamicCast();
    v43 = v49;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v13 = sub_1B1791058(0, *((_QWORD *)v13 + 2) + 1, 1, v13);
    v22 = *((_QWORD *)v13 + 2);
    v21 = *((_QWORD *)v13 + 3);
    if (v22 >= v21 >> 1)
      v13 = sub_1B1791058(v21 > 1, v22 + 1, 1, v13);
    *((_QWORD *)v13 + 2) = v22 + 1;
    *(_OWORD *)&v13[16 * v22 + 32] = v43;
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v50);
LABEL_5:
    swift_bridgeObjectRelease();
    v12 += 2;
    --v11;
  }
  while (v11);
  swift_bridgeObjectRelease_n();
  a4 = v39;
  a3 = v36;
  a2 = v34;
  if (!*((_QWORD *)v13 + 2))
    return swift_bridgeObjectRelease();
LABEL_23:
  sub_1B19FA278(a4, (uint64_t)&v50);
  switch(*((_QWORD *)&v50 + 1))
  {
    case 0x19:
      v23 = (*(uint64_t (**)(uint64_t, uint64_t))(*v5 + 1440))(a2, a3);
      v35 = *((_OWORD *)v13 + 3);
      v37 = *((_OWORD *)v13 + 2);
      v41 = *((_OWORD *)v13 + 5);
      v45 = *((_OWORD *)v13 + 4);
      type metadata accessor for simd_float4x4(0);
      *((_QWORD *)&v48 + 1) = v26;
      v27 = (_OWORD *)swift_allocObject();
      *(_QWORD *)&v47 = v27;
      v27[1] = v37;
      v27[2] = v35;
      v27[3] = v45;
      v27[4] = v41;
      if (swift_weakLoadStrong())
      {
LABEL_31:
        v30 = *(_QWORD *)(v23 + 32);
        *(_QWORD *)&v49 = *(_QWORD *)(v23 + 24);
        *((_QWORD *)&v49 + 1) = v30;
        swift_bridgeObjectRetain_n();
        sub_1B2228890();
        swift_bridgeObjectRelease();
        sub_1B1E02AF4(v49, *((uint64_t *)&v49 + 1), (uint64_t)&v47);
        swift_release();
        swift_release();
        swift_bridgeObjectRelease();
        goto LABEL_32;
      }
LABEL_28:
      swift_release();
LABEL_32:
      _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v47);
      return swift_bridgeObjectRelease();
    case 0x16:
      v23 = (*(uint64_t (**)(uint64_t, uint64_t))(*v5 + 1440))(a2, a3);
      v42 = *((_OWORD *)v13 + 3);
      v46 = *((_OWORD *)v13 + 2);
      v38 = *((_OWORD *)v13 + 4);
      type metadata accessor for simd_float3x4(0);
      *((_QWORD *)&v48 + 1) = v28;
      v29 = (_OWORD *)swift_allocObject();
      *(_QWORD *)&v47 = v29;
      v29[1] = v46;
      v29[2] = v42;
      v29[3] = v38;
LABEL_30:
      if (swift_weakLoadStrong())
        goto LABEL_31;
      goto LABEL_28;
    case 0x13:
      v23 = (*(uint64_t (**)(uint64_t, uint64_t))(*v5 + 1440))(a2, a3);
      v40 = *((_OWORD *)v13 + 3);
      v44 = *((_OWORD *)v13 + 2);
      type metadata accessor for simd_float2x4(0);
      *((_QWORD *)&v48 + 1) = v24;
      v25 = swift_allocObject();
      *(_QWORD *)&v47 = v25;
      *(_OWORD *)(v25 + 16) = v44;
      *(_OWORD *)(v25 + 32) = v40;
      goto LABEL_30;
  }
  if (qword_1ED4BF430 != -1)
    swift_once();
  *(_QWORD *)&v47 = 0;
  *((_QWORD *)&v47 + 1) = 0xE000000000000000;
  swift_retain();
  sub_1B2229430();
  v49 = v47;
  sub_1B2228890();
  sub_1B19FA278(a4, (uint64_t)&v47);
  sub_1B22295EC();
  v32 = v49;
  v33 = sub_1B2228E90();
  if (qword_1ED4BF658 != -1)
    swift_once();
  *(_QWORD *)&v47 = 0;
  swift_retain();
  sub_1B1F1AD70(v33, (uint64_t *)&v47, v32, *((uint64_t *)&v32 + 1));
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t sub_1B1FB8EEC(uint64_t a1)
{
  uint64_t Strong;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  __int128 *v11;
  char *v13;
  uint64_t v14;
  _QWORD *v15;
  __n128 *v16;
  uint64_t v17;
  _QWORD *v18;
  void (*v19)(uint64_t, uint64_t, __n128);
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  int v24;
  char *v25;
  uint64_t v26;
  _QWORD *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  _BYTE v33[40];
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40[5];

  Strong = swift_weakLoadStrong();
  if (!Strong)
  {
    v39 = 0;
    v37 = 0u;
    v38 = 0u;
    v35 = 0u;
    v36 = 0u;
    v34 = 0u;
    goto LABEL_13;
  }
  v3 = Strong;
  v4 = *(_QWORD *)(a1 + 32);
  v40[0] = *(_QWORD *)(a1 + 24);
  v40[1] = v4;
  swift_bridgeObjectRetain_n();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(v3 + 16);
  if (!v5 || !*(_QWORD *)(v5 + 16))
  {
    v39 = 0;
    v37 = 0u;
    v38 = 0u;
    v35 = 0u;
    v36 = 0u;
    v34 = 0u;
    swift_release();
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v6 = sub_1B1DC3B00(v40[0], v4);
  if ((v7 & 1) == 0)
  {
    v39 = 0;
    v37 = 0u;
    v38 = 0u;
    v35 = 0u;
    v36 = 0u;
    v34 = 0u;
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    goto LABEL_13;
  }
  sub_1B19F8F0C(*(_QWORD *)(v5 + 56) + 88 * v6, (uint64_t)&v34);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  if (!*((_QWORD *)&v34 + 1))
  {
LABEL_13:
    sub_1B1B1F3E4((uint64_t)&v34, (unint64_t *)&unk_1ED4BB3A0, (uint64_t)&_s8MetadataVN);
    v30 = 0u;
    v31 = 0u;
    goto LABEL_14;
  }
  sub_1B1A0DCD4((uint64_t)&v37 + 8, (uint64_t)&v30);
  sub_1B1A203C4((uint64_t)&v34);
  if (*((_QWORD *)&v31 + 1))
  {
    v8 = MEMORY[0x1E0DEE9B8];
    sub_1B1B1F3E4((uint64_t)&v30, (unint64_t *)&qword_1ED4BB150, MEMORY[0x1E0DEE9B8] + 8);
    sub_1B201D450((uint64_t)&v34);
    v9 = v35;
    sub_1B19FA2B4(v35, *((unint64_t *)&v35 + 1));
    sub_1B1A203C4((uint64_t)&v34);
    switch(*((_QWORD *)&v9 + 1))
    {
      case 0xELL:
      case 0xFLL:
      case 0x10:
      case 0x28:
        sub_1B201D450((uint64_t)&v30);
        sub_1B19FA278((uint64_t)&v31, (uint64_t)v40);
        sub_1B19F8C58(v40, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19FA2B4);
        sub_1B1A203C4((uint64_t)&v30);
        sub_1B201D450((uint64_t)&v30);
        if (*((_QWORD *)&v30 + 1))
        {
          sub_1B1A0DCD4((uint64_t)v33, (uint64_t)&v28);
          sub_1B1A203C4((uint64_t)&v30);
        }
        else
        {
          sub_1B1B1F3E4((uint64_t)&v30, (unint64_t *)&unk_1ED4BB3A0, (uint64_t)&_s8MetadataVN);
          v28 = 0u;
          v29 = 0u;
        }
        v13 = sub_1B1FBFF84((uint64_t)v40, (uint64_t)&v28);
        sub_1B19F8C58(v40, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19F9FEC);
        swift_retain();
        v14 = swift_bridgeObjectRetain();
        v15 = (_QWORD *)sub_1B1FC07F0(v14);
        swift_bridgeObjectRelease();
        swift_release();
        sub_1B1FC099C(v15, (uint64_t)v13, (void (*)(uint64_t, uint64_t, float))sub_1B1FC0E30);
        goto LABEL_27;
      case 0x11:
      case 0x12:
      case 0x13:
        goto LABEL_29;
      case 0x14:
      case 0x15:
      case 0x16:
        sub_1B201D450((uint64_t)&v30);
        sub_1B19FA278((uint64_t)&v31, (uint64_t)v40);
        sub_1B19F8C58(v40, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19FA2B4);
        sub_1B1A203C4((uint64_t)&v30);
        sub_1B201D450((uint64_t)&v30);
        if (*((_QWORD *)&v30 + 1))
        {
          sub_1B1A0DCD4((uint64_t)v33, (uint64_t)&v28);
          sub_1B1A203C4((uint64_t)&v30);
        }
        else
        {
          sub_1B1B1F3E4((uint64_t)&v30, (unint64_t *)&unk_1ED4BB3A0, (uint64_t)&_s8MetadataVN);
          v28 = 0u;
          v29 = 0u;
        }
        v16 = (__n128 *)sub_1B1FBEE9C((uint64_t)v40, (uint64_t)&v28);
        sub_1B19F8C58(v40, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19F9FEC);
        swift_retain();
        v17 = swift_bridgeObjectRetain();
        v18 = (_QWORD *)sub_1B1FC07F0(v17);
        swift_bridgeObjectRelease();
        swift_release();
        v19 = (void (*)(uint64_t, uint64_t, __n128))sub_1B1FC0E08;
        goto LABEL_26;
      case 0x17:
      case 0x18:
      case 0x19:
        sub_1B201D450((uint64_t)&v30);
        sub_1B19FA278((uint64_t)&v31, (uint64_t)v40);
        sub_1B19F8C58(v40, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19FA2B4);
        sub_1B1A203C4((uint64_t)&v30);
        sub_1B201D450((uint64_t)&v30);
        if (*((_QWORD *)&v30 + 1))
        {
          sub_1B1A0DCD4((uint64_t)v33, (uint64_t)&v28);
          sub_1B1A203C4((uint64_t)&v30);
        }
        else
        {
          sub_1B1B1F3E4((uint64_t)&v30, (unint64_t *)&unk_1ED4BB3A0, (uint64_t)&_s8MetadataVN);
          v28 = 0u;
          v29 = 0u;
        }
        v16 = (__n128 *)sub_1B1FBF4BC((uint64_t)v40, (uint64_t)&v28);
        sub_1B19F8C58(v40, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19F9FEC);
        swift_retain();
        v20 = swift_bridgeObjectRetain();
        v18 = (_QWORD *)sub_1B1FC07F0(v20);
        swift_bridgeObjectRelease();
        swift_release();
        v19 = (void (*)(uint64_t, uint64_t, __n128))sub_1B1FC0DE0;
LABEL_26:
        sub_1B1FBFADC(v18, v16, v19);
        goto LABEL_27;
      case 0x27:
        sub_1B201D450((uint64_t)&v30);
        sub_1B19FA278((uint64_t)&v31, (uint64_t)v40);
        sub_1B19F8C58(v40, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19FA2B4);
        sub_1B1A203C4((uint64_t)&v30);
        sub_1B201D450((uint64_t)&v30);
        if (*((_QWORD *)&v30 + 1))
        {
          sub_1B1A0DCD4((uint64_t)v33, (uint64_t)&v28);
          sub_1B1A203C4((uint64_t)&v30);
        }
        else
        {
          sub_1B1B1F3E4((uint64_t)&v30, (unint64_t *)&unk_1ED4BB3A0, (uint64_t)&_s8MetadataVN);
          v28 = 0u;
          v29 = 0u;
        }
        v25 = sub_1B1FBFBD8((uint64_t)v40, (uint64_t)&v28);
        sub_1B19F8C58(v40, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19F9FEC);
        swift_retain();
        v26 = swift_bridgeObjectRetain();
        v27 = (_QWORD *)sub_1B1FC07F0(v26);
        swift_bridgeObjectRelease();
        swift_release();
        sub_1B1FBFE84(v27, v25, (void (*)(uint64_t, uint64_t, uint64_t))sub_1B1FC0DD8);
LABEL_27:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v10 = v8 + 8;
        v11 = &v28;
        return sub_1B1B1F3E4((uint64_t)v11, (unint64_t *)&qword_1ED4BB150, v10);
      default:
        sub_1B19F9FEC(v9, *((unint64_t *)&v9 + 1));
LABEL_29:
        if (qword_1ED4BF430 != -1)
          swift_once();
        *(_QWORD *)&v30 = 0;
        *((_QWORD *)&v30 + 1) = 0xE000000000000000;
        swift_retain();
        sub_1B2229430();
        *(_OWORD *)v40 = v30;
        sub_1B2228890();
        v21 = *(_QWORD *)(a1 + 88);
        v22 = *(_OWORD *)(a1 + 72);
        v30 = *(_OWORD *)(a1 + 56);
        v31 = v22;
        v32 = v21;
        sub_1B22295EC();
        v23 = *(_OWORD *)v40;
        v24 = sub_1B2228E90();
        if (qword_1ED4BF658 != -1)
          swift_once();
        *(_QWORD *)&v30 = 0;
        swift_retain();
        sub_1B1F1AD70(v24, (uint64_t *)&v30, v23, *((uint64_t *)&v23 + 1));
        swift_release();
        swift_bridgeObjectRelease();
        return swift_release();
    }
  }
LABEL_14:
  v10 = MEMORY[0x1E0DEE9B8] + 8;
  v11 = &v30;
  return sub_1B1B1F3E4((uint64_t)v11, (unint64_t *)&qword_1ED4BB150, v10);
}

uint64_t sub_1B1FB9644(uint64_t a1, uint64_t a2)
{
  return sub_1B1FB9C1C(a1, a2);
}

_QWORD *sub_1B1FB9650(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *result;
  __int128 v26;
  int v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;

  v3 = v2;
  v37 = a1;
  *(_QWORD *)&v38 = a2;
  swift_bridgeObjectRetain();
  sub_1B2228890();
  v7 = v37;
  v6 = v38;
  v8 = v2[2];
  if (v8
    && *(_QWORD *)(v8 + 16)
    && (swift_bridgeObjectRetain(), sub_1B1DC3B00(v37, v38), v10 = v9, swift_bridgeObjectRelease(), (v10 & 1) != 0))
  {
    sub_1B1E02C04(v37, v38, &v29);
    sub_1B1A0DDAC(&v29, &v37);
    swift_dynamicCast();
    sub_1B1E0E85C(v33, *((uint64_t *)&v33 + 1), &v34);
    v37 = v34;
    v28 = v35;
    v38 = v35;
    v39 = v36;
    sub_1B1E029F8(v7, v6);
    swift_bridgeObjectRelease();
    v11 = v3[5];
    swift_bridgeObjectRetain();
    v12 = sub_1B1FB75C4();
    v14 = v13;
    v3[5] = v12;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v3[6] = v14;
    swift_bridgeObjectRetain();
    v15 = swift_bridgeObjectRelease();
    (*(void (**)(uint64_t))(*v3 + 1336))(v15);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    switch(v28)
    {
      case 14:
      case 15:
      case 16:
      case 40:
        sub_1B1FB7BE8(v11, a1, a2, (uint64_t)&v37);
        goto LABEL_17;
      case 17:
      case 18:
      case 19:
        if (qword_1ED4BF430 != -1)
          swift_once();
        *(_QWORD *)&v29 = 0;
        *((_QWORD *)&v29 + 1) = 0xE000000000000000;
        swift_retain();
        sub_1B2229430();
        v33 = v29;
        sub_1B2228890();
        v29 = xmmword_1B2285F70;
        v31 = 0;
        v32 = 0;
        v30 = 0;
        sub_1B22295EC();
        v26 = v33;
        v27 = sub_1B2228E90();
        if (qword_1ED4BF658 != -1)
          swift_once();
        *(_QWORD *)&v29 = 0;
        swift_retain();
        sub_1B1F1AD70(v27, (uint64_t *)&v29, v26, *((uint64_t *)&v26 + 1));
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        goto LABEL_18;
      case 20:
      case 21:
      case 22:
        sub_1B1FB825C(v11, a1, a2, (uint64_t)&v37);
        goto LABEL_17;
      case 23:
      case 24:
      case 25:
        sub_1B1FB88A4(v11, a1, a2, (uint64_t)&v37);
        goto LABEL_17;
      case 39:
        sub_1B1FB76E0(v11, a1, a2, (uint64_t)&v37);
        goto LABEL_17;
      default:
LABEL_17:
        swift_bridgeObjectRelease();
LABEL_18:
        result = sub_1B19F8C58(&v34, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1A20360);
        break;
    }
  }
  else
  {
    v16 = (*(uint64_t (**)(uint64_t, uint64_t))(*v3 + 1440))(a1, a2);
    if (v16)
    {
      v17 = v16;
      sub_1B19FA278(v16 + 56, (uint64_t)&v37);
      sub_1B19F8C58(&v37, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19FA2B4);
      v18 = sub_1B1E03DBC();
      v20 = v19;
      sub_1B19F8C58(&v37, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19F9FEC);
      *(_QWORD *)&v36 = MEMORY[0x1E0DEA968];
      v34 = v18;
      *(_QWORD *)&v35 = v20;
      sub_1B1E02AF4(v7, v6, (uint64_t)&v34);
      swift_bridgeObjectRelease();
      _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v34);
      v21 = sub_1B1FB7658();
      v23 = v22;
      v3[5] = v21;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v3[6] = v23;
      swift_bridgeObjectRetain();
      v24 = swift_bridgeObjectRelease();
      (*(void (**)(uint64_t))(*v3 + 1336))(v24);
      sub_1B1FB8EEC(v17);
      swift_release();
      swift_bridgeObjectRelease();
      return (_QWORD *)swift_bridgeObjectRelease();
    }
    else
    {
      return (_QWORD *)swift_bridgeObjectRelease();
    }
  }
  return result;
}

uint64_t sub_1B1FB9AF0()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;

  v4 = MEMORY[0x1E0DEE9D8];
  v1 = *(_QWORD **)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1B1DF6860(v1, v2, (void (*)(uint64_t, uint64_t, _QWORD *))sub_1B1FC0DD4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_1B1FB9B84()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;

  v4 = MEMORY[0x1E0DEE9D8];
  v1 = *(_QWORD **)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1B1DF6860(v1, v2, (void (*)(uint64_t, uint64_t, _QWORD *))sub_1B1FC0DBC);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_1B1FB9C0C(uint64_t a1, uint64_t a2)
{
  return sub_1B1FB9C1C(a1, a2);
}

uint64_t sub_1B1FB9C1C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;

  swift_bridgeObjectRetain();
  sub_1B2228890();
  v3 = *(_QWORD *)(v2 + 16);
  if (v3 && *(_QWORD *)(v3 + 16))
  {
    swift_bridgeObjectRetain();
    sub_1B1DC3B00(a1, a2);
    v5 = v4;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    v5 = 0;
  }
  return v5 & 1;
}

uint64_t sub_1B1FB9CC8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  __int128 v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  _OWORD v25[2];
  uint64_t v26;

  v3 = v2;
  *(_QWORD *)&v25[0] = a1;
  *((_QWORD *)&v25[0] + 1) = a2;
  swift_bridgeObjectRetain();
  sub_1B2228890();
  v6 = v25[0];
  v7 = *(_QWORD *)(v2 + 16);
  if (v7
    && *(_QWORD *)(v7 + 16)
    && (swift_bridgeObjectRetain(),
        sub_1B1DC3B00(*(uint64_t *)&v25[0], *((uint64_t *)&v25[0] + 1)),
        v9 = v8,
        swift_bridgeObjectRelease(),
        (v9 & 1) != 0))
  {
    sub_1B1E02C04(*(uint64_t *)&v25[0], *((uint64_t *)&v25[0] + 1), &v22);
    sub_1B1A0DDAC(&v22, v25);
    swift_dynamicCast();
    sub_1B1E029F8(v6, *((uint64_t *)&v6 + 1));
    swift_bridgeObjectRelease();
    sub_1B1E0E85C(v20, v21, (uint64_t *)&v22);
    v25[0] = v22;
    v25[1] = v23;
    v26 = v24;
    v10 = sub_1B1FB9AF0();
    v12 = v11;
    sub_1B19F8C58(&v22, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1A20360);
    sub_1B1FB50D0(v10, v12);
  }
  else
  {
    v13 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 1456))(a1, a2);
    sub_1B19FA278(v13 + 56, (uint64_t)v25);
    sub_1B19F8C58(v25, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19FA2B4);
    v14 = sub_1B1E03DBC();
    v16 = v15;
    sub_1B19F8C58(v25, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19F9FEC);
    *((_QWORD *)&v23 + 1) = MEMORY[0x1E0DEA968];
    *(_QWORD *)&v22 = v14;
    *((_QWORD *)&v22 + 1) = v16;
    sub_1B1E02AF4(v6, *((uint64_t *)&v6 + 1), (uint64_t)&v22);
    swift_bridgeObjectRelease();
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v22);
    v17 = sub_1B1FB9B84();
    sub_1B1FB50D0(v17, v18);
    swift_release();
  }
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *sub_1B1FB9EE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;

  v4 = MEMORY[0x1E0DEE9D8];
  v3[6] = MEMORY[0x1E0DEE9D8];
  v3[7] = v4;
  v3[8] = v4;
  v3[9] = v4;
  v3[10] = v4;
  v3[11] = v4;
  v3[12] = v4;
  v3[13] = v4;
  v3[14] = v4;
  v3[15] = 0;
  v3[16] = v4;
  v3[2] = a3;
  v3[3] = a1;
  v3[4] = a2;
  v3[5] = v4;
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t sub_1B1FB9F2C(char *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const char *v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  char *v25;
  uint64_t v26;
  _QWORD v27[5];

  sub_1B19F8E54(0, &qword_1EEF61AA8, (uint64_t (*)(void))sub_1B1FC0CFC, (uint64_t)&type metadata for GraphV1CodeGeneration.BaseObject.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v7);
  v9 = (char *)&v20 - v8;
  v1[3] = 0;
  v1[4] = 0xE000000000000000;
  v10 = MEMORY[0x1E0DEE9D8];
  v1[5] = MEMORY[0x1E0DEE9D8];
  v1[6] = v10;
  v1[7] = v10;
  v1[8] = v10;
  v1[9] = v10;
  v1[10] = v10;
  v1[11] = v10;
  v1[12] = v10;
  v1[13] = v10;
  v1[14] = v10;
  v1[15] = 0;
  v1[16] = v10;
  sub_1B19FA198((uint64_t)a1, (uint64_t)v27);
  v11 = sub_1B1E09AD4(v27);
  if (!v2)
  {
    sub_1B19FA070(a1, *((_QWORD *)a1 + 3));
    sub_1B1FC0CFC();
    swift_retain();
    sub_1B222A150();
    v22 = v6;
    v23 = 0;
    v12 = sub_1B2229880();
    v13 = *(_QWORD *)(v12 + 16);
    v25 = v9;
    v26 = v5;
    if (v13)
    {
      v20 = (const char *)v11;
      v21 = a1;
      swift_bridgeObjectRetain();
      v24 = "inParameterNames";
      __asm { BR              X9 }
    }
    swift_bridgeObjectRelease();
    v14 = sub_1B2229880();
    if (*(_QWORD *)(v14 + 16))
    {
      swift_bridgeObjectRetain();
      v24 = "inParameterNames";
      v20 = "outParameterNames";
      v21 = "inParameterDefaultValues";
      __asm { BR              X9 }
    }
    swift_bridgeObjectRelease();
    v15 = sub_1B2229880();
    if (*(_QWORD *)(v15 + 16))
    {
      swift_bridgeObjectRetain();
      v24 = "previousInParameterNames";
      v20 = "outParameterNames";
      v21 = "inParameterDefaultValues";
      __asm { BR              X9 }
    }
    swift_bridgeObjectRelease();
    v16 = sub_1B2229880();
    if (*(_QWORD *)(v16 + 16))
    {
      swift_bridgeObjectRetain();
      v24 = "previousInParameterNames";
      v20 = "outParameterNames";
      v21 = "inParameterNames";
      __asm { BR              X9 }
    }
    swift_bridgeObjectRelease();
    v17 = sub_1B2229880();
    if (*(_QWORD *)(v17 + 16))
    {
      swift_bridgeObjectRetain();
      v24 = "previousInParameterNames";
      v20 = "inParameterDefaultValues";
      v21 = "inParameterNames";
      __asm { BR              X9 }
    }
    v18 = v22;
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v18 + 8))(v9, v5);
    swift_release();
  }
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  return v11;
}

uint64_t sub_1B1FBAA08()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_1B1FBAA8C(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t result;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;

  sub_1B19F8E54(0, &qword_1EEF61AC8, (uint64_t (*)(void))sub_1B1FC0CFC, (uint64_t)&type metadata for GraphV1CodeGeneration.BaseObject.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v7);
  v9 = (char *)&v13 - v8;
  result = sub_1B1E098F0(a1);
  if (!v2)
  {
    sub_1B19FA070(a1, a1[3]);
    sub_1B1FC0CFC();
    sub_1B222A180();
    v11 = v1[4];
    v12 = HIBYTE(v11) & 0xF;
    if ((v11 & 0x2000000000000000) == 0)
      v12 = v1[3] & 0xFFFFFFFFFFFFLL;
    if (v12)
    {
      LOBYTE(v15) = 0;
      swift_bridgeObjectRetain();
      sub_1B2229910();
      swift_bridgeObjectRelease();
    }
    if (*(_QWORD *)(v1[5] + 16))
    {
      v15 = v1[5];
      v14 = 1;
      sub_1B1A02758(0, (unint64_t *)&qword_1ED4BA490, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
      sub_1B1B28C94((unint64_t *)&qword_1EEF5AC40, MEMORY[0x1E0DEA970], MEMORY[0x1E0DEAF10]);
      sub_1B2229958();
    }
    if (*(_QWORD *)(v1[6] + 16))
    {
      v15 = v1[6];
      v14 = 2;
      sub_1B1A02758(0, &qword_1EEF61AB8, (uint64_t)&_s12MetadataTypeON, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
      sub_1B1FC0D40(&qword_1EEF61AD0, (uint64_t (*)(void))sub_1B19FA094, MEMORY[0x1E0DEAF10]);
      sub_1B2229958();
    }
    if (*(_QWORD *)(v1[10] + 16))
    {
      v15 = v1[10];
      v14 = 3;
      sub_1B1A02758(0, (unint64_t *)&qword_1ED4BA490, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
      sub_1B1B28C94((unint64_t *)&qword_1EEF5AC40, MEMORY[0x1E0DEA970], MEMORY[0x1E0DEAF10]);
      sub_1B2229958();
    }
    if (*(_QWORD *)(v1[11] + 16))
    {
      v15 = v1[11];
      v14 = 4;
      sub_1B1A02758(0, &qword_1EEF61AB8, (uint64_t)&_s12MetadataTypeON, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
      sub_1B1FC0D40(&qword_1EEF61AD0, (uint64_t (*)(void))sub_1B19FA094, MEMORY[0x1E0DEAF10]);
      sub_1B2229958();
    }
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  }
  return result;
}

uint64_t sub_1B1FBADF4(_QWORD **a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = (_QWORD *)sub_1B216D59C(v2);
  v3 = v2[2];
  v5[0] = (uint64_t)(v2 + 4);
  v5[1] = v3;
  result = sub_1B1FBC8E4(v5);
  *a1 = v2;
  return result;
}

uint64_t sub_1B1FBAE5C(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  _QWORD v5[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_1B216D5B0(v2);
  v3 = *(_QWORD *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  result = sub_1B1FBD0AC(v5);
  *a1 = v2;
  return result;
}

_QWORD *sub_1B1FBAEC4(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;

  v2 = MEMORY[0x1E0DEE9D8];
  v1[4] = 0xE000000000000000;
  v1[5] = v2;
  v1[6] = v2;
  v1[7] = v2;
  v1[8] = v2;
  v1[9] = v2;
  v1[10] = v2;
  v1[11] = v2;
  v1[12] = v2;
  v1[13] = v2;
  v1[14] = v2;
  v1[15] = 0;
  v1[16] = v2;
  v1[2] = a1;
  v1[3] = 0;
  return v1;
}

uint64_t sub_1B1FBAEF8(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1B1FBAF34 + 4 * byte_1B22AA758[a1]))(0x70696E5365646F43, 0xEB00000000746570);
}

uint64_t sub_1B1FBAF34()
{
  return 0x656C626169726156;
}

unint64_t sub_1B1FBAF58()
{
  return 0xD000000000000018;
}

uint64_t sub_1B1FBB008()
{
  return 0x656A624F65736142;
}

uint64_t sub_1B1FBB024()
{
  return 0x65746E6F43627553;
}

uint64_t sub_1B1FBB044(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v8;

  v2 = *a2;
  v3 = sub_1B1FBAEF8(*a1);
  v5 = v4;
  if (v3 == sub_1B1FBAEF8(v2) && v5 == v6)
    v8 = 1;
  else
    v8 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_1B1FBB0CC()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;

  v1 = *v0;
  sub_1B222A06C();
  sub_1B1FBAEF8(v1);
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

uint64_t sub_1B1FBB12C()
{
  unsigned __int8 *v0;

  sub_1B1FBAEF8(*v0);
  sub_1B2228824();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B1FBB16C()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;

  v1 = *v0;
  sub_1B222A06C();
  sub_1B1FBAEF8(v1);
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

uint64_t sub_1B1FBB1C8@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B1FC1224();
  *a1 = result;
  return result;
}

uint64_t sub_1B1FBB1F4@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1B1FBAEF8(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1B1FBB21C()
{
  sub_1B1FC126C();
  return sub_1B2228A4C();
}

uint64_t sub_1B1FBB278()
{
  sub_1B1FC126C();
  return sub_1B22289D4();
}

uint64_t sub_1B1FBB2C4(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;

  v8 = *(uint64_t (**)(uint64_t, uint64_t))(*a4 + 1272);
  swift_bridgeObjectRetain();
  v9 = v8(a1, a2);
  v11 = v10;
  _s11ParameterInCMa();
  v12 = (_QWORD *)swift_allocObject();
  swift_weakInit();
  swift_weakAssign();
  v12[3] = a1;
  v12[4] = a2;
  v12[5] = v9;
  v12[6] = v11;
  sub_1B19FA278((uint64_t)a3, (uint64_t)(v12 + 7));
  v13 = sub_1B19F8C58(a3, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19FA2B4);
  MEMORY[0x1B5E2064C](v13);
  if (*(_QWORD *)((a4[7] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((a4[7] & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
    sub_1B2228AF4();
  sub_1B2228B30();
  return sub_1B2228AD0();
}

uint64_t sub_1B1FBB3C0(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;

  v8 = *(uint64_t (**)(uint64_t, uint64_t))(*a4 + 1272);
  swift_bridgeObjectRetain();
  v9 = v8(a1, a2);
  v11 = v10;
  _s12ParameterOutCMa();
  v12 = (_QWORD *)swift_allocObject();
  swift_weakInit();
  swift_weakAssign();
  v12[3] = a1;
  v12[4] = a2;
  v12[5] = v9;
  v12[6] = v11;
  sub_1B19FA278((uint64_t)a3, (uint64_t)(v12 + 7));
  v13 = sub_1B19F8C58(a3, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19FA2B4);
  MEMORY[0x1B5E2064C](v13);
  if (*(_QWORD *)((a4[12] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((a4[12] & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
    sub_1B2228AF4();
  sub_1B2228B30();
  return sub_1B2228AD0();
}

_QWORD *sub_1B1FBB4BC(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, _QWORD **a6, _QWORD **a7)
{
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *result;
  _QWORD *v26;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  char v32;
  unint64_t v33;
  unint64_t v34;
  _QWORD v35[5];

  v14 = *(_QWORD *)(a4 + 24);
  v15 = *(_QWORD *)(a4 + 32);
  v16 = v14 == a1 && v15 == a2;
  if (v16 || (sub_1B2229D24() & 1) != 0)
  {
    v17 = *(_QWORD *)(a5 + 56);
    sub_1B19FA278(a4 + 56, (uint64_t)v35);
    swift_bridgeObjectRetain();
    sub_1B19F8C58(v35, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19FA2B4);
    v18 = sub_1B1DC3EBC((uint64_t)v35);
    if ((v19 & 1) != 0)
    {
      v20 = *(_QWORD *)(*(_QWORD *)(v17 + 56) + 8 * v18);
      swift_retain();
      swift_bridgeObjectRelease();
      sub_1B19F8C58(v35, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19F9FEC);
      v22 = *(_QWORD *)(v20 + 160);
      if (v22)
        v23 = *(_QWORD **)(v20 + 160);
      else
        v23 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      if (*(_QWORD *)(v20 + 168))
        v24 = *(_QWORD *)(v20 + 168);
      else
        v24 = MEMORY[0x1E0DEE9D8];
      MEMORY[0x1E0C80A78](v22, v21);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1B1DF9158(v23, v24, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1FC0E84);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return (_QWORD *)swift_release();
    }
    else
    {
      swift_bridgeObjectRelease();
      result = sub_1B19F8C58(v35, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19F9FEC);
      __break(1u);
    }
  }
  else
  {
    v26 = *a6;
    swift_bridgeObjectRetain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *a6 = v26;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v26 = sub_1B1C63044(0, v26[2] + 1, 1, v26);
      *a6 = v26;
    }
    v29 = v26[2];
    v28 = v26[3];
    if (v29 >= v28 >> 1)
    {
      v26 = sub_1B1C63044(v28 > 1, v29 + 1, 1, v26);
      *a6 = v26;
    }
    v26[2] = v29 + 1;
    v30 = &v26[2 * v29];
    v30[4] = a1;
    v30[5] = a2;
    v31 = *a7;
    sub_1B19F8C58(a3, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19FA2B4);
    v32 = swift_isUniquelyReferenced_nonNull_native();
    *a7 = v31;
    if ((v32 & 1) == 0)
    {
      v31 = sub_1B1C65128(0, v31[2] + 1, 1, v31);
      *a7 = v31;
    }
    v34 = v31[2];
    v33 = v31[3];
    if (v34 >= v33 >> 1)
    {
      v31 = sub_1B1C65128(v33 > 1, v34 + 1, 1, v31);
      *a7 = v31;
    }
    v31[2] = v34 + 1;
    return (_QWORD *)sub_1B19FA278((uint64_t)a3, (uint64_t)&v31[5 * v34 + 4]);
  }
  return result;
}

uint64_t sub_1B1FBB770(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD **a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t result;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v29 = a6;
  v30 = a7;
  swift_bridgeObjectRetain();
  sub_1B2228890();
  sub_1B2228890();
  v12 = v29;
  v13 = v30;
  v14 = *a5;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a5 = v14;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v14 = sub_1B1C63044(0, v14[2] + 1, 1, v14);
    *a5 = v14;
  }
  v17 = v14[2];
  v16 = v14[3];
  if (v17 >= v16 >> 1)
  {
    v14 = sub_1B1C63044(v16 > 1, v17 + 1, 1, v14);
    *a5 = v14;
  }
  v14[2] = v17 + 1;
  v18 = &v14[2 * v17];
  v18[4] = v12;
  v18[5] = v13;
  swift_bridgeObjectRetain();
  sub_1B1E0E85C(a3, a4, &v29);
  v19 = v29;
  v20 = v30;
  v21 = v31;
  v22 = v32;
  v23 = v33;
  v24 = (_QWORD *)*a8;
  result = swift_isUniquelyReferenced_nonNull_native();
  *a8 = (uint64_t)v24;
  if ((result & 1) == 0)
  {
    result = (uint64_t)sub_1B1C65128(0, v24[2] + 1, 1, v24);
    v24 = (_QWORD *)result;
    *a8 = result;
  }
  v27 = v24[2];
  v26 = v24[3];
  if (v27 >= v26 >> 1)
  {
    result = (uint64_t)sub_1B1C65128(v26 > 1, v27 + 1, 1, v24);
    v24 = (_QWORD *)result;
    *a8 = result;
  }
  v24[2] = v27 + 1;
  v28 = &v24[5 * v27];
  v28[4] = v19;
  v28[5] = v20;
  v28[6] = v21;
  v28[7] = v22;
  v28[8] = v23;
  return result;
}

uint64_t sub_1B1FBB918(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[4];

  result = (*(uint64_t (**)(void))(*(_QWORD *)a4 + 1440))();
  if (result)
  {
    v6 = result;
    v9[3] = MEMORY[0x1E0DEB418];
    v9[0] = a3;
    if (swift_weakLoadStrong())
    {
      v7 = *(_QWORD *)(v6 + 24);
      v8 = *(_QWORD *)(v6 + 32);
      swift_bridgeObjectRetain_n();
      sub_1B2228890();
      swift_bridgeObjectRelease();
      sub_1B1E02AF4(v7, v8, (uint64_t)v9);
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_release();
    }
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v9);
  }
  return result;
}

uint64_t sub_1B1FBBA00(float a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD v9[6];
  uint64_t v10;

  result = (*(uint64_t (**)(void))(*(_QWORD *)a4 + 1440))();
  if (result)
  {
    v6 = result;
    v10 = MEMORY[0x1E0DEB188];
    *(float *)v9 = a1;
    if (swift_weakLoadStrong())
    {
      v7 = *(_QWORD *)(v6 + 24);
      v8 = *(_QWORD *)(v6 + 32);
      swift_bridgeObjectRetain_n();
      sub_1B2228890();
      swift_bridgeObjectRelease();
      sub_1B1E02AF4(v7, v8, (uint64_t)v9);
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_release();
    }
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v9);
  }
  return result;
}

uint64_t sub_1B1FBBAF0(__n128 a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t *a5, uint64_t (*a6)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[4];

  v8 = (*(uint64_t (**)(void))(*(_QWORD *)a4 + 1440))();
  sub_1B19F8E54(0, a5, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], a6);
  v14[3] = v9;
  v14[0] = swift_allocObject();
  *(__n128 *)(v14[0] + 16) = a1;
  if (swift_weakLoadStrong())
  {
    v12 = *(_QWORD *)(v8 + 24);
    v13 = *(_QWORD *)(v8 + 32);
    swift_bridgeObjectRetain_n();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B1E02AF4(v12, v13, (uint64_t)v14);
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_release();
  }
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v14);
}

uint64_t sub_1B1FBBC10(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, _BYTE *a6, _QWORD **a7, _QWORD **a8, _QWORD *a9)
{
  char v16;
  uint64_t result;
  _QWORD *v18;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  char v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  char v28;
  unint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  char v33;
  unint64_t v34;
  unint64_t v35;

  swift_bridgeObjectRetain();
  sub_1B2228890();
  sub_1B1A2044C();
  sub_1B1A20490();
  v16 = sub_1B222862C();
  result = swift_bridgeObjectRelease();
  if ((v16 & 1) != 0)
  {
    if ((*a6 & 1) == 0)
    {
      v18 = *a7;
      swift_bridgeObjectRetain();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *a7 = v18;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        v18 = sub_1B1C63044(0, v18[2] + 1, 1, v18);
        *a7 = v18;
      }
      v21 = v18[2];
      v20 = v18[3];
      if (v21 >= v20 >> 1)
      {
        v18 = sub_1B1C63044(v20 > 1, v21 + 1, 1, v18);
        *a7 = v18;
      }
      v18[2] = v21 + 1;
      v22 = &v18[2 * v21];
      v22[4] = a4;
      v22[5] = a5;
      v23 = *a8;
      sub_1B19F8C58(a9, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19FA2B4);
      v24 = swift_isUniquelyReferenced_nonNull_native();
      *a8 = v23;
      if ((v24 & 1) == 0)
      {
        v23 = sub_1B1C65128(0, v23[2] + 1, 1, v23);
        *a8 = v23;
      }
      v26 = v23[2];
      v25 = v23[3];
      if (v26 >= v25 >> 1)
      {
        v23 = sub_1B1C65128(v25 > 1, v26 + 1, 1, v23);
        *a8 = v23;
      }
      v23[2] = v26 + 1;
      result = sub_1B19FA278((uint64_t)a9, (uint64_t)&v23[5 * v26 + 4]);
      *a6 = 1;
    }
  }
  else
  {
    v27 = *a7;
    swift_bridgeObjectRetain();
    v28 = swift_isUniquelyReferenced_nonNull_native();
    *a7 = v27;
    if ((v28 & 1) == 0)
    {
      v27 = sub_1B1C63044(0, v27[2] + 1, 1, v27);
      *a7 = v27;
    }
    v30 = v27[2];
    v29 = v27[3];
    if (v30 >= v29 >> 1)
    {
      v27 = sub_1B1C63044(v29 > 1, v30 + 1, 1, v27);
      *a7 = v27;
    }
    v27[2] = v30 + 1;
    v31 = &v27[2 * v30];
    v31[4] = a1;
    v31[5] = a2;
    v32 = *a8;
    sub_1B19F8C58(a3, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19FA2B4);
    v33 = swift_isUniquelyReferenced_nonNull_native();
    *a8 = v32;
    if ((v33 & 1) == 0)
    {
      v32 = sub_1B1C65128(0, v32[2] + 1, 1, v32);
      *a8 = v32;
    }
    v35 = v32[2];
    v34 = v32[3];
    if (v35 >= v34 >> 1)
    {
      v32 = sub_1B1C65128(v34 > 1, v35 + 1, 1, v32);
      *a8 = v32;
    }
    v32[2] = v35 + 1;
    return sub_1B19FA278((uint64_t)a3, (uint64_t)&v32[5 * v35 + 4]);
  }
  return result;
}

_QWORD *sub_1B1FBBF20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, _QWORD **a6, _QWORD **a7)
{
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *result;
  _QWORD *v26;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  char v32;
  unint64_t v33;
  unint64_t v34;
  _QWORD v35[5];

  v14 = *(_QWORD *)(a4 + 24);
  v15 = *(_QWORD *)(a4 + 32);
  v16 = v14 == a1 && v15 == a2;
  if (v16 || (sub_1B2229D24() & 1) != 0)
  {
    v17 = *(_QWORD *)(a5 + 64);
    sub_1B19FA278(a4 + 56, (uint64_t)v35);
    swift_bridgeObjectRetain();
    sub_1B19F8C58(v35, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19FA2B4);
    v18 = sub_1B1DC3EBC((uint64_t)v35);
    if ((v19 & 1) != 0)
    {
      v20 = *(_QWORD *)(*(_QWORD *)(v17 + 56) + 8 * v18);
      swift_retain();
      swift_bridgeObjectRelease();
      sub_1B19F8C58(v35, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19F9FEC);
      v22 = *(_QWORD *)(v20 + 200);
      if (v22)
        v23 = *(_QWORD **)(v20 + 200);
      else
        v23 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      if (*(_QWORD *)(v20 + 208))
        v24 = *(_QWORD *)(v20 + 208);
      else
        v24 = MEMORY[0x1E0DEE9D8];
      MEMORY[0x1E0C80A78](v22, v21);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1B1DF9158(v23, v24, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1FC0DC8);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return (_QWORD *)swift_release();
    }
    else
    {
      swift_bridgeObjectRelease();
      result = sub_1B19F8C58(v35, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19F9FEC);
      __break(1u);
    }
  }
  else
  {
    v26 = *a6;
    swift_bridgeObjectRetain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *a6 = v26;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v26 = sub_1B1C63044(0, v26[2] + 1, 1, v26);
      *a6 = v26;
    }
    v29 = v26[2];
    v28 = v26[3];
    if (v29 >= v28 >> 1)
    {
      v26 = sub_1B1C63044(v28 > 1, v29 + 1, 1, v26);
      *a6 = v26;
    }
    v26[2] = v29 + 1;
    v30 = &v26[2 * v29];
    v30[4] = a1;
    v30[5] = a2;
    v31 = *a7;
    sub_1B19F8C58(a3, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19FA2B4);
    v32 = swift_isUniquelyReferenced_nonNull_native();
    *a7 = v31;
    if ((v32 & 1) == 0)
    {
      v31 = sub_1B1C65128(0, v31[2] + 1, 1, v31);
      *a7 = v31;
    }
    v34 = v31[2];
    v33 = v31[3];
    if (v34 >= v33 >> 1)
    {
      v31 = sub_1B1C65128(v33 > 1, v34 + 1, 1, v31);
      *a7 = v31;
    }
    v31[2] = v34 + 1;
    return (_QWORD *)sub_1B19FA278((uint64_t)a3, (uint64_t)&v31[5 * v34 + 4]);
  }
  return result;
}

uint64_t sub_1B1FBC1D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _QWORD **a7, uint64_t *a8)
{
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD **v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t result;
  unint64_t v41;
  unint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v14 = sub_1B2228914();
  swift_bridgeObjectRetain();
  if ((v14 & 1) != 0)
  {
    v15 = sub_1B1DCD8E8();
    v17 = v16;
    v18 = a7;
    v19 = a4;
    v20 = a8;
    v21 = a3;
    v23 = v22;
    v44 = a5;
    v25 = v24;
    swift_bridgeObjectRelease();
    v26 = v23;
    a3 = v21;
    a8 = v20;
    a4 = v19;
    a7 = v18;
    MEMORY[0x1B5E20388](v15, v17, v26, v25);
    a5 = v44;
    swift_bridgeObjectRelease();
  }
  v45 = a5;
  v46 = a6;
  swift_bridgeObjectRetain();
  sub_1B2228890();
  if (sub_1B2228830() == 1)
  {
    sub_1B22287B8();
    swift_bridgeObjectRelease();
  }
  sub_1B2228890();
  swift_bridgeObjectRelease();
  v27 = v45;
  v28 = v46;
  v29 = *a7;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a7 = v29;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v29 = sub_1B1C63044(0, v29[2] + 1, 1, v29);
    *a7 = v29;
  }
  v32 = v29[2];
  v31 = v29[3];
  if (v32 >= v31 >> 1)
  {
    v29 = sub_1B1C63044(v31 > 1, v32 + 1, 1, v29);
    *a7 = v29;
  }
  v29[2] = v32 + 1;
  v33 = &v29[2 * v32];
  v33[4] = v27;
  v33[5] = v28;
  swift_bridgeObjectRetain();
  sub_1B1E0E85C(a3, a4, &v45);
  v34 = v45;
  v35 = v46;
  v36 = v47;
  v37 = v48;
  v38 = v49;
  v39 = (_QWORD *)*a8;
  result = swift_isUniquelyReferenced_nonNull_native();
  *a8 = (uint64_t)v39;
  if ((result & 1) == 0)
  {
    result = (uint64_t)sub_1B1C65128(0, v39[2] + 1, 1, v39);
    v39 = (_QWORD *)result;
    *a8 = result;
  }
  v42 = v39[2];
  v41 = v39[3];
  if (v42 >= v41 >> 1)
  {
    result = (uint64_t)sub_1B1C65128(v41 > 1, v42 + 1, 1, v39);
    v39 = (_QWORD *)result;
    *a8 = result;
  }
  v39[2] = v42 + 1;
  v43 = &v39[5 * v42];
  v43[4] = v34;
  v43[5] = v35;
  v43[6] = v36;
  v43[7] = v37;
  v43[8] = v38;
  return result;
}

uint64_t sub_1B1FBC45C(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1B1FBC488 + 4 * byte_1B22AA763[a1]))(6580597, 0xE300000000000000);
}

unint64_t sub_1B1FBC488()
{
  return 0xD000000000000010;
}

unint64_t sub_1B1FBC4B0()
{
  return 0xD000000000000011;
}

uint64_t sub_1B1FBC4E8(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1B1FBC514 + 4 * byte_1B22AA768[a1]))(6580597, 0xE300000000000000);
}

unint64_t sub_1B1FBC514()
{
  return 0xD000000000000010;
}

unint64_t sub_1B1FBC53C()
{
  return 0xD000000000000011;
}

void sub_1B1FBC574(char *a1)
{
  sub_1B1F958C0(*a1);
}

void sub_1B1FBC580()
{
  char *v0;

  sub_1B1FB2F84(*v0);
}

void sub_1B1FBC588(uint64_t a1)
{
  char *v1;

  sub_1B1DB3EB0(a1, *v1);
}

void sub_1B1FBC590(uint64_t a1)
{
  char *v1;

  sub_1B1DB51BC(a1, *v1);
}

uint64_t sub_1B1FBC598@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B1FBE830();
  *a1 = result;
  return result;
}

uint64_t sub_1B1FBC5C4@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1B1FBC45C(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1B1FBC5EC()
{
  unsigned __int8 *v0;

  return sub_1B1FBC4E8(*v0);
}

uint64_t sub_1B1FBC5F4@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B1FBE830();
  *a1 = result;
  return result;
}

uint64_t sub_1B1FBC618()
{
  sub_1B1FC0CFC();
  return sub_1B222A1D4();
}

uint64_t sub_1B1FBC640()
{
  sub_1B1FC0CFC();
  return sub_1B222A1E0();
}

uint64_t sub_1B1FBC668(char *a1)
{
  swift_allocObject();
  return sub_1B1FB9F2C(a1);
}

uint64_t sub_1B1FBC6B0()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B1FBC724()
{
  sub_1B1FBAA08();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for GraphV1CodeGeneration.BaseObject()
{
  return objc_opt_self();
}

ValueMetadata *type metadata accessor for GraphV1CodeGeneration()
{
  return &type metadata for GraphV1CodeGeneration;
}

uint64_t sub_1B1FBC774()
{
  sub_1B222A06C();
  swift_bridgeObjectRetain();
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

uint64_t sub_1B1FBC7D0()
{
  swift_bridgeObjectRetain();
  sub_1B2228824();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B1FBC818()
{
  sub_1B222A06C();
  swift_bridgeObjectRetain();
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

uint64_t sub_1B1FBC870(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(*(_QWORD *)a1 + 24) == *(_QWORD *)(*(_QWORD *)a2 + 24)
    && *(_QWORD *)(*(_QWORD *)a1 + 32) == *(_QWORD *)(*(_QWORD *)a2 + 32))
  {
    return 1;
  }
  else
  {
    return sub_1B2229D24();
  }
}

unint64_t sub_1B1FBC8A0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EEF61A98;
  if (!qword_1EEF61A98)
  {
    v1 = type metadata accessor for GraphV1CodeGeneration.BaseObject();
    result = MEMORY[0x1B5E23E74](&unk_1B22AA848, v1);
    atomic_store(result, (unint64_t *)&qword_1EEF61A98);
  }
  return result;
}

uint64_t sub_1B1FBC8E4(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  BOOL v18;
  int v19;
  uint64_t v20;
  _OWORD *v21;
  _OWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  BOOL v54;
  char *v55;
  char *v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  char *v66;
  char *v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  char *__dst;
  uint64_t v75;
  _OWORD v76[6];
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  uint64_t v83;
  uint64_t *v84;

  v2 = v1;
  v84 = a1;
  v3 = a1[1];
  result = sub_1B22299E8();
  if (result >= v3)
  {
    if (v3)
      return sub_1B1FBD5CC(0, v3, 1, v84);
    return result;
  }
  v71 = result;
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
  {
    result = sub_1B222967C();
    __break(1u);
    return result;
  }
  if (v3 >= 2)
  {
    v75 = v1;
    v6 = v5 >> 1;
    sub_1B1C190A8();
    v7 = sub_1B2228B0C();
    *(_QWORD *)(v7 + 16) = v6;
    v70 = v7;
    __dst = (char *)(v7 + 32);
    goto LABEL_12;
  }
  v8 = MEMORY[0x1E0DEE9D8];
  __dst = (char *)(MEMORY[0x1E0DEE9D8] + 32);
  if (v3 == 1)
  {
    v70 = MEMORY[0x1E0DEE9D8];
    v75 = v1;
LABEL_12:
    v9 = v84;
    v10 = 0;
    v11 = (char *)MEMORY[0x1E0DEE9D8];
    do
    {
      v13 = v10++;
      v73 = v11;
      v14 = v13;
      if (v10 < v3)
      {
        v72 = v3;
        v15 = *v9;
        sub_1B1792810(*v9 + 104 * v10, (uint64_t)&v77, (uint64_t (*)(_QWORD))sub_1B1C190A8);
        sub_1B1792810(v15 + 104 * v13, (uint64_t)v76, (uint64_t (*)(_QWORD))sub_1B1C190A8);
        if (v77 == v76[0])
          v16 = 0;
        else
          v16 = sub_1B2229D24();
        sub_1B1A04628((uint64_t)v76, (uint64_t (*)(_QWORD))sub_1B1C190A8);
        sub_1B1A04628((uint64_t)&v77, (uint64_t (*)(_QWORD))sub_1B1C190A8);
        v10 = v13 + 2;
        if (v13 + 2 < v3)
        {
          v69 = v15;
          v17 = v15 + 104 * v13 + 104;
          while (1)
          {
            sub_1B1792810(v17 + 104, (uint64_t)&v77, (uint64_t (*)(_QWORD))sub_1B1C190A8);
            sub_1B1792810(v17, (uint64_t)v76, (uint64_t (*)(_QWORD))sub_1B1C190A8);
            v18 = (_QWORD)v77 == *(_QWORD *)&v76[0] && *((_QWORD *)&v77 + 1) == *((_QWORD *)&v76[0] + 1);
            v19 = v18 ? 0 : sub_1B2229D24();
            sub_1B1A04628((uint64_t)v76, (uint64_t (*)(_QWORD))sub_1B1C190A8);
            sub_1B1A04628((uint64_t)&v77, (uint64_t (*)(_QWORD))sub_1B1C190A8);
            if (((v16 ^ v19) & 1) != 0)
              break;
            ++v10;
            v17 += 104;
            v11 = v73;
            if (v3 == v10)
            {
              v10 = v3;
              goto LABEL_31;
            }
          }
          v11 = v73;
LABEL_31:
          v15 = v69;
        }
        v9 = v84;
        if (v13 < v10 && (v16 & 1) != 0)
        {
          v20 = v15;
          v21 = (_OWORD *)(v15 + 104 * v10 - 104);
          v22 = (_OWORD *)(v20 + 104 * v13);
          v23 = v10;
          do
          {
            if (v13 != --v23)
            {
              v80 = v22[3];
              v81 = v22[4];
              v82 = v22[5];
              v83 = *((_QWORD *)v22 + 12);
              v77 = *v22;
              v78 = v22[1];
              v79 = v22[2];
              memmove(v22, v21, 0x68uLL);
              v9 = v84;
              v21[3] = v80;
              v21[4] = v81;
              v21[5] = v82;
              *((_QWORD *)v21 + 12) = v83;
              *v21 = v77;
              v21[1] = v78;
              v21[2] = v79;
            }
            ++v13;
            v21 = (_OWORD *)((char *)v21 - 104);
            v22 = (_OWORD *)((char *)v22 + 104);
          }
          while (v13 < v23);
          v13 = v14;
          v3 = v72;
        }
      }
      if (v10 < v3 && v10 - v13 < v71)
      {
        if (v13 + v71 >= v3)
          v24 = v3;
        else
          v24 = v13 + v71;
        if (v10 != v24)
        {
          v25 = 104 * v10;
          do
          {
            v26 = v25;
            while (1)
            {
              v27 = *v9 + v26;
              sub_1B1792810(v27, (uint64_t)&v77, (uint64_t (*)(_QWORD))sub_1B1C190A8);
              sub_1B1792810(v27 - 104, (uint64_t)v76, (uint64_t (*)(_QWORD))sub_1B1C190A8);
              if ((_QWORD)v77 == *(_QWORD *)&v76[0] && *((_QWORD *)&v77 + 1) == *((_QWORD *)&v76[0] + 1))
                break;
              v29 = sub_1B2229D24();
              sub_1B1A04628((uint64_t)v76, (uint64_t (*)(_QWORD))sub_1B1C190A8);
              sub_1B1A04628((uint64_t)&v77, (uint64_t (*)(_QWORD))sub_1B1C190A8);
              if ((v29 & 1) == 0)
                goto LABEL_46;
              v9 = v84;
              v30 = *v84 + v26;
              v80 = *(_OWORD *)(v30 + 48);
              v81 = *(_OWORD *)(v30 + 64);
              v82 = *(_OWORD *)(v30 + 80);
              v83 = *(_QWORD *)(v30 + 96);
              v77 = *(_OWORD *)v30;
              v78 = *(_OWORD *)(v30 + 16);
              v79 = *(_OWORD *)(v30 + 32);
              v31 = *(_OWORD *)(v30 - 88);
              *(_OWORD *)v30 = *(_OWORD *)(v30 - 104);
              *(_OWORD *)(v30 + 16) = v31;
              v32 = *(_OWORD *)(v30 - 72);
              *(_QWORD *)(v30 + 96) = *(_QWORD *)(v30 - 8);
              v33 = *(_OWORD *)(v30 - 24);
              *(_OWORD *)(v30 + 64) = *(_OWORD *)(v30 - 40);
              *(_OWORD *)(v30 + 80) = v33;
              v34 = *(_OWORD *)(v30 - 56);
              *(_OWORD *)(v30 + 32) = v32;
              *(_OWORD *)(v30 + 48) = v34;
              v35 = v77;
              v36 = v78;
              *(_OWORD *)(v30 - 72) = v79;
              *(_OWORD *)(v30 - 88) = v36;
              *(_OWORD *)(v30 - 104) = v35;
              v37 = v80;
              v38 = v81;
              v39 = v82;
              *(_QWORD *)(v30 - 8) = v83;
              *(_OWORD *)(v30 - 24) = v39;
              *(_OWORD *)(v30 - 40) = v38;
              *(_OWORD *)(v30 - 56) = v37;
              v26 -= 104;
              if (v10 == ++v13)
                goto LABEL_47;
            }
            sub_1B1A04628((uint64_t)v76, (uint64_t (*)(_QWORD))sub_1B1C190A8);
            sub_1B1A04628((uint64_t)&v77, (uint64_t (*)(_QWORD))sub_1B1C190A8);
LABEL_46:
            v9 = v84;
LABEL_47:
            ++v10;
            v25 += 104;
            v13 = v14;
          }
          while (v10 != v24);
          v10 = v24;
        }
        v11 = v73;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v11 = sub_1B216CC74(0, *((_QWORD *)v11 + 2) + 1, 1, v11);
      v41 = *((_QWORD *)v11 + 2);
      v40 = *((_QWORD *)v11 + 3);
      v12 = v41 + 1;
      v9 = v84;
      if (v41 >= v40 >> 1)
      {
        v11 = sub_1B216CC74(v40 > 1, v41 + 1, 1, v11);
        v9 = v84;
      }
      *((_QWORD *)v11 + 2) = v12;
      v42 = v11 + 32;
      v43 = &v11[16 * v41 + 32];
      *(_QWORD *)v43 = v13;
      *((_QWORD *)v43 + 1) = v10;
      if (v41)
      {
        while (1)
        {
          v44 = v12 - 1;
          if (v12 >= 4)
          {
            v49 = &v42[16 * v12];
            v50 = *((_QWORD *)v49 - 7) - *((_QWORD *)v49 - 8);
            v47 = *((_QWORD *)v49 - 5) - *((_QWORD *)v49 - 6);
            v48 = v12 - 2;
            v51 = &v42[16 * v12 - 32];
            v45 = *(_QWORD *)v51;
            v46 = *((_QWORD *)v51 + 1);
            if (v47 - v45 + v46 >= v50)
            {
              v54 = v47 < *(_QWORD *)&v42[16 * v44 + 8] - *(_QWORD *)&v42[16 * v44];
              goto LABEL_73;
            }
          }
          else
          {
            if (v12 != 3)
            {
              v52 = *(_QWORD *)&v42[16 * v12 - 24] - *(_QWORD *)&v42[16 * v12 - 32];
              v53 = *(_QWORD *)&v42[16 * v44 + 8] - *(_QWORD *)&v42[16 * v44];
LABEL_70:
              if (v53 < v52)
                goto LABEL_14;
              goto LABEL_75;
            }
            v45 = *((_QWORD *)v11 + 6);
            v46 = *((_QWORD *)v11 + 7);
            v47 = *((_QWORD *)v11 + 5) - *((_QWORD *)v11 + 4);
            v48 = 1;
          }
          v52 = v46 - v45;
          v53 = *(_QWORD *)&v42[16 * v44 + 8] - *(_QWORD *)&v42[16 * v44];
          if (v52 + v53 < v47)
            goto LABEL_70;
          v54 = v47 < v53;
LABEL_73:
          if (v54)
            v44 = v48;
LABEL_75:
          v55 = v11;
          v56 = &v42[16 * v44 - 16];
          v57 = *(_QWORD *)v56;
          v58 = v42;
          v59 = &v42[16 * v44];
          v60 = *((_QWORD *)v59 + 1);
          sub_1B1FBD788((char *)(*v9 + 104 * *(_QWORD *)v56), (char *)(*v9 + 104 * *(_QWORD *)v59), *v9 + 104 * v60, __dst);
          if (v75)
            goto LABEL_87;
          *(_QWORD *)v56 = v57;
          *((_QWORD *)v56 + 1) = v60;
          v11 = v55;
          v61 = *((_QWORD *)v55 + 2);
          v12 = v61 - 1;
          memmove(v59, v59 + 16, 16 * (v61 - 1 - v44));
          *((_QWORD *)v55 + 2) = v61 - 1;
          v9 = v84;
          v42 = v58;
          if (v61 <= 2)
            goto LABEL_14;
        }
      }
      v12 = 1;
LABEL_14:
      v3 = v9[1];
    }
    while (v10 < v3);
    v2 = v75;
    v8 = v70;
    goto LABEL_81;
  }
  v12 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
  v11 = (char *)MEMORY[0x1E0DEE9D8];
  v9 = v84;
LABEL_81:
  v70 = v8;
  if (v12 >= 2)
  {
    v62 = *v9;
    do
    {
      v63 = *(_QWORD *)&v11[16 * v12];
      v64 = &v11[16 * v12 + 16];
      v65 = *((_QWORD *)v64 + 1);
      sub_1B1FBD788((char *)(v62 + 104 * v63), (char *)(v62 + 104 * *(_QWORD *)v64), v62 + 104 * v65, __dst);
      if (v2)
        break;
      v66 = v11;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v66 = sub_1B216D510((uint64_t)v11);
      v67 = &v66[16 * v12];
      *(_QWORD *)v67 = v63;
      *((_QWORD *)v67 + 1) = v65;
      v11 = v66;
      v68 = *((_QWORD *)v66 + 2);
      memmove(&v66[16 * v12 + 16], &v66[16 * v12 + 32], 16 * (v68 - v12));
      *((_QWORD *)v66 + 2) = v68 - 1;
      v12 = v68 - 1;
    }
    while (v68 > 2);
  }
LABEL_87:
  swift_bridgeObjectRelease();
  *(_QWORD *)(v70 + 16) = 0;
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B1FBD0AC(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  BOOL v49;
  char *v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  char *v59;
  char *v60;
  char *v61;
  unint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *__dst;

  v2 = a1;
  v3 = a1[1];
  result = sub_1B22299E8();
  if (result >= v3)
  {
    if ((unint64_t)v3 >= 2)
    {
      v9 = 0;
      v10 = *v2;
      for (i = 1; i != v3; ++i)
      {
        v12 = *(_QWORD *)(v10 + 8 * i);
        v13 = v9;
        do
        {
          v14 = *(_QWORD *)(v10 + 8 * v13);
          if (v14 >= v12)
            break;
          v15 = (_QWORD *)(v10 + 8 * v13);
          *v15 = v12;
          v15[1] = v14;
          --v13;
        }
        while (v13 != -1);
        ++v9;
      }
    }
  }
  else
  {
    if (v3 >= 0)
      v5 = v3;
    else
      v5 = v3 + 1;
    if (v3 >= -1)
    {
      v6 = result;
      if (v3 < 2)
      {
        v16 = MEMORY[0x1E0DEE9D8];
        __dst = (char *)(MEMORY[0x1E0DEE9D8] + 32);
        if (v3 != 1)
        {
          v20 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
          v19 = (char *)MEMORY[0x1E0DEE9D8];
          if (v20 < 2)
          {
LABEL_67:
            swift_bridgeObjectRelease();
            *(_QWORD *)(v16 + 16) = 0;
            return swift_bridgeObjectRelease();
          }
LABEL_71:
          v55 = *v2;
          do
          {
            v56 = *(_QWORD *)&v19[16 * v20];
            v57 = &v19[16 * v20 + 16];
            v58 = *((_QWORD *)v57 + 1);
            sub_1B1FBDB34((char *)(v55 + 8 * v56), (char *)(v55 + 8 * *(_QWORD *)v57), v55 + 8 * v58, __dst);
            if (v1)
              break;
            v59 = v19;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              v59 = sub_1B216D510((uint64_t)v19);
            v60 = v59 + 32;
            v61 = &v59[16 * v20];
            *(_QWORD *)v61 = v56;
            *((_QWORD *)v61 + 1) = v58;
            v19 = v59;
            v62 = *((_QWORD *)v59 + 2);
            memmove(&v60[16 * v20 - 16], &v60[16 * v20], 16 * (v62 - v20));
            *((_QWORD *)v19 + 2) = v62 - 1;
            v20 = v62 - 1;
          }
          while (v62 > 2);
          goto LABEL_67;
        }
        v64 = MEMORY[0x1E0DEE9D8];
      }
      else
      {
        v7 = v5 >> 1;
        v8 = sub_1B2228B0C();
        *(_QWORD *)(v8 + 16) = v7;
        v64 = v8;
        __dst = (char *)(v8 + 32);
      }
      v17 = 0;
      v63 = v2;
      v18 = *v2;
      v19 = (char *)MEMORY[0x1E0DEE9D8];
      v65 = v6;
      v66 = v3;
      do
      {
        v21 = v17++;
        if (v17 < v3)
        {
          v22 = *(_QWORD *)(v18 + 8 * v17);
          v23 = *(_QWORD *)(v18 + 8 * v21);
          v17 = v21 + 2;
          if (v21 + 2 < v3)
          {
            v24 = v22;
            while (1)
            {
              v25 = *(_QWORD *)(v18 + 8 * v17);
              if (v23 < v22 == v24 >= v25)
                break;
              ++v17;
              v24 = v25;
              if (v3 == v17)
              {
                v17 = v3;
                break;
              }
            }
          }
          if (v23 < v22 && v21 < v17)
          {
            v26 = v17 - 1;
            v27 = v21;
            do
            {
              if (v27 != v26)
              {
                v28 = *(_QWORD *)(v18 + 8 * v27);
                *(_QWORD *)(v18 + 8 * v27) = *(_QWORD *)(v18 + 8 * v26);
                *(_QWORD *)(v18 + 8 * v26) = v28;
              }
              v49 = ++v27 < v26--;
            }
            while (v49);
          }
        }
        if (v17 < v3 && v17 - v21 < v6)
        {
          v29 = v21 + v6;
          if (v21 + v6 >= v3)
            v29 = v3;
          if (v17 != v29)
          {
            v30 = v18 - 8 + 8 * v17;
            do
            {
              v31 = *(_QWORD *)(v18 + 8 * v17);
              v32 = v21;
              v33 = (uint64_t *)v30;
              do
              {
                v34 = *v33;
                if (*v33 >= v31)
                  break;
                *v33 = v31;
                v33[1] = v34;
                --v33;
                ++v32;
              }
              while (v17 != v32);
              ++v17;
              v30 += 8;
            }
            while (v17 != v29);
            v17 = v29;
          }
        }
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v19 = sub_1B216CC74(0, *((_QWORD *)v19 + 2) + 1, 1, v19);
        v36 = *((_QWORD *)v19 + 2);
        v35 = *((_QWORD *)v19 + 3);
        v20 = v36 + 1;
        if (v36 >= v35 >> 1)
          v19 = sub_1B216CC74(v35 > 1, v36 + 1, 1, v19);
        *((_QWORD *)v19 + 2) = v20;
        v37 = v19 + 32;
        v38 = &v19[16 * v36 + 32];
        *(_QWORD *)v38 = v21;
        *((_QWORD *)v38 + 1) = v17;
        if (v36)
        {
          while (1)
          {
            v39 = v20 - 1;
            if (v20 >= 4)
            {
              v44 = &v37[16 * v20];
              v45 = *((_QWORD *)v44 - 7) - *((_QWORD *)v44 - 8);
              v42 = *((_QWORD *)v44 - 5) - *((_QWORD *)v44 - 6);
              v43 = v20 - 2;
              v46 = &v37[16 * v20 - 32];
              v40 = *(_QWORD *)v46;
              v41 = *((_QWORD *)v46 + 1);
              if (v42 - v40 + v41 >= v45)
              {
                v49 = v42 < *(_QWORD *)&v37[16 * v39 + 8] - *(_QWORD *)&v37[16 * v39];
LABEL_61:
                if (v49)
                  v39 = v43;
                goto LABEL_63;
              }
            }
            else
            {
              if (v20 != 3)
              {
                v47 = *(_QWORD *)&v37[16 * v20 - 24] - *(_QWORD *)&v19[16 * v20];
                v48 = *(_QWORD *)&v37[16 * v39 + 8] - *(_QWORD *)&v37[16 * v39];
                goto LABEL_58;
              }
              v40 = *((_QWORD *)v19 + 6);
              v41 = *((_QWORD *)v19 + 7);
              v42 = *((_QWORD *)v19 + 5) - *((_QWORD *)v19 + 4);
              v43 = 1;
            }
            v47 = v41 - v40;
            v48 = *(_QWORD *)&v37[16 * v39 + 8] - *(_QWORD *)&v37[16 * v39];
            if (v47 + v48 >= v42)
            {
              v49 = v42 < v48;
              goto LABEL_61;
            }
LABEL_58:
            if (v48 < v47)
              goto LABEL_20;
LABEL_63:
            v50 = &v37[16 * v39 - 16];
            v51 = *(_QWORD *)v50;
            v52 = &v37[16 * v39];
            v53 = *((_QWORD *)v52 + 1);
            sub_1B1FBDB34((char *)(v18 + 8 * *(_QWORD *)v50), (char *)(v18 + 8 * *(_QWORD *)v52), v18 + 8 * v53, __dst);
            if (v1)
            {
              v16 = v64;
              goto LABEL_67;
            }
            *(_QWORD *)v50 = v51;
            *((_QWORD *)v50 + 1) = v53;
            v54 = *((_QWORD *)v19 + 2);
            v20 = v54 - 1;
            memmove(&v37[16 * v39], v52 + 16, 16 * (v54 - 1 - v39));
            *((_QWORD *)v19 + 2) = v54 - 1;
            if (v54 <= 2)
              goto LABEL_20;
          }
        }
        v20 = 1;
LABEL_20:
        v6 = v65;
        v3 = v66;
      }
      while (v17 < v66);
      v16 = v64;
      v2 = v63;
      if (v20 < 2)
        goto LABEL_67;
      goto LABEL_71;
    }
    result = sub_1B222967C();
    __break(1u);
  }
  return result;
}

uint64_t sub_1B1FBD5CC(uint64_t result, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _QWORD v23[13];
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  v31 = result;
  if (a3 != a2)
  {
    v5 = a3;
    v7 = 104 * a3;
    do
    {
      v8 = v31;
      v9 = v7;
      while (1)
      {
        v10 = *a4 + v9;
        sub_1B1792810(v10, (uint64_t)&v24, (uint64_t (*)(_QWORD))sub_1B1C190A8);
        sub_1B1792810(v10 - 104, (uint64_t)v23, (uint64_t (*)(_QWORD))sub_1B1C190A8);
        if ((_QWORD)v24 == v23[0] && *((_QWORD *)&v24 + 1) == v23[1])
          break;
        v12 = sub_1B2229D24();
        sub_1B1A04628((uint64_t)v23, (uint64_t (*)(_QWORD))sub_1B1C190A8);
        result = sub_1B1A04628((uint64_t)&v24, (uint64_t (*)(_QWORD))sub_1B1C190A8);
        if ((v12 & 1) != 0)
        {
          v13 = *a4 + v9;
          v27 = *(_OWORD *)(v13 + 48);
          v28 = *(_OWORD *)(v13 + 64);
          v29 = *(_OWORD *)(v13 + 80);
          v30 = *(_QWORD *)(v13 + 96);
          v24 = *(_OWORD *)v13;
          v25 = *(_OWORD *)(v13 + 16);
          v26 = *(_OWORD *)(v13 + 32);
          v14 = *(_OWORD *)(v13 - 88);
          *(_OWORD *)v13 = *(_OWORD *)(v13 - 104);
          *(_OWORD *)(v13 + 16) = v14;
          v15 = *(_OWORD *)(v13 - 72);
          *(_QWORD *)(v13 + 96) = *(_QWORD *)(v13 - 8);
          v16 = *(_OWORD *)(v13 - 24);
          *(_OWORD *)(v13 + 64) = *(_OWORD *)(v13 - 40);
          *(_OWORD *)(v13 + 80) = v16;
          v17 = *(_OWORD *)(v13 - 56);
          *(_OWORD *)(v13 + 32) = v15;
          *(_OWORD *)(v13 + 48) = v17;
          v18 = v24;
          v19 = v25;
          *(_OWORD *)(v13 - 72) = v26;
          *(_OWORD *)(v13 - 88) = v19;
          *(_OWORD *)(v13 - 104) = v18;
          v20 = v27;
          v21 = v28;
          v22 = v29;
          *(_QWORD *)(v13 - 8) = v30;
          *(_OWORD *)(v13 - 24) = v22;
          *(_OWORD *)(v13 - 40) = v21;
          *(_OWORD *)(v13 - 56) = v20;
          v9 -= 104;
          if (v5 != ++v8)
            continue;
        }
        goto LABEL_5;
      }
      sub_1B1A04628((uint64_t)v23, (uint64_t (*)(_QWORD))sub_1B1C190A8);
      result = sub_1B1A04628((uint64_t)&v24, (uint64_t (*)(_QWORD))sub_1B1C190A8);
LABEL_5:
      ++v5;
      v7 += 104;
    }
    while (v5 != a2);
  }
  return result;
}

uint64_t sub_1B1FBD788(char *__src, char *a2, unint64_t a3, char *__dst)
{
  char *v4;
  char *v6;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v14;
  char *v15;
  unint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  unint64_t v20;
  char v22;
  char *v23;
  unint64_t v24;
  uint64_t result;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;

  v4 = __dst;
  v6 = a2;
  v8 = a2 - __src;
  v9 = (a2 - __src) / 104;
  v10 = a3 - (_QWORD)a2;
  v11 = (uint64_t)(a3 - (_QWORD)a2) / 104;
  v32 = __src;
  v31 = __dst;
  if (v9 >= v11)
  {
    if (v10 >= -103)
    {
      if (__dst != a2 || &a2[104 * v11] <= __dst)
        memmove(__dst, a2, 104 * v11);
      v18 = &v4[104 * v11];
      v30 = (unint64_t)v18;
      v32 = v6;
      if (__src < v6 && v10 >= 104)
      {
        v19 = (char *)(a3 - 104);
        do
        {
          sub_1B1792810((uint64_t)(v18 - 104), (uint64_t)&v28, (uint64_t (*)(_QWORD))sub_1B1C190A8);
          v20 = (unint64_t)(v6 - 104);
          sub_1B1792810((uint64_t)(v6 - 104), (uint64_t)&v26, (uint64_t (*)(_QWORD))sub_1B1C190A8);
          if (v28 == v26 && v29 == v27)
            v22 = 0;
          else
            v22 = sub_1B2229D24();
          v23 = v19 + 104;
          sub_1B1A04628((uint64_t)&v26, (uint64_t (*)(_QWORD))sub_1B1C190A8);
          sub_1B1A04628((uint64_t)&v28, (uint64_t (*)(_QWORD))sub_1B1C190A8);
          if ((v22 & 1) != 0)
          {
            if (v23 != v6 || v19 >= v6)
              memmove(v19, v6 - 104, 0x68uLL);
            v32 -= 104;
            v18 = (char *)v30;
            if (v30 <= (unint64_t)v4)
              break;
          }
          else
          {
            v24 = v30;
            v18 = (char *)(v30 - 104);
            v30 -= 104;
            if ((unint64_t)v23 < v24 || (unint64_t)v19 >= v24 || v23 != (char *)v24)
              memmove(v19, (const void *)(v24 - 104), 0x68uLL);
            v20 = (unint64_t)v6;
            if (v18 <= v4)
              break;
          }
          v19 -= 104;
          v6 = (char *)v20;
        }
        while (v20 > (unint64_t)__src);
      }
LABEL_51:
      sub_1B216CDF8((void **)&v32, (const void **)&v31, &v30);
      return 1;
    }
  }
  else if (v8 >= -103)
  {
    if (__dst != __src || &__src[104 * v9] <= __dst)
      memmove(__dst, __src, 104 * v9);
    v12 = (unint64_t)&v4[104 * v9];
    v30 = v12;
    if ((unint64_t)v6 < a3 && v8 >= 104)
    {
      while (1)
      {
        sub_1B1792810((uint64_t)v6, (uint64_t)&v28, (uint64_t (*)(_QWORD))sub_1B1C190A8);
        sub_1B1792810((uint64_t)v4, (uint64_t)&v26, (uint64_t (*)(_QWORD))sub_1B1C190A8);
        if (v28 == v26 && v29 == v27)
          break;
        v14 = sub_1B2229D24();
        sub_1B1A04628((uint64_t)&v26, (uint64_t (*)(_QWORD))sub_1B1C190A8);
        sub_1B1A04628((uint64_t)&v28, (uint64_t (*)(_QWORD))sub_1B1C190A8);
        if ((v14 & 1) == 0)
          goto LABEL_18;
        v15 = v32;
        v16 = (unint64_t)(v6 + 104);
        if (v32 >= v6 && (unint64_t)v32 < v16 && v32 == v6)
          v15 = v6;
        else
          memmove(v32, v6, 0x68uLL);
LABEL_22:
        v32 = v15 + 104;
        v4 = v31;
        if ((unint64_t)v31 < v12)
        {
          v6 = (char *)v16;
          if (v16 < a3)
            continue;
        }
        goto LABEL_51;
      }
      sub_1B1A04628((uint64_t)&v26, (uint64_t (*)(_QWORD))sub_1B1C190A8);
      sub_1B1A04628((uint64_t)&v28, (uint64_t (*)(_QWORD))sub_1B1C190A8);
LABEL_18:
      v15 = v32;
      v17 = v31 + 104;
      if (v32 != v31 || v32 >= v17)
        memmove(v32, v31, 0x68uLL);
      v31 = v17;
      v16 = (unint64_t)v6;
      goto LABEL_22;
    }
    goto LABEL_51;
  }
  result = sub_1B2229700();
  __break(1u);
  return result;
}

uint64_t sub_1B1FBDB34(char *__src, char *a2, unint64_t a3, char *__dst)
{
  char *v4;
  char *v6;
  char *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t result;
  char *v22;
  char *v23;
  char *v24;

  v4 = __dst;
  v6 = a2;
  v7 = __src;
  v8 = a2 - __src;
  v9 = a2 - __src + 7;
  if (a2 - __src >= 0)
    v9 = a2 - __src;
  v10 = v9 >> 3;
  v11 = a3 - (_QWORD)a2;
  v12 = a3 - (_QWORD)a2 + 7;
  if ((uint64_t)(a3 - (_QWORD)a2) >= 0)
    v12 = a3 - (_QWORD)a2;
  v13 = v12 >> 3;
  v24 = __src;
  v23 = __dst;
  if (v10 >= v12 >> 3)
  {
    if (v11 >= -7)
    {
      if (__dst != a2 || &a2[8 * v13] <= __dst)
        memmove(__dst, a2, 8 * v13);
      v16 = &v4[8 * v13];
      v22 = v16;
      v24 = v6;
      if (v7 < v6 && v11 >= 8)
      {
        v17 = (char *)(a3 - 8);
        while (1)
        {
          v18 = v17 + 8;
          v19 = v6 - 8;
          v20 = *((_QWORD *)v6 - 1);
          if (v20 >= *((_QWORD *)v16 - 1))
          {
            v22 = v16 - 8;
            if (v18 < v16 || v17 >= v16 || v18 != v16)
              *(_QWORD *)v17 = *((_QWORD *)v16 - 1);
            v16 -= 8;
            if (v6 <= v7)
              goto LABEL_42;
          }
          else
          {
            if (v18 != v6 || v17 >= v6)
              *(_QWORD *)v17 = v20;
            v24 = v6 - 8;
            v6 -= 8;
            if (v19 <= v7)
              goto LABEL_42;
          }
          v17 -= 8;
          if (v16 <= v4)
            goto LABEL_42;
        }
      }
      goto LABEL_42;
    }
  }
  else if (v8 >= -7)
  {
    if (__dst != __src || &__src[8 * v10] <= __dst)
      memmove(__dst, __src, 8 * v10);
    v14 = &v4[8 * v10];
    v22 = v14;
    if ((unint64_t)v6 < a3 && v8 >= 8)
    {
      do
      {
        if (*(_QWORD *)v4 >= *(_QWORD *)v6)
        {
          if (v7 != v4)
            *(_QWORD *)v7 = *(_QWORD *)v4;
          v4 += 8;
          v23 = v4;
          v15 = v6;
        }
        else
        {
          v15 = v6 + 8;
          if (v7 < v6 || v7 >= v15 || v7 != v6)
            *(_QWORD *)v7 = *(_QWORD *)v6;
        }
        v7 += 8;
        if (v4 >= v14)
          break;
        v6 = v15;
      }
      while ((unint64_t)v15 < a3);
      v24 = v7;
    }
LABEL_42:
    sub_1B216CEB8((void **)&v24, (const void **)&v23, &v22);
    return 1;
  }
  result = sub_1B2229700();
  __break(1u);
  return result;
}

uint64_t sub_1B1FBDDA0(uint64_t isStackAllocationSafe, uint64_t (*a2)(char *, unint64_t, uint64_t))
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char v6;
  unint64_t v7;
  size_t v8;
  uint64_t v9;
  void *v10;
  _QWORD v12[2];

  v4 = v2;
  v5 = isStackAllocationSafe;
  v12[1] = *MEMORY[0x1E0C80C00];
  v6 = *(_BYTE *)(isStackAllocationSafe + 32);
  v7 = (unint64_t)((1 << v6) + 63) >> 6;
  v8 = 8 * v7;
  if ((v6 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1E0C80A78](isStackAllocationSafe, a2);
    bzero((char *)v12 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0), v8);
    v9 = a2((char *)v12 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0), v7, v5);
    if (v2)
      swift_willThrow();
    else
      return v9;
  }
  else
  {
    v10 = (void *)swift_slowAlloc();
    bzero(v10, v8);
    v4 = a2((char *)v10, v7, v5);
    MEMORY[0x1B5E23F88](v10, -1, -1);
  }
  return v4;
}

uint64_t sub_1B1FBDEFC(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int64_t v21;
  _QWORD v22[2];
  uint64_t v23;
  _BYTE v24[96];
  uint64_t *v25;

  v18 = 0;
  v4 = 0;
  v5 = 1 << *(_BYTE *)(a3 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(a3 + 64);
  v25 = &v23;
  v20 = a3 + 64;
  v21 = (unint64_t)(v5 + 63) >> 6;
  v19 = a3 + 104;
  if (!v7)
    goto LABEL_7;
LABEL_4:
  v8 = __clz(__rbit64(v7));
  v7 &= v7 - 1;
  v9 = v8 | (v4 << 6);
  while (1)
  {
    v10 = (uint64_t *)(*(_QWORD *)(a3 + 48) + 16 * v9);
    v12 = *v10;
    v11 = v10[1];
    sub_1B19F8F0C(*(_QWORD *)(a3 + 56) + 88 * v9, (uint64_t)v24);
    v22[0] = v12;
    v22[1] = v11;
    sub_1B19F8F0C((uint64_t)v24, (uint64_t)v25);
    sub_1B1A2044C();
    sub_1B1A20490();
    swift_bridgeObjectRetain_n();
    LOBYTE(v12) = sub_1B222862C();
    sub_1B1A04628((uint64_t)v22, (uint64_t (*)(_QWORD))sub_1B1C190A8);
    sub_1B1A203C4((uint64_t)v24);
    swift_bridgeObjectRelease();
    if ((v12 & 1) != 0)
    {
      *(unint64_t *)((char *)a1 + ((v9 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v9;
      ++v18;
      if (v7)
        goto LABEL_4;
    }
    else if (v7)
    {
      goto LABEL_4;
    }
LABEL_7:
    v13 = v4 + 1;
    if (v4 + 1 >= v21)
      return sub_1B1C04EA0(a1, a2, v18, a3);
    v14 = *(_QWORD *)(v20 + 8 * v13);
    if (!v14)
    {
      v13 = v4 + 2;
      if (v4 + 2 >= v21)
        return sub_1B1C04EA0(a1, a2, v18, a3);
      v14 = *(_QWORD *)(v20 + 8 * v13);
      if (!v14)
      {
        v13 = v4 + 3;
        if (v4 + 3 >= v21)
          return sub_1B1C04EA0(a1, a2, v18, a3);
        v14 = *(_QWORD *)(v20 + 8 * v13);
        if (!v14)
        {
          v13 = v4 + 4;
          if (v4 + 4 >= v21)
            return sub_1B1C04EA0(a1, a2, v18, a3);
          v14 = *(_QWORD *)(v20 + 8 * v13);
          if (!v14)
            break;
        }
      }
    }
LABEL_18:
    v7 = (v14 - 1) & v14;
    v9 = __clz(__rbit64(v14)) + (v13 << 6);
    v4 = v13;
  }
  while (v21 - 5 != v4)
  {
    v14 = *(_QWORD *)(v19 + 8 * v4++);
    if (v14)
    {
      v13 = v4 + 4;
      goto LABEL_18;
    }
  }
  return sub_1B1C04EA0(a1, a2, v18, a3);
}

uint64_t sub_1B1FBE150(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[2];
  uint64_t v23;
  _BYTE v24[96];
  int64_t v25;

  v20 = 0;
  v4 = 0;
  v5 = a3 + 64;
  v6 = 1 << *(_BYTE *)(a3 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(a3 + 64);
  v9 = (unint64_t)(v6 + 63) >> 6;
  v25 = v9 - 5;
  v21 = a3 + 104;
  if (!v8)
    goto LABEL_7;
LABEL_4:
  v10 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  v11 = v10 | (v4 << 6);
  while (1)
  {
    v12 = (uint64_t *)(*(_QWORD *)(a3 + 48) + 16 * v11);
    v13 = *v12;
    v14 = v12[1];
    sub_1B19F8F0C(*(_QWORD *)(a3 + 56) + 88 * v11, (uint64_t)v24);
    v22[0] = v13;
    v22[1] = v14;
    sub_1B19F8F0C((uint64_t)v24, (uint64_t)&v23);
    swift_bridgeObjectRetain_n();
    LOBYTE(v13) = sub_1B2228920();
    sub_1B1A04628((uint64_t)v22, (uint64_t (*)(_QWORD))sub_1B1C190A8);
    sub_1B1A203C4((uint64_t)v24);
    swift_bridgeObjectRelease();
    if ((v13 & 1) != 0)
    {
      *(unint64_t *)((char *)a1 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
      ++v20;
      if (v8)
        goto LABEL_4;
    }
    else if (v8)
    {
      goto LABEL_4;
    }
LABEL_7:
    v15 = v4 + 1;
    if (v4 + 1 >= v9)
      return sub_1B1C04EA0(a1, a2, v20, a3);
    v16 = *(_QWORD *)(v5 + 8 * v15);
    if (!v16)
    {
      v15 = v4 + 2;
      if (v4 + 2 >= v9)
        return sub_1B1C04EA0(a1, a2, v20, a3);
      v16 = *(_QWORD *)(v5 + 8 * v15);
      if (!v16)
      {
        v15 = v4 + 3;
        if (v4 + 3 >= v9)
          return sub_1B1C04EA0(a1, a2, v20, a3);
        v16 = *(_QWORD *)(v5 + 8 * v15);
        if (!v16)
        {
          v15 = v4 + 4;
          if (v4 + 4 >= v9)
            return sub_1B1C04EA0(a1, a2, v20, a3);
          v16 = *(_QWORD *)(v5 + 8 * v15);
          if (!v16)
            break;
        }
      }
    }
LABEL_18:
    v8 = (v16 - 1) & v16;
    v11 = __clz(__rbit64(v16)) + (v15 << 6);
    v4 = v15;
  }
  while (v25 != v4)
  {
    v16 = *(_QWORD *)(v21 + 8 * v4++);
    if (v16)
    {
      v15 = v4 + 4;
      goto LABEL_18;
    }
  }
  return sub_1B1C04EA0(a1, a2, v20, a3);
}

_QWORD *sub_1B1FBE360(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v26;
  uint64_t v27;
  int64_t v28;
  _OWORD v29[5];
  uint64_t v30;
  _BYTE v31[96];
  uint64_t v32;

  sub_1B1B99AD8();
  v2 = sub_1B22296B8();
  v3 = (_QWORD *)v2;
  v4 = 0;
  v32 = a1;
  v7 = *(_QWORD *)(a1 + 64);
  v6 = a1 + 64;
  v5 = v7;
  v8 = 1 << *(_BYTE *)(v6 - 32);
  v9 = -1;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  v10 = v9 & v5;
  v11 = v2 + 64;
  v27 = v6;
  v28 = (unint64_t)(v8 + 63) >> 6;
  v26 = v6 + 40;
  while (1)
  {
    if (v10)
    {
      v12 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v13 = v12 | (v4 << 6);
      goto LABEL_5;
    }
    v23 = v4 + 1;
    if (v4 + 1 >= v28)
      return v3;
    v24 = *(_QWORD *)(v27 + 8 * v23);
    if (!v24)
    {
      v23 = v4 + 2;
      if (v4 + 2 >= v28)
        return v3;
      v24 = *(_QWORD *)(v27 + 8 * v23);
      if (!v24)
      {
        v23 = v4 + 3;
        if (v4 + 3 >= v28)
          return v3;
        v24 = *(_QWORD *)(v27 + 8 * v23);
        if (!v24)
        {
          v23 = v4 + 4;
          if (v4 + 4 >= v28)
            return v3;
          v24 = *(_QWORD *)(v27 + 8 * v23);
          if (!v24)
            break;
        }
      }
    }
LABEL_18:
    v10 = (v24 - 1) & v24;
    v13 = __clz(__rbit64(v24)) + (v23 << 6);
    v4 = v23;
LABEL_5:
    v14 = (uint64_t *)(*(_QWORD *)(v32 + 48) + 16 * v13);
    v16 = *v14;
    v15 = v14[1];
    sub_1B19F8F0C(*(_QWORD *)(v32 + 56) + 88 * v13, (uint64_t)v31);
    sub_1B19F8F0C((uint64_t)v31, (uint64_t)v29);
    swift_bridgeObjectRetain();
    sub_1B1A203C4((uint64_t)v31);
    *(_QWORD *)(v11 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    v17 = (_QWORD *)(v3[6] + 16 * v13);
    *v17 = v16;
    v17[1] = v15;
    v18 = v3[7] + 88 * v13;
    v19 = v29[1];
    *(_OWORD *)v18 = v29[0];
    v20 = v29[2];
    v21 = v29[3];
    v22 = v29[4];
    *(_QWORD *)(v18 + 80) = v30;
    *(_OWORD *)(v18 + 48) = v21;
    *(_OWORD *)(v18 + 64) = v22;
    *(_OWORD *)(v18 + 16) = v19;
    *(_OWORD *)(v18 + 32) = v20;
    ++v3[2];
  }
  while (v28 - 5 != v4)
  {
    v24 = *(_QWORD *)(v26 + 8 * v4++);
    if (v24)
    {
      v23 = v4 + 4;
      goto LABEL_18;
    }
  }
  return v3;
}

uint64_t sub_1B1FBE580@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  v4 = *a1;
  v3 = a1[1];
  sub_1B19F8F0C((uint64_t)(a1 + 2), (uint64_t)(a2 + 2));
  *a2 = v4;
  a2[1] = v3;
  return swift_bridgeObjectRetain();
}

uint64_t sub_1B1FBE5C0(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t *a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t *v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t result;
  _BYTE v29[88];
  _BYTE v30[88];
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v7 = -1 << *(_BYTE *)(a1 + 32);
  v8 = ~v7;
  v9 = *(_QWORD *)(a1 + 64);
  v10 = -v7;
  v45 = a1;
  v46 = a1 + 64;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  else
    v11 = -1;
  v47 = v8;
  v48 = 0;
  v49 = v11 & v9;
  v50 = a2;
  v51 = a3;
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1B1DF5B48((uint64_t)&v37);
  v12 = v38;
  if (!v38)
  {
LABEL_17:
    swift_release();
    swift_bridgeObjectRelease();
    sub_1B19F8D30();
    return swift_release();
  }
  while (1)
  {
    v20 = v37;
    v33 = v41;
    v34 = v42;
    v35 = v43;
    v36 = v44;
    v31 = v39;
    v32 = v40;
    v21 = *a5;
    v23 = sub_1B1DC3B00(v37, v12);
    v24 = v22;
    v25 = *(_QWORD *)(v21 + 16) + ((v22 & 1) == 0);
    if (*(_QWORD *)(v21 + 24) < v25)
      break;
    if ((a4 & 1) != 0)
    {
      if ((v22 & 1) != 0)
        goto LABEL_14;
    }
    else
    {
      sub_1B1EA805C();
      if ((v24 & 1) != 0)
      {
LABEL_14:
        sub_1B19F8F0C(*(_QWORD *)(*a5 + 56) + 88 * v23, (uint64_t)v29);
        sub_1B19F8F0C((uint64_t)v29, (uint64_t)v30);
        sub_1B1A203C4((uint64_t)v29);
        sub_1B1A203C4((uint64_t)&v31);
        swift_bridgeObjectRelease();
        sub_1B1B25BD8((uint64_t)v30, *(_QWORD *)(*a5 + 56) + 88 * v23);
        goto LABEL_7;
      }
    }
LABEL_6:
    v13 = (_QWORD *)*a5;
    *(_QWORD *)(*a5 + 8 * (v23 >> 6) + 64) |= 1 << v23;
    v14 = (uint64_t *)(v13[6] + 16 * v23);
    *v14 = v20;
    v14[1] = v12;
    v15 = v13[7] + 88 * v23;
    v16 = v32;
    *(_OWORD *)v15 = v31;
    *(_OWORD *)(v15 + 16) = v16;
    v17 = v33;
    v18 = v34;
    v19 = v35;
    *(_QWORD *)(v15 + 80) = v36;
    *(_OWORD *)(v15 + 48) = v18;
    *(_OWORD *)(v15 + 64) = v19;
    *(_OWORD *)(v15 + 32) = v17;
    ++v13[2];
LABEL_7:
    sub_1B1DF5B48((uint64_t)&v37);
    v12 = v38;
    a4 = 1;
    if (!v38)
      goto LABEL_17;
  }
  sub_1B1E90CBC(v25, a4 & 1);
  v26 = sub_1B1DC3B00(v20, v12);
  if ((v24 & 1) == (v27 & 1))
  {
    v23 = v26;
    if ((v24 & 1) != 0)
      goto LABEL_14;
    goto LABEL_6;
  }
  result = sub_1B2229FC4();
  __break(1u);
  return result;
}

uint64_t sub_1B1FBE830()
{
  unint64_t v0;

  v0 = sub_1B2229730();
  swift_bridgeObjectRelease();
  if (v0 >= 5)
    return 5;
  else
    return v0;
}

uint64_t sub_1B1FBE878(uint64_t a1, uint64_t a2)
{
  int64_t v3;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    v20 = MEMORY[0x1E0DEE9D8];
    sub_1B2029FFC(0, v3, 0);
    v5 = (uint64_t *)(a1 + 40);
    do
    {
      v7 = *(v5 - 1);
      v6 = *v5;
      v9 = *(_QWORD *)(v20 + 16);
      v8 = *(_QWORD *)(v20 + 24);
      swift_bridgeObjectRetain();
      if (v9 >= v8 >> 1)
        sub_1B2029FFC(v8 > 1, v9 + 1, 1);
      v5 += 2;
      *(_QWORD *)(v20 + 16) = v9 + 1;
      v10 = v20 + 16 * v9;
      *(_QWORD *)(v10 + 32) = v7;
      *(_QWORD *)(v10 + 40) = v6;
      --v3;
    }
    while (v3);
  }
  v11 = MEMORY[0x1E0DEA968];
  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BA490, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
  sub_1B1BCBBF8((unint64_t *)&qword_1ED4BA4A0, (unint64_t *)&qword_1ED4BA490, v11, MEMORY[0x1E0DEAF20]);
  sub_1B2228644();
  swift_bridgeObjectRelease();
  v12 = *(_QWORD *)(a2 + 16);
  if (v12)
  {
    v21 = MEMORY[0x1E0DEE9D8];
    sub_1B2029FFC(0, v12, 0);
    v13 = (uint64_t *)(a2 + 40);
    do
    {
      v15 = *(v13 - 1);
      v14 = *v13;
      v17 = *(_QWORD *)(v21 + 16);
      v16 = *(_QWORD *)(v21 + 24);
      swift_bridgeObjectRetain();
      if (v17 >= v16 >> 1)
        sub_1B2029FFC(v16 > 1, v17 + 1, 1);
      v13 += 2;
      *(_QWORD *)(v21 + 16) = v17 + 1;
      v18 = v21 + 16 * v17;
      *(_QWORD *)(v18 + 32) = v15;
      *(_QWORD *)(v18 + 40) = v14;
      --v12;
    }
    while (v12);
  }
  sub_1B2228644();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  return 40;
}

uint64_t sub_1B1FBEAEC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v25;
  _QWORD v26[5];
  _QWORD v27[5];

  v2 = a2;
  v3 = *(_QWORD *)(a1 + 16);
  v4 = MEMORY[0x1E0DEE9D8];
  if (v3)
  {
    v26[0] = MEMORY[0x1E0DEE9D8];
    sub_1B2029FFC(0, v3, 0);
    v4 = v26[0];
    v6 = a1 + 32;
    do
    {
      sub_1B19FA278(v6, (uint64_t)v27);
      sub_1B19F8C58(v27, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19FA2B4);
      v7 = sub_1B1E03DBC();
      v9 = v8;
      sub_1B19F8C58(v27, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19F9FEC);
      v26[0] = v4;
      v11 = *(_QWORD *)(v4 + 16);
      v10 = *(_QWORD *)(v4 + 24);
      if (v11 >= v10 >> 1)
      {
        sub_1B2029FFC(v10 > 1, v11 + 1, 1);
        v4 = v26[0];
      }
      *(_QWORD *)(v4 + 16) = v11 + 1;
      v12 = v4 + 16 * v11;
      *(_QWORD *)(v12 + 32) = v7;
      *(_QWORD *)(v12 + 40) = v9;
      v6 += 40;
      --v3;
    }
    while (v3);
    v2 = a2;
  }
  v13 = *(_QWORD *)(v2 + 16);
  v14 = MEMORY[0x1E0DEE9D8];
  if (v13)
  {
    v25 = MEMORY[0x1E0DEE9D8];
    sub_1B2029FFC(0, v13, 0);
    v14 = v25;
    v15 = v2 + 32;
    do
    {
      sub_1B19FA278(v15, (uint64_t)v26);
      sub_1B19F8C58(v26, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19FA2B4);
      v16 = sub_1B1E03DBC();
      v18 = v17;
      sub_1B19F8C58(v26, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19F9FEC);
      v20 = *(_QWORD *)(v25 + 16);
      v19 = *(_QWORD *)(v25 + 24);
      if (v20 >= v19 >> 1)
        sub_1B2029FFC(v19 > 1, v20 + 1, 1);
      *(_QWORD *)(v25 + 16) = v20 + 1;
      v21 = v25 + 16 * v20;
      *(_QWORD *)(v21 + 32) = v16;
      *(_QWORD *)(v21 + 40) = v18;
      v15 += 40;
      --v13;
    }
    while (v13);
  }
  v22 = sub_1B1FBE878(v4, v14);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v22;
}

uint64_t sub_1B1FBECEC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return MEMORY[0x1E0DEE9D8];
  v2 = 0;
  v3 = a1 + 40;
  v15 = -v1;
  v4 = MEMORY[0x1E0DEE9D8];
  v13 = a1 + 40;
  do
  {
    v14 = v4;
    v5 = (uint64_t *)(v3 + 16 * v2++);
    while (1)
    {
      v6 = *(v5 - 1);
      v7 = *v5;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1B2228890();
      sub_1B1A2044C();
      sub_1B1A20490();
      v8 = sub_1B222862C();
      swift_bridgeObjectRelease();
      if ((v8 & 1) != 0)
        break;
      v5 += 2;
      swift_bridgeObjectRelease();
      ++v2;
      if (v15 + v2 == 1)
        return v14;
    }
    v4 = v14;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_1B2029FFC(0, *(_QWORD *)(v14 + 16) + 1, 1);
      v4 = v14;
    }
    v10 = *(_QWORD *)(v4 + 16);
    v9 = *(_QWORD *)(v4 + 24);
    if (v10 >= v9 >> 1)
    {
      sub_1B2029FFC(v9 > 1, v10 + 1, 1);
      v4 = v14;
    }
    *(_QWORD *)(v4 + 16) = v10 + 1;
    v11 = v4 + 16 * v10;
    *(_QWORD *)(v11 + 32) = v6;
    *(_QWORD *)(v11 + 40) = v7;
    v3 = v13;
  }
  while (v15 + v2);
  return v4;
}

char *sub_1B1FBEE9C(uint64_t a1, uint64_t a2)
{
  char *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __int128 v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  __int128 v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  __int128 v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  __int128 v29;
  int v30;
  char *v32;
  char *v33;
  char *v34;
  unint64_t v35;
  char *v36;
  char *v37;
  unint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  unint64_t v42;
  char *v43;
  char *v44;
  unint64_t v45;
  char *v46;
  unint64_t v47;
  unint64_t v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  _OWORD v57[2];
  _OWORD v58[2];
  char v59[8];
  uint64_t v60;

  sub_1B19FA278(a1, (uint64_t)v59);
  switch(v60)
  {
    case 24:
      sub_1B1A0DCD4(a2, (uint64_t)v57);
      sub_1B1A0DDAC(v57, v58);
      type metadata accessor for simd_float4x3(0);
      swift_dynamicCast();
      v50 = v53;
      v4 = sub_1B1C636E0(0, 1, 1, MEMORY[0x1E0DEE9D8]);
      v9 = *((_QWORD *)v4 + 2);
      v10 = *((_QWORD *)v4 + 3);
      v11 = v9 + 1;
      if (v9 >= v10 >> 1)
      {
        v47 = v9 + 1;
        v34 = v4;
        v35 = *((_QWORD *)v4 + 2);
        v36 = sub_1B1C636E0(v10 > 1, v9 + 1, 1, v34);
        v9 = v35;
        v11 = v47;
        v4 = v36;
      }
      *((_QWORD *)v4 + 2) = v11;
      *(_OWORD *)&v4[16 * v9 + 32] = v50;
      sub_1B1A0DCD4(a2, (uint64_t)v57);
      sub_1B1A0DDAC(v57, v58);
      swift_dynamicCast();
      v12 = v54;
      v13 = *((_QWORD *)v4 + 2);
      v14 = *((_QWORD *)v4 + 3);
      v15 = v13 + 1;
      if (v13 >= v14 >> 1)
      {
        v37 = v4;
        v38 = *((_QWORD *)v4 + 2);
        v39 = sub_1B1C636E0(v14 > 1, v13 + 1, 1, v37);
        v12 = v54;
        v13 = v38;
        v4 = v39;
      }
      *((_QWORD *)v4 + 2) = v15;
      *(_OWORD *)&v4[16 * v13 + 32] = v12;
      sub_1B1A0DCD4(a2, (uint64_t)v57);
      sub_1B1A0DDAC(v57, v58);
      swift_dynamicCast();
      v16 = v55;
      v18 = *((_QWORD *)v4 + 2);
      v17 = *((_QWORD *)v4 + 3);
      v19 = v18 + 1;
      if (v18 >= v17 >> 1)
      {
        v40 = sub_1B1C636E0(v17 > 1, v18 + 1, 1, v4);
        v16 = v55;
        v19 = v18 + 1;
        v4 = v40;
      }
      *((_QWORD *)v4 + 2) = v19;
      *(_OWORD *)&v4[16 * v18 + 32] = v16;
      sub_1B1A0DCD4(a2, (uint64_t)v57);
      sub_1B1A0DDAC(v57, v58);
      swift_dynamicCast();
      v8 = v56;
      goto LABEL_19;
    case 21:
      sub_1B1A0DCD4(a2, (uint64_t)v57);
      sub_1B1A0DDAC(v57, v58);
      type metadata accessor for simd_float3x3(0);
      swift_dynamicCast();
      v51 = v53;
      v4 = sub_1B1C636E0(0, 1, 1, MEMORY[0x1E0DEE9D8]);
      v20 = *((_QWORD *)v4 + 2);
      v21 = *((_QWORD *)v4 + 3);
      v22 = v20 + 1;
      if (v20 >= v21 >> 1)
      {
        v48 = v20 + 1;
        v41 = v4;
        v42 = *((_QWORD *)v4 + 2);
        v43 = sub_1B1C636E0(v21 > 1, v20 + 1, 1, v41);
        v20 = v42;
        v22 = v48;
        v4 = v43;
      }
      *((_QWORD *)v4 + 2) = v22;
      *(_OWORD *)&v4[16 * v20 + 32] = v51;
      sub_1B1A0DCD4(a2, (uint64_t)v57);
      sub_1B1A0DDAC(v57, v58);
      swift_dynamicCast();
      v23 = v54;
      v24 = *((_QWORD *)v4 + 2);
      v25 = *((_QWORD *)v4 + 3);
      v26 = v24 + 1;
      if (v24 >= v25 >> 1)
      {
        v44 = v4;
        v45 = *((_QWORD *)v4 + 2);
        v46 = sub_1B1C636E0(v25 > 1, v24 + 1, 1, v44);
        v23 = v54;
        v24 = v45;
        v4 = v46;
      }
      *((_QWORD *)v4 + 2) = v26;
      *(_OWORD *)&v4[16 * v24 + 32] = v23;
      sub_1B1A0DCD4(a2, (uint64_t)v57);
      sub_1B1A0DDAC(v57, v58);
      swift_dynamicCast();
      v8 = v55;
      goto LABEL_19;
    case 18:
      sub_1B1A0DCD4(a2, (uint64_t)v58);
      sub_1B1A0DDAC(v58, &v53);
      type metadata accessor for simd_float2x3(0);
      swift_dynamicCast();
      v49 = v57[0];
      v4 = sub_1B1C636E0(0, 1, 1, MEMORY[0x1E0DEE9D8]);
      v6 = *((_QWORD *)v4 + 2);
      v5 = *((_QWORD *)v4 + 3);
      v7 = v6 + 1;
      if (v6 >= v5 >> 1)
      {
        v33 = sub_1B1C636E0(v5 > 1, v6 + 1, 1, v4);
        v7 = v6 + 1;
        v4 = v33;
      }
      *((_QWORD *)v4 + 2) = v7;
      *(_OWORD *)&v4[16 * v6 + 32] = v49;
      sub_1B1A0DCD4(a2, (uint64_t)v58);
      sub_1B1A0DDAC(v58, &v53);
      swift_dynamicCast();
      v8 = v57[1];
LABEL_19:
      v28 = *((_QWORD *)v4 + 2);
      v27 = *((_QWORD *)v4 + 3);
      if (v28 >= v27 >> 1)
      {
        v52 = v8;
        v32 = sub_1B1C636E0(v27 > 1, v28 + 1, 1, v4);
        v8 = v52;
        v4 = v32;
      }
      *((_QWORD *)v4 + 2) = v28 + 1;
      *(_OWORD *)&v4[16 * v28 + 32] = v8;
      return v4;
  }
  if (qword_1ED4BF430 != -1)
    swift_once();
  *(_QWORD *)&v53 = 0;
  *((_QWORD *)&v53 + 1) = 0xE000000000000000;
  swift_retain();
  sub_1B2229430();
  v58[0] = v53;
  sub_1B2228890();
  sub_1B19FA278(a1, (uint64_t)&v53);
  sub_1B22295EC();
  v29 = v58[0];
  v30 = sub_1B2228E90();
  if (qword_1ED4BF658 != -1)
    swift_once();
  *(_QWORD *)&v53 = 0;
  swift_retain();
  sub_1B1F1AD70(v30, (uint64_t *)&v53, v29, *((uint64_t *)&v29 + 1));
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return (char *)MEMORY[0x1E0DEE9D8];
}

char *sub_1B1FBF4BC(uint64_t a1, uint64_t a2)
{
  char *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __int128 v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  __int128 v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  __int128 v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  __int128 v29;
  int v30;
  char *v32;
  char *v33;
  char *v34;
  unint64_t v35;
  char *v36;
  char *v37;
  unint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  unint64_t v42;
  char *v43;
  char *v44;
  unint64_t v45;
  char *v46;
  unint64_t v47;
  unint64_t v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  _OWORD v57[2];
  _OWORD v58[2];
  char v59[8];
  uint64_t v60;

  sub_1B19FA278(a1, (uint64_t)v59);
  switch(v60)
  {
    case 25:
      sub_1B1A0DCD4(a2, (uint64_t)v57);
      sub_1B1A0DDAC(v57, v58);
      type metadata accessor for simd_float4x4(0);
      swift_dynamicCast();
      v50 = v53;
      v4 = sub_1B1791058(0, 1, 1, MEMORY[0x1E0DEE9D8]);
      v9 = *((_QWORD *)v4 + 2);
      v10 = *((_QWORD *)v4 + 3);
      v11 = v9 + 1;
      if (v9 >= v10 >> 1)
      {
        v47 = v9 + 1;
        v34 = v4;
        v35 = *((_QWORD *)v4 + 2);
        v36 = sub_1B1791058(v10 > 1, v9 + 1, 1, v34);
        v9 = v35;
        v11 = v47;
        v4 = v36;
      }
      *((_QWORD *)v4 + 2) = v11;
      *(_OWORD *)&v4[16 * v9 + 32] = v50;
      sub_1B1A0DCD4(a2, (uint64_t)v57);
      sub_1B1A0DDAC(v57, v58);
      swift_dynamicCast();
      v12 = v54;
      v13 = *((_QWORD *)v4 + 2);
      v14 = *((_QWORD *)v4 + 3);
      v15 = v13 + 1;
      if (v13 >= v14 >> 1)
      {
        v37 = v4;
        v38 = *((_QWORD *)v4 + 2);
        v39 = sub_1B1791058(v14 > 1, v13 + 1, 1, v37);
        v12 = v54;
        v13 = v38;
        v4 = v39;
      }
      *((_QWORD *)v4 + 2) = v15;
      *(_OWORD *)&v4[16 * v13 + 32] = v12;
      sub_1B1A0DCD4(a2, (uint64_t)v57);
      sub_1B1A0DDAC(v57, v58);
      swift_dynamicCast();
      v16 = v55;
      v18 = *((_QWORD *)v4 + 2);
      v17 = *((_QWORD *)v4 + 3);
      v19 = v18 + 1;
      if (v18 >= v17 >> 1)
      {
        v40 = sub_1B1791058(v17 > 1, v18 + 1, 1, v4);
        v16 = v55;
        v19 = v18 + 1;
        v4 = v40;
      }
      *((_QWORD *)v4 + 2) = v19;
      *(_OWORD *)&v4[16 * v18 + 32] = v16;
      sub_1B1A0DCD4(a2, (uint64_t)v57);
      sub_1B1A0DDAC(v57, v58);
      swift_dynamicCast();
      v8 = v56;
      goto LABEL_19;
    case 22:
      sub_1B1A0DCD4(a2, (uint64_t)v57);
      sub_1B1A0DDAC(v57, v58);
      type metadata accessor for simd_float3x4(0);
      swift_dynamicCast();
      v51 = v53;
      v4 = sub_1B1791058(0, 1, 1, MEMORY[0x1E0DEE9D8]);
      v20 = *((_QWORD *)v4 + 2);
      v21 = *((_QWORD *)v4 + 3);
      v22 = v20 + 1;
      if (v20 >= v21 >> 1)
      {
        v48 = v20 + 1;
        v41 = v4;
        v42 = *((_QWORD *)v4 + 2);
        v43 = sub_1B1791058(v21 > 1, v20 + 1, 1, v41);
        v20 = v42;
        v22 = v48;
        v4 = v43;
      }
      *((_QWORD *)v4 + 2) = v22;
      *(_OWORD *)&v4[16 * v20 + 32] = v51;
      sub_1B1A0DCD4(a2, (uint64_t)v57);
      sub_1B1A0DDAC(v57, v58);
      swift_dynamicCast();
      v23 = v54;
      v24 = *((_QWORD *)v4 + 2);
      v25 = *((_QWORD *)v4 + 3);
      v26 = v24 + 1;
      if (v24 >= v25 >> 1)
      {
        v44 = v4;
        v45 = *((_QWORD *)v4 + 2);
        v46 = sub_1B1791058(v25 > 1, v24 + 1, 1, v44);
        v23 = v54;
        v24 = v45;
        v4 = v46;
      }
      *((_QWORD *)v4 + 2) = v26;
      *(_OWORD *)&v4[16 * v24 + 32] = v23;
      sub_1B1A0DCD4(a2, (uint64_t)v57);
      sub_1B1A0DDAC(v57, v58);
      swift_dynamicCast();
      v8 = v55;
      goto LABEL_19;
    case 19:
      sub_1B1A0DCD4(a2, (uint64_t)v58);
      sub_1B1A0DDAC(v58, &v53);
      type metadata accessor for simd_float2x4(0);
      swift_dynamicCast();
      v49 = v57[0];
      v4 = sub_1B1791058(0, 1, 1, MEMORY[0x1E0DEE9D8]);
      v6 = *((_QWORD *)v4 + 2);
      v5 = *((_QWORD *)v4 + 3);
      v7 = v6 + 1;
      if (v6 >= v5 >> 1)
      {
        v33 = sub_1B1791058(v5 > 1, v6 + 1, 1, v4);
        v7 = v6 + 1;
        v4 = v33;
      }
      *((_QWORD *)v4 + 2) = v7;
      *(_OWORD *)&v4[16 * v6 + 32] = v49;
      sub_1B1A0DCD4(a2, (uint64_t)v58);
      sub_1B1A0DDAC(v58, &v53);
      swift_dynamicCast();
      v8 = v57[1];
LABEL_19:
      v28 = *((_QWORD *)v4 + 2);
      v27 = *((_QWORD *)v4 + 3);
      if (v28 >= v27 >> 1)
      {
        v52 = v8;
        v32 = sub_1B1791058(v27 > 1, v28 + 1, 1, v4);
        v8 = v52;
        v4 = v32;
      }
      *((_QWORD *)v4 + 2) = v28 + 1;
      *(_OWORD *)&v4[16 * v28 + 32] = v8;
      return v4;
  }
  if (qword_1ED4BF430 != -1)
    swift_once();
  *(_QWORD *)&v53 = 0;
  *((_QWORD *)&v53 + 1) = 0xE000000000000000;
  swift_retain();
  sub_1B2229430();
  v58[0] = v53;
  sub_1B2228890();
  sub_1B19FA278(a1, (uint64_t)&v53);
  sub_1B22295EC();
  v29 = v58[0];
  v30 = sub_1B2228E90();
  if (qword_1ED4BF658 != -1)
    swift_once();
  *(_QWORD *)&v53 = 0;
  swift_retain();
  sub_1B1F1AD70(v30, (uint64_t *)&v53, v29, *((uint64_t *)&v29 + 1));
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return (char *)MEMORY[0x1E0DEE9D8];
}

_QWORD *sub_1B1FBFADC(_QWORD *result, __n128 *a2, void (*a3)(uint64_t, uint64_t, __n128))
{
  uint64_t v3;
  unint64_t v5;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __n128 *v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;

  v3 = result[2];
  if (v3)
  {
    v5 = a2[1].n128_u64[0];
    if (v5)
    {
      v7 = result;
      v8 = result[4];
      v9 = result[5];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      a3(v8, v9, a2[2]);
      swift_bridgeObjectRelease();
      v10 = v3 - 1;
      if (v10)
      {
        v11 = a2 + 3;
        v12 = v7 + 7;
        v13 = v5 - 1;
        do
        {
          if (!v13)
            break;
          v14 = *(v12 - 1);
          v15 = *v12;
          v16 = *v11++;
          swift_bridgeObjectRetain();
          a3(v14, v15, v16);
          swift_bridgeObjectRelease();
          v12 += 2;
          --v13;
          --v10;
        }
        while (v10);
      }
      swift_bridgeObjectRelease();
      return (_QWORD *)swift_bridgeObjectRelease();
    }
  }
  return result;
}

char *sub_1B1FBFBD8(uint64_t a1, uint64_t a2)
{
  char *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int v9;
  uint64_t v11;
  uint64_t v12;
  _OWORD v13[2];
  _OWORD v14[2];
  _BYTE v15[8];
  uint64_t v16;

  sub_1B19FA278(a1, (uint64_t)v15);
  if (v16 == 39)
  {
    sub_1B1A0DCD4(a2, (uint64_t)v13);
    sub_1B1A0DDAC(v13, v14);
    sub_1B1C8AC7C(0, (unint64_t *)&qword_1ED4BA5B8);
    swift_dynamicCast();
    v4 = sub_1B1C62D94(0, 1, 1, MEMORY[0x1E0DEE9D8]);
    v6 = *((_QWORD *)v4 + 2);
    v5 = *((_QWORD *)v4 + 3);
    if (v6 >= v5 >> 1)
      v4 = sub_1B1C62D94(v5 > 1, v6 + 1, 1, v4);
    *((_QWORD *)v4 + 2) = v6 + 1;
    *(_QWORD *)&v4[8 * v6 + 32] = v11;
    sub_1B1A0DCD4(a2, (uint64_t)v13);
    sub_1B1A0DDAC(v13, v14);
    swift_dynamicCast();
    v8 = *((_QWORD *)v4 + 2);
    v7 = *((_QWORD *)v4 + 3);
    if (v8 >= v7 >> 1)
      v4 = sub_1B1C62D94(v7 > 1, v8 + 1, 1, v4);
    *((_QWORD *)v4 + 2) = v8 + 1;
    *(_QWORD *)&v4[8 * v8 + 32] = v12;
  }
  else
  {
    if (qword_1ED4BF430 != -1)
      swift_once();
    *(_QWORD *)&v14[0] = 0;
    *((_QWORD *)&v14[0] + 1) = 0xE000000000000000;
    swift_retain();
    sub_1B2229430();
    sub_1B2228890();
    sub_1B19FA278(a1, (uint64_t)v14);
    sub_1B22295EC();
    v9 = sub_1B2228E90();
    if (qword_1ED4BF658 != -1)
      swift_once();
    *(_QWORD *)&v14[0] = 0;
    swift_retain();
    sub_1B1F1AD70(v9, (uint64_t *)v14, 0, 0xE000000000000000);
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    return (char *)MEMORY[0x1E0DEE9D8];
  }
  return v4;
}

_QWORD *sub_1B1FBFE84(_QWORD *result, _QWORD *a2, void (*a3)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v3;
  uint64_t v5;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v3 = result[2];
  if (v3)
  {
    v5 = a2[2];
    if (v5)
    {
      v7 = result;
      v8 = result[4];
      v9 = result[5];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      a3(v8, v9, a2[4]);
      swift_bridgeObjectRelease();
      v10 = v3 - 1;
      if (v3 != 1)
      {
        v11 = a2 + 5;
        v12 = v7 + 7;
        v13 = v5 - 1;
        do
        {
          if (!v13)
            break;
          v14 = *(v12 - 1);
          v15 = *v12;
          v16 = *v11++;
          swift_bridgeObjectRetain();
          a3(v14, v15, v16);
          swift_bridgeObjectRelease();
          v12 += 2;
          --v13;
          --v10;
        }
        while (v10);
      }
      swift_bridgeObjectRelease();
      return (_QWORD *)swift_bridgeObjectRelease();
    }
  }
  return result;
}

char *sub_1B1FBFF84(uint64_t a1, uint64_t a2)
{
  char *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  int v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  int v32;
  unint64_t v33;
  unint64_t v34;
  int v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char *v42;
  char *v43;
  char *v44;
  unint64_t v45;
  char *v46;
  char *v47;
  unint64_t v48;
  char *v49;
  char *v50;
  char *v51;
  unint64_t v52;
  char *v53;
  char *v54;
  unint64_t v55;
  char *v56;
  char *v57;
  char *v58;
  char *v59;
  unint64_t v60;
  unint64_t v61;
  int v62;
  int v63;
  int v64;
  int v65;
  _OWORD v66[2];
  _OWORD v67[2];
  char v68[8];
  uint64_t v69;

  sub_1B19FA278(a1, (uint64_t)v68);
  switch(v69)
  {
    case 14:
      sub_1B1A0DCD4(a2, (uint64_t)v66);
      sub_1B1A0DDAC(v66, v67);
      sub_1B19F8E54(0, &qword_1ED4BB080, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], MEMORY[0x1E0DEDD20]);
      swift_dynamicCast();
      v4 = sub_1B1C635D8(0, 1, 1, MEMORY[0x1E0DEE9D8]);
      v6 = *((_QWORD *)v4 + 2);
      v5 = *((_QWORD *)v4 + 3);
      v7 = v6 + 1;
      if (v6 >= v5 >> 1)
      {
        v42 = sub_1B1C635D8(v5 > 1, v6 + 1, 1, v4);
        v7 = v6 + 1;
        v4 = v42;
      }
      *((_QWORD *)v4 + 2) = v7;
      *(_DWORD *)&v4[4 * v6 + 32] = v62;
      sub_1B1A0DCD4(a2, (uint64_t)v66);
      sub_1B1A0DDAC(v66, v67);
      swift_dynamicCast();
      v8 = v63;
      v10 = *((_QWORD *)v4 + 2);
      v9 = *((_QWORD *)v4 + 3);
      if (v10 >= v9 >> 1)
      {
        v43 = sub_1B1C635D8(v9 > 1, v10 + 1, 1, v4);
        v8 = v63;
        v4 = v43;
      }
      *((_QWORD *)v4 + 2) = v10 + 1;
      *(_DWORD *)&v4[4 * v10 + 32] = v8;
      break;
    case 15:
      sub_1B1A0DCD4(a2, (uint64_t)v66);
      sub_1B1A0DDAC(v66, v67);
      sub_1B19F8E54(0, (unint64_t *)&qword_1ED4BB0A0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50]);
      swift_dynamicCast();
      v4 = sub_1B1C635D8(0, 1, 1, MEMORY[0x1E0DEE9D8]);
      v11 = *((_QWORD *)v4 + 2);
      v12 = *((_QWORD *)v4 + 3);
      v13 = v11 + 1;
      if (v11 >= v12 >> 1)
      {
        v60 = v11 + 1;
        v44 = v4;
        v45 = *((_QWORD *)v4 + 2);
        v46 = sub_1B1C635D8(v12 > 1, v11 + 1, 1, v44);
        v11 = v45;
        v13 = v60;
        v4 = v46;
      }
      *((_QWORD *)v4 + 2) = v13;
      *(_DWORD *)&v4[4 * v11 + 32] = v62;
      sub_1B1A0DCD4(a2, (uint64_t)v66);
      sub_1B1A0DDAC(v66, v67);
      swift_dynamicCast();
      v14 = v63;
      v15 = *((_QWORD *)v4 + 2);
      v16 = *((_QWORD *)v4 + 3);
      v17 = v15 + 1;
      if (v15 >= v16 >> 1)
      {
        v47 = v4;
        v48 = *((_QWORD *)v4 + 2);
        v49 = sub_1B1C635D8(v16 > 1, v15 + 1, 1, v47);
        v14 = v63;
        v15 = v48;
        v4 = v49;
      }
      *((_QWORD *)v4 + 2) = v17;
      *(_DWORD *)&v4[4 * v15 + 32] = v14;
      sub_1B1A0DCD4(a2, (uint64_t)v66);
      sub_1B1A0DDAC(v66, v67);
      swift_dynamicCast();
      v18 = v64;
      v20 = *((_QWORD *)v4 + 2);
      v19 = *((_QWORD *)v4 + 3);
      if (v20 >= v19 >> 1)
      {
        v50 = sub_1B1C635D8(v19 > 1, v20 + 1, 1, v4);
        v18 = v64;
        v4 = v50;
      }
      *((_QWORD *)v4 + 2) = v20 + 1;
      *(_DWORD *)&v4[4 * v20 + 32] = v18;
      break;
    case 16:
      sub_1B1A0DCD4(a2, (uint64_t)v66);
      sub_1B1A0DDAC(v66, v67);
      sub_1B19F8E54(0, (unint64_t *)&qword_1ED4BB0E0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDDA8]);
      swift_dynamicCast();
      v4 = sub_1B1C635D8(0, 1, 1, MEMORY[0x1E0DEE9D8]);
      v21 = *((_QWORD *)v4 + 2);
      v22 = *((_QWORD *)v4 + 3);
      v23 = v21 + 1;
      if (v21 >= v22 >> 1)
      {
        v61 = v21 + 1;
        v51 = v4;
        v52 = *((_QWORD *)v4 + 2);
        v53 = sub_1B1C635D8(v22 > 1, v21 + 1, 1, v51);
        v21 = v52;
        v23 = v61;
        v4 = v53;
      }
      *((_QWORD *)v4 + 2) = v23;
      *(_DWORD *)&v4[4 * v21 + 32] = v62;
      sub_1B1A0DCD4(a2, (uint64_t)v66);
      sub_1B1A0DDAC(v66, v67);
      swift_dynamicCast();
      v24 = v63;
      v25 = *((_QWORD *)v4 + 2);
      v26 = *((_QWORD *)v4 + 3);
      v27 = v25 + 1;
      if (v25 >= v26 >> 1)
      {
        v54 = v4;
        v55 = *((_QWORD *)v4 + 2);
        v56 = sub_1B1C635D8(v26 > 1, v25 + 1, 1, v54);
        v24 = v63;
        v25 = v55;
        v4 = v56;
      }
      *((_QWORD *)v4 + 2) = v27;
      *(_DWORD *)&v4[4 * v25 + 32] = v24;
      sub_1B1A0DCD4(a2, (uint64_t)v66);
      sub_1B1A0DDAC(v66, v67);
      swift_dynamicCast();
      v28 = v64;
      v30 = *((_QWORD *)v4 + 2);
      v29 = *((_QWORD *)v4 + 3);
      v31 = v30 + 1;
      if (v30 >= v29 >> 1)
      {
        v57 = sub_1B1C635D8(v29 > 1, v30 + 1, 1, v4);
        v28 = v64;
        v31 = v30 + 1;
        v4 = v57;
      }
      *((_QWORD *)v4 + 2) = v31;
      *(_DWORD *)&v4[4 * v30 + 32] = v28;
      sub_1B1A0DCD4(a2, (uint64_t)v66);
      sub_1B1A0DDAC(v66, v67);
      swift_dynamicCast();
      v32 = v65;
      v34 = *((_QWORD *)v4 + 2);
      v33 = *((_QWORD *)v4 + 3);
      if (v34 >= v33 >> 1)
      {
        v58 = sub_1B1C635D8(v33 > 1, v34 + 1, 1, v4);
        v32 = v65;
        v4 = v58;
      }
      *((_QWORD *)v4 + 2) = v34 + 1;
      *(_DWORD *)&v4[4 * v34 + 32] = v32;
      break;
    case 40:
      sub_1B1A0DCD4(a2, (uint64_t)v66);
      sub_1B1A0DDAC(v66, v67);
      sub_1B1C8AC7C(0, (unint64_t *)&qword_1ED4BA5A8);
      swift_dynamicCast();
      v4 = sub_1B1C635D8(0, 1, 1, MEMORY[0x1E0DEE9D8]);
      v37 = *((_QWORD *)v4 + 2);
      v36 = *((_QWORD *)v4 + 3);
      v38 = v37 + 1;
      if (v37 >= v36 >> 1)
      {
        v59 = sub_1B1C635D8(v36 > 1, v37 + 1, 1, v4);
        v38 = v37 + 1;
        v4 = v59;
      }
      *((_QWORD *)v4 + 2) = v38;
      *(_DWORD *)&v4[4 * v37 + 32] = v62;
      sub_1B1A0DCD4(a2, (uint64_t)v66);
      sub_1B1A0DDAC(v66, v67);
      swift_dynamicCast();
      v40 = *((_QWORD *)v4 + 2);
      v39 = *((_QWORD *)v4 + 3);
      if (v40 >= v39 >> 1)
        v4 = sub_1B1C635D8(v39 > 1, v40 + 1, 1, v4);
      *((_QWORD *)v4 + 2) = v40 + 1;
      *(_DWORD *)&v4[4 * v40 + 32] = v63;
      break;
    default:
      if (qword_1ED4BF430 != -1)
        swift_once();
      *(_QWORD *)&v67[0] = 0;
      *((_QWORD *)&v67[0] + 1) = 0xE000000000000000;
      swift_retain();
      sub_1B2229430();
      sub_1B2228890();
      sub_1B19FA278(a1, (uint64_t)v67);
      sub_1B22295EC();
      v35 = sub_1B2228E90();
      if (qword_1ED4BF658 != -1)
        swift_once();
      *(_QWORD *)&v67[0] = 0;
      swift_retain();
      sub_1B1F1AD70(v35, (uint64_t *)v67, 0, 0xE000000000000000);
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      v4 = (char *)MEMORY[0x1E0DEE9D8];
      break;
  }
  return v4;
}

uint64_t sub_1B1FC07F0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return MEMORY[0x1E0DEE9D8];
  v2 = 0;
  v3 = a1 + 40;
  v15 = -v1;
  v4 = MEMORY[0x1E0DEE9D8];
  v13 = a1 + 40;
  do
  {
    v14 = v4;
    v5 = (uint64_t *)(v3 + 16 * v2++);
    while (1)
    {
      v6 = *(v5 - 1);
      v7 = *v5;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1B2228890();
      sub_1B1A2044C();
      sub_1B1A20490();
      v8 = sub_1B222862C();
      swift_bridgeObjectRelease();
      if ((v8 & 1) != 0)
        break;
      v5 += 2;
      swift_bridgeObjectRelease();
      ++v2;
      if (v15 + v2 == 1)
        return v14;
    }
    v4 = v14;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_1B2029FFC(0, *(_QWORD *)(v14 + 16) + 1, 1);
      v4 = v14;
    }
    v10 = *(_QWORD *)(v4 + 16);
    v9 = *(_QWORD *)(v4 + 24);
    if (v10 >= v9 >> 1)
    {
      sub_1B2029FFC(v9 > 1, v10 + 1, 1);
      v4 = v14;
    }
    *(_QWORD *)(v4 + 16) = v10 + 1;
    v11 = v4 + 16 * v10;
    *(_QWORD *)(v11 + 32) = v6;
    *(_QWORD *)(v11 + 40) = v7;
    v3 = v13;
  }
  while (v15 + v2);
  return v4;
}

_QWORD *sub_1B1FC099C(_QWORD *result, uint64_t a2, void (*a3)(uint64_t, uint64_t, float))
{
  uint64_t v3;
  uint64_t v5;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  float v16;

  v3 = result[2];
  if (v3)
  {
    v5 = *(_QWORD *)(a2 + 16);
    if (v5)
    {
      v7 = result;
      v8 = result[4];
      v9 = result[5];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      a3(v8, v9, *(float *)(a2 + 32));
      swift_bridgeObjectRelease();
      v10 = v3 - 1;
      if (v10)
      {
        v11 = (float *)(a2 + 36);
        v12 = v7 + 7;
        v13 = v5 - 1;
        do
        {
          if (!v13)
            break;
          v14 = *(v12 - 1);
          v15 = *v12;
          v16 = *v11++;
          swift_bridgeObjectRetain();
          a3(v14, v15, v16);
          swift_bridgeObjectRelease();
          v12 += 2;
          --v13;
          --v10;
        }
        while (v10);
      }
      swift_bridgeObjectRelease();
      return (_QWORD *)swift_bridgeObjectRelease();
    }
  }
  return result;
}

uint64_t sub_1B1FC0A9C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char v9;
  void (*v10)(char *, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v22[2];

  v0 = sub_1B2227DA4();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0, v2);
  v4 = (char *)v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (char *)v22 - v7;
  sub_1B2227D44();
  sub_1B2227D38();
  v9 = sub_1B2227D2C();
  v10 = *(void (**)(char *, uint64_t))(v1 + 8);
  v10(v4, v0);
  v10(v8, v0);
  if ((v9 & 1) != 0)
  {
    v22[0] = 95;
    v22[1] = 0xE100000000000000;
    sub_1B2228890();
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  v11 = sub_1B2228830();
  if (v11)
  {
    v12 = v11;
    v22[0] = MEMORY[0x1E0DEE9D8];
    sub_1B202A1D8(0, v11 & ~(v11 >> 63), 0);
    v13 = v22[0];
    do
    {
      v14 = sub_1B2228950();
      v16 = v15;
      if ((sub_1B2228608() & 1) == 0 && (sub_1B2228614() & 1) == 0)
      {
        swift_bridgeObjectRelease();
        v16 = 0xE100000000000000;
        v14 = 95;
      }
      v22[0] = v13;
      v18 = *(_QWORD *)(v13 + 16);
      v17 = *(_QWORD *)(v13 + 24);
      if (v18 >= v17 >> 1)
      {
        sub_1B202A1D8(v17 > 1, v18 + 1, 1);
        v13 = v22[0];
      }
      *(_QWORD *)(v13 + 16) = v18 + 1;
      v19 = v13 + 16 * v18;
      *(_QWORD *)(v19 + 32) = v14;
      *(_QWORD *)(v19 + 40) = v16;
      sub_1B222883C();
      --v12;
    }
    while (v12);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    v13 = MEMORY[0x1E0DEE9D8];
  }
  v22[0] = v13;
  v20 = MEMORY[0x1E0DEA2D0];
  sub_1B1A02758(0, &qword_1EEF61AA0, MEMORY[0x1E0DEA2D0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
  sub_1B1BCBBF8(&qword_1EEF626E0, &qword_1EEF61AA0, v20, MEMORY[0x1E0DEAF38]);
  return sub_1B222895C();
}

unint64_t sub_1B1FC0CFC()
{
  unint64_t result;

  result = qword_1EEF61AB0;
  if (!qword_1EEF61AB0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22AAAA0, &type metadata for GraphV1CodeGeneration.BaseObject.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF61AB0);
  }
  return result;
}

uint64_t sub_1B1FC0D40(unint64_t *a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = *a1;
  if (!result)
  {
    sub_1B1A02758(255, &qword_1EEF61AB8, (uint64_t)&_s12MetadataTypeON, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    v8 = v7;
    v9 = a2();
    result = MEMORY[0x1B5E23E74](a3, v8, &v9);
    atomic_store(result, a1);
  }
  return result;
}

_QWORD *sub_1B1FC0DBC(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;

  return sub_1B1FBBF20(a1, a2, a3, *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24), *(_QWORD ***)(v3 + 32), *(_QWORD ***)(v3 + 40));
}

uint64_t sub_1B1FC0DC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return sub_1B1FBC1D4(a1, a2, a3, a4, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), *(_QWORD ***)(v4 + 32), *(uint64_t **)(v4 + 40));
}

uint64_t sub_1B1FC0DD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1FBB918(a1, a2, a3, v3);
}

uint64_t sub_1B1FC0DE0(uint64_t a1, uint64_t a2, __n128 a3)
{
  uint64_t v3;

  return sub_1B1FBBAF0(a3, a1, a2, v3, (unint64_t *)&qword_1ED4BB0E0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDDA8]);
}

uint64_t sub_1B1FC0E08(uint64_t a1, uint64_t a2, __n128 a3)
{
  uint64_t v3;

  return sub_1B1FBBAF0(a3, a1, a2, v3, (unint64_t *)&qword_1ED4BB0A0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50]);
}

uint64_t sub_1B1FC0E30(uint64_t a1, uint64_t a2, float a3)
{
  uint64_t v3;

  return sub_1B1FBBA00(a3, a1, a2, v3);
}

uint64_t sub_1B1FC0E38()
{
  return swift_deallocObject();
}

uint64_t sub_1B1FC0E48()
{
  return swift_deallocObject();
}

uint64_t sub_1B1FC0E58()
{
  return swift_deallocObject();
}

uint64_t sub_1B1FC0E68()
{
  return swift_deallocObject();
}

_QWORD *sub_1B1FC0E78(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;

  return sub_1B1FBB4BC(a1, a2, a3, *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24), *(_QWORD ***)(v3 + 32), *(_QWORD ***)(v3 + 40));
}

uint64_t sub_1B1FC0E84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return sub_1B1FBB770(a1, a2, a3, a4, *(_QWORD ***)(v4 + 16), *(_QWORD *)(v4 + 24), *(_QWORD *)(v4 + 32), *(uint64_t **)(v4 + 40));
}

uint64_t sub_1B1FC0E90(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;

  return sub_1B1FBBC10(a1, a2, a3, *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24), *(_BYTE **)(v3 + 32), *(_QWORD ***)(v3 + 40), *(_QWORD ***)(v3 + 48), *(_QWORD **)(v3 + 56));
}

void sub_1B1FC0EBC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5DA60)
  {
    sub_1B222A0E4();
    v0 = sub_1B2229124();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5DA60);
  }
}

uint64_t sub_1B1FC0F10(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BB3A0, (uint64_t)&_s8MetadataVN, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t storeEnumTagSinglePayload for GraphV1CodeGeneration.BaseObject.Type(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 10 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 10) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF6)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF5)
    return ((uint64_t (*)(void))((char *)&loc_1B1FC0FB8 + 4 * byte_1B22AA7A9[v4]))();
  *a1 = a2 + 10;
  return ((uint64_t (*)(void))((char *)sub_1B1FC0FEC + 4 * byte_1B22AA7A4[v4]))();
}

uint64_t sub_1B1FC0FEC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1FC0FF4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B1FC0FFCLL);
  return result;
}

uint64_t sub_1B1FC1008(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B1FC1010);
  *(_BYTE *)result = a2 + 10;
  return result;
}

uint64_t sub_1B1FC1014(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1FC101C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for GraphV1CodeGeneration.BaseObject.Type()
{
  return &type metadata for GraphV1CodeGeneration.BaseObject.Type;
}

uint64_t storeEnumTagSinglePayload for GraphV1CodeGeneration.BaseObject.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1B1FC1084 + 4 * byte_1B22AA7B3[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1B1FC10B8 + 4 * byte_1B22AA7AE[v4]))();
}

uint64_t sub_1B1FC10B8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1FC10C0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B1FC10C8);
  return result;
}

uint64_t sub_1B1FC10D4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B1FC10DCLL);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1B1FC10E0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1FC10E8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for GraphV1CodeGeneration.BaseObject.CodingKeys()
{
  return &type metadata for GraphV1CodeGeneration.BaseObject.CodingKeys;
}

unint64_t sub_1B1FC1108()
{
  unint64_t result;

  result = qword_1EEF61AD8;
  if (!qword_1EEF61AD8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22AA988, &type metadata for GraphV1CodeGeneration.BaseObject.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF61AD8);
  }
  return result;
}

unint64_t sub_1B1FC1150()
{
  unint64_t result;

  result = qword_1EEF61AE0;
  if (!qword_1EEF61AE0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22AAA78, &type metadata for GraphV1CodeGeneration.BaseObject.Type);
    atomic_store(result, (unint64_t *)&qword_1EEF61AE0);
  }
  return result;
}

unint64_t sub_1B1FC1198()
{
  unint64_t result;

  result = qword_1EEF61AE8;
  if (!qword_1EEF61AE8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22AA8C0, &type metadata for GraphV1CodeGeneration.BaseObject.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF61AE8);
  }
  return result;
}

unint64_t sub_1B1FC11E0()
{
  unint64_t result;

  result = qword_1EEF61AF0;
  if (!qword_1EEF61AF0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22AA8E8, &type metadata for GraphV1CodeGeneration.BaseObject.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF61AF0);
  }
  return result;
}

uint64_t sub_1B1FC1224()
{
  unint64_t v0;

  v0 = sub_1B2229730();
  swift_bridgeObjectRelease();
  if (v0 >= 0xB)
    return 11;
  else
    return v0;
}

unint64_t sub_1B1FC126C()
{
  unint64_t result;

  result = qword_1EEF61AF8;
  if (!qword_1EEF61AF8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22AAA00, &type metadata for GraphV1CodeGeneration.BaseObject.Type);
    atomic_store(result, (unint64_t *)&qword_1EEF61AF8);
  }
  return result;
}

uint64_t sub_1B1FC12B4(unsigned __int16 *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v11;
  unsigned int v12;
  int v13;
  int v14;
  __int128 v15;
  __int128 v16;
  unsigned int v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  char *v26;
  id v27;
  unsigned int *v28;
  __int128 v29;
  uint64_t result;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;

  v6 = sub_1B22287A0();
  MEMORY[0x1E0C80A78](v6, v7);
  v31 = xmmword_1B2295C70;
  *(_QWORD *)&v32 = a1;
  *((_QWORD *)&v32 + 1) = a2;
  sub_1B2228794();
  sub_1B1FC157C();
  sub_1B1FC1618();
  v8 = sub_1B2228770();
  if (!v9)
    goto LABEL_17;
  if (v8 == 1449084502 && v9 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v11 = sub_1B2229D24();
    swift_bridgeObjectRelease();
    if ((v11 & 1) == 0)
      goto LABEL_17;
  }
  v12 = a1[2];
  v13 = a1[3];
  v14 = a1[4];
  sub_1B210B50C(7, 125, a1[2], a1[3], a1[4], 0, 1, 1, (uint64_t)&v31, 1, 0, 0);
  v15 = v34;
  *(_OWORD *)(a3 + 64) = v33;
  *(_OWORD *)(a3 + 80) = v15;
  *(_OWORD *)(a3 + 96) = v35;
  v16 = v32;
  *(_OWORD *)(a3 + 32) = v31;
  *(_OWORD *)(a3 + 48) = v16;
  v17 = v14 * v13;
  swift_getObjectType();
  v18 = sub_1B1F9FC00(16 * (v14 * v13) * (unint64_t)v12, 0);
  if (v18)
  {
    v21 = v18;
    v22 = v19;
    v23 = v20;
    if (objc_msgSend(v18, sel_storageMode) == (id)2)
    {
      v24 = 0;
      v25 = v17 * (unint64_t)v12;
      if (!v25)
        goto LABEL_16;
    }
    else
    {
      v26 = (char *)objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
      v27 = v21;
      v24 = &v26[v22];
      v25 = v17 * (unint64_t)v12;
      if (!v25)
      {
LABEL_16:
        *(_QWORD *)a3 = v21;
        *(_QWORD *)(a3 + 8) = v22;
        *(_QWORD *)(a3 + 16) = v23;
        return swift_unknownObjectRelease();
      }
    }
    v28 = (unsigned int *)(a1 + 9);
    do
    {
      *(_QWORD *)&v29 = *((_QWORD *)v28 - 1);
      *((_QWORD *)&v29 + 1) = *v28;
      *(_OWORD *)v24 = v29;
      v24 += 16;
      v28 += 3;
      --v25;
    }
    while (v25);
    goto LABEL_16;
  }
LABEL_17:
  result = sub_1B2229688();
  __break(1u);
  return result;
}

void sub_1B1FC157C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF64440)
  {
    sub_1B1FC15D4();
    v0 = sub_1B222A03C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF64440);
  }
}

unint64_t sub_1B1FC15D4()
{
  unint64_t result;

  result = qword_1EEF61B00;
  if (!qword_1EEF61B00)
  {
    result = MEMORY[0x1B5E23E74](MEMORY[0x1E0DEAC38], MEMORY[0x1E0DEAC20]);
    atomic_store(result, (unint64_t *)&qword_1EEF61B00);
  }
  return result;
}

unint64_t sub_1B1FC1618()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EEF64450;
  if (!qword_1EEF64450)
  {
    sub_1B1FC157C();
    result = MEMORY[0x1B5E23E74](MEMORY[0x1E0DEDE38], v1);
    atomic_store(result, (unint64_t *)&qword_1EEF64450);
  }
  return result;
}

uint64_t sub_1B1FC1660(unint64_t a1)
{
  return (a1 >> 1) & 1;
}

unint64_t sub_1B1FC1668(uint64_t (*a1)(_QWORD *), uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  _QWORD v12[2];

  v5 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0)
    v5 = a3 & 0xFFFFFFFFFFFFLL;
  if (!v5)
    return 0;
  while (1)
  {
    v7 = sub_1B2228848();
    v12[0] = sub_1B2228950();
    v12[1] = v8;
    v9 = a1(v12);
    if (v4)
      break;
    v10 = v9;
    swift_bridgeObjectRelease();
    if ((v10 & 1) != 0)
      return v7;
    if (v7 < 0x4000)
      return 0;
  }
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t sub_1B1FC176C()
{
  sub_1B1FC6B40();
  return sub_1B2228A58();
}

uint64_t sub_1B1FC17C8()
{
  sub_1B1FC6B40();
  return sub_1B22289E0();
}

uint64_t sub_1B1FC1814()
{
  sub_1B1FC92D8();
  return sub_1B2228A58();
}

uint64_t sub_1B1FC1870()
{
  sub_1B1FC92D8();
  return sub_1B22289E0();
}

void sub_1B1FC18BC(_QWORD *a1@<X8>)
{
  *a1 = &unk_1E638D198;
}

void sub_1B1FC18CC(char *a1)
{
  sub_1B1F927E8(*a1);
}

void sub_1B1FC18D8()
{
  char *v0;

  sub_1B1FB2B84(*v0);
}

void sub_1B1FC18E0()
{
  __asm { BR              X10 }
}

uint64_t sub_1B1FC191C()
{
  sub_1B2228824();
  return swift_bridgeObjectRelease();
}

void sub_1B1FC198C(uint64_t a1)
{
  char *v1;

  sub_1B1DB59D8(a1, *v1);
}

uint64_t sub_1B1FC1994@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B1FC6CDC();
  *a1 = result;
  return result;
}

uint64_t sub_1B1FC19C0()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_1B1FC19F0 + 4 * byte_1B22AAAF4[*v0]))();
}

void sub_1B1FC19F0(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000011;
  a1[1] = 0x80000001B2328BB0;
}

void sub_1B1FC1A10(_QWORD *a1@<X8>)
{
  *a1 = 0x7A696C616D726F6ELL;
  a1[1] = 0xE900000000000065;
}

void sub_1B1FC1A30(_QWORD *a1@<X8>)
{
  *a1 = 0x6572726566657270;
  a1[1] = 0xEF726564616F4C64;
}

uint64_t sub_1B1FC1A58()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1B1FC1A88 + 4 * byte_1B22AAAF8[*v0]))(0x736E6F6974706FLL, 0xE700000000000000);
}

unint64_t sub_1B1FC1A88()
{
  return 0xD000000000000011;
}

uint64_t sub_1B1FC1AA4()
{
  return 0x7A696C616D726F6ELL;
}

uint64_t sub_1B1FC1AC0()
{
  return 0x6572726566657270;
}

uint64_t sub_1B1FC1AE4@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B1FC6CDC();
  *a1 = result;
  return result;
}

uint64_t sub_1B1FC1B08()
{
  sub_1B1FC8BF0();
  return sub_1B222A1D4();
}

uint64_t sub_1B1FC1B30()
{
  sub_1B1FC8BF0();
  return sub_1B222A1E0();
}

uint64_t sub_1B1FC1B58(_QWORD *a1, uint64_t a2, char a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v12;
  char v13;
  char v14;

  sub_1B19F8E54(0, &qword_1EEF61BA0, (uint64_t (*)(void))sub_1B1FC8BF0, (uint64_t)&type metadata for MeshImportOptions.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = (char *)&v12 - v9;
  sub_1B19FA070(a1, a1[3]);
  sub_1B1FC8BF0();
  sub_1B222A180();
  v14 = a3 & 1;
  v13 = 3;
  sub_1B1FC8CBC();
  sub_1B2229958();
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
}

_QWORD *sub_1B1FC1C7C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;
  __int16 v5;

  result = sub_1B1FC85AC(a1);
  if (!v2)
  {
    *(_QWORD *)a2 = result;
    *(_BYTE *)(a2 + 8) = v5 & 1;
    *(_BYTE *)(a2 + 9) = HIBYTE(v5) & 1;
  }
  return result;
}

uint64_t sub_1B1FC1CB4(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1B1FC1B58(a1, a2, *(_BYTE *)(v2 + 8));
}

void sub_1B1FC1CE0(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_WORD *)(a1 + 8) = 0;
}

uint64_t sub_1B1FC1CEC(char *a1, char *a2)
{
  return sub_1B1F907F4(*a1, *a2);
}

uint64_t sub_1B1FC1CF8()
{
  sub_1B222A06C();
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

uint64_t sub_1B1FC1D78()
{
  sub_1B2228824();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B1FC1DD4()
{
  sub_1B222A06C();
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

uint64_t sub_1B1FC1E50@<X0>(char *a1@<X8>)
{
  return sub_1B1FC22E0(a1);
}

void sub_1B1FC1E5C(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 0x7465737361;
  if (*v1)
    v2 = 0x696669746E656469;
  v3 = 0xE500000000000000;
  if (*v1)
    v3 = 0xEA00000000007265;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_1B1FC1E9C()
{
  _BYTE *v0;

  if (*v0)
    return 0x696669746E656469;
  else
    return 0x7465737361;
}

uint64_t sub_1B1FC1ED8@<X0>(char *a1@<X8>)
{
  return sub_1B1FC23B8(a1);
}

uint64_t sub_1B1FC1EE4()
{
  sub_1B1FC8BAC();
  return sub_1B222A1D4();
}

uint64_t sub_1B1FC1F0C()
{
  sub_1B1FC8BAC();
  return sub_1B222A1E0();
}

uint64_t sub_1B1FC1F34(_QWORD *a1)
{
  _OWORD *v1;
  uint64_t v2;
  _OWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  __int128 v11;
  _OWORD v13[3];
  char v14;

  v3 = v1;
  sub_1B19F8E54(0, &qword_1EEF61B78, (uint64_t (*)(void))sub_1B1FC8BAC, (uint64_t)&type metadata for SceneFileAsset.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = (char *)v13 - v9;
  sub_1B19FA070(a1, a1[3]);
  sub_1B1FC8BAC();
  sub_1B222A180();
  v11 = v3[1];
  v13[0] = *v3;
  v13[1] = v11;
  v13[2] = v3[2];
  v14 = 0;
  sub_1B1BB51BC();
  sub_1B2229958();
  if (!v2)
  {
    LOBYTE(v13[0]) = 1;
    sub_1B2229910();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
}

double sub_1B1FC2088@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  __int128 v6;
  _OWORD v7[2];
  __int128 v8;
  __int128 v9;

  sub_1B1FC81D8(a1, (uint64_t *)v7);
  if (!v2)
  {
    v5 = v7[1];
    *a2 = v7[0];
    a2[1] = v5;
    result = *(double *)&v8;
    v6 = v9;
    a2[2] = v8;
    a2[3] = v6;
  }
  return result;
}

uint64_t sub_1B1FC20C8(_QWORD *a1)
{
  return sub_1B1FC1F34(a1);
}

uint64_t sub_1B1FC20DC@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;

  v2 = sub_1B222826C();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1B2228260();
  v7 = sub_1B2228224();
  v9 = v8;
  result = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  *a1 = 0;
  a1[1] = 0xE000000000000000;
  a1[2] = 0;
  a1[3] = 0xE000000000000000;
  a1[4] = 0;
  a1[5] = 0;
  a1[6] = v7;
  a1[7] = v9;
  return result;
}

uint64_t sub_1B1FC217C(char *a1, char *a2)
{
  return sub_1B1F8F990(*a1, *a2);
}

uint64_t sub_1B1FC2188()
{
  sub_1B222A06C();
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

uint64_t sub_1B1FC2204()
{
  sub_1B2228824();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B1FC225C()
{
  sub_1B222A06C();
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

uint64_t sub_1B1FC22D4@<X0>(char *a1@<X8>)
{
  return sub_1B1FC22E0(a1);
}

uint64_t sub_1B1FC22E0@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_1B2229730();
  result = swift_bridgeObjectRelease();
  if (v2 == 1)
    v4 = 1;
  else
    v4 = 2;
  if (!v2)
    v4 = 0;
  *a1 = v4;
  return result;
}

void sub_1B1FC2338(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 0x7465737361;
  if (*v1)
    v2 = 0x6874615065646F6ELL;
  v3 = 0xE500000000000000;
  if (*v1)
    v3 = 0xE800000000000000;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_1B1FC2374()
{
  _BYTE *v0;

  if (*v0)
    return 0x6874615065646F6ELL;
  else
    return 0x7465737361;
}

uint64_t sub_1B1FC23AC@<X0>(char *a1@<X8>)
{
  return sub_1B1FC23B8(a1);
}

uint64_t sub_1B1FC23B8@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_1B2229730();
  result = swift_bridgeObjectRelease();
  if (v2 == 1)
    v4 = 1;
  else
    v4 = 2;
  if (!v2)
    v4 = 0;
  *a1 = v4;
  return result;
}

uint64_t sub_1B1FC2414()
{
  sub_1B1FC89F0();
  return sub_1B222A1D4();
}

uint64_t sub_1B1FC243C()
{
  sub_1B1FC89F0();
  return sub_1B222A1E0();
}

uint64_t sub_1B1FC2464(_QWORD *a1)
{
  __int128 *v1;
  uint64_t v2;
  __int128 *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  __int128 v11;
  uint64_t v13;
  char v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[8];
  uint64_t v19;

  v3 = v1;
  sub_1B19F8E54(0, &qword_1EEF61B60, (uint64_t (*)(void))sub_1B1FC89F0, (uint64_t)&type metadata for MeshFileAsset.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = (char *)&v13 - v9;
  sub_1B19FA070(a1, a1[3]);
  sub_1B1FC89F0();
  sub_1B222A180();
  v11 = v3[1];
  v15 = *v3;
  v16 = v11;
  v17 = v3[2];
  v14 = 0;
  sub_1B1BB51BC();
  sub_1B2229958();
  if (!v2)
  {
    sub_1B1FC8AF4((uint64_t)(v3 + 3), (uint64_t)v18);
    sub_1B1FC8AF4((uint64_t)v18, (uint64_t)&v19);
    if (v19)
    {
      *(_QWORD *)&v15 = v19;
      v14 = 1;
      sub_1B1A02758(0, &qword_1ED4BA4D0, MEMORY[0x1E0DEB418], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
      sub_1B1FC8B38((unint64_t *)&qword_1EEF5EEE8, MEMORY[0x1E0DEB420], MEMORY[0x1E0DEAF10]);
      sub_1B2229958();
    }
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
}

double sub_1B1FC2624@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  __int128 v7;
  uint64_t v8;

  sub_1B1FC7E9C(a1, (uint64_t *)v6);
  if (!v2)
  {
    v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    result = *(double *)&v7;
    *(_OWORD *)(a2 + 32) = v7;
    *(_QWORD *)(a2 + 48) = v8;
  }
  return result;
}

uint64_t sub_1B1FC2670(_QWORD *a1)
{
  return sub_1B1FC2464(a1);
}

void sub_1B1FC26B0(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0xE000000000000000;
  a1[2] = 0;
  a1[3] = 0xE000000000000000;
  a1[5] = 0;
  a1[6] = 0;
  a1[4] = 0;
}

uint64_t sub_1B1FC26C8(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[4];
  char v15;
  char v16;

  v14[2] = a5;
  v14[1] = a4;
  sub_1B19F8E54(0, &qword_1EEF61B40, (uint64_t (*)(void))sub_1B1FC89AC, (uint64_t)&type metadata for MeshReferenceAsset.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v7 = v6;
  v8 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v9);
  v11 = (char *)v14 - v10;
  sub_1B19FA070(a1, a1[3]);
  sub_1B1FC89AC();
  sub_1B222A180();
  v16 = 0;
  v12 = v14[3];
  sub_1B2229910();
  if (!v12)
  {
    v15 = 1;
    sub_1B2229910();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v7);
}

uint64_t sub_1B1FC2808(char *a1, char *a2)
{
  return sub_1B1F93858(*a1, *a2);
}

uint64_t sub_1B1FC2814()
{
  _BYTE *v0;

  if (*v0)
    return 0x6E6564496873656DLL;
  else
    return 0x656449656E656373;
}

uint64_t sub_1B1FC2868@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1B1FC6D24(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1B1FC288C()
{
  sub_1B1FC89AC();
  return sub_1B222A1D4();
}

uint64_t sub_1B1FC28B4()
{
  sub_1B1FC89AC();
  return sub_1B222A1E0();
}

uint64_t sub_1B1FC28DC@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = sub_1B1FC8808(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
    a2[3] = v7;
  }
  return result;
}

uint64_t sub_1B1FC2908(_QWORD *a1)
{
  uint64_t *v1;

  return sub_1B1FC26C8(a1, *v1, v1[1], v1[2], v1[3]);
}

void sub_1B1FC2924(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0xE000000000000000;
  a1[2] = 0;
  a1[3] = 0xE000000000000000;
}

uint64_t sub_1B1FC2934(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  os_unfair_lock_s *v6;

  v3 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_queryManager);
  swift_getObjectType();
  v5 = sub_1B204D6E4();
  v6 = *(os_unfair_lock_s **)(v4 + 40);
  swift_retain_n();
  os_unfair_lock_lock(v6);
  sub_1B1E8F784(a1, v3);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B1E8FAC0(a1, v5, v3);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v4 + 40));
  return swift_release_n();
}

_QWORD *sub_1B1FC29FC(uint64_t a1)
{
  uint64_t v1;
  int *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *result;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int *v31;
  char *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  os_unfair_lock_s *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t *v45;
  void (*v46)(char *, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v53;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  uint64_t v61;
  char *v62;
  void *v63;
  uint64_t v64;
  uint64_t ObjectType;
  void (*v66)(char *, uint64_t, uint64_t, uint64_t);
  id v67;
  unint64_t v68;
  _QWORD *v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char v83;
  char v84;
  uint64_t v85;
  __int16 v86;
  __int16 v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v92;
  char v93;
  unint64_t v94;
  char v95;
  uint64_t v96;
  uint64_t v97;
  char v98;
  _QWORD *v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  _QWORD *v106;
  unint64_t v107;
  char v108;
  char v109;
  uint64_t v110;
  unint64_t v111;
  char v112;
  char *v113;
  _QWORD *v114;
  uint64_t *v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  uint64_t *v119;
  char *v120;
  void (*v121)(uint64_t, uint64_t);
  uint64_t v122;
  uint64_t v123;
  int v124;
  unint64_t v126;
  uint64_t v127;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  _QWORD *v133;
  _QWORD *v134;
  uint64_t v135;
  uint64_t v136;
  void *v137;
  uint64_t v138;
  uint64_t v139;
  void (*v140)(uint64_t, uint64_t, uint64_t, uint64_t);
  id v141;
  _QWORD *v142;
  char v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  char v156;
  char v157;
  void (*v158)(char *, char *, uint64_t);
  uint64_t v159;
  __int16 v160;
  __int16 v161;
  uint64_t v162;
  uint64_t v163;
  char v164;
  _QWORD *v165;
  unint64_t v166;
  char v167;
  char v168;
  uint64_t v169;
  uint64_t v170;
  char v171;
  _QWORD *v172;
  uint64_t v173;
  uint64_t *v174;
  uint64_t v175;
  uint64_t v176;
  int v177;
  _QWORD *v178;
  unint64_t v179;
  char v180;
  char v181;
  uint64_t v182;
  unint64_t v183;
  char v184;
  _QWORD *v185;
  uint64_t *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  _QWORD *v190;
  _QWORD *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  int v195;
  _QWORD *v196;
  uint64_t v197;
  unint64_t v198;
  unint64_t v199;
  uint64_t v200;
  char *v201;
  char *v202;
  char *v203;
  __int128 v204;
  char *v205;
  uint64_t v206;
  uint64_t v207;
  char *v208;
  int *v209;
  _QWORD *v210;
  _QWORD *v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  char *v215;
  uint64_t v216;
  uint64_t *v217;
  char *v218;
  uint64_t v219;
  _QWORD *v220;
  uint64_t v221;
  char *v222;
  char *v223;
  int v224;
  uint64_t v225;
  char *v226;
  uint64_t v227;
  char *v228;
  uint64_t v229;
  _QWORD *v230;
  unint64_t v231;
  _QWORD v232[12];
  _OWORD v233[2];
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  _QWORD *v238;
  uint64_t v239;
  __int128 v240;
  __int128 v241;
  uint64_t v242;
  _OWORD v243[2];
  uint64_t v244;
  _BYTE v245[40];
  _OWORD v246[2];
  uint64_t v247;

  sub_1B1B1F358();
  v209 = v3;
  MEMORY[0x1E0C80A78](v3, v4);
  v208 = (char *)&v188 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1B222820C();
  v206 = *(_QWORD *)(v6 - 8);
  v207 = v6;
  MEMORY[0x1E0C80A78](v6, v7);
  v205 = (char *)&v188 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1B2228110();
  v10 = *(_QWORD **)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v11);
  v201 = (char *)&v188 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13, v14);
  v222 = (char *)&v188 - v15;
  MEMORY[0x1E0C80A78](v16, v17);
  v218 = (char *)&v188 - v18;
  MEMORY[0x1E0C80A78](v19, v20);
  v215 = (char *)&v188 - v21;
  MEMORY[0x1E0C80A78](v22, v23);
  v228 = (char *)&v188 - v24;
  swift_getKeyPath();
  v25 = *(_QWORD *)(a1 + 176);
  swift_retain();
  v26 = sub_1B1F22924((uint64_t)&type metadata for SceneAssetRegistryInstance, (uint64_t)&off_1E63B2458, v25, (void (*)(_QWORD *__return_ptr, uint64_t))sub_1B1B95400);
  v197 = 0;
  swift_release();
  result = (_QWORD *)swift_release();
  v229 = v26;
  if (!v26)
    return result;
  v28 = *(_OWORD *)(v1 + 32);
  v246[0] = *(_OWORD *)(v1 + 16);
  v246[1] = v28;
  v247 = *(_QWORD *)(v1 + 48);
  v200 = a1;
  sub_1B1E8FCE4(a1, (uint64_t)v246, 0x200000000, v232);
  sub_1B1A18378((uint64_t)v232, (uint64_t)v233, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (!*(_QWORD *)&v233[0])
    return (_QWORD *)swift_release();
  v240 = v233[0];
  v241 = v233[1];
  v242 = v234;
  if (v239 <= 0 || (v193 = v236) == 0)
  {
    swift_release();
    return sub_1B1A086DC(v232, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
  }
  v192 = v235;
  v29 = v238[4];
  v195 = *(unsigned __int8 *)(v237 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
  v210 = (_QWORD *)(v200 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
  v196 = v238;
  v190 = v238 + 8;
  v191 = v238 + 6;
  swift_retain();
  swift_retain();
  swift_retain();
  v30 = 0;
  v203 = "te texture cache.";
  v202 = "rl of an asset (";
  v198 = 0x80000001B23326A0;
  v199 = 0x80000001B2332670;
  v204 = xmmword_1B226D240;
  v220 = v10;
  v221 = v9;
  v189 = v29;
  while (1)
  {
    v194 = v30;
    v31 = (unsigned int *)(v192 + 48 * v30);
    v32 = (char *)*v31;
    v223 = (char *)v31[1];
    v33 = (uint64_t *)*((_QWORD *)v31 + 2);
    v34 = *((_QWORD *)v31 + 3);
    v35 = *((_QWORD *)v31 + 5);
    v216 = *((_QWORD *)v31 + 4);
    v217 = v33;
    v226 = v32;
    if (v195)
    {
      v36 = *(os_unfair_lock_s **)(v35 + 376);
      swift_retain();
      os_unfair_lock_lock(v36);
      os_unfair_lock_lock(*(os_unfair_lock_t *)(v35 + 344));
    }
    else
    {
      swift_retain();
    }
    ecs_stack_allocator_push_snapshot(v29);
    sub_1B1A18378((uint64_t)v191, (uint64_t)v245, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
    v37 = v196;
    v38 = v196[4];
    v39 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v35 + 40) + 16) + 32) + 16) + 1;
    swift_retain();
    v37[6] = ecs_stack_allocator_allocate(v38, 48 * v39, 8);
    v37[7] = v39;
    v40 = v190;
    v190[1] = 0;
    v40[2] = 0;
    *v40 = 0;
    swift_release();
    v42 = v216;
    v41 = v217;
    v227 = sub_1B1A12038((uint64_t)&type metadata for SceneFileAsset, (uint64_t)&off_1E6380E10, v217, v34, v216, (uint64_t)v37);
    v219 = v35;
    if (v41)
    {
      if (v42)
      {
        v43 = 0;
        while (1)
        {
          v48 = v217[v43];
          v49 = swift_retain();
          if ((*(_BYTE *)(v35 + 184) & 1) != 0)
            goto LABEL_126;
          v50 = *(int *)(*(_QWORD *)(v35 + 168) + 4 * v48);
          v51 = *(_DWORD *)(*(_QWORD *)(v49 + OBJC_IVAR____TtC3VFX13EntityManager__entries) + 12 * (int)v50 + 8);
          swift_release();
          if ((_DWORD)v50 == -1 && v51 == 0)
            break;
          if ((v50 & 0x80000000) != 0 || v210[1] <= v50)
          {
            v225 = 0;
            v224 = 0;
            LODWORD(v223) = 0;
          }
          else
          {
            v53 = *v210 + 12 * (int)v50;
            if (v51 != -1 && *(_DWORD *)(v53 + 8) != v51)
              break;
            v55 = *(_QWORD *)(*(_QWORD *)(v200 + 136) + 8 * *(int *)(*v210 + 12 * (int)v50) + 32);
            v56 = *(_QWORD *)(v55 + 48);
            v57 = *(_QWORD *)(v56 + 16);
            if (!v57)
              break;
            v58 = *(__int16 *)(v53 + 4);
            v59 = (_QWORD *)(v56 + 56);
            while ((ValueMetadata *)*(v59 - 3) != &type metadata for MeshImportOptions)
            {
              v59 += 5;
              if (!--v57)
                goto LABEL_32;
            }
            v116 = *(_QWORD *)(v55 + 128) + *v59 + 16 * v58;
            v225 = *(_QWORD *)v116;
            v224 = *(unsigned __int8 *)(v116 + 8);
            LODWORD(v223) = *(unsigned __int8 *)(v116 + 9);
          }
LABEL_34:
          v60 = (_QWORD *)(v227 + (v43 << 6));
          v62 = (char *)v60[2];
          v61 = v60[3];
          v63 = (void *)v60[4];
          if (v63)
          {
            v64 = v60[5];
            ObjectType = swift_getObjectType();
            v66 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v64 + 8);
            swift_bridgeObjectRetain();
            v67 = v63;
            v66(v62, v61, ObjectType, v64);

          }
          else
          {
            if (qword_1ED4BF430 != -1)
              swift_once();
            v230 = 0;
            v231 = 0xE000000000000000;
            v214 = qword_1ED4D0FB0;
            swift_retain();
            sub_1B2229430();
            sub_1B2228890();
            swift_bridgeObjectRetain();
            sub_1B2228890();
            swift_bridgeObjectRelease();
            sub_1B2228890();
            v69 = v230;
            v68 = v231;
            v70 = sub_1B2228E90();
            if (qword_1ED4BF658 != -1)
              swift_once();
            v213 = v43;
            v226 = v62;
            v71 = qword_1ED4D0FD0;
            v72 = qword_1ED4BF688;
            swift_retain();
            if (v72 != -1)
              swift_once();
            sub_1B1CC6310(0, (unint64_t *)&qword_1ED4BF700, (unint64_t *)&qword_1ED4BF440, MEMORY[0x1E0DEE208], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
            v73 = swift_allocObject();
            *(_OWORD *)(v73 + 16) = v204;
            *(_QWORD *)(v73 + 56) = MEMORY[0x1E0DEA968];
            *(_QWORD *)(v73 + 64) = sub_1B1B1F47C();
            *(_QWORD *)(v73 + 32) = v69;
            *(_QWORD *)(v73 + 40) = v68;
            swift_bridgeObjectRetain();
            sub_1B222835C();
            swift_bridgeObjectRelease();
            swift_retain();
            v211 = v69;
            v74 = v205;
            sub_1B2228200();
            v75 = (uint64_t)v208;
            v76 = v209[12];
            v77 = v209[16];
            v78 = v209[20];
            v212 = v71;
            v79 = &v208[v78];
            (*(void (**)(char *, char *, uint64_t))(v206 + 32))(v208, v74, v207);
            *(_BYTE *)(v75 + v76) = v70;
            *(_QWORD *)(v75 + v77) = 0;
            *(_QWORD *)v79 = v211;
            *((_QWORD *)v79 + 1) = v68;
            swift_bridgeObjectRetain();
            sub_1B2228428();
            swift_release();
            sub_1B1B429AC(v75);
            swift_release();
            swift_bridgeObjectRelease();
            swift_release();
            swift_bridgeObjectRetain();
            sub_1B2228050();
            v10 = v220;
            v9 = v221;
            v43 = v213;
          }
          swift_bridgeObjectRelease();
          v80 = v227 + (v43 << 6);
          v81 = *(_QWORD *)(v80 + 48);
          v82 = *(_QWORD *)(v80 + 56);
          if (*(_QWORD *)(*(_QWORD *)(v229 + 16) + 16))
          {
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            sub_1B1DC3B00(v81, v82);
            v84 = v83;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if ((v84 & 1) != 0)
            {
              v46 = (void (*)(char *, uint64_t))v10[1];
              goto LABEL_15;
            }
          }
          v85 = (uint64_t)v215;
          v226 = (char *)v10[2];
          ((void (*)(char *, char *, uint64_t))v226)(v215, v228, v9);
          type metadata accessor for SceneAssetRegistryEntry();
          swift_allocObject();
          if ((_DWORD)v223)
            v86 = 256;
          else
            v86 = 0;
          v87 = v86 | v224;
          swift_bridgeObjectRetain();
          v88 = v229;
          v89 = swift_retain();
          v90 = sub_1B1D41054(v89, v85, v225, v87, v81, v82);
          swift_bridgeObjectRetain();
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v230 = *(_QWORD **)(v88 + 16);
          v92 = v230;
          *(_QWORD *)(v88 + 16) = 0x8000000000000000;
          v94 = sub_1B1DC3B00(v81, v82);
          v95 = v93;
          v96 = v92[2] + ((v93 & 1) == 0);
          if (v92[3] >= v96)
          {
            if ((isUniquelyReferenced_nonNull_native & 1) != 0)
            {
              v99 = v230;
              if ((v93 & 1) != 0)
                goto LABEL_55;
            }
            else
            {
              sub_1B1EAF434();
              v99 = v230;
              if ((v95 & 1) != 0)
                goto LABEL_55;
            }
          }
          else
          {
            sub_1B1E9DB34(v96, isUniquelyReferenced_nonNull_native);
            v97 = sub_1B1DC3B00(v81, v82);
            if ((v95 & 1) != (v98 & 1))
              goto LABEL_127;
            v94 = v97;
            v99 = v230;
            if ((v95 & 1) != 0)
            {
LABEL_55:
              v101 = v99[7];
              swift_release();
              *(_QWORD *)(v101 + 8 * v94) = v90;
              goto LABEL_56;
            }
          }
          v99[(v94 >> 6) + 8] |= 1 << v94;
          v100 = (uint64_t *)(v99[6] + 16 * v94);
          *v100 = v81;
          v100[1] = v82;
          *(_QWORD *)(v99[7] + 8 * v94) = v90;
          ++v99[2];
          swift_bridgeObjectRetain();
LABEL_56:
          v102 = v229;
          *(_QWORD *)(v229 + 16) = v99;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v103 = (uint64_t)v218;
          v104 = v221;
          ((void (*)(char *, char *))v226)(v218, v228);
          swift_bridgeObjectRetain();
          v105 = swift_isUniquelyReferenced_nonNull_native();
          v230 = *(_QWORD **)(v102 + 24);
          v106 = v230;
          *(_QWORD *)(v102 + 24) = 0x8000000000000000;
          v107 = sub_1B1DC49A8(v103);
          v109 = v108;
          v110 = v106[2] + ((v108 & 1) == 0);
          if (v106[3] >= v110)
          {
            if ((v105 & 1) == 0)
              sub_1B1EAF1CC();
          }
          else
          {
            sub_1B1E9D7C0(v110, v105);
            v111 = sub_1B1DC49A8(v103);
            if ((v109 & 1) != (v112 & 1))
              goto LABEL_128;
            v107 = v111;
          }
          v10 = v220;
          v113 = v218;
          v9 = v104;
          v114 = v230;
          if ((v109 & 1) != 0)
          {
            v115 = (uint64_t *)(v230[7] + 16 * v107);
            v44 = v218;
            swift_bridgeObjectRelease();
            *v115 = v81;
            v115[1] = v82;
          }
          else
          {
            v230[(v107 >> 6) + 8] |= 1 << v107;
            v44 = v113;
            ((void (*)(unint64_t, char *, uint64_t))v226)(v114[6] + v10[9] * v107, v113, v104);
            v45 = (uint64_t *)(v114[7] + 16 * v107);
            *v45 = v81;
            v45[1] = v82;
            ++v114[2];
          }
          *(_QWORD *)(v229 + 24) = v114;
          swift_bridgeObjectRelease();
          v46 = (void (*)(char *, uint64_t))v10[1];
          v46(v44, v104);
LABEL_15:
          v47 = v216;
          v46(v228, v9);
          ++v43;
          v35 = v219;
          if (v43 == v47)
            goto LABEL_67;
        }
LABEL_32:
        v225 = 0;
        v224 = 0;
        LODWORD(v223) = 0;
        goto LABEL_34;
      }
      goto LABEL_67;
    }
    v117 = v226;
    if ((_DWORD)v226 != (_DWORD)v223)
      break;
LABEL_67:
    v243[0] = v240;
    v243[1] = v241;
    v244 = v242;
    v118 = v197;
    sub_1B1F05D48(v196, (unsigned __int16 **)v243, (uint64_t)v245);
    v197 = v118;
    sub_1B1F03804((char *)v35);
    v29 = v189;
    ecs_stack_allocator_pop_snapshot(v189);
    if ((v195 & 1) != 0)
    {
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v35 + 344));
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v35 + 376));
    }
    swift_release();
    v30 = v194 + 1;
    if (v194 + 1 == v193)
    {
      swift_release();
      sub_1B1A086DC(v232, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
      return sub_1B1A086DC(v232, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
    }
  }
  while (1)
  {
    v122 = swift_retain();
    if ((*(_BYTE *)(v35 + 184) & 1) != 0)
      break;
    v123 = *(int *)(*(_QWORD *)(v35 + 168) + 4 * (_QWORD)v117);
    v124 = *(_DWORD *)(*(_QWORD *)(v122 + OBJC_IVAR____TtC3VFX13EntityManager__entries) + 12 * (int)v123 + 8);
    swift_release();
    if ((_DWORD)v123 == -1 && v124 == 0)
    {
LABEL_88:
      v225 = 0;
      LODWORD(v126) = 0;
      v224 = 0;
      goto LABEL_90;
    }
    LODWORD(v126) = 0;
    if ((v123 & 0x80000000) != 0 || v210[1] <= v123)
    {
      v225 = 0;
      v224 = 0;
    }
    else
    {
      v127 = *v210 + 12 * (int)v123;
      if (v124 != -1 && *(_DWORD *)(v127 + 8) != v124)
        goto LABEL_88;
      v129 = *(_QWORD *)(*(_QWORD *)(v200 + 136) + 8 * *(int *)(*v210 + 12 * (int)v123) + 32);
      v130 = *(_QWORD *)(v129 + 48);
      v131 = *(_QWORD *)(v130 + 16);
      if (!v131)
        goto LABEL_88;
      v132 = *(__int16 *)(v127 + 4);
      v133 = (_QWORD *)(v130 + 56);
      while ((ValueMetadata *)*(v133 - 3) != &type metadata for MeshImportOptions)
      {
        v133 += 5;
        if (!--v131)
          goto LABEL_88;
      }
      v187 = *(_QWORD *)(v129 + 128) + *v133 + 16 * v132;
      v225 = *(_QWORD *)v187;
      LODWORD(v126) = *(unsigned __int8 *)(v187 + 8);
      v224 = *(unsigned __int8 *)(v187 + 9);
    }
LABEL_90:
    v134 = (_QWORD *)(v227 + ((_QWORD)v117 << 6));
    v136 = v134[2];
    v135 = v134[3];
    v137 = (void *)v134[4];
    v226 = v117;
    if (v137)
    {
      v138 = v134[5];
      v139 = swift_getObjectType();
      v140 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v138 + 8);
      swift_bridgeObjectRetain();
      v141 = v137;
      v140(v136, v135, v139, v138);

    }
    else
    {
      LODWORD(v217) = v126;
      if (qword_1ED4BF430 != -1)
        swift_once();
      v230 = 0;
      v231 = 0xE000000000000000;
      v214 = qword_1ED4D0FB0;
      swift_retain();
      sub_1B2229430();
      sub_1B2228890();
      swift_bridgeObjectRetain();
      sub_1B2228890();
      swift_bridgeObjectRelease();
      sub_1B2228890();
      v142 = v230;
      v126 = v231;
      v143 = sub_1B2228E90();
      if (qword_1ED4BF658 != -1)
        swift_once();
      v216 = v136;
      v144 = qword_1ED4D0FD0;
      v145 = qword_1ED4BF688;
      swift_retain();
      if (v145 != -1)
        swift_once();
      sub_1B1CC6310(0, (unint64_t *)&qword_1ED4BF700, (unint64_t *)&qword_1ED4BF440, MEMORY[0x1E0DEE208], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
      v146 = swift_allocObject();
      *(_OWORD *)(v146 + 16) = v204;
      *(_QWORD *)(v146 + 56) = MEMORY[0x1E0DEA968];
      *(_QWORD *)(v146 + 64) = sub_1B1B1F47C();
      *(_QWORD *)(v146 + 32) = v142;
      *(_QWORD *)(v146 + 40) = v126;
      swift_bridgeObjectRetain();
      sub_1B222835C();
      swift_bridgeObjectRelease();
      swift_retain();
      v212 = (uint64_t)v142;
      v147 = v205;
      sub_1B2228200();
      v148 = (uint64_t)v208;
      v149 = v209[12];
      v150 = v209[16];
      v151 = v209[20];
      v213 = v144;
      v152 = &v208[v151];
      (*(void (**)(char *, char *, uint64_t))(v206 + 32))(v208, v147, v207);
      *(_BYTE *)(v148 + v149) = v143;
      *(_QWORD *)(v148 + v150) = 0;
      *(_QWORD *)v152 = v212;
      *((_QWORD *)v152 + 1) = v126;
      swift_bridgeObjectRetain();
      sub_1B2228428();
      swift_release();
      sub_1B1B429AC(v148);
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRetain();
      sub_1B2228050();
      v10 = v220;
      v9 = v221;
      LOWORD(v126) = (_WORD)v217;
    }
    swift_bridgeObjectRelease();
    v120 = v226;
    v153 = v227 + ((_QWORD)v226 << 6);
    v155 = *(_QWORD *)(v153 + 48);
    v154 = *(_QWORD *)(v153 + 56);
    if (*(_QWORD *)(*(_QWORD *)(v229 + 16) + 16)
      && (swift_bridgeObjectRetain(),
          swift_bridgeObjectRetain(),
          sub_1B1DC3B00(v155, v154),
          v157 = v156,
          swift_bridgeObjectRelease(),
          swift_bridgeObjectRelease(),
          (v157 & 1) != 0))
    {
      v121 = (void (*)(uint64_t, uint64_t))v10[1];
    }
    else
    {
      v158 = (void (*)(char *, char *, uint64_t))v10[2];
      v159 = (uint64_t)v215;
      v158(v215, v222, v9);
      type metadata accessor for SceneAssetRegistryEntry();
      swift_allocObject();
      if (v224)
        v160 = 256;
      else
        v160 = 0;
      v161 = v160 | v126;
      v162 = v229;
      swift_retain();
      swift_bridgeObjectRetain();
      v163 = sub_1B1D41054(v162, v159, v225, v161, v155, v154);
      swift_bridgeObjectRetain();
      v164 = swift_isUniquelyReferenced_nonNull_native();
      v230 = *(_QWORD **)(v162 + 16);
      v165 = v230;
      *(_QWORD *)(v162 + 16) = 0x8000000000000000;
      v166 = sub_1B1DC3B00(v155, v154);
      v168 = v167;
      v169 = v165[2] + ((v167 & 1) == 0);
      if (v165[3] >= v169)
      {
        if ((v164 & 1) == 0)
          sub_1B1EAF434();
      }
      else
      {
        sub_1B1E9DB34(v169, v164);
        v170 = sub_1B1DC3B00(v155, v154);
        if ((v168 & 1) != (v171 & 1))
          goto LABEL_127;
        v166 = v170;
      }
      v9 = v221;
      v172 = v230;
      if ((v168 & 1) != 0)
      {
        v173 = v230[7];
        swift_release();
        *(_QWORD *)(v173 + 8 * v166) = v163;
      }
      else
      {
        v230[(v166 >> 6) + 8] |= 1 << v166;
        v174 = (uint64_t *)(v172[6] + 16 * v166);
        *v174 = v155;
        v174[1] = v154;
        *(_QWORD *)(v172[7] + 8 * v166) = v163;
        ++v172[2];
        swift_bridgeObjectRetain();
      }
      v175 = v229;
      *(_QWORD *)(v229 + 16) = v172;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v176 = (uint64_t)v201;
      v158(v201, v222, v9);
      swift_bridgeObjectRetain();
      v177 = swift_isUniquelyReferenced_nonNull_native();
      v230 = *(_QWORD **)(v175 + 24);
      v178 = v230;
      *(_QWORD *)(v175 + 24) = 0x8000000000000000;
      v179 = sub_1B1DC49A8(v176);
      v181 = v180;
      v182 = v178[2] + ((v180 & 1) == 0);
      if (v178[3] >= v182)
      {
        if ((v177 & 1) == 0)
          sub_1B1EAF1CC();
      }
      else
      {
        sub_1B1E9D7C0(v182, v177);
        v183 = sub_1B1DC49A8(v176);
        if ((v181 & 1) != (v184 & 1))
          goto LABEL_129;
        v179 = v183;
      }
      v10 = v220;
      v185 = v230;
      if ((v181 & 1) != 0)
      {
        v186 = (uint64_t *)(v230[7] + 16 * v179);
        swift_bridgeObjectRelease();
        *v186 = v155;
        v186[1] = v154;
      }
      else
      {
        v230[(v179 >> 6) + 8] |= 1 << v179;
        v158((char *)(v185[6] + v10[9] * v179), (char *)v176, v9);
        v119 = (uint64_t *)(v185[7] + 16 * v179);
        *v119 = v155;
        v119[1] = v154;
        ++v185[2];
      }
      v120 = v226;
      *(_QWORD *)(v229 + 24) = v185;
      swift_bridgeObjectRelease();
      v121 = (void (*)(uint64_t, uint64_t))v10[1];
      v121(v176, v9);
    }
    v35 = v219;
    v117 = v120 + 1;
    v121((uint64_t)v222, v9);
    if (v117 == v223)
      goto LABEL_67;
  }
LABEL_126:
  sub_1B2229688();
  __break(1u);
LABEL_127:
  sub_1B2229FC4();
  __break(1u);
LABEL_128:
  sub_1B2229FC4();
  __break(1u);
LABEL_129:
  result = (_QWORD *)sub_1B2229FC4();
  __break(1u);
  return result;
}

uint64_t type metadata accessor for SceneFileSystem()
{
  return objc_opt_self();
}

uint64_t sub_1B1FC3DD8(uint64_t a1, uint64_t a2)
{
  return sub_1B1FC6BDC(a1, a2, (void (*)(uint64_t *__return_ptr, uint64_t))sub_1B1E3BBE0);
}

const char *sub_1B1FC3DE4()
{
  return "SceneFile";
}

uint64_t sub_1B1FC3DFC(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  os_unfair_lock_s *v7;
  uint64_t v8;
  uint64_t v9;
  os_unfair_lock_s *v10;
  uint64_t v11;
  uint64_t v12;
  os_unfair_lock_s *v13;
  uint64_t v14;
  uint64_t v15;
  os_unfair_lock_s *v16;
  uint64_t v17;
  uint64_t v18;
  os_unfair_lock_s *v19;
  uint64_t v20;
  uint64_t v21;
  os_unfair_lock_s *v22;

  v2 = v1;
  v4 = v1[2];
  v5 = *(_QWORD *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_queryManager);
  swift_getObjectType();
  v6 = sub_1B204D6E4();
  v7 = *(os_unfair_lock_s **)(v5 + 40);
  swift_retain_n();
  os_unfair_lock_lock(v7);
  sub_1B1E8F784(a1, v4);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B1E8FAC0(a1, v6, v4);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v5 + 40));
  swift_release_n();
  v8 = v2[7];
  swift_getObjectType();
  v9 = sub_1B204D6E4();
  v10 = *(os_unfair_lock_s **)(v5 + 40);
  swift_retain_n();
  os_unfair_lock_lock(v10);
  sub_1B1E8F784(a1, v8);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B1E8FAC0(a1, v9, v8);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v5 + 40));
  swift_release_n();
  v11 = v2[12];
  swift_getObjectType();
  v12 = sub_1B204D6E4();
  v13 = *(os_unfair_lock_s **)(v5 + 40);
  swift_retain_n();
  os_unfair_lock_lock(v13);
  sub_1B1E8F784(a1, v11);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B1E8FAC0(a1, v12, v11);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v5 + 40));
  swift_release_n();
  v14 = v2[17];
  swift_getObjectType();
  v15 = sub_1B204D6E4();
  v16 = *(os_unfair_lock_s **)(v5 + 40);
  swift_retain_n();
  os_unfair_lock_lock(v16);
  sub_1B1E8F784(a1, v14);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B1E8FAC0(a1, v15, v14);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v5 + 40));
  swift_release_n();
  v17 = v2[22];
  swift_getObjectType();
  v18 = sub_1B204D6E4();
  v19 = *(os_unfair_lock_s **)(v5 + 40);
  swift_retain_n();
  os_unfair_lock_lock(v19);
  sub_1B1E8F784(a1, v17);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B1E8FAC0(a1, v18, v17);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v5 + 40));
  swift_release_n();
  v20 = v2[27];
  swift_getObjectType();
  v21 = sub_1B204D6E4();
  v22 = *(os_unfair_lock_s **)(v5 + 40);
  swift_retain_n();
  os_unfair_lock_lock(v22);
  sub_1B1E8F784(a1, v20);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B1E8FAC0(a1, v21, v20);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v5 + 40));
  return swift_release_n();
}

uint64_t sub_1B1FC417C(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  _QWORD v5[12];
  uint64_t v6;
  int v7;
  char v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  char v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  _OWORD v28[2];
  uint64_t v29;

  v2 = *(_QWORD *)(result + OBJC_IVAR____TtC3VFX13EntityManager_renderer);
  if (v2)
  {
    v3 = result;
    v4 = *(_OWORD *)(v1 + 32);
    v28[0] = *(_OWORD *)(v1 + 16);
    v28[1] = v4;
    v29 = *(_QWORD *)(v1 + 48);
    swift_retain();
    sub_1B1E8FCE4(v3, (uint64_t)v28, 0x200000000, v5);
    sub_1B1A18378((uint64_t)v5, (uint64_t)&v6, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
    if (v6)
    {
      v17 = v6;
      v18 = v7;
      v19 = v8;
      v20 = v9;
      v21 = v10;
      v22 = v11;
      v23 = v12;
      v24 = v13;
      v25 = v14;
      v26 = v15;
      v27 = v16;
      swift_retain();
      swift_retain();
      sub_1B219A430((uint64_t)&v17, v3, v2);
      swift_release();
      swift_release();
      sub_1B1A086DC(v5, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
    }
    sub_1B1FC42C0(v3);
    return swift_release();
  }
  return result;
}

uint64_t sub_1B1FC42C0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  os_unfair_lock_s *v14;
  int v15;
  int v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  os_unfair_lock_s *v27;
  int v28;
  int v29;
  __int128 v30;
  _QWORD *v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  os_unfair_lock_s *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  int *v49;
  int v50;
  int v51;
  BOOL v52;
  uint64_t v53;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  int *v66;
  int v67;
  int v68;
  BOOL v69;
  uint64_t v70;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  _QWORD *v82;
  __int128 v83;
  _QWORD *v84;
  uint64_t v85;
  _QWORD *v86;
  _QWORD *v87;
  unsigned int *v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  os_unfair_lock_s *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  int *v103;
  int v104;
  int v105;
  BOOL v106;
  uint64_t v107;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  _QWORD *v113;
  uint64_t *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v121;
  char v122;
  char v123;
  uint64_t v124;
  uint64_t v125;
  char v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  _QWORD *v132;
  uint64_t v133;
  char v134;
  uint64_t v135;
  unint64_t v136;
  char v137;
  char v138;
  uint64_t v139;
  uint64_t v140;
  char v141;
  uint64_t *v142;
  uint64_t v143;
  uint64_t v144;
  char v145;
  unint64_t v146;
  char v147;
  char v148;
  uint64_t v149;
  uint64_t v150;
  char v151;
  uint64_t v152;
  _QWORD *v153;
  int *v154;
  int v155;
  int v156;
  BOOL v157;
  uint64_t v158;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  _QWORD *v164;
  uint64_t *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  _QWORD *v171;
  char v172;
  unint64_t v173;
  char v174;
  char v175;
  uint64_t v176;
  uint64_t v177;
  char v178;
  void (*v179)(_QWORD *@<X8>);
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  _QWORD *v185;
  uint64_t v186;
  unint64_t v187;
  char v188;
  char v189;
  uint64_t v190;
  uint64_t v191;
  char v192;
  uint64_t *v193;
  uint64_t v194;
  uint64_t v195;
  _QWORD *v196;
  char v197;
  unint64_t v198;
  char v199;
  char v200;
  uint64_t v201;
  uint64_t v202;
  char v203;
  uint64_t v204;
  _QWORD *v205;
  uint64_t v206;
  __int128 v207;
  uint64_t v208;
  unsigned int *v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t *v212;
  uint64_t v213;
  uint64_t v214;
  os_unfair_lock_s *v215;
  uint64_t v216;
  uint64_t v217;
  _QWORD *v218;
  uint64_t *v219;
  _QWORD *v220;
  int64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  unsigned int v226;
  uint64_t v227;
  uint64_t v228;
  char v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t *v233;
  _QWORD *v234;
  int64_t v235;
  uint64_t v236;
  uint64_t v237;
  unsigned int v238;
  uint64_t v239;
  uint64_t v240;
  char v241;
  uint64_t v242;
  uint64_t v243;
  _QWORD *v244;
  _QWORD *v245;
  uint64_t result;
  uint64_t v247;
  char v248;
  uint64_t v249;
  uint64_t v250;
  void (*v251)(_QWORD *@<X8>);
  uint64_t v252;
  uint64_t v253;
  _QWORD *v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  _QWORD *v260;
  uint64_t v261;
  _QWORD *v262;
  uint64_t v263;
  uint64_t v264;
  _QWORD *v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  int v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  int v277;
  uint64_t v278;
  uint64_t v279;
  _QWORD *v280;
  char v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  _QWORD *v288;
  uint64_t *v289;
  uint64_t v290;
  uint64_t v291;
  _QWORD *v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v297;
  uint64_t v298;
  _QWORD v299[8];
  _QWORD v300[8];
  _QWORD v301[8];
  _QWORD v302[8];
  _QWORD v303[8];
  _OWORD v304[2];
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  _QWORD *v309;
  uint64_t v310;
  __int128 v311;
  __int128 v312;
  uint64_t v313;
  __int128 v314;
  __int128 v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  _QWORD *v320;
  uint64_t v321;
  __int128 v322;
  __int128 v323;
  uint64_t v324;
  __int128 v325;
  __int128 v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  _QWORD *v331;
  uint64_t v332;
  _OWORD v333[2];
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  _QWORD v338[7];
  uint64_t v339;
  uint64_t v340;
  _OWORD v341[2];
  uint64_t v342;
  _OWORD v343[2];
  uint64_t v344;
  _OWORD v345[2];
  uint64_t v346;
  _BYTE v347[40];
  _OWORD v348[2];
  uint64_t v349;
  _BYTE v350[40];
  _OWORD v351[2];
  uint64_t v352;
  _BYTE v353[40];
  _OWORD v354[2];
  uint64_t v355;
  _OWORD v356[2];
  uint64_t v357;
  _OWORD v358[2];
  uint64_t v359;

  v2 = v1;
  v3 = *(_OWORD *)(v1 + 176);
  v4 = *(_OWORD *)(v1 + 192);
  v359 = *(_QWORD *)(v1 + 208);
  v358[0] = v3;
  v358[1] = v4;
  sub_1B1E8FCE4(a1, (uint64_t)v358, 0x200000000, v299);
  sub_1B1A18378((uint64_t)v299, (uint64_t)v338, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (v338[0])
  {
    if (v340 >= 1)
    {
      v5 = v339;
      if (v339)
      {
        v6 = v338[5];
        swift_retain();
        swift_retain();
        swift_retain();
        v7 = 48 * v5;
        v8 = (uint64_t *)(v6 + 40);
        do
        {
          v13 = *v8;
          v14 = *(os_unfair_lock_s **)(*v8 + 376);
          swift_retain();
          os_unfair_lock_lock(v14);
          os_unfair_lock_lock(*(os_unfair_lock_t *)(v13 + 344));
          v15 = *(_DWORD *)(v13 + 24);
          swift_retain();
          v334 = 0;
          memset(v333, 0, sizeof(v333));
          v327 = 0;
          v326 = 0u;
          v325 = 0u;
          v16 = sub_1B1DA4ED8(v15, (uint64_t)&type metadata for VertexLayoutCollection, (uint64_t)&off_1E63A9B98, 0, 0, (uint64_t)v333, (uint64_t)&v325);
          swift_release();
          sub_1B1A12E98((uint64_t)&v325);
          sub_1B1A12E98((uint64_t)v333);
          if (sub_1B1A10B20(v16))
          {
            sub_1B1A10BB0(v16);
          }
          else
          {
            v9 = *(_QWORD *)(v13 + 232);
            v10 = *(_QWORD *)(v13 + 240);
            v11 = *(unsigned __int8 *)(v13 + 120);
            v12 = *(unsigned int *)(v13 + 28);
            LOBYTE(v333[0]) = *(_BYTE *)(v13 + 32);
            sub_1B1FD8C68(v9, v10, v16, v11, v12 | ((unint64_t)LOBYTE(v333[0]) << 32), 0, 0, 0);
          }
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v13 + 344));
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v13 + 376));
          swift_release();
          v8 += 6;
          v7 -= 48;
        }
        while (v7);
        sub_1B1A086DC(v299, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
      }
    }
    sub_1B1A086DC(v299, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
  }
  v17 = *(_OWORD *)(v2 + 152);
  v356[0] = *(_OWORD *)(v2 + 136);
  v356[1] = v17;
  v357 = *(_QWORD *)(v2 + 168);
  sub_1B1E8FCE4(a1, (uint64_t)v356, 0x200000000, v300);
  sub_1B1A18378((uint64_t)v300, (uint64_t)v333, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (*(_QWORD *)&v333[0])
  {
    if (v337 >= 1)
    {
      v18 = v336;
      if (v336)
      {
        v19 = v335;
        swift_retain();
        swift_retain();
        swift_retain();
        v20 = 48 * v18;
        v21 = (uint64_t *)(v19 + 40);
        do
        {
          v26 = *v21;
          v27 = *(os_unfair_lock_s **)(*v21 + 376);
          swift_retain();
          os_unfair_lock_lock(v27);
          os_unfair_lock_lock(*(os_unfair_lock_t *)(v26 + 344));
          v28 = *(_DWORD *)(v26 + 24);
          swift_retain();
          v327 = 0;
          v326 = 0u;
          v325 = 0u;
          v316 = 0;
          v314 = 0u;
          v315 = 0u;
          v29 = sub_1B1DA4ED8(v28, (uint64_t)&type metadata for VertexLayoutCollection, (uint64_t)&off_1E63A9B98, 0, 0, (uint64_t)&v325, (uint64_t)&v314);
          swift_release();
          sub_1B1A12E98((uint64_t)&v314);
          sub_1B1A12E98((uint64_t)&v325);
          if (sub_1B1A10B20(v29))
          {
            sub_1B1A10BB0(v29);
          }
          else
          {
            v22 = *(_QWORD *)(v26 + 232);
            v23 = *(_QWORD *)(v26 + 240);
            v24 = *(unsigned __int8 *)(v26 + 120);
            v25 = *(unsigned int *)(v26 + 28);
            LOBYTE(v325) = *(_BYTE *)(v26 + 32);
            sub_1B1FD8C68(v22, v23, v29, v24, v25 | ((unint64_t)v325 << 32), 0, 0, 0);
          }
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v26 + 344));
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v26 + 376));
          swift_release();
          v21 += 6;
          v20 -= 48;
        }
        while (v20);
        sub_1B1A086DC(v300, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
      }
    }
    sub_1B1A086DC(v300, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
  }
  v30 = *(_OWORD *)(v2 + 72);
  v354[0] = *(_OWORD *)(v2 + 56);
  v354[1] = v30;
  v355 = *(_QWORD *)(v2 + 88);
  sub_1B1E8FCE4(a1, (uint64_t)v354, 0x200000000, v301);
  sub_1B1A18378((uint64_t)v301, (uint64_t)&v325, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if ((_QWORD)v325 && v332 >= 1 && (v276 = v329) != 0)
  {
    v249 = v2;
    v31 = v331;
    v32 = *(unsigned __int8 *)(v330 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
    v282 = v331[4];
    v341[0] = v325;
    v341[1] = v326;
    v342 = v327;
    v266 = (uint64_t)(v331 + 6);
    v270 = v328;
    v262 = (_QWORD *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
    sub_1B1A086DC(v301, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1A086A4);
    swift_retain();
    swift_retain();
    swift_retain();
    v33 = 0;
    v34 = 0;
    v273 = v32;
    do
    {
      v293 = v34;
      v279 = v33;
      v35 = (unsigned int *)(v270 + 48 * v33);
      v36 = *v35;
      v37 = v35[1];
      v38 = *((_QWORD *)v35 + 3);
      v289 = (uint64_t *)*((_QWORD *)v35 + 2);
      v40 = *((_QWORD *)v35 + 4);
      v39 = *((_QWORD *)v35 + 5);
      if (v32)
      {
        v41 = *(os_unfair_lock_s **)(v39 + 376);
        swift_retain_n();
        os_unfair_lock_lock(v41);
        os_unfair_lock_lock(*(os_unfair_lock_t *)(v39 + 344));
        swift_release();
      }
      else
      {
        swift_retain();
      }
      ecs_stack_allocator_push_snapshot(v282);
      sub_1B1A18378(v266, (uint64_t)v353, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
      v42 = v31[4];
      v43 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v39 + 40) + 16) + 32) + 16) + 1;
      swift_retain();
      v31[6] = ecs_stack_allocator_allocate(v42, 48 * v43, 8);
      v31[7] = v43;
      v31[9] = 0;
      v31[10] = 0;
      v31[8] = 0;
      swift_release();
      v44 = sub_1B1A12038((uint64_t)&type metadata for ParticleMeshRenderer, (uint64_t)&off_1E639CDA8, v289, v38, v40, (uint64_t)v31);
      if (v289)
      {
        v32 = v273;
        if (v40)
        {
          v45 = 0;
          v46 = v262;
          do
          {
            v49 = (int *)(v44 + 40 * v45);
            v50 = *v49;
            v51 = v49[1];
            v52 = v50 == -1 && v51 == 0;
            if (!v52 && (v50 & 0x80000000) == 0 && v46[1] > v50)
            {
              v53 = *v46 + 12 * v50;
              if (v51 == -1 || *(_DWORD *)(v53 + 8) == v51)
              {
                v55 = *(_QWORD *)(*(_QWORD *)(a1 + 136) + 8 * *(int *)(*v46 + 12 * v50) + 32);
                v56 = *(_QWORD *)(v55 + 48);
                v57 = *(_QWORD *)(v56 + 16);
                if (v57)
                {
                  v58 = *(__int16 *)(v53 + 4);
                  v59 = (_QWORD *)(v56 + 56);
                  while ((ValueMetadata *)*(v59 - 3) != &type metadata for MeshModel)
                  {
                    v59 += 5;
                    if (!--v57)
                      goto LABEL_37;
                  }
                  v60 = *(_QWORD *)(*(_QWORD *)(v55 + 128) + *v59 + 16 * v58);
                  if (v60)
                  {
                    v61 = *(_QWORD *)(v60 + 24);
                    if (v61)
                    {
                      v62 = *(_QWORD *)(v39 + 48);
                      v63 = *(_QWORD *)(v62 + 16);
                      if (v63)
                      {
                        v64 = (_QWORD *)(v62 + 56);
                        while ((ValueMetadata *)*(v64 - 3) != &type metadata for VertexLayoutCollection)
                        {
                          v64 += 5;
                          if (!--v63)
                            goto LABEL_37;
                        }
                        v48 = *(_QWORD *)(v39 + 128) + *v64;
                        v255 = 8 * v289[v45];
                        v253 = *(_QWORD *)(v60 + 16);
                        sub_1B1A02758(0, &qword_1EEF61B28, (uint64_t)&type metadata for VertexLayout, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
                        v258 = swift_allocObject();
                        *(_OWORD *)(v258 + 16) = xmmword_1B226D240;
                        *(_QWORD *)(v258 + 32) = v253;
                        *(_QWORD *)(v258 + 40) = v61;
                        swift_retain_n();
                        swift_bridgeObjectRetain();
                        swift_retain();
                        swift_bridgeObjectRelease();
                        *(_QWORD *)(v48 + v255) = v258;
                        v46 = v262;
                        swift_bridgeObjectRelease();
                        swift_release();
                        swift_release();
                      }
                    }
                  }
                }
              }
            }
LABEL_37:
            ++v45;
          }
          while (v45 != v40);
        }
      }
      else
      {
        v32 = v273;
        if ((_DWORD)v36 != (_DWORD)v37)
        {
          v47 = v262;
          do
          {
            v66 = (int *)(v44 + 40 * v36);
            v67 = *v66;
            v68 = v66[1];
            v69 = v67 == -1 && v68 == 0;
            if (!v69 && (v67 & 0x80000000) == 0 && v47[1] > v67)
            {
              v70 = *v47 + 12 * v67;
              if (v68 == -1 || *(_DWORD *)(v70 + 8) == v68)
              {
                v72 = *(_QWORD *)(*(_QWORD *)(a1 + 136) + 8 * *(int *)(*v47 + 12 * v67) + 32);
                v73 = *(_QWORD *)(v72 + 48);
                v74 = *(_QWORD *)(v73 + 16);
                if (v74)
                {
                  v75 = *(__int16 *)(v70 + 4);
                  v76 = (_QWORD *)(v73 + 56);
                  while ((ValueMetadata *)*(v76 - 3) != &type metadata for MeshModel)
                  {
                    v76 += 5;
                    if (!--v74)
                      goto LABEL_62;
                  }
                  v77 = *(_QWORD *)(*(_QWORD *)(v72 + 128) + *v76 + 16 * v75);
                  if (v77)
                  {
                    v78 = *(_QWORD *)(v77 + 24);
                    if (v78)
                    {
                      v79 = *(_QWORD *)(v39 + 48);
                      v80 = *(_QWORD *)(v79 + 16);
                      if (v80)
                      {
                        v81 = (_QWORD *)(v79 + 56);
                        while ((ValueMetadata *)*(v81 - 3) != &type metadata for VertexLayoutCollection)
                        {
                          v81 += 5;
                          if (!--v80)
                            goto LABEL_62;
                        }
                        v290 = *(_QWORD *)(v39 + 128) + *v81;
                        v259 = *(_QWORD *)(v77 + 16);
                        sub_1B1A02758(0, &qword_1EEF61B28, (uint64_t)&type metadata for VertexLayout, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
                        v65 = swift_allocObject();
                        *(_OWORD *)(v65 + 16) = xmmword_1B226D240;
                        *(_QWORD *)(v65 + 32) = v259;
                        *(_QWORD *)(v65 + 40) = v78;
                        swift_retain_n();
                        swift_bridgeObjectRetain();
                        swift_retain();
                        swift_bridgeObjectRelease();
                        *(_QWORD *)(v290 + 8 * v36) = v65;
                        v47 = v262;
                        swift_bridgeObjectRelease();
                        swift_release();
                        swift_release();
                      }
                    }
                  }
                }
              }
            }
LABEL_62:
            ++v36;
          }
          while (v36 != v37);
        }
      }
      v34 = v293;
      sub_1B1F05D48(v31, (unsigned __int16 **)v341, (uint64_t)v353);
      sub_1B1F03804((char *)v39);
      ecs_stack_allocator_pop_snapshot(v282);
      if ((v32 & 1) != 0)
      {
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v39 + 344));
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v39 + 376));
      }
      swift_release();
      v33 = v279 + 1;
    }
    while (v279 + 1 != v276);
    sub_1B1A086DC(v301, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
    sub_1B1A086DC(v301, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
    v2 = v249;
  }
  else
  {
    v34 = 0;
  }
  v82 = sub_1B1B98A7C(MEMORY[0x1E0DEE9D8]);
  v83 = *(_OWORD *)(v2 + 112);
  v351[0] = *(_OWORD *)(v2 + 96);
  v351[1] = v83;
  v352 = *(_QWORD *)(v2 + 128);
  sub_1B1E8FCE4(a1, (uint64_t)v351, 0x200000000, v302);
  sub_1B1A18378((uint64_t)v302, (uint64_t)&v314, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if ((_QWORD)v314)
  {
    v322 = v314;
    v323 = v315;
    v324 = v316;
    if (v321 >= 1 && (v264 = v318) != 0)
    {
      v250 = v2;
      v263 = v317;
      v277 = *(unsigned __int8 *)(v319 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
      v274 = v320[4];
      v84 = (_QWORD *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
      v280 = v320;
      v260 = v320 + 8;
      v261 = (uint64_t)(v320 + 6);
      swift_retain();
      swift_retain();
      swift_retain();
      v85 = 0;
      v86 = v82;
      v254 = v84;
      do
      {
        v87 = v86;
        v271 = v85;
        v88 = (unsigned int *)(v263 + 48 * v85);
        v89 = *v88;
        v286 = v88[1];
        v90 = (uint64_t *)*((_QWORD *)v88 + 2);
        v91 = *((_QWORD *)v88 + 3);
        v92 = *((_QWORD *)v88 + 4);
        v93 = *((_QWORD *)v88 + 5);
        if (v277)
        {
          v94 = *(os_unfair_lock_s **)(v93 + 376);
          swift_retain();
          os_unfair_lock_lock(v94);
          os_unfair_lock_lock(*(os_unfair_lock_t *)(v93 + 344));
        }
        else
        {
          swift_retain();
        }
        ecs_stack_allocator_push_snapshot(v274);
        sub_1B1A18378(v261, (uint64_t)v350, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
        v291 = v93;
        v95 = v280[4];
        v96 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v93 + 40) + 16) + 32) + 16) + 1;
        swift_retain();
        v97 = v95;
        v98 = v291;
        v280[6] = ecs_stack_allocator_allocate(v97, 48 * v96, 8);
        v280[7] = v96;
        v260[1] = 0;
        v260[2] = 0;
        *v260 = 0;
        swift_release();
        v99 = sub_1B1A12038((uint64_t)&type metadata for ModelRenderer, (uint64_t)&off_1E637B750, v90, v91, v92, (uint64_t)v280);
        if (v90)
        {
          v86 = v87;
          if (v92)
          {
            v100 = 0;
            v101 = v254;
            do
            {
              v103 = (int *)(v99 + 16 * v100);
              v104 = *v103;
              v105 = v103[1];
              v106 = v104 == -1 && v105 == 0;
              if (!v106 && (v104 & 0x80000000) == 0 && v101[1] > v104)
              {
                v107 = *v101 + 12 * v104;
                if (v105 == -1 || *(_DWORD *)(v107 + 8) == v105)
                {
                  v109 = *(_QWORD *)(*(_QWORD *)(a1 + 136) + 8 * *(int *)(*v101 + 12 * v104) + 32);
                  v110 = *(_QWORD *)(v109 + 48);
                  v111 = *(_QWORD *)(v110 + 16);
                  if (v111)
                  {
                    v112 = *(__int16 *)(v107 + 4);
                    v113 = (_QWORD *)(v110 + 56);
                    while ((ValueMetadata *)*(v113 - 3) != &type metadata for MeshModel)
                    {
                      v113 += 5;
                      if (!--v111)
                        goto LABEL_104;
                    }
                    v114 = (uint64_t *)(*(_QWORD *)(v109 + 128) + *v113 + 16 * v112);
                    v115 = *v114;
                    if (*v114)
                    {
                      v287 = *(_QWORD *)(v115 + 24);
                      if (v287)
                      {
                        v116 = v114[1];
                        v283 = *(_QWORD *)(v115 + 16);
                        v117 = *(_QWORD *)(v116 + 16);
                        v256 = v99;
                        v267 = v116;
                        if (v117)
                        {
                          v294 = v34;
                          v118 = v116;
                          swift_bridgeObjectRetain_n();
                          swift_retain_n();
                          swift_retain();
                          v119 = *(_QWORD *)(v118 + 32);
                          swift_retain();
                          sub_1B19E5A18(0);
                          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
                          v303[0] = v86;
                          v121 = sub_1B1DC3CA4(v119);
                          v123 = v122;
                          v124 = v86[2] + ((v122 & 1) == 0);
                          if (v86[3] >= v124)
                          {
                            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
                              sub_1B1EB2620();
                          }
                          else
                          {
                            sub_1B1EA2B34(v124, isUniquelyReferenced_nonNull_native);
                            v125 = sub_1B1DC3CA4(v119);
                            if ((v123 & 1) != (v126 & 1))
                              goto LABEL_248;
                            v121 = v125;
                          }
                          v86 = (_QWORD *)v303[0];
                          swift_bridgeObjectRelease();
                          if ((v123 & 1) == 0)
                          {
                            v86[(v121 >> 6) + 8] |= 1 << v121;
                            v127 = 8 * v121;
                            *(_QWORD *)(v86[6] + v127) = v119;
                            *(_QWORD *)(v86[7] + v127) = MEMORY[0x1E0DEE9E8];
                            ++v86[2];
                          }
                          swift_bridgeObjectRetain();
                          swift_bridgeObjectRelease();
                          sub_1B1B8C274((uint64_t *)v304, v283, v287);
                          swift_release();
                          v128 = v117 - 1;
                          if (v117 != 1)
                          {
                            v142 = (uint64_t *)(v267 + 40);
                            do
                            {
                              v143 = *v142;
                              v144 = *v142;
                              swift_retain();
                              sub_1B19E5A18((uint64_t)sub_1B1B679EC);
                              v145 = swift_isUniquelyReferenced_nonNull_native();
                              v303[0] = v86;
                              v146 = sub_1B1DC3CA4(v144);
                              v148 = v147;
                              v149 = v86[2] + ((v147 & 1) == 0);
                              if (v86[3] >= v149)
                              {
                                if ((v145 & 1) == 0)
                                  sub_1B1EB2620();
                              }
                              else
                              {
                                sub_1B1EA2B34(v149, v145);
                                v150 = sub_1B1DC3CA4(v144);
                                if ((v148 & 1) != (v151 & 1))
                                  goto LABEL_248;
                                v146 = v150;
                              }
                              v86 = (_QWORD *)v303[0];
                              swift_bridgeObjectRelease();
                              if ((v148 & 1) == 0)
                              {
                                v86[(v146 >> 6) + 8] |= 1 << v146;
                                v152 = 8 * v146;
                                *(_QWORD *)(v86[6] + v152) = v143;
                                *(_QWORD *)(v86[7] + v152) = MEMORY[0x1E0DEE9E8];
                                ++v86[2];
                              }
                              swift_bridgeObjectRetain();
                              swift_bridgeObjectRelease();
                              sub_1B1B8C274((uint64_t *)v304, v283, v287);
                              swift_release();
                              ++v142;
                              --v128;
                            }
                            while (v128);
                          }
                          swift_bridgeObjectRelease();
                          v251 = sub_1B1B679EC;
                          v98 = v291;
                          v34 = v294;
                          v101 = v254;
                          v99 = v256;
                        }
                        else
                        {
                          swift_retain_n();
                          swift_bridgeObjectRetain();
                          swift_retain();
                          v251 = 0;
                        }
                        v129 = v99 + 16 * v100;
                        v130 = *(unsigned int *)(v129 + 8);
                        v131 = *(unsigned int *)(v129 + 12);
                        if (__PAIR64__(v131, v130) == 0xFFFFFFFF)
                        {
                          swift_bridgeObjectRelease();
                          swift_release_n();
                          swift_release();
                          sub_1B19E5A18((uint64_t)v251);
                        }
                        else
                        {
                          v132 = v86;
                          v133 = v34;
                          swift_retain();
                          v134 = swift_isUniquelyReferenced_nonNull_native();
                          *(_QWORD *)&v304[0] = v132;
                          v135 = v130 | (v131 << 32);
                          v136 = sub_1B1DC3CA4(v135);
                          v138 = v137;
                          v139 = v132[2] + ((v137 & 1) == 0);
                          if (v132[3] >= v139)
                          {
                            if ((v134 & 1) == 0)
                              sub_1B1EB2620();
                          }
                          else
                          {
                            sub_1B1EA2B34(v139, v134);
                            v140 = sub_1B1DC3CA4(v135);
                            if ((v138 & 1) != (v141 & 1))
                              goto LABEL_248;
                            v136 = v140;
                          }
                          v153 = *(_QWORD **)&v304[0];
                          swift_bridgeObjectRelease();
                          swift_bridgeObjectRetain();
                          if ((v138 & 1) == 0)
                            sub_1B1EB3340(v136, v135, MEMORY[0x1E0DEE9E8], v153);
                          swift_bridgeObjectRelease();
                          sub_1B1B8C274((uint64_t *)v304, v283, v287);
                          swift_bridgeObjectRelease();
                          swift_release_n();
                          swift_release();
                          swift_release();
                          sub_1B19E5A18((uint64_t)v251);
                          v34 = v133;
                          v86 = v153;
                          v98 = v291;
                        }
                        v99 = v256;
                      }
                    }
                  }
                }
              }
LABEL_104:
              ++v100;
            }
            while (v100 != v92);
          }
        }
        else
        {
          v102 = v286;
          v86 = v87;
          if ((_DWORD)v89 != (_DWORD)v286)
          {
            do
            {
              v154 = (int *)(v99 + 16 * v89);
              v155 = *v154;
              v156 = v154[1];
              v157 = v155 == -1 && v156 == 0;
              if (!v157 && (v155 & 0x80000000) == 0 && v254[1] > v155)
              {
                v158 = *v254 + 12 * v155;
                if (v156 == -1 || *(_DWORD *)(v158 + 8) == v156)
                {
                  v160 = *(_QWORD *)(*(_QWORD *)(a1 + 136) + 8 * *(int *)(*v254 + 12 * v155) + 32);
                  v161 = *(_QWORD *)(v160 + 48);
                  v162 = *(_QWORD *)(v161 + 16);
                  if (v162)
                  {
                    v163 = *(__int16 *)(v158 + 4);
                    v164 = (_QWORD *)(v161 + 56);
                    while ((ValueMetadata *)*(v164 - 3) != &type metadata for MeshModel)
                    {
                      v164 += 5;
                      if (!--v162)
                        goto LABEL_154;
                    }
                    v165 = (uint64_t *)(*(_QWORD *)(v160 + 128) + *v164 + 16 * v163);
                    v166 = *v165;
                    if (*v165)
                    {
                      v284 = *(_QWORD *)(v166 + 24);
                      if (v284)
                      {
                        v167 = v165[1];
                        v268 = *(_QWORD *)(v166 + 16);
                        v168 = *(_QWORD *)(v167 + 16);
                        v257 = v99;
                        v252 = v167;
                        if (v168)
                        {
                          v295 = v34;
                          v169 = v167;
                          swift_bridgeObjectRetain_n();
                          swift_retain_n();
                          swift_retain();
                          v170 = *(_QWORD *)(v169 + 32);
                          swift_retain();
                          sub_1B19E5A18(0);
                          v171 = v86;
                          v172 = swift_isUniquelyReferenced_nonNull_native();
                          v303[0] = v171;
                          v173 = sub_1B1DC3CA4(v170);
                          v175 = v174;
                          v176 = v171[2] + ((v174 & 1) == 0);
                          if (v171[3] >= v176)
                          {
                            if ((v172 & 1) == 0)
                              sub_1B1EB2620();
                          }
                          else
                          {
                            sub_1B1EA2B34(v176, v172);
                            v177 = sub_1B1DC3CA4(v170);
                            if ((v175 & 1) != (v178 & 1))
                              goto LABEL_248;
                            v173 = v177;
                          }
                          v86 = (_QWORD *)v303[0];
                          swift_bridgeObjectRelease();
                          if ((v175 & 1) == 0)
                          {
                            v86[(v173 >> 6) + 8] |= 1 << v173;
                            v180 = 8 * v173;
                            *(_QWORD *)(v86[6] + v180) = v170;
                            *(_QWORD *)(v86[7] + v180) = MEMORY[0x1E0DEE9E8];
                            ++v86[2];
                          }
                          swift_bridgeObjectRetain();
                          swift_bridgeObjectRelease();
                          sub_1B1B8C274((uint64_t *)v304, v268, v284);
                          swift_release();
                          v181 = v168 - 1;
                          if (v181)
                          {
                            v193 = (uint64_t *)(v252 + 40);
                            do
                            {
                              v194 = *v193;
                              v195 = *v193;
                              swift_retain();
                              sub_1B19E5A18((uint64_t)sub_1B1B679EC);
                              v196 = v86;
                              v197 = swift_isUniquelyReferenced_nonNull_native();
                              v303[0] = v196;
                              v198 = sub_1B1DC3CA4(v195);
                              v200 = v199;
                              v201 = v196[2] + ((v199 & 1) == 0);
                              if (v196[3] >= v201)
                              {
                                if ((v197 & 1) == 0)
                                  sub_1B1EB2620();
                              }
                              else
                              {
                                sub_1B1EA2B34(v201, v197);
                                v202 = sub_1B1DC3CA4(v195);
                                if ((v200 & 1) != (v203 & 1))
                                  goto LABEL_248;
                                v198 = v202;
                              }
                              v86 = (_QWORD *)v303[0];
                              swift_bridgeObjectRelease();
                              if ((v200 & 1) == 0)
                              {
                                v86[(v198 >> 6) + 8] |= 1 << v198;
                                v204 = 8 * v198;
                                *(_QWORD *)(v86[6] + v204) = v194;
                                *(_QWORD *)(v86[7] + v204) = MEMORY[0x1E0DEE9E8];
                                ++v86[2];
                              }
                              swift_bridgeObjectRetain();
                              swift_bridgeObjectRelease();
                              sub_1B1B8C274((uint64_t *)v304, v268, v284);
                              swift_release();
                              ++v193;
                              --v181;
                            }
                            while (v181);
                          }
                          swift_bridgeObjectRelease();
                          v179 = sub_1B1B679EC;
                          v98 = v291;
                          v34 = v295;
                          v99 = v257;
                        }
                        else
                        {
                          swift_retain_n();
                          swift_bridgeObjectRetain();
                          swift_retain();
                          v179 = 0;
                        }
                        v182 = *(_QWORD *)(v99 + 16 * v89 + 8);
                        v183 = v182;
                        v184 = HIDWORD(v182);
                        if (v182 == 0xFFFFFFFFLL)
                        {
                          swift_bridgeObjectRelease();
                          swift_release_n();
                          swift_release();
                          sub_1B19E5A18((uint64_t)v179);
                        }
                        else
                        {
                          v247 = v182;
                          v185 = v86;
                          v186 = v34;
                          swift_retain();
                          v248 = swift_isUniquelyReferenced_nonNull_native();
                          *(_QWORD *)&v304[0] = v185;
                          v187 = sub_1B1DC3CA4(v183 | (v184 << 32));
                          v189 = v188;
                          v190 = v185[2] + ((v188 & 1) == 0);
                          if (v185[3] >= v190)
                          {
                            if ((v248 & 1) == 0)
                              sub_1B1EB2620();
                          }
                          else
                          {
                            sub_1B1EA2B34(v190, v248);
                            v191 = sub_1B1DC3CA4(v183 | (v184 << 32));
                            if ((v189 & 1) != (v192 & 1))
                              goto LABEL_248;
                            v187 = v191;
                          }
                          v205 = *(_QWORD **)&v304[0];
                          swift_bridgeObjectRelease();
                          if ((v189 & 1) == 0)
                          {
                            v205[(v187 >> 6) + 8] |= 1 << v187;
                            v206 = 8 * v187;
                            *(_QWORD *)(v205[6] + v206) = v247;
                            *(_QWORD *)(v205[7] + v206) = MEMORY[0x1E0DEE9E8];
                            ++v205[2];
                          }
                          swift_bridgeObjectRetain();
                          swift_bridgeObjectRelease();
                          sub_1B1B8C274((uint64_t *)v304, v268, v284);
                          swift_bridgeObjectRelease();
                          swift_release_n();
                          swift_release();
                          swift_release();
                          sub_1B19E5A18((uint64_t)v179);
                          v34 = v186;
                          v86 = v205;
                          v98 = v291;
                        }
                        v99 = v257;
                        v102 = v286;
                      }
                    }
                  }
                }
              }
LABEL_154:
              ++v89;
            }
            while (v89 != v102);
          }
        }
        v343[0] = v322;
        v343[1] = v323;
        v344 = v324;
        sub_1B1F05D48(v280, (unsigned __int16 **)v343, (uint64_t)v350);
        sub_1B1F03804((char *)v98);
        ecs_stack_allocator_pop_snapshot(v274);
        if ((v277 & 1) != 0)
        {
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v98 + 344));
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v98 + 376));
        }
        swift_release();
        v85 = v271 + 1;
      }
      while (v271 + 1 != v264);
      sub_1B1A086DC(v302, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
      v2 = v250;
    }
    else
    {
      v86 = v82;
    }
    sub_1B1A086DC(v302, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
  }
  else
  {
    v86 = v82;
  }
  v207 = *(_OWORD *)(v2 + 232);
  v348[0] = *(_OWORD *)(v2 + 216);
  v348[1] = v207;
  v349 = *(_QWORD *)(v2 + 248);
  sub_1B1E8FCE4(a1, (uint64_t)v348, 0x200000000, v303);
  sub_1B1A18378((uint64_t)v303, (uint64_t)v304, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (!*(_QWORD *)&v304[0])
  {
    v244 = v301;
LABEL_246:
    sub_1B1A086DC(v244, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
    return swift_bridgeObjectRelease();
  }
  v311 = v304[0];
  v312 = v304[1];
  v313 = v305;
  if (v310 < 1)
  {
    v245 = v301;
LABEL_245:
    sub_1B1A086DC(v245, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
    v244 = v303;
    goto LABEL_246;
  }
  v275 = v307;
  if (!v307)
  {
    swift_retain();
    swift_retain();
    swift_retain();
LABEL_244:
    sub_1B1A086DC(v301, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
    v245 = v303;
    goto LABEL_245;
  }
  v272 = v306;
  v285 = v309[4];
  v288 = v309;
  v281 = *(_BYTE *)(v308 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
  v265 = v309 + 8;
  v269 = (uint64_t)(v309 + 6);
  swift_retain();
  swift_retain();
  swift_retain();
  v208 = 0;
  v292 = v86;
  while (1)
  {
    v278 = v208;
    v209 = (unsigned int *)(v272 + 48 * v208);
    v210 = *v209;
    v297 = v209[1];
    v212 = (uint64_t *)*((_QWORD *)v209 + 2);
    v211 = *((_QWORD *)v209 + 3);
    v214 = *((_QWORD *)v209 + 4);
    v213 = *((_QWORD *)v209 + 5);
    if ((v281 & 1) != 0)
    {
      v215 = *(os_unfair_lock_s **)(v213 + 376);
      swift_retain();
      os_unfair_lock_lock(v215);
      os_unfair_lock_lock(*(os_unfair_lock_t *)(v213 + 344));
    }
    else
    {
      swift_retain();
    }
    ecs_stack_allocator_push_snapshot(v285);
    sub_1B1A18378(v269, (uint64_t)v347, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
    v216 = v288[4];
    v217 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v213 + 40) + 16) + 32) + 16) + 1;
    swift_retain();
    v288[6] = ecs_stack_allocator_allocate(v216, 48 * v217, 8);
    v288[7] = v217;
    v265[1] = 0;
    v265[2] = 0;
    *v265 = 0;
    swift_release();
    sub_1B1A12038((uint64_t)&type metadata for Material, (uint64_t)&off_1E63C1AA0, v212, v211, v214, (uint64_t)v288);
    v218 = (_QWORD *)sub_1B1A12038((uint64_t)&type metadata for VertexLayoutCollection, (uint64_t)&off_1E63A9B98, v212, v211, v214, (uint64_t)v288);
    if (!v212)
      break;
    v219 = &qword_1ED4B8000;
    if (v214)
    {
      do
      {
        v224 = *v212++;
        v223 = v224;
        v225 = swift_retain();
        if ((*(_BYTE *)(v213 + 184) & 1) != 0)
          goto LABEL_247;
        v226 = *(_DWORD *)(*(_QWORD *)(v213 + 168) + 4 * v223);
        v227 = *(unsigned int *)(*(_QWORD *)(v225 + v219[192]) + 12 * (int)v226 + 8);
        swift_release();
        if (v86[2])
        {
          v228 = sub_1B1DC3CA4(v226 | (unint64_t)(v227 << 32));
          if ((v229 & 1) != 0)
          {
            v230 = *(_QWORD *)(v86[7] + 8 * v228);
            v231 = *(_QWORD *)(v230 + 16);
            if (v231)
            {
              sub_1B1A02758(0, &qword_1EEF61B28, (uint64_t)&type metadata for VertexLayout, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
              v220 = (_QWORD *)swift_allocObject();
              v221 = j__malloc_size(v220);
              v222 = v221 - 32;
              if (v221 < 32)
                v222 = v221 - 17;
              v220[2] = v231;
              v220[3] = 2 * (v222 >> 4);
              sub_1B19F781C(&v298, v220 + 4, v231, v230);
              swift_bridgeObjectRetain_n();
              v86 = v292;
              v219 = &qword_1ED4B8000;
              sub_1B19F8D30();
              swift_bridgeObjectRelease();
            }
            else
            {
              v220 = (_QWORD *)MEMORY[0x1E0DEE9D8];
            }
            *v218 = v220;
            swift_bridgeObjectRelease();
          }
        }
        ++v218;
      }
      while (--v214);
    }
LABEL_229:
    v345[0] = v311;
    v345[1] = v312;
    v346 = v313;
    sub_1B1F05D48(v288, (unsigned __int16 **)v345, (uint64_t)v347);
    sub_1B1F03804((char *)v213);
    ecs_stack_allocator_pop_snapshot(v285);
    if ((v281 & 1) != 0)
    {
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v213 + 344));
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v213 + 376));
    }
    swift_release();
    v208 = v278 + 1;
    if (v278 + 1 == v275)
      goto LABEL_244;
  }
  v232 = v297;
  v233 = &qword_1ED4B8000;
  if ((_DWORD)v210 == (_DWORD)v297)
    goto LABEL_229;
  while (1)
  {
    v237 = swift_retain();
    if ((*(_BYTE *)(v213 + 184) & 1) != 0)
      break;
    v238 = *(_DWORD *)(*(_QWORD *)(v213 + 168) + 4 * v210);
    v239 = *(unsigned int *)(*(_QWORD *)(v237 + v233[192]) + 12 * (int)v238 + 8);
    swift_release();
    if (v86[2])
    {
      v240 = sub_1B1DC3CA4(v238 | (unint64_t)(v239 << 32));
      if ((v241 & 1) != 0)
      {
        v242 = *(_QWORD *)(v86[7] + 8 * v240);
        v243 = *(_QWORD *)(v242 + 16);
        if (v243)
        {
          sub_1B1A02758(0, &qword_1EEF61B28, (uint64_t)&type metadata for VertexLayout, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
          v234 = (_QWORD *)swift_allocObject();
          v235 = j__malloc_size(v234);
          v236 = v235 - 32;
          if (v235 < 32)
            v236 = v235 - 17;
          v234[2] = v243;
          v234[3] = 2 * (v236 >> 4);
          sub_1B19F781C(&v298, v234 + 4, v243, v242);
          swift_bridgeObjectRetain_n();
          v86 = v292;
          v233 = &qword_1ED4B8000;
          v232 = v297;
          sub_1B19F8D30();
          swift_bridgeObjectRelease();
        }
        else
        {
          v234 = (_QWORD *)MEMORY[0x1E0DEE9D8];
        }
        v218[v210] = v234;
        swift_bridgeObjectRelease();
      }
    }
    if (v232 == ++v210)
      goto LABEL_229;
  }
LABEL_247:
  sub_1B2229688();
  __break(1u);
LABEL_248:
  result = sub_1B2229FC4();
  __break(1u);
  return result;
}

uint64_t type metadata accessor for MeshFileSystem()
{
  return objc_opt_self();
}

uint64_t sub_1B1FC604C()
{
  uint64_t v0;
  int v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t inited;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  uint64_t v19;
  int v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE v34[40];
  _OWORD v35[2];
  uint64_t v36;
  _BYTE v37[40];
  _OWORD v38[2];
  uint64_t v39;
  _OWORD v40[2];
  uint64_t v41;
  uint64_t v42;
  int v43;
  char v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  char v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  char v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  char v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  char v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  char v74;
  uint64_t v75;
  char v76;
  uint64_t v77;
  uint64_t v78;

  v78 = *MEMORY[0x1E0C80C00];
  if (qword_1ED4B7DB8 != -1)
    swift_once();
  v72 = qword_1ED4D09F8;
  v73 = 0;
  v74 = 2;
  v75 = 0;
  v76 = 2;
  v77 = 0;
  swift_retain();
  sub_1B1E3AC20(1, (uint64_t)&v19);
  swift_release();
  v1 = v20;
  v2 = v21;
  v3 = v23;
  v4 = v22 | 5;
  *(_QWORD *)(v0 + 16) = v19;
  *(_DWORD *)(v0 + 24) = v1;
  *(_BYTE *)(v0 + 28) = v2;
  *(_QWORD *)(v0 + 32) = v4;
  *(_BYTE *)(v0 + 40) = 2;
  *(_QWORD *)(v0 + 48) = v3;
  v66 = qword_1ED4D09F8;
  v67 = 0;
  v68 = 2;
  v69 = 0;
  v70 = 2;
  v71 = 0;
  swift_retain();
  sub_1B1E3A830(1, (uint64_t)&v24);
  swift_release();
  v5 = v25;
  v6 = v26;
  v7 = v28;
  v8 = v27 | 4;
  *(_QWORD *)(v0 + 56) = v24;
  *(_DWORD *)(v0 + 64) = v5;
  *(_BYTE *)(v0 + 68) = v6;
  *(_QWORD *)(v0 + 72) = v8;
  *(_BYTE *)(v0 + 80) = 2;
  *(_QWORD *)(v0 + 88) = v7;
  v60 = qword_1ED4D09F8;
  v61 = 0;
  v62 = 2;
  v63 = 0;
  v64 = 2;
  v65 = 0;
  swift_retain();
  sub_1B1E3AE18(1, (uint64_t)&v29);
  swift_release();
  v9 = v30;
  v10 = v31;
  v11 = v33;
  v12 = v32 | 4;
  *(_QWORD *)(v0 + 96) = v29;
  *(_DWORD *)(v0 + 104) = v9;
  *(_BYTE *)(v0 + 108) = v10;
  *(_QWORD *)(v0 + 112) = v12;
  *(_BYTE *)(v0 + 120) = 2;
  *(_QWORD *)(v0 + 128) = v11;
  v54 = qword_1ED4D09F8;
  v55 = 0;
  v56 = 2;
  v57 = 0;
  v58 = 2;
  v59 = 0;
  swift_retain();
  sub_1B1E3A830(1, (uint64_t)v34);
  swift_release();
  sub_1B1A19B14();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = &type metadata for VertexLayoutCollection;
  *(_QWORD *)(inited + 40) = &off_1E63A9BC8;
  sub_1B1B44110(v35, inited);
  swift_setDeallocating();
  sub_1B19ED720((uint64_t)v34);
  v14 = v35[1];
  *(_OWORD *)(v0 + 136) = v35[0];
  *(_OWORD *)(v0 + 152) = v14;
  *(_QWORD *)(v0 + 168) = v36;
  v48 = qword_1ED4D09F8;
  v49 = 0;
  v50 = 2;
  v51 = 0;
  v52 = 2;
  v53 = 0;
  swift_retain();
  sub_1B1E3A638(1, (uint64_t)v37);
  swift_release();
  v15 = swift_initStackObject();
  *(_OWORD *)(v15 + 16) = xmmword_1B226D240;
  *(_QWORD *)(v15 + 32) = &type metadata for VertexLayoutCollection;
  *(_QWORD *)(v15 + 40) = &off_1E63A9BC8;
  sub_1B1B44110(v38, v15);
  swift_setDeallocating();
  sub_1B19ED720((uint64_t)v37);
  v16 = v38[1];
  *(_OWORD *)(v0 + 176) = v38[0];
  *(_OWORD *)(v0 + 192) = v16;
  *(_QWORD *)(v0 + 208) = v39;
  v42 = qword_1ED4D09F8;
  v43 = 0;
  v44 = 2;
  v45 = 0;
  v46 = 2;
  v47 = 0;
  swift_retain();
  sub_1B1B12180(1, 2, (uint64_t)v40);
  swift_release();
  v17 = v40[1];
  *(_OWORD *)(v0 + 216) = v40[0];
  *(_OWORD *)(v0 + 232) = v17;
  *(_QWORD *)(v0 + 248) = v41;
  return v0;
}

uint64_t sub_1B1FC63D0()
{
  uint64_t v0;

  v0 = swift_allocObject();
  sub_1B1FC604C();
  return v0;
}

const char *sub_1B1FC6404()
{
  return "MeshFile";
}

uint64_t sub_1B1FC641C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  os_unfair_lock_s *v6;

  v3 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_queryManager);
  swift_getObjectType();
  v5 = sub_1B204D6E4();
  v6 = *(os_unfair_lock_s **)(v4 + 40);
  swift_retain_n();
  os_unfair_lock_lock(v6);
  sub_1B1E8F784(a1, v3);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B1E8FAC0(a1, v5, v3);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v4 + 40));
  return swift_release_n();
}

_QWORD *sub_1B1FC64E4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _QWORD *result;
  __int128 v6;
  _QWORD v7[12];
  uint64_t v8;
  int v9;
  char v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  char v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  _OWORD v30[2];
  uint64_t v31;

  swift_getKeyPath();
  v3 = *(_QWORD *)(a1 + 176);
  swift_retain();
  v4 = sub_1B1F22924((uint64_t)&type metadata for SceneAssetRegistryInstance, (uint64_t)&off_1E63B2458, v3, (void (*)(_QWORD *__return_ptr, uint64_t))sub_1B1FC931C);
  swift_release();
  result = (_QWORD *)swift_release();
  if (v4)
  {
    v6 = *(_OWORD *)(v1 + 32);
    v30[0] = *(_OWORD *)(v1 + 16);
    v30[1] = v6;
    v31 = *(_QWORD *)(v1 + 48);
    sub_1B1E8FCE4(a1, (uint64_t)v30, 0x200000000, v7);
    sub_1B1A18378((uint64_t)v7, (uint64_t)&v8, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
    if (v8)
    {
      v19 = v8;
      v20 = v9;
      v21 = v10;
      v22 = v11;
      v23 = v12;
      v24 = v13;
      v25 = v14;
      v26 = v15;
      v27 = v16;
      v28 = v17;
      v29 = v18;
      swift_retain();
      swift_retain();
      sub_1B219A760((uint64_t)&v19, v4, a1);
      swift_release_n();
      swift_release();
      return sub_1B1A086DC(v7, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
    }
    else
    {
      return (_QWORD *)swift_release();
    }
  }
  return result;
}

uint64_t type metadata accessor for MeshReferenceSystem()
{
  return objc_opt_self();
}

ValueMetadata *type metadata accessor for MeshReferenceAsset()
{
  return &type metadata for MeshReferenceAsset;
}

ValueMetadata *type metadata accessor for VertexLayoutCollection()
{
  return &type metadata for VertexLayoutCollection;
}

uint64_t destroy for MeshFileAsset(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for MeshFileAsset(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  id v5;
  __int128 v7;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  v7 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v5 = (id)v7;
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for MeshFileAsset(_QWORD *a1, _QWORD *a2)
{
  void *v4;
  uint64_t v5;
  void *v6;
  id v7;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = (void *)a2[4];
  v5 = a2[5];
  v6 = (void *)a1[4];
  a1[4] = v4;
  v7 = v4;

  a1[5] = v5;
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for MeshFileAsset(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  v5 = *(void **)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);

  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for MeshFileAsset()
{
  return &type metadata for MeshFileAsset;
}

uint64_t destroy for SceneFileAsset(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for SceneFileAsset(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  __int128 v8;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  v8 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 32) = v8;
  v5 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v6 = (id)v8;
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for SceneFileAsset(_QWORD *a1, _QWORD *a2)
{
  void *v4;
  uint64_t v5;
  void *v6;
  id v7;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = (void *)a2[4];
  v5 = a2[5];
  v6 = (void *)a1[4];
  a1[4] = v4;
  v7 = v4;

  a1[5] = v5;
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for SceneFileAsset(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 40);
  v6 = *(void **)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);

  v7 = *(_QWORD *)(a2 + 48);
  v8 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 40) = v5;
  *(_QWORD *)(a1 + 48) = v7;
  *(_QWORD *)(a1 + 56) = v8;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for SceneFileAsset()
{
  return &type metadata for SceneFileAsset;
}

ValueMetadata *type metadata accessor for ImportOptions()
{
  return &type metadata for ImportOptions;
}

uint64_t initializeBufferWithCopyOfBuffer for MeshImportOptions(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_WORD *)(result + 8) = *((_WORD *)a2 + 4);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for MeshImportOptions(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 10))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 8);
  v4 = v3 >= 2;
  v5 = v3 - 2;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

ValueMetadata *type metadata accessor for MeshImportOptions()
{
  return &type metadata for MeshImportOptions;
}

unint64_t sub_1B1FC6AB0()
{
  unint64_t result;

  result = qword_1EEF61B08;
  if (!qword_1EEF61B08)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22AACD4, &type metadata for ImportOptions);
    atomic_store(result, (unint64_t *)&qword_1EEF61B08);
  }
  return result;
}

unint64_t sub_1B1FC6AF8()
{
  unint64_t result;

  result = qword_1EEF61B10;
  if (!qword_1EEF61B10)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22AACA4, &type metadata for ImportOptions);
    atomic_store(result, (unint64_t *)&qword_1EEF61B10);
  }
  return result;
}

unint64_t sub_1B1FC6B40()
{
  unint64_t result;

  result = qword_1EEF61B18;
  if (!qword_1EEF61B18)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22AACFC, &type metadata for ImportOptions);
    atomic_store(result, (unint64_t *)&qword_1EEF61B18);
  }
  return result;
}

unint64_t sub_1B1FC6B88()
{
  unint64_t result;

  result = qword_1EEF61B20;
  if (!qword_1EEF61B20)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22AAD34, &type metadata for ImportOptions);
    atomic_store(result, (unint64_t *)&qword_1EEF61B20);
  }
  return result;
}

uint64_t sub_1B1FC6BD0(uint64_t a1, uint64_t a2)
{
  return sub_1B1FC6BDC(a1, a2, (void (*)(uint64_t *__return_ptr, uint64_t))sub_1B1E3D3D4);
}

uint64_t sub_1B1FC6BDC(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr, uint64_t))
{
  uint64_t v4;
  int v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  int v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  char v17;
  uint64_t v18;
  char v19;
  uint64_t v20;

  v4 = swift_allocObject();
  if (qword_1ED4B7DB8 != -1)
    swift_once();
  v15 = qword_1ED4D09F8;
  v16 = 0;
  v17 = 2;
  v18 = 0;
  v19 = 2;
  v20 = 0;
  swift_retain();
  a3(&v10, 1);
  swift_release();
  v5 = v11;
  v6 = v12;
  v7 = v14;
  v8 = v13 | 4;
  *(_QWORD *)(v4 + 16) = v10;
  *(_DWORD *)(v4 + 24) = v5;
  *(_BYTE *)(v4 + 28) = v6;
  *(_QWORD *)(v4 + 32) = v8;
  *(_BYTE *)(v4 + 40) = 2;
  *(_QWORD *)(v4 + 48) = v7;
  return v4;
}

const char *sub_1B1FC6CC4()
{
  return "MeshReference";
}

uint64_t sub_1B1FC6CDC()
{
  unint64_t v0;

  v0 = sub_1B2229730();
  swift_bridgeObjectRelease();
  if (v0 >= 4)
    return 4;
  else
    return v0;
}

uint64_t sub_1B1FC6D24(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x656449656E656373 && a2 == 0xEF7265696669746ELL;
  if (v2 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E6564496873656DLL && a2 == 0xEE00726569666974)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_1B2229D24();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_1B1FC6E5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t ObjectType;
  void (*v18)(uint64_t, uint64_t, uint64_t, uint64_t);
  id v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  char *v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t result;
  BOOL v33;
  char *v34;
  BOOL v35;
  uint64_t v36;
  _QWORD *v37;
  void *v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  int64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t *v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  void *v79;
  char *v80;
  void *v81;
  uint64_t v82;
  unint64_t v83;

  v75 = a4;
  v73 = a2;
  v10 = sub_1B2228110();
  v76 = *(_QWORD *)(v10 - 8);
  v77 = v10;
  MEMORY[0x1E0C80A78](v10, v11);
  v14 = *(_QWORD *)(a3 + 16);
  v13 = *(_QWORD *)(a3 + 24);
  v16 = *(void **)(a3 + 32);
  v15 = *(_QWORD *)(a3 + 40);
  v80 = (char *)&v71 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v74 = a5;
  v72 = a6;
  v78 = (_QWORD *)a1;
  if (v16)
  {
    ObjectType = swift_getObjectType();
    v18 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 8);
    swift_bridgeObjectRetain();
    v19 = v16;
    v18(v14, v13, ObjectType, v15);

  }
  else
  {
    if (qword_1ED4BF430 != -1)
      swift_once();
    v82 = 0;
    v83 = 0xE000000000000000;
    v71 = qword_1ED4D0FB0;
    swift_retain();
    sub_1B2229430();
    sub_1B2228890();
    swift_bridgeObjectRetain();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    v20 = v82;
    v21 = v83;
    v22 = sub_1B2228E90();
    if (qword_1ED4BF658 != -1)
      swift_once();
    v82 = 0;
    swift_retain();
    sub_1B1F1AD70(v22, &v82, v20, v21);
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRetain();
    sub_1B2228050();
  }
  swift_bridgeObjectRelease();
  v23 = sub_1B1A11FDC((uint64_t)&type metadata for MeshImportOptions);
  if ((v24 & 1) != 0)
    v78 = 0;
  else
    v78 = *(_QWORD **)(v23 + 16 * v73);
  sub_1B2228014();
  v25 = sub_1B22287B8();
  v27 = v26;
  swift_bridgeObjectRelease();
  v28 = v25 == 1752393069 && v27 == 0xE400000000000000;
  if (v28 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v29 = v80;
    v30 = sub_1B1E23D3C(v14, v13, v16, v15, v74);
    (*(void (**)(char *, uint64_t))(v76 + 8))(v29, v77);
    v31 = v75;
    result = swift_release();
    *v31 = v30;
    return result;
  }
  v33 = v25 == 1718905959 && v27 == 0xE400000000000000;
  v34 = v80;
  if (v33 || (sub_1B2229D24() & 1) != 0)
  {
    (*(void (**)(char *, uint64_t))(v76 + 8))(v34, v77);
    return swift_bridgeObjectRelease();
  }
  v35 = v25 == 2053403509 && v27 == 0xE400000000000000;
  if (v35
    || (sub_1B2229D24() & 1) != 0
    || v25 == 6583157 && v27 == 0xE300000000000000
    || (sub_1B2229D24() & 1) != 0
    || v25 == 6972015 && v27 == 0xE300000000000000
    || (sub_1B2229D24() & 1) != 0
    || v25 == 7107699 && v27 == 0xE300000000000000
    || (sub_1B2229D24() & 1) != 0
    || v25 == 6513249 && v27 == 0xE300000000000000
    || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
LABEL_34:
    type metadata accessor for MDLImporter();
    swift_initStackObject();
    v36 = v72;
    swift_retain();
    v37 = sub_1B1F35FE8((uint64_t)v78, v36);
    v38 = v79;
    sub_1B1F3A814((uint64_t)v34);
    v39 = v38;
    if (v38)
    {
      if (qword_1ED4BF430 != -1)
        swift_once();
      v82 = 0;
      v83 = 0xE000000000000000;
      swift_retain();
      sub_1B2229430();
      sub_1B2228890();
      v81 = v38;
      sub_1B1A025A0(0, (unint64_t *)&qword_1ED4BB030);
      sub_1B22295EC();
      v40 = v82;
      v41 = v83;
      v42 = sub_1B2228EA8();
      if (qword_1ED4BF658 != -1)
        swift_once();
      v82 = 0;
      swift_retain();
      sub_1B1F1AD70(v42, &v82, v40, v41);
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();

      v39 = 0;
    }
    v43 = v37[6];
    v44 = *(_QWORD *)(v43 + 16);
    if (v44 && (v45 = sub_1B1D16FEC(*(_QWORD *)(v43 + 8 * v44 + 24)), v46))
    {
      v47 = v45;
      v48 = v46;
      v49 = v75;
      swift_retain();
      swift_release();
      *v49 = v47;
      v50 = *(_QWORD *)(v48 + 16);
      if (v50)
      {
        v72 = v47;
        v78 = v37;
        v79 = v39;
        v74 = **(_QWORD **)(v74 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues);
        v82 = MEMORY[0x1E0DEE9D8];
        swift_bridgeObjectRetain();
        sub_1B202A38C(0, v50, 0);
        v51 = v82;
        v73 = v48;
        v52 = v48 + 36;
        do
        {
          v53 = v78[3];
          v54 = *(_QWORD *)(v52 - 4);
          v55 = MEMORY[0x1E0DEE9D8];
          v56 = sub_1B1B95EBC(MEMORY[0x1E0DEE9D8]);
          type metadata accessor for RemapContext();
          v57 = swift_allocObject();
          *(_QWORD *)(v57 + 24) = sub_1B1B95EBC(v55);
          swift_retain();
          v58 = sub_1B1B7DC84(v55);
          swift_bridgeObjectRelease();
          *(_QWORD *)(v57 + 24) = v56;
          *(_QWORD *)(v57 + 32) = v58;
          *(_BYTE *)(v57 + 16) = 0;
          sub_1B1DA67D0(v54, v57);
          LOBYTE(v81) = 1;
          sub_1B1F07378(v57, v53, 0x100000000uLL, 0, v74);
          v59 = 0xFFFFFFFFLL;
          if (*(_QWORD *)(*(_QWORD *)(v57 + 24) + 16))
          {
            sub_1B1DC3CA4(v54);
            v60 = *(_QWORD *)(v57 + 24);
            if (*(_QWORD *)(v60 + 16))
            {
              v61 = sub_1B1DC3CA4(v54);
              if ((v62 & 1) != 0)
                v59 = *(_QWORD *)(*(_QWORD *)(v60 + 56) + 8 * v61);
            }
          }
          swift_release();
          swift_release();
          v82 = v51;
          v64 = *(_QWORD *)(v51 + 16);
          v63 = *(_QWORD *)(v51 + 24);
          if (v64 >= v63 >> 1)
          {
            sub_1B202A38C(v63 > 1, v64 + 1, 1);
            v51 = v82;
          }
          v52 += 8;
          *(_QWORD *)(v51 + 16) = v64 + 1;
          *(_QWORD *)(v51 + 8 * v64 + 32) = v59;
          --v50;
        }
        while (v50);
        swift_release();
        swift_release();
        swift_bridgeObjectRelease_n();
        v34 = v80;
      }
      else
      {
        swift_bridgeObjectRetain();
        swift_release();
        swift_bridgeObjectRelease_n();
        swift_release();
        v51 = MEMORY[0x1E0DEE9D8];
      }
      (*(void (**)(char *, uint64_t))(v76 + 8))(v34, v77);
      v65 = v75;
      result = swift_bridgeObjectRelease();
      v65[1] = v51;
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v76 + 8))(v34, v77);
      return swift_release();
    }
    return result;
  }
  if (v25 == 7957616 && v27 == 0xE300000000000000)
  {
    swift_bridgeObjectRelease();
    v34 = v80;
    goto LABEL_34;
  }
  v66 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  v34 = v80;
  if ((v66 & 1) != 0)
    goto LABEL_34;
  type metadata accessor for VFXCoreImporter();
  v67 = sub_1B1F53DBC(v34, *(_QWORD **)(a3 + 48), v74);
  v69 = v68;
  result = (*(uint64_t (**)(char *, uint64_t))(v76 + 8))(v34, v77);
  if (v69)
  {
    v70 = v75;
    swift_release();
    result = swift_bridgeObjectRelease();
    *v70 = v67;
    v70[1] = v69;
  }
  return result;
}

uint64_t *sub_1B1FC77A4(uint64_t *result, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  char v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD v41[4];
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;

  if (*a2)
    return result;
  v4 = result;
  v5 = *result;
  v6 = result[1];
  v7 = *(_QWORD *)(a3 + 16);
  if (!*(_QWORD *)(v7 + 16))
    goto LABEL_11;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v10 = sub_1B1DC3B00(v5, v6);
  if ((v11 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_11:
    if (qword_1ED4BF430 != -1)
      swift_once();
    swift_retain();
    sub_1B2229430();
    swift_bridgeObjectRelease();
    v43 = 0x80000001B23470A0;
    swift_bridgeObjectRetain();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    v27 = sub_1B2228EA8();
    if (qword_1ED4BF658 != -1)
      swift_once();
    v42 = 0;
    swift_retain();
    sub_1B1F1AD70(v27, &v42, 0xD000000000000027, 0x80000001B23470A0);
    swift_release();
    swift_bridgeObjectRelease();
    return (uint64_t *)swift_release();
  }
  v12 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v10);
  swift_retain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v14 = v4[2];
  v13 = v4[3];
  sub_1B1D41A4C(v14, v13);
  v15 = *(_QWORD *)(v12 + OBJC_IVAR____TtC3VFX23SceneAssetRegistryEntry_idToEntity);
  if (*(_QWORD *)(v15 + 16))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v16 = sub_1B1DC3B00(v14, v13);
    if ((v17 & 1) != 0)
    {
      v18 = *(_QWORD *)(*(_QWORD *)(v15 + 56) + 8 * v16);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v19 = **(_QWORD **)(a4 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues);
      sub_1B1D41A4C(0, 0);
      v44 = v12;
      v20 = *(_QWORD *)(v12 + OBJC_IVAR____TtC3VFX23SceneAssetRegistryEntry__entityManager);
      swift_retain();
      v21 = sub_1B1F02F1C(v18, v20, 0, v19);
      swift_release();
      if (v21 == 0xFFFFFFFF || (swift_retain(), v22 = sub_1B1D16FEC(v21), v24 = v23, swift_release(), !v24))
      {
        if (qword_1ED4BF430 != -1)
          swift_once();
        swift_retain();
        v29 = sub_1B2228EA8();
        if (qword_1ED4BF658 != -1)
          swift_once();
        v42 = 0;
        swift_retain();
        sub_1B1F1AD70(v29, &v42, 0xD00000000000002ALL, 0x80000001B2347100);
        swift_release();
        swift_release();
        return (uint64_t *)swift_release();
      }
      else
      {
        if (v22)
        {
          *a2 = v22;
          swift_retain_n();
          swift_bridgeObjectRetain();
          v25 = swift_bridgeObjectRelease();
          a2[1] = v24;
          v42 = 32;
          v43 = 0xE100000000000000;
          MEMORY[0x1E0C80A78](v25, v26);
          v41[2] = &v42;
          swift_bridgeObjectRetain();
          sub_1B1FC1668(sub_1B1FC7E48, (uint64_t)v41, v14, v13);
          v31 = sub_1B2228974();
          v33 = v32;
          v35 = v34;
          v37 = v36;
          swift_bridgeObjectRelease();
          v38 = MEMORY[0x1B5E20388](v31, v33, v35, v37);
          v40 = v39;
          swift_release();
          swift_bridgeObjectRelease();
          swift_release();
          swift_bridgeObjectRelease();
          *(_QWORD *)(v22 + 56) = v38;
          *(_QWORD *)(v22 + 64) = v40;
          swift_release();
        }
        else
        {
          if (qword_1ED4BF430 != -1)
            swift_once();
          swift_retain();
          v30 = sub_1B2228EA8();
          if (qword_1ED4BF658 != -1)
            swift_once();
          v42 = 0;
          swift_retain();
          sub_1B1F1AD70(v30, &v42, 0xD000000000000026, 0x80000001B2347130);
          swift_release();
          swift_release();
          swift_release();
        }
        return (uint64_t *)swift_bridgeObjectRelease();
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (qword_1ED4BF430 != -1)
    swift_once();
  swift_retain();
  sub_1B2229430();
  swift_bridgeObjectRelease();
  v43 = 0x80000001B23470D0;
  swift_bridgeObjectRetain();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  v28 = sub_1B2228EA8();
  if (qword_1ED4BF658 != -1)
    swift_once();
  v42 = 0;
  swift_retain();
  sub_1B1F1AD70(v28, &v42, 0xD000000000000026, 0x80000001B23470D0);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return (uint64_t *)swift_release();
}

uint64_t sub_1B1FC7E48(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v2;

  v2 = *(_QWORD **)(v1 + 16);
  if (*a1 == *v2 && a1[1] == v2[1])
    return 1;
  else
    return sub_1B2229D24() & 1;
}

void sub_1B1FC7E9C(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;

  v34 = a2;
  v35 = sub_1B2228110();
  v33 = *(_QWORD *)(v35 - 8);
  MEMORY[0x1E0C80A78](v35, v3);
  v5 = (char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1B19F8E54(0, &qword_1EEF61B48, (uint64_t (*)(void))sub_1B1FC89F0, (uint64_t)&type metadata for MeshFileAsset.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v7 = v6;
  v8 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v9);
  v11 = (char *)&v29 - v10;
  sub_1B19FA070(a1, a1[3]);
  sub_1B1FC89F0();
  v12 = v36;
  sub_1B222A150();
  if (v12)
  {
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

  }
  else
  {
    v13 = v35;
    v31 = v8;
    v32 = v7;
    v36 = v11;
    v14 = a1[3];
    v15 = a1[4];
    sub_1B19FA070(a1, v14);
    if (sub_1B2067B64(2031, v14, v15))
    {
      LOBYTE(v37) = 0;
      sub_1B1FC8AAC();
      sub_1B2229814();
      v30 = a1;
      v16 = sub_1B222805C();
      v18 = v17;
      (*(void (**)(char *, uint64_t))(v33 + 8))(v5, v13);
      swift_bridgeObjectRetain();
      v19 = 0;
      v33 = 0;
      v20 = v18;
      v21 = v16;
      v35 = v16;
    }
    else
    {
      v43 = 0;
      sub_1B1BB5244();
      sub_1B2229814();
      v30 = a1;
      v20 = v38;
      v35 = v37;
      v21 = v39;
      v18 = v40;
      v19 = v41;
      v33 = v42;
    }
    v23 = v31;
    v22 = v32;
    LOBYTE(v37) = 1;
    v24 = v36;
    if ((sub_1B222988C() & 1) != 0)
    {
      sub_1B1AE717C();
      v43 = 1;
      sub_1B1FC8A34();
      sub_1B2229814();
      (*(void (**)(char *, uint64_t))(v31 + 8))(v24, v22);
      v25 = v37;
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v23 + 8))(v24, v22);
      v25 = 0;
    }
    v27 = v34;
    v26 = v35;
    v28 = v33;
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v30);
    *v27 = v26;
    v27[1] = v20;
    v27[2] = v21;
    v27[3] = v18;
    v27[4] = v19;
    v27[5] = v28;
    v27[6] = v25;
  }
}

void sub_1B1FC81D8(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  char v54;

  v43 = a2;
  v3 = sub_1B2228110();
  v44 = *(_QWORD *)(v3 - 8);
  v45 = v3;
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (char *)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1B19F8E54(0, &qword_1EEF61B68, (uint64_t (*)(void))sub_1B1FC8BAC, (uint64_t)&type metadata for SceneFileAsset.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v8 = v7;
  v9 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v10);
  v12 = (char *)&v40 - v11;
  v13 = sub_1B222826C();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13, v15);
  v17 = (char *)&v40 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1B2228260();
  sub_1B2228224();
  v46 = v18;
  (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v13);
  sub_1B19FA070(a1, a1[3]);
  sub_1B1FC8BAC();
  v19 = v47;
  sub_1B222A150();
  if (v19)
  {
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

  }
  else
  {
    v20 = v6;
    v21 = v45;
    v47 = v9;
    v22 = a1[3];
    v23 = a1[4];
    v42 = a1;
    sub_1B19FA070(a1, v22);
    if (sub_1B2067B64(2031, v22, v23))
    {
      LOBYTE(v48) = 0;
      sub_1B1FC8AAC();
      v24 = v20;
      v25 = v21;
      v26 = v8;
      v27 = v12;
      sub_1B2229814();
      v28 = sub_1B222805C();
      v30 = v29;
      (*(void (**)(char *, uint64_t))(v44 + 8))(v24, v25);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease_n();
      v44 = 0;
      v45 = v28;
      v31 = 0;
      v32 = v30;
      v41 = v28;
    }
    else
    {
      v54 = 0;
      sub_1B1BB5244();
      v26 = v8;
      v27 = v12;
      sub_1B2229814();
      v32 = v49;
      v41 = v48;
      v30 = v51;
      v31 = v52;
      v44 = v53;
      v45 = v50;
      swift_bridgeObjectRelease_n();
    }
    v33 = (uint64_t)v42;
    LOBYTE(v48) = 1;
    v34 = sub_1B22297CC();
    v36 = v35;
    (*(void (**)(char *, uint64_t))(v47 + 8))(v27, v26);
    swift_bridgeObjectRelease();
    v37 = v31;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0(v33);
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v38 = v43;
    *v43 = v41;
    v38[1] = v32;
    v38[2] = v45;
    v38[3] = v30;
    v39 = v44;
    v38[4] = (uint64_t)v31;
    v38[5] = v39;
    v38[6] = v34;
    v38[7] = v36;
  }
}

_QWORD *sub_1B1FC85AC(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  _QWORD *v15;
  int v16;
  _QWORD *v18;
  unsigned __int8 v19;
  char v20;
  char v21;
  char v22;
  char v23;

  sub_1B19F8E54(0, &qword_1EEF61B80, (uint64_t (*)(void))sub_1B1FC8BF0, (uint64_t)&type metadata for MeshImportOptions.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v6);
  v8 = (char *)&v18 - v7;
  v9 = sub_1B19FA070(a1, a1[3]);
  sub_1B1FC8BF0();
  v10 = v9;
  sub_1B222A150();
  if (!v1)
  {
    v11 = a1[3];
    v12 = a1[4];
    sub_1B19FA070(a1, v11);
    if (sub_1B2067B64(1014, v11, v12))
    {
      v21 = 1;
      v13 = sub_1B2229784();
      v20 = 2;
      v14 = sub_1B2229784();
      (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
      v10 = (_QWORD *)((v14 == 2) | v14 & 1 | (2 * (v13 & 1u)));
    }
    else
    {
      v23 = 0;
      sub_1B1FC8C34();
      sub_1B22297B4();
      v15 = v18;
      v16 = v19;
      v22 = 3;
      sub_1B1FC8C78();
      sub_1B22297B4();
      if (v16)
        v10 = 0;
      else
        v10 = v15;
      (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    }
  }
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  return v10;
}

uint64_t sub_1B1FC8808(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v11;
  char v12;
  char v13;

  sub_1B19F8E54(0, &qword_1EEF61B30, (uint64_t (*)(void))sub_1B1FC89AC, (uint64_t)&type metadata for MeshReferenceAsset.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v6);
  v8 = (char *)&v11 - v7;
  v9 = a1[4];
  sub_1B19FA070(a1, a1[3]);
  sub_1B1FC89AC();
  sub_1B222A150();
  if (v1)
  {
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
    swift_bridgeObjectRelease();
  }
  else
  {
    v13 = 0;
    v9 = sub_1B22297CC();
    v12 = 1;
    sub_1B22297CC();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  }
  return v9;
}

unint64_t sub_1B1FC89AC()
{
  unint64_t result;

  result = qword_1EEF61B38;
  if (!qword_1EEF61B38)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22AB688, &type metadata for MeshReferenceAsset.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF61B38);
  }
  return result;
}

unint64_t sub_1B1FC89F0()
{
  unint64_t result;

  result = qword_1EEF61B50;
  if (!qword_1EEF61B50)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22AB638, &type metadata for MeshFileAsset.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF61B50);
  }
  return result;
}

unint64_t sub_1B1FC8A34()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  result = qword_1EEF61B58;
  if (!qword_1EEF61B58)
  {
    sub_1B1AE717C();
    v2 = v1;
    v3 = sub_1B1FC8B38((unint64_t *)&qword_1ED4BA4D8, MEMORY[0x1E0DEB448], MEMORY[0x1E0DEAF40]);
    result = MEMORY[0x1B5E23E74](MEMORY[0x1E0DEE9A0], v2, &v3);
    atomic_store(result, (unint64_t *)&qword_1EEF61B58);
  }
  return result;
}

unint64_t sub_1B1FC8AAC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1ED4B7B20;
  if (!qword_1ED4B7B20)
  {
    v1 = sub_1B2228110();
    result = MEMORY[0x1B5E23E74](MEMORY[0x1E0CB0038], v1);
    atomic_store(result, (unint64_t *)&qword_1ED4B7B20);
  }
  return result;
}

uint64_t sub_1B1FC8AF4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1B1AE717C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1B1FC8B38(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    sub_1B1A02758(255, &qword_1ED4BA4D0, MEMORY[0x1E0DEB418], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    v8 = a2;
    result = MEMORY[0x1B5E23E74](a3, v7, &v8);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1B1FC8BAC()
{
  unint64_t result;

  result = qword_1EEF61B70;
  if (!qword_1EEF61B70)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22AB5E8, &type metadata for SceneFileAsset.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF61B70);
  }
  return result;
}

unint64_t sub_1B1FC8BF0()
{
  unint64_t result;

  result = qword_1EEF61B88;
  if (!qword_1EEF61B88)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22AB598, &type metadata for MeshImportOptions.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF61B88);
  }
  return result;
}

unint64_t sub_1B1FC8C34()
{
  unint64_t result;

  result = qword_1EEF61B90;
  if (!qword_1EEF61B90)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22AAE24, &type metadata for ImportOptions);
    atomic_store(result, (unint64_t *)&qword_1EEF61B90);
  }
  return result;
}

unint64_t sub_1B1FC8C78()
{
  unint64_t result;

  result = qword_1EEF61B98;
  if (!qword_1EEF61B98)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22AB570, &type metadata for MeshImportOptions.Loader);
    atomic_store(result, (unint64_t *)&qword_1EEF61B98);
  }
  return result;
}

unint64_t sub_1B1FC8CBC()
{
  unint64_t result;

  result = qword_1EEF61BA8;
  if (!qword_1EEF61BA8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22AB548, &type metadata for MeshImportOptions.Loader);
    atomic_store(result, (unint64_t *)&qword_1EEF61BA8);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for MeshImportOptions.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1B1FC8D4C + 4 * byte_1B22AAB01[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1B1FC8D80 + 4 * byte_1B22AAAFC[v4]))();
}

uint64_t sub_1B1FC8D80(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1FC8D88(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B1FC8D90);
  return result;
}

uint64_t sub_1B1FC8D9C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B1FC8DA4);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1B1FC8DA8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1FC8DB0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MeshImportOptions.CodingKeys()
{
  return &type metadata for MeshImportOptions.CodingKeys;
}

ValueMetadata *type metadata accessor for SceneFileAsset.CodingKeys()
{
  return &type metadata for SceneFileAsset.CodingKeys;
}

ValueMetadata *type metadata accessor for MeshFileAsset.CodingKeys()
{
  return &type metadata for MeshFileAsset.CodingKeys;
}

ValueMetadata *type metadata accessor for MeshReferenceAsset.CodingKeys()
{
  return &type metadata for MeshReferenceAsset.CodingKeys;
}

uint64_t _s3VFX17MeshImportOptionsV6LoaderOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1B1FC8E4C + 4 * byte_1B22AAB0B[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1B1FC8E80 + 4 * byte_1B22AAB06[v4]))();
}

uint64_t sub_1B1FC8E80(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1FC8E88(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B1FC8E90);
  return result;
}

uint64_t sub_1B1FC8E9C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B1FC8EA4);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1B1FC8EA8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1FC8EB0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MeshImportOptions.Loader()
{
  return &type metadata for MeshImportOptions.Loader;
}

unint64_t sub_1B1FC8ED0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EEF61BB0;
  if (!qword_1EEF61BB0)
  {
    sub_1B1A02758(255, &qword_1EEF61BB8, (uint64_t)&type metadata for MeshImportOptions.Loader, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    result = MEMORY[0x1B5E23E74](MEMORY[0x1E0DEAF50], v1);
    atomic_store(result, (unint64_t *)&qword_1EEF61BB0);
  }
  return result;
}

unint64_t sub_1B1FC8F34()
{
  unint64_t result;

  result = qword_1EEF61BC0;
  if (!qword_1EEF61BC0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22AB198, &type metadata for MeshImportOptions.Loader);
    atomic_store(result, (unint64_t *)&qword_1EEF61BC0);
  }
  return result;
}

unint64_t sub_1B1FC8F7C()
{
  unint64_t result;

  result = qword_1EEF61BC8;
  if (!qword_1EEF61BC8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22AB250, &type metadata for MeshReferenceAsset.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF61BC8);
  }
  return result;
}

unint64_t sub_1B1FC8FC4()
{
  unint64_t result;

  result = qword_1EEF61BD0;
  if (!qword_1EEF61BD0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22AB340, &type metadata for MeshFileAsset.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF61BD0);
  }
  return result;
}

unint64_t sub_1B1FC900C()
{
  unint64_t result;

  result = qword_1EEF61BD8;
  if (!qword_1EEF61BD8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22AB430, &type metadata for SceneFileAsset.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF61BD8);
  }
  return result;
}

unint64_t sub_1B1FC9054()
{
  unint64_t result;

  result = qword_1EEF61BE0;
  if (!qword_1EEF61BE0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22AB520, &type metadata for MeshImportOptions.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF61BE0);
  }
  return result;
}

unint64_t sub_1B1FC909C()
{
  unint64_t result;

  result = qword_1EEF61BE8;
  if (!qword_1EEF61BE8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22AB458, &type metadata for MeshImportOptions.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF61BE8);
  }
  return result;
}

unint64_t sub_1B1FC90E4()
{
  unint64_t result;

  result = qword_1EEF61BF0;
  if (!qword_1EEF61BF0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22AB480, &type metadata for MeshImportOptions.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF61BF0);
  }
  return result;
}

unint64_t sub_1B1FC912C()
{
  unint64_t result;

  result = qword_1EEF61BF8;
  if (!qword_1EEF61BF8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22AB368, &type metadata for SceneFileAsset.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF61BF8);
  }
  return result;
}

unint64_t sub_1B1FC9174()
{
  unint64_t result;

  result = qword_1EEF61C00;
  if (!qword_1EEF61C00)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22AB390, &type metadata for SceneFileAsset.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF61C00);
  }
  return result;
}

unint64_t sub_1B1FC91BC()
{
  unint64_t result;

  result = qword_1EEF61C08;
  if (!qword_1EEF61C08)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22AB278, &type metadata for MeshFileAsset.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF61C08);
  }
  return result;
}

unint64_t sub_1B1FC9204()
{
  unint64_t result;

  result = qword_1EEF61C10;
  if (!qword_1EEF61C10)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22AB2A0, &type metadata for MeshFileAsset.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF61C10);
  }
  return result;
}

unint64_t sub_1B1FC924C()
{
  unint64_t result;

  result = qword_1EEF61C18;
  if (!qword_1EEF61C18)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22AB1C0, &type metadata for MeshReferenceAsset.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF61C18);
  }
  return result;
}

unint64_t sub_1B1FC9294()
{
  unint64_t result;

  result = qword_1EEF61C20;
  if (!qword_1EEF61C20)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22AB1E8, &type metadata for MeshReferenceAsset.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF61C20);
  }
  return result;
}

unint64_t sub_1B1FC92D8()
{
  unint64_t result;

  result = qword_1EEF61C28;
  if (!qword_1EEF61C28)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22AB120, &type metadata for MeshImportOptions.Loader);
    atomic_store(result, (unint64_t *)&qword_1EEF61C28);
  }
  return result;
}

uint64_t sub_1B1FC931C@<X0>(_QWORD *a1@<X8>)
{
  return sub_1B1B95400(a1);
}

double sub_1B1FC9330@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];

  sub_1B1FCD350(a1, (uint64_t)v6);
  if (!v2)
  {
    result = *(double *)v6;
    v5 = v6[1];
    *a2 = v6[0];
    a2[1] = v5;
  }
  return result;
}

uint64_t sub_1B1FC9368(_QWORD *a1)
{
  __int128 *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  __int128 v10;
  uint64_t result;
  _BYTE v12[8];
  uint64_t v13;
  __int128 v14;
  __int128 v15;

  sub_1B1D4F120(0, &qword_1EEF5CA00, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED170]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v7);
  v9 = &v12[-v8];
  v10 = v1[1];
  v14 = *v1;
  v15 = v10;
  result = sub_1B1C36AC4(a1, (uint64_t)&v12[-v8]);
  if (!v2)
  {
    v13 = *((_QWORD *)&v15 + 1);
    v12[7] = 9;
    sub_1B1A0895C();
    sub_1B2229958();
    return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v9, v5);
  }
  return result;
}

double sub_1B1FC9458()
{
  double result;
  _OWORD v1[2];
  uint64_t v2;
  uint64_t v3;
  int v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;

  if (qword_1ED4B7DB8 != -1)
    swift_once();
  v3 = qword_1ED4D09F8;
  v4 = 0;
  v5 = 2;
  v6 = 0;
  v7 = 2;
  v8 = 0;
  swift_retain();
  sub_1B1B46F54((uint64_t)v1);
  swift_release();
  result = *(double *)v1;
  xmmword_1EEFD57D8 = v1[0];
  unk_1EEFD57E8 = v1[1];
  qword_1EEFD57F8 = v2;
  return result;
}

uint64_t *sub_1B1FC94F8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  float v5;
  uint64_t v6;
  uint64_t *result;
  uint64_t v8;
  int i;
  uint64_t v10;
  unsigned int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  os_unfair_lock_s *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  float32x2_t *v20;
  uint64_t v21;
  float32x2_t *v22;
  uint64_t v23;
  float32x2_t *v24;
  float32x2_t *v25;
  uint64_t *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40[8];
  _OWORD v41[2];
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  _OWORD v51[2];
  uint64_t v52;
  _BYTE v53[40];
  _OWORD v54[2];
  uint64_t v55;

  v5 = *(float *)(v2 + 160);
  if (qword_1EEF574F0 != -1)
    swift_once();
  v54[0] = xmmword_1EEFD57D8;
  v54[1] = unk_1EEFD57E8;
  v55 = qword_1EEFD57F8;
  v6 = a2 & 0xFFFFFFFFFFLL;
  sub_1B1E8FCE4(a1, (uint64_t)v54, a2 & 0xFFFFFFFFFFLL, v40);
  result = (uint64_t *)sub_1B1FCD4B0((uint64_t)v40, (uint64_t)v41, (uint64_t)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult, (uint64_t (*)(_QWORD, uint64_t, uint64_t))sub_1B19F900C);
  if (*(_QWORD *)&v41[0])
  {
    v48 = v41[0];
    v49 = v41[1];
    v50 = v42;
    if (v47 >= 1)
    {
      v33 = v44;
      if (v44)
      {
        v31 = v43;
        v8 = v46[4];
        i = *(unsigned __int8 *)(v45 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
        v39 = v46;
        v28 = v46 + 8;
        v29 = (uint64_t)(v46 + 6);
        swift_retain();
        swift_retain();
        swift_retain();
        v10 = 0;
        v30 = i;
        v32 = v8;
        v27 = v2;
        do
        {
          v11 = (unsigned int *)(v31 + 48 * v10);
          v35 = *v11;
          v12 = *((_QWORD *)v11 + 3);
          v14 = *((_QWORD *)v11 + 4);
          v13 = *((_QWORD *)v11 + 5);
          v36 = (uint64_t *)*((_QWORD *)v11 + 2);
          v37 = v10;
          v34 = v11[1];
          if (i)
          {
            v15 = *(os_unfair_lock_s **)(v13 + 376);
            swift_retain();
            os_unfair_lock_lock(v15);
            os_unfair_lock_lock(*(os_unfair_lock_t *)(v13 + 344));
          }
          else
          {
            swift_retain();
          }
          ecs_stack_allocator_push_snapshot(v8);
          sub_1B1FCD4B0(v29, (uint64_t)v53, (uint64_t)&qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext, (uint64_t (*)(_QWORD, uint64_t, uint64_t))sub_1B19F900C);
          v16 = v39[4];
          v17 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v13 + 40) + 16) + 32) + 16) + 1;
          v18 = v13;
          swift_retain();
          v39[6] = ecs_stack_allocator_allocate(v16, 48 * v17, 8);
          v39[7] = v17;
          v28[1] = 0;
          v28[2] = 0;
          *v28 = 0;
          swift_release();
          v19 = (uint64_t *)sub_1B1A12038((uint64_t)&type metadata for ParticleSDFCollider, (uint64_t)&off_1E6399358, v36, v12, v14, (uint64_t)v39);
          v20 = (float32x2_t *)sub_1B1A12038((uint64_t)&type metadata for WorldTransform, (uint64_t)&off_1E6382C00, v36, v12, v14, (uint64_t)v39);
          v38 = v18;
          v21 = sub_1B1A12038((uint64_t)&type metadata for LastFrameWorldTransform, (uint64_t)&off_1E63AA960, v36, v12, v14, (uint64_t)v39);
          v22 = (float32x2_t *)v21;
          if (v36)
          {
            for (i = v30; v14; --v14)
            {
              sub_1B1FCBEBC(v19, v20, v22, v27, v6, a1, v5);
              v22 += 8;
              v20 += 8;
              v19 += 4;
            }
          }
          else
          {
            i = v30;
            if ((_DWORD)v35 != (_DWORD)v34)
            {
              v23 = v34 - v35;
              v24 = (float32x2_t *)(v21 + (v35 << 6));
              v25 = &v20[8 * v35];
              v26 = &v19[4 * v35];
              do
              {
                sub_1B1FCBEBC(v26, v25, v24, v27, v6, a1, v5);
                v24 += 8;
                v25 += 8;
                v26 += 4;
                --v23;
              }
              while (v23);
            }
          }
          v51[0] = v48;
          v51[1] = v49;
          v52 = v50;
          sub_1B1F05D48(v39, (unsigned __int16 **)v51, (uint64_t)v53);
          sub_1B1F03804((char *)v38);
          v8 = v32;
          ecs_stack_allocator_pop_snapshot(v32);
          if ((i & 1) != 0)
          {
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v38 + 344));
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v38 + 376));
          }
          swift_release();
          v10 = v37 + 1;
        }
        while (v37 + 1 != v33);
        sub_1B19ED748(v40);
      }
    }
    return sub_1B19ED748(v40);
  }
  return result;
}

uint64_t sub_1B1FC9960(__int128 *a1, __int128 *a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, float a7)
{
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  char v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  int v28;
  float v29;
  __int128 v30;
  float v31;
  float v32;
  float v33;
  uint64_t v34;
  float32x2_t v41;
  uint32x2_t v42;
  float v43;
  uint64_t v44;
  float32x2_t v45;
  float32x2_t v46;
  uint32x2_t v47;
  int v48;
  float32x2_t v49;
  float32x2_t v50;
  float32x2_t v51;
  float32x2_t v52;
  int32x2_t v53;
  float32x2_t v54;
  float32x2_t v55;
  float32x2_t v56;
  float32x2_t v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float32x2_t v64;
  float v65;
  float32x2_t v66;
  float v67;
  float32x2_t v68;
  float32x4_t v69;
  float32x4_t v70;
  int8x16_t v71;
  float32x4_t v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  int32x4_t v76;
  float32x2_t v77;
  float32x2_t v78;
  float32x4_t v79;
  __int32 v80;
  uint64_t v81;
  __int32 v84;
  float v85;
  uint64_t v87;
  float32x4_t v88;
  uint64_t v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;
  uint64_t v93;
  float32x2_t v94;
  char v95;
  float32x4_t v96;
  float32x4_t v98;
  float32x4_t v100;
  char v101;
  __int128 v102;
  uint64_t v103;
  ValueMetadata *v104;
  _UNKNOWN **v105;
  __int128 v106;
  _QWORD v107[6];
  float v108;
  char v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  _QWORD *v117;
  uint64_t v118;
  uint64_t v119;
  _QWORD *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;

  v123 = *MEMORY[0x1E0C80C00];
  v10 = (uint64_t *)*((_QWORD *)a1 + 11);
  v11 = *((_QWORD *)a1 + 12);
  v12 = *((_QWORD *)a1 + 13);
  v13 = *((_QWORD *)a1 + 1);
  v14 = *((_QWORD *)a1 + 2);
  v93 = sub_1B1A12038((uint64_t)&type metadata for Position, (uint64_t)&off_1E63C2398, v10, v11, v12, v14);
  v89 = sub_1B1A12038((uint64_t)&type metadata for Velocity, (uint64_t)&off_1E63C30D0, v10, v11, v12, v14);
  v81 = sub_1B1B47B28();
  v95 = v15;
  v87 = sub_1B1B47B98();
  v17 = v16;
  v102 = *a2;
  v106 = *(_OWORD *)(a3 + 192);
  v18 = a1[3];
  v112 = a1[2];
  v19 = *a1;
  v111 = a1[1];
  v110 = v19;
  v116 = a1[6];
  v20 = a1[4];
  v115 = a1[5];
  v114 = v20;
  v104 = &type metadata for CollisionProperties;
  v105 = &off_1E6397A08;
  v103 = *((_QWORD *)a2 + 2);
  v21 = *(_QWORD *)(a4 + 16);
  v113 = v18;
  v22 = *((_QWORD *)a1 + 6);
  v23 = *((_QWORD *)a1 + 7);
  v24 = *(_QWORD *)(v14 + 32);
  swift_retain();
  v117 = ecs_stack_allocator_allocate(v24, 8 * (v23 - v22), 8);
  v118 = v23 - v22;
  v119 = 0;
  sub_1B19FA198((uint64_t)&v102, (uint64_t)v107);
  v108 = a7;
  v107[5] = v21;
  sub_1B1A10AA4(*(_QWORD *)(v13 + 40), (uint64_t)&type metadata for Anchored, &v101);
  v109 = v101;
  swift_retain();
  v25 = ecs_stack_allocator_allocate(v24, 80 * (v23 - v22), 16);
  v26 = v93;
  swift_release();
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v102);
  v120 = v25;
  v121 = v23 - v22;
  v122 = 0;
  if (v23 != v22)
  {
    v28 = v95 & 1;
    v29 = *(float *)(a4 + 80) * 0.5;
    v30 = *(_OWORD *)(a3 + 208);
    LODWORD(v31) = HIDWORD(*(_QWORD *)(a3 + 208));
    v98 = *(float32x4_t *)(a3 + 16);
    v100 = *(float32x4_t *)a3;
    v96 = *(float32x4_t *)(a3 + 32);
    v92 = *(float32x4_t *)(a3 + 48);
    if ((LODWORD(v31) & 0x7FFFFF) != 0)
      LODWORD(v32) = *(_OWORD *)(a3 + 208);
    else
      LODWORD(v32) = HIDWORD(*(_QWORD *)(a3 + 208));
    if ((~LODWORD(v31) & 0x7F800000) != 0)
      LODWORD(v32) = HIDWORD(*(_QWORD *)(a3 + 208));
    if (v31 >= *(float *)&v30)
      *(float *)&v30 = v32;
    v33 = *(float *)&v30 + *(float *)&v30;
    v34 = 16 * v22;
    __asm { FMOV            V12.2S, #1.0 }
    v85 = *(float *)&v30 + *(float *)&v30;
    do
    {
      if ((v17 & 1) != 0)
        __asm { FMOV            V0.4S, #1.0 }
      else
        _Q0 = *(_OWORD *)(v87 + 16 * v22);
      v41 = (float32x2_t)vmlaq_n_f32(vmlaq_lane_f32(vmlaq_laneq_f32(v92, v96, *(float32x4_t *)(v26 + 16 * v22), 2), v98, *(float32x2_t *)(v26 + 16 * v22), 1), v100, COERCE_FLOAT(*(_OWORD *)(v26 + 16 * v22))).u64[0];
      v42 = (uint32x2_t)vcgt_f32(vabs_f32(v41), _D12);
      if ((vpmax_u32(v42, v42).u32[0] & 0x80000000) != 0)
        goto LABEL_13;
      v88 = *(float32x4_t *)(v26 + 16 * v22);
      v43 = (float)(v29 * fmaxf(fmaxf(*(float *)&_Q0, *((float *)&_Q0 + 2)), *((float *)&_Q0 + 1))) / v33;
      v90 = *(float32x4_t *)(v89 + 16 * v22);
      v94 = v41;
      if ((*(float (**)(uint64_t, double))(a6 + 40))(a6, COERCE_DOUBLE(vmla_f32((float32x2_t)0x3F0000003F000000, (float32x2_t)0x3F0000003F000000, v41))) > v43)goto LABEL_13;
      v44 = v26;
      v91 = vmulq_n_f32(v90, a7);
      v45 = (float32x2_t)vmlaq_n_f32(vmlaq_lane_f32(vmulq_laneq_f32(v96, v91, 2), v98, *(float32x2_t *)v91.f32, 1), v100, v91.f32[0]).u64[0];
      v46 = vsub_f32(v94, v45);
      v47 = (uint32x2_t)vcgt_f32(vabs_f32(v46), _D12);
      v48 = vpmax_u32(v47, v47).u32[0];
      v49 = v46;
      if (v48 < 0)
      {
        v50 = vdiv_f32(_D12, vmaxnm_f32(vabs_f32(v45), (float32x2_t)0x3400000034000000));
        v51 = vsub_f32(vmul_f32(v46, vmul_f32(v50, vneg_f32((float32x2_t)vand_s8(vorr_s8(vand_s8((int8x8_t)v45, (int8x8_t)0x8000000080000000), (int8x8_t)_D12), vorr_s8((int8x8_t)vcltz_f32(v45), (int8x8_t)vcgtz_f32(v45)))))), v50);
        v49 = vmla_n_f32(v46, v45, fmaxf(v51.f32[0], v51.f32[1]));
      }
      v52 = vmla_f32((float32x2_t)0x3F0000003F000000, (float32x2_t)0x3F0000003F000000, v49);
      v53 = (int32x2_t)vmul_f32(v45, v45);
      v54 = (float32x2_t)vdup_lane_s32((int32x2_t)vadd_f32((float32x2_t)v53, (float32x2_t)vdup_lane_s32(v53, 1)), 0);
      v55 = vrsqrte_f32(v54);
      v56 = vmul_f32(v55, vrsqrts_f32(v54, vmul_f32(v55, v55)));
      v57 = (float32x2_t)vbsl_s8((int8x8_t)*(_OWORD *)&vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vuzp1_s16((int16x4_t)vmvn_s8((int8x8_t)vceqz_f32(v54)), (int16x4_t)v45)), 0x1FuLL)), (int8x8_t)vmul_f32(v45, vmul_f32(v56, vrsqrts_f32(v54, vmul_f32(v56, v56)))), (int8x8_t)v45);
      v58 = (*(float (**)(uint64_t, double))(a6 + 40))(a6, COERCE_DOUBLE(vmla_f32(v52, 0, v57))) - v43;
      v59 = 0.0;
      if (v58 > 0.01)
      {
        v59 = v58 + 0.0;
        v60 = (*(float (**)(uint64_t, double))(a6 + 40))(a6, COERCE_DOUBLE(vmla_n_f32(v52, v57, (float)(v58 + 0.0) * 0.5)))- v43;
        if (v60 > 0.01)
        {
          v59 = v59 + v60;
          v61 = (*(float (**)(uint64_t, double))(a6 + 40))(a6, COERCE_DOUBLE(vmla_n_f32(v52, v57, v59 * 0.5)))
              - v43;
          if (v61 > 0.01)
          {
            v59 = v59 + v61;
            v62 = (*(float (**)(uint64_t, double))(a6 + 40))(a6, COERCE_DOUBLE(vmla_n_f32(v52, v57, v59 * 0.5)))- v43;
            if (v62 > 0.01)
            {
              v59 = v59 + v62;
              v63 = (*(float (**)(uint64_t, double))(a6 + 40))(a6, COERCE_DOUBLE(vmla_n_f32(v52, v57, v59 * 0.5)))- v43;
              if (v63 > 0.01)
                v59 = v59 + v63;
            }
          }
        }
      }
      v64 = vsub_f32(v49, v46);
      v65 = sqrtf(vaddv_f32(vmul_f32(v64, v64))) + v59;
      if (v48 >= 0)
        v65 = v59;
      v66 = vsub_f32(v94, v46);
      v67 = v65 / sqrtf(vaddv_f32(vmul_f32(v66, v66)));
      if (v67 > 1.0)
      {
        v26 = v44;
      }
      else
      {
        v68 = vmla_n_f32(v52, v57, v65 * 0.5);
        (*(void (**)(uint64_t, double))(a6 + 40))(a6, COERCE_DOUBLE(vadd_f32(v68, (float32x2_t)1008981770)));
        (*(void (**)(uint64_t, double))(a6 + 40))(a6, COERCE_DOUBLE(vadd_f32(v68, (float32x2_t)0x80000000BC23D70ALL)));
        (*(void (**)(uint64_t, double))(a6 + 40))(a6, COERCE_DOUBLE(vadd_f32(v68, (float32x2_t)0x3C23D70A00000000)));
        (*(void (**)(uint64_t, double))(a6 + 40))(a6, COERCE_DOUBLE(vadd_f32(v68, (float32x2_t)0xBC23D70A80000000)));
        v26 = v44;
        if (v67 >= 0.0)
        {
          v69 = 0uLL;
          v70 = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(*(float32x4_t *)(a3 + 128), (float32x4_t)0), (float32x4_t)0, *(float32x4_t *)(a3 + 144)), (float32x4_t)0, *(float32x4_t *)(a3 + 160)), (float32x4_t)0, *(float32x4_t *)(a3 + 176));
          v71 = (int8x16_t)vabsq_f32(v70);
          if (*(float *)v71.i32 <= 0.00000011921
            && (v71.i32[0] = vextq_s8(v71, v71, 8uLL).u32[0],
                *(int32x2_t *)v71.i8 = vcge_f32((float32x2_t)0x3400000034000000, *(float32x2_t *)v71.i8),
                (v71.i8[4] & 1) != 0)
            && (v71.i8[0] & 1) != 0)
          {
            v72 = v88;
            if (!v28)
              goto LABEL_35;
LABEL_37:
            v74 = 0;
            v75 = 0;
          }
          else
          {
            v76 = (int32x4_t)vmulq_f32(v70, v70);
            v76.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v76, 2), vadd_f32(*(float32x2_t *)v76.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v76.i8, 1))).u32[0];
            v77 = vrsqrte_f32((float32x2_t)v76.u32[0]);
            v78 = vmul_f32(v77, vrsqrts_f32((float32x2_t)v76.u32[0], vmul_f32(v77, v77)));
            v69 = vmulq_n_f32(v70, vmul_f32(v78, vrsqrts_f32((float32x2_t)v76.u32[0], vmul_f32(v78, v78))).f32[0]);
            v69.i32[3] = v80;
            v72 = v88;
            if (v28)
              goto LABEL_37;
LABEL_35:
            v73 = (uint64_t *)(v81 + 16 * v22);
            v74 = *v73;
            v75 = v73[1];
          }
          v79 = vsubq_f32(v72, vmulq_n_f32(v91, 1.0 - v67));
          v79.i32[3] = v84;
          sub_1B2021194(v22, (float32x4_t *)(v44 + v34), (float32x4_t *)(v89 + v34), v74, v75, v28, v79, v69, v67);
          v26 = v44;
        }
      }
      v33 = v85;
LABEL_13:
      ++v22;
      v34 += 16;
    }
    while (v23 != v22);
  }
  sub_1B1D4DCB4((uint64_t)&v106, a5 | ((HIDWORD(a5) & 1) << 32), (void (*)(_QWORD *))sub_1B1C39120);
  return sub_1B1C390B0((uint64_t)&v106);
}

uint64_t sub_1B1FCA0A4(__int128 *a1, __int128 *a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, float a7)
{
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  float32x4_t v26;
  float32x4_t v27;
  int v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  uint64_t v34;
  float32x4_t *v35;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  float32x4_t v44;
  int32x4_t v45;
  float32x2_t v46;
  float32x2_t v47;
  float32x4_t v48;
  float32x4_t v49;
  int32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  __int32 v54;
  float32x4_t v55;
  int32x4_t v56;
  int v57;
  float32x4_t v58;
  float32x4_t v59;
  float v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  uint64_t v67;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float v75;
  __int32 v76;
  __int32 v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  char v82;
  float32x4_t v83;
  uint64_t v84;
  float32x4_t v85;
  __int32 v87;
  float32x4_t v89;
  char v90;
  __int128 v91;
  uint64_t v92;
  ValueMetadata *v93;
  _UNKNOWN **v94;
  __int128 v95;
  _QWORD v96[6];
  float v97;
  char v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  _QWORD *v106;
  uint64_t v107;
  uint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  uint64_t v111;

  v12 = (uint64_t *)*((_QWORD *)a1 + 11);
  v11 = *((_QWORD *)a1 + 12);
  v13 = *((_QWORD *)a1 + 13);
  v15 = *((_QWORD *)a1 + 1);
  v14 = *((_QWORD *)a1 + 2);
  v16 = sub_1B1A12038((uint64_t)&type metadata for Position, (uint64_t)&off_1E63C2398, v12, v11, v13, v14);
  v84 = sub_1B1A12038((uint64_t)&type metadata for Velocity, (uint64_t)&off_1E63C30D0, v12, v11, v13, v14);
  v67 = sub_1B1B47B28();
  v82 = v17;
  v91 = *a2;
  v95 = *(_OWORD *)(a3 + 192);
  v18 = a1[3];
  v101 = a1[2];
  v19 = *a1;
  v100 = a1[1];
  v99 = v19;
  v105 = a1[6];
  v20 = a1[4];
  v104 = a1[5];
  v103 = v20;
  v93 = &type metadata for CollisionProperties;
  v94 = &off_1E6397A08;
  v92 = *((_QWORD *)a2 + 2);
  v21 = *(_QWORD *)(a4 + 16);
  v102 = v18;
  v22 = *((_QWORD *)a1 + 6);
  v23 = *((_QWORD *)a1 + 7);
  v24 = *(_QWORD *)(v14 + 32);
  swift_retain();
  v106 = ecs_stack_allocator_allocate(v24, 8 * (v23 - v22), 8);
  v107 = v23 - v22;
  v108 = 0;
  sub_1B19FA198((uint64_t)&v91, (uint64_t)v96);
  v97 = a7;
  v96[5] = v21;
  sub_1B1A10AA4(*(_QWORD *)(v15 + 40), (uint64_t)&type metadata for Anchored, &v90);
  v98 = v90;
  swift_retain();
  v25 = ecs_stack_allocator_allocate(v24, 80 * (v23 - v22), 16);
  swift_release();
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v91);
  v109 = v25;
  v110 = v23 - v22;
  v111 = 0;
  if (v23 != v22)
  {
    v29 = v82 & 1;
    v30 = *(float32x4_t *)a3;
    v31 = *(float32x4_t *)(a3 + 16);
    v32 = *(float32x4_t *)(a3 + 32);
    v33 = *(float32x4_t *)(a3 + 48);
    v34 = 16 * v22;
    v35 = (float32x4_t *)(v84 + 16 * v22);
    __asm { FMOV            V16.4S, #1.0 }
    v81 = v31;
    v83 = *(float32x4_t *)a3;
    v79 = v33;
    v80 = v32;
    v78 = _Q16;
    do
    {
      v54 = v26.i32[3];
      v55 = vmlaq_n_f32(vmlaq_lane_f32(vmlaq_laneq_f32(v33, v32, *(float32x4_t *)(v16 + 16 * v22), 2), v31, *(float32x2_t *)(v16 + 16 * v22), 1), v30, COERCE_FLOAT(*(_OWORD *)(v16 + 16 * v22)));
      v26 = vabsq_f32(v55);
      v26.i32[3] = v54;
      v56 = vcgtq_f32(_Q16, v26);
      v57 = v56.i32[1];
      if (v56.i32[1] <= v56.i32[0])
        v57 = v56.i32[0];
      if (v56.i32[2] > v57)
        v57 = v56.i32[2];
      if (v57 < 0)
      {
        v58.i64[0] = 0x3F0000003F000000;
        v58.i64[1] = 0x3F0000003F000000;
        v59 = vaddq_f32(vmulq_f32(v55, v58), v58);
        v87 = v26.i32[3];
        v89 = v59;
        v59.i32[3] = v27.i32[3];
        v85 = v59;
        v60 = (*(float (**)(uint64_t))(a6 + 72))(a6);
        if (v60 < 0.0)
        {
          v75 = v60;
          *(double *)v61.i64 = (*(double (**)(uint64_t, float32x4_t))(a6 + 72))(a6, vaddq_f32(v89, (float32x4_t)xmmword_1B22AB6E0));
          v74 = v61;
          *(double *)v62.i64 = (*(double (**)(uint64_t, float32x4_t))(a6 + 72))(a6, vaddq_f32(v89, (float32x4_t)xmmword_1B22AB6F0));
          v73 = v62;
          *(double *)v63.i64 = (*(double (**)(uint64_t, float32x4_t))(a6 + 72))(a6, vaddq_f32(v89, (float32x4_t)xmmword_1B22AB700));
          v72 = v63;
          *(double *)v64.i64 = (*(double (**)(uint64_t, float32x4_t))(a6 + 72))(a6, vaddq_f32(v89, (float32x4_t)xmmword_1B22AB710));
          v71 = v64;
          *(double *)v65.i64 = (*(double (**)(uint64_t, float32x4_t))(a6 + 72))(a6, vaddq_f32(v89, (float32x4_t)xmmword_1B22AB720));
          v70 = v65;
          (*(void (**)(uint64_t, float32x4_t))(a6 + 72))(a6, vaddq_f32(v89, (float32x4_t)xmmword_1B22AB730));
          if (v29)
          {
            v42 = 0;
            v43 = 0;
          }
          else
          {
            v41 = (uint64_t *)(v67 + 16 * v22);
            v42 = *v41;
            v43 = v41[1];
          }
          v44 = (float32x4_t)vzip1q_s32((int32x4_t)vsubq_f32(v74, v73), (int32x4_t)vsubq_f32(v72, v71));
          v44.i32[2] = vsubq_f32(v70, v66).u32[0];
          v45 = (int32x4_t)vmulq_f32(v44, v44);
          v45.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v45, 2), vadd_f32(*(float32x2_t *)v45.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v45.i8, 1))).u32[0];
          v46 = vrsqrte_f32((float32x2_t)v45.u32[0]);
          v47 = vmul_f32(v46, vrsqrts_f32((float32x2_t)v45.u32[0], vmul_f32(v46, v46)));
          v48 = vmulq_n_f32(vmulq_n_f32(v44, vmul_f32(v47, vrsqrts_f32((float32x2_t)v45.u32[0], vmul_f32(v47, v47))).f32[0]), fabsf(v75));
          v49 = vmlaq_n_f32(vmlaq_lane_f32(vmulq_laneq_f32(*(float32x4_t *)(a3 + 96), v48, 2), *(float32x4_t *)(a3 + 80), *(float32x2_t *)v48.f32, 1), *(float32x4_t *)(a3 + 64), v48.f32[0]);
          v50 = (int32x4_t)vmulq_f32(v49, v49);
          v50.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v50, 2), vadd_f32(*(float32x2_t *)v50.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v50.i8, 1))).u32[0];
          *(float32x2_t *)v48.f32 = vrsqrte_f32((float32x2_t)v50.u32[0]);
          *(float32x2_t *)v48.f32 = vmul_f32(*(float32x2_t *)v48.f32, vrsqrts_f32((float32x2_t)v50.u32[0], vmul_f32(*(float32x2_t *)v48.f32, *(float32x2_t *)v48.f32)));
          v51 = vmulq_n_f32(v49, vmul_f32(*(float32x2_t *)v48.f32, vrsqrts_f32((float32x2_t)v50.u32[0], vmul_f32(*(float32x2_t *)v48.f32, *(float32x2_t *)v48.f32))).f32[0]);
          v51.i32[3] = v76;
          v52 = vaddq_f32(*(float32x4_t *)(v16 + 16 * v22), v49);
          v52.i32[3] = v77;
          sub_1B2021194(v22, (float32x4_t *)(v16 + v34), v35, v42, v43, v29, v52, v51, 1.0);
        }
        v31 = v81;
        v30 = v83;
        v33 = v79;
        v32 = v80;
        _Q16 = v78;
        v53 = v85;
        v26.i32[3] = v87;
      }
      else
      {
        v53 = v27;
      }
      ++v22;
      ++v35;
      v34 += 16;
      v27 = v53;
    }
    while (v23 != v22);
  }
  sub_1B1D4DCB4((uint64_t)&v95, a5 | ((HIDWORD(a5) & 1) << 32), (void (*)(_QWORD *))sub_1B1D4FE74);
  return sub_1B1C390B0((uint64_t)&v95);
}

uint64_t sub_1B1FCA5A8(__int128 *a1, __int128 *a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, float a7, float32x4_t a8, int32x4_t a9, int32x4_t a10)
{
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  float32x4_t v28;
  float32x4_t v29;
  int v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  uint64_t v36;
  float32x4_t *v37;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  int32x4_t v46;
  float32x2_t v47;
  float32x2_t v48;
  float32x4_t v49;
  float32x4_t v50;
  int32x4_t v51;
  float32x2_t v52;
  float32x2_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  __int32 v57;
  float32x4_t v58;
  int32x4_t v59;
  int v60;
  float32x4_t v61;
  __n128 v62;
  float v63;
  float v64;
  float32x4_t v65;
  uint64_t v67;
  __int32 v69;
  __int32 v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  char v75;
  float32x4_t v76;
  uint64_t v81;
  __int32 v82;
  float32x4_t v84;
  char v85;
  __int128 v86;
  uint64_t v87;
  ValueMetadata *v88;
  _UNKNOWN **v89;
  __int128 v90;
  _QWORD v91[6];
  float v92;
  char v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  _QWORD *v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t v106;

  v14 = (uint64_t *)*((_QWORD *)a1 + 11);
  v13 = *((_QWORD *)a1 + 12);
  v15 = *((_QWORD *)a1 + 13);
  v17 = *((_QWORD *)a1 + 1);
  v16 = *((_QWORD *)a1 + 2);
  v18 = sub_1B1A12038((uint64_t)&type metadata for Position, (uint64_t)&off_1E63C2398, v14, v13, v15, v16);
  v81 = sub_1B1A12038((uint64_t)&type metadata for Velocity, (uint64_t)&off_1E63C30D0, v14, v13, v15, v16);
  v67 = sub_1B1B47B28();
  v75 = v19;
  v86 = *a2;
  v90 = *(_OWORD *)(a3 + 192);
  v20 = a1[3];
  v96 = a1[2];
  v21 = *a1;
  v95 = a1[1];
  v94 = v21;
  v100 = a1[6];
  v22 = a1[4];
  v99 = a1[5];
  v98 = v22;
  v88 = &type metadata for CollisionProperties;
  v89 = &off_1E6397A08;
  v87 = *((_QWORD *)a2 + 2);
  v23 = *(_QWORD *)(a4 + 16);
  v97 = v20;
  v24 = *((_QWORD *)a1 + 6);
  v25 = *((_QWORD *)a1 + 7);
  v26 = *(_QWORD *)(v16 + 32);
  swift_retain();
  v101 = ecs_stack_allocator_allocate(v26, 8 * (v25 - v24), 8);
  v102 = v25 - v24;
  v103 = 0;
  sub_1B19FA198((uint64_t)&v86, (uint64_t)v91);
  v92 = a7;
  v91[5] = v23;
  sub_1B1A10AA4(*(_QWORD *)(v17 + 40), (uint64_t)&type metadata for Anchored, &v85);
  v93 = v85;
  swift_retain();
  v27 = ecs_stack_allocator_allocate(v26, 80 * (v25 - v24), 16);
  swift_release();
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v86);
  v104 = v27;
  v105 = v25 - v24;
  v106 = 0;
  if (v25 != v24)
  {
    v31 = v75 & 1;
    v32 = *(float32x4_t *)a3;
    v33 = *(float32x4_t *)(a3 + 16);
    v34 = *(float32x4_t *)(a3 + 32);
    v35 = *(float32x4_t *)(a3 + 48);
    v36 = 16 * v24;
    v37 = (float32x4_t *)(v81 + 16 * v24);
    __asm { FMOV            V16.4S, #1.0 }
    v74 = v33;
    v76 = *(float32x4_t *)a3;
    v72 = v35;
    v73 = v34;
    v71 = _Q16;
    do
    {
      v57 = v28.i32[3];
      v58 = vmlaq_n_f32(vmlaq_lane_f32(vmlaq_laneq_f32(v35, v34, *(float32x4_t *)(v18 + 16 * v24), 2), v33, *(float32x2_t *)(v18 + 16 * v24), 1), v32, COERCE_FLOAT(*(_OWORD *)(v18 + 16 * v24)));
      v28 = vabsq_f32(v58);
      v28.i32[3] = v57;
      v59 = vcgtq_f32(_Q16, v28);
      v60 = v59.i32[1];
      if (v59.i32[1] <= v59.i32[0])
        v60 = v59.i32[0];
      if (v59.i32[2] > v60)
        v60 = v59.i32[2];
      if (v60 < 0)
      {
        v61.i64[0] = 0x3F0000003F000000;
        v61.i64[1] = 0x3F0000003F000000;
        v62 = (__n128)vaddq_f32(vmulq_f32(v58, v61), v61);
        v62.n128_u32[3] = v29.u32[3];
        v82 = v28.i32[3];
        v84 = (float32x4_t)v62;
        v63 = sub_1B2141074(a6, v62, a8, a9, a10);
        if (v63 < 0.0)
        {
          v64 = v63;
          *(double *)v65.i64 = sub_1B21412C8(a6, v84, a8, a9, a10);
          if (v31)
          {
            v44 = 0;
            v45 = 0;
          }
          else
          {
            v43 = (uint64_t *)(v67 + 16 * v24);
            v44 = *v43;
            v45 = v43[1];
          }
          v46 = (int32x4_t)vmulq_f32(v65, v65);
          v46.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v46, 2), vadd_f32(*(float32x2_t *)v46.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v46.i8, 1))).u32[0];
          v47 = vrsqrte_f32((float32x2_t)v46.u32[0]);
          v48 = vmul_f32(v47, vrsqrts_f32((float32x2_t)v46.u32[0], vmul_f32(v47, v47)));
          v49 = vmulq_n_f32(vmulq_n_f32(v65, vmul_f32(v48, vrsqrts_f32((float32x2_t)v46.u32[0], vmul_f32(v48, v48))).f32[0]), fabsf(v64));
          v50 = vmlaq_n_f32(vmlaq_lane_f32(vmulq_laneq_f32(*(float32x4_t *)(a3 + 96), v49, 2), *(float32x4_t *)(a3 + 80), *(float32x2_t *)v49.f32, 1), *(float32x4_t *)(a3 + 64), v49.f32[0]);
          v51 = (int32x4_t)vmulq_f32(v50, v50);
          v51.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v51, 2), vadd_f32(*(float32x2_t *)v51.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v51.i8, 1))).u32[0];
          v52 = vrsqrte_f32((float32x2_t)v51.u32[0]);
          v53 = vmul_f32(v52, vrsqrts_f32((float32x2_t)v51.u32[0], vmul_f32(v52, v52)));
          v54 = vmulq_n_f32(v50, vmul_f32(v53, vrsqrts_f32((float32x2_t)v51.u32[0], vmul_f32(v53, v53))).f32[0]);
          v54.i32[3] = v69;
          v55 = vaddq_f32(*(float32x4_t *)(v18 + 16 * v24), v50);
          v55.i32[3] = v70;
          sub_1B2021194(v24, (float32x4_t *)(v18 + v36), v37, v44, v45, v31, v55, v54, 1.0);
        }
        v33 = v74;
        v32 = v76;
        v35 = v72;
        v34 = v73;
        _Q16 = v71;
        v28.i32[3] = v82;
        v56 = v84;
      }
      else
      {
        v56 = v29;
      }
      ++v24;
      ++v37;
      v36 += 16;
      v29 = v56;
    }
    while (v25 != v24);
  }
  sub_1B1D4DCB4((uint64_t)&v90, a5 | ((HIDWORD(a5) & 1) << 32), (void (*)(_QWORD *))sub_1B1D4FE74);
  return sub_1B1C390B0((uint64_t)&v90);
}

void sub_1B1FCA9B0(int a1, uint64_t a2, void **a3, float a4, float a5, float a6, float a7, float32x4_t a8, float32x4_t a9, float32x4_t a10, float32x4_t a11)
{
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unsigned int *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  os_unfair_lock_s *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  BOOL v41;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v56;
  os_unfair_lock_s *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  char v62;
  uint64_t *v63;
  uint64_t *v64;
  uint64_t v65;
  int v66;
  int v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  float32x2_t *v72;
  float32x2_t *v73;
  unsigned int v74;
  float v75;
  float v76;
  unsigned int v77;
  void *v78;
  uint64_t ObjectType;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  BOOL v108;
  BOOL v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  char v113;
  uint64_t v114;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  _QWORD *v120;
  uint64_t v121;
  uint64_t v123;
  os_unfair_lock_s *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  char v129;
  uint64_t *v130;
  uint64_t *v131;
  uint64_t v132;
  int v133;
  signed int v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  _QWORD *v141;
  uint64_t v142;
  uint64_t v143;
  float32x2_t *v144;
  float32x2_t *v145;
  unsigned int v146;
  float v147;
  float v148;
  unsigned int v149;
  void *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  char v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  __int32 v167;
  float v168;
  simd_float4 v169;
  simd_float4 v170;
  simd_float4 v171;
  simd_float4 v172;
  simd_float4 v173;
  simd_float4 v174;
  simd_float4 v175;
  simd_float4 v176;
  float32x4_t v177;
  float32x4_t v178;
  simd_float4 v179;
  simd_float4 v180;
  __int32 v181;
  void **v187;
  uint64_t v188;
  uint64_t v189;
  simd_float4 v190;
  simd_float4 v191;
  uint64_t v192;
  uint64_t v193;
  simd_float4 v194;
  uint64_t v195;
  simd_float4 v196;
  _QWORD *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  _QWORD *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  float32x4_t v205;
  simd_float4 v206;
  uint64_t v207;
  int v208;
  uint64_t v209;
  _QWORD *v210;
  uint64_t v211;
  float32x4_t v212;
  simd_float4 v213;
  uint64_t v214;
  uint64_t v215;
  __int128 v216;
  __int128 v217;
  uint64_t v218;
  __int128 v219;
  simd_float4 v220;
  simd_float4 v221;
  simd_float4 v222;
  simd_float4 v223;
  simd_float4 v224;
  simd_float4 v225;
  simd_float4 v226;
  float32x4_t v227;
  simd_float4 v228;
  float v229;
  float v230;
  uint64_t v231[8];
  _OWORD v232[2];
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  _QWORD *v237;
  uint64_t v238;
  _OWORD v239[2];
  uint64_t v240;
  __int128 v241;
  __int128 v242;
  _OWORD v243[6];
  int v244;
  _BYTE v245[40];
  _OWORD v246[2];
  uint64_t v247;
  unsigned int v248;
  char v249;
  simd_float4x4 v250;
  simd_float4x4 v251;
  simd_float4x4 v252;
  simd_float4x4 v253;

  if (qword_1EEF574F0 != -1)
    swift_once();
  v246[0] = xmmword_1EEFD57D8;
  v246[1] = unk_1EEFD57E8;
  v247 = qword_1EEFD57F8;
  v17 = *((_OWORD *)a3 + 5);
  v243[3] = *((_OWORD *)a3 + 6);
  v18 = *((_OWORD *)a3 + 8);
  v243[4] = *((_OWORD *)a3 + 7);
  v243[5] = v18;
  v19 = *((_OWORD *)a3 + 2);
  v241 = *((_OWORD *)a3 + 1);
  v242 = v19;
  v20 = *((_OWORD *)a3 + 4);
  v187 = a3;
  v243[0] = *((_OWORD *)a3 + 3);
  v243[1] = v20;
  v243[2] = v17;
  sub_1B1BE9FDC((int *)v243 + 2, (uint64_t)&v244);
  sub_1B1BE9FDC(&v244, (uint64_t)&v248);
  if (v249)
    v21 = 0x200000000;
  else
    v21 = v248;
  sub_1B1E8FCE4(a2, (uint64_t)v246, v21, v231);
  sub_1B1FCD4B0((uint64_t)v231, (uint64_t)v232, (uint64_t)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult, (uint64_t (*)(_QWORD, uint64_t, uint64_t))sub_1B19F900C);
  if (*(_QWORD *)&v232[0])
  {
    if (v238 >= 1)
    {
      v200 = v235;
      if (v235)
      {
        v209 = v237[4];
        v208 = *(unsigned __int8 *)(v236 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
        v239[0] = v232[0];
        v239[1] = v232[1];
        v198 = v234;
        v199 = (uint64_t)(v237 + 6);
        v240 = v233;
        v166 = OBJC_IVAR____TtC3VFX13EntityManager_renderer;
        v22 = (_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
        v189 = OBJC_IVAR____TtC3VFX13EntityManager_commandQueues;
        v210 = v237;
        v197 = v237 + 8;
        v168 = a7 * 0.5;
        swift_retain();
        swift_retain();
        swift_retain();
        v23 = 0;
        v188 = a2;
        v201 = v22;
        while (1)
        {
          v24 = (unsigned int *)(v198 + 48 * v23);
          v25 = *v24;
          v203 = v24[1];
          v27 = (uint64_t *)*((_QWORD *)v24 + 2);
          v26 = *((_QWORD *)v24 + 3);
          v28 = *((_QWORD *)v24 + 5);
          v211 = *((_QWORD *)v24 + 4);
          v207 = v23;
          if (v208)
          {
            v29 = *(os_unfair_lock_s **)(v28 + 376);
            swift_retain();
            os_unfair_lock_lock(v29);
            os_unfair_lock_lock(*(os_unfair_lock_t *)(v28 + 344));
          }
          else
          {
            swift_retain();
          }
          ecs_stack_allocator_push_snapshot(v209);
          sub_1B1FCD4B0(v199, (uint64_t)v245, (uint64_t)&qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext, (uint64_t (*)(_QWORD, uint64_t, uint64_t))sub_1B19F900C);
          v30 = v210[4];
          v31 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v28 + 40) + 16) + 32) + 16) + 1;
          v214 = v28;
          swift_retain();
          v210[6] = ecs_stack_allocator_allocate(v30, 48 * v31, 8);
          v210[7] = v31;
          v197[1] = 0;
          v197[2] = 0;
          *v197 = 0;
          swift_release();
          v215 = sub_1B1A12038((uint64_t)&type metadata for ParticleSDFCollider, (uint64_t)&off_1E6399358, v27, v26, v211, (uint64_t)v210);
          v202 = sub_1B1A12038((uint64_t)&type metadata for WorldTransform, (uint64_t)&off_1E6382C00, v27, v26, v211, (uint64_t)v210);
          v32 = sub_1B1A12038((uint64_t)&type metadata for LastFrameWorldTransform, (uint64_t)&off_1E63AA960, v27, v26, v211, (uint64_t)v210);
          if (v27)
          {
            if (v211)
            {
              v33 = v211;
              v192 = v32;
              v34 = 0;
              v35 = v215;
              do
              {
                v38 = v35 + 32 * v34;
                v39 = *(unsigned int *)(v38 + 28);
                v40 = *(int *)(v38 + 24);
                v41 = (_DWORD)v40 == -1 && (_DWORD)v39 == 0;
                if (!v41 && (v40 & 0x80000000) == 0 && v22[1] > v40)
                {
                  v42 = (_DWORD)v39 == -1 || *(_DWORD *)(*v22 + 12 * (int)v40 + 8) == (_DWORD)v39;
                  if (!v42
                    || (v43 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 80)
                                                    + 8 * *(__int16 *)(*v22 + 12 * (int)v40 + 6)
                                                    + 32)
                                        + 16),
                        v44 = *(_QWORD *)(v43 + 128),
                        !*(_QWORD *)(v44 + 16))
                    || (v45 = sub_1B1DC3AC8((uint64_t)&type metadata for Tombstone), v35 = v215, (v46 & 1) == 0)
                    || *(ValueMetadata **)(*(_QWORD *)(v43 + 24)
                                         + 16 * *(_QWORD *)(*(_QWORD *)(v44 + 56) + 8 * v45)
                                         + 32) != &type metadata for Tombstone)
                  {
                    v47 = *v22 + 12 * (int)v40;
                    if ((_DWORD)v39 == -1 || *(_DWORD *)(v47 + 8) == (_DWORD)v39)
                    {
                      v49 = *(__int16 *)(v47 + 4);
                      v50 = *(_QWORD *)(*(_QWORD *)(a2 + 136) + 8 * *(int *)(*v22 + 12 * (int)v40) + 32);
                      v51 = *(_QWORD *)(v50 + 48);
                      v52 = *(_QWORD *)(v51 + 16);
                      if (v52)
                      {
                        v53 = (_QWORD *)(v51 + 56);
                        while ((ValueMetadata *)*(v53 - 3) != &type metadata for TextureGPURuntime)
                        {
                          v53 += 5;
                          if (!--v52)
                            goto LABEL_44;
                        }
                        v70 = *(_QWORD *)(*(_QWORD *)(v50 + 128) + *v53 + 8 * v49);
                        if (v70)
                        {
                          swift_unknownObjectRetain();
                          v71 = v215 + 32 * v34;
                          if ((*(_DWORD *)(v71 + 20) & a1) != 0)
                          {
                            v72 = (float32x2_t *)(v202 + (v34 << 6));
                            v73 = (float32x2_t *)(v192 + (v34 << 6));
                            *(float *)&v74 = fminf(fmaxf(*(float *)(v71 + 8) + a5, 0.0), 1.0);
                            v75 = 1.0 - fminf(fmaxf(*(float *)(v71 + 12) + a6, 0.0), 1.0);
                            v76 = fminf(fmaxf(*(float *)(v71 + 4) + a4, 0.0), 1.0);
                            v250.columns[0] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a8, COERCE_FLOAT(*(_OWORD *)v72->f32)), a9, *v72, 1), a10, *(float32x4_t *)v72->f32, 2), a11, *(float32x4_t *)v72->f32, 3);
                            v194 = v250.columns[0];
                            v250.columns[1] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a8, COERCE_FLOAT(*(_OWORD *)v72[2].f32)), a9, v72[2], 1), a10, *(float32x4_t *)v72[2].f32, 2), a11, *(float32x4_t *)v72[2].f32, 3);
                            v190 = v250.columns[1];
                            v250.columns[2] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a8, COERCE_FLOAT(*(_OWORD *)v72[4].f32)), a9, v72[4], 1), a10, *(float32x4_t *)v72[4].f32, 2), a11, *(float32x4_t *)v72[4].f32, 3);
                            v177 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a8, COERCE_FLOAT(*(_OWORD *)v72[6].f32)), a9, v72[6], 1), a10, *(float32x4_t *)v72[6].f32, 2), a11, *(float32x4_t *)v72[6].f32, 3);
                            v179 = v250.columns[2];
                            v250.columns[3] = (simd_float4)v177;
                            v205 = vsubq_f32(vaddq_f32(v177, vmlaq_f32(vmlaq_f32(vmulq_f32((float32x4_t)v250.columns[0], (float32x4_t)0), (float32x4_t)0, (float32x4_t)v250.columns[1]), (float32x4_t)0, (float32x4_t)v250.columns[2])), vaddq_f32(vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a8, COERCE_FLOAT(*(_OWORD *)v73[6].f32)), a9, v73[6], 1), a10, *(float32x4_t *)v73[6].f32,
                                           2),
                                         a11,
                                         *(float32x4_t *)v73[6].f32,
                                         3),
                                       vmlaq_f32(vmlaq_f32(vmulq_f32(vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a8, COERCE_FLOAT(*(_OWORD *)v73->f32)), a9, *v73, 1), a10, *(float32x4_t *)v73->f32, 2), a11, *(float32x4_t *)v73->f32, 3), (float32x4_t)0), (float32x4_t)0, vmlaq_laneq_f32(vmlaq_laneq_f32(
                                               vmlaq_lane_f32(vmulq_n_f32(a8, COERCE_FLOAT(*(_OWORD *)v73[2].f32)), a9, v73[2], 1), a10, *(float32x4_t *)v73[2].f32, 2), a11, *(float32x4_t *)v73[2].f32, 3)), (float32x4_t)0, vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a8, COERCE_FLOAT(*(_OWORD *)v73[4].f32)), a9, v73[4], 1), a10,
                                             *(float32x4_t *)v73[4].f32,
                                             2),
                                           a11,
                                           *(float32x4_t *)v73[4].f32,
                                           3))));
                            v251 = __invert_f4(v250);
                            v173 = v251.columns[1];
                            v175 = v251.columns[0];
                            v169 = v251.columns[3];
                            v171 = v251.columns[2];
                            v251.columns[1] = (simd_float4)v205;
                            v251.columns[1].i32[3] = v181;
                            v206 = v251.columns[1];
                            sub_1B1E52E10();
                            *(_QWORD *)&v219 = __PAIR64__(v74, v77);
                            *((float *)&v219 + 2) = v75;
                            v220 = v175;
                            v221 = v173;
                            v222 = v171;
                            v223 = v169;
                            v224 = v194;
                            v225 = v190;
                            v226 = v179;
                            v227 = v177;
                            v228 = v206;
                            v229 = v76;
                            v230 = v168;
                            v78 = *v187;
                            if (*v187)
                            {
                              ObjectType = swift_getObjectType();
                              type metadata accessor for particle_sdf_collider_uniforms(0);
                              sub_1B1F40E1C((uint64_t)&v219, 1, ObjectType, v80, v81, v82, v83, v84);
                              objc_msgSend(v78, sel_setTexture_atIndex_, v70, 0);
                            }
                            v85 = v78 == 0;
                            v86 = v241;
                            swift_retain();
                            v87 = *(_QWORD *)&v243[0];
                            sub_1B1B1FC34((uint64_t)v187);
                            sub_1B1FE6FB8(v87, v86, v85, 0, (uint64_t)v187, 0xD000000000000018, 0x80000001B2347210, 0);
                            sub_1B1B1FC88((uint64_t)v187);
                            swift_release();
                            v181 = v206.i32[3];
                          }
                          swift_unknownObjectRelease();
                          v35 = v215;
                        }
                        v33 = v211;
                      }
                      else
                      {
LABEL_44:
                        v54 = v40;
                        if (*(_QWORD *)(v50 + 232) <= v49 && *(_QWORD *)(v50 + 240) > v49)
                        {
                          v56 = **(_QWORD **)(a2 + v189);
                          v57 = *(os_unfair_lock_s **)(v50 + 344);
                          swift_retain();
                          os_unfair_lock_lock(v57);
                          v204 = v56;
                          v58 = *(_QWORD *)(v56 + 32);
                          ecs_stack_allocator_push_snapshot(v58);
                          v59 = *(_QWORD *)(*(_QWORD *)(v50 + 40) + 16);
                          v60 = *(_QWORD *)(v59 + 128);
                          if (*(_QWORD *)(v60 + 16)
                            && (v61 = sub_1B1DC3AC8((uint64_t)&type metadata for TextureLoadingOptions), (v62 & 1) != 0)
                            && *(ValueMetadata **)(*(_QWORD *)(v59 + 24)
                                                 + 16 * *(_QWORD *)(*(_QWORD *)(v60 + 56) + 8 * v61)
                                                 + 32) == &type metadata for TextureLoadingOptions)
                          {
                            swift_retain();
                            a2 = v188;
                            v22 = v201;
                            v54 = v40;
                          }
                          else
                          {
                            swift_retain();
                            v63 = ecs_stack_allocator_allocate(v58, 8, 8);
                            v64 = v63;
                            *v63 = v49;
                            v65 = *(_QWORD *)(v50 + 192);
                            if (v65)
                              sub_1B1FE2290(v63, 1, 1, (uint64_t)&type metadata for TextureLoadingOptions, (uint64_t)&off_1E63A6E90, 1, v65, *(_QWORD *)(v50 + 200), *(_QWORD *)(v50 + 208));
                            sub_1B1FE26A8(*(_QWORD *)(v50 + 40), v50, v64, 1, 1);
                            v66 = *(_DWORD *)(v50 + 24);
                            swift_retain();
                            v221.i64[0] = 0;
                            v219 = 0u;
                            v220 = 0u;
                            v218 = 0;
                            v216 = 0u;
                            v217 = 0u;
                            v67 = sub_1B1DA4ED8(v66, (uint64_t)&type metadata for TextureLoadingOptions, (uint64_t)&off_1E63A6E90, 0, 0, (uint64_t)&v219, (uint64_t)&v216);
                            swift_release();
                            sub_1B1A12E98((uint64_t)&v216);
                            sub_1B1A12E98((uint64_t)&v219);
                            v22 = v201;
                            if ((uint64_t)(*(_QWORD *)(v50 + 240) - *(_QWORD *)(v50 + 232)) < 2)
                            {
                              if (sub_1B1A10B20(v67))
                              {
                                sub_1B1A10BB0(v67);
                              }
                              else
                              {
                                v88 = *(_QWORD *)(v50 + 232);
                                v89 = *(_QWORD *)(v50 + 240);
                                v90 = *(unsigned __int8 *)(v50 + 120);
                                v91 = *(unsigned int *)(v50 + 28);
                                LOBYTE(v219) = *(_BYTE *)(v50 + 32);
                                sub_1B1FD8C68(v88, v89, v67, v90, v91 | ((unint64_t)v219 << 32), 0, 0, 0);
                              }
                            }
                            else
                            {
                              v68 = *(unsigned __int8 *)(v50 + 120);
                              v69 = *(unsigned int *)(v50 + 28);
                              LOBYTE(v219) = *(_BYTE *)(v50 + 32);
                              sub_1B1FD891C(v64, 1, 1, v67, v68, v69 | ((unint64_t)v219 << 32), 0, 0);
                            }
                            v54 = v40;
                            a2 = v188;
                          }
                          sub_1B1FD5BC4(v54 | (v39 << 32), a2);
                          swift_release();
                          ecs_stack_allocator_pop_snapshot(*(_QWORD *)(v204 + 32));
                          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v50 + 344));
                          swift_release();
                          v35 = v215;
                        }
                        v92 = v22[1];
                        v33 = v211;
                        if (v92 > v40)
                        {
                          v93 = *v22 + 12 * (int)v40;
                          v94 = *(__int16 *)(v93 + 4);
                          if ((_DWORD)v39 == -1 || *(_DWORD *)(v93 + 8) == (_DWORD)v39)
                          {
                            v95 = *(_QWORD *)(*(_QWORD *)(a2 + 136) + 8 * *(int *)(*v22 + 12 * (int)v40) + 32);
                            v96 = *(_QWORD *)(v95 + 48);
                            v97 = *(_QWORD *)(v96 + 16);
                            if (v97)
                            {
                              v98 = (_QWORD *)(v96 + 56);
                              while ((ValueMetadata *)*(v98 - 3) != &type metadata for TextureLoadPolicy)
                              {
                                v98 += 5;
                                if (!--v97)
                                  goto LABEL_78;
                              }
                              if (*(_BYTE *)(*(_QWORD *)(v95 + 128) + *v98 + 4 * v94 + 1) == 1)
                              {
                                sub_1B1FE16DC((uint64_t)&type metadata for TextureLoadRequestGPU, (uint64_t)&off_1E63A6CD8, v54 | (v39 << 32));
                                v35 = v215;
                                v92 = v22[1];
                              }
                            }
                          }
                        }
LABEL_78:
                        if (v92 > v40)
                        {
                          v99 = *v22 + 12 * (int)v40;
                          v100 = *(__int16 *)(v99 + 4);
                          if ((_DWORD)v39 == -1 || *(_DWORD *)(v99 + 8) == (_DWORD)v39)
                          {
                            v101 = *(_QWORD *)(*(_QWORD *)(a2 + 136) + 8 * *(int *)(*v22 + 12 * (int)v40) + 32);
                            v102 = *(_QWORD *)(v101 + 48);
                            v103 = *(_QWORD *)(v102 + 16);
                            if (v103)
                            {
                              v104 = v102 + 56;
                              while (*(ValueMetadata **)(v104 - 24) != &type metadata for TextureLoadPolicy)
                              {
                                v104 += 40;
                                if (!--v103)
                                  goto LABEL_20;
                              }
                              if (*(_QWORD *)(a2 + v166))
                                __asm { BR              X9 }
                            }
                          }
                        }
                      }
                    }
                  }
                }
LABEL_20:
                ++v34;
              }
              while (v34 != v33);
LABEL_154:
              v28 = v214;
            }
          }
          else
          {
            v36 = v203;
            if ((_DWORD)v25 != (_DWORD)v203)
            {
              v193 = v32;
              v37 = v215;
              do
              {
                v105 = v37 + 32 * v25;
                v106 = *(unsigned int *)(v105 + 28);
                v107 = *(int *)(v105 + 24);
                v108 = (_DWORD)v107 == -1 && (_DWORD)v106 == 0;
                if (!v108 && (v107 & 0x80000000) == 0 && v22[1] > v107)
                {
                  v109 = (_DWORD)v106 == -1 || *(_DWORD *)(*v22 + 12 * (int)v107 + 8) == (_DWORD)v106;
                  if (!v109
                    || (v110 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 80)
                                                     + 8 * *(__int16 *)(*v22 + 12 * (int)v107 + 6)
                                                     + 32)
                                         + 16),
                        v111 = *(_QWORD *)(v110 + 128),
                        !*(_QWORD *)(v111 + 16))
                    || (v112 = sub_1B1DC3AC8((uint64_t)&type metadata for Tombstone), v37 = v215, (v113 & 1) == 0)
                    || *(ValueMetadata **)(*(_QWORD *)(v110 + 24)
                                         + 16 * *(_QWORD *)(*(_QWORD *)(v111 + 56) + 8 * v112)
                                         + 32) != &type metadata for Tombstone)
                  {
                    v114 = *v22 + 12 * (int)v107;
                    if ((_DWORD)v106 == -1 || *(_DWORD *)(v114 + 8) == (_DWORD)v106)
                    {
                      v116 = *(__int16 *)(v114 + 4);
                      v117 = *(_QWORD *)(*(_QWORD *)(a2 + 136) + 8 * *(int *)(*v22 + 12 * (int)v107) + 32);
                      v118 = *(_QWORD *)(v117 + 48);
                      v119 = *(_QWORD *)(v118 + 16);
                      if (v119)
                      {
                        v120 = (_QWORD *)(v118 + 56);
                        while ((ValueMetadata *)*(v120 - 3) != &type metadata for TextureGPURuntime)
                        {
                          v120 += 5;
                          if (!--v119)
                            goto LABEL_114;
                        }
                        v142 = *(_QWORD *)(*(_QWORD *)(v117 + 128) + *v120 + 8 * v116);
                        if (v142)
                        {
                          swift_unknownObjectRetain();
                          v143 = v215 + 32 * v25;
                          if ((*(_DWORD *)(v143 + 20) & a1) != 0)
                          {
                            v144 = (float32x2_t *)(v202 + (v25 << 6));
                            v145 = (float32x2_t *)(v193 + (v25 << 6));
                            *(float *)&v146 = fminf(fmaxf(*(float *)(v143 + 8) + a5, 0.0), 1.0);
                            v147 = 1.0 - fminf(fmaxf(*(float *)(v143 + 12) + a6, 0.0), 1.0);
                            v148 = fminf(fmaxf(*(float *)(v143 + 4) + a4, 0.0), 1.0);
                            v252.columns[0] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a8, COERCE_FLOAT(*(_OWORD *)v144->f32)), a9, *v144, 1), a10, *(float32x4_t *)v144->f32, 2), a11, *(float32x4_t *)v144->f32, 3);
                            v196 = v252.columns[0];
                            v252.columns[1] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a8, COERCE_FLOAT(*(_OWORD *)v144[2].f32)), a9, v144[2], 1), a10, *(float32x4_t *)v144[2].f32, 2), a11, *(float32x4_t *)v144[2].f32, 3);
                            v191 = v252.columns[1];
                            v252.columns[2] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a8, COERCE_FLOAT(*(_OWORD *)v144[4].f32)), a9, v144[4], 1), a10, *(float32x4_t *)v144[4].f32, 2), a11, *(float32x4_t *)v144[4].f32, 3);
                            v178 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a8, COERCE_FLOAT(*(_OWORD *)v144[6].f32)), a9, v144[6], 1), a10, *(float32x4_t *)v144[6].f32, 2), a11, *(float32x4_t *)v144[6].f32, 3);
                            v180 = v252.columns[2];
                            v252.columns[3] = (simd_float4)v178;
                            v212 = vsubq_f32(vaddq_f32(v178, vmlaq_f32(vmlaq_f32(vmulq_f32((float32x4_t)v252.columns[0], (float32x4_t)0), (float32x4_t)0, (float32x4_t)v252.columns[1]), (float32x4_t)0, (float32x4_t)v252.columns[2])), vaddq_f32(vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a8, COERCE_FLOAT(*(_OWORD *)v145[6].f32)), a9, v145[6], 1), a10, *(float32x4_t *)v145[6].f32,
                                           2),
                                         a11,
                                         *(float32x4_t *)v145[6].f32,
                                         3),
                                       vmlaq_f32(vmlaq_f32(vmulq_f32(vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a8, COERCE_FLOAT(*(_OWORD *)v145->f32)), a9, *v145, 1), a10, *(float32x4_t *)v145->f32, 2), a11, *(float32x4_t *)v145->f32, 3), (float32x4_t)0), (float32x4_t)0, vmlaq_laneq_f32(vmlaq_laneq_f32(
                                               vmlaq_lane_f32(vmulq_n_f32(a8, COERCE_FLOAT(*(_OWORD *)v145[2].f32)), a9, v145[2], 1), a10, *(float32x4_t *)v145[2].f32, 2), a11, *(float32x4_t *)v145[2].f32, 3)), (float32x4_t)0, vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a8, COERCE_FLOAT(*(_OWORD *)v145[4].f32)), a9, v145[4], 1), a10,
                                             *(float32x4_t *)v145[4].f32,
                                             2),
                                           a11,
                                           *(float32x4_t *)v145[4].f32,
                                           3))));
                            v253 = __invert_f4(v252);
                            v174 = v253.columns[1];
                            v176 = v253.columns[0];
                            v170 = v253.columns[3];
                            v172 = v253.columns[2];
                            v253.columns[1] = (simd_float4)v212;
                            v253.columns[1].i32[3] = v167;
                            v213 = v253.columns[1];
                            sub_1B1E52E10();
                            *(_QWORD *)&v219 = __PAIR64__(v146, v149);
                            *((float *)&v219 + 2) = v147;
                            v220 = v176;
                            v221 = v174;
                            v222 = v172;
                            v223 = v170;
                            v224 = v196;
                            v225 = v191;
                            v226 = v180;
                            v227 = v178;
                            v228 = v213;
                            v229 = v148;
                            v230 = v168;
                            v150 = *v187;
                            if (*v187)
                            {
                              v151 = swift_getObjectType();
                              type metadata accessor for particle_sdf_collider_uniforms(0);
                              sub_1B1F40E1C((uint64_t)&v219, 1, v151, v152, v153, v154, v155, v156);
                              objc_msgSend(v150, sel_setTexture_atIndex_, v142, 0);
                            }
                            v157 = v150 == 0;
                            v158 = v241;
                            swift_retain();
                            v159 = *(_QWORD *)&v243[0];
                            sub_1B1B1FC34((uint64_t)v187);
                            sub_1B1FE6FB8(v159, v158, v157, 0, (uint64_t)v187, 0xD000000000000018, 0x80000001B2347210, 0);
                            sub_1B1B1FC88((uint64_t)v187);
                            swift_release();
                            v167 = v213.i32[3];
                          }
                          swift_unknownObjectRelease();
                          v22 = v201;
                          v37 = v215;
                        }
                        else
                        {
                          v22 = v201;
                        }
                      }
                      else
                      {
LABEL_114:
                        v121 = v107;
                        if (*(_QWORD *)(v117 + 232) <= v116 && *(_QWORD *)(v117 + 240) > v116)
                        {
                          v123 = **(_QWORD **)(a2 + v189);
                          v124 = *(os_unfair_lock_s **)(v117 + 344);
                          swift_retain();
                          os_unfair_lock_lock(v124);
                          v195 = v123;
                          v125 = *(_QWORD *)(v123 + 32);
                          ecs_stack_allocator_push_snapshot(v125);
                          v126 = *(_QWORD *)(*(_QWORD *)(v117 + 40) + 16);
                          v127 = *(_QWORD *)(v126 + 128);
                          if (*(_QWORD *)(v127 + 16)
                            && (v128 = sub_1B1DC3AC8((uint64_t)&type metadata for TextureLoadingOptions), (v129 & 1) != 0)
                            && *(ValueMetadata **)(*(_QWORD *)(v126 + 24)
                                                 + 16 * *(_QWORD *)(*(_QWORD *)(v127 + 56) + 8 * v128)
                                                 + 32) == &type metadata for TextureLoadingOptions)
                          {
                            swift_retain();
                          }
                          else
                          {
                            swift_retain();
                            v130 = ecs_stack_allocator_allocate(v125, 8, 8);
                            v131 = v130;
                            *v130 = v116;
                            v132 = *(_QWORD *)(v117 + 192);
                            if (v132)
                              sub_1B1FE2290(v130, 1, 1, (uint64_t)&type metadata for TextureLoadingOptions, (uint64_t)&off_1E63A6E90, 1, v132, *(_QWORD *)(v117 + 200), *(_QWORD *)(v117 + 208));
                            sub_1B1FE26A8(*(_QWORD *)(v117 + 40), v117, v131, 1, 1);
                            v133 = *(_DWORD *)(v117 + 24);
                            swift_retain();
                            v221.i64[0] = 0;
                            v219 = 0u;
                            v220 = 0u;
                            v218 = 0;
                            v216 = 0u;
                            v217 = 0u;
                            v134 = sub_1B1DA4ED8(v133, (uint64_t)&type metadata for TextureLoadingOptions, (uint64_t)&off_1E63A6E90, 0, 0, (uint64_t)&v219, (uint64_t)&v216);
                            swift_release();
                            sub_1B1A12E98((uint64_t)&v216);
                            sub_1B1A12E98((uint64_t)&v219);
                            sub_1B1A11BB8(v131, 1, 1, v134);
                          }
                          a2 = v188;
                          v121 = v107;
                          sub_1B1FD5BC4(v107 | (unint64_t)(v106 << 32), v188);
                          swift_release();
                          v36 = v203;
                          ecs_stack_allocator_pop_snapshot(*(_QWORD *)(v195 + 32));
                          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v117 + 344));
                          swift_release();
                          v37 = v215;
                        }
                        v22 = v201;
                        v135 = v201[1];
                        if (v135 > v107)
                        {
                          v136 = *v201 + 12 * (int)v107;
                          v137 = *(__int16 *)(v136 + 4);
                          if ((_DWORD)v106 == -1 || *(_DWORD *)(v136 + 8) == (_DWORD)v106)
                          {
                            v138 = *(_QWORD *)(*(_QWORD *)(a2 + 136) + 8 * *(int *)(*v201 + 12 * (int)v107) + 32);
                            v139 = *(_QWORD *)(v138 + 48);
                            v140 = *(_QWORD *)(v139 + 16);
                            if (v140)
                            {
                              v141 = (_QWORD *)(v139 + 56);
                              while ((ValueMetadata *)*(v141 - 3) != &type metadata for TextureLoadPolicy)
                              {
                                v141 += 5;
                                if (!--v140)
                                  goto LABEL_143;
                              }
                              if (*(_BYTE *)(*(_QWORD *)(v138 + 128) + *v141 + 4 * v137 + 1) == 1)
                              {
                                sub_1B1FE16DC((uint64_t)&type metadata for TextureLoadRequestGPU, (uint64_t)&off_1E63A6CD8, v121 | (v106 << 32));
                                v37 = v215;
                                v135 = v201[1];
                              }
                            }
                          }
                        }
LABEL_143:
                        if (v135 > v107)
                        {
                          v160 = *v201 + 12 * (int)v107;
                          v161 = *(__int16 *)(v160 + 4);
                          if ((_DWORD)v106 == -1 || *(_DWORD *)(v160 + 8) == (_DWORD)v106)
                          {
                            v162 = *(_QWORD *)(*(_QWORD *)(a2 + 136) + 8 * *(int *)(*v201 + 12 * (int)v107) + 32);
                            v163 = *(_QWORD *)(v162 + 48);
                            v164 = *(_QWORD *)(v163 + 16);
                            if (v164)
                            {
                              v165 = v163 + 56;
                              while (*(ValueMetadata **)(v165 - 24) != &type metadata for TextureLoadPolicy)
                              {
                                v165 += 40;
                                if (!--v164)
                                  goto LABEL_90;
                              }
                              if (*(_QWORD *)(a2 + v166))
                                __asm { BR              X9 }
                            }
                          }
                        }
                      }
                    }
                  }
                }
LABEL_90:
                ++v25;
              }
              while (v25 != v36);
              goto LABEL_154;
            }
          }
          sub_1B1F05D48(v210, (unsigned __int16 **)v239, (uint64_t)v245);
          sub_1B1F03804((char *)v28);
          ecs_stack_allocator_pop_snapshot(v209);
          if ((v208 & 1) != 0)
          {
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v28 + 344));
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v28 + 376));
          }
          swift_release();
          v23 = v207 + 1;
          if (v207 + 1 == v200)
          {
            sub_1B19ED748(v231);
            break;
          }
        }
      }
    }
    sub_1B19ED748(v231);
  }
}

uint64_t *sub_1B1FCBEBC(uint64_t *result, float32x2_t *a2, float32x2_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, float a7)
{
  int v7;
  uint64_t *v12;
  float v13;
  float v14;
  float v15;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  __int128 v33;
  int32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  int32x4_t v39;
  float32x4_t v40;
  BOOL v41;
  uint64_t v42;
  unint64_t v43;
  int v44;
  __int128 v45;
  uint64_t v46;
  _QWORD *v47;
  int v48;
  uint64_t v49;
  unsigned int *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  os_unfair_lock_s *v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t i;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  void (*v64)(uint64_t);
  uint64_t v65;
  unint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  _QWORD *v70;
  unint64_t v71;
  uint64_t v72;
  unsigned int v73;
  BOOL v74;
  int v75;
  uint64_t v77;
  _QWORD *v78;
  unint64_t v79;
  uint64_t v80;
  unsigned int v81;
  int v82;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  id v91;
  float32x4_t v92;
  int32x4_t v93;
  int32x4_t v94;
  __int128 v95;
  uint64_t v96;
  _QWORD *v97;
  char v98;
  uint64_t v99;
  unsigned int *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  os_unfair_lock_s *v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t *v113;
  uint64_t v114;
  void (*v115)(uint64_t);
  uint64_t v116;
  BOOL v117;
  unint64_t v118;
  _QWORD *v119;
  uint64_t v120;
  _QWORD *v121;
  unint64_t v122;
  uint64_t v123;
  unsigned int v124;
  int v125;
  uint64_t v127;
  _QWORD *v128;
  unint64_t v129;
  uint64_t v130;
  unsigned int v131;
  int v132;
  uint64_t v134;
  uint64_t v135;
  _QWORD *v136;
  __int128 v137;
  uint64_t v138;
  _QWORD *v139;
  int v140;
  uint64_t v141;
  unsigned int *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  os_unfair_lock_s *v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t *v154;
  uint64_t v155;
  void (*v156)(uint64_t);
  uint64_t v157;
  BOOL v158;
  unint64_t v159;
  _QWORD *v160;
  uint64_t v161;
  _QWORD *v162;
  unint64_t v163;
  uint64_t v164;
  unsigned int v165;
  int v166;
  uint64_t v168;
  _QWORD *v169;
  unint64_t v170;
  uint64_t v171;
  unsigned int v172;
  int v173;
  uint64_t v175;
  uint64_t v176;
  _QWORD *v177;
  int v178;
  uint64_t *v179;
  _QWORD *v180;
  uint64_t v181;
  char v182;
  uint64_t v183;
  uint64_t v184;
  _QWORD *v185;
  _QWORD *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  int v190;
  uint64_t v191;
  int v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  int32x4_t v197;
  uint64_t v198;
  uint64_t v199;
  int32x4_t v200;
  uint64_t v201;
  uint64_t v202;
  float32x4_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  float v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  float v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  float32x4_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  float32x4_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  float32x4_t v233;
  BOOL v234;
  float32x4_t v235;
  uint64_t v236;
  float32x4_t v237;
  uint64_t v238;
  uint64_t v239;
  float32x4_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  float32x4_t v244;
  unsigned __int16 *v245;
  unsigned __int16 *v246;
  unsigned __int16 *v247;
  __int128 v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  float32x4_t v255;
  _QWORD *v256;
  _QWORD *v257;
  _QWORD *v258;
  __int128 v259;
  float v260;
  int v261;
  simd_float4x4 v262;
  float32x4_t v263;
  float32x4_t v264;
  float32x4_t v265;
  float32x4_t v266;
  float32x4_t v267;
  float32x4_t v268;
  float32x4_t v269;
  float32x4_t v270;
  float32x4_t v271;
  __int128 v272;
  __int128 v273;
  __int128 v274;
  __int128 v275;
  __int128 v276;
  __int128 v277;
  __int128 v278;
  int64x2_t v279[7];
  __int128 v280;
  __int128 v281;
  uint64_t v282;
  __int128 v283;
  __int128 v284;
  __int128 v285;
  uint64_t v286;
  _OWORD v287[2];
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  _QWORD *v292;
  uint64_t v293;
  _OWORD v294[2];
  __int128 v295;
  __int128 v296;
  __int128 v297;
  __int128 v298;
  _OWORD v299[3];
  __int128 v300;
  __int128 v301;
  __int128 v302;
  __int128 v303;
  uint64_t v304;
  __int128 v305;
  __int128 v306;
  __int128 v307;
  __int128 v308;
  __int128 v309;
  __int128 v310;
  __int128 v311;
  uint64_t v312;
  __int128 v313;
  _QWORD *v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  _QWORD *v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  __int128 v326;
  __int128 v327;
  uint64_t v328;
  uint64_t v329;
  simd_float4x4 v330;

  v329 = *MEMORY[0x1E0C80C00];
  v7 = *(_DWORD *)(a4 + 84) & *((_DWORD *)result + 5);
  if (v7)
  {
    v12 = result;
    v13 = *((float *)result + 4) + *(float *)(a4 + 80);
    v14 = fminf(fmaxf(*((float *)result + 3) + *(float *)(a4 + 76), 0.0), 1.0);
    v15 = fminf(fmaxf(*((float *)result + 2) + *(float *)(a4 + 72), 0.0), 1.0);
    __asm { FMOV            V4.2S, #1.0 }
    *(float32x2_t *)&v259 = vminnm_f32(vmaxnm_f32(vadd_f32(*(float32x2_t *)result, *(float32x2_t *)(a4 + 64)), 0), _D4);
    *((float *)&v259 + 2) = v15;
    *((float *)&v259 + 3) = 1.0 - v14;
    v260 = v13;
    v261 = v7;
    v20 = *(float32x4_t *)a3[4].f32;
    v21 = *(float32x4_t *)a3[6].f32;
    v22 = *(float32x4_t *)(a4 + 96);
    v23 = *(float32x4_t *)(a4 + 112);
    v24 = *(float32x4_t *)(a4 + 128);
    v25 = *(float32x4_t *)(a4 + 144);
    v26 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v22, COERCE_FLOAT(*(_OWORD *)a2->f32)), v23, *a2, 1), v24, *(float32x4_t *)a2->f32, 2), v25, *(float32x4_t *)a2->f32, 3);
    v27 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v22, COERCE_FLOAT(*(_OWORD *)a2[2].f32)), v23, a2[2], 1), v24, *(float32x4_t *)a2[2].f32, 2), v25, *(float32x4_t *)a2[2].f32, 3);
    v28 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v22, COERCE_FLOAT(*(_OWORD *)a2[4].f32)), v23, a2[4], 1), v24, *(float32x4_t *)a2[4].f32, 2), v25, *(float32x4_t *)a2[4].f32, 3);
    v225 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v22, COERCE_FLOAT(*(_OWORD *)a2[6].f32)), v23, a2[6], 1), v24, *(float32x4_t *)a2[6].f32, 2), v25, *(float32x4_t *)a2[6].f32, 3);
    v255 = vsubq_f32(vaddq_f32(v225, vmlaq_f32(vmlaq_f32(vmulq_f32(v26, (float32x4_t)0), (float32x4_t)0, v27), (float32x4_t)0, v28)), vaddq_f32(vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v22, v21.f32[0]), v23, *(float32x2_t *)v21.f32, 1), v24, v21, 2), v25, v21, 3), vmlaq_f32(vmlaq_f32(vmulq_f32(vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v22, COERCE_FLOAT(*(_OWORD *)a3->f32)), v23, *a3, 1),
                         v24,
                         *(float32x4_t *)a3->f32,
                         2),
                       v25,
                       *(float32x4_t *)a3->f32,
                       3),
                     (float32x4_t)0),
                   (float32x4_t)0,
                   vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v22, COERCE_FLOAT(*(_OWORD *)a3[2].f32)), v23, a3[2], 1), v24, *(float32x4_t *)a3[2].f32, 2), v25, *(float32x4_t *)a3[2].f32, 3)), (float32x4_t)0, vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v22, v20.f32[0]), v23, *(float32x2_t *)v20.f32, 1), v24, v20, 2), v25, v20, 3))));
    v29 = vmulq_f32(v26, v26);
    v30 = vmulq_f32(v27, v27);
    v31 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v30, 2);
    v32 = vmulq_f32(v28, v28);
    v217 = sqrtf(vaddq_f32(v31, vaddq_f32(v30, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v30.f32, 1))).f32[0]);
    v221 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v29, 2), vaddq_f32(v29, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v29.f32, 1))).f32[0]);
    *(_QWORD *)&v33 = __PAIR64__(LODWORD(v217), LODWORD(v221));
    *((_QWORD *)&v33 + 1) = COERCE_UNSIGNED_INT(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v32, 2), vaddq_f32(v32, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v32.f32, 1))).f32[0]));
    v248 = v33;
    v34 = vzip2q_s32((int32x4_t)v29, (int32x4_t)v32);
    v35 = (float32x4_t)vzip1q_s32(vzip1q_s32((int32x4_t)v29, (int32x4_t)v32), (int32x4_t)v30);
    v36 = (float32x4_t)vtrn2q_s32((int32x4_t)v29, (int32x4_t)v30);
    v36.i32[2] = v32.i32[1];
    v37 = vaddq_f32((float32x4_t)vzip1q_s32(v34, (int32x4_t)v31), vaddq_f32(v35, v36));
    __asm { FMOV            V1.4S, #1.0 }
    v39 = vceqzq_f32(v37);
    v39.i32[3] = 0;
    v40 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v39), (int8x16_t)v37, (int8x16_t)vdivq_f32(_Q1, v37));
    v233 = v27;
    v235 = v26;
    v330.columns[1] = (simd_float4)v27;
    v240 = vmulq_lane_f32(v27, *(float32x2_t *)v40.f32, 1);
    v244 = vmulq_n_f32(v26, v40.f32[0]);
    v330.columns[2] = (simd_float4)v28;
    v229 = v28;
    v237 = vmulq_laneq_f32(v28, v40, 2);
    v330.columns[0] = (simd_float4)v26;
    v330.columns[3] = (simd_float4)v225;
    v262 = __invert_f4(v330);
    v263 = v235;
    v264 = v233;
    v265 = v229;
    v266 = v225;
    v267 = v244;
    v268 = v240;
    v269 = v237;
    v270 = v225;
    v271 = v255;
    v41 = (a5 & 0xFE00000000) != 0;
    v272 = v248;
    if ((a5 & 0xFE00000000) != 0)
      v42 = 0;
    else
      v42 = a5;
    v236 = v42;
    if (!(_DWORD)a5)
      v41 = 1;
    v234 = v41;
    v43 = v12[3];
    sub_1B20F03D8(v43, v279);
    sub_1B1FCD4B0((uint64_t)v279, (uint64_t)v299, (uint64_t)&unk_1ED4B9160, (uint64_t)&type metadata for TextureCPURuntime, (uint64_t (*)(_QWORD, uint64_t, uint64_t))sub_1B19F900C);
    if (v304)
    {
      v238 = a4;
      v308 = v300;
      v309 = v301;
      v310 = v302;
      v311 = v303;
      v305 = v299[0];
      v306 = v299[1];
      v312 = v304;
      v307 = v299[2];
      if (*((_QWORD *)&v300 + 1) != 7)
      {
        if (*((_QWORD *)&v300 + 1) != 2)
        {
          if (qword_1ED4BF430 != -1)
            swift_once();
          swift_retain();
          v178 = sub_1B2228E90();
          if (qword_1ED4BF658 != -1)
            swift_once();
          *(_QWORD *)&v313 = 0;
          swift_retain();
          sub_1B1F1AD70(v178, (uint64_t *)&v313, 0xD000000000000041, 0x80000001B2347170);
          swift_release();
          swift_release();
          return sub_1B1A08614(v279[0].i64);
        }
        sub_1B1EDFCF8((uint64_t)&v305, 1, 1, (uint64_t)&v280);
        sub_1B1FCD4B0((uint64_t)&v280, (uint64_t)&v283, (uint64_t)&qword_1EEF61C50, (uint64_t)type metadata accessor for __vfx_sampler2d, (uint64_t (*)(_QWORD, uint64_t, uint64_t))sub_1B1792854);
        if (*((_QWORD *)&v285 + 1) == 1)
          return sub_1B1A08614(v279[0].i64);
        v273 = v283;
        v274 = v284;
        v275 = v285;
        *(_QWORD *)&v276 = v286;
        if ((*(_DWORD *)(a4 + 80) & 0x7FFFFFFF) != 0 && vabds_f32(v221, v217) > 0.0001)
        {
          if (qword_1ED4BF430 != -1)
            swift_once();
          swift_retain();
          v44 = sub_1B2228E90();
          if (qword_1ED4BF658 != -1)
            swift_once();
          *(_QWORD *)&v313 = 0;
          swift_retain();
          sub_1B1F1AD70(v44, (uint64_t *)&v313, 0xD000000000000049, 0x80000001B23471C0);
          swift_release();
          swift_release();
        }
        v45 = *(_OWORD *)(a4 + 40);
        v326 = *(_OWORD *)(a4 + 24);
        v327 = v45;
        v328 = *(_QWORD *)(a4 + 56);
        sub_1B1E8FCE4(a6, (uint64_t)&v326, 0x200000000, v287);
        sub_1B1FCD4B0((uint64_t)v287, (uint64_t)v294, (uint64_t)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult, (uint64_t (*)(_QWORD, uint64_t, uint64_t))sub_1B19F900C);
        v245 = *(unsigned __int16 **)&v294[0];
        if (!*(_QWORD *)&v294[0])
          return sub_1B1A08614(v279[0].i64);
        v202 = v298;
        if ((uint64_t)v298 >= 1)
        {
          v199 = *((_QWORD *)&v296 + 1);
          if (*((_QWORD *)&v296 + 1))
          {
            v46 = 0;
            v196 = *((_QWORD *)&v295 + 1);
            v47 = (_QWORD *)*((_QWORD *)&v297 + 1);
            v193 = v297;
            v48 = *(unsigned __int8 *)(v297 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
            v49 = *(_QWORD *)(*((_QWORD *)&v297 + 1) + 32);
            v185 = (_QWORD *)(*((_QWORD *)&v297 + 1) + 64);
            v241 = *(_QWORD *)&v294[0] + 41;
            v190 = v48;
            v256 = (_QWORD *)*((_QWORD *)&v297 + 1);
            v187 = v49;
            do
            {
              v230 = v46;
              v50 = (unsigned int *)(v196 + 48 * v46);
              v51 = *v50;
              v52 = v50[1];
              v53 = v50[2];
              v54 = *((_QWORD *)v50 + 3);
              v205 = *((_QWORD *)v50 + 2);
              v55 = *((_QWORD *)v50 + 5);
              v249 = *((_QWORD *)v50 + 4);
              if (v48)
              {
                v56 = *(os_unfair_lock_s **)(v55 + 376);
                swift_retain_n();
                os_unfair_lock_lock(v56);
                os_unfair_lock_lock(*(os_unfair_lock_t *)(v55 + 344));
                swift_release();
              }
              else
              {
                swift_retain();
              }
              ecs_stack_allocator_push_snapshot(v49);
              v222 = v47[6];
              v214 = v47[8];
              v218 = v47[7];
              v208 = v47[10];
              v211 = v47[9];
              v57 = v47[4];
              v58 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v55 + 40) + 16) + 32) + 16) + 1;
              swift_retain();
              v256[6] = ecs_stack_allocator_allocate(v57, 48 * v58, 8);
              v256[7] = v58;
              v47 = v256;
              v185[1] = 0;
              v185[2] = 0;
              *v185 = 0;
              swift_release();
              *(_QWORD *)&v313 = v193;
              *((_QWORD *)&v313 + 1) = v55;
              v226 = v55;
              v314 = v256;
              v315 = v53;
              v316 = (v52 - v51 + v53);
              v317 = v202;
              v318 = v51;
              v319 = v52;
              v320 = 0;
              v321 = 0;
              LOBYTE(v322) = 1;
              v323 = v205;
              v324 = v54;
              v325 = v249;
              sub_1B1FC9960(&v313, &v259, (uint64_t)&v262, v238, v236 | ((unint64_t)v234 << 32), (uint64_t)&v273, a7);
              v59 = v256[6];
              v250 = v256[8];
              if (!v250)
              {
                v85 = v256[7];
                v86 = (_QWORD *)v256[4];
                goto LABEL_63;
              }
              for (i = 0; i != v250; ++i)
              {
                v62 = (uint64_t *)(v59 + 48 * i);
                v63 = *v62;
                v64 = (void (*)(uint64_t))v62[4];
                v65 = v47[9];
                if (v65)
                  _ZF = v63 == v65;
                else
                  _ZF = 0;
                if (_ZF || !v245[11])
                  goto LABEL_28;
                v67 = v245[9];
                v68 = (_QWORD *)(v241 + v245[8]);
                v69 = v62[2];
                v70 = v68;
                v71 = v67 >> 4;
                v72 = v241;
                if (v67 >= 0x10)
                {
                  while (*v70 != v63)
                  {
                    ++v72;
                    v70 += 2;
                    if (!--v71)
                      goto LABEL_43;
                  }
                  v73 = *(unsigned __int8 *)(v72 + v245[10]);
                  v74 = v73 > 5;
                  v75 = (1 << v73) & 0x23;
                  if (v74 || v75 == 0)
                  {
LABEL_28:
                    v61 = swift_retain();
                    v64(v61);
                    swift_release();
                    goto LABEL_29;
                  }
                }
LABEL_43:
                if (swift_conformsToProtocol2())
                  v77 = v69;
                else
                  v77 = 0;
                if (v77)
                {
                  if (v67 < 0x10)
                    goto LABEL_28;
                  v78 = v68;
                  v79 = v67 >> 4;
                  v80 = v241;
                  while (*v78 != v77)
                  {
                    ++v80;
                    v78 += 2;
                    if (!--v79)
                      goto LABEL_56;
                  }
                  v81 = *(unsigned __int8 *)(v80 + v245[10]);
                  v74 = v81 > 5;
                  v82 = (1 << v81) & 0x23;
                  if (v74 || v82 == 0)
                    goto LABEL_28;
LABEL_56:
                  v84 = 16 * (v67 >> 4);
                  while (*v68 != v77)
                  {
                    v68 += 2;
                    v84 -= 16;
                    if (!v84)
                      goto LABEL_28;
                  }
                }
LABEL_29:
                v47 = v256;
              }
              v85 = v256[7];
              v59 = v256[6];
              v86 = (_QWORD *)v256[4];
              if ((uint64_t)v256[8] >= 1)
                swift_arrayDestroy();
LABEL_63:
              v49 = v187;
              ecs_stack_allocator_deallocate(v86, v59, 48 * v85);
              v47[6] = v222;
              v47[7] = v218;
              v47[8] = v214;
              v47[9] = v211;
              v47[10] = v208;
              sub_1B1F03804((char *)v226);
              ecs_stack_allocator_pop_snapshot(v187);
              v48 = v190;
              if ((v190 & 1) != 0)
              {
                os_unfair_lock_unlock(*(os_unfair_lock_t *)(v226 + 344));
                os_unfair_lock_unlock(*(os_unfair_lock_t *)(v226 + 376));
              }
              swift_release();
              v46 = v230 + 1;
            }
            while (v230 + 1 != v199);
          }
        }
        v179 = (uint64_t *)v287;
LABEL_171:
        sub_1B19ED748(v179);
        return sub_1B1A08614(v279[0].i64);
      }
      sub_1B1EDFF30((uint64_t)&v305, 1, 1, (uint64_t)&v280);
      sub_1B1FCD4B0((uint64_t)&v280, (uint64_t)v294, (uint64_t)&qword_1EEF5AEF8, (uint64_t)type metadata accessor for __vfx_sampler3d, (uint64_t (*)(_QWORD, uint64_t, uint64_t))sub_1B1792854);
      if (*((_QWORD *)&v297 + 1) == 1)
        return sub_1B1A08614(v279[0].i64);
      v275 = v295;
      v276 = v296;
      v277 = v297;
      v278 = v298;
      v273 = v294[0];
      v274 = v294[1];
      v137 = *(_OWORD *)(a4 + 40);
      v326 = *(_OWORD *)(a4 + 24);
      v327 = v137;
      v328 = *(_QWORD *)(a4 + 56);
      sub_1B1E8FCE4(a6, (uint64_t)&v326, 0x200000000, &v283);
      sub_1B1FCD4B0((uint64_t)&v283, (uint64_t)v287, (uint64_t)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult, (uint64_t (*)(_QWORD, uint64_t, uint64_t))sub_1B19F900C);
      v247 = *(unsigned __int16 **)&v287[0];
      if (!*(_QWORD *)&v287[0])
        return sub_1B1A08614(v279[0].i64);
      v204 = v293;
      if (v293 < 1 || (v201 = v290) == 0)
      {
LABEL_170:
        v179 = (uint64_t *)&v283;
        goto LABEL_171;
      }
      v138 = 0;
      v198 = v289;
      v139 = v292;
      v195 = v291;
      v140 = *(unsigned __int8 *)(v291 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
      v141 = v292[4];
      v186 = v292 + 8;
      v243 = *(_QWORD *)&v287[0] + 41;
      v192 = v140;
      v258 = v292;
      v189 = v141;
LABEL_120:
      v232 = v138;
      v142 = (unsigned int *)(v198 + 48 * v138);
      v143 = *v142;
      v144 = v142[1];
      v145 = v142[2];
      v146 = *((_QWORD *)v142 + 3);
      v207 = *((_QWORD *)v142 + 2);
      v147 = *((_QWORD *)v142 + 5);
      v253 = *((_QWORD *)v142 + 4);
      if (v140)
      {
        v148 = *(os_unfair_lock_s **)(v147 + 376);
        swift_retain_n();
        os_unfair_lock_lock(v148);
        os_unfair_lock_lock(*(os_unfair_lock_t *)(v147 + 344));
        swift_release();
      }
      else
      {
        swift_retain();
      }
      ecs_stack_allocator_push_snapshot(v141);
      v224 = v139[6];
      v216 = v139[8];
      v220 = v139[7];
      v210 = v139[10];
      v213 = v139[9];
      v149 = v139[4];
      v150 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v147 + 40) + 16) + 32) + 16) + 1;
      swift_retain();
      v258[6] = ecs_stack_allocator_allocate(v149, 48 * v150, 8);
      v258[7] = v150;
      v139 = v258;
      v186[1] = 0;
      v186[2] = 0;
      *v186 = 0;
      swift_release();
      *(_QWORD *)&v313 = v195;
      *((_QWORD *)&v313 + 1) = v147;
      v228 = v147;
      v314 = v258;
      v315 = v145;
      v316 = (v144 - v143 + v145);
      v317 = v204;
      v318 = v143;
      v319 = v144;
      v320 = 0;
      v321 = 0;
      LOBYTE(v322) = 1;
      v323 = v207;
      v324 = v146;
      v325 = v253;
      sub_1B1FCA0A4(&v313, &v259, (uint64_t)&v262, v238, v236 | ((unint64_t)v234 << 32), (uint64_t)&v273, a7);
      v151 = v258[6];
      v254 = v258[8];
      if (!v254)
      {
        v176 = v258[7];
        v177 = (_QWORD *)v258[4];
        goto LABEL_160;
      }
      v152 = 0;
      while (1)
      {
        v154 = (uint64_t *)(v151 + 48 * v152);
        v155 = *v154;
        v156 = (void (*)(uint64_t))v154[4];
        v157 = v139[9];
        if (v157)
          v158 = v155 == v157;
        else
          v158 = 0;
        if (!v158 && v247[11])
        {
          v159 = v247[9];
          v160 = (_QWORD *)(v243 + v247[8]);
          v161 = v154[2];
          v162 = v160;
          v163 = v159 >> 4;
          v164 = v243;
          if (v159 < 0x10)
            goto LABEL_140;
          while (*v162 != v155)
          {
            ++v164;
            v162 += 2;
            if (!--v163)
              goto LABEL_140;
          }
          v165 = *(unsigned __int8 *)(v164 + v247[10]);
          v74 = v165 > 5;
          v166 = (1 << v165) & 0x23;
          if (!v74 && v166 != 0)
          {
LABEL_140:
            if (swift_conformsToProtocol2())
              v168 = v161;
            else
              v168 = 0;
            if (!v168)
              goto LABEL_126;
            if (v159 >= 0x10)
            {
              v169 = v160;
              v170 = v159 >> 4;
              v171 = v243;
              while (*v169 != v168)
              {
                ++v171;
                v169 += 2;
                if (!--v170)
                  goto LABEL_153;
              }
              v172 = *(unsigned __int8 *)(v171 + v247[10]);
              v74 = v172 > 5;
              v173 = (1 << v172) & 0x23;
              if (v74 || v173 == 0)
                goto LABEL_125;
LABEL_153:
              v175 = 16 * (v159 >> 4);
              while (*v160 != v168)
              {
                v160 += 2;
                v175 -= 16;
                if (!v175)
                  goto LABEL_125;
              }
              goto LABEL_126;
            }
          }
        }
LABEL_125:
        v153 = swift_retain();
        v156(v153);
        swift_release();
LABEL_126:
        ++v152;
        v139 = v258;
        if (v152 == v254)
        {
          v176 = v258[7];
          v151 = v258[6];
          v177 = (_QWORD *)v258[4];
          if ((uint64_t)v258[8] >= 1)
            swift_arrayDestroy();
LABEL_160:
          v141 = v189;
          ecs_stack_allocator_deallocate(v177, v151, 48 * v176);
          v139[6] = v224;
          v139[7] = v220;
          v139[8] = v216;
          v139[9] = v213;
          v139[10] = v210;
          sub_1B1F03804((char *)v228);
          ecs_stack_allocator_pop_snapshot(v189);
          v140 = v192;
          if ((v192 & 1) != 0)
          {
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v228 + 344));
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v228 + 376));
          }
          swift_release();
          v138 = v232 + 1;
          if (v232 + 1 == v201)
            goto LABEL_170;
          goto LABEL_120;
        }
      }
    }
    sub_1B1D1949C(v43, (uint64_t)&v273);
    result = (uint64_t *)sub_1B1FCD4B0((uint64_t)&v273, (uint64_t)&v280, (uint64_t)&unk_1EEF61C40, (uint64_t)&type metadata for SDFRuntimeData, (uint64_t (*)(_QWORD, uint64_t, uint64_t))sub_1B19F900C);
    if (*((_QWORD *)&v281 + 1) == 1)
      return result;
    v283 = v280;
    v284 = v281;
    *(_QWORD *)&v285 = v282;
    v87 = (void *)*((_QWORD *)&v281 + 1);
    sub_1B1FCD4B0((uint64_t)&v285, (uint64_t)&v326, (uint64_t)&unk_1ED4BA5F0, (uint64_t)sub_1B1E8BB30, (uint64_t (*)(_QWORD, uint64_t, uint64_t))sub_1B1792854);
    v88 = v284;
    v89 = *((_QWORD *)&v283 + 1);
    v90 = v283;
    swift_unknownObjectRetain();
    sub_1B1B40D5C((uint64_t)&v326);
    v91 = sub_1B214477C(v90, v89, v88, v87);
    v200 = v93;
    v203 = v92;
    v197 = v94;
    v194 = (uint64_t)v91;
    swift_unknownObjectRelease();
    sub_1B1B40274((uint64_t)&v326);
    v95 = *(_OWORD *)(a4 + 40);
    v287[0] = *(_OWORD *)(a4 + 24);
    v287[1] = v95;
    v288 = *(_QWORD *)(a4 + 56);
    sub_1B1E8FCE4(a6, (uint64_t)v287, 0x200000000, v294);
    sub_1B1FCD4B0((uint64_t)v294, (uint64_t)&v313, (uint64_t)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult, (uint64_t (*)(_QWORD, uint64_t, uint64_t))sub_1B19F900C);
    v246 = (unsigned __int16 *)v313;
    if (!(_QWORD)v313)
    {
      swift_unknownObjectRelease();
      return (uint64_t *)sub_1B1B40274((uint64_t)&v326);
    }
    v191 = v322;
    if (v322 <= 0 || (v239 = a4, (v188 = v319) == 0))
    {
LABEL_167:
      swift_unknownObjectRelease();
      sub_1B1B40274((uint64_t)&v326);
      return sub_1B19ED748((uint64_t *)v294);
    }
    v96 = 0;
    v184 = v317;
    v97 = v321;
    v183 = v320;
    v98 = *(_BYTE *)(v320 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
    v99 = v321[4];
    v180 = v321 + 8;
    v242 = v313 + 41;
    v182 = v98;
    v257 = v321;
    v181 = v99;
LABEL_71:
    v231 = v96;
    v100 = (unsigned int *)(v184 + 48 * v96);
    v101 = *v100;
    v102 = v100[1];
    v103 = v100[2];
    v104 = *((_QWORD *)v100 + 3);
    v206 = *((_QWORD *)v100 + 2);
    v105 = *((_QWORD *)v100 + 5);
    v251 = *((_QWORD *)v100 + 4);
    if ((v98 & 1) != 0)
    {
      v106 = *(os_unfair_lock_s **)(v105 + 376);
      swift_retain_n();
      os_unfair_lock_lock(v106);
      os_unfair_lock_lock(*(os_unfair_lock_t *)(v105 + 344));
      swift_release();
    }
    else
    {
      swift_retain();
    }
    ecs_stack_allocator_push_snapshot(v99);
    v223 = v97[6];
    v215 = v97[8];
    v219 = v97[7];
    v209 = v97[10];
    v212 = v97[9];
    v107 = v97[4];
    v108 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v105 + 40) + 16) + 32) + 16) + 1;
    swift_retain();
    v257[6] = ecs_stack_allocator_allocate(v107, 48 * v108, 8);
    v257[7] = v108;
    v97 = v257;
    v180[1] = 0;
    v180[2] = 0;
    *v180 = 0;
    swift_release();
    *(_QWORD *)&v305 = v183;
    *((_QWORD *)&v305 + 1) = v105;
    v227 = v105;
    *(_QWORD *)&v306 = v257;
    *((_QWORD *)&v306 + 1) = v103;
    *(_QWORD *)&v307 = (v102 - v101 + v103);
    *((_QWORD *)&v307 + 1) = v191;
    *(_QWORD *)&v308 = v101;
    *((_QWORD *)&v308 + 1) = v102;
    v309 = 0uLL;
    LOBYTE(v310) = 1;
    *((_QWORD *)&v310 + 1) = v206;
    *(_QWORD *)&v311 = v104;
    *((_QWORD *)&v311 + 1) = v251;
    sub_1B1FCA5A8(&v305, &v259, (uint64_t)&v262, v239, v236 | ((unint64_t)v234 << 32), v194, a7, v203, v200, v197);
    v109 = v257[6];
    v252 = v257[8];
    if (!v252)
    {
      v135 = v257[7];
      v136 = (_QWORD *)v257[4];
      goto LABEL_112;
    }
    v110 = 0;
    while (1)
    {
      v112 = v109;
      v113 = (uint64_t *)(v109 + 48 * v110);
      v114 = *v113;
      v115 = (void (*)(uint64_t))v113[4];
      v116 = v97[9];
      if (v116)
        v117 = v114 == v116;
      else
        v117 = 0;
      if (!v117 && v246[11])
      {
        v118 = v246[9];
        v119 = (_QWORD *)(v242 + v246[8]);
        v120 = v113[2];
        v121 = v119;
        v122 = v118 >> 4;
        v123 = v242;
        if (v118 < 0x10)
          goto LABEL_91;
        while (*v121 != v114)
        {
          ++v123;
          v121 += 2;
          if (!--v122)
            goto LABEL_91;
        }
        v124 = *(unsigned __int8 *)(v123 + v246[10]);
        v74 = v124 > 5;
        v125 = (1 << v124) & 0x23;
        if (!v74 && v125 != 0)
        {
LABEL_91:
          if (swift_conformsToProtocol2())
            v127 = v120;
          else
            v127 = 0;
          if (!v127)
            goto LABEL_77;
          if (v118 >= 0x10)
          {
            v128 = v119;
            v129 = v118 >> 4;
            v130 = v242;
            while (*v128 != v127)
            {
              ++v130;
              v128 += 2;
              if (!--v129)
                goto LABEL_104;
            }
            v131 = *(unsigned __int8 *)(v130 + v246[10]);
            v74 = v131 > 5;
            v132 = (1 << v131) & 0x23;
            if (v74 || v132 == 0)
              goto LABEL_76;
LABEL_104:
            v134 = 16 * (v118 >> 4);
            while (*v119 != v127)
            {
              v119 += 2;
              v134 -= 16;
              if (!v134)
                goto LABEL_76;
            }
            goto LABEL_77;
          }
        }
      }
LABEL_76:
      v111 = swift_retain();
      v115(v111);
      swift_release();
LABEL_77:
      ++v110;
      v97 = v257;
      v109 = v112;
      if (v110 == v252)
      {
        v135 = v257[7];
        v109 = v257[6];
        v136 = (_QWORD *)v257[4];
        if ((uint64_t)v257[8] >= 1)
          swift_arrayDestroy();
LABEL_112:
        v99 = v181;
        ecs_stack_allocator_deallocate(v136, v109, 48 * v135);
        v97[6] = v223;
        v97[7] = v219;
        v97[8] = v215;
        v97[9] = v212;
        v97[10] = v209;
        sub_1B1F03804((char *)v227);
        ecs_stack_allocator_pop_snapshot(v181);
        v98 = v182;
        if ((v182 & 1) != 0)
        {
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v227 + 344));
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v227 + 376));
        }
        swift_release();
        v96 = v231 + 1;
        if (v231 + 1 == v188)
          goto LABEL_167;
        goto LABEL_71;
      }
    }
  }
  return result;
}

uint64_t sub_1B1FCD350@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t result;
  uint64_t v12;
  int v13;
  int v14;
  _BYTE v15[16];
  __int128 v16;
  int v17;
  unint64_t v18;
  int v19;
  uint64_t v20;

  sub_1B1D4F120(0, (unint64_t *)&unk_1EEF61C30, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED048]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = &v15[-v9];
  v16 = xmmword_1B228FB70;
  v17 = 0;
  v18 = 0xFFFFFFFF000000FFLL;
  v19 = 0;
  sub_1B1C37430(a1, 0);
  if (v2)
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  v15[15] = 9;
  sub_1B1A08878();
  sub_1B2229814();
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  result = (*(uint64_t (**)(_BYTE *, uint64_t))(v7 + 8))(v10, v6);
  v12 = v20;
  v13 = v17;
  v14 = v18;
  *(_OWORD *)a2 = v16;
  *(_DWORD *)(a2 + 16) = v13;
  *(_DWORD *)(a2 + 20) = v14;
  *(_QWORD *)(a2 + 24) = v12;
  return result;
}

uint64_t sub_1B1FCD4B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD, uint64_t, uint64_t))
{
  uint64_t v7;

  v7 = a5(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a2, a1, v7);
  return a2;
}

ValueMetadata *type metadata accessor for ParticleSDFCollider()
{
  return &type metadata for ParticleSDFCollider;
}

ValueMetadata *type metadata accessor for FairRecursiveLock()
{
  return &type metadata for FairRecursiveLock;
}

ValueMetadata *type metadata accessor for UnfairRecursiveLock()
{
  return &type metadata for UnfairRecursiveLock;
}

uint64_t _s3VFX10UnfairLockVwet_0(uint64_t a1, int a2)
{
  int v3;

  if (!a2)
    return 0;
  if (a2 != 1 && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 2);
  if (*(_QWORD *)(a1 + 24))
    v3 = -1;
  else
    v3 = 0;
  return (v3 + 1);
}

uint64_t _s3VFX10UnfairLockVwst_0(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 1)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 2;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 2)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if (a3 >= 2)
      *(_BYTE *)(result + 32) = 0;
    if (a2)
      *(_QWORD *)(result + 24) = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for UnfairLock()
{
  return &type metadata for UnfairLock;
}

uint64_t sub_1B1FCD5C8(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;
  char v11;
  char v12;

  sub_1B1FCE638(0, &qword_1EEF61C68, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED170]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v6);
  v8 = (char *)&v10 - v7;
  sub_1B19FA070(a1, a1[3]);
  sub_1B1FCE5F4();
  sub_1B222A180();
  v12 = 0;
  sub_1B2229934();
  if (!v1)
  {
    v11 = 1;
    sub_1B222991C();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
}

uint64_t sub_1B1FCD6EC(char *a1, char *a2)
{
  return sub_1B1F8ED00(*a1, *a2);
}

uint64_t sub_1B1FCD6F8()
{
  _BYTE *v0;

  if (*v0)
    return 0xD000000000000010;
  else
    return 0x65756C6176;
}

uint64_t sub_1B1FCD734@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1B1FCE1A8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1B1FCD758()
{
  sub_1B1FCE5F4();
  return sub_1B222A1D4();
}

uint64_t sub_1B1FCD780()
{
  sub_1B1FCE5F4();
  return sub_1B222A1E0();
}

void sub_1B1FCD7A8(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  char v4;
  float v5;

  v5 = sub_1B1FCE49C(a1);
  if (!v2)
  {
    *(float *)a2 = v5;
    *(_BYTE *)(a2 + 4) = v4 & 1;
  }
}

uint64_t sub_1B1FCD7D8(_QWORD *a1)
{
  return sub_1B1FCD5C8(a1);
}

uint64_t sub_1B1FCD7F4()
{
  return type metadata accessor for ParticleDragSystem();
}

void sub_1B1FCD810(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 1036831949;
  *(_BYTE *)(a1 + 4) = 0;
}

uint64_t type metadata accessor for ParticleDrag.GPUSystem()
{
  return objc_opt_self();
}

const char *sub_1B1FCD848()
{
  return "ParticleDrag.GPU";
}

uint64_t sub_1B1FCD85C()
{
  return type metadata accessor for ParticleDrag.GPUSystem();
}

uint64_t *sub_1B1FCD878(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  float v6;
  float v7;
  float v8;
  __int128 v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  int v14;
  unsigned int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  os_unfair_lock_s *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t i;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  void (*v31)(uint64_t);
  uint64_t v32;
  BOOL v33;
  unint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  uint64_t v39;
  unsigned int v40;
  BOOL v41;
  int v42;
  uint64_t v44;
  _QWORD *v45;
  unint64_t v46;
  uint64_t v47;
  unsigned int v48;
  int v49;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unsigned __int16 *v73;
  uint64_t v74[12];
  _QWORD v75[7];
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  _QWORD v80[10];
  char v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _OWORD v85[2];
  uint64_t v86;

  v2 = v1;
  v3 = *a1;
  v4 = a1[1];
  swift_retain_n();
  v5 = sub_1B1D17554(v4);
  swift_release();
  if ((v5 & 0xFF00000000) == 0x200000000)
    v6 = 0.1;
  else
    v6 = *(float *)&v5;
  sub_1B1E5267C();
  v8 = v7;
  v9 = *(_OWORD *)(v2 + 32);
  v85[0] = *(_OWORD *)(v2 + 16);
  v85[1] = v9;
  v86 = *(_QWORD *)(v2 + 48);
  sub_1B1E8FCE4(v3, (uint64_t)v85, 0x200000000, v74);
  sub_1B19ED688((uint64_t)v74, (uint64_t)v75);
  v73 = (unsigned __int16 *)v75[0];
  if (!v75[0])
    return (uint64_t *)swift_release();
  v63 = v79;
  if (v79 > 0)
  {
    v62 = v76;
    if (v76)
    {
      v10 = 0;
      v11 = v5 & 0xFFFFFFFFFFLL;
      v61 = v75[5];
      v12 = v78;
      v13 = v78[4];
      v60 = v77;
      v14 = *(unsigned __int8 *)(v77 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
      v58 = v78 + 8;
      v72 = v75[0] + 41;
      v56 = v13;
      v57 = HIDWORD(v11) & 1;
      v59 = v14;
      do
      {
        v68 = v10;
        v15 = (unsigned int *)(v61 + 48 * v10);
        v16 = *v15;
        v17 = v15[1];
        v18 = v15[2];
        v19 = *((_QWORD *)v15 + 3);
        v69 = *((_QWORD *)v15 + 2);
        v20 = *((_QWORD *)v15 + 4);
        v21 = *((_QWORD *)v15 + 5);
        if (v14)
        {
          v22 = *(os_unfair_lock_s **)(v21 + 376);
          swift_retain_n();
          os_unfair_lock_lock(v22);
          os_unfair_lock_lock(*(os_unfair_lock_t *)(v21 + 344));
          swift_release();
        }
        else
        {
          swift_retain();
        }
        ecs_stack_allocator_push_snapshot(v13);
        v66 = v12[7];
        v67 = v12[6];
        v64 = v12[9];
        v65 = v12[8];
        v70 = v12[10];
        v23 = v12[4];
        v24 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v21 + 40) + 16) + 32) + 16) + 1;
        swift_retain();
        v12[6] = ecs_stack_allocator_allocate(v23, 48 * v24, 8);
        v12[7] = v24;
        v58[1] = 0;
        v58[2] = 0;
        *v58 = 0;
        swift_release();
        v80[0] = v60;
        v80[1] = v21;
        v71 = v21;
        v80[2] = v12;
        v80[3] = v18;
        v80[4] = (v17 - v16 + v18);
        v80[5] = v63;
        v80[6] = v16;
        v80[7] = v17;
        v80[8] = 0;
        v80[9] = 0;
        v81 = 1;
        v82 = v69;
        v83 = v19;
        v84 = v20;
        sub_1B1FCDD4C(v80, v57, v6, v8);
        v25 = v12[6];
        v26 = v12[8];
        if (!v26)
        {
          v52 = v12[7];
          v53 = (_QWORD *)v12[4];
          v54 = v68;
          v13 = v56;
          goto LABEL_49;
        }
        for (i = 0; i != v26; ++i)
        {
          v29 = (uint64_t *)(v25 + 48 * i);
          v30 = *v29;
          v31 = (void (*)(uint64_t))v29[4];
          v32 = v12[9];
          if (v32)
            v33 = v30 == v32;
          else
            v33 = 0;
          if (v33 || !v73[11])
            goto LABEL_14;
          v34 = v73[9];
          v35 = (_QWORD *)(v72 + v73[8]);
          v36 = v29[2];
          v37 = v35;
          v38 = v34 >> 4;
          v39 = v72;
          if (v34 >= 0x10)
          {
            while (*v37 != v30)
            {
              ++v39;
              v37 += 2;
              if (!--v38)
                goto LABEL_29;
            }
            v40 = *(unsigned __int8 *)(v39 + v73[10]);
            v41 = v40 > 5;
            v42 = (1 << v40) & 0x23;
            if (v41 || v42 == 0)
            {
LABEL_14:
              v28 = swift_retain();
              v31(v28);
              swift_release();
              continue;
            }
          }
LABEL_29:
          if (swift_conformsToProtocol2())
            v44 = v36;
          else
            v44 = 0;
          if (v44)
          {
            if (v34 < 0x10)
              goto LABEL_14;
            v45 = v35;
            v46 = v34 >> 4;
            v47 = v72;
            while (*v45 != v44)
            {
              ++v47;
              v45 += 2;
              if (!--v46)
                goto LABEL_42;
            }
            v48 = *(unsigned __int8 *)(v47 + v73[10]);
            v41 = v48 > 5;
            v49 = (1 << v48) & 0x23;
            if (v41 || v49 == 0)
              goto LABEL_14;
LABEL_42:
            v51 = 16 * (v34 >> 4);
            while (*v35 != v44)
            {
              v35 += 2;
              v51 -= 16;
              if (!v51)
                goto LABEL_14;
            }
          }
        }
        v52 = v12[7];
        v25 = v12[6];
        v53 = (_QWORD *)v12[4];
        v54 = v68;
        v13 = v56;
        if ((uint64_t)v12[8] >= 1)
          swift_arrayDestroy();
LABEL_49:
        ecs_stack_allocator_deallocate(v53, v25, 48 * v52);
        v12[6] = v67;
        v12[7] = v66;
        v12[8] = v65;
        v12[9] = v64;
        v12[10] = v70;
        sub_1B1F03804((char *)v71);
        ecs_stack_allocator_pop_snapshot(v13);
        v14 = v59;
        if ((v59 & 1) != 0)
        {
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v71 + 344));
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v71 + 376));
        }
        swift_release();
        v10 = v54 + 1;
      }
      while (v10 != v62);
    }
  }
  swift_release();
  return sub_1B19ED748(v74);
}

unint64_t sub_1B1FCDD4C(_QWORD *a1, char a2, float a3, float a4)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  float v14;
  uint64_t v15;
  unint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  float32x4_t *v20;
  int *v21;
  __int128 *v22;
  __int128 v23;
  __int128 v24;
  float v25;
  int v26;
  float v27;
  float v28;
  float v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  float32x4_t *v34;
  unint64_t v35;
  __int128 v36;
  float v37;
  float v38;
  uint64_t v39;
  uint64_t v40;
  float32x4_t *v41;
  float *v42;
  float v43;
  uint64_t v44;
  uint64_t v45;
  float32x4_t v46;
  float32x4_t *v47;
  uint64_t v48;
  uint64_t v49;
  float32x4_t *v50;
  float *v51;
  float v52;
  uint64_t v53;
  uint64_t v54;
  float32x4_t *v55;
  float32x4_t *v56;
  float *v57;
  float v58;
  uint64_t v59;
  uint64_t v60;
  float32x4_t *v61;
  float v62;
  char v63;
  _BYTE v64[16];
  char v65;

  v8 = (uint64_t *)a1[11];
  v9 = a1[12];
  v10 = a1[13];
  v11 = a1[1];
  v12 = a1[2];
  v13 = sub_1B1A12038((uint64_t)&type metadata for Velocity, (uint64_t)&off_1E63C30D0, v8, v9, v10, v12);
  sub_1B1A10AA4(*(_QWORD *)(v11 + 40), (uint64_t)&type metadata for Mass, &v65);
  v14 = a3 * a4;
  if (v65 == 1)
  {
    v15 = sub_1B1A12038((uint64_t)&type metadata for Mass, (uint64_t)&off_1E63B9850, v8, v9, v10, v12);
    result = sub_1B1A10AA4(*(_QWORD *)(v11 + 40), (uint64_t)&type metadata for Scale, &v63);
    if (v63 == 1)
    {
      if ((a2 & 1) != 0)
      {
        result = sub_1B1A12038((uint64_t)&type metadata for Scale, (uint64_t)&off_1E63BA9B8, v8, v9, v10, v12);
        v17 = a1[6];
        v18 = a1[7] - v17;
        if (v18)
        {
          v19 = 16 * v17;
          v20 = (float32x4_t *)(v13 + 16 * v17);
          v21 = (int *)(v15 + 4 * v17);
          v22 = (__int128 *)(result + v19);
          do
          {
            v23 = *v22++;
            v24 = v23;
            v25 = *((float *)&v23 + 1);
            v26 = DWORD1(v23);
            if ((DWORD1(v23) & 0x7FFFFF) != 0)
              v27 = *(float *)&v24;
            else
              v27 = v25;
            if ((~v26 & 0x7F800000) != 0)
              v27 = v25;
            if (v25 >= *(float *)&v24)
              v28 = v27;
            else
              v28 = *(float *)&v24;
            if ((DWORD2(v24) & 0x7FFFFF) != 0)
              v29 = v28;
            else
              v29 = *((float *)&v24 + 2);
            if ((~DWORD2(v24) & 0x7F800000) != 0)
              v29 = *((float *)&v24 + 2);
            v30 = *v21++;
            LODWORD(v24) = v30;
            if (*((float *)&v24 + 2) >= v28)
              v28 = v29;
            *v20 = vsubq_f32(*v20, vmulq_n_f32(*v20, (float)(v28 * v28) * fminf(v14 * *(float *)&v24, 1.0)));
            ++v20;
            --v18;
          }
          while (v18);
        }
      }
      else
      {
        v48 = a1[6];
        v49 = a1[7] - v48;
        if (v49)
        {
          v50 = (float32x4_t *)(v13 + 16 * v48);
          v51 = (float *)(v15 + 4 * v48);
          do
          {
            v52 = *v51++;
            *v50 = vsubq_f32(*v50, vmulq_n_f32(*v50, fminf(v14 * v52, 1.0)));
            ++v50;
            --v49;
          }
          while (v49);
        }
      }
    }
    else
    {
      v39 = a1[6];
      v40 = a1[7] - v39;
      if ((a2 & 1) != 0)
      {
        if (v40)
        {
          v41 = (float32x4_t *)(v13 + 16 * v39);
          v42 = (float *)(v15 + 4 * v39);
          do
          {
            v43 = *v42++;
            *v41 = vaddq_f32(*v41, vmulq_f32(*v41, vmulq_n_f32((float32x4_t)xmmword_1B22AB860, fminf(v14 * v43, 1.0))));
            ++v41;
            --v40;
          }
          while (v40);
        }
      }
      else if (v40)
      {
        v56 = (float32x4_t *)(v13 + 16 * v39);
        v57 = (float *)(v15 + 4 * v39);
        do
        {
          v58 = *v57++;
          *v56 = vsubq_f32(*v56, vmulq_n_f32(*v56, fminf(v14 * v58, 1.0)));
          ++v56;
          --v40;
        }
        while (v40);
      }
    }
  }
  else
  {
    v62 = fminf(v14, 1.0);
    result = sub_1B1A10AA4(*(_QWORD *)(v11 + 40), (uint64_t)&type metadata for Scale, v64);
    if (v64[0] == 1)
    {
      if ((a2 & 1) != 0)
      {
        result = sub_1B1A12038((uint64_t)&type metadata for Scale, (uint64_t)&off_1E63BA9B8, v8, v9, v10, v12);
        v31 = a1[6];
        v32 = a1[7] - v31;
        if (v32)
        {
          v33 = 16 * v31;
          v34 = (float32x4_t *)(v13 + 16 * v31);
          v35 = result + v33;
          do
          {
            v36 = *(_OWORD *)v35;
            LODWORD(v37) = HIDWORD(*(_QWORD *)v35);
            if (v37 >= COERCE_FLOAT(*(_OWORD *)v35))
            {
              if ((LODWORD(v37) & 0x7FFFFF) != 0)
                LODWORD(v38) = *(_OWORD *)v35;
              else
                LODWORD(v38) = HIDWORD(*(_QWORD *)v35);
              if ((~LODWORD(v37) & 0x7F800000) == 0)
                v37 = v38;
            }
            else
            {
              LODWORD(v37) = *(_OWORD *)v35;
            }
            if (*((float *)&v36 + 2) >= v37)
            {
              if ((DWORD2(v36) & 0x7FFFFF) == 0)
                LODWORD(v37) = *(_QWORD *)(v35 + 8);
              if ((~DWORD2(v36) & 0x7F800000) != 0)
                LODWORD(v37) = *(_QWORD *)(v35 + 8);
            }
            *v34 = vsubq_f32(*v34, vmulq_n_f32(*v34, v62 * (float)(v37 * v37)));
            ++v34;
            v35 += 16;
            --v32;
          }
          while (v32);
        }
      }
      else
      {
        v53 = a1[6];
        v54 = a1[7] - v53;
        if (v54)
        {
          v55 = (float32x4_t *)(v13 + 16 * v53);
          do
          {
            *v55 = vsubq_f32(*v55, vmulq_n_f32(*v55, v62));
            ++v55;
            --v54;
          }
          while (v54);
        }
      }
    }
    else if ((a2 & 1) != 0)
    {
      v44 = a1[6];
      v45 = a1[7] - v44;
      if (v45)
      {
        v46 = vmulq_n_f32((float32x4_t)xmmword_1B2244F70, v62);
        v47 = (float32x4_t *)(v13 + 16 * v44);
        do
        {
          *v47 = vsubq_f32(*v47, vmulq_f32(v46, *v47));
          ++v47;
          --v45;
        }
        while (v45);
      }
    }
    else
    {
      v59 = a1[6];
      v60 = a1[7] - v59;
      if (v60)
      {
        v61 = (float32x4_t *)(v13 + 16 * v59);
        do
        {
          *v61 = vsubq_f32(*v61, vmulq_n_f32(*v61, v62));
          ++v61;
          --v60;
        }
        while (v60);
      }
    }
  }
  return result;
}

uint64_t type metadata accessor for ParticleDragSystem()
{
  return objc_opt_self();
}

const char *sub_1B1FCE194()
{
  return "ParticleDrag";
}

uint64_t sub_1B1FCE1A8(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x65756C6176 && a2 == 0xE500000000000000;
  if (v2 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000001B232DBF0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_1B2229D24();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_1B1FCE28C(uint64_t *a1)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  float v6;
  float v7;
  uint64_t v8;
  uint64_t ObjectType;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  float v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v3 = a1[2];
  v2 = a1[3];
  v4 = a1[6];
  swift_retain();
  v5 = sub_1B1D17554(v2);
  swift_release();
  if ((v5 & 0xFF00000000) == 0x200000000)
    v6 = 0.1;
  else
    v6 = *(float *)&v5;
  sub_1B1E52E10();
  v17 = v7 * v6;
  v8 = *a1;
  if (*a1)
  {
    ObjectType = swift_getObjectType();
    type metadata accessor for particle_drag_uniforms(0);
    sub_1B1F40E1C((uint64_t)&v17, 1, ObjectType, v10, v11, v12, v13, v14);
  }
  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BF6E0, (uint64_t)&type metadata for FunctionConstant, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_1B226D240;
  *(_OWORD *)(v15 + 32) = xmmword_1B22AB870;
  *(_BYTE *)(v15 + 48) = 0;
  *(_QWORD *)(v15 + 64) = HIDWORD(v5) & 1;
  *(_OWORD *)(v15 + 72) = 0u;
  *(_OWORD *)(v15 + 88) = 0u;
  *(_OWORD *)(v15 + 104) = 0u;
  *(_QWORD *)(v15 + 120) = 0;
  *(_BYTE *)(v15 + 128) = 13;
  swift_retain();
  sub_1B1B1FC34((uint64_t)a1);
  sub_1B1FE6FB8(v4, v3, v8 == 0, v15, (uint64_t)a1, 0x656C636974726170, 0xED0000676172645FLL, 0);
  sub_1B1B1FC88((uint64_t)a1);
  swift_release();
  swift_setDeallocating();
  swift_arrayDestroy();
  return swift_deallocClassInstance();
}

ValueMetadata *type metadata accessor for ParticleDrag()
{
  return &type metadata for ParticleDrag;
}

float sub_1B1FCE49C(_QWORD *a1)
{
  uint64_t v1;
  float v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  float v10;
  uint64_t v12;
  char v13;
  char v14;

  sub_1B1FCE638(0, &qword_1EEF61C58, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED048]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v7);
  v9 = (char *)&v12 - v8;
  sub_1B19FA070(a1, a1[3]);
  sub_1B1FCE5F4();
  sub_1B222A150();
  if (!v1)
  {
    v14 = 0;
    sub_1B22297F0();
    v2 = v10;
    v13 = 1;
    sub_1B22297D8();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  }
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  return v2;
}

unint64_t sub_1B1FCE5F4()
{
  unint64_t result;

  result = qword_1EEF61C60;
  if (!qword_1EEF61C60)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22ABA74, &type metadata for ParticleDrag.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF61C60);
  }
  return result;
}

void sub_1B1FCE638(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_1B1FCE5F4();
    v7 = a3(a1, &type metadata for ParticleDrag.CodingKeys, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t storeEnumTagSinglePayload for ParticleDrag.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1B1FCE6E0 + 4 * byte_1B22AB885[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1B1FCE714 + 4 * byte_1B22AB880[v4]))();
}

uint64_t sub_1B1FCE714(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1FCE71C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B1FCE724);
  return result;
}

uint64_t sub_1B1FCE730(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B1FCE738);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1B1FCE73C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1FCE744(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ParticleDrag.CodingKeys()
{
  return &type metadata for ParticleDrag.CodingKeys;
}

unint64_t sub_1B1FCE764()
{
  unint64_t result;

  result = qword_1EEF61C70;
  if (!qword_1EEF61C70)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22ABA4C, &type metadata for ParticleDrag.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF61C70);
  }
  return result;
}

unint64_t sub_1B1FCE7AC()
{
  unint64_t result;

  result = qword_1EEF61C78;
  if (!qword_1EEF61C78)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22AB9BC, &type metadata for ParticleDrag.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF61C78);
  }
  return result;
}

unint64_t sub_1B1FCE7F4()
{
  unint64_t result;

  result = qword_1EEF61C80;
  if (!qword_1EEF61C80)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22AB9E4, &type metadata for ParticleDrag.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF61C80);
  }
  return result;
}

uint64_t sub_1B1FCE838()
{
  return 0x6874676E656CLL;
}

uint64_t sub_1B1FCE84C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x6874676E656CLL && a2 == 0xE600000000000000)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_1B2229D24();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_1B1FCE8D8()
{
  sub_1B1FCF0D4();
  return sub_1B222A1D4();
}

uint64_t sub_1B1FCE900()
{
  sub_1B1FCF0D4();
  return sub_1B222A1E0();
}

uint64_t sub_1B1FCE928@<X0>(_QWORD *a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int v11;
  int v12;
  uint64_t result;
  uint64_t v14;

  sub_1B1FCF118(0, &qword_1EEF61C88, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED048]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = (char *)&v14 - v9;
  sub_1B19FA070(a1, a1[3]);
  sub_1B1FCF0D4();
  sub_1B222A150();
  if (v2)
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  sub_1B22297F0();
  v12 = v11;
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  result = _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  *a2 = v12;
  return result;
}

uint64_t sub_1B1FCEA58(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v9;

  sub_1B1FCF118(0, &qword_1EEF61C98, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED170]);
  v3 = v2;
  v4 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v5);
  v7 = (char *)&v9 - v6;
  sub_1B19FA070(a1, a1[3]);
  sub_1B1FCF0D4();
  sub_1B222A180();
  sub_1B2229934();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v3);
}

uint64_t sub_1B1FCEB48()
{
  return type metadata accessor for DistanceConstraintSystem();
}

uint64_t type metadata accessor for DistanceConstraintSystem()
{
  return objc_opt_self();
}

const char *sub_1B1FCEB88()
{
  return "DistanceConstrainTargetFromPosition";
}

uint64_t *sub_1B1FCEB9C(uint64_t a1)
{
  uint64_t v2;
  float v3;
  float v4;
  uint64_t v5;
  unint64_t v6;
  float v7;
  __int128 v8;
  _QWORD *v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  os_unfair_lock_s *v20;
  uint64_t v21;
  uint64_t v22;
  float32x4_t *v23;
  float32x4_t *v24;
  float32x4_t *v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  __int32 v30;
  float32x4_t v31;
  float32x4_t v32;
  float v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  uint64_t v37;
  float32x4_t *v38;
  float32x4_t *v39;
  float32x4_t *v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  __int32 v45;
  float32x4_t v46;
  float32x4_t v47;
  float v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  __int32 v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  __int32 v60;
  char v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _OWORD v69[2];
  uint64_t v70;
  uint64_t v71[8];
  _OWORD v72[2];
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  _OWORD v79[2];
  uint64_t v80;
  _OWORD v81[2];
  uint64_t v82;
  __int128 v83;
  __int128 v84;
  uint64_t v85;
  _BYTE v86[48];

  v2 = *(_QWORD *)a1;
  swift_retain();
  sub_1B1E5267C();
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  swift_retain();
  v6 = sub_1B1D18E70(v5);
  swift_release();
  if ((v6 & 0x100000000) != 0)
    v7 = 1.0;
  else
    v7 = *(float *)&v6;
  v8 = *(_OWORD *)(a1 + 104);
  v83 = *(_OWORD *)(a1 + 88);
  v84 = v8;
  v85 = *(_QWORD *)(a1 + 120);
  sub_1B1A17178(2, 1, 1, (uint64_t)v69);
  v81[0] = v69[0];
  v81[1] = v69[1];
  v82 = v70;
  sub_1B1E8FCE4(v2, (uint64_t)v81, 0x200000000, v71);
  sub_1B19F66A0((uint64_t)v71, (uint64_t)v72, (unint64_t *)&qword_1ED4B7DE0);
  if (!*(_QWORD *)&v72[0])
  {
    sub_1B19ED720((uint64_t)v69);
    return (uint64_t *)swift_release();
  }
  if (v78 <= 0 || (v66 = v75) == 0)
  {
    swift_retain();
    swift_retain();
    swift_retain();
    sub_1B19ED720((uint64_t)v69);
    goto LABEL_31;
  }
  v9 = v77;
  v10 = v77[4];
  v11 = *(_BYTE *)(v76 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
  v79[0] = v72[0];
  v79[1] = v72[1];
  v80 = v73;
  v64 = (uint64_t)(v77 + 6);
  v65 = v74;
  v63 = v77 + 8;
  swift_retain();
  swift_retain();
  swift_retain();
  v12 = 0;
  v13 = 0;
  v61 = v11;
  v62 = v10;
  do
  {
    v68 = v13;
    v14 = (unsigned int *)(v65 + 48 * v12);
    v15 = *v14;
    v67 = v14[1];
    v16 = (uint64_t *)*((_QWORD *)v14 + 2);
    v17 = *((_QWORD *)v14 + 3);
    v19 = *((_QWORD *)v14 + 4);
    v18 = *((_QWORD *)v14 + 5);
    if ((v11 & 1) != 0)
    {
      v20 = *(os_unfair_lock_s **)(v18 + 376);
      swift_retain_n();
      os_unfair_lock_lock(v20);
      os_unfair_lock_lock(*(os_unfair_lock_t *)(v18 + 344));
      swift_release();
    }
    else
    {
      swift_retain();
    }
    ecs_stack_allocator_push_snapshot(v10);
    sub_1B19F66A0(v64, (uint64_t)v86, &qword_1ED4B7FB0);
    v21 = v9[4];
    v22 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v18 + 40) + 16) + 32) + 16) + 1;
    swift_retain();
    v9[6] = ecs_stack_allocator_allocate(v21, 48 * v22, 8);
    v9[7] = v22;
    v63[1] = 0;
    v63[2] = 0;
    *v63 = 0;
    swift_release();
    v23 = (float32x4_t *)sub_1B1A12038((uint64_t)&type metadata for Velocity, (uint64_t)&off_1E63C30D0, v16, v17, v19, (uint64_t)v9);
    v24 = (float32x4_t *)sub_1B1A12038((uint64_t)&type metadata for Position, (uint64_t)&off_1E63C2398, v16, v17, v19, (uint64_t)v9);
    v25 = (float32x4_t *)sub_1B1A12038((uint64_t)&type metadata for ParticleTarget, (uint64_t)&off_1E63802C8, v16, v17, v19, (uint64_t)v9);
    if (v16)
    {
      if (!v19)
        goto LABEL_20;
      v13 = v68;
      v27 = v59;
      v26.i32[3] = v60;
      v29 = v57;
      v28 = v58;
      do
      {
        v30 = v26.i32[3];
        v26 = *v24;
        v26.i32[3] = v30;
        v31 = vsubq_f32(v26, *v25);
        v32 = vmulq_f32(v31, v31);
        v33 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v32, 2), vaddq_f32(v32, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v32.f32, 1))).f32[0]);
        if (v33 > 0.0)
        {
          v34 = vmulq_n_f32(v31, v4 * (float)((float)(v7 - v33) / v33));
          v35 = *v23;
          v36 = vaddq_f32(v34, *v23);
          v35.i32[3] = v29.i32[3];
          v34.i32[3] = v28.i32[3];
          v36.i32[3] = v27.i32[3];
          v27 = v36;
          v36.i32[3] = 0;
          *v23 = v36;
          v28 = v34;
          v29 = v35;
        }
        ++v25;
        ++v24;
        ++v23;
        --v19;
      }
      while (v19);
      v57 = v29;
      v58 = v28;
      v59 = v27;
      v60 = v26.i32[3];
      v10 = v62;
      v11 = v61;
    }
    else
    {
      if ((_DWORD)v15 == (_DWORD)v67)
      {
LABEL_20:
        v10 = v62;
        v11 = v61;
        v13 = v68;
        goto LABEL_26;
      }
      v37 = v67 - v15;
      v38 = &v25[v15];
      v39 = &v24[v15];
      v40 = &v23[v15];
      v10 = v62;
      v11 = v61;
      v13 = v68;
      v42 = v55;
      v41.i32[3] = v56;
      v44 = v53;
      v43 = v54;
      do
      {
        v45 = v41.i32[3];
        v41 = *v39;
        v41.i32[3] = v45;
        v46 = vsubq_f32(v41, *v38);
        v47 = vmulq_f32(v46, v46);
        v48 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v47, 2), vaddq_f32(v47, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v47.f32, 1))).f32[0]);
        if (v48 > 0.0)
        {
          v49 = vmulq_n_f32(v46, v4 * (float)((float)(v7 - v48) / v48));
          v50 = *v40;
          v51 = vaddq_f32(v49, *v40);
          v50.i32[3] = v44.i32[3];
          v49.i32[3] = v43.i32[3];
          v51.i32[3] = v42.i32[3];
          v42 = v51;
          v51.i32[3] = 0;
          *v40 = v51;
          v43 = v49;
          v44 = v50;
        }
        ++v38;
        ++v39;
        ++v40;
        --v37;
      }
      while (v37);
      v53 = v44;
      v54 = v43;
      v55 = v42;
      v56 = v41.i32[3];
    }
LABEL_26:
    sub_1B1F05D48(v9, (unsigned __int16 **)v79, (uint64_t)v86);
    sub_1B1F03804((char *)v18);
    ecs_stack_allocator_pop_snapshot(v10);
    if ((v11 & 1) != 0)
    {
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v18 + 344));
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v18 + 376));
    }
    swift_release();
    ++v12;
  }
  while (v12 != v66);
  sub_1B19ED720((uint64_t)v69);
LABEL_31:
  swift_release();
  sub_1B19ED748(v71);
  return sub_1B19ED748(v71);
}

ValueMetadata *type metadata accessor for DistanceConstraint()
{
  return &type metadata for DistanceConstraint;
}

unint64_t sub_1B1FCF0D4()
{
  unint64_t result;

  result = qword_1EEF61C90;
  if (!qword_1EEF61C90)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22ABCA8, &type metadata for DistanceConstraint.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF61C90);
  }
  return result;
}

void sub_1B1FCF118(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_1B1FCF0D4();
    v7 = a3(a1, &type metadata for DistanceConstraint.CodingKeys, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t storeEnumTagSinglePayload for DistanceConstraint.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1B1FCF1B4 + 4 * byte_1B22ABAD0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1B1FCF1D4 + 4 * byte_1B22ABAD5[v4]))();
}

_BYTE *sub_1B1FCF1B4(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1B1FCF1D4(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1B1FCF1DC(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1B1FCF1E4(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1B1FCF1EC(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1B1FCF1F4(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for DistanceConstraint.CodingKeys()
{
  return &type metadata for DistanceConstraint.CodingKeys;
}

unint64_t sub_1B1FCF214()
{
  unint64_t result;

  result = qword_1EEF61CA0;
  if (!qword_1EEF61CA0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22ABC80, &type metadata for DistanceConstraint.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF61CA0);
  }
  return result;
}

unint64_t sub_1B1FCF25C()
{
  unint64_t result;

  result = qword_1EEF61CA8;
  if (!qword_1EEF61CA8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22ABBF0, &type metadata for DistanceConstraint.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF61CA8);
  }
  return result;
}

unint64_t sub_1B1FCF2A4()
{
  unint64_t result;

  result = qword_1EEF61CB0;
  if (!qword_1EEF61CB0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22ABC18, &type metadata for DistanceConstraint.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF61CB0);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for TesselationDescriptor(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 48))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 16);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for TesselationDescriptor(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 48) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for TesselationDescriptor()
{
  return &type metadata for TesselationDescriptor;
}

uint64_t destroy for RenderPipelineDescriptor(_QWORD *a1)
{
  if (a1[1])
  {
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (a1[6])
  {
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (a1[11])
  {
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (a1[16])
  {
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t initializeWithCopy for RenderPipelineDescriptor(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;

  v4 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v4;
    v5 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 24) = v5;
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    v6 = *(_QWORD *)(a2 + 48);
    if (v6)
      goto LABEL_3;
  }
  else
  {
    v12 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v12;
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    v6 = *(_QWORD *)(a2 + 48);
    if (v6)
    {
LABEL_3:
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      *(_QWORD *)(a1 + 48) = v6;
      v7 = *(_QWORD *)(a2 + 64);
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
      *(_QWORD *)(a1 + 64) = v7;
      *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
      swift_bridgeObjectRetain();
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain();
      v8 = *(_QWORD *)(a2 + 88);
      if (v8)
        goto LABEL_4;
LABEL_8:
      v14 = *(_OWORD *)(a2 + 96);
      *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 96) = v14;
      *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
      v10 = *(_QWORD *)(a2 + 128);
      if (v10)
        goto LABEL_5;
LABEL_9:
      v15 = *(_OWORD *)(a2 + 136);
      *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
      *(_OWORD *)(a1 + 136) = v15;
      *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
      goto LABEL_10;
    }
  }
  v13 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = v13;
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  v8 = *(_QWORD *)(a2 + 88);
  if (!v8)
    goto LABEL_8;
LABEL_4:
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v8;
  v9 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v9;
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  v10 = *(_QWORD *)(a2 + 128);
  if (!v10)
    goto LABEL_9;
LABEL_5:
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = v10;
  v11 = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = v11;
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
LABEL_10:
  v16 = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 168) = v16;
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
  *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
  *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  memcpy((void *)(a1 + 272), (const void *)(a2 + 272), 0x1B9uLL);
  *(_QWORD *)(a1 + 720) = *(_QWORD *)(a2 + 720);
  *(_QWORD *)(a1 + 728) = *(_QWORD *)(a2 + 728);
  *(_QWORD *)(a1 + 736) = *(_QWORD *)(a2 + 736);
  v17 = *(_OWORD *)(a2 + 760);
  *(_OWORD *)(a1 + 744) = *(_OWORD *)(a2 + 744);
  *(_OWORD *)(a1 + 760) = v17;
  *(_OWORD *)(a1 + 776) = *(_OWORD *)(a2 + 776);
  *(_WORD *)(a1 + 792) = *(_WORD *)(a2 + 792);
  *(_QWORD *)(a1 + 800) = *(_QWORD *)(a2 + 800);
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for RenderPipelineDescriptor(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  _OWORD *v9;
  _OWORD *v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _OWORD *v16;
  _OWORD *v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _OWORD *v23;
  _OWORD *v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;

  v4 = *((_QWORD *)a2 + 1);
  if (*(_QWORD *)(a1 + 8))
  {
    if (v4)
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_QWORD *)(a1 + 8) = *((_QWORD *)a2 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 3);
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_1B1B3D598(a1);
      v5 = *((_QWORD *)a2 + 4);
      v6 = a2[1];
      *(_OWORD *)a1 = *a2;
      *(_OWORD *)(a1 + 16) = v6;
      *(_QWORD *)(a1 + 32) = v5;
    }
  }
  else if (v4)
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = *((_QWORD *)a2 + 1);
    *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
    *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 3);
    *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v7 = *a2;
    v8 = a2[1];
    *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
    *(_OWORD *)a1 = v7;
    *(_OWORD *)(a1 + 16) = v8;
  }
  v9 = (_OWORD *)(a1 + 40);
  v10 = (__int128 *)((char *)a2 + 40);
  v11 = *((_QWORD *)a2 + 6);
  if (*(_QWORD *)(a1 + 48))
  {
    if (v11)
    {
      *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
      *(_QWORD *)(a1 + 48) = *((_QWORD *)a2 + 6);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 56) = *((_QWORD *)a2 + 7);
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 8);
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      *(_QWORD *)(a1 + 72) = *((_QWORD *)a2 + 9);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_1B1B3D598(a1 + 40);
      v12 = *((_QWORD *)a2 + 9);
      v13 = *(__int128 *)((char *)a2 + 56);
      *v9 = *v10;
      *(_OWORD *)(a1 + 56) = v13;
      *(_QWORD *)(a1 + 72) = v12;
    }
  }
  else if (v11)
  {
    *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
    *(_QWORD *)(a1 + 48) = *((_QWORD *)a2 + 6);
    *(_QWORD *)(a1 + 56) = *((_QWORD *)a2 + 7);
    *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 8);
    *(_QWORD *)(a1 + 72) = *((_QWORD *)a2 + 9);
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v14 = *v10;
    v15 = *(__int128 *)((char *)a2 + 56);
    *(_QWORD *)(a1 + 72) = *((_QWORD *)a2 + 9);
    *v9 = v14;
    *(_OWORD *)(a1 + 56) = v15;
  }
  v16 = (_OWORD *)(a1 + 80);
  v17 = a2 + 5;
  v18 = *((_QWORD *)a2 + 11);
  if (*(_QWORD *)(a1 + 88))
  {
    if (v18)
    {
      *(_QWORD *)(a1 + 80) = *((_QWORD *)a2 + 10);
      *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 11);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 96) = *((_QWORD *)a2 + 12);
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      *(_QWORD *)(a1 + 104) = *((_QWORD *)a2 + 13);
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      *(_QWORD *)(a1 + 112) = *((_QWORD *)a2 + 14);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_1B1B3D598(a1 + 80);
      v19 = *((_QWORD *)a2 + 14);
      v20 = a2[6];
      *v16 = *v17;
      *(_OWORD *)(a1 + 96) = v20;
      *(_QWORD *)(a1 + 112) = v19;
    }
  }
  else if (v18)
  {
    *(_QWORD *)(a1 + 80) = *((_QWORD *)a2 + 10);
    *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 11);
    *(_QWORD *)(a1 + 96) = *((_QWORD *)a2 + 12);
    *(_QWORD *)(a1 + 104) = *((_QWORD *)a2 + 13);
    *(_QWORD *)(a1 + 112) = *((_QWORD *)a2 + 14);
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v21 = *v17;
    v22 = a2[6];
    *(_QWORD *)(a1 + 112) = *((_QWORD *)a2 + 14);
    *v16 = v21;
    *(_OWORD *)(a1 + 96) = v22;
  }
  v23 = (_OWORD *)(a1 + 120);
  v24 = (__int128 *)((char *)a2 + 120);
  v25 = *((_QWORD *)a2 + 16);
  if (*(_QWORD *)(a1 + 128))
  {
    if (v25)
    {
      *(_QWORD *)(a1 + 120) = *((_QWORD *)a2 + 15);
      *(_QWORD *)(a1 + 128) = *((_QWORD *)a2 + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 136) = *((_QWORD *)a2 + 17);
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      *(_QWORD *)(a1 + 144) = *((_QWORD *)a2 + 18);
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      *(_QWORD *)(a1 + 152) = *((_QWORD *)a2 + 19);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_1B1B3D598(a1 + 120);
      v26 = *((_QWORD *)a2 + 19);
      v27 = *(__int128 *)((char *)a2 + 136);
      *v23 = *v24;
      *(_OWORD *)(a1 + 136) = v27;
      *(_QWORD *)(a1 + 152) = v26;
    }
  }
  else if (v25)
  {
    *(_QWORD *)(a1 + 120) = *((_QWORD *)a2 + 15);
    *(_QWORD *)(a1 + 128) = *((_QWORD *)a2 + 16);
    *(_QWORD *)(a1 + 136) = *((_QWORD *)a2 + 17);
    *(_QWORD *)(a1 + 144) = *((_QWORD *)a2 + 18);
    *(_QWORD *)(a1 + 152) = *((_QWORD *)a2 + 19);
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v28 = *v24;
    v29 = *(__int128 *)((char *)a2 + 136);
    *(_QWORD *)(a1 + 152) = *((_QWORD *)a2 + 19);
    *v23 = v28;
    *(_OWORD *)(a1 + 136) = v29;
  }
  *(_QWORD *)(a1 + 160) = *((_QWORD *)a2 + 20);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 168) = *((_QWORD *)a2 + 21);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(_QWORD *)(a1 + 176) = *((_QWORD *)a2 + 22);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 184) = *((_QWORD *)a2 + 23);
  *(_QWORD *)(a1 + 192) = *((_QWORD *)a2 + 24);
  *(_QWORD *)(a1 + 200) = *((_QWORD *)a2 + 25);
  *(_QWORD *)(a1 + 208) = *((_QWORD *)a2 + 26);
  *(_QWORD *)(a1 + 216) = *((_QWORD *)a2 + 27);
  *(_QWORD *)(a1 + 224) = *((_QWORD *)a2 + 28);
  *(_QWORD *)(a1 + 232) = *((_QWORD *)a2 + 29);
  *(_QWORD *)(a1 + 240) = *((_QWORD *)a2 + 30);
  *(_QWORD *)(a1 + 248) = *((_QWORD *)a2 + 31);
  *(_QWORD *)(a1 + 256) = *((_QWORD *)a2 + 32);
  *(_QWORD *)(a1 + 264) = *((_QWORD *)a2 + 33);
  *(_QWORD *)(a1 + 272) = *((_QWORD *)a2 + 34);
  *(_QWORD *)(a1 + 280) = *((_QWORD *)a2 + 35);
  *(_QWORD *)(a1 + 288) = *((_QWORD *)a2 + 36);
  *(_QWORD *)(a1 + 296) = *((_QWORD *)a2 + 37);
  *(_QWORD *)(a1 + 304) = *((_QWORD *)a2 + 38);
  *(_QWORD *)(a1 + 312) = *((_QWORD *)a2 + 39);
  *(_BYTE *)(a1 + 320) = *((_BYTE *)a2 + 320);
  *(_QWORD *)(a1 + 328) = *((_QWORD *)a2 + 41);
  *(_QWORD *)(a1 + 336) = *((_QWORD *)a2 + 42);
  *(_QWORD *)(a1 + 344) = *((_QWORD *)a2 + 43);
  *(_QWORD *)(a1 + 352) = *((_QWORD *)a2 + 44);
  *(_QWORD *)(a1 + 360) = *((_QWORD *)a2 + 45);
  *(_QWORD *)(a1 + 368) = *((_QWORD *)a2 + 46);
  *(_BYTE *)(a1 + 376) = *((_BYTE *)a2 + 376);
  *(_QWORD *)(a1 + 384) = *((_QWORD *)a2 + 48);
  *(_QWORD *)(a1 + 392) = *((_QWORD *)a2 + 49);
  *(_QWORD *)(a1 + 400) = *((_QWORD *)a2 + 50);
  *(_QWORD *)(a1 + 408) = *((_QWORD *)a2 + 51);
  *(_QWORD *)(a1 + 416) = *((_QWORD *)a2 + 52);
  *(_QWORD *)(a1 + 424) = *((_QWORD *)a2 + 53);
  *(_BYTE *)(a1 + 432) = *((_BYTE *)a2 + 432);
  *(_QWORD *)(a1 + 440) = *((_QWORD *)a2 + 55);
  *(_QWORD *)(a1 + 448) = *((_QWORD *)a2 + 56);
  *(_QWORD *)(a1 + 456) = *((_QWORD *)a2 + 57);
  *(_QWORD *)(a1 + 464) = *((_QWORD *)a2 + 58);
  *(_QWORD *)(a1 + 472) = *((_QWORD *)a2 + 59);
  *(_QWORD *)(a1 + 480) = *((_QWORD *)a2 + 60);
  *(_BYTE *)(a1 + 488) = *((_BYTE *)a2 + 488);
  *(_QWORD *)(a1 + 496) = *((_QWORD *)a2 + 62);
  *(_QWORD *)(a1 + 504) = *((_QWORD *)a2 + 63);
  *(_QWORD *)(a1 + 512) = *((_QWORD *)a2 + 64);
  *(_QWORD *)(a1 + 520) = *((_QWORD *)a2 + 65);
  *(_QWORD *)(a1 + 528) = *((_QWORD *)a2 + 66);
  *(_QWORD *)(a1 + 536) = *((_QWORD *)a2 + 67);
  *(_BYTE *)(a1 + 544) = *((_BYTE *)a2 + 544);
  *(_QWORD *)(a1 + 552) = *((_QWORD *)a2 + 69);
  *(_QWORD *)(a1 + 560) = *((_QWORD *)a2 + 70);
  *(_QWORD *)(a1 + 568) = *((_QWORD *)a2 + 71);
  *(_QWORD *)(a1 + 576) = *((_QWORD *)a2 + 72);
  *(_QWORD *)(a1 + 584) = *((_QWORD *)a2 + 73);
  *(_QWORD *)(a1 + 592) = *((_QWORD *)a2 + 74);
  *(_BYTE *)(a1 + 600) = *((_BYTE *)a2 + 600);
  *(_QWORD *)(a1 + 608) = *((_QWORD *)a2 + 76);
  *(_QWORD *)(a1 + 616) = *((_QWORD *)a2 + 77);
  *(_QWORD *)(a1 + 624) = *((_QWORD *)a2 + 78);
  *(_QWORD *)(a1 + 632) = *((_QWORD *)a2 + 79);
  *(_QWORD *)(a1 + 640) = *((_QWORD *)a2 + 80);
  *(_QWORD *)(a1 + 648) = *((_QWORD *)a2 + 81);
  *(_BYTE *)(a1 + 656) = *((_BYTE *)a2 + 656);
  *(_QWORD *)(a1 + 664) = *((_QWORD *)a2 + 83);
  *(_QWORD *)(a1 + 672) = *((_QWORD *)a2 + 84);
  *(_QWORD *)(a1 + 680) = *((_QWORD *)a2 + 85);
  *(_QWORD *)(a1 + 688) = *((_QWORD *)a2 + 86);
  *(_QWORD *)(a1 + 696) = *((_QWORD *)a2 + 87);
  *(_QWORD *)(a1 + 704) = *((_QWORD *)a2 + 88);
  *(_BYTE *)(a1 + 712) = *((_BYTE *)a2 + 712);
  *(_QWORD *)(a1 + 720) = *((_QWORD *)a2 + 90);
  *(_QWORD *)(a1 + 728) = *((_QWORD *)a2 + 91);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 736) = *((_QWORD *)a2 + 92);
  v30 = *(__int128 *)((char *)a2 + 744);
  v31 = *(__int128 *)((char *)a2 + 776);
  *(_OWORD *)(a1 + 760) = *(__int128 *)((char *)a2 + 760);
  *(_OWORD *)(a1 + 776) = v31;
  *(_OWORD *)(a1 + 744) = v30;
  *(_BYTE *)(a1 + 792) = *((_BYTE *)a2 + 792);
  *(_BYTE *)(a1 + 793) = *((_BYTE *)a2 + 793);
  *(_QWORD *)(a1 + 800) = *((_QWORD *)a2 + 100);
  return a1;
}

void *initializeWithTake for RenderPipelineDescriptor(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x328uLL);
}

uint64_t assignWithTake for RenderPipelineDescriptor(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;

  if (*(_QWORD *)(a1 + 8))
  {
    v4 = *(_QWORD *)(a2 + 8);
    if (v4)
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_QWORD *)(a1 + 8) = v4;
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      swift_unknownObjectRelease();
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
      swift_unknownObjectRelease();
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    sub_1B1B3D598(a1);
  }
  v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
LABEL_6:
  if (*(_QWORD *)(a1 + 48))
  {
    v6 = *(_QWORD *)(a2 + 48);
    if (v6)
    {
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      *(_QWORD *)(a1 + 48) = v6;
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
      swift_unknownObjectRelease();
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      swift_unknownObjectRelease();
      *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
      swift_bridgeObjectRelease();
      goto LABEL_11;
    }
    sub_1B1B3D598(a1 + 40);
  }
  v7 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = v7;
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
LABEL_11:
  if (*(_QWORD *)(a1 + 88))
  {
    v8 = *(_QWORD *)(a2 + 88);
    if (v8)
    {
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
      *(_QWORD *)(a1 + 88) = v8;
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
      swift_unknownObjectRelease();
      *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
      swift_unknownObjectRelease();
      *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
      swift_bridgeObjectRelease();
      goto LABEL_16;
    }
    sub_1B1B3D598(a1 + 80);
  }
  v9 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v9;
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
LABEL_16:
  if (!*(_QWORD *)(a1 + 128))
  {
LABEL_20:
    v11 = *(_OWORD *)(a2 + 136);
    *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(a1 + 136) = v11;
    *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
    goto LABEL_21;
  }
  v10 = *(_QWORD *)(a2 + 128);
  if (!v10)
  {
    sub_1B1B3D598(a1 + 120);
    goto LABEL_20;
  }
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = v10;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  swift_unknownObjectRelease();
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  swift_unknownObjectRelease();
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  swift_bridgeObjectRelease();
LABEL_21:
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  swift_unknownObjectRelease();
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
  *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
  *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
  v12 = *(_OWORD *)(a2 + 288);
  *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 272);
  *(_OWORD *)(a1 + 288) = v12;
  *(_OWORD *)(a1 + 304) = *(_OWORD *)(a2 + 304);
  *(_BYTE *)(a1 + 320) = *(_BYTE *)(a2 + 320);
  *(_QWORD *)(a1 + 328) = *(_QWORD *)(a2 + 328);
  v13 = *(_OWORD *)(a2 + 352);
  *(_OWORD *)(a1 + 336) = *(_OWORD *)(a2 + 336);
  *(_OWORD *)(a1 + 352) = v13;
  *(_QWORD *)(a1 + 368) = *(_QWORD *)(a2 + 368);
  *(_BYTE *)(a1 + 376) = *(_BYTE *)(a2 + 376);
  v14 = *(_OWORD *)(a2 + 400);
  *(_OWORD *)(a1 + 384) = *(_OWORD *)(a2 + 384);
  *(_OWORD *)(a1 + 400) = v14;
  *(_OWORD *)(a1 + 416) = *(_OWORD *)(a2 + 416);
  *(_BYTE *)(a1 + 432) = *(_BYTE *)(a2 + 432);
  *(_QWORD *)(a1 + 440) = *(_QWORD *)(a2 + 440);
  v15 = *(_OWORD *)(a2 + 464);
  *(_OWORD *)(a1 + 448) = *(_OWORD *)(a2 + 448);
  *(_OWORD *)(a1 + 464) = v15;
  *(_QWORD *)(a1 + 480) = *(_QWORD *)(a2 + 480);
  *(_BYTE *)(a1 + 488) = *(_BYTE *)(a2 + 488);
  v16 = *(_OWORD *)(a2 + 512);
  *(_OWORD *)(a1 + 496) = *(_OWORD *)(a2 + 496);
  *(_OWORD *)(a1 + 512) = v16;
  *(_OWORD *)(a1 + 528) = *(_OWORD *)(a2 + 528);
  *(_BYTE *)(a1 + 544) = *(_BYTE *)(a2 + 544);
  *(_QWORD *)(a1 + 552) = *(_QWORD *)(a2 + 552);
  v17 = *(_OWORD *)(a2 + 576);
  *(_OWORD *)(a1 + 560) = *(_OWORD *)(a2 + 560);
  *(_OWORD *)(a1 + 576) = v17;
  *(_QWORD *)(a1 + 592) = *(_QWORD *)(a2 + 592);
  *(_BYTE *)(a1 + 600) = *(_BYTE *)(a2 + 600);
  v18 = *(_OWORD *)(a2 + 624);
  *(_OWORD *)(a1 + 608) = *(_OWORD *)(a2 + 608);
  *(_OWORD *)(a1 + 624) = v18;
  *(_OWORD *)(a1 + 640) = *(_OWORD *)(a2 + 640);
  *(_BYTE *)(a1 + 656) = *(_BYTE *)(a2 + 656);
  *(_QWORD *)(a1 + 664) = *(_QWORD *)(a2 + 664);
  v19 = *(_OWORD *)(a2 + 688);
  *(_OWORD *)(a1 + 672) = *(_OWORD *)(a2 + 672);
  *(_OWORD *)(a1 + 688) = v19;
  *(_QWORD *)(a1 + 704) = *(_QWORD *)(a2 + 704);
  *(_BYTE *)(a1 + 712) = *(_BYTE *)(a2 + 712);
  *(_QWORD *)(a1 + 720) = *(_QWORD *)(a2 + 720);
  *(_QWORD *)(a1 + 728) = *(_QWORD *)(a2 + 728);
  swift_release();
  *(_QWORD *)(a1 + 736) = *(_QWORD *)(a2 + 736);
  v20 = *(_OWORD *)(a2 + 760);
  *(_OWORD *)(a1 + 744) = *(_OWORD *)(a2 + 744);
  *(_OWORD *)(a1 + 760) = v20;
  *(_OWORD *)(a1 + 776) = *(_OWORD *)(a2 + 776);
  *(_BYTE *)(a1 + 792) = *(_BYTE *)(a2 + 792);
  *(_BYTE *)(a1 + 793) = *(_BYTE *)(a2 + 793);
  *(_QWORD *)(a1 + 800) = *(_QWORD *)(a2 + 800);
  return a1;
}

uint64_t getEnumTagSinglePayload for RenderPipelineDescriptor(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 808))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for RenderPipelineDescriptor(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 776) = 0u;
    *(_OWORD *)(result + 792) = 0u;
    *(_OWORD *)(result + 760) = 0u;
    *(_OWORD *)(result + 744) = 0u;
    *(_OWORD *)(result + 728) = 0u;
    *(_OWORD *)(result + 712) = 0u;
    *(_OWORD *)(result + 696) = 0u;
    *(_OWORD *)(result + 680) = 0u;
    *(_OWORD *)(result + 664) = 0u;
    *(_OWORD *)(result + 648) = 0u;
    *(_OWORD *)(result + 632) = 0u;
    *(_OWORD *)(result + 616) = 0u;
    *(_OWORD *)(result + 600) = 0u;
    *(_OWORD *)(result + 584) = 0u;
    *(_OWORD *)(result + 568) = 0u;
    *(_OWORD *)(result + 552) = 0u;
    *(_OWORD *)(result + 536) = 0u;
    *(_OWORD *)(result + 520) = 0u;
    *(_OWORD *)(result + 504) = 0u;
    *(_OWORD *)(result + 488) = 0u;
    *(_OWORD *)(result + 472) = 0u;
    *(_OWORD *)(result + 456) = 0u;
    *(_OWORD *)(result + 440) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 808) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 808) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for RenderPipelineDescriptor()
{
  return &type metadata for RenderPipelineDescriptor;
}

uint64_t sub_1B1FD0280(void *a1)
{
  uint64_t v1;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  __int128 v25;
  __int128 v26;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33[5];
  uint64_t v34[5];
  _OWORD v35[2];
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  _OWORD v40[2];
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  _BYTE v45[8];
  _BYTE v46[8];
  uint64_t v47;
  _BYTE v48[8];
  _BYTE v49[8];
  uint64_t v50;
  _BYTE __dst[441];
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  _OWORD v56[2];
  _OWORD v57[9];
  _BYTE v58[40];
  _BYTE v59[40];
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  _BYTE v65[80];
  _BYTE v66[80];
  _QWORD v67[5];
  _QWORD v68[5];
  uint64_t v69;
  _QWORD v70[3];

  sub_1B222A0CC();
  v3 = *(_OWORD *)(v1 + 144);
  v57[6] = *(_OWORD *)(v1 + 128);
  v57[7] = v3;
  v57[8] = *(_OWORD *)(v1 + 160);
  v4 = *(_OWORD *)(v1 + 80);
  v57[2] = *(_OWORD *)(v1 + 64);
  v57[3] = v4;
  v5 = *(_OWORD *)(v1 + 112);
  v57[4] = *(_OWORD *)(v1 + 96);
  v57[5] = v5;
  v6 = *(_OWORD *)(v1 + 16);
  v56[0] = *(_OWORD *)v1;
  v56[1] = v6;
  v7 = *(_OWORD *)(v1 + 48);
  v57[0] = *(_OWORD *)(v1 + 32);
  v57[1] = v7;
  sub_1B19F66A0((uint64_t)v56, (uint64_t)v59, (unint64_t *)&qword_1ED4B7880);
  sub_1B19F66A0((uint64_t)v59, (uint64_t)v67, (unint64_t *)&qword_1ED4B7880);
  v8 = MEMORY[0x1E0DEE9D8];
  if (v67[1])
  {
    v9 = (void *)v67[3];
    v10 = *(_QWORD *)(v1 + 176) ? *(_QWORD *)(v1 + 176) : MEMORY[0x1E0DEE9D8];
    swift_bridgeObjectRetain();
    sub_1B1BD35A8(v10, a1, v9, v33);
    swift_bridgeObjectRelease();
    sub_1B19F66A0((uint64_t)v33, (uint64_t)v40, (unint64_t *)&qword_1ED4B7880);
    if (*((_QWORD *)&v40[0] + 1))
    {
      v42 = v40[0];
      v43 = v40[1];
      v44 = v41;
      sub_1B2228824();
      v11 = v44;
      v47 = v44;
      sub_1B222A078();
      v12 = *(_QWORD *)(v11 + 16);
      if (v12)
      {
        v13 = v11 + 64;
        do
        {
          v14 = *(_QWORD *)(v13 - 32);
          v15 = *(_QWORD *)(v13 - 24);
          v16 = *(unsigned __int8 *)(v13 - 16);
          sub_1B1B2A86C(v13, (uint64_t)v66);
          sub_1B222A078();
          if (v16 == 1)
          {
            swift_bridgeObjectRetain();
            sub_1B2228824();
          }
          else
          {
            sub_1B222A078();
          }
          v13 += 112;
          sub_1B1B29888();
          sub_1B1B40E74(v14, v15, v16);
          --v12;
        }
        while (v12);
      }
      sub_1B1E275E8((uint64_t)&v43 + 8, (uint64_t)v46, (unint64_t *)&qword_1ED4BA5E0, (unint64_t *)&qword_1ED4BA5D0);
      sub_1B1E275E8((uint64_t)v46, (uint64_t)v70, (unint64_t *)&qword_1ED4BA5E0, (unint64_t *)&qword_1ED4BA5D0);
      sub_1B222A078();
      swift_bridgeObjectRelease();
      sub_1B1E275E8((uint64_t)&v43, (uint64_t)v45, (unint64_t *)&unk_1ED4BA660, (unint64_t *)&unk_1ED4BA650);
      sub_1B1B40274((uint64_t)v45);
      sub_1B1B40274((uint64_t)v46);
      sub_1B1B28C6C((uint64_t)&v47);
    }
  }
  sub_1B19F66A0((uint64_t)v57 + 8, (uint64_t)v58, (unint64_t *)&qword_1ED4B7880);
  sub_1B19F66A0((uint64_t)v58, (uint64_t)v68, (unint64_t *)&qword_1ED4B7880);
  if (v68[1])
  {
    v17 = (void *)v68[3];
    v18 = *(_QWORD *)(v1 + 176) ? *(_QWORD *)(v1 + 176) : v8;
    swift_bridgeObjectRetain();
    sub_1B1BD35A8(v18, a1, v17, v34);
    swift_bridgeObjectRelease();
    sub_1B19F66A0((uint64_t)v34, (uint64_t)v35, (unint64_t *)&qword_1ED4B7880);
    if (*((_QWORD *)&v35[0] + 1))
    {
      v37 = v35[0];
      v38 = v35[1];
      v39 = v36;
      sub_1B2228824();
      v19 = v39;
      v50 = v39;
      sub_1B222A078();
      v20 = *(_QWORD *)(v19 + 16);
      if (v20)
      {
        v21 = v19 + 64;
        do
        {
          v22 = *(_QWORD *)(v21 - 32);
          v23 = *(_QWORD *)(v21 - 24);
          v24 = *(unsigned __int8 *)(v21 - 16);
          sub_1B1B2A86C(v21, (uint64_t)v65);
          sub_1B222A078();
          if (v24 == 1)
          {
            swift_bridgeObjectRetain();
            sub_1B2228824();
          }
          else
          {
            sub_1B222A078();
          }
          v21 += 112;
          sub_1B1B29888();
          sub_1B1B40E74(v22, v23, v24);
          --v20;
        }
        while (v20);
      }
      sub_1B1E275E8((uint64_t)&v38 + 8, (uint64_t)v49, (unint64_t *)&qword_1ED4BA5E0, (unint64_t *)&qword_1ED4BA5D0);
      sub_1B1E275E8((uint64_t)v49, (uint64_t)&v69, (unint64_t *)&qword_1ED4BA5E0, (unint64_t *)&qword_1ED4BA5D0);
      sub_1B222A078();
      swift_bridgeObjectRelease();
      sub_1B1E275E8((uint64_t)&v38, (uint64_t)v48, (unint64_t *)&unk_1ED4BA660, (unint64_t *)&unk_1ED4BA650);
      sub_1B1B40274((uint64_t)v48);
      sub_1B1B40274((uint64_t)v49);
      sub_1B1B28C6C((uint64_t)&v50);
    }
  }
  v25 = *(_OWORD *)(v1 + 200);
  v52 = *(_OWORD *)(v1 + 184);
  v53 = v25;
  v26 = *(_OWORD *)(v1 + 232);
  v54 = *(_OWORD *)(v1 + 216);
  v55 = v26;
  sub_1B1DC3544();
  sub_1B222A078();
  sub_1B222A078();
  sub_1B222A078();
  memcpy(__dst, (const void *)(v1 + 272), sizeof(__dst));
  sub_1B1DC35D0();
  if (*(_QWORD *)(v1 + 728))
  {
    sub_1B222A084();
    sub_1B222A078();
  }
  else
  {
    sub_1B222A084();
  }
  if (*(_BYTE *)(v1 + 760) == 2)
  {
    sub_1B222A084();
  }
  else
  {
    sub_1B222A084();
    sub_1B222A078();
    sub_1B222A078();
    sub_1B222A084();
    sub_1B222A078();
    sub_1B222A078();
    sub_1B222A078();
  }
  sub_1B222A078();
  sub_1B222A084();
  v62 = v30;
  v63 = v31;
  v64 = v32;
  v61 = v29;
  v60 = v28;
  return sub_1B222A0B4();
}

uint64_t sub_1B1FD0880()
{
  __int128 *v0;
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  _BYTE v9[16];
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _QWORD v27[2];

  *(_QWORD *)&v16 = 0;
  *((_QWORD *)&v16 + 1) = 0xE000000000000000;
  sub_1B2229430();
  swift_bridgeObjectRelease();
  v1 = v0[9];
  v24 = v0[8];
  v25 = v1;
  v26 = v0[10];
  v2 = v0[5];
  v20 = v0[4];
  v21 = v2;
  v3 = v0[7];
  v22 = v0[6];
  v23 = v3;
  v4 = v0[1];
  v16 = *v0;
  v17 = v4;
  v5 = v0[3];
  v18 = v0[2];
  v19 = v5;
  sub_1B2034800();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  sub_1B222A06C();
  sub_1B222A078();
  *(_QWORD *)&v10 = sub_1B222A0C0();
  sub_1B1B40D84();
  sub_1B2228944();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  v6 = *(__int128 *)((char *)v0 + 232);
  v12 = *(__int128 *)((char *)v0 + 216);
  v13 = v6;
  v14 = *(__int128 *)((char *)v0 + 248);
  v15 = *((_QWORD *)v0 + 33);
  v7 = *(__int128 *)((char *)v0 + 200);
  v10 = *(__int128 *)((char *)v0 + 184);
  v11 = v7;
  sub_1B1B6B3DC();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  sub_1B19F66A0((uint64_t)(v0 + 45), (uint64_t)v9, &qword_1ED4B7778);
  sub_1B19F66A0((uint64_t)v9, (uint64_t)v27, &qword_1ED4B7778);
  if (v27[1])
  {
    sub_1B222A06C();
    sub_1B222A078();
    sub_1B222A0C0();
    sub_1B2228944();
  }
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  sub_1B1C7B528(*((_QWORD *)v0 + 22));
  sub_1B2228890();
  swift_bridgeObjectRelease();
  return 0x205D50525BLL;
}

uint64_t sub_1B1FD0AF0(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_1B216D5C4(v2);
  v3 = *(_QWORD *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  result = sub_1B1FD0EA4(v5);
  *a1 = v2;
  return result;
}

uint64_t sub_1B1FD0B58()
{
  sub_1B222A06C();
  sub_1B222A078();
  sub_1B222A078();
  sub_1B222A084();
  sub_1B222A078();
  sub_1B222A078();
  sub_1B222A078();
  return sub_1B222A0C0();
}

uint64_t sub_1B1FD0BFC()
{
  sub_1B222A078();
  sub_1B222A078();
  sub_1B222A084();
  sub_1B222A078();
  sub_1B222A078();
  return sub_1B222A078();
}

uint64_t sub_1B1FD0C70()
{
  sub_1B222A06C();
  sub_1B222A078();
  sub_1B222A078();
  sub_1B222A084();
  sub_1B222A078();
  sub_1B222A078();
  sub_1B222A078();
  return sub_1B222A0C0();
}

BOOL sub_1B1FD0D10(_OWORD *a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[3];
  _OWORD v8[3];

  v2 = a1[1];
  v7[0] = *a1;
  v7[1] = v2;
  v3 = *a2;
  v4 = a2[1];
  v7[2] = a1[2];
  v8[0] = v3;
  v5 = a2[2];
  v8[1] = v4;
  v8[2] = v5;
  return sub_1B1FD1BD4((uint64_t)v7, (uint64_t)v8);
}

uint64_t sub_1B1FD0D54()
{
  sub_1B222A06C();
  sub_1B222A078();
  return sub_1B222A0C0();
}

uint64_t sub_1B1FD0D98()
{
  return sub_1B222A078();
}

uint64_t sub_1B1FD0DC0()
{
  sub_1B222A06C();
  sub_1B222A078();
  return sub_1B222A0C0();
}

BOOL sub_1B1FD0E00(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a1 + 800) == *(_QWORD *)(a2 + 800);
}

unint64_t sub_1B1FD0E18()
{
  unint64_t result;

  result = qword_1EEF61CC0;
  if (!qword_1EEF61CC0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22ABD3C, &type metadata for RenderPipelineDescriptor);
    atomic_store(result, (unint64_t *)&qword_1EEF61CC0);
  }
  return result;
}

unint64_t sub_1B1FD0E60()
{
  unint64_t result;

  result = qword_1EEF61CC8;
  if (!qword_1EEF61CC8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22ABDA4, &type metadata for TesselationDescriptor);
    atomic_store(result, (unint64_t *)&qword_1EEF61CC8);
  }
  return result;
}

uint64_t sub_1B1FD0EA4(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  int v17;
  uint64_t *v18;
  uint64_t v19;
  int v20;
  BOOL v21;
  uint64_t v22;
  int v23;
  unsigned __int8 *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t *v29;
  uint64_t v30;
  int v31;
  BOOL v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  char v46;
  char v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  _OWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  BOOL v60;
  unint64_t v61;
  unint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  BOOL v75;
  char *v76;
  char *v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  char *v86;
  char *v87;
  unint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  uint64_t v100;
  __int128 v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;

  v2 = v1;
  v4 = a1[1];
  result = sub_1B22299E8();
  if (result >= v4)
  {
    if (v4)
      return sub_1B1FD16D0(0, v4, 1, a1);
    return result;
  }
  v93 = result;
  if (v4 >= 0)
    v6 = v4;
  else
    v6 = v4 + 1;
  if (v4 < -1)
  {
    result = sub_1B222967C();
    __break(1u);
    return result;
  }
  v89 = a1;
  if (v4 < 2)
  {
    v9 = MEMORY[0x1E0DEE9D8];
    v103 = (char *)(MEMORY[0x1E0DEE9D8] + 32);
    if (v4 != 1)
    {
      v12 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
      v11 = (char *)MEMORY[0x1E0DEE9D8];
      goto LABEL_111;
    }
    v92 = MEMORY[0x1E0DEE9D8];
  }
  else
  {
    v7 = v6 >> 1;
    v8 = sub_1B2228B0C();
    *(_QWORD *)(v8 + 16) = v7;
    v92 = v8;
    v103 = (char *)(v8 + 32);
  }
  v10 = 0;
  v91 = *a1 + 16;
  v105 = *a1;
  v90 = *a1 - 112;
  v11 = (char *)MEMORY[0x1E0DEE9D8];
  v94 = v4;
  while (2)
  {
    v13 = v10++;
    v104 = v13;
    v95 = v11;
    if (v10 >= v4)
    {
LABEL_61:
      if (v10 >= v4)
        goto LABEL_84;
      goto LABEL_62;
    }
    v14 = v2;
    v15 = (uint64_t *)(v105 + 112 * v10);
    v16 = *v15;
    v17 = *((unsigned __int8 *)v15 + 16);
    v18 = (uint64_t *)(v105 + 112 * v13);
    v19 = *v18;
    v20 = *((unsigned __int8 *)v18 + 16);
    if (v17 != 1)
    {
      if ((v20 & 1) == 0)
      {
        if (v16 == v19)
        {
          v22 = v104 + 2;
          v2 = v14;
          if (v104 + 2 >= v4)
          {
            v10 = v104 + 2;
            goto LABEL_107;
          }
          v23 = 0;
          goto LABEL_28;
        }
        v23 = v16 < v19;
        goto LABEL_27;
      }
      goto LABEL_26;
    }
    if ((v20 & 1) == 0)
    {
LABEL_26:
      v23 = v20 & (v17 ^ 1);
      goto LABEL_27;
    }
    v21 = v16 == v19 && v15[1] == v18[1];
    if (v21 || (sub_1B2229D24() & 1) != 0)
    {
      v22 = v104 + 2;
      if (v104 + 2 >= v4)
      {
        v10 = v104 + 2;
        v2 = v14;
        goto LABEL_107;
      }
      v23 = 0;
      v2 = v14;
      goto LABEL_28;
    }
    v23 = sub_1B2229D24();
LABEL_27:
    v2 = v14;
    v13 = v104;
    v22 = v104 + 2;
    if (v104 + 2 >= v4)
      goto LABEL_50;
LABEL_28:
    v24 = (unsigned __int8 *)(v91 + 112 * v22);
    v25 = v22;
    do
    {
      v26 = v2;
      v22 = v25;
      v27 = *((_QWORD *)v24 - 2);
      v28 = *v24;
      v29 = (uint64_t *)(v105 + 112 * v10);
      v30 = *v29;
      v31 = *((unsigned __int8 *)v29 + 16);
      if (v28 != 1)
      {
        if ((v31 & 1) != 0)
        {
LABEL_40:
          v33 = v31 & (v28 ^ 1);
        }
        else
        {
          if (v27 == v30)
            goto LABEL_29;
          v33 = v27 < v30;
        }
LABEL_41:
        v2 = v26;
        if (((v23 ^ v33) & 1) != 0)
          goto LABEL_49;
        goto LABEL_30;
      }
      if ((v31 & 1) == 0)
        goto LABEL_40;
      v32 = v27 == v30 && *((_QWORD *)v24 - 1) == v29[1];
      if (!v32 && (sub_1B2229D24() & 1) == 0)
      {
        v33 = sub_1B2229D24();
        goto LABEL_41;
      }
LABEL_29:
      v2 = v26;
      if ((v23 & 1) != 0)
      {
        v13 = v104;
        if (v104 < v22)
          goto LABEL_52;
LABEL_60:
        v10 = v22;
        goto LABEL_61;
      }
LABEL_30:
      v24 += 112;
      v25 = v22 + 1;
      v10 = v22;
    }
    while (v22 + 1 < v4);
    ++v22;
LABEL_49:
    v13 = v104;
LABEL_50:
    v10 = v22;
    if ((v23 & 1) == 0)
      goto LABEL_61;
    if (v13 >= v22)
      goto LABEL_60;
LABEL_52:
    v34 = 112 * v22;
    v35 = v22;
    v36 = v13;
    v37 = 112 * v13;
    do
    {
      if (v36 != --v35)
      {
        v38 = v105 + v34;
        v39 = *(_BYTE *)(v105 + v37 + 16);
        v40 = *(_BYTE *)(v105 + v37 + 96);
        v96 = *(_OWORD *)(v105 + v37);
        v101 = *(_OWORD *)(v105 + v37 + 32);
        v98 = *(_OWORD *)(v105 + v37 + 64);
        v99 = *(_OWORD *)(v105 + v37 + 48);
        v97 = *(_OWORD *)(v105 + v37 + 80);
        memmove((void *)(v105 + v37), (const void *)(v105 + v34 - 112), 0x70uLL);
        *(_OWORD *)(v38 - 112) = v96;
        *(_BYTE *)(v38 - 96) = v39;
        *(_OWORD *)(v38 - 80) = v101;
        *(_OWORD *)(v38 - 64) = v99;
        *(_OWORD *)(v38 - 48) = v98;
        *(_OWORD *)(v38 - 32) = v97;
        *(_BYTE *)(v38 - 16) = v40;
      }
      ++v36;
      v34 -= 112;
      v37 += 112;
    }
    while (v36 < v35);
    v10 = v22;
    v4 = v94;
LABEL_107:
    v13 = v104;
    if (v10 >= v4)
    {
LABEL_84:
      v11 = v95;
      goto LABEL_85;
    }
LABEL_62:
    v11 = v95;
    if (v10 - v13 < v93)
    {
      v41 = v13 + v93;
      if (v13 + v93 >= v4)
        v41 = v4;
      v102 = v41;
      if (v10 != v41)
      {
        v100 = v2;
        v42 = v90 + 112 * v10;
        while (1)
        {
          v43 = v104;
          v44 = v42;
          while (1)
          {
            v56 = (_OWORD *)(v44 + 112);
            v57 = *(_QWORD *)(v44 + 112);
            v58 = *(_QWORD *)(v44 + 120);
            v59 = *(_QWORD *)v44;
            v45 = *(_BYTE *)(v44 + 16);
            if (*(_BYTE *)(v44 + 128) != 1)
              break;
            if ((*(_BYTE *)(v44 + 16) & 1) == 0)
              goto LABEL_67;
            v60 = v57 == v59 && v58 == *(_QWORD *)(v44 + 8);
            if (v60 || (sub_1B2229D24() & 1) != 0 || (sub_1B2229D24() & 1) == 0)
              goto LABEL_67;
            v57 = *(_QWORD *)(v44 + 112);
            v58 = *(_QWORD *)(v44 + 120);
            v46 = *(_BYTE *)(v44 + 128);
LABEL_73:
            v47 = *(_BYTE *)(v44 + 208);
            v48 = *(_OWORD *)(v44 + 144);
            v49 = *(_OWORD *)(v44 + 160);
            v50 = *(_OWORD *)(v44 + 176);
            v51 = *(_OWORD *)(v44 + 192);
            v52 = *(_OWORD *)(v44 + 80);
            *(_OWORD *)(v44 + 176) = *(_OWORD *)(v44 + 64);
            *(_OWORD *)(v44 + 192) = v52;
            *(_OWORD *)(v44 + 208) = *(_OWORD *)(v44 + 96);
            v53 = *(_OWORD *)(v44 + 16);
            *v56 = *(_OWORD *)v44;
            *(_OWORD *)(v44 + 128) = v53;
            v55 = *(_OWORD *)(v44 + 32);
            v54 = *(_OWORD *)(v44 + 48);
            *(_QWORD *)v44 = v57;
            *(_QWORD *)(v44 + 8) = v58;
            *(_BYTE *)(v44 + 16) = v46;
            *(_OWORD *)(v44 + 32) = v48;
            *(_OWORD *)(v44 + 48) = v49;
            *(_OWORD *)(v44 + 64) = v50;
            *(_OWORD *)(v44 + 80) = v51;
            *(_BYTE *)(v44 + 96) = v47;
            v44 -= 112;
            ++v43;
            v56[2] = v55;
            v56[3] = v54;
            if (v10 == v43)
              goto LABEL_67;
          }
          if (v57 < v59)
            v45 = 1;
          if ((v45 & 1) != 0)
            break;
LABEL_67:
          ++v10;
          v42 += 112;
          if (v10 == v102)
          {
            v10 = v102;
            v2 = v100;
            goto LABEL_84;
          }
        }
        v46 = 0;
        goto LABEL_73;
      }
    }
LABEL_85:
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v11 = sub_1B216CC74(0, *((_QWORD *)v11 + 2) + 1, 1, v11);
    v62 = *((_QWORD *)v11 + 2);
    v61 = *((_QWORD *)v11 + 3);
    v12 = v62 + 1;
    if (v62 >= v61 >> 1)
      v11 = sub_1B216CC74(v61 > 1, v62 + 1, 1, v11);
    *((_QWORD *)v11 + 2) = v12;
    v63 = v11 + 32;
    v64 = &v11[16 * v62 + 32];
    *(_QWORD *)v64 = v104;
    *((_QWORD *)v64 + 1) = v10;
    if (v62)
    {
      while (2)
      {
        v65 = v12 - 1;
        if (v12 >= 4)
        {
          v70 = &v63[16 * v12];
          v71 = *((_QWORD *)v70 - 7) - *((_QWORD *)v70 - 8);
          v68 = *((_QWORD *)v70 - 5) - *((_QWORD *)v70 - 6);
          v69 = v12 - 2;
          v72 = &v63[16 * v12 - 32];
          v66 = *(_QWORD *)v72;
          v67 = *((_QWORD *)v72 + 1);
          if (v68 - v66 + v67 >= v71)
          {
            v75 = v68 < *(_QWORD *)&v63[16 * v65 + 8] - *(_QWORD *)&v63[16 * v65];
          }
          else
          {
LABEL_94:
            v73 = v67 - v66;
            v74 = *(_QWORD *)&v63[16 * v65 + 8] - *(_QWORD *)&v63[16 * v65];
            if (v73 + v74 < v68)
              goto LABEL_97;
            v75 = v68 < v74;
          }
          if (v75)
            v65 = v69;
        }
        else
        {
          if (v12 == 3)
          {
            v66 = *((_QWORD *)v11 + 6);
            v67 = *((_QWORD *)v11 + 7);
            v68 = *((_QWORD *)v11 + 5) - *((_QWORD *)v11 + 4);
            v69 = 1;
            goto LABEL_94;
          }
          v73 = *(_QWORD *)&v63[16 * v12 - 24] - *(_QWORD *)&v63[16 * v12 - 32];
          v74 = *(_QWORD *)&v63[16 * v65 + 8] - *(_QWORD *)&v63[16 * v65];
LABEL_97:
          if (v74 < v73)
            goto LABEL_14;
        }
        v76 = v11;
        v77 = &v63[16 * v65 - 16];
        v78 = *(_QWORD *)v77;
        v79 = &v63[16 * v65];
        v80 = *((_QWORD *)v79 + 1);
        sub_1B1FD1834((char *)(v105 + 112 * *(_QWORD *)v77), (char *)(v105 + 112 * *(_QWORD *)v79), v105 + 112 * v80, v103);
        if (v2)
          goto LABEL_117;
        *(_QWORD *)v77 = v78;
        *((_QWORD *)v77 + 1) = v80;
        v11 = v76;
        v81 = *((_QWORD *)v76 + 2);
        v12 = v81 - 1;
        memmove(&v63[16 * v65], v79 + 16, 16 * (v81 - 1 - v65));
        *((_QWORD *)v11 + 2) = v81 - 1;
        if (v81 <= 2)
          goto LABEL_14;
        continue;
      }
    }
    v12 = 1;
LABEL_14:
    v4 = v94;
    if (v10 < v94)
      continue;
    break;
  }
  v9 = v92;
LABEL_111:
  v92 = v9;
  if (v12 >= 2)
  {
    v82 = *v89;
    do
    {
      v83 = *(_QWORD *)&v11[16 * v12];
      v84 = &v11[16 * v12 + 16];
      v85 = *((_QWORD *)v84 + 1);
      sub_1B1FD1834((char *)(v82 + 112 * v83), (char *)(v82 + 112 * *(_QWORD *)v84), v82 + 112 * v85, v103);
      if (v2)
        break;
      v86 = v11;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v86 = sub_1B216D510((uint64_t)v11);
      v87 = &v86[16 * v12];
      *(_QWORD *)v87 = v83;
      *((_QWORD *)v87 + 1) = v85;
      v11 = v86;
      v88 = *((_QWORD *)v86 + 2);
      memmove(&v86[16 * v12 + 16], &v86[16 * v12 + 32], 16 * (v88 - v12));
      *((_QWORD *)v86 + 2) = v88 - 1;
      v12 = v88 - 1;
    }
    while (v88 > 2);
  }
LABEL_117:
  swift_bridgeObjectRelease();
  *(_QWORD *)(v92 + 16) = 0;
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B1FD16D0(uint64_t result, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  char v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _OWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v24 = result;
  if (a3 != a2)
  {
    v4 = a3;
    for (i = *a4 + 112 * a3 - 112; ; i += 112)
    {
      v6 = v24;
      v7 = i;
      while (1)
      {
        v19 = (_OWORD *)(v7 + 112);
        v20 = *(_QWORD *)(v7 + 112);
        v21 = *(_QWORD *)(v7 + 120);
        v22 = *(_QWORD *)v7;
        v8 = *(_BYTE *)(v7 + 16);
        if (*(_BYTE *)(v7 + 128) != 1)
          break;
        if ((*(_BYTE *)(v7 + 16) & 1) == 0)
          goto LABEL_4;
        if (v20 == v22 && v21 == *(_QWORD *)(v7 + 8))
          goto LABEL_4;
        result = sub_1B2229D24();
        if ((result & 1) != 0)
          goto LABEL_4;
        result = sub_1B2229D24();
        if ((result & 1) == 0)
          goto LABEL_4;
        v20 = *(_QWORD *)(v7 + 112);
        v21 = *(_QWORD *)(v7 + 120);
        v9 = *(_BYTE *)(v7 + 128);
LABEL_10:
        v10 = *(_BYTE *)(v7 + 208);
        v11 = *(_OWORD *)(v7 + 144);
        v12 = *(_OWORD *)(v7 + 160);
        v13 = *(_OWORD *)(v7 + 176);
        v14 = *(_OWORD *)(v7 + 192);
        v15 = *(_OWORD *)(v7 + 80);
        *(_OWORD *)(v7 + 176) = *(_OWORD *)(v7 + 64);
        *(_OWORD *)(v7 + 192) = v15;
        *(_OWORD *)(v7 + 208) = *(_OWORD *)(v7 + 96);
        v16 = *(_OWORD *)(v7 + 16);
        *v19 = *(_OWORD *)v7;
        *(_OWORD *)(v7 + 128) = v16;
        v18 = *(_OWORD *)(v7 + 32);
        v17 = *(_OWORD *)(v7 + 48);
        *(_QWORD *)v7 = v20;
        *(_QWORD *)(v7 + 8) = v21;
        *(_BYTE *)(v7 + 16) = v9;
        *(_OWORD *)(v7 + 32) = v11;
        *(_OWORD *)(v7 + 48) = v12;
        *(_OWORD *)(v7 + 64) = v13;
        *(_OWORD *)(v7 + 80) = v14;
        *(_BYTE *)(v7 + 96) = v10;
        v7 -= 112;
        ++v6;
        v19[2] = v18;
        v19[3] = v17;
        if (v4 == v6)
          goto LABEL_4;
      }
      if (v20 < v22)
        v8 = 1;
      if ((v8 & 1) != 0)
        break;
LABEL_4:
      if (++v4 == a2)
        return result;
    }
    v9 = 0;
    goto LABEL_10;
  }
  return result;
}

uint64_t sub_1B1FD1834(char *__dst, char *__src, unint64_t a3, char *a4)
{
  char *v4;
  char *v6;
  char *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  BOOL v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  BOOL v29;
  uint64_t result;
  char *v31;
  char *v32;
  const void *v33;
  char *v34;

  v4 = a4;
  v6 = __src;
  v7 = __dst;
  v8 = __src - __dst;
  v9 = (__src - __dst) / 112;
  v10 = a3 - (_QWORD)__src;
  v11 = (uint64_t)(a3 - (_QWORD)__src) / 112;
  v34 = __dst;
  v33 = a4;
  if (v9 >= v11)
  {
    if (v10 < -111)
      goto LABEL_61;
    v19 = 112 * v11;
    if (a4 != __src || &__src[v19] <= a4)
      memmove(a4, __src, 112 * v11);
    v20 = &v4[v19];
    v32 = v20;
    v34 = v6;
    if (v7 >= v6 || v10 < 112)
    {
LABEL_60:
      sub_1B216D01C((void **)&v34, &v33, &v32);
      return 1;
    }
    v21 = (char *)(a3 - 112);
    v22 = v6;
    v31 = v7;
    while (1)
    {
      v23 = v4;
      v24 = *((_QWORD *)v20 - 14);
      v25 = v21 + 112;
      v27 = *((_QWORD *)v22 - 14);
      v22 -= 112;
      v26 = v27;
      v28 = v22[16];
      if (*(v20 - 96) == 1)
      {
        if ((v22[16] & 1) != 0)
        {
          v29 = v24 == v26 && *((_QWORD *)v20 - 13) == *((_QWORD *)v22 + 1);
          if (!v29 && (sub_1B2229D24() & 1) == 0 && (sub_1B2229D24() & 1) != 0)
            goto LABEL_52;
        }
      }
      else
      {
        if (v24 < v26)
          v28 = 1;
        if ((v28 & 1) != 0)
        {
LABEL_52:
          if (v25 != v6 || v21 >= v6)
            memmove(v21, v22, 0x70uLL);
          v34 = v22;
          goto LABEL_57;
        }
      }
      v32 = v20 - 112;
      if (v25 >= v20 && v21 < v20)
      {
        v4 = v23;
        if (v25 != v20)
          memmove(v21, v20 - 112, 0x70uLL);
        v22 = v6;
        v20 -= 112;
        goto LABEL_58;
      }
      memmove(v21, v20 - 112, 0x70uLL);
      v22 = v6;
      v20 -= 112;
LABEL_57:
      v4 = v23;
LABEL_58:
      if (v22 > v31)
      {
        v21 -= 112;
        v6 = v22;
        if (v20 > v4)
          continue;
      }
      goto LABEL_60;
    }
  }
  if (v8 >= -111)
  {
    v12 = 112 * v9;
    if (a4 != __dst || &__dst[v12] <= a4)
      memmove(a4, __dst, v12);
    v13 = &v4[v12];
    v32 = &v4[v12];
    if ((unint64_t)v6 < a3 && v8 >= 112)
    {
      while (1)
      {
        v14 = *(_QWORD *)v6;
        v15 = *(_QWORD *)v4;
        v16 = v4[16];
        if (v6[16] == 1)
        {
          if ((v4[16] & 1) != 0)
          {
            v17 = v14 == v15 && *((_QWORD *)v6 + 1) == *((_QWORD *)v4 + 1);
            if (!v17 && (sub_1B2229D24() & 1) == 0 && (sub_1B2229D24() & 1) != 0)
              goto LABEL_22;
          }
        }
        else
        {
          if (v14 < v15)
            v16 = 1;
          if ((v16 & 1) != 0)
          {
LABEL_22:
            v18 = v6 + 112;
            if (v7 < v6 || v7 >= v18 || v7 != v6)
              memmove(v7, v6, 0x70uLL);
            goto LABEL_26;
          }
        }
        if (v7 != v4)
          memmove(v7, v4, 0x70uLL);
        v4 += 112;
        v33 = v4;
        v18 = v6;
LABEL_26:
        v7 += 112;
        if (v4 < v13)
        {
          v6 = v18;
          if ((unint64_t)v18 < a3)
            continue;
        }
        v34 = v7;
        goto LABEL_60;
      }
    }
    goto LABEL_60;
  }
LABEL_61:
  result = sub_1B2229700();
  __break(1u);
  return result;
}

BOOL sub_1B1FD1BD4(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)a1 == *(_QWORD *)a2
      && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8)
      && ((*(unsigned __int8 *)(a1 + 16) ^ *(unsigned __int8 *)(a2 + 16)) & 1) == 0
      && *(_QWORD *)(a1 + 24) == *(_QWORD *)(a2 + 24)
      && *(_QWORD *)(a1 + 32) == *(_QWORD *)(a2 + 32)
      && *(_QWORD *)(a1 + 40) == *(_QWORD *)(a2 + 40);
}

double sub_1B1FD1C40@<D0>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, char a10, char a11)
{
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  double result;
  uint64_t v46;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  uint64_t v79;
  _BYTE v80[7];
  _BYTE v81[7];
  _BYTE v82[7];
  _BYTE v83[7];
  _BYTE v84[7];
  _BYTE v85[7];
  _BYTE v86[7];
  _BYTE v87[7];
  _BYTE v88[7];
  _BYTE v89[7];
  _QWORD v90[6];
  char v91;
  _QWORD v92[6];
  _BYTE v93[48];
  _BYTE v94[56];
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  uint64_t v103;
  uint64_t v104[6];
  char v105;
  uint64_t v106;
  uint64_t v107;
  __int128 v108;
  __int128 v109;
  char v110;
  uint64_t v111;
  uint64_t v112;
  __int128 v113;
  __int128 v114;
  char v115;
  uint64_t v116;
  uint64_t v117;
  __int128 v118;
  __int128 v119;
  char v120;
  uint64_t v121;
  uint64_t v122;
  __int128 v123;
  __int128 v124;
  char v125;
  _BYTE v126[7];
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  __int128 v130;
  uint64_t v131;
  char v132;
  _BYTE v133[7];
  uint64_t v134;
  uint64_t v135;
  __int128 v136;
  __int128 v137;
  char v138;
  _BYTE v139[7];
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  __int128 v143;
  uint64_t v144;
  char v145;
  _BYTE v146[80];
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;

  v54 = a2[2];
  v55 = a2[1];
  v52 = a2[4];
  v53 = a2[3];
  v50 = a2[6];
  v51 = a2[5];
  v18 = a2[8];
  v48 = *a2;
  v49 = a2[7];
  v65 = a2[10];
  v66 = a2[9];
  v19 = *((_OWORD *)a1 + 1);
  v147 = *(_OWORD *)a1;
  v148 = v19;
  v20 = *((_OWORD *)a1 + 2);
  v21 = *((_OWORD *)a1 + 3);
  v22 = *((_OWORD *)a1 + 5);
  v151 = *((_OWORD *)a1 + 4);
  v152 = v22;
  v149 = v20;
  v150 = v21;
  v23 = *((_OWORD *)a1 + 6);
  v24 = *((_OWORD *)a1 + 7);
  v25 = *((_OWORD *)a1 + 10);
  v156 = *((_OWORD *)a1 + 9);
  v157 = v25;
  v26 = *((_OWORD *)a1 + 8);
  v154 = v24;
  v155 = v26;
  v153 = v23;
  sub_1B19F66A0(a8, (uint64_t)v92, &qword_1ED4B9858);
  v67 = v92[0];
  v59 = v92[2];
  v60 = v92[1];
  v57 = v92[4];
  v58 = v92[3];
  v56 = v92[5];
  sub_1B19F66A0(a6, (uint64_t)v90, qword_1ED4B7820);
  v73 = v90[1];
  v74 = v90[0];
  v68 = v90[4];
  v69 = v90[2];
  v71 = v90[5];
  v72 = v90[3];
  v70 = v91;
  if (a5)
  {
    v104[0] = a5;
    swift_bridgeObjectRetain();
    sub_1B1D34438(a1);
    swift_bridgeObjectRetain();
    sub_1B1FD0AF0(v104);
    swift_bridgeObjectRelease();
    v46 = v104[0];
  }
  else
  {
    sub_1B1D34438(a1);
    v46 = 0;
  }
  sub_1B19F66A0(a6, (uint64_t)v94, qword_1ED4B7820);
  if ((v94[49] & 1) != 0)
  {
    v73 = 0;
    v74 = 0;
    v71 = 0;
    v72 = 0;
    v70 = 15;
    v69 = 1;
    v68 = 1;
  }
  sub_1B222A0CC();
  swift_retain();
  sub_1B20349FC();
  v63 = a4;
  v64 = a3;
  v62 = v18;
  if (a5)
  {
    sub_1B222A084();
    sub_1B222A078();
    v27 = *(_QWORD *)(a5 + 16);
    if (v27)
    {
      swift_bridgeObjectRetain();
      v28 = a5 + 64;
      do
      {
        v29 = *(_QWORD *)(v28 - 32);
        v30 = *(_QWORD *)(v28 - 24);
        v31 = *(unsigned __int8 *)(v28 - 16);
        sub_1B1B2A86C(v28, (uint64_t)v146);
        sub_1B222A078();
        if (v31 == 1)
        {
          swift_bridgeObjectRetain();
          sub_1B2228824();
        }
        else
        {
          sub_1B222A078();
        }
        v28 += 112;
        sub_1B1B29888();
        sub_1B1B40E74(v29, v30, v31);
        --v27;
      }
      while (v27);
      swift_bridgeObjectRelease_n();
      a4 = v63;
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    sub_1B222A084();
  }
  v32 = *((_OWORD *)a2 + 1);
  v95 = *(_OWORD *)a2;
  v96 = v32;
  v33 = *((_OWORD *)a2 + 3);
  v97 = *((_OWORD *)a2 + 2);
  v98 = v33;
  sub_1B1DC3544();
  sub_1B222A078();
  sub_1B222A078();
  sub_1B222A078();
  v104[0] = v74;
  v104[1] = v73;
  v104[2] = v69;
  v104[3] = v72;
  v104[4] = v68;
  v104[5] = v71;
  v105 = v70;
  v107 = 0;
  v106 = 0;
  v108 = xmmword_1B2246910;
  v109 = xmmword_1B2246910;
  v110 = 15;
  v112 = 0;
  v111 = 0;
  v113 = xmmword_1B2246910;
  v114 = xmmword_1B2246910;
  v115 = 15;
  v117 = 0;
  v116 = 0;
  v118 = xmmword_1B2246910;
  v119 = xmmword_1B2246910;
  v120 = 15;
  v122 = 0;
  v121 = 0;
  v123 = xmmword_1B2246910;
  v124 = xmmword_1B2246910;
  v125 = 15;
  *(_DWORD *)v126 = *(_DWORD *)v89;
  *(_DWORD *)&v126[3] = *(_DWORD *)&v89[3];
  v127 = 0;
  v128 = 0;
  v130 = xmmword_1B2244C80;
  v129 = 1;
  v131 = 0;
  v132 = 15;
  *(_DWORD *)v133 = *(_DWORD *)v88;
  *(_DWORD *)&v133[3] = *(_DWORD *)&v88[3];
  v134 = 0;
  v135 = 0;
  v136 = xmmword_1B2246910;
  v137 = xmmword_1B2246910;
  v138 = 15;
  *(_DWORD *)v139 = *(_DWORD *)v87;
  *(_DWORD *)&v139[3] = *(_DWORD *)&v87[3];
  v140 = 0;
  v141 = 0;
  v143 = xmmword_1B2244C80;
  v142 = 1;
  v144 = 0;
  v145 = 15;
  sub_1B1DC35D0();
  sub_1B222A084();
  if (a4)
    sub_1B222A078();
  sub_1B19F66A0(a8, (uint64_t)v93, &qword_1ED4B9858);
  if (v93[16] == 2)
  {
    sub_1B222A084();
    v35 = v58;
    v34 = v59;
    v36 = v60;
    v38 = v56;
    v37 = v57;
  }
  else
  {
    sub_1B222A084();
    sub_1B222A078();
    sub_1B222A078();
    v34 = v59;
    sub_1B222A084();
    v35 = v58;
    sub_1B222A078();
    v36 = v60;
    v37 = v57;
    sub_1B222A078();
    v38 = v56;
    sub_1B222A078();
  }
  sub_1B222A078();
  sub_1B222A084();
  v101 = v77;
  v102 = v78;
  v103 = v79;
  v99 = v75;
  v100 = v76;
  v39 = sub_1B222A0B4();
  *(_QWORD *)(a9 + 176) = v46;
  *(_QWORD *)(a9 + 184) = v48;
  *(_DWORD *)(a9 + 321) = *(_DWORD *)v86;
  *(_DWORD *)(a9 + 377) = *(_DWORD *)v85;
  *(_DWORD *)(a9 + 433) = *(_DWORD *)v84;
  *(_DWORD *)(a9 + 492) = *(_DWORD *)&v83[3];
  *(_DWORD *)(a9 + 489) = *(_DWORD *)v83;
  *(_DWORD *)(a9 + 548) = *(_DWORD *)&v82[3];
  *(_DWORD *)(a9 + 545) = *(_DWORD *)v82;
  *(_DWORD *)(a9 + 601) = *(_DWORD *)v81;
  *(_DWORD *)(a9 + 657) = *(_DWORD *)v80;
  v40 = v156;
  *(_OWORD *)(a9 + 128) = v155;
  *(_OWORD *)(a9 + 144) = v40;
  *(_OWORD *)(a9 + 160) = v157;
  v41 = v152;
  *(_OWORD *)(a9 + 64) = v151;
  *(_OWORD *)(a9 + 80) = v41;
  v42 = v154;
  *(_OWORD *)(a9 + 96) = v153;
  *(_OWORD *)(a9 + 112) = v42;
  v43 = v148;
  *(_OWORD *)a9 = v147;
  *(_OWORD *)(a9 + 16) = v43;
  v44 = v150;
  *(_OWORD *)(a9 + 32) = v149;
  *(_OWORD *)(a9 + 48) = v44;
  *(_DWORD *)(a9 + 324) = *(_DWORD *)&v86[3];
  *(_DWORD *)(a9 + 380) = *(_DWORD *)&v85[3];
  *(_DWORD *)(a9 + 436) = *(_DWORD *)&v84[3];
  *(_DWORD *)(a9 + 604) = *(_DWORD *)&v81[3];
  *(_DWORD *)(a9 + 660) = *(_DWORD *)&v80[3];
  *(_QWORD *)(a9 + 192) = v55;
  *(_QWORD *)(a9 + 200) = v54;
  *(_QWORD *)(a9 + 208) = v53;
  *(_QWORD *)(a9 + 216) = v52;
  *(_QWORD *)(a9 + 224) = v51;
  *(_QWORD *)(a9 + 232) = v50;
  *(_QWORD *)(a9 + 240) = v49;
  *(_QWORD *)(a9 + 248) = v62;
  *(_QWORD *)(a9 + 256) = v66;
  *(_QWORD *)(a9 + 264) = v65;
  *(_QWORD *)(a9 + 272) = v74;
  *(_QWORD *)(a9 + 280) = v73;
  *(_QWORD *)(a9 + 288) = v69;
  *(_QWORD *)(a9 + 296) = v72;
  *(_QWORD *)(a9 + 304) = v68;
  *(_QWORD *)(a9 + 312) = v71;
  *(_BYTE *)(a9 + 320) = v70;
  result = 0.0;
  *(_OWORD *)(a9 + 328) = 0u;
  *(_QWORD *)(a9 + 344) = 1;
  *(_OWORD *)(a9 + 352) = xmmword_1B2244C80;
  *(_QWORD *)(a9 + 368) = 0;
  *(_BYTE *)(a9 + 376) = 15;
  *(_OWORD *)(a9 + 384) = 0u;
  *(_OWORD *)(a9 + 400) = xmmword_1B2246910;
  *(_OWORD *)(a9 + 416) = xmmword_1B2246910;
  *(_BYTE *)(a9 + 432) = 15;
  *(_OWORD *)(a9 + 440) = 0u;
  *(_QWORD *)(a9 + 456) = 1;
  *(_OWORD *)(a9 + 464) = xmmword_1B2244C80;
  *(_QWORD *)(a9 + 480) = 0;
  *(_BYTE *)(a9 + 488) = 15;
  *(_OWORD *)(a9 + 496) = 0u;
  *(_OWORD *)(a9 + 512) = xmmword_1B2246910;
  *(_OWORD *)(a9 + 528) = xmmword_1B2246910;
  *(_BYTE *)(a9 + 544) = 15;
  *(_OWORD *)(a9 + 552) = 0u;
  *(_QWORD *)(a9 + 568) = 1;
  *(_OWORD *)(a9 + 576) = xmmword_1B2244C80;
  *(_QWORD *)(a9 + 592) = 0;
  *(_BYTE *)(a9 + 600) = 15;
  *(_OWORD *)(a9 + 608) = 0u;
  *(_OWORD *)(a9 + 624) = xmmword_1B2246910;
  *(_OWORD *)(a9 + 640) = xmmword_1B2246910;
  *(_BYTE *)(a9 + 656) = 15;
  *(_OWORD *)(a9 + 664) = 0u;
  *(_QWORD *)(a9 + 680) = 1;
  *(_OWORD *)(a9 + 688) = xmmword_1B2244C80;
  *(_QWORD *)(a9 + 704) = 0;
  *(_BYTE *)(a9 + 712) = 15;
  *(_QWORD *)(a9 + 720) = v64;
  *(_QWORD *)(a9 + 728) = v63;
  *(_QWORD *)(a9 + 736) = a7;
  *(_QWORD *)(a9 + 744) = v67;
  *(_QWORD *)(a9 + 752) = v36;
  *(_QWORD *)(a9 + 760) = v34;
  *(_QWORD *)(a9 + 768) = v35;
  *(_QWORD *)(a9 + 776) = v37;
  *(_QWORD *)(a9 + 784) = v38;
  *(_BYTE *)(a9 + 792) = a10 & 1;
  *(_BYTE *)(a9 + 793) = a11;
  *(_QWORD *)(a9 + 800) = v39;
  return result;
}

uint64_t type metadata accessor for ParticleColorOverTexture.System()
{
  return objc_opt_self();
}

uint64_t sub_1B1FD2454(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v12;
  char v13;
  uint64_t v14;

  v3 = v1;
  sub_1B19F8E54(0, &qword_1EEF61CE0, (uint64_t (*)(void))sub_1B1FD3668, (uint64_t)&type metadata for ParticleColorOverTexture.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = (char *)&v12 - v9;
  sub_1B19FA070(a1, a1[3]);
  sub_1B1FD3668();
  sub_1B222A180();
  v14 = *v3;
  v13 = 0;
  sub_1B1BA05CC();
  sub_1B2229958();
  if (!v2)
  {
    v14 = v3[1];
    v13 = 1;
    sub_1B1A0895C();
    sub_1B2229958();
    LOBYTE(v14) = *((_BYTE *)v3 + 16);
    v13 = 2;
    sub_1B1A71D70();
    sub_1B2229958();
    v14 = v3[3];
    v13 = 3;
    sub_1B19F8E54(0, &qword_1ED4BB080, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], MEMORY[0x1E0DEDD20]);
    sub_1B1B7283C((unint64_t *)&qword_1ED4B72D8, MEMORY[0x1E0DEDD30]);
    sub_1B2229958();
    v14 = v3[4];
    v13 = 4;
    sub_1B2229958();
    LOBYTE(v14) = 5;
    sub_1B2229934();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
}

const char *sub_1B1FD26D8()
{
  return "ParticleColorOverTexture";
}

void sub_1B1FD26EC(char *a1)
{
  sub_1B1F9736C(*a1);
}

uint64_t sub_1B1FD26F8()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1B1FD2730 + 4 * byte_1B22ABE10[*v0]))(0x7469736F706D6F63, 0xEB000000006E6F69);
}

uint64_t sub_1B1FD2730()
{
  return 0x65727574786574;
}

uint64_t sub_1B1FD2748()
{
  return 0x4D73736572646461;
}

uint64_t sub_1B1FD2768()
{
  return 0x656C616373;
}

uint64_t sub_1B1FD277C()
{
  return 1935763810;
}

uint64_t sub_1B1FD278C()
{
  return 0x656C676E61;
}

uint64_t sub_1B1FD27A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1B1FD2934(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1B1FD27C4()
{
  sub_1B1FD3668();
  return sub_1B222A1D4();
}

uint64_t sub_1B1FD27EC()
{
  sub_1B1FD3668();
  return sub_1B222A1E0();
}

double sub_1B1FD2814@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  __int128 v6;
  _OWORD v7[2];

  sub_1B1FD3360(a1, (uint64_t)&v6);
  if (!v2)
  {
    v5 = v7[0];
    *a2 = v6;
    a2[1] = v5;
    result = *(double *)((char *)v7 + 12);
    *(_OWORD *)((char *)a2 + 28) = *(_OWORD *)((char *)v7 + 12);
  }
  return result;
}

uint64_t sub_1B1FD2854(_QWORD *a1)
{
  return sub_1B1FD2454(a1);
}

uint64_t sub_1B1FD2868()
{
  return sub_1B1D3D248();
}

uint64_t sub_1B1FD28A0()
{
  return type metadata accessor for ParticleColorOverTexture.System();
}

uint64_t sub_1B1FD28BC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t ObjectType;

  ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(a2 + 8))(v2 + 8, 0, ObjectType, a2);
}

double sub_1B1FD2904@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_BYTE *)a1 = 0;
  *(_DWORD *)(a1 + 4) = 1065353216;
  *(_QWORD *)(a1 + 8) = 0xFFFFFFFFLL;
  *(_BYTE *)(a1 + 16) = 2;
  __asm { FMOV            V0.2S, #1.0 }
  *(double *)(a1 + 24) = result;
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  return result;
}

uint64_t sub_1B1FD2934(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x7469736F706D6F63 && a2 == 0xEB000000006E6F69;
  if (v2 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x65727574786574 && a2 == 0xE700000000000000 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x4D73736572646461 && a2 == 0xEB0000000065646FLL || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x656C616373 && a2 == 0xE500000000000000 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 1935763810 && a2 == 0xE400000000000000 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x656C676E61 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else
  {
    v6 = sub_1B2229D24();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 5;
    else
      return 6;
  }
}

_QWORD *sub_1B1FD2BC4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  float v6;
  double v7;
  char v13;
  unsigned int v14;
  __int128 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  os_unfair_lock_s *v26;
  uint64_t v27;
  uint64_t v28;
  float32x4_t *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  float32x2_t v40;
  float32x2_t v41;
  float32x2_t v42;
  float32x4_t v43;
  __int128 v44;
  __int128 v45;
  _OWORD v46[2];
  uint64_t v47;
  _OWORD v48[2];
  uint64_t v49;
  _OWORD v50[2];
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  _OWORD v55[2];
  __int128 v56;
  uint64_t v57;
  int64x2_t v58[7];
  _BYTE v59[49];
  uint64_t v60;
  _OWORD v61[2];
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  _OWORD v68[2];
  __int128 v69;
  uint64_t v70;
  _OWORD v71[7];
  uint64_t v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  uint64_t v80;
  _BYTE v81[40];
  uint64_t v82;

  v82 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)a1;
  swift_retain();
  v3 = *(_QWORD *)(a1 + 8);
  swift_retain();
  sub_1B1D18F4C(v3, (uint64_t)&v73);
  swift_release();
  v4 = v73;
  if (v73 == 4)
  {
    v4 = 0;
    v5 = 0;
    v6 = 0.0;
    v7 = 0.0;
    __asm { FMOV            V10.2S, #1.0 }
    v13 = 2;
    v14 = -1;
  }
  else
  {
    v6 = *((float *)&v75 + 2);
    v7 = *(double *)&v75;
    _D10 = *((double *)&v74 + 1);
    v14 = DWORD2(v73);
    v5 = HIDWORD(v73);
    v13 = v74;
    if (DWORD2(v73) != -1)
      goto LABEL_6;
  }
  if (!(_DWORD)v5)
    return (_QWORD *)swift_release();
LABEL_6:
  sub_1B20F03D8(v14 | (unint64_t)(v5 << 32), v58);
  sub_1B19F66A0((uint64_t)v58, (uint64_t)v71, (unint64_t *)&unk_1ED4B9160);
  if (!v72)
    return (_QWORD *)swift_release();
  v77 = v71[4];
  v78 = v71[5];
  v79 = v71[6];
  v80 = v72;
  v73 = v71[0];
  v74 = v71[1];
  v75 = v71[2];
  v76 = v71[3];
  sub_1B1EDFCF8((uint64_t)&v73, v13, 1, (uint64_t)v59);
  sub_1B1A0857C((uint64_t)v59, (uint64_t)v68);
  if (*((_QWORD *)&v69 + 1) == 1)
  {
    sub_1B1A08614(v58[0].i64);
    return (_QWORD *)swift_release();
  }
  v55[0] = v68[0];
  v55[1] = v68[1];
  v56 = v69;
  v57 = v70;
  v16 = *(_OWORD *)(a1 + 104);
  v52 = *(_OWORD *)(a1 + 88);
  v53 = v16;
  v54 = *(_QWORD *)(a1 + 120);
  sub_1B19F1DDC((uint64_t)v46);
  sub_1B1C31BBC(&v43, _D10, v6, v7);
  v50[0] = v46[0];
  v50[1] = v46[1];
  v51 = v47;
  sub_1B1E8FCE4(v2, (uint64_t)v50, 0x200000000, &v60);
  sub_1B19F66A0((uint64_t)&v60, (uint64_t)v61, (unint64_t *)&qword_1ED4B7DE0);
  if (!*(_QWORD *)&v61[0])
  {
    sub_1B1A08614(v58[0].i64);
    sub_1B19ED720((uint64_t)v46);
    return (_QWORD *)swift_release();
  }
  if (v67 > 0 && (v35 = v64) != 0)
  {
    v17 = v66[4];
    v18 = *(_BYTE *)(v65 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
    v48[0] = v61[0];
    v48[1] = v61[1];
    v49 = v62;
    v31 = (uint64_t)(v66 + 6);
    v32 = v63;
    v39 = v66;
    v30 = v66 + 8;
    v41 = (float32x2_t)v44;
    v42 = *(float32x2_t *)v43.f32;
    v40 = (float32x2_t)v45;
    swift_retain();
    swift_retain();
    swift_retain();
    v19 = 0;
    v20 = 0;
    v33 = v18;
    v34 = v17;
    do
    {
      v21 = (unsigned int *)(v32 + 48 * v19);
      v37 = *v21;
      v38 = v20;
      v36 = v21[1];
      v23 = (uint64_t *)*((_QWORD *)v21 + 2);
      v22 = *((_QWORD *)v21 + 3);
      v25 = *((_QWORD *)v21 + 4);
      v24 = *((_QWORD *)v21 + 5);
      if ((v18 & 1) != 0)
      {
        v26 = *(os_unfair_lock_s **)(v24 + 376);
        swift_retain_n();
        os_unfair_lock_lock(v26);
        os_unfair_lock_lock(*(os_unfair_lock_t *)(v24 + 344));
        swift_release();
      }
      else
      {
        swift_retain();
      }
      ecs_stack_allocator_push_snapshot(v17);
      sub_1B19F66A0(v31, (uint64_t)v81, &qword_1ED4B7FB0);
      v27 = v39[4];
      v28 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v24 + 40) + 16) + 32) + 16) + 1;
      swift_retain();
      v39[6] = ecs_stack_allocator_allocate(v27, 48 * v28, 8);
      v39[7] = v28;
      v30[1] = 0;
      v30[2] = 0;
      *v30 = 0;
      swift_release();
      sub_1B1A12038((uint64_t)&type metadata for Color, (uint64_t)&off_1E63BA190, v23, v22, v25, (uint64_t)v39);
      v29 = (float32x4_t *)sub_1B1A12038((uint64_t)&type metadata for Position, (uint64_t)&off_1E63C2398, v23, v22, v25, (uint64_t)v39);
      if (v23)
      {
        if (v25)
        {
          (*((void (**)(_OWORD *, double))&v56 + 1))(v55, COERCE_DOUBLE(vadd_f32(vmul_laneq_f32(v41, *v29, 2), vadd_f32(v40, vmul_n_f32(v42, COERCE_FLOAT(*v29))))));
          __asm { BR              X8 }
        }
      }
      else if ((_DWORD)v37 != v36)
      {
        (*((void (**)(_OWORD *, double))&v56 + 1))(v55, COERCE_DOUBLE(vadd_f32(vmul_laneq_f32(v41, v29[v37], 2), vadd_f32(v40, vmul_n_f32(v42, COERCE_FLOAT(*(_OWORD *)&v29[v37]))))));
        __asm { BR              X8 }
      }
      v17 = v34;
      v20 = v38;
      sub_1B1F05D48(v39, (unsigned __int16 **)v48, (uint64_t)v81);
      sub_1B1F03804((char *)v24);
      ecs_stack_allocator_pop_snapshot(v34);
      v18 = v33;
      if ((v33 & 1) != 0)
      {
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v24 + 344));
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v24 + 376));
      }
      swift_release();
      ++v19;
    }
    while (v19 != v35);
    sub_1B1A08614(v58[0].i64);
    sub_1B19ED720((uint64_t)v46);
  }
  else
  {
    sub_1B1A086DC(&v60, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1A086A4);
    sub_1B1A08614(v58[0].i64);
    sub_1B19ED720((uint64_t)v46);
  }
  swift_release();
  sub_1B1A086DC(&v60, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
  return sub_1B1A086DC(&v60, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
}

uint64_t getEnumTagSinglePayload for ParticleColorOverTexture(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFD && a1[44])
    return (*(_DWORD *)a1 + 253);
  v3 = *a1;
  v4 = v3 >= 4;
  v5 = v3 - 4;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for ParticleColorOverTexture(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 40) = 0;
    *(_QWORD *)result = a2 - 253;
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 44) = 1;
  }
  else
  {
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 44) = 0;
    if (a2)
      *(_BYTE *)result = a2 + 3;
  }
  return result;
}

ValueMetadata *type metadata accessor for ParticleColorOverTexture()
{
  return &type metadata for ParticleColorOverTexture;
}

uint64_t sub_1B1FD3360@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t result;
  uint64_t v22;
  _QWORD *v23;
  char v24;
  uint64_t v25;

  sub_1B19F8E54(0, &qword_1EEF61CD0, (uint64_t (*)(void))sub_1B1FD3668, (uint64_t)&type metadata for ParticleColorOverTexture.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = (char *)&v22 - v9;
  v11 = a1[3];
  v23 = a1;
  sub_1B19FA070(a1, v11);
  sub_1B1FD3668();
  sub_1B222A150();
  if (v2)
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v23);
  v12 = v7;
  v24 = 0;
  sub_1B1BA0588();
  v13 = v6;
  sub_1B2229814();
  v14 = v25;
  v15 = HIDWORD(v25);
  v24 = 1;
  sub_1B1A08878();
  sub_1B2229814();
  v16 = v25;
  v24 = 2;
  sub_1B1A71D2C();
  sub_1B2229814();
  HIDWORD(v22) = v25;
  sub_1B19F8E54(0, &qword_1ED4BB080, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], MEMORY[0x1E0DEDD20]);
  v24 = 3;
  sub_1B1B7283C((unint64_t *)&qword_1ED4B72F0, MEMORY[0x1E0DEDD40]);
  sub_1B2229814();
  v17 = v25;
  v24 = 4;
  sub_1B2229814();
  v18 = v25;
  LOBYTE(v25) = 5;
  sub_1B22297F0();
  v20 = v19;
  (*(void (**)(char *, uint64_t))(v12 + 8))(v10, v13);
  result = _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v23);
  *(_BYTE *)a2 = v14;
  *(_DWORD *)(a2 + 4) = v15;
  *(_QWORD *)(a2 + 8) = v16;
  *(_BYTE *)(a2 + 16) = BYTE4(v22);
  *(_QWORD *)(a2 + 24) = v17;
  *(_QWORD *)(a2 + 32) = v18;
  *(_DWORD *)(a2 + 40) = v20;
  return result;
}

unint64_t sub_1B1FD3668()
{
  unint64_t result;

  result = qword_1EEF61CD8;
  if (!qword_1EEF61CD8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22ABFE0, &type metadata for ParticleColorOverTexture.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF61CD8);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for ParticleColorOverTexture.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_1B1FD36F8 + 4 * byte_1B22ABE23[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_1B1FD372C + 4 * byte_1B22ABE1E[v4]))();
}

uint64_t sub_1B1FD372C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1FD3734(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B1FD373CLL);
  return result;
}

uint64_t sub_1B1FD3748(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B1FD3750);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_1B1FD3754(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1FD375C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ParticleColorOverTexture.CodingKeys()
{
  return &type metadata for ParticleColorOverTexture.CodingKeys;
}

unint64_t sub_1B1FD377C()
{
  unint64_t result;

  result = qword_1EEF61CE8;
  if (!qword_1EEF61CE8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22ABFB8, &type metadata for ParticleColorOverTexture.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF61CE8);
  }
  return result;
}

unint64_t sub_1B1FD37C4()
{
  unint64_t result;

  result = qword_1EEF61CF0;
  if (!qword_1EEF61CF0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22ABF28, &type metadata for ParticleColorOverTexture.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF61CF0);
  }
  return result;
}

unint64_t sub_1B1FD380C()
{
  unint64_t result;

  result = qword_1EEF61CF8;
  if (!qword_1EEF61CF8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22ABF50, &type metadata for ParticleColorOverTexture.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF61CF8);
  }
  return result;
}

uint64_t initializeWithCopy for AnyCoder(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v3;
  (**(void (***)(void))(v3 - 8))();
  return a1;
}

uint64_t *assignWithCopy for AnyCoder(uint64_t *a1, uint64_t *a2)
{
  sub_1B1B7D784(a1, a2);
  return a1;
}

_OWORD *assignWithTake for AnyCoder(_OWORD *a1, _OWORD *a2)
{
  __int128 v4;

  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  return a1;
}

ValueMetadata *type metadata accessor for AnyCoder()
{
  return &type metadata for AnyCoder;
}

uint64_t sub_1B1FD38E8@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v15;
  _OWORD v16[2];
  uint64_t v17[3];
  uint64_t v18;
  _OWORD v19[2];

  sub_1B1FD5030();
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = a1[3];
  v12 = a1[4];
  sub_1B19FA070(a1, v11);
  if (sub_1B2067B64(2003, v11, v12))
  {
    sub_1B19FA070(a1, a1[3]);
    sub_1B1FD5088();
    sub_1B222A150();
    if (!v2)
    {
      LOBYTE(v16[0]) = 1;
      sub_1B1E2A6AC();
      sub_1B2229814();
      sub_1B1FD3B30(v17[0], (uint64_t)v10, 0, v17);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
      sub_1B1A0DDAC(v17, v19);
LABEL_6:
      v13 = v19[1];
      *a2 = v19[0];
      a2[1] = v13;
    }
  }
  else
  {
    sub_1B19FA070(a1, a1[3]);
    sub_1B222A12C();
    if (!v2)
    {
      sub_1B19FC264((uint64_t)v17, v18);
      sub_1B1E2A6AC();
      sub_1B2229AA8();
      sub_1B1FD41EC(*(uint64_t *)&v16[0], (uint64_t)v17, (uint64_t *)v16);
      sub_1B1A0DDAC(v16, v19);
      _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v17);
      goto LABEL_6;
    }
  }
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
}

uint64_t sub_1B1FD3B30@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t *a4@<X8>)
{
  uint64_t v4;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  __int16 v18;
  char v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  int v66;
  _BYTE v67[2];

  v8 = a3 & 1;
  sub_1B1FD5030();
  v10 = v9;
  v11 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v12);
  v14 = (char *)&v57 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v67[1] = v8;
  type metadata accessor for TextureDescriptor(0);
  v16 = v15;
  if (swift_dynamicCastMetatype())
  {
    sub_1B1FD5188();
    result = sub_1B2229814();
    if (!v4)
    {
      v18 = WORD4(v61);
      v19 = BYTE10(v61);
      v59 = v63;
      v60 = v62;
      v58 = v64;
      v20 = v65;
      a4[3] = v16;
      result = swift_allocObject();
      *a4 = result;
      *(_QWORD *)(result + 16) = v61;
      *(_WORD *)(result + 24) = v18;
      *(_BYTE *)(result + 26) = v19;
      v21 = v59;
      *(_OWORD *)(result + 32) = v60;
      *(_OWORD *)(result + 48) = v21;
      *(_OWORD *)(result + 64) = v58;
      *(_QWORD *)(result + 80) = v20;
      *(_DWORD *)(result + 88) = v66;
    }
    return result;
  }
  type metadata accessor for simd_quatf(0);
  v23 = v22;
  if (swift_dynamicCastMetatype())
  {
    sub_1B1B4E740();
    result = sub_1B2229814();
    if (!v4)
    {
      v60 = v61;
      a4[3] = v23;
      result = swift_allocObject();
      *a4 = result;
      *(_OWORD *)(result + 16) = v60;
    }
    return result;
  }
  type metadata accessor for simd_float2x2(0);
  v25 = v24;
  if (swift_dynamicCastMetatype())
  {
    sub_1B1B2BE68();
    result = sub_1B2229814();
    if (!v4)
    {
      v26 = v61;
      a4[3] = v25;
      *(_OWORD *)a4 = v26;
    }
    return result;
  }
  type metadata accessor for simd_float2x3(0);
  v28 = v27;
  if (swift_dynamicCastMetatype())
  {
    sub_1B1B2BE24();
    goto LABEL_14;
  }
  type metadata accessor for simd_float2x4(0);
  v28 = v29;
  if (swift_dynamicCastMetatype())
  {
    sub_1B1B2BDE0();
LABEL_14:
    result = sub_1B2229814();
    if (!v4)
    {
      v59 = v62;
      v60 = v61;
      a4[3] = v28;
      result = swift_allocObject();
      *a4 = result;
      v30 = v59;
      *(_OWORD *)(result + 16) = v60;
      *(_OWORD *)(result + 32) = v30;
    }
    return result;
  }
  type metadata accessor for simd_float3x2(0);
  v32 = v31;
  if (swift_dynamicCastMetatype())
  {
    sub_1B1B2BD9C();
    result = sub_1B2229814();
    if (!v4)
    {
      v33 = v61;
      v34 = v62;
      a4[3] = v32;
      *(_OWORD *)a4 = v33;
      a4[2] = v34;
    }
    return result;
  }
  type metadata accessor for simd_float3x3(0);
  v36 = v35;
  if (swift_dynamicCastMetatype())
  {
    sub_1B1B2BD58();
    goto LABEL_24;
  }
  type metadata accessor for simd_float3x4(0);
  v36 = v37;
  if (swift_dynamicCastMetatype())
  {
    sub_1B1B2BD14();
LABEL_24:
    result = sub_1B2229814();
    if (!v4)
    {
      v59 = v62;
      v60 = v61;
      v58 = v63;
      a4[3] = v36;
      result = swift_allocObject();
      *a4 = result;
      v38 = v59;
      *(_OWORD *)(result + 16) = v60;
      *(_OWORD *)(result + 32) = v38;
      *(_OWORD *)(result + 48) = v58;
    }
    return result;
  }
  type metadata accessor for simd_float4x2(0);
  v40 = v39;
  if (swift_dynamicCastMetatype())
  {
    sub_1B1B2BCD0();
    result = sub_1B2229814();
    if (!v4)
    {
      v60 = v61;
      v41 = v62;
      a4[3] = v40;
      result = swift_allocObject();
      *a4 = result;
      *(_OWORD *)(result + 16) = v60;
      *(_OWORD *)(result + 32) = v41;
    }
  }
  else
  {
    type metadata accessor for simd_float4x3(0);
    v43 = v42;
    if (swift_dynamicCastMetatype())
    {
      sub_1B1B2BC8C();
    }
    else
    {
      type metadata accessor for simd_float4x4(0);
      v43 = v44;
      if (!swift_dynamicCastMetatype())
      {
        v47 = sub_1B1FD50CC(a1);
        *(_QWORD *)&v60 = v48;
        *(_QWORD *)&v59 = v49;
        if (v47)
        {
          v50 = v47;
          (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v14, a2, v10);
          v67[0] = v8;
          *((_QWORD *)&v62 + 1) = v50;
          *(_QWORD *)&v63 = v60;
          *((_QWORD *)&v63 + 1) = v59;
          sub_1B1A137F4((uint64_t *)&v61);
          sub_1B1FD5088();
          sub_1B1E8D38C((uint64_t)v14, (uint64_t)v67, v50, (uint64_t)&type metadata for AnyCoder.CodingKeys);
          if (v4)
          {
            return sub_1B1E0F8A8((uint64_t)&v61);
          }
          else
          {
            v51 = *((_QWORD *)&v62 + 1);
            v52 = sub_1B19FA070(&v61, *((uint64_t *)&v62 + 1));
            a4[3] = v51;
            v53 = sub_1B1A137F4(a4);
            (*(void (**)(uint64_t *, _QWORD *, uint64_t))(*(_QWORD *)(v51 - 8) + 16))(v53, v52, v51);
            return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v61);
          }
        }
        else
        {
          *(_QWORD *)&v61 = 0;
          *((_QWORD *)&v61 + 1) = 0xE000000000000000;
          sub_1B2229430();
          v54 = sub_1B222A210();
          v56 = v55;
          swift_bridgeObjectRelease();
          *(_QWORD *)&v61 = v54;
          *((_QWORD *)&v61 + 1) = v56;
          sub_1B2228890();
          result = sub_1B2229688();
          __break(1u);
        }
        return result;
      }
      sub_1B1B2BC48();
    }
    result = sub_1B2229814();
    if (!v4)
    {
      v59 = v62;
      v60 = v61;
      v57 = v64;
      v58 = v63;
      a4[3] = v43;
      result = swift_allocObject();
      *a4 = result;
      v45 = v59;
      *(_OWORD *)(result + 16) = v60;
      *(_OWORD *)(result + 32) = v45;
      v46 = v57;
      *(_OWORD *)(result + 48) = v58;
      *(_OWORD *)(result + 64) = v46;
    }
  }
  return result;
}

uint64_t sub_1B1FD41EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  __int16 v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t *v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  int v59;

  type metadata accessor for TextureDescriptor(0);
  v8 = v7;
  if (swift_dynamicCastMetatype())
  {
    sub_1B19FC264(a2, *(_QWORD *)(a2 + 24));
    sub_1B1FD5188();
    result = sub_1B2229AA8();
    if (!v3)
    {
      v10 = WORD4(v54);
      v11 = BYTE10(v54);
      v44 = v56;
      v48 = v55;
      v41 = v57;
      v12 = v58;
      a3[3] = v8;
      result = swift_allocObject();
      *a3 = result;
      *(_QWORD *)(result + 16) = v54;
      *(_WORD *)(result + 24) = v10;
      *(_BYTE *)(result + 26) = v11;
      *(_OWORD *)(result + 32) = v48;
      *(_OWORD *)(result + 48) = v44;
      *(_OWORD *)(result + 64) = v41;
      *(_QWORD *)(result + 80) = v12;
      *(_DWORD *)(result + 88) = v59;
    }
    return result;
  }
  type metadata accessor for simd_quatf(0);
  v14 = v13;
  if (swift_dynamicCastMetatype())
  {
    sub_1B19FC264(a2, *(_QWORD *)(a2 + 24));
    sub_1B1B4E740();
    result = sub_1B2229AA8();
    if (!v3)
    {
      v49 = v54;
      a3[3] = v14;
      result = swift_allocObject();
      *a3 = result;
      *(_OWORD *)(result + 16) = v49;
    }
    return result;
  }
  type metadata accessor for simd_float2x2(0);
  v16 = v15;
  if (swift_dynamicCastMetatype())
  {
    sub_1B19FC264(a2, *(_QWORD *)(a2 + 24));
    sub_1B1B2BE68();
    result = sub_1B2229AA8();
    if (!v3)
    {
      v17 = v54;
      a3[3] = v16;
      *(_OWORD *)a3 = v17;
    }
    return result;
  }
  type metadata accessor for simd_float2x3(0);
  v19 = v18;
  if (swift_dynamicCastMetatype())
  {
    sub_1B19FC264(a2, *(_QWORD *)(a2 + 24));
    sub_1B1B2BE24();
    goto LABEL_14;
  }
  type metadata accessor for simd_float2x4(0);
  v19 = v20;
  if (swift_dynamicCastMetatype())
  {
    sub_1B19FC264(a2, *(_QWORD *)(a2 + 24));
    sub_1B1B2BDE0();
LABEL_14:
    result = sub_1B2229AA8();
    if (!v3)
    {
      v45 = v55;
      v50 = v54;
      a3[3] = v19;
      result = swift_allocObject();
      *a3 = result;
      *(_OWORD *)(result + 16) = v50;
      *(_OWORD *)(result + 32) = v45;
    }
    return result;
  }
  type metadata accessor for simd_float3x2(0);
  v22 = v21;
  if (swift_dynamicCastMetatype())
  {
    sub_1B19FC264(a2, *(_QWORD *)(a2 + 24));
    sub_1B1B2BD9C();
    result = sub_1B2229AA8();
    if (!v3)
    {
      v23 = v54;
      v24 = v55;
      a3[3] = v22;
      *(_OWORD *)a3 = v23;
      a3[2] = v24;
    }
    return result;
  }
  type metadata accessor for simd_float3x3(0);
  v26 = v25;
  if (swift_dynamicCastMetatype())
  {
    sub_1B19FC264(a2, *(_QWORD *)(a2 + 24));
    sub_1B1B2BD58();
    goto LABEL_24;
  }
  type metadata accessor for simd_float3x4(0);
  v26 = v27;
  if (swift_dynamicCastMetatype())
  {
    sub_1B19FC264(a2, *(_QWORD *)(a2 + 24));
    sub_1B1B2BD14();
LABEL_24:
    result = sub_1B2229AA8();
    if (!v3)
    {
      v46 = v55;
      v51 = v54;
      v42 = v56;
      a3[3] = v26;
      result = swift_allocObject();
      *a3 = result;
      *(_OWORD *)(result + 16) = v51;
      *(_OWORD *)(result + 32) = v46;
      *(_OWORD *)(result + 48) = v42;
    }
    return result;
  }
  type metadata accessor for simd_float4x2(0);
  v29 = v28;
  if (swift_dynamicCastMetatype())
  {
    sub_1B19FC264(a2, *(_QWORD *)(a2 + 24));
    sub_1B1B2BCD0();
    result = sub_1B2229AA8();
    if (!v3)
    {
      v52 = v54;
      v30 = v55;
      a3[3] = v29;
      result = swift_allocObject();
      *a3 = result;
      *(_OWORD *)(result + 16) = v52;
      *(_OWORD *)(result + 32) = v30;
    }
  }
  else
  {
    type metadata accessor for simd_float4x3(0);
    v32 = v31;
    if (swift_dynamicCastMetatype())
    {
      sub_1B19FC264(a2, *(_QWORD *)(a2 + 24));
      sub_1B1B2BC8C();
    }
    else
    {
      type metadata accessor for simd_float4x4(0);
      v32 = v33;
      if (!swift_dynamicCastMetatype())
      {
        v34 = sub_1B1FD50CC(a1);
        if (v34)
        {
          *((_QWORD *)&v55 + 1) = v34;
          *(_QWORD *)&v56 = v35;
          *((_QWORD *)&v56 + 1) = v36;
          sub_1B1A137F4((uint64_t *)&v54);
          sub_1B1E8D320(a2);
          if (v3)
          {
            return sub_1B1E0F8A8((uint64_t)&v54);
          }
          else
          {
            v37 = *((_QWORD *)&v55 + 1);
            v38 = sub_1B19FA070(&v54, *((uint64_t *)&v55 + 1));
            a3[3] = v37;
            v39 = sub_1B1A137F4(a3);
            (*(void (**)(uint64_t *, _QWORD *, uint64_t))(*(_QWORD *)(v37 - 8) + 16))(v39, v38, v37);
            return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v54);
          }
        }
        else
        {
          sub_1B2229430();
          sub_1B222A210();
          swift_bridgeObjectRelease();
          sub_1B2228890();
          result = sub_1B2229688();
          __break(1u);
        }
        return result;
      }
      sub_1B19FC264(a2, *(_QWORD *)(a2 + 24));
      sub_1B1B2BC48();
    }
    result = sub_1B2229AA8();
    if (!v3)
    {
      v47 = v55;
      v53 = v54;
      v40 = v57;
      v43 = v56;
      a3[3] = v32;
      result = swift_allocObject();
      *a3 = result;
      *(_OWORD *)(result + 16) = v53;
      *(_OWORD *)(result + 32) = v47;
      *(_OWORD *)(result + 48) = v43;
      *(_OWORD *)(result + 64) = v40;
    }
  }
  return result;
}

uint64_t sub_1B1FD48EC(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t DynamicType;
  _QWORD v6[3];
  uint64_t v7;
  _BYTE v8[24];
  uint64_t v9;

  v3 = v1;
  sub_1B19FA070(a1, a1[3]);
  sub_1B222A15C();
  sub_1B1A02864(v1, (uint64_t)v6);
  sub_1B19FA070(v6, v7);
  DynamicType = swift_getDynamicType();
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v6);
  v6[0] = DynamicType;
  sub_1B19FC264((uint64_t)v8, v9);
  sub_1B1E2A6F0();
  sub_1B2229BA4();
  if (!v2)
  {
    sub_1B1FD4A10(v3, (uint64_t)v6);
    sub_1B19FA070(v6, v7);
    sub_1B1E8D2BC((uint64_t)v8);
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v6);
  }
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v8);
}

uint64_t sub_1B1FD4A10@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int16 v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  unint64_t v14;
  _OWORD *v15;
  __int128 v16;
  uint64_t v17;
  unint64_t v18;
  _OWORD *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  int v40;
  _BYTE v41[32];

  sub_1B1A02864(a1, (uint64_t)v41);
  type metadata accessor for TextureDescriptor(0);
  if (swift_dynamicCast())
  {
    v4 = WORD4(v35);
    v5 = BYTE10(v35);
    v24 = v37;
    v28 = v36;
    v21 = v38;
    v6 = v39;
    *(_QWORD *)(a2 + 24) = &type metadata for TextureDescriptorCoder;
    *(_QWORD *)(a2 + 32) = sub_1B1FD5188();
    *(_QWORD *)(a2 + 40) = sub_1B1FD51F4();
    v7 = swift_allocObject();
    *(_QWORD *)a2 = v7;
    *(_QWORD *)(v7 + 16) = v35;
    *(_WORD *)(v7 + 24) = v4;
    *(_BYTE *)(v7 + 26) = v5;
    *(_OWORD *)(v7 + 32) = v28;
    *(_OWORD *)(v7 + 48) = v24;
    *(_OWORD *)(v7 + 64) = v21;
    *(_QWORD *)(v7 + 80) = v6;
    *(_DWORD *)(v7 + 88) = v40;
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v41);
  }
  type metadata accessor for simd_quatf(0);
  if (swift_dynamicCast())
  {
    v29 = v35;
    *(_QWORD *)(a2 + 24) = &type metadata for QuaternionFCoder;
    *(_QWORD *)(a2 + 32) = sub_1B1B4E740();
    *(_QWORD *)(a2 + 40) = sub_1B1B4E784();
    v8 = swift_allocObject();
    *(_QWORD *)a2 = v8;
    *(_OWORD *)(v8 + 16) = v29;
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v41);
  }
  type metadata accessor for simd_float2x2(0);
  if (swift_dynamicCast())
  {
    v9 = v35;
    *(_QWORD *)(a2 + 24) = &type metadata for Float2x2Coder;
    *(_QWORD *)(a2 + 32) = sub_1B1B2BE68();
    *(_QWORD *)(a2 + 40) = sub_1B1B2C0CC();
    *(_OWORD *)a2 = v9;
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v41);
  }
  type metadata accessor for simd_float2x3(0);
  if (swift_dynamicCast())
  {
    v25 = v36;
    v30 = v35;
    *(_QWORD *)(a2 + 24) = &type metadata for Float2x3Coder;
    *(_QWORD *)(a2 + 32) = sub_1B1B2BE24();
    v10 = sub_1B1B2C088();
LABEL_11:
    *(_QWORD *)(a2 + 40) = v10;
    v11 = swift_allocObject();
    *(_QWORD *)a2 = v11;
    *(_OWORD *)(v11 + 16) = v30;
    *(_OWORD *)(v11 + 32) = v25;
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v41);
  }
  type metadata accessor for simd_float2x4(0);
  if (swift_dynamicCast())
  {
    v25 = v36;
    v30 = v35;
    *(_QWORD *)(a2 + 24) = &type metadata for Float2x4Coder;
    *(_QWORD *)(a2 + 32) = sub_1B1B2BDE0();
    v10 = sub_1B1B2C044();
    goto LABEL_11;
  }
  type metadata accessor for simd_float3x2(0);
  if (swift_dynamicCast())
  {
    v31 = v35;
    v13 = v36;
    *(_QWORD *)(a2 + 24) = &type metadata for Float3x2Coder;
    *(_QWORD *)(a2 + 32) = sub_1B1B2BD9C();
    *(_QWORD *)(a2 + 40) = sub_1B1B2C000();
    *(_OWORD *)a2 = v31;
    *(_QWORD *)(a2 + 16) = v13;
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v41);
  }
  type metadata accessor for simd_float3x3(0);
  if (swift_dynamicCast())
  {
    v26 = v36;
    v32 = v35;
    v22 = v37;
    *(_QWORD *)(a2 + 24) = &type metadata for Float3x3Coder;
    *(_QWORD *)(a2 + 32) = sub_1B1B2BD58();
    v14 = sub_1B1B2BFBC();
LABEL_19:
    *(_QWORD *)(a2 + 40) = v14;
    v15 = (_OWORD *)swift_allocObject();
    *(_QWORD *)a2 = v15;
    v15[1] = v32;
    v15[2] = v26;
    v15[3] = v22;
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v41);
  }
  type metadata accessor for simd_float3x4(0);
  if (swift_dynamicCast())
  {
    v26 = v36;
    v32 = v35;
    v22 = v37;
    *(_QWORD *)(a2 + 24) = &type metadata for Float3x4Coder;
    *(_QWORD *)(a2 + 32) = sub_1B1B2BD14();
    v14 = sub_1B1B2BF78();
    goto LABEL_19;
  }
  type metadata accessor for simd_float4x2(0);
  if (swift_dynamicCast())
  {
    v33 = v35;
    v16 = v36;
    *(_QWORD *)(a2 + 24) = &type metadata for Float4x2Coder;
    *(_QWORD *)(a2 + 32) = sub_1B1B2BCD0();
    *(_QWORD *)(a2 + 40) = sub_1B1B2BF34();
    v17 = swift_allocObject();
    *(_QWORD *)a2 = v17;
    *(_OWORD *)(v17 + 16) = v33;
    *(_OWORD *)(v17 + 32) = v16;
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v41);
  }
  type metadata accessor for simd_float4x3(0);
  if (swift_dynamicCast())
  {
    v27 = v36;
    v34 = v35;
    v20 = v38;
    v23 = v37;
    *(_QWORD *)(a2 + 24) = &type metadata for Float4x3Coder;
    *(_QWORD *)(a2 + 32) = sub_1B1B2BC8C();
    v18 = sub_1B1B2BEF0();
LABEL_26:
    *(_QWORD *)(a2 + 40) = v18;
    v19 = (_OWORD *)swift_allocObject();
    *(_QWORD *)a2 = v19;
    v19[1] = v34;
    v19[2] = v27;
    v19[3] = v23;
    v19[4] = v20;
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v41);
  }
  type metadata accessor for simd_float4x4(0);
  if (swift_dynamicCast())
  {
    v27 = v36;
    v34 = v35;
    v20 = v38;
    v23 = v37;
    *(_QWORD *)(a2 + 24) = &type metadata for Float4x4Coder;
    *(_QWORD *)(a2 + 32) = sub_1B1B2BC48();
    v18 = sub_1B1B2BEAC();
    goto LABEL_26;
  }
  sub_1B1B9AA5C();
  if (swift_dynamicCast())
  {
    sub_1B1FD51DC(&v35, (_OWORD *)a2);
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v41);
  }
  sub_1B1A02864(a1, (uint64_t)&v35);
  sub_1B2229430();
  sub_1B22295EC();
  sub_1B2228890();
  result = sub_1B2229688();
  __break(1u);
  return result;
}

uint64_t sub_1B1FD5008@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  return sub_1B1FD38E8(a1, a2);
}

uint64_t sub_1B1FD501C(_QWORD *a1)
{
  return sub_1B1FD48EC(a1);
}

void sub_1B1FD5030()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED4BAC70)
  {
    sub_1B1FD5088();
    v0 = sub_1B2229898();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED4BAC70);
  }
}

unint64_t sub_1B1FD5088()
{
  unint64_t result;

  result = qword_1ED4BA030;
  if (!qword_1ED4BA030)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22AC190, &type metadata for AnyCoder.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED4BA030);
  }
  return result;
}

uint64_t sub_1B1FD50CC(uint64_t a1)
{
  uint64_t result;

  result = swift_conformsToProtocol2();
  if (result)
  {
    if (swift_conformsToProtocol2())
      return a1;
    else
      return 0;
  }
  return result;
}

uint64_t sub_1B1FD5138()
{
  return swift_deallocObject();
}

uint64_t sub_1B1FD5148()
{
  return swift_deallocObject();
}

uint64_t sub_1B1FD5158()
{
  return swift_deallocObject();
}

uint64_t sub_1B1FD5168()
{
  return swift_deallocObject();
}

uint64_t sub_1B1FD5178()
{
  return swift_deallocObject();
}

unint64_t sub_1B1FD5188()
{
  unint64_t result;

  result = qword_1EEF63700;
  if (!qword_1EEF63700)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22BD684, &type metadata for TextureDescriptorCoder);
    atomic_store(result, (unint64_t *)&qword_1EEF63700);
  }
  return result;
}

uint64_t sub_1B1FD51CC()
{
  return swift_deallocObject();
}

_OWORD *sub_1B1FD51DC(__int128 *a1, _OWORD *a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[2];
  a2[1] = a1[1];
  a2[2] = v3;
  *a2 = v2;
  return a2;
}

unint64_t sub_1B1FD51F4()
{
  unint64_t result;

  result = qword_1EEF63730;
  if (!qword_1EEF63730)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22BD65C, &type metadata for TextureDescriptorCoder);
    atomic_store(result, (unint64_t *)&qword_1EEF63730);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for AnyCoder.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1B1FD5284 + 4 * byte_1B22AC035[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1B1FD52B8 + 4 * byte_1B22AC030[v4]))();
}

uint64_t sub_1B1FD52B8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1FD52C0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B1FD52C8);
  return result;
}

uint64_t sub_1B1FD52D4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B1FD52DCLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1B1FD52E0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1FD52E8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AnyCoder.CodingKeys()
{
  return &type metadata for AnyCoder.CodingKeys;
}

uint64_t sub_1B1FD5304(char *a1, char *a2)
{
  return sub_1B1F998AC(*a1, *a2);
}

uint64_t sub_1B1FD5310()
{
  sub_1B222A06C();
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

uint64_t sub_1B1FD5384()
{
  sub_1B2228824();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B1FD53D4()
{
  sub_1B222A06C();
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

uint64_t sub_1B1FD5444@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_1B2229730();
  result = swift_bridgeObjectRelease();
  if (v2 == 1)
    v4 = 1;
  else
    v4 = 2;
  if (!v2)
    v4 = 0;
  *a1 = v4;
  return result;
}

void sub_1B1FD54A0(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 1701869940;
  if (!*v1)
    v2 = 0x65756C6176;
  v3 = 0xE500000000000000;
  if (*v1)
    v3 = 0xE400000000000000;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_1B1FD54D4()
{
  _BYTE *v0;

  if (*v0)
    return 1701869940;
  else
    return 0x65756C6176;
}

uint64_t sub_1B1FD5504@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_1B2229730();
  result = swift_bridgeObjectRelease();
  if (v2 == 1)
    v4 = 1;
  else
    v4 = 2;
  if (!v2)
    v4 = 0;
  *a1 = v4;
  return result;
}

uint64_t sub_1B1FD5564()
{
  sub_1B1FD5088();
  return sub_1B222A1D4();
}

uint64_t sub_1B1FD558C()
{
  sub_1B1FD5088();
  return sub_1B222A1E0();
}

unint64_t sub_1B1FD55B8()
{
  unint64_t result;

  result = qword_1EEF61D00;
  if (!qword_1EEF61D00)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22AC168, &type metadata for AnyCoder.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF61D00);
  }
  return result;
}

unint64_t sub_1B1FD5600()
{
  unint64_t result;

  result = qword_1ED4BA040;
  if (!qword_1ED4BA040)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22AC0A0, &type metadata for AnyCoder.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED4BA040);
  }
  return result;
}

unint64_t sub_1B1FD5648()
{
  unint64_t result;

  result = qword_1ED4BA038;
  if (!qword_1ED4BA038)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22AC0C8, &type metadata for AnyCoder.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED4BA038);
  }
  return result;
}

BOOL sub_1B1FD568C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char v10;

  if (a3 == 0xFFFFFFFFLL)
    return 0;
  result = 0;
  if (a3 << 32 >= (uint64_t)0xFFFFFFFF00000001
    && (int)a3 < *(_QWORD *)(v3 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8))
  {
    v6 = *(_QWORD *)(v3 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
    if (HIDWORD(a3) == -1 || *(_DWORD *)(v6 + 12 * (int)a3 + 8) == HIDWORD(a3))
    {
      v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 80) + 8 * *(__int16 *)(v6 + 12 * (int)a3 + 6) + 32) + 16);
      v8 = *(_QWORD *)(v7 + 128);
      if (*(_QWORD *)(v8 + 16))
      {
        v9 = sub_1B1DC3AC8(a1);
        if ((v10 & 1) != 0)
          return *(_QWORD *)(*(_QWORD *)(v7 + 24) + 16 * *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v9) + 32) == a1;
      }
    }
    return 0;
  }
  return result;
}

uint64_t sub_1B1FD5764(unint64_t a1, uint64_t a2, __n128 a3)
{
  uint64_t v3;
  uint64_t result;

  result = sub_1B1FDFF30(a1, a2, a3);
  if (!v3 && (result & 1) == 0)
  {
    sub_1B2229430();
    sub_1B2228890();
    sub_1B1BC3C70();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    sub_1B2228890();
    sub_1B2228890();
    result = sub_1B2229688();
    __break(1u);
  }
  return result;
}

uint64_t sub_1B1FD5880(uint64_t a1, uint64_t a2, float32x4_t *a3, float32x4_t a4, float32x4_t a5, float32x4_t a6, float32x4_t a7, float32x4_t a8, float32x4_t a9, float32x4_t a10, float32x4_t a11)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t result;

  if (a1 == 0xFFFFFFFFLL
    || a1 << 32 < (uint64_t)0xFFFFFFFF00000001
    || (int)a1 >= *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8)
    || (v12 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries), HIDWORD(a1) != -1)
    && *(_DWORD *)(v12 + 12 * (int)a1 + 8) != HIDWORD(a1)
    || (result = sub_1B1FE6A04(*(_QWORD *)(*(_QWORD *)(a2 + 136) + 8 * *(int *)(v12 + 12 * (int)a1) + 32), *(_WORD *)(v12 + 12 * (int)a1 + 4), 64, a3, a4, a5, a6, a7, a8, a9, a10, a11), !v11)&& (result & 1) == 0)
  {
    sub_1B2229430();
    sub_1B2228890();
    sub_1B1BC3C70();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    sub_1B2228890();
    sub_1B2228890();
    result = sub_1B2229688();
    __break(1u);
  }
  return result;
}

uint64_t sub_1B1FD5A28(uint64_t a1, uint64_t a2, uint64_t a3, float a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  if (a1 == 0xFFFFFFFFLL
    || a1 << 32 < (uint64_t)0xFFFFFFFF00000001
    || (int)a1 >= *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8)
    || (v5 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries), HIDWORD(a1) != -1)
    && *(_DWORD *)(v5 + 12 * (int)a1 + 8) != HIDWORD(a1)
    || (result = sub_1B1FE6248(*(_QWORD *)(*(_QWORD *)(a2 + 136) + 8 * *(int *)(v5 + 12 * (int)a1) + 32), *(_WORD *)(v5 + 12 * (int)a1 + 4), 16, a3, a4), !v4)&& (result & 1) == 0)
  {
    sub_1B2229430();
    sub_1B2228890();
    sub_1B1BC3C70();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    sub_1B2228890();
    sub_1B2228890();
    result = sub_1B2229688();
    __break(1u);
  }
  return result;
}

uint64_t sub_1B1FD5BC4(uint64_t a1, uint64_t a2)
{
  return sub_1B1FD5D78(a1, a2, (uint64_t (*)(_QWORD, _QWORD, uint64_t))sub_1B1FE559C);
}

uint64_t sub_1B1FD5BE0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  if (a1 == 0xFFFFFFFFLL
    || a1 << 32 < (uint64_t)0xFFFFFFFF00000001
    || (int)a1 >= *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8)
    || (v3 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries), HIDWORD(a1) != -1)
    && *(_DWORD *)(v3 + 12 * (int)a1 + 8) != HIDWORD(a1)
    || (result = sub_1B1FE57F8(*(_QWORD *)(*(_QWORD *)(a2 + 136) + 8 * *(int *)(v3 + 12 * (int)a1) + 32), a2, a1),
        !v2)
    && (result & 1) == 0)
  {
    sub_1B2229430();
    sub_1B2228890();
    sub_1B1BC3C70();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    sub_1B2228890();
    sub_1B2228890();
    result = sub_1B2229688();
    __break(1u);
  }
  return result;
}

uint64_t sub_1B1FD5D78(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD, _QWORD, uint64_t))
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  if (a1 == 0xFFFFFFFFLL
    || a1 << 32 < (uint64_t)0xFFFFFFFF00000001
    || (int)a1 >= *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8)
    || (v4 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries), HIDWORD(a1) != -1)
    && *(_DWORD *)(v4 + 12 * (int)a1 + 8) != HIDWORD(a1)
    || (result = a3(*(_QWORD *)(*(_QWORD *)(a2 + 136) + 8 * *(int *)(v4 + 12 * (int)a1) + 32), *(unsigned __int16 *)(v4 + 12 * (int)a1 + 4), 64), !v3)&& (result & 1) == 0)
  {
    sub_1B2229430();
    sub_1B2228890();
    sub_1B1BC3C70();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    sub_1B2228890();
    sub_1B2228890();
    result = sub_1B2229688();
    __break(1u);
  }
  return result;
}

uint64_t sub_1B1FD5F20(uint64_t a1, uint64_t a2, unsigned int *a3, __int128 *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  if (a1 == 0xFFFFFFFFLL
    || a1 << 32 < (uint64_t)0xFFFFFFFF00000001
    || (int)a1 >= *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8)
    || (v5 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries), HIDWORD(a1) != -1)
    && *(_DWORD *)(v5 + 12 * (int)a1 + 8) != HIDWORD(a1)
    || (result = sub_1B1FE8B7C(*(_QWORD *)(*(_QWORD *)(a2 + 136) + 8 * *(int *)(v5 + 12 * (int)a1) + 32), *(_WORD *)(v5 + 12 * (int)a1 + 4), 656, a3, a4), !v4)&& (result & 1) == 0)
  {
    sub_1B2229430();
    sub_1B2228890();
    sub_1B1BC3C70();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    sub_1B2228890();
    sub_1B2228890();
    result = sub_1B2229688();
    __break(1u);
  }
  return result;
}

uint64_t sub_1B1FD60CC(uint64_t result, uint64_t a2, void *__src)
{
  uint64_t v3;
  uint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  _QWORD *v10;

  if (result == 0xFFFFFFFFLL)
    goto LABEL_13;
  if (result << 32 < (uint64_t)0xFFFFFFFF00000001)
    goto LABEL_13;
  if ((int)result >= *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8))
    goto LABEL_13;
  v4 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
  if (HIDWORD(result) != -1 && *(_DWORD *)(v4 + 12 * (int)result + 8) != HIDWORD(result))
    goto LABEL_13;
  v5 = (int *)(v4 + 12 * (int)result);
  v6 = *(_QWORD *)(*(_QWORD *)(a2 + 136) + 8 * *v5 + 32);
  v7 = *(_QWORD *)(v6 + 48);
  v8 = *(_QWORD *)(v7 + 16);
  if (!v8)
  {
LABEL_10:
    if (v3)
      return result;
LABEL_13:
    sub_1B2229430();
    sub_1B2228890();
    sub_1B1BC3C70();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    sub_1B2228890();
    sub_1B2228890();
    result = sub_1B2229688();
    __break(1u);
    return result;
  }
  v9 = *((__int16 *)v5 + 2);
  v10 = (_QWORD *)(v7 + 56);
  while ((ValueMetadata *)*(v10 - 3) != &type metadata for ForceField)
  {
    v10 += 5;
    if (!--v8)
      goto LABEL_10;
  }
  return (uint64_t)memmove((void *)(*(_QWORD *)(v6 + 128) + *v10 + 144 * v9), __src, 0x80uLL);
}

uint64_t sub_1B1FD62B8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  if (a1 == 0xFFFFFFFFLL
    || a1 << 32 < (uint64_t)0xFFFFFFFF00000001
    || (int)a1 >= *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8)
    || (v5 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries), HIDWORD(a1) != -1)
    && *(_DWORD *)(v5 + 12 * (int)a1 + 8) != HIDWORD(a1)
    || (result = sub_1B1FE62B8(*(_QWORD *)(*(_QWORD *)(a2 + 136) + 8 * *(int *)(v5 + 12 * (int)a1) + 32), *(_WORD *)(v5 + 12 * (int)a1 + 4), 128, a3, a4), !v4)&& (result & 1) == 0)
  {
    sub_1B2229430();
    sub_1B2228890();
    sub_1B1BC3C70();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    sub_1B2228890();
    sub_1B2228890();
    result = sub_1B2229688();
    __break(1u);
  }
  return result;
}

uint64_t sub_1B1FD6458(uint64_t result, uint64_t a2, _BYTE *a3)
{
  uint64_t v3;
  uint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  if (result != 0xFFFFFFFFLL
    && result << 32 >= (uint64_t)0xFFFFFFFF00000001
    && (int)result < *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8))
  {
    v4 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
    if (HIDWORD(result) == -1 || *(_DWORD *)(v4 + 12 * (int)result + 8) == HIDWORD(result))
    {
      v5 = (int *)(v4 + 12 * (int)result);
      v6 = *(_QWORD *)(*(_QWORD *)(a2 + 136) + 8 * *v5 + 32);
      v7 = *(_QWORD *)(v6 + 48);
      v8 = *(_QWORD *)(v7 + 16);
      if (v8)
      {
        v9 = *((__int16 *)v5 + 2);
        v10 = (_QWORD *)(v7 + 56);
        while ((ValueMetadata *)*(v10 - 3) != &type metadata for ParticleSpawnState)
        {
          v10 += 5;
          if (!--v8)
            goto LABEL_10;
        }
        goto LABEL_12;
      }
LABEL_10:
      if (v3)
        return result;
    }
  }
  sub_1B2229430();
  sub_1B2228890();
  sub_1B1BC3C70();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  sub_1B2228890();
  sub_1B2228890();
  result = sub_1B2229688();
  __break(1u);
LABEL_12:
  *(_BYTE *)(*(_QWORD *)(v6 + 128) + *v10 + (v9 << 7) + 112) = *a3;
  return result;
}

uint64_t sub_1B1FD662C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  if (a1 == 0xFFFFFFFFLL
    || a1 << 32 < (uint64_t)0xFFFFFFFF00000001
    || (int)a1 >= *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8)
    || (v4 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries), HIDWORD(a1) != -1)
    && *(_DWORD *)(v4 + 12 * (int)a1 + 8) != HIDWORD(a1)
    || (result = sub_1B1FEBC48(*(_QWORD *)(*(_QWORD *)(a2 + 136) + 8 * *(int *)(v4 + 12 * (int)a1) + 32), *(_WORD *)(v4 + 12 * (int)a1 + 4), 96, a3), !v3)&& (result & 1) == 0)
  {
    sub_1B2229430();
    sub_1B2228890();
    sub_1B1BC3C70();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    sub_1B2228890();
    sub_1B2228890();
    result = sub_1B2229688();
    __break(1u);
  }
  return result;
}

uint64_t sub_1B1FD67CC(uint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  _DWORD *v12;

  if (result != 0xFFFFFFFFLL
    && result << 32 >= (uint64_t)0xFFFFFFFF00000001
    && (int)result < *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8))
  {
    v4 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
    if (HIDWORD(result) == -1 || *(_DWORD *)(v4 + 12 * (int)result + 8) == HIDWORD(result))
    {
      v5 = (int *)(v4 + 12 * (int)result);
      v6 = *(_QWORD *)(*(_QWORD *)(a2 + 136) + 8 * *v5 + 32);
      v7 = *(_QWORD *)(v6 + 48);
      v8 = *(_QWORD *)(v7 + 16);
      if (v8)
      {
        v9 = *((__int16 *)v5 + 2);
        v10 = HIDWORD(a3);
        v11 = (_QWORD *)(v7 + 56);
        while ((ValueMetadata *)*(v11 - 3) != &type metadata for PropagateDirtiness)
        {
          v11 += 5;
          if (!--v8)
            goto LABEL_10;
        }
        goto LABEL_12;
      }
LABEL_10:
      if (v3)
        return result;
    }
  }
  sub_1B2229430();
  sub_1B2228890();
  sub_1B1BC3C70();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  sub_1B2228890();
  sub_1B2228890();
  result = sub_1B2229688();
  __break(1u);
LABEL_12:
  v12 = (_DWORD *)(*(_QWORD *)(v6 + 128) + *v11 + 8 * v9);
  *v12 = a3;
  v12[1] = v10;
  return result;
}

uint64_t sub_1B1FD69A0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  if (a1 == 0xFFFFFFFFLL
    || a1 << 32 < (uint64_t)0xFFFFFFFF00000001
    || (int)a1 >= *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8)
    || (v3 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries), HIDWORD(a1) != -1)
    && *(_DWORD *)(v3 + 12 * (int)a1 + 8) != HIDWORD(a1)
    || (result = sub_1B1FEC368(*(_QWORD *)(*(_QWORD *)(a2 + 136) + 8 * *(int *)(v3 + 12 * (int)a1) + 32), *(_WORD *)(v3 + 12 * (int)a1 + 4), 112, a2, a1), !v2)&& (result & 1) == 0)
  {
    sub_1B2229430();
    sub_1B2228890();
    sub_1B1BC3C70();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    sub_1B2228890();
    sub_1B2228890();
    result = sub_1B2229688();
    __break(1u);
  }
  return result;
}

uint64_t sub_1B1FD6B40(uint64_t a1, unint64_t a2, void (*a3)(char *), uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t result;

  result = sub_1B1FE0614(a1, a2, a3, a4, a5, a6);
  if (!v6 && (result & 1) == 0)
  {
    sub_1B2229430();
    sub_1B2228890();
    sub_1B1BC3C70();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    sub_1B222A210();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    result = sub_1B2229688();
    __break(1u);
  }
  return result;
}

uint64_t sub_1B1FD6C70@<X0>(unint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v8;
  uint64_t v9;

  v4 = v3;
  v8 = HIDWORD(a1);
  sub_1B1F24AA4(a2);
  if (((_DWORD)a1 != -1 || (_DWORD)v8)
    && (uint64_t)(a1 << 32) >= (uint64_t)0xFFFFFFFF00000001
    && (int)a1 < *(_QWORD *)(v4 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8)
    && ((v9 = *(_QWORD *)(v4 + OBJC_IVAR____TtC3VFX13EntityManager__entries), (_DWORD)v8 == -1)
     || *(_DWORD *)(v9 + 12 * (int)a1 + 8) == (_DWORD)v8))
  {
    return sub_1B1FE4244(*(_QWORD *)(*(_QWORD *)(v4 + 136) + 8 * *(int *)(v9 + 12 * (int)a1) + 32), a2, a3);
  }
  else
  {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 56))(a3, 1, 1, a2);
  }
}

void sub_1B1FD6D8C(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;

  if (a2 != 0xFFFFFFFF
    && (uint64_t)(a2 << 32) >= (uint64_t)0xFFFFFFFF00000001
    && (int)a2 < *(_QWORD *)(v4 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8))
  {
    v6 = *(_QWORD *)(v4 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
    v7 = *(unsigned int *)(v6 + 12 * (int)a2 + 8);
    if (HIDWORD(a2) == -1 || (_DWORD)v7 == HIDWORD(a2))
    {
      v8 = (unsigned int *)(v6 + 12 * (int)a2);
      sub_1B1FE4408(*(_QWORD *)(*(_QWORD *)(v4 + 136) + 8 * (int)*v8 + 32), *v8 | ((unint64_t)*((unsigned __int16 *)v8 + 3) << 48) | ((unint64_t)*((unsigned __int16 *)v8 + 2) << 32), v7, a1, v4, a2, a3, a4);
    }
  }
}

void sub_1B1FD6E48(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  Swift::UInt32 v19;
  uint64_t v20;
  uint64_t v21;
  _BOOL4 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _BOOL4 v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  os_unfair_lock_s *v68;
  os_unfair_lock_s *v69;
  char *v70;
  char *v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v93;
  uint64_t v94;

  v6 = a3;
  v7 = a2;
  if (*(_BYTE *)(a1 + 210) != 1)
  {
    if (a2 != a3)
    {
      do
      {
        v40 = v7;
        if ((a4 & 1) != 0)
        {
          sub_1B1A10E3C(v7, *(_QWORD *)(a5 + 232));
          v32 = v40;
        }
        else
        {
          sub_1B1A10E3C(v7, *(_QWORD *)(a5 + 256));
          v32 = v40;
          ++*(_QWORD *)(a5 + 256);
        }
        v33 = *(_QWORD *)(a5 + 232);
        if (*(_QWORD *)(a5 + 240) == v33)
          v34 = *(_QWORD *)(a5 + 240);
        else
          v34 = v33 + 1;
        v35 = *(_QWORD *)(a5 + 248);
        if (v34 <= v35)
          v36 = *(_QWORD *)(a5 + 248);
        else
          v36 = v34;
        v37 = v32 < v35;
        v38 = v32 + 1;
        *(_QWORD *)(a5 + 232) = v34;
        if (v37)
          v39 = v36;
        else
          v39 = v35 + 1;
        *(_QWORD *)(a5 + 248) = v39;
        v7 = v38;
      }
      while (v6 != v38);
    }
    return;
  }
  v8 = *(_QWORD *)(a5 + 56);
  v90 = *(_QWORD *)(v8 + 16);
  if (v90)
  {
    v9 = 256;
    if ((a4 & 1) != 0)
      v9 = 232;
    v82 = v9;
    v86 = *(_QWORD *)(a5 + 16);
    v88 = v8 + 32;
    v10 = a2 + 1;
    v11 = a2 + 2;
    v12 = a2 + 3;
    v84 = a3 + 1;
    swift_retain();
    v13 = a2;
    v14 = 0;
    v78 = v11;
    v80 = v10;
    if (v10 >= v6)
      v15 = a2 + 1;
    else
      v15 = v11;
    if (v12 <= v6)
      v16 = v6;
    else
      v16 = v12;
    v74 = v16;
    v76 = v15;
    while (1)
    {
      v17 = *(_QWORD *)(v88 + 40 * v14);
      v93 = v14;
      v18 = 0;
      if (v6 != v13)
        break;
LABEL_14:
      v19 = *(_DWORD *)(v86 + 80 + OBJC_IVAR____TtC3VFX13EntityManager_counters);
      v20 = sub_1B1F24AF8(v17);
      if (*(_QWORD *)(v86 + OBJC_IVAR____TtC3VFX13EntityManager_counters))
        vfx_counters.add(_:_:)(v19, v20 * v18);
      v14 = v93 + 1;
      v6 = a3;
      v13 = a2;
      if (v93 + 1 == v90)
      {
        swift_release();
        v7 = a2;
        goto LABEL_68;
      }
    }
    v21 = *(_QWORD *)(a5 + v82);
    v22 = v21 != v13;
    if (v21 == v13)
      v23 = v76;
    else
      v23 = v13;
    if (v21 == v13)
      v21 = v76;
    if (v80 >= v6)
      v22 = 1;
    if (v78 >= v6)
      v22 = 1;
    v24 = v6;
    if (v22)
      v25 = v23;
    else
      v25 = v74;
    if (v22)
      v26 = v21;
    else
      v26 = v74;
    v27 = *(_QWORD *)(a5 + 240);
    while (1)
    {
      if (--v24 >= *(_QWORD *)(a5 + 248))
      {
        if (v24 < --v27)
        {
          sub_1B1F24AC4();
          v13 = a2;
          ++v18;
        }
      }
      else
      {
        if (v26 >= v24)
          goto LABEL_14;
        sub_1B1F24AC4();
        ++v18;
        if (v26 + 1 == v25)
        {
          v28 = v26 + 2;
          v29 = v25 + 1;
          if (v25 + 1 < a3)
          {
            v13 = a2;
            if (v28 == v29 && (v28 = v26 + 3, v29 = v25 + 2, v25 + 2 < a3) && v28 == v29)
            {
              v30 = v26 + 4;
              v31 = v25 + 3;
              if (v25 + 3 < a3)
              {
                v26 = v84 + v26 - v25;
                v25 = a3;
                while (v30 == v31)
                {
                  v31 = ++v30;
                  if (a3 == v30)
                    goto LABEL_33;
                }
              }
              v26 = v30;
              v25 = v31;
            }
            else
            {
              v26 = v28;
              v25 = v29;
            }
            goto LABEL_33;
          }
          v26 += 2;
          ++v25;
        }
        else
        {
          ++v26;
        }
        v13 = a2;
      }
LABEL_33:
      if (v24 == v13)
        goto LABEL_14;
    }
  }
LABEL_68:
  v41 = *(_QWORD *)(a5 + 64);
  v91 = *(_QWORD *)(v41 + 16);
  if (!v91)
    goto LABEL_119;
  v42 = 256;
  if ((a4 & 1) != 0)
    v42 = 232;
  v83 = v42;
  v87 = *(_QWORD *)(a5 + 16);
  v89 = v41 + 32;
  v43 = v7 + 1;
  v44 = v7 + 2;
  v45 = v7 + 3;
  v85 = v6 + 1;
  swift_retain();
  v46 = a2;
  v47 = 0;
  v79 = v44;
  v81 = v43;
  if (v43 >= v6)
    v48 = a2 + 1;
  else
    v48 = v44;
  if (v45 <= v6)
    v49 = v6;
  else
    v49 = v45;
  v75 = v49;
  v77 = v48;
  do
  {
    v50 = (uint64_t *)(v89 + 40 * v47);
    v51 = v50[2];
    v94 = v47;
    v52 = 0;
    if (v6 != v46)
    {
      v53 = *v50;
      v54 = *(_QWORD *)(a5 + 128) + v50[3];
      v55 = *(_QWORD *)(a5 + v83);
      v56 = v55 != v46;
      if (v55 == v46)
        v57 = v77;
      else
        v57 = v46;
      if (v55 == v46)
        v55 = v77;
      if (v81 >= v6)
        v56 = 1;
      if (v79 >= v6)
        v56 = 1;
      v58 = v6;
      if (v56)
        v59 = v57;
      else
        v59 = v75;
      if (v56)
        v60 = v55;
      else
        v60 = v75;
      v61 = *(_QWORD *)(a5 + 240);
      do
      {
        if (--v58 >= *(_QWORD *)(a5 + 248))
        {
          if (v58 < --v61)
          {
            sub_1B1F24B04(v54 + v58 * v51, v54 + v61 * v51, v53);
            v46 = a2;
            ++v52;
          }
        }
        else
        {
          if (v60 >= v58)
            break;
          sub_1B1F24B04(v54 + v58 * v51, v54 + v60 * v51, v53);
          ++v52;
          if (v60 + 1 == v59)
          {
            v62 = v60 + 2;
            v63 = v59 + 1;
            if (v59 + 1 < a3)
            {
              v46 = a2;
              if (v62 == v63 && (v62 = v60 + 3, v63 = v59 + 2, v59 + 2 < a3) && v62 == v63)
              {
                v64 = v60 + 4;
                v65 = v59 + 3;
                if (v59 + 3 < a3)
                {
                  v60 = v85 + v60 - v59;
                  v59 = a3;
                  while (v64 == v65)
                  {
                    v65 = ++v64;
                    if (a3 == v64)
                      goto LABEL_99;
                  }
                }
                v60 = v64;
                v59 = v65;
              }
              else
              {
                v60 = v62;
                v59 = v63;
              }
              continue;
            }
            v60 += 2;
            ++v59;
          }
          else
          {
            ++v60;
          }
          v46 = a2;
        }
LABEL_99:
        ;
      }
      while (v58 != v46);
    }
    if (*(_QWORD *)(v87 + OBJC_IVAR____TtC3VFX13EntityManager_counters))
    {
      vfx_counters.add(_:_:)(*(_DWORD *)(v87 + 80 + OBJC_IVAR____TtC3VFX13EntityManager_counters), v52 * v51);
      v46 = a2;
    }
    v47 = v94 + 1;
    v6 = a3;
  }
  while (v94 + 1 != v91);
  swift_release();
  v7 = a2;
LABEL_119:
  if ((*(_BYTE *)(a5 + 184) & 1) == 0)
  {
    v66 = *(_QWORD *)(a5 + 168);
    v67 = *(_QWORD *)(a5 + 16);
    v68 = *(os_unfair_lock_s **)(v67 + OBJC_IVAR____TtC3VFX13EntityManager_lock + 24);
    swift_retain();
    os_unfair_lock_lock(v68);
    swift_release();
    swift_retain();
    sub_1B1A12A48(a2, v6, a4 & 1, a5, a5, v66);
    swift_release();
    v69 = *(os_unfair_lock_s **)(v67 + OBJC_IVAR____TtC3VFX13EntityManager_lock + 24);
    swift_retain();
    os_unfair_lock_unlock(v69);
    swift_release();
    v7 = a2;
  }
  if (v7 != v6)
  {
    v71 = *(char **)(a5 + 232);
    v70 = *(char **)(a5 + 240);
    v72 = *(_QWORD *)(a5 + 248);
    v73 = v70;
    do
    {
      if (v7 >= v72)
      {
        v73 = &v71[(unint64_t)&v73[~(unint64_t)v71] & ~((uint64_t)&v73[~(unint64_t)v71] >> 63)];
      }
      else
      {
        if ((a4 & 1) == 0)
          ++*(_QWORD *)(a5 + 256);
        if (v73 == v71)
          v71 = v73;
        else
          ++v71;
      }
      ++v7;
    }
    while (v6 != v7);
    *(_QWORD *)(a5 + 232) = v71;
    *(_QWORD *)(a5 + 240) = v73;
    if (v70 != v73)
      sub_1B1A1059C(v73, v70);
  }
}

void sub_1B1FD7538(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  Swift::UInt32 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  os_unfair_lock_s *v50;
  os_unfair_lock_s *v51;
  char *v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;

  v7 = a4;
  v8 = a2;
  if (*(_BYTE *)(a1 + 210) != 1)
  {
    if (a4)
    {
      do
      {
        v29 = *v8++;
        v28 = v29;
        if ((a5 & 1) != 0)
        {
          sub_1B1A10E3C(v28, *(_QWORD *)(a6 + 232));
        }
        else
        {
          sub_1B1A10E3C(v28, *(_QWORD *)(a6 + 256));
          ++*(_QWORD *)(a6 + 256);
        }
        v25 = *(_QWORD *)(a6 + 232);
        if (*(_QWORD *)(a6 + 240) == v25)
          v26 = *(_QWORD *)(a6 + 240);
        else
          v26 = v25 + 1;
        *(_QWORD *)(a6 + 232) = v26;
        v27 = *(_QWORD *)(a6 + 248);
        if (v26 <= v27)
          v26 = *(_QWORD *)(a6 + 248);
        if (v28 >= v27)
          v26 = v27 + 1;
        *(_QWORD *)(a6 + 248) = v26;
        --v7;
      }
      while (v7);
    }
    return;
  }
  v9 = *(_QWORD *)(a6 + 56);
  v69 = *(_QWORD *)(v9 + 16);
  if (v69)
  {
    v10 = 256;
    if ((a5 & 1) != 0)
      v10 = 232;
    v63 = v10;
    v65 = *(_QWORD *)(a6 + 16);
    v67 = v9 + 32;
    v11 = 5;
    if (a4 > 5)
      v11 = a4;
    v57 = v11;
    v59 = a4 + 1;
    v61 = *(_QWORD *)(a6 + 16) + 80;
    swift_retain();
    v12 = 0;
    while (1)
    {
      v13 = *(_QWORD *)(v67 + 40 * v12);
      v72 = v12;
      v14 = *(_QWORD *)(a6 + v63);
      if (v14 == *v8)
      {
        v15 = v14 + 1;
        if (v7 > 1)
        {
          if (v15 == v8[1])
          {
            v15 = v14 + 2;
            if ((unint64_t)v7 >= 3 && v15 == v8[2])
            {
              v15 = v14 + 3;
              if ((unint64_t)v7 >= 4 && v15 == v8[3])
              {
                if ((unint64_t)v7 < 5)
                {
                  v15 = v14 + 4;
                  v16 = 4;
                }
                else
                {
                  v15 = v57 + v14;
                  v16 = 4;
                  while (v14 + v16 == v8[v16])
                  {
                    if (v57 == ++v16)
                    {
                      v16 = v57;
                      goto LABEL_26;
                    }
                  }
                  v15 = v14 + v16;
                }
              }
              else
              {
                v16 = 3;
              }
            }
            else
            {
              v16 = 2;
            }
          }
          else
          {
LABEL_24:
            v16 = 1;
          }
LABEL_26:
          v17 = 0;
          v18 = *(_QWORD *)(a6 + 240);
          v19 = v7;
          do
          {
            while (1)
            {
              while (1)
              {
                v20 = v8[--v19];
                if (v20 < *(_QWORD *)(a6 + 248))
                  break;
                if (v20 >= --v18)
                {
LABEL_27:
                  if (!v19)
                    goto LABEL_48;
                }
                else
                {
                  sub_1B1F24AC4();
                  v8 = a2;
                  ++v17;
                  if (!v19)
                    goto LABEL_48;
                }
              }
              if (v15 >= v20)
                goto LABEL_48;
              sub_1B1F24AC4();
              v8 = a2;
              ++v17;
              if (v15 + 1 == a2[v16])
                break;
              ++v15;
              if (!v19)
                goto LABEL_48;
            }
            v21 = v15 + 2;
            v22 = v16 + 1;
            if (v16 + 1 < v7 && v21 == a2[v22])
            {
              v21 = v15 + 3;
              v22 = v16 + 2;
              if (v16 + 2 < v7 && v21 == a2[v22])
              {
                v21 = v15 + 4;
                v22 = v16 + 3;
                if (v16 + 3 < v7)
                {
                  v15 = v59 + v15 - v16;
                  while (v21 == a2[v22])
                  {
                    ++v21;
                    if (v7 == ++v22)
                    {
                      v16 = v7;
                      goto LABEL_27;
                    }
                  }
                }
              }
            }
            v15 = v21;
            v16 = v22;
          }
          while (v19);
          goto LABEL_48;
        }
        if (v7)
          goto LABEL_24;
        v17 = 0;
      }
      else
      {
        v16 = 0;
        v17 = 0;
        v15 = *(_QWORD *)(a6 + v63);
        if (v7)
          goto LABEL_26;
      }
LABEL_48:
      v23 = *(_DWORD *)(v61 + OBJC_IVAR____TtC3VFX13EntityManager_counters);
      v24 = sub_1B1F24AF8(v13);
      if (*(_QWORD *)(v65 + OBJC_IVAR____TtC3VFX13EntityManager_counters))
        vfx_counters.add(_:_:)(v23, v24 * v17);
      v12 = v72 + 1;
      v8 = a2;
      if (v72 + 1 == v69)
      {
        swift_release();
        v8 = a2;
        break;
      }
    }
  }
  v30 = *(_QWORD *)(a6 + 64);
  v70 = *(_QWORD *)(v30 + 16);
  if (!v70)
    goto LABEL_119;
  v31 = 256;
  if ((a5 & 1) != 0)
    v31 = 232;
  v64 = v31;
  v66 = *(_QWORD *)(a6 + 16);
  v68 = v30 + 32;
  v32 = 5;
  if (v7 > 5)
    v32 = v7;
  v58 = v32;
  v60 = v7 + 1;
  v62 = *(_QWORD *)(a6 + 16) + 80;
  swift_retain();
  v33 = 0;
  v74 = v7;
  do
  {
    v34 = (uint64_t *)(v68 + 40 * v33);
    v35 = *v34;
    v37 = v34[2];
    v36 = v34[3];
    v38 = *(_QWORD *)(a6 + v64);
    v73 = v33;
    if (v38 != *v8)
    {
      v40 = 0;
      v41 = 0;
      v39 = *(_QWORD *)(a6 + v64);
      if (!v7)
        goto LABEL_113;
      goto LABEL_91;
    }
    v39 = v38 + 1;
    if (v7 <= 1)
    {
      if (!v7)
      {
        v41 = 0;
        goto LABEL_113;
      }
    }
    else if (v39 == v8[1])
    {
      v39 = v38 + 2;
      if ((unint64_t)v7 >= 3 && v39 == v8[2])
      {
        v39 = v38 + 3;
        if ((unint64_t)v7 >= 4 && v39 == v8[3])
        {
          if ((unint64_t)v7 < 5)
          {
            v39 = v38 + 4;
            v40 = 4;
          }
          else
          {
            v39 = v58 + v38;
            v40 = 4;
            while (v38 + v40 == v8[v40])
            {
              if (v58 == ++v40)
              {
                v40 = v58;
                goto LABEL_91;
              }
            }
            v39 = v38 + v40;
          }
        }
        else
        {
          v40 = 3;
        }
      }
      else
      {
        v40 = 2;
      }
      goto LABEL_91;
    }
    v40 = 1;
LABEL_91:
    v41 = 0;
    v42 = *(_QWORD *)(a6 + 128) + v36;
    v43 = *(_QWORD *)(a6 + 240);
    v44 = v74;
    do
    {
      while (1)
      {
        while (1)
        {
          v45 = v8[--v44];
          if (v45 < *(_QWORD *)(a6 + 248))
            break;
          if (v45 >= --v43)
          {
LABEL_92:
            if (!v44)
              goto LABEL_113;
          }
          else
          {
            sub_1B1F24B04(v42 + v45 * v37, v42 + v43 * v37, v35);
            v8 = a2;
            ++v41;
            if (!v44)
              goto LABEL_113;
          }
        }
        if (v39 >= v45)
          goto LABEL_113;
        sub_1B1F24B04(v42 + v45 * v37, v42 + v39 * v37, v35);
        v8 = a2;
        ++v41;
        if (v39 + 1 == a2[v40])
          break;
        ++v39;
        if (!v44)
          goto LABEL_113;
      }
      v46 = v39 + 2;
      v47 = v40 + 1;
      if (v40 + 1 < v74 && v46 == a2[v47])
      {
        v46 = v39 + 3;
        v47 = v40 + 2;
        if (v40 + 2 < v74 && v46 == a2[v47])
        {
          v46 = v39 + 4;
          v47 = v40 + 3;
          if (v40 + 3 < v74)
          {
            v39 = v60 + v39 - v40;
            while (v46 == a2[v47])
            {
              ++v46;
              if (v74 == ++v47)
              {
                v40 = v74;
                goto LABEL_92;
              }
            }
          }
        }
      }
      v39 = v46;
      v40 = v47;
    }
    while (v44);
LABEL_113:
    if (*(_QWORD *)(v66 + OBJC_IVAR____TtC3VFX13EntityManager_counters))
    {
      vfx_counters.add(_:_:)(*(_DWORD *)(v62 + OBJC_IVAR____TtC3VFX13EntityManager_counters), v41 * v37);
      v8 = a2;
    }
    v7 = v74;
    v33 = v73 + 1;
  }
  while (v73 + 1 != v70);
  swift_release();
  v8 = a2;
LABEL_119:
  if ((*(_BYTE *)(a6 + 184) & 1) == 0)
  {
    v48 = *(_QWORD *)(a6 + 168);
    v49 = *(_QWORD *)(a6 + 16);
    v50 = *(os_unfair_lock_s **)(v49 + OBJC_IVAR____TtC3VFX13EntityManager_lock + 24);
    swift_retain();
    os_unfair_lock_lock(v50);
    swift_release();
    swift_retain();
    sub_1B1A12560(a2, v7, a5 & 1, a6, a6, v48);
    swift_release();
    v51 = *(os_unfair_lock_s **)(v49 + OBJC_IVAR____TtC3VFX13EntityManager_lock + 24);
    swift_retain();
    os_unfair_lock_unlock(v51);
    swift_release();
    v8 = a2;
  }
  if (v7)
  {
    v52 = *(char **)(a6 + 240);
    v53 = *(_QWORD *)(a6 + 248);
    v54 = *(char **)(a6 + 232);
    v55 = v52;
    do
    {
      v56 = *v8++;
      if (v56 >= v53)
      {
        v55 = &v54[(unint64_t)&v55[~(unint64_t)v54] & ~((uint64_t)&v55[~(unint64_t)v54] >> 63)];
      }
      else
      {
        if ((a5 & 1) == 0)
          ++*(_QWORD *)(a6 + 256);
        if (v55 == v54)
          v54 = v55;
        else
          ++v54;
      }
      *(_QWORD *)(a6 + 232) = v54;
      *(_QWORD *)(a6 + 240) = v55;
      --v7;
    }
    while (v7);
    if (v52 != v55)
      sub_1B1A1059C(v55, v52);
  }
}

void sub_1B1FD7CE8(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  char v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  Swift::UInt32 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  os_unfair_lock_s *v25;
  os_unfair_lock_s *v26;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v35;
  uint64_t v36;

  v5 = a3;
  if (*(_BYTE *)(a1 + 210) != 1)
  {
    if ((a3 & 1) != 0)
    {
      sub_1B1A10E3C(a2, *(_QWORD *)(a4 + 232));
    }
    else
    {
      sub_1B1A10E3C(a2, *(_QWORD *)(a4 + 256));
      ++*(_QWORD *)(a4 + 256);
    }
    v30 = *(_QWORD *)(a4 + 232);
    if (*(_QWORD *)(a4 + 240) == v30)
      v31 = *(_QWORD *)(a4 + 240);
    else
      v31 = v30 + 1;
    *(_QWORD *)(a4 + 232) = v31;
    v32 = *(_QWORD *)(a4 + 248);
    if (v32 <= a2)
    {
      v31 = v32 + 1;
    }
    else if (v31 <= v32)
    {
      v31 = *(_QWORD *)(a4 + 248);
    }
    *(_QWORD *)(a4 + 248) = v31;
    return;
  }
  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 56) + 16);
  if (v7)
  {
    if ((a3 & 1) != 0)
      v8 = 232;
    else
      v8 = 256;
    v36 = *(_QWORD *)(a4 + 16);
    v35 = v8;
    v9 = swift_retain() + 56;
    while (1)
    {
      v10 = *(_QWORD *)(v9 - 24);
      if (*(_QWORD *)(a4 + 248) <= a2)
      {
        if (*(_QWORD *)(a4 + 240) - 1 > a2)
          goto LABEL_15;
      }
      else
      {
        v11 = *(_QWORD *)(a4 + v35);
        if (v11 == a2)
          v12 = v11 + 1;
        else
          v12 = *(_QWORD *)(a4 + v35);
        if (v12 < a2)
        {
LABEL_15:
          sub_1B1F24AC4();
          v13 = 1;
          goto LABEL_16;
        }
      }
      v13 = 0;
LABEL_16:
      v14 = *(_DWORD *)(v36 + 80 + OBJC_IVAR____TtC3VFX13EntityManager_counters);
      v15 = sub_1B1F24AF8(v10);
      if (*(_QWORD *)(v36 + OBJC_IVAR____TtC3VFX13EntityManager_counters))
        vfx_counters.add(_:_:)(v14, v15 * v13);
      v9 += 40;
      if (!--v7)
      {
        swift_release();
        v5 = a3;
        break;
      }
    }
  }
  v16 = *(_QWORD *)(*(_QWORD *)(a4 + 64) + 16);
  if (!v16)
    goto LABEL_37;
  v17 = *(_QWORD *)(a4 + 16);
  if ((v5 & 1) != 0)
    v18 = 232;
  else
    v18 = 256;
  v19 = (_QWORD *)(swift_retain() + 56);
  do
  {
    v20 = *(v19 - 1);
    if (*(_QWORD *)(a4 + 248) <= a2)
    {
      v21 = *(_QWORD *)(a4 + 240) - 1;
      if (v21 <= a2)
        goto LABEL_31;
    }
    else
    {
      v21 = *(_QWORD *)(a4 + v18);
      if (v21 == a2)
        ++v21;
      if (v21 >= a2)
      {
LABEL_31:
        v22 = 0;
        goto LABEL_34;
      }
    }
    sub_1B1F24B04(*(_QWORD *)(a4 + 128) + *v19 + v20 * a2, *(_QWORD *)(a4 + 128) + *v19 + v21 * v20, *(v19 - 3));
    v22 = 1;
LABEL_34:
    if (*(_QWORD *)(v17 + OBJC_IVAR____TtC3VFX13EntityManager_counters))
      vfx_counters.add(_:_:)(*(_DWORD *)(v17 + 80 + OBJC_IVAR____TtC3VFX13EntityManager_counters), v22 * v20);
    v19 += 5;
    --v16;
  }
  while (v16);
  swift_release();
  v5 = a3;
LABEL_37:
  if ((*(_BYTE *)(a4 + 184) & 1) == 0)
  {
    v23 = *(_QWORD *)(a4 + 168);
    v24 = *(_QWORD *)(a4 + 16);
    v25 = *(os_unfair_lock_s **)(v24 + OBJC_IVAR____TtC3VFX13EntityManager_lock + 24);
    swift_retain();
    os_unfair_lock_lock(v25);
    swift_release();
    swift_retain();
    sub_1B1A12F64(a2, v5 & 1, a4, a4, v23);
    swift_release();
    v26 = *(os_unfair_lock_s **)(v24 + OBJC_IVAR____TtC3VFX13EntityManager_lock + 24);
    swift_retain();
    os_unfair_lock_unlock(v26);
    swift_release();
  }
  v27 = *(char **)(a4 + 240);
  if (*(_QWORD *)(a4 + 248) <= a2)
  {
    v33 = (char *)(((unint64_t)&v27[~*(_QWORD *)(a4 + 232)] & ~((uint64_t)&v27[~*(_QWORD *)(a4 + 232)] >> 63))
                 + *(_QWORD *)(a4 + 232));
    *(_QWORD *)(a4 + 240) = v33;
    if (v27 != v33)
      sub_1B1A1059C(v33, v27);
  }
  else
  {
    if ((v5 & 1) == 0)
      ++*(_QWORD *)(a4 + 256);
    v28 = *(char **)(a4 + 232);
    if (v27 == v28)
      v29 = v27;
    else
      v29 = v28 + 1;
    *(_QWORD *)(a4 + 232) = v29;
    *(_QWORD *)(a4 + 240) = v27;
  }
}

void sub_1B1FD8068(uint64_t a1, _QWORD *a2, char a3, _QWORD *a4)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  int64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  int64_t v25;
  Swift::UInt32 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  os_unfair_lock_s *v59;
  os_unfair_lock_s *v60;
  uint64_t v61;
  uint64_t *v62;
  char *v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  _QWORD *v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  unint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v98;
  uint64_t v99;

  v4 = a3;
  if (*(_BYTE *)(a1 + 210) != 1)
  {
    v28 = a2[2];
    if (v28)
    {
      swift_bridgeObjectRetain();
      v29 = 0;
      do
      {
        v33 = &a2[v29];
        v34 = v33[4];
        if ((v4 & 1) != 0)
          sub_1B1A10E3C(v33[4], a4[29]);
        else
          sub_1B1A10E3C(v33[4], a4[32]++);
        ++v29;
        v30 = a4[29];
        if (a4[30] == v30)
          v31 = a4[30];
        else
          v31 = v30 + 1;
        a4[29] = v31;
        v32 = a4[31];
        if (v31 <= v32)
          v31 = a4[31];
        if (v34 >= v32)
          v31 = v32 + 1;
        a4[31] = v31;
      }
      while (v28 != v29);
      swift_bridgeObjectRelease();
    }
    return;
  }
  v5 = (uint64_t)a4;
  v6 = a4[7];
  v7 = a2;
  v93 = *(_QWORD *)(v6 + 16);
  if (v93)
  {
    v91 = v6 + 32;
    v9 = a2 + 4;
    v8 = a2[4];
    v10 = 256;
    v11 = a2[2];
    if ((a3 & 1) != 0)
      v10 = 232;
    v86 = v10;
    v87 = a2[4];
    v89 = a4[2];
    v81 = v8 + 1;
    v73 = v8 + 3;
    v75 = v8 + 2;
    v71 = v8 + 4;
    v68 = v11 + v8;
    swift_retain();
    v12 = v11;
    v13 = 0;
    v83 = v7 + 8;
    v77 = v7 + 7;
    while (1)
    {
      v14 = *(_QWORD *)(v91 + 40 * v13);
      v15 = *(_QWORD *)(v5 + v86);
      v95 = v13;
      if (v15 == v87)
      {
        if (v12 > 1)
        {
          if (v81 == v7[5])
            v16 = 2;
          else
            v16 = 1;
          if (v81 == v7[5])
            v15 = v75;
          else
            v15 = v81;
          if (v81 != v7[5] || v12 < 3)
            goto LABEL_44;
          v16 = v75 == v7[6] ? 3 : 2;
          v15 = v75 == v7[6] ? v73 : v75;
          if (v75 != v7[6] || v12 < 4)
            goto LABEL_44;
          v16 = v73 == v7[7] ? 4 : 3;
          v15 = v73 == v7[7] ? v71 : v73;
          if (v73 != v7[7] || (unint64_t)v11 < 5)
            goto LABEL_44;
          v18 = 0;
          v16 = v11;
          do
          {
            v15 = v71 + v18;
            if (v71 + v18 != v83[v18])
            {
              v16 = v18 + 4;
              goto LABEL_44;
            }
            ++v18;
          }
          while (v11 - 4 != v18);
          v15 = v68;
LABEL_44:
          v20 = *(_QWORD *)(v5 + 240);
          swift_bridgeObjectRetain();
          v19 = 0;
          v21 = v11;
          while (1)
          {
            v23 = v9[--v21];
            if (v23 >= *(_QWORD *)(v5 + 248))
            {
              if (v23 < --v20)
              {
                sub_1B1F24AC4();
                ++v19;
              }
              v22 = v15;
            }
            else
            {
              if (v15 >= v23)
              {
LABEL_63:
                v7 = a2;
                swift_bridgeObjectRelease();
                goto LABEL_64;
              }
              sub_1B1F24AC4();
              ++v19;
              v22 = v15 + 1;
              if (v15 + 1 == v9[v16])
              {
                v22 = v15 + 2;
                v24 = v16 + 1;
                if (v16 + 1 < v11
                  && v22 == v9[v24]
                  && (v22 = v15 + 3, v24 = v16 + 2, v16 + 2 < v11)
                  && v22 == v9[v24]
                  && (v22 = v15 + 4, v24 = v16 + 3, v16 + 3 < v11))
                {
                  v25 = v11 + 1 + v15 - v16;
                  while (v22 == v77[v16])
                  {
                    ++v22;
                    if (v11 - 3 == ++v16)
                    {
                      v22 = v25;
                      v16 = v11;
                      goto LABEL_46;
                    }
                  }
                  v16 += 3;
                }
                else
                {
                  v16 = v24;
                }
              }
            }
LABEL_46:
            v15 = v22;
            if (!v21)
              goto LABEL_63;
          }
        }
        if (v12)
        {
          v16 = 1;
          v15 = v81;
          goto LABEL_44;
        }
        v19 = 0;
      }
      else
      {
        v16 = 0;
        v19 = 0;
        if (v12)
          goto LABEL_44;
      }
LABEL_64:
      v26 = *(_DWORD *)(v89 + 80 + OBJC_IVAR____TtC3VFX13EntityManager_counters);
      v27 = sub_1B1F24AF8(v14);
      if (*(_QWORD *)(v89 + OBJC_IVAR____TtC3VFX13EntityManager_counters))
        vfx_counters.add(_:_:)(v26, v27 * v19);
      v13 = v95 + 1;
      v12 = v11;
      if (v95 + 1 == v93)
      {
        swift_release();
        v4 = a3;
        break;
      }
    }
  }
  v35 = *(_QWORD *)(v5 + 64);
  v96 = *(_QWORD *)(v35 + 16);
  if (!v96)
    goto LABEL_147;
  v94 = v35 + 32;
  v37 = v7 + 4;
  v36 = v7[4];
  v38 = 256;
  v39 = v7[2];
  if ((v4 & 1) != 0)
    v38 = 232;
  v88 = v38;
  v90 = v7[4];
  v92 = *(_QWORD *)(v5 + 16);
  v82 = v36 + 1;
  v79 = v39 + 1;
  v80 = v36 + 2;
  v72 = v36 + 4;
  v74 = v36 + 3;
  v69 = v39 + v36;
  swift_retain();
  v40 = 0;
  v84 = v39 - 4;
  v85 = v7 + 8;
  v76 = v7 + 7;
  v78 = v39 - 3;
  v99 = v39;
  do
  {
    v41 = (uint64_t *)(v94 + 40 * v40);
    v42 = *v41;
    v44 = v41[2];
    v43 = v41[3];
    v45 = *(_QWORD *)(v5 + v88);
    v98 = v40;
    if (v45 == v90)
    {
      if (v39 > 1)
      {
        if (v82 == v7[5])
          v45 = v80;
        else
          v45 = v82;
        if (v82 == v7[5])
          v46 = 2;
        else
          v46 = 1;
        if (v82 != v7[5] || v39 < 3)
          goto LABEL_121;
        v45 = v80 == v7[6] ? v74 : v80;
        v46 = v80 == v7[6] ? 3 : 2;
        if (v80 != v7[6] || v39 < 4)
          goto LABEL_121;
        v45 = v74 == v7[7] ? v72 : v74;
        v46 = v74 == v7[7] ? 4 : 3;
        if (v74 != v7[7] || v39 < 5)
          goto LABEL_121;
        v47 = 0;
        do
        {
          v45 = v72 + v47;
          if (v72 + v47 != v85[v47])
          {
            v46 = v47 + 4;
            goto LABEL_121;
          }
          ++v47;
        }
        while (v84 != v47);
        v45 = v69;
        v46 = v39;
LABEL_121:
        v49 = *(_QWORD *)(v5 + 128) + v43;
        v50 = v39;
        v51 = *(_QWORD *)(v5 + 240);
        swift_bridgeObjectRetain();
        v48 = 0;
        v52 = v50;
        while (1)
        {
          v54 = v37[--v52];
          if (v54 >= a4[31])
          {
            if (v54 < --v51)
            {
              sub_1B1F24B04(v49 + v54 * v44, v49 + v51 * v44, v42);
              ++v48;
            }
            v53 = v45;
          }
          else
          {
            if (v45 >= v54)
            {
LABEL_140:
              v7 = a2;
              swift_bridgeObjectRelease();
              v5 = (uint64_t)a4;
              v39 = v99;
              goto LABEL_141;
            }
            sub_1B1F24B04(v49 + v54 * v44, v49 + v45 * v44, v42);
            ++v48;
            v53 = v45 + 1;
            if (v45 + 1 == v37[v46])
            {
              v53 = v45 + 2;
              v55 = v46 + 1;
              if (v46 + 1 < v99
                && v53 == v37[v55]
                && (v53 = v45 + 3, v55 = v46 + 2, v46 + 2 < v99)
                && v53 == v37[v55]
                && (v53 = v45 + 4, v55 = v46 + 3, v46 + 3 < v99))
              {
                v56 = v79 + v45 - v46;
                while (v53 == v76[v46])
                {
                  ++v53;
                  if (v78 == ++v46)
                  {
                    v53 = v56;
                    v46 = v99;
                    goto LABEL_123;
                  }
                }
                v46 += 3;
              }
              else
              {
                v46 = v55;
              }
            }
          }
LABEL_123:
          v45 = v53;
          if (!v52)
            goto LABEL_140;
        }
      }
      if (v39)
      {
        v45 = v82;
        v46 = 1;
        goto LABEL_121;
      }
      v48 = 0;
    }
    else
    {
      v46 = 0;
      v48 = 0;
      if (v39)
        goto LABEL_121;
    }
LABEL_141:
    if (*(_QWORD *)(v92 + OBJC_IVAR____TtC3VFX13EntityManager_counters))
      vfx_counters.add(_:_:)(*(_DWORD *)(v92 + 80 + OBJC_IVAR____TtC3VFX13EntityManager_counters), v48 * v44);
    v40 = v98 + 1;
  }
  while (v98 + 1 != v96);
  swift_release();
  v4 = a3;
LABEL_147:
  if ((*(_BYTE *)(v5 + 184) & 1) == 0)
  {
    v57 = *(_QWORD *)(v5 + 168);
    v58 = *(_QWORD *)(v5 + 16);
    v59 = *(os_unfair_lock_s **)(v58 + OBJC_IVAR____TtC3VFX13EntityManager_lock + 24);
    swift_retain();
    os_unfair_lock_lock(v59);
    swift_release();
    swift_retain();
    sub_1B1A13068(a2, v4 & 1, v5, v5, v57);
    swift_release();
    v60 = *(os_unfair_lock_s **)(v58 + OBJC_IVAR____TtC3VFX13EntityManager_lock + 24);
    swift_retain();
    os_unfair_lock_unlock(v60);
    swift_release();
  }
  v61 = a2[2];
  if (v61)
  {
    v62 = a2 + 4;
    v63 = *(char **)(v5 + 240);
    v64 = *(_QWORD *)(v5 + 248);
    v65 = *(char **)(v5 + 232);
    v66 = v63;
    do
    {
      v67 = *v62++;
      if (v67 >= v64)
      {
        v66 = &v65[(unint64_t)&v66[~(unint64_t)v65] & ~((uint64_t)&v66[~(unint64_t)v65] >> 63)];
      }
      else
      {
        if ((v4 & 1) == 0)
          ++*(_QWORD *)(v5 + 256);
        if (v66 == v65)
          v65 = v66;
        else
          ++v65;
      }
      *(_QWORD *)(v5 + 232) = v65;
      *(_QWORD *)(v5 + 240) = v66;
      --v61;
    }
    while (v61);
    if (v63 != v66)
      sub_1B1A1059C(v66, v63);
  }
}

uint64_t sub_1B1FD891C(uint64_t *a1, uint64_t a2, uint64_t a3, signed int a4, int a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v16;
  _BYTE *v17;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t i;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  int v42;
  int v43;
  uint64_t *v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;

  v9 = v8;
  v46 = a7;
  v42 = a5;
  v16 = *(_QWORD *)(v9 + 16);
  v17 = *(_BYTE **)(v9 + 40);
  v18 = v17[200];
  v52 = *(_QWORD *)(*(_QWORD *)(v16 + 80) + 8 * a4 + 32);
  swift_retain();
  if ((v18 & 1) != 0 || *(_BYTE *)(v52 + 200) == 1)
  {
    *(_BYTE *)(v16 + OBJC_IVAR____TtC3VFX13EntityManager_shouldNotifyEntityEvent) = 1;
    v17 = *(_BYTE **)(v9 + 40);
  }
  v19 = v17[212];
  v50 = a6;
  v47 = a8;
  if ((v19 & 1) != 0)
    v43 = 0;
  else
    v43 = *(unsigned __int8 *)(v52 + 212);
  v45 = v17[208];
  v51 = *(_QWORD *)(v9 + 128);
  v20 = *(_QWORD *)(v9 + 256);
  sub_1B1FD7538((uint64_t)v17, a1, a2, a3, 0, v9);
  v48 = *(_QWORD *)(v9 + 256);
  v49 = v20;
  v21 = v48 - v20;
  if (v48 == v20)
    v22 = 0;
  else
    v22 = v20;
  v62 = v22;
  v23 = *(_QWORD *)(*(_QWORD *)(v9 + 40) + 24);
  v24 = *(_QWORD *)(v23 + 16);
  if (v24)
  {
    v25 = v23 + 32;
    v44 = *(uint64_t **)(*(_QWORD *)(v9 + 40) + 24);
    swift_retain();
    for (i = 0; i != v24; ++i)
    {
      v27 = v25 + 40 * i;
      if ((*(_BYTE *)(v27 + 32) & 1) == 0)
      {
        v28 = *(_QWORD *)(v52 + 24);
        v29 = *(_QWORD *)(v28 + 16);
        if (v29)
        {
          v30 = (_QWORD *)(v28 + 32);
          while (*v30 != *(_QWORD *)v27)
          {
            v30 += 5;
            if (!--v29)
              goto LABEL_12;
          }
        }
        else
        {
LABEL_12:
          sub_1B1F24B64();
        }
      }
    }
    swift_release();
  }
  v31 = v50;
  if (*(_QWORD *)(v16 + OBJC_IVAR____TtC3VFX13EntityManager_counters))
    vfx_counters.add(_:_:)(*(_DWORD *)(v16 + OBJC_IVAR____TtC3VFX13EntityManager_counters + 68), *(_QWORD *)(v9 + 72) * v21);
  if (*(_BYTE *)(v9 + 184) & 1 | (*(_QWORD *)(v9 + 168) == 0))
    v32 = 0;
  else
    v32 = *(_QWORD *)(v9 + 168);
  v61 = 0;
  v33 = swift_retain();
  v44 = &v41;
  MEMORY[0x1E0C80A78](v33, v34);
  v56 = -1;
  v36 = v48;
  v35 = v49;
  v57 = v49;
  v58 = v48;
  v59 = v49;
  v60 = v48;
  v53 = v49;
  v54 = v48;
  v55 = v32;
  if (v21 >= 1)
  {
    v37 = v42 & 1;
    do
      sub_1B1C91FB4(a4, v31 | ((HIDWORD(v31) & 1) << 32), v37, v16, (uint64_t)&v53, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1FE5598);
    while (v54 - v53 > 0);
  }
  swift_release();
  v38 = *(_QWORD *)(v9 + 192);
  if (v38)
  {
    v39 = *(_QWORD *)(v9 + 208);
    sub_1B19FA6EC(v35, v36, v38);
    sub_1B19FA6EC(v35, v36, v39);
  }
  return swift_release();
}

uint64_t sub_1B1FD8C68(uint64_t a1, uint64_t a2, signed int a3, int a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v16;
  _BYTE *v17;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t i;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD v40[2];
  int v41;
  _QWORD *v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  v9 = v8;
  v44 = a6;
  v45 = a7;
  v16 = *(_QWORD *)(v9 + 16);
  v17 = *(_BYTE **)(v9 + 40);
  v18 = v17[200];
  v51 = *(_QWORD *)(*(_QWORD *)(v16 + 80) + 8 * a3 + 32);
  swift_retain();
  if ((v18 & 1) != 0 || *(_BYTE *)(v51 + 200) == 1)
  {
    *(_BYTE *)(v16 + OBJC_IVAR____TtC3VFX13EntityManager_shouldNotifyEntityEvent) = 1;
    v17 = *(_BYTE **)(v9 + 40);
  }
  v19 = v17[212];
  v49 = a5;
  v46 = a8;
  if ((v19 & 1) != 0)
    v41 = 0;
  else
    v41 = *(unsigned __int8 *)(v51 + 212);
  v43 = v17[208];
  v50 = *(_QWORD *)(v9 + 128);
  v20 = *(_QWORD *)(v9 + 256);
  sub_1B1FD6E48((uint64_t)v17, a1, a2, 0, v9);
  v47 = *(_QWORD *)(v9 + 256);
  v48 = v20;
  v21 = v47 - v20;
  if (v47 == v20)
    v22 = 0;
  else
    v22 = v20;
  v61 = v22;
  v23 = *(_QWORD *)(*(_QWORD *)(v9 + 40) + 24);
  v24 = *(_QWORD *)(v23 + 16);
  if (v24)
  {
    LODWORD(v42) = a4;
    v25 = v23 + 32;
    v40[1] = v23;
    swift_retain();
    for (i = 0; i != v24; ++i)
    {
      v27 = v25 + 40 * i;
      if ((*(_BYTE *)(v27 + 32) & 1) == 0)
      {
        v28 = *(_QWORD *)(v51 + 24);
        v29 = *(_QWORD *)(v28 + 16);
        if (v29)
        {
          v30 = (_QWORD *)(v28 + 32);
          while (*v30 != *(_QWORD *)v27)
          {
            v30 += 5;
            if (!--v29)
              goto LABEL_12;
          }
        }
        else
        {
LABEL_12:
          sub_1B1F24B64();
        }
      }
    }
    swift_release();
    LOBYTE(a4) = (_BYTE)v42;
  }
  v31 = v49;
  if (*(_QWORD *)(v16 + OBJC_IVAR____TtC3VFX13EntityManager_counters))
    vfx_counters.add(_:_:)(*(_DWORD *)(v16 + OBJC_IVAR____TtC3VFX13EntityManager_counters + 68), *(_QWORD *)(v9 + 72) * v21);
  if (*(_BYTE *)(v9 + 184) & 1 | (*(_QWORD *)(v9 + 168) == 0))
    v32 = 0;
  else
    v32 = *(_QWORD *)(v9 + 168);
  v60 = 0;
  v33 = swift_retain();
  v42 = v40;
  MEMORY[0x1E0C80A78](v33, v34);
  v55 = -1;
  v36 = v47;
  v35 = v48;
  v56 = v48;
  v57 = v47;
  v58 = v48;
  v59 = v47;
  v52 = v48;
  v53 = v47;
  v54 = v32;
  if (v21 >= 1)
  {
    do
      sub_1B1C91FB4(a3, v31 | ((HIDWORD(v31) & 1) << 32), a4 & 1, v16, (uint64_t)&v52, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1FE5598);
    while (v53 - v52 > 0);
  }
  swift_release();
  v37 = *(_QWORD *)(v9 + 192);
  if (v37)
  {
    v38 = *(_QWORD *)(v9 + 208);
    sub_1B19FA6EC(v35, v36, v37);
    sub_1B19FA6EC(v35, v36, v38);
  }
  return swift_release();
}

uint64_t sub_1B1FD8FC0(uint64_t a1, signed int a2, int a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v16;
  _BYTE *v17;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t i;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  unint64_t v42;
  int v43;
  uint64_t *v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;

  v9 = v8;
  v46 = a5;
  v47 = a6;
  v16 = *(_QWORD *)(v9 + 16);
  v17 = *(_BYTE **)(v9 + 40);
  v18 = v17[200];
  v53 = *(_QWORD *)(*(_QWORD *)(v16 + 80) + 8 * a2 + 32);
  swift_retain();
  if ((v18 & 1) != 0 || *(_BYTE *)(v53 + 200) == 1)
  {
    *(_BYTE *)(v16 + OBJC_IVAR____TtC3VFX13EntityManager_shouldNotifyEntityEvent) = 1;
    v17 = *(_BYTE **)(v9 + 40);
  }
  v19 = v17[212];
  v48 = a7;
  v49 = a8;
  if ((v19 & 1) != 0)
    v43 = 0;
  else
    v43 = *(unsigned __int8 *)(v53 + 212);
  v45 = v17[208];
  v52 = *(_QWORD *)(v9 + 128);
  v20 = *(_QWORD *)(v9 + 256);
  sub_1B1FD7CE8((uint64_t)v17, a1, 0, v9);
  v50 = *(_QWORD *)(v9 + 256);
  v51 = v20;
  v21 = v50 - v20;
  if (v50 == v20)
    v22 = 0;
  else
    v22 = v20;
  v63 = v22;
  v23 = *(_QWORD *)(*(_QWORD *)(v9 + 40) + 24);
  v24 = *(_QWORD *)(v23 + 16);
  if (v24)
  {
    v42 = a4;
    LODWORD(v44) = a3;
    v25 = v23 + 32;
    v41 = v23;
    swift_retain();
    for (i = 0; i != v24; ++i)
    {
      v27 = v25 + 40 * i;
      if ((*(_BYTE *)(v27 + 32) & 1) == 0)
      {
        v28 = *(_QWORD *)(v53 + 24);
        v29 = *(_QWORD *)(v28 + 16);
        if (v29)
        {
          v30 = (_QWORD *)(v28 + 32);
          while (*v30 != *(_QWORD *)v27)
          {
            v30 += 5;
            if (!--v29)
              goto LABEL_12;
          }
        }
        else
        {
LABEL_12:
          sub_1B1F24B64();
        }
      }
    }
    swift_release();
    LOBYTE(a3) = (_BYTE)v44;
    a4 = v42;
  }
  if (*(_QWORD *)(v16 + OBJC_IVAR____TtC3VFX13EntityManager_counters))
    vfx_counters.add(_:_:)(*(_DWORD *)(v16 + OBJC_IVAR____TtC3VFX13EntityManager_counters + 68), *(_QWORD *)(v9 + 72) * v21);
  if (*(_BYTE *)(v9 + 184) & 1 | (*(_QWORD *)(v9 + 168) == 0))
    v31 = 0;
  else
    v31 = *(_QWORD *)(v9 + 168);
  v62 = 0;
  v32 = swift_retain();
  v44 = &v41;
  MEMORY[0x1E0C80A78](v32, v33);
  v56 = v31;
  v57 = -1;
  v35 = v50;
  v34 = v51;
  v58 = v51;
  v59 = v50;
  v60 = v51;
  v61 = v50;
  v54 = v51;
  v55 = v50;
  if (v21 >= 1)
  {
    v36 = a4 | ((HIDWORD(a4) & 1) << 32);
    v37 = a3 & 1;
    do
      sub_1B1C91FB4(a2, v36, v37, v16, (uint64_t)&v54, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1FE5598);
    while (v55 - v54 > 0);
  }
  swift_release();
  v38 = *(_QWORD *)(v9 + 192);
  if (v38)
  {
    v39 = *(_QWORD *)(v9 + 208);
    sub_1B19FA6EC(v34, v35, v38);
    sub_1B19FA6EC(v34, v35, v39);
  }
  return swift_release();
}

uint64_t sub_1B1FD9320(_QWORD *a1, signed int a2, int a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v16;
  _BYTE *v17;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t i;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  unint64_t v42;
  int v43;
  uint64_t *v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;

  v9 = v8;
  v46 = a5;
  v47 = a6;
  v16 = *(_QWORD *)(v9 + 16);
  v17 = *(_BYTE **)(v9 + 40);
  v18 = v17[200];
  v53 = *(_QWORD *)(*(_QWORD *)(v16 + 80) + 8 * a2 + 32);
  swift_retain();
  if ((v18 & 1) != 0 || *(_BYTE *)(v53 + 200) == 1)
  {
    *(_BYTE *)(v16 + OBJC_IVAR____TtC3VFX13EntityManager_shouldNotifyEntityEvent) = 1;
    v17 = *(_BYTE **)(v9 + 40);
  }
  v19 = v17[212];
  v48 = a7;
  v49 = a8;
  if ((v19 & 1) != 0)
    v43 = 0;
  else
    v43 = *(unsigned __int8 *)(v53 + 212);
  v45 = v17[208];
  v52 = *(_QWORD *)(v9 + 128);
  v20 = *(_QWORD *)(v9 + 256);
  sub_1B1FD8068((uint64_t)v17, a1, 0, (_QWORD *)v9);
  v50 = *(_QWORD *)(v9 + 256);
  v51 = v20;
  v21 = v50 - v20;
  if (v50 == v20)
    v22 = 0;
  else
    v22 = v20;
  v63 = v22;
  v23 = *(_QWORD *)(*(_QWORD *)(v9 + 40) + 24);
  v24 = *(_QWORD *)(v23 + 16);
  if (v24)
  {
    v42 = a4;
    LODWORD(v44) = a3;
    v25 = v23 + 32;
    v41 = v23;
    swift_retain();
    for (i = 0; i != v24; ++i)
    {
      v27 = v25 + 40 * i;
      if ((*(_BYTE *)(v27 + 32) & 1) == 0)
      {
        v28 = *(_QWORD *)(v53 + 24);
        v29 = *(_QWORD *)(v28 + 16);
        if (v29)
        {
          v30 = (_QWORD *)(v28 + 32);
          while (*v30 != *(_QWORD *)v27)
          {
            v30 += 5;
            if (!--v29)
              goto LABEL_12;
          }
        }
        else
        {
LABEL_12:
          sub_1B1F24B64();
        }
      }
    }
    swift_release();
    LOBYTE(a3) = (_BYTE)v44;
    a4 = v42;
  }
  if (*(_QWORD *)(v16 + OBJC_IVAR____TtC3VFX13EntityManager_counters))
    vfx_counters.add(_:_:)(*(_DWORD *)(v16 + OBJC_IVAR____TtC3VFX13EntityManager_counters + 68), *(_QWORD *)(v9 + 72) * v21);
  if (*(_BYTE *)(v9 + 184) & 1 | (*(_QWORD *)(v9 + 168) == 0))
    v31 = 0;
  else
    v31 = *(_QWORD *)(v9 + 168);
  v62 = 0;
  v32 = swift_retain();
  v44 = &v41;
  MEMORY[0x1E0C80A78](v32, v33);
  v56 = v31;
  v57 = -1;
  v35 = v50;
  v34 = v51;
  v58 = v51;
  v59 = v50;
  v60 = v51;
  v61 = v50;
  v54 = v51;
  v55 = v50;
  if (v21 >= 1)
  {
    v36 = a4 | ((HIDWORD(a4) & 1) << 32);
    v37 = a3 & 1;
    do
      sub_1B1C91FB4(a2, v36, v37, v16, (uint64_t)&v54, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1FE5598);
    while (v55 - v54 > 0);
  }
  swift_release();
  v38 = *(_QWORD *)(v9 + 192);
  if (v38)
  {
    v39 = *(_QWORD *)(v9 + 208);
    sub_1B19FA6EC(v34, v35, v38);
    sub_1B19FA6EC(v34, v35, v39);
  }
  return swift_release();
}

uint64_t *sub_1B1FD9680(uint64_t *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t *v6;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (result)
  {
    v12 = result;
    v13 = v6[24];
    if (v13)
      sub_1B1FE2290(result, a2, a3, a4, a5, a6, v13, v6[25], v6[26]);
    return (uint64_t *)sub_1B1FE26A8(v6[5], (uint64_t)v6, v12, a2, a3);
  }
  else
  {
    v14 = v6[29];
    v15 = v6[30];
    if (v15 != v14)
    {
      v16 = v6[24];
      if (v16)
      {
        v17 = v6[26];
        sub_1B19FA4BC(v6[29], v6[30], v16);
        if (a6 == 3 && a4 == 2 && !a5)
          sub_1B19FA4BC(v14, v15, v17);
        else
          sub_1B19FA6EC(v14, v15, v17);
      }
      return (uint64_t *)sub_1B1FE2814(v6[5], (uint64_t)v6, v14, v15);
    }
  }
  return result;
}

__n128 sub_1B1FD97BC(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __n128 result;
  _BYTE v21[26];

  v4 = v2[6];
  v5 = *(_QWORD *)(v4 + 16);
  if (v5)
  {
    v6 = (uint64_t *)(v4 + 56);
    while ((ValueMetadata *)*(v6 - 3) != &type metadata for TextureLoadingOptions)
    {
      v6 += 5;
      if (!--v5)
        goto LABEL_7;
    }
    v5 = *v6;
  }
LABEL_7:
  v7 = v2[16] + v5 + (a1 << 6);
  v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v21 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)&v21[10] = *(_OWORD *)(a2 + 42);
  if (*(_QWORD *)v7 != *(_QWORD *)a2
    || *(_QWORD *)(v7 + 8) != *(_QWORD *)(a2 + 8)
    || *(_QWORD *)(v7 + 16) != (_QWORD)v8
    || *(_QWORD *)(v7 + 24) != *((_QWORD *)&v8 + 1)
    || *(_QWORD *)(v7 + 32) != *(_QWORD *)v21
    || *(_QWORD *)(v7 + 40) != *(_QWORD *)&v21[8]
    || *(_QWORD *)(v7 + 48) != *(_QWORD *)&v21[16]
    || *(unsigned __int16 *)(v7 + 56) != (unint64_t)*(unsigned __int16 *)&v21[24])
  {
    v16 = v2[24];
    if (v16)
    {
      v17 = v2[26];
      v18 = 8 * (a1 >> 6);
      *(_QWORD *)(v16 + v18) |= 1 << a1;
      *(_QWORD *)(v17 + v18) &= ~(1 << a1);
    }
    sub_1B1FE2568(v2[5], (uint64_t)v2, a1);
  }
  v19 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v7 = *(_OWORD *)a2;
  *(_OWORD *)(v7 + 16) = v19;
  *(_OWORD *)(v7 + 32) = *(_OWORD *)(a2 + 32);
  result = *(__n128 *)(a2 + 42);
  *(__n128 *)(v7 + 42) = result;
  return result;
}

uint64_t sub_1B1FD9920(uint64_t result, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = v2[6];
  v5 = *(_QWORD *)(v4 + 16);
  if (v5)
  {
    v6 = (uint64_t *)(v4 + 56);
    while ((ValueMetadata *)*(v6 - 3) != &type metadata for Scheduling)
    {
      v6 += 5;
      if (!--v5)
        goto LABEL_7;
    }
    v5 = *v6;
  }
LABEL_7:
  v7 = v5 + 8 * result;
  v8 = v2[16];
  if (*(_QWORD *)(v8 + v7) != a2)
  {
    v9 = v2[24];
    if (v9)
    {
      v10 = v2[26];
      v11 = 8 * (result >> 6);
      *(_QWORD *)(v9 + v11) |= 1 << result;
      *(_QWORD *)(v10 + v11) &= ~(1 << result);
    }
    result = sub_1B1FE2568(v2[5], (uint64_t)v2, result);
  }
  *(_QWORD *)(v8 + v7) = a2;
  return result;
}

__n128 sub_1B1FD9A20(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __n128 result;
  __int128 v20;
  _OWORD v21[13];
  char v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(v2 + 48);
  v5 = *(_QWORD *)(v4 + 16);
  if (v5)
  {
    v6 = (uint64_t *)(v4 + 56);
    while ((ValueMetadata *)*(v6 - 3) != &type metadata for EmitterShape)
    {
      v6 += 5;
      if (!--v5)
        goto LABEL_7;
    }
    v5 = *v6;
  }
LABEL_7:
  v7 = *(_QWORD *)(v2 + 128) + v5 + 224 * a1;
  v8 = *(_OWORD *)(a2 + 176);
  v21[10] = *(_OWORD *)(a2 + 160);
  v21[11] = v8;
  v21[12] = *(_OWORD *)(a2 + 192);
  v22 = *(_BYTE *)(a2 + 208);
  v9 = *(_OWORD *)(a2 + 112);
  v21[6] = *(_OWORD *)(a2 + 96);
  v21[7] = v9;
  v10 = *(_OWORD *)(a2 + 144);
  v21[8] = *(_OWORD *)(a2 + 128);
  v21[9] = v10;
  v11 = *(_OWORD *)(a2 + 48);
  v21[2] = *(_OWORD *)(a2 + 32);
  v21[3] = v11;
  v12 = *(_OWORD *)(a2 + 80);
  v21[4] = *(_OWORD *)(a2 + 64);
  v21[5] = v12;
  v13 = *(_OWORD *)(a2 + 16);
  v21[0] = *(_OWORD *)a2;
  v21[1] = v13;
  sub_1B1FDE32C(a1, v7, (uint64_t)v21);
  v14 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(v7 + 160) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(v7 + 176) = v14;
  *(_OWORD *)(v7 + 192) = *(_OWORD *)(a2 + 192);
  *(_BYTE *)(v7 + 208) = *(_BYTE *)(a2 + 208);
  v15 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(v7 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(v7 + 112) = v15;
  v16 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(v7 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(v7 + 144) = v16;
  v17 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v7 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v7 + 48) = v17;
  v18 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(v7 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v7 + 80) = v18;
  result = *(__n128 *)a2;
  v20 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v7 = *(_OWORD *)a2;
  *(_OWORD *)(v7 + 16) = v20;
  return result;
}

uint64_t sub_1B1FD9B50(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  unsigned int v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  int v14;
  uint64_t result;
  __int16 v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v7 = *(_QWORD *)(v4 + 48);
  v8 = *(_QWORD *)(v7 + 16);
  if (v8)
  {
    v9 = (uint64_t *)(v7 + 56);
    while ((ValueMetadata *)*(v9 - 3) != &type metadata for VideoCapture)
    {
      v9 += 5;
      if (!--v8)
        goto LABEL_7;
    }
    v8 = *v9;
  }
LABEL_7:
  v10 = a2 >> 8;
  v11 = *(_QWORD *)(v4 + 128);
  v12 = a2 & 1;
  v16 = a2 & 0xFF01;
  v13 = v11 + v8 + 24 * a1;
  v14 = HIWORD(a2) & 1;
  v17 = BYTE2(a2) & 1;
  v18 = a3;
  v19 = a4;
  sub_1B1FDE490(a1, (unsigned __int8 *)v13, (unsigned __int8 *)&v16);
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRelease();
  *(_BYTE *)v13 = v12;
  *(_BYTE *)(v13 + 1) = v10;
  *(_BYTE *)(v13 + 2) = v14;
  *(_QWORD *)(v13 + 8) = a3;
  *(_QWORD *)(v13 + 16) = a4;
  return result;
}

uint64_t sub_1B1FD9C54(uint64_t a1, const void *a2, uint64_t a3)
{
  return sub_1B1FDC3A4(a1, a2, a3, type metadata accessor for EmitterScript, (uint64_t (*)(const void *, const void *))sub_1B1FEECDC);
}

__n128 sub_1B1FD9C68(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  void *v13;
  __n128 result;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __n128 v18;
  char v19[8];
  __n128 v20;
  __int128 v21;
  __int128 v22;
  id v23[3];

  v23[2] = *(id *)MEMORY[0x1E0C80C00];
  v4 = v2[6];
  v5 = *(_QWORD *)(v4 + 16);
  if (v5)
  {
    v6 = (uint64_t *)(v4 + 56);
    while ((ValueMetadata *)*(v6 - 3) != &type metadata for MeshFileAsset)
    {
      v6 += 5;
      if (!--v5)
        goto LABEL_7;
    }
    v5 = *v6;
  }
LABEL_7:
  v7 = v2[16];
  v8 = v2[24];
  if (v8)
  {
    v9 = v2[26];
    v10 = 8 * (a1 >> 6);
    *(_QWORD *)(v8 + v10) |= 1 << a1;
    *(_QWORD *)(v9 + v10) &= ~(1 << a1);
  }
  v11 = v7 + v5 + 56 * a1;
  sub_1B1FE2568(v2[5], (uint64_t)v2, a1);
  v12 = *(_OWORD *)(a2 + 16);
  v20 = *(__n128 *)a2;
  v21 = v12;
  v22 = *(_OWORD *)(a2 + 32);
  v17 = v12;
  v18 = v20;
  sub_1B1AE72F4((uint64_t)&v22, (uint64_t)v23);
  sub_1B1EC57D4(a2 + 48, (uint64_t)v19, (unint64_t *)&qword_1EEF59398, &qword_1ED4BA4D0, MEMORY[0x1E0DEB418]);
  v13 = *(void **)(v11 + 32);
  sub_1B1AE7408((uint64_t)&v18);
  sub_1B1AE7408((uint64_t)&v17);
  sub_1B1AE7430(v23);
  sub_1B1B28C44((uint64_t)v19);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  result = *(__n128 *)a2;
  v15 = *(_OWORD *)(a2 + 16);
  v16 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(v11 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(v11 + 16) = v15;
  *(_OWORD *)(v11 + 32) = v16;
  *(__n128 *)v11 = result;
  return result;
}

uint64_t sub_1B1FD9E04(uint64_t result, unint64_t a2, unint64_t a3)
{
  uint64_t *v3;
  int v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4 = a3;
  v5 = a2;
  v6 = HIDWORD(a2);
  v7 = HIDWORD(a3);
  v8 = v3[6];
  v9 = *(_QWORD *)(v8 + 16);
  if (v9)
  {
    v10 = (uint64_t *)(v8 + 56);
    while ((ValueMetadata *)*(v10 - 3) != &type metadata for ModelRenderer)
    {
      v10 += 5;
      if (!--v9)
        goto LABEL_7;
    }
    v9 = *v10;
  }
LABEL_7:
  v11 = v3[16] + v9 + 16 * result;
  if (*(_QWORD *)v11 != a2 || *(_QWORD *)(v11 + 8) != a3)
  {
    v13 = v3[24];
    if (v13)
    {
      v14 = v3[26];
      v15 = 8 * (result >> 6);
      *(_QWORD *)(v13 + v15) |= 1 << result;
      *(_QWORD *)(v14 + v15) &= ~(1 << result);
    }
    result = sub_1B1FE2568(v3[5], (uint64_t)v3, result);
  }
  *(_DWORD *)v11 = v5;
  *(_DWORD *)(v11 + 4) = v6;
  *(_DWORD *)(v11 + 8) = v4;
  *(_DWORD *)(v11 + 12) = v7;
  return result;
}

uint64_t sub_1B1FD9F28(uint64_t result, unsigned __int8 a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = v2[6];
  v5 = *(_QWORD *)(v4 + 16);
  if (v5)
  {
    v6 = (uint64_t *)(v4 + 56);
    while ((ValueMetadata *)*(v6 - 3) != &type metadata for SpaceOverride)
    {
      v6 += 5;
      if (!--v5)
        goto LABEL_7;
    }
    v5 = *v6;
  }
LABEL_7:
  v7 = v5 + result;
  v8 = v2[16];
  if (*(unsigned __int8 *)(v8 + v5 + result) != a2)
  {
    v9 = v2[24];
    if (v9)
    {
      v10 = v2[26];
      v11 = 8 * (result >> 6);
      *(_QWORD *)(v9 + v11) |= 1 << result;
      *(_QWORD *)(v10 + v11) &= ~(1 << result);
    }
    result = sub_1B1FE2568(v2[5], (uint64_t)v2, result);
  }
  *(_BYTE *)(v8 + v7) = a2;
  return result;
}

__n128 sub_1B1FDA024(uint64_t a1, __n128 *a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  void *v13;
  __n128 v14;
  __n128 result;
  __n128 v16;
  __n128 v17;
  __n128 v18;
  __n128 v19;
  __n128 v20;
  id v21[3];

  v21[2] = *(id *)MEMORY[0x1E0C80C00];
  v4 = v2[6];
  v5 = *(_QWORD *)(v4 + 16);
  if (v5)
  {
    v6 = (uint64_t *)(v4 + 56);
    while ((ValueMetadata *)*(v6 - 3) != &type metadata for AudioFileAsset)
    {
      v6 += 5;
      if (!--v5)
        goto LABEL_7;
    }
    v5 = *v6;
  }
LABEL_7:
  v7 = v2[16];
  v8 = v2[24];
  if (v8)
  {
    v9 = v2[26];
    v10 = 8 * (a1 >> 6);
    *(_QWORD *)(v8 + v10) |= 1 << a1;
    *(_QWORD *)(v9 + v10) &= ~(1 << a1);
  }
  v11 = v7 + v5 + 48 * a1;
  sub_1B1FE2568(v2[5], (uint64_t)v2, a1);
  v12 = a2[1];
  v18 = *a2;
  v19 = v12;
  v20 = a2[2];
  v16 = v12;
  v17 = v18;
  sub_1B1AE72F4((uint64_t)&v20, (uint64_t)v21);
  v13 = *(void **)(v11 + 32);
  sub_1B1AE7408((uint64_t)&v17);
  sub_1B1AE7408((uint64_t)&v16);
  sub_1B1AE7430(v21);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  v14 = a2[1];
  *(__n128 *)v11 = *a2;
  *(__n128 *)(v11 + 16) = v14;
  result = a2[2];
  *(__n128 *)(v11 + 32) = result;
  return result;
}

uint64_t sub_1B1FDA180(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;

  v6 = v5;
  v11 = v6[6];
  v12 = *(_QWORD *)(v11 + 16);
  if (v12)
  {
    v13 = (uint64_t *)(v11 + 56);
    while ((ValueMetadata *)*(v13 - 3) != &type metadata for CurveComponent)
    {
      v13 += 5;
      if (!--v12)
        goto LABEL_7;
    }
    v12 = *v13;
  }
LABEL_7:
  v14 = v6[16];
  v15 = v6[24];
  if (v15)
  {
    v16 = v6[26];
    v17 = 8 * (a1 >> 6);
    *(_QWORD *)(v15 + v17) |= 1 << a1;
    *(_QWORD *)(v16 + v17) &= ~(1 << a1);
  }
  v18 = v14 + v12 + 32 * a1;
  sub_1B1FE2568(v6[5], (uint64_t)v6, a1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)v18 = a2;
  *(_QWORD *)(v18 + 8) = a3;
  *(_QWORD *)(v18 + 16) = a4;
  *(_BYTE *)(v18 + 24) = a5;
  return result;
}

__n128 sub_1B1FDA2CC(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  __n128 result;
  __int128 v14;
  __int128 v15;

  v4 = v2[6];
  v5 = *(_QWORD *)(v4 + 16);
  if (v5)
  {
    v6 = (uint64_t *)(v4 + 56);
    while ((ValueMetadata *)*(v6 - 3) != &type metadata for MovieFileAsset)
    {
      v6 += 5;
      if (!--v5)
        goto LABEL_7;
    }
    v5 = *v6;
  }
LABEL_7:
  v7 = v2[16];
  v8 = v2[24];
  if (v8)
  {
    v9 = v2[26];
    v10 = 8 * (a1 >> 6);
    *(_QWORD *)(v8 + v10) |= 1 << a1;
    *(_QWORD *)(v9 + v10) &= ~(1 << a1);
  }
  v11 = v7 + v5 + 56 * a1;
  sub_1B1FE2568(v2[5], (uint64_t)v2, a1);
  v12 = *(void **)(v11 + 32);
  sub_1B1BB5288(a2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  result = *(__n128 *)a2;
  v14 = *(_OWORD *)(a2 + 16);
  v15 = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(v11 + 47) = *(_DWORD *)(a2 + 47);
  *(_OWORD *)(v11 + 16) = v14;
  *(_OWORD *)(v11 + 32) = v15;
  *(__n128 *)v11 = result;
  return result;
}

__n128 sub_1B1FDA3FC(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  __n128 result;
  __int128 v14;
  __int128 v15;

  v4 = v2[6];
  v5 = *(_QWORD *)(v4 + 16);
  if (v5)
  {
    v6 = (uint64_t *)(v4 + 56);
    while ((ValueMetadata *)*(v6 - 3) != &type metadata for SceneFileAsset)
    {
      v6 += 5;
      if (!--v5)
        goto LABEL_7;
    }
    v5 = *v6;
  }
LABEL_7:
  v7 = v2[16];
  v8 = v2[24];
  if (v8)
  {
    v9 = v2[26];
    v10 = 8 * (a1 >> 6);
    *(_QWORD *)(v8 + v10) |= 1 << a1;
    *(_QWORD *)(v9 + v10) &= ~(1 << a1);
  }
  v11 = v7 + v5 + (a1 << 6);
  sub_1B1FE2568(v2[5], (uint64_t)v2, a1);
  v12 = *(void **)(v11 + 32);
  sub_1B1FEED00(a2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  result = *(__n128 *)a2;
  v14 = *(_OWORD *)(a2 + 16);
  v15 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v11 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v11 + 48) = v15;
  *(__n128 *)v11 = result;
  *(_OWORD *)(v11 + 16) = v14;
  return result;
}

uint64_t sub_1B1FDA52C(uint64_t result, unsigned int a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  char v7;
  int v8;
  int v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = v2[6];
  v4 = *(_QWORD *)(v3 + 16);
  if (v4)
  {
    v5 = (uint64_t *)(v3 + 56);
    while ((ValueMetadata *)*(v5 - 3) != &type metadata for AudioController)
    {
      v5 += 5;
      if (!--v4)
        goto LABEL_7;
    }
    v4 = *v5;
  }
LABEL_7:
  v6 = v2[16] + v4 + 3 * result;
  v7 = a2 & 1;
  v8 = (a2 >> 8) & 1;
  v9 = HIWORD(a2) & 1;
  if (*(_WORD *)v6 != (a2 & 0x101) || *(unsigned __int8 *)(v6 + 2) != v9)
  {
    v11 = v2[24];
    if (v11)
    {
      v12 = v2[26];
      v13 = 8 * (result >> 6);
      *(_QWORD *)(v11 + v13) |= 1 << result;
      *(_QWORD *)(v12 + v13) &= ~(1 << result);
    }
    result = sub_1B1FE2568(v2[5], (uint64_t)v2, result);
  }
  *(_BYTE *)v6 = v7;
  *(_BYTE *)(v6 + 1) = v8;
  *(_BYTE *)(v6 + 2) = v9;
  return result;
}

uint64_t sub_1B1FDA658(uint64_t result, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = v2[6];
  v5 = *(_QWORD *)(v4 + 16);
  if (v5)
  {
    v6 = (uint64_t *)(v4 + 56);
    while ((ValueMetadata *)*(v6 - 3) != &type metadata for ParticleSpawnID)
    {
      v6 += 5;
      if (!--v5)
        goto LABEL_7;
    }
    v5 = *v6;
  }
LABEL_7:
  v7 = v5 + 8 * result;
  v8 = v2[16];
  if (*(_QWORD *)(v8 + v7) != a2)
  {
    v9 = v2[24];
    if (v9)
    {
      v10 = v2[26];
      v11 = 8 * (result >> 6);
      *(_QWORD *)(v9 + v11) |= 1 << result;
      *(_QWORD *)(v10 + v11) &= ~(1 << result);
    }
    result = sub_1B1FE2568(v2[5], (uint64_t)v2, result);
  }
  *(_QWORD *)(v8 + v7) = a2;
  return result;
}

__n128 sub_1B1FDA758(uint64_t a1, __n128 *a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  void *v13;
  __n128 v14;
  __n128 result;
  __n128 v16;
  __n128 v17;
  __n128 v18;
  __n128 v19;
  __n128 v20;
  id v21[3];

  v21[2] = *(id *)MEMORY[0x1E0C80C00];
  v4 = v2[6];
  v5 = *(_QWORD *)(v4 + 16);
  if (v5)
  {
    v6 = (uint64_t *)(v4 + 56);
    while ((ValueMetadata *)*(v6 - 3) != &type metadata for ShaderFileAsset)
    {
      v6 += 5;
      if (!--v5)
        goto LABEL_7;
    }
    v5 = *v6;
  }
LABEL_7:
  v7 = v2[16];
  v8 = v2[24];
  if (v8)
  {
    v9 = v2[26];
    v10 = 8 * (a1 >> 6);
    *(_QWORD *)(v8 + v10) |= 1 << a1;
    *(_QWORD *)(v9 + v10) &= ~(1 << a1);
  }
  v11 = v7 + v5 + 48 * a1;
  sub_1B1FE2568(v2[5], (uint64_t)v2, a1);
  v12 = a2[1];
  v18 = *a2;
  v19 = v12;
  v20 = a2[2];
  v16 = v12;
  v17 = v18;
  sub_1B1AE72F4((uint64_t)&v20, (uint64_t)v21);
  v13 = *(void **)(v11 + 32);
  sub_1B1AE7408((uint64_t)&v17);
  sub_1B1AE7408((uint64_t)&v16);
  sub_1B1AE7430(v21);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  v14 = a2[1];
  *(__n128 *)v11 = *a2;
  *(__n128 *)(v11 + 16) = v14;
  result = a2[2];
  *(__n128 *)(v11 + 32) = result;
  return result;
}

uint64_t sub_1B1FDA8B4(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t result;

  v4 = v3;
  v7 = v4[6];
  v8 = *(_QWORD *)(v7 + 16);
  if (v8)
  {
    v9 = (uint64_t *)(v7 + 56);
    while ((ValueMetadata *)*(v9 - 3) != &type metadata for TextureFileData)
    {
      v9 += 5;
      if (!--v8)
        goto LABEL_7;
    }
    v8 = *v9;
  }
LABEL_7:
  v10 = v4[16];
  v11 = v4[24];
  if (v11)
  {
    v12 = v4[26];
    v13 = 8 * (a1 >> 6);
    *(_QWORD *)(v11 + v13) |= 1 << a1;
    *(_QWORD *)(v12 + v13) &= ~(1 << a1);
  }
  v14 = (uint64_t *)(v10 + v8 + 16 * a1);
  sub_1B1FE2568(v4[5], (uint64_t)v4, a1);
  v15 = *v14;
  v16 = v14[1];
  sub_1B1AEB720(a2, a3);
  result = sub_1B1A0DAC8(v15, v16);
  *v14 = a2;
  v14[1] = a3;
  return result;
}

__n128 sub_1B1FDA9C8(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  _OWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __n128 result;
  __int128 v12;

  v4 = v2[6];
  v5 = *(_QWORD *)(v4 + 16);
  if (v5)
  {
    v6 = (uint64_t *)(v4 + 56);
    while ((ValueMetadata *)*(v6 - 3) != &type metadata for ParticleSizeInit)
    {
      v6 += 5;
      if (!--v5)
        goto LABEL_7;
    }
    v5 = *v6;
  }
LABEL_7:
  v7 = (_OWORD *)(v2[16] + v5 + 32 * a1);
  if (*(unsigned __int8 *)v7 != *a2)
  {
    v8 = v2[24];
    if (v8)
    {
      v9 = v2[26];
      v10 = 8 * (a1 >> 6);
      *(_QWORD *)(v8 + v10) |= 1 << a1;
      *(_QWORD *)(v9 + v10) &= ~(1 << a1);
    }
    sub_1B1FE2568(v2[5], (uint64_t)v2, a1);
  }
  result = *(__n128 *)a2;
  v12 = *((_OWORD *)a2 + 1);
  *v7 = *(_OWORD *)a2;
  v7[1] = v12;
  return result;
}

__n128 sub_1B1FDAA9C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  _QWORD *v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __n128 result;
  _BYTE v14[21];

  v4 = v2[6];
  v5 = *(_QWORD *)(v4 + 16);
  if (v5)
  {
    v6 = (uint64_t *)(v4 + 56);
    while ((ValueMetadata *)*(v6 - 3) != &type metadata for ParticleSubSpawn)
    {
      v6 += 5;
      if (!--v5)
        goto LABEL_7;
    }
    v5 = *v6;
  }
LABEL_7:
  v7 = (_QWORD *)(v2[16] + v5 + 24 * a1);
  *(_OWORD *)v14 = *(_OWORD *)a2;
  *(_QWORD *)&v14[13] = *(_QWORD *)(a2 + 13);
  if (*v7 != *(_QWORD *)a2 || v7[1] != *(_QWORD *)&v14[8] || *(_QWORD *)((char *)v7 + 13) != *(_QWORD *)&v14[13])
  {
    v10 = v2[24];
    if (v10)
    {
      v11 = v2[26];
      v12 = 8 * (a1 >> 6);
      *(_QWORD *)(v10 + v12) |= 1 << a1;
      *(_QWORD *)(v11 + v12) &= ~(1 << a1);
    }
    sub_1B1FE2568(v2[5], (uint64_t)v2, a1);
  }
  result = *(__n128 *)a2;
  *(_OWORD *)v7 = *(_OWORD *)a2;
  *(_QWORD *)((char *)v7 + 13) = *(_QWORD *)(a2 + 13);
  return result;
}

__n128 sub_1B1FDABC8(uint64_t a1, __n128 *a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  void *v13;
  __n128 v14;
  __n128 result;
  __n128 v16;
  __n128 v17;
  __n128 v18;
  __n128 v19;
  __n128 v20;
  id v21[3];

  v21[2] = *(id *)MEMORY[0x1E0C80C00];
  v4 = v2[6];
  v5 = *(_QWORD *)(v4 + 16);
  if (v5)
  {
    v6 = (uint64_t *)(v4 + 56);
    while ((ValueMetadata *)*(v6 - 3) != &type metadata for TextureFileAsset)
    {
      v6 += 5;
      if (!--v5)
        goto LABEL_7;
    }
    v5 = *v6;
  }
LABEL_7:
  v7 = v2[16];
  v8 = v2[24];
  if (v8)
  {
    v9 = v2[26];
    v10 = 8 * (a1 >> 6);
    *(_QWORD *)(v8 + v10) |= 1 << a1;
    *(_QWORD *)(v9 + v10) &= ~(1 << a1);
  }
  v11 = v7 + v5 + 48 * a1;
  sub_1B1FE2568(v2[5], (uint64_t)v2, a1);
  v12 = a2[1];
  v18 = *a2;
  v19 = v12;
  v20 = a2[2];
  v16 = v12;
  v17 = v18;
  sub_1B1AE72F4((uint64_t)&v20, (uint64_t)v21);
  v13 = *(void **)(v11 + 32);
  sub_1B1AE7408((uint64_t)&v17);
  sub_1B1AE7408((uint64_t)&v16);
  sub_1B1AE7430(v21);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  v14 = a2[1];
  *(__n128 *)v11 = *a2;
  *(__n128 *)(v11 + 16) = v14;
  result = a2[2];
  *(__n128 *)(v11 + 32) = result;
  return result;
}

__n128 sub_1B1FDAD24(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __n128 result;
  __int128 v17;

  v4 = v2[6];
  v5 = *(_QWORD *)(v4 + 16);
  if (v5)
  {
    v6 = (uint64_t *)(v4 + 56);
    while ((ValueMetadata *)*(v6 - 3) != &type metadata for PointCacheEmitter)
    {
      v6 += 5;
      if (!--v5)
        goto LABEL_7;
    }
    v5 = *v6;
  }
LABEL_7:
  v7 = v2[16] + v5 + 36 * a1;
  v8 = *(_OWORD *)(a2 + 16);
  if (*(_QWORD *)v7 != *(_QWORD *)a2
    || *(_QWORD *)(v7 + 8) != *(_QWORD *)(a2 + 8)
    || *(_QWORD *)(v7 + 16) != (_QWORD)v8
    || *(_QWORD *)(v7 + 24) != *((_QWORD *)&v8 + 1)
    || *(_DWORD *)(v7 + 32) != (unint64_t)*(unsigned int *)(a2 + 32))
  {
    v13 = v2[24];
    if (v13)
    {
      v14 = v2[26];
      v15 = 8 * (a1 >> 6);
      *(_QWORD *)(v13 + v15) |= 1 << a1;
      *(_QWORD *)(v14 + v15) &= ~(1 << a1);
    }
    sub_1B1FE2568(v2[5], (uint64_t)v2, a1);
  }
  result = *(__n128 *)a2;
  v17 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v7 = *(_OWORD *)a2;
  *(_OWORD *)(v7 + 16) = v17;
  *(_DWORD *)(v7 + 32) = *(_DWORD *)(a2 + 32);
  return result;
}

uint64_t sub_1B1FDAE5C(uint64_t result, unsigned int a2)
{
  uint64_t *v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;

  v3 = a2;
  v4 = v2[6];
  v5 = *(_QWORD *)(v4 + 16);
  if (v5)
  {
    v6 = (uint64_t *)(v4 + 56);
    while ((ValueMetadata *)*(v6 - 3) != &type metadata for TextureLoadPolicy)
    {
      v6 += 5;
      if (!--v5)
        goto LABEL_7;
    }
    v5 = *v6;
  }
LABEL_7:
  v7 = HIWORD(a2);
  v8 = a2 >> 8;
  v9 = v2[16] + v5 + 4 * result;
  LOWORD(v14) = a2;
  BYTE2(v14) = BYTE2(a2);
  v10 = HIBYTE(a2) & 1;
  HIBYTE(v14) = HIBYTE(a2) & 1;
  if (*(_DWORD *)v9 != v14)
  {
    v11 = v2[24];
    if (v11)
    {
      v12 = v2[26];
      v13 = 8 * (result >> 6);
      *(_QWORD *)(v11 + v13) |= 1 << result;
      *(_QWORD *)(v12 + v13) &= ~(1 << result);
    }
    result = sub_1B1FE2568(v2[5], (uint64_t)v2, result);
  }
  *(_BYTE *)v9 = v3;
  *(_BYTE *)(v9 + 1) = v8;
  *(_BYTE *)(v9 + 2) = v7;
  *(_BYTE *)(v9 + 3) = v10;
  return result;
}

uint64_t sub_1B1FDAF90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t result;

  v4 = v3;
  v7 = v4[6];
  v8 = *(_QWORD *)(v7 + 16);
  if (v8)
  {
    v9 = (uint64_t *)(v7 + 56);
    while ((ValueMetadata *)*(v9 - 3) != &type metadata for TextureNamedAsset)
    {
      v9 += 5;
      if (!--v8)
        goto LABEL_7;
    }
    v8 = *v9;
  }
LABEL_7:
  v10 = v4[16];
  v11 = v4[24];
  if (v11)
  {
    v12 = v4[26];
    v13 = 8 * (a1 >> 6);
    *(_QWORD *)(v11 + v13) |= 1 << a1;
    *(_QWORD *)(v12 + v13) &= ~(1 << a1);
  }
  v14 = (_QWORD *)(v10 + v8 + 16 * a1);
  sub_1B1FE2568(v4[5], (uint64_t)v4, a1);
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRelease();
  *v14 = a2;
  v14[1] = a3;
  return result;
}

uint64_t sub_1B1FDB094(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t result;
  _QWORD v13[2];
  char v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v8 = *(_QWORD *)(v4 + 48);
  v9 = *(_QWORD *)(v8 + 16);
  if (v9)
  {
    v10 = (uint64_t *)(v8 + 56);
    while ((ValueMetadata *)*(v10 - 3) != &type metadata for ColorRampComponent)
    {
      v10 += 5;
      if (!--v9)
        goto LABEL_7;
    }
    v9 = *v10;
  }
LABEL_7:
  v11 = *(_QWORD *)(v4 + 128) + v9 + 24 * a1;
  v13[0] = a2;
  v13[1] = a3;
  v14 = a4;
  sub_1B1FDE55C(a1, v11, (uint64_t)v13);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)v11 = a2;
  *(_QWORD *)(v11 + 8) = a3;
  *(_BYTE *)(v11 + 16) = a4;
  return result;
}

__n128 sub_1B1FDB188(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __n128 result;
  __int128 v16;
  __int128 v17;
  _OWORD v18[5];
  int v19;

  v5 = v2[6];
  v6 = *(_QWORD *)(v5 + 16);
  if (v6)
  {
    v7 = (uint64_t *)(v5 + 56);
    while ((ValueMetadata *)*(v7 - 3) != &type metadata for EmitterDescription)
    {
      v7 += 5;
      if (!--v6)
        goto LABEL_7;
    }
    v6 = *v7;
  }
LABEL_7:
  v8 = v2[16] + v6 + 88 * a1;
  v9 = *(_OWORD *)(v8 + 48);
  v18[2] = *(_OWORD *)(v8 + 32);
  v18[3] = v9;
  v18[4] = *(_OWORD *)(v8 + 64);
  v19 = *(_DWORD *)(v8 + 80);
  v10 = *(_OWORD *)(v8 + 16);
  v18[0] = *(_OWORD *)v8;
  v18[1] = v10;
  if (!sub_1B1CD6688((uint64_t)v18, a2))
  {
    v11 = v2[24];
    if (v11)
    {
      v12 = v2[26];
      v13 = 8 * (a1 >> 6);
      *(_QWORD *)(v11 + v13) |= 1 << a1;
      *(_QWORD *)(v12 + v13) &= ~(1 << a1);
    }
    sub_1B1FE2568(v2[5], (uint64_t)v2, a1);
  }
  sub_1B1FE6BD4(a2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v14 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v8 = *(_OWORD *)a2;
  *(_OWORD *)(v8 + 16) = v14;
  result = *(__n128 *)(a2 + 32);
  v16 = *(_OWORD *)(a2 + 48);
  v17 = *(_OWORD *)(a2 + 64);
  *(_DWORD *)(v8 + 80) = *(_DWORD *)(a2 + 80);
  *(_OWORD *)(v8 + 48) = v16;
  *(_OWORD *)(v8 + 64) = v17;
  *(__n128 *)(v8 + 32) = result;
  return result;
}

uint64_t sub_1B1FDB2D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t result;

  v6 = v5;
  v11 = v6[6];
  v12 = *(_QWORD *)(v11 + 16);
  if (v12)
  {
    v13 = (uint64_t *)(v11 + 56);
    while ((ValueMetadata *)*(v13 - 3) != &type metadata for MeshReferenceAsset)
    {
      v13 += 5;
      if (!--v12)
        goto LABEL_7;
    }
    v12 = *v13;
  }
LABEL_7:
  v14 = v6[16];
  v15 = v6[24];
  if (v15)
  {
    v16 = v6[26];
    v17 = 8 * (a1 >> 6);
    *(_QWORD *)(v15 + v17) |= 1 << a1;
    *(_QWORD *)(v16 + v17) &= ~(1 << a1);
  }
  v18 = (_QWORD *)(v14 + v12 + 32 * a1);
  sub_1B1FE2568(v6[5], (uint64_t)v6, a1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *v18 = a2;
  v18[1] = a3;
  v18[2] = a4;
  v18[3] = a5;
  return result;
}

uint64_t sub_1B1FDB410(uint64_t a1, const void *a2, uint64_t a3)
{
  return sub_1B1FDC3A4(a1, a2, a3, type metadata accessor for ParticleInitScript, (uint64_t (*)(const void *, const void *))sub_1B1FEECE8);
}

uint64_t sub_1B1FDB424(uint64_t result, float a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = v2[6];
  v5 = *(_QWORD *)(v4 + 16);
  if (v5)
  {
    v6 = (uint64_t *)(v4 + 56);
    while ((ValueMetadata *)*(v6 - 3) != &type metadata for ParticleSpawnDelay)
    {
      v6 += 5;
      if (!--v5)
        goto LABEL_7;
    }
    v5 = *v6;
  }
LABEL_7:
  v7 = v5 + 4 * result;
  v8 = v2[16];
  if (*(_DWORD *)(v8 + v7) != LODWORD(a2))
  {
    v9 = v2[24];
    if (v9)
    {
      v10 = v2[26];
      v11 = 8 * (result >> 6);
      *(_QWORD *)(v9 + v11) |= 1 << result;
      *(_QWORD *)(v10 + v11) &= ~(1 << result);
    }
    result = sub_1B1FE2568(v2[5], (uint64_t)v2, result);
  }
  *(float *)(v8 + v7) = a2;
  return result;
}

__n128 sub_1B1FDB528(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __n128 result;
  __int128 v26;
  __int128 v27;
  _OWORD v28[9];
  _OWORD v29[2];
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v4 = v2[6];
  v5 = *(_QWORD *)(v4 + 16);
  if (v5)
  {
    v6 = (uint64_t *)(v4 + 56);
    while ((ValueMetadata *)*(v6 - 3) != &type metadata for PrimitiveGenerator)
    {
      v6 += 5;
      if (!--v5)
        goto LABEL_7;
    }
    v5 = *v6;
  }
LABEL_7:
  v7 = v2[16];
  v8 = v2[24];
  if (v8)
  {
    v9 = v2[26];
    v10 = 8 * (a1 >> 6);
    *(_QWORD *)(v8 + v10) |= 1 << a1;
    *(_QWORD *)(v9 + v10) &= ~(1 << a1);
  }
  v11 = (__int128 *)(v7 + v5 + 176 * a1);
  sub_1B1FE2568(v2[5], (uint64_t)v2, a1);
  v12 = *v11;
  v13 = v11[2];
  v28[1] = v11[1];
  v28[2] = v13;
  v28[0] = v12;
  v14 = v11[3];
  v15 = v11[4];
  v16 = v11[6];
  v28[5] = v11[5];
  v28[6] = v16;
  v28[3] = v14;
  v28[4] = v15;
  v17 = v11[7];
  v18 = v11[8];
  v19 = v11[9];
  *(_OWORD *)((char *)v29 + 9) = *(__int128 *)((char *)v11 + 153);
  v28[8] = v18;
  v29[0] = v19;
  v28[7] = v17;
  sub_1B1E8498C(a2);
  sub_1B1E84958((uint64_t)v28);
  v21 = *(_OWORD *)(a2 + 16);
  v20 = *(_OWORD *)(a2 + 32);
  *v11 = *(_OWORD *)a2;
  v11[1] = v21;
  v11[2] = v20;
  v22 = *(_OWORD *)(a2 + 96);
  v24 = *(_OWORD *)(a2 + 48);
  v23 = *(_OWORD *)(a2 + 64);
  v11[5] = *(_OWORD *)(a2 + 80);
  v11[6] = v22;
  v11[3] = v24;
  v11[4] = v23;
  v26 = *(_OWORD *)(a2 + 128);
  result = *(__n128 *)(a2 + 144);
  v27 = *(_OWORD *)(a2 + 112);
  *(__int128 *)((char *)v11 + 153) = *(_OWORD *)(a2 + 153);
  v11[8] = v26;
  v11[9] = (__int128)result;
  v11[7] = v27;
  return result;
}

uint64_t sub_1B1FDB6A0(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t *v4;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t result;

  v4 = v3;
  v6 = a2;
  v7 = v4[6];
  v8 = *(_QWORD *)(v7 + 16);
  if (v8)
  {
    v9 = (uint64_t *)(v7 + 56);
    while ((ValueMetadata *)*(v9 - 3) != &type metadata for TexturePlaceholder)
    {
      v9 += 5;
      if (!--v8)
        goto LABEL_7;
    }
    v8 = *v9;
  }
LABEL_7:
  v10 = v4[16];
  v11 = v4[24];
  if (v11)
  {
    v12 = v4[26];
    v13 = 8 * (a1 >> 6);
    *(_QWORD *)(v11 + v13) |= 1 << a1;
    *(_QWORD *)(v12 + v13) &= ~(1 << a1);
  }
  v14 = v10 + v8 + 16 * a1;
  v15 = HIDWORD(a2);
  sub_1B1FE2568(v4[5], (uint64_t)v4, a1);
  swift_unknownObjectRetain();
  result = swift_unknownObjectRelease();
  *(_DWORD *)v14 = v6;
  *(_DWORD *)(v14 + 4) = v15;
  *(_QWORD *)(v14 + 8) = a3;
  return result;
}

__n128 sub_1B1FDB7B4(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __n128 result;
  __int128 v31;
  __int128 v32;
  _OWORD v33[10];
  uint64_t v34;
  _OWORD v35[10];
  uint64_t v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v5 = v2[6];
  v6 = *(_QWORD *)(v5 + 16);
  if (v6)
  {
    v7 = (uint64_t *)(v5 + 56);
    while ((ValueMetadata *)*(v7 - 3) != &type metadata for TextureShaderAsset)
    {
      v7 += 5;
      if (!--v6)
        goto LABEL_7;
    }
    v6 = *v7;
  }
LABEL_7:
  v8 = v2[16] + v6 + 168 * a1;
  v9 = *(_OWORD *)(a2 + 144);
  v35[8] = *(_OWORD *)(a2 + 128);
  v35[9] = v9;
  v36 = *(_QWORD *)(a2 + 160);
  v10 = *(_OWORD *)(a2 + 80);
  v35[4] = *(_OWORD *)(a2 + 64);
  v35[5] = v10;
  v11 = *(_OWORD *)(a2 + 112);
  v35[6] = *(_OWORD *)(a2 + 96);
  v35[7] = v11;
  v12 = *(_OWORD *)(a2 + 16);
  v35[0] = *(_OWORD *)a2;
  v35[1] = v12;
  v13 = *(_OWORD *)(a2 + 48);
  v35[2] = *(_OWORD *)(a2 + 32);
  v35[3] = v13;
  if ((sub_1B210A448(v8, (uint64_t)v35) & 1) != 0)
  {
    v14 = v2[24];
    if (v14)
    {
      v15 = v2[26];
      v16 = 8 * (a1 >> 6);
      *(_QWORD *)(v14 + v16) |= 1 << a1;
      *(_QWORD *)(v15 + v16) &= ~(1 << a1);
    }
    sub_1B1FE2568(v2[5], (uint64_t)v2, a1);
  }
  v17 = *(_OWORD *)v8;
  v18 = *(_OWORD *)(v8 + 32);
  v33[1] = *(_OWORD *)(v8 + 16);
  v33[2] = v18;
  v33[0] = v17;
  v19 = *(_OWORD *)(v8 + 48);
  v20 = *(_OWORD *)(v8 + 64);
  v21 = *(_OWORD *)(v8 + 96);
  v33[5] = *(_OWORD *)(v8 + 80);
  v33[6] = v21;
  v33[3] = v19;
  v33[4] = v20;
  v22 = *(_OWORD *)(v8 + 112);
  v23 = *(_OWORD *)(v8 + 128);
  v24 = *(_OWORD *)(v8 + 144);
  v34 = *(_QWORD *)(v8 + 160);
  v33[8] = v23;
  v33[9] = v24;
  v33[7] = v22;
  sub_1B1EC58D0(a2);
  sub_1B1EC5968((uint64_t)v33);
  v26 = *(_OWORD *)(a2 + 16);
  v25 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)v8 = *(_OWORD *)a2;
  *(_OWORD *)(v8 + 16) = v26;
  *(_OWORD *)(v8 + 32) = v25;
  v27 = *(_OWORD *)(a2 + 96);
  v29 = *(_OWORD *)(a2 + 48);
  v28 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v8 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(v8 + 96) = v27;
  *(_OWORD *)(v8 + 48) = v29;
  *(_OWORD *)(v8 + 64) = v28;
  v31 = *(_OWORD *)(a2 + 128);
  result = *(__n128 *)(a2 + 144);
  v32 = *(_OWORD *)(a2 + 112);
  *(_QWORD *)(v8 + 160) = *(_QWORD *)(a2 + 160);
  *(_OWORD *)(v8 + 128) = v31;
  *(__n128 *)(v8 + 144) = result;
  *(_OWORD *)(v8 + 112) = v32;
  return result;
}

uint64_t sub_1B1FDB974(uint64_t a1, const void *a2, uint64_t a3)
{
  return sub_1B1FDC3A4(a1, a2, a3, type metadata accessor for MetalFunctionScript, (uint64_t (*)(const void *, const void *))sub_1B1FEED50);
}

__n128 sub_1B1FDB988(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __n128 result;
  __int128 v14;
  _OWORD v15[2];
  int v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v5 = v2[6];
  v6 = *(_QWORD *)(v5 + 16);
  if (v6)
  {
    v7 = (uint64_t *)(v5 + 56);
    while ((ValueMetadata *)*(v7 - 3) != &type metadata for ParticleBoxRenderer)
    {
      v7 += 5;
      if (!--v6)
        goto LABEL_7;
    }
    v6 = *v7;
  }
LABEL_7:
  v8 = v2[16] + v6 + 36 * a1;
  v9 = *(_OWORD *)(a2 + 16);
  v15[0] = *(_OWORD *)a2;
  v15[1] = v9;
  v16 = *(_DWORD *)(a2 + 32);
  if ((sub_1B1D258AC((float *)v8, (uint64_t)v15) & 1) != 0)
  {
    v10 = v2[24];
    if (v10)
    {
      v11 = v2[26];
      v12 = 8 * (a1 >> 6);
      *(_QWORD *)(v10 + v12) |= 1 << a1;
      *(_QWORD *)(v11 + v12) &= ~(1 << a1);
    }
    sub_1B1FE2568(v2[5], (uint64_t)v2, a1);
  }
  result = *(__n128 *)a2;
  v14 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v8 = *(_OWORD *)a2;
  *(_OWORD *)(v8 + 16) = v14;
  *(_DWORD *)(v8 + 32) = *(_DWORD *)(a2 + 32);
  return result;
}

__n128 sub_1B1FDBAB4(uint64_t a1, __n128 *a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  void *v13;
  __n128 v14;
  __n128 result;
  __n128 v16;
  __n128 v17;
  __n128 v18;
  __n128 v19;
  __n128 v20;
  id v21[3];

  v21[2] = *(id *)MEMORY[0x1E0C80C00];
  v4 = v2[6];
  v5 = *(_QWORD *)(v4 + 16);
  if (v5)
  {
    v6 = (uint64_t *)(v4 + 56);
    while ((ValueMetadata *)*(v6 - 3) != &type metadata for PointCacheFileAsset)
    {
      v6 += 5;
      if (!--v5)
        goto LABEL_7;
    }
    v5 = *v6;
  }
LABEL_7:
  v7 = v2[16];
  v8 = v2[24];
  if (v8)
  {
    v9 = v2[26];
    v10 = 8 * (a1 >> 6);
    *(_QWORD *)(v8 + v10) |= 1 << a1;
    *(_QWORD *)(v9 + v10) &= ~(1 << a1);
  }
  v11 = v7 + v5 + 48 * a1;
  sub_1B1FE2568(v2[5], (uint64_t)v2, a1);
  v12 = a2[1];
  v18 = *a2;
  v19 = v12;
  v20 = a2[2];
  v16 = v12;
  v17 = v18;
  sub_1B1AE72F4((uint64_t)&v20, (uint64_t)v21);
  v13 = *(void **)(v11 + 32);
  sub_1B1AE7408((uint64_t)&v17);
  sub_1B1AE7408((uint64_t)&v16);
  sub_1B1AE7430(v21);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  v14 = a2[1];
  *(__n128 *)v11 = *a2;
  *(__n128 *)(v11 + 16) = v14;
  result = a2[2];
  *(__n128 *)(v11 + 32) = result;
  return result;
}

uint64_t sub_1B1FDBC10(uint64_t result, unint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5)
{
  uint64_t *v5;
  char v7;
  int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v7 = a4;
  v9 = a2;
  v10 = HIDWORD(a2);
  v11 = v5[6];
  v12 = *(_QWORD *)(v11 + 16);
  if (v12)
  {
    v13 = (uint64_t *)(v11 + 56);
    while ((ValueMetadata *)*(v13 - 3) != &type metadata for PointCacheGenerator)
    {
      v13 += 5;
      if (!--v12)
        goto LABEL_7;
    }
    v12 = *v13;
  }
LABEL_7:
  v14 = HIWORD(a4);
  v15 = v5[16] + v12 + 32 * result;
  LOBYTE(v22) = a4;
  WORD1(v22) = HIWORD(a4);
  if (*(_QWORD *)v15 != a2 || *(_QWORD *)(v15 + 8) != a3 || *(_QWORD *)(v15 + 16) != v22 || *(_QWORD *)(v15 + 24) != a5)
  {
    v19 = v5[24];
    if (v19)
    {
      v20 = v5[26];
      v21 = 8 * (result >> 6);
      *(_QWORD *)(v19 + v21) |= 1 << result;
      *(_QWORD *)(v20 + v21) &= ~(1 << result);
    }
    result = sub_1B1FE2568(v5[5], (uint64_t)v5, result);
  }
  *(_DWORD *)v15 = v9;
  *(_DWORD *)(v15 + 4) = v10;
  *(_QWORD *)(v15 + 8) = a3;
  *(_BYTE *)(v15 + 16) = v7;
  *(_WORD *)(v15 + 18) = v14;
  *(_QWORD *)(v15 + 24) = a5;
  return result;
}

uint64_t sub_1B1FDBD70(uint64_t result, unint64_t a2, uint64_t a3, float a4)
{
  uint64_t *v4;
  int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v7 = a2;
  v8 = HIDWORD(a2);
  v9 = v4[6];
  v10 = *(_QWORD *)(v9 + 16);
  if (v10)
  {
    v11 = (uint64_t *)(v9 + 56);
    while ((ValueMetadata *)*(v11 - 3) != &type metadata for SDFTextureGenerator)
    {
      v11 += 5;
      if (!--v10)
        goto LABEL_7;
    }
    v10 = *v11;
  }
LABEL_7:
  v12 = v4[16] + v10 + 24 * result;
  *(float *)&v18 = a4;
  if (*(_QWORD *)v12 != a2 || *(_QWORD *)(v12 + 8) != v18 || *(_QWORD *)(v12 + 16) != a3)
  {
    v15 = v4[24];
    if (v15)
    {
      v16 = v4[26];
      v17 = 8 * (result >> 6);
      *(_QWORD *)(v15 + v17) |= 1 << result;
      *(_QWORD *)(v16 + v17) &= ~(1 << result);
    }
    result = sub_1B1FE2568(v4[5], (uint64_t)v4, result);
  }
  *(_DWORD *)v12 = v7;
  *(_DWORD *)(v12 + 4) = v8;
  *(float *)(v12 + 8) = a4;
  *(_QWORD *)(v12 + 16) = a3;
  return result;
}

__n128 sub_1B1FDBEA8(uint64_t a1, __int128 *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __n128 result;
  __int128 v11;
  _OWORD v12[2];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(v2 + 48);
  v5 = *(_QWORD *)(v4 + 16);
  if (v5)
  {
    v6 = (uint64_t *)(v4 + 56);
    while ((ValueMetadata *)*(v6 - 3) != &type metadata for ParticleLineRenderer)
    {
      v6 += 5;
      if (!--v5)
        goto LABEL_7;
    }
    v5 = *v6;
  }
LABEL_7:
  v7 = *(_QWORD *)(v2 + 128) + v5 + 44 * a1;
  v8 = a2[1];
  v11 = *a2;
  v12[0] = v8;
  *(_OWORD *)((char *)v12 + 12) = *(__int128 *)((char *)a2 + 28);
  sub_1B1FDE618(a1, (unsigned int *)v7, (uint64_t)&v11);
  v9 = a2[1];
  *(_OWORD *)v7 = *a2;
  *(_OWORD *)(v7 + 16) = v9;
  result = *(__n128 *)((char *)a2 + 28);
  *(__n128 *)(v7 + 28) = result;
  return result;
}

__n128 sub_1B1FDBF78(uint64_t a1, int32x4_t *a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  int32x4_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __n128 result;
  int32x4_t v14;
  int32x4_t v15[2];
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v5 = v2[6];
  v6 = *(_QWORD *)(v5 + 16);
  if (v6)
  {
    v7 = (uint64_t *)(v5 + 56);
    while ((ValueMetadata *)*(v7 - 3) != &type metadata for ParticleMeshRenderer)
    {
      v7 += 5;
      if (!--v6)
        goto LABEL_7;
    }
    v6 = *v7;
  }
LABEL_7:
  v8 = v2[16] + v6 + 40 * a1;
  v9 = a2[1];
  v15[0] = *a2;
  v15[1] = v9;
  v16 = a2[2].i64[0];
  if ((sub_1B2148A8C((int32x4_t *)v8, v15) & 1) != 0)
  {
    v10 = v2[24];
    if (v10)
    {
      v11 = v2[26];
      v12 = 8 * (a1 >> 6);
      *(_QWORD *)(v10 + v12) |= 1 << a1;
      *(_QWORD *)(v11 + v12) &= ~(1 << a1);
    }
    sub_1B1FE2568(v2[5], (uint64_t)v2, a1);
  }
  result = *(__n128 *)a2;
  v14 = a2[1];
  *(int32x4_t *)v8 = *a2;
  *(int32x4_t *)(v8 + 16) = v14;
  *(_QWORD *)(v8 + 32) = a2[2].i64[0];
  return result;
}

__n128 sub_1B1FDC0A4(uint64_t a1, _OWORD *a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __n128 result;
  _OWORD v20[7];
  _OWORD v21[2];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v5 = v2[6];
  v6 = *(_QWORD *)(v5 + 16);
  if (v6)
  {
    v7 = (uint64_t *)(v5 + 56);
    while ((ValueMetadata *)*(v7 - 3) != &type metadata for ParticleQuadRenderer)
    {
      v7 += 5;
      if (!--v6)
        goto LABEL_7;
    }
    v6 = *v7;
  }
LABEL_7:
  v8 = v2[16] + v6 + 144 * a1;
  v9 = a2[7];
  v20[6] = a2[6];
  v21[0] = v9;
  *(_OWORD *)((char *)v21 + 11) = *(_OWORD *)((char *)a2 + 123);
  v10 = a2[3];
  v20[2] = a2[2];
  v20[3] = v10;
  v11 = a2[5];
  v20[4] = a2[4];
  v20[5] = v11;
  v12 = a2[1];
  v20[0] = *a2;
  v20[1] = v12;
  if ((sub_1B1C4D3C8(v8, (uint64_t)v20) & 1) != 0)
  {
    v13 = v2[24];
    if (v13)
    {
      v14 = v2[26];
      v15 = 8 * (a1 >> 6);
      *(_QWORD *)(v13 + v15) |= 1 << a1;
      *(_QWORD *)(v14 + v15) &= ~(1 << a1);
    }
    sub_1B1FE2568(v2[5], (uint64_t)v2, a1);
  }
  v16 = a2[7];
  *(_OWORD *)(v8 + 96) = a2[6];
  *(_OWORD *)(v8 + 112) = v16;
  *(_OWORD *)(v8 + 123) = *(_OWORD *)((char *)a2 + 123);
  v17 = a2[3];
  *(_OWORD *)(v8 + 32) = a2[2];
  *(_OWORD *)(v8 + 48) = v17;
  v18 = a2[5];
  *(_OWORD *)(v8 + 64) = a2[4];
  *(_OWORD *)(v8 + 80) = v18;
  result = *((__n128 *)a2 + 1);
  *(_OWORD *)v8 = *a2;
  *(__n128 *)(v8 + 16) = result;
  return result;
}

__n128 sub_1B1FDC200(uint64_t a1, _OWORD *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __n128 result;
  __int128 v15;
  __int128 v16;
  _OWORD v17[5];
  _OWORD v18[2];
  uint64_t v19;

  v3 = v2;
  v19 = *MEMORY[0x1E0C80C00];
  v5 = v2[6];
  v6 = *(_QWORD *)(v5 + 16);
  if (v6)
  {
    v7 = (uint64_t *)(v5 + 56);
    while ((ValueMetadata *)*(v7 - 3) != &type metadata for ParticleSizeOverLife)
    {
      v7 += 5;
      if (!--v6)
        goto LABEL_7;
    }
    v6 = *v7;
  }
LABEL_7:
  v8 = v2[16] + v6 + 112 * a1;
  v9 = a2[5];
  v17[4] = a2[4];
  v18[0] = v9;
  *(_OWORD *)((char *)v18 + 9) = *(_OWORD *)((char *)a2 + 89);
  v10 = a2[1];
  v17[0] = *a2;
  v17[1] = v10;
  v11 = a2[3];
  v17[2] = a2[2];
  v17[3] = v11;
  sub_1B1FDE190(v17, v3, a1, (_BYTE *)v8);
  sub_1B1FEEA10((uint64_t)a2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v12 = *a2;
  v13 = a2[2];
  *(_OWORD *)(v8 + 16) = a2[1];
  *(_OWORD *)(v8 + 32) = v13;
  *(_OWORD *)v8 = v12;
  result = *((__n128 *)a2 + 3);
  v15 = a2[4];
  v16 = a2[5];
  *(_OWORD *)(v8 + 89) = *(_OWORD *)((char *)a2 + 89);
  *(_OWORD *)(v8 + 64) = v15;
  *(_OWORD *)(v8 + 80) = v16;
  *(__n128 *)(v8 + 48) = result;
  return result;
}

uint64_t sub_1B1FDC390(uint64_t a1, const void *a2, uint64_t a3)
{
  return sub_1B1FDC3A4(a1, a2, a3, type metadata accessor for ParticleUpdateScript, (uint64_t (*)(const void *, const void *))sub_1B1FEECF4);
}

uint64_t sub_1B1FDC3A4(uint64_t a1, const void *a2, uint64_t a3, uint64_t (*a4)(_QWORD), uint64_t (*a5)(const void *, const void *))
{
  uint64_t *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  const void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = v5[6];
  v9 = a4(0);
  v10 = *(_QWORD *)(v8 + 16);
  if (v10)
  {
    v11 = (uint64_t *)(v8 + 56);
    while (*(v11 - 3) != v9)
    {
      v11 += 5;
      if (!--v10)
        goto LABEL_7;
    }
    v10 = *v11;
  }
LABEL_7:
  v12 = *(_QWORD *)(v9 - 8);
  v13 = (const void *)(v5[16] + v10 + *(_QWORD *)(v12 + 72) * a1);
  if ((*(_BYTE *)(v12 + 82) & 1) != 0 || memcmp(v13, a2, *(_QWORD *)(v12 + 64)))
  {
    v14 = v5[24];
    if (v14)
    {
      v15 = v5[26];
      v16 = 8 * (a1 >> 6);
      *(_QWORD *)(v14 + v16) |= 1 << a1;
      *(_QWORD *)(v15 + v16) &= ~(1 << a1);
    }
    sub_1B1FE2568(v5[5], (uint64_t)v5, a1);
  }
  return a5(a2, v13);
}

uint64_t sub_1B1FDC4A4(uint64_t result, uint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  char v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5 = v3[6];
  v6 = *(_QWORD *)(v5 + 16);
  if (v6)
  {
    v7 = (uint64_t *)(v5 + 56);
    while ((ValueMetadata *)*(v7 - 3) != &type metadata for TextureRequireMipmap)
    {
      v7 += 5;
      if (!--v6)
        goto LABEL_7;
    }
    v6 = *v7;
  }
LABEL_7:
  v8 = v3[16] + v6 + 16 * result;
  v9 = a3 & 1;
  if (*(_QWORD *)v8 != a2 || *(_BYTE *)(v8 + 8) != (unint64_t)(a3 & 1))
  {
    v11 = v3[24];
    if (v11)
    {
      v12 = v3[26];
      v13 = 8 * (result >> 6);
      *(_QWORD *)(v11 + v13) |= 1 << result;
      *(_QWORD *)(v12 + v13) &= ~(1 << result);
    }
    result = sub_1B1FE2568(v3[5], (uint64_t)v3, result);
  }
  *(_QWORD *)v8 = a2;
  *(_BYTE *)(v8 + 8) = v9;
  return result;
}

__n128 sub_1B1FDC5C0(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __n128 result;
  __int128 v12;

  v4 = v2[6];
  v5 = *(_QWORD *)(v4 + 16);
  if (v5)
  {
    v6 = (uint64_t *)(v4 + 56);
    while ((ValueMetadata *)*(v6 - 3) != &type metadata for ParticleColorOverLife)
    {
      v6 += 5;
      if (!--v5)
        goto LABEL_7;
    }
    v5 = *v6;
  }
LABEL_7:
  v7 = v2[16] + v5 + 40 * a1;
  if ((*(_BYTE *)v7 == 0) == (*(_BYTE *)a2 != 0))
  {
    v8 = v2[24];
    if (v8)
    {
      v9 = v2[26];
      v10 = 8 * (a1 >> 6);
      *(_QWORD *)(v8 + v10) |= 1 << a1;
      *(_QWORD *)(v9 + v10) &= ~(1 << a1);
    }
    sub_1B1FE2568(v2[5], (uint64_t)v2, a1);
  }
  sub_1B1D3DB7C(a2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = *(__n128 *)a2;
  v12 = *(_OWORD *)(a2 + 16);
  *(_DWORD *)(v7 + 32) = *(_DWORD *)(a2 + 32);
  *(__n128 *)v7 = result;
  *(_OWORD *)(v7 + 16) = v12;
  return result;
}

__n128 sub_1B1FDC6CC(uint64_t a1, __n128 *a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  __n128 result;
  _OWORD v15[3];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v5 = v2[6];
  v6 = *(_QWORD *)(v5 + 16);
  if (v6)
  {
    v7 = (uint64_t *)(v5 + 56);
    while ((ValueMetadata *)*(v7 - 3) != &type metadata for ParticlePointRenderer)
    {
      v7 += 5;
      if (!--v6)
        goto LABEL_7;
    }
    v6 = *v7;
  }
LABEL_7:
  v8 = v2[16] + v6 + 48 * a1;
  v9 = a2[1];
  v15[0] = *a2;
  v15[1] = v9;
  v15[2] = a2[2];
  if ((sub_1B1D258B0((float *)v8, (uint64_t)v15) & 1) != 0)
  {
    v10 = v2[24];
    if (v10)
    {
      v11 = v2[26];
      v12 = 8 * (a1 >> 6);
      *(_QWORD *)(v10 + v12) |= 1 << a1;
      *(_QWORD *)(v11 + v12) &= ~(1 << a1);
    }
    sub_1B1FE2568(v2[5], (uint64_t)v2, a1);
  }
  v13 = a2[1];
  *(__n128 *)v8 = *a2;
  *(__n128 *)(v8 + 16) = v13;
  result = a2[2];
  *(__n128 *)(v8 + 32) = result;
  return result;
}

uint64_t sub_1B1FDC7F8(uint64_t result, float a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = v2[6];
  v5 = *(_QWORD *)(v4 + 16);
  if (v5)
  {
    v6 = (uint64_t *)(v4 + 56);
    while ((ValueMetadata *)*(v6 - 3) != &type metadata for ParticleSpawnDuration)
    {
      v6 += 5;
      if (!--v5)
        goto LABEL_7;
    }
    v5 = *v6;
  }
LABEL_7:
  v7 = v5 + 4 * result;
  v8 = v2[16];
  if (*(_DWORD *)(v8 + v7) != LODWORD(a2))
  {
    v9 = v2[24];
    if (v9)
    {
      v10 = v2[26];
      v11 = 8 * (result >> 6);
      *(_QWORD *)(v9 + v11) |= 1 << result;
      *(_QWORD *)(v10 + v11) &= ~(1 << result);
    }
    result = sub_1B1FE2568(v2[5], (uint64_t)v2, result);
  }
  *(float *)(v8 + v7) = a2;
  return result;
}

uint64_t sub_1B1FDC8FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t result;

  v5 = v4;
  v9 = v5[6];
  v10 = *(_QWORD *)(v9 + 16);
  if (v10)
  {
    v11 = (uint64_t *)(v9 + 56);
    while ((ValueMetadata *)*(v11 - 3) != &type metadata for REMeshAssetPointCache)
    {
      v11 += 5;
      if (!--v10)
        goto LABEL_7;
    }
    v10 = *v11;
  }
LABEL_7:
  v12 = v5[16];
  v13 = v5[24];
  if (v13)
  {
    v14 = v5[26];
    v15 = 8 * (a1 >> 6);
    *(_QWORD *)(v13 + v15) |= 1 << a1;
    *(_QWORD *)(v14 + v15) &= ~(1 << a1);
  }
  v16 = (_QWORD *)(v12 + v10 + 24 * a1);
  sub_1B1FE2568(v5[5], (uint64_t)v5, a1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *v16 = a2;
  v16[1] = a3;
  v16[2] = a4;
  return result;
}

uint64_t sub_1B1FDCA28(uint64_t result, unint64_t a2, char a3)
{
  uint64_t *v3;
  int v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  char v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = a2;
  v5 = HIDWORD(a2);
  v6 = v3[6];
  v7 = *(_QWORD *)(v6 + 16);
  if (v7)
  {
    v8 = (uint64_t *)(v6 + 56);
    while ((ValueMetadata *)*(v8 - 3) != &type metadata for SceneKitAssetInstance)
    {
      v8 += 5;
      if (!--v7)
        goto LABEL_7;
    }
    v7 = *v8;
  }
LABEL_7:
  v9 = v3[16] + v7 + 12 * result;
  v10 = a3 & 1;
  if (*(_QWORD *)v9 != a2 || *(_BYTE *)(v9 + 8) != (unint64_t)(a3 & 1))
  {
    v12 = v3[24];
    if (v12)
    {
      v13 = v3[26];
      v14 = 8 * (result >> 6);
      *(_QWORD *)(v12 + v14) |= 1 << result;
      *(_QWORD *)(v13 + v14) &= ~(1 << result);
    }
    result = sub_1B1FE2568(v3[5], (uint64_t)v3, result);
  }
  *(_DWORD *)v9 = v4;
  *(_DWORD *)(v9 + 4) = v5;
  *(_BYTE *)(v9 + 8) = v10;
  return result;
}

uint64_t sub_1B1FDCB50(uint64_t a1, _QWORD *a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;

  v5 = v2[6];
  v6 = *(_QWORD *)(v5 + 16);
  if (v6)
  {
    v7 = (uint64_t *)(v5 + 56);
    while ((ValueMetadata *)*(v7 - 3) != &type metadata for TextureArrayFileAsset)
    {
      v7 += 5;
      if (!--v6)
        goto LABEL_7;
    }
    v6 = *v7;
  }
LABEL_7:
  v8 = v6 + 8 * a1;
  v9 = v2[16];
  if ((sub_1B1CC9D08(*(_QWORD **)(v9 + v8), a2) & 1) == 0)
  {
    v10 = v2[24];
    if (v10)
    {
      v11 = v2[26];
      v12 = 8 * (a1 >> 6);
      *(_QWORD *)(v10 + v12) |= 1 << a1;
      *(_QWORD *)(v11 + v12) &= ~(1 << a1);
    }
    sub_1B1FE2568(v2[5], (uint64_t)v2, a1);
  }
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v9 + v8) = a2;
  return result;
}

__n128 sub_1B1FDCC40(uint64_t a1, _OWORD *a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __n128 result;
  _OWORD v18[5];
  _OWORD v19[2];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v5 = v2[6];
  v6 = *(_QWORD *)(v5 + 16);
  if (v6)
  {
    v7 = (uint64_t *)(v5 + 56);
    while ((ValueMetadata *)*(v7 - 3) != &type metadata for ParticleRibbonRenderer)
    {
      v7 += 5;
      if (!--v6)
        goto LABEL_7;
    }
    v6 = *v7;
  }
LABEL_7:
  v8 = v2[16] + v6 + 112 * a1;
  v9 = a2[5];
  v18[4] = a2[4];
  v19[0] = v9;
  *(_OWORD *)((char *)v19 + 9) = *(_OWORD *)((char *)a2 + 89);
  v10 = a2[1];
  v18[0] = *a2;
  v18[1] = v10;
  v11 = a2[3];
  v18[2] = a2[2];
  v18[3] = v11;
  if ((sub_1B20CAD20((__int128 *)v8, v18) & 1) != 0)
  {
    v12 = v2[24];
    if (v12)
    {
      v13 = v2[26];
      v14 = 8 * (a1 >> 6);
      *(_QWORD *)(v12 + v14) |= 1 << a1;
      *(_QWORD *)(v13 + v14) &= ~(1 << a1);
    }
    sub_1B1FE2568(v2[5], (uint64_t)v2, a1);
  }
  v15 = a2[5];
  *(_OWORD *)(v8 + 64) = a2[4];
  *(_OWORD *)(v8 + 80) = v15;
  *(_OWORD *)(v8 + 89) = *(_OWORD *)((char *)a2 + 89);
  v16 = a2[1];
  *(_OWORD *)v8 = *a2;
  *(_OWORD *)(v8 + 16) = v16;
  result = *((__n128 *)a2 + 3);
  *(_OWORD *)(v8 + 32) = a2[2];
  *(__n128 *)(v8 + 48) = result;
  return result;
}

__n128 sub_1B1FDCD8C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __n128 result;
  __int128 v14;
  _OWORD v15[2];
  int v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v5 = v2[6];
  v6 = *(_QWORD *)(v5 + 16);
  if (v6)
  {
    v7 = (uint64_t *)(v5 + 56);
    while ((ValueMetadata *)*(v7 - 3) != &type metadata for ParticleSphereRenderer)
    {
      v7 += 5;
      if (!--v6)
        goto LABEL_7;
    }
    v6 = *v7;
  }
LABEL_7:
  v8 = v2[16] + v6 + 36 * a1;
  v9 = *(_OWORD *)(a2 + 16);
  v15[0] = *(_OWORD *)a2;
  v15[1] = v9;
  v16 = *(_DWORD *)(a2 + 32);
  if ((sub_1B1D258AC((float *)v8, (uint64_t)v15) & 1) != 0)
  {
    v10 = v2[24];
    if (v10)
    {
      v11 = v2[26];
      v12 = 8 * (a1 >> 6);
      *(_QWORD *)(v10 + v12) |= 1 << a1;
      *(_QWORD *)(v11 + v12) &= ~(1 << a1);
    }
    sub_1B1FE2568(v2[5], (uint64_t)v2, a1);
  }
  result = *(__n128 *)a2;
  v14 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v8 = *(_OWORD *)a2;
  *(_OWORD *)(v8 + 16) = v14;
  *(_DWORD *)(v8 + 32) = *(_DWORD *)(a2 + 32);
  return result;
}

__n128 sub_1B1FDCEB8(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __n128 result;
  _OWORD v12[4];
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v4 = v2[6];
  v5 = *(_QWORD *)(v4 + 16);
  if (v5)
  {
    v6 = (uint64_t *)(v4 + 56);
    while ((ValueMetadata *)*(v6 - 3) != &type metadata for ParticleSizeOverTexture)
    {
      v6 += 5;
      if (!--v5)
        goto LABEL_7;
    }
    v5 = *v6;
  }
LABEL_7:
  v7 = v2[16] + v5 + 72 * a1;
  v8 = *(_OWORD *)(a2 + 48);
  v12[2] = *(_OWORD *)(a2 + 32);
  v12[3] = v8;
  v13 = *(_DWORD *)(a2 + 64);
  v9 = *(_OWORD *)(a2 + 16);
  v12[0] = *(_OWORD *)a2;
  v12[1] = v9;
  sub_1B1FDE20C((uint64_t)v12, v2, a1, v7);
  v10 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v7 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v7 + 48) = v10;
  *(_DWORD *)(v7 + 64) = *(_DWORD *)(a2 + 64);
  result = *(__n128 *)(a2 + 16);
  *(_OWORD *)v7 = *(_OWORD *)a2;
  *(__n128 *)(v7 + 16) = result;
  return result;
}

uint64_t sub_1B1FDCFA8(uint64_t result, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  char v11;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v7 = v4[6];
  v8 = *(_QWORD *)(v7 + 16);
  if (v8)
  {
    v9 = (uint64_t *)(v7 + 56);
    while ((ValueMetadata *)*(v9 - 3) != &type metadata for TextureRequireSizeLimit)
    {
      v9 += 5;
      if (!--v8)
        goto LABEL_7;
    }
    v8 = *v9;
  }
LABEL_7:
  v10 = v4[16] + v8 + 24 * result;
  v11 = a4 & 1;
  if (*(_QWORD *)v10 != a2 || *(_QWORD *)(v10 + 8) != a3 || *(_BYTE *)(v10 + 16) != (unint64_t)(a4 & 1))
  {
    v14 = v4[24];
    if (v14)
    {
      v15 = v4[26];
      v16 = 8 * (result >> 6);
      *(_QWORD *)(v14 + v16) |= 1 << result;
      *(_QWORD *)(v15 + v16) &= ~(1 << result);
    }
    result = sub_1B1FE2568(v4[5], (uint64_t)v4, result);
  }
  *(_QWORD *)v10 = a2;
  *(_QWORD *)(v10 + 8) = a3;
  *(_BYTE *)(v10 + 16) = v11;
  return result;
}

__n128 sub_1B1FDD0D0(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __n128 result;

  v4 = v2[6];
  v5 = *(_QWORD *)(v4 + 16);
  if (v5)
  {
    v6 = (uint64_t *)(v4 + 56);
    while ((ValueMetadata *)*(v6 - 3) != &type metadata for ParticleColorOverTexture)
    {
      v6 += 5;
      if (!--v5)
        goto LABEL_7;
    }
    v5 = *v6;
  }
LABEL_7:
  v7 = v2[16] + v5 + 48 * a1;
  if ((*(_BYTE *)v7 == 0) == (*(_BYTE *)a2 != 0))
  {
    v8 = v2[24];
    if (v8)
    {
      v9 = v2[26];
      v10 = 8 * (a1 >> 6);
      *(_QWORD *)(v8 + v10) |= 1 << a1;
      *(_QWORD *)(v9 + v10) &= ~(1 << a1);
    }
    sub_1B1FE2568(v2[5], (uint64_t)v2, a1);
  }
  v11 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v7 = *(_OWORD *)a2;
  *(_OWORD *)(v7 + 16) = v11;
  result = *(__n128 *)(a2 + 28);
  *(__n128 *)(v7 + 28) = result;
  return result;
}

__n128 sub_1B1FDD1C0(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __n128 result;

  v4 = v2[6];
  v5 = *(_QWORD *)(v4 + 16);
  if (v5)
  {
    v6 = (uint64_t *)(v4 + 56);
    while ((ValueMetadata *)*(v6 - 3) != &type metadata for ParticleGaussianRenderer)
    {
      v6 += 5;
      if (!--v5)
        goto LABEL_7;
    }
    v5 = *v6;
  }
LABEL_7:
  v7 = v2[16] + v5 + 32 * a1;
  if (*(unsigned __int8 *)(v7 + 8) != *(unsigned __int8 *)(a2 + 8)
    || *(_QWORD *)v7 != *(_QWORD *)a2
    || *(_BYTE *)(v7 + 24) != (*(_BYTE *)(a2 + 24) & 1))
  {
    v8 = v2[24];
    if (v8)
    {
      v9 = v2[26];
      v10 = 8 * (a1 >> 6);
      *(_QWORD *)(v8 + v10) |= 1 << a1;
      *(_QWORD *)(v9 + v10) &= ~(1 << a1);
    }
    sub_1B1FE2568(v2[5], (uint64_t)v2, a1);
  }
  *(_OWORD *)v7 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 9);
  *(__n128 *)(v7 + 9) = result;
  return result;
}

__n128 sub_1B1FDD2C0(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __n128 result;
  _BYTE v18[25];

  v4 = v2[6];
  v5 = *(_QWORD *)(v4 + 16);
  if (v5)
  {
    v6 = (uint64_t *)(v4 + 56);
    while ((ValueMetadata *)*(v6 - 3) != &type metadata for ParticleLocalBoxCollider)
    {
      v6 += 5;
      if (!--v5)
        goto LABEL_7;
    }
    v5 = *v6;
  }
LABEL_7:
  v7 = v2[16] + v5 + 48 * a1;
  *(_OWORD *)v18 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)&v18[9] = *(_OWORD *)(a2 + 25);
  if (*(_QWORD *)v7 != *(_QWORD *)a2
    || *(_QWORD *)(v7 + 8) != *(_QWORD *)(a2 + 8)
    || *(_QWORD *)(v7 + 16) != *(_QWORD *)v18
    || *(_QWORD *)(v7 + 24) != *(_QWORD *)&v18[8]
    || *(_QWORD *)(v7 + 32) != *(_QWORD *)&v18[16]
    || *(unsigned __int8 *)(v7 + 40) != (unint64_t)v18[24])
  {
    v13 = v2[24];
    if (v13)
    {
      v14 = v2[26];
      v15 = 8 * (a1 >> 6);
      *(_QWORD *)(v13 + v15) |= 1 << a1;
      *(_QWORD *)(v14 + v15) &= ~(1 << a1);
    }
    sub_1B1FE2568(v2[5], (uint64_t)v2, a1);
  }
  v16 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v7 = *(_OWORD *)a2;
  *(_OWORD *)(v7 + 16) = v16;
  result = *(__n128 *)(a2 + 25);
  *(__n128 *)(v7 + 25) = result;
  return result;
}

__n128 sub_1B1FDD408(uint64_t a1, __int128 *a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __n128 result;
  __int128 v11;
  _OWORD v12[2];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v4 = v2[6];
  v5 = *(_QWORD *)(v4 + 16);
  if (v5)
  {
    v6 = (uint64_t *)(v4 + 56);
    while ((ValueMetadata *)*(v6 - 3) != &type metadata for ParticleSizeOverVelocity)
    {
      v6 += 5;
      if (!--v5)
        goto LABEL_7;
    }
    v5 = *v6;
  }
LABEL_7:
  v7 = v2[16] + v5 + 44 * a1;
  v8 = a2[1];
  v11 = *a2;
  v12[0] = v8;
  *(_OWORD *)((char *)v12 + 12) = *(__int128 *)((char *)a2 + 28);
  sub_1B1FDE190(&v11, v2, a1, (_BYTE *)v7);
  v9 = a2[1];
  *(_OWORD *)v7 = *a2;
  *(_OWORD *)(v7 + 16) = v9;
  result = *(__n128 *)((char *)a2 + 28);
  *(__n128 *)(v7 + 28) = result;
  return result;
}

__n128 sub_1B1FDD4E8(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __n128 result;
  __int128 v12;

  v4 = v2[6];
  v5 = *(_QWORD *)(v4 + 16);
  if (v5)
  {
    v6 = (uint64_t *)(v4 + 56);
    while ((ValueMetadata *)*(v6 - 3) != &type metadata for ParticleColorOverPosition)
    {
      v6 += 5;
      if (!--v5)
        goto LABEL_7;
    }
    v5 = *v6;
  }
LABEL_7:
  v7 = v2[16] + v5 + 40 * a1;
  if ((*(_BYTE *)(v7 + 4) == 0) == (*(_BYTE *)(a2 + 4) != 0))
  {
    v8 = v2[24];
    if (v8)
    {
      v9 = v2[26];
      v10 = 8 * (a1 >> 6);
      *(_QWORD *)(v8 + v10) |= 1 << a1;
      *(_QWORD *)(v9 + v10) &= ~(1 << a1);
    }
    sub_1B1FE2568(v2[5], (uint64_t)v2, a1);
  }
  sub_1B1C16514(a2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = *(__n128 *)a2;
  v12 = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(v7 + 32) = *(_BYTE *)(a2 + 32);
  *(__n128 *)v7 = result;
  *(_OWORD *)(v7 + 16) = v12;
  return result;
}

__n128 sub_1B1FDD5F4(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __n128 result;
  __int128 v12;

  v4 = v2[6];
  v5 = *(_QWORD *)(v4 + 16);
  if (v5)
  {
    v6 = (uint64_t *)(v4 + 56);
    while ((ValueMetadata *)*(v6 - 3) != &type metadata for ParticleColorOverVelocity)
    {
      v6 += 5;
      if (!--v5)
        goto LABEL_7;
    }
    v5 = *v6;
  }
LABEL_7:
  v7 = v2[16] + v5 + 40 * a1;
  if ((*(_BYTE *)v7 == 0) == (*(_BYTE *)a2 != 0))
  {
    v8 = v2[24];
    if (v8)
    {
      v9 = v2[26];
      v10 = 8 * (a1 >> 6);
      *(_QWORD *)(v8 + v10) |= 1 << a1;
      *(_QWORD *)(v9 + v10) &= ~(1 << a1);
    }
    sub_1B1FE2568(v2[5], (uint64_t)v2, a1);
  }
  sub_1B1C16514(a2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = *(__n128 *)a2;
  v12 = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(v7 + 32) = *(_BYTE *)(a2 + 32);
  *(__n128 *)v7 = result;
  *(_OWORD *)(v7 + 16) = v12;
  return result;
}

__n128 sub_1B1FDD700(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __n128 result;
  __int128 v14;
  __n128 v15;
  _BYTE v16[21];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v5 = v2[6];
  v6 = *(_QWORD *)(v5 + 16);
  if (v6)
  {
    v7 = (uint64_t *)(v5 + 56);
    while ((ValueMetadata *)*(v7 - 3) != &type metadata for ParticlePrimitiveRenderer)
    {
      v7 += 5;
      if (!--v6)
        goto LABEL_7;
    }
    v6 = *v7;
  }
LABEL_7:
  v8 = v2[16] + v6 + 40 * a1;
  v9 = *(_OWORD *)(a2 + 16);
  v15 = *(__n128 *)a2;
  *(_OWORD *)v16 = v9;
  *(_QWORD *)&v16[13] = *(_QWORD *)(a2 + 29);
  if ((sub_1B1F86D88((float *)v8, (uint64_t)&v15) & 1) != 0)
  {
    v10 = v2[24];
    if (v10)
    {
      v11 = v2[26];
      v12 = 8 * (a1 >> 6);
      *(_QWORD *)(v10 + v12) |= 1 << a1;
      *(_QWORD *)(v11 + v12) &= ~(1 << a1);
    }
    sub_1B1FE2568(v2[5], (uint64_t)v2, a1);
  }
  result = *(__n128 *)a2;
  v14 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v8 = *(_OWORD *)a2;
  *(_OWORD *)(v8 + 16) = v14;
  *(_QWORD *)(v8 + 29) = *(_QWORD *)(a2 + 29);
  return result;
}

uint64_t sub_1B1FDD82C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  unsigned int v13;
  uint64_t v14;
  char v15;
  uint64_t result;
  _QWORD v17[3];
  __int16 v18;
  uint64_t v19;

  v6 = v5;
  v19 = *MEMORY[0x1E0C80C00];
  v10 = v6[6];
  v11 = *(_QWORD *)(v10 + 16);
  if (v11)
  {
    v12 = (uint64_t *)(v10 + 56);
    while ((ValueMetadata *)*(v12 - 3) != &type metadata for TextureRequireAnimationRepresentation)
    {
      v12 += 5;
      if (!--v11)
        goto LABEL_7;
    }
    v11 = *v12;
  }
LABEL_7:
  v13 = a5 >> 8;
  v14 = v6[16] + v11 + 32 * a1;
  v17[0] = a2;
  v17[1] = a3;
  v17[2] = a4;
  v15 = a5 & 1;
  v18 = a5 & 0xFF01;
  result = sub_1B1FDE288((uint64_t)v17, v6, a1, v14);
  *(_QWORD *)v14 = a2;
  *(_QWORD *)(v14 + 8) = a3;
  *(_QWORD *)(v14 + 16) = a4;
  *(_BYTE *)(v14 + 24) = v15;
  *(_BYTE *)(v14 + 25) = v13;
  return result;
}

uint64_t sub_1B1FDD930(uint64_t result, uint64_t a2)
{
  uint64_t *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = a2;
  v4 = a2 & 0x100000000;
  v5 = v2[6];
  v6 = *(_QWORD *)(v5 + 16);
  if (v6)
  {
    v7 = (uint64_t *)(v5 + 56);
    while ((ValueMetadata *)*(v7 - 3) != &type metadata for Seed)
    {
      v7 += 5;
      if (!--v6)
        goto LABEL_7;
    }
    v6 = *v7;
  }
LABEL_7:
  v8 = v2[16] + v6 + 8 * result;
  if (*(_DWORD *)v8 != (_DWORD)a2 || (((v4 != 0) ^ *(unsigned __int8 *)(v8 + 4)) & 1) != 0)
  {
    v9 = v2[24];
    if (v9)
    {
      v10 = v2[26];
      v11 = 8 * (result >> 6);
      *(_QWORD *)(v9 + v11) |= 1 << result;
      *(_QWORD *)(v10 + v11) &= ~(1 << result);
    }
    result = sub_1B1FE2568(v2[5], (uint64_t)v2, result);
  }
  *(_DWORD *)v8 = v3;
  *(_BYTE *)(v8 + 4) = BYTE4(v4);
  return result;
}

uint64_t sub_1B1FDDA24(uint64_t result, unint64_t a2)
{
  uint64_t *v2;
  int v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = a2;
  v4 = HIDWORD(a2);
  v5 = v2[6];
  v6 = *(_QWORD *)(v5 + 16);
  if (v6)
  {
    v7 = (uint64_t *)(v5 + 56);
    while ((ValueMetadata *)*(v7 - 3) != &type metadata for Parent)
    {
      v7 += 5;
      if (!--v6)
        goto LABEL_7;
    }
    v6 = *v7;
  }
LABEL_7:
  v8 = v2[16] + v6 + 8 * result;
  if (*(_QWORD *)v8 != a2)
  {
    v9 = v2[24];
    if (v9)
    {
      v10 = v2[26];
      v11 = 8 * (result >> 6);
      *(_QWORD *)(v9 + v11) |= 1 << result;
      *(_QWORD *)(v10 + v11) &= ~(1 << result);
    }
    result = sub_1B1FE2568(v2[5], (uint64_t)v2, result);
  }
  *(_DWORD *)v8 = v3;
  *(_DWORD *)(v8 + 4) = v4;
  return result;
}

__n128 sub_1B1FDDB30(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __n128 result;

  v4 = v2[6];
  v5 = *(_QWORD *)(v4 + 16);
  if (v5)
  {
    v6 = (uint64_t *)(v4 + 56);
    while ((ValueMetadata *)*(v6 - 3) != &type metadata for Skybox)
    {
      v6 += 5;
      if (!--v5)
        goto LABEL_7;
    }
    v5 = *v6;
  }
LABEL_7:
  v7 = v2[16] + v5 + 32 * a1;
  if (*(_DWORD *)v7 != *(_DWORD *)a2 || *(_DWORD *)(v7 + 4) != *(_DWORD *)(a2 + 4))
  {
    v8 = v2[24];
    if (v8)
    {
      v9 = v2[26];
      v10 = 8 * (a1 >> 6);
      *(_QWORD *)(v8 + v10) |= 1 << a1;
      *(_QWORD *)(v9 + v10) &= ~(1 << a1);
    }
    sub_1B1FE2568(v2[5], (uint64_t)v2, a1);
  }
  *(_OWORD *)v7 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 13);
  *(__n128 *)(v7 + 13) = result;
  return result;
}

__n128 sub_1B1FDDC1C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __n128 result;
  __int128 v15;
  __int128 v16;

  v4 = v2[6];
  v5 = *(_QWORD *)(v4 + 16);
  if (v5)
  {
    v6 = (uint64_t *)(v4 + 56);
    while ((ValueMetadata *)*(v6 - 3) != &type metadata for Material)
    {
      v6 += 5;
      if (!--v5)
        goto LABEL_7;
    }
    v5 = *v6;
  }
LABEL_7:
  v7 = v2[16];
  v8 = v2[24];
  if (v8)
  {
    v9 = v2[26];
    v10 = 8 * (a1 >> 6);
    *(_QWORD *)(v8 + v10) |= 1 << a1;
    *(_QWORD *)(v9 + v10) &= ~(1 << a1);
  }
  v11 = v7 + v5 + 104 * a1;
  sub_1B1FE2568(v2[5], (uint64_t)v2, a1);
  sub_1B1D34160(a2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_unknownObjectRelease();
  v12 = *(_OWORD *)a2;
  v13 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v11 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v11 + 32) = v13;
  *(_OWORD *)v11 = v12;
  result = *(__n128 *)(a2 + 48);
  v15 = *(_OWORD *)(a2 + 64);
  v16 = *(_OWORD *)(a2 + 80);
  *(_QWORD *)(v11 + 96) = *(_QWORD *)(a2 + 96);
  *(_OWORD *)(v11 + 64) = v15;
  *(_OWORD *)(v11 + 80) = v16;
  *(__n128 *)(v11 + 48) = result;
  return result;
}

uint64_t sub_1B1FDDD6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t result;

  v4 = v3;
  v7 = v4[6];
  v8 = *(_QWORD *)(v7 + 16);
  if (v8)
  {
    v9 = (uint64_t *)(v7 + 56);
    while ((ValueMetadata *)*(v9 - 3) != &type metadata for MeshModel)
    {
      v9 += 5;
      if (!--v8)
        goto LABEL_7;
    }
    v8 = *v9;
  }
LABEL_7:
  v10 = v4[16];
  v11 = v4[24];
  if (v11)
  {
    v12 = v4[26];
    v13 = 8 * (a1 >> 6);
    *(_QWORD *)(v11 + v13) |= 1 << a1;
    *(_QWORD *)(v12 + v13) &= ~(1 << a1);
  }
  v14 = (_QWORD *)(v10 + v8 + 16 * a1);
  sub_1B1FE2568(v4[5], (uint64_t)v4, a1);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  result = swift_release();
  *v14 = a2;
  v14[1] = a3;
  return result;
}

uint64_t sub_1B1FDDE88(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  char v9;
  int v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v5 = v3[6];
  v6 = *(_QWORD *)(v5 + 16);
  if (v6)
  {
    v7 = (uint64_t *)(v5 + 56);
    while ((ValueMetadata *)*(v7 - 3) != &type metadata for MeshImportOptions)
    {
      v7 += 5;
      if (!--v6)
        goto LABEL_7;
    }
    v6 = *v7;
  }
LABEL_7:
  v8 = v3[16] + v6 + 16 * result;
  v9 = a3 & 1;
  v10 = (a3 >> 8) & 1;
  if (*(_QWORD *)v8 != a2 || *(_WORD *)(v8 + 8) != (unint64_t)(a3 & 0x101))
  {
    v12 = v3[24];
    if (v12)
    {
      v13 = v3[26];
      v14 = 8 * (result >> 6);
      *(_QWORD *)(v12 + v14) |= 1 << result;
      *(_QWORD *)(v13 + v14) &= ~(1 << result);
    }
    result = sub_1B1FE2568(v3[5], (uint64_t)v3, result);
  }
  *(_QWORD *)v8 = a2;
  *(_BYTE *)(v8 + 8) = v9;
  *(_BYTE *)(v8 + 9) = v10;
  return result;
}

uint64_t sub_1B1FDDFB0(uint64_t a1, const void *a2, uint64_t a3)
{
  return sub_1B1FDDFD8(a1, a2, a3, type metadata accessor for TriggerScript, (uint64_t (*)(const void *, const void *))sub_1B1FF34A4);
}

uint64_t sub_1B1FDDFC4(uint64_t a1, const void *a2, uint64_t a3)
{
  return sub_1B1FDDFD8(a1, a2, a3, type metadata accessor for GraphScript, (uint64_t (*)(const void *, const void *))sub_1B1FF3344);
}

uint64_t sub_1B1FDDFD8(uint64_t a1, const void *a2, uint64_t a3, uint64_t (*a4)(_QWORD), uint64_t (*a5)(const void *, const void *))
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  const void *v14;

  v10 = *(_QWORD *)(v5 + 48);
  v11 = a4(0);
  v12 = *(_QWORD *)(v10 + 16);
  if (v12)
  {
    v13 = (uint64_t *)(v10 + 56);
    while (*(v13 - 3) != v11)
    {
      v13 += 5;
      if (!--v12)
        goto LABEL_7;
    }
    v12 = *v13;
  }
LABEL_7:
  v14 = (const void *)(*(_QWORD *)(v5 + 128) + v12 + *(_QWORD *)(*(_QWORD *)(v11 - 8) + 72) * a1);
  sub_1B1FDE7B0(a1, v14, a2, a3, a4);
  return a5(a2, v14);
}

void sub_1B1FDE0D0(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  void **v7;
  void *v8;
  id v9;

  v4 = *(_QWORD *)(v2 + 48);
  v5 = *(_QWORD *)(v4 + 16);
  if (v5)
  {
    v6 = (uint64_t *)(v4 + 56);
    while ((ValueMetadata *)*(v6 - 3) != &type metadata for TextureCGImage)
    {
      v6 += 5;
      if (!--v5)
        goto LABEL_7;
    }
    v5 = *v6;
  }
LABEL_7:
  v7 = (void **)(*(_QWORD *)(v2 + 128) + v5 + 8 * a1);
  sub_1B1FDE864(a1);
  v8 = *v7;
  v9 = a2;

  *v7 = a2;
}

_BYTE *sub_1B1FDE190(_BYTE *result, uint64_t *a2, uint64_t a3, _BYTE *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if ((*a4 == 0) == (*result != 0) || a4[8] != result[8])
  {
    v5 = a2[24];
    if (v5)
    {
      v6 = a2[26];
      v7 = 8 * (a3 >> 6);
      *(_QWORD *)(v5 + v7) |= 1 << a3;
      *(_QWORD *)(v6 + v7) &= ~(1 << a3);
    }
    return (_BYTE *)sub_1B1FE2568(a2[5], (uint64_t)a2, a3);
  }
  return result;
}

uint64_t sub_1B1FDE20C(uint64_t result, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if ((*(_BYTE *)(a4 + 12) == 0) == (*(_BYTE *)(result + 12) != 0)
    || *(unsigned __int8 *)(a4 + 20) != *(unsigned __int8 *)(result + 20))
  {
    v5 = a2[24];
    if (v5)
    {
      v6 = a2[26];
      v7 = 8 * (a3 >> 6);
      *(_QWORD *)(v5 + v7) |= 1 << a3;
      *(_QWORD *)(v6 + v7) &= ~(1 << a3);
    }
    return sub_1B1FE2568(a2[5], (uint64_t)a2, a3);
  }
  return result;
}

uint64_t sub_1B1FDE288(uint64_t result, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  int v5;
  int v6;
  char v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (*(_QWORD *)a4 != *(_QWORD *)result || *(_QWORD *)(a4 + 8) != *(_QWORD *)(result + 8))
  {
LABEL_17:
    v9 = a2[24];
    if (v9)
    {
      v10 = a2[26];
      v11 = 8 * (a3 >> 6);
      *(_QWORD *)(v9 + v11) |= 1 << a3;
      *(_QWORD *)(v10 + v11) &= ~(1 << a3);
    }
    return sub_1B1FE2568(a2[5], (uint64_t)a2, a3);
  }
  v5 = *(unsigned __int8 *)(a4 + 25);
  v6 = *(unsigned __int8 *)(result + 25);
  if ((*(_BYTE *)(a4 + 24) & 1) != 0)
  {
    if (v5 == v6)
      v7 = *(_BYTE *)(result + 24);
    else
      v7 = 0;
    if ((v7 & 1) == 0)
      goto LABEL_17;
  }
  else
  {
    if ((*(_BYTE *)(result + 24) & 1) != 0)
      goto LABEL_17;
    if (*(_QWORD *)(a4 + 16) != *(_QWORD *)(result + 16) || v5 != v6)
      goto LABEL_17;
  }
  return result;
}

uint64_t sub_1B1FDE32C(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = *(unsigned __int8 *)(a2 + 96);
  v5 = *(float *)(a2 + 148);
  v7 = *(float *)(a3 + 104);
  v6 = *(float *)(a3 + 108);
  v9 = *(float *)(a3 + 144);
  v8 = *(float *)(a3 + 148);
  if (*(float *)(a2 + 104) == 0.0 && *(float *)(a2 + 108) == 0.0)
  {
    if ((v7 != 0.0 || v6 != 0.0) && (v9 != 0.0 || v8 != 0.0))
      goto LABEL_32;
  }
  else if (*(float *)(a2 + 144) == 0.0)
  {
    if (v7 == 0.0 && v6 == 0.0)
    {
      if (v5 != 0.0)
        goto LABEL_32;
    }
    else if (v9 == 0.0)
    {
      if ((v5 != 0.0) == (v8 == 0.0))
        goto LABEL_32;
    }
    else if (v5 == 0.0)
    {
      goto LABEL_32;
    }
  }
  else if (v7 == 0.0 && v6 == 0.0 || v9 == 0.0 && v8 == 0.0)
  {
    goto LABEL_32;
  }
  if (*(unsigned __int8 *)(a3 + 96) != 255)
  {
    if (v4 == 255)
      v10 = 1;
    else
      v10 = *(_BYTE *)(a2 + 208) ^ *(_BYTE *)(a3 + 208);
    if ((v10 & 1) == 0)
      return result;
LABEL_32:
    v12 = v3[24];
    if (v12)
    {
      v13 = v3[26];
      v14 = 8 * (result >> 6);
      *(_QWORD *)(v12 + v14) |= 1 << result;
      *(_QWORD *)(v13 + v14) &= ~(1 << result);
    }
    return sub_1B1FE2568(v3[5], (uint64_t)v3, result);
  }
  if (v4 == 255)
    v11 = *(_BYTE *)(a2 + 208) ^ *(_BYTE *)(a3 + 208);
  else
    v11 = 1;
  if ((v11 & 1) != 0)
    goto LABEL_32;
  return result;
}

uint64_t sub_1B1FDE490(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  uint64_t *v3;
  BOOL v5;
  uint64_t result;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = *a2 == *a3 && a2[1] == a3[1];
  if (!v5
    || ((a2[2] ^ a3[2]) & 1) != 0
    || ((result = *((_QWORD *)a2 + 1), v7 = *((_QWORD *)a2 + 2), result == *((_QWORD *)a3 + 1))
      ? (v8 = v7 == *((_QWORD *)a3 + 2))
      : (v8 = 0),
        !v8 && (result = sub_1B2229D24(), (result & 1) == 0)))
  {
    v9 = v3[24];
    if (v9)
    {
      v10 = v3[26];
      v11 = 8 * (a1 >> 6);
      *(_QWORD *)(v9 + v11) |= 1 << a1;
      *(_QWORD *)(v10 + v11) &= ~(1 << a1);
    }
    return sub_1B1FE2568(v3[5], (uint64_t)v3, a1);
  }
  return result;
}

uint64_t sub_1B1FDE55C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(unsigned __int8 *)(a2 + 16);
  v7 = *(_QWORD *)(a3 + 8);
  v8 = *(unsigned __int8 *)(a3 + 16);
  if (!sub_1B1CC9434(*(_QWORD *)a2, *(_QWORD *)a3) || (result = sub_1B1CC94F4(v5, v7), (result & 1) == 0) || v6 != v8)
  {
    v10 = v3[24];
    if (v10)
    {
      v11 = v3[26];
      v12 = 8 * (a1 >> 6);
      *(_QWORD *)(v10 + v12) |= 1 << a1;
      *(_QWORD *)(v11 + v12) &= ~(1 << a1);
    }
    return sub_1B1FE2568(v3[5], (uint64_t)v3, a1);
  }
  return result;
}

uint64_t sub_1B1FDE618(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t result;
  float v6;
  int v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (a2[9] == *(_DWORD *)(a3 + 36)
    && a2[10] == *(_DWORD *)(a3 + 40)
    && ((*((unsigned __int8 *)a2 + 32) ^ *(unsigned __int8 *)(a3 + 32)) & 1) == 0
    && ((*((unsigned __int8 *)a2 + 33) ^ *(unsigned __int8 *)(a3 + 33)) & 1) == 0)
  {
    result = *a2;
    v6 = *(float *)a3;
    v7 = *(unsigned __int8 *)(a3 + 4);
    if (*((_BYTE *)a2 + 4) != 1)
    {
      if (*(float *)&result != v6)
        LOBYTE(v7) = 1;
      if ((v7 & 1) != 0)
        goto LABEL_28;
      goto LABEL_21;
    }
    if ((_DWORD)result)
    {
      if ((_DWORD)result != 1)
      {
        if (LODWORD(v6) <= 1)
          v7 = 0;
        if (v7 != 1)
          goto LABEL_28;
        goto LABEL_21;
      }
      v8 = LODWORD(v6) == 1;
    }
    else
    {
      v8 = LODWORD(v6) == 0;
    }
    if (!v8)
      LOBYTE(v7) = 0;
    if ((v7 & 1) == 0)
      goto LABEL_28;
LABEL_21:
    if (*((float *)a2 + 2) == *(float *)(a3 + 8)
      && *((unsigned __int8 *)a2 + 12) == *(unsigned __int8 *)(a3 + 12)
      && a2[4] == *(_DWORD *)(a3 + 16)
      && *((unsigned __int8 *)a2 + 20) == *(unsigned __int8 *)(a3 + 20)
      && ((*((unsigned __int8 *)a2 + 21) ^ *(unsigned __int8 *)(a3 + 21)) & 1) == 0
      && *((float *)a2 + 6) <= 0.0 != *(float *)(a3 + 24) > 0.0
      && *((float *)a2 + 7) <= 0.0 != *(float *)(a3 + 28) > 0.0)
    {
      return result;
    }
  }
LABEL_28:
  v9 = v3[24];
  if (v9)
  {
    v10 = v3[26];
    v11 = 8 * (a1 >> 6);
    *(_QWORD *)(v9 + v11) |= 1 << a1;
    *(_QWORD *)(v10 + v11) &= ~(1 << a1);
  }
  return sub_1B1FE2568(v3[5], (uint64_t)v3, a1);
}

uint64_t sub_1B1FDE7B0(uint64_t a1, const void *a2, const void *a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t *v5;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v9 = *(_QWORD *)(a5(0) - 8);
  if ((*(_BYTE *)(v9 + 82) & 1) != 0 || (result = memcmp(a2, a3, *(_QWORD *)(v9 + 64)), (_DWORD)result))
  {
    v11 = v5[24];
    if (v11)
    {
      v12 = v5[26];
      v13 = 8 * (a1 >> 6);
      *(_QWORD *)(v11 + v13) |= 1 << a1;
      *(_QWORD *)(v12 + v13) &= ~(1 << a1);
    }
    return sub_1B1FE2568(v5[5], (uint64_t)v5, a1);
  }
  return result;
}

uint64_t sub_1B1FDE864(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = v1[24];
  if (v2)
  {
    v3 = v1[26];
    v4 = 8 * (a1 >> 6);
    *(_QWORD *)(v2 + v4) |= 1 << a1;
    *(_QWORD *)(v3 + v4) &= ~(1 << a1);
  }
  return sub_1B1FE2568(v1[5], (uint64_t)v1, a1);
}

uint64_t sub_1B1FDE8CC@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;

  if (a3 != 0xFFFFFFFFLL
    && a3 << 32 >= (uint64_t)0xFFFFFFFF00000001
    && (int)a3 < *(_QWORD *)(v4 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8)
    && ((v5 = *(_QWORD *)(v4 + OBJC_IVAR____TtC3VFX13EntityManager__entries), HIDWORD(a3) == -1)
     || *(_DWORD *)(v5 + 12 * (int)a3 + 8) == HIDWORD(a3)))
  {
    v6 = (unsigned int *)(v5 + 12 * (int)a3);
    return sub_1B1FE42F0(*(_QWORD *)(*(_QWORD *)(v4 + 136) + 8 * (int)*v6 + 32), result, a2, *v6 | ((unint64_t)*((unsigned __int16 *)v6 + 3) << 48) | ((unint64_t)*((unsigned __int16 *)v6+ 2) << 32), v4, a4);
  }
  else
  {
    *(_QWORD *)(a4 + 32) = 0;
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
  }
  return result;
}

uint64_t sub_1B1FDE994(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char isUniquelyReferenced_nonNull_native;
  char v24;
  unint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  _QWORD *v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  char v38;
  unint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t result;
  uint64_t v47;
  uint64_t v48;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  int v55;
  _QWORD *v58;
  _QWORD *v59;

  v48 = a1 + 64;
  v4 = 1 << *(_BYTE *)(a1 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(a1 + 64);
  v7 = (unint64_t)(v4 + 63) >> 6;
  v8 = swift_bridgeObjectRetain();
  v9 = 0;
  v50 = v8;
  v47 = v8 + 112;
  while (1)
  {
    if (v6)
    {
      v51 = (v6 - 1) & v6;
      v52 = v9;
      v12 = __clz(__rbit64(v6)) | (v9 << 6);
    }
    else
    {
      v13 = v9 + 1;
      if (v9 + 1 >= v7)
        return swift_release();
      v14 = *(_QWORD *)(v48 + 8 * v13);
      if (!v14)
      {
        v13 = v9 + 2;
        if (v9 + 2 >= v7)
          return swift_release();
        v14 = *(_QWORD *)(v48 + 8 * v13);
        if (!v14)
        {
          v13 = v9 + 3;
          if (v9 + 3 >= v7)
            return swift_release();
          v14 = *(_QWORD *)(v48 + 8 * v13);
          if (!v14)
          {
            v13 = v9 + 4;
            if (v9 + 4 >= v7)
              return swift_release();
            v14 = *(_QWORD *)(v48 + 8 * v13);
            if (!v14)
            {
              v13 = v9 + 5;
              if (v9 + 5 >= v7)
                return swift_release();
              v14 = *(_QWORD *)(v48 + 8 * v13);
              if (!v14)
              {
                while (v7 - 6 != v9)
                {
                  v14 = *(_QWORD *)(v47 + 8 * v9++);
                  if (v14)
                  {
                    v13 = v9 + 5;
                    goto LABEL_21;
                  }
                }
                return swift_release();
              }
            }
          }
        }
      }
LABEL_21:
      v51 = (v14 - 1) & v14;
      v52 = v13;
      v12 = __clz(__rbit64(v14)) + (v13 << 6);
    }
    v15 = 16 * v12;
    v16 = (uint64_t *)(*(_QWORD *)(v50 + 48) + 16 * v12);
    v17 = *v16;
    v18 = v16[1];
    v19 = *(_QWORD *)(v50 + 56) + v15;
    v54 = *(_DWORD *)v19;
    v55 = *(_DWORD *)(v19 + 4);
    v20 = *(_QWORD *)(v19 + 8);
    sub_1B1CC921C();
    swift_bridgeObjectRetain();
    swift_retain();
    v21 = sub_1B22292D4();
    v53 = v22;
    swift_bridgeObjectRetain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v58 = (_QWORD *)*a3;
    *a3 = 0x8000000000000000;
    v25 = sub_1B1DC3B00(v17, v18);
    v26 = v24;
    v27 = v58[2] + ((v24 & 1) == 0);
    if (v58[3] >= v27)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        v30 = v58;
        if ((v24 & 1) != 0)
          goto LABEL_28;
      }
      else
      {
        sub_1B1EA8664();
        v30 = v58;
        if ((v26 & 1) != 0)
          goto LABEL_28;
      }
    }
    else
    {
      sub_1B1E91634(v27, isUniquelyReferenced_nonNull_native);
      v28 = sub_1B1DC3B00(v17, v18);
      if ((v26 & 1) != (v29 & 1))
        goto LABEL_41;
      v25 = v28;
      v30 = v58;
      if ((v26 & 1) != 0)
      {
LABEL_28:
        v31 = (uint64_t *)(v30[7] + 16 * v25);
        swift_bridgeObjectRelease();
        *v31 = v21;
        v31[1] = v53;
        goto LABEL_31;
      }
    }
    v30[(v25 >> 6) + 8] |= 1 << v25;
    v32 = (uint64_t *)(v30[6] + 16 * v25);
    *v32 = v17;
    v32[1] = v18;
    v33 = (uint64_t *)(v30[7] + 16 * v25);
    *v33 = v21;
    v33[1] = v53;
    ++v30[2];
    swift_bridgeObjectRetain();
LABEL_31:
    *a3 = v30;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v34 = sub_1B22292D4();
    v36 = v35;
    swift_retain();
    v37 = swift_isUniquelyReferenced_nonNull_native();
    v59 = (_QWORD *)*a4;
    *a4 = 0x8000000000000000;
    v39 = sub_1B1DC3B00(v34, v36);
    v40 = v38;
    v41 = v59[2] + ((v38 & 1) == 0);
    if (v59[3] < v41)
      break;
    if ((v37 & 1) != 0)
    {
      v44 = v59;
      if ((v38 & 1) == 0)
        goto LABEL_4;
    }
    else
    {
      sub_1B1EB2B08();
      v44 = v59;
      if ((v40 & 1) == 0)
      {
LABEL_4:
        v44[(v39 >> 6) + 8] |= 1 << v39;
        v10 = (uint64_t *)(v44[6] + 16 * v39);
        *v10 = v34;
        v10[1] = v36;
        v11 = v44[7] + 16 * v39;
        *(_DWORD *)v11 = v54;
        *(_DWORD *)(v11 + 4) = v55;
        *(_QWORD *)(v11 + 8) = v20;
        ++v44[2];
        swift_bridgeObjectRetain();
        goto LABEL_5;
      }
    }
LABEL_37:
    v45 = v44[7] + 16 * v39;
    swift_release();
    *(_DWORD *)v45 = v54;
    *(_DWORD *)(v45 + 4) = v55;
    *(_QWORD *)(v45 + 8) = v20;
LABEL_5:
    *a4 = v44;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    ++*a2;
    swift_release();
    swift_bridgeObjectRelease();
    v6 = v51;
    v9 = v52;
  }
  sub_1B1E9A3D4(v41, v37);
  v42 = sub_1B1DC3B00(v34, v36);
  if ((v40 & 1) == (v43 & 1))
  {
    v39 = v42;
    v44 = v59;
    if ((v40 & 1) == 0)
      goto LABEL_4;
    goto LABEL_37;
  }
LABEL_41:
  result = sub_1B2229FC4();
  __break(1u);
  return result;
}

uint64_t sub_1B1FDEE64(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  int64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v3 = v2;
  v34 = a2;
  sub_1B1C18FB4(0);
  v33 = v5;
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v29 - v11;
  v13 = *(_QWORD *)(a1 + 64);
  v31 = a1 + 64;
  v14 = 1 << *(_BYTE *)(a1 + 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & v13;
  v17 = (unint64_t)(v14 + 63) >> 6;
  swift_bridgeObjectRetain();
  v18 = 0;
  v32 = v17;
  v35 = a1;
  v29 = a1 + 112;
  v30 = v17 - 6;
  while (v16)
  {
    v19 = __clz(__rbit64(v16));
    v16 &= v16 - 1;
    v20 = v19 | (v18 << 6);
LABEL_5:
    v21 = *(_QWORD *)(v35 + 56);
    v22 = *(_QWORD *)(v35 + 48) + 8 * v20;
    v23 = *(_DWORD *)v22;
    v24 = *(_BYTE *)(v22 + 4);
    v25 = type metadata accessor for GraphScriptingConfig.ScriptInfo();
    sub_1B1792810(v21 + *(_QWORD *)(*(_QWORD *)(v25 - 8) + 72) * v20, (uint64_t)&v12[*(int *)(v33 + 48)], (uint64_t (*)(_QWORD))type metadata accessor for GraphScriptingConfig.ScriptInfo);
    *(_DWORD *)v12 = v23;
    v12[4] = v24;
    sub_1B1A025EC((uint64_t)v12, (uint64_t)v8, (uint64_t (*)(_QWORD))sub_1B1C18FB4);
    sub_1B2098724((uint64_t)v8, v34);
    sub_1B1A04628((uint64_t)v8, (uint64_t (*)(_QWORD))sub_1B1C18FB4);
    if (v3)
      return swift_release();
  }
  v26 = v18 + 1;
  if (v18 + 1 >= v32)
    return swift_release();
  v27 = *(_QWORD *)(v31 + 8 * v26);
  if (v27)
    goto LABEL_20;
  v26 = v18 + 2;
  if (v18 + 2 >= v32)
    return swift_release();
  v27 = *(_QWORD *)(v31 + 8 * v26);
  if (v27)
    goto LABEL_20;
  v26 = v18 + 3;
  if (v18 + 3 >= v32)
    return swift_release();
  v27 = *(_QWORD *)(v31 + 8 * v26);
  if (v27)
    goto LABEL_20;
  v26 = v18 + 4;
  if (v18 + 4 >= v32)
    return swift_release();
  v27 = *(_QWORD *)(v31 + 8 * v26);
  if (v27)
    goto LABEL_20;
  v26 = v18 + 5;
  if (v18 + 5 >= v32)
    return swift_release();
  v27 = *(_QWORD *)(v31 + 8 * v26);
  if (v27)
  {
LABEL_20:
    v16 = (v27 - 1) & v27;
    v20 = __clz(__rbit64(v27)) + (v26 << 6);
    v18 = v26;
    goto LABEL_5;
  }
  while (v30 != v18)
  {
    v27 = *(_QWORD *)(v29 + 8 * v18++);
    if (v27)
    {
      v26 = v18 + 5;
      goto LABEL_20;
    }
  }
  return swift_release();
}

uint64_t sub_1B1FDF0C8(uint64_t result, uint64_t a2, _BYTE *a3, _BYTE *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  ValueMetadata *v10;
  uint64_t v11;
  uint64_t v12;
  ValueMetadata *v13;

  if (result != 0xFFFFFFFFLL
    && result << 32 >= (uint64_t)0xFFFFFFFF00000001
    && (int)result < *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8))
  {
    v6 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
    if (HIDWORD(result) == -1 || *(_DWORD *)(v6 + 12 * (int)result + 8) == HIDWORD(result))
    {
      v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 80)
                                             + 8 * *(__int16 *)(v6 + 12 * (int)result + 6)
                                             + 32)
                                 + 16)
                     + 32);
      v8 = *(_QWORD *)(v7 + 16);
      if (v8)
      {
        swift_retain();
        swift_retain();
        v9 = v7 + 40;
        do
        {
          v10 = *(ValueMetadata **)(v9 - 8);
          if (v10 != &type metadata for Parent)
          {
            *a3 = (*a3 | (*(uint64_t (**)(_QWORD))(*(_QWORD *)(*(_QWORD *)v9 + 8) + 48))(*(_QWORD *)(v9 - 8))) & 1;
            v11 = swift_conformsToProtocol2();
            if (v11)
              v12 = v11;
            else
              v12 = 0;
            if (v11)
              v13 = v10;
            else
              v13 = 0;
            if (v13)
            {
              if ((~(*(unsigned int (**)(void))(v12 + 64))() & 0x2F00000) == 0)
                *a4 = 1;
            }
          }
          v9 += 16;
          --v8;
        }
        while (v8);
        swift_release();
        return swift_release();
      }
    }
  }
  return result;
}

uint64_t sub_1B1FDF258(uint64_t a1, uint64_t a2)
{
  return sub_1B1FDF3C8(a1, a2, (uint64_t (*)(_QWORD, _QWORD, uint64_t))sub_1B1FE559C);
}

uint64_t sub_1B1FDF274(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  os_unfair_lock_s *v12;

  v3 = v2;
  v5 = result;
  if (result != 0xFFFFFFFFLL
    && result << 32 >= (uint64_t)0xFFFFFFFF00000001
    && (int)result < *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8))
  {
    v6 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
    if (HIDWORD(result) == -1 || *(_DWORD *)(v6 + 12 * (int)result + 8) == HIDWORD(result))
    {
      v7 = (int *)(v6 + 12 * (int)result);
      v8 = *((__int16 *)v7 + 2);
      v9 = *(_QWORD *)(*(_QWORD *)(a2 + 136) + 8 * *v7 + 32);
      if (*(_QWORD *)(v9 + 232) <= v8 && *(_QWORD *)(v9 + 240) > v8)
      {
        v11 = **(_QWORD **)(a2 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues);
        v12 = *(os_unfair_lock_s **)(v9 + 344);
        swift_retain();
        os_unfair_lock_lock(v12);
        ecs_stack_allocator_push_snapshot(*(_QWORD *)(v11 + 32));
        swift_retain();
        sub_1B1FE3DBC(v11, v9, v8, a2, v5);
        swift_release();
        if (!v3)
          ecs_stack_allocator_pop_snapshot(*(_QWORD *)(v11 + 32));
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v9 + 344));
        return swift_release();
      }
    }
  }
  return result;
}

uint64_t sub_1B1FDF3AC(uint64_t a1, uint64_t a2)
{
  return sub_1B1FDF3C8(a1, a2, (uint64_t (*)(_QWORD, _QWORD, uint64_t))sub_1B1FE6AA8);
}

uint64_t sub_1B1FDF3C8(uint64_t result, uint64_t a2, uint64_t (*a3)(_QWORD, _QWORD, uint64_t))
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  os_unfair_lock_s *v14;

  v5 = v3;
  v7 = result;
  if (result != 0xFFFFFFFFLL
    && result << 32 >= (uint64_t)0xFFFFFFFF00000001
    && (int)result < *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8))
  {
    v8 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
    if (HIDWORD(result) == -1 || *(_DWORD *)(v8 + 12 * (int)result + 8) == HIDWORD(result))
    {
      v9 = (int *)(v8 + 12 * (int)result);
      v10 = *((__int16 *)v9 + 2);
      v11 = *(_QWORD *)(*(_QWORD *)(a2 + 136) + 8 * *v9 + 32);
      if (*(_QWORD *)(v11 + 232) <= v10 && *(_QWORD *)(v11 + 240) > v10)
      {
        v13 = **(_QWORD **)(a2 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues);
        v14 = *(os_unfair_lock_s **)(v11 + 344);
        swift_retain();
        os_unfair_lock_lock(v14);
        ecs_stack_allocator_push_snapshot(*(_QWORD *)(v13 + 32));
        swift_retain();
        sub_1B1FE3E7C(v13, v11, v10, a2, v7, a3);
        swift_release();
        if (!v5)
          ecs_stack_allocator_pop_snapshot(*(_QWORD *)(v13 + 32));
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v11 + 344));
        return swift_release();
      }
    }
  }
  return result;
}

uint64_t sub_1B1FDF510(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1FEF020(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1FE3F44);
}

uint64_t sub_1B1FDF52C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B1FDF564(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1FE401C);
}

uint64_t sub_1B1FDF548(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B1FDF564(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1FE40E4);
}

uint64_t sub_1B1FDF564(uint64_t result, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  os_unfair_lock_s *v16;

  v6 = v4;
  v9 = result;
  if (result != 0xFFFFFFFFLL
    && result << 32 >= (uint64_t)0xFFFFFFFF00000001
    && (int)result < *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8))
  {
    v10 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
    if (HIDWORD(result) == -1 || *(_DWORD *)(v10 + 12 * (int)result + 8) == HIDWORD(result))
    {
      v11 = (int *)(v10 + 12 * (int)result);
      v12 = *((__int16 *)v11 + 2);
      v13 = *(_QWORD *)(*(_QWORD *)(a2 + 136) + 8 * *v11 + 32);
      if (*(_QWORD *)(v13 + 232) <= v12 && *(_QWORD *)(v13 + 240) > v12)
      {
        v15 = **(_QWORD **)(a2 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues);
        v16 = *(os_unfair_lock_s **)(v13 + 344);
        swift_retain();
        os_unfair_lock_lock(v16);
        ecs_stack_allocator_push_snapshot(*(_QWORD *)(v15 + 32));
        swift_retain();
        a4(v15, v13, v12, a2, v9, a3);
        swift_release();
        if (!v6)
          ecs_stack_allocator_pop_snapshot(*(_QWORD *)(v15 + 32));
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v13 + 344));
        return swift_release();
      }
    }
  }
  return result;
}

uint64_t sub_1B1FDF6B0(uint64_t a1, uint64_t a2)
{
  return sub_1B1FDF79C(a1, a2, (uint64_t (*)(_QWORD, _QWORD, uint64_t))sub_1B1FF0A3C);
}

uint64_t sub_1B1FDF6CC(unint64_t a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t result;
  uint64_t v5;

  v3 = HIDWORD(a1);
  if (a1 == 0xFFFFFFFF)
    return 0;
  result = 0;
  if ((uint64_t)(a1 << 32) >= (uint64_t)0xFFFFFFFF00000001
    && (int)a1 < *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8))
  {
    v5 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
    if ((_DWORD)v3 != -1 && *(_DWORD *)(v5 + 12 * (int)a1 + 8) != (_DWORD)v3)
      return 0;
    return sub_1B1FF0AB4(*(_QWORD *)(*(_QWORD *)(a2 + 136) + 8 * *(int *)(v5 + 12 * (int)a1) + 32), *(_WORD *)(v5 + 12 * (int)a1 + 4), 48);
  }
  return result;
}

uint64_t sub_1B1FDF780(uint64_t a1, uint64_t a2)
{
  return sub_1B1FDF79C(a1, a2, (uint64_t (*)(_QWORD, _QWORD, uint64_t))sub_1B1FF0B98);
}

uint64_t sub_1B1FDF79C(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD, _QWORD, uint64_t))
{
  uint64_t v3;

  if (a1 != 0xFFFFFFFFLL
    && a1 << 32 >= (uint64_t)0xFFFFFFFF00000001
    && (int)a1 < *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8)
    && ((v3 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries), HIDWORD(a1) == -1)
     || *(_DWORD *)(v3 + 12 * (int)a1 + 8) == HIDWORD(a1)))
  {
    return a3(*(_QWORD *)(*(_QWORD *)(a2 + 136) + 8 * *(int *)(v3 + 12 * (int)a1) + 32), *(unsigned __int16 *)(v3 + 12 * (int)a1 + 4), 656);
  }
  else
  {
    return 0;
  }
}

unint64_t sub_1B1FDF838(unint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v4;
  unint64_t result;
  uint64_t v6;
  uint64_t v7;

  v4 = HIDWORD(a1);
  if (a1 == 0xFFFFFFFF)
    goto LABEL_2;
  LODWORD(result) = 0;
  LOBYTE(v6) = 1;
  if ((uint64_t)(a1 << 32) < (uint64_t)0xFFFFFFFF00000001
    || (int)a1 >= *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8))
  {
    return result | ((unint64_t)v6 << 32);
  }
  v7 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
  if ((_DWORD)v4 != -1 && *(_DWORD *)(v7 + 12 * (int)a1 + 8) != (_DWORD)v4)
  {
LABEL_2:
    LODWORD(result) = 0;
    LOBYTE(v6) = 1;
    return result | ((unint64_t)v6 << 32);
  }
  result = sub_1B1FE7908(*(_QWORD *)(*(_QWORD *)(a2 + 136) + 8 * *(int *)(v7 + 12 * (int)a1) + 32), *(_WORD *)(v7 + 12 * (int)a1 + 4), 88);
  if (!v2)
  {
    v6 = HIDWORD(result) & 1;
    return result | ((unint64_t)v6 << 32);
  }
  return result;
}

uint64_t sub_1B1FDF900(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (a1 != 0xFFFFFFFFLL
    && a1 << 32 >= (uint64_t)0xFFFFFFFF00000001
    && (int)a1 < *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8)
    && ((v2 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries), HIDWORD(a1) == -1)
     || *(_DWORD *)(v2 + 12 * (int)a1 + 8) == HIDWORD(a1)))
  {
    return sub_1B1FF0EA0(*(_QWORD *)(*(_QWORD *)(a2 + 136) + 8 * *(int *)(v2 + 12 * (int)a1) + 32));
  }
  else
  {
    return 0;
  }
}

uint64_t sub_1B1FDF998(unint64_t a1, uint64_t a2)
{
  return sub_1B1FDF9AC(a1, a2);
}

uint64_t sub_1B1FDF9AC(unint64_t a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t result;
  uint64_t v5;

  v3 = HIDWORD(a1);
  if (a1 == 0xFFFFFFFF)
    return 0;
  result = 0;
  if ((uint64_t)(a1 << 32) >= (uint64_t)0xFFFFFFFF00000001
    && (int)a1 < *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8))
  {
    v5 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
    if ((_DWORD)v3 == -1 || *(_DWORD *)(v5 + 12 * (int)a1 + 8) == (_DWORD)v3)
      return sub_1B1FF11B0(*(_QWORD *)(*(_QWORD *)(a2 + 136) + 8 * *(int *)(v5 + 12 * (int)a1) + 32));
    else
      return 0;
  }
  return result;
}

uint64_t sub_1B1FDFA54(unint64_t a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t result;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  _QWORD *i;

  v3 = HIDWORD(a1);
  if (a1 == 0xFFFFFFFF)
    return 2;
  result = 2;
  if ((uint64_t)(a1 << 32) >= (uint64_t)0xFFFFFFFF00000001
    && (int)a1 < *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8))
  {
    v5 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
    if ((_DWORD)v3 == -1 || *(_DWORD *)(v5 + 12 * (int)a1 + 8) == (_DWORD)v3)
    {
      v6 = (int *)(v5 + 12 * (int)a1);
      v7 = *(_QWORD *)(*(_QWORD *)(a2 + 136) + 8 * *v6 + 32);
      v8 = *(_QWORD *)(v7 + 48);
      v9 = *(_QWORD *)(v8 + 16);
      if (v9)
      {
        v10 = *((__int16 *)v6 + 2);
        for (i = (_QWORD *)(v8 + 56); (ValueMetadata *)*(i - 3) != &type metadata for Material; i += 5)
        {
          if (!--v9)
            return 2;
        }
        return (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v7 + 128) + *i + 104 * v10 + 8) + 80) >> 5) & 1;
      }
    }
  }
  return result;
}

uint64_t sub_1B1FDFB30(unint64_t a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t result;
  uint64_t v5;

  v3 = HIDWORD(a1);
  if (a1 == 0xFFFFFFFF)
    return 1;
  result = 1;
  if ((uint64_t)(a1 << 32) >= (uint64_t)0xFFFFFFFF00000001
    && (int)a1 < *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8))
  {
    v5 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
    if ((_DWORD)v3 != -1 && *(_DWORD *)(v5 + 12 * (int)a1 + 8) != (_DWORD)v3)
      return 1;
    return sub_1B1FF1674(*(_QWORD *)(*(_QWORD *)(a2 + 136) + 8 * *(int *)(v5 + 12 * (int)a1) + 32));
  }
  return result;
}

uint64_t sub_1B1FDFBF0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _OWORD *a5@<X8>)
{
  uint64_t v8;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  if (a1 != 0xFFFFFFFFLL
    && a1 << 32 >= (uint64_t)0xFFFFFFFF00000001
    && (int)a1 < *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8)
    && ((v8 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries), HIDWORD(a1) == -1)
     || *(_DWORD *)(v8 + 12 * (int)a1 + 8) == HIDWORD(a1)))
  {
    v10 = (unsigned int *)(v8 + 12 * (int)a1);
    v11 = *v10;
    v12 = *(_QWORD *)(*(_QWORD *)(a2 + 136) + 8 * (int)v11 + 32);
    v13 = v11 | ((unint64_t)*((unsigned __int16 *)v10 + 3) << 48) | ((unint64_t)*((unsigned __int16 *)v10
                                                                                              + 2) << 32);
    swift_bridgeObjectRetain();
    sub_1B1FE41AC(v12, v13, 24, a3, a4, (uint64_t)a5);
  }
  else
  {
    *a5 = 0u;
    a5[1] = 0u;
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B1FDFCF0(unint64_t a1, uint64_t a2, uint64_t *a3, unsigned int a4)
{
  uint64_t v4;
  unint64_t v6;
  uint64_t result;
  uint64_t v8;

  v6 = HIDWORD(a1);
  if (a1 == 0xFFFFFFFF)
    return 1;
  result = 1;
  if ((uint64_t)(a1 << 32) >= (uint64_t)0xFFFFFFFF00000001
    && (int)a1 < *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8))
  {
    v8 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
    if ((_DWORD)v6 == -1 || *(_DWORD *)(v8 + 12 * (int)a1 + 8) == (_DWORD)v6)
    {
      result = sub_1B1FF17FC(*(_QWORD *)(*(_QWORD *)(a2 + 136) + 8 * *(int *)(v8 + 12 * (int)a1) + 32), *(_WORD *)(v8 + 12 * (int)a1 + 4), 656, a3, a4);
      if (!v4)
        return result & 1;
    }
  }
  return result;
}

uint64_t sub_1B1FDFDA8(unint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t *a5)
{
  uint64_t v5;
  unint64_t v7;
  uint64_t result;
  uint64_t v9;

  v7 = HIDWORD(a1);
  if (a1 == 0xFFFFFFFF)
    return 1;
  result = 1;
  if ((uint64_t)(a1 << 32) >= (uint64_t)0xFFFFFFFF00000001
    && (int)a1 < *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8))
  {
    v9 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
    if ((_DWORD)v7 == -1 || *(_DWORD *)(v9 + 12 * (int)a1 + 8) == (_DWORD)v7)
    {
      result = sub_1B1FF1884(*(_QWORD *)(*(_QWORD *)(a2 + 136) + 8 * *(int *)(v9 + 12 * (int)a1) + 32), *(_WORD *)(v9 + 12 * (int)a1 + 4), 656, a3, a4, a5);
      if (!v5)
        return result & 1;
    }
  }
  return result;
}

uint64_t sub_1B1FDFE64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (a3 == 0xFFFFFFFFLL)
    return 0;
  if (a3 << 32 < (uint64_t)0xFFFFFFFF00000001)
    return 0;
  if ((int)a3 >= *(_QWORD *)(v3 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8))
    return 0;
  v5 = *(_QWORD *)(v3 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
  if (HIDWORD(a3) != -1 && *(_DWORD *)(v5 + 12 * (int)a3 + 8) != HIDWORD(a3))
    return 0;
  v6 = (int *)(v5 + 12 * (int)a3);
  v7 = *(_QWORD *)(*(_QWORD *)(v3 + 136) + 8 * *v6 + 32);
  v8 = *(_QWORD *)(v7 + 48);
  v9 = *(_QWORD *)(v8 + 16);
  if (!v9)
    return 0;
  v10 = *((__int16 *)v6 + 2);
  for (i = v8 + 56; *(_QWORD *)(i - 24) != a1; i += 40)
  {
    if (!--v9)
      return 0;
  }
  v14 = i - 8;
  v13 = *(_QWORD *)(i - 8);
  v12 = *(_QWORD *)(v14 + 8);
  if (v13 <= 1)
    v13 = 1;
  return *(_QWORD *)(v7 + 128) + v12 + v13 * v10;
}

uint64_t sub_1B1FDFF30(unint64_t a1, uint64_t a2, __n128 a3)
{
  unint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *i;

  v4 = HIDWORD(a1);
  if (a1 == 0xFFFFFFFF)
    return 0;
  result = 0;
  if ((uint64_t)(a1 << 32) >= (uint64_t)0xFFFFFFFF00000001
    && (int)a1 < *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8))
  {
    v6 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
    v7 = v6 + 12 * (int)a1;
    if ((_DWORD)v4 != -1 && *(_DWORD *)(v7 + 8) != (_DWORD)v4)
      return 0;
    v8 = *(_QWORD *)(*(_QWORD *)(a2 + 136) + 8 * *(int *)(v6 + 12 * (int)a1) + 32);
    v9 = *(_QWORD *)(v8 + 48);
    v10 = *(_QWORD *)(v9 + 16);
    if (!v10)
      return 0;
    for (i = (_QWORD *)(v9 + 56); (ValueMetadata *)*(i - 3) != &type metadata for Color; i += 5)
    {
      if (!--v10)
        return 0;
    }
    *(__n128 *)(*(_QWORD *)(v8 + 128) + *i + 16 * *(__int16 *)(v7 + 4)) = a3;
    return 1;
  }
  return result;
}

uint64_t sub_1B1FE0000(unint64_t a1, uint64_t a2, __n128 a3, __n128 a4, __n128 a5, __n128 a6)
{
  unint64_t v7;
  uint64_t result;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *i;
  __n128 *v16;

  v7 = HIDWORD(a1);
  if (a1 == 0xFFFFFFFF)
    return 0;
  result = 0;
  if ((uint64_t)(a1 << 32) >= (uint64_t)0xFFFFFFFF00000001
    && (int)a1 < *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8))
  {
    v9 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
    if ((_DWORD)v7 != -1 && *(_DWORD *)(v9 + 12 * (int)a1 + 8) != (_DWORD)v7)
      return 0;
    v10 = (int *)(v9 + 12 * (int)a1);
    v11 = *(_QWORD *)(*(_QWORD *)(a2 + 136) + 8 * *v10 + 32);
    v12 = *(_QWORD *)(v11 + 48);
    v13 = *(_QWORD *)(v12 + 16);
    if (!v13)
      return 0;
    v14 = *((__int16 *)v10 + 2);
    for (i = (_QWORD *)(v12 + 56); (ValueMetadata *)*(i - 3) != &type metadata for WorldTransform; i += 5)
    {
      if (!--v13)
        return 0;
    }
    v16 = (__n128 *)(*(_QWORD *)(v11 + 128) + *i + (v14 << 6));
    *v16 = a3;
    v16[1] = a4;
    v16[2] = a5;
    v16[3] = a6;
    return 1;
  }
  return result;
}

uint64_t sub_1B1FE00D8(uint64_t a1, uint64_t a2, simd_float4x4 a3)
{
  uint64_t v3;

  if (a1 != 0xFFFFFFFFLL
    && a1 << 32 >= (uint64_t)0xFFFFFFFF00000001
    && (int)a1 < *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8)
    && ((v3 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries), HIDWORD(a1) == -1)
     || *(_DWORD *)(v3 + 12 * (int)a1 + 8) == HIDWORD(a1)))
  {
    return sub_1B1FF1A7C(*(_QWORD *)(*(_QWORD *)(a2 + 136) + 8 * *(int *)(v3 + 12 * (int)a1) + 32), *(_WORD *)(v3 + 12 * (int)a1 + 4), 64, a3) & 1;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_1B1FE0174(uint64_t a1, uint64_t a2, simd_float4x4 *a3)
{
  uint64_t v3;

  if (a1 != 0xFFFFFFFFLL
    && a1 << 32 >= (uint64_t)0xFFFFFFFF00000001
    && (int)a1 < *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8)
    && ((v3 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries), HIDWORD(a1) == -1)
     || *(_DWORD *)(v3 + 12 * (int)a1 + 8) == HIDWORD(a1)))
  {
    return sub_1B1FF1AF8(*(_QWORD *)(*(_QWORD *)(a2 + 136) + 8 * *(int *)(v3 + 12 * (int)a1) + 32), *(_WORD *)(v3 + 12 * (int)a1 + 4), 64, a3) & 1;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_1B1FE0214(uint64_t a1, uint64_t a2)
{
  return sub_1B1FE0254(a1, a2, (uint64_t (*)(_QWORD, _QWORD, uint64_t))sub_1B1FE559C) & 1;
}

uint64_t sub_1B1FE0234(uint64_t a1, uint64_t a2)
{
  return sub_1B1FE0254(a1, a2, (uint64_t (*)(_QWORD, _QWORD, uint64_t))sub_1B1FE56C8) & 1;
}

uint64_t sub_1B1FE0254(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD, _QWORD, uint64_t))
{
  uint64_t v3;

  if (a1 != 0xFFFFFFFFLL
    && a1 << 32 >= (uint64_t)0xFFFFFFFF00000001
    && (int)a1 < *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8)
    && ((v3 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries), HIDWORD(a1) == -1)
     || *(_DWORD *)(v3 + 12 * (int)a1 + 8) == HIDWORD(a1)))
  {
    return a3(*(_QWORD *)(*(_QWORD *)(a2 + 136) + 8 * *(int *)(v3 + 12 * (int)a1) + 32), *(unsigned __int16 *)(v3 + 12 * (int)a1 + 4), 64) & 1;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_1B1FE02FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  if (a1 != 0xFFFFFFFFLL
    && a1 << 32 >= (uint64_t)0xFFFFFFFF00000001
    && (int)a1 < *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8)
    && ((v3 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries), HIDWORD(a1) == -1)
     || *(_DWORD *)(v3 + 12 * (int)a1 + 8) == HIDWORD(a1)))
  {
    return sub_1B1FF1B7C(*(_QWORD *)(*(_QWORD *)(a2 + 136) + 8 * *(int *)(v3 + 12 * (int)a1) + 32), *(_WORD *)(v3 + 12 * (int)a1 + 4), 64, a2, a1, a3) & 1;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_1B1FE03A4(unint64_t a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t result;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  _QWORD *i;

  v3 = HIDWORD(a1);
  if (a1 == 0xFFFFFFFF)
    return 0;
  result = 0;
  if ((uint64_t)(a1 << 32) >= (uint64_t)0xFFFFFFFF00000001
    && (int)a1 < *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8))
  {
    v5 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
    if ((_DWORD)v3 != -1 && *(_DWORD *)(v5 + 12 * (int)a1 + 8) != (_DWORD)v3)
      return 0;
    v6 = (int *)(v5 + 12 * (int)a1);
    v7 = *(_QWORD *)(*(_QWORD *)(a2 + 136) + 8 * *v6 + 32);
    v8 = *(_QWORD *)(v7 + 48);
    v9 = *(_QWORD *)(v8 + 16);
    if (!v9)
      return 0;
    v10 = *((__int16 *)v6 + 2);
    for (i = (_QWORD *)(v8 + 56); (ValueMetadata *)*(i - 3) != &type metadata for ParticlePlaneCollider; i += 5)
    {
      if (!--v9)
        return 0;
    }
    *(_BYTE *)(*(_QWORD *)(v7 + 128) + *i + 28 * v10 + 2) = 0;
    return 1;
  }
  return result;
}

uint64_t sub_1B1FE047C(unint64_t a1, uint64_t a2, __n128 a3)
{
  unint64_t v4;
  uint64_t result;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *i;

  v4 = HIDWORD(a1);
  if (a1 == 0xFFFFFFFF)
    return 0;
  result = 0;
  if ((uint64_t)(a1 << 32) >= (uint64_t)0xFFFFFFFF00000001
    && (int)a1 < *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8))
  {
    v6 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
    if ((_DWORD)v4 != -1 && *(_DWORD *)(v6 + 12 * (int)a1 + 8) != (_DWORD)v4)
      return 0;
    v7 = (int *)(v6 + 12 * (int)a1);
    v8 = *(_QWORD *)(*(_QWORD *)(a2 + 136) + 8 * *v7 + 32);
    v9 = *(_QWORD *)(v8 + 48);
    v10 = *(_QWORD *)(v9 + 16);
    if (!v10)
      return 0;
    v11 = *((__int16 *)v7 + 2);
    for (i = (_QWORD *)(v9 + 56); (ValueMetadata *)*(i - 3) != &type metadata for Scale3; i += 5)
    {
      if (!--v10)
        return 0;
    }
    *(__n128 *)(*(_QWORD *)(v8 + 128) + *i + 16 * v11) = a3;
    return 1;
  }
  return result;
}

uint64_t sub_1B1FE054C(unint64_t a1, uint64_t a2)
{
  return sub_1B1FE0564(a1, a2) & 1;
}

uint64_t sub_1B1FE0564(unint64_t a1, uint64_t a2)
{
  unint64_t v3;
  char v4;
  uint64_t v5;

  v3 = HIDWORD(a1);
  if (a1 == 0xFFFFFFFF)
    return 0;
  v4 = 0;
  if ((uint64_t)(a1 << 32) < (uint64_t)0xFFFFFFFF00000001)
    return 0;
  if ((int)a1 < *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8))
  {
    v5 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
    if ((_DWORD)v3 == -1 || *(_DWORD *)(v5 + 12 * (int)a1 + 8) == (_DWORD)v3)
      v4 = sub_1B1FF28C0(*(_QWORD *)(*(_QWORD *)(a2 + 136) + 8 * *(int *)(v5 + 12 * (int)a1) + 32), *(_WORD *)(v5 + 12 * (int)a1 + 4), 16);
    else
      v4 = 0;
  }
  return v4 & 1;
}

uint64_t sub_1B1FE0614(uint64_t a1, unint64_t a2, void (*a3)(char *), uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v14;
  uint64_t v15;
  char v16;
  _QWORD *v18;
  uint64_t v19;
  unsigned int *v20;
  char v21;

  v8 = v6;
  v14 = HIDWORD(a2);
  v15 = sub_1B1F24AA4(a5);
  if ((_DWORD)a2 == -1 && !(_DWORD)v14)
    goto LABEL_3;
  v16 = 0;
  if ((uint64_t)(a2 << 32) >= (uint64_t)0xFFFFFFFF00000001)
  {
    v18 = (_QWORD *)(v8 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
    if ((int)a2 < *(_QWORD *)(v8 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8))
    {
      v19 = *(unsigned int *)(*v18 + 12 * (int)a2 + 8);
      if ((_DWORD)v14 != -1 && (_DWORD)v19 != (_DWORD)v14)
      {
LABEL_3:
        v16 = 0;
        return v16 & 1;
      }
      v20 = (unsigned int *)(*v18 + 12 * (int)a2);
      sub_1B1FE44A4(*(_QWORD *)(*(_QWORD *)(v8 + 136) + 8 * (int)*v20 + 32), *v20 | ((unint64_t)*((unsigned __int16 *)v20 + 3) << 48) | ((unint64_t)*((unsigned __int16 *)v20+ 2) << 32), v19, v15, a3, a4, v8, a2, a5, a6);
      if (!v7)
        v16 = v21;
    }
  }
  return v16 & 1;
}

uint64_t sub_1B1FE073C(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  char v6;
  uint64_t result;

  if (a1 != 0xFFFFFFFFLL
    && a1 << 32 >= (uint64_t)0xFFFFFFFF00000001
    && (int)a1 < *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8))
  {
    v4 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
    if (HIDWORD(a1) == -1 || *(_DWORD *)(v4 + 12 * (int)a1 + 8) == HIDWORD(a1))
    {
      v5 = sub_1B1FF0C00(*(_QWORD *)(*(_QWORD *)(a2 + 136) + 8 * *(int *)(v4 + 12 * (int)a1) + 32), *(_WORD *)(v4 + 12 * (int)a1 + 4), 656, a3);
      if (v3)
        return v6 & 1;
      if (v5 != 2)
      {
        v6 = v5 & 1;
        return v6 & 1;
      }
    }
  }
  sub_1B2229430();
  sub_1B2228890();
  sub_1B1BC3C70();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  sub_1B2228890();
  sub_1B2228890();
  result = sub_1B2229688();
  __break(1u);
  return result;
}

unint64_t sub_1B1FE08F4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t result;

  if (a1 == 0xFFFFFFFFLL
    || a1 << 32 < (uint64_t)0xFFFFFFFF00000001
    || (int)a1 >= *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8)
    || (v3 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries), HIDWORD(a1) != -1)
    && *(_DWORD *)(v3 + 12 * (int)a1 + 8) != HIDWORD(a1)
    || (result = sub_1B1FF0C88(*(_QWORD *)(*(_QWORD *)(a2 + 136) + 8 * *(int *)(v3 + 12 * (int)a1) + 32), *(_WORD *)(v3 + 12 * (int)a1 + 4), 88), !v2)&& (result & 0x100000000) != 0)
  {
    sub_1B2229430();
    sub_1B2228890();
    sub_1B1BC3C70();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    sub_1B2228890();
    sub_1B2228890();
    result = sub_1B2229688();
    __break(1u);
  }
  return result;
}

uint64_t sub_1B1FE0A90(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  uint64_t result;

  if (a1 != 0xFFFFFFFFLL
    && a1 << 32 >= (uint64_t)0xFFFFFFFF00000001
    && (int)a1 < *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8))
  {
    v3 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
    if (HIDWORD(a1) == -1 || *(_DWORD *)(v3 + 12 * (int)a1 + 8) == HIDWORD(a1))
    {
      v4 = v3 + 12 * (int)a1;
      v5 = *(_QWORD *)(*(_QWORD *)(a2 + 136) + 8 * *(int *)v4 + 32);
      v6 = *(_QWORD *)(v5 + 48);
      v7 = *(_QWORD *)(v6 + 16);
      if (v7)
      {
        LODWORD(v4) = *(__int16 *)(v4 + 4);
        v8 = (_QWORD *)(v6 + 56);
        while ((ValueMetadata *)*(v8 - 3) != &type metadata for EmitterDescription)
        {
          v8 += 5;
          if (!--v7)
            goto LABEL_10;
        }
        v4 = *v8 + 88 * (int)v4;
        v9 = *(unsigned __int8 *)(*(_QWORD *)(v5 + 128) + v4 + 45);
        if (v2)
          return v4 & 1;
      }
      else
      {
LABEL_10:
        v9 = 2;
        if (v2)
          return v4 & 1;
      }
      if (v9 != 2)
      {
        LOBYTE(v4) = v9 != 0;
        return v4 & 1;
      }
    }
  }
  sub_1B2229430();
  sub_1B2228890();
  sub_1B1BC3C70();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  sub_1B2228890();
  sub_1B2228890();
  result = sub_1B2229688();
  __break(1u);
  return result;
}

uint64_t sub_1B1FE0C84(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  if (a1 == 0xFFFFFFFFLL
    || a1 << 32 < (uint64_t)0xFFFFFFFF00000001
    || (int)a1 >= *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8)
    || (v3 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries), HIDWORD(a1) != -1)
    && *(_DWORD *)(v3 + 12 * (int)a1 + 8) != HIDWORD(a1)
    || (result = sub_1B1FF0D60(*(_QWORD *)(*(_QWORD *)(a2 + 136) + 8 * *(int *)(v3 + 12 * (int)a1) + 32)), !v2)
    && !result)
  {
    sub_1B2229430();
    sub_1B2228890();
    sub_1B1BC3C70();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    sub_1B2228890();
    sub_1B2228890();
    result = sub_1B2229688();
    __break(1u);
  }
  return result;
}

uint64_t sub_1B1FE0E28(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  if (a1 == 0xFFFFFFFFLL
    || a1 << 32 < (uint64_t)0xFFFFFFFF00000001
    || (int)a1 >= *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8)
    || (v3 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries), HIDWORD(a1) != -1)
    && *(_DWORD *)(v3 + 12 * (int)a1 + 8) != HIDWORD(a1)
    || (result = sub_1B1FF0F08(*(_QWORD *)(*(_QWORD *)(a2 + 136) + 8 * *(int *)(v3 + 12 * (int)a1) + 32)), !v2)
    && !result)
  {
    sub_1B2229430();
    sub_1B2228890();
    sub_1B1BC3C70();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    sub_1B2228890();
    sub_1B2228890();
    result = sub_1B2229688();
    __break(1u);
  }
  return result;
}

uint64_t sub_1B1FE0FC0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  if (a1 == 0xFFFFFFFFLL
    || a1 << 32 < (uint64_t)0xFFFFFFFF00000001
    || (int)a1 >= *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8)
    || (v3 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries), HIDWORD(a1) != -1)
    && *(_DWORD *)(v3 + 12 * (int)a1 + 8) != HIDWORD(a1)
    || (result = sub_1B1FF113C(*(_QWORD *)(*(_QWORD *)(a2 + 136) + 8 * *(int *)(v3 + 12 * (int)a1) + 32), *(_WORD *)(v3 + 12 * (int)a1 + 4), 656), !v2)&& (v5 & 0xFF00000000) == 0x200000000)
  {
    sub_1B2229430();
    sub_1B2228890();
    sub_1B1BC3C70();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    sub_1B2228890();
    sub_1B2228890();
    result = sub_1B2229688();
    __break(1u);
  }
  return result;
}

uint64_t sub_1B1FE1184(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  _QWORD *v9;
  uint64_t result;

  if (a1 == 0xFFFFFFFFLL
    || a1 << 32 < (uint64_t)0xFFFFFFFF00000001
    || (int)a1 >= *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8)
    || (v3 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries), HIDWORD(a1) != -1)
    && *(_DWORD *)(v3 + 12 * (int)a1 + 8) != HIDWORD(a1))
  {
LABEL_13:
    sub_1B2229430();
    sub_1B2228890();
    sub_1B1BC3C70();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    sub_1B2228890();
    sub_1B2228890();
    result = sub_1B2229688();
    __break(1u);
    return result;
  }
  v4 = (int *)(v3 + 12 * (int)a1);
  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 136) + 8 * *v4 + 32);
  v6 = *(_QWORD *)(v5 + 48);
  v7 = *(_QWORD *)(v6 + 16);
  if (!v7)
  {
LABEL_10:
    if (v2)
      return 0;
    goto LABEL_13;
  }
  v8 = *((__int16 *)v4 + 2);
  v9 = (_QWORD *)(v6 + 56);
  while ((ValueMetadata *)*(v9 - 3) != &type metadata for EmitterRuntime)
  {
    v9 += 5;
    if (!--v7)
      goto LABEL_10;
  }
  return *(_QWORD *)(*(_QWORD *)(v5 + 128) + *v9 + 656 * v8 + 220);
}

uint64_t sub_1B1FE136C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  _QWORD *v9;
  uint64_t result;

  if (a1 == 0xFFFFFFFFLL
    || a1 << 32 < (uint64_t)0xFFFFFFFF00000001
    || (int)a1 >= *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8)
    || (v3 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries), HIDWORD(a1) != -1)
    && *(_DWORD *)(v3 + 12 * (int)a1 + 8) != HIDWORD(a1))
  {
LABEL_13:
    sub_1B2229430();
    sub_1B2228890();
    sub_1B1BC3C70();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    sub_1B2228890();
    sub_1B2228890();
    result = sub_1B2229688();
    __break(1u);
    return result;
  }
  v4 = (int *)(v3 + 12 * (int)a1);
  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 136) + 8 * *v4 + 32);
  v6 = *(_QWORD *)(v5 + 48);
  v7 = *(_QWORD *)(v6 + 16);
  if (!v7)
  {
LABEL_10:
    if (v2)
      return 0;
    goto LABEL_13;
  }
  v8 = *((__int16 *)v4 + 2);
  v9 = (_QWORD *)(v6 + 56);
  while ((ValueMetadata *)*(v9 - 3) != &type metadata for EmitterRuntime)
  {
    v9 += 5;
    if (!--v7)
      goto LABEL_10;
  }
  return *(_QWORD *)(*(_QWORD *)(v5 + 128) + *v9 + 656 * v8 + 104);
}

uint64_t sub_1B1FE1554(unsigned __int8 *a1, unsigned __int8 *a2)
{
  char v2;
  BOOL v3;

  v2 = 1;
  v3 = *a1 == *a2 && a1[1] == a2[1];
  if (v3 && ((a1[2] ^ a2[2]) & 1) == 0)
  {
    if (*((_QWORD *)a1 + 1) == *((_QWORD *)a2 + 1) && *((_QWORD *)a1 + 2) == *((_QWORD *)a2 + 2))
      v2 = 0;
    else
      v2 = sub_1B2229D24() ^ 1;
  }
  return v2 & 1;
}

BOOL sub_1B1FE15C8(uint64_t a1, uint64_t a2)
{
  char v4;

  if (*(_QWORD *)a1 != *(_QWORD *)a2 || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
    return 1;
  v4 = *(_BYTE *)(a2 + 24);
  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
  {
    if (!*(_BYTE *)(a2 + 24))
      return 1;
  }
  else
  {
    if (*(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
      v4 = 1;
    if ((v4 & 1) != 0)
      return 1;
  }
  return *(unsigned __int8 *)(a1 + 25) != *(unsigned __int8 *)(a2 + 25);
}

uint64_t sub_1B1FE162C(unint64_t a1)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t result;

  v3 = HIDWORD(a1);
  if (a1 == 0xFFFFFFFF)
    return MEMORY[0x1E0DEE9D8];
  result = MEMORY[0x1E0DEE9D8];
  if ((uint64_t)(a1 << 32) >= (uint64_t)0xFFFFFFFF00000001
    && (int)a1 < *(_QWORD *)(v1 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8)
    && ((_DWORD)v3 == -1
     || *(_DWORD *)(*(_QWORD *)(v1 + OBJC_IVAR____TtC3VFX13EntityManager__entries) + 12 * (int)a1 + 8) == (_DWORD)v3))
  {
    return swift_retain();
  }
  return result;
}

uint64_t sub_1B1FE16DC(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  os_unfair_lock_s *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  signed int v19;
  int v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  _OWORD v33[2];
  uint64_t v34;
  _OWORD v35[2];
  uint64_t v36;

  v5 = result;
  if (a3 != 0xFFFFFFFFLL
    && a3 << 32 >= (uint64_t)0xFFFFFFFF00000001
    && (int)a3 < *(_QWORD *)(v3 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8))
  {
    v6 = *(_QWORD *)(v3 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
    if (HIDWORD(a3) == -1 || *(_DWORD *)(v6 + 12 * (int)a3 + 8) == HIDWORD(a3))
    {
      v7 = (int *)(v6 + 12 * (int)a3);
      v8 = *((__int16 *)v7 + 2);
      v9 = *(_QWORD *)(*(_QWORD *)(v3 + 136) + 8 * *v7 + 32);
      if (*(_QWORD *)(v9 + 232) <= v8 && *(_QWORD *)(v9 + 240) > v8)
      {
        v11 = **(_QWORD **)(v3 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues);
        v12 = *(os_unfair_lock_s **)(v9 + 344);
        swift_retain();
        os_unfair_lock_lock(v12);
        v13 = *(_QWORD *)(v11 + 32);
        ecs_stack_allocator_push_snapshot(v13);
        v14 = *(_QWORD *)(a2 + 8);
        if (sub_1B1E36538(v5))
        {
LABEL_25:
          ecs_stack_allocator_pop_snapshot(*(_QWORD *)(v11 + 32));
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v9 + 344));
          return swift_release();
        }
        swift_retain();
        v15 = ecs_stack_allocator_allocate(v13, 8, 8);
        *v15 = v8;
        if (((*(uint64_t (**)(uint64_t, uint64_t))(v14 + 48))(v5, v14) & 1) != 0)
        {
          v16 = *(_QWORD *)(v9 + 192);
          if (v16)
          {
            v17 = *(_QWORD *)(v9 + 208);
            *(_QWORD *)(v16 + 8 * (*v15 >> 6)) |= 1 << *v15;
            *(_QWORD *)(v17 + 8 * (*v15 >> 6)) &= (-1 << *v15) - 1;
          }
          sub_1B1FE26A8(*(_QWORD *)(v9 + 40), v9, v15, 1, 1);
        }
        v18 = *(_DWORD *)(v9 + 24);
        swift_retain();
        v36 = 0;
        memset(v35, 0, sizeof(v35));
        v34 = 0;
        memset(v33, 0, sizeof(v33));
        v19 = sub_1B1DA4ED8(v18, v5, a2, 0, 0, (uint64_t)v35, (uint64_t)v33);
        swift_release();
        sub_1B1DCC200((uint64_t)v33, (unint64_t *)&qword_1ED4B89E0, (unint64_t *)&qword_1ED4B89D0);
        sub_1B1DCC200((uint64_t)v35, (unint64_t *)&qword_1ED4B89E0, (unint64_t *)&qword_1ED4B89D0);
        if ((uint64_t)(*(_QWORD *)(v9 + 240) - *(_QWORD *)(v9 + 232)) >= 2)
        {
          v20 = *(unsigned __int8 *)(v9 + 120);
          v21 = *(unsigned int *)(v9 + 28);
          LOBYTE(v35[0]) = *(_BYTE *)(v9 + 32);
          sub_1B1FD891C(v15, 1, 1, v19, v20, v21 | ((unint64_t)LOBYTE(v35[0]) << 32), 0, 0);
LABEL_24:
          swift_release();
          goto LABEL_25;
        }
        v22 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(v9 + 16) + 80) + 8 * v19 + 32);
        v23 = *(_QWORD **)(v9 + 40);
        v24 = v22[4];
        v25 = v22[8];
        v26 = v23[4];
        v27 = v23[8];
        swift_retain();
        if (v25 == v27 && sub_1B216BFB8(v22[5], v23[5]))
        {
          v28 = sub_1B216BFB8(v24, v26);
          swift_release();
          if (v28)
          {
            sub_1B1A10BB0(v19);
            goto LABEL_24;
          }
        }
        else
        {
          swift_release();
        }
        v29 = *(_QWORD *)(v9 + 232);
        v30 = *(_QWORD *)(v9 + 240);
        v31 = *(unsigned __int8 *)(v9 + 120);
        v32 = *(unsigned int *)(v9 + 28);
        LOBYTE(v35[0]) = *(_BYTE *)(v9 + 32);
        sub_1B1FD8C68(v29, v30, v19, v31, v32 | ((unint64_t)LOBYTE(v35[0]) << 32), 0, 0, 0);
        goto LABEL_24;
      }
    }
  }
  return result;
}

uint64_t sub_1B1FE1A60(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  float v4;
  int v5;
  int v6;
  float v7;
  char v8;
  float v9;
  char v10;

  if (*(_DWORD *)(v1 + 36) != *(_DWORD *)(a1 + 36)
    || *(_DWORD *)(v1 + 40) != *(_DWORD *)(a1 + 40)
    || ((*(unsigned __int8 *)(v1 + 32) ^ *(unsigned __int8 *)(a1 + 32)) & 1) != 0
    || ((*(unsigned __int8 *)(v1 + 33) ^ *(unsigned __int8 *)(a1 + 33)) & 1) != 0)
  {
    return 1;
  }
  sub_1B1AE6738((int *)v1, (uint64_t)&v6);
  sub_1B1AE6738((int *)a1, (uint64_t)&v5);
  sub_1B1AE6738(&v6, (uint64_t)&v7);
  if (v8 == 1)
  {
    if (v7 == 0.0)
    {
      sub_1B1AE6738(&v5, (uint64_t)&v9);
      result = 1;
      if (v10 != 1 || v9 != 0.0)
        return result;
    }
    else if (LODWORD(v7) == 1)
    {
      sub_1B1AE6738(&v5, (uint64_t)&v9);
      result = 1;
      if (v10 != 1 || LODWORD(v9) != 1)
        return result;
    }
    else
    {
      sub_1B1AE6738(&v5, (uint64_t)&v9);
      result = 1;
      if (v10 != 1 || LODWORD(v9) <= 1)
        return result;
    }
  }
  else
  {
    v4 = v7;
    sub_1B1AE6738(&v5, (uint64_t)&v9);
    result = 1;
    if ((v10 & 1) != 0 || v4 != v9)
      return result;
  }
  if (*(float *)(v1 + 8) == *(float *)(a1 + 8)
    && *(unsigned __int8 *)(v1 + 12) == *(unsigned __int8 *)(a1 + 12)
    && *(_DWORD *)(v1 + 16) == *(_DWORD *)(a1 + 16)
    && *(unsigned __int8 *)(v1 + 20) == *(unsigned __int8 *)(a1 + 20)
    && ((*(unsigned __int8 *)(v1 + 21) ^ *(unsigned __int8 *)(a1 + 21)) & 1) == 0)
  {
    return (*(float *)(v1 + 24) > 0.0) ^ (*(float *)(a1 + 24) > 0.0);
  }
  return result;
}

uint64_t sub_1B1FE1C20(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  float v4;
  int v5;
  int v6;
  int v7;
  float v8;
  char v9;
  float v10;
  char v11;

  if (*(_DWORD *)v1 != *(_DWORD *)a1
    || *(_DWORD *)(v1 + 4) != *(_DWORD *)(a1 + 4)
    || ((*(unsigned __int8 *)(v1 + 37) ^ *(unsigned __int8 *)(a1 + 37)) & 1) != 0
    || ((*(unsigned __int8 *)(v1 + 38) ^ *(unsigned __int8 *)(a1 + 38)) & 1) != 0)
  {
    return 1;
  }
  sub_1B1AE6738((int *)(v1 + 8), (uint64_t)&v7);
  sub_1B1AE6738((int *)(a1 + 8), (uint64_t)&v6);
  sub_1B1AE6738(&v7, (uint64_t)&v8);
  if (v9 == 1)
  {
    if (v8 == 0.0)
    {
      sub_1B1AE6738(&v6, (uint64_t)&v10);
      result = 1;
      if (v11 != 1 || v10 != 0.0)
        return result;
    }
    else if (LODWORD(v8) == 1)
    {
      sub_1B1AE6738(&v6, (uint64_t)&v10);
      result = 1;
      if (v11 != 1 || LODWORD(v10) != 1)
        return result;
    }
    else
    {
      sub_1B1AE6738(&v6, (uint64_t)&v10);
      result = 1;
      if (v11 != 1 || LODWORD(v10) <= 1)
        return result;
    }
  }
  else
  {
    v4 = v8;
    sub_1B1AE6738(&v6, (uint64_t)&v10);
    result = 1;
    if ((v11 & 1) != 0 || v4 != v10)
      return result;
  }
  if (*(float *)(v1 + 16) != *(float *)(a1 + 16))
    return result;
  if (*(uint64_t *)(v1 + 96) > 1 || *(_QWORD *)(v1 + 88))
    v5 = 5;
  else
    v5 = *(unsigned __int8 *)(v1 + 20);
  if (*(uint64_t *)(a1 + 96) > 1 || *(_QWORD *)(a1 + 88))
  {
    if (v5 != 5)
      return result;
  }
  else if (v5 != *(unsigned __int8 *)(a1 + 20))
  {
    return result;
  }
  if (*(_DWORD *)(v1 + 24) == *(_DWORD *)(a1 + 24)
    && *(unsigned __int8 *)(v1 + 28) == *(unsigned __int8 *)(a1 + 28)
    && ((*(unsigned __int8 *)(v1 + 29) ^ *(unsigned __int8 *)(a1 + 29)) & 1) == 0)
  {
    return (*(float *)(v1 + 32) > 0.0) ^ (*(float *)(a1 + 32) > 0.0);
  }
  return result;
}

uint64_t sub_1B1FE1E1C(uint64_t result, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v13;
  os_unfair_lock_s *v14;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v16;
  unint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[5];
  char v27;

  v7 = result;
  if (a3 != 0xFFFFFFFFLL
    && a3 << 32 >= (uint64_t)0xFFFFFFFF00000001
    && (int)a3 < *(_QWORD *)(v4 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8))
  {
    v8 = *(_QWORD *)(v4 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
    if (HIDWORD(a3) == -1 || *(_DWORD *)(v8 + 12 * (int)a3 + 8) == HIDWORD(a3))
    {
      v9 = (int *)(v8 + 12 * (int)a3);
      v10 = *((__int16 *)v9 + 2);
      v11 = *(_QWORD *)(*(_QWORD *)(v4 + 136) + 8 * *v9 + 32);
      if (*(_QWORD *)(v11 + 232) <= v10 && *(_QWORD *)(v11 + 240) > v10)
      {
        v13 = **(uint64_t ***)(v4 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues);
        v14 = *(os_unfair_lock_s **)(v11 + 344);
        swift_retain();
        os_unfair_lock_lock(v14);
        ecs_stack_allocator_push_snapshot(v13[4]);
        if (!sub_1B1E36538(v7))
        {
          swift_retain();
LABEL_24:
          sub_1B1F03804((char *)v11);
          swift_release();
          ecs_stack_allocator_pop_snapshot(v13[4]);
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v11 + 344));
          return swift_release();
        }
        v26[0] = v7;
        v26[1] = a2;
        v27 = 1;
        swift_retain();
        if ((a4 & 1) == 0)
        {
          sub_1B1F05960(v13 + 13, (uint64_t)v26, v10, 0, v11, (uint64_t)v13);
LABEL_23:
          sub_1B1B68F14((uint64_t)v26);
          goto LABEL_24;
        }
        swift_retain();
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v25 = v13[12];
        v16 = v25;
        v13[12] = 0x8000000000000000;
        v17 = sub_1B1DC3BAC(v11);
        v19 = v18;
        v20 = *(_QWORD *)(v16 + 16) + ((v18 & 1) == 0);
        if (*(_QWORD *)(v16 + 24) >= v20)
        {
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            sub_1B1EA7EC0();
            v16 = v25;
          }
          goto LABEL_20;
        }
        sub_1B1E909F0(v20, isUniquelyReferenced_nonNull_native);
        v16 = v25;
        v21 = sub_1B1DC3BAC(v11);
        if ((v19 & 1) == (v22 & 1))
        {
          v17 = v21;
LABEL_20:
          v13[12] = v16;
          swift_bridgeObjectRelease();
          v23 = (_QWORD *)v13[12];
          swift_bridgeObjectRetain();
          if ((v19 & 1) == 0)
          {
            sub_1B1B1B5C4(&v25);
            sub_1B1EB3340(v17, v11, v25, v23);
            swift_retain();
          }
          v24 = v23[7];
          swift_bridgeObjectRelease();
          sub_1B1F05960((uint64_t *)(v24 + 8 * v17), (uint64_t)v26, v10, 1, v11, (uint64_t)v13);
          swift_release();
          goto LABEL_23;
        }
        type metadata accessor for ComponentsDataChunk();
        result = sub_1B2229FC4();
        __break(1u);
      }
    }
  }
  return result;
}

uint64_t sub_1B1FE20C0(uint64_t result, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  os_unfair_lock_s *v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD v18[5];
  char v19;

  v7 = result;
  if (a3 != 0xFFFFFFFFLL
    && a3 << 32 >= (uint64_t)0xFFFFFFFF00000001
    && (int)a3 < *(_QWORD *)(v4 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8))
  {
    v8 = *(_QWORD *)(v4 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
    if (HIDWORD(a3) == -1 || *(_DWORD *)(v8 + 12 * (int)a3 + 8) == HIDWORD(a3))
    {
      v9 = (int *)(v8 + 12 * (int)a3);
      v10 = *((__int16 *)v9 + 2);
      v11 = *(_QWORD *)(*(_QWORD *)(v4 + 136) + 8 * *v9 + 32);
      if (*(_QWORD *)(v11 + 232) <= v10 && *(_QWORD *)(v11 + 240) > v10)
      {
        v13 = **(_QWORD **)(v4 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues);
        v14 = *(os_unfair_lock_s **)(v11 + 344);
        swift_retain();
        os_unfair_lock_lock(v14);
        ecs_stack_allocator_push_snapshot(*(_QWORD *)(v13 + 32));
        v15 = *(_BYTE *)(v13 + 112);
        *(_BYTE *)(v13 + 112) = 1;
        v16 = sub_1B1A10AA4(*(_QWORD *)(v11 + 40), v7, v18);
        if (LOBYTE(v18[0]) == 1)
        {
          v18[0] = v7;
          v18[1] = a2;
          v19 = 1;
          MEMORY[0x1E0C80A78](v16, v17);
          swift_retain();
          sub_1B1F05610(a4 & 1, v11, (uint64_t (*)(uint64_t))sub_1B1FF341C);
          sub_1B1B68F14((uint64_t)v18);
        }
        else
        {
          swift_retain();
        }
        sub_1B1F03804((char *)v11);
        *(_BYTE *)(v13 + 112) = v15;
        swift_release();
        ecs_stack_allocator_pop_snapshot(*(_QWORD *)(v13 + 32));
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v11 + 344));
        return swift_release();
      }
    }
  }
  return result;
}

uint64_t *sub_1B1FE2290(uint64_t *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;

  if (a3)
  {
    *(_QWORD *)(a7 + 8 * (*result >> 6)) |= 1 << *result;
    if (a3 != 1)
    {
      *(_QWORD *)(a7 + 8 * (result[1] >> 6)) |= 1 << result[1];
      v9 = a3 - 2;
      if (a3 != 2)
      {
        v10 = result + 2;
        do
        {
          v11 = *v10++;
          *(_QWORD *)(a7 + 8 * (v11 >> 6)) |= 1 << v11;
          --v9;
        }
        while (v9);
      }
    }
  }
  if (a6 == 3 && a4 == 2 && !a5)
  {
    if (a3)
    {
      *(_QWORD *)(a9 + 8 * (*result >> 6)) |= 1 << *result;
      if (a3 != 1)
      {
        *(_QWORD *)(a9 + 8 * (result[1] >> 6)) |= 1 << result[1];
        v12 = a3 - 2;
        if (a3 != 2)
        {
          v13 = result + 2;
          do
          {
            v14 = *v13++;
            *(_QWORD *)(a9 + 8 * (v14 >> 6)) |= 1 << v14;
            --v12;
          }
          while (v12);
        }
      }
    }
  }
  else if (a3)
  {
    *(_QWORD *)(a9 + 8 * (*result >> 6)) &= (-1 << *result) - 1;
    if (a3 != 1)
    {
      *(_QWORD *)(a9 + 8 * (result[1] >> 6)) &= (-1 << result[1]) - 1;
      v15 = a3 - 2;
      if (a3 != 2)
      {
        v16 = result + 2;
        do
        {
          v17 = *v16++;
          *(_QWORD *)(a9 + 8 * (v17 >> 6)) &= (-1 << v17) - 1;
          --v15;
        }
        while (v15);
      }
    }
  }
  return result;
}

uint64_t sub_1B1FE243C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (result != a2)
  {
    v8 = result + 1;
    *(_QWORD *)(a6 + 8 * (result >> 6)) |= 1 << result;
    if (result + 1 != a2)
    {
      do
      {
        *(_QWORD *)(a6 + 8 * (v8 >> 6)) |= 1 << v8;
        ++v8;
      }
      while (a2 != v8);
    }
  }
  if (a5 == 3 && a3 == 2 && !a4)
  {
    if (result != a2)
    {
      v9 = result + 1;
      *(_QWORD *)(a8 + 8 * (result >> 6)) |= 1 << result;
      if (result + 1 != a2)
      {
        do
        {
          *(_QWORD *)(a8 + 8 * (v9 >> 6)) |= 1 << v9;
          ++v9;
        }
        while (a2 != v9);
      }
    }
  }
  else if (result != a2)
  {
    v10 = result + 1;
    *(_QWORD *)(a8 + 8 * (result >> 6)) &= (-1 << result) - 1;
    if (result + 1 != a2)
    {
      do
      {
        *(_QWORD *)(a8 + 8 * (v10 >> 6)) &= (-1 << v10) - 1;
        ++v10;
      }
      while (a2 != v10);
    }
  }
  return result;
}

uint64_t sub_1B1FE2568(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD v18[4];

  if (*(_BYTE *)(result + 213) == 1)
  {
    v5 = *(_QWORD *)(a2 + 48);
    v6 = *(_QWORD *)(v5 + 16);
    if (v6)
    {
      v7 = (uint64_t *)(v5 + 56);
      while ((ValueMetadata *)*(v7 - 3) != &type metadata for PropagateDirtiness)
      {
        v7 += 5;
        if (!--v6)
          goto LABEL_6;
      }
      v8 = *v7;
    }
    else
    {
LABEL_6:
      v8 = 0;
    }
    v9 = *(_QWORD *)(a2 + 128);
    v10 = *(_BYTE *)(a2 + 184);
    v11 = swift_retain();
    if ((v10 & 1) != 0)
    {
      result = sub_1B2229688();
      __break(1u);
    }
    else
    {
      v12 = (unsigned int *)(v9 + v8 + 8 * a3);
      v13 = *(_DWORD *)(*(_QWORD *)(a2 + 168) + 4 * a3);
      v14 = *(unsigned int *)(*(_QWORD *)(v11 + OBJC_IVAR____TtC3VFX13EntityManager__entries) + 12 * (int)v13 + 8);
      result = swift_release();
      v15 = *v12;
      v16 = v12[1];
      if ((_DWORD)v15 != -1 || (_DWORD)v16 != 0)
        return sub_1B1B8A6C8(v18, v13 | (unint64_t)(v14 << 32), v15 | (v16 << 32));
    }
  }
  return result;
}

uint64_t sub_1B1FE26A8(uint64_t result, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD v21[4];

  if (*(_BYTE *)(result + 213) != 1)
    return result;
  v5 = a5;
  v8 = *(_QWORD *)(a2 + 48);
  v9 = *(_QWORD *)(v8 + 16);
  if (!v9)
  {
LABEL_6:
    if (!a5)
      return result;
    goto LABEL_9;
  }
  v10 = (uint64_t *)(v8 + 56);
  while ((ValueMetadata *)*(v10 - 3) != &type metadata for PropagateDirtiness)
  {
    v10 += 5;
    if (!--v9)
      goto LABEL_6;
  }
  v9 = *v10;
  if (a5)
  {
LABEL_9:
    v11 = *(_QWORD *)(a2 + 128) + v9;
    v12 = *(_QWORD *)(a2 + 16);
    while (1)
    {
      v14 = *a3++;
      v13 = v14;
      swift_retain();
      if (*(_BYTE *)(a2 + 184) == 1)
        break;
      v15 = *(_DWORD *)(*(_QWORD *)(a2 + 168) + 4 * v13);
      v16 = (unsigned int *)(v11 + 8 * v13);
      v17 = *(unsigned int *)(*(_QWORD *)(v12 + OBJC_IVAR____TtC3VFX13EntityManager__entries) + 12 * (int)v15 + 8);
      result = swift_release();
      v18 = *v16;
      v19 = v16[1];
      if ((_DWORD)v18 != -1 || (_DWORD)v19 != 0)
        result = sub_1B1B8A6C8(v21, v15 | (unint64_t)(v17 << 32), v18 | (v19 << 32));
      if (!--v5)
        return result;
    }
    result = sub_1B2229688();
    __break(1u);
  }
  return result;
}

uint64_t sub_1B1FE2814(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  unsigned int *i;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD v17[4];

  if (*(_BYTE *)(result + 213) != 1)
    return result;
  v5 = a3;
  v7 = *(_QWORD *)(a2 + 48);
  v8 = *(_QWORD *)(v7 + 16);
  if (!v8)
  {
LABEL_6:
    if (a3 == a4)
      return result;
    goto LABEL_10;
  }
  v9 = (uint64_t *)(v7 + 56);
  while ((ValueMetadata *)*(v9 - 3) != &type metadata for PropagateDirtiness)
  {
    v9 += 5;
    if (!--v8)
      goto LABEL_6;
  }
  v8 = *v9;
  if (a3 != a4)
  {
LABEL_10:
    v10 = *(_QWORD *)(a2 + 16);
    for (i = (unsigned int *)(v8 + 8 * a3 + *(_QWORD *)(a2 + 128) + 4); ; i += 2)
    {
      swift_retain();
      if ((*(_BYTE *)(a2 + 184) & 1) != 0)
        break;
      v12 = *(_DWORD *)(*(_QWORD *)(a2 + 168) + 4 * v5);
      v13 = *(unsigned int *)(*(_QWORD *)(v10 + OBJC_IVAR____TtC3VFX13EntityManager__entries) + 12 * (int)v12 + 8);
      result = swift_release();
      v14 = *(i - 1);
      v15 = *i;
      if ((_DWORD)v14 != -1 || (_DWORD)v15 != 0)
        result = sub_1B1B8A6C8(v17, v12 | (unint64_t)(v13 << 32), v14 | (v15 << 32));
      if (a4 == ++v5)
        return result;
    }
    result = sub_1B2229688();
    __break(1u);
  }
  return result;
}

uint64_t sub_1B1FE298C(uint64_t result, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;

  v7 = result;
  if (a3 != 0xFFFFFFFFLL
    && a3 << 32 >= (uint64_t)0xFFFFFFFF00000001
    && (int)a3 < *(_QWORD *)(v4 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8))
  {
    v8 = *(_QWORD *)(v4 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
    if (HIDWORD(a3) == -1 || *(_DWORD *)(v8 + 12 * (int)a3 + 8) == HIDWORD(a3))
    {
      v9 = *(__int16 *)(v8 + 12 * (int)a3 + 4);
      v10 = *(_QWORD *)(a2 + 8);
      v11 = sub_1B1A11FDC(result);
      v20 = v9;
      if ((v12 & 1) != 0)
        v13 = 0;
      else
        v13 = v11 + sub_1B1F24AA4(v7) * v9;
      v14 = *(uint64_t (**)(uint64_t, uint64_t))(v10 + 48);
      swift_retain();
      if ((v14(v7, v10) & 1) != 0)
      {
        v19 = *(_QWORD *)(v4 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues);
        ecs_stack_allocator_push_snapshot(*(_QWORD *)(*(_QWORD *)v19 + 32));
        v15 = *(_QWORD *)(*(_QWORD *)v19 + 32);
        v16 = sub_1B1F24A98(v7);
        v17 = sub_1B1F24B84(v7);
        v18 = ecs_stack_allocator_allocate(v15, v16, v17);
        sub_1B1F24B20();
        a4(v13);
        sub_1B1D3B1D8(v20, (uint64_t)v18, v13, v7, a2);
        sub_1B1F24B64();
        ecs_stack_allocator_pop_snapshot(*(_QWORD *)(*(_QWORD *)v19 + 32));
      }
      else
      {
        a4(v13);
      }
      return swift_release();
    }
  }
  return result;
}

uint64_t sub_1B1FE2BA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;

  if (a3 == 0xFFFFFFFFLL)
    goto LABEL_15;
  if (a3 << 32 < (uint64_t)0xFFFFFFFF00000001)
    goto LABEL_15;
  if ((int)a3 >= *(_QWORD *)(a4 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8))
    goto LABEL_15;
  v5 = *(_QWORD *)(a4 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
  if (HIDWORD(a3) != -1 && *(_DWORD *)(v5 + 12 * (int)a3 + 8) != HIDWORD(a3))
    goto LABEL_15;
  v6 = (int *)(v5 + 12 * (int)a3);
  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 136) + 8 * *v6 + 32);
  v8 = *(_QWORD *)(v7 + 48);
  v9 = *(_QWORD *)(v8 + 16);
  if (!v9)
    goto LABEL_15;
  v10 = *((__int16 *)v6 + 2);
  v11 = (uint64_t *)(v8 + 56);
  while (*(v11 - 3) != a1)
  {
    v11 += 5;
    if (!--v9)
      goto LABEL_15;
  }
  v12 = *(_QWORD *)(v7 + 128);
  if (v12)
  {
    v14 = *(v11 - 1);
    v13 = *v11;
    if (v14 <= 1)
      v14 = 1;
    return sub_1B1FE4668(a1, a2, a3, v12 + v13 + v14 * v10, a4, a5);
  }
  else
  {
LABEL_15:
    sub_1B2229430();
    swift_bridgeObjectRelease();
    sub_1B1BC3C70();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    sub_1B222A210();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    result = sub_1B2229688();
    __break(1u);
  }
  return result;
}

uint64_t sub_1B1FE2D68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;

  if (a3 == 0xFFFFFFFFLL)
    goto LABEL_15;
  if (a3 << 32 < (uint64_t)0xFFFFFFFF00000001)
    goto LABEL_15;
  if ((int)a3 >= *(_QWORD *)(a4 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8))
    goto LABEL_15;
  v4 = *(_QWORD *)(a4 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
  if (HIDWORD(a3) != -1 && *(_DWORD *)(v4 + 12 * (int)a3 + 8) != HIDWORD(a3))
    goto LABEL_15;
  v5 = (int *)(v4 + 12 * (int)a3);
  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 136) + 8 * *v5 + 32);
  v7 = *(_QWORD *)(v6 + 48);
  v8 = *(_QWORD *)(v7 + 16);
  if (!v8)
    goto LABEL_15;
  v9 = *((__int16 *)v5 + 2);
  v10 = (uint64_t *)(v7 + 56);
  while (*(v10 - 3) != a1)
  {
    v10 += 5;
    if (!--v8)
      goto LABEL_15;
  }
  v11 = *(_QWORD *)(v6 + 128);
  if (v11)
  {
    v13 = *(v10 - 1);
    v12 = *v10;
    if (v13 <= 1)
      v13 = 1;
    return sub_1B1FE49C8(a1, a2, a3, v11 + v12 + v13 * v9, a4);
  }
  else
  {
LABEL_15:
    sub_1B2229430();
    swift_bridgeObjectRelease();
    sub_1B1BC3C70();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    sub_1B222A210();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    result = sub_1B2229688();
    __break(1u);
  }
  return result;
}

uint64_t sub_1B1FE2F24(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *))
{
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;

  if (a3 == 0xFFFFFFFFLL)
    goto LABEL_15;
  if (a3 << 32 < (uint64_t)0xFFFFFFFF00000001)
    goto LABEL_15;
  if ((int)a3 >= *(_QWORD *)(v4 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8))
    goto LABEL_15;
  v5 = *(_QWORD *)(v4 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
  if (HIDWORD(a3) != -1 && *(_DWORD *)(v5 + 12 * (int)a3 + 8) != HIDWORD(a3))
    goto LABEL_15;
  v6 = (int *)(v5 + 12 * (int)a3);
  v7 = *(_QWORD *)(*(_QWORD *)(v4 + 136) + 8 * *v6 + 32);
  v8 = *(_QWORD *)(v7 + 48);
  v9 = *(_QWORD *)(v8 + 16);
  if (!v9)
    goto LABEL_15;
  v10 = *((__int16 *)v6 + 2);
  v11 = (uint64_t *)(v8 + 56);
  while (*(v11 - 3) != a1)
  {
    v11 += 5;
    if (!--v9)
      goto LABEL_15;
  }
  v12 = *(_QWORD *)(v7 + 128);
  if (v12)
  {
    v14 = *(v11 - 1);
    v13 = *v11;
    if (v14 <= 1)
      v14 = 1;
    return sub_1B1FE4CA0(a1, a2, a3, v12 + v13 + v14 * v10, a4);
  }
  else
  {
LABEL_15:
    sub_1B2229430();
    swift_bridgeObjectRelease();
    sub_1B1BC3C70();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    sub_1B222A210();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    result = sub_1B2229688();
    __break(1u);
  }
  return result;
}

uint64_t *sub_1B1FE30E4(_QWORD *a1, uint64_t a2, double a3, float a4)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v7;
  uint64_t v8;
  uint64_t *result;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unsigned int *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  os_unfair_lock_s *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  float *v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  int32x4_t *v35;
  unint64_t v36;
  uint64_t v37;
  _DWORD *v38;
  int32x4_t v39;
  _QWORD *v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50[12];
  _OWORD v51[2];
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;
  _OWORD v61[2];
  uint64_t v62;
  _OWORD v63[2];
  uint64_t v64;
  _BYTE v65[48];
  _QWORD *v66;

  v5 = v4;
  v7 = *(_OWORD *)(a2 + 104);
  v63[0] = *(_OWORD *)(a2 + 88);
  v63[1] = v7;
  v64 = *(_QWORD *)(a2 + 120);
  v8 = swift_retain();
  sub_1B1E8FCE4(v8, (uint64_t)v63, 0x200000000, v50);
  swift_release();
  result = (uint64_t *)sub_1B1A18378((uint64_t)v50, (uint64_t)v51, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (*(_QWORD *)&v51[0])
  {
    v58 = v51[0];
    v59 = v51[1];
    v60 = v52;
    if (v57 >= 1)
    {
      v45 = v54;
      if (v54)
      {
        v10 = 0;
        v44 = v53;
        v11 = v56[4];
        v12 = *(unsigned __int8 *)(v55 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
        v42 = (uint64_t)(v56 + 6);
        v66 = v56;
        v41 = v56 + 8;
        v39 = vdupq_lane_s32(*(int32x2_t *)&a3, 0);
        v43 = v12;
        do
        {
          v13 = (unsigned int *)(v44 + 48 * v10);
          v47 = *v13;
          v48 = v13[1];
          v49 = v5;
          v14 = (uint64_t *)*((_QWORD *)v13 + 2);
          v15 = *((_QWORD *)v13 + 3);
          v16 = *((_QWORD *)v13 + 4);
          v17 = *((_QWORD *)v13 + 5);
          if (v12)
          {
            v18 = *(os_unfair_lock_s **)(v17 + 376);
            swift_retain();
            os_unfair_lock_lock(v18);
            os_unfair_lock_lock(*(os_unfair_lock_t *)(v17 + 344));
          }
          else
          {
            swift_retain();
          }
          ecs_stack_allocator_push_snapshot(v11);
          sub_1B1A18378(v42, (uint64_t)v65, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
          v19 = v66;
          v20 = v66[4];
          v21 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v17 + 40) + 16) + 32) + 16) + 1;
          swift_retain();
          v19[6] = ecs_stack_allocator_allocate(v20, 48 * v21, 8);
          v19[7] = v21;
          v41[1] = 0;
          v41[2] = 0;
          *v41 = 0;
          swift_release();
          v22 = sub_1B1A12038((uint64_t)&type metadata for ParticleTextureFrame, (uint64_t)&off_1E639E080, v14, v15, v16, (uint64_t)v19);
          if (v22)
          {
            if (*(float *)&a3 == a4)
            {
              if ((_DWORD)v47 == (_DWORD)v48)
                goto LABEL_17;
              v23 = v48 - v47;
              v12 = v43;
              if ((unint64_t)(v48 - v47) < 8)
              {
                v24 = v47;
                v25 = v49;
LABEL_26:
                v37 = v48 - v24;
                v38 = (_DWORD *)(v22 + 4 * v24);
                do
                {
                  *v38++ = LODWORD(a3);
                  --v37;
                }
                while (v37);
                goto LABEL_28;
              }
              v24 = (v23 & 0xFFFFFFFFFFFFFFF8) + v47;
              v35 = (int32x4_t *)(v22 + 4 * v47 + 16);
              v36 = v23 & 0xFFFFFFFFFFFFFFF8;
              do
              {
                v35[-1] = v39;
                *v35 = v39;
                v35 += 2;
                v36 -= 8;
              }
              while (v36);
              v25 = v49;
              if (v23 != (v23 & 0xFFFFFFFFFFFFFFF8))
                goto LABEL_26;
            }
            else
            {
              if ((_DWORD)v47 == (_DWORD)v48)
              {
LABEL_17:
                v25 = v49;
                v12 = v43;
                goto LABEL_28;
              }
              v26 = a1[3];
              v27 = a1[4];
              v28 = v48 - v47;
              v29 = (float *)(v22 + 4 * v47);
              v30 = a1[1];
              v31 = a1[2];
              v12 = v43;
              do
              {
                v32 = 9 * ((((unint64_t)(5 * v31) >> 32) >> 25) | (640 * v31));
                v33 = v30 ^ v26;
                v34 = v31 ^ v27;
                v26 ^= v30 ^ (v31 << 17);
                v31 ^= v33;
                v30 ^= v34;
                v27 = __ROR8__(v34, 19);
                *v29++ = (float)((float)(a4 - *(float *)&a3)
                               * (float)((float)(*(_QWORD *)&v32 & 0xFFFFFFLL) * 0.000000059605))
                       + *(float *)&a3;
                --v28;
              }
              while (v28);
              a1[1] = v30;
              a1[2] = v31;
              a1[3] = v26;
              a1[4] = v27;
              v25 = v49;
            }
          }
          else if (*(float *)&a3 == a4)
          {
            v25 = v49;
            v12 = v43;
          }
          else
          {
            v25 = v49;
            v12 = v43;
            if ((_DWORD)v47 != (_DWORD)v48)
            {
              result = (uint64_t *)sub_1B2130F84();
              __break(1u);
              return result;
            }
          }
LABEL_28:
          v61[0] = v58;
          v61[1] = v59;
          v62 = v60;
          sub_1B1F05D48(v66, (unsigned __int16 **)v61, (uint64_t)v65);
          v5 = v25;
          sub_1B1F03804((char *)v17);
          ecs_stack_allocator_pop_snapshot(v11);
          if (v12)
          {
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v17 + 344));
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v17 + 376));
          }
          swift_release();
          ++v10;
        }
        while (v10 != v45);
      }
    }
    return sub_1B19ED748(v50);
  }
  return result;
}

uint64_t *sub_1B1FE34F4(_QWORD *a1, uint64_t a2, double a3, float a4)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v7;
  uint64_t v8;
  uint64_t *result;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unsigned int *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  os_unfair_lock_s *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  float *v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  int32x4_t *v35;
  unint64_t v36;
  uint64_t v37;
  _DWORD *v38;
  int32x4_t v39;
  _QWORD *v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50[12];
  _OWORD v51[2];
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;
  _OWORD v61[2];
  uint64_t v62;
  _OWORD v63[2];
  uint64_t v64;
  _BYTE v65[48];
  _QWORD *v66;

  v5 = v4;
  v7 = *(_OWORD *)(a2 + 104);
  v63[0] = *(_OWORD *)(a2 + 88);
  v63[1] = v7;
  v64 = *(_QWORD *)(a2 + 120);
  v8 = swift_retain();
  sub_1B1E8FCE4(v8, (uint64_t)v63, 0x200000000, v50);
  swift_release();
  result = (uint64_t *)sub_1B1A18378((uint64_t)v50, (uint64_t)v51, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (*(_QWORD *)&v51[0])
  {
    v58 = v51[0];
    v59 = v51[1];
    v60 = v52;
    if (v57 >= 1)
    {
      v45 = v54;
      if (v54)
      {
        v10 = 0;
        v44 = v53;
        v11 = v56[4];
        v12 = *(unsigned __int8 *)(v55 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
        v42 = (uint64_t)(v56 + 6);
        v66 = v56;
        v41 = v56 + 8;
        v39 = vdupq_lane_s32(*(int32x2_t *)&a3, 0);
        v43 = v12;
        do
        {
          v13 = (unsigned int *)(v44 + 48 * v10);
          v47 = *v13;
          v48 = v13[1];
          v49 = v5;
          v14 = (uint64_t *)*((_QWORD *)v13 + 2);
          v15 = *((_QWORD *)v13 + 3);
          v16 = *((_QWORD *)v13 + 4);
          v17 = *((_QWORD *)v13 + 5);
          if (v12)
          {
            v18 = *(os_unfair_lock_s **)(v17 + 376);
            swift_retain();
            os_unfair_lock_lock(v18);
            os_unfair_lock_lock(*(os_unfair_lock_t *)(v17 + 344));
          }
          else
          {
            swift_retain();
          }
          ecs_stack_allocator_push_snapshot(v11);
          sub_1B1A18378(v42, (uint64_t)v65, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
          v19 = v66;
          v20 = v66[4];
          v21 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v17 + 40) + 16) + 32) + 16) + 1;
          swift_retain();
          v19[6] = ecs_stack_allocator_allocate(v20, 48 * v21, 8);
          v19[7] = v21;
          v41[1] = 0;
          v41[2] = 0;
          *v41 = 0;
          swift_release();
          v22 = sub_1B1A12038((uint64_t)&type metadata for ParticleAngleVelocity, (uint64_t)&off_1E63A3E30, v14, v15, v16, (uint64_t)v19);
          if (v22)
          {
            if (*(float *)&a3 == a4)
            {
              if ((_DWORD)v47 == (_DWORD)v48)
                goto LABEL_17;
              v23 = v48 - v47;
              v12 = v43;
              if ((unint64_t)(v48 - v47) < 8)
              {
                v24 = v47;
                v25 = v49;
LABEL_26:
                v37 = v48 - v24;
                v38 = (_DWORD *)(v22 + 4 * v24);
                do
                {
                  *v38++ = LODWORD(a3);
                  --v37;
                }
                while (v37);
                goto LABEL_28;
              }
              v24 = (v23 & 0xFFFFFFFFFFFFFFF8) + v47;
              v35 = (int32x4_t *)(v22 + 4 * v47 + 16);
              v36 = v23 & 0xFFFFFFFFFFFFFFF8;
              do
              {
                v35[-1] = v39;
                *v35 = v39;
                v35 += 2;
                v36 -= 8;
              }
              while (v36);
              v25 = v49;
              if (v23 != (v23 & 0xFFFFFFFFFFFFFFF8))
                goto LABEL_26;
            }
            else
            {
              if ((_DWORD)v47 == (_DWORD)v48)
              {
LABEL_17:
                v25 = v49;
                v12 = v43;
                goto LABEL_28;
              }
              v26 = a1[3];
              v27 = a1[4];
              v28 = v48 - v47;
              v29 = (float *)(v22 + 4 * v47);
              v30 = a1[1];
              v31 = a1[2];
              v12 = v43;
              do
              {
                v32 = 9 * ((((unint64_t)(5 * v31) >> 32) >> 25) | (640 * v31));
                v33 = v30 ^ v26;
                v34 = v31 ^ v27;
                v26 ^= v30 ^ (v31 << 17);
                v31 ^= v33;
                v30 ^= v34;
                v27 = __ROR8__(v34, 19);
                *v29++ = (float)((float)(a4 - *(float *)&a3)
                               * (float)((float)(*(_QWORD *)&v32 & 0xFFFFFFLL) * 0.000000059605))
                       + *(float *)&a3;
                --v28;
              }
              while (v28);
              a1[1] = v30;
              a1[2] = v31;
              a1[3] = v26;
              a1[4] = v27;
              v25 = v49;
            }
          }
          else if (*(float *)&a3 == a4)
          {
            v25 = v49;
            v12 = v43;
          }
          else
          {
            v25 = v49;
            v12 = v43;
            if ((_DWORD)v47 != (_DWORD)v48)
            {
              result = (uint64_t *)sub_1B2130F84();
              __break(1u);
              return result;
            }
          }
LABEL_28:
          v61[0] = v58;
          v61[1] = v59;
          v62 = v60;
          sub_1B1F05D48(v66, (unsigned __int16 **)v61, (uint64_t)v65);
          v5 = v25;
          sub_1B1F03804((char *)v17);
          ecs_stack_allocator_pop_snapshot(v11);
          if (v12)
          {
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v17 + 344));
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v17 + 376));
          }
          swift_release();
          ++v10;
        }
        while (v10 != v45);
      }
    }
    return sub_1B19ED748(v50);
  }
  return result;
}

uint64_t *sub_1B1FE3904(_QWORD *a1, uint64_t a2, double a3, float a4)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v7;
  uint64_t v8;
  uint64_t *result;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unsigned int *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  os_unfair_lock_s *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  float *v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  int32x4_t *v35;
  unint64_t v36;
  uint64_t v37;
  _DWORD *v38;
  int32x4_t v39;
  _QWORD *v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50[12];
  _OWORD v51[2];
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;
  _OWORD v61[2];
  uint64_t v62;
  _OWORD v63[2];
  uint64_t v64;
  _BYTE v65[48];
  _QWORD *v66;

  v5 = v4;
  v7 = *(_OWORD *)(a2 + 104);
  v63[0] = *(_OWORD *)(a2 + 88);
  v63[1] = v7;
  v64 = *(_QWORD *)(a2 + 120);
  v8 = swift_retain();
  sub_1B1E8FCE4(v8, (uint64_t)v63, 0x200000000, v50);
  swift_release();
  result = (uint64_t *)sub_1B1A18378((uint64_t)v50, (uint64_t)v51, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (*(_QWORD *)&v51[0])
  {
    v58 = v51[0];
    v59 = v51[1];
    v60 = v52;
    if (v57 >= 1)
    {
      v45 = v54;
      if (v54)
      {
        v10 = 0;
        v44 = v53;
        v11 = v56[4];
        v12 = *(unsigned __int8 *)(v55 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
        v42 = (uint64_t)(v56 + 6);
        v66 = v56;
        v41 = v56 + 8;
        v39 = vdupq_lane_s32(*(int32x2_t *)&a3, 0);
        v43 = v12;
        do
        {
          v13 = (unsigned int *)(v44 + 48 * v10);
          v47 = *v13;
          v48 = v13[1];
          v49 = v5;
          v14 = (uint64_t *)*((_QWORD *)v13 + 2);
          v15 = *((_QWORD *)v13 + 3);
          v16 = *((_QWORD *)v13 + 4);
          v17 = *((_QWORD *)v13 + 5);
          if (v12)
          {
            v18 = *(os_unfair_lock_s **)(v17 + 376);
            swift_retain();
            os_unfair_lock_lock(v18);
            os_unfair_lock_lock(*(os_unfair_lock_t *)(v17 + 344));
          }
          else
          {
            swift_retain();
          }
          ecs_stack_allocator_push_snapshot(v11);
          sub_1B1A18378(v42, (uint64_t)v65, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
          v19 = v66;
          v20 = v66[4];
          v21 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v17 + 40) + 16) + 32) + 16) + 1;
          swift_retain();
          v19[6] = ecs_stack_allocator_allocate(v20, 48 * v21, 8);
          v19[7] = v21;
          v41[1] = 0;
          v41[2] = 0;
          *v41 = 0;
          swift_release();
          v22 = sub_1B1A12038((uint64_t)&type metadata for ParticleAngle, (uint64_t)&off_1E637BD88, v14, v15, v16, (uint64_t)v19);
          if (v22)
          {
            if (*(float *)&a3 == a4)
            {
              if ((_DWORD)v47 == (_DWORD)v48)
                goto LABEL_17;
              v23 = v48 - v47;
              v12 = v43;
              if ((unint64_t)(v48 - v47) < 8)
              {
                v24 = v47;
                v25 = v49;
LABEL_26:
                v37 = v48 - v24;
                v38 = (_DWORD *)(v22 + 4 * v24);
                do
                {
                  *v38++ = LODWORD(a3);
                  --v37;
                }
                while (v37);
                goto LABEL_28;
              }
              v24 = (v23 & 0xFFFFFFFFFFFFFFF8) + v47;
              v35 = (int32x4_t *)(v22 + 4 * v47 + 16);
              v36 = v23 & 0xFFFFFFFFFFFFFFF8;
              do
              {
                v35[-1] = v39;
                *v35 = v39;
                v35 += 2;
                v36 -= 8;
              }
              while (v36);
              v25 = v49;
              if (v23 != (v23 & 0xFFFFFFFFFFFFFFF8))
                goto LABEL_26;
            }
            else
            {
              if ((_DWORD)v47 == (_DWORD)v48)
              {
LABEL_17:
                v25 = v49;
                v12 = v43;
                goto LABEL_28;
              }
              v26 = a1[3];
              v27 = a1[4];
              v28 = v48 - v47;
              v29 = (float *)(v22 + 4 * v47);
              v30 = a1[1];
              v31 = a1[2];
              v12 = v43;
              do
              {
                v32 = 9 * ((((unint64_t)(5 * v31) >> 32) >> 25) | (640 * v31));
                v33 = v30 ^ v26;
                v34 = v31 ^ v27;
                v26 ^= v30 ^ (v31 << 17);
                v31 ^= v33;
                v30 ^= v34;
                v27 = __ROR8__(v34, 19);
                *v29++ = (float)((float)(a4 - *(float *)&a3)
                               * (float)((float)(*(_QWORD *)&v32 & 0xFFFFFFLL) * 0.000000059605))
                       + *(float *)&a3;
                --v28;
              }
              while (v28);
              a1[1] = v30;
              a1[2] = v31;
              a1[3] = v26;
              a1[4] = v27;
              v25 = v49;
            }
          }
          else if (*(float *)&a3 == a4)
          {
            v25 = v49;
            v12 = v43;
          }
          else
          {
            v25 = v49;
            v12 = v43;
            if ((_DWORD)v47 != (_DWORD)v48)
            {
              result = (uint64_t *)sub_1B2130F84();
              __break(1u);
              return result;
            }
          }
LABEL_28:
          v61[0] = v58;
          v61[1] = v59;
          v62 = v60;
          sub_1B1F05D48(v66, (unsigned __int16 **)v61, (uint64_t)v65);
          v5 = v25;
          sub_1B1F03804((char *)v17);
          ecs_stack_allocator_pop_snapshot(v11);
          if (v12)
          {
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v17 + 344));
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v17 + 376));
          }
          swift_release();
          ++v10;
        }
        while (v10 != v45);
      }
    }
    return sub_1B19ED748(v50);
  }
  return result;
}

uint64_t sub_1B1FE3D14(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  if (a1 != 0xFFFFFFFFLL
    && a1 << 32 >= (uint64_t)0xFFFFFFFF00000001
    && (int)a1 < *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8)
    && ((v3 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries), HIDWORD(a1) == -1)
     || *(_DWORD *)(v3 + 12 * (int)a1 + 8) == HIDWORD(a1)))
  {
    return sub_1B1FF3120(*(_QWORD *)(*(_QWORD *)(a2 + 136) + 8 * *(int *)(v3 + 12 * (int)a1) + 32), *(_WORD *)(v3 + 12 * (int)a1 + 4), 48, a2, a1, a3) & 1;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_1B1FE3DBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v9;

  if (!sub_1B1E36538((uint64_t)&type metadata for TextureLoadingOptions))
  {
    v9 = ecs_stack_allocator_allocate(*(_QWORD *)(a1 + 32), 8, 8);
    *v9 = a3;
    sub_1B1A11C8C((uint64_t)&type metadata for TextureLoadingOptions, (uint64_t)&off_1E63A6E90, v9, 1, 1);
  }
  return sub_1B1FD5BE0(a5, a4);
}

uint64_t sub_1B1FE3E7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(_QWORD, _QWORD, uint64_t))
{
  uint64_t *v11;

  if (!sub_1B1E36538((uint64_t)&type metadata for TextureLoadingOptions))
  {
    v11 = ecs_stack_allocator_allocate(*(_QWORD *)(a1 + 32), 8, 8);
    *v11 = a3;
    sub_1B1A11C8C((uint64_t)&type metadata for TextureLoadingOptions, (uint64_t)&off_1E63A6E90, v11, 1, 1);
  }
  return sub_1B1FD5D78(a5, a4, a6);
}

uint64_t sub_1B1FE3F44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7)
{
  uint64_t *v13;

  if (!sub_1B1E36538((uint64_t)&type metadata for ParticleSpawnState))
  {
    v13 = ecs_stack_allocator_allocate(*(_QWORD *)(a1 + 32), 8, 8);
    *v13 = a3;
    sub_1B1A11C8C((uint64_t)&type metadata for ParticleSpawnState, (uint64_t)&off_1E6394EF0, v13, 1, 1);
  }
  return sub_1B1FD62B8(a5, a4, a6, a7);
}

uint64_t sub_1B1FE401C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  uint64_t *v11;

  if (!sub_1B1E36538((uint64_t)&type metadata for ForceField))
  {
    v11 = ecs_stack_allocator_allocate(*(_QWORD *)(a1 + 32), 8, 8);
    *v11 = a3;
    sub_1B1A11C8C((uint64_t)&type metadata for ForceField, (uint64_t)&off_1E636DA50, v11, 1, 1);
  }
  return sub_1B1FD60CC(a5, a4, a6);
}

uint64_t sub_1B1FE40E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t *v11;

  if (!sub_1B1E36538((uint64_t)&type metadata for PropagateDirtiness))
  {
    v11 = ecs_stack_allocator_allocate(*(_QWORD *)(a1 + 32), 8, 8);
    *v11 = a3;
    sub_1B1A11C8C((uint64_t)&type metadata for PropagateDirtiness, (uint64_t)&off_1E6395A98, v11, 1, 1);
  }
  return sub_1B1FD67CC(a5, a4, a6);
}

uint64_t sub_1B1FE41AC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v6 = *(_QWORD *)(a1 + 48);
  v7 = *(_QWORD *)(v6 + 16);
  if (v7)
  {
    v8 = (_QWORD *)(v6 + 56);
    while ((ValueMetadata *)*(v8 - 3) != &type metadata for Bindings)
    {
      v8 += 5;
      if (!--v7)
        goto LABEL_5;
    }
    sub_1B1CBAFB8(a4, a5, *(_QWORD *)(*(_QWORD *)(a1 + 128) + *v8 + (a2 << 16 >> 48) * a3), (uint64_t *)a6);
  }
  else
  {
LABEL_5:
    *(_OWORD *)a6 = 0u;
    *(_OWORD *)(a6 + 16) = 0u;
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B1FE4244@<X0>(uint64_t a1@<X0>, uint64_t a2@<X5>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(v5 + 16);
  if (v6)
  {
    v7 = v5 + 56;
    while (*(_QWORD *)(v7 - 24) != a2)
    {
      v7 += 40;
      if (!--v6)
        goto LABEL_5;
    }
    sub_1B22291E4();
    v8 = 0;
  }
  else
  {
LABEL_5:
    v8 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 56))(a3, v8, 1, a2);
}

uint64_t sub_1B1FE42F0@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;

  v6 = *(_QWORD *)(result + 48);
  v7 = *(_QWORD *)(v6 + 16);
  if (v7)
  {
    v9 = v6 + 56;
    while (*(_QWORD *)(v9 - 24) != a2)
    {
      v9 += 40;
      if (!--v7)
        goto LABEL_5;
    }
    v12 = v9 - 8;
    v11 = *(_QWORD *)(v9 - 8);
    v10 = *(_QWORD *)(v12 + 8);
    if (v11 <= 1)
      v11 = 1;
    v13 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a5 + 136) + 8 * (int)a4 + 32) + 128) + v10 + v11 * (a4 << 16 >> 48);
    *(_QWORD *)(a6 + 24) = a2;
    *(_QWORD *)(a6 + 32) = a3;
    v14 = sub_1B1A137F4((uint64_t *)a6);
    return sub_1B1F28148(v13, a2, (uint64_t)v14);
  }
  else
  {
LABEL_5:
    *(_QWORD *)(a6 + 32) = 0;
    *(_OWORD *)a6 = 0u;
    *(_OWORD *)(a6 + 16) = 0u;
  }
  return result;
}

uint64_t sub_1B1FE43A4@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X5>, _QWORD *a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(_QWORD *)(result + 48);
  v6 = *(_QWORD *)(v5 + 16);
  if (v6)
  {
    v7 = v5 + 56;
    while (*(_QWORD *)(v7 - 24) != a2)
    {
      v7 += 40;
      if (!--v6)
        goto LABEL_5;
    }
    v10 = v7 - 8;
    v9 = *(_QWORD *)(v7 - 8);
    v8 = *(_QWORD *)(v10 + 8);
    if (v9 <= 1)
      v9 = 1;
    *a5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 136) + 8 * (int)a3 + 32) + 128) + v8 + v9 * (a3 << 16 >> 48);
  }
  else
  {
LABEL_5:
    *a5 = v6;
  }
  return result;
}

void sub_1B1FE4408(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unint64_t v15;

  v15 = HIDWORD(a2);
  os_unfair_lock_lock(*(os_unfair_lock_t *)(a1 + 344));
  sub_1B1FED6D8(a1, v15, a4, a5, a6, a7, a8);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(a1 + 344));
  if (v8)
    __break(1u);
}

void sub_1B1FE44A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(char *), uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  __n128 v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE *v35;

  v13 = *(_QWORD *)(a9 - 8);
  v19.n128_f64[0] = MEMORY[0x1E0C80A78](a1, a2);
  v21 = (char *)&v31 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = *(_QWORD *)(v22 + 48);
  v24 = *(_QWORD *)(v23 + 16);
  if (v24)
  {
    v25 = *(_QWORD *)(a10 + 8);
    v26 = (_QWORD *)(v23 + 56);
    while (*(v26 - 3) != a9)
    {
      v26 += 5;
      if (!--v24)
        goto LABEL_13;
    }
    v32 = a10;
    v33 = v17;
    v34 = v16;
    v35 = v18;
    v27 = *v26 + (v14 << 16 >> 48) * v15;
    if (((*(uint64_t (**)(uint64_t, uint64_t, __n128))(v25 + 48))(a9, v25, v19) & 1) != 0)
    {
      sub_1B22291E4();
      a5(v21);
      if (v10)
      {
        (*(void (**)(char *, uint64_t))(v13 + 8))(v21, a9);
        return;
      }
      v28 = v34;
      v29 = sub_1B1DA61CC(v33) << 16 >> 48;
      v30 = **(_QWORD **)(v28 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues);
      swift_retain();
      sub_1B1A11EB4(v29, (uint64_t)v21, v30, a9, v32);
      swift_release();
      (*(void (**)(char *, uint64_t))(v13 + 8))(v21, a9);
    }
    else
    {
      a5((char *)(*(_QWORD *)(a1 + 128) + v27));
      if (v10)
        return;
    }
    LOBYTE(v24) = 1;
    v18 = v35;
  }
LABEL_13:
  *v18 = v24;
}

uint64_t sub_1B1FE4668(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  uint64_t v12;
  uint64_t result;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45[3];
  uint64_t v46;
  uint64_t v47;
  uint64_t v48[3];
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v12 = *(_QWORD *)(a2 + 8);
  result = sub_1B1F24A98(a1);
  if (result)
  {
    v51 = a3;
    v49 = a1;
    v50 = a2;
    v14 = sub_1B1A137F4(v48);
    sub_1B1F28148(a4, a1, (uint64_t)v14);
    if (((*(uint64_t (**)(uint64_t, uint64_t))(v12 + 48))(a1, v12) & 1) != 0)
    {
      v44 = *(_QWORD *)(a5 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues);
      ecs_stack_allocator_push_snapshot(*(_QWORD *)(*(_QWORD *)v44 + 32));
      v15 = *(_QWORD *)(*(_QWORD *)v44 + 32);
      v16 = sub_1B1F24A98(a1);
      v17 = sub_1B1F24B84(a1);
      v43 = ecs_stack_allocator_allocate(v15, v16, v17);
      sub_1B1F24B20();
      v18 = a6[3];
      v19 = sub_1B19FA070(a6, v18);
      v46 = v18;
      v20 = sub_1B1A137F4(v45);
      (*(void (**)(uint64_t *, _QWORD *, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v20, v19, v18);
      v21 = v49;
      v22 = v50;
      sub_1B19FC264((uint64_t)v48, v49);
      (*(void (**)(uint64_t *, uint64_t))(*(_QWORD *)(v22 + 8) + 104))(v45, v21);
      _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v45);
      v42 = a4;
      v23 = v51;
      v25 = sub_1B1FDFE64(a1, v24, v51);
      v26 = v49;
      v27 = v50;
      v28 = sub_1B19FA070(v48, v49);
      v46 = v26;
      v47 = *(_QWORD *)(v27 + 8);
      v29 = sub_1B1A137F4(v45);
      (*(void (**)(uint64_t *, _QWORD *, uint64_t))(*(_QWORD *)(v26 - 8) + 16))(v29, v28, v26);
      sub_1B1F28160((uint64_t)v45, v25, a1);
      _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v45);
      v30 = sub_1B1DA61CC(v23) << 16 >> 48;
      swift_retain();
      sub_1B1D3B1D8(v30, (uint64_t)v43, v42, a1, a2);
      swift_release();
      sub_1B1F24B64();
      ecs_stack_allocator_pop_snapshot(*(_QWORD *)(*(_QWORD *)v44 + 32));
    }
    else
    {
      v31 = a6[3];
      v32 = sub_1B19FA070(a6, v31);
      v46 = v31;
      v33 = sub_1B1A137F4(v45);
      (*(void (**)(uint64_t *, _QWORD *, uint64_t))(*(_QWORD *)(v31 - 8) + 16))(v33, v32, v31);
      v34 = v49;
      v35 = v50;
      sub_1B19FC264((uint64_t)v48, v49);
      (*(void (**)(uint64_t *, uint64_t))(*(_QWORD *)(v35 + 8) + 104))(v45, v34);
      _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v45);
      v37 = sub_1B1FDFE64(a1, v36, v51);
      v38 = v49;
      v39 = v50;
      v40 = sub_1B19FA070(v48, v49);
      v46 = v38;
      v47 = *(_QWORD *)(v39 + 8);
      v41 = sub_1B1A137F4(v45);
      (*(void (**)(uint64_t *, _QWORD *, uint64_t))(*(_QWORD *)(v38 - 8) + 16))(v41, v40, v38);
      sub_1B1F28160((uint64_t)v45, v37, a1);
      _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v45);
    }
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v48);
  }
  return result;
}

uint64_t sub_1B1FE49C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v11;
  uint64_t result;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t *v37;
  uint64_t v38[3];
  uint64_t v39;
  uint64_t v40;
  uint64_t v41[3];
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v11 = *(_QWORD *)(a2 + 8);
  result = sub_1B1F24A98(a1);
  if (result)
  {
    v42 = a1;
    v43 = a2;
    v13 = sub_1B1A137F4(v41);
    sub_1B1F28148(a4, a1, (uint64_t)v13);
    if (((*(uint64_t (**)(uint64_t, uint64_t))(v11 + 48))(a1, v11) & 1) != 0)
    {
      v37 = *(uint64_t **)(a5 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues);
      ecs_stack_allocator_push_snapshot(*(_QWORD *)(*v37 + 32));
      v14 = *v37;
      v44 = v5;
      v15 = *(_QWORD *)(v14 + 32);
      v16 = sub_1B1F24A98(a1);
      v17 = sub_1B1F24B84(a1);
      v36 = ecs_stack_allocator_allocate(v15, v16, v17);
      sub_1B1F24B20();
      v18 = v42;
      v19 = v43;
      sub_1B19FC264((uint64_t)v41, v42);
      (*(void (**)(uint64_t))(*(_QWORD *)(v19 + 8) + 120))(v18);
      v21 = sub_1B1FDFE64(a1, v20, a3);
      v35 = a3;
      v22 = v42;
      v23 = v43;
      v24 = sub_1B19FA070(v41, v42);
      v39 = v22;
      v40 = *(_QWORD *)(v23 + 8);
      v25 = sub_1B1A137F4(v38);
      (*(void (**)(uint64_t *, _QWORD *, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v25, v24, v22);
      sub_1B1F28160((uint64_t)v38, v21, a1);
      _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v38);
      v26 = sub_1B1DA61CC(v35) << 16 >> 48;
      swift_retain();
      sub_1B1D3B1D8(v26, (uint64_t)v36, a4, a1, a2);
      swift_release();
      sub_1B1F24B64();
      ecs_stack_allocator_pop_snapshot(*(_QWORD *)(*v37 + 32));
    }
    else
    {
      v27 = v42;
      v28 = v43;
      sub_1B19FC264((uint64_t)v41, v42);
      (*(void (**)(uint64_t))(*(_QWORD *)(v28 + 8) + 120))(v27);
      v30 = sub_1B1FDFE64(a1, v29, a3);
      v31 = v42;
      v32 = v43;
      v33 = sub_1B19FA070(v41, v42);
      v39 = v31;
      v40 = *(_QWORD *)(v32 + 8);
      v34 = sub_1B1A137F4(v38);
      (*(void (**)(uint64_t *, _QWORD *, uint64_t))(*(_QWORD *)(v31 - 8) + 16))(v34, v33, v31);
      sub_1B1F28160((uint64_t)v38, v30, a1);
      _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v38);
    }
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v41);
  }
  return result;
}

uint64_t sub_1B1FE4CA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t *))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v11;
  uint64_t result;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35[3];
  uint64_t v36;
  uint64_t v37;
  uint64_t v38[3];
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v41 = a3;
  v11 = *(_QWORD *)(a2 + 8);
  result = sub_1B1F24A98(a1);
  if (result)
  {
    v39 = a1;
    v40 = a2;
    v13 = sub_1B1A137F4(v38);
    sub_1B1F28148(a4, a1, (uint64_t)v13);
    if (((*(uint64_t (**)(uint64_t, uint64_t))(v11 + 48))(a1, v11) & 1) != 0)
    {
      v14 = *(_QWORD *)(v5 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues);
      ecs_stack_allocator_push_snapshot(*(_QWORD *)(*(_QWORD *)v14 + 32));
      v34 = v14;
      v15 = *(_QWORD *)(*(_QWORD *)v14 + 32);
      v16 = a4;
      v17 = sub_1B1F24A98(a1);
      v18 = sub_1B1F24B84(a1);
      v19 = ecs_stack_allocator_allocate(v15, v17, v18);
      sub_1B1F24B20();
      a5(v38);
      if (v6)
      {
        sub_1B1F24B64();
      }
      else
      {
        v27 = sub_1B1FDFE64(a1, v20, v41);
        v33 = (uint64_t)v19;
        v28 = v39;
        v29 = v40;
        v30 = sub_1B19FA070(v38, v39);
        v36 = v28;
        v37 = *(_QWORD *)(v29 + 8);
        v31 = sub_1B1A137F4(v35);
        (*(void (**)(uint64_t *, _QWORD *, uint64_t))(*(_QWORD *)(v28 - 8) + 16))(v31, v30, v28);
        sub_1B1F28160((uint64_t)v35, v27, a1);
        _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v35);
        v32 = sub_1B1DA61CC(v41) << 16 >> 48;
        swift_retain();
        sub_1B1D3B1D8(v32, v33, v16, a1, a2);
        swift_release();
        sub_1B1F24B64();
      }
      ecs_stack_allocator_pop_snapshot(*(_QWORD *)(*(_QWORD *)v34 + 32));
    }
    else
    {
      a5(v38);
      if (!v6)
      {
        v22 = sub_1B1FDFE64(a1, v21, v41);
        v23 = v39;
        v24 = v40;
        v25 = sub_1B19FA070(v38, v39);
        v36 = v23;
        v37 = *(_QWORD *)(v24 + 8);
        v26 = sub_1B1A137F4(v35);
        (*(void (**)(uint64_t *, _QWORD *, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v26, v25, v23);
        sub_1B1F28160((uint64_t)v35, v22, a1);
        _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v35);
      }
    }
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v38);
  }
  return result;
}

uint64_t sub_1B1FE4F9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_BYTE *), uint64_t a6)
{
  return sub_1B1FE501C(a1, a2, a3, a4, a5, a6, (unint64_t *)&qword_1ED4B9C40, (uint64_t)&protocol descriptor for ParticleDefaultRendererable, (void (*)(_OWORD *, _BYTE *))sub_1B1A02518, &qword_1ED4B9C50);
}

uint64_t sub_1B1FE4FDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_BYTE *), uint64_t a6)
{
  return sub_1B1FE501C(a1, a2, a3, a4, a5, a6, &qword_1ED4B9C58, (uint64_t)&protocol descriptor for ParticleComponentRequirement, (void (*)(_OWORD *, _BYTE *))sub_1B1A02518, &qword_1ED4B9C60);
}

uint64_t sub_1B1FE501C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_BYTE *), uint64_t a6, unint64_t *a7, uint64_t a8, void (*a9)(_OWORD *, _BYTE *), unint64_t *a10)
{
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  _OWORD v28[2];
  uint64_t v29;
  _BYTE v30[40];
  _BYTE v31[40];
  uint64_t v32[3];
  __int128 v33;
  uint64_t v34;

  result = *(_QWORD *)(*(_QWORD *)(a2 + 80) + 8 * (SHIDWORD(a3) >> 16) + 32);
  v12 = *(_QWORD *)(*(_QWORD *)(result + 16) + 32);
  v13 = *(_QWORD *)(v12 + 16);
  if (v13)
  {
    v34 = v12 + 32;
    v15 = a3 << 16 >> 48;
    swift_retain();
    swift_retain();
    v16 = 0;
    while (1)
    {
      v17 = *(_QWORD *)(a1 + 48);
      v18 = *(_QWORD *)(v17 + 16);
      if (!v18)
        break;
      v19 = *(_OWORD *)(v34 + 16 * v16++);
      v20 = v19;
      v21 = v17 + 56;
      while (*(_QWORD *)(v21 - 24) != (_QWORD)v19)
      {
        v21 += 40;
        if (!--v18)
          goto LABEL_16;
      }
      v24 = v21 - 8;
      v23 = *(_QWORD *)(v21 - 8);
      v22 = *(_QWORD *)(v24 + 8);
      if (v23 <= 1)
        v23 = 1;
      v25 = *(_QWORD *)(a1 + 128) + v22 + v23 * v15;
      v33 = v19;
      v26 = sub_1B1A137F4(v32);
      sub_1B1F28148(v25, v20, (uint64_t)v26);
      sub_1B19FA198((uint64_t)v32, (uint64_t)v30);
      sub_1B1AEC268(0, (unint64_t *)&qword_1ED4B8C70);
      sub_1B1AEC268(0, a7);
      if ((swift_dynamicCast() & 1) != 0)
      {
        a9(v28, v31);
        a5(v31);
        _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v31);
      }
      else
      {
        v29 = 0;
        memset(v28, 0, sizeof(v28));
        sub_1B1DCC200((uint64_t)v28, a10, a7);
      }
      _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v32);
      if (v16 == v13)
      {
        swift_release();
        return swift_release();
      }
    }
LABEL_16:
    result = sub_1B2229688();
    __break(1u);
  }
  return result;
}

uint64_t sub_1B1FE5258(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  _BYTE v33[88];
  uint64_t v34;
  uint64_t v35;
  __int128 v36[2];
  uint64_t v37;
  _QWORD v38[3];
  uint64_t v39;
  uint64_t v40;
  uint64_t v41[3];
  __int128 v42;
  uint64_t v43;

  result = *(_QWORD *)(*(_QWORD *)(a2 + 80) + 8 * (SHIDWORD(a3) >> 16) + 32);
  v7 = *(_QWORD *)(*(_QWORD *)(result + 16) + 32);
  v8 = *(_QWORD *)(v7 + 16);
  if (v8)
  {
    v43 = v7 + 32;
    v9 = a3 << 16 >> 48;
    swift_retain();
    swift_retain();
    v10 = 0;
    v11 = (unint64_t *)&unk_1ED4B9B88;
    v31 = a1;
    while (1)
    {
      v12 = *(_QWORD *)(a1 + 48);
      v13 = *(_QWORD *)(v12 + 16);
      if (!v13)
        break;
      v14 = v11;
      v15 = *(_OWORD *)(v43 + 16 * v10++);
      v16 = v15;
      v17 = v12 + 56;
      while (*(_QWORD *)(v17 - 24) != (_QWORD)v15)
      {
        v17 += 40;
        if (!--v13)
          goto LABEL_33;
      }
      v20 = v17 - 8;
      v19 = *(_QWORD *)(v17 - 8);
      v18 = *(_QWORD *)(v20 + 8);
      if (v19 <= 1)
        v19 = 1;
      v21 = *(_QWORD *)(a1 + 128) + v18 + v19 * v9;
      v42 = v15;
      v22 = sub_1B1A137F4(v41);
      sub_1B1F28148(v21, v16, (uint64_t)v22);
      sub_1B19FA198((uint64_t)v41, (uint64_t)v33);
      sub_1B1AEC268(0, (unint64_t *)&qword_1ED4B8C70);
      sub_1B1AEC268(0, v11);
      if ((swift_dynamicCast() & 1) != 0)
      {
        sub_1B1A02518(v36, (uint64_t)v38);
        v23 = v39;
        v24 = v40;
        sub_1B19FA070(v38, v39);
        v25 = (*(uint64_t (**)(uint64_t, uint64_t))(v24 + 64))(v23, v24);
        if ((v25 - 65) > 0x7Eu)
        {
          v27 = a5;
          if ((v25 & 0x80) != 0)
          {
            if (v25 <= 0xC0u)
              v26 = 0;
            else
              v26 = 1uLL >> -v25;
          }
          else
          {
            v26 = 1 << v25;
            if (v25 >= 0x40u)
              v26 = 0;
          }
        }
        else
        {
          v26 = 0;
          v27 = a5;
        }
        v11 = v14;
        v28 = *(_QWORD *)(v27 + 168);
        if ((v26 & ~v28) != 0)
          *(_QWORD *)(v27 + 168) = v28 | v26;
        sub_1B19FA198((uint64_t)v38, (uint64_t)v36);
        if ((swift_dynamicCast() & 1) != 0)
        {
          a1 = v31;
          if (v35 <= 1 && !v34)
          {
            v29 = *(_QWORD *)(v27 + 168);
            if ((v29 & 0x20) == 0)
              *(_QWORD *)(v27 + 168) = v29 | 0x20;
            v30 = v33[20];
            *(_BYTE *)(v27 + 184) = 1;
            *(_BYTE *)(v27 + 216) = v30;
          }
        }
        else
        {
          a1 = v31;
        }
        _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v38);
      }
      else
      {
        v37 = 0;
        memset(v36, 0, sizeof(v36));
        sub_1B1DCC200((uint64_t)v36, &qword_1ED4B9B90, v11);
      }
      _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v41);
      if (v10 == v8)
      {
        swift_release();
        return swift_release();
      }
    }
LABEL_33:
    result = sub_1B2229688();
    __break(1u);
  }
  return result;
}

uint64_t sub_1B1FE559C(uint64_t a1, __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *i;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  __int16 v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  _QWORD v18[3];
  char v19;
  __int128 v20;
  uint64_t v21;
  __int16 v22;

  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(v5 + 16);
  if (!v6)
    return 0;
  for (i = (_QWORD *)(v5 + 56); (ValueMetadata *)*(i - 3) != &type metadata for TextureLoadingOptions; i += 5)
  {
    if (!--v6)
      return 0;
  }
  v9 = *(_QWORD *)(a1 + 128) + *i + a2 * a3;
  v10 = *(_QWORD *)(v9 + 8);
  v11 = *(_QWORD *)(v9 + 16);
  v12 = *(_BYTE *)(v9 + 24);
  v17 = *(_OWORD *)(v9 + 32);
  v13 = *(_QWORD *)(v9 + 48);
  v14 = *(_WORD *)(v9 + 56);
  v15 = *(_QWORD *)v9 | 2;
  v16 = sub_1B1DA61CC(a5) << 16 >> 48;
  v18[0] = v15;
  v18[1] = v10;
  v18[2] = v11;
  v19 = v12;
  v20 = v17;
  v21 = v13;
  v22 = v14;
  swift_retain();
  sub_1B1FD97BC(v16, (uint64_t)v18);
  swift_release();
  return 1;
}

uint64_t sub_1B1FE56C8(uint64_t a1, __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *i;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  __int16 v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  _QWORD v18[3];
  char v19;
  __int128 v20;
  uint64_t v21;
  __int16 v22;

  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(v5 + 16);
  if (!v6)
    return 0;
  for (i = (_QWORD *)(v5 + 56); (ValueMetadata *)*(i - 3) != &type metadata for TextureLoadingOptions; i += 5)
  {
    if (!--v6)
      return 0;
  }
  v9 = *(_QWORD *)(a1 + 128) + *i + a2 * a3;
  v10 = *(_QWORD *)(v9 + 8);
  v11 = *(_QWORD *)(v9 + 16);
  v12 = *(_BYTE *)(v9 + 24);
  v17 = *(_OWORD *)(v9 + 32);
  v13 = *(_QWORD *)(v9 + 48);
  v14 = *(_WORD *)(v9 + 56);
  v15 = *(_QWORD *)v9 | 0x52;
  v16 = sub_1B1DA61CC(a5) << 16 >> 48;
  v18[0] = v15;
  v18[1] = v10;
  v18[2] = v11;
  v19 = v12;
  v20 = v17;
  v21 = v13;
  v22 = v14;
  swift_retain();
  sub_1B1FD97BC(v16, (uint64_t)v18);
  swift_release();
  return 1;
}

uint64_t sub_1B1FE57F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  ValueMetadata **i;
  uint64_t v7;
  _QWORD v8[3];
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int16 v13;

  v3 = *(_QWORD *)(a1 + 48);
  v4 = *(_QWORD *)(v3 + 16);
  if (!v4)
    return 0;
  for (i = (ValueMetadata **)(v3 + 32); *i != &type metadata for TextureLoadingOptions; i += 5)
  {
    if (!--v4)
      return 0;
  }
  v8[1] = 0;
  v8[2] = 0;
  v8[0] = 82;
  v9 = -2;
  v11 = 0;
  v12 = 0;
  v10 = 0;
  v13 = 768;
  v7 = sub_1B1DA61CC(a3) << 16 >> 48;
  swift_retain();
  sub_1B1FD97BC(v7, (uint64_t)v8);
  swift_release();
  return 1;
}

uint64_t sub_1B1FE58E0(uint64_t a1, __int16 a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *i;
  _DWORD *v8;
  int v9;
  int v10;

  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(v4 + 16);
  if (!v5)
    return 0;
  for (i = (_QWORD *)(v4 + 56); (ValueMetadata *)*(i - 3) != &type metadata for DirectionalLight; i += 5)
  {
    if (!--v5)
      return 0;
  }
  v8 = (_DWORD *)(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
  *v8 = *(_DWORD *)(a4 + OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_intensity);
  if ((*(_BYTE *)(a4 + OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_orthoScale + 4) & 1) != 0)
    return 1;
  if ((*(_BYTE *)(a4 + OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_zNear + 4) & 1) != 0)
    return 1;
  if ((*(_BYTE *)(a4 + OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_zFar + 4) & 1) == 0)
  {
    v9 = *(_DWORD *)(a4 + OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_zFar);
    v10 = *(_DWORD *)(a4 + OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_zNear);
    v8[1] = *(_DWORD *)(a4 + OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_orthoScale);
    v8[2] = v10;
    v8[3] = v9;
  }
  return 1;
}

uint64_t sub_1B1FE59BC(uint64_t a1, uint64_t a2, void *a3)
{
  return sub_1B1FE5EA4(a1, a2, a3, 16, (uint64_t (*)(_QWORD, _QWORD, uint64_t, void *))sub_1B1FE58E0);
}

uint64_t sub_1B1FE59F4(uint64_t a1, __int16 a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *i;
  _DWORD *v8;
  int v9;
  int v10;
  int v11;

  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(v4 + 16);
  if (!v5)
    return 0;
  for (i = (_QWORD *)(v4 + 56); (ValueMetadata *)*(i - 3) != &type metadata for PointLight; i += 5)
  {
    if (!--v5)
      return 0;
  }
  if ((*(_BYTE *)(a4 + OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_attenuationRadius + 4) & 1) != 0)
    return 1;
  if ((*(_BYTE *)(a4 + OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_zNear + 4) & 1) != 0)
    return 1;
  if ((*(_BYTE *)(a4 + OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_zFar + 4) & 1) == 0)
  {
    v8 = (_DWORD *)(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
    v9 = *(_DWORD *)(a4 + OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_attenuationRadius);
    v10 = *(_DWORD *)(a4 + OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_zFar);
    v11 = *(_DWORD *)(a4 + OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_zNear);
    *v8 = *(_DWORD *)(a4 + OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_intensity);
    v8[1] = v9;
    v8[2] = v11;
    v8[3] = v10;
  }
  return 1;
}

uint64_t sub_1B1FE5ACC(uint64_t a1, uint64_t a2, void *a3)
{
  return sub_1B1FE5EA4(a1, a2, a3, 16, (uint64_t (*)(_QWORD, _QWORD, uint64_t, void *))sub_1B1FE59F4);
}

float sub_1B1FE5B04(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v3;
  uint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  float result;

  if (a1 != 0xFFFFFFFFLL
    && a1 << 32 >= (uint64_t)0xFFFFFFFF00000001
    && (int)a1 < *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8))
  {
    v4 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
    if (HIDWORD(a1) == -1 || *(_DWORD *)(v4 + 12 * (int)a1 + 8) == HIDWORD(a1))
    {
      v5 = (int *)(v4 + 12 * (int)a1);
      v6 = *(_QWORD *)(*(_QWORD *)(a2 + 136) + 8 * *v5 + 32);
      v7 = *(_QWORD *)(v6 + 48);
      v8 = *(_QWORD *)(v7 + 16);
      if (v8)
      {
        v9 = *((__int16 *)v5 + 2);
        v10 = (_QWORD *)(v7 + 56);
        while ((ValueMetadata *)*(v10 - 3) != &type metadata for AmbientLight)
        {
          v10 += 5;
          if (!--v8)
            goto LABEL_10;
        }
        goto LABEL_12;
      }
LABEL_10:
      if (v3)
        return result;
    }
  }
  sub_1B2229430();
  sub_1B2228890();
  sub_1B1BC3C70();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  sub_1B2228890();
  sub_1B2228890();

  sub_1B2229688();
  __break(1u);
LABEL_12:
  result = *(float *)&a3[OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_intensity] * 0.0014641;
  *(float *)(*(_QWORD *)(v6 + 128) + *v10 + 4 * v9) = result;
  return result;
}

uint64_t sub_1B1FE5D08(uint64_t a1, __int16 a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *i;

  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(v4 + 16);
  if (!v5)
    return 0;
  for (i = (_QWORD *)(v4 + 56); (ValueMetadata *)*(i - 3) != &type metadata for SpotLight; i += 5)
  {
    if (!--v5)
      return 0;
  }
  sub_1B19EA350(*(_QWORD *)(a1 + 128) + *i + a2 * a3, a4);
  return 1;
}

uint64_t sub_1B1FE5D74(uint64_t a1, uint64_t a2, void *a3)
{
  return sub_1B1FE5EA4(a1, a2, a3, 24, (uint64_t (*)(_QWORD, _QWORD, uint64_t, void *))sub_1B1FE5D08);
}

uint64_t sub_1B1FE5DAC(uint64_t a1, __int16 a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *i;
  int v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(v4 + 16);
  if (!v5)
    return 0;
  for (i = (_QWORD *)(v4 + 56); (ValueMetadata *)*(i - 3) != &type metadata for RectAreaLight; i += 5)
  {
    if (!--v5)
      return 0;
  }
  if ((*(_BYTE *)(a4 + OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_extents + 8) & 1) != 0)
    return 1;
  v8 = *(unsigned __int8 *)(a4 + OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_doubleSided);
  if (v8 != 2)
  {
    v9 = *(_QWORD *)(a1 + 128) + *i + a2 * a3;
    v10 = *(_QWORD *)(a4 + OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_extents);
    *(_DWORD *)v9 = *(_DWORD *)(a4 + OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_intensity);
    *(_QWORD *)(v9 + 8) = v10;
    *(_BYTE *)(v9 + 16) = v8 & 1;
  }
  return 1;
}

uint64_t sub_1B1FE5E64(uint64_t a1, uint64_t a2, void *a3)
{
  return sub_1B1FE5EA4(a1, a2, a3, 24, (uint64_t (*)(_QWORD, _QWORD, uint64_t, void *))sub_1B1FE5DAC);
}

uint64_t sub_1B1FE5EA4(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t (*a5)(_QWORD, _QWORD, uint64_t, void *))
{
  uint64_t v5;
  uint64_t v7;
  uint64_t result;

  if (a1 == 0xFFFFFFFFLL
    || a1 << 32 < (uint64_t)0xFFFFFFFF00000001
    || (int)a1 >= *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8)
    || (v7 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries), HIDWORD(a1) != -1)
    && *(_DWORD *)(v7 + 12 * (int)a1 + 8) != HIDWORD(a1)
    || (result = a5(*(_QWORD *)(*(_QWORD *)(a2 + 136) + 8 * *(int *)(v7 + 12 * (int)a1) + 32), *(unsigned __int16 *)(v7 + 12 * (int)a1 + 4), a4, a3), !v5)&& (result & 1) == 0)
  {
    sub_1B2229430();
    sub_1B2228890();
    sub_1B1BC3C70();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    sub_1B2228890();
    sub_1B2228890();

    result = sub_1B2229688();
    __break(1u);
  }
  return result;
}

float sub_1B1FE6054(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v3;
  uint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  float result;

  if (a1 != 0xFFFFFFFFLL
    && a1 << 32 >= (uint64_t)0xFFFFFFFF00000001
    && (int)a1 < *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8))
  {
    v4 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
    if (HIDWORD(a1) == -1 || *(_DWORD *)(v4 + 12 * (int)a1 + 8) == HIDWORD(a1))
    {
      v5 = (int *)(v4 + 12 * (int)a1);
      v6 = *(_QWORD *)(*(_QWORD *)(a2 + 136) + 8 * *v5 + 32);
      v7 = *(_QWORD *)(v6 + 48);
      v8 = *(_QWORD *)(v7 + 16);
      if (v8)
      {
        v9 = *((__int16 *)v5 + 2);
        v10 = (_QWORD *)(v7 + 56);
        while ((ValueMetadata *)*(v10 - 3) != &type metadata for IBLGenerator)
        {
          v10 += 5;
          if (!--v8)
            goto LABEL_10;
        }
        goto LABEL_12;
      }
LABEL_10:
      if (v3)
        return result;
    }
  }
  sub_1B2229430();
  sub_1B2228890();
  sub_1B1BC3C70();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  sub_1B2228890();
  sub_1B2228890();

  sub_1B2229688();
  __break(1u);
LABEL_12:
  result = *(float *)&a3[OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_intensity];
  *(float *)(*(_QWORD *)(v6 + 128) + *v10 + 4 * v9) = result;
  return result;
}

uint64_t sub_1B1FE6248(uint64_t a1, __int16 a2, uint64_t a3, uint64_t a4, float a5)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *i;

  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(v5 + 16);
  if (!v6)
    return 0;
  for (i = (_QWORD *)(v5 + 56); (ValueMetadata *)*(i - 3) != &type metadata for Shadow; i += 5)
  {
    if (!--v6)
      return 0;
  }
  sub_1B19EA5AC(*(_QWORD *)(a1 + 128) + *i + a2 * a3, a4, a5);
  return 1;
}

uint64_t sub_1B1FE62B8(uint64_t a1, __int16 a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *i;

  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(v5 + 16);
  if (!v6)
    return 0;
  for (i = (_QWORD *)(v5 + 56); (ValueMetadata *)*(i - 3) != &type metadata for ParticleSpawnState; i += 5)
  {
    if (!--v6)
      return 0;
  }
  sub_1B1C7EFAC(*(_QWORD *)(a1 + 128) + *i + a2 * a3, a4, a5);
  return 1;
}

uint64_t sub_1B1FE6328(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  v4 = *(_QWORD *)(v2 + 48);
  v5 = *(_QWORD *)(v4 + 16);
  if (v5)
  {
    v6 = (uint64_t *)(v4 + 56);
    while ((ValueMetadata *)*(v6 - 3) != &type metadata for Children)
    {
      v6 += 5;
      if (!--v5)
        goto LABEL_7;
    }
    v5 = *v6;
  }
LABEL_7:
  v7 = v5 + 8 * a1;
  v8 = *(_QWORD *)(v2 + 128);
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v8 + v7) = a2;
  return result;
}

uint64_t sub_1B1FE63A4(uint64_t a1, __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5, _BYTE *a6)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *i;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;

  v6 = *(_QWORD *)(a1 + 48);
  v7 = *(_QWORD *)(v6 + 16);
  if (!v7)
    return 0;
  for (i = (_QWORD *)(v6 + 56); (ValueMetadata *)*(i - 3) != &type metadata for EmitterRuntime; i += 5)
  {
    if (!--v7)
      return 0;
  }
  v13 = *(_QWORD *)(a1 + 128) + *i + a2 * a3;
  v14 = sub_1B1DA5710(a4);
  v12 = 1;
  sub_1B1CCA31C(a4, v14 | ((HIDWORD(v14) & 1) << 32), a6, v13, a5, 1);
  return v12;
}

uint64_t sub_1B1FE6468(uint64_t a1, __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD *i;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  int *v27;
  uint64_t v28;
  __int16 v29;
  _OWORD v30[5];
  int v31;
  _OWORD v32[5];
  int v33;

  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(_QWORD *)(v8 + 16);
  if (!v9)
    return 0;
  for (i = (_QWORD *)(v8 + 56); (ValueMetadata *)*(i - 3) != &type metadata for EmitterDescription; i += 5)
  {
    if (!--v9)
      return 0;
  }
  v16 = *(_QWORD *)(a1 + 128) + *i + a2 * a3;
  v17 = *(_OWORD *)(v16 + 16);
  v32[0] = *(_OWORD *)v16;
  v32[1] = v17;
  v19 = *(_OWORD *)(v16 + 48);
  v18 = *(_OWORD *)(v16 + 64);
  v20 = *(_OWORD *)(v16 + 32);
  v33 = *(_DWORD *)(v16 + 80);
  v32[3] = v19;
  v32[4] = v18;
  v32[2] = v20;
  v21 = *(_OWORD *)(v16 + 16);
  v30[0] = *(_OWORD *)v16;
  v30[1] = v21;
  v22 = *(_OWORD *)(v16 + 32);
  v23 = *(_OWORD *)(v16 + 48);
  v24 = *(_OWORD *)(v16 + 64);
  v31 = *(_DWORD *)(v16 + 80);
  v30[3] = v23;
  v30[4] = v24;
  v30[2] = v22;
  if ((a7 != -1 || (_DWORD)a8)
    && (a7 & 0x80000000) == 0
    && *(_QWORD *)(a6 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8) > (int)a7
    && ((v25 = *(_QWORD *)(a6 + OBJC_IVAR____TtC3VFX13EntityManager__entries), (_DWORD)a8 == -1)
     || *(_DWORD *)(v25 + 12 * (int)a7 + 8) == (_DWORD)a8))
  {
    v27 = (int *)(v25 + 12 * (int)a7);
    v28 = *(_QWORD *)(*(_QWORD *)(a6 + 136) + 8 * *v27 + 32);
    v29 = *((_WORD *)v27 + 2);
    sub_1B1FE6BD4((uint64_t)v32);
    sub_1B1FE63A4(v28, v29, 656, a7 | (unint64_t)(a8 << 32), a6, v30);
  }
  else
  {
    sub_1B1FE6BD4((uint64_t)v32);
  }
  v26 = sub_1B1DA61CC(a5) << 16 >> 48;
  swift_retain();
  sub_1B1FDB188(v26, (uint64_t)v32);
  swift_release();
  sub_1B1EC55E8((uint64_t)v32);
  return 1;
}

uint64_t sub_1B1FE6654(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5)
{
  uint64_t v5;

  if (a1 != 0xFFFFFFFFLL
    && a1 << 32 >= (uint64_t)0xFFFFFFFF00000001
    && (int)a1 < *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8)
    && ((v5 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries), HIDWORD(a1) == -1)
     || *(_DWORD *)(v5 + 12 * (int)a1 + 8) == HIDWORD(a1)))
  {
    return sub_1B1FE6468(*(_QWORD *)(*(_QWORD *)(a2 + 136) + 8 * *(int *)(v5 + 12 * (int)a1) + 32), *(_WORD *)(v5 + 12 * (int)a1 + 4), 88, a2, a1, a3, a4, a5) & 1;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_1B1FE6704(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  v4 = *(_QWORD *)(v2 + 48);
  v5 = *(_QWORD *)(v4 + 16);
  if (v5)
  {
    v6 = (uint64_t *)(v4 + 56);
    while ((ValueMetadata *)*(v6 - 3) != &type metadata for TextureGPURuntime)
    {
      v6 += 5;
      if (!--v5)
        goto LABEL_7;
    }
    v5 = *v6;
  }
LABEL_7:
  v7 = v5 + 8 * a1;
  v8 = *(_QWORD *)(v2 + 128);
  swift_unknownObjectRetain();
  result = swift_unknownObjectRelease();
  *(_QWORD *)(v8 + v7) = a2;
  return result;
}

uint64_t sub_1B1FE6780(uint64_t a1, __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *i;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(v5 + 16);
  if (!v6)
    return 1;
  for (i = (_QWORD *)(v5 + 56); (ValueMetadata *)*(i - 3) != &type metadata for Bindings; i += 5)
  {
    if (!--v6)
      return 1;
  }
  v11 = *(_QWORD *)(*(_QWORD *)(a1 + 128) + *i + a2 * a3 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v12 = MEMORY[0x1B5E20D60](a4, a5);
  v16 = sub_1B1CBBB1C(v12, v13, v14, v15, v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v16;
}

uint64_t sub_1B1FE685C(uint64_t a1, __int16 a2, uint64_t a3, __n128 a4, __n128 a5, __n128 a6, __n128 a7)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD *i;
  __n128 *v11;

  v7 = *(_QWORD *)(a1 + 48);
  v8 = *(_QWORD *)(v7 + 16);
  if (!v8)
    return 0;
  for (i = (_QWORD *)(v7 + 56); (ValueMetadata *)*(i - 3) != &type metadata for ProjectionMatrix; i += 5)
  {
    if (!--v8)
      return 0;
  }
  v11 = (__n128 *)(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
  *v11 = a4;
  v11[1] = a5;
  v11[2] = a6;
  v11[3] = a7;
  return 1;
}

uint64_t sub_1B1FE68B8(uint64_t a1, __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t (*a9)(uint64_t, uint64_t))
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *i;
  uint64_t result;

  v10 = *(_QWORD *)(a1 + 48);
  v11 = *(_QWORD *)(v10 + 16);
  if (!v11)
    return 1;
  for (i = (_QWORD *)(v10 + 56); (ValueMetadata *)*(i - 3) != &type metadata for Bindings; i += 5)
  {
    if (!--v11)
      return 1;
  }
  result = sub_1B1F4A718(*(_QWORD *)(a1 + 128) + *i + a2 * a3, a4, a5, a6, a7, a8, a9);
  if (!v9)
    return 0;
  return result;
}

uint64_t sub_1B1FE6950(uint64_t a1, __int16 a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, char a7, uint64_t (*a8)(uint64_t, uint64_t), uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;
  uint64_t v14;
  _QWORD *i;

  v13 = *(_QWORD *)(a1 + 48);
  v14 = *(_QWORD *)(v13 + 16);
  if (!v14)
    return 0;
  for (i = (_QWORD *)(v13 + 56); (ValueMetadata *)*(i - 3) != &type metadata for Bindings; i += 5)
  {
    if (!--v14)
      return 0;
  }
  sub_1B1F4AB00((_BYTE *)(*(_QWORD *)(a1 + 128) + *i + a2 * a3), a4, a5 & 1, a6, a7 & 1, a8, a9, a10, a11, a12, a13);
  return 1;
}

uint64_t sub_1B1FE69F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B1FF0858(a1, a2, a3);
}

uint64_t sub_1B1FE6A04(uint64_t a1, __int16 a2, uint64_t a3, float32x4_t *a4, float32x4_t a5, float32x4_t a6, float32x4_t a7, float32x4_t a8, float32x4_t a9, float32x4_t a10, float32x4_t a11, float32x4_t a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t *i;
  uint64_t v16;
  uint64_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t *v22;

  v12 = *(_QWORD *)(a1 + 48);
  v13 = *(_QWORD *)(v12 + 16);
  if (!v13)
    return 0;
  for (i = (uint64_t *)(v12 + 56); (ValueMetadata *)*(i - 3) != &type metadata for WorldTransform; i += 5)
  {
    if (!--v13)
      return 0;
  }
  v16 = *i;
  v17 = *(_QWORD *)(a1 + 128);
  v18 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a5, a9.f32[0]), a6, *(float32x2_t *)a9.f32, 1), a7, a9, 2), a8, a9, 3);
  v19 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a5, a10.f32[0]), a6, *(float32x2_t *)a10.f32, 1), a7, a10, 2), a8, a10, 3);
  v20 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a5, a11.f32[0]), a6, *(float32x2_t *)a11.f32, 1), a7, a11, 2), a8, a11, 3);
  v21 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a5, a12.f32[0]), a6, *(float32x2_t *)a12.f32, 1), a7, a12, 2), a8, a12, 3);
  *a4 = v18;
  a4[1] = v19;
  a4[2] = v20;
  a4[3] = v21;
  v22 = (float32x4_t *)(v17 + v16 + a2 * a3);
  *v22 = v18;
  v22[1] = v19;
  v22[2] = v20;
  v22[3] = v21;
  return 1;
}

uint64_t sub_1B1FE6AA8(uint64_t a1, __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *i;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  __int16 v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  _QWORD v18[3];
  char v19;
  __int128 v20;
  uint64_t v21;
  __int16 v22;

  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(v5 + 16);
  if (!v6)
    return 0;
  for (i = (_QWORD *)(v5 + 56); (ValueMetadata *)*(i - 3) != &type metadata for TextureLoadingOptions; i += 5)
  {
    if (!--v6)
      return 0;
  }
  v9 = *(_QWORD *)(a1 + 128) + *i + a2 * a3;
  v10 = *(_QWORD *)(v9 + 8);
  v11 = *(_QWORD *)(v9 + 16);
  v12 = *(_BYTE *)(v9 + 24);
  v17 = *(_OWORD *)(v9 + 32);
  v13 = *(_QWORD *)(v9 + 48);
  v14 = *(_WORD *)(v9 + 56);
  v15 = *(_QWORD *)v9 | 1;
  v16 = sub_1B1DA61CC(a5) << 16 >> 48;
  v18[0] = v15;
  v18[1] = v10;
  v18[2] = v11;
  v19 = v12;
  v20 = v17;
  v21 = v13;
  v22 = v14;
  swift_retain();
  sub_1B1FD97BC(v16, (uint64_t)v18);
  swift_release();
  return 1;
}

uint64_t sub_1B1FE6BD4(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1B1FE6C24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  if (a1 == 0xFFFFFFFFLL
    || a1 << 32 < (uint64_t)0xFFFFFFFF00000001
    || (int)a1 >= *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8)
    || (v4 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries), HIDWORD(a1) != -1)
    && *(_DWORD *)(v4 + 12 * (int)a1 + 8) != HIDWORD(a1)
    || (result = sub_1B1FE6DD4(*(_QWORD *)(*(_QWORD *)(a2 + 136) + 8 * *(int *)(v4 + 12 * (int)a1) + 32), *(_WORD *)(v4 + 12 * (int)a1 + 4), 8, a3), !v3)&& (result & 1) == 0)
  {
    sub_1B2229430();
    sub_1B2228890();
    sub_1B1BC3C70();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    sub_1B2228890();
    sub_1B2228890();
    swift_unknownObjectRelease();
    result = sub_1B2229688();
    __break(1u);
  }
  return result;
}

uint64_t sub_1B1FE6DD4(uint64_t a1, __int16 a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *i;
  uint64_t v9;
  uint64_t v10;

  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(v4 + 16);
  if (!v5)
    return 0;
  for (i = (_QWORD *)(v4 + 56); (ValueMetadata *)*(i - 3) != &type metadata for TextureGPURuntime; i += 5)
  {
    if (!--v5)
      return 0;
  }
  v9 = *i + a2 * a3;
  v10 = *(_QWORD *)(a1 + 128);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(_QWORD *)(v10 + v9) = a4;
  return 1;
}

uint64_t sub_1B1FE6E64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B1FE6C24(a1, a2, a3);
}

uint64_t sub_1B1FE6E78(uint64_t a1, __int16 a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  _QWORD *i;

  v9 = *(_QWORD *)(a1 + 48);
  v10 = *(_QWORD *)(v9 + 16);
  if (!v10)
    return 0;
  for (i = (_QWORD *)(v9 + 56); (ValueMetadata *)*(i - 3) != &type metadata for EmitterRuntime; i += 5)
  {
    if (!--v10)
      return 0;
  }
  sub_1B1E53BF4(*(_QWORD *)(a1 + 128) + *i + a2 * a3, a4 & 1, a5, a6, a7, a8, a9);
  return 1;
}

uint64_t sub_1B1FE6EFC(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;

  if (a1 != 0xFFFFFFFFLL
    && a1 << 32 >= (uint64_t)0xFFFFFFFF00000001
    && (int)a1 < *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8)
    && ((v8 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries), HIDWORD(a1) == -1)
     || *(_DWORD *)(v8 + 12 * (int)a1 + 8) == HIDWORD(a1)))
  {
    return sub_1B1FE6E78(*(_QWORD *)(*(_QWORD *)(a2 + 136) + 8 * *(int *)(v8 + 12 * (int)a1) + 32), *(_WORD *)(v8 + 12 * (int)a1 + 4), 656, a3 & 1, a4, a5, a6, a7, a8) & 1;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_1B1FE6FB8(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v10;
  uint64_t result;

  if (a1 == 0xFFFFFFFFLL
    || a1 << 32 < (uint64_t)0xFFFFFFFF00000001
    || (int)a1 >= *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8)
    || (v10 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries), HIDWORD(a1) != -1)
    && *(_DWORD *)(v10 + 12 * (int)a1 + 8) != HIDWORD(a1)
    || (result = sub_1B1FE6E78(*(_QWORD *)(*(_QWORD *)(a2 + 136) + 8 * *(int *)(v10 + 12 * (int)a1) + 32), *(_WORD *)(v10 + 12 * (int)a1 + 4), 656, a3 & 1, a4, a5, a6, a7, a8), !v8)&& (result & 1) == 0)
  {
    sub_1B2229430();
    sub_1B2228890();
    sub_1B1BC3C70();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    sub_1B2228890();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B1B1FC88(a5);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    result = sub_1B2229688();
    __break(1u);
  }
  return result;
}

uint64_t sub_1B1FE71B4(uint64_t a1, __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5, float a6, float a7)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD *i;

  v7 = *(_QWORD *)(a1 + 48);
  v8 = *(_QWORD *)(v7 + 16);
  if (!v8)
    return 0;
  for (i = (_QWORD *)(v7 + 56); (ValueMetadata *)*(i - 3) != &type metadata for EmitterRuntime; i += 5)
  {
    if (!--v8)
      return 0;
  }
  sub_1B1C4E3AC(a6, a7, *(_QWORD *)(a1 + 128) + *i + a2 * a3, a4, a5);
  return 1;
}

uint64_t sub_1B1FE7224(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, float a5, float a6)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t result;

  if (a1 == 0xFFFFFFFFLL
    || a1 << 32 < (uint64_t)0xFFFFFFFF00000001
    || (int)a1 >= *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8)
    || (v8 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries), HIDWORD(a1) != -1)
    && *(_DWORD *)(v8 + 12 * (int)a1 + 8) != HIDWORD(a1)
    || (result = sub_1B1FE71B4(*(_QWORD *)(*(_QWORD *)(a2 + 136) + 8 * *(int *)(v8 + 12 * (int)a1) + 32), *(_WORD *)(v8 + 12 * (int)a1 + 4), 656, a3, a4, a5, a6), !v6)&& (result & 1) == 0)
  {
    sub_1B2229430();
    sub_1B2228890();
    sub_1B1BC3C70();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    sub_1B2228890();
    sub_1B2228890();
    swift_release();
    sub_1B1B4F21C(a4);
    result = sub_1B2229688();
    __break(1u);
  }
  return result;
}

uint64_t sub_1B1FE73F0@<X0>(uint64_t a1@<X0>, __int16 a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_1B1FF10A4(a1, a2, a3, a4);
}

_QWORD *sub_1B1FE7404@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return sub_1B1FE75AC(a1, a2, a3, a4, (_QWORD *(*)(_OWORD *__return_ptr, uint64_t, uint64_t, uint64_t, __n128))sub_1B1C82E34, a5);
}

uint64_t sub_1B1FE7420@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return sub_1B1FE76C0(a1, a2, a3, a4, (_QWORD *(*)(_OWORD *__return_ptr, uint64_t, uint64_t, uint64_t, __n128))sub_1B1C82E34, a5);
}

uint64_t sub_1B1FE743C@<X0>(uint64_t result@<X0>, __int16 a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t *v16;

  v4 = *(_QWORD *)(result + 48);
  v5 = *(_QWORD *)(v4 + 16);
  if (v5)
  {
    v6 = (_QWORD *)(v4 + 56);
    while ((ValueMetadata *)*(v6 - 3) != &type metadata for WorldTransform)
    {
      v6 += 5;
      if (!--v5)
        goto LABEL_5;
    }
    v15 = 0;
    v16 = (uint64_t *)(*(_QWORD *)(result + 128) + *v6 + a2 * a3);
    v7 = *v16;
    v8 = v16[1];
    v9 = v16[2];
    v10 = v16[3];
    v11 = v16[4];
    v12 = v16[5];
    v13 = v16[6];
    v14 = v16[7];
  }
  else
  {
LABEL_5:
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v15 = 1;
  }
  *(_QWORD *)a4 = v7;
  *(_QWORD *)(a4 + 8) = v8;
  *(_QWORD *)(a4 + 16) = v9;
  *(_QWORD *)(a4 + 24) = v10;
  *(_QWORD *)(a4 + 32) = v11;
  *(_QWORD *)(a4 + 40) = v12;
  *(_QWORD *)(a4 + 48) = v13;
  *(_QWORD *)(a4 + 56) = v14;
  *(_BYTE *)(a4 + 64) = v15;
  return result;
}

_QWORD *sub_1B1FE74D4@<X0>(_QWORD *result@<X0>, __int16 a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *(*a6)(_OWORD *__return_ptr, uint64_t, uint64_t, uint64_t, __n128)@<X5>, uint64_t a7@<X8>)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  _QWORD *v12;
  char v13;
  char v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _OWORD v18[4];
  char v19;

  v9 = result[6];
  v10 = *(_QWORD *)(v9 + 16);
  v11 = 0uLL;
  if (!v10)
  {
LABEL_5:
    v13 = 0;
    v14 = 1;
    v15 = 0uLL;
    v16 = 0uLL;
    v17 = 0uLL;
LABEL_6:
    *(_OWORD *)a7 = v11;
    *(_OWORD *)(a7 + 16) = v15;
    *(_OWORD *)(a7 + 32) = v16;
    *(_OWORD *)(a7 + 48) = v17;
    *(_BYTE *)(a7 + 64) = v13;
    *(_BYTE *)(a7 + 65) = v14;
    return result;
  }
  v12 = (_QWORD *)(v9 + 56);
  while ((ValueMetadata *)*(v12 - 3) != &type metadata for EmitterDescription)
  {
    v12 += 5;
    if (!--v10)
      goto LABEL_5;
  }
  result = a6(v18, result[16] + *v12 + a2 * a3, a4, a5, (__n128)0);
  if (!v7)
  {
    v14 = 0;
    v11 = v18[0];
    v15 = v18[1];
    v16 = v18[2];
    v17 = v18[3];
    v13 = v19;
    goto LABEL_6;
  }
  return result;
}

_QWORD *sub_1B1FE7590@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return sub_1B1FE75AC(a1, a2, a3, a4, (_QWORD *(*)(_OWORD *__return_ptr, uint64_t, uint64_t, uint64_t, __n128))sub_1B1C82E58, a5);
}

_QWORD *sub_1B1FE75AC@<X0>(_QWORD *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *(*a5)(_OWORD *__return_ptr, uint64_t, uint64_t, uint64_t, __n128)@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  __int128 v8;
  char v9;
  char v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  _OWORD v15[4];
  char v16;
  char v17;

  v8 = 0uLL;
  if (result == (_QWORD *)0xFFFFFFFFLL)
    goto LABEL_2;
  v9 = 0;
  v10 = 1;
  if ((_QWORD)result << 32 < (int64_t)0xFFFFFFFF00000001
    || (int)result >= *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8))
  {
    goto LABEL_3;
  }
  v14 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
  if (HIDWORD(result) != -1 && *(_DWORD *)(v14 + 12 * (int)result + 8) != HIDWORD(result))
  {
LABEL_2:
    v9 = 0;
    v10 = 1;
LABEL_3:
    v11 = 0uLL;
    v12 = 0uLL;
    v13 = 0uLL;
LABEL_4:
    *(_OWORD *)a6 = v8;
    *(_OWORD *)(a6 + 16) = v11;
    *(_OWORD *)(a6 + 32) = v12;
    *(_OWORD *)(a6 + 48) = v13;
    *(_BYTE *)(a6 + 64) = v9;
    *(_BYTE *)(a6 + 65) = v10;
    return result;
  }
  result = sub_1B1FE74D4(*(_QWORD **)(*(_QWORD *)(a2 + 136) + 8 * *(int *)(v14 + 12 * (int)result) + 32), *(_WORD *)(v14 + 12 * (int)result + 4), 88, a3, a4, a5, (uint64_t)v15);
  if (!v6)
  {
    v8 = v15[0];
    v11 = v15[1];
    v12 = v15[2];
    v13 = v15[3];
    v9 = v16;
    v10 = v17;
    goto LABEL_4;
  }
  return result;
}

uint64_t sub_1B1FE76A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return sub_1B1FE76C0(a1, a2, a3, a4, (_QWORD *(*)(_OWORD *__return_ptr, uint64_t, uint64_t, uint64_t, __n128))sub_1B1C82E58, a5);
}

uint64_t sub_1B1FE76C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *(*a5)(_OWORD *__return_ptr, uint64_t, uint64_t, uint64_t, __n128)@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[8];
  char v20;
  _BYTE v21[80];
  uint64_t v22;

  if (a1 == 0xFFFFFFFFLL)
    goto LABEL_10;
  if (a1 << 32 < (uint64_t)0xFFFFFFFF00000001)
    goto LABEL_10;
  if ((int)a1 >= *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8))
    goto LABEL_10;
  v8 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
  if (HIDWORD(a1) != -1 && *(_DWORD *)(v8 + 12 * (int)a1 + 8) != HIDWORD(a1))
    goto LABEL_10;
  result = (uint64_t)sub_1B1FE74D4(*(_QWORD **)(*(_QWORD *)(a2 + 136) + 8 * *(int *)(v8 + 12 * (int)a1) + 32), *(_WORD *)(v8 + 12 * (int)a1 + 4), 88, a3, a4, a5, (uint64_t)v19);
  if (v6)
    return result;
  v10 = v19[0];
  v11 = v19[1];
  v12 = v19[2];
  v13 = v19[3];
  v14 = v19[4];
  v22 = v19[5];
  v17 = v19[7];
  v18 = v19[6];
  v16 = v20;
  result = sub_1B1A025EC((uint64_t)v19, (uint64_t)v21, (uint64_t (*)(_QWORD))sub_1B1FF3350);
  if ((v21[65] & 1) != 0)
  {
LABEL_10:
    sub_1B2229430();
    sub_1B2228890();
    sub_1B1BC3C70();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    sub_1B2228890();
    sub_1B2228890();
    swift_release();
    result = sub_1B2229688();
    __break(1u);
    return result;
  }
  *(_QWORD *)a6 = v10;
  *(_QWORD *)(a6 + 8) = v11;
  *(_QWORD *)(a6 + 16) = v12;
  *(_QWORD *)(a6 + 24) = v13;
  v15 = v22;
  *(_QWORD *)(a6 + 32) = v14;
  *(_QWORD *)(a6 + 40) = v15;
  *(_QWORD *)(a6 + 48) = v18;
  *(_QWORD *)(a6 + 56) = v17;
  *(_BYTE *)(a6 + 64) = v16 & 1;
  return result;
}

unint64_t sub_1B1FE7908(uint64_t a1, __int16 a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unsigned __int8 v7;

  v3 = *(_QWORD *)(a1 + 48);
  v4 = *(_QWORD *)(v3 + 16);
  if (v4)
  {
    v5 = (_QWORD *)(v3 + 56);
    while ((ValueMetadata *)*(v5 - 3) != &type metadata for EmitterDescription)
    {
      v5 += 5;
      if (!--v4)
        goto LABEL_5;
    }
    v7 = 0;
    v6 = *(unsigned int *)(*(_QWORD *)(a1 + 128) + *v5 + a2 * a3 + 52);
  }
  else
  {
LABEL_5:
    v6 = 0;
    v7 = 1;
  }
  return v6 | ((unint64_t)v7 << 32);
}

uint64_t sub_1B1FE7978(uint64_t a1, __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int *a6, _QWORD *a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD *i;

  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(_QWORD *)(v8 + 16);
  if (!v9)
    return 0;
  for (i = (_QWORD *)(v8 + 56); (ValueMetadata *)*(i - 3) != &type metadata for EmitterRuntime; i += 5)
  {
    if (!--v9)
      return 0;
  }
  sub_1B1C835D0(*(_QWORD *)(a1 + 128) + *i + a2 * a3, a4, a5, a6, a7, a8);
  return 1;
}

uint64_t sub_1B1FE79F4(uint64_t a1, __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD *i;
  _QWORD *v15;

  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(_QWORD *)(v8 + 16);
  if (!v9)
    return 0;
  for (i = (_QWORD *)(v8 + 56); (ValueMetadata *)*(i - 3) != &type metadata for ParticleSubSpawn.State; i += 5)
  {
    if (!--v9)
      return 0;
  }
  v15 = (_QWORD *)(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
  sub_1B1C83134(a4, a5);
  if ((*(_BYTE *)(a6 + 272) & 1) == 0)
    sub_1B1C833B8(a5, v15, a8);
  return 1;
}

uint64_t sub_1B1FE7AAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;

  if (a1 != 0xFFFFFFFFLL
    && a1 << 32 >= (uint64_t)0xFFFFFFFF00000001
    && (int)a1 < *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8)
    && ((v7 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries), HIDWORD(a1) == -1)
     || *(_DWORD *)(v7 + 12 * (int)a1 + 8) == HIDWORD(a1)))
  {
    return sub_1B1FE79F4(*(_QWORD *)(*(_QWORD *)(a2 + 136) + 8 * *(int *)(v7 + 12 * (int)a1) + 32), *(_WORD *)(v7 + 12 * (int)a1 + 4), 64, a3, a4, a5, a6, a7) & 1;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_1B1FE7B5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t i;

  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(v5 + 16);
  if (!v6)
    return 0;
  for (i = v5 + 56; *(ValueMetadata **)(i - 24) != &type metadata for EmitterRuntime; i += 40)
  {
    if (!--v6)
      return 0;
  }
  sub_1B1CCA790((uint64_t)*(float *)(a4 + 64), (_QWORD *)a4, a5);
  return 1;
}

uint64_t sub_1B1FE7BE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t result;

  if (a1 == 0xFFFFFFFFLL
    || a1 << 32 < (uint64_t)0xFFFFFFFF00000001
    || (int)a1 >= *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8)
    || (v6 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries), HIDWORD(a1) != -1)
    && *(_DWORD *)(v6 + 12 * (int)a1 + 8) != HIDWORD(a1)
    || (result = sub_1B1FE7B5C(*(_QWORD *)(*(_QWORD *)(a2 + 136) + 8 * *(int *)(v6 + 12 * (int)a1) + 32), *(unsigned __int16 *)(v6 + 12 * (int)a1 + 4), 656, a3, a4), !v4)&& (result & 1) == 0)
  {
    sub_1B2229430();
    sub_1B2228890();
    sub_1B1BC3C70();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    sub_1B2228890();
    sub_1B2228890();
    sub_1B1B4F21C(a4);
    result = sub_1B2229688();
    __break(1u);
  }
  return result;
}

uint64_t sub_1B1FE7DA0(uint64_t a1, uint64_t a2, Swift::Int a3, _QWORD *a4, uint64_t a5)
{
  return sub_1B1FE7E34(a1, a2, a3, a4, a5);
}

uint64_t sub_1B1FE7DB4(uint64_t a1, uint64_t a2, uint64_t a3, Swift::Int a4, _QWORD *a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t i;

  v6 = *(_QWORD *)(a1 + 48);
  v7 = *(_QWORD *)(v6 + 16);
  if (!v7)
    return 0;
  for (i = v6 + 56; *(ValueMetadata **)(i - 24) != &type metadata for EmitterRuntime; i += 40)
  {
    if (!--v7)
      return 0;
  }
  sub_1B1CCA790(a4, a5, a6);
  return 1;
}

uint64_t sub_1B1FE7E34(uint64_t a1, uint64_t a2, Swift::Int a3, _QWORD *a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t result;

  if (a1 == 0xFFFFFFFFLL
    || a1 << 32 < (uint64_t)0xFFFFFFFF00000001
    || (int)a1 >= *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8)
    || (v7 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries), HIDWORD(a1) != -1)
    && *(_DWORD *)(v7 + 12 * (int)a1 + 8) != HIDWORD(a1)
    || (result = sub_1B1FE7DB4(*(_QWORD *)(*(_QWORD *)(a2 + 136) + 8 * *(int *)(v7 + 12 * (int)a1) + 32), *(unsigned __int16 *)(v7 + 12 * (int)a1 + 4), 656, a3, a4, a5), !v5)&& (result & 1) == 0)
  {
    sub_1B2229430();
    sub_1B2228890();
    sub_1B1BC3C70();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    sub_1B2228890();
    sub_1B2228890();
    sub_1B1B4F21C(a5);
    result = sub_1B2229688();
    __break(1u);
  }
  return result;
}

uint64_t sub_1B1FE7FF8(uint64_t a1, __int16 a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *i;

  v3 = *(_QWORD *)(a1 + 48);
  v4 = *(_QWORD *)(v3 + 16);
  if (!v4)
    return 0;
  for (i = (_QWORD *)(v3 + 56); (ValueMetadata *)*(i - 3) != &type metadata for ParticleRespawn; i += 5)
  {
    if (!--v4)
      return 0;
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
}

uint64_t sub_1B1FE8050(uint64_t a1, __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, float a7)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD *i;

  v7 = *(_QWORD *)(a1 + 48);
  v8 = *(_QWORD *)(v7 + 16);
  if (!v8)
    return 0;
  for (i = (_QWORD *)(v7 + 56); (ValueMetadata *)*(i - 3) != &type metadata for ParticleSpawnState; i += 5)
  {
    if (!--v8)
      return 0;
  }
  sub_1B1C81F74(*(_QWORD *)(a1 + 128) + *i + a2 * a3, a4, a5, a6, a7);
  return 1;
}

uint64_t sub_1B1FE80C4(uint64_t a1, __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, float a7)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD *i;

  v7 = *(_QWORD *)(a1 + 48);
  v8 = *(_QWORD *)(v7 + 16);
  if (!v8)
    return 0;
  for (i = (_QWORD *)(v7 + 56); (ValueMetadata *)*(i - 3) != &type metadata for EmitterRuntime; i += 5)
  {
    if (!--v8)
      return 0;
  }
  sub_1B1C81D80(*(_QWORD *)(a1 + 128) + *i + a2 * a3, a4, a5, a6, a7);
  return 1;
}

uint64_t sub_1B1FE8138(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, float a6)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t result;

  if (a1 == 0xFFFFFFFFLL
    || a1 << 32 < (uint64_t)0xFFFFFFFF00000001
    || (int)a1 >= *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8)
    || (v8 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries), HIDWORD(a1) != -1)
    && *(_DWORD *)(v8 + 12 * (int)a1 + 8) != HIDWORD(a1)
    || (result = sub_1B1FE80C4(*(_QWORD *)(*(_QWORD *)(a2 + 136) + 8 * *(int *)(v8 + 12 * (int)a1) + 32), *(_WORD *)(v8 + 12 * (int)a1 + 4), 656, a3, a4, a5, a6), !v6)&& (result & 1) == 0)
  {
    sub_1B2229430();
    sub_1B2228890();
    sub_1B1BC3C70();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    sub_1B2228890();
    sub_1B2228890();
    swift_release();
    sub_1B1B4F21C(a4);
    result = sub_1B2229688();
    __break(1u);
  }
  return result;
}

uint64_t sub_1B1FE8308(uint64_t a1, __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD *i;

  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(_QWORD *)(v8 + 16);
  if (!v9)
    return 0;
  for (i = (_QWORD *)(v8 + 56); (ValueMetadata *)*(i - 3) != &type metadata for ParticleSubSpawn.State; i += 5)
  {
    if (!--v9)
      return 0;
  }
  sub_1B1C82578((uint64_t *)(*(_QWORD *)(a1 + 128) + *i + a2 * a3), a4, a5, a6, a7, a8);
  return 1;
}

uint64_t sub_1B1FE8384(uint64_t a1, __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, Swift::Int a7, uint64_t a8, float a9)
{
  uint64_t v9;
  uint64_t v10;
  _QWORD *i;

  v9 = *(_QWORD *)(a1 + 48);
  v10 = *(_QWORD *)(v9 + 16);
  if (!v10)
    return 0;
  for (i = (_QWORD *)(v9 + 56); (ValueMetadata *)*(i - 3) != &type metadata for EmitterRuntime; i += 5)
  {
    if (!--v10)
      return 0;
  }
  sub_1B1C82428(*(_QWORD *)(a1 + 128) + *i + a2 * a3, a4, a5, a6, a7, a8, a9);
  return 1;
}

uint64_t sub_1B1FE8400(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, Swift::Int a6, uint64_t a7, float a8)
{
  uint64_t v8;
  uint64_t v10;
  uint64_t result;

  if (a1 == 0xFFFFFFFFLL
    || a1 << 32 < (uint64_t)0xFFFFFFFF00000001
    || (int)a1 >= *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8)
    || (v10 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries), HIDWORD(a1) != -1)
    && *(_DWORD *)(v10 + 12 * (int)a1 + 8) != HIDWORD(a1)
    || (result = sub_1B1FE8384(*(_QWORD *)(*(_QWORD *)(a2 + 136) + 8 * *(int *)(v10 + 12 * (int)a1) + 32), *(_WORD *)(v10 + 12 * (int)a1 + 4), 656, a3, a4, a5, a6, a7, a8), !v8)&& (result & 1) == 0)
  {
    sub_1B2229430();
    sub_1B2228890();
    sub_1B1BC3C70();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    sub_1B2228890();
    sub_1B2228890();
    swift_release();
    sub_1B1B4F21C(a4);
    result = sub_1B2229688();
    __break(1u);
  }
  return result;
}

uint64_t sub_1B1FE85D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1B1FE9EC0(a1, a2, a3, a4, a5, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1CB7674);
}

uint64_t sub_1B1FE85F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  float v12;
  float v13;
  int v14;
  float v15;
  char v16;

  v6 = *(_QWORD *)(a1 + 48);
  v7 = *(_QWORD *)(v6 + 16);
  if (!v7)
    return 0;
  for (i = v6 + 56; *(ValueMetadata **)(i - 24) != &type metadata for EmitterRuntime; i += 40)
  {
    if (!--v7)
      return 0;
  }
  sub_1B1AF0254((int *)(a4 + 8), (uint64_t)&v14);
  sub_1B1AF0254(&v14, (uint64_t)&v15);
  if (v16 != 1)
  {
    v13 = *(double *)(a6 + OBJC_IVAR____TtC3VFX13EntityManager_clock + 48) / v15;
    v12 = fmodf(v13, 1.0);
    goto LABEL_10;
  }
  if (LODWORD(v15) >= 2)
  {
    v12 = (float)(sub_1B2130F84() & 0xFFFFFF) * 0.000000059605;
LABEL_10:
    *(float *)(a5 + 28) = v12;
  }
  return 1;
}

uint64_t sub_1B1FE8714(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t result;

  if (a1 == 0xFFFFFFFFLL
    || a1 << 32 < (uint64_t)0xFFFFFFFF00000001
    || (int)a1 >= *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8)
    || (v7 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries), HIDWORD(a1) != -1)
    && *(_DWORD *)(v7 + 12 * (int)a1 + 8) != HIDWORD(a1)
    || (result = sub_1B1FE85F4(*(_QWORD *)(*(_QWORD *)(a2 + 136) + 8 * *(int *)(v7 + 12 * (int)a1) + 32), *(unsigned __int16 *)(v7 + 12 * (int)a1 + 4), 656, a3, a4, a5), !v5)&& (result & 1) == 0)
  {
    sub_1B2229430();
    sub_1B2228890();
    sub_1B1BC3C70();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    sub_1B2228890();
    sub_1B2228890();
    sub_1B1EC56D8(a3);
    swift_release();
    result = sub_1B2229688();
    __break(1u);
  }
  return result;
}

uint64_t sub_1B1FE88E4(uint64_t a1, __int16 a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *i;

  v3 = *(_QWORD *)(a1 + 48);
  v4 = *(_QWORD *)(v3 + 16);
  if (!v4)
    return 2;
  for (i = (_QWORD *)(v3 + 56); (ValueMetadata *)*(i - 3) != &type metadata for EmitterDescription; i += 5)
  {
    if (!--v4)
      return 2;
  }
  return *(unsigned __int8 *)(*(_QWORD *)(a1 + 128) + *i + a2 * a3 + 56);
}

uint64_t sub_1B1FE8938(uint64_t a1, __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *i;

  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(v5 + 16);
  if (!v6)
    return 0;
  for (i = (_QWORD *)(v5 + 56); (ValueMetadata *)*(i - 3) != &type metadata for EmitterRuntime; i += 5)
  {
    if (!--v6)
      return 0;
  }
  sub_1B1D6F2C0(*(_QWORD *)(a1 + 128) + *i + a2 * a3, a4, a5);
  return 1;
}

uint64_t sub_1B1FE89AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t result;

  if (a1 == 0xFFFFFFFFLL
    || a1 << 32 < (uint64_t)0xFFFFFFFF00000001
    || (int)a1 >= *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8)
    || (v6 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries), HIDWORD(a1) != -1)
    && *(_DWORD *)(v6 + 12 * (int)a1 + 8) != HIDWORD(a1)
    || (result = sub_1B1FE8938(*(_QWORD *)(*(_QWORD *)(a2 + 136) + 8 * *(int *)(v6 + 12 * (int)a1) + 32), *(_WORD *)(v6 + 12 * (int)a1 + 4), 656, a3, a4), !v4)&& (result & 1) == 0)
  {
    sub_1B2229430();
    sub_1B2228890();
    sub_1B1BC3C70();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    sub_1B2228890();
    sub_1B2228890();
    swift_release();
    sub_1B1B4F21C(a4);
    result = sub_1B2229688();
    __break(1u);
  }
  return result;
}

uint64_t sub_1B1FE8B7C(uint64_t a1, __int16 a2, uint64_t a3, unsigned int *a4, __int128 *a5)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *i;
  uint64_t v9;
  __int128 v10;

  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(v5 + 16);
  if (!v6)
    return 0;
  for (i = (_QWORD *)(v5 + 56); (ValueMetadata *)*(i - 3) != &type metadata for EmitterRuntime; i += 5)
  {
    if (!--v6)
      return 0;
  }
  v9 = *(_QWORD *)(a1 + 128) + *i + a2 * a3;
  v10 = *a5;
  *(_QWORD *)(v9 + 136) = *a4;
  *(_OWORD *)(v9 + 144) = v10;
  *(_BYTE *)(v9 + 160) = 0;
  return 1;
}

uint64_t sub_1B1FE8BE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1FE8C8C(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t, uint64_t))sub_1B1F016C8);
}

uint64_t sub_1B1FE8C00(uint64_t a1, __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *i;

  v6 = *(_QWORD *)(a1 + 48);
  v7 = *(_QWORD *)(v6 + 16);
  if (!v7)
    return 0;
  for (i = (_QWORD *)(v6 + 56); (ValueMetadata *)*(i - 3) != &type metadata for EmitterRuntime; i += 5)
  {
    if (!--v7)
      return 0;
  }
  a6(*(_QWORD *)(a1 + 128) + *i + a2 * a3, a4, a5);
  return 1;
}

uint64_t sub_1B1FE8C70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1FE8C8C(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t, uint64_t))sub_1B1F01BC8);
}

uint64_t sub_1B1FE8C8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v5;
  uint64_t v7;
  uint64_t result;

  if (a1 == 0xFFFFFFFFLL
    || a1 << 32 < (uint64_t)0xFFFFFFFF00000001
    || (int)a1 >= *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8)
    || (v7 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries), HIDWORD(a1) != -1)
    && *(_DWORD *)(v7 + 12 * (int)a1 + 8) != HIDWORD(a1)
    || (result = sub_1B1FE8C00(*(_QWORD *)(*(_QWORD *)(a2 + 136) + 8 * *(int *)(v7 + 12 * (int)a1) + 32), *(_WORD *)(v7 + 12 * (int)a1 + 4), 656, a3, a4, a5), !v5)&& (result & 1) == 0)
  {
    sub_1B2229430();
    sub_1B2228890();
    sub_1B1BC3C70();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    sub_1B2228890();
    sub_1B2228890();
    sub_1B1B4F21C(a3);
    swift_release();
    result = sub_1B2229688();
    __break(1u);
  }
  return result;
}

uint64_t sub_1B1FE8E5C(uint64_t a1, __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5, _BYTE *a6, float a7, float a8, float a9, float a10, float a11, float a12)
{
  uint64_t v12;
  uint64_t v13;
  _QWORD *i;

  v12 = *(_QWORD *)(a1 + 48);
  v13 = *(_QWORD *)(v12 + 16);
  if (!v13)
    return 0;
  for (i = (_QWORD *)(v12 + 56); (ValueMetadata *)*(i - 3) != &type metadata for EmitterRuntime; i += 5)
  {
    if (!--v13)
      return 0;
  }
  sub_1B2160794((_QWORD *)(*(_QWORD *)(a1 + 128) + *i + a2 * a3), a4, a5, a6, a7, a8, a9, a10, a11, a12);
  return 1;
}

uint64_t sub_1B1FE8ED0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _BYTE *a5, float a6, float a7, float a8, float a9, float a10, float a11)
{
  uint64_t v11;
  uint64_t v13;
  uint64_t result;

  if (a1 == 0xFFFFFFFFLL
    || a1 << 32 < (uint64_t)0xFFFFFFFF00000001
    || (int)a1 >= *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8)
    || (v13 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries), HIDWORD(a1) != -1)
    && *(_DWORD *)(v13 + 12 * (int)a1 + 8) != HIDWORD(a1)
    || (result = sub_1B1FE8E5C(*(_QWORD *)(*(_QWORD *)(a2 + 136) + 8 * *(int *)(v13 + 12 * (int)a1) + 32), *(_WORD *)(v13 + 12 * (int)a1 + 4), 656, a3, a4, a5, a6, a7, a8, a9, a10, a11), !v11)&& (result & 1) == 0)
  {
    sub_1B2229430();
    sub_1B2228890();
    sub_1B1BC3C70();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    sub_1B2228890();
    sub_1B2228890();
    swift_release();
    sub_1B1B4F21C(a4);
    result = sub_1B2229688();
    __break(1u);
  }
  return result;
}

uint64_t sub_1B1FE90A0(uint64_t a1, __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *i;

  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(v5 + 16);
  if (!v6)
    return 0;
  for (i = (_QWORD *)(v5 + 56); (ValueMetadata *)*(i - 3) != &type metadata for EmitterRuntime; i += 5)
  {
    if (!--v6)
      return 0;
  }
  sub_1B21459B8(*(_QWORD *)(a1 + 128) + *i + a2 * a3, a4, a5);
  return 1;
}

uint64_t sub_1B1FE9114(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t result;

  if (a1 == 0xFFFFFFFFLL
    || a1 << 32 < (uint64_t)0xFFFFFFFF00000001
    || (int)a1 >= *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8)
    || (v8 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries), HIDWORD(a1) != -1)
    && *(_DWORD *)(v8 + 12 * (int)a1 + 8) != HIDWORD(a1)
    || (result = sub_1B1FE90A0(*(_QWORD *)(*(_QWORD *)(a2 + 136) + 8 * *(int *)(v8 + 12 * (int)a1) + 32), *(_WORD *)(v8 + 12 * (int)a1 + 4), 656, a3, a4), !v5)&& (result & 1) == 0)
  {
    sub_1B2229430();
    sub_1B2228890();
    sub_1B1BC3C70();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    sub_1B2228890();
    sub_1B2228890();
    swift_release();
    sub_1B1B4F21C(a4);
    sub_1B1EC56D8(a5);
    result = sub_1B2229688();
    __break(1u);
  }
  return result;
}

uint64_t sub_1B1FE92F8(uint64_t a1, __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5, float *a6, float *a7)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD *i;

  v7 = *(_QWORD *)(a1 + 48);
  v8 = *(_QWORD *)(v7 + 16);
  if (!v8)
    return 0;
  for (i = (_QWORD *)(v7 + 56); (ValueMetadata *)*(i - 3) != &type metadata for EmitterRuntime; i += 5)
  {
    if (!--v8)
      return 0;
  }
  sub_1B1FB1638((_QWORD *)(*(_QWORD *)(a1 + 128) + *i + a2 * a3), a4, a5, a6, a7);
  return 1;
}

uint64_t sub_1B1FE9370(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, float *a5, float *a6)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t result;

  if (a1 == 0xFFFFFFFFLL
    || a1 << 32 < (uint64_t)0xFFFFFFFF00000001
    || (int)a1 >= *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8)
    || (v8 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries), HIDWORD(a1) != -1)
    && *(_DWORD *)(v8 + 12 * (int)a1 + 8) != HIDWORD(a1)
    || (result = sub_1B1FE92F8(*(_QWORD *)(*(_QWORD *)(a2 + 136) + 8 * *(int *)(v8 + 12 * (int)a1) + 32), *(_WORD *)(v8 + 12 * (int)a1 + 4), 656, a3, a4, a5, a6), !v6)&& (result & 1) == 0)
  {
    sub_1B2229430();
    sub_1B2228890();
    sub_1B1BC3C70();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    sub_1B2228890();
    sub_1B2228890();
    swift_release();
    sub_1B1B4F21C(a4);
    result = sub_1B2229688();
    __break(1u);
  }
  return result;
}

uint64_t sub_1B1FE9544(uint64_t a1, __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *i;

  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(v5 + 16);
  if (!v6)
    return 0;
  for (i = (_QWORD *)(v5 + 56); (ValueMetadata *)*(i - 3) != &type metadata for EmitterRuntime; i += 5)
  {
    if (!--v6)
      return 0;
  }
  sub_1B2089204(*(_QWORD *)(a1 + 128) + *i + a2 * a3, a4, a5);
  return 1;
}

uint64_t sub_1B1FE95B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t result;

  if (a1 == 0xFFFFFFFFLL
    || a1 << 32 < (uint64_t)0xFFFFFFFF00000001
    || (int)a1 >= *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8)
    || (v6 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries), HIDWORD(a1) != -1)
    && *(_DWORD *)(v6 + 12 * (int)a1 + 8) != HIDWORD(a1)
    || (result = sub_1B1FE9544(*(_QWORD *)(*(_QWORD *)(a2 + 136) + 8 * *(int *)(v6 + 12 * (int)a1) + 32), *(_WORD *)(v6 + 12 * (int)a1 + 4), 656, a3, a4), !v4)&& (result & 1) == 0)
  {
    sub_1B2229430();
    sub_1B2228890();
    sub_1B1BC3C70();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    sub_1B2228890();
    sub_1B2228890();
    swift_release();
    sub_1B1B4F21C(a4);
    result = sub_1B2229688();
    __break(1u);
  }
  return result;
}

uint64_t sub_1B1FE9788(uint64_t a1, __int16 a2, uint64_t a3, uint64_t *a4, unsigned __int8 *a5, _QWORD *a6, uint64_t a7, uint64_t a8, float32x4_t a9, uint64_t a10, unint64_t a11)
{
  uint64_t v11;
  uint64_t v12;
  _QWORD *i;

  v11 = *(_QWORD *)(a1 + 48);
  v12 = *(_QWORD *)(v11 + 16);
  if (!v12)
    return 0;
  for (i = (_QWORD *)(v11 + 56); (ValueMetadata *)*(i - 3) != &type metadata for GrowEmitterRuntime; i += 5)
  {
    if (!--v12)
      return 0;
  }
  sub_1B2056C78((float32x4_t *)(*(_QWORD *)(a1 + 128) + *i + a2 * a3), a4, a5, a6, a7, a8, a10, a11, a9);
  return 1;
}

uint64_t sub_1B1FE9810(uint64_t a1, uint64_t a2, uint64_t *a3, unsigned __int8 *a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, float32x4_t a9, unint64_t a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  if (a1 == 0xFFFFFFFFLL
    || a1 << 32 < (uint64_t)0xFFFFFFFF00000001
    || (int)a1 >= *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8)
    || (v11 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries), HIDWORD(a1) != -1)
    && *(_DWORD *)(v11 + 12 * (int)a1 + 8) != HIDWORD(a1)
    || (result = sub_1B1FE9788(*(_QWORD *)(*(_QWORD *)(a2 + 136) + 8 * *(int *)(v11 + 12 * (int)a1) + 32), *(_WORD *)(v11 + 12 * (int)a1 + 4), 48, a3, a4, a5, a6, a7, a9, a8, a10), !v10)&& (result & 1) == 0)
  {
    sub_1B2229430();
    sub_1B2228890();
    sub_1B1BC3C70();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    sub_1B2228890();
    sub_1B2228890();
    result = sub_1B2229688();
    __break(1u);
  }
  return result;
}

uint64_t sub_1B1FE99C8(uint64_t a1, float32x4_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7, unsigned __int8 *a8, _QWORD *a9, uint64_t a10, uint64_t a11, uint64_t a12, unint64_t a13)
{
  uint64_t *v16;

  if (!sub_1B1E36538((uint64_t)&type metadata for GrowEmitterRuntime))
  {
    v16 = ecs_stack_allocator_allocate(*(_QWORD *)(a1 + 32), 8, 8);
    *v16 = a4;
    sub_1B1A11C8C((uint64_t)&type metadata for GrowEmitterRuntime, (uint64_t)&off_1E6391FB8, v16, 1, 1);
  }
  return sub_1B1FE9810(a6, a5, a7, a8, a9, a10, a11, a12, a2, a13);
}

uint64_t sub_1B1FE9ABC(uint64_t result, uint64_t a2, uint64_t *a3, unsigned __int8 *a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, float32x4_t a9, unint64_t a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  _QWORD *v23;
  os_unfair_lock_s *v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;

  v11 = v10;
  v19 = result;
  if (result != 0xFFFFFFFFLL
    && result << 32 >= (uint64_t)0xFFFFFFFF00000001
    && (int)result < *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8))
  {
    v20 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
    if (HIDWORD(result) == -1 || *(_DWORD *)(v20 + 12 * (int)result + 8) == HIDWORD(result))
    {
      v21 = (int *)(v20 + 12 * (int)result);
      v22 = *((__int16 *)v21 + 2);
      v23 = *(_QWORD **)(*(_QWORD *)(a2 + 136) + 8 * *v21 + 32);
      if (v23[29] <= v22 && v23[30] > v22)
      {
        v29 = **(_QWORD **)(a2 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues);
        v25 = (os_unfair_lock_s *)v23[43];
        v28 = *(_QWORD *)(*(_QWORD *)(a2 + 136) + 8 * *v21 + 32);
        v26 = *((__int16 *)v21 + 2);
        swift_retain();
        os_unfair_lock_lock(v25);
        ecs_stack_allocator_push_snapshot(*(_QWORD *)(v29 + 32));
        swift_retain();
        sub_1B1FE99C8(v29, a9, v28, v26, a2, v19, a3, a4, a5, a6, a7, a8, a10);
        swift_release();
        if (!v11)
          ecs_stack_allocator_pop_snapshot(*(_QWORD *)(v29 + 32));
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v28 + 344));
        return swift_release();
      }
    }
  }
  return result;
}

uint64_t sub_1B1FE9C60(uint64_t a1, __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5, float *a6)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *i;

  v6 = *(_QWORD *)(a1 + 48);
  v7 = *(_QWORD *)(v6 + 16);
  if (!v7)
    return 0;
  for (i = (_QWORD *)(v6 + 56); (ValueMetadata *)*(i - 3) != &type metadata for EmitterRuntime; i += 5)
  {
    if (!--v7)
      return 0;
  }
  sub_1B2055E4C((_QWORD *)(*(_QWORD *)(a1 + 128) + *i + a2 * a3), a4, a5, a6);
  return 1;
}

uint64_t sub_1B1FE9CD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, float *a5)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t result;

  if (a1 == 0xFFFFFFFFLL
    || a1 << 32 < (uint64_t)0xFFFFFFFF00000001
    || (int)a1 >= *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8)
    || (v7 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries), HIDWORD(a1) != -1)
    && *(_DWORD *)(v7 + 12 * (int)a1 + 8) != HIDWORD(a1)
    || (result = sub_1B1FE9C60(*(_QWORD *)(*(_QWORD *)(a2 + 136) + 8 * *(int *)(v7 + 12 * (int)a1) + 32), *(_WORD *)(v7 + 12 * (int)a1 + 4), 656, a3, a4, a5), !v5)&& (result & 1) == 0)
  {
    sub_1B2229430();
    sub_1B2228890();
    sub_1B1BC3C70();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    sub_1B2228890();
    sub_1B2228890();
    swift_release();
    sub_1B1B4F21C(a4);
    result = sub_1B2229688();
    __break(1u);
  }
  return result;
}

uint64_t sub_1B1FE9EA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1B1FE9EC0(a1, a2, a3, a4, a5, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B204B26C);
}

uint64_t sub_1B1FE9EC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t v8;
  uint64_t result;

  if (a1 == 0xFFFFFFFFLL
    || a1 << 32 < (uint64_t)0xFFFFFFFF00000001
    || (int)a1 >= *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8)
    || (v8 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries), HIDWORD(a1) != -1)
    && *(_DWORD *)(v8 + 12 * (int)a1 + 8) != HIDWORD(a1)
    || (result = sub_1B1FEA53C(*(_QWORD *)(*(_QWORD *)(a2 + 136) + 8 * *(int *)(v8 + 12 * (int)a1) + 32), *(_WORD *)(v8 + 12 * (int)a1 + 4), 656, a3, a4, a5, a6), !v6)&& (result & 1) == 0)
  {
    sub_1B2229430();
    sub_1B2228890();
    sub_1B1BC3C70();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    sub_1B2228890();
    sub_1B2228890();
    swift_release();
    sub_1B1B4F21C(a4);
    result = sub_1B2229688();
    __break(1u);
  }
  return result;
}

uint64_t sub_1B1FEA094(uint64_t a1, __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, float a7)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD *i;

  v7 = *(_QWORD *)(a1 + 48);
  v8 = *(_QWORD *)(v7 + 16);
  if (!v8)
    return 0;
  for (i = (_QWORD *)(v7 + 56); (ValueMetadata *)*(i - 3) != &type metadata for EmitterRuntime; i += 5)
  {
    if (!--v8)
      return 0;
  }
  sub_1B2047BD8(*(_QWORD *)(a1 + 128) + *i + a2 * a3, a4, a5, a6, a7);
  return 1;
}

uint64_t sub_1B1FEA108(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, float a6)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t result;

  if (a1 == 0xFFFFFFFFLL
    || a1 << 32 < (uint64_t)0xFFFFFFFF00000001
    || (int)a1 >= *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8)
    || (v8 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries), HIDWORD(a1) != -1)
    && *(_DWORD *)(v8 + 12 * (int)a1 + 8) != HIDWORD(a1)
    || (result = sub_1B1FEA094(*(_QWORD *)(*(_QWORD *)(a2 + 136) + 8 * *(int *)(v8 + 12 * (int)a1) + 32), *(_WORD *)(v8 + 12 * (int)a1 + 4), 656, a3, a4, a5, a6), !v6)&& (result & 1) == 0)
  {
    sub_1B2229430();
    sub_1B2228890();
    sub_1B1BC3C70();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    sub_1B2228890();
    sub_1B2228890();
    swift_release();
    swift_release();
    sub_1B1B4F21C(a5);
    result = sub_1B2229688();
    __break(1u);
  }
  return result;
}

uint64_t sub_1B1FEA2EC(uint64_t a1, __int16 a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *i;

  v3 = *(_QWORD *)(a1 + 48);
  v4 = *(_QWORD *)(v3 + 16);
  if (!v4)
    return 0;
  for (i = (_QWORD *)(v3 + 56); (ValueMetadata *)*(i - 3) != &type metadata for EmitterRuntime; i += 5)
  {
    if (!--v4)
      return 0;
  }
  sub_1B2047F08(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
  return 1;
}

uint64_t sub_1B1FEA358(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t result;

  if (a1 == 0xFFFFFFFFLL
    || a1 << 32 < (uint64_t)0xFFFFFFFF00000001
    || (int)a1 >= *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8)
    || (v6 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries), HIDWORD(a1) != -1)
    && *(_DWORD *)(v6 + 12 * (int)a1 + 8) != HIDWORD(a1)
    || (result = sub_1B1FEA2EC(*(_QWORD *)(*(_QWORD *)(a2 + 136) + 8 * *(int *)(v6 + 12 * (int)a1) + 32), *(_WORD *)(v6 + 12 * (int)a1 + 4), 656), !v4)&& (result & 1) == 0)
  {
    sub_1B2229430();
    sub_1B2228890();
    sub_1B1BC3C70();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    sub_1B2228890();
    sub_1B2228890();
    swift_release();
    sub_1B1B4F21C(a4);
    result = sub_1B2229688();
    __break(1u);
  }
  return result;
}

uint64_t sub_1B1FEA520(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1B1FE9EC0(a1, a2, a3, a4, a5, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B2051C00);
}

uint64_t sub_1B1FEA53C(uint64_t a1, __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v7;
  uint64_t v8;
  _QWORD *i;

  v7 = *(_QWORD *)(a1 + 48);
  v8 = *(_QWORD *)(v7 + 16);
  if (!v8)
    return 0;
  for (i = (_QWORD *)(v7 + 56); (ValueMetadata *)*(i - 3) != &type metadata for EmitterRuntime; i += 5)
  {
    if (!--v8)
      return 0;
  }
  a7(*(_QWORD *)(a1 + 128) + *i + a2 * a3, a4, a5, a6);
  return 1;
}

uint64_t sub_1B1FEA5B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1B1FE9EC0(a1, a2, a3, a4, a5, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1FA1218);
}

uint64_t sub_1B1FEA5CC(uint64_t a1, __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD *i;

  v7 = *(_QWORD *)(a1 + 48);
  v8 = *(_QWORD *)(v7 + 16);
  if (!v8)
    return 0;
  for (i = (_QWORD *)(v7 + 56); (ValueMetadata *)*(i - 3) != &type metadata for ParticleSpawnState; i += 5)
  {
    if (!--v8)
      return 0;
  }
  sub_1B1CCA790(a5 - a6, (_QWORD *)(*(_QWORD *)(a1 + 128) + *i + a2 * a3), a7);
  return 1;
}

uint64_t sub_1B1FEA64C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t result;

  if (a1 == 0xFFFFFFFFLL
    || a1 << 32 < (uint64_t)0xFFFFFFFF00000001
    || (int)a1 >= *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8)
    || (v8 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries), HIDWORD(a1) != -1)
    && *(_DWORD *)(v8 + 12 * (int)a1 + 8) != HIDWORD(a1)
    || (result = sub_1B1FEA5CC(*(_QWORD *)(*(_QWORD *)(a2 + 136) + 8 * *(int *)(v8 + 12 * (int)a1) + 32), *(_WORD *)(v8 + 12 * (int)a1 + 4), 128, a3, a4, a5, a6), !v6)&& (result & 1) == 0)
  {
    sub_1B2229430();
    sub_1B2228890();
    sub_1B1BC3C70();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    sub_1B2228890();
    sub_1B2228890();
    sub_1B1B4F21C(a6);
    result = sub_1B2229688();
    __break(1u);
  }
  return result;
}

uint64_t sub_1B1FEA808(uint64_t a1, __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD *i;

  v7 = *(_QWORD *)(a1 + 48);
  v8 = *(_QWORD *)(v7 + 16);
  if (!v8)
    return 0;
  for (i = (_QWORD *)(v7 + 56); (ValueMetadata *)*(i - 3) != &type metadata for EmitterRuntime; i += 5)
  {
    if (!--v8)
      return 0;
  }
  sub_1B208DA48(*(_QWORD *)(a1 + 128) + *i + a2 * a3, a4, a5, a6, a7);
  return 1;
}

uint64_t sub_1B1FEA880(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v12;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  __int16 v17;

  if (a1 == 0xFFFFFFFFLL)
  {
LABEL_2:
    v12 = 0;
    return v12 & 1;
  }
  v12 = 0;
  if (a1 << 32 >= (uint64_t)0xFFFFFFFF00000001
    && (int)a1 < *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8))
  {
    v14 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
    if (HIDWORD(a1) == -1 || *(_DWORD *)(v14 + 12 * (int)a1 + 8) == HIDWORD(a1))
    {
      v15 = (int *)(v14 + 12 * (int)a1);
      v16 = *(_QWORD *)(*(_QWORD *)(a2 + 136) + 8 * *v15 + 32);
      v17 = *((_WORD *)v15 + 2);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v12 = sub_1B1FEA808(v16, v17, 656, a3, a6, a7, a8);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v12 & 1;
    }
    goto LABEL_2;
  }
  return v12 & 1;
}

uint64_t sub_1B1FEA99C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  char v17;
  uint64_t result;

  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v17 = sub_1B1FEA880(a1, a2, a3, a4, a5, a6, a7, a8);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  if (!v8 && (v17 & 1) == 0)
  {
    sub_1B2229430();
    sub_1B2228890();
    sub_1B1BC3C70();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    sub_1B2228890();
    sub_1B2228890();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1B1B4F21C(a8);
    result = sub_1B2229688();
    __break(1u);
  }
  return result;
}

uint64_t sub_1B1FEAB68(uint64_t a1, __int16 a2, uint64_t a3, uint64_t *a4, uint64_t a5, float a6, float a7)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD *i;

  v7 = *(_QWORD *)(a1 + 48);
  v8 = *(_QWORD *)(v7 + 16);
  if (!v8)
    return 0;
  for (i = (_QWORD *)(v7 + 56); (ValueMetadata *)*(i - 3) != &type metadata for ParticleSpawnState; i += 5)
  {
    if (!--v8)
      return 0;
  }
  sub_1B1C801B4(*(_QWORD *)(a1 + 128) + *i + a2 * a3, a4, a5, a6, a7);
  return 1;
}

uint64_t sub_1B1FEABD8(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, float a5, float a6)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t result;

  if (a1 == 0xFFFFFFFFLL
    || a1 << 32 < (uint64_t)0xFFFFFFFF00000001
    || (int)a1 >= *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8)
    || (v8 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries), HIDWORD(a1) != -1)
    && *(_DWORD *)(v8 + 12 * (int)a1 + 8) != HIDWORD(a1)
    || (result = sub_1B1FEAB68(*(_QWORD *)(*(_QWORD *)(a2 + 136) + 8 * *(int *)(v8 + 12 * (int)a1) + 32), *(_WORD *)(v8 + 12 * (int)a1 + 4), 128, a3, a4, a5, a6), !v6)&& (result & 1) == 0)
  {
    sub_1B2229430();
    sub_1B2228890();
    sub_1B1BC3C70();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    sub_1B2228890();
    sub_1B2228890();
    sub_1B1B4F21C((uint64_t)a3);
    swift_release();
    result = sub_1B2229688();
    __break(1u);
  }
  return result;
}

uint64_t sub_1B1FEAD98(uint64_t a1, __int16 a2, uint64_t a3, uint64_t a4, float a5, float a6)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *i;

  v6 = *(_QWORD *)(a1 + 48);
  v7 = *(_QWORD *)(v6 + 16);
  if (!v7)
    return 0;
  for (i = (_QWORD *)(v6 + 56); (ValueMetadata *)*(i - 3) != &type metadata for ParticleSubSpawn.State; i += 5)
  {
    if (!--v7)
      return 0;
  }
  sub_1B1C86DA8(*(_QWORD *)(a1 + 128) + *i + a2 * a3, a4, a5, a6);
  return 1;
}

uint64_t sub_1B1FEAE04(uint64_t a1, uint64_t a2, uint64_t a3, float a4, float a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  if (a1 == 0xFFFFFFFFLL
    || a1 << 32 < (uint64_t)0xFFFFFFFF00000001
    || (int)a1 >= *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8)
    || (v6 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries), HIDWORD(a1) != -1)
    && *(_DWORD *)(v6 + 12 * (int)a1 + 8) != HIDWORD(a1)
    || (result = sub_1B1FEAD98(*(_QWORD *)(*(_QWORD *)(a2 + 136) + 8 * *(int *)(v6 + 12 * (int)a1) + 32), *(_WORD *)(v6 + 12 * (int)a1 + 4), 64, a3, a4, a5), !v5)&& (result & 1) == 0)
  {
    sub_1B2229430();
    sub_1B2228890();
    sub_1B1BC3C70();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    sub_1B2228890();
    sub_1B2228890();
    result = sub_1B2229688();
    __break(1u);
  }
  return result;
}

uint64_t sub_1B1FEAF9C(uint64_t a1, __int16 a2, uint64_t a3, uint64_t a4, __int16 a5, uint64_t a6, float a7, float a8)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD *i;

  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(_QWORD *)(v8 + 16);
  if (!v9)
    return 0;
  for (i = (_QWORD *)(v8 + 56); (ValueMetadata *)*(i - 3) != &type metadata for ParticleSpawnState; i += 5)
  {
    if (!--v9)
      return 0;
  }
  sub_1B1C80B48(*(_QWORD *)(a1 + 128) + *i + a2 * a3, a4, a5 & 0x101, a6, a7, a8);
  return 1;
}

uint64_t sub_1B1FEB014(uint64_t a1, uint64_t a2, uint64_t a3, __int16 a4, uint64_t a5, float a6, float a7)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t result;

  if (a1 == 0xFFFFFFFFLL
    || a1 << 32 < (uint64_t)0xFFFFFFFF00000001
    || (int)a1 >= *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8)
    || (v9 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries), HIDWORD(a1) != -1)
    && *(_DWORD *)(v9 + 12 * (int)a1 + 8) != HIDWORD(a1)
    || (result = sub_1B1FEAF9C(*(_QWORD *)(*(_QWORD *)(a2 + 136) + 8 * *(int *)(v9 + 12 * (int)a1) + 32), *(_WORD *)(v9 + 12 * (int)a1 + 4), 128, a3, a4 & 0x101, a5, a6, a7), !v7)&& (result & 1) == 0)
  {
    sub_1B2229430();
    sub_1B2228890();
    sub_1B1BC3C70();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    sub_1B2228890();
    sub_1B2228890();
    sub_1B1B4F21C(a3);
    swift_release();
    result = sub_1B2229688();
    __break(1u);
  }
  return result;
}

uint64_t sub_1B1FEB1DC(uint64_t a1, __int16 a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, Swift::Int a7, float a8)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD *i;
  uint64_t v17;
  uint64_t v18;

  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(_QWORD *)(v8 + 16);
  if (!v9)
    return 0;
  for (i = (_QWORD *)(v8 + 56); (ValueMetadata *)*(i - 3) != &type metadata for ParticleSpawnState; i += 5)
  {
    if (!--v9)
      return 0;
  }
  v17 = *(_QWORD *)(a1 + 128) + *i + a2 * a3;
  if (sub_1B1C7F144(v17, a4, a8))
  {
    v18 = a4[4];
    swift_retain();
    sub_1B1BEE528((uint64_t)a4);
    sub_1B1FE8400(v18, a5, a5, (uint64_t)a4, a6, a7, v17, a8);
    sub_1B1B4F21C((uint64_t)a4);
    swift_release();
  }
  return 1;
}

uint64_t sub_1B1FEB2E4(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, Swift::Int a6, float a7)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t result;

  if (a1 == 0xFFFFFFFFLL
    || a1 << 32 < (uint64_t)0xFFFFFFFF00000001
    || (int)a1 >= *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8)
    || (v9 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries), HIDWORD(a1) != -1)
    && *(_DWORD *)(v9 + 12 * (int)a1 + 8) != HIDWORD(a1)
    || (result = sub_1B1FEB1DC(*(_QWORD *)(*(_QWORD *)(a2 + 136) + 8 * *(int *)(v9 + 12 * (int)a1) + 32), *(_WORD *)(v9 + 12 * (int)a1 + 4), 128, a3, a4, a5, a6, a7), !v7)&& (result & 1) == 0)
  {
    sub_1B2229430();
    sub_1B2228890();
    sub_1B1BC3C70();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    sub_1B2228890();
    sub_1B2228890();
    sub_1B1B4F21C((uint64_t)a3);
    swift_release();
    result = sub_1B2229688();
    __break(1u);
  }
  return result;
}

uint64_t sub_1B1FEB4AC(uint64_t a1, __int16 a2, uint64_t a3, uint64_t a4, Swift::Int a5, _QWORD *a6, uint64_t *a7, float a8, float a9, float a10)
{
  uint64_t v10;
  uint64_t v11;
  _QWORD *i;
  uint64_t v17;

  v10 = *(_QWORD *)(a1 + 48);
  v11 = *(_QWORD *)(v10 + 16);
  if (!v11)
    return 0;
  for (i = (_QWORD *)(v10 + 56); (ValueMetadata *)*(i - 3) != &type metadata for EmitterRuntime; i += 5)
  {
    if (!--v11)
      return 0;
  }
  v17 = 1;
  if ((sub_1B1C7F270(0, 1, 0, 1, (uint64_t)a6, a8, a9, a10, *(_QWORD *)(a1 + 128) + *i + a2 * a3 + 8, a7) & 1) != 0)
  {
    a6[10] = 0;
    a6[11] = 0;
    a6[12] = 0;
    if (a5 != a4)
      a5 = sub_1B1C86D20(a5 - a4) + a4;
    if (a5 >= 1)
      sub_1B1CCA790(a5, a6, (uint64_t)a7);
  }
  return v17;
}

uint64_t sub_1B1FEB5A8(uint64_t a1, __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, Swift::Int a7, float a8, float a9, float a10)
{
  uint64_t v10;
  uint64_t v11;
  _QWORD *i;

  v10 = *(_QWORD *)(a1 + 48);
  v11 = *(_QWORD *)(v10 + 16);
  if (!v11)
    return 0;
  for (i = (_QWORD *)(v10 + 56); (ValueMetadata *)*(i - 3) != &type metadata for ParticleSpawnState; i += 5)
  {
    if (!--v11)
      return 0;
  }
  sub_1B1C82AC4((_QWORD *)(*(_QWORD *)(a1 + 128) + *i + a2 * a3), a4, a5, a6, a7, a8, a9, a10);
  return 1;
}

uint64_t sub_1B1FEB620(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, Swift::Int a6, float a7, float a8, float a9)
{
  uint64_t v9;
  uint64_t v11;
  uint64_t result;

  if (a1 == 0xFFFFFFFFLL
    || a1 << 32 < (uint64_t)0xFFFFFFFF00000001
    || (int)a1 >= *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8)
    || (v11 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries), HIDWORD(a1) != -1)
    && *(_DWORD *)(v11 + 12 * (int)a1 + 8) != HIDWORD(a1)
    || (result = sub_1B1FEB5A8(*(_QWORD *)(*(_QWORD *)(a2 + 136) + 8 * *(int *)(v11 + 12 * (int)a1) + 32), *(_WORD *)(v11 + 12 * (int)a1 + 4), 128, a3, a4, a5, a6, a7, a8, a9), !v9)&& (result & 1) == 0)
  {
    sub_1B2229430();
    sub_1B2228890();
    sub_1B1BC3C70();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    sub_1B2228890();
    sub_1B2228890();
    swift_release();
    sub_1B1B4F21C(a4);
    result = sub_1B2229688();
    __break(1u);
  }
  return result;
}

uint64_t sub_1B1FEB7E8(uint64_t a1, __int16 a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v11;
  _QWORD *i;
  uint64_t v20;
  uint64_t v21;

  v10 = *(_QWORD *)(a1 + 48);
  v11 = *(_QWORD *)(v10 + 16);
  if (!v11)
    return 0;
  for (i = (_QWORD *)(v10 + 56); (ValueMetadata *)*(i - 3) != &type metadata for ParticleSpawnState; i += 5)
  {
    if (!--v11)
      return 0;
  }
  v20 = *(_QWORD *)(a1 + 128) + *i + a2 * a3;
  if (!sub_1B1C7F144(v20, a4, a9) || *(_QWORD *)(v20 + 72) || *(float *)v20 > (float)(*(float *)(v20 + 4) + a9))
    return 1;
  v21 = a4[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1B1BEE528((uint64_t)a4);
  sub_1B1FEA99C(v21, a5, a6, a7, a8, a10, a5, (uint64_t)a4);
  sub_1B1B4F21C((uint64_t)a4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return 1;
}

uint64_t sub_1B1FEB938(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float a9)
{
  char v16;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  __int16 v21;

  if (a1 == 0xFFFFFFFFLL)
  {
LABEL_2:
    v16 = 0;
    return v16 & 1;
  }
  v16 = 0;
  if (a1 << 32 >= (uint64_t)0xFFFFFFFF00000001
    && (int)a1 < *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8))
  {
    v18 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
    if (HIDWORD(a1) == -1 || *(_DWORD *)(v18 + 12 * (int)a1 + 8) == HIDWORD(a1))
    {
      v19 = (int *)(v18 + 12 * (int)a1);
      v20 = *(_QWORD *)(*(_QWORD *)(a2 + 136) + 8 * *v19 + 32);
      v21 = *((_WORD *)v19 + 2);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v16 = sub_1B1FEB7E8(v20, v21, 128, a3, a4, a5, a6, a7, a9, a8);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v16 & 1;
    }
    goto LABEL_2;
  }
  return v16 & 1;
}

uint64_t sub_1B1FEBA78(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float a9)
{
  uint64_t v9;
  char v19;
  uint64_t result;

  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v19 = sub_1B1FEB938(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  if (!v9 && (v19 & 1) == 0)
  {
    sub_1B2229430();
    sub_1B2228890();
    sub_1B1BC3C70();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    sub_1B2228890();
    sub_1B2228890();
    sub_1B1B4F21C((uint64_t)a3);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    result = sub_1B2229688();
    __break(1u);
  }
  return result;
}

uint64_t sub_1B1FEBC48(uint64_t a1, __int16 a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *i;

  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(v4 + 16);
  if (!v5)
    return 0;
  for (i = (_QWORD *)(v4 + 56); (ValueMetadata *)*(i - 3) != &type metadata for ParticleFluidSolver2DSolver; i += 5)
  {
    if (!--v5)
      return 0;
  }
  sub_1B1B79740(*(_QWORD *)(a1 + 128) + *i + a2 * a3, a4);
  return 1;
}

uint64_t sub_1B1FEBCB4(uint64_t a1, __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *i;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(v5 + 16);
  if (!v6)
    return 0;
  for (i = (_QWORD *)(v5 + 56); (ValueMetadata *)*(i - 3) != &type metadata for PropagateDirtiness; i += 5)
  {
    if (!--v6)
      return 0;
  }
  v10 = *i + a2 * a3;
  v11 = *(_QWORD *)(a1 + 128);
  swift_retain();
  v12 = sub_1B1A101F0(a5);
  swift_release();
  *(_QWORD *)(v11 + v10) = v12;
  return 1;
}

uint64_t sub_1B1FEBD58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  if (a1 == 0xFFFFFFFFLL
    || a1 << 32 < (uint64_t)0xFFFFFFFF00000001
    || (int)a1 >= *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8)
    || (v5 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries), HIDWORD(a1) != -1)
    && *(_DWORD *)(v5 + 12 * (int)a1 + 8) != HIDWORD(a1)
    || (result = sub_1B1FEBCB4(*(_QWORD *)(*(_QWORD *)(a2 + 136) + 8 * *(int *)(v5 + 12 * (int)a1) + 32), *(_WORD *)(v5 + 12 * (int)a1 + 4), 8, a3, a4), !v4)&& (result & 1) == 0)
  {
    sub_1B2229430();
    sub_1B2228890();
    sub_1B1BC3C70();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    sub_1B2228890();
    sub_1B2228890();
    result = sub_1B2229688();
    __break(1u);
  }
  return result;
}

uint64_t sub_1B1FEBEF8(uint64_t a1, __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *i;
  char *v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  char v26;
  char v27;
  _BYTE v28[8];
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  int v33;
  char v34;
  int v35;
  char v36;
  char v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45;

  v6 = *(_QWORD *)(a1 + 48);
  v7 = *(_QWORD *)(v6 + 16);
  if (!v7)
    return 0;
  for (i = (_QWORD *)(v6 + 56); (ValueMetadata *)*(i - 3) != &type metadata for Material; i += 5)
  {
    if (!--v7)
      return 0;
  }
  v12 = (char *)(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
  v21 = *v12;
  v13 = *((_QWORD *)v12 + 1);
  v14 = *((_DWORD *)v12 + 10);
  v44 = v12[44];
  v45 = v14;
  v15 = *((_DWORD *)v12 + 12);
  v26 = v12[53];
  v27 = v12[52];
  v25 = *((_QWORD *)v12 + 7);
  v24 = v12[64];
  v16 = *((_QWORD *)v12 + 11);
  v22 = *((_QWORD *)v12 + 10);
  v23 = *((_QWORD *)v12 + 9);
  v17 = *((_QWORD *)v12 + 12);
  v18 = sub_1B1FF3364();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  v19 = *((_QWORD *)v12 + 2);
  v20 = sub_1B1DA61CC(a5) << 16 >> 48;
  v28[0] = v21;
  v29 = v13;
  v30 = v19;
  v31 = a6;
  v32 = v18;
  v33 = v45;
  v34 = v44;
  v35 = v15;
  v36 = v27;
  v37 = v26;
  v38 = v25;
  v39 = v24;
  v40 = v23;
  v41 = v22;
  v42 = v16;
  v43 = v17;
  swift_retain();
  sub_1B1FDDC1C(v20, (uint64_t)v28);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  return 1;
}

uint64_t sub_1B1FEC0E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  if (a1 == 0xFFFFFFFFLL
    || a1 << 32 < (uint64_t)0xFFFFFFFF00000001
    || (int)a1 >= *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8)
    || (v4 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries), HIDWORD(a1) != -1)
    && *(_DWORD *)(v4 + 12 * (int)a1 + 8) != HIDWORD(a1)
    || (result = sub_1B1FEBEF8(*(_QWORD *)(*(_QWORD *)(a2 + 136) + 8 * *(int *)(v4 + 12 * (int)a1) + 32), *(_WORD *)(v4 + 12 * (int)a1 + 4), 104, a2, a1, a3), !v3)&& (result & 1) == 0)
  {
    sub_1B2229430();
    sub_1B2228890();
    sub_1B1BC3C70();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    sub_1B2228890();
    sub_1B2228890();
    swift_release();
    result = sub_1B2229688();
    __break(1u);
  }
  return result;
}

__n128 sub_1B1FEC29C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __n128 result;
  __int128 v16;
  __int128 v17;
  _OWORD v18[5];
  _BYTE v19[19];

  v4 = *(_QWORD *)(v2 + 48);
  v5 = *(_QWORD *)(v4 + 16);
  if (v5)
  {
    v6 = (uint64_t *)(v4 + 56);
    while ((ValueMetadata *)*(v6 - 3) != &type metadata for ParticleFlockingSolver)
    {
      v6 += 5;
      if (!--v5)
        goto LABEL_7;
    }
    v5 = *v6;
  }
LABEL_7:
  v7 = *(_QWORD *)(v2 + 128) + v5 + 112 * a1;
  v9 = *(_OWORD *)(v7 + 16);
  v8 = *(_OWORD *)(v7 + 32);
  v18[0] = *(_OWORD *)v7;
  v18[1] = v9;
  v18[2] = v8;
  v11 = *(_OWORD *)(v7 + 64);
  v10 = *(_OWORD *)(v7 + 80);
  v12 = *(_OWORD *)(v7 + 48);
  *(_DWORD *)&v19[15] = *(_DWORD *)(v7 + 95);
  v18[4] = v11;
  *(_OWORD *)v19 = v10;
  v18[3] = v12;
  sub_1B1B7C5AC(a2);
  sub_1B19ED720((uint64_t)v18);
  v14 = *(_OWORD *)(a2 + 16);
  v13 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)v7 = *(_OWORD *)a2;
  *(_OWORD *)(v7 + 16) = v14;
  *(_OWORD *)(v7 + 32) = v13;
  v16 = *(_OWORD *)(a2 + 64);
  result = *(__n128 *)(a2 + 80);
  v17 = *(_OWORD *)(a2 + 48);
  *(_DWORD *)(v7 + 95) = *(_DWORD *)(a2 + 95);
  *(_OWORD *)(v7 + 64) = v16;
  *(__n128 *)(v7 + 80) = result;
  *(_OWORD *)(v7 + 48) = v17;
  return result;
}

uint64_t sub_1B1FEC368(uint64_t a1, __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *i;
  __int128 *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  int v16;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  _BYTE v36[35];
  char v37;
  _QWORD v38[4];
  char v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  __int128 v43;
  uint64_t v44;
  int v45;
  char v46;
  char v47;
  char v48;
  int v49;
  int v50;

  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(v5 + 16);
  if (!v6)
    return 0;
  for (i = (_QWORD *)(v5 + 56); (ValueMetadata *)*(i - 3) != &type metadata for ParticleFlockingSolver; i += 5)
  {
    if (!--v6)
      return 0;
  }
  v10 = (__int128 *)(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
  v12 = v10[3];
  v11 = v10[4];
  v13 = v10[5];
  *(_DWORD *)&v36[31] = *(_DWORD *)((char *)v10 + 95);
  *(_OWORD *)v36 = v11;
  *(_OWORD *)&v36[16] = v13;
  v35 = v12;
  v14 = *v10;
  v15 = v10[2];
  v33 = v10[1];
  v34 = v15;
  v32 = v14;
  v49 = v36[33];
  v50 = v36[34];
  v31 = v36[32];
  v16 = *(_DWORD *)&v36[28];
  v29 = *((_QWORD *)&v12 + 1);
  v30 = v12;
  v17 = v36[0];
  v18 = v15;
  v19 = *((_QWORD *)&v33 + 1);
  type metadata accessor for ParticleFlockingSolverData();
  v20 = swift_allocObject();
  v21 = (char *)MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v20 + 16) = MEMORY[0x1E0DEE9D8];
  v22 = *((_QWORD *)&v32 + 1);
  v23 = v33;
  v28 = *(_OWORD *)&v36[4];
  v24 = *(_QWORD *)&v36[20];
  sub_1B1B7C5AC((uint64_t)&v32);
  v25 = sub_1B1C68894(0, 0x1000000, 0, v21);
  *(_BYTE *)(v20 + 32) = 0;
  *(_QWORD *)(v20 + 40) = v25;
  *(_QWORD *)(v20 + 48) = 0x1000000;
  *(_OWORD *)(v20 + 56) = 0u;
  *(_OWORD *)(v20 + 72) = 0u;
  *(_OWORD *)(v20 + 88) = 0u;
  *(_DWORD *)(v20 + 104) = 0;
  *(_OWORD *)(v20 + 112) = 0u;
  *(_OWORD *)(v20 + 128) = 0u;
  sub_1B19ED720((uint64_t)&v32);
  v26 = sub_1B1DA61CC(a5);
  v37 = v17;
  v38[0] = v20;
  v27 = v26 << 16 >> 48;
  v38[1] = v22;
  v38[2] = v23;
  v38[3] = v19;
  v39 = v18;
  v40 = v30;
  v41 = v29;
  v42 = v17;
  v43 = v28;
  v44 = v24;
  v45 = v16;
  v46 = v31;
  v47 = v49;
  v48 = v50;
  swift_retain();
  sub_1B1FEC29C(v27, (uint64_t)v38);
  swift_release();
  swift_release();
  return 1;
}

uint64_t sub_1B1FEC57C(uint64_t a1, __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, void *a7, void *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *i;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v9 = v8;
  v10 = *(_QWORD *)(a1 + 48);
  v11 = *(_QWORD *)(v10 + 16);
  if (v11)
  {
    for (i = (_QWORD *)(v10 + 56); (ValueMetadata *)*(i - 3) != &type metadata for REMeshAssetPointCache; i += 5)
    {
      if (!--v11)
        return v11 & 1;
    }
    v17 = (uint64_t *)(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
    v18 = v17[1];
    v19 = v17[2];
    v25 = *v17;
    v26 = v18;
    v27 = v19;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1B1E4AECC((uint64_t)&v25, a6, a7, a8);
    if (v9)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      v20 = sub_1B1DA61CC(a5) << 16 >> 48;
      v21 = v25;
      v22 = v26;
      v23 = v27;
      swift_retain();
      sub_1B1FDC8FC(v20, v21, v22, v23);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      LOBYTE(v11) = 1;
    }
  }
  return v11 & 1;
}

uint64_t sub_1B1FEC6DC(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t result;

  if (a1 == 0xFFFFFFFFLL
    || a1 << 32 < (uint64_t)0xFFFFFFFF00000001
    || (int)a1 >= *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8)
    || (v9 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries), HIDWORD(a1) != -1)
    && *(_DWORD *)(v9 + 12 * (int)a1 + 8) != HIDWORD(a1)
    || (result = sub_1B1FEC57C(*(_QWORD *)(*(_QWORD *)(a2 + 136) + 8 * *(int *)(v9 + 12 * (int)a1) + 32), *(_WORD *)(v9 + 12 * (int)a1 + 4), 24, a2, a1, a3, a4, a5), !v5)&& (result & 1) == 0)
  {
    sub_1B2229430();
    sub_1B2228890();
    sub_1B1BC3C70();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    sub_1B2228890();
    sub_1B2228890();

    result = sub_1B2229688();
    __break(1u);
  }
  return result;
}

uint64_t sub_1B1FEC8B4(uint64_t a1, uint64_t a2)
{
  int64_t v2;
  uint64_t v3;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = MEMORY[0x1E0DEE9D8];
  if (v2)
  {
    v26 = MEMORY[0x1E0DEE9D8];
    sub_1B202AF24(0, v2, 0);
    v3 = v26;
    v6 = (uint64_t *)(a1 + 40);
    v21 = a2;
    while (1)
    {
      v23 = v3;
      v24 = v2;
      v7 = *v6;
      v25 = *(v6 - 1);
      v8 = v6[1];
      v9 = v6[2];
      v10 = v6[3];
      v11 = v6[4];
      v12 = v6[5];
      v13 = *(_QWORD *)(a2 + 16);
      swift_bridgeObjectRetain();
      sub_1B19FA2B4(v8, v9);
      if (!v13)
        goto LABEL_7;
      swift_bridgeObjectRetain();
      v14 = sub_1B1DC3B00(v25, v7);
      if ((v15 & 1) == 0)
        break;
      v16 = (uint64_t *)(*(_QWORD *)(a2 + 56) + 16 * v14);
      v25 = *v16;
      v22 = v16[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
LABEL_8:
      v3 = v23;
      sub_1B19FA2B4(v8, v9);
      swift_bridgeObjectRelease();
      sub_1B19F9FEC(v8, v9);
      v18 = *(_QWORD *)(v23 + 16);
      v17 = *(_QWORD *)(v23 + 24);
      if (v18 >= v17 >> 1)
      {
        sub_1B202AF24(v17 > 1, v18 + 1, 1);
        v3 = v23;
      }
      *(_QWORD *)(v3 + 16) = v18 + 1;
      v19 = (_QWORD *)(v3 + 56 * v18);
      a2 = v21;
      v19[4] = v25;
      v19[5] = v22;
      v19[6] = v8;
      v19[7] = v9;
      v19[8] = v10;
      v19[9] = v11;
      v19[10] = v12;
      v6 += 7;
      v2 = v24 - 1;
      if (v24 == 1)
        return v3;
    }
    swift_bridgeObjectRelease();
LABEL_7:
    swift_bridgeObjectRetain();
    v22 = v7;
    goto LABEL_8;
  }
  return v3;
}

uint64_t sub_1B1FECA74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  _QWORD *v7;

  v4 = *(_QWORD *)(v3 + 48);
  v5 = *(_QWORD *)(v4 + 16);
  if (v5)
  {
    v6 = (uint64_t *)(v4 + 56);
    while ((ValueMetadata *)*(v6 - 3) != &type metadata for Name)
    {
      v6 += 5;
      if (!--v5)
        goto LABEL_7;
    }
    v5 = *v6;
  }
LABEL_7:
  v7 = (_QWORD *)(*(_QWORD *)(v3 + 128) + v5 + 16 * a1);
  *v7 = a2;
  v7[1] = a3;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B1FECAE4(uint64_t result, __n128 a2, __n128 a3, __n128 a4, __n128 a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  __n128 *v9;

  v6 = *(_QWORD *)(v5 + 48);
  v7 = *(_QWORD *)(v6 + 16);
  if (v7)
  {
    v8 = (uint64_t *)(v6 + 56);
    while ((ValueMetadata *)*(v8 - 3) != &type metadata for WorldTransform)
    {
      v8 += 5;
      if (!--v7)
        goto LABEL_7;
    }
    v7 = *v8;
  }
LABEL_7:
  v9 = (__n128 *)(*(_QWORD *)(v5 + 128) + v7 + (result << 6));
  *v9 = a2;
  v9[1] = a3;
  v9[2] = a4;
  v9[3] = a5;
  return result;
}

uint64_t sub_1B1FECB34(uint64_t result, __n128 a2, __n128 a3, __n128 a4, __n128 a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  __n128 *v9;

  v6 = *(_QWORD *)(v5 + 48);
  v7 = *(_QWORD *)(v6 + 16);
  if (v7)
  {
    v8 = (uint64_t *)(v6 + 56);
    while ((ValueMetadata *)*(v8 - 3) != &type metadata for InverseWorldTransform)
    {
      v8 += 5;
      if (!--v7)
        goto LABEL_7;
    }
    v7 = *v8;
  }
LABEL_7:
  v9 = (__n128 *)(*(_QWORD *)(v5 + 128) + v7 + (result << 6));
  *v9 = a2;
  v9[1] = a3;
  v9[2] = a4;
  v9[3] = a5;
  return result;
}

uint64_t sub_1B1FECB84(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  v4 = *(_QWORD *)(v2 + 48);
  v5 = *(_QWORD *)(v4 + 16);
  if (v5)
  {
    v6 = (uint64_t *)(v4 + 56);
    while ((ValueMetadata *)*(v6 - 3) != &type metadata for ScriptsHolder)
    {
      v6 += 5;
      if (!--v5)
        goto LABEL_7;
    }
    v5 = *v6;
  }
LABEL_7:
  v7 = v5 + 8 * a1;
  v8 = *(_QWORD *)(v2 + 128);
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v8 + v7) = a2;
  return result;
}

__n128 sub_1B1FECC00(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __n128 result;

  v3 = *(_QWORD *)(v2 + 48);
  v4 = *(_QWORD *)(v3 + 16);
  if (v4)
  {
    v5 = (uint64_t *)(v3 + 56);
    while ((ValueMetadata *)*(v5 - 3) != &type metadata for ForceField)
    {
      v5 += 5;
      if (!--v4)
        goto LABEL_7;
    }
    v4 = *v5;
  }
LABEL_7:
  v6 = *(_QWORD *)(v2 + 128) + v4 + 144 * a1;
  v7 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(v6 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(v6 + 112) = v7;
  *(_OWORD *)(v6 + 124) = *(_OWORD *)(a2 + 124);
  v8 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v6 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v6 + 48) = v8;
  v9 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(v6 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v6 + 80) = v9;
  result = *(__n128 *)(a2 + 16);
  *(_OWORD *)v6 = *(_OWORD *)a2;
  *(__n128 *)(v6 + 16) = result;
  return result;
}

uint64_t sub_1B1FECC74(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;

  v3 = *(_QWORD *)(v2 + 48);
  v4 = *(_QWORD *)(v3 + 16);
  if (v4)
  {
    v5 = (uint64_t *)(v3 + 56);
    while ((ValueMetadata *)*(v5 - 3) != &type metadata for PropagateDirtiness)
    {
      v5 += 5;
      if (!--v4)
        goto LABEL_7;
    }
    v4 = *v5;
  }
LABEL_7:
  *(_QWORD *)(*(_QWORD *)(v2 + 128) + v4 + 8 * result) = a2;
  return result;
}

uint64_t sub_1B1FECCBC(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v5;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t result;

  v9 = a2;
  v10 = *(_QWORD *)(v5 + 48);
  v11 = *(_QWORD *)(v10 + 16);
  if (v11)
  {
    v12 = (uint64_t *)(v10 + 56);
    while ((ValueMetadata *)*(v12 - 3) != &type metadata for GraphScriptingConfig)
    {
      v12 += 5;
      if (!--v11)
        goto LABEL_7;
    }
    v11 = *v12;
  }
LABEL_7:
  v13 = a2 >> 8;
  v14 = *(_QWORD *)(v5 + 128) + v11 + 32 * a1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_BYTE *)v14 = v9;
  *(_BYTE *)(v14 + 1) = v13;
  *(_QWORD *)(v14 + 8) = a3;
  *(_QWORD *)(v14 + 16) = a4;
  *(_BYTE *)(v14 + 24) = a5 & 1;
  *(_BYTE *)(v14 + 25) = BYTE1(a5) & 1;
  *(_BYTE *)(v14 + 26) = BYTE2(a5) & 1;
  return result;
}

uint64_t sub_1B1FECD8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  _QWORD *v9;
  uint64_t result;

  v6 = *(_QWORD *)(v3 + 48);
  v7 = *(_QWORD *)(v6 + 16);
  if (v7)
  {
    v8 = (uint64_t *)(v6 + 56);
    while ((ValueMetadata *)*(v8 - 3) != &type metadata for VFXTag)
    {
      v8 += 5;
      if (!--v7)
        goto LABEL_7;
    }
    v7 = *v8;
  }
LABEL_7:
  v9 = (_QWORD *)(*(_QWORD *)(v3 + 128) + v7 + 16 * a1);
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRelease();
  *v9 = a2;
  v9[1] = a3;
  return result;
}

uint64_t sub_1B1FECE10(uint64_t a1, uint64_t a2)
{
  return sub_1B1FED06C(a1, a2, &qword_1ED4BB250, type metadata accessor for TriggerScript, (uint64_t)&off_1ED4BEFD8);
}

uint64_t sub_1B1FECE2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B1FECE80(a1, a2, a3, &qword_1ED4BB3C0, type metadata accessor for TriggerScript, (uint64_t)&off_1ED4BEFD8);
}

uint64_t sub_1B1FECE48(uint64_t a1, uint64_t a2)
{
  return sub_1B1FED06C(a1, a2, &qword_1ED4B88A0, type metadata accessor for ParticleUpdateScript, (uint64_t)&off_1ED4BD280);
}

uint64_t sub_1B1FECE64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B1FECE80(a1, a2, a3, (unint64_t *)&unk_1ED4B9910, type metadata accessor for ParticleUpdateScript, (uint64_t)&off_1ED4BD280);
}

uint64_t sub_1B1FECE80(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, uint64_t (*a5)(uint64_t), uint64_t a6)
{
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t result;

  v10 = *(_QWORD *)(v6 + 48);
  sub_1B1A1B6FC(0, a4, a5, a6, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptStateRestoration);
  v12 = *(_QWORD *)(v10 + 16);
  if (v12)
  {
    v13 = (uint64_t *)(v10 + 56);
    while (*(v13 - 3) != v11)
    {
      v13 += 5;
      if (!--v12)
        goto LABEL_7;
    }
    v12 = *v13;
  }
LABEL_7:
  v14 = (_QWORD *)(*(_QWORD *)(v6 + 128) + v12 + 16 * a1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *v14 = a2;
  v14[1] = a3;
  return result;
}

uint64_t sub_1B1FECF38(uint64_t a1, uint64_t a2)
{
  return sub_1B1FED06C(a1, a2, &qword_1ED4B8890, type metadata accessor for ParticleInitScript, (uint64_t)&off_1ED4BCD90);
}

uint64_t sub_1B1FECF54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B1FECE80(a1, a2, a3, (unint64_t *)&unk_1ED4B9900, type metadata accessor for ParticleInitScript, (uint64_t)&off_1ED4BCD90);
}

uint64_t sub_1B1FECF70(uint64_t a1, uint64_t a2)
{
  return sub_1B1FED06C(a1, a2, (unint64_t *)&qword_1ED4B88C0, type metadata accessor for ShaderScript, (uint64_t)&off_1ED4BC090);
}

uint64_t sub_1B1FECF8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B1FECE80(a1, a2, a3, (unint64_t *)&unk_1ED4B9930, type metadata accessor for ShaderScript, (uint64_t)&off_1ED4BC090);
}

uint64_t sub_1B1FECFA8(uint64_t a1, uint64_t a2)
{
  return sub_1B1FED06C(a1, a2, (unint64_t *)&qword_1ED4BB240, type metadata accessor for MetalFunctionScript, (uint64_t)&off_1ED4BF0F8);
}

uint64_t sub_1B1FECFC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B1FECE80(a1, a2, a3, (unint64_t *)&unk_1ED4BB3B0, type metadata accessor for MetalFunctionScript, (uint64_t)&off_1ED4BF0F8);
}

uint64_t sub_1B1FECFE0(uint64_t a1, uint64_t a2)
{
  return sub_1B1FED06C(a1, a2, (unint64_t *)&unk_1ED4B88D0, type metadata accessor for SimpleScript, (uint64_t)&off_1ED4BC1D8);
}

uint64_t sub_1B1FECFFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B1FECE80(a1, a2, a3, (unint64_t *)&unk_1ED4B9940, type metadata accessor for SimpleScript, (uint64_t)&off_1ED4BC1D8);
}

uint64_t sub_1B1FED018(uint64_t a1, uint64_t a2)
{
  return sub_1B1FED06C(a1, a2, (unint64_t *)&unk_1ED4B88B0, type metadata accessor for GraphScript, (uint64_t)&off_1ED4BBD80);
}

uint64_t sub_1B1FED034(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B1FECE80(a1, a2, a3, (unint64_t *)&unk_1ED4B9920, type metadata accessor for GraphScript, (uint64_t)&off_1ED4BBD80);
}

uint64_t sub_1B1FED050(uint64_t a1, uint64_t a2)
{
  return sub_1B1FED06C(a1, a2, (unint64_t *)&unk_1ED4B88E0, type metadata accessor for EmitterScript, (uint64_t)&off_1ED4BC418);
}

uint64_t sub_1B1FED06C(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t), uint64_t a5)
{
  uint64_t v5;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *i;

  v11 = *(_QWORD *)(v5 + 48);
  sub_1B1A1B6FC(0, a3, a4, a5, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptRuntime);
  v13 = *(_QWORD *)(v11 + 16);
  if (v13)
  {
    for (i = (uint64_t *)(v11 + 56); *(i - 3) != v12; i += 5)
    {
      if (!--v13)
        return sub_1B1FF33AC(a2, *(_QWORD *)(v5 + 128) + v13 + *(_QWORD *)(*(_QWORD *)(v12 - 8) + 72) * a1, a3, a4, a5);
    }
    v13 = *i;
  }
  return sub_1B1FF33AC(a2, *(_QWORD *)(v5 + 128) + v13 + *(_QWORD *)(*(_QWORD *)(v12 - 8) + 72) * a1, a3, a4, a5);
}

uint64_t sub_1B1FED124(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B1FECE80(a1, a2, a3, &qword_1ED4B9950, type metadata accessor for EmitterScript, (uint64_t)&off_1ED4BC418);
}

__n128 sub_1B1FED140(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  __int128 v7;
  __n128 result;

  v3 = *(_QWORD *)(v2 + 48);
  v4 = *(_QWORD *)(v3 + 16);
  if (v4)
  {
    v5 = (uint64_t *)(v3 + 56);
    while ((ValueMetadata *)*(v5 - 3) != &type metadata for SkinnedMeshBinding)
    {
      v5 += 5;
      if (!--v4)
        goto LABEL_7;
    }
    v4 = *v5;
  }
LABEL_7:
  v6 = *(_QWORD *)(v2 + 128) + v4 + 80 * a1;
  v7 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v6 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v6 + 48) = v7;
  *(_OWORD *)(v6 + 64) = *(_OWORD *)(a2 + 64);
  result = *(__n128 *)(a2 + 16);
  *(_OWORD *)v6 = *(_OWORD *)a2;
  *(__n128 *)(v6 + 16) = result;
  return result;
}

__n128 sub_1B1FED1A4(uint64_t a1, __n128 *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  __n128 result;
  __n128 v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char v16[8];

  v4 = *(_QWORD *)(v2 + 48);
  v5 = *(_QWORD *)(v4 + 16);
  if (v5)
  {
    v6 = (uint64_t *)(v4 + 56);
    while ((ValueMetadata *)*(v6 - 3) != &type metadata for Skeleton)
    {
      v6 += 5;
      if (!--v5)
        goto LABEL_7;
    }
    v5 = *v6;
  }
LABEL_7:
  v7 = *(_QWORD *)(v2 + 128) + v5 + 40 * a1;
  sub_1B1A025EC((uint64_t)a2, (uint64_t)v16, (uint64_t (*)(_QWORD))sub_1B1FF3408);
  v8 = a2->n128_u64[1];
  v14 = a2[1].n128_u64[0];
  v15 = v8;
  v9 = a2[1].n128_u64[1];
  v12 = a2[2].n128_u64[0];
  v13 = v9;
  sub_1B1B7C5AC((uint64_t)v16);
  sub_1B1B28C44((uint64_t)&v15);
  sub_1B1B28C44((uint64_t)&v14);
  sub_1B1B28C44((uint64_t)&v13);
  sub_1B1B28C44((uint64_t)&v12);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  result = *a2;
  v11 = a2[1];
  *(_QWORD *)(v7 + 32) = a2[2].n128_u64[0];
  *(__n128 *)v7 = result;
  *(__n128 *)(v7 + 16) = v11;
  return result;
}

uint64_t sub_1B1FED2B8(uint64_t result, __n128 a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;

  v3 = *(_QWORD *)(v2 + 48);
  v4 = *(_QWORD *)(v3 + 16);
  if (v4)
  {
    v5 = (uint64_t *)(v3 + 56);
    while ((ValueMetadata *)*(v5 - 3) != &type metadata for Scale3)
    {
      v5 += 5;
      if (!--v4)
        goto LABEL_7;
    }
    v4 = *v5;
  }
LABEL_7:
  *(__n128 *)(*(_QWORD *)(v2 + 128) + v4 + 16 * result) = a2;
  return result;
}

uint64_t sub_1B1FED300(uint64_t result, float a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;

  v3 = *(_QWORD *)(v2 + 48);
  v4 = *(_QWORD *)(v3 + 16);
  if (v4)
  {
    v5 = (uint64_t *)(v3 + 56);
    while ((ValueMetadata *)*(v5 - 3) != &type metadata for AmbientLight)
    {
      v5 += 5;
      if (!--v4)
        goto LABEL_7;
    }
    v4 = *v5;
  }
LABEL_7:
  *(float *)(*(_QWORD *)(v2 + 128) + v4 + 4 * result) = a2;
  return result;
}

uint64_t sub_1B1FED348(uint64_t result, float a2, float a3, float a4, float a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  float *v9;

  v6 = *(_QWORD *)(v5 + 48);
  v7 = *(_QWORD *)(v6 + 16);
  if (v7)
  {
    v8 = (uint64_t *)(v6 + 56);
    while ((ValueMetadata *)*(v8 - 3) != &type metadata for DirectionalLight)
    {
      v8 += 5;
      if (!--v7)
        goto LABEL_7;
    }
    v7 = *v8;
  }
LABEL_7:
  v9 = (float *)(*(_QWORD *)(v5 + 128) + v7 + 16 * result);
  *v9 = a2;
  v9[1] = a3;
  v9[2] = a4;
  v9[3] = a5;
  return result;
}

__n128 sub_1B1FED398(uint64_t a1, __n128 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  __n128 result;

  v3 = *(_QWORD *)(v2 + 48);
  v4 = *(_QWORD *)(v3 + 16);
  if (v4)
  {
    v5 = (uint64_t *)(v3 + 56);
    while ((ValueMetadata *)*(v5 - 3) != &type metadata for SpotLight)
    {
      v5 += 5;
      if (!--v4)
        goto LABEL_7;
    }
    v4 = *v5;
  }
LABEL_7:
  v6 = *(_QWORD *)(v2 + 128) + v4 + 24 * a1;
  result = *a2;
  *(__n128 *)v6 = *a2;
  *(_QWORD *)(v6 + 16) = a2[1].n128_u64[0];
  return result;
}

uint64_t sub_1B1FED3F4(uint64_t result, float a2, float a3, float a4, float a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  float *v9;

  v6 = *(_QWORD *)(v5 + 48);
  v7 = *(_QWORD *)(v6 + 16);
  if (v7)
  {
    v8 = (uint64_t *)(v6 + 56);
    while ((ValueMetadata *)*(v8 - 3) != &type metadata for PointLight)
    {
      v8 += 5;
      if (!--v7)
        goto LABEL_7;
    }
    v7 = *v8;
  }
LABEL_7:
  v9 = (float *)(*(_QWORD *)(v5 + 128) + v7 + 16 * result);
  *v9 = a2;
  v9[1] = a3;
  v9[2] = a4;
  v9[3] = a5;
  return result;
}

__n128 sub_1B1FED444(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  __int128 v7;
  __n128 result;

  v3 = *(_QWORD *)(v2 + 48);
  v4 = *(_QWORD *)(v3 + 16);
  if (v4)
  {
    v5 = (uint64_t *)(v3 + 56);
    while ((ValueMetadata *)*(v5 - 3) != &type metadata for PerspectiveCamera)
    {
      v5 += 5;
      if (!--v4)
        goto LABEL_7;
    }
    v4 = *v5;
  }
LABEL_7:
  v6 = *(_QWORD *)(v2 + 128) + v4 + 48 * a1;
  v7 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v6 = *(_OWORD *)a2;
  *(_OWORD *)(v6 + 16) = v7;
  result = *(__n128 *)(a2 + 32);
  *(__n128 *)(v6 + 32) = result;
  return result;
}

__n128 sub_1B1FED4A0(uint64_t a1, __n128 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  __n128 result;

  v3 = *(_QWORD *)(v2 + 48);
  v4 = *(_QWORD *)(v3 + 16);
  if (v4)
  {
    v5 = (uint64_t *)(v3 + 56);
    while ((ValueMetadata *)*(v5 - 3) != &type metadata for OrthographicCamera)
    {
      v5 += 5;
      if (!--v4)
        goto LABEL_7;
    }
    v4 = *v5;
  }
LABEL_7:
  v6 = *(_QWORD *)(v2 + 128) + v4 + 20 * a1;
  result = *a2;
  *(__n128 *)v6 = *a2;
  *(_BYTE *)(v6 + 16) = a2[1].n128_u8[0];
  return result;
}

uint64_t sub_1B1FED4FC(uint64_t result, float a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;

  v3 = *(_QWORD *)(v2 + 48);
  v4 = *(_QWORD *)(v3 + 16);
  if (v4)
  {
    v5 = (uint64_t *)(v3 + 56);
    while ((ValueMetadata *)*(v5 - 3) != &type metadata for Opacity)
    {
      v5 += 5;
      if (!--v4)
        goto LABEL_7;
    }
    v4 = *v5;
  }
LABEL_7:
  *(float *)(*(_QWORD *)(v2 + 128) + v4 + 4 * result) = a2;
  return result;
}

uint64_t sub_1B1FED544(uint64_t result, __n128 a2, __n128 a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  __n128 *v7;

  v4 = *(_QWORD *)(v3 + 48);
  v5 = *(_QWORD *)(v4 + 16);
  if (v5)
  {
    v6 = (uint64_t *)(v4 + 56);
    while ((ValueMetadata *)*(v6 - 3) != &type metadata for LocalAABB)
    {
      v6 += 5;
      if (!--v5)
        goto LABEL_7;
    }
    v5 = *v6;
  }
LABEL_7:
  v7 = (__n128 *)(*(_QWORD *)(v3 + 128) + v5 + 32 * result);
  *v7 = a2;
  v7[1] = a3;
  return result;
}

uint64_t sub_1B1FED590(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *i;

  v3 = *(_QWORD *)(v2 + 48);
  v4 = *(_QWORD *)(v3 + 16);
  if (v4)
  {
    for (i = (uint64_t *)(v3 + 56); (ValueMetadata *)*(i - 3) != &type metadata for NodeVisibilityController; i += 5)
    {
      if (!--v4)
        return sub_1B1FF342C(a2, *(_QWORD *)(v2 + 128) + v4 + 40 * a1);
    }
    v4 = *i;
  }
  return sub_1B1FF342C(a2, *(_QWORD *)(v2 + 128) + v4 + 40 * a1);
}

uint64_t sub_1B1FED5E4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *i;

  v3 = *(_QWORD *)(v2 + 48);
  v4 = *(_QWORD *)(v3 + 16);
  if (v4)
  {
    for (i = (uint64_t *)(v3 + 56); (ValueMetadata *)*(i - 3) != &type metadata for NodeTransformController; i += 5)
    {
      if (!--v4)
        return sub_1B1FF3468(a2, *(_QWORD *)(v2 + 128) + v4 + 40 * a1);
    }
    v4 = *i;
  }
  return sub_1B1FF3468(a2, *(_QWORD *)(v2 + 128) + v4 + 40 * a1);
}

uint64_t sub_1B1FED638(uint64_t result, __n128 a2, __n128 a3, __n128 a4, __n128 a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  __n128 *v9;

  v6 = *(_QWORD *)(v5 + 48);
  v7 = *(_QWORD *)(v6 + 16);
  if (v7)
  {
    v8 = (uint64_t *)(v6 + 56);
    while ((ValueMetadata *)*(v8 - 3) != &type metadata for ProjectionMatrix)
    {
      v8 += 5;
      if (!--v7)
        goto LABEL_7;
    }
    v7 = *v8;
  }
LABEL_7:
  v9 = (__n128 *)(*(_QWORD *)(v5 + 128) + v7 + (result << 6));
  *v9 = a2;
  v9[1] = a3;
  v9[2] = a4;
  v9[3] = a5;
  return result;
}

uint64_t sub_1B1FED688(uint64_t result, __n128 a2, __n128 a3, __n128 a4, __n128 a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  __n128 *v9;

  v6 = *(_QWORD *)(v5 + 48);
  v7 = *(_QWORD *)(v6 + 16);
  if (v7)
  {
    v8 = (uint64_t *)(v6 + 56);
    while ((ValueMetadata *)*(v8 - 3) != &type metadata for LastFrameWorldTransform)
    {
      v8 += 5;
      if (!--v7)
        goto LABEL_7;
    }
    v7 = *v8;
  }
LABEL_7:
  v9 = (__n128 *)(*(_QWORD *)(v5 + 128) + v7 + (result << 6));
  *v9 = a2;
  v9[1] = a3;
  v9[2] = a4;
  v9[3] = a5;
  return result;
}

uint64_t sub_1B1FED6D8(uint64_t a1, __int16 a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[7];
  unint64_t v20;
  _QWORD v21[5];
  char v22;
  uint64_t v23;

  sub_1B1A10AA4(*(_QWORD *)(a1 + 40), a6, v21);
  if (LOBYTE(v21[0]) == 1)
    return sub_1B1A11EB4(a2, a3, **(_QWORD **)(a4 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues), a6, a7);
  v20 = a5;
  v23 = a3;
  v15 = *(uint64_t **)(a4 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues);
  ecs_stack_allocator_push_snapshot(*(_QWORD *)(*v15 + 32));
  v16 = *v15;
  sub_1B1A10AA4(*(_QWORD *)(a1 + 40), a6, v21);
  if ((v21[0] & 1) == 0)
  {
    v21[0] = a6;
    v21[1] = a7;
    v22 = 0;
    sub_1B1F05960((uint64_t *)(v16 + 104), (uint64_t)v21, a2, 0, a1, v16);
    sub_1B1B68F14((uint64_t)v21);
  }
  sub_1B1F03804((char *)a1);
  v17 = sub_1B1F24AA4(a6);
  if (v17 >= 1)
  {
    MEMORY[0x1E0C80A78](v17, v18);
    v19[2] = a6;
    v19[3] = a7;
    v19[4] = v23;
    sub_1B1FD6B40(a6, v20, (void (*)(char *))sub_1B1FF32D4, (uint64_t)v19, a6, a7);
  }
  return ecs_stack_allocator_pop_snapshot(*(_QWORD *)(*v15 + 32));
}

uint64_t sub_1B1FED88C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  v4 = *(_QWORD *)(v2 + 48);
  v5 = *(_QWORD *)(v4 + 16);
  if (v5)
  {
    v6 = (uint64_t *)(v4 + 56);
    while ((ValueMetadata *)*(v6 - 3) != &type metadata for MetalScriptReflection)
    {
      v6 += 5;
      if (!--v5)
        goto LABEL_7;
    }
    v5 = *v6;
  }
LABEL_7:
  v7 = v5 + 8 * a1;
  v8 = *(_QWORD *)(v2 + 128);
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v8 + v7) = a2;
  return result;
}

uint64_t sub_1B1FED908(uint64_t result, char a2, float a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;

  v4 = *(_QWORD *)(v3 + 48);
  v5 = *(_QWORD *)(v4 + 16);
  if (v5)
  {
    v6 = (uint64_t *)(v4 + 56);
    while ((ValueMetadata *)*(v6 - 3) != &type metadata for ParticleDrag)
    {
      v6 += 5;
      if (!--v5)
        goto LABEL_7;
    }
    v5 = *v6;
  }
LABEL_7:
  v7 = *(_QWORD *)(v3 + 128) + v5 + 8 * result;
  *(float *)v7 = a3;
  *(_BYTE *)(v7 + 4) = a2 & 1;
  return result;
}

uint64_t sub_1B1FED95C(uint64_t result, unsigned __int8 a2, __n128 a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  __n128 *v7;

  v4 = *(_QWORD *)(v3 + 48);
  v5 = *(_QWORD *)(v4 + 16);
  if (v5)
  {
    v6 = (uint64_t *)(v4 + 56);
    while ((ValueMetadata *)*(v6 - 3) != &type metadata for ParticleForce)
    {
      v6 += 5;
      if (!--v5)
        goto LABEL_7;
    }
    v5 = *v6;
  }
LABEL_7:
  v7 = (__n128 *)(*(_QWORD *)(v3 + 128) + v5 + 32 * result);
  *v7 = a3;
  v7[1].n128_u8[0] = a2;
  return result;
}

__n128 sub_1B1FED9AC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  __int128 v7;
  __n128 result;

  v3 = *(_QWORD *)(v2 + 48);
  v4 = *(_QWORD *)(v3 + 16);
  if (v4)
  {
    v5 = (uint64_t *)(v3 + 56);
    while ((ValueMetadata *)*(v5 - 3) != &type metadata for ParticleNoise)
    {
      v5 += 5;
      if (!--v4)
        goto LABEL_7;
    }
    v4 = *v5;
  }
LABEL_7:
  v6 = *(_QWORD *)(v2 + 128) + v4 + (a1 << 6);
  v7 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v6 = *(_OWORD *)a2;
  *(_OWORD *)(v6 + 16) = v7;
  result = *(__n128 *)(a2 + 32);
  *(__n128 *)(v6 + 32) = result;
  *(_BYTE *)(v6 + 48) = *(_BYTE *)(a2 + 48);
  return result;
}

__n128 sub_1B1FEDA0C(uint64_t a1, __n128 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  __n128 result;

  v3 = *(_QWORD *)(v2 + 48);
  v4 = *(_QWORD *)(v3 + 16);
  if (v4)
  {
    v5 = (uint64_t *)(v3 + 56);
    while ((ValueMetadata *)*(v5 - 3) != &type metadata for ParticleCollide)
    {
      v5 += 5;
      if (!--v4)
        goto LABEL_7;
    }
    v4 = *v5;
  }
LABEL_7:
  v6 = *(_QWORD *)(v2 + 128) + v4 + 24 * a1;
  result = *a2;
  *(__n128 *)v6 = *a2;
  *(_QWORD *)(v6 + 16) = a2[1].n128_u64[0];
  return result;
}

uint64_t sub_1B1FEDA68(uint64_t result, char a2, float a3, float a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;

  v5 = *(_QWORD *)(v4 + 48);
  v6 = *(_QWORD *)(v5 + 16);
  if (v6)
  {
    v7 = (uint64_t *)(v5 + 56);
    while ((ValueMetadata *)*(v7 - 3) != &type metadata for ParticleLifeInit)
    {
      v7 += 5;
      if (!--v6)
        goto LABEL_7;
    }
    v6 = *v7;
  }
LABEL_7:
  v8 = *(_QWORD *)(v4 + 128) + v6 + 12 * result;
  *(float *)v8 = a3;
  *(float *)(v8 + 4) = a4;
  *(_BYTE *)(v8 + 8) = a2 & 1;
  return result;
}

uint64_t sub_1B1FEDAC0(uint64_t result, float a2, float a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  float *v7;

  v4 = *(_QWORD *)(v3 + 48);
  v5 = *(_QWORD *)(v4 + 16);
  if (v5)
  {
    v6 = (uint64_t *)(v4 + 56);
    while ((ValueMetadata *)*(v6 - 3) != &type metadata for ParticleMassInit)
    {
      v6 += 5;
      if (!--v5)
        goto LABEL_7;
    }
    v5 = *v6;
  }
LABEL_7:
  v7 = (float *)(*(_QWORD *)(v3 + 128) + v5 + 8 * result);
  *v7 = a2;
  v7[1] = a3;
  return result;
}

__n128 sub_1B1FEDB0C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  __n128 result;
  __int128 v8;

  v3 = *(_QWORD *)(v2 + 48);
  v4 = *(_QWORD *)(v3 + 16);
  if (v4)
  {
    v5 = (uint64_t *)(v3 + 56);
    while ((ValueMetadata *)*(v5 - 3) != &type metadata for WrapAroundCamera)
    {
      v5 += 5;
      if (!--v4)
        goto LABEL_7;
    }
    v4 = *v5;
  }
LABEL_7:
  v6 = *(_QWORD *)(v2 + 128) + v4 + 40 * a1;
  result = *(__n128 *)a2;
  v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v6 = *(_OWORD *)a2;
  *(_OWORD *)(v6 + 16) = v8;
  *(_QWORD *)(v6 + 29) = *(_QWORD *)(a2 + 29);
  return result;
}

uint64_t sub_1B1FEDB68(uint64_t result, float a2, float a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  float *v7;

  v4 = *(_QWORD *)(v3 + 48);
  v5 = *(_QWORD *)(v4 + 16);
  if (v5)
  {
    v6 = (uint64_t *)(v4 + 56);
    while ((ValueMetadata *)*(v6 - 3) != &type metadata for ParticleAngleInit)
    {
      v6 += 5;
      if (!--v5)
        goto LABEL_7;
    }
    v5 = *v6;
  }
LABEL_7:
  v7 = (float *)(*(_QWORD *)(v3 + 128) + v5 + 8 * result);
  *v7 = a2;
  v7[1] = a3;
  return result;
}

__n128 sub_1B1FEDBB4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  __n128 result;
  __int128 v9;
  __int128 v10;

  v4 = *(_QWORD *)(v2 + 48);
  v5 = *(_QWORD *)(v4 + 16);
  if (v5)
  {
    v6 = (uint64_t *)(v4 + 56);
    while ((ValueMetadata *)*(v6 - 3) != &type metadata for ParticleColorInit)
    {
      v6 += 5;
      if (!--v5)
        goto LABEL_7;
    }
    v5 = *v6;
  }
LABEL_7:
  v7 = *(_QWORD *)(v2 + 128) + v5 + 80 * a1;
  sub_1B1FEE6A4(a2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)v7 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v9 = *(_OWORD *)(a2 + 32);
  v10 = *(_OWORD *)(a2 + 48);
  *(_BYTE *)(v7 + 64) = *(_BYTE *)(a2 + 64);
  *(_OWORD *)(v7 + 32) = v9;
  *(_OWORD *)(v7 + 48) = v10;
  *(__n128 *)(v7 + 16) = result;
  return result;
}

__n128 sub_1B1FEDC5C(uint64_t a1, __n128 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  __n128 result;

  v3 = *(_QWORD *)(v2 + 48);
  v4 = *(_QWORD *)(v3 + 16);
  if (v4)
  {
    v5 = (uint64_t *)(v3 + 56);
    while ((ValueMetadata *)*(v5 - 3) != &type metadata for ParticlePivotInit)
    {
      v5 += 5;
      if (!--v4)
        goto LABEL_7;
    }
    v4 = *v5;
  }
LABEL_7:
  v6 = *(_QWORD *)(v2 + 128) + v4 + 24 * a1;
  result = *a2;
  *(__n128 *)v6 = *a2;
  *(_QWORD *)(v6 + 16) = a2[1].n128_u64[0];
  return result;
}

uint64_t sub_1B1FEDCB8(uint64_t result, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;

  v4 = *(_QWORD *)(v3 + 48);
  v5 = *(_QWORD *)(v4 + 16);
  if (v5)
  {
    v6 = (uint64_t *)(v4 + 56);
    while ((ValueMetadata *)*(v6 - 3) != &type metadata for PointCacheSpawner)
    {
      v6 += 5;
      if (!--v5)
        goto LABEL_7;
    }
    v5 = *v6;
  }
LABEL_7:
  v7 = *(_QWORD *)(v3 + 128) + v5 + 12 * result;
  *(_QWORD *)v7 = a2;
  *(_BYTE *)(v7 + 8) = a3 & 1;
  *(_BYTE *)(v7 + 9) = BYTE1(a3) & 1;
  *(_BYTE *)(v7 + 10) = BYTE2(a3) & 1;
  *(_BYTE *)(v7 + 11) = HIBYTE(a3) & 1;
  return result;
}

uint64_t sub_1B1FEDD2C(uint64_t result, float a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;

  v3 = *(_QWORD *)(v2 + 48);
  v4 = *(_QWORD *)(v3 + 16);
  if (v4)
  {
    v5 = (uint64_t *)(v3 + 56);
    while ((ValueMetadata *)*(v5 - 3) != &type metadata for DistanceConstraint)
    {
      v5 += 5;
      if (!--v4)
        goto LABEL_7;
    }
    v4 = *v5;
  }
LABEL_7:
  *(float *)(*(_QWORD *)(v2 + 128) + v4 + 4 * result) = a2;
  return result;
}

uint64_t sub_1B1FEDD74(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  _QWORD *v7;

  v4 = *(_QWORD *)(v3 + 48);
  v5 = *(_QWORD *)(v4 + 16);
  if (v5)
  {
    v6 = (uint64_t *)(v4 + 56);
    while ((ValueMetadata *)*(v6 - 3) != &type metadata for ParticleBurstSpawn)
    {
      v6 += 5;
      if (!--v5)
        goto LABEL_7;
    }
    v5 = *v6;
  }
LABEL_7:
  v7 = (_QWORD *)(*(_QWORD *)(v3 + 128) + v5 + 16 * result);
  *v7 = a2;
  v7[1] = a3;
  return result;
}

__n128 sub_1B1FEDDC0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  __int128 v7;
  __n128 result;

  v3 = *(_QWORD *)(v2 + 48);
  v4 = *(_QWORD *)(v3 + 16);
  if (v4)
  {
    v5 = (uint64_t *)(v3 + 56);
    while ((ValueMetadata *)*(v5 - 3) != &type metadata for ParticleForceField)
    {
      v5 += 5;
      if (!--v4)
        goto LABEL_7;
    }
    v4 = *v5;
  }
LABEL_7:
  v6 = *(_QWORD *)(v2 + 128) + v4 + 44 * a1;
  v7 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v6 = *(_OWORD *)a2;
  *(_OWORD *)(v6 + 16) = v7;
  result = *(__n128 *)(a2 + 28);
  *(__n128 *)(v6 + 28) = result;
  return result;
}

__n128 sub_1B1FEDE1C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  __int128 v7;
  __n128 result;

  v3 = *(_QWORD *)(v2 + 48);
  v4 = *(_QWORD *)(v3 + 16);
  if (v4)
  {
    v5 = (uint64_t *)(v3 + 56);
    while ((ValueMetadata *)*(v5 - 3) != &type metadata for ParticleGrowEmitter)
    {
      v5 += 5;
      if (!--v4)
        goto LABEL_7;
    }
    v4 = *v5;
  }
LABEL_7:
  v6 = *(_QWORD *)(v2 + 128) + v4 + (a1 << 6);
  v7 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v6 = *(_OWORD *)a2;
  *(_OWORD *)(v6 + 16) = v7;
  *(_OWORD *)(v6 + 32) = *(_OWORD *)(a2 + 32);
  result = *(__n128 *)(a2 + 44);
  *(__n128 *)(v6 + 44) = result;
  return result;
}

__n128 sub_1B1FEDE7C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  __n128 result;
  __int128 v8;

  v3 = *(_QWORD *)(v2 + 48);
  v4 = *(_QWORD *)(v3 + 16);
  if (v4)
  {
    v5 = (uint64_t *)(v3 + 56);
    while ((ValueMetadata *)*(v5 - 3) != &type metadata for ProjectorParameters)
    {
      v5 += 5;
      if (!--v4)
        goto LABEL_7;
    }
    v4 = *v5;
  }
LABEL_7:
  v6 = *(_QWORD *)(v2 + 128) + v4 + 36 * a1;
  result = *(__n128 *)a2;
  v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v6 = *(_OWORD *)a2;
  *(_OWORD *)(v6 + 16) = v8;
  *(_DWORD *)(v6 + 32) = *(_DWORD *)(a2 + 32);
  return result;
}

__n128 sub_1B1FEDED8(uint64_t a1, __n128 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  __n128 result;

  v3 = *(_QWORD *)(v2 + 48);
  v4 = *(_QWORD *)(v3 + 16);
  if (v4)
  {
    v5 = (uint64_t *)(v3 + 56);
    while ((ValueMetadata *)*(v5 - 3) != &type metadata for ParticleVelocityInit)
    {
      v5 += 5;
      if (!--v4)
        goto LABEL_7;
    }
    v4 = *v5;
  }
LABEL_7:
  v6 = *(_QWORD *)(v2 + 128) + v4 + 24 * a1;
  result = *a2;
  *(__n128 *)v6 = *a2;
  *(_QWORD *)(v6 + 16) = a2[1].n128_u64[0];
  return result;
}

uint64_t sub_1B1FEDF34(uint64_t result, char a2, float a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;

  v4 = *(_QWORD *)(v3 + 48);
  v5 = *(_QWORD *)(v4 + 16);
  if (v5)
  {
    v6 = (uint64_t *)(v4 + 56);
    while ((ValueMetadata *)*(v6 - 3) != &type metadata for OrientationConstraint)
    {
      v6 += 5;
      if (!--v5)
        goto LABEL_7;
    }
    v5 = *v6;
  }
LABEL_7:
  v7 = *(_QWORD *)(v3 + 128) + v5 + 8 * result;
  *(_BYTE *)v7 = a2 & 1;
  *(float *)(v7 + 4) = a3;
  return result;
}

uint64_t sub_1B1FEDF88(uint64_t result, float a2, float a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  float *v7;

  v4 = *(_QWORD *)(v3 + 48);
  v5 = *(_QWORD *)(v4 + 16);
  if (v5)
  {
    v6 = (uint64_t *)(v4 + 56);
    while ((ValueMetadata *)*(v6 - 3) != &type metadata for ParticleAOBoxRenderer)
    {
      v6 += 5;
      if (!--v5)
        goto LABEL_7;
    }
    v5 = *v6;
  }
LABEL_7:
  v7 = (float *)(*(_QWORD *)(v3 + 128) + v5 + 8 * result);
  *v7 = a2;
  v7[1] = a3;
  return result;
}

uint64_t sub_1B1FEDFD4(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;

  v3 = *(_QWORD *)(v2 + 48);
  v4 = *(_QWORD *)(v3 + 16);
  if (v4)
  {
    v5 = (uint64_t *)(v3 + 56);
    while ((ValueMetadata *)*(v5 - 3) != &type metadata for ParticleDecalRenderer)
    {
      v5 += 5;
      if (!--v4)
        goto LABEL_7;
    }
    v4 = *v5;
  }
LABEL_7:
  *(_QWORD *)(*(_QWORD *)(v2 + 128) + v4 + 8 * result) = a2;
  return result;
}

__n128 sub_1B1FEE01C(uint64_t a1, __n128 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  __n128 result;

  v3 = *(_QWORD *)(v2 + 48);
  v4 = *(_QWORD *)(v3 + 16);
  if (v4)
  {
    v5 = (uint64_t *)(v3 + 56);
    while ((ValueMetadata *)*(v5 - 3) != &type metadata for ParticleVariableSpawn)
    {
      v5 += 5;
      if (!--v4)
        goto LABEL_7;
    }
    v4 = *v5;
  }
LABEL_7:
  v6 = *(_QWORD *)(v2 + 128) + v4 + 24 * a1;
  result = *a2;
  *(__n128 *)v6 = *a2;
  *(_QWORD *)(v6 + 16) = a2[1].n128_u64[0];
  return result;
}

__n128 sub_1B1FEE078(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  __n128 result;
  __int128 v10;
  uint64_t v11[4];

  v4 = *(_QWORD *)(v2 + 48);
  v5 = *(_QWORD *)(v4 + 16);
  if (v5)
  {
    v6 = (uint64_t *)(v4 + 56);
    while ((ValueMetadata *)*(v6 - 3) != &type metadata for ParticleAngleEvolution)
    {
      v6 += 5;
      if (!--v5)
        goto LABEL_7;
    }
    v5 = *v6;
  }
LABEL_7:
  v7 = *(_QWORD *)(v2 + 128) + v5 + 40 * a1;
  v8 = *(_QWORD *)(v7 + 8);
  sub_1B1A025EC(a2 + 8, (uint64_t)v11, (uint64_t (*)(_QWORD))sub_1B1AF7598);
  sub_1B1FEEAAC(v11);
  sub_1B1AF76C0(v8);
  result = *(__n128 *)a2;
  v10 = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(v7 + 32) = *(_BYTE *)(a2 + 32);
  *(__n128 *)v7 = result;
  *(_OWORD *)(v7 + 16) = v10;
  return result;
}

uint64_t sub_1B1FEE140(uint64_t result, char a2, float a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;

  v4 = *(_QWORD *)(v3 + 48);
  v5 = *(_QWORD *)(v4 + 16);
  if (v5)
  {
    v6 = (uint64_t *)(v4 + 56);
    while ((ValueMetadata *)*(v6 - 3) != &type metadata for OrientationOverVelocity)
    {
      v6 += 5;
      if (!--v5)
        goto LABEL_7;
    }
    v5 = *v6;
  }
LABEL_7:
  v7 = *(_QWORD *)(v3 + 128) + v5 + 8 * result;
  *(float *)v7 = a3;
  *(_BYTE *)(v7 + 4) = a2 & 1;
  return result;
}

uint64_t sub_1B1FEE194(uint64_t result, float a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;

  v3 = *(_QWORD *)(v2 + 48);
  v4 = *(_QWORD *)(v3 + 16);
  if (v4)
  {
    v5 = (uint64_t *)(v3 + 56);
    while ((ValueMetadata *)*(v5 - 3) != &type metadata for ParticleContinuousSpawn)
    {
      v5 += 5;
      if (!--v4)
        goto LABEL_7;
    }
    v4 = *v5;
  }
LABEL_7:
  *(float *)(*(_QWORD *)(v2 + 128) + v4 + 4 * result) = a2;
  return result;
}

uint64_t sub_1B1FEE1DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t result;

  v10 = *(_QWORD *)(v5 + 48);
  v11 = *(_QWORD *)(v10 + 16);
  if (v11)
  {
    v12 = (uint64_t *)(v10 + 56);
    while ((ValueMetadata *)*(v12 - 3) != &type metadata for ParticleOpacityOverLife)
    {
      v12 += 5;
      if (!--v11)
        goto LABEL_7;
    }
    v11 = *v12;
  }
LABEL_7:
  v13 = *(_QWORD *)(v5 + 128) + v11 + 32 * a1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)v13 = a2;
  *(_QWORD *)(v13 + 8) = a3;
  *(_QWORD *)(v13 + 16) = a4;
  *(_BYTE *)(v13 + 24) = a5;
  return result;
}

__n128 sub_1B1FEE2A4(uint64_t a1, __n128 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  __n128 result;

  v3 = *(_QWORD *)(v2 + 48);
  v4 = *(_QWORD *)(v3 + 16);
  if (v4)
  {
    v5 = (uint64_t *)(v3 + 56);
    while ((ValueMetadata *)*(v5 - 3) != &type metadata for ParticleOrientationInit)
    {
      v5 += 5;
      if (!--v4)
        goto LABEL_7;
    }
    v4 = *v5;
  }
LABEL_7:
  v6 = *(_QWORD *)(v2 + 128) + v4 + 24 * a1;
  result = *a2;
  *(__n128 *)v6 = *a2;
  *(_QWORD *)(v6 + 16) = a2[1].n128_u64[0];
  return result;
}

__n128 sub_1B1FEE300(uint64_t a1, __n128 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  __n128 result;

  v3 = *(_QWORD *)(v2 + 48);
  v4 = *(_QWORD *)(v3 + 16);
  if (v4)
  {
    v5 = (uint64_t *)(v3 + 56);
    while ((ValueMetadata *)*(v5 - 3) != &type metadata for ParticleSurfaceRenderer)
    {
      v5 += 5;
      if (!--v4)
        goto LABEL_7;
    }
    v4 = *v5;
  }
LABEL_7:
  v6 = *(_QWORD *)(v2 + 128) + v4 + 24 * a1;
  result = *a2;
  *(__n128 *)v6 = *a2;
  *(_QWORD *)(v6 + 16) = a2[1].n128_u64[0];
  return result;
}

uint64_t sub_1B1FEE35C(uint64_t result, float a2, float a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  float *v7;

  v4 = *(_QWORD *)(v3 + 48);
  v5 = *(_QWORD *)(v4 + 16);
  if (v5)
  {
    v6 = (uint64_t *)(v4 + 56);
    while ((ValueMetadata *)*(v6 - 3) != &type metadata for ParticleAOSphereRenderer)
    {
      v6 += 5;
      if (!--v5)
        goto LABEL_7;
    }
    v5 = *v6;
  }
LABEL_7:
  v7 = (float *)(*(_QWORD *)(v3 + 128) + v5 + 8 * result);
  *v7 = a2;
  v7[1] = a3;
  return result;
}

__n128 sub_1B1FEE3A8(uint64_t a1, _OWORD *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  __int128 v8;
  __n128 result;
  _OWORD v10[2];
  _BYTE v11[8];
  uint64_t v12;
  uint64_t v13;

  v4 = *(_QWORD *)(v2 + 48);
  v5 = *(_QWORD *)(v4 + 16);
  if (v5)
  {
    v6 = (uint64_t *)(v4 + 56);
    while ((ValueMetadata *)*(v6 - 3) != &type metadata for ParticleOpacityEvolution)
    {
      v6 += 5;
      if (!--v5)
        goto LABEL_7;
    }
    v5 = *v6;
  }
LABEL_7:
  v7 = *(_QWORD *)(v2 + 128) + v5 + 48 * a1;
  v10[0] = a2[1];
  *(_OWORD *)((char *)v10 + 9) = *(_OWORD *)((char *)a2 + 25);
  v12 = *((_QWORD *)&v10[0] + 1);
  v13 = *(_QWORD *)&v10[0];
  sub_1B1EC57D4((uint64_t)&v10[1], (uint64_t)v11, (unint64_t *)&qword_1ED4BA390, &qword_1ED4BA380, (uint64_t)&type metadata for CurveTangents);
  sub_1B1B28C44((uint64_t)&v13);
  sub_1B1B28C44((uint64_t)&v12);
  sub_1B1B28C44((uint64_t)v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v8 = a2[1];
  *(_OWORD *)v7 = *a2;
  *(_OWORD *)(v7 + 16) = v8;
  result = *(__n128 *)((char *)a2 + 25);
  *(__n128 *)(v7 + 25) = result;
  return result;
}

uint64_t sub_1B1FEE4AC(uint64_t result, float a2, float a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  float *v7;

  v4 = *(_QWORD *)(v3 + 48);
  v5 = *(_QWORD *)(v4 + 16);
  if (v5)
  {
    v6 = (uint64_t *)(v4 + 56);
    while ((ValueMetadata *)*(v6 - 3) != &type metadata for ParticleTextureFrameInit)
    {
      v6 += 5;
      if (!--v5)
        goto LABEL_7;
    }
    v5 = *v6;
  }
LABEL_7:
  v7 = (float *)(*(_QWORD *)(v3 + 128) + v5 + 8 * result);
  *v7 = a2;
  v7[1] = a3;
  return result;
}

uint64_t sub_1B1FEE4F8(uint64_t result, float a2, float a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  float *v7;

  v4 = *(_QWORD *)(v3 + 48);
  v5 = *(_QWORD *)(v4 + 16);
  if (v5)
  {
    v6 = (uint64_t *)(v4 + 56);
    while ((ValueMetadata *)*(v6 - 3) != &type metadata for ParticleAngleVelocityInit)
    {
      v6 += 5;
      if (!--v5)
        goto LABEL_7;
    }
    v5 = *v6;
  }
LABEL_7:
  v7 = (float *)(*(_QWORD *)(v3 + 128) + v5 + 8 * result);
  *v7 = a2;
  v7[1] = a3;
  return result;
}

uint64_t sub_1B1FEE544(uint64_t result, __int16 a2, float a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;

  v4 = *(_QWORD *)(v3 + 48);
  v5 = *(_QWORD *)(v4 + 16);
  if (v5)
  {
    v6 = (uint64_t *)(v4 + 56);
    while ((ValueMetadata *)*(v6 - 3) != &type metadata for ParticleSpawnOverDistance)
    {
      v6 += 5;
      if (!--v5)
        goto LABEL_7;
    }
    v5 = *v6;
  }
LABEL_7:
  v7 = *(_QWORD *)(v3 + 128) + v5 + 8 * result;
  *(float *)v7 = a3;
  *(_BYTE *)(v7 + 4) = a2 & 1;
  *(_BYTE *)(v7 + 5) = HIBYTE(a2) & 1;
  return result;
}

uint64_t sub_1B1FEE5A0(uint64_t result, uint64_t a2, uint64_t a3, float a4, float a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;

  v6 = *(_QWORD *)(v5 + 48);
  v7 = *(_QWORD *)(v6 + 16);
  if (v7)
  {
    v8 = (uint64_t *)(v6 + 56);
    while ((ValueMetadata *)*(v8 - 3) != &type metadata for ParticlePeriodicBurstSpawn)
    {
      v8 += 5;
      if (!--v7)
        goto LABEL_7;
    }
    v7 = *v8;
  }
LABEL_7:
  v9 = *(_QWORD *)(v5 + 128) + v7 + 24 * result;
  *(_QWORD *)v9 = a2;
  *(_QWORD *)(v9 + 8) = a3;
  *(float *)(v9 + 16) = a4;
  *(float *)(v9 + 20) = a5;
  return result;
}

uint64_t sub_1B1FEE5F4(uint64_t result, float a2, float a3, float a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  float *v8;

  v5 = *(_QWORD *)(v4 + 48);
  v6 = *(_QWORD *)(v5 + 16);
  if (v6)
  {
    v7 = (uint64_t *)(v5 + 56);
    while ((ValueMetadata *)*(v7 - 3) != &type metadata for ParticleVolumetricRenderer)
    {
      v7 += 5;
      if (!--v6)
        goto LABEL_7;
    }
    v6 = *v7;
  }
LABEL_7:
  v8 = (float *)(*(_QWORD *)(v4 + 128) + v6 + 12 * result);
  *v8 = a2;
  v8[1] = a3;
  v8[2] = a4;
  return result;
}

__n128 sub_1B1FEE648(uint64_t a1, __n128 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  __n128 result;

  v3 = *(_QWORD *)(v2 + 48);
  v4 = *(_QWORD *)(v3 + 16);
  if (v4)
  {
    v5 = (uint64_t *)(v3 + 56);
    while ((ValueMetadata *)*(v5 - 3) != &type metadata for ParticleAngularVelocityInit)
    {
      v5 += 5;
      if (!--v4)
        goto LABEL_7;
    }
    v4 = *v5;
  }
LABEL_7:
  v6 = *(_QWORD *)(v2 + 128) + v4 + 24 * a1;
  result = *a2;
  *(__n128 *)v6 = *a2;
  *(_QWORD *)(v6 + 16) = a2[1].n128_u64[0];
  return result;
}

uint64_t sub_1B1FEE6A4(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

__n128 sub_1B1FEE6D8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  __n128 result;
  __int128 v9;
  _OWORD v10[2];
  _BYTE v11[8];
  uint64_t v12;
  uint64_t v13;

  v4 = *(_QWORD *)(v2 + 48);
  v5 = *(_QWORD *)(v4 + 16);
  if (v5)
  {
    v6 = (uint64_t *)(v4 + 56);
    while ((ValueMetadata *)*(v6 - 3) != &type metadata for ParticleOpacityOverVelocity)
    {
      v6 += 5;
      if (!--v5)
        goto LABEL_7;
    }
    v5 = *v6;
  }
LABEL_7:
  v7 = *(_QWORD *)(v2 + 128) + v5 + 40 * a1;
  v10[0] = *(_OWORD *)a2;
  *(_OWORD *)((char *)v10 + 9) = *(_OWORD *)(a2 + 9);
  v12 = *((_QWORD *)&v10[0] + 1);
  v13 = *(_QWORD *)&v10[0];
  sub_1B1EC57D4((uint64_t)&v10[1], (uint64_t)v11, (unint64_t *)&qword_1ED4BA390, &qword_1ED4BA380, (uint64_t)&type metadata for CurveTangents);
  sub_1B1B28C44((uint64_t)&v13);
  sub_1B1B28C44((uint64_t)&v12);
  sub_1B1B28C44((uint64_t)v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = *(__n128 *)a2;
  v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v7 = *(_OWORD *)a2;
  *(_OWORD *)(v7 + 16) = v9;
  *(_DWORD *)(v7 + 32) = *(_DWORD *)(a2 + 32);
  return result;
}

__n128 sub_1B1FEE7DC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  __int128 v7;
  __n128 result;

  v3 = *(_QWORD *)(v2 + 48);
  v4 = *(_QWORD *)(v3 + 16);
  if (v4)
  {
    v5 = (uint64_t *)(v3 + 56);
    while ((ValueMetadata *)*(v5 - 3) != &type metadata for ParticlePositionOverTexture)
    {
      v5 += 5;
      if (!--v4)
        goto LABEL_7;
    }
    v4 = *v5;
  }
LABEL_7:
  v6 = *(_QWORD *)(v2 + 128) + v4 + 48 * a1;
  v7 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v6 = *(_OWORD *)a2;
  *(_OWORD *)(v6 + 16) = v7;
  result = *(__n128 *)(a2 + 28);
  *(__n128 *)(v6 + 28) = result;
  return result;
}

__n128 sub_1B1FEE838(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  __n128 result;

  v3 = *(_QWORD *)(v2 + 48);
  v4 = *(_QWORD *)(v3 + 16);
  if (v4)
  {
    v5 = (uint64_t *)(v3 + 56);
    while ((ValueMetadata *)*(v5 - 3) != &type metadata for ParticleFlockingSpeedControl)
    {
      v5 += 5;
      if (!--v4)
        goto LABEL_7;
    }
    v4 = *v5;
  }
LABEL_7:
  v6 = *(_QWORD *)(v2 + 128) + v4 + 32 * a1;
  *(_OWORD *)v6 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 9);
  *(__n128 *)(v6 + 9) = result;
  return result;
}

__n128 sub_1B1FEE890(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  __n128 result;
  __int128 v10;
  uint64_t v11[4];

  v4 = *(_QWORD *)(v2 + 48);
  v5 = *(_QWORD *)(v4 + 16);
  if (v5)
  {
    v6 = (uint64_t *)(v4 + 56);
    while ((ValueMetadata *)*(v6 - 3) != &type metadata for ParticleTextureFrameEvolution)
    {
      v6 += 5;
      if (!--v5)
        goto LABEL_7;
    }
    v5 = *v6;
  }
LABEL_7:
  v7 = *(_QWORD *)(v2 + 128) + v5 + 40 * a1;
  v8 = *(_QWORD *)(v7 + 8);
  sub_1B1A025EC(a2 + 8, (uint64_t)v11, (uint64_t (*)(_QWORD))sub_1B1AF7598);
  sub_1B1FEEAAC(v11);
  sub_1B1AF76C0(v8);
  result = *(__n128 *)a2;
  v10 = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(v7 + 32) = *(_BYTE *)(a2 + 32);
  *(__n128 *)v7 = result;
  *(_OWORD *)(v7 + 16) = v10;
  return result;
}

__n128 sub_1B1FEE958(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  __n128 result;

  v3 = *(_QWORD *)(v2 + 48);
  v4 = *(_QWORD *)(v3 + 16);
  if (v4)
  {
    v5 = (uint64_t *)(v3 + 56);
    while ((ValueMetadata *)*(v5 - 3) != &type metadata for ParticleFlockingFlyTowardsArea)
    {
      v5 += 5;
      if (!--v4)
        goto LABEL_7;
    }
    v4 = *v5;
  }
LABEL_7:
  v6 = *(_QWORD *)(v2 + 128) + v4 + 28 * a1;
  *(_OWORD *)v6 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 9);
  *(__n128 *)(v6 + 9) = result;
  return result;
}

__n128 sub_1B1FEE9B4(uint64_t a1, __n128 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  __n128 result;

  v3 = *(_QWORD *)(v2 + 48);
  v4 = *(_QWORD *)(v3 + 16);
  if (v4)
  {
    v5 = (uint64_t *)(v3 + 56);
    while ((ValueMetadata *)*(v5 - 3) != &type metadata for ParticleTargetFromPositionInit)
    {
      v5 += 5;
      if (!--v4)
        goto LABEL_7;
    }
    v4 = *v5;
  }
LABEL_7:
  v6 = *(_QWORD *)(v2 + 128) + v4 + 24 * a1;
  result = *a2;
  *(__n128 *)v6 = *a2;
  *(_QWORD *)(v6 + 16) = a2[1].n128_u64[0];
  return result;
}

uint64_t sub_1B1FEEA10(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t *sub_1B1FEEAAC(uint64_t *a1)
{
  sub_1B1AF7674(*a1);
  return a1;
}

uint64_t sub_1B1FEEADC(uint64_t result, char a2, float a3, __n128 a4, __n128 a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  __n128 *v9;

  v6 = *(_QWORD *)(v5 + 48);
  v7 = *(_QWORD *)(v6 + 16);
  if (v7)
  {
    v8 = (uint64_t *)(v6 + 56);
    while ((ValueMetadata *)*(v8 - 3) != &type metadata for ParticleFlockingConstrainToArea)
    {
      v8 += 5;
      if (!--v7)
        goto LABEL_7;
    }
    v7 = *v8;
  }
LABEL_7:
  v9 = (__n128 *)(*(_QWORD *)(v5 + 128) + v7 + (result << 6));
  v9->n128_f32[0] = a3;
  v9[1] = a4;
  v9[2] = a5;
  v9[3].n128_u8[0] = a2 & 1;
  return result;
}

__n128 sub_1B1FEEB34(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  __n128 result;
  __int128 v8;

  v3 = *(_QWORD *)(v2 + 48);
  v4 = *(_QWORD *)(v3 + 16);
  if (v4)
  {
    v5 = (uint64_t *)(v3 + 56);
    while ((ValueMetadata *)*(v5 - 3) != &type metadata for ParticleFlockingAlignOrientation)
    {
      v5 += 5;
      if (!--v4)
        goto LABEL_7;
    }
    v4 = *v5;
  }
LABEL_7:
  v6 = *(_QWORD *)(v2 + 128) + v4 + 48 * a1;
  result = *(__n128 *)a2;
  v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v6 = *(_OWORD *)a2;
  *(_OWORD *)(v6 + 16) = v8;
  *(_QWORD *)(v6 + 32) = *(_QWORD *)(a2 + 32);
  return result;
}

uint64_t sub_1B1FEEB90(uint64_t result, char a2, float a3, __n128 a4, __n128 a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  __n128 *v9;

  v6 = *(_QWORD *)(v5 + 48);
  v7 = *(_QWORD *)(v6 + 16);
  if (v7)
  {
    v8 = (uint64_t *)(v6 + 56);
    while ((ValueMetadata *)*(v8 - 3) != &type metadata for ParticleFlockingConstrainToPlane)
    {
      v8 += 5;
      if (!--v7)
        goto LABEL_7;
    }
    v7 = *v8;
  }
LABEL_7:
  v9 = (__n128 *)(*(_QWORD *)(v5 + 128) + v7 + (result << 6));
  v9->n128_f32[0] = a3;
  v9[1] = a4;
  v9[2] = a5;
  v9[3].n128_u8[0] = a2 & 1;
  return result;
}

uint64_t sub_1B1FEEBE8(uint64_t result, float a2, __n128 a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  __n128 *v7;

  v4 = *(_QWORD *)(v3 + 48);
  v5 = *(_QWORD *)(v4 + 16);
  if (v5)
  {
    v6 = (uint64_t *)(v4 + 56);
    while ((ValueMetadata *)*(v6 - 3) != &type metadata for ParticleFlockingAlignVelocityOnPlane)
    {
      v6 += 5;
      if (!--v5)
        goto LABEL_7;
    }
    v5 = *v6;
  }
LABEL_7:
  v7 = (__n128 *)(*(_QWORD *)(v3 + 128) + v5 + 32 * result);
  v7->n128_f32[0] = a2;
  v7[1] = a3;
  return result;
}

uint64_t sub_1B1FEEC38(uint64_t result, char a2, float a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;

  v4 = *(_QWORD *)(v3 + 48);
  v5 = *(_QWORD *)(v4 + 16);
  if (v5)
  {
    v6 = (uint64_t *)(v4 + 56);
    while ((ValueMetadata *)*(v6 - 3) != &type metadata for Attach)
    {
      v6 += 5;
      if (!--v5)
        goto LABEL_7;
    }
    v5 = *v6;
  }
LABEL_7:
  v7 = *(_QWORD *)(v3 + 128) + v5 + 8 * result;
  *(float *)v7 = a3;
  *(_BYTE *)(v7 + 4) = a2 & 1;
  return result;
}

uint64_t sub_1B1FEEC8C(uint64_t result, float a2, float a3, float a4, float a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  float *v9;

  v6 = *(_QWORD *)(v5 + 48);
  v7 = *(_QWORD *)(v6 + 16);
  if (v7)
  {
    v8 = (uint64_t *)(v6 + 56);
    while ((ValueMetadata *)*(v8 - 3) != &type metadata for Vortex)
    {
      v8 += 5;
      if (!--v7)
        goto LABEL_7;
    }
    v7 = *v8;
  }
LABEL_7:
  v9 = (float *)(*(_QWORD *)(v5 + 128) + v7 + 16 * result);
  *v9 = a2;
  v9[1] = a3;
  v9[2] = a4;
  v9[3] = a5;
  return result;
}

uint64_t sub_1B1FEECDC(uint64_t a1, uint64_t a2)
{
  return sub_1B1D136D4(a1, a2, type metadata accessor for EmitterScript);
}

uint64_t sub_1B1FEECE8(uint64_t a1, uint64_t a2)
{
  return sub_1B1D136D4(a1, a2, type metadata accessor for ParticleInitScript);
}

uint64_t sub_1B1FEECF4(uint64_t a1, uint64_t a2)
{
  return sub_1B1D136D4(a1, a2, type metadata accessor for ParticleUpdateScript);
}

uint64_t sub_1B1FEED00(uint64_t a1)
{
  id v2;

  v2 = *(id *)(a1 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1B1FEED50(uint64_t a1, uint64_t a2)
{
  return sub_1B1D136D4(a1, a2, type metadata accessor for MetalFunctionScript);
}

uint64_t sub_1B1FEED5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v6;
  uint64_t v7;
  ValueMetadata **i;
  uint64_t v13;

  v6 = *(_QWORD *)(a1 + 48);
  v7 = *(_QWORD *)(v6 + 16);
  if (!v7)
    return 0;
  for (i = (ValueMetadata **)(v6 + 32); *i != &type metadata for TextureRequireSizeLimit; i += 5)
  {
    if (!--v7)
      return 0;
  }
  v13 = sub_1B1DA61CC(a3) << 16 >> 48;
  swift_retain();
  sub_1B1FDCFA8(v13, a4, a5, a6 & 1);
  swift_release();
  return 1;
}

uint64_t sub_1B1FEEE34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  uint64_t v7;
  uint64_t v8;
  char v9;
  unsigned int v13;
  ValueMetadata **i;
  uint64_t v16;

  v7 = *(_QWORD *)(a1 + 48);
  v8 = *(_QWORD *)(v7 + 16);
  if (!v8)
    return 0;
  v9 = a7;
  v13 = a7 & 0xFFFFFF00;
  for (i = (ValueMetadata **)(v7 + 32); *i != &type metadata for TextureRequireAnimationRepresentation; i += 5)
  {
    if (!--v8)
      return 0;
  }
  v16 = sub_1B1DA61CC(a3) << 16 >> 48;
  swift_retain();
  sub_1B1FDD82C(v16, a4, a5, a6, v13 | v9 & 1);
  swift_release();
  return 1;
}

uint64_t sub_1B1FEEF2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t *v13;

  if (!sub_1B1E36538((uint64_t)&type metadata for PropagateDirtiness))
  {
    v13 = ecs_stack_allocator_allocate(*(_QWORD *)(a1 + 32), 8, 8);
    *v13 = a3;
    sub_1B1A11C8C((uint64_t)&type metadata for PropagateDirtiness, (uint64_t)&off_1E6395A98, v13, 1, 1);
  }
  return sub_1B1FEBD58(a5, a4, a6, a7);
}

uint64_t sub_1B1FEF004(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1FEF020(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1FEEF2C);
}

uint64_t sub_1B1FEF020(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  os_unfair_lock_s *v18;

  v7 = v5;
  v11 = result;
  if (result != 0xFFFFFFFFLL
    && result << 32 >= (uint64_t)0xFFFFFFFF00000001
    && (int)result < *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8))
  {
    v12 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
    if (HIDWORD(result) == -1 || *(_DWORD *)(v12 + 12 * (int)result + 8) == HIDWORD(result))
    {
      v13 = (int *)(v12 + 12 * (int)result);
      v14 = *((__int16 *)v13 + 2);
      v15 = *(_QWORD *)(*(_QWORD *)(a2 + 136) + 8 * *v13 + 32);
      if (*(_QWORD *)(v15 + 232) <= v14 && *(_QWORD *)(v15 + 240) > v14)
      {
        v17 = **(_QWORD **)(a2 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues);
        v18 = *(os_unfair_lock_s **)(v15 + 344);
        swift_retain();
        os_unfair_lock_lock(v18);
        ecs_stack_allocator_push_snapshot(*(_QWORD *)(v17 + 32));
        swift_retain();
        a5(v17, v15, v14, a2, v11, a3, a4);
        swift_release();
        if (!v7)
          ecs_stack_allocator_pop_snapshot(*(_QWORD *)(v17 + 32));
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v15 + 344));
        return swift_release();
      }
    }
  }
  return result;
}

void sub_1B1FEF17C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, unint64_t a8, unint64_t a9)
{
  uint64_t inited;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  __int128 v65;
  char *v66;
  uint64_t v67;
  unint64_t v68;
  unsigned int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80[2];

  v70 = a4;
  v71 = a5;
  v72 = a3;
  v60 = a2;
  inited = type metadata accessor for ParticleInitScript(0);
  MEMORY[0x1E0C80A78](inited, v14);
  v16 = (char *)&v59 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1B1792854(0, qword_1ED4B7E00, (void (*)(uint64_t))type metadata accessor for ScriptIndex);
  MEMORY[0x1E0C80A78](v17, v18);
  v66 = (char *)&v59 - v19;
  v20 = type metadata accessor for GraphScriptingConfig.ScriptInfo();
  v21 = *(_QWORD *)(v20 - 8);
  MEMORY[0x1E0C80A78](v20, v22);
  v24 = (char *)&v59 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v25, v26);
  v67 = (uint64_t)&v59 - v27;
  sub_1B1A02758(0, &qword_1ED4BAD88, (uint64_t)&type metadata for ScriptParameter, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v28 = swift_allocObject();
  v65 = xmmword_1B226D240;
  *(_OWORD *)(v28 + 16) = xmmword_1B226D240;
  *(_QWORD *)(v28 + 32) = 0xF000000000000000;
  *(_BYTE *)(v28 + 40) = 1;
  *(_QWORD *)(v28 + 48) = 0;
  *(_BYTE *)(v28 + 56) = 1;
  v80[0] = (_QWORD *)v28;
  LODWORD(v64) = a6;
  if ((a6 & 1) != 0)
  {
    v29 = (_QWORD *)v28;
    v30 = swift_allocObject();
    *(_QWORD *)(v30 + 16) = a1;
    v31 = v30 | 0xB000000000000000;
    v32 = sub_1B1C638E4(1, 2, 1, v29);
    v32[2] = 2;
    v32[8] = v31;
    *((_BYTE *)v32 + 72) = 1;
    v32[10] = 0;
    *((_BYTE *)v32 + 88) = 1;
    v80[0] = v32;
  }
  v33 = v71;
  v34 = sub_1B1DC4040(a8 | ((HIDWORD(a8) & 1) << 32));
  sub_1B1792810(*(_QWORD *)(v33 + 56) + *(_QWORD *)(v21 + 72) * v34, (uint64_t)v24, (uint64_t (*)(_QWORD))type metadata accessor for GraphScriptingConfig.ScriptInfo);
  v35 = v67;
  sub_1B1A025EC((uint64_t)v24, v67, (uint64_t (*)(_QWORD))type metadata accessor for GraphScriptingConfig.ScriptInfo);
  v36 = *(_QWORD *)(v35 + 24);
  if (v36)
  {
    v37 = *(_QWORD *)(v36 + 16);
    if (v37)
    {
      v61 = a7;
      v62 = inited;
      v63 = v16;
      v69 = v64 & 0x10101;
      v59 = swift_bridgeObjectRetain();
      v38 = (uint64_t *)(v59 + 80);
      v68 = a8 | ((HIDWORD(a8) & 1) << 32);
      v39 = v60;
      do
      {
        v40 = *(v38 - 6);
        v41 = *(v38 - 5);
        v42 = v37;
        v44 = *(v38 - 4);
        v43 = *(v38 - 3);
        v46 = *(v38 - 2);
        v45 = *(v38 - 1);
        v47 = *v38;
        v38 += 7;
        v73 = v40;
        v74 = v41;
        v75 = v44;
        v76 = v43;
        v77 = v46;
        v78 = v45;
        v79 = v47;
        swift_bridgeObjectRetain();
        sub_1B19FA2B4(v44, v43);
        sub_1B1C1113C((uint64_t)&v73, v39, v72, v70, v71, v69, v68, v80);
        swift_bridgeObjectRelease();
        sub_1B19F9FEC(v44, v43);
        v37 = v42 - 1;
      }
      while (v42 != 1);
      swift_bridgeObjectRelease();
      v16 = v63;
      inited = v62;
      a7 = v61;
      v35 = v67;
    }
  }
  v48 = *(_QWORD *)(v35 + 32);
  if (v48)
  {
    v49 = *(_QWORD *)(v48 + 16);
    if (v49)
    {
      v68 = a9;
      v61 = a7;
      v62 = inited;
      v63 = v16;
      v69 = v64 & 0x10101;
      v64 = swift_bridgeObjectRetain();
      v50 = (uint64_t *)(v64 + 80);
      v51 = v70;
      do
      {
        v52 = *(v50 - 6);
        v53 = *(v50 - 5);
        v54 = *(v50 - 4);
        v55 = *(v50 - 3);
        v56 = *(v50 - 2);
        v57 = *(v50 - 1);
        v58 = *v50;
        v50 += 7;
        v73 = v52;
        v74 = v53;
        v75 = v54;
        v76 = v55;
        v77 = v56;
        v78 = v57;
        v79 = v58;
        swift_bridgeObjectRetain();
        sub_1B19FA2B4(v54, v55);
        sub_1B1BFF088(&v73, v72, v51, v71, v69, v80);
        swift_bridgeObjectRelease();
        sub_1B19F9FEC(v54, v55);
        --v49;
      }
      while (v49);
      swift_bridgeObjectRelease();
    }
  }
  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAE70, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  *(_OWORD *)(swift_allocObject() + 16) = v65;
  __asm { BR              X12 }
}

uint64_t sub_1B1FEF61C()
{
  uint64_t v0;
  __int16 v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;

  *(_QWORD *)(v0 + 32) = 0x6E77617053;
  *(_QWORD *)(v0 + 40) = 0xE500000000000000;
  swift_bridgeObjectRelease();
  *(_QWORD *)(v3 + 24) = v0;
  v8 = *(_QWORD *)(v3 + 16);
  if (v2[1])
  {
    v9 = *v2;
    v10 = v2[1];
  }
  else
  {
    v9 = *(_QWORD *)(v3 + 8);
    swift_bridgeObjectRetain();
    v10 = v8;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v3 + 8) = v9;
  *(_QWORD *)(v3 + 16) = v10;
  v11 = *(_QWORD **)(v7 - 232);
  *v11 = v6;
  v12 = type metadata accessor for ScriptIndex();
  swift_storeEnumTagMultiPayload();
  (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 0, 1, v12);
  sub_1B1CAF140((uint64_t)v11, v3 + *(int *)(v5 + 36));
  sub_1B1A025EC(v3, v4, type metadata accessor for ParticleInitScript);
  sub_1B1A04628((uint64_t)v2, (uint64_t (*)(_QWORD))type metadata accessor for GraphScriptingConfig.ScriptInfo);
  sub_1B1A025EC(v4, v3, type metadata accessor for ParticleInitScript);
  *(_BYTE *)v3 = HIBYTE(v1);
  v13 = *(_QWORD *)(v7 - 96);
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v3 + 32) = v13;
  return result;
}

uint64_t sub_1B1FEF7A4(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int16 *a5, uint64_t a6, unint64_t a7)
{
  return sub_1B1FF0080(a1, a2, a3, a4, a5, a6, a7, type metadata accessor for ParticleInitScript, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *))sub_1B1FEF17C, (void (*)(uint64_t, char *, uint64_t))sub_1B1FDB410) & 1;
}

void sub_1B1FEF7E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, unint64_t a8, unint64_t a9)
{
  uint64_t updated;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  __int128 v65;
  char *v66;
  uint64_t v67;
  unint64_t v68;
  unsigned int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80[2];

  v70 = a4;
  v71 = a5;
  v72 = a3;
  v60 = a2;
  updated = type metadata accessor for ParticleUpdateScript(0);
  MEMORY[0x1E0C80A78](updated, v14);
  v16 = (char *)&v59 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1B1792854(0, qword_1ED4B7E00, (void (*)(uint64_t))type metadata accessor for ScriptIndex);
  MEMORY[0x1E0C80A78](v17, v18);
  v66 = (char *)&v59 - v19;
  v20 = type metadata accessor for GraphScriptingConfig.ScriptInfo();
  v21 = *(_QWORD *)(v20 - 8);
  MEMORY[0x1E0C80A78](v20, v22);
  v24 = (char *)&v59 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v25, v26);
  v67 = (uint64_t)&v59 - v27;
  sub_1B1A02758(0, &qword_1ED4BAD88, (uint64_t)&type metadata for ScriptParameter, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v28 = swift_allocObject();
  v65 = xmmword_1B226D240;
  *(_OWORD *)(v28 + 16) = xmmword_1B226D240;
  *(_QWORD *)(v28 + 32) = 0xF000000000000000;
  *(_BYTE *)(v28 + 40) = 1;
  *(_QWORD *)(v28 + 48) = 0;
  *(_BYTE *)(v28 + 56) = 1;
  v80[0] = (_QWORD *)v28;
  LODWORD(v64) = a6;
  if ((a6 & 1) != 0)
  {
    v29 = (_QWORD *)v28;
    v30 = swift_allocObject();
    *(_QWORD *)(v30 + 16) = a1;
    v31 = v30 | 0xB000000000000000;
    v32 = sub_1B1C638E4(1, 2, 1, v29);
    v32[2] = 2;
    v32[8] = v31;
    *((_BYTE *)v32 + 72) = 1;
    v32[10] = 0;
    *((_BYTE *)v32 + 88) = 1;
    v80[0] = v32;
  }
  v33 = v71;
  v34 = sub_1B1DC4040(a8 | ((HIDWORD(a8) & 1) << 32));
  sub_1B1792810(*(_QWORD *)(v33 + 56) + *(_QWORD *)(v21 + 72) * v34, (uint64_t)v24, (uint64_t (*)(_QWORD))type metadata accessor for GraphScriptingConfig.ScriptInfo);
  v35 = v67;
  sub_1B1A025EC((uint64_t)v24, v67, (uint64_t (*)(_QWORD))type metadata accessor for GraphScriptingConfig.ScriptInfo);
  v36 = *(_QWORD *)(v35 + 24);
  if (v36)
  {
    v37 = *(_QWORD *)(v36 + 16);
    if (v37)
    {
      v61 = a7;
      v62 = updated;
      v63 = v16;
      v69 = v64 & 0x10101;
      v59 = swift_bridgeObjectRetain();
      v38 = (uint64_t *)(v59 + 80);
      v68 = a8 | ((HIDWORD(a8) & 1) << 32);
      v39 = v60;
      do
      {
        v40 = *(v38 - 6);
        v41 = *(v38 - 5);
        v42 = v37;
        v44 = *(v38 - 4);
        v43 = *(v38 - 3);
        v46 = *(v38 - 2);
        v45 = *(v38 - 1);
        v47 = *v38;
        v38 += 7;
        v73 = v40;
        v74 = v41;
        v75 = v44;
        v76 = v43;
        v77 = v46;
        v78 = v45;
        v79 = v47;
        swift_bridgeObjectRetain();
        sub_1B19FA2B4(v44, v43);
        sub_1B1C1113C((uint64_t)&v73, v39, v72, v70, v71, v69, v68, v80);
        swift_bridgeObjectRelease();
        sub_1B19F9FEC(v44, v43);
        v37 = v42 - 1;
      }
      while (v42 != 1);
      swift_bridgeObjectRelease();
      v16 = v63;
      updated = v62;
      a7 = v61;
      v35 = v67;
    }
  }
  v48 = *(_QWORD *)(v35 + 32);
  if (v48)
  {
    v49 = *(_QWORD *)(v48 + 16);
    if (v49)
    {
      v68 = a9;
      v61 = a7;
      v62 = updated;
      v63 = v16;
      v69 = v64 & 0x10101;
      v64 = swift_bridgeObjectRetain();
      v50 = (uint64_t *)(v64 + 80);
      v51 = v70;
      do
      {
        v52 = *(v50 - 6);
        v53 = *(v50 - 5);
        v54 = *(v50 - 4);
        v55 = *(v50 - 3);
        v56 = *(v50 - 2);
        v57 = *(v50 - 1);
        v58 = *v50;
        v50 += 7;
        v73 = v52;
        v74 = v53;
        v75 = v54;
        v76 = v55;
        v77 = v56;
        v78 = v57;
        v79 = v58;
        swift_bridgeObjectRetain();
        sub_1B19FA2B4(v54, v55);
        sub_1B1BFF088(&v73, v72, v51, v71, v69, v80);
        swift_bridgeObjectRelease();
        sub_1B19F9FEC(v54, v55);
        --v49;
      }
      while (v49);
      swift_bridgeObjectRelease();
    }
  }
  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAE70, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  *(_OWORD *)(swift_allocObject() + 16) = v65;
  __asm { BR              X12 }
}

uint64_t sub_1B1FEFC80()
{
  uint64_t v0;
  __int16 v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;

  *(_QWORD *)(v0 + 32) = 0x6E77617053;
  *(_QWORD *)(v0 + 40) = 0xE500000000000000;
  swift_bridgeObjectRelease();
  *(_QWORD *)(v3 + 16) = v0;
  if (v2[1])
  {
    v8 = *v2;
    v9 = v2[1];
  }
  else
  {
    v8 = *(_QWORD *)v3;
    v10 = *(_QWORD *)(v3 + 8);
    swift_bridgeObjectRetain();
    v9 = v10;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)v3 = v8;
  *(_QWORD *)(v3 + 8) = v9;
  v11 = *(_QWORD **)(v7 - 232);
  *v11 = v6;
  v12 = type metadata accessor for ScriptIndex();
  swift_storeEnumTagMultiPayload();
  (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 0, 1, v12);
  sub_1B1CAF140((uint64_t)v11, v3 + *(int *)(v5 + 36));
  sub_1B1A025EC(v3, v4, type metadata accessor for ParticleUpdateScript);
  sub_1B1A04628((uint64_t)v2, (uint64_t (*)(_QWORD))type metadata accessor for GraphScriptingConfig.ScriptInfo);
  sub_1B1A025EC(v4, v3, type metadata accessor for ParticleUpdateScript);
  *(_BYTE *)(v3 + 24) = HIBYTE(v1);
  v13 = *(_QWORD *)(v7 - 96);
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v3 + 32) = v13;
  return result;
}

uint64_t sub_1B1FEFE08(uint64_t a1, __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned __int16 *a8, uint64_t a9, unint64_t a10, uint64_t (*a11)(_QWORD), void (*a12)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *), void (*a13)(uint64_t, char *, uint64_t))
{
  uint64_t v13;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *i;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t (*v43)(_QWORD);
  void (*v44)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *);
  uint64_t v45;
  void (*v46)(uint64_t, char *, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v49 = a6;
  v50 = a7;
  v48 = a5;
  v51 = *MEMORY[0x1E0C80C00];
  v19 = a11(0);
  MEMORY[0x1E0C80A78](v19, v20);
  v23 = (char *)&v43 - v22;
  v24 = *(_QWORD *)(a1 + 48);
  v25 = *(_QWORD *)(v24 + 16);
  if (!v25)
    return 0;
  for (i = (_QWORD *)(v24 + 56); *(i - 3) != v21; i += 5)
  {
    if (!--v25)
      return 0;
  }
  v28 = *(_QWORD *)(a1 + 128) + *i + a2 * a3;
  v46 = a13;
  v43 = a11;
  v44 = a12;
  sub_1B1792810(v28, (uint64_t)v23, a11);
  v29 = *((_QWORD *)a8 + 1);
  v30 = *((_QWORD *)a8 + 2);
  v31 = *((unsigned __int8 *)a8 + 24);
  v47 = v13;
  v32 = *((unsigned __int8 *)a8 + 25);
  v45 = a4;
  v33 = *((unsigned __int8 *)a8 + 26);
  v34 = *a8;
  v35 = *(_QWORD *)(*(_QWORD *)(a9 + *(int *)(type metadata accessor for GraphScriptingConfig.ScriptInfo() + 44)) + 24);
  if (v32)
    v36 = 256;
  else
    v36 = 0;
  v37 = v36 | v31;
  if (v33)
    v38 = 0x10000;
  else
    v38 = 0;
  v39 = v37 | v38;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v44(v49, v50, v34, v29, v30, v39, v35, a10 | ((HIDWORD(a10) & 1) << 32), v23);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v40 = v45;
  v41 = sub_1B1DA61CC(v48) << 16 >> 48;
  v42 = **(_QWORD **)(v40 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues);
  swift_retain();
  v46(v41, v23, v42);
  swift_release();
  sub_1B1A04628((uint64_t)v23, v43);
  return 1;
}

uint64_t sub_1B1FF0044(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int16 *a5, uint64_t a6, unint64_t a7)
{
  return sub_1B1FF0080(a1, a2, a3, a4, a5, a6, a7, type metadata accessor for ParticleUpdateScript, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *))sub_1B1FEF7E0, (void (*)(uint64_t, char *, uint64_t))sub_1B1FDC390) & 1;
}

uint64_t sub_1B1FF0080(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int16 *a5, uint64_t a6, unint64_t a7, uint64_t (*a8)(_QWORD), void (*a9)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *), void (*a10)(uint64_t, char *, uint64_t))
{
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;

  v17 = HIDWORD(a1);
  v18 = *(_QWORD *)(a8(0) - 8);
  if (*(_QWORD *)(v18 + 64))
  {
    v19 = *(_QWORD *)(v18 + 72);
    if ((_DWORD)a1 != -1)
      goto LABEL_6;
  }
  else
  {
    v19 = 0;
    if ((_DWORD)a1 != -1)
      goto LABEL_6;
  }
  if (!(_DWORD)v17)
  {
LABEL_10:
    v20 = 0;
    return v20 & 1;
  }
LABEL_6:
  v20 = 0;
  if ((uint64_t)(a1 << 32) >= (uint64_t)0xFFFFFFFF00000001
    && (int)a1 < *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8))
  {
    v21 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
    if ((_DWORD)v17 == -1 || *(_DWORD *)(v21 + 12 * (int)a1 + 8) == (_DWORD)v17)
    {
      v20 = sub_1B1FEFE08(*(_QWORD *)(*(_QWORD *)(a2 + 136) + 8 * *(int *)(v21 + 12 * (int)a1) + 32), *(_WORD *)(v21 + 12 * (int)a1 + 4), v19, a2, a1, a3, a4, a5, a6, a7 | ((HIDWORD(a7) & 1) << 32), a8, a9, a10);
      return v20 & 1;
    }
    goto LABEL_10;
  }
  return v20 & 1;
}

uint64_t sub_1B1FF01CC(uint64_t a1, __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned __int16 *a6, uint64_t a7, uint64_t a8, unint64_t a9, uint64_t a10, unint64_t a11)
{
  uint64_t v11;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *i;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v34 = a7;
  v35 = *MEMORY[0x1E0C80C00];
  v19 = type metadata accessor for GraphScript(0);
  MEMORY[0x1E0C80A78](v19, v20);
  v23 = (char *)&v31 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = *(_QWORD *)(a1 + 48);
  v25 = *(_QWORD *)(v24 + 16);
  if (v25)
  {
    v32 = a4;
    v33 = a8;
    v31 = a5;
    for (i = (_QWORD *)(v24 + 56); *(i - 3) != v21; i += 5)
    {
      if (!--v25)
        return v25 & 1;
    }
    sub_1B1792810(*(_QWORD *)(a1 + 128) + *i + a2 * a3, (uint64_t)v23, type metadata accessor for GraphScript);
    sub_1B1C139E4((uint64_t)v23, a6, v34, v33, a9, a10, a11 | ((HIDWORD(a11) & 1) << 32));
    if (v11)
    {
      sub_1B1A04628((uint64_t)v23, type metadata accessor for GraphScript);
    }
    else
    {
      v27 = v32;
      v28 = sub_1B1DA61CC(v31) << 16 >> 48;
      v29 = **(_QWORD **)(v27 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues);
      swift_retain();
      sub_1B1FDDFD8(v28, v23, v29, type metadata accessor for GraphScript, (uint64_t (*)(const void *, const void *))sub_1B1FF3344);
      swift_release();
      sub_1B1A04628((uint64_t)v23, type metadata accessor for GraphScript);
      LOBYTE(v25) = 1;
    }
  }
  return v25 & 1;
}

uint64_t sub_1B1FF03B4(unint64_t a1, uint64_t a2, unsigned __int16 *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, unint64_t a8)
{
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v15 = HIDWORD(a1);
  v16 = *(_QWORD *)(type metadata accessor for GraphScript(0) - 8);
  if (*(_QWORD *)(v16 + 64))
  {
    v17 = *(_QWORD *)(v16 + 72);
    if ((_DWORD)a1 != -1)
      goto LABEL_6;
  }
  else
  {
    v17 = 0;
    if ((_DWORD)a1 != -1)
      goto LABEL_6;
  }
  if (!(_DWORD)v15)
    return 0;
LABEL_6:
  if ((uint64_t)(a1 << 32) < (uint64_t)0xFFFFFFFF00000001)
    return 0;
  if ((int)a1 >= *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8))
    return 0;
  v18 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
  if ((_DWORD)v15 != -1 && *(_DWORD *)(v18 + 12 * (int)a1 + 8) != (_DWORD)v15)
    return 0;
  return sub_1B1FF01CC(*(_QWORD *)(*(_QWORD *)(a2 + 136) + 8 * *(int *)(v18 + 12 * (int)a1) + 32), *(_WORD *)(v18 + 12 * (int)a1 + 4), v17, a2, a1, a3, a4, a5, a6, a7, a8 | ((HIDWORD(a8) & 1) << 32)) & 1;
}

uint64_t sub_1B1FF04F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t *v22;
  uint64_t v23;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v25;
  uint64_t v26;
  char v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t result;
  uint64_t v35;
  int64_t v36;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;

  v3 = a3;
  v35 = a1 + 64;
  v5 = 1 << *(_BYTE *)(a1 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(a1 + 64);
  v8 = 0;
  v36 = (unint64_t)(v5 + 63) >> 6;
  v38 = swift_bridgeObjectRetain();
  while (1)
  {
    if (v7)
    {
      v10 = __clz(__rbit64(v7));
      v11 = (v7 - 1) & v7;
      v12 = v10 | (v8 << 6);
    }
    else
    {
      v13 = v8 + 1;
      if (v8 + 1 >= v36)
        return swift_release();
      v14 = *(_QWORD *)(v35 + 8 * v13);
      if (!v14)
      {
        v13 = v8 + 2;
        if (v8 + 2 >= v36)
          return swift_release();
        v14 = *(_QWORD *)(v35 + 8 * v13);
        if (!v14)
        {
          v13 = v8 + 3;
          if (v8 + 3 >= v36)
            return swift_release();
          v14 = *(_QWORD *)(v35 + 8 * v13);
          if (!v14)
          {
            v13 = v8 + 4;
            if (v8 + 4 >= v36)
              return swift_release();
            v14 = *(_QWORD *)(v35 + 8 * v13);
            if (!v14)
            {
              v13 = v8 + 5;
              if (v8 + 5 >= v36)
                return swift_release();
              v14 = *(_QWORD *)(v35 + 8 * v13);
              if (!v14)
              {
                while (v36 - 6 != v8)
                {
                  v14 = *(_QWORD *)(v38 + 112 + 8 * v8++);
                  if (v14)
                  {
                    v13 = v8 + 5;
                    goto LABEL_21;
                  }
                }
                return swift_release();
              }
            }
          }
        }
      }
LABEL_21:
      v11 = (v14 - 1) & v14;
      v12 = __clz(__rbit64(v14)) + (v13 << 6);
      v8 = v13;
    }
    v15 = (uint64_t *)(*(_QWORD *)(v38 + 48) + 16 * v12);
    v17 = *v15;
    v16 = v15[1];
    v18 = *(_QWORD *)(*(_QWORD *)(v38 + 56) + 8 * v12);
    v19 = *(_QWORD *)(v3 + 16);
    swift_bridgeObjectRetain();
    v39 = v11;
    v40 = v8;
    if (v19)
    {
      swift_bridgeObjectRetain();
      swift_retain();
      v20 = sub_1B1DC3B00(v17, v16);
      if ((v21 & 1) != 0)
      {
        v22 = (uint64_t *)(*(_QWORD *)(v3 + 56) + 16 * v20);
        v17 = *v22;
        v23 = v22[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        goto LABEL_28;
      }
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_retain();
    }
    swift_bridgeObjectRetain();
    v23 = v16;
LABEL_28:
    swift_retain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v25 = *(_QWORD **)(a2 + 16);
    v26 = a2;
    *(_QWORD *)(a2 + 16) = 0x8000000000000000;
    v28 = sub_1B1DC3B00(v17, v23);
    v29 = v27;
    v30 = v25[2] + ((v27 & 1) == 0);
    if (v25[3] < v30)
      break;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      if ((v27 & 1) == 0)
        goto LABEL_4;
    }
    else
    {
      sub_1B1EADA44();
      if ((v29 & 1) == 0)
      {
LABEL_4:
        v25[(v28 >> 6) + 8] |= 1 << v28;
        v9 = (uint64_t *)(v25[6] + 16 * v28);
        *v9 = v17;
        v9[1] = v23;
        *(_QWORD *)(v25[7] + 8 * v28) = v18;
        ++v25[2];
        swift_bridgeObjectRetain();
        goto LABEL_5;
      }
    }
LABEL_34:
    v33 = v25[7];
    swift_release();
    *(_QWORD *)(v33 + 8 * v28) = v18;
LABEL_5:
    v7 = v39;
    a2 = v26;
    *(_QWORD *)(v26 + 16) = v25;
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v3 = a3;
    v8 = v40;
  }
  sub_1B1E9AAA0(v30, isUniquelyReferenced_nonNull_native);
  v31 = sub_1B1DC3B00(v17, v23);
  if ((v29 & 1) == (v32 & 1))
  {
    v28 = v31;
    if ((v29 & 1) == 0)
      goto LABEL_4;
    goto LABEL_34;
  }
  result = sub_1B2229FC4();
  __break(1u);
  return result;
}

uint64_t sub_1B1FF0858(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  os_unfair_lock_s *v14;
  uint64_t v15;
  BOOL v16;
  uint64_t *v17;

  v4 = v3;
  v7 = result;
  if (result != 0xFFFFFFFFLL
    && result << 32 >= (uint64_t)0xFFFFFFFF00000001
    && (int)result < *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8))
  {
    v8 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
    if (HIDWORD(result) == -1 || *(_DWORD *)(v8 + 12 * (int)result + 8) == HIDWORD(result))
    {
      v9 = (int *)(v8 + 12 * (int)result);
      v10 = *((__int16 *)v9 + 2);
      v11 = *(_QWORD *)(*(_QWORD *)(a2 + 136) + 8 * *v9 + 32);
      if (*(_QWORD *)(v11 + 232) <= v10 && *(_QWORD *)(v11 + 240) > v10)
      {
        v13 = **(_QWORD **)(a2 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues);
        v14 = *(os_unfair_lock_s **)(v11 + 344);
        swift_unknownObjectRetain();
        swift_retain();
        os_unfair_lock_lock(v14);
        v15 = *(_QWORD *)(v13 + 32);
        ecs_stack_allocator_push_snapshot(v15);
        v16 = sub_1B1E36538((uint64_t)&type metadata for TextureGPURuntime);
        swift_unknownObjectRetain_n();
        swift_retain();
        if (!v16)
        {
          v17 = ecs_stack_allocator_allocate(v15, 8, 8);
          *v17 = v10;
          sub_1B1A11C8C((uint64_t)&type metadata for TextureGPURuntime, (uint64_t)&off_1E6390060, v17, 1, 1);
        }
        swift_unknownObjectRetain();
        sub_1B1FE6C24(v7, a2, a3);
        swift_release();
        swift_unknownObjectRelease_n();
        if (!v4)
          ecs_stack_allocator_pop_snapshot(*(_QWORD *)(v13 + 32));
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v11 + 344));
        swift_unknownObjectRelease();
        return swift_release();
      }
    }
  }
  return result;
}

uint64_t sub_1B1FF0A3C(uint64_t a1, __int16 a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *i;
  uint64_t result;
  uint64_t v8;

  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(v4 + 16);
  if (!v5)
    return 0;
  for (i = (_QWORD *)(v4 + 56); (ValueMetadata *)*(i - 3) != &type metadata for EmitterRuntime; i += 5)
  {
    if (!--v5)
      return 0;
  }
  result = sub_1B1B0EF18(*(_QWORD *)(a1 + 128) + *i + a2 * a3, &v8);
  if (!v3)
    return v8;
  return result;
}

uint64_t sub_1B1FF0AB4(uint64_t a1, __int16 a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *i;
  uint64_t v6;

  v3 = *(_QWORD *)(a1 + 48);
  v4 = *(_QWORD *)(v3 + 16);
  if (!v4)
    return 0;
  for (i = (_QWORD *)(v3 + 56); (ValueMetadata *)*(i - 3) != &type metadata for TextureFileAsset; i += 5)
  {
    if (!--v4)
      return 0;
  }
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
  swift_bridgeObjectRetain();
  return v6;
}

uint64_t sub_1B1FF0B30(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t i;

  v1 = *(_QWORD *)(a1 + 48);
  v2 = *(_QWORD *)(v1 + 16);
  if (!v2)
    return 0;
  for (i = v1 + 56; *(ValueMetadata **)(i - 24) != &type metadata for EmitterRuntime; i += 40)
  {
    if (!--v2)
      return 0;
  }
  return swift_bridgeObjectRetain();
}

uint64_t sub_1B1FF0B98(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t i;

  v1 = *(_QWORD *)(a1 + 48);
  v2 = *(_QWORD *)(v1 + 16);
  if (!v2)
    return 0;
  for (i = v1 + 56; *(ValueMetadata **)(i - 24) != &type metadata for EmitterRuntime; i += 40)
  {
    if (!--v2)
      return 0;
  }
  return swift_bridgeObjectRetain();
}

uint64_t sub_1B1FF0C00(uint64_t a1, __int16 a2, uint64_t a3, char a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *i;
  uint64_t v8;

  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(v4 + 16);
  if (!v5)
    return 2;
  for (i = (_QWORD *)(v4 + 56); (ValueMetadata *)*(i - 3) != &type metadata for EmitterRuntime; i += 5)
  {
    if (!--v5)
      return 2;
  }
  v8 = *(_QWORD *)(a1 + 128) + *i + a2 * a3;
  if (a4 == 3)
  {
    if (*(uint64_t *)(v8 + 464) < 1)
      return 0;
  }
  else if (a4 == 2 && *(uint64_t *)(v8 + 112) <= 0)
  {
    return 0;
  }
  return 1;
}

unint64_t sub_1B1FF0C88(uint64_t a1, __int16 a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unsigned __int8 v7;

  v3 = *(_QWORD *)(a1 + 48);
  v4 = *(_QWORD *)(v3 + 16);
  if (v4)
  {
    v5 = (_QWORD *)(v3 + 56);
    while ((ValueMetadata *)*(v5 - 3) != &type metadata for EmitterDescription)
    {
      v5 += 5;
      if (!--v4)
        goto LABEL_5;
    }
    v7 = 0;
    v6 = *(unsigned int *)(*(_QWORD *)(a1 + 128) + *v5 + a2 * a3 + 80);
  }
  else
  {
LABEL_5:
    v6 = 0;
    v7 = 1;
  }
  return v6 | ((unint64_t)v7 << 32);
}

uint64_t sub_1B1FF0CF8(uint64_t a1, __int16 a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *i;

  v3 = *(_QWORD *)(a1 + 48);
  v4 = *(_QWORD *)(v3 + 16);
  if (!v4)
    return 2;
  for (i = (_QWORD *)(v3 + 56); (ValueMetadata *)*(i - 3) != &type metadata for EmitterDescription; i += 5)
  {
    if (!--v4)
      return 2;
  }
  return *(unsigned __int8 *)(*(_QWORD *)(a1 + 128) + *i + a2 * a3 + 41);
}

uint64_t sub_1B1FF0D4C(uint64_t a1)
{
  return sub_1B1FF0D60(a1);
}

uint64_t sub_1B1FF0D60(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t i;

  v1 = *(_QWORD *)(a1 + 48);
  v2 = *(_QWORD *)(v1 + 16);
  if (!v2)
    return 0;
  for (i = v1 + 56; *(ValueMetadata **)(i - 24) != &type metadata for EmitterRuntime; i += 40)
  {
    if (!--v2)
      return 0;
  }
  return swift_retain();
}

uint64_t sub_1B1FF0DC8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t i;

  v1 = *(_QWORD *)(a1 + 48);
  v2 = *(_QWORD *)(v1 + 16);
  if (!v2)
    return 0;
  for (i = v1 + 56; *(ValueMetadata **)(i - 24) != &type metadata for EmitterRuntime; i += 40)
  {
    if (!--v2)
      return 0;
  }
  return swift_retain();
}

uint64_t sub_1B1FF0E2C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v1 = *(_QWORD *)(a1 + 48);
  v2 = *(_QWORD *)(v1 + 16);
  if (!v2)
    return 1;
  v3 = v1 + 56;
  result = 1;
  while (*(ValueMetadata **)(v3 - 24) != &type metadata for CodeGenerationComponent)
  {
    v3 += 40;
    if (!--v2)
      return result;
  }
  return swift_retain();
}

uint64_t sub_1B1FF0EA0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t i;

  v1 = *(_QWORD *)(a1 + 48);
  v2 = *(_QWORD *)(v1 + 16);
  if (!v2)
    return 0;
  for (i = v1 + 56; *(ValueMetadata **)(i - 24) != &type metadata for GraphEntityComponentPropertyReferences; i += 40)
  {
    if (!--v2)
      return 0;
  }
  return swift_bridgeObjectRetain();
}

uint64_t sub_1B1FF0F08(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t i;

  v1 = *(_QWORD *)(a1 + 48);
  v2 = *(_QWORD *)(v1 + 16);
  if (!v2)
    return 0;
  for (i = v1 + 56; *(ValueMetadata **)(i - 24) != &type metadata for TextureGPURuntime; i += 40)
  {
    if (!--v2)
      return 0;
  }
  return swift_unknownObjectRetain();
}

unint64_t sub_1B1FF0F6C(uint64_t a1, __int16 a2, uint64_t a3, uint64_t a4, _BYTE *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *i;
  unint64_t result;

  v6 = *(_QWORD *)(a1 + 48);
  v7 = *(_QWORD *)(v6 + 16);
  if (!v7)
    return 1;
  for (i = (_QWORD *)(v6 + 56); (ValueMetadata *)*(i - 3) != &type metadata for EmitterDescription; i += 5)
  {
    if (!--v7)
      return 1;
  }
  result = sub_1B1C80A0C(*(_QWORD *)(a1 + 128) + *i + a2 * a3, a4, a5);
  if (!v5)
    return 0;
  return result;
}

unint64_t sub_1B1FF0FEC(unint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  uint64_t v4;
  unint64_t v6;
  unint64_t result;
  uint64_t v8;

  v6 = HIDWORD(a1);
  if (a1 == 0xFFFFFFFF)
    return 1;
  result = 1;
  if ((uint64_t)(a1 << 32) >= (uint64_t)0xFFFFFFFF00000001
    && (int)a1 < *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8))
  {
    v8 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
    if ((_DWORD)v6 == -1 || *(_DWORD *)(v8 + 12 * (int)a1 + 8) == (_DWORD)v6)
    {
      result = sub_1B1FF0F6C(*(_QWORD *)(*(_QWORD *)(a2 + 136) + 8 * *(int *)(v8 + 12 * (int)a1) + 32), *(_WORD *)(v8 + 12 * (int)a1 + 4), 88, a3, a4);
      if (!v4)
        return result & 1;
    }
  }
  return result;
}

uint64_t sub_1B1FF10A4@<X0>(uint64_t result@<X0>, __int16 a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t *v16;

  v4 = *(_QWORD *)(result + 48);
  v5 = *(_QWORD *)(v4 + 16);
  if (v5)
  {
    v6 = (_QWORD *)(v4 + 56);
    while ((ValueMetadata *)*(v6 - 3) != &type metadata for InverseWorldTransform)
    {
      v6 += 5;
      if (!--v5)
        goto LABEL_5;
    }
    v15 = 0;
    v16 = (uint64_t *)(*(_QWORD *)(result + 128) + *v6 + a2 * a3);
    v7 = *v16;
    v8 = v16[1];
    v9 = v16[2];
    v10 = v16[3];
    v11 = v16[4];
    v12 = v16[5];
    v13 = v16[6];
    v14 = v16[7];
  }
  else
  {
LABEL_5:
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v15 = 1;
  }
  *(_QWORD *)a4 = v7;
  *(_QWORD *)(a4 + 8) = v8;
  *(_QWORD *)(a4 + 16) = v9;
  *(_QWORD *)(a4 + 24) = v10;
  *(_QWORD *)(a4 + 32) = v11;
  *(_QWORD *)(a4 + 40) = v12;
  *(_QWORD *)(a4 + 48) = v13;
  *(_QWORD *)(a4 + 56) = v14;
  *(_BYTE *)(a4 + 64) = v15;
  return result;
}

uint64_t sub_1B1FF113C(uint64_t a1, __int16 a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *i;

  v3 = *(_QWORD *)(a1 + 48);
  v4 = *(_QWORD *)(v3 + 16);
  if (!v4)
    return 0;
  for (i = (_QWORD *)(v3 + 56); (ValueMetadata *)*(i - 3) != &type metadata for EmitterRuntime; i += 5)
  {
    if (!--v4)
      return 0;
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 128) + *i + a2 * a3 + 104);
}

uint64_t sub_1B1FF11B0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t i;

  v1 = *(_QWORD *)(a1 + 48);
  v2 = *(_QWORD *)(v1 + 16);
  if (!v2)
    return 0;
  for (i = v1 + 56; *(ValueMetadata **)(i - 24) != &type metadata for VertexLayoutCollection; i += 40)
  {
    if (!--v2)
      return 0;
  }
  return swift_bridgeObjectRetain();
}

uint64_t sub_1B1FF1214(uint64_t a1, __int16 a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *i;

  v3 = *(_QWORD *)(a1 + 48);
  v4 = *(_QWORD *)(v3 + 16);
  if (!v4)
    return 0;
  for (i = (_QWORD *)(v3 + 56); (ValueMetadata *)*(i - 3) != &type metadata for EmitterRuntime; i += 5)
  {
    if (!--v4)
      return 0;
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 128) + *i + a2 * a3 + 232);
}

uint64_t sub_1B1FF1284(uint64_t a1, __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *i;
  uint64_t result;
  uint64_t v10;
  char v11;

  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(v5 + 16);
  if (!v6)
    return 0;
  for (i = (_QWORD *)(v5 + 56); (ValueMetadata *)*(i - 3) != &type metadata for EmitterRuntime; i += 5)
  {
    if (!--v6)
      return 0;
  }
  v10 = *(_QWORD *)(a1 + 128) + *i + a2 * a3;
  if (*(_BYTE *)(v10 + 272) == 1)
  {
    if (*(_QWORD *)(v10 + 360))
      return *(_QWORD *)(v10 + 464);
    else
      return 0;
  }
  else
  {
    result = sub_1B1E53550();
    if ((v11 & 1) != 0)
      return a5;
  }
  return result;
}

uint64_t sub_1B1FF1344(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v5;
  uint64_t result;
  uint64_t v7;

  v5 = HIDWORD(a1);
  if (a1 == 0xFFFFFFFF)
    return 0;
  result = 0;
  if ((uint64_t)(a1 << 32) >= (uint64_t)0xFFFFFFFF00000001
    && (int)a1 < *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8))
  {
    v7 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
    if ((_DWORD)v5 == -1 || *(_DWORD *)(v7 + 12 * (int)a1 + 8) == (_DWORD)v5)
      return sub_1B1FF1284(*(_QWORD *)(*(_QWORD *)(a2 + 136) + 8 * *(int *)(v7 + 12 * (int)a1) + 32), *(_WORD *)(v7 + 12 * (int)a1 + 4), 656, a3, a4);
    else
      return 0;
  }
  return result;
}

uint64_t sub_1B1FF1414(uint64_t a1, __int16 a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *i;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = *(_QWORD *)(a1 + 48);
  v4 = *(_QWORD *)(v3 + 16);
  if (!v4)
    return 0;
  for (i = (_QWORD *)(v3 + 56); (ValueMetadata *)*(i - 3) != &type metadata for EmitterRuntime; i += 5)
  {
    if (!--v4)
      return 0;
  }
  v7 = *(_QWORD *)(a1 + 128) + *i + a2 * a3;
  v8 = *(unsigned __int8 *)(v7 + 272);
  v9 = *(_QWORD *)(v7 + 288);
  v10 = *(_QWORD *)(v7 + 304);
  v11 = *(_QWORD *)(v7 + 448);
  if (!v8)
    v11 = 0;
  return v9 + v11 * v10;
}

uint64_t sub_1B1FF148C(uint64_t a1, __int16 a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *i;
  uint64_t v7;

  v3 = *(_QWORD *)(a1 + 48);
  v4 = *(_QWORD *)(v3 + 16);
  if (!v4)
    return 0;
  for (i = (_QWORD *)(v3 + 56); (ValueMetadata *)*(i - 3) != &type metadata for EmitterRuntime; i += 5)
  {
    if (!--v4)
      return 0;
  }
  v7 = *(_QWORD *)(a1 + 128) + *i + a2 * a3;
  if (*(_QWORD *)(v7 + 360))
    return *(_QWORD *)(v7 + 368);
  else
    return 0;
}

uint64_t sub_1B1FF14FC(uint64_t a1, __int16 a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *i;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _OWORD v12[7];

  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(v4 + 16);
  if (!v5)
    return 1;
  for (i = (_QWORD *)(v4 + 56); (ValueMetadata *)*(i - 3) != &type metadata for MaterialRuntime; i += 5)
  {
    if (!--v5)
      return 1;
  }
  v8 = *(_QWORD *)(a1 + 128) + *i + a2 * a3;
  *(_QWORD *)(a4 + 152) = *(_QWORD *)(v8 + 216);
  *(_QWORD *)(a4 + 144) = *(_QWORD *)(v8 + 208);
  *(_BYTE *)(a4 + 256) = *(_BYTE *)(v8 + 224);
  *(_BYTE *)(a4 + 257) = *(_BYTE *)(v8 + 226);
  v9 = *(_OWORD *)(v8 + 112);
  v12[4] = *(_OWORD *)(v8 + 96);
  v12[5] = v9;
  v12[6] = *(_OWORD *)(v8 + 128);
  v10 = *(_OWORD *)(v8 + 48);
  v12[0] = *(_OWORD *)(v8 + 32);
  v12[1] = v10;
  v11 = *(_OWORD *)(v8 + 80);
  v12[2] = *(_OWORD *)(v8 + 64);
  v12[3] = v11;
  sub_1B1EC7248((uint64_t)v12);
  return 0;
}

uint64_t sub_1B1FF15C0(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v5;
  uint64_t result;
  uint64_t v7;

  v5 = HIDWORD(a1);
  if (a1 == 0xFFFFFFFF)
    return 1;
  result = 1;
  if ((uint64_t)(a1 << 32) >= (uint64_t)0xFFFFFFFF00000001
    && (int)a1 < *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8))
  {
    v7 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
    if ((_DWORD)v5 == -1 || *(_DWORD *)(v7 + 12 * (int)a1 + 8) == (_DWORD)v5)
    {
      result = sub_1B1FF14FC(*(_QWORD *)(*(_QWORD *)(a2 + 136) + 8 * *(int *)(v7 + 12 * (int)a1) + 32), *(_WORD *)(v7 + 12 * (int)a1 + 4), 248, a3);
      if (!v3)
        return result & 1;
    }
  }
  return result;
}

uint64_t sub_1B1FF1674(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v1 = *(_QWORD *)(a1 + 48);
  v2 = *(_QWORD *)(v1 + 16);
  if (!v2)
    return 1;
  v3 = v1 + 56;
  result = 1;
  while (*(ValueMetadata **)(v3 - 24) != &type metadata for EmitterRuntime)
  {
    v3 += 40;
    if (!--v2)
      return result;
  }
  return swift_unknownObjectRetain();
}

uint64_t sub_1B1FF1708(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v1 = *(_QWORD *)(a1 + 48);
  v2 = *(_QWORD *)(v1 + 16);
  if (!v2)
    return 1;
  v3 = v1 + 56;
  result = 1;
  while (*(ValueMetadata **)(v3 - 24) != &type metadata for EmitterRuntime)
  {
    v3 += 40;
    if (!--v2)
      return result;
  }
  return swift_unknownObjectRetain();
}

uint64_t sub_1B1FF1780(uint64_t a1, __int16 a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v6;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 48);
  v4 = *(_QWORD *)(v3 + 16);
  if (!v4)
    return 1;
  v6 = (_QWORD *)(v3 + 56);
  result = 1;
  while ((ValueMetadata *)*(v6 - 3) != &type metadata for EmitterRuntime)
  {
    v6 += 5;
    if (!--v4)
      return result;
  }
  result = *(_QWORD *)(*(_QWORD *)(a1 + 128) + *v6 + a2 * a3 + 360);
  if (result)
    return swift_unknownObjectRetain();
  return result;
}

uint64_t sub_1B1FF17FC(uint64_t a1, __int16 a2, uint64_t a3, uint64_t *a4, unsigned int a5)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *i;
  uint64_t result;
  uint64_t v9;
  unsigned int v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;

  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(v5 + 16);
  if (!v6)
    return 1;
  for (i = (_QWORD *)(v5 + 56); (ValueMetadata *)*(i - 3) != &type metadata for EmitterRuntime; i += 5)
  {
    if (!--v6)
      return 1;
  }
  v9 = *(_QWORD *)(a1 + 128) + *i + a2 * a3;
  if ((*(_BYTE *)(v9 + 160) & 1) != 0
    || (v10 = *(_DWORD *)(v9 + 136), v11 = a5 >= v10, v12 = a5 - v10, !v11)
    || *(_QWORD *)(v9 + 152) <= v12)
  {
    v13 = -1;
  }
  else
  {
    v13 = *(_QWORD *)(*(_QWORD *)(v9 + 144) + 8 * v12);
  }
  result = 0;
  *a4 = v13;
  return result;
}

uint64_t sub_1B1FF1884(uint64_t a1, __int16 a2, uint64_t a3, uint64_t a4, unint64_t a5, unint64_t *a6)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *i;
  uint64_t result;
  unint64_t v12;

  v6 = *(_QWORD *)(a1 + 48);
  v7 = *(_QWORD *)(v6 + 16);
  if (!v7)
    return 1;
  for (i = (_QWORD *)(v6 + 56); (ValueMetadata *)*(i - 3) != &type metadata for EmitterRuntime; i += 5)
  {
    if (!--v7)
      return 1;
  }
  if (HIDWORD(a5))
  {
    result = sub_1B222967C();
    __break(1u);
  }
  else
  {
    LODWORD(v12) = vfx_uniform_grid_find_nearest_neighbors(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 128) + *i + a2 * a3 + 504) + 16), a4, a5, 1);
    result = 0;
    v12 = v12;
    if (v12 >= a5)
      v12 = a5;
    *a6 = v12;
  }
  return result;
}

uint64_t sub_1B1FF1988(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v9;

  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(v4 + 16);
  if (!v5)
    return 1;
  for (i = v4 + 56; *(ValueMetadata **)(i - 24) != &type metadata for GraphScriptingConfig; i += 40)
  {
    if (!--v5)
      return 1;
  }
  v9 = swift_bridgeObjectRetain();
  sub_1B1FDEE64(v9, a4);
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_1B1FF1A20(uint64_t a1, __int16 a2, uint64_t a3, __n128 a4, __n128 a5, __n128 a6, __n128 a7)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD *i;
  __n128 *v11;

  v7 = *(_QWORD *)(a1 + 48);
  v8 = *(_QWORD *)(v7 + 16);
  if (!v8)
    return 0;
  for (i = (_QWORD *)(v7 + 56); (ValueMetadata *)*(i - 3) != &type metadata for WorldTransform; i += 5)
  {
    if (!--v8)
      return 0;
  }
  v11 = (__n128 *)(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
  *v11 = a4;
  v11[1] = a5;
  v11[2] = a6;
  v11[3] = a7;
  return 1;
}

uint64_t sub_1B1FF1A7C(uint64_t a1, __int16 a2, uint64_t a3, simd_float4x4 a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *i;
  simd_float4x4 *v8;

  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(v4 + 16);
  if (!v5)
    return 0;
  for (i = (_QWORD *)(v4 + 56); (ValueMetadata *)*(i - 3) != &type metadata for InverseWorldTransform; i += 5)
  {
    if (!--v5)
      return 0;
  }
  v8 = (simd_float4x4 *)(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
  *v8 = __invert_f4(a4);
  return 1;
}

uint64_t sub_1B1FF1AF8(uint64_t a1, __int16 a2, uint64_t a3, simd_float4x4 *a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *i;
  simd_float4x4 *v8;

  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(v4 + 16);
  if (!v5)
    return 0;
  for (i = (_QWORD *)(v4 + 56); (ValueMetadata *)*(i - 3) != &type metadata for InverseWorldTransform; i += 5)
  {
    if (!--v5)
      return 0;
  }
  v8 = (simd_float4x4 *)(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
  *v8 = __invert_f4(*a4);
  return 1;
}

uint64_t sub_1B1FF1B7C(uint64_t a1, __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *i;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  __int16 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  _QWORD v21[3];
  char v22;
  __int128 v23;
  uint64_t v24;
  __int16 v25;

  v6 = *(_QWORD *)(a1 + 48);
  v7 = *(_QWORD *)(v6 + 16);
  if (!v7)
    return 0;
  for (i = (_QWORD *)(v6 + 56); (ValueMetadata *)*(i - 3) != &type metadata for TextureLoadingOptions; i += 5)
  {
    if (!--v7)
      return 0;
  }
  v10 = (uint64_t *)(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
  v11 = *v10;
  v12 = v10[1];
  v13 = v10[2];
  v14 = *((_BYTE *)v10 + 24);
  v20 = *((_OWORD *)v10 + 2);
  v15 = v10[6];
  v16 = *((_WORD *)v10 + 28);
  if ((a6 & ~*v10) != 0)
    v17 = a6;
  else
    v17 = 0;
  v18 = v17 | v11;
  v19 = sub_1B1DA61CC(a5) << 16 >> 48;
  v21[0] = v18;
  v21[1] = v12;
  v21[2] = v13;
  v22 = v14;
  v23 = v20;
  v24 = v15;
  v25 = v16;
  swift_retain();
  sub_1B1FD97BC(v19, (uint64_t)v21);
  swift_release();
  return 1;
}

uint64_t sub_1B1FF1CB0(uint64_t a1, __int16 a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1FF1D10(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t))sub_1B1FE30E4) & 1;
}

uint64_t sub_1B1FF1CD0(uint64_t a1, __int16 a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1FF1D10(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t))sub_1B1FE34F4) & 1;
}

uint64_t sub_1B1FF1CF0(uint64_t a1, __int16 a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1FF1D10(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t))sub_1B1FE3904) & 1;
}

uint64_t sub_1B1FF1D10(uint64_t a1, __int16 a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t))
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *i;

  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(v5 + 16);
  if (!v6)
    return 0;
  for (i = (_QWORD *)(v5 + 56); (ValueMetadata *)*(i - 3) != &type metadata for EmitterRuntime; i += 5)
  {
    if (!--v6)
      return 0;
  }
  a5(*(_QWORD *)(a1 + 128) + *i + a2 * a3, a4);
  return 1;
}

uint64_t sub_1B1FF1D7C(uint64_t a1, __int16 a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, unsigned __int16 **a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  _QWORD *i;

  v9 = *(_QWORD *)(a1 + 48);
  v10 = *(_QWORD *)(v9 + 16);
  if (!v10)
    return 0;
  for (i = (_QWORD *)(v9 + 56); (ValueMetadata *)*(i - 3) != &type metadata for EmitterRuntime; i += 5)
  {
    if (!--v10)
      return 0;
  }
  sub_1B1E5495C(*(_QWORD *)(a1 + 128) + *i + a2 * a3, a4, a5, a6, a7, a8, a9);
  return 1;
}

uint64_t sub_1B1FF1E00(uint64_t a1, __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *i;
  uint64_t v10;

  v6 = *(_QWORD *)(a1 + 48);
  v7 = *(_QWORD *)(v6 + 16);
  if (!v7)
    return 0;
  for (i = (_QWORD *)(v6 + 56); (ValueMetadata *)*(i - 3) != &type metadata for EmitterRuntime; i += 5)
  {
    if (!--v7)
      return 0;
  }
  if (*(_QWORD *)(a4 + OBJC_IVAR____TtC3VFX13EntityManager_clock + 8) >= a5)
  {
    v10 = *(_QWORD *)(a1 + 128) + *i + a2 * a3;
    *(_QWORD *)(v10 + 464) -= a6;
  }
  return 1;
}

uint64_t sub_1B1FF1E84(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  unint64_t v36;
  _QWORD *v37;
  int *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v50;
  uint64_t v51;
  int64_t v52;
  uint64_t v53;
  int64_t v54;
  char *v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  int *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  int v65;
  unint64_t v66;
  uint64_t v67;

  v3 = v2;
  v6 = type metadata accessor for GraphScriptingConfig.ScriptInfo();
  v58 = *(_QWORD *)(v6 - 8);
  v59 = (int *)v6;
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (uint64_t *)((char *)&v50 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v50 - v12;
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)&v50 - v16;
  sub_1B1FF34B0();
  v18 = sub_1B22296B8();
  v19 = 0;
  v60 = a1;
  v61 = v18;
  v22 = *(_QWORD *)(a1 + 64);
  v21 = a1 + 64;
  v20 = v22;
  v23 = 1 << *(_BYTE *)(v21 - 32);
  v24 = -1;
  if (v23 < 64)
    v24 = ~(-1 << v23);
  v25 = v24 & v20;
  v56 = v18 + 64;
  v57 = v13 + 24;
  v53 = v21;
  v54 = (unint64_t)(v23 + 63) >> 6;
  v51 = v21 + 40;
  v52 = v54 - 5;
  v55 = v17;
  while (1)
  {
    v67 = v3;
    if (v25)
    {
      v62 = (v25 - 1) & v25;
      v63 = v19;
      v30 = __clz(__rbit64(v25)) | (v19 << 6);
      goto LABEL_20;
    }
    v31 = v19 + 1;
    if (v19 + 1 >= v54)
      return v61;
    v32 = *(_QWORD *)(v53 + 8 * v31);
    if (!v32)
    {
      v31 = v19 + 2;
      if (v19 + 2 >= v54)
        return v61;
      v32 = *(_QWORD *)(v53 + 8 * v31);
      if (!v32)
      {
        v31 = v19 + 3;
        if (v19 + 3 >= v54)
          return v61;
        v32 = *(_QWORD *)(v53 + 8 * v31);
        if (!v32)
        {
          v31 = v19 + 4;
          if (v19 + 4 >= v54)
            return v61;
          v32 = *(_QWORD *)(v53 + 8 * v31);
          if (!v32)
            break;
        }
      }
    }
LABEL_19:
    v62 = (v32 - 1) & v32;
    v63 = v31;
    v30 = __clz(__rbit64(v32)) + (v31 << 6);
LABEL_20:
    v33 = *(_QWORD *)(v60 + 56);
    v34 = *(_QWORD *)(v60 + 48) + 8 * v30;
    v35 = *(_DWORD *)v34;
    LODWORD(v34) = *(unsigned __int8 *)(v34 + 4);
    v64 = v35;
    v65 = v34;
    v36 = *(_QWORD *)(v58 + 72) * v30;
    sub_1B1792810(v33 + v36, (uint64_t)v17, (uint64_t (*)(_QWORD))type metadata accessor for GraphScriptingConfig.ScriptInfo);
    sub_1B1792810((uint64_t)v17, (uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for GraphScriptingConfig.ScriptInfo);
    swift_bridgeObjectRetain();
    *((_QWORD *)v13 + 2) = sub_1B1B80518(MEMORY[0x1E0DEE9D8]);
    v37 = v57;
    *v57 = 0;
    v37[1] = 0;
    *((_WORD *)v13 + 20) = 1;
    v38 = v59;
    v39 = (uint64_t)&v13[v59[10]];
    v40 = sub_1B222826C();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 56))(v39, 1, 1, v40);
    *(_QWORD *)&v13[v38[11]] = 0;
    v41 = &v13[v38[12]];
    *(_QWORD *)v41 = 0;
    v41[8] = 1;
    v42 = v9[1];
    *(_QWORD *)v13 = *v9;
    *((_QWORD *)v13 + 1) = v42;
    v43 = (uint64_t)v9 + v38[10];
    swift_bridgeObjectRetain();
    sub_1B1FF3518(v43, v39);
    swift_bridgeObjectRelease();
    *((_QWORD *)v13 + 3) = 0;
    swift_bridgeObjectRelease();
    *((_QWORD *)v13 + 4) = 0;
    v44 = v9[3];
    v66 = v36;
    if (v44)
    {
      swift_bridgeObjectRetain();
      v45 = swift_bridgeObjectRetain();
      v46 = v67;
      v47 = sub_1B1FEC8B4(v45, a2);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      *((_QWORD *)v13 + 3) = v47;
      swift_bridgeObjectRetain();
      v48 = swift_bridgeObjectRetain();
      sub_1B1FF04F0(v48, (uint64_t)v13, a2);
      v3 = v46;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v9[4])
        goto LABEL_4;
    }
    else
    {
      v3 = v67;
      if (v9[4])
      {
LABEL_4:
        swift_bridgeObjectRetain();
        v26 = swift_bridgeObjectRetain();
        v27 = sub_1B1FEC8B4(v26, a2);
        swift_bridgeObjectRelease_n();
        sub_1B1A04628((uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for GraphScriptingConfig.ScriptInfo);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        *((_QWORD *)v13 + 4) = v27;
        goto LABEL_5;
      }
    }
    sub_1B1A04628((uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for GraphScriptingConfig.ScriptInfo);
    swift_bridgeObjectRelease();
LABEL_5:
    v17 = v55;
    sub_1B1A04628((uint64_t)v55, (uint64_t (*)(_QWORD))type metadata accessor for GraphScriptingConfig.ScriptInfo);
    *(_QWORD *)(v56 + ((v30 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v30;
    v28 = v61;
    v29 = *(_QWORD *)(v61 + 48) + 8 * v30;
    *(_DWORD *)v29 = v64;
    *(_BYTE *)(v29 + 4) = v65;
    sub_1B1A025EC((uint64_t)v13, *(_QWORD *)(v28 + 56) + v66, (uint64_t (*)(_QWORD))type metadata accessor for GraphScriptingConfig.ScriptInfo);
    ++*(_QWORD *)(v28 + 16);
    v25 = v62;
    v19 = v63;
  }
  while (v52 != v19)
  {
    v32 = *(_QWORD *)(v51 + 8 * v19++);
    if (v32)
    {
      v67 = v3;
      v31 = v19 + 4;
      goto LABEL_19;
    }
  }
  return v61;
}

uint64_t sub_1B1FF2308(uint64_t a1, __int16 a2, uint64_t a3, _QWORD *a4, uint64_t *a5)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *i;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;

  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(v5 + 16);
  if (!v6)
    return 0;
  for (i = (_QWORD *)(v5 + 56); (ValueMetadata *)*(i - 3) != &type metadata for GraphScriptingConfig; i += 5)
  {
    if (!--v6)
      return 0;
  }
  v11 = *(_QWORD *)(a1 + 128) + *i + a2 * a3;
  v17 = sub_1B1B7EBDC(MEMORY[0x1E0DEE9D8]);
  v12 = swift_bridgeObjectRetain();
  sub_1B1FDE994(v12, a4, a5, &v17);
  swift_bridgeObjectRelease();
  v13 = v17;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v11 + 8) = v13;
  v14 = *a5;
  v15 = *(_QWORD *)(v11 + 16);
  swift_bridgeObjectRetain();
  v16 = sub_1B1FF1E84(v15, v14);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v11 + 16) = v16;
  return 1;
}

uint64_t sub_1B1FF2430(uint64_t a1, __int16 a2, uint64_t a3, uint64_t a4, float32x4_t *a5)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *i;

  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(v5 + 16);
  if (!v6)
    return 0;
  for (i = (_QWORD *)(v5 + 56); (ValueMetadata *)*(i - 3) != &type metadata for Children; i += 5)
  {
    if (!--v6)
      return 0;
  }
  sub_1B1E86C78((uint64_t *)(*(_QWORD *)(a1 + 128) + *i + a2 * a3), a4, a5);
  return 1;
}

uint64_t sub_1B1FF24A0(uint64_t a1, uint64_t a2, uint64_t a3, float32x4_t *a4)
{
  uint64_t v4;

  if (a1 != 0xFFFFFFFFLL
    && a1 << 32 >= (uint64_t)0xFFFFFFFF00000001
    && (int)a1 < *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8)
    && ((v4 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries), HIDWORD(a1) == -1)
     || *(_DWORD *)(v4 + 12 * (int)a1 + 8) == HIDWORD(a1)))
  {
    return sub_1B1FF2430(*(_QWORD *)(*(_QWORD *)(a2 + 136) + 8 * *(int *)(v4 + 12 * (int)a1) + 32), *(_WORD *)(v4 + 12 * (int)a1 + 4), 8, a3, a4) & 1;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_1B1FF2544(uint64_t a1, __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD *i;

  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(_QWORD *)(v8 + 16);
  if (!v9)
    return 0;
  for (i = (_QWORD *)(v8 + 56); (ValueMetadata *)*(i - 3) != &type metadata for TextureGPURuntime; i += 5)
  {
    if (!--v9)
      return 0;
  }
  sub_1B210C200((_QWORD *)(*(_QWORD *)(a1 + 128) + *i + a2 * a3), a4, a5, a6, a7, a8);
  return 1;
}

uint64_t sub_1B1FF25C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;

  if (a1 != 0xFFFFFFFFLL
    && a1 << 32 >= (uint64_t)0xFFFFFFFF00000001
    && (int)a1 < *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8)
    && ((v7 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries), HIDWORD(a1) == -1)
     || *(_DWORD *)(v7 + 12 * (int)a1 + 8) == HIDWORD(a1)))
  {
    return sub_1B1FF2544(*(_QWORD *)(*(_QWORD *)(a2 + 136) + 8 * *(int *)(v7 + 12 * (int)a1) + 32), *(_WORD *)(v7 + 12 * (int)a1 + 4), 8, a3, a4, a5, a6, a7) & 1;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_1B1FF2670(uint64_t a1, __int16 a2, uint64_t a3, _QWORD *a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD *i;

  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(_QWORD *)(v8 + 16);
  if (!v9)
    return 0;
  for (i = (_QWORD *)(v8 + 56); (ValueMetadata *)*(i - 3) != &type metadata for TextureGPURuntime; i += 5)
  {
    if (!--v9)
      return 0;
  }
  sub_1B210C9D4((uint64_t *)(*(_QWORD *)(a1 + 128) + *i + a2 * a3), a4, a5, a6, a7 & 1, a8);
  return 1;
}

uint64_t sub_1B1FF26F0(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7)
{
  uint64_t v7;

  if (a1 != 0xFFFFFFFFLL
    && a1 << 32 >= (uint64_t)0xFFFFFFFF00000001
    && (int)a1 < *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8)
    && ((v7 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries), HIDWORD(a1) == -1)
     || *(_DWORD *)(v7 + 12 * (int)a1 + 8) == HIDWORD(a1)))
  {
    return sub_1B1FF2670(*(_QWORD *)(*(_QWORD *)(a2 + 136) + 8 * *(int *)(v7 + 12 * (int)a1) + 32), *(_WORD *)(v7 + 12 * (int)a1 + 4), 8, a3, a4, a5, a6 & 1, a7) & 1;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_1B1FF27A4(uint64_t a1, __int16 a2, uint64_t a3, _QWORD *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *i;

  v6 = *(_QWORD *)(a1 + 48);
  v7 = *(_QWORD *)(v6 + 16);
  if (!v7)
    return 0;
  for (i = (_QWORD *)(v6 + 56); (ValueMetadata *)*(i - 3) != &type metadata for TextureGPURuntime; i += 5)
  {
    if (!--v7)
      return 0;
  }
  sub_1B210CC58((uint64_t *)(*(_QWORD *)(a1 + 128) + *i + a2 * a3), a4, a5, a6);
  return 1;
}

uint64_t sub_1B1FF2818(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  if (a1 != 0xFFFFFFFFLL
    && a1 << 32 >= (uint64_t)0xFFFFFFFF00000001
    && (int)a1 < *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8)
    && ((v5 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries), HIDWORD(a1) == -1)
     || *(_DWORD *)(v5 + 12 * (int)a1 + 8) == HIDWORD(a1)))
  {
    return sub_1B1FF27A4(*(_QWORD *)(*(_QWORD *)(a2 + 136) + 8 * *(int *)(v5 + 12 * (int)a1) + 32), *(_WORD *)(v5 + 12 * (int)a1 + 4), 8, a3, a4, a5) & 1;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_1B1FF28C0(uint64_t a1, __int16 a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *i;
  _QWORD *v7;
  uint64_t v8;

  v3 = *(_QWORD *)(a1 + 48);
  v4 = *(_QWORD *)(v3 + 16);
  if (!v4)
    return 0;
  for (i = (_QWORD *)(v3 + 56); (ValueMetadata *)*(i - 3) != &type metadata for GraphDebuggingComponent; i += 5)
  {
    if (!--v4)
      return 0;
  }
  v7 = (_QWORD *)(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
  swift_bridgeObjectRelease();
  v8 = MEMORY[0x1E0DEE9E0];
  *v7 = MEMORY[0x1E0DEE9E0];
  swift_bridgeObjectRelease();
  v7[1] = v8;
  return 1;
}

uint64_t sub_1B1FF2958(uint64_t a1, __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, unsigned int a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v11;
  _QWORD *i;

  v10 = *(_QWORD *)(a1 + 48);
  v11 = *(_QWORD *)(v10 + 16);
  if (!v11)
    return 0;
  for (i = (_QWORD *)(v10 + 56); (ValueMetadata *)*(i - 3) != &type metadata for GraphDebuggingComponent; i += 5)
  {
    if (!--v11)
      return 0;
  }
  sub_1B1EB7DE8((_QWORD *)(*(_QWORD *)(a1 + 128) + *i + a2 * a3), a4, a5, a6, a7, a8, a9, a10);
  return 1;
}

uint64_t sub_1B1FF29E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, unsigned int a8, uint64_t a9)
{
  uint64_t v9;

  if (a1 != 0xFFFFFFFFLL
    && a1 << 32 >= (uint64_t)0xFFFFFFFF00000001
    && (int)a1 < *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8)
    && ((v9 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries), HIDWORD(a1) == -1)
     || *(_DWORD *)(v9 + 12 * (int)a1 + 8) == HIDWORD(a1)))
  {
    return sub_1B1FF2958(*(_QWORD *)(*(_QWORD *)(a2 + 136) + 8 * *(int *)(v9 + 12 * (int)a1) + 32), *(_WORD *)(v9 + 12 * (int)a1 + 4), 16, a3, a4, a5, a6, a7, a8, a9) & 1;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_1B1FF2AA8(uint64_t a1, __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, unsigned int a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v11;
  _QWORD *i;

  v10 = *(_QWORD *)(a1 + 48);
  v11 = *(_QWORD *)(v10 + 16);
  if (!v11)
    return 0;
  for (i = (_QWORD *)(v10 + 56); (ValueMetadata *)*(i - 3) != &type metadata for GraphDebuggingComponent; i += 5)
  {
    if (!--v11)
      return 0;
  }
  sub_1B1EB857C(*(_QWORD *)(a1 + 128) + *i + a2 * a3, a4, a5, a6, a7, a8, a9, a10);
  return 1;
}

uint64_t sub_1B1FF2B40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, unsigned int a8, uint64_t a9)
{
  uint64_t v9;

  if (a1 != 0xFFFFFFFFLL
    && a1 << 32 >= (uint64_t)0xFFFFFFFF00000001
    && (int)a1 < *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8)
    && ((v9 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries), HIDWORD(a1) == -1)
     || *(_DWORD *)(v9 + 12 * (int)a1 + 8) == HIDWORD(a1)))
  {
    return sub_1B1FF2AA8(*(_QWORD *)(*(_QWORD *)(a2 + 136) + 8 * *(int *)(v9 + 12 * (int)a1) + 32), *(_WORD *)(v9 + 12 * (int)a1 + 4), 16, a3, a4, a5, a6, a7, a8, a9) & 1;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_1B1FF2C0C(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1B1FF2C2C(a1, a2, a3, a4, a5, a6, a7, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1EB8E78) & 1;
}

uint64_t sub_1B1FF2C2C(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void (*a8)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  unint64_t v9;
  char v10;
  uint64_t v11;

  v9 = HIDWORD(a1);
  if (a1 == 0xFFFFFFFF)
    return 0;
  v10 = 0;
  if ((uint64_t)(a1 << 32) < (uint64_t)0xFFFFFFFF00000001)
    return 0;
  if ((int)a1 < *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8))
  {
    v11 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
    if ((_DWORD)v9 == -1 || *(_DWORD *)(v11 + 12 * (int)a1 + 8) == (_DWORD)v9)
      v10 = sub_1B1FF2D00(*(_QWORD *)(*(_QWORD *)(a2 + 136) + 8 * *(int *)(v11 + 12 * (int)a1) + 32), *(_WORD *)(v11 + 12 * (int)a1 + 4), 16, a3, a4, a5, a6, a7, a8);
    else
      v10 = 0;
  }
  return v10 & 1;
}

uint64_t sub_1B1FF2D00(uint64_t a1, __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void (*a9)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v9;
  uint64_t v10;
  _QWORD *i;

  v9 = *(_QWORD *)(a1 + 48);
  v10 = *(_QWORD *)(v9 + 16);
  if (!v10)
    return 0;
  for (i = (_QWORD *)(v9 + 56); (ValueMetadata *)*(i - 3) != &type metadata for GraphDebuggingComponent; i += 5)
  {
    if (!--v10)
      return 0;
  }
  a9(*(_QWORD *)(a1 + 128) + *i + a2 * a3, a4, a5, a6, a7, a8);
  return 1;
}

uint64_t sub_1B1FF2D80(uint64_t a1, __int16 a2, uint64_t a3, _QWORD *a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD *i;

  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(_QWORD *)(v8 + 16);
  if (!v9)
    return 0;
  for (i = (_QWORD *)(v8 + 56); (ValueMetadata *)*(i - 3) != &type metadata for TextureCPURuntime; i += 5)
  {
    if (!--v9)
      return 0;
  }
  sub_1B210D3D4(*(_QWORD *)(a1 + 128) + *i + a2 * a3, a4, a5, a6, a7 & 1, a8);
  return 1;
}

uint64_t sub_1B1FF2E00(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7)
{
  uint64_t v7;

  if (a1 != 0xFFFFFFFFLL
    && a1 << 32 >= (uint64_t)0xFFFFFFFF00000001
    && (int)a1 < *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8)
    && ((v7 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries), HIDWORD(a1) == -1)
     || *(_DWORD *)(v7 + 12 * (int)a1 + 8) == HIDWORD(a1)))
  {
    return sub_1B1FF2D80(*(_QWORD *)(*(_QWORD *)(a2 + 136) + 8 * *(int *)(v7 + 12 * (int)a1) + 32), *(_WORD *)(v7 + 12 * (int)a1 + 4), 120, a3, a4, a5, a6 & 1, a7) & 1;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_1B1FF2EB4(uint64_t a1, __int16 a2, uint64_t a3, _QWORD *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *i;

  v6 = *(_QWORD *)(a1 + 48);
  v7 = *(_QWORD *)(v6 + 16);
  if (!v7)
    return 0;
  for (i = (_QWORD *)(v6 + 56); (ValueMetadata *)*(i - 3) != &type metadata for TextureCPURuntime; i += 5)
  {
    if (!--v7)
      return 0;
  }
  sub_1B210D6D0(*(_QWORD *)(a1 + 128) + *i + a2 * a3, a4, a5, a6);
  return 1;
}

uint64_t sub_1B1FF2F28(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  if (a1 != 0xFFFFFFFFLL
    && a1 << 32 >= (uint64_t)0xFFFFFFFF00000001
    && (int)a1 < *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8)
    && ((v5 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries), HIDWORD(a1) == -1)
     || *(_DWORD *)(v5 + 12 * (int)a1 + 8) == HIDWORD(a1)))
  {
    return sub_1B1FF2EB4(*(_QWORD *)(*(_QWORD *)(a2 + 136) + 8 * *(int *)(v5 + 12 * (int)a1) + 32), *(_WORD *)(v5 + 12 * (int)a1 + 4), 120, a3, a4, a5) & 1;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_1B1FF2FD0(uint64_t a1, __int16 a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *i;
  uint64_t result;
  uint64_t v7;

  v3 = *(_QWORD *)(a1 + 48);
  v4 = *(_QWORD *)(v3 + 16);
  if (!v4)
    return 0;
  for (i = (_QWORD *)(v3 + 56); (ValueMetadata *)*(i - 3) != &type metadata for TextureCPURuntime; i += 5)
  {
    if (!--v4)
      return 0;
  }
  v7 = *(_QWORD *)(a1 + 128) + *i + a2 * a3;
  result = 1;
  *(_BYTE *)(v7 + 24) = 1;
  return result;
}

void sub_1B1FF3028(uint64_t a1@<X0>, __int16 a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  _QWORD *v8;
  char v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  void *v13;
  void *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;

  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(v5 + 16);
  v7 = 0uLL;
  if (v6)
  {
    v8 = (_QWORD *)(v5 + 56);
    while ((ValueMetadata *)*(v8 - 3) != &type metadata for NodeTransformController)
    {
      v8 += 5;
      if (!--v6)
        goto LABEL_5;
    }
    v13 = (void *)MEMORY[0x1B5E240CC](*(_QWORD *)(a1 + 128) + *v8 + a2 * a3 + 32, (__n128)0);
    if (v13)
    {
      v14 = v13;
      objc_msgSend(v13, sel_worldTransform);
      v21 = v16;
      v22 = v15;
      v19 = v18;
      v20 = v17;

      v12 = v19;
      v11 = v20;
      v10 = v21;
      v7 = v22;
      v9 = 0;
    }
    else
    {
      v9 = 0;
      v12 = xmmword_1B2244E20;
      v11 = xmmword_1B2244D90;
      v10 = xmmword_1B2244DD0;
      v7 = xmmword_1B2244DB0;
    }
  }
  else
  {
LABEL_5:
    v9 = 1;
    v10 = 0uLL;
    v11 = 0uLL;
    v12 = 0uLL;
  }
  *(_OWORD *)a4 = v7;
  *(_OWORD *)(a4 + 16) = v10;
  *(_OWORD *)(a4 + 32) = v11;
  *(_OWORD *)(a4 + 48) = v12;
  *(_BYTE *)(a4 + 64) = v9;
}

uint64_t sub_1B1FF3120(uint64_t a1, __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *i;
  __n128 *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  id v16;
  char v17;
  uint64_t v18;
  __n128 v20;
  __n128 v21;
  __n128 v22;
  __n128 v23[5];
  __n128 v24;
  id v25[2];
  __n128 v26;
  __n128 v27;

  v7 = *(_QWORD *)(a1 + 48);
  v8 = *(_QWORD *)(v7 + 16);
  if (v8)
  {
    for (i = (_QWORD *)(v7 + 56); (ValueMetadata *)*(i - 3) != &type metadata for TextureFileAsset; i += 5)
    {
      if (!--v8)
        return v8 & 1;
    }
    v12 = (__n128 *)(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
    v13 = v12->n128_u64[1];
    v14 = v12[1].n128_u64[0];
    v15 = v12[1].n128_u64[1];
    v20.n128_u64[0] = v12->n128_u64[0];
    v20.n128_u64[1] = v13;
    v21.n128_u64[0] = v14;
    v21.n128_u64[1] = v15;
    v22 = v12[2];
    v16 = (id)v22.n128_u64[0];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v17 = sub_1B1E6AD1C((uint64_t *)&v20, a6);
    if (v6)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

    }
    else if ((v17 & 1) != 0)
    {
      v18 = sub_1B1DA61CC(a5) << 16 >> 48;
      v23[0] = v20;
      v23[1] = v21;
      v23[2] = v22;
      v23[3] = v20;
      v23[4] = v21;
      v24 = v22;
      v26 = v21;
      v27 = v20;
      sub_1B1AE72F4((uint64_t)&v24, (uint64_t)v25);
      swift_retain();
      sub_1B1FDABC8(v18, v23);
      swift_release();
      sub_1B1BA80C0((uint64_t)&v27);
      sub_1B1BA80C0((uint64_t)&v26);
      sub_1B1BB52CC(v25);
      LOBYTE(v8) = 1;
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      LOBYTE(v8) = 0;
    }
  }
  return v8 & 1;
}

uint64_t sub_1B1FF32D4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(v1 + 32);
  v5 = *(_QWORD *)(v3 - 8);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v3);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(a1, v4, v3);
}

uint64_t sub_1B1FF3334()
{
  return swift_deallocObject();
}

uint64_t sub_1B1FF3344(uint64_t a1, uint64_t a2)
{
  return sub_1B1D136D4(a1, a2, type metadata accessor for GraphScript);
}

void sub_1B1FF3350(uint64_t a1)
{
  sub_1B1792854(a1, &qword_1EEF61D08, (void (*)(uint64_t))sub_1B1C39138);
}

unint64_t sub_1B1FF3364()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EEF5DC00;
  if (!qword_1EEF5DC00)
  {
    v1 = type metadata accessor for PBRParameters();
    result = MEMORY[0x1B5E23E74](&unk_1B22C1674, v1);
    atomic_store(result, (unint64_t *)&qword_1EEF5DC00);
  }
  return result;
}

uint64_t sub_1B1FF33AC(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t), uint64_t a5)
{
  uint64_t v7;

  sub_1B1A1B6FC(0, a3, a4, a5, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptRuntime);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 24))(a2, a1, v7);
  return a2;
}

void sub_1B1FF3408(uint64_t a1)
{
  sub_1B1792854(a1, &qword_1EEF60FC8, (void (*)(uint64_t))type metadata accessor for SkeletonData);
}

double sub_1B1FF341C(uint64_t *a1)
{
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_1B1F05960(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_BYTE *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48)).n128_u64[0];
  return result;
}

uint64_t sub_1B1FF342C(uint64_t a1, uint64_t a2)
{
  assignWithCopy for NodeVisibilityController(a2, a1);
  return a2;
}

uint64_t sub_1B1FF3468(uint64_t a1, uint64_t a2)
{
  assignWithCopy for NodeVisibilityController(a2, a1);
  return a2;
}

uint64_t sub_1B1FF34A4(uint64_t a1, uint64_t a2)
{
  return sub_1B1D136D4(a1, a2, type metadata accessor for TriggerScript);
}

void sub_1B1FF34B0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED4BA8C0)
  {
    type metadata accessor for GraphScriptingConfig.ScriptInfo();
    sub_1B1B9DE34();
    v0 = sub_1B22296E8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED4BA8C0);
  }
}

uint64_t sub_1B1FF3518(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1B1792854(0, (unint64_t *)&qword_1ED4B7B50, (void (*)(uint64_t))MEMORY[0x1E0CB0998]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_1B1FF356C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int v5;

  LOBYTE(v5) = *(_BYTE *)(v3 + 96);
  return sub_1B1A116FC(a1, a2, a3, *(unsigned int *)(v3 + 16) | ((unint64_t)*(unsigned __int8 *)(v3 + 20) << 32), *(_QWORD **)(v3 + 24), *(_QWORD *)(v3 + 32), *(_QWORD *)(v3 + 40), *(_QWORD *)(v3 + 48), *(_QWORD *)(v3 + 56), *(_QWORD *)(v3 + 64), *(uint64_t **)(v3 + 72), *(_QWORD *)(v3 + 80), *(_QWORD **)(v3 + 88), v5, *(_DWORD *)(v3 + 100), HIWORD(*(_DWORD *)(v3 + 100)), *(_BYTE *)(v3 + 104));
}

uint64_t sub_1B1FF35D8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  if (a1 == 0xFFFFFFFFLL
    || a1 << 32 < (uint64_t)0xFFFFFFFF00000001
    || (int)a1 >= *(_QWORD *)(v1 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8)
    || (v2 = *(_QWORD *)(v1 + OBJC_IVAR____TtC3VFX13EntityManager__entries), HIDWORD(a1) != -1)
    && *(_DWORD *)(v2 + 12 * (int)a1 + 8) != HIDWORD(a1)
    || (result = sub_1B1D1EAC8(*(_QWORD *)(*(_QWORD *)(v1 + 136) + 8 * *(int *)(v2 + 12 * (int)a1) + 32), *(_DWORD *)(v2 + 12 * (int)a1), *(_WORD *)(v2 + 12 * (int)a1 + 4), 16, v1), !v4))
  {
    sub_1B2229A0C();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    return 0x5B64656D616E6E55;
  }
  return result;
}

uint64_t sub_1B1FF36E8(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  os_unfair_lock_s *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  BOOL v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t result;
  char v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48[8];
  _OWORD v49[2];
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  _OWORD v59[2];
  uint64_t v60;
  _BYTE v61[40];
  uint64_t v62;
  int v63;
  char v64;
  unint64_t v65;
  char v66;
  uint64_t v67;

  if (qword_1ED4B8648 != -1)
    swift_once();
  v62 = xmmword_1ED4B8618;
  v63 = DWORD2(xmmword_1ED4B8618);
  v64 = BYTE12(xmmword_1ED4B8618);
  v65 = qword_1ED4B8628 & 0xFFFFFFFFFFFFFFFELL | a4 & 1;
  v66 = byte_1ED4B8630;
  v67 = qword_1ED4B8638;
  swift_retain();
  sub_1B1E8FCE4(v4, (uint64_t)&v62, a3 & 0xFFFFFFFFFFLL, v48);
  sub_1B19F66A0((uint64_t)v48, (uint64_t)v49, (unint64_t *)&qword_1ED4B7DE0);
  if (!*(_QWORD *)&v49[0])
  {
    swift_release();
    return 0;
  }
  v56 = v49[0];
  v57 = v49[1];
  v58 = v50;
  if (v55 <= 0)
  {
    swift_release();
    sub_1B19ED748(v48);
    return 0;
  }
  v41 = v52;
  if (!v52)
  {
    swift_retain();
    swift_retain();
    swift_retain();
    v11 = 0;
LABEL_38:
    swift_release();
    sub_1B19ED748(v48);
    sub_1B19ED748(v48);
    return v11;
  }
  v40 = v51;
  v46 = v54[4];
  v47 = v54;
  v9 = *(_BYTE *)(v53 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
  v38 = v54 + 8;
  v39 = (uint64_t)(v54 + 6);
  swift_retain();
  swift_retain();
  swift_retain();
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v37 = v9;
  while (1)
  {
    v45 = v10;
    v13 = (unsigned int *)(v40 + 48 * v10);
    v14 = *v13;
    v15 = (uint64_t *)*((_QWORD *)v13 + 2);
    v42 = v13[1];
    v43 = *((_QWORD *)v13 + 3);
    v16 = *((_QWORD *)v13 + 4);
    v17 = *((_QWORD *)v13 + 5);
    v44 = v12;
    if ((v9 & 1) != 0)
    {
      v18 = *(os_unfair_lock_s **)(v17 + 376);
      swift_retain();
      os_unfair_lock_lock(v18);
      os_unfair_lock_lock(*(os_unfair_lock_t *)(v17 + 344));
    }
    else
    {
      swift_retain();
    }
    ecs_stack_allocator_push_snapshot(v46);
    sub_1B19F66A0(v39, (uint64_t)v61, &qword_1ED4B7FB0);
    v19 = v47[4];
    v20 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v17 + 40) + 16) + 32) + 16) + 1;
    swift_retain();
    v47[6] = ecs_stack_allocator_allocate(v19, 48 * v20, 8);
    v47[7] = v20;
    v38[1] = 0;
    v38[2] = 0;
    *v38 = 0;
    swift_release();
    v21 = sub_1B1A12038((uint64_t)&type metadata for Name, (uint64_t)&off_1E63B9AE8, v15, v43, v16, (uint64_t)v47);
    if (v15)
    {
      v9 = v37;
      if (v16)
      {
        v22 = (_QWORD *)(v21 + 8);
        while (1)
        {
          v24 = *v15++;
          v23 = v24;
          v25 = *(v22 - 1) == a1 && *v22 == a2;
          if (v25 || (sub_1B2229D24() & 1) != 0)
          {
            v26 = *(_BYTE *)(v17 + 184);
            v27 = swift_retain();
            if ((v26 & 1) != 0)
              goto LABEL_40;
            v28 = *(unsigned int *)(*(_QWORD *)(v17 + 168) + 4 * v23);
            v29 = *(unsigned int *)(*(_QWORD *)(v27 + OBJC_IVAR____TtC3VFX13EntityManager__entries) + 12 * (int)v28 + 8);
            swift_release();
            v11 = v28 | (v29 << 32);
          }
          v22 += 2;
          if (!--v16)
            goto LABEL_23;
        }
      }
      goto LABEL_23;
    }
    v9 = v37;
    if ((_DWORD)v14 != (_DWORD)v42)
      break;
LABEL_23:
    v59[0] = v56;
    v59[1] = v57;
    v60 = v58;
    v12 = v44;
    sub_1B1F05D48(v47, (unsigned __int16 **)v59, (uint64_t)v61);
    sub_1B1F03804((char *)v17);
    ecs_stack_allocator_pop_snapshot(v46);
    if ((v9 & 1) != 0)
    {
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v17 + 344));
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v17 + 376));
    }
    swift_release();
    v10 = v45 + 1;
    if (v45 + 1 == v41)
      goto LABEL_38;
  }
  v30 = (_QWORD *)(v21 + 16 * v14 + 8);
  while (1)
  {
    v31 = *(v30 - 1) == a1 && *v30 == a2;
    if (!v31 && (sub_1B2229D24() & 1) == 0)
      goto LABEL_26;
    v32 = *(_BYTE *)(v17 + 184);
    v33 = swift_retain();
    if ((v32 & 1) != 0)
      break;
    v34 = *(unsigned int *)(*(_QWORD *)(v17 + 168) + 4 * v14);
    v35 = *(unsigned int *)(*(_QWORD *)(v33 + OBJC_IVAR____TtC3VFX13EntityManager__entries) + 12 * (int)v34 + 8);
    swift_release();
    v11 = v34 | (v35 << 32);
LABEL_26:
    ++v14;
    v30 += 2;
    if (v42 == v14)
      goto LABEL_23;
  }
LABEL_40:
  result = sub_1B2229688();
  __break(1u);
  return result;
}

uint64_t sub_1B1FF3BD0@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;

  result = sub_1B1FF3D5C(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }
  return result;
}

uint64_t sub_1B1FF3BF8(_QWORD *a1)
{
  _BYTE v2[24];
  uint64_t v3;

  sub_1B19FA070(a1, a1[3]);
  sub_1B222A168();
  sub_1B19FC264((uint64_t)v2, v3);
  sub_1B2229DB4();
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v2);
}

void sub_1B1FF3C8C(_QWORD *a1@<X8>)
{
  *a1 = 0x3E656D616E6F6E3CLL;
  a1[1] = 0xE800000000000000;
}

double sub_1B1FF3CA8()
{
  double result;
  _OWORD v1[2];
  uint64_t v2;
  uint64_t v3;
  int v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;

  if (qword_1ED4B7DB8 != -1)
    swift_once();
  v3 = qword_1ED4D09F8;
  v4 = 0;
  v5 = 2;
  v6 = 0;
  v7 = 2;
  v8 = 0;
  swift_retain();
  sub_1B1E388B0(1, (uint64_t)v1);
  swift_release();
  result = *(double *)v1;
  xmmword_1ED4B8618 = v1[0];
  *(_OWORD *)&qword_1ED4B8628 = v1[1];
  qword_1ED4B8638 = v2;
  return result;
}

ValueMetadata *type metadata accessor for Name()
{
  return &type metadata for Name;
}

uint64_t sub_1B1FF3D5C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v14[4];

  sub_1B1FF3F14();
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v6);
  v8 = (char *)&v14[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_1B19FA070(a1, v9);
  if (sub_1B2067BAC(2000, v9, v10))
  {
    v11 = (uint64_t)sub_1B19FA070(a1, a1[3]);
    sub_1B222A138();
    if (!v1)
    {
      sub_1B19FA070(v14, v14[3]);
      v11 = sub_1B2229D30();
      _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v14);
    }
  }
  else
  {
    v11 = (uint64_t)sub_1B19FA070(a1, a1[3]);
    sub_1B1E88F28();
    sub_1B222A150();
    if (!v1)
    {
      v11 = sub_1B22297CC();
      (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    }
  }
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  return v11;
}

void sub_1B1FF3F14()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED4BAAF0)
  {
    sub_1B1E88F28();
    v0 = sub_1B2229898();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED4BAAF0);
  }
}

uint64_t sub_1B1FF3F6C(unint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v40;
  uint64_t v41;
  char v42;
  char v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  __int128 v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char v88;
  char v89;
  uint64_t v90;
  uint64_t v91;
  char v92;
  char v93;
  uint64_t v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char v100;
  char v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  int v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  _OWORD v122[3];

  v9 = a1 & 0xF000000000000000;
  if ((a1 & 0xF000000000000000) != 0x8000000000000000)
    goto LABEL_7;
  if (a1 == 0x8000000000000050)
  {
    *(_QWORD *)&v118 = 0;
    *((_QWORD *)&v118 + 1) = 0xE000000000000000;
    sub_1B22295EC();
    v122[0] = v118;
    sub_1B1A06460();
    swift_bridgeObjectRetain();
    if ((sub_1B2229274() & 1) != 0)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v35 = sub_1B22287B8();
      v37 = v36;
      swift_bridgeObjectRelease();
      *(_QWORD *)&v122[0] = v35;
      *((_QWORD *)&v122[0] + 1) = v37;
      v38 = sub_1B2229274();
      swift_bridgeObjectRelease();
      if ((v38 & 1) == 0)
        sub_1B2228890();
    }
    goto LABEL_21;
  }
  if (a1 != 0x8000000000000010)
  {
LABEL_7:
    v11 = a3 & 1;
    v12 = swift_allocObject();
    *(_OWORD *)(v12 + 16) = xmmword_1B2286450;
    sub_1B1D76C18(v12 | 0x1000000000000000);
    v14 = v13;
    swift_release();
    if ((v14 & 1) != 0)
    {
      sub_1B1A02864(a2, (uint64_t)&v118);
      v15 = MEMORY[0x1E0DEB188];
      sub_1B19F8E54(0, &qword_1ED4BB080, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], MEMORY[0x1E0DEDD20]);
      swift_dynamicCast();
      v117 = DWORD1(v122[0]);
      *((_QWORD *)&v119 + 1) = v15;
      LODWORD(v118) = v122[0];
      v16 = sub_1B1FF3F6C(0x8000000000000050, &v118, v11, a4, a5);
      v18 = v17;
      _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v118);
      swift_bridgeObjectRelease();
      *(_QWORD *)&v122[0] = v16;
      *((_QWORD *)&v122[0] + 1) = v18;
      sub_1B2228890();
      *((_QWORD *)&v119 + 1) = v15;
      LODWORD(v118) = v117;
      goto LABEL_15;
    }
    v19 = swift_allocObject();
    *(_OWORD *)(v19 + 16) = xmmword_1B22847D0;
    sub_1B1D76C18(v19 | 0x1000000000000000);
    v21 = v20;
    swift_release();
    if ((v21 & 1) != 0)
    {
      sub_1B1A02864(a2, (uint64_t)&v118);
      v22 = MEMORY[0x1E0DEB188];
      sub_1B19F8E54(0, (unint64_t *)&qword_1ED4BB0A0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50]);
      swift_dynamicCast();
      v112 = v122[0];
      *((_QWORD *)&v119 + 1) = v22;
      LODWORD(v118) = v122[0];
      v23 = sub_1B1FF3F6C(0x8000000000000050, &v118, v11, a4, a5);
      v25 = v24;
      _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v118);
      swift_bridgeObjectRelease();
      *(_QWORD *)&v122[0] = v23;
      *((_QWORD *)&v122[0] + 1) = v25;
      sub_1B2228890();
      *((_QWORD *)&v119 + 1) = v22;
      LODWORD(v118) = DWORD1(v112);
      sub_1B1FF3F6C(0x8000000000000050, &v118, v11, a4, a5);
      _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v118);
      sub_1B2228890();
      swift_bridgeObjectRelease();
      sub_1B2228890();
      *((_QWORD *)&v119 + 1) = v22;
      LODWORD(v118) = DWORD2(v112);
      goto LABEL_15;
    }
    v26 = swift_allocObject();
    *(_OWORD *)(v26 + 16) = xmmword_1B22847C0;
    sub_1B1D76C18(v26 | 0x1000000000000000);
    v28 = v27;
    swift_release();
    if ((v28 & 1) != 0)
    {
      sub_1B1A02864(a2, (uint64_t)&v118);
      v29 = MEMORY[0x1E0DEB188];
      sub_1B19F8E54(0, (unint64_t *)&qword_1ED4BB0E0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDDA8]);
      swift_dynamicCast();
      v113 = v122[0];
      *((_QWORD *)&v119 + 1) = v29;
      LODWORD(v118) = v122[0];
      v30 = sub_1B1FF3F6C(0x8000000000000050, &v118, v11, a4, a5);
      v32 = v31;
      _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v118);
      swift_bridgeObjectRelease();
      *(_QWORD *)&v122[0] = v30;
      *((_QWORD *)&v122[0] + 1) = v32;
      sub_1B2228890();
      *((_QWORD *)&v119 + 1) = v29;
      LODWORD(v118) = DWORD1(v113);
      sub_1B1FF3F6C(0x8000000000000050, &v118, v11, a4, a5);
      _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v118);
      sub_1B2228890();
      swift_bridgeObjectRelease();
      sub_1B2228890();
      *((_QWORD *)&v119 + 1) = v29;
      LODWORD(v118) = DWORD2(v113);
      sub_1B1FF3F6C(0x8000000000000050, &v118, v11, a4, a5);
      _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v118);
      sub_1B2228890();
      swift_bridgeObjectRelease();
      sub_1B2228890();
      *((_QWORD *)&v119 + 1) = v29;
      LODWORD(v118) = HIDWORD(v113);
      goto LABEL_15;
    }
    v40 = swift_allocObject();
    *(_QWORD *)(v40 + 16) = 2;
    v41 = swift_allocObject();
    *(_OWORD *)(v41 + 16) = xmmword_1B2286450;
    *(_QWORD *)(v40 + 24) = v41 | 0x1000000000000000;
    sub_1B1D76C18(v40 | 0x1000000000000000);
    v43 = v42;
    swift_release();
    if ((v43 & 1) != 0)
    {
      sub_1B1A02864(a2, (uint64_t)&v118);
      type metadata accessor for simd_float2x2(0);
      swift_dynamicCast();
      v44 = v122[0];
      v45 = swift_allocObject();
      *(_OWORD *)(v45 + 16) = xmmword_1B2286450;
      v46 = v45 | 0x1000000000000000;
      sub_1B19F8E54(0, &qword_1ED4BB080, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], MEMORY[0x1E0DEDD20]);
      v48 = v47;
      *((_QWORD *)&v119 + 1) = v47;
      *(_QWORD *)&v118 = v44;
      v49 = sub_1B1FF3F6C(v46, &v118, v11, a4, a5);
      v51 = v50;
      swift_release();
      _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v118);
      swift_bridgeObjectRelease();
      *(_QWORD *)&v122[0] = v49;
      *((_QWORD *)&v122[0] + 1) = v51;
      sub_1B2228890();
      v52 = swift_allocObject();
      *(_OWORD *)(v52 + 16) = xmmword_1B2286450;
      v53 = v52 | 0x1000000000000000;
      *((_QWORD *)&v119 + 1) = v48;
      *(_QWORD *)&v118 = *((_QWORD *)&v44 + 1);
    }
    else
    {
      v54 = swift_allocObject();
      *(_QWORD *)(v54 + 16) = 3;
      v55 = swift_allocObject();
      *(_OWORD *)(v55 + 16) = xmmword_1B22847D0;
      *(_QWORD *)(v54 + 24) = v55 | 0x1000000000000000;
      sub_1B1D76C18(v54 | 0x1000000000000000);
      v57 = v56;
      swift_release();
      if ((v57 & 1) != 0)
      {
        sub_1B1A02864(a2, (uint64_t)v122);
        type metadata accessor for simd_float3x3(0);
        swift_dynamicCast();
        v108 = v118;
        v110 = v119;
        v114 = v120;
        v58 = swift_allocObject();
        *(_OWORD *)(v58 + 16) = xmmword_1B22847D0;
        v59 = v58 | 0x1000000000000000;
        sub_1B19F8E54(0, (unint64_t *)&qword_1ED4BB0A0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50]);
        v61 = v60;
        *((_QWORD *)&v119 + 1) = v60;
        *(_QWORD *)&v118 = swift_allocObject();
        *(_OWORD *)(v118 + 16) = v108;
        v62 = sub_1B1FF3F6C(v59, &v118, v11, a4, a5);
        v64 = v63;
        swift_release();
        _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v118);
        swift_bridgeObjectRelease();
        *(_QWORD *)&v122[0] = v62;
        *((_QWORD *)&v122[0] + 1) = v64;
        sub_1B2228890();
        v65 = swift_allocObject();
        *(_OWORD *)(v65 + 16) = xmmword_1B22847D0;
        v66 = v65 | 0x1000000000000000;
        *((_QWORD *)&v119 + 1) = v61;
        *(_QWORD *)&v118 = swift_allocObject();
        *(_OWORD *)(v118 + 16) = v110;
        sub_1B1FF3F6C(v66, &v118, v11, a4, a5);
        swift_release();
        _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v118);
        sub_1B2228890();
        swift_bridgeObjectRelease();
        sub_1B2228890();
        v67 = swift_allocObject();
        v68 = xmmword_1B22847D0;
      }
      else
      {
        v69 = swift_allocObject();
        *(_QWORD *)(v69 + 16) = 4;
        v70 = swift_allocObject();
        *(_OWORD *)(v70 + 16) = xmmword_1B22847C0;
        *(_QWORD *)(v69 + 24) = v70 | 0x1000000000000000;
        sub_1B1D76C18(v69 | 0x1000000000000000);
        v72 = v71;
        swift_release();
        if ((v72 & 1) == 0)
        {
          if (a1 == 0x8000000000000028)
          {
            sub_1B1A02864(a2, (uint64_t)&v118);
            type metadata accessor for simd_quatf(0);
            swift_dynamicCast();
            v115 = v122[0];
            v84 = swift_allocObject();
            *(_OWORD *)(v84 + 16) = xmmword_1B22847C0;
            v85 = v84 | 0x1000000000000000;
            sub_1B19F8E54(0, (unint64_t *)&qword_1ED4BB0E0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDDA8]);
            *((_QWORD *)&v119 + 1) = v86;
            *(_QWORD *)&v118 = swift_allocObject();
            *(_OWORD *)(v118 + 16) = v115;
            v10 = sub_1B1FF3F6C(v85, &v118, v11, a4, a5);
            swift_release();
            _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v118);
            return v10;
          }
          v87 = swift_allocObject();
          *(_OWORD *)(v87 + 16) = xmmword_1B2292110;
          sub_1B1D76C18(v87 | 0x1000000000000000);
          v89 = v88;
          swift_release();
          if ((v89 & 1) != 0)
          {
            sub_1B1A02864(a2, (uint64_t)&v118);
            sub_1B19F8E54(0, (unint64_t *)&unk_1ED4BB0B0, (uint64_t (*)(void))sub_1B1AF0D08, MEMORY[0x1E0DEE0F8], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50]);
            swift_dynamicCast();
            v116 = v122[0];
            *(_QWORD *)&v118 = sub_1B2229A0C();
            *((_QWORD *)&v118 + 1) = v90;
            sub_1B2228890();
            LODWORD(v122[0]) = DWORD1(v116);
            sub_1B2229A0C();
            sub_1B2228890();
            swift_bridgeObjectRelease();
            sub_1B2228890();
            LODWORD(v122[0]) = DWORD2(v116);
            sub_1B2229A0C();
            sub_1B2228890();
            swift_bridgeObjectRelease();
            goto LABEL_18;
          }
          v91 = swift_allocObject();
          *(_QWORD *)(v91 + 16) = 0x8000000000000050;
          sub_1B1D76C18(v91 | 0x2000000000000000);
          v93 = v92;
          swift_release();
          if ((v93 & 1) == 0)
          {
            v99 = swift_allocObject();
            *(_QWORD *)(v99 + 16) = 0x8000000000000040;
            sub_1B1D76C18(v99 | 0x2000000000000000);
            v101 = v100;
            swift_release();
            if ((v101 & 1) == 0)
            {
              if (v9 == 0x8000000000000000 && (a1 == 0x8000000000000080 || a1 == 0x8000000000000070))
              {
                *(_QWORD *)&v118 = 0;
                *((_QWORD *)&v118 + 1) = 0xE000000000000000;
                sub_1B2229430();
                sub_1B2228890();
                sub_1B2228890();
                sub_1B2228890();
                sub_1B2228890();
                goto LABEL_21;
              }
              *(_QWORD *)&v118 = 0;
              *((_QWORD *)&v118 + 1) = 0xE000000000000000;
              sub_1B22295EC();
LABEL_18:
              *(_QWORD *)&v118 = sub_1B1D77750(v11, a1);
              *((_QWORD *)&v118 + 1) = v34;
              sub_1B2228890();
              sub_1B2228890();
              swift_bridgeObjectRelease();
LABEL_21:
              sub_1B2228890();
              return v118;
            }
            sub_1B1A02864(a2, (uint64_t)&v118);
            v102 = MEMORY[0x1E0DEDC60];
            sub_1B1C8AC7C(0, &qword_1ED4BA5C8);
            swift_dynamicCast();
            v103 = *((_QWORD *)&v122[0] + 1);
            *((_QWORD *)&v119 + 1) = v102;
            *(_QWORD *)&v118 = *(_QWORD *)&v122[0];
            v104 = sub_1B1FF3F6C(0x8000000000000040, &v118, v11, a4, a5);
            v106 = v105;
            _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v118);
            swift_bridgeObjectRelease();
            *(_QWORD *)&v122[0] = v104;
            *((_QWORD *)&v122[0] + 1) = v106;
            sub_1B2228890();
            *((_QWORD *)&v119 + 1) = v102;
            *(_QWORD *)&v118 = v103;
            v33 = 0x8000000000000040;
            goto LABEL_16;
          }
          sub_1B1A02864(a2, (uint64_t)&v118);
          v94 = MEMORY[0x1E0DEB188];
          sub_1B1C8AC7C(0, (unint64_t *)&qword_1ED4BA5A8);
          swift_dynamicCast();
          v95 = DWORD1(v122[0]);
          *((_QWORD *)&v119 + 1) = v94;
          LODWORD(v118) = v122[0];
          v96 = sub_1B1FF3F6C(0x8000000000000050, &v118, v11, a4, a5);
          v98 = v97;
          _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v118);
          swift_bridgeObjectRelease();
          *(_QWORD *)&v122[0] = v96;
          *((_QWORD *)&v122[0] + 1) = v98;
          sub_1B2228890();
          *((_QWORD *)&v119 + 1) = v94;
          LODWORD(v118) = v95;
LABEL_15:
          v33 = 0x8000000000000050;
LABEL_16:
          sub_1B1FF3F6C(v33, &v118, v11, a4, a5);
LABEL_17:
          _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v118);
          sub_1B2228890();
          swift_bridgeObjectRelease();
          goto LABEL_18;
        }
        sub_1B1A02864(a2, (uint64_t)v122);
        type metadata accessor for simd_float4x4(0);
        swift_dynamicCast();
        v107 = v118;
        v109 = v119;
        v111 = v120;
        v114 = v121;
        v73 = swift_allocObject();
        *(_OWORD *)(v73 + 16) = xmmword_1B22847C0;
        v74 = v73 | 0x1000000000000000;
        sub_1B19F8E54(0, (unint64_t *)&qword_1ED4BB0E0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDDA8]);
        v61 = v75;
        *((_QWORD *)&v119 + 1) = v75;
        *(_QWORD *)&v118 = swift_allocObject();
        *(_OWORD *)(v118 + 16) = v107;
        v76 = sub_1B1FF3F6C(v74, &v118, v11, a4, a5);
        v78 = v77;
        swift_release();
        _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v118);
        swift_bridgeObjectRelease();
        *(_QWORD *)&v122[0] = v76;
        *((_QWORD *)&v122[0] + 1) = v78;
        sub_1B2228890();
        v79 = swift_allocObject();
        *(_OWORD *)(v79 + 16) = xmmword_1B22847C0;
        v80 = v79 | 0x1000000000000000;
        *((_QWORD *)&v119 + 1) = v61;
        *(_QWORD *)&v118 = swift_allocObject();
        *(_OWORD *)(v118 + 16) = v109;
        sub_1B1FF3F6C(v80, &v118, v11, a4, a5);
        swift_release();
        _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v118);
        sub_1B2228890();
        swift_bridgeObjectRelease();
        sub_1B2228890();
        v81 = swift_allocObject();
        *(_OWORD *)(v81 + 16) = xmmword_1B22847C0;
        v82 = v81 | 0x1000000000000000;
        *((_QWORD *)&v119 + 1) = v61;
        *(_QWORD *)&v118 = swift_allocObject();
        *(_OWORD *)(v118 + 16) = v111;
        sub_1B1FF3F6C(v82, &v118, v11, a4, a5);
        swift_release();
        _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v118);
        sub_1B2228890();
        swift_bridgeObjectRelease();
        sub_1B2228890();
        v67 = swift_allocObject();
        v68 = xmmword_1B22847C0;
      }
      *(_OWORD *)(v67 + 16) = v68;
      v83 = v67 | 0x1000000000000000;
      *((_QWORD *)&v119 + 1) = v61;
      *(_QWORD *)&v118 = swift_allocObject();
      *(_OWORD *)(v118 + 16) = v114;
      v53 = v83;
    }
    sub_1B1FF3F6C(v53, &v118, v11, a4, a5);
    swift_release();
    goto LABEL_17;
  }
  sub_1B1A02864(a2, (uint64_t)&v118);
  swift_dynamicCast();
  if (LOBYTE(v122[0]))
    return 1702195828;
  else
    return 0x65736C6166;
}

uint64_t sub_1B1FF52F4()
{
  uint64_t v0;
  void (*v1)(uint64_t *__return_ptr, unint64_t);
  uint64_t v2;
  unint64_t v3;
  char v4;
  char v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  char v10;
  uint64_t *v11;
  _QWORD v13[6];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v1 = *(void (**)(uint64_t *__return_ptr, unint64_t))(*(_QWORD *)v0 + 152);
  ((void (*)(_QWORD *__return_ptr))v1)(v13);
  v2 = v13[0];
  v30 = v13[1];
  v31 = v13[0];
  sub_1B1B28C6C((uint64_t)&v30);
  v29 = v13[2];
  sub_1B1B28C6C((uint64_t)&v29);
  v28 = v13[3];
  sub_1B1B28C6C((uint64_t)&v28);
  v27 = v13[4];
  sub_1B1B28C6C((uint64_t)&v27);
  v26 = v13[5];
  sub_1B1B28C6C((uint64_t)&v26);
  if (!*(_QWORD *)(v2 + 16))
  {
    v11 = &v31;
LABEL_7:
    sub_1B1B28C6C((uint64_t)v11);
    goto LABEL_8;
  }
  v3 = *(_QWORD *)(v2 + 32);
  sub_1B19F8CD0(v3);
  sub_1B1B28C6C((uint64_t)&v31);
  *(_QWORD *)(swift_allocObject() + 16) = 0x8000000000000008;
  sub_1B19F8CD0(v3);
  sub_1B1D3590C(v3);
  v5 = v4;
  swift_release();
  sub_1B19F8D00(v3);
  v6 = sub_1B19F8D00(v3);
  if ((v5 & 1) == 0)
  {
LABEL_8:
    v10 = 0;
    return v10 & 1;
  }
  v1(&v14, v6);
  v7 = v15;
  v25 = v15;
  v24 = v14;
  sub_1B1B28C6C((uint64_t)&v24);
  v23 = v16;
  sub_1B1B28C6C((uint64_t)&v23);
  v22 = v17;
  sub_1B1B28C6C((uint64_t)&v22);
  v21 = v18;
  sub_1B1B28C6C((uint64_t)&v21);
  v20 = v19;
  sub_1B1B28C6C((uint64_t)&v20);
  if (!*(_QWORD *)(v7 + 16))
  {
    v11 = &v25;
    goto LABEL_7;
  }
  v8 = *(_QWORD *)(v7 + 32);
  sub_1B19F8CD0(v8);
  sub_1B1B28C6C((uint64_t)&v25);
  *(_QWORD *)(swift_allocObject() + 16) = 0x8000000000000008;
  sub_1B19F8CD0(v8);
  sub_1B1D3590C(v8);
  v10 = v9;
  swift_release();
  sub_1B19F8D00(v8);
  sub_1B19F8D00(v8);
  return v10 & 1;
}

uint64_t sub_1B1FF54E8()
{
  uint64_t v0;
  void (*v1)(uint64_t *__return_ptr, unint64_t);
  uint64_t v2;
  unint64_t v3;
  char v4;
  char v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  char v10;
  char v11;
  _QWORD v13[6];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v1 = *(void (**)(uint64_t *__return_ptr, unint64_t))(*(_QWORD *)v0 + 152);
  ((void (*)(_QWORD *__return_ptr))v1)(v13);
  v2 = v13[0];
  v30 = v13[1];
  v31 = v13[0];
  sub_1B1B28C6C((uint64_t)&v30);
  v29 = v13[2];
  sub_1B1B28C6C((uint64_t)&v29);
  v28 = v13[3];
  sub_1B1B28C6C((uint64_t)&v28);
  v27 = v13[4];
  sub_1B1B28C6C((uint64_t)&v27);
  v26 = v13[5];
  sub_1B1B28C6C((uint64_t)&v26);
  if (!*(_QWORD *)(v2 + 16))
  {
    sub_1B1B28C6C((uint64_t)&v31);
    goto LABEL_6;
  }
  v3 = *(_QWORD *)(v2 + 32);
  sub_1B19F8CD0(v3);
  sub_1B1B28C6C((uint64_t)&v31);
  *(_QWORD *)(swift_allocObject() + 16) = 0x8000000000000008;
  sub_1B19F8CD0(v3);
  sub_1B1D3590C(v3);
  v5 = v4;
  swift_release();
  sub_1B19F8D00(v3);
  v6 = sub_1B19F8D00(v3);
  if ((v5 & 1) == 0)
  {
LABEL_6:
    v11 = 0;
    return v11 & 1;
  }
  v1(&v14, v6);
  v7 = v15;
  v25 = v15;
  v24 = v14;
  sub_1B1B28C6C((uint64_t)&v24);
  v23 = v16;
  sub_1B1B28C6C((uint64_t)&v23);
  v22 = v17;
  sub_1B1B28C6C((uint64_t)&v22);
  v21 = v18;
  sub_1B1B28C6C((uint64_t)&v21);
  v20 = v19;
  sub_1B1B28C6C((uint64_t)&v20);
  if (*(_QWORD *)(v7 + 16))
  {
    v8 = *(_QWORD *)(v7 + 32);
    sub_1B19F8CD0(v8);
    sub_1B1B28C6C((uint64_t)&v25);
    *(_QWORD *)(swift_allocObject() + 16) = 0x8000000000000008;
    sub_1B19F8CD0(v8);
    sub_1B1D3590C(v8);
    v10 = v9;
    swift_release();
    sub_1B19F8D00(v8);
    sub_1B19F8D00(v8);
    v11 = v10 ^ 1;
  }
  else
  {
    sub_1B1B28C6C((uint64_t)&v25);
    v11 = 1;
  }
  return v11 & 1;
}

uint64_t sub_1B1FF56E8()
{
  uint64_t v0;
  void (*v1)(uint64_t *__return_ptr, unint64_t);
  uint64_t v2;
  unint64_t v3;
  char v4;
  char v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  char v10;
  _QWORD v12[6];
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v1 = *(void (**)(uint64_t *__return_ptr, unint64_t))(*(_QWORD *)v0 + 152);
  ((void (*)(_QWORD *__return_ptr))v1)(v12);
  v2 = v12[0];
  v29 = v12[1];
  v30 = v12[0];
  sub_1B1B28C6C((uint64_t)&v29);
  v28 = v12[2];
  sub_1B1B28C6C((uint64_t)&v28);
  v27 = v12[3];
  sub_1B1B28C6C((uint64_t)&v27);
  v26 = v12[4];
  sub_1B1B28C6C((uint64_t)&v26);
  v25 = v12[5];
  sub_1B1B28C6C((uint64_t)&v25);
  if (*(_QWORD *)(v2 + 16))
  {
    v3 = *(_QWORD *)(v2 + 32);
    sub_1B19F8CD0(v3);
    sub_1B1B28C6C((uint64_t)&v30);
    *(_QWORD *)(swift_allocObject() + 16) = 0x8000000000000008;
    sub_1B19F8CD0(v3);
    sub_1B1D3590C(v3);
    v5 = v4;
    swift_release();
    sub_1B19F8D00(v3);
    v6 = sub_1B19F8D00(v3);
    if ((v5 & 1) != 0)
      goto LABEL_8;
  }
  else
  {
    v6 = sub_1B1B28C6C((uint64_t)&v30);
  }
  v1(&v13, v6);
  v7 = v14;
  v24 = v14;
  v23 = v13;
  sub_1B1B28C6C((uint64_t)&v23);
  v22 = v15;
  sub_1B1B28C6C((uint64_t)&v22);
  v21 = v16;
  sub_1B1B28C6C((uint64_t)&v21);
  v20 = v17;
  sub_1B1B28C6C((uint64_t)&v20);
  v19 = v18;
  sub_1B1B28C6C((uint64_t)&v19);
  if (!*(_QWORD *)(v7 + 16))
  {
    sub_1B1B28C6C((uint64_t)&v24);
LABEL_8:
    v10 = 0;
    return v10 & 1;
  }
  v8 = *(_QWORD *)(v7 + 32);
  sub_1B19F8CD0(v8);
  sub_1B1B28C6C((uint64_t)&v24);
  *(_QWORD *)(swift_allocObject() + 16) = 0x8000000000000008;
  sub_1B19F8CD0(v8);
  sub_1B1D3590C(v8);
  v10 = v9;
  swift_release();
  sub_1B19F8D00(v8);
  sub_1B19F8D00(v8);
  return v10 & 1;
}

_QWORD *sub_1B1FF58E0(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v9[5];

  v6 = (_QWORD *)swift_allocObject();
  sub_1B1A02828(a1, v9);
  v7 = (_QWORD *)((char *)v6 + OBJC_IVAR____TtC3VFX12ConstantNode_semantic);
  sub_1B1A02828(v9, (_QWORD *)((char *)v6 + OBJC_IVAR____TtC3VFX12ConstantNode_holder));
  *v7 = a2;
  v7[1] = a3;
  v6[2] = MEMORY[0x1E0DEE9D8];
  v6[3] = 0;
  v6[4] = 0;
  sub_1B2228260();
  sub_1B1A028A0(v9);
  sub_1B1A028A0(a1);
  return v6;
}

uint64_t sub_1B1FF5998()
{
  _BYTE v1[24];
  uint64_t v2;

  sub_1B222A168();
  sub_1B19FC264((uint64_t)v1, v2);
  sub_1B2229DF0();
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v1);
}

uint64_t sub_1B1FF5A30()
{
  uint64_t v0;
  uint64_t result;
  _QWORD v2[4];

  result = sub_1B222A138();
  if (!v0)
  {
    sub_1B19FA070(v2, v2[3]);
    sub_1B2229D6C();
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v2);
  }
  return result;
}

void sub_1B1FF5AD0()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t sub_1B1FF5AFC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v1 = v0;
  v2 = (uint64_t *)(v0 + OBJC_IVAR____TtC3VFX12ConstantNode_semantic);
  v3 = *(_QWORD *)(v0 + OBJC_IVAR____TtC3VFX12ConstantNode_semantic);
  sub_1B222A06C();
  sub_1B1BF5C34(v3);
  sub_1B222A078();
  v4 = sub_1B222A0C0();
  sub_1B222A06C();
  sub_1B222A078();
  if (v4 == sub_1B222A0C0())
  {
    v5 = *(_QWORD *)(v1 + OBJC_IVAR____TtC3VFX12ConstantNode_holder);
    sub_1B1B632F0(v5);
    sub_1B1D763B0(v5);
    sub_1B1B28D2C(v5);
    swift_bridgeObjectRetain();
    sub_1B1B5A1CC();
    swift_bridgeObjectRelease();
    v6 = sub_1B222916C();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    sub_1B1DCD8E8();
    swift_bridgeObjectRelease();
    v9 = v6;
  }
  else
  {
    sub_1B1BF5C58(*v2);
    swift_bridgeObjectRetain();
    sub_1B1B5A1CC();
    swift_bridgeObjectRelease();
    v7 = sub_1B222916C();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    sub_1B1DCD8E8();
    swift_bridgeObjectRelease();
    v9 = v7;
  }
  sub_1B1B25B50();
  swift_bridgeObjectRetain();
  sub_1B2228878();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v9;
}

uint64_t sub_1B1FF5D40()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  _BYTE v4[32];
  uint64_t v5;
  unint64_t v6;

  v5 = 0;
  v6 = 0xE000000000000000;
  v1 = v0 + OBJC_IVAR____TtC3VFX12ConstantNode_holder + 8;
  v2 = *(_QWORD *)(v0 + OBJC_IVAR____TtC3VFX12ConstantNode_holder);
  sub_1B1B632F0(v2);
  sub_1B1D763B0(v2);
  sub_1B1B28D2C(v2);
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  sub_1B1A02864(v1, (uint64_t)v4);
  sub_1B22295EC();
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v4);
  return v5;
}

double sub_1B1FF5E08@<D0>(_OWORD *a1@<X8>)
{
  uint64_t v1;
  unint64_t inited;
  unint64_t v4;
  __int128 v5;
  double result;
  _OWORD v7[2];
  __int128 v8;

  sub_1B1A02758(0, &qword_1EEF5E8F0, (uint64_t)&type metadata for AnyType, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  v4 = *(_QWORD *)(v1 + OBJC_IVAR____TtC3VFX12ConstantNode_holder);
  *(_QWORD *)(inited + 32) = v4;
  sub_1B1B632F0(v4);
  sub_1B1BCF75C(inited, v7);
  swift_setDeallocating();
  swift_arrayDestroy();
  v5 = v7[1];
  *a1 = v7[0];
  a1[1] = v5;
  result = *(double *)&v8;
  a1[2] = v8;
  return result;
}

uint64_t sub_1B1FF5EBC()
{
  return type metadata accessor for BuiltinNode(0);
}

uint64_t type metadata accessor for BuiltinNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF61D10);
}

uint64_t sub_1B1FF5ED8()
{
  return 7104846;
}

double sub_1B1FF5EE8@<D0>(_OWORD *a1@<X8>)
{
  return sub_1B1D8DCC0((unint64_t)&unk_1E63BDF88, a1);
}

_QWORD *sub_1B1FF5EF8()
{
  _QWORD *v0;
  uint64_t v1;

  v0 = (_QWORD *)swift_allocObject();
  v1 = MEMORY[0x1E0DEE9D8];
  v0[3] = 0;
  v0[4] = 0;
  v0[2] = v1;
  sub_1B2228260();
  swift_release();
  return v0;
}

uint64_t sub_1B1FF5F58()
{
  return type metadata accessor for NilNode(0);
}

uint64_t type metadata accessor for NilNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF61D20);
}

uint64_t sub_1B1FF5F74()
{
  return 0x746963696C706D49;
}

uint64_t sub_1B1FF5F94()
{
  return type metadata accessor for ImplicitNilNode(0);
}

uint64_t type metadata accessor for ImplicitNilNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF61D30);
}

uint64_t sub_1B1FF5FB0()
{
  uint64_t v0;
  unint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC3VFX14NoopReturnNode_type);
  sub_1B1B632F0(v1);
  sub_1B1D763B0(v1);
  sub_1B1B28D2C(v1);
  sub_1B2228890();
  swift_bridgeObjectRelease();
  return 0x75746552706F6F4ELL;
}

unint64_t sub_1B1FF6040@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t result;
  uint64_t v7;

  sub_1B1A02758(0, (unint64_t *)&qword_1EEF5CB90, (uint64_t)&type metadata for TypeConstraint, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_1B226D240;
  v4 = swift_allocObject();
  v5 = *(_QWORD *)(v1 + OBJC_IVAR____TtC3VFX14NoopReturnNode_type);
  *(_QWORD *)(v4 + 16) = v5;
  *(_QWORD *)(v3 + 32) = v4 | 0x6000000000000000;
  result = sub_1B1B632F0(v5);
  v7 = MEMORY[0x1E0DEE9D8];
  *a1 = v3;
  a1[1] = v7;
  a1[2] = (uint64_t)&unk_1E637FF50;
  a1[3] = v7;
  a1[4] = v7;
  a1[5] = v7;
  return result;
}

_QWORD *sub_1B1FF60F0(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;

  v2 = swift_allocObject();
  v3 = *(_QWORD *)((char *)a1 + OBJC_IVAR____TtC3VFX14NoopReturnNode_type);
  *(_QWORD *)(v2 + OBJC_IVAR____TtC3VFX14NoopReturnNode_type) = v3;
  sub_1B1B632F0(v3);
  return sub_1B1BCE388(a1);
}

void sub_1B1FF613C()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

unint64_t sub_1B1FF6168()
{
  uint64_t v0;

  return sub_1B1B28D2C(*(_QWORD *)(v0 + OBJC_IVAR____TtC3VFX14NoopReturnNode_type));
}

uint64_t sub_1B1FF6178()
{
  return sub_1B1FF7A64(&OBJC_IVAR____TtC3VFX14NoopReturnNode_type);
}

uint64_t sub_1B1FF6184()
{
  return type metadata accessor for NoopReturnNode(0);
}

uint64_t type metadata accessor for NoopReturnNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF61D40);
}

uint64_t sub_1B1FF61A0()
{
  return sub_1B1FF92A0();
}

uint64_t sub_1B1FF61AC(_QWORD *a1)
{
  return sub_1B1FF7B18(a1);
}

unint64_t sub_1B1FF61C8(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1B1FF7BB0(a1, a2, a3, &OBJC_IVAR____TtC3VFX14NoopReturnNode_type);
}

uint64_t sub_1B1FF61E4()
{
  return 0x75746552706F6F4ELL;
}

uint64_t sub_1B1FF6200@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  sub_1B1A02758(0, (unint64_t *)&qword_1EEF5CB90, (uint64_t)&type metadata for TypeConstraint, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_1B226D240;
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(v2 + 32) = result | 0x4000000000000000;
  v4 = MEMORY[0x1E0DEE9D8];
  *a1 = v2;
  a1[1] = v4;
  a1[2] = (uint64_t)&unk_1E638D598;
  a1[3] = v4;
  a1[4] = v4;
  a1[5] = v4;
  return result;
}

uint64_t sub_1B1FF6294()
{
  return type metadata accessor for NoopReturnAnyNode(0);
}

uint64_t type metadata accessor for NoopReturnAnyNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF61D50);
}

uint64_t sub_1B1FF62B0()
{
  return 0x30252964696F7628;
}

uint64_t sub_1B1FF62C8()
{
  return 0x69746341706F6F4ELL;
}

uint64_t sub_1B1FF62E4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  sub_1B1A02758(0, (unint64_t *)&qword_1EEF5CB90, (uint64_t)&type metadata for TypeConstraint, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_1B226CD10;
  v3 = swift_allocObject();
  *(_QWORD *)(v3 + 16) = 0x8000000000000008;
  *(_QWORD *)(v2 + 32) = v3 | 0x6000000000000000;
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = 0x8000000000000050;
  *(_QWORD *)(v2 + 40) = v4 | 0x6000000000000000;
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1B226D240;
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = 0x8000000000000008;
  *(_QWORD *)(v5 + 32) = result | 0x6000000000000000;
  *a1 = v2;
  a1[1] = v5;
  v7 = MEMORY[0x1E0DEE9D8];
  a1[2] = (uint64_t)&unk_1E637FEF0;
  a1[3] = v7;
  a1[4] = v7;
  a1[5] = v7;
  return result;
}

uint64_t sub_1B1FF63F4()
{
  return type metadata accessor for NoopActionNode(0);
}

uint64_t type metadata accessor for NoopActionNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF61D60);
}

uint64_t sub_1B1FF6410()
{
  return 0x31252964696F7628;
}

_QWORD *sub_1B1FF6428(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  _QWORD *v7;

  v6 = (_QWORD *)swift_allocObject();
  v7 = (_QWORD *)((char *)v6 + OBJC_IVAR____TtC3VFX12ConstantNode_semantic);
  sub_1B1A02828(a1, (_QWORD *)((char *)v6 + OBJC_IVAR____TtC3VFX12ConstantNode_holder));
  *v7 = a2;
  v7[1] = a3;
  v6[2] = MEMORY[0x1E0DEE9D8];
  v6[3] = 0;
  v6[4] = 0;
  sub_1B2228260();
  sub_1B1A028A0(a1);
  return v6;
}

_QWORD *sub_1B1FF64C4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = swift_allocObject();
  v3 = OBJC_IVAR____TtC3VFX12ConstantNode_semantic;
  sub_1B1A02828((_QWORD *)((char *)a1 + OBJC_IVAR____TtC3VFX12ConstantNode_holder), (unint64_t *)(v2 + OBJC_IVAR____TtC3VFX12ConstantNode_holder));
  *(_OWORD *)(v2 + v3) = *(_OWORD *)((char *)a1 + OBJC_IVAR____TtC3VFX12ConstantNode_semantic);
  return sub_1B1BCE388(a1);
}

unint64_t *sub_1B1FF652C()
{
  uint64_t v0;

  return sub_1B1A028A0((unint64_t *)(v0 + OBJC_IVAR____TtC3VFX12ConstantNode_holder));
}

uint64_t sub_1B1FF653C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease();
  sub_1B1B28F18(*(_QWORD *)(v0 + 24));
  v1 = v0 + OBJC_IVAR____TtC3VFX4Node_authoringID;
  v2 = sub_1B222826C();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  sub_1B1A028A0((unint64_t *)(v0 + OBJC_IVAR____TtC3VFX12ConstantNode_holder));
  return swift_deallocClassInstance();
}

uint64_t sub_1B1FF65B0()
{
  return type metadata accessor for ConstantNode(0);
}

uint64_t type metadata accessor for ConstantNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF61D70);
}

uint64_t sub_1B1FF65CC()
{
  return swift_updateClassMetadata2();
}

uint64_t sub_1B1FF6614(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  _OWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v7[9];
  _BYTE v8[24];
  uint64_t v9;

  sub_1B19FA070(a1, a1[3]);
  sub_1B222A15C();
  sub_1B1A02828((unint64_t *)(v1 + OBJC_IVAR____TtC3VFX12ConstantNode_holder), v7);
  sub_1B19FC264((uint64_t)v8, v9);
  sub_1B1FF960C();
  sub_1B2229BA4();
  sub_1B1A028A0(v7);
  if (!v2)
  {
    v3 = (_OWORD *)(v1 + OBJC_IVAR____TtC3VFX12ConstantNode_semantic);
    v4 = *(_QWORD *)(v1 + OBJC_IVAR____TtC3VFX12ConstantNode_semantic);
    sub_1B222A06C();
    sub_1B1BF5C34(v4);
    sub_1B222A078();
    v5 = sub_1B222A0C0();
    sub_1B222A06C();
    sub_1B222A078();
    if (v5 != sub_1B222A0C0())
    {
      *(_OWORD *)v7 = *v3;
      sub_1B19FC264((uint64_t)v8, v9);
      sub_1B1CBB97C();
      sub_1B2229BA4();
    }
  }
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v8);
}

uint64_t sub_1B1FF677C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  int32x2_t v4;
  int64x2_t v5;
  int8x16_t v6[2];
  _BYTE v7[24];
  uint64_t v8;

  sub_1B19FA070(a1, a1[3]);
  result = sub_1B222A12C();
  if (!v2)
  {
    sub_1B19FC264((uint64_t)v7, v8);
    sub_1B1FF957C();
    sub_1B2229AA8();
    sub_1B1FF95C0(v6[0].i64, v1 + OBJC_IVAR____TtC3VFX12ConstantNode_holder);
    sub_1B19FC264((uint64_t)v7, v8);
    sub_1B1CBB838();
    sub_1B2229A48();
    v4 = vdup_n_s32(v6[0].i64[0] == 25);
    v5.i64[0] = v4.u32[0];
    v5.i64[1] = v4.u32[1];
    *(int8x16_t *)(v1 + OBJC_IVAR____TtC3VFX12ConstantNode_semantic) = vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v5, 0x3FuLL)), (int8x16_t)xmmword_1B2246910, v6[0]);
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v7);
  }
  return result;
}

uint64_t sub_1B1FF68C0(_QWORD *a1)
{
  return sub_1B1FF6614(a1);
}

uint64_t sub_1B1FF68D4(_QWORD *a1)
{
  return sub_1B1FF677C(a1);
}

unint64_t sub_1B1FF68E8@<X0>(unint64_t a1@<X1>, uint64_t a2@<X2>, unint64_t a3@<X3>, unint64_t *a4@<X8>)
{
  uint64_t *v8;

  a4[4] = a3;
  v8 = sub_1B1A137F4((uint64_t *)a4 + 1);
  (*(void (**)(uint64_t *, uint64_t, unint64_t))(*(_QWORD *)(a3 - 8) + 16))(v8, a2, a3);
  *a4 = a1;
  return sub_1B1B632F0(a1);
}

unint64_t *sub_1B1FF6940@<X0>(_QWORD *a1@<X0>, unint64_t *a2@<X8>)
{
  uint64_t v2;
  unint64_t *result;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _OWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t *v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  _BYTE v51[24];
  uint64_t v52;
  unint64_t v53;
  __int128 v54;
  uint64_t v55;

  sub_1B19FA070(a1, a1[3]);
  sub_1B222A12C();
  if (v2)
    return (unint64_t *)_s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  sub_1B19FC264((uint64_t)v51, v52);
  sub_1B1D52CD0();
  sub_1B2229AA8();
  v6 = v45;
  v53 = v45;
  sub_1B1B632F0(v45);
  sub_1B1D77964(v45);
  if (!v7)
  {
    *(_QWORD *)&v45 = 0;
    *((_QWORD *)&v45 + 1) = 0xE000000000000000;
    sub_1B2229430();
    sub_1B2228890();
    *(_QWORD *)&v49 = v6;
    sub_1B22295EC();
    sub_1B1B28D2C(v6);
    sub_1B1B6AE48();
    swift_allocError();
    *(_OWORD *)v10 = v45;
    *(_BYTE *)(v10 + 16) = 0;
    swift_willThrow();
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v51);
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
    return (unint64_t *)sub_1B1B28D2C(v53);
  }
  type metadata accessor for simd_quatf(0);
  v9 = v8;
  if (swift_dynamicCastMetatype())
  {
    sub_1B1B28D2C(v45);
    sub_1B19FC264((uint64_t)v51, v52);
    sub_1B1B4E740();
    sub_1B2229AA8();
    *((_QWORD *)&v46 + 1) = v9;
    *(_QWORD *)&v45 = swift_allocObject();
    *(_OWORD *)(v45 + 16) = v49;
LABEL_15:
    v17 = &v45;
LABEL_16:
    sub_1B1A0DDAC(v17, &v54);
LABEL_17:
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v51);
    sub_1B1A02828(&v53, a2);
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
    return sub_1B1A028A0(&v53);
  }
  type metadata accessor for simd_float2x2(0);
  v12 = v11;
  if (swift_dynamicCastMetatype())
  {
    sub_1B1B28D2C(v45);
    sub_1B19FC264((uint64_t)v51, v52);
    sub_1B1B2BE68();
    sub_1B2229AA8();
    *((_QWORD *)&v46 + 1) = v12;
    v45 = v49;
    goto LABEL_15;
  }
  type metadata accessor for simd_float2x3(0);
  v14 = v13;
  if (swift_dynamicCastMetatype())
  {
    sub_1B1B28D2C(v45);
    sub_1B19FC264((uint64_t)v51, v52);
    sub_1B1B2BE24();
LABEL_14:
    sub_1B2229AA8();
    v41 = v50;
    *((_QWORD *)&v46 + 1) = v14;
    v16 = swift_allocObject();
    *(_QWORD *)&v45 = v16;
    *(_OWORD *)(v16 + 16) = v49;
    *(_OWORD *)(v16 + 32) = v41;
    goto LABEL_15;
  }
  type metadata accessor for simd_float2x4(0);
  v14 = v15;
  if (swift_dynamicCastMetatype())
  {
    sub_1B1B28D2C(v45);
    sub_1B19FC264((uint64_t)v51, v52);
    sub_1B1B2BDE0();
    goto LABEL_14;
  }
  type metadata accessor for simd_float3x2(0);
  v19 = v18;
  if (swift_dynamicCastMetatype())
  {
    sub_1B1B28D2C(v45);
    sub_1B19FC264((uint64_t)v51, v52);
    sub_1B1B2BD9C();
    sub_1B2229AA8();
    *((_QWORD *)&v46 + 1) = v19;
    v45 = v49;
    *(_QWORD *)&v46 = v50;
    goto LABEL_15;
  }
  type metadata accessor for simd_float3x3(0);
  v21 = v20;
  if (swift_dynamicCastMetatype())
  {
    sub_1B1B28D2C(v45);
    sub_1B19FC264((uint64_t)v51, v52);
    sub_1B1B2BD58();
LABEL_24:
    sub_1B2229AA8();
    v42 = v46;
    v40 = v47;
    *((_QWORD *)&v50 + 1) = v21;
    v23 = (_OWORD *)swift_allocObject();
    *(_QWORD *)&v49 = v23;
    v23[1] = v45;
    v23[2] = v42;
    v23[3] = v40;
LABEL_25:
    v17 = &v49;
    goto LABEL_16;
  }
  type metadata accessor for simd_float3x4(0);
  v21 = v22;
  if (swift_dynamicCastMetatype())
  {
    sub_1B1B28D2C(v45);
    sub_1B19FC264((uint64_t)v51, v52);
    sub_1B1B2BD14();
    goto LABEL_24;
  }
  type metadata accessor for simd_float4x2(0);
  v25 = v24;
  if (swift_dynamicCastMetatype())
  {
    sub_1B1B28D2C(v45);
    sub_1B19FC264((uint64_t)v51, v52);
    sub_1B1B2BCD0();
    sub_1B2229AA8();
    v26 = v50;
    *((_QWORD *)&v46 + 1) = v25;
    v27 = swift_allocObject();
    *(_QWORD *)&v45 = v27;
    *(_OWORD *)(v27 + 16) = v49;
    *(_OWORD *)(v27 + 32) = v26;
    goto LABEL_15;
  }
  type metadata accessor for simd_float4x3(0);
  v29 = v28;
  if (swift_dynamicCastMetatype())
  {
    sub_1B1B28D2C(v45);
    sub_1B19FC264((uint64_t)v51, v52);
    sub_1B1B2BC8C();
LABEL_32:
    sub_1B2229AA8();
    v39 = v46;
    v43 = v48;
    v44 = v47;
    *((_QWORD *)&v50 + 1) = v29;
    v31 = (_OWORD *)swift_allocObject();
    *(_QWORD *)&v49 = v31;
    v31[1] = v45;
    v31[2] = v39;
    v31[3] = v44;
    v31[4] = v43;
    goto LABEL_25;
  }
  type metadata accessor for simd_float4x4(0);
  v29 = v30;
  if (swift_dynamicCastMetatype())
  {
    sub_1B1B28D2C(v45);
    sub_1B19FC264((uint64_t)v51, v52);
    sub_1B1B2BC48();
    goto LABEL_32;
  }
  sub_1B1D77964(v45);
  if (v32)
  {
    v33 = v32;
    v34 = swift_conformsToProtocol2();
    if (v34)
      v35 = v34;
    else
      v35 = 0;
    if (!v34)
      v33 = 0;
    if (v33)
    {
      sub_1B1B28D2C(v45);
      *((_QWORD *)&v46 + 1) = v33;
      *(_QWORD *)&v47 = v35;
      sub_1B1A137F4((uint64_t *)&v45);
      sub_1B1E8D320((uint64_t)v51);
      v36 = *((_QWORD *)&v46 + 1);
      v37 = sub_1B19FA070(&v45, *((uint64_t *)&v46 + 1));
      v55 = v36;
      v38 = sub_1B1A137F4((uint64_t *)&v54);
      (*(void (**)(uint64_t *, _QWORD *, uint64_t))(*(_QWORD *)(v36 - 8) + 16))(v38, v37, v36);
      _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v45);
      goto LABEL_17;
    }
    *(_QWORD *)&v45 = 0;
    *((_QWORD *)&v45 + 1) = 0xE000000000000000;
    sub_1B2229430();
    *(_QWORD *)&v49 = v6;
    sub_1B22295EC();
    sub_1B1B28D2C(v6);
    sub_1B2228890();
  }
  else
  {
    *(_QWORD *)&v45 = 0;
    *((_QWORD *)&v45 + 1) = 0xE000000000000000;
    sub_1B2229430();
    sub_1B2228890();
    *(_QWORD *)&v49 = v6;
    sub_1B22295EC();
  }
  result = (unint64_t *)sub_1B2229688();
  __break(1u);
  return result;
}

uint64_t sub_1B1FF7224(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v8;
  _OWORD *v9;
  __int128 v10;
  uint64_t v11;
  unint64_t v12;
  _OWORD *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _BYTE v23[32];
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  _BYTE v28[32];
  __int128 v29;
  uint64_t v30;
  ValueMetadata *v31;
  unint64_t v32;
  _BYTE v33[24];
  uint64_t v34;

  v3 = v1;
  sub_1B19FA070(a1, a1[3]);
  sub_1B222A15C();
  *(_QWORD *)&v24 = *v1;
  sub_1B19FC264((uint64_t)v33, v34);
  sub_1B1D52A9C();
  sub_1B2229BA4();
  if (!v2)
  {
    v4 = (uint64_t)(v1 + 1);
    sub_1B1A02864((uint64_t)(v3 + 1), (uint64_t)v28);
    type metadata accessor for simd_quatf(0);
    if (swift_dynamicCast())
    {
      v31 = &type metadata for QuaternionFCoder;
      v32 = sub_1B1B4E784();
      *(_QWORD *)&v29 = swift_allocObject();
      *(_OWORD *)(v29 + 16) = v24;
      goto LABEL_11;
    }
    type metadata accessor for simd_float2x2(0);
    if (swift_dynamicCast())
    {
      v31 = &type metadata for Float2x2Coder;
      v32 = sub_1B1B2C0CC();
      v29 = v24;
      goto LABEL_11;
    }
    type metadata accessor for simd_float2x3(0);
    if (swift_dynamicCast())
    {
      v17 = v25;
      v20 = v24;
      v31 = &type metadata for Float2x3Coder;
      v5 = sub_1B1B2C088();
    }
    else
    {
      type metadata accessor for simd_float2x4(0);
      if (!swift_dynamicCast())
      {
        type metadata accessor for simd_float3x2(0);
        if (swift_dynamicCast())
        {
          v31 = &type metadata for Float3x2Coder;
          v32 = sub_1B1B2C000();
          v29 = v24;
          v30 = v25;
          goto LABEL_11;
        }
        type metadata accessor for simd_float3x3(0);
        if (swift_dynamicCast())
        {
          v18 = v25;
          v21 = v24;
          v15 = v26;
          v31 = &type metadata for Float3x3Coder;
          v8 = sub_1B1B2BFBC();
        }
        else
        {
          type metadata accessor for simd_float3x4(0);
          if (!swift_dynamicCast())
          {
            type metadata accessor for simd_float4x2(0);
            if (swift_dynamicCast())
            {
              v10 = v25;
              v31 = &type metadata for Float4x2Coder;
              v32 = sub_1B1B2BF34();
              v11 = swift_allocObject();
              *(_QWORD *)&v29 = v11;
              *(_OWORD *)(v11 + 16) = v24;
              *(_OWORD *)(v11 + 32) = v10;
            }
            else
            {
              type metadata accessor for simd_float4x3(0);
              if (swift_dynamicCast())
              {
                v19 = v25;
                v22 = v24;
                v14 = v27;
                v16 = v26;
                v31 = &type metadata for Float4x3Coder;
                v12 = sub_1B1B2BEF0();
              }
              else
              {
                type metadata accessor for simd_float4x4(0);
                if (!swift_dynamicCast())
                {
                  sub_1B1A02864(v4, (uint64_t)v23);
                  sub_1B1A025A0(0, &qword_1EEF61EA0);
                  swift_dynamicCast();
                  sub_1B1A02518(&v24, (uint64_t)&v29);
                  goto LABEL_11;
                }
                v19 = v25;
                v22 = v24;
                v14 = v27;
                v16 = v26;
                v31 = &type metadata for Float4x4Coder;
                v12 = sub_1B1B2BEAC();
              }
              v32 = v12;
              v13 = (_OWORD *)swift_allocObject();
              *(_QWORD *)&v29 = v13;
              v13[1] = v22;
              v13[2] = v19;
              v13[3] = v16;
              v13[4] = v14;
            }
LABEL_11:
            _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v28);
            sub_1B19FA070(&v29, (uint64_t)v31);
            sub_1B1E8D2BC((uint64_t)v33);
            _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v29);
            return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v33);
          }
          v18 = v25;
          v21 = v24;
          v15 = v26;
          v31 = &type metadata for Float3x4Coder;
          v8 = sub_1B1B2BF78();
        }
        v32 = v8;
        v9 = (_OWORD *)swift_allocObject();
        *(_QWORD *)&v29 = v9;
        v9[1] = v21;
        v9[2] = v18;
        v9[3] = v15;
        goto LABEL_11;
      }
      v17 = v25;
      v20 = v24;
      v31 = &type metadata for Float2x4Coder;
      v5 = sub_1B1B2C044();
    }
    v32 = v5;
    v6 = swift_allocObject();
    *(_QWORD *)&v29 = v6;
    *(_OWORD *)(v6 + 16) = v20;
    *(_OWORD *)(v6 + 32) = v17;
    goto LABEL_11;
  }
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v33);
}

unint64_t *sub_1B1FF7740@<X0>(_QWORD *a1@<X0>, unint64_t *a2@<X8>)
{
  return sub_1B1FF6940(a1, a2);
}

uint64_t sub_1B1FF7754(_QWORD *a1)
{
  return sub_1B1FF7224(a1);
}

uint64_t sub_1B1FF7768()
{
  uint64_t v0;
  unint64_t v1;
  __int128 v2;
  uint64_t v3;
  uint64_t result;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC3VFX12ConstantNode_holder);
  if (v1 >> 60 == 4)
  {
    if (*(unsigned __int8 *)(v1 + 16) - 1 < 3)
      return 0;
    return 3;
  }
  if (v1 >> 60 != 8)
    return 3;
  *((_QWORD *)&v2 + 1) = *(_QWORD *)(v0 + OBJC_IVAR____TtC3VFX12ConstantNode_holder);
  *(_QWORD *)&v2 = v1 + 0x7FFFFFFFFFFFFF98;
  v3 = 3;
  result = 0;
  switch((unint64_t)(v2 >> 3))
  {
    case 0uLL:
      return result;
    case 1uLL:
    case 3uLL:
    case 5uLL:
      return 1;
    default:
      return v3;
  }
  return result;
}

uint64_t sub_1B1FF77F0(char a1)
{
  uint64_t *v1;
  uint64_t v2;
  char v3;
  unint64_t v4;
  uint64_t v5;
  _BYTE v7[32];

  v2 = *v1;
  v3 = a1 & 1;
  v4 = *(uint64_t *)((char *)v1 + OBJC_IVAR____TtC3VFX12ConstantNode_holder);
  sub_1B1A02864((uint64_t)v1 + OBJC_IVAR____TtC3VFX12ConstantNode_holder + 8, (uint64_t)v7);
  sub_1B1B632F0(v4);
  v5 = sub_1B1FF3F6C(v4, (uint64_t)v7, v3, v2, (uint64_t)&off_1E6374B00);
  sub_1B1B28D2C(v4);
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v7);
  return v5;
}

unint64_t sub_1B1FF7880()
{
  return 0xD000000000000010;
}

uint64_t sub_1B1FF789C()
{
  return type metadata accessor for ImplicitConstantNode(0);
}

uint64_t type metadata accessor for ImplicitConstantNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF61D80);
}

uint64_t sub_1B1FF78BC()
{
  return 7630660;
}

uint64_t sub_1B1FF78CC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  sub_1B1A02758(0, (unint64_t *)&qword_1EEF5CB90, (uint64_t)&type metadata for TypeConstraint, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_1B226D240;
  v3 = swift_allocObject();
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)(v2 + 32) = v3 | 0x4000000000000000;
  v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1B226D240;
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(v4 + 32) = result | 0x4000000000000000;
  *a1 = v2;
  a1[1] = v4;
  v6 = MEMORY[0x1E0DEE9D8];
  a1[2] = (uint64_t)&unk_1E63BDDB8;
  a1[3] = v6;
  a1[4] = v6;
  a1[5] = v6;
  return result;
}

uint64_t sub_1B1FF79B4()
{
  return type metadata accessor for DotNode(0);
}

uint64_t type metadata accessor for DotNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF61D90);
}

_QWORD *sub_1B1FF79D0(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;

  v2 = swift_allocObject();
  v3 = *(_QWORD *)((char *)a1 + OBJC_IVAR____TtC3VFX12_ComposeNode_type);
  *(_QWORD *)(v2 + OBJC_IVAR____TtC3VFX12_ComposeNode_type) = v3;
  sub_1B1B632F0(v3);
  return sub_1B1BCE388(a1);
}

void sub_1B1FF7A1C()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

unint64_t sub_1B1FF7A48()
{
  uint64_t v0;

  return sub_1B1B28D2C(*(_QWORD *)(v0 + OBJC_IVAR____TtC3VFX12_ComposeNode_type));
}

uint64_t sub_1B1FF7A58()
{
  return sub_1B1FF7A64(&OBJC_IVAR____TtC3VFX12_ComposeNode_type);
}

uint64_t sub_1B1FF7A64(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  swift_bridgeObjectRelease();
  sub_1B1B28F18(*(_QWORD *)(v1 + 24));
  v3 = v1 + OBJC_IVAR____TtC3VFX4Node_authoringID;
  v4 = sub_1B222826C();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  sub_1B1B28D2C(*(_QWORD *)(v1 + *a1));
  return swift_deallocClassInstance();
}

uint64_t sub_1B1FF7AE0()
{
  return type metadata accessor for _ComposeNode(0);
}

uint64_t type metadata accessor for _ComposeNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF61DA0);
}

uint64_t sub_1B1FF7AFC(_QWORD *a1)
{
  return sub_1B1FF7B18(a1);
}

uint64_t sub_1B1FF7B18(_QWORD *a1)
{
  sub_1B19FA070(a1, a1[3]);
  sub_1B1D52A9C();
  return sub_1B1FF5998();
}

unint64_t sub_1B1FF7B94(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1B1FF7BB0(a1, a2, a3, &OBJC_IVAR____TtC3VFX12_ComposeNode_type);
}

unint64_t sub_1B1FF7BB0(_QWORD *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  unint64_t v8;
  uint64_t v9;

  sub_1B19FA070(a1, a1[3]);
  sub_1B1D52CD0();
  result = sub_1B1FF5A30();
  if (!v5)
  {
    v8 = *(_QWORD *)(v4 + *a4);
    *(_QWORD *)(v4 + *a4) = v9;
    return sub_1B1B28D2C(v8);
  }
  return result;
}

uint64_t sub_1B1FF7C44()
{
  uint64_t result;

  result = 0x65736F706D6F43;
  sub_1B1FF81EC();
  return result;
}

uint64_t sub_1B1FF7C5C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;

  v3 = OBJC_IVAR____TtC3VFX12_ComposeNode_type;
  v4 = *(_QWORD *)(v1 + OBJC_IVAR____TtC3VFX12_ComposeNode_type);
  if (v4 >> 60 == 1)
  {
    v5 = (2 * *(_QWORD *)(v4 + 16)) | 1;
  }
  else if (v4 >> 60 == 2)
  {
    v5 = 5;
  }
  else
  {
    v5 = 1;
  }
  sub_1B2229E44();
  swift_unknownObjectRetain_n();
  v6 = swift_dynamicCastClass();
  v7 = MEMORY[0x1E0DEE9D8];
  if (!v6)
    v6 = MEMORY[0x1E0DEE9D8];
  v8 = *(_QWORD *)(v6 + 16);
  swift_release();
  if (v8 == v5 >> 1)
  {
    v9 = swift_dynamicCastClass();
    if (v9)
      v10 = v9;
    else
      v10 = v7;
  }
  else
  {
    v10 = sub_1B1DC8B7C((uint64_t)&unk_1E636FD40, (uint64_t)&unk_1E636FD60, 0, v5);
  }
  v11 = *(_QWORD *)(v1 + v3);
  if (v11 >> 60 == 1)
  {
    v15 = *(_QWORD *)(v11 + 24);
    sub_1B1B632F0(v15);
    v13 = swift_allocObject();
    *(_QWORD *)(v13 + 16) = v15;
    v14 = *(_QWORD *)(v11 + 16);
  }
  else if (v11 >> 60 == 2)
  {
    v12 = *(_QWORD *)(v11 + 16);
    sub_1B1B632F0(v12);
    v13 = swift_allocObject();
    *(_QWORD *)(v13 + 16) = v12;
    v14 = 2;
  }
  else
  {
    v13 = swift_allocObject();
    v14 = 0;
    *(_QWORD *)(v13 + 16) = 0xF000000000000007;
  }
  v16 = sub_1B19F3C4C(v13 | 0x6000000000000000, v14);
  sub_1B1A02758(0, (unint64_t *)&qword_1EEF5CB90, (uint64_t)&type metadata for TypeConstraint, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v17 = swift_allocObject();
  *(_OWORD *)(v17 + 16) = xmmword_1B226D240;
  v18 = swift_allocObject();
  v19 = *(_QWORD *)(v1 + v3);
  *(_QWORD *)(v18 + 16) = v19;
  *(_QWORD *)(v17 + 32) = v18 | 0x6000000000000000;
  sub_1B1B632F0(v19);
  v20 = sub_1B1C50E58(v10);
  sub_1B1C71E04();
  v21 = swift_allocObject();
  *(_OWORD *)(v21 + 16) = xmmword_1B226D240;
  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BA490, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
  sub_1B19FA230();
  v22 = sub_1B2228644();
  v24 = v23;
  result = swift_release();
  *(_QWORD *)(v21 + 32) = v22;
  *(_QWORD *)(v21 + 40) = v24;
  *a1 = v16;
  a1[1] = v17;
  a1[2] = (uint64_t)&unk_1E636FD10;
  a1[3] = v20;
  a1[4] = v21;
  a1[5] = v7;
  return result;
}

uint64_t sub_1B1FF7EFC()
{
  return type metadata accessor for ComposeNode(0);
}

uint64_t type metadata accessor for ComposeNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF61DB0);
}

uint64_t sub_1B1FF7F18(char a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char v9;
  unint64_t v10;
  char v12;
  uint64_t v13;

  v2 = v1;
  v3 = *(_QWORD *)(v1 + OBJC_IVAR____TtC3VFX12_ComposeNode_type);
  v4 = v3 >> 60;
  if (v3 >> 60 == 2 || (_DWORD)v4 == 1 && (v4 = *(_QWORD *)(v3 + 16)) != 0)
  {
    v12 = a1;
    v13 = MEMORY[0x1E0DEE9D8];
    sub_1B2029FFC(0, v4 & ~(v4 >> 63), 0);
    v5 = 0;
    do
    {
      sub_1B2229A0C();
      sub_1B2228890();
      swift_bridgeObjectRelease();
      v7 = *(_QWORD *)(v13 + 16);
      v6 = *(_QWORD *)(v13 + 24);
      if (v7 >= v6 >> 1)
        sub_1B2029FFC(v6 > 1, v7 + 1, 1);
      ++v5;
      *(_QWORD *)(v13 + 16) = v7 + 1;
      v8 = v13 + 16 * v7;
      *(_QWORD *)(v8 + 32) = 37;
      *(_QWORD *)(v8 + 40) = 0xE100000000000000;
    }
    while (v4 != v5);
    v2 = v1;
    a1 = v12;
  }
  v9 = a1 & 1;
  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BA490, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
  sub_1B19FA230();
  sub_1B2228644();
  swift_bridgeObjectRelease();
  sub_1B2229430();
  swift_bridgeObjectRelease();
  v10 = *(_QWORD *)(*(_QWORD *)(v2 + 32) + 32);
  sub_1B1BCCD2C(*(_QWORD *)(v2 + 24));
  sub_1B1B632F0(v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B1D77750(v9, v10);
  sub_1B1B28D2C(v10);
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  return 0x307225206F747561;
}

uint64_t sub_1B1FF8184(char a1)
{
  return sub_1B1FF7F18(a1 & 1);
}

uint64_t sub_1B1FF818C()
{
  return sub_1B1FF8518(17, 0x746963696C706D49);
}

uint64_t sub_1B1FF81B4()
{
  return type metadata accessor for ImplicitComposeNode(0);
}

uint64_t type metadata accessor for ImplicitComposeNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF61DC0);
}

uint64_t sub_1B1FF81D0()
{
  uint64_t result;

  result = 0x736F706D6F636544;
  sub_1B1FF81EC();
  return result;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> sub_1B1FF81EC()
{
  uint64_t v0;
  unint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC3VFX12_ComposeNode_type);
  sub_1B1B632F0(v1);
  sub_1B1D763B0(v1);
  sub_1B1B28D2C(v1);
  swift_bridgeObjectRetain();
  sub_1B1B5A1CC();
  swift_bridgeObjectRelease();
  sub_1B222916C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_1B1DCD8E8();
  swift_bridgeObjectRelease();
  sub_1B1B25B50();
  swift_bridgeObjectRetain();
  sub_1B2228878();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  swift_bridgeObjectRelease();
}

uint64_t sub_1B1FF8340@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t result;
  uint64_t v12;

  sub_1B1A02758(0, (unint64_t *)&qword_1EEF5CB90, (uint64_t)&type metadata for TypeConstraint, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_1B226D240;
  v4 = swift_allocObject();
  v5 = *(_QWORD *)(v1 + OBJC_IVAR____TtC3VFX12_ComposeNode_type);
  *(_QWORD *)(v4 + 16) = v5;
  *(_QWORD *)(v3 + 32) = v4 | 0x6000000000000000;
  if (v5 >> 60 == 1)
  {
    v9 = *(_QWORD *)(v5 + 24);
    sub_1B1B632F0(v9);
    v7 = swift_allocObject();
    *(_QWORD *)(v7 + 16) = v9;
    v8 = *(_QWORD *)(v5 + 16);
  }
  else if (v5 >> 60 == 2)
  {
    v6 = *(_QWORD *)(v5 + 16);
    sub_1B1B632F0(v6);
    v7 = swift_allocObject();
    *(_QWORD *)(v7 + 16) = v6;
    v8 = 2;
  }
  else
  {
    v7 = swift_allocObject();
    v8 = 0;
    *(_QWORD *)(v7 + 16) = 0xF000000000000007;
  }
  v10 = v7 | 0x6000000000000000;
  sub_1B1B632F0(v5);
  result = sub_1B19F3C4C(v10, v8);
  *a1 = v3;
  a1[1] = result;
  v12 = MEMORY[0x1E0DEE9D8];
  a1[2] = (uint64_t)&unk_1E6379BA0;
  a1[3] = v12;
  a1[4] = v12;
  a1[5] = v12;
  return result;
}

uint64_t sub_1B1FF8494()
{
  return type metadata accessor for DecomposeNode(0);
}

uint64_t type metadata accessor for DecomposeNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF61DD0);
}

uint64_t sub_1B1FF84B4()
{
  return sub_1B1FF8518(19, 0xD000000000000011);
}

uint64_t sub_1B1FF84D4()
{
  return type metadata accessor for ImplicitDecomposeNode(0);
}

uint64_t type metadata accessor for ImplicitDecomposeNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF61DE0);
}

uint64_t sub_1B1FF84F0()
{
  return sub_1B1FF8518(16, 0x436C616974726150);
}

uint64_t sub_1B1FF8518(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v4;

  sub_1B2229430();
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(v2 + OBJC_IVAR____TtC3VFX12_ComposeNode_type);
  sub_1B1B632F0(v4);
  sub_1B1D763B0(v4);
  sub_1B1B28D2C(v4);
  swift_bridgeObjectRetain();
  sub_1B1B5A1CC();
  swift_bridgeObjectRelease();
  sub_1B222916C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_1B1DCD8E8();
  swift_bridgeObjectRelease();
  sub_1B1B25B50();
  swift_bridgeObjectRetain();
  sub_1B2228878();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  return a2;
}

unint64_t sub_1B1FF8690@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t result;
  uint64_t v17;

  v3 = OBJC_IVAR____TtC3VFX12_ComposeNode_type;
  v4 = *(_QWORD *)(v1 + OBJC_IVAR____TtC3VFX12_ComposeNode_type);
  if (v4 >> 60 == 1)
  {
    v9 = *(_QWORD *)(v4 + 24);
    sub_1B1B632F0(v9);
    v6 = swift_allocObject();
    v10 = swift_allocObject();
    *(_QWORD *)(v10 + 16) = v9;
    *(_QWORD *)(v6 + 16) = v10;
    v8 = *(_QWORD *)(v4 + 16);
  }
  else if (v4 >> 60 == 2)
  {
    v5 = *(_QWORD *)(v4 + 16);
    sub_1B1B632F0(v5);
    v6 = swift_allocObject();
    v7 = swift_allocObject();
    *(_QWORD *)(v7 + 16) = v5;
    *(_QWORD *)(v6 + 16) = v7;
    v8 = 2;
  }
  else
  {
    v6 = swift_allocObject();
    v11 = swift_allocObject();
    v8 = 0;
    *(_QWORD *)(v11 + 16) = 0xF000000000000007;
    *(_QWORD *)(v6 + 16) = v11;
  }
  v12 = sub_1B19F3C4C(v6 | 0x6000000000000000, v8);
  sub_1B1A02758(0, (unint64_t *)&qword_1EEF5CB90, (uint64_t)&type metadata for TypeConstraint, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_1B226D240;
  v14 = swift_allocObject();
  v15 = *(_QWORD *)(v1 + v3);
  *(_QWORD *)(v14 + 16) = v15;
  *(_QWORD *)(v13 + 32) = v14 | 0x6000000000000000;
  result = sub_1B1B632F0(v15);
  *a1 = v12;
  a1[1] = v13;
  v17 = MEMORY[0x1E0DEE9D8];
  a1[2] = (uint64_t)&unk_1E6393D58;
  a1[3] = v17;
  a1[4] = v17;
  a1[5] = v17;
  return result;
}

uint64_t sub_1B1FF8840()
{
  return type metadata accessor for PartialComposeNode(0);
}

uint64_t type metadata accessor for PartialComposeNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF61DF0);
}

unint64_t sub_1B1FF885C()
{
  sub_1B2229430();
  swift_bridgeObjectRelease();
  sub_1B2229A0C();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  return 0xD000000000000016;
}

uint64_t sub_1B1FF8918()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease();
  sub_1B1B28F18(*(_QWORD *)(v0 + 24));
  v1 = v0 + OBJC_IVAR____TtC3VFX4Node_authoringID;
  v2 = sub_1B222826C();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  sub_1B1B28D2C(*(_QWORD *)(v0 + OBJC_IVAR____TtC3VFX12_ComposeNode_type));
  return swift_deallocClassInstance();
}

uint64_t sub_1B1FF898C()
{
  return type metadata accessor for ImplicitPartialComposeNode(0);
}

uint64_t type metadata accessor for ImplicitPartialComposeNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF61E00);
}

uint64_t sub_1B1FF89A8()
{
  return type metadata accessor for FlowControlNode(0);
}

uint64_t type metadata accessor for FlowControlNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF61E10);
}

uint64_t sub_1B1FF89C4()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  char v3;
  char v4;
  _QWORD v6[6];
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)v0 + 152))(v6);
  v1 = v6[0];
  v11 = v6[1];
  v12 = v6[0];
  sub_1B1B28C6C((uint64_t)&v11);
  v10 = v6[2];
  sub_1B1B28C6C((uint64_t)&v10);
  v9 = v6[3];
  sub_1B1B28C6C((uint64_t)&v9);
  v8 = v6[4];
  sub_1B1B28C6C((uint64_t)&v8);
  v7 = v6[5];
  sub_1B1B28C6C((uint64_t)&v7);
  if (*(_QWORD *)(v1 + 16))
  {
    v2 = *(_QWORD *)(v1 + 32);
    sub_1B19F8CD0(v2);
    sub_1B1B28C6C((uint64_t)&v12);
    *(_QWORD *)(swift_allocObject() + 16) = 0x8000000000000008;
    sub_1B19F8CD0(v2);
    sub_1B1D3590C(v2);
    v4 = v3;
    swift_release();
    sub_1B19F8D00(v2);
    sub_1B19F8D00(v2);
  }
  else
  {
    sub_1B1B28C6C((uint64_t)&v12);
    v4 = 0;
  }
  return v4 & 1;
}

uint64_t sub_1B1FF8AD4()
{
  return 28484;
}

uint64_t sub_1B1FF8AE0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  sub_1B1A02758(0, (unint64_t *)&qword_1EEF5CB90, (uint64_t)&type metadata for TypeConstraint, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_1B226D240;
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = 0x8000000000000008;
  *(_QWORD *)(v2 + 32) = result | 0x6000000000000000;
  v4 = MEMORY[0x1E0DEE9D8];
  *a1 = v2;
  a1[1] = v4;
  a1[2] = (uint64_t)&unk_1E63BB0D8;
  a1[3] = v4;
  a1[4] = v4;
  a1[5] = v4;
  return result;
}

uint64_t sub_1B1FF8B7C()
{
  return type metadata accessor for DoNode(0);
}

uint64_t type metadata accessor for DoNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF61E20);
}

uint64_t sub_1B1FF8B98()
{
  return 0x746963696C706D49;
}

uint64_t sub_1B1FF8BB4()
{
  return type metadata accessor for ImplicitDoNode(0);
}

uint64_t type metadata accessor for ImplicitDoNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF61E30);
}

uint64_t sub_1B1FF8BD0()
{
  return 26185;
}

uint64_t sub_1B1FF8BDC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  sub_1B1A02758(0, (unint64_t *)&qword_1EEF5CB90, (uint64_t)&type metadata for TypeConstraint, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_1B226E100;
  v3 = swift_allocObject();
  *(_QWORD *)(v3 + 16) = 0x8000000000000008;
  *(_QWORD *)(v2 + 32) = v3 | 0x6000000000000000;
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = 0x8000000000000008;
  *(_QWORD *)(v2 + 40) = v4 | 0x6000000000000000;
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = 0x8000000000000010;
  *(_QWORD *)(v2 + 48) = v5 | 0x6000000000000000;
  v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_1B226D240;
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = 0x8000000000000008;
  *(_QWORD *)(v6 + 32) = result | 0x6000000000000000;
  *a1 = v2;
  a1[1] = v6;
  a1[2] = (uint64_t)&unk_1E63BB388;
  a1[3] = (uint64_t)&unk_1E63BB338;
  v8 = MEMORY[0x1E0DEE9D8];
  a1[4] = MEMORY[0x1E0DEE9D8];
  a1[5] = v8;
  return result;
}

uint64_t sub_1B1FF8D10()
{
  return 12837;
}

uint64_t sub_1B1FF8D1C()
{
  return type metadata accessor for IfNode(0);
}

uint64_t type metadata accessor for IfNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF61E40);
}

uint64_t sub_1B1FF8D38()
{
  return 1886351182;
}

uint64_t sub_1B1FF8D48@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  sub_1B1A02758(0, (unint64_t *)&qword_1EEF5CB90, (uint64_t)&type metadata for TypeConstraint, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_1B226D240;
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = 0x8000000000000008;
  *(_QWORD *)(v2 + 32) = result | 0x6000000000000000;
  v4 = MEMORY[0x1E0DEE9D8];
  *a1 = MEMORY[0x1E0DEE9D8];
  a1[1] = v2;
  a1[2] = &unk_1E63C2040;
  a1[3] = v4;
  a1[4] = v4;
  a1[5] = v4;
  return result;
}

uint64_t sub_1B1FF8DE4()
{
  return type metadata accessor for NoopNode(0);
}

uint64_t type metadata accessor for NoopNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF61E50);
}

uint64_t sub_1B1FF8E00()
{
  return 0x746963696C706D49;
}

uint64_t sub_1B1FF8E20()
{
  return type metadata accessor for ImplicitNoopNode(0);
}

uint64_t type metadata accessor for ImplicitNoopNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF61E60);
}

uint64_t sub_1B1FF8E3C()
{
  uint64_t v0;
  uint64_t DynamicType;
  uint64_t v2;
  _QWORD v4[5];

  sub_1B19FA198(v0 + OBJC_IVAR____TtC3VFX16EnumConstantNode_value, (uint64_t)v4);
  sub_1B19FA070(v4, v4[3]);
  DynamicType = swift_getDynamicType();
  v2 = v4[4];
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v4);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 40))(DynamicType, v2);
}

double sub_1B1FF8EAC@<D0>(_OWORD *a1@<X8>)
{
  return sub_1B1D8DCC0((unint64_t)&unk_1E6387348, a1);
}

_QWORD *sub_1B1FF8EBC(_QWORD *a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  sub_1B19FA198((uint64_t)a1 + OBJC_IVAR____TtC3VFX16EnumConstantNode_value, v2 + OBJC_IVAR____TtC3VFX16EnumConstantNode_value);
  return sub_1B1BCE388(a1);
}

uint64_t sub_1B1FF8F08()
{
  uint64_t v0;
  _BYTE v2[40];

  sub_1B19FA198(v0 + OBJC_IVAR____TtC3VFX16EnumConstantNode_value, (uint64_t)v2);
  sub_1B1A025A0(0, (unint64_t *)&qword_1EEF5C6C0);
  return sub_1B22287AC();
}

uint64_t sub_1B1FF8F58(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t *v5;
  uint64_t v7[4];
  _BYTE v8[24];
  uint64_t v9;

  v2 = v1;
  sub_1B19FA070(a1, a1[3]);
  sub_1B222A168();
  v3 = *(_QWORD *)(v1 + OBJC_IVAR____TtC3VFX16EnumConstantNode_value + 24);
  v4 = sub_1B19FA070((_QWORD *)(v2 + OBJC_IVAR____TtC3VFX16EnumConstantNode_value), *(_QWORD *)(v2 + OBJC_IVAR____TtC3VFX16EnumConstantNode_value + 24));
  v7[3] = v3;
  v5 = sub_1B1A137F4(v7);
  (*(void (**)(uint64_t *, _QWORD *, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(v5, v4, v3);
  sub_1B19FC264((uint64_t)v8, v9);
  sub_1B1CBB904();
  sub_1B2229DF0();
  sub_1B1CBB948((uint64_t)v7);
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v8);
}

uint64_t sub_1B1FF903C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  __int128 v7[2];
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11[2];
  _QWORD v12[4];

  v3 = v1;
  sub_1B19FA070(a1, a1[3]);
  result = sub_1B222A138();
  if (!v2)
  {
    sub_1B19FA070(v12, v12[3]);
    sub_1B1CBB7F4();
    sub_1B2229D6C();
    sub_1B1A0DDAC(&v10, &v9);
    sub_1B1A025A0(0, (unint64_t *)&qword_1EEF5C6C0);
    if ((swift_dynamicCast() & 1) != 0)
    {
      sub_1B1A02518(v7, (uint64_t)v11);
      v5 = v1 + OBJC_IVAR____TtC3VFX16EnumConstantNode_value;
      _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0(v3 + OBJC_IVAR____TtC3VFX16EnumConstantNode_value);
      sub_1B1A02518(v11, v5);
    }
    else
    {
      v8 = 0;
      memset(v7, 0, sizeof(v7));
      sub_1B1C25C94((uint64_t)v7);
      sub_1B1B6AE48();
      swift_allocError();
      *(_OWORD *)v6 = xmmword_1B22AC280;
      *(_BYTE *)(v6 + 16) = 32;
      swift_willThrow();
    }
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v12);
  }
  return result;
}

void sub_1B1FF91B8()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t sub_1B1FF91E4()
{
  uint64_t v0;

  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0(v0 + OBJC_IVAR____TtC3VFX16EnumConstantNode_value);
}

uint64_t sub_1B1FF9204()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease();
  sub_1B1B28F18(*(_QWORD *)(v0 + 24));
  v1 = v0 + OBJC_IVAR____TtC3VFX4Node_authoringID;
  v2 = sub_1B222826C();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0(v0 + OBJC_IVAR____TtC3VFX16EnumConstantNode_value);
  return swift_deallocClassInstance();
}

uint64_t sub_1B1FF9278()
{
  return type metadata accessor for EnumConstantNode(0);
}

uint64_t type metadata accessor for EnumConstantNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF61E70);
}

uint64_t sub_1B1FF9294()
{
  return sub_1B1FF92A0();
}

uint64_t sub_1B1FF92A0()
{
  return swift_updateClassMetadata2();
}

uint64_t sub_1B1FF92D8(_QWORD *a1)
{
  return sub_1B1FF8F58(a1);
}

uint64_t sub_1B1FF92EC(_QWORD *a1)
{
  return sub_1B1FF903C(a1);
}

uint64_t sub_1B1FF9300()
{
  uint64_t v0;
  uint64_t DynamicType;
  uint64_t v2;
  _QWORD v4[5];

  sub_1B19FA198(v0 + OBJC_IVAR____TtC3VFX16EnumConstantNode_value, (uint64_t)v4);
  sub_1B19FA070(v4, v4[3]);
  DynamicType = swift_getDynamicType();
  v2 = v4[4];
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v4);
  (*(void (**)(uint64_t, uint64_t))(v2 + 40))(DynamicType, v2);
  v4[0] = 0x746963696C706D49;
  v4[1] = 0xE800000000000000;
  sub_1B2228890();
  swift_bridgeObjectRelease();
  return v4[0];
}

uint64_t sub_1B1FF93A0()
{
  return type metadata accessor for ImplicitEnumConstantNode(0);
}

uint64_t type metadata accessor for ImplicitEnumConstantNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF61E80);
}

uint64_t sub_1B1FF93BC()
{
  return swift_updateClassMetadata2();
}

uint64_t destroy for AnyValue(unint64_t *a1)
{
  uint64_t v1;

  v1 = (uint64_t)(a1 + 1);
  sub_1B1B28D2C(*a1);
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0(v1);
}

unint64_t *initializeWithCopy for AnyValue(unint64_t *a1, unint64_t *a2)
{
  unint64_t v4;
  unint64_t v5;

  v4 = *a2;
  sub_1B1B632F0(*a2);
  *a1 = v4;
  v5 = a2[4];
  a1[4] = v5;
  (**(void (***)(uint64_t, uint64_t))(v5 - 8))((uint64_t)(a1 + 1), (uint64_t)(a2 + 1));
  return a1;
}

uint64_t assignWithCopy for AnyValue(uint64_t a1, unint64_t *a2)
{
  uint64_t *v3;
  unint64_t v4;
  unint64_t v5;

  v3 = (uint64_t *)(a2 + 1);
  v4 = *a2;
  sub_1B1B632F0(*a2);
  v5 = *(_QWORD *)a1;
  *(_QWORD *)a1 = v4;
  sub_1B1B28D2C(v5);
  sub_1B1B7D784((uint64_t *)(a1 + 8), v3);
  return a1;
}

uint64_t assignWithTake for AnyValue(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = *(_QWORD *)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  sub_1B1B28D2C(v4);
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0(a1 + 8);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  return a1;
}

ValueMetadata *type metadata accessor for AnyValue()
{
  return &type metadata for AnyValue;
}

uint64_t sub_1B1FF9524()
{
  uint64_t v0;

  sub_1B1B28D2C(*(_QWORD *)(v0 + 24));
  return swift_deallocObject();
}

uint64_t sub_1B1FF9548()
{
  uint64_t v0;

  sub_1B1B28D2C(*(_QWORD *)(v0 + 16));
  return swift_deallocObject();
}

uint64_t sub_1B1FF956C()
{
  return swift_deallocObject();
}

unint64_t sub_1B1FF957C()
{
  unint64_t result;

  result = qword_1EEF61E90;
  if (!qword_1EEF61E90)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22AC4EC, &type metadata for AnyValue);
    atomic_store(result, (unint64_t *)&qword_1EEF61E90);
  }
  return result;
}

uint64_t sub_1B1FF95C0(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  __int128 v6;

  v4 = *a1;
  v5 = *(_QWORD *)a2;
  *(_QWORD *)a2 = v4;
  sub_1B1B28D2C(v5);
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0(a2 + 8);
  v6 = *(_OWORD *)(a1 + 1);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 3);
  *(_OWORD *)(a2 + 8) = v6;
  return a2;
}

unint64_t sub_1B1FF960C()
{
  unint64_t result;

  result = qword_1EEF61E98;
  if (!qword_1EEF61E98)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22AC4C4, &type metadata for AnyValue);
    atomic_store(result, (unint64_t *)&qword_1EEF61E98);
  }
  return result;
}

_QWORD *sub_1B1FF9650(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v10[5];

  v10[3] = a3;
  v10[4] = a4;
  v6 = sub_1B1A137F4(v10);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 32))(v6, a1, a3);
  type metadata accessor for EnumConstantNode(0);
  v7 = (_QWORD *)swift_allocObject();
  sub_1B19FA198((uint64_t)v10, (uint64_t)v7 + OBJC_IVAR____TtC3VFX16EnumConstantNode_value);
  v8 = MEMORY[0x1E0DEE9D8];
  v7[3] = 0;
  v7[4] = 0;
  v7[2] = v8;
  sub_1B2228260();
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v10);
  return v7;
}

uint64_t sub_1B1FF96F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v3 = MEMORY[0x1E0DEE9D8];
  if (a2 != a1)
  {
    v6 = a1;
    v12 = MEMORY[0x1E0DEE9D8];
    sub_1B2029FFC(0, (a2 - a1) & ~((a2 - a1) >> 63), 0);
    v3 = v12;
    v7 = a3 + 16 * v6 + 40;
    do
    {
      sub_1B2229430();
      swift_bridgeObjectRelease();
      sub_1B2229A0C();
      sub_1B2228890();
      swift_bridgeObjectRelease();
      sub_1B2228890();
      swift_bridgeObjectRetain();
      sub_1B2228890();
      swift_bridgeObjectRelease();
      sub_1B2228890();
      v9 = *(_QWORD *)(v12 + 16);
      v8 = *(_QWORD *)(v12 + 24);
      if (v9 >= v8 >> 1)
        sub_1B2029FFC(v8 > 1, v9 + 1, 1);
      v7 += 16;
      *(_QWORD *)(v12 + 16) = v9 + 1;
      v10 = v12 + 16 * v9;
      *(_QWORD *)(v10 + 32) = 0x7225206F747561;
      *(_QWORD *)(v10 + 40) = 0xE700000000000000;
      ++v6;
    }
    while (a2 != v6);
  }
  return v3;
}

uint64_t sub_1B1FF9888()
{
  uint64_t v0;
  unint64_t v1;
  void *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 24) + 32);
  if (v1 >> 60 == 1)
  {
    v2 = &unk_1E6379B38;
  }
  else
  {
    if (v1 >> 60 != 2)
    {
      sub_1B1B632F0(v1);
      sub_1B2229430();
      swift_bridgeObjectRelease();
      sub_1B1BCE95C();
      sub_1B2228890();
      swift_bridgeObjectRelease();
      result = sub_1B2229688();
      __break(1u);
      return result;
    }
    v2 = &unk_1E6379AF8;
  }
  v3 = *(_QWORD *)(v0 + OBJC_IVAR____TtC3VFX12_ComposeNode_type);
  if (v3 >> 60 == 1)
  {
    v4 = *(_QWORD *)(v3 + 16);
  }
  else if (v3 >> 60 == 2)
  {
    v4 = 2;
  }
  else
  {
    v4 = 0;
  }
  sub_1B1FF96F4(0, v4, (uint64_t)v2);
  swift_bridgeObjectRelease();
  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BA490, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
  sub_1B19FA230();
  v5 = sub_1B2228644();
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_1B1FF9A2C()
{
  return swift_deallocObject();
}

uint64_t sub_1B1FF9A3C()
{
  return swift_deallocObject();
}

uint64_t sub_1B1FF9A4C()
{
  return swift_deallocObject();
}

uint64_t sub_1B1FF9A5C()
{
  return swift_deallocObject();
}

uint64_t sub_1B1FF9A6C()
{
  return swift_deallocObject();
}

ValueMetadata *type metadata accessor for VFXTag()
{
  return &type metadata for VFXTag;
}

uint64_t sub_1B1FF9A8C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unsigned int *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  os_unfair_lock_s *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  char v24;
  uint64_t v25;
  _QWORD *v26;
  BOOL v27;
  char v28;
  uint64_t v29;
  uint64_t result;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  _QWORD *v43;
  uint64_t v44;
  int v45;
  char v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  _QWORD v50[8];
  _OWORD v51[2];
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;
  _OWORD v61[2];
  uint64_t v62;
  _BYTE v63[40];
  uint64_t v64;
  int v65;
  char v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  char v72;
  uint64_t v73;
  char v74;
  uint64_t v75;

  if (!a2)
  {
    v8 = 0;
    v10 = -1;
    return v10 | (unint64_t)(v8 << 32);
  }
  if (qword_1ED4B7DB8 != -1)
    swift_once();
  v70 = qword_1ED4D09F8;
  v71 = 0;
  v72 = 2;
  v73 = 0;
  v74 = 2;
  v75 = 0;
  swift_retain();
  sub_1B1E410DC(1, (uint64_t)&v44);
  swift_release();
  v64 = v44;
  v65 = v45;
  v66 = v46;
  v67 = v47 | 1;
  v68 = v48;
  v69 = v49;
  sub_1B1E8FCE4(v2, (uint64_t)&v64, 0x200000000, v50);
  sub_1B1A18378((uint64_t)v50, (uint64_t)v51, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (!*(_QWORD *)&v51[0])
  {
    v8 = 0;
    v10 = -1;
    goto LABEL_40;
  }
  v58 = v51[0];
  v59 = v51[1];
  v60 = v52;
  if (v57 < 1 || (v36 = v54) == 0)
  {
    v8 = 0;
    v10 = -1;
    goto LABEL_39;
  }
  v34 = v53;
  v5 = v56;
  v6 = v56[4];
  v42 = *(unsigned __int8 *)(v55 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
  v32 = (uint64_t)(v56 + 6);
  sub_1B1A086DC(v50, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1A086A4);
  v43 = v5;
  v31 = v5 + 8;
  swift_retain();
  swift_retain();
  swift_retain();
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = -1;
  v35 = a1;
  v33 = v6;
  while (1)
  {
    v40 = v7;
    v41 = v8;
    v11 = (unsigned int *)(v34 + 48 * v7);
    v12 = *v11;
    v13 = (uint64_t *)*((_QWORD *)v11 + 2);
    v37 = v11[1];
    v38 = *((_QWORD *)v11 + 3);
    v14 = *((_QWORD *)v11 + 4);
    v15 = *((_QWORD *)v11 + 5);
    v39 = v9;
    if (v42)
    {
      v16 = *(os_unfair_lock_s **)(v15 + 376);
      swift_retain();
      os_unfair_lock_lock(v16);
      os_unfair_lock_lock(*(os_unfair_lock_t *)(v15 + 344));
    }
    else
    {
      swift_retain();
    }
    ecs_stack_allocator_push_snapshot(v6);
    sub_1B1A18378(v32, (uint64_t)v63, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
    v17 = v43[4];
    v18 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v15 + 40) + 16) + 32) + 16) + 1;
    swift_retain();
    v43[6] = ecs_stack_allocator_allocate(v17, 48 * v18, 8);
    v43[7] = v18;
    v31[1] = 0;
    v31[2] = 0;
    *v31 = 0;
    swift_release();
    v19 = sub_1B1A12038((uint64_t)&type metadata for VFXTag, (uint64_t)&off_1E63BD620, v13, v38, v14, (uint64_t)v43);
    if (v13)
    {
      v8 = v41;
      if (v14)
      {
        v20 = (_QWORD *)(v19 + 8);
        while (1)
        {
          v22 = *v13++;
          v21 = v22;
          v23 = *(v20 - 1) == v35 && *v20 == a2;
          if (v23 || (sub_1B2229D24() & 1) != 0)
          {
            v24 = *(_BYTE *)(v15 + 184);
            v25 = swift_retain();
            if ((v24 & 1) != 0)
              goto LABEL_42;
            v10 = *(_DWORD *)(*(_QWORD *)(v15 + 168) + 4 * v21);
            v8 = *(unsigned int *)(*(_QWORD *)(v25 + OBJC_IVAR____TtC3VFX13EntityManager__entries) + 12 * v10 + 8);
            swift_release();
          }
          v20 += 2;
          if (!--v14)
            goto LABEL_24;
        }
      }
      goto LABEL_24;
    }
    v8 = v41;
    if ((_DWORD)v12 != (_DWORD)v37)
      break;
LABEL_24:
    v61[0] = v58;
    v61[1] = v59;
    v62 = v60;
    v9 = v39;
    sub_1B1F05D48(v43, (unsigned __int16 **)v61, (uint64_t)v63);
    sub_1B1F03804((char *)v15);
    v6 = v33;
    ecs_stack_allocator_pop_snapshot(v33);
    if ((v42 & 1) != 0)
    {
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v15 + 344));
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v15 + 376));
    }
    swift_release();
    v7 = v40 + 1;
    if (v40 + 1 == v36)
    {
      sub_1B1A086DC(v50, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
      sub_1B1A086DC(v50, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
LABEL_39:
      sub_1B1A086DC(v50, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
LABEL_40:
      sub_1B19ED720((uint64_t)&v44);
      return v10 | (unint64_t)(v8 << 32);
    }
  }
  v26 = (_QWORD *)(v19 + 16 * v12 + 8);
  while (1)
  {
    v27 = *(v26 - 1) == v35 && *v26 == a2;
    if (!v27 && (sub_1B2229D24() & 1) == 0)
      goto LABEL_27;
    v28 = *(_BYTE *)(v15 + 184);
    v29 = swift_retain();
    if ((v28 & 1) != 0)
      break;
    v10 = *(_DWORD *)(*(_QWORD *)(v15 + 168) + 4 * v12);
    v8 = *(unsigned int *)(*(_QWORD *)(v29 + OBJC_IVAR____TtC3VFX13EntityManager__entries) + 12 * v10 + 8);
    swift_release();
LABEL_27:
    ++v12;
    v26 += 2;
    if (v37 == v12)
      goto LABEL_24;
  }
LABEL_42:
  result = sub_1B2229688();
  __break(1u);
  return result;
}

_QWORD *sub_1B1FF9F9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *result;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;

  if (off_1ED4B84E0)
  {
    swift_retain();
    v12 = MEMORY[0x1B5E20388](a1, a2, a3, a4);
    v14 = sub_1B1A0608C(v12, v13, 0, 1);
    swift_release();
    swift_bridgeObjectRelease();
    if (v14)
    {
      v15 = swift_conformsToProtocol2();
      v16 = v15 ? v15 : 0;
      v17 = v15 ? v14 : 0;
      if (v17)
        return sub_1B1FFB880(v17, v16, a5, a6);
    }
    v19 = sub_1B1FFB718(a5, a6);
    if (v19 >> 62)
    {
      v20 = sub_1B22296AC();
      if (v20)
      {
LABEL_13:
        v21 = 0;
        while (1)
        {
          if ((v19 & 0xC000000000000001) != 0)
          {
            v22 = MEMORY[0x1B5E21018](v21, v19);
          }
          else
          {
            v22 = *(_QWORD *)(v19 + 8 * v21 + 32);
            swift_retain();
          }
          v23 = *(_QWORD *)(v22 + 32);
          v24 = swift_conformsToProtocol2();
          v25 = v24 ? v24 : 0;
          if (v24 ? v23 : 0)
          {
            (*(void (**)(void))(v25 + 16))();
            sub_1B1A06504();
            sub_1B1A06460();
            v27 = sub_1B2229238();
            swift_bridgeObjectRelease();
            if (!v27)
              break;
          }
          ++v21;
          swift_release();
          if (v20 == v21)
            goto LABEL_28;
        }
        swift_bridgeObjectRelease();
        return (_QWORD *)v22;
      }
    }
    else
    {
      v20 = *(_QWORD *)((v19 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v20)
        goto LABEL_13;
    }
LABEL_28:
    swift_bridgeObjectRelease();
    return 0;
  }
  result = (_QWORD *)sub_1B2229688();
  __break(1u);
  return result;
}

uint64_t sub_1B1FFA224@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;

  result = sub_1B1FFBF78(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }
  return result;
}

void sub_1B1FFA24C(uint64_t *a1@<X8>)
{
  id v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB3A28]), sel_init);
  v3 = objc_msgSend(v2, sel_UUIDString);

  v4 = sub_1B222874C();
  v6 = v5;

  *a1 = v4;
  a1[1] = v6;
}

_QWORD *sub_1B1FFA2C0(_QWORD *result, uint64_t *a2, unint64_t a3)
{
  _QWORD *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD v14[2];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  _UNKNOWN **v20;
  char v21;

  v4 = result;
  v5 = HIDWORD(a3);
  v7 = *a2;
  v6 = a2[1];
  if (a3 != 0xFFFFFFFF)
  {
    v8 = *result;
    swift_unownedRetainStrong();
    v9 = sub_1B1FD568C((uint64_t)&type metadata for VFXTag, (uint64_t)&off_1E63BD650, a3);
    swift_bridgeObjectRetain();
    swift_release();
    swift_unownedRetainStrong();
    sub_1B1BF7B10(v7, v6, a3);
    swift_release();
    swift_unownedRetainStrong();
    swift_release();
    if (swift_unknownObjectUnownedLoadStrong())
      swift_unknownObjectRelease();
    if (*((_BYTE *)v4 + 24) == 1)
    {
      swift_unownedRetainStrong();
      v14[0] = a3;
      v14[1] = v5;
      v15 = v8;
      sub_1B1FFC074(0, v10, v11, v12);
      v19 = v13;
      v20 = &off_1E6383838;
      v16 = v7;
      v17 = v6;
      v18 = !v9;
      v21 = 12;
      swift_bridgeObjectRetain();
      sub_1B1E2DB30((uint64_t)v14);
      swift_release();
      sub_1B1ADF058((uint64_t)v14);
    }
    return (_QWORD *)swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1B1FFA410@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v30 = a2;
  sub_1B19F8E54(0, &qword_1ED4BAB20, (uint64_t (*)(void))sub_1B1C78FEC, (uint64_t)&type metadata for StringCodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v6);
  v8 = (char *)&v28 - v7;
  v9 = sub_1B222826C();
  v31 = *(_QWORD *)(v9 - 8);
  v32 = v9;
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v28 - v15;
  v17 = type metadata accessor for VFXObjectTag();
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)&v28 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1B2228260();
  v21 = a1[3];
  v22 = a1[4];
  sub_1B19FA070(a1, v21);
  if (sub_1B2067BAC(2000, v21, v22))
  {
    sub_1B19FA070(a1, a1[3]);
    v23 = v37;
    sub_1B222A138();
    if (!v23)
    {
      sub_1B19FA070(&v33, v36);
      sub_1B1FFC5F0(&qword_1ED4B7B48, MEMORY[0x1E0CB09E0]);
      v24 = v32;
      sub_1B2229D6C();
      (*(void (**)(char *, char *, uint64_t))(v31 + 40))(v20, v16, v24);
      _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v33);
LABEL_6:
      sub_1B1FFC5AC((uint64_t)v20, v30);
    }
  }
  else
  {
    v29 = v5;
    sub_1B19FA070(a1, a1[3]);
    sub_1B1C78FEC();
    v25 = v37;
    sub_1B222A150();
    if (!v25)
    {
      v33 = 0;
      v34 = 1;
      v35 = 6580597;
      v36 = 0xE300000000000000;
      sub_1B1FFC5F0(&qword_1ED4B7B48, MEMORY[0x1E0CB09E0]);
      v26 = v32;
      sub_1B2229814();
      (*(void (**)(char *, uint64_t))(v29 + 8))(v8, v4);
      (*(void (**)(char *, char *, uint64_t))(v31 + 40))(v20, v12, v26);
      goto LABEL_6;
    }
  }
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  return sub_1B1FFC570((uint64_t)v20);
}

uint64_t sub_1B1FFA72C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1B1FFA410(a1, a2);
}

uint64_t sub_1B1FFA740(_QWORD *a1)
{
  _BYTE v2[24];
  uint64_t v3;

  sub_1B19FA070(a1, a1[3]);
  sub_1B222A168();
  sub_1B19FC264((uint64_t)v2, v3);
  sub_1B222826C();
  sub_1B1FFC5F0(&qword_1EEF5C600, MEMORY[0x1E0CB09B8]);
  sub_1B2229DF0();
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v2);
}

uint64_t sub_1B1FFA7F8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t ObjectType;
  uint64_t result;
  uint64_t v11;

  v4 = sub_1B222826C();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  ObjectType = swift_getObjectType();
  result = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 32))(ObjectType, a2);
  if ((result & 1) != 0)
  {
    (*(void (**)(uint64_t, uint64_t, unint64_t, uint64_t (*)(), _QWORD, uint64_t, uint64_t))(a2 + 24))(v2, 0x63656A624F584656, 0xEC00000067615474, sub_1B1FFA40C, 0, ObjectType, a2);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v5 + 40))(v2, v8, v4);
  }
  return result;
}

uint64_t sub_1B1FFA8E0()
{
  sub_1B1FFC630();
  return sub_1B222A1D4();
}

uint64_t sub_1B1FFA908()
{
  sub_1B1FFC630();
  return sub_1B222A1E0();
}

uint64_t sub_1B1FFA930(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1B1B73338(a1, a2, a3, &qword_1EEF61EF8, (uint64_t (*)(void))sub_1B1FFC630, (uint64_t)&type metadata for VFXAssetTag.CodingKeys);
}

uint64_t sub_1B1FFA95C()
{
  sub_1B1FFC52C();
  return sub_1B222A1D4();
}

uint64_t sub_1B1FFA984()
{
  sub_1B1FFC52C();
  return sub_1B222A1E0();
}

uint64_t sub_1B1FFA9AC(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1B1B73338(a1, a2, a3, &qword_1EEF61EE8, (uint64_t (*)(void))sub_1B1FFC52C, (uint64_t)&type metadata for VFXBridgeTag.CodingKeys);
}

uint64_t sub_1B1FFA9D8(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  _QWORD v11[2];

  sub_1B19F8E54(0, &qword_1EEF61EE0, (uint64_t (*)(void))sub_1B1FFC4E8, (uint64_t)&type metadata for VFXParentAsset.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v7);
  v9 = (char *)v11 - v8;
  sub_1B19FA070(a1, a1[3]);
  sub_1B1FFC4E8();
  sub_1B222A180();
  v11[1] = a2;
  sub_1B1A0895C();
  sub_1B2229958();
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
}

uint64_t sub_1B1FFAAEC()
{
  return 0x797469746E65;
}

uint64_t sub_1B1FFAB00@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x797469746E65 && a2 == 0xE600000000000000)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_1B2229D24();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_1B1FFAB8C()
{
  sub_1B1FFC4E8();
  return sub_1B222A1D4();
}

uint64_t sub_1B1FFABB4()
{
  sub_1B1FFC4E8();
  return sub_1B222A1E0();
}

_QWORD *sub_1B1FFABDC@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;

  result = sub_1B1FFBC0C(a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t sub_1B1FFAC04(_QWORD *a1)
{
  uint64_t *v1;

  return sub_1B1FFA9D8(a1, *v1);
}

uint64_t sub_1B1FFAC1C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t ObjectType;
  uint64_t (*v5)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  int32x2_t v12;
  int32x2_t v13;
  int32x2_t v14;

  ObjectType = swift_getObjectType();
  v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a2 + 8);
  v5(v2, 0, ObjectType, a2);
  result = v5(v2 + 8, 1, ObjectType, a2);
  v7 = *(_QWORD *)(v2 + 16);
  v8 = *(_QWORD *)(v7 + 16);
  if (v8)
  {
    swift_bridgeObjectRetain();
    v9 = (char *)v7;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v9 = sub_1B1FFEDA4(v7);
    v10 = -v8;
    v11 = 4;
    do
    {
      v14 = *(int32x2_t *)(v7 + 8 * v11);
      v12 = v14;
      v5((uint64_t)&v14, 1, ObjectType, a2);
      v13 = vceq_s32(v14, v12);
      if ((v13.i32[0] & v13.i32[1] & 1) == 0)
        *(int32x2_t *)&v9[8 * v11] = v14;
      ++v11;
    }
    while (v10 + v11 != 4);
    result = swift_bridgeObjectRelease();
    *(_QWORD *)(v2 + 16) = v9;
  }
  return result;
}

uint64_t sub_1B1FFAD38(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;

  v16 = a4;
  v17 = a3;
  sub_1B19F8E54(0, &qword_1EEF61F40, (uint64_t (*)(void))sub_1B1FFC6FC, (uint64_t)&type metadata for Prefab.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v8 = v7;
  v9 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v10);
  v12 = (char *)&v15 - v11;
  sub_1B19FA070(a1, a1[3]);
  sub_1B1FFC6FC();
  sub_1B222A180();
  v19 = a2;
  v18 = 0;
  sub_1B1A0895C();
  sub_1B2229958();
  if (!v4)
  {
    v13 = v16;
    v19 = v17;
    v18 = 1;
    sub_1B2229958();
    v19 = v13;
    v18 = 2;
    sub_1B1A02758(0, &qword_1ED4BA460, (uint64_t)&type metadata for Entity, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    sub_1B1CDAFC0((unint64_t *)&unk_1EEF63400, (uint64_t (*)(void))sub_1B1A0895C, MEMORY[0x1E0DEAF10]);
    sub_1B2229958();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v12, v8);
}

uint64_t sub_1B1FFAF10(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1B1F99430(*a1, *a2);
}

uint64_t sub_1B1FFAF1C()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 1953460082;
  if (*v0 != 1)
    v1 = 0x6C6576654C706F74;
  if (*v0)
    return v1;
  else
    return 0x656372756F73;
}

uint64_t sub_1B1FFAF78@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1B1FFB924(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1B1FFAF9C()
{
  sub_1B1FFC6FC();
  return sub_1B222A1D4();
}

uint64_t sub_1B1FFAFC4()
{
  sub_1B1FFC6FC();
  return sub_1B222A1E0();
}

uint64_t sub_1B1FFAFEC@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  result = sub_1B1FFBD5C(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
  }
  return result;
}

uint64_t sub_1B1FFB024(_QWORD *a1)
{
  uint64_t *v1;

  return sub_1B1FFAD38(a1, *v1, v1[1], v1[2]);
}

__n128 sub_1B1FFB044@<Q0>(__n128 *a1@<X8>)
{
  __n128 result;

  result.n128_u64[0] = 0xFFFFFFFFLL;
  result.n128_u64[1] = 0xFFFFFFFFLL;
  *a1 = result;
  a1[1].n128_u64[0] = MEMORY[0x1E0DEE9D8];
  return result;
}

uint64_t sub_1B1FFB05C(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  _QWORD v11[2];

  sub_1B19F8E54(0, &qword_1EEF61EC8, (uint64_t (*)(void))sub_1B1FFC4A4, (uint64_t)&type metadata for EmbeddedAssets.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v7);
  v9 = (char *)v11 - v8;
  sub_1B19FA070(a1, a1[3]);
  sub_1B1FFC4A4();
  sub_1B222A180();
  v11[1] = a2;
  sub_1B1A02758(0, &qword_1ED4BA460, (uint64_t)&type metadata for Entity, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
  sub_1B1CDAFC0((unint64_t *)&unk_1EEF63400, (uint64_t (*)(void))sub_1B1A0895C, MEMORY[0x1E0DEAF10]);
  sub_1B2229958();
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
}

uint64_t sub_1B1FFB1A8()
{
  return 0x7365697469746E65;
}

uint64_t sub_1B1FFB1C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x7365697469746E65 && a2 == 0xE800000000000000)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_1B2229D24();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_1B1FFB254()
{
  sub_1B1FFC4A4();
  return sub_1B222A1D4();
}

uint64_t sub_1B1FFB27C()
{
  sub_1B1FFC4A4();
  return sub_1B222A1E0();
}

_QWORD *sub_1B1FFB2A4@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;

  result = sub_1B1FFBA84(a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t sub_1B1FFB2CC(_QWORD *a1)
{
  uint64_t *v1;

  return sub_1B1FFB05C(a1, *v1);
}

uint64_t sub_1B1FFB2E4()
{
  sub_1B1FFC460();
  return sub_1B222A1D4();
}

uint64_t sub_1B1FFB30C()
{
  sub_1B1FFC460();
  return sub_1B222A1E0();
}

uint64_t sub_1B1FFB334(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1B1B73338(a1, a2, a3, &qword_1EEF61EA8, (uint64_t (*)(void))sub_1B1FFC460, (uint64_t)&type metadata for DoNotSave.CodingKeys);
}

uint64_t sub_1B1FFB360()
{
  sub_1B1FFC674();
  return sub_1B222A1D4();
}

uint64_t sub_1B1FFB388()
{
  sub_1B1FFC674();
  return sub_1B222A1E0();
}

uint64_t sub_1B1FFB3B0(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1B1B73338(a1, a2, a3, &qword_1EEF61F08, (uint64_t (*)(void))sub_1B1FFC674, (uint64_t)&type metadata for DoNotExport.CodingKeys);
}

uint64_t sub_1B1FFB3DC()
{
  return 0x726564726FLL;
}

uint64_t sub_1B1FFB3F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x726564726FLL && a2 == 0xE500000000000000)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_1B2229D24();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_1B1FFB47C()
{
  sub_1B1FFC6B8();
  return sub_1B222A1D4();
}

uint64_t sub_1B1FFB4A4()
{
  sub_1B1FFC6B8();
  return sub_1B222A1E0();
}

uint64_t sub_1B1FFB4CC@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t *v14;

  v14 = a2;
  sub_1B19F8E54(0, &qword_1EEF61F18, (uint64_t (*)(void))sub_1B1FFC6B8, (uint64_t)&type metadata for Scheduling.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v7);
  v9 = (char *)&v13 - v8;
  sub_1B19FA070(a1, a1[3]);
  sub_1B1FFC6B8();
  sub_1B222A150();
  if (v2)
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  v10 = v14;
  v11 = sub_1B22297FC();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  result = _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  *v10 = v11;
  return result;
}

uint64_t sub_1B1FFB60C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v9;

  sub_1B19F8E54(0, &qword_1EEF61F28, (uint64_t (*)(void))sub_1B1FFC6B8, (uint64_t)&type metadata for Scheduling.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v3 = v2;
  v4 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v5);
  v7 = (char *)&v9 - v6;
  sub_1B19FA070(a1, a1[3]);
  sub_1B1FFC6B8();
  sub_1B222A180();
  sub_1B2229940();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v3);
}

void sub_1B1FFB70C(_QWORD *a1@<X8>)
{
  *a1 = 1000;
}

uint64_t sub_1B1FFB718(unint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v12;

  swift_retain();
  v4 = sub_1B1FE162C(a1);
  swift_release();
  v5 = *(_QWORD *)(v4 + 16);
  if (v5)
  {
    v12 = MEMORY[0x1E0DEE9D8];
    sub_1B2229550();
    type metadata accessor for VFXAttribute();
    v6 = v4 + 40;
    do
    {
      v7 = *(_QWORD *)(v6 - 8);
      v8 = *(_QWORD *)(*(_QWORD *)v6 + 8);
      v9 = (_QWORD *)swift_allocObject();
      v9[2] = a2;
      swift_retain();
      swift_unownedRetain();
      swift_release();
      v9[3] = a1;
      v9[4] = v7;
      v9[5] = v8;
      sub_1B2229520();
      sub_1B2229568();
      sub_1B2229574();
      sub_1B2229538();
      v6 += 16;
      --v5;
    }
    while (v5);
    v10 = v12;
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x1E0DEE9D8];
  }
  return v10;
}

_QWORD *sub_1B1FFB850(uint64_t a1, _QWORD *a2, unint64_t a3)
{
  return sub_1B1E32EA4(a2, a3);
}

_QWORD *sub_1B1FFB880(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  BOOL v8;
  _QWORD *v9;

  v7 = *(_QWORD *)(a2 + 8);
  swift_retain();
  v8 = sub_1B1FD568C(a1, v7, a3);
  swift_release();
  if (!v8)
    return 0;
  type metadata accessor for VFXAttribute();
  v9 = (_QWORD *)swift_allocObject();
  v9[2] = a4;
  swift_retain();
  swift_unownedRetain();
  swift_release();
  v9[3] = a3;
  v9[4] = a1;
  v9[5] = v7;
  return v9;
}

uint64_t sub_1B1FFB924(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x656372756F73 && a2 == 0xE600000000000000;
  if (v2 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1953460082 && a2 == 0xE400000000000000 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6C6576654C706F74 && a2 == 0xEF737463656A624FLL)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = sub_1B2229D24();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

_QWORD *sub_1B1FFBA84(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD v12[2];

  sub_1B19F8E54(0, &qword_1EEF61EB8, (uint64_t (*)(void))sub_1B1FFC4A4, (uint64_t)&type metadata for EmbeddedAssets.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v6);
  v8 = (char *)v12 - v7;
  v9 = sub_1B19FA070(a1, a1[3]);
  sub_1B1FFC4A4();
  v10 = v9;
  sub_1B222A150();
  if (!v1)
  {
    sub_1B1A02758(0, &qword_1ED4BA460, (uint64_t)&type metadata for Entity, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    sub_1B1CDAFC0((unint64_t *)&unk_1ED4BA470, (uint64_t (*)(void))sub_1B1A08878, MEMORY[0x1E0DEAF40]);
    sub_1B2229814();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    v10 = (_QWORD *)v12[1];
  }
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  return v10;
}

_QWORD *sub_1B1FFBC0C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD v12[2];

  sub_1B19F8E54(0, &qword_1EEF61ED0, (uint64_t (*)(void))sub_1B1FFC4E8, (uint64_t)&type metadata for VFXParentAsset.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v6);
  v8 = (char *)v12 - v7;
  v9 = sub_1B19FA070(a1, a1[3]);
  sub_1B1FFC4E8();
  v10 = v9;
  sub_1B222A150();
  if (!v1)
  {
    sub_1B1A08878();
    sub_1B2229814();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    v10 = (_QWORD *)v12[1];
  }
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  return v10;
}

uint64_t sub_1B1FFBD5C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v11;
  char v12;
  uint64_t v13;

  sub_1B19F8E54(0, &qword_1EEF61F30, (uint64_t (*)(void))sub_1B1FFC6FC, (uint64_t)&type metadata for Prefab.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v6);
  v8 = (char *)&v11 - v7;
  v9 = a1[3];
  sub_1B19FA070(a1, v9);
  sub_1B1FFC6FC();
  sub_1B222A150();
  if (!v1)
  {
    v12 = 0;
    sub_1B1A08878();
    sub_1B2229814();
    v9 = v13;
    v12 = 1;
    sub_1B2229814();
    sub_1B1A02758(0, &qword_1ED4BA460, (uint64_t)&type metadata for Entity, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    v12 = 2;
    sub_1B1CDAFC0((unint64_t *)&unk_1ED4BA470, (uint64_t (*)(void))sub_1B1A08878, MEMORY[0x1E0DEAF40]);
    sub_1B2229814();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  }
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  return v9;
}

uint64_t sub_1B1FFBF78(_QWORD *a1)
{
  uint64_t v1;
  id v3;
  uint64_t v4;
  _QWORD v6[4];

  v3 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB3A28]), sel_init);

  v4 = (uint64_t)sub_1B19FA070(a1, a1[3]);
  sub_1B222A138();
  if (v1)
  {
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  }
  else
  {
    sub_1B19FA070(v6, v6[3]);
    v4 = sub_1B2229D30();
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v6);
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  }
  return v4;
}

void sub_1B1FFC074(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;

  if (!qword_1EEF61568)
  {
    v4 = type metadata accessor for ComponentWriter(0, (uint64_t)&type metadata for VFXTag, (uint64_t)&off_1E63BD620, a4);
    if (!v5)
      atomic_store(v4, (unint64_t *)&qword_1EEF61568);
  }
}

ValueMetadata *type metadata accessor for DoNotSave()
{
  return &type metadata for DoNotSave;
}

ValueMetadata *type metadata accessor for EmbeddedAssets()
{
  return &type metadata for EmbeddedAssets;
}

ValueMetadata *type metadata accessor for VFXParentAsset()
{
  return &type metadata for VFXParentAsset;
}

ValueMetadata *type metadata accessor for VFXBridgeTag()
{
  return &type metadata for VFXBridgeTag;
}

uint64_t sub_1B1FFC110(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1B222826C();
  return (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8))(a1, a2, v4);
}

uint64_t sub_1B1FFC14C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1B222826C();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t sub_1B1FFC180(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1B222826C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t sub_1B1FFC1C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1B222826C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t sub_1B1FFC208(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1B222826C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t sub_1B1FFC24C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1B222826C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t sub_1B1FFC290()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1B1FFC29C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1B222826C();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_1B1FFC2D8()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1B1FFC2E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1B222826C();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata accessor for VFXObjectTag()
{
  uint64_t result;

  result = qword_1ED4B7768;
  if (!qword_1ED4B7768)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_1B1FFC360()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1B222826C();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for VFXAssetTag()
{
  return &type metadata for VFXAssetTag;
}

ValueMetadata *type metadata accessor for DoNotExport()
{
  return &type metadata for DoNotExport;
}

ValueMetadata *type metadata accessor for Scheduling()
{
  return &type metadata for Scheduling;
}

uint64_t assignWithCopy for Prefab(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for Prefab()
{
  return &type metadata for Prefab;
}

unint64_t sub_1B1FFC460()
{
  unint64_t result;

  result = qword_1EEF61EB0;
  if (!qword_1EEF61EB0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22AD1C8, &type metadata for DoNotSave.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF61EB0);
  }
  return result;
}

unint64_t sub_1B1FFC4A4()
{
  unint64_t result;

  result = qword_1EEF61EC0;
  if (!qword_1EEF61EC0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22AD178, &type metadata for EmbeddedAssets.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF61EC0);
  }
  return result;
}

unint64_t sub_1B1FFC4E8()
{
  unint64_t result;

  result = qword_1EEF61ED8;
  if (!qword_1EEF61ED8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22AD128, &type metadata for VFXParentAsset.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF61ED8);
  }
  return result;
}

unint64_t sub_1B1FFC52C()
{
  unint64_t result;

  result = qword_1EEF61EF0;
  if (!qword_1EEF61EF0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22AD0D8, &type metadata for VFXBridgeTag.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF61EF0);
  }
  return result;
}

uint64_t sub_1B1FFC570(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for VFXObjectTag();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1B1FFC5AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for VFXObjectTag();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1B1FFC5F0(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = sub_1B222826C();
    result = MEMORY[0x1B5E23E74](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1B1FFC630()
{
  unint64_t result;

  result = qword_1EEF61F00;
  if (!qword_1EEF61F00)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22AD088, &type metadata for VFXAssetTag.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF61F00);
  }
  return result;
}

unint64_t sub_1B1FFC674()
{
  unint64_t result;

  result = qword_1EEF61F10;
  if (!qword_1EEF61F10)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22AD038, &type metadata for DoNotExport.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF61F10);
  }
  return result;
}

unint64_t sub_1B1FFC6B8()
{
  unint64_t result;

  result = qword_1EEF61F20;
  if (!qword_1EEF61F20)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22ACFE8, &type metadata for Scheduling.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF61F20);
  }
  return result;
}

unint64_t sub_1B1FFC6FC()
{
  unint64_t result;

  result = qword_1EEF61F38;
  if (!qword_1EEF61F38)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22ACF98, &type metadata for Prefab.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF61F38);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for Prefab.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1B1FFC78C + 4 * byte_1B22AC5E9[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1B1FFC7C0 + 4 * byte_1B22AC5E4[v4]))();
}

uint64_t sub_1B1FFC7C0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1FFC7C8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B1FFC7D0);
  return result;
}

uint64_t sub_1B1FFC7DC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B1FFC7E4);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1B1FFC7E8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1FFC7F0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Prefab.CodingKeys()
{
  return &type metadata for Prefab.CodingKeys;
}

ValueMetadata *type metadata accessor for Scheduling.CodingKeys()
{
  return &type metadata for Scheduling.CodingKeys;
}

ValueMetadata *type metadata accessor for DoNotExport.CodingKeys()
{
  return &type metadata for DoNotExport.CodingKeys;
}

ValueMetadata *type metadata accessor for VFXAssetTag.CodingKeys()
{
  return &type metadata for VFXAssetTag.CodingKeys;
}

ValueMetadata *type metadata accessor for VFXBridgeTag.CodingKeys()
{
  return &type metadata for VFXBridgeTag.CodingKeys;
}

ValueMetadata *type metadata accessor for VFXParentAsset.CodingKeys()
{
  return &type metadata for VFXParentAsset.CodingKeys;
}

uint64_t _s3VFX10SchedulingV10CodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1B1FFC8A0 + 4 * byte_1B22AC5EE[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1B1FFC8C0 + 4 * byte_1B22AC5F3[v4]))();
}

_BYTE *sub_1B1FFC8A0(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1B1FFC8C0(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1B1FFC8C8(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1B1FFC8D0(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1B1FFC8D8(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1B1FFC8E0(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for EmbeddedAssets.CodingKeys()
{
  return &type metadata for EmbeddedAssets.CodingKeys;
}

ValueMetadata *type metadata accessor for DoNotSave.CodingKeys()
{
  return &type metadata for DoNotSave.CodingKeys;
}

unint64_t sub_1B1FFC910()
{
  unint64_t result;

  result = qword_1EEF61F48;
  if (!qword_1EEF61F48)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22ACC58, &type metadata for EmbeddedAssets.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF61F48);
  }
  return result;
}

unint64_t sub_1B1FFC958()
{
  unint64_t result;

  result = qword_1EEF61F50;
  if (!qword_1EEF61F50)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22ACD10, &type metadata for VFXParentAsset.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF61F50);
  }
  return result;
}

unint64_t sub_1B1FFC9A0()
{
  unint64_t result;

  result = qword_1EEF61F58;
  if (!qword_1EEF61F58)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22ACEB8, &type metadata for Scheduling.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF61F58);
  }
  return result;
}

unint64_t sub_1B1FFC9E8()
{
  unint64_t result;

  result = qword_1EEF61F60;
  if (!qword_1EEF61F60)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22ACF70, &type metadata for Prefab.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF61F60);
  }
  return result;
}

unint64_t sub_1B1FFCA30()
{
  unint64_t result;

  result = qword_1EEF61F68;
  if (!qword_1EEF61F68)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22ACEE0, &type metadata for Prefab.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF61F68);
  }
  return result;
}

unint64_t sub_1B1FFCA78()
{
  unint64_t result;

  result = qword_1EEF61F70;
  if (!qword_1EEF61F70)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22ACF08, &type metadata for Prefab.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF61F70);
  }
  return result;
}

unint64_t sub_1B1FFCAC0()
{
  unint64_t result;

  result = qword_1EEF61F78;
  if (!qword_1EEF61F78)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22ACE28, &type metadata for Scheduling.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF61F78);
  }
  return result;
}

unint64_t sub_1B1FFCB08()
{
  unint64_t result;

  result = qword_1EEF61F80;
  if (!qword_1EEF61F80)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22ACE50, &type metadata for Scheduling.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF61F80);
  }
  return result;
}

unint64_t sub_1B1FFCB50()
{
  unint64_t result;

  result = qword_1EEF61F88;
  if (!qword_1EEF61F88)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22ACDD8, &type metadata for DoNotExport.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF61F88);
  }
  return result;
}

unint64_t sub_1B1FFCB98()
{
  unint64_t result;

  result = qword_1EEF61F90;
  if (!qword_1EEF61F90)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22ACE00, &type metadata for DoNotExport.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF61F90);
  }
  return result;
}

unint64_t sub_1B1FFCBE0()
{
  unint64_t result;

  result = qword_1EEF61F98;
  if (!qword_1EEF61F98)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22ACD88, &type metadata for VFXAssetTag.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF61F98);
  }
  return result;
}

unint64_t sub_1B1FFCC28()
{
  unint64_t result;

  result = qword_1EEF61FA0;
  if (!qword_1EEF61FA0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22ACDB0, &type metadata for VFXAssetTag.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF61FA0);
  }
  return result;
}

unint64_t sub_1B1FFCC70()
{
  unint64_t result;

  result = qword_1EEF61FA8;
  if (!qword_1EEF61FA8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22ACD38, &type metadata for VFXBridgeTag.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF61FA8);
  }
  return result;
}

unint64_t sub_1B1FFCCB8()
{
  unint64_t result;

  result = qword_1EEF61FB0;
  if (!qword_1EEF61FB0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22ACD60, &type metadata for VFXBridgeTag.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF61FB0);
  }
  return result;
}

unint64_t sub_1B1FFCD00()
{
  unint64_t result;

  result = qword_1EEF61FB8;
  if (!qword_1EEF61FB8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22ACC80, &type metadata for VFXParentAsset.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF61FB8);
  }
  return result;
}

unint64_t sub_1B1FFCD48()
{
  unint64_t result;

  result = qword_1EEF61FC0;
  if (!qword_1EEF61FC0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22ACCA8, &type metadata for VFXParentAsset.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF61FC0);
  }
  return result;
}

unint64_t sub_1B1FFCD90()
{
  unint64_t result;

  result = qword_1EEF61FC8;
  if (!qword_1EEF61FC8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22ACBC8, &type metadata for EmbeddedAssets.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF61FC8);
  }
  return result;
}

unint64_t sub_1B1FFCDD8()
{
  unint64_t result;

  result = qword_1EEF61FD0;
  if (!qword_1EEF61FD0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22ACBF0, &type metadata for EmbeddedAssets.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF61FD0);
  }
  return result;
}

unint64_t sub_1B1FFCE20()
{
  unint64_t result;

  result = qword_1EEF61FD8;
  if (!qword_1EEF61FD8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22ACB78, &type metadata for DoNotSave.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF61FD8);
  }
  return result;
}

unint64_t sub_1B1FFCE68()
{
  unint64_t result;

  result = qword_1EEF61FE0;
  if (!qword_1EEF61FE0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22ACBA0, &type metadata for DoNotSave.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF61FE0);
  }
  return result;
}

void sub_1B1FFCEAC(float a1)
{
  uint64_t v1;
  unint64_t v2;
  char *v3;
  uint64_t v4;
  float32x4_t *v5;
  uint64_t v6;
  float32x4_t v7;
  unint64_t v8;
  float *v9;

  v2 = *(_QWORD *)(*(_QWORD *)(v1 + 8) + 16);
  if (v2)
  {
    v3 = *(char **)v1;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v3 = sub_1B1FFEEAC((uint64_t)v3);
    if (v2 >= 8)
    {
      v4 = v2 & 0x7FFFFFFFFFFFFFF8;
      v5 = (float32x4_t *)(v3 + 48);
      v6 = v2 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v7 = vmulq_n_f32(*v5, a1);
        v5[-1] = vmulq_n_f32(v5[-1], a1);
        *v5 = v7;
        v5 += 2;
        v6 -= 8;
      }
      while (v6);
      if (v2 == v4)
        goto LABEL_11;
    }
    else
    {
      v4 = 0;
    }
    v8 = v2 - v4;
    v9 = (float *)&v3[4 * v4 + 32];
    do
    {
      *v9 = *v9 * a1;
      ++v9;
      --v8;
    }
    while (v8);
LABEL_11:
    *(_QWORD *)v1 = v3;
  }
}

void sub_1B1FFCF6C(uint64_t a1, uint64_t a2, uint64_t a3, char a4, float a5)
{
  uint64_t v5;
  uint64_t v6;
  float v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  float v14;
  float v15;
  float v16;
  uint64_t v17;
  float32x2_t v18;
  float32x2_t v19;
  float32x2_t v20;
  uint64_t v27;

  v5 = *(_QWORD *)(a2 + 16);
  v6 = v5 - 1;
  if (v5 == 1 || !v5)
    return;
  v8 = fminf(fmaxf(a5, 0.0), 1.0);
  if (a5 == 0.0)
  {
    v9 = 1;
  }
  else
  {
    v9 = 0;
    v10 = *(_QWORD *)(a2 + 16);
    do
    {
      v11 = v10 >> 1;
      v12 = v9 + (v10 >> 1);
      v10 += ~(v10 >> 1);
      if (v8 >= *(float *)(a2 + 32 + 4 * v12))
        v9 = v12 + 1;
      else
        v10 = v11;
    }
    while ((uint64_t)v10 > 0);
    if (v9 >= v5)
      return;
  }
  v13 = v9 - 1;
  if (a3)
    a4 = *(_BYTE *)(a3 + 24 * v13 + 49);
  LOBYTE(v5) = v5 != 2;
  v14 = *(float *)(a2 + 32 + 4 * v13);
  if (a4 != 1)
    LOBYTE(v5) = a4;
  v15 = *(float *)(a2 + 32 + 4 * v9) - v14;
  v16 = 0.0;
  if (v15 == 0.0)
  {
    LODWORD(v5) = v5;
    if (!(_BYTE)v5)
      return;
  }
  else
  {
    v16 = (float)(v8 - v14) / v15;
    LODWORD(v5) = v5;
    if (!(_BYTE)v5)
      return;
  }
  if ((_DWORD)v5 == 1)
  {
    if (v13 <= 0)
      v17 = 0;
    else
      v17 = v9 - 2;
    v27 = v9;
    if (v9 < v6)
      v27 = v9 + 1;
    sub_1B20E2070(*(float *)(a1 + 32 + 4 * v17), *(float *)(a1 + 32 + 4 * v13), *(float *)(a1 + 32 + 4 * v9), *(float *)(a1 + 32 + 4 * v27), v16);
  }
  else
  {
    v18.i32[0] = 0;
    v19 = 0;
    v20 = 0;
    if (a3)
    {
      v20 = *(float32x2_t *)(a3 + 32 + 24 * v13 + 8);
      v19 = *(float32x2_t *)(a3 + 32 + 24 * v9);
    }
    v18.i32[1] = *(_DWORD *)(a1 + 32 + 4 * v13);
    __asm { FMOV            V4.2S, #1.0 }
    _D4.i32[1] = *(_DWORD *)(a1 + 32 + 4 * v9);
    sub_1B20E20D8(v16, 0.0, vadd_f32(v20, v18).f32[0], vadd_f32(v19, _D4).f32[0], _D4.f32[0]);
    __asm { FMOV            V2.2S, #3.0 }
  }
}

uint64_t static ScriptingSupport.scriptIterationRange(_:)(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24);
}

uint64_t static ScriptingSupport.scriptArgumentsBuffer(_:)(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

uint64_t static ScriptingSupport.debugMode.getter()
{
  return 0;
}

__n128 static ScriptingSupport.pointOfViewMatrices(_:)@<Q0>(__int128 *a1@<X8>)
{
  __n128 result;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11[8];

  swift_retain();
  sub_1B1E129A0(v11);
  v9 = v11[1];
  v10 = v11[0];
  v7 = v11[3];
  v8 = v11[2];
  v5 = v11[5];
  v6 = v11[4];
  v3 = v11[7];
  v4 = v11[6];
  swift_release();
  *a1 = v10;
  a1[1] = v9;
  a1[2] = v8;
  a1[3] = v7;
  a1[4] = v6;
  a1[5] = v5;
  result = (__n128)v3;
  a1[6] = v4;
  a1[7] = v3;
  return result;
}

double static ScriptingSupport.pointOfViewPosition(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  char v6;
  int8x16_t v7;
  int8x16_t v8;
  int8x16_t v9;
  double result;

  v1 = *(_QWORD *)(*(_QWORD *)a1 + 176);
  swift_retain();
  swift_retain();
  v2 = sub_1B1F21904(v1);
  v4 = v3;
  v6 = v5;
  swift_release();
  swift_release();
  v7.i32[0] = 0;
  v8.i32[0] = v6 & 1;
  v9 = vdupq_lane_s8((int8x8_t)*(_OWORD *)&vceqq_s8(v8, v7), 0);
  v8.i64[0] = v2;
  v8.i64[1] = v4;
  *(_QWORD *)&result = vandq_s8(v8, v9).u64[0];
  return result;
}

uint64_t static ScriptingSupport.texture_sample2d(texture2DSampler:uv:)(uint64_t a1, double a2)
{
  uint64_t result;
  _QWORD v4[4];
  _QWORD v5[8];

  v5[7] = *MEMORY[0x1E0C80C00];
  sub_1B1A0DCD4(a1, (uint64_t)v4);
  if (!v4[3])
    return sub_1B1A0DD70((uint64_t)v4);
  type metadata accessor for __vfx_sampler2d(0);
  result = swift_dynamicCast();
  if ((result & 1) != 0)
    return ((uint64_t (*)(_QWORD *, double))v5[5])(v5, a2);
  return result;
}

double static ScriptingSupport.texture_sample3d(texture3DSampler:uvw:)(uint64_t a1, __n128 a2)
{
  double result;
  _BYTE v4[24];
  uint64_t v5;
  __int128 v6;
  void (*v7)(__int128 *, __n128);
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  sub_1B1A0DCD4(a1, (uint64_t)v4);
  if (v5)
  {
    type metadata accessor for __vfx_sampler3d(0);
    if ((swift_dynamicCast() & 1) != 0)
    {
      v7(&v6, a2);
      return result;
    }
  }
  else
  {
    sub_1B1A0DD70((uint64_t)v4);
  }
  return 0.0;
}

uint64_t static ScriptingSupport.curlNoise(_:uvw:intensity:scale:clockDeltaTime:)(_QWORD *a1, float32x4_t a2, double a3, float a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  __int16 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  char v19;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  __int16 v27;
  char v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  int v33;
  uint64_t v34;

  v4 = *(_QWORD *)(*a1 + OBJC_IVAR____TtC3VFX13EntityManager_renderer);
  swift_retain();
  if (!v4)
    return swift_release();
  v5 = *(_QWORD *)(v4 + 240);
  swift_retain();
  swift_retain();
  sub_1B1FAE1BC(0, 3, v5, v4, 0, 3, (uint64_t)&v22);
  v6 = v22;
  v7 = v23;
  v8 = v24;
  v9 = v25;
  v10 = v27;
  v19 = v28;
  v17 = v30;
  v18 = v29;
  v16 = v31;
  v15 = v32;
  v11 = v34;
  v12 = v26;
  v13 = v33;
  swift_release();
  swift_release();
  v22 = v6;
  v23 = v7;
  v24 = v8;
  v25 = v9;
  v26 = v12;
  v27 = v10;
  v28 = v19;
  v29 = v18;
  v30 = v17;
  v31 = v16;
  v32 = v15;
  v33 = v13;
  v34 = v11;
  swift_release();
  swift_unknownObjectRelease();
  sub_1B20F2D04((__n128)vmulq_n_f32(a2, a4));
  swift_bridgeObjectRelease();
  return swift_unknownObjectRelease();
}

uint64_t static ScriptingSupport.fbmNoise(_:uvw:intensity:scale:clockDeltaTime:)(_QWORD *a1, float32x4_t a2, double a3, float a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  __int16 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  char v19;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  __int16 v27;
  char v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  int v33;
  uint64_t v34;

  v4 = *(_QWORD *)(*a1 + OBJC_IVAR____TtC3VFX13EntityManager_renderer);
  swift_retain();
  if (!v4)
    return swift_release();
  v5 = *(_QWORD *)(v4 + 240);
  swift_retain();
  swift_retain();
  sub_1B1FAE1BC(1u, 3, v5, v4, 1u, 3, (uint64_t)&v22);
  v6 = v22;
  v7 = v23;
  v8 = v24;
  v9 = v25;
  v10 = v27;
  v19 = v28;
  v17 = v30;
  v18 = v29;
  v16 = v31;
  v15 = v32;
  v11 = v34;
  v12 = v26;
  v13 = v33;
  swift_release();
  swift_release();
  v22 = v6;
  v23 = v7;
  v24 = v8;
  v25 = v9;
  v26 = v12;
  v27 = v10;
  v28 = v19;
  v29 = v18;
  v30 = v17;
  v31 = v16;
  v32 = v15;
  v33 = v13;
  v34 = v11;
  swift_release();
  swift_unknownObjectRelease();
  sub_1B20F2D04((__n128)vmulq_n_f32(a2, a4));
  swift_bridgeObjectRelease();
  return swift_unknownObjectRelease();
}

_QWORD *static ScriptingSupport.makeCurlNoiseCPUTexture(_:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *result;
  int v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[3];
  unsigned __int8 v29;
  uint64_t v30;
  unsigned __int16 v31;
  unsigned __int8 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;

  v3 = *(_QWORD *)(*a1 + OBJC_IVAR____TtC3VFX13EntityManager_renderer);
  swift_retain();
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 240);
    swift_retain();
    swift_retain();
    sub_1B1FAE1BC(0, 3, v4, v3, 0, 3, (uint64_t)v28);
    v21 = a2;
    v5 = v28[2];
    v19 = v28[1];
    v20 = v29;
    v6 = v30;
    v18 = v32;
    v7 = v33;
    v8 = v34;
    v9 = v35;
    v26 = v37;
    v27 = v36;
    v24 = v39;
    v25 = v38;
    v23 = v40;
    v22 = v41;
    v10 = v31;
    v11 = v28[0];
    swift_release();
    v12 = v5;
    swift_unknownObjectRelease();
    v13 = v19;
    a2 = v21;
    swift_release();
    swift_release();
    v14 = 0x10000;
    if (!v18)
      v14 = 0;
    v3 = v10 | v14;
    v15 = v20;
  }
  else
  {
    swift_release();
    v11 = 0;
    v13 = 0;
    v12 = 0;
    v15 = 0;
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v26 = 0;
    v27 = 0;
    v24 = 0;
    v25 = 0;
    v22 = 0;
    v23 = 0;
  }
  sub_1B19F900C(0, (unint64_t *)&unk_1ED4B9160);
  a2[3] = v16;
  result = (_QWORD *)swift_allocObject();
  *a2 = result;
  result[2] = v11;
  result[3] = v13;
  result[4] = v12;
  result[5] = v15;
  result[6] = v6;
  result[7] = v3;
  result[8] = v7;
  result[9] = v8;
  result[10] = v9;
  result[11] = v27;
  result[12] = v26;
  result[13] = v25;
  result[14] = v24;
  result[15] = v23;
  result[16] = v22;
  return result;
}

_QWORD *static ScriptingSupport.makeFbmNoiseCPUTexture(_:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *result;
  int v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[3];
  unsigned __int8 v29;
  uint64_t v30;
  unsigned __int16 v31;
  unsigned __int8 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;

  v3 = *(_QWORD *)(*a1 + OBJC_IVAR____TtC3VFX13EntityManager_renderer);
  swift_retain();
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 240);
    swift_retain();
    swift_retain();
    sub_1B1FAE1BC(1u, 3, v4, v3, 1u, 3, (uint64_t)v28);
    v21 = a2;
    v5 = v28[2];
    v19 = v28[1];
    v20 = v29;
    v6 = v30;
    v18 = v32;
    v7 = v33;
    v8 = v34;
    v9 = v35;
    v26 = v37;
    v27 = v36;
    v24 = v39;
    v25 = v38;
    v23 = v40;
    v22 = v41;
    v10 = v31;
    v11 = v28[0];
    swift_release();
    v12 = v5;
    swift_unknownObjectRelease();
    v13 = v19;
    a2 = v21;
    swift_release();
    swift_release();
    v14 = 0x10000;
    if (!v18)
      v14 = 0;
    v3 = v10 | v14;
    v15 = v20;
  }
  else
  {
    swift_release();
    v11 = 0;
    v13 = 0;
    v12 = 0;
    v15 = 0;
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v26 = 0;
    v27 = 0;
    v24 = 0;
    v25 = 0;
    v22 = 0;
    v23 = 0;
  }
  sub_1B19F900C(0, (unint64_t *)&unk_1ED4B9160);
  a2[3] = v16;
  result = (_QWORD *)swift_allocObject();
  *a2 = result;
  result[2] = v11;
  result[3] = v13;
  result[4] = v12;
  result[5] = v15;
  result[6] = v6;
  result[7] = v3;
  result[8] = v7;
  result[9] = v8;
  result[10] = v9;
  result[11] = v27;
  result[12] = v26;
  result[13] = v25;
  result[14] = v24;
  result[15] = v23;
  result[16] = v22;
  return result;
}

double static ScriptingSupport.texture_sample3dLinearRepeat(cpuTexture:uvw:)(uint64_t a1, __n128 a2)
{
  return sub_1B1FFDBB0(a1, (double (*)(__n128))sub_1B20F2D04, a2);
}

double static ScriptingSupport.texture_sample3dLinearRepeatMirror(cpuTexture:uvw:)(uint64_t a1, __n128 a2)
{
  return sub_1B1FFDBB0(a1, (double (*)(__n128))sub_1B20F2D4C, a2);
}

double static ScriptingSupport.texture_sample3dLinearClampToZero(cpuTexture:uvw:)(uint64_t a1, __n128 a2)
{
  return sub_1B1FFDBB0(a1, (double (*)(__n128))sub_1B20F2D94, a2);
}

double static ScriptingSupport.texture_sample3dLinearClampToEdge(cpuTexture:uvw:)(uint64_t a1, __n128 a2)
{
  return sub_1B1FFDBB0(a1, (double (*)(__n128))sub_1B20F2DDC, a2);
}

double sub_1B1FFDBB0(uint64_t a1, double (*a2)(__n128), __n128 a3)
{
  double v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  _BYTE v15[24];
  uint64_t v16;
  _OWORD v17[7];
  uint64_t v18;

  sub_1B1A0DCD4(a1, (uint64_t)v15);
  if (v16)
  {
    if ((swift_dynamicCast() & 1) != 0)
    {
      v17[4] = v11;
      v17[5] = v12;
      v17[6] = v13;
      v18 = v14;
      v17[0] = v7;
      v17[1] = v8;
      v17[2] = v9;
      v17[3] = v10;
      v6 = a2(a3);
      sub_1B1FAEB64((uint64_t)v17);
      return v6;
    }
  }
  else
  {
    sub_1B1A0DD70((uint64_t)v15);
  }
  return 0.0;
}

uint64_t static ScriptingSupport.makeColorRamp(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(_QWORD *)(a3 + 24) = &type metadata for ColorRamp;
  *(_QWORD *)a3 = a1;
  *(_QWORD *)(a3 + 8) = a2;
  *(_BYTE *)(a3 + 16) = 1;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t static ScriptingSupport.makeColorRamp(_:_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned __int8 a3@<W2>, uint64_t a4@<X8>)
{
  char v4;

  v4 = a3;
  *(_QWORD *)(a4 + 24) = &type metadata for ColorRamp;
  if (a3 >= 3u)
    v4 = 3;
  *(_QWORD *)a4 = a1;
  *(_QWORD *)(a4 + 8) = a2;
  *(_BYTE *)(a4 + 16) = v4;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

__n128 static ScriptingSupport.colorRampEvaluate(_:_:)(uint64_t a1, float a2)
{
  double v3;
  double v4;
  __n128 v5;
  __int128 v6;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  _BYTE v12[32];

  sub_1B1A02864(a1, (uint64_t)v12);
  swift_dynamicCast();
  sub_1B20D4310(v9, v10, v11, a2, v3, v4, v5);
  v8 = v6;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return (__n128)v8;
}

uint64_t static ScriptingSupport.colorRampSetColor(_:color:at:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>, __n128 a4@<Q0>)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  char v9;
  _BYTE v11[32];
  uint64_t v12;
  uint64_t v13;
  char v14;

  sub_1B1A02864(a1, (uint64_t)v11);
  result = swift_dynamicCast();
  v7 = v12;
  if ((a2 & 0x8000000000000000) == 0 && *(_QWORD *)(v12 + 16) > a2)
  {
    result = swift_isUniquelyReferenced_nonNull_native();
    v12 = v7;
    if ((result & 1) == 0)
    {
      result = (uint64_t)sub_1B1791044(v7);
      v7 = result;
    }
    *(__n128 *)(v7 + 16 * a2 + 32) = a4;
  }
  v8 = v13;
  v9 = v14;
  *(_QWORD *)(a3 + 24) = &type metadata for ColorRamp;
  *(_QWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = v8;
  *(_BYTE *)(a3 + 16) = v9;
  return result;
}

uint64_t static ScriptingSupport.makeCurve(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;

  sub_1B1A0DBF0(0, a2, a3, a4);
  a5[3] = v8;
  v9 = swift_allocObject();
  *a5 = v9;
  *(_QWORD *)(v9 + 16) = a1;
  *(_QWORD *)(v9 + 24) = a2;
  *(_QWORD *)(v9 + 32) = 0;
  *(_BYTE *)(v9 + 40) = 1;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

float static ScriptingSupport.curveEvaluate(_:_:)(uint64_t a1, float a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  float v6;
  float v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  _BYTE v13[32];

  sub_1B1A02864(a1, (uint64_t)v13);
  sub_1B1A0DBF0(0, v3, v4, v5);
  swift_dynamicCast();
  sub_1B1FFCF6C(v9, v10, v11, v12, a2);
  v7 = v6;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t static ScriptingSupport.curveSetValue(_:value:at:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>, float a4@<S0>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t result;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char v22;

  sub_1B1A02864(a1, (uint64_t)&v18);
  sub_1B1A0DBF0(0, v7, v8, v9);
  v11 = v10;
  swift_dynamicCast();
  v12 = v19;
  if ((a2 & 0x8000000000000000) == 0 && *((_QWORD *)v19 + 2) > a2)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v19 = v12;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      v12 = sub_1B1FFEEAC((uint64_t)v12);
    *(float *)&v12[4 * a2 + 32] = a4;
  }
  v14 = v20;
  v15 = v21;
  v16 = v22;
  a3[3] = v11;
  result = swift_allocObject();
  *a3 = result;
  *(_QWORD *)(result + 16) = v12;
  *(_QWORD *)(result + 24) = v14;
  *(_QWORD *)(result + 32) = v15;
  *(_BYTE *)(result + 40) = v16;
  return result;
}

uint64_t static ScriptingSupport.curveScale(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>, float a3@<S0>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v13;
  float32x4_t *v14;
  uint64_t v15;
  float32x4_t v16;
  unint64_t v17;
  float *v18;
  uint64_t v19;
  char v20;
  uint64_t result;
  char v23[32];
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char v27;

  sub_1B1A02864(a1, (uint64_t)v23);
  sub_1B1A0DBF0(0, v4, v5, v6);
  v8 = v7;
  swift_dynamicCast();
  v9 = v24;
  v10 = v25;
  v11 = *(_QWORD *)(v25 + 16);
  if (v11)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v24 = v9;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      v9 = sub_1B1FFEEAC((uint64_t)v9);
    if (v11 >= 8)
    {
      v13 = v11 & 0x7FFFFFFFFFFFFFF8;
      v14 = (float32x4_t *)(v9 + 48);
      v15 = v11 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v16 = vmulq_n_f32(*v14, a3);
        v14[-1] = vmulq_n_f32(v14[-1], a3);
        *v14 = v16;
        v14 += 2;
        v15 -= 8;
      }
      while (v15);
      if (v11 == v13)
        goto LABEL_11;
    }
    else
    {
      v13 = 0;
    }
    v17 = v11 - v13;
    v18 = (float *)&v9[4 * v13 + 32];
    do
    {
      *v18 = *v18 * a3;
      ++v18;
      --v17;
    }
    while (v17);
LABEL_11:
    v10 = v25;
  }
  v19 = v26;
  v20 = v27;
  a2[3] = v8;
  result = swift_allocObject();
  *a2 = result;
  *(_QWORD *)(result + 16) = v9;
  *(_QWORD *)(result + 24) = v10;
  *(_QWORD *)(result + 32) = v19;
  *(_BYTE *)(result + 40) = v20;
  return result;
}

double static ScriptingSupport.clockTime(_:)(_QWORD *a1)
{
  return *(double *)(*a1 + OBJC_IVAR____TtC3VFX13EntityManager_clock + 48);
}

float static ScriptingSupport.clockDeltaTime(_:)(_QWORD *a1)
{
  return *(float *)(*a1 + OBJC_IVAR____TtC3VFX13EntityManager_clock + 64);
}

BOOL static ScriptingSupport.clockIsFirstFrame(_:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *a1 + OBJC_IVAR____TtC3VFX13EntityManager_clock;
  v3 = *(_QWORD *)(v1 + 8);
  v2 = *(_QWORD *)(v1 + 16);
  return v3 == 1 && v2 == 0;
}

_QWORD *static ScriptingSupport.makeRandomNumberGeneratorXoshiro(seed:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *result;

  v3 = a1 + 0x76E15D3EFEFDCBBFLL;
  v4 = 0xC5004E441C522FB3 * a1 - 0x3AFFB1BBE3ADD04DLL;
  v5 = 0x77710069854EE241 - a1;
  v6 = 0x39109BB02ACBE635 * a1;
  a2[3] = &type metadata for RandomNumberGeneratorXoshiro;
  result = (_QWORD *)swift_allocObject();
  *a2 = result;
  result[2] = v3;
  result[3] = v4;
  result[4] = v5;
  result[5] = v6;
  return result;
}

float static ScriptingSupport.randomNumberGeneratorGetFloatRandomFast(_:_:)(_QWORD *a1, uint64_t a2, float a3, float a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  _QWORD *v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  sub_1B1A02864(a2, (uint64_t)&v14);
  swift_dynamicCast();
  v7 = v17 ^ v15 ^ v16;
  v8 = v18 ^ v16 ^ v15;
  v9 = v17 ^ v15 ^ (v16 << 17);
  v10 = __ROR8__(v18 ^ v16, 19);
  v11 = (float)((float)(a4 - a3)
              * (float)((float)((9 * ((((unint64_t)(5 * v16) >> 32) >> 25) | (640 * v16))) & 0xFFFFFF)
                      * 0.000000059605))
      + a3;
  a1[3] = &type metadata for RandomNumberGeneratorXoshiro;
  v12 = (_QWORD *)swift_allocObject();
  *a1 = v12;
  v12[2] = v8;
  v12[3] = v7;
  v12[4] = v9;
  v12[5] = v10;
  return v11;
}

float static ScriptingSupport.randomNumberGeneratorGetFloatRandom01(_:)(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  float v7;
  _QWORD *v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  sub_1B1A02864(a2, (uint64_t)&v10);
  swift_dynamicCast();
  v3 = v13 ^ v11 ^ v12;
  v4 = v14 ^ v12 ^ v11;
  v5 = v13 ^ v11 ^ (v12 << 17);
  v6 = __ROR8__(v14 ^ v12, 19);
  v7 = (float)((9 * ((((unint64_t)(5 * v12) >> 32) >> 25) | (640 * v12))) & 0xFFFFFF)
     * 0.000000059605;
  a1[3] = &type metadata for RandomNumberGeneratorXoshiro;
  v8 = (_QWORD *)swift_allocObject();
  *a1 = v8;
  v8[2] = v4;
  v8[3] = v3;
  v8[4] = v5;
  v8[5] = v6;
  return v7;
}

__n128 static ScriptingSupport.randomNumberGeneratorGetFloat2Random01(_:)(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  __int128 v14;
  _BYTE v15[32];
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  sub_1B1A02864(a2, (uint64_t)v15);
  swift_dynamicCast();
  v3 = v18 ^ v16 ^ v17;
  v4 = v19 ^ v17 ^ v16;
  *(float *)&v5 = (float)((9 * ((((unint64_t)(5 * v17) >> 32) >> 25) | (640 * v17))) & 0xFFFFFF)
                * 0.000000059605;
  v6 = v4 ^ v18 ^ v16 ^ (v17 << 17);
  v7 = __ROR8__(v19 ^ v17, 19);
  v8 = v6 ^ v3;
  v9 = v3 ^ v7 ^ v4;
  v10 = v6 ^ (v3 << 17);
  v11 = __ROR8__(v3 ^ v7, 19);
  *((float *)&v5 + 1) = (float)((9 * ((((unint64_t)(5 * v3) >> 32) >> 25) | (640 * v3))) & 0xFFFFFF)
                      * 0.000000059605;
  v14 = v5;
  a1[3] = &type metadata for RandomNumberGeneratorXoshiro;
  v12 = (_QWORD *)swift_allocObject();
  *a1 = v12;
  v12[2] = v9;
  v12[3] = v8;
  v12[4] = v10;
  v12[5] = v11;
  return (__n128)v14;
}

__n128 static ScriptingSupport.randomNumberGeneratorGetFloat3Random01(_:)(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  _QWORD *v16;
  __int128 v18;
  _BYTE v19[32];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  sub_1B1A02864(a2, (uint64_t)v19);
  swift_dynamicCast();
  v3 = v22 ^ v20 ^ v21;
  v4 = v23 ^ v21 ^ v20;
  v5 = v4 ^ v22 ^ v20 ^ (v21 << 17);
  v6 = v3 ^ __ROR8__(v23 ^ v21, 19);
  v7 = v5 ^ v3;
  v8 = v6 ^ v4;
  v9 = v5 ^ (v3 << 17) ^ v8;
  v10 = __ROR8__(v6, 19);
  v11 = v9 ^ v7;
  v12 = v7 ^ v10 ^ v8;
  v13 = v9 ^ (v7 << 17);
  v14 = __ROR8__(v7 ^ v10, 19);
  HIDWORD(v15) = 0;
  *(float *)&v15 = (float)((9 * ((((unint64_t)(5 * v21) >> 32) >> 25) | (640 * v21))) & 0xFFFFFF)
                 * 0.000000059605;
  *((float *)&v15 + 1) = (float)((9 * ((((unint64_t)(5 * v3) >> 32) >> 25) | (640 * v3))) & 0xFFFFFF)
                       * 0.000000059605;
  *((float *)&v15 + 2) = (float)((9 * ((((unint64_t)(5 * v7) >> 32) >> 25) | (640 * v7))) & 0xFFFFFF)
                       * 0.000000059605;
  v18 = v15;
  a1[3] = &type metadata for RandomNumberGeneratorXoshiro;
  v16 = (_QWORD *)swift_allocObject();
  *a1 = v16;
  v16[2] = v12;
  v16[3] = v11;
  v16[4] = v13;
  v16[5] = v14;
  return (__n128)v18;
}

__n128 static ScriptingSupport.randomNumberGeneratorGetFloat4Random01(_:)(uint64_t *a1, uint64_t a2)
{
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v8;
  __int128 v9;
  _BYTE v10[32];
  __int128 v11;
  uint64_t v12;
  uint64_t v13;

  sub_1B1A02864(a2, (uint64_t)v10);
  swift_dynamicCast();
  *(double *)&v3 = sub_1B1FFE768();
  v9 = v3;
  v8 = v11;
  v4 = v12;
  v5 = v13;
  a1[3] = (uint64_t)&type metadata for RandomNumberGeneratorXoshiro;
  v6 = swift_allocObject();
  *a1 = v6;
  *(_OWORD *)(v6 + 16) = v8;
  *(_QWORD *)(v6 + 32) = v4;
  *(_QWORD *)(v6 + 40) = v5;
  return (__n128)v9;
}

double sub_1B1FFE768()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int8x16_t v4;
  int8x16_t v5;
  int8x16_t v6;
  double result;

  v0 = sub_1B2130F84();
  v1 = sub_1B2130F84();
  v2 = sub_1B2130F84();
  v3 = sub_1B2130F84();
  v4.i64[0] = v0;
  v4.i64[1] = v1;
  v5.i64[0] = v2;
  v5.i64[1] = v3;
  v6.i64[0] = 0xFFFFFFLL;
  v6.i64[1] = 0xFFFFFFLL;
  *(_QWORD *)&result = vmulq_f32(vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vcvtq_f64_u64((uint64x2_t)vandq_s8(v4, v6))), vcvtq_f64_u64((uint64x2_t)vandq_s8(v5, v6))), (float32x4_t)vdupq_n_s32(0x33800000u)).u64[0];
  return result;
}

float static ScriptingSupport.randomNumberGeneratorGetFloatWhiteNoise(_:_:_:)(_QWORD *a1, uint64_t a2, float a3, float a4)
{
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  float v12;
  _QWORD *v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  sub_1B1A02864(a2, (uint64_t)&v15);
  swift_dynamicCast();
  v7 = 9 * ((((unint64_t)(5 * v17) >> 32) >> 25) | (640 * v17));
  v8 = v18 ^ v16 ^ v17;
  v9 = v19 ^ v17 ^ v16;
  v10 = __ROR8__(v19 ^ v17, 19);
  v11 = v18 ^ v16 ^ (v17 << 17);
  v12 = (float)(a3 * a4)
      * (float)((float)((float)((float)(*(_QWORD *)&v7 & 0xFFFFFFLL) * 0.000000059605)
                      + (float)((float)(*(_QWORD *)&v7 & 0xFFFFFFLL) * 0.000000059605))
              + -1.0);
  a1[3] = &type metadata for RandomNumberGeneratorXoshiro;
  v13 = (_QWORD *)swift_allocObject();
  *a1 = v13;
  v13[2] = v9;
  v13[3] = v8;
  v13[4] = v11;
  v13[5] = v10;
  return v12;
}

double static ScriptingSupport.randomNumberGeneratorGetFloat2WhiteNoise(_:_:_:)(_QWORD *a1, uint64_t a2, float a3, float a4)
{
  uint64_t v7;
  uint64_t v8;
  float32x2_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v21;
  _QWORD *v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  sub_1B1A02864(a2, (uint64_t)&v24);
  swift_dynamicCast();
  v7 = v27 ^ v25 ^ v26;
  v8 = v28 ^ v26 ^ v25;
  v9.f32[0] = (float)((9 * ((((unint64_t)(5 * v26) >> 32) >> 25) | (640 * v26))) & 0xFFFFFF)
            * 0.000000059605;
  v10 = v8 ^ v27 ^ v25 ^ (v26 << 17);
  v11 = __ROR8__(v28 ^ v26, 19);
  v12 = v10 ^ v7;
  v13 = v7 ^ v11 ^ v8;
  v14 = __ROR8__(v7 ^ v11, 19);
  v9.f32[1] = (float)((9 * ((((unint64_t)(5 * v7) >> 32) >> 25) | (640 * v7))) & 0xFFFFFF)
            * 0.000000059605;
  v15 = v10 ^ (v7 << 17);
  __asm { FMOV            V2.2S, #-1.0 }
  v21 = COERCE_DOUBLE(vmul_n_f32(vadd_f32(vadd_f32(v9, v9), _D2), a3 * a4));
  a1[3] = &type metadata for RandomNumberGeneratorXoshiro;
  v22 = (_QWORD *)swift_allocObject();
  *a1 = v22;
  v22[2] = v13;
  v22[3] = v12;
  v22[4] = v15;
  v22[5] = v14;
  return v21;
}

__n128 static ScriptingSupport.randomNumberGeneratorGetFloat3WhiteNoise(_:_:_:)(_QWORD *a1, uint64_t a2, float a3, float a4)
{
  uint64_t v7;
  uint64_t v8;
  float32x4_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v25;
  float32x4_t v27;
  _BYTE v28[32];
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  sub_1B1A02864(a2, (uint64_t)v28);
  swift_dynamicCast();
  v7 = v31 ^ v29 ^ v30;
  v8 = v32 ^ v30 ^ v29;
  v9.f32[0] = (float)((9 * ((((unint64_t)(5 * v30) >> 32) >> 25) | (640 * v30))) & 0xFFFFFF)
            * 0.000000059605;
  v10 = v8 ^ v31 ^ v29 ^ (v30 << 17);
  v11 = v7 ^ __ROR8__(v32 ^ v30, 19);
  v12 = v10 ^ v7;
  v13 = v11 ^ v8;
  v14 = v10 ^ (v7 << 17) ^ v13;
  v15 = v12 ^ __ROR8__(v11, 19);
  v16 = v14 ^ v12;
  v17 = __ROR8__(v15, 19);
  v18 = v15 ^ v13;
  v9.f32[1] = (float)((9 * ((((unint64_t)(5 * v7) >> 32) >> 25) | (640 * v7))) & 0xFFFFFF)
            * 0.000000059605;
  v9.f32[2] = (float)((9 * ((((unint64_t)(5 * v12) >> 32) >> 25) | (640 * v12))) & 0xFFFFFF)
            * 0.000000059605;
  v19 = v14 ^ (v12 << 17);
  __asm { FMOV            V2.4S, #-1.0 }
  v27 = vmulq_n_f32(vaddq_f32(vaddq_f32(v9, v9), _Q2), a3 * a4);
  a1[3] = &type metadata for RandomNumberGeneratorXoshiro;
  v25 = (_QWORD *)swift_allocObject();
  *a1 = v25;
  v25[2] = v18;
  v25[3] = v16;
  v25[4] = v19;
  v25[5] = v17;
  return (__n128)v27;
}

__n128 static ScriptingSupport.randomNumberGeneratorGetFloat4WhiteNoise(_:_:_:)(uint64_t *a1, uint64_t a2, float a3, float a4)
{
  float32x4_t v7;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v17;
  float32x4_t v18;
  _BYTE v19[32];
  __int128 v20;
  uint64_t v21;
  uint64_t v22;

  sub_1B1A02864(a2, (uint64_t)v19);
  swift_dynamicCast();
  *(double *)v7.i64 = sub_1B1FFE768();
  __asm { FMOV            V1.4S, #-1.0 }
  v17 = v20;
  v18 = vmulq_n_f32(vaddq_f32(vaddq_f32(v7, v7), _Q1), a3 * a4);
  v13 = v21;
  v14 = v22;
  a1[3] = (uint64_t)&type metadata for RandomNumberGeneratorXoshiro;
  v15 = swift_allocObject();
  *a1 = v15;
  *(_OWORD *)(v15 + 16) = v17;
  *(_QWORD *)(v15 + 32) = v13;
  *(_QWORD *)(v15 + 40) = v14;
  return (__n128)v18;
}

uint64_t sub_1B1FFEC5C()
{
  return sub_1B1FFEC80((uint64_t (*)(uint64_t))sub_1B1FFEEAC);
}

uint64_t sub_1B1FFEC68()
{
  return sub_1B1FFEC80((uint64_t (*)(uint64_t))sub_1B1FFEFB0);
}

uint64_t sub_1B1FFEC74()
{
  return sub_1B1FFEC80((uint64_t (*)(uint64_t))sub_1B1FFEFC4);
}

uint64_t sub_1B1FFEC80(uint64_t (*a1)(uint64_t))
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t result;

  v3 = *v1;
  result = swift_isUniquelyReferenced_nonNull_native();
  *v1 = v3;
  if (!(_DWORD)result)
  {
    result = a1(v3);
    *v1 = result;
  }
  return result;
}

char *sub_1B1FFECC8(uint64_t a1)
{
  return sub_1B1C62A3C(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

_QWORD *sub_1B1FFECDC(_QWORD *a1)
{
  return sub_1B1C62C78(0, a1[2], 0, a1);
}

char *sub_1B1FFECF0(uint64_t a1)
{
  return sub_1B1C62D94(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

_QWORD *sub_1B1FFED04(unint64_t a1)
{
  return sub_1B1C62DA8(0, *(_QWORD *)(a1 + 16), 0, a1);
}

_QWORD *sub_1B1FFED18(_QWORD *a1)
{
  return sub_1B1C63184(0, a1[2], 0, a1);
}

char *sub_1B1FFED2C(uint64_t a1)
{
  return sub_1B1C62EF0(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

_QWORD *sub_1B1FFED40(_QWORD *a1)
{
  return sub_1B1C638E4(0, a1[2], 0, a1);
}

char *sub_1B1FFED54(uint64_t a1)
{
  return sub_1B1C63900(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

_QWORD *sub_1B1FFED68(_QWORD *a1)
{
  return sub_1B1C63B74(0, a1[2], 0, a1);
}

_QWORD *sub_1B1FFED7C(_QWORD *a1)
{
  return sub_1B1C63044(0, a1[2], 0, a1);
}

_QWORD *sub_1B1FFED90(_QWORD *a1)
{
  return sub_1B1C63A50(0, a1[2], 0, a1);
}

char *sub_1B1FFEDA4(uint64_t a1)
{
  return sub_1B1C63D98(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

char *sub_1B1FFEDB8(uint64_t a1)
{
  return sub_1B1C63FA8(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

char *sub_1B1FFEDCC(uint64_t a1)
{
  return sub_1B1C6443C(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

_QWORD *sub_1B1FFEDE0(_QWORD *a1)
{
  return sub_1B1C64764(0, a1[2], 0, a1);
}

_QWORD *sub_1B1FFEDF4(_QWORD *a1)
{
  return sub_1B1C64CA0(0, a1[2], 0, a1);
}

_QWORD *sub_1B1FFEE08(_QWORD *a1)
{
  return sub_1B1C64EAC(0, a1[2], 0, a1);
}

_QWORD *sub_1B1FFEE1C(_QWORD *a1)
{
  return sub_1B1C64DA4(0, a1[2], 0, a1);
}

_QWORD *sub_1B1FFEE34(_QWORD *a1)
{
  return sub_1B1C65244(0, a1[2], 0, a1);
}

_QWORD *sub_1B1FFEE48(_QWORD *a1)
{
  return sub_1B1C631A0(0, a1[2], 0, a1);
}

_QWORD *sub_1B1FFEE5C(_QWORD *a1)
{
  return sub_1B1C634B0(0, a1[2], 0, a1);
}

_QWORD *sub_1B1FFEE70(_QWORD *a1)
{
  return sub_1B1C663BC(0, a1[2], 0, a1);
}

char *sub_1B1FFEE84(uint64_t a1)
{
  return sub_1B1C65F68(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

char *sub_1B1FFEE98(uint64_t a1)
{
  return sub_1B1C66718(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

char *sub_1B1FFEEAC(uint64_t a1)
{
  return sub_1B1C635D8(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

_QWORD *sub_1B1FFEEC0(_QWORD *a1)
{
  return sub_1B1C66610(0, a1[2], 0, a1);
}

_QWORD *sub_1B1FFEED4(_QWORD *a1)
{
  return sub_1B1C6681C(0, a1[2], 0, a1);
}

_QWORD *sub_1B1FFEEE8(_QWORD *a1)
{
  return sub_1B1C65128(0, a1[2], 0, a1);
}

_QWORD *sub_1B1FFEEFC(_QWORD *a1)
{
  return sub_1B1C66EB0(0, a1[2], 0, a1);
}

char *sub_1B1FFEF10(uint64_t a1)
{
  return sub_1B1C636E0(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

_QWORD *sub_1B1FFEF24(_QWORD *a1)
{
  return sub_1B1C67B84(0, a1[2], 0, a1);
}

_QWORD *sub_1B1FFEF38(_QWORD *a1)
{
  return sub_1B1C67BA0(0, a1[2], 0, a1);
}

_QWORD *sub_1B1FFEF4C(_QWORD *a1)
{
  return sub_1B1C67CD8(0, a1[2], 0, a1);
}

_QWORD *sub_1B1FFEF60(_QWORD *a1)
{
  return sub_1B1C67F04(0, a1[2], 0, a1);
}

_QWORD *sub_1B1FFEF74(_QWORD *a1)
{
  return sub_1B1C68118(0, a1[2], 0, a1);
}

_QWORD *sub_1B1FFEF88(_QWORD *a1)
{
  return sub_1B1C6857C(0, a1[2], 0, a1);
}

char *sub_1B1FFEF9C(uint64_t a1)
{
  return sub_1B1C64878(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

_QWORD *sub_1B1FFEFB0(_QWORD *a1)
{
  return sub_1B1C6899C(0, a1[2], 0, a1);
}

char *sub_1B1FFEFC4(uint64_t a1)
{
  return sub_1B1C68894(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

void sub_1B1FFEFD8(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    sub_1B22296AC();
    swift_bridgeObjectRelease();
  }
  JUMPOUT(0x1B5E21024);
}

_QWORD *sub_1B1FFF040(_QWORD *a1)
{
  return sub_1B1C68C14(0, a1[2], 0, a1);
}

char *sub_1B1FFF054(uint64_t a1)
{
  return sub_1B1C64334(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

char *sub_1B1FFF068(uint64_t a1)
{
  return sub_1B1C69068(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

_QWORD *sub_1B1FFF07C(_QWORD *a1)
{
  return sub_1B1C676F0(0, a1[2], 0, a1);
}

_QWORD *sub_1B1FFF090(_QWORD *a1)
{
  return sub_1B1C66940(0, a1[2], 0, a1);
}

char *sub_1B1FFF0A4(uint64_t a1)
{
  return sub_1B1C696F0(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

char *sub_1B1FFF0B8(uint64_t a1)
{
  return sub_1B1C697F8(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

char *sub_1B1FFF0CC(uint64_t a1)
{
  return sub_1B1C698E8(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

char *sub_1B1FFF0E0(uint64_t a1)
{
  return sub_1B1C69AE0(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

char *sub_1B1FFF0F4(uint64_t a1)
{
  return sub_1B1C69CC0(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_1B1FFF108()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 128))
  {
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
  }
  return swift_deallocObject();
}

uint64_t sub_1B1FFF13C()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1B1FFF170()
{
  return swift_deallocObject();
}

ValueMetadata *type metadata accessor for ScriptingSupport()
{
  return &type metadata for ScriptingSupport;
}

id sub_1B1FFF190(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  char *v4;
  uint64_t (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t inited;
  void *v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  objc_class *v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  void (*v38)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t ObjectType;
  uint64_t v42;
  char *v43;
  objc_super v44;

  v4 = v3;
  ObjectType = swift_getObjectType();
  v8 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
  sub_1B1791524(0, &qword_1EEF62090, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v9, v10);
  v43 = (char *)&v38 - v11;
  sub_1B1791524(0, &qword_1EEF62098, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAF3D8], v8);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)&v38 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = (char *)&v38 - v18;
  v20 = (uint64_t)&v4[OBJC_IVAR____TtCC3VFX10URLWatcherP33_98C17C331D2C865219A0B9EDA6B0BCC59Presenter_lastModificationDate];
  v21 = sub_1B222820C();
  v22 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56);
  v40 = v20;
  v38 = v22;
  v22(v20, 1, 1, v21);
  swift_weakInit();
  v23 = &v4[OBJC_IVAR____TtCC3VFX10URLWatcherP33_98C17C331D2C865219A0B9EDA6B0BCC59Presenter_url];
  v24 = sub_1B2228110();
  v39 = *(_QWORD *)(v24 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v39 + 16))(v23, a1, v24);
  *(_QWORD *)&v4[OBJC_IVAR____TtCC3VFX10URLWatcherP33_98C17C331D2C865219A0B9EDA6B0BCC59Presenter_entity] = a2;
  swift_retain();
  swift_weakAssign();
  v25 = v4;
  swift_release();
  v25[OBJC_IVAR____TtCC3VFX10URLWatcherP33_98C17C331D2C865219A0B9EDA6B0BCC59Presenter_shouldReplicate] = sub_1B1E2E03C(a2, a3);
  sub_1B1791524(0, (unint64_t *)&unk_1EEF620A0, (uint64_t (*)(uint64_t))type metadata accessor for URLResourceKey, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  v27 = (void *)*MEMORY[0x1E0C998D8];
  *(_QWORD *)(inited + 32) = *MEMORY[0x1E0C998D8];
  v28 = v27;
  sub_1B1EE7D98(inited);
  swift_setDeallocating();
  type metadata accessor for URLResourceKey(0);
  swift_arrayDestroy();
  v42 = a1;
  sub_1B2228038();
  swift_bridgeObjectRelease();
  v29 = sub_1B2227EC4();
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v19, 0, 1, v29);
  sub_1B1FFFFBC((uint64_t)v19, (uint64_t)v15, &qword_1EEF62098, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAF3D8]);
  sub_1B2227EC4();
  v30 = *(_QWORD *)(v29 - 8);
  v31 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v30 + 48))(v15, 1, v29);
  v32 = (uint64_t)v43;
  if (v31 == 1)
  {
    sub_1B1B1DC9C((uint64_t)v15, &qword_1EEF62098, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAF3D8]);
    v38(v32, 1, 1, v21);
  }
  else
  {
    sub_1B2227EB8();
    (*(void (**)(char *, uint64_t))(v30 + 8))(v15, v29);
  }
  v33 = (objc_class *)ObjectType;
  v34 = v42;
  v35 = v39;
  sub_1B1FFFF60(v32, v40);

  v44.receiver = v25;
  v44.super_class = v33;
  v36 = objc_msgSendSuper2(&v44, sel_init);
  (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v34, v24);
  sub_1B1B1DC9C((uint64_t)v19, &qword_1EEF62098, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAF3D8]);
  return v36;
}

uint64_t sub_1B1FFF680()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t (*v9)(uint64_t, uint64_t);
  uint64_t (*v10)(uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t result;
  uint64_t v32;
  uint64_t inited;
  void *v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  void *v39;
  _QWORD *v40;
  char *v41;
  unsigned int (*v42)(char *, uint64_t, uint64_t);
  void (*v43)(void);
  uint64_t (*v44)(void);
  uint64_t v45;
  unint64_t *v46;
  uint64_t (*v47)(uint64_t);
  char *v48;
  uint64_t v49;
  id v50;
  void (*v51)(char *, uint64_t);
  uint64_t v52;
  char *v53;
  char *v54;
  void *v55;
  uint64_t v56;
  char *v57;

  v1 = sub_1B222820C();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1, v3);
  v54 = (char *)&v52 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (char *)&v52 - v7;
  v9 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
  sub_1B1791524(0, &qword_1EEF62090, v10, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v52 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)&v52 - v17;
  MEMORY[0x1E0C80A78](v19, v20);
  v22 = (char *)&v52 - v21;
  sub_1B1791524(0, &qword_1EEF62098, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAF3D8], v9);
  MEMORY[0x1E0C80A78](v23, v24);
  v26 = (char *)&v52 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v27, v28);
  v30 = (char *)&v52 - v29;
  result = swift_weakLoadStrong();
  if (result)
  {
    v32 = result;
    v53 = v14;
    v56 = v2;
    v57 = v8;
    v55 = v0;
    sub_1B1791524(0, (unint64_t *)&unk_1EEF620A0, (uint64_t (*)(uint64_t))type metadata accessor for URLResourceKey, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1B226D240;
    v34 = (void *)*MEMORY[0x1E0C998D8];
    *(_QWORD *)(inited + 32) = *MEMORY[0x1E0C998D8];
    v35 = v34;
    sub_1B1EE7D98(inited);
    swift_setDeallocating();
    type metadata accessor for URLResourceKey(0);
    swift_arrayDestroy();
    sub_1B2228038();
    swift_bridgeObjectRelease();
    v36 = sub_1B2227EC4();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 56))(v30, 0, 1, v36);
    sub_1B1FFFFBC((uint64_t)v30, (uint64_t)v26, &qword_1EEF62098, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAF3D8]);
    sub_1B2227EC4();
    v37 = *(_QWORD *)(v36 - 8);
    v38 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v37 + 48))(v26, 1, v36);
    v39 = v55;
    if (v38 == 1)
    {
      sub_1B1B1DC9C((uint64_t)v26, &qword_1EEF62098, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAF3D8]);
      v40 = (_QWORD *)v56;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v56 + 56))(v22, 1, 1, v1);
    }
    else
    {
      sub_1B2227EB8();
      (*(void (**)(char *, uint64_t))(v37 + 8))(v26, v36);
      v40 = (_QWORD *)v56;
    }
    v41 = v57;
    sub_1B1FFFFBC((uint64_t)v39+ OBJC_IVAR____TtCC3VFX10URLWatcherP33_98C17C331D2C865219A0B9EDA6B0BCC59Presenter_lastModificationDate, (uint64_t)v18, &qword_1EEF62090, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870]);
    v42 = (unsigned int (*)(char *, uint64_t, uint64_t))v40[6];
    if (v42(v18, 1, v1) == 1)
    {
      swift_release();
    }
    else
    {
      v43 = (void (*)(void))v40[4];
      ((void (*)(char *, char *, uint64_t))v43)(v41, v18, v1);
      v18 = v53;
      sub_1B1FFFFBC((uint64_t)v22, (uint64_t)v53, &qword_1EEF62090, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870]);
      if (v42(v18, 1, v1) != 1)
      {
        v48 = v54;
        v43();
        if ((sub_1B22281E8() & 1) != 0)
        {
          v49 = swift_allocObject();
          *(_QWORD *)(v49 + 16) = v39;
          *(_QWORD *)(v49 + 24) = v32;
          v50 = v39;
          swift_retain();
          sub_1B1DA6294((uint64_t)sub_1B2000040, v49);
          swift_release();
        }
        swift_release();
        v51 = (void (*)(char *, uint64_t))v40[1];
        v51(v48, v1);
        v51(v41, v1);
        sub_1B1B1DC9C((uint64_t)v22, &qword_1EEF62090, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870]);
        v46 = &qword_1EEF62098;
        v47 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CAF3D8];
        v45 = (uint64_t)v30;
        return sub_1B1B1DC9C(v45, v46, v47);
      }
      swift_release();
      ((void (*)(char *, uint64_t))v40[1])(v41, v1);
    }
    v44 = MEMORY[0x1E0CB0870];
    sub_1B1B1DC9C((uint64_t)v22, &qword_1EEF62090, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870]);
    sub_1B1B1DC9C((uint64_t)v30, &qword_1EEF62098, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAF3D8]);
    v45 = (uint64_t)v18;
    v46 = &qword_1EEF62090;
    v47 = (uint64_t (*)(uint64_t))v44;
    return sub_1B1B1DC9C(v45, v46, v47);
  }
  return result;
}

void sub_1B1FFFB84(char *a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  os_unfair_lock_s *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD v17[6];

  if (a1[OBJC_IVAR____TtCC3VFX10URLWatcherP33_98C17C331D2C865219A0B9EDA6B0BCC59Presenter_shouldReplicate] == 1)
  {
    sub_1B1E2CC6C(0, a2, a1);
  }
  else
  {
    v4 = *(_DWORD *)&a1[OBJC_IVAR____TtCC3VFX10URLWatcherP33_98C17C331D2C865219A0B9EDA6B0BCC59Presenter_entity + 4];
    v5 = *(int *)&a1[OBJC_IVAR____TtCC3VFX10URLWatcherP33_98C17C331D2C865219A0B9EDA6B0BCC59Presenter_entity];
    v6 = (_DWORD)v5 == -1 && v4 == 0;
    if (!v6 && (v5 & 0x80000000) == 0 && *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8) > v5)
    {
      v7 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
      if (v4 == -1 || *(_DWORD *)(v7 + 12 * (int)v5 + 8) == v4)
        sub_1B2094EFC(*(uint64_t **)(*(_QWORD *)(a2 + 136) + 8 * *(int *)(v7 + 12 * (int)v5) + 32));
    }
  }
  v9 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager_renderer);
  if (v9)
  {
    v10 = *(_QWORD *)(v9 + 240);
    v11 = &a1[OBJC_IVAR____TtCC3VFX10URLWatcherP33_98C17C331D2C865219A0B9EDA6B0BCC59Presenter_url];
    v12 = *(os_unfair_lock_s **)(v10 + 48);
    swift_retain();
    os_unfair_lock_lock(v12);
    v13 = *(_QWORD *)(v10 + 72);
    MEMORY[0x1E0C80A78](v14, v15);
    v17[2] = v11;
    swift_bridgeObjectRetain();
    v16 = sub_1B21095E4((uint64_t)sub_1B2000048, v17, v13);
    swift_bridgeObjectRelease();
    *(_QWORD *)(v10 + 72) = v16;
    swift_bridgeObjectRelease();
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v10 + 48));
    swift_release();
  }
}

uint64_t sub_1B1FFFDF8()
{
  uint64_t v0;
  void *v1;
  void *v2;

  v1 = (void *)objc_opt_self();
  v2 = *(void **)(v0 + 16);
  objc_msgSend(v1, sel_removeFilePresenter_, v2);

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for URLWatcher()
{
  return objc_opt_self();
}

uint64_t sub_1B1FFFE60()
{
  return type metadata accessor for URLWatcher.Presenter();
}

uint64_t type metadata accessor for URLWatcher.Presenter()
{
  uint64_t result;

  result = qword_1EEF62080;
  if (!qword_1EEF62080)
    return swift_getSingletonMetadata();
  return result;
}

void sub_1B1FFFEA4()
{
  unint64_t v0;
  unint64_t v1;

  sub_1B2228110();
  if (v0 <= 0x3F)
  {
    sub_1B1791524(319, &qword_1EEF62090, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    if (v1 <= 0x3F)
      swift_updateClassMetadata2();
  }
}

uint64_t sub_1B1FFFF60(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1B1791524(0, &qword_1EEF62090, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1B1FFFFBC(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t))
{
  uint64_t v6;

  sub_1B1791524(0, a3, a4, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

uint64_t sub_1B2000014()
{
  uint64_t v0;

  swift_release();
  return swift_deallocObject();
}

void sub_1B2000040()
{
  uint64_t v0;

  sub_1B1FFFB84(*(char **)(v0 + 16), *(_QWORD *)(v0 + 24));
}

BOOL sub_1B2000048(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1B1FADF80(a1, a2, *(_QWORD *)(v2 + 16));
}

Swift::Void __swiftcall VFXInitialize()()
{
  if (qword_1ED4B91A0 != -1)
    swift_once();
}

uint64_t sub_1B2000090()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  meshopt_initialize();
  if (qword_1ED4B7760 != -1)
    swift_once();
  if (qword_1ED4B9370 != -1)
    swift_once();
  qword_1ED4D0EA8 = qword_1ED4D0980;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  sub_1B1DBA4F0();
  v1 = *(_QWORD *)(v0 + 16);
  if (v1)
  {
    v2 = (uint64_t *)(v0 + 32);
    v3 = MEMORY[0x1E0DEE9D8];
    do
    {
      v4 = *v2;
      v2 += 2;
      swift_retain();
      sub_1B1A05BC8(v4, v3);
      swift_release();
      --v1;
    }
    while (v1);
  }
  return swift_bridgeObjectRelease();
}

uint64_t VFXInitialize()
{
  uint64_t result;

  if (qword_1ED4B91A0 != -1)
    return swift_once();
  return result;
}

uint64_t sub_1B20001B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;

  os_unfair_recursive_lock_lock_with_options();
  v1 = sub_1B1F21F0C((uint64_t)&type metadata for DebugInfoState);
  if ((v3 & 1) != 0)
  {
    v5 = (uint64_t *)(*(_QWORD *)(v0 + 16) + v1);
    v6 = 32 * v2;
    os_unfair_lock_lock(*(os_unfair_lock_t *)(*(_QWORD *)(v0 + 32) + 32 * v2 + 24));
    os_unfair_recursive_lock_unlock();
    v4 = *v5;
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(*(_QWORD *)(v0 + 32) + v6 + 24));
  }
  else
  {
    os_unfair_recursive_lock_unlock();
    return 0;
  }
  return v4;
}

uint64_t sub_1B200024C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  unsigned __int8 *v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;

  os_unfair_recursive_lock_lock_with_options();
  v1 = sub_1B1F21F0C((uint64_t)&type metadata for DebugCullingSystemState);
  if ((v3 & 1) != 0)
  {
    v5 = (unsigned __int8 *)(*(_QWORD *)(v0 + 16) + v1);
    v6 = 32 * v2;
    os_unfair_lock_lock(*(os_unfair_lock_t *)(*(_QWORD *)(v0 + 32) + 32 * v2 + 24));
    os_unfair_recursive_lock_unlock();
    if (v5[1])
      v7 = 256;
    else
      v7 = 0;
    v8 = v7 | *v5;
    if (v5[2])
      v9 = 0x10000;
    else
      v9 = 0;
    v4 = v8 | v9;
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(*(_QWORD *)(v0 + 32) + v6 + 24));
  }
  else
  {
    os_unfair_recursive_lock_unlock();
    return 2;
  }
  return v4;
}

void sub_1B2000304(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char v5;
  const void *v6;
  uint64_t v7;
  os_unfair_lock_s *v8;
  _BYTE v9[1616];
  _BYTE __dst[1632];

  os_unfair_recursive_lock_lock_with_options();
  v3 = sub_1B1F21F0C((uint64_t)&type metadata for FrameConstantsStorage);
  if ((v5 & 1) != 0)
  {
    v6 = (const void *)(*(_QWORD *)(v1 + 16) + v3);
    v7 = 32 * v4;
    os_unfair_lock_lock(*(os_unfair_lock_t *)(*(_QWORD *)(v1 + 32) + 32 * v4 + 24));
    os_unfair_recursive_lock_unlock();
    memcpy(v9, v6, 0x64BuLL);
    memmove(__dst, v6, 0x64BuLL);
    nullsub_16(__dst);
    sub_1B1A18378((uint64_t)__dst, a1, &qword_1EEF62680, (uint64_t)&type metadata for FrameConstantsStorage);
    v8 = *(os_unfair_lock_s **)(*(_QWORD *)(v1 + 32) + v7 + 24);
    sub_1B2010648((uint64_t)v9);
    os_unfair_lock_unlock(v8);
  }
  else
  {
    os_unfair_recursive_lock_unlock();
    sub_1B2010640(__dst);
    sub_1B1A18378((uint64_t)__dst, a1, &qword_1EEF62680, (uint64_t)&type metadata for FrameConstantsStorage);
  }
}

void sub_1B2000408(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  int v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  os_unfair_lock_s *v15;
  __int128 v16;

  os_unfair_recursive_lock_lock_with_options();
  v3 = sub_1B1F21F0C((uint64_t)&type metadata for LightsUniforms);
  if ((v5 & 1) != 0)
  {
    v9 = *(_QWORD *)(v1 + 16) + v3;
    v10 = 32 * v4;
    os_unfair_lock_lock(*(os_unfair_lock_t *)(*(_QWORD *)(v1 + 32) + 32 * v4 + 24));
    os_unfair_recursive_lock_unlock();
    v11 = *(_QWORD *)(v9 + 16);
    v16 = *(_OWORD *)(v9 + 24);
    v6 = *(_QWORD *)(v9 + 40);
    if (*(_BYTE *)(v9 + 49))
      v12 = 256;
    else
      v12 = 0;
    v13 = v12 | *(unsigned __int8 *)(v9 + 48);
    if (*(_BYTE *)(v9 + 50))
      v14 = 0x10000;
    else
      v14 = 0;
    v7 = v13 | v14;
    *(_OWORD *)a1 = *(_OWORD *)v9;
    *(_QWORD *)(a1 + 16) = v11;
    v15 = *(os_unfair_lock_s **)(*(_QWORD *)(v1 + 32) + v10 + 24);
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    os_unfair_lock_unlock(v15);
    v8 = v16;
  }
  else
  {
    os_unfair_recursive_lock_unlock();
    v6 = 0;
    v7 = 0;
    *(_QWORD *)a1 = 1;
    v8 = 0uLL;
    *(_OWORD *)(a1 + 8) = 0u;
  }
  *(_OWORD *)(a1 + 24) = v8;
  *(_QWORD *)(a1 + 40) = v6;
  *(_WORD *)(a1 + 48) = v7;
  *(_BYTE *)(a1 + 50) = BYTE2(v7);
}

uint64_t sub_1B2000530()
{
  uint64_t v0;
  unsigned __int8 v1;
  unsigned __int8 v2;
  int v3;
  double v4;
  uint64_t v5;
  uint64_t v6;
  ValueMetadata *v7;
  _UNKNOWN **v8;

  swift_retain();
  sub_1B20001B0();
  v2 = v1;
  v3 = v1;
  swift_release();
  if (v3 == 2)
    return 0;
  v5 = *(_QWORD *)(*(_QWORD *)(v0 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues)
                 + 8 * *(_QWORD *)thread_worker_index(v4)
                 + 8);
  sub_1B1BBF3BC(0, (unint64_t *)&qword_1ED4BAD80, (unint64_t *)&qword_1ED4B8C90, (unint64_t *)&qword_1ED4B8C70);
  v6 = swift_allocObject();
  v7 = &type metadata for DebugInfoA;
  *(_OWORD *)(v6 + 16) = xmmword_1B226D240;
  if ((v2 & 1) == 0)
    v7 = &type metadata for DebugInfoB;
  v8 = &off_1E636D640;
  if ((v2 & 1) != 0)
    v8 = &off_1E636D550;
  *(_QWORD *)(v6 + 32) = v7;
  *(_QWORD *)(v6 + 40) = v8;
  return v5;
}

uint64_t sub_1B200062C(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  int v5;
  uint64_t v6;
  ValueMetadata *v7;
  _UNKNOWN **v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int *v12;
  int v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  os_unfair_lock_s *v18;
  os_unfair_lock_s *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  float32x4_t v29;
  float32x4_t v30;
  uint64_t v31;
  float32x4_t v32;
  uint64_t v33;
  float32x4_t v34;
  int v35;
  float32x4_t v36;
  _QWORD *v37;
  float32x4_t v38;
  uint64_t v39;
  float32x4_t v40;
  int v41;
  float32x4_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  __int128 v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  _BYTE v52[40];
  _OWORD v53[2];
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  _OWORD v58[2];
  uint64_t v59;
  _OWORD v60[2];
  uint64_t v61;
  uint64_t v62;
  int v63;
  char v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x4_t v84;
  _QWORD v85[12];
  float32x4_t v86[50];
  __int128 v87;
  __int128 v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  _BYTE v95[40];
  uint64_t v96;

  v96 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(result + OBJC_IVAR____TtC3VFX13EntityManager_renderer);
  if (v1)
  {
    v2 = result;
    swift_retain();
    swift_retain();
    sub_1B20001B0();
    v4 = v3;
    v5 = v3;
    swift_release();
    if (v5 == 2)
    {
      return swift_release();
    }
    else
    {
      *(_BYTE *)(*(_QWORD *)(v1 + 288) + 136) = 1;
      if (qword_1ED4B7DB8 != -1)
        swift_once();
      v62 = qword_1ED4D09F8;
      v63 = 0;
      v64 = 2;
      v65 = 0;
      v66 = 2;
      v67 = 0;
      swift_retain();
      sub_1B1B70B4C((uint64_t)v52);
      swift_release();
      sub_1B1BBF3BC(0, (unint64_t *)&qword_1ED4BAE50, (unint64_t *)&qword_1ED4BA1A0, (unint64_t *)&qword_1ED4BA190);
      v6 = swift_allocObject();
      v7 = &type metadata for DebugInfoA;
      *(_OWORD *)(v6 + 16) = xmmword_1B226D240;
      if ((v4 & 1) == 0)
        v7 = &type metadata for DebugInfoB;
      v8 = &off_1E636D670;
      if ((v4 & 1) != 0)
        v8 = &off_1E636D580;
      *(_QWORD *)(v6 + 32) = v7;
      *(_QWORD *)(v6 + 40) = v8;
      sub_1B1E68C98(v53);
      swift_setDeallocating();
      swift_deallocClassInstance();
      sub_1B19ED720((uint64_t)v52);
      v60[0] = v53[0];
      v60[1] = v53[1];
      v61 = v54;
      v31 = v2;
      sub_1B1E8FCE4(v2, (uint64_t)v60, 0x200000000, v85);
      sub_1B1A18378((uint64_t)v85, (uint64_t)&v87, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
      if ((_QWORD)v87)
      {
        v55 = v87;
        v56 = v88;
        v43 = v90;
        v57 = v89;
        v48 = v93;
        v49 = v1;
        v44 = v91;
        if (v94 >= 1 && v91)
        {
          v9 = v93[4];
          v10 = *(unsigned __int8 *)(v92 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
          v58[0] = v87;
          v58[1] = v88;
          v59 = v89;
          v39 = (uint64_t)(v93 + 6);
          v37 = v93 + 8;
          swift_retain();
          swift_retain();
          swift_retain();
          v11 = 0;
          v35 = v10;
          v33 = v9;
          do
          {
            v45 = v11;
            v12 = (int *)(v43 + 48 * v11);
            v13 = *v12;
            v41 = v12[1];
            v15 = (uint64_t *)*((_QWORD *)v12 + 2);
            v14 = *((_QWORD *)v12 + 3);
            v17 = *((_QWORD *)v12 + 4);
            v16 = *((_QWORD *)v12 + 5);
            v50 = v16;
            if (v10)
            {
              v18 = *(os_unfair_lock_s **)(v16 + 376);
              swift_retain_n();
              v19 = v18;
              v16 = v50;
              os_unfair_lock_lock(v19);
              os_unfair_lock_lock(*(os_unfair_lock_t *)(v50 + 344));
              swift_release();
            }
            else
            {
              swift_retain();
            }
            ecs_stack_allocator_push_snapshot(v9);
            sub_1B1A18378(v39, (uint64_t)v95, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
            v20 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v16 + 40) + 16) + 32) + 16);
            v21 = v48[4];
            v22 = v20 + 1;
            v23 = 48 * (v20 + 1);
            swift_retain();
            v48[6] = ecs_stack_allocator_allocate(v21, v23, 8);
            v48[7] = v22;
            v37[1] = 0;
            v37[2] = 0;
            *v37 = 0;
            swift_release();
            v24 = sub_1B1A12038((uint64_t)&type metadata for DebugInfoWireframePrimitive, (uint64_t)&off_1E63B2990, v15, v14, v17, (uint64_t)v48);
            if (v15)
            {
              v10 = v35;
              if (v17)
                __asm { BR              X10 }
            }
            else
            {
              v10 = v35;
              if (v13 != v41)
                __asm { BR              X11 }
            }
            v9 = v33;
            sub_1B1F05D48(v48, (unsigned __int16 **)v58, (uint64_t)v95);
            sub_1B1F03804((char *)v50);
            ecs_stack_allocator_pop_snapshot(v33);
            if ((v10 & 1) != 0)
            {
              os_unfair_lock_unlock(*(os_unfair_lock_t *)(v50 + 344));
              os_unfair_lock_unlock(*(os_unfair_lock_t *)(v50 + 376));
            }
            swift_release();
            v11 = v45 + 1;
          }
          while (v45 + 1 != v44);
          sub_1B1A086DC(v85, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
        }
        v25 = *(_QWORD *)(v31 + 176);
        swift_retain();
        swift_retain();
        sub_1B1F23CE0((uint64_t)&type metadata for FrameConstantsStorage, (uint64_t)&off_1E63A0688, v25);
        v51 = v26;
        v46 = v28;
        v47 = v27;
        swift_release();
        sub_1B1E129A0((__int128 *)v86);
        v36 = v86[0];
        v38 = v86[1];
        v40 = v86[2];
        v42 = v86[3];
        v29 = v86[4];
        v30 = v86[5];
        v32 = v86[6];
        v34 = v86[7];
        swift_release();
        v68 = 0;
        v69 = 0;
        v70 = 0u;
        v71 = 0u;
        v72 = 0u;
        v73 = 0u;
        v74 = 0u;
        v75 = 0u;
        v76 = 0u;
        v77 = 0u;
        v78 = v51;
        v79 = v47;
        v80 = v46;
        v81 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v29, v36.f32[0]), v30, *(float32x2_t *)v36.f32, 1), v32, v36, 2), v34, v36, 3);
        v82 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v29, v38.f32[0]), v30, *(float32x2_t *)v38.f32, 1), v32, v38, 2), v34, v38, 3);
        v83 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v29, v40.f32[0]), v30, *(float32x2_t *)v40.f32, 1), v32, v40, 2), v34, v40, 3);
        v84 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v29, v42.f32[0]), v30, *(float32x2_t *)v42.f32, 1), v32, v42, 2), v34, v42, 3);
        sub_1B19ED720((uint64_t)v53);
        sub_1B1A086DC(v85, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
        *(_BYTE *)(*(_QWORD *)(v49 + 288) + 136) = 0;
      }
      else
      {
        sub_1B19ED720((uint64_t)v53);
        *(_BYTE *)(*(_QWORD *)(v1 + 288) + 136) = 0;
      }
      return swift_release();
    }
  }
  return result;
}

void sub_1B20017BC(_DWORD *a1@<X8>)
{
  *(_DWORD *)((char *)a1 + 3) = 0;
  *a1 = 0;
}

void sub_1B20017C8(uint64_t a1@<X8>)
{
  *(_WORD *)a1 = 257;
  *(_BYTE *)(a1 + 2) = 0;
}

uint64_t sub_1B20017D8(_QWORD *a1, __n128 a2, __n128 a3, __n128 a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  void *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int32x4_t v27;
  int32x4_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __n128 *v34;
  char *v35;
  id v36;
  uint64_t v37;
  id v38;
  char *v39;
  char *v40;
  id v41;
  char *v42;
  id v43;
  float32x4_t v44;
  char *v45;
  uint64_t v46;
  int8x16_t v47;
  uint64_t v48;
  char **v49;
  char **v50;
  uint64_t v51;
  __n128 *v52;
  __n128 v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  float32x4_t *v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  uint64_t v66;
  char *v67;
  id v68;
  __int128 *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v78;
  uint64_t v80;
  __int128 v82;
  uint64_t v83;
  float32x4_t v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  uint64_t v89;
  int8x16_t v90;
  _OWORD v91[4];
  uint64_t v92;
  uint64_t v93;

  v93 = *MEMORY[0x1E0C80C00];
  v12 = a1[2];
  v13 = *(_QWORD *)(v12 + 24);
  result = sub_1B1BA7B7C(v13);
  if (result)
  {
    v15 = (void *)result;
    v76 = a8;
    v78 = a1[6];
    v83 = a1[7];
    v80 = v83 - v78;
    v16 = a1[1];
    v17 = (uint64_t *)a1[11];
    v18 = a1[12];
    v19 = a1[13];
    swift_unknownObjectRetain();
    v20 = sub_1B1A12038((uint64_t)&type metadata for WorldAABB, (uint64_t)&off_1E63C5FC8, v17, v18, v19, v12);
    if ((a6 & 1) != 0)
    {
      if ((a6 & 0x100) != 0)
      {
        v21 = v80 + 2;
        if (v80 + 2 <= 0)
          return swift_unknownObjectRelease();
      }
      else
      {
        v21 = v83 - v78;
        if (v80 <= 0)
          return swift_unknownObjectRelease();
      }
    }
    else
    {
      if ((a6 & 0x100) == 0)
        return swift_unknownObjectRelease();
      v21 = 2;
    }
    v22 = 32 * v21;
    swift_retain();
    v23 = (void *)sub_1B1D22DA8(v13, v22);
    v25 = v24;
    v75 = v26;
    swift_unknownObjectRetain();
    swift_release();
    v74 = v20;
    if ((a6 & 1) != 0)
    {
      v73 = v25;
      v29 = *(_QWORD *)(v12 + 24);
      swift_retain();
      v30 = (void *)sub_1B1D22DA8(v29, 16 * v80);
      v32 = v31;
      v70 = v33;
      swift_unknownObjectRetain();
      swift_release();
      v72 = (uint64_t)v30;
      if (objc_msgSend(v30, sel_storageMode) == (id)2)
      {
        v34 = 0;
      }
      else
      {
        v35 = (char *)objc_msgSend((id)swift_unknownObjectRetain(), sel_contents, v70);
        v36 = v30;
        v34 = (__n128 *)&v35[v32];
      }
      sub_1B1A10AA4(*(_QWORD *)(v16 + 40), (uint64_t)&type metadata for LODCulled, v91);
      v71 = v32;
      if (LOBYTE(v91[0]) == 1)
      {
        v37 = v83 - v78;
        if (v83 != v78)
        {
          do
          {
            *v34++ = a2;
            --v37;
          }
          while (v37);
        }
      }
      else if (v83 != v78)
      {
        v51 = v78;
        v52 = &v34[-v78];
        do
        {
          v54 = *(_DWORD *)(v16 + 188);
          v55 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v16 + 16) + 96) + 40 * *(int *)(v16 + 24) + 48);
          swift_retain();
          if (a7 < 0
            || *(_QWORD *)(v55 + 16) <= a7
            || (v56 = *(_QWORD *)(v55 + 8 * a7 + 32), (v57 = *(_QWORD *)(v56 + 16)) == 0))
          {
LABEL_28:
            swift_release();
            v53 = a4;
          }
          else
          {
            v58 = (_QWORD *)(v56 + 40);
            while (*((_DWORD *)v58 - 2) != v54 || *v58 && (*(_QWORD *)(*v58 + 8 * (v51 >> 6)) & (1 << v51)) == 0)
            {
              v58 += 3;
              if (!--v57)
                goto LABEL_28;
            }
            swift_release();
            v53 = a3;
          }
          v52[v51++] = v53;
        }
        while (v51 != v83);
      }
      swift_getObjectType();
      sub_1B20BFEA4(v72, v71, v70, 0);
      swift_unknownObjectRelease();
      v25 = v73;
      sub_1B20BFEA4((uint64_t)v23, v73, v75, 0);
      v38 = objc_msgSend(v23, sel_storageMode);
      v39 = 0;
      if (v38 != (id)2)
      {
        v40 = (char *)objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
        v41 = v23;
        v39 = &v40[v73];
      }
      memcpy(v39, (const void *)(v74 + 32 * v78), 32 * v80);
      sub_1B20BFEBC(12, v80);
    }
    if ((a6 & 0x100) == 0)
    {
      swift_unknownObjectRelease();
      return swift_unknownObjectRelease();
    }
    v27.i32[0] = *(_DWORD *)(v16 + 116);
    v28.i32[0] = *(_DWORD *)(v16 + 304);
    v90 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32(v28, v27), 0), (int8x16_t)xmmword_1B22AD2D0, (int8x16_t)xmmword_1B22AD2C0);
    swift_getObjectType();
    objc_msgSend(v15, sel_setVertexBytes_length_atIndex_, &v90, 16, v76);
    objc_msgSend(v23, sel_storageMode);
    v42 = (char *)objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
    v43 = v23;
    v44 = vaddq_f32(*(float32x4_t *)(v16 + 288), (float32x4_t)xmmword_1B228D7B0);
    v45 = &v42[32 * v80 + v25];
    *(_OWORD *)v45 = *(_OWORD *)(v16 + 272);
    *((float32x4_t *)v45 + 1) = v44;
    sub_1B20BFEA4((uint64_t)v43, v25, v75, 32 * v80);
    sub_1B20BFEBC(12, 1);
    if ((a6 & 0x10000) != 0)
    {
      sub_1B222A06C();
      sub_1B222A078();
      *(_QWORD *)&v91[0] = sub_1B222A0C0();
      sub_1B2229A0C();
      sub_1B222A0CC();
      sub_1B2228824();
      swift_bridgeObjectRelease();
      v91[2] = v87;
      v91[3] = v88;
      v92 = v89;
      v91[0] = v85;
      v91[1] = v86;
      v46 = sub_1B222A0B4();
      *(double *)v47.i64 = sub_1B1AE4138(v46 | 0xFF000000);
      v90 = v47;
      objc_msgSend(v15, sel_setVertexBytes_length_atIndex_, &v90, 16, v76);
      v48 = v83 - v78;
      if (v83 == v78)
      {
        v82 = xmmword_1B2244E20;
        v84 = (float32x4_t)xmmword_1B2246ED0;
        v49 = &selRef_setWeights_;
        v50 = &selRef_clipWithAnimation_name_;
      }
      else
      {
        v59 = (float32x4_t *)(v74 + 32 * v78 + 16);
        v60 = (float32x4_t)xmmword_1B2244E20;
        v61 = (float32x4_t)xmmword_1B226DDC0;
        v62.i64[0] = 0x3F0000003F000000;
        v62.i64[1] = 0x3F0000003F000000;
        v50 = &selRef_clipWithAnimation_name_;
        do
        {
          v63 = v59[-1];
          v64 = vminnmq_f32(vsubq_f32(v60, v61), vsubq_f32(v63, *v59));
          v65 = vmaxnmq_f32(vaddq_f32(v61, v60), vaddq_f32(v63, *v59));
          v60 = vmulq_f32(vaddq_f32(v64, v65), v62);
          v61 = vmulq_f32(vsubq_f32(v65, v64), v62);
          v59 += 2;
          --v48;
        }
        while (v48);
        v82 = (__int128)v60;
        v84 = vaddq_f32(v61, (float32x4_t)xmmword_1B228D7B0);
        v49 = &selRef_setWeights_;
      }
      v66 = 32 * v80 + 32;
      objc_msgSend(v43, v49[158], v70);
      v67 = (char *)objc_msgSend((id)swift_unknownObjectRetain(), v50[79]);
      v68 = v43;
      v69 = (__int128 *)&v67[v25 + v66];
      *v69 = v82;
      v69[1] = (__int128)v84;
      sub_1B20BFEA4((uint64_t)v68, v25, v75, v66);
      sub_1B20BFEBC(12, 1);
    }
    swift_unknownObjectRelease();
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t sub_1B2001ED0()
{
  uint64_t v0;
  unsigned __int8 v1;
  unsigned __int8 v2;
  int v3;
  double v4;
  uint64_t v5;
  uint64_t v6;
  ValueMetadata *v7;
  _UNKNOWN **v8;

  swift_retain();
  sub_1B20001B0();
  v2 = v1;
  v3 = v1;
  swift_release();
  if (v3 == 2)
    return 0;
  v5 = *(_QWORD *)(*(_QWORD *)(v0 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues)
                 + 8 * *(_QWORD *)thread_worker_index(v4)
                 + 8);
  sub_1B1BBF3BC(0, (unint64_t *)&qword_1ED4BAD80, (unint64_t *)&qword_1ED4B8C90, (unint64_t *)&qword_1ED4B8C70);
  v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_1B226CD10;
  *(_QWORD *)(v6 + 32) = &type metadata for DebugInfoViewDependant;
  *(_QWORD *)(v6 + 40) = &off_1E63A7840;
  v7 = &type metadata for DebugInfoB;
  v8 = &off_1E636D550;
  if ((v2 & 1) != 0)
    v7 = &type metadata for DebugInfoA;
  else
    v8 = &off_1E636D640;
  *(_QWORD *)(v6 + 48) = v7;
  *(_QWORD *)(v6 + 56) = v8;
  return v5;
}

uint64_t sub_1B2001FE0()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for DebugCullingSystem()
{
  return objc_opt_self();
}

uint64_t sub_1B2002014()
{
  uint64_t result;

  result = swift_allocObject();
  *(_WORD *)(result + 16) = 256;
  return result;
}

const char *sub_1B200203C()
{
  return "CullingDebug";
}

uint64_t sub_1B2002050(uint64_t a1)
{
  _QWORD *v1;

  v1 = *(_QWORD **)(a1 + 176);
  swift_retain();
  sub_1B1F22258((uint64_t)&type metadata for DebugCullingSystemState, (uint64_t)&off_1E63AA2C8, v1);
  return swift_release();
}

uint64_t sub_1B20020A4(uint64_t a1)
{
  int v1;
  int v2;
  int v3;

  if (a1 == 1)
  {
    v1 = 0;
  }
  else
  {
    if (!a1)
    {
      v1 = 255;
LABEL_10:
      v2 = 255;
      v3 = 255;
      return sub_1B1B4D2D0(v1, v2, v3);
    }
    if ((a1 & 0xFFFFFFFFFFFFFFFELL) == 2)
    {
      v1 = 0;
      goto LABEL_10;
    }
    if ((a1 & 0xFFFFFFFFFFFFFFFCLL) == 4)
    {
      v1 = 0;
LABEL_15:
      v2 = 255;
      v3 = 0;
      return sub_1B1B4D2D0(v1, v2, v3);
    }
    if ((a1 & 0xFFFFFFFFFFFFFFF8) == 8)
    {
      v1 = 255;
      goto LABEL_15;
    }
    if ((a1 & 0xFFFFFFFFFFFFFFF0) == 0x10)
      return sub_1B1B4D2D0(255, 128, 0);
    if ((a1 & 0xFFFFFFFFFFFFFFE0) == 0x20)
    {
      v1 = 255;
LABEL_23:
      v2 = 0;
      v3 = 0;
      return sub_1B1B4D2D0(v1, v2, v3);
    }
    if ((a1 & 0xFFFFFFFFFFFFFFC0) != 0x40)
    {
      v1 = 0;
      goto LABEL_23;
    }
    v1 = 255;
  }
  v2 = 0;
  v3 = 255;
  return sub_1B1B4D2D0(v1, v2, v3);
}

uint64_t sub_1B2002168(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unsigned __int8 v6;
  unsigned __int8 v7;
  int v8;
  uint64_t result;
  double v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  ValueMetadata *v16;
  _UNKNOWN **v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unsigned int *v25;
  unint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  os_unfair_lock_s *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  os_unfair_lock_s *v44;
  __int128 v45;
  __int128 v46;
  float v47;
  float v48;
  _OWORD *v49;
  uint64_t v50;
  _QWORD *v51;
  _OWORD *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  __int128 *v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;
  os_unfair_lock_s *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  char v70;
  uint64_t v71;
  uint64_t *v72;
  _OWORD *v73;
  uint64_t v74;
  __int128 *v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  char *v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  os_unfair_lock_s *v87;
  __int128 v88;
  __int128 v89;
  float v90;
  float v91;
  _OWORD *v92;
  uint64_t v93;
  _QWORD *v94;
  _OWORD *v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  __int128 *v99;
  __int128 v100;
  uint64_t v101;
  uint64_t v102;
  os_unfair_lock_s *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  char v113;
  uint64_t v114;
  uint64_t *v115;
  _OWORD *v116;
  uint64_t v117;
  __int128 *v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unsigned int *v126;
  uint64_t v127;
  uint64_t *v128;
  uint64_t v129;
  uint64_t v130;
  os_unfair_lock_s *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  _QWORD *v135;
  __int128 *v136;
  __int128 *v137;
  int v138;
  uint64_t v139;
  uint64_t v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  uint64_t v145;
  uint64_t v146;
  int v147;
  uint64_t v148;
  __int128 *v149;
  __int128 *v150;
  uint64_t v151;
  uint64_t v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  _OWORD *v157;
  char *v158;
  uint64_t v159;
  uint64_t v160;
  int v161;
  uint64_t v162;
  unsigned int *v163;
  uint64_t v164;
  uint64_t *v165;
  uint64_t v166;
  uint64_t v167;
  os_unfair_lock_s *v168;
  uint64_t v169;
  _QWORD *v170;
  uint64_t v171;
  uint64_t v172;
  _QWORD *v173;
  __n128 *v174;
  uint64_t v175;
  float32x4_t *v176;
  uint64_t v177;
  unsigned __int32 v178;
  __n128 v179;
  __n128 v180;
  float32x4_t v181;
  float32x4_t v182;
  float32x4_t v183;
  float32x4_t v184;
  float v185;
  float v186;
  float v187;
  float32x4_t v188;
  float32x4_t v189;
  float32x4_t v190;
  uint64_t v191;
  float32x4_t *v192;
  __n128 *v193;
  unsigned __int32 v194;
  __n128 v195;
  __n128 v196;
  float32x4_t v197;
  float32x4_t v198;
  float32x4_t v199;
  float32x4_t v200;
  float v201;
  float v202;
  float v203;
  float32x4_t v204;
  float32x4_t v205;
  float32x4_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  unsigned int *v210;
  uint64_t v211;
  uint64_t *v212;
  uint64_t v213;
  uint64_t v214;
  os_unfair_lock_s *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  _QWORD *v219;
  float32x4_t *v220;
  float32x4_t *v221;
  int v222;
  uint64_t v223;
  uint64_t v224;
  float32x4_t v225;
  float32x4_t v226;
  __int128 v227;
  __int128 v228;
  uint64_t v229;
  uint64_t v230;
  int v231;
  uint64_t v232;
  float32x4_t *v233;
  float32x4_t *v234;
  uint64_t v235;
  uint64_t v236;
  float32x4_t v237;
  float32x4_t v238;
  __int128 v239;
  __int128 v240;
  unint64_t v241;
  char *v242;
  uint64_t v243;
  _QWORD *v244;
  uint64_t v245;
  int v246;
  uint64_t v247;
  uint64_t v248;
  os_unfair_lock_s *v249;
  unint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  _QWORD *v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  _OWORD *v258;
  unint64_t v259;
  uint64_t v260;
  uint64_t v261;
  unint64_t v262;
  uint64_t *v263;
  uint64_t v264;
  void (*v265)(uint64_t);
  _QWORD *v266;
  uint64_t v267;
  BOOL v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  unint64_t v272;
  _QWORD *v273;
  unint64_t v274;
  uint64_t v275;
  unsigned int v276;
  BOOL v277;
  int v278;
  uint64_t v280;
  unint64_t v281;
  _QWORD *v282;
  uint64_t v283;
  uint64_t v284;
  _QWORD *v285;
  unint64_t v286;
  uint64_t v287;
  uint64_t v288;
  _OWORD *v289;
  unint64_t v290;
  uint64_t v291;
  uint64_t v292;
  float32x4_t *v293;
  float32x4_t v294;
  float32x4_t v295;
  float32x4_t v296;
  int v297;
  uint64_t v298;
  uint64_t v299;
  void *v300;
  double v301;
  int32x4_t v302;
  uint64_t v303;
  uint64_t v304;
  __int128 v305;
  unint64_t v306;
  unint64_t v307;
  uint64_t v308;
  int v309;
  _QWORD *v310;
  _QWORD *v311;
  int v312;
  uint64_t v313;
  uint64_t v314;
  char *v315;
  uint64_t v316;
  uint64_t v317;
  _QWORD *v318;
  uint64_t v319;
  __int128 *v320;
  uint64_t v321;
  uint64_t v322;
  _BYTE *v323;
  unint64_t v324;
  uint64_t v325;
  _BYTE *v326;
  _QWORD *v327;
  _OWORD *v328;
  uint64_t v329;
  uint64_t v330;
  char *v331;
  unint64_t v332;
  _QWORD *v333;
  __n128 v334;
  __n128 v335;
  float32x4_t v336;
  float32x4_t v337;
  _QWORD v338[6];
  float32x4_t v339;
  _OWORD v340[6];
  uint64_t v341;
  _BYTE v342[40];
  _OWORD v343[2];
  uint64_t v344;
  _BYTE v345[40];
  _OWORD v346[2];
  uint64_t v347;
  _BYTE v348[40];
  _OWORD v349[2];
  uint64_t v350;
  _BYTE v351[40];
  _OWORD v352[2];
  uint64_t v353;
  _BYTE v354[40];
  _OWORD v355[2];
  uint64_t v356;
  __int128 v357;
  __int128 v358;
  uint64_t v359;
  _OWORD v360[2];
  uint64_t v361;
  _OWORD v362[2];
  uint64_t v363;
  _OWORD v364[2];
  uint64_t v365;
  _OWORD v366[2];
  uint64_t v367;
  __int128 v368;
  __int128 v369;
  uint64_t v370;
  _OWORD v371[2];
  uint64_t v372;
  _OWORD v373[2];
  uint64_t v374;
  _OWORD v375[2];
  uint64_t v376;
  _OWORD v377[2];
  uint64_t v378;
  _OWORD v379[2];
  uint64_t v380;
  uint64_t v381;
  int v382;
  char v383;
  uint64_t v384;
  char v385;
  uint64_t v386;
  uint64_t v387;
  int v388;
  char v389;
  uint64_t v390;
  char v391;
  uint64_t v392;
  uint64_t v393;
  int v394;
  char v395;
  uint64_t v396;
  char v397;
  uint64_t v398;
  uint64_t v399;
  int v400;
  char v401;
  uint64_t v402;
  char v403;
  uint64_t v404;
  uint64_t v405;
  int v406;
  char v407;
  uint64_t v408;
  char v409;
  uint64_t v410;
  _BYTE v411[48];
  _QWORD v412[12];
  _QWORD v413[12];
  _QWORD v414[12];
  _QWORD v415[12];
  _QWORD v416[12];
  _OWORD v417[2];
  uint64_t v418;
  _BYTE *v419;
  uint64_t v420;
  uint64_t v421;
  _QWORD *v422;
  uint64_t v423;
  _OWORD v424[2];
  uint64_t v425;
  _BYTE *v426;
  _OWORD *v427;
  uint64_t v428;
  unint64_t v429;
  uint64_t v430;
  _OWORD v431[2];
  uint64_t v432;
  _OWORD *v433;
  uint64_t v434;
  uint64_t v435;
  _QWORD *v436;
  uint64_t v437;
  _OWORD v438[2];
  uint64_t v439;
  _BYTE *v440;
  _OWORD *v441;
  uint64_t v442;
  unint64_t v443;
  uint64_t v444;
  _OWORD v445[2];
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  _QWORD *v450;
  uint64_t v451;
  float32x4_t v452;
  uint64_t v453;
  uint64_t v454;
  char v455;
  float32x4_t v456;
  float32x4_t v457;
  __int128 v458;
  __int128 v459;
  __int128 v460;
  __int128 v461;
  char v462;
  float32x4_t v463;
  uint64_t v464;
  uint64_t v465;
  _BYTE v466[72];
  _BYTE v467[40];
  __int128 v468[6];
  char v469;
  __int128 v470[2];
  uint64_t v471;
  _BYTE v472[40];
  __int128 v473[6];
  char v474;
  __int128 v475[6];
  char v476;
  _BYTE v477[40];
  __int128 v478[2];
  uint64_t v479;
  __int128 v480;
  __int128 v481;
  _BYTE v482[25];
  __int128 v483[2];
  uint64_t v484;
  uint64_t v485;
  _BYTE v486[40];
  __int128 v487;
  _BYTE v488[96];
  __int128 v489;
  _BYTE v490[96];
  float32x4_t v491;
  uint64_t v492;
  uint64_t v493;
  __int128 v494;
  __int128 v495;
  __int128 v496;
  __int128 v497;
  char v498;
  uint64_t v499;

  v499 = *MEMORY[0x1E0C80C00];
  swift_retain();
  sub_1B20001B0();
  v7 = v6;
  v8 = v6;
  result = swift_release();
  if (v8 == 2)
    return result;
  v11 = 0;
  v306 = HIDWORD(a2);
  v12 = a1;
  v13 = *(_QWORD *)(*(_QWORD *)(a3 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues)
                  + 8 * *(_QWORD *)thread_worker_index(v10)
                  + 8);
  sub_1B1BBF3BC(0, (unint64_t *)&qword_1ED4BAD80, (unint64_t *)&qword_1ED4B8C90, (unint64_t *)&qword_1ED4B8C70);
  v14 = swift_allocObject();
  v15 = v14;
  v16 = &type metadata for DebugInfoA;
  if ((v7 & 1) == 0)
    v16 = &type metadata for DebugInfoB;
  *(_QWORD *)(v14 + 32) = v16;
  v324 = v14 + 32;
  v17 = &off_1E636D550;
  v305 = xmmword_1B226D240;
  *(_OWORD *)(v14 + 16) = xmmword_1B226D240;
  if ((v7 & 1) == 0)
    v17 = &off_1E636D640;
  *(_QWORD *)(v14 + 40) = v17;
  v304 = v12;
  v18 = *(unsigned __int16 *)(v12 + 74);
  v307 = a2;
  v308 = a3;
  v309 = v18;
  if ((v18 & 1) != 0)
  {
    sub_1B1D15DF4(a2, (uint64_t)v411);
    sub_1B1A18378((uint64_t)v411, (uint64_t)&v452, &qword_1ED4BA220, (uint64_t)&type metadata for WorldAABB);
    if ((v455 & 1) == 0)
    {
      v337 = v452;
      v19 = v454;
      v20 = v453;
      v21 = sub_1B1B4D2D0(255, 255, 255);
      v491 = v337;
      v492 = v20;
      v493 = v19;
      v494 = 0u;
      v495 = 0u;
      v496 = 0u;
      v497 = 0u;
      v498 = 6;
      LOBYTE(v489) = 1;
      sub_1B217F570(v15, 0x100000000uLL, v13, (__int128 *)&v491, v21);
    }
    LOBYTE(v18) = v309;
  }
  v337.i64[0] = v13;
  v325 = v15;
  if ((v18 & 4) == 0)
  {
    if ((v18 & 8) != 0)
      goto LABEL_111;
LABEL_12:
    if ((v18 & 0x10) != 0)
      goto LABEL_136;
    goto LABEL_13;
  }
  if (qword_1ED4B7DB8 != -1)
    swift_once();
  v405 = qword_1ED4D09F8;
  v406 = 0;
  v407 = 2;
  v408 = 0;
  v409 = 2;
  v410 = 0;
  swift_retain();
  sub_1B19EFD9C((uint64_t)v342);
  swift_release();
  sub_1B1CC6310(0, (unint64_t *)&qword_1ED4BAD30, (unint64_t *)&qword_1ED4B89D0, (uint64_t)&protocol descriptor for ClassComponent, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  v22 = swift_allocObject();
  *(_OWORD *)(v22 + 16) = v305;
  *(_QWORD *)(v22 + 56) = &type metadata for EmitterReference;
  *(_QWORD *)(v22 + 64) = &off_1E6387218;
  *(_DWORD *)(v22 + 32) = v307;
  *(_DWORD *)(v22 + 36) = v306;
  sub_1B1E6892C(v343);
  swift_setDeallocating();
  sub_1B1A025A0(0, (unint64_t *)&qword_1ED4B89D0);
  swift_arrayDestroy();
  swift_deallocClassInstance();
  sub_1B19ED720((uint64_t)v342);
  v379[0] = v343[0];
  v379[1] = v343[1];
  v380 = v344;
  sub_1B1E8FCE4(v308, (uint64_t)v379, 0x200000000, v412);
  sub_1B1A18378((uint64_t)v412, (uint64_t)v445, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (!*(_QWORD *)&v445[0])
  {
    sub_1B19ED720((uint64_t)v343);
    v13 = v337.i64[0];
    goto LABEL_110;
  }
  v357 = v445[0];
  v358 = v445[1];
  v359 = v446;
  v13 = v337.i64[0];
  if (v451 <= 0 || (v314 = v448) == 0)
  {
    sub_1B19ED720((uint64_t)v343);
    sub_1B1A086DC(v412, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
    goto LABEL_110;
  }
  v313 = v447;
  v317 = v450[4];
  v23 = *(unsigned __int8 *)(v449 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
  v318 = v450;
  v310 = v450 + 8;
  v311 = v450 + 6;
  v328 = v488;
  v326 = v490;
  swift_retain();
  swift_retain();
  swift_retain();
  v24 = 0;
  v327 = (_QWORD *)(v15 + 32);
  v320 = (__int128 *)(v15 + 64);
  v312 = v23;
  do
  {
    v25 = (unsigned int *)(v313 + 48 * v24);
    v26 = *v25;
    v27 = (uint64_t *)*((_QWORD *)v25 + 2);
    v28 = *((_QWORD *)v25 + 3);
    v29 = *((_QWORD *)v25 + 4);
    v30 = *((_QWORD *)v25 + 5);
    v331 = (char *)v25[1];
    v332 = v29;
    v316 = v24;
    v336.i64[0] = v11;
    if (v23)
    {
      v31 = *(os_unfair_lock_s **)(v30 + 376);
      swift_retain();
      os_unfair_lock_lock(v31);
      os_unfair_lock_lock(*(os_unfair_lock_t *)(v30 + 344));
    }
    else
    {
      swift_retain();
    }
    ecs_stack_allocator_push_snapshot(v317);
    sub_1B1A18378((uint64_t)v311, (uint64_t)v486, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
    v32 = v318;
    v33 = v318[4];
    v34 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v30 + 40) + 16) + 32) + 16) + 1;
    swift_retain();
    v32[6] = ecs_stack_allocator_allocate(v33, 48 * v34, 8);
    v32[7] = v34;
    v35 = v310;
    v310[1] = 0;
    v35[2] = 0;
    *v35 = 0;
    swift_release();
    v36 = v332;
    v334.n128_u64[0] = sub_1B1A12038((uint64_t)&type metadata for Position, (uint64_t)&off_1E63C2398, v27, v28, v332, (uint64_t)v32);
    v315 = (char *)v30;
    v333 = (_QWORD *)sub_1B1A12038((uint64_t)&type metadata for Scale, (uint64_t)&off_1E63BA9B8, v27, v28, v36, (uint64_t)v32);
    if (!v27)
    {
      v11 = v336.i64[0];
      if ((_DWORD)v26 == (_DWORD)v331)
        goto LABEL_67;
      v81 = *(_QWORD *)(v325 + 16);
      v330 = 16 * v81 + 32;
      v82 = sub_1B1B4D2D0(255, 128, 0);
      LODWORD(v329) = v82;
      v323 = &v327[2 * v81];
      v321 = 16 * v81;
      v322 = v81 & 0x7FFFFFFFFFFFFFFCLL;
      v319 = v81 & 0x7FFFFFFFFFFFFFFCLL | 2;
      v332 = v81;
      while (1)
      {
        v88 = *(_OWORD *)(v334.n128_u64[0] + 16 * v26);
        v89 = *(_OWORD *)&v333[2 * v26];
        LODWORD(v90) = HIDWORD(v333[2 * v26]);
        if (v90 >= *(float *)&v89)
        {
          if ((LODWORD(v90) & 0x7FFFFF) != 0)
            LODWORD(v91) = *(_OWORD *)&v333[2 * v26];
          else
            LODWORD(v91) = HIDWORD(v333[2 * v26]);
          if ((~LODWORD(v90) & 0x7F800000) == 0)
            v90 = v91;
        }
        else
        {
          LODWORD(v90) = *(_OWORD *)&v333[2 * v26];
        }
        if (*((float *)&v89 + 2) >= v90)
        {
          if ((DWORD2(v89) & 0x7FFFFF) == 0)
            LODWORD(v90) = v333[2 * v26 + 1];
          if ((~DWORD2(v89) & 0x7F800000) != 0)
            LODWORD(v90) = v333[2 * v26 + 1];
        }
        *((float *)&v88 + 3) = v90;
        v489 = v88;
        v92 = v326;
        *(_OWORD *)v326 = 0u;
        v92[1] = 0u;
        v92[2] = 0u;
        v92[3] = 0u;
        v92[4] = 0u;
        v490[80] = 3;
        MEMORY[0x1E0C80A78](v82, v83);
        *(&v303 - 2) = (uint64_t)&v489;
        *((_DWORD *)&v303 - 2) = v329;
        v93 = *(_QWORD *)(v13 + 32);
        ecs_stack_allocator_push_snapshot(v93);
        v94 = ecs_stack_allocator_allocate(v93, v330, 8);
        v95 = v94;
        *v94 = &type metadata for DebugInfoWireframePrimitive;
        v94[1] = &off_1E63B2990;
        v94[2] = &type metadata for DebugInfoColor;
        v94[3] = &off_1E637ED40;
        v336.i64[0] = (uint64_t)&v303;
        v335.n128_u64[0] = (unint64_t)(&v303 - 4);
        if (!v81)
        {
          v97 = 2;
          goto LABEL_93;
        }
        if (v81 < 4 || v94 + 4 < (_QWORD *)v323 && v324 < (unint64_t)v94 + v321 + 32)
          break;
        v116 = v94 + 8;
        v117 = v322;
        v118 = v320;
        do
        {
          v120 = *(v118 - 2);
          v119 = *(v118 - 1);
          v122 = *v118;
          v121 = v118[1];
          v118 += 4;
          *(v116 - 2) = v120;
          *(v116 - 1) = v119;
          *v116 = v122;
          v116[1] = v121;
          v116 += 4;
          v117 -= 4;
        }
        while (v117);
        v96 = v322;
        v97 = v319;
        if (v81 != v322)
          goto LABEL_89;
LABEL_93:
        v101 = *(_QWORD *)(v13 + 16);
        v102 = v101 + OBJC_IVAR____TtC3VFX13EntityManager_lock;
        v103 = *(os_unfair_lock_s **)(v101 + OBJC_IVAR____TtC3VFX13EntityManager_lock + 24);
        swift_retain();
        os_unfair_lock_lock(v103);
        v104 = sub_1B1DAD870((uint64_t)v95, v97, MEMORY[0x1E0DEE9D8]);
        v106 = v104;
        v107 = v105;
        v108 = *(_QWORD **)(v101 + 72);
        v109 = v108[2];
        if (v109)
        {
          v110 = v108[4];
          if (*(_QWORD *)(v110 + 144) != v104)
          {
            v114 = v109 - 1;
            if (!v114)
              goto LABEL_70;
            v115 = v108 + 5;
            while (1)
            {
              v110 = *v115;
              if (*(_QWORD *)(*v115 + 144) == v104)
                break;
              ++v115;
              if (!--v114)
                goto LABEL_70;
            }
          }
          v111 = *(_QWORD *)(v110 + 16);
          if (*(_QWORD *)(v111 + 16))
          {
            v112 = sub_1B1DC3AC8(v105);
            if ((v113 & 1) != 0)
            {
              v85 = *(_DWORD *)(*(_QWORD *)(v111 + 56) + 4 * v112);
              goto LABEL_71;
            }
          }
        }
LABEL_70:
        v84 = sub_1B1DC9E90(v95, v97);
        v85 = sub_1B1DA8838(v106, v107, v84, MEMORY[0x1E0DEE9D8]);
        swift_release();
LABEL_71:
        ++v26;
        v86 = *(_QWORD *)(*(_QWORD *)(v101 + 80) + 8 * v85 + 32);
        v87 = *(os_unfair_lock_s **)(v102 + 24);
        swift_retain();
        os_unfair_lock_unlock(v87);
        swift_release();
        LOBYTE(v483[0]) = 1;
        v13 = v337.i64[0];
        sub_1B1F0FE74(v86, 1, 1, 0x100000000uLL, v337.i64[0], (uint64_t)sub_1B1D86A08, v335.n128_i64[0]);
        swift_release();
        v82 = ecs_stack_allocator_pop_snapshot(*(_QWORD *)(v13 + 32));
        v81 = v332;
        if ((char *)v26 == v331)
          goto LABEL_67;
      }
      v96 = 0;
      v97 = 2;
LABEL_89:
      v98 = v81 - v96;
      v99 = (__int128 *)&v327[2 * v96];
      do
      {
        v100 = *v99++;
        *(_OWORD *)&v94[2 * v97++] = v100;
        --v98;
      }
      while (v98);
      goto LABEL_93;
    }
    v11 = v336.i64[0];
    if (v36)
    {
      v37 = *(char **)(v325 + 16);
      v330 = 16 * (_QWORD)v37 + 32;
      v38 = sub_1B1B4D2D0(255, 128, 0);
      LODWORD(v329) = v38;
      v40 = 0;
      v323 = &v327[2 * (_QWORD)v37];
      v321 = 16 * (_QWORD)v37;
      v322 = (unint64_t)v37 & 0x7FFFFFFFFFFFFFFCLL;
      v319 = (unint64_t)v37 & 0x7FFFFFFFFFFFFFFCLL | 2;
      v331 = v37;
      while (1)
      {
        v45 = *(_OWORD *)(v334.n128_u64[0] + 16 * v40);
        v46 = *(_OWORD *)&v333[2 * v40];
        LODWORD(v47) = HIDWORD(v333[2 * v40]);
        if (v47 >= *(float *)&v46)
        {
          if ((LODWORD(v47) & 0x7FFFFF) != 0)
            LODWORD(v48) = *(_OWORD *)&v333[2 * v40];
          else
            LODWORD(v48) = HIDWORD(v333[2 * v40]);
          if ((~LODWORD(v47) & 0x7F800000) == 0)
            v47 = v48;
        }
        else
        {
          LODWORD(v47) = *(_OWORD *)&v333[2 * v40];
        }
        v336.i64[0] = v11;
        if (*((float *)&v46 + 2) >= v47)
        {
          if ((DWORD2(v46) & 0x7FFFFF) == 0)
            v47 = *((float *)&v46 + 2);
          if ((~DWORD2(v46) & 0x7F800000) != 0)
            v47 = *((float *)&v46 + 2);
        }
        *((float *)&v45 + 3) = v47;
        v487 = v45;
        v49 = v328;
        *v328 = 0u;
        v49[1] = 0u;
        v49[2] = 0u;
        v49[3] = 0u;
        v49[4] = 0u;
        v488[80] = 3;
        MEMORY[0x1E0C80A78](v38, v39);
        *(&v303 - 2) = (uint64_t)&v487;
        *((_DWORD *)&v303 - 2) = v329;
        v50 = *(_QWORD *)(v13 + 32);
        ecs_stack_allocator_push_snapshot(v50);
        v51 = ecs_stack_allocator_allocate(v50, v330, 8);
        v52 = v51;
        *v51 = &type metadata for DebugInfoWireframePrimitive;
        v51[1] = &off_1E63B2990;
        v51[2] = &type metadata for DebugInfoColor;
        v51[3] = &off_1E637ED40;
        v335.n128_u64[0] = (unint64_t)&v303;
        if (!v37)
        {
          v54 = 2;
          goto LABEL_52;
        }
        if ((unint64_t)v37 < 4 || v51 + 4 < (_QWORD *)v323 && v324 < (unint64_t)v51 + v321 + 32)
          break;
        v73 = v51 + 8;
        v74 = v322;
        v75 = v320;
        do
        {
          v77 = *(v75 - 2);
          v76 = *(v75 - 1);
          v79 = *v75;
          v78 = v75[1];
          v75 += 4;
          *(v73 - 2) = v77;
          *(v73 - 1) = v76;
          *v73 = v79;
          v73[1] = v78;
          v73 += 4;
          v74 -= 4;
        }
        while (v74);
        v53 = v322;
        v54 = v319;
        if (v37 != (char *)v322)
          goto LABEL_48;
LABEL_52:
        v58 = *(_QWORD *)(v337.i64[0] + 16);
        v59 = v58 + OBJC_IVAR____TtC3VFX13EntityManager_lock;
        v60 = *(os_unfair_lock_s **)(v58 + OBJC_IVAR____TtC3VFX13EntityManager_lock + 24);
        swift_retain();
        os_unfair_lock_lock(v60);
        v61 = sub_1B1DAD870((uint64_t)v52, v54, MEMORY[0x1E0DEE9D8]);
        v63 = v61;
        v64 = v62;
        v65 = *(_QWORD **)(v58 + 72);
        v66 = v65[2];
        if (v66)
        {
          v67 = v65[4];
          if (*(_QWORD *)(v67 + 144) != v61)
          {
            v71 = v66 - 1;
            if (!v71)
              goto LABEL_29;
            v72 = v65 + 5;
            while (1)
            {
              v67 = *v72;
              if (*(_QWORD *)(*v72 + 144) == v61)
                break;
              ++v72;
              if (!--v71)
                goto LABEL_29;
            }
          }
          v68 = *(_QWORD *)(v67 + 16);
          if (*(_QWORD *)(v68 + 16))
          {
            v69 = sub_1B1DC3AC8(v62);
            if ((v70 & 1) != 0)
            {
              v42 = *(_DWORD *)(*(_QWORD *)(v68 + 56) + 4 * v69);
              goto LABEL_30;
            }
          }
        }
LABEL_29:
        v41 = sub_1B1DC9E90(v52, v54);
        v42 = sub_1B1DA8838(v63, v64, v41, MEMORY[0x1E0DEE9D8]);
        swift_release();
LABEL_30:
        v43 = *(_QWORD *)(*(_QWORD *)(v58 + 80) + 8 * v42 + 32);
        v44 = *(os_unfair_lock_s **)(v59 + 24);
        swift_retain();
        os_unfair_lock_unlock(v44);
        swift_release();
        LOBYTE(v483[0]) = 1;
        v13 = v337.i64[0];
        v11 = v336.i64[0];
        sub_1B1F0FE74(v43, 1, 1, 0x100000000uLL, v337.i64[0], (uint64_t)sub_1B2010E34, (uint64_t)(&v303 - 4));
        swift_release();
        v38 = ecs_stack_allocator_pop_snapshot(*(_QWORD *)(v13 + 32));
        ++v40;
        v37 = v331;
        if (v40 == v332)
          goto LABEL_67;
      }
      v53 = 0;
      v54 = 2;
LABEL_48:
      v55 = &v37[-v53];
      v56 = (__int128 *)&v327[2 * v53];
      do
      {
        v57 = *v56++;
        *(_OWORD *)&v51[2 * v54++] = v57;
        --v55;
      }
      while (v55);
      goto LABEL_52;
    }
LABEL_67:
    v360[0] = v357;
    v360[1] = v358;
    v361 = v359;
    sub_1B1F05D48(v318, (unsigned __int16 **)v360, (uint64_t)v486);
    v80 = v315;
    sub_1B1F03804(v315);
    ecs_stack_allocator_pop_snapshot(v317);
    v23 = v312;
    if ((v312 & 1) != 0)
    {
      os_unfair_lock_unlock(*((os_unfair_lock_t *)v80 + 43));
      os_unfair_lock_unlock(*((os_unfair_lock_t *)v80 + 47));
    }
    swift_release();
    v24 = v316 + 1;
  }
  while (v316 + 1 != v314);
  sub_1B19ED720((uint64_t)v343);
  sub_1B1A086DC(v412, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
  sub_1B1A086DC(v412, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
  v15 = v325;
LABEL_110:
  LOBYTE(v18) = v309;
  if ((v309 & 8) == 0)
    goto LABEL_12;
LABEL_111:
  if (qword_1ED4B7DB8 != -1)
    swift_once();
  v399 = qword_1ED4D09F8;
  v400 = 0;
  v401 = 2;
  v402 = 0;
  v403 = 2;
  v404 = 0;
  swift_retain();
  sub_1B19EFB98((uint64_t)v345);
  swift_release();
  sub_1B1CC6310(0, (unint64_t *)&qword_1ED4BAD30, (unint64_t *)&qword_1ED4B89D0, (uint64_t)&protocol descriptor for ClassComponent, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  v123 = swift_allocObject();
  *(_OWORD *)(v123 + 16) = v305;
  *(_QWORD *)(v123 + 56) = &type metadata for EmitterReference;
  *(_QWORD *)(v123 + 64) = &off_1E6387218;
  *(_DWORD *)(v123 + 32) = v307;
  *(_DWORD *)(v123 + 36) = v306;
  sub_1B1E6892C(v346);
  swift_setDeallocating();
  sub_1B1A025A0(0, (unint64_t *)&qword_1ED4B89D0);
  swift_arrayDestroy();
  swift_deallocClassInstance();
  sub_1B19ED720((uint64_t)v345);
  v377[0] = v346[0];
  v377[1] = v346[1];
  v378 = v347;
  sub_1B1E8FCE4(v308, (uint64_t)v377, 0x200000000, v413);
  sub_1B1A18378((uint64_t)v413, (uint64_t)v438, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (!*(_QWORD *)&v438[0])
  {
    sub_1B19ED720((uint64_t)v346);
    goto LABEL_134;
  }
  v13 = v337.i64[0];
  if (v444 > 0 && (v328 = v441) != 0)
  {
    v124 = *(_QWORD *)(v443 + 32);
    LODWORD(v333) = *(unsigned __int8 *)(v442 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
    v362[0] = v438[0];
    v362[1] = v438[1];
    v326 = v440;
    v363 = v439;
    v334.n128_u64[0] = v443;
    v323 = (_BYTE *)(v443 + 64);
    v324 = v443 + 48;
    v335.n128_u64[0] = (unint64_t)&v485;
    swift_retain();
    swift_retain();
    swift_retain();
    v125 = 0;
    v327 = (_QWORD *)v124;
    do
    {
      v126 = (unsigned int *)&v326[48 * v125];
      v330 = *v126;
      v329 = v126[1];
      v128 = (uint64_t *)*((_QWORD *)v126 + 2);
      v127 = *((_QWORD *)v126 + 3);
      v130 = *((_QWORD *)v126 + 4);
      v129 = *((_QWORD *)v126 + 5);
      v336.i64[0] = v11;
      v332 = v125;
      if ((_DWORD)v333)
      {
        v131 = *(os_unfair_lock_s **)(v129 + 376);
        swift_retain_n();
        os_unfair_lock_lock(v131);
        os_unfair_lock_lock(*(os_unfair_lock_t *)(v129 + 344));
        swift_release();
      }
      else
      {
        swift_retain();
      }
      ecs_stack_allocator_push_snapshot(v124);
      sub_1B1A18378(v324, (uint64_t)v477, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
      v132 = v334.n128_u64[0];
      v133 = *(_QWORD *)(v334.n128_u64[0] + 32);
      v134 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v129 + 40) + 16) + 32) + 16) + 1;
      swift_retain();
      *(_QWORD *)(v132 + 48) = ecs_stack_allocator_allocate(v133, 48 * v134, 8);
      *(_QWORD *)(v132 + 56) = v134;
      v135 = v323;
      *((_QWORD *)v323 + 1) = 0;
      v135[2] = 0;
      *v135 = 0;
      swift_release();
      v136 = (__int128 *)sub_1B1A12038((uint64_t)&type metadata for Position, (uint64_t)&off_1E63C2398, v128, v127, v130, v132);
      v137 = (__int128 *)sub_1B1A12038((uint64_t)&type metadata for Velocity, (uint64_t)&off_1E63C30D0, v128, v127, v130, v132);
      v331 = (char *)v129;
      if (v128)
      {
        v11 = v336.i64[0];
        if (v130)
        {
          v138 = sub_1B1B4D2D0(255, 0, 255);
          v139 = v337.i64[0];
          v140 = v325;
          do
          {
            v141 = *v136++;
            v142 = v141;
            v143 = *v137++;
            v144 = v143;
            HIDWORD(v142) = 1.0;
            HIDWORD(v144) = 0;
            v478[0] = v142;
            v478[1] = v144;
            v479 = 2;
            v480 = 0u;
            v481 = 0u;
            memset(v482, 0, sizeof(v482));
            LOBYTE(v475[0]) = 1;
            sub_1B217F570(v140, 0x100000000uLL, v139, v478, v138);
            --v130;
          }
          while (v130);
        }
      }
      else
      {
        v146 = v329;
        v145 = v330;
        v11 = v336.i64[0];
        if ((_DWORD)v330 != (_DWORD)v329)
        {
          v147 = sub_1B1B4D2D0(255, 0, 255);
          v148 = v146 - v145;
          v149 = &v137[v145];
          v150 = &v136[v145];
          v151 = v337.i64[0];
          v152 = v325;
          do
          {
            v153 = *v150++;
            v154 = v153;
            v155 = *v149++;
            v156 = v155;
            HIDWORD(v154) = 1.0;
            HIDWORD(v156) = 0;
            v483[0] = v154;
            v483[1] = v156;
            v484 = 2;
            v157 = (_OWORD *)v335.n128_u64[0];
            *(_OWORD *)v335.n128_u64[0] = 0u;
            v157[1] = 0u;
            v157[2] = 0u;
            *(_OWORD *)((char *)v157 + 41) = 0u;
            LOBYTE(v475[0]) = 1;
            sub_1B217F570(v152, 0x100000000uLL, v151, v483, v147);
            --v148;
          }
          while (v148);
        }
      }
      sub_1B1F05D48(v334.n128_u64[0], (unsigned __int16 **)v362, (uint64_t)v477);
      v158 = v331;
      sub_1B1F03804(v331);
      v124 = (uint64_t)v327;
      ecs_stack_allocator_pop_snapshot((uint64_t)v327);
      if ((v333 & 1) != 0)
      {
        os_unfair_lock_unlock(*((os_unfair_lock_t *)v158 + 43));
        os_unfair_lock_unlock(*((os_unfair_lock_t *)v158 + 47));
      }
      swift_release();
      v125 = v332 + 1;
      v15 = v325;
    }
    while ((_OWORD *)(v332 + 1) != v328);
    sub_1B19ED720((uint64_t)v346);
    sub_1B1A086DC(v413, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
    sub_1B1A086DC(v413, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
LABEL_134:
    v13 = v337.i64[0];
  }
  else
  {
    sub_1B19ED720((uint64_t)v346);
    sub_1B1A086DC(v413, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
  }
  LOBYTE(v18) = v309;
  if ((v309 & 0x10) == 0)
  {
LABEL_13:
    if ((v18 & 0x20) != 0)
      goto LABEL_162;
    goto LABEL_14;
  }
LABEL_136:
  if (qword_1ED4B7DB8 != -1)
    swift_once();
  v393 = qword_1ED4D09F8;
  v394 = 0;
  v395 = 2;
  v396 = 0;
  v397 = 2;
  v398 = 0;
  swift_retain();
  sub_1B19F2BF8((uint64_t)v348);
  swift_release();
  sub_1B1CC6310(0, (unint64_t *)&qword_1ED4BAD30, (unint64_t *)&qword_1ED4B89D0, (uint64_t)&protocol descriptor for ClassComponent, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  v159 = swift_allocObject();
  *(_OWORD *)(v159 + 16) = v305;
  *(_QWORD *)(v159 + 56) = &type metadata for EmitterReference;
  *(_QWORD *)(v159 + 64) = &off_1E6387218;
  *(_DWORD *)(v159 + 32) = v307;
  *(_DWORD *)(v159 + 36) = v306;
  sub_1B1E6892C(v349);
  swift_setDeallocating();
  sub_1B1A025A0(0, (unint64_t *)&qword_1ED4B89D0);
  swift_arrayDestroy();
  swift_deallocClassInstance();
  sub_1B19ED720((uint64_t)v348);
  v375[0] = v349[0];
  v375[1] = v349[1];
  v376 = v350;
  sub_1B1E8FCE4(v308, (uint64_t)v375, 0x200000000, v414);
  sub_1B1A18378((uint64_t)v414, (uint64_t)v431, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (!*(_QWORD *)&v431[0])
  {
    sub_1B19ED720((uint64_t)v349);
    v13 = v337.i64[0];
    goto LABEL_161;
  }
  v13 = v337.i64[0];
  if (v437 <= 0 || (v329 = v434) == 0)
  {
    sub_1B19ED720((uint64_t)v349);
    goto LABEL_160;
  }
  v160 = v436[4];
  v161 = *(unsigned __int8 *)(v435 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
  v364[0] = v431[0];
  v364[1] = v431[1];
  v365 = v432;
  v327 = v436 + 6;
  v328 = v433;
  v333 = v436;
  v326 = v436 + 8;
  swift_retain();
  swift_retain();
  swift_retain();
  v162 = 0;
  LODWORD(v324) = v161;
  while (2)
  {
    v163 = (unsigned int *)&v328[3 * v162];
    v331 = (char *)*v163;
    v332 = v162;
    v330 = v163[1];
    v165 = (uint64_t *)*((_QWORD *)v163 + 2);
    v164 = *((_QWORD *)v163 + 3);
    v166 = *((_QWORD *)v163 + 4);
    v167 = *((_QWORD *)v163 + 5);
    v336.i64[0] = v11;
    if (v161)
    {
      v168 = *(os_unfair_lock_s **)(v167 + 376);
      swift_retain_n();
      os_unfair_lock_lock(v168);
      os_unfair_lock_lock(*(os_unfair_lock_t *)(v167 + 344));
      swift_release();
    }
    else
    {
      swift_retain();
    }
    v169 = v160;
    ecs_stack_allocator_push_snapshot(v160);
    sub_1B1A18378((uint64_t)v327, (uint64_t)v472, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
    v170 = v333;
    v171 = v333[4];
    v172 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v167 + 40) + 16) + 32) + 16) + 1;
    swift_retain();
    v170[6] = ecs_stack_allocator_allocate(v171, 48 * v172, 8);
    v170[7] = v172;
    v173 = v326;
    *((_QWORD *)v326 + 1) = 0;
    v173[2] = 0;
    *v173 = 0;
    swift_release();
    v174 = (__n128 *)sub_1B1A12038((uint64_t)&type metadata for Position, (uint64_t)&off_1E63C2398, v165, v164, v166, (uint64_t)v170);
    v175 = sub_1B1A12038((uint64_t)&type metadata for Orientation, (uint64_t)&off_1E6371540, v165, v164, v166, (uint64_t)v170);
    v176 = (float32x4_t *)v175;
    if (v165)
    {
      v11 = v336.i64[0];
      v160 = v169;
      if (v166)
      {
        memset(v473, 0, sizeof(v473));
        v474 = 12;
        v13 = v337.i64[0];
        v177 = v325;
        v178 = v335.n128_u32[3];
        do
        {
          v179 = *v174++;
          v180 = v179;
          v180.n128_u32[3] = v178;
          v335 = v180;
          v181 = *v176++;
          v182 = v181;
          v183 = vmulq_f32(v182, v182);
          v184 = vmulq_laneq_f32(v182, v182, 3);
          v185 = vmulq_lane_f32(v182, *(float32x2_t *)v182.f32, 1).f32[0];
          v186 = v183.f32[1];
          v180.n128_u32[3] = 1.0;
          v187 = 0.5 - v183.f32[0];
          *(float32x2_t *)v182.f32 = vmul_laneq_f32(*(float32x2_t *)v182.f32, v182, 2);
          v188.i32[3] = 0;
          v188.f32[0] = (float)(0.5 - v183.f32[1]) - v183.f32[2];
          v189.i32[3] = 0;
          v188.f32[1] = v185 + v184.f32[2];
          v189.f32[0] = v185 - v184.f32[2];
          v189.f32[1] = (float)(0.5 - v183.f32[0]) - v183.f32[2];
          v188.f32[2] = v182.f32[0] - v184.f32[1];
          v189.f32[2] = v182.f32[1] + v184.f32[0];
          *(int32x2_t *)v183.f32 = vrev64_s32(*(int32x2_t *)v184.f32);
          v184.i32[0] = vadd_f32(*(float32x2_t *)v182.f32, *(float32x2_t *)v183.f32).u32[0];
          v190.i64[0] = 0x4000000040000000;
          v190.i64[1] = 0x4000000040000000;
          v184.i32[1] = vsub_f32(*(float32x2_t *)&v182, *(float32x2_t *)&v183).i32[1];
          v184.f32[2] = v187 - v186;
          v184.i32[3] = 0;
          LOBYTE(v470[0]) = 1;
          sub_1B217F044(v177, 0x100000000uLL, v13, v473, (__n128)vmulq_f32(v190, v188), (__n128)vmulq_f32(v190, v189), (__n128)vmulq_f32(v190, v184), v180);
          v178 = v335.n128_u32[3];
          --v166;
        }
        while (v166);
        v15 = v177;
        goto LABEL_155;
      }
LABEL_152:
      v13 = v337.i64[0];
      v15 = v325;
      goto LABEL_155;
    }
    v11 = v336.i64[0];
    v160 = v169;
    if ((_DWORD)v331 == (_DWORD)v330)
      goto LABEL_152;
    v191 = v330 - (_QWORD)v331;
    memset(v475, 0, sizeof(v475));
    v192 = (float32x4_t *)(v175 + 16 * (_QWORD)v331);
    v193 = &v174[(_QWORD)v331];
    v476 = 12;
    v13 = v337.i64[0];
    v15 = v325;
    v194 = v334.n128_u32[3];
    do
    {
      v195 = *v193++;
      v196 = v195;
      v196.n128_u32[3] = v194;
      v334 = v196;
      v197 = *v192++;
      v198 = v197;
      v199 = vmulq_f32(v198, v198);
      v200 = vmulq_laneq_f32(v198, v198, 3);
      v201 = vmulq_lane_f32(v198, *(float32x2_t *)v198.f32, 1).f32[0];
      v202 = v199.f32[1];
      v196.n128_u32[3] = 1.0;
      v203 = 0.5 - v199.f32[0];
      *(float32x2_t *)v198.f32 = vmul_laneq_f32(*(float32x2_t *)v198.f32, v198, 2);
      v204.i32[3] = 0;
      v204.f32[0] = (float)(0.5 - v199.f32[1]) - v199.f32[2];
      v205.i32[3] = 0;
      v204.f32[1] = v201 + v200.f32[2];
      v205.f32[0] = v201 - v200.f32[2];
      v205.f32[1] = (float)(0.5 - v199.f32[0]) - v199.f32[2];
      v204.f32[2] = v198.f32[0] - v200.f32[1];
      v205.f32[2] = v198.f32[1] + v200.f32[0];
      *(int32x2_t *)v199.f32 = vrev64_s32(*(int32x2_t *)v200.f32);
      v200.i32[0] = vadd_f32(*(float32x2_t *)v198.f32, *(float32x2_t *)v199.f32).u32[0];
      v206.i64[0] = 0x4000000040000000;
      v206.i64[1] = 0x4000000040000000;
      v200.i32[1] = vsub_f32(*(float32x2_t *)&v198, *(float32x2_t *)&v199).i32[1];
      v200.f32[2] = v203 - v202;
      v200.i32[3] = 0;
      LOBYTE(v470[0]) = 1;
      sub_1B217F044(v15, 0x100000000uLL, v13, v475, (__n128)vmulq_f32(v206, v204), (__n128)vmulq_f32(v206, v205), (__n128)vmulq_f32(v206, v200), v196);
      v194 = v334.n128_u32[3];
      --v191;
    }
    while (v191);
LABEL_155:
    v161 = v324;
    sub_1B1F05D48(v333, (unsigned __int16 **)v364, (uint64_t)v472);
    sub_1B1F03804((char *)v167);
    ecs_stack_allocator_pop_snapshot(v160);
    if ((v161 & 1) != 0)
    {
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v167 + 344));
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v167 + 376));
    }
    swift_release();
    v162 = v332 + 1;
    if (v332 + 1 != v329)
      continue;
    break;
  }
  sub_1B19ED720((uint64_t)v349);
  sub_1B1A086DC(v414, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
LABEL_160:
  sub_1B1A086DC(v414, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
LABEL_161:
  LOBYTE(v18) = v309;
  if ((v309 & 0x20) == 0)
  {
LABEL_14:
    if ((v18 & 2) == 0)
      goto LABEL_236;
    goto LABEL_187;
  }
LABEL_162:
  if (qword_1ED4B7DB8 != -1)
    swift_once();
  v387 = qword_1ED4D09F8;
  v388 = 0;
  v389 = 2;
  v390 = 0;
  v391 = 2;
  v392 = 0;
  swift_retain();
  sub_1B19F2BF8((uint64_t)v351);
  swift_release();
  sub_1B1CC6310(0, (unint64_t *)&qword_1ED4BAD30, (unint64_t *)&qword_1ED4B89D0, (uint64_t)&protocol descriptor for ClassComponent, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  v207 = swift_allocObject();
  *(_OWORD *)(v207 + 16) = v305;
  *(_QWORD *)(v207 + 56) = &type metadata for EmitterReference;
  *(_QWORD *)(v207 + 64) = &off_1E6387218;
  *(_DWORD *)(v207 + 32) = v307;
  *(_DWORD *)(v207 + 36) = v306;
  sub_1B1E6892C(v352);
  swift_setDeallocating();
  sub_1B1A025A0(0, (unint64_t *)&qword_1ED4B89D0);
  swift_arrayDestroy();
  swift_deallocClassInstance();
  sub_1B19ED720((uint64_t)v351);
  v373[0] = v352[0];
  v373[1] = v352[1];
  v374 = v353;
  sub_1B1E8FCE4(v308, (uint64_t)v373, 0x200000000, v415);
  sub_1B1A18378((uint64_t)v415, (uint64_t)v424, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (!*(_QWORD *)&v424[0])
  {
    sub_1B19ED720((uint64_t)v352);
    goto LABEL_185;
  }
  v13 = v337.i64[0];
  if (v430 > 0 && (v328 = v427) != 0)
  {
    v208 = *(_QWORD *)(v429 + 32);
    LODWORD(v333) = *(unsigned __int8 *)(v428 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
    v366[0] = v424[0];
    v366[1] = v424[1];
    v326 = v426;
    v367 = v425;
    v334.n128_u64[0] = v429;
    v323 = (_BYTE *)(v429 + 64);
    v324 = v429 + 48;
    v335.n128_u64[0] = (unint64_t)&v471;
    swift_retain();
    swift_retain();
    swift_retain();
    v209 = 0;
    v327 = (_QWORD *)v208;
    do
    {
      v210 = (unsigned int *)&v326[48 * v209];
      v330 = *v210;
      v329 = v210[1];
      v212 = (uint64_t *)*((_QWORD *)v210 + 2);
      v211 = *((_QWORD *)v210 + 3);
      v214 = *((_QWORD *)v210 + 4);
      v213 = *((_QWORD *)v210 + 5);
      v336.i64[0] = v11;
      v332 = v209;
      if ((_DWORD)v333)
      {
        v215 = *(os_unfair_lock_s **)(v213 + 376);
        swift_retain_n();
        os_unfair_lock_lock(v215);
        os_unfair_lock_lock(*(os_unfair_lock_t *)(v213 + 344));
        swift_release();
      }
      else
      {
        swift_retain();
      }
      ecs_stack_allocator_push_snapshot(v208);
      sub_1B1A18378(v324, (uint64_t)v467, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
      v216 = v334.n128_u64[0];
      v217 = *(_QWORD *)(v334.n128_u64[0] + 32);
      v218 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v213 + 40) + 16) + 32) + 16) + 1;
      swift_retain();
      *(_QWORD *)(v216 + 48) = ecs_stack_allocator_allocate(v217, 48 * v218, 8);
      *(_QWORD *)(v216 + 56) = v218;
      v219 = v323;
      *((_QWORD *)v323 + 1) = 0;
      v219[2] = 0;
      *v219 = 0;
      swift_release();
      v220 = (float32x4_t *)sub_1B1A12038((uint64_t)&type metadata for Position, (uint64_t)&off_1E63C2398, v212, v211, v214, v216);
      v221 = (float32x4_t *)sub_1B1A12038((uint64_t)&type metadata for Orientation, (uint64_t)&off_1E6371540, v212, v211, v214, v216);
      v331 = (char *)v213;
      if (v212)
      {
        v11 = v336.i64[0];
        if (v214)
        {
          v222 = sub_1B1B4D2D0(0, 0, 255);
          v223 = v337.i64[0];
          v224 = v325;
          do
          {
            v225 = *v220++;
            v336 = v225;
            v226 = *v221++;
            sub_1B200B468(v226);
            v227 = (__int128)v336;
            HIDWORD(v227) = 1.0;
            HIDWORD(v228) = 0;
            v468[0] = v227;
            v468[1] = v228;
            memset(&v468[2], 0, 64);
            v469 = 0;
            v463.i8[0] = 1;
            sub_1B217F570(v224, 0x100000000uLL, v223, v468, v222);
            --v214;
          }
          while (v214);
        }
      }
      else
      {
        v230 = v329;
        v229 = v330;
        v11 = v336.i64[0];
        if ((_DWORD)v330 != (_DWORD)v329)
        {
          v231 = sub_1B1B4D2D0(0, 0, 255);
          v232 = v230 - v229;
          v233 = &v221[v229];
          v234 = &v220[v229];
          v235 = v337.i64[0];
          v236 = v325;
          do
          {
            v237 = *v234++;
            v336 = v237;
            v238 = *v233++;
            sub_1B200B468(v238);
            v239 = (__int128)v336;
            HIDWORD(v239) = 1.0;
            HIDWORD(v240) = 0;
            v470[0] = v239;
            v470[1] = v240;
            v241 = v335.n128_u64[0];
            *(_OWORD *)v335.n128_u64[0] = 0u;
            *(_OWORD *)(v241 + 16) = 0u;
            *(_OWORD *)(v241 + 32) = 0u;
            *(_OWORD *)(v241 + 48) = 0u;
            *(_BYTE *)(v241 + 64) = 0;
            v463.i8[0] = 1;
            sub_1B217F570(v236, 0x100000000uLL, v235, v470, v231);
            --v232;
          }
          while (v232);
        }
      }
      sub_1B1F05D48(v334.n128_u64[0], (unsigned __int16 **)v366, (uint64_t)v467);
      v242 = v331;
      sub_1B1F03804(v331);
      v208 = (uint64_t)v327;
      ecs_stack_allocator_pop_snapshot((uint64_t)v327);
      if ((v333 & 1) != 0)
      {
        os_unfair_lock_unlock(*((os_unfair_lock_t *)v242 + 43));
        os_unfair_lock_unlock(*((os_unfair_lock_t *)v242 + 47));
      }
      swift_release();
      v209 = v332 + 1;
      v15 = v325;
    }
    while ((_OWORD *)(v332 + 1) != v328);
    sub_1B19ED720((uint64_t)v352);
    sub_1B1A086DC(v415, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
    sub_1B1A086DC(v415, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
LABEL_185:
    v13 = v337.i64[0];
  }
  else
  {
    sub_1B19ED720((uint64_t)v352);
    sub_1B1A086DC(v415, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
  }
  LOBYTE(v18) = v309;
  if ((v309 & 2) == 0)
    goto LABEL_236;
LABEL_187:
  if (qword_1ED4B7DB8 != -1)
    swift_once();
  v381 = qword_1ED4D09F8;
  v382 = 0;
  v383 = 2;
  v384 = 0;
  v385 = 2;
  v386 = 0;
  swift_retain();
  sub_1B1E40AF4(1, (uint64_t)v354);
  swift_release();
  sub_1B1CC6310(0, (unint64_t *)&qword_1ED4BAD30, (unint64_t *)&qword_1ED4B89D0, (uint64_t)&protocol descriptor for ClassComponent, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  v243 = swift_allocObject();
  *(_OWORD *)(v243 + 16) = v305;
  *(_QWORD *)(v243 + 56) = &type metadata for EmitterReference;
  *(_QWORD *)(v243 + 64) = &off_1E6387218;
  *(_DWORD *)(v243 + 32) = v307;
  *(_DWORD *)(v243 + 36) = v306;
  sub_1B1E6892C(v355);
  swift_setDeallocating();
  sub_1B1A025A0(0, (unint64_t *)&qword_1ED4B89D0);
  swift_arrayDestroy();
  swift_deallocClassInstance();
  sub_1B19ED720((uint64_t)v354);
  v371[0] = v355[0];
  v371[1] = v355[1];
  v372 = v356;
  sub_1B1E8FCE4(v308, (uint64_t)v371, 0x200000000, v416);
  sub_1B1A18378((uint64_t)v416, (uint64_t)v417, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (!*(_QWORD *)&v417[0])
  {
    sub_1B19ED720((uint64_t)v355);
    goto LABEL_233;
  }
  if (v423 <= 0 || (v327 = (_QWORD *)v420) == 0)
  {
    sub_1B19ED720((uint64_t)v355);
    sub_1B1A086DC(v416, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
LABEL_233:
    v13 = v337.i64[0];
    goto LABEL_235;
  }
  v244 = v422;
  v245 = v422[4];
  v246 = *(unsigned __int8 *)(v421 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
  v368 = v417[0];
  v369 = v417[1];
  v326 = v419;
  v370 = v418;
  v323 = v466;
  v324 = (unint64_t)(v422 + 8);
  swift_retain();
  swift_retain();
  swift_retain();
  v247 = 0;
  v13 = v337.i64[0];
  LODWORD(v322) = v246;
  v321 = v245;
  do
  {
    v248 = *(_QWORD *)&v326[48 * v247 + 40];
    v330 = v247;
    if (v246)
    {
      v249 = *(os_unfair_lock_s **)(v248 + 376);
      swift_retain_n();
      os_unfair_lock_lock(v249);
      os_unfair_lock_lock(*(os_unfair_lock_t *)(v248 + 344));
      swift_release();
    }
    else
    {
      swift_retain();
    }
    ecs_stack_allocator_push_snapshot(v245);
    v328 = (_OWORD *)v244[6];
    v250 = v244[7];
    v333 = (_QWORD *)v244[8];
    v334.n128_u64[0] = v250;
    v251 = v244[9];
    v331 = (char *)v244[10];
    v332 = v251;
    v252 = v244[4];
    v253 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v248 + 40) + 16) + 32) + 16) + 1;
    swift_retain();
    v244[6] = ecs_stack_allocator_allocate(v252, 48 * v253, 8);
    v244[7] = v253;
    v254 = (_QWORD *)v324;
    *(_QWORD *)(v324 + 8) = 0;
    v254[2] = 0;
    *v254 = 0;
    swift_release();
    v336 = *(float32x4_t *)(v248 + 272);
    v255 = *(_QWORD *)(v248 + 288);
    v256 = *(_QWORD *)(v248 + 296);
    sub_1B222A06C();
    v329 = v248;
    sub_1B222A078();
    v456.i64[0] = sub_1B222A0C0();
    sub_1B2229A0C();
    sub_1B222A0CC();
    sub_1B2228824();
    swift_bridgeObjectRelease();
    v340[4] = v458;
    v340[5] = v459;
    v341 = v460;
    v340[2] = v456;
    v340[3] = v457;
    v257 = sub_1B222A0B4();
    v463 = v336;
    v464 = v255;
    v465 = v256;
    v258 = v323;
    *(_OWORD *)v323 = 0u;
    v258[1] = 0u;
    v258[2] = 0u;
    v258[3] = 0u;
    v466[64] = 6;
    v456.i8[0] = 1;
    sub_1B217F570(v15, 0x100000000uLL, v13, (__int128 *)&v463, v257 | 0xFF000000);
    v336.i64[0] = v11;
    v259 = v244[6];
    v335.n128_u64[0] = v244[8];
    if (!v335.n128_u64[0])
    {
      v284 = v244[7];
      v285 = (_QWORD *)v244[4];
      v15 = v325;
      goto LABEL_229;
    }
    v260 = 0;
    do
    {
      v262 = v259;
      v263 = (uint64_t *)(v259 + 48 * v260);
      v264 = *v263;
      v265 = (void (*)(uint64_t))v263[4];
      v266 = v244;
      v267 = v244[9];
      if (v267)
        v268 = v264 == v267;
      else
        v268 = 0;
      if (v268)
        goto LABEL_199;
      v269 = v368;
      if (!*(_WORD *)(v368 + 22))
        goto LABEL_199;
      v270 = v263[2];
      v271 = v368 + 41;
      v272 = *(unsigned __int16 *)(v368 + 18);
      if (v272 >= 0x10)
      {
        v273 = (_QWORD *)(v271 + *(unsigned __int16 *)(v368 + 16));
        v274 = v272 >> 4;
        v275 = v368 + 41;
        while (*v273 != v264)
        {
          ++v275;
          v273 += 2;
          if (!--v274)
            goto LABEL_215;
        }
        v276 = *(unsigned __int8 *)(v275 + *(unsigned __int16 *)(v368 + 20));
        v277 = v276 > 5;
        v278 = (1 << v276) & 0x23;
        if (v277 || v278 == 0)
        {
LABEL_199:
          v261 = swift_retain();
          v265(v261);
          swift_release();
          goto LABEL_200;
        }
      }
LABEL_215:
      if (swift_conformsToProtocol2())
        v280 = v270;
      else
        v280 = 0;
      if (v280)
      {
        if ((sub_1B1A182FC(v280) & 1) != 0)
          goto LABEL_199;
        v281 = *(unsigned __int16 *)(v269 + 18);
        if (v281 < 0x10)
          goto LABEL_199;
        v282 = (_QWORD *)(v271 + *(unsigned __int16 *)(v269 + 16));
        v283 = 16 * (v281 >> 4);
        while (*v282 != v280)
        {
          v282 += 2;
          v283 -= 16;
          if (!v283)
            goto LABEL_199;
        }
      }
LABEL_200:
      ++v260;
      v244 = v266;
      v259 = v262;
    }
    while (v260 != v335.n128_u64[0]);
    v284 = v266[7];
    v259 = v266[6];
    v285 = (_QWORD *)v266[4];
    if ((uint64_t)v266[8] >= 1)
    {
      v286 = v266[6];
      swift_arrayDestroy();
      v259 = v286;
    }
    v15 = v325;
    v245 = v321;
LABEL_229:
    v246 = v322;
    v288 = v329;
    v287 = v330;
    v289 = v328;
    ecs_stack_allocator_deallocate(v285, v259, 48 * v284);
    v290 = v334.n128_u64[0];
    v244[6] = v289;
    v244[7] = v290;
    v291 = v332;
    v244[8] = v333;
    v244[9] = v291;
    v244[10] = v331;
    sub_1B1F03804((char *)v288);
    ecs_stack_allocator_pop_snapshot(v245);
    if ((v246 & 1) != 0)
    {
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v288 + 344));
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v288 + 376));
    }
    swift_release();
    v247 = v287 + 1;
    v13 = v337.i64[0];
    v11 = v336.i64[0];
  }
  while ((_QWORD *)v247 != v327);
  sub_1B19ED720((uint64_t)v355);
  sub_1B1A086DC(v416, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
  sub_1B1A086DC(v416, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
LABEL_235:
  LOBYTE(v18) = v309;
LABEL_236:
  if ((*(_BYTE *)(v304 + 77) & 1) == 0 || (v18 & 0x40) == 0)
    return swift_bridgeObjectRelease();
  v292 = sub_1B1FE0C84(v307, v308);
  v339 = 0u;
  v340[0] = 0u;
  v293 = *(float32x4_t **)(v292 + 16);
  vfx_uniform_grid_get_aabb((uint64_t)v293, v340, (__n128 *)&v339);
  v295 = v339;
  v294 = (float32x4_t)v340[0];
  v294.i32[3] = 1.0;
  v295.i32[3] = 1.0;
  v296.i64[0] = 0x3F0000003F000000;
  v296.i64[1] = 0x3F0000003F000000;
  v336 = vmulq_f32(vsubq_f32(v295, v294), v296);
  v337 = vmulq_f32(vaddq_f32(v294, v295), v296);
  v297 = sub_1B1B4D2D0(255, 128, 0);
  v456 = v337;
  v457 = v336;
  v458 = 0u;
  v459 = 0u;
  v460 = 0u;
  v461 = 0u;
  v462 = 6;
  LOBYTE(v338[0]) = 1;
  sub_1B217F570(v15, 0x100000000uLL, v13, (__int128 *)&v456, v297);
  v298 = swift_allocObject();
  *(_QWORD *)(v298 + 16) = v13;
  *(_QWORD *)(v298 + 24) = v15;
  v299 = swift_allocObject();
  *(_QWORD *)(v299 + 16) = sub_1B200B450;
  *(_QWORD *)(v299 + 24) = v298;
  v338[4] = sub_1B1A0FDB0;
  v338[5] = v299;
  v338[0] = MEMORY[0x1E0C809B0];
  v338[1] = 1107296256;
  v338[2] = sub_1B200484C;
  v338[3] = &unk_1E63D49E8;
  v300 = _Block_copy(v338);
  swift_release();
  vfx_uniform_grid_for_each_cell(v293, (uint64_t)v300, v301, v302);
  swift_release();
  _Block_release(v300);
  return swift_release();
}

uint64_t sub_1B20047A8(unsigned int a1, uint64_t a2, uint64_t a3, float32x4_t a4, float32x4_t a5)
{
  float32x4_t v7;
  int v8;
  float32x4_t v10;
  float32x4_t v11;
  __int128 v12[6];
  char v13;

  a4.i32[3] = 1.0;
  a5.i32[3] = 1.0;
  v7.i64[0] = 0x3F0000003F000000;
  v7.i64[1] = 0x3F0000003F000000;
  v10 = vmulq_f32(vsubq_f32(a5, a4), v7);
  v11 = vmulq_f32(vaddq_f32(a4, a5), v7);
  v8 = sub_1B20020A4(a1);
  v12[0] = (__int128)v11;
  v12[1] = (__int128)v10;
  memset(&v12[2], 0, 64);
  v13 = 6;
  return sub_1B217F570(a3, 0x100000000uLL, a2, v12, v8);
}

uint64_t sub_1B200484C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 32))(a2);
}

uint64_t sub_1B2004870(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  os_unfair_lock_s *v6;

  v3 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_queryManager);
  swift_getObjectType();
  v5 = sub_1B204D6E4();
  v6 = *(os_unfair_lock_s **)(v4 + 40);
  swift_retain_n();
  os_unfair_lock_lock(v6);
  sub_1B1E8F784(a1, v3);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B1E8FAC0(a1, v5, v3);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v4 + 40));
  swift_release_n();
  swift_getObjectType();
  return sub_1B204D6E4();
}

_QWORD *sub_1B200495C(uint64_t a1)
{
  uint64_t v1;
  __int128 v3;
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  os_unfair_lock_s *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  _QWORD *v41;
  _QWORD v42[8];
  _OWORD v43[2];
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  _OWORD v53[2];
  uint64_t v54;
  _BYTE v55[40];
  _OWORD v56[5];
  int v57;
  _OWORD v58[5];
  int v59;
  _OWORD v60[2];
  uint64_t v61;

  v3 = *(_OWORD *)(v1 + 32);
  v60[0] = *(_OWORD *)(v1 + 16);
  v60[1] = v3;
  v61 = *(_QWORD *)(v1 + 48);
  sub_1B1E8FCE4(a1, (uint64_t)v60, 0x200000000, v42);
  result = (_QWORD *)sub_1B1A18378((uint64_t)v42, (uint64_t)v43, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (!*(_QWORD *)&v43[0])
    return result;
  v50 = v43[0];
  v51 = v43[1];
  v52 = v44;
  if (v49 < 1)
    return sub_1B1A086DC(v42, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
  v35 = v46;
  if (!v46)
    return sub_1B1A086DC(v42, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
  v34 = v45;
  v5 = v48[4];
  v40 = *(unsigned __int8 *)(v47 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
  v41 = v48;
  v31 = v48 + 8;
  v32 = (uint64_t)(v48 + 6);
  swift_retain();
  swift_retain();
  swift_retain();
  v6 = 0;
  v7 = 0;
  v33 = v5;
  while (1)
  {
    v38 = v7;
    v39 = v6;
    v8 = (unsigned int *)(v34 + 48 * v6);
    v9 = *v8;
    v10 = (uint64_t *)*((_QWORD *)v8 + 2);
    v11 = *((_QWORD *)v8 + 4);
    v12 = *((_QWORD *)v8 + 5);
    v36 = v8[1];
    v37 = *((_QWORD *)v8 + 3);
    if (v40)
    {
      v13 = *(os_unfair_lock_s **)(v12 + 376);
      swift_retain();
      os_unfair_lock_lock(v13);
      os_unfair_lock_lock(*(os_unfair_lock_t *)(v12 + 344));
    }
    else
    {
      swift_retain();
    }
    ecs_stack_allocator_push_snapshot(v5);
    sub_1B1A18378(v32, (uint64_t)v55, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
    v14 = v41[4];
    v15 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v12 + 40) + 16) + 32) + 16) + 1;
    swift_retain();
    v41[6] = ecs_stack_allocator_allocate(v14, 48 * v15, 8);
    v41[7] = v15;
    v31[1] = 0;
    v31[2] = 0;
    *v31 = 0;
    swift_release();
    v16 = sub_1B1A12038((uint64_t)&type metadata for EmitterDescription, (uint64_t)&off_1E6391AC0, v10, v37, v11, (uint64_t)v41);
    sub_1B1A12038((uint64_t)&type metadata for EmitterRuntime, (uint64_t)&off_1E637F3F8, v10, v37, v11, (uint64_t)v41);
    if (!v10)
      break;
    if (v11)
    {
      do
      {
        v18 = *v10++;
        v17 = v18;
        v19 = *(_OWORD *)(v16 + 48);
        v56[2] = *(_OWORD *)(v16 + 32);
        v56[3] = v19;
        v56[4] = *(_OWORD *)(v16 + 64);
        v57 = *(_DWORD *)(v16 + 80);
        v20 = *(_OWORD *)(v16 + 16);
        v56[0] = *(_OWORD *)v16;
        v56[1] = v20;
        v21 = swift_retain();
        if ((*(_BYTE *)(v12 + 184) & 1) != 0)
          goto LABEL_23;
        v22 = *(unsigned int *)(*(_QWORD *)(v12 + 168) + 4 * v17);
        v23 = *(unsigned int *)(*(_QWORD *)(v21 + OBJC_IVAR____TtC3VFX13EntityManager__entries) + 12 * (int)v22 + 8);
        swift_release();
        sub_1B2002168((uint64_t)v56, v22 | (v23 << 32), a1);
        v16 += 88;
      }
      while (--v11);
    }
LABEL_18:
    v53[0] = v50;
    v53[1] = v51;
    v54 = v52;
    v7 = v38;
    sub_1B1F05D48(v41, (unsigned __int16 **)v53, (uint64_t)v55);
    sub_1B1F03804((char *)v12);
    v5 = v33;
    ecs_stack_allocator_pop_snapshot(v33);
    if ((v40 & 1) != 0)
    {
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v12 + 344));
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v12 + 376));
    }
    swift_release();
    v6 = v39 + 1;
    if (v39 + 1 == v35)
    {
      sub_1B1A086DC(v42, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
      return sub_1B1A086DC(v42, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
    }
  }
  if ((_DWORD)v9 == (_DWORD)v36)
    goto LABEL_18;
  v24 = v16 + 88 * v9;
  while (1)
  {
    v25 = *(_OWORD *)(v24 + 48);
    v58[2] = *(_OWORD *)(v24 + 32);
    v58[3] = v25;
    v58[4] = *(_OWORD *)(v24 + 64);
    v59 = *(_DWORD *)(v24 + 80);
    v26 = *(_OWORD *)(v24 + 16);
    v58[0] = *(_OWORD *)v24;
    v58[1] = v26;
    v27 = swift_retain();
    if ((*(_BYTE *)(v12 + 184) & 1) != 0)
      break;
    v28 = *(unsigned int *)(*(_QWORD *)(v12 + 168) + 4 * v9);
    v29 = v9 + 1;
    v30 = *(unsigned int *)(*(_QWORD *)(v27 + OBJC_IVAR____TtC3VFX13EntityManager__entries) + 12 * (int)v28 + 8);
    swift_release();
    sub_1B2002168((uint64_t)v58, v28 | (v30 << 32), a1);
    v24 += 88;
    v9 = v29;
    if (v36 == v29)
      goto LABEL_18;
  }
LABEL_23:
  result = (_QWORD *)sub_1B2229688();
  __break(1u);
  return result;
}

uint64_t type metadata accessor for DebugVFXSystem()
{
  return objc_opt_self();
}

uint64_t sub_1B2004DB4()
{
  uint64_t v0;
  __int128 v1;
  _OWORD v3[2];
  uint64_t v4;
  uint64_t v5;
  int v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;

  v0 = swift_allocObject();
  if (qword_1ED4B7DB8 != -1)
    swift_once();
  v5 = qword_1ED4D09F8;
  v6 = 0;
  v7 = 2;
  v8 = 0;
  v9 = 2;
  v10 = 0;
  swift_retain();
  sub_1B1B116A4(1, 1, (uint64_t)v3);
  swift_release();
  v1 = v3[1];
  *(_OWORD *)(v0 + 16) = v3[0];
  *(_OWORD *)(v0 + 32) = v1;
  *(_QWORD *)(v0 + 48) = v4;
  return v0;
}

const char *sub_1B2004E74()
{
  return "VFX Debug";
}

uint64_t sub_1B2004E8C()
{
  sub_1B2010B58();
  return sub_1B222A1D4();
}

uint64_t sub_1B2004EB4()
{
  sub_1B2010B58();
  return sub_1B222A1E0();
}

uint64_t sub_1B2004EDC(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1B1D2F094(a1, a2, a3, &qword_1EEF62128, (void (*)(void))sub_1B2010B58);
}

uint64_t sub_1B2004F08()
{
  sub_1B2010B9C();
  return sub_1B222A1D4();
}

uint64_t sub_1B2004F30()
{
  sub_1B2010B9C();
  return sub_1B222A1E0();
}

uint64_t sub_1B2004F58(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1B1D2F094(a1, a2, a3, &qword_1EEF62138, (void (*)(void))sub_1B2010B9C);
}

void sub_1B2004F84(uint64_t a1@<X8>)
{
  __int128 v2;

  *(double *)&v2 = sub_1B1E6E2E8((float32x4_t)xmmword_1B2244E20, 0.5);
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_BYTE *)(a1 + 96) = 3;
}

uint64_t sub_1B2004FC8@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result;

  result = sub_1B1B4D2D0(255, 255, 255);
  *a1 = result;
  return result;
}

void sub_1B2004FF8(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = -1;
  *(_BYTE *)(a1 + 8) = 0;
}

__n128 sub_1B2005008(uint64_t a1, _DWORD *a2, __n128 *a3, __n128 a4, __n128 a5, __n128 a6, __n128 a7, uint64_t a8, __int128 *a9, int a10)
{
  char v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __n128 result;
  _OWORD v23[6];
  char v24;

  sub_1B200A008(a9, (uint64_t)v23);
  v14 = v24;
  v15 = v23[1];
  *(_OWORD *)a1 = v23[0];
  *(_OWORD *)(a1 + 16) = v15;
  v16 = v23[3];
  *(_OWORD *)(a1 + 32) = v23[2];
  *(_OWORD *)(a1 + 48) = v16;
  v17 = v23[5];
  *(_OWORD *)(a1 + 64) = v23[4];
  *(_OWORD *)(a1 + 80) = v17;
  *(_BYTE *)(a1 + 96) = v14;
  *a2 = a10;
  *a3 = a4;
  a3[1] = a5;
  result = a7;
  a3[2] = a6;
  a3[3] = a7;
  return result;
}

double sub_1B20050A0(uint64_t a1, _DWORD *a2, __int128 *a3, int a4)
{
  char v7;
  __int128 v8;
  __int128 v9;
  double result;
  __int128 v11;
  _OWORD v12[4];
  __int128 v13;
  __int128 v14;
  char v15;

  sub_1B200A008(a3, (uint64_t)v12);
  v7 = v15;
  v8 = v12[1];
  *(_OWORD *)a1 = v12[0];
  *(_OWORD *)(a1 + 16) = v8;
  v9 = v12[3];
  *(_OWORD *)(a1 + 32) = v12[2];
  *(_OWORD *)(a1 + 48) = v9;
  result = *(double *)&v13;
  v11 = v14;
  *(_OWORD *)(a1 + 64) = v13;
  *(_OWORD *)(a1 + 80) = v11;
  *(_BYTE *)(a1 + 96) = v7;
  *a2 = a4;
  return result;
}

__n128 sub_1B200510C(uint64_t a1, __n128 *a2, __n128 a3, __n128 a4, __n128 a5, __n128 a6, uint64_t a7, __int128 *a8)
{
  char v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __n128 result;
  _OWORD v19[6];
  char v20;

  sub_1B200A008(a8, (uint64_t)v19);
  v10 = v20;
  v11 = v19[1];
  *(_OWORD *)a1 = v19[0];
  *(_OWORD *)(a1 + 16) = v11;
  v12 = v19[3];
  *(_OWORD *)(a1 + 32) = v19[2];
  *(_OWORD *)(a1 + 48) = v12;
  v13 = v19[5];
  *(_OWORD *)(a1 + 64) = v19[4];
  *(_OWORD *)(a1 + 80) = v13;
  *(_BYTE *)(a1 + 96) = v10;
  *a2 = a3;
  a2[1] = a4;
  result = a6;
  a2[2] = a5;
  a2[3] = a6;
  return result;
}

void sub_1B2005190()
{
  off_1EEF620B0 = &unk_1E636F5B0;
}

void sub_1B20051A4()
{
  __int128 *v0;
  uint64_t v1;
  _BYTE v2[112];

  sub_1B200A008(v0, (uint64_t)&v1);
  sub_1B200A008(v0, (uint64_t)v2);
  __asm { BR              X11 }
}

uint64_t sub_1B20051F4()
{
  return 6;
}

void sub_1B20052C4(uint64_t a1, uint64_t a2)
{
  __int128 *v2;
  _BYTE v3[16];
  uint64_t v4;
  _BYTE v5[216];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  sub_1B1AE09AC(a2, (uint64_t)&v4);
  sub_1B200A008(v2, (uint64_t)v3);
  sub_1B200A008(v2, (uint64_t)v5);
  __asm { BR              X10 }
}

void sub_1B2005370()
{
  uint64_t v0;
  unint64_t v1;
  float32x4_t v2;
  float32x4_t v3;
  char v4;

  sub_1B20064A8(v4, v2, v3, v1 | ((HIDWORD(v1) & 1) << 32), v0);
}

void sub_1B20064A8(char a1, float32x4_t a2, float32x4_t a3, uint64_t a4, uint64_t a5)
{
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v10;
  float32x4_t v12;
  float32x4_t v13[4];
  char v14;

  sub_1B1AE09AC(a5, (uint64_t)v13);
  if ((v14 & 1) != 0)
  {
    v6 = a3;
    v7 = a2;
  }
  else
  {
    *(double *)v8.i64 = sub_1B1BF314C(a2, *(double *)a3.i64, v13[0], v13[1], v13[2], v13[3]);
    v7 = v8;
  }
  v12 = v7;
  v10 = v6;
  sub_1B1BF3124(0.1, v7, v6);
  sub_1B1BF3124(0.9, v12, v10);
  __asm { BR              X10 }
}

uint64_t sub_1B20065E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  float32x4_t *v6;
  float32x4_t v7;
  float32x4_t v8;
  _DWORD *v9;
  _WORD *v10;
  __int16 *v11;
  uint64_t v12;
  __int16 v13;
  uint64_t result;
  float32x4_t v15;
  float32x4_t v16;

  v7 = v16;
  v8 = vaddq_f32(v16, v15);
  v7.i32[3] = 1.0;
  *v6 = v7;
  v8.i32[3] = 1.0;
  v6[1] = v8;
  if ((v1 & 0x100000000) == 0)
  {
    v9 = (_DWORD *)(v5 + 4 * v3);
    *v9 = v1;
    v9[1] = v1;
  }
  if ((v3 & 0x8000000000000000) != 0 || v3 >= 0x10000)
  {
    result = sub_1B222967C();
    __break(1u);
  }
  else
  {
    v10 = (_WORD *)(v4 + 2 * v2);
    if (qword_1EEF57500 != -1)
      result = swift_once();
    v11 = (__int16 *)(qword_1EEF620B8 + 32);
    v12 = 2;
    do
    {
      v13 = *v11++;
      *v10++ = v13 + v3;
      --v12;
    }
    while (v12);
    *(_QWORD *)(v0 + 32) = v3 + 2;
    *(_QWORD *)(v0 + 40) = v2 + 2;
  }
  return result;
}

uint64_t sub_1B2006878(uint64_t a1, uint64_t a2, _QWORD *a3, float32x4_t a4, float32x4_t a5, float32x4_t a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  float32x4_t v14;
  float32x4_t *v15;
  float32x4_t v16;
  uint64_t result;
  float32x4_t v18;
  _DWORD *v19;
  _WORD *v20;
  float32x4_t v24[4];
  char v25;
  float32x4_t v26[4];
  char v27;
  float32x4_t v28[4];
  char v29;

  v9 = a3[9];
  v10 = a3[13];
  v11 = a3[17];
  v13 = a3[4];
  v12 = a3[5];
  sub_1B1AE09AC(a2, (uint64_t)v28);
  v14 = a4;
  if ((v29 & 1) == 0)
    v14 = vmlaq_n_f32(vmlaq_lane_f32(vmlaq_laneq_f32(v28[3], v28[2], a4, 2), v28[1], *(float32x2_t *)a4.f32, 1), v28[0], a4.f32[0]);
  v15 = (float32x4_t *)(v9 + 16 * v13);
  v14.i32[3] = 1.0;
  *v15 = v14;
  sub_1B1AE09AC(a2, (uint64_t)v26);
  v16 = a5;
  if ((v27 & 1) == 0)
    v16 = vmlaq_n_f32(vmlaq_lane_f32(vmlaq_laneq_f32(v26[3], v26[2], a5, 2), v26[1], *(float32x2_t *)a5.f32, 1), v26[0], a5.f32[0]);
  v16.i32[3] = 1.0;
  v15[1] = v16;
  result = sub_1B1AE09AC(a2, (uint64_t)v24);
  v18 = a6;
  if ((v25 & 1) == 0)
    v18 = vmlaq_n_f32(vmlaq_lane_f32(vmlaq_laneq_f32(v24[3], v24[2], a6, 2), v24[1], *(float32x2_t *)a6.f32, 1), v24[0], a6.f32[0]);
  v19 = (_DWORD *)(v10 + 4 * v13);
  v18.i32[3] = 1.0;
  v15[2] = v18;
  if ((a1 & 0x100000000) != 0)
  {
    result = sub_1B1B4D2D0(255, 255, 255);
    LODWORD(a1) = result;
  }
  *v19 = a1;
  v19[1] = a1;
  v19[2] = a1;
  if ((v13 & 0x8000000000000000) != 0
    || v13 >> 16
    || (v20 = (_WORD *)(v11 + 2 * v12), *v20 = v13, v13 == 0xFFFF)
    || (v20[1] = v13 + 1, v20[2] = v13 + 1, v13 > 0xFFFD))
  {
    result = sub_1B222967C();
    __break(1u);
  }
  else
  {
    v20[3] = v13 + 2;
    v20[4] = v13 + 2;
    v20[5] = v13;
    a3[4] = v13 + 3;
    a3[5] = v12 + 6;
  }
  return result;
}

uint64_t sub_1B2006A90(int a1, uint64_t a2, uint64_t a3, _QWORD *a4, int8x16_t a5, float a6, __n128 a7, int8x16_t a8)
{
  uint64_t v11;
  uint64_t v12;
  int8x16_t v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float32x2_t v20;
  float32_t v21;
  float32x4_t v22;
  float32_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  uint64_t v28;
  _DWORD *v29;
  float32x4_t *v30;
  float v31;
  uint64_t v32;
  __float2 v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  uint64_t result;
  float32x2_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x2_t v45;
  __int128 v46;
  __int128 v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  char v52;
  uint64_t v53;

  v43 = (float32x4_t)a5;
  v53 = *MEMORY[0x1E0C80C00];
  v11 = a4[9];
  v12 = a4[13];
  a5.i32[0] = a7.n128_i32[2];
  a8.i32[0] = 1.0;
  v13.i64[0] = 0x8000000080000000;
  v13.i64[1] = 0x8000000080000000;
  v13.i32[0] = vbslq_s8(v13, a8, a5).i32[0];
  v14 = a7.n128_f32[1] / (float)(fabsf(a7.n128_f32[2]) + 1.0);
  v15 = vmuls_lane_f32(v14, (float32x2_t)a7.n128_u64[0], 1);
  v16 = -(float)(a7.n128_f32[0] * v14);
  v17 = a7.n128_f32[2] + (float)(*(float *)v13.i32 * v15);
  v18 = *(float *)v13.i32 * v16;
  v19 = 1.0 - v15;
  *(float *)v13.i32 = vmuls_lane_f32(-*(float *)v13.i32, (float32x2_t)a7.n128_u64[0], 1);
  v20.f32[0] = v17 * a6;
  v47 = COERCE_UNSIGNED_INT(v17 * a6);
  v20.f32[1] = v18 * a6;
  v21 = -(float)(a7.n128_f32[0] * a6);
  v22 = (float32x4_t)(unint64_t)v20;
  v22.f32[2] = v21;
  v41 = v22;
  v22.f32[0] = v16 * a6;
  v45 = v20;
  v46 = COERCE_UNSIGNED_INT(v16 * a6);
  v22.f32[1] = v19 * a6;
  v23 = *(float *)v13.i32 * a6;
  v24 = (float32x4_t)v22.u64[0];
  v24.f32[2] = v23;
  v38 = *(float32x2_t *)v22.f32;
  v39 = v24;
  sub_1B1AE09AC(a3, (uint64_t)&v48);
  if ((v52 & 1) != 0)
  {
    v26 = v41;
    v25 = v43;
    v27 = v39;
    v28 = a4[4];
    if (!a2)
      goto LABEL_7;
  }
  else
  {
    v26 = vmlaq_n_f32(vmlaq_lane_f32(vmulq_laneq_f32(v50, v41, 2), v49, v45, 1), v48, *(float *)&v47);
    v27 = vmlaq_n_f32(vmlaq_lane_f32(vmulq_laneq_f32(v50, v39, 2), v49, v38, 1), v48, *(float *)&v46);
    v25 = vmlaq_n_f32(vmlaq_lane_f32(vmlaq_laneq_f32(v51, v50, v43, 2), v49, *(float32x2_t *)v43.f32, 1), v48, v43.f32[0]);
    v28 = a4[4];
    if (!a2)
      goto LABEL_7;
  }
  v29 = (_DWORD *)(v12 + 4 * v28);
  v30 = (float32x4_t *)(v11 + 16 * v28);
  v31 = 0.0;
  v32 = a2;
  v42 = v26;
  v44 = v25;
  v40 = v27;
  do
  {
    v33 = __sincospif_stret(v31);
    v34 = vaddq_f32(v44, vmulq_n_f32(v42, v33.__cosval));
    v34.i32[3] = HIDWORD(v46);
    v35 = vmulq_n_f32(v40, v33.__sinval);
    v35.i32[3] = HIDWORD(v47);
    v36 = vaddq_f32(v35, v34);
    v36.i32[3] = 1.0;
    *v30++ = v36;
    *v29++ = a1;
    v31 = (float)(2.0 / (float)a2) + v31;
    --v32;
  }
  while (v32);
LABEL_7:
  result = sub_1B2007394(a2, 1);
  a4[4] = v28 + a2;
  return result;
}

uint64_t sub_1B2006CA8(int a1, uint64_t a2, uint64_t a3, _QWORD *a4, int8x16_t a5, int8x16_t a6, float a7, __n128 a8, __n128 a9, double a10, double a11, __n128 a12)
{
  float v16;
  uint64_t v17;
  int8x16_t v18;
  float v19;
  __n128 v20;
  uint64_t v21;
  __n128 v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  uint64_t v26;
  uint64_t v27;
  float v28;
  uint64_t v29;
  uint64_t v30;
  float v31;
  float v32;
  __float2 v33;
  float v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  uint64_t result;
  float32x2_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x2_t v46;
  __n128 v47;
  __n128 v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  char v53;
  uint64_t v54;

  v16 = *(float *)a6.i32;
  v44 = (float32x4_t)a5;
  v54 = *MEMORY[0x1E0C80C00];
  v17 = a4[9];
  a5.i32[0] = a8.n128_i32[2];
  a6.i32[0] = 1.0;
  v18.i64[0] = 0x8000000080000000;
  v18.i64[1] = 0x8000000080000000;
  v18.i32[0] = vbslq_s8(v18, a6, a5).i32[0];
  a9.n128_f32[0] = a8.n128_f32[1] / (float)(fabsf(a8.n128_f32[2]) + 1.0);
  v19 = vmuls_lane_f32(a9.n128_f32[0], (float32x2_t)a8.n128_u64[0], 1);
  a9.n128_f32[0] = -(float)(a8.n128_f32[0] * a9.n128_f32[0]);
  a12.n128_f32[0] = a8.n128_f32[2] + (float)(*(float *)v18.i32 * v19);
  v47 = a12;
  v48 = a9;
  a12.n128_f32[1] = *(float *)v18.i32 * a9.n128_f32[0];
  v46 = (float32x2_t)a12.n128_u64[0];
  v20 = a12;
  v20.n128_f32[2] = -a8.n128_f32[0];
  v42 = (float32x4_t)v20;
  a9.n128_f32[1] = 1.0 - v19;
  v21 = a4[13];
  v22 = a9;
  v22.n128_u32[2] = vmuls_lane_f32(-*(float *)v18.i32, (float32x2_t)a8.n128_u64[0], 1);
  v39 = (float32x2_t)a9.n128_u64[0];
  v40 = (float32x4_t)v22;
  sub_1B1AE09AC(a3, (uint64_t)&v49);
  if ((v53 & 1) != 0)
  {
    v24 = v42;
    v23 = v44;
    v25 = v40;
    v26 = a4[4];
    if (!a2)
      goto LABEL_7;
  }
  else
  {
    v24 = vmlaq_n_f32(vmlaq_lane_f32(vmulq_laneq_f32(v51, v42, 2), v50, v46, 1), v49, v47.n128_f32[0]);
    v25 = vmlaq_n_f32(vmlaq_lane_f32(vmulq_laneq_f32(v51, v40, 2), v50, v39, 1), v49, v48.n128_f32[0]);
    v23 = vmlaq_n_f32(vmlaq_lane_f32(vmlaq_laneq_f32(v52, v51, v44, 2), v50, *(float32x2_t *)v44.f32, 1), v49, v44.f32[0]);
    v26 = a4[4];
    if (!a2)
      goto LABEL_7;
  }
  v27 = 0;
  v28 = (float)(a7 + a7) / (float)a2;
  v29 = v21 + 4 * v26;
  v30 = v17 + 16 * v26;
  v31 = 0.0;
  v32 = v16 / (float)a2;
  v43 = v24;
  v45 = v23;
  v41 = v25;
  do
  {
    v33 = __sincospif_stret(v31);
    v34 = v32 * (float)v27;
    v35 = vaddq_f32(v45, vmulq_n_f32(v43, v34 * v33.__cosval));
    v35.i32[3] = v47.n128_i32[3];
    v36 = vmulq_n_f32(v41, v34 * v33.__sinval);
    v36.i32[3] = v48.n128_i32[3];
    v37 = vaddq_f32(v36, v35);
    v37.i32[3] = 1.0;
    *(float32x4_t *)(v30 + 16 * v27) = v37;
    *(_DWORD *)(v29 + 4 * v27) = a1;
    v31 = v28 + v31;
    ++v27;
  }
  while (a2 != v27);
LABEL_7:
  result = sub_1B2007394(a2, 0);
  a4[4] = v26 + a2;
  return result;
}

uint64_t sub_1B2006ED0(int a1, uint64_t a2, uint64_t a3, _QWORD *a4, float32x4_t a5, float32x4_t a6, float a7, float a8)
{
  uint64_t v12;
  uint64_t v13;
  float32x4_t v14;
  int8x16_t v15;
  float32x4_t v16;
  float32x4_t v17;
  uint64_t v18;
  float32x4_t v19;
  float v20;
  int32x4_t v21;
  int8x16_t v22;
  float32x4_t v23;
  float v24;
  int8x16_t v25;
  int8x16_t v26;
  float v27;
  _DWORD *v28;
  float32x4_t *v29;
  uint64_t v30;
  float v31;
  float32x4_t v32;
  float32x4_t v33;
  uint64_t result;
  float32x4_t v35;
  float32x4_t v36;
  uint64_t v38;
  float32x4_t v39;
  __int32 v41;
  float32x4_t v43;
  float32x4_t v44[4];
  char v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v12 = a4[9];
  v13 = a4[13];
  sub_1B1AE09AC(a3, (uint64_t)v44);
  if ((v45 & 1) != 0)
  {
    v16 = a5;
    v17 = a6;
    v18 = a4[4];
    if (!a2)
      goto LABEL_7;
  }
  else
  {
    *(double *)v19.i64 = sub_1B1BF314C(a5, *(double *)a6.i64, v44[0], v44[1], v44[2], v44[3]);
    v16 = v19;
    v18 = a4[4];
    if (!a2)
      goto LABEL_7;
  }
  v15.i32[0] = 1.0;
  v20 = a7 * 6.2832;
  v21 = (int32x4_t)vmulq_f32(v17, v17);
  v22 = (int8x16_t)vdupq_laneq_s32(v21, 2);
  v21.i32[0] = vadd_f32(*(float32x2_t *)v22.i8, vadd_f32(*(float32x2_t *)v21.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v21.i8, 1))).u32[0];
  *(float32x2_t *)v22.i8 = vrsqrte_f32((float32x2_t)v21.u32[0]);
  *(float32x2_t *)v22.i8 = vmul_f32(*(float32x2_t *)v22.i8, vrsqrts_f32((float32x2_t)v21.u32[0], vmul_f32(*(float32x2_t *)v22.i8, *(float32x2_t *)v22.i8)));
  v23 = vmulq_n_f32(v17, vmul_f32(*(float32x2_t *)v22.i8, vrsqrts_f32((float32x2_t)v21.u32[0], vmul_f32(*(float32x2_t *)v22.i8, *(float32x2_t *)v22.i8))).f32[0]);
  v14.f32[0] = v23.f32[1] / (float)(fabsf(v23.f32[2]) + 1.0);
  v24 = vmuls_lane_f32(v14.f32[0], *(float32x2_t *)v23.f32, 1);
  v14.f32[0] = -(float)(v23.f32[0] * v14.f32[0]);
  *(float *)v22.i32 = -v23.f32[2];
  v25.i64[0] = 0x8000000080000000;
  v25.i64[1] = 0x8000000080000000;
  v26 = vbslq_s8(v25, v15, v22);
  v14.f32[1] = 1.0 - v24;
  v14.i32[2] = vmuls_lane_f32(*(float *)v26.i32, *(float32x2_t *)v23.f32, 1);
  v27 = v16.f32[2];
  v35 = vsubq_f32(vaddq_f32(v16, v17), v16);
  v36 = vmulq_n_f32(v14, a8);
  v28 = (_DWORD *)(v13 + 4 * v18);
  v29 = (float32x4_t *)(v12 + 16 * v18);
  v17.i32[0] = 0;
  v30 = a2;
  v38 = v16.i64[0];
  do
  {
    v43 = v17;
    *(float32x2_t *)v26.i8 = vadd_f32(*(float32x2_t *)v16.f32, vmul_n_f32(*(float32x2_t *)v35.f32, v17.f32[0]));
    *(float *)&v26.i32[2] = v27 + (float)(v35.f32[2] * v17.f32[0]);
    v39 = (float32x4_t)v26;
    v31 = sinf(v20 * v17.f32[0]);
    v16.i64[0] = v38;
    v32 = vmulq_n_f32(v36, v31);
    v32.i32[3] = v41;
    v33 = vaddq_f32(v39, v32);
    v33.i32[3] = 1.0;
    *v29++ = v33;
    v17 = v43;
    *v28++ = a1;
    v17.f32[0] = (float)(1.0 / (float)(a2 - 1)) + v43.f32[0];
    --v30;
  }
  while (v30);
LABEL_7:
  result = sub_1B2007394(a2, 0);
  a4[4] = v18 + a2;
  return result;
}

id sub_1B20070F0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t ObjectType;
  id result;
  int8x16_t v9;
  int64x2_t v10;
  int8x16_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  char *v19;
  char *v20;
  id v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  char *v29;
  char *v30;
  id v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;

  v3 = (_QWORD *)v2;
  if (a2)
  {
    if (*(uint64_t *)(v2 + 32) >= 1)
    {
      v4 = *(_QWORD *)(v2 + 48);
      if (v4)
      {
        v6 = *(_QWORD *)(v2 + 56);
        v5 = *(_QWORD *)(v2 + 64);
        ObjectType = swift_getObjectType();
        swift_unknownObjectRetain();
        sub_1B20BFEA4(v4, v6, v5, 0);
        sub_1B20BFEA4(*(_QWORD *)(v2 + 80), *(_QWORD *)(v2 + 88), *(_QWORD *)(v2 + 96), 0);
        sub_1B20BFD40(1, *(_QWORD *)(v2 + 40), 0, *(_QWORD *)(v2 + 112), *(_QWORD *)(v2 + 120), *(_QWORD *)(v2 + 128), 1, 0, 0, ObjectType);
        result = (id)swift_unknownObjectRelease();
      }
    }
  }
  v9 = (int8x16_t)vsubq_s64(*(int64x2_t *)v2, *(int64x2_t *)(v2 + 32));
  *(int8x16_t *)v2 = v9;
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 40) = 0;
  if (v9.i64[0] >= 1)
  {
    v10.i64[0] = 0xFFFFLL;
    v10.i64[1] = 0xFFFFLL;
    v11 = vbslq_s8((int8x16_t)vcgtq_s64(v10, (int64x2_t)v9), v9, (int8x16_t)v10);
    *(int8x16_t *)(v2 + 16) = v11;
    v12 = 16 * v11.i64[0];
    swift_retain();
    v13 = (void *)sub_1B1D22DA8(0, v12);
    v15 = v14;
    v17 = v16;
    swift_unknownObjectRetain();
    swift_release();
    swift_unknownObjectRelease();
    v3[6] = v13;
    v3[7] = v15;
    v3[8] = v17;
    v18 = objc_msgSend(v13, sel_storageMode);
    v19 = 0;
    if (v18 != (id)2)
    {
      v20 = (char *)objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
      v21 = v13;
      v19 = &v20[v15];
    }
    v3[9] = v19;
    v22 = 4 * v3[2];
    swift_retain();
    v23 = (void *)sub_1B1D22DA8(0, v22);
    v25 = v24;
    v27 = v26;
    swift_unknownObjectRetain();
    swift_release();
    swift_unknownObjectRelease();
    v3[10] = v23;
    v3[11] = v25;
    v3[12] = v27;
    v28 = objc_msgSend(v23, sel_storageMode);
    v29 = 0;
    if (v28 != (id)2)
    {
      v30 = (char *)objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
      v31 = v23;
      v29 = &v30[v25];
    }
    v3[13] = v29;
    v32 = 2 * v3[3];
    swift_retain();
    v33 = (void *)sub_1B1D22DA8(0, v32);
    v35 = v34;
    v37 = v36;
    swift_unknownObjectRetain();
    swift_release();
    swift_unknownObjectRelease();
    v3[14] = v33;
    v3[15] = v35;
    v3[16] = v37;
    result = objc_msgSend(v33, sel_storageMode);
    v38 = 0;
    if (result != (id)2)
    {
      v39 = (char *)objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
      result = v33;
      v38 = &v39[v35];
    }
    v3[17] = v38;
  }
  return result;
}

uint64_t sub_1B2007394(uint64_t result, char a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  __int16 *v15;
  uint64_t v16;
  unint64_t v17;
  int64x2_t v18;
  int64x2_t v19;
  int64x2_t v20;
  int64x2_t v21;
  int64x2_t v22;
  int16x8_t v23;
  __int16 v24;
  uint64_t v25;
  unint64_t v26;
  int16x8x2_t v27;

  v3 = v2[17];
  v5 = v2[4];
  v4 = v2[5];
  v6 = result - 1;
  if (result == 1)
  {
    v8 = v2[5];
LABEL_13:
    if ((a2 & 1) == 0)
      goto LABEL_35;
LABEL_31:
    v26 = v5 + v6;
    if (v26 < 0x10000)
    {
      *(_WORD *)(v3 + 2 * v8) = v26;
      if ((v5 & 0x8000000000000000) == 0 && v5 < 0x10000)
      {
        *(_WORD *)(v3 + 2 * v8 + 2) = v5;
        v6 = result;
        goto LABEL_35;
      }
    }
    while (1)
    {
LABEL_36:
      sub_1B222967C();
      __break(1u);
    }
  }
  if ((v5 & 0x8000000000000000) != 0)
    goto LABEL_36;
  if (v5 >> 16)
    goto LABEL_36;
  *(_WORD *)(v3 + 2 * v4) = v5;
  if (v5 == 0xFFFF)
    goto LABEL_36;
  v7 = v4 + 1;
  *(_WORD *)(v3 + 2 * (v4 + 1)) = v5 + 1;
  v8 = v4 + 2;
  if (result == 2)
    goto LABEL_13;
  v9 = result - 3;
  v10 = 0xFFFF - v5;
  if (result - 3 < 0xFFFF - v5)
    v10 = result - 3;
  if (v10 >= 65534 - v5)
    v10 = 65534 - v5;
  v11 = v10 + 1;
  if (v10 + 1 > 0x18)
  {
    if (v9 >= 0xFFFF - v5)
      v9 = 0xFFFF - v5;
    if (v9 >= 65534 - v5)
      v13 = 65534 - v5;
    else
      v13 = v9;
    v14 = v3 + 2 * v4;
    v15 = (__int16 *)(v14 + 4);
    v12 = 1;
    if (v14 + 4 + 4 * v13 >= v14 + 4 && v14 + 6 + 4 * v13 >= v14 + 6 && !(v13 >> 62))
    {
      v16 = v11 & 7;
      if ((v11 & 7) == 0)
        v16 = 8;
      v17 = v11 - v16;
      v8 += 2 * v17;
      v7 += 2 * v17;
      v12 = v17 + 1;
      v18 = (int64x2_t)xmmword_1B22AD320;
      v19 = (int64x2_t)xmmword_1B22AD330;
      v20 = (int64x2_t)xmmword_1B22A30A0;
      v21 = (int64x2_t)xmmword_1B226D240;
      v22 = vdupq_n_s64(v5);
      v23.i64[0] = 0x1000100010001;
      v23.i64[1] = 0x1000100010001;
      do
      {
        v27.val[0] = vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vaddq_s64(v21, v22), (int32x4_t)vaddq_s64(v20, v22)), (int16x8_t)vuzp1q_s32((int32x4_t)vaddq_s64(v19, v22), (int32x4_t)vaddq_s64(v18, v22)));
        v27.val[1] = vaddq_s16(v27.val[0], v23);
        vst2q_s16(v15, v27);
        v15 += 16;
        v27.val[0] = (int16x8_t)vdupq_n_s64(8uLL);
        v19 = vaddq_s64(v19, (int64x2_t)v27.val[0]);
        v20 = vaddq_s64(v20, (int64x2_t)v27.val[0]);
        v21 = vaddq_s64(v21, (int64x2_t)v27.val[0]);
        v18 = vaddq_s64(v18, (int64x2_t)v27.val[0]);
        v17 -= 8;
      }
      while (v17);
    }
  }
  else
  {
    v12 = 1;
  }
  do
  {
    if (0x10000 - v5 == v12)
      goto LABEL_36;
    v24 = v5 + v12;
    *(_WORD *)(v3 + 2 * v8) = v5 + v12;
    if (0xFFFF - v5 == v12)
      goto LABEL_36;
    ++v12;
    v25 = v7 + 2;
    *(_WORD *)(v3 + 4 + 2 * v7) = v24 + 1;
    v8 = v7 + 3;
    v7 += 2;
  }
  while (v6 != v12);
  v8 = v25 + 1;
  if ((a2 & 1) != 0)
    goto LABEL_31;
LABEL_35:
  v2[5] = v4 + 2 * v6;
  return result;
}

_QWORD *sub_1B2007618(uint64_t a1)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  int v4;
  _QWORD *result;
  double v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  ValueMetadata *v10;
  _UNKNOWN **v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned __int32 v17;
  unint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  os_unfair_lock_s *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unsigned __int32 v40;
  unint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  os_unfair_lock_s *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unsigned int *v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  unint64_t v58;
  os_unfair_lock_s *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _OWORD *v68;
  unint64_t v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  os_unfair_lock_s *v73;
  char *v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  uint64_t v79;
  _QWORD *v80;
  _OWORD *v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  __int128 *v85;
  __int128 v86;
  uint64_t v87;
  uint64_t v88;
  os_unfair_lock_s *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  char v99;
  _OWORD *v100;
  unint64_t v101;
  __int128 *v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  uint64_t v107;
  uint64_t *v108;
  char *v109;
  unint64_t v110;
  _OWORD *v111;
  unint64_t v112;
  uint64_t v113;
  int v114;
  uint64_t v115;
  os_unfair_lock_s *v116;
  char *v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  uint64_t v122;
  _QWORD *v123;
  _OWORD *v124;
  unint64_t v125;
  uint64_t v126;
  unint64_t v127;
  __int128 *v128;
  __int128 v129;
  uint64_t v130;
  uint64_t v131;
  os_unfair_lock_s *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  _QWORD *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  char v142;
  _OWORD *v143;
  unint64_t v144;
  __int128 *v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  uint64_t v150;
  uint64_t *v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t v154;
  unint64_t v155;
  uint64_t v156;
  unsigned __int32 v157;
  unint64_t *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  unint64_t v162;
  unint64_t v163;
  unint64_t v164;
  os_unfair_lock_s *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  _QWORD *v169;
  unint64_t v170;
  uint64_t v171;
  char *v172;
  uint64_t v173;
  char *v174;
  uint64_t v175;
  unsigned int *v176;
  _OWORD *v177;
  uint64_t v178;
  uint64_t *v179;
  char *v180;
  os_unfair_lock_s *v181;
  uint64_t v182;
  uint64_t v183;
  _QWORD *v184;
  uint64_t v185;
  uint64_t v186;
  _QWORD *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  _OWORD *v191;
  uint64_t v192;
  _QWORD *v193;
  char *v194;
  uint64_t v195;
  uint64_t v196;
  int v197;
  int v198;
  BOOL v199;
  uint64_t v200;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  _QWORD *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  _QWORD *v218;
  _OWORD *v219;
  uint64_t v221;
  uint64_t v222;
  _QWORD *v223;
  id v224;
  void *v225;
  id v226;
  id v227;
  uint64_t v228;
  char *v229;
  uint64_t v230;
  uint64_t v231;
  int v232;
  unsigned __int32 v233;
  unsigned __int32 v234;
  unsigned __int32 v235;
  uint64_t v236;
  char *v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  __n128 v242;
  uint64_t v243;
  __n128 v244;
  __n128 v245;
  uint64_t v246;
  id v247;
  void *v248;
  id v249;
  id v250;
  uint64_t v251;
  char *v252;
  uint64_t v253;
  uint64_t v254;
  int v255;
  unsigned __int32 v256;
  unsigned __int32 v257;
  unsigned __int32 v258;
  uint64_t v259;
  char *v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  __n128 v265;
  uint64_t v266;
  __n128 v267;
  __n128 v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  _DWORD *v274;
  uint64_t v275;
  int v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  _QWORD *v281;
  uint64_t v283;
  uint64_t v284;
  _QWORD *v285;
  id v286;
  id v287;
  uint64_t v288;
  char *v289;
  uint64_t v290;
  int v291;
  unsigned __int32 v292;
  unsigned __int32 v293;
  unsigned __int32 v294;
  __n128 *v295;
  uint64_t v296;
  char *v297;
  unsigned int v298;
  unsigned int v299;
  uint64_t v300;
  __n128 v301;
  __n128 v302;
  uint64_t v303;
  uint64_t v304;
  __n128 v305;
  id v306;
  id v307;
  uint64_t v308;
  char *v309;
  uint64_t v310;
  int v311;
  unsigned __int32 v312;
  unsigned __int32 v313;
  unsigned __int32 v314;
  __n128 *v315;
  uint64_t v316;
  char *v317;
  unsigned int v318;
  unsigned int v319;
  uint64_t v320;
  __n128 v321;
  __n128 v322;
  uint64_t v323;
  uint64_t v324;
  __n128 v325;
  uint64_t v326;
  int v327;
  int v328;
  BOOL v329;
  uint64_t v330;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  _QWORD *v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  char *v346;
  uint64_t v347;
  char *v348;
  uint64_t v350;
  _OWORD *v351;
  _QWORD *v352;
  id v353;
  void *v354;
  id v355;
  uint64_t v356;
  char *v357;
  uint64_t v358;
  uint64_t v359;
  int v360;
  unsigned __int32 v361;
  unsigned __int32 v362;
  unsigned __int32 v363;
  __n128 *v364;
  char *v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  __n128 v370;
  __n128 v371;
  uint64_t v372;
  uint64_t v373;
  __n128 v374;
  id v375;
  void *v376;
  id v377;
  uint64_t v378;
  char *v379;
  uint64_t v380;
  uint64_t v381;
  int v382;
  unsigned __int32 v383;
  unsigned __int32 v384;
  unsigned __int32 v385;
  __n128 *v386;
  char *v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  __n128 v392;
  __n128 v393;
  uint64_t v394;
  uint64_t v395;
  __n128 v396;
  uint64_t v397;
  uint64_t v398;
  _DWORD *v399;
  uint64_t v400;
  int v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  _QWORD *v407;
  void *v408;
  uint64_t v410;
  _QWORD *v411;
  id v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  int v416;
  unsigned __int32 v417;
  unsigned __int32 v418;
  unsigned __int32 v419;
  __n128 *v420;
  char *v421;
  unsigned int v422;
  unsigned int v423;
  uint64_t v424;
  __n128 v425;
  __n128 v426;
  uint64_t v427;
  uint64_t v428;
  __n128 v429;
  id v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  int v434;
  unsigned __int32 v435;
  unsigned __int32 v436;
  unsigned __int32 v437;
  __n128 *v438;
  char *v439;
  unsigned int v440;
  unsigned int v441;
  uint64_t v442;
  __n128 v443;
  __n128 v444;
  uint64_t v445;
  uint64_t v446;
  __n128 v447;
  char *v448;
  unsigned __int16 **v449;
  _BYTE *v450;
  __int128 v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  _QWORD *v456;
  _QWORD *v457;
  int v458;
  uint64_t v459;
  uint64_t v460;
  char *v461;
  uint64_t v462;
  _QWORD *v463;
  char *v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  _QWORD *v468;
  uint64_t v469;
  uint64_t v470;
  __n128 *v471;
  int64x2_t v472;
  _OWORD *v473;
  char *v474;
  _OWORD *v475;
  uint64_t v476;
  __int128 v477;
  __n128 v478;
  __n128 v479;
  __n128 v480;
  __n128 v481;
  __n128 v482;
  __n128 v483;
  __n128 v484;
  __n128 v485;
  __n128 v486;
  __n128 v487;
  __n128 v488;
  uint64_t v489;
  int v490;
  __n128 v491;
  __n128 v492;
  __n128 v493;
  __n128 v494;
  __n128 v495;
  __n128 v496;
  __n128 v497;
  __n128 v498;
  __n128 v499;
  __n128 v500;
  __n128 v501;
  __n128 v502;
  char *v503;
  _QWORD v504[12];
  _QWORD v505[12];
  _QWORD v506[12];
  _QWORD v507[12];
  _QWORD v508[12];
  __int128 v509;
  __int128 v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t v514;
  _QWORD *v515;
  uint64_t v516;
  __int128 v517;
  __int128 v518;
  uint64_t v519;
  _OWORD v520[2];
  uint64_t v521;
  uint64_t v522;
  unint64_t v523;
  unint64_t v524;
  unint64_t v525;
  uint64_t v526;
  __int128 v527;
  __int128 v528;
  uint64_t v529;
  _OWORD v530[2];
  uint64_t v531;
  unint64_t v532;
  unint64_t v533;
  uint64_t v534;
  unint64_t v535;
  uint64_t v536;
  __int128 v537;
  __int128 v538;
  uint64_t v539;
  _OWORD v540[2];
  uint64_t v541;
  uint64_t v542;
  unint64_t v543;
  unint64_t v544;
  unint64_t v545;
  uint64_t v546;
  __int128 v547;
  __int128 v548;
  uint64_t v549;
  _OWORD v550[2];
  uint64_t v551;
  uint64_t v552;
  unint64_t v553;
  unint64_t v554;
  unint64_t v555;
  uint64_t v556;
  __int128 v557;
  __int128 v558;
  uint64_t v559;
  _OWORD v560[2];
  uint64_t v561;
  _OWORD v562[2];
  uint64_t v563;
  _OWORD v564[2];
  uint64_t v565;
  _OWORD v566[2];
  uint64_t v567;
  _OWORD v568[2];
  uint64_t v569;
  _BYTE v570[40];
  _OWORD v571[2];
  uint64_t v572;
  _BYTE v573[40];
  __int128 v574;
  __int128 v575;
  uint64_t v576;
  unint64_t v577;
  uint64_t v578;
  uint64_t v579;
  _BYTE v580[24];
  unint64_t v581;
  unint64_t v582;
  unint64_t v583;
  _OWORD v584[2];
  uint64_t v585;
  _BYTE v586[40];
  _OWORD v587[2];
  _BYTE v588[80];
  _OWORD v589[2];
  _BYTE v590[80];
  _OWORD v591[2];
  uint64_t v592;
  _BYTE v593[40];
  __int128 v594;
  __int128 v595;
  uint64_t v596;
  unint64_t v597;
  uint64_t v598;
  uint64_t v599;
  _BYTE v600[24];
  unint64_t v601;
  unint64_t v602;
  unint64_t v603;
  _OWORD v604[2];
  uint64_t v605;
  _BYTE v606[40];
  _QWORD v607[8];
  _BYTE v608[24];
  unint64_t v609;
  unint64_t v610;
  unint64_t v611;
  _OWORD v612[2];
  uint64_t v613;

  swift_retain();
  sub_1B20001B0();
  v3 = v2;
  v4 = v2;
  result = (_QWORD *)swift_release();
  if (v4 == 2)
    return result;
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues)
                 + 8 * *(_QWORD *)thread_worker_index(v6)
                 + 8);
  sub_1B1BBF3BC(0, (unint64_t *)&qword_1ED4BAD80, (unint64_t *)&qword_1ED4B8C90, (unint64_t *)&qword_1ED4B8C70);
  v8 = swift_allocObject();
  v9 = v8;
  v10 = &type metadata for DebugInfoA;
  *(_OWORD *)(v8 + 16) = xmmword_1B226D240;
  if ((v3 & 1) == 0)
    v10 = &type metadata for DebugInfoB;
  *(_QWORD *)(v8 + 32) = v10;
  v492.n128_u64[0] = v8 + 32;
  v11 = &off_1E636D550;
  if ((v3 & 1) == 0)
    v11 = &off_1E636D640;
  *(_QWORD *)(v8 + 40) = v11;
  v490 = sub_1B1B4D2D0(0, 255, 0);
  if (qword_1EEF57350 != -1)
    swift_once();
  v612[0] = xmmword_1EEFD5518;
  v612[1] = unk_1EEFD5528;
  v613 = qword_1EEFD5538;
  v12 = *(char **)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_queryManager);
  v470 = a1;
  sub_1B1E8FCE4(a1, (uint64_t)v612, 0x200000000, v504);
  sub_1B1A18378((uint64_t)v504, (uint64_t)v550, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  v476 = v9;
  v489 = v7;
  v474 = v12;
  if (!*(_QWORD *)&v550[0])
    goto LABEL_21;
  v557 = v550[0];
  v558 = v550[1];
  v559 = v551;
  v497.n128_u64[0] = v556;
  if (v556 <= 0)
  {
    sub_1B1A086DC(v504, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
LABEL_21:
    v503 = 0;
    goto LABEL_22;
  }
  v13 = v553;
  if (v553)
  {
    v14 = v552;
    v15 = v555;
    v502.n128_u64[0] = v555;
    v16 = *(_QWORD *)(v555 + 32);
    v496.n128_u64[0] = v554;
    v17 = *(unsigned __int8 *)(v554 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
    v494.n128_u64[0] = v555 + 48;
    swift_bridgeObjectRetain();
    sub_1B1A086DC(v504, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1A086A4);
    v503 = 0;
    v493.n128_u64[0] = v15 + 64;
    v491.n128_u64[0] = (unint64_t)v608;
    v18 = (unint64_t *)(v14 + 24);
    v495.n128_u32[0] = v17;
    do
    {
      v19 = *((unsigned int *)v18 - 6);
      v20 = *((unsigned int *)v18 - 5);
      v21 = *((unsigned int *)v18 - 4);
      v22 = *(v18 - 1);
      v23 = *v18;
      v24 = v18[1];
      v25 = v18[2];
      v501.n128_u64[0] = v13;
      v500.n128_u64[0] = v22;
      v499.n128_u64[0] = v23;
      v498.n128_u64[0] = v24;
      if (v17)
      {
        v26 = *(os_unfair_lock_s **)(v25 + 376);
        swift_retain();
        os_unfair_lock_lock(v26);
        os_unfair_lock_lock(*(os_unfair_lock_t *)(v25 + 344));
      }
      else
      {
        swift_retain();
      }
      ecs_stack_allocator_push_snapshot(v16);
      sub_1B1A18378(v494.n128_i64[0], (uint64_t)v606, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
      v27 = *(_QWORD *)(v502.n128_u64[0] + 32);
      v28 = v16;
      v29 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v25 + 40) + 16) + 32) + 16) + 1;
      swift_retain();
      v30 = v27;
      v31 = v502.n128_u64[0];
      *(_QWORD *)(v502.n128_u64[0] + 48) = ecs_stack_allocator_allocate(v30, 48 * v29, 8);
      *(_QWORD *)(v31 + 56) = v29;
      v32 = (_QWORD *)v493.n128_u64[0];
      *(_QWORD *)(v493.n128_u64[0] + 8) = 0;
      v32[2] = 0;
      *v32 = 0;
      swift_release();
      v607[0] = v496.n128_u64[0];
      v607[1] = v25;
      v607[2] = v31;
      v607[3] = v21;
      v607[4] = (v20 - v19 + v21);
      v607[5] = v497.n128_u64[0];
      v607[6] = v19;
      v607[7] = v20;
      v33 = v491.n128_u64[0];
      *(_QWORD *)v491.n128_u64[0] = 0;
      *(_QWORD *)(v33 + 8) = 0;
      v608[16] = 1;
      v609 = v500.n128_u64[0];
      v610 = v499.n128_u64[0];
      v611 = v498.n128_u64[0];
      v9 = v476;
      swift_bridgeObjectRetain();
      v34 = v503;
      sub_1B21A1A24(v607, v489, v476, v490);
      if (v503)
        goto LABEL_324;
      swift_bridgeObjectRelease();
      v560[0] = v557;
      v560[1] = v558;
      v561 = v559;
      sub_1B1F05D48((_QWORD *)v31, (unsigned __int16 **)v560, (uint64_t)v606);
      v503 = 0;
      sub_1B1F03804((char *)v25);
      ecs_stack_allocator_pop_snapshot(v28);
      v16 = v28;
      v17 = v495.n128_u32[0];
      if ((v495.n128_u8[0] & 1) != 0)
      {
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v25 + 344));
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v25 + 376));
      }
      swift_release();
      v18 += 6;
      v13 = v501.n128_u64[0] - 1;
    }
    while (v501.n128_u64[0] != 1);
    sub_1B1A086DC(v504, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
    sub_1B1A086DC(v504, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
    swift_bridgeObjectRelease();
    v7 = v489;
  }
  else
  {
    sub_1B1A086DC(v504, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
    v503 = 0;
    v7 = v489;
  }
LABEL_22:
  v35 = v470;
  if (qword_1EEF57348 != -1)
  {
    swift_once();
    v35 = v470;
  }
  v604[0] = xmmword_1EEFD54E0;
  v604[1] = *(_OWORD *)algn_1EEFD54F0;
  v605 = qword_1EEFD5500;
  sub_1B1E8FCE4(v35, (uint64_t)v604, 0x200000000, v505);
  sub_1B1A18378((uint64_t)v505, (uint64_t)v540, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (*(_QWORD *)&v540[0])
  {
    v547 = v540[0];
    v548 = v540[1];
    v549 = v541;
    v497.n128_u64[0] = v546;
    if (v546 <= 0)
    {
      sub_1B1A086DC(v505, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
    }
    else
    {
      v36 = v543;
      if (v543)
      {
        v37 = v542;
        v38 = v545;
        v502.n128_u64[0] = v545;
        v39 = *(_QWORD *)(v545 + 32);
        v496.n128_u64[0] = v544;
        v40 = *(unsigned __int8 *)(v544 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
        v494.n128_u64[0] = v545 + 48;
        swift_bridgeObjectRetain();
        sub_1B1A086DC(v505, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1A086A4);
        v493.n128_u64[0] = v38 + 64;
        v491.n128_u64[0] = (unint64_t)v600;
        v41 = (unint64_t *)(v37 + 24);
        v495.n128_u32[0] = v40;
        do
        {
          v42 = *((unsigned int *)v41 - 6);
          v43 = *((unsigned int *)v41 - 5);
          v44 = *((unsigned int *)v41 - 4);
          v500.n128_u64[0] = *(v41 - 1);
          v499.n128_u64[0] = *v41;
          v25 = v41[2];
          v498.n128_u64[0] = v41[1];
          v501.n128_u64[0] = v36;
          if (v40)
          {
            v45 = *(os_unfair_lock_s **)(v25 + 376);
            swift_retain();
            os_unfair_lock_lock(v45);
            os_unfair_lock_lock(*(os_unfair_lock_t *)(v25 + 344));
          }
          else
          {
            swift_retain();
          }
          ecs_stack_allocator_push_snapshot(v39);
          sub_1B1A18378(v494.n128_i64[0], (uint64_t)v593, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
          v46 = *(_QWORD *)(v502.n128_u64[0] + 32);
          v28 = v39;
          v47 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v25 + 40) + 16) + 32) + 16) + 1;
          swift_retain();
          v48 = v46;
          v31 = v502.n128_u64[0];
          *(_QWORD *)(v502.n128_u64[0] + 48) = ecs_stack_allocator_allocate(v48, 48 * v47, 8);
          *(_QWORD *)(v31 + 56) = v47;
          v49 = (_QWORD *)v493.n128_u64[0];
          *(_QWORD *)(v493.n128_u64[0] + 8) = 0;
          v49[2] = 0;
          *v49 = 0;
          swift_release();
          *(_QWORD *)&v594 = v496.n128_u64[0];
          *((_QWORD *)&v594 + 1) = v25;
          *(_QWORD *)&v595 = v31;
          *((_QWORD *)&v595 + 1) = v44;
          v596 = (v43 - v42 + v44);
          v597 = v497.n128_u64[0];
          v598 = v42;
          v599 = v43;
          v50 = v491.n128_u64[0];
          *(_QWORD *)v491.n128_u64[0] = 0;
          *(_QWORD *)(v50 + 8) = 0;
          v600[16] = 1;
          v601 = v500.n128_u64[0];
          v602 = v499.n128_u64[0];
          v603 = v498.n128_u64[0];
          v9 = v476;
          swift_bridgeObjectRetain();
          sub_1B21A1D48(&v594, v489, v476, v490);
          if (v503)
          {
            swift_bridgeObjectRelease_n();

            v574 = v547;
            v575 = v548;
            v576 = v549;
            v449 = (unsigned __int16 **)&v574;
            v450 = v593;
            goto LABEL_327;
          }
          swift_bridgeObjectRelease();
          v562[0] = v547;
          v562[1] = v548;
          v563 = v549;
          sub_1B1F05D48((_QWORD *)v31, (unsigned __int16 **)v562, (uint64_t)v593);
          v503 = 0;
          sub_1B1F03804((char *)v25);
          ecs_stack_allocator_pop_snapshot(v28);
          v39 = v28;
          v40 = v495.n128_u32[0];
          if ((v495.n128_u8[0] & 1) != 0)
          {
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v25 + 344));
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v25 + 376));
          }
          swift_release();
          v41 += 6;
          v36 = v501.n128_u64[0] - 1;
        }
        while (v501.n128_u64[0] != 1);
        sub_1B1A086DC(v505, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
        sub_1B1A086DC(v505, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
        swift_bridgeObjectRelease();
        v7 = v489;
      }
      else
      {
        sub_1B1A086DC(v505, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
        v7 = v489;
      }
    }
  }
  v51 = v470;
  if (qword_1EEF57320 != -1)
  {
    swift_once();
    v51 = v470;
  }
  v591[0] = xmmword_1EEFD5450;
  v591[1] = unk_1EEFD5460;
  v592 = qword_1EEFD5470;
  sub_1B1E8FCE4(v51, (uint64_t)v591, 0x200000000, v506);
  sub_1B1A18378((uint64_t)v506, (uint64_t)v530, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (*(_QWORD *)&v530[0])
  {
    v537 = v530[0];
    v538 = v530[1];
    v539 = v531;
    if (v536 >= 1)
    {
      v482.n128_u64[0] = v533;
      if (v533)
      {
        v481.n128_u64[0] = v532;
        v52 = *(_QWORD *)(v535 + 32);
        v488.n128_u32[0] = *(unsigned __int8 *)(v534 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
        v479.n128_u64[0] = v535 + 48;
        v491.n128_u64[0] = v535;
        v478.n128_u64[0] = v535 + 64;
        v475 = v588;
        v473 = v590;
        swift_retain();
        swift_retain();
        swift_retain();
        v53 = 0;
        v497.n128_u64[0] = v9 + 32;
        v484.n128_u64[0] = v9 + 64;
        v477 = xmmword_1B2244E20;
        v472 = vdupq_n_s64(0x3F000000uLL);
        v480.n128_u64[0] = v52;
        while (1)
        {
          v54 = (unsigned int *)(v481.n128_u64[0] + 48 * v53);
          v55 = *v54;
          v501.n128_u64[0] = v54[1];
          v56 = (uint64_t *)*((_QWORD *)v54 + 2);
          v57 = *((_QWORD *)v54 + 3);
          v58 = *((_QWORD *)v54 + 5);
          v499.n128_u64[0] = *((_QWORD *)v54 + 4);
          v487.n128_u64[0] = v53;
          if (v488.n128_u32[0])
          {
            v59 = *(os_unfair_lock_s **)(v58 + 376);
            swift_retain();
            os_unfair_lock_lock(v59);
            os_unfair_lock_lock(*(os_unfair_lock_t *)(v58 + 344));
          }
          else
          {
            swift_retain();
          }
          ecs_stack_allocator_push_snapshot(v52);
          sub_1B1A18378(v479.n128_i64[0], (uint64_t)v586, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
          v60 = v491.n128_u64[0];
          v61 = *(_QWORD *)(v491.n128_u64[0] + 32);
          v62 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v58 + 40) + 16) + 32) + 16) + 1;
          swift_retain();
          *(_QWORD *)(v60 + 48) = ecs_stack_allocator_allocate(v61, 48 * v62, 8);
          *(_QWORD *)(v60 + 56) = v62;
          v63 = (_QWORD *)v478.n128_u64[0];
          *(_QWORD *)(v478.n128_u64[0] + 8) = 0;
          v63[2] = 0;
          *v63 = 0;
          swift_release();
          v64 = v499.n128_u64[0];
          sub_1B1A12038((uint64_t)&type metadata for ParticlePlaneCollider, (uint64_t)&off_1E63A4A68, v56, v57, v499.n128_i64[0], v60);
          v486.n128_u64[0] = v58;
          v65 = sub_1B1A12038((uint64_t)&type metadata for WorldTransform, (uint64_t)&off_1E6382C00, v56, v57, v64, v60);
          v500.n128_u64[0] = v65;
          if (!v56)
            break;
          if (v64)
          {
            v67 = 0;
            v587[0] = v477;
            v587[1] = vdupq_n_s64(0x3F000000uLL);
            v68 = v475;
            *v475 = 0u;
            v68[1] = 0u;
            v68[2] = 0u;
            v68[3] = 0u;
            v588[64] = 6;
            v69 = *(_QWORD *)(v476 + 16);
            v498.n128_u64[0] = 16 * v69 + 64;
            v485.n128_u64[0] = 16 * v69;
            v494.n128_u64[0] = v497.n128_u64[0] + 16 * v69;
            v495.n128_u64[0] = v69 - 1;
            v496.n128_u64[0] = 16 * (v69 - 1);
            v493.n128_u64[0] = v69 & 0x7FFFFFFFFFFFFFFCLL;
            v483.n128_u64[0] = (v69 & 0x7FFFFFFFFFFFFFFCLL) + 4;
            while (1)
            {
              *(double *)&v75 = MEMORY[0x1E0C80A78](v65, v66);
              *(&v452 - 10) = (uint64_t)v587;
              *((_DWORD *)&v452 - 18) = v490;
              *((_OWORD *)&v452 - 4) = v75;
              *((_OWORD *)&v452 - 3) = v76;
              *((_OWORD *)&v452 - 2) = v77;
              v451 = v78;
              v79 = *(_QWORD *)(v7 + 32);
              ecs_stack_allocator_push_snapshot(v79);
              v80 = ecs_stack_allocator_allocate(v79, v498.n128_i64[0], 8);
              v81 = v80;
              *v80 = &type metadata for DebugInfoWireframePrimitive;
              v80[1] = &off_1E63B2990;
              v80[2] = &type metadata for DebugInfoColor;
              v80[3] = &off_1E637ED40;
              v80[4] = &type metadata for WorldTransform;
              v80[5] = &off_1E6382C00;
              v80[6] = &type metadata for Beamed;
              v80[7] = &off_1E63BB000;
              v502.n128_u64[0] = (unint64_t)&v452;
              v501.n128_u64[0] = (unint64_t)(&v452 - 12);
              if (!v69)
              {
                v83 = 4;
                goto LABEL_62;
              }
              if (v69 < 0x10)
                break;
              v82 = 0;
              if ((_QWORD *)((char *)v80 + v496.n128_u64[0] + 64) < v80 + 8
                || (_QWORD *)((char *)v80 + v496.n128_u64[0] + 72) < v80 + 9
                || v495.n128_u64[0] >> 60)
              {
                goto LABEL_57;
              }
              if ((unint64_t)(v80 + 8) < v494.n128_u64[0]
                && v492.n128_u64[0] < (unint64_t)v80 + v485.n128_u64[0] + 64)
              {
                break;
              }
              v100 = v80 + 12;
              v101 = v493.n128_u64[0];
              v102 = (__int128 *)v484.n128_u64[0];
              do
              {
                v104 = *(v102 - 2);
                v103 = *(v102 - 1);
                v106 = *v102;
                v105 = v102[1];
                v102 += 4;
                *(v100 - 2) = v104;
                *(v100 - 1) = v103;
                *v100 = v106;
                v100[1] = v105;
                v100 += 4;
                v101 -= 4;
              }
              while (v101);
              v82 = v493.n128_u64[0];
              v83 = v483.n128_u64[0];
              if (v69 != v493.n128_u64[0])
                goto LABEL_58;
LABEL_62:
              v87 = *(_QWORD *)(v7 + 16);
              v88 = v87 + OBJC_IVAR____TtC3VFX13EntityManager_lock;
              v89 = *(os_unfair_lock_s **)(v87 + OBJC_IVAR____TtC3VFX13EntityManager_lock + 24);
              swift_retain();
              os_unfair_lock_lock(v89);
              v90 = sub_1B1DAD870((uint64_t)v81, v83, MEMORY[0x1E0DEE9D8]);
              v92 = v90;
              v93 = v91;
              v94 = *(_QWORD **)(v87 + 72);
              v95 = v94[2];
              if (v95)
              {
                v96 = v94[4];
                if (*(_QWORD *)(v96 + 144) != v90)
                {
                  v107 = v95 - 1;
                  if (!v107)
                    goto LABEL_52;
                  v108 = v94 + 5;
                  while (1)
                  {
                    v96 = *v108;
                    if (*(_QWORD *)(*v108 + 144) == v90)
                      break;
                    ++v108;
                    if (!--v107)
                      goto LABEL_52;
                  }
                }
                v97 = *(_QWORD *)(v96 + 16);
                if (*(_QWORD *)(v97 + 16))
                {
                  v98 = sub_1B1DC3AC8(v91);
                  if ((v99 & 1) != 0)
                  {
                    v71 = *(_DWORD *)(*(_QWORD *)(v97 + 56) + 4 * v98);
                    goto LABEL_53;
                  }
                }
              }
LABEL_52:
              v70 = sub_1B1DC9E90(v81, v83);
              v71 = sub_1B1DA8838(v92, v93, v70, MEMORY[0x1E0DEE9D8]);
              swift_release();
LABEL_53:
              v72 = *(_QWORD *)(*(_QWORD *)(v87 + 80) + 8 * v71 + 32);
              v73 = *(os_unfair_lock_s **)(v88 + 24);
              swift_retain();
              os_unfair_lock_unlock(v73);
              swift_release();
              LOBYTE(v574) = 1;
              v7 = v489;
              v74 = v503;
              sub_1B1F10B7C(v72, 1, 1, 0x100000000uLL, v489, (uint64_t)sub_1B200F9F0, v501.n128_i64[0]);
              v503 = v74;
              swift_release();
              v65 = ecs_stack_allocator_pop_snapshot(*(_QWORD *)(v7 + 32));
              if (++v67 == v499.n128_u64[0])
                goto LABEL_83;
            }
            v82 = 0;
LABEL_57:
            v83 = 4;
LABEL_58:
            v84 = v69 - v82;
            v85 = (__int128 *)(v497.n128_u64[0] + 16 * v82);
            do
            {
              v86 = *v85++;
              *(_OWORD *)&v80[2 * v83++] = v86;
              --v84;
            }
            while (v84);
            goto LABEL_62;
          }
LABEL_83:
          v564[0] = v537;
          v564[1] = v538;
          v565 = v539;
          v109 = v503;
          sub_1B1F05D48(v491.n128_u64[0], (unsigned __int16 **)v564, (uint64_t)v586);
          v503 = v109;
          v110 = v486.n128_u64[0];
          sub_1B1F03804((char *)v486.n128_u64[0]);
          v52 = v480.n128_u64[0];
          ecs_stack_allocator_pop_snapshot(v480.n128_i64[0]);
          if ((v488.n128_u8[0] & 1) != 0)
          {
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v110 + 344));
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v110 + 376));
          }
          swift_release();
          v53 = v487.n128_u64[0] + 1;
          if (v487.n128_u64[0] + 1 == v482.n128_u64[0])
          {
            sub_1B1A086DC(v506, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
            goto LABEL_116;
          }
        }
        if ((_DWORD)v55 == v501.n128_u32[0])
          goto LABEL_83;
        v589[0] = v477;
        v589[1] = v472;
        v111 = v473;
        *v473 = 0u;
        v111[1] = 0u;
        v111[2] = 0u;
        v111[3] = 0u;
        v590[64] = 6;
        v112 = *(_QWORD *)(v476 + 16);
        v498.n128_u64[0] = 16 * v112 + 64;
        v485.n128_u64[0] = 16 * v112;
        v494.n128_u64[0] = v497.n128_u64[0] + 16 * v112;
        v495.n128_u64[0] = v112 - 1;
        v496.n128_u64[0] = 16 * (v112 - 1);
        v493.n128_u64[0] = v112 & 0x7FFFFFFFFFFFFFFCLL;
        v483.n128_u64[0] = (v112 & 0x7FFFFFFFFFFFFFFCLL) + 4;
        v499.n128_u64[0] = v112;
        while (1)
        {
          *(double *)&v118 = MEMORY[0x1E0C80A78](v65, v66);
          *(&v452 - 10) = (uint64_t)v589;
          *((_DWORD *)&v452 - 18) = v490;
          *((_OWORD *)&v452 - 4) = v118;
          *((_OWORD *)&v452 - 3) = v119;
          *((_OWORD *)&v452 - 2) = v120;
          v451 = v121;
          v122 = *(_QWORD *)(v7 + 32);
          ecs_stack_allocator_push_snapshot(v122);
          v123 = ecs_stack_allocator_allocate(v122, v498.n128_i64[0], 8);
          v124 = v123;
          *v123 = &type metadata for DebugInfoWireframePrimitive;
          v123[1] = &off_1E63B2990;
          v123[2] = &type metadata for DebugInfoColor;
          v123[3] = &off_1E637ED40;
          v123[4] = &type metadata for WorldTransform;
          v123[5] = &off_1E6382C00;
          v123[6] = &type metadata for Beamed;
          v123[7] = &off_1E63BB000;
          v502.n128_u64[0] = (unint64_t)&v452;
          if (!v112)
          {
            v126 = 4;
            goto LABEL_95;
          }
          if (v112 < 0x10)
            break;
          v125 = 0;
          if ((_QWORD *)((char *)v123 + v496.n128_u64[0] + 64) < v123 + 8
            || (_QWORD *)((char *)v123 + v496.n128_u64[0] + 72) < v123 + 9
            || v495.n128_u64[0] >> 60)
          {
            goto LABEL_90;
          }
          if ((unint64_t)(v123 + 8) < v494.n128_u64[0]
            && v492.n128_u64[0] < (unint64_t)v123 + v485.n128_u64[0] + 64)
          {
            break;
          }
          v143 = v123 + 12;
          v144 = v493.n128_u64[0];
          v145 = (__int128 *)v484.n128_u64[0];
          do
          {
            v147 = *(v145 - 2);
            v146 = *(v145 - 1);
            v149 = *v145;
            v148 = v145[1];
            v145 += 4;
            *(v143 - 2) = v147;
            *(v143 - 1) = v146;
            *v143 = v149;
            v143[1] = v148;
            v143 += 4;
            v144 -= 4;
          }
          while (v144);
          v125 = v493.n128_u64[0];
          v126 = v483.n128_u64[0];
          if (v112 != v493.n128_u64[0])
            goto LABEL_91;
LABEL_95:
          v130 = *(_QWORD *)(v7 + 16);
          v131 = v130 + OBJC_IVAR____TtC3VFX13EntityManager_lock;
          v132 = *(os_unfair_lock_s **)(v130 + OBJC_IVAR____TtC3VFX13EntityManager_lock + 24);
          swift_retain();
          os_unfair_lock_lock(v132);
          v133 = sub_1B1DAD870((uint64_t)v124, v126, MEMORY[0x1E0DEE9D8]);
          v135 = v133;
          v136 = v134;
          v137 = *(_QWORD **)(v130 + 72);
          v138 = v137[2];
          if (v138)
          {
            v139 = v137[4];
            if (*(_QWORD *)(v139 + 144) != v133)
            {
              v150 = v138 - 1;
              if (!v150)
                goto LABEL_85;
              v151 = v137 + 5;
              while (1)
              {
                v139 = *v151;
                if (*(_QWORD *)(*v151 + 144) == v133)
                  break;
                ++v151;
                if (!--v150)
                  goto LABEL_85;
              }
            }
            v140 = *(_QWORD *)(v139 + 16);
            if (*(_QWORD *)(v140 + 16))
            {
              v141 = sub_1B1DC3AC8(v134);
              if ((v142 & 1) != 0)
              {
                v114 = *(_DWORD *)(*(_QWORD *)(v140 + 56) + 4 * v141);
                goto LABEL_86;
              }
            }
          }
LABEL_85:
          v113 = sub_1B1DC9E90(v124, v126);
          v114 = sub_1B1DA8838(v135, v136, v113, MEMORY[0x1E0DEE9D8]);
          swift_release();
LABEL_86:
          ++v55;
          v115 = *(_QWORD *)(*(_QWORD *)(v130 + 80) + 8 * v114 + 32);
          v116 = *(os_unfair_lock_s **)(v131 + 24);
          swift_retain();
          os_unfair_lock_unlock(v116);
          swift_release();
          LOBYTE(v574) = 1;
          v7 = v489;
          v117 = v503;
          sub_1B1F10B7C(v115, 1, 1, 0x100000000uLL, v489, (uint64_t)sub_1B200F9F0, (uint64_t)(&v452 - 12));
          v503 = v117;
          swift_release();
          v65 = ecs_stack_allocator_pop_snapshot(*(_QWORD *)(v7 + 32));
          v112 = v499.n128_u64[0];
          if (v55 == v501.n128_u64[0])
            goto LABEL_83;
        }
        v125 = 0;
LABEL_90:
        v126 = 4;
LABEL_91:
        v127 = v112 - v125;
        v128 = (__int128 *)(v497.n128_u64[0] + 16 * v125);
        do
        {
          v129 = *v128++;
          *(_OWORD *)&v123[2 * v126++] = v129;
          --v127;
        }
        while (v127);
        goto LABEL_95;
      }
    }
LABEL_116:
    sub_1B1A086DC(v506, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
  }
  v152 = v470;
  if (qword_1EEF57370 != -1)
  {
    swift_once();
    v152 = v470;
  }
  v584[0] = xmmword_1EEFD5560;
  v584[1] = *(_OWORD *)algn_1EEFD5570;
  v585 = qword_1EEFD5580;
  sub_1B1E8FCE4(v152, (uint64_t)v584, 0x200000000, v507);
  sub_1B1A18378((uint64_t)v507, (uint64_t)v520, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (*(_QWORD *)&v520[0])
  {
    v527 = v520[0];
    v528 = v520[1];
    v529 = v521;
    v497.n128_u64[0] = v526;
    if (v526 > 0 && (v153 = v523) != 0)
    {
      v154 = v522;
      v155 = v525;
      v502.n128_u64[0] = v525;
      v156 = *(_QWORD *)(v525 + 32);
      v496.n128_u64[0] = v524;
      v157 = *(unsigned __int8 *)(v524 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
      v494.n128_u64[0] = v525 + 48;
      swift_bridgeObjectRetain();
      sub_1B1A086DC(v507, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1A086A4);
      v493.n128_u64[0] = v155 + 64;
      v492.n128_u64[0] = (unint64_t)v580;
      v158 = (unint64_t *)(v154 + 24);
      v495.n128_u32[0] = v157;
      do
      {
        v159 = *((unsigned int *)v158 - 6);
        v160 = *((unsigned int *)v158 - 5);
        v161 = *((unsigned int *)v158 - 4);
        v162 = *(v158 - 1);
        v163 = *v158;
        v164 = v158[1];
        v25 = v158[2];
        v501.n128_u64[0] = v153;
        v500.n128_u64[0] = v162;
        v499.n128_u64[0] = v163;
        v498.n128_u64[0] = v164;
        if (v157)
        {
          v165 = *(os_unfair_lock_s **)(v25 + 376);
          swift_retain();
          os_unfair_lock_lock(v165);
          os_unfair_lock_lock(*(os_unfair_lock_t *)(v25 + 344));
        }
        else
        {
          swift_retain();
        }
        ecs_stack_allocator_push_snapshot(v156);
        sub_1B1A18378(v494.n128_i64[0], (uint64_t)v573, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
        v166 = *(_QWORD *)(v502.n128_u64[0] + 32);
        v28 = v156;
        v167 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v25 + 40) + 16) + 32) + 16) + 1;
        swift_retain();
        v168 = v166;
        v31 = v502.n128_u64[0];
        *(_QWORD *)(v31 + 48) = ecs_stack_allocator_allocate(v168, 48 * v167, 8);
        *(_QWORD *)(v31 + 56) = v167;
        v169 = (_QWORD *)v493.n128_u64[0];
        *(_QWORD *)(v493.n128_u64[0] + 8) = 0;
        v169[2] = 0;
        *v169 = 0;
        swift_release();
        *(_QWORD *)&v574 = v496.n128_u64[0];
        *((_QWORD *)&v574 + 1) = v25;
        *(_QWORD *)&v575 = v31;
        *((_QWORD *)&v575 + 1) = v161;
        v576 = (v160 - v159 + v161);
        v577 = v497.n128_u64[0];
        v578 = v159;
        v579 = v160;
        v170 = v492.n128_u64[0];
        *(_QWORD *)v492.n128_u64[0] = 0;
        *(_QWORD *)(v170 + 8) = 0;
        v580[16] = 1;
        v581 = v500.n128_u64[0];
        v582 = v499.n128_u64[0];
        v583 = v498.n128_u64[0];
        v171 = v476;
        swift_bridgeObjectRetain();
        v172 = v503;
        sub_1B21A1F14(&v574, v489, v171, v490);
        if (v172)
        {
          swift_bridgeObjectRelease_n();

          v509 = v527;
          v510 = v528;
          v511 = v529;
          v449 = (unsigned __int16 **)&v509;
          v450 = v573;
          goto LABEL_327;
        }
        swift_bridgeObjectRelease();
        v566[0] = v527;
        v566[1] = v528;
        v567 = v529;
        sub_1B1F05D48((_QWORD *)v31, (unsigned __int16 **)v566, (uint64_t)v573);
        v503 = 0;
        sub_1B1F03804((char *)v25);
        ecs_stack_allocator_pop_snapshot(v28);
        v156 = v28;
        v157 = v495.n128_u32[0];
        if ((v495.n128_u8[0] & 1) != 0)
        {
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v25 + 344));
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v25 + 376));
        }
        swift_release();
        v158 += 6;
        v153 = v501.n128_u64[0] - 1;
      }
      while (v501.n128_u64[0] != 1);
      sub_1B1A086DC(v507, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
      sub_1B1A086DC(v507, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_1B1A086DC(v507, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
    }
  }
  v173 = v470;
  if (qword_1EEF573B0 != -1)
  {
    swift_once();
    v173 = v470;
  }
  v571[0] = xmmword_1EEFD5668;
  v571[1] = unk_1EEFD5678;
  v572 = qword_1EEFD5688;
  sub_1B1E8FCE4(v173, (uint64_t)v571, 0x200000000, v508);
  sub_1B1A18378((uint64_t)v508, (uint64_t)&v509, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if ((_QWORD)v509)
  {
    v517 = v509;
    v518 = v510;
    v519 = v511;
    if (v516 <= 0)
    {
      swift_setDeallocating();
      swift_deallocClassInstance();
    }
    else
    {
      v460 = v513;
      if (v513)
      {
        v459 = v512;
        LODWORD(v174) = *(unsigned __int8 *)(v514 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
        v467 = v515[4];
        v468 = v515;
        v463 = (_QWORD *)(v470 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
        v456 = v515 + 8;
        v457 = v515 + 6;
        swift_retain();
        swift_retain();
        swift_retain();
        v175 = 0;
        v458 = (int)v174;
        while (1)
        {
          v176 = (unsigned int *)(v459 + 48 * v175);
          v178 = *v176;
          v177 = (_OWORD *)v176[1];
          v179 = (uint64_t *)*((_QWORD *)v176 + 2);
          v25 = *((_QWORD *)v176 + 3);
          v180 = (char *)*((_QWORD *)v176 + 5);
          v472.i64[0] = *((_QWORD *)v176 + 4);
          v473 = v177;
          v474 = v180;
          v466 = v175;
          if ((v174 & 1) != 0)
          {
            v181 = (os_unfair_lock_s *)*((_QWORD *)v474 + 47);
            swift_retain();
            v180 = v474;
            os_unfair_lock_lock(v181);
            os_unfair_lock_lock(*((os_unfair_lock_t *)v180 + 43));
          }
          else
          {
            swift_retain();
          }
          ecs_stack_allocator_push_snapshot(v467);
          sub_1B1A18378((uint64_t)v457, (uint64_t)v570, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
          v28 = (uint64_t)v468;
          v182 = v468[4];
          v183 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v180 + 5) + 16) + 32) + 16) + 1;
          v31 = 48 * v183;
          swift_retain();
          *(_QWORD *)(v28 + 48) = ecs_stack_allocator_allocate(v182, 48 * v183, 8);
          *(_QWORD *)(v28 + 56) = v183;
          v184 = v456;
          v456[1] = 0;
          v184[2] = 0;
          *v184 = 0;
          swift_release();
          v34 = (char *)v472.i64[0];
          v469 = sub_1B1A12038((uint64_t)&type metadata for ParticleMeshCollider, (uint64_t)&off_1E639CA10, v179, v25, v472.i64[0], v28);
          v185 = sub_1B1A12038((uint64_t)&type metadata for WorldTransform, (uint64_t)&off_1E6382C00, v179, v25, (uint64_t)v34, v28);
          if (v179)
          {
            v186 = v470;
            v187 = v463;
            if (!v34)
              goto LABEL_312;
            v188 = 0;
            v189 = v469;
            while (2)
            {
              v196 = v189 + 32 * v188;
              v197 = *(_DWORD *)(v196 + 24);
              v198 = *(_DWORD *)(v196 + 28);
              v199 = v197 == -1 && v198 == 0;
              if (v199 || v197 < 0 || v187[1] <= v197)
                goto LABEL_150;
              v200 = *v187 + 12 * v197;
              if (v198 != -1 && *(_DWORD *)(v200 + 8) != v198)
                goto LABEL_150;
              v202 = *(_QWORD *)(*(_QWORD *)(v186 + 136) + 8 * *(int *)(*v187 + 12 * v197) + 32);
              v203 = *(_QWORD *)(v202 + 48);
              v204 = *(_QWORD *)(v203 + 16);
              if (!v204)
                goto LABEL_150;
              v205 = *(__int16 *)(v200 + 4);
              v206 = (_QWORD *)(v203 + 56);
              while ((ValueMetadata *)*(v206 - 3) != &type metadata for MeshModel)
              {
                v206 += 5;
                if (!--v204)
                  goto LABEL_150;
              }
              v207 = *(_QWORD *)(*(_QWORD *)(v202 + 128) + *v206 + 16 * v205);
              if (!v207)
                goto LABEL_150;
              v471 = (__n128 *)(v185 + (v188 << 6));
              v453 = v188;
              v454 = v185;
              v208 = v207;
              swift_retain();
              v455 = v208;
              v209 = sub_1B1E218F4(0);
              if (!v209)
                goto LABEL_328;
              v28 = v209;
              v212 = v210;
              v213 = v211;
              if (v210 == 30)
              {
                v214 = *(_QWORD *)(v455 + 40);
                v215 = sub_1B1C7A1C4(v214);
                if (v215)
                {
                  v25 = v215;
                  v216 = v214 + 32;
                  swift_bridgeObjectRetain();
                  v217 = 0;
                  v464 = (char *)v214;
                  v461 = (char *)(v214 + 32);
                  v462 = v25;
                  while (2)
                  {
                    v218 = (_QWORD *)(v216 + (v217 << 7));
                    v219 = (_OWORD *)v218[4];
                    if (*v218 != 3 || v219 == 0)
                      goto LABEL_173;
                    v34 = (char *)v218[5];
                    v221 = v218[9];
                    v223 = v218 + 10;
                    v222 = v218[10];
                    v31 = v223[1];
                    v473 = v219;
                    v475 = (_OWORD *)v31;
                    if (v222 == 4)
                    {
                      swift_unknownObjectRetain_n();
                      swift_bridgeObjectRetain();
                      if (objc_msgSend(v219, sel_storageMode) == (id)2)
                        goto LABEL_321;
                      v224 = objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
                      v225 = v219;
                      v226 = v224;
                      v227 = v225;
                      if (v221 >= 1)
                      {
                        v465 = v217;
                        v228 = 0;
                        v229 = &v34[(_QWORD)v226];
                        v230 = v476;
                        v231 = v489;
                        v232 = v490;
                        v233 = v502.n128_u32[3];
                        v234 = v498.n128_u32[3];
                        v235 = v493.n128_u32[3];
                        v31 = (uint64_t)v471;
                        do
                        {
                          if (__OFADD__(v228, 3))
                            v236 = 0x7FFFFFFFFFFFFFFFLL;
                          else
                            v236 = v228 + 3;
                          v237 = &v229[4 * v228];
                          v238 = *(unsigned int *)v237;
                          v239 = *((unsigned int *)v237 + 1);
                          v240 = *((unsigned int *)v237 + 2);
                          v241 = v28 + v213 * v238;
                          v242.n128_u64[0] = *(_QWORD *)v241;
                          v242.n128_u32[2] = *(_DWORD *)(v241 + 8);
                          v242.n128_u32[3] = v233;
                          v502 = v242;
                          v243 = v28 + v213 * v239;
                          v244.n128_u64[0] = *(_QWORD *)v243;
                          v244.n128_u32[2] = *(_DWORD *)(v243 + 8);
                          v244.n128_u32[3] = v234;
                          v245 = v244;
                          v498 = v244;
                          v246 = v28 + v213 * v240;
                          v244.n128_u64[0] = *(_QWORD *)v246;
                          v244.n128_u32[2] = *(_DWORD *)(v246 + 8);
                          v244.n128_u32[3] = v235;
                          v493 = v244;
                          sub_1B2009F0C(v231, v230, (__n128 *)v31, v232, v242, v245, v244);
                          v235 = v493.n128_u32[3];
                          v234 = v498.n128_u32[3];
                          v233 = v502.n128_u32[3];
                          v228 = v236;
                        }
                        while (v236 < v221);
                        goto LABEL_195;
                      }
                    }
                    else
                    {
                      if (v222 != 2)
                        goto LABEL_322;
                      swift_unknownObjectRetain_n();
                      swift_bridgeObjectRetain();
                      if (objc_msgSend(v219, sel_storageMode) == (id)2)
                        goto LABEL_321;
                      v247 = objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
                      v248 = v219;
                      v249 = v247;
                      v250 = v248;
                      if (v221 >= 1)
                      {
                        v465 = v217;
                        v251 = 0;
                        v252 = &v34[(_QWORD)v249];
                        v253 = v476;
                        v254 = v489;
                        v255 = v490;
                        v256 = v500.n128_u32[3];
                        v257 = v496.n128_u32[3];
                        v258 = v491.n128_u32[3];
                        v31 = (uint64_t)v471;
                        do
                        {
                          if (__OFADD__(v251, 3))
                            v259 = 0x7FFFFFFFFFFFFFFFLL;
                          else
                            v259 = v251 + 3;
                          v260 = &v252[2 * v251];
                          v261 = *(unsigned __int16 *)v260;
                          v262 = *((unsigned __int16 *)v260 + 1);
                          v263 = *((unsigned __int16 *)v260 + 2);
                          v264 = v28 + v213 * v261;
                          v265.n128_u64[0] = *(_QWORD *)v264;
                          v265.n128_u32[2] = *(_DWORD *)(v264 + 8);
                          v265.n128_u32[3] = v256;
                          v500 = v265;
                          v266 = v28 + v213 * v262;
                          v267.n128_u64[0] = *(_QWORD *)v266;
                          v267.n128_u32[2] = *(_DWORD *)(v266 + 8);
                          v267.n128_u32[3] = v257;
                          v268 = v267;
                          v496 = v267;
                          v269 = v28 + v213 * v263;
                          v267.n128_u64[0] = *(_QWORD *)v269;
                          v267.n128_u32[2] = *(_DWORD *)(v269 + 8);
                          v267.n128_u32[3] = v258;
                          v491 = v267;
                          sub_1B2009F0C(v254, v253, (__n128 *)v31, v255, v265, v268, v267);
                          v258 = v491.n128_u32[3];
                          v257 = v496.n128_u32[3];
                          v256 = v500.n128_u32[3];
                          v251 = v259;
                        }
                        while (v259 < v221);
LABEL_195:
                        v217 = v465;
                        v216 = (uint64_t)v461;
                        v25 = v462;
                      }
                    }
                    swift_bridgeObjectRelease();
                    swift_unknownObjectRelease_n();
LABEL_173:
                    if (++v217 == v25)
                    {
                      swift_release();
                      swift_bridgeObjectRelease();
                      v186 = v470;
                      goto LABEL_149;
                    }
                    continue;
                  }
                }
LABEL_228:
                swift_release();
                v186 = v470;
LABEL_149:
                v187 = v463;
                v189 = v469;
                v188 = v453;
                v185 = v454;
                v34 = (char *)v472.i64[0];
LABEL_150:
                if ((char *)++v188 == v34)
                  goto LABEL_312;
                continue;
              }
              break;
            }
            v270 = v455;
            v271 = swift_slowAlloc();
            v272 = v271;
            v273 = *(_QWORD *)(v270 + 48);
            if (v273)
            {
              v274 = (_DWORD *)(v271 + 8);
              do
              {
                sub_1B1E5F088((const float *)v28, v212);
                *((_QWORD *)v274 - 1) = v275;
                *v274 = v276;
                v274 += 3;
                v28 += v213;
                --v273;
              }
              while (v273);
            }
            v277 = *(_QWORD *)(v455 + 40);
            v278 = sub_1B1C7A1C4(v277);
            if (!v278)
            {
LABEL_227:
              MEMORY[0x1B5E23F88](v272, -1, -1);
              goto LABEL_228;
            }
            v31 = v278;
            v279 = v277 + 32;
            v461 = (char *)v277;
            swift_bridgeObjectRetain();
            v25 = 0;
            v280 = v489;
            v464 = (char *)v31;
            v462 = v277 + 32;
            while (2)
            {
              v281 = (_QWORD *)(v279 + (v25 << 7));
              v28 = v281[4];
              if (*v281 == 3 && v28 != 0)
              {
                v34 = (char *)v281[5];
                v283 = v281[9];
                v285 = v281 + 10;
                v284 = v281[10];
                v475 = (_OWORD *)v285[1];
                if (v284 == 4)
                {
                  swift_unknownObjectRetain_n();
                  swift_bridgeObjectRetain();
                  if (objc_msgSend((id)v28, sel_storageMode) == (id)2)
                    goto LABEL_321;
                  v286 = objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
                  v287 = (id)v28;
                  if (v283 >= 1)
                  {
                    v465 = v28;
                    v473 = (_OWORD *)v25;
                    v288 = 0;
                    v289 = &v34[(_QWORD)v286];
                    v290 = v476;
                    v291 = v490;
                    v292 = v499.n128_u32[3];
                    v293 = v495.n128_u32[3];
                    v294 = v492.n128_u32[3];
                    v295 = v471;
                    do
                    {
                      if (__OFADD__(v288, 3))
                        v296 = 0x7FFFFFFFFFFFFFFFLL;
                      else
                        v296 = v288 + 3;
                      v297 = &v289[4 * v288];
                      v298 = *(_DWORD *)v297;
                      v299 = *((_DWORD *)v297 + 1);
                      LODWORD(v297) = *((_DWORD *)v297 + 2);
                      v300 = v272 + 12 * v298;
                      v301.n128_u64[0] = *(_QWORD *)v300;
                      v301.n128_u32[2] = *(_DWORD *)(v300 + 8);
                      v301.n128_u32[3] = v292;
                      v302 = v301;
                      v499 = v301;
                      v303 = v272 + 12 * v299;
                      v301.n128_u64[0] = *(_QWORD *)v303;
                      v301.n128_u32[2] = *(_DWORD *)(v303 + 8);
                      v301.n128_u32[3] = v293;
                      v495 = v301;
                      v304 = v272 + 12 * v297;
                      v305.n128_u64[0] = *(_QWORD *)v304;
                      v305.n128_u32[2] = *(_DWORD *)(v304 + 8);
                      v305.n128_u32[3] = v294;
                      v492 = v305;
                      sub_1B2009F0C(v280, v290, v295, v291, v302, v301, v305);
                      v294 = v492.n128_u32[3];
                      v293 = v495.n128_u32[3];
                      v292 = v499.n128_u32[3];
                      v288 = v296;
                    }
                    while (v296 < v283);
                    goto LABEL_201;
                  }
                }
                else
                {
                  if (v284 != 2)
                    goto LABEL_322;
                  swift_unknownObjectRetain_n();
                  swift_bridgeObjectRetain();
                  if (objc_msgSend((id)v28, sel_storageMode) == (id)2)
                    goto LABEL_321;
                  v306 = objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
                  v307 = (id)v28;
                  if (v283 >= 1)
                  {
                    v465 = v28;
                    v473 = (_OWORD *)v25;
                    v308 = 0;
                    v309 = &v34[(_QWORD)v306];
                    v310 = v476;
                    v311 = v490;
                    v312 = v501.n128_u32[3];
                    v313 = v497.n128_u32[3];
                    v314 = v494.n128_u32[3];
                    v315 = v471;
                    do
                    {
                      if (__OFADD__(v308, 3))
                        v316 = 0x7FFFFFFFFFFFFFFFLL;
                      else
                        v316 = v308 + 3;
                      v317 = &v309[2 * v308];
                      v318 = *(unsigned __int16 *)v317;
                      v319 = *((unsigned __int16 *)v317 + 1);
                      LODWORD(v317) = *((unsigned __int16 *)v317 + 2);
                      v320 = v272 + 12 * v318;
                      v321.n128_u64[0] = *(_QWORD *)v320;
                      v321.n128_u32[2] = *(_DWORD *)(v320 + 8);
                      v321.n128_u32[3] = v312;
                      v322 = v321;
                      v501 = v321;
                      v323 = v272 + 12 * v319;
                      v321.n128_u64[0] = *(_QWORD *)v323;
                      v321.n128_u32[2] = *(_DWORD *)(v323 + 8);
                      v321.n128_u32[3] = v313;
                      v497 = v321;
                      v324 = v272 + 12 * v317;
                      v325.n128_u64[0] = *(_QWORD *)v324;
                      v325.n128_u32[2] = *(_DWORD *)(v324 + 8);
                      v325.n128_u32[3] = v314;
                      v494 = v325;
                      sub_1B2009F0C(v280, v310, v315, v311, v322, v321, v325);
                      v314 = v494.n128_u32[3];
                      v313 = v497.n128_u32[3];
                      v312 = v501.n128_u32[3];
                      v308 = v316;
                    }
                    while (v316 < v283);
LABEL_201:
                    v31 = (uint64_t)v464;
                    v28 = v465;
                    v279 = v462;
                    v25 = (uint64_t)v473;
                  }
                }
                swift_bridgeObjectRelease();
                swift_unknownObjectRelease_n();
              }
              if (++v25 == v31)
              {
                swift_bridgeObjectRelease();
                goto LABEL_227;
              }
              continue;
            }
          }
          v190 = v178;
          v191 = v473;
          v192 = v470;
          v193 = v463;
          if ((_DWORD)v178 == (_DWORD)v473)
          {
            v194 = v503;
            goto LABEL_313;
          }
          v195 = v469;
          while (2)
          {
            v326 = v195 + 32 * v190;
            v327 = *(_DWORD *)(v326 + 24);
            v328 = *(_DWORD *)(v326 + 28);
            v329 = v327 == -1 && v328 == 0;
            if (v329 || v327 < 0 || v193[1] <= v327)
              goto LABEL_232;
            v330 = *v193 + 12 * v327;
            if (v328 != -1 && *(_DWORD *)(v330 + 8) != v328)
              goto LABEL_232;
            v332 = *(_QWORD *)(*(_QWORD *)(v192 + 136) + 8 * *(int *)(*v193 + 12 * v327) + 32);
            v333 = *(_QWORD *)(v332 + 48);
            v334 = *(_QWORD *)(v333 + 16);
            if (!v334)
              goto LABEL_232;
            v335 = *(__int16 *)(v330 + 4);
            v336 = (_QWORD *)(v333 + 56);
            while ((ValueMetadata *)*(v336 - 3) != &type metadata for MeshModel)
            {
              v336 += 5;
              if (!--v334)
                goto LABEL_232;
            }
            v337 = *(_QWORD *)(*(_QWORD *)(v332 + 128) + *v336 + 16 * v335);
            if (!v337)
              goto LABEL_232;
            v471 = (__n128 *)(v185 + (v190 << 6));
            v453 = v190;
            v454 = v185;
            v338 = v337;
            swift_retain();
            v455 = v338;
            v339 = sub_1B1E218F4(0);
            if (!v339)
              goto LABEL_328;
            v28 = v339;
            v342 = v340;
            v343 = v341;
            if (v340 == 30)
            {
              v34 = *(char **)(v455 + 40);
              v344 = sub_1B1C7A1C4((uint64_t)v34);
              if (!v344)
              {
                swift_release();
                v192 = v470;
                goto LABEL_231;
              }
              v345 = v344;
              v346 = v34 + 32;
              swift_bridgeObjectRetain();
              v347 = 0;
              v464 = v34;
              v461 = v34 + 32;
              v462 = v345;
              while (2)
              {
                v348 = &v346[128 * v347];
                v31 = *((_QWORD *)v348 + 4);
                if (*(_QWORD *)v348 == 3 && v31 != 0)
                {
                  v34 = (char *)*((_QWORD *)v348 + 5);
                  v25 = *((_QWORD *)v348 + 9);
                  v352 = v348 + 80;
                  v350 = *((_QWORD *)v348 + 10);
                  v351 = (_OWORD *)v352[1];
                  v472.i64[0] = v31;
                  v475 = v351;
                  if (v350 == 4)
                  {
                    swift_unknownObjectRetain_n();
                    swift_bridgeObjectRetain();
                    if (objc_msgSend((id)v31, sel_storageMode) == (id)2)
                      goto LABEL_321;
                    v353 = objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
                    v354 = (void *)v31;
                    v31 = (uint64_t)v353;
                    v355 = v354;
                    if (v25 >= 1)
                    {
                      v465 = v347;
                      v356 = 0;
                      v357 = &v34[v31];
                      v358 = v476;
                      v359 = v489;
                      v360 = v490;
                      v361 = v487.n128_u32[3];
                      v362 = v485.n128_u32[3];
                      v363 = v481.n128_u32[3];
                      v364 = v471;
                      do
                      {
                        if (__OFADD__(v356, 3))
                          v31 = 0x7FFFFFFFFFFFFFFFLL;
                        else
                          v31 = v356 + 3;
                        v365 = &v357[4 * v356];
                        v366 = *(unsigned int *)v365;
                        v367 = *((unsigned int *)v365 + 1);
                        v368 = *((unsigned int *)v365 + 2);
                        v369 = v28 + v343 * v366;
                        v370.n128_u64[0] = *(_QWORD *)v369;
                        v370.n128_u32[2] = *(_DWORD *)(v369 + 8);
                        v370.n128_u32[3] = v361;
                        v371 = v370;
                        v487 = v370;
                        v372 = v28 + v343 * v367;
                        v370.n128_u64[0] = *(_QWORD *)v372;
                        v370.n128_u32[2] = *(_DWORD *)(v372 + 8);
                        v370.n128_u32[3] = v362;
                        v485 = v370;
                        v373 = v28 + v343 * v368;
                        v374.n128_u64[0] = *(_QWORD *)v373;
                        v374.n128_u32[2] = *(_DWORD *)(v373 + 8);
                        v374.n128_u32[3] = v363;
                        v481 = v374;
                        sub_1B2009F0C(v359, v358, v364, v360, v371, v370, v374);
                        v363 = v481.n128_u32[3];
                        v362 = v485.n128_u32[3];
                        v361 = v487.n128_u32[3];
                        v356 = v31;
                      }
                      while (v31 < v25);
                      goto LABEL_278;
                    }
LABEL_254:
                    v34 = v464;
                  }
                  else
                  {
                    if (v350 != 2)
                      goto LABEL_322;
                    swift_unknownObjectRetain_n();
                    swift_bridgeObjectRetain();
                    if (objc_msgSend((id)v31, sel_storageMode) == (id)2)
                      goto LABEL_321;
                    v375 = objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
                    v376 = (void *)v31;
                    v31 = (uint64_t)v375;
                    v377 = v376;
                    if (v25 < 1)
                      goto LABEL_254;
                    v465 = v347;
                    v378 = 0;
                    v379 = &v34[v31];
                    v380 = v476;
                    v381 = v489;
                    v382 = v490;
                    v383 = v488.n128_u32[3];
                    v384 = v486.n128_u32[3];
                    v385 = v483.n128_u32[3];
                    v386 = v471;
                    do
                    {
                      if (__OFADD__(v378, 3))
                        v31 = 0x7FFFFFFFFFFFFFFFLL;
                      else
                        v31 = v378 + 3;
                      v387 = &v379[2 * v378];
                      v388 = *(unsigned __int16 *)v387;
                      v389 = *((unsigned __int16 *)v387 + 1);
                      v390 = *((unsigned __int16 *)v387 + 2);
                      v391 = v28 + v343 * v388;
                      v392.n128_u64[0] = *(_QWORD *)v391;
                      v392.n128_u32[2] = *(_DWORD *)(v391 + 8);
                      v392.n128_u32[3] = v383;
                      v393 = v392;
                      v488 = v392;
                      v394 = v28 + v343 * v389;
                      v392.n128_u64[0] = *(_QWORD *)v394;
                      v392.n128_u32[2] = *(_DWORD *)(v394 + 8);
                      v392.n128_u32[3] = v384;
                      v486 = v392;
                      v395 = v28 + v343 * v390;
                      v396.n128_u64[0] = *(_QWORD *)v395;
                      v396.n128_u32[2] = *(_DWORD *)(v395 + 8);
                      v396.n128_u32[3] = v385;
                      v483 = v396;
                      sub_1B2009F0C(v381, v380, v386, v382, v393, v392, v396);
                      v385 = v483.n128_u32[3];
                      v384 = v486.n128_u32[3];
                      v383 = v488.n128_u32[3];
                      v378 = v31;
                    }
                    while (v31 < v25);
LABEL_278:
                    v34 = v464;
                    v347 = v465;
                    v346 = v461;
                    v345 = v462;
                  }
                  swift_bridgeObjectRelease();
                  swift_unknownObjectRelease_n();
                }
                if (++v347 == v345)
                {
                  swift_release();
                  swift_bridgeObjectRelease();
                  goto LABEL_230;
                }
                continue;
              }
            }
            v397 = v455;
            v398 = swift_slowAlloc();
            v25 = v398;
            v34 = *(char **)(v397 + 48);
            if (v34)
            {
              v399 = (_DWORD *)(v398 + 8);
              do
              {
                sub_1B1E5F088((const float *)v28, v342);
                *((_QWORD *)v399 - 1) = v400;
                *v399 = v401;
                v399 += 3;
                v28 += v343;
                --v34;
              }
              while (v34);
            }
            v402 = *(_QWORD *)(v455 + 40);
            v403 = sub_1B1C7A1C4(v402);
            if (!v403)
              goto LABEL_310;
            v404 = v403;
            v405 = v402 + 32;
            swift_bridgeObjectRetain();
            v406 = 0;
            v464 = (char *)v402;
            v461 = (char *)(v402 + 32);
            v462 = v404;
            do
            {
              v407 = (_QWORD *)(v405 + (v406 << 7));
              v408 = (void *)v407[4];
              if (*v407 == 3 && v408 != 0)
              {
                v34 = (char *)v407[5];
                v28 = v407[9];
                v411 = v407 + 10;
                v410 = v407[10];
                v31 = v411[1];
                v475 = (_OWORD *)v31;
                if (v410 == 4)
                {
                  swift_unknownObjectRetain_n();
                  swift_bridgeObjectRetain();
                  if (objc_msgSend(v408, sel_storageMode) == (id)2)
                    goto LABEL_321;
                  v31 = (uint64_t)objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
                  v412 = v408;
                  if (v28 >= 1)
                  {
                    v465 = (uint64_t)v408;
                    v472.i64[0] = v406;
                    v413 = 0;
                    v34 += v31;
                    v414 = v476;
                    v415 = v489;
                    v416 = v490;
                    v417 = v482.n128_u32[3];
                    v418 = v479.n128_u32[3];
                    v419 = HIDWORD(v477);
                    v420 = v471;
                    do
                    {
                      if (__OFADD__(v413, 3))
                        v31 = 0x7FFFFFFFFFFFFFFFLL;
                      else
                        v31 = v413 + 3;
                      v421 = &v34[4 * v413];
                      v422 = *(_DWORD *)v421;
                      v423 = *((_DWORD *)v421 + 1);
                      LODWORD(v421) = *((_DWORD *)v421 + 2);
                      v424 = v25 + 12 * v422;
                      v425.n128_u64[0] = *(_QWORD *)v424;
                      v425.n128_u32[2] = *(_DWORD *)(v424 + 8);
                      v425.n128_u32[3] = v417;
                      v426 = v425;
                      v482 = v425;
                      v427 = v25 + 12 * v423;
                      v425.n128_u64[0] = *(_QWORD *)v427;
                      v425.n128_u32[2] = *(_DWORD *)(v427 + 8);
                      v425.n128_u32[3] = v418;
                      v479 = v425;
                      v428 = v25 + 12 * v421;
                      v429.n128_u64[0] = *(_QWORD *)v428;
                      v429.n128_u32[2] = *(_DWORD *)(v428 + 8);
                      v429.n128_u32[3] = v419;
                      v477 = (__int128)v429;
                      sub_1B2009F0C(v415, v414, v420, v416, v426, v425, v429);
                      v419 = HIDWORD(v477);
                      v418 = v479.n128_u32[3];
                      v417 = v482.n128_u32[3];
                      v413 = v31;
                    }
                    while (v31 < v28);
                    goto LABEL_284;
                  }
                }
                else
                {
                  if (v410 != 2)
                  {
LABEL_322:
                    DWORD2(v451) = 0;
                    for (*(_QWORD *)&v451 = 957; ; *(_QWORD *)&v451 = 184)
                    {
LABEL_323:
                      sub_1B2229688();
                      __break(1u);
LABEL_324:
                      swift_bridgeObjectRelease_n();

                      v594 = v557;
                      v595 = v558;
                      v596 = v559;
                      v449 = (unsigned __int16 **)&v594;
                      v450 = v606;
LABEL_327:
                      v34 = 0;
                      sub_1B1F05D48((_QWORD *)v31, v449, (uint64_t)v450);
                      sub_1B1F03804((char *)v25);
                      ecs_stack_allocator_pop_snapshot(v28);
                      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v25 + 344));
                      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v25 + 376));
                      __break(1u);
LABEL_328:
                      DWORD2(v451) = 0;
                    }
                  }
                  swift_unknownObjectRetain_n();
                  swift_bridgeObjectRetain();
                  if (objc_msgSend(v408, sel_storageMode) == (id)2)
                  {
LABEL_321:
                    DWORD2(v451) = 0;
                    *(_QWORD *)&v451 = 83;
                    goto LABEL_323;
                  }
                  v31 = (uint64_t)objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
                  v430 = v408;
                  if (v28 >= 1)
                  {
                    v465 = (uint64_t)v408;
                    v472.i64[0] = v406;
                    v431 = 0;
                    v34 += v31;
                    v432 = v476;
                    v433 = v489;
                    v434 = v490;
                    v435 = v484.n128_u32[3];
                    v436 = v480.n128_u32[3];
                    v437 = v478.n128_u32[3];
                    v438 = v471;
                    do
                    {
                      if (__OFADD__(v431, 3))
                        v31 = 0x7FFFFFFFFFFFFFFFLL;
                      else
                        v31 = v431 + 3;
                      v439 = &v34[2 * v431];
                      v440 = *(unsigned __int16 *)v439;
                      v441 = *((unsigned __int16 *)v439 + 1);
                      LODWORD(v439) = *((unsigned __int16 *)v439 + 2);
                      v442 = v25 + 12 * v440;
                      v443.n128_u64[0] = *(_QWORD *)v442;
                      v443.n128_u32[2] = *(_DWORD *)(v442 + 8);
                      v443.n128_u32[3] = v435;
                      v444 = v443;
                      v484 = v443;
                      v445 = v25 + 12 * v441;
                      v443.n128_u64[0] = *(_QWORD *)v445;
                      v443.n128_u32[2] = *(_DWORD *)(v445 + 8);
                      v443.n128_u32[3] = v436;
                      v480 = v443;
                      v446 = v25 + 12 * v439;
                      v447.n128_u64[0] = *(_QWORD *)v446;
                      v447.n128_u32[2] = *(_DWORD *)(v446 + 8);
                      v447.n128_u32[3] = v437;
                      v478 = v447;
                      sub_1B2009F0C(v433, v432, v438, v434, v444, v443, v447);
                      v437 = v478.n128_u32[3];
                      v436 = v480.n128_u32[3];
                      v435 = v484.n128_u32[3];
                      v431 = v31;
                    }
                    while (v31 < v28);
LABEL_284:
                    v405 = (uint64_t)v461;
                    v404 = v462;
                    v406 = v472.i64[0];
                  }
                }
                swift_bridgeObjectRelease();
                swift_unknownObjectRelease_n();
              }
              ++v406;
            }
            while (v406 != v404);
            swift_bridgeObjectRelease();
LABEL_310:
            MEMORY[0x1B5E23F88](v25, -1, -1);
            swift_release();
LABEL_230:
            v192 = v470;
LABEL_231:
            v193 = v463;
            v195 = v469;
            v190 = v453;
            v185 = v454;
            v191 = v473;
LABEL_232:
            if ((_OWORD *)++v190 != v191)
              continue;
            break;
          }
LABEL_312:
          v194 = v503;
LABEL_313:
          v568[0] = v517;
          v568[1] = v518;
          v569 = v519;
          sub_1B1F05D48(v468, (unsigned __int16 **)v568, (uint64_t)v570);
          v503 = v194;
          v174 = v474;
          sub_1B1F03804(v474);
          v448 = v174;
          ecs_stack_allocator_pop_snapshot(v467);
          LOBYTE(v174) = v458;
          if ((v458 & 1) != 0)
          {
            os_unfair_lock_unlock(*((os_unfair_lock_t *)v448 + 43));
            os_unfair_lock_unlock(*((os_unfair_lock_t *)v448 + 47));
          }
          swift_release();
          v175 = v466 + 1;
          if (v466 + 1 == v460)
            goto LABEL_318;
        }
      }
      swift_retain();
      swift_retain();
      swift_retain();
LABEL_318:
      swift_bridgeObjectRelease();
      sub_1B1A086DC(v508, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
    }
    return sub_1B1A086DC(v508, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
  }
  else
  {
    swift_setDeallocating();
    return (_QWORD *)swift_deallocClassInstance();
  }
}

uint64_t type metadata accessor for DebugInfoSystem()
{
  return objc_opt_self();
}

uint64_t sub_1B2009ED0()
{
  uint64_t result;

  result = swift_allocObject();
  *(_BYTE *)(result + 16) = 1;
  return result;
}

const char *sub_1B2009EF8()
{
  return "Debug Info";
}

uint64_t sub_1B2009F0C(uint64_t a1, uint64_t a2, __n128 *a3, int a4, __n128 a5, __n128 a6, __n128 a7)
{
  __n128 v7;
  __n128 v8;
  __n128 v9;
  __n128 v10;
  __int128 v12[6];
  char v13;

  v8 = *a3;
  v7 = a3[1];
  v10 = a3[2];
  v9 = a3[3];
  v12[0] = (__int128)a5;
  v12[1] = (__int128)a6;
  v12[2] = (__int128)a7;
  memset(&v12[3], 0, 48);
  v13 = 1;
  return sub_1B217F2CC(a2, 0x100000000uLL, a1, v12, a4, v8, v7, v10, v9);
}

uint64_t type metadata accessor for DebugDrawingSystem()
{
  return objc_opt_self();
}

const char *sub_1B2009FA8()
{
  return "DebugDrawing";
}

void sub_1B2009FBC()
{
  qword_1EEF620B8 = (uint64_t)&unk_1E636F600;
}

uint64_t type metadata accessor for WireframeLayerSystem()
{
  return objc_opt_self();
}

const char *sub_1B2009FF4()
{
  return "WireframeLayer";
}

uint64_t sub_1B200A008(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;

  v2 = *a1;
  v3 = a1[2];
  *(_OWORD *)(a2 + 16) = a1[1];
  *(_OWORD *)(a2 + 32) = v3;
  *(_OWORD *)a2 = v2;
  v4 = a1[3];
  v5 = a1[4];
  v6 = a1[5];
  *(_BYTE *)(a2 + 96) = *((_BYTE *)a1 + 96);
  *(_OWORD *)(a2 + 64) = v5;
  *(_OWORD *)(a2 + 80) = v6;
  *(_OWORD *)(a2 + 48) = v4;
  return a2;
}

void sub_1B200A038(uint64_t a1)
{
  _QWORD *v1;
  int v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  void *v22;
  void *v23;
  void *v24;
  uint64_t ObjectType;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unsigned int *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  os_unfair_lock_s *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t i;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  void (*v45)(uint64_t);
  uint64_t v46;
  BOOL v47;
  unint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  _QWORD *v51;
  unint64_t v52;
  char *v53;
  unsigned int v54;
  BOOL v55;
  int v56;
  uint64_t v58;
  _QWORD *v59;
  unint64_t v60;
  char *v61;
  unsigned int v62;
  int v63;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  _QWORD *v68;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v70;
  _QWORD *v71;
  size_t v72;
  char *v73;
  char *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  os_unfair_lock_s *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  uint64_t j;
  uint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  void (*v99)(uint64_t);
  uint64_t v100;
  BOOL v101;
  unint64_t v102;
  _QWORD *v103;
  uint64_t v104;
  _QWORD *v105;
  unint64_t v106;
  uint64_t v107;
  unsigned int v108;
  int v109;
  uint64_t v111;
  _QWORD *v112;
  unint64_t v113;
  uint64_t v114;
  unsigned int v115;
  int v116;
  uint64_t v118;
  uint64_t v119;
  _QWORD *v120;
  uint64_t v121;
  void *v122;
  id v123;
  void *v124;
  _QWORD *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  int v132;
  __int16 v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  __n128 v137;
  int v138;
  int v139;
  _QWORD *v140;
  uint64_t v141;
  int v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  __int128 v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  __int128 v164;
  uint64_t v165;
  uint64_t v166;
  __int128 v167;
  __int128 v168;
  uint64_t v169;
  uint64_t v170;
  __int128 v171;
  id v172;
  __int128 v173;
  uint64_t v174;
  uint64_t v175;
  __int128 v176;
  __int128 v177;
  uint64_t v178;
  __int128 v179;
  __int128 v180;
  unsigned __int16 *v181;
  unsigned __int16 *v182;
  __int128 v183;
  _OWORD v184[5];
  uint64_t v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  uint64_t v190;
  _OWORD v191[5];
  uint64_t v192;
  _BYTE v193[40];
  _OWORD v194[2];
  uint64_t v195;
  _BYTE v196[40];
  _OWORD v197[2];
  uint64_t v198;
  _OWORD v199[2];
  uint64_t v200;
  _OWORD v201[2];
  uint64_t v202;
  uint64_t v203;
  int v204;
  char v205;
  uint64_t v206;
  char v207;
  uint64_t v208;
  uint64_t v209;
  int v210;
  char v211;
  uint64_t v212;
  char v213;
  uint64_t v214;
  void *v215;
  _QWORD v216[20];
  _OWORD v217[3];
  __int128 v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;
  uint64_t v223;
  uint64_t v224;
  __int128 v225;
  uint64_t v226;
  uint64_t v227;
  _BYTE v228[24];
  uint64_t v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  _QWORD v237[12];
  uint64_t v238[101];
  _QWORD v239[12];
  _QWORD v240[7];
  uint64_t v241;
  uint64_t v242;
  _QWORD *v243;
  uint64_t v244;
  _QWORD v245[12];
  __int128 v246[5];
  uint64_t v247;
  uint64_t v248;
  char v249;
  __int128 v250;
  uint64_t v251;
  uint64_t v252;
  __int128 v253;
  __int128 v254;
  __int128 v255;
  __int128 v256;
  char v257;
  _QWORD v258[10];
  char v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  _OWORD v263[11];
  _QWORD v264[2];
  __int128 v265;
  __int128 v266;
  __int16 v267;
  _QWORD v268[9];

  v268[6] = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD **)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_renderer);
  if (!v1)
    return;
  swift_retain();
  swift_retain();
  v172 = (id)sub_1B2062324(a1);
  swift_release();
  if (!v172)
  {
    swift_release();
    return;
  }
  swift_retain();
  v3 = sub_1B200024C();
  swift_release();
  if (v3 == 2)
  {
    swift_release();

    return;
  }
  v4 = swift_retain();
  v5 = sub_1B1F2173C(v4);
  v7 = v6;
  swift_release();
  if ((v7 & 1) != 0)
    v8 = 0;
  else
    v8 = v5;
  v151 = v8;
  v9 = sub_1B2229454();
  sub_1B1BA77BC(v9, v10, v172);
  swift_bridgeObjectRelease();
  v11 = (void *)v1[49];
  if (v11)
  {
    v12 = v11;
    sub_1B1F9AEC4((uint64_t)v184);
    v177 = v184[1];
    v180 = v184[0];
    v173 = v184[2];
    v164 = v184[4];
    v168 = v184[3];
    v13 = v185;

    v15 = v164;
    v14 = v168;
    v17 = v173;
    v16 = v177;
    v18 = v180;
  }
  else
  {
    v13 = 0;
    v18 = 0uLL;
    v16 = 0uLL;
    v17 = 0uLL;
    v14 = 0uLL;
    v15 = 0uLL;
  }
  v191[0] = v18;
  v191[1] = v16;
  v191[2] = v17;
  v191[3] = v14;
  v191[4] = v15;
  v192 = v13;
  if (qword_1ED4B7DB8 != -1)
    swift_once();
  v209 = qword_1ED4D09F8;
  v210 = 0;
  v211 = 2;
  v212 = 0;
  v213 = 2;
  v214 = 0;
  swift_retain();
  sub_1B1E416C4(1, (uint64_t)v193);
  swift_release();
  sub_1B1BBF3BC(0, (unint64_t *)&qword_1ED4BAE50, (unint64_t *)&qword_1ED4BA1A0, (unint64_t *)&qword_1ED4BA190);
  v19 = swift_allocObject();
  *(_OWORD *)(v19 + 16) = xmmword_1B226D240;
  *(_QWORD *)(v19 + 32) = &type metadata for DrawCallComponent;
  *(_QWORD *)(v19 + 40) = &off_1E638BED8;
  sub_1B1B44110(v194, v19);
  swift_setDeallocating();
  swift_deallocClassInstance();
  sub_1B19ED720((uint64_t)v193);
  v201[0] = v194[0];
  v201[1] = v194[1];
  v202 = v195;
  sub_1B1E8FCE4(a1, (uint64_t)v201, 0x200000000, v237);
  sub_1B1A18378((uint64_t)v237, (uint64_t)v245, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  v181 = (unsigned __int16 *)v245[0];
  if (!v245[0])
  {
    sub_1B19ED720((uint64_t)v194);
    goto LABEL_18;
  }
  v135 = a1;
  v143 = v245[5];
  v145 = v245[8];
  v20 = (_QWORD *)v245[9];
  v147 = v245[7];
  v149 = v245[10];
  sub_1B19ED720((uint64_t)v194);
  *(_QWORD *)&v225 = 0xD00000000000001ALL;
  *((_QWORD *)&v225 + 1) = 0x80000001B2347AA0;
  v226 = 0;
  v227 = 0;
  *(_QWORD *)v228 = MEMORY[0x1E0DEE9D8];
  *(_OWORD *)&v228[8] = xmmword_1B22AD2B0;
  v229 = 0;
  *(_QWORD *)&v230 = 0;
  *((_QWORD *)&v230 + 1) = MEMORY[0x1E0DEE9D8];
  v231 = 0u;
  v232 = 0u;
  v233 = 0u;
  v234 = 0u;
  v235 = 0u;
  v236 = 0u;
  v263[4] = v230;
  memset(&v263[5], 0, 96);
  v263[0] = v225;
  v263[1] = 0u;
  v263[2] = *(_OWORD *)v228;
  v263[3] = 0xEA00000000006761;
  v264[1] = 0;
  v264[0] = 0;
  v265 = xmmword_1B2246910;
  v266 = xmmword_1B2246910;
  v267 = 15;
  v268[1] = 0;
  v268[0] = 0;
  v268[2] = 2;
  memset(&v268[3], 0, 24);
  swift_retain();
  sub_1B1FD1C40((uint64_t *)v263, v191, 0, 0, 0, (uint64_t)v264, 2, (uint64_t)v268, (uint64_t)v238, 1, 1);
  sub_1B1BDB228((uint64_t *)&v225);
  v21 = sub_1B1B32B58((uint64_t)v238, 0);
  v23 = v22;
  if (v21 < 3)
  {
    sub_1B1B427DC(v21, v22);
    sub_1B1B41134(v238);
    swift_release();
    sub_1B1A086DC(v237, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
LABEL_18:
    swift_release();

    return;
  }
  v134 = swift_unknownObjectRetain();
  sub_1B1B427DC(v134, v23);
  sub_1B1B41134(v238);
  swift_release();
  if (!*(_QWORD *)v1[62])
  {
    if (v1[47])
    {
      v215 = &unk_1EF028DD0;
      v121 = swift_dynamicCastObjCProtocolConditional();
      if (v121)
      {
        v122 = (void *)v121;
        swift_unknownObjectRetain();
        v123 = objc_msgSend(v122, sel_renderCommandEncoder);
        *(_QWORD *)&v217[0] = 0x646F636E45627573;
        *((_QWORD *)&v217[0] + 1) = 0xEB000000005B7265;
        v216[0] = 0;
        sub_1B2229A0C();
        sub_1B2228890();
        swift_bridgeObjectRelease();
        sub_1B2228890();
        v124 = (void *)sub_1B2228728();
        swift_bridgeObjectRelease();
        objc_msgSend(v123, sel_setLabel_, v124);

        v125 = (_QWORD *)v1[62];
        *v125 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for RenderCommandEncoder()), sel_initWithEncoder_, v123);
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
      }
    }
  }
  v133 = v3;
  v24 = *(void **)v1[62];
  if (v24)
  {
    ObjectType = swift_getObjectType();
    objc_msgSend((id)swift_unknownObjectRetain(), sel_setRenderPipelineState_, v134);
    objc_msgSend(v24, sel_setDepthStencilState_, *(_QWORD *)(v1[31] + 376));
    sub_1B1E125C8(v135, ObjectType);
    swift_unknownObjectRelease();
  }
  v153 = (uint64_t)v1;
  if (v149 > 0 && v147)
  {
    v26 = v20[4];
    v27 = *(unsigned __int8 *)(v145 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
    sub_1B1A086DC(v237, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1A086A4);
    v28 = 0;
    v138 = v3 & 0x10101;
    v137 = (__n128)vdupq_n_s64(0x3F80000000000000uLL);
    v139 = v27;
    v141 = v26;
    while (1)
    {
      v169 = v28;
      v29 = (unsigned int *)(v143 + 48 * v28);
      v30 = *v29;
      v31 = v29[1];
      v32 = v29[2];
      v33 = *((_QWORD *)v29 + 2);
      v34 = *((_QWORD *)v29 + 3);
      v35 = *((_QWORD *)v29 + 5);
      v154 = *((_QWORD *)v29 + 4);
      if (v27)
      {
        v36 = *(os_unfair_lock_s **)(v35 + 376);
        swift_retain_n();
        os_unfair_lock_lock(v36);
        os_unfair_lock_lock(*(os_unfair_lock_t *)(v35 + 344));
        swift_release();
      }
      else
      {
        swift_retain();
      }
      ecs_stack_allocator_push_snapshot(v26);
      v162 = v20[7];
      v165 = v20[6];
      v158 = v20[9];
      v160 = v20[8];
      v156 = v20[10];
      v37 = v20[4];
      v38 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v35 + 40) + 16) + 32) + 16) + 1;
      swift_retain();
      v20[6] = ecs_stack_allocator_allocate(v37, 48 * v38, 8);
      v20[7] = v38;
      v20[9] = 0;
      v20[10] = 0;
      v20[8] = 0;
      swift_release();
      v258[0] = v145;
      v258[1] = v35;
      v174 = v35;
      v258[2] = v20;
      v258[3] = v32;
      v258[4] = (v31 - v30 + v32);
      v258[5] = v149;
      v258[6] = v30;
      v258[7] = v31;
      v258[8] = 0;
      v258[9] = 0;
      v259 = 1;
      v260 = v33;
      v261 = v34;
      v262 = v154;
      sub_1B20017D8(v258, (__n128)xmmword_1B22AD340, v137, (__n128)xmmword_1B22AD350, v153, v138, v151, 5);
      v39 = v20[6];
      v40 = v20[8];
      if (!v40)
      {
        v66 = v20[7];
        v67 = (_QWORD *)v20[4];
        goto LABEL_67;
      }
      for (i = 0; i != v40; ++i)
      {
        v43 = (uint64_t *)(v39 + 48 * i);
        v44 = *v43;
        v45 = (void (*)(uint64_t))v43[4];
        v46 = v20[9];
        if (v46)
          v47 = v44 == v46;
        else
          v47 = 0;
        if (v47 || !v181[11])
          goto LABEL_32;
        v48 = v181[9];
        v49 = (_QWORD *)((char *)v181 + v181[8] + 41);
        v50 = v43[2];
        v51 = v49;
        v52 = v48 >> 4;
        v53 = (char *)v181 + 41;
        if (v48 >= 0x10)
        {
          while (*v51 != v44)
          {
            ++v53;
            v51 += 2;
            if (!--v52)
              goto LABEL_47;
          }
          v54 = v53[v181[10]];
          v55 = v54 > 5;
          v56 = (1 << v54) & 0x23;
          if (v55 || v56 == 0)
          {
LABEL_32:
            v42 = swift_retain();
            v45(v42);
            swift_release();
            continue;
          }
        }
LABEL_47:
        if (swift_conformsToProtocol2())
          v58 = v50;
        else
          v58 = 0;
        if (v58)
        {
          if (v48 < 0x10)
            goto LABEL_32;
          v59 = v49;
          v60 = v48 >> 4;
          v61 = (char *)v181 + 41;
          while (*v59 != v58)
          {
            ++v61;
            v59 += 2;
            if (!--v60)
              goto LABEL_60;
          }
          v62 = v61[v181[10]];
          v55 = v62 > 5;
          v63 = (1 << v62) & 0x23;
          if (v55 || v63 == 0)
            goto LABEL_32;
LABEL_60:
          v65 = 16 * (v48 >> 4);
          while (*v49 != v58)
          {
            v49 += 2;
            v65 -= 16;
            if (!v65)
              goto LABEL_32;
          }
        }
      }
      v66 = v20[7];
      v39 = v20[6];
      v67 = (_QWORD *)v20[4];
      if ((uint64_t)v20[8] >= 1)
        swift_arrayDestroy();
LABEL_67:
      v26 = v141;
      ecs_stack_allocator_deallocate(v67, v39, 48 * v66);
      v20[6] = v165;
      v20[7] = v162;
      v20[8] = v160;
      v20[9] = v158;
      v20[10] = v156;
      if (*(_QWORD *)(v20[13] + 16))
      {
        v68 = (_QWORD *)swift_bridgeObjectRetain();
        sub_1B1F05034(v68, v174);
        swift_bridgeObjectRelease();
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v70 = v20[13];
        if ((isUniquelyReferenced_nonNull_native & 1) != 0)
        {
          sub_1B1C92670(0, *(_QWORD *)(v70 + 16));
        }
        else
        {
          v71 = (_QWORD *)MEMORY[0x1E0DEE9D8];
          if (*(_QWORD *)(v70 + 24) >= 2uLL)
          {
            sub_1B1791524(0, (unint64_t *)&qword_1ED4BADE0, (uint64_t (*)(uint64_t))sub_1B1B1F228, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
            v71 = (_QWORD *)swift_allocObject();
            v72 = j__malloc_size(v71);
            v71[2] = 0;
            v71[3] = 2 * ((uint64_t)(v72 - 32) / 72);
          }
          v20[13] = v71;
          swift_bridgeObjectRelease();
        }
        if (*(unsigned __int8 *)(v20[2] + OBJC_IVAR____TtC3VFX13EntityManager_currentState) - 1 >= 2)
        {
          v73 = *(char **)(v174 + 232);
          v74 = *(char **)(v174 + 256);
          if (v73 == v74)
          {
            v75 = *(char **)(v174 + 240);
          }
          else
          {
            sub_1B1A1059C(v74, v73);
            v74 = *(char **)(v174 + 232);
            v75 = *(char **)(v174 + 240);
            if (v75 == v74)
            {
              v75 = 0;
              v74 = 0;
              *(_QWORD *)(v174 + 232) = 0;
              *(_QWORD *)(v174 + 240) = 0;
            }
          }
          *(_QWORD *)(v174 + 248) = v75;
          *(_QWORD *)(v174 + 256) = v74;
        }
      }
      ecs_stack_allocator_pop_snapshot(v141);
      v27 = v139;
      if ((v139 & 1) != 0)
      {
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v174 + 344));
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v174 + 376));
      }
      swift_release();
      v28 = v169 + 1;
      if (v169 + 1 == v147)
      {
        sub_1B1A086DC(v237, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
        break;
      }
    }
  }
  if ((v133 & 0x100) == 0)
  {
    v76 = v153;
    goto LABEL_142;
  }
  v77 = sub_1B2001ED0();
  v150 = v78;
  v152 = v77;
  v76 = v153;
  v79 = 0;
  if (!v77)
  {
    swift_unknownObjectRelease();
    sub_1B1A086DC(v237, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
    goto LABEL_18;
  }
  v203 = qword_1ED4D09F8;
  v204 = 0;
  v205 = 2;
  v206 = 0;
  v207 = 2;
  v208 = 0;
  swift_retain();
  sub_1B19F29F4((uint64_t)v196);
  swift_release();
  sub_1B1BBF3BC(0, (unint64_t *)&qword_1ED4BAD48, &qword_1ED4B8A00, (unint64_t *)&qword_1ED4B89D0);
  v80 = swift_allocObject();
  *(_OWORD *)(v80 + 16) = xmmword_1B226D240;
  *(_QWORD *)(v80 + 32) = &type metadata for EmitterReference;
  *(_QWORD *)(v80 + 40) = &off_1E6387218;
  sub_1B1E8940C(v197);
  swift_setDeallocating();
  swift_deallocClassInstance();
  sub_1B19ED720((uint64_t)v196);
  v199[0] = v197[0];
  v199[1] = v197[1];
  v200 = v198;
  sub_1B1E8FCE4(v135, (uint64_t)v199, 0x200000000, v239);
  sub_1B1A18378((uint64_t)v239, (uint64_t)v240, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  v182 = (unsigned __int16 *)v240[0];
  if (!v240[0])
  {
    sub_1B19ED720((uint64_t)v197);
    goto LABEL_141;
  }
  if (v244 <= 0 || (v148 = v241) == 0)
  {
    sub_1B19ED720((uint64_t)v197);
    goto LABEL_140;
  }
  v146 = v240[5];
  v81 = v243;
  v82 = v243[4];
  v83 = *(unsigned __int8 *)(v242 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
  v140 = v243 + 8;
  v178 = v240[0] + 41;
  swift_retain();
  swift_retain();
  swift_retain();
  v84 = 0;
  v142 = v83;
  v144 = v82;
  while (2)
  {
    v175 = v84;
    v85 = *(_QWORD *)(v146 + 48 * v84 + 40);
    if (v83)
    {
      v86 = *(os_unfair_lock_s **)(v85 + 376);
      swift_retain_n();
      os_unfair_lock_lock(v86);
      os_unfair_lock_lock(*(os_unfair_lock_t *)(v85 + 344));
      swift_release();
    }
    else
    {
      swift_retain();
    }
    ecs_stack_allocator_push_snapshot(v82);
    v163 = v81[7];
    v166 = v81[6];
    v159 = v81[9];
    v161 = v81[8];
    v157 = v81[10];
    v87 = v81[4];
    v88 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v85 + 40) + 16) + 32) + 16) + 1;
    swift_retain();
    v81[6] = ecs_stack_allocator_allocate(v87, 48 * v88, 8);
    v81[7] = v88;
    v140[1] = 0;
    v140[2] = 0;
    *v140 = 0;
    swift_release();
    v155 = *(_OWORD *)(v85 + 272);
    v90 = *(_QWORD *)(v85 + 288);
    v89 = *(_QWORD *)(v85 + 296);
    v170 = v85;
    LODWORD(v217[0]) = *(_DWORD *)(v85 + 24);
    sub_1B2229A0C();
    sub_1B222A0CC();
    sub_1B2228824();
    swift_bridgeObjectRelease();
    v188 = v217[2];
    v189 = v218;
    v190 = v219;
    v186 = v217[0];
    v187 = v217[1];
    v91 = sub_1B222A0B4();
    v250 = v155;
    v251 = v90;
    v252 = v89;
    v253 = 0u;
    v254 = 0u;
    v255 = 0u;
    v256 = 0u;
    v257 = 6;
    LOBYTE(v217[0]) = 1;
    sub_1B217F570(v150, 0x100000000uLL, v152, &v250, v91 | 0xFF000000);
    v92 = v81[6];
    v93 = v81;
    v94 = v81[8];
    if (!v94)
    {
      v119 = v93[7];
      v120 = (_QWORD *)v93[4];
      v81 = v93;
      goto LABEL_131;
    }
    v136 = v79;
    for (j = 0; j != v94; ++j)
    {
      v97 = (uint64_t *)(v92 + 48 * j);
      v98 = *v97;
      v99 = (void (*)(uint64_t))v97[4];
      v100 = v93[9];
      if (v100)
        v101 = v98 == v100;
      else
        v101 = 0;
      if (v101 || !v182[11])
        goto LABEL_95;
      v102 = v182[9];
      v103 = (_QWORD *)(v178 + v182[8]);
      v104 = v97[2];
      v105 = v103;
      v106 = v102 >> 4;
      v107 = v178;
      if (v102 >= 0x10)
      {
        while (*v105 != v98)
        {
          ++v107;
          v105 += 2;
          if (!--v106)
            goto LABEL_110;
        }
        v108 = *(unsigned __int8 *)(v107 + v182[10]);
        v55 = v108 > 5;
        v109 = (1 << v108) & 0x23;
        if (v55 || v109 == 0)
        {
LABEL_95:
          v96 = swift_retain();
          v99(v96);
          swift_release();
          continue;
        }
      }
LABEL_110:
      if (swift_conformsToProtocol2())
        v111 = v104;
      else
        v111 = 0;
      if (v111)
      {
        if (v102 < 0x10)
          goto LABEL_95;
        v112 = v103;
        v113 = v102 >> 4;
        v114 = v178;
        while (*v112 != v111)
        {
          ++v114;
          v112 += 2;
          if (!--v113)
            goto LABEL_123;
        }
        v115 = *(unsigned __int8 *)(v114 + v182[10]);
        v55 = v115 > 5;
        v116 = (1 << v115) & 0x23;
        if (v55 || v116 == 0)
          goto LABEL_95;
LABEL_123:
        v118 = 16 * (v102 >> 4);
        while (*v103 != v111)
        {
          v103 += 2;
          v118 -= 16;
          if (!v118)
            goto LABEL_95;
        }
      }
    }
    v81 = v93;
    v119 = v93[7];
    v92 = v93[6];
    v120 = (_QWORD *)v93[4];
    if ((uint64_t)v93[8] >= 1)
      swift_arrayDestroy();
    v76 = v153;
    v79 = v136;
LABEL_131:
    v82 = v144;
    v83 = v142;
    ecs_stack_allocator_deallocate(v120, v92, 48 * v119);
    v81[6] = v166;
    v81[7] = v163;
    v81[8] = v161;
    v81[9] = v159;
    v81[10] = v157;
    sub_1B1F03804((char *)v170);
    ecs_stack_allocator_pop_snapshot(v144);
    if ((v142 & 1) != 0)
    {
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v170 + 344));
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v170 + 376));
    }
    swift_release();
    v84 = v175 + 1;
    if (v175 + 1 != v148)
      continue;
    break;
  }
  sub_1B19ED720((uint64_t)v197);
  sub_1B1A086DC(v239, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
LABEL_140:
  sub_1B1A086DC(v239, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
LABEL_141:
  sub_1B1D83844(v152);
LABEL_142:
  v126 = sub_1B2001ED0();
  if (v126)
  {
    v128 = v126;
    v129 = v127;
    sub_1B1A18378(v76 + 624, (uint64_t)v216, &qword_1ED4BF400, (uint64_t)&type metadata for Renderer.CurrentRenderContext);
    sub_1B1A18378((uint64_t)v216, (uint64_t)v217, &qword_1ED4BF400, (uint64_t)&type metadata for Renderer.CurrentRenderContext);
    if (sub_1B1B3C438((uint64_t *)v217) == 1)
    {
      sub_1B2229688();
      __break(1u);
    }
    else
    {
      v179 = v219;
      v183 = v218;
      v176 = v220;
      v167 = v222;
      v171 = v221;
      v131 = v223;
      v130 = v224;
      v132 = sub_1B1B4D2D0(255, 255, 255);
      v246[0] = v183;
      v246[1] = v179;
      v246[2] = v176;
      v246[3] = v171;
      v246[4] = v167;
      v247 = v131;
      v248 = v130;
      v249 = 8;
      sub_1B217F570(v129, 0x100000000uLL, v128, v246, v132);

      swift_unknownObjectRelease();
      sub_1B1A086DC(v237, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
      swift_release();
      sub_1B1D83844(v128);
    }
  }
  else
  {

    swift_unknownObjectRelease();
    sub_1B1A086DC(v237, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
    swift_release();
  }
}

uint64_t sub_1B200B42C()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1B200B450(unsigned int a1, float32x4_t a2, float32x4_t a3)
{
  uint64_t v3;

  return sub_1B20047A8(a1, *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24), a2, a3);
}

uint64_t sub_1B200B458()
{
  return swift_deallocObject();
}

__n64 sub_1B200B468(float32x4_t _Q0)
{
  float v9;
  __n64 result;

  _Q2 = _Q0;
  _S3 = _Q0.u32[1];
  _S4 = _Q0.u32[2];
  __asm { FMLS            S0, S4, V2.S[2] }
  _S6 = _Q2.i32[3];
  __asm { FMLA            S0, S6, V2.S[3] }
  v9 = vmlas_n_f32(vmuls_lane_f32(_Q0.f32[2], _Q2, 3), _Q0.f32[1], _Q2.f32[0]);
  __asm
  {
    FMLA            S5, S3, V2.S[1]
    FMLA            S5, S6, V2.S[3]
    FMLS            S5, S2, V2.S[0]
    FMLA            S18, S4, V2.S[1]
    FMLA            S6, S4, V2.S[2]
    FMLS            S6, S2, V2.S[0]
    FMLS            S6, S3, V2.S[1]
  }
  result.n64_f32[1] = v9 + v9;
  return result;
}

_QWORD *sub_1B200B518(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 v4;
  unsigned __int8 v5;
  int v6;
  _QWORD *result;
  double v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  ValueMetadata **v12;
  ValueMetadata *v13;
  ValueMetadata *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t k;
  int v19;
  uint64_t v20;
  unsigned int *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  os_unfair_lock_s *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  _OWORD *v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  __int128 *v52;
  __int128 v53;
  char *v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  __int128 *v67;
  __int128 v68;
  _OWORD *v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  __int128 *v82;
  __int128 v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  os_unfair_lock_s *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char v92;
  unint64_t v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  os_unfair_lock_s *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  os_unfair_lock_s *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  os_unfair_lock_s *v119;
  uint64_t v120;
  uint64_t v121;
  _OWORD *v122;
  unint64_t v123;
  __int128 *v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  _OWORD *v129;
  unint64_t v130;
  __int128 *v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  _OWORD *v136;
  unint64_t v137;
  __int128 *v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  uint64_t v143;
  uint64_t v144;
  _QWORD *v145;
  uint64_t v146;
  uint64_t v147;
  char *v148;
  uint64_t v149;
  int v150;
  char *v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  uint64_t v156;
  uint64_t v157;
  _QWORD *v158;
  unint64_t v159;
  unint64_t v160;
  uint64_t v161;
  uint64_t v162;
  unint64_t v163;
  __int128 *v164;
  __int128 v165;
  _OWORD *v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  uint64_t v171;
  uint64_t v172;
  _QWORD *v173;
  unint64_t v174;
  unint64_t v175;
  uint64_t v176;
  uint64_t v177;
  unint64_t v178;
  __int128 *v179;
  __int128 v180;
  _OWORD *v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  uint64_t v186;
  uint64_t v187;
  _QWORD *v188;
  unint64_t v189;
  unint64_t v190;
  uint64_t v191;
  uint64_t v192;
  unint64_t v193;
  __int128 *v194;
  __int128 v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  os_unfair_lock_s *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  char v204;
  unint64_t v205;
  int v206;
  uint64_t v207;
  uint64_t v208;
  os_unfair_lock_s *v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  char v214;
  unint64_t v215;
  uint64_t v216;
  uint64_t v217;
  os_unfair_lock_s *v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  char v223;
  unint64_t v224;
  uint64_t v225;
  uint64_t v226;
  os_unfair_lock_s *v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  _OWORD *v231;
  unint64_t v232;
  __int128 *v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  _OWORD *v238;
  unint64_t v239;
  __int128 *v240;
  __int128 v241;
  __int128 v242;
  __int128 v243;
  __int128 v244;
  _OWORD *v245;
  unint64_t v246;
  __int128 *v247;
  __int128 v248;
  __int128 v249;
  __int128 v250;
  __int128 v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  unsigned int *v255;
  uint64_t v256;
  uint64_t *v257;
  uint64_t v258;
  char *v259;
  uint64_t v260;
  os_unfair_lock_s *v261;
  char *v262;
  uint64_t v263;
  uint64_t v264;
  _QWORD *v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  unsigned int *v272;
  uint64_t v273;
  __int128 v274;
  uint64_t v275;
  __int128 v276;
  __int128 v277;
  __int128 v278;
  __int128 v279;
  uint64_t v280;
  uint64_t v281;
  _QWORD *v282;
  unint64_t v283;
  unint64_t v284;
  uint64_t v285;
  unint64_t v286;
  __int128 *v287;
  __int128 v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  os_unfair_lock_s *v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  char v297;
  unint64_t v298;
  int v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  _OWORD *v304;
  unint64_t v305;
  __int128 *v306;
  __int128 v307;
  __int128 v308;
  __int128 v309;
  __int128 v310;
  uint64_t v311;
  char *v312;
  uint64_t v313;
  unsigned int *v314;
  uint64_t v315;
  __int128 v316;
  _BYTE *v317;
  __int128 v318;
  __int128 v319;
  __int128 v320;
  __int128 v321;
  uint64_t v322;
  uint64_t v323;
  _QWORD *v324;
  unint64_t v325;
  unint64_t v326;
  uint64_t v327;
  unint64_t v328;
  __int128 *v329;
  __int128 v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  _OWORD *v334;
  unint64_t v335;
  __int128 *v336;
  __int128 v337;
  __int128 v338;
  __int128 v339;
  __int128 v340;
  _BYTE *v341;
  uint64_t v342;
  unsigned int *v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t *v346;
  uint64_t v347;
  os_unfair_lock_s *v348;
  char *v349;
  uint64_t v350;
  uint64_t v351;
  _QWORD *v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t i;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  _QWORD *v362;
  uint64_t v363;
  uint64_t j;
  __n128 *v365;
  __n128 v366;
  __n128 v367;
  __n128 v368;
  __n128 v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  __int128 v374;
  float32x4_t v375;
  float32x4_t v376;
  float32x4_t v377;
  int v378;
  _OWORD *v379;
  uint64_t v380;
  uint64_t v381;
  char *v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  _QWORD *v386;
  uint64_t v387;
  uint64_t m;
  __n128 *v389;
  __n128 v390;
  __n128 v391;
  __n128 v392;
  __n128 v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  __int128 v398;
  float32x4_t v399;
  float32x4_t v400;
  float32x4_t v401;
  int v402;
  uint64_t *v403;
  _QWORD *v404;
  uint64_t v405;
  int v406;
  uint64_t v407;
  unsigned int *v408;
  uint64_t *v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  os_unfair_lock_s *v413;
  uint64_t v414;
  uint64_t v415;
  _QWORD *v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t *v420;
  char v421;
  float32x4_t v422;
  __int128 v423;
  float32x4_t v424;
  float32x4_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  unint64_t v436;
  char v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t *v440;
  uint64_t v441;
  char v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  unint64_t v453;
  char v454;
  uint64_t v455;
  int v456;
  int v457;
  uint64_t *v458;
  uint64_t *v459;
  uint64_t *v460;
  uint64_t *v461;
  _QWORD *v462;
  uint64_t v463;
  _QWORD *v464;
  _QWORD *v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t *v468;
  uint64_t *v469;
  uint64_t *v470;
  uint64_t *v471;
  uint64_t *v472;
  __int128 *v473;
  __int128 v474;
  __int128 v475;
  int64x2_t v476;
  __int128 v477;
  __int128 v478;
  uint64_t v479;
  __int128 *v480;
  char *v481;
  uint64_t v482;
  _QWORD *v483;
  uint64_t v484;
  _QWORD *v485;
  int64x2_t v486;
  char *v487;
  _BYTE *v488;
  __int128 v489;
  __int128 v490;
  char *v491;
  __int128 v492;
  __int128 v493;
  __int128 v494;
  __int128 v495;
  uint64_t *v496;
  __int128 v497;
  __int128 v498;
  __int128 v499;
  __int128 v500;
  float32x4_t v501;
  __int128 v502;
  uint64_t v503;
  uint64_t v504;
  __int128 v505;
  _OWORD v506[2];
  uint64_t v507;
  _QWORD v508[12];
  _OWORD v509[2];
  uint64_t v510;
  _QWORD v511[12];
  _OWORD v512[2];
  uint64_t v513;
  _QWORD v514[12];
  uint64_t v515;
  int v516;
  char v517;
  uint64_t v518;
  char v519;
  uint64_t v520;
  _QWORD v521[12];
  _OWORD v522[2];
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t v527;
  uint64_t v528;
  _OWORD v529[2];
  uint64_t v530;
  _QWORD *v531;
  uint64_t v532;
  uint64_t v533;
  char *v534;
  uint64_t v535;
  _OWORD v536[2];
  uint64_t v537;
  uint64_t v538;
  uint64_t v539;
  uint64_t v540;
  char *v541;
  uint64_t v542;
  __int128 v543;
  __int128 v544;
  uint64_t v545;
  _OWORD v546[2];
  uint64_t v547;
  uint64_t v548;
  uint64_t v549;
  uint64_t v550;
  _QWORD *v551;
  uint64_t v552;
  __int128 v553;
  __int128 v554;
  uint64_t v555;
  _OWORD v556[2];
  uint64_t v557;
  _OWORD v558[2];
  uint64_t v559;
  _OWORD v560[2];
  uint64_t v561;
  _OWORD v562[2];
  uint64_t v563;
  _OWORD v564[2];
  uint64_t v565;
  _OWORD v566[2];
  uint64_t v567;
  _OWORD v568[2];
  uint64_t v569;
  _BYTE v570[40];
  float32x4_t v571[7];
  _OWORD v572[2];
  _QWORD v573[8];
  char v574;
  float32x4_t v575[7];
  _OWORD v576[2];
  _QWORD v577[8];
  char v578;
  uint64_t v579;
  int v580;
  char v581;
  uint64_t v582;
  char v583;
  uint64_t v584;
  uint64_t v585;
  int v586;
  char v587;
  uint64_t v588;
  char v589;
  uint64_t v590;
  _BYTE v591[40];
  __int128 v592[2];
  uint64_t v593;
  uint64_t v594;
  __int128 v595[6];
  char v596;
  __int128 v597[2];
  uint64_t v598;
  uint64_t v599;
  __int128 v600[6];
  char v601;
  uint64_t v602;
  int v603;
  char v604;
  uint64_t v605;
  char v606;
  uint64_t v607;
  _BYTE v608[184];
  uint64_t v609;
  uint64_t v610;
  uint64_t v611;
  uint64_t v612;
  _QWORD v613[2];
  __int128 v614;
  uint64_t v615;
  __int128 v616;
  _BYTE v617[96];
  uint64_t v618;
  uint64_t v619;
  uint64_t v620;
  uint64_t v621;
  uint64_t v622;
  _QWORD v623[2];
  __int128 v624;
  uint64_t v625;
  __int128 v626;
  _BYTE v627[96];
  _QWORD v628[10];
  int v629;
  char v630;
  uint64_t v631;
  char v632;
  uint64_t v633;
  _BYTE v634[40];
  _OWORD v635[2];
  _BYTE v636[80];
  _OWORD v637[2];
  _BYTE v638[80];
  __int128 v639;
  _BYTE v640[96];
  _OWORD v641[2];
  _BYTE v642[80];
  _OWORD v643[2];
  _BYTE v644[80];
  __int128 v645;
  _BYTE v646[88];
  uint64_t v647;
  int v648;
  char v649;
  uint64_t v650;
  char v651;
  uint64_t v652;

  MEMORY[0x1E0C80A78](a1, a2);
  v3 = v2;
  swift_retain();
  sub_1B20001B0();
  v5 = v4;
  v6 = v4;
  result = (_QWORD *)swift_release();
  if (v6 == 2)
    return result;
  v9 = *(_QWORD *)(*(_QWORD *)(v3 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues)
                 + 8 * *(_QWORD *)thread_worker_index(v8)
                 + 8);
  sub_1B1BBF3BC(0, (unint64_t *)&qword_1ED4BAD80, (unint64_t *)&qword_1ED4B8C90, (unint64_t *)&qword_1ED4B8C70);
  v10 = swift_allocObject();
  v11 = sub_1B19F909C(v10, 1);
  v13 = &type metadata for DebugInfoA;
  if ((v5 & 1) == 0)
    v13 = &type metadata for DebugInfoB;
  v14 = (ValueMetadata *)&off_1E636D640;
  if ((v5 & 1) != 0)
    v14 = (ValueMetadata *)&off_1E636D550;
  *v12 = v13;
  v12[1] = v14;
  nullsub_16(v11);
  v16 = v15;
  v17 = *(_QWORD **)(v3 + 176);
  swift_retain();
  k = 0;
  sub_1B1F24200((uint64_t)&type metadata for DebugDrawingState, (uint64_t)&off_1E638BB58, v17, v575);
  swift_release();
  v19 = v575[0].u8[0];
  LODWORD(v475) = v575[0].u8[1];
  v456 = v575[0].u8[5];
  v457 = v575[0].u8[6];
  if (v575[0].u8[2] == 1)
    sub_1B2007618(v3);
  v504 = v9;
  v503 = v16;
  v463 = v3;
  if (!v19)
    goto LABEL_186;
  LODWORD(v499) = sub_1B1B4D2D0(255, 0, 0);
  if (qword_1ED4B7DB8 != -1)
    swift_once();
  v647 = qword_1ED4D09F8;
  v648 = 0;
  v649 = 2;
  v651 = 2;
  v650 = 0;
  v652 = 0;
  swift_retain();
  sub_1B1B1754C(1, 1, (uint64_t)v506);
  swift_release();
  v568[0] = v506[0];
  v568[1] = v506[1];
  v569 = v507;
  sub_1B1E8FCE4(v3, (uint64_t)v568, 0x200000000, v508);
  sub_1B1A18378((uint64_t)v508, (uint64_t)v546, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (!*(_QWORD *)&v546[0])
  {
    sub_1B19ED720((uint64_t)v506);
    goto LABEL_185;
  }
  v553 = v546[0];
  v554 = v546[1];
  v555 = v547;
  if (v552 <= 0 || (v479 = v549) == 0)
  {
    sub_1B19ED720((uint64_t)v506);
    sub_1B1A086DC(v508, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
    goto LABEL_185;
  }
  *(_QWORD *)&v478 = v548;
  LODWORD(v484) = *(unsigned __int8 *)(v550 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
  *(_QWORD *)&v477 = v551 + 6;
  v476.i64[0] = (uint64_t)(v551 + 8);
  v496 = (uint64_t *)(v503 + 32);
  v491 = v638;
  *(_QWORD *)&v492 = v640;
  v485 = v551;
  v483 = (_QWORD *)v551[4];
  *(_QWORD *)&v490 = v636;
  v488 = v644;
  *(_QWORD *)&v489 = v646;
  v487 = v642;
  swift_retain();
  swift_retain();
  swift_retain();
  v20 = 0;
  v480 = (__int128 *)(v503 + 64);
  v486 = vdupq_n_s64(0x3F000000uLL);
  v497 = xmmword_1B2244E20;
  v494 = xmmword_1B227E550;
  v493 = xmmword_1B22821D0;
  k = 0;
  do
  {
    v482 = v20;
    v21 = (unsigned int *)(v478 + 48 * v20);
    v22 = *v21;
    *(_QWORD *)&v498 = v21[1];
    v23 = (uint64_t *)*((_QWORD *)v21 + 2);
    v24 = *((_QWORD *)v21 + 3);
    v26 = *((_QWORD *)v21 + 4);
    v25 = *((_QWORD *)v21 + 5);
    *(_QWORD *)&v505 = v22;
    v27 = k;
    if ((_DWORD)v484)
    {
      v28 = *(os_unfair_lock_s **)(v25 + 376);
      swift_retain();
      os_unfair_lock_lock(v28);
      os_unfair_lock_lock(*(os_unfair_lock_t *)(v25 + 344));
    }
    else
    {
      swift_retain();
    }
    ecs_stack_allocator_push_snapshot((uint64_t)v483);
    sub_1B1A18378(v477, (uint64_t)v634, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
    v29 = v485;
    v30 = v485[4];
    v31 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v25 + 40) + 16) + 32) + 16) + 1;
    swift_retain();
    v29[6] = ecs_stack_allocator_allocate(v30, 48 * v31, 8);
    v29[7] = v31;
    v32 = (_QWORD *)v476.i64[0];
    *(_QWORD *)(v476.i64[0] + 8) = 0;
    v32[2] = 0;
    *v32 = 0;
    swift_release();
    v501.i64[0] = sub_1B1A12038((uint64_t)&type metadata for KillShape, (uint64_t)&off_1E63C3E28, v23, v24, v26, (uint64_t)v29);
    v481 = (char *)v25;
    v33 = sub_1B1A12038((uint64_t)&type metadata for WorldTransform, (uint64_t)&off_1E6382C00, v23, v24, v26, (uint64_t)v29);
    *(_QWORD *)&v500 = v33;
    if (!v23)
    {
      v146 = v505;
      v147 = v504;
      k = v27;
      if ((_DWORD)v505 == (_DWORD)v498)
        goto LABEL_107;
      v149 = v503;
      while (1)
      {
        v150 = *(unsigned __int8 *)(v501.i64[0] + 2 * v146);
        *(_QWORD *)&v505 = v146;
        if (!v150)
        {
          v643[0] = v497;
          v643[1] = v486;
          v166 = v488;
          *(_OWORD *)v488 = 0u;
          v166[1] = 0u;
          v166[2] = 0u;
          v166[3] = 0u;
          v644[64] = 6;
          *(double *)&v167 = MEMORY[0x1E0C80A78](v33, v34);
          *(&v455 - 10) = (uint64_t)v643;
          *((_DWORD *)&v455 - 18) = v499;
          *((_OWORD *)&v455 - 4) = v167;
          *((_OWORD *)&v455 - 3) = v168;
          *((_OWORD *)&v455 - 2) = v169;
          *((_OWORD *)&v455 - 1) = v170;
          v171 = *(_QWORD *)(v147 + 32);
          ecs_stack_allocator_push_snapshot(v171);
          v172 = sub_1B1C7A1C4(v149);
          v173 = ecs_stack_allocator_allocate(v171, 16 * v172 + 64, 8);
          *v173 = &type metadata for DebugInfoWireframePrimitive;
          v173[1] = &off_1E63B2990;
          v173[2] = &type metadata for DebugInfoColor;
          v173[3] = &off_1E637ED40;
          v173[4] = &type metadata for WorldTransform;
          v173[5] = &off_1E6382C00;
          v173[6] = &type metadata for Beamed;
          v173[7] = &off_1E63BB000;
          v174 = sub_1B1C7A1C4(v149);
          *(_QWORD *)&v502 = &v455;
          *(_QWORD *)&v495 = &v455 - 12;
          if (!v174)
          {
            v176 = 4;
            goto LABEL_139;
          }
          if (v174 < 0x12)
          {
            v175 = 0;
            goto LABEL_122;
          }
          v175 = 0;
          v229 = 2 * (v174 - 1);
          if (&v173[v229 + 8] < v173 + 8)
          {
LABEL_122:
            v176 = 4;
            v177 = (uint64_t)v496;
          }
          else
          {
            v177 = (uint64_t)v496;
            if (&v173[v229 + 9] < v173 + 9 || (v174 - 1) >> 60)
            {
              v176 = 4;
              goto LABEL_123;
            }
            if (v173 + 8 < &v496[2 * v174] && v496 < &v173[2 * v174 + 8])
            {
              v175 = 0;
              v176 = 4;
              goto LABEL_123;
            }
            v175 = v174 & 0xFFFFFFFFFFFFFFFCLL;
            v176 = (v174 & 0xFFFFFFFFFFFFFFFCLL) + 4;
            v238 = v173 + 12;
            v239 = v174 & 0xFFFFFFFFFFFFFFFCLL;
            v240 = v480;
            do
            {
              v242 = *(v240 - 2);
              v241 = *(v240 - 1);
              v244 = *v240;
              v243 = v240[1];
              v240 += 4;
              *(v238 - 2) = v242;
              *(v238 - 1) = v241;
              *v238 = v244;
              v238[1] = v243;
              v238 += 4;
              v239 -= 4;
            }
            while (v239);
            if (v174 == v175)
            {
LABEL_139:
              v208 = sub_1B1D1E2C8(0);
              v197 = *(_QWORD *)(v147 + 16);
              v198 = v197 + OBJC_IVAR____TtC3VFX13EntityManager_lock;
              v209 = *(os_unfair_lock_s **)(v197 + OBJC_IVAR____TtC3VFX13EntityManager_lock + 24);
              swift_retain();
              os_unfair_lock_lock(v209);
              swift_bridgeObjectRetain();
              v210 = sub_1B1DAD870((uint64_t)v173, v176, v208);
              v212 = v211;
              swift_bridgeObjectRelease();
              v213 = sub_1B1DA8760(v210);
              if ((v214 & 1) != 0 || (v215 = sub_1B1DA87D4(v212, v213), v206 = v215, (v215 & 0x100000000) != 0))
              {
                v216 = sub_1B1DC9E90(v173, v176);
                swift_bridgeObjectRetain();
                v206 = sub_1B1DA8838(v210, v212, v216, v208);
                swift_release();
                swift_bridgeObjectRelease();
              }
              goto LABEL_147;
            }
          }
LABEL_123:
          v178 = v174 - v175;
          v179 = (__int128 *)(v177 + 16 * v175);
          do
          {
            v180 = *v179++;
            *(_OWORD *)&v173[2 * v176++] = v180;
            --v178;
          }
          while (v178);
          goto LABEL_139;
        }
        if (v150 != 1)
        {
          v645 = v493;
          v181 = (_OWORD *)v489;
          *(_OWORD *)v489 = 0u;
          v181[1] = 0u;
          v181[2] = 0u;
          v181[3] = 0u;
          v181[4] = 0u;
          v646[80] = 3;
          *(double *)&v182 = MEMORY[0x1E0C80A78](v33, v34);
          *(&v455 - 10) = (uint64_t)&v645;
          *((_DWORD *)&v455 - 18) = v499;
          *((_OWORD *)&v455 - 4) = v182;
          *((_OWORD *)&v455 - 3) = v183;
          *((_OWORD *)&v455 - 2) = v184;
          *((_OWORD *)&v455 - 1) = v185;
          v186 = *(_QWORD *)(v147 + 32);
          ecs_stack_allocator_push_snapshot(v186);
          v187 = sub_1B1C7A1C4(v149);
          v188 = ecs_stack_allocator_allocate(v186, 16 * v187 + 64, 8);
          *v188 = &type metadata for DebugInfoWireframePrimitive;
          v188[1] = &off_1E63B2990;
          v188[2] = &type metadata for DebugInfoColor;
          v188[3] = &off_1E637ED40;
          v188[4] = &type metadata for WorldTransform;
          v188[5] = &off_1E6382C00;
          v188[6] = &type metadata for Beamed;
          v188[7] = &off_1E63BB000;
          v189 = sub_1B1C7A1C4(v149);
          *(_QWORD *)&v502 = &v455;
          *(_QWORD *)&v495 = &v455 - 12;
          if (!v189)
          {
            v191 = 4;
            goto LABEL_144;
          }
          if (v189 < 0x12)
          {
            v190 = 0;
            goto LABEL_129;
          }
          v190 = 0;
          v230 = 2 * (v189 - 1);
          if (&v188[v230 + 8] < v188 + 8)
          {
LABEL_129:
            v191 = 4;
            v192 = (uint64_t)v496;
          }
          else
          {
            v192 = (uint64_t)v496;
            if (&v188[v230 + 9] < v188 + 9 || (v189 - 1) >> 60)
            {
              v191 = 4;
              goto LABEL_130;
            }
            if (v188 + 8 < &v496[2 * v189] && v496 < &v188[2 * v189 + 8])
            {
              v190 = 0;
              v191 = 4;
              goto LABEL_130;
            }
            v190 = v189 & 0xFFFFFFFFFFFFFFFCLL;
            v191 = (v189 & 0xFFFFFFFFFFFFFFFCLL) + 4;
            v245 = v188 + 12;
            v246 = v189 & 0xFFFFFFFFFFFFFFFCLL;
            v247 = v480;
            do
            {
              v249 = *(v247 - 2);
              v248 = *(v247 - 1);
              v251 = *v247;
              v250 = v247[1];
              v247 += 4;
              *(v245 - 2) = v249;
              *(v245 - 1) = v248;
              *v245 = v251;
              v245[1] = v250;
              v245 += 4;
              v246 -= 4;
            }
            while (v246);
            if (v189 == v190)
            {
LABEL_144:
              v217 = sub_1B1D1E2C8(0);
              v197 = *(_QWORD *)(v147 + 16);
              v198 = v197 + OBJC_IVAR____TtC3VFX13EntityManager_lock;
              v218 = *(os_unfair_lock_s **)(v197 + OBJC_IVAR____TtC3VFX13EntityManager_lock + 24);
              swift_retain();
              os_unfair_lock_lock(v218);
              swift_bridgeObjectRetain();
              v219 = sub_1B1DAD870((uint64_t)v188, v191, v217);
              v221 = v220;
              swift_bridgeObjectRelease();
              v222 = sub_1B1DA8760(v219);
              if ((v223 & 1) != 0 || (v224 = sub_1B1DA87D4(v221, v222), v206 = v224, (v224 & 0x100000000) != 0))
              {
                v225 = sub_1B1DC9E90(v188, v191);
                swift_bridgeObjectRetain();
                v206 = sub_1B1DA8838(v219, v221, v225, v217);
                swift_release();
                swift_bridgeObjectRelease();
              }
              goto LABEL_147;
            }
          }
LABEL_130:
          v193 = v189 - v190;
          v194 = (__int128 *)(v192 + 16 * v190);
          do
          {
            v195 = *v194++;
            *(_OWORD *)&v188[2 * v191++] = v195;
            --v193;
          }
          while (v193);
          goto LABEL_144;
        }
        v641[0] = v497;
        v641[1] = v494;
        v151 = v487;
        *(_OWORD *)v487 = 0u;
        *((_OWORD *)v151 + 1) = 0u;
        *((_OWORD *)v151 + 2) = 0u;
        *((_OWORD *)v151 + 3) = 0u;
        v642[64] = 6;
        *(double *)&v152 = MEMORY[0x1E0C80A78](v33, v34);
        *(&v455 - 10) = (uint64_t)v641;
        *((_DWORD *)&v455 - 18) = v499;
        *((_OWORD *)&v455 - 4) = v152;
        *((_OWORD *)&v455 - 3) = v153;
        *((_OWORD *)&v455 - 2) = v154;
        *((_OWORD *)&v455 - 1) = v155;
        v156 = *(_QWORD *)(v147 + 32);
        ecs_stack_allocator_push_snapshot(v156);
        v157 = sub_1B1C7A1C4(v149);
        v158 = ecs_stack_allocator_allocate(v156, 16 * v157 + 64, 8);
        *v158 = &type metadata for DebugInfoWireframePrimitive;
        v158[1] = &off_1E63B2990;
        v158[2] = &type metadata for DebugInfoColor;
        v158[3] = &off_1E637ED40;
        v158[4] = &type metadata for WorldTransform;
        v158[5] = &off_1E6382C00;
        v158[6] = &type metadata for Beamed;
        v158[7] = &off_1E63BB000;
        v159 = sub_1B1C7A1C4(v149);
        *(_QWORD *)&v502 = &v455;
        *(_QWORD *)&v495 = &v455 - 12;
        if (!v159)
        {
          v161 = 4;
          goto LABEL_134;
        }
        if (v159 < 0x12)
          break;
        v160 = 0;
        v228 = 2 * (v159 - 1);
        if (&v158[v228 + 8] < v158 + 8)
          goto LABEL_115;
        v162 = (uint64_t)v496;
        if (&v158[v228 + 9] < v158 + 9 || (v159 - 1) >> 60)
        {
          v161 = 4;
          goto LABEL_116;
        }
        if (v158 + 8 < &v496[2 * v159] && v496 < &v158[2 * v159 + 8])
        {
          v160 = 0;
          v161 = 4;
          goto LABEL_116;
        }
        v160 = v159 & 0xFFFFFFFFFFFFFFFCLL;
        v161 = (v159 & 0xFFFFFFFFFFFFFFFCLL) + 4;
        v231 = v158 + 12;
        v232 = v159 & 0xFFFFFFFFFFFFFFFCLL;
        v233 = v480;
        do
        {
          v235 = *(v233 - 2);
          v234 = *(v233 - 1);
          v237 = *v233;
          v236 = v233[1];
          v233 += 4;
          *(v231 - 2) = v235;
          *(v231 - 1) = v234;
          *v231 = v237;
          v231[1] = v236;
          v231 += 4;
          v232 -= 4;
        }
        while (v232);
        if (v159 != v160)
          goto LABEL_116;
LABEL_134:
        v196 = sub_1B1D1E2C8(0);
        v197 = *(_QWORD *)(v147 + 16);
        v198 = v197 + OBJC_IVAR____TtC3VFX13EntityManager_lock;
        v199 = *(os_unfair_lock_s **)(v197 + OBJC_IVAR____TtC3VFX13EntityManager_lock + 24);
        swift_retain();
        os_unfair_lock_lock(v199);
        swift_bridgeObjectRetain();
        v200 = sub_1B1DAD870((uint64_t)v158, v161, v196);
        v202 = v201;
        swift_bridgeObjectRelease();
        v203 = sub_1B1DA8760(v200);
        if ((v204 & 1) != 0 || (v205 = sub_1B1DA87D4(v202, v203), v206 = v205, (v205 & 0x100000000) != 0))
        {
          v207 = sub_1B1DC9E90(v158, v161);
          swift_bridgeObjectRetain();
          v206 = sub_1B1DA8838(v200, v202, v207, v196);
          swift_release();
          swift_bridgeObjectRelease();
        }
LABEL_147:
        v226 = *(_QWORD *)(*(_QWORD *)(v197 + 80) + 8 * v206 + 32);
        v227 = *(os_unfair_lock_s **)(v198 + 24);
        swift_retain();
        os_unfair_lock_unlock(v227);
        swift_release();
        v575[0].i8[0] = 1;
        v147 = v504;
        sub_1B1F10B7C(v226, 1, 1, 0x100000000uLL, v504, (uint64_t)sub_1B200F9F0, v495);
        v149 = v503;
        v146 = v505 + 1;
        swift_bridgeObjectRelease();
        swift_release();
        v33 = ecs_stack_allocator_pop_snapshot(*(_QWORD *)(v147 + 32));
        if (v146 == (_QWORD)v498)
          goto LABEL_107;
      }
      v160 = 0;
LABEL_115:
      v161 = 4;
      v162 = (uint64_t)v496;
LABEL_116:
      v163 = v159 - v160;
      v164 = (__int128 *)(v162 + 16 * v160);
      do
      {
        v165 = *v164++;
        *(_OWORD *)&v158[2 * v161++] = v165;
        --v163;
      }
      while (v163);
      goto LABEL_134;
    }
    v35 = v504;
    k = v27;
    if (v26)
    {
      v36 = 0;
      v37 = v503;
      *(_QWORD *)&v498 = v26;
      while (1)
      {
        v38 = *(unsigned __int8 *)(v501.i64[0] + 2 * v36);
        *(_QWORD *)&v505 = v36;
        if (!v38)
        {
          v637[0] = v497;
          v637[1] = vdupq_n_s64(0x3F000000uLL);
          v54 = v491;
          *(_OWORD *)v491 = 0u;
          *((_OWORD *)v54 + 1) = 0u;
          *((_OWORD *)v54 + 2) = 0u;
          *((_OWORD *)v54 + 3) = 0u;
          v638[64] = 6;
          *(double *)&v55 = MEMORY[0x1E0C80A78](v33, v34);
          *(&v455 - 10) = (uint64_t)v637;
          *((_DWORD *)&v455 - 18) = v499;
          *((_OWORD *)&v455 - 4) = v55;
          *((_OWORD *)&v455 - 3) = v56;
          *((_OWORD *)&v455 - 2) = v57;
          *((_OWORD *)&v455 - 1) = v58;
          v59 = *(_QWORD *)(v35 + 32);
          ecs_stack_allocator_push_snapshot(v59);
          v60 = sub_1B1C7A1C4(v37);
          v61 = ecs_stack_allocator_allocate(v59, 16 * v60 + 64, 8);
          *v61 = &type metadata for DebugInfoWireframePrimitive;
          v61[1] = &off_1E63B2990;
          v61[2] = &type metadata for DebugInfoColor;
          v61[3] = &off_1E637ED40;
          v61[4] = &type metadata for WorldTransform;
          v61[5] = &off_1E6382C00;
          v61[6] = &type metadata for Beamed;
          v61[7] = &off_1E63BB000;
          v62 = sub_1B1C7A1C4(v37);
          *(_QWORD *)&v502 = &v455;
          *(_QWORD *)&v495 = &v455 - 12;
          if (!v62)
          {
            v64 = 4;
            goto LABEL_51;
          }
          if (v62 < 0x12)
          {
            v63 = 0;
            goto LABEL_34;
          }
          v63 = 0;
          v115 = 2 * (v62 - 1);
          if (&v61[v115 + 8] < v61 + 8)
          {
LABEL_34:
            v64 = 4;
            v65 = (uint64_t)v496;
          }
          else
          {
            v65 = (uint64_t)v496;
            if (&v61[v115 + 9] < v61 + 9 || (v62 - 1) >> 60)
            {
              v64 = 4;
              goto LABEL_35;
            }
            if (v61 + 8 < &v496[2 * v62] && v496 < &v61[2 * v62 + 8])
            {
              v63 = 0;
              v64 = 4;
              goto LABEL_35;
            }
            v63 = v62 & 0xFFFFFFFFFFFFFFFCLL;
            v64 = (v62 & 0xFFFFFFFFFFFFFFFCLL) + 4;
            v129 = v61 + 12;
            v130 = v62 & 0xFFFFFFFFFFFFFFFCLL;
            v131 = v480;
            do
            {
              v133 = *(v131 - 2);
              v132 = *(v131 - 1);
              v135 = *v131;
              v134 = v131[1];
              v131 += 4;
              *(v129 - 2) = v133;
              *(v129 - 1) = v132;
              *v129 = v135;
              v129[1] = v134;
              v129 += 4;
              v130 -= 4;
            }
            while (v130);
            if (v62 == v63)
            {
LABEL_51:
              v96 = sub_1B1D1E2C8(0);
              v85 = *(_QWORD *)(v35 + 16);
              v86 = v85 + OBJC_IVAR____TtC3VFX13EntityManager_lock;
              v97 = *(os_unfair_lock_s **)(v85 + OBJC_IVAR____TtC3VFX13EntityManager_lock + 24);
              swift_retain();
              os_unfair_lock_lock(v97);
              swift_bridgeObjectRetain();
              v98 = sub_1B1DAD870((uint64_t)v61, v64, v96);
              v100 = v99;
              swift_bridgeObjectRelease();
              v101 = sub_1B1DA8760(v98);
              if ((v102 & 1) != 0 || (v103 = sub_1B1DA87D4(v100, v101), v94 = v103, (v103 & 0x100000000) != 0))
              {
                v104 = sub_1B1DC9E90(v61, v64);
                swift_bridgeObjectRetain();
                v94 = sub_1B1DA8838(v98, v100, v104, v96);
                swift_release();
                swift_bridgeObjectRelease();
              }
              goto LABEL_81;
            }
          }
LABEL_35:
          v66 = v62 - v63;
          v67 = (__int128 *)(v65 + 16 * v63);
          do
          {
            v68 = *v67++;
            *(_OWORD *)&v61[2 * v64++] = v68;
            --v66;
          }
          while (v66);
          goto LABEL_51;
        }
        if (v38 == 1)
        {
          v635[0] = v497;
          v635[1] = v494;
          v39 = (_OWORD *)v490;
          *(_OWORD *)v490 = 0u;
          v39[1] = 0u;
          v39[2] = 0u;
          v39[3] = 0u;
          v636[64] = 6;
          *(double *)&v40 = MEMORY[0x1E0C80A78](v33, v34);
          *(&v455 - 10) = (uint64_t)v635;
          *((_DWORD *)&v455 - 18) = v499;
          *((_OWORD *)&v455 - 4) = v40;
          *((_OWORD *)&v455 - 3) = v41;
          *((_OWORD *)&v455 - 2) = v42;
          *((_OWORD *)&v455 - 1) = v43;
          v44 = *(_QWORD *)(v35 + 32);
          ecs_stack_allocator_push_snapshot(v44);
          v45 = sub_1B1C7A1C4(v37);
          v46 = ecs_stack_allocator_allocate(v44, 16 * v45 + 64, 8);
          *v46 = &type metadata for DebugInfoWireframePrimitive;
          v46[1] = &off_1E63B2990;
          v46[2] = &type metadata for DebugInfoColor;
          v46[3] = &off_1E637ED40;
          v46[4] = &type metadata for WorldTransform;
          v46[5] = &off_1E6382C00;
          v46[6] = &type metadata for Beamed;
          v46[7] = &off_1E63BB000;
          v47 = sub_1B1C7A1C4(v37);
          *(_QWORD *)&v502 = &v455;
          *(_QWORD *)&v495 = &v455 - 12;
          if (!v47)
          {
            v49 = 4;
            goto LABEL_46;
          }
          if (v47 < 0x12)
          {
            v48 = 0;
            goto LABEL_27;
          }
          v48 = 0;
          v114 = 2 * (v47 - 1);
          if (&v46[v114 + 8] < v46 + 8)
          {
LABEL_27:
            v49 = 4;
            v50 = (uint64_t)v496;
          }
          else
          {
            v50 = (uint64_t)v496;
            if (&v46[v114 + 9] < v46 + 9 || (v47 - 1) >> 60)
            {
              v49 = 4;
              goto LABEL_28;
            }
            if (v46 + 8 < &v496[2 * v47] && v496 < &v46[2 * v47 + 8])
            {
              v48 = 0;
              v49 = 4;
              goto LABEL_28;
            }
            v48 = v47 & 0xFFFFFFFFFFFFFFFCLL;
            v49 = (v47 & 0xFFFFFFFFFFFFFFFCLL) + 4;
            v122 = v46 + 12;
            v123 = v47 & 0xFFFFFFFFFFFFFFFCLL;
            v124 = v480;
            do
            {
              v126 = *(v124 - 2);
              v125 = *(v124 - 1);
              v128 = *v124;
              v127 = v124[1];
              v124 += 4;
              *(v122 - 2) = v126;
              *(v122 - 1) = v125;
              *v122 = v128;
              v122[1] = v127;
              v122 += 4;
              v123 -= 4;
            }
            while (v123);
            if (v47 == v48)
            {
LABEL_46:
              v84 = sub_1B1D1E2C8(0);
              v85 = *(_QWORD *)(v35 + 16);
              v86 = v85 + OBJC_IVAR____TtC3VFX13EntityManager_lock;
              v87 = *(os_unfair_lock_s **)(v85 + OBJC_IVAR____TtC3VFX13EntityManager_lock + 24);
              swift_retain();
              os_unfair_lock_lock(v87);
              swift_bridgeObjectRetain();
              v88 = sub_1B1DAD870((uint64_t)v46, v49, v84);
              v90 = v89;
              swift_bridgeObjectRelease();
              v91 = sub_1B1DA8760(v88);
              if ((v92 & 1) != 0 || (v93 = sub_1B1DA87D4(v90, v91), v94 = v93, (v93 & 0x100000000) != 0))
              {
                v95 = sub_1B1DC9E90(v46, v49);
                swift_bridgeObjectRetain();
                v94 = sub_1B1DA8838(v88, v90, v95, v84);
                swift_release();
                swift_bridgeObjectRelease();
              }
              goto LABEL_81;
            }
          }
LABEL_28:
          v51 = v47 - v48;
          v52 = (__int128 *)(v50 + 16 * v48);
          do
          {
            v53 = *v52++;
            *(_OWORD *)&v46[2 * v49++] = v53;
            --v51;
          }
          while (v51);
          goto LABEL_46;
        }
        v639 = v493;
        v69 = (_OWORD *)v492;
        *(_OWORD *)v492 = 0u;
        v69[1] = 0u;
        v69[2] = 0u;
        v69[3] = 0u;
        v69[4] = 0u;
        v640[80] = 3;
        *(double *)&v70 = MEMORY[0x1E0C80A78](v33, v34);
        *(&v455 - 10) = (uint64_t)&v639;
        *((_DWORD *)&v455 - 18) = v499;
        *((_OWORD *)&v455 - 4) = v70;
        *((_OWORD *)&v455 - 3) = v71;
        *((_OWORD *)&v455 - 2) = v72;
        *((_OWORD *)&v455 - 1) = v73;
        v74 = *(_QWORD *)(v35 + 32);
        ecs_stack_allocator_push_snapshot(v74);
        v75 = sub_1B1C7A1C4(v37);
        v76 = ecs_stack_allocator_allocate(v74, 16 * v75 + 64, 8);
        *v76 = &type metadata for DebugInfoWireframePrimitive;
        v76[1] = &off_1E63B2990;
        v76[2] = &type metadata for DebugInfoColor;
        v76[3] = &off_1E637ED40;
        v76[4] = &type metadata for WorldTransform;
        v76[5] = &off_1E6382C00;
        v76[6] = &type metadata for Beamed;
        v76[7] = &off_1E63BB000;
        v77 = sub_1B1C7A1C4(v37);
        *(_QWORD *)&v502 = &v455;
        *(_QWORD *)&v495 = &v455 - 12;
        if (v77)
          break;
        v79 = 4;
LABEL_56:
        v105 = sub_1B1D1E2C8(0);
        v85 = *(_QWORD *)(v35 + 16);
        v86 = v85 + OBJC_IVAR____TtC3VFX13EntityManager_lock;
        v106 = *(os_unfair_lock_s **)(v85 + OBJC_IVAR____TtC3VFX13EntityManager_lock + 24);
        swift_retain();
        os_unfair_lock_lock(v106);
        swift_bridgeObjectRetain();
        v107 = sub_1B1DAD870((uint64_t)v76, v79, v105);
        v109 = v108;
        swift_bridgeObjectRelease();
        v110 = *(_QWORD **)(v85 + 72);
        v111 = v110[2];
        if (v111)
        {
          if (*(_QWORD *)(v110[4] + 144) == v107)
          {
            v112 = 0;
            goto LABEL_59;
          }
          if (v111 != 1)
          {
            if (*(_QWORD *)(v110[5] + 144) == v107)
            {
              v112 = 1;
              goto LABEL_59;
            }
            v143 = v111 - 2;
            if (v143)
            {
              v144 = 0;
              v145 = v110 + 6;
              while (*(_QWORD *)(v145[v144] + 144) != v107)
              {
                if (v143 == ++v144)
                  goto LABEL_80;
              }
              v112 = v144 + 2;
LABEL_59:
              v113 = sub_1B1DA87D4(v109, v112);
              v94 = v113;
              if ((v113 & 0x100000000) == 0)
                goto LABEL_81;
            }
          }
        }
LABEL_80:
        v117 = sub_1B1DC9E90(v76, v79);
        swift_bridgeObjectRetain();
        v94 = sub_1B1DA8838(v107, v109, v117, v105);
        swift_release();
        swift_bridgeObjectRelease();
LABEL_81:
        v118 = *(_QWORD *)(*(_QWORD *)(v85 + 80) + 8 * v94 + 32);
        v119 = *(os_unfair_lock_s **)(v86 + 24);
        swift_retain();
        os_unfair_lock_unlock(v119);
        swift_release();
        v575[0].i8[0] = 1;
        v35 = v504;
        sub_1B1F10B7C(v118, 1, 1, 0x100000000uLL, v504, (uint64_t)sub_1B200F9F0, v495);
        v37 = v503;
        v120 = v498;
        v121 = v505;
        swift_bridgeObjectRelease();
        swift_release();
        v33 = ecs_stack_allocator_pop_snapshot(*(_QWORD *)(v35 + 32));
        v36 = v121 + 1;
        if (v36 == v120)
          goto LABEL_107;
      }
      if (v77 >= 0x12)
      {
        v78 = 0;
        v116 = 2 * (v77 - 1);
        if (&v76[v116 + 8] >= v76 + 8)
        {
          v80 = (uint64_t)v496;
          if (&v76[v116 + 9] < v76 + 9 || (v77 - 1) >> 60)
          {
            v79 = 4;
          }
          else if (v76 + 8 >= &v496[2 * v77] || v496 >= &v76[2 * v77 + 8])
          {
            v78 = v77 & 0xFFFFFFFFFFFFFFFCLL;
            v79 = (v77 & 0xFFFFFFFFFFFFFFFCLL) + 4;
            v136 = v76 + 12;
            v137 = v77 & 0xFFFFFFFFFFFFFFFCLL;
            v138 = v480;
            do
            {
              v140 = *(v138 - 2);
              v139 = *(v138 - 1);
              v142 = *v138;
              v141 = v138[1];
              v138 += 4;
              *(v136 - 2) = v140;
              *(v136 - 1) = v139;
              *v136 = v142;
              v136[1] = v141;
              v136 += 4;
              v137 -= 4;
            }
            while (v137);
            if (v77 == v78)
              goto LABEL_56;
          }
          else
          {
            v78 = 0;
            v79 = 4;
          }
          goto LABEL_42;
        }
      }
      else
      {
        v78 = 0;
      }
      v79 = 4;
      v80 = (uint64_t)v496;
LABEL_42:
      v81 = v77 - v78;
      v82 = (__int128 *)(v80 + 16 * v78);
      do
      {
        v83 = *v82++;
        *(_OWORD *)&v76[2 * v79++] = v83;
        --v81;
      }
      while (v81);
      goto LABEL_56;
    }
LABEL_107:
    v556[0] = v553;
    v556[1] = v554;
    v557 = v555;
    sub_1B1F05D48(v485, (unsigned __int16 **)v556, (uint64_t)v634);
    v148 = v481;
    sub_1B1F03804(v481);
    ecs_stack_allocator_pop_snapshot((uint64_t)v483);
    if ((v484 & 1) != 0)
    {
      os_unfair_lock_unlock(*((os_unfair_lock_t *)v148 + 43));
      os_unfair_lock_unlock(*((os_unfair_lock_t *)v148 + 47));
    }
    swift_release();
    v20 = v482 + 1;
  }
  while (v482 + 1 != v479);
  sub_1B19ED720((uint64_t)v506);
  sub_1B1A086DC(v508, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
  sub_1B1A086DC(v508, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
LABEL_185:
  v3 = v463;
LABEL_186:
  if (!(_DWORD)v475)
    goto LABEL_254;
  v252 = k;
  if (qword_1ED4B7DB8 != -1)
    swift_once();
  v628[9] = qword_1ED4D09F8;
  v629 = 0;
  v630 = 2;
  v632 = 2;
  v631 = 0;
  v633 = 0;
  swift_retain();
  sub_1B1B17778(1, 1, (uint64_t)v509);
  swift_release();
  v566[0] = v509[0];
  v566[1] = v509[1];
  v567 = v510;
  sub_1B1E8FCE4(v3, (uint64_t)v566, 0x200000000, v511);
  sub_1B1A18378((uint64_t)v511, (uint64_t)v536, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (!*(_QWORD *)&v536[0])
  {
    sub_1B19ED720((uint64_t)v509);
    goto LABEL_253;
  }
  v543 = v536[0];
  v544 = v536[1];
  v545 = v537;
  if (v542 <= 0 || (v467 = v539) == 0)
  {
    sub_1B19ED720((uint64_t)v509);
    sub_1B1A086DC(v511, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
    goto LABEL_253;
  }
  v466 = v538;
  LODWORD(v482) = *(unsigned __int8 *)(v540 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
  v464 = v541 + 64;
  v465 = v541 + 48;
  *(_QWORD *)&v493 = v617;
  v253 = v503;
  *(_QWORD *)&v497 = v503 + 32;
  v471 = &v612;
  v472 = &v618;
  v480 = (__int128 *)*((_QWORD *)v541 + 4);
  v481 = v541;
  v469 = &v609;
  v470 = &v611;
  v468 = &v610;
  v488 = v627;
  v461 = &v622;
  v462 = v628;
  v459 = &v619;
  v460 = &v621;
  v458 = &v620;
  swift_retain();
  swift_retain();
  swift_retain();
  v254 = 0;
  v473 = (__int128 *)(v253 + 64);
  v478 = xmmword_1B22821D0;
  v490 = xmmword_1B2244E20;
  v476 = vdupq_n_s64(0x3F00000000000000uLL);
  v477 = xmmword_1B227E550;
  v489 = xmmword_1B22AD370;
  v475 = xmmword_1B22AD390;
  v474 = xmmword_1B22AD380;
  v495 = xmmword_1B2244D90;
  v494 = xmmword_1B22AD360;
  k = v252;
  while (2)
  {
    v255 = (unsigned int *)(v466 + 48 * v254);
    v256 = *v255;
    v501.i64[0] = v255[1];
    v257 = (uint64_t *)*((_QWORD *)v255 + 2);
    v258 = *((_QWORD *)v255 + 3);
    v259 = (char *)*((_QWORD *)v255 + 5);
    v496 = (uint64_t *)*((_QWORD *)v255 + 4);
    v491 = v259;
    v479 = v254;
    v260 = k;
    if ((_DWORD)v482)
    {
      v261 = (os_unfair_lock_s *)*((_QWORD *)v491 + 47);
      swift_retain();
      v259 = v491;
      os_unfair_lock_lock(v261);
      os_unfair_lock_lock(*((os_unfair_lock_t *)v259 + 43));
    }
    else
    {
      swift_retain();
    }
    ecs_stack_allocator_push_snapshot((uint64_t)v480);
    sub_1B1A18378((uint64_t)v465, (uint64_t)v608, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
    v262 = v481;
    v263 = *((_QWORD *)v481 + 4);
    v264 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v259 + 5) + 16) + 32) + 16) + 1;
    swift_retain();
    *((_QWORD *)v262 + 6) = ecs_stack_allocator_allocate(v263, 48 * v264, 8);
    *((_QWORD *)v262 + 7) = v264;
    v265 = v464;
    v464[1] = 0;
    v265[2] = 0;
    *v265 = 0;
    swift_release();
    v266 = (uint64_t)v496;
    *(_QWORD *)&v505 = sub_1B1A12038((uint64_t)&type metadata for EmitterShape, (uint64_t)&off_1E63752C8, v257, v258, (uint64_t)v496, (uint64_t)v262);
    v267 = sub_1B1A12038((uint64_t)&type metadata for WorldTransform, (uint64_t)&off_1E6382C00, v257, v258, v266, (uint64_t)v262);
    *(_QWORD *)&v502 = v267;
    if (!v257)
    {
      v311 = v504;
      k = v260;
      if ((_DWORD)v256 == v501.i32[0])
        goto LABEL_226;
      v313 = v503;
      while (1)
      {
        v314 = (unsigned int *)(v505 + 224 * v256);
        v315 = *v314;
        if (*((_BYTE *)v314 + 4) == 1)
          __asm { BR              X10 }
        v316 = v495;
        HIDWORD(v316) = HIDWORD(v492);
        v623[1] = 0;
        v623[0] = 0;
        v500 = v316;
        v624 = v316;
        v625 = v315 | 0x3F00000000000000;
        v626 = v494;
        v317 = v488;
        *(_OWORD *)v488 = 0u;
        *((_OWORD *)v317 + 1) = 0u;
        *((_QWORD *)v317 + 4) = 0;
        v627[40] = 9;
        *(double *)&v318 = MEMORY[0x1E0C80A78](v267, v268);
        *(&v455 - 10) = (uint64_t)v623;
        *((_OWORD *)&v455 - 4) = v318;
        *((_OWORD *)&v455 - 3) = v319;
        *((_OWORD *)&v455 - 2) = v320;
        *((_OWORD *)&v455 - 1) = v321;
        v322 = *(_QWORD *)(v311 + 32);
        ecs_stack_allocator_push_snapshot(v322);
        v323 = sub_1B1C7A1C4(v313) + 3;
        v324 = ecs_stack_allocator_allocate(v322, 16 * v323, 8);
        *v324 = &type metadata for DebugInfoWireframePrimitive;
        v324[1] = &off_1E63B2990;
        v324[2] = &type metadata for WorldTransform;
        v324[3] = &off_1E6382C00;
        v324[4] = &type metadata for Beamed;
        v324[5] = &off_1E63BB000;
        v325 = sub_1B1C7A1C4(v313);
        if (v325)
          break;
        v327 = 3;
LABEL_240:
        v331 = sub_1B1D1E2C8(0);
        swift_retain();
        v332 = sub_1B217ED50(v324, v323, v327, v331);
        v311 = v504;
        swift_release();
        v575[0].i8[0] = 1;
        sub_1B1F0FE90(v332, 1, 1, 0x100000000uLL, v311, (uint64_t)sub_1B200F9DC, (uint64_t)(&v455 - 12));
        swift_bridgeObjectRelease();
        swift_release();
        v267 = ecs_stack_allocator_pop_snapshot(*(_QWORD *)(v311 + 32));
        v492 = v500;
        v313 = v503;
        if (++v256 == v501.i64[0])
          goto LABEL_226;
      }
      if (v325 >= 0x12)
      {
        v326 = 0;
        v333 = 2 * (v325 - 1);
        if (&v324[v333 + 6] < v324 + 6 || &v324[v333 + 7] < v324 + 7 || (v325 - 1) >> 60)
          goto LABEL_235;
        if ((unint64_t)(v324 + 6) >= (unint64_t)v497 + 16 * v325
          || (unint64_t)v497 >= (unint64_t)&v324[2 * v325 + 6])
        {
          v326 = v325 & 0xFFFFFFFFFFFFFFFCLL;
          v327 = v325 | 3;
          v334 = v324 + 10;
          v335 = v325 & 0xFFFFFFFFFFFFFFFCLL;
          v336 = v473;
          do
          {
            v338 = *(v336 - 2);
            v337 = *(v336 - 1);
            v340 = *v336;
            v339 = v336[1];
            v336 += 4;
            *(v334 - 2) = v338;
            *(v334 - 1) = v337;
            *v334 = v340;
            v334[1] = v339;
            v334 += 4;
            v335 -= 4;
          }
          while (v335);
          if (v325 == v326)
            goto LABEL_240;
          goto LABEL_236;
        }
      }
      v326 = 0;
LABEL_235:
      v327 = 3;
LABEL_236:
      v328 = v325 - v326;
      v329 = (__int128 *)(v497 + 16 * v326);
      do
      {
        v330 = *v329++;
        *(_OWORD *)&v324[2 * v327++] = v330;
        --v328;
      }
      while (v328);
      goto LABEL_240;
    }
    v269 = v504;
    k = v260;
    if (v266)
    {
      v270 = 0;
      v271 = v503;
      while (1)
      {
        v272 = (unsigned int *)(v505 + 224 * v270);
        v273 = *v272;
        if (*((_BYTE *)v272 + 4) == 1)
          __asm { BR              X10 }
        *(_QWORD *)&v500 = k;
        v274 = v495;
        HIDWORD(v274) = HIDWORD(v499);
        v613[1] = 0;
        v613[0] = 0;
        v499 = v274;
        v614 = v274;
        v615 = v273 | 0x3F00000000000000;
        v616 = v494;
        v275 = v493;
        *(_OWORD *)v493 = 0u;
        *(_OWORD *)(v275 + 16) = 0u;
        *(_QWORD *)(v275 + 32) = 0;
        v617[40] = 9;
        *(double *)&v276 = MEMORY[0x1E0C80A78](v267, v268);
        *(&v455 - 10) = (uint64_t)v613;
        *((_OWORD *)&v455 - 4) = v276;
        *((_OWORD *)&v455 - 3) = v277;
        *((_OWORD *)&v455 - 2) = v278;
        *((_OWORD *)&v455 - 1) = v279;
        v280 = *(_QWORD *)(v269 + 32);
        ecs_stack_allocator_push_snapshot(v280);
        v281 = sub_1B1C7A1C4(v271);
        v282 = ecs_stack_allocator_allocate(v280, 16 * v281 + 48, 8);
        *v282 = &type metadata for DebugInfoWireframePrimitive;
        v282[1] = &off_1E63B2990;
        v282[2] = &type metadata for WorldTransform;
        v282[3] = &off_1E6382C00;
        v282[4] = &type metadata for Beamed;
        v282[5] = &off_1E63BB000;
        v283 = sub_1B1C7A1C4(v271);
        v501.i64[0] = v270;
        *(_QWORD *)&v498 = &v455;
        if (v283)
          break;
        v285 = 3;
LABEL_211:
        v289 = sub_1B1D1E2C8(0);
        v290 = *(_QWORD *)(v269 + 16);
        v291 = v290 + OBJC_IVAR____TtC3VFX13EntityManager_lock;
        v292 = *(os_unfair_lock_s **)(v290 + OBJC_IVAR____TtC3VFX13EntityManager_lock + 24);
        swift_retain();
        os_unfair_lock_lock(v292);
        swift_bridgeObjectRetain();
        v293 = sub_1B1DAD870((uint64_t)v282, v285, v289);
        v295 = v294;
        swift_bridgeObjectRelease();
        v296 = sub_1B1DA8760(v293);
        if ((v297 & 1) != 0 || (v298 = sub_1B1DA87D4(v295, v296), v299 = v298, (v298 & 0x100000000) != 0))
        {
          v300 = sub_1B1DC9E90(v282, v285);
          swift_bridgeObjectRetain();
          v299 = sub_1B1DA8838(v293, v295, v300, v289);
          swift_release();
          swift_bridgeObjectRelease();
        }
        v301 = *(_QWORD *)(*(_QWORD *)(v290 + 80) + 8 * v299 + 32);
        v302 = *(_QWORD *)(v291 + 24);
        swift_retain();
        os_unfair_lock_unlock((os_unfair_lock_t)v302);
        swift_release();
        v575[0].i8[0] = 1;
        v269 = v504;
        k = v500;
        sub_1B1F0FE90(v301, 1, 1, 0x100000000uLL, v504, (uint64_t)sub_1B200F9DC, (uint64_t)(&v455 - 12));
        if (k)
        {
          swift_bridgeObjectRelease();
          swift_release();
          ecs_stack_allocator_pop_snapshot(*(_QWORD *)(v269 + 32));
          __break(1u);
          swift_bridgeObjectRelease();
          swift_release();
          ecs_stack_allocator_pop_snapshot(*(_QWORD *)(v302 + 32));
          __break(1u);
          JUMPOUT(0x1B200F9D0);
        }
        swift_bridgeObjectRelease();
        swift_release();
        v267 = ecs_stack_allocator_pop_snapshot(*(_QWORD *)(v269 + 32));
        v271 = v503;
        v270 = v501.i64[0] + 1;
        if ((uint64_t *)(v501.i64[0] + 1) == v496)
          goto LABEL_226;
      }
      if (v283 < 0x12)
      {
LABEL_205:
        v284 = 0;
        goto LABEL_206;
      }
      v284 = 0;
      v303 = 2 * (v283 - 1);
      if (&v282[v303 + 6] < v282 + 6 || &v282[v303 + 7] < v282 + 7 || (v283 - 1) >> 60)
      {
LABEL_206:
        v285 = 3;
      }
      else
      {
        if ((unint64_t)(v282 + 6) < (unint64_t)v497 + 16 * v283
          && (unint64_t)v497 < (unint64_t)&v282[2 * v283 + 6])
        {
          goto LABEL_205;
        }
        v284 = v283 & 0xFFFFFFFFFFFFFFFCLL;
        v285 = v283 | 3;
        v304 = v282 + 10;
        v305 = v283 & 0xFFFFFFFFFFFFFFFCLL;
        v306 = v473;
        do
        {
          v308 = *(v306 - 2);
          v307 = *(v306 - 1);
          v310 = *v306;
          v309 = v306[1];
          v306 += 4;
          *(v304 - 2) = v308;
          *(v304 - 1) = v307;
          *v304 = v310;
          v304[1] = v309;
          v304 += 4;
          v305 -= 4;
        }
        while (v305);
        if (v283 == v284)
          goto LABEL_211;
      }
      v286 = v283 - v284;
      v287 = (__int128 *)(v497 + 16 * v284);
      do
      {
        v288 = *v287++;
        *(_OWORD *)&v282[2 * v285++] = v288;
        --v286;
      }
      while (v286);
      goto LABEL_211;
    }
LABEL_226:
    v558[0] = v543;
    v558[1] = v544;
    v559 = v545;
    sub_1B1F05D48(v481, (unsigned __int16 **)v558, (uint64_t)v608);
    v312 = v491;
    sub_1B1F03804(v491);
    ecs_stack_allocator_pop_snapshot((uint64_t)v480);
    if ((v482 & 1) != 0)
    {
      os_unfair_lock_unlock(*((os_unfair_lock_t *)v312 + 43));
      os_unfair_lock_unlock(*((os_unfair_lock_t *)v312 + 47));
    }
    swift_release();
    v254 = v479 + 1;
    if (v479 + 1 != v467)
      continue;
    break;
  }
  sub_1B19ED720((uint64_t)v509);
  sub_1B1A086DC(v511, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
  sub_1B1A086DC(v511, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
LABEL_253:
  v3 = v463;
LABEL_254:
  if (v456)
  {
    if (qword_1ED4B7DB8 != -1)
      swift_once();
    v602 = qword_1ED4D09F8;
    v603 = 0;
    v604 = 2;
    v605 = 0;
    v606 = 2;
    v607 = 0;
    swift_retain();
    sub_1B1B179A4(1, 1, (uint64_t)v512);
    swift_release();
    v564[0] = v512[0];
    v564[1] = v512[1];
    v565 = v513;
    sub_1B1E8FCE4(v3, (uint64_t)v564, 0x200000000, v514);
    sub_1B1A18378((uint64_t)v514, (uint64_t)v529, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
    if (*(_QWORD *)&v529[0])
    {
      if (v535 > 0 && (v486.i64[0] = v532) != 0)
      {
        *(_QWORD *)&v490 = *((_QWORD *)v534 + 4);
        LODWORD(v489) = *(unsigned __int8 *)(v533 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
        v560[0] = v529[0];
        v560[1] = v529[1];
        v485 = v531;
        v561 = v530;
        v484 = (uint64_t)(v534 + 48);
        v491 = v534;
        v483 = v534 + 64;
        *(_QWORD *)&v499 = &v594;
        v496 = &v599;
        swift_retain();
        swift_retain();
        swift_retain();
        v341 = 0;
        v342 = v503;
        do
        {
          v343 = (unsigned int *)&v485[6 * (_QWORD)v341];
          v344 = *v343;
          *(_QWORD *)&v492 = v343[1];
          v346 = (uint64_t *)*((_QWORD *)v343 + 2);
          v345 = *((_QWORD *)v343 + 3);
          v347 = *((_QWORD *)v343 + 5);
          *(_QWORD *)&v493 = *((_QWORD *)v343 + 4);
          v488 = v341;
          *(_QWORD *)&v495 = v344;
          *(_QWORD *)&v500 = k;
          if ((_DWORD)v489)
          {
            v348 = *(os_unfair_lock_s **)(v347 + 376);
            swift_retain_n();
            os_unfair_lock_lock(v348);
            os_unfair_lock_lock(*(os_unfair_lock_t *)(v347 + 344));
            swift_release();
          }
          else
          {
            swift_retain();
          }
          ecs_stack_allocator_push_snapshot(v490);
          sub_1B1A18378(v484, (uint64_t)v591, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
          v349 = v491;
          v350 = *((_QWORD *)v491 + 4);
          v351 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v347 + 40) + 16) + 32) + 16) + 1;
          swift_retain();
          *((_QWORD *)v349 + 6) = ecs_stack_allocator_allocate(v350, 48 * v351, 8);
          *((_QWORD *)v349 + 7) = v351;
          v352 = v483;
          v483[1] = 0;
          v352[2] = 0;
          *v352 = 0;
          swift_release();
          v353 = v345;
          v354 = v345;
          v355 = v493;
          v356 = sub_1B1A12038((uint64_t)&type metadata for Skeleton, (uint64_t)&off_1E63C2C18, v346, v353, v493, (uint64_t)v349);
          v487 = (char *)v347;
          sub_1B1A12038((uint64_t)&type metadata for WorldTransform, (uint64_t)&off_1E6382C00, v346, v354, v355, (uint64_t)v349);
          *(_QWORD *)&v494 = v356;
          if (v346)
          {
            k = v500;
            if (v355)
            {
              v357 = v355;
              for (i = 0; i != v357; ++i)
              {
                v359 = *(_QWORD *)(v356 + 40 * i);
                if (v359)
                {
                  v360 = sub_1B1C7A1C4(*(_QWORD *)(v359 + 16));
                  if (v360)
                  {
                    v361 = v360;
                    *(_QWORD *)&v495 = i;
                    v362 = (_QWORD *)(v356 + 40 * i + 16);
                    memset(v595, 0, sizeof(v595));
                    v596 = 12;
                    swift_retain();
                    v363 = 0;
                    for (j = 0; j != v361; ++j)
                    {
                      v365 = (__n128 *)(*v362 + v363);
                      v366 = v365[2];
                      v367 = v365[3];
                      v368 = v365[4];
                      v369 = v365[5];
                      v575[0].i8[0] = 1;
                      v370 = v342;
                      v371 = v342;
                      v372 = v504;
                      v505 = (__int128)v369;
                      sub_1B217F044(v370, 0x100000000uLL, v504, v595, v366, v367, v368, v369);
                      v373 = *(_QWORD *)(*(_QWORD *)(v359 + 40) + 8 * j + 32);
                      if (v373 != -1)
                      {
                        v374 = *(_OWORD *)(*v362 + (v373 << 6) + 80);
                        v375 = (float32x4_t)v374;
                        v375.i32[3] = v501.i32[3];
                        v376 = (float32x4_t)v505;
                        v376.i32[3] = HIDWORD(v502);
                        v505 = (__int128)v376;
                        HIDWORD(v374) = 1.0;
                        v501 = v375;
                        v502 = v374;
                        v377 = vsubq_f32(v376, v375);
                        v377.i32[3] = 0;
                        v500 = (__int128)v377;
                        v378 = sub_1B1B4D2D0(0, 255, 0);
                        v592[0] = v502;
                        v592[1] = v500;
                        v593 = 4;
                        v379 = (_OWORD *)v499;
                        *(_OWORD *)v499 = 0u;
                        v379[1] = 0u;
                        v379[2] = 0u;
                        *(_OWORD *)((char *)v379 + 41) = 0u;
                        v575[0].i8[0] = 1;
                        sub_1B217F570(v371, 0x100000000uLL, v372, v592, v378);
                        v502 = v505;
                      }
                      v363 += 64;
                      v342 = v503;
                    }
                    swift_release();
                    v356 = v494;
                    v357 = v493;
                    i = v495;
                  }
                }
              }
            }
          }
          else
          {
            v380 = v495;
            v381 = v492;
            for (k = v500; v380 != v381; ++v380)
            {
              v383 = *(_QWORD *)(v356 + 40 * v380);
              if (v383)
              {
                v384 = sub_1B1C7A1C4(*(_QWORD *)(v383 + 16));
                if (v384)
                {
                  v385 = v384;
                  *(_QWORD *)&v495 = v380;
                  v386 = (_QWORD *)(v356 + 40 * v380 + 16);
                  memset(v600, 0, sizeof(v600));
                  v601 = 12;
                  swift_retain();
                  v387 = 0;
                  for (m = 0; m != v385; ++m)
                  {
                    v389 = (__n128 *)(*v386 + v387);
                    v390 = v389[2];
                    v391 = v389[3];
                    v392 = v389[4];
                    v393 = v389[5];
                    v575[0].i8[0] = 1;
                    v394 = v342;
                    v395 = v342;
                    v396 = v504;
                    v505 = (__int128)v393;
                    sub_1B217F044(v394, 0x100000000uLL, v504, v600, v390, v391, v392, v393);
                    v397 = *(_QWORD *)(*(_QWORD *)(v383 + 40) + 8 * m + 32);
                    if (v397 != -1)
                    {
                      v398 = *(_OWORD *)(*v386 + (v397 << 6) + 80);
                      v399 = (float32x4_t)v398;
                      v399.i32[3] = HIDWORD(v497);
                      v500 = (__int128)v399;
                      v400 = (float32x4_t)v505;
                      v400.i32[3] = HIDWORD(v498);
                      v505 = (__int128)v400;
                      HIDWORD(v398) = 1.0;
                      v401 = vsubq_f32(v400, v399);
                      v401.i32[3] = 0;
                      v497 = (__int128)v401;
                      v498 = v398;
                      v402 = sub_1B1B4D2D0(0, 255, 0);
                      v597[0] = v498;
                      v597[1] = v497;
                      v598 = 4;
                      v403 = v496;
                      *(_OWORD *)v496 = 0u;
                      *((_OWORD *)v403 + 1) = 0u;
                      *((_OWORD *)v403 + 2) = 0u;
                      *(_OWORD *)((char *)v403 + 41) = 0u;
                      v575[0].i8[0] = 1;
                      sub_1B217F570(v395, 0x100000000uLL, v396, v597, v402);
                      v497 = v500;
                      v498 = v505;
                    }
                    v387 += 64;
                    v342 = v503;
                  }
                  swift_release();
                  v356 = v494;
                  v380 = v495;
                  v381 = v492;
                }
              }
            }
          }
          sub_1B1F05D48(v491, (unsigned __int16 **)v560, (uint64_t)v591);
          v382 = v487;
          sub_1B1F03804(v487);
          ecs_stack_allocator_pop_snapshot(v490);
          if ((v489 & 1) != 0)
          {
            os_unfair_lock_unlock(*((os_unfair_lock_t *)v382 + 43));
            os_unfair_lock_unlock(*((os_unfair_lock_t *)v382 + 47));
          }
          swift_release();
          v341 = v488 + 1;
        }
        while (v488 + 1 != (_BYTE *)v486.i64[0]);
        sub_1B19ED720((uint64_t)v512);
        sub_1B1A086DC(v514, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
        sub_1B1A086DC(v514, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
      }
      else
      {
        sub_1B19ED720((uint64_t)v512);
        sub_1B1A086DC(v514, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
      }
    }
    else
    {
      sub_1B19ED720((uint64_t)v512);
    }
    v3 = v463;
  }
  if (!v457)
    return (_QWORD *)swift_bridgeObjectRelease();
  if (qword_1ED4B7DB8 != -1)
    swift_once();
  v585 = qword_1ED4D09F8;
  v586 = 0;
  v587 = 2;
  v588 = 0;
  v589 = 2;
  v590 = 0;
  swift_retain();
  sub_1B1B17BD0(1, 1, (uint64_t)&v515);
  swift_release();
  v579 = v515;
  v580 = v516;
  v581 = v517;
  v582 = v518 | 1;
  v583 = v519;
  v584 = v520;
  sub_1B1E8FCE4(v3, (uint64_t)&v579, 0x200000000, v521);
  sub_1B1A18378((uint64_t)v521, (uint64_t)v522, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (!*(_QWORD *)&v522[0])
  {
    sub_1B19ED720((uint64_t)&v515);
    return (_QWORD *)swift_bridgeObjectRelease();
  }
  if (v528 > 0 && (v496 = (uint64_t *)v525) != 0)
  {
    v404 = (_QWORD *)v527;
    v405 = *(_QWORD *)(v527 + 32);
    v406 = *(unsigned __int8 *)(v526 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
    v562[0] = v522[0];
    v562[1] = v522[1];
    v563 = v523;
    v491 = (char *)(v527 + 48);
    *(_QWORD *)&v492 = v524;
    *(_QWORD *)&v490 = v527 + 64;
    swift_retain();
    swift_retain();
    swift_retain();
    v407 = 0;
    *(_QWORD *)&v495 = v404;
    *(_QWORD *)&v494 = v405;
    LODWORD(v493) = v406;
    do
    {
      v408 = (unsigned int *)(v492 + 48 * v407);
      *(_QWORD *)&v505 = *v408;
      v501.i64[0] = v408[1];
      v409 = (uint64_t *)*((_QWORD *)v408 + 2);
      v410 = *((_QWORD *)v408 + 3);
      v411 = *((_QWORD *)v408 + 4);
      v412 = *((_QWORD *)v408 + 5);
      *(_QWORD *)&v500 = k;
      *(_QWORD *)&v497 = v407;
      if ((v406 & 1) != 0)
      {
        v413 = *(os_unfair_lock_s **)(v412 + 376);
        swift_retain_n();
        os_unfair_lock_lock(v413);
        os_unfair_lock_lock(*(os_unfair_lock_t *)(v412 + 344));
        swift_release();
      }
      else
      {
        swift_retain();
      }
      ecs_stack_allocator_push_snapshot(v405);
      sub_1B1A18378((uint64_t)v491, (uint64_t)v570, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
      v414 = v404[4];
      v415 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v412 + 40) + 16) + 32) + 16) + 1;
      swift_retain();
      v404[6] = ecs_stack_allocator_allocate(v414, 48 * v415, 8);
      v404[7] = v415;
      v416 = (_QWORD *)v490;
      *(_QWORD *)(v490 + 8) = 0;
      v416[2] = 0;
      *v416 = 0;
      swift_release();
      v417 = v411;
      v418 = sub_1B1A12038((uint64_t)&type metadata for ForceField, (uint64_t)&off_1E636DA50, v409, v410, v411, (uint64_t)v404);
      v419 = sub_1B1A12038((uint64_t)&type metadata for WorldTransform, (uint64_t)&off_1E6382C00, v409, v410, v417, (uint64_t)v404);
      *(_QWORD *)&v502 = v412;
      if (v409)
      {
        if (v417)
        {
          v420 = (uint64_t *)(v419 + 32);
          do
          {
            *(_QWORD *)&v505 = v417;
            v422 = *(float32x4_t *)(v418 + 64);
            v571[5] = *(float32x4_t *)(v418 + 80);
            v423 = *(_OWORD *)(v418 + 112);
            v571[6] = *(float32x4_t *)(v418 + 96);
            v572[0] = v423;
            *(_OWORD *)((char *)v572 + 12) = *(_OWORD *)(v418 + 124);
            v424 = *(float32x4_t *)(v418 + 48);
            v571[2] = *(float32x4_t *)(v418 + 32);
            v571[3] = v424;
            v571[4] = v422;
            v425 = *(float32x4_t *)(v418 + 16);
            v571[0] = *(float32x4_t *)v418;
            v571[1] = v425;
            v426 = *(v420 - 4);
            v427 = *(v420 - 3);
            v428 = *(v420 - 2);
            v429 = *(v420 - 1);
            v431 = *v420;
            v430 = v420[1];
            v433 = v420[2];
            v432 = v420[3];
            v434 = *(_QWORD *)(*(_QWORD *)(v502 + 40) + 16);
            v435 = *(_QWORD *)(v434 + 128);
            if (*(_QWORD *)(v435 + 16))
            {
              *(_QWORD *)&v498 = v420[2];
              *(_QWORD *)&v499 = v430;
              v501.i64[0] = v432;
              v436 = sub_1B1DC3AC8((uint64_t)&type metadata for Selected);
              v421 = (v437 & 1) != 0
                  && *(_QWORD *)(*(_QWORD *)(v434 + 24) + 16 * *(_QWORD *)(*(_QWORD *)(v435 + 56) + 8 * v436) + 32) == (_QWORD)&type metadata for Selected;
              v432 = v501.i64[0];
              v430 = v499;
              v433 = v498;
            }
            else
            {
              v421 = 0;
            }
            v573[0] = v426;
            v573[1] = v427;
            v573[2] = v428;
            v573[3] = v429;
            v573[4] = v431;
            v573[5] = v430;
            v573[6] = v433;
            v573[7] = v432;
            v574 = 0;
            sub_1B1B445DC(v571, (uint64_t)v573, v421, v504, v503);
            v420 += 8;
            v418 += 144;
            v417 = v505 - 1;
          }
          while ((_QWORD)v505 != 1);
        }
      }
      else if ((_DWORD)v505 != v501.i32[0])
      {
        v439 = v501.i64[0] - v505;
        v440 = (uint64_t *)(v419 + ((_QWORD)v505 << 6) + 32);
        v441 = v418 + 144 * v505;
        do
        {
          v575[5] = *(float32x4_t *)(v441 + 80);
          v575[6] = *(float32x4_t *)(v441 + 96);
          v576[0] = *(_OWORD *)(v441 + 112);
          *(_OWORD *)((char *)v576 + 12) = *(_OWORD *)(v441 + 124);
          v575[1] = *(float32x4_t *)(v441 + 16);
          v575[2] = *(float32x4_t *)(v441 + 32);
          v575[3] = *(float32x4_t *)(v441 + 48);
          v575[4] = *(float32x4_t *)(v441 + 64);
          v575[0] = *(float32x4_t *)v441;
          v444 = *(v440 - 4);
          v443 = *(v440 - 3);
          v446 = *(v440 - 2);
          v445 = *(v440 - 1);
          v448 = *v440;
          v447 = v440[1];
          v450 = v440[2];
          v449 = v440[3];
          v451 = *(_QWORD *)(*(_QWORD *)(v502 + 40) + 16);
          v452 = *(_QWORD *)(v451 + 128);
          if (*(_QWORD *)(v452 + 16))
          {
            *(_QWORD *)&v498 = v440[3];
            *(_QWORD *)&v499 = v447;
            v501.i64[0] = v445;
            *(_QWORD *)&v505 = v443;
            v453 = sub_1B1DC3AC8((uint64_t)&type metadata for Selected);
            v442 = (v454 & 1) != 0
                && *(_QWORD *)(*(_QWORD *)(v451 + 24) + 16 * *(_QWORD *)(*(_QWORD *)(v452 + 56) + 8 * v453) + 32) == (_QWORD)&type metadata for Selected;
            v443 = v505;
            v445 = v501.i64[0];
            v447 = v499;
            v449 = v498;
          }
          else
          {
            v442 = 0;
          }
          v577[0] = v444;
          v577[1] = v443;
          v577[2] = v446;
          v577[3] = v445;
          v577[4] = v448;
          v577[5] = v447;
          v577[6] = v450;
          v577[7] = v449;
          v578 = 0;
          sub_1B1B445DC(v575, (uint64_t)v577, v442, v504, v503);
          v440 += 8;
          v441 += 144;
          --v439;
        }
        while (v439);
      }
      v404 = (_QWORD *)v495;
      k = v500;
      sub_1B1F05D48((_QWORD *)v495, (unsigned __int16 **)v562, (uint64_t)v570);
      v438 = v502;
      sub_1B1F03804((char *)v502);
      v405 = v494;
      ecs_stack_allocator_pop_snapshot(v494);
      LOBYTE(v406) = v493;
      if ((v493 & 1) != 0)
      {
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v438 + 344));
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v438 + 376));
      }
      swift_release();
      v407 = v497 + 1;
    }
    while ((uint64_t *)(v497 + 1) != v496);
  }
  else
  {
    swift_retain();
    swift_retain();
    swift_retain();
  }
  swift_bridgeObjectRelease();
  sub_1B19ED720((uint64_t)&v515);
  sub_1B1A086DC(v521, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
  return sub_1B1A086DC(v521, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
}

double sub_1B200F9DC(uint64_t a1, __n128 *a2, uint64_t a3)
{
  return sub_1B200FA04(a1, a2, a3);
}

double sub_1B200F9F0(uint64_t a1, _DWORD *a2, __n128 *a3, uint64_t a4)
{
  return sub_1B200FA24(a1, a2, a3, a4);
}

double sub_1B200FA04(uint64_t a1, __n128 *a2, uint64_t a3)
{
  __n128 *v3;
  double result;

  *(_QWORD *)&result = sub_1B200510C(a1, a2, v3[2], v3[3], v3[4], v3[5], a3, (__int128 *)v3[1].n128_u64[0]).n128_u64[0];
  return result;
}

double sub_1B200FA24(uint64_t a1, _DWORD *a2, __n128 *a3, uint64_t a4)
{
  __n128 *v4;
  double result;

  *(_QWORD *)&result = sub_1B2005008(a1, a2, a3, v4[2], v4[3], v4[4], v4[5], a4, (__int128 *)v4[1].n128_u64[0], v4[1].n128_i32[2]).n128_u64[0];
  return result;
}

void sub_1B200FA48(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  _BYTE v15[88];
  _BYTE v16[40];
  _QWORD v17[12];
  _OWORD v18[12];

  v1 = *(_QWORD *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_renderer);
  if (v1)
  {
    v2 = *(void **)(v1 + 392);
    if (v2)
    {
      v4 = v2;
      swift_retain();
      sub_1B1F9AEC4((uint64_t)v15);

      swift_retain();
      v14 = (id)sub_1B2062324(a1);
      swift_release();
      if (v14)
      {
        if (sub_1B1BA7B7C(0))
        {
          swift_unknownObjectRetain();
          v5 = sub_1B2229454();
          sub_1B1BA77BC(v5, v6, v14);
          swift_bridgeObjectRelease();
          sub_1B200062C(a1);
          v7 = sub_1B2001ED0();
          if (v7)
          {
            v9 = v7;
            v10 = sub_1B1C50E3C(v8);
            sub_1B1D83844(v9);
            v11 = sub_1B19F3C40(0, *(_QWORD *)(v10 + 16));
            v12 = MEMORY[0x1E0DEE9D8];
            v13 = sub_1B1E681FC(MEMORY[0x1E0DEE9D8]);
            sub_1B1E569A0(v10, v11, v12, v13, 0x200000000uLL, 0, 0, 2, (uint64_t)v16);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            sub_1B1E8FCE4(a1, (uint64_t)v16, 0x200000000, v17);
            sub_1B1A18378((uint64_t)v17, (uint64_t)v18, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
            if (*(_QWORD *)&v18[0])
            {
              v18[8] = v18[2];
              v18[9] = v18[3];
              v18[10] = v18[4];
              v18[11] = v18[5];
              v18[6] = v18[0];
              v18[7] = v18[1];
              sub_1B1BEAAFC(0);
              sub_1B19ED720((uint64_t)v16);
              swift_release();

              swift_unknownObjectRelease();
              sub_1B1A086DC(v17, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
            }
            else
            {
              sub_1B19ED720((uint64_t)v16);
              swift_release();

              swift_unknownObjectRelease();
            }
          }
          else
          {
            swift_release();

            swift_unknownObjectRelease();
          }
        }
        else
        {
          swift_release();

        }
      }
      else
      {
        swift_release();
      }
    }
  }
}

void sub_1B200FD08(uint64_t a1)
{
  uint64_t v1;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t ObjectType;
  void *v7;
  double v8;
  double v9;
  double v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  os_unfair_lock_s *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  id v39;
  void *v40;
  _QWORD *v41;
  void *v42;
  void *v43;
  double v44;
  double v45;
  double v46;
  uint64_t v47;
  void *v48;
  id v49;
  void *v50;
  _QWORD *v51;
  void *v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  __int128 v59;
  uint64_t v60;
  __int128 v61;
  uint64_t v62;
  __int128 v63;
  uint64_t v64;
  __int128 v65;
  uint64_t *v66;
  __int128 v67;
  uint64_t v68;
  __int128 v69;
  __int128 v70;
  _OWORD v71[3];
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  _OWORD v76[9];
  _BYTE v77[40];
  _OWORD v78[2];
  uint64_t v79;
  _OWORD v80[5];
  uint64_t v81;
  _QWORD v82[8];
  _OWORD v83[2];
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  _OWORD v90[2];
  uint64_t v91;
  _OWORD v92[2];
  uint64_t v93;
  _BYTE v94[40];
  _QWORD v95[14];
  int v96;
  char v97;
  uint64_t v98;
  char v99;
  uint64_t v100;

  v1 = *(_QWORD *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_renderer);
  if (v1)
  {
    swift_retain();
    swift_retain();
    v3 = (void *)sub_1B2062324(a1);
    swift_release();
    if (v3)
    {
      v4 = sub_1B2229454();
      sub_1B1BA77BC(v4, v5, v3);
      swift_bridgeObjectRelease();
      if (!**(_QWORD **)(v1 + 496))
      {
        if (*(_QWORD *)(v1 + 376))
        {
          v37 = swift_dynamicCastObjCProtocolConditional();
          if (v37)
          {
            v38 = (void *)v37;
            swift_unknownObjectRetain();
            v39 = objc_msgSend(v38, sel_renderCommandEncoder);
            *(_QWORD *)&v76[0] = 0x646F636E45627573;
            *((_QWORD *)&v76[0] + 1) = 0xEB000000005B7265;
            *(_QWORD *)&v69 = 0;
            sub_1B2229A0C();
            sub_1B2228890();
            swift_bridgeObjectRelease();
            sub_1B2228890();
            v40 = (void *)sub_1B2228728();
            swift_bridgeObjectRelease();
            objc_msgSend(v39, sel_setLabel_, v40);

            v41 = *(_QWORD **)(v1 + 496);
            *v41 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for RenderCommandEncoder()), sel_initWithEncoder_, v39);
            swift_unknownObjectRelease();
            swift_unknownObjectRelease();
            swift_unknownObjectRelease();
          }
        }
      }
      if (**(_QWORD **)(v1 + 496))
      {
        ObjectType = swift_getObjectType();
        v7 = (void *)swift_unknownObjectRetain();
        LODWORD(v8) = -998637568;
        LODWORD(v9) = 0;
        LODWORD(v10) = 0;
        objc_msgSend(v7, sel_setDepthBias_slopeScale_clamp_, v8, v9, v10);
        sub_1B1E125C8(a1, ObjectType);
        swift_unknownObjectRelease();
      }
      v11 = sub_1B1BA7B7C(0);
      if (v11)
      {
        v12 = (void *)v11;
        v52 = v3;
        v53 = v1;
        v13 = qword_1ED4B7DB8;
        swift_unknownObjectRetain();
        if (v13 != -1)
          swift_once();
        v95[13] = qword_1ED4D09F8;
        v96 = 0;
        v97 = 2;
        v98 = 0;
        v99 = 2;
        v100 = 0;
        swift_retain();
        sub_1B1E3C1C8(1, (uint64_t)v77);
        swift_release();
        sub_1B1CC6310(0, (unint64_t *)&qword_1ED4BAD30, (unint64_t *)&qword_1ED4B89D0, (uint64_t)&protocol descriptor for ClassComponent, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
        v14 = swift_allocObject();
        *(_OWORD *)(v14 + 16) = xmmword_1B226D240;
        *(_QWORD *)(v14 + 56) = &type metadata for DrawCallLayer;
        *(_QWORD *)(v14 + 64) = &off_1E6379C28;
        *(_BYTE *)(v14 + 32) = 2;
        sub_1B1E6892C(v78);
        swift_setDeallocating();
        sub_1B1A025A0(0, (unint64_t *)&qword_1ED4B89D0);
        swift_arrayDestroy();
        swift_deallocClassInstance();
        sub_1B19ED720((uint64_t)v77);
        v16 = *(_QWORD *)(*(_QWORD *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues)
                        + 8 * *(_QWORD *)thread_worker_index(v15)
                        + 8);
        memset(v95, 0, 40);
        memset((char *)v71 + 8, 0, 40);
        v72 = xmmword_1B2246910;
        v73 = 1uLL;
        *(_QWORD *)&v74 = 0;
        *((_QWORD *)&v74 + 1) = 1;
        v75 = 0uLL;
        LOBYTE(v71[0]) = 2;
        v17 = v53;
        *(_QWORD *)&v69 = v53;
        *((_QWORD *)&v69 + 1) = a1;
        *(_QWORD *)&v70 = v16;
        *((_QWORD *)&v70 + 1) = 1;
        sub_1B1BBF08C((uint64_t)v95, (uint64_t)v71 + 8);
        v76[6] = v73;
        v76[7] = v74;
        v76[8] = v75;
        v76[2] = v71[0];
        v76[3] = v71[1];
        v76[4] = v71[2];
        v76[5] = v72;
        v76[0] = v69;
        v76[1] = v70;
        swift_retain();
        sub_1B20621D0(v80);
        v65 = v80[1];
        v67 = v80[0];
        v61 = v80[3];
        v63 = v80[2];
        v59 = v80[4];
        v18 = v81;
        swift_release();
        LODWORD(v95[0]) = 0;
        *(_OWORD *)&v95[1] = v67;
        *(_OWORD *)&v95[3] = v65;
        *(_OWORD *)&v95[5] = v63;
        *(_OWORD *)&v95[7] = v61;
        *(_OWORD *)&v95[9] = v59;
        v95[11] = v18;
        v92[0] = v78[0];
        v92[1] = v78[1];
        v93 = v79;
        sub_1B1E8FCE4(a1, (uint64_t)v92, 0x200000000, v82);
        sub_1B1A18378((uint64_t)v82, (uint64_t)v83, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
        if (*(_QWORD *)&v83[0])
        {
          if (v89 >= 1)
          {
            v60 = v86;
            if (v86)
            {
              v19 = v88;
              v20 = v88[4];
              v21 = *(unsigned __int8 *)(v87 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
              v90[0] = v83[0];
              v90[1] = v83[1];
              v91 = v84;
              v55 = (uint64_t)(v88 + 6);
              v56 = v85;
              v54 = v88 + 8;
              swift_retain();
              swift_retain();
              swift_retain();
              v22 = 0;
              v23 = 0;
              v57 = v21;
              v58 = v20;
              do
              {
                v68 = v23;
                v24 = (unsigned int *)(v56 + 48 * v22);
                v25 = *v24;
                v26 = v24[1];
                v66 = (uint64_t *)*((_QWORD *)v24 + 2);
                v64 = *((_QWORD *)v24 + 3);
                v27 = *((_QWORD *)v24 + 5);
                v62 = *((_QWORD *)v24 + 4);
                if (v21)
                {
                  v28 = *(os_unfair_lock_s **)(v27 + 376);
                  swift_retain_n();
                  os_unfair_lock_lock(v28);
                  os_unfair_lock_lock(*(os_unfair_lock_t *)(v27 + 344));
                  swift_release();
                }
                else
                {
                  swift_retain();
                }
                ecs_stack_allocator_push_snapshot(v20);
                sub_1B1A18378(v55, (uint64_t)v94, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
                v29 = v19[4];
                v30 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v27 + 40) + 16) + 32) + 16) + 1;
                swift_retain();
                v19[6] = ecs_stack_allocator_allocate(v29, 48 * v30, 8);
                v19[7] = v30;
                v54[1] = 0;
                v54[2] = 0;
                *v54 = 0;
                swift_release();
                v31 = sub_1B1A12038((uint64_t)&type metadata for DrawCallComponent, (uint64_t)&off_1E638BEB8, v66, v64, v62, (uint64_t)v19);
                if ((_DWORD)v25 != (_DWORD)v26)
                {
                  v72 = 0u;
                  v73 = 0u;
                  v70 = 0u;
                  memset(v71, 0, sizeof(v71));
                  v32 = v26 - v25;
                  v33 = (uint64_t *)(v31 + 8 * v25);
                  v69 = 0u;
                  do
                  {
                    v34 = *v33++;
                    v35 = *(_QWORD *)(v34 + 160);
                    *(_QWORD *)(v34 + 160) = 1;
                    v36 = swift_retain();
                    sub_1B1D60FC0(v36, (int *)v95, (uint64_t *)&v69, v12, (uint64_t)v76, 0);
                    *(_QWORD *)(v34 + 160) = v35;
                    swift_release();
                    --v32;
                  }
                  while (v32);
                }
                v23 = v68;
                sub_1B1F05D48(v19, (unsigned __int16 **)v90, (uint64_t)v94);
                sub_1B1F03804((char *)v27);
                v20 = v58;
                ecs_stack_allocator_pop_snapshot(v58);
                v21 = v57;
                if ((v57 & 1) != 0)
                {
                  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v27 + 344));
                  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v27 + 376));
                }
                swift_release();
                ++v22;
              }
              while (v22 != v60);
              sub_1B1A086DC(v82, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
              v17 = v53;
            }
          }
          sub_1B1A086DC(v82, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
        }
        if (!**(_QWORD **)(v17 + 496))
        {
          if (*(_QWORD *)(v17 + 376))
          {
            v47 = swift_dynamicCastObjCProtocolConditional();
            if (v47)
            {
              v48 = (void *)v47;
              swift_unknownObjectRetain();
              v49 = objc_msgSend(v48, sel_renderCommandEncoder);
              sub_1B2229A0C();
              sub_1B2228890();
              swift_bridgeObjectRelease();
              sub_1B2228890();
              v50 = (void *)sub_1B2228728();
              swift_bridgeObjectRelease();
              objc_msgSend(v49, sel_setLabel_, v50);

              v51 = *(_QWORD **)(v17 + 496);
              *v51 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for RenderCommandEncoder()), sel_initWithEncoder_, v49);
              swift_unknownObjectRelease();
              swift_unknownObjectRelease();
              swift_unknownObjectRelease();
            }
          }
        }
        v42 = **(void ***)(v17 + 496);
        if (v42)
        {
          v43 = (void *)swift_unknownObjectRetain();
          LODWORD(v44) = 0;
          LODWORD(v45) = 0;
          LODWORD(v46) = 0;
          objc_msgSend(v43, sel_setDepthBias_slopeScale_clamp_, v44, v45, v46);
          objc_msgSend(v42, sel_setTriangleFillMode_, 0);
          swift_unknownObjectRelease();
        }
        swift_unknownObjectRelease();
        sub_1B19ED720((uint64_t)v78);
        swift_release();

        sub_1B1BBF134(v76);
      }
      else
      {
        swift_release();

      }
    }
    else
    {
      swift_release();
    }
  }
}

void sub_1B2010640(void *a1)
{
  bzero(a1, 0x64BuLL);
}

uint64_t sub_1B2010648(uint64_t a1)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v17 = *(_QWORD *)(a1 + 1336);
  v18 = *(_QWORD *)(a1 + 1328);
  v15 = *(_QWORD *)(a1 + 1352);
  v16 = *(_QWORD *)(a1 + 1344);
  v13 = *(_QWORD *)(a1 + 1368);
  v14 = *(_QWORD *)(a1 + 1360);
  v11 = *(_QWORD *)(a1 + 1384);
  v12 = *(_QWORD *)(a1 + 1376);
  v3 = *(_OWORD *)(a1 + 1408);
  v4 = *(_OWORD *)(a1 + 1392);
  v9 = *(_QWORD *)(a1 + 1440);
  v10 = *(_QWORD *)(a1 + 1432);
  v7 = *(_QWORD *)(a1 + 1456);
  v8 = *(_QWORD *)(a1 + 1448);
  v25 = *(_QWORD *)(a1 + 1496);
  v26 = *(_QWORD *)(a1 + 1488);
  v23 = *(_QWORD *)(a1 + 1512);
  v24 = *(_QWORD *)(a1 + 1504);
  v21 = *(_QWORD *)(a1 + 1528);
  v22 = *(_QWORD *)(a1 + 1520);
  v5 = *(_OWORD *)(a1 + 1568);
  v6 = *(_OWORD *)(a1 + 1552);
  v19 = *(_QWORD *)(a1 + 1536);
  v20 = *(_QWORD *)(a1 + 1544);
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  sub_1B2010848(v18, v17, v16, v15, v14, v13, v12, v11, v4, *((uint64_t *)&v4 + 1), v3);
  sub_1B201080C(v10, v9, v8, v7);
  sub_1B2010848(v26, v25, v24, v23, v22, v21, v19, v20, v6, *((uint64_t *)&v6 + 1), v5);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1B201080C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  if (a4)
  {
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_1B2010848(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t result;

  if (a11)
  {
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_1B201088C(uint64_t a1)
{
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return a1;
}

uint64_t sub_1B20108D4(uint64_t a1)
{
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  return a1;
}

_DWORD *initializeBufferWithCopyOfBuffer for DebugDrawingState(_DWORD *result, int *a2)
{
  int v2;

  v2 = *a2;
  *(_DWORD *)((char *)result + 3) = *(int *)((char *)a2 + 3);
  *result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for DebugDrawingState(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && a1[7])
    return (*(_DWORD *)a1 + 255);
  v3 = *a1;
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for DebugDrawingState(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 6) = 0;
    *(_WORD *)(result + 4) = 0;
    *(_DWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 7) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 7) = 0;
    if (a2)
      *(_BYTE *)result = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for DebugDrawingState()
{
  return &type metadata for DebugDrawingState;
}

ValueMetadata *type metadata accessor for DebugCullingSystemState()
{
  return &type metadata for DebugCullingSystemState;
}

ValueMetadata *type metadata accessor for DebugInfoViewDependant()
{
  return &type metadata for DebugInfoViewDependant;
}

ValueMetadata *type metadata accessor for DebugInfoState()
{
  return &type metadata for DebugInfoState;
}

ValueMetadata *type metadata accessor for DebugInfoA()
{
  return &type metadata for DebugInfoA;
}

ValueMetadata *type metadata accessor for DebugInfoB()
{
  return &type metadata for DebugInfoB;
}

uint64_t sub_1B2010A34(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 96) <= 0xBu)
    return *(unsigned __int8 *)(a1 + 96);
  else
    return (*(_DWORD *)a1 + 12);
}

uint64_t sub_1B2010A4C(uint64_t result, unsigned int a2)
{
  if (a2 >= 0xC)
  {
    *(_QWORD *)result = a2 - 12;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    LOBYTE(a2) = 12;
    *(_QWORD *)(result + 88) = 0;
  }
  *(_BYTE *)(result + 96) = a2;
  return result;
}

ValueMetadata *type metadata accessor for DebugInfoPrimitive()
{
  return &type metadata for DebugInfoPrimitive;
}

ValueMetadata *type metadata accessor for DebugInfoColor()
{
  return &type metadata for DebugInfoColor;
}

uint64_t _s3VFX18DebugInfoPrimitiveOwet_0(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xF4 && *(_BYTE *)(a1 + 97))
    return (*(_DWORD *)a1 + 244);
  v3 = *(unsigned __int8 *)(a1 + 96);
  if (v3 <= 0xC)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t _s3VFX18DebugInfoPrimitiveOwst_0(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF3)
  {
    *(_QWORD *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 96) = 0;
    *(_QWORD *)result = a2 - 244;
    if (a3 >= 0xF4)
      *(_BYTE *)(result + 97) = 1;
  }
  else
  {
    if (a3 >= 0xF4)
      *(_BYTE *)(result + 97) = 0;
    if (a2)
      *(_BYTE *)(result + 96) = -(char)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for DebugInfoWireframePrimitive()
{
  return &type metadata for DebugInfoWireframePrimitive;
}

unint64_t sub_1B2010B58()
{
  unint64_t result;

  result = qword_1EEF62130;
  if (!qword_1EEF62130)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22ADA68, &type metadata for DebugInfoA.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF62130);
  }
  return result;
}

unint64_t sub_1B2010B9C()
{
  unint64_t result;

  result = qword_1EEF62140;
  if (!qword_1EEF62140)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22ADA18, &type metadata for DebugInfoB.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF62140);
  }
  return result;
}

ValueMetadata *type metadata accessor for DebugInfoB.CodingKeys()
{
  return &type metadata for DebugInfoB.CodingKeys;
}

ValueMetadata *type metadata accessor for DebugInfoA.CodingKeys()
{
  return &type metadata for DebugInfoA.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for ArrowHead(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1B2010C4C + 4 * byte_1B22AD411[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1B2010C80 + 4 * byte_1B22AD40C[v4]))();
}

uint64_t sub_1B2010C80(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B2010C88(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B2010C90);
  return result;
}

uint64_t sub_1B2010C9C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B2010CA4);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1B2010CA8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B2010CB0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ArrowHead()
{
  return &type metadata for ArrowHead;
}

unint64_t sub_1B2010CD0()
{
  unint64_t result;

  result = qword_1EEF62148;
  if (!qword_1EEF62148)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22AD950, &type metadata for ArrowHead);
    atomic_store(result, (unint64_t *)&qword_1EEF62148);
  }
  return result;
}

unint64_t sub_1B2010D18()
{
  unint64_t result;

  result = qword_1EEF62150;
  if (!qword_1EEF62150)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22AD9C8, &type metadata for DebugInfoB.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF62150);
  }
  return result;
}

unint64_t sub_1B2010D60()
{
  unint64_t result;

  result = qword_1EEF62158;
  if (!qword_1EEF62158)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22AD9F0, &type metadata for DebugInfoB.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF62158);
  }
  return result;
}

unint64_t sub_1B2010DA8()
{
  unint64_t result;

  result = qword_1EEF62160;
  if (!qword_1EEF62160)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22AD978, &type metadata for DebugInfoA.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF62160);
  }
  return result;
}

unint64_t sub_1B2010DF0()
{
  unint64_t result;

  result = qword_1EEF62168;
  if (!qword_1EEF62168)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22AD9A0, &type metadata for DebugInfoA.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF62168);
  }
  return result;
}

double sub_1B2010E34(uint64_t a1, _DWORD *a2)
{
  return sub_1B1D86A08(a1, a2);
}

void sub_1B2010E54(uint64_t a1@<X8>)
{
  void *v1;
  void *v2;
  void *v4;
  id v5;
  void *v6;
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t (*v22)(void);
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  id v52;
  __int128 v53;
  __int128 v54;
  _BYTE v55[40];

  v2 = v1;
  v4 = (void *)sub_1B2228728();
  v5 = objc_msgSend(v1, sel_shaderModifiersArgumentWithName_, v4);

  if (!v5)
  {
    *(_QWORD *)(a1 + 24) = MEMORY[0x1E0DEB188];
    *(_DWORD *)a1 = 0;
    return;
  }
  v6 = (void *)sub_1B2228728();
  v7 = objc_msgSend(v2, sel_valueForKey_, v6);

  if (v7)
  {
    sub_1B22292EC();
    swift_unknownObjectRelease();
  }
  else
  {
    v53 = 0u;
    v54 = 0u;
  }
  sub_1B2012C70((uint64_t)&v53, (uint64_t)v55);
  v8 = objc_msgSend(v5, sel_type);
  v9 = sub_1B222874C();
  v11 = v10;

  if ((v9 != 0x74616F6C66 || v11 != 0xE500000000000000) && (sub_1B2229D24() & 1) == 0)
  {
    if (v9 == 0x3274616F6C66 && v11 == 0xE600000000000000 || (sub_1B2229D24() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      sub_1B1A0DCD4((uint64_t)v55, (uint64_t)&v53);
      if (*((_QWORD *)&v54 + 1))
      {
        sub_1B1B9DAD4(0, &qword_1EEF5FBF0);
        if ((swift_dynamicCast() & 1) != 0)
        {
          objc_msgSend(v52, sel_VFXFloat2Value);
          v15 = v14;

LABEL_23:
          sub_1B1A19D70(0, &qword_1ED4BB080, MEMORY[0x1E0DEDD20]);
          *(_QWORD *)(a1 + 24) = v16;

          *(_QWORD *)a1 = v15;
          goto LABEL_49;
        }
      }
      else
      {
        sub_1B1A0DD70((uint64_t)&v53);
      }
      v15 = 0;
      goto LABEL_23;
    }
    if (v9 == 0x3374616F6C66 && v11 == 0xE600000000000000 || (sub_1B2229D24() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      sub_1B1A0DCD4((uint64_t)v55, (uint64_t)&v53);
      if (*((_QWORD *)&v54 + 1))
      {
        sub_1B1B9DAD4(0, &qword_1EEF5FBF0);
        if ((swift_dynamicCast() & 1) != 0)
        {
          objc_msgSend(v52, sel_VFXFloat3Value);
          v48 = v17;

          v18 = 0;
          v20 = *((_QWORD *)&v48 + 1);
          v19 = v48;
LABEL_32:
          v21 = &qword_1ED4BB0A0;
          v22 = MEMORY[0x1E0DEDD50];
LABEL_42:
          sub_1B1A19D70(0, (unint64_t *)v21, (uint64_t (*)(uint64_t, _QWORD, unint64_t))v22);
          *(_QWORD *)(a1 + 24) = v24;
          v25 = swift_allocObject();
          *(_QWORD *)a1 = v25;

          if (v18)
            v26 = 0;
          else
            v26 = v19;
          if (v18)
            v27 = 0;
          else
            v27 = v20;
          *(_QWORD *)(v25 + 16) = v26;
          *(_QWORD *)(v25 + 24) = v27;
          goto LABEL_49;
        }
      }
      else
      {
        sub_1B1A0DD70((uint64_t)&v53);
      }
      v19 = 0;
      v20 = 0;
      v18 = 1;
      goto LABEL_32;
    }
    if (v9 == 0x3474616F6C66 && v11 == 0xE600000000000000 || (sub_1B2229D24() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      sub_1B1A0DCD4((uint64_t)v55, (uint64_t)&v53);
      if (*((_QWORD *)&v54 + 1))
      {
        sub_1B1B9DAD4(0, &qword_1EEF5FBF0);
        if ((swift_dynamicCast() & 1) != 0)
        {
          objc_msgSend(v52, sel_VFXFloat4Value);
          v49 = v23;

          v18 = 0;
          v20 = *((_QWORD *)&v49 + 1);
          v19 = v49;
LABEL_41:
          v21 = &qword_1ED4BB0E0;
          v22 = MEMORY[0x1E0DEDDA8];
          goto LABEL_42;
        }
      }
      else
      {
        sub_1B1A0DD70((uint64_t)&v53);
      }
      v19 = 0;
      v20 = 0;
      v18 = 1;
      goto LABEL_41;
    }
    if (v9 == 0x34783474616F6C66 && v11 == 0xE800000000000000)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v28 = sub_1B2229D24();
      swift_bridgeObjectRelease();
      if ((v28 & 1) == 0)
      {
        *(_QWORD *)(a1 + 24) = MEMORY[0x1E0DEB188];

        *(_DWORD *)a1 = 0;
        goto LABEL_49;
      }
    }
    sub_1B1A0DCD4((uint64_t)v55, (uint64_t)&v53);
    if (*((_QWORD *)&v54 + 1))
    {
      sub_1B1B9DAD4(0, &qword_1EEF5FBF0);
      if ((swift_dynamicCast() & 1) != 0)
      {
        objc_msgSend(v52, sel_VFXMatrix4Value);
        v46 = v30;
        v50 = v29;
        v44 = v31;
        v45 = v32;

        v33 = 0;
        v34 = v50;
        v51 = *((_QWORD *)&v50 + 1);
        v35 = v46;
        v47 = *((_QWORD *)&v46 + 1);
        v37 = *((_QWORD *)&v44 + 1);
        v36 = v44;
        v38 = *((_QWORD *)&v45 + 1);
        v39 = v45;
LABEL_59:
        type metadata accessor for simd_float4x4(0);
        *(_QWORD *)(a1 + 24) = v40;
        v41 = (_QWORD *)swift_allocObject();
        *(_QWORD *)a1 = v41;

        if ((v33 & 1) != 0)
        {
          v42 = 0;
          v43 = 0;
          v36 = 0;
          v39 = 0;
          v35 = 0x3F80000000000000;
          v34 = 1065353216;
          v37 = 1065353216;
          v38 = 0x3F80000000000000;
        }
        else
        {
          v42 = v51;
          v43 = v47;
        }
        v41[2] = v34;
        v41[3] = v42;
        v41[4] = v35;
        v41[5] = v43;
        v41[6] = v36;
        v41[7] = v37;
        v41[8] = v39;
        v41[9] = v38;
        goto LABEL_49;
      }
    }
    else
    {
      sub_1B1A0DD70((uint64_t)&v53);
    }
    v34 = 0;
    v51 = 0;
    v35 = 0;
    v47 = 0;
    v36 = 0;
    v37 = 0;
    v39 = 0;
    v38 = 0;
    v33 = 1;
    goto LABEL_59;
  }
  swift_bridgeObjectRelease();
  sub_1B1A0DCD4((uint64_t)v55, (uint64_t)&v53);
  if (!*((_QWORD *)&v54 + 1))
  {
    sub_1B1A0DD70((uint64_t)&v53);
    goto LABEL_13;
  }
  sub_1B1B9DAD4(0, (unint64_t *)&qword_1EEF5B5C0);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_13:
    v13 = 0;
    goto LABEL_14;
  }
  objc_msgSend(v52, sel_floatValue);
  v13 = v12;

LABEL_14:
  *(_QWORD *)(a1 + 24) = MEMORY[0x1E0DEB188];

  *(_DWORD *)a1 = v13;
LABEL_49:
  sub_1B1A0DD70((uint64_t)v55);
}

uint64_t sub_1B2011560(_QWORD *a1)
{
  void *v1;
  void *v3;
  id v4;
  id v5;
  double v6;
  id v7;
  id v8;
  unint64_t *v9;
  uint64_t v10;
  void *v11;
  id v13;
  double *v14;
  uint64_t v15;
  void *v16;
  __int128 *v17;
  id v18;
  double v19[3];
  uint64_t v20;
  __int128 v21;
  double v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  _OWORD v28[2];

  v3 = (void *)sub_1B2228728();
  v4 = objc_msgSend(v1, sel_shaderModifiersArgumentWithName_, v3);

  if (!v4)
  {
    sub_1B19FA070(a1, a1[3]);
    v10 = sub_1B2229D0C();
    v11 = (void *)sub_1B2228728();
    swift_bridgeObjectRelease();
    objc_msgSend(v1, sel_setValue_forKey_, v10, v11);
    swift_unknownObjectRelease();

    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  }
  memset(v28, 0, sizeof(v28));
  sub_1B1A02864((uint64_t)a1, (uint64_t)&v26);
  if (swift_dynamicCast())
  {
    v5 = objc_allocWithZone(MEMORY[0x1E0CB37E8]);
    LODWORD(v6) = LODWORD(v19[0]);
    v7 = objc_msgSend(v5, sel_initWithFloat_, v6);
LABEL_4:
    v8 = v7;
    v9 = (unint64_t *)&qword_1EEF5B5C0;
LABEL_13:
    v23 = sub_1B1B9DAD4(0, v9);
    *(_QWORD *)&v21 = v8;
    sub_1B1A0DD70((uint64_t)v28);
    v14 = (double *)&v21;
    goto LABEL_14;
  }
  sub_1B1A19D70(0, &qword_1ED4BB080, MEMORY[0x1E0DEDD20]);
  if (swift_dynamicCast())
  {
    v13 = objc_msgSend((id)objc_opt_self(), sel_valueWithVFXFloat2_, v19[0]);
LABEL_12:
    v8 = v13;
    v9 = &qword_1EEF5FBF0;
    goto LABEL_13;
  }
  sub_1B1A19D70(0, (unint64_t *)&qword_1ED4BB0A0, (uint64_t (*)(uint64_t, _QWORD, unint64_t))MEMORY[0x1E0DEDD50]);
  if (swift_dynamicCast())
  {
    v13 = objc_msgSend((id)objc_opt_self(), sel_valueWithVFXFloat3_, v19[0]);
    goto LABEL_12;
  }
  sub_1B1A19D70(0, (unint64_t *)&qword_1ED4BB0E0, (uint64_t (*)(uint64_t, _QWORD, unint64_t))MEMORY[0x1E0DEDDA8]);
  if (swift_dynamicCast())
  {
    v13 = objc_msgSend((id)objc_opt_self(), sel_valueWithVFXFloat4_, v19[0]);
    goto LABEL_12;
  }
  type metadata accessor for simd_float4x4(0);
  if (!swift_dynamicCast())
  {
    if (!swift_dynamicCast())
    {
      sub_1B1A0DD70((uint64_t)v28);
      swift_bridgeObjectRelease();
      _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
      v17 = &v26;
      return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v17);
    }
    v7 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithDouble_, v19[0]);
    goto LABEL_4;
  }
  v18 = objc_msgSend((id)objc_opt_self(), sel_valueWithVFXMatrix4_, *(double *)&v21, v22, *(double *)&v24, *(double *)&v25);
  v20 = sub_1B1B9DAD4(0, &qword_1EEF5FBF0);
  *(_QWORD *)&v19[0] = v18;
  sub_1B1A0DD70((uint64_t)v28);
  v14 = v19;
LABEL_14:
  sub_1B2012C70((uint64_t)v14, (uint64_t)v28);
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v26);
  sub_1B1A0DCD4((uint64_t)v28, (uint64_t)&v26);
  if (v27)
  {
    sub_1B1A0DDAC(&v26, &v21);
    sub_1B19FA070(&v21, v23);
    v15 = sub_1B2229D0C();
    v16 = (void *)sub_1B2228728();
    swift_bridgeObjectRelease();
    objc_msgSend(v1, sel_setValue_forKey_, v15, v16);
    swift_unknownObjectRelease();

    sub_1B1A0DD70((uint64_t)v28);
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
    v17 = &v21;
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v17);
  }
  sub_1B1A0DD70((uint64_t)v28);
  swift_bridgeObjectRelease();
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  return sub_1B1A0DD70((uint64_t)&v26);
}

id sub_1B20119FC@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, sel_physicsWorld);
  *a2 = result;
  return result;
}

double sub_1B2011A34@<D0>(id *a1@<X0>, _OWORD *a2@<X8>)
{
  double result;

  if (objc_msgSend(*a1, sel_contents))
  {
    sub_1B22292EC();
    swift_unknownObjectRelease();
  }
  else
  {
    result = 0.0;
    *a2 = 0u;
    a2[1] = 0u;
  }
  return result;
}

uint64_t sub_1B2011A90(uint64_t a1, void **a2)
{
  void *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  _QWORD v12[3];
  uint64_t v13;

  sub_1B1A0DCD4(a1, (uint64_t)v12);
  v3 = *a2;
  v4 = v13;
  if (v13)
  {
    v5 = sub_1B19FA070(v12, v13);
    v6 = *(_QWORD *)(v4 - 8);
    v7 = MEMORY[0x1E0C80A78](v5, v5);
    v9 = (char *)v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, double))(v6 + 16))(v9, v7);
    v10 = sub_1B2229D0C();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v4);
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v12);
  }
  else
  {
    v10 = 0;
  }
  objc_msgSend(v3, sel_setContents_, v10);
  return swift_unknownObjectRelease();
}

uint64_t sub_1B2011B78()
{
  return sub_1B2012C2C();
}

uint64_t sub_1B2011B90()
{
  return sub_1B2012C2C();
}

uint64_t sub_1B2011BA8(id *a1, uint64_t a2, uint64_t a3, SEL *a4)
{
  id v4;

  v4 = objc_msgSend(*a1, *a4);
  sub_1B22292EC();
  return swift_unknownObjectRelease();
}

uint64_t sub_1B2011BE8(_QWORD *a1, void **a2, uint64_t a3, uint64_t a4, SEL *a5)
{
  void *v6;

  v6 = *a2;
  sub_1B19FA070(a1, a1[3]);
  objc_msgSend(v6, *a5, sub_1B2229D0C());
  return swift_unknownObjectRelease();
}

uint64_t sub_1B2011C3C()
{
  return sub_1B2012C2C();
}

uint64_t sub_1B2011C54()
{
  return sub_1B2012C2C();
}

uint64_t sub_1B2011C6C()
{
  return sub_1B2012C2C();
}

uint64_t sub_1B2011C84()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t inited;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  sub_1B1A02758(0, &qword_1EEF5CE88, (uint64_t)&type metadata for ScriptKeyPath, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226D240;
  KeyPath = swift_getKeyPath();
  *(_QWORD *)(v0 + 32) = 0x7369766964627553;
  *(_QWORD *)(v0 + 40) = 0xEB000000006E6F69;
  v2 = MEMORY[0x1E0DEB418];
  *(_QWORD *)(v0 + 48) = KeyPath;
  *(_QWORD *)(v0 + 56) = v2;
  *(_QWORD *)(v0 + 64) = 0;
  *(_BYTE *)(v0 + 72) = 1;
  *(_WORD *)(v0 + 74) = 0;
  v18 = v0;
  sub_1B1B9DAD4(0, &qword_1EEF621B8);
  if (swift_dynamicCastMetatype())
  {
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1B2287390;
    v4 = swift_getKeyPath();
    type metadata accessor for VFXParametricModelType(0);
    *(_QWORD *)(inited + 32) = 1701869908;
    *(_QWORD *)(inited + 40) = 0xE400000000000000;
    *(_QWORD *)(inited + 48) = v4;
    *(_QWORD *)(inited + 56) = v5;
    *(_QWORD *)(inited + 64) = 0;
    *(_BYTE *)(inited + 72) = 1;
    *(_WORD *)(inited + 74) = 0;
    v6 = swift_getKeyPath();
    v7 = MEMORY[0x1E0DEB188];
    *(_QWORD *)(inited + 80) = 0x6874646957;
    *(_QWORD *)(inited + 88) = 0xE500000000000000;
    *(_QWORD *)(inited + 96) = v6;
    *(_QWORD *)(inited + 104) = v7;
    *(_QWORD *)(inited + 112) = 0;
    *(_BYTE *)(inited + 120) = 1;
    *(_WORD *)(inited + 122) = 0;
    v8 = swift_getKeyPath();
    *(_QWORD *)(inited + 128) = 0x746867696548;
    *(_QWORD *)(inited + 136) = 0xE600000000000000;
    *(_QWORD *)(inited + 144) = v8;
    *(_QWORD *)(inited + 152) = v7;
    *(_QWORD *)(inited + 160) = 0;
    *(_BYTE *)(inited + 168) = 1;
    *(_WORD *)(inited + 170) = 0;
    v9 = swift_getKeyPath();
    *(_QWORD *)(inited + 176) = 0x6874676E654CLL;
    *(_QWORD *)(inited + 184) = 0xE600000000000000;
    *(_QWORD *)(inited + 192) = v9;
    *(_QWORD *)(inited + 200) = v7;
    *(_QWORD *)(inited + 208) = 0;
    *(_BYTE *)(inited + 216) = 1;
    *(_WORD *)(inited + 218) = 0;
    v10 = swift_getKeyPath();
    strcpy((char *)(inited + 224), "Chamfer radius");
    *(_BYTE *)(inited + 239) = -18;
    *(_QWORD *)(inited + 240) = v10;
    *(_QWORD *)(inited + 248) = v7;
    *(_QWORD *)(inited + 256) = 0;
    *(_BYTE *)(inited + 264) = 1;
    *(_WORD *)(inited + 266) = 0;
    v11 = swift_getKeyPath();
    type metadata accessor for VFXMeshPrimitiveType(0);
    *(_QWORD *)(inited + 272) = 0x79676F6C6F706F54;
    *(_QWORD *)(inited + 280) = 0xE800000000000000;
    *(_QWORD *)(inited + 288) = v11;
    *(_QWORD *)(inited + 296) = v12;
    *(_QWORD *)(inited + 304) = 0;
    *(_BYTE *)(inited + 312) = 1;
    *(_WORD *)(inited + 314) = 0;
    v13 = swift_getKeyPath();
    strcpy((char *)(inited + 320), "Width Segment");
    *(_WORD *)(inited + 334) = -4864;
    *(_QWORD *)(inited + 336) = v13;
    *(_QWORD *)(inited + 344) = v2;
    *(_QWORD *)(inited + 352) = 0;
    *(_BYTE *)(inited + 360) = 1;
    *(_WORD *)(inited + 362) = 0;
    v14 = swift_getKeyPath();
    strcpy((char *)(inited + 368), "Height Segment");
    *(_BYTE *)(inited + 383) = -18;
    *(_QWORD *)(inited + 384) = v14;
    *(_QWORD *)(inited + 392) = v2;
    *(_QWORD *)(inited + 400) = 0;
    *(_BYTE *)(inited + 408) = 1;
    *(_WORD *)(inited + 410) = 0;
    v15 = swift_getKeyPath();
    strcpy((char *)(inited + 416), "Length Segment");
    *(_BYTE *)(inited + 431) = -18;
    *(_QWORD *)(inited + 432) = v15;
    *(_QWORD *)(inited + 440) = v2;
    *(_QWORD *)(inited + 448) = 0;
    *(_BYTE *)(inited + 456) = 1;
    *(_WORD *)(inited + 458) = 0;
    v16 = swift_getKeyPath();
    *(_QWORD *)(inited + 464) = 0x7265666D616843;
    *(_QWORD *)(inited + 472) = 0xE700000000000000;
    *(_QWORD *)(inited + 480) = v16;
    *(_QWORD *)(inited + 488) = v2;
    *(_QWORD *)(inited + 496) = 0;
    *(_BYTE *)(inited + 504) = 1;
    *(_WORD *)(inited + 506) = 0;
    sub_1B19F4FA8(inited);
    return v18;
  }
  return v0;
}

uint64_t sub_1B2011FF8()
{
  return sub_1B2012C2C();
}

id sub_1B2012010()
{
  void *v0;
  id result;

  result = objc_msgSend(v0, sel_asset);
  if (result)
  {
    objc_opt_self();
    result = (id)swift_dynamicCastObjCClass();
    if (!result)
    {
      swift_unknownObjectRelease();
      return 0;
    }
  }
  return result;
}

id sub_1B2012070@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, sel_asset);
  if (result)
  {
    objc_opt_self();
    result = (id)swift_dynamicCastObjCClass();
    if (!result)
    {
      swift_unknownObjectRelease();
      result = 0;
    }
  }
  *a2 = result;
  return result;
}

uint64_t sub_1B20120D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  sub_1B1A02758(0, &qword_1EEF5CE88, (uint64_t)&type metadata for ScriptKeyPath, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1B22ADAF0;
  swift_getKeyPath();
  sub_1B2017AF4(0, &qword_1EEF62190);
  v5 = sub_1B22296F4();
  v44 = a1;
  swift_bridgeObjectRetain();
  sub_1B2228890();
  sub_1B2228890();
  swift_bridgeObjectRetain();
  v6 = sub_1B2229310();
  v8 = v7;
  swift_release();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v4 + 32) = a1;
  *(_QWORD *)(v4 + 40) = a2;
  *(_QWORD *)(v4 + 48) = v5;
  *(_QWORD *)(v4 + 56) = MEMORY[0x1E0DEB188];
  *(_QWORD *)(v4 + 64) = v6;
  *(_BYTE *)(v4 + 72) = v8 & 1;
  *(_WORD *)(v4 + 74) = 0;
  swift_getKeyPath();
  sub_1B20178EC(0, &qword_1EEF62198, type metadata accessor for VFXFilterMode);
  v9 = sub_1B22296F4();
  v45 = a2;
  v46 = a2;
  swift_bridgeObjectRetain();
  sub_1B2228890();
  sub_1B2228890();
  v10 = a1;
  swift_bridgeObjectRetain();
  v11 = sub_1B2229310();
  LOBYTE(a1) = v12;
  swift_release();
  swift_bridgeObjectRelease();
  type metadata accessor for VFXFilterMode(0);
  v14 = v13;
  *(_QWORD *)(v4 + 80) = v10;
  *(_QWORD *)(v4 + 88) = v46;
  *(_QWORD *)(v4 + 96) = v9;
  *(_QWORD *)(v4 + 104) = v13;
  v43 = v13;
  *(_QWORD *)(v4 + 112) = v11;
  *(_BYTE *)(v4 + 120) = a1 & 1;
  *(_WORD *)(v4 + 122) = 0;
  swift_getKeyPath();
  v15 = sub_1B22296F4();
  swift_bridgeObjectRetain();
  sub_1B2228890();
  sub_1B2228890();
  swift_bridgeObjectRetain();
  v16 = sub_1B2229310();
  LOBYTE(v9) = v17;
  swift_release();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v4 + 128) = v44;
  *(_QWORD *)(v4 + 136) = v45;
  *(_QWORD *)(v4 + 144) = v15;
  *(_QWORD *)(v4 + 152) = v14;
  *(_QWORD *)(v4 + 160) = v16;
  *(_BYTE *)(v4 + 168) = v9 & 1;
  *(_WORD *)(v4 + 170) = 0;
  swift_getKeyPath();
  v18 = sub_1B22296F4();
  swift_bridgeObjectRetain();
  sub_1B2228890();
  sub_1B2228890();
  swift_bridgeObjectRetain();
  v19 = sub_1B2229310();
  v21 = v20;
  swift_release();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v4 + 176) = v44;
  *(_QWORD *)(v4 + 184) = v45;
  *(_QWORD *)(v4 + 192) = v18;
  *(_QWORD *)(v4 + 200) = v43;
  *(_QWORD *)(v4 + 208) = v19;
  *(_BYTE *)(v4 + 216) = v21 & 1;
  *(_WORD *)(v4 + 218) = 0;
  swift_getKeyPath();
  sub_1B20178EC(0, &qword_1EEF621A0, type metadata accessor for VFXWrapMode);
  v22 = sub_1B22296F4();
  swift_bridgeObjectRetain();
  sub_1B2228890();
  sub_1B2228890();
  swift_bridgeObjectRetain();
  v23 = sub_1B2229310();
  LOBYTE(v9) = v24;
  swift_release();
  swift_bridgeObjectRelease();
  type metadata accessor for VFXWrapMode(0);
  v26 = v25;
  *(_QWORD *)(v4 + 224) = v44;
  *(_QWORD *)(v4 + 232) = v45;
  *(_QWORD *)(v4 + 240) = v22;
  *(_QWORD *)(v4 + 248) = v25;
  *(_QWORD *)(v4 + 256) = v23;
  *(_BYTE *)(v4 + 264) = v9 & 1;
  *(_WORD *)(v4 + 266) = 0;
  swift_getKeyPath();
  v27 = sub_1B22296F4();
  swift_bridgeObjectRetain();
  sub_1B2228890();
  sub_1B2228890();
  swift_bridgeObjectRetain();
  v28 = sub_1B2229310();
  v30 = v29;
  swift_release();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v4 + 272) = v44;
  *(_QWORD *)(v4 + 280) = v45;
  *(_QWORD *)(v4 + 288) = v27;
  *(_QWORD *)(v4 + 296) = v26;
  *(_QWORD *)(v4 + 304) = v28;
  *(_BYTE *)(v4 + 312) = v30 & 1;
  *(_WORD *)(v4 + 314) = 0;
  swift_getKeyPath();
  sub_1B2017AF4(0, &qword_1EEF621A8);
  v31 = sub_1B22296F4();
  swift_bridgeObjectRetain();
  sub_1B2228890();
  sub_1B2228890();
  swift_bridgeObjectRetain();
  v32 = sub_1B2229310();
  LOBYTE(v26) = v33;
  swift_release();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v4 + 320) = v44;
  *(_QWORD *)(v4 + 328) = v45;
  *(_QWORD *)(v4 + 336) = v31;
  *(_QWORD *)(v4 + 344) = MEMORY[0x1E0DEB418];
  *(_QWORD *)(v4 + 352) = v32;
  *(_BYTE *)(v4 + 360) = v26 & 1;
  *(_WORD *)(v4 + 362) = 0;
  swift_getKeyPath();
  v34 = sub_1B22296F4();
  swift_bridgeObjectRetain();
  sub_1B2228890();
  sub_1B2228890();
  swift_bridgeObjectRetain();
  v35 = sub_1B2229310();
  v37 = v36;
  swift_release();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v4 + 368) = v44;
  *(_QWORD *)(v4 + 376) = v45;
  *(_QWORD *)(v4 + 384) = v34;
  *(_QWORD *)(v4 + 392) = MEMORY[0x1E0DEB188];
  *(_QWORD *)(v4 + 400) = v35;
  *(_BYTE *)(v4 + 408) = v37 & 1;
  *(_WORD *)(v4 + 410) = 0;
  swift_getKeyPath();
  sub_1B20178EC(0, &qword_1EEF621B0, type metadata accessor for simd_float4x4);
  v38 = sub_1B22296F4();
  swift_bridgeObjectRetain();
  sub_1B2228890();
  sub_1B2228890();
  swift_bridgeObjectRetain();
  v39 = sub_1B2229310();
  LOBYTE(v34) = v40;
  swift_release();
  swift_bridgeObjectRelease();
  type metadata accessor for simd_float4x4(0);
  *(_QWORD *)(v4 + 416) = v44;
  *(_QWORD *)(v4 + 424) = v45;
  *(_QWORD *)(v4 + 432) = v38;
  *(_QWORD *)(v4 + 440) = v41;
  *(_QWORD *)(v4 + 448) = v39;
  *(_BYTE *)(v4 + 456) = v34 & 1;
  *(_WORD *)(v4 + 458) = 0;
  return v4;
}

uint64_t sub_1B2012824(uint64_t a1)
{
  _QWORD v2[4];

  sub_1B1A02864(a1, (uint64_t)v2);
  swift_bridgeObjectRetain();
  return sub_1B2011560(v2);
}

uint64_t sub_1B2012878()
{
  return sub_1B2012C2C();
}

uint64_t sub_1B2012890@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t KeyPath;

  KeyPath = swift_getKeyPath();
  *(_QWORD *)a4 = a1;
  *(_QWORD *)(a4 + 8) = a2;
  *(_QWORD *)(a4 + 16) = KeyPath;
  *(_QWORD *)(a4 + 24) = a3;
  *(_QWORD *)(a4 + 32) = 0;
  *(_DWORD *)(a4 + 40) = 67108865;
  return swift_bridgeObjectRetain_n();
}

id sub_1B2012900@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, sel_camera);
  *a2 = result;
  return result;
}

id sub_1B2012938(_QWORD *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setCamera_, *a1);
}

uint64_t sub_1B201294C()
{
  return sub_1B2012C2C();
}

double sub_1B2012964()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  sub_1B1A02758(0, &qword_1EEF62170, (uint64_t)&type metadata for ScriptKeyPathMigration, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v1 = swift_allocObject();
  *(_QWORD *)&result = 1;
  *(_OWORD *)(v1 + 16) = xmmword_1B226D240;
  *(_OWORD *)(v1 + 32) = xmmword_1B22ADB00;
  *(_QWORD *)(v1 + 48) = 0xED00007765697620;
  *(_QWORD *)(v1 + 56) = 0xD000000000000014;
  *(_QWORD *)(v1 + 64) = 0x80000001B2347BB0;
  *(_QWORD *)(v1 + 72) = v0;
  *(_QWORD *)(v1 + 80) = &off_1E63CB3D8;
  return result;
}

uint64_t sub_1B20129F0()
{
  return sub_1B2012C2C();
}

uint64_t sub_1B2012A08()
{
  return sub_1B2012C2C();
}

uint64_t sub_1B2012A20()
{
  return sub_1B2012C2C();
}

uint64_t sub_1B2012A38()
{
  return sub_1B2012C2C();
}

uint64_t sub_1B2012A4C(uint64_t a1, uint64_t a2)
{
  return sub_1B2012AE0(a1, a2, (uint64_t)&unk_1B22AEA88, (uint64_t)&unk_1B22AEAB8, 0x65756C6156, 0xE500000000000000);
}

uint64_t sub_1B2012A70()
{
  return sub_1B2012C2C();
}

uint64_t sub_1B2012A88()
{
  return sub_1B2012C2C();
}

uint64_t sub_1B2012AA0()
{
  return sub_1B2012C2C();
}

uint64_t sub_1B2012AB4(uint64_t a1, uint64_t a2)
{
  return sub_1B2012AE0(a1, a2, (uint64_t)&unk_1B22AE6C8, (uint64_t)&unk_1B22AE6F0, 0x7469736E65746E49, 0xE900000000000079);
}

uint64_t sub_1B2012AE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t KeyPath;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  sub_1B1A02758(0, &qword_1EEF5CE88, (uint64_t)&type metadata for ScriptKeyPath, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_1B226CD10;
  KeyPath = swift_getKeyPath();
  *(_QWORD *)(v8 + 32) = 0x64656C62616E45;
  *(_QWORD *)(v8 + 40) = 0xE700000000000000;
  v10 = MEMORY[0x1E0DEAFA0];
  *(_QWORD *)(v8 + 48) = KeyPath;
  *(_QWORD *)(v8 + 56) = v10;
  *(_QWORD *)(v8 + 64) = 0;
  *(_BYTE *)(v8 + 72) = 1;
  *(_WORD *)(v8 + 74) = 0;
  v11 = swift_getKeyPath();
  *(_QWORD *)(v8 + 80) = a5;
  *(_QWORD *)(v8 + 88) = a6;
  v12 = MEMORY[0x1E0DEB188];
  *(_QWORD *)(v8 + 96) = v11;
  *(_QWORD *)(v8 + 104) = v12;
  *(_QWORD *)(v8 + 112) = 0;
  *(_BYTE *)(v8 + 120) = 1;
  *(_WORD *)(v8 + 122) = 0;
  return v8;
}

uint64_t sub_1B2012BB8()
{
  return sub_1B2012C2C();
}

uint64_t sub_1B2012BD0()
{
  return sub_1B2012C2C();
}

uint64_t sub_1B2012BE8()
{
  return sub_1B2012C2C();
}

uint64_t sub_1B2012C00()
{
  return sub_1B2012C2C();
}

uint64_t sub_1B2012C18()
{
  return sub_1B2012C2C();
}

uint64_t sub_1B2012C2C()
{
  uint64_t result;

  objc_opt_self();
  result = swift_dynamicCastObjCClass();
  if (result)
    return swift_getKeyPath();
  return result;
}

uint64_t sub_1B2012C70(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BB150, MEMORY[0x1E0DEE9B8] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1B2012CD0()
{
  return swift_deallocObject();
}

uint64_t sub_1B2012CE0()
{
  return swift_deallocObject();
}

uint64_t sub_1B2012CF0()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v15;
  uint64_t v16;
  _QWORD v17[23];
  _WORD v18[8];
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  char v32[16];
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  _WORD v40[8];
  uint64_t v41;
  uint64_t v42;

  sub_1B1A02758(0, &qword_1EEF5CE88, (uint64_t)&type metadata for ScriptKeyPath, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226CAD0;
  KeyPath = swift_getKeyPath();
  type metadata accessor for VFXShadingModel(0);
  *(_QWORD *)(v0 + 32) = 0x676E6964616853;
  *(_QWORD *)(v0 + 40) = 0xE700000000000000;
  *(_QWORD *)(v0 + 48) = KeyPath;
  *(_QWORD *)(v0 + 56) = v2;
  *(_QWORD *)(v0 + 64) = 0;
  *(_BYTE *)(v0 + 72) = 1;
  *(_WORD *)(v0 + 74) = 0;
  v3 = swift_getKeyPath();
  v4 = MEMORY[0x1E0DEB188];
  strcpy((char *)(v0 + 80), "Alpha Cutoff");
  *(_BYTE *)(v0 + 93) = 0;
  *(_WORD *)(v0 + 94) = -5120;
  *(_QWORD *)(v0 + 96) = v3;
  *(_QWORD *)(v0 + 104) = v4;
  *(_QWORD *)(v0 + 112) = 0;
  *(_BYTE *)(v0 + 120) = 1;
  *(_WORD *)(v0 + 122) = 0;
  v5 = swift_getKeyPath();
  type metadata accessor for VFXColorMask(0);
  strcpy((char *)(v0 + 128), "Write to Color");
  *(_BYTE *)(v0 + 143) = -18;
  *(_QWORD *)(v0 + 144) = v5;
  *(_QWORD *)(v0 + 152) = v6;
  *(_QWORD *)(v0 + 160) = 0;
  *(_BYTE *)(v0 + 168) = 1;
  *(_WORD *)(v0 + 170) = 0;
  v7 = swift_getKeyPath();
  v8 = MEMORY[0x1E0DEAFA0];
  strcpy((char *)(v0 + 176), "Write to Depth");
  *(_BYTE *)(v0 + 191) = -18;
  *(_QWORD *)(v0 + 192) = v7;
  *(_QWORD *)(v0 + 200) = v8;
  *(_QWORD *)(v0 + 208) = 0;
  *(_BYTE *)(v0 + 216) = 1;
  *(_WORD *)(v0 + 218) = 0;
  v9 = swift_getKeyPath();
  *(_QWORD *)(v0 + 224) = 0x6F72662064616552;
  *(_QWORD *)(v0 + 232) = 0xEF6874706544206DLL;
  *(_QWORD *)(v0 + 240) = v9;
  *(_QWORD *)(v0 + 248) = v8;
  *(_QWORD *)(v0 + 256) = 0;
  *(_BYTE *)(v0 + 264) = 1;
  *(_WORD *)(v0 + 266) = 0;
  v42 = v0;
  v15 = xmmword_1B22ADB10;
  v16 = 0x6F6465626C41;
  v17[0] = 0xE600000000000000;
  v17[1] = swift_getKeyPath();
  v17[2] = 0x73656E6C6174654DLL;
  v17[3] = 0xE900000000000073;
  v17[4] = swift_getKeyPath();
  v17[5] = 0x73656E6867756F52;
  v17[6] = 0xE900000000000073;
  v17[7] = swift_getKeyPath();
  v17[8] = 0x72616C7563657053;
  v17[9] = 0xE800000000000000;
  v17[10] = swift_getKeyPath();
  v17[11] = 0x6C616D726F4ELL;
  v17[12] = 0xE600000000000000;
  v17[13] = swift_getKeyPath();
  v17[14] = 0x697463656C666552;
  v17[15] = 0xEA00000000006576;
  v17[16] = swift_getKeyPath();
  v17[17] = 0x726170736E617254;
  v17[18] = 0xEB00000000746E65;
  v17[19] = swift_getKeyPath();
  v17[20] = 0x6F6973756C63634FLL;
  v17[21] = 0xE90000000000006ELL;
  v17[22] = swift_getKeyPath();
  strcpy((char *)v18, "Illumination");
  HIBYTE(v18[6]) = 0;
  v18[7] = -5120;
  v19 = swift_getKeyPath();
  v20 = 0x6E6F697373696D45;
  v21 = 0xE800000000000000;
  v22 = swift_getKeyPath();
  v23 = 0x796C7069746C754DLL;
  v24 = 0xE800000000000000;
  v25 = swift_getKeyPath();
  v26 = 1952542531;
  v27 = 0xE400000000000000;
  v28 = swift_getKeyPath();
  v29 = 0x726F4E2074616F43;
  v30 = 0xEB000000006C616DLL;
  v31 = swift_getKeyPath();
  strcpy(v32, "Coat Roughness");
  v32[15] = -18;
  v33 = swift_getKeyPath();
  v34 = 0x6166727573627553;
  v35 = 0xEA00000000006563;
  v36 = swift_getKeyPath();
  v37 = 0xD000000000000011;
  v38 = 0x80000001B2347BD0;
  v39 = swift_getKeyPath();
  strcpy((char *)v40, "Displacement");
  HIBYTE(v40[6]) = 0;
  v40[7] = -5120;
  v10 = 0;
  v41 = swift_getKeyPath();
  do
  {
    v11 = v17[v10 - 1];
    v12 = v17[v10];
    swift_bridgeObjectRetain();
    swift_retain();
    v13 = sub_1B20120D8(v11, v12);
    swift_bridgeObjectRelease();
    sub_1B19F4FA8(v13);
    swift_release();
    v10 += 3;
  }
  while (v10 != 51);
  sub_1B20177B4();
  swift_arrayDestroy();
  return v42;
}

uint64_t sub_1B2013204()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  sub_1B1A02758(0, &qword_1EEF5CE88, (uint64_t)&type metadata for ScriptKeyPath, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B228E6F0;
  KeyPath = swift_getKeyPath();
  type metadata accessor for VFXForceFieldType(0);
  *(_QWORD *)(v0 + 32) = 1701869908;
  *(_QWORD *)(v0 + 40) = 0xE400000000000000;
  *(_QWORD *)(v0 + 48) = KeyPath;
  *(_QWORD *)(v0 + 56) = v2;
  *(_QWORD *)(v0 + 64) = 0;
  *(_BYTE *)(v0 + 72) = 1;
  *(_WORD *)(v0 + 74) = 0;
  v3 = swift_getKeyPath();
  v4 = MEMORY[0x1E0DEAFA0];
  *(_QWORD *)(v0 + 80) = 0x657669746341;
  *(_QWORD *)(v0 + 88) = 0xE600000000000000;
  *(_QWORD *)(v0 + 96) = v3;
  *(_QWORD *)(v0 + 104) = v4;
  *(_QWORD *)(v0 + 112) = 0;
  *(_BYTE *)(v0 + 120) = 1;
  *(_WORD *)(v0 + 122) = 0;
  v5 = swift_getKeyPath();
  v6 = MEMORY[0x1E0DEB188];
  *(_QWORD *)(v0 + 128) = 0x6874676E65727453;
  *(_QWORD *)(v0 + 136) = 0xE800000000000000;
  *(_QWORD *)(v0 + 144) = v5;
  *(_QWORD *)(v0 + 152) = v6;
  *(_QWORD *)(v0 + 160) = 0;
  *(_BYTE *)(v0 + 168) = 1;
  *(_WORD *)(v0 + 170) = 0;
  v7 = swift_getKeyPath();
  *(_QWORD *)(v0 + 176) = 0xD000000000000010;
  *(_QWORD *)(v0 + 184) = 0x80000001B2347CF0;
  *(_QWORD *)(v0 + 192) = v7;
  *(_QWORD *)(v0 + 200) = v6;
  *(_QWORD *)(v0 + 208) = 0;
  *(_BYTE *)(v0 + 216) = 1;
  *(_WORD *)(v0 + 218) = 0;
  v8 = swift_getKeyPath();
  sub_1B1A19D70(0, (unint64_t *)&qword_1ED4BB0A0, (uint64_t (*)(uint64_t, _QWORD, unint64_t))MEMORY[0x1E0DEDD50]);
  *(_QWORD *)(v0 + 224) = 0x74657366664FLL;
  *(_QWORD *)(v0 + 232) = 0xE600000000000000;
  *(_QWORD *)(v0 + 240) = v8;
  *(_QWORD *)(v0 + 248) = v9;
  *(_QWORD *)(v0 + 256) = 0;
  *(_BYTE *)(v0 + 264) = 1;
  *(_WORD *)(v0 + 266) = 0;
  v10 = swift_getKeyPath();
  type metadata accessor for VFXForceFieldShape(0);
  *(_QWORD *)(v0 + 272) = 0x6570616853;
  *(_QWORD *)(v0 + 280) = 0xE500000000000000;
  *(_QWORD *)(v0 + 288) = v10;
  *(_QWORD *)(v0 + 296) = v11;
  *(_QWORD *)(v0 + 304) = 0;
  *(_BYTE *)(v0 + 312) = 1;
  *(_WORD *)(v0 + 314) = 0;
  v12 = swift_getKeyPath();
  type metadata accessor for VFXForceFieldCullMode(0);
  *(_QWORD *)(v0 + 320) = 0x65646F4D6C6C7543;
  *(_QWORD *)(v0 + 328) = 0xE800000000000000;
  *(_QWORD *)(v0 + 336) = v12;
  *(_QWORD *)(v0 + 344) = v13;
  *(_QWORD *)(v0 + 352) = 0;
  *(_BYTE *)(v0 + 360) = 1;
  *(_WORD *)(v0 + 362) = 0;
  v14 = swift_getKeyPath();
  strcpy((char *)(v0 + 368), "Affect Group");
  *(_BYTE *)(v0 + 381) = 0;
  *(_WORD *)(v0 + 382) = -5120;
  v15 = MEMORY[0x1E0DEE190];
  *(_QWORD *)(v0 + 384) = v14;
  *(_QWORD *)(v0 + 392) = v15;
  *(_QWORD *)(v0 + 400) = 0;
  *(_BYTE *)(v0 + 408) = 1;
  *(_WORD *)(v0 + 410) = 0;
  return v0;
}

uint64_t sub_1B2013458()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  sub_1B1A02758(0, &qword_1EEF5CE88, (uint64_t)&type metadata for ScriptKeyPath, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B22ADB10;
  KeyPath = swift_getKeyPath();
  *(_QWORD *)(v0 + 32) = 0x6E6F697463697246;
  *(_QWORD *)(v0 + 40) = 0xE800000000000000;
  v2 = MEMORY[0x1E0DEB188];
  *(_QWORD *)(v0 + 48) = KeyPath;
  *(_QWORD *)(v0 + 56) = v2;
  *(_QWORD *)(v0 + 64) = 0;
  *(_BYTE *)(v0 + 72) = 1;
  *(_WORD *)(v0 + 74) = 0;
  v3 = swift_getKeyPath();
  *(_QWORD *)(v0 + 80) = 0x7475746974736552;
  *(_QWORD *)(v0 + 88) = 0xEB000000006E6F69;
  *(_QWORD *)(v0 + 96) = v3;
  *(_QWORD *)(v0 + 104) = v2;
  *(_QWORD *)(v0 + 112) = 0;
  *(_BYTE *)(v0 + 120) = 1;
  *(_WORD *)(v0 + 122) = 0;
  v4 = swift_getKeyPath();
  *(_QWORD *)(v0 + 128) = 0x676E69706D6144;
  *(_QWORD *)(v0 + 136) = 0xE700000000000000;
  *(_QWORD *)(v0 + 144) = v4;
  *(_QWORD *)(v0 + 152) = v2;
  *(_QWORD *)(v0 + 160) = 0;
  *(_BYTE *)(v0 + 168) = 1;
  *(_WORD *)(v0 + 170) = 0;
  v5 = swift_getKeyPath();
  *(_QWORD *)(v0 + 176) = 0x2072616C75676E41;
  *(_QWORD *)(v0 + 184) = 0xEF676E69706D6144;
  *(_QWORD *)(v0 + 192) = v5;
  *(_QWORD *)(v0 + 200) = v2;
  *(_QWORD *)(v0 + 208) = 0;
  *(_BYTE *)(v0 + 216) = 1;
  *(_WORD *)(v0 + 218) = 0;
  v6 = swift_getKeyPath();
  *(_QWORD *)(v0 + 224) = 0xD000000000000010;
  *(_QWORD *)(v0 + 232) = 0x80000001B2347C10;
  *(_QWORD *)(v0 + 240) = v6;
  *(_QWORD *)(v0 + 248) = v2;
  *(_QWORD *)(v0 + 256) = 0;
  *(_BYTE *)(v0 + 264) = 1;
  *(_WORD *)(v0 + 266) = 0;
  v7 = swift_getKeyPath();
  *(_QWORD *)(v0 + 272) = 0x656772616843;
  *(_QWORD *)(v0 + 280) = 0xE600000000000000;
  *(_QWORD *)(v0 + 288) = v7;
  *(_QWORD *)(v0 + 296) = v2;
  *(_QWORD *)(v0 + 304) = 0;
  *(_BYTE *)(v0 + 312) = 1;
  *(_WORD *)(v0 + 314) = 0;
  v8 = swift_getKeyPath();
  v9 = MEMORY[0x1E0DEAFA0];
  *(_QWORD *)(v0 + 320) = 0xD000000000000013;
  *(_QWORD *)(v0 + 328) = 0x80000001B2347C30;
  *(_QWORD *)(v0 + 336) = v8;
  *(_QWORD *)(v0 + 344) = v9;
  *(_QWORD *)(v0 + 352) = 0;
  *(_BYTE *)(v0 + 360) = 1;
  *(_WORD *)(v0 + 362) = 0;
  v10 = swift_getKeyPath();
  sub_1B1A19D70(0, (unint64_t *)&qword_1ED4BB0A0, (uint64_t (*)(uint64_t, _QWORD, unint64_t))MEMORY[0x1E0DEDD50]);
  v12 = v11;
  strcpy((char *)(v0 + 368), "Center of Mass");
  *(_BYTE *)(v0 + 383) = -18;
  *(_QWORD *)(v0 + 384) = v10;
  *(_QWORD *)(v0 + 392) = v11;
  *(_QWORD *)(v0 + 400) = 0;
  *(_BYTE *)(v0 + 408) = 1;
  *(_WORD *)(v0 + 410) = 0;
  v13 = swift_getKeyPath();
  *(_QWORD *)(v0 + 416) = 0x797469636F6C6556;
  *(_QWORD *)(v0 + 424) = 0xEF726F7463614620;
  *(_QWORD *)(v0 + 432) = v13;
  *(_QWORD *)(v0 + 440) = v12;
  *(_QWORD *)(v0 + 448) = 0;
  *(_BYTE *)(v0 + 456) = 1;
  *(_WORD *)(v0 + 458) = 0;
  v14 = swift_getKeyPath();
  *(_QWORD *)(v0 + 464) = 0xD000000000000017;
  *(_QWORD *)(v0 + 472) = 0x80000001B2347C50;
  *(_QWORD *)(v0 + 480) = v14;
  *(_QWORD *)(v0 + 488) = v12;
  *(_QWORD *)(v0 + 496) = 0;
  *(_BYTE *)(v0 + 504) = 1;
  *(_WORD *)(v0 + 506) = 0;
  v15 = swift_getKeyPath();
  *(_QWORD *)(v0 + 512) = 0xD00000000000001ELL;
  *(_QWORD *)(v0 + 520) = 0x80000001B2347C70;
  *(_QWORD *)(v0 + 528) = v15;
  *(_QWORD *)(v0 + 536) = v2;
  *(_QWORD *)(v0 + 544) = 0;
  *(_BYTE *)(v0 + 552) = 1;
  *(_WORD *)(v0 + 554) = 0;
  v16 = swift_getKeyPath();
  strcpy((char *)(v0 + 560), "Category group");
  *(_BYTE *)(v0 + 575) = -18;
  *(_QWORD *)(v0 + 576) = v16;
  v17 = MEMORY[0x1E0DEE190];
  *(_QWORD *)(v0 + 584) = MEMORY[0x1E0DEE190];
  *(_QWORD *)(v0 + 592) = 0;
  *(_BYTE *)(v0 + 600) = 1;
  *(_WORD *)(v0 + 602) = 0;
  v18 = swift_getKeyPath();
  *(_QWORD *)(v0 + 608) = 0x6F6973696C6C6F43;
  *(_QWORD *)(v0 + 616) = 0xEF70756F7267206ELL;
  *(_QWORD *)(v0 + 624) = v18;
  *(_QWORD *)(v0 + 632) = v17;
  *(_QWORD *)(v0 + 640) = 0;
  *(_BYTE *)(v0 + 648) = 1;
  *(_WORD *)(v0 + 650) = 0;
  v19 = swift_getKeyPath();
  *(_QWORD *)(v0 + 656) = 0xD000000000000011;
  *(_QWORD *)(v0 + 664) = 0x80000001B2347C90;
  *(_QWORD *)(v0 + 672) = v19;
  *(_QWORD *)(v0 + 680) = v17;
  *(_QWORD *)(v0 + 688) = 0;
  *(_BYTE *)(v0 + 696) = 1;
  *(_WORD *)(v0 + 698) = 0;
  v20 = swift_getKeyPath();
  strcpy((char *)(v0 + 704), "Allow Resting");
  *(_WORD *)(v0 + 718) = -4864;
  *(_QWORD *)(v0 + 720) = v20;
  *(_QWORD *)(v0 + 728) = v9;
  *(_QWORD *)(v0 + 736) = 0;
  *(_BYTE *)(v0 + 744) = 1;
  *(_WORD *)(v0 + 746) = 0;
  v21 = swift_getKeyPath();
  *(_QWORD *)(v0 + 752) = 0xD000000000000011;
  *(_QWORD *)(v0 + 760) = 0x80000001B2347CB0;
  *(_QWORD *)(v0 + 768) = v21;
  *(_QWORD *)(v0 + 776) = v2;
  *(_QWORD *)(v0 + 784) = 0;
  *(_BYTE *)(v0 + 792) = 1;
  *(_WORD *)(v0 + 794) = 0;
  v22 = swift_getKeyPath();
  *(_QWORD *)(v0 + 800) = 0xD000000000000019;
  *(_QWORD *)(v0 + 808) = 0x80000001B2347CD0;
  *(_QWORD *)(v0 + 816) = v22;
  *(_QWORD *)(v0 + 824) = v2;
  *(_QWORD *)(v0 + 832) = 0;
  *(_BYTE *)(v0 + 840) = 1;
  *(_WORD *)(v0 + 842) = 0;
  return v0;
}

uint64_t sub_1B20138FC()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  sub_1B1A02758(0, &qword_1EEF5CE88, (uint64_t)&type metadata for ScriptKeyPath, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B22ADAF0;
  KeyPath = swift_getKeyPath();
  *(_QWORD *)(v0 + 32) = 0x64656C62616E45;
  *(_QWORD *)(v0 + 40) = 0xE700000000000000;
  v2 = MEMORY[0x1E0DEAFA0];
  *(_QWORD *)(v0 + 48) = KeyPath;
  *(_QWORD *)(v0 + 56) = v2;
  *(_QWORD *)(v0 + 64) = 0;
  *(_BYTE *)(v0 + 72) = 1;
  *(_WORD *)(v0 + 74) = 0;
  v3 = swift_getKeyPath();
  v4 = MEMORY[0x1E0DEB188];
  *(_QWORD *)(v0 + 80) = 0x7469736E65746E49;
  *(_QWORD *)(v0 + 88) = 0xE900000000000079;
  *(_QWORD *)(v0 + 96) = v3;
  *(_QWORD *)(v0 + 104) = v4;
  *(_QWORD *)(v0 + 112) = 0;
  *(_BYTE *)(v0 + 120) = 1;
  *(_WORD *)(v0 + 122) = 0;
  v5 = swift_getKeyPath();
  *(_QWORD *)(v0 + 128) = 0x6C6F687365726854;
  *(_QWORD *)(v0 + 136) = 0xE900000000000064;
  *(_QWORD *)(v0 + 144) = v5;
  *(_QWORD *)(v0 + 152) = v4;
  *(_QWORD *)(v0 + 160) = 0;
  *(_BYTE *)(v0 + 168) = 1;
  *(_WORD *)(v0 + 170) = 0;
  v6 = swift_getKeyPath();
  *(_QWORD *)(v0 + 176) = 0xD000000000000014;
  *(_QWORD *)(v0 + 184) = 0x80000001B2347B70;
  *(_QWORD *)(v0 + 192) = v6;
  *(_QWORD *)(v0 + 200) = v4;
  *(_QWORD *)(v0 + 208) = 0;
  *(_BYTE *)(v0 + 216) = 1;
  *(_WORD *)(v0 + 218) = 0;
  v7 = swift_getKeyPath();
  v8 = MEMORY[0x1E0DEB418];
  *(_QWORD *)(v0 + 224) = 0x6F69746172657449;
  *(_QWORD *)(v0 + 232) = 0xEA0000000000736ELL;
  *(_QWORD *)(v0 + 240) = v7;
  *(_QWORD *)(v0 + 248) = v8;
  *(_QWORD *)(v0 + 256) = 0;
  *(_BYTE *)(v0 + 264) = 1;
  *(_WORD *)(v0 + 266) = 0;
  v9 = swift_getKeyPath();
  *(_QWORD *)(v0 + 272) = 0xD000000000000010;
  *(_QWORD *)(v0 + 280) = 0x80000001B2347B90;
  *(_QWORD *)(v0 + 288) = v9;
  *(_QWORD *)(v0 + 296) = v2;
  *(_QWORD *)(v0 + 304) = 0;
  *(_BYTE *)(v0 + 312) = 1;
  *(_WORD *)(v0 + 314) = 0;
  v10 = swift_getKeyPath();
  sub_1B1A19D70(0, (unint64_t *)&qword_1ED4BB0A0, (uint64_t (*)(uint64_t, _QWORD, unint64_t))MEMORY[0x1E0DEDD50]);
  strcpy((char *)(v0 + 320), "Color filter");
  *(_BYTE *)(v0 + 333) = 0;
  *(_WORD *)(v0 + 334) = -5120;
  *(_QWORD *)(v0 + 336) = v10;
  *(_QWORD *)(v0 + 344) = v11;
  *(_QWORD *)(v0 + 352) = 0;
  *(_BYTE *)(v0 + 360) = 1;
  *(_WORD *)(v0 + 362) = 0;
  v12 = swift_getKeyPath();
  *(_QWORD *)(v0 + 368) = 0x74736172746E6F43;
  *(_QWORD *)(v0 + 376) = 0xE800000000000000;
  *(_QWORD *)(v0 + 384) = v12;
  *(_QWORD *)(v0 + 392) = v4;
  *(_QWORD *)(v0 + 400) = 0;
  *(_BYTE *)(v0 + 408) = 1;
  *(_WORD *)(v0 + 410) = 0;
  v13 = swift_getKeyPath();
  *(_QWORD *)(v0 + 416) = 0x6974617275746153;
  *(_QWORD *)(v0 + 424) = 0xEA00000000006E6FLL;
  *(_QWORD *)(v0 + 432) = v13;
  *(_QWORD *)(v0 + 440) = v4;
  *(_QWORD *)(v0 + 448) = 0;
  *(_BYTE *)(v0 + 456) = 1;
  *(_WORD *)(v0 + 458) = 0;
  return v0;
}

uint64_t sub_1B2013B84()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_1B1A02758(0, &qword_1EEF5CE88, (uint64_t)&type metadata for ScriptKeyPath, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B227BE30;
  KeyPath = swift_getKeyPath();
  *(_QWORD *)(v0 + 32) = 0x64656C62616E45;
  *(_QWORD *)(v0 + 40) = 0xE700000000000000;
  v2 = MEMORY[0x1E0DEAFA0];
  *(_QWORD *)(v0 + 48) = KeyPath;
  *(_QWORD *)(v0 + 56) = v2;
  *(_QWORD *)(v0 + 64) = 0;
  *(_BYTE *)(v0 + 72) = 1;
  *(_WORD *)(v0 + 74) = 0;
  v3 = swift_getKeyPath();
  v4 = MEMORY[0x1E0DEB188];
  *(_QWORD *)(v0 + 80) = 0x7469736E65746E49;
  *(_QWORD *)(v0 + 88) = 0xE900000000000079;
  *(_QWORD *)(v0 + 96) = v3;
  *(_QWORD *)(v0 + 104) = v4;
  *(_QWORD *)(v0 + 112) = 0;
  *(_BYTE *)(v0 + 120) = 1;
  *(_WORD *)(v0 + 122) = 0;
  v5 = swift_getKeyPath();
  *(_QWORD *)(v0 + 128) = 0x656C616353;
  *(_QWORD *)(v0 + 136) = 0xE500000000000000;
  *(_QWORD *)(v0 + 144) = v5;
  *(_QWORD *)(v0 + 152) = v4;
  *(_QWORD *)(v0 + 160) = 0;
  *(_BYTE *)(v0 + 168) = 1;
  *(_WORD *)(v0 + 170) = 0;
  v6 = swift_getKeyPath();
  *(_QWORD *)(v0 + 176) = 0x6465726F6C6F43;
  *(_QWORD *)(v0 + 184) = 0xE700000000000000;
  *(_QWORD *)(v0 + 192) = v6;
  *(_QWORD *)(v0 + 200) = v2;
  *(_QWORD *)(v0 + 208) = 0;
  *(_BYTE *)(v0 + 216) = 1;
  *(_WORD *)(v0 + 218) = 0;
  return v0;
}

uint64_t sub_1B2013CCC()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_1B1A02758(0, &qword_1EEF5CE88, (uint64_t)&type metadata for ScriptKeyPath, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E100;
  KeyPath = swift_getKeyPath();
  *(_QWORD *)(v0 + 32) = 0x64656C62616E45;
  *(_QWORD *)(v0 + 40) = 0xE700000000000000;
  v2 = MEMORY[0x1E0DEAFA0];
  *(_QWORD *)(v0 + 48) = KeyPath;
  *(_QWORD *)(v0 + 56) = v2;
  *(_QWORD *)(v0 + 64) = 0;
  *(_BYTE *)(v0 + 72) = 1;
  *(_WORD *)(v0 + 74) = 0;
  v3 = swift_getKeyPath();
  type metadata accessor for VFXCameraLensBlurFilterQuality(0);
  *(_QWORD *)(v0 + 80) = 0x74736172746E6F43;
  *(_QWORD *)(v0 + 88) = 0xE800000000000000;
  *(_QWORD *)(v0 + 96) = v3;
  *(_QWORD *)(v0 + 104) = v4;
  *(_QWORD *)(v0 + 112) = 0;
  *(_BYTE *)(v0 + 120) = 1;
  *(_WORD *)(v0 + 122) = 0;
  v5 = swift_getKeyPath();
  *(_QWORD *)(v0 + 128) = 0x737569646152;
  *(_QWORD *)(v0 + 136) = 0xE600000000000000;
  v6 = MEMORY[0x1E0DEB188];
  *(_QWORD *)(v0 + 144) = v5;
  *(_QWORD *)(v0 + 152) = v6;
  *(_QWORD *)(v0 + 160) = 0;
  *(_BYTE *)(v0 + 168) = 1;
  *(_WORD *)(v0 + 170) = 0;
  return v0;
}

uint64_t sub_1B2013DE4()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  sub_1B1A02758(0, &qword_1EEF5CE88, (uint64_t)&type metadata for ScriptKeyPath, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226CAD0;
  KeyPath = swift_getKeyPath();
  *(_QWORD *)(v0 + 32) = 0x64656C62616E45;
  *(_QWORD *)(v0 + 40) = 0xE700000000000000;
  v2 = MEMORY[0x1E0DEAFA0];
  *(_QWORD *)(v0 + 48) = KeyPath;
  *(_QWORD *)(v0 + 56) = v2;
  *(_QWORD *)(v0 + 64) = 0;
  *(_BYTE *)(v0 + 72) = 1;
  *(_WORD *)(v0 + 74) = 0;
  v3 = swift_getKeyPath();
  v4 = MEMORY[0x1E0DEB188];
  *(_QWORD *)(v0 + 80) = 0x7469736E65746E49;
  *(_QWORD *)(v0 + 88) = 0xE900000000000079;
  *(_QWORD *)(v0 + 96) = v3;
  *(_QWORD *)(v0 + 104) = v4;
  *(_QWORD *)(v0 + 112) = 0;
  *(_BYTE *)(v0 + 120) = 1;
  *(_WORD *)(v0 + 122) = 0;
  v5 = swift_getKeyPath();
  *(_QWORD *)(v0 + 128) = 0x6870726F6D616E41;
  *(_QWORD *)(v0 + 136) = 0xEA00000000006369;
  *(_QWORD *)(v0 + 144) = v5;
  *(_QWORD *)(v0 + 152) = v4;
  *(_QWORD *)(v0 + 160) = 0;
  *(_BYTE *)(v0 + 168) = 1;
  *(_WORD *)(v0 + 170) = 0;
  v6 = swift_getKeyPath();
  *(_QWORD *)(v0 + 176) = 0x7373656E74666F53;
  *(_QWORD *)(v0 + 184) = 0xE800000000000000;
  *(_QWORD *)(v0 + 192) = v6;
  *(_QWORD *)(v0 + 200) = v4;
  *(_QWORD *)(v0 + 208) = 0;
  *(_BYTE *)(v0 + 216) = 1;
  *(_WORD *)(v0 + 218) = 0;
  v7 = swift_getKeyPath();
  *(_QWORD *)(v0 + 224) = 0x737569646152;
  *(_QWORD *)(v0 + 232) = 0xE600000000000000;
  *(_QWORD *)(v0 + 240) = v7;
  *(_QWORD *)(v0 + 248) = v4;
  *(_QWORD *)(v0 + 256) = 0;
  *(_BYTE *)(v0 + 264) = 1;
  *(_WORD *)(v0 + 266) = 0;
  return v0;
}

uint64_t sub_1B2013F60()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_1B1A02758(0, &qword_1EEF5CE88, (uint64_t)&type metadata for ScriptKeyPath, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E100;
  KeyPath = swift_getKeyPath();
  *(_QWORD *)(v0 + 32) = 0x64656C62616E45;
  *(_QWORD *)(v0 + 40) = 0xE700000000000000;
  v2 = MEMORY[0x1E0DEAFA0];
  *(_QWORD *)(v0 + 48) = KeyPath;
  *(_QWORD *)(v0 + 56) = v2;
  *(_QWORD *)(v0 + 64) = 0;
  *(_BYTE *)(v0 + 72) = 1;
  *(_WORD *)(v0 + 74) = 0;
  v3 = swift_getKeyPath();
  v4 = MEMORY[0x1E0DEB188];
  *(_QWORD *)(v0 + 80) = 0x6874676E65727453;
  *(_QWORD *)(v0 + 88) = 0xE800000000000000;
  *(_QWORD *)(v0 + 96) = v3;
  *(_QWORD *)(v0 + 104) = v4;
  *(_QWORD *)(v0 + 112) = 0;
  *(_BYTE *)(v0 + 120) = 1;
  *(_WORD *)(v0 + 122) = 0;
  v5 = swift_getKeyPath();
  *(_QWORD *)(v0 + 128) = 0x7469736E65746E49;
  *(_QWORD *)(v0 + 136) = 0xE900000000000079;
  *(_QWORD *)(v0 + 144) = v5;
  *(_QWORD *)(v0 + 152) = v4;
  *(_QWORD *)(v0 + 160) = 0;
  *(_BYTE *)(v0 + 168) = 1;
  *(_WORD *)(v0 + 170) = 0;
  return v0;
}

uint64_t sub_1B2014074()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  sub_1B1A02758(0, &qword_1EEF5CE88, (uint64_t)&type metadata for ScriptKeyPath, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B228E6F0;
  KeyPath = swift_getKeyPath();
  *(_QWORD *)(v0 + 32) = 0x64656C62616E45;
  *(_QWORD *)(v0 + 40) = 0xE700000000000000;
  v2 = MEMORY[0x1E0DEAFA0];
  *(_QWORD *)(v0 + 48) = KeyPath;
  *(_QWORD *)(v0 + 56) = v2;
  *(_QWORD *)(v0 + 64) = 0;
  *(_BYTE *)(v0 + 72) = 1;
  *(_WORD *)(v0 + 74) = 0;
  v3 = swift_getKeyPath();
  type metadata accessor for VFXCameraToneMappingMode(0);
  *(_QWORD *)(v0 + 80) = 1701080909;
  *(_QWORD *)(v0 + 88) = 0xE400000000000000;
  *(_QWORD *)(v0 + 96) = v3;
  *(_QWORD *)(v0 + 104) = v4;
  *(_QWORD *)(v0 + 112) = 0;
  *(_BYTE *)(v0 + 120) = 1;
  *(_WORD *)(v0 + 122) = 0;
  v5 = swift_getKeyPath();
  v6 = MEMORY[0x1E0DEB188];
  strcpy((char *)(v0 + 128), "Toe Strength");
  *(_BYTE *)(v0 + 141) = 0;
  *(_WORD *)(v0 + 142) = -5120;
  *(_QWORD *)(v0 + 144) = v5;
  *(_QWORD *)(v0 + 152) = v6;
  *(_QWORD *)(v0 + 160) = 0;
  *(_BYTE *)(v0 + 168) = 1;
  *(_WORD *)(v0 + 170) = 0;
  v7 = swift_getKeyPath();
  *(_QWORD *)(v0 + 176) = 0x676E654C20656F54;
  *(_QWORD *)(v0 + 184) = 0xEA00000000006874;
  *(_QWORD *)(v0 + 192) = v7;
  *(_QWORD *)(v0 + 200) = v6;
  *(_QWORD *)(v0 + 208) = 0;
  *(_BYTE *)(v0 + 216) = 1;
  *(_WORD *)(v0 + 218) = 0;
  v8 = swift_getKeyPath();
  *(_QWORD *)(v0 + 224) = 0xD000000000000011;
  *(_QWORD *)(v0 + 232) = 0x80000001B2347B50;
  *(_QWORD *)(v0 + 240) = v8;
  *(_QWORD *)(v0 + 248) = v6;
  *(_QWORD *)(v0 + 256) = 0;
  *(_BYTE *)(v0 + 264) = 1;
  *(_WORD *)(v0 + 266) = 0;
  v9 = swift_getKeyPath();
  *(_QWORD *)(v0 + 272) = 0x7265646C756F6853;
  *(_QWORD *)(v0 + 280) = 0xEF6874676E654C20;
  *(_QWORD *)(v0 + 288) = v9;
  *(_QWORD *)(v0 + 296) = v6;
  *(_QWORD *)(v0 + 304) = 0;
  *(_BYTE *)(v0 + 312) = 1;
  *(_WORD *)(v0 + 314) = 0;
  v10 = swift_getKeyPath();
  strcpy((char *)(v0 + 320), "Shoulder Angle");
  *(_BYTE *)(v0 + 335) = -18;
  *(_QWORD *)(v0 + 336) = v10;
  *(_QWORD *)(v0 + 344) = v6;
  *(_QWORD *)(v0 + 352) = 0;
  *(_BYTE *)(v0 + 360) = 1;
  *(_WORD *)(v0 + 362) = 0;
  v11 = swift_getKeyPath();
  *(_QWORD *)(v0 + 368) = 0x616D6D6147;
  *(_QWORD *)(v0 + 376) = 0xE500000000000000;
  *(_QWORD *)(v0 + 384) = v11;
  *(_QWORD *)(v0 + 392) = v6;
  *(_QWORD *)(v0 + 400) = 0;
  *(_BYTE *)(v0 + 408) = 1;
  *(_WORD *)(v0 + 410) = 0;
  return v0;
}

uint64_t sub_1B20142A0()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  sub_1B1A02758(0, &qword_1EEF5CE88, (uint64_t)&type metadata for ScriptKeyPath, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B22820B0;
  KeyPath = swift_getKeyPath();
  *(_QWORD *)(v0 + 32) = 0x64656C62616E45;
  *(_QWORD *)(v0 + 40) = 0xE700000000000000;
  v2 = MEMORY[0x1E0DEAFA0];
  *(_QWORD *)(v0 + 48) = KeyPath;
  *(_QWORD *)(v0 + 56) = v2;
  *(_QWORD *)(v0 + 64) = 0;
  *(_BYTE *)(v0 + 72) = 1;
  *(_WORD *)(v0 + 74) = 0;
  v3 = swift_getKeyPath();
  v4 = MEMORY[0x1E0DEB188];
  *(_QWORD *)(v0 + 80) = 0x6974617275746153;
  *(_QWORD *)(v0 + 88) = 0xEA00000000006E6FLL;
  *(_QWORD *)(v0 + 96) = v3;
  *(_QWORD *)(v0 + 104) = v4;
  *(_QWORD *)(v0 + 112) = 0;
  *(_BYTE *)(v0 + 120) = 1;
  *(_WORD *)(v0 + 122) = 0;
  v5 = swift_getKeyPath();
  *(_QWORD *)(v0 + 128) = 0x74736172746E6F43;
  *(_QWORD *)(v0 + 136) = 0xE800000000000000;
  *(_QWORD *)(v0 + 144) = v5;
  *(_QWORD *)(v0 + 152) = v4;
  *(_QWORD *)(v0 + 160) = 0;
  *(_BYTE *)(v0 + 168) = 1;
  *(_WORD *)(v0 + 170) = 0;
  v6 = swift_getKeyPath();
  *(_QWORD *)(v0 + 176) = 0x74617265706D6554;
  *(_QWORD *)(v0 + 184) = 0xEB00000000657275;
  *(_QWORD *)(v0 + 192) = v6;
  *(_QWORD *)(v0 + 200) = v4;
  *(_QWORD *)(v0 + 208) = 0;
  *(_BYTE *)(v0 + 216) = 1;
  *(_WORD *)(v0 + 218) = 0;
  v7 = swift_getKeyPath();
  *(_QWORD *)(v0 + 224) = 1953392980;
  *(_QWORD *)(v0 + 232) = 0xE400000000000000;
  *(_QWORD *)(v0 + 240) = v7;
  *(_QWORD *)(v0 + 248) = v4;
  *(_QWORD *)(v0 + 256) = 0;
  *(_BYTE *)(v0 + 264) = 1;
  *(_WORD *)(v0 + 266) = 0;
  v8 = swift_getKeyPath();
  sub_1B1A19D70(0, (unint64_t *)&qword_1ED4BB0A0, (uint64_t (*)(uint64_t, _QWORD, unint64_t))MEMORY[0x1E0DEDD50]);
  v10 = v9;
  *(_QWORD *)(v0 + 272) = 0x6F6C6F437466694CLL;
  *(_QWORD *)(v0 + 280) = 0xE900000000000072;
  *(_QWORD *)(v0 + 288) = v8;
  *(_QWORD *)(v0 + 296) = v9;
  *(_QWORD *)(v0 + 304) = 0;
  *(_BYTE *)(v0 + 312) = 1;
  *(_WORD *)(v0 + 314) = 0;
  v11 = swift_getKeyPath();
  *(_QWORD *)(v0 + 320) = 0x7366664F7466694CLL;
  *(_QWORD *)(v0 + 328) = 0xEA00000000007465;
  *(_QWORD *)(v0 + 336) = v11;
  *(_QWORD *)(v0 + 344) = v4;
  *(_QWORD *)(v0 + 352) = 0;
  *(_BYTE *)(v0 + 360) = 1;
  *(_WORD *)(v0 + 362) = 0;
  v12 = swift_getKeyPath();
  *(_QWORD *)(v0 + 368) = 0x6F4320616D6D6147;
  *(_QWORD *)(v0 + 376) = 0xEB00000000726F6CLL;
  *(_QWORD *)(v0 + 384) = v12;
  *(_QWORD *)(v0 + 392) = v10;
  *(_QWORD *)(v0 + 400) = 0;
  *(_BYTE *)(v0 + 408) = 1;
  *(_WORD *)(v0 + 410) = 0;
  v13 = swift_getKeyPath();
  strcpy((char *)(v0 + 416), "Gamma Offset");
  *(_BYTE *)(v0 + 429) = 0;
  *(_WORD *)(v0 + 430) = -5120;
  *(_QWORD *)(v0 + 432) = v13;
  *(_QWORD *)(v0 + 440) = v4;
  *(_QWORD *)(v0 + 448) = 0;
  *(_BYTE *)(v0 + 456) = 1;
  *(_WORD *)(v0 + 458) = 0;
  v14 = swift_getKeyPath();
  *(_QWORD *)(v0 + 464) = 0x6C6F43206E696147;
  *(_QWORD *)(v0 + 472) = 0xEA0000000000726FLL;
  *(_QWORD *)(v0 + 480) = v14;
  *(_QWORD *)(v0 + 488) = v10;
  *(_QWORD *)(v0 + 496) = 0;
  *(_BYTE *)(v0 + 504) = 1;
  *(_WORD *)(v0 + 506) = 0;
  v15 = swift_getKeyPath();
  *(_QWORD *)(v0 + 512) = 0x66664F206E696147;
  *(_QWORD *)(v0 + 520) = 0xEB00000000746573;
  *(_QWORD *)(v0 + 528) = v15;
  *(_QWORD *)(v0 + 536) = v4;
  *(_QWORD *)(v0 + 544) = 0;
  *(_BYTE *)(v0 + 552) = 1;
  *(_WORD *)(v0 + 554) = 0;
  return v0;
}

uint64_t sub_1B20145A0()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  sub_1B1A02758(0, &qword_1EEF5CE88, (uint64_t)&type metadata for ScriptKeyPath, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B227BE30;
  KeyPath = swift_getKeyPath();
  *(_QWORD *)(v0 + 32) = 0x64656C62616E45;
  *(_QWORD *)(v0 + 40) = 0xE700000000000000;
  v2 = MEMORY[0x1E0DEAFA0];
  *(_QWORD *)(v0 + 48) = KeyPath;
  *(_QWORD *)(v0 + 56) = v2;
  *(_QWORD *)(v0 + 64) = 0;
  *(_BYTE *)(v0 + 72) = 1;
  *(_WORD *)(v0 + 74) = 0;
  v3 = swift_getKeyPath();
  v4 = MEMORY[0x1E0DEB188];
  *(_QWORD *)(v0 + 80) = 0x706F745346;
  *(_QWORD *)(v0 + 88) = 0xE500000000000000;
  *(_QWORD *)(v0 + 96) = v3;
  *(_QWORD *)(v0 + 104) = v4;
  *(_QWORD *)(v0 + 112) = 0;
  *(_BYTE *)(v0 + 120) = 1;
  *(_WORD *)(v0 + 122) = 0;
  v5 = swift_getKeyPath();
  v6 = MEMORY[0x1E0DEB418];
  *(_QWORD *)(v0 + 128) = 0x6572757472657041;
  *(_QWORD *)(v0 + 136) = 0xEF736564616C6220;
  *(_QWORD *)(v0 + 144) = v5;
  *(_QWORD *)(v0 + 152) = v6;
  *(_QWORD *)(v0 + 160) = 0;
  *(_BYTE *)(v0 + 168) = 1;
  *(_WORD *)(v0 + 170) = 0;
  v7 = swift_getKeyPath();
  strcpy((char *)(v0 + 176), "Sample count");
  *(_BYTE *)(v0 + 189) = 0;
  *(_WORD *)(v0 + 190) = -5120;
  *(_QWORD *)(v0 + 192) = v7;
  *(_QWORD *)(v0 + 200) = v6;
  *(_QWORD *)(v0 + 208) = 0;
  *(_BYTE *)(v0 + 216) = 1;
  *(_WORD *)(v0 + 218) = 0;
  return v0;
}

uint64_t sub_1B20146FC()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  sub_1B1A02758(0, &qword_1EEF5CE88, (uint64_t)&type metadata for ScriptKeyPath, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226CAD0;
  KeyPath = swift_getKeyPath();
  *(_QWORD *)(v0 + 32) = 0x64656C62616E45;
  *(_QWORD *)(v0 + 40) = 0xE700000000000000;
  v2 = MEMORY[0x1E0DEAFA0];
  *(_QWORD *)(v0 + 48) = KeyPath;
  *(_QWORD *)(v0 + 56) = v2;
  *(_QWORD *)(v0 + 64) = 0;
  *(_BYTE *)(v0 + 72) = 1;
  *(_WORD *)(v0 + 74) = 0;
  v3 = swift_getKeyPath();
  v4 = MEMORY[0x1E0DEB188];
  *(_QWORD *)(v0 + 80) = 0x737569646152;
  *(_QWORD *)(v0 + 88) = 0xE600000000000000;
  *(_QWORD *)(v0 + 96) = v3;
  *(_QWORD *)(v0 + 104) = v4;
  *(_QWORD *)(v0 + 112) = 0;
  *(_BYTE *)(v0 + 120) = 1;
  *(_WORD *)(v0 + 122) = 0;
  v5 = swift_getKeyPath();
  strcpy((char *)(v0 + 128), "Mask Enabled");
  *(_BYTE *)(v0 + 141) = 0;
  *(_WORD *)(v0 + 142) = -5120;
  *(_QWORD *)(v0 + 144) = v5;
  *(_QWORD *)(v0 + 152) = v2;
  *(_QWORD *)(v0 + 160) = 0;
  *(_BYTE *)(v0 + 168) = 1;
  *(_WORD *)(v0 + 170) = 0;
  v6 = swift_getKeyPath();
  sub_1B1A19D70(0, &qword_1ED4BB080, MEMORY[0x1E0DEDD20]);
  *(_QWORD *)(v0 + 176) = 0x6E6543206B73614DLL;
  *(_QWORD *)(v0 + 184) = 0xEB00000000726574;
  *(_QWORD *)(v0 + 192) = v6;
  *(_QWORD *)(v0 + 200) = v7;
  *(_QWORD *)(v0 + 208) = 0;
  *(_BYTE *)(v0 + 216) = 1;
  *(_WORD *)(v0 + 218) = 0;
  v8 = swift_getKeyPath();
  *(_QWORD *)(v0 + 224) = 0x646152206B73614DLL;
  *(_QWORD *)(v0 + 232) = 0xEB00000000737569;
  *(_QWORD *)(v0 + 240) = v8;
  *(_QWORD *)(v0 + 248) = v4;
  *(_QWORD *)(v0 + 256) = 0;
  *(_BYTE *)(v0 + 264) = 1;
  *(_WORD *)(v0 + 266) = 0;
  return v0;
}

id sub_1B20148A4@<X0>(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, sel_isEnabled);
  *a2 = (_BYTE)result;
  return result;
}

id sub_1B20148D4(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setEnabled_, *a1);
}

char *sub_1B20148E8()
{
  return sel_radius;
}

char *sub_1B20148F4()
{
  return sel_maskEnabled;
}

id sub_1B2014900@<X0>(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, sel_maskEnabled);
  *a2 = (_BYTE)result;
  return result;
}

id sub_1B2014930(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setMaskEnabled_, *a1);
}

char *sub_1B2014944()
{
  return sel_maskCenter;
}

id sub_1B2014950@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;
  uint64_t v4;

  result = objc_msgSend(*a1, sel_maskCenter);
  *a2 = v4;
  return result;
}

id sub_1B2014980(double *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setMaskCenter_, *a1);
}

char *sub_1B2014994()
{
  return sel_maskRadius;
}

id sub_1B20149A0@<X0>(id *a1@<X0>, _DWORD *a2@<X8>)
{
  id result;
  int v4;

  result = objc_msgSend(*a1, sel_maskRadius);
  *a2 = v4;
  return result;
}

id sub_1B20149D0(_DWORD *a1, id *a2, double a3)
{
  LODWORD(a3) = *a1;
  return objc_msgSend(*a2, sel_setMaskRadius_, a3);
}

char *sub_1B20149E4()
{
  return sel_camera;
}

id sub_1B20149F0@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, sel_camera);
  *a2 = result;
  return result;
}

id sub_1B2014A28(_QWORD *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setCamera_, *a1);
}

char *sub_1B2014A3C()
{
  return sel_doughnutBokeh;
}

id sub_1B2014A48@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, sel_doughnutBokeh);
  *a2 = result;
  return result;
}

id sub_1B2014A80(_QWORD *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setDoughnutBokeh_, *a1);
}

uint64_t sub_1B2014A94()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  sub_1B1A02758(0, &qword_1EEF5CE88, (uint64_t)&type metadata for ScriptKeyPath, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B22ADB10;
  KeyPath = swift_getKeyPath();
  *(_QWORD *)(v0 + 32) = 0x64656C62616E45;
  *(_QWORD *)(v0 + 40) = 0xE700000000000000;
  v2 = MEMORY[0x1E0DEAFA0];
  *(_QWORD *)(v0 + 48) = KeyPath;
  *(_QWORD *)(v0 + 56) = v2;
  *(_QWORD *)(v0 + 64) = 0;
  *(_BYTE *)(v0 + 72) = 1;
  *(_WORD *)(v0 + 74) = 0;
  v3 = swift_getKeyPath();
  v4 = MEMORY[0x1E0DEB418];
  strcpy((char *)(v0 + 80), "Sample Count");
  *(_BYTE *)(v0 + 93) = 0;
  *(_WORD *)(v0 + 94) = -5120;
  *(_QWORD *)(v0 + 96) = v3;
  *(_QWORD *)(v0 + 104) = v4;
  *(_QWORD *)(v0 + 112) = 0;
  *(_BYTE *)(v0 + 120) = 1;
  *(_WORD *)(v0 + 122) = 0;
  v5 = swift_getKeyPath();
  v6 = MEMORY[0x1E0DEB188];
  *(_QWORD *)(v0 + 128) = 0x7469736E65746E49;
  *(_QWORD *)(v0 + 136) = 0xE900000000000079;
  *(_QWORD *)(v0 + 144) = v5;
  *(_QWORD *)(v0 + 152) = v6;
  *(_QWORD *)(v0 + 160) = 0;
  *(_BYTE *)(v0 + 168) = 1;
  *(_WORD *)(v0 + 170) = 0;
  v7 = swift_getKeyPath();
  sub_1B1A19D70(0, &qword_1ED4BB080, MEMORY[0x1E0DEDD20]);
  v9 = v8;
  *(_QWORD *)(v0 + 176) = 0x7265746E6543;
  *(_QWORD *)(v0 + 184) = 0xE600000000000000;
  *(_QWORD *)(v0 + 192) = v7;
  *(_QWORD *)(v0 + 200) = v8;
  *(_QWORD *)(v0 + 208) = 0;
  *(_BYTE *)(v0 + 216) = 1;
  *(_WORD *)(v0 + 218) = 0;
  v10 = swift_getKeyPath();
  *(_QWORD *)(v0 + 224) = 0x5A206D6F7246;
  *(_QWORD *)(v0 + 232) = 0xE600000000000000;
  *(_QWORD *)(v0 + 240) = v10;
  *(_QWORD *)(v0 + 248) = v6;
  *(_QWORD *)(v0 + 256) = 0;
  *(_BYTE *)(v0 + 264) = 1;
  *(_WORD *)(v0 + 266) = 0;
  v11 = swift_getKeyPath();
  *(_QWORD *)(v0 + 272) = 0x676E41206D6F7246;
  *(_QWORD *)(v0 + 280) = 0xEA0000000000656CLL;
  *(_QWORD *)(v0 + 288) = v11;
  *(_QWORD *)(v0 + 296) = v6;
  *(_QWORD *)(v0 + 304) = 0;
  *(_BYTE *)(v0 + 312) = 1;
  *(_WORD *)(v0 + 314) = 0;
  v12 = swift_getKeyPath();
  *(_QWORD *)(v0 + 320) = 0x696853206D6F7246;
  *(_QWORD *)(v0 + 328) = 0xEA00000000007466;
  *(_QWORD *)(v0 + 336) = v12;
  *(_QWORD *)(v0 + 344) = v9;
  *(_QWORD *)(v0 + 352) = 0;
  *(_BYTE *)(v0 + 360) = 1;
  *(_WORD *)(v0 + 362) = 0;
  v13 = swift_getKeyPath();
  *(_QWORD *)(v0 + 368) = 1512075092;
  *(_QWORD *)(v0 + 376) = 0xE400000000000000;
  *(_QWORD *)(v0 + 384) = v13;
  *(_QWORD *)(v0 + 392) = v6;
  *(_QWORD *)(v0 + 400) = 0;
  *(_BYTE *)(v0 + 408) = 1;
  *(_WORD *)(v0 + 410) = 0;
  v14 = swift_getKeyPath();
  *(_QWORD *)(v0 + 416) = 0x656C676E41206F54;
  *(_QWORD *)(v0 + 424) = 0xE800000000000000;
  *(_QWORD *)(v0 + 432) = v14;
  *(_QWORD *)(v0 + 440) = v6;
  *(_QWORD *)(v0 + 448) = 0;
  *(_BYTE *)(v0 + 456) = 1;
  *(_WORD *)(v0 + 458) = 0;
  v15 = swift_getKeyPath();
  *(_QWORD *)(v0 + 464) = 0x7466696853206F54;
  *(_QWORD *)(v0 + 472) = 0xE800000000000000;
  *(_QWORD *)(v0 + 480) = v15;
  *(_QWORD *)(v0 + 488) = v9;
  *(_QWORD *)(v0 + 496) = 0;
  *(_BYTE *)(v0 + 504) = 1;
  *(_WORD *)(v0 + 506) = 0;
  v16 = swift_getKeyPath();
  sub_1B1A19D70(0, (unint64_t *)&qword_1ED4BB0A0, (uint64_t (*)(uint64_t, _QWORD, unint64_t))MEMORY[0x1E0DEDD50]);
  v18 = v17;
  *(_QWORD *)(v0 + 512) = 0x31726F6C6F43;
  *(_QWORD *)(v0 + 520) = 0xE600000000000000;
  *(_QWORD *)(v0 + 528) = v16;
  *(_QWORD *)(v0 + 536) = v17;
  *(_QWORD *)(v0 + 544) = 0;
  *(_BYTE *)(v0 + 552) = 1;
  *(_WORD *)(v0 + 554) = 0;
  v19 = swift_getKeyPath();
  *(_QWORD *)(v0 + 560) = 0x32726F6C6F43;
  *(_QWORD *)(v0 + 568) = 0xE600000000000000;
  *(_QWORD *)(v0 + 576) = v19;
  *(_QWORD *)(v0 + 584) = v18;
  *(_QWORD *)(v0 + 592) = 0;
  *(_BYTE *)(v0 + 600) = 1;
  *(_WORD *)(v0 + 602) = 0;
  v20 = swift_getKeyPath();
  *(_QWORD *)(v0 + 608) = 0x33726F6C6F43;
  *(_QWORD *)(v0 + 616) = 0xE600000000000000;
  *(_QWORD *)(v0 + 624) = v20;
  *(_QWORD *)(v0 + 632) = v18;
  *(_QWORD *)(v0 + 640) = 0;
  *(_BYTE *)(v0 + 648) = 1;
  *(_WORD *)(v0 + 650) = 0;
  v21 = swift_getKeyPath();
  strcpy((char *)(v0 + 656), "Mask Enabled");
  *(_BYTE *)(v0 + 669) = 0;
  *(_WORD *)(v0 + 670) = -5120;
  *(_QWORD *)(v0 + 672) = v21;
  *(_QWORD *)(v0 + 680) = v2;
  *(_QWORD *)(v0 + 688) = 0;
  *(_BYTE *)(v0 + 696) = 1;
  *(_WORD *)(v0 + 698) = 0;
  v22 = swift_getKeyPath();
  *(_QWORD *)(v0 + 704) = 0x6E6543206B73614DLL;
  *(_QWORD *)(v0 + 712) = 0xEB00000000726574;
  *(_QWORD *)(v0 + 720) = v22;
  *(_QWORD *)(v0 + 728) = v9;
  *(_QWORD *)(v0 + 736) = 0;
  *(_BYTE *)(v0 + 744) = 1;
  *(_WORD *)(v0 + 746) = 0;
  v23 = swift_getKeyPath();
  *(_QWORD *)(v0 + 752) = 0x646152206B73614DLL;
  *(_QWORD *)(v0 + 760) = 0xEB00000000737569;
  *(_QWORD *)(v0 + 768) = v23;
  *(_QWORD *)(v0 + 776) = v6;
  *(_QWORD *)(v0 + 784) = 0;
  *(_BYTE *)(v0 + 792) = 1;
  *(_WORD *)(v0 + 794) = 0;
  v24 = swift_getKeyPath();
  *(_QWORD *)(v0 + 800) = 0xD000000000000010;
  *(_QWORD *)(v0 + 808) = 0x80000001B2347B30;
  *(_QWORD *)(v0 + 816) = v24;
  *(_QWORD *)(v0 + 824) = v6;
  *(_QWORD *)(v0 + 832) = 0;
  *(_BYTE *)(v0 + 840) = 1;
  *(_WORD *)(v0 + 842) = 0;
  return v0;
}

char *sub_1B2014F08()
{
  return sel_sampleCount;
}

id sub_1B2014F14@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, sel_sampleCount);
  *a2 = result;
  return result;
}

id sub_1B2014F44(_QWORD *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setSampleCount_, *a1);
}

char *sub_1B2014F58()
{
  return sel_intensity;
}

char *sub_1B2014F64()
{
  return sel_center;
}

id sub_1B2014F70@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;
  uint64_t v4;

  result = objc_msgSend(*a1, sel_center);
  *a2 = v4;
  return result;
}

id sub_1B2014FA0(double *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setCenter_, *a1);
}

char *sub_1B2014FB4()
{
  return sel_fromZ;
}

id sub_1B2014FC0@<X0>(id *a1@<X0>, _DWORD *a2@<X8>)
{
  id result;
  int v4;

  result = objc_msgSend(*a1, sel_fromZ);
  *a2 = v4;
  return result;
}

id sub_1B2014FF0(_DWORD *a1, id *a2, double a3)
{
  LODWORD(a3) = *a1;
  return objc_msgSend(*a2, sel_setFromZ_, a3);
}

char *sub_1B2015004()
{
  return sel_fromAngle;
}

id sub_1B2015010@<X0>(id *a1@<X0>, _DWORD *a2@<X8>)
{
  id result;
  int v4;

  result = objc_msgSend(*a1, sel_fromAngle);
  *a2 = v4;
  return result;
}

id sub_1B2015040(_DWORD *a1, id *a2, double a3)
{
  LODWORD(a3) = *a1;
  return objc_msgSend(*a2, sel_setFromAngle_, a3);
}

char *sub_1B2015054()
{
  return sel_fromShift;
}

id sub_1B2015060@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;
  uint64_t v4;

  result = objc_msgSend(*a1, sel_fromShift);
  *a2 = v4;
  return result;
}

id sub_1B2015090(double *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setFromShift_, *a1);
}

void *sub_1B20150A4()
{
  return &sel_toZ;
}

id sub_1B20150B0@<X0>(id *a1@<X0>, _DWORD *a2@<X8>)
{
  id result;
  int v4;

  result = objc_msgSend(*a1, "toZ");
  *a2 = v4;
  return result;
}

id sub_1B20150E0(_DWORD *a1, id *a2, double a3)
{
  LODWORD(a3) = *a1;
  return objc_msgSend(*a2, sel_setToZ_, a3);
}

char *sub_1B20150F4()
{
  return sel_toAngle;
}

id sub_1B2015100@<X0>(id *a1@<X0>, _DWORD *a2@<X8>)
{
  id result;
  int v4;

  result = objc_msgSend(*a1, sel_toAngle);
  *a2 = v4;
  return result;
}

id sub_1B2015130(_DWORD *a1, id *a2, double a3)
{
  LODWORD(a3) = *a1;
  return objc_msgSend(*a2, sel_setToAngle_, a3);
}

char *sub_1B2015144()
{
  return sel_toShift;
}

id sub_1B2015150@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;
  uint64_t v4;

  result = objc_msgSend(*a1, sel_toShift);
  *a2 = v4;
  return result;
}

id sub_1B2015180(double *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setToShift_, *a1);
}

char *sub_1B2015194()
{
  return sel_color1;
}

id sub_1B20151A0@<X0>(id *a1@<X0>, _OWORD *a2@<X8>)
{
  id result;
  __int128 v4;

  result = objc_msgSend(*a1, sel_color1);
  *a2 = v4;
  return result;
}

id sub_1B20151D0(double *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setColor1_, *a1);
}

char *sub_1B20151E4()
{
  return sel_color2;
}

id sub_1B20151F0@<X0>(id *a1@<X0>, _OWORD *a2@<X8>)
{
  id result;
  __int128 v4;

  result = objc_msgSend(*a1, sel_color2);
  *a2 = v4;
  return result;
}

id sub_1B2015220(double *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setColor2_, *a1);
}

char *sub_1B2015234()
{
  return sel_color3;
}

id sub_1B2015240@<X0>(id *a1@<X0>, _OWORD *a2@<X8>)
{
  id result;
  __int128 v4;

  result = objc_msgSend(*a1, sel_color3);
  *a2 = v4;
  return result;
}

id sub_1B2015270(double *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setColor3_, *a1);
}

char *sub_1B2015284()
{
  return sel_unMultBlending;
}

id sub_1B2015290@<X0>(id *a1@<X0>, _DWORD *a2@<X8>)
{
  id result;
  int v4;

  result = objc_msgSend(*a1, sel_unMultBlending);
  *a2 = v4;
  return result;
}

id sub_1B20152C0(_DWORD *a1, id *a2, double a3)
{
  LODWORD(a3) = *a1;
  return objc_msgSend(*a2, sel_setUnMultBlending_, a3);
}

char *sub_1B20152D4()
{
  return sel_chromaticTransform;
}

id sub_1B20152E0@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, sel_chromaticTransform);
  *a2 = result;
  return result;
}

id sub_1B2015318(_QWORD *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setChromaticTransform_, *a1);
}

char *sub_1B201532C()
{
  return sel_filterQuality;
}

id sub_1B2015338@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, sel_filterQuality);
  *a2 = result;
  return result;
}

id sub_1B2015368(_QWORD *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setFilterQuality_, *a1);
}

id sub_1B201537C@<X0>(id *a1@<X0>, _DWORD *a2@<X8>)
{
  id result;
  int v4;

  result = objc_msgSend(*a1, sel_radius);
  *a2 = v4;
  return result;
}

id sub_1B20153AC(_DWORD *a1, id *a2, double a3)
{
  LODWORD(a3) = *a1;
  return objc_msgSend(*a2, sel_setRadius_, a3);
}

char *sub_1B20153C0()
{
  return sel_lensBlur;
}

id sub_1B20153CC@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, sel_lensBlur);
  *a2 = result;
  return result;
}

id sub_1B2015404(_QWORD *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setLensBlur_, *a1);
}

id sub_1B2015418@<X0>(id *a1@<X0>, _DWORD *a2@<X8>)
{
  id result;
  int v4;

  result = objc_msgSend(*a1, sel_intensity);
  *a2 = v4;
  return result;
}

id sub_1B2015448(_DWORD *a1, id *a2, double a3)
{
  LODWORD(a3) = *a1;
  return objc_msgSend(*a2, sel_setIntensity_, a3);
}

id sub_1B201545C@<X0>(id *a1@<X0>, _DWORD *a2@<X8>)
{
  id result;
  int v4;

  result = objc_msgSend(*a1, sel_scale);
  *a2 = v4;
  return result;
}

id sub_1B201548C(_DWORD *a1, id *a2, double a3)
{
  LODWORD(a3) = *a1;
  return objc_msgSend(*a2, sel_setScale_, a3);
}

char *sub_1B20154A0()
{
  return sel_isColored;
}

id sub_1B20154AC@<X0>(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, sel_isColored);
  *a2 = (_BYTE)result;
  return result;
}

id sub_1B20154DC(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setColored_, *a1);
}

char *sub_1B20154F0()
{
  return sel_grain;
}

id sub_1B20154FC@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, sel_grain);
  *a2 = result;
  return result;
}

id sub_1B2015534(_QWORD *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setGrain_, *a1);
}

char *sub_1B2015548()
{
  return sel_anamorphic;
}

id sub_1B2015554@<X0>(id *a1@<X0>, _DWORD *a2@<X8>)
{
  id result;
  int v4;

  result = objc_msgSend(*a1, sel_anamorphic);
  *a2 = v4;
  return result;
}

id sub_1B2015584(_DWORD *a1, id *a2, double a3)
{
  LODWORD(a3) = *a1;
  return objc_msgSend(*a2, sel_setAnamorphic_, a3);
}

char *sub_1B2015598()
{
  return sel_softness;
}

id sub_1B20155A4@<X0>(id *a1@<X0>, _DWORD *a2@<X8>)
{
  id result;
  int v4;

  result = objc_msgSend(*a1, sel_softness);
  *a2 = v4;
  return result;
}

id sub_1B20155D4(_DWORD *a1, id *a2, double a3)
{
  LODWORD(a3) = *a1;
  return objc_msgSend(*a2, sel_setSoftness_, a3);
}

char *sub_1B20155E8()
{
  return sel_vignetting;
}

id sub_1B20155F4@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, sel_vignetting);
  *a2 = result;
  return result;
}

id sub_1B201562C(_QWORD *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setVignetting_, *a1);
}

char *sub_1B2015640()
{
  return sel_motionBlur;
}

id sub_1B201564C@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, sel_motionBlur);
  *a2 = result;
  return result;
}

id sub_1B2015684(_QWORD *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setMotionBlur_, *a1);
}

char *sub_1B2015698()
{
  return sel_strength;
}

id sub_1B20156A4@<X0>(id *a1@<X0>, _DWORD *a2@<X8>)
{
  id result;
  int v4;

  result = objc_msgSend(*a1, sel_strength);
  *a2 = v4;
  return result;
}

id sub_1B20156D4(_DWORD *a1, id *a2, double a3)
{
  LODWORD(a3) = *a1;
  return objc_msgSend(*a2, sel_setStrength_, a3);
}

char *sub_1B20156E8()
{
  return sel_colorFringe;
}

id sub_1B20156F4@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, sel_colorFringe);
  *a2 = result;
  return result;
}

id sub_1B201572C(_QWORD *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setColorFringe_, *a1);
}

char *sub_1B2015740()
{
  return sel_mode;
}

id sub_1B201574C@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, sel_mode);
  *a2 = result;
  return result;
}

id sub_1B201577C(_QWORD *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setMode_, *a1);
}

char *sub_1B2015790()
{
  return sel_toeStrength;
}

id sub_1B201579C@<X0>(id *a1@<X0>, _DWORD *a2@<X8>)
{
  id result;
  int v4;

  result = objc_msgSend(*a1, sel_toeStrength);
  *a2 = v4;
  return result;
}

id sub_1B20157CC(_DWORD *a1, id *a2, double a3)
{
  LODWORD(a3) = *a1;
  return objc_msgSend(*a2, sel_setToeStrength_, a3);
}

char *sub_1B20157E0()
{
  return sel_toeLength;
}

id sub_1B20157EC@<X0>(id *a1@<X0>, _DWORD *a2@<X8>)
{
  id result;
  int v4;

  result = objc_msgSend(*a1, sel_toeLength);
  *a2 = v4;
  return result;
}

id sub_1B201581C(_DWORD *a1, id *a2, double a3)
{
  LODWORD(a3) = *a1;
  return objc_msgSend(*a2, sel_setToeLength_, a3);
}

char *sub_1B2015830()
{
  return sel_shoulderStrength;
}

id sub_1B201583C@<X0>(id *a1@<X0>, _DWORD *a2@<X8>)
{
  id result;
  int v4;

  result = objc_msgSend(*a1, sel_shoulderStrength);
  *a2 = v4;
  return result;
}

id sub_1B201586C(_DWORD *a1, id *a2, double a3)
{
  LODWORD(a3) = *a1;
  return objc_msgSend(*a2, sel_setShoulderStrength_, a3);
}

char *sub_1B2015880()
{
  return sel_shoulderLength;
}

id sub_1B201588C@<X0>(id *a1@<X0>, _DWORD *a2@<X8>)
{
  id result;
  int v4;

  result = objc_msgSend(*a1, sel_shoulderLength);
  *a2 = v4;
  return result;
}

id sub_1B20158BC(_DWORD *a1, id *a2, double a3)
{
  LODWORD(a3) = *a1;
  return objc_msgSend(*a2, sel_setShoulderLength_, a3);
}

char *sub_1B20158D0()
{
  return sel_shoulderAngle;
}

id sub_1B20158DC@<X0>(id *a1@<X0>, _DWORD *a2@<X8>)
{
  id result;
  int v4;

  result = objc_msgSend(*a1, sel_shoulderAngle);
  *a2 = v4;
  return result;
}

id sub_1B201590C(_DWORD *a1, id *a2, double a3)
{
  LODWORD(a3) = *a1;
  return objc_msgSend(*a2, sel_setShoulderAngle_, a3);
}

char *sub_1B2015920()
{
  return sel_gamma;
}

id sub_1B201592C@<X0>(id *a1@<X0>, _DWORD *a2@<X8>)
{
  id result;
  int v4;

  result = objc_msgSend(*a1, sel_gamma);
  *a2 = v4;
  return result;
}

id sub_1B201595C(_DWORD *a1, id *a2, double a3)
{
  LODWORD(a3) = *a1;
  return objc_msgSend(*a2, sel_setGamma_, a3);
}

char *sub_1B2015970()
{
  return sel_toneMapping;
}

id sub_1B201597C@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, sel_toneMapping);
  *a2 = result;
  return result;
}

id sub_1B20159B4(_QWORD *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setToneMapping_, *a1);
}

char *sub_1B20159C8()
{
  return sel_value;
}

id sub_1B20159D4@<X0>(id *a1@<X0>, _DWORD *a2@<X8>)
{
  id result;
  int v4;

  result = objc_msgSend(*a1, sel_value);
  *a2 = v4;
  return result;
}

id sub_1B2015A04(_DWORD *a1, id *a2, double a3)
{
  LODWORD(a3) = *a1;
  return objc_msgSend(*a2, sel_setValue_, a3);
}

char *sub_1B2015A18()
{
  return sel_exposure;
}

id sub_1B2015A24@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, sel_exposure);
  *a2 = result;
  return result;
}

id sub_1B2015A5C(_QWORD *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setExposure_, *a1);
}

char *sub_1B2015A70()
{
  return sel_saturation;
}

id sub_1B2015A7C@<X0>(id *a1@<X0>, _DWORD *a2@<X8>)
{
  id result;
  int v4;

  result = objc_msgSend(*a1, sel_saturation);
  *a2 = v4;
  return result;
}

id sub_1B2015AAC(_DWORD *a1, id *a2, double a3)
{
  LODWORD(a3) = *a1;
  return objc_msgSend(*a2, sel_setSaturation_, a3);
}

char *sub_1B2015AC0()
{
  return sel_contrast;
}

id sub_1B2015ACC@<X0>(id *a1@<X0>, _DWORD *a2@<X8>)
{
  id result;
  int v4;

  result = objc_msgSend(*a1, sel_contrast);
  *a2 = v4;
  return result;
}

id sub_1B2015AFC(_DWORD *a1, id *a2, double a3)
{
  LODWORD(a3) = *a1;
  return objc_msgSend(*a2, sel_setContrast_, a3);
}

char *sub_1B2015B10()
{
  return sel_whiteBalanceTemperature;
}

id sub_1B2015B1C@<X0>(id *a1@<X0>, _DWORD *a2@<X8>)
{
  id result;
  int v4;

  result = objc_msgSend(*a1, sel_whiteBalanceTemperature);
  *a2 = v4;
  return result;
}

id sub_1B2015B4C(_DWORD *a1, id *a2, double a3)
{
  LODWORD(a3) = *a1;
  return objc_msgSend(*a2, sel_setWhiteBalanceTemperature_, a3);
}

char *sub_1B2015B60()
{
  return sel_whiteBalanceTint;
}

id sub_1B2015B6C@<X0>(id *a1@<X0>, _DWORD *a2@<X8>)
{
  id result;
  int v4;

  result = objc_msgSend(*a1, sel_whiteBalanceTint);
  *a2 = v4;
  return result;
}

id sub_1B2015B9C(_DWORD *a1, id *a2, double a3)
{
  LODWORD(a3) = *a1;
  return objc_msgSend(*a2, sel_setWhiteBalanceTint_, a3);
}

char *sub_1B2015BB0()
{
  return sel_liftColor;
}

id sub_1B2015BBC@<X0>(id *a1@<X0>, _OWORD *a2@<X8>)
{
  id result;
  __int128 v4;

  result = objc_msgSend(*a1, sel_liftColor);
  *a2 = v4;
  return result;
}

id sub_1B2015BEC(double *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setLiftColor_, *a1);
}

char *sub_1B2015C00()
{
  return sel_liftOffset;
}

id sub_1B2015C0C@<X0>(id *a1@<X0>, _DWORD *a2@<X8>)
{
  id result;
  int v4;

  result = objc_msgSend(*a1, sel_liftOffset);
  *a2 = v4;
  return result;
}

id sub_1B2015C3C(_DWORD *a1, id *a2, double a3)
{
  LODWORD(a3) = *a1;
  return objc_msgSend(*a2, sel_setLiftOffset_, a3);
}

char *sub_1B2015C50()
{
  return sel_gammaColor;
}

id sub_1B2015C5C@<X0>(id *a1@<X0>, _OWORD *a2@<X8>)
{
  id result;
  __int128 v4;

  result = objc_msgSend(*a1, sel_gammaColor);
  *a2 = v4;
  return result;
}

id sub_1B2015C8C(double *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setGammaColor_, *a1);
}

char *sub_1B2015CA0()
{
  return sel_gammaOffset;
}

id sub_1B2015CAC@<X0>(id *a1@<X0>, _DWORD *a2@<X8>)
{
  id result;
  int v4;

  result = objc_msgSend(*a1, sel_gammaOffset);
  *a2 = v4;
  return result;
}

id sub_1B2015CDC(_DWORD *a1, id *a2, double a3)
{
  LODWORD(a3) = *a1;
  return objc_msgSend(*a2, sel_setGammaOffset_, a3);
}

char *sub_1B2015CF0()
{
  return sel_gainColor;
}

id sub_1B2015CFC@<X0>(id *a1@<X0>, _OWORD *a2@<X8>)
{
  id result;
  __int128 v4;

  result = objc_msgSend(*a1, sel_gainColor);
  *a2 = v4;
  return result;
}

id sub_1B2015D2C(double *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setGainColor_, *a1);
}

char *sub_1B2015D40()
{
  return sel_gainOffset;
}

id sub_1B2015D4C@<X0>(id *a1@<X0>, _DWORD *a2@<X8>)
{
  id result;
  int v4;

  result = objc_msgSend(*a1, sel_gainOffset);
  *a2 = v4;
  return result;
}

id sub_1B2015D7C(_DWORD *a1, id *a2, double a3)
{
  LODWORD(a3) = *a1;
  return objc_msgSend(*a2, sel_setGainOffset_, a3);
}

char *sub_1B2015D90()
{
  return sel_colorGrading;
}

id sub_1B2015D9C@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, sel_colorGrading);
  *a2 = result;
  return result;
}

id sub_1B2015DD4(_QWORD *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setColorGrading_, *a1);
}

char *sub_1B2015DE8()
{
  return sel_fStop;
}

id sub_1B2015DF4@<X0>(id *a1@<X0>, _DWORD *a2@<X8>)
{
  id result;
  int v4;

  result = objc_msgSend(*a1, sel_fStop);
  *a2 = v4;
  return result;
}

id sub_1B2015E24(_DWORD *a1, id *a2, double a3)
{
  LODWORD(a3) = *a1;
  return objc_msgSend(*a2, sel_setFStop_, a3);
}

char *sub_1B2015E38()
{
  return sel_apertureBladeCount;
}

id sub_1B2015E44@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, sel_apertureBladeCount);
  *a2 = result;
  return result;
}

id sub_1B2015E74(_QWORD *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setApertureBladeCount_, *a1);
}

char *sub_1B2015E88()
{
  return sel_focalBlurSampleCount;
}

id sub_1B2015E94@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, sel_focalBlurSampleCount);
  *a2 = result;
  return result;
}

id sub_1B2015EC4(_QWORD *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setFocalBlurSampleCount_, *a1);
}

char *sub_1B2015ED8()
{
  return sel_depthOfField;
}

id sub_1B2015EE4@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, sel_depthOfField);
  *a2 = result;
  return result;
}

id sub_1B2015F1C(_QWORD *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setDepthOfField_, *a1);
}

char *sub_1B2015F30()
{
  return sel_threshold;
}

id sub_1B2015F3C@<X0>(id *a1@<X0>, _DWORD *a2@<X8>)
{
  id result;
  int v4;

  result = objc_msgSend(*a1, sel_threshold);
  *a2 = v4;
  return result;
}

id sub_1B2015F6C(_DWORD *a1, id *a2, double a3)
{
  LODWORD(a3) = *a1;
  return objc_msgSend(*a2, sel_setThreshold_, a3);
}

char *sub_1B2015F80()
{
  return sel_thresholdSmoothness;
}

id sub_1B2015F8C@<X0>(id *a1@<X0>, _DWORD *a2@<X8>)
{
  id result;
  int v4;

  result = objc_msgSend(*a1, sel_thresholdSmoothness);
  *a2 = v4;
  return result;
}

id sub_1B2015FBC(_DWORD *a1, id *a2, double a3)
{
  LODWORD(a3) = *a1;
  return objc_msgSend(*a2, sel_setThresholdSmoothness_, a3);
}

char *sub_1B2015FD0()
{
  return sel_iterationCount;
}

id sub_1B2015FDC@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, sel_iterationCount);
  *a2 = result;
  return result;
}

id sub_1B201600C(_QWORD *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setIterationCount_, *a1);
}

char *sub_1B2016020()
{
  return sel_useHighQuality;
}

id sub_1B201602C@<X0>(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, sel_useHighQuality);
  *a2 = (_BYTE)result;
  return result;
}

id sub_1B201605C(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setUseHighQuality_, *a1);
}

char *sub_1B2016070()
{
  return sel_colorFilter;
}

id sub_1B201607C@<X0>(id *a1@<X0>, _OWORD *a2@<X8>)
{
  id result;
  __int128 v4;

  result = objc_msgSend(*a1, sel_colorFilter);
  *a2 = v4;
  return result;
}

id sub_1B20160AC(double *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setColorFilter_, *a1);
}

char *sub_1B20160C0()
{
  return sel_bloom;
}

id sub_1B20160CC@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, sel_bloom);
  *a2 = result;
  return result;
}

id sub_1B2016104(_QWORD *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setBloom_, *a1);
}

uint64_t sub_1B2016118()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  sub_1B1A02758(0, &qword_1EEF5CE88, (uint64_t)&type metadata for ScriptKeyPath, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B22ADAF0;
  KeyPath = swift_getKeyPath();
  *(_QWORD *)(v0 + 32) = 0x656C6269736956;
  *(_QWORD *)(v0 + 40) = 0xE700000000000000;
  v2 = MEMORY[0x1E0DEAFA0];
  *(_QWORD *)(v0 + 48) = KeyPath;
  *(_QWORD *)(v0 + 56) = v2;
  *(_QWORD *)(v0 + 64) = 0;
  *(_BYTE *)(v0 + 72) = 1;
  *(_WORD *)(v0 + 74) = 0;
  v3 = swift_getKeyPath();
  sub_1B1A19D70(0, (unint64_t *)&qword_1ED4BB0A0, (uint64_t (*)(uint64_t, _QWORD, unint64_t))MEMORY[0x1E0DEDD50]);
  v5 = v4;
  *(_QWORD *)(v0 + 80) = 0x6E6F697469736F50;
  *(_QWORD *)(v0 + 88) = 0xE800000000000000;
  *(_QWORD *)(v0 + 96) = v3;
  *(_QWORD *)(v0 + 104) = v4;
  *(_QWORD *)(v0 + 112) = 0;
  *(_BYTE *)(v0 + 120) = 1;
  *(_WORD *)(v0 + 122) = 0;
  v6 = swift_getKeyPath();
  *(_QWORD *)(v0 + 128) = 0x72656C7545;
  *(_QWORD *)(v0 + 136) = 0xE500000000000000;
  *(_QWORD *)(v0 + 144) = v6;
  *(_QWORD *)(v0 + 152) = v5;
  *(_QWORD *)(v0 + 160) = 0;
  *(_BYTE *)(v0 + 168) = 1;
  *(_WORD *)(v0 + 170) = 0;
  v7 = swift_getKeyPath();
  *(_QWORD *)(v0 + 176) = 0x656C616353;
  *(_QWORD *)(v0 + 184) = 0xE500000000000000;
  *(_QWORD *)(v0 + 192) = v7;
  *(_QWORD *)(v0 + 200) = v5;
  *(_QWORD *)(v0 + 208) = 0;
  *(_BYTE *)(v0 + 216) = 1;
  *(_WORD *)(v0 + 218) = 0;
  v8 = swift_getKeyPath();
  type metadata accessor for simd_float4x4(0);
  *(_QWORD *)(v0 + 224) = 0x725420646C726F57;
  *(_QWORD *)(v0 + 232) = 0xEF6D726F66736E61;
  *(_QWORD *)(v0 + 240) = v8;
  *(_QWORD *)(v0 + 248) = v9;
  *(_QWORD *)(v0 + 256) = 0;
  *(_BYTE *)(v0 + 264) = 1;
  *(_WORD *)(v0 + 266) = 0;
  v10 = swift_getKeyPath();
  v11 = MEMORY[0x1E0DEB188];
  *(_QWORD *)(v0 + 272) = 0x7974696361704FLL;
  *(_QWORD *)(v0 + 280) = 0xE700000000000000;
  *(_QWORD *)(v0 + 288) = v10;
  *(_QWORD *)(v0 + 296) = v11;
  *(_QWORD *)(v0 + 304) = 0;
  *(_BYTE *)(v0 + 312) = 1;
  *(_WORD *)(v0 + 314) = 0;
  v12 = swift_getKeyPath();
  v13 = MEMORY[0x1E0DEB418];
  *(_QWORD *)(v0 + 320) = 0x726564724FLL;
  *(_QWORD *)(v0 + 328) = 0xE500000000000000;
  *(_QWORD *)(v0 + 336) = v12;
  *(_QWORD *)(v0 + 344) = v13;
  *(_QWORD *)(v0 + 352) = 0;
  *(_BYTE *)(v0 + 360) = 1;
  *(_WORD *)(v0 + 362) = 0;
  v14 = swift_getKeyPath();
  strcpy((char *)(v0 + 368), "Casts Shadow");
  *(_BYTE *)(v0 + 381) = 0;
  *(_WORD *)(v0 + 382) = -5120;
  *(_QWORD *)(v0 + 384) = v14;
  *(_QWORD *)(v0 + 392) = v2;
  *(_QWORD *)(v0 + 400) = 0;
  *(_BYTE *)(v0 + 408) = 1;
  *(_WORD *)(v0 + 410) = 0;
  v15 = swift_getKeyPath();
  *(_QWORD *)(v0 + 416) = 0x70756F7247;
  *(_QWORD *)(v0 + 424) = 0xE500000000000000;
  v16 = MEMORY[0x1E0DEE190];
  *(_QWORD *)(v0 + 432) = v15;
  *(_QWORD *)(v0 + 440) = v16;
  *(_QWORD *)(v0 + 448) = 0;
  *(_BYTE *)(v0 + 456) = 1;
  *(_WORD *)(v0 + 458) = 0;
  return v0;
}

uint64_t sub_1B20163A0()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  sub_1B1A02758(0, &qword_1EEF5CE88, (uint64_t)&type metadata for ScriptKeyPath, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B22ADB10;
  KeyPath = swift_getKeyPath();
  type metadata accessor for VFXLightType(0);
  *(_QWORD *)(v0 + 32) = 1701869908;
  *(_QWORD *)(v0 + 40) = 0xE400000000000000;
  *(_QWORD *)(v0 + 48) = KeyPath;
  *(_QWORD *)(v0 + 56) = v2;
  *(_QWORD *)(v0 + 64) = 0;
  *(_BYTE *)(v0 + 72) = 1;
  *(_WORD *)(v0 + 74) = 0;
  v3 = swift_getKeyPath();
  *(_QWORD *)(v0 + 80) = 0x726F6C6F43;
  *(_QWORD *)(v0 + 88) = 0xE500000000000000;
  v4 = MEMORY[0x1E0DEE9B8] + 8;
  *(_QWORD *)(v0 + 96) = v3;
  *(_QWORD *)(v0 + 104) = v4;
  *(_QWORD *)(v0 + 112) = 0;
  *(_BYTE *)(v0 + 120) = 1;
  *(_WORD *)(v0 + 122) = 0;
  v5 = swift_getKeyPath();
  v6 = MEMORY[0x1E0DEB188];
  *(_QWORD *)(v0 + 128) = 0x7469736E65746E49;
  *(_QWORD *)(v0 + 136) = 0xE900000000000079;
  *(_QWORD *)(v0 + 144) = v5;
  *(_QWORD *)(v0 + 152) = v6;
  *(_QWORD *)(v0 + 160) = 0;
  *(_BYTE *)(v0 + 168) = 1;
  *(_WORD *)(v0 + 170) = 0;
  v7 = swift_getKeyPath();
  *(_QWORD *)(v0 + 176) = 0x74617265706D6554;
  *(_QWORD *)(v0 + 184) = 0xEB00000000657275;
  *(_QWORD *)(v0 + 192) = v7;
  *(_QWORD *)(v0 + 200) = v6;
  *(_QWORD *)(v0 + 208) = 0;
  *(_BYTE *)(v0 + 216) = 1;
  *(_WORD *)(v0 + 218) = 0;
  v8 = swift_getKeyPath();
  v9 = MEMORY[0x1E0DEE190];
  *(_QWORD *)(v0 + 224) = 0x70756F7247;
  *(_QWORD *)(v0 + 232) = 0xE500000000000000;
  *(_QWORD *)(v0 + 240) = v8;
  *(_QWORD *)(v0 + 248) = v9;
  *(_QWORD *)(v0 + 256) = 0;
  *(_BYTE *)(v0 + 264) = 1;
  *(_WORD *)(v0 + 266) = 0;
  v10 = swift_getKeyPath();
  *(_QWORD *)(v0 + 272) = 0x65636E6174736944;
  *(_QWORD *)(v0 + 280) = 0xE800000000000000;
  *(_QWORD *)(v0 + 288) = v10;
  *(_QWORD *)(v0 + 296) = v6;
  *(_QWORD *)(v0 + 304) = 0;
  *(_BYTE *)(v0 + 312) = 1;
  *(_WORD *)(v0 + 314) = 0;
  v11 = swift_getKeyPath();
  v12 = MEMORY[0x1E0DEAFA0];
  strcpy((char *)(v0 + 320), "Enable shadows");
  *(_BYTE *)(v0 + 335) = -18;
  *(_QWORD *)(v0 + 336) = v11;
  *(_QWORD *)(v0 + 344) = v12;
  *(_QWORD *)(v0 + 352) = 0;
  *(_BYTE *)(v0 + 360) = 1;
  *(_WORD *)(v0 + 362) = 0;
  v13 = swift_getKeyPath();
  *(_QWORD *)(v0 + 368) = 0x6E412072656E6E49;
  *(_QWORD *)(v0 + 376) = 0xEB00000000656C67;
  *(_QWORD *)(v0 + 384) = v13;
  *(_QWORD *)(v0 + 392) = v6;
  *(_QWORD *)(v0 + 400) = 0;
  *(_BYTE *)(v0 + 408) = 1;
  *(_WORD *)(v0 + 410) = 0;
  v14 = swift_getKeyPath();
  *(_QWORD *)(v0 + 416) = 0x6E4120726574754FLL;
  *(_QWORD *)(v0 + 424) = 0xEB00000000656C67;
  *(_QWORD *)(v0 + 432) = v14;
  *(_QWORD *)(v0 + 440) = v6;
  *(_QWORD *)(v0 + 448) = 0;
  *(_BYTE *)(v0 + 456) = 1;
  *(_WORD *)(v0 + 458) = 0;
  v15 = swift_getKeyPath();
  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BB150, v4, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  strcpy((char *)(v0 + 464), "Gobo Contents");
  *(_WORD *)(v0 + 478) = -4864;
  *(_QWORD *)(v0 + 480) = v15;
  *(_QWORD *)(v0 + 488) = v16;
  *(_QWORD *)(v0 + 496) = 0;
  *(_BYTE *)(v0 + 504) = 1;
  *(_WORD *)(v0 + 506) = 0;
  v17 = swift_getKeyPath();
  sub_1B1A19D70(0, (unint64_t *)&qword_1ED4BB0A0, (uint64_t (*)(uint64_t, _QWORD, unint64_t))MEMORY[0x1E0DEDD50]);
  *(_QWORD *)(v0 + 512) = 0x73746E65747845;
  *(_QWORD *)(v0 + 520) = 0xE700000000000000;
  *(_QWORD *)(v0 + 528) = v17;
  *(_QWORD *)(v0 + 536) = v18;
  *(_QWORD *)(v0 + 544) = 0;
  *(_BYTE *)(v0 + 552) = 1;
  *(_WORD *)(v0 + 554) = 0;
  v19 = swift_getKeyPath();
  *(_QWORD *)(v0 + 560) = 0x7241207377617244;
  *(_QWORD *)(v0 + 568) = 0xEA00000000006165;
  *(_QWORD *)(v0 + 576) = v19;
  *(_QWORD *)(v0 + 584) = v12;
  *(_QWORD *)(v0 + 592) = 0;
  *(_BYTE *)(v0 + 600) = 1;
  *(_WORD *)(v0 + 602) = 0;
  v20 = swift_getKeyPath();
  strcpy((char *)(v0 + 608), "Double Sided");
  *(_BYTE *)(v0 + 621) = 0;
  *(_WORD *)(v0 + 622) = -5120;
  *(_QWORD *)(v0 + 624) = v20;
  *(_QWORD *)(v0 + 632) = v12;
  *(_QWORD *)(v0 + 640) = 0;
  *(_BYTE *)(v0 + 648) = 1;
  *(_WORD *)(v0 + 650) = 0;
  v21 = swift_getKeyPath();
  sub_1B2018B2C();
  *(_QWORD *)(v0 + 656) = 0x656C69666F7250;
  *(_QWORD *)(v0 + 664) = 0xE700000000000000;
  *(_QWORD *)(v0 + 672) = v21;
  *(_QWORD *)(v0 + 680) = v22;
  *(_QWORD *)(v0 + 688) = 0;
  *(_BYTE *)(v0 + 696) = 1;
  *(_WORD *)(v0 + 698) = 0;
  v23 = swift_getKeyPath();
  type metadata accessor for VFXLightProbeType(0);
  *(_QWORD *)(v0 + 704) = 0x79542065626F7250;
  *(_QWORD *)(v0 + 712) = 0xEA00000000006570;
  *(_QWORD *)(v0 + 720) = v23;
  *(_QWORD *)(v0 + 728) = v24;
  *(_QWORD *)(v0 + 736) = 0;
  *(_BYTE *)(v0 + 744) = 1;
  *(_WORD *)(v0 + 746) = 0;
  v25 = swift_getKeyPath();
  *(_QWORD *)(v0 + 752) = 0x654E2065626F7250;
  *(_QWORD *)(v0 + 760) = 0xEA00000000007261;
  *(_QWORD *)(v0 + 768) = v25;
  *(_QWORD *)(v0 + 776) = v6;
  *(_QWORD *)(v0 + 784) = 0;
  *(_BYTE *)(v0 + 792) = 1;
  *(_WORD *)(v0 + 794) = 0;
  v26 = swift_getKeyPath();
  *(_QWORD *)(v0 + 800) = 0x61462065626F7250;
  *(_QWORD *)(v0 + 808) = 0xE900000000000072;
  *(_QWORD *)(v0 + 816) = v26;
  *(_QWORD *)(v0 + 824) = v6;
  *(_QWORD *)(v0 + 832) = 0;
  *(_BYTE *)(v0 + 840) = 1;
  *(_WORD *)(v0 + 842) = 0;
  return v0;
}

