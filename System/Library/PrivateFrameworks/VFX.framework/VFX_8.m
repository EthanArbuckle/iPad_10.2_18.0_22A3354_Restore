unint64_t sub_1B1BF6C94()
{
  unint64_t result;

  result = qword_1EEF5C470;
  if (!qword_1EEF5C470)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2283028, &type metadata for PropertyDescription.Flags);
    atomic_store(result, (unint64_t *)&qword_1EEF5C470);
  }
  return result;
}

uint64_t sub_1B1BF6CD8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1B1BF6CFC@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1BF6448(a1, *(_QWORD **)(v2 + 32), a2);
}

uint64_t sub_1B1BF6D08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1BC40C8(a3, *(_QWORD *)(v3 + 32), a1);
}

void sub_1B1BF6D20()
{
  sub_1B1BF4EF8();
}

uint64_t sub_1B1BF6D2C()
{
  return 8;
}

_QWORD *sub_1B1BF6D38(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

void sub_1B1BF6D44(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  if (swift_isClassType())
    v3 = a2;
  else
    v3 = 0;
  if (v3)
    sub_1B1BF6F5C();
  else
    sub_1B2229A18();
}

uint64_t sub_1B1BF6D88(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  void (*v6)(uint64_t);
  uint64_t v7;
  uint64_t v8;

  v3 = v2;
  if ((*(_BYTE *)(v2 + 112) & 1) == 0)
  {
    v5 = a2 & 1;
    if ((a2 & 1) != 0 || *(_QWORD *)(v2 + 104) > a1)
    {
      if (*(_QWORD *)(v2 + 136))
      {
        return *(_QWORD *)(v2 + 136);
      }
      else
      {
        v6 = *(void (**)(uint64_t))(v2 + 120);
        if (v6)
        {
          v7 = swift_retain();
          v6(v7);
          v8 = sub_1B1BF6D88(a1, v5);
          swift_retain();
          swift_release();
          sub_1B19E5A18((uint64_t)v6);
          *(_QWORD *)(v2 + 136) = v8;
          swift_release();
          return *(_QWORD *)(v2 + 136);
        }
      }
    }
  }
  return v3;
}

_QWORD *sub_1B1BF6E40(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[4];
  __int128 v7;

  v7 = xmmword_1B2246910;
  v3 = sub_1B19FA070(a1, a1[3]);
  sub_1B222A138();
  if (!v1)
  {
    sub_1B19FA070(v6, v6[3]);
    v4 = sub_1B2229D54();
    sub_1B1BF5A60(v4);
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v6);
    v3 = (_QWORD *)v7;
  }
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  return v3;
}

uint64_t sub_1B1BF6F18()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1B1BF6F3C()
{
  uint64_t v0;

  return sub_1B1BF6620(*(void (***)(_QWORD, _QWORD, double))(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48));
}

uint64_t sub_1B1BF6F4C(uint64_t a1)
{
  uint64_t v1;

  return sub_1B1BF6798(a1, *(_QWORD ***)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48));
}

void sub_1B1BF6F5C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED4BAFE0)
  {
    v0 = sub_1B2229A18();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED4BAFE0);
  }
}

uint64_t sub_1B1BF6FB4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1B1BF6FD8()
{
  uint64_t v0;

  return sub_1B1BF6620(*(void (***)(_QWORD, _QWORD, double))(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t sub_1B1BF6FE4(uint64_t a1)
{
  uint64_t v1;

  return sub_1B1BF6798(a1, *(_QWORD ***)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
}

_QWORD *sub_1B1BF6FF0@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1BF5984(a1, a2, *(_QWORD *)(v3 + 32), *(_QWORD *)(v3 + 16), a3);
}

uint64_t sub_1B1BF6FFC()
{
  swift_release();
  return swift_deallocObject();
}

_QWORD *sub_1B1BF7020@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1BF5878(a1, a2, *(uint64_t **)(v3 + 24), *(_QWORD *)(v3 + 16), a3);
}

uint64_t type metadata accessor for InvalidKeyPathStruct(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B19E5E34(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for InvalidKeyPathStruct);
}

uint64_t sub_1B1BF7048()
{
  uint64_t v0;

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for WakeUpEvent()
{
  return objc_opt_self();
}

uint64_t sub_1B1BF708C(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  unint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v25;
  __int128 v26;
  _OWORD v27[5];
  uint64_t v28;
  __int128 v29;
  _OWORD v30[5];
  uint64_t v31;
  _QWORD v32[2];
  _BYTE v33[88];
  __int128 v34;
  _OWORD v35[5];
  uint64_t v36;
  uint64_t v37;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x1E0DEE9D8];
  if (v1)
  {
    v37 = MEMORY[0x1E0DEE9D8];
    sub_1B202A1F4(0, v1, 0);
    v4 = sub_1B1C07550(a1);
    v5 = 0;
    v25 = a1 + 64;
    v2 = v37;
    do
    {
      v6 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v4);
      v8 = *v6;
      v7 = v6[1];
      sub_1B19F8F0C(*(_QWORD *)(a1 + 56) + 88 * v4, (uint64_t)v33);
      v32[0] = v8;
      v32[1] = v7;
      *(_QWORD *)&v29 = v8;
      *((_QWORD *)&v29 + 1) = v7;
      sub_1B19F8F0C((uint64_t)v33, (uint64_t)v30);
      v27[3] = v30[3];
      v27[4] = v30[4];
      v28 = v31;
      v26 = v29;
      v27[0] = v30[0];
      v27[1] = v30[1];
      v27[2] = v30[2];
      swift_bridgeObjectRetain_n();
      sub_1B1A04628((uint64_t)v32, (uint64_t (*)(_QWORD))sub_1B1C190A8);
      sub_1B1A06460();
      v9 = sub_1B222922C();
      v11 = v10;
      sub_1B19F8F0C((uint64_t)v27, (uint64_t)v35);
      *(_QWORD *)&v34 = v9;
      *((_QWORD *)&v34 + 1) = v11;
      sub_1B1A04628((uint64_t)&v26, (uint64_t (*)(_QWORD))sub_1B1C190A8);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1B202A1F4(0, *(_QWORD *)(v2 + 16) + 1, 1);
        v2 = v37;
      }
      v13 = *(_QWORD *)(v2 + 16);
      v12 = *(_QWORD *)(v2 + 24);
      if (v13 >= v12 >> 1)
      {
        sub_1B202A1F4(v12 > 1, v13 + 1, 1);
        v2 = v37;
      }
      *(_QWORD *)(v2 + 16) = v13 + 1;
      v14 = v2 + 104 * v13;
      v15 = v34;
      v16 = v35[1];
      *(_OWORD *)(v14 + 48) = v35[0];
      *(_OWORD *)(v14 + 64) = v16;
      *(_OWORD *)(v14 + 32) = v15;
      v17 = v35[2];
      v18 = v35[3];
      v19 = v35[4];
      *(_QWORD *)(v14 + 128) = v36;
      *(_OWORD *)(v14 + 96) = v18;
      *(_OWORD *)(v14 + 112) = v19;
      *(_OWORD *)(v14 + 80) = v17;
      v20 = v4 >> 6;
      if ((*(_QWORD *)(v25 + 8 * (v4 >> 6)) & (-2 << v4)) != 0)
      {
        v4 = __clz(__rbit64(*(_QWORD *)(v25 + 8 * (v4 >> 6)) & (-2 << v4))) | v4 & 0xFFFFFFFFFFFFFFC0;
      }
      else
      {
        v4 = 1 << *(_BYTE *)(a1 + 32);
        v21 = v20 + 1;
        v22 = (v4 + 63) >> 6;
        if (v20 + 1 < v22)
        {
          v23 = *(_QWORD *)(v25 + 8 * v21);
          if (!v23)
          {
            v21 = v20 + 2;
            if (v20 + 2 >= v22)
              goto LABEL_4;
            v23 = *(_QWORD *)(v25 + 8 * v21);
            if (!v23)
            {
              while (v22 - 3 != v20)
              {
                v23 = *(_QWORD *)(a1 + 88 + 8 * v20++);
                if (v23)
                {
                  v21 = v20 + 2;
                  goto LABEL_12;
                }
              }
              goto LABEL_4;
            }
          }
LABEL_12:
          v4 = __clz(__rbit64(v23)) + (v21 << 6);
        }
      }
LABEL_4:
      ++v5;
    }
    while (v5 != v1);
  }
  return v2;
}

uint64_t sub_1B1BF737C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  __int128 v16;
  uint64_t v17[2];
  __int128 v18;
  uint64_t v19;

  v3 = v2;
  v4 = *(_QWORD *)(a1 + 16);
  v5 = MEMORY[0x1E0DEE9D8];
  if (v4)
  {
    v19 = MEMORY[0x1E0DEE9D8];
    sub_1B202ADD4(0, v4, 0);
    v5 = v19;
    for (i = a1 + 56; ; i += 32)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1B1BFC83C(a2, v17);
      if (v3)
        break;
      v3 = 0;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v9 = v17[0];
      v10 = v17[1];
      v11 = v18;
      v19 = v5;
      v13 = *(_QWORD *)(v5 + 16);
      v12 = *(_QWORD *)(v5 + 24);
      if (v13 >= v12 >> 1)
      {
        v16 = v18;
        sub_1B202ADD4(v12 > 1, v13 + 1, 1);
        v11 = v16;
        v5 = v19;
      }
      *(_QWORD *)(v5 + 16) = v13 + 1;
      v14 = v5 + 32 * v13;
      *(_QWORD *)(v14 + 32) = v9;
      *(_QWORD *)(v14 + 40) = v10;
      *(_OWORD *)(v14 + 48) = v11;
      if (!--v4)
        return v5;
    }
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v5;
}

uint64_t sub_1B1BF74E4(uint64_t a1)
{
  int64_t v2;
  uint64_t result;
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x1E0DEE9D8];
  if (v2)
  {
    v8 = MEMORY[0x1E0DEE9D8];
    sub_1B202A38C(0, v2, 0);
    result = v8;
    v4 = (uint64_t *)(a1 + 32);
    v5 = *(_QWORD *)(v8 + 16);
    do
    {
      v6 = *v4;
      v9 = result;
      v7 = *(_QWORD *)(result + 24);
      if (v5 >= v7 >> 1)
      {
        sub_1B202A38C(v7 > 1, v5 + 1, 1);
        result = v9;
      }
      *(_QWORD *)(result + 16) = v5 + 1;
      *(_QWORD *)(result + 8 * v5 + 32) = v6;
      v4 += 7;
      ++v5;
      --v2;
    }
    while (v2);
  }
  return result;
}

void sub_1B1BF75AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  __int16 v10;

  if (a3 != 0xFFFFFFFFLL
    && a3 << 32 >= (uint64_t)0xFFFFFFFF00000001
    && (int)a3 < *(_QWORD *)(v3 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8))
  {
    v7 = *(_QWORD *)(v3 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
    if (HIDWORD(a3) == -1 || *(_DWORD *)(v7 + 12 * (int)a3 + 8) == HIDWORD(a3))
    {
      v8 = (int *)(v7 + 12 * (int)a3);
      v9 = *(_QWORD *)(*(_QWORD *)(v3 + 136) + 8 * *v8 + 32);
      v10 = *((_WORD *)v8 + 2);
      os_unfair_lock_lock(*(os_unfair_lock_t *)(v9 + 344));
      sub_1B1C0A4A0((char *)v9, v10, a1, a2, v3, a3);
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v9 + 344));
    }
  }
}

void sub_1B1BF76A0(uint64_t a1, __n128 a2)
{
  sub_1B1BF76B8(a1, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))sub_1B1C0A7D0, a2);
}

void sub_1B1BF76AC(uint64_t a1, __n128 a2)
{
  sub_1B1BF76B8(a1, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))sub_1B1C0A988, a2);
}

void sub_1B1BF76B8(uint64_t a1, void (*a2)(uint64_t, uint64_t, uint64_t, uint64_t, __n128), __n128 a3)
{
  uint64_t v3;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;

  if (a1 != 0xFFFFFFFFLL
    && a1 << 32 >= (uint64_t)0xFFFFFFFF00000001
    && (int)a1 < *(_QWORD *)(v3 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8))
  {
    v6 = *(_QWORD *)(v3 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
    if (HIDWORD(a1) == -1 || *(_DWORD *)(v6 + 12 * (int)a1 + 8) == HIDWORD(a1))
    {
      v7 = (int *)(v6 + 12 * (int)a1);
      v8 = *(_QWORD *)(*(_QWORD *)(v3 + 136) + 8 * *v7 + 32);
      v9 = *((unsigned __int16 *)v7 + 2);
      os_unfair_lock_lock(*(os_unfair_lock_t *)(v8 + 344));
      a2(v8, v9, v3, a1, a3);
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v8 + 344));
    }
  }
}

void sub_1B1BF77A8(uint64_t a1, __n128 a2, __n128 a3, __n128 a4, __n128 a5)
{
  sub_1B1BF77C0(a1, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, __n128, __n128, __n128, __n128))sub_1B1C0AB40, a2, a3, a4, a5);
}

void sub_1B1BF77B4(uint64_t a1, __n128 a2, __n128 a3, __n128 a4, __n128 a5)
{
  sub_1B1BF77C0(a1, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, __n128, __n128, __n128, __n128))sub_1B1C0ACC8, a2, a3, a4, a5);
}

void sub_1B1BF77C0(uint64_t a1, void (*a2)(uint64_t, uint64_t, uint64_t, uint64_t, __n128, __n128, __n128, __n128), __n128 a3, __n128 a4, __n128 a5, __n128 a6)
{
  uint64_t v6;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;

  if (a1 != 0xFFFFFFFFLL
    && a1 << 32 >= (uint64_t)0xFFFFFFFF00000001
    && (int)a1 < *(_QWORD *)(v6 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8))
  {
    v9 = *(_QWORD *)(v6 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
    if (HIDWORD(a1) == -1 || *(_DWORD *)(v9 + 12 * (int)a1 + 8) == HIDWORD(a1))
    {
      v10 = (int *)(v9 + 12 * (int)a1);
      v11 = *(_QWORD *)(*(_QWORD *)(v6 + 136) + 8 * *v10 + 32);
      v12 = *((unsigned __int16 *)v10 + 2);
      os_unfair_lock_lock(*(os_unfair_lock_t *)(v11 + 344));
      a2(v11, v12, v6, a1, a3, a4, a5, a6);
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v11 + 344));
    }
  }
}

void sub_1B1BF78B8(uint64_t a1, uint64_t a2)
{
  sub_1B1BF7CD4(a1, a2, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1C0AE50);
}

void sub_1B1BF78C4(uint64_t a1, uint64_t a2)
{
  sub_1B1BF7CD4(a1, a2, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1C08014);
}

void sub_1B1BF78D0(uint64_t a1, uint64_t a2)
{
  sub_1B1BF7CD4(a1, a2, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1C0AFB4);
}

void sub_1B1BF78DC(uint64_t a1, uint64_t a2)
{
  sub_1B1BF7CD4(a1, a2, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1C0B144);
}

void sub_1B1BF78E8(uint64_t a1, uint64_t a2)
{
  sub_1B1BF7CD4(a1, a2, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1C0A310);
}

void sub_1B1BF78F4(uint64_t a1, uint64_t a2)
{
  sub_1B1BF7CD4(a1, a2, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1C0A180);
}

void sub_1B1BF7900(__int128 *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  __int16 v8;

  if (a2 != 0xFFFFFFFFLL
    && a2 << 32 >= (uint64_t)0xFFFFFFFF00000001
    && (int)a2 < *(_QWORD *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8))
  {
    v5 = *(_QWORD *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
    if (HIDWORD(a2) == -1 || *(_DWORD *)(v5 + 12 * (int)a2 + 8) == HIDWORD(a2))
    {
      v6 = (int *)(v5 + 12 * (int)a2);
      v7 = *(_QWORD *)(*(_QWORD *)(v2 + 136) + 8 * *v6 + 32);
      v8 = *((_WORD *)v6 + 2);
      os_unfair_lock_lock(*(os_unfair_lock_t *)(v7 + 344));
      sub_1B1C0B2D4(v7, v8, a1, v2, a2);
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v7 + 344));
    }
  }
}

void sub_1B1BF79EC(uint64_t a1, uint64_t a2)
{
  sub_1B1BF7CD4(a1, a2, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1C0B490);
}

void sub_1B1BF79F8(unsigned int a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  __int16 v14;

  if (a5 != 0xFFFFFFFFLL
    && a5 << 32 >= (uint64_t)0xFFFFFFFF00000001
    && (int)a5 < *(_QWORD *)(v5 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8))
  {
    v11 = *(_QWORD *)(v5 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
    if (HIDWORD(a5) == -1 || *(_DWORD *)(v11 + 12 * (int)a5 + 8) == HIDWORD(a5))
    {
      v12 = (int *)(v11 + 12 * (int)a5);
      v13 = *(_QWORD *)(*(_QWORD *)(v5 + 136) + 8 * *v12 + 32);
      v14 = *((_WORD *)v12 + 2);
      os_unfair_lock_lock(*(os_unfair_lock_t *)(v13 + 344));
      sub_1B1C0B614(v13, v14, a1, a2, a3, a4 & 0x10101, v5, a5);
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v13 + 344));
    }
  }
}

void sub_1B1BF7B10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1B1BF7B34(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1C0B7DC);
}

void sub_1B1BF7B1C(uint64_t a1, uint64_t a2)
{
  sub_1B1BF7CD4(a1, a2, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1C0B968);
}

void sub_1B1BF7B28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1B1BF7B34(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1C0BB24);
}

void sub_1B1BF7B34(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;

  if (a3 != 0xFFFFFFFFLL
    && a3 << 32 >= (uint64_t)0xFFFFFFFF00000001
    && (int)a3 < *(_QWORD *)(v4 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8))
  {
    v9 = *(_QWORD *)(v4 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
    if (HIDWORD(a3) == -1 || *(_DWORD *)(v9 + 12 * (int)a3 + 8) == HIDWORD(a3))
    {
      v10 = (int *)(v9 + 12 * (int)a3);
      v11 = *(_QWORD *)(*(_QWORD *)(v4 + 136) + 8 * *v10 + 32);
      v12 = *((unsigned __int16 *)v10 + 2);
      os_unfair_lock_lock(*(os_unfair_lock_t *)(v11 + 344));
      a4(v11, v12, a1, a2, v4, a3);
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v11 + 344));
    }
  }
}

void sub_1B1BF7C38(uint64_t a1, uint64_t a2)
{
  sub_1B1BF7CD4(a1, a2, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1C0BCD8);
}

void sub_1B1BF7C44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1B1BF7B34(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1C0BE94);
}

void sub_1B1BF7C50(uint64_t a1, uint64_t a2)
{
  sub_1B1BF7CD4(a1, a2, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1C0C048);
}

void sub_1B1BF7C5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1B1BF7B34(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1C0C204);
}

void sub_1B1BF7C68(uint64_t a1, uint64_t a2)
{
  sub_1B1BF7CD4(a1, a2, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1C0C3B8);
}

void sub_1B1BF7C74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1B1BF7B34(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1C0C574);
}

void sub_1B1BF7C80(uint64_t a1, uint64_t a2)
{
  sub_1B1BF7CD4(a1, a2, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1C0C728);
}

void sub_1B1BF7C8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1B1BF7B34(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1C0C8E4);
}

void sub_1B1BF7C98(uint64_t a1, uint64_t a2)
{
  sub_1B1BF7CD4(a1, a2, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1C0CA98);
}

void sub_1B1BF7CA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1B1BF7B34(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1C0CC54);
}

void sub_1B1BF7CB0(uint64_t a1, uint64_t a2)
{
  sub_1B1BF7CD4(a1, a2, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1C0CE08);
}

void sub_1B1BF7CBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1B1BF7B34(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1C0CFC4);
}

void sub_1B1BF7CC8(uint64_t a1, uint64_t a2)
{
  sub_1B1BF7CD4(a1, a2, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1C0D178);
}

void sub_1B1BF7CD4(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v3;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;

  if (a2 != 0xFFFFFFFFLL
    && a2 << 32 >= (uint64_t)0xFFFFFFFF00000001
    && (int)a2 < *(_QWORD *)(v3 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8))
  {
    v7 = *(_QWORD *)(v3 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
    if (HIDWORD(a2) == -1 || *(_DWORD *)(v7 + 12 * (int)a2 + 8) == HIDWORD(a2))
    {
      v8 = (int *)(v7 + 12 * (int)a2);
      v9 = *(_QWORD *)(*(_QWORD *)(v3 + 136) + 8 * *v8 + 32);
      v10 = *((unsigned __int16 *)v8 + 2);
      os_unfair_lock_lock(*(os_unfair_lock_t *)(v9 + 344));
      a3(v9, v10, a1, v3, a2);
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v9 + 344));
    }
  }
}

void sub_1B1BF7DC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1B1BF7B34(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1C0D334);
}

void sub_1B1BF7DD0(__int128 *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  __int16 v8;

  if (a2 != 0xFFFFFFFFLL
    && a2 << 32 >= (uint64_t)0xFFFFFFFF00000001
    && (int)a2 < *(_QWORD *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8))
  {
    v5 = *(_QWORD *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
    if (HIDWORD(a2) == -1 || *(_DWORD *)(v5 + 12 * (int)a2 + 8) == HIDWORD(a2))
    {
      v6 = (int *)(v5 + 12 * (int)a2);
      v7 = *(_QWORD *)(*(_QWORD *)(v2 + 136) + 8 * *v6 + 32);
      v8 = *((_WORD *)v6 + 2);
      os_unfair_lock_lock(*(os_unfair_lock_t *)(v7 + 344));
      sub_1B1C0D4E8(v7, v8, a1, v2, a2);
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v7 + 344));
    }
  }
}

void sub_1B1BF7EBC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  __int16 v8;

  if (a2 != 0xFFFFFFFFLL
    && a2 << 32 >= (uint64_t)0xFFFFFFFF00000001
    && (int)a2 < *(_QWORD *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8))
  {
    v5 = *(_QWORD *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
    if (HIDWORD(a2) == -1 || *(_DWORD *)(v5 + 12 * (int)a2 + 8) == HIDWORD(a2))
    {
      v6 = (int *)(v5 + 12 * (int)a2);
      v7 = *(_QWORD *)(*(_QWORD *)(v2 + 136) + 8 * *v6 + 32);
      v8 = *((_WORD *)v6 + 2);
      os_unfair_lock_lock(*(os_unfair_lock_t *)(v7 + 344));
      sub_1B1C0D680(v7, v8, a1, v2, a2);
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v7 + 344));
    }
  }
}

void sub_1B1BF7FA8(unint64_t a1, __n128 a2)
{
  uint64_t v2;
  uint64_t v4;
  int *v5;
  uint64_t v6;
  __int16 v7;

  if (a1 != 0xFFFFFFFF
    && (uint64_t)(a1 << 32) >= (uint64_t)0xFFFFFFFF00000001
    && (int)a1 < *(_QWORD *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8))
  {
    v4 = *(_QWORD *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
    if (HIDWORD(a1) == -1 || *(_DWORD *)(v4 + 12 * (int)a1 + 8) == HIDWORD(a1))
    {
      v5 = (int *)(v4 + 12 * (int)a1);
      v6 = *(_QWORD *)(*(_QWORD *)(v2 + 136) + 8 * *v5 + 32);
      v7 = *((_WORD *)v5 + 2);
      os_unfair_lock_lock(*(os_unfair_lock_t *)(v6 + 344));
      sub_1B1C0D810(v6, v7, v2, a1, a2);
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v6 + 344));
    }
  }
}

void sub_1B1BF8088(uint64_t a1, uint64_t a2)
{
  sub_1B1BF7CD4(a1, a2, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1C0D994);
}

void sub_1B1BF8094(unint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  __int16 v10;

  if (a3 != 0xFFFFFFFFLL
    && a3 << 32 >= (uint64_t)0xFFFFFFFF00000001
    && (int)a3 < *(_QWORD *)(v3 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8))
  {
    v7 = *(_QWORD *)(v3 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
    if (HIDWORD(a3) == -1 || *(_DWORD *)(v7 + 12 * (int)a3 + 8) == HIDWORD(a3))
    {
      v8 = (int *)(v7 + 12 * (int)a3);
      v9 = *(_QWORD *)(*(_QWORD *)(v3 + 136) + 8 * *v8 + 32);
      v10 = *((_WORD *)v8 + 2);
      os_unfair_lock_lock(*(os_unfair_lock_t *)(v9 + 344));
      sub_1B1C0DB2C(v9, v10, a1, a2, v3, a3);
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v9 + 344));
    }
  }
}

void sub_1B1BF8188(uint64_t a1, float a2)
{
  sub_1B1BF86E8(a1, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, float))sub_1B1C0DCD8, a2);
}

void sub_1B1BF8194(uint64_t a1, float a2, float a3, float a4, float a5)
{
  sub_1B1BF8298(a1, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, float, float, float, float))sub_1B1C0DE64, a2, a3, a4, a5);
}

void sub_1B1BF81A0(__n128 *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  __int16 v8;

  if (a2 != 0xFFFFFFFFLL
    && a2 << 32 >= (uint64_t)0xFFFFFFFF00000001
    && (int)a2 < *(_QWORD *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8))
  {
    v5 = *(_QWORD *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
    if (HIDWORD(a2) == -1 || *(_DWORD *)(v5 + 12 * (int)a2 + 8) == HIDWORD(a2))
    {
      v6 = (int *)(v5 + 12 * (int)a2);
      v7 = *(_QWORD *)(*(_QWORD *)(v2 + 136) + 8 * *v6 + 32);
      v8 = *((_WORD *)v6 + 2);
      os_unfair_lock_lock(*(os_unfair_lock_t *)(v7 + 344));
      sub_1B1C0E014(v7, v8, a1, v2, a2);
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v7 + 344));
    }
  }
}

void sub_1B1BF828C(uint64_t a1, float a2, float a3, float a4, float a5)
{
  sub_1B1BF8298(a1, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, float, float, float, float))sub_1B1C0E1A4, a2, a3, a4, a5);
}

void sub_1B1BF8298(uint64_t a1, void (*a2)(uint64_t, uint64_t, uint64_t, uint64_t, float, float, float, float), float a3, float a4, float a5, float a6)
{
  uint64_t v6;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;

  if (a1 != 0xFFFFFFFFLL
    && a1 << 32 >= (uint64_t)0xFFFFFFFF00000001
    && (int)a1 < *(_QWORD *)(v6 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8))
  {
    v13 = *(_QWORD *)(v6 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
    if (HIDWORD(a1) == -1 || *(_DWORD *)(v13 + 12 * (int)a1 + 8) == HIDWORD(a1))
    {
      v14 = (int *)(v13 + 12 * (int)a1);
      v15 = *(_QWORD *)(*(_QWORD *)(v6 + 136) + 8 * *v14 + 32);
      v16 = *((unsigned __int16 *)v14 + 2);
      os_unfair_lock_lock(*(os_unfair_lock_t *)(v15 + 344));
      a2(v15, v16, v6, a1, a3, a4, a5, a6);
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v15 + 344));
    }
  }
}

void sub_1B1BF83B8(__int128 *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  __int16 v8;

  if (a2 != 0xFFFFFFFFLL
    && a2 << 32 >= (uint64_t)0xFFFFFFFF00000001
    && (int)a2 < *(_QWORD *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8))
  {
    v5 = *(_QWORD *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
    if (HIDWORD(a2) == -1 || *(_DWORD *)(v5 + 12 * (int)a2 + 8) == HIDWORD(a2))
    {
      v6 = (int *)(v5 + 12 * (int)a2);
      v7 = *(_QWORD *)(*(_QWORD *)(v2 + 136) + 8 * *v6 + 32);
      v8 = *((_WORD *)v6 + 2);
      os_unfair_lock_lock(*(os_unfair_lock_t *)(v7 + 344));
      sub_1B1C0E354(v7, v8, a1, v2, a2);
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v7 + 344));
    }
  }
}

void sub_1B1BF84A4(__n128 *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  __int16 v8;

  if (a2 != 0xFFFFFFFFLL
    && a2 << 32 >= (uint64_t)0xFFFFFFFF00000001
    && (int)a2 < *(_QWORD *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8))
  {
    v5 = *(_QWORD *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
    if (HIDWORD(a2) == -1 || *(_DWORD *)(v5 + 12 * (int)a2 + 8) == HIDWORD(a2))
    {
      v6 = (int *)(v5 + 12 * (int)a2);
      v7 = *(_QWORD *)(*(_QWORD *)(v2 + 136) + 8 * *v6 + 32);
      v8 = *((_WORD *)v6 + 2);
      os_unfair_lock_lock(*(os_unfair_lock_t *)(v7 + 344));
      sub_1B1C0E4E4(v7, v8, a1, v2, a2);
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v7 + 344));
    }
  }
}

void sub_1B1BF8590(uint64_t a1)
{
  sub_1B1BF88E8(a1, (void (*)(uint64_t, uint64_t, uint64_t))sub_1B1C0E674);
}

void sub_1B1BF859C(uint64_t a1)
{
  sub_1B1BF88E8(a1, (void (*)(uint64_t, uint64_t, uint64_t))sub_1B1C0E7A4);
}

void sub_1B1BF85A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  __int16 v14;

  if (a5 != 0xFFFFFFFFLL
    && a5 << 32 >= (uint64_t)0xFFFFFFFF00000001
    && (int)a5 < *(_QWORD *)(v5 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8))
  {
    v11 = *(_QWORD *)(v5 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
    if (HIDWORD(a5) == -1 || *(_DWORD *)(v11 + 12 * (int)a5 + 8) == HIDWORD(a5))
    {
      v12 = (int *)(v11 + 12 * (int)a5);
      v13 = *(_QWORD *)(*(_QWORD *)(v5 + 136) + 8 * *v12 + 32);
      v14 = *((_WORD *)v12 + 2);
      os_unfair_lock_lock(*(os_unfair_lock_t *)(v13 + 344));
      sub_1B1C0E8C0(v13, v14, a1, a2, a3, a4, v5, a5);
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v13 + 344));
    }
  }
}

void sub_1B1BF86B8(uint64_t a1, uint64_t a2)
{
  sub_1B1BF7CD4(a1, a2, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1C09008);
}

void sub_1B1BF86C4(uint64_t a1, uint64_t a2)
{
  sub_1B1BF7CD4(a1, a2, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1C0918C);
}

void sub_1B1BF86D0(uint64_t a1)
{
  sub_1B1BF88E8(a1, (void (*)(uint64_t, uint64_t, uint64_t))sub_1B1C0EA74);
}

void sub_1B1BF86DC(uint64_t a1, float a2)
{
  sub_1B1BF86E8(a1, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, float))sub_1B1C0EB90, a2);
}

void sub_1B1BF86E8(uint64_t a1, void (*a2)(uint64_t, uint64_t, uint64_t, uint64_t, float), float a3)
{
  uint64_t v3;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;

  if (a1 != 0xFFFFFFFFLL
    && a1 << 32 >= (uint64_t)0xFFFFFFFF00000001
    && (int)a1 < *(_QWORD *)(v3 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8))
  {
    v7 = *(_QWORD *)(v3 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
    if (HIDWORD(a1) == -1 || *(_DWORD *)(v7 + 12 * (int)a1 + 8) == HIDWORD(a1))
    {
      v8 = (int *)(v7 + 12 * (int)a1);
      v9 = *(_QWORD *)(*(_QWORD *)(v3 + 136) + 8 * *v8 + 32);
      v10 = *((unsigned __int16 *)v8 + 2);
      os_unfair_lock_lock(*(os_unfair_lock_t *)(v9 + 344));
      a2(v9, v10, v3, a1, a3);
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v9 + 344));
    }
  }
}

void sub_1B1BF87E4(unint64_t a1, __n128 a2, __n128 a3)
{
  uint64_t v3;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  __int16 v8;

  if (a1 != 0xFFFFFFFF
    && (uint64_t)(a1 << 32) >= (uint64_t)0xFFFFFFFF00000001
    && (int)a1 < *(_QWORD *)(v3 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8))
  {
    v5 = *(_QWORD *)(v3 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
    if (HIDWORD(a1) == -1 || *(_DWORD *)(v5 + 12 * (int)a1 + 8) == HIDWORD(a1))
    {
      v6 = (int *)(v5 + 12 * (int)a1);
      v7 = *(_QWORD *)(*(_QWORD *)(v3 + 136) + 8 * *v6 + 32);
      v8 = *((_WORD *)v6 + 2);
      os_unfair_lock_lock(*(os_unfair_lock_t *)(v7 + 344));
      sub_1B1C0ED1C(v7, v8, v3, a1, a2, a3);
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v7 + 344));
    }
  }
}

void sub_1B1BF88C4(uint64_t a1, uint64_t a2)
{
  sub_1B1BF7CD4(a1, a2, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1C0EEA0);
}

void sub_1B1BF88D0(uint64_t a1, uint64_t a2)
{
  sub_1B1BF7CD4(a1, a2, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1C0F01C);
}

void sub_1B1BF88DC(uint64_t a1)
{
  sub_1B1BF88E8(a1, (void (*)(uint64_t, uint64_t, uint64_t))sub_1B1C0F198);
}

void sub_1B1BF88E8(uint64_t a1, void (*a2)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v2;
  uint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;

  if (a1 != 0xFFFFFFFFLL
    && a1 << 32 >= (uint64_t)0xFFFFFFFF00000001
    && (int)a1 < *(_QWORD *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8))
  {
    v4 = *(_QWORD *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
    if (HIDWORD(a1) == -1 || *(_DWORD *)(v4 + 12 * (int)a1 + 8) == HIDWORD(a1))
    {
      v5 = (int *)(v4 + 12 * (int)a1);
      v6 = *(_QWORD *)(*(_QWORD *)(v2 + 136) + 8 * *v5 + 32);
      v7 = *((unsigned __int16 *)v5 + 2);
      os_unfair_lock_lock(*(os_unfair_lock_t *)(v6 + 344));
      a2(v6, v7, v2);
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v6 + 344));
    }
  }
}

void sub_1B1BF89BC(uint64_t a1, __n128 a2, __n128 a3, __n128 a4, __n128 a5)
{
  sub_1B1BF77C0(a1, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, __n128, __n128, __n128, __n128))sub_1B1C0F2B4, a2, a3, a4, a5);
}

void sub_1B1BF89C8(uint64_t a1, __n128 a2, __n128 a3, __n128 a4, __n128 a5)
{
  sub_1B1BF77C0(a1, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, __n128, __n128, __n128, __n128))sub_1B1C0F454, a2, a3, a4, a5);
}

_QWORD *sub_1B1BF89D4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v20;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  v3 = swift_bridgeObjectRetain() + 80;
  v4 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  do
  {
    v5 = *(_QWORD *)(a2 + 8);
    if (*(_QWORD *)(v5 + 16))
    {
      v20 = v4;
      v6 = *(_QWORD *)(v3 - 32);
      v7 = *(_QWORD *)(v3 - 24);
      v9 = *(_QWORD *)(v3 - 48);
      v8 = *(_QWORD *)(v3 - 40);
      swift_bridgeObjectRetain();
      sub_1B19FA2B4(v6, v7);
      swift_bridgeObjectRetain();
      v10 = sub_1B1DC3B00(v9, v8);
      if ((v11 & 1) != 0)
      {
        v12 = (uint64_t *)(*(_QWORD *)(v5 + 56) + 16 * v10);
        v13 = *v12;
        v14 = v12[1];
        swift_retain();
        swift_bridgeObjectRelease_n();
        sub_1B19F9FEC(v6, v7);
        v4 = v20;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v4 = sub_1B1C66A74(0, v20[2] + 1, 1, v20);
        v16 = v4[2];
        v15 = v4[3];
        if (v16 >= v15 >> 1)
          v4 = sub_1B1C66A74(v15 > 1, v16 + 1, 1, v4);
        v4[2] = v16 + 1;
        v17 = &v4[2 * v16];
        v17[4] = v13;
        v17[5] = v14;
      }
      else
      {
        swift_bridgeObjectRelease_n();
        sub_1B19F9FEC(v6, v7);
        v4 = v20;
      }
    }
    v3 += 56;
    --v2;
  }
  while (v2);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_1B1BF8BA4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  int64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v3 = v2;
  v34 = a2;
  sub_1B1C18FB4(0);
  v33 = v5;
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (unsigned int *)((char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v29 - v11;
  v13 = *(_QWORD *)(a1 + 64);
  v31 = a1 + 64;
  v14 = 1 << *(_BYTE *)(a1 + 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & v13;
  v17 = (unint64_t)(v14 + 63) >> 6;
  swift_bridgeObjectRetain();
  v18 = 0;
  v32 = v17;
  v35 = a1;
  v29 = a1 + 112;
  v30 = v17 - 6;
  while (v16)
  {
    v19 = __clz(__rbit64(v16));
    v16 &= v16 - 1;
    v20 = v19 | (v18 << 6);
LABEL_5:
    v21 = *(_QWORD *)(v35 + 56);
    v22 = *(_QWORD *)(v35 + 48) + 8 * v20;
    v23 = *(_DWORD *)v22;
    v24 = *(_BYTE *)(v22 + 4);
    v25 = type metadata accessor for GraphScriptingConfig.ScriptInfo();
    sub_1B1792810(v21 + *(_QWORD *)(*(_QWORD *)(v25 - 8) + 72) * v20, (uint64_t)&v12[*(int *)(v33 + 48)], (uint64_t (*)(_QWORD))type metadata accessor for GraphScriptingConfig.ScriptInfo);
    *(_DWORD *)v12 = v23;
    v12[4] = v24;
    sub_1B1A025EC((uint64_t)v12, (uint64_t)v8, (uint64_t (*)(_QWORD))sub_1B1C18FB4);
    sub_1B1C04578(v8, v34);
    sub_1B1A04628((uint64_t)v8, (uint64_t (*)(_QWORD))sub_1B1C18FB4);
    if (v3)
      return swift_release();
  }
  v26 = v18 + 1;
  if (v18 + 1 >= v32)
    return swift_release();
  v27 = *(_QWORD *)(v31 + 8 * v26);
  if (v27)
    goto LABEL_20;
  v26 = v18 + 2;
  if (v18 + 2 >= v32)
    return swift_release();
  v27 = *(_QWORD *)(v31 + 8 * v26);
  if (v27)
    goto LABEL_20;
  v26 = v18 + 3;
  if (v18 + 3 >= v32)
    return swift_release();
  v27 = *(_QWORD *)(v31 + 8 * v26);
  if (v27)
    goto LABEL_20;
  v26 = v18 + 4;
  if (v18 + 4 >= v32)
    return swift_release();
  v27 = *(_QWORD *)(v31 + 8 * v26);
  if (v27)
    goto LABEL_20;
  v26 = v18 + 5;
  if (v18 + 5 >= v32)
    return swift_release();
  v27 = *(_QWORD *)(v31 + 8 * v26);
  if (v27)
  {
LABEL_20:
    v16 = (v27 - 1) & v27;
    v20 = __clz(__rbit64(v27)) + (v26 << 6);
    v18 = v26;
    goto LABEL_5;
  }
  while (v30 != v18)
  {
    v27 = *(_QWORD *)(v29 + 8 * v18++);
    if (v27)
    {
      v26 = v18 + 5;
      goto LABEL_20;
    }
  }
  return swift_release();
}

uint64_t sub_1B1BF8E08()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v0 = 4;
  v8 = MEMORY[0x1E0DEE9D8];
  sub_1B2029FFC(0, 4, 0);
  v1 = (uint64_t *)&unk_1E636F690;
  do
  {
    v3 = *(v1 - 1);
    v2 = *v1;
    v4 = *(_QWORD *)(v8 + 16);
    v5 = *(_QWORD *)(v8 + 24);
    swift_bridgeObjectRetain();
    if (v4 >= v5 >> 1)
      sub_1B2029FFC(v5 > 1, v4 + 1, 1);
    v1 += 3;
    *(_QWORD *)(v8 + 16) = v4 + 1;
    v6 = v8 + 16 * v4;
    *(_QWORD *)(v6 + 32) = v3;
    *(_QWORD *)(v6 + 40) = v2;
    --v0;
  }
  while (v0);
  return v8;
}

uint64_t sub_1B1BF8ED8()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v9;

  v9 = MEMORY[0x1E0DEE9D8];
  sub_1B2029FFC(0, 2, 0);
  v0 = v9;
  v2 = *(_QWORD *)(v9 + 16);
  v1 = *(_QWORD *)(v9 + 24);
  v3 = v2 + 1;
  swift_bridgeObjectRetain();
  if (v2 >= v1 >> 1)
  {
    sub_1B2029FFC(v1 > 1, v2 + 1, 1);
    v0 = v9;
  }
  *(_QWORD *)(v0 + 16) = v3;
  v4 = v0 + 16 * v2;
  strcpy((char *)(v4 + 32), "nearest");
  *(_QWORD *)(v4 + 40) = 0xE700000000000000;
  v5 = *(_QWORD *)(v0 + 24);
  v6 = v2 + 2;
  swift_bridgeObjectRetain();
  if (v3 >= v5 >> 1)
  {
    sub_1B2029FFC(v5 > 1, v6, 1);
    v0 = v9;
  }
  *(_QWORD *)(v0 + 16) = v6;
  v7 = v0 + 16 * v3;
  *(_QWORD *)(v7 + 32) = *(_QWORD *)"linear";
  *(_QWORD *)(v7 + 40) = 0xE600000000000000;
  sub_1B1B9D790(0, &qword_1ED4BA2C0);
  swift_arrayDestroy();
  return v0;
}

uint64_t sub_1B1BF9004()
{
  return sub_1B1BF902C((void (*)(_QWORD))type metadata accessor for GraphScriptRunner);
}

uint64_t sub_1B1BF9018()
{
  return sub_1B1BF902C((void (*)(_QWORD))type metadata accessor for ScriptCompilerSystem);
}

uint64_t sub_1B1BF902C(void (*a1)(_QWORD))
{
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v5;

  a1(0);
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v1 + 56));
  sub_1B204E0B8();
  if ((v2 & 1) != 0)
  {
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v1 + 56));
    return 0;
  }
  else
  {
    sub_1B1AEC268(0, qword_1ED4B9FA8);
    swift_unknownObjectRetain();
    swift_dynamicCast();
    v3 = v5;
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v1 + 56));
  }
  return v3;
}

uint64_t sub_1B1BF90FC()
{
  return sub_1B1BF902C((void (*)(_QWORD))type metadata accessor for EmitterPrepareRuntime);
}

BOOL sub_1B1BF9110(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16) == 0;
}

uint64_t sub_1B1BF9120(uint64_t result, uint64_t a2, unint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  char v12;
  uint64_t v13;
  _DWORD v14[2];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _UNKNOWN **v20;
  char v21;

  v4 = v3;
  v7 = result;
  v8 = HIDWORD(a3);
  if (a3 != 0xFFFFFFFF)
  {
    v9 = *v3;
    swift_unownedRetainStrong();
    sub_1B1DA57B4(a3);
    if ((v10 & 0x100000000) != 0)
    {
      swift_release();
      v12 = 1;
    }
    else
    {
      v11 = sub_1B2162978((uint64_t)&type metadata for Name);
      swift_release();
      v12 = !v11;
    }
    swift_unownedRetainStrong();
    sub_1B1BF75AC(v7, a2, a3);
    swift_release();
    swift_unownedRetainStrong();
    swift_release();
    result = swift_unknownObjectUnownedLoadStrong();
    if (result)
      result = swift_unknownObjectRelease();
    if (*((_BYTE *)v4 + 24) == 1)
    {
      swift_unownedRetainStrong();
      v14[0] = a3;
      v14[1] = v8;
      v15 = v9;
      sub_1B1C1FE78(0, &qword_1EEF5C4A0, (uint64_t)&type metadata for Name, (uint64_t)&off_1E63B9AE8);
      v19 = v13;
      v20 = &off_1E6383838;
      v16 = v7;
      v17 = a2;
      v18 = v12 & 1;
      v21 = 12;
      swift_bridgeObjectRetain();
      sub_1B1E2DB30((uint64_t)v14);
      swift_release();
      return sub_1B1ADF058((uint64_t)v14);
    }
  }
  return result;
}

unint64_t sub_1B1BF92A0(unint64_t result, __n128 a2)
{
  _QWORD *v2;
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  char v9;
  uint64_t v10;
  __n128 *v11;
  _DWORD v13[2];
  uint64_t v14;
  __n128 *v15;
  uint64_t v16;
  _UNKNOWN **v17;
  char v18;

  v3 = v2;
  v4 = result;
  v5 = HIDWORD(result);
  if (result != 0xFFFFFFFF)
  {
    v6 = *v2;
    swift_unownedRetainStrong();
    sub_1B1DA57B4(v4);
    if ((v7 & 0x100000000) != 0)
    {
      swift_release();
      v9 = 1;
    }
    else
    {
      v8 = sub_1B2162978((uint64_t)&type metadata for Color);
      swift_release();
      v9 = !v8;
    }
    swift_unownedRetainStrong();
    sub_1B1BF76B8(v4, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))sub_1B1C0A618, a2);
    swift_release();
    swift_unownedRetainStrong();
    swift_release();
    result = swift_unknownObjectUnownedLoadStrong();
    if (result)
      result = swift_unknownObjectRelease();
    if (*((_BYTE *)v3 + 24) == 1)
    {
      swift_unownedRetainStrong();
      v13[0] = v4;
      v13[1] = v5;
      v14 = v6;
      sub_1B1C1FE78(0, &qword_1EEF5C528, (uint64_t)&type metadata for Color, (uint64_t)&off_1E63BA190);
      v16 = v10;
      v17 = &off_1E6383838;
      v11 = (__n128 *)swift_allocObject();
      v15 = v11;
      v11[1] = a2;
      v11[2].n128_u8[0] = v9 & 1;
      v18 = 12;
      sub_1B1E2DB30((uint64_t)v13);
      swift_release();
      return sub_1B1ADF058((uint64_t)v13);
    }
  }
  return result;
}

unint64_t sub_1B1BF942C(unint64_t result, __n128 a2)
{
  _QWORD *v2;
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  char v9;
  uint64_t v10;
  __n128 *v11;
  _DWORD v13[2];
  uint64_t v14;
  __n128 *v15;
  uint64_t v16;
  _UNKNOWN **v17;
  char v18;

  v3 = v2;
  v4 = result;
  v5 = HIDWORD(result);
  if (result != 0xFFFFFFFF)
  {
    v6 = *v2;
    swift_unownedRetainStrong();
    sub_1B1DA57B4(v4);
    if ((v7 & 0x100000000) != 0)
    {
      swift_release();
      v9 = 1;
    }
    else
    {
      v8 = sub_1B2162978((uint64_t)&type metadata for Orientation);
      swift_release();
      v9 = !v8;
    }
    swift_unownedRetainStrong();
    sub_1B1BF76B8(v4, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))sub_1B1C0A7D0, a2);
    swift_release();
    swift_unownedRetainStrong();
    swift_release();
    result = swift_unknownObjectUnownedLoadStrong();
    if (result)
      result = swift_unknownObjectRelease();
    if (*((_BYTE *)v3 + 24) == 1)
    {
      swift_unownedRetainStrong();
      v13[0] = v4;
      v13[1] = v5;
      v14 = v6;
      sub_1B1C1FE78(0, &qword_1EEF5C518, (uint64_t)&type metadata for Orientation, (uint64_t)&off_1E6371540);
      v16 = v10;
      v17 = &off_1E6383838;
      v11 = (__n128 *)swift_allocObject();
      v15 = v11;
      v11[1] = a2;
      v11[2].n128_u8[0] = v9 & 1;
      v18 = 12;
      sub_1B1E2DB30((uint64_t)v13);
      swift_release();
      return sub_1B1ADF058((uint64_t)v13);
    }
  }
  return result;
}

unint64_t sub_1B1BF95B8(unint64_t result, __n128 a2)
{
  _QWORD *v2;
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  char v9;
  uint64_t v10;
  __n128 *v11;
  _DWORD v13[2];
  uint64_t v14;
  __n128 *v15;
  uint64_t v16;
  _UNKNOWN **v17;
  char v18;

  v3 = v2;
  v4 = result;
  v5 = HIDWORD(result);
  if (result != 0xFFFFFFFF)
  {
    v6 = *v2;
    swift_unownedRetainStrong();
    sub_1B1DA57B4(v4);
    if ((v7 & 0x100000000) != 0)
    {
      swift_release();
      v9 = 1;
    }
    else
    {
      v8 = sub_1B2162978((uint64_t)&type metadata for Position);
      swift_release();
      v9 = !v8;
    }
    swift_unownedRetainStrong();
    sub_1B1BF76B8(v4, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))sub_1B1C0A988, a2);
    swift_release();
    swift_unownedRetainStrong();
    swift_release();
    result = swift_unknownObjectUnownedLoadStrong();
    if (result)
      result = swift_unknownObjectRelease();
    if (*((_BYTE *)v3 + 24) == 1)
    {
      swift_unownedRetainStrong();
      v13[0] = v4;
      v13[1] = v5;
      v14 = v6;
      sub_1B1C1FE78(0, &qword_1EEF5C520, (uint64_t)&type metadata for Position, (uint64_t)&off_1E63C2398);
      v16 = v10;
      v17 = &off_1E6383838;
      v11 = (__n128 *)swift_allocObject();
      v15 = v11;
      v11[1] = a2;
      v11[2].n128_u8[0] = v9 & 1;
      v18 = 12;
      sub_1B1E2DB30((uint64_t)v13);
      swift_release();
      return sub_1B1ADF058((uint64_t)v13);
    }
  }
  return result;
}

uint64_t sub_1B1BF9744(uint64_t result, unint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  _DWORD v10[2];
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  _UNKNOWN **v15;
  char v16;

  v3 = v2;
  v5 = result;
  v6 = HIDWORD(a2);
  if (a2 != 0xFFFFFFFF)
  {
    v7 = *v2;
    swift_unownedRetainStrong();
    v8 = sub_1B1FD568C((uint64_t)&type metadata for Children, (uint64_t)&off_1E63BEDD0, a2);
    swift_release();
    swift_unownedRetainStrong();
    sub_1B1BF7CD4(v5, a2, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1C08014);
    swift_release();
    swift_unownedRetainStrong();
    swift_release();
    result = swift_unknownObjectUnownedLoadStrong();
    if (result)
      result = swift_unknownObjectRelease();
    if (*((_BYTE *)v3 + 24) == 1)
    {
      swift_unownedRetainStrong();
      v10[0] = a2;
      v10[1] = v6;
      v11 = v7;
      sub_1B1C1FE78(0, &qword_1EEF5C4A8, (uint64_t)&type metadata for Children, (uint64_t)&off_1E63BED58);
      v14 = v9;
      v15 = &off_1E6383838;
      v12 = v5;
      v13 = !v8;
      v16 = 12;
      swift_bridgeObjectRetain();
      sub_1B1E2DB30((uint64_t)v10);
      swift_release();
      return sub_1B1ADF058((uint64_t)v10);
    }
  }
  return result;
}

uint64_t sub_1B1BF988C(uint64_t result, unint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  _DWORD v10[2];
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  _UNKNOWN **v15;
  char v16;

  v3 = v2;
  v5 = result;
  v6 = HIDWORD(a2);
  if (a2 != 0xFFFFFFFF)
  {
    v7 = *v2;
    swift_unownedRetainStrong();
    v8 = sub_1B1FD568C((uint64_t)&type metadata for PropagateDirtiness, (uint64_t)&off_1E6395AC8, a2);
    swift_release();
    swift_unownedRetainStrong();
    sub_1B1BF7CD4(v5, a2, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1C0B490);
    swift_release();
    swift_unownedRetainStrong();
    swift_release();
    result = swift_unknownObjectUnownedLoadStrong();
    if (result)
      result = swift_unknownObjectRelease();
    if (*((_BYTE *)v3 + 24) == 1)
    {
      swift_unownedRetainStrong();
      v10[0] = a2;
      v10[1] = v6;
      v11 = v7;
      sub_1B1C1FE78(0, &qword_1EEF5C498, (uint64_t)&type metadata for PropagateDirtiness, (uint64_t)&off_1E6395A98);
      v14 = v9;
      v15 = &off_1E6383838;
      v12 = v5;
      v13 = !v8;
      v16 = 12;
      sub_1B1E2DB30((uint64_t)v10);
      swift_release();
      return sub_1B1ADF058((uint64_t)v10);
    }
  }
  return result;
}

uint64_t sub_1B1BF99D0()
{
  sub_1B1C21FD4();
  return sub_1B222A1D4();
}

uint64_t sub_1B1BF99F8()
{
  sub_1B1C21FD4();
  return sub_1B222A1E0();
}

uint64_t sub_1B1BF9A20(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v9;

  sub_1B19F8E54(0, &qword_1EEF5C580, (uint64_t (*)(void))sub_1B1C21FD4, (uint64_t)&type metadata for CodeGenerationInitialized.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v3 = v2;
  v4 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v5);
  v7 = (char *)&v9 - v6;
  sub_1B19FA070(a1, a1[3]);
  sub_1B1C21FD4();
  sub_1B222A180();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v3);
}

uint64_t sub_1B1BF9AFC(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;

  v14 = a4;
  sub_1B19F8E54(0, &qword_1EEF5C578, (uint64_t (*)(void))sub_1B1C21BB0, (uint64_t)&type metadata for GraphEntityComponentPropertyReferences.DirectPropertyAssignment.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = (char *)&v13 - v9;
  sub_1B19FA070(a1, a1[3]);
  sub_1B1C21BB0();
  sub_1B222A180();
  v18 = 0;
  v11 = v15;
  sub_1B2229910();
  if (!v11)
  {
    v16 = v14;
    v17 = 1;
    sub_1B1A02758(0, (unint64_t *)&qword_1ED4BA490, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    sub_1B1B28C94((unint64_t *)&qword_1EEF5AC40, MEMORY[0x1E0DEA970], MEMORY[0x1E0DEAF10]);
    sub_1B2229958();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
}

uint64_t sub_1B1BF9C88(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1B1F99010(*a1, *a2);
}

uint64_t sub_1B1BF9C94()
{
  sub_1B1C21BB0();
  return sub_1B222A1D4();
}

uint64_t sub_1B1BF9CBC()
{
  sub_1B1C21BB0();
  return sub_1B222A1E0();
}

uint64_t sub_1B1BF9CE4@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  result = sub_1B1C1D9D8(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
  }
  return result;
}

uint64_t sub_1B1BF9D10(_QWORD *a1)
{
  uint64_t *v1;

  return sub_1B1BF9AFC(a1, *v1, v1[1], v1[2]);
}

uint64_t sub_1B1BF9D2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v11[5];
  _QWORD v12[6];

  v12[3] = &type metadata for Entity;
  v12[4] = &off_1E63BB108;
  v12[0] = a3;
  v7 = sub_1B19FA070(v12, (uint64_t)&type metadata for Entity);
  v11[3] = (uint64_t)&type metadata for Entity;
  v11[4] = (uint64_t)&off_1E63BB108;
  v8 = sub_1B1A137F4(v11);
  *v8 = sub_1B1E33C2C(*v7);
  sub_1B1AEC268(0, (unint64_t *)&qword_1EEF5AB10);
  swift_dynamicCast();
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v12);
  v9 = v12[5];
  swift_unknownObjectRetain();
  swift_retain();
  sub_1B1C094B8(a5, a1);
  swift_unknownObjectRelease();
  return v9;
}

uint64_t sub_1B1BF9E3C(_QWORD *a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  unsigned int v4;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char v21;

  v17 = a3;
  v16 = a4;
  v4 = a2;
  v6 = HIDWORD(a2);
  sub_1B19F8E54(0, &qword_1EEF5C568, (uint64_t (*)(void))sub_1B1C21BF4, (uint64_t)&type metadata for GraphEntityComponentPropertyReferences.ExportedDirectPropertyAssignment.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v8 = v7;
  v9 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v10);
  v12 = (char *)&v15 - v11;
  sub_1B19FA070(a1, a1[3]);
  sub_1B1C21BF4();
  sub_1B222A180();
  v19 = __PAIR64__(v6, v4);
  v20 = v17;
  v21 = 0;
  sub_1B1C1F16C();
  v13 = v18;
  sub_1B2229958();
  if (!v13)
  {
    v19 = v16;
    v21 = 1;
    sub_1B1A02758(0, &qword_1ED4BA420, (uint64_t)&type metadata for EntityComponentProperty, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    sub_1B1C21CB0();
    sub_1B2229958();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v12, v8);
}

uint64_t sub_1B1BF9FCC()
{
  _BYTE *v0;

  if (*v0)
    return 0x73746567726174;
  else
    return 0x656372756F73;
}

uint64_t sub_1B1BFA004@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1B1C0A050(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1B1BFA028()
{
  sub_1B1C21BF4();
  return sub_1B222A1D4();
}

uint64_t sub_1B1BFA050()
{
  sub_1B1C21BF4();
  return sub_1B222A1E0();
}

uint64_t sub_1B1BFA078@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  result = sub_1B1C1DBF0(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
  }
  return result;
}

uint64_t sub_1B1BFA0A8(_QWORD *a1)
{
  uint64_t v1;

  return sub_1B1BF9E3C(a1, *(_QWORD *)v1, *(_QWORD *)(v1 + 8), *(_QWORD *)(v1 + 16));
}

uint64_t sub_1B1BFA0C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t *v3;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;

  result = sub_1B1BF9D2C(a1, a2, *v3, v3[1], v3[2]);
  *a3 = result;
  a3[1] = v6;
  a3[2] = v7;
  return result;
}

uint64_t sub_1B1BFA0F8(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t result;

  v5 = *v2;
  swift_unknownObjectRetain();
  v6 = sub_1B1C088B4(v5, a1, a2);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  *v2 = (uint64_t)v6;
  v7 = v2[1];
  swift_unknownObjectRetain();
  v8 = sub_1B1C08D98(v7, a1, a2);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  v2[1] = (uint64_t)v8;
  swift_unknownObjectRetain();
  v9 = swift_bridgeObjectRetain();
  v10 = sub_1B1C08B0C(v9, a1, a2);
  swift_bridgeObjectRelease_n();
  swift_unknownObjectRelease();
  v2[6] = v10;
  v11 = v2[4];
  swift_unknownObjectRetain();
  v12 = sub_1B1C08D98(v11, a1, a2);
  swift_bridgeObjectRelease();
  result = swift_unknownObjectRelease();
  v2[4] = (uint64_t)v12;
  return result;
}

uint64_t sub_1B1BFA20C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v2 = MEMORY[0x1E0DEE9E0];
  v3 = a1 + 64;
  v37 = MEMORY[0x1E0DEE9E0];
  v4 = -1 << *(_BYTE *)(a1 + 32);
  if (-v4 < 64)
    v5 = ~(-1 << -(char)v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(a1 + 64);
  v7 = (unint64_t)(63 - v4) >> 6;
  v8 = 0;
  v35 = swift_bridgeObjectRetain() + 112;
  if (!v6)
    goto LABEL_8;
LABEL_5:
  v9 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  v10 = v9 | (v8 << 6);
  while (1)
  {
    v11 = (uint64_t *)(*(_QWORD *)(a1 + 56) + 16 * v10);
    v12 = v11[1];
    if (v12)
    {
      v16 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v10);
      v17 = *v16;
      v18 = v16[1];
      v19 = *v11;
      v20 = *(_QWORD *)(v2 + 16);
      v36 = v19;
      if (*(_QWORD *)(v2 + 24) <= v20)
      {
        v21 = v20 + 1;
        swift_retain_n();
        swift_bridgeObjectRetain();
        sub_1B1E9A3D4(v21, 1);
        v2 = v37;
      }
      else
      {
        swift_retain_n();
        swift_bridgeObjectRetain();
      }
      sub_1B222A06C();
      sub_1B2228824();
      v22 = sub_1B222A0C0();
      v23 = v2 + 64;
      v24 = -1 << *(_BYTE *)(v2 + 32);
      v25 = v22 & ~v24;
      v26 = v25 >> 6;
      if (((-1 << v25) & ~*(_QWORD *)(v2 + 64 + 8 * (v25 >> 6))) != 0)
      {
        v27 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v2 + 64 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
        v28 = v36;
      }
      else
      {
        v29 = (unint64_t)(63 - v24) >> 6;
        v28 = v36;
        do
        {
          if (v26 + 1 == v29)
            v26 = 0;
          else
            ++v26;
          v30 = *(_QWORD *)(v23 + 8 * v26);
        }
        while (v30 == -1);
        v27 = __clz(__rbit64(~v30)) + (v26 << 6);
      }
      *(_QWORD *)(v23 + ((v27 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v27;
      v31 = 16 * v27;
      v32 = (_QWORD *)(*(_QWORD *)(v2 + 48) + v31);
      *v32 = v17;
      v32[1] = v18;
      v33 = (_QWORD *)(*(_QWORD *)(v2 + 56) + v31);
      *v33 = v28;
      v33[1] = v12;
      ++*(_QWORD *)(v2 + 16);
      swift_release();
      if (v6)
        goto LABEL_5;
    }
    else if (v6)
    {
      goto LABEL_5;
    }
LABEL_8:
    v13 = v8 + 1;
    if (v8 + 1 >= v7)
      goto LABEL_36;
    v14 = *(_QWORD *)(v3 + 8 * v13);
    if (!v14)
    {
      v13 = v8 + 2;
      if (v8 + 2 >= v7)
        goto LABEL_36;
      v14 = *(_QWORD *)(v3 + 8 * v13);
      if (!v14)
      {
        v13 = v8 + 3;
        if (v8 + 3 >= v7)
          goto LABEL_36;
        v14 = *(_QWORD *)(v3 + 8 * v13);
        if (!v14)
        {
          v13 = v8 + 4;
          if (v8 + 4 >= v7)
            goto LABEL_36;
          v14 = *(_QWORD *)(v3 + 8 * v13);
          if (!v14)
          {
            v13 = v8 + 5;
            if (v8 + 5 >= v7)
              goto LABEL_36;
            v14 = *(_QWORD *)(v3 + 8 * v13);
            if (!v14)
              break;
          }
        }
      }
    }
LABEL_22:
    v6 = (v14 - 1) & v14;
    v10 = __clz(__rbit64(v14)) + (v13 << 6);
    v8 = v13;
  }
  v15 = v8;
  while (v7 - 6 != v15)
  {
    v14 = *(_QWORD *)(v35 + 8 * v15++);
    if (v14)
    {
      v13 = v15 + 5;
      goto LABEL_22;
    }
  }
LABEL_36:
  sub_1B19F8D30();
  return v2;
}

uint64_t sub_1B1BFA50C(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1B1BFA544
                                                                     + 4 * a3_2[a1]))(0xD00000000000001CLL, 0x80000001B2329E40);
}

uint64_t sub_1B1BFA544(uint64_t a1)
{
  return a1 + 6;
}

uint64_t sub_1B1BFA598()
{
  return 1953522533;
}

uint64_t sub_1B1BFA5A8()
{
  return 0x7469706365;
}

uint64_t sub_1B1BFA5BC()
{
  return 1953063792;
}

uint64_t sub_1B1BFA5CC()
{
  return 0x7469636370;
}

uint64_t sub_1B1BFA5E0()
{
  return 6385764;
}

uint64_t sub_1B1BFA5F0()
{
  return 1634755685;
}

uint64_t sub_1B1BFA600()
{
  return 0x7469647065;
}

uint64_t sub_1B1BFA614(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1B1BFA64C + 4 * byte_1B228330D[a1]))(0xD00000000000001CLL, 0x80000001B2329E40);
}

uint64_t sub_1B1BFA64C(uint64_t a1)
{
  return a1 + 6;
}

uint64_t sub_1B1BFA6A0()
{
  return 1953522533;
}

uint64_t sub_1B1BFA6B0()
{
  return 0x7469706365;
}

uint64_t sub_1B1BFA6C4()
{
  return 1953063792;
}

uint64_t sub_1B1BFA6D4()
{
  return 0x7469636370;
}

uint64_t sub_1B1BFA6E8()
{
  return 6385764;
}

uint64_t sub_1B1BFA6F8()
{
  return 1634755685;
}

uint64_t sub_1B1BFA708()
{
  return 0x7469647065;
}

uint64_t sub_1B1BFA71C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v8;

  v2 = *a2;
  v3 = sub_1B1BFA614(*a1);
  v5 = v4;
  if (v3 == sub_1B1BFA614(v2) && v5 == v6)
    v8 = 1;
  else
    v8 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_1B1BFA7A4()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;

  v1 = *v0;
  sub_1B222A06C();
  sub_1B1BFA50C(v1);
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

uint64_t sub_1B1BFA804()
{
  unsigned __int8 *v0;

  sub_1B1BFA50C(*v0);
  sub_1B2228824();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B1BFA844()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;

  v1 = *v0;
  sub_1B222A06C();
  sub_1B1BFA50C(v1);
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

uint64_t sub_1B1BFA8A0@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B1C0A138();
  *a1 = result;
  return result;
}

uint64_t sub_1B1BFA8CC@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1B1BFA50C(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1B1BFA8F4()
{
  unsigned __int8 *v0;

  return sub_1B1BFA614(*v0);
}

uint64_t sub_1B1BFA8FC@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B1C0A138();
  *a1 = result;
  return result;
}

void sub_1B1BFA920(_BYTE *a1@<X8>)
{
  *a1 = 13;
}

uint64_t sub_1B1BFA92C()
{
  sub_1B1C1EACC();
  return sub_1B222A1D4();
}

uint64_t sub_1B1BFA954()
{
  sub_1B1C1EACC();
  return sub_1B222A1E0();
}

uint64_t sub_1B1BFA97C(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v12;
  char v13;
  uint64_t v14;
  _BYTE v15[8];
  uint64_t v16;

  v3 = v1;
  sub_1B19F8E54(0, &qword_1EEF5C4D0, (uint64_t (*)(void))sub_1B1C1EACC, (uint64_t)&type metadata for GraphEntityComponentPropertyReferences.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = (char *)&v12 - v9;
  sub_1B19FA070(a1, a1[3]);
  sub_1B1C1EACC();
  sub_1B222A180();
  if (!*(_QWORD *)(*v3 + 16)
    || (v14 = *v3,
        v13 = 6,
        sub_1B1C1F0CC(0, &qword_1ED4B8708, (void (*)(void))sub_1B1C1EBD4, (void (*)(void))sub_1B1C1F16C),
        sub_1B1C1F1B0(),
        sub_1B2229958(),
        !v2))
  {
    if (!*(_QWORD *)(v3[1] + 16)
      || (v14 = v3[1],
          v13 = 7,
          sub_1B1C1F0CC(0, &qword_1ED4B8708, (void (*)(void))sub_1B1C1EBD4, (void (*)(void))sub_1B1C1F16C),
          sub_1B1C1F1B0(),
          sub_1B2229958(),
          !v2))
    {
      if (!*(_QWORD *)(v3[2] + 16)
        || (v14 = v3[2],
            v13 = 8,
            sub_1B1C1F0CC(0, &qword_1ED4B86F8, (void (*)(void))sub_1B1C1ECE8, (void (*)(void))sub_1B1C1ED2C),
            sub_1B1C1F218(),
            sub_1B2229958(),
            !v2))
      {
        if (!*(_QWORD *)(v3[3] + 16)
          || (v14 = v3[3],
              v13 = 9,
              sub_1B1C1F0CC(0, &qword_1ED4B86F8, (void (*)(void))sub_1B1C1ECE8, (void (*)(void))sub_1B1C1ED2C),
              sub_1B1C1F218(),
              sub_1B2229958(),
              !v2))
        {
          sub_1B1C1F280((uint64_t)(v3 + 5), (uint64_t)v15);
          sub_1B1C1F280((uint64_t)v15, (uint64_t)&v16);
          if (!v16
            || !*(_QWORD *)(v16 + 16)
            || (sub_1B1C1F280((uint64_t)v15, (uint64_t)&v14),
                v13 = 10,
                sub_1B1B40F70(0, &qword_1ED4BA450, &qword_1ED4BA440, (uint64_t)&type metadata for GraphEntityComponentPropertyReferences.DirectPropertyAssignment, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]), sub_1B1C1F428(&qword_1EEF5C500, (uint64_t (*)(void))sub_1B1C1F4AC, MEMORY[0x1E0DEE988]), sub_1B2229958(), !v2))
          {
            if (!*(_QWORD *)(v3[6] + 16)
              || (v14 = v3[6],
                  v13 = 11,
                  sub_1B1A02758(0, &qword_1ED4BA430, (uint64_t)&type metadata for GraphEntityComponentPropertyReferences.ExportedDirectPropertyAssignment, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]), sub_1B1C1F2E4(), sub_1B2229958(), !v2))
            {
              if (*(_QWORD *)(v3[4] + 16))
              {
                v14 = v3[4];
                v13 = 12;
                sub_1B1C1F5A0(0, &qword_1ED4BA278, (uint64_t)&type metadata for EntityComponentProperty, (uint64_t (*)(_QWORD, _QWORD, uint64_t, _QWORD))MEMORY[0x1E0DEA048]);
                sub_1B1C1F3A0(&qword_1EEF5C4F8, (uint64_t (*)(void))sub_1B1C1F16C, MEMORY[0x1E0DEA970], MEMORY[0x1E0DEA0B8]);
                sub_1B2229958();
              }
            }
          }
        }
      }
    }
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
}

double sub_1B1BFADC0@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  _OWORD v7[2];

  sub_1B1C1DE04(a1, v6);
  if (!v2)
  {
    v5 = v6[1];
    *a2 = v6[0];
    a2[1] = v5;
    a2[2] = v7[0];
    result = *(double *)((char *)v7 + 9);
    *(_OWORD *)((char *)a2 + 41) = *(_OWORD *)((char *)v7 + 9);
  }
  return result;
}

uint64_t sub_1B1BFAE08(_QWORD *a1)
{
  return sub_1B1BFA97C(a1);
}

uint64_t sub_1B1BFAE4C()
{
  _QWORD *v0;
  uint64_t result;

  swift_bridgeObjectRelease();
  *v0 = MEMORY[0x1E0DEE9E0];
  result = swift_bridgeObjectRelease();
  v0[5] = 0;
  return result;
}

_QWORD *sub_1B1BFAE7C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *result;

  v2 = MEMORY[0x1E0DEE9D8];
  v3 = sub_1B1B7EBDC(MEMORY[0x1E0DEE9D8]);
  v4 = sub_1B1B7EBDC(v2);
  v5 = sub_1B1B7F0F4(v2);
  v6 = sub_1B1B7F0F4(v2);
  result = sub_1B1B7EBDC(v2);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = result;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = v2;
  *(_BYTE *)(a1 + 56) = 1;
  return result;
}

uint64_t sub_1B1BFAF00()
{
  uint64_t v0;

  swift_bridgeObjectRetain();
  sub_1B2228824();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_1B2228824();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v0 + 40))
  {
    sub_1B222A084();
    swift_bridgeObjectRetain();
    sub_1B2228824();
    swift_bridgeObjectRelease();
    if (*(_QWORD *)(v0 + 56))
    {
LABEL_3:
      sub_1B222A084();
      swift_bridgeObjectRetain();
      sub_1B2228824();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
  }
  else
  {
    sub_1B222A084();
    if (*(_QWORD *)(v0 + 56))
      goto LABEL_3;
  }
  sub_1B222A084();
LABEL_6:
  if (*(_BYTE *)(v0 + 68) == 1)
    return sub_1B222A084();
  sub_1B222A084();
  return sub_1B222A09C();
}

uint64_t sub_1B1BFB020()
{
  sub_1B222A06C();
  sub_1B1BFAF00();
  return sub_1B222A0C0();
}

uint64_t sub_1B1BFB060()
{
  sub_1B222A06C();
  sub_1B1BFAF00();
  return sub_1B222A0C0();
}

uint64_t sub_1B1BFB098(uint64_t a1, uint64_t a2)
{
  unsigned int v2;

  v2 = *(_DWORD *)(a1 + 64);
  if (*(_BYTE *)(a1 + 68))
    v2 = 0;
  return (*(_DWORD *)(a2 + 64) > v2) & ~*(unsigned __int8 *)(a2 + 68);
}

uint64_t sub_1B1BFB0C0(uint64_t a1, uint64_t a2)
{
  unsigned int v2;

  v2 = *(_DWORD *)(a2 + 64);
  if (*(_BYTE *)(a2 + 68))
    v2 = 0;
  return *(_BYTE *)(a1 + 68) & 1 | (*(_DWORD *)(a1 + 64) <= v2);
}

uint64_t sub_1B1BFB0EC(uint64_t a1, uint64_t a2)
{
  unsigned int v2;

  v2 = *(_DWORD *)(a1 + 64);
  if (*(_BYTE *)(a1 + 68))
    v2 = 0;
  return *(_BYTE *)(a2 + 68) & 1 | (*(_DWORD *)(a2 + 64) <= v2);
}

uint64_t sub_1B1BFB118(uint64_t a1, uint64_t a2)
{
  unsigned int v2;

  v2 = *(_DWORD *)(a2 + 64);
  if (*(_BYTE *)(a2 + 68))
    v2 = 0;
  return (*(_DWORD *)(a1 + 64) > v2) & ~*(unsigned __int8 *)(a1 + 68);
}

uint64_t sub_1B1BFB140(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[3];
  _OWORD v8[2];
  _OWORD v9[3];
  _OWORD v10[2];

  v2 = *(_OWORD *)(a1 + 48);
  v7[2] = *(_OWORD *)(a1 + 32);
  v8[0] = v2;
  *(_QWORD *)((char *)v8 + 13) = *(_QWORD *)(a1 + 61);
  v3 = *(_OWORD *)(a1 + 16);
  v7[0] = *(_OWORD *)a1;
  v7[1] = v3;
  v4 = *(_OWORD *)(a2 + 48);
  v9[2] = *(_OWORD *)(a2 + 32);
  v10[0] = v4;
  *(_QWORD *)((char *)v10 + 13) = *(_QWORD *)(a2 + 61);
  v5 = *(_OWORD *)(a2 + 16);
  v9[0] = *(_OWORD *)a2;
  v9[1] = v5;
  return sub_1B1C07DD8((uint64_t)v7, (uint64_t)v9) & 1;
}

_QWORD *sub_1B1BFB198@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *result;

  v2 = MEMORY[0x1E0DEE9D8];
  v3 = sub_1B1B7EF3C(MEMORY[0x1E0DEE9D8]);
  result = sub_1B1B7EF5C(v2);
  *a1 = v3;
  a1[1] = result;
  return result;
}

uint64_t sub_1B1BFB1DC()
{
  sub_1B222A06C();
  sub_1B2228824();
  return sub_1B222A0C0();
}

uint64_t sub_1B1BFB22C()
{
  return sub_1B2228824();
}

uint64_t sub_1B1BFB244()
{
  sub_1B222A06C();
  sub_1B2228824();
  return sub_1B222A0C0();
}

uint64_t sub_1B1BFB290@<X0>(BOOL *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = sub_1B2229730();
  result = swift_bridgeObjectRelease();
  *a1 = v2 != 0;
  return result;
}

void sub_1B1BFB2E0(_QWORD *a1@<X8>)
{
  *a1 = 0x747865746E6F63;
  a1[1] = 0xE700000000000000;
}

uint64_t sub_1B1BFB2FC()
{
  return 0x747865746E6F63;
}

uint64_t sub_1B1BFB314@<X0>(BOOL *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = sub_1B2229730();
  result = swift_bridgeObjectRelease();
  *a1 = v2 != 0;
  return result;
}

uint64_t sub_1B1BFB368()
{
  sub_1B1C22018();
  return sub_1B222A1D4();
}

uint64_t sub_1B1BFB390()
{
  sub_1B1C22018();
  return sub_1B222A1E0();
}

uint64_t sub_1B1BFB3B8(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  _QWORD v11[2];

  sub_1B19F8E54(0, &qword_1EEF5C5A8, (uint64_t (*)(void))sub_1B1C22018, (uint64_t)&type metadata for CodeGenerationComponent.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v7);
  v9 = (char *)v11 - v8;
  sub_1B19FA070(a1, a1[3]);
  sub_1B1C22018();
  sub_1B222A180();
  if (!a2)
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  v11[1] = a2;
  _s7ContextCMa();
  sub_1B19E52CC(&qword_1EEF5C5B0, (uint64_t (*)(uint64_t))_s7ContextCMa, (uint64_t)&unk_1B2296384);
  swift_retain();
  sub_1B2229958();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  return swift_release();
}

_QWORD *sub_1B1BFB518@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;

  result = sub_1B1C21D28(a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t sub_1B1BFB540(_QWORD *a1)
{
  uint64_t *v1;

  return sub_1B1BFB3B8(a1, *v1);
}

uint64_t sub_1B1BFB558(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t ObjectType;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  v3 = v2;
  ObjectType = swift_getObjectType();
  result = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 32))(ObjectType, a2);
  if ((result & 1) != 0)
  {
    v7 = *v2;
    if (*v3)
    {
      v8 = (*(uint64_t (**)(void))(*(_QWORD *)v7 + 2512))();
      result = swift_release();
    }
    else
    {
      v8 = 0;
    }
    *v3 = v8;
  }
  return result;
}

uint64_t sub_1B1BFB5C4(uint64_t *a1, char a2, _QWORD **a3, uint64_t *a4)
{
  uint64_t v6;
  const char *v7;
  char *v8;
  BOOL v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  BOOL v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t result;
  unint64_t v24;
  unint64_t v25;
  _QWORD *v26;

  v6 = *a1;
  if (a2)
  {
    if (a2 == 1)
    {
      v7 = "constant uint32_t& currentSeed";
      v8 = "const void* scriptContext";
      v9 = v6 == 0xF000000000000000;
      if (v6 == 0xF000000000000000)
        v10 = 0xD000000000000027;
      else
        v10 = 0xD00000000000001ELL;
    }
    else
    {
      v7 = "_ currentSeed: UInt32";
      v8 = "onstants& scriptContext";
      v9 = v6 == 0xF000000000000000;
      if (v6 == 0xF000000000000000)
        v10 = 0xD000000000000021;
      else
        v10 = 0xD000000000000015;
    }
    v11 = (unint64_t)v8 | 0x8000000000000000;
    v12 = (unint64_t)v7 | 0x8000000000000000;
  }
  else
  {
    v9 = v6 == 0xF000000000000000;
    if (v6 == 0xF000000000000000)
      v10 = 0xD000000000000019;
    else
      v10 = 0xD000000000000014;
    v11 = 0x80000001B2333DC0;
    v12 = 0x80000001B2333DE0;
  }
  if (v9)
    v13 = v12;
  else
    v13 = v11;
  v14 = *a3;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a3 = v14;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v14 = sub_1B1C63044(0, v14[2] + 1, 1, v14);
    *a3 = v14;
  }
  v17 = v14[2];
  v16 = v14[3];
  if (v17 >= v16 >> 1)
  {
    v14 = sub_1B1C63044(v16 > 1, v17 + 1, 1, v14);
    *a3 = v14;
  }
  v14[2] = v17 + 1;
  v18 = &v14[2 * v17];
  v18[4] = v10;
  v18[5] = v13;
  v19 = v6 == 0xF000000000000000;
  if (v6 == 0xF000000000000000)
    v20 = 0x6F43747069726373;
  else
    v20 = 0x53746E6572727563;
  if (v19)
    v21 = 0xED0000747865746ELL;
  else
    v21 = 0xEB00000000646565;
  v22 = (_QWORD *)*a4;
  result = swift_isUniquelyReferenced_nonNull_native();
  *a4 = (uint64_t)v22;
  if ((result & 1) == 0)
  {
    result = (uint64_t)sub_1B1C63044(0, v22[2] + 1, 1, v22);
    v22 = (_QWORD *)result;
    *a4 = result;
  }
  v25 = v22[2];
  v24 = v22[3];
  if (v25 >= v24 >> 1)
  {
    result = (uint64_t)sub_1B1C63044(v24 > 1, v25 + 1, 1, v22);
    v22 = (_QWORD *)result;
    *a4 = result;
  }
  v22[2] = v25 + 1;
  v26 = &v22[2 * v25];
  v26[4] = v20;
  v26[5] = v21;
  return result;
}

uint64_t sub_1B1BFB814()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BADA8, (uint64_t)&type metadata for ComponentProperty, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B2284610;
  v1 = MEMORY[0x1B5E20D60](0x6E6F697469736F70, 0xE800000000000000);
  v5 = sub_1B1ADEE18(v1, v2, v3, v4);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + 32) = v5;
  v6 = MEMORY[0x1B5E20D60](0x797469636F6C6576, 0xE800000000000000);
  v10 = sub_1B1ADEE34(v6, v7, v8, v9);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + 40) = v10;
  v11 = MEMORY[0x1B5E20D60](0x5672616C75676E61, 0xEF797469636F6C65);
  v15 = sub_1B1ADE504(v11, v12, v13, v14);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + 48) = v15;
  v16 = MEMORY[0x1B5E20D60](0x656C616373, 0xE500000000000000);
  v20 = sub_1B1ADEDC4(v16, v17, v18, v19);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + 56) = v20;
  v21 = MEMORY[0x1B5E20D60](0x656C616373, 0xE500000000000000);
  v25 = sub_1B1ADEDE0(v21, v22, v23, v24);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + 64) = v25;
  v26 = MEMORY[0x1B5E20D60](0x656C616373, 0xE500000000000000);
  v30 = sub_1B1ADEDFC(v26, v27, v28, v29);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + 72) = v30;
  v31 = MEMORY[0x1B5E20D60](0x726F6C6F63, 0xE500000000000000);
  v35 = sub_1B1ADEDA8(v31, v32, v33, v34);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + 80) = v35;
  v36 = MEMORY[0x1B5E20D60](0x7461746E6569726FLL, 0xEB000000006E6F69);
  v40 = sub_1B1ADE45C(v36, v37, v38, v39);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + 88) = v40;
  v41 = MEMORY[0x1B5E20D60](0x656C676E61, 0xE500000000000000);
  v45 = sub_1B1ADE4B0(v41, v42, v43, v44);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + 96) = v45;
  v46 = MEMORY[0x1B5E20D60](0x6C6556656C676E61, 0xED0000797469636FLL);
  v50 = sub_1B1ADED70(v46, v47, v48, v49);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + 104) = v50;
  v51 = MEMORY[0x1B5E20D60](25705, 0xE200000000000000);
  v55 = sub_1B1ADE440(v51, v52, v53, v54);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + 112) = v55;
  v56 = MEMORY[0x1B5E20D60](0x4665727574786574, 0xEC000000656D6172);
  v60 = sub_1B1ADED54(v56, v57, v58, v59);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + 120) = v60;
  v61 = MEMORY[0x1B5E20D60](0x746F766970, 0xE500000000000000);
  v65 = sub_1B1ADE4CC(v61, v62, v63, v64);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + 128) = v65;
  v66 = MEMORY[0x1B5E20D60](0x7A696C616D726F6ELL, 0xED00006567416465);
  v70 = sub_1B1ADE478(v66, v67, v68, v69);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + 136) = v70;
  v71 = MEMORY[0x1B5E20D60](0x656D69746566696CLL, 0xE800000000000000);
  v75 = sub_1B1ADE53C(v71, v72, v73, v74);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + 144) = v75;
  v76 = MEMORY[0x1B5E20D60](1936941421, 0xE400000000000000);
  v80 = sub_1B1ADED8C(v76, v77, v78, v79);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + 152) = v80;
  v81 = MEMORY[0x1B5E20D60](0x746567726174, 0xE600000000000000);
  v85 = sub_1B1ADE4E8(v81, v82, v83, v84);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + 160) = v85;
  v86 = MEMORY[0x1B5E20D60](0x6174614472657375, 0xE900000000000031);
  v90 = sub_1B1ADEE50(v86, v87, v88, v89);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + 168) = v90;
  v91 = MEMORY[0x1B5E20D60](0x6174614472657375, 0xE900000000000032);
  v95 = sub_1B1ADEE6C(v91, v92, v93, v94);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + 176) = v95;
  v96 = MEMORY[0x1B5E20D60](0x6174614472657375, 0xE900000000000033);
  v100 = sub_1B1ADEE88(v96, v97, v98, v99);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + 184) = v100;
  v101 = MEMORY[0x1B5E20D60](0x6174614472657375, 0xE900000000000034);
  v105 = sub_1B1ADEEA4(v101, v102, v103, v104);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + 192) = v105;
  v106 = MEMORY[0x1B5E20D60](0x73656E6867756F72, 0xE900000000000073);
  v110 = sub_1B1ADED1C(v106, v107, v108, v109);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + 200) = v110;
  v111 = MEMORY[0x1B5E20D60](0x73656E6C6174656DLL, 0xE900000000000073);
  v115 = sub_1B1ADED00(v111, v112, v113, v114);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + 208) = v115;
  v116 = MEMORY[0x1B5E20D60](0x6E6F697373696D65, 0xE800000000000000);
  v120 = sub_1B1ADE520(v116, v117, v118, v119);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + 216) = v120;
  v121 = MEMORY[0x1B5E20D60](0x726F62686769656ELL, 0xED0000746E756F43);
  v125 = sub_1B1ADE494(v121, v122, v123, v124);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + 224) = v125;
  result = sub_1B2228AD0();
  qword_1ED4D0D68 = v0;
  return result;
}

uint64_t *sub_1B1BFBD60()
{
  if (qword_1ED4B9480 != -1)
    swift_once();
  return &qword_1ED4D0D68;
}

uint64_t sub_1B1BFBDA0()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BADA8, (uint64_t)&type metadata for ComponentProperty, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226D240;
  v1 = MEMORY[0x1B5E20D60](0x44496E77617073, 0xE700000000000000);
  v5 = sub_1B1ADED38(v1, v2, v3, v4);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + 32) = v5;
  result = sub_1B2228AD0();
  qword_1ED4D0D70 = v0;
  return result;
}

double sub_1B1BFBE4C()
{
  double result;
  _OWORD v1[2];
  uint64_t v2;
  uint64_t v3;
  int v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;

  if (qword_1ED4B7DB8 != -1)
    swift_once();
  v3 = qword_1ED4D09F8;
  v4 = 0;
  v5 = 2;
  v6 = 0;
  v7 = 2;
  v8 = 0;
  swift_retain();
  sub_1B1E40314(1, (uint64_t)v1);
  swift_release();
  result = *(double *)v1;
  xmmword_1EEFD5410 = v1[0];
  *(_OWORD *)&qword_1EEFD5420 = v1[1];
  qword_1EEFD5430 = v2;
  return result;
}

uint64_t sub_1B1BFBEF0()
{
  uint64_t result;
  uint64_t v1;
  int v2;
  char v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;

  if (qword_1ED4B7DB8 != -1)
    swift_once();
  v7 = qword_1ED4D09F8;
  v8 = 0;
  v9 = 2;
  v10 = 0;
  v11 = 2;
  v12 = 0;
  swift_retain();
  sub_1B1E40314(1, (uint64_t)&v1);
  result = swift_release();
  qword_1ED4D0D40 = v1;
  dword_1ED4D0D48 = v2;
  byte_1ED4D0D4C = v3;
  qword_1ED4D0D50 = v4 | 1;
  byte_1ED4D0D58 = v5;
  qword_1ED4D0D60 = v6;
  return result;
}

uint64_t sub_1B1BFBFB8()
{
  uint64_t result;
  uint64_t v1;
  int v2;
  char v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;

  if (qword_1ED4B7DB8 != -1)
    swift_once();
  v7 = qword_1ED4D09F8;
  v8 = 0;
  v9 = 2;
  v10 = 0;
  v11 = 2;
  v12 = 0;
  swift_retain();
  sub_1B1E4011C(1, (uint64_t)&v1);
  result = swift_release();
  *(_QWORD *)&xmmword_1ED4D0988 = v1;
  DWORD2(xmmword_1ED4D0988) = v2;
  BYTE12(xmmword_1ED4D0988) = v3;
  qword_1ED4D0998 = v4 | 1;
  byte_1ED4D09A0 = v5;
  qword_1ED4D09A8 = v6;
  return result;
}

uint64_t sub_1B1BFC080()
{
  uint64_t result;
  uint64_t v1;
  int v2;
  char v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;

  if (qword_1ED4B7DB8 != -1)
    swift_once();
  v7 = qword_1ED4D09F8;
  v8 = 0;
  v9 = 2;
  v10 = 0;
  v11 = 2;
  v12 = 0;
  swift_retain();
  sub_1B1E3C60C(3, (uint64_t)&v1);
  result = swift_release();
  *(_QWORD *)&xmmword_1ED4D0D18 = v1;
  DWORD2(xmmword_1ED4D0D18) = v2;
  BYTE12(xmmword_1ED4D0D18) = v3;
  qword_1ED4D0D28 = v4 | 1;
  byte_1ED4D0D30 = v5;
  qword_1ED4D0D38 = v6;
  return result;
}

double sub_1B1BFC148()
{
  double result;
  _OWORD v1[2];
  uint64_t v2;
  uint64_t v3;
  int v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;

  if (qword_1ED4B7DB8 != -1)
    swift_once();
  v3 = qword_1ED4D09F8;
  v4 = 0;
  v5 = 2;
  v6 = 0;
  v7 = 2;
  v8 = 0;
  swift_retain();
  sub_1B1E3C804(3, (uint64_t)v1);
  swift_release();
  result = *(double *)v1;
  xmmword_1ED4D0CF0 = v1[0];
  unk_1ED4D0D00 = v1[1];
  qword_1ED4D0D10 = v2;
  return result;
}

uint64_t sub_1B1BFC1EC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  os_unfair_lock_s *v5;
  uint64_t v6;
  uint64_t v7;
  os_unfair_lock_s *v8;
  uint64_t v9;
  uint64_t v10;
  os_unfair_lock_s *v11;
  uint64_t v12;
  uint64_t v13;
  os_unfair_lock_s *v14;
  uint64_t v15;
  uint64_t v16;
  os_unfair_lock_s *v17;

  if (qword_1EEF57310 != -1)
    swift_once();
  v2 = xmmword_1EEFD5410;
  v3 = *(_QWORD *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_queryManager);
  swift_getObjectType();
  v4 = sub_1B204D6E4();
  v5 = *(os_unfair_lock_s **)(v3 + 40);
  swift_retain_n();
  os_unfair_lock_lock(v5);
  sub_1B1E8F784(a1, v2);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B1E8FAC0(a1, v4, v2);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v3 + 40));
  swift_release_n();
  if (qword_1ED4B9478 != -1)
    swift_once();
  v6 = qword_1ED4D0D40;
  swift_getObjectType();
  v7 = sub_1B204D6E4();
  v8 = *(os_unfair_lock_s **)(v3 + 40);
  swift_retain_n();
  os_unfair_lock_lock(v8);
  sub_1B1E8F784(a1, v6);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B1E8FAC0(a1, v7, v6);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v3 + 40));
  swift_release_n();
  if (qword_1ED4B9460 != -1)
    swift_once();
  v9 = xmmword_1ED4D0988;
  swift_getObjectType();
  v10 = sub_1B204D6E4();
  v11 = *(os_unfair_lock_s **)(v3 + 40);
  swift_retain_n();
  os_unfair_lock_lock(v11);
  sub_1B1E8F784(a1, v9);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B1E8FAC0(a1, v10, v9);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v3 + 40));
  swift_release_n();
  if (qword_1ED4B9468 != -1)
    swift_once();
  v12 = xmmword_1ED4D0D18;
  swift_getObjectType();
  v13 = sub_1B204D6E4();
  v14 = *(os_unfair_lock_s **)(v3 + 40);
  swift_retain_n();
  os_unfair_lock_lock(v14);
  sub_1B1E8F784(a1, v12);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B1E8FAC0(a1, v13, v12);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v3 + 40));
  swift_release_n();
  if (qword_1ED4B7890 != -1)
    swift_once();
  v15 = xmmword_1ED4D0CF0;
  swift_getObjectType();
  v16 = sub_1B204D6E4();
  v17 = *(os_unfair_lock_s **)(v3 + 40);
  swift_retain_n();
  os_unfair_lock_lock(v17);
  sub_1B1E8F784(a1, v15);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B1E8FAC0(a1, v16, v15);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v3 + 40));
  return swift_release_n();
}

uint64_t sub_1B1BFC5CC(unint64_t *a1, uint64_t a2, char a3)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  ValueMetadata *v7;
  char v8;

  v4 = a1[4];
  v5 = a1[5];
  v6 = *a1;
  v7 = (ValueMetadata *)a1[1];
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a2 + 80) + 8 * (int)sub_1B1DA6018(*a1) + 32) + 200) == 1)
  {
    if ((a3 & 1) != 0 && (sub_1B1DA5684(v6) & 1) != 0)
    {
      v8 = sub_1B1DA5684(v6);
      return v8 & 1;
    }
    if (v7 != &type metadata for SetActive)
    {
      if (v7 != &type metadata for NodeVisibilityController)
        return 0;
      if (v4 != *(_QWORD *)aVisible_0 || v5 != unk_1EEF61418)
      {
        v8 = sub_1B2229D24();
        return v8 & 1;
      }
    }
  }
  return 1;
}

uint64_t sub_1B1BFC6AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t result;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  char v19;

  v5 = v4;
  v18 = 0;
  v19 = 1;
  swift_retain();
  v10 = swift_bridgeObjectRetain();
  sub_1B1C0F964(v10, v4, &v18);
  swift_bridgeObjectRelease();
  swift_release();
  swift_retain();
  v11 = swift_bridgeObjectRetain();
  sub_1B1C0FBD4(v11, v4, &v18);
  swift_bridgeObjectRelease();
  swift_release();
  if ((v19 & 1) != 0)
  {
    v12 = *(_QWORD **)(v4 + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(v4 + 16) = v12;
    if ((result & 1) == 0)
    {
      result = (uint64_t)sub_1B1C64DA4(0, v12[2] + 1, 1, v12);
      v12 = (_QWORD *)result;
      *(_QWORD *)(v4 + 16) = result;
    }
    v15 = v12[2];
    v14 = v12[3];
    if (v15 >= v14 >> 1)
    {
      result = (uint64_t)sub_1B1C64DA4(v14 > 1, v15 + 1, 1, v12);
      v12 = (_QWORD *)result;
      *(_QWORD *)(v5 + 16) = result;
    }
    v12[2] = v15 + 1;
    v16 = &v12[4 * v15];
    v16[4] = a1;
    v16[5] = a2;
    v16[6] = a3;
    v16[7] = a4;
  }
  else
  {
    v17 = v18;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return (uint64_t)sub_1B1C91250(v17, v17, a1, a2, a3, a4);
  }
  return result;
}

uint64_t sub_1B1BFC83C@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v22;
  BOOL v23;
  char v24;
  unint64_t v25;
  unint64_t v26;
  __int128 v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t result;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v2 = *a1;
  swift_bridgeObjectRetain();
  v3 = swift_bridgeObjectRetain();
  v4 = sub_1B1C09324(v3, v2);
  swift_bridgeObjectRelease();
  v5 = sub_1B1C0971C(v4);
  v33 = v7;
  v34 = v6;
  v32 = v8;
  swift_bridgeObjectRelease();
  v37 = *(_QWORD *)(v5 + 16);
  if (v37)
  {
    v36 = v5 + 32;
    v31 = v5;
    swift_bridgeObjectRetain();
    v9 = 0;
    v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    do
    {
      v11 = *(_QWORD *)(v36 + 40 * v9 + 24);
      v40 = *(_QWORD *)(v11 + 16);
      if (v40)
      {
        v38 = v9;
        v39 = v11 + 32;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain_n();
        v12 = 0;
        do
        {
          v41 = v12;
          v13 = (int *)(v39 + 56 * v12);
          v15 = *v13;
          v14 = v13[1];
          v16 = *((_QWORD *)v13 + 5);
          v45 = *((_QWORD *)v13 + 4);
          v46 = *((_QWORD *)v13 + 3);
          v17 = v10[2];
          v44 = *((_QWORD *)v13 + 6);
          v43 = *(_OWORD *)(v13 + 2);
          v42 = v10;
          if (v17)
          {
            swift_bridgeObjectRetain();
            swift_retain();
            v18 = v10 + 5;
            v19 = v16;
            while (1)
            {
              if (*((_DWORD *)v18 - 2) == v15 && *((_DWORD *)v18 - 1) == v14 && *v18 == (_QWORD)v43 && v18[2] == v46)
              {
                v22 = v18[5];
                v23 = v18[3] == v45 && v18[4] == v19;
                if (v23 || (sub_1B2229D24() & 1) != 0)
                {
                  if (v22)
                  {
                    if (v44)
                    {
                      sub_1B2229328();
                      swift_retain_n();
                      swift_bridgeObjectRetain();
                      v24 = sub_1B22286E0();
                      swift_bridgeObjectRelease();
                      swift_release_n();
                      v19 = v16;
                      swift_release();
                      if ((v24 & 1) != 0)
                      {
LABEL_28:
                        swift_release();
                        v10 = v42;
                        goto LABEL_35;
                      }
                    }
                  }
                  else if (!v44)
                  {
                    goto LABEL_28;
                  }
                }
              }
              v18 += 7;
              if (!--v17)
                goto LABEL_30;
            }
          }
          swift_retain();
          swift_bridgeObjectRetain();
LABEL_30:
          swift_bridgeObjectRetain();
          swift_retain();
          v10 = v42;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v10 = sub_1B1C66B7C(0, v42[2] + 1, 1, v42);
          v26 = v10[2];
          v25 = v10[3];
          v27 = v43;
          if (v26 >= v25 >> 1)
          {
            v29 = sub_1B1C66B7C(v25 > 1, v26 + 1, 1, v10);
            v27 = v43;
            v10 = v29;
          }
          v10[2] = v26 + 1;
          v28 = &v10[7 * v26];
          *((_DWORD *)v28 + 8) = v15;
          *((_DWORD *)v28 + 9) = v14;
          *(_OWORD *)(v28 + 5) = v27;
          v28[7] = v46;
          v28[8] = v45;
          v28[9] = v16;
          v28[10] = v44;
          swift_release();
LABEL_35:
          swift_bridgeObjectRelease();
          v12 = v41 + 1;
        }
        while (v41 + 1 != v40);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        v9 = v38;
      }
      ++v9;
    }
    while (v9 != v37);
    v5 = v31;
    swift_bridgeObjectRelease();
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  result = sub_1B19F51DC((uint64_t)v10);
  *a2 = v5;
  a2[1] = v34;
  a2[2] = v33;
  a2[3] = v32;
  return result;
}

uint64_t sub_1B1BFCBD4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned __int16 v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int16 v13;
  unsigned __int8 v14;

  sub_1B1D165B4(*(_QWORD *)(a1 + 24), (uint64_t)&v10);
  v4 = v11;
  v5 = v12;
  v6 = v13 | (v14 << 16);
  v7 = v10;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v8 = sub_1B20C8A90(v5, a1, a2);
  swift_release();
  swift_release();
  swift_retain();
  swift_bridgeObjectRelease_n();
  sub_1B1BF79F8(v7, v4, v8, v6 & 0x1010101, *(_QWORD *)(a1 + 24));
  swift_bridgeObjectRelease_n();
  return swift_bridgeObjectRelease_n();
}

uint64_t sub_1B1BFCCC0(__int16 *a1, uint64_t a2, uint64_t a3)
{
  int *v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int16 v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  _QWORD v40[2];
  __int16 *v41;
  uint64_t v42;
  __int128 v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;

  sub_1B1B1F358();
  v6 = v5;
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1B222820C();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v12);
  v14 = (char *)v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = swift_weakLoadStrong();
  if (!result)
    return result;
  v16 = result;
  a1[12] = 1;
  if (a3 == 0xFFFFFFFFLL
    || a3 << 32 < (uint64_t)0xFFFFFFFF00000001
    || (int)a3 >= *(_QWORD *)(result + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8)
    || (v17 = *(_QWORD *)(result + OBJC_IVAR____TtC3VFX13EntityManager__entries), HIDWORD(a3) != -1)
    && *(_DWORD *)(v17 + 12 * (int)a3 + 8) != HIDWORD(a3)
    || (v18 = sub_1B1FF0E2C(*(_QWORD *)(*(_QWORD *)(result + 136) + 8 * *(int *)(v17 + 12 * (int)a3) + 32))) == 0
    || (v19 = v18, v18 == 1))
  {
LABEL_3:
    swift_release();
    result = swift_bridgeObjectRelease();
    *((_QWORD *)a1 + 2) = MEMORY[0x1E0DEE9E0];
    return result;
  }
  v20 = sub_1B1FDF900(a3, v16);
  if (!v20)
  {
    sub_1B1AE81C8(v19);
    goto LABEL_3;
  }
  v21 = v20;
  v48 = v14;
  v51 = *((_QWORD *)a1 + 1);
  v42 = v19;
  v22 = *a1;
  swift_retain();
  v23 = v22;
  v24 = v42;
  sub_1B1BFD6DC(v42, v21, 1, v23, v51);
  swift_bridgeObjectRelease();
  v54 = MEMORY[0x1E0DEE9D8];
  sub_1B1BFDC78(v24, (uint64_t)&v54);
  v25 = v54;
  v26 = *(_QWORD *)(v54 + 16);
  if (v26)
  {
    v45 = v11;
    v46 = v10;
    v47 = v6;
    v40[1] = v16;
    v41 = a1;
    v27 = qword_1ED4BF430;
    swift_bridgeObjectRetain();
    if (v27 != -1)
      swift_once();
    v40[0] = v25;
    v28 = v25 + 88;
    v44 = 0x80000001B2333D00;
    v43 = xmmword_1B226D240;
    do
    {
      v51 = v26;
      v52 = 0;
      v53 = 0xE000000000000000;
      v50 = qword_1ED4D0FB0;
      swift_retain();
      sub_1B2229430();
      sub_1B2228890();
      swift_bridgeObjectRetain();
      sub_1B2228890();
      swift_bridgeObjectRelease();
      sub_1B2228890();
      swift_bridgeObjectRetain();
      sub_1B2228890();
      swift_bridgeObjectRelease();
      sub_1B2228890();
      v30 = v52;
      v29 = v53;
      v31 = sub_1B2228E90();
      if (qword_1ED4BF658 != -1)
        swift_once();
      v32 = qword_1ED4D0FD0;
      v33 = qword_1ED4BF688;
      swift_retain();
      if (v33 != -1)
        swift_once();
      v28 += 64;
      sub_1B1B42948();
      v34 = swift_allocObject();
      *(_OWORD *)(v34 + 16) = v43;
      *(_QWORD *)(v34 + 56) = MEMORY[0x1E0DEA968];
      *(_QWORD *)(v34 + 64) = sub_1B1B1F47C();
      *(_QWORD *)(v34 + 32) = v30;
      *(_QWORD *)(v34 + 40) = v29;
      swift_bridgeObjectRetain();
      sub_1B222835C();
      swift_bridgeObjectRelease();
      swift_retain();
      v49 = v32;
      v35 = v48;
      sub_1B2228200();
      v36 = v47[12];
      v37 = v47[16];
      v38 = &v9[v47[20]];
      (*(void (**)(char *, char *, uint64_t))(v45 + 32))(v9, v35, v46);
      v9[v36] = v31;
      *(_QWORD *)&v9[v37] = 0;
      *(_QWORD *)v38 = v30;
      *((_QWORD *)v38 + 1) = v29;
      swift_bridgeObjectRetain();
      sub_1B2228428();
      swift_release();
      sub_1B1A04628((uint64_t)v9, (uint64_t (*)(_QWORD))sub_1B1B1F358);
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      v26 = v51 - 1;
    }
    while (v51 != 1);
    v39 = v42;
    sub_1B1AE81C8(v42);
    sub_1B1AE81C8(v39);
    a1 = v41;
  }
  else
  {
    swift_bridgeObjectRetain();
    sub_1B1AE81C8(v24);
    sub_1B1AE81C8(v24);
  }
  swift_bridgeObjectRelease_n();
  result = swift_release();
  *((_BYTE *)a1 + 26) = 1;
  return result;
}

uint64_t sub_1B1BFD1D4(__int16 *a1, uint64_t a2, uint64_t a3)
{
  int *v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  _QWORD v40[2];
  __int16 *v41;
  uint64_t v42;
  __int128 v43;
  unint64_t v44;
  uint64_t v45;
  int *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;

  sub_1B1B1F358();
  v6 = v5;
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1B222820C();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v12);
  v14 = (char *)v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = swift_weakLoadStrong();
  if (!result)
    return result;
  v16 = result;
  a1[12] = 1;
  if (a3 == 0xFFFFFFFFLL
    || a3 << 32 < (uint64_t)0xFFFFFFFF00000001
    || (int)a3 >= *(_QWORD *)(result + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8)
    || (v17 = *(_QWORD *)(result + OBJC_IVAR____TtC3VFX13EntityManager__entries), HIDWORD(a3) != -1)
    && *(_DWORD *)(v17 + 12 * (int)a3 + 8) != HIDWORD(a3)
    || (v18 = sub_1B1FF0E2C(*(_QWORD *)(*(_QWORD *)(result + 136) + 8 * *(int *)(v17 + 12 * (int)a3) + 32))) == 0
    || (v19 = v18, v18 == 1))
  {
LABEL_3:
    swift_release();
    result = swift_bridgeObjectRelease();
    *((_QWORD *)a1 + 2) = MEMORY[0x1E0DEE9E0];
    return result;
  }
  v20 = sub_1B1FDF900(a3, v16);
  if (!v20)
  {
    sub_1B1AE81C8(v19);
    goto LABEL_3;
  }
  v21 = v20;
  v47 = v14;
  v48 = v11;
  v22 = *((_QWORD *)a1 + 1);
  v42 = v19;
  v23 = *a1;
  sub_1B1C19190(v42);
  v24 = v42;
  sub_1B1BFD6DC(v42, v21, 1, v23, v22);
  swift_bridgeObjectRelease();
  v54 = MEMORY[0x1E0DEE9D8];
  sub_1B1BFDC78(v24, (uint64_t)&v54);
  v25 = v54;
  v26 = *(_QWORD *)(v54 + 16);
  if (v26)
  {
    v45 = v10;
    v46 = v6;
    v40[1] = v16;
    v41 = a1;
    v27 = qword_1ED4BF430;
    swift_bridgeObjectRetain();
    if (v27 != -1)
      swift_once();
    v40[0] = v25;
    v28 = v25 + 88;
    v44 = 0x80000001B2333D00;
    v43 = xmmword_1B226D240;
    do
    {
      v51 = v26;
      v52 = 0;
      v53 = 0xE000000000000000;
      v50 = qword_1ED4D0FB0;
      swift_retain();
      sub_1B2229430();
      sub_1B2228890();
      swift_bridgeObjectRetain();
      sub_1B2228890();
      swift_bridgeObjectRelease();
      sub_1B2228890();
      swift_bridgeObjectRetain();
      sub_1B2228890();
      swift_bridgeObjectRelease();
      sub_1B2228890();
      v30 = v52;
      v29 = v53;
      v31 = sub_1B2228E90();
      if (qword_1ED4BF658 != -1)
        swift_once();
      v32 = qword_1ED4D0FD0;
      v33 = qword_1ED4BF688;
      swift_retain();
      if (v33 != -1)
        swift_once();
      v28 += 64;
      sub_1B1B42948();
      v34 = swift_allocObject();
      *(_OWORD *)(v34 + 16) = v43;
      *(_QWORD *)(v34 + 56) = MEMORY[0x1E0DEA968];
      *(_QWORD *)(v34 + 64) = sub_1B1B1F47C();
      *(_QWORD *)(v34 + 32) = v30;
      *(_QWORD *)(v34 + 40) = v29;
      swift_bridgeObjectRetain();
      sub_1B222835C();
      swift_bridgeObjectRelease();
      swift_retain();
      v49 = v32;
      v35 = v47;
      sub_1B2228200();
      v36 = v46[12];
      v37 = v46[16];
      v38 = &v9[v46[20]];
      (*(void (**)(char *, char *, uint64_t))(v48 + 32))(v9, v35, v45);
      v9[v36] = v31;
      *(_QWORD *)&v9[v37] = 0;
      *(_QWORD *)v38 = v30;
      *((_QWORD *)v38 + 1) = v29;
      swift_bridgeObjectRetain();
      sub_1B2228428();
      swift_release();
      sub_1B1A04628((uint64_t)v9, (uint64_t (*)(_QWORD))sub_1B1B1F358);
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      v26 = v51 - 1;
    }
    while (v51 != 1);
    v39 = v42;
    sub_1B1AE81C8(v42);
    sub_1B1AE81C8(v39);
    a1 = v41;
  }
  else
  {
    swift_bridgeObjectRetain();
    sub_1B1AE81C8(v24);
    sub_1B1AE81C8(v24);
  }
  swift_bridgeObjectRelease_n();
  result = swift_release();
  *((_BYTE *)a1 + 26) = 1;
  return result;
}

void sub_1B1BFD6DC(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  if (*(_QWORD *)(a5 + 16))
    __asm { BR              X10 }
}

void sub_1B1BFDC78(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[43];

  v14[11] = a2;
  v14[42] = *MEMORY[0x1E0C80C00];
  sub_1B1C18FB4(0);
  v14[5] = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v4);
  v14[9] = (char *)v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6, v7);
  MEMORY[0x1E0C80A78](v8, v9);
  v14[8] = (char *)v14 - v10;
  sub_1B1791524(0, &qword_1EEF5C488, v11, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v12, v13);
  __asm { BR              X10 }
}

uint64_t sub_1B1BFDDB0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t inited;
  int v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  int64_t v25;
  uint64_t *v26;
  uint64_t v27;
  int64_t v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  int v32;
  BOOL v33;
  char v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t result;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  BOOL v49;
  BOOL v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  int64_t v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  char v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  BOOL v95;

  *(_QWORD *)(v5 - 256) = v1;
  v6 = *(_QWORD *)(v1 + 176);
  if (!*(_QWORD *)(v6 + 16))
    return swift_bridgeObjectRelease();
  *(_QWORD *)(v5 - 400) = v0;
  swift_bridgeObjectRetain();
  v7 = sub_1B1DC3B00(0x6E77617053, 0xE500000000000000);
  if ((v8 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  v9 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v7);
  swift_retain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v10 = *(_QWORD *)(*(_QWORD *)(v3 + 16) + 16);
  sub_1B1A02758(0, &qword_1ED4BAD88, (uint64_t)&type metadata for ScriptParameter, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = 0xF000000000000000;
  *(_BYTE *)(inited + 40) = 1;
  *(_QWORD *)(inited + 48) = 0;
  *(_BYTE *)(inited + 56) = 1;
  v12 = *(unsigned __int8 *)(v3 + 24);
  *(_QWORD *)(v5 - 376) = v2;
  *(_QWORD *)(v5 - 408) = v10;
  if (v12 == 1)
  {
    v13 = swift_allocObject();
    *(_QWORD *)(v13 + 16) = 0xFFFFFFFFLL;
    v14 = v13 | 0xB000000000000000;
    inited = (uint64_t)sub_1B1C638E4(1, 2, 1, (_QWORD *)inited);
    *(_QWORD *)(inited + 16) = 2;
    *(_QWORD *)(inited + 64) = v14;
    *(_BYTE *)(inited + 72) = 1;
    *(_QWORD *)(inited + 80) = 0;
    *(_BYTE *)(inited + 88) = 1;
  }
  v15 = *(_BYTE *)(v3 + 1);
  v16 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v5 - 240) = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v5 - 232) = v16;
  swift_bridgeObjectRetain();
  v17 = *(_BYTE *)(inited + 40);
  v18 = *(_QWORD *)(inited + 48);
  v19 = *(_BYTE *)(inited + 56);
  *(_QWORD *)(v5 - 160) = *(_QWORD *)(inited + 32);
  *(_BYTE *)(v5 - 152) = v17;
  *(_QWORD *)(v5 - 144) = v18;
  *(_BYTE *)(v5 - 136) = v19;
  v20 = 0;
  sub_1B1BFB5C4((uint64_t *)(v5 - 160), v15, (_QWORD **)(v5 - 232), (uint64_t *)(v5 - 240));
  if ((v12 & 1) != 0)
  {
    v21 = *(_BYTE *)(inited + 72);
    v22 = *(_QWORD *)(inited + 80);
    v23 = *(_BYTE *)(inited + 88);
    *(_QWORD *)(v5 - 160) = *(_QWORD *)(inited + 64);
    *(_BYTE *)(v5 - 152) = v21;
    *(_QWORD *)(v5 - 144) = v22;
    *(_BYTE *)(v5 - 136) = v23;
    sub_1B1BFB5C4((uint64_t *)(v5 - 160), v15, (_QWORD **)(v5 - 232), (uint64_t *)(v5 - 240));
  }
  *(_QWORD *)(v5 - 384) = v4;
  *(_QWORD *)(v5 - 416) = inited;
  swift_bridgeObjectRelease();
  *(_QWORD *)(v5 - 264) = *(_QWORD *)(v5 - 232);
  *(_QWORD *)(v5 - 272) = *(_QWORD *)(v5 - 240);
  v24 = sub_1B1DE2C4C(v9);
  v25 = *(_QWORD *)(v24 + 16);
  *(_QWORD *)(v5 - 352) = v3;
  *(_QWORD *)(v5 - 336) = v9;
  if (!v25)
  {
    sub_1B1C04028((uint64_t)&unk_1E639B980);
    v64 = v9;
    goto LABEL_62;
  }
  *(_QWORD *)(v5 - 160) = MEMORY[0x1E0DEE9D8];
  sub_1B202AF40(0, v25, 0);
  *(_QWORD *)(v5 - 424) = v24;
  v26 = (uint64_t *)(v24 + 40);
  v27 = *(_QWORD *)(v5 - 160);
  *(_QWORD *)(v5 - 280) = v25;
  v28 = v25;
  do
  {
    v29 = *(v26 - 1);
    v30 = *v26;
    v31 = v29 == 1701015119 && v30 == 0xE400000000000000;
    if (v31 || (sub_1B2229D24() & 1) != 0)
    {
      v32 = 0;
LABEL_21:
      v34 = 1;
      goto LABEL_22;
    }
    v33 = v29 == 0x74737275426E4FLL && v30 == 0xE700000000000000;
    if (v33 || (sub_1B2229D24() & 1) != 0)
    {
      v32 = 1;
      goto LABEL_21;
    }
    if (v29 == 0x7461657065526E4FLL && v30 == 0xE800000000000000)
    {
      v32 = 0;
      v34 = 0;
    }
    else
    {
      v38 = sub_1B2229D24();
      if ((v38 & 1) != 0)
        v32 = 0;
      else
        v32 = 2;
      v34 = v38 ^ 1;
    }
LABEL_22:
    *(_QWORD *)(v5 - 160) = v27;
    v36 = *(_QWORD *)(v27 + 16);
    v35 = *(_QWORD *)(v27 + 24);
    if (v36 >= v35 >> 1)
    {
      sub_1B202AF40(v35 > 1, v36 + 1, 1);
      v27 = *(_QWORD *)(v5 - 160);
    }
    v26 += 2;
    *(_QWORD *)(v27 + 16) = v36 + 1;
    v37 = v27 + 8 * v36;
    *(_DWORD *)(v37 + 32) = v32;
    *(_BYTE *)(v37 + 36) = v34 & 1;
    --v28;
  }
  while (v28);
  v3 = *(_QWORD *)(v5 - 352);
  sub_1B1C04028(v27);
  swift_bridgeObjectRelease();
  v40 = (uint64_t *)(swift_bridgeObjectRetain() + 40);
  v41 = *(_QWORD *)(v5 - 256);
  while (2)
  {
    *(_QWORD *)(v5 - 288) = v20;
    v47 = *(v40 - 1);
    v46 = *v40;
    v48 = *(unsigned __int8 *)(v3 + 1);
    v49 = v47 == 1701015119 && v46 == 0xE400000000000000;
    *(_QWORD *)(v5 - 296) = v47;
    *(_QWORD *)(v5 - 312) = v40;
    *(_DWORD *)(v5 - 304) = v48;
    if (v49 || (sub_1B2229D24() & 1) != 0)
    {
      *(_QWORD *)(v5 - 320) = 0;
      goto LABEL_50;
    }
    v50 = v47 == 0x74737275426E4FLL && v46 == 0xE700000000000000;
    if (v50 || (sub_1B2229D24() & 1) != 0)
    {
      *(_QWORD *)(v5 - 320) = 1;
LABEL_50:
      v51 = 1;
LABEL_51:
      *(_DWORD *)(v5 - 324) = v51;
    }
    else
    {
      if (v47 != 0x7461657065526E4FLL || v46 != 0xE800000000000000)
      {
        v62 = sub_1B2229D24();
        v63 = 2;
        if ((v62 & 1) != 0)
          v63 = 0;
        *(_QWORD *)(v5 - 320) = v63;
        v51 = v62 ^ 1;
        goto LABEL_51;
      }
      *(_QWORD *)(v5 - 320) = 0;
      *(_DWORD *)(v5 - 324) = 0;
    }
    swift_bridgeObjectRetain_n();
    v52 = *(_QWORD *)(v5 - 264);
    swift_bridgeObjectRetain();
    v53 = *(_QWORD *)(v5 - 272);
    swift_bridgeObjectRetain();
    v54 = MEMORY[0x1E0DEE9D8];
    v55 = sub_1B1B7DF34(MEMORY[0x1E0DEE9D8]);
    v56 = *(_QWORD *)(v5 - 336);
    v58 = *(_QWORD *)(v56 + 24);
    v57 = *(_QWORD *)(v56 + 32);
    _s7ContextC14GenerationDataCMa();
    v42 = swift_allocObject();
    *(_QWORD *)(v42 + 104) = v54;
    *(_QWORD *)(v42 + 112) = v54;
    *(_QWORD *)(v42 + 120) = v54;
    *(_QWORD *)(v42 + 128) = v54;
    *(_QWORD *)(v42 + 136) = v54;
    *(_QWORD *)(v42 + 144) = v54;
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1B1B7DF34(v54);
    *(_QWORD *)(v42 + 168) = v54;
    *(_QWORD *)(v42 + 176) = v54;
    *(_QWORD *)(v42 + 16) = v41;
    *(_BYTE *)(v42 + 24) = *(_DWORD *)(v5 - 304);
    *(_WORD *)(v42 + 25) = 1;
    *(_BYTE *)(v42 + 27) = 0;
    *(_QWORD *)(v42 + 32) = v54;
    *(_WORD *)(v42 + 40) = 1;
    *(_QWORD *)(v42 + 48) = v52;
    *(_QWORD *)(v42 + 56) = v53;
    *(_WORD *)(v42 + 64) = 257;
    *(_QWORD *)(v42 + 72) = *(_QWORD *)(v5 - 296);
    *(_QWORD *)(v42 + 80) = v46;
    *(_QWORD *)(v42 + 88) = v58;
    *(_QWORD *)(v42 + 96) = v57;
    *(_QWORD *)(v5 - 304) = v55;
    *(_QWORD *)(v42 + 152) = v55;
    swift_bridgeObjectRelease();
    *(_WORD *)(v42 + 160) = 0;
    *(_QWORD *)(v5 - 160) = v42;
    swift_retain();
    swift_retain();
    swift_retain();
    v59 = swift_bridgeObjectRetain();
    v20 = *(_QWORD *)(v5 - 288);
    sub_1B1C16E50(v59, v41, v56);
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_bridgeObjectRetain();
    swift_retain();
    v60 = swift_retain();
    v61 = sub_1B1C17BF0(v60, *(_QWORD *)(v5 - 256));
    v41 = *(_QWORD *)(v5 - 256);
    swift_release_n();
    swift_release();
    swift_bridgeObjectRelease();
    if (*(_QWORD *)(v61 + 16))
    {
      sub_1B1DF9F98(v42);
      swift_release();
      sub_1B1D374B8((uint64_t *)(v5 - 160), v61, v41, 0, 0);
      sub_1B1DE42B0(v5 - 160);
      v42 = *(_QWORD *)(v5 - 160);
    }
    else
    {
      swift_release();
    }
    v3 = *(_QWORD *)(v5 - 352);
    v43 = *(_QWORD *)(v5 - 320);
    v44 = *(_DWORD *)(v5 - 324);
    v40 = (uint64_t *)(*(_QWORD *)(v5 - 312) + 16);
    swift_retain();
    sub_1B1DEB07C();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    *(_BYTE *)(v5 - 160) = v44 & 1;
    sub_1B1C02DE0(v43 | ((unint64_t)(v44 & 1) << 32), v42, *(_QWORD *)(v5 - 344));
    swift_bridgeObjectRelease();
    swift_release();
    v45 = *(_QWORD *)(v5 - 280) - 1;
    *(_QWORD *)(v5 - 280) = v45;
    if (v45)
      continue;
    break;
  }
  v64 = *(_QWORD *)(v5 - 336);
LABEL_62:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_BYTE *)(v5 - 160) = *(_BYTE *)(v3 + 1);
  *(_WORD *)(v5 - 159) = 1;
  *(_BYTE *)(v5 - 157) = 0;
  v65 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v5 - 152) = MEMORY[0x1E0DEE9D8];
  *(_WORD *)(v5 - 144) = 1;
  v66 = *(_QWORD *)(v5 - 272);
  *(_QWORD *)(v5 - 136) = *(_QWORD *)(v5 - 264);
  *(_QWORD *)(v5 - 128) = v66;
  *(_WORD *)(v5 - 120) = 257;
  *(_QWORD *)(v5 - 112) = 0;
  *(_QWORD *)(v5 - 104) = 0;
  v67 = sub_1B1B7DF34(v65);
  v68 = sub_1B1DE387C(v64, v5 - 160, (uint64_t)v67);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_BYTE *)(v5 - 232) = 1;
  sub_1B1C02DE0(0x100000002uLL, v68, *(_QWORD *)(v5 - 344));
  swift_release();
  v69 = *(_QWORD *)(v3 + 16);
  if (*(_QWORD *)(v5 - 408) == *(_QWORD *)(v69 + 16))
  {
    *(_QWORD *)(v5 - 288) = v20;
    v70 = *(_QWORD *)(v69 + 64);
    *(_QWORD *)(v5 - 256) = v69 + 64;
    v71 = 1 << *(_BYTE *)(v69 + 32);
    v72 = -1;
    if (v71 < 64)
      v72 = ~(-1 << v71);
    v73 = v72 & v70;
    v74 = (unint64_t)(v71 + 63) >> 6;
    swift_bridgeObjectRetain_n();
    v75 = 0;
    *(_QWORD *)(v5 - 264) = v74 - 7;
    *(_QWORD *)(v5 - 272) = v69 + 120;
    if (!v73)
      goto LABEL_67;
LABEL_66:
    v76 = __clz(__rbit64(v73));
    v73 &= v73 - 1;
    v77 = v76 | (v75 << 6);
    while (1)
    {
      v80 = *(_QWORD *)(v69 + 56);
      v81 = *(_QWORD *)(v69 + 48) + 8 * v77;
      v82 = *(_DWORD *)v81;
      v83 = *(_BYTE *)(v81 + 4);
      v84 = v80
          + *(_QWORD *)(*(_QWORD *)(type metadata accessor for GraphScriptingConfig.ScriptInfo() - 8) + 72) * v77;
      v85 = *(_QWORD *)(v5 - 376);
      v86 = *(_QWORD *)(v5 - 368);
      sub_1B1792810(v84, v86 + *(int *)(v85 + 48), (uint64_t (*)(_QWORD))type metadata accessor for GraphScriptingConfig.ScriptInfo);
      *(_DWORD *)v86 = v82;
      *(_BYTE *)(v86 + 4) = v83;
      v87 = *(_QWORD *)(v5 - 384);
      sub_1B1A025EC(v86, v87, (uint64_t (*)(_QWORD))sub_1B1C18FB4);
      v88 = *(int *)(v85 + 48);
      v89 = *(_QWORD *)(v5 - 360);
      v90 = v89 + v88;
      v91 = *(_BYTE *)(v87 + 4);
      *(_DWORD *)v89 = *(_DWORD *)v87;
      *(_BYTE *)(v89 + 4) = v91;
      sub_1B1792810(v87 + v88, v89 + v88, (uint64_t (*)(_QWORD))type metadata accessor for GraphScriptingConfig.ScriptInfo);
      LODWORD(v85) = *(unsigned __int8 *)(v90 + 40);
      sub_1B1A04628(v90, (uint64_t (*)(_QWORD))type metadata accessor for GraphScriptingConfig.ScriptInfo);
      if ((_DWORD)v85 == 1)
      {
        swift_release();
        v92 = *(_QWORD *)(v5 - 400);
        sub_1B1A025EC(v87, v92, (uint64_t (*)(_QWORD))sub_1B1C18FB4);
        v93 = *(_QWORD *)(v5 - 392);
        v94 = *(_QWORD *)(v5 - 376);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v93 + 56))(v92, 0, 1, v94);
        goto LABEL_89;
      }
      sub_1B1A04628(v87, (uint64_t (*)(_QWORD))sub_1B1C18FB4);
      if (v73)
        goto LABEL_66;
LABEL_67:
      v78 = v75 + 1;
      if (v75 + 1 >= v74)
        break;
      v79 = *(_QWORD *)(*(_QWORD *)(v5 - 256) + 8 * v78);
      if (!v79)
      {
        v78 = v75 + 2;
        if (v75 + 2 >= v74)
          break;
        v79 = *(_QWORD *)(*(_QWORD *)(v5 - 256) + 8 * v78);
        if (!v79)
        {
          v78 = v75 + 3;
          if (v75 + 3 >= v74)
            break;
          v79 = *(_QWORD *)(*(_QWORD *)(v5 - 256) + 8 * v78);
          if (!v79)
          {
            v78 = v75 + 4;
            if (v75 + 4 >= v74)
              break;
            v79 = *(_QWORD *)(*(_QWORD *)(v5 - 256) + 8 * v78);
            if (!v79)
            {
              v78 = v75 + 5;
              if (v75 + 5 >= v74)
                break;
              v79 = *(_QWORD *)(*(_QWORD *)(v5 - 256) + 8 * v78);
              if (!v79)
              {
                v78 = v75 + 6;
                if (v75 + 6 >= v74)
                  break;
                v79 = *(_QWORD *)(*(_QWORD *)(v5 - 256) + 8 * v78);
                if (!v79)
                {
                  while (*(_QWORD *)(v5 - 264) != v75)
                  {
                    v79 = *(_QWORD *)(*(_QWORD *)(v5 - 272) + 8 * v75++);
                    if (v79)
                    {
                      v78 = v75 + 6;
                      goto LABEL_82;
                    }
                  }
                  break;
                }
              }
            }
          }
        }
      }
LABEL_82:
      v73 = (v79 - 1) & v79;
      v77 = __clz(__rbit64(v79)) + (v78 << 6);
      v75 = v78;
    }
    swift_release();
    v93 = *(_QWORD *)(v5 - 392);
    v92 = *(_QWORD *)(v5 - 400);
    v94 = *(_QWORD *)(v5 - 376);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v93 + 56))(v92, 1, 1, v94);
LABEL_89:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    v95 = (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v93 + 48))(v92, 1, v94) != 1;
    result = sub_1B1B1DC9C(v92, &qword_1EEF5C488, (uint64_t (*)(uint64_t))sub_1B1C18FB4);
    *(_BYTE *)(*(_QWORD *)(v5 - 352) + 26) = v95;
  }
  else
  {
    swift_release();
    result = swift_bridgeObjectRelease();
    *(_BYTE *)(v3 + 26) = 1;
  }
  return result;
}

uint64_t sub_1B1BFEADC(unint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v12;
  _QWORD *v13;
  char *v14;
  int v15;
  int v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  char v27;
  char v28;
  char v29;
  uint64_t v30;
  char v31;
  char v32;
  char v33;

  v2 = (_QWORD *)*v1;
  v3 = *(_QWORD *)(*v1 + 16);
  if (v3)
  {
    v4 = a1;
    v5 = 0;
    v6 = 0;
    v7 = HIDWORD(a1);
    v8 = (char *)v2 + 44;
    while (1)
    {
      v9 = v6 + 1;
      if (*(_DWORD *)&v8[v5 - 4] == (_DWORD)a1 && *(_DWORD *)&v8[v5] == HIDWORD(a1))
        break;
      v5 += 40;
      ++v6;
      if (v3 == v9)
      {
        v6 = *(_QWORD *)(*v1 + 16);
        return sub_1B1C93678(v6, v3);
      }
    }
    if (v3 - 1 != v6)
    {
      v12 = v5 + 72;
      v3 = v6 + 1;
      v25 = HIDWORD(a1);
      v26 = v1;
      do
      {
        v15 = *(_DWORD *)((char *)v2 + v12 + 8);
        v16 = *(_DWORD *)((char *)v2 + v12 + 12);
        if (v15 != v4 || v16 != (_DWORD)v7)
        {
          if (v3 != v6)
          {
            v18 = (uint64_t)&v2[5 * v6 + 4];
            v19 = *(_QWORD *)v18;
            v20 = *(_QWORD *)(v18 + 8);
            v22 = *(_QWORD *)(v18 + 16);
            v21 = *(_QWORD *)(v18 + 24);
            v32 = *(_BYTE *)(v18 + 33);
            v33 = *(_BYTE *)(v18 + 32);
            v31 = *(_BYTE *)(v18 + 34);
            v23 = *(_QWORD *)((char *)v2 + v12);
            v24 = *(_QWORD *)((char *)v2 + v12 + 24);
            v28 = *((_BYTE *)v2 + v12 + 33);
            v29 = *((_BYTE *)v2 + v12 + 32);
            v27 = *((_BYTE *)v2 + v12 + 34);
            v30 = *(_QWORD *)((char *)v2 + v12 + 16);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              v2 = sub_1B1FFEE08(v2);
            v13 = &v2[5 * v6];
            v13[4] = v23;
            *((_DWORD *)v13 + 10) = v15;
            *((_DWORD *)v13 + 11) = v16;
            v13[6] = v30;
            v13[7] = v24;
            *((_BYTE *)v13 + 64) = v29;
            *((_BYTE *)v13 + 65) = v28;
            *((_BYTE *)v13 + 66) = v27;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v14 = (char *)v2 + v12;
            *(_QWORD *)v14 = v19;
            *((_QWORD *)v14 + 1) = v20;
            *((_QWORD *)v14 + 2) = v22;
            *((_QWORD *)v14 + 3) = v21;
            v14[32] = v33;
            v14[33] = v32;
            v14[34] = v31;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            LODWORD(v7) = v25;
            *v26 = v2;
          }
          ++v6;
        }
        ++v3;
        v12 += 40;
      }
      while (v3 != v2[2]);
    }
  }
  else
  {
    v6 = 0;
  }
  return sub_1B1C93678(v6, v3);
}

uint64_t sub_1B1BFECF8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD **a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  __int16 v22;
  uint64_t v23;
  _QWORD *v24;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  __int128 v30;
  uint64_t v31[2];

  v8 = *a1;
  v7 = a1[1];
  if (*(_QWORD *)(a3 + 16))
  {
    swift_bridgeObjectRetain();
    v10 = sub_1B1DC3B00(v8, v7);
    if ((v11 & 1) != 0)
    {
      v12 = (uint64_t *)(*(_QWORD *)(a3 + 56) + 16 * v10);
      v13 = *v12;
      v14 = v12[1];
      swift_retain();
      swift_bridgeObjectRelease();
      if (*(_QWORD *)(v14 + 216))
      {
        v15 = *(_QWORD *)(v14 + 216);
      }
      else
      {
        v15 = v14;
        swift_retain();
      }
      v17 = swift_allocObject();
      *(_QWORD *)(v17 + 16) = v13;
      v19 = *(_QWORD *)(v15 + 16);
      v18 = *(_QWORD *)(v15 + 24);
      v20 = *(_QWORD *)(v15 + 48);
      v21 = *(_BYTE *)(v15 + 56);
      v22 = *(_WORD *)(v15 + 58);
      swift_retain();
      swift_bridgeObjectRetain();
      v30 = *(_OWORD *)(v15 + 32);
      swift_retain();
      swift_release();
      *(_QWORD *)(v17 + 24) = v19;
      *(_QWORD *)(v17 + 32) = v18;
      *(_OWORD *)(v17 + 40) = v30;
      *(_QWORD *)(v17 + 56) = v20;
      *(_BYTE *)(v17 + 64) = v21;
      *(_WORD *)(v17 + 66) = v22;
      v23 = v17 | 0x3000000000000000;
      v24 = *a6;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *a6 = v24;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        v24 = sub_1B1C638E4(0, v24[2] + 1, 1, v24);
        *a6 = v24;
      }
      v27 = v24[2];
      v26 = v24[3];
      if (v27 >= v26 >> 1)
        v24 = sub_1B1C638E4(v26 > 1, v27 + 1, 1, v24);
      v24[2] = v27 + 1;
      v28 = &v24[4 * v27];
      v28[4] = v23;
      *((_BYTE *)v28 + 40) = 3;
      v28[6] = 0;
      *((_BYTE *)v28 + 56) = 1;
      *a6 = v24;
      return swift_release();
    }
    swift_bridgeObjectRelease();
  }
  if (qword_1ED4BF430 != -1)
    swift_once();
  v31[1] = 0xE000000000000000;
  swift_retain();
  sub_1B2229430();
  sub_1B2228890();
  sub_1B22295EC();
  sub_1B2228890();
  swift_bridgeObjectRetain();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  swift_bridgeObjectRetain();
  sub_1B222853C();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v16 = sub_1B2228E90();
  if (qword_1ED4BF658 != -1)
    swift_once();
  v31[0] = 0;
  swift_retain();
  sub_1B1F1AD70(v16, v31, 0, 0xE000000000000000);
  swift_release();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t sub_1B1BFF088(uint64_t *a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD **a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  __int16 v20;
  uint64_t v21;
  _QWORD *v22;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  __int128 v28;
  uint64_t v29[2];
  char v30;

  v9 = *a1;
  v8 = a1[1];
  if (*(_QWORD *)(a3 + 16))
  {
    swift_bridgeObjectRetain();
    v11 = sub_1B1DC3B00(v9, v8);
    if ((v12 & 1) != 0)
    {
      v13 = *(_QWORD *)(*(_QWORD *)(a3 + 56) + 16 * v11 + 8);
      swift_retain();
      swift_bridgeObjectRelease();
      if (*(_QWORD *)(v13 + 216))
      {
        v14 = *(_QWORD *)(v13 + 216);
      }
      else
      {
        swift_retain();
        v14 = v13;
      }
      v17 = *(_QWORD *)(v14 + 16);
      v16 = *(_QWORD *)(v14 + 24);
      v18 = *(_QWORD *)(v14 + 48);
      v19 = *(_BYTE *)(v14 + 56);
      v20 = *(_WORD *)(v14 + 58);
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      v28 = *(_OWORD *)(v14 + 32);
      swift_retain();
      swift_release();
      v21 = swift_allocObject();
      *(_QWORD *)(v21 + 16) = v17;
      *(_QWORD *)(v21 + 24) = v16;
      *(_OWORD *)(v21 + 32) = v28;
      *(_QWORD *)(v21 + 48) = v18;
      *(_BYTE *)(v21 + 56) = v19;
      *(_WORD *)(v21 + 58) = v20;
      *(_BYTE *)(v21 + 60) = 5;
      swift_release();
      v22 = *a6;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *a6 = v22;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        v22 = sub_1B1C638E4(0, v22[2] + 1, 1, v22);
        *a6 = v22;
      }
      v25 = v22[2];
      v24 = v22[3];
      if (v25 >= v24 >> 1)
        v22 = sub_1B1C638E4(v24 > 1, v25 + 1, 1, v22);
      v22[2] = v25 + 1;
      v26 = &v22[4 * v25];
      v26[4] = v21 | 0x9000000000000000;
      *((_BYTE *)v26 + 40) = 3;
      v26[6] = 0;
      *((_BYTE *)v26 + 56) = 1;
      *a6 = v22;
      return swift_release();
    }
    swift_bridgeObjectRelease();
  }
  if (qword_1ED4BF430 != -1)
    swift_once();
  v29[1] = 0xE000000000000000;
  swift_retain();
  sub_1B2229430();
  sub_1B2228890();
  v30 = a2;
  sub_1B22295EC();
  sub_1B2228890();
  swift_bridgeObjectRetain();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  swift_bridgeObjectRetain();
  sub_1B222853C();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v15 = sub_1B2228E90();
  if (qword_1ED4BF658 != -1)
    swift_once();
  v29[0] = 0;
  swift_retain();
  sub_1B1F1AD70(v15, v29, 0, 0xE000000000000000);
  swift_release();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t type metadata accessor for GraphAuthoringSystem()
{
  return objc_opt_self();
}

uint64_t sub_1B1BFF440(uint64_t a1)
{
  return sub_1B1C198C4(a1, 1, 0);
}

uint64_t sub_1B1BFF44C(uint64_t result)
{
  if (*(_BYTE *)(result + 48) == 1)
    return sub_1B1C18034(result, 1);
  return result;
}

const char *sub_1B1BFF464()
{
  return "GraphAuthoringSystem";
}

uint64_t sub_1B1BFF478()
{
  return qword_1EEF5DE00;
}

uint64_t sub_1B1BFF488(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  _OWORD v5[3];
  uint64_t v6;
  _OWORD v7[3];
  uint64_t v8;

  v2 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v2;
  v5[2] = *(_OWORD *)(a1 + 32);
  v6 = *(_QWORD *)(a1 + 48);
  v3 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v3;
  v7[2] = *(_OWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 48);
  return sub_1B1C07F04((uint64_t)v5, (uint64_t)v7) & 1;
}

uint64_t sub_1B1BFF4E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v18;
  char *v19;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  uint64_t v27;
  int v28;
  _QWORD *v29;

  v1 = v0;
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 16);
  v3 = MEMORY[0x1E0DEE9D8];
  if (!v2)
  {
    v5 = (char *)MEMORY[0x1E0DEE9D8];
    goto LABEL_28;
  }
  v26 = v0;
  v27 = *(_QWORD *)v0 + 56;
  swift_bridgeObjectRetain_n();
  v4 = 0;
  v5 = (char *)v3;
  do
  {
    v6 = *(_QWORD *)(v27 + 40 * v4);
    v7 = *(_QWORD *)(v6 + 16);
    if (v7)
    {
      v8 = v3;
      v29 = (_QWORD *)v3;
      swift_bridgeObjectRetain();
      sub_1B202A38C(0, v7, 0);
      v9 = (_QWORD *)v3;
      v10 = *(_QWORD *)(v3 + 16);
      v11 = 32;
      do
      {
        v12 = *(_QWORD *)(v6 + v11);
        v29 = v9;
        v13 = v9[3];
        if (v10 >= v13 >> 1)
        {
          sub_1B202A38C(v13 > 1, v10 + 1, 1);
          v9 = v29;
        }
        v9[2] = v10 + 1;
        v9[v10 + 4] = v12;
        v11 += 56;
        ++v10;
        --v7;
      }
      while (v7);
      swift_bridgeObjectRelease();
      v3 = v8;
    }
    else
    {
      v9 = (_QWORD *)v3;
    }
    v14 = v9[2];
    v15 = *((_QWORD *)v5 + 2);
    v16 = v15 + v14;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    if ((isUniquelyReferenced_nonNull_native & 1) != 0 && v16 <= *((_QWORD *)v5 + 3) >> 1)
    {
      if (!v9[2])
        goto LABEL_3;
    }
    else
    {
      if (v15 <= v16)
        v18 = v15 + v14;
      else
        v18 = v15;
      v5 = sub_1B1C63D98(isUniquelyReferenced_nonNull_native, v18, 1, v5);
      if (!v9[2])
        goto LABEL_3;
    }
    v19 = &v5[8 * *((_QWORD *)v5 + 2) + 32];
    if (v9 + 4 < (_QWORD *)&v19[8 * v14] && v19 < (char *)&v9[v14 + 4])
    {
      result = sub_1B2229700();
      __break(1u);
      return result;
    }
    memcpy(v19, v9 + 4, 8 * v14);
    if (v14)
      *((_QWORD *)v5 + 2) += v14;
LABEL_3:
    swift_bridgeObjectRelease();
    ++v4;
  }
  while (v4 != v2);
  swift_bridgeObjectRelease_n();
  v1 = v26;
LABEL_28:
  sub_1B1B68ED0();
  v21 = sub_1B2228CD4();
  v29 = (_QWORD *)v21;
  v22 = *((_QWORD *)v5 + 2);
  if (v22)
  {
    v23 = v5 + 36;
    do
    {
      sub_1B1B8B00C(&v28, *(_QWORD *)(v23 - 4));
      v23 += 8;
      --v22;
    }
    while (v22);
    swift_bridgeObjectRelease();
    v24 = (uint64_t)v29;
  }
  else
  {
    v24 = v21;
    swift_bridgeObjectRelease();
  }
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 16) = v24;
  return result;
}

uint64_t sub_1B1BFF788()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v20;
  char *v21;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t result;
  uint64_t v28;
  uint64_t v29;
  int v30;
  _QWORD *v31;

  v1 = v0;
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 16);
  v3 = MEMORY[0x1E0DEE9D8];
  if (!v2)
  {
    v6 = (char *)MEMORY[0x1E0DEE9D8];
    goto LABEL_29;
  }
  v28 = v0;
  v4 = *(_QWORD *)v0 + 48;
  swift_bridgeObjectRetain_n();
  v5 = 0;
  v6 = (char *)v3;
  v29 = v2;
  do
  {
    v7 = *(_QWORD *)(v4 + 40 * v5);
    if (v7 && (v8 = *(_QWORD *)(v7 + 16)) != 0)
    {
      v9 = v4;
      v10 = v3;
      v31 = (_QWORD *)v3;
      swift_bridgeObjectRetain();
      sub_1B202A38C(0, v8, 0);
      v11 = (_QWORD *)v3;
      v12 = *(_QWORD *)(v3 + 16);
      v13 = 32;
      do
      {
        v14 = *(_QWORD *)(v7 + v13);
        v31 = v11;
        v15 = v11[3];
        if (v12 >= v15 >> 1)
        {
          sub_1B202A38C(v15 > 1, v12 + 1, 1);
          v11 = v31;
        }
        v11[2] = v12 + 1;
        v11[v12 + 4] = v14;
        v13 += 56;
        ++v12;
        --v8;
      }
      while (v8);
      swift_bridgeObjectRelease();
      v3 = v10;
      v4 = v9;
      v2 = v29;
    }
    else
    {
      v11 = (_QWORD *)v3;
    }
    v16 = v11[2];
    v17 = *((_QWORD *)v6 + 2);
    v18 = v17 + v16;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    if ((isUniquelyReferenced_nonNull_native & 1) != 0 && v18 <= *((_QWORD *)v6 + 3) >> 1)
    {
      if (!v11[2])
        goto LABEL_3;
    }
    else
    {
      if (v17 <= v18)
        v20 = v17 + v16;
      else
        v20 = v17;
      v6 = sub_1B1C63D98(isUniquelyReferenced_nonNull_native, v20, 1, v6);
      if (!v11[2])
        goto LABEL_3;
    }
    v21 = &v6[8 * *((_QWORD *)v6 + 2) + 32];
    if (v11 + 4 < (_QWORD *)&v21[8 * v16] && v21 < (char *)&v11[v16 + 4])
    {
      result = sub_1B2229700();
      __break(1u);
      return result;
    }
    memcpy(v21, v11 + 4, 8 * v16);
    if (v16)
      *((_QWORD *)v6 + 2) += v16;
LABEL_3:
    swift_bridgeObjectRelease();
    ++v5;
  }
  while (v5 != v2);
  swift_bridgeObjectRelease_n();
  v1 = v28;
LABEL_29:
  sub_1B1B68ED0();
  v23 = sub_1B2228CD4();
  v31 = (_QWORD *)v23;
  v24 = *((_QWORD *)v6 + 2);
  if (v24)
  {
    v25 = v6 + 36;
    do
    {
      sub_1B1B8B00C(&v30, *(_QWORD *)(v25 - 4));
      v25 += 8;
      --v24;
    }
    while (v24);
    swift_bridgeObjectRelease();
    v26 = (uint64_t)v31;
  }
  else
  {
    v26 = v23;
    swift_bridgeObjectRelease();
  }
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 24) = v26;
  return result;
}

uint64_t sub_1B1BFFA40@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v3;
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v22;
  BOOL v23;
  char v24;
  char v25;
  char v26;
  int v28;
  int v29;
  int v30;
  int v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v4 = *a1;
  v3 = a1[1];
  v6 = a1[2];
  v5 = a1[3];
  v8 = *((_QWORD *)a1 + 2);
  v7 = *((_QWORD *)a1 + 3);
  v9 = *((_BYTE *)a1 + 32);
  if (v8)
  {
    v38 = *(_QWORD *)(v8 + 16);
    if (v38)
    {
      v28 = *a1;
      v29 = a1[1];
      v30 = a1[2];
      v31 = a1[3];
      v32 = *((_BYTE *)a1 + 32);
      v34 = *((_QWORD *)a1 + 3);
      v35 = a3;
      v37 = v8 + 32;
      v11 = *(_QWORD *)(a2 + 16);
      v33 = *((_QWORD *)a1 + 2);
      swift_bridgeObjectRetain();
      v12 = 0;
      v36 = v11;
      do
      {
        if (v11)
        {
          v13 = (int *)(v37 + 56 * v12);
          v14 = *v13;
          v15 = v13[1];
          v16 = *((_QWORD *)v13 + 1);
          v17 = *((_QWORD *)v13 + 5);
          v42 = *((_QWORD *)v13 + 4);
          v43 = *((_QWORD *)v13 + 3);
          v39 = v12;
          v18 = *((_QWORD *)v13 + 6);
          swift_bridgeObjectRetain();
          swift_retain();
          swift_bridgeObjectRetain();
          v19 = (_QWORD *)(a2 + 40);
          v41 = v16;
          while (1)
          {
            if (*((_DWORD *)v19 - 2) == v14 && *((_DWORD *)v19 - 1) == v15 && *v19 == v16 && v19[2] == v43)
            {
              v22 = v19[5];
              v23 = v19[3] == v42 && v19[4] == v17;
              if (v23 || (v16 = v41, (sub_1B2229D24() & 1) != 0))
              {
                if (v22)
                {
                  if (v18)
                  {
                    sub_1B2229328();
                    swift_retain_n();
                    swift_bridgeObjectRetain();
                    v40 = sub_1B22286E0();
                    swift_bridgeObjectRelease();
                    swift_release_n();
                    swift_release();
                    v16 = v41;
                    if ((v40 & 1) != 0)
                    {
LABEL_28:
                      v8 = v33;
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      swift_release();
                      swift_bridgeObjectRelease();
                      v24 = 0;
                      goto LABEL_32;
                    }
                  }
                }
                else if (!v18)
                {
                  goto LABEL_28;
                }
              }
            }
            v19 += 7;
            if (!--v11)
            {
              swift_release();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              v11 = v36;
              v12 = v39;
              break;
            }
          }
        }
        ++v12;
      }
      while (v12 != v38);
      v8 = v33;
      swift_bridgeObjectRelease();
      v24 = 1;
LABEL_32:
      v7 = v34;
      a3 = v35;
      v5 = v31;
      v9 = v32;
      v3 = v29;
      v6 = v30;
      v4 = v28;
    }
    else
    {
      v24 = 1;
    }
    *(_DWORD *)a3 = v4;
    *(_DWORD *)(a3 + 4) = v3;
    *(_DWORD *)(a3 + 8) = v6;
    *(_DWORD *)(a3 + 12) = v5;
    *(_QWORD *)(a3 + 16) = v8;
    *(_QWORD *)(a3 + 24) = v7;
    *(_BYTE *)(a3 + 32) = v9;
    *(_BYTE *)(a3 + 33) = v24;
    *(_BYTE *)(a3 + 34) = 1;
    swift_bridgeObjectRetain();
  }
  else
  {
    v25 = *((_BYTE *)a1 + 34);
    v26 = *((_BYTE *)a1 + 33);
    *(_DWORD *)a3 = v4;
    *(_DWORD *)(a3 + 4) = v3;
    *(_DWORD *)(a3 + 8) = v6;
    *(_DWORD *)(a3 + 12) = v5;
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)(a3 + 24) = v7;
    *(_BYTE *)(a3 + 32) = v9;
    *(_BYTE *)(a3 + 33) = v26;
    *(_BYTE *)(a3 + 34) = v25;
    swift_bridgeObjectRetain();
  }
  return swift_bridgeObjectRetain();
}

uint64_t sub_1B1BFFD1C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  swift_unknownObjectRetain();
  v5 = swift_bridgeObjectRetain();
  v6 = sub_1B1C08178(v5, a1, a2);
  swift_bridgeObjectRelease_n();
  result = swift_unknownObjectRelease();
  *v2 = v6;
  return result;
}

void sub_1B1BFFD94(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v1 = qword_1ED4B7850++;
  *a1 = MEMORY[0x1E0DEE9D8];
  a1[1] = v1;
  v2 = MEMORY[0x1E0DEE9E8];
  a1[2] = MEMORY[0x1E0DEE9E8];
  a1[3] = v2;
}

uint64_t sub_1B1BFFDC0()
{
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for MainGraphScriptGroup()
{
  return objc_opt_self();
}

uint64_t destroy for GraphScriptGroup()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for GraphScriptGroup(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for GraphScriptGroup(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for GraphScriptGroup(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for GraphScriptGroup()
{
  return &type metadata for GraphScriptGroup;
}

uint64_t destroy for GraphEntityComponentPropertyReferences()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for GraphEntityComponentPropertyReferences(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for GraphEntityComponentPropertyReferences(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  return a1;
}

uint64_t assignWithTake for GraphEntityComponentPropertyReferences(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  return a1;
}

ValueMetadata *type metadata accessor for GraphEntityComponentPropertyReferences()
{
  return &type metadata for GraphEntityComponentPropertyReferences;
}

ValueMetadata *type metadata accessor for GraphDebuggingComponent()
{
  return &type metadata for GraphDebuggingComponent;
}

void sub_1B1C001C4(char *a1)
{
  sub_1B1F2FB98(*a1);
}

void sub_1B1C001D0()
{
  char *v0;

  sub_1B1DB5478(0, *v0);
}

void sub_1B1C001DC()
{
  __asm { BR              X10 }
}

uint64_t sub_1B1C00210()
{
  sub_1B2228824();
  return swift_bridgeObjectRelease();
}

void sub_1B1C002A0(uint64_t a1)
{
  char *v1;

  sub_1B1DB5478(a1, *v1);
}

uint64_t sub_1B1C002A8@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B1C21F48();
  *a1 = result;
  return result;
}

uint64_t sub_1B1C002D4()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_1B1C002FC + 4 * byte_1B228332F[*v0]))();
}

void sub_1B1C002FC(_QWORD *a1@<X8>)
{
  *a1 = 0x6E77617053;
  a1[1] = 0xE500000000000000;
}

void sub_1B1C00314(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = 1953066569;
  a1[1] = v1;
}

void sub_1B1C00324(uint64_t a1@<X8>)
{
  strcpy((char *)a1, "ParticleInit");
  *(_BYTE *)(a1 + 13) = 0;
  *(_WORD *)(a1 + 14) = -5120;
}

void sub_1B1C00374(_QWORD *a1@<X8>)
{
  *a1 = 0x7265646E6552;
  a1[1] = 0xE600000000000000;
}

uint64_t sub_1B1C0038C()
{
  sub_1B1C21F90();
  return sub_1B2228A4C();
}

uint64_t sub_1B1C003E8()
{
  sub_1B1C21F90();
  return sub_1B22289D4();
}

void sub_1B1C00434(_QWORD *a1@<X8>)
{
  *a1 = &unk_1E639B9B0;
}

uint64_t sub_1B1C00444(uint64_t a1, uint64_t a2)
{
  if ((a2 & 0x100000000) != 0)
    return sub_1B222A078();
  sub_1B222A078();
  return sub_1B222A09C();
}

uint64_t sub_1B1C004AC()
{
  unsigned int *v0;
  uint64_t v1;
  unsigned __int8 v2;
  _BYTE v4[72];

  v1 = *v0;
  v2 = *((_BYTE *)v0 + 4);
  sub_1B222A06C();
  sub_1B1C00444((uint64_t)v4, v1 | ((unint64_t)v2 << 32));
  return sub_1B222A0C0();
}

uint64_t sub_1B1C004FC(uint64_t a1)
{
  unsigned int *v1;

  return sub_1B1C00444(a1, *v1 | ((unint64_t)*((unsigned __int8 *)v1 + 4) << 32));
}

uint64_t sub_1B1C0051C()
{
  unsigned int *v0;
  uint64_t v1;
  unsigned __int8 v2;
  _BYTE v4[72];

  v1 = *v0;
  v2 = *((_BYTE *)v0 + 4);
  sub_1B222A06C();
  sub_1B1C00444((uint64_t)v4, v1 | ((unint64_t)v2 << 32));
  return sub_1B222A0C0();
}

unint64_t sub_1B1C00568@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  unint64_t result;

  result = sub_1B1C2205C(a1);
  if (!v2)
  {
    *(_DWORD *)a2 = result;
    *(_BYTE *)(a2 + 4) = BYTE4(result) & 1;
  }
  return result;
}

uint64_t sub_1B1C00598(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  _BYTE v5[24];
  uint64_t v6;

  v3 = *(_BYTE *)(v1 + 4);
  sub_1B19FA070(a1, a1[3]);
  sub_1B222A15C();
  sub_1B19FC264((uint64_t)v5, v6);
  sub_1B2229B98();
  if (!v2 && (v3 & 1) == 0)
  {
    sub_1B19FC264((uint64_t)v5, v6);
    sub_1B2229B8C();
  }
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v5);
}

BOOL sub_1B1C0068C(uint64_t a1, uint64_t a2)
{
  float v2;
  float v3;
  BOOL v4;
  char v6;
  int v7;

  v2 = *(float *)a1;
  v3 = *(float *)a2;
  if (*(_BYTE *)(a1 + 4) != 1)
  {
    if ((*(_BYTE *)(a2 + 4) & 1) == 0)
      return v2 == v3;
    return 0;
  }
  if (v2 == 0.0)
  {
    v4 = LODWORD(v3) == 0;
  }
  else
  {
    if (LODWORD(v2) != 1)
    {
      if (LODWORD(v3) > 1)
        v7 = *(unsigned __int8 *)(a2 + 4);
      else
        v7 = 0;
      return v7 == 1;
    }
    v4 = LODWORD(v3) == 1;
  }
  if (v4)
    v6 = *(_BYTE *)(a2 + 4);
  else
    v6 = 0;
  return (v6 & 1) != 0;
}

uint64_t sub_1B1C00700(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  _BYTE v4[40];
  _BYTE v5[24];
  uint64_t v6;
  _BYTE v7[40];

  sub_1B19FA070(a1, a1[3]);
  sub_1B222A15C();
  sub_1B19FC264((uint64_t)v5, v6);
  sub_1B2229B68();
  if (!v2)
  {
    sub_1B19FA278(v1 + 16, (uint64_t)v7);
    sub_1B19FA278((uint64_t)v7, (uint64_t)v4);
    sub_1B19FC264((uint64_t)v5, v6);
    sub_1B19FA094();
    sub_1B2229BA4();
  }
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v5);
}

double sub_1B1C007F4@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  __int128 v7;
  uint64_t v8;

  sub_1B1C221F8(a1, (uint64_t *)v6);
  if (!v2)
  {
    v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    result = *(double *)&v7;
    *(_OWORD *)(a2 + 32) = v7;
    *(_QWORD *)(a2 + 48) = v8;
  }
  return result;
}

uint64_t sub_1B1C00840(_QWORD *a1)
{
  return sub_1B1C00700(a1);
}

uint64_t sub_1B1C00880(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  _OWORD v5[3];
  uint64_t v6;
  _OWORD v7[3];
  uint64_t v8;

  v2 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v2;
  v5[2] = *(_OWORD *)(a1 + 32);
  v6 = *(_QWORD *)(a1 + 48);
  v3 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v3;
  v7[2] = *(_OWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 48);
  return sub_1B1C07D00(v5, v7) & 1;
}

void sub_1B1C008D8(char *a1)
{
  sub_1B1F948D8(*a1);
}

void sub_1B1C008E4()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  sub_1B222A06C();
  __asm { BR              X9 }
}

uint64_t sub_1B1C0093C()
{
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

void sub_1B1C009B4()
{
  __asm { BR              X10 }
}

uint64_t sub_1B1C009FC()
{
  sub_1B2228824();
  return swift_bridgeObjectRelease();
}

void sub_1B1C00A60()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  sub_1B222A06C();
  __asm { BR              X9 }
}

uint64_t sub_1B1C00AB4()
{
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

uint64_t sub_1B1C00B2C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B1C0A008();
  *a1 = result;
  return result;
}

uint64_t sub_1B1C00B58()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_1B1C00B94 + 4 * byte_1B2283342[*v0]))();
}

void sub_1B1C00B94(_QWORD *a1@<X8>)
{
  *a1 = 0x736772416E69;
  a1[1] = 0xE600000000000000;
}

void sub_1B1C00BAC(_QWORD *a1@<X8>)
{
  *a1 = 0x67724174754F6E69;
  a1[1] = 0xE900000000000073;
}

void sub_1B1C00BCC(_QWORD *a1@<X8>)
{
  *a1 = 0x6E49747069726373;
  a1[1] = 0xEB00000000786564;
}

uint64_t sub_1B1C00BF0()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1B1C00C2C + 4 * byte_1B2283346[*v0]))(0x7355736772416E69, 0xEE00617461447265);
}

uint64_t sub_1B1C00C2C()
{
  return 0x736772416E69;
}

uint64_t sub_1B1C00C40()
{
  return 0x67724174754F6E69;
}

uint64_t sub_1B1C00C5C()
{
  return 0x6E49747069726373;
}

uint64_t sub_1B1C00C7C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B1C0A008();
  *a1 = result;
  return result;
}

uint64_t sub_1B1C00CA0()
{
  sub_1B1C2254C();
  return sub_1B222A1D4();
}

uint64_t sub_1B1C00CC8()
{
  sub_1B1C2254C();
  return sub_1B222A1E0();
}

uint64_t sub_1B1C00CF0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  char v37;
  uint64_t v38;

  v36 = a1;
  v32 = a2;
  sub_1B1B28F74();
  MEMORY[0x1E0C80A78](v3, v4);
  v33 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1B19F8E54(0, &qword_1ED4BABC0, (uint64_t (*)(void))sub_1B1C2254C, (uint64_t)&type metadata for GraphScriptingConfig.ScriptInfo.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v34 = v6;
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)&v30 - v9;
  v11 = (int *)type metadata accessor for GraphScriptingConfig.ScriptInfo();
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v14 = 0;
  *((_QWORD *)v14 + 1) = 0;
  v15 = sub_1B1B80518(MEMORY[0x1E0DEE9D8]);
  *((_QWORD *)v14 + 3) = 0;
  *((_QWORD *)v14 + 2) = v15;
  *((_QWORD *)v14 + 4) = 0;
  *((_WORD *)v14 + 20) = 1;
  v16 = (uint64_t)&v14[v11[10]];
  v17 = sub_1B222826C();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v16, 1, 1, v17);
  *(_QWORD *)&v14[v11[11]] = 0;
  v18 = &v14[v11[12]];
  *(_QWORD *)v18 = 0;
  v18[8] = 1;
  sub_1B19FA070(a1, a1[3]);
  sub_1B1C2254C();
  v19 = v35;
  sub_1B222A150();
  if (v19)
  {
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v36);
    v22 = (uint64_t)v14;
  }
  else
  {
    v31 = v16;
    v35 = v7;
    sub_1B1A02758(0, &qword_1ED4BA400, (uint64_t)&type metadata for GraphScriptingConfig.ScriptArg, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    v37 = 1;
    sub_1B1C22590();
    v20 = v34;
    sub_1B22297B4();
    *((_QWORD *)v14 + 3) = v38;
    v37 = 2;
    sub_1B22297B4();
    *((_QWORD *)v14 + 4) = v38;
    LOBYTE(v38) = 3;
    sub_1B19E52CC(&qword_1ED4B7B48, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09E0]);
    v21 = (uint64_t)v33;
    sub_1B22297B4();
    sub_1B1C1A04C(v21, v31);
    v24 = v36[3];
    v25 = v36[4];
    sub_1B19FA070(v36, v24);
    v26 = sub_1B2067B64(2010, v24, v25);
    v27 = v35;
    if (v26)
    {
      sub_1B1C1F5F4(0, &qword_1EEF5C5B8, (uint64_t (*)(uint64_t))_s11MetadataSetCMa, (uint64_t (*)(uint64_t, _QWORD, uint64_t, _QWORD))MEMORY[0x1E0DEA048]);
      v37 = 0;
      sub_1B1C22720();
    }
    else
    {
      sub_1B1C2264C();
      v37 = 0;
      sub_1B19E52CC(&qword_1ED4BB2B0, (uint64_t (*)(uint64_t))sub_1B1C2264C, (uint64_t)&unk_1B22B5B6C);
    }
    sub_1B2229814();
    v28 = v32;
    (*(void (**)(char *, uint64_t))(v27 + 8))(v10, v20);
    v29 = v38;
    swift_bridgeObjectRelease();
    *((_QWORD *)v14 + 2) = v29;
    sub_1B1792810((uint64_t)v14, v28, (uint64_t (*)(_QWORD))type metadata accessor for GraphScriptingConfig.ScriptInfo);
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v36);
    v22 = (uint64_t)v14;
  }
  return sub_1B1A04628(v22, (uint64_t (*)(_QWORD))type metadata accessor for GraphScriptingConfig.ScriptInfo);
}

uint64_t sub_1B1C01110(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v12;
  char v13;
  uint64_t v14;

  v3 = v1;
  sub_1B19F8E54(0, &qword_1EEF5C5C8, (uint64_t (*)(void))sub_1B1C2254C, (uint64_t)&type metadata for GraphScriptingConfig.ScriptInfo.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = (char *)&v12 - v9;
  sub_1B19FA070(a1, a1[3]);
  sub_1B1C2254C();
  sub_1B222A180();
  v14 = v3[2];
  v13 = 0;
  sub_1B1C2264C();
  sub_1B19E52CC(&qword_1EEF5C5D0, (uint64_t (*)(uint64_t))sub_1B1C2264C, (uint64_t)&unk_1B22B5B44);
  sub_1B2229958();
  if (!v2)
  {
    v14 = v3[3];
    v13 = 1;
    sub_1B1B40F70(0, &qword_1EEF5C5D8, &qword_1ED4BA400, (uint64_t)&type metadata for GraphScriptingConfig.ScriptArg, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    sub_1B1C227B8();
    sub_1B2229958();
    v14 = v3[4];
    v13 = 2;
    sub_1B2229958();
    type metadata accessor for GraphScriptingConfig.ScriptInfo();
    LOBYTE(v14) = 3;
    sub_1B1B28F74();
    sub_1B1C228F4();
    sub_1B2229958();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
}

uint64_t sub_1B1C01348(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  char v11;
  uint64_t (*v12)(_QWORD);
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;

  v3 = type metadata accessor for GraphScriptingConfig.ScriptInfo();
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (uint64_t *)((char *)&v23 - v9);
  v11 = *(_BYTE *)(v1 + 40);
  sub_1B1792810(a1, (uint64_t)&v23 - v9, v12);
  if ((v11 & 1) != 0)
    v13 = 1;
  else
    v13 = sub_1B1C01530(v10);
  sub_1B1A04628((uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for GraphScriptingConfig.ScriptInfo);
  *(_BYTE *)(v1 + 40) = v13 & 1;
  v15 = *(_QWORD *)a1;
  v14 = *(_QWORD *)(a1 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)v1 = v15;
  *(_QWORD *)(v1 + 8) = v14;
  v16 = *(_QWORD *)(a1 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 16) = v16;
  v17 = *(_QWORD *)(a1 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 24) = v17;
  v18 = *(_QWORD *)(a1 + 32);
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 32) = v18;
  v20 = *(unsigned __int8 *)(a1 + 41);
  if (v20 == 1)
  {
    *(_BYTE *)(v1 + 41) = 1;
  }
  else
  {
    if ((v13 & 1) == 0 || v18 && *(_QWORD *)(v18 + 16))
    {
      *(_BYTE *)(v1 + 41) = 0;
    }
    else
    {
      v21 = *(unsigned __int8 *)(v1 + *(int *)(v3 + 48) + 8);
      sub_1B1792810(v1, (uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for GraphScriptingConfig.ScriptInfo);
      if (v21 != 1)
      {
        result = sub_1B1A04628((uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for GraphScriptingConfig.ScriptInfo);
        LOBYTE(v20) = 1;
        *(_BYTE *)(v1 + 41) = 1;
        goto LABEL_11;
      }
      v22 = *(_QWORD *)&v6[*(int *)(v3 + 44)];
      result = sub_1B1A04628((uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for GraphScriptingConfig.ScriptInfo);
      *(_BYTE *)(v1 + 41) = v22 != 0;
      if (v22)
      {
        LOBYTE(v20) = 1;
        goto LABEL_11;
      }
    }
    LOBYTE(v20) = *(_BYTE *)(v1 + 40);
  }
LABEL_11:
  *(_BYTE *)(v1 + 40) = v20;
  return result;
}

uint64_t sub_1B1C01530(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  BOOL v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  char v35;

  v3 = v1[1];
  v4 = a1[1];
  if (v3)
  {
    if (!v4)
      return 1;
    v5 = *v1 == *a1 && v3 == v4;
    if (!v5 && (sub_1B2229D24() & 1) == 0)
      return 1;
  }
  else if (v4)
  {
    return 1;
  }
  v6 = a1[3];
  if (v1[3])
  {
    if (!v6)
      return 1;
    swift_bridgeObjectRetain();
    v7 = swift_bridgeObjectRetain();
    v8 = sub_1B1CCA0C4(v7, v6);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v8 & 1) == 0)
      return 1;
  }
  else if (v6)
  {
    return 1;
  }
  v9 = a1[4];
  if (!v1[4])
  {
    if (!v9)
      goto LABEL_20;
    return 1;
  }
  if (!v9)
    return 1;
  swift_bridgeObjectRetain();
  v10 = swift_bridgeObjectRetain();
  v11 = sub_1B1CCA0C4(v10, v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v11 & 1) == 0)
    return 1;
LABEL_20:
  v12 = v1[2];
  v13 = a1[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v14 = sub_1B1C01878(v12, v13);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v14 & 1) == 0)
    return 1;
  v15 = v12 + 64;
  v16 = 1 << *(_BYTE *)(v12 + 32);
  v17 = -1;
  if (v16 < 64)
    v17 = ~(-1 << v16);
  v18 = v17 & *(_QWORD *)(v12 + 64);
  v19 = (unint64_t)(v16 + 63) >> 6;
  swift_bridgeObjectRetain();
  v20 = 0;
  while (1)
  {
    if (v18)
    {
      v25 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      v26 = v25 | (v20 << 6);
      goto LABEL_46;
    }
    v27 = v20 + 1;
    if (v20 + 1 >= v19)
      goto LABEL_55;
    v28 = *(_QWORD *)(v15 + 8 * v27);
    if (!v28)
    {
      v27 = v20 + 2;
      if (v20 + 2 >= v19)
        goto LABEL_55;
      v28 = *(_QWORD *)(v15 + 8 * v27);
      if (!v28)
      {
        v27 = v20 + 3;
        if (v20 + 3 >= v19)
          goto LABEL_55;
        v28 = *(_QWORD *)(v15 + 8 * v27);
        if (!v28)
        {
          v27 = v20 + 4;
          if (v20 + 4 >= v19)
            goto LABEL_55;
          v28 = *(_QWORD *)(v15 + 8 * v27);
          if (!v28)
          {
            v27 = v20 + 5;
            if (v20 + 5 >= v19)
              goto LABEL_55;
            v28 = *(_QWORD *)(v15 + 8 * v27);
            if (!v28)
            {
              v27 = v20 + 6;
              if (v20 + 6 >= v19)
                goto LABEL_55;
              v28 = *(_QWORD *)(v15 + 8 * v27);
              if (!v28)
                break;
            }
          }
        }
      }
    }
LABEL_45:
    v18 = (v28 - 1) & v28;
    v26 = __clz(__rbit64(v28)) + (v27 << 6);
    v20 = v27;
LABEL_46:
    v29 = (uint64_t *)(*(_QWORD *)(v12 + 48) + 16 * v26);
    v31 = *v29;
    v30 = v29[1];
    v32 = *(_QWORD *)(v12 + 16);
    swift_bridgeObjectRetain();
    if (v32)
    {
      swift_bridgeObjectRetain();
      sub_1B1DC3B00(v31, v30);
      if ((v33 & 1) != 0)
        swift_retain();
      swift_bridgeObjectRelease();
      if (!*(_QWORD *)(v13 + 16))
        goto LABEL_26;
    }
    else if (!*(_QWORD *)(v13 + 16))
    {
      goto LABEL_26;
    }
    v34 = sub_1B1DC3B00(v31, v30);
    if ((v35 & 1) != 0)
    {
      v23 = *(_QWORD *)(*(_QWORD *)(v13 + 56) + 8 * v34);
      swift_retain();
      goto LABEL_27;
    }
LABEL_26:
    v23 = 0;
LABEL_27:
    swift_bridgeObjectRelease();
    v24 = sub_1B1E025FC(v23);
    swift_release();
    swift_release();
    if (!v24)
    {
      v21 = 1;
      goto LABEL_56;
    }
  }
  while (v19 - 7 != v20)
  {
    v28 = *(_QWORD *)(v12 + 120 + 8 * v20++);
    if (v28)
    {
      v27 = v20 + 6;
      goto LABEL_45;
    }
  }
LABEL_55:
  v21 = 0;
LABEL_56:
  swift_release();
  return v21;
}

uint64_t sub_1B1C01878(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;

  if (a1 == a2)
    return 1;
  if (*(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v4 = a1 + 64;
  v5 = -1;
  v6 = -1 << *(_BYTE *)(a1 + 32);
  if (-v6 < 64)
    v5 = ~(-1 << -(char)v6);
  v7 = v5 & *(_QWORD *)(a1 + 64);
  v8 = (unint64_t)(63 - v6) >> 6;
  swift_bridgeObjectRetain();
  v9 = 0;
  while (1)
  {
    v10 = v9;
    if (!v7)
      break;
    v11 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    v12 = v11 | (v9 << 6);
    if (!*(_QWORD *)(a2 + 16))
      goto LABEL_27;
LABEL_26:
    v15 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v12);
    v17 = *v15;
    v16 = v15[1];
    swift_bridgeObjectRetain();
    sub_1B1DC3B00(v17, v16);
    LOBYTE(v17) = v18;
    swift_bridgeObjectRelease();
    if ((v17 & 1) == 0)
    {
LABEL_27:
      v19 = 0;
      goto LABEL_31;
    }
  }
  ++v9;
  if (v10 + 1 >= v8)
    goto LABEL_30;
  v13 = *(_QWORD *)(v4 + 8 * v9);
  if (v13)
    goto LABEL_25;
  v9 = v10 + 2;
  if (v10 + 2 >= v8)
    goto LABEL_30;
  v13 = *(_QWORD *)(v4 + 8 * v9);
  if (v13)
    goto LABEL_25;
  v9 = v10 + 3;
  if (v10 + 3 >= v8)
    goto LABEL_30;
  v13 = *(_QWORD *)(v4 + 8 * v9);
  if (v13)
    goto LABEL_25;
  v9 = v10 + 4;
  if (v10 + 4 >= v8)
    goto LABEL_30;
  v13 = *(_QWORD *)(v4 + 8 * v9);
  if (v13)
    goto LABEL_25;
  v9 = v10 + 5;
  if (v10 + 5 >= v8)
    goto LABEL_30;
  v13 = *(_QWORD *)(v4 + 8 * v9);
  if (v13)
    goto LABEL_25;
  v9 = v10 + 6;
  if (v10 + 6 >= v8)
    goto LABEL_30;
  v13 = *(_QWORD *)(v4 + 8 * v9);
  if (v13)
  {
LABEL_25:
    v7 = (v13 - 1) & v13;
    v12 = __clz(__rbit64(v13)) + (v9 << 6);
    if (!*(_QWORD *)(a2 + 16))
      goto LABEL_27;
    goto LABEL_26;
  }
  v14 = v10;
  while (v8 - 7 != v14)
  {
    v13 = *(_QWORD *)(a1 + 120 + 8 * v14++);
    if (v13)
    {
      v9 = v14 + 6;
      goto LABEL_25;
    }
  }
LABEL_30:
  v19 = 1;
LABEL_31:
  sub_1B19F8D30();
  return v19;
}

uint64_t sub_1B1C01A7C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t ObjectType;
  unint64_t v19;
  unint64_t v20;
  char v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t (*v34)(uint64_t, uint64_t);
  uint64_t result;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  __int128 v40;
  unint64_t v41;
  char *v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;

  sub_1B1B28F74();
  MEMORY[0x1E0C80A78](v4, v5);
  v44 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)&v40 - v9;
  v11 = sub_1B222826C();
  v45 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = (int *)type metadata accessor for GraphScriptingConfig.ScriptInfo();
  v16 = v15[11];
  v17 = *(_QWORD *)(v2 + v16);
  v42 = v14;
  if (v17)
  {
    v43 = v11;
    ObjectType = swift_getObjectType();
    v19 = *(_QWORD *)(v17 + 24);
    swift_retain();
    v20 = sub_1B1F02E4C(v19, 0, ObjectType, a2);
    if ((v21 & 1) != 0)
    {
      swift_release_n();
      v24 = 0;
    }
    else
    {
      v22 = v20;
      v41 = HIDWORD(v20);
      v23 = *(_QWORD *)(v17 + 16);
      swift_unownedRetainStrong();
      type metadata accessor for VFXAttribute();
      v24 = swift_allocObject();
      v40 = *(_OWORD *)(v17 + 32);
      *(_QWORD *)(v24 + 16) = v23;
      swift_unownedRetain();
      swift_release();
      v25 = v41;
      *(_DWORD *)(v24 + 24) = v22;
      *(_DWORD *)(v24 + 28) = v25;
      *(_OWORD *)(v24 + 32) = v40;
      swift_release_n();
    }
    v11 = v43;
  }
  else
  {
    v24 = 0;
  }
  *(_QWORD *)(v2 + v16) = v24;
  v26 = v2 + v15[12];
  if ((*(_BYTE *)(v26 + 8) & 1) != 0)
  {
    v27 = 0;
    v28 = 1;
  }
  else
  {
    v29 = *(_QWORD *)v26;
    v30 = swift_getObjectType();
    v31 = sub_1B1F02E4C(v29, 0, v30, a2);
    v28 = v32 & 1;
    if ((v32 & 1) != 0)
      v27 = 0;
    else
      v27 = v31;
  }
  *(_QWORD *)v26 = v27;
  *(_BYTE *)(v26 + 8) = v28 & 1;
  *(_BYTE *)(v2 + 40) = 1;
  v33 = swift_getObjectType();
  v34 = *(uint64_t (**)(uint64_t, uint64_t))(a2 + 32);
  result = v34(v33, a2);
  if ((result & 1) != 0)
  {
    v36 = v2 + v15[10];
    sub_1B1792810(v36, (uint64_t)v10, (uint64_t (*)(_QWORD))sub_1B1B28F74);
    v37 = v45;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v45 + 48))(v10, 1, v11) == 1)
    {
      return sub_1B1A04628((uint64_t)v10, (uint64_t (*)(_QWORD))sub_1B1B28F74);
    }
    else
    {
      v38 = v42;
      (*(void (**)(char *, char *, uint64_t))(v37 + 32))(v42, v10, v11);
      if ((v34(v33, a2) & 1) != 0)
      {
        v39 = (uint64_t)v44;
        (*(void (**)(char *, uint64_t, unint64_t, uint64_t (*)(), _QWORD, uint64_t, uint64_t))(a2 + 24))(v38, 0x6E49747069726353, 0xEB00000000786564, sub_1B1FFA40C, 0, v33, a2);
      }
      else
      {
        v39 = (uint64_t)v44;
        (*(void (**)(char *, char *, uint64_t))(v37 + 16))(v44, v38, v11);
      }
      (*(void (**)(char *, uint64_t))(v37 + 8))(v38, v11);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v37 + 56))(v39, 0, 1, v11);
      return sub_1B1C1A04C(v39, v36);
    }
  }
  return result;
}

uint64_t sub_1B1C01DB0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1B1C00CF0(a1, a2);
}

uint64_t sub_1B1C01DC4(_QWORD *a1)
{
  return sub_1B1C01110(a1);
}

uint64_t sub_1B1C01DD8(unint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int *v21;
  void (*v22)(_BYTE *, uint64_t, uint64_t, int *);
  _BYTE *v23;
  uint64_t v24;
  _BYTE *v25;
  _BYTE v26[16];

  sub_1B1C1908C(0);
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = &v26[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = &v26[-v9];
  v11 = *(_QWORD *)(v1 + 16);
  v12 = HIDWORD(a1) & 1;
  if (*(_QWORD *)(v11 + 16))
  {
    v13 = a1;
    v14 = sub_1B1DC4040(a1 | (unint64_t)(v12 << 32));
    if ((v15 & 1) != 0)
    {
      v16 = v14;
      v17 = *(_QWORD *)(v11 + 56);
      v18 = type metadata accessor for GraphScriptingConfig.ScriptInfo();
      v19 = *(_QWORD *)(v18 - 8);
      sub_1B1792810(v17 + *(_QWORD *)(v19 + 72) * v16, (uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for GraphScriptingConfig.ScriptInfo);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v10, 0, 1, v18);
      return sub_1B1A04628((uint64_t)v10, (uint64_t (*)(_QWORD))sub_1B1C1908C);
    }
  }
  else
  {
    v13 = a1;
  }
  v21 = (int *)type metadata accessor for GraphScriptingConfig.ScriptInfo();
  v22 = *(void (**)(_BYTE *, uint64_t, uint64_t, int *))(*((_QWORD *)v21 - 1) + 56);
  v22(v10, 1, 1, v21);
  sub_1B1A04628((uint64_t)v10, (uint64_t (*)(_QWORD))sub_1B1C1908C);
  *((_QWORD *)v6 + 2) = sub_1B1B80518(MEMORY[0x1E0DEE9D8]);
  *((_WORD *)v6 + 20) = 1;
  v23 = &v6[v21[10]];
  v24 = sub_1B222826C();
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v23, 1, 1, v24);
  *(_QWORD *)&v6[v21[11]] = 0;
  v25 = &v6[v21[12]];
  *(_QWORD *)v25 = 0;
  v25[8] = 1;
  *(_QWORD *)v6 = 0;
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 3) = 0;
  *((_QWORD *)v6 + 4) = 0;
  v22(v6, 0, 1, v21);
  return sub_1B20E1804((uint64_t)v6, v13 | (v12 << 32));
}

uint64_t sub_1B1C01FAC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t result;
  uint64_t v29;
  uint64_t v30;
  int64_t v31;
  uint64_t v32;
  int64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  int v42;

  v1 = type metadata accessor for GraphScriptingConfig.ScriptInfo();
  v38 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1, v2);
  v34 = (char *)&v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4, v5);
  v37 = (uint64_t)&v29 - v6;
  v29 = v0;
  v7 = *(_QWORD *)(v0 + 16);
  sub_1B1C23444(0, (unint64_t *)&qword_1ED4BA8C0, (uint64_t (*)(uint64_t, ValueMetadata *, uint64_t, unint64_t))MEMORY[0x1E0DECD58]);
  v8 = sub_1B22296B8();
  v9 = 0;
  v10 = 1 << *(_BYTE *)(v7 + 32);
  v11 = *(_QWORD *)(v7 + 64);
  v32 = v7 + 64;
  v12 = -1;
  if (v10 < 64)
    v12 = ~(-1 << v10);
  v13 = v12 & v11;
  v39 = v8;
  v35 = v8 + 64;
  v36 = v7;
  v33 = (unint64_t)(v10 + 63) >> 6;
  v30 = v7 + 112;
  v31 = v33 - 6;
  v14 = (uint64_t)v34;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v40 = v9;
      v16 = v15 | (v9 << 6);
      goto LABEL_5;
    }
    v25 = v9 + 1;
    if (v9 + 1 >= v33)
      goto LABEL_21;
    v26 = *(_QWORD *)(v32 + 8 * v25);
    if (!v26)
    {
      v25 = v9 + 2;
      if (v9 + 2 >= v33)
        goto LABEL_21;
      v26 = *(_QWORD *)(v32 + 8 * v25);
      if (!v26)
      {
        v25 = v9 + 3;
        if (v9 + 3 >= v33)
          goto LABEL_21;
        v26 = *(_QWORD *)(v32 + 8 * v25);
        if (!v26)
        {
          v25 = v9 + 4;
          if (v9 + 4 >= v33)
            goto LABEL_21;
          v26 = *(_QWORD *)(v32 + 8 * v25);
          if (!v26)
          {
            v25 = v9 + 5;
            if (v9 + 5 >= v33)
              goto LABEL_21;
            v26 = *(_QWORD *)(v32 + 8 * v25);
            if (!v26)
              break;
          }
        }
      }
    }
LABEL_20:
    v13 = (v26 - 1) & v26;
    v16 = __clz(__rbit64(v26)) + (v25 << 6);
    v40 = v25;
LABEL_5:
    v17 = v37;
    v18 = *(_QWORD *)(v36 + 56);
    v19 = *(_QWORD *)(v36 + 48) + 8 * v16;
    v20 = *(_DWORD *)v19;
    LODWORD(v19) = *(unsigned __int8 *)(v19 + 4);
    v41 = v20;
    v42 = v19;
    v21 = *(_QWORD *)(v38 + 72) * v16;
    sub_1B1792810(v18 + v21, v37, (uint64_t (*)(_QWORD))type metadata accessor for GraphScriptingConfig.ScriptInfo);
    sub_1B1792810(v17, v14, (uint64_t (*)(_QWORD))type metadata accessor for GraphScriptingConfig.ScriptInfo);
    v22 = sub_1B1C1D4F0(*(_QWORD *)(v14 + 16), qword_1E639B898);
    swift_arrayDestroy();
    swift_bridgeObjectRelease();
    *(_QWORD *)(v14 + 16) = v22;
    sub_1B1A04628(v17, (uint64_t (*)(_QWORD))type metadata accessor for GraphScriptingConfig.ScriptInfo);
    *(_QWORD *)(v35 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
    v23 = v39;
    v24 = *(_QWORD *)(v39 + 48) + 8 * v16;
    *(_DWORD *)v24 = v41;
    *(_BYTE *)(v24 + 4) = v42;
    sub_1B1A025EC(v14, *(_QWORD *)(v23 + 56) + v21, (uint64_t (*)(_QWORD))type metadata accessor for GraphScriptingConfig.ScriptInfo);
    ++*(_QWORD *)(v23 + 16);
    v9 = v40;
  }
  while (v31 != v9)
  {
    v26 = *(_QWORD *)(v30 + 8 * v9++);
    if (v26)
    {
      v25 = v9 + 5;
      goto LABEL_20;
    }
  }
LABEL_21:
  v27 = v29;
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v27 + 16) = v39;
  return result;
}

uint64_t sub_1B1C022C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t result;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int64_t v47;
  char *v48;
  uint64_t v49;
  int64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  int v62;

  sub_1B1B28F74();
  MEMORY[0x1E0C80A78](v1, v2);
  v48 = (char *)&v44 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4, v5);
  v57 = (char *)&v44 - v6;
  v7 = type metadata accessor for GraphScriptingConfig.ScriptInfo();
  v55 = *(_QWORD *)(v7 - 8);
  v56 = v7;
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11, v12);
  v54 = (uint64_t)&v44 - v13;
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)&v44 - v16;
  v45 = v0;
  v18 = *(_QWORD *)(v0 + 16);
  sub_1B1C23444(0, (unint64_t *)&qword_1ED4BA8C0, (uint64_t (*)(uint64_t, ValueMetadata *, uint64_t, unint64_t))MEMORY[0x1E0DECD58]);
  v19 = sub_1B22296B8();
  v20 = 0;
  v21 = 1 << *(_BYTE *)(v18 + 32);
  v22 = *(_QWORD *)(v18 + 64);
  v49 = v18 + 64;
  v23 = -1;
  if (v21 < 64)
    v23 = ~(-1 << v21);
  v24 = v23 & v22;
  v58 = v19;
  v50 = (unint64_t)(v21 + 63) >> 6;
  v51 = v19 + 64;
  v52 = v18;
  v53 = v17;
  v46 = v18 + 112;
  v47 = v50 - 6;
  v25 = (uint64_t)v57;
  while (1)
  {
    if (v24)
    {
      v59 = (v24 - 1) & v24;
      v60 = v20;
      v29 = __clz(__rbit64(v24)) | (v20 << 6);
      goto LABEL_21;
    }
    v30 = v20 + 1;
    if (v20 + 1 >= v50)
      goto LABEL_23;
    v31 = *(_QWORD *)(v49 + 8 * v30);
    if (!v31)
    {
      v30 = v20 + 2;
      if (v20 + 2 >= v50)
        goto LABEL_23;
      v31 = *(_QWORD *)(v49 + 8 * v30);
      if (!v31)
      {
        v30 = v20 + 3;
        if (v20 + 3 >= v50)
          goto LABEL_23;
        v31 = *(_QWORD *)(v49 + 8 * v30);
        if (!v31)
        {
          v30 = v20 + 4;
          if (v20 + 4 >= v50)
            goto LABEL_23;
          v31 = *(_QWORD *)(v49 + 8 * v30);
          if (!v31)
          {
            v30 = v20 + 5;
            if (v20 + 5 >= v50)
              goto LABEL_23;
            v31 = *(_QWORD *)(v49 + 8 * v30);
            if (!v31)
              break;
          }
        }
      }
    }
LABEL_20:
    v59 = (v31 - 1) & v31;
    v60 = v30;
    v29 = __clz(__rbit64(v31)) + (v30 << 6);
LABEL_21:
    v32 = *(_QWORD *)(v52 + 56);
    v33 = *(_QWORD *)(v52 + 48) + 8 * v29;
    v34 = *(_DWORD *)v33;
    LODWORD(v33) = *(unsigned __int8 *)(v33 + 4);
    v61 = v34;
    v62 = v33;
    v35 = *(_QWORD *)(v55 + 72) * v29;
    sub_1B1792810(v32 + v35, (uint64_t)v17, (uint64_t (*)(_QWORD))type metadata accessor for GraphScriptingConfig.ScriptInfo);
    sub_1B1792810((uint64_t)v17, (uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for GraphScriptingConfig.ScriptInfo);
    v36 = (uint64_t)v10;
    v37 = (uint64_t)&v10[*(int *)(v56 + 40)];
    sub_1B1792810(v37, v25, (uint64_t (*)(_QWORD))sub_1B1B28F74);
    v38 = sub_1B222826C();
    v39 = *(_QWORD *)(v38 - 8);
    v40 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v25, 1, v38);
    sub_1B1A04628(v25, (uint64_t (*)(_QWORD))sub_1B1B28F74);
    if (v40 != 1)
    {
      v41 = (uint64_t)v48;
      sub_1B2228260();
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v39 + 56))(v41, 0, 1, v38);
      sub_1B1C1A04C(v41, v37);
    }
    v10 = (char *)v36;
    v26 = v54;
    sub_1B1A025EC(v36, v54, (uint64_t (*)(_QWORD))type metadata accessor for GraphScriptingConfig.ScriptInfo);
    v17 = v53;
    sub_1B1A04628((uint64_t)v53, (uint64_t (*)(_QWORD))type metadata accessor for GraphScriptingConfig.ScriptInfo);
    *(_QWORD *)(v51 + ((v29 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v29;
    v27 = v58;
    v28 = *(_QWORD *)(v58 + 48) + 8 * v29;
    *(_DWORD *)v28 = v61;
    *(_BYTE *)(v28 + 4) = v62;
    sub_1B1A025EC(v26, *(_QWORD *)(v27 + 56) + v35, (uint64_t (*)(_QWORD))type metadata accessor for GraphScriptingConfig.ScriptInfo);
    ++*(_QWORD *)(v27 + 16);
    v24 = v59;
    v20 = v60;
  }
  while (v47 != v20)
  {
    v31 = *(_QWORD *)(v46 + 8 * v20++);
    if (v31)
    {
      v30 = v20 + 5;
      goto LABEL_20;
    }
  }
LABEL_23:
  v42 = v45;
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v42 + 16) = v58;
  return result;
}

uint64_t sub_1B1C026C4()
{
  uint64_t v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E440;
  KeyPath = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1EEF5AA10, (uint64_t)&type metadata for GraphScriptingConfig.Mode, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = sub_1B1B0BED8;
  v2[5] = KeyPath;
  v2[2] = sub_1B1B0BEE0;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v3 = sub_1B1AC6634(1701080941, 0xE400000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v2, KeyPath, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0);
  swift_release();
  *(_QWORD *)(v0 + 32) = v3;
  result = sub_1B2228AD0();
  qword_1EEFD5438 = v0;
  return result;
}

uint64_t sub_1B1C02834(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t ObjectType;
  uint64_t result;
  char v12;

  v3 = v2;
  v6 = *(_QWORD *)(v3 + 8);
  swift_unknownObjectRetain();
  v7 = sub_1B1C088B4(v6, a1, a2);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  *(_QWORD *)(v3 + 8) = v7;
  v8 = *(_QWORD *)(v3 + 16);
  swift_unknownObjectRetain();
  v9 = sub_1B1C08604(v8, a1, a2);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  *(_QWORD *)(v3 + 16) = v9;
  ObjectType = swift_getObjectType();
  result = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 32))(ObjectType, a2);
  if ((result & 1) != 0)
    v12 = 1;
  else
    v12 = *(_BYTE *)(v3 + 26);
  *(_BYTE *)(v3 + 26) = v12;
  return result;
}

uint64_t sub_1B1C02900(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1B1C0292C + 4 * byte_1B228334A[a1]))(1701080941, 0xE400000000000000);
}

unint64_t sub_1B1C0292C()
{
  return 0xD000000000000023;
}

void sub_1B1C02974()
{
  JUMPOUT(0x1B1C029CCLL);
}

unint64_t sub_1B1C02988()
{
  return 0xD000000000000012;
}

uint64_t sub_1B1C029A4()
{
  return 0x65676175676E616CLL;
}

uint64_t sub_1B1C029E0(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1B1C02A0C + 4 * byte_1B2283352[a1]))(1701080941, 0xE400000000000000);
}

unint64_t sub_1B1C02A0C()
{
  return 0xD000000000000023;
}

void sub_1B1C02A54()
{
  JUMPOUT(0x1B1C02AACLL);
}

unint64_t sub_1B1C02A68()
{
  return 0xD000000000000012;
}

uint64_t sub_1B1C02A84()
{
  return 0x65676175676E616CLL;
}

void sub_1B1C02AC0(char *a1)
{
  sub_1B1F94664(*a1);
}

void sub_1B1C02ACC()
{
  char *v0;

  sub_1B1DB5560(0, *v0);
}

void sub_1B1C02AD8(uint64_t a1)
{
  char *v1;

  sub_1B1DB4180(a1, *v1);
}

void sub_1B1C02AE0(uint64_t a1)
{
  char *v1;

  sub_1B1DB5560(a1, *v1);
}

uint64_t sub_1B1C02AE8@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B1C09FC0();
  *a1 = result;
  return result;
}

uint64_t sub_1B1C02B14@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1B1C02900(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1B1C02B3C()
{
  unsigned __int8 *v0;

  return sub_1B1C029E0(*v0);
}

uint64_t sub_1B1C02B44@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B1C09FC0();
  *a1 = result;
  return result;
}

uint64_t sub_1B1C02B68()
{
  sub_1B1C231A4();
  return sub_1B222A1D4();
}

uint64_t sub_1B1C02B90()
{
  sub_1B1C231A4();
  return sub_1B222A1E0();
}

uint64_t sub_1B1C02BB8(_QWORD *a1, __int16 a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;

  v17 = a3;
  v18 = a4;
  sub_1B19F8E54(0, &qword_1EEF5C618, (uint64_t (*)(void))sub_1B1C231A4, (uint64_t)&type metadata for GraphScriptingConfig.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v8 = v7;
  v9 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v10);
  v12 = (char *)&v16 - v11;
  sub_1B19FA070(a1, a1[3]);
  sub_1B1C231A4();
  sub_1B222A180();
  LOBYTE(v19) = a2;
  v20 = 0;
  sub_1B1C23540();
  sub_1B2229958();
  if (!v4)
  {
    v14 = v17;
    v13 = v18;
    LOBYTE(v19) = HIBYTE(a2);
    v20 = 6;
    sub_1B1C23584();
    sub_1B2229958();
    v19 = v14;
    v20 = 1;
    sub_1B1C1F0CC(0, &qword_1ED4B8708, (void (*)(void))sub_1B1C1EBD4, (void (*)(void))sub_1B1C1F16C);
    sub_1B1C1F1B0();
    sub_1B2229958();
    v19 = v13;
    v20 = 7;
    sub_1B1C2322C();
    sub_1B19E52CC(&qword_1EEF5C630, (uint64_t (*)(uint64_t))sub_1B1C2322C, (uint64_t)&unk_1B22B5B44);
    sub_1B2229958();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v12, v8);
}

uint64_t sub_1B1C02DE0(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t (*v19)();
  uint64_t v20;
  uint64_t v21;
  _QWORD v23[9];
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int8 *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  _QWORD v38[13];
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;

  v4 = v3;
  v28 = a3;
  v24 = a1;
  v41 = *MEMORY[0x1E0C80C00];
  sub_1B1C1908C(0);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = type metadata accessor for GraphScriptingConfig.ScriptInfo();
  v25 = *(_QWORD *)(v26 - 8);
  MEMORY[0x1E0C80A78](v26, v10);
  v12 = (char *)v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_QWORD *)(a2 + 128);
  v14 = *(_QWORD *)(v13 + 16);
  if (v14)
  {
    v23[2] = v9;
    v23[3] = v12;
    v30 = *v4;
    v15 = *((_QWORD *)v4 + 1);
    v16 = *((_QWORD *)v4 + 2);
    v27 = v4;
    v38[0] = 0;
    v38[1] = 0xE000000000000000;
    v33 = v15;
    swift_bridgeObjectRetain();
    v32 = v16;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v29 = v13;
    v17 = (unint64_t *)(v13 + 40);
    v31 = a2;
    do
    {
      v18 = *v17;
      v39 = *(v17 - 1);
      v40 = v18;
      v36 = 0x244E49414D4F4424;
      v37 = 0xE800000000000000;
      v34 = 34;
      v35 = 0xE100000000000000;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1B2228890();
      swift_bridgeObjectRelease();
      sub_1B2228890();
      sub_1B1A06460();
      sub_1B222922C();
      swift_bridgeObjectRelease();
      sub_1B2228890();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v17 += 2;
      --v14;
    }
    while (v14);
    swift_bridgeObjectRelease();
    v39 = 0x4F4954434E55463CLL;
    v40 = 0xEF3E454D414E5F4ELL;
    __asm { BR              X10 }
  }
  v19 = sub_1B1E8DE38(v38, v24 | ((HIDWORD(v24) & 1) << 32));
  v21 = v20;
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v25 + 48))(v20, 1, v26))
  {
    swift_bridgeObjectRelease();
    *(_QWORD *)v21 = 0;
    *(_QWORD *)(v21 + 8) = 0;
    swift_bridgeObjectRelease();
    *(_QWORD *)(v21 + 24) = 0;
    swift_bridgeObjectRelease();
    *(_QWORD *)(v21 + 32) = 0;
    *(_WORD *)(v21 + 40) = 257;
  }
  return ((uint64_t (*)(_QWORD *, _QWORD))v19)(v38, 0);
}

uint64_t sub_1B1C04028(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  _QWORD v9[3];
  uint64_t v10;

  v2 = v1;
  v9[2] = a1;
  v3 = (_QWORD *)swift_bridgeObjectRetain();
  v4 = sub_1B1C09C14(v3, (uint64_t (*)(char *, unint64_t, char *))sub_1B1C19110, (uint64_t)v9);
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v4 + 16))
  {
    sub_1B1C23444(0, (unint64_t *)&qword_1ED4BA8C0, (uint64_t (*)(uint64_t, ValueMetadata *, uint64_t, unint64_t))MEMORY[0x1E0DECD58]);
    v5 = sub_1B22296DC();
  }
  else
  {
    v5 = MEMORY[0x1E0DEE9E0];
  }
  v10 = v5;
  v6 = swift_bridgeObjectRetain();
  sub_1B1C06C04(v6, 1, &v10);
  swift_bridgeObjectRelease();
  v7 = v10;
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 16) = v7;
  return result;
}

unint64_t sub_1B1C04118(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  char v10;
  float *v11;
  float v12;

  v4 = a2;
  v6 = *(_QWORD *)(a4 + 16);
  v7 = HIDWORD(a2) & 1;
  if (!v6)
  {
LABEL_24:
    sub_1B1792810(a3, a1, (uint64_t (*)(_QWORD))type metadata accessor for GraphScriptingConfig.ScriptInfo);
    *(_WORD *)(a1 + 40) = 257;
    return v4 | (unint64_t)(v7 << 32);
  }
  if (a2 > 1)
    v8 = BYTE4(a2) & 1;
  else
    v8 = 0;
  if ((_DWORD)a2 == 1)
    v9 = BYTE4(a2) & 1;
  else
    v9 = 0;
  if ((_DWORD)a2)
    v10 = 0;
  else
    v10 = BYTE4(a2) & 1;
  v11 = (float *)(a4 + 36);
  while (1)
  {
    v12 = *(v11 - 1);
    if (*(_BYTE *)v11 != 1)
      break;
    if (v12 == 0.0)
    {
      if ((v10 & 1) != 0)
        goto LABEL_23;
    }
    else if (LODWORD(v12) == 1)
    {
      if ((v9 & 1) != 0)
        goto LABEL_23;
    }
    else if ((v8 & 1) != 0)
    {
      goto LABEL_23;
    }
LABEL_13:
    v11 += 2;
    if (!--v6)
      goto LABEL_24;
  }
  if ((a2 & 0x100000000) != 0 || v12 != *(float *)&a2)
    goto LABEL_13;
LABEL_23:
  sub_1B1792810(a3, a1, (uint64_t (*)(_QWORD))type metadata accessor for GraphScriptingConfig.ScriptInfo);
  return v4 | (unint64_t)(v7 << 32);
}

uint64_t sub_1B1C04200(uint64_t result, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  char v8;
  unint64_t v9;
  BOOL v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[5];
  _QWORD v23[5];
  _QWORD v24[5];

  v2 = *(_QWORD **)(*(_QWORD *)(result + 16) + 80);
  if (v2[2])
  {
    v4 = v2[4];
    v5 = v2[5];
    swift_bridgeObjectRetain();
    v6 = sub_1B1E27F14(v4, v5);
    result = swift_bridgeObjectRelease();
    if (v6)
    {
      sub_1B19FA278((uint64_t)(v6 + 7), (uint64_t)v24);
      sub_1B19F8C58(v24, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19FA2B4);
      if (sub_1B1E03DBC() == 0x6156686374697753 && v7 == 0xEB0000000065756CLL)
      {
        swift_bridgeObjectRelease();
        sub_1B19F8C58(v24, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19F9FEC);
      }
      else
      {
        v8 = sub_1B2229D24();
        swift_bridgeObjectRelease();
        sub_1B19F8C58(v24, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19F9FEC);
        if ((v8 & 1) == 0)
        {
          v9 = v6[8];
          v10 = v9 > 0x26;
          v11 = (1 << v9) & 0x43A0000000;
          v12 = v10 || v11 == 0;
          if (v12 && *(_QWORD *)(a2 + 16))
          {
            v13 = v6[5];
            v14 = v6[6];
            swift_bridgeObjectRetain();
            v15 = sub_1B1DC3B00(v13, v14);
            if ((v16 & 1) == 0)
            {
              swift_release();
              return swift_bridgeObjectRelease();
            }
            v17 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 16 * v15 + 8);
            swift_retain();
            swift_bridgeObjectRelease();
            sub_1B19FA278((uint64_t)(v6 + 7), (uint64_t)v23);
            swift_retain();
            sub_1B19F8C58(v23, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19FA2B4);
            v18 = sub_1B1E10A60(v23);
            sub_1B19F8C58(v23, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19F9FEC);
            swift_release();
            v19 = *(_QWORD *)(v17 + 40);
            if (v18 != v19)
            {
              v20 = v6[3];
              v21 = v6[4];
              swift_bridgeObjectRetain();
              sub_1B1E0D3EC(v19, (uint64_t)v22);
              sub_1B1DD86D0(v20, v21, (uint64_t)v22);
              swift_release();
              swift_release();
              sub_1B19F8C58(v22, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19F9FEC);
              return swift_bridgeObjectRelease();
            }
            swift_release();
          }
        }
      }
      return swift_release();
    }
  }
  return result;
}

uint64_t sub_1B1C04490(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t result;
  char v6;
  char v7;
  uint64_t v8;
  char v9;
  _BYTE v10[32];

  sub_1B1A02864(a1, (uint64_t)v10);
  swift_dynamicCast();
  *(_BYTE *)v1 = v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 8) = v8;
  v2 = swift_bridgeObjectRetain();
  v3 = sub_1B1DC9360(v2);
  swift_bridgeObjectRelease();
  sub_1B1C04028((uint64_t)v3);
  swift_release();
  v4 = swift_bridgeObjectRetain();
  sub_1B1BF8BA4(v4, v1);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease_n();
  *(_BYTE *)(v1 + 1) = v7;
  *(_BYTE *)(v1 + 24) = 1;
  *(_BYTE *)(v1 + 26) = v9;
  return result;
}

uint64_t sub_1B1C04578(unsigned int *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  unsigned __int8 v9;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  char v12;
  unint64_t v13;
  char v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  _BYTE v25[24];
  uint64_t v26;
  unsigned __int8 v27;
  unsigned __int8 v28;

  sub_1B1C1908C(0);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = &v25[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = *a1;
  v28 = *((_BYTE *)a1 + 4);
  v9 = v28;
  sub_1B1C01DD8(v8 | ((unint64_t)v28 << 32));
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v26 = *(_QWORD *)(a2 + 16);
  v11 = v26;
  *(_QWORD *)(a2 + 16) = 0x8000000000000000;
  v27 = v9;
  v13 = sub_1B1DC4040(v8 | ((unint64_t)v9 << 32));
  v14 = v12;
  v15 = *(_QWORD *)(v11 + 16) + ((v12 & 1) == 0);
  if (*(_QWORD *)(v11 + 24) >= v15)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      if ((v12 & 1) != 0)
        goto LABEL_7;
    }
    else
    {
      sub_1B1EAD7E0();
      if ((v14 & 1) != 0)
        goto LABEL_7;
    }
LABEL_9:
    v24 = type metadata accessor for GraphScriptingConfig.ScriptInfo();
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v7, 1, 1, v24);
    __break(1u);
    goto LABEL_10;
  }
  sub_1B1E9A6F8(v15, isUniquelyReferenced_nonNull_native);
  v25[16] = v9;
  v16 = sub_1B1DC4040(v8 | ((unint64_t)v9 << 32));
  if ((v14 & 1) == (v17 & 1))
  {
    v13 = v16;
    if ((v14 & 1) == 0)
      goto LABEL_9;
LABEL_7:
    sub_1B1C18FB4(0);
    v19 = (uint64_t)a1 + *(int *)(v18 + 48);
    v20 = *(_QWORD *)(v26 + 56);
    v21 = type metadata accessor for GraphScriptingConfig.ScriptInfo();
    v22 = *(_QWORD *)(v21 - 8);
    sub_1B1A025EC(v20 + *(_QWORD *)(v22 + 72) * v13, (uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for GraphScriptingConfig.ScriptInfo);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v7, 0, 1, v21);
    sub_1B1C01348(v19);
    v25[20] = v9;
    sub_1B1C07170((uint64_t)v7, 1, &v26, v13, v8 | ((unint64_t)v9 << 32));
    result = sub_1B1A04628((uint64_t)v7, (uint64_t (*)(_QWORD))sub_1B1C1908C);
    *(_QWORD *)(a2 + 16) = v26;
    return result;
  }
LABEL_10:
  result = sub_1B2229FC4();
  __break(1u);
  return result;
}

unint64_t sub_1B1C0478C()
{
  return 0xD000000000000016;
}

char *sub_1B1C047A8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  char *result;
  uint64_t v5;
  uint64_t v6;
  int v7;

  result = sub_1B1C2296C(a1);
  if (!v2)
  {
    *(_WORD *)a2 = (_WORD)result;
    *(_QWORD *)(a2 + 8) = v5;
    *(_QWORD *)(a2 + 16) = v6;
    *(_BYTE *)(a2 + 24) = v7 & 1;
    *(_BYTE *)(a2 + 25) = BYTE1(v7) & 1;
    *(_BYTE *)(a2 + 26) = BYTE2(v7) & 1;
  }
  return result;
}

uint64_t sub_1B1C047F4(_QWORD *a1)
{
  uint64_t v1;

  return sub_1B1C02BB8(a1, *(_WORD *)v1, *(_QWORD *)(v1 + 8), *(_QWORD *)(v1 + 16));
}

_QWORD *sub_1B1C0481C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *result;

  v2 = MEMORY[0x1E0DEE9D8];
  v3 = sub_1B1B7EBDC(MEMORY[0x1E0DEE9D8]);
  result = sub_1B1B95A38(v2);
  *(_WORD *)a1 = 513;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = result;
  *(_WORD *)(a1 + 24) = 1;
  *(_BYTE *)(a1 + 26) = 1;
  return result;
}

uint64_t sub_1B1C04874(char a1)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE v4[24];
  uint64_t v5;

  v5 = MEMORY[0x1E0DEAFA0];
  v4[0] = a1;
  v2 = aUserdata[0];
  v3 = aUserdata[1];
  swift_bridgeObjectRetain();
  sub_1B2228890();
  sub_1B1E02AF4(v2, v3, (uint64_t)v4);
  swift_bridgeObjectRelease();
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v4);
}

uint64_t sub_1B1C04908(char *a1, char *a2)
{
  return sub_1B1F94A5C(*a1, *a2);
}

uint64_t sub_1B1C04914()
{
  sub_1B222A06C();
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

uint64_t sub_1B1C04984()
{
  sub_1B2228824();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B1C049D0()
{
  sub_1B222A06C();
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

uint64_t sub_1B1C04A3C@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_1B2229730();
  result = swift_bridgeObjectRelease();
  if (v2 == 1)
    v4 = 1;
  else
    v4 = 2;
  if (!v2)
    v4 = 0;
  *a1 = v4;
  return result;
}

void sub_1B1C04A98(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 6580597;
  if (*v1)
    v2 = 1701869940;
  v3 = 0xE300000000000000;
  if (*v1)
    v3 = 0xE400000000000000;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_1B1C04AC8()
{
  _BYTE *v0;

  if (*v0)
    return 1701869940;
  else
    return 6580597;
}

uint64_t sub_1B1C04AF4@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_1B2229730();
  result = swift_bridgeObjectRelease();
  if (v2 == 1)
    v4 = 1;
  else
    v4 = 2;
  if (!v2)
    v4 = 0;
  *a1 = v4;
  return result;
}

uint64_t sub_1B1C04B54()
{
  sub_1B1C22508();
  return sub_1B222A1D4();
}

uint64_t sub_1B1C04B7C()
{
  sub_1B1C22508();
  return sub_1B222A1E0();
}

uint64_t sub_1B1C04BA4(unsigned __int16 *a1, uint64_t (*a2)(void), uint64_t a3, _BYTE *a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  int v13;
  __int16 v14;
  __int16 v15;

  result = a2();
  *a4 = 1;
  if (*(_BYTE *)(a5 + 24) == 1)
  {
    sub_1B1B0BC78(*(_QWORD *)a6, *(_QWORD *)(a6 + 8));
    v11 = *((_QWORD *)a1 + 1);
    v12 = *((_QWORD *)a1 + 2);
    v13 = *((unsigned __int8 *)a1 + 26);
    if (*((_BYTE *)a1 + 25))
      v14 = 256;
    else
      v14 = 0;
    v15 = v14 | *((unsigned __int8 *)a1 + 24);
    *(_QWORD *)a6 = *a1;
    *(_QWORD *)(a6 + 8) = v11;
    *(_QWORD *)(a6 + 16) = v12;
    *(_BYTE *)(a6 + 26) = v13 != 0;
    *(_WORD *)(a6 + 24) = v15;
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_1B1C04C6C(const void *a1, uint64_t (*a2)(void), uint64_t a3, _BYTE *a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;
  uint64_t v11[82];
  _BYTE __dst[656];
  _BYTE v13[656];

  result = a2();
  *a4 = 1;
  if (*(_BYTE *)(a5 + 24) == 1)
  {
    sub_1B1A18378(a6, (uint64_t)v11, &qword_1ED4B8A80, (uint64_t)&type metadata for EmitterRuntime);
    sub_1B1C1F7D0(v11);
    memcpy(__dst, a1, sizeof(__dst));
    memcpy(v13, a1, sizeof(v13));
    nullsub_16(v13);
    sub_1B1A18378((uint64_t)v13, a6, &qword_1ED4B8A80, (uint64_t)&type metadata for EmitterRuntime);
    return sub_1B1C1FAFC((uint64_t)__dst);
  }
  return result;
}

uint64_t sub_1B1C04D48(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t result;

  v4 = 0;
  v5 = (char *)MEMORY[0x1E0DEE9D8];
  while (1)
  {
    v6 = sub_1B201BF04(byte_1E63771A0[v4 + 32], a1, a2);
    v7 = *((_QWORD *)v5 + 2);
    v8 = v7 + *(_QWORD *)(v6 + 16);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    if (isUniquelyReferenced_nonNull_native && v8 <= *((_QWORD *)v5 + 3) >> 1)
    {
      v10 = *(_QWORD *)(v6 + 16);
      if (!v10)
        goto LABEL_16;
    }
    else
    {
      if (v7 <= v8)
        v11 = v8;
      else
        v11 = v7;
      v5 = sub_1B1C6443C(isUniquelyReferenced_nonNull_native, v11, 1, v5);
      v10 = *(_QWORD *)(v6 + 16);
      if (!v10)
        goto LABEL_16;
    }
    v12 = &v5[16 * *((_QWORD *)v5 + 2) + 32];
    if (v6 + 32 < (unint64_t)&v12[16 * v10] && (unint64_t)v12 < v6 + 32 + 16 * v10)
    {
      result = sub_1B2229700();
      __break(1u);
      return result;
    }
    memcpy(v12, (const void *)(v6 + 32), 16 * v10);
    *((_QWORD *)v5 + 2) += v10;
LABEL_16:
    swift_bridgeObjectRelease();
    if (v4 == 3)
      return (uint64_t)v5;
    ++v4;
  }
}

uint64_t sub_1B1C04EA0(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t *v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  _OWORD v38[5];
  uint64_t v39;

  if (!a3)
    return MEMORY[0x1E0DEE9E0];
  v4 = a4;
  v5 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
  {
    swift_retain();
    return v4;
  }
  sub_1B1C1F5A0(0, (unint64_t *)&qword_1EEF5B370, (uint64_t)&_s8MetadataVN, (uint64_t (*)(_QWORD, _QWORD, uint64_t, _QWORD))MEMORY[0x1E0DECD58]);
  v8 = sub_1B22296DC();
  v9 = v8;
  v31 = a1;
  if (a2 < 1)
    v10 = 0;
  else
    v10 = *a1;
  v11 = 0;
  v12 = v8 + 64;
  while (v10)
  {
    v16 = __clz(__rbit64(v10));
    v10 &= v10 - 1;
    v17 = v16 | (v11 << 6);
LABEL_26:
    v21 = (uint64_t *)(*(_QWORD *)(v4 + 48) + 16 * v17);
    v23 = *v21;
    v22 = v21[1];
    sub_1B19F8F0C(*(_QWORD *)(v4 + 56) + 88 * v17, (uint64_t)v38);
    v34 = v38[2];
    v35 = v38[3];
    v36 = v38[4];
    v37 = v39;
    v32 = v38[0];
    v33 = v38[1];
    sub_1B222A06C();
    swift_bridgeObjectRetain();
    sub_1B2228824();
    v24 = sub_1B222A0C0();
    v25 = -1 << *(_BYTE *)(v9 + 32);
    v26 = v24 & ~v25;
    v27 = v26 >> 6;
    if (((-1 << v26) & ~*(_QWORD *)(v12 + 8 * (v26 >> 6))) != 0)
    {
      v13 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v12 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v28 = (unint64_t)(63 - v25) >> 6;
      do
      {
        if (v27 + 1 == v28)
          v27 = 0;
        else
          ++v27;
        v29 = *(_QWORD *)(v12 + 8 * v27);
      }
      while (v29 == -1);
      v13 = __clz(__rbit64(~v29)) + (v27 << 6);
    }
    *(_QWORD *)(v12 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    v14 = (_QWORD *)(*(_QWORD *)(v9 + 48) + 16 * v13);
    *v14 = v23;
    v14[1] = v22;
    v15 = *(_QWORD *)(v9 + 56) + 88 * v13;
    *(_OWORD *)(v15 + 32) = v34;
    *(_OWORD *)(v15 + 48) = v35;
    *(_OWORD *)(v15 + 64) = v36;
    *(_QWORD *)(v15 + 80) = v37;
    *(_OWORD *)v15 = v32;
    *(_OWORD *)(v15 + 16) = v33;
    ++*(_QWORD *)(v9 + 16);
    if (!--v5)
      return v9;
  }
  v18 = v11 + 1;
  if (v11 + 1 >= a2)
    return v9;
  v19 = v31[v18];
  if (v19)
    goto LABEL_25;
  v18 = v11 + 2;
  if (v11 + 2 >= a2)
    return v9;
  v19 = v31[v18];
  if (v19)
    goto LABEL_25;
  v18 = v11 + 3;
  if (v11 + 3 >= a2)
    return v9;
  v19 = v31[v18];
  if (v19)
    goto LABEL_25;
  v18 = v11 + 4;
  if (v11 + 4 >= a2)
    return v9;
  v19 = v31[v18];
  if (v19)
  {
LABEL_25:
    v10 = (v19 - 1) & v19;
    v17 = __clz(__rbit64(v19)) + (v18 << 6);
    v11 = v18;
    goto LABEL_26;
  }
  v20 = v11 + 5;
  while (a2 != v20)
  {
    v19 = v31[v20++];
    if (v19)
    {
      v18 = v20 - 1;
      goto LABEL_25;
    }
  }
  return v9;
}

uint64_t sub_1B1C05168(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t *v36;
  uint64_t v37;

  if (!a3)
    return MEMORY[0x1E0DEE9E0];
  v4 = a4;
  v5 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
  {
    swift_retain();
    return v4;
  }
  sub_1B1C1F5A0(0, (unint64_t *)&qword_1ED4BA920, (uint64_t)&type metadata for EntityComponentProperty, (uint64_t (*)(_QWORD, _QWORD, uint64_t, _QWORD))MEMORY[0x1E0DECD58]);
  v8 = sub_1B22296DC();
  v9 = v8;
  v36 = a1;
  v37 = a2;
  if (a2 < 1)
    v10 = 0;
  else
    v10 = *a1;
  v11 = 0;
  v12 = v8 + 64;
  while (v10)
  {
    v17 = __clz(__rbit64(v10));
    v10 &= v10 - 1;
    v18 = v17 | (v11 << 6);
LABEL_26:
    v22 = 16 * v18;
    v23 = (uint64_t *)(*(_QWORD *)(v4 + 48) + 16 * v18);
    v25 = *v23;
    v24 = v23[1];
    v26 = (uint64_t *)(*(_QWORD *)(v4 + 56) + v22);
    v27 = *v26;
    v28 = v26[1];
    sub_1B222A06C();
    swift_bridgeObjectRetain();
    swift_retain();
    sub_1B2228824();
    v29 = sub_1B222A0C0();
    v30 = -1 << *(_BYTE *)(v9 + 32);
    v31 = v29 & ~v30;
    v32 = v31 >> 6;
    if (((-1 << v31) & ~*(_QWORD *)(v12 + 8 * (v31 >> 6))) != 0)
    {
      v13 = __clz(__rbit64((-1 << v31) & ~*(_QWORD *)(v12 + 8 * (v31 >> 6)))) | v31 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v33 = (unint64_t)(63 - v30) >> 6;
      do
      {
        if (v32 + 1 == v33)
          v32 = 0;
        else
          ++v32;
        v34 = *(_QWORD *)(v12 + 8 * v32);
      }
      while (v34 == -1);
      v13 = __clz(__rbit64(~v34)) + (v32 << 6);
    }
    *(_QWORD *)(v12 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    v14 = 16 * v13;
    v15 = (_QWORD *)(*(_QWORD *)(v9 + 48) + v14);
    *v15 = v25;
    v15[1] = v24;
    v16 = (_QWORD *)(*(_QWORD *)(v9 + 56) + v14);
    *v16 = v27;
    v16[1] = v28;
    ++*(_QWORD *)(v9 + 16);
    if (!--v5)
      return v9;
  }
  v19 = v11 + 1;
  if (v11 + 1 >= v37)
    return v9;
  v20 = v36[v19];
  if (v20)
    goto LABEL_25;
  v19 = v11 + 2;
  if (v11 + 2 >= v37)
    return v9;
  v20 = v36[v19];
  if (v20)
    goto LABEL_25;
  v19 = v11 + 3;
  if (v11 + 3 >= v37)
    return v9;
  v20 = v36[v19];
  if (v20)
    goto LABEL_25;
  v19 = v11 + 4;
  if (v11 + 4 >= v37)
    return v9;
  v20 = v36[v19];
  if (v20)
  {
LABEL_25:
    v10 = (v20 - 1) & v20;
    v18 = __clz(__rbit64(v20)) + (v19 << 6);
    v11 = v19;
    goto LABEL_26;
  }
  v21 = v11 + 5;
  while (v37 != v21)
  {
    v20 = v36[v21++];
    if (v20)
    {
      v19 = v21 - 1;
      goto LABEL_25;
    }
  }
  return v9;
}

_QWORD *sub_1B1C053F8(unint64_t *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;

  v8 = type metadata accessor for GraphScriptingConfig.ScriptInfo();
  v44 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v9);
  MEMORY[0x1E0C80A78](v10, v11);
  v43 = (char *)&v39 - v13;
  if (!a3)
    return (_QWORD *)MEMORY[0x1E0DEE9E0];
  if (a4[2] == a3)
  {
    swift_retain();
    return a4;
  }
  v42 = v12;
  sub_1B1C23444(0, (unint64_t *)&qword_1ED4BA8C0, (uint64_t (*)(uint64_t, ValueMetadata *, uint64_t, unint64_t))MEMORY[0x1E0DECD58]);
  v14 = sub_1B22296DC();
  v15 = v14;
  v39 = a1;
  v40 = a2;
  if (a2 < 1)
    v16 = 0;
  else
    v16 = *a1;
  v17 = v42;
  v18 = (uint64_t)v43;
  v45 = 0;
  v19 = v14 + 64;
  v41 = a4;
  while (v16)
  {
    v22 = __clz(__rbit64(v16));
    v16 &= v16 - 1;
    v23 = v22 | (v45 << 6);
LABEL_26:
    v27 = a4[7];
    v28 = a4[6] + 8 * v23;
    v29 = *(_DWORD *)v28;
    v30 = *(unsigned __int8 *)(v28 + 4);
    v31 = *(_QWORD *)(v44 + 72);
    sub_1B1792810(v27 + v31 * v23, v18, (uint64_t (*)(_QWORD))type metadata accessor for GraphScriptingConfig.ScriptInfo);
    sub_1B1A025EC(v18, v17, (uint64_t (*)(_QWORD))type metadata accessor for GraphScriptingConfig.ScriptInfo);
    sub_1B222A06C();
    sub_1B222A078();
    if (v30 != 1)
      sub_1B222A09C();
    v32 = sub_1B222A0C0();
    v33 = -1 << *(_BYTE *)(v15 + 32);
    v34 = v32 & ~v33;
    v35 = v34 >> 6;
    if (((-1 << v34) & ~*(_QWORD *)(v19 + 8 * (v34 >> 6))) != 0)
    {
      v20 = __clz(__rbit64((-1 << v34) & ~*(_QWORD *)(v19 + 8 * (v34 >> 6)))) | v34 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v36 = (unint64_t)(63 - v33) >> 6;
      do
      {
        if (v35 + 1 == v36)
          v35 = 0;
        else
          ++v35;
        v37 = *(_QWORD *)(v19 + 8 * v35);
      }
      while (v37 == -1);
      v20 = __clz(__rbit64(~v37)) + (v35 << 6);
    }
    v17 = v42;
    *(_QWORD *)(v19 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
    v21 = *(_QWORD *)(v15 + 48) + 8 * v20;
    *(_DWORD *)v21 = v29;
    *(_BYTE *)(v21 + 4) = v30;
    sub_1B1A025EC(v17, *(_QWORD *)(v15 + 56) + v20 * v31, (uint64_t (*)(_QWORD))type metadata accessor for GraphScriptingConfig.ScriptInfo);
    ++*(_QWORD *)(v15 + 16);
    --a3;
    a4 = v41;
    if (!a3)
      return (_QWORD *)v15;
  }
  v24 = v45 + 1;
  if (v45 + 1 >= v40)
    return (_QWORD *)v15;
  v25 = v39[v24];
  if (v25)
    goto LABEL_25;
  v24 = v45 + 2;
  if (v45 + 2 >= v40)
    return (_QWORD *)v15;
  v25 = v39[v24];
  if (v25)
    goto LABEL_25;
  v24 = v45 + 3;
  if (v45 + 3 >= v40)
    return (_QWORD *)v15;
  v25 = v39[v24];
  if (v25)
    goto LABEL_25;
  v24 = v45 + 4;
  if (v45 + 4 >= v40)
    return (_QWORD *)v15;
  v25 = v39[v24];
  if (v25)
  {
LABEL_25:
    v16 = (v25 - 1) & v25;
    v23 = __clz(__rbit64(v25)) + (v24 << 6);
    v45 = v24;
    goto LABEL_26;
  }
  v26 = v45 + 5;
  while (v40 != v26)
  {
    v25 = v39[v26++];
    if (v25)
    {
      v24 = v26 - 1;
      goto LABEL_25;
    }
  }
  return (_QWORD *)v15;
}

uint64_t sub_1B1C0574C(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;

  if (!a3)
    return MEMORY[0x1E0DEE9E0];
  v4 = a4;
  v5 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
  {
    swift_retain();
    return v4;
  }
  sub_1B1C1F5F4(0, (unint64_t *)&unk_1EEF5B610, (uint64_t (*)(uint64_t))sub_1B1B9B510, (uint64_t (*)(uint64_t, _QWORD, uint64_t, _QWORD))MEMORY[0x1E0DECD58]);
  v7 = sub_1B22296DC();
  v8 = v7;
  v33 = a2;
  if (a2 < 1)
    v9 = 0;
  else
    v9 = *a1;
  v35 = v4;
  v36 = 0;
  v10 = v7 + 64;
  while (v9)
  {
    v14 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    v15 = v14 | (v36 << 6);
LABEL_26:
    v19 = (uint64_t *)(*(_QWORD *)(v4 + 48) + 16 * v15);
    v21 = *v19;
    v20 = v19[1];
    v22 = (uint64_t *)(*(_QWORD *)(v4 + 56) + 24 * v15);
    v23 = *v22;
    v24 = v22[1];
    v25 = v22[2];
    sub_1B222A06C();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1B2228824();
    v26 = sub_1B222A0C0();
    v27 = -1 << *(_BYTE *)(v8 + 32);
    v28 = v26 & ~v27;
    v29 = v28 >> 6;
    if (((-1 << v28) & ~*(_QWORD *)(v10 + 8 * (v28 >> 6))) != 0)
    {
      v11 = __clz(__rbit64((-1 << v28) & ~*(_QWORD *)(v10 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v30 = (unint64_t)(63 - v27) >> 6;
      do
      {
        if (v29 + 1 == v30)
          v29 = 0;
        else
          ++v29;
        v31 = *(_QWORD *)(v10 + 8 * v29);
      }
      while (v31 == -1);
      v11 = __clz(__rbit64(~v31)) + (v29 << 6);
    }
    *(_QWORD *)(v10 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
    v12 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v11);
    *v12 = v21;
    v12[1] = v20;
    v13 = (_QWORD *)(*(_QWORD *)(v8 + 56) + 24 * v11);
    *v13 = v23;
    v13[1] = v24;
    v13[2] = v25;
    ++*(_QWORD *)(v8 + 16);
    --v5;
    v4 = v35;
    if (!v5)
      return v8;
  }
  v16 = v36 + 1;
  if (v36 + 1 >= v33)
    return v8;
  v17 = a1[v16];
  if (v17)
    goto LABEL_25;
  v16 = v36 + 2;
  if (v36 + 2 >= v33)
    return v8;
  v17 = a1[v16];
  if (v17)
    goto LABEL_25;
  v16 = v36 + 3;
  if (v36 + 3 >= v33)
    return v8;
  v17 = a1[v16];
  if (v17)
    goto LABEL_25;
  v16 = v36 + 4;
  if (v36 + 4 >= v33)
    return v8;
  v17 = a1[v16];
  if (v17)
  {
LABEL_25:
    v9 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v16 << 6);
    v36 = v16;
    goto LABEL_26;
  }
  v18 = v36 + 5;
  while (v33 != v18)
  {
    v17 = a1[v18++];
    if (v17)
    {
      v16 = v18 - 1;
      goto LABEL_25;
    }
  }
  return v8;
}

uint64_t sub_1B1C05A0C(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1C05AE8(a1, a2, a3, a4, &qword_1EEF5B608, (uint64_t (*)(uint64_t))_s13ParameterBaseCMa);
}

uint64_t sub_1B1C05A20(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1C05AE8(a1, a2, a3, a4, &qword_1EEF5B670, (uint64_t (*)(uint64_t))_s11ContextExitCMa);
}

uint64_t sub_1B1C05A34(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1C05AE8(a1, a2, a3, a4, &qword_1EEF5B678, (uint64_t (*)(uint64_t))_s12ContextEntryCMa);
}

uint64_t sub_1B1C05A48(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1C05AE8(a1, a2, a3, a4, &qword_1EEF5B658, (uint64_t (*)(uint64_t))_s11CodeSnippetCMa);
}

uint64_t sub_1B1C05A5C(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1C05AE8(a1, a2, a3, a4, &qword_1EEF5B640, (uint64_t (*)(uint64_t))_s19StaticSwitchSnippetCMa);
}

uint64_t sub_1B1C05A70(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1C05AE8(a1, a2, a3, a4, &qword_1EEF5B648, (uint64_t (*)(uint64_t))_s17TypedArraySnippetCMa);
}

uint64_t sub_1B1C05A84(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1C05AE8(a1, a2, a3, a4, &qword_1EEF60080, (uint64_t (*)(uint64_t))_s24VariableReferenceSnippetCMa);
}

uint64_t sub_1B1C05A98(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1C05AE8(a1, a2, a3, a4, &qword_1EEF5B630, (uint64_t (*)(uint64_t))_s15VariableSnippetCMa);
}

uint64_t sub_1B1C05AAC(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1C05AE8(a1, a2, a3, a4, &qword_1EEF5B650, (uint64_t (*)(uint64_t))_s17CustomCodeSnippetCMa);
}

uint64_t sub_1B1C05AC0(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1C05AE8(a1, a2, a3, a4, &qword_1EEF5B660, (uint64_t (*)(uint64_t))_s20ArraySequenceSnippetCMa);
}

uint64_t sub_1B1C05AD4(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1C05AE8(a1, a2, a3, a4, &qword_1EEF5B668, (uint64_t (*)(uint64_t))_s10SubContextCMa);
}

uint64_t sub_1B1C05AE8(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t *a5, uint64_t (*a6)(uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t *v33;
  uint64_t v34;

  if (!a3)
    return MEMORY[0x1E0DEE9E0];
  v6 = a4;
  v7 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
  {
    swift_retain();
    return v6;
  }
  sub_1B1C1F5F4(0, a5, a6, (uint64_t (*)(uint64_t, _QWORD, uint64_t, _QWORD))MEMORY[0x1E0DECD58]);
  v10 = sub_1B22296DC();
  v11 = v10;
  v33 = a1;
  v34 = a2;
  if (a2 < 1)
    v12 = 0;
  else
    v12 = *a1;
  v13 = 0;
  v14 = v10 + 64;
  while (v12)
  {
    v17 = __clz(__rbit64(v12));
    v12 &= v12 - 1;
    v18 = v17 | (v13 << 6);
LABEL_26:
    v22 = (uint64_t *)(*(_QWORD *)(v6 + 48) + 16 * v18);
    v24 = *v22;
    v23 = v22[1];
    v25 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v18);
    sub_1B222A06C();
    swift_bridgeObjectRetain();
    swift_retain();
    sub_1B2228824();
    v26 = sub_1B222A0C0();
    v27 = -1 << *(_BYTE *)(v11 + 32);
    v28 = v26 & ~v27;
    v29 = v28 >> 6;
    if (((-1 << v28) & ~*(_QWORD *)(v14 + 8 * (v28 >> 6))) != 0)
    {
      v15 = __clz(__rbit64((-1 << v28) & ~*(_QWORD *)(v14 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v30 = (unint64_t)(63 - v27) >> 6;
      do
      {
        if (v29 + 1 == v30)
          v29 = 0;
        else
          ++v29;
        v31 = *(_QWORD *)(v14 + 8 * v29);
      }
      while (v31 == -1);
      v15 = __clz(__rbit64(~v31)) + (v29 << 6);
    }
    *(_QWORD *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    v16 = (_QWORD *)(*(_QWORD *)(v11 + 48) + 16 * v15);
    *v16 = v24;
    v16[1] = v23;
    *(_QWORD *)(*(_QWORD *)(v11 + 56) + 8 * v15) = v25;
    ++*(_QWORD *)(v11 + 16);
    if (!--v7)
      return v11;
  }
  v19 = v13 + 1;
  if (v13 + 1 >= v34)
    return v11;
  v20 = v33[v19];
  if (v20)
    goto LABEL_25;
  v19 = v13 + 2;
  if (v13 + 2 >= v34)
    return v11;
  v20 = v33[v19];
  if (v20)
    goto LABEL_25;
  v19 = v13 + 3;
  if (v13 + 3 >= v34)
    return v11;
  v20 = v33[v19];
  if (v20)
    goto LABEL_25;
  v19 = v13 + 4;
  if (v13 + 4 >= v34)
    return v11;
  v20 = v33[v19];
  if (v20)
  {
LABEL_25:
    v12 = (v20 - 1) & v20;
    v18 = __clz(__rbit64(v20)) + (v19 << 6);
    v13 = v19;
    goto LABEL_26;
  }
  v21 = v13 + 5;
  while (v34 != v21)
  {
    v20 = v33[v21++];
    if (v20)
    {
      v19 = v21 - 1;
      goto LABEL_25;
    }
  }
  return v11;
}

uint64_t sub_1B1C05D50(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v30;
  _BYTE v31[96];
  _BYTE v32[104];

  if (!a3)
    return MEMORY[0x1E0DEE9E0];
  v4 = a4;
  v5 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
  {
    swift_retain();
    return v4;
  }
  sub_1B1B9A1CC();
  v7 = sub_1B22296DC();
  v8 = v7;
  v28 = a2;
  if (a2 < 1)
    v9 = 0;
  else
    v9 = *a1;
  v10 = 0;
  v11 = v7 + 64;
  while (v9)
  {
    v14 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    v15 = v14 | (v10 << 6);
LABEL_26:
    v19 = (uint64_t *)(*(_QWORD *)(v4 + 48) + 16 * v15);
    v20 = *v19;
    v30 = v19[1];
    sub_1B1C1A1D0(*(_QWORD *)(v4 + 56) + 96 * v15, (uint64_t)v32);
    sub_1B1B99D74((uint64_t)v32, (uint64_t)v31);
    sub_1B222A06C();
    sub_1B222A078();
    sub_1B222A09C();
    sub_1B222A09C();
    v21 = sub_1B222A0C0();
    v22 = -1 << *(_BYTE *)(v8 + 32);
    v23 = v21 & ~v22;
    v24 = v23 >> 6;
    if (((-1 << v23) & ~*(_QWORD *)(v11 + 8 * (v23 >> 6))) != 0)
    {
      v12 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v11 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (v24 + 1 == v25)
          v24 = 0;
        else
          ++v24;
        v26 = *(_QWORD *)(v11 + 8 * v24);
      }
      while (v26 == -1);
      v12 = __clz(__rbit64(~v26)) + (v24 << 6);
    }
    *(_QWORD *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    v13 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v12);
    *v13 = v20;
    v13[1] = v30;
    sub_1B1B99D74((uint64_t)v31, *(_QWORD *)(v8 + 56) + 96 * v12);
    ++*(_QWORD *)(v8 + 16);
    if (!--v5)
      return v8;
  }
  v16 = v10 + 1;
  if (v10 + 1 >= v28)
    return v8;
  v17 = a1[v16];
  if (v17)
    goto LABEL_25;
  v16 = v10 + 2;
  if (v10 + 2 >= v28)
    return v8;
  v17 = a1[v16];
  if (v17)
    goto LABEL_25;
  v16 = v10 + 3;
  if (v10 + 3 >= v28)
    return v8;
  v17 = a1[v16];
  if (v17)
    goto LABEL_25;
  v16 = v10 + 4;
  if (v10 + 4 >= v28)
    return v8;
  v17 = a1[v16];
  if (v17)
  {
LABEL_25:
    v9 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v16 << 6);
    v10 = v16;
    goto LABEL_26;
  }
  v18 = v10 + 5;
  while (v28 != v18)
  {
    v17 = a1[v18++];
    if (v17)
    {
      v16 = v18 - 1;
      goto LABEL_25;
    }
  }
  return v8;
}

uint64_t sub_1B1C05FF8(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t *v35;
  uint64_t v36;
  uint64_t v37;

  if (!a3)
    return MEMORY[0x1E0DEE9E0];
  v4 = a4;
  v5 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
  {
    swift_retain();
    return v4;
  }
  sub_1B1C1F5A0(0, (unint64_t *)&qword_1EEF5B360, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, _QWORD, uint64_t, _QWORD))MEMORY[0x1E0DECD58]);
  v8 = sub_1B22296DC();
  v9 = v8;
  v35 = a1;
  v36 = a2;
  if (a2 < 1)
    v10 = 0;
  else
    v10 = *a1;
  v37 = 0;
  v11 = v8 + 64;
  while (v10)
  {
    v16 = __clz(__rbit64(v10));
    v10 &= v10 - 1;
    v17 = v16 | (v37 << 6);
LABEL_26:
    v21 = 16 * v17;
    v22 = (uint64_t *)(*(_QWORD *)(v4 + 48) + 16 * v17);
    v24 = *v22;
    v23 = v22[1];
    v25 = (uint64_t *)(*(_QWORD *)(v4 + 56) + v21);
    v26 = *v25;
    v27 = v25[1];
    sub_1B222A06C();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1B2228824();
    v28 = sub_1B222A0C0();
    v29 = -1 << *(_BYTE *)(v9 + 32);
    v30 = v28 & ~v29;
    v31 = v30 >> 6;
    if (((-1 << v30) & ~*(_QWORD *)(v11 + 8 * (v30 >> 6))) != 0)
    {
      v12 = __clz(__rbit64((-1 << v30) & ~*(_QWORD *)(v11 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v32 = (unint64_t)(63 - v29) >> 6;
      do
      {
        if (v31 + 1 == v32)
          v31 = 0;
        else
          ++v31;
        v33 = *(_QWORD *)(v11 + 8 * v31);
      }
      while (v33 == -1);
      v12 = __clz(__rbit64(~v33)) + (v31 << 6);
    }
    *(_QWORD *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    v13 = 16 * v12;
    v14 = (_QWORD *)(*(_QWORD *)(v9 + 48) + v13);
    *v14 = v24;
    v14[1] = v23;
    v15 = (_QWORD *)(*(_QWORD *)(v9 + 56) + v13);
    *v15 = v26;
    v15[1] = v27;
    ++*(_QWORD *)(v9 + 16);
    if (!--v5)
      return v9;
  }
  v18 = v37 + 1;
  if (v37 + 1 >= v36)
    return v9;
  v19 = v35[v18];
  if (v19)
    goto LABEL_25;
  v18 = v37 + 2;
  if (v37 + 2 >= v36)
    return v9;
  v19 = v35[v18];
  if (v19)
    goto LABEL_25;
  v18 = v37 + 3;
  if (v37 + 3 >= v36)
    return v9;
  v19 = v35[v18];
  if (v19)
    goto LABEL_25;
  v18 = v37 + 4;
  if (v37 + 4 >= v36)
    return v9;
  v19 = v35[v18];
  if (v19)
  {
LABEL_25:
    v10 = (v19 - 1) & v19;
    v17 = __clz(__rbit64(v19)) + (v18 << 6);
    v37 = v18;
    goto LABEL_26;
  }
  v20 = v37 + 5;
  while (v36 != v20)
  {
    v19 = v35[v20++];
    if (v19)
    {
      v18 = v20 - 1;
      goto LABEL_25;
    }
  }
  return v9;
}

uint64_t sub_1B1C0628C(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  if (!a3)
    return MEMORY[0x1E0DEE9E0];
  v4 = a4;
  v5 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
  {
    swift_retain();
    return v4;
  }
  sub_1B1C1F5A0(0, (unint64_t *)&qword_1EEF5B600, (uint64_t)&_s11CodeSnippetC17SerializationInfoVN, (uint64_t (*)(_QWORD, _QWORD, uint64_t, _QWORD))MEMORY[0x1E0DECD58]);
  v6 = sub_1B22296DC();
  v7 = v6;
  if (a2 < 1)
    v8 = 0;
  else
    v8 = *a1;
  v35 = v4;
  v36 = 0;
  v9 = v6 + 64;
  while (v8)
  {
    v37 = (v8 - 1) & v8;
    v13 = __clz(__rbit64(v8)) | (v36 << 6);
LABEL_26:
    v17 = *(_QWORD *)(v4 + 56);
    v18 = (uint64_t *)(*(_QWORD *)(v4 + 48) + 16 * v13);
    v19 = *v18;
    v20 = v18[1];
    v21 = (uint64_t *)(v17 + 56 * v13);
    v22 = v21[1];
    v23 = v21[3];
    v40 = v21[2];
    v24 = v21[5];
    v38 = *v21;
    v39 = v21[4];
    v25 = v21[6];
    sub_1B222A06C();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1B2228824();
    v26 = sub_1B222A0C0();
    v27 = -1 << *(_BYTE *)(v7 + 32);
    v28 = v26 & ~v27;
    v29 = v28 >> 6;
    if (((-1 << v28) & ~*(_QWORD *)(v9 + 8 * (v28 >> 6))) != 0)
    {
      v10 = __clz(__rbit64((-1 << v28) & ~*(_QWORD *)(v9 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v30 = (unint64_t)(63 - v27) >> 6;
      do
      {
        if (v29 + 1 == v30)
          v29 = 0;
        else
          ++v29;
        v31 = *(_QWORD *)(v9 + 8 * v29);
      }
      while (v31 == -1);
      v10 = __clz(__rbit64(~v31)) + (v29 << 6);
    }
    v8 = v37;
    *(_QWORD *)(v9 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v10;
    v11 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v10);
    *v11 = v19;
    v11[1] = v20;
    v12 = (_QWORD *)(*(_QWORD *)(v7 + 56) + 56 * v10);
    *v12 = v38;
    v12[1] = v22;
    v12[2] = v40;
    v12[3] = v23;
    v12[4] = v39;
    v12[5] = v24;
    v12[6] = v25;
    ++*(_QWORD *)(v7 + 16);
    --v5;
    v4 = v35;
    if (!v5)
      return v7;
  }
  v14 = v36 + 1;
  if (v36 + 1 >= a2)
    return v7;
  v15 = a1[v14];
  if (v15)
    goto LABEL_25;
  v14 = v36 + 2;
  if (v36 + 2 >= a2)
    return v7;
  v15 = a1[v14];
  if (v15)
    goto LABEL_25;
  v14 = v36 + 3;
  if (v36 + 3 >= a2)
    return v7;
  v15 = a1[v14];
  if (v15)
    goto LABEL_25;
  v14 = v36 + 4;
  if (v36 + 4 >= a2)
    return v7;
  v15 = a1[v14];
  if (v15)
  {
LABEL_25:
    v36 = v14;
    v37 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v14 << 6);
    goto LABEL_26;
  }
  v16 = v36 + 5;
  while (a2 != v16)
  {
    v15 = a1[v16++];
    if (v15)
    {
      v14 = v16 - 1;
      goto LABEL_25;
    }
  }
  return v7;
}

_QWORD *sub_1B1C0658C(unint64_t *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;
  unint64_t *v25;
  _QWORD *v26;
  _BYTE v27[160];
  _BYTE v28[168];

  v25 = a1;
  v7 = type metadata accessor for TextureCache.TextureKey();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)&v24 - v14;
  if (!a3)
    return (_QWORD *)MEMORY[0x1E0DEE9E0];
  if (a4[2] == a3)
  {
    swift_retain();
    return a4;
  }
  sub_1B1B9C0A8();
  v26 = (_QWORD *)sub_1B22296DC();
  v24 = a2;
  if (a2 < 1)
    v16 = 0;
  else
    v16 = *v25;
  v17 = 0;
  while (v16)
  {
    v18 = __clz(__rbit64(v16));
    v16 &= v16 - 1;
    v19 = v18 | (v17 << 6);
LABEL_10:
    sub_1B1792810(a4[6] + *(_QWORD *)(v8 + 72) * v19, (uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for TextureCache.TextureKey);
    sub_1B1C1AA1C(a4[7] + 160 * v19, (uint64_t)v28);
    sub_1B1A025EC((uint64_t)v15, (uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for TextureCache.TextureKey);
    sub_1B1B9C128((uint64_t)v28, (uint64_t)v27);
    sub_1B1EA4010((uint64_t)v11, (uint64_t)v27, v26);
    if (!--a3)
      return v26;
  }
  v20 = v17 + 1;
  if (v17 + 1 >= v24)
    return v26;
  v21 = v25[v20];
  if (v21)
    goto LABEL_24;
  v20 = v17 + 2;
  if (v17 + 2 >= v24)
    return v26;
  v21 = v25[v20];
  if (v21)
    goto LABEL_24;
  v20 = v17 + 3;
  if (v17 + 3 >= v24)
    return v26;
  v21 = v25[v20];
  if (v21)
    goto LABEL_24;
  v20 = v17 + 4;
  if (v17 + 4 >= v24)
    return v26;
  v21 = v25[v20];
  if (v21)
  {
LABEL_24:
    v16 = (v21 - 1) & v21;
    v19 = __clz(__rbit64(v21)) + (v20 << 6);
    v17 = v20;
    goto LABEL_10;
  }
  v22 = v17 + 5;
  while (v24 != v22)
  {
    v21 = v25[v22++];
    if (v21)
    {
      v20 = v22 - 1;
      goto LABEL_24;
    }
  }
  return v26;
}

void sub_1B1C067BC(uint64_t a1, char a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  char v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  void *v16;
  id v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  char v31;
  char v32;
  char v33;
  _QWORD *v34;
  uint64_t *v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  id v57;

  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
    swift_bridgeObjectRelease();
    return;
  }
  swift_bridgeObjectRetain();
  sub_1B1B9DC78(a1 + 32, (uint64_t)&v49, (uint64_t)&qword_1EEF5B378, MEMORY[0x1E0DEA968], (uint64_t)&_s8MetadataVN, (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))sub_1B1B9D790);
  v7 = v49;
  v8 = v50;
  v47 = v49;
  v48 = v50;
  v43 = v53;
  v44 = v54;
  v45 = v55;
  v46 = v56;
  v41 = v51;
  v42 = v52;
  v9 = (_QWORD *)*a3;
  v11 = sub_1B1DC3B00(v49, v50);
  v12 = v10;
  v13 = v9[2] + ((v10 & 1) == 0);
  if (v9[3] >= v13)
  {
    if ((a2 & 1) != 0)
    {
      if ((v10 & 1) != 0)
        goto LABEL_9;
    }
    else
    {
      sub_1B1EA805C();
      if ((v12 & 1) != 0)
        goto LABEL_9;
    }
LABEL_12:
    v18 = (_QWORD *)*a3;
    *(_QWORD *)(*a3 + 8 * (v11 >> 6) + 64) |= 1 << v11;
    v19 = (uint64_t *)(v18[6] + 16 * v11);
    *v19 = v7;
    v19[1] = v8;
    v20 = v18[7] + 88 * v11;
    v21 = v42;
    *(_OWORD *)v20 = v41;
    *(_OWORD *)(v20 + 16) = v21;
    v22 = v43;
    v23 = v44;
    v24 = v45;
    *(_QWORD *)(v20 + 80) = v46;
    *(_OWORD *)(v20 + 48) = v23;
    *(_OWORD *)(v20 + 64) = v24;
    *(_OWORD *)(v20 + 32) = v22;
    ++v18[2];
    v25 = v4 - 1;
    if (v4 == 1)
    {
LABEL_18:
      swift_bridgeObjectRelease_n();
      return;
    }
    v26 = a1 + 136;
    while (1)
    {
      sub_1B1B9DC78(v26, (uint64_t)&v49, (uint64_t)&qword_1EEF5B378, MEMORY[0x1E0DEA968], (uint64_t)&_s8MetadataVN, (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))sub_1B1B9D790);
      v27 = v49;
      v28 = v50;
      v47 = v49;
      v48 = v50;
      v43 = v53;
      v44 = v54;
      v45 = v55;
      v46 = v56;
      v41 = v51;
      v42 = v52;
      v29 = (_QWORD *)*a3;
      v30 = sub_1B1DC3B00(v49, v50);
      v32 = v31;
      if (v29[3] < (int64_t)(v29[2] + ((v31 & 1) == 0)))
      {
        sub_1B1E90CBC(v29[2] + ((v31 & 1) == 0), 1);
        v30 = sub_1B1DC3B00(v27, v28);
        if ((v32 & 1) != (v33 & 1))
          goto LABEL_19;
      }
      if ((v32 & 1) != 0)
        goto LABEL_9;
      v34 = (_QWORD *)*a3;
      *(_QWORD *)(*a3 + 8 * (v30 >> 6) + 64) |= 1 << v30;
      v35 = (uint64_t *)(v34[6] + 16 * v30);
      *v35 = v27;
      v35[1] = v28;
      v36 = v34[7] + 88 * v30;
      v37 = v42;
      *(_OWORD *)v36 = v41;
      *(_OWORD *)(v36 + 16) = v37;
      v38 = v43;
      v39 = v44;
      v40 = v45;
      *(_QWORD *)(v36 + 80) = v46;
      *(_OWORD *)(v36 + 48) = v39;
      *(_OWORD *)(v36 + 64) = v40;
      *(_OWORD *)(v36 + 32) = v38;
      ++v34[2];
      v26 += 104;
      if (!--v25)
        goto LABEL_18;
    }
  }
  sub_1B1E90CBC(v13, a2 & 1);
  v14 = sub_1B1DC3B00(v7, v8);
  if ((v12 & 1) == (v15 & 1))
  {
    v11 = v14;
    if ((v12 & 1) == 0)
      goto LABEL_12;
LABEL_9:
    v16 = (void *)swift_allocError();
    swift_willThrow();
    v57 = v16;
    v17 = v16;
    sub_1B1AEC268(0, (unint64_t *)&qword_1ED4BB030);
    if ((swift_dynamicCast() & 1) == 0)
    {
      swift_bridgeObjectRelease();
      sub_1B1A203C4((uint64_t)&v41);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      return;
    }
    goto LABEL_20;
  }
LABEL_19:
  sub_1B2229FC4();
  __break(1u);
LABEL_20:
  sub_1B2229430();
  sub_1B2228890();
  sub_1B22295EC();
  sub_1B2228890();
  sub_1B2229688();
  __break(1u);
}

void sub_1B1C06C04(uint64_t a1, int a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 v22;
  _QWORD *v23;
  char v24;
  unint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  void *v31;
  id v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t (*v39)();
  uint64_t v40;
  unsigned __int8 v41;
  uint64_t v42;
  uint64_t (*v43)();
  _QWORD *v44;
  unint64_t v45;
  char v46;
  char v47;
  char v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  unint64_t v61;
  id v62;
  unsigned int v63;
  unsigned __int8 v64;

  v7 = type metadata accessor for GraphScriptingConfig.ScriptInfo();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (char *)&v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1B1C1912C();
  MEMORY[0x1E0C80A78](v12, v13);
  v17 = (char *)&v51 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = *(_QWORD *)(a1 + 16);
  if (!v18)
  {
    swift_bridgeObjectRelease();
    return;
  }
  LODWORD(v56) = a2;
  v53 = v3;
  v54 = v8;
  v19 = (uint64_t)&v17[*(int *)(v14 + 48)];
  v52 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  v20 = a1 + v52;
  v58 = *(_QWORD *)(v15 + 72);
  v55 = a1;
  swift_bridgeObjectRetain();
  sub_1B1792810(v20, (uint64_t)v17, (uint64_t (*)(_QWORD))sub_1B1C1912C);
  v22 = v17[4];
  v63 = *(_DWORD *)v17;
  v21 = v63;
  v64 = v22;
  v57 = v19;
  sub_1B1A025EC(v19, (uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for GraphScriptingConfig.ScriptInfo);
  v23 = (_QWORD *)*a3;
  LOBYTE(v60) = v22;
  v25 = sub_1B1DC4040(v21 | ((unint64_t)v22 << 32));
  v26 = v24;
  v27 = v23[3];
  v28 = v23[2] + ((v24 & 1) == 0);
  v59 = v11;
  if (v27 >= v28)
  {
    if ((v56 & 1) != 0)
    {
      if ((v24 & 1) != 0)
        goto LABEL_9;
    }
    else
    {
      sub_1B1EAD7E0();
      if ((v26 & 1) != 0)
        goto LABEL_9;
    }
LABEL_12:
    v33 = (_QWORD *)*a3;
    *(_QWORD *)(*a3 + 8 * (v25 >> 6) + 64) |= 1 << v25;
    v34 = v33[6] + 8 * v25;
    *(_DWORD *)v34 = v21;
    *(_BYTE *)(v34 + 4) = v22;
    v35 = v33[7];
    v56 = *(_QWORD *)(v54 + 72);
    v36 = (uint64_t)v59;
    sub_1B1A025EC((uint64_t)v59, v35 + v56 * v25, (uint64_t (*)(_QWORD))type metadata accessor for GraphScriptingConfig.ScriptInfo);
    ++v33[2];
    v37 = v18 - 1;
    if (v18 == 1)
    {
LABEL_18:
      swift_bridgeObjectRelease_n();
      return;
    }
    v38 = v55 + v58 + v52;
    v39 = type metadata accessor for GraphScriptingConfig.ScriptInfo;
    while (1)
    {
      sub_1B1792810(v38, (uint64_t)v17, (uint64_t (*)(_QWORD))sub_1B1C1912C);
      v41 = v17[4];
      v63 = *(_DWORD *)v17;
      v40 = v63;
      v64 = v41;
      v42 = v36;
      v43 = v39;
      sub_1B1A025EC(v57, v42, (uint64_t (*)(_QWORD))v39);
      v44 = (_QWORD *)*a3;
      LOBYTE(v60) = v41;
      v45 = sub_1B1DC4040(v40 | ((unint64_t)v41 << 32));
      v47 = v46;
      if (v44[3] < (int64_t)(v44[2] + ((v46 & 1) == 0)))
      {
        sub_1B1E9A6F8(v44[2] + ((v46 & 1) == 0), 1);
        LOBYTE(v60) = v41;
        v45 = sub_1B1DC4040(v40 | ((unint64_t)v41 << 32));
        if ((v47 & 1) != (v48 & 1))
          goto LABEL_19;
      }
      if ((v47 & 1) != 0)
        goto LABEL_9;
      v49 = (_QWORD *)*a3;
      *(_QWORD *)(*a3 + 8 * (v45 >> 6) + 64) |= 1 << v45;
      v50 = v49[6] + 8 * v45;
      *(_DWORD *)v50 = v40;
      *(_BYTE *)(v50 + 4) = v41;
      v39 = v43;
      v36 = (uint64_t)v59;
      sub_1B1A025EC((uint64_t)v59, v49[7] + v56 * v45, (uint64_t (*)(_QWORD))v39);
      ++v49[2];
      v38 += v58;
      if (!--v37)
        goto LABEL_18;
    }
  }
  sub_1B1E9A6F8(v28, v56 & 1);
  LOBYTE(v60) = v22;
  v29 = sub_1B1DC4040(v21 | ((unint64_t)v22 << 32));
  if ((v26 & 1) == (v30 & 1))
  {
    v25 = v29;
    if ((v26 & 1) == 0)
      goto LABEL_12;
LABEL_9:
    v31 = (void *)swift_allocError();
    swift_willThrow();
    v62 = v31;
    v32 = v31;
    sub_1B1AEC268(0, (unint64_t *)&qword_1ED4BB030);
    if ((swift_dynamicCast() & 1) == 0)
    {
      swift_bridgeObjectRelease();
      sub_1B1A04628((uint64_t)v59, (uint64_t (*)(_QWORD))type metadata accessor for GraphScriptingConfig.ScriptInfo);
      swift_bridgeObjectRelease();

      return;
    }
    goto LABEL_20;
  }
LABEL_19:
  sub_1B2229FC4();
  __break(1u);
LABEL_20:
  v60 = 0;
  v61 = 0xE000000000000000;
  sub_1B2229430();
  sub_1B2228890();
  sub_1B22295EC();
  sub_1B2228890();
  sub_1B2229688();
  __break(1u);
}

uint64_t sub_1B1C070D0(uint64_t *a1, char a2, uint64_t *a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v10;
  _QWORD *v11;
  uint64_t *v12;

  v8 = a1[1];
  if (v8)
  {
    v10 = *a1;
    v11 = (_QWORD *)*a3;
    if ((a2 & 1) != 0)
    {
      v12 = (uint64_t *)(v11[7] + 16 * a4);
      *v12 = v10;
      v12[1] = v8;
    }
    else
    {
      sub_1B1EB3424(a4, a5, a6, v10, v8, v11);
      swift_bridgeObjectRetain();
    }
  }
  else if ((a2 & 1) != 0)
  {
    swift_arrayDestroy();
    sub_1B1EA4AEC(a4, *a3);
  }
  return swift_bridgeObjectRetain();
}

unint64_t sub_1B1C07170(uint64_t a1, char a2, uint64_t *a3, unint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  unint64_t result;
  _QWORD *v23;
  unsigned int v24[4];

  *(_QWORD *)v24 = a5;
  sub_1B1C1908C(0);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for GraphScriptingConfig.ScriptInfo();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13, v15);
  v17 = (char *)v24 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18, v19);
  v21 = (char *)v24 - v20;
  sub_1B1792810(a1, (uint64_t)v12, (uint64_t (*)(_QWORD))sub_1B1C1908C);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
  {
    result = sub_1B1A04628((uint64_t)v12, (uint64_t (*)(_QWORD))sub_1B1C1908C);
    if ((a2 & 1) != 0)
      return sub_1B1EA649C(a4, *a3);
  }
  else
  {
    sub_1B1A025EC((uint64_t)v12, (uint64_t)v21, (uint64_t (*)(_QWORD))type metadata accessor for GraphScriptingConfig.ScriptInfo);
    v23 = (_QWORD *)*a3;
    if ((a2 & 1) != 0)
    {
      return sub_1B1A025EC((uint64_t)v21, v23[7] + *(_QWORD *)(v14 + 72) * a4, (uint64_t (*)(_QWORD))type metadata accessor for GraphScriptingConfig.ScriptInfo);
    }
    else
    {
      sub_1B1A025EC((uint64_t)v21, (uint64_t)v17, (uint64_t (*)(_QWORD))type metadata accessor for GraphScriptingConfig.ScriptInfo);
      return sub_1B1EB3DF4(a4, v24[0] | ((HIDWORD(*(_QWORD *)v24) & 1) << 32), (uint64_t)v17, v23);
    }
  }
  return result;
}

uint64_t sub_1B1C07314(uint64_t *a1, char a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  return sub_1B1C07328(a1, a2, a3, a4, a5, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1EB4444, (void (*)(uint64_t, _QWORD))sub_1B1EA70A0);
}

uint64_t sub_1B1C07328(uint64_t *a1, char a2, _QWORD *a3, uint64_t a4, uint64_t a5, void (*a6)(uint64_t, uint64_t, uint64_t, uint64_t), void (*a7)(uint64_t, _QWORD))
{
  uint64_t v9;
  uint64_t v10;

  v9 = *a1;
  if (*a1)
  {
    v10 = *a3;
    if ((a2 & 1) != 0)
    {
      *(_QWORD *)(*(_QWORD *)(v10 + 56) + 8 * a4) = v9;
    }
    else
    {
      a6(a4, a5, v9, v10);
      sub_1B1B9CC50(a5);
    }
  }
  else if ((a2 & 1) != 0)
  {
    swift_arrayDestroy();
    a7(a4, *a3);
  }
  return swift_bridgeObjectRetain();
}

void sub_1B1C073CC(uint64_t a1, char a2, uint64_t *a3, unint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  _QWORD *v14;
  _BYTE v15[160];
  _BYTE v16[160];

  v10 = type metadata accessor for TextureCache.TextureKey();
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = &v15[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1B1B9DC78(a1, (uint64_t)v15, (uint64_t)&unk_1ED4B84C0, (uint64_t)&type metadata for TextureCache.CacheEntry, (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))sub_1B1A02758);
  if (v15[152] == 255)
  {
    sub_1B1A057EC((uint64_t)v15, (uint64_t)&unk_1ED4B84C0, (uint64_t)&type metadata for TextureCache.CacheEntry, (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD))sub_1B1A02758);
    if ((a2 & 1) != 0)
    {
      swift_arrayDestroy();
      sub_1B1EA75B0(a4, *a3);
    }
  }
  else
  {
    sub_1B1B9C128((uint64_t)v15, (uint64_t)v16);
    v14 = (_QWORD *)*a3;
    if ((a2 & 1) != 0)
    {
      sub_1B1B9C128((uint64_t)v16, v14[7] + 160 * a4);
    }
    else
    {
      sub_1B1792810(a5, (uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for TextureCache.TextureKey);
      sub_1B1B9C128((uint64_t)v16, (uint64_t)v15);
      sub_1B1EB4580(a4, (uint64_t)v13, (uint64_t)v15, v14);
    }
  }
}

uint64_t sub_1B1C07550(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2)
    v7 = 2;
  v8 = v7 - 2;
  v9 = (unint64_t *)(a1 + 80);
  v2 = 64;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

uint64_t sub_1B1C075D8@<X0>(unint64_t a1@<X0>, uint64_t a2@<X2>, _BYTE *a3@<X8>)
{
  uint64_t result;

  swift_retain();
  LOBYTE(a2) = sub_1B1A8520C(a1, (uint64_t)&type metadata for GraphScriptingConfig, (uint64_t)&off_1E639BCE0, a2);
  result = swift_release();
  *a3 = a2;
  return result;
}

uint64_t sub_1B1C0763C(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  if (result != 0xFFFFFFFFLL)
  {
    v1 = swift_retain();
    MEMORY[0x1E0C80A78](v1, v2);
    sub_1B1D198D0(0, (void (*)(_BYTE *))sub_1B1C235C8);
    return swift_release();
  }
  return result;
}

uint64_t sub_1B1C076E8(uint64_t a1, __int16 *a2)
{
  __int16 v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  char v8;

  v3 = *a2;
  v4 = *((_QWORD *)a2 + 1);
  v5 = *((_QWORD *)a2 + 2);
  v6 = *((_BYTE *)a2 + 24);
  v7 = *((_BYTE *)a2 + 25);
  v8 = *((_BYTE *)a2 + 26);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_WORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 25) = v7;
  *(_BYTE *)(a1 + 26) = v8;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t sub_1B1C07774(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v6;
  uint64_t DynamicType;
  _UNKNOWN **v8;
  uint64_t (**v9)(uint64_t, void *);
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD v17[3];
  char v18;
  _BYTE v19[40];
  _QWORD v20[4];
  _UNKNOWN **v21;

  v20[3] = &type metadata for GraphDebuggingComponent;
  v21 = &off_1E63AA790;
  v6 = HIDWORD(a3);
  v20[0] = a1;
  v20[1] = a2;
  sub_1B19FA070(v20, (uint64_t)&type metadata for GraphDebuggingComponent);
  DynamicType = swift_getDynamicType();
  v8 = v21;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1B1D198D0(0, (void (*)(_BYTE *))sub_1B1C23F14);
  swift_release();
  v9 = (uint64_t (**)(uint64_t, void *))v8[1];
  if ((v9[6](DynamicType, v9) & 1) != 0)
  {
    swift_retain();
    v10 = sub_1B2020528(a3, (uint64_t)&type metadata for IsSubEntityOf);
    v12 = v11;
    swift_release();
    if ((v12 & 1) == 0)
    {
      v13 = *(_QWORD *)(a4 + OBJC_IVAR____TtC3VFX13EntityManager_replicationStream);
      swift_retain();
      if (v13)
      {
        v14 = *(_BYTE *)(v13 + 80);
        MEMORY[0x1B5E240CC](v13 + 48);
        v13 = *(_QWORD *)(v13 + 56);
      }
      else
      {
        v14 = 0;
      }
      swift_unknownObjectUnownedInit();
      v17[0] = a4;
      v17[2] = v13;
      swift_unknownObjectUnownedAssign();
      swift_unownedRetain();
      swift_unknownObjectRelease();
      v18 = v14;
      sub_1B1A02530((uint64_t)v17, (uint64_t)v19);
      sub_1B1BF988C(v10, a3);
      sub_1B1A0256C((uint64_t)v19);
      sub_1B1E31340(1);
      swift_release();
    }
  }
  type metadata accessor for VFXAttribute();
  v15 = swift_allocObject();
  *(_QWORD *)(v15 + 16) = a4;
  swift_retain();
  swift_unownedRetain();
  swift_release();
  *(_DWORD *)(v15 + 24) = a3;
  *(_DWORD *)(v15 + 28) = v6;
  *(_QWORD *)(v15 + 32) = DynamicType;
  *(_QWORD *)(v15 + 40) = v9;
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v20);
  return v15;
}

uint64_t sub_1B1C0798C(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD), uint64_t a5, void (*a6)(uint64_t, uint64_t *), void (*a7)(_BYTE *))
{
  unint64_t v13;
  uint64_t *v14;
  uint64_t DynamicType;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  _QWORD v25[3];
  char v26;
  _BYTE v27[40];
  uint64_t v28[3];
  uint64_t v29;
  uint64_t v30;

  v13 = HIDWORD(a2);
  v29 = a4(0);
  v30 = a5;
  v14 = sub_1B1A137F4(v28);
  a6(a1, v14);
  sub_1B19FA070(v28, v29);
  DynamicType = swift_getDynamicType();
  v16 = v30;
  swift_retain();
  sub_1B1D198D0(0, a7);
  swift_release();
  v17 = *(_QWORD *)(v16 + 8);
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v17 + 48))(DynamicType, v17) & 1) != 0)
  {
    swift_retain();
    v18 = sub_1B2020528(a2, (uint64_t)&type metadata for IsSubEntityOf);
    v20 = v19;
    swift_release();
    if ((v20 & 1) == 0)
    {
      v21 = *(_QWORD *)(a3 + OBJC_IVAR____TtC3VFX13EntityManager_replicationStream);
      swift_retain();
      if (v21)
      {
        v22 = *(_BYTE *)(v21 + 80);
        MEMORY[0x1B5E240CC](v21 + 48);
        v21 = *(_QWORD *)(v21 + 56);
      }
      else
      {
        v22 = 0;
      }
      swift_unknownObjectUnownedInit();
      v25[0] = a3;
      v25[2] = v21;
      swift_unknownObjectUnownedAssign();
      swift_unownedRetain();
      swift_unknownObjectRelease();
      v26 = v22;
      sub_1B1A02530((uint64_t)v25, (uint64_t)v27);
      sub_1B1BF988C(v18, a2);
      sub_1B1A0256C((uint64_t)v27);
      sub_1B1E31340(1);
      swift_release();
    }
  }
  type metadata accessor for VFXAttribute();
  v23 = swift_allocObject();
  *(_QWORD *)(v23 + 16) = a3;
  swift_retain();
  swift_unownedRetain();
  swift_release();
  *(_DWORD *)(v23 + 24) = a2;
  *(_DWORD *)(v23 + 28) = v13;
  *(_QWORD *)(v23 + 32) = DynamicType;
  *(_QWORD *)(v23 + 40) = v17;
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v28);
  return v23;
}

uint64_t sub_1B1C07BA4(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = a2[1];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *a1 = v3;
  a1[1] = v4;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t sub_1B1C07BF8(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  v7 = a2[4];
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v7;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t sub_1B1C07C9C(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *a2;
  v3 = a2[1];
  v6 = a2[2];
  v5 = a2[3];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *a1 = v4;
  a1[1] = v3;
  a1[2] = v6;
  a1[3] = v5;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t sub_1B1C07D00(_QWORD *a1, _QWORD *a2)
{
  BOOL v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  _BYTE v12[40];

  v4 = *a1 == *a2 && a1[1] == a2[1];
  if (v4 || (v5 = 0, (sub_1B2229D24() & 1) != 0))
  {
    sub_1B19FA278((uint64_t)(a1 + 2), (uint64_t)v12);
    sub_1B19FA278((uint64_t)(a2 + 2), (uint64_t)&v11);
    v6 = sub_1B1E03DBC();
    v8 = v7;
    if (v6 == sub_1B1E03DBC() && v8 == v9)
      v5 = 1;
    else
      v5 = sub_1B2229D24();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v5 & 1;
}

uint64_t sub_1B1C07DD8(uint64_t a1, uint64_t a2)
{
  BOOL v4;
  char v5;
  uint64_t result;
  BOOL v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;

  v4 = *(_QWORD *)a1 == *(_QWORD *)a2 && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8);
  if (v4 || (v5 = sub_1B2229D24(), result = 0, (v5 & 1) != 0))
  {
    v7 = *(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16) && *(_QWORD *)(a1 + 24) == *(_QWORD *)(a2 + 24);
    if (v7 || (v8 = sub_1B2229D24(), result = 0, (v8 & 1) != 0))
    {
      v9 = *(_QWORD *)(a1 + 40);
      v10 = *(_QWORD *)(a2 + 40);
      if (v9)
      {
        if (!v10)
          return 0;
        if (*(_QWORD *)(a1 + 32) != *(_QWORD *)(a2 + 32) || v9 != v10)
        {
          v11 = sub_1B2229D24();
          result = 0;
          if ((v11 & 1) == 0)
            return result;
        }
      }
      else if (v10)
      {
        return 0;
      }
      v12 = *(_QWORD *)(a1 + 56);
      v13 = *(_QWORD *)(a2 + 56);
      if (v12)
      {
        if (v13)
        {
          if (*(_QWORD *)(a1 + 48) != *(_QWORD *)(a2 + 48) || v12 != v13)
          {
            v14 = sub_1B2229D24();
            result = 0;
            if ((v14 & 1) == 0)
              return result;
          }
LABEL_25:
          v15 = *(_BYTE *)(a2 + 68);
          if ((*(_BYTE *)(a1 + 68) & 1) != 0)
          {
            if ((*(_BYTE *)(a2 + 68) & 1) == 0)
              return 0;
          }
          else
          {
            if (*(_DWORD *)(a1 + 64) != *(_DWORD *)(a2 + 64))
              v15 = 1;
            if ((v15 & 1) != 0)
              return 0;
          }
          return 1;
        }
      }
      else if (!v13)
      {
        goto LABEL_25;
      }
      return 0;
    }
  }
  return result;
}

uint64_t sub_1B1C07F04(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v6;

  if (*(_DWORD *)a1 != *(_DWORD *)a2
    || *(_DWORD *)(a1 + 4) != *(_DWORD *)(a2 + 4)
    || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8)
    || *(_QWORD *)(a1 + 24) != *(_QWORD *)(a2 + 24))
  {
LABEL_5:
    v4 = 0;
    return v4 & 1;
  }
  if (*(_QWORD *)(a1 + 32) == *(_QWORD *)(a2 + 32) && *(_QWORD *)(a1 + 40) == *(_QWORD *)(a2 + 40)
    || (v4 = 0, (sub_1B2229D24() & 1) != 0))
  {
    v6 = *(_QWORD *)(a2 + 48);
    if (!*(_QWORD *)(a1 + 48))
    {
      v4 = v6 == 0;
      return v4 & 1;
    }
    if (v6)
    {
      sub_1B2229328();
      swift_retain_n();
      v4 = sub_1B22286E0();
      swift_release();
      swift_release();
      return v4 & 1;
    }
    goto LABEL_5;
  }
  return v4 & 1;
}

uint64_t sub_1B1C08014(char *a1, __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v15[4];
  uint64_t v16;
  _QWORD v17[5];
  char v18;
  uint64_t v19;

  v19 = a3;
  if (sub_1B1E36538((uint64_t)&type metadata for Children))
    return sub_1B1FE6328(a2, a3);
  v16 = a5;
  v11 = *(uint64_t **)(a4 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues);
  ecs_stack_allocator_push_snapshot(*(_QWORD *)(*v11 + 32));
  v12 = *v11;
  if (!sub_1B1E36538((uint64_t)&type metadata for Children))
  {
    v17[0] = &type metadata for Children;
    v17[1] = &off_1E63BED58;
    v18 = 0;
    sub_1B1F05960((uint64_t *)(v12 + 104), (uint64_t)v17, a2, 0, (uint64_t)a1, v12);
    sub_1B1B68F14((uint64_t)v17);
  }
  v13 = sub_1B1F03804(a1);
  MEMORY[0x1E0C80A78](v13, v14);
  v15[2] = &v19;
  sub_1B1DB6AB4(v16, (uint64_t)sub_1B1C1A954, (uint64_t)v15);
  return ecs_stack_allocator_pop_snapshot(*(_QWORD *)(*v11 + 32));
}

uint64_t sub_1B1C08178(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  unint64_t v16;
  int v17;
  unint64_t v18;
  char v19;
  unint64_t v20;
  int v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  int v32;
  int v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char v47;
  int v48;
  int v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v58;
  int64_t v59;
  int v60;
  int v61;
  int v62;
  int v63;
  char v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t ObjectType;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  __int128 v77;
  __int128 v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = MEMORY[0x1E0DEE9D8];
  if (v3)
  {
    v81 = MEMORY[0x1E0DEE9D8];
    sub_1B202A3A8(0, v3, 0);
    v4 = v81;
    v58 = a1 + 32;
    ObjectType = swift_getObjectType();
    v6 = 0;
    v59 = v3;
    while (1)
    {
      v66 = v6;
      v67 = v4;
      v7 = (unsigned int *)(v58 + 40 * v6);
      v8 = *v7;
      v9 = v7[1];
      v11 = v7[2];
      v10 = v7[3];
      v13 = *((_QWORD *)v7 + 2);
      v12 = *((_QWORD *)v7 + 3);
      v64 = *((_BYTE *)v7 + 33);
      v65 = *((_BYTE *)v7 + 32);
      swift_bridgeObjectRetain();
      v69 = v12;
      swift_bridgeObjectRetain();
      v14 = sub_1B1F02E4C(v8 | (v9 << 32), 0, ObjectType, a3);
      v16 = HIDWORD(v14);
      if ((v15 & 1) != 0)
        v17 = v8;
      else
        v17 = v14;
      if ((v15 & 1) != 0)
        LODWORD(v16) = v9;
      v62 = v16;
      v63 = v17;
      v18 = sub_1B1F02E4C(v11 | (v10 << 32), 1, ObjectType, a3);
      v20 = HIDWORD(v18);
      if ((v19 & 1) != 0)
        v21 = v11;
      else
        v21 = v18;
      if ((v19 & 1) != 0)
        LODWORD(v20) = v10;
      v60 = v20;
      v61 = v21;
      v68 = v13;
      if (!v13)
        break;
      v22 = *(_QWORD *)(v13 + 16);
      if (!v22)
      {
        v37 = MEMORY[0x1E0DEE9D8];
        v24 = MEMORY[0x1E0DEE9D8];
        v38 = v69;
LABEL_29:
        v39 = *(_QWORD *)(v38 + 16);
        if (v39)
          goto LABEL_30;
        goto LABEL_26;
      }
      v79 = MEMORY[0x1E0DEE9D8];
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain();
      sub_1B202AEDC(0, v22, 0);
      v23 = 0;
      v24 = v79;
      do
      {
        v25 = v13 + v23;
        v26 = *(unsigned int *)(v13 + v23 + 32);
        v27 = *(unsigned int *)(v25 + 36);
        v77 = *(_OWORD *)(v25 + 40);
        v75 = *(_QWORD *)(v25 + 56);
        v28 = *(_QWORD *)(v25 + 72);
        v73 = *(_QWORD *)(v25 + 64);
        v29 = *(_QWORD *)(v25 + 80);
        swift_bridgeObjectRetain();
        swift_retain();
        v30 = sub_1B1F02E4C(v26 | (v27 << 32), 0, ObjectType, a3);
        if ((v31 & 1) != 0)
          v32 = v26;
        else
          v32 = v30;
        if ((v31 & 1) != 0)
          v33 = v27;
        else
          v33 = HIDWORD(v30);
        v35 = *(_QWORD *)(v79 + 16);
        v34 = *(_QWORD *)(v79 + 24);
        if (v35 >= v34 >> 1)
          sub_1B202AEDC(v34 > 1, v35 + 1, 1);
        *(_QWORD *)(v79 + 16) = v35 + 1;
        v36 = v79 + 56 * v35;
        *(_DWORD *)(v36 + 32) = v32;
        *(_DWORD *)(v36 + 36) = v33;
        *(_OWORD *)(v36 + 40) = v77;
        *(_QWORD *)(v36 + 56) = v75;
        *(_QWORD *)(v36 + 64) = v73;
        *(_QWORD *)(v36 + 72) = v28;
        *(_QWORD *)(v36 + 80) = v29;
        v23 += 56;
        --v22;
        v13 = v68;
      }
      while (v22);
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
      v37 = MEMORY[0x1E0DEE9D8];
      v4 = v67;
      v38 = v69;
      v39 = *(_QWORD *)(v69 + 16);
      if (v39)
      {
LABEL_30:
        v80 = v37;
        swift_unknownObjectRetain();
        swift_bridgeObjectRetain();
        sub_1B202AEDC(0, v39, 0);
        v41 = 0;
        v40 = v80;
        do
        {
          v42 = v38 + v41;
          v43 = *(unsigned int *)(v38 + v41 + 32);
          v44 = *(unsigned int *)(v42 + 36);
          v78 = *(_OWORD *)(v42 + 40);
          v72 = *(_QWORD *)(v42 + 64);
          v74 = *(_QWORD *)(v42 + 56);
          v45 = *(_QWORD *)(v42 + 80);
          v76 = *(_QWORD *)(v42 + 72);
          swift_bridgeObjectRetain();
          swift_retain();
          v46 = sub_1B1F02E4C(v43 | (v44 << 32), 0, ObjectType, a3);
          if ((v47 & 1) != 0)
            v48 = v43;
          else
            v48 = v46;
          if ((v47 & 1) != 0)
            v49 = v44;
          else
            v49 = HIDWORD(v46);
          v51 = *(_QWORD *)(v80 + 16);
          v50 = *(_QWORD *)(v80 + 24);
          if (v51 >= v50 >> 1)
            sub_1B202AEDC(v50 > 1, v51 + 1, 1);
          *(_QWORD *)(v80 + 16) = v51 + 1;
          v52 = v80 + 56 * v51;
          *(_DWORD *)(v52 + 32) = v48;
          *(_DWORD *)(v52 + 36) = v49;
          *(_OWORD *)(v52 + 40) = v78;
          *(_QWORD *)(v52 + 56) = v74;
          *(_QWORD *)(v52 + 64) = v72;
          *(_QWORD *)(v52 + 72) = v76;
          *(_QWORD *)(v52 + 80) = v45;
          v41 += 56;
          --v39;
          v38 = v69;
        }
        while (v39);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        swift_unknownObjectRelease();
        v4 = v67;
        goto LABEL_41;
      }
LABEL_26:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v40 = v37;
LABEL_41:
      v54 = *(_QWORD *)(v4 + 16);
      v53 = *(_QWORD *)(v4 + 24);
      v55 = v66;
      if (v54 >= v53 >> 1)
      {
        sub_1B202A3A8(v53 > 1, v54 + 1, 1);
        v55 = v66;
      }
      v6 = v55 + 1;
      *(_QWORD *)(v4 + 16) = v54 + 1;
      v56 = v4 + 40 * v54;
      *(_DWORD *)(v56 + 32) = v63;
      *(_DWORD *)(v56 + 36) = v62;
      *(_DWORD *)(v56 + 40) = v61;
      *(_DWORD *)(v56 + 44) = v60;
      *(_QWORD *)(v56 + 48) = v24;
      *(_QWORD *)(v56 + 56) = v40;
      *(_BYTE *)(v56 + 64) = v65;
      *(_BYTE *)(v56 + 65) = v64;
      *(_BYTE *)(v56 + 66) = 1;
      if (v6 == v59)
        return v4;
    }
    v24 = 0;
    v38 = v69;
    v37 = MEMORY[0x1E0DEE9D8];
    goto LABEL_29;
  }
  return v4;
}

uint64_t sub_1B1C08604(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  char v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v30;
  uint64_t v31;
  int64_t v32;
  uint64_t v33;
  int64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v40 = a2;
  v41 = a3;
  v4 = type metadata accessor for GraphScriptingConfig.ScriptInfo();
  v38 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v5);
  v37 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7, v8);
  v36 = (char *)&v30 - v9;
  sub_1B1C23444(0, (unint64_t *)&qword_1ED4BA8C0, (uint64_t (*)(uint64_t, ValueMetadata *, uint64_t, unint64_t))MEMORY[0x1E0DECD58]);
  v10 = sub_1B22296B8();
  v11 = 0;
  v39 = a1;
  v12 = a1 + 64;
  v13 = 1 << *(_BYTE *)(a1 + 32);
  v14 = -1;
  if (v13 < 64)
    v14 = ~(-1 << v13);
  v15 = v14 & *(_QWORD *)(a1 + 64);
  v42 = v10;
  v34 = (unint64_t)(v13 + 63) >> 6;
  v35 = v10 + 64;
  v32 = v34 - 5;
  v33 = v12;
  v31 = v12 + 40;
  v17 = (uint64_t)v36;
  v16 = (uint64_t)v37;
  while (1)
  {
    if (v15)
    {
      v18 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v43 = v11;
      v19 = v18 | (v11 << 6);
      goto LABEL_5;
    }
    v27 = v11 + 1;
    if (v11 + 1 >= v34)
      return v42;
    v28 = *(_QWORD *)(v33 + 8 * v27);
    if (!v28)
    {
      v27 = v11 + 2;
      if (v11 + 2 >= v34)
        return v42;
      v28 = *(_QWORD *)(v33 + 8 * v27);
      if (!v28)
      {
        v27 = v11 + 3;
        if (v11 + 3 >= v34)
          return v42;
        v28 = *(_QWORD *)(v33 + 8 * v27);
        if (!v28)
        {
          v27 = v11 + 4;
          if (v11 + 4 >= v34)
            return v42;
          v28 = *(_QWORD *)(v33 + 8 * v27);
          if (!v28)
            break;
        }
      }
    }
LABEL_18:
    v15 = (v28 - 1) & v28;
    v19 = __clz(__rbit64(v28)) + (v27 << 6);
    v43 = v27;
LABEL_5:
    v20 = 8 * v19;
    v21 = *(_QWORD *)(v39 + 48) + 8 * v19;
    v22 = *(_DWORD *)v21;
    v23 = *(_BYTE *)(v21 + 4);
    v24 = *(_QWORD *)(v38 + 72) * v19;
    sub_1B1792810(*(_QWORD *)(v39 + 56) + v24, v17, (uint64_t (*)(_QWORD))type metadata accessor for GraphScriptingConfig.ScriptInfo);
    sub_1B1792810(v17, v16, (uint64_t (*)(_QWORD))type metadata accessor for GraphScriptingConfig.ScriptInfo);
    sub_1B1C01A7C(v40, v41);
    sub_1B1A04628(v17, (uint64_t (*)(_QWORD))type metadata accessor for GraphScriptingConfig.ScriptInfo);
    *(_QWORD *)(v35 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    v25 = v42;
    v26 = *(_QWORD *)(v42 + 48) + v20;
    *(_DWORD *)v26 = v22;
    *(_BYTE *)(v26 + 4) = v23;
    sub_1B1A025EC(v16, *(_QWORD *)(v25 + 56) + v24, (uint64_t (*)(_QWORD))type metadata accessor for GraphScriptingConfig.ScriptInfo);
    ++*(_QWORD *)(v25 + 16);
    v11 = v43;
  }
  while (v32 != v11)
  {
    v28 = *(_QWORD *)(v31 + 8 * v11++);
    if (v28)
    {
      v27 = v11 + 4;
      goto LABEL_18;
    }
  }
  return v42;
}

_QWORD *sub_1B1C088B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  unsigned int *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t ObjectType;
  unint64_t v22;
  char v23;
  unint64_t v24;
  int v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;

  sub_1B1C1F5A0(0, (unint64_t *)&qword_1ED4BA920, (uint64_t)&type metadata for EntityComponentProperty, (uint64_t (*)(_QWORD, _QWORD, uint64_t, _QWORD))MEMORY[0x1E0DECD58]);
  v4 = sub_1B22296B8();
  v5 = 0;
  v35 = a1;
  v8 = *(_QWORD *)(a1 + 64);
  v7 = a1 + 64;
  v6 = v8;
  v9 = 1 << *(_BYTE *)(v7 - 32);
  v10 = -1;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  v11 = v10 & v6;
  v37 = (_QWORD *)v4;
  v33 = (unint64_t)(v9 + 63) >> 6;
  v34 = v4 + 64;
  v32 = v7;
  v31 = v7 + 40;
  while (1)
  {
    if (v11)
    {
      v12 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v39 = v5;
      v13 = v12 | (v5 << 6);
      goto LABEL_5;
    }
    v28 = v5 + 1;
    if (v5 + 1 >= v33)
      return v37;
    v29 = *(_QWORD *)(v32 + 8 * v28);
    if (!v29)
    {
      v28 = v5 + 2;
      if (v5 + 2 >= v33)
        return v37;
      v29 = *(_QWORD *)(v32 + 8 * v28);
      if (!v29)
      {
        v28 = v5 + 3;
        if (v5 + 3 >= v33)
          return v37;
        v29 = *(_QWORD *)(v32 + 8 * v28);
        if (!v29)
        {
          v28 = v5 + 4;
          if (v5 + 4 >= v33)
            return v37;
          v29 = *(_QWORD *)(v32 + 8 * v28);
          if (!v29)
            break;
        }
      }
    }
LABEL_23:
    v11 = (v29 - 1) & v29;
    v13 = __clz(__rbit64(v29)) + (v28 << 6);
    v39 = v28;
LABEL_5:
    v14 = 16 * v13;
    v15 = (uint64_t *)(*(_QWORD *)(v35 + 48) + 16 * v13);
    v16 = v15[1];
    v38 = *v15;
    v17 = (unsigned int *)(*(_QWORD *)(v35 + 56) + 16 * v13);
    v18 = *v17;
    v19 = v17[1];
    v20 = *((_QWORD *)v17 + 1);
    ObjectType = swift_getObjectType();
    swift_bridgeObjectRetain();
    swift_retain();
    v22 = sub_1B1F02E4C(v18 | (v19 << 32), 0, ObjectType, a3);
    v24 = HIDWORD(v22);
    if ((v23 & 1) != 0)
      v25 = v18;
    else
      v25 = v22;
    if ((v23 & 1) != 0)
      LODWORD(v24) = v19;
    *(_QWORD *)(v34 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    v26 = (_QWORD *)(v37[6] + v14);
    *v26 = v38;
    v26[1] = v16;
    v27 = v37[7] + v14;
    *(_DWORD *)v27 = v25;
    *(_DWORD *)(v27 + 4) = v24;
    *(_QWORD *)(v27 + 8) = v20;
    ++v37[2];
    v5 = v39;
  }
  while (v33 - 5 != v5)
  {
    v29 = *(_QWORD *)(v31 + 8 * v5++);
    if (v29)
    {
      v28 = v5 + 4;
      goto LABEL_23;
    }
  }
  return v37;
}

uint64_t sub_1B1C08B0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  unint64_t v14;
  int v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  char v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  int64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  int v39;
  uint64_t ObjectType;
  uint64_t v42;
  uint64_t v43;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = MEMORY[0x1E0DEE9D8];
  if (v3)
  {
    v43 = MEMORY[0x1E0DEE9D8];
    sub_1B202A40C(0, v3, 0);
    v4 = v43;
    v34 = a1 + 32;
    ObjectType = swift_getObjectType();
    v6 = 0;
    v33 = v3;
    do
    {
      v7 = (unsigned int *)(v34 + 24 * v6);
      v8 = *v7;
      v9 = v7[1];
      v10 = *((_QWORD *)v7 + 1);
      v11 = *((_QWORD *)v7 + 2);
      swift_retain_n();
      swift_bridgeObjectRetain();
      v12 = sub_1B1F02E4C(v8 | (v9 << 32), 0, ObjectType, a3);
      v14 = HIDWORD(v12);
      if ((v13 & 1) != 0)
        v15 = v8;
      else
        v15 = v12;
      if ((v13 & 1) != 0)
        LODWORD(v14) = v9;
      v38 = v14;
      v39 = v15;
      v16 = *(_QWORD *)(v11 + 16);
      if (v16)
      {
        v35 = v10;
        v36 = v6;
        v37 = v4;
        v42 = MEMORY[0x1E0DEE9D8];
        swift_bridgeObjectRetain();
        swift_unknownObjectRetain();
        sub_1B202ADB8(0, v16, 0);
        v17 = v11;
        v18 = v42;
        v19 = (uint64_t *)(v17 + 40);
        do
        {
          v20 = *((unsigned int *)v19 - 2);
          v21 = *((unsigned int *)v19 - 1);
          v22 = *v19;
          swift_retain_n();
          v23 = sub_1B1F02E4C(v20 | (v21 << 32), 0, ObjectType, a3);
          v25 = v24;
          swift_release();
          if ((v25 & 1) == 0)
          {
            LODWORD(v20) = v23;
            LODWORD(v21) = HIDWORD(v23);
          }
          v27 = *(_QWORD *)(v42 + 16);
          v26 = *(_QWORD *)(v42 + 24);
          if (v27 >= v26 >> 1)
            sub_1B202ADB8(v26 > 1, v27 + 1, 1);
          *(_QWORD *)(v42 + 16) = v27 + 1;
          v28 = v42 + 16 * v27;
          *(_DWORD *)(v28 + 32) = v20;
          *(_DWORD *)(v28 + 36) = v21;
          *(_QWORD *)(v28 + 40) = v22;
          v19 += 2;
          --v16;
        }
        while (v16);
        v10 = v35;
        swift_release();
        swift_bridgeObjectRelease_n();
        swift_unknownObjectRelease();
        v3 = v33;
        v6 = v36;
        v4 = v37;
      }
      else
      {
        swift_bridgeObjectRelease();
        swift_release();
        v18 = MEMORY[0x1E0DEE9D8];
      }
      v30 = *(_QWORD *)(v4 + 16);
      v29 = *(_QWORD *)(v4 + 24);
      if (v30 >= v29 >> 1)
        sub_1B202A40C(v29 > 1, v30 + 1, 1);
      ++v6;
      *(_QWORD *)(v4 + 16) = v30 + 1;
      v31 = v4 + 24 * v30;
      *(_DWORD *)(v31 + 32) = v39;
      *(_DWORD *)(v31 + 36) = v38;
      *(_QWORD *)(v31 + 40) = v10;
      *(_QWORD *)(v31 + 48) = v18;
    }
    while (v6 != v3);
  }
  return v4;
}

_QWORD *sub_1B1C08D98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  unsigned int *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t ObjectType;
  unint64_t v22;
  char v23;
  unint64_t v24;
  int v25;
  int v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;

  sub_1B1C1F5A0(0, (unint64_t *)&qword_1ED4BA920, (uint64_t)&type metadata for EntityComponentProperty, (uint64_t (*)(_QWORD, _QWORD, uint64_t, _QWORD))MEMORY[0x1E0DECD58]);
  v4 = sub_1B22296B8();
  v5 = 0;
  v36 = a1;
  v8 = *(_QWORD *)(a1 + 64);
  v7 = a1 + 64;
  v6 = v8;
  v9 = 1 << *(_BYTE *)(v7 - 32);
  v10 = -1;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  v11 = v10 & v6;
  v38 = (_QWORD *)v4;
  v34 = (unint64_t)(v9 + 63) >> 6;
  v35 = v4 + 64;
  v33 = v7;
  v32 = v7 + 40;
  while (1)
  {
    if (v11)
    {
      v12 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v40 = v5;
      v13 = v12 | (v5 << 6);
      goto LABEL_5;
    }
    v29 = v5 + 1;
    if (v5 + 1 >= v34)
      return v38;
    v30 = *(_QWORD *)(v33 + 8 * v29);
    if (!v30)
    {
      v29 = v5 + 2;
      if (v5 + 2 >= v34)
        return v38;
      v30 = *(_QWORD *)(v33 + 8 * v29);
      if (!v30)
      {
        v29 = v5 + 3;
        if (v5 + 3 >= v34)
          return v38;
        v30 = *(_QWORD *)(v33 + 8 * v29);
        if (!v30)
        {
          v29 = v5 + 4;
          if (v5 + 4 >= v34)
            return v38;
          v30 = *(_QWORD *)(v33 + 8 * v29);
          if (!v30)
            break;
        }
      }
    }
LABEL_29:
    v11 = (v30 - 1) & v30;
    v13 = __clz(__rbit64(v30)) + (v29 << 6);
    v40 = v29;
LABEL_5:
    v14 = 16 * v13;
    v15 = (uint64_t *)(*(_QWORD *)(v36 + 48) + 16 * v13);
    v16 = v15[1];
    v39 = *v15;
    v17 = (unsigned int *)(*(_QWORD *)(v36 + 56) + 16 * v13);
    v18 = *v17;
    v19 = v17[1];
    v20 = *((_QWORD *)v17 + 1);
    ObjectType = swift_getObjectType();
    swift_bridgeObjectRetain();
    swift_retain();
    v22 = sub_1B1F02E4C(v18 | (v19 << 32), 0, ObjectType, a3);
    v24 = HIDWORD(v22);
    if (HIDWORD(v22))
      v25 = -1;
    else
      v25 = v18;
    if (HIDWORD(v22))
      v26 = HIDWORD(v22);
    else
      v26 = v19;
    if ((_DWORD)v22 == -1)
      LODWORD(v24) = v26;
    else
      v25 = v22;
    if ((v23 & 1) != 0)
    {
      v25 = v18;
      LODWORD(v24) = v19;
    }
    *(_QWORD *)(v35 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    v27 = (_QWORD *)(v38[6] + v14);
    *v27 = v39;
    v27[1] = v16;
    v28 = v38[7] + v14;
    *(_DWORD *)v28 = v25;
    *(_DWORD *)(v28 + 4) = v24;
    *(_QWORD *)(v28 + 8) = v20;
    ++v38[2];
    v5 = v40;
  }
  while (v34 - 5 != v5)
  {
    v30 = *(_QWORD *)(v32 + 8 * v5++);
    if (v30)
    {
      v29 = v5 + 4;
      goto LABEL_29;
    }
  }
  return v38;
}

uint64_t sub_1B1C09008(uint64_t a1, __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v15[5];
  uint64_t v16;
  _QWORD v17[5];
  char v18;
  uint64_t v19;

  v19 = a3;
  sub_1B1A10AA4(*(_QWORD *)(a1 + 40), (uint64_t)&type metadata for TextureGPURuntime, v17);
  if (LOBYTE(v17[0]) == 1)
    return sub_1B1FE6704(a2, a3);
  v16 = a5;
  v11 = *(uint64_t **)(a4 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues);
  ecs_stack_allocator_push_snapshot(*(_QWORD *)(*v11 + 32));
  v12 = *v11;
  sub_1B1A10AA4(*(_QWORD *)(a1 + 40), (uint64_t)&type metadata for TextureGPURuntime, v17);
  if ((v17[0] & 1) == 0)
  {
    v17[0] = &type metadata for TextureGPURuntime;
    v17[1] = &off_1E6390060;
    v18 = 0;
    sub_1B1F05960((uint64_t *)(v12 + 104), (uint64_t)v17, a2, 0, a1, v12);
    sub_1B1B68F14((uint64_t)v17);
  }
  v13 = sub_1B1F03804((char *)a1);
  MEMORY[0x1E0C80A78](v13, v14);
  v15[2] = &v19;
  sub_1B1DB6BC0(v16, (uint64_t)sub_1B1C1FD58, (uint64_t)v15);
  return ecs_stack_allocator_pop_snapshot(*(_QWORD *)(*v11 + 32));
}

void sub_1B1C0918C(uint64_t a1, __int16 a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  _QWORD v14[5];
  uint64_t v15;
  _QWORD v16[5];
  char v17;
  void *v18;

  v18 = a3;
  sub_1B1A10AA4(*(_QWORD *)(a1 + 40), (uint64_t)&type metadata for TextureCGImage, v16);
  if (LOBYTE(v16[0]) == 1)
  {
    sub_1B1FDE0D0(a2, a3);
  }
  else
  {
    v15 = a5;
    v10 = *(uint64_t **)(a4 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues);
    ecs_stack_allocator_push_snapshot(*(_QWORD *)(*v10 + 32));
    v11 = *v10;
    sub_1B1A10AA4(*(_QWORD *)(a1 + 40), (uint64_t)&type metadata for TextureCGImage, v16);
    if ((v16[0] & 1) == 0)
    {
      v16[0] = &type metadata for TextureCGImage;
      v16[1] = &off_1E63820A8;
      v17 = 0;
      sub_1B1F05960((uint64_t *)(v11 + 104), (uint64_t)v16, a2, 0, a1, v11);
      sub_1B1B68F14((uint64_t)v16);
    }
    v12 = sub_1B1F03804((char *)a1);
    MEMORY[0x1E0C80A78](v12, v13);
    v14[2] = &v18;
    sub_1B1DB8230(v15, (uint64_t)sub_1B1C1FD14, (uint64_t)v14);
    ecs_stack_allocator_pop_snapshot(*(_QWORD *)(*v10 + 32));
  }
}

uint64_t sub_1B1C09324(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  char v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;
  char v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char v23;
  __int128 v24;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  char v30;
  char v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  char v36;
  char v37;
  uint64_t v38;

  v3 = v2;
  v4 = *(_QWORD *)(a1 + 16);
  v5 = MEMORY[0x1E0DEE9D8];
  if (v4)
  {
    v38 = MEMORY[0x1E0DEE9D8];
    sub_1B202A3A8(0, v4, 0);
    v5 = v38;
    v7 = (char *)(a1 + 66);
    while (1)
    {
      v8 = *(_QWORD *)(v7 - 18);
      v9 = *(_QWORD *)(v7 - 10);
      v10 = *(v7 - 2);
      v11 = *(v7 - 1);
      v12 = *v7;
      v26 = *(_OWORD *)(v7 - 34);
      v27 = v8;
      v28 = v9;
      v29 = v10;
      v30 = v11;
      v31 = v12;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1B1BFFA40((int *)&v26, a2, (uint64_t)&v32);
      if (v3)
        break;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v13 = v32;
      v14 = v33;
      v15 = v34;
      v16 = v35;
      v17 = v36;
      v18 = v37;
      v38 = v5;
      v20 = *(_QWORD *)(v5 + 16);
      v19 = *(_QWORD *)(v5 + 24);
      if (v20 >= v19 >> 1)
      {
        v24 = v32;
        v23 = v37;
        sub_1B202A3A8(v19 > 1, v20 + 1, 1);
        v18 = v23;
        v13 = v24;
        v5 = v38;
      }
      *(_QWORD *)(v5 + 16) = v20 + 1;
      v21 = v5 + 40 * v20;
      *(_OWORD *)(v21 + 32) = v13;
      *(_QWORD *)(v21 + 48) = v14;
      *(_QWORD *)(v21 + 56) = v15;
      *(_BYTE *)(v21 + 64) = v16;
      *(_BYTE *)(v21 + 65) = v17;
      *(_BYTE *)(v21 + 66) = v18;
      v7 += 40;
      --v4;
      v3 = 0;
      if (!v4)
        return v5;
    }
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v5;
}

uint64_t sub_1B1C094B8(uint64_t a1, uint64_t a2)
{
  int64_t v2;
  uint64_t v3;
  uint64_t *v6;
  ValueMetadata *v7;
  uint64_t v8;
  _QWORD *v9;
  ValueMetadata *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t Strong;
  uint64_t v17;
  char v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  char v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33[5];
  _QWORD v34[6];
  uint64_t v35;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = MEMORY[0x1E0DEE9D8];
  if (v2)
  {
    v35 = MEMORY[0x1E0DEE9D8];
    sub_1B202ADB8(0, v2, 0);
    v3 = v35;
    v31 = a2;
    v30 = OBJC_IVAR____TtC3VFX15DefaultRemapper_isReversed;
    v6 = (uint64_t *)(a1 + 40);
    v7 = &type metadata for Entity;
    do
    {
      v8 = *v6;
      v34[3] = v7;
      v34[4] = &off_1E63BB108;
      v34[0] = *(v6 - 1);
      v9 = sub_1B19FA070(v34, (uint64_t)v7);
      v10 = v7;
      v33[3] = (uint64_t)v7;
      v33[4] = (uint64_t)&off_1E63BB108;
      v11 = sub_1B1A137F4(v33);
      v12 = v11;
      v13 = *(unsigned int *)v9;
      v14 = *((unsigned int *)v9 + 1);
      if ((_DWORD)v13 == -1 && (_DWORD)v14 == 0)
      {
        swift_retain();
        v21 = 0xFFFFFFFFLL;
        v7 = v10;
      }
      else
      {
        v32 = v11;
        Strong = swift_weakLoadStrong();
        if (Strong)
        {
          v17 = Strong;
          v18 = *(_BYTE *)(v31 + v30);
          v19 = *(void **)(Strong + 16);
          swift_retain();
          objc_msgSend(v19, sel_lock);
          if ((v18 & 1) != 0)
            v20 = *(_QWORD *)(v17 + 32);
          else
            v20 = *(_QWORD *)(v17 + 24);
          v21 = 0xFFFFFFFFLL;
          if (*(_QWORD *)(v20 + 16))
          {
            v22 = sub_1B1DC3CA4(v13 | (v14 << 32));
            v7 = v10;
            v23 = v19;
            if ((v24 & 1) != 0)
              v21 = *(_QWORD *)(*(_QWORD *)(v20 + 56) + 8 * v22);
          }
          else
          {
            v7 = v10;
            v23 = v19;
          }
          objc_msgSend(v23, sel_unlock);
          swift_release();
        }
        else
        {
          swift_retain();
          v21 = 0xFFFFFFFFLL;
          v7 = v10;
        }
        v12 = v32;
      }
      *v12 = v21;
      sub_1B1AEC268(0, (unint64_t *)&qword_1EEF5AB10);
      swift_dynamicCast();
      _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v34);
      v25 = v34[5];
      v35 = v3;
      v27 = *(_QWORD *)(v3 + 16);
      v26 = *(_QWORD *)(v3 + 24);
      if (v27 >= v26 >> 1)
      {
        sub_1B202ADB8(v26 > 1, v27 + 1, 1);
        v3 = v35;
      }
      *(_QWORD *)(v3 + 16) = v27 + 1;
      v28 = v3 + 16 * v27;
      *(_QWORD *)(v28 + 32) = v25;
      *(_QWORD *)(v28 + 40) = v8;
      v6 += 2;
      --v2;
    }
    while (v2);
  }
  return v3;
}

uint64_t sub_1B1C0971C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v16;
  char *v17;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  int64_t v27;
  char *v28;
  _QWORD *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  char *v39;
  uint64_t v41;
  char *v42;
  uint64_t result;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;

  ++qword_1ED4B7850;
  v1 = MEMORY[0x1E0DEE9D8];
  v46 = *(_QWORD *)(a1 + 16);
  if (v46)
  {
    v45 = a1 + 32;
    swift_bridgeObjectRetain_n();
    v2 = 0;
    v3 = (char *)v1;
    while (1)
    {
      v4 = *(_QWORD *)(v45 + 40 * v2 + 24);
      v5 = *(_QWORD *)(v4 + 16);
      if (v5)
      {
        v6 = v1;
        v49 = v1;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain_n();
        sub_1B202A38C(0, v5, 0);
        v7 = (_QWORD *)v1;
        v8 = *(_QWORD *)(v1 + 16);
        v9 = 32;
        do
        {
          v10 = *(_QWORD *)(v4 + v9);
          v49 = (uint64_t)v7;
          v11 = v7[3];
          if (v8 >= v11 >> 1)
          {
            sub_1B202A38C(v11 > 1, v8 + 1, 1);
            v7 = (_QWORD *)v49;
          }
          v7[2] = v8 + 1;
          v7[v8 + 4] = v10;
          v9 += 56;
          ++v8;
          --v5;
        }
        while (v5);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        v1 = v6;
      }
      else
      {
        v7 = (_QWORD *)v1;
      }
      v12 = v7[2];
      v13 = *((_QWORD *)v3 + 2);
      v14 = v13 + v12;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      if ((isUniquelyReferenced_nonNull_native & 1) != 0 && v14 <= *((_QWORD *)v3 + 3) >> 1)
      {
        if (v7[2])
          goto LABEL_19;
      }
      else
      {
        if (v13 <= v14)
          v16 = v13 + v12;
        else
          v16 = v13;
        v3 = sub_1B1C63D98(isUniquelyReferenced_nonNull_native, v16, 1, v3);
        if (v7[2])
        {
LABEL_19:
          v17 = &v3[8 * *((_QWORD *)v3 + 2) + 32];
          if (v7 + 4 < (_QWORD *)&v17[8 * v12] && v17 < (char *)&v7[v12 + 4])
          {
LABEL_65:
            result = sub_1B2229700();
            __break(1u);
            return result;
          }
          memcpy(v17, v7 + 4, 8 * v12);
          if (v12)
            *((_QWORD *)v3 + 2) += v12;
        }
      }
      swift_bridgeObjectRelease();
      if (++v2 == v46)
      {
        swift_bridgeObjectRelease_n();
        goto LABEL_28;
      }
    }
  }
  v3 = (char *)MEMORY[0x1E0DEE9D8];
LABEL_28:
  sub_1B1B68ED0();
  v49 = sub_1B2228CD4();
  v19 = *((_QWORD *)v3 + 2);
  if (v19)
  {
    v20 = v3 + 36;
    do
    {
      sub_1B1B8B00C(&v48, *(_QWORD *)(v20 - 4));
      v20 += 8;
      --v19;
    }
    while (v19);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  v21 = *(_QWORD *)(a1 + 16);
  v22 = (char *)MEMORY[0x1E0DEE9D8];
  if (v21)
  {
    v23 = a1 + 32;
    swift_bridgeObjectRetain_n();
    v24 = 0;
    v25 = v22;
    v47 = v21;
    while (1)
    {
      v26 = *(_QWORD *)(v23 + 40 * v24 + 16);
      if (v26 && (v27 = *(_QWORD *)(v26 + 16)) != 0)
      {
        v28 = v22;
        v49 = (uint64_t)v22;
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain();
        sub_1B202A38C(0, v27, 0);
        v29 = (_QWORD *)v49;
        v30 = *(_QWORD *)(v49 + 16);
        v31 = 32;
        do
        {
          v32 = *(_QWORD *)(v26 + v31);
          v49 = (uint64_t)v29;
          v33 = v29[3];
          if (v30 >= v33 >> 1)
          {
            sub_1B202A38C(v33 > 1, v30 + 1, 1);
            v29 = (_QWORD *)v49;
          }
          v29[2] = v30 + 1;
          v29[v30 + 4] = v32;
          v31 += 56;
          ++v30;
          --v27;
        }
        while (v27);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        v22 = v28;
        v23 = a1 + 32;
        v21 = v47;
      }
      else
      {
        v29 = v22;
      }
      v34 = v29[2];
      v35 = *((_QWORD *)v25 + 2);
      v36 = v35 + v34;
      v37 = swift_isUniquelyReferenced_nonNull_native();
      if ((v37 & 1) != 0 && v36 <= *((_QWORD *)v25 + 3) >> 1)
      {
        if (v29[2])
          goto LABEL_52;
      }
      else
      {
        if (v35 <= v36)
          v38 = v35 + v34;
        else
          v38 = v35;
        v25 = sub_1B1C63D98(v37, v38, 1, v25);
        if (v29[2])
        {
LABEL_52:
          v39 = &v25[8 * *((_QWORD *)v25 + 2) + 32];
          if (v29 + 4 < (_QWORD *)&v39[8 * v34] && v39 < (char *)&v29[v34 + 4])
            goto LABEL_65;
          memcpy(v39, v29 + 4, 8 * v34);
          if (v34)
            *((_QWORD *)v25 + 2) += v34;
        }
      }
      swift_bridgeObjectRelease();
      if (++v24 == v21)
      {
        swift_bridgeObjectRelease_n();
        goto LABEL_61;
      }
    }
  }
  v25 = (char *)MEMORY[0x1E0DEE9D8];
LABEL_61:
  v49 = sub_1B2228CD4();
  v41 = *((_QWORD *)v25 + 2);
  if (v41)
  {
    v42 = v25 + 36;
    do
    {
      sub_1B1B8B00C(&v48, *(_QWORD *)(v42 - 4));
      v42 += 8;
      --v41;
    }
    while (v41);
  }
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1B1C09C14(_QWORD *a1, uint64_t (*a2)(char *, unint64_t, char *), uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  char v31;
  uint64_t v32;
  _DWORD *v33;
  uint64_t v34;
  unsigned int *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  int64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  _QWORD v51[2];
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  int64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int *v58;
  char *v59;
  _DWORD *v60;
  uint64_t v61;
  uint64_t (*v62)(char *, unint64_t, char *);
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  unsigned __int8 v67;
  uint64_t v68;

  v62 = a2;
  v63 = a3;
  sub_1B1C18FB4(0);
  v61 = v5;
  MEMORY[0x1E0C80A78](v5, v6);
  v58 = (unsigned int *)((char *)v51 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v8, v9);
  v60 = (_DWORD *)((char *)v51 - v10);
  MEMORY[0x1E0C80A78](v11, v12);
  v59 = (char *)v51 - v13;
  sub_1B1C1912C();
  v56 = *(_QWORD *)(v14 - 8);
  v57 = v14;
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)v51 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = a1[2];
  v19 = MEMORY[0x1E0DEE9D8];
  if (v18)
  {
    v51[1] = v3;
    v68 = MEMORY[0x1E0DEE9D8];
    sub_1B202AEF8(0, v18, 0);
    v20 = sub_1B1C07550((uint64_t)a1);
    v64 = a1 + 8;
    v21 = type metadata accessor for GraphScriptingConfig.ScriptInfo();
    v22 = 0;
    v23 = *(_QWORD *)(*(_QWORD *)(v21 - 8) + 72);
    v53 = a1;
    v54 = v23;
    v52 = a1 + 11;
    v19 = v68;
    v55 = v18;
    v24 = v61;
    do
    {
      v65 = v22;
      v66 = v20;
      v25 = v17;
      v26 = v59;
      v27 = (uint64_t)&v59[*(int *)(v24 + 48)];
      v28 = a1[7];
      v29 = a1[6] + 8 * v20;
      v30 = *(_DWORD *)v29;
      v31 = *(_BYTE *)(v29 + 4);
      sub_1B1792810(v28 + v54 * v20, v27, (uint64_t (*)(_QWORD))type metadata accessor for GraphScriptingConfig.ScriptInfo);
      *(_DWORD *)v26 = v30;
      v26[4] = v31;
      v32 = v19;
      v33 = v60;
      *v60 = v30;
      *((_BYTE *)v33 + 4) = v31;
      sub_1B1792810(v27, (uint64_t)v33 + *(int *)(v24 + 48), (uint64_t (*)(_QWORD))type metadata accessor for GraphScriptingConfig.ScriptInfo);
      v34 = (uint64_t)v33;
      v35 = v58;
      sub_1B1A025EC(v34, (uint64_t)v58, (uint64_t (*)(_QWORD))sub_1B1C18FB4);
      v36 = (uint64_t)v26;
      v17 = v25;
      sub_1B1A04628(v36, (uint64_t (*)(_QWORD))sub_1B1C18FB4);
      v37 = *v35;
      v38 = (char *)v35 + *(int *)(v24 + 48);
      v39 = &v25[*(int *)(v57 + 48)];
      v67 = *((_BYTE *)v35 + 4);
      v40 = v62(v39, v37 | ((unint64_t)v67 << 32), v38);
      *(_DWORD *)v25 = v40;
      v25[4] = BYTE4(v40) & 1;
      v41 = (uint64_t)v35;
      v19 = v32;
      sub_1B1A04628(v41, (uint64_t (*)(_QWORD))sub_1B1C18FB4);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1B202AEF8(0, *(_QWORD *)(v32 + 16) + 1, 1);
        v19 = v68;
      }
      v43 = *(_QWORD *)(v19 + 16);
      v42 = *(_QWORD *)(v19 + 24);
      v44 = v55;
      v45 = v66;
      if (v43 >= v42 >> 1)
      {
        sub_1B202AEF8(v42 > 1, v43 + 1, 1);
        v19 = v68;
      }
      *(_QWORD *)(v19 + 16) = v43 + 1;
      sub_1B1A025EC((uint64_t)v17, v19+ ((*(unsigned __int8 *)(v56 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v56 + 80))+ *(_QWORD *)(v56 + 72) * v43, (uint64_t (*)(_QWORD))sub_1B1C1912C);
      v46 = v45 >> 6;
      if ((v64[v45 >> 6] & (-2 << v45)) != 0)
      {
        v20 = __clz(__rbit64(v64[v45 >> 6] & (-2 << v45))) | v45 & 0xFFFFFFFFFFFFFFC0;
        a1 = v53;
      }
      else
      {
        a1 = v53;
        v20 = 1 << *((_BYTE *)v53 + 32);
        v47 = v46 + 1;
        v48 = (unint64_t)(v20 + 63) >> 6;
        if (v46 + 1 < v48)
        {
          v49 = v64[v47];
          if (!v49)
          {
            v47 = v46 + 2;
            if (v46 + 2 >= v48)
              goto LABEL_4;
            v49 = v64[v47];
            if (!v49)
            {
              while (v48 - 3 != v46)
              {
                v49 = v52[v46++];
                if (v49)
                {
                  v47 = v46 + 2;
                  goto LABEL_12;
                }
              }
              goto LABEL_4;
            }
          }
LABEL_12:
          v20 = __clz(__rbit64(v49)) + (v47 << 6);
        }
      }
LABEL_4:
      v22 = v65 + 1;
    }
    while (v65 + 1 != v44);
  }
  return v19;
}

uint64_t sub_1B1C09FC0()
{
  unint64_t v0;

  v0 = sub_1B2229730();
  swift_bridgeObjectRelease();
  if (v0 >= 8)
    return 8;
  else
    return v0;
}

uint64_t sub_1B1C0A008()
{
  unint64_t v0;

  v0 = sub_1B2229730();
  swift_bridgeObjectRelease();
  if (v0 >= 4)
    return 4;
  else
    return v0;
}

uint64_t sub_1B1C0A050(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x656372756F73 && a2 == 0xE600000000000000;
  if (v2 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x73746567726174 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_1B2229D24();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_1B1C0A138()
{
  unint64_t v0;

  v0 = sub_1B2229730();
  swift_bridgeObjectRelease();
  if (v0 >= 0xD)
    return 13;
  else
    return v0;
}

uint64_t sub_1B1C0A180(char *a1, __int16 a2, const void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[4];
  const void *v18;
  uint64_t v19;
  _QWORD v20[5];
  char v21;
  uint64_t v22;

  v22 = a5;
  v10 = type metadata accessor for GraphScript(0);
  if (sub_1B1E36538(v10))
    return sub_1B1FDDFC4(a2, a3, **(_QWORD **)(a4 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues));
  v18 = a3;
  v19 = v5;
  v12 = *(uint64_t **)(a4 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues);
  ecs_stack_allocator_push_snapshot(*(_QWORD *)(*v12 + 32));
  v13 = *v12;
  if (!sub_1B1E36538(v10))
  {
    v20[0] = v10;
    v20[1] = &off_1E6370AB0;
    v21 = 0;
    sub_1B1F05960((uint64_t *)(v13 + 104), (uint64_t)v20, a2, 0, (uint64_t)a1, v13);
    sub_1B1B68F14((uint64_t)v20);
  }
  v14 = sub_1B1F03804(a1);
  v16 = *(_QWORD *)(v10 - 8);
  if (*(_QWORD *)(v16 + 64))
  {
    if (*(uint64_t *)(v16 + 72) >= 1)
    {
      MEMORY[0x1E0C80A78](v14, v15);
      v17[2] = v18;
      sub_1B1DB6B20(v22, (uint64_t)sub_1B1A02630, (uint64_t)v17);
    }
  }
  return ecs_stack_allocator_pop_snapshot(*(_QWORD *)(*v12 + 32));
}

uint64_t sub_1B1C0A310(char *a1, __int16 a2, const void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[4];
  const void *v18;
  uint64_t v19;
  _QWORD v20[5];
  char v21;
  uint64_t v22;

  v22 = a5;
  v10 = type metadata accessor for TriggerScript(0);
  if (sub_1B1E36538(v10))
    return sub_1B1FDDFB0(a2, a3, **(_QWORD **)(a4 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues));
  v18 = a3;
  v19 = v5;
  v12 = *(uint64_t **)(a4 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues);
  ecs_stack_allocator_push_snapshot(*(_QWORD *)(*v12 + 32));
  v13 = *v12;
  if (!sub_1B1E36538(v10))
  {
    v20[0] = v10;
    v20[1] = &off_1E637DA80;
    v21 = 0;
    sub_1B1F05960((uint64_t *)(v13 + 104), (uint64_t)v20, a2, 0, (uint64_t)a1, v13);
    sub_1B1B68F14((uint64_t)v20);
  }
  v14 = sub_1B1F03804(a1);
  v16 = *(_QWORD *)(v10 - 8);
  if (*(_QWORD *)(v16 + 64))
  {
    if (*(uint64_t *)(v16 + 72) >= 1)
    {
      MEMORY[0x1E0C80A78](v14, v15);
      v17[2] = v18;
      sub_1B1DB6AE4(v22, (uint64_t)sub_1B1A026A0, (uint64_t)v17);
    }
  }
  return ecs_stack_allocator_pop_snapshot(*(_QWORD *)(*v12 + 32));
}

uint64_t sub_1B1C0A4A0(char *a1, __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  _QWORD v16[5];
  _QWORD v17[5];
  char v18;
  _QWORD v19[2];
  uint64_t v20;

  v20 = a6;
  v19[0] = a3;
  v19[1] = a4;
  if (sub_1B2162978((uint64_t)&type metadata for Name))
    return sub_1B1FECA74(a2, a3, a4);
  v12 = *(uint64_t **)(a5 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues);
  ecs_stack_allocator_push_snapshot(*(_QWORD *)(*v12 + 32));
  v13 = *v12;
  if (!sub_1B2162978((uint64_t)&type metadata for Name))
  {
    v17[0] = &type metadata for Name;
    v17[1] = &off_1E63B9AE8;
    v18 = 0;
    sub_1B1F05960((uint64_t *)(v13 + 104), (uint64_t)v17, a2, 0, (uint64_t)a1, v13);
    sub_1B1B68F14((uint64_t)v17);
  }
  v14 = sub_1B1F03804(a1);
  MEMORY[0x1E0C80A78](v14, v15);
  v16[2] = v19;
  sub_1B1DB6708(v20, (uint64_t)sub_1B1C1A9F0, (uint64_t)v16);
  return ecs_stack_allocator_pop_snapshot(*(_QWORD *)(*v12 + 32));
}

uint64_t sub_1B1C0A618(uint64_t a1, __int16 a2, uint64_t a3, unint64_t a4, __n128 a5)
{
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  __n128 v13;
  uint64_t *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  _QWORD v18[4];
  __n128 v19;
  _QWORD v20[5];
  char v21;
  __n128 v22;

  v19 = a5;
  v22 = a5;
  result = sub_1B2162978((uint64_t)&type metadata for Color);
  if ((result & 1) != 0)
  {
    v10 = *(_QWORD *)(a1 + 48);
    v11 = *(_QWORD *)(v10 + 16);
    if (v11)
    {
      v12 = (uint64_t *)(v10 + 56);
      v13 = v19;
      while ((ValueMetadata *)*(v12 - 3) != &type metadata for Color)
      {
        v12 += 5;
        if (!--v11)
          goto LABEL_12;
      }
      v11 = *v12;
    }
    else
    {
      v13 = v19;
    }
LABEL_12:
    *(__n128 *)(*(_QWORD *)(a1 + 128) + v11 + 16 * a2) = v13;
  }
  else
  {
    v19.n128_u64[0] = a4;
    v14 = *(uint64_t **)(a3 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues);
    ecs_stack_allocator_push_snapshot(*(_QWORD *)(*v14 + 32));
    v15 = *v14;
    if (!sub_1B2162978((uint64_t)&type metadata for Color))
    {
      v20[0] = &type metadata for Color;
      v20[1] = &off_1E63BA190;
      v21 = 0;
      sub_1B1F05960((uint64_t *)(v15 + 104), (uint64_t)v20, a2, 0, a1, v15);
      sub_1B1B68F14((uint64_t)v20);
    }
    v16 = sub_1B1F03804((char *)a1);
    MEMORY[0x1E0C80A78](v16, v17);
    v18[2] = &v22;
    sub_1B1DB6730(v19.n128_i64[0], (uint64_t)sub_1B1C23EE4, (uint64_t)v18);
    return ecs_stack_allocator_pop_snapshot(*(_QWORD *)(*v14 + 32));
  }
  return result;
}

uint64_t sub_1B1C0A7D0(uint64_t a1, __int16 a2, uint64_t a3, unint64_t a4, __n128 a5)
{
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  __n128 v13;
  uint64_t *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  _QWORD v18[4];
  __n128 v19;
  _QWORD v20[5];
  char v21;
  __n128 v22;

  v19 = a5;
  v22 = a5;
  result = sub_1B2162978((uint64_t)&type metadata for Orientation);
  if ((result & 1) != 0)
  {
    v10 = *(_QWORD *)(a1 + 48);
    v11 = *(_QWORD *)(v10 + 16);
    if (v11)
    {
      v12 = (uint64_t *)(v10 + 56);
      v13 = v19;
      while ((ValueMetadata *)*(v12 - 3) != &type metadata for Orientation)
      {
        v12 += 5;
        if (!--v11)
          goto LABEL_12;
      }
      v11 = *v12;
    }
    else
    {
      v13 = v19;
    }
LABEL_12:
    *(__n128 *)(*(_QWORD *)(a1 + 128) + v11 + 16 * a2) = v13;
  }
  else
  {
    v19.n128_u64[0] = a4;
    v14 = *(uint64_t **)(a3 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues);
    ecs_stack_allocator_push_snapshot(*(_QWORD *)(*v14 + 32));
    v15 = *v14;
    if (!sub_1B2162978((uint64_t)&type metadata for Orientation))
    {
      v20[0] = &type metadata for Orientation;
      v20[1] = &off_1E6371540;
      v21 = 0;
      sub_1B1F05960((uint64_t *)(v15 + 104), (uint64_t)v20, a2, 0, a1, v15);
      sub_1B1B68F14((uint64_t)v20);
    }
    v16 = sub_1B1F03804((char *)a1);
    MEMORY[0x1E0C80A78](v16, v17);
    v18[2] = &v22;
    sub_1B1DB675C(v19.n128_i64[0], (uint64_t)sub_1B1C1A968, (uint64_t)v18);
    return ecs_stack_allocator_pop_snapshot(*(_QWORD *)(*v14 + 32));
  }
  return result;
}

uint64_t sub_1B1C0A988(uint64_t a1, __int16 a2, uint64_t a3, unint64_t a4, __n128 a5)
{
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  __n128 v13;
  uint64_t *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  _QWORD v18[4];
  __n128 v19;
  _QWORD v20[5];
  char v21;
  __n128 v22;

  v19 = a5;
  v22 = a5;
  result = sub_1B2162978((uint64_t)&type metadata for Position);
  if ((result & 1) != 0)
  {
    v10 = *(_QWORD *)(a1 + 48);
    v11 = *(_QWORD *)(v10 + 16);
    if (v11)
    {
      v12 = (uint64_t *)(v10 + 56);
      v13 = v19;
      while ((ValueMetadata *)*(v12 - 3) != &type metadata for Position)
      {
        v12 += 5;
        if (!--v11)
          goto LABEL_12;
      }
      v11 = *v12;
    }
    else
    {
      v13 = v19;
    }
LABEL_12:
    *(__n128 *)(*(_QWORD *)(a1 + 128) + v11 + 16 * a2) = v13;
  }
  else
  {
    v19.n128_u64[0] = a4;
    v14 = *(uint64_t **)(a3 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues);
    ecs_stack_allocator_push_snapshot(*(_QWORD *)(*v14 + 32));
    v15 = *v14;
    if (!sub_1B2162978((uint64_t)&type metadata for Position))
    {
      v20[0] = &type metadata for Position;
      v20[1] = &off_1E63C2398;
      v21 = 0;
      sub_1B1F05960((uint64_t *)(v15 + 104), (uint64_t)v20, a2, 0, a1, v15);
      sub_1B1B68F14((uint64_t)v20);
    }
    v16 = sub_1B1F03804((char *)a1);
    MEMORY[0x1E0C80A78](v16, v17);
    v18[2] = &v22;
    sub_1B1DB6794(v19.n128_i64[0], (uint64_t)sub_1B1C23EE4, (uint64_t)v18);
    return ecs_stack_allocator_pop_snapshot(*(_QWORD *)(*v14 + 32));
  }
  return result;
}

uint64_t sub_1B1C0AB40(char *a1, __int16 a2, uint64_t a3, unint64_t a4, __n128 a5, __n128 a6, __n128 a7, __n128 a8)
{
  uint64_t *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  _QWORD v17[4];
  __n128 v18;
  __n128 v19;
  __n128 v20;
  __n128 v21;
  _QWORD v22[5];
  char v23;
  _OWORD v24[5];

  v18 = a5;
  v24[0] = a5;
  v24[1] = a6;
  v19 = a6;
  v20 = a7;
  v24[2] = a7;
  v24[3] = a8;
  v21 = a8;
  if (sub_1B1E36538((uint64_t)&type metadata for WorldTransform))
    return sub_1B1FECAE4(a2, v18, v19, v20, v21);
  v20.n128_u64[0] = a4;
  v13 = *(uint64_t **)(a3 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues);
  ecs_stack_allocator_push_snapshot(*(_QWORD *)(*v13 + 32));
  v14 = *v13;
  if (!sub_1B1E36538((uint64_t)&type metadata for WorldTransform))
  {
    v22[0] = &type metadata for WorldTransform;
    v22[1] = &off_1E6382C00;
    v23 = 0;
    sub_1B1F05960((uint64_t *)(v14 + 104), (uint64_t)v22, a2, 0, (uint64_t)a1, v14);
    sub_1B1B68F14((uint64_t)v22);
  }
  v15 = sub_1B1F03804(a1);
  MEMORY[0x1E0C80A78](v15, v16);
  v17[2] = v24;
  sub_1B1DB67C4(v20.n128_i64[0], (uint64_t)sub_1B1C1F65C, (uint64_t)v17);
  return ecs_stack_allocator_pop_snapshot(*(_QWORD *)(*v13 + 32));
}

uint64_t sub_1B1C0ACC8(char *a1, __int16 a2, uint64_t a3, unint64_t a4, __n128 a5, __n128 a6, __n128 a7, __n128 a8)
{
  uint64_t *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  _QWORD v17[4];
  __n128 v18;
  __n128 v19;
  __n128 v20;
  __n128 v21;
  _QWORD v22[5];
  char v23;
  _OWORD v24[5];

  v18 = a5;
  v24[0] = a5;
  v24[1] = a6;
  v19 = a6;
  v20 = a7;
  v24[2] = a7;
  v24[3] = a8;
  v21 = a8;
  if (sub_1B1E36538((uint64_t)&type metadata for InverseWorldTransform))
    return sub_1B1FECB34(a2, v18, v19, v20, v21);
  v20.n128_u64[0] = a4;
  v13 = *(uint64_t **)(a3 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues);
  ecs_stack_allocator_push_snapshot(*(_QWORD *)(*v13 + 32));
  v14 = *v13;
  if (!sub_1B1E36538((uint64_t)&type metadata for InverseWorldTransform))
  {
    v22[0] = &type metadata for InverseWorldTransform;
    v22[1] = &off_1E63A3318;
    v23 = 0;
    sub_1B1F05960((uint64_t *)(v14 + 104), (uint64_t)v22, a2, 0, (uint64_t)a1, v14);
    sub_1B1B68F14((uint64_t)v22);
  }
  v15 = sub_1B1F03804(a1);
  MEMORY[0x1E0C80A78](v15, v16);
  v17[2] = v24;
  sub_1B1DB6800(v20.n128_i64[0], (uint64_t)sub_1B1C1F65C, (uint64_t)v17);
  return ecs_stack_allocator_pop_snapshot(*(_QWORD *)(*v13 + 32));
}

uint64_t sub_1B1C0AE50(char *a1, __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v15[4];
  uint64_t v16;
  _QWORD v17[5];
  char v18;
  uint64_t v19;

  v19 = a3;
  if (sub_1B1E36538((uint64_t)&type metadata for ScriptsHolder))
    return sub_1B1FECB84(a2, a3);
  v16 = a5;
  v11 = *(uint64_t **)(a4 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues);
  ecs_stack_allocator_push_snapshot(*(_QWORD *)(*v11 + 32));
  v12 = *v11;
  if (!sub_1B1E36538((uint64_t)&type metadata for ScriptsHolder))
  {
    v17[0] = &type metadata for ScriptsHolder;
    v17[1] = &off_1E637D158;
    v18 = 0;
    sub_1B1F05960((uint64_t *)(v12 + 104), (uint64_t)v17, a2, 0, (uint64_t)a1, v12);
    sub_1B1B68F14((uint64_t)v17);
  }
  v13 = sub_1B1F03804(a1);
  MEMORY[0x1E0C80A78](v13, v14);
  v15[2] = &v19;
  sub_1B1DB6A78(v16, (uint64_t)sub_1B1C1A954, (uint64_t)v15);
  return ecs_stack_allocator_pop_snapshot(*(_QWORD *)(*v11 + 32));
}

uint64_t sub_1B1C0AFB4(char *a1, __int16 a2, const void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t inited;
  uint64_t *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[4];
  const void *v18;
  uint64_t v19;
  _QWORD v20[5];
  char v21;
  uint64_t v22;

  v22 = a5;
  inited = type metadata accessor for ParticleInitScript(0);
  if (sub_1B1E36538(inited))
    return sub_1B1FDB410(a2, a3, **(_QWORD **)(a4 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues));
  v18 = a3;
  v19 = v5;
  v12 = *(uint64_t **)(a4 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues);
  ecs_stack_allocator_push_snapshot(*(_QWORD *)(*v12 + 32));
  v13 = *v12;
  if (!sub_1B1E36538(inited))
  {
    v20[0] = inited;
    v20[1] = &off_1E6394B78;
    v21 = 0;
    sub_1B1F05960((uint64_t *)(v13 + 104), (uint64_t)v20, a2, 0, (uint64_t)a1, v13);
    sub_1B1B68F14((uint64_t)v20);
  }
  v14 = sub_1B1F03804(a1);
  v16 = *(_QWORD *)(inited - 8);
  if (*(_QWORD *)(v16 + 64))
  {
    if (*(uint64_t *)(v16 + 72) >= 1)
    {
      MEMORY[0x1E0C80A78](v14, v15);
      v17[2] = v18;
      sub_1B1DB6B8C(v22, (uint64_t)sub_1B1C1FE30, (uint64_t)v17);
    }
  }
  return ecs_stack_allocator_pop_snapshot(*(_QWORD *)(*v12 + 32));
}

uint64_t sub_1B1C0B144(char *a1, __int16 a2, const void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t updated;
  uint64_t *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[4];
  const void *v18;
  uint64_t v19;
  _QWORD v20[5];
  char v21;
  uint64_t v22;

  v22 = a5;
  updated = type metadata accessor for ParticleUpdateScript(0);
  if (sub_1B1E36538(updated))
    return sub_1B1FDC390(a2, a3, **(_QWORD **)(a4 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues));
  v18 = a3;
  v19 = v5;
  v12 = *(uint64_t **)(a4 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues);
  ecs_stack_allocator_push_snapshot(*(_QWORD *)(*v12 + 32));
  v13 = *v12;
  if (!sub_1B1E36538(updated))
  {
    v20[0] = updated;
    v20[1] = &off_1E639E488;
    v21 = 0;
    sub_1B1F05960((uint64_t *)(v13 + 104), (uint64_t)v20, a2, 0, (uint64_t)a1, v13);
    sub_1B1B68F14((uint64_t)v20);
  }
  v14 = sub_1B1F03804(a1);
  v16 = *(_QWORD *)(updated - 8);
  if (*(_QWORD *)(v16 + 64))
  {
    if (*(uint64_t *)(v16 + 72) >= 1)
    {
      MEMORY[0x1E0C80A78](v14, v15);
      v17[2] = v18;
      sub_1B1DB6B58(v22, (uint64_t)sub_1B1C1FDE8, (uint64_t)v17);
    }
  }
  return ecs_stack_allocator_pop_snapshot(*(_QWORD *)(*v12 + 32));
}

void sub_1B1C0B2D4(uint64_t a1, __int16 a2, __int128 *a3, uint64_t a4, uint64_t a5)
{
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  _QWORD v18[5];
  char v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _OWORD v27[3];
  uint64_t v28;

  v10 = a3[7];
  v26 = a3[6];
  v27[0] = v10;
  *(_OWORD *)((char *)v27 + 12) = *(__int128 *)((char *)a3 + 124);
  v11 = a3[3];
  v22 = a3[2];
  v23 = v11;
  v12 = a3[5];
  v24 = a3[4];
  v25 = v12;
  v13 = a3[1];
  v20 = *a3;
  v21 = v13;
  sub_1B1A10AA4(*(_QWORD *)(a1 + 40), (uint64_t)&type metadata for ForceField, v18);
  if (LOBYTE(v18[0]) == 1)
  {
    sub_1B1FECC00(a2, (uint64_t)a3);
  }
  else
  {
    v28 = a5;
    v14 = *(uint64_t **)(a4 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues);
    ecs_stack_allocator_push_snapshot(*(_QWORD *)(*v14 + 32));
    v15 = *v14;
    sub_1B1A10AA4(*(_QWORD *)(a1 + 40), (uint64_t)&type metadata for ForceField, v18);
    if ((v18[0] & 1) == 0)
    {
      v18[0] = &type metadata for ForceField;
      v18[1] = &off_1E636DA50;
      v19 = 0;
      sub_1B1F05960((uint64_t *)(v15 + 104), (uint64_t)v18, a2, 0, a1, v15);
      sub_1B1B68F14((uint64_t)v18);
    }
    v16 = sub_1B1F03804((char *)a1);
    MEMORY[0x1E0C80A78](v16, v17);
    sub_1B1DB6DA0(v28, (void (*)(uint64_t))sub_1B1C1FEC0);
    ecs_stack_allocator_pop_snapshot(*(_QWORD *)(*v14 + 32));
  }
}

uint64_t sub_1B1C0B490(uint64_t a1, __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v15[5];
  uint64_t v16;
  _QWORD v17[5];
  char v18;
  uint64_t v19;

  v19 = a3;
  sub_1B1A10AA4(*(_QWORD *)(a1 + 40), (uint64_t)&type metadata for PropagateDirtiness, v17);
  if (LOBYTE(v17[0]) == 1)
    return sub_1B1FECC74(a2, a3);
  v16 = a5;
  v11 = *(uint64_t **)(a4 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues);
  ecs_stack_allocator_push_snapshot(*(_QWORD *)(*v11 + 32));
  v12 = *v11;
  sub_1B1A10AA4(*(_QWORD *)(a1 + 40), (uint64_t)&type metadata for PropagateDirtiness, v17);
  if ((v17[0] & 1) == 0)
  {
    v17[0] = &type metadata for PropagateDirtiness;
    v17[1] = &off_1E6395A98;
    v18 = 0;
    sub_1B1F05960((uint64_t *)(v12 + 104), (uint64_t)v17, a2, 0, a1, v12);
    sub_1B1B68F14((uint64_t)v17);
  }
  v13 = sub_1B1F03804((char *)a1);
  MEMORY[0x1E0C80A78](v13, v14);
  v15[2] = &v19;
  sub_1B1DB6F78(v16, (uint64_t)sub_1B1C1A13C, (uint64_t)v15);
  return ecs_stack_allocator_pop_snapshot(*(_QWORD *)(*v11 + 32));
}

uint64_t sub_1B1C0B614(uint64_t a1, __int16 a2, unsigned int a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  _QWORD v21[4];
  _QWORD v22[5];
  char v23;
  __int16 v24;
  uint64_t v25;
  uint64_t v26;
  __int16 v27;
  char v28;
  uint64_t v29;

  v24 = a3;
  v25 = a4;
  v26 = a5;
  v27 = a6 & 0x101;
  v28 = BYTE2(a6) & 1;
  sub_1B1A10AA4(*(_QWORD *)(a1 + 40), (uint64_t)&type metadata for GraphScriptingConfig, v22);
  if (LOBYTE(v22[0]) == 1)
    return sub_1B1FECCBC(a2, a3, a4, a5, a6 & 0x10101);
  v29 = a8;
  v17 = *(uint64_t **)(a7 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues);
  ecs_stack_allocator_push_snapshot(*(_QWORD *)(*v17 + 32));
  v18 = *v17;
  sub_1B1A10AA4(*(_QWORD *)(a1 + 40), (uint64_t)&type metadata for GraphScriptingConfig, v22);
  if ((v22[0] & 1) == 0)
  {
    v22[0] = &type metadata for GraphScriptingConfig;
    v22[1] = &off_1E639BCE0;
    v23 = 0;
    sub_1B1F05960((uint64_t *)(v18 + 104), (uint64_t)v22, a2, 0, a1, v18);
    sub_1B1B68F14((uint64_t)v22);
  }
  v19 = sub_1B1F03804((char *)a1);
  MEMORY[0x1E0C80A78](v19, v20);
  v21[2] = &v24;
  sub_1B1DB6F44(v29, (uint64_t)sub_1B1C1A034, (uint64_t)v21);
  return ecs_stack_allocator_pop_snapshot(*(_QWORD *)(*v17 + 32));
}

uint64_t sub_1B1C0B7DC(uint64_t a1, __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  _QWORD v17[4];
  _QWORD v18[5];
  char v19;
  _QWORD v20[2];
  uint64_t v21;

  v20[0] = a3;
  v20[1] = a4;
  sub_1B1A10AA4(*(_QWORD *)(a1 + 40), (uint64_t)&type metadata for VFXTag, v18);
  if (LOBYTE(v18[0]) == 1)
    return sub_1B1FECD8C(a2, a3, a4);
  v21 = a6;
  v13 = *(uint64_t **)(a5 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues);
  ecs_stack_allocator_push_snapshot(*(_QWORD *)(*v13 + 32));
  v14 = *v13;
  sub_1B1A10AA4(*(_QWORD *)(a1 + 40), (uint64_t)&type metadata for VFXTag, v18);
  if ((v18[0] & 1) == 0)
  {
    v18[0] = &type metadata for VFXTag;
    v18[1] = &off_1E63BD620;
    v19 = 0;
    sub_1B1F05960((uint64_t *)(v14 + 104), (uint64_t)v18, a2, 0, a1, v14);
    sub_1B1B68F14((uint64_t)v18);
  }
  v15 = sub_1B1F03804((char *)a1);
  MEMORY[0x1E0C80A78](v15, v16);
  v17[2] = v20;
  sub_1B1DB6FAC(v21, (uint64_t)sub_1B1C1A9F0, (uint64_t)v17);
  return ecs_stack_allocator_pop_snapshot(*(_QWORD *)(*v13 + 32));
}

uint64_t sub_1B1C0B968(uint64_t a1, __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[5];
  uint64_t v19;
  _QWORD v20[5];
  char v21;
  uint64_t v22;

  sub_1B1A1B6FC(0, &qword_1ED4BB250, type metadata accessor for TriggerScript, (uint64_t)&off_1ED4BEFD8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptRuntime);
  v11 = v10;
  sub_1B1A10AA4(*(_QWORD *)(a1 + 40), v10, v20);
  if (LOBYTE(v20[0]) == 1)
    return sub_1B1FECE10(a2, a3);
  v19 = a5;
  v22 = a4;
  v13 = *(uint64_t **)(a4 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues);
  ecs_stack_allocator_push_snapshot(*(_QWORD *)(*v13 + 32));
  v14 = *v13;
  sub_1B1A10AA4(*(_QWORD *)(a1 + 40), v11, v20);
  if ((v20[0] & 1) == 0)
  {
    v20[0] = v11;
    v20[1] = &off_1E637D0A8;
    v21 = 0;
    sub_1B1F05960((uint64_t *)(v14 + 104), (uint64_t)v20, a2, 0, a1, v14);
    sub_1B1B68F14((uint64_t)v20);
  }
  v15 = sub_1B1F03804((char *)a1);
  v17 = *(_QWORD *)(v11 - 8);
  if (*(_QWORD *)(v17 + 64))
  {
    if (*(uint64_t *)(v17 + 72) >= 1)
    {
      MEMORY[0x1E0C80A78](v15, v16);
      v18[2] = a3;
      sub_1B1DB700C(v19, (uint64_t)sub_1B1C1A158, (uint64_t)v18);
    }
  }
  return ecs_stack_allocator_pop_snapshot(*(_QWORD *)(*v13 + 32));
}

uint64_t sub_1B1C0BB24(uint64_t a1, __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  _QWORD v19[4];
  _QWORD v20[5];
  char v21;
  _QWORD v22[2];
  uint64_t v23;

  v22[0] = a3;
  v22[1] = a4;
  sub_1B1A1B6FC(0, &qword_1ED4BB3C0, type metadata accessor for TriggerScript, (uint64_t)&off_1ED4BEFD8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptStateRestoration);
  v13 = v12;
  sub_1B1A10AA4(*(_QWORD *)(a1 + 40), v12, v20);
  if (LOBYTE(v20[0]) == 1)
    return sub_1B1FECE2C(a2, a3, a4);
  v23 = a6;
  v15 = *(uint64_t **)(a5 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues);
  ecs_stack_allocator_push_snapshot(*(_QWORD *)(*v15 + 32));
  v16 = *v15;
  sub_1B1A10AA4(*(_QWORD *)(a1 + 40), v13, v20);
  if ((v20[0] & 1) == 0)
  {
    v20[0] = v13;
    v20[1] = &off_1E63A95C8;
    v21 = 0;
    sub_1B1F05960((uint64_t *)(v16 + 104), (uint64_t)v20, a2, 0, a1, v16);
    sub_1B1B68F14((uint64_t)v20);
  }
  v17 = sub_1B1F03804((char *)a1);
  MEMORY[0x1E0C80A78](v17, v18);
  v19[2] = v22;
  sub_1B1DB6FD8(v23, (uint64_t)sub_1B1C23ED0, (uint64_t)v19);
  return ecs_stack_allocator_pop_snapshot(*(_QWORD *)(*v15 + 32));
}

uint64_t sub_1B1C0BCD8(uint64_t a1, __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[5];
  uint64_t v19;
  _QWORD v20[5];
  char v21;
  uint64_t v22;

  sub_1B1A1B6FC(0, &qword_1ED4B88A0, type metadata accessor for ParticleUpdateScript, (uint64_t)&off_1ED4BD280, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptRuntime);
  v11 = v10;
  sub_1B1A10AA4(*(_QWORD *)(a1 + 40), v10, v20);
  if (LOBYTE(v20[0]) == 1)
    return sub_1B1FECE48(a2, a3);
  v19 = a5;
  v22 = a4;
  v13 = *(uint64_t **)(a4 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues);
  ecs_stack_allocator_push_snapshot(*(_QWORD *)(*v13 + 32));
  v14 = *v13;
  sub_1B1A10AA4(*(_QWORD *)(a1 + 40), v11, v20);
  if ((v20[0] & 1) == 0)
  {
    v20[0] = v11;
    v20[1] = &off_1E637D0A8;
    v21 = 0;
    sub_1B1F05960((uint64_t *)(v14 + 104), (uint64_t)v20, a2, 0, a1, v14);
    sub_1B1B68F14((uint64_t)v20);
  }
  v15 = sub_1B1F03804((char *)a1);
  v17 = *(_QWORD *)(v11 - 8);
  if (*(_QWORD *)(v17 + 64))
  {
    if (*(uint64_t *)(v17 + 72) >= 1)
    {
      MEMORY[0x1E0C80A78](v15, v16);
      v18[2] = a3;
      sub_1B1DB7074(v19, (uint64_t)sub_1B1C1A20C, (uint64_t)v18);
    }
  }
  return ecs_stack_allocator_pop_snapshot(*(_QWORD *)(*v13 + 32));
}

uint64_t sub_1B1C0BE94(uint64_t a1, __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  _QWORD v19[4];
  _QWORD v20[5];
  char v21;
  _QWORD v22[2];
  uint64_t v23;

  v22[0] = a3;
  v22[1] = a4;
  sub_1B1A1B6FC(0, (unint64_t *)&unk_1ED4B9910, type metadata accessor for ParticleUpdateScript, (uint64_t)&off_1ED4BD280, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptStateRestoration);
  v13 = v12;
  sub_1B1A10AA4(*(_QWORD *)(a1 + 40), v12, v20);
  if (LOBYTE(v20[0]) == 1)
    return sub_1B1FECE64(a2, a3, a4);
  v23 = a6;
  v15 = *(uint64_t **)(a5 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues);
  ecs_stack_allocator_push_snapshot(*(_QWORD *)(*v15 + 32));
  v16 = *v15;
  sub_1B1A10AA4(*(_QWORD *)(a1 + 40), v13, v20);
  if ((v20[0] & 1) == 0)
  {
    v20[0] = v13;
    v20[1] = &off_1E63A95C8;
    v21 = 0;
    sub_1B1F05960((uint64_t *)(v16 + 104), (uint64_t)v20, a2, 0, a1, v16);
    sub_1B1B68F14((uint64_t)v20);
  }
  v17 = sub_1B1F03804((char *)a1);
  MEMORY[0x1E0C80A78](v17, v18);
  v19[2] = v22;
  sub_1B1DB7040(v23, (uint64_t)sub_1B1C23ED0, (uint64_t)v19);
  return ecs_stack_allocator_pop_snapshot(*(_QWORD *)(*v15 + 32));
}

uint64_t sub_1B1C0C048(uint64_t a1, __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[5];
  uint64_t v19;
  _QWORD v20[5];
  char v21;
  uint64_t v22;

  sub_1B1A1B6FC(0, &qword_1ED4B8890, type metadata accessor for ParticleInitScript, (uint64_t)&off_1ED4BCD90, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptRuntime);
  v11 = v10;
  sub_1B1A10AA4(*(_QWORD *)(a1 + 40), v10, v20);
  if (LOBYTE(v20[0]) == 1)
    return sub_1B1FECF38(a2, a3);
  v19 = a5;
  v22 = a4;
  v13 = *(uint64_t **)(a4 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues);
  ecs_stack_allocator_push_snapshot(*(_QWORD *)(*v13 + 32));
  v14 = *v13;
  sub_1B1A10AA4(*(_QWORD *)(a1 + 40), v11, v20);
  if ((v20[0] & 1) == 0)
  {
    v20[0] = v11;
    v20[1] = &off_1E637D0A8;
    v21 = 0;
    sub_1B1F05960((uint64_t *)(v14 + 104), (uint64_t)v20, a2, 0, a1, v14);
    sub_1B1B68F14((uint64_t)v20);
  }
  v15 = sub_1B1F03804((char *)a1);
  v17 = *(_QWORD *)(v11 - 8);
  if (*(_QWORD *)(v17 + 64))
  {
    if (*(uint64_t *)(v17 + 72) >= 1)
    {
      MEMORY[0x1E0C80A78](v15, v16);
      v18[2] = a3;
      sub_1B1DB70DC(v19, (uint64_t)sub_1B1C1A29C, (uint64_t)v18);
    }
  }
  return ecs_stack_allocator_pop_snapshot(*(_QWORD *)(*v13 + 32));
}

uint64_t sub_1B1C0C204(uint64_t a1, __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  _QWORD v19[4];
  _QWORD v20[5];
  char v21;
  _QWORD v22[2];
  uint64_t v23;

  v22[0] = a3;
  v22[1] = a4;
  sub_1B1A1B6FC(0, (unint64_t *)&unk_1ED4B9900, type metadata accessor for ParticleInitScript, (uint64_t)&off_1ED4BCD90, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptStateRestoration);
  v13 = v12;
  sub_1B1A10AA4(*(_QWORD *)(a1 + 40), v12, v20);
  if (LOBYTE(v20[0]) == 1)
    return sub_1B1FECF54(a2, a3, a4);
  v23 = a6;
  v15 = *(uint64_t **)(a5 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues);
  ecs_stack_allocator_push_snapshot(*(_QWORD *)(*v15 + 32));
  v16 = *v15;
  sub_1B1A10AA4(*(_QWORD *)(a1 + 40), v13, v20);
  if ((v20[0] & 1) == 0)
  {
    v20[0] = v13;
    v20[1] = &off_1E63A95C8;
    v21 = 0;
    sub_1B1F05960((uint64_t *)(v16 + 104), (uint64_t)v20, a2, 0, a1, v16);
    sub_1B1B68F14((uint64_t)v20);
  }
  v17 = sub_1B1F03804((char *)a1);
  MEMORY[0x1E0C80A78](v17, v18);
  v19[2] = v22;
  sub_1B1DB70A8(v23, (uint64_t)sub_1B1C1A284, (uint64_t)v19);
  return ecs_stack_allocator_pop_snapshot(*(_QWORD *)(*v15 + 32));
}

uint64_t sub_1B1C0C3B8(uint64_t a1, __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[5];
  uint64_t v19;
  _QWORD v20[5];
  char v21;
  uint64_t v22;

  sub_1B1A1B6FC(0, (unint64_t *)&qword_1ED4B88C0, type metadata accessor for ShaderScript, (uint64_t)&off_1ED4BC090, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptRuntime);
  v11 = v10;
  sub_1B1A10AA4(*(_QWORD *)(a1 + 40), v10, v20);
  if (LOBYTE(v20[0]) == 1)
    return sub_1B1FECF70(a2, a3);
  v19 = a5;
  v22 = a4;
  v13 = *(uint64_t **)(a4 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues);
  ecs_stack_allocator_push_snapshot(*(_QWORD *)(*v13 + 32));
  v14 = *v13;
  sub_1B1A10AA4(*(_QWORD *)(a1 + 40), v11, v20);
  if ((v20[0] & 1) == 0)
  {
    v20[0] = v11;
    v20[1] = &off_1E637D0A8;
    v21 = 0;
    sub_1B1F05960((uint64_t *)(v14 + 104), (uint64_t)v20, a2, 0, a1, v14);
    sub_1B1B68F14((uint64_t)v20);
  }
  v15 = sub_1B1F03804((char *)a1);
  v17 = *(_QWORD *)(v11 - 8);
  if (*(_QWORD *)(v17 + 64))
  {
    if (*(uint64_t *)(v17 + 72) >= 1)
    {
      MEMORY[0x1E0C80A78](v15, v16);
      v18[2] = a3;
      sub_1B1DB7144(v19, (uint64_t)sub_1B1C1A314, (uint64_t)v18);
    }
  }
  return ecs_stack_allocator_pop_snapshot(*(_QWORD *)(*v13 + 32));
}

uint64_t sub_1B1C0C574(uint64_t a1, __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  _QWORD v19[4];
  _QWORD v20[5];
  char v21;
  _QWORD v22[2];
  uint64_t v23;

  v22[0] = a3;
  v22[1] = a4;
  sub_1B1A1B6FC(0, (unint64_t *)&unk_1ED4B9930, type metadata accessor for ShaderScript, (uint64_t)&off_1ED4BC090, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptStateRestoration);
  v13 = v12;
  sub_1B1A10AA4(*(_QWORD *)(a1 + 40), v12, v20);
  if (LOBYTE(v20[0]) == 1)
    return sub_1B1FECF8C(a2, a3, a4);
  v23 = a6;
  v15 = *(uint64_t **)(a5 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues);
  ecs_stack_allocator_push_snapshot(*(_QWORD *)(*v15 + 32));
  v16 = *v15;
  sub_1B1A10AA4(*(_QWORD *)(a1 + 40), v13, v20);
  if ((v20[0] & 1) == 0)
  {
    v20[0] = v13;
    v20[1] = &off_1E63A95C8;
    v21 = 0;
    sub_1B1F05960((uint64_t *)(v16 + 104), (uint64_t)v20, a2, 0, a1, v16);
    sub_1B1B68F14((uint64_t)v20);
  }
  v17 = sub_1B1F03804((char *)a1);
  MEMORY[0x1E0C80A78](v17, v18);
  v19[2] = v22;
  sub_1B1DB7110(v23, (uint64_t)sub_1B1C23ED0, (uint64_t)v19);
  return ecs_stack_allocator_pop_snapshot(*(_QWORD *)(*v15 + 32));
}

uint64_t sub_1B1C0C728(uint64_t a1, __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[5];
  uint64_t v19;
  _QWORD v20[5];
  char v21;
  uint64_t v22;

  sub_1B1A1B6FC(0, (unint64_t *)&qword_1ED4BB240, type metadata accessor for MetalFunctionScript, (uint64_t)&off_1ED4BF0F8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptRuntime);
  v11 = v10;
  sub_1B1A10AA4(*(_QWORD *)(a1 + 40), v10, v20);
  if (LOBYTE(v20[0]) == 1)
    return sub_1B1FECFA8(a2, a3);
  v19 = a5;
  v22 = a4;
  v13 = *(uint64_t **)(a4 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues);
  ecs_stack_allocator_push_snapshot(*(_QWORD *)(*v13 + 32));
  v14 = *v13;
  sub_1B1A10AA4(*(_QWORD *)(a1 + 40), v11, v20);
  if ((v20[0] & 1) == 0)
  {
    v20[0] = v11;
    v20[1] = &off_1E637D0A8;
    v21 = 0;
    sub_1B1F05960((uint64_t *)(v14 + 104), (uint64_t)v20, a2, 0, a1, v14);
    sub_1B1B68F14((uint64_t)v20);
  }
  v15 = sub_1B1F03804((char *)a1);
  v17 = *(_QWORD *)(v11 - 8);
  if (*(_QWORD *)(v17 + 64))
  {
    if (*(uint64_t *)(v17 + 72) >= 1)
    {
      MEMORY[0x1E0C80A78](v15, v16);
      v18[2] = a3;
      sub_1B1DB71AC(v19, (uint64_t)sub_1B1C1A38C, (uint64_t)v18);
    }
  }
  return ecs_stack_allocator_pop_snapshot(*(_QWORD *)(*v13 + 32));
}

uint64_t sub_1B1C0C8E4(uint64_t a1, __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  _QWORD v19[4];
  _QWORD v20[5];
  char v21;
  _QWORD v22[2];
  uint64_t v23;

  v22[0] = a3;
  v22[1] = a4;
  sub_1B1A1B6FC(0, (unint64_t *)&unk_1ED4BB3B0, type metadata accessor for MetalFunctionScript, (uint64_t)&off_1ED4BF0F8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptStateRestoration);
  v13 = v12;
  sub_1B1A10AA4(*(_QWORD *)(a1 + 40), v12, v20);
  if (LOBYTE(v20[0]) == 1)
    return sub_1B1FECFC4(a2, a3, a4);
  v23 = a6;
  v15 = *(uint64_t **)(a5 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues);
  ecs_stack_allocator_push_snapshot(*(_QWORD *)(*v15 + 32));
  v16 = *v15;
  sub_1B1A10AA4(*(_QWORD *)(a1 + 40), v13, v20);
  if ((v20[0] & 1) == 0)
  {
    v20[0] = v13;
    v20[1] = &off_1E63A95C8;
    v21 = 0;
    sub_1B1F05960((uint64_t *)(v16 + 104), (uint64_t)v20, a2, 0, a1, v16);
    sub_1B1B68F14((uint64_t)v20);
  }
  v17 = sub_1B1F03804((char *)a1);
  MEMORY[0x1E0C80A78](v17, v18);
  v19[2] = v22;
  sub_1B1DB7178(v23, (uint64_t)sub_1B1C23ED0, (uint64_t)v19);
  return ecs_stack_allocator_pop_snapshot(*(_QWORD *)(*v15 + 32));
}

uint64_t sub_1B1C0CA98(uint64_t a1, __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[5];
  uint64_t v19;
  _QWORD v20[5];
  char v21;
  uint64_t v22;

  sub_1B1A1B6FC(0, (unint64_t *)&unk_1ED4B88D0, type metadata accessor for SimpleScript, (uint64_t)&off_1ED4BC1D8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptRuntime);
  v11 = v10;
  sub_1B1A10AA4(*(_QWORD *)(a1 + 40), v10, v20);
  if (LOBYTE(v20[0]) == 1)
    return sub_1B1FECFE0(a2, a3);
  v19 = a5;
  v22 = a4;
  v13 = *(uint64_t **)(a4 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues);
  ecs_stack_allocator_push_snapshot(*(_QWORD *)(*v13 + 32));
  v14 = *v13;
  sub_1B1A10AA4(*(_QWORD *)(a1 + 40), v11, v20);
  if ((v20[0] & 1) == 0)
  {
    v20[0] = v11;
    v20[1] = &off_1E637D0A8;
    v21 = 0;
    sub_1B1F05960((uint64_t *)(v14 + 104), (uint64_t)v20, a2, 0, a1, v14);
    sub_1B1B68F14((uint64_t)v20);
  }
  v15 = sub_1B1F03804((char *)a1);
  v17 = *(_QWORD *)(v11 - 8);
  if (*(_QWORD *)(v17 + 64))
  {
    if (*(uint64_t *)(v17 + 72) >= 1)
    {
      MEMORY[0x1E0C80A78](v15, v16);
      v18[2] = a3;
      sub_1B1DB7214(v19, (uint64_t)sub_1B1C1A404, (uint64_t)v18);
    }
  }
  return ecs_stack_allocator_pop_snapshot(*(_QWORD *)(*v13 + 32));
}

uint64_t sub_1B1C0CC54(uint64_t a1, __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  _QWORD v19[4];
  _QWORD v20[5];
  char v21;
  _QWORD v22[2];
  uint64_t v23;

  v22[0] = a3;
  v22[1] = a4;
  sub_1B1A1B6FC(0, (unint64_t *)&unk_1ED4B9940, type metadata accessor for SimpleScript, (uint64_t)&off_1ED4BC1D8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptStateRestoration);
  v13 = v12;
  sub_1B1A10AA4(*(_QWORD *)(a1 + 40), v12, v20);
  if (LOBYTE(v20[0]) == 1)
    return sub_1B1FECFFC(a2, a3, a4);
  v23 = a6;
  v15 = *(uint64_t **)(a5 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues);
  ecs_stack_allocator_push_snapshot(*(_QWORD *)(*v15 + 32));
  v16 = *v15;
  sub_1B1A10AA4(*(_QWORD *)(a1 + 40), v13, v20);
  if ((v20[0] & 1) == 0)
  {
    v20[0] = v13;
    v20[1] = &off_1E63A95C8;
    v21 = 0;
    sub_1B1F05960((uint64_t *)(v16 + 104), (uint64_t)v20, a2, 0, a1, v16);
    sub_1B1B68F14((uint64_t)v20);
  }
  v17 = sub_1B1F03804((char *)a1);
  MEMORY[0x1E0C80A78](v17, v18);
  v19[2] = v22;
  sub_1B1DB71E0(v23, (uint64_t)sub_1B1C23ED0, (uint64_t)v19);
  return ecs_stack_allocator_pop_snapshot(*(_QWORD *)(*v15 + 32));
}

uint64_t sub_1B1C0CE08(uint64_t a1, __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[5];
  uint64_t v19;
  _QWORD v20[5];
  char v21;
  uint64_t v22;

  sub_1B1A1B6FC(0, (unint64_t *)&unk_1ED4B88B0, type metadata accessor for GraphScript, (uint64_t)&off_1ED4BBD80, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptRuntime);
  v11 = v10;
  sub_1B1A10AA4(*(_QWORD *)(a1 + 40), v10, v20);
  if (LOBYTE(v20[0]) == 1)
    return sub_1B1FED018(a2, a3);
  v19 = a5;
  v22 = a4;
  v13 = *(uint64_t **)(a4 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues);
  ecs_stack_allocator_push_snapshot(*(_QWORD *)(*v13 + 32));
  v14 = *v13;
  sub_1B1A10AA4(*(_QWORD *)(a1 + 40), v11, v20);
  if ((v20[0] & 1) == 0)
  {
    v20[0] = v11;
    v20[1] = &off_1E637D0A8;
    v21 = 0;
    sub_1B1F05960((uint64_t *)(v14 + 104), (uint64_t)v20, a2, 0, a1, v14);
    sub_1B1B68F14((uint64_t)v20);
  }
  v15 = sub_1B1F03804((char *)a1);
  v17 = *(_QWORD *)(v11 - 8);
  if (*(_QWORD *)(v17 + 64))
  {
    if (*(uint64_t *)(v17 + 72) >= 1)
    {
      MEMORY[0x1E0C80A78](v15, v16);
      v18[2] = a3;
      sub_1B1DB727C(v19, (uint64_t)sub_1B1C1A47C, (uint64_t)v18);
    }
  }
  return ecs_stack_allocator_pop_snapshot(*(_QWORD *)(*v13 + 32));
}

uint64_t sub_1B1C0CFC4(uint64_t a1, __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  _QWORD v19[4];
  _QWORD v20[5];
  char v21;
  _QWORD v22[2];
  uint64_t v23;

  v22[0] = a3;
  v22[1] = a4;
  sub_1B1A1B6FC(0, (unint64_t *)&unk_1ED4B9920, type metadata accessor for GraphScript, (uint64_t)&off_1ED4BBD80, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptStateRestoration);
  v13 = v12;
  sub_1B1A10AA4(*(_QWORD *)(a1 + 40), v12, v20);
  if (LOBYTE(v20[0]) == 1)
    return sub_1B1FED034(a2, a3, a4);
  v23 = a6;
  v15 = *(uint64_t **)(a5 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues);
  ecs_stack_allocator_push_snapshot(*(_QWORD *)(*v15 + 32));
  v16 = *v15;
  sub_1B1A10AA4(*(_QWORD *)(a1 + 40), v13, v20);
  if ((v20[0] & 1) == 0)
  {
    v20[0] = v13;
    v20[1] = &off_1E63A95C8;
    v21 = 0;
    sub_1B1F05960((uint64_t *)(v16 + 104), (uint64_t)v20, a2, 0, a1, v16);
    sub_1B1B68F14((uint64_t)v20);
  }
  v17 = sub_1B1F03804((char *)a1);
  MEMORY[0x1E0C80A78](v17, v18);
  v19[2] = v22;
  sub_1B1DB7248(v23, (uint64_t)sub_1B1C23ED0, (uint64_t)v19);
  return ecs_stack_allocator_pop_snapshot(*(_QWORD *)(*v15 + 32));
}

uint64_t sub_1B1C0D178(uint64_t a1, __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[5];
  uint64_t v19;
  _QWORD v20[5];
  char v21;
  uint64_t v22;

  sub_1B1A1B6FC(0, (unint64_t *)&unk_1ED4B88E0, type metadata accessor for EmitterScript, (uint64_t)&off_1ED4BC418, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptRuntime);
  v11 = v10;
  sub_1B1A10AA4(*(_QWORD *)(a1 + 40), v10, v20);
  if (LOBYTE(v20[0]) == 1)
    return sub_1B1FED050(a2, a3);
  v19 = a5;
  v22 = a4;
  v13 = *(uint64_t **)(a4 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues);
  ecs_stack_allocator_push_snapshot(*(_QWORD *)(*v13 + 32));
  v14 = *v13;
  sub_1B1A10AA4(*(_QWORD *)(a1 + 40), v11, v20);
  if ((v20[0] & 1) == 0)
  {
    v20[0] = v11;
    v20[1] = &off_1E637D0A8;
    v21 = 0;
    sub_1B1F05960((uint64_t *)(v14 + 104), (uint64_t)v20, a2, 0, a1, v14);
    sub_1B1B68F14((uint64_t)v20);
  }
  v15 = sub_1B1F03804((char *)a1);
  v17 = *(_QWORD *)(v11 - 8);
  if (*(_QWORD *)(v17 + 64))
  {
    if (*(uint64_t *)(v17 + 72) >= 1)
    {
      MEMORY[0x1E0C80A78](v15, v16);
      v18[2] = a3;
      sub_1B1DB72E4(v19, (uint64_t)sub_1B1C1A4F4, (uint64_t)v18);
    }
  }
  return ecs_stack_allocator_pop_snapshot(*(_QWORD *)(*v13 + 32));
}

uint64_t sub_1B1C0D334(uint64_t a1, __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  _QWORD v19[4];
  _QWORD v20[5];
  char v21;
  _QWORD v22[2];
  uint64_t v23;

  v22[0] = a3;
  v22[1] = a4;
  sub_1B1A1B6FC(0, &qword_1ED4B9950, type metadata accessor for EmitterScript, (uint64_t)&off_1ED4BC418, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptStateRestoration);
  v13 = v12;
  sub_1B1A10AA4(*(_QWORD *)(a1 + 40), v12, v20);
  if (LOBYTE(v20[0]) == 1)
    return sub_1B1FED124(a2, a3, a4);
  v23 = a6;
  v15 = *(uint64_t **)(a5 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues);
  ecs_stack_allocator_push_snapshot(*(_QWORD *)(*v15 + 32));
  v16 = *v15;
  sub_1B1A10AA4(*(_QWORD *)(a1 + 40), v13, v20);
  if ((v20[0] & 1) == 0)
  {
    v20[0] = v13;
    v20[1] = &off_1E63A95C8;
    v21 = 0;
    sub_1B1F05960((uint64_t *)(v16 + 104), (uint64_t)v20, a2, 0, a1, v16);
    sub_1B1B68F14((uint64_t)v20);
  }
  v17 = sub_1B1F03804((char *)a1);
  MEMORY[0x1E0C80A78](v17, v18);
  v19[2] = v22;
  sub_1B1DB72B0(v23, (uint64_t)sub_1B1C23ED0, (uint64_t)v19);
  return ecs_stack_allocator_pop_snapshot(*(_QWORD *)(*v15 + 32));
}

void sub_1B1C0D4E8(uint64_t a1, __int16 a2, __int128 *a3, uint64_t a4, uint64_t a5)
{
  __int128 v10;
  __int128 v11;
  uint64_t *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  _QWORD v16[5];
  char v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;

  v10 = a3[3];
  v20 = a3[2];
  v21 = v10;
  v22 = a3[4];
  v11 = a3[1];
  v18 = *a3;
  v19 = v11;
  sub_1B1A10AA4(*(_QWORD *)(a1 + 40), (uint64_t)&type metadata for SkinnedMeshBinding, v16);
  if (LOBYTE(v16[0]) == 1)
  {
    sub_1B1FED140(a2, (uint64_t)a3);
  }
  else
  {
    v23 = a5;
    v12 = *(uint64_t **)(a4 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues);
    ecs_stack_allocator_push_snapshot(*(_QWORD *)(*v12 + 32));
    v13 = *v12;
    sub_1B1A10AA4(*(_QWORD *)(a1 + 40), (uint64_t)&type metadata for SkinnedMeshBinding, v16);
    if ((v16[0] & 1) == 0)
    {
      v16[0] = &type metadata for SkinnedMeshBinding;
      v16[1] = &off_1E6395D68;
      v17 = 0;
      sub_1B1F05960((uint64_t *)(v13 + 104), (uint64_t)v16, a2, 0, a1, v13);
      sub_1B1B68F14((uint64_t)v16);
    }
    v14 = sub_1B1F03804((char *)a1);
    MEMORY[0x1E0C80A78](v14, v15);
    sub_1B1DB79CC(v23, (void (*)(uint64_t))sub_1B1C1F568);
    ecs_stack_allocator_pop_snapshot(*(_QWORD *)(*v12 + 32));
  }
}

void sub_1B1C0D680(uint64_t a1, __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __int128 v10;
  uint64_t *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v15[4];
  _QWORD v16[5];
  char v17;
  _OWORD v18[2];
  uint64_t v19;
  uint64_t v20;

  v10 = *(_OWORD *)(a3 + 16);
  v18[0] = *(_OWORD *)a3;
  v18[1] = v10;
  v19 = *(_QWORD *)(a3 + 32);
  sub_1B1A10AA4(*(_QWORD *)(a1 + 40), (uint64_t)&type metadata for Skeleton, v16);
  if (LOBYTE(v16[0]) == 1)
  {
    sub_1B1FED1A4(a2, (__n128 *)a3);
  }
  else
  {
    v20 = a5;
    v11 = *(uint64_t **)(a4 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues);
    ecs_stack_allocator_push_snapshot(*(_QWORD *)(*v11 + 32));
    v12 = *v11;
    sub_1B1A10AA4(*(_QWORD *)(a1 + 40), (uint64_t)&type metadata for Skeleton, v16);
    if ((v16[0] & 1) == 0)
    {
      v16[0] = &type metadata for Skeleton;
      v16[1] = &off_1E63C2C18;
      v17 = 0;
      sub_1B1F05960((uint64_t *)(v12 + 104), (uint64_t)v16, a2, 0, a1, v12);
      sub_1B1B68F14((uint64_t)v16);
    }
    v13 = sub_1B1F03804((char *)a1);
    MEMORY[0x1E0C80A78](v13, v14);
    v15[2] = v18;
    sub_1B1DB799C(v20, (uint64_t)sub_1B1C1F588, (uint64_t)v15);
    ecs_stack_allocator_pop_snapshot(*(_QWORD *)(*v11 + 32));
  }
}

uint64_t sub_1B1C0D810(uint64_t a1, __int16 a2, uint64_t a3, unint64_t a4, __n128 a5)
{
  uint64_t *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  _QWORD v14[4];
  __n128 v15;
  _QWORD v16[5];
  char v17;
  __n128 v18;

  v15 = a5;
  v18 = a5;
  sub_1B1A10AA4(*(_QWORD *)(a1 + 40), (uint64_t)&type metadata for Scale3, v16);
  if (LOBYTE(v16[0]) == 1)
    return sub_1B1FED2B8(a2, v15);
  v15.n128_u64[0] = a4;
  v10 = *(uint64_t **)(a3 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues);
  ecs_stack_allocator_push_snapshot(*(_QWORD *)(*v10 + 32));
  v11 = *v10;
  sub_1B1A10AA4(*(_QWORD *)(a1 + 40), (uint64_t)&type metadata for Scale3, v16);
  if ((v16[0] & 1) == 0)
  {
    v16[0] = &type metadata for Scale3;
    v16[1] = &off_1E63BC558;
    v17 = 0;
    sub_1B1F05960((uint64_t *)(v11 + 104), (uint64_t)v16, a2, 0, a1, v11);
    sub_1B1B68F14((uint64_t)v16);
  }
  v12 = sub_1B1F03804((char *)a1);
  MEMORY[0x1E0C80A78](v12, v13);
  v14[2] = &v18;
  sub_1B1DB77C8(v15.n128_i64[0], (uint64_t)sub_1B1C23EE4, (uint64_t)v14);
  return ecs_stack_allocator_pop_snapshot(*(_QWORD *)(*v10 + 32));
}

uint64_t sub_1B1C0D994(uint64_t a1, __int16 a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v15[5];
  uint64_t v16;
  _QWORD v17[5];
  char v18;
  unint64_t v19;

  v19 = a3;
  sub_1B1A10AA4(*(_QWORD *)(a1 + 40), (uint64_t)&type metadata for Parent, v17);
  if (LOBYTE(v17[0]) == 1)
    return sub_1B1FDDA24(a2, a3);
  v16 = a5;
  v11 = *(uint64_t **)(a4 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues);
  ecs_stack_allocator_push_snapshot(*(_QWORD *)(*v11 + 32));
  v12 = *v11;
  sub_1B1A10AA4(*(_QWORD *)(a1 + 40), (uint64_t)&type metadata for Parent, v17);
  if ((v17[0] & 1) == 0)
  {
    v17[0] = &type metadata for Parent;
    v17[1] = &off_1E63BB8E8;
    v18 = 0;
    sub_1B1F05960((uint64_t *)(v12 + 104), (uint64_t)v17, a2, 0, a1, v12);
    sub_1B1B68F14((uint64_t)v17);
  }
  v13 = sub_1B1F03804((char *)a1);
  MEMORY[0x1E0C80A78](v13, v14);
  v15[2] = &v19;
  sub_1B1DB779C(v16, (uint64_t)sub_1B1C23EBC, (uint64_t)v15);
  return ecs_stack_allocator_pop_snapshot(*(_QWORD *)(*v11 + 32));
}

uint64_t sub_1B1C0DB2C(uint64_t a1, __int16 a2, unint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  _QWORD v17[4];
  _QWORD v18[5];
  char v19;
  _QWORD v20[2];
  uint64_t v21;

  v20[0] = a3;
  v20[1] = a4;
  sub_1B1A10AA4(*(_QWORD *)(a1 + 40), (uint64_t)&type metadata for ModelRenderer, v18);
  if (LOBYTE(v18[0]) == 1)
    return sub_1B1FD9E04(a2, a3, a4);
  v21 = a6;
  v13 = *(uint64_t **)(a5 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues);
  ecs_stack_allocator_push_snapshot(*(_QWORD *)(*v13 + 32));
  v14 = *v13;
  sub_1B1A10AA4(*(_QWORD *)(a1 + 40), (uint64_t)&type metadata for ModelRenderer, v18);
  if ((v18[0] & 1) == 0)
  {
    v18[0] = &type metadata for ModelRenderer;
    v18[1] = &off_1E637B750;
    v19 = 0;
    sub_1B1F05960((uint64_t *)(v14 + 104), (uint64_t)v18, a2, 0, a1, v14);
    sub_1B1B68F14((uint64_t)v18);
  }
  v15 = sub_1B1F03804((char *)a1);
  MEMORY[0x1E0C80A78](v15, v16);
  v17[2] = v20;
  sub_1B1DB75E8(v21, (void (*)(__int128 *))sub_1B1C1A968, (uint64_t)v17);
  return ecs_stack_allocator_pop_snapshot(*(_QWORD *)(*v13 + 32));
}

uint64_t sub_1B1C0DCD8(uint64_t a1, __int16 a2, uint64_t a3, uint64_t a4, float a5)
{
  uint64_t *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v15[5];
  uint64_t v16;
  _QWORD v17[5];
  char v18;
  float v19;

  v19 = a5;
  sub_1B1A10AA4(*(_QWORD *)(a1 + 40), (uint64_t)&type metadata for AmbientLight, v17);
  if (LOBYTE(v17[0]) == 1)
    return sub_1B1FED300(a2, a5);
  v16 = a4;
  v11 = *(uint64_t **)(a3 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues);
  ecs_stack_allocator_push_snapshot(*(_QWORD *)(*v11 + 32));
  v12 = *v11;
  sub_1B1A10AA4(*(_QWORD *)(a1 + 40), (uint64_t)&type metadata for AmbientLight, v17);
  if ((v17[0] & 1) == 0)
  {
    v17[0] = &type metadata for AmbientLight;
    v17[1] = &off_1E6374380;
    v18 = 0;
    sub_1B1F05960((uint64_t *)(v12 + 104), (uint64_t)v17, a2, 0, a1, v12);
    sub_1B1B68F14((uint64_t)v17);
  }
  v13 = sub_1B1F03804((char *)a1);
  MEMORY[0x1E0C80A78](v13, v14);
  v15[2] = &v19;
  sub_1B1DB689C(v16, (uint64_t)sub_1B1C1A990, (uint64_t)v15);
  return ecs_stack_allocator_pop_snapshot(*(_QWORD *)(*v11 + 32));
}

uint64_t sub_1B1C0DE64(uint64_t a1, __int16 a2, uint64_t a3, uint64_t a4, float a5, float a6, float a7, float a8)
{
  uint64_t *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  _QWORD v21[4];
  _QWORD v22[5];
  char v23;
  _DWORD v24[4];
  uint64_t v25;

  *(float *)v24 = a5;
  *(float *)&v24[1] = a6;
  *(float *)&v24[2] = a7;
  *(float *)&v24[3] = a8;
  sub_1B1A10AA4(*(_QWORD *)(a1 + 40), (uint64_t)&type metadata for DirectionalLight, v22);
  if (LOBYTE(v22[0]) == 1)
    return sub_1B1FED348(a2, a5, a6, a7, a8);
  v25 = a4;
  v17 = *(uint64_t **)(a3 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues);
  ecs_stack_allocator_push_snapshot(*(_QWORD *)(*v17 + 32));
  v18 = *v17;
  sub_1B1A10AA4(*(_QWORD *)(a1 + 40), (uint64_t)&type metadata for DirectionalLight, v22);
  if ((v22[0] & 1) == 0)
  {
    v22[0] = &type metadata for DirectionalLight;
    v22[1] = &off_1E6387098;
    v23 = 0;
    sub_1B1F05960((uint64_t *)(v18 + 104), (uint64_t)v22, a2, 0, a1, v18);
    sub_1B1B68F14((uint64_t)v22);
  }
  v19 = sub_1B1F03804((char *)a1);
  MEMORY[0x1E0C80A78](v19, v20);
  v21[2] = v24;
  sub_1B1DB6834(v25, (uint64_t)sub_1B1C23EE4, (uint64_t)v21);
  return ecs_stack_allocator_pop_snapshot(*(_QWORD *)(*v17 + 32));
}

void sub_1B1C0E014(uint64_t a1, __int16 a2, __n128 *a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  _QWORD v14[5];
  char v15;
  __n128 v16;
  unint64_t v17;
  uint64_t v18;

  v16 = *a3;
  v17 = a3[1].n128_u64[0];
  sub_1B1A10AA4(*(_QWORD *)(a1 + 40), (uint64_t)&type metadata for SpotLight, v14);
  if (LOBYTE(v14[0]) == 1)
  {
    sub_1B1FED398(a2, a3);
  }
  else
  {
    v18 = a5;
    v10 = *(uint64_t **)(a4 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues);
    ecs_stack_allocator_push_snapshot(*(_QWORD *)(*v10 + 32));
    v11 = *v10;
    sub_1B1A10AA4(*(_QWORD *)(a1 + 40), (uint64_t)&type metadata for SpotLight, v14);
    if ((v14[0] & 1) == 0)
    {
      v14[0] = &type metadata for SpotLight;
      v14[1] = &off_1E63C5190;
      v15 = 0;
      sub_1B1F05960((uint64_t *)(v11 + 104), (uint64_t)v14, a2, 0, a1, v11);
      sub_1B1B68F14((uint64_t)v14);
    }
    v12 = sub_1B1F03804((char *)a1);
    MEMORY[0x1E0C80A78](v12, v13);
    sub_1B1DB68D4(v18, (void (*)(uint64_t))sub_1B1C1A978);
    ecs_stack_allocator_pop_snapshot(*(_QWORD *)(*v10 + 32));
  }
}

uint64_t sub_1B1C0E1A4(uint64_t a1, __int16 a2, uint64_t a3, uint64_t a4, float a5, float a6, float a7, float a8)
{
  uint64_t *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  _QWORD v21[4];
  _QWORD v22[5];
  char v23;
  _DWORD v24[4];
  uint64_t v25;

  *(float *)v24 = a5;
  *(float *)&v24[1] = a6;
  *(float *)&v24[2] = a7;
  *(float *)&v24[3] = a8;
  sub_1B1A10AA4(*(_QWORD *)(a1 + 40), (uint64_t)&type metadata for PointLight, v22);
  if (LOBYTE(v22[0]) == 1)
    return sub_1B1FED3F4(a2, a5, a6, a7, a8);
  v25 = a4;
  v17 = *(uint64_t **)(a3 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues);
  ecs_stack_allocator_push_snapshot(*(_QWORD *)(*v17 + 32));
  v18 = *v17;
  sub_1B1A10AA4(*(_QWORD *)(a1 + 40), (uint64_t)&type metadata for PointLight, v22);
  if ((v22[0] & 1) == 0)
  {
    v22[0] = &type metadata for PointLight;
    v22[1] = &off_1E636EB40;
    v23 = 0;
    sub_1B1F05960((uint64_t *)(v18 + 104), (uint64_t)v22, a2, 0, a1, v18);
    sub_1B1B68F14((uint64_t)v22);
  }
  v19 = sub_1B1F03804((char *)a1);
  MEMORY[0x1E0C80A78](v19, v20);
  v21[2] = v24;
  sub_1B1DB6868(v25, (uint64_t)sub_1B1C1A968, (uint64_t)v21);
  return ecs_stack_allocator_pop_snapshot(*(_QWORD *)(*v17 + 32));
}

void sub_1B1C0E354(uint64_t a1, __int16 a2, __int128 *a3, uint64_t a4, uint64_t a5)
{
  __int128 v10;
  uint64_t *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v15[5];
  char v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;

  v10 = a3[1];
  v17 = *a3;
  v18 = v10;
  v19 = a3[2];
  sub_1B1A10AA4(*(_QWORD *)(a1 + 40), (uint64_t)&type metadata for PerspectiveCamera, v15);
  if (LOBYTE(v15[0]) == 1)
  {
    sub_1B1FED444(a2, (uint64_t)a3);
  }
  else
  {
    v20 = a5;
    v11 = *(uint64_t **)(a4 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues);
    ecs_stack_allocator_push_snapshot(*(_QWORD *)(*v11 + 32));
    v12 = *v11;
    sub_1B1A10AA4(*(_QWORD *)(a1 + 40), (uint64_t)&type metadata for PerspectiveCamera, v15);
    if ((v15[0] & 1) == 0)
    {
      v15[0] = &type metadata for PerspectiveCamera;
      v15[1] = &off_1E638EDD0;
      v16 = 0;
      sub_1B1F05960((uint64_t *)(v12 + 104), (uint64_t)v15, a2, 0, a1, v12);
      sub_1B1B68F14((uint64_t)v15);
    }
    v13 = sub_1B1F03804((char *)a1);
    MEMORY[0x1E0C80A78](v13, v14);
    sub_1B1DB7B6C(v20, (void (*)(uint64_t))sub_1B1C1A9C8);
    ecs_stack_allocator_pop_snapshot(*(_QWORD *)(*v11 + 32));
  }
}

void sub_1B1C0E4E4(uint64_t a1, __int16 a2, __n128 *a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  _QWORD v14[5];
  char v15;
  __n128 v16;
  unsigned __int8 v17;
  uint64_t v18;

  v16 = *a3;
  v17 = a3[1].n128_u8[0];
  sub_1B1A10AA4(*(_QWORD *)(a1 + 40), (uint64_t)&type metadata for OrthographicCamera, v14);
  if (LOBYTE(v14[0]) == 1)
  {
    sub_1B1FED4A0(a2, a3);
  }
  else
  {
    v18 = a5;
    v10 = *(uint64_t **)(a4 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues);
    ecs_stack_allocator_push_snapshot(*(_QWORD *)(*v10 + 32));
    v11 = *v10;
    sub_1B1A10AA4(*(_QWORD *)(a1 + 40), (uint64_t)&type metadata for OrthographicCamera, v14);
    if ((v14[0] & 1) == 0)
    {
      v14[0] = &type metadata for OrthographicCamera;
      v14[1] = &off_1E6393BD0;
      v15 = 0;
      sub_1B1F05960((uint64_t *)(v11 + 104), (uint64_t)v14, a2, 0, a1, v11);
      sub_1B1B68F14((uint64_t)v14);
    }
    v12 = sub_1B1F03804((char *)a1);
    MEMORY[0x1E0C80A78](v12, v13);
    sub_1B1DB7D0C(v18, (void (*)(uint64_t))sub_1B1C1A9A0);
    ecs_stack_allocator_pop_snapshot(*(_QWORD *)(*v10 + 32));
  }
}

void sub_1B1C0E674(uint64_t a1, __int16 a2, uint64_t a3)
{
  uint64_t *v6;
  uint64_t v7;
  _QWORD v8[5];
  char v9;

  sub_1B1A10AA4(*(_QWORD *)(a1 + 40), (uint64_t)&type metadata for HiddenOrHasHiddenAncestor, v8);
  if (LOBYTE(v8[0]) == 1)
  {
    sub_1B1FDE08C();
  }
  else
  {
    v6 = *(uint64_t **)(a3 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues);
    ecs_stack_allocator_push_snapshot(*(_QWORD *)(*v6 + 32));
    v7 = *v6;
    sub_1B1A10AA4(*(_QWORD *)(a1 + 40), (uint64_t)&type metadata for HiddenOrHasHiddenAncestor, v8);
    if ((v8[0] & 1) == 0)
    {
      v8[0] = &type metadata for HiddenOrHasHiddenAncestor;
      v8[1] = &off_1E636CB80;
      v9 = 0;
      sub_1B1F05960((uint64_t *)(v7 + 104), (uint64_t)v8, a2, 0, a1, v7);
      sub_1B1B68F14((uint64_t)v8);
    }
    sub_1B1F03804((char *)a1);
    ecs_stack_allocator_pop_snapshot(*(_QWORD *)(*v6 + 32));
  }
}

void sub_1B1C0E7A4(uint64_t a1, __int16 a2, uint64_t a3)
{
  uint64_t *v6;
  uint64_t v7;
  _QWORD v8[5];
  char v9;

  sub_1B1A10AA4(*(_QWORD *)(a1 + 40), (uint64_t)&type metadata for Hidden, v8);
  if (LOBYTE(v8[0]) == 1)
  {
    j_nullsub_16(a2);
  }
  else
  {
    v6 = *(uint64_t **)(a3 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues);
    ecs_stack_allocator_push_snapshot(*(_QWORD *)(*v6 + 32));
    v7 = *v6;
    sub_1B1A10AA4(*(_QWORD *)(a1 + 40), (uint64_t)&type metadata for Hidden, v8);
    if ((v8[0] & 1) == 0)
    {
      v8[0] = &type metadata for Hidden;
      v8[1] = &off_1E63BB218;
      v9 = 0;
      sub_1B1F05960((uint64_t *)(v7 + 104), (uint64_t)v8, a2, 0, a1, v7);
      sub_1B1B68F14((uint64_t)v8);
    }
    sub_1B1F03804((char *)a1);
    ecs_stack_allocator_pop_snapshot(*(_QWORD *)(*v6 + 32));
  }
}

uint64_t sub_1B1C0E8C0(uint64_t a1, __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  _QWORD v21[4];
  _QWORD v22[5];
  char v23;
  _QWORD v24[4];
  uint64_t v25;

  v24[0] = a3;
  v24[1] = a4;
  v24[2] = a5;
  v24[3] = a6;
  sub_1B1A10AA4(*(_QWORD *)(a1 + 40), (uint64_t)&type metadata for MeshReferenceAsset, v22);
  if (LOBYTE(v22[0]) == 1)
    return sub_1B1FDB2D8(a2, a3, a4, a5, a6);
  v25 = a8;
  v17 = *(uint64_t **)(a7 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues);
  ecs_stack_allocator_push_snapshot(*(_QWORD *)(*v17 + 32));
  v18 = *v17;
  sub_1B1A10AA4(*(_QWORD *)(a1 + 40), (uint64_t)&type metadata for MeshReferenceAsset, v22);
  if ((v22[0] & 1) == 0)
  {
    v22[0] = &type metadata for MeshReferenceAsset;
    v22[1] = &off_1E6392758;
    v23 = 0;
    sub_1B1F05960((uint64_t *)(v18 + 104), (uint64_t)v22, a2, 0, a1, v18);
    sub_1B1B68F14((uint64_t)v22);
  }
  v19 = sub_1B1F03804((char *)a1);
  MEMORY[0x1E0C80A78](v19, v20);
  v21[2] = v24;
  sub_1B1DB7EAC(v25, (void (*)(uint64_t *))sub_1B1C1AA04, (uint64_t)v21);
  return ecs_stack_allocator_pop_snapshot(*(_QWORD *)(*v17 + 32));
}

void sub_1B1C0EA74(uint64_t a1, __int16 a2, uint64_t a3)
{
  uint64_t *v6;
  uint64_t v7;
  _QWORD v8[5];
  char v9;

  sub_1B1A10AA4(*(_QWORD *)(a1 + 40), (uint64_t)&type metadata for Beamed, v8);
  if (LOBYTE(v8[0]) == 1)
  {
    nullsub_16(a2);
  }
  else
  {
    v6 = *(uint64_t **)(a3 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues);
    ecs_stack_allocator_push_snapshot(*(_QWORD *)(*v6 + 32));
    v7 = *v6;
    sub_1B1A10AA4(*(_QWORD *)(a1 + 40), (uint64_t)&type metadata for Beamed, v8);
    if ((v8[0] & 1) == 0)
    {
      v8[0] = &type metadata for Beamed;
      v8[1] = &off_1E63BB000;
      v9 = 0;
      sub_1B1F05960((uint64_t *)(v7 + 104), (uint64_t)v8, a2, 0, a1, v7);
      sub_1B1B68F14((uint64_t)v8);
    }
    sub_1B1F03804((char *)a1);
    ecs_stack_allocator_pop_snapshot(*(_QWORD *)(*v6 + 32));
  }
}

uint64_t sub_1B1C0EB90(uint64_t a1, __int16 a2, uint64_t a3, uint64_t a4, float a5)
{
  uint64_t *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v15[5];
  uint64_t v16;
  _QWORD v17[5];
  char v18;
  float v19;

  v19 = a5;
  sub_1B1A10AA4(*(_QWORD *)(a1 + 40), (uint64_t)&type metadata for Opacity, v17);
  if (LOBYTE(v17[0]) == 1)
    return sub_1B1FED4FC(a2, a5);
  v16 = a4;
  v11 = *(uint64_t **)(a3 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues);
  ecs_stack_allocator_push_snapshot(*(_QWORD *)(*v11 + 32));
  v12 = *v11;
  sub_1B1A10AA4(*(_QWORD *)(a1 + 40), (uint64_t)&type metadata for Opacity, v17);
  if ((v17[0] & 1) == 0)
  {
    v17[0] = &type metadata for Opacity;
    v17[1] = &off_1E63BE068;
    v18 = 0;
    sub_1B1F05960((uint64_t *)(v12 + 104), (uint64_t)v17, a2, 0, a1, v12);
    sub_1B1B68F14((uint64_t)v17);
  }
  v13 = sub_1B1F03804((char *)a1);
  MEMORY[0x1E0C80A78](v13, v14);
  v15[2] = &v19;
  sub_1B1DB841C(v16, (uint64_t)sub_1B1C23EFC, (uint64_t)v15);
  return ecs_stack_allocator_pop_snapshot(*(_QWORD *)(*v11 + 32));
}

uint64_t sub_1B1C0ED1C(uint64_t a1, __int16 a2, uint64_t a3, unint64_t a4, __n128 a5, __n128 a6)
{
  uint64_t *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v15[4];
  __n128 v16;
  __n128 v17;
  _QWORD v18[5];
  char v19;
  _OWORD v20[2];

  v16 = a5;
  v17 = a6;
  v20[0] = a5;
  v20[1] = a6;
  sub_1B1A10AA4(*(_QWORD *)(a1 + 40), (uint64_t)&type metadata for LocalAABB, v18);
  if (LOBYTE(v18[0]) == 1)
    return sub_1B1FED544(a2, v16, v17);
  v17.n128_u64[0] = a4;
  v11 = *(uint64_t **)(a3 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues);
  ecs_stack_allocator_push_snapshot(*(_QWORD *)(*v11 + 32));
  v12 = *v11;
  sub_1B1A10AA4(*(_QWORD *)(a1 + 40), (uint64_t)&type metadata for LocalAABB, v18);
  if ((v18[0] & 1) == 0)
  {
    v18[0] = &type metadata for LocalAABB;
    v18[1] = &off_1E63C4128;
    v19 = 0;
    sub_1B1F05960((uint64_t *)(v12 + 104), (uint64_t)v18, a2, 0, a1, v12);
    sub_1B1B68F14((uint64_t)v18);
  }
  v13 = sub_1B1F03804((char *)a1);
  MEMORY[0x1E0C80A78](v13, v14);
  v15[2] = v20;
  sub_1B1DB85F4(v17.n128_i64[0], (uint64_t)sub_1B1C1AA58, (uint64_t)v15);
  return ecs_stack_allocator_pop_snapshot(*(_QWORD *)(*v11 + 32));
}

uint64_t sub_1B1C0EEA0(uint64_t a1, __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v15[4];
  _QWORD v16[5];
  char v17;
  uint64_t v18;

  sub_1B1A10AA4(*(_QWORD *)(a1 + 40), (uint64_t)&type metadata for NodeVisibilityController, v16);
  if (LOBYTE(v16[0]) == 1)
    return sub_1B1FED590(a2, a3);
  v18 = a5;
  v11 = *(uint64_t **)(a4 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues);
  ecs_stack_allocator_push_snapshot(*(_QWORD *)(*v11 + 32));
  v12 = *v11;
  sub_1B1A10AA4(*(_QWORD *)(a1 + 40), (uint64_t)&type metadata for NodeVisibilityController, v16);
  if ((v16[0] & 1) == 0)
  {
    v16[0] = &type metadata for NodeVisibilityController;
    v16[1] = &off_1E63AD7D8;
    v17 = 0;
    sub_1B1F05960((uint64_t *)(v12 + 104), (uint64_t)v16, a2, 0, a1, v12);
    sub_1B1B68F14((uint64_t)v16);
  }
  v13 = sub_1B1F03804((char *)a1);
  MEMORY[0x1E0C80A78](v13, v14);
  v15[2] = a3;
  sub_1B1DB87D0(v18, (uint64_t)sub_1B1C1F670, (uint64_t)v15);
  return ecs_stack_allocator_pop_snapshot(*(_QWORD *)(*v11 + 32));
}

uint64_t sub_1B1C0F01C(uint64_t a1, __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v15[4];
  _QWORD v16[5];
  char v17;
  uint64_t v18;

  sub_1B1A10AA4(*(_QWORD *)(a1 + 40), (uint64_t)&type metadata for NodeTransformController, v16);
  if (LOBYTE(v16[0]) == 1)
    return sub_1B1FED5E4(a2, a3);
  v18 = a5;
  v11 = *(uint64_t **)(a4 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues);
  ecs_stack_allocator_push_snapshot(*(_QWORD *)(*v11 + 32));
  v12 = *v11;
  sub_1B1A10AA4(*(_QWORD *)(a1 + 40), (uint64_t)&type metadata for NodeTransformController, v16);
  if ((v16[0] & 1) == 0)
  {
    v16[0] = &type metadata for NodeTransformController;
    v16[1] = &off_1E63AAF00;
    v17 = 0;
    sub_1B1F05960((uint64_t *)(v12 + 104), (uint64_t)v16, a2, 0, a1, v12);
    sub_1B1B68F14((uint64_t)v16);
  }
  v13 = sub_1B1F03804((char *)a1);
  MEMORY[0x1E0C80A78](v13, v14);
  v15[2] = a3;
  sub_1B1DB8804(v18, (uint64_t)sub_1B1C1F720, (uint64_t)v15);
  return ecs_stack_allocator_pop_snapshot(*(_QWORD *)(*v11 + 32));
}

void sub_1B1C0F198(uint64_t a1, __int16 a2, uint64_t a3)
{
  uint64_t *v6;
  uint64_t v7;
  _QWORD v8[5];
  char v9;

  sub_1B1A10AA4(*(_QWORD *)(a1 + 40), (uint64_t)&type metadata for Authoring, v8);
  if (LOBYTE(v8[0]) == 1)
  {
    j_nullsub_16(a2);
  }
  else
  {
    v6 = *(uint64_t **)(a3 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues);
    ecs_stack_allocator_push_snapshot(*(_QWORD *)(*v6 + 32));
    v7 = *v6;
    sub_1B1A10AA4(*(_QWORD *)(a1 + 40), (uint64_t)&type metadata for Authoring, v8);
    if ((v8[0] & 1) == 0)
    {
      v8[0] = &type metadata for Authoring;
      v8[1] = &off_1E63C3458;
      v9 = 0;
      sub_1B1F05960((uint64_t *)(v7 + 104), (uint64_t)v8, a2, 0, a1, v7);
      sub_1B1B68F14((uint64_t)v8);
    }
    sub_1B1F03804((char *)a1);
    ecs_stack_allocator_pop_snapshot(*(_QWORD *)(*v6 + 32));
  }
}

uint64_t sub_1B1C0F2B4(uint64_t a1, __int16 a2, uint64_t a3, unint64_t a4, __n128 a5, __n128 a6, __n128 a7, __n128 a8)
{
  uint64_t *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  _QWORD v17[4];
  __n128 v18;
  __n128 v19;
  __n128 v20;
  __n128 v21;
  _QWORD v22[5];
  char v23;
  _OWORD v24[5];

  v18 = a5;
  v24[0] = a5;
  v24[1] = a6;
  v19 = a6;
  v20 = a7;
  v24[2] = a7;
  v24[3] = a8;
  v21 = a8;
  sub_1B1A10AA4(*(_QWORD *)(a1 + 40), (uint64_t)&type metadata for ProjectionMatrix, v22);
  if (LOBYTE(v22[0]) == 1)
    return sub_1B1FED638(a2, v18, v19, v20, v21);
  v21.n128_u64[0] = a4;
  v13 = *(uint64_t **)(a3 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues);
  ecs_stack_allocator_push_snapshot(*(_QWORD *)(*v13 + 32));
  v14 = *v13;
  sub_1B1A10AA4(*(_QWORD *)(a1 + 40), (uint64_t)&type metadata for ProjectionMatrix, v22);
  if ((v22[0] & 1) == 0)
  {
    v22[0] = &type metadata for ProjectionMatrix;
    v22[1] = &off_1E638A398;
    v23 = 0;
    sub_1B1F05960((uint64_t *)(v14 + 104), (uint64_t)v22, a2, 0, a1, v14);
    sub_1B1B68F14((uint64_t)v22);
  }
  v15 = sub_1B1F03804((char *)a1);
  MEMORY[0x1E0C80A78](v15, v16);
  v17[2] = v24;
  sub_1B1DB89E0(v21.n128_i64[0], (uint64_t)sub_1B1C1F65C, (uint64_t)v17);
  return ecs_stack_allocator_pop_snapshot(*(_QWORD *)(*v13 + 32));
}

uint64_t sub_1B1C0F454(uint64_t a1, __int16 a2, uint64_t a3, unint64_t a4, __n128 a5, __n128 a6, __n128 a7, __n128 a8)
{
  uint64_t *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  _QWORD v17[4];
  __n128 v18;
  __n128 v19;
  __n128 v20;
  __n128 v21;
  _QWORD v22[5];
  char v23;
  _OWORD v24[5];

  v18 = a5;
  v24[0] = a5;
  v24[1] = a6;
  v19 = a6;
  v20 = a7;
  v24[2] = a7;
  v24[3] = a8;
  v21 = a8;
  sub_1B1A10AA4(*(_QWORD *)(a1 + 40), (uint64_t)&type metadata for LastFrameWorldTransform, v22);
  if (LOBYTE(v22[0]) == 1)
    return sub_1B1FED688(a2, v18, v19, v20, v21);
  v21.n128_u64[0] = a4;
  v13 = *(uint64_t **)(a3 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues);
  ecs_stack_allocator_push_snapshot(*(_QWORD *)(*v13 + 32));
  v14 = *v13;
  sub_1B1A10AA4(*(_QWORD *)(a1 + 40), (uint64_t)&type metadata for LastFrameWorldTransform, v22);
  if ((v22[0] & 1) == 0)
  {
    v22[0] = &type metadata for LastFrameWorldTransform;
    v22[1] = &off_1E63AA960;
    v23 = 0;
    sub_1B1F05960((uint64_t *)(v14 + 104), (uint64_t)v22, a2, 0, a1, v14);
    sub_1B1B68F14((uint64_t)v22);
  }
  v15 = sub_1B1F03804((char *)a1);
  MEMORY[0x1E0C80A78](v15, v16);
  v17[2] = v24;
  sub_1B1DB8A14(v21.n128_i64[0], (uint64_t)sub_1B1C1F65C, (uint64_t)v17);
  return ecs_stack_allocator_pop_snapshot(*(_QWORD *)(*v13 + 32));
}

uint64_t sub_1B1C0F5F4(uint64_t a1, __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v15[5];
  uint64_t v16;
  _QWORD v17[5];
  char v18;
  uint64_t v19;

  v19 = a3;
  sub_1B1A10AA4(*(_QWORD *)(a1 + 40), (uint64_t)&type metadata for MetalScriptReflection, v17);
  if (LOBYTE(v17[0]) == 1)
    return sub_1B1FED88C(a2, a3);
  v16 = a5;
  v11 = *(uint64_t **)(a4 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues);
  ecs_stack_allocator_push_snapshot(*(_QWORD *)(*v11 + 32));
  v12 = *v11;
  sub_1B1A10AA4(*(_QWORD *)(a1 + 40), (uint64_t)&type metadata for MetalScriptReflection, v17);
  if ((v17[0] & 1) == 0)
  {
    v17[0] = &type metadata for MetalScriptReflection;
    v17[1] = &off_1E63A3588;
    v18 = 0;
    sub_1B1F05960((uint64_t *)(v12 + 104), (uint64_t)v17, a2, 0, a1, v12);
    sub_1B1B68F14((uint64_t)v17);
  }
  v13 = sub_1B1F03804((char *)a1);
  MEMORY[0x1E0C80A78](v13, v14);
  v15[2] = &v19;
  sub_1B1DB8054(v16, (uint64_t)sub_1B1C1A954, (uint64_t)v15);
  return ecs_stack_allocator_pop_snapshot(*(_QWORD *)(*v11 + 32));
}

_QWORD *sub_1B1C0F778(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v19;
  uint64_t v21;
  uint64_t v22;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  v3 = swift_bridgeObjectRetain() + 80;
  v19 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  do
  {
    v4 = *(_QWORD *)(v3 - 48);
    v5 = *(_QWORD *)(v3 - 40);
    v7 = *(_QWORD *)(v3 - 32);
    v6 = *(_QWORD *)(v3 - 24);
    sub_1B1A18378(a2, (uint64_t)&v21, &qword_1ED4B9DA8, (uint64_t)&type metadata for GraphEntityComponentPropertyReferences);
    if (v21)
    {
      v8 = v22;
      if (*(_QWORD *)(v22 + 16))
      {
        swift_bridgeObjectRetain();
        sub_1B19FA2B4(v7, v6);
        swift_bridgeObjectRetain();
        v9 = sub_1B1DC3B00(v4, v5);
        if ((v10 & 1) != 0)
        {
          v11 = (uint64_t *)(*(_QWORD *)(v8 + 56) + 16 * v9);
          v12 = *v11;
          v13 = v11[1];
          swift_retain();
          swift_bridgeObjectRelease_n();
          sub_1B19F9FEC(v7, v6);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
            v14 = v19;
          else
            v14 = sub_1B1C66A74(0, v19[2] + 1, 1, v19);
          v16 = v14[2];
          v15 = v14[3];
          if (v16 >= v15 >> 1)
            v14 = sub_1B1C66A74(v15 > 1, v16 + 1, 1, v14);
          v14[2] = v16 + 1;
          v19 = v14;
          v17 = &v14[2 * v16];
          v17[4] = v12;
          v17[5] = v13;
        }
        else
        {
          swift_bridgeObjectRelease_n();
          sub_1B19F9FEC(v7, v6);
        }
      }
    }
    v3 += 56;
    --v2;
  }
  while (v2);
  swift_bridgeObjectRelease();
  return v19;
}

uint64_t sub_1B1C0F964(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  int *v26;
  int v27;
  int v28;
  uint64_t v30;
  uint64_t v32;
  int64_t v33;

  v3 = 0;
  v6 = *(_QWORD *)(a1 + 56);
  result = a1 + 56;
  v5 = v6;
  v7 = 1 << *(_BYTE *)(result - 24);
  if (v7 < 64)
    v8 = ~(-1 << v7);
  else
    v8 = -1;
  v9 = v8 & v5;
  v32 = result;
  v33 = (unint64_t)(v7 + 63) >> 6;
  v30 = result + 48;
LABEL_10:
  while (v9)
  {
    v11 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    v12 = v11 | (v3 << 6);
LABEL_26:
    v15 = *(_QWORD *)(a2 + 16);
    v16 = *(_QWORD *)(v15 + 16);
    if (v16)
    {
      v17 = (int *)(*(_QWORD *)(a1 + 48) + 8 * v12);
      v18 = *v17;
      v19 = v17[1];
      v20 = v15 + 32;
      while (1)
      {
        v21 = v16 - 1;
        v22 = *(_QWORD *)(v20 + 32 * (v16 - 1) + 16);
        if (*(_QWORD *)(v22 + 16))
        {
          sub_1B222A06C();
          sub_1B222A09C();
          sub_1B222A09C();
          result = sub_1B222A0C0();
          v23 = -1 << *(_BYTE *)(v22 + 32);
          v24 = result & ~v23;
          if (((*(_QWORD *)(v22 + 56 + ((v24 >> 3) & 0xFFFFFFFFFFFFF8)) >> v24) & 1) != 0)
            break;
        }
LABEL_28:
        --v16;
        if (!v21)
          goto LABEL_10;
      }
      v25 = ~v23;
      while (1)
      {
        v26 = (int *)(*(_QWORD *)(v22 + 48) + 8 * v24);
        v28 = *v26;
        v27 = v26[1];
        if (v28 == v18 && v27 == v19)
          break;
        v24 = (v24 + 1) & v25;
        if (((*(_QWORD *)(v22 + 56 + ((v24 >> 3) & 0xFFFFFFFFFFFFF8)) >> v24) & 1) == 0)
          goto LABEL_28;
      }
      v10 = *a3;
      if (*((_BYTE *)a3 + 8))
        v10 = v16;
      if (v16 > v10)
        v10 = v16;
      *a3 = v10;
      *((_BYTE *)a3 + 8) = 0;
    }
  }
  v13 = v3 + 1;
  if (v3 + 1 >= v33)
    return result;
  v14 = *(_QWORD *)(v32 + 8 * v13);
  if (v14)
    goto LABEL_25;
  v13 = v3 + 2;
  if (v3 + 2 >= v33)
    return result;
  v14 = *(_QWORD *)(v32 + 8 * v13);
  if (v14)
    goto LABEL_25;
  v13 = v3 + 3;
  if (v3 + 3 >= v33)
    return result;
  v14 = *(_QWORD *)(v32 + 8 * v13);
  if (v14)
    goto LABEL_25;
  v13 = v3 + 4;
  if (v3 + 4 >= v33)
    return result;
  v14 = *(_QWORD *)(v32 + 8 * v13);
  if (v14)
    goto LABEL_25;
  v13 = v3 + 5;
  if (v3 + 5 >= v33)
    return result;
  v14 = *(_QWORD *)(v32 + 8 * v13);
  if (v14)
  {
LABEL_25:
    v9 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v13 << 6);
    v3 = v13;
    goto LABEL_26;
  }
  while (v33 - 6 != v3)
  {
    v14 = *(_QWORD *)(v30 + 8 * v3++);
    if (v14)
    {
      v13 = v3 + 5;
      goto LABEL_25;
    }
  }
  return result;
}

uint64_t sub_1B1C0FBD4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  int *v26;
  int v27;
  int v28;
  uint64_t v30;
  uint64_t v32;
  int64_t v33;

  v3 = 0;
  v6 = *(_QWORD *)(a1 + 56);
  result = a1 + 56;
  v5 = v6;
  v7 = 1 << *(_BYTE *)(result - 24);
  if (v7 < 64)
    v8 = ~(-1 << v7);
  else
    v8 = -1;
  v9 = v8 & v5;
  v32 = result;
  v33 = (unint64_t)(v7 + 63) >> 6;
  v30 = result + 48;
LABEL_10:
  while (v9)
  {
    v11 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    v12 = v11 | (v3 << 6);
LABEL_26:
    v15 = *(_QWORD *)(a2 + 16);
    v16 = *(_QWORD *)(v15 + 16);
    if (v16)
    {
      v17 = 0;
      v18 = (int *)(*(_QWORD *)(a1 + 48) + 8 * v12);
      v19 = *v18;
      v20 = v18[1];
      v21 = v15 + 32;
      while (1)
      {
        v22 = *(_QWORD *)(v21 + 32 * v17 + 24);
        if (*(_QWORD *)(v22 + 16))
        {
          sub_1B222A06C();
          sub_1B222A09C();
          sub_1B222A09C();
          result = sub_1B222A0C0();
          v23 = -1 << *(_BYTE *)(v22 + 32);
          v24 = result & ~v23;
          if (((*(_QWORD *)(v22 + 56 + ((v24 >> 3) & 0xFFFFFFFFFFFFF8)) >> v24) & 1) != 0)
            break;
        }
LABEL_28:
        if (++v17 == v16)
          goto LABEL_10;
      }
      v25 = ~v23;
      while (1)
      {
        v26 = (int *)(*(_QWORD *)(v22 + 48) + 8 * v24);
        v28 = *v26;
        v27 = v26[1];
        if (v28 == v19 && v27 == v20)
          break;
        v24 = (v24 + 1) & v25;
        if (((*(_QWORD *)(v22 + 56 + ((v24 >> 3) & 0xFFFFFFFFFFFFF8)) >> v24) & 1) == 0)
          goto LABEL_28;
      }
      v10 = *a3;
      if (*((_BYTE *)a3 + 8))
        v10 = v17;
      if (v17 < v10)
        v10 = v17;
      *a3 = v10;
      *((_BYTE *)a3 + 8) = 0;
    }
  }
  v13 = v3 + 1;
  if (v3 + 1 >= v33)
    return result;
  v14 = *(_QWORD *)(v32 + 8 * v13);
  if (v14)
    goto LABEL_25;
  v13 = v3 + 2;
  if (v3 + 2 >= v33)
    return result;
  v14 = *(_QWORD *)(v32 + 8 * v13);
  if (v14)
    goto LABEL_25;
  v13 = v3 + 3;
  if (v3 + 3 >= v33)
    return result;
  v14 = *(_QWORD *)(v32 + 8 * v13);
  if (v14)
    goto LABEL_25;
  v13 = v3 + 4;
  if (v3 + 4 >= v33)
    return result;
  v14 = *(_QWORD *)(v32 + 8 * v13);
  if (v14)
    goto LABEL_25;
  v13 = v3 + 5;
  if (v3 + 5 >= v33)
    return result;
  v14 = *(_QWORD *)(v32 + 8 * v13);
  if (v14)
  {
LABEL_25:
    v9 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v13 << 6);
    v3 = v13;
    goto LABEL_26;
  }
  while (v33 - 6 != v3)
  {
    v14 = *(_QWORD *)(v30 + 8 * v3++);
    if (v14)
    {
      v13 = v3 + 5;
      goto LABEL_25;
    }
  }
  return result;
}

uint64_t sub_1B1C0FE48(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v18[3];
  uint64_t v19;

  v5 = 1 << *(_BYTE *)(a1 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(a1 + 64);
  v8 = (unint64_t)(v5 + 63) >> 6;
  swift_bridgeObjectRetain();
  v9 = 0;
  if (!v7)
    goto LABEL_5;
LABEL_4:
  v10 = __clz(__rbit64(v7));
  v7 &= v7 - 1;
  v11 = v10 | (v9 << 6);
  while (1)
  {
    v14 = (_QWORD *)(*(_QWORD *)(a1 + 48) + 16 * v11);
    v15 = v14[1];
    v16 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v11);
    v18[0] = *v14;
    v18[1] = v15;
    v18[2] = v16;
    swift_bridgeObjectRetain();
    swift_retain();
    sub_1B1C04200((uint64_t)v18, a2);
    if (v2)
    {
      swift_release();
      swift_release();
      return swift_bridgeObjectRelease();
    }
    swift_release();
    swift_bridgeObjectRelease();
    if (v7)
      goto LABEL_4;
LABEL_5:
    v12 = v9 + 1;
    if (v9 + 1 >= v8)
      return swift_release();
    v13 = *(_QWORD *)(v19 + 8 * v12);
    if (!v13)
    {
      v12 = v9 + 2;
      if (v9 + 2 >= v8)
        return swift_release();
      v13 = *(_QWORD *)(v19 + 8 * v12);
      if (!v13)
      {
        v12 = v9 + 3;
        if (v9 + 3 >= v8)
          return swift_release();
        v13 = *(_QWORD *)(v19 + 8 * v12);
        if (!v13)
        {
          v12 = v9 + 4;
          if (v9 + 4 >= v8)
            return swift_release();
          v13 = *(_QWORD *)(v19 + 8 * v12);
          if (!v13)
          {
            v12 = v9 + 5;
            if (v9 + 5 >= v8)
              return swift_release();
            v13 = *(_QWORD *)(v19 + 8 * v12);
            if (!v13)
            {
              while (v8 - 6 != v9)
              {
                v13 = *(_QWORD *)(a1 + 8 * v9++ + 112);
                if (v13)
                {
                  v12 = v9 + 5;
                  goto LABEL_18;
                }
              }
              return swift_release();
            }
          }
        }
      }
    }
LABEL_18:
    v7 = (v13 - 1) & v13;
    v11 = __clz(__rbit64(v13)) + (v12 << 6);
    v9 = v12;
  }
}

uint64_t sub_1B1C10028(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  __int128 v31;
  int v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;

  v11 = type metadata accessor for GraphScriptingConfig.ScriptInfo();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v13);
  v15 = (char *)&v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x1E0DEE9B8];
  if (!*(_QWORD *)(a4 + 16))
    goto LABEL_11;
  v17 = sub_1B1DC4040(a1 | ((HIDWORD(a1) & 1) << 32));
  if ((v18 & 1) == 0)
    goto LABEL_11;
  sub_1B1792810(*(_QWORD *)(a4 + 56) + *(_QWORD *)(v12 + 72) * v17, (uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for GraphScriptingConfig.ScriptInfo);
  v19 = *((_QWORD *)v15 + 2);
  swift_bridgeObjectRetain();
  sub_1B1A04628((uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for GraphScriptingConfig.ScriptInfo);
  if (!*(_QWORD *)(v19 + 16))
    goto LABEL_10;
  swift_bridgeObjectRetain();
  v20 = sub_1B1DC3B00(a6, a7);
  if ((v21 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_10:
    swift_bridgeObjectRelease();
LABEL_11:
    v40 = 0u;
    v41 = 0u;
LABEL_12:
    sub_1B1A057EC((uint64_t)&v40, (uint64_t)&qword_1ED4BB150, v16 + 8, (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD))sub_1B1A02758);
    return 5;
  }
  v22 = *(_QWORD *)(*(_QWORD *)(v19 + 56) + 8 * v20);
  swift_retain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v23 = *(_QWORD *)(v22 + 16);
  if (v23 && *(_QWORD *)(v23 + 16))
  {
    swift_bridgeObjectRetain();
    v24 = sub_1B1DC3B00(0xD000000000000012, 0x80000001B232AB40);
    if ((v25 & 1) != 0)
    {
      sub_1B19F8F0C(*(_QWORD *)(v23 + 56) + 88 * v24, (uint64_t)&v34);
    }
    else
    {
      v39 = 0;
      v37 = 0u;
      v38 = 0u;
      v35 = 0u;
      v36 = 0u;
      v34 = 0u;
    }
    swift_release();
    swift_bridgeObjectRelease();
    if (!*((_QWORD *)&v34 + 1))
      goto LABEL_22;
  }
  else
  {
    v39 = 0;
    v37 = 0u;
    v38 = 0u;
    v35 = 0u;
    v36 = 0u;
    v34 = 0u;
    swift_release();
    if (!*((_QWORD *)&v34 + 1))
    {
LABEL_22:
      sub_1B1A057EC((uint64_t)&v34, (uint64_t)&unk_1ED4BB3A0, (uint64_t)&_s8MetadataVN, (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD))sub_1B1A02758);
      goto LABEL_11;
    }
  }
  sub_1B1B9DC78((uint64_t)&v37 + 8, (uint64_t)&v40, (uint64_t)&qword_1ED4BB150, v16 + 8, (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))sub_1B1A02758);
  sub_1B1A203C4((uint64_t)&v34);
  if (!*((_QWORD *)&v41 + 1))
    goto LABEL_12;
  if ((swift_dynamicCast() & 1) == 0)
    return 5;
  v28 = sub_1B22287B8();
  v29 = v27;
  if (v28 == 0x6C61636F6CLL && v27 == 0xE500000000000000 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return 0;
  }
  if (v28 == 0x656E656373 && v29 == 0xE500000000000000 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    if (v28 == 0x646C726F77 && v29 == 0xE500000000000000)
    {
      swift_bridgeObjectRelease();
LABEL_33:
      swift_bridgeObjectRelease();
      return 1;
    }
    v30 = sub_1B2229D24();
    swift_bridgeObjectRelease();
    if ((v30 & 1) != 0)
      goto LABEL_33;
    if (qword_1ED4BF430 != -1)
      swift_once();
    *(_QWORD *)&v34 = 0;
    *((_QWORD *)&v34 + 1) = 0xE000000000000000;
    swift_retain();
    sub_1B2229430();
    sub_1B2228890();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    v31 = v34;
    v32 = sub_1B2228E90();
    if (qword_1ED4BF658 != -1)
      swift_once();
    *(_QWORD *)&v34 = 0;
    swift_retain();
    sub_1B1F1AD70(v32, (uint64_t *)&v34, v31, *((uint64_t *)&v31 + 1));
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
  }
  return 2;
}

uint64_t sub_1B1C10514(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  char v31;
  char v32;
  uint64_t v33;
  _QWORD v34[2];
  _OWORD v35[2];
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  _OWORD v42[3];
  _OWORD v43[2];
  uint64_t v44;

  v11 = type metadata accessor for GraphScriptingConfig.ScriptInfo();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v13);
  v15 = (char *)v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(_QWORD *)(a4 + 16))
    return 4;
  v16 = sub_1B1DC4040(a1 | ((HIDWORD(a1) & 1) << 32));
  if ((v17 & 1) == 0)
    return 4;
  sub_1B1792810(*(_QWORD *)(a4 + 56) + *(_QWORD *)(v12 + 72) * v16, (uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for GraphScriptingConfig.ScriptInfo);
  v18 = *((_QWORD *)v15 + 2);
  swift_bridgeObjectRetain();
  sub_1B1A04628((uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for GraphScriptingConfig.ScriptInfo);
  if (!*(_QWORD *)(v18 + 16))
    goto LABEL_10;
  swift_bridgeObjectRetain();
  v19 = sub_1B1DC3B00(a6, a7);
  if ((v20 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_10:
    swift_bridgeObjectRelease();
    return 4;
  }
  v21 = *(_QWORD *)(*(_QWORD *)(v18 + 56) + 8 * v19);
  swift_retain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v22 = *(_QWORD *)(v21 + 16);
  if (!v22 || !*(_QWORD *)(v22 + 16))
  {
    v41 = 0;
    v39 = 0u;
    v40 = 0u;
    v37 = 0u;
    v38 = 0u;
    v36 = 0u;
LABEL_12:
    swift_release();
    sub_1B1A057EC((uint64_t)&v36, (uint64_t)&unk_1ED4BB3A0, (uint64_t)&_s8MetadataVN, (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD))sub_1B1A02758);
    return 4;
  }
  swift_bridgeObjectRetain();
  v23 = sub_1B1DC3B00(0x4D73736572646441, 0xEB0000000065646FLL);
  if ((v24 & 1) != 0)
  {
    sub_1B19F8F0C(*(_QWORD *)(v22 + 56) + 88 * v23, (uint64_t)&v36);
  }
  else
  {
    v41 = 0;
    v39 = 0u;
    v40 = 0u;
    v37 = 0u;
    v38 = 0u;
    v36 = 0u;
  }
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v36 + 1))
    goto LABEL_12;
  v42[2] = v38;
  v43[0] = v39;
  v43[1] = v40;
  v44 = v41;
  v42[0] = v36;
  v42[1] = v37;
  sub_1B1B9DC78((uint64_t)v43 + 8, (uint64_t)v35, (uint64_t)&qword_1ED4BB150, MEMORY[0x1E0DEE9B8] + 8, (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))sub_1B1A02758);
  sub_1B1A0DDAC(v35, &v36);
  swift_dynamicCast();
  v27 = v34[0];
  v28 = v34[1];
  v29 = (_QWORD *)sub_1B1BF8E08();
  v30 = sub_1B1DB99B0(v27, v28, v29);
  v32 = v31;
  swift_bridgeObjectRelease();
  if ((v32 & 1) != 0)
    v33 = 0;
  else
    v33 = v30;
  v25 = byte_1E636F638[v33 + 32];
  swift_release();
  swift_bridgeObjectRelease();
  sub_1B1A203C4((uint64_t)v42);
  return v25;
}

uint64_t sub_1B1C107E8(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  char v31;
  char v32;
  uint64_t v33;
  _QWORD v34[2];
  _OWORD v35[2];
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  _OWORD v42[3];
  _OWORD v43[2];
  uint64_t v44;

  v11 = type metadata accessor for GraphScriptingConfig.ScriptInfo();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v13);
  v15 = (char *)v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(_QWORD *)(a4 + 16))
    return 2;
  v16 = sub_1B1DC4040(a1 | ((HIDWORD(a1) & 1) << 32));
  if ((v17 & 1) == 0)
    return 2;
  sub_1B1792810(*(_QWORD *)(a4 + 56) + *(_QWORD *)(v12 + 72) * v16, (uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for GraphScriptingConfig.ScriptInfo);
  v18 = *((_QWORD *)v15 + 2);
  swift_bridgeObjectRetain();
  sub_1B1A04628((uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for GraphScriptingConfig.ScriptInfo);
  if (!*(_QWORD *)(v18 + 16))
    goto LABEL_10;
  swift_bridgeObjectRetain();
  v19 = sub_1B1DC3B00(a6, a7);
  if ((v20 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_10:
    swift_bridgeObjectRelease();
    return 2;
  }
  v21 = *(_QWORD *)(*(_QWORD *)(v18 + 56) + 8 * v19);
  swift_retain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v22 = *(_QWORD *)(v21 + 16);
  if (!v22 || !*(_QWORD *)(v22 + 16))
  {
    v41 = 0;
    v39 = 0u;
    v40 = 0u;
    v37 = 0u;
    v38 = 0u;
    v36 = 0u;
LABEL_12:
    swift_release();
    sub_1B1A057EC((uint64_t)&v36, (uint64_t)&unk_1ED4BB3A0, (uint64_t)&_s8MetadataVN, (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD))sub_1B1A02758);
    return 2;
  }
  swift_bridgeObjectRetain();
  v23 = sub_1B1DC3B00(0x6F4D7265746C6946, 0xEA00000000006564);
  if ((v24 & 1) != 0)
  {
    sub_1B19F8F0C(*(_QWORD *)(v22 + 56) + 88 * v23, (uint64_t)&v36);
  }
  else
  {
    v41 = 0;
    v39 = 0u;
    v40 = 0u;
    v37 = 0u;
    v38 = 0u;
    v36 = 0u;
  }
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v36 + 1))
    goto LABEL_12;
  v42[2] = v38;
  v43[0] = v39;
  v43[1] = v40;
  v44 = v41;
  v42[0] = v36;
  v42[1] = v37;
  sub_1B1B9DC78((uint64_t)v43 + 8, (uint64_t)v35, (uint64_t)&qword_1ED4BB150, MEMORY[0x1E0DEE9B8] + 8, (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))sub_1B1A02758);
  sub_1B1A0DDAC(v35, &v36);
  swift_dynamicCast();
  v27 = v34[0];
  v28 = v34[1];
  v29 = (_QWORD *)sub_1B1BF8ED8();
  v30 = sub_1B1DB99B0(v27, v28, v29);
  v32 = v31;
  swift_bridgeObjectRelease();
  if ((v32 & 1) != 0)
    v33 = 0;
  else
    v33 = v30;
  v25 = byte_1E639B540[v33 + 32];
  swift_release();
  swift_bridgeObjectRelease();
  sub_1B1A203C4((uint64_t)v42);
  return v25;
}

uint64_t sub_1B1C10AB8(uint64_t a1, uint64_t a2, uint64_t a3, int a4, unint64_t a5, unint64_t a6, uint64_t a7, uint64_t *a8)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  unint64_t v18;
  uint64_t result;
  char v20;
  char v21;
  char v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  __int16 v34;
  char v35;
  char v36;
  char v37;
  char v38;
  char v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  char v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55[5];
  uint64_t v56;
  unint64_t v57;
  _BYTE v58[40];

  v14 = HIDWORD(a5) & 1;
  v15 = a5;
  v16 = a4 & 0x10101;
  v52 = *a8;
  v53 = a8[1];
  v17 = sub_1B1C10028(a5 | (unint64_t)(v14 << 32), a1, a2, a3, v16, *a8, v53);
  if (v17 != 5)
  {
    v26 = v17;
    v27 = HIDWORD(a6);
    v28 = a6;
    if (*(_QWORD *)(a7 + 216))
      a7 = *(_QWORD *)(a7 + 216);
    else
      swift_retain();
    v29 = swift_allocObject();
    *(_DWORD *)(v29 + 16) = v28;
    *(_DWORD *)(v29 + 20) = v27;
    v31 = *(_QWORD *)(a7 + 16);
    v30 = *(_QWORD *)(a7 + 24);
    v32 = *(_QWORD *)(a7 + 48);
    v33 = *(_BYTE *)(a7 + 56);
    v34 = *(_WORD *)(a7 + 58);
    swift_retain();
    swift_bridgeObjectRetain();
    v54 = *(_OWORD *)(a7 + 32);
    swift_retain();
    swift_release();
    *(_QWORD *)(v29 + 24) = v31;
    *(_QWORD *)(v29 + 32) = v30;
    *(_OWORD *)(v29 + 40) = v54;
    *(_QWORD *)(v29 + 56) = v32;
    *(_BYTE *)(v29 + 64) = v33;
    *(_WORD *)(v29 + 66) = v34;
    result = v29 | 0x4000000000000000;
    *(_BYTE *)(v29 + 68) = v26;
    return result;
  }
  sub_1B19FA278((uint64_t)(a8 + 2), (uint64_t)v58);
  v18 = a8[3];
  result = 0xF000000000000007;
  if (v18 > 0x26 || ((1 << v18) & 0x43A0000000) == 0)
    return result;
  sub_1B2229304();
  if (!swift_conformsToProtocol2())
  {
    __break(1u);
    goto LABEL_50;
  }
  if (swift_dynamicCastMetatype() || swift_dynamicCastMetatype())
  {
    LOBYTE(v55[0]) = v14;
    v20 = sub_1B1C10514(v15 | ((unint64_t)v14 << 32), a1, a2, a3, v16, v52, v53);
    if (v20 == 4)
      v21 = 1;
    else
      v21 = v20;
    LOBYTE(v55[0]) = v14;
    v22 = sub_1B1C107E8(v15 | ((unint64_t)v14 << 32), a1, a2, a3, v16, v52, v53);
    v23 = (v22 == 2) | v22;
    v24 = swift_allocObject();
    v25 = v24;
    *(_QWORD *)(v24 + 16) = a6;
    *(_QWORD *)(v24 + 24) = 0;
    *(_WORD *)(v24 + 32) = 0;
LABEL_11:
    *(_BYTE *)(v24 + 34) = v21;
    result = v24 | 0x7000000000000000;
    *(_BYTE *)(v25 + 35) = v23 & 1;
    return result;
  }
  if (swift_dynamicCastMetatype()
    || swift_dynamicCastMetatype()
    || swift_dynamicCastMetatype()
    || swift_dynamicCastMetatype()
    || swift_dynamicCastMetatype())
  {
    LOBYTE(v55[0]) = v14;
    v35 = sub_1B1C10514(v15 | ((unint64_t)v14 << 32), a1, a2, a3, v16, v52, v53);
    if (v35 == 4)
      v21 = 2;
    else
      v21 = v35;
    LOBYTE(v55[0]) = v14;
    v36 = sub_1B1C107E8(v15 | ((unint64_t)v14 << 32), a1, a2, a3, v16, v52, v53);
    v23 = (v36 == 2) | v36;
    v24 = swift_allocObject();
    v25 = v24;
    *(_QWORD *)(v24 + 16) = a6;
    *(_QWORD *)(v24 + 24) = 0;
    *(_WORD *)(v24 + 32) = 256;
    goto LABEL_11;
  }
  if (!swift_dynamicCastMetatype())
    return 0xF000000000000007;
  LOBYTE(v55[0]) = v14;
  v37 = sub_1B1C10514(v15 | ((unint64_t)v14 << 32), a1, a2, a3, v16, v52, v53);
  if (v37 == 4)
    v38 = 2;
  else
    v38 = v37;
  LOBYTE(v55[0]) = v14;
  v39 = sub_1B1C107E8(v15 | ((unint64_t)v14 << 32), a1, a2, a3, v16, v52, v53);
  if (sub_1B1E03DBC() == 0xD000000000000010 && v40 == 0x80000001B2333F70)
    goto LABEL_32;
  v41 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  if ((v41 & 1) == 0)
  {
    if (sub_1B1E03DBC() == 0xD000000000000010 && v42 == 0x80000001B2333F90)
    {
LABEL_32:
      swift_bridgeObjectRelease();
      goto LABEL_37;
    }
    v43 = sub_1B2229D24();
    swift_bridgeObjectRelease();
    if ((v43 & 1) == 0)
    {
      if (qword_1ED4BF430 == -1)
      {
LABEL_45:
        v55[0] = 0;
        v55[1] = 0xE000000000000000;
        swift_retain();
        sub_1B2229430();
        v56 = 0;
        v57 = 0xE000000000000000;
        sub_1B2228890();
        sub_1B19FA278((uint64_t)v58, (uint64_t)v55);
        sub_1B22295EC();
        v49 = v56;
        v50 = v57;
        v51 = sub_1B2228E90();
        if (qword_1ED4BF658 != -1)
          swift_once();
        v55[0] = 0;
        swift_retain();
        sub_1B1F1AD70(v51, v55, v49, v50);
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        return 0xF000000000000007;
      }
LABEL_50:
      swift_once();
      goto LABEL_45;
    }
  }
LABEL_37:
  v44 = (v39 == 2) | v39;
  v45 = swift_allocObject();
  *(_QWORD *)(v45 + 16) = a6;
  *(_QWORD *)(v45 + 24) = 0;
  *(_BYTE *)(v45 + 32) = 0;
  if (sub_1B1E03DBC() == 0xD000000000000010 && v46 == 0x80000001B2333F70)
  {
    swift_bridgeObjectRelease();
    v47 = 1;
  }
  else
  {
    v48 = sub_1B2229D24();
    swift_bridgeObjectRelease();
    if ((v48 & 1) != 0)
      v47 = 1;
    else
      v47 = 2;
  }
  *(_BYTE *)(v45 + 33) = v47;
  *(_BYTE *)(v45 + 34) = v38;
  *(_BYTE *)(v45 + 35) = v44 & 1;
  return v45 | 0x7000000000000000;
}

uint64_t sub_1B1C1113C(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, int a6, unint64_t a7, _QWORD **a8)
{
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  __int128 v21;
  char v22;
  unsigned int *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  char v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  _QWORD *v35;
  uint64_t v36;
  char v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v43;
  char v44;
  _QWORD *v45;
  uint64_t v46;
  char v47;
  _QWORD *v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  _QWORD *v54;
  char v55;
  int v56;
  unint64_t v57;
  char v58;
  uint64_t v59;
  char v60;
  _QWORD **v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  __int16 v67;
  _QWORD *v68;
  char v69;
  unint64_t v70;
  unint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  __int16 v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char v83;
  __int16 v84;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v86;
  unint64_t v87;
  _QWORD *v88;
  __int128 v93;
  uint64_t v94;
  __int128 v95;
  __int128 v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  _BYTE v101[8];
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  _OWORD v109[3];
  uint64_t v110;

  sub_1B1A18378(a2, (uint64_t)v101, &qword_1ED4B9DA8, (uint64_t)&type metadata for GraphEntityComponentPropertyReferences);
  v12 = v103;
  v94 = v102;
  v13 = v104;
  v14 = *(_OWORD *)(a1 + 16);
  v109[0] = *(_OWORD *)a1;
  v109[1] = v14;
  v109[2] = *(_OWORD *)(a1 + 32);
  v110 = *(_QWORD *)(a1 + 48);
  sub_1B1A18378(a2, (uint64_t)&v107, &qword_1ED4B9DA8, (uint64_t)&type metadata for GraphEntityComponentPropertyReferences);
  if (v107)
  {
    v15 = v108;
    v16 = v109[0];
    v17 = v12;
    if (*(_QWORD *)(v108 + 16))
    {
      swift_bridgeObjectRetain();
      v18 = sub_1B1DC3B00(v16, *((uint64_t *)&v16 + 1));
      if ((v19 & 1) != 0)
      {
        v20 = *(_QWORD *)(v15 + 56);
        goto LABEL_8;
      }
      swift_bridgeObjectRelease();
    }
    if (*(_QWORD *)(v94 + 16))
    {
      swift_bridgeObjectRetain();
      v33 = sub_1B1DC3B00(v16, *((uint64_t *)&v16 + 1));
      if ((v34 & 1) != 0)
      {
        v35 = *(_QWORD **)(*(_QWORD *)(v94 + 56) + 8 * v33);
        swift_retain();
        swift_bridgeObjectRelease();
        if (qword_1ED4B9480 != -1)
          swift_once();
        v36 = qword_1ED4D0D68;
        swift_bridgeObjectRetain();
        v37 = sub_1B1DB9018(v35, v36);
        swift_bridgeObjectRelease();
        if ((v37 & 1) == 0)
          return swift_release();
        if (v35[27])
        {
          v38 = (_QWORD *)v35[27];
        }
        else
        {
          swift_retain();
          v38 = v35;
        }
        v74 = v38[2];
        v73 = v38[3];
        v75 = v38[6];
        v76 = *((_BYTE *)v38 + 56);
        v77 = *((_WORD *)v38 + 29);
        swift_retain();
        swift_bridgeObjectRetain();
        v95 = *((_OWORD *)v38 + 2);
        swift_retain();
        swift_release();
        v78 = swift_allocObject();
        *(_QWORD *)(v78 + 16) = v74;
        *(_QWORD *)(v78 + 24) = v73;
        *(_OWORD *)(v78 + 32) = v95;
        *(_QWORD *)(v78 + 48) = v75;
        *(_BYTE *)(v78 + 56) = v76;
        *(_WORD *)(v78 + 58) = v77;
        *(_BYTE *)(v78 + 60) = 5;
        v79 = 0x9000000000000000;
        goto LABEL_72;
      }
      swift_bridgeObjectRelease();
    }
    if (*(_QWORD *)(v12 + 16))
    {
      swift_bridgeObjectRetain();
      v43 = sub_1B1DC3B00(v16, *((uint64_t *)&v16 + 1));
      if ((v44 & 1) != 0)
      {
        v45 = *(_QWORD **)(*(_QWORD *)(v12 + 56) + 8 * v43);
        swift_retain();
        swift_bridgeObjectRelease();
        if (qword_1ED4B9488 != -1)
          swift_once();
        v46 = qword_1ED4D0D70;
        swift_bridgeObjectRetain();
        v47 = sub_1B1DB9018(v45, v46);
        swift_bridgeObjectRelease();
        if ((v47 & 1) == 0)
          return swift_release();
        if (v45[27])
        {
          v48 = (_QWORD *)v45[27];
        }
        else
        {
          swift_retain();
          v48 = v45;
        }
        v81 = v48[2];
        v80 = v48[3];
        v82 = v48[6];
        v83 = *((_BYTE *)v48 + 56);
        v84 = *((_WORD *)v48 + 29);
        swift_retain();
        swift_bridgeObjectRetain();
        v96 = *((_OWORD *)v48 + 2);
        swift_retain();
        swift_release();
        v78 = swift_allocObject();
        *(_QWORD *)(v78 + 16) = v81;
        *(_QWORD *)(v78 + 24) = v80;
        *(_OWORD *)(v78 + 32) = v96;
        *(_QWORD *)(v78 + 48) = v82;
        *(_BYTE *)(v78 + 56) = v83;
        *(_WORD *)(v78 + 58) = v84;
        v79 = 0xA000000000000000;
LABEL_72:
        v54 = *a8;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *a8 = v54;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          v54 = sub_1B1C638E4(0, v54[2] + 1, 1, v54);
          *a8 = v54;
        }
        v53 = v78 | v79;
LABEL_75:
        v87 = v54[2];
        v86 = v54[3];
        if (v87 >= v86 >> 1)
          v54 = sub_1B1C638E4(v86 > 1, v87 + 1, 1, v54);
        v54[2] = v87 + 1;
        v88 = &v54[4 * v87];
        v88[4] = v53;
        *((_BYTE *)v88 + 40) = 1;
        v88[6] = 0;
        *((_BYTE *)v88 + 56) = 1;
        *a8 = v54;
        return swift_release();
      }
      swift_bridgeObjectRelease();
    }
    if (!*(_QWORD *)(v13 + 16))
    {
LABEL_46:
      v105 = 0;
      v106 = 0xE000000000000000;
      sub_1B2229430();
      sub_1B2228890();
      sub_1B22295EC();
      sub_1B2228890();
      swift_bridgeObjectRetain();
      sub_1B2228890();
      swift_bridgeObjectRelease();
      sub_1B2228890();
      v99 = v105;
      v100 = v106;
      sub_1B1A18378(a2, (uint64_t)&v105, &qword_1ED4B9DA8, (uint64_t)&type metadata for GraphEntityComponentPropertyReferences);
      if (v105)
      {
        v97 = 0x3A737475706E690ALL;
        v98 = 0xE900000000000020;
        swift_bridgeObjectRetain();
        sub_1B222853C();
        sub_1B2228890();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_1B2228890();
        swift_bridgeObjectRelease();
        if (*(_QWORD *)(v94 + 16))
        {
          sub_1B2229430();
          swift_bridgeObjectRelease();
          v97 = 0xD00000000000001ALL;
          v98 = 0x80000001B2333EF0;
          swift_bridgeObjectRetain();
          sub_1B222853C();
          sub_1B2228890();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          sub_1B2228890();
          swift_bridgeObjectRelease();
        }
        if (*(_QWORD *)(v17 + 16))
        {
          sub_1B2229430();
          swift_bridgeObjectRelease();
          v97 = 0xD00000000000001FLL;
          v98 = 0x80000001B2333F10;
          swift_bridgeObjectRetain();
          sub_1B222853C();
          sub_1B2228890();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          sub_1B2228890();
          swift_bridgeObjectRelease();
        }
        if (!*(_QWORD *)(v13 + 16))
          goto LABEL_55;
        sub_1B2229430();
        swift_bridgeObjectRelease();
        v97 = 0xD000000000000010;
        v98 = 0x80000001B2333F30;
        swift_bridgeObjectRetain();
        sub_1B222853C();
        sub_1B2228890();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_1B2228890();
      }
      else
      {
        v97 = 0x7374757074756F0ALL;
        v98 = 0xEA0000000000203ALL;
        swift_bridgeObjectRetain();
        sub_1B222853C();
        sub_1B2228890();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_1B2228890();
      }
      swift_bridgeObjectRelease();
LABEL_55:
      if (qword_1ED4BF430 != -1)
        swift_once();
      swift_retain();
      v56 = sub_1B2228E90();
      if (qword_1ED4BF658 != -1)
        swift_once();
      v97 = 0;
      swift_retain();
      sub_1B1F1AD70(v56, &v97, v99, v100);
      swift_release();
      swift_bridgeObjectRelease();
      return swift_release();
    }
    swift_bridgeObjectRetain();
    v49 = sub_1B1DC3B00(v16, *((uint64_t *)&v16 + 1));
    if ((v50 & 1) != 0)
    {
      v51 = *(_QWORD *)(*(_QWORD *)(v13 + 56) + 16 * v49);
      swift_retain();
      swift_bridgeObjectRelease();
      v52 = swift_allocObject();
      *(_QWORD *)(v52 + 16) = v51;
      *(_QWORD *)(v52 + 24) = 0;
      *(_BYTE *)(v52 + 32) = 0;
      v53 = v52 | 0x8000000000000000;
      v54 = *a8;
      v55 = swift_isUniquelyReferenced_nonNull_native();
      *a8 = v54;
      if ((v55 & 1) == 0)
      {
        v54 = sub_1B1C638E4(0, v54[2] + 1, 1, v54);
        *a8 = v54;
      }
      goto LABEL_75;
    }
LABEL_45:
    swift_bridgeObjectRelease();
    goto LABEL_46;
  }
  v21 = v109[0];
  if (!*(_QWORD *)(a4 + 16))
  {
    v17 = v12;
    goto LABEL_46;
  }
  swift_bridgeObjectRetain();
  v18 = sub_1B1DC3B00(v21, *((uint64_t *)&v21 + 1));
  if ((v22 & 1) == 0)
  {
    v17 = v12;
    goto LABEL_45;
  }
  v20 = *(_QWORD *)(a4 + 56);
LABEL_8:
  v23 = (unsigned int *)(v20 + 16 * v18);
  v24 = *((_QWORD *)v23 + 1);
  v25 = *v23;
  v26 = v23[1];
  swift_retain_n();
  swift_bridgeObjectRelease();
  if ((_DWORD)v25 != -1 || (_DWORD)v26 != 0)
  {
    v28 = sub_1B1C10AB8(a3, a4, a5, a6 & 0x10101, a7 | ((HIDWORD(a7) & 1) << 32), v25 | (v26 << 32), v24, (uint64_t *)v109);
    if ((~v28 & 0xF000000000000007) != 0)
    {
      v57 = v28;
      v58 = v29;
      v59 = v30;
      v60 = v31 & 1;
      v61 = a8;
    }
    else
    {
      if (*(_QWORD *)(v24 + 216))
      {
        v32 = *(_QWORD *)(v24 + 216);
      }
      else
      {
        swift_retain();
        v32 = v24;
      }
      v61 = a8;
      v62 = swift_allocObject();
      *(_DWORD *)(v62 + 16) = v25;
      *(_DWORD *)(v62 + 20) = v26;
      v64 = *(_QWORD *)(v32 + 16);
      v63 = *(_QWORD *)(v32 + 24);
      v65 = *(_QWORD *)(v32 + 48);
      v66 = *(_BYTE *)(v32 + 56);
      v67 = *(_WORD *)(v32 + 58);
      swift_retain();
      swift_bridgeObjectRetain();
      v93 = *(_OWORD *)(v32 + 32);
      swift_retain();
      swift_release();
      v59 = 0;
      *(_QWORD *)(v62 + 24) = v64;
      *(_QWORD *)(v62 + 32) = v63;
      *(_OWORD *)(v62 + 40) = v93;
      *(_QWORD *)(v62 + 56) = v65;
      *(_BYTE *)(v62 + 64) = v66;
      v57 = v62 | 0x3000000000000000;
      v58 = 1;
      v60 = 1;
      *(_WORD *)(v62 + 66) = v67;
    }
    v68 = *v61;
    sub_1B1B1DD24(v57);
    v69 = swift_isUniquelyReferenced_nonNull_native();
    *v61 = v68;
    if ((v69 & 1) == 0)
    {
      v68 = sub_1B1C638E4(0, v68[2] + 1, 1, v68);
      *v61 = v68;
    }
    v71 = v68[2];
    v70 = v68[3];
    if (v71 >= v70 >> 1)
      v68 = sub_1B1C638E4(v70 > 1, v71 + 1, 1, v68);
    v68[2] = v71 + 1;
    v72 = &v68[4 * v71];
    v72[4] = v57;
    *((_BYTE *)v72 + 40) = v58;
    v72[6] = v59;
    *((_BYTE *)v72 + 56) = v60;
    *v61 = v68;
    swift_release();
    sub_1B1A05610(v57);
    return swift_release();
  }
  if (qword_1ED4BF430 != -1)
    swift_once();
  v105 = 0;
  v106 = 0xE000000000000000;
  swift_retain();
  sub_1B2229430();
  sub_1B2228890();
  LOBYTE(v99) = a3;
  sub_1B22295EC();
  sub_1B2228890();
  swift_bridgeObjectRetain();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  v40 = v105;
  v39 = v106;
  v41 = sub_1B2228E90();
  if (qword_1ED4BF658 != -1)
    swift_once();
  v105 = 0;
  swift_retain();
  sub_1B1F1AD70(v41, &v105, v40, v39);
  swift_release_n();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t sub_1B1C11DE8(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5;
  int64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  int64_t v23;
  unint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  char v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  BOOL v51;
  unint64_t v53;
  char v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  int *v76;
  int v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v90;
  BOOL v91;
  char v92;
  char v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  int v102;
  ValueMetadata *v103;
  BOOL v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  unint64_t v109;
  unint64_t v110;
  uint64_t v111;
  int v112;
  uint64_t v113;
  unint64_t v114;
  char v115;
  unint64_t v116;
  _QWORD *v117;
  unint64_t v118;
  unint64_t v119;
  int v120;
  _QWORD *v121;
  _QWORD *v122;
  unint64_t v123;
  unint64_t v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t v130;
  int64_t v131;
  uint64_t *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  unint64_t v137;
  uint64_t v138;
  char v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  __int128 v149;
  uint64_t v150;
  uint64_t v151;
  __int128 v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  ValueMetadata *v167;
  uint64_t v168;
  unint64_t v169;
  int v170;
  int v171;
  unint64_t v172;
  unint64_t v173;
  char v174;
  __int16 v175;

  v131 = *(_QWORD *)(a4 + 16);
  if (!v131)
    return v131 != 0;
  v5 = a4;
  v130 = a2;
  v125 = a1;
  if (a3)
  {
    v7 = *(_QWORD *)(a3 + 16);
    if (v7)
    {
      v169 = MEMORY[0x1E0DEE9D8];
      swift_bridgeObjectRetain();
      sub_1B202AEDC(0, v7, 0);
      v137 = v169;
      v8 = (_QWORD *)(a3 + 40);
      do
      {
        v9 = *(v8 - 1);
        v10 = (_QWORD *)*v8;
        swift_retain();
        v11 = sub_1B2229304();
        result = swift_conformsToProtocol2();
        if (!result)
          goto LABEL_198;
        result = swift_conformsToProtocol2();
        if (!result)
          goto LABEL_199;
        v13 = result;
        v14 = v10[5];
        v15 = v10[3];
        v165 = v10[2];
        if (v10[27])
        {
          v16 = (_QWORD *)v10[27];
        }
        else
        {
          swift_retain();
          v16 = v10;
        }
        v17 = v16[4];
        swift_bridgeObjectRetain();
        swift_retain();
        swift_retain();
        swift_release();
        swift_release();
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v19 = v137;
        v169 = v137;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_1B202AEDC(0, *(_QWORD *)(v137 + 16) + 1, 1);
          v19 = v169;
        }
        v21 = *(_QWORD *)(v19 + 16);
        v20 = *(_QWORD *)(v19 + 24);
        if (v21 >= v20 >> 1)
        {
          sub_1B202AEDC(v20 > 1, v21 + 1, 1);
          v19 = v169;
        }
        *(_QWORD *)(v19 + 16) = v21 + 1;
        v137 = v19;
        v22 = (_QWORD *)(v19 + 56 * v21);
        v22[4] = v9;
        v22[5] = v11;
        v22[6] = v13;
        v22[7] = v14;
        v22[8] = v165;
        v22[9] = v15;
        v22[10] = v17;
        v8 += 2;
        --v7;
      }
      while (v7);
      swift_bridgeObjectRelease();
      a2 = v130;
      a1 = v125;
      v5 = a4;
    }
    else
    {
      v137 = MEMORY[0x1E0DEE9D8];
    }
  }
  else
  {
    v137 = 0;
  }
  v123 = HIDWORD(a1);
  v126 = HIDWORD(a2);
  v169 = MEMORY[0x1E0DEE9D8];
  v23 = v131;
  sub_1B202AEDC(0, v131, 0);
  v24 = v169;
  v25 = (_QWORD *)(v5 + 40);
  do
  {
    v26 = v24;
    v27 = *(v25 - 1);
    v28 = (_QWORD *)*v25;
    swift_retain();
    v29 = sub_1B2229304();
    result = swift_conformsToProtocol2();
    if (!result)
    {
      __break(1u);
LABEL_197:
      __break(1u);
LABEL_198:
      __break(1u);
LABEL_199:
      __break(1u);
      return result;
    }
    result = swift_conformsToProtocol2();
    if (!result)
      goto LABEL_197;
    v30 = result;
    v31 = v28[3];
    v162 = v28[2];
    v166 = v28[5];
    if (v28[27])
    {
      v32 = (_QWORD *)v28[27];
    }
    else
    {
      swift_retain();
      v32 = v28;
    }
    v33 = v32[4];
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_release();
    swift_release();
    v34 = swift_isUniquelyReferenced_nonNull_native();
    v24 = v26;
    v169 = v26;
    if ((v34 & 1) == 0)
    {
      sub_1B202AEDC(0, *(_QWORD *)(v26 + 16) + 1, 1);
      v24 = v169;
    }
    v36 = *(_QWORD *)(v24 + 16);
    v35 = *(_QWORD *)(v24 + 24);
    v37 = v36 + 1;
    if (v36 >= v35 >> 1)
    {
      sub_1B202AEDC(v35 > 1, v36 + 1, 1);
      v24 = v169;
    }
    *(_QWORD *)(v24 + 16) = v37;
    v38 = (_QWORD *)(v24 + 32 + 56 * v36);
    *v38 = v27;
    v38[1] = v29;
    v38[2] = v30;
    v38[3] = v166;
    v38[4] = v162;
    v38[5] = v31;
    v38[6] = v33;
    v25 += 2;
    --v23;
  }
  while (v23);
  if (!v137)
  {
    v136 = v24 + 32;
    goto LABEL_100;
  }
  v136 = v24 + 32;
  v134 = *(_QWORD *)(v137 + 16);
  if (!v134)
  {
LABEL_100:
    v138 = 0;
    v139 = 1;
    goto LABEL_101;
  }
  v127 = v24;
  v39 = *(_QWORD *)(*v132 + 16);
  v141 = *v132 + 32;
  swift_bridgeObjectRetain();
  v40 = 0;
  v138 = 0;
  v139 = 1;
  v133 = v39;
  while (2)
  {
    if (!v39)
      goto LABEL_34;
    v41 = v137 + 32 + 56 * v40;
    v43 = *(_DWORD *)v41;
    v42 = *(_DWORD *)(v41 + 4);
    v167 = *(ValueMetadata **)(v41 + 8);
    v159 = *(_QWORD *)(v41 + 24);
    v44 = *(_QWORD *)(v41 + 40);
    v163 = *(_QWORD *)(v41 + 32);
    v135 = v40;
    v45 = *(_QWORD *)(v41 + 48);
    swift_bridgeObjectRetain();
    v157 = v45;
    swift_retain();
    swift_bridgeObjectRetain();
    v151 = v44;
    while (1)
    {
      v143 = v39;
      v46 = v39 - 1;
      v47 = *(_QWORD *)(v141 + 40 * (v39 - 1) + 24);
      v48 = *(_QWORD *)(v47 + 16);
      v153 = v39 - 1;
      v155 = v47;
      if (v48)
        break;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
LABEL_64:
      if (v167 == &type metadata for WorldTransform)
      {
        v57 = v47;
        v58 = *(_QWORD *)(v47 + 16);
        swift_bridgeObjectRetain();
        swift_retain();
        swift_bridgeObjectRetain();
        if (v58)
        {
          v59 = 0;
          v145 = v57 + 80;
          v60 = MEMORY[0x1E0DEE9D8];
          do
          {
            v61 = (_QWORD *)(v145 + 56 * v59);
            v62 = v59;
            while (1)
            {
              if (*((_DWORD *)v61 - 12) == v43 && *((_DWORD *)v61 - 11) == v42)
              {
                v64 = *(v61 - 5);
                if (swift_dynamicCastMetatype()
                  || swift_dynamicCastMetatype()
                  || swift_dynamicCastMetatype()
                  || swift_dynamicCastMetatype()
                  || swift_dynamicCastMetatype()
                  || swift_dynamicCastMetatype()
                  || swift_dynamicCastMetatype()
                  || swift_dynamicCastMetatype())
                {
                  break;
                }
              }
              ++v62;
              v61 += 7;
              if (v58 == v62)
                goto LABEL_89;
            }
            v149 = *((_OWORD *)v61 - 2);
            v66 = *(v61 - 2);
            v65 = *(v61 - 1);
            v67 = *v61;
            swift_retain();
            swift_bridgeObjectRetain();
            v169 = v60;
            v147 = v66;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              sub_1B202AEDC(0, *(_QWORD *)(v60 + 16) + 1, 1);
              v60 = v169;
            }
            v69 = *(_QWORD *)(v60 + 16);
            v68 = *(_QWORD *)(v60 + 24);
            if (v69 >= v68 >> 1)
            {
              sub_1B202AEDC(v68 > 1, v69 + 1, 1);
              v60 = v169;
            }
            v59 = v62 + 1;
            *(_QWORD *)(v60 + 16) = v69 + 1;
            v70 = v60 + 56 * v69;
            *(_DWORD *)(v70 + 32) = v43;
            *(_DWORD *)(v70 + 36) = v42;
            *(_QWORD *)(v70 + 40) = v64;
            *(_OWORD *)(v70 + 48) = v149;
            *(_QWORD *)(v70 + 64) = v147;
            *(_QWORD *)(v70 + 72) = v65;
            *(_QWORD *)(v70 + 80) = v67;
          }
          while (v58 - 1 != v62);
        }
        else
        {
          v60 = MEMORY[0x1E0DEE9D8];
        }
LABEL_89:
        swift_bridgeObjectRelease();
        swift_release();
        v44 = v151;
        swift_bridgeObjectRelease();
        v71 = *(_QWORD *)(v60 + 16);
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        v46 = v153;
        if (v71)
        {
          swift_release();
          swift_bridgeObjectRelease();
          goto LABEL_92;
        }
      }
      else
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      v39 = v46;
      if (!v46)
      {
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_33;
      }
    }
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain_n();
    v49 = (_QWORD *)(v47 + 40);
    v50 = v159;
    while (2)
    {
      v51 = *((_DWORD *)v49 - 2) == v43 && *((_DWORD *)v49 - 1) == v42;
      if (!v51)
        goto LABEL_42;
      if ((ValueMetadata *)*v49 != v167 || v49[2] != v50)
        goto LABEL_42;
      v53 = v49[5];
      if (v49[3] != v163 || v49[4] != v44)
      {
        v55 = sub_1B2229D24();
        v50 = v159;
        if ((v55 & 1) == 0)
          goto LABEL_42;
      }
      if (!v53)
      {
        if (!v157)
          break;
        goto LABEL_42;
      }
      v169 = v53;
      if (!v157)
        goto LABEL_42;
      sub_1B2229328();
      swift_retain_n();
      swift_bridgeObjectRetain();
      v56 = sub_1B22286E0();
      swift_bridgeObjectRelease();
      swift_release_n();
      v44 = v151;
      swift_release();
      v50 = v159;
      if ((v56 & 1) == 0)
      {
LABEL_42:
        v49 += 7;
        if (!--v48)
        {
          v47 = v155;
          swift_bridgeObjectRelease_n();
          v46 = v153;
          goto LABEL_64;
        }
        continue;
      }
      break;
    }
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
LABEL_92:
    swift_bridgeObjectRelease();
    v51 = (v139 & 1) == 0;
    v139 = 0;
    v72 = v138;
    if (!v51)
      v72 = v143;
    if (v143 > v72)
      v72 = v143;
    v138 = v72;
LABEL_33:
    v39 = v133;
    v40 = v135;
LABEL_34:
    if (++v40 != v134)
      continue;
    break;
  }
  swift_bridgeObjectRelease();
  v24 = v127;
  v37 = *(_QWORD *)(v127 + 16);
  if (!v37)
    goto LABEL_170;
LABEL_101:
  v73 = *v132;
  v146 = *v132 + 32;
  v128 = v24;
  swift_retain();
  v74 = 0;
  v75 = v136;
  v140 = v73;
  v142 = v37;
  while (2)
  {
    v148 = *(_QWORD *)(v73 + 16);
    if (!v148)
      goto LABEL_104;
    v76 = (int *)(v75 + 56 * v74);
    v77 = *v76;
    v78 = v76[1];
    v158 = *((_QWORD *)v76 + 3);
    v79 = *((_QWORD *)v76 + 5);
    v164 = *((_QWORD *)v76 + 1);
    v168 = *((_QWORD *)v76 + 4);
    v144 = v74;
    v80 = *((_QWORD *)v76 + 6);
    swift_bridgeObjectRetain();
    v160 = v80;
    swift_retain();
    swift_bridgeObjectRetain();
    v81 = 0;
    v156 = v79;
    while (2)
    {
      v83 = *(_QWORD *)(v146 + 40 * v81 + 16);
      if (v83)
      {
        v84 = *(_QWORD *)(v83 + 16);
        if (v84)
        {
          swift_bridgeObjectRetain_n();
          swift_bridgeObjectRetain();
          v85 = (_QWORD *)(v83 + 40);
          v86 = v164;
          v87 = v158;
          while (1)
          {
            if (*((_DWORD *)v85 - 2) == v77 && *((_DWORD *)v85 - 1) == v78 && *v85 == v86 && v85[2] == v87)
            {
              v90 = v85[5];
              v91 = v85[3] == v168 && v85[4] == v79;
              if (v91 || (v92 = sub_1B2229D24(), v87 = v158, v86 = v164, (v92 & 1) != 0))
              {
                if (v90)
                {
                  v169 = v90;
                  if (v160)
                  {
                    sub_1B2229328();
                    swift_retain_n();
                    swift_bridgeObjectRetain();
                    v93 = sub_1B22286E0();
                    swift_bridgeObjectRelease();
                    swift_release_n();
                    v79 = v156;
                    swift_release();
                    v87 = v158;
                    v86 = v164;
                    if ((v93 & 1) != 0)
                    {
LABEL_162:
                      swift_release();
                      swift_bridgeObjectRelease();
                      v73 = v140;
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease_n();
                      goto LABEL_164;
                    }
                  }
                }
                else if (!v160)
                {
                  goto LABEL_162;
                }
              }
            }
            v85 += 7;
            if (!--v84)
            {
              swift_bridgeObjectRelease_n();
              goto LABEL_136;
            }
          }
        }
        swift_bridgeObjectRetain();
      }
      swift_bridgeObjectRetain();
LABEL_136:
      if (!swift_dynamicCastMetatype()
        && !swift_dynamicCastMetatype()
        && !swift_dynamicCastMetatype()
        && !swift_dynamicCastMetatype()
        && !swift_dynamicCastMetatype()
        && !swift_dynamicCastMetatype()
        && !swift_dynamicCastMetatype()
        && !swift_dynamicCastMetatype()
        || !v83)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_108;
      }
      v94 = *(_QWORD *)(v83 + 16);
      swift_bridgeObjectRetain();
      swift_retain();
      swift_bridgeObjectRetain();
      v95 = 0;
      v96 = v94 + 1;
      v97 = MEMORY[0x1E0DEE9D8];
LABEL_146:
      v98 = 56 * v95;
      while (v96 != ++v95)
      {
        v99 = v98 + 56;
        v100 = v83 + v98;
        v101 = *(_DWORD *)(v100 + 32);
        v102 = *(_DWORD *)(v100 + 36);
        v103 = *(ValueMetadata **)(v100 + 40);
        v105 = v101 == v77 && v102 == v78 && v103 == &type metadata for WorldTransform;
        v98 = v99;
        if (v105)
        {
          v152 = *(_OWORD *)(v83 + v99 - 8);
          v106 = *(_QWORD *)(v83 + v99 + 16);
          v150 = *(_QWORD *)(v83 + v99 + 8);
          v107 = *(_QWORD *)(v83 + v99 + 24);
          swift_retain();
          swift_bridgeObjectRetain();
          v169 = v97;
          v154 = v81;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            sub_1B202AEDC(0, *(_QWORD *)(v97 + 16) + 1, 1);
            v97 = v169;
          }
          v109 = *(_QWORD *)(v97 + 16);
          v108 = *(_QWORD *)(v97 + 24);
          if (v109 >= v108 >> 1)
          {
            sub_1B202AEDC(v108 > 1, v109 + 1, 1);
            v97 = v169;
          }
          *(_QWORD *)(v97 + 16) = v109 + 1;
          v110 = v97 + 56 * v109;
          *(_DWORD *)(v110 + 32) = v77;
          *(_DWORD *)(v110 + 36) = v78;
          *(_QWORD *)(v110 + 40) = &type metadata for WorldTransform;
          *(_OWORD *)(v110 + 48) = v152;
          *(_QWORD *)(v110 + 64) = v150;
          *(_QWORD *)(v110 + 72) = v106;
          *(_QWORD *)(v110 + 80) = v107;
          v81 = v154;
          goto LABEL_146;
        }
      }
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      v82 = *(_QWORD *)(v97 + 16);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      if (!v82)
      {
LABEL_108:
        ++v81;
        v79 = v156;
        if (v81 == v148)
        {
          swift_release();
          swift_bridgeObjectRelease();
          v73 = v140;
          swift_bridgeObjectRelease();
          goto LABEL_103;
        }
        continue;
      }
      break;
    }
    swift_release();
    swift_bridgeObjectRelease();
    v73 = v140;
    swift_bridgeObjectRelease();
LABEL_164:
    v51 = (v139 & 1) == 0;
    v139 = 0;
    v111 = v138;
    if (!v51)
      v111 = v81;
    if (v81 < v111)
      v111 = v81;
    v138 = v111;
LABEL_103:
    v75 = v136;
    v37 = v142;
    v74 = v144;
LABEL_104:
    if (++v74 != v37)
      continue;
    break;
  }
  swift_release();
  v24 = v128;
LABEL_170:
  v112 = v130;
  if (((_DWORD)v130 != -1 || (_DWORD)v126) && (v113 = *(_QWORD *)(v24 + 16)) != 0)
  {
    v129 = v24;
    v114 = v24 + 40;
    while (!swift_dynamicCastMetatype()
         && !swift_dynamicCastMetatype()
         && !swift_dynamicCastMetatype()
         && !swift_dynamicCastMetatype()
         && !swift_dynamicCastMetatype()
         && !swift_dynamicCastMetatype()
         && !swift_dynamicCastMetatype()
         && !swift_dynamicCastMetatype())
    {
      v114 += 56;
      if (!--v113)
      {
        v115 = 0;
        goto LABEL_192;
      }
    }
    v115 = 1;
LABEL_192:
    v24 = v129;
    v112 = v130;
    if ((v139 & 1) == 0)
    {
LABEL_193:
      v169 = __PAIR64__(v123, v125);
      v170 = v112;
      v171 = v126;
      v172 = v137;
      v173 = v24;
      v174 = v115;
      v175 = 257;
      sub_1B1C913A4(v138, v138, (uint64_t)&v169);
      if ((a5 & 1) != 0)
        goto LABEL_194;
      return v131 != 0;
    }
  }
  else
  {
    v115 = 0;
    if ((v139 & 1) == 0)
      goto LABEL_193;
  }
  v116 = v24;
  v117 = (_QWORD *)*v132;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v117 = sub_1B1C64EAC(0, v117[2] + 1, 1, v117);
  v119 = v117[2];
  v118 = v117[3];
  v120 = v130;
  if (v119 >= v118 >> 1)
  {
    v122 = sub_1B1C64EAC(v118 > 1, v119 + 1, 1, v117);
    v120 = v130;
    v117 = v122;
  }
  v117[2] = v119 + 1;
  v121 = &v117[5 * v119];
  *((_DWORD *)v121 + 8) = v125;
  *((_DWORD *)v121 + 9) = v123;
  *((_DWORD *)v121 + 10) = v120;
  *((_DWORD *)v121 + 11) = v126;
  v121[6] = v137;
  v121[7] = v116;
  *((_BYTE *)v121 + 64) = v115;
  *(_WORD *)((char *)v121 + 65) = 257;
  *v132 = (uint64_t)v117;
  if ((a5 & 1) != 0)
  {
LABEL_194:
    sub_1B1BFF4E0();
    sub_1B1BFF788();
  }
  return v131 != 0;
}

uint64_t sub_1B1C12DC8(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, int a6, unint64_t a7, _QWORD **a8)
{
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  char v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  int v33;
  uint64_t v35;
  uint64_t v36;
  int v37;
  unint64_t v38;
  char v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  __int16 v47;
  _QWORD *v48;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v50;
  unint64_t v51;
  _QWORD *v52;
  __int128 v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  _BYTE v61[8];
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _OWORD v66[3];
  uint64_t v67;

  sub_1B1A18378(a2, (uint64_t)v61, &qword_1ED4B9DA8, (uint64_t)&type metadata for GraphEntityComponentPropertyReferences);
  v13 = *(_OWORD *)(a1 + 16);
  v66[0] = *(_OWORD *)a1;
  v66[1] = v13;
  v66[2] = *(_OWORD *)(a1 + 32);
  v67 = *(_QWORD *)(a1 + 48);
  sub_1B1A18378(a2, (uint64_t)&v64, &qword_1ED4B9DA8, (uint64_t)&type metadata for GraphEntityComponentPropertyReferences);
  if (v64)
  {
    v14 = v65;
    v15 = *(_QWORD *)&v66[0];
    if (*(_QWORD *)(v65 + 16))
    {
      v16 = *((_QWORD *)&v66[0] + 1);
      swift_bridgeObjectRetain();
      v17 = sub_1B1DC3B00(v15, v16);
      if ((v18 & 1) != 0)
      {
        v19 = *(_QWORD *)(v14 + 56);
        goto LABEL_8;
      }
LABEL_15:
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    v20 = *(_QWORD *)&v66[0];
    if (*(_QWORD *)(a4 + 16))
    {
      v21 = *((_QWORD *)&v66[0] + 1);
      swift_bridgeObjectRetain();
      v17 = sub_1B1DC3B00(v20, v21);
      if ((v22 & 1) != 0)
      {
        v19 = *(_QWORD *)(a4 + 56);
LABEL_8:
        v23 = (unsigned int *)(v19 + 16 * v17);
        v24 = *((_QWORD *)v23 + 1);
        v26 = *v23;
        v25 = v23[1];
        swift_retain_n();
        swift_bridgeObjectRelease();
        if ((_DWORD)v26 == -1 && (_DWORD)v25 == 0)
        {
          if (qword_1ED4BF430 != -1)
            swift_once();
          v62 = 0;
          v63 = 0xE000000000000000;
          swift_retain();
          sub_1B2229430();
          sub_1B2228890();
          LOBYTE(v59) = a3;
          sub_1B22295EC();
          sub_1B2228890();
          swift_bridgeObjectRetain();
          sub_1B2228890();
          swift_bridgeObjectRelease();
          sub_1B2228890();
          v35 = v62;
          v36 = v63;
          v37 = sub_1B2228E90();
          if (qword_1ED4BF658 != -1)
            swift_once();
          v62 = 0;
          swift_retain();
          sub_1B1F1AD70(v37, &v62, v35, v36);
          swift_release_n();
          swift_release();
          swift_bridgeObjectRelease();
        }
        else
        {
          v28 = sub_1B1C10AB8(a3, a4, a5, a6 & 0x10101, a7 | ((HIDWORD(a7) & 1) << 32), v26 | (v25 << 32), v24, (uint64_t *)v66);
          if ((~v28 & 0xF000000000000007) != 0)
          {
            v38 = v28;
            v39 = v29;
            v40 = v30;
            v41 = v31 & 1;
          }
          else
          {
            if (*(_QWORD *)(v24 + 216))
            {
              v32 = *(_QWORD *)(v24 + 216);
            }
            else
            {
              swift_retain();
              v32 = v24;
            }
            v42 = swift_allocObject();
            *(_DWORD *)(v42 + 16) = v26;
            *(_DWORD *)(v42 + 20) = v25;
            v44 = *(_QWORD *)(v32 + 16);
            v43 = *(_QWORD *)(v32 + 24);
            v45 = *(_QWORD *)(v32 + 48);
            v46 = *(_BYTE *)(v32 + 56);
            v47 = *(_WORD *)(v32 + 58);
            swift_retain();
            swift_retain();
            swift_bridgeObjectRetain();
            v56 = *(_OWORD *)(v32 + 32);
            swift_retain();
            swift_release();
            *(_QWORD *)(v42 + 24) = v44;
            *(_QWORD *)(v42 + 32) = v43;
            *(_OWORD *)(v42 + 40) = v56;
            *(_QWORD *)(v42 + 56) = v45;
            *(_BYTE *)(v42 + 64) = v46;
            *(_WORD *)(v42 + 66) = v47;
            swift_release();
            v40 = 0;
            v38 = v42 | 0x3000000000000000;
            v39 = 1;
            v41 = 1;
          }
          v48 = *a8;
          sub_1B1B1DD24(v38);
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          *a8 = v48;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            v48 = sub_1B1C638E4(0, v48[2] + 1, 1, v48);
            *a8 = v48;
          }
          v51 = v48[2];
          v50 = v48[3];
          if (v51 >= v50 >> 1)
            v48 = sub_1B1C638E4(v50 > 1, v51 + 1, 1, v48);
          v48[2] = v51 + 1;
          v52 = &v48[4 * v51];
          v52[4] = v38;
          *((_BYTE *)v52 + 40) = v39;
          v52[6] = v40;
          *((_BYTE *)v52 + 56) = v41;
          *a8 = v48;
          swift_release();
          sub_1B1A05610(v38);
        }
        return swift_release();
      }
      goto LABEL_15;
    }
  }
  v62 = 0;
  v63 = 0xE000000000000000;
  sub_1B2229430();
  sub_1B2228890();
  sub_1B22295EC();
  sub_1B2228890();
  swift_bridgeObjectRetain();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  v59 = v62;
  v60 = v63;
  sub_1B1A18378(a2, (uint64_t)&v62, &qword_1ED4B9DA8, (uint64_t)&type metadata for GraphEntityComponentPropertyReferences);
  if (v62)
  {
    v57 = 0x3A737475706E690ALL;
    v58 = 0xE900000000000020;
  }
  else
  {
    v57 = 0x7374757074756F0ALL;
    v58 = 0xEA0000000000203ALL;
  }
  swift_bridgeObjectRetain();
  sub_1B222853C();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  if (qword_1ED4BF430 != -1)
    swift_once();
  swift_retain();
  v33 = sub_1B2228E90();
  if (qword_1ED4BF658 != -1)
    swift_once();
  v57 = 0;
  swift_retain();
  sub_1B1F1AD70(v33, &v57, v59, v60);
  swift_release();
  swift_bridgeObjectRelease();
  return swift_release();
}

void sub_1B1C134C4(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, unint64_t a8, uint64_t a9)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[4];
  int v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v25 = a6;
  v29 = a4;
  v30 = a3;
  v24[2] = a2;
  v27 = HIDWORD(a1);
  v28 = a7;
  v11 = type metadata accessor for GraphScriptingConfig.ScriptInfo();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v13);
  v15 = (char *)v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = (_QWORD *)((char *)v24 - v18);
  v26 = a8;
  v20 = sub_1B1DC4040(a8 | ((HIDWORD(a8) & 1) << 32));
  sub_1B1792810(*(_QWORD *)(a5 + 56) + *(_QWORD *)(v12 + 72) * v20, (uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for GraphScriptingConfig.ScriptInfo);
  sub_1B1A025EC((uint64_t)v15, (uint64_t)v19, (uint64_t (*)(_QWORD))type metadata accessor for GraphScriptingConfig.ScriptInfo);
  v21 = *(_QWORD *)(a9 + 16);
  if (v19[1])
  {
    v22 = *v19;
    v23 = v19[1];
  }
  else
  {
    v22 = *(_QWORD *)(a9 + 8);
    swift_bridgeObjectRetain();
    v23 = v21;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a9 + 8) = v22;
  *(_QWORD *)(a9 + 16) = v23;
  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAE70, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_1B226D240;
  __asm { BR              X12 }
}

uint64_t sub_1B1C13648()
{
  unsigned int v0;
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  _QWORD **v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v9 = v0 >> 8;
  *(_QWORD *)(v5 + 32) = 0x6E77617053;
  *(_QWORD *)(v5 + 40) = 0xE500000000000000;
  swift_bridgeObjectRelease();
  *(_QWORD *)(v3 + 32) = v5;
  *(_BYTE *)(v3 + 24) = v9;
  swift_bridgeObjectRelease();
  *(_QWORD *)v3 = &unk_1E639B4F8;
  v10 = v3 + *(int *)(type metadata accessor for GraphScript(0) + 40);
  sub_1B1B1DC9C(v10, qword_1ED4B7E00, (uint64_t (*)(uint64_t))type metadata accessor for ScriptIndex);
  sub_1B1792810(*(_QWORD *)(v8 - 200), v10, (uint64_t (*)(_QWORD))type metadata accessor for ScriptIndex);
  v11 = type metadata accessor for ScriptIndex();
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v10, 0, 1, v11);
  *(_BYTE *)(v3 + 40) = (v7 & 0x1FFFFFFFFLL) == 0x100000000;
  if ((*(_DWORD *)(v8 - 220) & 1) != 0)
  {
    v12 = swift_allocObject();
    v13 = *(_QWORD *)(v8 - 208);
    *(_DWORD *)(v12 + 16) = v2;
    *(_DWORD *)(v12 + 20) = v13;
    v14 = *(_QWORD **)v3;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v14 = sub_1B1C638E4(0, v14[2] + 1, 1, v14);
    v16 = v14[2];
    v15 = v14[3];
    if (v16 >= v15 >> 1)
      v14 = sub_1B1C638E4(v15 > 1, v16 + 1, 1, v14);
    v14[2] = v16 + 1;
    v17 = &v14[4 * v16];
    v17[4] = v12 | 0xB000000000000000;
    *((_BYTE *)v17 + 40) = 1;
    v17[6] = 0;
    *((_BYTE *)v17 + 56) = 1;
    *(_QWORD *)v3 = v14;
  }
  v18 = *(_QWORD *)(*(_QWORD *)(v4 + 24) + 16);
  *(_QWORD *)(v8 - 232) = v4;
  *(_QWORD *)(v8 - 192) = v6;
  if (v18)
  {
    *(_DWORD *)(v8 - 208) = *(_DWORD *)(v8 - 220) & 0x10101;
    v19 = swift_bridgeObjectRetain();
    *(_QWORD *)(v8 - 200) = v3;
    *(_QWORD *)(v8 - 248) = v19;
    v20 = (uint64_t *)(v19 + 80);
    *(_QWORD *)(v8 - 216) |= v1 << 32;
    v21 = *(_QWORD *)(v8 - 240);
    do
    {
      v22 = *(v20 - 6);
      v23 = *(v20 - 5);
      v25 = *(v20 - 4);
      v24 = *(v20 - 3);
      v26 = *(v20 - 2);
      v27 = *(v20 - 1);
      v28 = *v20;
      v20 += 7;
      *(_QWORD *)(v8 - 152) = v22;
      *(_QWORD *)(v8 - 144) = v23;
      *(_QWORD *)(v8 - 136) = v25;
      *(_QWORD *)(v8 - 128) = v24;
      *(_QWORD *)(v8 - 120) = v26;
      *(_QWORD *)(v8 - 112) = v27;
      *(_QWORD *)(v8 - 104) = v28;
      swift_bridgeObjectRetain();
      sub_1B19FA2B4(v25, v24);
      sub_1B1C12DC8(v8 - 152, v21, *(_QWORD *)(v8 - 176), *(_QWORD *)(v8 - 184), *(_QWORD *)(v8 - 192), *(_DWORD *)(v8 - 208), *(_QWORD *)(v8 - 216), *(_QWORD ***)(v8 - 200));
      swift_bridgeObjectRelease();
      sub_1B19F9FEC(v25, v24);
      --v18;
    }
    while (v18);
    swift_bridgeObjectRelease();
    v3 = *(_QWORD *)(v8 - 200);
    v4 = *(_QWORD *)(v8 - 232);
  }
  v29 = *(_QWORD *)(*(_QWORD *)(v4 + 32) + 16);
  if (v29)
  {
    *(_DWORD *)(v8 - 200) = *(_DWORD *)(v8 - 220) & 0x10101;
    v30 = swift_bridgeObjectRetain();
    *(_QWORD *)(v8 - 208) = v30;
    v31 = (uint64_t *)(v30 + 80);
    v32 = (_QWORD **)v3;
    do
    {
      v33 = *(v31 - 6);
      v34 = *(v31 - 5);
      v35 = *(v31 - 4);
      v36 = *(v31 - 3);
      v37 = *(v31 - 2);
      v38 = *(v31 - 1);
      v39 = *v31;
      v31 += 7;
      *(_QWORD *)(v8 - 152) = v33;
      *(_QWORD *)(v8 - 144) = v34;
      *(_QWORD *)(v8 - 136) = v35;
      *(_QWORD *)(v8 - 128) = v36;
      *(_QWORD *)(v8 - 120) = v37;
      *(_QWORD *)(v8 - 112) = v38;
      *(_QWORD *)(v8 - 104) = v39;
      swift_bridgeObjectRetain();
      sub_1B19FA2B4(v35, v36);
      sub_1B1BFECF8((uint64_t *)(v8 - 152), *(_QWORD *)(v8 - 176), *(_QWORD *)(v8 - 184), *(_QWORD *)(v8 - 192), *(unsigned int *)(v8 - 200), v32);
      swift_bridgeObjectRelease();
      sub_1B19F9FEC(v35, v36);
      --v29;
    }
    while (v29);
    swift_bridgeObjectRelease();
    v4 = *(_QWORD *)(v8 - 232);
  }
  return sub_1B1A04628(v4, (uint64_t (*)(_QWORD))type metadata accessor for GraphScriptingConfig.ScriptInfo);
}

uint64_t sub_1B1C139E4(uint64_t a1, unsigned __int16 *a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;

  v32 = a1;
  v33 = a7;
  sub_1B1B28F74();
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)&v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for ScriptIndex();
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = (uint64_t *)((char *)&v30 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (*((_BYTE *)a2 + 25) == 1)
  {
    *v19 = a3;
    v20 = 256;
  }
  else
  {
    v21 = type metadata accessor for GraphScriptingConfig.ScriptInfo();
    sub_1B1792810(a4 + *(int *)(v21 + 40), (uint64_t)v15, (uint64_t (*)(_QWORD))sub_1B1B28F74);
    v22 = sub_1B222826C();
    v31 = a5;
    v23 = *(_QWORD *)(v22 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v23 + 48))(v15, 1, v22);
    a5 = v31;
    (*(void (**)(_QWORD *, char *, uint64_t))(v23 + 32))(v19, v15, v22);
    v20 = 0;
  }
  swift_storeEnumTagMultiPayload();
  v24 = *((_QWORD *)a2 + 1);
  v25 = *((_QWORD *)a2 + 2);
  if (*((_BYTE *)a2 + 26))
    v26 = 0x10000;
  else
    v26 = 0;
  v27 = v20 | *((unsigned __int8 *)a2 + 24) | v26;
  v28 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1B1C134C4(a5, a6, v28, v24, v25, v27, (uint64_t)v19, v33 | ((HIDWORD(v33) & 1) << 32), v32);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return sub_1B1A04628((uint64_t)v19, (uint64_t (*)(_QWORD))type metadata accessor for ScriptIndex);
}

void sub_1B1C13BE4(unsigned int *a1, uint64_t a2, _BYTE *a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, char **a9)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t updated;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t inited;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned __int8 v46;
  unint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  int *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  char *v74;
  char isUniquelyReferenced_nonNull_native;
  int v76;
  unint64_t v77;
  unint64_t v78;
  char *v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  char v85;
  unint64_t v86;
  unint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  _QWORD *v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  int v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  _QWORD *v117;
  _QWORD *v118;
  uint64_t v119;
  _QWORD v120[2];
  uint64_t v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  unsigned __int16 *v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  _BYTE *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  char v138;
  _BYTE v139[40];

  v127 = a8;
  v128 = a4;
  v124 = a7;
  v125 = a6;
  v132 = a5;
  v130 = a3;
  sub_1B1C1908C(0);
  MEMORY[0x1E0C80A78](v11, v12);
  v131 = (uint64_t)v120 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1B1B28F74();
  MEMORY[0x1E0C80A78](v14, v15);
  v122 = (char *)v120 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17, v18);
  v123 = (uint64_t)v120 - v19;
  updated = type metadata accessor for ParticleUpdateScript(0);
  MEMORY[0x1E0C80A78](updated, v21);
  v23 = (char *)v120 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  inited = type metadata accessor for ParticleInitScript(0);
  MEMORY[0x1E0C80A78](inited, v25);
  v27 = (char *)v120 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v133 = type metadata accessor for GraphScriptingConfig.ScriptInfo();
  MEMORY[0x1E0C80A78](v133, v28);
  v30 = (char *)v120 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v31, v32);
  v34 = (char *)v120 - v33;
  MEMORY[0x1E0C80A78](v35, v36);
  v38 = (char *)v120 - v37;
  MEMORY[0x1E0C80A78](v39, v40);
  v134 = (uint64_t)v120 - v42;
  v126 = (unsigned __int16 *)a2;
  v43 = a2 + 16;
  v44 = *(_QWORD *)(a2 + 16);
  if (*(_QWORD *)(v44 + 16))
  {
    v120[1] = v43;
    v129 = v41;
    v45 = *a1;
    v46 = *((_BYTE *)a1 + 4);
    v139[0] = v46;
    v121 = v45;
    v47 = sub_1B1DC4040(v45 | ((unint64_t)v46 << 32));
    if ((v48 & 1) != 0)
    {
      sub_1B1792810(*(_QWORD *)(v44 + 56) + *(_QWORD *)(v129 + 72) * v47, (uint64_t)v38, (uint64_t (*)(_QWORD))type metadata accessor for GraphScriptingConfig.ScriptInfo);
      v49 = (uint64_t)v38;
      v50 = v134;
      sub_1B1A025EC(v49, v134, (uint64_t (*)(_QWORD))type metadata accessor for GraphScriptingConfig.ScriptInfo);
      if (*(_BYTE *)(v50 + 40) != 1)
        goto LABEL_42;
      *v130 = 1;
      if ((*(_BYTE *)(v50 + 41) & 1) == 0)
      {
        sub_1B1792810(v50, (uint64_t)v34, (uint64_t (*)(_QWORD))type metadata accessor for GraphScriptingConfig.ScriptInfo);
        v51 = *((_QWORD *)v34 + 4);
        if (v51 && *(_QWORD *)(v51 + 16))
        {
          sub_1B1A04628((uint64_t)v34, (uint64_t (*)(_QWORD))type metadata accessor for GraphScriptingConfig.ScriptInfo);
          v52 = *(unsigned __int8 *)v126;
          if (v52 == 5)
          {
            sub_1B1792810(v50, (uint64_t)v30, (uint64_t (*)(_QWORD))type metadata accessor for GraphScriptingConfig.ScriptInfo);
            v53 = (int *)v133;
            v90 = *(_QWORD *)&v30[*(int *)(v133 + 44)];
            sub_1B1A04628((uint64_t)v30, (uint64_t (*)(_QWORD))type metadata accessor for GraphScriptingConfig.ScriptInfo);
            v91 = v132;
            if (!v90)
            {
              v23[24] = 0;
              *((_QWORD *)v23 + 4) = MEMORY[0x1E0DEE9D8];
              v23[40] = 0;
              v92 = &v23[*(int *)(updated + 36)];
              v93 = type metadata accessor for ScriptIndex();
              (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v93 - 8) + 56))(v92, 1, 1, v93);
              *(_QWORD *)v23 = 0xD0000000000000C3;
              *((_QWORD *)v23 + 1) = 0x80000001B232E120;
              *((_QWORD *)v23 + 2) = &unk_1E639B568;
              v94 = sub_1B1C0798C((uint64_t)v23, v128, v91, type metadata accessor for ParticleUpdateScript, (uint64_t)&off_1E639E488, (void (*)(uint64_t, uint64_t *))sub_1B1C1A14C, (void (*)(_BYTE *))sub_1B1C23F14);
              sub_1B1A04628((uint64_t)v23, type metadata accessor for ParticleUpdateScript);
              v95 = v53[11];
              swift_release();
              *(_QWORD *)(v50 + v95) = v94;
              if (*(_BYTE *)(v91 + 48) == 1)
              {
                v96 = MEMORY[0x1E0DEE9D8];
                v97 = sub_1B1B7EF3C(MEMORY[0x1E0DEE9D8]);
                v98 = sub_1B1B7EF5C(v96);
                sub_1B1C07774((uint64_t)v97, (uint64_t)v98, v128, v91);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_release();
              }
            }
            v99 = *(_QWORD *)(*(_QWORD *)(v50 + v53[11]) + 24);
            v64 = v124;
            sub_1B1C19F80(v124, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1C19F04);
            v139[0] = v46;
            v65 = v121;
            sub_1B1FF0044(v99, v91, v125, v64, v126, v50, v121 | ((unint64_t)v46 << 32));
          }
          else
          {
            v53 = (int *)v133;
            if (v52 != 3)
            {
              v100 = v50;
              v101 = v50 + *(int *)(v133 + 48);
              v102 = *(_QWORD *)v101;
              v103 = v135;
              if (*(_BYTE *)(v101 + 8) == 1 && (v104 = *(_QWORD *)(v100 + 32)) != 0)
              {
                v105 = **(_QWORD **)(v132 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues);
                v106 = sub_1B1DA5710(v125);
                swift_bridgeObjectRetain();
                v107 = sub_1B217D830(v106 | ((HIDWORD(v106) & 1) << 32), v105);
                v135 = v103;
                *(_QWORD *)v101 = v107;
                *(_BYTE *)(v101 + 8) = 0;
                v108 = v100 + v53[10];
                v109 = v123;
                sub_1B1792810(v108, v123, (uint64_t (*)(_QWORD))sub_1B1B28F74);
                v110 = sub_1B222826C();
                v111 = *(_QWORD *)(v110 - 8);
                v112 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v111 + 48))(v109, 1, v110);
                sub_1B1A04628(v109, (uint64_t (*)(_QWORD))sub_1B1B28F74);
                if (v112 == 1)
                {
                  v113 = (uint64_t)v122;
                  sub_1B2228260();
                  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v111 + 56))(v113, 0, 1, v110);
                  sub_1B1C1A04C(v113, v108);
                }
                v102 = *(_QWORD *)v101;
                v114 = v132;
                sub_1B201FF60(*(_QWORD *)v101, (uint64_t)&type metadata for IsSubEntityOf, (uint64_t)&off_1E637B1B0, v125);
                if (*(_BYTE *)(v114 + 48) == 1)
                  sub_1B1FE16DC((uint64_t)&type metadata for GraphDebuggingComponent, (uint64_t)&off_1E63AA790, v102);
                v53 = (int *)v133;
                v50 = v134;
                if (*(_QWORD *)(v134 + 24))
                {
                  v115 = v124;
                  sub_1B1C19F80(v124, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1C19F04);
                  v116 = swift_bridgeObjectRetain();
                  v117 = sub_1B1C0F778(v116, v115);
                  sub_1B1C19F80(v115, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1C19FBC);
                  swift_bridgeObjectRelease();
                }
                else
                {
                  v117 = 0;
                }
                v118 = sub_1B1BF89D4(v104, (uint64_t)v126);
                swift_bridgeObjectRelease();
                sub_1B1C11DE8(v125, v102, (uint64_t)v117, (uint64_t)v118, 0);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
              }
              else
              {
                v50 = v100;
              }
              v119 = v124;
              sub_1B1C19F80(v124, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1C19F04);
              v139[0] = v46;
              v65 = v121;
              sub_1B1FF03B4(v102, v132, v126, v128, v50, v125, v119, v121 | ((unint64_t)v46 << 32));
              sub_1B1C19F80(v119, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1C19FBC);
              goto LABEL_41;
            }
            sub_1B1792810(v50, (uint64_t)v30, (uint64_t (*)(_QWORD))type metadata accessor for GraphScriptingConfig.ScriptInfo);
            v54 = *(_QWORD *)&v30[v53[11]];
            sub_1B1A04628((uint64_t)v30, (uint64_t (*)(_QWORD))type metadata accessor for GraphScriptingConfig.ScriptInfo);
            v55 = v132;
            if (!v54)
            {
              *v27 = 0;
              *((_QWORD *)v27 + 4) = MEMORY[0x1E0DEE9D8];
              v27[40] = 0;
              v56 = &v27[*(int *)(inited + 36)];
              v57 = type metadata accessor for ScriptIndex();
              (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v57 - 8) + 56))(v56, 1, 1, v57);
              *((_QWORD *)v27 + 1) = 0xD0000000000000BFLL;
              *((_QWORD *)v27 + 2) = 0x80000001B232DFE0;
              *((_QWORD *)v27 + 3) = &unk_1E639B598;
              v58 = sub_1B1C0798C((uint64_t)v27, v128, v55, type metadata accessor for ParticleInitScript, (uint64_t)&off_1E6394B78, (void (*)(uint64_t, uint64_t *))sub_1B1C1A114, (void (*)(_BYTE *))sub_1B1C1A120);
              sub_1B1A04628((uint64_t)v27, type metadata accessor for ParticleInitScript);
              v59 = v53[11];
              swift_release();
              *(_QWORD *)(v50 + v59) = v58;
              if (*(_BYTE *)(v55 + 48) == 1)
              {
                v60 = MEMORY[0x1E0DEE9D8];
                v61 = sub_1B1B7EF3C(MEMORY[0x1E0DEE9D8]);
                v62 = sub_1B1B7EF5C(v60);
                sub_1B1C07774((uint64_t)v61, (uint64_t)v62, v128, v55);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_release();
              }
            }
            v63 = *(_QWORD *)(*(_QWORD *)(v50 + v53[11]) + 24);
            v64 = v124;
            sub_1B1C19F80(v124, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1C19F04);
            v139[0] = v46;
            v65 = v121;
            sub_1B1FEF7A4(v63, v55, v125, v64, v126, v50, v121 | ((unint64_t)v46 << 32));
          }
          sub_1B1C19F80(v64, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1C19FBC);
LABEL_41:
          *(_BYTE *)(v50 + 40) = 0;
          v89 = v131;
          sub_1B1792810(v50, v131, (uint64_t (*)(_QWORD))type metadata accessor for GraphScriptingConfig.ScriptInfo);
          (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v129 + 56))(v89, 0, 1, v53);
          v139[0] = v46;
          sub_1B20E1804(v89, v65 | ((unint64_t)v46 << 32));
LABEL_42:
          sub_1B1A04628(v50, (uint64_t (*)(_QWORD))type metadata accessor for GraphScriptingConfig.ScriptInfo);
          return;
        }
        sub_1B1A04628((uint64_t)v34, (uint64_t (*)(_QWORD))type metadata accessor for GraphScriptingConfig.ScriptInfo);
      }
      v53 = (int *)v133;
      v66 = *(int *)(v133 + 44);
      v67 = *(_QWORD *)(v50 + v66);
      if (v67)
      {
        v68 = *(_QWORD *)(v67 + 32);
        v69 = swift_conformsToProtocol2();
        if (v69)
          v70 = v69;
        else
          v70 = 0;
        if (v69)
          v71 = v68;
        else
          v71 = 0;
        if (v71)
        {
          v72 = *(_QWORD *)(v132 + OBJC_IVAR____TtC3VFX13EntityManager_replicationStream);
          swift_retain();
          if (v72)
          {
            v73 = *(_BYTE *)(v72 + 80);
            MEMORY[0x1B5E240CC](v72 + 48);
            v72 = *(_QWORD *)(v72 + 56);
          }
          else
          {
            v73 = 0;
          }
          v137 = 0;
          swift_unknownObjectUnownedInit();
          v136 = v132;
          v137 = v72;
          swift_unknownObjectUnownedAssign();
          swift_retain();
          swift_unownedRetain();
          swift_unknownObjectRelease();
          v138 = v73;
          sub_1B1A02530((uint64_t)&v136, (uint64_t)v139);
          sub_1B1E2D290(v71, v70, v128);
          sub_1B1A0256C((uint64_t)v139);
          sub_1B1E31340(1);
          swift_release();
          v53 = (int *)v133;
          v50 = v134;
        }
        else
        {
          swift_retain();
        }
        swift_release();
        *(_QWORD *)(v50 + v66) = 0;
        v74 = *a9;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *a9 = v74;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          v74 = sub_1B1C66DA8(0, *((_QWORD *)v74 + 2) + 1, 1, v74);
          *a9 = v74;
        }
        v76 = v121;
        v78 = *((_QWORD *)v74 + 2);
        v77 = *((_QWORD *)v74 + 3);
        if (v78 >= v77 >> 1)
          v74 = sub_1B1C66DA8(v77 > 1, v78 + 1, 1, v74);
        *((_QWORD *)v74 + 2) = v78 + 1;
        v79 = &v74[8 * v78];
        *((_DWORD *)v79 + 8) = v76;
        v79[36] = v46;
        *a9 = v74;
        swift_release();
      }
      v80 = v50 + v53[12];
      v65 = v121;
      if ((*(_BYTE *)(v80 + 8) & 1) == 0)
      {
        v81 = *(_QWORD *)v80;
        sub_1B1DA4B24(*(_QWORD *)v80);
        *(_QWORD *)v80 = 0;
        *(_BYTE *)(v80 + 8) = 1;
        v82 = v50 + v53[10];
        sub_1B1A04628(v82, (uint64_t (*)(_QWORD))sub_1B1B28F74);
        v83 = sub_1B222826C();
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v83 - 8) + 56))(v82, 1, 1, v83);
        sub_1B1BFEADC(v81);
        v84 = *a9;
        v85 = swift_isUniquelyReferenced_nonNull_native();
        *a9 = v84;
        if ((v85 & 1) == 0)
        {
          v84 = sub_1B1C66DA8(0, *((_QWORD *)v84 + 2) + 1, 1, v84);
          *a9 = v84;
        }
        v87 = *((_QWORD *)v84 + 2);
        v86 = *((_QWORD *)v84 + 3);
        if (v87 >= v86 >> 1)
          v84 = sub_1B1C66DA8(v86 > 1, v87 + 1, 1, v84);
        *((_QWORD *)v84 + 2) = v87 + 1;
        v88 = &v84[8 * v87];
        *((_DWORD *)v88 + 8) = v65;
        v88[36] = v46;
        *a9 = v84;
      }
      *(_BYTE *)(v50 + 41) = 0;
      goto LABEL_41;
    }
  }
}

uint64_t sub_1B1C147A0(uint64_t a1, uint64_t a2, _BYTE *a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, char **a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v28;
  unsigned int v32;
  char v33;

  v10 = v9;
  v28 = a1 + 64;
  v16 = 1 << *(_BYTE *)(a1 + 32);
  v17 = -1;
  if (v16 < 64)
    v17 = ~(-1 << v16);
  v18 = v17 & *(_QWORD *)(a1 + 64);
  v19 = (unint64_t)(v16 + 63) >> 6;
  swift_bridgeObjectRetain();
  v20 = 0;
  while (v18)
  {
    v21 = __clz(__rbit64(v18));
    v18 &= v18 - 1;
    v22 = v21 | (v20 << 6);
LABEL_5:
    v23 = *(_QWORD *)(a1 + 48) + 8 * v22;
    v24 = *(_DWORD *)v23;
    LOBYTE(v23) = *(_BYTE *)(v23 + 4);
    v32 = v24;
    v33 = v23;
    sub_1B1C13BE4(&v32, a2, a3, a4, a5, a6, a7, a8, a9);
    if (v10)
      return swift_release();
  }
  v25 = v20 + 1;
  if (v20 + 1 >= v19)
    return swift_release();
  v26 = *(_QWORD *)(v28 + 8 * v25);
  if (v26)
    goto LABEL_20;
  v25 = v20 + 2;
  if (v20 + 2 >= v19)
    return swift_release();
  v26 = *(_QWORD *)(v28 + 8 * v25);
  if (v26)
    goto LABEL_20;
  v25 = v20 + 3;
  if (v20 + 3 >= v19)
    return swift_release();
  v26 = *(_QWORD *)(v28 + 8 * v25);
  if (v26)
    goto LABEL_20;
  v25 = v20 + 4;
  if (v20 + 4 >= v19)
    return swift_release();
  v26 = *(_QWORD *)(v28 + 8 * v25);
  if (v26)
    goto LABEL_20;
  v25 = v20 + 5;
  if (v20 + 5 >= v19)
    return swift_release();
  v26 = *(_QWORD *)(v28 + 8 * v25);
  if (v26)
  {
LABEL_20:
    v18 = (v26 - 1) & v26;
    v22 = __clz(__rbit64(v26)) + (v25 << 6);
    v20 = v25;
    goto LABEL_5;
  }
  while (v19 - 6 != v20)
  {
    v26 = *(_QWORD *)(a1 + 8 * v20++ + 112);
    if (v26)
    {
      v25 = v20 + 5;
      goto LABEL_20;
    }
  }
  return swift_release();
}

uint64_t sub_1B1C14980(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  BOOL v16;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  ValueMetadata *v30;
  ValueMetadata *v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t inited;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  result = *(_QWORD *)(a3 + 48);
  v45 = *(_QWORD *)(result + 16);
  if (!v45)
    return result;
  v6 = a4;
  v48 = (uint64_t *)(a4 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
  v44 = result + 32;
  swift_bridgeObjectRetain();
  v8 = 0;
  v46 = a2;
  v47 = v6;
  v43 = a1;
  while (1)
  {
    v9 = (uint64_t *)(v44 + 24 * v8);
    v10 = *v9;
    v11 = v9[1];
    v12 = v9[2];
    v13 = *(_QWORD *)(a1 + 16);
    swift_retain();
    if ((*(_BYTE *)(a1 + 184) & 1) != 0)
      goto LABEL_79;
    v14 = *(int *)(*(_QWORD *)(a1 + 168) + 4 * a2);
    v15 = *(_DWORD *)(*(_QWORD *)(v13 + OBJC_IVAR____TtC3VFX13EntityManager__entries) + 12 * (int)v14 + 8);
    swift_retain();
    swift_bridgeObjectRetain();
    swift_release();
    v16 = (_DWORD)v14 == -1 && v15 == 0;
    if (v16 || (v14 & 0x80000000) != 0 || v48[1] <= v14)
    {
      if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v6 + 80) + 16) + 200) & 1) == 0)
        goto LABEL_69;
LABEL_20:
      v18 = 1;
      v19 = *(_QWORD *)(v12 + 16);
      if (v19)
        break;
      goto LABEL_68;
    }
    if (v15 == -1 || *(_DWORD *)(*v48 + 12 * (int)v14 + 8) == v15)
      v35 = *(__int16 *)(*v48 + 12 * (int)v14 + 6);
    else
      v35 = -2;
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v6 + 80) + 8 * v35 + 32) + 200) & 1) == 0)
    {
LABEL_69:
      v37 = qword_1ED4B7850++;
      v49 = MEMORY[0x1E0DEE9D8];
      v50 = v37;
      v51 = MEMORY[0x1E0DEE9E8];
      v52 = MEMORY[0x1E0DEE9E8];
      v38 = *(_BYTE *)(a1 + 184);
      v39 = swift_retain();
      if ((v38 & 1) != 0)
        goto LABEL_79;
      v40 = *(unsigned int *)(*(_QWORD *)(a1 + 168) + 4 * a2);
      v41 = *(unsigned int *)(*(_QWORD *)(v39 + OBJC_IVAR____TtC3VFX13EntityManager__entries) + 12 * (int)v40 + 8);
      swift_release();
      sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAE00, (uint64_t)&type metadata for EntityComponentProperty, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
      inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1B226D240;
      *(_QWORD *)(inited + 32) = v10;
      *(_QWORD *)(inited + 40) = v11;
      swift_retain();
      LOBYTE(v40) = sub_1B1C11DE8(v40 | (v41 << 32), 0xFFFFFFFFuLL, inited, v12, 1);
      swift_setDeallocating();
      swift_arrayDestroy();
      if ((v40 & 1) != 0)
      {
        sub_1B1BFC6AC(v49, v50, v51, v52);
        a1 = v43;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
      }
      else
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
      }
      a2 = v46;
      v6 = v47;
      goto LABEL_5;
    }
    if (v15 != -1 && *(_DWORD *)(*v48 + 12 * (int)v14 + 8) != v15)
      goto LABEL_20;
    v18 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v6 + 136) + 8 * *(int *)(*v48 + 12 * (int)v14) + 32) + 120);
    v19 = *(_QWORD *)(v12 + 16);
    if (v19)
      break;
LABEL_68:
    swift_bridgeObjectRelease();
    swift_release();
LABEL_73:
    a1 = v43;
LABEL_5:
    if (++v8 == v45)
      return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  v20 = (_QWORD *)(v12 + 40);
  v21 = v48;
  while (1)
  {
    v22 = *((_DWORD *)v20 - 1);
    v23 = *((int *)v20 - 2);
    v24 = *v20;
    v25 = v23 == -1 && v22 == 0;
    v26 = v25;
    if (v25)
    {
LABEL_32:
      v27 = -2;
      goto LABEL_33;
    }
    v27 = -2;
    if ((v23 & 0x80000000) == 0 && v21[1] > v23)
    {
      v32 = *v21;
      if (v22 != -1 && *(_DWORD *)(v32 + 12 * (int)v23 + 8) != v22)
        goto LABEL_32;
      v27 = *(__int16 *)(v32 + 12 * (int)v23 + 6);
    }
LABEL_33:
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v6 + 80) + 8 * v27 + 32) + 200) & 1) == 0)
      goto LABEL_59;
    if ((v18 & 1) != 0)
    {
      if ((v26 & 1) != 0)
        goto LABEL_59;
      v28 = v21[1];
      if ((v23 & 0x80000000) != 0 || v28 <= v23)
      {
        if ((v23 & 0x80000000) != 0)
          goto LABEL_59;
LABEL_52:
        if (v28 <= v23
          || (v33 = *v21, v22 != -1) && *(_DWORD *)(v33 + 12 * (int)v23 + 8) != v22
          || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v6 + 136) + 8 * *(int *)(v33 + 12 * (int)v23) + 32) + 120) == 1)
        {
LABEL_59:
          swift_bridgeObjectRelease();
LABEL_60:
          a2 = v46;
          a1 = v43;
          goto LABEL_69;
        }
        goto LABEL_23;
      }
      v29 = *v21;
      if (v22 != -1 && *(_DWORD *)(v29 + 12 * (int)v23 + 8) != v22
        || (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v6 + 136) + 8 * *(int *)(v29 + 12 * (int)v23) + 32) + 120) & 1) != 0)
      {
        goto LABEL_52;
      }
    }
    swift_retain();
    v30 = (ValueMetadata *)sub_1B2229304();
    if (!swift_conformsToProtocol2())
      break;
    if (v30 == &type metadata for SetActive)
      goto LABEL_74;
    v31 = (ValueMetadata *)sub_1B2229304();
    if (!swift_conformsToProtocol2())
      goto LABEL_78;
    v6 = v47;
    if (v31 == &type metadata for NodeVisibilityController)
    {
      if (*(_QWORD *)(v24 + 16) == *(_QWORD *)aVisible_0 && *(_QWORD *)(v24 + 24) == unk_1EEF61418)
      {
LABEL_74:
        swift_bridgeObjectRelease();
        swift_release();
        goto LABEL_60;
      }
      v34 = sub_1B2229D24();
      swift_release();
      v21 = v48;
      if ((v34 & 1) != 0)
        goto LABEL_59;
    }
    else
    {
      swift_release();
      v21 = v48;
    }
LABEL_23:
    v20 += 2;
    if (!--v19)
    {
      swift_release();
      swift_bridgeObjectRelease_n();
      a2 = v46;
      goto LABEL_73;
    }
  }
  __break(1u);
LABEL_78:
  __break(1u);
LABEL_79:
  result = sub_1B2229688();
  __break(1u);
  return result;
}

void sub_1B1C14F64(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int *v3;
  unint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  os_unfair_lock_s *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t i;
  uint64_t v16;
  uint64_t v17;
  __int128 *v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int *v28;
  uint64_t v29;
  uint64_t v30;
  ValueMetadata *v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  BOOL v35;
  unint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t j;
  uint64_t v43;
  uint64_t v44;
  int64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  int *v71;
  int v72;
  int v73;
  char v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  __int128 v101;
  __int128 v102;
  uint64_t v103;
  BOOL v104;
  uint64_t v105;
  uint64_t v106;
  char v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t *v110;
  __int128 v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t k;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  char v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  BOOL v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unsigned int *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  uint64_t v147;
  int *v148;
  int v149;
  int v150;
  char v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  int v159;
  uint64_t v160;
  uint64_t v161;
  char *v162;
  _QWORD *v164;
  int m;
  uint64_t v166;
  unsigned int *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t *v170;
  uint64_t v171;
  uint64_t v172;
  os_unfair_lock_s *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  _QWORD *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  char *v187;
  uint64_t v188;
  uint64_t v189;
  int v190;
  _QWORD *v191;
  _QWORD *v192;
  _QWORD *v193;
  _QWORD *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  int v198;
  uint64_t v199;
  uint64_t v200;
  _QWORD *v201;
  _QWORD *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t *v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216[8];
  uint64_t v217[8];
  _BYTE v218[40];
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  _QWORD *v223;
  uint64_t v224;
  __int128 v225;
  __int128 v226;
  uint64_t v227;
  _OWORD v228[2];
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  _QWORD *v233;
  uint64_t v234;
  __int128 v235;
  __int128 v236;
  uint64_t v237;
  _OWORD v238[2];
  uint64_t v239;
  _OWORD v240[2];
  uint64_t v241;
  _OWORD v242[2];
  uint64_t v243;
  _BYTE v244[40];
  _OWORD v245[2];
  uint64_t v246;
  _BYTE v247[40];
  __int128 v248;
  _OWORD v249[2];
  __int128 v250;
  _OWORD v251[2];
  _OWORD v252[2];
  uint64_t v253;

  v1 = a1;
  v203 = *(_QWORD *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_mainGraphScriptGroup);
  *(_QWORD *)(v203 + 16) = MEMORY[0x1E0DEE9D8];
  swift_bridgeObjectRelease();
  if (qword_1ED4B9460 != -1)
    swift_once();
  v252[0] = xmmword_1ED4D0988;
  v252[1] = *(_OWORD *)&qword_1ED4D0998;
  v253 = qword_1ED4D09A8;
  sub_1B1E8FCE4(v1, (uint64_t)v252, 0x200000000, v216);
  sub_1B1A18378((uint64_t)v216, (uint64_t)v228, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  v215 = v1;
  if (*(_QWORD *)&v228[0])
  {
    v235 = v228[0];
    v236 = v228[1];
    v237 = v229;
    if (v234 >= 1)
    {
      v186 = v231;
      if (v231)
      {
        v185 = v230;
        v190 = *(unsigned __int8 *)(v232 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
        v189 = v233[4];
        v213 = (uint64_t *)(v1 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
        v191 = v233;
        v183 = v233 + 8;
        v184 = (uint64_t)(v233 + 6);
        swift_retain();
        swift_retain();
        swift_retain();
        v2 = 0;
        while (1)
        {
          v188 = v2;
          v3 = (unsigned int *)(v185 + 48 * v2);
          v4 = *v3;
          v193 = (_QWORD *)v3[1];
          v5 = (uint64_t *)*((_QWORD *)v3 + 2);
          v6 = *((_QWORD *)v3 + 3);
          v8 = *((_QWORD *)v3 + 4);
          v7 = *((_QWORD *)v3 + 5);
          if (v190)
          {
            v9 = *(os_unfair_lock_s **)(v7 + 376);
            swift_retain();
            os_unfair_lock_lock(v9);
            os_unfair_lock_lock(*(os_unfair_lock_t *)(v7 + 344));
          }
          else
          {
            swift_retain();
          }
          ecs_stack_allocator_push_snapshot(v189);
          sub_1B1A18378(v184, (uint64_t)v247, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
          v10 = v191[4];
          v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 40) + 16) + 32) + 16) + 1;
          swift_retain();
          v191[6] = ecs_stack_allocator_allocate(v10, 48 * v11, 8);
          v191[7] = v11;
          v183[1] = 0;
          v183[2] = 0;
          *v183 = 0;
          swift_release();
          v187 = (char *)v7;
          v199 = sub_1B1A12038((uint64_t)&type metadata for GraphScriptGroup, (uint64_t)&off_1E6387AF0, v5, v6, v8, (uint64_t)v191);
          if (v5)
          {
            if (v8)
            {
              v192 = (_QWORD *)v8;
              v12 = 0;
              v13 = MEMORY[0x1E0DEE9D8];
              v1 = v215;
              while (1)
              {
                v201 = v12;
                v14 = *(_QWORD *)(v199 + 32 * (_QWORD)v12);
                *(_QWORD *)v218 = v13;
                v208 = *(_QWORD *)(v14 + 16);
                if (!v208)
                {
                  v40 = v13;
                  v41 = *(_QWORD *)(v13 + 16);
                  if (!v41)
                    goto LABEL_14;
                  goto LABEL_64;
                }
                v204 = v14 + 32;
                swift_bridgeObjectRetain();
                for (i = 0; i != v208; ++i)
                {
                  v18 = (__int128 *)(v204 + 40 * i);
                  v19 = *v18;
                  v20 = v18[1];
                  *(_DWORD *)((char *)v249 + 15) = *(_DWORD *)((char *)v18 + 31);
                  v248 = v19;
                  v249[0] = v20;
                  v21 = *((_QWORD *)&v20 + 1);
                  v22 = (_DWORD)v19 == -1 && DWORD1(v19) == 0;
                  if (v22 || (v19 & 0x80000000) != 0 || v213[1] <= (int)v19)
                  {
                    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v1 + 80) + 16) + 200) & 1) == 0)
                      goto LABEL_18;
LABEL_30:
                    v25 = 1;
                    goto LABEL_31;
                  }
                  v23 = *v213;
                  if (DWORD1(v19) == -1 || *(_DWORD *)(v23 + 12 * (int)v19 + 8) == DWORD1(v19))
                    v24 = *(__int16 *)(v23 + 12 * (int)v19 + 6);
                  else
                    v24 = -2;
                  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v1 + 80) + 8 * v24 + 32) + 200) & 1) == 0)
                    goto LABEL_18;
                  v39 = *v213;
                  if (DWORD1(v19) != -1 && *(_DWORD *)(v39 + 12 * (int)v19 + 8) != DWORD1(v19))
                    goto LABEL_30;
                  v25 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v1 + 136)
                                                       + 8 * *(int *)(v39 + 12 * (int)v19)
                                                       + 32)
                                           + 120);
LABEL_31:
                  v26 = sub_1B1C7A1C4(*((uint64_t *)&v249[0] + 1));
                  if (v26)
                  {
                    v27 = v26;
                    v28 = (unsigned int *)(v21 + 36);
                    while (1)
                    {
                      v29 = (int)*(v28 - 1);
                      v30 = *v28;
                      v31 = *(ValueMetadata **)(v28 + 1);
                      v32 = *(_QWORD *)(v28 + 7);
                      v33 = *(_QWORD *)(v28 + 9);
                      v34 = -2;
                      v35 = (_DWORD)v29 == -1 && (_DWORD)v30 == 0;
                      if (!v35
                        && (v29 & 0x80000000) == 0
                        && v213[1] > v29
                        && ((_DWORD)v30 == -1 || *(_DWORD *)(*v213 + 12 * (int)v29 + 8) == (_DWORD)v30))
                      {
                        v34 = sub_1B1DA4D04(*(_QWORD *)(*v213 + 12 * (int)v29));
                      }
                      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v215 + 80) + 8 * v34 + 32) + 200) != 1)
                        break;
                      if (v25
                        && (v37 = v29 | (unint64_t)(v30 << 32), (sub_1B1DA5684(v37) & 1) != 0))
                      {
                        if ((sub_1B1DA5684(v37) & 1) != 0)
                          break;
                      }
                      else
                      {
                        if (v31 == &type metadata for SetActive)
                          break;
                        if (v31 == &type metadata for NodeVisibilityController)
                        {
                          v38 = sub_1B1F588A4();
                          if (v32 == *(_QWORD *)v38 && v33 == *((_QWORD *)v38 + 1))
                            break;
                          if ((sub_1B2229D24() & 1) != 0)
                            break;
                        }
                      }
                      v28 += 14;
                      if (!--v27)
                        goto LABEL_19;
                    }
LABEL_18:
                    sub_1B1C16514((uint64_t)&v248);
                    sub_1B1CD636C();
                    v16 = *(_QWORD *)(*(_QWORD *)v218 + 16);
                    sub_1B1CD63EC(v16);
                    sub_1B1CD6464(v16, (uint64_t)&v248);
                    nullsub_16(v17);
                  }
LABEL_19:
                  v1 = v215;
                }
                swift_bridgeObjectRelease();
                v40 = *(_QWORD *)v218;
                v13 = MEMORY[0x1E0DEE9D8];
                v41 = *(_QWORD *)(*(_QWORD *)v218 + 16);
                if (!v41)
                {
LABEL_14:
                  swift_release();
                  goto LABEL_15;
                }
LABEL_64:
                v197 = qword_1ED4B7850++;
                *(_QWORD *)v218 = v13;
                v205 = v40;
                v209 = v40 + 32;
                swift_retain_n();
                for (j = 0; j != v41; ++j)
                {
                  v44 = *(_QWORD *)(v209 + 40 * j + 24);
                  v45 = *(_QWORD *)(v44 + 16);
                  if (v45)
                  {
                    v217[0] = MEMORY[0x1E0DEE9D8];
                    swift_bridgeObjectRetain();
                    swift_bridgeObjectRetain_n();
                    sub_1B202A38C(0, v45, 0);
                    v46 = 32;
                    do
                    {
                      v47 = *(_QWORD *)(v44 + v46);
                      sub_1B1CD6360();
                      v48 = *(_QWORD *)(v217[0] + 16);
                      sub_1B1CD63E0(v48);
                      v49 = sub_1B1CD6448(v48, v47);
                      nullsub_16(v49);
                      v46 += 56;
                      --v45;
                    }
                    while (v45);
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease_n();
                    v50 = v217[0];
                  }
                  else
                  {
                    v50 = MEMORY[0x1E0DEE9D8];
                  }
                  v51 = *(_QWORD *)(v50 + 16);
                  v52 = *(char **)v218;
                  v53 = *(_QWORD *)(*(_QWORD *)v218 + 16);
                  v7 = v53 + v51;
                  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
                  if ((isUniquelyReferenced_nonNull_native & 1) == 0 || v7 > *((_QWORD *)v52 + 3) >> 1)
                  {
                    if (v53 <= v7)
                      v55 = v53 + v51;
                    else
                      v55 = v53;
                    v52 = sub_1B1C63D98(isUniquelyReferenced_nonNull_native, v55, 1, v52);
                    *(_QWORD *)v218 = v52;
                  }
                  v56 = *((_QWORD *)v52 + 2);
                  if (sub_1B1C7A1C4(v50))
                  {
                    v57 = &v52[8 * v56 + 32];
                    if (v50 + 32 < (unint64_t)&v57[8 * v51] && (unint64_t)v57 < v50 + 32 + 8 * v51)
                      goto LABEL_239;
                    memcpy(v57, (const void *)(v50 + 32), 8 * v51);
                    if (v51)
                      *((_QWORD *)v52 + 2) += v51;
                  }
                  v43 = swift_bridgeObjectRelease();
                  nullsub_16(v43);
                }
                swift_release_n();
                v59 = *(_QWORD *)v218;
                sub_1B1C7A1C4(*(uint64_t *)v218);
                sub_1B1B68ED0();
                v60 = sub_1B2228CD4();
                v61 = sub_1B1C7A1C4(v59);
                if (v61)
                {
                  v62 = v61;
                  v63 = 0;
                  v210 = v59 + 32;
                  v64 = v60 + 56;
                  do
                  {
                    while (1)
                    {
                      v65 = (unsigned int *)(v210 + 8 * v63);
                      v7 = *v65;
                      v66 = v65[1];
                      ++v63;
                      sub_1B222A06C();
                      sub_1B222A09C();
                      sub_1B222A09C();
                      v67 = sub_1B222A0C0();
                      v68 = -1 << *(_BYTE *)(v60 + 32);
                      v69 = v67 & ~v68;
                      if (((*(_QWORD *)(v64 + ((v69 >> 3) & 0xFFFFFFFFFFFFF8)) >> v69) & 1) != 0)
                        break;
LABEL_95:
                      v75 = swift_isUniquelyReferenced_nonNull_native();
                      *(_QWORD *)v218 = v60;
                      sub_1B1B8FC50(v7 | (v66 << 32), v69, v75);
                      v60 = *(_QWORD *)v218;
                      swift_bridgeObjectRelease();
                      if (v63 == v62)
                        goto LABEL_97;
                      v64 = v60 + 56;
                    }
                    v70 = ~v68;
                    while (1)
                    {
                      v71 = (int *)(*(_QWORD *)(v60 + 48) + 8 * v69);
                      v73 = *v71;
                      v72 = v71[1];
                      if (v73 == (_DWORD)v7 && v72 == (_DWORD)v66)
                        break;
                      v69 = (v69 + 1) & v70;
                      if (((*(_QWORD *)(v64 + ((v69 >> 3) & 0xFFFFFFFFFFFFF8)) >> v69) & 1) == 0)
                        goto LABEL_95;
                    }
                  }
                  while (v63 != v62);
                }
LABEL_97:
                swift_bridgeObjectRelease();
                swift_retain();
                *(_QWORD *)v218 = sub_1B1D1E434(0);
                swift_retain();
                v76 = v205 + 56;
                do
                {
                  v78 = *(_QWORD *)(v76 - 8);
                  if (v78)
                  {
                    swift_bridgeObjectRetain_n();
                    swift_bridgeObjectRetain();
                    v79 = sub_1B1BF74E4(v78);
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease_n();
                  }
                  else
                  {
                    v79 = sub_1B1D1E434(0);
                  }
                  v80 = sub_1B1C7A1C4(v79);
                  v81 = *(char **)v218;
                  v82 = sub_1B1C7A1C4(*(uint64_t *)v218) + v80;
                  v83 = swift_isUniquelyReferenced_nonNull_native();
                  if (!v83 || v82 > *((_QWORD *)v81 + 3) >> 1)
                  {
                    if (*((_QWORD *)v81 + 2) <= v82)
                      v84 = v82;
                    else
                      v84 = *((_QWORD *)v81 + 2);
                    v81 = sub_1B1C63D98(v83, v84, 1, v81);
                    *(_QWORD *)v218 = v81;
                  }
                  v85 = *((_QWORD *)v81 + 2);
                  if (sub_1B1C7A1C4(v79))
                  {
                    if (v80 < 0)
                      goto LABEL_239;
                    v86 = &v81[8 * v85 + 32];
                    if (v79 + 32 < (unint64_t)&v86[8 * v80] && (unint64_t)v86 < v79 + 32 + 8 * v80)
                      goto LABEL_239;
                    memcpy(v86, (const void *)(v79 + 32), 8 * v80);
                    if (v80)
                      *((_QWORD *)v81 + 2) += v80;
                  }
                  v77 = swift_bridgeObjectRelease();
                  nullsub_16(v77);
                  v76 += 40;
                  --v41;
                }
                while (v41);
                swift_release_n();
                v88 = *(_QWORD *)v218;
                sub_1B1C7A1C4(*(uint64_t *)v218);
                v89 = sub_1B2228CD4();
                *(_QWORD *)v218 = v89;
                v90 = sub_1B1C7A1C4(v88);
                if (v90)
                {
                  v91 = v90;
                  v92 = v88 + 36;
                  do
                  {
                    sub_1B1B8B00C(v217, *(_QWORD *)(v92 - 4));
                    v92 += 8;
                    --v91;
                  }
                  while (v91);
                  swift_bridgeObjectRelease();
                  v89 = *(_QWORD *)v218;
                }
                else
                {
                  swift_bridgeObjectRelease();
                }
                sub_1B1BFC6AC(v205, v197, v60, v89);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_release();
                v13 = MEMORY[0x1E0DEE9D8];
                v1 = v215;
LABEL_15:
                v12 = (_QWORD *)((char *)v201 + 1);
                if ((_QWORD *)((char *)v201 + 1) == v192)
                  goto LABEL_125;
              }
            }
          }
          else if ((_DWORD)v4 != (_DWORD)v193)
          {
            v93 = MEMORY[0x1E0DEE9D8];
            v1 = v215;
            while (1)
            {
              v95 = *(_QWORD *)(v199 + 32 * v4);
              v217[0] = v93;
              v96 = *(_QWORD *)(v95 + 16);
              if (v96)
                break;
              v115 = v93;
              v116 = *(_QWORD *)(v93 + 16);
              if (!v116)
                goto LABEL_129;
LABEL_158:
              v201 = (_QWORD *)v4;
              v195 = qword_1ED4B7850++;
              *(_QWORD *)v218 = v93;
              v206 = v115;
              v211 = v115 + 32;
              swift_retain_n();
              for (k = 0; k != v116; ++k)
              {
                v119 = v211 + 40 * k;
                v120 = *(_QWORD *)(v119 + 24);
                v121 = *(_QWORD *)(v120 + 16);
                if (v121)
                {
                  v7 = *(_QWORD *)(v119 + 16);
                  v217[0] = sub_1B1A237B0();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain_n();
                  sub_1B1CD62C4(v121);
                  v122 = 32;
                  do
                  {
                    v123 = *(_QWORD *)(v120 + v122);
                    sub_1B1CD6360();
                    v124 = *(_QWORD *)(v217[0] + 16);
                    sub_1B1CD63E0(v124);
                    v125 = sub_1B1CD6448(v124, v123);
                    nullsub_16(v125);
                    v122 += 56;
                    --v121;
                  }
                  while (v121);
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease_n();
                  v126 = v217[0];
                }
                else
                {
                  v126 = sub_1B1D1E434(0);
                }
                v127 = sub_1B1C7A1C4(v126);
                v128 = *(char **)v218;
                v129 = sub_1B1C7A1C4(*(uint64_t *)v218) + v127;
                v130 = swift_isUniquelyReferenced_nonNull_native();
                if ((v130 & 1) == 0 || v129 > *((_QWORD *)v128 + 3) >> 1)
                {
                  if (*((_QWORD *)v128 + 2) <= v129)
                    v131 = v129;
                  else
                    v131 = *((_QWORD *)v128 + 2);
                  v128 = sub_1B1C63D98(v130, v131, 1, v128);
                  *(_QWORD *)v218 = v128;
                }
                v132 = *((_QWORD *)v128 + 2);
                if (sub_1B1C7A1C4(v126))
                {
                  if (v127 < 0
                    || ((v133 = &v128[8 * v132 + 32], v126 + 32 < (unint64_t)&v133[8 * v127])
                      ? (v134 = (unint64_t)v133 >= v126 + 32 + 8 * v127)
                      : (v134 = 1),
                        !v134))
                  {
LABEL_239:
                    sub_1B2229700();
                    __break(1u);
                    swift_release();
                    __break(1u);

                    v242[0] = v225;
                    v242[1] = v226;
                    v243 = v227;
                    sub_1B1F05D48(v201, (unsigned __int16 **)v242, (uint64_t)v244);
                    sub_1B1F03804((char *)v7);
                    ecs_stack_allocator_pop_snapshot((uint64_t)v213);
                    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v7 + 344));
                    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v7 + 376));
                    __break(1u);
                    return;
                  }
                  memcpy(v133, (const void *)(v126 + 32), 8 * v127);
                  if (v127)
                    *((_QWORD *)v128 + 2) += v127;
                }
                v118 = swift_bridgeObjectRelease();
                nullsub_16(v118);
              }
              swift_release_n();
              v135 = *(_QWORD *)v218;
              sub_1B1C7A1C4(*(uint64_t *)v218);
              sub_1B1B68ED0();
              v136 = sub_1B2228CD4();
              v137 = sub_1B1C7A1C4(v135);
              if (v137)
              {
                v138 = v137;
                v139 = 0;
                v140 = v136 + 56;
                do
                {
                  while (1)
                  {
                    v141 = (unsigned int *)(v135 + 32 + 8 * v139);
                    v142 = *v141;
                    v143 = v141[1];
                    ++v139;
                    sub_1B222A06C();
                    sub_1B222A09C();
                    sub_1B222A09C();
                    v144 = sub_1B222A0C0();
                    v145 = -1 << *(_BYTE *)(v136 + 32);
                    v146 = v144 & ~v145;
                    if (((*(_QWORD *)(v140 + ((v146 >> 3) & 0xFFFFFFFFFFFFF8)) >> v146) & 1) != 0)
                      break;
LABEL_190:
                    v152 = swift_isUniquelyReferenced_nonNull_native();
                    *(_QWORD *)v218 = v136;
                    sub_1B1B8FC50(v142 | (v143 << 32), v146, v152);
                    v136 = *(_QWORD *)v218;
                    swift_bridgeObjectRelease();
                    if (v139 == v138)
                      goto LABEL_192;
                    v140 = v136 + 56;
                  }
                  v147 = ~v145;
                  while (1)
                  {
                    v148 = (int *)(*(_QWORD *)(v136 + 48) + 8 * v146);
                    v150 = *v148;
                    v149 = v148[1];
                    if (v150 == (_DWORD)v142 && v149 == (_DWORD)v143)
                      break;
                    v146 = (v146 + 1) & v147;
                    if (((*(_QWORD *)(v140 + ((v146 >> 3) & 0xFFFFFFFFFFFFF8)) >> v146) & 1) == 0)
                      goto LABEL_190;
                  }
                }
                while (v139 != v138);
              }
LABEL_192:
              swift_bridgeObjectRelease();
              swift_retain();
              *(_QWORD *)v218 = sub_1B1D1E434(0);
              swift_retain();
              v153 = v206 + 56;
              v4 = (unint64_t)v201;
              do
              {
                v155 = *(_QWORD *)(v153 - 8);
                if (v155)
                {
                  swift_bridgeObjectRetain_n();
                  swift_bridgeObjectRetain();
                  v156 = sub_1B1BF74E4(v155);
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease_n();
                }
                else
                {
                  v156 = sub_1B1D1E434(0);
                }
                v157 = sub_1B1C7A1C4(v156);
                v7 = *(_QWORD *)v218;
                v158 = sub_1B1C7A1C4(*(uint64_t *)v218) + v157;
                v159 = swift_isUniquelyReferenced_nonNull_native();
                if (!v159 || v158 > *(_QWORD *)(v7 + 24) >> 1)
                {
                  if (*(_QWORD *)(v7 + 16) <= v158)
                    v160 = v158;
                  else
                    v160 = *(_QWORD *)(v7 + 16);
                  v7 = (uint64_t)sub_1B1C63D98(v159, v160, 1, (char *)v7);
                  *(_QWORD *)v218 = v7;
                }
                v161 = *(_QWORD *)(v7 + 16);
                if (sub_1B1C7A1C4(v156))
                {
                  if (v157 < 0)
                    goto LABEL_239;
                  v162 = (char *)(v7 + 8 * v161 + 32);
                  if (v156 + 32 < (unint64_t)&v162[8 * v157] && (unint64_t)v162 < v156 + 32 + 8 * v157)
                    goto LABEL_239;
                  memcpy(v162, (const void *)(v156 + 32), 8 * v157);
                  if (v157)
                    *(_QWORD *)(v7 + 16) += v157;
                }
                v154 = swift_bridgeObjectRelease();
                nullsub_16(v154);
                v153 += 40;
                --v116;
              }
              while (v116);
              swift_release_n();
              v94 = sub_1B1F4E850(*(uint64_t *)v218);
              swift_bridgeObjectRelease();
              sub_1B1BFC6AC(v206, v195, v136, v94);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              v93 = MEMORY[0x1E0DEE9D8];
              v1 = v215;
LABEL_129:
              ++v4;
              swift_release();
              if ((_QWORD *)v4 == v193)
                goto LABEL_125;
            }
            v7 = v95 + 32;
            swift_bridgeObjectRetain();
            v97 = 0;
            while (2)
            {
              v100 = (char *)(v7 + 40 * v97);
              v101 = *(_OWORD *)v100;
              v102 = *((_OWORD *)v100 + 1);
              *(_DWORD *)((char *)v251 + 15) = *(_DWORD *)(v100 + 31);
              v250 = v101;
              v251[0] = v102;
              v103 = *((_QWORD *)&v102 + 1);
              v104 = (_DWORD)v101 == -1 && DWORD1(v101) == 0;
              if (v104 || (v101 & 0x80000000) != 0 || v213[1] <= (int)v101)
              {
                if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v1 + 80) + 16) + 200) & 1) == 0)
                  goto LABEL_132;
              }
              else
              {
                v105 = *v213;
                if (DWORD1(v101) == -1 || *(_DWORD *)(v105 + 12 * (int)v101 + 8) == DWORD1(v101))
                  v106 = *(__int16 *)(v105 + 12 * (int)v101 + 6);
                else
                  v106 = -2;
                if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v1 + 80) + 8 * v106 + 32) + 200) & 1) == 0)
                  goto LABEL_132;
                v114 = *v213;
                if (DWORD1(v101) == -1 || *(_DWORD *)(v114 + 12 * (int)v101 + 8) == DWORD1(v101))
                {
                  v107 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v1 + 136) + 8 * *(int *)(v114 + 12 * (int)v101) + 32)
                                  + 120);
LABEL_145:
                  v108 = sub_1B1C7A1C4(*((uint64_t *)&v251[0] + 1));
                  if (v108)
                  {
                    v109 = v108;
                    v110 = (uint64_t *)(v103 + 80);
                    while (1)
                    {
                      v111 = *(_OWORD *)(v110 - 3);
                      v112 = *(v110 - 1);
                      v113 = *v110;
                      *(_QWORD *)v218 = *(v110 - 6);
                      *(_OWORD *)&v218[8] = *(_OWORD *)(v110 - 5);
                      *(_OWORD *)&v218[24] = v111;
                      v219 = v112;
                      v220 = v113;
                      if ((sub_1B1BFC5CC((unint64_t *)v218, v1, v107) & 1) != 0)
                        break;
                      v110 += 7;
                      if (!--v109)
                        goto LABEL_133;
                    }
LABEL_132:
                    sub_1B1C16514((uint64_t)&v250);
                    sub_1B1CD636C();
                    v98 = *(_QWORD *)(v217[0] + 16);
                    sub_1B1CD63EC(v98);
                    sub_1B1CD6464(v98, (uint64_t)&v250);
                    nullsub_16(v99);
                  }
LABEL_133:
                  if (++v97 == v96)
                  {
                    swift_bridgeObjectRelease();
                    v115 = v217[0];
                    v93 = MEMORY[0x1E0DEE9D8];
                    v116 = *(_QWORD *)(v217[0] + 16);
                    if (!v116)
                      goto LABEL_129;
                    goto LABEL_158;
                  }
                  continue;
                }
              }
              break;
            }
            v107 = 1;
            goto LABEL_145;
          }
          v1 = v215;
LABEL_125:
          v238[0] = v235;
          v238[1] = v236;
          v239 = v237;
          sub_1B1F05D48(v191, (unsigned __int16 **)v238, (uint64_t)v247);
          sub_1B1F03804(v187);
          ecs_stack_allocator_pop_snapshot(v189);
          if ((v190 & 1) != 0)
          {
            os_unfair_lock_unlock(*((os_unfair_lock_t *)v187 + 43));
            os_unfair_lock_unlock(*((os_unfair_lock_t *)v187 + 47));
          }
          swift_release();
          v2 = v188 + 1;
          if (v188 + 1 == v186)
          {
            sub_1B19ED748(v216);
            break;
          }
        }
      }
    }
    sub_1B19ED748(v216);
  }
  if (qword_1ED4B9468 != -1)
    swift_once();
  v245[0] = xmmword_1ED4D0D18;
  v245[1] = *(_OWORD *)&qword_1ED4D0D28;
  v246 = qword_1ED4D0D38;
  sub_1B1E8FCE4(v1, (uint64_t)v245, 0x200000000, v217);
  sub_1B1A18378((uint64_t)v217, (uint64_t)v218, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (*(_QWORD *)v218)
  {
    v225 = *(_OWORD *)v218;
    v226 = *(_OWORD *)&v218[16];
    v227 = *(_QWORD *)&v218[32];
    if (v224 >= 1)
    {
      v207 = v221;
      if (v221)
      {
        v200 = v219;
        v164 = v223;
        v214 = v223[4];
        m = *(unsigned __int8 *)(v222 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
        v194 = v223 + 8;
        v196 = (uint64_t)(v223 + 6);
        swift_retain();
        swift_retain();
        swift_retain();
        v166 = 0;
        v198 = m;
        v202 = v164;
        do
        {
          v167 = (unsigned int *)(v200 + 48 * v166);
          v169 = *v167;
          v168 = v167[1];
          v170 = (uint64_t *)*((_QWORD *)v167 + 2);
          v172 = *((_QWORD *)v167 + 4);
          v171 = *((_QWORD *)v167 + 5);
          v212 = *((_QWORD *)v167 + 3);
          if (m)
          {
            v173 = *(os_unfair_lock_s **)(v171 + 376);
            swift_retain();
            os_unfair_lock_lock(v173);
            os_unfair_lock_lock(*(os_unfair_lock_t *)(v171 + 344));
          }
          else
          {
            swift_retain();
          }
          ecs_stack_allocator_push_snapshot(v214);
          sub_1B1A18378(v196, (uint64_t)v244, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
          v174 = v164[4];
          v175 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v171 + 40) + 16) + 32) + 16) + 1;
          swift_retain();
          v164 = v202;
          v202[6] = ecs_stack_allocator_allocate(v174, 48 * v175, 8);
          v202[7] = v175;
          v194[1] = 0;
          v194[2] = 0;
          *v194 = 0;
          swift_release();
          v176 = sub_1B1A12038((uint64_t)&type metadata for GraphEntityComponentPropertyReferences, (uint64_t)&off_1E63B8ED8, v170, v212, v172, (uint64_t)v202);
          v177 = v176;
          if (v170)
          {
            for (m = v198; v172; --v172)
            {
              v178 = *v170++;
              sub_1B1C14980(v171, v178, v177, v215);
              v177 += 64;
            }
          }
          else
          {
            m = v198;
            if ((_DWORD)v169 != (_DWORD)v168)
            {
              v179 = v176 + (v169 << 6);
              do
              {
                sub_1B1C14980(v171, v169++, v179, v215);
                v179 += 64;
              }
              while (v168 != v169);
            }
          }
          v240[0] = v225;
          v240[1] = v226;
          v241 = v227;
          sub_1B1F05D48(v202, (unsigned __int16 **)v240, (uint64_t)v244);
          sub_1B1F03804((char *)v171);
          ecs_stack_allocator_pop_snapshot(v214);
          if ((m & 1) != 0)
          {
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v171 + 344));
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v171 + 376));
          }
          swift_release();
          ++v166;
        }
        while (v166 != v207);
        sub_1B19ED748(v217);
      }
    }
    v180 = MEMORY[0x1E0DEE9D8];
    sub_1B19ED748(v217);
  }
  else
  {
    v180 = MEMORY[0x1E0DEE9D8];
  }
  *(_QWORD *)&v242[0] = v180;
  v181 = swift_bridgeObjectRetain();
  v182 = sub_1B1BF737C(v181, (uint64_t *)v242);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v203 + 16) = v182;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
}

uint64_t sub_1B1C16514(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1B1C16548(uint64_t a1, char a2)
{
  uint64_t *v3;
  uint64_t v4;
  int v5;
  char v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  unsigned int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  os_unfair_lock_s *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  unint64_t v30;
  unint64_t v31;
  char *v32;
  _QWORD *v33;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  _QWORD *v42;
  size_t v43;
  char *v44;
  char *v45;
  char *v46;
  uint64_t result;
  _QWORD *v48;
  _QWORD *v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57[8];
  _OWORD v58[2];
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  _OWORD v68[2];
  uint64_t v69;
  _BYTE v70[40];
  uint64_t v71;
  int v72;
  char v73;
  uint64_t v74;
  char v75;
  uint64_t v76;

  if ((a2 & 1) != 0)
  {
    if (qword_1ED4B9478 != -1)
      swift_once();
    v3 = &qword_1ED4D0D40;
  }
  else
  {
    if (qword_1EEF57310 != -1)
      swift_once();
    v3 = (uint64_t *)&xmmword_1EEFD5410;
  }
  v4 = *v3;
  v5 = *((_DWORD *)v3 + 2);
  v6 = *((_BYTE *)v3 + 12);
  v7 = v3[2];
  v8 = *((_BYTE *)v3 + 24);
  v9 = v3[4];
  swift_retain();
  v71 = v4;
  v72 = v5;
  v73 = v6;
  v74 = v7;
  v75 = v8;
  v76 = v9;
  sub_1B1E8FCE4(a1, (uint64_t)&v71, 0x200000000, v57);
  sub_1B1A18378((uint64_t)v57, (uint64_t)v58, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (!*(_QWORD *)&v58[0])
  {
    swift_release();
    return MEMORY[0x1E0DEE9D8];
  }
  v65 = v58[0];
  v66 = v58[1];
  v67 = v59;
  if (v64 <= 0 || (v54 = v61) == 0)
  {
    swift_release();
    sub_1B19ED748(v57);
    return MEMORY[0x1E0DEE9D8];
  }
  v53 = v60;
  v10 = v63;
  v11 = v63[4];
  v12 = *(unsigned __int8 *)(v62 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
  v48 = v63 + 13;
  v49 = v63 + 8;
  v50 = (uint64_t)(v63 + 6);
  swift_retain();
  swift_retain();
  swift_retain();
  v13 = 0;
  v14 = 0;
  v15 = (char *)MEMORY[0x1E0DEE9D8];
  v51 = v12;
  v52 = v11;
  while (1)
  {
    v55 = v14;
    v56 = v13;
    v16 = (unsigned int *)(v53 + 48 * v13);
    v18 = *v16;
    v17 = v16[1];
    v19 = (uint64_t *)*((_QWORD *)v16 + 2);
    v21 = *((_QWORD *)v16 + 4);
    v20 = *((_QWORD *)v16 + 5);
    if (v12)
    {
      v22 = *(os_unfair_lock_s **)(v20 + 376);
      swift_retain();
      os_unfair_lock_lock(v22);
      os_unfair_lock_lock(*(os_unfair_lock_t *)(v20 + 344));
    }
    else
    {
      swift_retain();
    }
    ecs_stack_allocator_push_snapshot(v11);
    sub_1B1A18378(v50, (uint64_t)v70, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
    v23 = v10[4];
    v24 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v20 + 40) + 16) + 32) + 16) + 1;
    swift_retain();
    v10[6] = ecs_stack_allocator_allocate(v23, 48 * v24, 8);
    v10[7] = v24;
    v49[1] = 0;
    v49[2] = 0;
    *v49 = 0;
    swift_release();
    if (!v19)
      break;
    if (v21)
    {
      do
      {
        v26 = *v19++;
        v25 = v26;
        v27 = swift_retain();
        if ((*(_BYTE *)(v20 + 184) & 1) != 0)
          goto LABEL_52;
        v28 = *(_DWORD *)(*(_QWORD *)(v20 + 168) + 4 * v25);
        v29 = *(_DWORD *)(*(_QWORD *)(v27 + OBJC_IVAR____TtC3VFX13EntityManager__entries) + 12 * v28 + 8);
        swift_release();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v15 = sub_1B1C63D98(0, *((_QWORD *)v15 + 2) + 1, 1, v15);
        v31 = *((_QWORD *)v15 + 2);
        v30 = *((_QWORD *)v15 + 3);
        if (v31 >= v30 >> 1)
          v15 = sub_1B1C63D98(v30 > 1, v31 + 1, 1, v15);
        *((_QWORD *)v15 + 2) = v31 + 1;
        v32 = &v15[8 * v31];
        *((_DWORD *)v32 + 8) = v28;
        *((_DWORD *)v32 + 9) = v29;
      }
      while (--v21);
    }
LABEL_26:
    v68[0] = v65;
    v68[1] = v66;
    v69 = v67;
    v14 = v55;
    sub_1B1F05D48(v10, (unsigned __int16 **)v68, (uint64_t)v70);
    if (*(_QWORD *)(v10[13] + 16))
    {
      v33 = (_QWORD *)swift_bridgeObjectRetain();
      sub_1B1F05034(v33, v20);
      swift_bridgeObjectRelease();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v35 = v10[13];
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        sub_1B1C92670(0, *(_QWORD *)(v35 + 16));
      }
      else
      {
        v42 = (_QWORD *)MEMORY[0x1E0DEE9D8];
        if (*(_QWORD *)(v35 + 24) >= 2uLL)
        {
          sub_1B1791524(0, (unint64_t *)&qword_1ED4BADE0, (uint64_t (*)(uint64_t))sub_1B1B1F228, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
          v42 = (_QWORD *)swift_allocObject();
          v43 = j__malloc_size(v42);
          v42[2] = 0;
          v42[3] = 2 * ((uint64_t)(v43 - 32) / 72);
        }
        *v48 = v42;
        swift_bridgeObjectRelease();
      }
      if (*(unsigned __int8 *)(v10[2] + OBJC_IVAR____TtC3VFX13EntityManager_currentState) - 1 >= 2)
      {
        v44 = *(char **)(v20 + 232);
        v45 = *(char **)(v20 + 256);
        if (v44 == v45)
        {
          v46 = *(char **)(v20 + 240);
        }
        else
        {
          sub_1B1A1059C(v45, v44);
          v45 = *(char **)(v20 + 232);
          v46 = *(char **)(v20 + 240);
          if (v46 == v45)
          {
            v46 = 0;
            v45 = 0;
            *(_QWORD *)(v20 + 232) = 0;
            *(_QWORD *)(v20 + 240) = 0;
          }
        }
        *(_QWORD *)(v20 + 248) = v46;
        *(_QWORD *)(v20 + 256) = v45;
      }
    }
    v11 = v52;
    ecs_stack_allocator_pop_snapshot(v52);
    v12 = v51;
    if ((v51 & 1) != 0)
    {
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v20 + 344));
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v20 + 376));
    }
    swift_release();
    v13 = v56 + 1;
    if (v56 + 1 == v54)
    {
      swift_release();
      sub_1B19ED748(v57);
      sub_1B19ED748(v57);
      return (uint64_t)v15;
    }
  }
  if ((_DWORD)v18 == (_DWORD)v17)
    goto LABEL_26;
  while (1)
  {
    v36 = swift_retain();
    if ((*(_BYTE *)(v20 + 184) & 1) != 0)
      break;
    v37 = *(_DWORD *)(*(_QWORD *)(v20 + 168) + 4 * v18);
    v38 = *(_DWORD *)(*(_QWORD *)(v36 + OBJC_IVAR____TtC3VFX13EntityManager__entries) + 12 * v37 + 8);
    swift_release();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v15 = sub_1B1C63D98(0, *((_QWORD *)v15 + 2) + 1, 1, v15);
    v40 = *((_QWORD *)v15 + 2);
    v39 = *((_QWORD *)v15 + 3);
    if (v40 >= v39 >> 1)
      v15 = sub_1B1C63D98(v39 > 1, v40 + 1, 1, v15);
    ++v18;
    *((_QWORD *)v15 + 2) = v40 + 1;
    v41 = &v15[8 * v40];
    *((_DWORD *)v41 + 8) = v37;
    *((_DWORD *)v41 + 9) = v38;
    if (v17 == v18)
      goto LABEL_26;
  }
LABEL_52:
  result = sub_1B2229688();
  __break(1u);
  return result;
}

uint64_t sub_1B1C16B70(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t Strong;
  char v20;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  int64_t v28;

  v24 = 0;
  v6 = 0;
  v7 = 1 << *(_BYTE *)(a3 + 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & *(_QWORD *)(a3 + 64);
  v27 = a3 + 64;
  v28 = (unint64_t)(v7 + 63) >> 6;
  v25 = a3 + 104;
  while (v9)
  {
    v10 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    v11 = v10 | (v6 << 6);
LABEL_19:
    if (*(_QWORD *)(*(_QWORD *)(a4 + 264) + 16))
    {
      v14 = (uint64_t *)(*(_QWORD *)(a3 + 48) + 16 * v11);
      v15 = *v14;
      v16 = v14[1];
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1B1DC3B00(v15, v16);
      if ((v17 & 1) != 0)
      {
        swift_retain();
        swift_bridgeObjectRelease();
        Strong = swift_weakLoadStrong();
        swift_release();
        if (Strong)
        {
          if (*(_QWORD *)(Strong + 24) == *(_QWORD *)(a5 + 24) && *(_QWORD *)(Strong + 32) == *(_QWORD *)(a5 + 32))
          {
            swift_bridgeObjectRelease();
            swift_release();
            swift_bridgeObjectRelease();
            swift_release();
            goto LABEL_30;
          }
          v20 = sub_1B2229D24();
          swift_bridgeObjectRelease();
          swift_release();
          swift_bridgeObjectRelease();
          swift_release();
          if ((v20 & 1) != 0)
          {
LABEL_30:
            *(unint64_t *)((char *)a1 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
            ++v24;
          }
        }
        else
        {
          swift_bridgeObjectRelease();
          swift_release();
          swift_bridgeObjectRelease();
        }
      }
      else
      {
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
    }
  }
  v12 = v6 + 1;
  if (v6 + 1 >= v28)
    return sub_1B1C0574C(a1, a2, v24, a3);
  v13 = *(_QWORD *)(v27 + 8 * v12);
  if (v13)
    goto LABEL_18;
  v12 = v6 + 2;
  if (v6 + 2 >= v28)
    return sub_1B1C0574C(a1, a2, v24, a3);
  v13 = *(_QWORD *)(v27 + 8 * v12);
  if (v13)
    goto LABEL_18;
  v12 = v6 + 3;
  if (v6 + 3 >= v28)
    return sub_1B1C0574C(a1, a2, v24, a3);
  v13 = *(_QWORD *)(v27 + 8 * v12);
  if (v13)
    goto LABEL_18;
  v12 = v6 + 4;
  if (v6 + 4 >= v28)
    return sub_1B1C0574C(a1, a2, v24, a3);
  v13 = *(_QWORD *)(v27 + 8 * v12);
  if (v13)
  {
LABEL_18:
    v9 = (v13 - 1) & v13;
    v11 = __clz(__rbit64(v13)) + (v12 << 6);
    v6 = v12;
    goto LABEL_19;
  }
  while (v28 - 5 != v6)
  {
    v13 = *(_QWORD *)(v25 + 8 * v6++);
    if (v13)
    {
      v12 = v6 + 4;
      goto LABEL_18;
    }
  }
  return sub_1B1C0574C(a1, a2, v24, a3);
}

uint64_t sub_1B1C16E50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  char v8;
  unsigned int v9;
  unint64_t v10;
  size_t v11;
  uint64_t isStackAllocationSafe;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  _QWORD v17[2];

  v4 = v3;
  v17[1] = *MEMORY[0x1E0C80C00];
  v8 = *(_BYTE *)(a1 + 32);
  v9 = v8 & 0x3F;
  v10 = (unint64_t)((1 << v8) + 63) >> 6;
  v11 = 8 * v10;
  swift_retain_n();
  isStackAllocationSafe = swift_retain_n();
  if (v9 <= 0xD || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1E0C80A78](isStackAllocationSafe, v13);
    bzero((char *)v17 - ((v11 + 15) & 0x3FFFFFFFFFFFFFF0), v11);
    swift_retain();
    swift_retain();
    v14 = sub_1B1C16B70((_QWORD *)((char *)v17 - ((v11 + 15) & 0x3FFFFFFFFFFFFFF0)), v10, a1, a2, a3);
    swift_release();
    swift_release();
    if (v4)
      swift_willThrow();
    swift_release();
    swift_release();
  }
  else
  {
    v15 = (void *)swift_slowAlloc();
    bzero(v15, v11);
    swift_retain();
    swift_retain();
    v14 = sub_1B1C16B70((unint64_t *)v15, v10, a1, a2, a3);
    swift_release();
    swift_release();
    MEMORY[0x1B5E23F88](v15, -1, -1);
    swift_release();
    swift_release();
  }
  swift_release();
  swift_release();
  return v14;
}

uint64_t sub_1B1C1706C(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(void);
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t Strong;
  uint64_t v23;
  char isUniquelyReferenced_nonNull_native;
  char v25;
  char v26;
  unint64_t v27;
  char v28;
  char v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  char v40;
  uint64_t v41;
  char v42;
  char v43;
  char v44;
  uint64_t v45;
  unint64_t v46;
  char v47;
  char v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  char v57;
  char v58;
  uint64_t v60;
  uint64_t v63;
  uint64_t v64;
  int64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v70;
  uint64_t v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  _OWORD v75[3];
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  __int128 v85;
  __int128 v86;
  _QWORD v87[5];
  _QWORD v88[8];

  v63 = 0;
  v4 = 0;
  v7 = *(_QWORD *)(a3 + 64);
  v5 = a3 + 64;
  v6 = v7;
  v8 = 1 << *(_BYTE *)(v5 - 32);
  v9 = -1;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  v10 = v9 & v6;
  v64 = v5;
  v65 = (unint64_t)(v8 + 63) >> 6;
  v60 = v5 + 40;
  v11 = MEMORY[0x1E0DEA968];
  v12 = MEMORY[0x1E0DEE9B8];
  v66 = MEMORY[0x1E0DEE9B8] + 8;
  v13 = MEMORY[0x1E0DEB940];
  while (1)
  {
    if (v10)
    {
      v70 = (v10 - 1) & v10;
      v71 = v4;
      v14 = __clz(__rbit64(v10)) | (v4 << 6);
      goto LABEL_19;
    }
    v15 = v4 + 1;
    if (v4 + 1 >= v65)
      return sub_1B1C0574C(a1, a2, v63, a3);
    v16 = *(_QWORD *)(v64 + 8 * v15);
    if (!v16)
    {
      v15 = v4 + 2;
      if (v4 + 2 >= v65)
        return sub_1B1C0574C(a1, a2, v63, a3);
      v16 = *(_QWORD *)(v64 + 8 * v15);
      if (!v16)
      {
        v15 = v4 + 3;
        if (v4 + 3 >= v65)
          return sub_1B1C0574C(a1, a2, v63, a3);
        v16 = *(_QWORD *)(v64 + 8 * v15);
        if (!v16)
        {
          v15 = v4 + 4;
          if (v4 + 4 >= v65)
            return sub_1B1C0574C(a1, a2, v63, a3);
          v16 = *(_QWORD *)(v64 + 8 * v15);
          if (!v16)
            break;
        }
      }
    }
LABEL_18:
    v70 = (v16 - 1) & v16;
    v71 = v15;
    v14 = __clz(__rbit64(v16)) + (v15 << 6);
LABEL_19:
    v17 = (uint64_t *)(*(_QWORD *)(a3 + 56) + 24 * v14);
    v18 = v17[1];
    v19 = *(_QWORD *)(*(_QWORD *)(a4 + 264) + 16);
    v67 = v14;
    v88[7] = v17[2];
    if (v19)
    {
      v20 = *v17;
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      sub_1B1DC3B00(v20, v18);
      if ((v21 & 1) != 0)
        swift_retain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    Strong = swift_weakLoadStrong();
    v84 = v11;
    v82 = 0;
    v83 = 0xE000000000000000;
    v23 = *(_QWORD *)(Strong + 16);
    if (v23)
    {
      if (!*(_QWORD *)(v23 + 16))
        goto LABEL_27;
    }
    else
    {
      *(_QWORD *)(Strong + 16) = sub_1B1B7DB30(MEMORY[0x1E0DEE9D8]);
      swift_bridgeObjectRelease();
      v23 = *(_QWORD *)(Strong + 16);
      if (!*(_QWORD *)(v23 + 16))
      {
LABEL_27:
        if (v23)
          goto LABEL_28;
LABEL_33:
        *(_QWORD *)(Strong + 16) = sub_1B1B7DB30(MEMORY[0x1E0DEE9D8]);
        swift_bridgeObjectRelease();
        goto LABEL_28;
      }
    }
    swift_bridgeObjectRetain();
    sub_1B1DC3B00(1701667182, 0xE400000000000000);
    v26 = v25;
    swift_bridgeObjectRelease();
    if ((v26 & 1) != 0)
      goto LABEL_40;
    if (!*(_QWORD *)(Strong + 16))
      goto LABEL_33;
LABEL_28:
    sub_1B1A02864((uint64_t)&v82, (uint64_t)&v85);
    memset((char *)v75 + 8, 0, 32);
    *(_QWORD *)&v72 = 1701667182;
    *((_QWORD *)&v72 + 1) = 0xE400000000000000;
    sub_1B1E0E5B0(&v85, v87);
    sub_1B19FA278((uint64_t)v87, (uint64_t)&v73);
    sub_1B1A057EC((uint64_t)v75 + 8, (uint64_t)&qword_1ED4BB150, v66, (uint64_t)v13, (uint64_t (*)(_QWORD))sub_1B1A02758);
    sub_1B1A0DDAC(&v85, (_OWORD *)((char *)v75 + 8));
    v78 = v74;
    v79 = v75[0];
    v80 = v75[1];
    v81 = *(_QWORD *)&v75[2];
    v76 = v72;
    v77 = v73;
    if (*((_QWORD *)&v72 + 1))
    {
      v74 = v78;
      v75[0] = v79;
      v75[1] = v80;
      *(_QWORD *)&v75[2] = v81;
      v72 = v76;
      v73 = v77;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)&v85 = *(_QWORD *)(Strong + 16);
      *(_QWORD *)(Strong + 16) = 0x8000000000000000;
      sub_1B1B8440C((uint64_t)&v72, 1701667182, 0xE400000000000000, isUniquelyReferenced_nonNull_native);
      *(_QWORD *)(Strong + 16) = v85;
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_1B1A057EC((uint64_t)&v76, (uint64_t)&unk_1ED4BB3A0, (uint64_t)&_s8MetadataVN, (uint64_t)v13, (uint64_t (*)(_QWORD))sub_1B1A02758);
      swift_bridgeObjectRetain();
      v27 = sub_1B1DC3B00(1701667182, 0xE400000000000000);
      v29 = v28;
      swift_bridgeObjectRelease();
      if ((v29 & 1) != 0)
      {
        v30 = swift_isUniquelyReferenced_nonNull_native();
        v31 = *(_QWORD *)(Strong + 16);
        *(_QWORD *)&v85 = v31;
        *(_QWORD *)(Strong + 16) = 0x8000000000000000;
        if ((v30 & 1) == 0)
        {
          sub_1B1EA805C();
          v31 = v85;
        }
        swift_bridgeObjectRelease();
        v32 = *(_QWORD *)(v31 + 56) + 88 * v27;
        v33 = *(_OWORD *)(v32 + 16);
        v72 = *(_OWORD *)v32;
        v73 = v33;
        v35 = *(_OWORD *)(v32 + 48);
        v34 = *(_OWORD *)(v32 + 64);
        v36 = *(_OWORD *)(v32 + 32);
        *(_QWORD *)&v75[2] = *(_QWORD *)(v32 + 80);
        v75[0] = v35;
        v75[1] = v34;
        v74 = v36;
        sub_1B1EA4748(v27, v31);
        *(_QWORD *)(Strong + 16) = v31;
        swift_bridgeObjectRelease();
      }
      else
      {
        memset(v75, 0, 40);
        v73 = 0u;
        v74 = 0u;
        v72 = 0u;
      }
      v11 = MEMORY[0x1E0DEA968];
      sub_1B1A057EC((uint64_t)&v72, (uint64_t)&unk_1ED4BB3A0, (uint64_t)&_s8MetadataVN, (uint64_t)v13, (uint64_t (*)(_QWORD))sub_1B1A02758);
    }
LABEL_40:
    v37 = *(_QWORD *)(Strong + 16);
    if (!v37)
      goto LABEL_48;
    if (!*(_QWORD *)(v37 + 16))
    {
      v81 = 0;
      v79 = 0u;
      v80 = 0u;
      v77 = 0u;
      v78 = 0u;
      v76 = 0u;
      swift_bridgeObjectRetain();
LABEL_47:
      sub_1B1A057EC((uint64_t)&v76, (uint64_t)&unk_1ED4BB3A0, (uint64_t)&_s8MetadataVN, (uint64_t)v13, (uint64_t (*)(_QWORD))sub_1B1A02758);
      swift_bridgeObjectRelease();
LABEL_48:
      v85 = 0u;
      v86 = 0u;
      goto LABEL_49;
    }
    swift_bridgeObjectRetain();
    v38 = sub_1B1DC3B00(1701667182, 0xE400000000000000);
    if ((v39 & 1) == 0)
    {
      v81 = 0;
      v79 = 0u;
      v80 = 0u;
      v77 = 0u;
      v78 = 0u;
      v76 = 0u;
      goto LABEL_47;
    }
    sub_1B19F8F0C(*(_QWORD *)(v37 + 56) + 88 * v38, (uint64_t)&v76);
    if (!*((_QWORD *)&v76 + 1))
      goto LABEL_47;
    sub_1B19F8F0C((uint64_t)&v76, (uint64_t)&v72);
    sub_1B1A057EC((uint64_t)&v76, (uint64_t)&unk_1ED4BB3A0, (uint64_t)&_s8MetadataVN, (uint64_t)v13, (uint64_t (*)(_QWORD))sub_1B1A02758);
    swift_bridgeObjectRelease();
    sub_1B1B9DC78((uint64_t)v75 + 8, (uint64_t)&v85, (uint64_t)&qword_1ED4BB150, v12 + 8, (uint64_t)v13, (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))sub_1B1A02758);
    sub_1B1A203C4((uint64_t)&v72);
LABEL_49:
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v82);
    sub_1B1A0DDAC(&v85, &v76);
    swift_dynamicCast();
    v76 = v72;
    *(_QWORD *)&v72 = 0x657461756C617645;
    *((_QWORD *)&v72 + 1) = 0xE90000000000005FLL;
    sub_1B1A2044C();
    sub_1B1A20490();
    v40 = sub_1B222862C();
    swift_bridgeObjectRelease();
    if ((v40 & 1) != 0)
    {
      v84 = v11;
      v82 = 0;
      v83 = 0xE000000000000000;
      v41 = *(_QWORD *)(Strong + 16);
      if (!v41)
      {
        *(_QWORD *)(Strong + 16) = sub_1B1B7DB30(MEMORY[0x1E0DEE9D8]);
        swift_bridgeObjectRelease();
        v41 = *(_QWORD *)(Strong + 16);
      }
      if (!*(_QWORD *)(v41 + 16))
      {
        v13 = MEMORY[0x1E0DEB940];
        if (v41)
          goto LABEL_58;
LABEL_57:
        *(_QWORD *)(Strong + 16) = sub_1B1B7DB30(MEMORY[0x1E0DEE9D8]);
        swift_bridgeObjectRelease();
        goto LABEL_58;
      }
      swift_bridgeObjectRetain();
      sub_1B1DC3B00(1701667182, 0xE400000000000000);
      v43 = v42;
      swift_bridgeObjectRelease();
      v13 = MEMORY[0x1E0DEB940];
      if ((v43 & 1) != 0)
        goto LABEL_60;
      if (!*(_QWORD *)(Strong + 16))
        goto LABEL_57;
LABEL_58:
      sub_1B1A02864((uint64_t)&v82, (uint64_t)&v85);
      memset((char *)v75 + 8, 0, 32);
      *(_QWORD *)&v72 = 1701667182;
      *((_QWORD *)&v72 + 1) = 0xE400000000000000;
      sub_1B1E0E5B0(&v85, v88);
      sub_1B19FA278((uint64_t)v88, (uint64_t)&v73);
      sub_1B1A057EC((uint64_t)v75 + 8, (uint64_t)&qword_1ED4BB150, v12 + 8, (uint64_t)v13, (uint64_t (*)(_QWORD))sub_1B1A02758);
      sub_1B1A0DDAC(&v85, (_OWORD *)((char *)v75 + 8));
      v78 = v74;
      v79 = v75[0];
      v80 = v75[1];
      v81 = *(_QWORD *)&v75[2];
      v76 = v72;
      v77 = v73;
      if (*((_QWORD *)&v72 + 1))
      {
        v74 = v78;
        v75[0] = v79;
        v75[1] = v80;
        *(_QWORD *)&v75[2] = v81;
        v72 = v76;
        v73 = v77;
        v44 = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)&v85 = *(_QWORD *)(Strong + 16);
        *(_QWORD *)(Strong + 16) = 0x8000000000000000;
        sub_1B1B8440C((uint64_t)&v72, 1701667182, 0xE400000000000000, v44);
        *(_QWORD *)(Strong + 16) = v85;
        swift_bridgeObjectRelease();
LABEL_60:
        v45 = *(_QWORD *)(Strong + 16);
        if (!v45)
          goto LABEL_75;
        goto LABEL_68;
      }
      sub_1B1A057EC((uint64_t)&v76, (uint64_t)&unk_1ED4BB3A0, (uint64_t)&_s8MetadataVN, (uint64_t)v13, (uint64_t (*)(_QWORD))sub_1B1A02758);
      swift_bridgeObjectRetain();
      v46 = sub_1B1DC3B00(1701667182, 0xE400000000000000);
      v48 = v47;
      swift_bridgeObjectRelease();
      if ((v48 & 1) != 0)
      {
        v49 = swift_isUniquelyReferenced_nonNull_native();
        v50 = *(_QWORD *)(Strong + 16);
        *(_QWORD *)&v85 = v50;
        *(_QWORD *)(Strong + 16) = 0x8000000000000000;
        if ((v49 & 1) == 0)
        {
          sub_1B1EA805C();
          v50 = v85;
        }
        swift_bridgeObjectRelease();
        v51 = *(_QWORD *)(v50 + 56) + 88 * v46;
        v52 = *(_OWORD *)(v51 + 16);
        v72 = *(_OWORD *)v51;
        v73 = v52;
        v54 = *(_OWORD *)(v51 + 48);
        v53 = *(_OWORD *)(v51 + 64);
        v55 = *(_OWORD *)(v51 + 32);
        *(_QWORD *)&v75[2] = *(_QWORD *)(v51 + 80);
        v75[0] = v54;
        v75[1] = v53;
        v74 = v55;
        sub_1B1EA4748(v46, v50);
        *(_QWORD *)(Strong + 16) = v50;
        swift_bridgeObjectRelease();
      }
      else
      {
        memset(v75, 0, 40);
        v73 = 0u;
        v74 = 0u;
        v72 = 0u;
      }
      v11 = MEMORY[0x1E0DEA968];
      sub_1B1A057EC((uint64_t)&v72, (uint64_t)&unk_1ED4BB3A0, (uint64_t)&_s8MetadataVN, (uint64_t)v13, (uint64_t (*)(_QWORD))sub_1B1A02758);
      v45 = *(_QWORD *)(Strong + 16);
      if (!v45)
        goto LABEL_75;
LABEL_68:
      if (!*(_QWORD *)(v45 + 16))
      {
        v81 = 0;
        v79 = 0u;
        v80 = 0u;
        v77 = 0u;
        v78 = 0u;
        v76 = 0u;
        swift_bridgeObjectRetain();
LABEL_74:
        sub_1B1A057EC((uint64_t)&v76, (uint64_t)&unk_1ED4BB3A0, (uint64_t)&_s8MetadataVN, (uint64_t)v13, (uint64_t (*)(_QWORD))sub_1B1A02758);
        swift_bridgeObjectRelease();
LABEL_75:
        v85 = 0u;
        v86 = 0u;
        goto LABEL_76;
      }
      swift_bridgeObjectRetain();
      v56 = sub_1B1DC3B00(1701667182, 0xE400000000000000);
      if ((v57 & 1) == 0)
      {
        v81 = 0;
        v79 = 0u;
        v80 = 0u;
        v77 = 0u;
        v78 = 0u;
        v76 = 0u;
        goto LABEL_74;
      }
      sub_1B19F8F0C(*(_QWORD *)(v45 + 56) + 88 * v56, (uint64_t)&v76);
      if (!*((_QWORD *)&v76 + 1))
        goto LABEL_74;
      sub_1B19F8F0C((uint64_t)&v76, (uint64_t)&v72);
      sub_1B1A057EC((uint64_t)&v76, (uint64_t)&unk_1ED4BB3A0, (uint64_t)&_s8MetadataVN, (uint64_t)v13, (uint64_t (*)(_QWORD))sub_1B1A02758);
      swift_bridgeObjectRelease();
      sub_1B1B9DC78((uint64_t)v75 + 8, (uint64_t)&v85, (uint64_t)&qword_1ED4BB150, v12 + 8, (uint64_t)v13, (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))sub_1B1A02758);
      sub_1B1A203C4((uint64_t)&v72);
LABEL_76:
      _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v82);
      sub_1B1A0DDAC(&v85, &v76);
      swift_dynamicCast();
      v58 = sub_1B2228920();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      v10 = v70;
      v4 = v71;
      if ((v58 & 1) != 0)
      {
        *(unint64_t *)((char *)a1 + ((v67 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v67;
        ++v63;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      swift_release();
      v10 = v70;
      v4 = v71;
      v13 = MEMORY[0x1E0DEB940];
    }
  }
  while (v65 - 5 != v4)
  {
    v16 = *(_QWORD *)(v60 + 8 * v4++);
    if (v16)
    {
      v15 = v4 + 4;
      goto LABEL_18;
    }
  }
  return sub_1B1C0574C(a1, a2, v63, a3);
}

uint64_t sub_1B1C17BF0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v5;
  unsigned int v6;
  unint64_t v7;
  size_t v8;
  uint64_t isStackAllocationSafe;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  _QWORD v14[2];

  v14[1] = *MEMORY[0x1E0C80C00];
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v7 = (unint64_t)((1 << v5) + 63) >> 6;
  v8 = 8 * v7;
  swift_retain_n();
  isStackAllocationSafe = swift_bridgeObjectRetain_n();
  if (v6 <= 0xD || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1E0C80A78](isStackAllocationSafe, v10);
    bzero((char *)v14 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0), v8);
    swift_retain();
    swift_bridgeObjectRetain();
    v11 = sub_1B1C1706C((_QWORD *)((char *)v14 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0)), v7, a1, a2);
    swift_release();
    swift_bridgeObjectRelease();
    if (v2)
      swift_willThrow();
    swift_bridgeObjectRelease();
    swift_release();
  }
  else
  {
    v12 = (void *)swift_slowAlloc();
    bzero(v12, v8);
    swift_retain();
    swift_bridgeObjectRetain();
    v11 = sub_1B1C1706C((unint64_t *)v12, v7, a1, a2);
    swift_release();
    swift_bridgeObjectRelease();
    MEMORY[0x1B5E23F88](v12, -1, -1);
    swift_bridgeObjectRelease();
    swift_release();
  }
  swift_bridgeObjectRelease();
  swift_release();
  return v11;
}

uint64_t sub_1B1C17E20(unint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v1 = a1;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v2 = sub_1B22296AC();
    swift_bridgeObjectRelease();
  }
  else
  {
    v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v3 = MEMORY[0x1E0DEE9D8];
  if (v2)
  {
    v31 = MEMORY[0x1E0DEE9D8];
    sub_1B202AF24(0, v2 & ~(v2 >> 63), 0);
    v3 = v31;
    if ((v1 & 0xC000000000000001) != 0)
    {
      v4 = 0;
      v29 = v2;
      v26 = v1;
      do
      {
        v5 = (_QWORD *)MEMORY[0x1B5E21018](v4, v1);
        v6 = v5[6];
        v27 = v5[5];
        v7 = v5[7];
        v8 = v5[8];
        v9 = v5[9];
        v10 = v5[10];
        v11 = v5[11];
        swift_bridgeObjectRetain();
        sub_1B19FA2B4(v7, v8);
        swift_unknownObjectRelease();
        v13 = *(_QWORD *)(v31 + 16);
        v12 = *(_QWORD *)(v31 + 24);
        if (v13 >= v12 >> 1)
          sub_1B202AF24(v12 > 1, v13 + 1, 1);
        ++v4;
        *(_QWORD *)(v31 + 16) = v13 + 1;
        v14 = (_QWORD *)(v31 + 56 * v13);
        v14[4] = v27;
        v14[5] = v6;
        v14[6] = v7;
        v14[7] = v8;
        v14[8] = v9;
        v14[9] = v10;
        v14[10] = v11;
        v1 = v26;
      }
      while (v29 != v4);
    }
    else
    {
      v15 = v1 + 32;
      do
      {
        v16 = *(_QWORD *)(*(_QWORD *)v15 + 48);
        v28 = *(_QWORD *)(*(_QWORD *)v15 + 40);
        v30 = v2;
        v17 = *(_QWORD *)(*(_QWORD *)v15 + 56);
        v18 = *(_QWORD *)(*(_QWORD *)v15 + 64);
        v19 = *(_QWORD *)(*(_QWORD *)v15 + 72);
        v20 = *(_QWORD *)(*(_QWORD *)v15 + 80);
        v21 = *(_QWORD *)(*(_QWORD *)v15 + 88);
        swift_bridgeObjectRetain();
        sub_1B19FA2B4(v17, v18);
        v23 = *(_QWORD *)(v31 + 16);
        v22 = *(_QWORD *)(v31 + 24);
        if (v23 >= v22 >> 1)
          sub_1B202AF24(v22 > 1, v23 + 1, 1);
        *(_QWORD *)(v31 + 16) = v23 + 1;
        v24 = (_QWORD *)(v31 + 56 * v23);
        v24[4] = v28;
        v24[5] = v16;
        v24[6] = v17;
        v24[7] = v18;
        v24[8] = v19;
        v24[9] = v20;
        v24[10] = v21;
        v15 += 8;
        v2 = v30 - 1;
      }
      while (v30 != 1);
    }
  }
  return v3;
}

uint64_t sub_1B1C18034(uint64_t a1, char a2)
{
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  ValueMetadata *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  ValueMetadata *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char v47;
  ValueMetadata *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  int v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t Strong;
  _QWORD *v69;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unsigned __int8 *v77;
  uint64_t v78;
  unint64_t v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char v94;
  __int16 v95;
  char v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD v101[10];
  unint64_t v102;
  uint64_t v103;
  int v104;
  unint64_t v105;
  unint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t *v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  __int128 v118;
  unint64_t v119;
  uint64_t v120;
  _QWORD v121[6];
  uint64_t v122;
  uint64_t v123;
  char v124;
  char v125[8];
  __int128 v126;
  uint64_t v127;
  ValueMetadata *v128;
  _UNKNOWN **v129;
  uint64_t v130;
  _UNKNOWN **v131;
  char v132;
  uint64_t v133;
  char v134;
  uint64_t v135;

  v3 = sub_1B1C16548(a1, a2);
  v5 = v3;
  v6 = *(_QWORD *)(v3 + 16);
  if (v6)
  {
    v7 = 0;
    v117 = 0;
    v8 = v3 + 32;
    v116 = OBJC_IVAR____TtC3VFX13EntityManager_replicationStream;
    v115 = (char *)&v126 + 8;
    v111 = &v123;
    v114 = &v134;
    v9 = &qword_1ED4B8000;
    while (1)
    {
      *(_QWORD *)&v4 = *(_QWORD *)(v8 + 8 * v7);
      v118 = v4;
      v10 = v4;
      if ((_DWORD)v4 == -1)
        break;
      v11 = v9[192];
      swift_retain();
      if ((v10 & 0x80000000) != 0)
        goto LABEL_4;
      if (*(_QWORD *)(a1 + v11 + 8) > (int)v10
        && ((v12 = *(_QWORD *)(a1 + v11), v13 = DWORD1(v118), DWORD1(v118) != -1)
          ? (v14 = *(_DWORD *)(v12 + 12 * (int)v10 + 8) == DWORD1(v118))
          : (v14 = 1),
            v14
         && (v15 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * *(__int16 *)(v12 + 12 * (int)v10 + 6) + 32)
                             + 16),
             v16 = *(_QWORD *)(v15 + 128),
             *(_QWORD *)(v16 + 16))
         && (v17 = sub_1B1DC3AC8((uint64_t)&type metadata for EmitterDescription), (v18 & 1) != 0)))
      {
        v19 = *(ValueMetadata **)(*(_QWORD *)(v15 + 24) + 16 * *(_QWORD *)(*(_QWORD *)(v16 + 56) + 8 * v17) + 32);
        swift_retain();
        if (v19 == &type metadata for EmitterDescription)
        {
          v129 = &off_1E636F320;
          *(_QWORD *)&v126 = v118;
          v128 = &type metadata for VFXEmitter;
          *((_QWORD *)&v126 + 1) = a1;
          sub_1B1A02518(&v126, (uint64_t)&v133);
          v20 = sub_1B19FA070(&v133, v135);
          v21 = sub_1B1C04D48(*v20, v20[1]);
          v22 = *(_QWORD *)(v21 + 16);
          if (v22)
          {
            v113 = v8;
            v23 = 0;
            v109 = v21;
            v24 = v21 + 32;
            v108 = v10 | (v13 << 32);
            v110 = v5;
            v112 = v22;
            *(_QWORD *)&v118 = v21 + 32;
            while (1)
            {
              v38 = v24 + 16 * v23;
              v40 = *(_DWORD *)v38;
              v39 = *(_DWORD *)(v38 + 4);
              v41 = *(_QWORD *)(v38 + 8);
              swift_retain();
              v42 = v40 == -1 && v39 == 0;
              if (v42 || (v40 & 0x80000000) != 0)
              {
                swift_release();
              }
              else
              {
                if (*(_QWORD *)(v41 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8) > (int)v40
                  && ((v43 = *(_QWORD *)(v41 + OBJC_IVAR____TtC3VFX13EntityManager__entries), v39 == -1)
                   || *(_DWORD *)(v43 + 12 * (int)v40 + 8) == v39))
                {
                  v44 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v41 + 80)
                                              + 8 * *(__int16 *)(v43 + 12 * (int)v40 + 6)
                                              + 32)
                                  + 16);
                  v45 = *(_QWORD *)(v44 + 128);
                  if (*(_QWORD *)(v45 + 16)
                    && (v46 = sub_1B1DC3AC8((uint64_t)&type metadata for GraphScriptingConfig), (v47 & 1) != 0))
                  {
                    v48 = *(ValueMetadata **)(*(_QWORD *)(v44 + 24)
                                            + 16 * *(_QWORD *)(*(_QWORD *)(v45 + 56) + 8 * v46)
                                            + 32);
                    swift_release();
                    if (v48 == &type metadata for GraphScriptingConfig)
                    {
                      swift_retain();
                      swift_unownedRetain();
                      swift_release();
                      swift_weakInit();
                      v49 = *(_QWORD *)(a1 + v116);
                      if (v49)
                      {
                        LODWORD(v107) = *(unsigned __int8 *)(v49 + 80);
                        MEMORY[0x1B5E240CC](v49 + 48);
                        v49 = *(_QWORD *)(v49 + 56);
                      }
                      else
                      {
                        LODWORD(v107) = 0;
                      }
                      v127 = 0;
                      swift_unknownObjectUnownedInit();
                      *(_QWORD *)&v126 = a1;
                      v127 = v49;
                      swift_unknownObjectUnownedAssign();
                      swift_unownedRetain();
                      swift_unknownObjectRelease();
                      LOBYTE(v128) = v107;
                      sub_1B1A02530((uint64_t)&v126, (uint64_t)&v122);
                      v50 = v122;
                      swift_unownedRetainStrong();
                      v51 = (uint64_t *)(v50 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
                      if (*(_QWORD *)(v50 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8) <= (int)v40)
                      {
                        swift_release();
                        v59 = 0;
                        v105 = 0;
                        v107 = 0;
                        v106 = 0;
                        v104 = 0;
                        v5 = v110;
                      }
                      else
                      {
                        v52 = *v51;
                        v53 = *v51 + 12 * (int)v40;
                        v54 = *(__int16 *)(v53 + 4);
                        v5 = v110;
                        if ((v39 == -1 || *(_DWORD *)(v53 + 8) == v39)
                          && (v55 = *(_QWORD *)(*(_QWORD *)(v50 + 136) + 8 * *(int *)(v52 + 12 * (int)v40) + 32),
                              v56 = *(_QWORD *)(v55 + 48),
                              (v57 = *(_QWORD *)(v56 + 16)) != 0))
                        {
                          v58 = (_QWORD *)(v56 + 56);
                          while ((ValueMetadata *)*(v58 - 3) != &type metadata for GraphScriptingConfig)
                          {
                            v58 += 5;
                            if (!--v57)
                              goto LABEL_59;
                          }
                          v76 = *(_QWORD *)(v55 + 128) + *v58 + 32 * v54;
                          sub_1B1BFCCC0((__int16 *)v76, (uint64_t)v125, v108);
                          if (v124 == 1)
                          {
                            v77 = (unsigned __int8 *)v76;
                            v78 = *(_QWORD *)(v76 + 8);
                            v79 = *(_QWORD *)(v76 + 16);
                            v80 = v77[24];
                            v81 = v77[25];
                            v82 = v77[26];
                            v105 = *(unsigned __int16 *)v77;
                            if (v81)
                              v83 = 256;
                            else
                              v83 = 0;
                            v84 = v83 | v80;
                            if (v82)
                              v85 = 0x10000;
                            else
                              v85 = 0;
                            v104 = v84 | v85;
                            v107 = v78;
                            swift_bridgeObjectRetain();
                            v106 = v79;
                            swift_bridgeObjectRetain();
                            swift_release();
                            v59 = 1;
                          }
                          else
                          {
                            swift_release();
                            v105 = 0;
                            v107 = 0;
                            v106 = 0;
                            v104 = 0;
                            v59 = 1;
                          }
                        }
                        else
                        {
LABEL_59:
                          swift_release();
                          v59 = 0;
                          v105 = 0;
                          v107 = 0;
                          v106 = 0;
                          v104 = 0;
                        }
                      }
                      swift_unownedRetainStrong();
                      v103 = v50;
                      swift_release();
                      if ((v59 & 1) != 0)
                      {
                        if (swift_unknownObjectUnownedLoadStrong())
                          swift_unknownObjectRelease();
                        v24 = v118;
                        if (v124 != 1)
                        {
                          v74 = v105;
                          v75 = v107;
                          goto LABEL_90;
                        }
                        v60 = v107;
                        if (v107)
                        {
                          v102 = v105 >> 8;
                          v61 = v103;
                          swift_unownedRetainStrong();
                          *(_QWORD *)&v126 = __PAIR64__(v39, v40);
                          *((_QWORD *)&v126 + 1) = v61;
                          sub_1B1C1FE78(0, &qword_1EEF5C478, (uint64_t)&type metadata for GraphScriptingConfig, (uint64_t)&off_1E639BCE0);
                          v130 = v62;
                          v131 = &off_1E6383838;
                          v63 = swift_allocObject();
                          v127 = v63;
                          *(_BYTE *)(v63 + 16) = v105;
                          *(_BYTE *)(v63 + 17) = v102;
                          v64 = v106;
                          *(_QWORD *)(v63 + 24) = v60;
                          *(_QWORD *)(v63 + 32) = v64;
                          v65 = v104;
                          *(_BYTE *)(v63 + 40) = v104 & 1;
                          *(_BYTE *)(v63 + 41) = BYTE1(v65) & 1;
                          *(_BYTE *)(v63 + 42) = BYTE2(v65);
                          *(_BYTE *)(v63 + 43) = 0;
                          v132 = 12;
                          v66 = *(_QWORD *)(v61 + OBJC_IVAR____TtC3VFX13EntityManager_replicationStream);
                          v107 = v60;
                          v106 = v64;
                          if (v66)
                          {
                            v24 = v118;
                            if ((*(_BYTE *)(v66 + 81) & 1) != 0
                              && (v67 = *(_QWORD *)(v66 + 24)) != 0
                              && (Strong = swift_weakLoadStrong()) != 0)
                            {
                              v101[8] = Strong;
                              sub_1B1C18F0C(v105, v107);
                              sub_1B1C18F0C(v105, v107);
                              swift_retain();
                              v101[9] = v67;
                              swift_unknownObjectRetain();
                              swift_release();
                              sub_1B1C18F3C((uint64_t)&v126, (uint64_t)&v119);
                              v69 = *(_QWORD **)(v66 + 16);
                              isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
                              v71 = v69;
                              *(_QWORD *)(v66 + 16) = v69;
                              v102 = v66;
                              if ((isUniquelyReferenced_nonNull_native & 1) == 0)
                              {
                                v71 = sub_1B1C62F04(0, v69[2] + 1, 1, v69);
                                *(_QWORD *)(v66 + 16) = v71;
                              }
                              v73 = v71[2];
                              v72 = v71[3];
                              if (v73 >= v72 >> 1)
                              {
                                v71 = sub_1B1C62F04(v72 > 1, v73 + 1, 1, v71);
                                *(_QWORD *)(v102 + 16) = v71;
                              }
                              v71[2] = v73 + 1;
                              sub_1B1C18F78((uint64_t)&v119, (uint64_t)&v71[8 * v73 + 4]);
                              swift_release();
                              swift_unknownObjectRelease();
                              swift_release();
                            }
                            else
                            {
                              swift_bridgeObjectRetain_n();
                              swift_bridgeObjectRetain_n();
                              swift_release();
                            }
                          }
                          else
                          {
                            swift_bridgeObjectRetain_n();
                            swift_bridgeObjectRetain_n();
                            swift_release();
                            v24 = v118;
                          }
                          sub_1B1ADF058((uint64_t)&v126);
                          v86 = v105;
                          v87 = v107;
                          sub_1B1B0BC78(v105, v107);
                          v74 = v86;
                          v75 = v87;
LABEL_90:
                          sub_1B1B0BC78(v74, v75);
                        }
                      }
                      else
                      {
                        sub_1B1B0BC78(v105, v107);
                        v24 = v118;
                      }
                      sub_1B1A0256C((uint64_t)&v122);
                      sub_1B1E31340(1);
                      swift_weakDestroy();
                      swift_unownedRelease();
                      v22 = v112;
                      goto LABEL_33;
                    }
                  }
                  else
                  {
                    swift_release();
                  }
                  v5 = v110;
                  v22 = v112;
                }
                else
                {
                  swift_release();
                }
                v24 = v118;
              }
LABEL_33:
              if (++v23 == v22)
              {
                swift_bridgeObjectRelease();
                v8 = v113;
                v9 = &qword_1ED4B8000;
                goto LABEL_95;
              }
            }
          }
          swift_bridgeObjectRelease();
LABEL_95:
          _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v133);
LABEL_96:
          swift_release_n();
          goto LABEL_6;
        }
      }
      else
      {
        swift_retain();
      }
      v25 = (_QWORD *)(a1 + v9[192]);
      v26 = v25[1];
      swift_retain();
      if (v26 > v10)
      {
        v27 = DWORD1(v118);
        if (DWORD1(v118) == -1 || *(_DWORD *)(*v25 + 12 * v10 + 8) == DWORD1(v118))
        {
          v29 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80)
                                      + 8 * *(__int16 *)(*v25 + 12 * v10 + 6)
                                      + 32)
                          + 16);
          v30 = *(_QWORD *)(v29 + 128);
          if (*(_QWORD *)(v30 + 16))
          {
            v31 = sub_1B1DC3AC8((uint64_t)&type metadata for GraphScriptingConfig);
            if ((v32 & 1) != 0)
            {
              v33 = *(ValueMetadata **)(*(_QWORD *)(v29 + 24) + 16 * *(_QWORD *)(*(_QWORD *)(v30 + 56) + 8 * v31) + 32);
              swift_release();
              if (v33 == &type metadata for GraphScriptingConfig)
              {
                v113 = v8;
                swift_retain();
                swift_unownedRetain();
                swift_release();
                v34 = swift_allocObject();
                swift_weakInit();
                v35 = swift_allocObject();
                v112 = v34;
                *(_QWORD *)(v35 + 16) = v34;
                *(_QWORD *)(v35 + 24) = v118;
                v36 = *(_QWORD *)(a1 + v116);
                if (v36)
                {
                  v37 = *(_BYTE *)(v36 + 80);
                  MEMORY[0x1B5E240CC](v36 + 48);
                  v36 = *(_QWORD *)(v36 + 56);
                }
                else
                {
                  v37 = 0;
                }
                v127 = 0;
                swift_unknownObjectUnownedInit();
                *(_QWORD *)&v126 = a1;
                v127 = v36;
                swift_unknownObjectUnownedAssign();
                swift_retain();
                swift_unownedRetain();
                swift_unknownObjectRelease();
                LOBYTE(v128) = v37;
                sub_1B1A02530((uint64_t)&v126, (uint64_t)&v133);
                v120 = 0;
                v119 = 0;
                *(_DWORD *)((char *)v121 + 7) = 0;
                v121[0] = 0;
                LOBYTE(v122) = 0;
                v88 = swift_unownedRetainStrong();
                MEMORY[0x1E0C80A78](v88, v89);
                v101[2] = sub_1B1C18ED4;
                v101[3] = v35;
                v101[4] = &v122;
                v101[5] = &v133;
                v90 = v10 | (v27 << 32);
                v101[6] = &v119;
                v91 = v117;
                sub_1B1A72FAC(v90, (uint64_t)sub_1B1C18EDC, (uint64_t)v101);
                v117 = v91;
                swift_release();
                v92 = v133;
                swift_unownedRetainStrong();
                swift_release();
                if (v122 == 1)
                {
                  if (swift_unknownObjectUnownedLoadStrong())
                    swift_unknownObjectRelease();
                  if (v135 == 1)
                  {
                    v93 = v120;
                    if (v120)
                    {
                      v94 = BYTE2(v121[1]);
                      v95 = v121[1];
                      LODWORD(v109) = LOWORD(v121[1]) | (BYTE2(v121[1]) << 16);
                      v107 = v121[0];
                      v96 = v119;
                      v106 = v119 >> 8;
                      v108 = v119;
                      swift_unownedRetainStrong();
                      *(_QWORD *)&v126 = v118;
                      *((_QWORD *)&v126 + 1) = v92;
                      sub_1B1C1FE78(0, &qword_1EEF5C478, (uint64_t)&type metadata for GraphScriptingConfig, (uint64_t)&off_1E639BCE0);
                      v130 = v97;
                      v131 = &off_1E6383838;
                      v98 = swift_allocObject();
                      v127 = v98;
                      *(_BYTE *)(v98 + 16) = v96;
                      *(_BYTE *)(v98 + 17) = v106;
                      v99 = v107;
                      *(_QWORD *)(v98 + 24) = v93;
                      *(_QWORD *)(v98 + 32) = v99;
                      *(_BYTE *)(v98 + 40) = v95 & 1;
                      *(_BYTE *)(v98 + 41) = HIBYTE(v95) & 1;
                      *(_BYTE *)(v98 + 42) = v94 & 1;
                      *(_BYTE *)(v98 + 43) = 0;
                      v132 = 12;
                      swift_bridgeObjectRetain_n();
                      swift_bridgeObjectRetain_n();
                      sub_1B1E2DB30((uint64_t)&v126);
                      swift_release();
                      sub_1B1ADF058((uint64_t)&v126);
                      sub_1B1B0BC78(v108, v93);
                    }
                  }
                }
                sub_1B1B0BC78(v119, v120);
                sub_1B1A0256C((uint64_t)&v133);
                sub_1B1E31340(1);
                swift_release();
                swift_release();
                swift_unownedRelease();
                swift_release_n();
                v8 = v113;
                v9 = &qword_1ED4B8000;
                goto LABEL_6;
              }
            }
          }
          goto LABEL_96;
        }
      }
LABEL_5:
      swift_release_n();
      swift_release();
LABEL_6:
      if (++v7 == v6)
        return swift_bridgeObjectRelease();
    }
    swift_retain();
LABEL_4:
    swift_retain();
    swift_retain();
    goto LABEL_5;
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B1C18E8C()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1B1C18EB0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1B1C18ED4(__int16 *a1)
{
  uint64_t v1;

  return sub_1B1BFD1D4(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_1B1C18EDC(unsigned __int16 *a1)
{
  uint64_t v1;

  return sub_1B1C04BA4(a1, *(uint64_t (**)(void))(v1 + 16), *(_QWORD *)(v1 + 24), *(_BYTE **)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48));
}

uint64_t sub_1B1C18EFC()
{
  return sub_1B1C1A0C0((void (*)(_QWORD))MEMORY[0x1E0DEEB08]);
}

uint64_t sub_1B1C18F0C(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_1B1C18F3C(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for ReplicationEvent(a2, a1);
  return a2;
}

uint64_t sub_1B1C18F78(uint64_t a1, uint64_t a2)
{
  initializeWithTake for ReplicationEvent(a2, a1);
  return a2;
}

void sub_1B1C18FB4(uint64_t a1)
{
  sub_1B1C19024(a1, &qword_1EEF5C480, (void (*)(uint64_t))type metadata accessor for GraphScriptingConfig.ScriptInfo);
}

uint64_t type metadata accessor for GraphScriptingConfig.ScriptInfo()
{
  uint64_t result;

  result = qword_1ED4B94D0;
  if (!qword_1ED4B94D0)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_1B1C19014()
{
  return swift_deallocObject();
}

void sub_1B1C19024(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t TupleTypeMetadata2;
  uint64_t v5;

  if (!*a2)
  {
    a3(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v5)
      atomic_store(TupleTypeMetadata2, a2);
  }
}

void sub_1B1C1908C(uint64_t a1)
{
  sub_1B1791524(a1, &qword_1ED4B94E0, (uint64_t (*)(uint64_t))type metadata accessor for GraphScriptingConfig.ScriptInfo, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
}

void sub_1B1C190A8()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_1EEF5C490)
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1EEF5C490);
  }
}

unint64_t sub_1B1C19110(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1C04118(a1, a2 | ((HIDWORD(a2) & 1) << 32), a3, *(_QWORD *)(v3 + 16));
}

void sub_1B1C1912C()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_1ED4B9510)
  {
    type metadata accessor for GraphScriptingConfig.ScriptInfo();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1ED4B9510);
  }
}

uint64_t sub_1B1C19190(uint64_t result)
{
  if (result != 1)
    return swift_retain();
  return result;
}

uint64_t sub_1B1C191A0(uint64_t a1, uint64_t a2, char a3, _BYTE *a4, unint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int *v23;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  _BYTE *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  unint64_t v35;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  int v46;
  int v47;
  int v48;
  unsigned int v49;
  uint64_t v50;
  int v51;
  _QWORD v52[2];
  char *v53;
  _BYTE *v54;
  uint64_t v55;
  uint64_t v56;
  _OWORD v57[4];
  char *v58;
  char v59;
  unsigned __int16 v60;
  uint64_t v61;
  uint64_t v62;
  __int16 v63;
  char v64;
  _QWORD v65[3];
  unsigned __int16 v66;
  unsigned __int8 v67;

  v55 = a6;
  sub_1B1C1908C(0);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)v52 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = a1;
  v15 = *(_DWORD *)(a1 + 28);
  v16 = *(int *)(a1 + 24);
  v17 = (_DWORD)v16 == -1 && v15 == 0;
  v54 = a4;
  if (!v17)
  {
    v18 = 0;
    v19 = 0;
    if ((v16 & 0x80000000) != 0 || *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8) <= v16)
    {
      v21 = 0;
      v22 = 0;
      goto LABEL_12;
    }
    v20 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
    if (v15 == -1 || *(_DWORD *)(v20 + 12 * (int)v16 + 8) == v15)
    {
      v23 = (unsigned int *)(v20 + 12 * (int)v16);
      sub_1B1D1CF18(*(_QWORD *)(*(_QWORD *)(a2 + 136) + 8 * (int)*v23 + 32), *v23 | ((unint64_t)*((unsigned __int16 *)v23 + 3) << 48) | ((unint64_t)*((unsigned __int16 *)v23+ 2) << 32), 32, a2, (uint64_t)v65);
      v22 = v65[0];
      v21 = v65[1];
      v18 = v65[2];
      v19 = v66 | (v67 << 16);
      goto LABEL_12;
    }
  }
  v19 = 0;
  v18 = 0;
  v21 = 0;
  v22 = 0;
LABEL_12:
  v60 = v22;
  v61 = v21;
  v62 = v18;
  v63 = v19 & 0x101;
  v64 = BYTE2(v19) & 1;
  if ((a3 & 1) == 0 && (v19 & 0x10000) == 0)
    return sub_1B1B0BC78(v22, v21);
  v25 = *(_QWORD *)(v56 + 24);
  if (*(_QWORD *)(v18 + 16))
  {
    v59 = 0;
    v58 = (char *)MEMORY[0x1E0DEE9D8];
    sub_1B1D16674(a5, v57);
    sub_1B1A18378((uint64_t)v57, (uint64_t)v65, &qword_1ED4B9DA8, (uint64_t)&type metadata for GraphEntityComponentPropertyReferences);
    swift_retain();
    sub_1B1C19F80((uint64_t)v65, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1C19F04);
    v26 = swift_bridgeObjectRetain();
    sub_1B1C147A0(v26, (uint64_t)&v60, &v59, v25, a2, a5, (uint64_t)v65, v55, &v58);
    sub_1B1C19F80((uint64_t)v65, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1C19FBC);
    swift_bridgeObjectRelease();
    swift_release();
    sub_1B1C19F80((uint64_t)v65, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1C19FBC);
    v53 = v58;
    v27 = *((_QWORD *)v58 + 2);
    if (v27)
    {
      v52[1] = a2;
      v28 = v53;
      swift_bridgeObjectRetain_n();
      v29 = v28 + 36;
      do
      {
        v31 = *((unsigned int *)v29 - 1);
        v32 = v62;
        LOBYTE(v57[0]) = *v29;
        v33 = sub_1B1DC4040(v31 | ((unint64_t)LOBYTE(v57[0]) << 32));
        if ((v34 & 1) != 0)
        {
          v35 = v33;
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          *(_QWORD *)&v57[0] = v32;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            sub_1B1EAD7E0();
            v32 = *(_QWORD *)&v57[0];
          }
          v37 = *(_QWORD *)(v32 + 56);
          v38 = type metadata accessor for GraphScriptingConfig.ScriptInfo();
          v39 = *(_QWORD *)(v38 - 8);
          sub_1B1A025EC(v37 + *(_QWORD *)(v39 + 72) * v35, (uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for GraphScriptingConfig.ScriptInfo);
          sub_1B1EA649C(v35, v32);
          v62 = v32;
          swift_bridgeObjectRelease();
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v39 + 56))(v14, 0, 1, v38);
        }
        else
        {
          v30 = type metadata accessor for GraphScriptingConfig.ScriptInfo();
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v14, 1, 1, v30);
        }
        sub_1B1A04628((uint64_t)v14, (uint64_t (*)(_QWORD))sub_1B1C1908C);
        v29 += 8;
        --v27;
      }
      while (v27);
      swift_bridgeObjectRelease_n();
    }
    swift_bridgeObjectRelease();
    v40 = *v54 | v59;
    *v54 = v40 & 1;
    if ((v40 & 1) != 0)
    {
      sub_1B1BFF4E0();
      sub_1B1BFF788();
    }
    v41 = v61;
    v42 = v62;
    v43 = v56;
    v44 = *(_QWORD *)(v56 + 24);
    if (HIBYTE(v63))
      v45 = 256;
    else
      v45 = 0;
    v46 = v45 | v63;
    if (v64)
      v47 = 0x10000;
    else
      v47 = 0;
    v48 = v46 | v47;
    v49 = v60;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1B1BF79F8(v49, v41, v42, v48, v44);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v50 = *(_QWORD *)(v43 + 24);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1B1BF79F8(v49, v41, v42, v46, v50);
    swift_bridgeObjectRelease_n();
  }
  else
  {
    v51 = v19 & 1 | (((v19 >> 8) & 1) << 8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1B1BF79F8(v22, v21, v18, v51, v25);
    swift_bridgeObjectRelease_n();
  }
  return swift_bridgeObjectRelease_n();
}

uint64_t sub_1B1C196C8(unint64_t a1, uint64_t a2, uint64_t a3, char a4, _BYTE *a5, unint64_t a6, uint64_t a7)
{
  unint64_t v14;
  BOOL v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t inited;
  __int128 v22;
  ValueMetadata *v23;
  _UNKNOWN **v24;
  _QWORD v25[6];

  v14 = HIDWORD(a1);
  if (a1 == 0xFFFFFFFF)
  {
    swift_retain();
  }
  else
  {
    swift_retain();
    v15 = sub_1B1FD568C((uint64_t)&type metadata for EmitterDescription, (uint64_t)&off_1E6391B38, a1);
    swift_retain();
    swift_release();
    if (v15)
    {
      v23 = &type metadata for VFXEmitter;
      v24 = &off_1E636F320;
      *(_QWORD *)&v22 = __PAIR64__(v14, a1);
      *((_QWORD *)&v22 + 1) = a2;
      sub_1B1A02518(&v22, (uint64_t)v25);
      v16 = sub_1B19FA070(v25, v25[3]);
      v17 = *v16;
      v18 = v16[1];
      swift_retain();
      sub_1B20C8878((uint64_t)&type metadata for GraphScriptingConfig, (uint64_t)&off_1E639BCE0, 5, v17, v18, a3, a4 & 1, a5, a6, a7);
      swift_release();
      _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v25);
      return swift_release();
    }
  }
  swift_retain();
  v19 = sub_1B1FD568C((uint64_t)&type metadata for GraphScriptingConfig, (uint64_t)&off_1E639BD58, a1);
  swift_release();
  if (v19)
  {
    type metadata accessor for VFXAttribute();
    swift_retain();
    inited = swift_initStackObject();
    *(_QWORD *)(inited + 16) = a2;
    swift_unownedRetain();
    swift_release();
    *(_DWORD *)(inited + 24) = a1;
    *(_DWORD *)(inited + 28) = v14;
    *(_QWORD *)(inited + 32) = &type metadata for GraphScriptingConfig;
    *(_QWORD *)(inited + 40) = &off_1E639BD58;
    sub_1B1C191A0(inited, a3, a4 & 1, a5, a6, a7);
    swift_release();
    return swift_release();
  }
  return swift_release();
}

uint64_t sub_1B1C198C4(uint64_t a1, char a2, char a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t result;
  _QWORD *v30;
  int v31;
  uint64_t v32;
  unsigned int *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  os_unfair_lock_s *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _BYTE *v44;
  uint64_t v45;
  _BYTE *v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59[8];
  _OWORD v60[2];
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  _OWORD v67[2];
  uint64_t v68;
  _BYTE v69[40];
  _OWORD v70[2];
  uint64_t v71;

  v5 = sub_1B1C16548(a1, a2);
  v6 = *(_QWORD *)(v5 + 16);
  if (!v6)
  {
    swift_bridgeObjectRelease();
    v28 = 0;
    goto LABEL_40;
  }
  v7 = 0;
  v8 = 0;
  v57 = (_QWORD *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
  v9 = v5 + 32;
  v55 = a3 & 1;
  do
  {
    while (1)
    {
      v10 = (int *)(v9 + 8 * v7);
      v11 = v10[1];
      v12 = *v10;
      LOBYTE(v60[0]) = 0;
      v13 = (_DWORD)v12 == -1 && (_DWORD)v11 == 0;
      if (v13)
      {
        sub_1B1FE16DC((uint64_t)&type metadata for GraphScriptGroup, (uint64_t)&off_1E6387AF0, 0xFFFFFFFFLL);
LABEL_32:
        LODWORD(v19) = 0;
        goto LABEL_33;
      }
      if ((v12 & 0x80000000) != 0
        || v57[1] <= v12
        || ((_DWORD)v11 != -1 ? (v14 = *(_DWORD *)(*v57 + 12 * (int)v12 + 8) == (_DWORD)v11) : (v14 = 1),
            !v14
         || (v15 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * *(__int16 *)(*v57 + 12 * (int)v12 + 6) + 32)
                             + 16),
             v16 = *(_QWORD *)(v15 + 128),
             !*(_QWORD *)(v16 + 16))
         || (v17 = sub_1B1DC3AC8((uint64_t)&type metadata for GraphScriptGroup), (v18 & 1) == 0)
         || *(ValueMetadata **)(*(_QWORD *)(v15 + 24) + 16 * *(_QWORD *)(*(_QWORD *)(v16 + 56) + 8 * v17) + 32) != &type metadata for GraphScriptGroup))
      {
        sub_1B1FE16DC((uint64_t)&type metadata for GraphScriptGroup, (uint64_t)&off_1E6387AF0, v12 | ((unint64_t)v11 << 32));
      }
      LODWORD(v19) = 0;
      if ((v12 & 0x80000000) == 0 && v57[1] > v12)
        break;
LABEL_33:
      ++v7;
      if ((v8 & 1) == 0)
        goto LABEL_3;
LABEL_34:
      v8 = 1;
      if (v7 == v6)
      {
        swift_bridgeObjectRelease();
        v28 = 1;
        goto LABEL_40;
      }
    }
    v20 = *v57 + 12 * (int)v12;
    if ((_DWORD)v11 != -1 && *(_DWORD *)(v20 + 8) != (_DWORD)v11)
      goto LABEL_32;
    v22 = *(_QWORD *)(*(_QWORD *)(a1 + 136) + 8 * *(int *)(*v57 + 12 * (int)v12) + 32);
    v23 = *(_QWORD *)(v22 + 48);
    v19 = *(_QWORD *)(v23 + 16);
    if (!v19)
      goto LABEL_33;
    v24 = *(__int16 *)(v20 + 4);
    v25 = (_QWORD *)(v23 + 56);
    while ((ValueMetadata *)*(v25 - 3) != &type metadata for GraphScriptGroup)
    {
      v25 += 5;
      if (!--v19)
        goto LABEL_33;
    }
    v26 = *(_QWORD *)(v22 + 128) + *v25 + 32 * v24;
    swift_retain();
    sub_1B1C196C8(v12 | (unint64_t)(v11 << 32), a1, a1, v55, v60, v12 | (unint64_t)(v11 << 32), v26);
    swift_release();
    LODWORD(v19) = LOBYTE(v60[0]);
    ++v7;
    if ((v8 & 1) != 0)
      goto LABEL_34;
LABEL_3:
    v8 = v19;
  }
  while (v7 != v6);
  v27 = v19;
  swift_bridgeObjectRelease();
  v28 = v27;
LABEL_40:
  v49 = v28;
  if (qword_1ED4B9468 != -1)
    swift_once();
  v70[0] = xmmword_1ED4D0D18;
  v70[1] = *(_OWORD *)&qword_1ED4D0D28;
  v71 = qword_1ED4D0D38;
  sub_1B1E8FCE4(a1, (uint64_t)v70, 0x200000000, v59);
  result = sub_1B1A18378((uint64_t)v59, (uint64_t)v60, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (*(_QWORD *)&v60[0])
  {
    if (v66 > 0 && (v54 = v63) != 0)
    {
      v30 = v65;
      v58 = v65[4];
      v31 = *(unsigned __int8 *)(v64 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
      v67[0] = v60[0];
      v67[1] = v60[1];
      v68 = v61;
      v51 = (uint64_t)(v65 + 6);
      v52 = v62;
      v50 = v65 + 8;
      swift_retain();
      swift_retain();
      swift_retain();
      v32 = 0;
      v53 = v31;
      do
      {
        v33 = (unsigned int *)(v52 + 48 * v32);
        v35 = *v33;
        v34 = v33[1];
        v36 = (uint64_t *)*((_QWORD *)v33 + 2);
        v56 = *((_QWORD *)v33 + 3);
        v38 = *((_QWORD *)v33 + 4);
        v37 = *((_QWORD *)v33 + 5);
        if (v31)
        {
          v39 = *(os_unfair_lock_s **)(v37 + 376);
          swift_retain_n();
          os_unfair_lock_lock(v39);
          os_unfair_lock_lock(*(os_unfair_lock_t *)(v37 + 344));
          swift_release();
        }
        else
        {
          swift_retain();
        }
        ecs_stack_allocator_push_snapshot(v58);
        sub_1B1A18378(v51, (uint64_t)v69, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
        v40 = v30[4];
        v41 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v37 + 40) + 16) + 32) + 16) + 1;
        swift_retain();
        v30[6] = ecs_stack_allocator_allocate(v40, 48 * v41, 8);
        v30[7] = v41;
        v50[1] = 0;
        v50[2] = 0;
        *v50 = 0;
        swift_release();
        v42 = sub_1B1A12038((uint64_t)&type metadata for GraphEntityComponentPropertyReferences, (uint64_t)&off_1E63B8ED8, v36, v56, v38, (uint64_t)v30);
        if (v36)
        {
          v31 = v53;
          if (v38)
          {
            v43 = 0;
            do
            {
              v44 = (_BYTE *)(v42 + 56 + (v43 << 6));
              v45 = v43;
              while (*v44 != 1)
              {
                ++v45;
                v44 += 64;
                if (v38 == v45)
                  goto LABEL_60;
              }
              *v44 = 0;
              v43 = v45 + 1;
              LOBYTE(v49) = 1;
            }
            while (v38 - 1 != v45);
          }
        }
        else
        {
          v31 = v53;
          if ((_DWORD)v35 != (_DWORD)v34)
          {
            do
            {
              v46 = (_BYTE *)(v42 + 56 + (v35 << 6));
              while (1)
              {
                v47 = v35 + 1;
                if (*v46 == 1)
                  break;
                v46 += 64;
                ++v35;
                if (v34 == v47)
                  goto LABEL_60;
              }
              *v46 = 0;
              LOBYTE(v49) = 1;
              v13 = v34 - 1 == v35++;
            }
            while (!v13);
          }
        }
LABEL_60:
        sub_1B1F05D48(v30, (unsigned __int16 **)v67, (uint64_t)v69);
        sub_1B1F03804((char *)v37);
        ecs_stack_allocator_pop_snapshot(v58);
        if ((v31 & 1) != 0)
        {
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v37 + 344));
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v37 + 376));
        }
        swift_release();
        ++v32;
      }
      while (v32 != v54);
      sub_1B19ED748(v59);
      result = (uint64_t)sub_1B19ED748(v59);
      if ((v49 & 1) != 0)
      {
LABEL_74:
        swift_retain();
        v48 = sub_1B1BF902C((void (*)(_QWORD))type metadata accessor for GraphScriptRunner);
        result = swift_release();
        if (v48)
        {
          *(_BYTE *)(v48 + 16) = 1;
          return swift_release();
        }
      }
    }
    else
    {
      result = (uint64_t)sub_1B19ED748(v59);
      if ((v49 & 1) != 0)
        goto LABEL_74;
    }
  }
  else if (v49)
  {
    goto LABEL_74;
  }
  return result;
}

uint64_t sub_1B1C19F04(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_1B1C19F80(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(unsigned __int8 *)(a1 + 56));
  return a1;
}

uint64_t sub_1B1C19FBC(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1B1C1A034(uint64_t a1)
{
  uint64_t v1;

  return sub_1B1C076E8(a1, *(__int16 **)(v1 + 16));
}

uint64_t sub_1B1C1A04C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1B1B28F74();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1B1C1A090()
{
  return sub_1B1A05688();
}

uint64_t sub_1B1C1A098()
{
  return sub_1B1791240();
}

uint64_t sub_1B1C1A0A0()
{
  return sub_1B1C1A0C0((void (*)(_QWORD))MEMORY[0x1E0DEEE30]);
}

uint64_t sub_1B1C1A0B0()
{
  return sub_1B1C1A0C0((void (*)(_QWORD))MEMORY[0x1E0DEEE30]);
}

uint64_t sub_1B1C1A0C0(void (*a1)(_QWORD))
{
  uint64_t v1;

  swift_bridgeObjectRelease();
  a1(*(_QWORD *)(v1 + 32));
  return swift_deallocObject();
}

uint64_t sub_1B1C1A104()
{
  return sub_1B1791240();
}

uint64_t sub_1B1C1A10C()
{
  return sub_1B1A05688();
}

uint64_t sub_1B1C1A114(uint64_t a1, uint64_t a2)
{
  return sub_1B1792810(a1, a2, type metadata accessor for ParticleInitScript);
}

_QWORD *sub_1B1C1A120(uint64_t a1)
{
  uint64_t v1;

  return sub_1B1FFB850(a1, *(_QWORD **)(v1 + 16), *(_QWORD *)(v1 + 24));
}

double sub_1B1C1A13C(_QWORD *a1)
{
  uint64_t v1;
  double *v2;
  double result;

  v2 = *(double **)(v1 + 16);
  result = *v2;
  *a1 = *(_QWORD *)v2;
  return result;
}

uint64_t sub_1B1C1A14C(uint64_t a1, uint64_t a2)
{
  return sub_1B1792810(a1, a2, type metadata accessor for ParticleUpdateScript);
}

uint64_t sub_1B1C1A158(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 16);
  sub_1B1B1DCE0(a1, &qword_1ED4BB250, type metadata accessor for TriggerScript, (uint64_t)&off_1ED4BEFD8);
  return sub_1B1B1F2FC(v3, a1, &qword_1ED4BB250, type metadata accessor for TriggerScript, (uint64_t)&off_1ED4BEFD8);
}

uint64_t sub_1B1C1A1D0(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for CompilationStatus(a2, a1);
  return a2;
}

uint64_t sub_1B1C1A20C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 16);
  sub_1B1B1DCE0(a1, &qword_1ED4B88A0, type metadata accessor for ParticleUpdateScript, (uint64_t)&off_1ED4BD280);
  return sub_1B1B1F2FC(v3, a1, &qword_1ED4B88A0, type metadata accessor for ParticleUpdateScript, (uint64_t)&off_1ED4BD280);
}

uint64_t sub_1B1C1A284(_QWORD *a1)
{
  uint64_t v1;

  return sub_1B1C07BA4(a1, *(uint64_t **)(v1 + 16));
}

uint64_t sub_1B1C1A29C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 16);
  sub_1B1B1DCE0(a1, &qword_1ED4B8890, type metadata accessor for ParticleInitScript, (uint64_t)&off_1ED4BCD90);
  return sub_1B1B1F2FC(v3, a1, &qword_1ED4B8890, type metadata accessor for ParticleInitScript, (uint64_t)&off_1ED4BCD90);
}

uint64_t sub_1B1C1A314(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 16);
  sub_1B1B1DCE0(a1, (unint64_t *)&qword_1ED4B88C0, type metadata accessor for ShaderScript, (uint64_t)&off_1ED4BC090);
  return sub_1B1B1F2FC(v3, a1, (unint64_t *)&qword_1ED4B88C0, type metadata accessor for ShaderScript, (uint64_t)&off_1ED4BC090);
}

uint64_t sub_1B1C1A38C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 16);
  sub_1B1B1DCE0(a1, (unint64_t *)&qword_1ED4BB240, type metadata accessor for MetalFunctionScript, (uint64_t)&off_1ED4BF0F8);
  return sub_1B1B1F2FC(v3, a1, (unint64_t *)&qword_1ED4BB240, type metadata accessor for MetalFunctionScript, (uint64_t)&off_1ED4BF0F8);
}

uint64_t sub_1B1C1A404(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 16);
  sub_1B1B1DCE0(a1, (unint64_t *)&unk_1ED4B88D0, type metadata accessor for SimpleScript, (uint64_t)&off_1ED4BC1D8);
  return sub_1B1B1F2FC(v3, a1, (unint64_t *)&unk_1ED4B88D0, type metadata accessor for SimpleScript, (uint64_t)&off_1ED4BC1D8);
}

uint64_t sub_1B1C1A47C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 16);
  sub_1B1B1DCE0(a1, (unint64_t *)&unk_1ED4B88B0, type metadata accessor for GraphScript, (uint64_t)&off_1ED4BBD80);
  return sub_1B1B1F2FC(v3, a1, (unint64_t *)&unk_1ED4B88B0, type metadata accessor for GraphScript, (uint64_t)&off_1ED4BBD80);
}

uint64_t sub_1B1C1A4F4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 16);
  sub_1B1B1DCE0(a1, (unint64_t *)&unk_1ED4B88E0, type metadata accessor for EmitterScript, (uint64_t)&off_1ED4BC418);
  return sub_1B1B1F2FC(v3, a1, (unint64_t *)&unk_1ED4B88E0, type metadata accessor for EmitterScript, (uint64_t)&off_1ED4BC418);
}

uint64_t sub_1B1C1A56C(uint64_t a1, char a2, char a3)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  os_unfair_lock_s *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _BYTE *v19;
  unint64_t v20;
  unint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  unint64_t v26;
  _BYTE *v27;
  uint64_t v28;
  char v30;
  uint64_t v31;
  int v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42[8];
  _OWORD v43[2];
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  _OWORD v50[2];
  uint64_t v51;
  _BYTE v52[40];
  _OWORD v53[2];
  uint64_t v54;

  if (qword_1ED4B7890 != -1)
    swift_once();
  v53[0] = xmmword_1ED4D0CF0;
  v53[1] = unk_1ED4D0D00;
  v54 = qword_1ED4D0D10;
  sub_1B1E8FCE4(a1, (uint64_t)v53, 0x200000000, v42);
  sub_1B1A18378((uint64_t)v42, (uint64_t)v43, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (*(_QWORD *)&v43[0])
  {
    if (v49 >= 1)
    {
      v36 = v46;
      if (v46)
      {
        v30 = a3;
        v31 = a1;
        v6 = v48[4];
        v7 = *(unsigned __int8 *)(v47 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
        v50[0] = v43[0];
        v50[1] = v43[1];
        v51 = v44;
        v34 = (uint64_t)(v48 + 6);
        v35 = v45;
        v41 = v48;
        v33 = v48 + 8;
        swift_retain();
        swift_retain();
        swift_retain();
        v8 = 0;
        v9 = 0;
        v32 = v7;
        while (1)
        {
          v10 = (unsigned int *)(v35 + 48 * v8);
          v37 = *v10;
          v38 = v10[1];
          v39 = v9;
          v11 = (uint64_t *)*((_QWORD *)v10 + 2);
          v40 = *((_QWORD *)v10 + 3);
          v13 = *((_QWORD *)v10 + 4);
          v12 = *((_QWORD *)v10 + 5);
          if (v7)
          {
            v14 = *(os_unfair_lock_s **)(v12 + 376);
            swift_retain_n();
            os_unfair_lock_lock(v14);
            os_unfair_lock_lock(*(os_unfair_lock_t *)(v12 + 344));
            swift_release();
          }
          else
          {
            swift_retain();
          }
          ecs_stack_allocator_push_snapshot(v6);
          sub_1B1A18378(v34, (uint64_t)v52, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
          v15 = v41[4];
          v16 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v12 + 40) + 16) + 32) + 16) + 1;
          swift_retain();
          v41[6] = ecs_stack_allocator_allocate(v15, 48 * v16, 8);
          v41[7] = v16;
          v33[1] = 0;
          v33[2] = 0;
          *v33 = 0;
          swift_release();
          v17 = sub_1B1A12038((uint64_t)&type metadata for Bindings, (uint64_t)&off_1E63BE948, v11, v40, v13, (uint64_t)v41);
          if (v11)
          {
            if (!v13)
              goto LABEL_16;
            v9 = v39;
            if (v13 == 1)
            {
              v18 = 0;
              v7 = v32;
            }
            else
            {
              v18 = v13 & 0xFFFFFFFFFFFFFFFELL;
              v19 = (_BYTE *)(v17 + 32);
              v20 = v13 & 0xFFFFFFFFFFFFFFFELL;
              v7 = v32;
              do
              {
                *(v19 - 24) = 1;
                *v19 = 1;
                v19 += 48;
                v20 -= 2;
              }
              while (v20);
              if (v13 == v18)
                goto LABEL_30;
            }
            v21 = v13 - v18;
            v22 = (_BYTE *)(v17 + 24 * v18 + 8);
            do
            {
              *v22 = 1;
              v22 += 24;
              --v21;
            }
            while (v21);
          }
          else
          {
            if ((_DWORD)v37 == (_DWORD)v38)
            {
LABEL_16:
              v7 = v32;
              v9 = v39;
              goto LABEL_30;
            }
            v23 = v38 - v37;
            v9 = v39;
            if ((unint64_t)(v38 - v37) >= 2)
            {
              v24 = (v23 & 0xFFFFFFFFFFFFFFFELL) + v37;
              v25 = (_BYTE *)(v17 + 24 * v37 + 32);
              v26 = v23 & 0xFFFFFFFFFFFFFFFELL;
              v7 = v32;
              do
              {
                *(v25 - 24) = 1;
                *v25 = 1;
                v25 += 48;
                v26 -= 2;
              }
              while (v26);
              if (v23 == (v23 & 0xFFFFFFFFFFFFFFFELL))
                goto LABEL_30;
            }
            else
            {
              v24 = v37;
              v7 = v32;
            }
            v27 = (_BYTE *)(v17 + 24 * v24 + 8);
            v28 = v38 - v24;
            do
            {
              *v27 = 1;
              v27 += 24;
              --v28;
            }
            while (v28);
          }
LABEL_30:
          sub_1B1F05D48(v41, (unsigned __int16 **)v50, (uint64_t)v52);
          sub_1B1F03804((char *)v12);
          ecs_stack_allocator_pop_snapshot(v6);
          if ((v7 & 1) != 0)
          {
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v12 + 344));
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v12 + 376));
          }
          swift_release();
          if (++v8 == v36)
          {
            sub_1B19ED748(v42);
            a1 = v31;
            a3 = v30;
            break;
          }
        }
      }
    }
    sub_1B19ED748(v42);
  }
  return sub_1B1C198C4(a1, a2 & 1, a3 & 1);
}

uint64_t sub_1B1C1A954(_QWORD *a1)
{
  return sub_1B1B20B18(a1);
}

__n128 sub_1B1C1A968(__n128 *a1)
{
  uint64_t v1;
  __n128 *v2;
  __n128 result;

  v2 = *(__n128 **)(v1 + 16);
  result = *v2;
  *a1 = *v2;
  return result;
}

double sub_1B1C1A978(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  double result;

  v2 = *(_QWORD *)(v1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v2;
  result = *(double *)(v2 + 16);
  *(double *)(a1 + 16) = result;
  return result;
}

float sub_1B1C1A990(_DWORD *a1)
{
  uint64_t v1;
  float *v2;
  float result;

  v2 = *(float **)(v1 + 16);
  result = *v2;
  *a1 = *(_DWORD *)v2;
  return result;
}

double sub_1B1C1A9A0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  char v4;
  double result;

  v2 = *(_QWORD *)(v1 + 16);
  v3 = *(_BYTE *)(v2 + 4);
  v4 = *(_BYTE *)(v2 + 16);
  *(_DWORD *)a1 = *(_DWORD *)v2;
  *(_BYTE *)(a1 + 4) = v3;
  result = *(double *)(v2 + 8);
  *(double *)(a1 + 8) = result;
  *(_BYTE *)(a1 + 16) = v4;
  return result;
}

double sub_1B1C1A9C8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  char v4;
  double result;
  __int128 v6;

  v2 = *(_QWORD *)(v1 + 16);
  v3 = *(_BYTE *)(v2 + 32);
  v4 = *(_BYTE *)(v2 + 33);
  result = *(double *)(v2 + 40);
  v6 = *(_OWORD *)(v2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_BYTE *)(a1 + 32) = v3;
  *(_BYTE *)(a1 + 33) = v4;
  *(double *)(a1 + 40) = result;
  return result;
}

uint64_t sub_1B1C1A9F0(_QWORD *a1)
{
  return sub_1B1C1FDA0(a1);
}

uint64_t sub_1B1C1AA04(_QWORD *a1)
{
  uint64_t v1;

  return sub_1B1C07C9C(a1, *(uint64_t **)(v1 + 16));
}

uint64_t sub_1B1C1AA1C(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for TextureCache.CacheEntry(a2, a1);
  return a2;
}

__n128 sub_1B1C1AA58(_OWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  __n128 result;
  __int128 v4;

  v2 = *(_QWORD *)(v1 + 16);
  result = *(__n128 *)v2;
  v4 = *(_OWORD *)(v2 + 16);
  *a1 = *(_OWORD *)v2;
  a1[1] = v4;
  return result;
}

uint64_t *sub_1B1C1AA68(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  uint64_t *v8;
  uint64_t v9;
  os_unfair_lock_s *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _BYTE *v17;
  unint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  unint64_t v24;
  _BYTE *v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  os_unfair_lock_s *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v51;
  uint64_t *v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v60;
  BOOL v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  char v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  char v80;
  ValueMetadata *v81;
  _QWORD *v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unsigned int *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  os_unfair_lock_s *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t i;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  char v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  _QWORD *v105;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v107;
  unint64_t v108;
  _QWORD *v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  char v117;
  uint64_t v118;
  uint64_t v119;
  _QWORD *v120;
  _QWORD *v121;
  char v122;
  unint64_t v123;
  unint64_t v124;
  _QWORD *v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  uint64_t v129;
  unsigned int *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  os_unfair_lock_s *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  char v144;
  uint64_t v145;
  uint64_t v146;
  _QWORD *v147;
  _QWORD *v148;
  char v149;
  unint64_t v150;
  unint64_t v151;
  _QWORD *v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  unint64_t v159;
  char v160;
  uint64_t v161;
  uint64_t v162;
  _QWORD *v163;
  _QWORD *v164;
  char v165;
  unint64_t v166;
  unint64_t v167;
  _QWORD *v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  uint64_t *result;
  _QWORD *v173;
  _QWORD *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  int v179;
  _QWORD *v180;
  uint64_t v181;
  uint64_t v182;
  _QWORD *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  int v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  char v193;
  uint64_t v194;
  uint64_t v195;
  _QWORD *v196;
  uint64_t v197;
  uint64_t v198;
  int v199;
  uint64_t *v200;
  _QWORD *v201;
  uint64_t v202;
  uint64_t v203;
  _QWORD *v204;
  _QWORD *v205;
  uint64_t v206;
  _QWORD *v207;
  uint64_t v208;
  uint64_t *v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  _OWORD v217[2];
  uint64_t v218;
  _OWORD v219[2];
  uint64_t v220;
  _OWORD v221[2];
  uint64_t v222;
  _OWORD v223[2];
  uint64_t v224;
  _OWORD v225[2];
  uint64_t v226;
  _OWORD v227[2];
  uint64_t v228;
  _OWORD v229[2];
  uint64_t v230;
  _OWORD v231[2];
  uint64_t v232;
  _OWORD v233[2];
  uint64_t v234;
  _OWORD v235[2];
  uint64_t v236;
  _OWORD v237[2];
  uint64_t v238;
  _OWORD v239[2];
  uint64_t v240;
  uint64_t v241;
  int v242;
  char v243;
  uint64_t v244;
  char v245;
  uint64_t v246;
  uint64_t v247;
  int v248;
  char v249;
  uint64_t v250;
  char v251;
  uint64_t v252;
  uint64_t v253;
  int v254;
  char v255;
  uint64_t v256;
  char v257;
  uint64_t v258;
  uint64_t v259;
  int v260;
  char v261;
  uint64_t v262;
  char v263;
  uint64_t v264;
  __int128 v265;
  __int128 v266;
  __int128 v267;
  __int128 v268;
  uint64_t v269;
  _QWORD v270[9];
  ValueMetadata *v271;
  _UNKNOWN **v272;
  char v273;
  uint64_t v274[8];
  uint64_t v275[4];
  uint64_t v276[4];
  uint64_t v277[4];
  __int128 v278;
  __int128 v279;
  __int128 v280;
  __int128 v281;
  uint64_t v282;
  _QWORD *v283;
  uint64_t v284;
  __int128 v285;
  __int128 v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  _QWORD *v291;
  uint64_t v292;
  _OWORD v293[2];
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  _QWORD *v298;
  uint64_t v299;
  _OWORD v300[2];
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  _QWORD *v305;
  uint64_t v306;
  _BYTE v307[40];
  _BYTE v308[40];
  _BYTE v309[40];
  _BYTE v310[40];
  uint64_t v311;

  v311 = *MEMORY[0x1E0C80C00];
  if (qword_1ED4B7DB8 != -1)
    swift_once();
  v259 = qword_1ED4D09F8;
  v260 = 0;
  v261 = 2;
  v262 = 0;
  v263 = 2;
  v264 = 0;
  swift_retain();
  sub_1B1E4050C(3, (uint64_t)v217);
  swift_release();
  v239[0] = v217[0];
  v239[1] = v217[1];
  v240 = v218;
  sub_1B1E8FCE4(a1, (uint64_t)v239, 0x200000000, v274);
  sub_1B1A18378((uint64_t)v274, (uint64_t)v300, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (!*(_QWORD *)&v300[0])
  {
    v6 = 0;
    goto LABEL_36;
  }
  if (v306 < 1 || (v194 = v303) == 0)
  {
    v6 = 0;
    goto LABEL_35;
  }
  v2 = v305;
  v3 = v305[4];
  v4 = *(unsigned __int8 *)(v304 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
  v225[0] = v300[0];
  v225[1] = v300[1];
  v226 = v301;
  v186 = (uint64_t)(v305 + 6);
  v190 = v302;
  v183 = v305 + 8;
  swift_retain();
  swift_retain();
  swift_retain();
  v5 = 0;
  v6 = 0;
  v179 = v4;
  do
  {
    v7 = (unsigned int *)(v190 + 48 * v5);
    v8 = (uint64_t *)*((_QWORD *)v7 + 2);
    v9 = *((_QWORD *)v7 + 5);
    v211 = *((_QWORD *)v7 + 4);
    v198 = *v7;
    v202 = v7[1];
    v206 = *((_QWORD *)v7 + 3);
    if (v4)
    {
      v10 = *(os_unfair_lock_s **)(v9 + 376);
      swift_retain_n();
      os_unfair_lock_lock(v10);
      os_unfair_lock_lock(*(os_unfair_lock_t *)(v9 + 344));
      swift_release();
    }
    else
    {
      swift_retain();
    }
    ecs_stack_allocator_push_snapshot(v3);
    sub_1B1A18378(v186, (uint64_t)v310, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
    v11 = v2[4];
    v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 40) + 16) + 32) + 16) + 1;
    swift_retain();
    v2[6] = ecs_stack_allocator_allocate(v11, 48 * v12, 8);
    v2[7] = v12;
    v183[1] = 0;
    v183[2] = 0;
    *v183 = 0;
    swift_release();
    v13 = sub_1B1A12038((uint64_t)&type metadata for GraphScriptingConfig, (uint64_t)&off_1E639BCE0, v8, v206, v211, (uint64_t)v2);
    if (v8)
    {
      v14 = v6;
      v4 = v179;
      if (!v211)
        goto LABEL_30;
      v15 = v211;
      if (v211 == 1)
      {
        v16 = 0;
LABEL_20:
        v19 = v15 - v16;
        v20 = (_BYTE *)(v13 + 32 * v16 + 26);
        do
        {
          *v20 = 1;
          v20 += 32;
          --v19;
        }
        while (v19);
        goto LABEL_30;
      }
      v16 = v211 & 0xFFFFFFFFFFFFFFFELL;
      v17 = (_BYTE *)(v13 + 58);
      v18 = v211 & 0xFFFFFFFFFFFFFFFELL;
      do
      {
        *(v17 - 32) = 1;
        *v17 = 1;
        v17 += 64;
        v18 -= 2;
      }
      while (v18);
      v15 = v211;
      if (v211 != v16)
        goto LABEL_20;
    }
    else
    {
      v14 = v6;
      v4 = v179;
      if ((_DWORD)v198 == (_DWORD)v202)
        goto LABEL_30;
      v21 = v202 - v198;
      if ((unint64_t)(v202 - v198) < 2)
      {
        v22 = v198;
LABEL_28:
        v25 = (_BYTE *)(v13 + 32 * v22 + 26);
        v26 = v202 - v22;
        do
        {
          *v25 = 1;
          v25 += 32;
          --v26;
        }
        while (v26);
        goto LABEL_30;
      }
      v22 = (v21 & 0xFFFFFFFFFFFFFFFELL) + v198;
      v23 = (_BYTE *)(v13 + 32 * v198 + 58);
      v24 = v21 & 0xFFFFFFFFFFFFFFFELL;
      do
      {
        *(v23 - 32) = 1;
        *v23 = 1;
        v23 += 64;
        v24 -= 2;
      }
      while (v24);
      if (v21 != (v21 & 0xFFFFFFFFFFFFFFFELL))
        goto LABEL_28;
    }
LABEL_30:
    v6 = v14;
    sub_1B1F05D48(v2, (unsigned __int16 **)v225, (uint64_t)v310);
    sub_1B1F03804((char *)v9);
    ecs_stack_allocator_pop_snapshot(v3);
    if ((v4 & 1) != 0)
    {
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v9 + 344));
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v9 + 376));
    }
    swift_release();
    ++v5;
  }
  while (v5 != v194);
  sub_1B19ED748(v274);
LABEL_35:
  sub_1B19ED748(v274);
LABEL_36:
  v253 = qword_1ED4D09F8;
  v254 = 0;
  v255 = 2;
  v256 = 0;
  v257 = 2;
  v258 = 0;
  swift_retain();
  sub_1B1E3D7C4(1, (uint64_t)v219);
  swift_release();
  v237[0] = v219[0];
  v237[1] = v219[1];
  v238 = v220;
  sub_1B1E8FCE4(a1, (uint64_t)v237, 0x200000000, v275);
  sub_1B1A18378((uint64_t)v275, (uint64_t)v293, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (*(_QWORD *)&v293[0])
  {
    if (v299 < 1)
      goto LABEL_85;
    v191 = v296;
    if (!v296)
      goto LABEL_85;
    v203 = v298[4];
    v199 = *(unsigned __int8 *)(v297 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
    v227[0] = v293[0];
    v227[1] = v293[1];
    v184 = v295;
    v187 = (uint64_t)(v298 + 6);
    v228 = v294;
    v207 = v298;
    v180 = v298 + 8;
    swift_retain();
    swift_retain();
    swift_retain();
    v27 = 0;
    while (1)
    {
      v28 = (unsigned int *)(v184 + 48 * v27);
      v29 = *v28;
      v210 = v6;
      v212 = v28[1];
      v31 = (uint64_t *)*((_QWORD *)v28 + 2);
      v30 = *((_QWORD *)v28 + 3);
      v33 = *((_QWORD *)v28 + 4);
      v32 = *((_QWORD *)v28 + 5);
      v195 = v27;
      if (v199)
      {
        v34 = *(os_unfair_lock_s **)(v32 + 376);
        swift_retain();
        os_unfair_lock_lock(v34);
        os_unfair_lock_lock(*(os_unfair_lock_t *)(v32 + 344));
      }
      else
      {
        swift_retain();
      }
      ecs_stack_allocator_push_snapshot(v203);
      sub_1B1A18378(v187, (uint64_t)v309, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
      v35 = v207[4];
      v36 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v32 + 40) + 16) + 32) + 16) + 1;
      swift_retain();
      v207[6] = ecs_stack_allocator_allocate(v35, 48 * v36, 8);
      v207[7] = v36;
      v180[1] = 0;
      v180[2] = 0;
      *v180 = 0;
      swift_release();
      sub_1B1A12038((uint64_t)&type metadata for EmitterDescription, (uint64_t)&off_1E6391AC0, v31, v30, v33, (uint64_t)v207);
      if (v31)
      {
        v6 = v210;
        v37 = &qword_1ED4B8000;
        if (!v33)
          goto LABEL_69;
        while (1)
        {
          while (1)
          {
            v39 = *v31++;
            v38 = v39;
            v40 = swift_retain();
            if ((*(_BYTE *)(v32 + 184) & 1) != 0)
              goto LABEL_193;
            v41 = *(unsigned int *)(*(_QWORD *)(v32 + 168) + 4 * v38);
            v42 = *(unsigned int *)(*(_QWORD *)(v40 + v37[192]) + 12 * (int)v41 + 8);
            swift_release();
            if ((_DWORD)v41 != -1 || (_DWORD)v42 != 0)
              break;
            swift_retain();
LABEL_48:
            swift_release();
            if (!--v33)
              goto LABEL_69;
          }
          swift_retain();
          if (sub_1B1FD568C((uint64_t)&type metadata for EmitterDescription, (uint64_t)&off_1E6391B38, v41 | (v42 << 32)))
          {
            *(_QWORD *)&v280 = &off_1E636F320;
            *(_QWORD *)&v278 = __PAIR64__(v42, v41);
            *((_QWORD *)&v279 + 1) = &type metadata for VFXEmitter;
            *((_QWORD *)&v278 + 1) = a1;
            sub_1B1A02518(&v278, (uint64_t)&v285);
            v44 = sub_1B19FA070(&v285, *((uint64_t *)&v286 + 1));
            v46 = *v44;
            v45 = v44[1];
            swift_retain();
            v47 = v46;
            v37 = &qword_1ED4B8000;
            sub_1B20C9014((uint64_t)&type metadata for GraphScriptingConfig, (uint64_t)&off_1E639BCE0, 5, v47, v45, a1);
            swift_release();
            _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v285);
            goto LABEL_48;
          }
          v48 = v37[192];
          swift_retain();
          if ((v41 & 0x80000000) == 0 && *(_QWORD *)(a1 + v48 + 8) > (int)v41)
          {
            v49 = *(_QWORD *)(a1 + v48);
            if ((_DWORD)v42 == -1 || *(_DWORD *)(v49 + 12 * (int)v41 + 8) == (_DWORD)v42)
            {
              sub_1B1A10AA4(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * *(__int16 *)(v49 + 12 * (int)v41 + 6) + 32), (uint64_t)&type metadata for GraphScriptingConfig, &v285);
              swift_release();
              if ((v285 & 1) != 0)
              {
                type metadata accessor for VFXAttribute();
                v51 = swift_allocObject();
                *(_QWORD *)(v51 + 16) = a1;
                swift_retain();
                swift_unownedRetain();
                swift_release();
                *(_DWORD *)(v51 + 24) = v41;
                *(_DWORD *)(v51 + 28) = v42;
                *(_QWORD *)(v51 + 32) = &type metadata for GraphScriptingConfig;
                *(_QWORD *)(v51 + 40) = &off_1E639BD58;
                sub_1B1BFCBD4(v51, a1);
                swift_setDeallocating();
                sub_1B1A1369C();
              }
              goto LABEL_48;
            }
          }
          swift_release_n();
          if (!--v33)
            goto LABEL_69;
        }
      }
      v6 = v210;
      v52 = &qword_1ED4B8000;
      if ((_DWORD)v29 != (_DWORD)v212)
        break;
LABEL_69:
      sub_1B1F05D48(v207, (unsigned __int16 **)v227, (uint64_t)v309);
      sub_1B1F03804((char *)v32);
      ecs_stack_allocator_pop_snapshot(v203);
      if ((v199 & 1) != 0)
      {
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v32 + 344));
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v32 + 376));
      }
      swift_release();
      v27 = v195 + 1;
      if (v195 + 1 == v191)
      {
        sub_1B19ED748(v275);
LABEL_85:
        sub_1B19ED748(v275);
        goto LABEL_86;
      }
    }
    while (2)
    {
      v56 = swift_retain();
      if ((*(_BYTE *)(v32 + 184) & 1) != 0)
      {
LABEL_193:
        result = (uint64_t *)sub_1B2229688();
        __break(1u);
        return result;
      }
      v57 = *(_DWORD *)(*(_QWORD *)(v32 + 168) + 4 * v29);
      v58 = *(unsigned int *)(*(_QWORD *)(v56 + v52[192]) + 12 * (int)v57 + 8);
      swift_release();
      if (v57 == -1 && (_DWORD)v58 == 0)
      {
        swift_retain();
        v60 = 0xFFFFFFFFLL;
LABEL_81:
        swift_retain();
        v61 = sub_1B1FD568C((uint64_t)&type metadata for GraphScriptingConfig, (uint64_t)&off_1E639BD58, v60);
        swift_release();
        if (v61)
        {
          type metadata accessor for VFXAttribute();
          v62 = swift_allocObject();
          *(_QWORD *)(v62 + 16) = a1;
          swift_retain();
          swift_unownedRetain();
          swift_release();
          *(_DWORD *)(v62 + 24) = v57;
          *(_DWORD *)(v62 + 28) = v58;
          *(_QWORD *)(v62 + 32) = &type metadata for GraphScriptingConfig;
          *(_QWORD *)(v62 + 40) = &off_1E639BD58;
          sub_1B1BFCBD4(v62, a1);
          swift_setDeallocating();
          sub_1B1A1369C();
        }
      }
      else
      {
        v60 = v57 | (unint64_t)(v58 << 32);
        swift_retain();
        if (!sub_1B1FD568C((uint64_t)&type metadata for EmitterDescription, (uint64_t)&off_1E6391B38, v60))
          goto LABEL_81;
        *(_QWORD *)&v280 = &off_1E636F320;
        *(_QWORD *)&v278 = __PAIR64__(v58, v57);
        *((_QWORD *)&v279 + 1) = &type metadata for VFXEmitter;
        *((_QWORD *)&v278 + 1) = a1;
        sub_1B1A02518(&v278, (uint64_t)&v285);
        v53 = sub_1B19FA070(&v285, *((uint64_t *)&v286 + 1));
        v55 = *v53;
        v54 = v53[1];
        swift_retain();
        sub_1B20C9014((uint64_t)&type metadata for GraphScriptingConfig, (uint64_t)&off_1E639BCE0, 5, v55, v54, a1);
        swift_release();
        _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v285);
      }
      swift_release();
      v52 = &qword_1ED4B8000;
      if (v212 == ++v29)
        goto LABEL_69;
      continue;
    }
  }
LABEL_86:
  v63 = sub_1B1C16548(a1, 0);
  v64 = *(_QWORD *)(v63 + 16);
  if (v64)
  {
    v65 = (uint64_t *)(v63 + 32);
    while (1)
    {
      v66 = *v65;
      if ((_DWORD)v66 == -1)
        break;
      v213 = *v65;
      v67 = OBJC_IVAR____TtC3VFX13EntityManager__entries;
      swift_retain();
      if ((v66 & 0x80000000) != 0)
        goto LABEL_110;
      if (*(_QWORD *)(a1 + v67 + 8) > (int)v66)
      {
        v68 = *(_QWORD *)(a1 + v67);
        if (HIDWORD(v213) == -1 || *(_DWORD *)(v68 + 12 * (int)v66 + 8) == HIDWORD(v213))
        {
          v70 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * *(__int16 *)(v68 + 12 * (int)v66 + 6) + 32) + 16);
          v71 = *(_QWORD *)(v70 + 128);
          if (*(_QWORD *)(v71 + 16))
          {
            v72 = sub_1B1DC3AC8((uint64_t)&type metadata for EmitterDescription);
            if ((v73 & 1) != 0
              && *(ValueMetadata **)(*(_QWORD *)(v70 + 24) + 16 * *(_QWORD *)(*(_QWORD *)(v71 + 56) + 8 * v72) + 32) == &type metadata for EmitterDescription)
            {
              *(_QWORD *)&v280 = &off_1E636F320;
              *(_QWORD *)&v278 = v213;
              *((_QWORD *)&v279 + 1) = &type metadata for VFXEmitter;
              *((_QWORD *)&v278 + 1) = a1;
              sub_1B1A02518(&v278, (uint64_t)&v285);
              v83 = sub_1B19FA070(&v285, *((uint64_t *)&v286 + 1));
              v85 = *v83;
              v84 = v83[1];
              swift_retain();
              sub_1B20C9014((uint64_t)&type metadata for GraphScriptingConfig, (uint64_t)&off_1E639BCE0, 5, v85, v84, a1);
              swift_release();
              _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v285);
LABEL_115:
              swift_release();
              goto LABEL_112;
            }
          }
        }
      }
      v74 = (_QWORD *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
      v75 = *(_QWORD *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8);
      swift_retain();
      if (v75 > v66 && (HIDWORD(v213) == -1 || *(_DWORD *)(*v74 + 12 * v66 + 8) == HIDWORD(v213)))
      {
        v77 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * *(__int16 *)(*v74 + 12 * v66 + 6) + 32)
                        + 16);
        v78 = *(_QWORD *)(v77 + 128);
        if (*(_QWORD *)(v78 + 16))
        {
          v79 = sub_1B1DC3AC8((uint64_t)&type metadata for GraphScriptingConfig);
          if ((v80 & 1) != 0)
          {
            v81 = *(ValueMetadata **)(*(_QWORD *)(v77 + 24) + 16 * *(_QWORD *)(*(_QWORD *)(v78 + 56) + 8 * v79) + 32);
            swift_release();
            if (v81 == &type metadata for GraphScriptingConfig)
            {
              type metadata accessor for VFXAttribute();
              v82 = (_QWORD *)swift_allocObject();
              v82[2] = a1;
              swift_retain();
              swift_unownedRetain();
              swift_release();
              v82[3] = v213;
              v82[4] = &type metadata for GraphScriptingConfig;
              v82[5] = &off_1E639BD58;
              sub_1B1BFCBD4((uint64_t)v82, a1);
              swift_setDeallocating();
              sub_1B1A1369C();
            }
            goto LABEL_115;
          }
        }
      }
LABEL_111:
      swift_release_n();
LABEL_112:
      ++v65;
      if (!--v64)
        goto LABEL_116;
    }
    swift_retain();
LABEL_110:
    swift_retain();
    goto LABEL_111;
  }
LABEL_116:
  swift_bridgeObjectRelease();
  v247 = qword_1ED4D09F8;
  v248 = 0;
  v249 = 2;
  v250 = 0;
  v251 = 2;
  v252 = 0;
  swift_retain();
  sub_1B1E4011C(3, (uint64_t)v221);
  swift_release();
  v235[0] = v221[0];
  v235[1] = v221[1];
  v236 = v222;
  sub_1B1E8FCE4(a1, (uint64_t)v235, 0x200000000, v276);
  sub_1B1A18378((uint64_t)v276, (uint64_t)&v285, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if ((_QWORD)v285)
  {
    if (v292 >= 1)
    {
      v181 = v289;
      if (v289)
      {
        v192 = v291[4];
        v188 = *(unsigned __int8 *)(v290 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
        v229[0] = v285;
        v229[1] = v286;
        v230 = v287;
        v175 = (uint64_t)(v291 + 6);
        v177 = v288;
        v196 = v291 + 13;
        v204 = v291;
        v173 = v291 + 8;
        swift_retain();
        swift_retain();
        swift_retain();
        v86 = 0;
        do
        {
          v87 = (unsigned int *)(v177 + 48 * v86);
          v88 = *v87;
          v208 = v87[1];
          v89 = *((_QWORD *)v87 + 3);
          v200 = (uint64_t *)*((_QWORD *)v87 + 2);
          v90 = *((_QWORD *)v87 + 5);
          v214 = *((_QWORD *)v87 + 4);
          v185 = v86;
          if (v188)
          {
            v91 = *(os_unfair_lock_s **)(v90 + 376);
            swift_retain();
            os_unfair_lock_lock(v91);
            os_unfair_lock_lock(*(os_unfair_lock_t *)(v90 + 344));
          }
          else
          {
            swift_retain();
          }
          ecs_stack_allocator_push_snapshot(v192);
          sub_1B1A18378(v175, (uint64_t)v308, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
          v92 = v204[4];
          v93 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v90 + 40) + 16) + 32) + 16) + 1;
          swift_retain();
          v204[6] = ecs_stack_allocator_allocate(v92, 48 * v93, 8);
          v204[7] = v93;
          v173[1] = 0;
          v173[2] = 0;
          *v173 = 0;
          swift_release();
          v94 = v200;
          sub_1B1A12038((uint64_t)&type metadata for GraphScriptGroup, (uint64_t)&off_1E6387AF0, v200, v89, v214, (uint64_t)v204);
          if (v200)
          {
            if (v214)
            {
              v95 = v214;
              for (i = 0; i != v95; ++i)
              {
                v97 = *(_QWORD *)(*(_QWORD *)(v90 + 40) + 16);
                v98 = *(_QWORD *)(v97 + 128);
                if (*(_QWORD *)(v98 + 16))
                {
                  v99 = v94[i];
                  v100 = sub_1B1DC3AC8((uint64_t)&type metadata for GraphScriptGroup);
                  v95 = v214;
                  if ((v101 & 1) != 0
                    && *(ValueMetadata **)(*(_QWORD *)(v97 + 24)
                                         + 16 * *(_QWORD *)(*(_QWORD *)(v98 + 56) + 8 * v100)
                                         + 32) == &type metadata for GraphScriptGroup)
                  {
                    *(_QWORD *)&v265 = &type metadata for GraphScriptGroup;
                    *((_QWORD *)&v265 + 1) = &off_1E6387AF0;
                    BYTE8(v267) = 1;
                    v102 = *v196;
                    if (*(_QWORD *)(*v196 + 16))
                    {
                      swift_retain();
                      swift_bridgeObjectRetain();
                      sub_1B1792810(v102 + 32, (uint64_t)v277, (uint64_t (*)(_QWORD))sub_1B1B1F228);
                      sub_1B1BE90FC((uint64_t)v277, (uint64_t)&v278);
                      sub_1B1BE90FC((uint64_t)&v265, (uint64_t)&v281);
                      __asm { BR              X9 }
                    }
                    swift_retain();
                    v103 = *(_QWORD *)(v90 + 240) - *(_QWORD *)(v90 + 232);
                    v104 = ecs_stack_allocator_allocate(v204[4], 8 * v103, 8);
                    *v104 = v99;
                    sub_1B1BE90FC((uint64_t)&v265, (uint64_t)&v278);
                    *(_QWORD *)&v281 = v104;
                    *((_QWORD *)&v281 + 1) = v103;
                    v282 = 1;
                    v105 = (_QWORD *)v204[13];
                    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
                    v204[13] = v105;
                    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
                    {
                      v105 = sub_1B1C631A0(0, v105[2] + 1, 1, v105);
                      *v196 = v105;
                    }
                    v108 = v105[2];
                    v107 = v105[3];
                    if (v108 >= v107 >> 1)
                    {
                      v105 = sub_1B1C631A0(v107 > 1, v108 + 1, 1, v105);
                      *v196 = v105;
                    }
                    v105[2] = v108 + 1;
                    v109 = &v105[9 * v108];
                    *((_OWORD *)v109 + 2) = v278;
                    v110 = v279;
                    v111 = v280;
                    v112 = v281;
                    v109[12] = v282;
                    *((_OWORD *)v109 + 4) = v111;
                    *((_OWORD *)v109 + 5) = v112;
                    *((_OWORD *)v109 + 3) = v110;
                    v94 = v200;
                    sub_1B1B68F14((uint64_t)&v265);
                    swift_release();
                    v95 = v214;
                  }
                }
              }
            }
          }
          else if ((_DWORD)v88 != (_DWORD)v208)
          {
            do
            {
              v113 = v88 + 1;
              v114 = *(_QWORD *)(*(_QWORD *)(v90 + 40) + 16);
              v115 = *(_QWORD *)(v114 + 128);
              if (*(_QWORD *)(v115 + 16))
              {
                v116 = sub_1B1DC3AC8((uint64_t)&type metadata for GraphScriptGroup);
                if ((v117 & 1) != 0
                  && *(ValueMetadata **)(*(_QWORD *)(v114 + 24)
                                       + 16 * *(_QWORD *)(*(_QWORD *)(v115 + 56) + 8 * v116)
                                       + 32) == &type metadata for GraphScriptGroup)
                {
                  *(_QWORD *)&v265 = &type metadata for GraphScriptGroup;
                  *((_QWORD *)&v265 + 1) = &off_1E6387AF0;
                  BYTE8(v267) = 1;
                  v118 = *v196;
                  if (*(_QWORD *)(*v196 + 16))
                  {
                    swift_retain();
                    swift_bridgeObjectRetain();
                    sub_1B1792810(v118 + 32, (uint64_t)v277, (uint64_t (*)(_QWORD))sub_1B1B1F228);
                    sub_1B1BE90FC((uint64_t)v277, (uint64_t)&v278);
                    sub_1B1BE90FC((uint64_t)&v265, (uint64_t)&v281);
                    __asm { BR              X9 }
                  }
                  swift_retain();
                  v119 = *(_QWORD *)(v90 + 240) - *(_QWORD *)(v90 + 232);
                  v120 = ecs_stack_allocator_allocate(v204[4], 8 * v119, 8);
                  *v120 = v88;
                  sub_1B1BE90FC((uint64_t)&v265, (uint64_t)&v278);
                  *(_QWORD *)&v281 = v120;
                  *((_QWORD *)&v281 + 1) = v119;
                  v282 = 1;
                  v121 = (_QWORD *)v204[13];
                  v122 = swift_isUniquelyReferenced_nonNull_native();
                  v204[13] = v121;
                  if ((v122 & 1) == 0)
                  {
                    v121 = sub_1B1C631A0(0, v121[2] + 1, 1, v121);
                    *v196 = v121;
                  }
                  v124 = v121[2];
                  v123 = v121[3];
                  if (v124 >= v123 >> 1)
                  {
                    v121 = sub_1B1C631A0(v123 > 1, v124 + 1, 1, v121);
                    *v196 = v121;
                  }
                  v121[2] = v124 + 1;
                  v125 = &v121[9 * v124];
                  *((_OWORD *)v125 + 2) = v278;
                  v126 = v279;
                  v127 = v280;
                  v128 = v281;
                  v125[12] = v282;
                  *((_OWORD *)v125 + 4) = v127;
                  *((_OWORD *)v125 + 5) = v128;
                  *((_OWORD *)v125 + 3) = v126;
                  sub_1B1B68F14((uint64_t)&v265);
                  swift_release();
                }
              }
              ++v88;
            }
            while (v113 != v208);
          }
          sub_1B1F05D48(v204, (unsigned __int16 **)v229, (uint64_t)v308);
          sub_1B1F03804((char *)v90);
          ecs_stack_allocator_pop_snapshot(v192);
          if ((v188 & 1) != 0)
          {
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v90 + 344));
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v90 + 376));
          }
          swift_release();
          v86 = v185 + 1;
        }
        while (v185 + 1 != v181);
        sub_1B19ED748(v276);
      }
    }
    sub_1B19ED748(v276);
  }
  v241 = qword_1ED4D09F8;
  v242 = 0;
  v243 = 2;
  v244 = 0;
  v245 = 2;
  v246 = 0;
  swift_retain();
  sub_1B1E40704(3, (uint64_t)v223);
  swift_release();
  v233[0] = v223[0];
  v233[1] = v223[1];
  v234 = v224;
  sub_1B1E8FCE4(a1, (uint64_t)v233, 0x200000000, v277);
  sub_1B1A18378((uint64_t)v277, (uint64_t)&v278, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if ((_QWORD)v278)
  {
    if (v284 > 0 && (v182 = *((_QWORD *)&v281 + 1)) != 0)
    {
      v197 = v283[4];
      v193 = *(_BYTE *)(v282 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
      v231[0] = v278;
      v231[1] = v279;
      v232 = v280;
      v176 = (uint64_t)(v283 + 6);
      v178 = *((_QWORD *)&v280 + 1);
      v201 = v283 + 13;
      v205 = v283;
      v174 = v283 + 8;
      swift_retain();
      swift_retain();
      swift_retain();
      v129 = 0;
      do
      {
        v130 = (unsigned int *)(v178 + 48 * v129);
        v131 = *v130;
        v215 = v130[1];
        v132 = *((_QWORD *)v130 + 3);
        v209 = (uint64_t *)*((_QWORD *)v130 + 2);
        v133 = *((_QWORD *)v130 + 4);
        v134 = *((_QWORD *)v130 + 5);
        v189 = v129;
        if ((v193 & 1) != 0)
        {
          v135 = *(os_unfair_lock_s **)(v134 + 376);
          swift_retain();
          os_unfair_lock_lock(v135);
          os_unfair_lock_lock(*(os_unfair_lock_t *)(v134 + 344));
        }
        else
        {
          swift_retain();
        }
        ecs_stack_allocator_push_snapshot(v197);
        sub_1B1A18378(v176, (uint64_t)v307, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
        v136 = v205[4];
        v137 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v134 + 40) + 16) + 32) + 16) + 1;
        swift_retain();
        v205[6] = ecs_stack_allocator_allocate(v136, 48 * v137, 8);
        v205[7] = v137;
        v174[1] = 0;
        v174[2] = 0;
        *v174 = 0;
        swift_release();
        sub_1B1A12038((uint64_t)&type metadata for GraphDebuggingComponent, (uint64_t)&off_1E63AA790, v209, v132, v133, (uint64_t)v205);
        if (v209)
        {
          if (v133)
          {
            v138 = 0;
            v139 = v209;
            do
            {
              v141 = *(_QWORD *)(*(_QWORD *)(v134 + 40) + 16);
              v142 = *(_QWORD *)(v141 + 128);
              if (*(_QWORD *)(v142 + 16))
              {
                v216 = v139[v138];
                v143 = sub_1B1DC3AC8((uint64_t)&type metadata for GraphDebuggingComponent);
                if ((v144 & 1) != 0
                  && *(ValueMetadata **)(*(_QWORD *)(v141 + 24)
                                       + 16 * *(_QWORD *)(*(_QWORD *)(v142 + 56) + 8 * v143)
                                       + 32) == &type metadata for GraphDebuggingComponent)
                {
                  v271 = &type metadata for GraphDebuggingComponent;
                  v272 = &off_1E63AA790;
                  v273 = 1;
                  v145 = *v201;
                  if (*(_QWORD *)(*v201 + 16))
                  {
                    swift_retain();
                    swift_bridgeObjectRetain();
                    sub_1B1792810(v145 + 32, (uint64_t)v270, (uint64_t (*)(_QWORD))sub_1B1B1F228);
                    sub_1B1BE90FC((uint64_t)v270, (uint64_t)&v265);
                    sub_1B1BE90FC((uint64_t)&v271, (uint64_t)&v268);
                    __asm { BR              X9 }
                  }
                  swift_retain();
                  v146 = *(_QWORD *)(v134 + 240) - *(_QWORD *)(v134 + 232);
                  v147 = ecs_stack_allocator_allocate(v205[4], 8 * v146, 8);
                  *v147 = v216;
                  sub_1B1BE90FC((uint64_t)&v271, (uint64_t)&v265);
                  *(_QWORD *)&v268 = v147;
                  *((_QWORD *)&v268 + 1) = v146;
                  v269 = 1;
                  v148 = (_QWORD *)v205[13];
                  v149 = swift_isUniquelyReferenced_nonNull_native();
                  v205[13] = v148;
                  v139 = v209;
                  if ((v149 & 1) == 0)
                  {
                    v148 = sub_1B1C631A0(0, v148[2] + 1, 1, v148);
                    *v201 = v148;
                  }
                  v151 = v148[2];
                  v150 = v148[3];
                  if (v151 >= v150 >> 1)
                  {
                    v148 = sub_1B1C631A0(v150 > 1, v151 + 1, 1, v148);
                    *v201 = v148;
                  }
                  v148[2] = v151 + 1;
                  v152 = &v148[9 * v151];
                  *((_OWORD *)v152 + 2) = v265;
                  v153 = v266;
                  v154 = v267;
                  v155 = v268;
                  v152[12] = v269;
                  *((_OWORD *)v152 + 4) = v154;
                  *((_OWORD *)v152 + 5) = v155;
                  *((_OWORD *)v152 + 3) = v153;
                  sub_1B1B68F14((uint64_t)&v271);
                  swift_release();
                }
              }
              ++v138;
            }
            while (v138 != v133);
          }
        }
        else
        {
          v140 = v215;
          if ((_DWORD)v131 != (_DWORD)v215)
          {
            do
            {
              v156 = v131 + 1;
              v157 = *(_QWORD *)(*(_QWORD *)(v134 + 40) + 16);
              v158 = *(_QWORD *)(v157 + 128);
              if (*(_QWORD *)(v158 + 16))
              {
                v159 = sub_1B1DC3AC8((uint64_t)&type metadata for GraphDebuggingComponent);
                if ((v160 & 1) != 0
                  && *(ValueMetadata **)(*(_QWORD *)(v157 + 24)
                                       + 16 * *(_QWORD *)(*(_QWORD *)(v158 + 56) + 8 * v159)
                                       + 32) == &type metadata for GraphDebuggingComponent)
                {
                  v271 = &type metadata for GraphDebuggingComponent;
                  v272 = &off_1E63AA790;
                  v273 = 1;
                  v161 = *v201;
                  if (*(_QWORD *)(*v201 + 16))
                  {
                    swift_retain();
                    swift_bridgeObjectRetain();
                    sub_1B1792810(v161 + 32, (uint64_t)v270, (uint64_t (*)(_QWORD))sub_1B1B1F228);
                    sub_1B1BE90FC((uint64_t)v270, (uint64_t)&v265);
                    sub_1B1BE90FC((uint64_t)&v271, (uint64_t)&v268);
                    __asm { BR              X9 }
                  }
                  swift_retain();
                  v162 = *(_QWORD *)(v134 + 240) - *(_QWORD *)(v134 + 232);
                  v163 = ecs_stack_allocator_allocate(v205[4], 8 * v162, 8);
                  *v163 = v131;
                  sub_1B1BE90FC((uint64_t)&v271, (uint64_t)&v265);
                  *(_QWORD *)&v268 = v163;
                  *((_QWORD *)&v268 + 1) = v162;
                  v269 = 1;
                  v164 = (_QWORD *)v205[13];
                  v165 = swift_isUniquelyReferenced_nonNull_native();
                  v205[13] = v164;
                  v140 = v215;
                  if ((v165 & 1) == 0)
                  {
                    v164 = sub_1B1C631A0(0, v164[2] + 1, 1, v164);
                    *v201 = v164;
                  }
                  v167 = v164[2];
                  v166 = v164[3];
                  if (v167 >= v166 >> 1)
                  {
                    v164 = sub_1B1C631A0(v166 > 1, v167 + 1, 1, v164);
                    *v201 = v164;
                  }
                  v164[2] = v167 + 1;
                  v168 = &v164[9 * v167];
                  *((_OWORD *)v168 + 2) = v265;
                  v169 = v266;
                  v170 = v267;
                  v171 = v268;
                  v168[12] = v269;
                  *((_OWORD *)v168 + 4) = v170;
                  *((_OWORD *)v168 + 5) = v171;
                  *((_OWORD *)v168 + 3) = v169;
                  sub_1B1B68F14((uint64_t)&v271);
                  swift_release();
                }
              }
              ++v131;
            }
            while (v156 != v140);
          }
        }
        sub_1B1F05D48(v205, (unsigned __int16 **)v231, (uint64_t)v307);
        sub_1B1F03804((char *)v134);
        ecs_stack_allocator_pop_snapshot(v197);
        if ((v193 & 1) != 0)
        {
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v134 + 344));
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v134 + 376));
        }
        swift_release();
        v129 = v189 + 1;
      }
      while (v189 + 1 != v182);
    }
    else
    {
      swift_retain();
      swift_retain();
      swift_retain();
    }
    sub_1B19ED720((uint64_t)v223);
    sub_1B19ED720((uint64_t)v221);
    sub_1B19ED720((uint64_t)v219);
    sub_1B19ED720((uint64_t)v217);
    sub_1B19ED748(v277);
    return sub_1B19ED748(v277);
  }
  else
  {
    sub_1B19ED720((uint64_t)v223);
    sub_1B19ED720((uint64_t)v221);
    sub_1B19ED720((uint64_t)v219);
    return (uint64_t *)sub_1B19ED720((uint64_t)v217);
  }
}

uint64_t sub_1B1C1CE8C(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8;
  BOOL v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t inited;
  __int128 v16;
  ValueMetadata *v17;
  _UNKNOWN **v18;
  _QWORD v19[5];

  v8 = HIDWORD(a1);
  if (a1 == 0xFFFFFFFF)
  {
    swift_retain();
  }
  else
  {
    swift_retain();
    v9 = sub_1B1FD568C((uint64_t)&type metadata for EmitterDescription, (uint64_t)&off_1E6391B38, a1);
    swift_retain();
    swift_release();
    if (v9)
    {
      v17 = &type metadata for VFXEmitter;
      v18 = &off_1E636F320;
      *(_QWORD *)&v16 = __PAIR64__(v8, a1);
      *((_QWORD *)&v16 + 1) = a2;
      sub_1B1A02518(&v16, (uint64_t)v19);
      v10 = sub_1B19FA070(v19, v19[3]);
      v11 = *v10;
      v12 = v10[1];
      swift_retain();
      sub_1B20C92EC((uint64_t)&type metadata for GraphScriptingConfig, (uint64_t)&off_1E639BCE0, 5, v11, v12, a3, a4);
      swift_release();
      _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v19);
      return swift_release();
    }
  }
  swift_retain();
  v13 = sub_1B1FD568C((uint64_t)&type metadata for GraphScriptingConfig, (uint64_t)&off_1E639BD58, a1);
  swift_release();
  if (v13)
  {
    type metadata accessor for VFXAttribute();
    swift_retain();
    inited = swift_initStackObject();
    *(_QWORD *)(inited + 16) = a2;
    swift_unownedRetain();
    swift_release();
    *(_DWORD *)(inited + 24) = a1;
    *(_DWORD *)(inited + 28) = v8;
    *(_QWORD *)(inited + 32) = &type metadata for GraphScriptingConfig;
    *(_QWORD *)(inited + 40) = &off_1E639BD58;
    sub_1B209858C(inited, a3, a4);
    swift_release();
    return swift_release();
  }
  return swift_release();
}

uint64_t sub_1B1C1D058(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t *a5)
{
  unint64_t v10;
  BOOL v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t inited;
  __int128 v18;
  ValueMetadata *v19;
  _UNKNOWN **v20;
  _QWORD v21[5];

  v10 = HIDWORD(a1);
  if (a1 == 0xFFFFFFFF)
  {
    swift_retain();
  }
  else
  {
    swift_retain();
    v11 = sub_1B1FD568C((uint64_t)&type metadata for EmitterDescription, (uint64_t)&off_1E6391B38, a1);
    swift_retain();
    swift_release();
    if (v11)
    {
      v19 = &type metadata for VFXEmitter;
      v20 = &off_1E636F320;
      *(_QWORD *)&v18 = __PAIR64__(v10, a1);
      *((_QWORD *)&v18 + 1) = a2;
      sub_1B1A02518(&v18, (uint64_t)v21);
      v12 = sub_1B19FA070(v21, v21[3]);
      v13 = *v12;
      v14 = v12[1];
      swift_retain();
      sub_1B20C94E8((uint64_t)&type metadata for GraphScriptingConfig, (uint64_t)&off_1E639BCE0, 5, v13, v14, a3, a4, a5);
      swift_release();
      _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v21);
      return swift_release();
    }
  }
  swift_retain();
  v15 = sub_1B1FD568C((uint64_t)&type metadata for GraphScriptingConfig, (uint64_t)&off_1E639BD58, a1);
  swift_release();
  if (v15)
  {
    type metadata accessor for VFXAttribute();
    swift_retain();
    inited = swift_initStackObject();
    *(_QWORD *)(inited + 16) = a2;
    swift_unownedRetain();
    swift_release();
    *(_DWORD *)(inited + 24) = a1;
    *(_DWORD *)(inited + 28) = v10;
    *(_QWORD *)(inited + 32) = &type metadata for GraphScriptingConfig;
    *(_QWORD *)(inited + 40) = &off_1E639BD58;
    sub_1B20989DC(inited, a3, a4, a5);
    swift_release();
    return swift_release();
  }
  return swift_release();
}

uint64_t sub_1B1C1D23C(unint64_t *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t i;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  _QWORD *v20;
  BOOL v21;
  uint64_t v24;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  int64_t v29;
  _QWORD v30[2];
  uint64_t v31;
  _BYTE v32[96];
  uint64_t *v33;

  v27 = 0;
  i = 0;
  v7 = 1 << *(_BYTE *)(a3 + 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & *(_QWORD *)(a3 + 64);
  v33 = &v31;
  v28 = a3 + 64;
  v29 = (unint64_t)(v7 + 63) >> 6;
  v24 = a3 + 104;
  v26 = a4 + 7;
  if (v9)
    goto LABEL_6;
LABEL_7:
  while (2)
  {
    v12 = i + 1;
    if (i + 1 < v29)
    {
      v13 = *(_QWORD *)(v28 + 8 * v12);
      if (v13)
        goto LABEL_18;
      v12 = i + 2;
      if (i + 2 >= v29)
        return sub_1B1C04EA0(a1, a2, v27, a3);
      v13 = *(_QWORD *)(v28 + 8 * v12);
      if (v13)
        goto LABEL_18;
      v12 = i + 3;
      if (i + 3 >= v29)
        return sub_1B1C04EA0(a1, a2, v27, a3);
      v13 = *(_QWORD *)(v28 + 8 * v12);
      if (v13)
      {
LABEL_18:
        v9 = (v13 - 1) & v13;
        v11 = __clz(__rbit64(v13)) + (v12 << 6);
        for (i = v12; ; v11 = v10 | (i << 6))
        {
          v14 = (uint64_t *)(*(_QWORD *)(a3 + 48) + 16 * v11);
          v15 = *v14;
          v16 = v14[1];
          sub_1B19F8F0C(*(_QWORD *)(a3 + 56) + 88 * v11, (uint64_t)v32);
          v30[0] = v15;
          v30[1] = v16;
          sub_1B19F8F0C((uint64_t)v32, (uint64_t)v33);
          v17 = a4[2];
          if (!v17)
            break;
          v18 = a4[4] == v15 && a4[5] == v16;
          if (!v18 && (sub_1B2229D24() & 1) == 0)
          {
            v19 = v17 - 1;
            if (!v19)
              break;
            v20 = v26;
            while (1)
            {
              v21 = *(v20 - 1) == v15 && *v20 == v16;
              if (v21 || (sub_1B2229D24() & 1) != 0)
                break;
              v20 += 2;
              if (!--v19)
                goto LABEL_5;
            }
          }
          swift_bridgeObjectRetain_n();
          sub_1B1A04628((uint64_t)v30, (uint64_t (*)(_QWORD))sub_1B1C190A8);
          sub_1B1A203C4((uint64_t)v32);
          swift_bridgeObjectRelease();
          *(unint64_t *)((char *)a1 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
          ++v27;
          if (!v9)
            goto LABEL_7;
LABEL_6:
          v10 = __clz(__rbit64(v9));
          v9 &= v9 - 1;
        }
LABEL_5:
        swift_bridgeObjectRetain_n();
        sub_1B1A04628((uint64_t)v30, (uint64_t (*)(_QWORD))sub_1B1C190A8);
        sub_1B1A203C4((uint64_t)v32);
        swift_bridgeObjectRelease();
        if (!v9)
          continue;
        goto LABEL_6;
      }
      v12 = i + 4;
      if (i + 4 < v29)
      {
        v13 = *(_QWORD *)(v28 + 8 * v12);
        if (!v13)
        {
          do
          {
            if (v29 - 5 == i)
              return sub_1B1C04EA0(a1, a2, v27, a3);
            v13 = *(_QWORD *)(v24 + 8 * i++);
          }
          while (!v13);
          v12 = i + 4;
        }
        goto LABEL_18;
      }
    }
    return sub_1B1C04EA0(a1, a2, v27, a3);
  }
}

uint64_t sub_1B1C1D4F0(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  size_t v21;
  _QWORD *v22;
  uint64_t isStackAllocationSafe;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t result;
  uint64_t v46;
  uint64_t v47;
  int64_t v48;
  uint64_t v49;
  int64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v3 = v2;
  v57 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 64);
  v51 = a1 + 64;
  v49 = MEMORY[0x1E0DEE9E0];
  v56 = MEMORY[0x1E0DEE9E0];
  v6 = -1 << *(_BYTE *)(a1 + 32);
  if (-v6 < 64)
    v7 = ~(-1 << -(char)v6);
  else
    v7 = -1;
  v8 = v7 & v5;
  v46 = -1 << *(_BYTE *)(a1 + 32);
  v9 = 0;
  v50 = (unint64_t)(63 - v6) >> 6;
  v55 = swift_bridgeObjectRetain();
  v47 = v55 + 112;
  v48 = v50 - 6;
  while (1)
  {
    do
    {
      if (v8)
      {
        v10 = __clz(__rbit64(v8));
        v8 &= v8 - 1;
        v11 = v10 | (v9 << 6);
      }
      else
      {
        v12 = v9 + 1;
        if (v9 + 1 >= v50)
          goto LABEL_42;
        v13 = *(_QWORD *)(v51 + 8 * v12);
        if (!v13)
        {
          v12 = v9 + 2;
          if (v9 + 2 >= v50)
            goto LABEL_42;
          v13 = *(_QWORD *)(v51 + 8 * v12);
          if (!v13)
          {
            v12 = v9 + 3;
            if (v9 + 3 >= v50)
              goto LABEL_42;
            v13 = *(_QWORD *)(v51 + 8 * v12);
            if (!v13)
            {
              v12 = v9 + 4;
              if (v9 + 4 >= v50)
                goto LABEL_42;
              v13 = *(_QWORD *)(v51 + 8 * v12);
              if (!v13)
              {
                v12 = v9 + 5;
                if (v9 + 5 >= v50)
                  goto LABEL_42;
                v13 = *(_QWORD *)(v51 + 8 * v12);
                if (!v13)
                {
                  v14 = v9;
                  while (v48 != v14)
                  {
                    v13 = *(_QWORD *)(v47 + 8 * v14++);
                    if (v13)
                    {
                      v12 = v14 + 5;
                      goto LABEL_21;
                    }
                  }
LABEL_42:
                  sub_1B19F8D30();
                  return v49;
                }
              }
            }
          }
        }
LABEL_21:
        v8 = (v13 - 1) & v13;
        v11 = __clz(__rbit64(v13)) + (v12 << 6);
        v9 = v12;
      }
      v15 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v55 + 56) + 8 * v11) + 16);
    }
    while (!v15);
    v54 = v3;
    v16 = *(_QWORD *)(v55 + 48) + 16 * v11;
    v52 = *(_QWORD *)v16;
    v17 = a2;
    v18 = *(_QWORD *)(v16 + 8);
    LOBYTE(v16) = *(_BYTE *)(v15 + 32);
    v19 = v16 & 0x3F;
    v20 = (unint64_t)((1 << v16) + 63) >> 6;
    v21 = 8 * v20;
    v22 = v17;
    swift_bridgeObjectRetain_n();
    v53 = v18;
    swift_bridgeObjectRetain();
    swift_retain();
    isStackAllocationSafe = swift_bridgeObjectRetain();
    if (v19 <= 0xD)
      break;
    isStackAllocationSafe = swift_stdlib_isStackAllocationSafe();
    if ((isStackAllocationSafe & 1) != 0)
      break;
    v27 = (void *)swift_slowAlloc();
    bzero(v27, v21);
    a2 = v22;
    swift_bridgeObjectRetain();
    v28 = v54;
    v29 = sub_1B1C1D23C((unint64_t *)v27, v20, v15, v22);
    if (v28)
      goto LABEL_44;
    v26 = v29;
    v3 = 0;
    swift_bridgeObjectRelease();
    MEMORY[0x1B5E23F88](v27, -1, -1);
LABEL_29:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    v30 = v53;
    if (*(_QWORD *)(v26 + 16))
    {
      _s11MetadataSetCMa();
      v31 = swift_allocObject();
      *(_QWORD *)(v31 + 16) = v26;
      v32 = v49;
      v33 = *(_QWORD *)(v49 + 16);
      if (*(_QWORD *)(v49 + 24) <= v33)
      {
        sub_1B1E9AAA0(v33 + 1, 1);
        v32 = v56;
      }
      v49 = v32;
      sub_1B222A06C();
      v34 = v52;
      sub_1B2228824();
      v35 = sub_1B222A0C0();
      v36 = (_QWORD *)v49;
      v37 = v49 + 64;
      v38 = -1 << *(_BYTE *)(v49 + 32);
      v39 = v35 & ~v38;
      v40 = v39 >> 6;
      if (((-1 << v39) & ~*(_QWORD *)(v49 + 64 + 8 * (v39 >> 6))) != 0)
      {
        v41 = __clz(__rbit64((-1 << v39) & ~*(_QWORD *)(v49 + 64 + 8 * (v39 >> 6)))) | v39 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v42 = (unint64_t)(63 - v38) >> 6;
        do
        {
          if (v40 + 1 == v42)
            v40 = 0;
          else
            ++v40;
          v43 = *(_QWORD *)(v37 + 8 * v40);
        }
        while (v43 == -1);
        v41 = __clz(__rbit64(~v43)) + (v40 << 6);
      }
      *(_QWORD *)(v37 + ((v41 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v41;
      v44 = (_QWORD *)(v36[6] + 16 * v41);
      *v44 = v34;
      v44[1] = v30;
      *(_QWORD *)(v36[7] + 8 * v41) = v31;
      ++v36[2];
      swift_release();
    }
    else
    {
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
    }
  }
  MEMORY[0x1E0C80A78](isStackAllocationSafe, v24);
  bzero((char *)&v46 - ((v21 + 15) & 0x3FFFFFFFFFFFFFF0), v21);
  swift_bridgeObjectRetain();
  v25 = v54;
  v26 = sub_1B1C1D23C((unint64_t *)((char *)&v46 - ((v21 + 15) & 0x3FFFFFFFFFFFFFF0)), v20, v15, v22);
  v3 = v25;
  v27 = v22;
  swift_bridgeObjectRelease();
  if (!v25)
  {
    a2 = v22;
    goto LABEL_29;
  }
  swift_willThrow();
  swift_bridgeObjectRelease();
  __break(1u);
LABEL_44:
  swift_bridgeObjectRelease();
  MEMORY[0x1B5E23F88](v27, -1, -1);
  result = swift_bridgeObjectRelease();
  __break(1u);
  return result;
}

uint64_t sub_1B1C1D9D8(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  _BYTE v11[32];

  sub_1B19F8E54(0, &qword_1EEF5C558, (uint64_t (*)(void))sub_1B1C21BB0, (uint64_t)&type metadata for GraphEntityComponentPropertyReferences.DirectPropertyAssignment.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v6);
  v8 = &v11[-v7];
  v9 = a1[4];
  sub_1B19FA070(a1, a1[3]);
  sub_1B1C21BB0();
  sub_1B222A150();
  if (v1)
  {
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  }
  else
  {
    v11[31] = 0;
    v9 = sub_1B22297CC();
    sub_1B1A02758(0, (unint64_t *)&qword_1ED4BA490, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    v11[30] = 1;
    sub_1B1B28C94((unint64_t *)&qword_1ED4BA4A8, MEMORY[0x1E0DEA9A0], MEMORY[0x1E0DEAF40]);
    swift_bridgeObjectRetain();
    sub_1B2229814();
    (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v8, v4);
    swift_bridgeObjectRetain();
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v9;
}

uint64_t sub_1B1C1DBF0(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v11;
  char v12;

  sub_1B19F8E54(0, &qword_1ED4BAC48, (uint64_t (*)(void))sub_1B1C21BF4, (uint64_t)&type metadata for GraphEntityComponentPropertyReferences.ExportedDirectPropertyAssignment.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v6);
  v8 = (char *)&v11 - v7;
  v9 = a1[4];
  sub_1B19FA070(a1, a1[3]);
  sub_1B1C21BF4();
  sub_1B222A150();
  if (v1)
  {
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  }
  else
  {
    v12 = 0;
    sub_1B1C1EBD4();
    sub_1B2229814();
    v9 = v11;
    sub_1B1A02758(0, &qword_1ED4BA420, (uint64_t)&type metadata for EntityComponentProperty, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    v12 = 1;
    sub_1B1C21C38();
    swift_retain();
    sub_1B2229814();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    swift_bridgeObjectRetain();
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_release();
  }
  return v9;
}

uint64_t sub_1B1C1DE04@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t result;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  _QWORD *v73;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v75;
  unint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  _QWORD *v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  _QWORD *v91;
  uint64_t v92;
  char *v93;
  _QWORD *v94;
  uint64_t v95;
  _QWORD *v96;
  _QWORD *v97;
  _QWORD *v98;
  _QWORD *v99;
  unsigned __int8 v100;
  char v101;

  v94 = a2;
  sub_1B19F8E54(0, &qword_1ED4BAC50, (uint64_t (*)(void))sub_1B1C1EACC, (uint64_t)&type metadata for GraphEntityComponentPropertyReferences.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v95 = v3;
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v5);
  v7 = (char *)&v81 - v6;
  v8 = MEMORY[0x1E0DEE9D8];
  v98 = sub_1B1B7EBDC(MEMORY[0x1E0DEE9D8]);
  v97 = sub_1B1B7EBDC(v8);
  v9 = sub_1B1B7F0F4(v8);
  swift_bridgeObjectRetain();
  v10 = sub_1B1B7F0F4(v8);
  swift_bridgeObjectRetain();
  v11 = sub_1B1B7EBDC(v8);
  v100 = 1;
  sub_1B19FA070(a1, a1[3]);
  sub_1B1C1EACC();
  swift_bridgeObjectRetain();
  v12 = v96;
  sub_1B222A150();
  if (v12)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  v92 = v4;
  v93 = v7;
  v90 = v11;
  v91 = v10;
  v96 = v9;
  v13 = v98;
  v14 = a1[3];
  v15 = a1[4];
  sub_1B19FA070(a1, v14);
  v16 = sub_1B2067B64(1108, v14, v15);
  if (v16)
    v17 = 5;
  else
    v17 = 11;
  if (v16)
    v18 = 4;
  else
    v18 = 10;
  if (v16)
    v19 = 3;
  else
    v19 = 9;
  LODWORD(v87) = v19;
  if (v16)
    v20 = 2;
  else
    v20 = 8;
  LODWORD(v88) = v20;
  if (v16)
    v21 = 1;
  else
    v21 = 7;
  LODWORD(v89) = v21;
  v22 = a1[3];
  v23 = a1[4];
  if (v16)
    v24 = 0;
  else
    v24 = 6;
  sub_1B19FA070(a1, a1[3]);
  if (sub_1B2067B64(2010, v22, v23))
  {
    sub_1B1C1EF60();
    v101 = v24;
    sub_1B1C1EFE4();
    sub_1B22297B4();
    LODWORD(v86) = v18;
    LODWORD(v85) = v17;
    if (v99)
    {
      v25 = sub_1B1BFA20C((uint64_t)v99);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v26 = v25;
      v27 = v97;
    }
    else
    {
      v27 = v97;
      v26 = (uint64_t)v13;
    }
    v101 = v89;
    sub_1B22297B4();
    v30 = (_QWORD *)v26;
    if (v99)
    {
      v31 = sub_1B1BFA20C((uint64_t)v99);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v27 = (_QWORD *)v31;
    }
    sub_1B1C1F5A0(0, &qword_1EEF5C4C0, (uint64_t)&type metadata for ComponentProperty, (uint64_t (*)(_QWORD, _QWORD, uint64_t, _QWORD))MEMORY[0x1E0DEA048]);
    v101 = v88;
    sub_1B1C1F04C();
  }
  else
  {
    sub_1B1C1EB10();
    v101 = v24;
    sub_1B19E52CC(&qword_1ED4B86E0, (uint64_t (*)(uint64_t))sub_1B1C1EB10, (uint64_t)&unk_1B22B5B6C);
    sub_1B22297B4();
    LODWORD(v86) = v18;
    LODWORD(v85) = v17;
    if (v99)
    {
      v28 = sub_1B1BFA20C((uint64_t)v99);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v29 = v28;
      v27 = v97;
    }
    else
    {
      v27 = v97;
      v29 = (uint64_t)v13;
    }
    v101 = v89;
    sub_1B22297B4();
    v30 = (_QWORD *)v29;
    if (v99)
    {
      v32 = sub_1B1BFA20C((uint64_t)v99);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v27 = (_QWORD *)v32;
    }
    sub_1B1C1F0CC(0, &qword_1ED4B86F8, (void (*)(void))sub_1B1C1ECE8, (void (*)(void))sub_1B1C1ED2C);
    v101 = v88;
    sub_1B1C1ED70();
  }
  sub_1B22297B4();
  v34 = (uint64_t)v99;
  swift_bridgeObjectRelease();
  if (v34)
  {
    swift_bridgeObjectRelease();
    v96 = (_QWORD *)v34;
  }
  v101 = v87;
  sub_1B22297B4();
  v35 = (uint64_t)v99;
  v36 = (uint64_t)v91;
  swift_bridgeObjectRelease();
  v37 = (uint64_t)v90;
  if (v35)
  {
    swift_bridgeObjectRelease();
    v36 = v35;
  }
  sub_1B1B40F70(0, &qword_1ED4BA450, &qword_1ED4BA440, (uint64_t)&type metadata for GraphEntityComponentPropertyReferences.DirectPropertyAssignment, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
  v101 = v86;
  sub_1B1C1F428(&qword_1ED4BA458, (uint64_t (*)(void))sub_1B1C1EDD8, MEMORY[0x1E0DEE9A0]);
  sub_1B22297B4();
  v38 = (uint64_t)v99;
  if (v99 == (_QWORD *)1)
    v39 = 0;
  else
    v39 = (uint64_t)v99;
  v89 = v39;
  sub_1B1A02758(0, &qword_1ED4BA430, (uint64_t)&type metadata for GraphEntityComponentPropertyReferences.ExportedDirectPropertyAssignment, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
  v101 = v85;
  v88 = v38;
  sub_1B1C1EE94(v38);
  sub_1B1C1EEA4();
  sub_1B22297B4();
  if (v99)
    v40 = v99;
  else
    v40 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  sub_1B1C1F5A0(0, &qword_1ED4BA278, (uint64_t)&type metadata for EntityComponentProperty, (uint64_t (*)(_QWORD, _QWORD, uint64_t, _QWORD))MEMORY[0x1E0DEA048]);
  v98 = v41;
  v101 = 12;
  sub_1B1C1F3A0(&qword_1ED4BA280, (uint64_t (*)(void))sub_1B1C1EBD4, MEMORY[0x1E0DEA9A0], MEMORY[0x1E0DEA0D8]);
  swift_bridgeObjectRetain();
  sub_1B22297B4();
  v42 = (uint64_t)v99;
  swift_bridgeObjectRelease();
  if (v42)
  {
    swift_bridgeObjectRelease();
    v37 = v42;
  }
  v43 = v93;
  v44 = v89;
  v84 = a1;
  if (v89)
  {
    v45 = *(_QWORD *)(v89 + 16);
    sub_1B1AE7230(v88);
    if (v45)
    {
      v46 = v40[2];
      swift_bridgeObjectRelease();
      if (!v46)
      {
        v90 = (_QWORD *)v37;
        v91 = (_QWORD *)v36;
        v97 = v27;
        v98 = v30;
        swift_bridgeObjectRelease();
        v87 = *(_QWORD *)(v89 + 16);
        if (v87)
        {
          v47 = v88;
          v48 = v89 + 32;
          sub_1B1C1EE94(v88);
          sub_1B1C1EE94(v47);
          v49 = 0;
          v40 = (_QWORD *)MEMORY[0x1E0DEE9D8];
          v50 = v97;
          v51 = v98;
          v82 = v48;
          do
          {
            if (v50[2])
            {
              v52 = (uint64_t *)(v48 + 24 * v49);
              v53 = v52[1];
              v54 = v52[2];
              v55 = *v52;
              swift_bridgeObjectRetain_n();
              swift_bridgeObjectRetain();
              v56 = sub_1B1DC3B00(v55, v53);
              if ((v57 & 1) != 0)
              {
                v58 = v49;
                v59 = (uint64_t *)(v50[7] + 16 * v56);
                v60 = *v59;
                v86 = v59[1];
                swift_retain();
                v83 = v53;
                swift_bridgeObjectRelease();
                v61 = *(_QWORD *)(v54 + 16);
                v85 = v54;
                if (v61)
                {
                  swift_bridgeObjectRetain_n();
                  v62 = (uint64_t *)(v54 + 40);
                  v63 = (_QWORD *)MEMORY[0x1E0DEE9D8];
                  do
                  {
                    if (v51[2])
                    {
                      v65 = *(v62 - 1);
                      v64 = *v62;
                      swift_bridgeObjectRetain_n();
                      v66 = sub_1B1DC3B00(v65, v64);
                      if ((v67 & 1) != 0)
                      {
                        v68 = (uint64_t *)(v51[7] + 16 * v66);
                        v69 = *v68;
                        v70 = v68[1];
                        swift_retain();
                        swift_bridgeObjectRelease_n();
                        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                          v63 = sub_1B1C66A74(0, v63[2] + 1, 1, v63);
                        v72 = v63[2];
                        v71 = v63[3];
                        if (v72 >= v71 >> 1)
                          v63 = sub_1B1C66A74(v71 > 1, v72 + 1, 1, v63);
                        v63[2] = v72 + 1;
                        v73 = &v63[2 * v72];
                        v73[4] = v69;
                        v73[5] = v70;
                        v51 = v98;
                      }
                      else
                      {
                        swift_bridgeObjectRelease_n();
                      }
                    }
                    v62 += 2;
                    --v61;
                  }
                  while (v61);
                  swift_bridgeObjectRelease_n();
                  v48 = v82;
                }
                else
                {
                  v63 = (_QWORD *)MEMORY[0x1E0DEE9D8];
                }
                swift_retain();
                isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
                v50 = v97;
                v49 = v58;
                if ((isUniquelyReferenced_nonNull_native & 1) == 0)
                  v40 = sub_1B1C66954(0, v40[2] + 1, 1, v40);
                v76 = v40[2];
                v75 = v40[3];
                if (v76 >= v75 >> 1)
                  v40 = sub_1B1C66954(v75 > 1, v76 + 1, 1, v40);
                v40[2] = v76 + 1;
                v77 = &v40[3 * v76];
                v77[4] = v60;
                v77[5] = v86;
                v77[6] = v63;
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_release();
              }
              else
              {
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease_n();
              }
            }
            ++v49;
          }
          while (v49 != v87);
          v78 = v88;
          sub_1B1AE7230(v88);
          sub_1B1AE7230(v78);
        }
        else
        {
          v40 = (_QWORD *)MEMORY[0x1E0DEE9D8];
        }
        v100 = 1;
        (*(void (**)(char *, uint64_t))(v92 + 8))(v93, v95);
        v44 = v89;
        v37 = (uint64_t)v90;
        v27 = v97;
        v30 = v98;
        v36 = (uint64_t)v91;
        goto LABEL_80;
      }
      (*(void (**)(char *, uint64_t))(v92 + 8))(v43, v95);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v92 + 8))(v43, v95);
      swift_bridgeObjectRelease();
    }
    v44 = v89;
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v92 + 8))(v93, v95);
    swift_bridgeObjectRelease();
  }
LABEL_80:
  LODWORD(v98) = v100;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v79 = v96;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v84);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  v80 = v94;
  *v94 = v30;
  v80[1] = v27;
  v80[2] = v79;
  v80[3] = v36;
  v80[4] = v37;
  v80[5] = v44;
  v80[6] = v40;
  *((_BYTE *)v80 + 56) = (_BYTE)v98;
  return result;
}

unint64_t sub_1B1C1EACC()
{
  unint64_t result;

  result = qword_1ED4B9D90;
  if (!qword_1ED4B9D90)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2283D10, &type metadata for GraphEntityComponentPropertyReferences.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED4B9D90);
  }
  return result;
}

uint64_t sub_1B1C1EB10()
{
  uint64_t result;

  result = qword_1ED4B86E8;
  if (!qword_1ED4B86E8)
  {
    sub_1B19F8E54(255, (unint64_t *)&unk_1ED4B7D20, (uint64_t (*)(void))sub_1B1C1EBD4, (uint64_t)&type metadata for EntityComponentProperty, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for DecodeOrNil);
    sub_1B1C1EC18();
    sub_1B1C1EC80();
    type metadata accessor for FastDictCoder();
  }
  return result;
}

unint64_t sub_1B1C1EBD4()
{
  unint64_t result;

  result = qword_1ED4B9988;
  if (!qword_1ED4B9988)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2297B4C, &type metadata for EntityComponentProperty);
    atomic_store(result, (unint64_t *)&qword_1ED4B9988);
  }
  return result;
}

unint64_t sub_1B1C1EC18()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1ED4B7D18;
  if (!qword_1ED4B7D18)
  {
    sub_1B19F8E54(255, (unint64_t *)&unk_1ED4B7D20, (uint64_t (*)(void))sub_1B1C1EBD4, (uint64_t)&type metadata for EntityComponentProperty, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for DecodeOrNil);
    result = MEMORY[0x1B5E23E74](&unk_1B22B5A7C, v1);
    atomic_store(result, (unint64_t *)&qword_1ED4B7D18);
  }
  return result;
}

unint64_t sub_1B1C1EC80()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1ED4B7D10;
  if (!qword_1ED4B7D10)
  {
    sub_1B19F8E54(255, (unint64_t *)&unk_1ED4B7D20, (uint64_t (*)(void))sub_1B1C1EBD4, (uint64_t)&type metadata for EntityComponentProperty, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for DecodeOrNil);
    result = MEMORY[0x1B5E23E74](&unk_1B22B5A54, v1);
    atomic_store(result, (unint64_t *)&qword_1ED4B7D10);
  }
  return result;
}

unint64_t sub_1B1C1ECE8()
{
  unint64_t result;

  result = qword_1ED4B8EE8;
  if (!qword_1ED4B8EE8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2297A64, &type metadata for ComponentProperty);
    atomic_store(result, (unint64_t *)&qword_1ED4B8EE8);
  }
  return result;
}

unint64_t sub_1B1C1ED2C()
{
  unint64_t result;

  result = qword_1ED4B8EE0;
  if (!qword_1ED4B8EE0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2297A3C, &type metadata for ComponentProperty);
    atomic_store(result, (unint64_t *)&qword_1ED4B8EE0);
  }
  return result;
}

unint64_t sub_1B1C1ED70()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1ED4B86F0;
  if (!qword_1ED4B86F0)
  {
    v1 = sub_1B1C1F0CC(255, &qword_1ED4B86F8, (void (*)(void))sub_1B1C1ECE8, (void (*)(void))sub_1B1C1ED2C);
    result = MEMORY[0x1B5E23E74](&unk_1B22B5B6C, v1);
    atomic_store(result, (unint64_t *)&qword_1ED4B86F0);
  }
  return result;
}

unint64_t sub_1B1C1EDD8()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  result = qword_1ED4BA448;
  if (!qword_1ED4BA448)
  {
    sub_1B1A02758(255, &qword_1ED4BA440, (uint64_t)&type metadata for GraphEntityComponentPropertyReferences.DirectPropertyAssignment, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    v2 = v1;
    v3 = sub_1B1C1EE50();
    result = MEMORY[0x1B5E23E74](MEMORY[0x1E0DEAF40], v2, &v3);
    atomic_store(result, (unint64_t *)&qword_1ED4BA448);
  }
  return result;
}

unint64_t sub_1B1C1EE50()
{
  unint64_t result;

  result = qword_1ED4B9D88;
  if (!qword_1ED4B9D88)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2283CE8, &type metadata for GraphEntityComponentPropertyReferences.DirectPropertyAssignment);
    atomic_store(result, (unint64_t *)&qword_1ED4B9D88);
  }
  return result;
}

uint64_t sub_1B1C1EE94(uint64_t result)
{
  if (result != 1)
    return swift_bridgeObjectRetain();
  return result;
}

unint64_t sub_1B1C1EEA4()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  result = qword_1ED4BA438;
  if (!qword_1ED4BA438)
  {
    sub_1B1A02758(255, &qword_1ED4BA430, (uint64_t)&type metadata for GraphEntityComponentPropertyReferences.ExportedDirectPropertyAssignment, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    v2 = v1;
    v3 = sub_1B1C1EF1C();
    result = MEMORY[0x1B5E23E74](MEMORY[0x1E0DEAF40], v2, &v3);
    atomic_store(result, (unint64_t *)&qword_1ED4BA438);
  }
  return result;
}

unint64_t sub_1B1C1EF1C()
{
  unint64_t result;

  result = qword_1ED4B9D80;
  if (!qword_1ED4B9D80)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2283CC0, &type metadata for GraphEntityComponentPropertyReferences.ExportedDirectPropertyAssignment);
    atomic_store(result, (unint64_t *)&qword_1ED4B9D80);
  }
  return result;
}

void sub_1B1C1EF60()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5C4B0)
  {
    sub_1B19F8E54(255, (unint64_t *)&unk_1ED4B7D20, (uint64_t (*)(void))sub_1B1C1EBD4, (uint64_t)&type metadata for EntityComponentProperty, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for DecodeOrNil);
    v0 = sub_1B22285A8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5C4B0);
  }
}

unint64_t sub_1B1C1EFE4()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[2];

  result = qword_1EEF5C4B8;
  if (!qword_1EEF5C4B8)
  {
    sub_1B1C1EF60();
    v2 = v1;
    v3 = sub_1B1C1EC18();
    v4[0] = MEMORY[0x1E0DEA9A0];
    v4[1] = v3;
    result = MEMORY[0x1B5E23E74](MEMORY[0x1E0DEA0D8], v2, v4);
    atomic_store(result, (unint64_t *)&qword_1EEF5C4B8);
  }
  return result;
}

unint64_t sub_1B1C1F04C()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[2];

  result = qword_1EEF5C4C8;
  if (!qword_1EEF5C4C8)
  {
    sub_1B1C1F5A0(255, &qword_1EEF5C4C0, (uint64_t)&type metadata for ComponentProperty, (uint64_t (*)(_QWORD, _QWORD, uint64_t, _QWORD))MEMORY[0x1E0DEA048]);
    v2 = v1;
    v3 = sub_1B1C1ECE8();
    v4[0] = MEMORY[0x1E0DEA9A0];
    v4[1] = v3;
    result = MEMORY[0x1B5E23E74](MEMORY[0x1E0DEA0D8], v2, v4);
    atomic_store(result, (unint64_t *)&qword_1EEF5C4C8);
  }
  return result;
}

uint64_t sub_1B1C1F0CC(uint64_t a1, uint64_t *a2, void (*a3)(void), void (*a4)(void))
{
  uint64_t result;

  result = *a2;
  if (!*a2)
  {
    a3();
    a4();
    type metadata accessor for FastDictCoder();
  }
  return result;
}

unint64_t sub_1B1C1F16C()
{
  unint64_t result;

  result = qword_1ED4B9980;
  if (!qword_1ED4B9980)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2297B24, &type metadata for EntityComponentProperty);
    atomic_store(result, (unint64_t *)&qword_1ED4B9980);
  }
  return result;
}

unint64_t sub_1B1C1F1B0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EEF5C4D8;
  if (!qword_1EEF5C4D8)
  {
    v1 = sub_1B1C1F0CC(255, &qword_1ED4B8708, (void (*)(void))sub_1B1C1EBD4, (void (*)(void))sub_1B1C1F16C);
    result = MEMORY[0x1B5E23E74](&unk_1B22B5B44, v1);
    atomic_store(result, (unint64_t *)&qword_1EEF5C4D8);
  }
  return result;
}

unint64_t sub_1B1C1F218()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EEF5C4E0;
  if (!qword_1EEF5C4E0)
  {
    v1 = sub_1B1C1F0CC(255, &qword_1ED4B86F8, (void (*)(void))sub_1B1C1ECE8, (void (*)(void))sub_1B1C1ED2C);
    result = MEMORY[0x1B5E23E74](&unk_1B22B5B44, v1);
    atomic_store(result, (unint64_t *)&qword_1EEF5C4E0);
  }
  return result;
}

uint64_t sub_1B1C1F280(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1B1B40F70(0, &qword_1ED4BA450, &qword_1ED4BA440, (uint64_t)&type metadata for GraphEntityComponentPropertyReferences.DirectPropertyAssignment, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_1B1C1F2E4()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  result = qword_1EEF5C4E8;
  if (!qword_1EEF5C4E8)
  {
    sub_1B1A02758(255, &qword_1ED4BA430, (uint64_t)&type metadata for GraphEntityComponentPropertyReferences.ExportedDirectPropertyAssignment, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    v2 = v1;
    v3 = sub_1B1C1F35C();
    result = MEMORY[0x1B5E23E74](MEMORY[0x1E0DEAF10], v2, &v3);
    atomic_store(result, (unint64_t *)&qword_1EEF5C4E8);
  }
  return result;
}

unint64_t sub_1B1C1F35C()
{
  unint64_t result;

  result = qword_1EEF5C4F0;
  if (!qword_1EEF5C4F0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2283C98, &type metadata for GraphEntityComponentPropertyReferences.ExportedDirectPropertyAssignment);
    atomic_store(result, (unint64_t *)&qword_1EEF5C4F0);
  }
  return result;
}

uint64_t sub_1B1C1F3A0(unint64_t *a1, uint64_t (*a2)(void), uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[2];

  result = *a1;
  if (!result)
  {
    sub_1B1C1F5A0(255, &qword_1ED4BA278, (uint64_t)&type metadata for EntityComponentProperty, (uint64_t (*)(_QWORD, _QWORD, uint64_t, _QWORD))MEMORY[0x1E0DEA048]);
    v10 = v9;
    v11[0] = a3;
    v11[1] = a2();
    result = MEMORY[0x1B5E23E74](a4, v10, v11);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1B1C1F428(unint64_t *a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = *a1;
  if (!result)
  {
    sub_1B1B40F70(255, &qword_1ED4BA450, &qword_1ED4BA440, (uint64_t)&type metadata for GraphEntityComponentPropertyReferences.DirectPropertyAssignment, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    v8 = v7;
    v9 = a2();
    result = MEMORY[0x1B5E23E74](a3, v8, &v9);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1B1C1F4AC()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  result = qword_1EEF5C508;
  if (!qword_1EEF5C508)
  {
    sub_1B1A02758(255, &qword_1ED4BA440, (uint64_t)&type metadata for GraphEntityComponentPropertyReferences.DirectPropertyAssignment, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    v2 = v1;
    v3 = sub_1B1C1F524();
    result = MEMORY[0x1B5E23E74](MEMORY[0x1E0DEAF10], v2, &v3);
    atomic_store(result, (unint64_t *)&qword_1EEF5C508);
  }
  return result;
}

unint64_t sub_1B1C1F524()
{
  unint64_t result;

  result = qword_1EEF5C510;
  if (!qword_1EEF5C510)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2283C70, &type metadata for GraphEntityComponentPropertyReferences.DirectPropertyAssignment);
    atomic_store(result, (unint64_t *)&qword_1EEF5C510);
  }
  return result;
}

__n128 sub_1B1C1F568(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  __n128 result;
  __int128 v4;
  __int128 v5;
  __int128 v6;

  v2 = *(_QWORD *)(v1 + 16);
  result = *(__n128 *)(v2 + 16);
  v4 = *(_OWORD *)(v2 + 32);
  v5 = *(_OWORD *)(v2 + 48);
  v6 = *(_OWORD *)(v2 + 64);
  *(_QWORD *)a1 = *(_QWORD *)v2;
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 32) = v4;
  *(_OWORD *)(a1 + 48) = v5;
  *(_OWORD *)(a1 + 64) = v6;
  return result;
}

uint64_t sub_1B1C1F588(_QWORD *a1)
{
  uint64_t v1;

  return sub_1B1C07BF8(a1, *(uint64_t **)(v1 + 16));
}

void sub_1B1C1F5A0(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(_QWORD, _QWORD, uint64_t, _QWORD))
{
  unint64_t v5;
  uint64_t v6;

  if (!*a2)
  {
    v5 = a4(0, MEMORY[0x1E0DEA968], a3, MEMORY[0x1E0DEA978]);
    if (!v6)
      atomic_store(v5, a2);
  }
}

void sub_1B1C1F5F4(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, _QWORD, uint64_t, _QWORD))
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  if (!*a2)
  {
    v7 = a3(255);
    v8 = a4(a1, MEMORY[0x1E0DEA968], v7, MEMORY[0x1E0DEA978]);
    if (!v9)
      atomic_store(v8, a2);
  }
}

double sub_1B1C1F65C(_OWORD *a1)
{
  double result;

  *(_QWORD *)&result = sub_1B1C1FCFC(a1).n128_u64[0];
  return result;
}

uint64_t sub_1B1C1F670(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 16);
  sub_1B1C1F6B0(a1);
  return sub_1B1C1F6E4(v3, a1);
}

uint64_t sub_1B1C1F6B0(uint64_t a1)
{
  destroy for NodeVisibilityController();
  return a1;
}

uint64_t sub_1B1C1F6E4(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for NodeVisibilityController(a2, a1);
  return a2;
}

uint64_t sub_1B1C1F720(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 16);
  sub_1B1C1F760(a1);
  return sub_1B1C1F794(v3, a1);
}

uint64_t sub_1B1C1F760(uint64_t a1)
{
  destroy for NodeVisibilityController();
  return a1;
}

uint64_t sub_1B1C1F794(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for NodeVisibilityController(a2, a1);
  return a2;
}

uint64_t *sub_1B1C1F7D0(uint64_t *a1)
{
  sub_1B1C1F8F8(*a1);
  return a1;
}

uint64_t sub_1B1C1F8F8(uint64_t result)
{
  if (result)
  {
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_unknownObjectRelease();
    swift_release();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t sub_1B1C1FAFC(uint64_t a1)
{
  swift_unknownObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  return a1;
}

uint64_t sub_1B1C1FCEC()
{
  return swift_deallocObject();
}

__n128 sub_1B1C1FCFC(_OWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  __n128 result;
  __int128 v4;
  __int128 v5;
  __int128 v6;

  v2 = *(_QWORD *)(v1 + 16);
  result = *(__n128 *)v2;
  v4 = *(_OWORD *)(v2 + 16);
  v5 = *(_OWORD *)(v2 + 32);
  v6 = *(_OWORD *)(v2 + 48);
  *a1 = *(_OWORD *)v2;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  return result;
}

id sub_1B1C1FD14(id *a1)
{
  uint64_t v1;
  void *v3;

  v3 = **(void ***)(v1 + 16);

  *a1 = v3;
  return v3;
}

uint64_t sub_1B1C1FD58(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = **(_QWORD **)(v1 + 16);
  swift_unknownObjectRelease();
  *a1 = v3;
  return swift_unknownObjectRetain();
}

uint64_t sub_1B1C1FDA0(_QWORD *a1)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(uint64_t **)(v1 + 16);
  v5 = *v3;
  v4 = v3[1];
  swift_bridgeObjectRelease();
  *a1 = v5;
  a1[1] = v4;
  return swift_bridgeObjectRetain();
}

uint64_t sub_1B1C1FDE8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 16);
  sub_1B1A04628(a1, type metadata accessor for ParticleUpdateScript);
  return sub_1B1C1A14C(v3, a1);
}

uint64_t sub_1B1C1FE30(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 16);
  sub_1B1A04628(a1, type metadata accessor for ParticleInitScript);
  return sub_1B1C1A114(v3, a1);
}

void sub_1B1C1FE78(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v5;
  uint64_t v6;

  if (!*a2)
  {
    v5 = type metadata accessor for ComponentWriter(0, a3, a4, a4);
    if (!v6)
      atomic_store(v5, a2);
  }
}

__n128 sub_1B1C1FEC0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;
  __int128 v7;
  __int128 v8;

  v2 = *(_QWORD *)(v1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v2;
  v3 = *(_OWORD *)(v2 + 16);
  v4 = *(_OWORD *)(v2 + 32);
  v5 = *(_OWORD *)(v2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(v2 + 48);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  result = *(__n128 *)(v2 + 80);
  v7 = *(_OWORD *)(v2 + 96);
  v8 = *(_OWORD *)(v2 + 112);
  *(_OWORD *)(a1 + 124) = *(_OWORD *)(v2 + 124);
  *(_OWORD *)(a1 + 96) = v7;
  *(_OWORD *)(a1 + 112) = v8;
  *(__n128 *)(a1 + 80) = result;
  return result;
}

uint64_t getEnumTagSinglePayload for GraphEntityComponentPropertyReferences.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF4)
    goto LABEL_17;
  if (a2 + 12 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 12) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 12;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 12;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 12;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xD;
  v8 = v6 - 13;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for GraphEntityComponentPropertyReferences.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 12 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 12) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF4)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF3)
    return ((uint64_t (*)(void))((char *)&loc_1B1C1FFD4 + 4 * byte_1B2283393[v4]))();
  *a1 = a2 + 12;
  return ((uint64_t (*)(void))((char *)sub_1B1C20008 + 4 * byte_1B228338E[v4]))();
}

uint64_t sub_1B1C20008(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1C20010(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B1C20018);
  return result;
}

uint64_t sub_1B1C20024(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B1C2002CLL);
  *(_BYTE *)result = a2 + 12;
  return result;
}

uint64_t sub_1B1C20030(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1C20038(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for GraphEntityComponentPropertyReferences.CodingKeys()
{
  return &type metadata for GraphEntityComponentPropertyReferences.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for GraphScriptingConfig.Mode(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_1B1C200A0 + 4 * byte_1B228339D[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_1B1C200D4 + 4 * byte_1B2283398[v4]))();
}

uint64_t sub_1B1C200D4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1C200DC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B1C200E4);
  return result;
}

uint64_t sub_1B1C200F0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B1C200F8);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_1B1C200FC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1C20104(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for GraphScriptingConfig.Mode()
{
  return &type metadata for GraphScriptingConfig.Mode;
}

ValueMetadata *type metadata accessor for CodeGenerationInitialized()
{
  return &type metadata for CodeGenerationInitialized;
}

_QWORD *initializeBufferWithCopyOfBuffer for CodeGenerationComponent(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for CodeGenerationComponent(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  return a1;
}

_QWORD *assignWithTake for CodeGenerationComponent(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for CodeGenerationComponent()
{
  return &type metadata for CodeGenerationComponent;
}

unint64_t destroy for GraphScriptingConfig.ScriptArg(uint64_t a1)
{
  unint64_t result;

  swift_bridgeObjectRelease();
  result = *(_QWORD *)(a1 + 24);
  if (result >= 0x3B)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

_QWORD *initializeWithCopy for GraphScriptingConfig.ScriptArg(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  __int128 v6;
  uint64_t v7;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[3];
  swift_bridgeObjectRetain();
  if (v5 >= 0x3B)
  {
    a1[2] = a2[2];
    a1[3] = v5;
    v7 = a2[5];
    a1[4] = a2[4];
    a1[5] = v7;
    a1[6] = a2[6];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v6 = *((_OWORD *)a2 + 2);
    *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
    *((_OWORD *)a1 + 2) = v6;
    a1[6] = a2[6];
  }
  return a1;
}

_QWORD *assignWithCopy for GraphScriptingConfig.ScriptArg(_QWORD *a1, _QWORD *a2)
{
  _OWORD *v4;
  _OWORD *v5;
  unint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = a1 + 2;
  v5 = a2 + 2;
  v6 = a2[3];
  if (a1[3] >= 0x3BuLL)
  {
    if (v6 >= 0x3B)
    {
      a1[2] = a2[2];
      a1[3] = a2[3];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      a1[4] = a2[4];
      a1[5] = a2[5];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      a1[6] = a2[6];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_1B1C203F0((uint64_t)(a1 + 2));
      v9 = a2[6];
      v10 = *((_OWORD *)a2 + 2);
      *v4 = *v5;
      *((_OWORD *)a1 + 2) = v10;
      a1[6] = v9;
    }
  }
  else if (v6 >= 0x3B)
  {
    a1[2] = a2[2];
    a1[3] = a2[3];
    a1[4] = a2[4];
    a1[5] = a2[5];
    a1[6] = a2[6];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v7 = *v5;
    v8 = *((_OWORD *)a2 + 2);
    a1[6] = a2[6];
    *v4 = v7;
    *((_OWORD *)a1 + 2) = v8;
  }
  return a1;
}

uint64_t sub_1B1C203F0(uint64_t a1)
{
  _s12MetadataTypeO6CustomVwxx();
  return a1;
}

_QWORD *assignWithTake for GraphScriptingConfig.ScriptArg(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  __int128 v6;
  uint64_t v7;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  if (a1[3] >= 0x3BuLL)
  {
    v5 = a2[3];
    if (v5 >= 0x3B)
    {
      a1[2] = a2[2];
      a1[3] = v5;
      swift_bridgeObjectRelease();
      v7 = a2[5];
      a1[4] = a2[4];
      a1[5] = v7;
      swift_bridgeObjectRelease();
      a1[6] = a2[6];
      swift_bridgeObjectRelease();
      return a1;
    }
    sub_1B1C203F0((uint64_t)(a1 + 2));
  }
  v6 = *((_OWORD *)a2 + 2);
  *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
  *((_OWORD *)a1 + 2) = v6;
  a1[6] = a2[6];
  return a1;
}

ValueMetadata *type metadata accessor for GraphScriptingConfig.ScriptArg()
{
  return &type metadata for GraphScriptingConfig.ScriptArg;
}

_QWORD *sub_1B1C204E0(uint64_t a1, uint64_t *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  unsigned int (*v20)(const void *, uint64_t, uint64_t);
  void *__dst;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v7;
    v8 = a2[3];
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_QWORD *)(a1 + 24) = v8;
    v9 = a2[4];
    *(_WORD *)(a1 + 40) = *((_WORD *)a2 + 20);
    v10 = a3[10];
    __dst = (void *)(a1 + v10);
    v11 = (char *)a2 + v10;
    *(_QWORD *)(a1 + 32) = v9;
    v12 = sub_1B222826C();
    v13 = *(_QWORD *)(v12 - 8);
    v20 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v13 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v20(v11, 1, v12))
    {
      sub_1B1B28F74();
      memcpy(__dst, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v13 + 16))(__dst, v11, v12);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v13 + 56))(__dst, 0, 1, v12);
    }
    v16 = a3[12];
    *(_QWORD *)((char *)v4 + a3[11]) = *(uint64_t *)((char *)a2 + a3[11]);
    v17 = (char *)v4 + v16;
    v18 = (uint64_t)a2 + v16;
    *(_QWORD *)v17 = *(_QWORD *)v18;
    v17[8] = *(_BYTE *)(v18 + 8);
  }
  swift_retain();
  return v4;
}

uint64_t sub_1B1C20654(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 40);
  v5 = sub_1B222826C();
  v6 = *(_QWORD *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  return swift_release();
}

uint64_t sub_1B1C206EC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(const void *, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *__dst;

  v5 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v5;
  v6 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  v7 = *(_QWORD *)(a2 + 32);
  *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
  v8 = a3[10];
  __dst = (void *)(a1 + v8);
  v9 = (const void *)(a2 + v8);
  *(_QWORD *)(a1 + 32) = v7;
  v10 = sub_1B222826C();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v12(v9, 1, v10))
  {
    sub_1B1B28F74();
    memcpy(__dst, v9, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 16))(__dst, v9, v10);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(__dst, 0, 1, v10);
  }
  v14 = a3[12];
  *(_QWORD *)(a1 + a3[11]) = *(_QWORD *)(a2 + a3[11]);
  v15 = a1 + v14;
  v16 = a2 + v14;
  *(_QWORD *)v15 = *(_QWORD *)v16;
  *(_BYTE *)(v15 + 8) = *(_BYTE *)(v16 + 8);
  swift_retain();
  return a1;
}

uint64_t sub_1B1C2082C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(void *, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_BYTE *)(a1 + 41) = *(_BYTE *)(a2 + 41);
  v6 = a3[10];
  v7 = (void *)(a1 + v6);
  v8 = (void *)(a2 + v6);
  v9 = sub_1B222826C();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v10 + 24))(v7, v8, v9);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v10 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    sub_1B1B28F74();
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v10 + 16))(v7, v8, v9);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
LABEL_7:
  *(_QWORD *)(a1 + a3[11]) = *(_QWORD *)(a2 + a3[11]);
  swift_retain();
  swift_release();
  v15 = a3[12];
  v16 = a1 + v15;
  v17 = (uint64_t *)(a2 + v15);
  v18 = *v17;
  *(_BYTE *)(v16 + 8) = *((_BYTE *)v17 + 8);
  *(_QWORD *)v16 = v18;
  return a1;
}

uint64_t sub_1B1C209E8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void *v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
  v6 = a3[10];
  v7 = (void *)(a1 + v6);
  v8 = (const void *)(a2 + v6);
  v9 = sub_1B222826C();
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    sub_1B1B28F74();
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  v12 = a3[12];
  *(_QWORD *)(a1 + a3[11]) = *(_QWORD *)(a2 + a3[11]);
  v13 = a1 + v12;
  v14 = a2 + v12;
  *(_QWORD *)v13 = *(_QWORD *)v14;
  *(_BYTE *)(v13 + 8) = *(_BYTE *)(v14 + 8);
  return a1;
}

uint64_t sub_1B1C20AEC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(void *, uint64_t, uint64_t);
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_BYTE *)(a1 + 41) = *(_BYTE *)(a2 + 41);
  v7 = a3[10];
  v8 = (void *)(a1 + v7);
  v9 = (void *)(a2 + v7);
  v10 = sub_1B222826C();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v11 + 48);
  v13 = v12(v8, 1, v10);
  v14 = v12(v9, 1, v10);
  if (!v13)
  {
    if (!v14)
    {
      (*(void (**)(void *, void *, uint64_t))(v11 + 40))(v8, v9, v10);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v11 + 8))(v8, v10);
    goto LABEL_6;
  }
  if (v14)
  {
LABEL_6:
    sub_1B1B28F74();
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v11 + 32))(v8, v9, v10);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
LABEL_7:
  *(_QWORD *)(a1 + a3[11]) = *(_QWORD *)(a2 + a3[11]);
  swift_release();
  v16 = a3[12];
  v17 = a1 + v16;
  v18 = a2 + v16;
  *(_QWORD *)v17 = *(_QWORD *)v18;
  *(_BYTE *)(v17 + 8) = *(_BYTE *)(v18 + 8);
  return a1;
}

uint64_t sub_1B1C20C78()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1B1C20C84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    sub_1B1B28F74();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 40), a2, v8);
  }
}

uint64_t sub_1B1C20D00()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1B1C20D0C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 16) = (a2 - 1);
  }
  else
  {
    sub_1B1B28F74();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 40), a2, a2, v7);
  }
  return result;
}

void sub_1B1C20D80()
{
  unint64_t v0;

  sub_1B1B28F74();
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

uint64_t initializeBufferWithCopyOfBuffer for QueryScope(uint64_t result, int *a2)
{
  int v2;

  v2 = *a2;
  *(_BYTE *)(result + 4) = *((_BYTE *)a2 + 4);
  *(_DWORD *)result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for Scope(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 5))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for Scope(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_BYTE *)(result + 4) = 0;
    *(_DWORD *)result = a2 - 1;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 5) = v3;
  return result;
}

uint64_t sub_1B1C20E84(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 4))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_1B1C20EA0(uint64_t result, int a2)
{
  if (a2)
  {
    *(_DWORD *)result = a2 - 1;
    *(_BYTE *)(result + 4) = 1;
  }
  else
  {
    *(_BYTE *)(result + 4) = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for GraphScriptingConfig.EvaluationMode()
{
  return &type metadata for GraphScriptingConfig.EvaluationMode;
}

uint64_t destroy for GraphEntityComponentPropertyReferences.DirectPropertyAssignment(uint64_t a1, uint64_t a2)
{
  return sub_1B1C21548(a1, a2, (void (*)(_QWORD))MEMORY[0x1E0DEEB08]);
}

uint64_t initializeWithCopy for GraphScriptingConfig(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_WORD *)a1 = *(_WORD *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_WORD *)(a1 + 25) = *(_WORD *)(a2 + 25);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for GraphScriptingConfig(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 25);
  *(_BYTE *)(a1 + 26) = *(_BYTE *)(a2 + 26);
  return a1;
}

__n128 initializeWithTake for GraphScriptingConfig(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 11) = *(_OWORD *)(a2 + 11);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for GraphScriptingConfig(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 25);
  *(_BYTE *)(a1 + 26) = *(_BYTE *)(a2 + 26);
  return a1;
}

uint64_t getEnumTagSinglePayload for GraphScriptingConfig(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 27))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for GraphScriptingConfig(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 26) = 0;
    *(_WORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 27) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 27) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for GraphScriptingConfig()
{
  return &type metadata for GraphScriptingConfig;
}

uint64_t destroy for EntityComponentPropertyLite()
{
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t initializeWithCopy for EntityComponentPropertyLite(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v3 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v3;
  v4 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v4;
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for EntityComponentPropertyLite(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for EntityComponentPropertyLite(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for EntityComponentPropertyLite()
{
  return &type metadata for EntityComponentPropertyLite;
}

uint64_t destroy for GraphScriptGroup.Reference()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for GraphScriptGroup.Reference(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v3;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_WORD *)(a1 + 33) = *(_WORD *)(a2 + 33);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for GraphScriptGroup.Reference(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  *(_BYTE *)(a1 + 34) = *(_BYTE *)(a2 + 34);
  return a1;
}

__n128 initializeWithTake for GraphScriptGroup.Reference(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 31) = *(_DWORD *)(a2 + 31);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for GraphScriptGroup.Reference(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  *(_BYTE *)(a1 + 34) = *(_BYTE *)(a2 + 34);
  return a1;
}

uint64_t getEnumTagSinglePayload for GraphScriptGroup.Reference(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 35))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for GraphScriptGroup.Reference(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 34) = 0;
    *(_WORD *)(result + 32) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 35) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 35) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for GraphScriptGroup.Reference()
{
  return &type metadata for GraphScriptGroup.Reference;
}

uint64_t destroy for GraphEntityComponentPropertyReferences.ExportedDirectPropertyAssignment(uint64_t a1, uint64_t a2)
{
  return sub_1B1C21548(a1, a2, (void (*)(_QWORD))MEMORY[0x1E0DEEE30]);
}

_QWORD *_s3VFX38GraphEntityComponentPropertyReferencesV32ExportedDirectPropertyAssignmentVwCP_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for GraphEntityComponentPropertyReferences.ExportedDirectPropertyAssignment(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for GraphEntityComponentPropertyReferences.ExportedDirectPropertyAssignment(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for GraphEntityComponentPropertyReferences.ExportedDirectPropertyAssignment()
{
  return &type metadata for GraphEntityComponentPropertyReferences.ExportedDirectPropertyAssignment;
}

uint64_t sub_1B1C21548(uint64_t a1, uint64_t a2, void (*a3)(_QWORD))
{
  a3(*(_QWORD *)(a1 + 8));
  return swift_bridgeObjectRelease();
}

_QWORD *_s3VFX8BindingsV5ValueC8EnumInfoVwCP_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for Bindings.Value.EnumInfo(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for Bindings.Value.EnumInfo(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Bindings.Value.EnumInfo(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Bindings.Value.EnumInfo(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for GraphEntityComponentPropertyReferences.DirectPropertyAssignment()
{
  return &type metadata for GraphEntityComponentPropertyReferences.DirectPropertyAssignment;
}

uint64_t destroy for GraphDebuggingComponent.DebugValuesKey()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for GraphDebuggingComponent.DebugValuesKey(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  v6 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v6;
  v7 = *(_DWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 68) = *(_BYTE *)(a2 + 68);
  *(_DWORD *)(a1 + 64) = v7;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for GraphDebuggingComponent.DebugValuesKey(uint64_t a1, uint64_t a2)
{
  int v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(_DWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 68) = *(_BYTE *)(a2 + 68);
  *(_DWORD *)(a1 + 64) = v4;
  return a1;
}

__n128 initializeWithTake for GraphDebuggingComponent.DebugValuesKey(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 61) = *(_QWORD *)(a2 + 61);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for GraphDebuggingComponent.DebugValuesKey(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v6;
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v7;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 68) = *(_BYTE *)(a2 + 68);
  return a1;
}

uint64_t getEnumTagSinglePayload for GraphDebuggingComponent.DebugValuesKey(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 69))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for GraphDebuggingComponent.DebugValuesKey(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 68) = 0;
    *(_DWORD *)(result + 64) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 69) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 69) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for GraphDebuggingComponent.DebugValuesKey()
{
  return &type metadata for GraphDebuggingComponent.DebugValuesKey;
}

unint64_t sub_1B1C219A0()
{
  unint64_t result;

  result = qword_1EEF5C530;
  if (!qword_1EEF5C530)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2283738, &type metadata for GraphDebuggingComponent.DebugValuesKey);
    atomic_store(result, (unint64_t *)&qword_1EEF5C530);
  }
  return result;
}

unint64_t sub_1B1C219E8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EEF5C538;
  if (!qword_1EEF5C538)
  {
    sub_1B1A02758(255, &qword_1EEF5C540, (uint64_t)&type metadata for GraphScriptingConfig.Mode, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    result = MEMORY[0x1B5E23E74](MEMORY[0x1E0DEAF50], v1);
    atomic_store(result, (unint64_t *)&qword_1EEF5C538);
  }
  return result;
}

unint64_t sub_1B1C21A4C()
{
  unint64_t result;

  result = qword_1EEF5C548;
  if (!qword_1EEF5C548)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2283B38, &type metadata for GraphScriptingConfig.Mode);
    atomic_store(result, (unint64_t *)&qword_1EEF5C548);
  }
  return result;
}

unint64_t sub_1B1C21A94()
{
  unint64_t result;

  result = qword_1EEF5C550;
  if (!qword_1EEF5C550)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2283C28, &type metadata for GraphEntityComponentPropertyReferences.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5C550);
  }
  return result;
}

unint64_t sub_1B1C21ADC()
{
  unint64_t result;

  result = qword_1ED4B9DA0;
  if (!qword_1ED4B9DA0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2283B60, &type metadata for GraphEntityComponentPropertyReferences.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED4B9DA0);
  }
  return result;
}

unint64_t sub_1B1C21B24()
{
  unint64_t result;

  result = qword_1ED4B9D98;
  if (!qword_1ED4B9D98)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2283B88, &type metadata for GraphEntityComponentPropertyReferences.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED4B9D98);
  }
  return result;
}

unint64_t sub_1B1C21B6C()
{
  unint64_t result;

  result = qword_1ED4B94F8;
  if (!qword_1ED4B94F8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2283838, &type metadata for GraphScriptingConfig.EvaluationMode);
    atomic_store(result, (unint64_t *)&qword_1ED4B94F8);
  }
  return result;
}

unint64_t sub_1B1C21BB0()
{
  unint64_t result;

  result = qword_1EEF5C560;
  if (!qword_1EEF5C560)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B228459C, &type metadata for GraphEntityComponentPropertyReferences.DirectPropertyAssignment.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5C560);
  }
  return result;
}

unint64_t sub_1B1C21BF4()
{
  unint64_t result;

  result = qword_1ED4B9D68;
  if (!qword_1ED4B9D68)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B228454C, &type metadata for GraphEntityComponentPropertyReferences.ExportedDirectPropertyAssignment.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED4B9D68);
  }
  return result;
}

unint64_t sub_1B1C21C38()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  result = qword_1ED4BA428;
  if (!qword_1ED4BA428)
  {
    sub_1B1A02758(255, &qword_1ED4BA420, (uint64_t)&type metadata for EntityComponentProperty, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    v2 = v1;
    v3 = sub_1B1C1EBD4();
    result = MEMORY[0x1B5E23E74](MEMORY[0x1E0DEAF40], v2, &v3);
    atomic_store(result, (unint64_t *)&qword_1ED4BA428);
  }
  return result;
}

unint64_t sub_1B1C21CB0()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  result = qword_1EEF5C570;
  if (!qword_1EEF5C570)
  {
    sub_1B1A02758(255, &qword_1ED4BA420, (uint64_t)&type metadata for EntityComponentProperty, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    v2 = v1;
    v3 = sub_1B1C1F16C();
    result = MEMORY[0x1B5E23E74](MEMORY[0x1E0DEAF10], v2, &v3);
    atomic_store(result, (unint64_t *)&qword_1EEF5C570);
  }
  return result;
}

_QWORD *sub_1B1C21D28(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t);
  void (*v19)(char *, uint64_t);
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;

  sub_1B19F8E54(0, &qword_1EEF5C590, (uint64_t (*)(void))sub_1B1C22018, (uint64_t)&type metadata for CodeGenerationComponent.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v22 = v3;
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v5);
  v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v21 - v10;
  v12 = sub_1B19FA070(a1, a1[3]);
  sub_1B1C22018();
  v13 = v12;
  sub_1B222A150();
  if (!v1)
  {
    v14 = a1[3];
    v15 = a1[4];
    sub_1B19FA070(a1, v14);
    LODWORD(v14) = *(unsigned __int8 *)(sub_1B20680A8(v14, v15) + 80);
    swift_release();
    v16 = v22;
    (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v7, v11, v22);
    if ((_DWORD)v14 == 1 && (v17 = *(_QWORD *)(sub_1B2229880() + 16), swift_bridgeObjectRelease(), v17))
    {
      v18 = *(void (**)(char *, uint64_t))(v4 + 8);
      v18(v7, v16);
      _s7ContextCMa();
      sub_1B19E52CC(&qword_1EEF5C5A0, (uint64_t (*)(uint64_t))_s7ContextCMa, (uint64_t)&unk_1B22963AC);
      sub_1B2229814();
      v18(v11, v16);
      v13 = v23;
    }
    else
    {
      v19 = *(void (**)(char *, uint64_t))(v4 + 8);
      v19(v7, v16);
      v19(v11, v16);
      v13 = 0;
    }
  }
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  return v13;
}

uint64_t sub_1B1C21F48()
{
  unint64_t v0;

  v0 = sub_1B2229730();
  swift_bridgeObjectRelease();
  if (v0 >= 7)
    return 7;
  else
    return v0;
}

unint64_t sub_1B1C21F90()
{
  unint64_t result;

  result = qword_1ED4B9518;
  if (!qword_1ED4B9518)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2283AC0, &type metadata for GraphScriptingConfig.Mode);
    atomic_store(result, (unint64_t *)&qword_1ED4B9518);
  }
  return result;
}

unint64_t sub_1B1C21FD4()
{
  unint64_t result;

  result = qword_1EEF5C588;
  if (!qword_1EEF5C588)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22844FC, &type metadata for CodeGenerationInitialized.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5C588);
  }
  return result;
}

unint64_t sub_1B1C22018()
{
  unint64_t result;

  result = qword_1EEF5C598;
  if (!qword_1EEF5C598)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22844AC, &type metadata for CodeGenerationComponent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5C598);
  }
  return result;
}

unint64_t sub_1B1C2205C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v5;
  unsigned __int8 v6;
  unsigned int v7;
  _BYTE v8[40];
  _BYTE v9[24];
  uint64_t v10;

  sub_1B19FA070(a1, a1[3]);
  sub_1B222A12C();
  if (v1)
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  sub_1B19FC264((uint64_t)v9, v10);
  v3 = sub_1B2229A90();
  v5 = v3;
  v6 = 1;
  switch(v3)
  {
    case 0:
      break;
    case 1:
      v5 = 1;
      break;
    case 2:
      sub_1B19FC264((uint64_t)v9, v10);
      sub_1B2229A84();
      v6 = 0;
      v5 = v7;
      break;
    case 3:
      v5 = 2;
      break;
    default:
      sub_1B19FA198((uint64_t)v9, (uint64_t)v8);
      sub_1B22294CC();
      swift_allocError();
      sub_1B222949C();
      _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v8);
      swift_willThrow();
      _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v9);
      return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  }
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v9);
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  return v5 | ((unint64_t)v6 << 32);
}

uint64_t sub_1B1C221F8@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[5];
  _QWORD v25[3];
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  sub_1B19F8E54(0, &qword_1ED4BABC8, (uint64_t (*)(void))sub_1B1C22508, (uint64_t)&type metadata for GraphScriptingConfig.ScriptArg.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = (char *)v24 - v9;
  v11 = a1[3];
  v12 = a1[4];
  sub_1B19FA070(a1, v11);
  if (!sub_1B2067B64(2010, v11, v12))
  {
    sub_1B19FA070(a1, a1[3]);
    sub_1B222A12C();
    if (!v2)
    {
      sub_1B19FC264((uint64_t)v25, v26);
      v17 = sub_1B2229A60();
      v16 = v18;
      sub_1B19FC264((uint64_t)v25, v26);
      sub_1B19FA154();
      sub_1B2229AA8();
      v28 = v17;
      v19 = v24[0];
      v20 = v24[1];
      v22 = v24[2];
      v21 = v24[3];
      v23 = v24[4];
      _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v25);
      goto LABEL_7;
    }
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  }
  sub_1B19FA070(a1, a1[3]);
  sub_1B1C22508();
  sub_1B222A150();
  if (v2)
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  LOBYTE(v25[0]) = 0;
  v14 = sub_1B22297CC();
  v16 = v15;
  LOBYTE(v24[0]) = 1;
  sub_1B19FA154();
  sub_1B2229814();
  v28 = v14;
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  v19 = v25[0];
  v20 = v25[1];
  v22 = v25[2];
  v21 = v26;
  v23 = v27;
LABEL_7:
  swift_bridgeObjectRetain();
  sub_1B19FA2B4(v19, v20);
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  swift_bridgeObjectRelease();
  result = sub_1B19F9FEC(v19, v20);
  *a2 = v28;
  a2[1] = v16;
  a2[2] = v19;
  a2[3] = v20;
  a2[4] = v22;
  a2[5] = v21;
  a2[6] = v23;
  return result;
}

unint64_t sub_1B1C22508()
{
  unint64_t result;

  result = qword_1ED4B9528;
  if (!qword_1ED4B9528)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B228445C, &type metadata for GraphScriptingConfig.ScriptArg.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED4B9528);
  }
  return result;
}

unint64_t sub_1B1C2254C()
{
  unint64_t result;

  result = qword_1ED4B94A8;
  if (!qword_1ED4B94A8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B228440C, &type metadata for GraphScriptingConfig.ScriptInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED4B94A8);
  }
  return result;
}

unint64_t sub_1B1C22590()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  result = qword_1ED4BA408;
  if (!qword_1ED4BA408)
  {
    sub_1B1A02758(255, &qword_1ED4BA400, (uint64_t)&type metadata for GraphScriptingConfig.ScriptArg, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    v2 = v1;
    v3 = sub_1B1C22608();
    result = MEMORY[0x1B5E23E74](MEMORY[0x1E0DEAF40], v2, &v3);
    atomic_store(result, (unint64_t *)&qword_1ED4BA408);
  }
  return result;
}

unint64_t sub_1B1C22608()
{
  unint64_t result;

  result = qword_1ED4B9540[0];
  if (!qword_1ED4B9540[0])
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2283950, &type metadata for GraphScriptingConfig.ScriptArg);
    atomic_store(result, qword_1ED4B9540);
  }
  return result;
}

uint64_t sub_1B1C2264C()
{
  uint64_t result;

  result = qword_1ED4BB2B8;
  if (!qword_1ED4BB2B8)
  {
    _s11MetadataSetCMa();
    sub_1B19E52CC(&qword_1ED4BB378, (uint64_t (*)(uint64_t))_s11MetadataSetCMa, (uint64_t)&unk_1B22963AC);
    sub_1B19E52CC(&qword_1ED4BB370, (uint64_t (*)(uint64_t))_s11MetadataSetCMa, (uint64_t)&unk_1B2296384);
    type metadata accessor for FastDictCoder();
  }
  return result;
}

unint64_t sub_1B1C22720()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v4[2];

  result = qword_1EEF5C5C0;
  if (!qword_1EEF5C5C0)
  {
    sub_1B1C1F5F4(255, &qword_1EEF5C5B8, (uint64_t (*)(uint64_t))_s11MetadataSetCMa, (uint64_t (*)(uint64_t, _QWORD, uint64_t, _QWORD))MEMORY[0x1E0DEA048]);
    v2 = v1;
    v3 = sub_1B19E52CC(&qword_1ED4BB378, (uint64_t (*)(uint64_t))_s11MetadataSetCMa, (uint64_t)&unk_1B22963AC);
    v4[0] = MEMORY[0x1E0DEA9A0];
    v4[1] = v3;
    result = MEMORY[0x1B5E23E74](MEMORY[0x1E0DEA0D8], v2, v4);
    atomic_store(result, (unint64_t *)&qword_1EEF5C5C0);
  }
  return result;
}

unint64_t sub_1B1C227B8()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  result = qword_1EEF5C5E0;
  if (!qword_1EEF5C5E0)
  {
    sub_1B1B40F70(255, &qword_1EEF5C5D8, &qword_1ED4BA400, (uint64_t)&type metadata for GraphScriptingConfig.ScriptArg, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    v2 = v1;
    v3 = sub_1B1C22838();
    result = MEMORY[0x1B5E23E74](MEMORY[0x1E0DEE988], v2, &v3);
    atomic_store(result, (unint64_t *)&qword_1EEF5C5E0);
  }
  return result;
}

unint64_t sub_1B1C22838()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  result = qword_1EEF5C5E8;
  if (!qword_1EEF5C5E8)
  {
    sub_1B1A02758(255, &qword_1ED4BA400, (uint64_t)&type metadata for GraphScriptingConfig.ScriptArg, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    v2 = v1;
    v3 = sub_1B1C228B0();
    result = MEMORY[0x1B5E23E74](MEMORY[0x1E0DEAF10], v2, &v3);
    atomic_store(result, (unint64_t *)&qword_1EEF5C5E8);
  }
  return result;
}

unint64_t sub_1B1C228B0()
{
  unint64_t result;

  result = qword_1EEF5C5F0;
  if (!qword_1EEF5C5F0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2283928, &type metadata for GraphScriptingConfig.ScriptArg);
    atomic_store(result, (unint64_t *)&qword_1EEF5C5F0);
  }
  return result;
}

unint64_t sub_1B1C228F4()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  result = qword_1EEF5C5F8;
  if (!qword_1EEF5C5F8)
  {
    sub_1B1B28F74();
    v2 = v1;
    v3 = sub_1B19E52CC(&qword_1EEF5C600, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09B8]);
    result = MEMORY[0x1B5E23E74](MEMORY[0x1E0DEE988], v2, &v3);
    atomic_store(result, (unint64_t *)&qword_1EEF5C5F8);
  }
  return result;
}

char *sub_1B1C2296C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  int *v35;
  char *v36;
  uint64_t v37;
  char *v38;
  _QWORD *v39;
  _QWORD v40[2];
  _QWORD *v41;
  _QWORD *v42;
  char *v43;
  _QWORD *v44;
  _QWORD *v45;
  _QWORD *v46;
  unsigned __int16 v47;
  _QWORD *v48;
  _QWORD *v49;
  __int16 v50;
  char v51;
  char v52;

  sub_1B1C1908C(0);
  MEMORY[0x1E0C80A78](v2, v3);
  v43 = (char *)v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1B19F8E54(0, &qword_1ED4BABB8, (uint64_t (*)(void))sub_1B1C231A4, (uint64_t)&type metadata for GraphScriptingConfig.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = (char *)v40 - v9;
  v47 = 513;
  v11 = MEMORY[0x1E0DEE9D8];
  v12 = sub_1B1B7EBDC(MEMORY[0x1E0DEE9D8]);
  v48 = v12;
  v13 = sub_1B1B95A38(v11);
  v49 = v13;
  v50 = 1;
  v51 = 1;
  v14 = a1[3];
  v45 = a1;
  sub_1B19FA070(a1, v14);
  sub_1B1C231A4();
  swift_bridgeObjectRetain();
  v15 = v44;
  sub_1B222A150();
  if (v15)
  {
    swift_bridgeObjectRelease();
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v45);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    v44 = v12;
    v16 = v7;
    v52 = 0;
    sub_1B1C231E8();
    sub_1B2229814();
    LOBYTE(v47) = (_BYTE)v46;
    v18 = v45;
    v19 = v45[3];
    v20 = v45[4];
    sub_1B19FA070(v45, v19);
    if (sub_1B2067B64(1085, v19, v20))
    {
      swift_bridgeObjectRelease();
      LOBYTE(v46) = 2;
      sub_1B2229778();
      v22 = v21;
      sub_1B1C1F5F4(0, &qword_1EEF5C5B8, (uint64_t (*)(uint64_t))_s11MetadataSetCMa, (uint64_t (*)(uint64_t, _QWORD, uint64_t, _QWORD))MEMORY[0x1E0DEA048]);
      v52 = 3;
      sub_1B1C22720();
      sub_1B22297B4();
      if (v46)
        v42 = v46;
      else
        v42 = sub_1B1B80518(MEMORY[0x1E0DEE9D8]);
      sub_1B1A02758(0, &qword_1ED4BA400, (uint64_t)&type metadata for GraphScriptingConfig.ScriptArg, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
      v52 = 4;
      sub_1B1C22590();
      sub_1B22297B4();
      v41 = v46;
      v52 = 5;
      sub_1B22297B4();
      v32 = v46;
      if (v22)
      {
        v40[1] = &v49;
        swift_bridgeObjectRelease();
        sub_1B1B80518(MEMORY[0x1E0DEE9D8]);
        v40[0] = v10;
        v33 = v32;
        v34 = v43;
        *((_WORD *)v43 + 20) = 1;
        v35 = (int *)type metadata accessor for GraphScriptingConfig.ScriptInfo();
        v36 = (char *)v34 + v35[10];
        v37 = sub_1B222826C();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 56))(v36, 1, 1, v37);
        swift_bridgeObjectRelease();
        *(_QWORD *)((char *)v34 + v35[11]) = 0;
        v38 = (char *)v34 + v35[12];
        *(_QWORD *)v38 = 0;
        v38[8] = 1;
        *v34 = 0;
        v34[1] = 0;
        v39 = v41;
        v34[2] = v42;
        v34[3] = v39;
        v34[4] = v33;
        (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(*((_QWORD *)v35 - 1) + 56))(v34, 0, 1, v35);
        LOBYTE(v46) = 1;
        v18 = v45;
        v10 = (char *)v40[0];
        sub_1B20E1804((uint64_t)v34, 0x100000002uLL);
      }
      else
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      HIBYTE(v50) = 1;
    }
    else
    {
      v23 = v18[3];
      v24 = v18[4];
      sub_1B19FA070(v18, v23);
      if (sub_1B2067B64(2010, v23, v24))
      {
        sub_1B1C23444(0, &qword_1EEF5C608, (uint64_t (*)(uint64_t, ValueMetadata *, uint64_t, unint64_t))MEMORY[0x1E0DEA048]);
        v52 = 7;
        sub_1B1C234B0();
        sub_1B22297B4();
        v25 = v46;
        swift_bridgeObjectRelease();
        if (v25)
        {
          swift_bridgeObjectRelease();
          v13 = v25;
        }
        v49 = v13;
      }
      else
      {
        swift_bridgeObjectRelease();
        sub_1B1C2322C();
        v52 = 7;
        sub_1B19E52CC(&qword_1ED4B86D0, (uint64_t (*)(uint64_t))sub_1B1C2322C, (uint64_t)&unk_1B22B5B6C);
        sub_1B2229814();
        swift_bridgeObjectRelease();
        v49 = v46;
      }
    }
    v26 = v18[3];
    v27 = v18[4];
    sub_1B19FA070(v18, v26);
    if (sub_1B2067B64(2010, v26, v27))
    {
      sub_1B1C1F5A0(0, &qword_1ED4BA278, (uint64_t)&type metadata for EntityComponentProperty, (uint64_t (*)(_QWORD, _QWORD, uint64_t, _QWORD))MEMORY[0x1E0DEA048]);
      v52 = 1;
      sub_1B1C1F3A0(&qword_1ED4BA280, (uint64_t (*)(void))sub_1B1C1EBD4, MEMORY[0x1E0DEA9A0], MEMORY[0x1E0DEA0D8]);
      sub_1B22297B4();
      v28 = v46;
      if (v46)
        swift_bridgeObjectRelease();
      else
        v28 = v44;
      v48 = v28;
    }
    else
    {
      sub_1B1C1F0CC(0, &qword_1ED4B8708, (void (*)(void))sub_1B1C1EBD4, (void (*)(void))sub_1B1C1F16C);
      v52 = 1;
      sub_1B1C23398();
      sub_1B2229814();
      swift_bridgeObjectRelease();
      v48 = v46;
    }
    v52 = 6;
    sub_1B1C23400();
    sub_1B22297B4();
    v29 = (char)v46;
    if (v46 == 3)
      v29 = 2;
    HIBYTE(v47) = v29;
    v51 = 1;
    v30 = v18[3];
    v31 = v18[4];
    sub_1B19FA070(v18, v30);
    sub_1B2067B64(1080, v30, v31);
    (*(void (**)(char *, uint64_t))(v16 + 8))(v10, v6);
    v10 = (char *)v47;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v18);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v10;
}

unint64_t sub_1B1C231A4()
{
  unint64_t result;

  result = qword_1ED4B9490;
  if (!qword_1ED4B9490)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22843BC, &type metadata for GraphScriptingConfig.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED4B9490);
  }
  return result;
}

unint64_t sub_1B1C231E8()
{
  unint64_t result;

  result = qword_1ED4B9520;
  if (!qword_1ED4B9520)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2283A98, &type metadata for GraphScriptingConfig.Mode);
    atomic_store(result, (unint64_t *)&qword_1ED4B9520);
  }
  return result;
}

uint64_t sub_1B1C2322C()
{
  uint64_t result;

  result = qword_1ED4B86D8;
  if (!qword_1ED4B86D8)
  {
    type metadata accessor for GraphScriptingConfig.ScriptInfo();
    sub_1B1C23310();
    sub_1B1C23354();
    sub_1B1B9DE34();
    sub_1B19E52CC(&qword_1ED4B94C8, (uint64_t (*)(uint64_t))type metadata accessor for GraphScriptingConfig.ScriptInfo, (uint64_t)&unk_1B22838D8);
    sub_1B19E52CC(&qword_1ED4B94C0, (uint64_t (*)(uint64_t))type metadata accessor for GraphScriptingConfig.ScriptInfo, (uint64_t)&unk_1B22838B0);
    type metadata accessor for FastDictCoder();
  }
  return result;
}

unint64_t sub_1B1C23310()
{
  unint64_t result;

  result = qword_1ED4B9500;
  if (!qword_1ED4B9500)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2283888, &type metadata for GraphScriptingConfig.EvaluationMode);
    atomic_store(result, (unint64_t *)&qword_1ED4B9500);
  }
  return result;
}

unint64_t sub_1B1C23354()
{
  unint64_t result;

  result = qword_1ED4B94E8;
  if (!qword_1ED4B94E8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2283860, &type metadata for GraphScriptingConfig.EvaluationMode);
    atomic_store(result, (unint64_t *)&qword_1ED4B94E8);
  }
  return result;
}

unint64_t sub_1B1C23398()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1ED4B8700;
  if (!qword_1ED4B8700)
  {
    v1 = sub_1B1C1F0CC(255, &qword_1ED4B8708, (void (*)(void))sub_1B1C1EBD4, (void (*)(void))sub_1B1C1F16C);
    result = MEMORY[0x1B5E23E74](&unk_1B22B5B6C, v1);
    atomic_store(result, (unint64_t *)&qword_1ED4B8700);
  }
  return result;
}

unint64_t sub_1B1C23400()
{
  unint64_t result;

  result = qword_1ED4BA0B0;
  if (!qword_1ED4BA0B0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B2A94, &type metadata for Language);
    atomic_store(result, (unint64_t *)&qword_1ED4BA0B0);
  }
  return result;
}

void sub_1B1C23444(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, uint64_t, unint64_t))
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;

  if (!*a2)
  {
    v6 = type metadata accessor for GraphScriptingConfig.ScriptInfo();
    v7 = sub_1B1B9DE34();
    v8 = a3(a1, &type metadata for GraphScriptingConfig.EvaluationMode, v6, v7);
    if (!v9)
      atomic_store(v8, a2);
  }
}

unint64_t sub_1B1C234B0()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_1EEF5C610;
  if (!qword_1EEF5C610)
  {
    sub_1B1C23444(255, &qword_1EEF5C608, (uint64_t (*)(uint64_t, ValueMetadata *, uint64_t, unint64_t))MEMORY[0x1E0DEA048]);
    v2 = v1;
    v3[0] = sub_1B1C23310();
    v3[1] = sub_1B19E52CC(&qword_1ED4B94C8, (uint64_t (*)(uint64_t))type metadata accessor for GraphScriptingConfig.ScriptInfo, (uint64_t)&unk_1B22838D8);
    result = MEMORY[0x1B5E23E74](MEMORY[0x1E0DEA0D8], v2, v3);
    atomic_store(result, (unint64_t *)&qword_1EEF5C610);
  }
  return result;
}

unint64_t sub_1B1C23540()
{
  unint64_t result;

  result = qword_1EEF5C620;
  if (!qword_1EEF5C620)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2283A70, &type metadata for GraphScriptingConfig.Mode);
    atomic_store(result, (unint64_t *)&qword_1EEF5C620);
  }
  return result;
}

unint64_t sub_1B1C23584()
{
  unint64_t result;

  result = qword_1EEF5C628;
  if (!qword_1EEF5C628)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B2A6C, &type metadata for Language);
    atomic_store(result, (unint64_t *)&qword_1EEF5C628);
  }
  return result;
}

_QWORD *sub_1B1C235C8(_QWORD *a1)
{
  uint64_t v1;

  return sub_1B1A79014(a1, **(_BYTE **)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40));
}

uint64_t storeEnumTagSinglePayload for GraphScriptingConfig.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_1B1C23634 + 4 * byte_1B22833AB[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_1B1C23668 + 4 * byte_1B22833A6[v4]))();
}

uint64_t sub_1B1C23668(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1C23670(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B1C23678);
  return result;
}

uint64_t sub_1B1C23684(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B1C2368CLL);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_1B1C23690(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1C23698(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for GraphScriptingConfig.CodingKeys()
{
  return &type metadata for GraphScriptingConfig.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for GraphScriptingConfig.ScriptInfo.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1B1C23700 + 4 * byte_1B22833B5[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1B1C23734 + 4 * byte_1B22833B0[v4]))();
}

uint64_t sub_1B1C23734(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1C2373C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B1C23744);
  return result;
}

uint64_t sub_1B1C23750(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B1C23758);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1B1C2375C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1C23764(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for GraphScriptingConfig.ScriptInfo.CodingKeys()
{
  return &type metadata for GraphScriptingConfig.ScriptInfo.CodingKeys;
}

ValueMetadata *type metadata accessor for GraphScriptingConfig.ScriptArg.CodingKeys()
{
  return &type metadata for GraphScriptingConfig.ScriptArg.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for CodeGenerationComponent.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1B1C237D4 + 4 * byte_1B22833BA[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1B1C237F4 + 4 * byte_1B22833BF[v4]))();
}

_BYTE *sub_1B1C237D4(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1B1C237F4(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1B1C237FC(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1B1C23804(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1B1C2380C(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1B1C23814(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for CodeGenerationComponent.CodingKeys()
{
  return &type metadata for CodeGenerationComponent.CodingKeys;
}

ValueMetadata *type metadata accessor for CodeGenerationInitialized.CodingKeys()
{
  return &type metadata for CodeGenerationInitialized.CodingKeys;
}

ValueMetadata *type metadata accessor for GraphEntityComponentPropertyReferences.ExportedDirectPropertyAssignment.CodingKeys()
{
  return &type metadata for GraphEntityComponentPropertyReferences.ExportedDirectPropertyAssignment.CodingKeys;
}

uint64_t _s3VFX20GraphScriptingConfigV9ScriptArgV10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1B1C2389C + 4 * byte_1B22833C9[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1B1C238D0 + 4 * byte_1B22833C4[v4]))();
}

uint64_t sub_1B1C238D0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1C238D8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B1C238E0);
  return result;
}

uint64_t sub_1B1C238EC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B1C238F4);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1B1C238F8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1C23900(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for GraphEntityComponentPropertyReferences.DirectPropertyAssignment.CodingKeys()
{
  return &type metadata for GraphEntityComponentPropertyReferences.DirectPropertyAssignment.CodingKeys;
}

unint64_t sub_1B1C23920()
{
  unint64_t result;

  result = qword_1EEF5C638;
  if (!qword_1EEF5C638)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2283ECC, &type metadata for GraphEntityComponentPropertyReferences.DirectPropertyAssignment.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5C638);
  }
  return result;
}

unint64_t sub_1B1C23968()
{
  unint64_t result;

  result = qword_1EEF5C640;
  if (!qword_1EEF5C640)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2283F84, &type metadata for GraphEntityComponentPropertyReferences.ExportedDirectPropertyAssignment.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5C640);
  }
  return result;
}

unint64_t sub_1B1C239B0()
{
  unint64_t result;

  result = qword_1EEF5C648;
  if (!qword_1EEF5C648)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22840C4, &type metadata for CodeGenerationComponent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5C648);
  }
  return result;
}

unint64_t sub_1B1C239F8()
{
  unint64_t result;

  result = qword_1EEF5C650;
  if (!qword_1EEF5C650)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22841B4, &type metadata for GraphScriptingConfig.ScriptArg.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5C650);
  }
  return result;
}

unint64_t sub_1B1C23A40()
{
  unint64_t result;

  result = qword_1EEF5C658;
  if (!qword_1EEF5C658)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22842A4, &type metadata for GraphScriptingConfig.ScriptInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5C658);
  }
  return result;
}

unint64_t sub_1B1C23A88()
{
  unint64_t result;

  result = qword_1EEF5C660;
  if (!qword_1EEF5C660)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2284394, &type metadata for GraphScriptingConfig.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5C660);
  }
  return result;
}

unint64_t sub_1B1C23AD0()
{
  unint64_t result;

  result = qword_1ED4B94A0;
  if (!qword_1ED4B94A0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22842CC, &type metadata for GraphScriptingConfig.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED4B94A0);
  }
  return result;
}

unint64_t sub_1B1C23B18()
{
  unint64_t result;

  result = qword_1ED4B9498;
  if (!qword_1ED4B9498)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22842F4, &type metadata for GraphScriptingConfig.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED4B9498);
  }
  return result;
}

unint64_t sub_1B1C23B60()
{
  unint64_t result;

  result = qword_1ED4B94B8;
  if (!qword_1ED4B94B8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22841DC, &type metadata for GraphScriptingConfig.ScriptInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED4B94B8);
  }
  return result;
}

unint64_t sub_1B1C23BA8()
{
  unint64_t result;

  result = qword_1ED4B94B0;
  if (!qword_1ED4B94B0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2284204, &type metadata for GraphScriptingConfig.ScriptInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED4B94B0);
  }
  return result;
}

unint64_t sub_1B1C23BF0()
{
  unint64_t result;

  result = qword_1ED4B9538;
  if (!qword_1ED4B9538)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22840EC, &type metadata for GraphScriptingConfig.ScriptArg.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED4B9538);
  }
  return result;
}

unint64_t sub_1B1C23C38()
{
  unint64_t result;

  result = qword_1ED4B9530;
  if (!qword_1ED4B9530)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2284114, &type metadata for GraphScriptingConfig.ScriptArg.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED4B9530);
  }
  return result;
}

unint64_t sub_1B1C23C80()
{
  unint64_t result;

  result = qword_1EEF5C668;
  if (!qword_1EEF5C668)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2283FFC, &type metadata for CodeGenerationComponent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5C668);
  }
  return result;
}

unint64_t sub_1B1C23CC8()
{
  unint64_t result;

  result = qword_1EEF5C670;
  if (!qword_1EEF5C670)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2284024, &type metadata for CodeGenerationComponent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5C670);
  }
  return result;
}

unint64_t sub_1B1C23D10()
{
  unint64_t result;

  result = qword_1EEF5C678;
  if (!qword_1EEF5C678)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2283FAC, &type metadata for CodeGenerationInitialized.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5C678);
  }
  return result;
}

unint64_t sub_1B1C23D58()
{
  unint64_t result;

  result = qword_1EEF5C680;
  if (!qword_1EEF5C680)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2283FD4, &type metadata for CodeGenerationInitialized.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5C680);
  }
  return result;
}

unint64_t sub_1B1C23DA0()
{
  unint64_t result;

  result = qword_1ED4B9D78;
  if (!qword_1ED4B9D78)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2283EF4, &type metadata for GraphEntityComponentPropertyReferences.ExportedDirectPropertyAssignment.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED4B9D78);
  }
  return result;
}

unint64_t sub_1B1C23DE8()
{
  unint64_t result;

  result = qword_1ED4B9D70;
  if (!qword_1ED4B9D70)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2283F1C, &type metadata for GraphEntityComponentPropertyReferences.ExportedDirectPropertyAssignment.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED4B9D70);
  }
  return result;
}

unint64_t sub_1B1C23E30()
{
  unint64_t result;

  result = qword_1EEF5C688;
  if (!qword_1EEF5C688)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2283E3C, &type metadata for GraphEntityComponentPropertyReferences.DirectPropertyAssignment.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5C688);
  }
  return result;
}

unint64_t sub_1B1C23E78()
{
  unint64_t result;

  result = qword_1EEF5C690;
  if (!qword_1EEF5C690)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2283E64, &type metadata for GraphEntityComponentPropertyReferences.DirectPropertyAssignment.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5C690);
  }
  return result;
}

double sub_1B1C23EBC(_QWORD *a1)
{
  return sub_1B1C1A13C(a1);
}

uint64_t sub_1B1C23ED0(_QWORD *a1)
{
  return sub_1B1C1A284(a1);
}

double sub_1B1C23EE4(__n128 *a1)
{
  double result;

  *(_QWORD *)&result = sub_1B1C1A968(a1).n128_u64[0];
  return result;
}

float sub_1B1C23EFC(_DWORD *a1)
{
  return sub_1B1C1A990(a1);
}

_QWORD *sub_1B1C23F14(uint64_t a1)
{
  return sub_1B1C1A120(a1);
}

uint64_t sub_1B1C23F2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v16;
  uint64_t v17;
  _QWORD v18[3];
  uint64_t v19;
  uint64_t v20;

  v7 = a7;
  if (a1)
    v7 = sub_1B2228CF8() ^ a7;
  if (a3)
    v7 ^= sub_1B2228CF8();
  sub_1B1C24094(a5, (uint64_t)&v16);
  if (v17)
  {
    sub_1B1A02518(&v16, (uint64_t)v18);
    sub_1B19FA070(v18, v19);
    swift_getDynamicType();
    v7 ^= sub_1B2228CF8();
    v11 = v19;
    v12 = v20;
    sub_1B19FA070(v18, v19);
    (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 16))(v11, v12);
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v18);
  }
  else
  {
    sub_1B1A12E98((uint64_t)&v16);
  }
  sub_1B1C24094(a6, (uint64_t)&v16);
  if (v17)
  {
    sub_1B1A02518(&v16, (uint64_t)v18);
    sub_1B19FA070(v18, v19);
    swift_getDynamicType();
    v7 ^= sub_1B2228CF8();
    v13 = v19;
    v14 = v20;
    sub_1B19FA070(v18, v19);
    (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 16))(v13, v14);
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v18);
  }
  else
  {
    sub_1B1A12E98((uint64_t)&v16);
  }
  return v7;
}

uint64_t sub_1B1C24094(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1B19FFFFC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

ValueMetadata *_s10ChangeKindVMa()
{
  return &_s10ChangeKindVN;
}

uint64_t sub_1B1C240E8(char a1, char a2)
{
  _QWORD *v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t (*inited)(uint64_t *);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE v19[16];
  uint64_t (*v20)(uint64_t *);
  _QWORD *v21;
  _QWORD v22[2];

  v4 = (_QWORD *)*v2;
  if ((a2 & 1) != 0)
    sub_1B1C24B40();
  if ((a1 & 1) != 0)
  {
    v5 = MEMORY[0x1E0DEE9D8];
    type metadata accessor for GraphTypeInference();
    inited = (uint64_t (*)(uint64_t *))swift_initStackObject();
    v7 = MEMORY[0x1E0DEE9E8];
    *((_QWORD *)inited + 3) = v5;
    *((_QWORD *)inited + 4) = v7;
    swift_retain();
    *((_QWORD *)inited + 5) = sub_1B1B7F730(v5);
    v8 = (uint64_t)sub_1B1B7F730(v5);
    *((_QWORD *)inited + 6) = v8;
    *((_QWORD *)inited + 2) = v2;
    if (qword_1EEF572D0 != -1)
      v8 = swift_once();
    MEMORY[0x1E0C80A78](v8, v9);
    v20 = inited;
    v21 = v4;
    sub_1B1C5A714((uint64_t)sub_1B1C254E8, (uint64_t)v19, v10, v11, v12, MEMORY[0x1E0DEE9D8]);
    v13 = sub_1B1C6A11C();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v2[3] = v13;
    swift_bridgeObjectRelease();
    swift_setDeallocating();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v14 = MEMORY[0x1E0DEE9D8];
  v2[6] = sub_1B1B7DC90(MEMORY[0x1E0DEE9D8]);
  v15 = swift_bridgeObjectRelease();
  MEMORY[0x1E0C80A78](v15, v16);
  v20 = sub_1B1C254C8;
  v21 = v2;
  v22[0] = sub_1B1C6D068(v14);
  v22[1] = v17;
  sub_1B1C5C9C4((uint64_t)sub_1B1C254D0, (uint64_t)v19, 1, 0x1000000000000000uLL, 0, v14, (uint64_t)v22);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B1C2430C(uint64_t a1, uint64_t (*a2)(_OWORD *))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  __int128 v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD v14[3];

  sub_1B1792854(0, (unint64_t *)&qword_1ED4B7B50, (void (*)(uint64_t))MEMORY[0x1E0CB0998]);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)v14 - v6;
  v8 = *(_OWORD *)(a1 + 16);
  v14[0] = *(_OWORD *)a1;
  v14[1] = v8;
  v14[2] = *(_OWORD *)(a1 + 32);
  if ((a2(v14) & 1) != 0)
  {
    v9 = *(_QWORD *)(a1 + 8);
    swift_retain();
  }
  else
  {
    _s11DeletedNodeCMa_0(0);
    swift_allocObject();
    _s11DeletedNodeCMa(0);
    v10 = (_QWORD *)swift_allocObject();
    v11 = MEMORY[0x1E0DEE9D8];
    v10[3] = 0;
    v10[4] = 0;
    v10[2] = v11;
    sub_1B2228260();
    v12 = sub_1B222826C();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v7, 1, 1, v12);
    v9 = sub_1B20E4E94((uint64_t)v10, v11, (uint64_t)v7, 0, 0xF000000000000000);
    swift_release();
  }
  return v9;
}

unint64_t sub_1B1C24460()
{
  unint64_t result;

  result = qword_1EEF5C698;
  if (!qword_1EEF5C698)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B228465C, &_s10ChangeKindVN);
    atomic_store(result, (unint64_t *)&qword_1EEF5C698);
  }
  return result;
}

unint64_t sub_1B1C244A8()
{
  unint64_t result;

  result = qword_1EEF5C6A0;
  if (!qword_1EEF5C6A0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B228462C, &_s10ChangeKindVN);
    atomic_store(result, (unint64_t *)&qword_1EEF5C6A0);
  }
  return result;
}

unint64_t sub_1B1C244F0()
{
  unint64_t result;

  result = qword_1EEF5C6A8;
  if (!qword_1EEF5C6A8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2284684, &_s10ChangeKindVN);
    atomic_store(result, (unint64_t *)&qword_1EEF5C6A8);
  }
  return result;
}

unint64_t sub_1B1C24538()
{
  unint64_t result;

  result = qword_1EEF5C6B0;
  if (!qword_1EEF5C6B0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22846BC, &_s10ChangeKindVN);
    atomic_store(result, (unint64_t *)&qword_1EEF5C6B0);
  }
  return result;
}

uint64_t sub_1B1C2457C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __objc2_class *v10;
  uint64_t result;
  __objc2_class_ro *info;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t i;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48[5];
  _QWORD *v49;
  _QWORD v50[6];
  _QWORD v51[5];
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;

  v3 = v2;
  sub_1B1792854(0, (unint64_t *)&qword_1ED4B7B50, (void (*)(uint64_t))MEMORY[0x1E0CB0998]);
  MEMORY[0x1E0C80A78](v6, v7);
  v45 = (char *)&v42 - v8;
  v9 = *(_QWORD *)(a1 + 8);
  v46 = OBJC_IVAR____TtC3VFX13AuthoringNode_raw;
  v10 = **(__objc2_class ***)(v9 + OBJC_IVAR____TtC3VFX13AuthoringNode_raw);
  if (v10 == _TtC3VFX24InspectorSetECSValueNode
    || (type metadata accessor for InspectorSetWorldValueNode(0), swift_dynamicCastClass()))
  {
    result = swift_retain();
LABEL_4:
    *a2 = v9;
    return result;
  }
  info = v10[3].info;
  v13 = swift_retain();
  ((void (*)(_QWORD *__return_ptr, uint64_t))info)(v50, v13);
  v14 = v50[0];
  v64 = v50[0];
  v63 = v50[1];
  sub_1B1B28C6C((uint64_t)&v63);
  v62 = v50[2];
  sub_1B1B28C6C((uint64_t)&v62);
  v61 = v50[3];
  sub_1B1B28C6C((uint64_t)&v61);
  v60 = v50[4];
  sub_1B1B28C6C((uint64_t)&v60);
  v59 = v50[5];
  sub_1B1B28C6C((uint64_t)&v59);
  v15 = *(_QWORD *)(v14 + 16);
  if (!v15)
  {
    result = sub_1B1B28C6C((uint64_t)&v64);
    goto LABEL_4;
  }
  v42 = a2;
  v16 = 0;
  v17 = OBJC_IVAR____TtC3VFX13AuthoringNode_inputs;
  v44 = v15;
  v43 = OBJC_IVAR____TtC3VFX13AuthoringNode_inputs;
  while (*(_QWORD *)(*(_QWORD *)(v9 + v17) + 16 * v16 + 32))
  {
LABEL_8:
    if (++v16 == v15)
    {
      result = sub_1B1B28C6C((uint64_t)&v64);
      a2 = v42;
      goto LABEL_4;
    }
  }
  v18 = MEMORY[0x1E0DEE9D8];
  v49 = sub_1B1B96ADC(MEMORY[0x1E0DEE9D8]);
  MEMORY[0x1E0C80A78](v49, v19);
  *(&v42 - 2) = (uint64_t *)0x1000000000000000;
  *(&v42 - 1) = (uint64_t *)&v49;
  MEMORY[0x1E0C80A78](v20, v21);
  *(&v42 - 2) = (uint64_t *)sub_1B1C25590;
  *(&v42 - 1) = v22;
  v48[0] = sub_1B1C6D068(v18);
  v48[1] = v23;
  sub_1B1C5C9C4((uint64_t)sub_1B1C25CE0, (uint64_t)(&v42 - 4), 1, 0x1000000000000000uLL, 0, v18, (uint64_t)v48);
  if (!v3)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v24 = swift_bridgeObjectRetain();
    v25 = sub_1B1BAD65C(v24);
    swift_bridgeObjectRelease_n();
    v26 = swift_bridgeObjectRetain();
    v27 = sub_1B1C25598(v26, v25);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v47 = 0;
    if (v27 >> 62)
    {
      swift_bridgeObjectRetain();
      v28 = sub_1B22296AC();
      if (v28)
      {
LABEL_13:
        for (i = 0; i != v28; ++i)
        {
          if ((v27 & 0xC000000000000001) != 0)
            MEMORY[0x1B5E21018](i, v27);
          else
            swift_retain();
          sub_1B1BE1460();
          swift_release();
        }
      }
    }
    else
    {
      v28 = *(_QWORD *)((v27 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v28)
        goto LABEL_13;
    }
    swift_bridgeObjectRelease_n();
    v30 = sub_1B1BE1160(v9, v16);
    v31 = v30;
    if ((~v30 & 0xF000000000000007) != 0)
      v32 = v30;
    else
      v32 = 0x8000000000000060;
    (*(void (**)(_QWORD *__return_ptr))(**(_QWORD **)(v9 + v46) + 152))(v51);
    v33 = v52;
    v57 = v51[0];
    v58 = v52;
    swift_bridgeObjectRetain();
    sub_1B1B28C6C((uint64_t)&v57);
    v56 = v51[1];
    sub_1B1B28C6C((uint64_t)&v56);
    v55 = v51[2];
    sub_1B1B28C6C((uint64_t)&v55);
    v54 = v51[3];
    sub_1B1B28C6C((uint64_t)&v54);
    v53 = v51[4];
    sub_1B1B28C6C((uint64_t)&v53);
    sub_1B1B28C6C((uint64_t)&v58);
    if (v16 >= *(_QWORD *)(v33 + 16))
      memset(v48, 0, sizeof(v48));
    else
      sub_1B1A02828((unint64_t *)(v33 + 40 * v16 + 32), v48);
    sub_1B1B28C6C((uint64_t)&v58);
    v34 = sub_1B1C256D8(v32, (uint64_t)v48);
    v3 = v47;
    if (v34)
    {
      v35 = (uint64_t)v34;
      v36 = sub_1B222826C();
      v37 = (uint64_t)v45;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 56))(v45, 1, 1, v36);
      type metadata accessor for AuthoringNode();
      swift_allocObject();
      v38 = sub_1B20E4E94(v35, MEMORY[0x1E0DEE9D8], v37, 0, 0xF000000000000000);
      v17 = v43;
      v39 = *(_QWORD **)(v9 + v43);
      swift_retain();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)(v9 + v17) = v39;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        v39 = sub_1B1FFEED4(v39);
        *(_QWORD *)(v9 + v17) = v39;
      }
      v41 = &v39[2 * v16];
      v41[4] = v38;
      v41[5] = 0;
      swift_release();
      sub_1B1BCBFE4(v31);
      swift_release();
      swift_release();
      sub_1B1C25B6C((uint64_t)v48);
      v15 = v44;
    }
    else
    {
      sub_1B1C25B6C((uint64_t)v48);
      sub_1B1BCBFE4(v31);
      v15 = v44;
      v17 = v43;
    }
    goto LABEL_8;
  }
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  __break(1u);
  return result;
}

uint64_t sub_1B1C24B40()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[12];
  _BYTE v14[16];
  uint64_t (*v15)(uint64_t *);
  char *v16;
  char v17;
  uint64_t *v18;
  uint64_t *v19;
  _QWORD v20[2];
  uint64_t v21;
  uint64_t v22;

  v21 = MEMORY[0x1E0DEE9E8];
  v22 = MEMORY[0x1E0DEE9E8];
  v18 = &v22;
  v19 = &v21;
  v15 = sub_1B1C25500;
  v16 = &v17;
  v1 = MEMORY[0x1E0DEE9D8];
  v20[0] = sub_1B1C6D068(MEMORY[0x1E0DEE9D8]);
  v20[1] = v2;
  sub_1B1C5C9C4((uint64_t)sub_1B1C25CE0, (uint64_t)v14, 1, 0x1000000000000000uLL, 0, v1, (uint64_t)v20);
  swift_bridgeObjectRelease();
  v3 = swift_bridgeObjectRelease();
  MEMORY[0x1E0C80A78](v3, v4);
  v13[10] = &v21;
  v13[11] = &v22;
  MEMORY[0x1E0C80A78](v5, v6);
  v13[6] = sub_1B1C25508;
  v13[7] = v7;
  MEMORY[0x1E0C80A78](v8, v9);
  v13[2] = sub_1B1C25510;
  v13[3] = v10;
  sub_1B1C5A714((uint64_t)sub_1B1C25548, (uint64_t)v13, 0, 0x1000000000000000uLL, 0, MEMORY[0x1E0DEE9D8]);
  v11 = sub_1B1C6A11C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + 24) = v11;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B1C24CE4(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t, uint64_t);
  char *v21;
  void (*v22)(uint64_t, uint64_t);
  __objc2_class **v23;
  __objc2_class *v24;
  char *v25;
  uint64_t v26;
  _QWORD v27[2];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;

  v6 = sub_1B222826C();
  v33 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v7);
  v35 = (char *)v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9, v10);
  v34 = (uint64_t)v27 - v11;
  v32 = *a1;
  result = *(_QWORD *)(v32 + OBJC_IVAR____TtC3VFX13AuthoringNode_inputs);
  v13 = *(_QWORD *)(result + 16);
  if (v13)
  {
    v27[1] = a3;
    v31 = OBJC_IVAR____TtC3VFX13AuthoringNode_raw;
    v14 = swift_bridgeObjectRetain();
    v15 = 32;
    v28 = v6;
    v29 = a2;
    v30 = v14;
    v16 = v34;
    do
    {
      v17 = *(_QWORD *)(v14 + v15);
      if (v17)
      {
        v18 = v17 + OBJC_IVAR____TtC3VFX13AuthoringNode_authoringID;
        v19 = v33;
        v20 = *(void (**)(char *, uint64_t, uint64_t))(v33 + 16);
        v21 = v35;
        v20(v35, v17 + OBJC_IVAR____TtC3VFX13AuthoringNode_authoringID, v6);
        swift_retain();
        sub_1B1B8C018(v16, v21);
        v22 = *(void (**)(uint64_t, uint64_t))(v19 + 8);
        v22(v16, v6);
        v23 = *(__objc2_class ***)(v32 + v31);
        type metadata accessor for ImplicitNilNode(0);
        if (swift_dynamicCastClass())
        {
          swift_release();
        }
        else
        {
          v24 = *v23;
          if (*v23 == _TtC3VFX20ImplicitConstantNode
            || (type metadata accessor for ImplicitEnumConstantNode(0), swift_dynamicCastClass())
            || (type metadata accessor for ImplicitStateNode(0), swift_dynamicCastClass())
            || v24 == _TtC3VFX19ImplicitComposeNode
            || v24 == _TtC3VFX21ImplicitDecomposeNode
            || (type metadata accessor for ImplicitPartialComposeNode(0), swift_dynamicCastClass())
            || (type metadata accessor for ImplicitEntityAssetNode(0), swift_dynamicCastClass())
            || (type metadata accessor for ImplicitWorldReferenceNode(0), swift_dynamicCastClass())
            || v24 == _TtC3VFX24InspectorSetECSValueNode
            || (type metadata accessor for InspectorSetWorldValueNode(0), swift_dynamicCastClass()))
          {
            swift_release();
            v6 = v28;
          }
          else
          {
            v25 = v35;
            v6 = v28;
            v20(v35, v18, v28);
            v26 = v34;
            sub_1B1B8C018(v34, v25);
            swift_release();
            v22(v26, v6);
          }
        }
        v14 = v30;
      }
      v15 += 16;
      --v13;
    }
    while (v13);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1B1C24F90(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  __objc2_class **v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t, uint64_t);
  char v16;
  uint64_t (*v17)(char *, uint64_t);
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __objc2_class **v29;
  __objc2_class *v30;
  BOOL v31;
  __objc2_class *v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  void (*v48)(char *, uint64_t);
  uint64_t *v49;
  uint64_t v50;
  void (*v51)(char *, uint64_t, uint64_t);
  _QWORD v52[6];
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;

  v6 = sub_1B222826C();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)&v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *a1;
  v12 = OBJC_IVAR____TtC3VFX13AuthoringNode_raw;
  v13 = *(__objc2_class ***)(*a1 + OBJC_IVAR____TtC3VFX13AuthoringNode_raw);
  type metadata accessor for ImplicitNilNode(0);
  if (!swift_dynamicCastClass())
  {
    v33 = *v13;
    if (*v13 != _TtC3VFX20ImplicitConstantNode)
    {
      type metadata accessor for ImplicitEnumConstantNode(0);
      if (!swift_dynamicCastClass())
      {
        type metadata accessor for ImplicitStateNode(0);
        v34 = swift_dynamicCastClass();
        v35 = v33 == _TtC3VFX21ImplicitDecomposeNode || v33 == _TtC3VFX19ImplicitComposeNode;
        if (!v35 && v34 == 0)
        {
          type metadata accessor for ImplicitPartialComposeNode(0);
          if (!swift_dynamicCastClass())
          {
            type metadata accessor for ImplicitEntityAssetNode(0);
            if (!swift_dynamicCastClass())
            {
              type metadata accessor for ImplicitWorldReferenceNode(0);
              v37 = swift_dynamicCastClass();
              if (v33 != _TtC3VFX24InspectorSetECSValueNode && v37 == 0)
              {
                type metadata accessor for InspectorSetWorldValueNode(0);
                if (!swift_dynamicCastClass())
                  return 1;
              }
            }
          }
        }
      }
    }
  }
  v49 = a3;
  v14 = *a2;
  v15 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  v50 = v11 + OBJC_IVAR____TtC3VFX13AuthoringNode_authoringID;
  v51 = v15;
  ((void (*)(char *))v15)(v10);
  swift_bridgeObjectRetain();
  v16 = sub_1B1B0F8E0((uint64_t)v10, v14);
  swift_bridgeObjectRelease();
  v17 = *(uint64_t (**)(char *, uint64_t))(v7 + 8);
  v18 = v17(v10, v6);
  if ((v16 & 1) != 0)
    return 1;
  (*(void (**)(_QWORD *__return_ptr, uint64_t))(**(_QWORD **)(v11 + v12) + 152))(v52, v18);
  v20 = v52[0];
  v69 = v52[1];
  v70 = v52[0];
  sub_1B1B28C6C((uint64_t)&v69);
  v68 = v52[2];
  sub_1B1B28C6C((uint64_t)&v68);
  v67 = v52[3];
  sub_1B1B28C6C((uint64_t)&v67);
  v66 = v52[4];
  sub_1B1B28C6C((uint64_t)&v66);
  v65 = v52[5];
  sub_1B1B28C6C((uint64_t)&v65);
  v21 = *(_QWORD *)(v20 + 16);
  v22 = sub_1B1B28C6C((uint64_t)&v70);
  if (!v21)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(**(_QWORD **)(v11 + v12) + 152))(&v53, v22);
    v43 = v54;
    v63 = v53;
    v64 = v54;
    sub_1B1B28C6C((uint64_t)&v63);
    v62 = v55;
    sub_1B1B28C6C((uint64_t)&v62);
    v61 = v56;
    sub_1B1B28C6C((uint64_t)&v61);
    v60 = v57;
    sub_1B1B28C6C((uint64_t)&v60);
    v59 = v58;
    sub_1B1B28C6C((uint64_t)&v59);
    v44 = *(_QWORD *)(v43 + 16);
    sub_1B1B28C6C((uint64_t)&v64);
    if (v44)
    {
      v45 = *a2;
      v51(v10, v50, v6);
      swift_bridgeObjectRetain();
      v46 = sub_1B1B0F8E0((uint64_t)v10, v45);
      swift_bridgeObjectRelease();
      v17(v10, v6);
      if ((v46 & 1) == 0)
        return 0;
    }
    return 1;
  }
  v48 = (void (*)(char *, uint64_t))v17;
  v23 = *(_QWORD *)(v11 + OBJC_IVAR____TtC3VFX13AuthoringNode_inputs);
  v24 = *(_QWORD *)(v23 + 16);
  if (v24)
  {
    v25 = (uint64_t *)(v23 + 32);
    v26 = OBJC_IVAR____TtC3VFX13AuthoringNode_raw;
    do
    {
      v28 = *v25;
      v25 += 2;
      v27 = v28;
      if (v28)
      {
        v29 = *(__objc2_class ***)(v27 + v26);
        type metadata accessor for ImplicitPartialComposeNode(0);
        if (swift_dynamicCastClass())
          return 1;
        v22 = swift_dynamicCastClass();
        if (!v22)
        {
          v30 = *v29;
          if (*v29 != _TtC3VFX20ImplicitConstantNode)
          {
            type metadata accessor for ImplicitEnumConstantNode(0);
            v22 = swift_dynamicCastClass();
            if (!v22)
            {
              type metadata accessor for ImplicitStateNode(0);
              v22 = swift_dynamicCastClass();
              v31 = v30 == _TtC3VFX21ImplicitDecomposeNode
                 || v30 == _TtC3VFX19ImplicitComposeNode;
              if (!v31 && v22 == 0)
              {
                type metadata accessor for ImplicitEntityAssetNode(0);
                v22 = swift_dynamicCastClass();
                if (!v22)
                {
                  type metadata accessor for ImplicitWorldReferenceNode(0);
                  v22 = swift_dynamicCastClass();
                  if (v30 != _TtC3VFX24InspectorSetECSValueNode && !v22)
                  {
                    type metadata accessor for InspectorSetWorldValueNode(0);
                    v22 = swift_dynamicCastClass();
                    if (!v22)
                      return 1;
                  }
                }
              }
            }
          }
        }
      }
    }
    while (--v24);
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(**(_QWORD **)(v11 + v12) + 152))(&v53, v22);
  v39 = v54;
  v63 = v53;
  v64 = v54;
  sub_1B1B28C6C((uint64_t)&v63);
  v62 = v55;
  sub_1B1B28C6C((uint64_t)&v62);
  v61 = v56;
  sub_1B1B28C6C((uint64_t)&v61);
  v60 = v57;
  sub_1B1B28C6C((uint64_t)&v60);
  v59 = v58;
  sub_1B1B28C6C((uint64_t)&v59);
  v40 = *(_QWORD *)(v39 + 16);
  sub_1B1B28C6C((uint64_t)&v64);
  if (v40)
  {
    v41 = *v49;
    v51(v10, v50, v6);
    swift_bridgeObjectRetain();
    v42 = sub_1B1B0F8E0((uint64_t)v10, v41);
    swift_bridgeObjectRelease();
    v48(v10, v6);
    if ((v42 & 1) != 0)
      return 1;
  }
  return 0;
}

uint64_t sub_1B1C254C8(uint64_t *a1)
{
  uint64_t v1;

  return sub_1B2148168(a1, v1);
}

uint64_t sub_1B1C254D0(uint64_t a1)
{
  uint64_t v1;

  return sub_1B1BE2068(a1, *(uint64_t (**)(uint64_t *))(v1 + 16));
}

uint64_t sub_1B1C254E8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1B1C2457C(a1, a2);
}

uint64_t sub_1B1C25500(uint64_t *a1)
{
  uint64_t v1;

  return sub_1B1C24CE4(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_1B1C25508(uint64_t *a1)
{
  uint64_t v1;

  return sub_1B1C24F90(a1, *(uint64_t **)(v1 + 16), *(uint64_t **)(v1 + 24));
}

uint64_t sub_1B1C25510(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t *);
  uint64_t v4;

  v2 = *(uint64_t (**)(uint64_t *))(v1 + 16);
  v4 = *(_QWORD *)(a1 + 8);
  return v2(&v4) & 1;
}

uint64_t sub_1B1C25548@<X0>(_OWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v5)(_OWORD *);
  __int128 v6;
  uint64_t result;
  _OWORD v8[3];

  v5 = *(uint64_t (**)(_OWORD *))(v2 + 16);
  v6 = a1[1];
  v8[0] = *a1;
  v8[1] = v6;
  v8[2] = a1[2];
  result = sub_1B1C2430C((uint64_t)v8, v5);
  if (!v3)
    *a2 = result;
  return result;
}

uint64_t sub_1B1C25590(uint64_t *a1)
{
  uint64_t v1;

  return sub_1B203AB78(a1, *(_QWORD *)(v1 + 16), *(uint64_t **)(v1 + 24));
}

uint64_t sub_1B1C25598(unint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  uint64_t v10;

  v10 = MEMORY[0x1E0DEE9D8];
  if (a1 >> 62)
  {
    v4 = sub_1B22296AC();
    if (v4)
      goto LABEL_3;
  }
  else
  {
    v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v4)
    {
LABEL_3:
      v5 = 0;
      while (1)
      {
        if ((a1 & 0xC000000000000001) != 0)
        {
          v6 = MEMORY[0x1B5E21018](v5, a1);
          if (!*(_QWORD *)(a2 + 16))
            goto LABEL_4;
        }
        else
        {
          v6 = *(_QWORD *)(a1 + 8 * v5 + 32);
          swift_retain();
          if (!*(_QWORD *)(a2 + 16))
            goto LABEL_4;
        }
        v7 = sub_1B1DC3AC8(v6);
        if ((v8 & 1) != 0 && *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * v7) + 16))
        {
          swift_release();
          goto LABEL_5;
        }
LABEL_4:
        sub_1B2229520();
        sub_1B2229568();
        sub_1B2229574();
        sub_1B2229538();
LABEL_5:
        if (v4 == ++v5)
          return v10;
      }
    }
  }
  return MEMORY[0x1E0DEE9D8];
}

_QWORD *sub_1B1C256D8(unint64_t a1, uint64_t a2)
{
  char v4;
  char v5;
  char v6;
  char v7;
  char v8;
  char v9;
  char v10;
  _QWORD *v11;
  unint64_t v12;
  char v13;
  char v14;
  char v15;
  char v16;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v23;
  __int128 v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD v28[5];
  __int128 v29[2];
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE v34[32];
  unint64_t v35[5];
  _BYTE v36[32];
  uint64_t v37;

  sub_1B1D76C18(a1);
  if ((v4 & 1) == 0)
  {
    sub_1B1D76C18(a1);
    if ((v5 & 1) == 0)
    {
      sub_1B1D76C18(a1);
      if ((v6 & 1) == 0)
      {
        sub_1B1D76C18(a1);
        if ((v7 & 1) == 0)
        {
          sub_1B1D76C18(a1);
          if ((v8 & 1) == 0)
          {
            sub_1B1D76C18(a1);
            if ((v9 & 1) == 0)
            {
              sub_1B1D76C18(a1);
              if ((v10 & 1) == 0)
              {
                v11 = 0;
                v12 = a1 >> 60;
                if ((a1 >> 60) > 8)
                  return v11;
                if (((1 << v12) & 0x35) == 0)
                {
                  if ((_DWORD)v12 == 1)
                  {
                    v25 = *(_QWORD *)(a1 + 24);
                    v26 = v25 >> 60;
                    if (v25 >> 60 == 1
                      || (_DWORD)v26 == 8
                      && (v27 = v25 + 0x7FFFFFFFFFFFFFD0, v27 <= 0x10)
                      && ((1 << v27) & 0x10101) != 0)
                    {
                      if (v26 != 1)
                        return 0;
                    }
                  }
                  else
                  {
                    if ((_DWORD)v12 != 8)
                      return v11;
                    v11 = 0;
                    *((_QWORD *)&v24 + 1) = a1;
                    *(_QWORD *)&v24 = a1 + 0x7FFFFFFFFFFFFFD0;
                    v23 = v24 >> 3;
                    if (v23 > 5 || v23 == 3)
                      return v11;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  sub_1B1C25BFC(a2, (uint64_t)v36);
  if (!v37)
  {
LABEL_28:
    sub_1B1C25B6C((uint64_t)v36);
    sub_1B214F924(1, a1);
    return (_QWORD *)v21;
  }
  sub_1B1C25BFC((uint64_t)v36, (uint64_t)v35);
  sub_1B1D76C18(v35[0]);
  v14 = v13;
  sub_1B1A02828(v35, (unint64_t *)&v33);
  if ((v14 & 1) != 0)
  {
    sub_1B1A02864((uint64_t)v34, (uint64_t)&v31);
    sub_1B1A028A0((unint64_t *)&v33);
    if (swift_dynamicCast() && *(_QWORD *)&v29[0] == 1)
    {
      sub_1B1A028A0(v35);
      sub_1B1C25B6C((uint64_t)v36);
      return 0;
    }
  }
  else
  {
    sub_1B1A028A0((unint64_t *)&v33);
  }
  sub_1B1A02828(v35, (unint64_t *)&v33);
  sub_1B1D76C18(v33);
  v16 = v15;
  sub_1B1A02828((unint64_t *)&v33, &v31);
  if ((v16 & 1) != 0)
  {
    sub_1B1A02864((uint64_t)&v32, (uint64_t)v29);
    sub_1B1A028A0(&v31);
    if (swift_dynamicCast() && !v28[0])
    {
      sub_1B1A028A0((unint64_t *)&v33);
      sub_1B1D76C18(v35[0]);
      v18 = v17;
      sub_1B1A02828(v35, (unint64_t *)&v33);
      if ((v18 & 1) != 0)
      {
        sub_1B1A02864((uint64_t)v34, (uint64_t)&v31);
        sub_1B1A028A0((unint64_t *)&v33);
        swift_dynamicCast();
      }
      else
      {
        sub_1B1A028A0((unint64_t *)&v33);
      }
      sub_1B1A028A0(v35);
      goto LABEL_28;
    }
  }
  else
  {
    sub_1B1A028A0(&v31);
  }
  sub_1B1A02864((uint64_t)v34, (uint64_t)v28);
  sub_1B1C25C40();
  if (swift_dynamicCast())
  {
    sub_1B1A02518(v29, (uint64_t)&v31);
    sub_1B19FA198((uint64_t)&v31, (uint64_t)v29);
    type metadata accessor for ImplicitEnumConstantNode(0);
    v11 = (_QWORD *)swift_allocObject();
    sub_1B19FA198((uint64_t)v29, (uint64_t)v28);
    sub_1B19FA198((uint64_t)v28, (uint64_t)v11 + OBJC_IVAR____TtC3VFX16EnumConstantNode_value);
    v19 = MEMORY[0x1E0DEE9D8];
    v11[3] = 0;
    v11[4] = 0;
    v11[2] = v19;
    sub_1B2228260();
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v28);
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v29);
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v31);
  }
  else
  {
    v30 = 0;
    memset(v29, 0, sizeof(v29));
    sub_1B1C25C94((uint64_t)v29);
    sub_1B1A02828((unint64_t *)&v33, &v31);
    type metadata accessor for ImplicitConstantNode(0);
    v11 = (_QWORD *)swift_allocObject();
    sub_1B1A02828(&v31, (unint64_t *)v29);
    v20 = OBJC_IVAR____TtC3VFX12ConstantNode_semantic;
    sub_1B1A02828((unint64_t *)v29, (_QWORD *)((char *)v11 + OBJC_IVAR____TtC3VFX12ConstantNode_holder));
    *(_OWORD *)((char *)v11 + v20) = xmmword_1B2246910;
    v11[2] = MEMORY[0x1E0DEE9D8];
    v11[3] = 0;
    v11[4] = 0;
    sub_1B2228260();
    sub_1B1A028A0((unint64_t *)v29);
    sub_1B1A028A0(&v31);
  }
  sub_1B1A028A0((unint64_t *)&v33);
  sub_1B1A028A0(v35);
  sub_1B1C25B6C((uint64_t)v36);
  return v11;
}

uint64_t sub_1B1C25B6C(uint64_t a1)
{
  uint64_t v2;

  sub_1B1C25BA8();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_1B1C25BA8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5C6B8)
  {
    v0 = sub_1B2229124();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5C6B8);
  }
}

uint64_t sub_1B1C25BFC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1B1C25BA8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_1B1C25C40()
{
  unint64_t result;

  result = qword_1EEF5C6C0;
  if (!qword_1EEF5C6C0)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&qword_1EEF5C6C0);
  }
  return result;
}

uint64_t sub_1B1C25C94(uint64_t a1)
{
  uint64_t v2;

  sub_1B1792854(0, &qword_1EEF5C6C8, (void (*)(uint64_t))sub_1B1C25C40);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1B1C25CE0(uint64_t a1)
{
  return sub_1B1C254D0(a1);
}

void sub_1B1C25CF4()
{
  sub_1B2229688();
  __break(1u);
}

uint64_t sub_1B1C25D44()
{
  return type metadata accessor for GraphicsNode(0);
}

uint64_t type metadata accessor for GraphicsNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF5C6D0);
}

uint64_t sub_1B1C25D60()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 240))();
}

uint64_t sub_1B1C25D6C(char a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)v1 + 248))(a1 & 1);
}

uint64_t sub_1B1C25D7C()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 256))();
}

uint64_t sub_1B1C25D88@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  sub_1B1C27668(0, (unint64_t *)&qword_1EEF5CB90);
  v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_1B226CD10;
  *(_QWORD *)(v2 + 32) = 0x8000000000000038;
  v3 = swift_allocObject();
  *(_QWORD *)(v3 + 16) = 0x8000000000000050;
  *(_QWORD *)(v2 + 40) = v3 | 0x6000000000000000;
  v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1B226D240;
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = 0x8000000000000050;
  *(_QWORD *)(v4 + 32) = result | 0x6000000000000000;
  *a1 = v2;
  a1[1] = v4;
  a1[2] = (uint64_t)&unk_1E638BFD8;
  a1[3] = (uint64_t)&unk_1E638BF98;
  v6 = MEMORY[0x1E0DEE9D8];
  a1[4] = MEMORY[0x1E0DEE9D8];
  a1[5] = v6;
  return result;
}

uint64_t sub_1B1C25E80()
{
  return 0x657461756C617645;
}

unint64_t sub_1B1C25EA4(char a1)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char v6;

  v3 = 0xD000000000000021;
  v4 = *(_QWORD *)(v1 + 24);
  v5 = *(_QWORD *)(v4 + 32);
  sub_1B1BCCD2C(v4);
  sub_1B1B632F0(v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B1D76C18(v5);
  if ((v6 & 1) != 0)
  {
    sub_1B1B28D2C(v5);
    if ((a1 & 1) != 0)
      return 0xD000000000000023;
    else
      return 0xD000000000000025;
  }
  else
  {
    sub_1B1B28D2C(v5);
  }
  return v3;
}

uint64_t sub_1B1C25F78()
{
  return type metadata accessor for EvaluateCurveNode(0);
}

uint64_t type metadata accessor for EvaluateCurveNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF5C6E0);
}

double sub_1B1C25F98@<D0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double result;
  uint64_t v8;

  sub_1B1C27668(0, (unint64_t *)&qword_1EEF5CB90);
  v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_1B226CD10;
  *(_QWORD *)(v2 + 32) = 0x8000000000000040;
  v3 = swift_allocObject();
  *(_QWORD *)(v3 + 16) = 0x8000000000000050;
  *(_QWORD *)(v2 + 40) = v3 | 0x6000000000000000;
  v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1B226D240;
  v5 = swift_allocObject();
  v6 = swift_allocObject();
  *(_QWORD *)&result = 4;
  *(_OWORD *)(v6 + 16) = xmmword_1B22847C0;
  *(_QWORD *)(v5 + 16) = v6 | 0x1000000000000000;
  *(_QWORD *)(v4 + 32) = v5 | 0x6000000000000000;
  *a1 = v2;
  a1[1] = v4;
  a1[2] = (uint64_t)&unk_1E63A03C8;
  a1[3] = (uint64_t)&unk_1E63A0388;
  v8 = MEMORY[0x1E0DEE9D8];
  a1[4] = MEMORY[0x1E0DEE9D8];
  a1[5] = v8;
  return result;
}

unint64_t sub_1B1C260B8()
{
  return 0xD000000000000012;
}

unint64_t sub_1B1C260D4(char a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  char v5;

  v3 = *(_QWORD *)(v1 + 24);
  v4 = *(_QWORD *)(v3 + 32);
  sub_1B1BCCD2C(v3);
  sub_1B1B632F0(v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B1D76C18(v4);
  if ((v5 & 1) != 0)
  {
    sub_1B1B28D2C(v4);
    if ((a1 & 1) != 0)
      return 0xD000000000000021;
    else
      return 0xD000000000000023;
  }
  else
  {
    sub_1B1B28D2C(v4);
    return 0xD000000000000026;
  }
}

uint64_t sub_1B1C261A0()
{
  return type metadata accessor for EvaluateColorRampNode(0);
}

uint64_t type metadata accessor for EvaluateColorRampNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF5C6F0);
}

uint64_t sub_1B1C261BC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  sub_1B1C27668(0, (unint64_t *)&qword_1EEF5CB90);
  v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_1B226E100;
  v3 = swift_allocObject();
  *(_QWORD *)(v3 + 16) = 0x8000000000000070;
  *(_QWORD *)(v2 + 32) = v3 | 0x6000000000000000;
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = 0x8000000000000050;
  *(_QWORD *)(v2 + 40) = v4 | 0x6000000000000000;
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = 0x8000000000000038;
  *(_QWORD *)(v2 + 48) = v5 | 0x6000000000000000;
  v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_1B226D240;
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = 0x8000000000000070;
  *(_QWORD *)(v6 + 32) = result | 0x6000000000000000;
  *a1 = v2;
  a1[1] = v6;
  a1[2] = (uint64_t)&unk_1E6377240;
  a1[3] = (uint64_t)&unk_1E63771F0;
  v8 = MEMORY[0x1E0DEE9D8];
  a1[4] = MEMORY[0x1E0DEE9D8];
  a1[5] = v8;
  return result;
}

unint64_t sub_1B1C262EC()
{
  return 0xD0000000000000A1;
}

uint64_t sub_1B1C26308()
{
  return type metadata accessor for SetColorNode(0);
}

uint64_t type metadata accessor for SetColorNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF5C700);
}

double sub_1B1C26324@<D0>(uint64_t *a1@<X8>)
{
  double result;

  *(_QWORD *)&result = sub_1B1C26388((uint64_t)&unk_1E6380510, a1, (__n128)xmmword_1B22847C0).n128_u64[0];
  return result;
}

uint64_t sub_1B1C26338()
{
  return 0x206F742041424752;
}

uint64_t sub_1B1C26358()
{
  return type metadata accessor for RGBAToHSBANode(0);
}

uint64_t type metadata accessor for RGBAToHSBANode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF5C710);
}

double sub_1B1C26374@<D0>(uint64_t *a1@<X8>)
{
  double result;

  *(_QWORD *)&result = sub_1B1C26388((uint64_t)&unk_1E63764A0, a1, (__n128)xmmword_1B22847D0).n128_u64[0];
  return result;
}

__n128 sub_1B1C26388@<Q0>(uint64_t a1@<X0>, uint64_t *a2@<X8>, __n128 a3@<Q0>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __n128 result;
  uint64_t v12;

  sub_1B1C27668(0, (unint64_t *)&qword_1EEF5CB90);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1B226D240;
  v6 = swift_allocObject();
  v7 = swift_allocObject();
  *(__n128 *)(v7 + 16) = a3;
  *(_QWORD *)(v6 + 16) = v7 | 0x1000000000000000;
  *(_QWORD *)(v5 + 32) = v6 | 0x6000000000000000;
  v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_1B226D240;
  v9 = swift_allocObject();
  v10 = swift_allocObject();
  result = a3;
  *(__n128 *)(v10 + 16) = a3;
  *(_QWORD *)(v9 + 16) = v10 | 0x1000000000000000;
  *(_QWORD *)(v8 + 32) = v9 | 0x6000000000000000;
  *a2 = v5;
  a2[1] = v8;
  v12 = MEMORY[0x1E0DEE9D8];
  a2[2] = a1;
  a2[3] = v12;
  a2[4] = v12;
  a2[5] = v12;
  return result;
}

uint64_t sub_1B1C264C0()
{
  return 0x48206F7420424752;
}

unint64_t sub_1B1C264DC()
{
  return 0xD000000000000012;
}

uint64_t sub_1B1C264F8()
{
  return type metadata accessor for RGBToHSBNode(0);
}

uint64_t type metadata accessor for RGBToHSBNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF5C720);
}

double sub_1B1C26514@<D0>(uint64_t *a1@<X8>)
{
  double result;

  *(_QWORD *)&result = sub_1B1C26388((uint64_t)&unk_1E637F850, a1, (__n128)xmmword_1B22847C0).n128_u64[0];
  return result;
}

uint64_t sub_1B1C26528()
{
  return 0x206F742041425348;
}

uint64_t sub_1B1C26548()
{
  return type metadata accessor for HSBAToRGBANode(0);
}

uint64_t type metadata accessor for HSBAToRGBANode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF5C730);
}

double sub_1B1C26564@<D0>(uint64_t *a1@<X8>)
{
  double result;

  *(_QWORD *)&result = sub_1B1C26388((uint64_t)&unk_1E63758C0, a1, (__n128)xmmword_1B22847D0).n128_u64[0];
  return result;
}

uint64_t sub_1B1C26578()
{
  return 0x52206F7420425348;
}

unint64_t sub_1B1C26594()
{
  return 0xD000000000000012;
}

uint64_t sub_1B1C265B0()
{
  return type metadata accessor for HSBToRGBNode(0);
}

uint64_t type metadata accessor for HSBToRGBNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF5C740);
}

double sub_1B1C265CC@<D0>(uint64_t *a1@<X8>)
{
  double result;

  *(_QWORD *)&result = sub_1B1C26388((uint64_t)&unk_1E6390868, a1, (__n128)xmmword_1B22847C0).n128_u64[0];
  return result;
}

uint64_t sub_1B1C265E0()
{
  return 0x6F74204142475273;
}

unint64_t sub_1B1C26604()
{
  return 0xD00000000000003ALL;
}

uint64_t sub_1B1C26620()
{
  return type metadata accessor for sRGBAToLinearNode(0);
}

uint64_t type metadata accessor for sRGBAToLinearNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF5C750);
}

double sub_1B1C2663C@<D0>(uint64_t *a1@<X8>)
{
  double result;

  *(_QWORD *)&result = sub_1B1C26388((uint64_t)&unk_1E638B618, a1, (__n128)xmmword_1B22847D0).n128_u64[0];
  return result;
}

uint64_t sub_1B1C26650()
{
  return 0x206F742042475273;
}

unint64_t sub_1B1C26674()
{
  return 0xD000000000000016;
}

uint64_t sub_1B1C26690()
{
  return type metadata accessor for sRGBToLinearNode(0);
}

uint64_t type metadata accessor for sRGBToLinearNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF5C760);
}

double sub_1B1C266AC@<D0>(uint64_t *a1@<X8>)
{
  double result;

  *(_QWORD *)&result = sub_1B1C26388((uint64_t)&unk_1E638CF98, a1, (__n128)xmmword_1B22847C0).n128_u64[0];
  return result;
}

uint64_t sub_1B1C266C0()
{
  return 0x74207261656E694CLL;
}

unint64_t sub_1B1C266E4()
{
  return 0xD00000000000003ALL;
}

uint64_t sub_1B1C26700()
{
  return type metadata accessor for LinearTosRGBANode(0);
}

uint64_t type metadata accessor for LinearTosRGBANode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF5C770);
}

double sub_1B1C2671C@<D0>(uint64_t *a1@<X8>)
{
  double result;

  *(_QWORD *)&result = sub_1B1C26388((uint64_t)&unk_1E6387F18, a1, (__n128)xmmword_1B22847D0).n128_u64[0];
  return result;
}

unint64_t sub_1B1C26730()
{
  return 0xD000000000000016;
}

uint64_t sub_1B1C2674C()
{
  return type metadata accessor for LinearTosRGBNode(0);
}

uint64_t type metadata accessor for LinearTosRGBNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF5C780);
}

double sub_1B1C26768@<D0>(uint64_t *a1@<X8>)
{
  double result;

  *(_QWORD *)&result = sub_1B1C26388((uint64_t)&unk_1E63A7638, a1, (__n128)xmmword_1B22847C0).n128_u64[0];
  return result;
}

unint64_t sub_1B1C2677C()
{
  return 0xD000000000000013;
}

unint64_t sub_1B1C26798()
{
  return 0xD000000000000024;
}

uint64_t sub_1B1C267B4()
{
  return type metadata accessor for AlphaPremultipliedNode(0);
}

uint64_t type metadata accessor for AlphaPremultipliedNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF5C790);
}

uint64_t sub_1B1C267D0()
{
  return swift_updateClassMetadata2();
}

uint64_t sub_1B1C26804()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t result;

  v1 = *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC3VFX11SamplerNode_textureType);
  if (v1 < 3)
    return (v1 << 56) + 0x3165727574786554;
  result = sub_1B2229688();
  __break(1u);
  return result;
}

uint64_t sub_1B1C2689C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t DynamicType;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  _QWORD v18[3];
  ValueMetadata *v19;

  sub_1B1C27668(0, (unint64_t *)&qword_1EEF5CB90);
  v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_1B226E100;
  v4 = swift_allocObject();
  v5 = swift_allocObject();
  *(_BYTE *)(v5 + 16) = 0;
  *(_QWORD *)(v4 + 16) = v5 | 0x4000000000000000;
  *(_QWORD *)(v3 + 32) = v4 | 0x6000000000000000;
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = 0x8000000000000020;
  *(_QWORD *)(v3 + 40) = v6 | 0x6000000000000000;
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = 0x8000000000000020;
  *(_QWORD *)(v3 + 48) = v7 | 0x6000000000000000;
  sub_1B1C27668(0, (unint64_t *)&unk_1EEF5C7D0);
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 64) = MEMORY[0x1E0DEB418];
  *(_OWORD *)(v8 + 16) = xmmword_1B226E100;
  *(_OWORD *)(v8 + 32) = xmmword_1B22847E0;
  v19 = &type metadata for AddressMode;
  LOBYTE(v18[0]) = 2;
  sub_1B19FA070(v18, (uint64_t)&type metadata for AddressMode);
  DynamicType = swift_getDynamicType();
  v10 = sub_1B1D76F30(DynamicType);
  if ((~v10 & 0xF000000000000007) == 0)
    goto LABEL_4;
  v11 = v10;
  sub_1B1A02864((uint64_t)v18, v8 + 80);
  *(_QWORD *)(v8 + 72) = v11;
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v18);
  v19 = &type metadata for FilterMode;
  LOBYTE(v18[0]) = 1;
  sub_1B19FA070(v18, (uint64_t)&type metadata for FilterMode);
  v12 = swift_getDynamicType();
  v13 = sub_1B1D76F30(v12);
  if ((~v13 & 0xF000000000000007) != 0)
  {
    v14 = v13;
    sub_1B1A02864((uint64_t)v18, v8 + 120);
    *(_QWORD *)(v8 + 112) = v14;
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v18);
    v15 = swift_allocObject();
    *(_OWORD *)(v15 + 16) = xmmword_1B226D240;
    v16 = swift_allocObject();
    result = swift_allocObject();
    *(_BYTE *)(result + 16) = *(_BYTE *)(v1 + OBJC_IVAR____TtC3VFX11SamplerNode_textureType);
    *(_QWORD *)(v16 + 16) = result | 0x6000000000000000;
    *(_QWORD *)(v15 + 32) = v16 | 0x6000000000000000;
    *a1 = v3;
    a1[1] = v15;
    a1[2] = (uint64_t)&unk_1E6372860;
    a1[3] = (uint64_t)&unk_1E63727E0;
    a1[4] = (uint64_t)&unk_1E6372830;
    a1[5] = v8;
  }
  else
  {
LABEL_4:
    sub_1B2229430();
    swift_bridgeObjectRelease();
    sub_1B222A210();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    result = sub_1B2229688();
    __break(1u);
  }
  return result;
}

_QWORD *sub_1B1C26BB8(_QWORD *a1)
{
  return sub_1B1C27250(a1, &OBJC_IVAR____TtC3VFX11SamplerNode_textureType);
}

uint64_t sub_1B1C26BC4()
{
  return 0x306D6172617025;
}

uint64_t sub_1B1C26BDC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = v0;
  swift_retain();
  v2 = sub_1B2076640();
  swift_release();
  sub_1B1C27668(0, &qword_1ED4BAD88);
  v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_1B226D240;
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = v2;
  *(_QWORD *)(v4 + 24) = 0;
  *(_BYTE *)(v4 + 32) = 0;
  *(_BYTE *)(v4 + 33) = *(_BYTE *)(v1 + OBJC_IVAR____TtC3VFX11SamplerNode_textureType);
  *(_WORD *)(v4 + 34) = 258;
  *(_QWORD *)(v3 + 32) = v4 | 0x7000000000000000;
  *(_BYTE *)(v3 + 40) = 1;
  *(_QWORD *)(v3 + 48) = 0;
  *(_BYTE *)(v3 + 56) = 1;
  return v3;
}

void sub_1B1C26CA4()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t sub_1B1C26CD0()
{
  return type metadata accessor for SamplerNode(0);
}

uint64_t type metadata accessor for SamplerNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF5C7A0);
}

uint64_t sub_1B1C26CF0(_QWORD *a1)
{
  return sub_1B1C27468(a1);
}

uint64_t sub_1B1C26D0C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1B1C27500(a1, a2, a3, &OBJC_IVAR____TtC3VFX11SamplerNode_textureType);
}

uint64_t sub_1B1C26D28()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t result;

  v1 = *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC3VFX10SampleNode_textureType);
  if (v1 < 3)
    return (v1 << 48) + 0x4431656C706D6153;
  result = sub_1B2229688();
  __break(1u);
  return result;
}

uint64_t sub_1B1C26DBC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t DynamicType;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t result;
  _QWORD v26[3];
  uint64_t v27;

  sub_1B1C27668(0, (unint64_t *)&qword_1EEF5CB90);
  v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_1B227BE30;
  v4 = swift_allocObject();
  v5 = swift_allocObject();
  *(_BYTE *)(v5 + 16) = *(_BYTE *)(v1 + OBJC_IVAR____TtC3VFX10SampleNode_textureType);
  *(_QWORD *)(v4 + 16) = v5 | 0x6000000000000000;
  *(_QWORD *)(v3 + 32) = v4 | 0x6000000000000000;
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = sub_1B1C27180();
  *(_QWORD *)(v3 + 40) = v6 | 0x6000000000000000;
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = sub_1B1C27180();
  *(_QWORD *)(v3 + 48) = v7 | 0x6000000000000000;
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = sub_1B1C27180();
  *(_QWORD *)(v3 + 56) = v8 | 0x6000000000000000;
  v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_1B226D240;
  v10 = swift_allocObject();
  v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_1B22847C0;
  *(_QWORD *)(v10 + 16) = v11 | 0x1000000000000000;
  *(_QWORD *)(v9 + 32) = v10 | 0x6000000000000000;
  sub_1B1C27668(0, (unint64_t *)&unk_1EEF5C7D0);
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 64) = MEMORY[0x1E0DEB418];
  *(_OWORD *)(v12 + 16) = xmmword_1B227BE30;
  *(_OWORD *)(v12 + 32) = xmmword_1B22847F0;
  v13 = sub_1B1C27180();
  sub_1B1D750D8(v13, (uint64_t)v26, 0.5);
  sub_1B1B28D2C(v13);
  sub_1B19FA070(v26, v27);
  DynamicType = swift_getDynamicType();
  v15 = sub_1B1D76F30(DynamicType);
  if ((~v15 & 0xF000000000000007) == 0)
    goto LABEL_5;
  v16 = v15;
  sub_1B1A02864((uint64_t)v26, v12 + 80);
  *(_QWORD *)(v12 + 72) = v16;
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v26);
  v17 = sub_1B1C27180();
  sub_1B1D750D8(v17, (uint64_t)v26, 1.0);
  sub_1B1B28D2C(v17);
  sub_1B19FA070(v26, v27);
  v18 = swift_getDynamicType();
  v19 = sub_1B1D76F30(v18);
  if ((~v19 & 0xF000000000000007) == 0)
    goto LABEL_5;
  v20 = v19;
  sub_1B1A02864((uint64_t)v26, v12 + 120);
  *(_QWORD *)(v12 + 112) = v20;
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v26);
  v21 = sub_1B1C27180();
  sub_1B1D750D8(v21, (uint64_t)v26, 0.0);
  sub_1B1B28D2C(v21);
  sub_1B19FA070(v26, v27);
  v22 = swift_getDynamicType();
  v23 = sub_1B1D76F30(v22);
  if ((~v23 & 0xF000000000000007) != 0)
  {
    v24 = v23;
    sub_1B1A02864((uint64_t)v26, v12 + 160);
    *(_QWORD *)(v12 + 152) = v24;
    result = _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v26);
    *a1 = v3;
    a1[1] = v9;
    a1[2] = (uint64_t)&unk_1E636EEF0;
    a1[3] = (uint64_t)&unk_1E636EE60;
    a1[4] = (uint64_t)&unk_1E636EEC0;
    a1[5] = v12;
  }
  else
  {
LABEL_5:
    sub_1B2229430();
    swift_bridgeObjectRelease();
    sub_1B222A210();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    result = sub_1B2229688();
    __break(1u);
  }
  return result;
}

uint64_t sub_1B1C27180()
{
  uint64_t v0;
  unint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v1 = 0x8000000000000050;
  v2 = *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC3VFX10SampleNode_textureType);
  if (!*(_BYTE *)(v0 + OBJC_IVAR____TtC3VFX10SampleNode_textureType))
    return v1;
  if (v2 == 1)
  {
    v3 = 2;
LABEL_6:
    v4 = swift_allocObject();
    *(_QWORD *)(v4 + 16) = v3;
    *(_QWORD *)(v4 + 24) = 0x8000000000000050;
    return v4 | 0x1000000000000000;
  }
  if (v2 == 2)
  {
    v3 = 3;
    goto LABEL_6;
  }
  result = sub_1B2229688();
  __break(1u);
  return result;
}

_QWORD *sub_1B1C27244(_QWORD *a1)
{
  return sub_1B1C27250(a1, &OBJC_IVAR____TtC3VFX10SampleNode_textureType);
}

_QWORD *sub_1B1C27250(_QWORD *a1, _QWORD *a2)
{
  *(_BYTE *)(swift_allocObject() + *a2) = *((_BYTE *)a1 + *a2);
  return sub_1B1BCE388(a1);
}

uint64_t sub_1B1C272A0(char a1)
{
  uint64_t v1;
  int v2;
  uint64_t result;

  if ((a1 & 1) != 0)
    return 0xD000000000000035;
  v2 = *(unsigned __int8 *)(v1 + OBJC_IVAR____TtC3VFX10SampleNode_textureType);
  if (!*(_BYTE *)(v1 + OBJC_IVAR____TtC3VFX10SampleNode_textureType) || v2 == 2 || v2 == 1)
  {
    sub_1B2229430();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    return 0xD00000000000001BLL;
  }
  else
  {
    result = sub_1B2229688();
    __break(1u);
  }
  return result;
}

void sub_1B1C273C4()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t sub_1B1C273F0()
{
  return type metadata accessor for SampleNode(0);
}

uint64_t type metadata accessor for SampleNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF5C7B0);
}

uint64_t sub_1B1C2740C()
{
  return swift_updateClassMetadata2();
}

uint64_t sub_1B1C2744C(_QWORD *a1)
{
  return sub_1B1C27468(a1);
}

uint64_t sub_1B1C27468(_QWORD *a1)
{
  sub_1B19FA070(a1, a1[3]);
  sub_1B1C275CC();
  return sub_1B1FF5998();
}

uint64_t sub_1B1C274E4(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1B1C27500(a1, a2, a3, &OBJC_IVAR____TtC3VFX10SampleNode_textureType);
}

uint64_t sub_1B1C27500(_QWORD *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  char v8;

  sub_1B19FA070(a1, a1[3]);
  sub_1B1C27588();
  result = sub_1B1FF5A30();
  if (!v5)
    *(_BYTE *)(v4 + *a4) = v8;
  return result;
}

unint64_t sub_1B1C27588()
{
  unint64_t result;

  result = qword_1EEF5C7C0;
  if (!qword_1EEF5C7C0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2289124, &type metadata for ScriptLocation.TextureType);
    atomic_store(result, (unint64_t *)&qword_1EEF5C7C0);
  }
  return result;
}

unint64_t sub_1B1C275CC()
{
  unint64_t result;

  result = qword_1EEF5C7C8;
  if (!qword_1EEF5C7C8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22890FC, &type metadata for ScriptLocation.TextureType);
    atomic_store(result, (unint64_t *)&qword_1EEF5C7C8);
  }
  return result;
}

uint64_t sub_1B1C27610()
{
  uint64_t v0;

  sub_1B1B28D2C(*(_QWORD *)(v0 + 16));
  return swift_deallocObject();
}

uint64_t sub_1B1C27634()
{
  return swift_deallocObject();
}

uint64_t sub_1B1C27644()
{
  uint64_t v0;

  sub_1B1B28D2C(*(_QWORD *)(v0 + 24));
  return swift_deallocObject();
}

void sub_1B1C27668(uint64_t a1, unint64_t *a2)
{
  unint64_t v3;
  uint64_t v4;

  if (!*a2)
  {
    v3 = sub_1B2229A18();
    if (!v4)
      atomic_store(v3, a2);
  }
}

uint64_t sub_1B1C276AC()
{
  uint64_t v0;

  sub_1B1A05648(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_BYTE *)(v0 + 32));
  return swift_deallocObject();
}

id sub_1B1C276DC(void (*a1)(void), uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  _opaque_pthread_t *v8;
  _opaque_pthread_t *v9;
  uint64_t v10;

  v3 = v2;
  v6 = OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread;
  v7 = *(_QWORD *)(v3 + OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread);
  if (v7)
  {
    v8 = *(_opaque_pthread_t **)(v7 + 144);
    swift_retain();
    v9 = pthread_self();
    if (pthread_equal(v8, v9))
    {
      sub_1B1DAAED0();
      a1();
      sub_1B1DACA48(v3);
    }
    else
    {
      sub_1B1C2D74C((void (*)(uint64_t))a1);
    }
    return (id)swift_release();
  }
  else
  {
    v10 = OBJC_IVAR____TtC3VFX13EntityManager_syncLock;
    objc_msgSend(*(id *)(v3 + OBJC_IVAR____TtC3VFX13EntityManager_syncLock), sel_lock);
    if (*(_QWORD *)(v3 + v6))
    {
      sub_1B1C276DC(a1, a2);
    }
    else
    {
      sub_1B1DAAED0();
      a1();
      sub_1B1DACA48(v3);
    }
    return objc_msgSend(*(id *)(v3 + v10), sel_unlock);
  }
}

uint64_t PixelFormatDepth.init(rawValue:)(unsigned __int8 a1)
{
  unsigned __int8 v1;

  if (a1 <= 2u)
    v1 = a1;
  else
    v1 = 0;
  return v1 | ((a1 > 2u) << 8);
}

void *static PixelFormatDepth.allCases.getter()
{
  return &unk_1E638A1C0;
}

unsigned __int8 *sub_1B1C27854@<X0>(unsigned __int8 *result@<X0>, _BYTE *a2@<X8>)
{
  unsigned int v2;
  BOOL v3;

  v2 = *result;
  v3 = v2 > 2;
  if (v2 > 2)
    LOBYTE(v2) = 0;
  *a2 = v2;
  a2[1] = v3;
  return result;
}

void sub_1B1C27870(_QWORD *a1@<X8>)
{
  *a1 = &unk_1E638A1E8;
}

uint64_t sub_1B1C27880()
{
  sub_1B1C2F708();
  return sub_1B2228A70();
}

uint64_t sub_1B1C278DC()
{
  sub_1B1C2F708();
  return sub_1B22289F8();
}

uint64_t sub_1B1C279FC()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC3VFX8VFXScene__version);
  if (v1 <= 0)
  {
    v2 = *(_QWORD *)(v0 + OBJC_IVAR____TtC3VFX8VFXScene_effects);
    if (v2 >> 62)
    {
      swift_bridgeObjectRetain();
      v3 = sub_1B22296AC();
      if (v3)
      {
LABEL_4:
        if ((v2 & 0xC000000000000001) != 0)
        {
          v1 = 0;
          v4 = 0;
          do
          {
            v5 = MEMORY[0x1B5E21018](v4++, v2);
            v6 = *(_QWORD *)(v5 + OBJC_IVAR____TtC3VFX9VFXEffect_version);
            swift_unknownObjectRelease();
            if (v1 <= v6)
              v1 = v6;
          }
          while (v3 != v4);
        }
        else
        {
          if (v3 >= 2)
          {
            v8 = 0;
            v9 = 0;
            v7 = v3 & 0xFFFFFFFFFFFFFFFELL;
            v10 = (_QWORD *)(v2 + 40);
            v11 = v3 & 0xFFFFFFFFFFFFFFFELL;
            do
            {
              if (v8 <= *(_QWORD *)(*(v10 - 1) + OBJC_IVAR____TtC3VFX9VFXEffect_version))
                v8 = *(_QWORD *)(*(v10 - 1) + OBJC_IVAR____TtC3VFX9VFXEffect_version);
              if (v9 <= *(_QWORD *)(*v10 + OBJC_IVAR____TtC3VFX9VFXEffect_version))
                v9 = *(_QWORD *)(*v10 + OBJC_IVAR____TtC3VFX9VFXEffect_version);
              v10 += 2;
              v11 -= 2;
            }
            while (v11);
            if (v8 <= v9)
              v1 = v9;
            else
              v1 = v8;
            if (v3 == v7)
              goto LABEL_26;
          }
          else
          {
            v1 = 0;
            v7 = 0;
          }
          v12 = v3 - v7;
          v13 = (uint64_t *)(v2 + 8 * v7 + 32);
          do
          {
            v14 = *v13++;
            v15 = *(_QWORD *)(v14 + OBJC_IVAR____TtC3VFX9VFXEffect_version);
            if (v1 <= v15)
              v1 = v15;
            --v12;
          }
          while (v12);
        }
LABEL_26:
        swift_bridgeObjectRelease();
        return v1;
      }
    }
    else
    {
      v3 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v3)
        goto LABEL_4;
    }
    swift_bridgeObjectRelease();
    return 0;
  }
  return v1;
}

uint64_t sub_1B1C27B88()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR___VFXSceneLoadOptions_isAuthoringWorld);
}

uint64_t sub_1B1C27BA8(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + OBJC_IVAR___VFXSceneLoadOptions_isAuthoringWorld) = result;
  return result;
}

double (*sub_1B1C27BB8())(_QWORD)
{
  return nullsub_16;
}

uint64_t sub_1B1C27BE0()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR___VFXSceneLoadOptions_isVFX2);
}

uint64_t sub_1B1C27C00(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + OBJC_IVAR___VFXSceneLoadOptions_isVFX2) = result;
  return result;
}

double (*sub_1B1C27C10())(_QWORD)
{
  return nullsub_16;
}

uint64_t sub_1B1C27C38()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR___VFXSceneLoadOptions_enableRuntimeScriptCompilation);
}

uint64_t sub_1B1C27C58(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + OBJC_IVAR___VFXSceneLoadOptions_enableRuntimeScriptCompilation) = result;
  return result;
}

double (*sub_1B1C27C68())(_QWORD)
{
  return nullsub_16;
}

uint64_t sub_1B1C27C90()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR___VFXSceneLoadOptions_allowLoadingFromFuture);
}

uint64_t sub_1B1C27CB0(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + OBJC_IVAR___VFXSceneLoadOptions_allowLoadingFromFuture) = result;
  return result;
}

double (*sub_1B1C27CC0())(_QWORD)
{
  return nullsub_16;
}

uint64_t sub_1B1C27CE8()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR___VFXSceneLoadOptions_setupAsTemplate);
}

double (*sub_1B1C27D08())(_QWORD)
{
  return nullsub_16;
}

uint64_t sub_1B1C27D30()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR___VFXSceneLoadOptions_automaticallyPrepareScene);
}

double (*sub_1B1C27D50())(_QWORD)
{
  return nullsub_16;
}

uint64_t sub_1B1C27D78()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR___VFXSceneLoadOptions_setupAsyncRuntime);
}

double (*sub_1B1C27D98())(_QWORD)
{
  return nullsub_16;
}

uint64_t sub_1B1C27DE0()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + OBJC_IVAR___VFXSceneLoadOptions_asyncRuntimeLock);
}

uint64_t sub_1B1C27E00(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + OBJC_IVAR___VFXSceneLoadOptions_asyncRuntimeLock) = result;
  return result;
}

double (*sub_1B1C27E10())(_QWORD)
{
  return nullsub_16;
}

uint64_t sub_1B1C27E38()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR___VFXSceneLoadOptions_loadBindingsMetadata);
}

double (*sub_1B1C27E58())(_QWORD)
{
  return nullsub_16;
}

uint64_t sub_1B1C27E80()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR___VFXSceneLoadOptions_enableParallelDecoding);
}

uint64_t sub_1B1C27EA0(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + OBJC_IVAR___VFXSceneLoadOptions_enableParallelDecoding) = result;
  return result;
}

double (*sub_1B1C27EB0())(_QWORD)
{
  return nullsub_16;
}

uint64_t sub_1B1C27ED8()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR___VFXSceneLoadOptions_setupRenderer);
}

uint64_t sub_1B1C27EF8(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + OBJC_IVAR___VFXSceneLoadOptions_setupRenderer) = result;
  return result;
}

double (*sub_1B1C27F08())(_QWORD)
{
  return nullsub_16;
}

uint64_t sub_1B1C27F30()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + OBJC_IVAR___VFXSceneLoadOptions_colorPixelFormat);
}

uint64_t sub_1B1C27F50(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + OBJC_IVAR___VFXSceneLoadOptions_colorPixelFormat) = result;
  return result;
}

double (*sub_1B1C27F60())(_QWORD)
{
  return nullsub_16;
}

uint64_t sub_1B1C27F88()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + OBJC_IVAR___VFXSceneLoadOptions_depthPixelFormat);
}

uint64_t sub_1B1C27FA8(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + OBJC_IVAR___VFXSceneLoadOptions_depthPixelFormat) = result;
  return result;
}

double (*sub_1B1C27FB8())(_QWORD)
{
  return nullsub_16;
}

uint64_t sub_1B1C27FD0()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR___VFXSceneLoadOptions_enableDeferredRendering);
}

uint64_t sub_1B1C27FE0(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + OBJC_IVAR___VFXSceneLoadOptions_enableDeferredRendering) = result;
  return result;
}

double (*sub_1B1C27FF0())(_QWORD)
{
  return nullsub_16;
}

uint64_t sub_1B1C28028()
{
  uint64_t v0;

  return (*(_BYTE *)(v0 + OBJC_IVAR___VFXSceneLoadOptions_enableDeferredRendering) == 2) | *(_BYTE *)(v0 + OBJC_IVAR___VFXSceneLoadOptions_enableDeferredRendering) & 1u;
}

uint64_t (*sub_1B1C28058(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  v2 = OBJC_IVAR___VFXSceneLoadOptions_enableDeferredRendering;
  *(_QWORD *)a1 = v1;
  *(_QWORD *)(a1 + 8) = v2;
  *(_BYTE *)(a1 + 16) = (*(_BYTE *)(v1 + v2) == 2) | *(_BYTE *)(v1 + v2) & 1;
  return sub_1B1C2808C;
}

uint64_t sub_1B1C2808C(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)result + *(_QWORD *)(result + 8)) = *(_BYTE *)(result + 16);
  return result;
}

uint64_t sub_1B1C280AC()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR___VFXSceneLoadOptions_internalPixelFormatDepth);
}

double (*sub_1B1C280CC())(_QWORD)
{
  return nullsub_16;
}

uint64_t sub_1B1C280F4()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR___VFXSceneLoadOptions_useGammaBlending);
}

double (*sub_1B1C28114())(_QWORD)
{
  return nullsub_16;
}

uint64_t sub_1B1C2813C()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR___VFXSceneLoadOptions_doNotClearRenderOutput);
}

uint64_t sub_1B1C2815C(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + OBJC_IVAR___VFXSceneLoadOptions_doNotClearRenderOutput) = result;
  return result;
}

double (*sub_1B1C2816C())(_QWORD)
{
  return nullsub_16;
}

uint64_t sub_1B1C281A4()
{
  return swift_unknownObjectRetain();
}

uint64_t sub_1B1C281C0(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + OBJC_IVAR___VFXSceneLoadOptions_device) = a1;
  return swift_unknownObjectRelease();
}

double (*sub_1B1C281D8())(_QWORD)
{
  return nullsub_16;
}

uint64_t sub_1B1C28210()
{
  return swift_unknownObjectRetain();
}

uint64_t sub_1B1C2822C(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  *(_QWORD *)(a1 + *a4) = a3;
  swift_unknownObjectRetain();
  return swift_unknownObjectRelease();
}

uint64_t sub_1B1C2825C(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + OBJC_IVAR___VFXSceneLoadOptions_commandQueue) = a1;
  return swift_unknownObjectRelease();
}

double (*sub_1B1C28274())(_QWORD)
{
  return nullsub_16;
}

uint64_t sub_1B1C282E8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR___VFXSceneLoadOptions_clientID);
  swift_bridgeObjectRetain();
  return v1;
}

double (*sub_1B1C2836C())(_QWORD)
{
  return nullsub_16;
}

uint64_t sub_1B1C28390@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1B19EC90C(v1 + OBJC_IVAR___VFXSceneLoadOptions_metalLibraryURL, a1);
}

double (*sub_1B1C283B0())(_QWORD)
{
  return nullsub_16;
}

uint64_t sub_1B1C283F8()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + OBJC_IVAR___VFXSceneLoadOptions_peerPid);
}

uint64_t sub_1B1C28418(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + OBJC_IVAR___VFXSceneLoadOptions_peerPid) = result;
  return result;
}

double (*sub_1B1C28428())(_QWORD)
{
  return nullsub_16;
}

uint64_t sub_1B1C28450()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + OBJC_IVAR___VFXSceneLoadOptions_peerTaskIdentity);
}

uint64_t sub_1B1C28470(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + OBJC_IVAR___VFXSceneLoadOptions_peerTaskIdentity) = result;
  return result;
}

double (*sub_1B1C28480())(_QWORD)
{
  return nullsub_16;
}

id VFXScene.LoadOptions.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

id VFXScene.LoadOptions.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for VFXScene.LoadOptions(0);
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

void sub_1B1C28548(uint64_t a1)
{
  char *v1;
  char *v2;
  uint64_t v4;
  _QWORD *v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  int v24;
  void *v26;
  void *v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  void *v46;
  id v47;
  char v48;
  _BYTE *v49;
  uint64_t v50;
  pthread_mutex_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  char *v57;
  id v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  __int128 v66;
  char v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  __int16 v71;
  uint64_t v72;
  char v73;
  uint64_t v74;

  v2 = v1;
  v4 = *(_QWORD *)&v1[OBJC_IVAR____TtC3VFX8VFXScene_entityManager];
  v58 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for AssetManager()), sel_init);
  v5 = *(_QWORD **)(v4 + 176);
  swift_retain();
  sub_1B1F22244((uint64_t)&type metadata for AssetManagerInstance, (uint64_t)&off_1E639B010, v5, (void (*)(uint64_t))sub_1B1C2F890);

  swift_release();
  v6 = (_BYTE *)(v4 + OBJC_IVAR____TtC3VFX13EntityManager_scriptingConfig);
  *(_BYTE *)(v4 + OBJC_IVAR____TtC3VFX13EntityManager_scriptingConfig + 2) = 1;
  v7 = type metadata accessor for ScriptingConfiguration();
  *(_QWORD *)&v6[*(int *)(v7 + 32)] = 0;
  swift_bridgeObjectRelease();
  v8 = *(_QWORD *)&v1[OBJC_IVAR____TtC3VFX8VFXScene_loadOptions];
  v9 = *(_QWORD *)(v8 + OBJC_IVAR___VFXSceneLoadOptions_counterStorage);
  if (vfx_counters_is_null(v9))
    v10 = 0;
  else
    v10 = v9;
  sub_1B1E37188(v10, (uint64_t)&v59);
  v11 = v4 + OBJC_IVAR____TtC3VFX13EntityManager_counters;
  v12 = v60;
  *(_OWORD *)v11 = v59;
  *(_OWORD *)(v11 + 16) = v12;
  *(_QWORD *)(v11 + 96) = v65;
  v13 = v64;
  *(_OWORD *)(v11 + 64) = v63;
  *(_OWORD *)(v11 + 80) = v13;
  v14 = v62;
  *(_OWORD *)(v11 + 32) = v61;
  *(_OWORD *)(v11 + 48) = v14;
  v15 = OBJC_IVAR____TtC3VFX13EntityManager_renderer;
  v16 = *(_QWORD *)(v4 + OBJC_IVAR____TtC3VFX13EntityManager_renderer);
  if (v16)
  {
    v17 = v61;
    *(_OWORD *)(v16 + 88) = v62;
    v18 = v64;
    *(_OWORD *)(v16 + 104) = v63;
    *(_OWORD *)(v16 + 120) = v18;
    *(_QWORD *)(v16 + 136) = v65;
    v19 = v60;
    *(_OWORD *)(v16 + 40) = v59;
    *(_OWORD *)(v16 + 56) = v19;
    *(_OWORD *)(v16 + 72) = v17;
  }
  if (*(_BYTE *)(v8 + OBJC_IVAR___VFXSceneLoadOptions_setupRenderer) == 1)
  {
    v57 = v2;
    v20 = *(unsigned __int8 *)(v8 + OBJC_IVAR___VFXSceneLoadOptions_isVFX2);
    v56 = v7;
    v21 = a1;
    if (v20 == 1)
    {
      sub_1B1A02758(0, (unint64_t *)&unk_1ED4BF6F0, (uint64_t)&type metadata for RenderVariantDescriptor, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
      v22 = swift_allocObject();
      *(_OWORD *)(v22 + 16) = xmmword_1B226CD10;
      *(_DWORD *)(v22 + 32) = 1024;
      *(_QWORD *)(v22 + 40) = 81;
      *(_OWORD *)(v22 + 48) = 0u;
      *(_OWORD *)(v22 + 64) = 0u;
      *(_OWORD *)(v22 + 80) = 0u;
      *(_QWORD *)(v22 + 96) = 0;
      *(_OWORD *)(v22 + 104) = xmmword_1B22849A0;
      *(_QWORD *)(v22 + 120) = 4;
      *(_DWORD *)(v22 + 128) = 1024;
      *(_QWORD *)(v22 + 136) = 115;
      *(_OWORD *)(v22 + 144) = 0u;
      *(_OWORD *)(v22 + 160) = 0u;
      *(_OWORD *)(v22 + 176) = 0u;
      *(_QWORD *)(v22 + 192) = 0;
      *(_OWORD *)(v22 + 200) = xmmword_1B22849A0;
      v23 = 1;
      *(_QWORD *)(v22 + 216) = 4;
    }
    else
    {
      v22 = 0;
      v24 = *(unsigned __int8 *)(v8 + OBJC_IVAR___VFXSceneLoadOptions_enableDeferredRendering);
      v23 = (v24 & 1) == 0 && v24 != 2;
    }
    v26 = *(void **)(v8 + OBJC_IVAR___VFXSceneLoadOptions_device);
    v27 = *(void **)(v8 + OBJC_IVAR___VFXSceneLoadOptions_commandQueue);
    LOBYTE(v66) = v23;
    *(_WORD *)((char *)&v66 + 1) = 0;
    BYTE3(v66) = 0;
    BYTE4(v66) = v20;
    *((_QWORD *)&v66 + 1) = 0;
    v67 = 1;
    v68 = 0;
    v69 = 1;
    v70 = 0;
    v71 = 257;
    v72 = 260;
    v73 = 0;
    v74 = v22;
    type metadata accessor for Renderer();
    swift_allocObject();
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    v28 = sub_1B1BA3100(v26, v27, &v66);
    v29 = *(_OWORD *)(v21 + OBJC_IVAR____TtC3VFX13EntityManager_counters + 8);
    v30 = *(_OWORD *)(v21 + OBJC_IVAR____TtC3VFX13EntityManager_counters + 24);
    v31 = *(_OWORD *)(v21 + OBJC_IVAR____TtC3VFX13EntityManager_counters + 40);
    v32 = *(_OWORD *)(v21 + OBJC_IVAR____TtC3VFX13EntityManager_counters + 56);
    v33 = *(_OWORD *)(v21 + OBJC_IVAR____TtC3VFX13EntityManager_counters + 72);
    v34 = *(_OWORD *)(v21 + OBJC_IVAR____TtC3VFX13EntityManager_counters + 88);
    *(_QWORD *)(v28 + 40) = *(_QWORD *)(v21 + OBJC_IVAR____TtC3VFX13EntityManager_counters);
    *(_OWORD *)(v28 + 48) = v29;
    *(_OWORD *)(v28 + 64) = v30;
    *(_OWORD *)(v28 + 80) = v31;
    *(_OWORD *)(v28 + 96) = v32;
    *(_OWORD *)(v28 + 112) = v33;
    *(_OWORD *)(v28 + 128) = v34;
    *(_QWORD *)(v4 + v15) = v28;
    swift_retain();
    swift_release();
    type metadata accessor for SceneAssetRegistry();
    v35 = swift_allocObject();
    swift_retain();
    v36 = MEMORY[0x1E0DEE9D8];
    *(_QWORD *)(v35 + 16) = sub_1B1B8065C(MEMORY[0x1E0DEE9D8]);
    *(_QWORD *)(v35 + 24) = sub_1B1B80780(v36);
    swift_weakInit();
    swift_weakAssign();
    v37 = swift_release();
    MEMORY[0x1E0C80A78](v37, v38);
    v39 = *(_QWORD **)(v4 + 176);
    swift_retain();
    sub_1B1F22244((uint64_t)&type metadata for SceneAssetRegistryInstance, (uint64_t)&off_1E63B2458, v39, (void (*)(uint64_t))sub_1B1C2F8A4);
    swift_release();
    swift_release();
    v2 = v57;
    sub_1B1C2A4E0(v28);
    swift_bridgeObjectRelease();
    a1 = v21;
    swift_release();
    v7 = v56;
  }
  v40 = OBJC_IVAR___VFXSceneLoadOptions_isVFX2;
  *(_BYTE *)(v4 + OBJC_IVAR____TtC3VFX13EntityManager_isVFX2) = *(_BYTE *)(v8 + OBJC_IVAR___VFXSceneLoadOptions_isVFX2);
  *v6 = *(_BYTE *)(v8 + OBJC_IVAR___VFXSceneLoadOptions_enableRuntimeScriptCompilation);
  sub_1B1BB47FC(v8 + OBJC_IVAR___VFXSceneLoadOptions_metalLibraryURL, (uint64_t)&v6[*(int *)(v7 + 28)]);
  *(_BYTE *)(v4 + OBJC_IVAR____TtC3VFX13EntityManager_imGUIEnabled) = 0;
  if (*(_QWORD *)(v8 + OBJC_IVAR___VFXSceneLoadOptions_clientID + 8))
  {
    v41 = *(_QWORD *)(v8 + OBJC_IVAR___VFXSceneLoadOptions_clientID);
    v42 = *(_QWORD *)(v8 + OBJC_IVAR___VFXSceneLoadOptions_clientID + 8);
  }
  else
  {
    v41 = 0;
    v42 = 0xE000000000000000;
  }
  *(_QWORD *)(v4 + 32) = v41;
  *(_QWORD *)(v4 + 40) = v42;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v43 = OBJC_IVAR___VFXSceneLoadOptions_isAuthoringWorld;
  v44 = *(_BYTE *)(v8 + OBJC_IVAR___VFXSceneLoadOptions_isAuthoringWorld);
  *(_BYTE *)(v4 + 48) = v44;
  *(_BYTE *)(*(_QWORD *)(v4 + OBJC_IVAR____TtC3VFX13EntityManager_scheduler) + 16) = v44;
  v45 = *(_QWORD *)(v8 + OBJC_IVAR___VFXSceneLoadOptions_systemRegistrationOptions);
  swift_retain();
  sub_1B1D3DD98(v45);
  swift_release();
  v46 = *(void **)(v8 + OBJC_IVAR___VFXSceneLoadOptions_world);
  v47 = v46;
  if (v46)
  {
    *(_QWORD *)(v4 + OBJC_IVAR____TtC3VFX13EntityManager_world) = v47;

  }
  v48 = 0;
  *(_DWORD *)(v4 + OBJC_IVAR____TtC3VFX13EntityManager_peerPid) = *(_DWORD *)(v8
                                                                            + OBJC_IVAR___VFXSceneLoadOptions_peerPid);
  *(_DWORD *)(v4 + OBJC_IVAR____TtC3VFX13EntityManager_peerTaskIdentity) = *(_DWORD *)(v8
                                                                                     + OBJC_IVAR___VFXSceneLoadOptions_peerTaskIdentity);
  v49 = *(_BYTE **)&v2[OBJC_IVAR____TtC3VFX8VFXScene_loader];
  v49[19] = *(_BYTE *)(v8 + v43);
  v49[20] = *(_BYTE *)(v8 + OBJC_IVAR___VFXSceneLoadOptions_loadBindingsMetadata);
  v49[21] = *(_BYTE *)(v8 + OBJC_IVAR___VFXSceneLoadOptions_enableParallelDecoding);
  v49[16] = *(_BYTE *)(v8 + OBJC_IVAR___VFXSceneLoadOptions_loadPrecompiledScripts);
  v49[17] = 0;
  v49[22] = *(_BYTE *)(v8 + OBJC_IVAR___VFXSceneLoadOptions_allowLoadingFromFuture);
  if (*(_BYTE *)(v8 + OBJC_IVAR___VFXSceneLoadOptions_automaticallyPrepareScene) == 1)
    v48 = *(_BYTE *)(v8 + OBJC_IVAR___VFXSceneLoadOptions_setupAsTemplate) ^ 1;
  v49[23] = v48 & 1;
  if (*(_BYTE *)(v8 + OBJC_IVAR___VFXSceneLoadOptions_setupAsyncRuntime) == 1)
  {
    v50 = OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread;
    if (!*(_QWORD *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread))
    {
      v51 = *(pthread_mutex_t **)(v8 + OBJC_IVAR___VFXSceneLoadOptions_asyncRuntimeLock);
      type metadata accessor for RuntimeThread();
      swift_allocObject();
      v52 = swift_retain();
      v53 = sub_1B1E67A6C(v52, v51, 0);
      swift_release();
      *(_QWORD *)(a1 + v50) = v53;
      swift_release();
    }
    if (*(_BYTE *)(v8 + v40) == 1)
    {
      v54 = swift_allocObject();
      *(_QWORD *)(v54 + 16) = v2;
      v55 = v2;
      sub_1B1DA6294((uint64_t)sub_1B1C2F870, v54);
      swift_release();
    }
  }
}

void sub_1B1C28C5C(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  id v5;

  v2 = (void *)objc_opt_self();
  objc_msgSend(v2, sel_setCurrentThreadImmediateMode_, 1);
  v3 = *(void **)(*(_QWORD *)(a1 + OBJC_IVAR____TtC3VFX8VFXScene_loadOptions) + OBJC_IVAR___VFXSceneLoadOptions_world);
  v4 = v3;
  if (v3)
  {
    v5 = v4;
    objc_msgSend(v2, sel_setImmediateModeRestrictedContext_);

  }
}

id VFXScene.__allocating_init(options:)(_BYTE *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return VFXScene.init(options:)(a1);
}

id VFXScene.init()()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  char *v7;
  char *v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  objc_super v13;

  v1 = v0;
  v2 = OBJC_IVAR____TtC3VFX8VFXScene_loader;
  type metadata accessor for VFXLoader();
  swift_allocObject();
  sub_1B21218F8();
  *(_QWORD *)&v0[v2] = v3;
  *(_QWORD *)&v0[OBJC_IVAR____TtC3VFX8VFXScene_templateRemapTable] = 0;
  v0[OBJC_IVAR____TtC3VFX8VFXScene_templateWasPrepared] = 0;
  v4 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)&v0[OBJC_IVAR____TtC3VFX8VFXScene_effects] = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)&v0[OBJC_IVAR____TtC3VFX8VFXScene_entityObjects] = v4;
  *(_QWORD *)&v0[OBJC_IVAR____TtC3VFX8VFXScene__version] = 0;
  v0[OBJC_IVAR____TtC3VFX8VFXScene_isInsideRE] = 0;
  v0[OBJC_IVAR____TtC3VFX8VFXScene_isREAssetScene] = 0;
  v5 = OBJC_IVAR____TtC3VFX8VFXScene_transientDrawCall;
  v6 = objc_allocWithZone((Class)type metadata accessor for VFXREDrawCall());
  v7 = v1;
  *(_QWORD *)&v1[v5] = objc_msgSend(v6, sel_init);
  v7[OBJC_IVAR____TtC3VFX8VFXScene_hasSharedEntityManager] = 0;
  *(_QWORD *)&v7[OBJC_IVAR____TtC3VFX8VFXScene_metalBinaryArchiveURLs] = 0;
  v8 = &v7[OBJC_IVAR____TtC3VFX8VFXScene_recordedMetalBinaryArchiveURL];
  v9 = sub_1B2228110();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
  *(_QWORD *)&v7[OBJC_IVAR____TtC3VFX8VFXScene_internalPixelFormat] = 115;
  v7[OBJC_IVAR____TtC3VFX8VFXScene_internalPixelFormatDepth] = 1;
  v7[OBJC_IVAR____TtC3VFX8VFXScene_useGammaBlending] = 0;
  *(_QWORD *)&v7[OBJC_IVAR____TtC3VFX8VFXScene_debugUIOptions] = 0;
  type metadata accessor for EntityManager();
  swift_allocObject();
  *(_QWORD *)&v7[OBJC_IVAR____TtC3VFX8VFXScene_entityManager] = sub_1B1DA6CC4(0x746C7561666544, 0xE700000000000000, 1, 0);
  *(_QWORD *)&v7[OBJC_IVAR____TtC3VFX8VFXScene_loadOptions] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for VFXScene.LoadOptions(0)), sel_init);

  v13.receiver = v7;
  v13.super_class = (Class)type metadata accessor for VFXScene(0);
  v10 = objc_msgSendSuper2(&v13, sel_init);
  v11 = swift_retain();
  sub_1B1C28548(v11);
  swift_release();
  if (qword_1ED4B91A0 != -1)
    swift_once();

  return v10;
}

char *VFXScene.__allocating_init(contentsOf:options:)(char *a1, void *a2)
{
  objc_class *v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  id v13;
  id v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  char *v18;
  void (*v19)(uint64_t, int, uint64_t);
  void (*v20)(uint64_t, int, uint64_t);
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  id v25;
  char v26;

  v24 = type metadata accessor for BundleInfo();
  MEMORY[0x1E0C80A78](v24, v6);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v24 - v11;
  v13 = objc_allocWithZone(v2);
  v25 = a2;
  v14 = objc_msgSend(v13, sel_initWithOptions_, a2);
  v15 = qword_1ED4B91A0;
  v16 = (char *)v14;
  if (v15 != -1)
    swift_once();
  v17 = *(_QWORD *)&v16[OBJC_IVAR____TtC3VFX8VFXScene_entityManager];
  v26 = 1;
  v18 = a1;
  v19 = sub_1B2122140((uint64_t)v8, a1, 0, v17, 0x100000000uLL);
  if (v3)
  {

  }
  else
  {
    v20 = v19;
    sub_1B1C2D830((uint64_t)v8, (uint64_t)v12);
    v20(v17, 7, 0);
    *(_QWORD *)&v16[OBJC_IVAR____TtC3VFX8VFXScene__version] = *(_QWORD *)&v12[*(int *)(v24 + 24)];
    *(_QWORD *)(v17 + 16) = sub_1B222805C();
    *(_QWORD *)(v17 + 24) = v23;
    swift_release();
    swift_bridgeObjectRelease();
    sub_1B1B8A68C((uint64_t)v12);

  }
  v21 = sub_1B2228110();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v21 - 8) + 8))(v18, v21);
  return v16;
}

char *VFXScene.init(contentsOf:options:)(char *a1, void *a2)
{
  void *v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  char *v13;
  id v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  char *v18;
  void (*v19)(uint64_t, int, uint64_t);
  void (*v20)(uint64_t, int, uint64_t);
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  id v25;
  char v26;

  v24 = type metadata accessor for BundleInfo();
  MEMORY[0x1E0C80A78](v24, v6);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x1E0C80A78](v9, v10);
  v13 = (char *)&v24 - v12;
  v25 = a2;
  v14 = objc_msgSend(v2, sel_initWithOptions_, a2, v11);
  v15 = qword_1ED4B91A0;
  v16 = (char *)v14;
  if (v15 != -1)
    swift_once();
  v17 = *(_QWORD *)&v16[OBJC_IVAR____TtC3VFX8VFXScene_entityManager];
  v26 = 1;
  v18 = a1;
  v19 = sub_1B2122140((uint64_t)v8, a1, 0, v17, 0x100000000uLL);
  if (v3)
  {

  }
  else
  {
    v20 = v19;
    sub_1B1C2D830((uint64_t)v8, (uint64_t)v13);
    v20(v17, 7, 0);
    *(_QWORD *)&v16[OBJC_IVAR____TtC3VFX8VFXScene__version] = *(_QWORD *)&v13[*(int *)(v24 + 24)];
    *(_QWORD *)(v17 + 16) = sub_1B222805C();
    *(_QWORD *)(v17 + 24) = v23;
    swift_release();
    swift_bridgeObjectRelease();
    sub_1B1B8A68C((uint64_t)v13);

  }
  v21 = sub_1B2228110();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v21 - 8) + 8))(v18, v21);
  return v16;
}

char *VFXScene.__allocating_init(contentsOf:)(char *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return VFXScene.init(contentsOf:)(a1);
}

char *VFXScene.init(contentsOf:)(char *a1)
{
  char *v1;
  char *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  objc_class *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, int, uint64_t);
  void (*v29)(uint64_t, int, uint64_t);
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  objc_super v37;
  char v38;

  v2 = v1;
  v33 = type metadata accessor for BundleInfo();
  MEMORY[0x1E0C80A78](v33, v4);
  v6 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7, v8);
  v34 = (uint64_t)&v33 - v9;
  v10 = OBJC_IVAR____TtC3VFX8VFXScene_loader;
  type metadata accessor for VFXLoader();
  swift_allocObject();
  sub_1B21218F8();
  *(_QWORD *)&v1[v10] = v11;
  *(_QWORD *)&v1[OBJC_IVAR____TtC3VFX8VFXScene_templateRemapTable] = 0;
  v1[OBJC_IVAR____TtC3VFX8VFXScene_templateWasPrepared] = 0;
  v12 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)&v1[OBJC_IVAR____TtC3VFX8VFXScene_effects] = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)&v1[OBJC_IVAR____TtC3VFX8VFXScene_entityObjects] = v12;
  *(_QWORD *)&v1[OBJC_IVAR____TtC3VFX8VFXScene__version] = 0;
  v1[OBJC_IVAR____TtC3VFX8VFXScene_isInsideRE] = 0;
  v1[OBJC_IVAR____TtC3VFX8VFXScene_isREAssetScene] = 0;
  v13 = OBJC_IVAR____TtC3VFX8VFXScene_transientDrawCall;
  v14 = objc_allocWithZone((Class)type metadata accessor for VFXREDrawCall());
  v15 = v2;
  *(_QWORD *)&v2[v13] = objc_msgSend(v14, sel_init);
  v15[OBJC_IVAR____TtC3VFX8VFXScene_hasSharedEntityManager] = 0;
  *(_QWORD *)&v15[OBJC_IVAR____TtC3VFX8VFXScene_metalBinaryArchiveURLs] = 0;
  v16 = &v15[OBJC_IVAR____TtC3VFX8VFXScene_recordedMetalBinaryArchiveURL];
  v17 = sub_1B2228110();
  v35 = *(_QWORD *)(v17 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v35 + 56))(v16, 1, 1, v17);
  *(_QWORD *)&v15[OBJC_IVAR____TtC3VFX8VFXScene_internalPixelFormat] = 115;
  v15[OBJC_IVAR____TtC3VFX8VFXScene_internalPixelFormatDepth] = 1;
  v15[OBJC_IVAR____TtC3VFX8VFXScene_useGammaBlending] = 0;
  *(_QWORD *)&v15[OBJC_IVAR____TtC3VFX8VFXScene_debugUIOptions] = 0;
  v18 = sub_1B222805C();
  v20 = v19;
  type metadata accessor for EntityManager();
  swift_allocObject();
  *(_QWORD *)&v15[OBJC_IVAR____TtC3VFX8VFXScene_entityManager] = sub_1B1DA6CC4(v18, v20, 1, 0);
  *(_QWORD *)&v15[OBJC_IVAR____TtC3VFX8VFXScene_loadOptions] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for VFXScene.LoadOptions(0)), sel_init);

  v21 = (objc_class *)type metadata accessor for VFXScene(0);
  v37.receiver = v15;
  v37.super_class = v21;
  v22 = (char *)objc_msgSendSuper2(&v37, sel_init);
  v23 = OBJC_IVAR____TtC3VFX8VFXScene_entityManager;
  v24 = v22;
  v25 = swift_retain();
  sub_1B1C28548(v25);
  swift_release();
  if (qword_1ED4B91A0 != -1)
    swift_once();
  v26 = *(_QWORD *)&v22[v23];
  v38 = 1;
  v27 = v36;
  v28 = sub_1B2122140((uint64_t)v6, a1, 0, v26, 0x100000000uLL);
  if (v27)
  {
    (*(void (**)(char *, uint64_t))(v35 + 8))(a1, v17);

  }
  else
  {
    v29 = v28;
    v30 = v34;
    sub_1B1C2D830((uint64_t)v6, v34);
    v29(v26, 7, 0);
    *(_QWORD *)&v24[OBJC_IVAR____TtC3VFX8VFXScene__version] = *(_QWORD *)(v30 + *(int *)(v33 + 24));
    *(_QWORD *)(v26 + 16) = sub_1B222805C();
    *(_QWORD *)(v26 + 24) = v32;
    swift_release();
    swift_bridgeObjectRelease();
    sub_1B1B8A68C(v30);
    (*(void (**)(char *, uint64_t))(v35 + 8))(a1, v17);
  }

  return v24;
}

void VFXScene.__allocating_init(forEngineNamed:)()
{
  objc_class *v0;
  _BYTE *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;

  v1 = objc_allocWithZone(v0);
  v2 = OBJC_IVAR____TtC3VFX8VFXScene_loader;
  type metadata accessor for VFXLoader();
  swift_allocObject();
  sub_1B21218F8();
  *(_QWORD *)&v1[v2] = v3;
  *(_QWORD *)&v1[OBJC_IVAR____TtC3VFX8VFXScene_templateRemapTable] = 0;
  v1[OBJC_IVAR____TtC3VFX8VFXScene_templateWasPrepared] = 0;
  v4 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)&v1[OBJC_IVAR____TtC3VFX8VFXScene_effects] = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)&v1[OBJC_IVAR____TtC3VFX8VFXScene_entityObjects] = v4;
  *(_QWORD *)&v1[OBJC_IVAR____TtC3VFX8VFXScene__version] = 0;
  v1[OBJC_IVAR____TtC3VFX8VFXScene_isInsideRE] = 0;
  v1[OBJC_IVAR____TtC3VFX8VFXScene_isREAssetScene] = 0;
  v5 = OBJC_IVAR____TtC3VFX8VFXScene_transientDrawCall;
  *(_QWORD *)&v1[v5] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for VFXREDrawCall()), sel_init);
  v1[OBJC_IVAR____TtC3VFX8VFXScene_hasSharedEntityManager] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC3VFX8VFXScene_metalBinaryArchiveURLs] = 0;
  v6 = &v1[OBJC_IVAR____TtC3VFX8VFXScene_recordedMetalBinaryArchiveURL];
  v7 = sub_1B2228110();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
  *(_QWORD *)&v1[OBJC_IVAR____TtC3VFX8VFXScene_internalPixelFormat] = 115;
  v1[OBJC_IVAR____TtC3VFX8VFXScene_internalPixelFormatDepth] = 1;
  v1[OBJC_IVAR____TtC3VFX8VFXScene_useGammaBlending] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC3VFX8VFXScene_debugUIOptions] = 0;

  sub_1B2229688();
  __break(1u);
}

id VFXScene.__allocating_init(entityManager:)(uint64_t a1)
{
  objc_class *v1;
  objc_class *v2;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  id v14;
  id v15;
  id v16;
  objc_super v18;

  v2 = v1;
  v4 = objc_allocWithZone(v1);
  v5 = OBJC_IVAR____TtC3VFX8VFXScene_loader;
  type metadata accessor for VFXLoader();
  swift_allocObject();
  sub_1B21218F8();
  *(_QWORD *)&v4[v5] = v6;
  *(_QWORD *)&v4[OBJC_IVAR____TtC3VFX8VFXScene_templateRemapTable] = 0;
  v4[OBJC_IVAR____TtC3VFX8VFXScene_templateWasPrepared] = 0;
  v7 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)&v4[OBJC_IVAR____TtC3VFX8VFXScene_effects] = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)&v4[OBJC_IVAR____TtC3VFX8VFXScene_entityObjects] = v7;
  *(_QWORD *)&v4[OBJC_IVAR____TtC3VFX8VFXScene__version] = 0;
  v4[OBJC_IVAR____TtC3VFX8VFXScene_isInsideRE] = 0;
  v4[OBJC_IVAR____TtC3VFX8VFXScene_isREAssetScene] = 0;
  v8 = OBJC_IVAR____TtC3VFX8VFXScene_transientDrawCall;
  v9 = objc_allocWithZone((Class)type metadata accessor for VFXREDrawCall());
  v10 = v4;
  *(_QWORD *)&v4[v8] = objc_msgSend(v9, sel_init);
  v11 = OBJC_IVAR____TtC3VFX8VFXScene_hasSharedEntityManager;
  *(_QWORD *)&v10[OBJC_IVAR____TtC3VFX8VFXScene_metalBinaryArchiveURLs] = 0;
  v12 = &v10[OBJC_IVAR____TtC3VFX8VFXScene_recordedMetalBinaryArchiveURL];
  v13 = sub_1B2228110();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v12, 1, 1, v13);
  *(_QWORD *)&v10[OBJC_IVAR____TtC3VFX8VFXScene_internalPixelFormat] = 115;
  v10[OBJC_IVAR____TtC3VFX8VFXScene_internalPixelFormatDepth] = 1;
  v10[OBJC_IVAR____TtC3VFX8VFXScene_useGammaBlending] = 0;
  *(_QWORD *)&v10[OBJC_IVAR____TtC3VFX8VFXScene_debugUIOptions] = 0;
  v10[v11] = 1;
  *(_QWORD *)&v10[OBJC_IVAR____TtC3VFX8VFXScene_entityManager] = a1;
  v14 = objc_allocWithZone((Class)type metadata accessor for VFXScene.LoadOptions(0));
  swift_unknownObjectRetain();
  v15 = objc_msgSend(v14, sel_init);
  *(_QWORD *)&v10[OBJC_IVAR____TtC3VFX8VFXScene_loadOptions] = v15;

  v18.receiver = v10;
  v18.super_class = v2;
  v16 = objc_msgSendSuper2(&v18, sel_init);
  swift_unknownObjectRelease();
  return v16;
}

id VFXScene.init(entityManager:)(uint64_t a1)
{
  _BYTE *v1;
  _BYTE *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  _BYTE *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  id v13;
  id v14;
  id v15;
  objc_super v17;

  v2 = v1;
  v4 = OBJC_IVAR____TtC3VFX8VFXScene_loader;
  type metadata accessor for VFXLoader();
  swift_allocObject();
  sub_1B21218F8();
  *(_QWORD *)&v1[v4] = v5;
  *(_QWORD *)&v1[OBJC_IVAR____TtC3VFX8VFXScene_templateRemapTable] = 0;
  v1[OBJC_IVAR____TtC3VFX8VFXScene_templateWasPrepared] = 0;
  v6 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)&v1[OBJC_IVAR____TtC3VFX8VFXScene_effects] = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)&v1[OBJC_IVAR____TtC3VFX8VFXScene_entityObjects] = v6;
  *(_QWORD *)&v1[OBJC_IVAR____TtC3VFX8VFXScene__version] = 0;
  v1[OBJC_IVAR____TtC3VFX8VFXScene_isInsideRE] = 0;
  v1[OBJC_IVAR____TtC3VFX8VFXScene_isREAssetScene] = 0;
  v7 = OBJC_IVAR____TtC3VFX8VFXScene_transientDrawCall;
  v8 = objc_allocWithZone((Class)type metadata accessor for VFXREDrawCall());
  v9 = v1;
  *(_QWORD *)&v2[v7] = objc_msgSend(v8, sel_init);
  v10 = OBJC_IVAR____TtC3VFX8VFXScene_hasSharedEntityManager;
  *(_QWORD *)&v9[OBJC_IVAR____TtC3VFX8VFXScene_metalBinaryArchiveURLs] = 0;
  v11 = &v9[OBJC_IVAR____TtC3VFX8VFXScene_recordedMetalBinaryArchiveURL];
  v12 = sub_1B2228110();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
  *(_QWORD *)&v9[OBJC_IVAR____TtC3VFX8VFXScene_internalPixelFormat] = 115;
  v9[OBJC_IVAR____TtC3VFX8VFXScene_internalPixelFormatDepth] = 1;
  v9[OBJC_IVAR____TtC3VFX8VFXScene_useGammaBlending] = 0;
  *(_QWORD *)&v9[OBJC_IVAR____TtC3VFX8VFXScene_debugUIOptions] = 0;
  v9[v10] = 1;
  *(_QWORD *)&v9[OBJC_IVAR____TtC3VFX8VFXScene_entityManager] = a1;
  v13 = objc_allocWithZone((Class)type metadata accessor for VFXScene.LoadOptions(0));
  swift_unknownObjectRetain();
  v14 = objc_msgSend(v13, sel_init);
  *(_QWORD *)&v9[OBJC_IVAR____TtC3VFX8VFXScene_loadOptions] = v14;

  v17.receiver = v9;
  v17.super_class = (Class)type metadata accessor for VFXScene(0);
  v15 = objc_msgSendSuper2(&v17, sel_init);
  swift_unknownObjectRelease();
  return v15;
}

id VFXScene.__deallocating_deinit()
{
  _BYTE *v0;
  objc_super v2;

  if ((v0[OBJC_IVAR____TtC3VFX8VFXScene_hasSharedEntityManager] & 1) == 0)
  {
    swift_retain();
    sub_1B1DA63A4();
    swift_release();
  }
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for VFXScene(0);
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_1B1C2A0C4()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1B1C2A128(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + OBJC_IVAR____TtC3VFX8VFXScene_metalBinaryArchiveURLs) = a1;
  return swift_bridgeObjectRelease();
}

double (*sub_1B1C2A140())(_QWORD)
{
  return nullsub_16;
}

id sub_1B1C2A164(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v13;

  sub_1B1792854(0, (unint64_t *)&qword_1ED4BF720, (void (*)(uint64_t))MEMORY[0x1E0CAFFF8]);
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (char *)&v13 - v7;
  sub_1B19EC90C(a1 + *a3, (uint64_t)&v13 - v7);
  v9 = sub_1B2228110();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) != 1)
  {
    v11 = (void *)sub_1B2228074();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v9);
  }
  return v11;
}

uint64_t sub_1B1C2A22C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1B19EC90C(v1 + OBJC_IVAR____TtC3VFX8VFXScene_recordedMetalBinaryArchiveURL, a1);
}

uint64_t sub_1B1C2A24C(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  sub_1B1792854(0, (unint64_t *)&qword_1ED4BF720, (void (*)(uint64_t))MEMORY[0x1E0CAFFF8]);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)&v14 - v9;
  if (a3)
  {
    sub_1B22280C8();
    v11 = sub_1B2228110();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v10, 0, 1, v11);
  }
  else
  {
    v12 = sub_1B2228110();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v10, 1, 1, v12);
  }
  return sub_1B17927B4((uint64_t)v10, a1 + *a4);
}

uint64_t sub_1B1C2A320(uint64_t a1)
{
  uint64_t v1;

  return sub_1B17927B4(a1, v1 + OBJC_IVAR____TtC3VFX8VFXScene_recordedMetalBinaryArchiveURL);
}

uint64_t sub_1B1C2A330(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v13;

  sub_1B1792854(0, (unint64_t *)&qword_1ED4BF720, (void (*)(uint64_t))MEMORY[0x1E0CAFFF8]);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v13 - v10;
  sub_1B19EC90C(a1, (uint64_t)&v13 - v10);
  return sub_1B17927B4((uint64_t)v11, *a2 + *a5);
}

double (*sub_1B1C2A3C0())(_QWORD)
{
  return nullsub_16;
}

uint64_t sub_1B1C2A3E8()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + OBJC_IVAR____TtC3VFX8VFXScene_internalPixelFormat);
}

uint64_t sub_1B1C2A408(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + OBJC_IVAR____TtC3VFX8VFXScene_internalPixelFormat) = result;
  return result;
}

double (*sub_1B1C2A418())(_QWORD)
{
  return nullsub_16;
}

uint64_t sub_1B1C2A440()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC3VFX8VFXScene_internalPixelFormatDepth);
}

uint64_t sub_1B1C2A460(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + OBJC_IVAR____TtC3VFX8VFXScene_internalPixelFormatDepth) = result;
  return result;
}

double (*sub_1B1C2A470())(_QWORD)
{
  return nullsub_16;
}

uint64_t sub_1B1C2A498()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC3VFX8VFXScene_useGammaBlending);
}

uint64_t sub_1B1C2A4B8(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + OBJC_IVAR____TtC3VFX8VFXScene_useGammaBlending) = result;
  return result;
}

double (*sub_1B1C2A4C8())(_QWORD)
{
  return nullsub_16;
}

uint64_t sub_1B1C2A4E0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  char v9;
  int v10;
  uint64_t v11;

  v2 = v1;
  v4 = a1 + 552;
  v5 = *(_QWORD *)(v2 + OBJC_IVAR____TtC3VFX8VFXScene_loadOptions);
  v6 = *(_QWORD *)(v5 + OBJC_IVAR___VFXSceneLoadOptions_colorPixelFormat);
  *(_QWORD *)(a1 + 544) = v6;
  *(_BYTE *)(a1 + 552) = v6 == 0;
  sub_1B1BA370C();
  v7 = *(_QWORD *)(v5 + OBJC_IVAR___VFXSceneLoadOptions_depthPixelFormat);
  *(_QWORD *)(a1 + 560) = v7;
  *(_BYTE *)(a1 + 568) = v7 == 0;
  sub_1B1BA370C();
  v8 = *(unsigned __int8 *)(v5 + OBJC_IVAR___VFXSceneLoadOptions_internalPixelFormatDepth);
  if (v8 == 2)
    v9 = 2;
  else
    v9 = v8 == 1;
  *(_BYTE *)(a1 + 585) = v9;
  sub_1B1BA370C();
  v10 = *(unsigned __int8 *)(v5 + OBJC_IVAR___VFXSceneLoadOptions_enableDeferredRendering);
  if (v10 != 2)
  {
    *(_BYTE *)(a1 + 536) = (v10 & 1) == 0;
    sub_1B1BA370C();
    sub_1B1BA370C();
  }
  *(_BYTE *)(a1 + 600) = *(_BYTE *)(v5 + OBJC_IVAR___VFXSceneLoadOptions_useGammaBlending);
  sub_1B1BA370C();
  v11 = 1;
  if (!*(_BYTE *)(v5 + OBJC_IVAR___VFXSceneLoadOptions_doNotClearRenderOutput))
    v11 = 2;
  *(_QWORD *)(a1 + 576) = v11;
  *(_BYTE *)(v4 + 32) = 0;
  return sub_1B1BA370C();
}

uint64_t sub_1B1C2A694()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC3VFX8VFXScene_entityManager) + OBJC_IVAR____TtC3VFX13EntityManager_clock;
  if (*(_BYTE *)(v1 + 96) == 1)
    return (*(unsigned __int8 *)(v1 + 99) ^ 1) & 1;
  else
    return 0;
}

uint64_t sub_1B1C2A6F8(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(*(_QWORD *)(v1 + OBJC_IVAR____TtC3VFX8VFXScene_entityManager)
           + OBJC_IVAR____TtC3VFX13EntityManager_clock
           + 96) = result;
  return result;
}

uint64_t (*sub_1B1C2A71C(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;

  v2 = *(_QWORD *)(v1 + OBJC_IVAR____TtC3VFX8VFXScene_entityManager);
  v3 = OBJC_IVAR____TtC3VFX13EntityManager_clock;
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = v2 + v3;
  if (*(_BYTE *)(v4 + 96) == 1)
    v5 = *(_BYTE *)(v4 + 99) ^ 1;
  else
    v5 = 0;
  *(_BYTE *)(a1 + 16) = v5 & 1;
  return sub_1B1C2A770;
}

uint64_t sub_1B1C2A770(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)result + *(_QWORD *)(result + 8) + 96) = *(_BYTE *)(result + 16);
  return result;
}

uint64_t sub_1B1C2A7D4(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + OBJC_IVAR____TtC3VFX8VFXScene_entityManager) + OBJC_IVAR____TtC3VFX13EntityManager_clock;
  *(_BYTE *)(v2 + 97) = result;
  if ((result & 1) != 0)
    *(_BYTE *)(v2 + 98) = 0;
  return result;
}

uint64_t (*sub_1B1C2A800(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v1 + OBJC_IVAR____TtC3VFX8VFXScene_entityManager);
  v3 = OBJC_IVAR____TtC3VFX13EntityManager_clock;
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(v2 + v3 + 97);
  return sub_1B1C2A838;
}

uint64_t sub_1B1C2A838(uint64_t result)
{
  uint64_t v1;
  int v2;

  v1 = *(_QWORD *)result + *(_QWORD *)(result + 8);
  v2 = *(unsigned __int8 *)(result + 16);
  *(_BYTE *)(v1 + 97) = v2;
  if (v2 == 1)
    *(_BYTE *)(v1 + 98) = 0;
  return result;
}

void sub_1B1C2A8A0(float a1)
{
  uint64_t v1;

  *(float *)(*(_QWORD *)(*(_QWORD *)(v1 + OBJC_IVAR____TtC3VFX8VFXScene_entityManager)
                       + OBJC_IVAR____TtC3VFX13EntityManager_scheduler)
           + 208) = a1;
}

float (*sub_1B1C2A8C4(uint64_t a1))(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v1 + OBJC_IVAR____TtC3VFX8VFXScene_entityManager);
  v3 = OBJC_IVAR____TtC3VFX13EntityManager_scheduler;
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(_QWORD *)(v2 + v3) + 208);
  return sub_1B1C2A8FC;
}

float sub_1B1C2A8FC(uint64_t a1)
{
  float result;

  result = *(float *)(a1 + 16);
  *(float *)(*(_QWORD *)(*(_QWORD *)a1 + *(_QWORD *)(a1 + 8)) + 208) = result;
  return result;
}

uint64_t sub_1B1C2A9AC()
{
  uint64_t v0;
  uint64_t v2;

  if (qword_1ED4BF430 != -1)
    swift_once();
  swift_retain();
  v0 = sub_1B2228E90();
  v2 = 1;
  sub_1B1F1AAF0(v0, 0xD000000000000057, 0x80000001B23347F0, &v2);
  return swift_release();
}

uint64_t (*sub_1B1C2AA34(_BYTE *a1))()
{
  *a1 = 0;
  return sub_1B1C2AA48;
}

uint64_t sub_1B1C2AA48()
{
  uint64_t v0;
  uint64_t v2;

  if (qword_1ED4BF430 != -1)
    swift_once();
  swift_retain();
  v0 = sub_1B2228E90();
  v2 = 1;
  sub_1B1F1AAF0(v0, 0xD000000000000057, 0x80000001B23347F0, &v2);
  return swift_release();
}

double (*sub_1B1C2AAE0(_BYTE *a1))(_QWORD)
{
  *a1 = 0;
  return nullsub_16;
}

uint64_t sub_1B1C2AB24()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + OBJC_IVAR____TtC3VFX8VFXScene_entityManager)
                 + OBJC_IVAR____TtC3VFX13EntityManager_renderer);
  if (v1)
    return *(unsigned __int8 *)(v1 + 321);
  else
    return 0;
}

uint64_t *sub_1B1C2AB94(char a1)
{
  uint64_t v1;
  uint64_t *result;
  uint64_t v4;
  int v5;

  result = *(uint64_t **)(v1 + OBJC_IVAR____TtC3VFX8VFXScene_entityManager);
  v4 = *(uint64_t *)((char *)result + OBJC_IVAR____TtC3VFX13EntityManager_renderer);
  if (v4)
  {
    v5 = a1 & 1;
    if (*(unsigned __int8 *)(v4 + 321) == v5)
      return result;
    *(_BYTE *)(v4 + 321) = v5;
  }
  return sub_1B1D2F76C((uint64_t)result);
}

uint64_t *(*sub_1B1C2ABD8(uint64_t a1))(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)a1 = v1;
  v2 = *(_QWORD *)(*(_QWORD *)(v1 + OBJC_IVAR____TtC3VFX8VFXScene_entityManager)
                 + OBJC_IVAR____TtC3VFX13EntityManager_renderer);
  if (v2)
    LOBYTE(v2) = *(_BYTE *)(v2 + 321);
  *(_BYTE *)(a1 + 8) = v2;
  return sub_1B1C2AC14;
}

uint64_t *sub_1B1C2AC14(uint64_t a1)
{
  return sub_1B1C2AB94(*(_BYTE *)(a1 + 8));
}

uint64_t sub_1B1C2AC38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  char v9;

  v8 = sub_1B1FF36E8(a1, a2, 0x200000000, 1);
  if ((v9 & 1) != 0 || v8 == 0xFFFFFFFFLL)
    return 0;
  else
    return sub_1B1F4BC74(v8, a1, a2, a3, a4);
}

uint64_t sub_1B1C2AD8C(uint64_t a1, uint64_t a2)
{
  return sub_1B1F42AA8(a1, a2, 0x200000000);
}

uint64_t sub_1B1C2AE8C()
{
  return sub_1B1F42F94(0x200000000, 0, 0);
}

void sub_1B1C2AEC0(double a1)
{
  char *v1;

  sub_1B1D9E178(*(_QWORD *)&v1[OBJC_IVAR____TtC3VFX8VFXScene_entityManager], v1, a1);
}

void sub_1B1C2AF7C()
{
  char *v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  void *v5;

  v1 = *(_QWORD *)&v0[OBJC_IVAR____TtC3VFX8VFXScene_effects];
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain_n();
    v2 = sub_1B22296AC();
    if (!v2)
      goto LABEL_9;
  }
  else
  {
    v2 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain_n();
    if (!v2)
      goto LABEL_9;
  }
  v3 = 0;
  do
  {
    if ((v1 & 0xC000000000000001) != 0)
      v4 = (id)MEMORY[0x1B5E21018](v3, v1);
    else
      v4 = *(id *)(v1 + 8 * v3 + 32);
    v5 = v4;
    ++v3;
    sub_1B1C2DA04();
    sub_1B1C2DA6C();
    sub_1B222844C();

  }
  while (v2 != v3);
LABEL_9:
  swift_bridgeObjectRelease_n();
  sub_1B1D9E31C(*(_QWORD *)&v0[OBJC_IVAR____TtC3VFX8VFXScene_entityManager], v0);
}

void sub_1B1C2B0E0()
{
  char *v0;

  sub_1B1D9E49C(*(_QWORD *)&v0[OBJC_IVAR____TtC3VFX8VFXScene_entityManager], v0);
}

void sub_1B1C2B134()
{
  char *v0;

  sub_1B1D9E858(*(_QWORD *)&v0[OBJC_IVAR____TtC3VFX8VFXScene_entityManager], v0);
}

uint64_t sub_1B1C2B1F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v11;

  v11 = *(_QWORD *)(v5 + OBJC_IVAR____TtC3VFX8VFXScene_entityManager);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return sub_1B1DA43FC(v11, v11, a1, a2, 0x200000000, a3, a4, a5);
}

id sub_1B1C2B3D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD v7[5];
  int v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v7[2] = *(_QWORD *)(v5 + OBJC_IVAR____TtC3VFX8VFXScene_entityManager);
  v7[3] = a1;
  v7[4] = a2;
  v8 = 0;
  v9 = 2;
  v10 = a3;
  v11 = a4;
  v12 = a5;
  return sub_1B1C276DC((void (*)(void))sub_1B1C2DB04, (uint64_t)v7);
}

uint64_t sub_1B1C2B51C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(char *), uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  int v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE v35[32];

  v30 = a7;
  v31 = a6;
  v14 = sub_1B2229124();
  v28 = *(_QWORD *)(v14 - 8);
  v29 = v14;
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)&v27 - v16;
  v18 = *(_QWORD *)(a8 - 8);
  MEMORY[0x1E0C80A78](v19, v20);
  v22 = (char *)&v27 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = v8;
  v23 = *(_QWORD *)(v8 + OBJC_IVAR____TtC3VFX8VFXScene_entityManager);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v32 = a1;
  v34 = a3;
  sub_1B1DA43FC(v23, v23, a1, a2, 0x200000000, a3, a4, (uint64_t)v35);
  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BB150, MEMORY[0x1E0DEE9B8] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  v24 = swift_dynamicCast();
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v18 + 56);
  if (v24)
  {
    v25(v17, 0, 1, a8);
    (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v22, v17, a8);
    v31(v22);
    sub_1B1C2B70C(v33, v32, a2, v34, a4, (uint64_t)v22, a8);
    return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v22, a8);
  }
  else
  {
    v25(v17, 1, 1, a8);
    return (*(uint64_t (**)(char *, uint64_t))(v28 + 8))(v17, v29);
  }
}

uint64_t sub_1B1C2B70C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t *v14;
  _QWORD v16[5];
  int v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22[4];

  v22[3] = a7;
  v14 = sub_1B1A137F4(v22);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a7 - 8) + 16))(v14, a6, a7);
  v16[2] = *(_QWORD *)(a1 + OBJC_IVAR____TtC3VFX8VFXScene_entityManager);
  v16[3] = a2;
  v16[4] = a3;
  v17 = 0;
  v18 = 2;
  v19 = a4;
  v20 = a5;
  v21 = v22;
  sub_1B1C276DC((void (*)(void))sub_1B1C2DB04, (uint64_t)v16);
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v22);
}

uint64_t sub_1B1C2B7C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t))
{
  uint64_t v5;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v21[5];
  int v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  __int128 *v26;
  __int128 v27;
  ValueMetadata *v28;
  _UNKNOWN **v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33[4];
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v11 = *(_QWORD *)(v5 + OBJC_IVAR____TtC3VFX8VFXScene_entityManager);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1B1DA43FC(v11, v11, a1, a2, 0x200000000, a3, a4, (uint64_t)&v30);
  if (!v31)
    return sub_1B1A0DD70((uint64_t)&v30);
  sub_1B1A0DDAC(&v30, v33);
  v28 = &type metadata for Extensions;
  v29 = &off_1E63744C8;
  sub_1B1B7D784((uint64_t *)&v27, v33);
  sub_1B1A02518(&v27, (uint64_t)&v30);
  v12 = v31;
  v13 = v32;
  sub_1B19FC264((uint64_t)&v30, v31);
  v14 = sub_1B1EFF760(v12, v13);
  a5(v14);
  v15 = v31;
  v16 = sub_1B19FA070(&v30, v31);
  v28 = (ValueMetadata *)v15;
  v17 = sub_1B1A137F4((uint64_t *)&v27);
  v18 = (*(uint64_t (**)(uint64_t *, _QWORD *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v17, v16, v15);
  MEMORY[0x1E0C80A78](v18, v19);
  v21[2] = v11;
  v21[3] = a1;
  v21[4] = a2;
  v22 = 0;
  v23 = 2;
  v24 = a3;
  v25 = a4;
  v26 = &v27;
  sub_1B1C276DC((void (*)(void))sub_1B1C2DB04, (uint64_t)v21);
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v33);
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v27);
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v30);
}

id sub_1B1C2BA5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v4[8];

  v4[3] = a1;
  v4[4] = a2;
  v4[5] = a3;
  return sub_1B1C276DC((void (*)(void))sub_1B1C2DB18, (uint64_t)v4);
}

uint64_t sub_1B1C2BAB0(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, double a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[2];
  _QWORD v18[7];
  char v19[16];
  uint64_t v20;

  v8 = *(_QWORD *)(a1 + OBJC_IVAR____TtC3VFX8VFXScene_entityManager);
  v9 = *(_QWORD *)(*(_QWORD *)(v8 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues)
                 + 8 * *(_QWORD *)thread_worker_index(a5)
                 + 8);
  v10 = *(_QWORD *)(v9 + 32);
  ecs_stack_allocator_push_snapshot(v10);
  v19[0] = 1;
  sub_1B1DCE35C(a3, a4, v8, 0x100000000uLL, (uint64_t)v18);
  v11 = v18[0];
  v12 = v18[3];
  sub_1B1C2F764((uint64_t)v18, (uint64_t)v19);
  if (v20)
  {
    ecs_stack_allocator_pop_snapshot(v10);
    v13 = sub_1B2229304();
    result = swift_conformsToProtocol2();
    if (result)
    {
      sub_1B1E1A668(a2, v11, v13, result, v12);
      swift_release();
      return swift_bridgeObjectRelease();
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    v15 = *(_QWORD *)(v8 + OBJC_IVAR____TtC3VFX13EntityManager_logger);
    swift_retain();
    sub_1B2229430();
    swift_bridgeObjectRelease();
    v17[1] = 0x80000001B2335210;
    sub_1B2228890();
    v16 = sub_1B2228E90();
    v17[0] = 0;
    (*(void (**)(uint64_t, _QWORD *, unint64_t, unint64_t))(*(_QWORD *)v15 + 88))(v16, v17, 0xD000000000000017, 0x80000001B2335210);
    swift_release();
    swift_bridgeObjectRelease();
    return ecs_stack_allocator_pop_snapshot(*(_QWORD *)(v9 + 32));
  }
  return result;
}

void sub_1B1C2BD3C(_QWORD *a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  char *v3;
  uint64_t v7;
  char *v8;

  v7 = *(_QWORD *)&v3[OBJC_IVAR____TtC3VFX8VFXScene_entityManager];
  v8 = v3;
  swift_bridgeObjectRetain();
  sub_1B1DA46EC(v7, v8, a1, a2, a3);
}

uint64_t sub_1B1C2BDB0@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>, double a5@<D0>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[2];
  _QWORD v18[7];
  char v19[16];
  uint64_t v20;

  v8 = *(_QWORD *)(a1 + OBJC_IVAR____TtC3VFX8VFXScene_entityManager);
  v9 = *(_QWORD *)(*(_QWORD *)(v8 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues)
                 + 8 * *(_QWORD *)thread_worker_index(a5)
                 + 8);
  v10 = *(_QWORD *)(v9 + 32);
  ecs_stack_allocator_push_snapshot(v10);
  v19[0] = 1;
  sub_1B1DCE35C(a2, a3, v8, 0x100000000uLL, (uint64_t)v18);
  v11 = v18[0];
  v12 = v18[3];
  sub_1B1C2F764((uint64_t)v18, (uint64_t)v19);
  if (v20)
  {
    ecs_stack_allocator_pop_snapshot(v10);
    v13 = sub_1B2229304();
    result = swift_conformsToProtocol2();
    if (result)
    {
      sub_1B1E1A57C(v11, v13, v12, a4);
      swift_release();
      return swift_bridgeObjectRelease();
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    v15 = *(_QWORD *)(v8 + OBJC_IVAR____TtC3VFX13EntityManager_logger);
    swift_retain();
    sub_1B2229430();
    swift_bridgeObjectRelease();
    v17[1] = 0x80000001B2335210;
    sub_1B2228890();
    v16 = sub_1B2228E90();
    v17[0] = 0;
    (*(void (**)(uint64_t, _QWORD *, unint64_t, unint64_t))(*(_QWORD *)v15 + 88))(v16, v17, 0xD000000000000017, 0x80000001B2335210);
    swift_release();
    swift_bridgeObjectRelease();
    result = ecs_stack_allocator_pop_snapshot(*(_QWORD *)(v9 + 32));
    *a4 = 0u;
    a4[1] = 0u;
  }
  return result;
}

uint64_t sub_1B1C2C0A4(_QWORD *a1, uint64_t a2, uint64_t a3, void (*a4)(char *), uint64_t a5, uint64_t a6)
{
  char *v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  int v21;
  void (*v22)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  void (*v29)(char *);

  v27 = a5;
  v29 = a4;
  v10 = sub_1B2229124();
  v25 = *(_QWORD *)(v10 - 8);
  v26 = v10;
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v24 - v12;
  v14 = *(_QWORD *)(a6 - 8);
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)&v24 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = *(_QWORD *)&v6[OBJC_IVAR____TtC3VFX8VFXScene_entityManager];
  v20 = v6;
  swift_bridgeObjectRetain();
  sub_1B1DA46EC(v19, v20, a1, a2, &v28);
  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BB150, MEMORY[0x1E0DEE9B8] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  v21 = swift_dynamicCast();
  v22 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56);
  if (v21)
  {
    v22(v13, 0, 1, a6);
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v18, v13, a6);
    v29(v18);
    sub_1B1C2C278((uint64_t)v20, (uint64_t)v18, (uint64_t)a1, a2, a6);
    return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v18, a6);
  }
  else
  {
    v22(v13, 1, 1, a6);
    return (*(uint64_t (**)(char *, uint64_t))(v25 + 8))(v13, v26);
  }
}

uint64_t sub_1B1C2C278(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v10;
  _QWORD v12[8];
  uint64_t v13[4];

  v13[3] = a5;
  v10 = sub_1B1A137F4(v13);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a5 - 8) + 16))(v10, a2, a5);
  v12[2] = a1;
  v12[3] = v13;
  v12[4] = a3;
  v12[5] = a4;
  sub_1B1C276DC((void (*)(void))sub_1B1C2F87C, (uint64_t)v12);
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v13);
}

uint64_t sub_1B1C2C318()
{
  int v0;
  uint64_t v2;

  if (qword_1ED4BF430 != -1)
    swift_once();
  swift_retain();
  v0 = sub_1B2228E90();
  if (qword_1ED4BF658 != -1)
    swift_once();
  v2 = 0;
  swift_retain();
  sub_1B1F1AD70(v0, &v2, 0xD00000000000003DLL, 0x80000001B2334850);
  swift_release();
  return swift_release();
}

uint64_t sub_1B1C2C4F0(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v7;

  v7 = *(_QWORD *)(v3 + OBJC_IVAR____TtC3VFX8VFXScene_entityManager);
  swift_retain();
  swift_bridgeObjectRetain();
  return sub_1B1D9EA90(v7, v7, a1, a2, 0x200000000, a3);
}

uint64_t sub_1B1C2C5F4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(_QWORD *)(v2 + OBJC_IVAR____TtC3VFX8VFXScene_entityManager);
  swift_retain();
  swift_bridgeObjectRetain();
  LOBYTE(a1) = sub_1B1DAE668(v5, v5, a1, a2, 0x200000000);
  swift_release();
  swift_bridgeObjectRelease();
  return a1 & 1;
}

id sub_1B1C2C818(uint64_t a1)
{
  char *v1;
  id v3;

  v3 = 0;
  sub_1B1D9ED98(*(_QWORD *)&v1[OBJC_IVAR____TtC3VFX8VFXScene_entityManager], &v3, v1, a1);
  return v3;
}

uint64_t sub_1B1C2C874(id *a1, void *a2, int a3)
{
  char *v6;
  id v7;
  id v8;
  char *v9;
  id v10;

  objc_allocWithZone((Class)type metadata accessor for VFXEffect());
  v6 = a2;
  v7 = sub_1B1F44B5C(v6, a3, 0, 0xE000000000000000);
  v8 = *a1;
  *a1 = v7;

  v9 = &v6[OBJC_IVAR____TtC3VFX8VFXScene_effects];
  v10 = *a1;
  MEMORY[0x1B5E2064C]();
  if (*(_QWORD *)((*(_QWORD *)v9 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*(_QWORD *)v9 & 0xFFFFFFFFFFFFFF8)
                                                                              + 0x18) >> 1)
    sub_1B2228AF4();
  sub_1B2228B30();
  return sub_1B2228AD0();
}

id sub_1B1C2C9A8(void *a1)
{
  char *v1;
  id v3;

  v3 = 0;
  sub_1B1D9EF44(*(_QWORD *)&v1[OBJC_IVAR____TtC3VFX8VFXScene_entityManager], a1, v1, &v3);
  return v3;
}

uint64_t sub_1B1C2CA08(uint64_t a1, char *a2, id *a3)
{
  char v5;
  int v6;
  uint64_t v7;
  char *v8;
  id v9;
  id v10;
  id v11;
  char *v12;
  id v13;

  if ((*(_BYTE *)(a1 + OBJC_IVAR____TtC3VFX8VFXScene_templateWasPrepared) & 1) != 0)
    v5 = 0;
  else
    v5 = *(_BYTE *)(*(_QWORD *)&a2[OBJC_IVAR____TtC3VFX8VFXScene_loadOptions]
                  + OBJC_IVAR___VFXSceneLoadOptions_automaticallyPrepareScene);
  v6 = sub_1B1CBCB84(*(_QWORD *)(a1 + OBJC_IVAR____TtC3VFX8VFXScene_entityManager), v5, 0);
  *(_QWORD *)&a2[OBJC_IVAR____TtC3VFX8VFXScene_templateRemapTable] = v7;
  swift_bridgeObjectRelease();
  v8 = a2;
  swift_bridgeObjectRetain();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  sub_1B22295EC();
  v9 = objc_allocWithZone((Class)type metadata accessor for VFXEffect());
  v10 = sub_1B1F44B5C(v8, v6, 0, 0xE000000000000000);
  v11 = *a3;
  *a3 = v10;

  v12 = &v8[OBJC_IVAR____TtC3VFX8VFXScene_effects];
  v13 = *a3;
  MEMORY[0x1B5E2064C]();
  if (*(_QWORD *)((*(_QWORD *)v12 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*(_QWORD *)v12 & 0xFFFFFFFFFFFFFF8)
                                                                               + 0x18) >> 1)
    sub_1B2228AF4();
  sub_1B2228B30();
  return sub_1B2228AD0();
}

void sub_1B1C2CC30(void *a1)
{
  char *v1;

  sub_1B1D9F164(*(_QWORD *)&v1[OBJC_IVAR____TtC3VFX8VFXScene_entityManager], v1, a1);
}

void sub_1B1C2CCF8()
{
  char *v0;

  sub_1B1D9F49C(*(_QWORD *)&v0[OBJC_IVAR____TtC3VFX8VFXScene_entityManager], v0);
}

uint64_t sub_1B1C2CD40(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  void *v7;

  v2 = OBJC_IVAR____TtC3VFX8VFXScene_effects;
  v3 = *(_QWORD *)(a1 + OBJC_IVAR____TtC3VFX8VFXScene_effects);
  if (v3 >> 62)
  {
    swift_bridgeObjectRetain();
    v4 = sub_1B22296AC();
    if (!v4)
      goto LABEL_9;
  }
  else
  {
    v4 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v4)
      goto LABEL_9;
  }
  v5 = 0;
  do
  {
    if ((v3 & 0xC000000000000001) != 0)
      v6 = (char *)MEMORY[0x1B5E21018](v5, v3);
    else
      v6 = (char *)*(id *)(v3 + 8 * v5 + 32);
    v7 = v6;
    ++v5;
    sub_1B1B688C8(*(unsigned int *)&v6[OBJC_IVAR____TtC3VFX9VFXEffect_effectID] | ((unint64_t)v6[OBJC_IVAR____TtC3VFX9VFXEffect_effectID + 4] << 32), 0, 1);

  }
  while (v4 != v5);
LABEL_9:
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + v2) = MEMORY[0x1E0DEE9D8];
  return swift_bridgeObjectRelease();
}

void sub_1B1C2CE74(char *a1, uint64_t a2, void (*a3)(uint64_t, char *))
{
  uint64_t v4;
  char *v5;

  v4 = *(_QWORD *)&a1[OBJC_IVAR____TtC3VFX8VFXScene_entityManager];
  v5 = a1;
  a3(v4, v5);

}

uint64_t sub_1B1C2CECC()
{
  return sub_1B1F42F94(0x200000000, 1, 1);
}

id sub_1B1C2CF00()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  int v4;
  unint64_t v5;
  objc_class *v6;
  char *v7;
  char *v8;
  objc_super v10;
  char v11;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC3VFX8VFXScene_entityManager);
  v2 = **(_QWORD **)(v1 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues);
  v11 = 1;
  v3 = sub_1B217E048(0x100000000uLL, v2);
  v4 = v3;
  v5 = HIDWORD(v3);
  v6 = (objc_class *)type metadata accessor for VFXCoreCamera();
  v7 = (char *)objc_allocWithZone(v6);
  v8 = &v7[OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance];
  *(_DWORD *)v8 = v4;
  *((_DWORD *)v8 + 1) = v5;
  *((_QWORD *)v8 + 1) = v1;
  v10.receiver = v7;
  v10.super_class = v6;
  return objc_msgSendSuper2(&v10, sel_init);
}

uint64_t VFXScene.ScriptFunction.name.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t VFXScene.ScriptFunction.pointer.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t VFXScene.ScriptFunction.init(name:function:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  *a4 = result;
  a4[1] = a2;
  a4[2] = a3;
  return result;
}

Swift::Void __swiftcall VFXScene.LoadOptions.registerVFX2AuthoringSystems(_:)(Swift::Bool a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = 2147517449;
  if (a1)
    v2 = 0x1008000840FLL;
  *(_QWORD *)(v1 + OBJC_IVAR___VFXSceneLoadOptions_systemRegistrationOptions) = v2;
}

uint64_t VFXScene.assetManager.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC3VFX8VFXScene_entityManager);
  swift_getKeyPath();
  v2 = *(_QWORD *)(v1 + 176);
  swift_retain();
  v3 = sub_1B1F22924((uint64_t)&type metadata for AssetManagerInstance, (uint64_t)&off_1E639B010, v2, (void (*)(_QWORD *__return_ptr, uint64_t))sub_1B1B692E4);
  swift_release();
  swift_release();
  return v3;
}

void VFXScene.assetManager.setter(void *a1, uint64_t a2)
{
  sub_1B1C2DD20(a1, a2);

}

uint64_t VFXScene.initializeAssetManagerWithBundleURL(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int v13;
  char *v15;
  uint64_t v16[2];

  v1 = sub_1B2228110();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1, v3);
  v5 = (char *)v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)v16 - v8;
  v10 = *(_QWORD *)(v0 + OBJC_IVAR____TtC3VFX8VFXScene_entityManager);
  swift_getKeyPath();
  v11 = *(_QWORD *)(v10 + 176);
  swift_retain();
  v12 = (char *)sub_1B1F22924((uint64_t)&type metadata for AssetManagerInstance, (uint64_t)&off_1E639B010, v11, (void (*)(_QWORD *__return_ptr, uint64_t))sub_1B1B692E4);
  swift_release();
  swift_release();
  if (!v12)
  {
    sub_1B2228098();
    return (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v9, v1);
  }
  if (!*(_QWORD *)&v12[OBJC_IVAR____TtC3VFX12AssetManager_authoringFileManager])
  {
    sub_1B2228098();
    (*(void (**)(char *, char *, uint64_t))(v2 + 16))(v5, v9, v1);
    type metadata accessor for AssetFileManager();
    swift_allocObject();
    v15 = v12;
    *(_QWORD *)&v15[OBJC_IVAR____TtC3VFX12AssetManager_authoringFileManager] = sub_1B1D5688C(v5);

    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v9, v1);
  }
  if (qword_1ED4BF430 != -1)
    swift_once();
  swift_retain();
  v13 = sub_1B2228E90();
  if (qword_1ED4BF658 != -1)
    swift_once();
  v16[0] = 0;
  swift_retain();
  sub_1B1F1AD70(v13, v16, 0xD000000000000027, 0x80000001B2334890);
  swift_release();

  return swift_release();
}

Swift::Int64 __swiftcall VFXScene.entity(withTag:)(Swift::String_optional withTag)
{
  char *v1;
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v4;
  char *v5;
  BOOL v6;
  uint64_t v8;

  if (!withTag.value._object)
    return 0;
  object = withTag.value._object;
  countAndFlagsBits = withTag.value._countAndFlagsBits;
  v8 = 0xFFFFFFFFLL;
  v4 = *(_QWORD *)&v1[OBJC_IVAR____TtC3VFX8VFXScene_entityManager];
  v5 = v1;
  swift_bridgeObjectRetain();
  sub_1B1D9F4C8(v4, &v8, v5, countAndFlagsBits, (uint64_t)object);
  if (HIDWORD(v8))
    v6 = 0;
  else
    v6 = v8 == 0xFFFFFFFFLL;
  if (v6)
    return 0;
  else
    return v8 | ((unint64_t)HIDWORD(v8) << 32);
}

uint64_t sub_1B1C2D63C(uint64_t a1, _BYTE *a2, BOOL *a3)
{
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char v9;

  if (a1)
    v5 = a1;
  else
    v5 = 0xFFFFFFFFLL;
  v9 = 0;
  v6 = sub_1B20F26A4(v5, &v9);
  if (a2)
    *a2 = v9;
  if (a3)
  {
    v7 = sub_1B1FD568C((uint64_t)&type metadata for MovieFileAsset, (uint64_t)&off_1E637FDE0, v5)
      || sub_1B1FD568C((uint64_t)&type metadata for RenderGraphTextureTarget, (uint64_t)&off_1E63AF488, v5);
    *a3 = v7;
  }
  return v6;
}

uint64_t sub_1B1C2D74C(void (*a1)(uint64_t))
{
  uint64_t v1;
  uint64_t (*v3)(_QWORD);
  _DWORD *is_locked;
  uint64_t Strong;
  _DWORD *v6;

  pthread_mutex_lock(*(pthread_mutex_t **)(v1 + 64));
  v3 = runtime_thread_is_locked;
  is_locked = (_DWORD *)runtime_thread_is_locked(&runtime_thread_is_locked);
  ++*is_locked;
  Strong = swift_weakLoadStrong();
  if (Strong)
  {
    sub_1B1DAAED0();
    Strong = swift_release();
  }
  a1(Strong);
  if (swift_weakLoadStrong())
  {
    sub_1B1DAAE5C();
    swift_release();
  }
  v6 = (_DWORD *)v3(&runtime_thread_is_locked);
  --*v6;
  return pthread_mutex_unlock(*(pthread_mutex_t **)(v1 + 64));
}

uint64_t sub_1B1C2D830(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for BundleInfo();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void _s3VFX8VFXSceneC14forEngineNamedACSS_tcfc_0()
{
  _BYTE *v0;
  _BYTE *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;

  v1 = v0;
  v2 = OBJC_IVAR____TtC3VFX8VFXScene_loader;
  type metadata accessor for VFXLoader();
  swift_allocObject();
  sub_1B21218F8();
  *(_QWORD *)&v0[v2] = v3;
  *(_QWORD *)&v0[OBJC_IVAR____TtC3VFX8VFXScene_templateRemapTable] = 0;
  v0[OBJC_IVAR____TtC3VFX8VFXScene_templateWasPrepared] = 0;
  v4 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)&v0[OBJC_IVAR____TtC3VFX8VFXScene_effects] = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)&v0[OBJC_IVAR____TtC3VFX8VFXScene_entityObjects] = v4;
  *(_QWORD *)&v0[OBJC_IVAR____TtC3VFX8VFXScene__version] = 0;
  v0[OBJC_IVAR____TtC3VFX8VFXScene_isInsideRE] = 0;
  v0[OBJC_IVAR____TtC3VFX8VFXScene_isREAssetScene] = 0;
  v5 = OBJC_IVAR____TtC3VFX8VFXScene_transientDrawCall;
  *(_QWORD *)&v1[v5] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for VFXREDrawCall()), sel_init);
  v1[OBJC_IVAR____TtC3VFX8VFXScene_hasSharedEntityManager] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC3VFX8VFXScene_metalBinaryArchiveURLs] = 0;
  v6 = &v1[OBJC_IVAR____TtC3VFX8VFXScene_recordedMetalBinaryArchiveURL];
  v7 = sub_1B2228110();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
  *(_QWORD *)&v1[OBJC_IVAR____TtC3VFX8VFXScene_internalPixelFormat] = 115;
  v1[OBJC_IVAR____TtC3VFX8VFXScene_internalPixelFormatDepth] = 1;
  v1[OBJC_IVAR____TtC3VFX8VFXScene_useGammaBlending] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC3VFX8VFXScene_debugUIOptions] = 0;

  sub_1B2229688();
  __break(1u);
}

void sub_1B1C2DA04()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED4BA238)
  {
    v0 = sub_1B2228440();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED4BA238);
  }
}

unint64_t sub_1B1C2DA6C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1ED4B7AF0;
  if (!qword_1ED4B7AF0)
  {
    sub_1B1C2DA04();
    result = MEMORY[0x1B5E23E74](MEMORY[0x1E0C95F40], v1);
    atomic_store(result, (unint64_t *)&qword_1ED4B7AF0);
  }
  return result;
}

uint64_t sub_1B1C2DAB4()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1B1C2DAD8()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1B1C2DB04()
{
  return sub_1B1C2F81C();
}

uint64_t sub_1B1C2DB18(double a1)
{
  uint64_t v1;

  return sub_1B1C2BAB0(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD **)(v1 + 32), *(_QWORD *)(v1 + 40), a1);
}

uint64_t sub_1B1C2DB34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v21[5];
  int v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  __int128 *v26;
  __int128 v27;
  ValueMetadata *v28;
  _UNKNOWN **v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33[4];
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v11 = *(_QWORD *)(a5 + OBJC_IVAR____TtC3VFX8VFXScene_entityManager);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1B1DA43FC(v11, v11, a1, a2, 0x200000000, a3, a4, (uint64_t)&v30);
  if (!v31)
    return sub_1B1A0DD70((uint64_t)&v30);
  sub_1B1A0DDAC(&v30, v33);
  v28 = &type metadata for Extensions;
  v29 = &off_1E63744C8;
  sub_1B1B7D784((uint64_t *)&v27, v33);
  sub_1B1A02518(&v27, (uint64_t)&v30);
  v12 = v31;
  v13 = v32;
  sub_1B19FC264((uint64_t)&v30, v31);
  v14 = sub_1B1EFF760(v12, v13);
  (*(void (**)(uint64_t, uint64_t))(a6 + 16))(a6, v14);
  v15 = v31;
  v16 = sub_1B19FA070(&v30, v31);
  v28 = (ValueMetadata *)v15;
  v17 = sub_1B1A137F4((uint64_t *)&v27);
  v18 = (*(uint64_t (**)(uint64_t *, _QWORD *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v17, v16, v15);
  MEMORY[0x1E0C80A78](v18, v19);
  v21[2] = v11;
  v21[3] = a1;
  v21[4] = a2;
  v22 = 0;
  v23 = 2;
  v24 = a3;
  v25 = a4;
  v26 = &v27;
  sub_1B1C276DC((void (*)(void))sub_1B1C2DB04, (uint64_t)v21);
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v33);
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v27);
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v30);
}

void sub_1B1C2DD20(id a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  _QWORD *v6;

  v3 = *(_QWORD *)(v2 + OBJC_IVAR____TtC3VFX8VFXScene_entityManager);
  if (a1)
  {
    v4 = a1;
    type metadata accessor for AssetManager();
    a1 = (id)swift_dynamicCastClass();
    v5 = a1;
    if (a1)
      a1 = v4;
  }
  else
  {
    v5 = 0;
  }
  MEMORY[0x1E0C80A78](a1, a2);
  v6 = *(_QWORD **)(v3 + 176);
  swift_retain();
  sub_1B1F22244((uint64_t)&type metadata for AssetManagerInstance, (uint64_t)&off_1E639B010, v6, (void (*)(uint64_t))sub_1B1C2F74C);
  swift_release();

}

unint64_t sub_1B1C2DDE8()
{
  unint64_t result;

  result = qword_1EEF5C900;
  if (!qword_1EEF5C900)
  {
    result = MEMORY[0x1B5E23E74](&protocol conformance descriptor for PixelFormatDepth, &type metadata for PixelFormatDepth);
    atomic_store(result, (unint64_t *)&qword_1EEF5C900);
  }
  return result;
}

unint64_t sub_1B1C2DE30()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EEF5C908;
  if (!qword_1EEF5C908)
  {
    sub_1B1A02758(255, &qword_1EEF5C910, (uint64_t)&type metadata for PixelFormatDepth, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    result = MEMORY[0x1B5E23E74](MEMORY[0x1E0DEAF50], v1);
    atomic_store(result, (unint64_t *)&qword_1EEF5C908);
  }
  return result;
}

uint64_t sub_1B1C2DE90@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *(_QWORD *)(*a1 + OBJC_IVAR____TtC3VFX8VFXScene_effects);
  return swift_bridgeObjectRetain();
}

uint64_t sub_1B1C2DEA8(_QWORD *a1, _QWORD *a2)
{
  *(_QWORD *)(*a2 + OBJC_IVAR____TtC3VFX8VFXScene_effects) = *a1;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

_QWORD *sub_1B1C2DEE0@<X0>(_QWORD *result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *(_BYTE *)(*result + OBJC_IVAR___VFXSceneLoadOptions_isAuthoringWorld);
  return result;
}

_BYTE *sub_1B1C2DEF8(_BYTE *result, _QWORD *a2)
{
  *(_BYTE *)(*a2 + OBJC_IVAR___VFXSceneLoadOptions_isAuthoringWorld) = *result;
  return result;
}

_QWORD *sub_1B1C2DF10@<X0>(_QWORD *result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *(_BYTE *)(*result + OBJC_IVAR___VFXSceneLoadOptions_isVFX2);
  return result;
}

_BYTE *sub_1B1C2DF28(_BYTE *result, _QWORD *a2)
{
  *(_BYTE *)(*a2 + OBJC_IVAR___VFXSceneLoadOptions_isVFX2) = *result;
  return result;
}

_QWORD *sub_1B1C2DF40@<X0>(_QWORD *result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *(_BYTE *)(*result + OBJC_IVAR___VFXSceneLoadOptions_enableRuntimeScriptCompilation);
  return result;
}

_BYTE *sub_1B1C2DF58(_BYTE *result, _QWORD *a2)
{
  *(_BYTE *)(*a2 + OBJC_IVAR___VFXSceneLoadOptions_enableRuntimeScriptCompilation) = *result;
  return result;
}

_QWORD *sub_1B1C2DF70@<X0>(_QWORD *result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *(_BYTE *)(*result + OBJC_IVAR___VFXSceneLoadOptions_allowLoadingFromFuture);
  return result;
}

_BYTE *sub_1B1C2DF88(_BYTE *result, _QWORD *a2)
{
  *(_BYTE *)(*a2 + OBJC_IVAR___VFXSceneLoadOptions_allowLoadingFromFuture) = *result;
  return result;
}

_QWORD *sub_1B1C2DFA0@<X0>(_QWORD *result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *(_BYTE *)(*result + OBJC_IVAR___VFXSceneLoadOptions_setupAsTemplate);
  return result;
}

_BYTE *sub_1B1C2DFB8(_BYTE *result, _QWORD *a2)
{
  *(_BYTE *)(*a2 + OBJC_IVAR___VFXSceneLoadOptions_setupAsTemplate) = *result;
  return result;
}

_QWORD *sub_1B1C2DFD0@<X0>(_QWORD *result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *(_BYTE *)(*result + OBJC_IVAR___VFXSceneLoadOptions_automaticallyPrepareScene);
  return result;
}

_BYTE *sub_1B1C2DFE8(_BYTE *result, _QWORD *a2)
{
  *(_BYTE *)(*a2 + OBJC_IVAR___VFXSceneLoadOptions_automaticallyPrepareScene) = *result;
  return result;
}

_QWORD *sub_1B1C2E000@<X0>(_QWORD *result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *(_BYTE *)(*result + OBJC_IVAR___VFXSceneLoadOptions_setupAsyncRuntime);
  return result;
}

_BYTE *sub_1B1C2E018(_BYTE *result, _QWORD *a2)
{
  *(_BYTE *)(*a2 + OBJC_IVAR___VFXSceneLoadOptions_setupAsyncRuntime) = *result;
  return result;
}

_QWORD *sub_1B1C2E030@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *(_QWORD *)(*result + OBJC_IVAR___VFXSceneLoadOptions_asyncRuntimeLock);
  return result;
}

_QWORD *sub_1B1C2E048(_QWORD *result, _QWORD *a2)
{
  *(_QWORD *)(*a2 + OBJC_IVAR___VFXSceneLoadOptions_asyncRuntimeLock) = *result;
  return result;
}

_QWORD *sub_1B1C2E060@<X0>(_QWORD *result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *(_BYTE *)(*result + OBJC_IVAR___VFXSceneLoadOptions_loadBindingsMetadata);
  return result;
}

_BYTE *sub_1B1C2E078(_BYTE *result, _QWORD *a2)
{
  *(_BYTE *)(*a2 + OBJC_IVAR___VFXSceneLoadOptions_loadBindingsMetadata) = *result;
  return result;
}

_QWORD *sub_1B1C2E090@<X0>(_QWORD *result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *(_BYTE *)(*result + OBJC_IVAR___VFXSceneLoadOptions_enableParallelDecoding);
  return result;
}

_BYTE *sub_1B1C2E0A8(_BYTE *result, _QWORD *a2)
{
  *(_BYTE *)(*a2 + OBJC_IVAR___VFXSceneLoadOptions_enableParallelDecoding) = *result;
  return result;
}

_QWORD *sub_1B1C2E0C0@<X0>(_QWORD *result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *(_BYTE *)(*result + OBJC_IVAR___VFXSceneLoadOptions_setupRenderer);
  return result;
}

_BYTE *sub_1B1C2E0D8(_BYTE *result, _QWORD *a2)
{
  *(_BYTE *)(*a2 + OBJC_IVAR___VFXSceneLoadOptions_setupRenderer) = *result;
  return result;
}

_QWORD *sub_1B1C2E0F0@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *(_QWORD *)(*result + OBJC_IVAR___VFXSceneLoadOptions_colorPixelFormat);
  return result;
}

_QWORD *sub_1B1C2E108(_QWORD *result, _QWORD *a2)
{
  *(_QWORD *)(*a2 + OBJC_IVAR___VFXSceneLoadOptions_colorPixelFormat) = *result;
  return result;
}

_QWORD *sub_1B1C2E120@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *(_QWORD *)(*result + OBJC_IVAR___VFXSceneLoadOptions_depthPixelFormat);
  return result;
}

_QWORD *sub_1B1C2E138(_QWORD *result, _QWORD *a2)
{
  *(_QWORD *)(*a2 + OBJC_IVAR___VFXSceneLoadOptions_depthPixelFormat) = *result;
  return result;
}

_QWORD *sub_1B1C2E150@<X0>(_QWORD *result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *(_BYTE *)(*result + OBJC_IVAR___VFXSceneLoadOptions_enableDeferredRendering);
  return result;
}

_BYTE *sub_1B1C2E168(_BYTE *result, _QWORD *a2)
{
  *(_BYTE *)(*a2 + OBJC_IVAR___VFXSceneLoadOptions_enableDeferredRendering) = *result;
  return result;
}

_QWORD *sub_1B1C2E180@<X0>(_QWORD *result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = (*(_BYTE *)(*result + OBJC_IVAR___VFXSceneLoadOptions_enableDeferredRendering) == 2) | *(_BYTE *)(*result + OBJC_IVAR___VFXSceneLoadOptions_enableDeferredRendering) & 1;
  return result;
}

_BYTE *sub_1B1C2E1A8(_BYTE *result, _QWORD *a2)
{
  *(_BYTE *)(*a2 + OBJC_IVAR___VFXSceneLoadOptions_enableDeferredRendering) = *result;
  return result;
}

_QWORD *sub_1B1C2E1C0@<X0>(_QWORD *result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *(_BYTE *)(*result + OBJC_IVAR___VFXSceneLoadOptions_internalPixelFormatDepth);
  return result;
}

_BYTE *sub_1B1C2E1D8(_BYTE *result, _QWORD *a2)
{
  *(_BYTE *)(*a2 + OBJC_IVAR___VFXSceneLoadOptions_internalPixelFormatDepth) = *result;
  return result;
}

_QWORD *sub_1B1C2E1F0@<X0>(_QWORD *result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *(_BYTE *)(*result + OBJC_IVAR___VFXSceneLoadOptions_useGammaBlending);
  return result;
}

_BYTE *sub_1B1C2E208(_BYTE *result, _QWORD *a2)
{
  *(_BYTE *)(*a2 + OBJC_IVAR___VFXSceneLoadOptions_useGammaBlending) = *result;
  return result;
}

_QWORD *sub_1B1C2E220@<X0>(_QWORD *result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *(_BYTE *)(*result + OBJC_IVAR___VFXSceneLoadOptions_doNotClearRenderOutput);
  return result;
}

_BYTE *sub_1B1C2E238(_BYTE *result, _QWORD *a2)
{
  *(_BYTE *)(*a2 + OBJC_IVAR___VFXSceneLoadOptions_doNotClearRenderOutput) = *result;
  return result;
}

uint64_t sub_1B1C2E250@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1B1C2E3B0(a1, &OBJC_IVAR___VFXSceneLoadOptions_device, MEMORY[0x1E0DEEED0], a2);
}

uint64_t sub_1B1C2E264(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1C2E3E0(a1, a2, a3, a4, &OBJC_IVAR___VFXSceneLoadOptions_device, (void (*)(void))MEMORY[0x1E0DEEED0], (uint64_t (*)(uint64_t))MEMORY[0x1E0DEEEC0]);
}

uint64_t sub_1B1C2E280@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1B1C2E3B0(a1, &OBJC_IVAR___VFXSceneLoadOptions_commandQueue, MEMORY[0x1E0DEEED0], a2);
}

uint64_t sub_1B1C2E294(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1C2E3E0(a1, a2, a3, a4, &OBJC_IVAR___VFXSceneLoadOptions_commandQueue, (void (*)(void))MEMORY[0x1E0DEEED0], (uint64_t (*)(uint64_t))MEMORY[0x1E0DEEEC0]);
}

uint64_t sub_1B1C2E2B0@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;

  v2 = (_QWORD *)(*a1 + OBJC_IVAR___VFXSceneLoadOptions_clientID);
  v3 = v2[1];
  *a2 = *v2;
  a2[1] = v3;
  return swift_bridgeObjectRetain();
}

uint64_t sub_1B1C2E2CC(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v3 = *a1;
  v2 = a1[1];
  v4 = (_QWORD *)(*a2 + OBJC_IVAR___VFXSceneLoadOptions_clientID);
  *v4 = v3;
  v4[1] = v2;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B1C2E308@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1B19EC90C(*a1 + OBJC_IVAR___VFXSceneLoadOptions_metalLibraryURL, a2);
}

uint64_t sub_1B1C2E320(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1C2A330(a1, a2, a3, a4, &OBJC_IVAR___VFXSceneLoadOptions_metalLibraryURL);
}

_QWORD *sub_1B1C2E33C@<X0>(_QWORD *result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = *(_DWORD *)(*result + OBJC_IVAR___VFXSceneLoadOptions_peerPid);
  return result;
}

_DWORD *sub_1B1C2E354(_DWORD *result, _QWORD *a2)
{
  *(_DWORD *)(*a2 + OBJC_IVAR___VFXSceneLoadOptions_peerPid) = *result;
  return result;
}

_QWORD *sub_1B1C2E36C@<X0>(_QWORD *result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = *(_DWORD *)(*result + OBJC_IVAR___VFXSceneLoadOptions_peerTaskIdentity);
  return result;
}

_DWORD *sub_1B1C2E384(_DWORD *result, _QWORD *a2)
{
  *(_DWORD *)(*a2 + OBJC_IVAR___VFXSceneLoadOptions_peerTaskIdentity) = *result;
  return result;
}

uint64_t sub_1B1C2E39C@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1B1C2E3B0(a1, &OBJC_IVAR____TtC3VFX8VFXScene_metalBinaryArchiveURLs, MEMORY[0x1E0DEEB18], a2);
}

uint64_t sub_1B1C2E3B0@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X3>, uint64_t (*a3)(void)@<X4>, _QWORD *a4@<X8>)
{
  *a4 = *(_QWORD *)(*a1 + *a2);
  return a3();
}

uint64_t sub_1B1C2E3C4(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1C2E3E0(a1, a2, a3, a4, &OBJC_IVAR____TtC3VFX8VFXScene_metalBinaryArchiveURLs, (void (*)(void))MEMORY[0x1E0DEEB18], (uint64_t (*)(uint64_t))MEMORY[0x1E0DEEB08]);
}

uint64_t sub_1B1C2E3E0(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4, _QWORD *a5, void (*a6)(void), uint64_t (*a7)(uint64_t))
{
  uint64_t v7;

  v7 = *(_QWORD *)(*a2 + *a5);
  *(_QWORD *)(*a2 + *a5) = *a1;
  a6();
  return a7(v7);
}

uint64_t sub_1B1C2E424@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1B19EC90C(*a1 + OBJC_IVAR____TtC3VFX8VFXScene_recordedMetalBinaryArchiveURL, a2);
}

uint64_t sub_1B1C2E43C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1C2A330(a1, a2, a3, a4, &OBJC_IVAR____TtC3VFX8VFXScene_recordedMetalBinaryArchiveURL);
}

_QWORD *sub_1B1C2E458@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *(_QWORD *)(*result + OBJC_IVAR____TtC3VFX8VFXScene_internalPixelFormat);
  return result;
}

_QWORD *sub_1B1C2E470(_QWORD *result, _QWORD *a2)
{
  *(_QWORD *)(*a2 + OBJC_IVAR____TtC3VFX8VFXScene_internalPixelFormat) = *result;
  return result;
}

_QWORD *sub_1B1C2E488@<X0>(_QWORD *result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *(_BYTE *)(*result + OBJC_IVAR____TtC3VFX8VFXScene_internalPixelFormatDepth);
  return result;
}

_BYTE *sub_1B1C2E4A0(_BYTE *result, _QWORD *a2)
{
  *(_BYTE *)(*a2 + OBJC_IVAR____TtC3VFX8VFXScene_internalPixelFormatDepth) = *result;
  return result;
}

_QWORD *sub_1B1C2E4B8@<X0>(_QWORD *result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *(_BYTE *)(*result + OBJC_IVAR____TtC3VFX8VFXScene_useGammaBlending);
  return result;
}

_BYTE *sub_1B1C2E4D0(_BYTE *result, _QWORD *a2)
{
  *(_BYTE *)(*a2 + OBJC_IVAR____TtC3VFX8VFXScene_useGammaBlending) = *result;
  return result;
}

_QWORD *sub_1B1C2E4E8@<X0>(_QWORD *result@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  char v3;

  v2 = *(_QWORD *)(*result + OBJC_IVAR____TtC3VFX8VFXScene_entityManager) + OBJC_IVAR____TtC3VFX13EntityManager_clock;
  if (*(_BYTE *)(v2 + 96) == 1)
    v3 = *(_BYTE *)(v2 + 99) ^ 1;
  else
    v3 = 0;
  *a2 = v3 & 1;
  return result;
}

_BYTE *sub_1B1C2E530(_BYTE *result, _QWORD *a2)
{
  *(_BYTE *)(*(_QWORD *)(*a2 + OBJC_IVAR____TtC3VFX8VFXScene_entityManager)
           + OBJC_IVAR____TtC3VFX13EntityManager_clock
           + 96) = *result;
  return result;
}

_QWORD *sub_1B1C2E55C@<X0>(_QWORD *result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *(_BYTE *)(*(_QWORD *)(*result + OBJC_IVAR____TtC3VFX8VFXScene_entityManager)
                 + OBJC_IVAR____TtC3VFX13EntityManager_clock
                 + 97);
  return result;
}

unsigned __int8 *sub_1B1C2E588(unsigned __int8 *result, _QWORD *a2)
{
  int v2;
  uint64_t v3;

  v2 = *result;
  v3 = *(_QWORD *)(*a2 + OBJC_IVAR____TtC3VFX8VFXScene_entityManager) + OBJC_IVAR____TtC3VFX13EntityManager_clock;
  *(_BYTE *)(v3 + 97) = v2;
  if (v2 == 1)
    *(_BYTE *)(v3 + 98) = 0;
  return result;
}

float sub_1B1C2E5C0@<S0>(_QWORD *a1@<X0>, float *a2@<X8>)
{
  float result;

  result = *(float *)(*(_QWORD *)(*(_QWORD *)(*a1 + OBJC_IVAR____TtC3VFX8VFXScene_entityManager)
                                + OBJC_IVAR____TtC3VFX13EntityManager_scheduler)
                    + 208);
  *a2 = result;
  return result;
}

float sub_1B1C2E5EC(float *a1, _QWORD *a2)
{
  float result;

  result = *a1;
  *(float *)(*(_QWORD *)(*(_QWORD *)(*a2 + OBJC_IVAR____TtC3VFX8VFXScene_entityManager)
                       + OBJC_IVAR____TtC3VFX13EntityManager_scheduler)
           + 208) = *a1;
  return result;
}

void sub_1B1C2E618(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void sub_1B1C2E624(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

_QWORD *sub_1B1C2E630@<X0>(_QWORD *result@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)(*result + OBJC_IVAR____TtC3VFX8VFXScene_entityManager)
                 + OBJC_IVAR____TtC3VFX13EntityManager_renderer);
  if (v2)
    LOBYTE(v2) = *(_BYTE *)(v2 + 321);
  *a2 = v2;
  return result;
}

uint64_t *sub_1B1C2E660(char *a1)
{
  return sub_1B1C2AB94(*a1);
}

char *sub_1B1C2E684()
{
  return sel_assetManager;
}

id sub_1B1C2E690@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, sel_assetManager);
  *a2 = result;
  return result;
}

id sub_1B1C2E6C8(_QWORD *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setAssetManager_, *a1);
}

ValueMetadata *type metadata accessor for PixelFormatDepth()
{
  return &type metadata for PixelFormatDepth;
}

uint64_t sub_1B1C2E6EC()
{
  return type metadata accessor for VFXScene(0);
}

uint64_t method lookup function for VFXScene()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of VFXScene.version.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x158))();
}

uint64_t dispatch thunk of VFXScene.__allocating_init(options:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 440))();
}

uint64_t dispatch thunk of VFXScene.__allocating_init(contentsOf:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 448))();
}

uint64_t dispatch thunk of VFXScene.__allocating_init(forEngineNamed:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 456))();
}

uint64_t dispatch thunk of VFXScene.__allocating_init(entityManager:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 488))();
}

uint64_t dispatch thunk of VFXScene.metalBinaryArchiveURLs.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1F0))();
}

uint64_t dispatch thunk of VFXScene.metalBinaryArchiveURLs.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1F8))();
}

uint64_t dispatch thunk of VFXScene.metalBinaryArchiveURLs.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x200))();
}

uint64_t dispatch thunk of VFXScene.recordedMetalBinaryArchiveURL.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x208))();
}

uint64_t dispatch thunk of VFXScene.recordedMetalBinaryArchiveURL.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x210))();
}

uint64_t dispatch thunk of VFXScene.recordedMetalBinaryArchiveURL.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x218))();
}

uint64_t dispatch thunk of VFXScene.internalPixelFormat.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x220))();
}

uint64_t dispatch thunk of VFXScene.internalPixelFormat.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x228))();
}

uint64_t dispatch thunk of VFXScene.internalPixelFormat.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x230))();
}

uint64_t dispatch thunk of VFXScene.internalPixelFormatDepth.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x238))();
}

uint64_t dispatch thunk of VFXScene.internalPixelFormatDepth.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x240))();
}

uint64_t dispatch thunk of VFXScene.internalPixelFormatDepth.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x248))();
}

uint64_t dispatch thunk of VFXScene.useGammaBlending.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x250))();
}

uint64_t dispatch thunk of VFXScene.useGammaBlending.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x258))();
}

uint64_t dispatch thunk of VFXScene.useGammaBlending.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x260))();
}

uint64_t dispatch thunk of VFXScene.isPlaying.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x288))();
}

uint64_t dispatch thunk of VFXScene.isPlaying.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x290))();
}

uint64_t dispatch thunk of VFXScene.isPlaying.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x298))();
}

uint64_t dispatch thunk of VFXScene.isFrozen.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x2A8))();
}

uint64_t dispatch thunk of VFXScene.isFrozen.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x2B0))();
}

uint64_t dispatch thunk of VFXScene.timeScale.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x2C0))();
}

uint64_t dispatch thunk of VFXScene.timeScale.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x2C8))();
}

uint64_t dispatch thunk of VFXScene.allowsCameraControl.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x2D0))();
}

uint64_t dispatch thunk of VFXScene.allowsCameraControl.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x2D8))();
}

uint64_t dispatch thunk of VFXScene.allowsCameraControl.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x2E0))();
}

uint64_t dispatch thunk of VFXScene.showStatistics.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x2E8))();
}

uint64_t dispatch thunk of VFXScene.showStatistics.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x2F0))();
}

uint64_t dispatch thunk of VFXScene.showStatistics.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x2F8))();
}

uint64_t dispatch thunk of VFXScene.additiveWritesToAlpha.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x300))();
}

uint64_t dispatch thunk of VFXScene.additiveWritesToAlpha.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x308))();
}

uint64_t dispatch thunk of VFXScene.additiveWritesToAlpha.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x310))();
}

uint64_t dispatch thunk of VFXScene.binding(of:named:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x328))();
}

uint64_t dispatch thunk of VFXScene.firstBinding(named:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x330))();
}

uint64_t dispatch thunk of VFXScene.bindings.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x338))();
}

uint64_t dispatch thunk of VFXScene.update(deltaTime:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x340))();
}

uint64_t dispatch thunk of VFXScene.restart()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x348))();
}

uint64_t dispatch thunk of VFXScene.prepare()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x350))();
}

uint64_t dispatch thunk of VFXScene.clearCaches()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x358))();
}

uint64_t dispatch thunk of VFXScene.parameter(of:named:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x368))();
}

uint64_t dispatch thunk of VFXScene.setParameter(of:named:_:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x370))();
}

uint64_t dispatch thunk of VFXScene.withParameter<A>(of:named:type:_:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x378))();
}

uint64_t dispatch thunk of VFXScene.withPointerToParameter(of:named:block:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x380))();
}

uint64_t dispatch thunk of VFXScene.setValue(_:atPath:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x388))();
}

uint64_t dispatch thunk of VFXScene.value(atPath:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x390))();
}

uint64_t dispatch thunk of VFXScene.withValue<A>(atPath:type:_:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x398))();
}

uint64_t dispatch thunk of VFXScene.withPointerToValue(atPath:block:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x3A0))();
}

uint64_t dispatch thunk of VFXScene.setEnabled(_:enabled:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x3A8))();
}

uint64_t dispatch thunk of VFXScene.isEnabled(_:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x3B0))();
}

uint64_t dispatch thunk of VFXScene.addEffect(withEffectID:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x3C8))();
}

uint64_t dispatch thunk of VFXScene.addEffect(fromTemplate:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x3D0))();
}

uint64_t dispatch thunk of VFXScene.removeEffect(_:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x3D8))();
}

uint64_t dispatch thunk of VFXScene.removeAllEffects()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x3E0))();
}

uint64_t dispatch thunk of VFXScene.authoringBindings.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x3F0))();
}

uint64_t dispatch thunk of VFXScene.makeDefaultCamera()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x3F8))();
}

uint64_t sub_1B1C2ED54()
{
  return type metadata accessor for VFXScene.LoadOptions(0);
}

uint64_t method lookup function for VFXScene.LoadOptions()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of VFXScene.LoadOptions.isAuthoringWorld.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x128))();
}

uint64_t dispatch thunk of VFXScene.LoadOptions.isAuthoringWorld.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x130))();
}

uint64_t dispatch thunk of VFXScene.LoadOptions.isAuthoringWorld.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x138))();
}

uint64_t dispatch thunk of VFXScene.LoadOptions.isVFX2.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x140))();
}

uint64_t dispatch thunk of VFXScene.LoadOptions.isVFX2.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x148))();
}

uint64_t dispatch thunk of VFXScene.LoadOptions.isVFX2.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x150))();
}

uint64_t dispatch thunk of VFXScene.LoadOptions.enableRuntimeScriptCompilation.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x158))();
}

uint64_t dispatch thunk of VFXScene.LoadOptions.enableRuntimeScriptCompilation.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x160))();
}

uint64_t dispatch thunk of VFXScene.LoadOptions.enableRuntimeScriptCompilation.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x168))();
}

uint64_t dispatch thunk of VFXScene.LoadOptions.allowLoadingFromFuture.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x170))();
}

uint64_t dispatch thunk of VFXScene.LoadOptions.allowLoadingFromFuture.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x178))();
}

uint64_t dispatch thunk of VFXScene.LoadOptions.allowLoadingFromFuture.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x180))();
}

uint64_t dispatch thunk of VFXScene.LoadOptions.setupAsTemplate.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x188))();
}

uint64_t dispatch thunk of VFXScene.LoadOptions.setupAsTemplate.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x198))();
}

uint64_t dispatch thunk of VFXScene.LoadOptions.automaticallyPrepareScene.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1A0))();
}

uint64_t dispatch thunk of VFXScene.LoadOptions.automaticallyPrepareScene.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1B0))();
}

uint64_t dispatch thunk of VFXScene.LoadOptions.setupAsyncRuntime.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1B8))();
}

uint64_t dispatch thunk of VFXScene.LoadOptions.setupAsyncRuntime.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1C8))();
}

uint64_t dispatch thunk of VFXScene.LoadOptions.asyncRuntimeLock.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1E8))();
}

uint64_t dispatch thunk of VFXScene.LoadOptions.asyncRuntimeLock.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1F0))();
}

uint64_t dispatch thunk of VFXScene.LoadOptions.asyncRuntimeLock.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1F8))();
}

uint64_t dispatch thunk of VFXScene.LoadOptions.loadBindingsMetadata.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x200))();
}

uint64_t dispatch thunk of VFXScene.LoadOptions.loadBindingsMetadata.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x210))();
}

uint64_t dispatch thunk of VFXScene.LoadOptions.enableParallelDecoding.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x218))();
}

uint64_t dispatch thunk of VFXScene.LoadOptions.enableParallelDecoding.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x220))();
}

uint64_t dispatch thunk of VFXScene.LoadOptions.enableParallelDecoding.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x228))();
}

uint64_t dispatch thunk of VFXScene.LoadOptions.setupRenderer.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x230))();
}

uint64_t dispatch thunk of VFXScene.LoadOptions.setupRenderer.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x238))();
}

uint64_t dispatch thunk of VFXScene.LoadOptions.setupRenderer.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x240))();
}

uint64_t dispatch thunk of VFXScene.LoadOptions.colorPixelFormat.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x248))();
}

uint64_t dispatch thunk of VFXScene.LoadOptions.colorPixelFormat.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x250))();
}

uint64_t dispatch thunk of VFXScene.LoadOptions.colorPixelFormat.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x258))();
}

uint64_t dispatch thunk of VFXScene.LoadOptions.depthPixelFormat.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x260))();
}

uint64_t dispatch thunk of VFXScene.LoadOptions.depthPixelFormat.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x268))();
}

uint64_t dispatch thunk of VFXScene.LoadOptions.depthPixelFormat.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x270))();
}

uint64_t dispatch thunk of VFXScene.LoadOptions.enableDeferredRendering.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x278))();
}

uint64_t dispatch thunk of VFXScene.LoadOptions.enableDeferredRendering.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x280))();
}

uint64_t dispatch thunk of VFXScene.LoadOptions.enableDeferredRendering.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x288))();
}

uint64_t dispatch thunk of VFXScene.LoadOptions._enableDeferredRendering.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x290))();
}

uint64_t dispatch thunk of VFXScene.LoadOptions._enableDeferredRendering.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x298))();
}

uint64_t dispatch thunk of VFXScene.LoadOptions._enableDeferredRendering.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x2A0))();
}

uint64_t dispatch thunk of VFXScene.LoadOptions.internalPixelFormatDepth.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x2A8))();
}

uint64_t dispatch thunk of VFXScene.LoadOptions.internalPixelFormatDepth.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x2B8))();
}

uint64_t dispatch thunk of VFXScene.LoadOptions.useGammaBlending.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x2C0))();
}

uint64_t dispatch thunk of VFXScene.LoadOptions.useGammaBlending.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x2D0))();
}

uint64_t dispatch thunk of VFXScene.LoadOptions.doNotClearRenderOutput.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x2D8))();
}

uint64_t dispatch thunk of VFXScene.LoadOptions.doNotClearRenderOutput.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x2E0))();
}

uint64_t dispatch thunk of VFXScene.LoadOptions.doNotClearRenderOutput.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x2E8))();
}

uint64_t dispatch thunk of VFXScene.LoadOptions.device.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x2F0))();
}

uint64_t dispatch thunk of VFXScene.LoadOptions.device.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x2F8))();
}

uint64_t dispatch thunk of VFXScene.LoadOptions.device.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x300))();
}

uint64_t dispatch thunk of VFXScene.LoadOptions.commandQueue.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x308))();
}

uint64_t dispatch thunk of VFXScene.LoadOptions.commandQueue.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x310))();
}

uint64_t dispatch thunk of VFXScene.LoadOptions.commandQueue.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x318))();
}

uint64_t dispatch thunk of VFXScene.LoadOptions.clientID.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x320))();
}

uint64_t dispatch thunk of VFXScene.LoadOptions.clientID.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x330))();
}

uint64_t dispatch thunk of VFXScene.LoadOptions.metalLibraryURL.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x338))();
}

uint64_t dispatch thunk of VFXScene.LoadOptions.metalLibraryURL.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x348))();
}

uint64_t dispatch thunk of VFXScene.LoadOptions.peerPid.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x380))();
}

uint64_t dispatch thunk of VFXScene.LoadOptions.peerPid.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x388))();
}

uint64_t dispatch thunk of VFXScene.LoadOptions.peerPid.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x390))();
}

uint64_t dispatch thunk of VFXScene.LoadOptions.peerTaskIdentity.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x398))();
}

uint64_t dispatch thunk of VFXScene.LoadOptions.peerTaskIdentity.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x3A0))();
}

uint64_t dispatch thunk of VFXScene.LoadOptions.peerTaskIdentity.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x3A8))();
}

_QWORD *sub_1B1C2F46C(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for VFXScene.ScriptFunction(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  return a1;
}

uint64_t assignWithTake for VFXScene.ScriptFunction(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  return a1;
}

ValueMetadata *type metadata accessor for VFXScene.ScriptFunction()
{
  return &type metadata for VFXScene.ScriptFunction;
}

ValueMetadata *type metadata accessor for DebugUIOptions()
{
  return &type metadata for DebugUIOptions;
}

unint64_t sub_1B1C2F554()
{
  unint64_t result;

  result = qword_1EEF5C918;
  if (!qword_1EEF5C918)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2284C50, &type metadata for DebugUIOptions);
    atomic_store(result, (unint64_t *)&qword_1EEF5C918);
  }
  return result;
}

unint64_t sub_1B1C2F59C()
{
  unint64_t result;

  result = qword_1EEF5C920;
  if (!qword_1EEF5C920)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2284C20, &type metadata for DebugUIOptions);
    atomic_store(result, (unint64_t *)&qword_1EEF5C920);
  }
  return result;
}

unint64_t sub_1B1C2F5E4()
{
  unint64_t result;

  result = qword_1EEF5C928;
  if (!qword_1EEF5C928)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2284C78, &type metadata for DebugUIOptions);
    atomic_store(result, (unint64_t *)&qword_1EEF5C928);
  }
  return result;
}

unint64_t sub_1B1C2F62C()
{
  unint64_t result;

  result = qword_1EEF5C930;
  if (!qword_1EEF5C930)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2284CB0, &type metadata for DebugUIOptions);
    atomic_store(result, (unint64_t *)&qword_1EEF5C930);
  }
  return result;
}

uint64_t sub_1B1C2F670(_QWORD *a1)
{
  uint64_t v1;

  return sub_1B1D41A04(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_1B1C2F688()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

uint64_t sub_1B1C2F6AC()
{
  uint64_t v0;

  return sub_1B1E44E38(*(_QWORD *)(v0 + 16));
}

unint64_t sub_1B1C2F6B4()
{
  unint64_t result;

  result = qword_1EEF5C938;
  if (!qword_1EEF5C938)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&qword_1EEF5C938);
  }
  return result;
}

unint64_t sub_1B1C2F708()
{
  unint64_t result;

  result = qword_1EEF5C940;
  if (!qword_1EEF5C940)
  {
    result = MEMORY[0x1B5E23E74](&protocol conformance descriptor for PixelFormatDepth, &type metadata for PixelFormatDepth);
    atomic_store(result, (unint64_t *)&qword_1EEF5C940);
  }
  return result;
}

void sub_1B1C2F74C(void **a1)
{
  uint64_t v1;

  sub_1B1B0EC48(a1, *(void **)(v1 + 16));
}

uint64_t sub_1B1C2F764(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1B1792854(0, &qword_1EEF5C948, (void (*)(uint64_t))sub_1B1C2F7B8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_1B1C2F7B8()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_1EEF5C950)
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1EEF5C950);
  }
}

uint64_t sub_1B1C2F81C()
{
  uint64_t v0;

  return sub_1B1F4ADC8(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(unsigned int *)(v0 + 40) | ((unint64_t)*(unsigned __int8 *)(v0 + 44) << 32), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64));
}

uint64_t sub_1B1C2F84C()
{
  uint64_t v0;

  return swift_deallocObject();
}

void sub_1B1C2F870()
{
  uint64_t v0;

  sub_1B1C28C5C(*(_QWORD *)(v0 + 16));
}

uint64_t sub_1B1C2F87C(double a1)
{
  return sub_1B1C2DB18(a1);
}

void sub_1B1C2F890(void **a1)
{
  sub_1B1C2F74C(a1);
}

uint64_t sub_1B1C2F8A4(_QWORD *a1)
{
  return sub_1B1C2F670(a1);
}

double sub_1B1C2F8B8(float32x4_t a1, float32x4_t a2)
{
  a1.i32[3] = 0;
  a1.i64[0] = vmulq_n_f32(a2, vmaxnmq_f32(a1, (float32x4_t)xmmword_1B2245780).f32[0]).u64[0];
  return *(double *)a1.i64;
}

double sub_1B1C2F8DC(double a1, double a2, double a3, double a4)
{
  return a4;
}

void sub_1B1C2F8E4(_QWORD *a1@<X8>)
{
  *a1 = &unk_1E639A030;
}

uint64_t sub_1B1C2F8F4()
{
  sub_1B1C31B78();
  return sub_1B2228A70();
}

uint64_t sub_1B1C2F950()
{
  sub_1B1C31B78();
  return sub_1B22289F8();
}

float32x4_t sub_1B1C2F99C(float32x4_t a1)
{
  float32x4_t *v1;
  float32x4_t v2;
  float32x4_t v3;
  float32x4_t result;

  a1.i32[3] = 0;
  v2 = vmaxnmq_f32(a1, (float32x4_t)xmmword_1B2245780);
  v3 = vmulq_lane_f32(v1[1], *(float32x2_t *)v2.f32, 1);
  *v1 = vmulq_n_f32(*v1, v2.f32[0]);
  v1[1] = v3;
  result = vmulq_laneq_f32(v1[2], v2, 2);
  v1[2] = result;
  return result;
}

void sub_1B1C2F9CC(float32x4_t *a1@<X8>, float32x4_t a2@<Q0>, float32x4_t a3@<Q1>, float32x4_t a4@<Q2>)
{
  int8x16_t v4;
  __int8 v5;
  float32x4_t v6;
  int32x4_t v7;
  float32x2_t v8;
  float32x2_t v9;
  int8x16_t v10;
  __int8 v11;
  float32x4_t v12;
  int32x4_t v13;
  float32x2_t v14;
  float32x2_t v15;
  int8x16_t v16;
  __int8 v17;
  float32x4_t v18;
  int32x4_t v19;
  float32x2_t v20;
  float32x2_t v21;

  v4 = (int8x16_t)vabsq_f32(a2);
  if (*(float *)v4.i32 > 0.00000011921
    || (v4.i32[0] = vextq_s8(v4, v4, 8uLL).u32[0],
        *(int32x2_t *)v4.i8 = vcge_f32((float32x2_t)0x3400000034000000, *(float32x2_t *)v4.i8),
        (v4.i8[4] & 1) == 0)
    || (v5 = v4.i8[0], v6 = 0uLL, (v5 & 1) == 0))
  {
    v7 = (int32x4_t)vmulq_f32(a2, a2);
    v7.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v7, 2), vadd_f32(*(float32x2_t *)v7.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v7.i8, 1))).u32[0];
    v8 = vrsqrte_f32((float32x2_t)v7.u32[0]);
    v9 = vmul_f32(v8, vrsqrts_f32((float32x2_t)v7.u32[0], vmul_f32(v8, v8)));
    v6 = vmulq_n_f32(a2, vmul_f32(v9, vrsqrts_f32((float32x2_t)v7.u32[0], vmul_f32(v9, v9))).f32[0]);
  }
  v10 = (int8x16_t)vabsq_f32(a3);
  if (*(float *)v10.i32 > 0.00000011921
    || (v10.i32[0] = vextq_s8(v10, v10, 8uLL).u32[0],
        *(int32x2_t *)v10.i8 = vcge_f32((float32x2_t)0x3400000034000000, *(float32x2_t *)v10.i8),
        (v10.i8[4] & 1) == 0)
    || (v11 = v10.i8[0], v12 = 0uLL, (v11 & 1) == 0))
  {
    v13 = (int32x4_t)vmulq_f32(a3, a3);
    v13.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v13, 2), vadd_f32(*(float32x2_t *)v13.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v13.i8, 1))).u32[0];
    v14 = vrsqrte_f32((float32x2_t)v13.u32[0]);
    v15 = vmul_f32(v14, vrsqrts_f32((float32x2_t)v13.u32[0], vmul_f32(v14, v14)));
    v12 = vmulq_n_f32(a3, vmul_f32(v15, vrsqrts_f32((float32x2_t)v13.u32[0], vmul_f32(v15, v15))).f32[0]);
  }
  v16 = (int8x16_t)vabsq_f32(a4);
  if (*(float *)v16.i32 > 0.00000011921
    || (v16.i32[0] = vextq_s8(v16, v16, 8uLL).u32[0],
        *(int32x2_t *)v16.i8 = vcge_f32((float32x2_t)0x3400000034000000, *(float32x2_t *)v16.i8),
        (v16.i8[4] & 1) == 0)
    || (v17 = v16.i8[0], v18 = 0uLL, (v17 & 1) == 0))
  {
    v19 = (int32x4_t)vmulq_f32(a4, a4);
    v19.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v19, 2), vadd_f32(*(float32x2_t *)v19.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v19.i8, 1))).u32[0];
    v20 = vrsqrte_f32((float32x2_t)v19.u32[0]);
    v21 = vmul_f32(v20, vrsqrts_f32((float32x2_t)v19.u32[0], vmul_f32(v20, v20)));
    v18 = vmulq_n_f32(a4, vmul_f32(v21, vrsqrts_f32((float32x2_t)v19.u32[0], vmul_f32(v21, v21))).f32[0]);
  }
  *a1 = v6;
  a1[1] = v12;
  a1[2] = v18;
}

double sub_1B1C2FB1C(char a1, double a2, double a3, float32x4_t a4)
{
  if ((a1 & 1) != 0)
    a4.i64[0] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)xmmword_1B2244DB0, a4.f32[0]), (float32x4_t)xmmword_1B2244DD0, *(float32x2_t *)a4.f32, 1), (float32x4_t)xmmword_1B2244DF0, a4, 2), (float32x4_t)xmmword_1B2244E10, a4, 3).u64[0];
  return *(double *)a4.i64;
}

uint64_t sub_1B1C2FBE4(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1B1F97254(*a1, *a2);
}

uint64_t sub_1B1C2FBF0()
{
  sub_1B222A06C();
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

uint64_t sub_1B1C2FC50()
{
  sub_1B2228824();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B1C2FC84()
{
  sub_1B222A06C();
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

uint64_t sub_1B1C2FCE0@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B1C3190C();
  *a1 = result;
  return result;
}

void sub_1B1C2FD0C(_QWORD *a1@<X8>)
{
  unsigned __int8 *v1;

  *a1 = ((unint64_t)*v1 << 48) + 0x306E6D756C6F63;
  a1[1] = 0xE700000000000000;
}

unint64_t sub_1B1C2FD30()
{
  unsigned __int8 *v0;

  return ((unint64_t)*v0 << 48) + 0x306E6D756C6F63;
}

uint64_t sub_1B1C2FD50@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B1C3190C();
  *a1 = result;
  return result;
}

uint64_t sub_1B1C2FD74()
{
  sub_1B1C343E8();
  return sub_1B222A1D4();
}

uint64_t sub_1B1C2FD9C()
{
  sub_1B1C343E8();
  return sub_1B222A1E0();
}

uint64_t simd_float2x2.hash(into:)()
{
  sub_1B222A09C();
  sub_1B222A09C();
  sub_1B222A09C();
  return sub_1B222A09C();
}

uint64_t simd_float2x3.hash(into:)()
{
  sub_1B1C31828();
  return sub_1B1C31828();
}

uint64_t simd_float2x4.hash(into:)()
{
  sub_1B1C317B4();
  return sub_1B1C317B4();
}

uint64_t sub_1B1C2FEA8(_QWORD *a1, double a2, double a3)
{
  uint64_t v3;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t);
  _BYTE v8[24];
  uint64_t v9;
  double v10;

  sub_1B19FA070(a1, a1[3]);
  sub_1B222A15C();
  v10 = a2;
  sub_1B19FC264((uint64_t)v8, v9);
  v6 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD20];
  sub_1B19F8E54(0, &qword_1ED4BB080, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], MEMORY[0x1E0DEDD20]);
  sub_1B1A09538((unint64_t *)&qword_1ED4B72D8, &qword_1ED4BB080, v6, MEMORY[0x1E0DEDD30]);
  sub_1B2229BA4();
  if (!v3)
  {
    v10 = a3;
    sub_1B19FC264((uint64_t)v8, v9);
    sub_1B2229BA4();
  }
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v8);
}

void sub_1B1C2FFE8(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double v4;
  uint64_t v5;

  v4 = sub_1B1C32274(a1);
  if (!v2)
  {
    *(double *)a2 = v4;
    *(_QWORD *)(a2 + 8) = v5;
  }
}

uint64_t sub_1B1C30010(_QWORD *a1)
{
  double *v1;

  return sub_1B1C2FEA8(a1, *v1, v1[1]);
}

uint64_t sub_1B1C30028()
{
  sub_1B222A06C();
  sub_1B1C31888();
  sub_1B1C31888();
  return sub_1B222A0C0();
}

uint64_t sub_1B1C30080()
{
  sub_1B1C31888();
  return sub_1B1C31888();
}

uint64_t sub_1B1C300B4()
{
  sub_1B222A06C();
  sub_1B1C31888();
  sub_1B1C31888();
  return sub_1B222A0C0();
}

uint64_t sub_1B1C30108(float32x2_t *a1, float32x2_t *a2)
{
  return sub_1B1C3442C(*a1, a1[1], *a2, a2[1]);
}

uint64_t sub_1B1C30124(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  _BYTE v4[24];
  uint64_t v5;

  sub_1B19FA070(a1, a1[3]);
  sub_1B222A15C();
  sub_1B19FC264((uint64_t)v4, v5);
  v2 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50];
  sub_1B19F8E54(0, (unint64_t *)&qword_1ED4BB0A0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50]);
  sub_1B1A09538((unint64_t *)&qword_1ED4B72F8, (unint64_t *)&qword_1ED4BB0A0, v2, MEMORY[0x1E0DEDD60]);
  sub_1B2229BA4();
  if (!v1)
  {
    sub_1B19FC264((uint64_t)v4, v5);
    sub_1B2229BA4();
  }
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v4);
}

__n128 sub_1B1C30270@<Q0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  __int128 v4;
  int v5;
  __int128 v6;
  int v7;
  __n128 result;

  sub_1B1C325A0(a1);
  if (!v2)
  {
    DWORD2(v6) = v7;
    DWORD2(v4) = v5;
    *a2 = v4;
    a2[1] = v6;
  }
  result.n128_u64[0] = v4;
  result.n128_u32[2] = DWORD2(v4);
  return result;
}

uint64_t sub_1B1C302A0(_QWORD *a1)
{
  return sub_1B1C30124(a1);
}

uint64_t sub_1B1C302C0(uint64_t a1, uint64_t a2)
{
  return sub_1B1C30478(a1, a2, (void (*)(_BYTE *, __n128))sub_1B1C31828);
}

uint64_t sub_1B1C302CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B1C304E0(a1, a2, a3, (void (*)(__n128))sub_1B1C31828);
}

uint64_t sub_1B1C302D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B1C30530(a1, a2, a3, (void (*)(_BYTE *, __n128))sub_1B1C31828);
}

uint64_t sub_1B1C302E4(__n128 *a1, __n128 *a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1C30594(a1, a2, a3, a4, (uint64_t (*)(__n128, __n128, __n128, __n128))sub_1B1C34448);
}

uint64_t sub_1B1C302F0(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  _BYTE v4[24];
  uint64_t v5;

  sub_1B19FA070(a1, a1[3]);
  sub_1B222A15C();
  sub_1B19FC264((uint64_t)v4, v5);
  v2 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDDA8];
  sub_1B19F8E54(0, (unint64_t *)&qword_1ED4BB0E0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDDA8]);
  sub_1B1A09538((unint64_t *)&qword_1ED4B7318, (unint64_t *)&qword_1ED4BB0E0, v2, MEMORY[0x1E0DEDDB8]);
  sub_1B2229BA4();
  if (!v1)
  {
    sub_1B19FC264((uint64_t)v4, v5);
    sub_1B2229BA4();
  }
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v4);
}

uint64_t sub_1B1C3042C@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  __int128 v5;
  __int128 v6;

  result = sub_1B1C328D8(a1);
  if (!v2)
  {
    *a2 = v5;
    a2[1] = v6;
  }
  return result;
}

uint64_t sub_1B1C30454(_QWORD *a1)
{
  return sub_1B1C302F0(a1);
}

uint64_t sub_1B1C3046C(uint64_t a1, uint64_t a2)
{
  return sub_1B1C30478(a1, a2, (void (*)(_BYTE *, __n128))sub_1B1C317B4);
}

uint64_t sub_1B1C30478(uint64_t a1, uint64_t a2, void (*a3)(_BYTE *, __n128))
{
  __n128 *v3;
  __n128 v6;
  __n128 v7;
  _BYTE v8[72];

  v6 = *v3;
  v7 = v3[1];
  sub_1B222A06C();
  a3(v8, v6);
  a3(v8, v7);
  return sub_1B222A0C0();
}

uint64_t sub_1B1C304D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B1C304E0(a1, a2, a3, (void (*)(__n128))sub_1B1C317B4);
}

uint64_t sub_1B1C304E0(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(__n128))
{
  __n128 *v4;
  __n128 v7;

  v7 = v4[1];
  a4(*v4);
  return ((uint64_t (*)(uint64_t, __n128))a4)(a1, v7);
}

uint64_t sub_1B1C30524(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B1C30530(a1, a2, a3, (void (*)(_BYTE *, __n128))sub_1B1C317B4);
}

uint64_t sub_1B1C30530(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_BYTE *, __n128))
{
  __n128 *v4;
  __n128 v7;
  __n128 v8;
  _BYTE v9[72];

  v7 = *v4;
  v8 = v4[1];
  sub_1B222A06C();
  a4(v9, v7);
  a4(v9, v8);
  return sub_1B222A0C0();
}

uint64_t sub_1B1C30588(__n128 *a1, __n128 *a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1C30594(a1, a2, a3, a4, (uint64_t (*)(__n128, __n128, __n128, __n128))sub_1B1C34468);
}

uint64_t sub_1B1C30594(__n128 *a1, __n128 *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(__n128, __n128, __n128, __n128))
{
  return a5(*a1, a1[1], *a2, a2[1]);
}

uint64_t sub_1B1C305B0(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  _BYTE v4[24];
  uint64_t v5;

  sub_1B19FA070(a1, a1[3]);
  sub_1B222A15C();
  sub_1B19FC264((uint64_t)v4, v5);
  v2 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD20];
  sub_1B19F8E54(0, &qword_1ED4BB080, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], MEMORY[0x1E0DEDD20]);
  sub_1B1A09538((unint64_t *)&qword_1ED4B72D8, &qword_1ED4BB080, v2, MEMORY[0x1E0DEDD30]);
  sub_1B2229BA4();
  if (!v1)
  {
    sub_1B19FC264((uint64_t)v4, v5);
    sub_1B2229BA4();
    sub_1B19FC264((uint64_t)v4, v5);
    sub_1B2229BA4();
  }
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v4);
}

void sub_1B1C30738(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double v4;
  uint64_t v5;
  uint64_t v6;

  v4 = sub_1B1C32C08(a1);
  if (!v2)
  {
    *(double *)a2 = v4;
    *(_QWORD *)(a2 + 8) = v5;
    *(_QWORD *)(a2 + 16) = v6;
  }
}

uint64_t sub_1B1C30764(_QWORD *a1)
{
  return sub_1B1C305B0(a1);
}

uint64_t sub_1B1C30780()
{
  sub_1B222A06C();
  sub_1B1C31888();
  sub_1B1C31888();
  sub_1B1C31888();
  return sub_1B222A0C0();
}

uint64_t sub_1B1C307F0()
{
  sub_1B1C31888();
  sub_1B1C31888();
  return sub_1B1C31888();
}

uint64_t sub_1B1C30834()
{
  sub_1B222A06C();
  sub_1B1C31888();
  sub_1B1C31888();
  sub_1B1C31888();
  return sub_1B222A0C0();
}

uint64_t sub_1B1C308A0(float32x2_t *a1, float32x2_t *a2)
{
  return sub_1B1C34484(*a1, a1[1], a1[2], *a2, a2[1], a2[2]);
}

uint64_t sub_1B1C308C4(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  _BYTE v4[24];
  uint64_t v5;

  sub_1B19FA070(a1, a1[3]);
  sub_1B222A15C();
  sub_1B19FC264((uint64_t)v4, v5);
  v2 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50];
  sub_1B19F8E54(0, (unint64_t *)&qword_1ED4BB0A0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50]);
  sub_1B1A09538((unint64_t *)&qword_1ED4B72F8, (unint64_t *)&qword_1ED4BB0A0, v2, MEMORY[0x1E0DEDD60]);
  sub_1B2229BA4();
  if (!v1)
  {
    sub_1B19FC264((uint64_t)v4, v5);
    sub_1B2229BA4();
    sub_1B19FC264((uint64_t)v4, v5);
    sub_1B2229BA4();
  }
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v4);
}

double sub_1B1C30A48@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  __int128 v7;

  sub_1B1C32FB8(a1, v6);
  if (!v2)
  {
    v5 = v6[1];
    *a2 = v6[0];
    a2[1] = v5;
    result = *(double *)&v7;
    a2[2] = v7;
  }
  return result;
}

uint64_t sub_1B1C30A88(_QWORD *a1)
{
  return sub_1B1C308C4(a1);
}

uint64_t sub_1B1C30A9C(uint64_t a1, uint64_t a2)
{
  return sub_1B1C30CA0(a1, a2, (void (*)(_BYTE *, __n128))sub_1B1C31828);
}

uint64_t sub_1B1C30AA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B1C30D1C(a1, a2, a3, (void (*)(__n128))sub_1B1C31828);
}

uint64_t sub_1B1C30AB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B1C30D80(a1, a2, a3, (void (*)(_BYTE *, __n128))sub_1B1C31828);
}

uint64_t sub_1B1C30AC0(__n128 *a1, __n128 *a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1C30DF8(a1, a2, a3, a4, (uint64_t (*)(__n128, __n128, __n128, __n128, __n128, __n128))sub_1B1C344A8);
}

uint64_t sub_1B1C30ACC(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  _BYTE v4[24];
  uint64_t v5;

  sub_1B19FA070(a1, a1[3]);
  sub_1B222A15C();
  sub_1B19FC264((uint64_t)v4, v5);
  v2 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDDA8];
  sub_1B19F8E54(0, (unint64_t *)&qword_1ED4BB0E0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDDA8]);
  sub_1B1A09538((unint64_t *)&qword_1ED4B7318, (unint64_t *)&qword_1ED4BB0E0, v2, MEMORY[0x1E0DEDDB8]);
  sub_1B2229BA4();
  if (!v1)
  {
    sub_1B19FC264((uint64_t)v4, v5);
    sub_1B2229BA4();
    sub_1B19FC264((uint64_t)v4, v5);
    sub_1B2229BA4();
  }
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v4);
}

uint64_t sub_1B1C30C4C@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  result = sub_1B1C33384(a1);
  if (!v2)
  {
    *a2 = v5;
    a2[1] = v6;
    a2[2] = v7;
  }
  return result;
}

uint64_t sub_1B1C30C78(_QWORD *a1)
{
  return sub_1B1C30ACC(a1);
}

uint64_t sub_1B1C30C94(uint64_t a1, uint64_t a2)
{
  return sub_1B1C30CA0(a1, a2, (void (*)(_BYTE *, __n128))sub_1B1C317B4);
}

uint64_t sub_1B1C30CA0(uint64_t a1, uint64_t a2, void (*a3)(_BYTE *, __n128))
{
  __n128 *v3;
  __n128 v6;
  __n128 v7;
  __n128 v8;
  _BYTE v9[72];

  v6 = *v3;
  v7 = v3[1];
  v8 = v3[2];
  sub_1B222A06C();
  a3(v9, v6);
  a3(v9, v7);
  a3(v9, v8);
  return sub_1B222A0C0();
}

uint64_t sub_1B1C30D10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B1C30D1C(a1, a2, a3, (void (*)(__n128))sub_1B1C317B4);
}

uint64_t sub_1B1C30D1C(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(__n128))
{
  __n128 *v4;
  __n128 v7;
  __n128 v8;

  v7 = v4[1];
  v8 = v4[2];
  a4(*v4);
  ((void (*)(uint64_t, __n128))a4)(a1, v7);
  return ((uint64_t (*)(uint64_t, __n128))a4)(a1, v8);
}

uint64_t sub_1B1C30D74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B1C30D80(a1, a2, a3, (void (*)(_BYTE *, __n128))sub_1B1C317B4);
}

uint64_t sub_1B1C30D80(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_BYTE *, __n128))
{
  __n128 *v4;
  __n128 v7;
  __n128 v8;
  __n128 v9;
  _BYTE v10[72];

  v7 = *v4;
  v8 = v4[1];
  v9 = v4[2];
  sub_1B222A06C();
  a4(v10, v7);
  a4(v10, v8);
  a4(v10, v9);
  return sub_1B222A0C0();
}

uint64_t sub_1B1C30DEC(__n128 *a1, __n128 *a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1C30DF8(a1, a2, a3, a4, (uint64_t (*)(__n128, __n128, __n128, __n128, __n128, __n128))sub_1B1C344D0);
}

uint64_t sub_1B1C30DF8(__n128 *a1, __n128 *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(__n128, __n128, __n128, __n128, __n128, __n128))
{
  return a5(*a1, a1[1], a1[2], *a2, a2[1], a2[2]);
}

uint64_t sub_1B1C30E1C(_QWORD *a1, double a2, double a3, double a4, double a5)
{
  uint64_t v5;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t);
  _BYTE v12[24];
  uint64_t v13;
  double v14;

  sub_1B19FA070(a1, a1[3]);
  sub_1B222A15C();
  v14 = a2;
  sub_1B19FC264((uint64_t)v12, v13);
  v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD20];
  sub_1B19F8E54(0, &qword_1ED4BB080, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], MEMORY[0x1E0DEDD20]);
  sub_1B1A09538((unint64_t *)&qword_1ED4B72D8, &qword_1ED4BB080, v10, MEMORY[0x1E0DEDD30]);
  sub_1B2229BA4();
  if (!v5)
  {
    v14 = a3;
    sub_1B19FC264((uint64_t)v12, v13);
    sub_1B2229BA4();
    v14 = a4;
    sub_1B19FC264((uint64_t)v12, v13);
    sub_1B2229BA4();
    v14 = a5;
    sub_1B19FC264((uint64_t)v12, v13);
    sub_1B2229BA4();
  }
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v12);
}

void sub_1B1C30FE4(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = sub_1B1C33738(a1);
  if (!v2)
  {
    *(double *)a2 = v4;
    *(_QWORD *)(a2 + 8) = v5;
    *(_QWORD *)(a2 + 16) = v6;
    *(_QWORD *)(a2 + 24) = v7;
  }
}

uint64_t sub_1B1C31010(_QWORD *a1)
{
  double *v1;

  return sub_1B1C30E1C(a1, *v1, v1[1], v1[2], v1[3]);
}

uint64_t sub_1B1C3102C()
{
  sub_1B222A06C();
  sub_1B1C31888();
  sub_1B1C31888();
  sub_1B1C31888();
  sub_1B1C31888();
  return sub_1B222A0C0();
}

uint64_t sub_1B1C310A8()
{
  sub_1B1C31888();
  sub_1B1C31888();
  sub_1B1C31888();
  return sub_1B1C31888();
}

uint64_t sub_1B1C31100()
{
  sub_1B222A06C();
  sub_1B1C31888();
  sub_1B1C31888();
  sub_1B1C31888();
  sub_1B1C31888();
  return sub_1B222A0C0();
}

uint64_t sub_1B1C31178(float32x2_t *a1, float32x2_t *a2)
{
  return sub_1B1C344F4(*a1, a1[1], a1[2], a1[3], *a2, a2[1], a2[2], a2[3]);
}

uint64_t sub_1B1C3119C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  _BYTE v4[24];
  uint64_t v5;

  sub_1B19FA070(a1, a1[3]);
  sub_1B222A15C();
  sub_1B19FC264((uint64_t)v4, v5);
  v2 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50];
  sub_1B19F8E54(0, (unint64_t *)&qword_1ED4BB0A0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50]);
  sub_1B1A09538((unint64_t *)&qword_1ED4B72F8, (unint64_t *)&qword_1ED4BB0A0, v2, MEMORY[0x1E0DEDD60]);
  sub_1B2229BA4();
  if (!v1)
  {
    sub_1B19FC264((uint64_t)v4, v5);
    sub_1B2229BA4();
    sub_1B19FC264((uint64_t)v4, v5);
    sub_1B2229BA4();
    sub_1B19FC264((uint64_t)v4, v5);
    sub_1B2229BA4();
  }
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v4);
}

double sub_1B1C31368@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  __int128 v6;
  _OWORD v7[2];
  __int128 v8;
  __int128 v9;

  sub_1B1C33B64(a1, v7);
  if (!v2)
  {
    v5 = v7[1];
    *a2 = v7[0];
    a2[1] = v5;
    result = *(double *)&v8;
    v6 = v9;
    a2[2] = v8;
    a2[3] = v6;
  }
  return result;
}

uint64_t sub_1B1C313A8(_QWORD *a1)
{
  return sub_1B1C3119C(a1);
}

uint64_t sub_1B1C313BC(uint64_t a1, uint64_t a2)
{
  return sub_1B1C31600(a1, a2, (void (*)(_BYTE *, __n128))sub_1B1C31828);
}

uint64_t sub_1B1C313C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B1C3168C(a1, a2, a3, (void (*)(__n128))sub_1B1C31828);
}

uint64_t sub_1B1C313D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B1C31708(a1, a2, a3, (void (*)(_BYTE *, __n128))sub_1B1C31828);
}

uint64_t sub_1B1C313E0(__n128 *a1, __n128 *a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1C31790(a1, a2, a3, a4, (uint64_t (*)(__n128, __n128, __n128, __n128, __n128, __n128, __n128, __n128))sub_1B1C34520);
}

uint64_t sub_1B1C313EC(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  _BYTE v4[24];
  uint64_t v5;

  sub_1B19FA070(a1, a1[3]);
  sub_1B222A15C();
  sub_1B19FC264((uint64_t)v4, v5);
  v2 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDDA8];
  sub_1B19F8E54(0, (unint64_t *)&qword_1ED4BB0E0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDDA8]);
  sub_1B1A09538((unint64_t *)&qword_1ED4B7318, (unint64_t *)&qword_1ED4BB0E0, v2, MEMORY[0x1E0DEDDB8]);
  sub_1B2229BA4();
  if (!v1)
  {
    sub_1B19FC264((uint64_t)v4, v5);
    sub_1B2229BA4();
    sub_1B19FC264((uint64_t)v4, v5);
    sub_1B2229BA4();
    sub_1B19FC264((uint64_t)v4, v5);
    sub_1B2229BA4();
  }
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v4);
}

uint64_t sub_1B1C315AC@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  result = sub_1B1C33FB4(a1);
  if (!v2)
  {
    *a2 = v5;
    a2[1] = v6;
    a2[2] = v7;
    a2[3] = v8;
  }
  return result;
}

uint64_t sub_1B1C315D8(_QWORD *a1)
{
  return sub_1B1C313EC(a1);
}

uint64_t sub_1B1C315F4(uint64_t a1, uint64_t a2)
{
  return sub_1B1C31600(a1, a2, (void (*)(_BYTE *, __n128))sub_1B1C317B4);
}

uint64_t sub_1B1C31600(uint64_t a1, uint64_t a2, void (*a3)(_BYTE *, __n128))
{
  __n128 *v3;
  __n128 v6;
  __n128 v7;
  __n128 v8;
  __n128 v9;
  _BYTE v10[72];

  v6 = *v3;
  v7 = v3[1];
  v8 = v3[2];
  v9 = v3[3];
  sub_1B222A06C();
  a3(v10, v6);
  a3(v10, v7);
  a3(v10, v8);
  a3(v10, v9);
  return sub_1B222A0C0();
}

uint64_t sub_1B1C31680(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B1C3168C(a1, a2, a3, (void (*)(__n128))sub_1B1C317B4);
}

uint64_t sub_1B1C3168C(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(__n128))
{
  __n128 *v4;
  __n128 v7;
  __n128 v8;
  __n128 v9;

  v7 = v4[1];
  v8 = v4[2];
  v9 = v4[3];
  a4(*v4);
  ((void (*)(uint64_t, __n128))a4)(a1, v7);
  ((void (*)(uint64_t, __n128))a4)(a1, v8);
  return ((uint64_t (*)(uint64_t, __n128))a4)(a1, v9);
}

uint64_t sub_1B1C316FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B1C31708(a1, a2, a3, (void (*)(_BYTE *, __n128))sub_1B1C317B4);
}

uint64_t sub_1B1C31708(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_BYTE *, __n128))
{
  __n128 *v4;
  __n128 v7;
  __n128 v8;
  __n128 v9;
  __n128 v10;
  _BYTE v11[72];

  v7 = *v4;
  v8 = v4[1];
  v9 = v4[2];
  v10 = v4[3];
  sub_1B222A06C();
  a4(v11, v7);
  a4(v11, v8);
  a4(v11, v9);
  a4(v11, v10);
  return sub_1B222A0C0();
}

uint64_t sub_1B1C31784(__n128 *a1, __n128 *a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1C31790(a1, a2, a3, a4, (uint64_t (*)(__n128, __n128, __n128, __n128, __n128, __n128, __n128, __n128))sub_1B1C34550);
}

uint64_t sub_1B1C31790(__n128 *a1, __n128 *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(__n128, __n128, __n128, __n128, __n128, __n128, __n128, __n128))
{
  return a5(*a1, a1[1], a1[2], a1[3], *a2, a2[1], a2[2], a2[3]);
}

uint64_t sub_1B1C317B4()
{
  sub_1B222A09C();
  sub_1B222A09C();
  sub_1B222A09C();
  return sub_1B222A09C();
}

uint64_t sub_1B1C31828()
{
  sub_1B222A09C();
  sub_1B222A09C();
  return sub_1B222A09C();
}

uint64_t sub_1B1C31888()
{
  sub_1B222A09C();
  return sub_1B222A09C();
}

float32_t sub_1B1C318D4(float32x4_t a1)
{
  a1.i32[3] = 0;
  a1.i32[0] = vmaxnmq_f32(a1, (float32x4_t)xmmword_1B2245780).u32[0];
  return a1.f32[0];
}

uint64_t sub_1B1C3190C()
{
  unint64_t v0;

  v0 = sub_1B2229730();
  swift_bridgeObjectRelease();
  if (v0 >= 4)
    return 4;
  else
    return v0;
}

void sub_1B1C31954(char a1, char a2, float a3, float a4, float a5, float a6, float32x2_t a7, uint64_t a8, char a9)
{
  float v12;
  float v13;
  float v14;
  int8x8_t v15;
  __int32 v16;
  double v17;
  double v18;
  unsigned int v19;

  v12 = fmaxf(a5, 0.0001);
  if ((float)(v12 + 0.0001) < a6)
    v13 = a6;
  else
    v13 = v12 + 0.0001;
  v14 = a3 * 0.5;
  v15 = vmvn_s8((int8x8_t)vceqz_f32(a7));
  v16 = v15.i32[1];
  if (v15.i32[1] >= v15.i32[0])
    v16 = v15.i32[0];
  if ((v16 & 0x80000000) == 0 || (a9 & 1) != 0)
  {
    *(float *)&v17 = 1.0 / tanf(v14);
    if ((a2 & 1) != 0)
      LODWORD(v18) = LODWORD(v17);
    else
      *(float *)&v18 = *(float *)&v17 / a4;
    v19 = LODWORD(v18);
    *(float *)&v17 = v12;
    *(float *)&v18 = v13;
    sub_1B1C2FB1C(a1 & 1, v17, v18, (float32x4_t)v19);
  }
  else
  {
    tanf(v14);
  }
}

unint64_t sub_1B1C31B78()
{
  unint64_t result;

  result = qword_1ED4B9398;
  if (!qword_1ED4B9398)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B228560C, &type metadata for ProjectionDirection);
    atomic_store(result, (unint64_t *)&qword_1ED4B9398);
  }
  return result;
}

float32x4_t sub_1B1C31BBC@<Q0>(float32x4_t *a1@<X8>, double a2@<D0>, float a3@<S1>, double a4@<D2>)
{
  unint64_t v5;
  unint64_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t result;

  v5 = (unint64_t)__sincosf_stret(a3);
  LODWORD(v6) = HIDWORD(v5);
  *((float *)&v6 + 1) = -*(float *)&v5;
  v7 = vaddq_f32(vmlaq_f32(vmulq_n_f32((float32x4_t)v6, *(float *)&a2), (float32x4_t)0, (float32x4_t)v5), (float32x4_t)0);
  v8 = vmulq_f32((float32x4_t)v6, (float32x4_t)0);
  v9 = vaddq_f32(vmlaq_lane_f32(v8, (float32x4_t)v5, *(float32x2_t *)&a2, 1), (float32x4_t)0);
  v10 = vaddq_f32(vmlaq_f32(v8, (float32x4_t)0, (float32x4_t)v5), (float32x4_t)xmmword_1B2244D90);
  result = vaddq_f32(v10, vmlaq_lane_f32(vmulq_n_f32(v7, *(float *)&a4), v9, *(float32x2_t *)&a4, 1));
  *a1 = vmlaq_f32(vmlaq_f32(v7, (float32x4_t)0, v9), (float32x4_t)0, v10);
  a1[1] = vmlaq_f32(vaddq_f32(v9, vmulq_f32(v7, (float32x4_t)0)), (float32x4_t)0, v10);
  a1[2] = result;
  return result;
}

double sub_1B1C31C64(char a1, float a2, float a3, float a4, float a5, float a6, float a7)
{
  float v7;
  float v8;
  unsigned int v9;
  int32x4_t v10;
  int32x4_t v16;

  v7 = fmaxf(a6, 0.0001);
  if ((float)(v7 + 0.0001) < a7)
    v8 = a7;
  else
    v8 = v7 + 0.0001;
  *(float *)&v9 = 2.0 / (float)(a3 - a2);
  v10.i32[0] = 0;
  v10.i32[3] = 0;
  *(float *)&v10.i32[1] = 2.0 / (float)(a5 - a4);
  __asm { FMOV            V4.4S, #-1.0 }
  *(float *)&v10.i32[2] = (float)(a4 + a5) / (float)(a5 - a4);
  v16 = vzip2q_s32(v10, (int32x4_t)xmmword_1B2244DF0);
  *(float *)v16.i32 = v7;
  return sub_1B1C2FB1C(a1, *(double *)v16.i64, COERCE_DOUBLE((unint64_t)LODWORD(v8)), (float32x4_t)v9);
}

float sub_1B1C31CF0(float a1, float a2)
{
  __asm { FMOV            V3.2S, #1.0 }
  return 2.0 / (float)(a2 - a1);
}

ValueMetadata *type metadata accessor for Float2x2Coder()
{
  return &type metadata for Float2x2Coder;
}

ValueMetadata *type metadata accessor for Float2x3Coder()
{
  return &type metadata for Float2x3Coder;
}

ValueMetadata *type metadata accessor for Float2x4Coder()
{
  return &type metadata for Float2x4Coder;
}

ValueMetadata *type metadata accessor for Float3x2Coder()
{
  return &type metadata for Float3x2Coder;
}

ValueMetadata *type metadata accessor for Float3x3Coder()
{
  return &type metadata for Float3x3Coder;
}

ValueMetadata *type metadata accessor for Float3x4Coder()
{
  return &type metadata for Float3x4Coder;
}

ValueMetadata *type metadata accessor for Float4x2Coder()
{
  return &type metadata for Float4x2Coder;
}

ValueMetadata *type metadata accessor for Float4x3Coder()
{
  return &type metadata for Float4x3Coder;
}

ValueMetadata *type metadata accessor for Float4x4Coder()
{
  return &type metadata for Float4x4Coder;
}

uint64_t storeEnumTagSinglePayload for ProjectionDirection(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1B1C31E84 + 4 * byte_1B2284DF5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1B1C31EB8 + 4 * byte_1B2284DF0[v4]))();
}

uint64_t sub_1B1C31EB8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1C31EC0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B1C31EC8);
  return result;
}

uint64_t sub_1B1C31ED4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B1C31EDCLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1B1C31EE0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1C31EE8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ProjectionDirection()
{
  return &type metadata for ProjectionDirection;
}

unint64_t sub_1B1C31F08()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EEF5C958;
  if (!qword_1EEF5C958)
  {
    sub_1B1C31F50();
    result = MEMORY[0x1B5E23E74](MEMORY[0x1E0DEAF50], v1);
    atomic_store(result, (unint64_t *)&qword_1EEF5C958);
  }
  return result;
}

void sub_1B1C31F50()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5C960)
  {
    v0 = sub_1B2228B6C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5C960);
  }
}

unint64_t sub_1B1C31FA8()
{
  unint64_t result;

  result = qword_1EEF5C968;
  if (!qword_1EEF5C968)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2284F6C, &type metadata for ProjectionDirection);
    atomic_store(result, (unint64_t *)&qword_1EEF5C968);
  }
  return result;
}

unint64_t sub_1B1C31FF0()
{
  unint64_t result;

  result = qword_1EEF5C970;
  if (!qword_1EEF5C970)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2284F94, &type metadata for Float4x4Coder);
    atomic_store(result, (unint64_t *)&qword_1EEF5C970);
  }
  return result;
}

unint64_t sub_1B1C32038()
{
  unint64_t result;

  result = qword_1EEF5C978;
  if (!qword_1EEF5C978)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2284FFC, &type metadata for Float4x3Coder);
    atomic_store(result, (unint64_t *)&qword_1EEF5C978);
  }
  return result;
}

unint64_t sub_1B1C32080()
{
  unint64_t result;

  result = qword_1EEF5C980;
  if (!qword_1EEF5C980)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2285064, &type metadata for Float4x2Coder);
    atomic_store(result, (unint64_t *)&qword_1EEF5C980);
  }
  return result;
}

unint64_t sub_1B1C320C8()
{
  unint64_t result;

  result = qword_1EEF5C988;
  if (!qword_1EEF5C988)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22850CC, &type metadata for Float3x4Coder);
    atomic_store(result, (unint64_t *)&qword_1EEF5C988);
  }
  return result;
}

unint64_t sub_1B1C32110()
{
  unint64_t result;

  result = qword_1EEF5C990;
  if (!qword_1EEF5C990)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2285134, &type metadata for Float3x3Coder);
    atomic_store(result, (unint64_t *)&qword_1EEF5C990);
  }
  return result;
}

unint64_t sub_1B1C32158()
{
  unint64_t result;

  result = qword_1EEF5C998;
  if (!qword_1EEF5C998)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B228519C, &type metadata for Float3x2Coder);
    atomic_store(result, (unint64_t *)&qword_1EEF5C998);
  }
  return result;
}

unint64_t sub_1B1C321A0()
{
  unint64_t result;

  result = qword_1EEF5C9A0;
  if (!qword_1EEF5C9A0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2285204, &type metadata for Float2x4Coder);
    atomic_store(result, (unint64_t *)&qword_1EEF5C9A0);
  }
  return result;
}

unint64_t sub_1B1C321E8()
{
  unint64_t result;

  result = qword_1EEF5C9A8;
  if (!qword_1EEF5C9A8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B228526C, &type metadata for Float2x3Coder);
    atomic_store(result, (unint64_t *)&qword_1EEF5C9A8);
  }
  return result;
}

unint64_t sub_1B1C32230()
{
  unint64_t result;

  result = qword_1EEF5C9B0;
  if (!qword_1EEF5C9B0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22852D4, &type metadata for Float2x2Coder);
    atomic_store(result, (unint64_t *)&qword_1EEF5C9B0);
  }
  return result;
}

double sub_1B1C32274(_QWORD *a1)
{
  uint64_t v1;
  double v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v13)(uint64_t, uint64_t, uint64_t);
  double v15;
  _QWORD v16[3];
  uint64_t v17;

  sub_1B19F8E54(0, &qword_1ED4BAC08, (uint64_t (*)(void))sub_1B1C343E8, (uint64_t)&type metadata for MatrixCodingKeys_pre2005, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v7);
  v9 = (char *)&v16[-1] - v8;
  v10 = a1[3];
  v11 = a1[4];
  sub_1B19FA070(a1, v10);
  if (sub_1B2067B64(2005, v10, v11))
  {
    sub_1B19FA070(a1, a1[3]);
    sub_1B1C343E8();
    sub_1B222A150();
    if (!v1)
    {
      v12 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD20];
      sub_1B19F8E54(0, &qword_1ED4BB080, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], MEMORY[0x1E0DEDD20]);
      LOBYTE(v15) = 0;
      sub_1B1A09538((unint64_t *)&qword_1ED4B72F0, &qword_1ED4BB080, v12, MEMORY[0x1E0DEDD40]);
      sub_1B2229814();
      v2 = *(double *)v16;
      LOBYTE(v15) = 1;
      sub_1B2229814();
      (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    }
  }
  else
  {
    sub_1B19FA070(a1, a1[3]);
    sub_1B222A12C();
    if (!v1)
    {
      v13 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD20];
      sub_1B19F8E54(0, &qword_1ED4BB080, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], MEMORY[0x1E0DEDD20]);
      sub_1B19FC264((uint64_t)v16, v17);
      sub_1B1A09538((unint64_t *)&qword_1ED4B72F0, &qword_1ED4BB080, v13, MEMORY[0x1E0DEDD40]);
      sub_1B2229AA8();
      v2 = v15;
      sub_1B19FC264((uint64_t)v16, v17);
      sub_1B2229AA8();
      _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v16);
    }
  }
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  return v2;
}

uint64_t sub_1B1C325A0(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t);
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;

  sub_1B19F8E54(0, &qword_1ED4BAC08, (uint64_t (*)(void))sub_1B1C343E8, (uint64_t)&type metadata for MatrixCodingKeys_pre2005, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v6);
  v8 = (char *)&v14 - v7;
  v9 = a1[3];
  v10 = a1[4];
  sub_1B19FA070(a1, v9);
  if (sub_1B2067B64(2005, v9, v10))
  {
    sub_1B19FA070(a1, a1[3]);
    sub_1B1C343E8();
    sub_1B222A150();
    if (!v1)
    {
      v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50];
      sub_1B19F8E54(0, (unint64_t *)&qword_1ED4BB0A0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50]);
      LOBYTE(v16) = 0;
      sub_1B1A09538((unint64_t *)&qword_1ED4B7310, (unint64_t *)&qword_1ED4BB0A0, v11, MEMORY[0x1E0DEDD70]);
      sub_1B2229814();
      v15 = v17;
      LOBYTE(v16) = 1;
      sub_1B2229814();
      (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
      v14 = v17;
    }
  }
  else
  {
    sub_1B19FA070(a1, a1[3]);
    sub_1B222A12C();
    if (!v1)
    {
      v12 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50];
      sub_1B19F8E54(0, (unint64_t *)&qword_1ED4BB0A0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50]);
      sub_1B19FC264((uint64_t)&v17, v18);
      sub_1B1A09538((unint64_t *)&qword_1ED4B7310, (unint64_t *)&qword_1ED4BB0A0, v12, MEMORY[0x1E0DEDD70]);
      sub_1B2229AA8();
      v15 = v16;
      sub_1B19FC264((uint64_t)&v17, v18);
      sub_1B2229AA8();
      v14 = v16;
      _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v17);
    }
  }
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
}

uint64_t sub_1B1C328D8(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t);
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;

  sub_1B19F8E54(0, &qword_1ED4BAC08, (uint64_t (*)(void))sub_1B1C343E8, (uint64_t)&type metadata for MatrixCodingKeys_pre2005, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v6);
  v8 = (char *)&v14 - v7;
  v9 = a1[3];
  v10 = a1[4];
  sub_1B19FA070(a1, v9);
  if (sub_1B2067B64(2005, v9, v10))
  {
    sub_1B19FA070(a1, a1[3]);
    sub_1B1C343E8();
    sub_1B222A150();
    if (!v1)
    {
      v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDDA8];
      sub_1B19F8E54(0, (unint64_t *)&qword_1ED4BB0E0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDDA8]);
      LOBYTE(v16) = 0;
      sub_1B1A09538((unint64_t *)&qword_1ED4B7330, (unint64_t *)&qword_1ED4BB0E0, v11, MEMORY[0x1E0DEDDC8]);
      sub_1B2229814();
      v15 = v17;
      LOBYTE(v16) = 1;
      sub_1B2229814();
      (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
      v14 = v17;
    }
  }
  else
  {
    sub_1B19FA070(a1, a1[3]);
    sub_1B222A12C();
    if (!v1)
    {
      v12 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDDA8];
      sub_1B19F8E54(0, (unint64_t *)&qword_1ED4BB0E0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDDA8]);
      sub_1B19FC264((uint64_t)&v17, v18);
      sub_1B1A09538((unint64_t *)&qword_1ED4B7330, (unint64_t *)&qword_1ED4BB0E0, v12, MEMORY[0x1E0DEDDC8]);
      sub_1B2229AA8();
      v15 = v16;
      sub_1B19FC264((uint64_t)&v17, v18);
      sub_1B2229AA8();
      v14 = v16;
      _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v17);
    }
  }
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
}

double sub_1B1C32C08(_QWORD *a1)
{
  uint64_t v1;
  double v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v13)(uint64_t, uint64_t, uint64_t);
  _QWORD v16[3];
  uint64_t v17;
  double v18;

  sub_1B19F8E54(0, &qword_1ED4BAC08, (uint64_t (*)(void))sub_1B1C343E8, (uint64_t)&type metadata for MatrixCodingKeys_pre2005, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v7);
  v9 = (char *)&v16[-1] - v8;
  v10 = a1[3];
  v11 = a1[4];
  sub_1B19FA070(a1, v10);
  if (sub_1B2067B64(2005, v10, v11))
  {
    sub_1B19FA070(a1, a1[3]);
    sub_1B1C343E8();
    sub_1B222A150();
    if (!v1)
    {
      v12 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD20];
      sub_1B19F8E54(0, &qword_1ED4BB080, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], MEMORY[0x1E0DEDD20]);
      LOBYTE(v18) = 0;
      sub_1B1A09538((unint64_t *)&qword_1ED4B72F0, &qword_1ED4BB080, v12, MEMORY[0x1E0DEDD40]);
      sub_1B2229814();
      v2 = *(double *)v16;
      LOBYTE(v18) = 1;
      sub_1B2229814();
      LOBYTE(v18) = 2;
      sub_1B2229814();
      (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    }
  }
  else
  {
    sub_1B19FA070(a1, a1[3]);
    sub_1B222A12C();
    if (!v1)
    {
      v13 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD20];
      sub_1B19F8E54(0, &qword_1ED4BB080, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], MEMORY[0x1E0DEDD20]);
      sub_1B19FC264((uint64_t)v16, v17);
      sub_1B1A09538((unint64_t *)&qword_1ED4B72F0, &qword_1ED4BB080, v13, MEMORY[0x1E0DEDD40]);
      sub_1B2229AA8();
      v2 = v18;
      sub_1B19FC264((uint64_t)v16, v17);
      sub_1B2229AA8();
      sub_1B19FC264((uint64_t)v16, v17);
      sub_1B2229AA8();
      _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v16);
    }
  }
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  return v2;
}

uint64_t sub_1B1C32FB8@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v14)(uint64_t, uint64_t, uint64_t);
  uint64_t result;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;

  sub_1B19F8E54(0, &qword_1ED4BAC08, (uint64_t (*)(void))sub_1B1C343E8, (uint64_t)&type metadata for MatrixCodingKeys_pre2005, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = (char *)&v17 - v9;
  v11 = a1[3];
  v12 = a1[4];
  sub_1B19FA070(a1, v11);
  if (!sub_1B2067B64(2005, v11, v12))
  {
    sub_1B19FA070(a1, a1[3]);
    sub_1B222A12C();
    if (!v2)
    {
      v14 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50];
      sub_1B19F8E54(0, (unint64_t *)&qword_1ED4BB0A0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50]);
      sub_1B19FC264((uint64_t)&v21, v22);
      sub_1B1A09538((unint64_t *)&qword_1ED4B7310, (unint64_t *)&qword_1ED4BB0A0, v14, MEMORY[0x1E0DEDD70]);
      sub_1B2229AA8();
      v19 = v20;
      sub_1B19FC264((uint64_t)&v21, v22);
      sub_1B2229AA8();
      v18 = v20;
      sub_1B19FC264((uint64_t)&v21, v22);
      sub_1B2229AA8();
      v17 = v20;
      _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v21);
      goto LABEL_7;
    }
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  }
  sub_1B19FA070(a1, a1[3]);
  sub_1B1C343E8();
  sub_1B222A150();
  if (v2)
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  v13 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50];
  sub_1B19F8E54(0, (unint64_t *)&qword_1ED4BB0A0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50]);
  LOBYTE(v20) = 0;
  sub_1B1A09538((unint64_t *)&qword_1ED4B7310, (unint64_t *)&qword_1ED4BB0A0, v13, MEMORY[0x1E0DEDD70]);
  sub_1B2229814();
  v19 = v21;
  LOBYTE(v20) = 1;
  sub_1B2229814();
  v18 = v21;
  LOBYTE(v20) = 2;
  sub_1B2229814();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  v17 = v21;
LABEL_7:
  result = _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  v16 = v18;
  *a2 = v19;
  a2[1] = v16;
  a2[2] = v17;
  return result;
}

uint64_t sub_1B1C33384(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t);
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;

  sub_1B19F8E54(0, &qword_1ED4BAC08, (uint64_t (*)(void))sub_1B1C343E8, (uint64_t)&type metadata for MatrixCodingKeys_pre2005, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v6);
  v8 = (char *)&v14 - v7;
  v9 = a1[3];
  v10 = a1[4];
  sub_1B19FA070(a1, v9);
  if (sub_1B2067B64(2005, v9, v10))
  {
    sub_1B19FA070(a1, a1[3]);
    sub_1B1C343E8();
    sub_1B222A150();
    if (!v1)
    {
      v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDDA8];
      sub_1B19F8E54(0, (unint64_t *)&qword_1ED4BB0E0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDDA8]);
      LOBYTE(v17) = 0;
      sub_1B1A09538((unint64_t *)&qword_1ED4B7330, (unint64_t *)&qword_1ED4BB0E0, v11, MEMORY[0x1E0DEDDC8]);
      sub_1B2229814();
      v16 = v18;
      LOBYTE(v17) = 1;
      sub_1B2229814();
      v15 = v18;
      LOBYTE(v17) = 2;
      sub_1B2229814();
      (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
      v14 = v18;
    }
  }
  else
  {
    sub_1B19FA070(a1, a1[3]);
    sub_1B222A12C();
    if (!v1)
    {
      v12 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDDA8];
      sub_1B19F8E54(0, (unint64_t *)&qword_1ED4BB0E0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDDA8]);
      sub_1B19FC264((uint64_t)&v18, v19);
      sub_1B1A09538((unint64_t *)&qword_1ED4B7330, (unint64_t *)&qword_1ED4BB0E0, v12, MEMORY[0x1E0DEDDC8]);
      sub_1B2229AA8();
      v16 = v17;
      sub_1B19FC264((uint64_t)&v18, v19);
      sub_1B2229AA8();
      v15 = v17;
      sub_1B19FC264((uint64_t)&v18, v19);
      sub_1B2229AA8();
      v14 = v17;
      _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v18);
    }
  }
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
}

double sub_1B1C33738(_QWORD *a1)
{
  uint64_t v1;
  double v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v13)(uint64_t, uint64_t, uint64_t);
  double v15;
  _QWORD v16[3];
  uint64_t v17;

  sub_1B19F8E54(0, &qword_1ED4BAC08, (uint64_t (*)(void))sub_1B1C343E8, (uint64_t)&type metadata for MatrixCodingKeys_pre2005, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v7);
  v9 = (char *)&v16[-1] - v8;
  v10 = a1[3];
  v11 = a1[4];
  sub_1B19FA070(a1, v10);
  if (sub_1B2067B64(2005, v10, v11))
  {
    sub_1B19FA070(a1, a1[3]);
    sub_1B1C343E8();
    sub_1B222A150();
    if (!v1)
    {
      v12 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD20];
      sub_1B19F8E54(0, &qword_1ED4BB080, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], MEMORY[0x1E0DEDD20]);
      LOBYTE(v15) = 0;
      sub_1B1A09538((unint64_t *)&qword_1ED4B72F0, &qword_1ED4BB080, v12, MEMORY[0x1E0DEDD40]);
      sub_1B2229814();
      v2 = *(double *)v16;
      LOBYTE(v15) = 1;
      sub_1B2229814();
      LOBYTE(v15) = 2;
      sub_1B2229814();
      LOBYTE(v15) = 3;
      sub_1B2229814();
      (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    }
  }
  else
  {
    sub_1B19FA070(a1, a1[3]);
    sub_1B222A12C();
    if (!v1)
    {
      v13 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD20];
      sub_1B19F8E54(0, &qword_1ED4BB080, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], MEMORY[0x1E0DEDD20]);
      sub_1B19FC264((uint64_t)v16, v17);
      sub_1B1A09538((unint64_t *)&qword_1ED4B72F0, &qword_1ED4BB080, v13, MEMORY[0x1E0DEDD40]);
      sub_1B2229AA8();
      v2 = v15;
      sub_1B19FC264((uint64_t)v16, v17);
      sub_1B2229AA8();
      sub_1B19FC264((uint64_t)v16, v17);
      sub_1B2229AA8();
      sub_1B19FC264((uint64_t)v16, v17);
      sub_1B2229AA8();
      _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v16);
    }
  }
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  return v2;
}

uint64_t sub_1B1C33B64@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v14)(uint64_t, uint64_t, uint64_t);
  uint64_t result;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;

  sub_1B19F8E54(0, &qword_1ED4BAC08, (uint64_t (*)(void))sub_1B1C343E8, (uint64_t)&type metadata for MatrixCodingKeys_pre2005, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = (char *)&v18 - v9;
  v11 = a1[3];
  v12 = a1[4];
  sub_1B19FA070(a1, v11);
  if (!sub_1B2067B64(2005, v11, v12))
  {
    sub_1B19FA070(a1, a1[3]);
    sub_1B222A12C();
    if (!v2)
    {
      v14 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50];
      sub_1B19F8E54(0, (unint64_t *)&qword_1ED4BB0A0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50]);
      sub_1B19FC264((uint64_t)&v23, v24);
      sub_1B1A09538((unint64_t *)&qword_1ED4B7310, (unint64_t *)&qword_1ED4BB0A0, v14, MEMORY[0x1E0DEDD70]);
      sub_1B2229AA8();
      v21 = v22;
      sub_1B19FC264((uint64_t)&v23, v24);
      sub_1B2229AA8();
      v20 = v22;
      sub_1B19FC264((uint64_t)&v23, v24);
      sub_1B2229AA8();
      v19 = v22;
      sub_1B19FC264((uint64_t)&v23, v24);
      sub_1B2229AA8();
      v18 = v22;
      _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v23);
      goto LABEL_7;
    }
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  }
  sub_1B19FA070(a1, a1[3]);
  sub_1B1C343E8();
  sub_1B222A150();
  if (v2)
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  v13 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50];
  sub_1B19F8E54(0, (unint64_t *)&qword_1ED4BB0A0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50]);
  LOBYTE(v22) = 0;
  sub_1B1A09538((unint64_t *)&qword_1ED4B7310, (unint64_t *)&qword_1ED4BB0A0, v13, MEMORY[0x1E0DEDD70]);
  sub_1B2229814();
  v21 = v23;
  LOBYTE(v22) = 1;
  sub_1B2229814();
  v20 = v23;
  LOBYTE(v22) = 2;
  sub_1B2229814();
  v19 = v23;
  LOBYTE(v22) = 3;
  sub_1B2229814();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  v18 = v23;
LABEL_7:
  result = _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  v16 = v20;
  *a2 = v21;
  a2[1] = v16;
  v17 = v18;
  a2[2] = v19;
  a2[3] = v17;
  return result;
}

uint64_t sub_1B1C33FB4(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t);
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;

  sub_1B19F8E54(0, &qword_1ED4BAC08, (uint64_t (*)(void))sub_1B1C343E8, (uint64_t)&type metadata for MatrixCodingKeys_pre2005, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v6);
  v8 = (char *)&v14 - v7;
  v9 = a1[3];
  v10 = a1[4];
  sub_1B19FA070(a1, v9);
  if (sub_1B2067B64(2005, v9, v10))
  {
    sub_1B19FA070(a1, a1[3]);
    sub_1B1C343E8();
    sub_1B222A150();
    if (!v1)
    {
      v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDDA8];
      sub_1B19F8E54(0, (unint64_t *)&qword_1ED4BB0E0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDDA8]);
      LOBYTE(v18) = 0;
      sub_1B1A09538((unint64_t *)&qword_1ED4B7330, (unint64_t *)&qword_1ED4BB0E0, v11, MEMORY[0x1E0DEDDC8]);
      sub_1B2229814();
      v17 = v19;
      LOBYTE(v18) = 1;
      sub_1B2229814();
      v16 = v19;
      LOBYTE(v18) = 2;
      sub_1B2229814();
      v15 = v19;
      LOBYTE(v18) = 3;
      sub_1B2229814();
      (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
      v14 = v19;
    }
  }
  else
  {
    sub_1B19FA070(a1, a1[3]);
    sub_1B222A12C();
    if (!v1)
    {
      v12 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDDA8];
      sub_1B19F8E54(0, (unint64_t *)&qword_1ED4BB0E0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDDA8]);
      sub_1B19FC264((uint64_t)&v19, v20);
      sub_1B1A09538((unint64_t *)&qword_1ED4B7330, (unint64_t *)&qword_1ED4BB0E0, v12, MEMORY[0x1E0DEDDC8]);
      sub_1B2229AA8();
      v17 = v18;
      sub_1B19FC264((uint64_t)&v19, v20);
      sub_1B2229AA8();
      v16 = v18;
      sub_1B19FC264((uint64_t)&v19, v20);
      sub_1B2229AA8();
      v15 = v18;
      sub_1B19FC264((uint64_t)&v19, v20);
      sub_1B2229AA8();
      v14 = v18;
      _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v19);
    }
  }
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
}

unint64_t sub_1B1C343E8()
{
  unint64_t result;

  result = qword_1ED4B9AB8;
  if (!qword_1ED4B9AB8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B228575C, &type metadata for MatrixCodingKeys_pre2005);
    atomic_store(result, (unint64_t *)&qword_1ED4B9AB8);
  }
  return result;
}

uint64_t sub_1B1C3442C(float32x2_t a1, float32x2_t a2, float32x2_t a3, float32x2_t a4)
{
  uint32x2_t v4;

  v4 = (uint32x2_t)vand_s8((int8x8_t)vceq_f32(a1, a3), (int8x8_t)vceq_f32(a2, a4));
  return vpmin_u32(v4, v4).u32[0] >> 31;
}

uint64_t sub_1B1C34448(float32x4_t a1, float32x4_t a2, float32x4_t a3, float32x4_t a4)
{
  uint32x4_t v4;

  v4 = (uint32x4_t)vandq_s8((int8x16_t)vceqq_f32(a1, a3), (int8x16_t)vceqq_f32(a2, a4));
  v4.i32[3] = v4.i32[2];
  return vminvq_u32(v4) >> 31;
}

uint64_t sub_1B1C34468(float32x4_t a1, float32x4_t a2, float32x4_t a3, float32x4_t a4)
{
  return vminvq_u32((uint32x4_t)vandq_s8((int8x16_t)vceqq_f32(a1, a3), (int8x16_t)vceqq_f32(a2, a4))) >> 31;
}

uint64_t sub_1B1C34484(float32x2_t a1, float32x2_t a2, float32x2_t a3, float32x2_t a4, float32x2_t a5, float32x2_t a6)
{
  uint32x2_t v6;

  v6 = (uint32x2_t)vand_s8(vand_s8((int8x8_t)vceq_f32(a1, a4), (int8x8_t)vceq_f32(a2, a5)), (int8x8_t)vceq_f32(a3, a6));
  return vpmin_u32(v6, v6).u32[0] >> 31;
}

uint64_t sub_1B1C344A8(float32x4_t a1, float32x4_t a2, float32x4_t a3, float32x4_t a4, float32x4_t a5, float32x4_t a6)
{
  uint32x4_t v6;

  v6 = (uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vceqq_f32(a1, a4), (int8x16_t)vceqq_f32(a2, a5)), (int8x16_t)vceqq_f32(a3, a6));
  v6.i32[3] = v6.i32[2];
  return vminvq_u32(v6) >> 31;
}

uint64_t sub_1B1C344D0(float32x4_t a1, float32x4_t a2, float32x4_t a3, float32x4_t a4, float32x4_t a5, float32x4_t a6)
{
  return vminvq_u32((uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vceqq_f32(a1, a4), (int8x16_t)vceqq_f32(a2, a5)), (int8x16_t)vceqq_f32(a3, a6))) >> 31;
}

uint64_t sub_1B1C344F4(float32x2_t a1, float32x2_t a2, float32x2_t a3, float32x2_t a4, float32x2_t a5, float32x2_t a6, float32x2_t a7, float32x2_t a8)
{
  uint32x2_t v8;

  v8 = (uint32x2_t)vand_s8(vand_s8((int8x8_t)vceq_f32(a1, a5), (int8x8_t)vceq_f32(a2, a6)), vand_s8((int8x8_t)vceq_f32(a3, a7), (int8x8_t)vceq_f32(a4, a8)));
  return vpmin_u32(v8, v8).u32[0] >> 31;
}

uint64_t sub_1B1C34520(float32x4_t a1, float32x4_t a2, float32x4_t a3, float32x4_t a4, float32x4_t a5, float32x4_t a6, float32x4_t a7, float32x4_t a8)
{
  uint32x4_t v8;

  v8 = (uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vceqq_f32(a1, a5), (int8x16_t)vceqq_f32(a2, a6)), vandq_s8((int8x16_t)vceqq_f32(a3, a7), (int8x16_t)vceqq_f32(a4, a8)));
  v8.i32[3] = v8.i32[2];
  return vminvq_u32(v8) >> 31;
}

uint64_t sub_1B1C34550(float32x4_t a1, float32x4_t a2, float32x4_t a3, float32x4_t a4, float32x4_t a5, float32x4_t a6, float32x4_t a7, float32x4_t a8)
{
  return vminvq_u32((uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vceqq_f32(a1, a5), (int8x16_t)vceqq_f32(a2, a6)), vandq_s8((int8x16_t)vceqq_f32(a3, a7), (int8x16_t)vceqq_f32(a4, a8)))) >> 31;
}

uint64_t storeEnumTagSinglePayload for MatrixCodingKeys_pre2005(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1B1C345C8 + 4 * byte_1B2284DFF[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1B1C345FC + 4 * byte_1B2284DFA[v4]))();
}

uint64_t sub_1B1C345FC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1C34604(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B1C3460CLL);
  return result;
}

uint64_t sub_1B1C34618(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B1C34620);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1B1C34624(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1C3462C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MatrixCodingKeys_pre2005()
{
  return &type metadata for MatrixCodingKeys_pre2005;
}

unint64_t sub_1B1C3464C()
{
  unint64_t result;

  result = qword_1EEF5C9B8;
  if (!qword_1EEF5C9B8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2285734, &type metadata for MatrixCodingKeys_pre2005);
    atomic_store(result, (unint64_t *)&qword_1EEF5C9B8);
  }
  return result;
}

unint64_t sub_1B1C34694()
{
  unint64_t result;

  result = qword_1ED4B9AC8;
  if (!qword_1ED4B9AC8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B228566C, &type metadata for MatrixCodingKeys_pre2005);
    atomic_store(result, (unint64_t *)&qword_1ED4B9AC8);
  }
  return result;
}

unint64_t sub_1B1C346DC()
{
  unint64_t result;

  result = qword_1ED4B9AC0;
  if (!qword_1ED4B9AC0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2285694, &type metadata for MatrixCodingKeys_pre2005);
    atomic_store(result, (unint64_t *)&qword_1ED4B9AC0);
  }
  return result;
}

uint64_t sub_1B1C34720(char a1)
{
  return qword_1B2285AC0[a1];
}

ValueMetadata *sub_1B1C34734(char a1)
{
  return off_1E63EB8C8[a1];
}

uint64_t sub_1B1C34754@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  __int16 v11;
  __int128 v12;

  result = swift_conformsToProtocol2();
  if (result)
  {
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(result + 8) + 32))(a1);
    if (v5 >> 62)
    {
      if (sub_1B22296AC())
      {
LABEL_4:
        if ((v5 & 0xC000000000000001) == 0)
        {
          v6 = *(_QWORD *)(v5 + 32);
          swift_retain();
LABEL_6:
          swift_bridgeObjectRelease();
          v8 = *(_QWORD *)(v6 + 16);
          v7 = *(_QWORD *)(v6 + 24);
          v9 = *(_QWORD *)(v6 + 48);
          v10 = *(_BYTE *)(v6 + 56);
          v11 = *(_WORD *)(v6 + 58);
          swift_bridgeObjectRetain();
          v12 = *(_OWORD *)(v6 + 32);
          swift_retain();
          result = swift_release();
          *(_QWORD *)a2 = v8;
          *(_QWORD *)(a2 + 8) = v7;
          *(_OWORD *)(a2 + 16) = v12;
          *(_QWORD *)(a2 + 32) = v9;
          *(_BYTE *)(a2 + 40) = v10;
          *(_WORD *)(a2 + 42) = v11;
          return result;
        }
LABEL_9:
        v6 = MEMORY[0x1B5E21018](0, v5);
        goto LABEL_6;
      }
    }
    else if (*(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      goto LABEL_4;
    }
    swift_bridgeObjectRelease();
    __break(1u);
    goto LABEL_9;
  }
  __break(1u);
  return result;
}

uint64_t sub_1B1C34868@<X0>(unsigned __int8 *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_1B1C3498C(*a1);
  *a2 = result;
  return result;
}

void sub_1B1C34890(_QWORD *a1@<X8>)
{
  *a1 = &unk_1E6395058;
}

unint64_t sub_1B1C348A0(unint64_t result)
{
  unint64_t v1;
  unint64_t v2;
  int v4;

  if (result)
  {
    v1 = result;
    while (1)
    {
      v2 = __clz(__rbit64(v1));
      if (v2 < 0x40 && ((1 << v2) & v1) != 0)
        v1 &= ~(1 << v2);
      v4 = sub_1B1C3498C(v2);
      result = 0;
      if (v4 == 28)
        break;
      sub_1B22287AC();
      sub_1B2228890();
      swift_bridgeObjectRelease();
      if (!v1)
        return 0;
    }
  }
  return result;
}

unint64_t sub_1B1C34984()
{
  unint64_t *v0;

  return sub_1B1C348A0(*v0);
}

uint64_t sub_1B1C3498C(uint64_t result)
{
  if (result >= 0x1Cu)
    return 28;
  else
    return result;
}

uint64_t sub_1B1C349A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  BOOL v4;
  ValueMetadata *v7;
  uint64_t result;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 v18;
  unsigned __int16 v19;

  v4 = a1 == 1936941421 && a2 == 0xE400000000000000;
  if (v4 || (sub_1B2229D24() & 1) != 0)
  {
    v7 = &type metadata for Mass;
  }
  else if (a1 == 0x726F6C6F63 && a2 == 0xE500000000000000 || (sub_1B2229D24() & 1) != 0)
  {
    v7 = &type metadata for Color;
  }
  else
  {
    if (a1 == 1702521203 && a2 == 0xE400000000000000 || (sub_1B2229D24() & 1) != 0)
      goto LABEL_16;
    if (a1 == 0x6431657A6973 && a2 == 0xE600000000000000 || (sub_1B2229D24() & 1) != 0)
    {
      v7 = &type metadata for Scale1;
      goto LABEL_7;
    }
    if (a1 == 0x6432657A6973 && a2 == 0xE600000000000000 || (sub_1B2229D24() & 1) != 0)
    {
      v7 = &type metadata for Scale2;
      goto LABEL_7;
    }
    if (a1 == 0x6433657A6973 && a2 == 0xE600000000000000 || (sub_1B2229D24() & 1) != 0)
    {
LABEL_16:
      v7 = &type metadata for Scale3;
    }
    else if (a1 == 0x746567726174 && a2 == 0xE600000000000000 || (sub_1B2229D24() & 1) != 0)
    {
      v7 = &type metadata for ParticleTarget;
    }
    else if (a1 == 0x797469636F6C6576 && a2 == 0xE800000000000000 || (sub_1B2229D24() & 1) != 0)
    {
      v7 = &type metadata for Velocity;
    }
    else if (a1 == 0x6E6F697469736F70 && a2 == 0xE800000000000000 || (sub_1B2229D24() & 1) != 0)
    {
      v7 = &type metadata for Position;
    }
    else if (a1 == 0x7461645F72657375 && a2 == 0xEA00000000003161 || (sub_1B2229D24() & 1) != 0)
    {
      v7 = &type metadata for UserData1;
    }
    else if (a1 == 0x7461645F72657375 && a2 == 0xEA00000000003261 || (sub_1B2229D24() & 1) != 0)
    {
      v7 = &type metadata for UserData2;
    }
    else if (a1 == 0x7461645F72657375 && a2 == 0xEA00000000003361 || (sub_1B2229D24() & 1) != 0)
    {
      v7 = &type metadata for UserData3;
    }
    else if (a1 == 0x7461645F72657375 && a2 == 0xEA00000000003461 || (sub_1B2229D24() & 1) != 0)
    {
      v7 = &type metadata for UserData4;
    }
    else if (a1 == 25705 && a2 == 0xE200000000000000 || (sub_1B2229D24() & 1) != 0)
    {
      v7 = &type metadata for ParticleID;
    }
    else if (a1 == 0x695F746E65726170 && a2 == 0xE900000000000064 || (sub_1B2229D24() & 1) != 0)
    {
      v7 = &type metadata for ParticleParentID;
    }
    else if (a1 == 6645601 && a2 == 0xE300000000000000 || (sub_1B2229D24() & 1) != 0)
    {
      v7 = &type metadata for ParticleAge;
    }
    else if (a1 == 0x7461746E6569726FLL && a2 == 0xEB000000006E6F69 || (sub_1B2229D24() & 1) != 0)
    {
      v7 = &type metadata for Orientation;
    }
    else if (a1 == 0x73656E6867756F72 && a2 == 0xE900000000000073 || (sub_1B2229D24() & 1) != 0)
    {
      v7 = &type metadata for ParticleRoughness;
    }
    else if (a1 == 0x73656E6C6174656DLL && a2 == 0xE900000000000073 || (sub_1B2229D24() & 1) != 0)
    {
      v7 = &type metadata for ParticleMetalness;
    }
    else if (a1 == 0x6E6F697373696D65 && a2 == 0xE800000000000000 || (sub_1B2229D24() & 1) != 0)
    {
      v7 = &type metadata for ParticleEmission;
    }
    else if (a1 == 0x665F7261656E696CLL && a2 == 0xED0000726F746361 || (sub_1B2229D24() & 1) != 0)
    {
      v7 = &type metadata for LinearFactor;
    }
    else if (a1 == 0x5F72616C75676E61 && a2 == 0xEE00726F74636166 || (sub_1B2229D24() & 1) != 0)
    {
      v7 = &type metadata for AngularFactor;
    }
    else if (a1 == 0x746F766970 && a2 == 0xE500000000000000 || (sub_1B2229D24() & 1) != 0)
    {
      v7 = &type metadata for ParticlePivot;
    }
    else if (a1 == 0x656C676E61 && a2 == 0xE500000000000000 || (sub_1B2229D24() & 1) != 0)
    {
      v7 = &type metadata for ParticleAngle;
    }
    else if (a1 == 0xD000000000000010 && a2 == 0x80000001B2335250 || (sub_1B2229D24() & 1) != 0)
    {
      v7 = &type metadata for AngularVelocity;
    }
    else if (a1 == 0x5F65727574786574 && a2 == 0xED0000656D617266 || (sub_1B2229D24() & 1) != 0)
    {
      v7 = &type metadata for ParticleTextureFrame;
    }
    else if (a1 == 0x65765F656C676E61 && a2 == 0xEE00797469636F6CLL || (sub_1B2229D24() & 1) != 0)
    {
      v7 = &type metadata for ParticleAngleVelocity;
    }
    else if (a1 == 0x726F66736E617274 && a2 == 0xE90000000000006DLL || (sub_1B2229D24() & 1) != 0)
    {
      v7 = &type metadata for WorldTransform;
    }
    else
    {
      if (a1 != 1684366707 || a2 != 0xE400000000000000)
      {
        result = sub_1B2229D24();
        if ((result & 1) == 0)
        {
          v9 = 0;
          v11 = 0;
          v12 = 0;
          v13 = 0;
          v10 = 0uLL;
          goto LABEL_8;
        }
      }
      v7 = &type metadata for Seed;
    }
  }
LABEL_7:
  result = sub_1B1C34754((uint64_t)v7, (uint64_t)&v14);
  v9 = v14;
  v10 = v15;
  v11 = v16;
  v12 = v17;
  v13 = v18 | (v19 << 16);
LABEL_8:
  *(_QWORD *)a3 = v9;
  *(_OWORD *)(a3 + 8) = v10;
  *(_QWORD *)(a3 + 24) = v11;
  *(_QWORD *)(a3 + 32) = v12;
  *(_DWORD *)(a3 + 40) = v13;
  return result;
}

uint64_t sub_1B1C35494(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  unsigned int v8;
  unint64_t v9;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return 0;
  result = 0;
  v4 = 0;
  v5 = a1 + 32;
  v6 = v1 - 1;
  do
  {
    for (i = v4; ; ++i)
    {
      if (*(char *)(v5 + i) <= -65)
        goto LABEL_6;
      v8 = *(unsigned __int8 *)(v5 + i);
      if ((char)v8 >= 65)
        goto LABEL_6;
      if ((v8 & 0x80) == 0)
        break;
      if (v8 > 0xC0)
      {
        v9 = 1uLL >> -(char)v8;
        goto LABEL_14;
      }
LABEL_6:
      if (v6 == i)
        return result;
    }
    if (v8 >= 0x40)
      goto LABEL_6;
    v9 = 1 << v8;
LABEL_14:
    result |= v9;
    v4 = i + 1;
  }
  while (v6 != i);
  return result;
}

uint64_t sub_1B1C35528(ValueMetadata *a1)
{
  if (a1 == &type metadata for Position)
    return 0;
  if (a1 == &type metadata for Scale1)
    return 1;
  if (a1 == &type metadata for Scale2)
    return 2;
  if (a1 == &type metadata for Scale3)
    return 3;
  if (a1 == &type metadata for Velocity)
    return 4;
  if (a1 == &type metadata for Color)
    return 5;
  if (a1 == &type metadata for Orientation)
    return 6;
  if (a1 == &type metadata for ParticleTextureFrame)
    return 7;
  if (a1 == &type metadata for ParticleAngle)
    return 8;
  if (a1 == &type metadata for ParticlePivot)
    return 9;
  if (a1 == &type metadata for ParticleTarget)
    return 10;
  if (a1 == &type metadata for ParticleRibbonLength)
    return 11;
  if (a1 == &type metadata for AngularVelocity)
    return 12;
  if (a1 == &type metadata for ParticleAngleVelocity)
    return 13;
  if (a1 == &type metadata for LinearFactor)
    return 14;
  if (a1 == &type metadata for AngularFactor)
    return 15;
  if (a1 == &type metadata for ParticleAge)
    return 16;
  if (a1 == &type metadata for ParticleLifetime)
    return 17;
  if (a1 == &type metadata for Mass)
    return 18;
  if (a1 == &type metadata for ParticleID)
    return 26;
  if (a1 == &type metadata for ParticleParentID)
    return 27;
  if (a1 == &type metadata for ParticleRoughness)
    return 19;
  if (a1 == &type metadata for ParticleMetalness)
    return 20;
  if (a1 == &type metadata for ParticleEmission)
    return 21;
  if (a1 == &type metadata for UserData1)
    return 22;
  if (a1 == &type metadata for UserData2)
    return 23;
  if (a1 == &type metadata for UserData3)
    return 24;
  if (a1 == &type metadata for UserData4)
    return 25;
  return 28;
}

uint64_t sub_1B1C357CC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  ValueMetadata **v5;
  unint64_t v6;
  unsigned __int8 v7;

  v2 = sub_1B1C35494(MEMORY[0x1E0DEE9D8]);
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32);
  swift_retain();
  swift_release();
  v4 = *(_QWORD *)(v3 + 16);
  if (v4)
  {
    v5 = (ValueMetadata **)(v3 + 32);
    do
    {
      v7 = sub_1B1C35528(*v5);
      if (v7 != 28 && (v7 - 65) >= 0x7Fu)
      {
        if ((v7 & 0x80) != 0)
        {
          if (v7 > 0xC0u)
          {
            v6 = 1uLL >> -v7;
LABEL_5:
            if ((v6 & ~v2) == 0)
              v6 = 0;
            v2 |= v6;
          }
        }
        else if (v7 < 0x40u)
        {
          v6 = 1 << v7;
          goto LABEL_5;
        }
      }
      v5 += 2;
      --v4;
    }
    while (v4);
  }
  swift_release();
  return v2;
}

uint64_t sub_1B1C358A8()
{
  unint64_t v0;
  uint64_t result;

  if (swift_dynamicCastMetatype())
    return 0x7373616D5F746567;
  if (swift_dynamicCastMetatype())
    return 0x6F6C6F635F746567;
  v0 = 0x657A69735F746567;
  if (swift_dynamicCastMetatype() || swift_dynamicCastMetatype() || swift_dynamicCastMetatype())
    return v0;
  if (swift_dynamicCastMetatype())
    return 0x677261745F746567;
  if (swift_dynamicCastMetatype())
    return v0;
  if (swift_dynamicCastMetatype())
    return 0x6F6C65765F746567;
  if (swift_dynamicCastMetatype())
    return 0x69736F705F746567;
  v0 = 0x726573755F746567;
  if (swift_dynamicCastMetatype()
    || swift_dynamicCastMetatype()
    || swift_dynamicCastMetatype()
    || swift_dynamicCastMetatype())
  {
    return v0;
  }
  if (swift_dynamicCastMetatype())
    return 0x64695F746567;
  if (swift_dynamicCastMetatype())
    return 0x657261705F746567;
  if (swift_dynamicCastMetatype())
    return 0x6567615F746567;
  if (swift_dynamicCastMetatype())
    return 0x6569726F5F746567;
  if (swift_dynamicCastMetatype())
    return 0x67756F725F746567;
  if (swift_dynamicCastMetatype())
    return 0x6174656D5F746567;
  if (swift_dynamicCastMetatype())
    return 0x73696D655F746567;
  v0 = 0xD000000000000011;
  if (swift_dynamicCastMetatype())
    return v0;
  if (swift_dynamicCastMetatype())
    return 0xD000000000000012;
  if (swift_dynamicCastMetatype())
    return 0x6F7669705F746567;
  if (swift_dynamicCastMetatype())
    return 0x6C676E615F746567;
  if (swift_dynamicCastMetatype())
    return 0xD000000000000014;
  if (swift_dynamicCastMetatype())
    return v0;
  if (swift_dynamicCastMetatype())
    return 0xD000000000000012;
  if (swift_dynamicCastMetatype())
    return 0x6E6172745F746567;
  if (swift_dynamicCastMetatype())
    return 0x646565735F746567;
  sub_1B2229430();
  swift_bridgeObjectRelease();
  sub_1B222A210();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  result = sub_1B2229688();
  __break(1u);
  return result;
}

ValueMetadata *type metadata accessor for ParticleStoredDataSet()
{
  return &type metadata for ParticleStoredDataSet;
}

unint64_t sub_1B1C35FD8()
{
  unint64_t result;

  result = qword_1EEF5C9C0;
  if (!qword_1EEF5C9C0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2285808, &type metadata for ParticleStoredDataSet);
    atomic_store(result, (unint64_t *)&qword_1EEF5C9C0);
  }
  return result;
}

unint64_t sub_1B1C36020()
{
  unint64_t result;

  result = qword_1EEF5C9C8;
  if (!qword_1EEF5C9C8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22857D8, &type metadata for ParticleStoredDataSet);
    atomic_store(result, (unint64_t *)&qword_1EEF5C9C8);
  }
  return result;
}

unint64_t sub_1B1C36068()
{
  unint64_t result;

  result = qword_1EEF5C9D0;
  if (!qword_1EEF5C9D0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2285830, &type metadata for ParticleStoredDataSet);
    atomic_store(result, (unint64_t *)&qword_1EEF5C9D0);
  }
  return result;
}

unint64_t sub_1B1C360B0()
{
  unint64_t result;

  result = qword_1EEF5C9D8;
  if (!qword_1EEF5C9D8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2285868, &type metadata for ParticleStoredDataSet);
    atomic_store(result, (unint64_t *)&qword_1EEF5C9D8);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for ParticleStoredData(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xE5)
    goto LABEL_17;
  if (a2 + 27 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 27) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 27;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 27;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 27;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x1C;
  v8 = v6 - 28;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ParticleStoredData(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 27 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 27) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xE5)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xE4)
    return ((uint64_t (*)(void))((char *)&loc_1B1C361D0 + 4 * byte_1B22857B5[v4]))();
  *a1 = a2 + 27;
  return ((uint64_t (*)(void))((char *)sub_1B1C36204 + 4 * byte_1B22857B0[v4]))();
}

uint64_t sub_1B1C36204(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1C3620C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B1C36214);
  return result;
}

uint64_t sub_1B1C36220(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B1C36228);
  *(_BYTE *)result = a2 + 27;
  return result;
}

uint64_t sub_1B1C3622C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1C36234(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ParticleStoredData()
{
  return &type metadata for ParticleStoredData;
}

unint64_t sub_1B1C36254()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EEF5C9E0;
  if (!qword_1EEF5C9E0)
  {
    sub_1B1C3629C();
    result = MEMORY[0x1B5E23E74](MEMORY[0x1E0DEAF50], v1);
    atomic_store(result, (unint64_t *)&qword_1EEF5C9E0);
  }
  return result;
}

void sub_1B1C3629C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5C9E8)
  {
    v0 = sub_1B2228B6C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5C9E8);
  }
}

unint64_t sub_1B1C362F4()
{
  unint64_t result;

  result = qword_1EEF5C9F0;
  if (!qword_1EEF5C9F0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2285A94, &type metadata for ParticleStoredData);
    atomic_store(result, (unint64_t *)&qword_1EEF5C9F0);
  }
  return result;
}

double sub_1B1C36338()
{
  double result;
  _OWORD v1[2];
  uint64_t v2;
  uint64_t v3;
  int v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;

  if (qword_1ED4B7DB8 != -1)
    swift_once();
  v3 = qword_1ED4D09F8;
  v4 = 0;
  v5 = 2;
  v6 = 0;
  v7 = 2;
  v8 = 0;
  swift_retain();
  sub_1B1B16C9C(1, 1, (uint64_t)v1);
  swift_release();
  result = *(double *)v1;
  xmmword_1EEFD5450 = v1[0];
  unk_1EEFD5460 = v1[1];
  qword_1EEFD5470 = v2;
  return result;
}

float sub_1B1C363E0()
{
  uint64_t v0;

  return *(float *)(v0 + 12);
}

void sub_1B1C363E8(float a1)
{
  uint64_t v1;

  *(float *)(v1 + 12) = a1;
}

float sub_1B1C363F0()
{
  uint64_t v0;

  return *(float *)(v0 + 8);
}

void sub_1B1C363F8(float a1)
{
  uint64_t v1;

  *(float *)(v1 + 8) = a1;
}

float sub_1B1C36400()
{
  uint64_t v0;

  return *(float *)(v0 + 4);
}

void sub_1B1C36408(float a1)
{
  uint64_t v1;

  *(float *)(v1 + 4) = a1;
}

double sub_1B1C36410@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_WORD *)a1 = 0;
  *(_BYTE *)(a1 + 2) = 1;
  result = 0.0;
  *(_OWORD *)(a1 + 4) = xmmword_1B2244E20;
  *(_QWORD *)(a1 + 20) = 0xFF00000000;
  return result;
}

uint64_t sub_1B1C36434(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t result;
  _BYTE v10[16];

  sub_1B19F8E54(0, &qword_1EEF5CA00, (uint64_t (*)(void))sub_1B1C389CC, (uint64_t)&type metadata for ParticleCollidableCodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v6);
  v8 = &v10[-v7];
  result = sub_1B1C36540(a1, (uint64_t)&v10[-v7]);
  if (!v1)
  {
    v10[15] = 6;
    sub_1B222991C();
    v10[14] = 7;
    sub_1B222991C();
    return (*(uint64_t (**)(_BYTE *, uint64_t))(v5 + 8))(v8, v4);
  }
  return result;
}

uint64_t sub_1B1C36540@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  sub_1B19FA070(a1, a1[3]);
  sub_1B1C389CC();
  sub_1B222A180();
  sub_1B19F8E54(0, &qword_1EEF5CA00, (uint64_t (*)(void))sub_1B1C389CC, (uint64_t)&type metadata for ParticleCollidableCodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v5 = v4;
  sub_1B2229934();
  if (v2)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a2, v5);
  sub_1B2229934();
  sub_1B2229934();
  sub_1B2229934();
  sub_1B2229934();
  sub_1B1B4A4D0();
  return sub_1B2229958();
}

uint64_t sub_1B1C36710@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  sub_1B19FA070(a1, a1[3]);
  sub_1B1C389CC();
  sub_1B222A180();
  sub_1B19F8E54(0, &qword_1EEF5CA00, (uint64_t (*)(void))sub_1B1C389CC, (uint64_t)&type metadata for ParticleCollidableCodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v5 = v4;
  sub_1B2229934();
  if (v2)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a2, v5);
  sub_1B2229934();
  sub_1B2229934();
  sub_1B2229934();
  sub_1B2229934();
  sub_1B1B4A4D0();
  return sub_1B2229958();
}

uint64_t sub_1B1C368E0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  sub_1B19FA070(a1, a1[3]);
  sub_1B1C389CC();
  sub_1B222A180();
  sub_1B19F8E54(0, &qword_1EEF5CA00, (uint64_t (*)(void))sub_1B1C389CC, (uint64_t)&type metadata for ParticleCollidableCodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v5 = v4;
  sub_1B2229934();
  if (v2)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a2, v5);
  sub_1B2229934();
  sub_1B2229934();
  sub_1B2229934();
  sub_1B2229934();
  sub_1B1B4A4D0();
  return sub_1B2229958();
}

uint64_t sub_1B1C36AB0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1B1C36AD8(a1, a2);
}

uint64_t sub_1B1C36AC4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1B1C368E0(a1, a2);
}

uint64_t sub_1B1C36AD8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  sub_1B19FA070(a1, a1[3]);
  sub_1B1C389CC();
  sub_1B222A180();
  sub_1B19F8E54(0, &qword_1EEF5CA00, (uint64_t (*)(void))sub_1B1C389CC, (uint64_t)&type metadata for ParticleCollidableCodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v5 = v4;
  sub_1B2229934();
  if (v2)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a2, v5);
  sub_1B2229934();
  sub_1B2229934();
  sub_1B2229934();
  sub_1B2229934();
  sub_1B1B4A4D0();
  return sub_1B2229958();
}

uint64_t sub_1B1C36CBC(_QWORD *a1, char a2)
{
  float *v2;
  uint64_t v3;
  float *v4;
  uint64_t result;
  uint64_t v8;
  float v9;
  uint64_t v10;
  float v11;
  float v12;
  float v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  char v22;

  v4 = v2;
  sub_1B19FA070(a1, a1[3]);
  sub_1B1C389CC();
  result = sub_1B222A150();
  if (!v3)
  {
    sub_1B19F8E54(0, (unint64_t *)&unk_1EEF61C30, (uint64_t (*)(void))sub_1B1C389CC, (uint64_t)&type metadata for ParticleCollidableCodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
    v8 = sub_1B222979C();
    v9 = *(float *)&v8;
    if ((v8 & 0x100000000) != 0)
      v9 = 0.0;
    v2[1] = v9;
    v10 = sub_1B222979C();
    v11 = *(float *)&v10;
    if ((v10 & 0x100000000) != 0)
      v11 = 0.0;
    v2[2] = v11;
    sub_1B22297F0();
    v13 = v12;
    v2[3] = v12;
    v14 = a1[3];
    v15 = a1[4];
    sub_1B19FA070(a1, v14);
    if (sub_1B2067B64(1039, v14, v15) && (a2 & 1) == 0)
      v4[3] = v13 + 1.0;
    sub_1B22297F0();
    *((_DWORD *)v4 + 4) = v16;
    v17 = a1[3];
    v18 = a1[4];
    sub_1B19FA070(a1, v17);
    if (sub_1B2067BAC(2024, v17, v18))
    {
      sub_1B22297F0();
      *((_DWORD *)v4 + 5) = v19;
    }
    sub_1B1B4A48C();
    result = sub_1B22297B4();
    v20 = v21;
    if (v22)
      v20 = 255;
    *((_DWORD *)v4 + 6) = v20;
  }
  return result;
}

uint64_t sub_1B1C36F38(_QWORD *a1, char a2)
{
  float *v2;
  uint64_t v3;
  float *v4;
  uint64_t result;
  uint64_t v8;
  float v9;
  uint64_t v10;
  float v11;
  float v12;
  float v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  char v22;

  v4 = v2;
  sub_1B19FA070(a1, a1[3]);
  sub_1B1C389CC();
  result = sub_1B222A150();
  if (!v3)
  {
    sub_1B19F8E54(0, (unint64_t *)&unk_1EEF61C30, (uint64_t (*)(void))sub_1B1C389CC, (uint64_t)&type metadata for ParticleCollidableCodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
    v8 = sub_1B222979C();
    v9 = *(float *)&v8;
    if ((v8 & 0x100000000) != 0)
      v9 = 0.0;
    *v2 = v9;
    v10 = sub_1B222979C();
    v11 = *(float *)&v10;
    if ((v10 & 0x100000000) != 0)
      v11 = 0.0;
    v2[1] = v11;
    sub_1B22297F0();
    v13 = v12;
    v2[2] = v12;
    v14 = a1[3];
    v15 = a1[4];
    sub_1B19FA070(a1, v14);
    if (sub_1B2067B64(1039, v14, v15) && (a2 & 1) == 0)
      v4[2] = v13 + 1.0;
    sub_1B22297F0();
    *((_DWORD *)v4 + 3) = v16;
    v17 = a1[3];
    v18 = a1[4];
    sub_1B19FA070(a1, v17);
    if (sub_1B2067BAC(2024, v17, v18))
    {
      sub_1B22297F0();
      *((_DWORD *)v4 + 7) = v19;
    }
    sub_1B1B4A48C();
    result = sub_1B22297B4();
    v20 = v21;
    if (v22)
      v20 = 255;
    *((_DWORD *)v4 + 4) = v20;
  }
  return result;
}

uint64_t sub_1B1C371B4(_QWORD *a1, char a2)
{
  float *v2;
  uint64_t v3;
  float *v4;
  uint64_t result;
  uint64_t v8;
  float v9;
  uint64_t v10;
  float v11;
  float v12;
  float v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  char v22;

  v4 = v2;
  sub_1B19FA070(a1, a1[3]);
  sub_1B1C389CC();
  result = sub_1B222A150();
  if (!v3)
  {
    sub_1B19F8E54(0, (unint64_t *)&unk_1EEF61C30, (uint64_t (*)(void))sub_1B1C389CC, (uint64_t)&type metadata for ParticleCollidableCodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
    v8 = sub_1B222979C();
    v9 = *(float *)&v8;
    if ((v8 & 0x100000000) != 0)
      v9 = 0.0;
    *v2 = v9;
    v10 = sub_1B222979C();
    v11 = *(float *)&v10;
    if ((v10 & 0x100000000) != 0)
      v11 = 0.0;
    v2[1] = v11;
    sub_1B22297F0();
    v13 = v12;
    v2[2] = v12;
    v14 = a1[3];
    v15 = a1[4];
    sub_1B19FA070(a1, v14);
    if (sub_1B2067B64(1039, v14, v15) && (a2 & 1) == 0)
      v4[2] = v13 + 1.0;
    sub_1B22297F0();
    *((_DWORD *)v4 + 3) = v16;
    v17 = a1[3];
    v18 = a1[4];
    sub_1B19FA070(a1, v17);
    if (sub_1B2067BAC(2024, v17, v18))
    {
      sub_1B22297F0();
      *((_DWORD *)v4 + 4) = v19;
    }
    sub_1B1B4A48C();
    result = sub_1B22297B4();
    v20 = v21;
    if (v22)
      v20 = 255;
    *((_DWORD *)v4 + 5) = v20;
  }
  return result;
}

uint64_t sub_1B1C37430(_QWORD *a1, char a2)
{
  return sub_1B1C371B4(a1, a2);
}

double sub_1B1C37444@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  double result;
  _BYTE v5[28];

  sub_1B1C3865C(a1, (uint64_t)v5);
  if (!v2)
  {
    *a2 = *(_OWORD *)v5;
    result = *(double *)&v5[12];
    *(_OWORD *)((char *)a2 + 12) = *(_OWORD *)&v5[12];
  }
  return result;
}

uint64_t sub_1B1C37484(_QWORD *a1)
{
  return sub_1B1C36434(a1);
}

uint64_t *sub_1B1C374BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *result;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  os_unfair_lock_s *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  float32x4_t *v18;
  uint64_t v19;
  float32x4_t *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  _QWORD *v32;
  uint64_t v33[8];
  _OWORD v34[2];
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  _OWORD v44[2];
  uint64_t v45;
  _BYTE v46[40];
  _OWORD v47[2];
  uint64_t v48;

  if (qword_1EEF57320 != -1)
    swift_once();
  v47[0] = xmmword_1EEFD5450;
  v47[1] = unk_1EEFD5460;
  v48 = qword_1EEFD5470;
  v4 = a2 & 0xFFFFFFFFFFLL;
  sub_1B1E8FCE4(a1, (uint64_t)v47, a2 & 0xFFFFFFFFFFLL, v33);
  result = (uint64_t *)sub_1B1A18378((uint64_t)v33, (uint64_t)v34, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (*(_QWORD *)&v34[0])
  {
    v41 = v34[0];
    v42 = v34[1];
    v43 = v35;
    if (v40 >= 1)
    {
      v26 = v37;
      if (v37)
      {
        v24 = v36;
        v6 = v39[4];
        v31 = *(unsigned __int8 *)(v38 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
        v32 = v39;
        v22 = v39 + 8;
        v23 = (uint64_t)(v39 + 6);
        swift_retain();
        swift_retain();
        swift_retain();
        v7 = 0;
        v25 = v6;
        do
        {
          v8 = (unsigned int *)(v24 + 48 * v7);
          v9 = *v8;
          v10 = (uint64_t *)*((_QWORD *)v8 + 2);
          v11 = *((_QWORD *)v8 + 4);
          v12 = *((_QWORD *)v8 + 5);
          v30 = v7;
          v28 = v8[1];
          v29 = *((_QWORD *)v8 + 3);
          if (v31)
          {
            v13 = *(os_unfair_lock_s **)(v12 + 376);
            swift_retain();
            os_unfair_lock_lock(v13);
            os_unfair_lock_lock(*(os_unfair_lock_t *)(v12 + 344));
          }
          else
          {
            swift_retain();
          }
          ecs_stack_allocator_push_snapshot(v6);
          sub_1B1A18378(v23, (uint64_t)v46, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
          v14 = v32[4];
          v15 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v12 + 40) + 16) + 32) + 16) + 1;
          swift_retain();
          v32[6] = ecs_stack_allocator_allocate(v14, 48 * v15, 8);
          v32[7] = v15;
          v22[1] = 0;
          v22[2] = 0;
          *v22 = 0;
          swift_release();
          v16 = sub_1B1A12038((uint64_t)&type metadata for ParticlePlaneCollider, (uint64_t)&off_1E63A4A68, v10, v29, v11, (uint64_t)v32);
          v17 = sub_1B1A12038((uint64_t)&type metadata for WorldTransform, (uint64_t)&off_1E6382C00, v10, v29, v11, (uint64_t)v32);
          v18 = (float32x4_t *)v17;
          if (v10)
          {
            for (; v11; --v11)
            {
              v19 = *v10++;
              sub_1B1C38A88(v12, v19, v16, v18, v27, v4, a1);
              v18 += 4;
              v16 += 28;
            }
          }
          else if ((_DWORD)v9 != (_DWORD)v28)
          {
            v20 = (float32x4_t *)(v17 + (v9 << 6));
            v21 = v16 + 28 * v9;
            do
            {
              sub_1B1C38A88(v12, v9++, v21, v20, v27, v4, a1);
              v20 += 4;
              v21 += 28;
            }
            while (v28 != v9);
          }
          v44[0] = v41;
          v44[1] = v42;
          v45 = v43;
          sub_1B1F05D48(v32, (unsigned __int16 **)v44, (uint64_t)v46);
          sub_1B1F03804((char *)v12);
          v6 = v25;
          ecs_stack_allocator_pop_snapshot(v25);
          if ((v31 & 1) != 0)
          {
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v12 + 344));
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v12 + 376));
          }
          swift_release();
          v7 = v30 + 1;
        }
        while (v30 + 1 != v26);
        sub_1B19ED748(v33);
      }
    }
    return sub_1B19ED748(v33);
  }
  return result;
}

uint64_t sub_1B1C378C0(__int128 *a1, __int128 *a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, char a7, char a8, float a9)
{
  __int128 v9;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  unsigned int v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  int8x16_t v31;
  uint64_t v32;
  float v33;
  int v35;
  float v36;
  float32x4_t v37;
  float v38;
  uint64_t v39;
  int8x16_t v40;
  float32x4_t v41;
  float32x4_t v47;
  int8x16_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  unsigned __int32 v52;
  float v53;
  float32x4_t v54;
  float32x4_t v55;
  int8x16_t v56;
  float v57;
  int8x16_t v58;
  float v59;
  float32x4_t v60;
  float v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x2_t v65;
  float32x2_t v66;
  float32x2_t v67;
  float32x2_t v68;
  float32x2_t v69;
  int32x2_t v70;
  __int32 v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  int32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  float v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  float32x4_t v97;
  float v98;
  float v99;
  float v100;
  float32x4_t v101;
  float32x4_t v102;
  float32x4_t v103;
  float v104;
  float v105;
  float v106;
  float v107;
  float v108;
  float v109;
  float v110;
  float v113;
  float v114;
  float v115;
  float v118;
  BOOL v119;
  float v120;
  float v123;
  float32x4_t v125;
  int8x16_t v126;
  int8x16_t v127;
  float32x4_t v128;
  float32x4_t v129;
  int32x4_t v130;
  float32x4_t v131;
  float v132;
  float32x4_t v133;
  float32x4_t v134;
  int32x2_t v135;
  __int32 v136;
  uint64_t v137;
  uint64_t *v138;
  uint64_t v139;
  uint64_t v140;
  __int32 v141;
  __int32 v142;
  float32x4_t v143;
  float32x4_t v144;
  float32x4_t v145;
  uint64_t v147;
  float32x4_t v148;
  uint64_t v149;
  unsigned int v152;
  float32x4_t v153;
  char v156;
  int8x16_t v157;
  uint64_t v160;
  uint64_t v161;
  char v162;
  __int128 v163;
  uint64_t v164;
  ValueMetadata *v165;
  _UNKNOWN **v166;
  __int128 v167;
  _QWORD v168[6];
  float v169;
  char v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  _QWORD *v178;
  uint64_t v179;
  uint64_t v180;
  _QWORD *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;

  v184 = *MEMORY[0x1E0C80C00];
  v13 = (uint64_t *)*((_QWORD *)a1 + 11);
  v14 = *((_QWORD *)a1 + 12);
  v15 = *((_QWORD *)a1 + 13);
  v16 = *((_QWORD *)a1 + 1);
  v17 = *((_QWORD *)a1 + 2);
  v161 = sub_1B1A12038((uint64_t)&type metadata for Position, (uint64_t)&off_1E63C2398, v13, v14, v15, v17);
  v160 = sub_1B1A12038((uint64_t)&type metadata for Velocity, (uint64_t)&off_1E63C30D0, v13, v14, v15, v17);
  v147 = sub_1B1B47B28();
  v156 = v18;
  v149 = sub_1B1B47B98();
  v152 = v19;
  v163 = *a2;
  v167 = *(_OWORD *)(a3 + 32);
  v20 = a1[3];
  v173 = a1[2];
  v21 = *a1;
  v172 = a1[1];
  v171 = v21;
  v177 = a1[6];
  v22 = a1[4];
  v176 = a1[5];
  v175 = v22;
  v165 = &type metadata for CollisionProperties;
  v166 = &off_1E6397A08;
  v164 = *((_QWORD *)a2 + 2);
  v23 = *(_QWORD *)(a4 + 16);
  v174 = v20;
  v25 = *((_QWORD *)a1 + 6);
  v24 = *((_QWORD *)a1 + 7);
  v26 = *(_QWORD *)(v17 + 32);
  swift_retain();
  v178 = ecs_stack_allocator_allocate(v26, 8 * (v24 - v25), 8);
  v179 = v24 - v25;
  v180 = 0;
  sub_1B19FA198((uint64_t)&v163, (uint64_t)v168);
  v169 = a9;
  v168[5] = v23;
  sub_1B1A10AA4(*(_QWORD *)(v16 + 40), (uint64_t)&type metadata for Anchored, &v162);
  v170 = v162;
  swift_retain();
  v27 = ecs_stack_allocator_allocate(v26, 80 * (v24 - v25), 16);
  swift_release();
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v163);
  v32 = v152;
  v33 = a9;
  v181 = v27;
  v182 = v24 - v25;
  v183 = 0;
  if (v24 != v25)
  {
    v35 = v156 & 1;
    v36 = *(float *)(a4 + 80) * 0.5;
    v37 = *(float32x4_t *)a3;
    LODWORD(v38) = HIDWORD(*(_OWORD *)a3);
    v39 = 16 * v25;
    v31.i32[0] = 1.0;
    v40.i64[0] = 0x8000000080000000;
    v40.i64[1] = 0x8000000080000000;
    v41 = 0uLL;
    __asm { FMOV            V0.4S, #-1.0 }
    v157 = _Q0;
    __asm { FMOV            V15.4S, #1.0 }
    v47 = (float32x4_t)xmmword_1B2245780;
    v48.i64[0] = 0x8000000080000000;
    v48.i64[1] = 0x8000000080000000;
    v144 = _Q15;
    v145 = *(float32x4_t *)a3;
    do
    {
      if ((v32 & 1) != 0)
      {
        v49 = _Q15;
        v49.i32[3] = v30.i32[3];
        v30 = v49;
      }
      else
      {
        v49 = *(float32x4_t *)(v149 + 16 * v25);
      }
      v50 = vmulq_n_f32(*(float32x4_t *)(v160 + 16 * v25), v33);
      v51 = vmulq_f32(v37, v50);
      v28.f32[0] = v51.f32[2] + vaddv_f32(*(float32x2_t *)v51.f32);
      v52 = vbslq_s8(v40, v31, (int8x16_t)v28).u32[0];
      if (v28.f32[0] == 0.0)
        v53 = 0.0;
      else
        v53 = *(float *)&v52;
      if ((*(_BYTE *)(a6 + 1) & 1) == 0 && v53 >= 0.0)
        goto LABEL_5;
      v54 = vsubq_f32(*(float32x4_t *)(v161 + 16 * v25), v50);
      v49.f32[0] = v36 * fmaxf(fmaxf(v49.f32[0], v49.f32[2]), v49.f32[1]);
      if (*(_BYTE *)(a6 + 1))
      {
        v55 = v37;
        v55.f32[3] = v38 + (float)(v53 * v49.f32[0]);
        v56 = (int8x16_t)vmulq_f32(v50, v55);
        v57 = vaddv_f32(vadd_f32(*(float32x2_t *)v56.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v56, v56, 8uLL)));
        if (v57 == 0.0)
          goto LABEL_29;
        v58 = (int8x16_t)vmulq_f32(v54, v55);
        v59 = vaddv_f32(vadd_f32(*(float32x2_t *)v58.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v58, v58, 8uLL)));
      }
      else
      {
        v57 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v51, 2), vaddq_f32(v51, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v51.f32, 1))).f32[0];
        if (v57 >= 0.0)
        {
LABEL_29:
          if ((*(_DWORD *)(a4 + 80) & 0x7FFFFFFF) == 0 || (a7 & 1) == 0)
            goto LABEL_5;
LABEL_31:
          v72 = *(float32x4_t *)(a3 + 48);
          v73 = *(float32x4_t *)(a3 + 64);
          v74 = *(float32x4_t *)(a3 + 80);
          v75 = *(float32x4_t *)(a3 + 96);
          v76 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v72, v54.f32[0]), v73, *(float32x2_t *)v54.f32, 1), v74, v54, 2), v75, v54, 3);
          v77 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v72, v50.f32[0]), v73, *(float32x2_t *)v50.f32, 1), v74, v50, 2), v75, v50, 3);
          v72.i64[0] = *(_QWORD *)(a3 + 160);
          v28 = (float32x4_t)vextq_s8((int8x16_t)vzip1q_s32((int32x4_t)v41, (int32x4_t)v72), (int8x16_t)v41, 4uLL);
          v28.i32[3] = v29.i32[3];
          v78 = vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v49.f32, 0), v28);
          v79 = vcgezq_f32(v77);
          v79.i32[3] = 0;
          v80 = vabsq_f32(v77);
          v80.i32[3] = 0;
          v81 = vdivq_f32(_Q15, vmaxnmq_f32(v80, v47));
          v82 = vmulq_f32(v81, v78);
          v83 = vmulq_f32(v76, vmulq_f32(v81, vnegq_f32((float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v79), (int8x16_t)_Q15, v157))));
          v84 = vsubq_f32(v83, v82);
          v85 = vaddq_f32(v82, v83);
          v61 = fmaxf(fmaxf(v84.f32[0], v84.f32[2]), v84.f32[1]);
          v86 = fminf(fminf(v85.f32[0], v85.f32[2]), v85.f32[1]);
          if (v61 <= v86 && v86 >= 0.0)
          {
            v91 = vmlaq_n_f32(v76, v77, v61);
            v87 = (float32x4_t)vbslq_s8(vorrq_s8((int8x16_t)vcltzq_f32(v91), (int8x16_t)vcgtzq_f32(v91)), vorrq_s8(vandq_s8((int8x16_t)v91, v48), (int8x16_t)_Q15), (int8x16_t)v41);
            v88 = vmulq_f32(v76, v87);
            _Q7 = vmulq_f32(v77, v87);
            v90 = vmulq_f32(v91, v87);
            v91.f32[0] = fminf(v49.f32[0], fminf(fminf(v78.f32[0], v78.f32[2]), v78.f32[1]));
            v92 = vsubq_f32(v78, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v91.f32, 0));
            v93 = vsubq_f32(v90, v92);
            v94 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v93, (int8x16_t)v93, 0xCuLL), (int8x16_t)v93, 8uLL);
            v93.i32[3] = 0;
            v94.i32[3] = 0;
            v95 = vmaxnmq_f32(v93, v94);
            if (fminf(fminf(v95.f32[0], v95.f32[2]), v95.f32[1]) < 0.0 && v61 >= 0.0 && v61 <= *(float *)v31.i32)
              goto LABEL_67;
            v97 = vmulq_f32(_Q7, _Q7);
            v98 = vaddv_f32(*(float32x2_t *)v97.f32);
            v99 = v97.f32[2] + v98;
            if ((float)(v97.f32[2] + v98) >= 0.00000011921)
            {
              v100 = v91.f32[0] * v91.f32[0];
              v101 = vsubq_f32(v88, v92);
              v102 = vmulq_f32(_Q7, v101);
              v103 = vmulq_f32(v101, v101);
              v104 = vaddv_f32(*(float32x2_t *)v102.f32);
              v105 = v102.f32[2] + v104;
              v106 = vaddv_f32(*(float32x2_t *)v103.f32);
              v107 = (float)(v105 * v105) - (float)(v99 * (float)((float)(v103.f32[2] + v106) - v100));
              if (v107 <= 0.0)
                v61 = 1.0e10;
              else
                v61 = (float)((float)-v105 - sqrtf(v107)) / v99;
              v108 = v102.f32[1] + v102.f32[2];
              v109 = (float)(v108 * v108)
                   - (float)((float)(v97.f32[1] + v97.f32[2]) * (float)((float)(v103.f32[1] + v103.f32[2]) - v100));
              if (v109 > 0.0)
              {
                v110 = (float)((float)-v108 - sqrtf(v109)) / (float)(v97.f32[1] + v97.f32[2]);
                _NF = fabsf(vmlas_n_f32(v88.f32[0], v110, _Q7.f32[0])) < v92.f32[0] && v110 < v61;
                if (_NF && v110 >= 0.0)
                  v61 = v110;
              }
              v113 = v97.f32[2] + v97.f32[0];
              v114 = v102.f32[2] + v102.f32[0];
              v115 = (float)(v114 * v114) - (float)(v113 * (float)((float)(v103.f32[2] + v103.f32[0]) - v100));
              if (v115 <= 0.0)
              {
                v47 = (float32x4_t)xmmword_1B2245780;
                v48.i64[0] = 0x8000000080000000;
                v48.i64[1] = 0x8000000080000000;
              }
              else
              {
                _S20 = (float)((float)-v114 - sqrtf(v115)) / v113;
                __asm { FMLA            S21, S20, V7.S[1] }
                v118 = fabsf(_S21);
                v119 = _NF && v118 < v92.f32[1];
                v47 = (float32x4_t)xmmword_1B2245780;
                v48.i64[0] = 0x8000000080000000;
                v48.i64[1] = 0x8000000080000000;
                if (v119)
                  v61 = _S20;
              }
              v120 = (float)(v104 * v104) - (float)(v98 * (float)(v106 - v100));
              if (v120 <= 0.0)
                goto LABEL_65;
              _S16 = (float)((float)-v104 - sqrtf(v120)) / v98;
              __asm { FMLA            S17, S16, V7.S[2] }
              v123 = fabsf(_S17);
              if (_NF && v123 < v92.f32[2])
              {
                v61 = _S16;
                if (_S16 >= 0.0)
                  goto LABEL_66;
              }
              else
              {
LABEL_65:
                if (v61 >= 0.0)
                {
LABEL_66:
                  if (v61 <= *(float *)v31.i32)
                  {
LABEL_67:
                    v125 = vmlaq_f32(vmulq_n_f32(_Q7, v61), v87, v88);
                    v126 = vorrq_s8(vandq_s8((int8x16_t)v125, v48), (int8x16_t)_Q15);
                    v127 = vorrq_s8((int8x16_t)vcltzq_f32(v125), (int8x16_t)vcgtzq_f32(v125));
                    v128 = vsubq_f32(vabsq_f32(v125), v92);
                    v128.i32[3] = 0;
                    v129 = vmaxnmq_f32(v128, v41);
                    v130 = (int32x4_t)vmulq_f32(v129, v129);
                    v131 = (float32x4_t)vbslq_s8(v127, v126, (int8x16_t)v41);
                    v127.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v130, 2), vadd_f32(*(float32x2_t *)v130.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v130.i8, 1))).u32[0];
                    *(float32x2_t *)v130.i8 = vrsqrte_f32((float32x2_t)v127.u32[0]);
                    *(float32x2_t *)v130.i8 = vmul_f32(*(float32x2_t *)v130.i8, vrsqrts_f32((float32x2_t)v127.u32[0], vmul_f32(*(float32x2_t *)v130.i8, *(float32x2_t *)v130.i8)));
                    LODWORD(v132) = vmul_f32(*(float32x2_t *)v130.i8, vrsqrts_f32((float32x2_t)v127.u32[0], vmul_f32(*(float32x2_t *)v130.i8, *(float32x2_t *)v130.i8))).u32[0];
                    if (v61 >= 0.0)
                    {
                      v133 = vmulq_f32(v131, vmulq_n_f32(v129, v132));
                      v134 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*(float32x4_t *)(a3 + 112), v133.f32[0]), *(float32x4_t *)(a3 + 128), *(float32x2_t *)v133.f32, 1), *(float32x4_t *)(a3 + 144), v133, 2);
                      v134.i32[3] = v141;
                      v62 = vmlaq_n_f32(v54, v77, v61);
                      v29 = v28;
                      goto LABEL_74;
                    }
                  }
                }
              }
            }
          }
          v29 = v28;
          goto LABEL_5;
        }
        v60 = vmulq_f32(v37, v54);
        v59 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v60, 2), vaddq_f32(v60, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v60.f32, 1))).f32[0]+ (float)(v38 + (float)(v53 * v49.f32[0]));
      }
      v61 = (float)-v59 / v57;
      if (v61 > *(float *)v31.i32)
        goto LABEL_5;
      if ((*(_DWORD *)(a4 + 80) & 0x7FFFFFFF) != 0 && (a7 & 1) != 0)
        goto LABEL_31;
      if (v61 >= 0.0)
      {
        v62 = vmlaq_n_f32(v54, v50, v61);
        if ((a7 & 1) == 0)
        {
          v63 = v143;
LABEL_73:
          v134 = vmulq_n_f32(v37, -v53);
          v134.i32[3] = v142;
          v143 = v63;
LABEL_74:
          v153 = v30;
          v148 = v29;
          v137 = v32;
          if (v35)
          {
            v139 = 0;
            v140 = 0;
          }
          else
          {
            v138 = (uint64_t *)(v147 + 16 * v25);
            v139 = *v138;
            v140 = v138[1];
          }
          v62.i32[3] = HIDWORD(v9);
          sub_1B2021194(v25, (float32x4_t *)(v161 + v39), (float32x4_t *)(v160 + v39), v139, v140, v35, v62, v134, v61);
          v29 = v148;
          v33 = a9;
          v32 = v137;
          _Q15 = v144;
          v37 = v145;
          v31.i32[0] = 1.0;
          v40.i64[0] = 0x8000000080000000;
          v40.i64[1] = 0x8000000080000000;
          v41 = 0uLL;
          v47 = (float32x4_t)xmmword_1B2245780;
          v48.i64[0] = 0x8000000080000000;
          v48.i64[1] = 0x8000000080000000;
          v30 = v153;
          goto LABEL_5;
        }
        v63 = v62;
        v63.i32[3] = v143.i32[3];
        v64 = vsubq_f32(v63, *(float32x4_t *)(a3 + 16));
        v65 = *(float32x2_t *)(a3 + 112);
        v66 = *(float32x2_t *)(a3 + 120);
        v67 = *(float32x2_t *)(a3 + 116);
        v67.i32[1] = *(_DWORD *)(a3 + 144);
        v65.i32[1] = *(_DWORD *)(a3 + 148);
        v66.i32[1] = *(_DWORD *)(a3 + 152);
        v68 = vabs_f32(vadd_f32(vmul_laneq_f32(v66, v64, 2), vadd_f32(vmul_f32(v67, (float32x2_t)vrev64_s32(*(int32x2_t *)v64.f32)), vmul_f32(v65, *(float32x2_t *)v64.f32))));
        v69 = *(float32x2_t *)(a3 + 160);
        if ((a8 & 1) != 0)
        {
          v70 = vcgt_f32(v68, v69);
          v71 = v70.i32[1];
          if (v70.i32[1] >= v70.i32[0])
            v71 = v70.i32[0];
          if ((v71 & 0x80000000) == 0)
            goto LABEL_73;
        }
        else
        {
          v135 = vcge_f32(v69, v68);
          v136 = v135.i32[1];
          if (v135.i32[1] <= v135.i32[0])
            v136 = v135.i32[0];
          if ((v136 & 0x80000000) == 0)
            goto LABEL_73;
        }
        v143 = v63;
      }
LABEL_5:
      ++v25;
      v39 += 16;
    }
    while (v24 != v25);
  }
  sub_1B1C38184((uint64_t)&v167, a5 | ((HIDWORD(a5) & 1) << 32));
  return sub_1B1C390B0((uint64_t)&v167);
}

uint64_t sub_1B1C38184(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[6];
  _QWORD v9[30];

  v3 = sub_1B1C390E4(a1, (uint64_t)v9);
  if (v9[28])
  {
    MEMORY[0x1E0C80A78](v3, v9[7]);
    v8[2] = v9;
    sub_1B1F08D20(0, v4, 1, a2 | ((HIDWORD(a2) & 1) << 32), v5, (void (*)(_QWORD *))sub_1B1C39120, (uint64_t)v8, v6);
    ecs_stack_allocator_deallocate(*(_QWORD **)(v9[11] + 32), v9[26], 80 * v9[27]);
  }
  sub_1B2021E28(v9);
  return sub_1B1C390B0((uint64_t)v9);
}

float32x2_t sub_1B1C3824C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>, float32x4_t a3@<Q0>, float32x4_t a4@<Q1>, float32x4_t a5@<Q2>, float32x4_t a6@<Q3>, float32x4_t a7@<Q4>, float32x4_t a8@<Q5>, float32x4_t a9@<Q6>, float32x4_t a10@<Q7>)
{
  uint64_t v12;
  uint64_t v13;
  int8x16_t v14;
  int8x16_t v15;
  int8x16_t v16;
  float32x4_t v17;
  float32x4_t v18;
  int32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  int8x16_t v28;
  int32x4_t v29;
  float32x2_t v30;
  float32x2_t v31;
  int32x2_t v32;
  int v33;
  float32x2_t v34;
  float32x2_t v35;
  int32x2_t v36;
  float32x2_t v37;
  float32x2_t v38;
  int32x2_t v39;
  float32x2_t v40;
  float32x2_t v41;
  float32x4_t v42;
  float32x4_t v43;
  int32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  int32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  int8x16_t v52;
  int8x16_t v53;
  int8x16_t v54;
  int8x16_t v55;
  int8x16_t v56;
  int8x16_t v57;
  int8x16_t v58;
  int8x16_t v59;
  int8x16_t v60;
  unsigned int v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x2_t result;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v74;
  float32x4_t v78;
  float32x4_t v80;
  float32x4_t v82;
  char v83[48];
  uint64_t v84;
  uint64_t v85;
  _BYTE v86[80];
  simd_float4x4 v87;
  simd_float4x4 v88;

  sub_1B1AE09AC(a1, (uint64_t)v83);
  v13 = v84;
  v12 = v85;
  v82 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a7, a3.f32[0]), a8, *(float32x2_t *)a3.f32, 1), a9, a3, 2), a10, a3, 3);
  v80 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a7, a4.f32[0]), a8, *(float32x2_t *)a4.f32, 1), a9, a4, 2), a10, a4, 3);
  v78 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a7, a5.f32[0]), a8, *(float32x2_t *)a5.f32, 1), a9, a5, 2), a10, a5, 3);
  v74 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a7, a6.f32[0]), a8, *(float32x2_t *)a6.f32, 1), a9, a6, 2), a10, a6, 3);
  sub_1B1AE09AC(a1, (uint64_t)v86);
  v14 = (int8x16_t)vmulq_f32(v82, v82);
  v15 = (int8x16_t)vmulq_f32(v80, v80);
  v16 = (int8x16_t)vmulq_f32(v78, v78);
  v17 = (float32x4_t)vtrn2q_s32((int32x4_t)v14, (int32x4_t)v15);
  v17.i32[2] = v16.i32[1];
  v18 = vaddq_f32((float32x4_t)vzip1q_s32(vzip2q_s32((int32x4_t)v14, (int32x4_t)v16), vdupq_laneq_s32((int32x4_t)v15, 2)), vaddq_f32((float32x4_t)vzip1q_s32(vzip1q_s32((int32x4_t)v14, (int32x4_t)v16), (int32x4_t)v15), v17));
  __asm { FMOV            V1.4S, #1.0 }
  v24 = vceqzq_f32(v18);
  v24.i32[3] = 0;
  v25 = 0uLL;
  v67 = v18;
  v26 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v24), (int8x16_t)v18, (int8x16_t)vdivq_f32(_Q1, v18));
  v27 = vmlaq_f32(vaddq_f32(vmulq_lane_f32(v80, *(float32x2_t *)v26.f32, 1), vmulq_f32(vmulq_laneq_f32(v78, v26, 2), (float32x4_t)0)), (float32x4_t)0, vmulq_n_f32(v82, v26.f32[0]));
  v28 = (int8x16_t)vabsq_f32(v27);
  if (*(float *)v28.i32 > 0.00000011921
    || (v28.i32[0] = vextq_s8(v28, v28, 8uLL).u32[0],
        *(int32x2_t *)v28.i8 = vcge_f32((float32x2_t)0x3400000034000000, *(float32x2_t *)v28.i8),
        (v28.i8[4] & 1) == 0)
    || (v28.i8[0] & 1) == 0)
  {
    v29 = (int32x4_t)vmulq_f32(v27, v27);
    v29.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v29, 2), vadd_f32(*(float32x2_t *)v29.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v29.i8, 1))).u32[0];
    v30 = vrsqrte_f32((float32x2_t)v29.u32[0]);
    v31 = vmul_f32(v30, vrsqrts_f32((float32x2_t)v29.u32[0], vmul_f32(v30, v30)));
    v25 = vmulq_n_f32(v27, vmul_f32(v31, vrsqrts_f32((float32x2_t)v29.u32[0], vmul_f32(v31, v31))).f32[0]);
  }
  v68 = v25;
  v69 = (float32x4_t)v14;
  v32 = (int32x2_t)vadd_f32(*(float32x2_t *)v14.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v14, v14, 8uLL));
  v33 = v86[64];
  v32.i32[0] = vadd_f32((float32x2_t)v32, (float32x2_t)vdup_lane_s32(v32, 1)).u32[0];
  v34 = vrsqrte_f32((float32x2_t)v32.u32[0]);
  v35 = vmul_f32(v34, vrsqrts_f32((float32x2_t)v32.u32[0], vmul_f32(v34, v34)));
  v32.i32[0] = vmul_f32(v35, vrsqrts_f32((float32x2_t)v32.u32[0], vmul_f32(v35, v35))).u32[0];
  v36 = (int32x2_t)vadd_f32(*(float32x2_t *)v15.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v15, v15, 8uLL));
  v35.i32[0] = vadd_f32((float32x2_t)v36, (float32x2_t)vdup_lane_s32(v36, 1)).u32[0];
  v87.columns[0] = (simd_float4)vmulq_n_f32(v82, *(float *)v32.i32);
  v37 = vrsqrte_f32((float32x2_t)v35.u32[0]);
  v38 = vmul_f32(v37, vrsqrts_f32((float32x2_t)v35.u32[0], vmul_f32(v37, v37)));
  v38.i32[0] = vmul_f32(v38, vrsqrts_f32((float32x2_t)v35.u32[0], vmul_f32(v38, v38))).u32[0];
  v70 = (float32x4_t)v16;
  v39 = (int32x2_t)vadd_f32(*(float32x2_t *)v16.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v16, v16, 8uLL));
  v87.columns[1] = (simd_float4)vmulq_n_f32(v80, v38.f32[0]);
  v39.i32[0] = vadd_f32((float32x2_t)v39, (float32x2_t)vdup_lane_s32(v39, 1)).u32[0];
  v40 = vrsqrte_f32((float32x2_t)v39.u32[0]);
  v41 = vmul_f32(v40, vrsqrts_f32((float32x2_t)v39.u32[0], vmul_f32(v40, v40)));
  v87.columns[2] = (simd_float4)vmulq_n_f32(v78, vmul_f32(v41, vrsqrts_f32((float32x2_t)v39.u32[0], vmul_f32(v41, v41))).f32[0]);
  v87.columns[3] = (simd_float4)v74;
  v88 = __invert_f4(v87);
  v42.i64[0] = 0x80000000800000;
  v42.i64[1] = 0x80000000800000;
  v43 = v67;
  v44 = vcgeq_f32(v42, v67);
  v43.i32[3] = 0;
  v45 = vrsqrteq_f32(v43);
  v46 = vmulq_f32(v45, vrsqrtsq_f32(v43, vmulq_f32(v45, v45)));
  v47 = v44;
  v47.i32[3] = 0;
  v48 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v47), (int8x16_t)v43, (int8x16_t)vmulq_f32(v46, vrsqrtsq_f32(v43, vmulq_f32(v46, v46))));
  v49 = vmulq_n_f32(v82, v48.f32[0]);
  v50 = vmulq_lane_f32(v80, *(float32x2_t *)v48.f32, 1);
  v51 = vmulq_laneq_f32(v78, v48, 2);
  v52 = (int8x16_t)vuzp1q_s32((int32x4_t)v51, (int32x4_t)v51);
  v53 = (int8x16_t)vuzp1q_s32((int32x4_t)v50, (int32x4_t)v50);
  v54 = (int8x16_t)v49;
  if (v44.i32[0])
  {
    v55 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(v52, (int8x16_t)v51, 0xCuLL), vnegq_f32(v50)), v51, (float32x4_t)vextq_s8(v53, (int8x16_t)v50, 0xCuLL));
    v54 = vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v55, (int32x4_t)v55), v55, 0xCuLL);
  }
  v56 = (int8x16_t)vuzp1q_s32((int32x4_t)v49, (int32x4_t)v49);
  v57 = (int8x16_t)v50;
  if (v44.i32[1])
  {
    v58 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(v56, (int8x16_t)v49, 0xCuLL), vnegq_f32(v51)), v49, (float32x4_t)vextq_s8(v52, (int8x16_t)v51, 0xCuLL));
    v57 = vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v58, (int32x4_t)v58), v58, 0xCuLL);
  }
  if (v44.i32[2])
  {
    v59 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(v53, (int8x16_t)v50, 0xCuLL), vnegq_f32(v49)), v50, (float32x4_t)vextq_s8(v56, (int8x16_t)v49, 0xCuLL));
    v51 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v59, (int32x4_t)v59), v59, 0xCuLL);
  }
  v60.i64[0] = v13;
  v60.i64[1] = v12;
  if (v33)
    v61 = -1;
  else
    v61 = 0;
  v62 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_n_s32(v61), (int8x16_t)a6, v60);
  v63.i64[0] = 0x8000000080000000;
  v63.i64[1] = 0x8000000080000000;
  v64 = v68;
  v65 = vmulq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(v74, v63, v78), v63, v80), v63, v82), v68);
  v64.f32[3] = -vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v65, 2), vaddq_f32(v65, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v65.f32, 1))).f32[0];
  v65.f32[0] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v69, 2), vaddq_f32(v69, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v69.f32, 1))).f32[0]);
  v65.i32[1] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v70, 2), vaddq_f32(v70, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v70.f32, 1))).f32[0]);
  *(float32x4_t *)a2 = v64;
  *(float32x4_t *)(a2 + 16) = v74;
  *(float32x4_t *)(a2 + 32) = vsubq_f32(v74, vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a7, v62.f32[0]), a8, *(float32x2_t *)v62.f32, 1), a9, v62, 2), a10, v62, 3));
  *(simd_float4x4 *)(a2 + 48) = v88;
  *(int8x16_t *)(a2 + 112) = v54;
  result = vmul_f32(*(float32x2_t *)v65.f32, (float32x2_t)0x3F0000003F000000);
  *(int8x16_t *)(a2 + 128) = v57;
  *(float32x4_t *)(a2 + 144) = v51;
  *(float32x2_t *)(a2 + 160) = result;
  return result;
}

uint64_t sub_1B1C3865C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int8 *v10;
  int32x4_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  char v23;
  char v24;
  int v25;
  int v26;
  __int128 v27;
  int32x4_t v28;
  uint64_t v29;
  __int128 v30;
  ValueMetadata *v31;
  _UNKNOWN **v32;
  char v33;
  __int16 v34;
  char v35;
  __int128 v36;
  uint64_t v37;

  sub_1B19F8E54(0, (unint64_t *)&unk_1EEF61C30, (uint64_t (*)(void))sub_1B1C389CC, (uint64_t)&type metadata for ParticleCollidableCodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = &v28.i8[-v9];
  v34 = 0;
  v35 = 1;
  v36 = xmmword_1B2244E20;
  v37 = 0xFF00000000;
  sub_1B1C36CBC(a1, 0);
  if (v2)
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  LOBYTE(v30) = 6;
  LOBYTE(v34) = sub_1B2229784() & 1;
  sub_1B19F8E54(0, &qword_1ED4BB080, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], MEMORY[0x1E0DEDD20]);
  v33 = 8;
  sub_1B1C38A10();
  sub_1B22297B4();
  if ((BYTE8(v30) & 1) == 0)
  {
    v11.i64[0] = v30;
    v28 = v11;
    v13 = a1[3];
    v14 = a1[4];
    sub_1B19FA070(a1, v13);
    v15 = sub_1B20680A8(v13, v14);
    v28 = vzip1q_s32((int32x4_t)0, v28);
    v16 = *(_QWORD **)(v15 + 72);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(v15 + 72) = v16;
    v29 = v15;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v16 = sub_1B1C670C0(0, v16[2] + 1, 1, v16);
      *(_QWORD *)(v15 + 72) = v16;
    }
    v19 = v16[2];
    v18 = v16[3];
    v28 = vtrn2q_s32(v28, (int32x4_t)0);
    if (v19 >= v18 >> 1)
    {
      v16 = sub_1B1C670C0(v18 > 1, v19 + 1, 1, v16);
      *(_QWORD *)(v29 + 72) = v16;
    }
    v31 = &type metadata for Scale3;
    v32 = &off_1E63BC558;
    *(_QWORD *)&v30 = swift_allocObject();
    *(int32x4_t *)(v30 + 16) = v28;
    v16[2] = v19 + 1;
    sub_1B1A02518(&v30, (uint64_t)&v16[5 * v19 + 4]);
    swift_release();
  }
  v20 = a1[3];
  v21 = a1[4];
  sub_1B19FA070(a1, v20);
  if (sub_1B2067BAC(2024, v20, v21))
  {
    LOBYTE(v30) = 7;
    v22 = sub_1B22297D8();
    (*(void (**)(__int8 *, uint64_t))(v7 + 8))(v10, v6);
  }
  else
  {
    (*(void (**)(__int8 *, uint64_t))(v7 + 8))(v10, v6);
    v22 = HIBYTE(v34);
  }
  v23 = v34;
  v24 = v35;
  v25 = v37;
  v26 = HIDWORD(v37);
  result = _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  v27 = v36;
  *(_BYTE *)a2 = v23;
  *(_BYTE *)(a2 + 1) = v22 & 1;
  *(_BYTE *)(a2 + 2) = v24;
  *(_OWORD *)(a2 + 4) = v27;
  *(_DWORD *)(a2 + 20) = v25;
  *(_DWORD *)(a2 + 24) = v26;
  return result;
}

unint64_t sub_1B1C389CC()
{
  unint64_t result;

  result = qword_1EEF5C9F8;
  if (!qword_1EEF5C9F8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B1D30, &type metadata for ParticleCollidableCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5C9F8);
  }
  return result;
}

unint64_t sub_1B1C38A10()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1ED4B72F0;
  if (!qword_1ED4B72F0)
  {
    sub_1B19F8E54(255, &qword_1ED4BB080, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], MEMORY[0x1E0DEDD20]);
    result = MEMORY[0x1B5E23E74](MEMORY[0x1E0DEDD40], v1);
    atomic_store(result, (unint64_t *)&qword_1ED4B72F0);
  }
  return result;
}

uint64_t sub_1B1C38A78()
{
  return swift_deallocObject();
}

void sub_1B1C38A88(uint64_t a1, uint64_t a2, uint64_t a3, float32x4_t *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  int v7;
  float v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  char v33;
  BOOL v34;
  float v35;
  uint64_t v36;
  int v37;
  unsigned int *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  os_unfair_lock_s *v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t i;
  uint64_t v51;
  unint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  void (*v55)(uint64_t);
  uint64_t v56;
  unint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  _QWORD *v61;
  unint64_t v62;
  uint64_t v63;
  unsigned int v64;
  BOOL v65;
  int v66;
  uint64_t v68;
  _QWORD *v69;
  unint64_t v70;
  uint64_t v71;
  unsigned int v72;
  int v73;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  unint64_t v79;
  char v80;
  _QWORD *v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  BOOL v89;
  char v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unsigned __int16 *v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  _BYTE v104[168];
  uint64_t v105[12];
  _QWORD v106[7];
  uint64_t v107;
  uint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  __int128 v111;
  _QWORD *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  __int128 v124;
  float v125;
  int v126;
  _OWORD v127[2];
  uint64_t v128;
  _QWORD v129[8];
  char v130;

  v7 = *(_DWORD *)(a5 + 84) & *(_DWORD *)(a3 + 24);
  if (v7)
  {
    v14 = *(float *)(a3 + 20) + *(float *)(a5 + 80);
    *(float *)&v15 = 1.0 - fminf(fmaxf(*(float *)(a3 + 16) + *(float *)(a5 + 76), 0.0), 1.0);
    *(float *)&v16 = fminf(fmaxf(*(float *)(a3 + 12) + *(float *)(a5 + 72), 0.0), 1.0);
    __asm { FMOV            V4.2S, #1.0 }
    *(float32x2_t *)&v124 = vminnm_f32(vmaxnm_f32(vadd_f32(*(float32x2_t *)(a3 + 4), *(float32x2_t *)(a5 + 64)), 0), _D4);
    *((_QWORD *)&v124 + 1) = __PAIR64__(v15, v16);
    v125 = v14;
    v126 = v7;
    v21 = sub_1B1A11FDC((uint64_t)&type metadata for LastFrameWorldTransform);
    if ((v22 & 1) != 0)
    {
      v23 = 0;
      v24 = 0;
      v25 = 0;
      v26 = 0;
      v27 = 0;
      v28 = 0;
      v29 = 0;
      v30 = 0;
    }
    else
    {
      v31 = (uint64_t *)(v21 + (a2 << 6));
      v23 = *v31;
      v24 = v31[1];
      v25 = v31[2];
      v26 = v31[3];
      v27 = v31[4];
      v28 = v31[5];
      v29 = v31[6];
      v30 = v31[7];
    }
    v129[0] = v23;
    v129[1] = v24;
    v32 = (a6 & 0xFE00000000) != 0 ? 0 : a6;
    v91 = v32;
    v129[2] = v25;
    v129[3] = v26;
    v129[4] = v27;
    v129[5] = v28;
    v129[6] = v29;
    v129[7] = v30;
    v130 = v22 & 1;
    v33 = *(_BYTE *)a3;
    v90 = *(_BYTE *)(a3 + 2);
    v34 = !(_DWORD)a6 || (a6 & 0xFE00000000) != 0;
    v89 = v34;
    sub_1B1C3824C((uint64_t)v129, (uint64_t)v104, *a4, a4[1], a4[2], a4[3], *(float32x4_t *)(a5 + 96), *(float32x4_t *)(a5 + 112), *(float32x4_t *)(a5 + 128), *(float32x4_t *)(a5 + 144));
    v35 = *(float *)(a5 + 160);
    v127[0] = *(_OWORD *)(a5 + 24);
    v127[1] = *(_OWORD *)(a5 + 40);
    v128 = *(_QWORD *)(a5 + 56);
    sub_1B1E8FCE4(a7, (uint64_t)v127, 0x200000000, v105);
    sub_1B1A18378((uint64_t)v105, (uint64_t)v106, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
    v100 = (unsigned __int16 *)v106[0];
    if (v106[0])
    {
      v87 = v110;
      v88 = a3;
      if (v110 >= 1)
      {
        v86 = v107;
        if (v107)
        {
          v36 = 0;
          v84 = v106[5];
          v98 = v109[4];
          v83 = v108;
          v37 = *(unsigned __int8 *)(v108 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
          v81 = v109 + 8;
          v99 = v106[0] + 41;
          v80 = (v33 ^ 1) & 1;
          v82 = v37;
          v85 = a5;
          v103 = v109;
          do
          {
            v38 = (unsigned int *)(v84 + 48 * v36);
            v40 = *v38;
            v39 = v38[1];
            v41 = v38[2];
            v42 = *((_QWORD *)v38 + 2);
            v43 = *((_QWORD *)v38 + 5);
            v95 = v36;
            v101 = *((_QWORD *)v38 + 4);
            if (v37)
            {
              v44 = *((_QWORD *)v38 + 3);
              v45 = *(os_unfair_lock_s **)(v43 + 376);
              swift_retain_n();
              os_unfair_lock_lock(v45);
              os_unfair_lock_lock(*(os_unfair_lock_t *)(v43 + 344));
              swift_release();
            }
            else
            {
              v44 = *((_QWORD *)v38 + 3);
              swift_retain();
            }
            ecs_stack_allocator_push_snapshot(v98);
            v46 = v103;
            v93 = v103[7];
            v94 = v103[6];
            v92 = v103[8];
            v96 = v103[10];
            v97 = v103[9];
            v47 = v103[4];
            v48 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v43 + 40) + 16) + 32) + 16) + 1;
            swift_retain();
            v103[6] = ecs_stack_allocator_allocate(v47, 48 * v48, 8);
            v103[7] = v48;
            v81[1] = 0;
            v81[2] = 0;
            *v81 = 0;
            swift_release();
            *(_QWORD *)&v111 = v83;
            *((_QWORD *)&v111 + 1) = v43;
            v112 = v103;
            v113 = v41;
            v114 = (v39 - v40 + v41);
            v115 = v87;
            v116 = v40;
            v117 = v39;
            v118 = 0;
            v119 = 0;
            v120 = 1;
            v121 = v42;
            v122 = v44;
            v123 = v101;
            sub_1B1C378C0(&v111, &v124, (uint64_t)v104, v85, v91 | ((unint64_t)v89 << 32), v88, v80, v90, v35);
            v49 = v103[6];
            v102 = v103[8];
            if (!v102)
            {
              v76 = v103[7];
              v77 = (_QWORD *)v103[4];
              v78 = v95;
              goto LABEL_56;
            }
            for (i = 0; i != v102; ++i)
            {
              v52 = v49;
              v53 = (uint64_t *)(v49 + 48 * i);
              v54 = *v53;
              v55 = (void (*)(uint64_t))v53[4];
              v56 = v46[9];
              if (v56)
                _ZF = v54 == v56;
              else
                _ZF = 0;
              if (_ZF || !v100[11])
                goto LABEL_21;
              v58 = v100[9];
              v59 = (_QWORD *)(v99 + v100[8]);
              v60 = v53[2];
              v61 = v59;
              v62 = v58 >> 4;
              v63 = v99;
              if (v58 >= 0x10)
              {
                while (*v61 != v54)
                {
                  ++v63;
                  v61 += 2;
                  if (!--v62)
                    goto LABEL_36;
                }
                v64 = *(unsigned __int8 *)(v63 + v100[10]);
                v65 = v64 > 5;
                v66 = (1 << v64) & 0x23;
                if (v65 || v66 == 0)
                {
LABEL_21:
                  v51 = swift_retain();
                  v55(v51);
                  swift_release();
                  goto LABEL_22;
                }
              }
LABEL_36:
              if (swift_conformsToProtocol2())
                v68 = v60;
              else
                v68 = 0;
              if (v68)
              {
                if (v58 < 0x10)
                  goto LABEL_21;
                v69 = v59;
                v70 = v58 >> 4;
                v71 = v99;
                while (*v69 != v68)
                {
                  ++v71;
                  v69 += 2;
                  if (!--v70)
                    goto LABEL_49;
                }
                v72 = *(unsigned __int8 *)(v71 + v100[10]);
                v65 = v72 > 5;
                v73 = (1 << v72) & 0x23;
                if (v65 || v73 == 0)
                  goto LABEL_21;
LABEL_49:
                v75 = 16 * (v58 >> 4);
                while (*v59 != v68)
                {
                  v59 += 2;
                  v75 -= 16;
                  if (!v75)
                    goto LABEL_21;
                }
              }
LABEL_22:
              v46 = v103;
              v49 = v52;
            }
            v76 = v103[7];
            v49 = v103[6];
            v77 = (_QWORD *)v103[4];
            v78 = v95;
            if ((uint64_t)v103[8] >= 1)
            {
              v79 = v103[6];
              swift_arrayDestroy();
              v49 = v79;
            }
LABEL_56:
            ecs_stack_allocator_deallocate(v77, v49, 48 * v76);
            v46[6] = v94;
            v46[7] = v93;
            v46[8] = v92;
            v46[9] = v97;
            v46[10] = v96;
            sub_1B1F03804((char *)v43);
            ecs_stack_allocator_pop_snapshot(v98);
            v37 = v82;
            if ((v82 & 1) != 0)
            {
              os_unfair_lock_unlock(*(os_unfair_lock_t *)(v43 + 344));
              os_unfair_lock_unlock(*(os_unfair_lock_t *)(v43 + 376));
            }
            swift_release();
            v36 = v78 + 1;
          }
          while (v36 != v86);
        }
      }
      sub_1B19ED748(v105);
    }
  }
}

uint64_t sub_1B1C390B0(uint64_t a1)
{
  destroy for CollisionHandler(a1);
  return a1;
}

uint64_t sub_1B1C390E4(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for CollisionHandler(a2, a1);
  return a2;
}

double sub_1B1C39120(uint64_t a1)
{
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_1B2021F74(a1, *(_QWORD *)(v1 + 16)).n128_u64[0];
  return result;
}

void sub_1B1C39138()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED4B79B0)
  {
    type metadata accessor for simd_float4x4(255);
    v0 = sub_1B2229124();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED4B79B0);
  }
}

uint64_t *sub_1B1C3918C(int a1, uint64_t a2, _OWORD *a3, float a4, float a5, float a6, float a7, float32x4_t a8, float32x4_t a9, float32x4_t a10, float32x4_t a11)
{
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t *result;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  os_unfair_lock_s *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  float32x4_t *v37;
  uint64_t *v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  float v47;
  float v48;
  float v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  int v61;
  uint64_t v62;
  uint64_t ObjectType;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t *v72;
  BOOL v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  float v80;
  float v81;
  float v82;
  uint64_t v83;
  char v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  _QWORD *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  _BOOL8 v111;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t *v120;
  _OWORD v122[10];
  uint64_t v123;
  _OWORD v124[10];
  uint64_t v125;
  int v126;
  float v127;
  float v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  uint64_t v139;
  float v140;
  float v141;
  _OWORD v142[2];
  uint64_t v143;
  __int128 v144;
  __int128 v145;
  _OWORD v146[6];
  int v147;
  _OWORD v148[2];
  uint64_t v149;
  unsigned int v150;
  char v151;
  uint64_t v152[8];
  _OWORD v153[2];
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  _QWORD *v158;
  uint64_t v159;
  _BYTE v160[40];
  _QWORD v161[8];
  char v162;
  _QWORD v163[8];
  char v164;
  uint64_t v165;

  v165 = *MEMORY[0x1E0C80C00];
  if (qword_1EEF57320 != -1)
    swift_once();
  v148[0] = xmmword_1EEFD5450;
  v148[1] = unk_1EEFD5460;
  v149 = qword_1EEFD5470;
  v16 = a3[6];
  v146[2] = a3[5];
  v146[3] = v16;
  v17 = a3[8];
  v146[4] = a3[7];
  v146[5] = v17;
  v18 = a3[2];
  v144 = a3[1];
  v145 = v18;
  v19 = a3[4];
  v117 = (uint64_t)a3;
  v146[0] = a3[3];
  v146[1] = v19;
  sub_1B1BE9FDC((int *)v146 + 2, (uint64_t)&v147);
  sub_1B1BE9FDC(&v147, (uint64_t)&v150);
  if (v151)
    v20 = 0x200000000;
  else
    v20 = v150;
  sub_1B1E8FCE4(a2, (uint64_t)v148, v20, v152);
  result = (uint64_t *)sub_1B1A18378((uint64_t)v152, (uint64_t)v153, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (*(_QWORD *)&v153[0])
  {
    if (v159 >= 1)
    {
      v106 = v156;
      if (v156)
      {
        v22 = v158;
        v23 = v158[4];
        v110 = *(unsigned __int8 *)(v157 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
        v142[0] = v153[0];
        v142[1] = v153[1];
        v143 = v154;
        v102 = (uint64_t)(v158 + 6);
        v103 = v155;
        v101 = v158 + 8;
        v111 = a7 > 0.0;
        swift_retain();
        swift_retain();
        swift_retain();
        v24 = 0;
        v104 = v23;
        v105 = v22;
        do
        {
          v25 = (unsigned int *)(v103 + 48 * v24);
          v26 = (uint64_t *)*((_QWORD *)v25 + 2);
          v27 = *((_QWORD *)v25 + 3);
          v29 = *((_QWORD *)v25 + 4);
          v28 = *((_QWORD *)v25 + 5);
          v108 = *v25;
          v109 = v24;
          v107 = v25[1];
          if (v110)
          {
            v30 = *(os_unfair_lock_s **)(v28 + 376);
            swift_retain_n();
            os_unfair_lock_lock(v30);
            os_unfair_lock_lock(*(os_unfair_lock_t *)(v28 + 344));
            swift_release();
          }
          else
          {
            swift_retain();
          }
          ecs_stack_allocator_push_snapshot(v23);
          sub_1B1A18378(v102, (uint64_t)v160, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
          v31 = v22[4];
          v32 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v28 + 40) + 16) + 32) + 16) + 1;
          v33 = v28;
          swift_retain();
          v22[6] = ecs_stack_allocator_allocate(v31, 48 * v32, 8);
          v22[7] = v32;
          v101[1] = 0;
          v101[2] = 0;
          *v101 = 0;
          swift_release();
          v34 = sub_1B1A12038((uint64_t)&type metadata for ParticlePlaneCollider, (uint64_t)&off_1E63A4A68, v26, v27, v29, (uint64_t)v22);
          v118 = v33;
          v119 = sub_1B1A12038((uint64_t)&type metadata for WorldTransform, (uint64_t)&off_1E6382C00, v26, v27, v29, (uint64_t)v22);
          if (v26)
          {
            if (v29)
            {
              v35 = v26;
              v36 = v34 + 12;
              v37 = (float32x4_t *)(v119 + 32);
              v38 = (uint64_t *)v117;
              do
              {
                v46 = *v35++;
                v45 = v46;
                if ((*(_DWORD *)(v36 + 12) & a1) != 0)
                {
                  v120 = v35;
                  v48 = *(float *)(v36 - 4);
                  v47 = *(float *)v36;
                  v49 = *(float *)(v36 + 4);
                  v50 = sub_1B1A11FDC((uint64_t)&type metadata for LastFrameWorldTransform);
                  if ((v51 & 1) != 0)
                  {
                    v52 = 0;
                    v53 = 0;
                    v54 = 0;
                    v55 = 0;
                    v56 = 0;
                    v57 = 0;
                    v58 = 0;
                    v59 = 0;
                  }
                  else
                  {
                    v60 = (uint64_t *)(v50 + (v45 << 6));
                    v52 = *v60;
                    v53 = v60[1];
                    v54 = v60[2];
                    v55 = v60[3];
                    v56 = v60[4];
                    v57 = v60[5];
                    v58 = v60[6];
                    v59 = v60[7];
                  }
                  v161[0] = v52;
                  v161[1] = v53;
                  v161[2] = v54;
                  v161[3] = v55;
                  v161[4] = v56;
                  v161[5] = v57;
                  v161[6] = v58;
                  v161[7] = v59;
                  v162 = v51 & 1;
                  sub_1B1C3824C((uint64_t)v161, (uint64_t)v122, v37[-2], v37[-1], *v37, v37[1], a8, a9, a10, a11);
                  sub_1B1E5267C();
                  v126 = v61;
                  v127 = fminf(fmaxf(v47 + a5, 0.0), 1.0);
                  v128 = 1.0 - fminf(fmaxf(v49 + a6, 0.0), 1.0);
                  v129 = v122[0];
                  v130 = v122[1];
                  v131 = v122[2];
                  v132 = v122[3];
                  v133 = v122[4];
                  v134 = v122[5];
                  v135 = v122[6];
                  v136 = v122[7];
                  v137 = v122[8];
                  v138 = v122[9];
                  v139 = v123;
                  v140 = fminf(fmaxf(v48 + a4, 0.0), 1.0);
                  v141 = a7 * 0.5;
                  v62 = *v38;
                  if (*v38)
                  {
                    ObjectType = swift_getObjectType();
                    type metadata accessor for particle_plane_collider_uniforms(0);
                    sub_1B1F40E1C((uint64_t)&v126, 1, ObjectType, v64, v65, v66, v67, v68);
                  }
                  v39 = v62 == 0;
                  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BF6E0, (uint64_t)&type metadata for FunctionConstant, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
                  v40 = swift_allocObject();
                  *(_OWORD *)(v40 + 16) = xmmword_1B226E100;
                  v41 = *(unsigned __int8 *)(v36 - 12);
                  *(_OWORD *)(v40 + 32) = xmmword_1B2285BA0;
                  *(_BYTE *)(v40 + 48) = 0;
                  *(_QWORD *)(v40 + 64) = v41;
                  *(_QWORD *)(v40 + 120) = 0;
                  *(_OWORD *)(v40 + 104) = 0u;
                  *(_OWORD *)(v40 + 88) = 0u;
                  *(_OWORD *)(v40 + 72) = 0u;
                  *(_BYTE *)(v40 + 128) = 13;
                  *(_OWORD *)(v40 + 144) = xmmword_1B2285BB0;
                  *(_BYTE *)(v40 + 160) = 0;
                  *(_QWORD *)(v40 + 176) = v111;
                  *(_QWORD *)(v40 + 232) = 0;
                  *(_OWORD *)(v40 + 216) = 0u;
                  *(_OWORD *)(v40 + 200) = 0u;
                  *(_OWORD *)(v40 + 184) = 0u;
                  *(_BYTE *)(v40 + 240) = 13;
                  v42 = *(unsigned __int8 *)(v36 - 11);
                  *(_OWORD *)(v40 + 256) = xmmword_1B2285BC0;
                  *(_BYTE *)(v40 + 272) = 0;
                  *(_QWORD *)(v40 + 288) = v42;
                  *(_OWORD *)(v40 + 296) = 0u;
                  *(_OWORD *)(v40 + 312) = 0u;
                  *(_OWORD *)(v40 + 328) = 0u;
                  *(_QWORD *)(v40 + 344) = 0;
                  *(_BYTE *)(v40 + 352) = 13;
                  v43 = v144;
                  swift_retain();
                  v44 = *(_QWORD *)&v146[0];
                  v38 = (uint64_t *)v117;
                  sub_1B1B1FC34(v117);
                  sub_1B1FE6FB8(v44, v43, v39, v40, v117, 0xD000000000000017, 0x80000001B23353D0, 0);
                  sub_1B1B1FC88(v117);
                  swift_release();
                  swift_setDeallocating();
                  swift_arrayDestroy();
                  swift_deallocClassInstance();
                  v35 = v120;
                }
                v36 += 28;
                v37 += 4;
                --v29;
              }
              while (v29);
            }
          }
          else if ((_DWORD)v108 != (_DWORD)v107)
          {
            v69 = v34 + 28 * v108 + 12;
            v70 = v108 << 6;
            v71 = v107 - v108;
            v72 = (uint64_t *)v117;
            do
            {
              if ((*(_DWORD *)(v69 + 12) & a1) != 0)
              {
                v81 = *(float *)(v69 - 4);
                v80 = *(float *)v69;
                v82 = *(float *)(v69 + 4);
                v83 = sub_1B1A11FDC((uint64_t)&type metadata for LastFrameWorldTransform);
                if ((v84 & 1) != 0)
                {
                  v85 = 0;
                  v86 = 0;
                  v87 = 0;
                  v88 = 0;
                  v89 = 0;
                  v90 = 0;
                  v91 = 0;
                  v92 = 0;
                }
                else
                {
                  v85 = *(_QWORD *)(v83 + v70);
                  v86 = *(_QWORD *)(v83 + v70 + 8);
                  v87 = *(_QWORD *)(v83 + v70 + 16);
                  v88 = *(_QWORD *)(v83 + v70 + 24);
                  v89 = *(_QWORD *)(v83 + v70 + 32);
                  v90 = *(_QWORD *)(v83 + v70 + 40);
                  v91 = *(_QWORD *)(v83 + v70 + 48);
                  v92 = *(_QWORD *)(v83 + v70 + 56);
                }
                v163[0] = v85;
                v163[1] = v86;
                v163[2] = v87;
                v163[3] = v88;
                v163[4] = v89;
                v163[5] = v90;
                v163[6] = v91;
                v163[7] = v92;
                v164 = v84 & 1;
                sub_1B1C3824C((uint64_t)v163, (uint64_t)v124, *(float32x4_t *)(v119 + v70), *(float32x4_t *)(v119 + v70 + 16), *(float32x4_t *)(v119 + v70 + 32), *(float32x4_t *)(v119 + v70 + 48), a8, a9, a10, a11);
                sub_1B1E5267C();
                v126 = v93;
                v127 = fminf(fmaxf(v80 + a5, 0.0), 1.0);
                v128 = 1.0 - fminf(fmaxf(v82 + a6, 0.0), 1.0);
                v129 = v124[0];
                v130 = v124[1];
                v131 = v124[2];
                v132 = v124[3];
                v133 = v124[4];
                v134 = v124[5];
                v135 = v124[6];
                v136 = v124[7];
                v137 = v124[8];
                v138 = v124[9];
                v139 = v125;
                v140 = fminf(fmaxf(v81 + a4, 0.0), 1.0);
                v141 = a7 * 0.5;
                v94 = *v72;
                if (*v72)
                {
                  v95 = swift_getObjectType();
                  type metadata accessor for particle_plane_collider_uniforms(0);
                  sub_1B1F40E1C((uint64_t)&v126, 1, v95, v96, v97, v98, v99, v100);
                }
                v73 = v94 == 0;
                sub_1B1A02758(0, (unint64_t *)&qword_1ED4BF6E0, (uint64_t)&type metadata for FunctionConstant, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
                v74 = swift_allocObject();
                *(_OWORD *)(v74 + 16) = xmmword_1B226E100;
                v75 = *(unsigned __int8 *)(v69 - 12);
                *(_OWORD *)(v74 + 32) = xmmword_1B2285BA0;
                *(_BYTE *)(v74 + 48) = 0;
                *(_QWORD *)(v74 + 64) = v75;
                *(_QWORD *)(v74 + 120) = 0;
                *(_OWORD *)(v74 + 104) = 0u;
                *(_OWORD *)(v74 + 88) = 0u;
                *(_OWORD *)(v74 + 72) = 0u;
                *(_BYTE *)(v74 + 128) = 13;
                *(_OWORD *)(v74 + 144) = xmmword_1B2285BB0;
                *(_BYTE *)(v74 + 160) = 0;
                *(_QWORD *)(v74 + 176) = v111;
                *(_QWORD *)(v74 + 232) = 0;
                *(_OWORD *)(v74 + 216) = 0u;
                *(_OWORD *)(v74 + 200) = 0u;
                *(_OWORD *)(v74 + 184) = 0u;
                *(_BYTE *)(v74 + 240) = 13;
                v76 = *(unsigned __int8 *)(v69 - 11);
                *(_OWORD *)(v74 + 256) = xmmword_1B2285BC0;
                *(_BYTE *)(v74 + 272) = 0;
                *(_QWORD *)(v74 + 288) = v76;
                *(_OWORD *)(v74 + 296) = 0u;
                *(_OWORD *)(v74 + 312) = 0u;
                *(_OWORD *)(v74 + 328) = 0u;
                *(_QWORD *)(v74 + 344) = 0;
                *(_BYTE *)(v74 + 352) = 13;
                v77 = v144;
                swift_retain();
                v78 = *(_QWORD *)&v146[0];
                sub_1B1B1FC34(v117);
                v79 = v73;
                v72 = (uint64_t *)v117;
                sub_1B1FE6FB8(v78, v77, v79, v74, v117, 0xD000000000000017, 0x80000001B23353D0, 0);
                sub_1B1B1FC88(v117);
                swift_release();
                swift_setDeallocating();
                swift_arrayDestroy();
                swift_deallocClassInstance();
              }
              v69 += 28;
              v70 += 64;
              --v71;
            }
            while (v71);
          }
          v22 = v105;
          sub_1B1F05D48(v105, (unsigned __int16 **)v142, (uint64_t)v160);
          sub_1B1F03804((char *)v118);
          v23 = v104;
          ecs_stack_allocator_pop_snapshot(v104);
          if ((v110 & 1) != 0)
          {
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v118 + 344));
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v118 + 376));
          }
          swift_release();
          v24 = v109 + 1;
        }
        while (v109 + 1 != v106);
        sub_1B19ED748(v152);
      }
    }
    return sub_1B19ED748(v152);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for ParticlePlaneCollider(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && a1[28])
    return (*(_DWORD *)a1 + 255);
  v3 = *a1;
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for ParticlePlaneCollider(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_DWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 28) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 28) = 0;
    if (a2)
      *(_BYTE *)result = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for ParticlePlaneCollider()
{
  return &type metadata for ParticlePlaneCollider;
}

unint64_t sub_1B1C39C20(uint64_t a1, unsigned __int8 a2)
{
  uint64_t v5;
  unint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v12;
  uint64_t v13;
  _BYTE v14[8];
  unint64_t v15;
  uint64_t v16;

  sub_1B19FA278(a1, (uint64_t)v14);
  if (v15 >= 0x3B)
  {
    v5 = v16;
    if (*(_QWORD *)(v16 + 16) && (v6 = sub_1B1DC3C04(a2), (v7 & 1) != 0))
    {
      v8 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 16 * v6);
      swift_bridgeObjectRetain();
    }
    else
    {
      if (qword_1ED4BF430 != -1)
        swift_once();
      swift_retain();
      sub_1B2229430();
      swift_bridgeObjectRelease();
      v12 = 0xD00000000000001BLL;
      v13 = 0x80000001B232B900;
      swift_bridgeObjectRetain();
      sub_1B2228890();
      swift_bridgeObjectRelease();
      sub_1B2228890();
      sub_1B2228890();
      swift_bridgeObjectRelease();
      v9 = v12;
      v10 = sub_1B2228E9C();
      if (qword_1ED4BF658 != -1)
        swift_once();
      v12 = 0;
      swift_retain();
      sub_1B1F1AD70(v10, &v12, v9, v13);
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      return 0;
    }
  }
  else
  {
    if (!a2)
      return sub_1B1C460C0(a1);
    if (a2 == 1)
      return sub_1B1C45B38(a1);
    return sub_1B1C454D0(a1);
  }
  return v8;
}

uint64_t sub_1B1C39E78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  uint64_t v7;

  if (a5 == 2)
  {
    v7 = 544499052;
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    sub_1B2228890();
    sub_1B1C39C20(a1, 2u);
    sub_1B2228890();
    swift_bridgeObjectRelease();
  }
  else
  {
    v7 = 0x2074736E6F63;
    sub_1B1C39C20(a1, a5);
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
  }
  return v7;
}

uint64_t sub_1B1C39FB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, char a10, char a11)
{
  uint64_t v12;
  uint64_t v13;

  swift_bridgeObjectRetain();
  v12 = swift_bridgeObjectRetain();
  sub_1B19F48F0(v12);
  v13 = swift_bridgeObjectRetain();
  sub_1B19F48F0(v13);
  if ((a10 & 1) != 0)
    sub_1B2228890();
  if (a11 == 2)
  {
    if (a7)
    {
      swift_bridgeObjectRetain();
      sub_1B2228890();
      swift_bridgeObjectRelease();
    }
    sub_1B2229430();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    sub_1B2228890();
    sub_1B2228890();
    sub_1B1A02758(0, (unint64_t *)&qword_1ED4BA490, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    sub_1B19FA230();
    sub_1B2228644();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
  }
  else
  {
    swift_bridgeObjectRetain();
    sub_1B2229430();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    sub_1B2228890();
    sub_1B2228890();
    sub_1B1A02758(0, (unint64_t *)&qword_1ED4BA490, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    sub_1B19FA230();
    sub_1B2228644();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
  }
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_1B1C3A3C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, char a9, char a10)
{
  if (a10 == 2)
    return sub_1B1C39FB4(a1, a2, a3, a4, a5, a6, a7, a8 & 1, a9 & 1, 0, 2);
  sub_1B2229430();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  sub_1B2228890();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  sub_1B1C39FB4(6516326, 0xE300000000000000, a3, a4, a5, a6, a7, 0, a9 & 1, 0, a10);
  sub_1B2228890();
  swift_bridgeObjectRelease();
  return 0x20746375727473;
}

uint64_t sub_1B1C3A564(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  char v4;

  if (a3 > 1u)
  {
    swift_bridgeObjectRelease();
    goto LABEL_5;
  }
  v4 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  if ((v4 & 1) != 0)
  {
LABEL_5:
    swift_bridgeObjectRetain();
    return a1;
  }
  swift_bridgeObjectRetain();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  return a1;
}

uint64_t sub_1B1C3A644(uint64_t a1, char a2)
{
  char v2;
  char v3;
  uint64_t v5;
  char v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;

  if (a2)
  {
    if (a2 == 1)
    {
      sub_1B1E03DBC();
      v2 = sub_1B2228920();
LABEL_4:
      v3 = v2;
      swift_bridgeObjectRelease();
      return v3 & 1;
    }
    if (sub_1B1E03DBC() == 0x6D6152726F6C6F43 && v13 == 0xE900000000000070)
      goto LABEL_24;
    v14 = sub_1B2229D24();
    swift_bridgeObjectRelease();
    if ((v14 & 1) == 0)
    {
      if (sub_1B1E03DBC() == 0x466576727543 && v15 == 0xE600000000000000)
      {
LABEL_24:
        swift_bridgeObjectRelease();
        return 1;
      }
LABEL_26:
      v2 = sub_1B2229D24();
      goto LABEL_4;
    }
  }
  else
  {
    if (sub_1B1E03DBC() == 0x6D6152726F6C6F43 && v5 == 0xE900000000000070)
      goto LABEL_24;
    v6 = sub_1B2229D24();
    swift_bridgeObjectRelease();
    if ((v6 & 1) == 0)
    {
      if (sub_1B1E03DBC() == 0x466576727543 && v7 == 0xE600000000000000)
        goto LABEL_24;
      v8 = sub_1B2229D24();
      swift_bridgeObjectRelease();
      if ((v8 & 1) != 0)
        return 1;
      sub_1B1E03DBC();
      v9 = sub_1B2228920();
      swift_bridgeObjectRelease();
      if ((v9 & 1) != 0)
        return 1;
      if (sub_1B1E03DBC() == 0x676E69727453 && v10 == 0xE600000000000000)
        goto LABEL_24;
      v11 = sub_1B2229D24();
      swift_bridgeObjectRelease();
      if ((v11 & 1) == 0)
      {
        if (sub_1B1E03DBC() == 5001813 && v12 == 0xE300000000000000)
          goto LABEL_24;
        goto LABEL_26;
      }
    }
  }
  return 1;
}

uint64_t sub_1B1C3A8F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  uint64_t v8;

  if (a7 == 2)
  {
    sub_1B2229430();
    swift_bridgeObjectRelease();
    v8 = 544370534;
  }
  else
  {
    sub_1B2229430();
    swift_bridgeObjectRelease();
    v8 = 0x20746E6928726F66;
    sub_1B2228890();
    sub_1B2228890();
    sub_1B2228890();
    sub_1B2228890();
  }
  sub_1B2228890();
  sub_1B2228890();
  sub_1B2228890();
  sub_1B2228890();
  sub_1B2228890();
  sub_1B2228890();
  return v8;
}

uint64_t sub_1B1C3AAC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30[5];
  uint64_t v31[6];

  if (!a9)
  {
    v28 = 0;
    v29 = 0xE000000000000000;
    sub_1B1E03A80(v30);
    sub_1B1E02E1C(v30, 1, (uint64_t)&v26);
    sub_1B19F8C58(v30, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19F9FEC);
    v17 = sub_1B1C3F84C(&v26, a8, 0, 0, 0);
    v19 = v18;
    sub_1B1A203C4((uint64_t)&v26);
    swift_bridgeObjectRelease();
    v20 = sub_1B19F4250(v17, v19, a4);
    if (a7)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      v26 = 123;
      v27 = 0xE100000000000000;
      v31[0] = v20;
      sub_1B1A02758(0, (unint64_t *)&qword_1ED4BA490, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
      sub_1B19FA230();
      sub_1B2228644();
      swift_bridgeObjectRelease();
      sub_1B2228890();
      swift_bridgeObjectRelease();
      sub_1B2228890();
    }
    v26 = 0;
    v27 = 0xE000000000000000;
    sub_1B2229430();
    swift_bridgeObjectRelease();
    v26 = 8201;
    v27 = 0xE200000000000000;
    sub_1B1E03A80(v31);
    sub_1B1C39C20((uint64_t)v31, 0);
    sub_1B19F8C58(v31, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19F9FEC);
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    sub_1B2228890();
    sub_1B2228890();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    v26 = 0;
    v27 = 0xE000000000000000;
    sub_1B2229430();
    swift_bridgeObjectRelease();
    sub_1B1E03A80(&v26);
    sub_1B1C39C20((uint64_t)&v26, 0);
    sub_1B19F8C58(&v26, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19F9FEC);
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    sub_1B2228890();
    sub_1B2228890();
    sub_1B2228890();
    goto LABEL_16;
  }
  if (a9 == 1)
  {
    v28 = 0;
    v29 = 0xE000000000000000;
    sub_1B1E03A80(v30);
    sub_1B1E02E1C(v30, 1, (uint64_t)&v26);
    sub_1B19F8C58(v30, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19F9FEC);
    v13 = sub_1B1C46B4C((uint64_t)&v26, a8);
    v15 = v14;
    sub_1B1A203C4((uint64_t)&v26);
    swift_bridgeObjectRelease();
    v16 = sub_1B19F4250(v13, v15, a4);
    if (a7)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      v26 = 123;
      v27 = 0xE100000000000000;
      v31[0] = v16;
      sub_1B1A02758(0, (unint64_t *)&qword_1ED4BA490, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
      sub_1B19FA230();
      sub_1B2228644();
      swift_bridgeObjectRelease();
      sub_1B2228890();
      swift_bridgeObjectRelease();
      sub_1B2228890();
    }
    v26 = 0;
    v27 = 0xE000000000000000;
    sub_1B2229430();
    swift_bridgeObjectRelease();
    v26 = 0x6461657268742009;
    v27 = 0xE900000000000020;
    sub_1B1E03A80(v31);
    sub_1B1C39C20((uint64_t)v31, 1u);
    sub_1B19F8C58(v31, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19F9FEC);
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    sub_1B2228890();
    sub_1B2228890();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    v26 = 0;
    v27 = 0xE000000000000000;
    sub_1B2229430();
    swift_bridgeObjectRelease();
    sub_1B1E03A80(&v26);
    sub_1B1C39C20((uint64_t)&v26, 1u);
    sub_1B19F8C58(&v26, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19F9FEC);
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    sub_1B2228890();
    sub_1B2228890();
    sub_1B2228890();
LABEL_16:
    sub_1B2228890();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    return v28;
  }
  if ((a5 & 1) != 0)
  {
    sub_1B1C39E78(a1, a2, a3, 0, 2u);
  }
  else
  {
    v26 = 544366966;
    v27 = 0xE400000000000000;
    sub_1B2228890();
    sub_1B2228890();
    sub_1B2228890();
    sub_1B1C39C20(a1, 2u);
    sub_1B2228890();
    swift_bridgeObjectRelease();
  }
  sub_1B1E03A80(v31);
  sub_1B1E02E1C(v31, 1, (uint64_t)&v26);
  sub_1B19F8C58(v31, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19F9FEC);
  v21 = sub_1B1C3B344(&v26, a8, 0, 0, 2);
  v23 = v22;
  sub_1B1A203C4((uint64_t)&v26);
  swift_bridgeObjectRelease();
  v24 = sub_1B19F4250(v21, v23, a4);
  if (a7)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  else
  {
    v26 = 91;
    v27 = 0xE100000000000000;
    v30[0] = v24;
    sub_1B1A02758(0, (unint64_t *)&qword_1ED4BA490, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    sub_1B19FA230();
    sub_1B2228644();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
  }
  v26 = 8201;
  v27 = 0xE200000000000000;
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  return v26;
}

void sub_1B1C3B308()
{
  qword_1EEFD5478 = (uint64_t)&unk_1E63C0598;
}

void sub_1B1C3B31C()
{
  qword_1EEF5CA08 = (uint64_t)&unk_1E63C0EA0;
}

void sub_1B1C3B330()
{
  qword_1EEF5CA10 = (uint64_t)&unk_1E63BFD00;
}

unint64_t sub_1B1C3B344(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  int v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  _QWORD *v53;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v55;
  unint64_t v56;
  __int128 v57;
  unint64_t *v58;
  uint64_t v59;
  uint64_t *v60;
  unint64_t *v61;
  uint64_t (*v62)(uint64_t, uint64_t, uint64_t);
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  char v78;
  char v79;
  char v80;
  char v81;
  char v82;
  char v83;
  char v84;
  char v85;
  char v86;
  char v87;
  char v88;
  char v89;
  char v90;
  char v91;
  char v92;
  __int128 v93;
  int v94;
  __int128 v95;
  int v96;
  __int128 v97;
  int v98;
  __int128 v99;
  int v100;
  __int128 v101;
  int v102;
  __int128 v103;
  int v104;
  __int128 v105;
  int v106;
  uint64_t (*v107)(uint64_t, uint64_t, uint64_t);
  __int128 v108;
  int v109;
  uint64_t *v110;
  uint64_t (*v111)(uint64_t, uint64_t, uint64_t);
  unint64_t *v112;
  uint64_t v113;
  __int128 v114;
  int v115;
  __int128 v116;
  int v117;
  uint64_t (*v118)(uint64_t, uint64_t, uint64_t);
  __int128 v119;
  int v120;
  uint64_t *v121;
  uint64_t (*v122)(uint64_t, uint64_t, uint64_t);
  unint64_t *v123;
  uint64_t v124;
  __int128 v125;
  int v126;
  __int128 v127;
  int v128;
  uint64_t (*v129)(uint64_t, uint64_t, uint64_t);
  __int128 v130;
  int v131;
  uint64_t *v132;
  uint64_t (*v133)(uint64_t, uint64_t, uint64_t);
  unint64_t *v134;
  uint64_t v135;
  __int128 v136;
  int v137;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  _OWORD v149[2];
  __int128 v150;
  __int128 v151;

  v10 = sub_1B2228110();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v12);
  v14 = (char *)&v139 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1B1A0DCD4((uint64_t)(a1 + 7), (uint64_t)&v143);
  if (*((_QWORD *)&v144 + 1))
  {
    *(_QWORD *)&v140 = a3;
    *(_QWORD *)&v142 = a4;
    LODWORD(v141) = a5;
    sub_1B1A0DDAC(&v143, v149);
    v16 = a1[2];
    v17 = a1[3];
    v15 = a1 + 2;
    v18 = v15[2];
    v19 = v15[3];
    v20 = v15[4];
    switch(v17)
    {
      case 0:
        *(_QWORD *)&v150 = 0;
        *((_QWORD *)&v150 + 1) = 0xE000000000000000;
        sub_1B1A02864((uint64_t)v149, (uint64_t)&v143);
        swift_dynamicCast();
        sub_1B2228890();
        swift_bridgeObjectRelease();
        goto LABEL_113;
      case 1:
      case 5:
        sub_1B1A02864((uint64_t)v149, (uint64_t)&v143);
        swift_dynamicCast();
        LOBYTE(v148) = v150;
        goto LABEL_19;
      case 2:
      case 6:
        sub_1B1A02864((uint64_t)v149, (uint64_t)&v143);
        swift_dynamicCast();
        LOWORD(v148) = v150;
        goto LABEL_19;
      case 3:
      case 7:
        sub_1B1A02864((uint64_t)v149, (uint64_t)&v143);
        swift_dynamicCast();
        LODWORD(v148) = v150;
        goto LABEL_19;
      case 4:
      case 8:
      case 9:
        sub_1B1A02864((uint64_t)v149, (uint64_t)&v143);
        swift_dynamicCast();
        *(_QWORD *)&v148 = v150;
LABEL_19:
        v22 = sub_1B2229A0C();
        goto LABEL_251;
      case 10:
        sub_1B1A02864((uint64_t)v149, (uint64_t)&v143);
        sub_1B19F8E54(0, &qword_1ED4BB090, (uint64_t (*)(void))sub_1B1AF0D08, MEMORY[0x1E0DEE0F8], MEMORY[0x1E0DEDD20]);
        swift_dynamicCast();
        *(_QWORD *)&v29 = v150;
        v142 = v29;
        *(_QWORD *)&v148 = 0;
        *((_QWORD *)&v148 + 1) = 0xE000000000000000;
        sub_1B19FA278((uint64_t)v15, (uint64_t)&v150);
        sub_1B19FA278((uint64_t)&v150, (uint64_t)&v143);
        if (*((_QWORD *)&v143 + 1) >= 0x3BuLL)
        {
          if (*(_QWORD *)(v145 + 16) && (sub_1B1DC3C04(2u), (v78 & 1) != 0))
          {
            swift_bridgeObjectRetain();
          }
          else
          {
            if (qword_1ED4BF430 != -1)
              swift_once();
            *(_QWORD *)&v147 = 0;
            *((_QWORD *)&v147 + 1) = 0xE000000000000000;
            swift_retain();
            sub_1B2229430();
            swift_bridgeObjectRelease();
            *(_QWORD *)&v147 = 0xD00000000000001BLL;
            *((_QWORD *)&v147 + 1) = 0x80000001B232B900;
            swift_bridgeObjectRetain();
            sub_1B2228890();
            swift_bridgeObjectRelease();
            sub_1B2228890();
            sub_1B2228890();
            v93 = v147;
            v94 = sub_1B2228E9C();
            if (qword_1ED4BF658 != -1)
              swift_once();
            *(_QWORD *)&v147 = 0;
            swift_retain();
            sub_1B1F1AD70(v94, (uint64_t *)&v147, v93, *((uint64_t *)&v93 + 1));
            swift_release();
            swift_bridgeObjectRelease();
            swift_release();
          }
        }
        else
        {
          sub_1B1C454D0((uint64_t)&v150);
        }
        sub_1B2228890();
        swift_bridgeObjectRelease();
        sub_1B2228890();
        LODWORD(v147) = v142;
        sub_1B2229A0C();
        sub_1B2228890();
        swift_bridgeObjectRelease();
        sub_1B2228890();
        LODWORD(v147) = DWORD1(v142);
        goto LABEL_170;
      case 11:
        sub_1B1A02864((uint64_t)v149, (uint64_t)&v143);
        sub_1B19F8E54(0, (unint64_t *)&unk_1ED4BB0B0, (uint64_t (*)(void))sub_1B1AF0D08, MEMORY[0x1E0DEE0F8], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50]);
        swift_dynamicCast();
        v142 = v150;
        *(_QWORD *)&v148 = 0;
        *((_QWORD *)&v148 + 1) = 0xE000000000000000;
        sub_1B19FA278((uint64_t)v15, (uint64_t)&v150);
        sub_1B19FA278((uint64_t)&v150, (uint64_t)&v143);
        if (*((_QWORD *)&v143 + 1) >= 0x3BuLL)
        {
          if (*(_QWORD *)(v145 + 16) && (sub_1B1DC3C04(2u), (v79 & 1) != 0))
          {
            swift_bridgeObjectRetain();
          }
          else
          {
            if (qword_1ED4BF430 != -1)
              swift_once();
            *(_QWORD *)&v147 = 0;
            *((_QWORD *)&v147 + 1) = 0xE000000000000000;
            swift_retain();
            sub_1B2229430();
            swift_bridgeObjectRelease();
            *(_QWORD *)&v147 = 0xD00000000000001BLL;
            *((_QWORD *)&v147 + 1) = 0x80000001B232B900;
            swift_bridgeObjectRetain();
            sub_1B2228890();
            swift_bridgeObjectRelease();
            sub_1B2228890();
            sub_1B2228890();
            v95 = v147;
            v96 = sub_1B2228E9C();
            if (qword_1ED4BF658 != -1)
              swift_once();
            *(_QWORD *)&v147 = 0;
            swift_retain();
            sub_1B1F1AD70(v96, (uint64_t *)&v147, v95, *((uint64_t *)&v95 + 1));
            swift_release();
            swift_bridgeObjectRelease();
            swift_release();
          }
        }
        else
        {
          sub_1B1C454D0((uint64_t)&v150);
        }
        sub_1B2228890();
        swift_bridgeObjectRelease();
        sub_1B2228890();
        LODWORD(v147) = v142;
        sub_1B2229A0C();
        sub_1B2228890();
        swift_bridgeObjectRelease();
        sub_1B2228890();
        LODWORD(v147) = DWORD1(v142);
        sub_1B2229A0C();
        sub_1B2228890();
        swift_bridgeObjectRelease();
        sub_1B2228890();
        LODWORD(v147) = DWORD2(v142);
        goto LABEL_170;
      case 12:
        sub_1B1A02864((uint64_t)v149, (uint64_t)&v143);
        sub_1B19F8E54(0, &qword_1ED4BB0F8, (uint64_t (*)(void))sub_1B1AF0D08, MEMORY[0x1E0DEE0F8], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDDA8]);
        swift_dynamicCast();
        v142 = v150;
        *(_QWORD *)&v143 = 0;
        *((_QWORD *)&v143 + 1) = 0xE000000000000000;
        sub_1B2229430();
        v148 = v143;
        sub_1B19FA278((uint64_t)v15, (uint64_t)&v150);
        sub_1B19FA278((uint64_t)&v150, (uint64_t)&v143);
        if (*((_QWORD *)&v143 + 1) >= 0x3BuLL)
        {
          if (*(_QWORD *)(v145 + 16) && (sub_1B1DC3C04(2u), (v80 & 1) != 0))
          {
            swift_bridgeObjectRetain();
          }
          else
          {
            if (qword_1ED4BF430 != -1)
              swift_once();
            *(_QWORD *)&v147 = 0;
            *((_QWORD *)&v147 + 1) = 0xE000000000000000;
            swift_retain();
            sub_1B2229430();
            swift_bridgeObjectRelease();
            *(_QWORD *)&v147 = 0xD00000000000001BLL;
            *((_QWORD *)&v147 + 1) = 0x80000001B232B900;
            swift_bridgeObjectRetain();
            sub_1B2228890();
            swift_bridgeObjectRelease();
            sub_1B2228890();
            sub_1B2228890();
            v97 = v147;
            v98 = sub_1B2228E9C();
            if (qword_1ED4BF658 != -1)
              swift_once();
            *(_QWORD *)&v147 = 0;
            swift_retain();
            sub_1B1F1AD70(v98, (uint64_t *)&v147, v97, *((uint64_t *)&v97 + 1));
            swift_release();
            swift_bridgeObjectRelease();
            swift_release();
          }
        }
        else
        {
          sub_1B1C454D0((uint64_t)&v150);
        }
        sub_1B2228890();
        swift_bridgeObjectRelease();
        sub_1B2228890();
        LODWORD(v147) = v142;
        sub_1B2229A0C();
        sub_1B2228890();
        swift_bridgeObjectRelease();
        sub_1B2228890();
        LODWORD(v147) = DWORD1(v142);
        sub_1B2229A0C();
        sub_1B2228890();
        swift_bridgeObjectRelease();
        sub_1B2228890();
        LODWORD(v147) = DWORD2(v142);
        sub_1B2229A0C();
        sub_1B2228890();
        swift_bridgeObjectRelease();
        sub_1B2228890();
        LODWORD(v147) = HIDWORD(v142);
LABEL_170:
        sub_1B2229A0C();
        sub_1B2228890();
        swift_bridgeObjectRelease();
        goto LABEL_250;
      case 13:
        sub_1B1A02864((uint64_t)v149, (uint64_t)&v143);
        if (swift_dynamicCast())
        {
          *(_QWORD *)&v143 = 0;
          *((_QWORD *)&v143 + 1) = 0xE000000000000000;
          sub_1B2228C98();
LABEL_75:
          v22 = v143;
        }
        else
        {
          *(_QWORD *)&v150 = 0;
          *((_QWORD *)&v150 + 1) = 0xE000000000000000;
          sub_1B1A02864((uint64_t)v149, (uint64_t)&v143);
          swift_dynamicCast();
          sub_1B2228C98();
LABEL_113:
          v22 = v150;
        }
        goto LABEL_251;
      case 14:
        sub_1B1A02864((uint64_t)v149, (uint64_t)&v143);
        sub_1B19F8E54(0, &qword_1ED4BB080, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], MEMORY[0x1E0DEDD20]);
        swift_dynamicCast();
        *(_QWORD *)&v30 = v150;
        v142 = v30;
        *(_QWORD *)&v148 = 0;
        *((_QWORD *)&v148 + 1) = 0xE000000000000000;
        sub_1B19FA278((uint64_t)v15, (uint64_t)&v150);
        sub_1B19FA278((uint64_t)&v150, (uint64_t)&v143);
        if (*((_QWORD *)&v143 + 1) >= 0x3BuLL)
        {
          if (*(_QWORD *)(v145 + 16) && (sub_1B1DC3C04(2u), (v81 & 1) != 0))
          {
            swift_bridgeObjectRetain();
          }
          else
          {
            if (qword_1ED4BF430 != -1)
              swift_once();
            *(_QWORD *)&v147 = 0;
            *((_QWORD *)&v147 + 1) = 0xE000000000000000;
            swift_retain();
            sub_1B2229430();
            swift_bridgeObjectRelease();
            *(_QWORD *)&v147 = 0xD00000000000001BLL;
            *((_QWORD *)&v147 + 1) = 0x80000001B232B900;
            swift_bridgeObjectRetain();
            sub_1B2228890();
            swift_bridgeObjectRelease();
            sub_1B2228890();
            sub_1B2228890();
            v99 = v147;
            v100 = sub_1B2228E9C();
            if (qword_1ED4BF658 != -1)
              swift_once();
            *(_QWORD *)&v147 = 0;
            swift_retain();
            sub_1B1F1AD70(v100, (uint64_t *)&v147, v99, *((uint64_t *)&v99 + 1));
            swift_release();
            swift_bridgeObjectRelease();
            swift_release();
          }
        }
        else
        {
          sub_1B1C454D0((uint64_t)&v150);
        }
        sub_1B2228890();
        swift_bridgeObjectRelease();
        sub_1B2228890();
        sub_1B2228C98();
        sub_1B2228890();
        goto LABEL_189;
      case 15:
        sub_1B1A02864((uint64_t)v149, (uint64_t)&v143);
        sub_1B19F8E54(0, (unint64_t *)&qword_1ED4BB0A0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50]);
        swift_dynamicCast();
        v142 = v150;
        *(_QWORD *)&v148 = 0;
        *((_QWORD *)&v148 + 1) = 0xE000000000000000;
        sub_1B19FA278((uint64_t)v15, (uint64_t)&v150);
        sub_1B19FA278((uint64_t)&v150, (uint64_t)&v143);
        if (*((_QWORD *)&v143 + 1) >= 0x3BuLL)
        {
          if (*(_QWORD *)(v145 + 16) && (sub_1B1DC3C04(2u), (v82 & 1) != 0))
          {
            swift_bridgeObjectRetain();
          }
          else
          {
            if (qword_1ED4BF430 != -1)
              swift_once();
            *(_QWORD *)&v147 = 0;
            *((_QWORD *)&v147 + 1) = 0xE000000000000000;
            swift_retain();
            sub_1B2229430();
            swift_bridgeObjectRelease();
            *(_QWORD *)&v147 = 0xD00000000000001BLL;
            *((_QWORD *)&v147 + 1) = 0x80000001B232B900;
            swift_bridgeObjectRetain();
            sub_1B2228890();
            swift_bridgeObjectRelease();
            sub_1B2228890();
            sub_1B2228890();
            v101 = v147;
            v102 = sub_1B2228E9C();
            if (qword_1ED4BF658 != -1)
              swift_once();
            *(_QWORD *)&v147 = 0;
            swift_retain();
            sub_1B1F1AD70(v102, (uint64_t *)&v147, v101, *((uint64_t *)&v101 + 1));
            swift_release();
            swift_bridgeObjectRelease();
            swift_release();
          }
        }
        else
        {
          sub_1B1C454D0((uint64_t)&v150);
        }
        sub_1B2228890();
        swift_bridgeObjectRelease();
        sub_1B2228890();
        sub_1B2228C98();
        sub_1B2228890();
        sub_1B2228C98();
        sub_1B2228890();
        goto LABEL_189;
      case 16:
        sub_1B1A02864((uint64_t)v149, (uint64_t)&v143);
        sub_1B19F8E54(0, (unint64_t *)&qword_1ED4BB0E0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDDA8]);
        swift_dynamicCast();
        v142 = v150;
        *(_QWORD *)&v143 = 0;
        *((_QWORD *)&v143 + 1) = 0xE000000000000000;
        sub_1B2229430();
        v148 = v143;
        sub_1B19FA278((uint64_t)v15, (uint64_t)&v150);
        sub_1B19FA278((uint64_t)&v150, (uint64_t)&v143);
        if (*((_QWORD *)&v143 + 1) >= 0x3BuLL)
        {
          if (*(_QWORD *)(v145 + 16) && (sub_1B1DC3C04(2u), (v83 & 1) != 0))
          {
            swift_bridgeObjectRetain();
          }
          else
          {
            if (qword_1ED4BF430 != -1)
              swift_once();
            *(_QWORD *)&v147 = 0;
            *((_QWORD *)&v147 + 1) = 0xE000000000000000;
            swift_retain();
            sub_1B2229430();
            swift_bridgeObjectRelease();
            *(_QWORD *)&v147 = 0xD00000000000001BLL;
            *((_QWORD *)&v147 + 1) = 0x80000001B232B900;
            swift_bridgeObjectRetain();
            sub_1B2228890();
            swift_bridgeObjectRelease();
            sub_1B2228890();
            sub_1B2228890();
            v103 = v147;
            v104 = sub_1B2228E9C();
            if (qword_1ED4BF658 != -1)
              swift_once();
            *(_QWORD *)&v147 = 0;
            swift_retain();
            sub_1B1F1AD70(v104, (uint64_t *)&v147, v103, *((uint64_t *)&v103 + 1));
            swift_release();
            swift_bridgeObjectRelease();
            swift_release();
          }
        }
        else
        {
          sub_1B1C454D0((uint64_t)&v150);
        }
        sub_1B2228890();
        swift_bridgeObjectRelease();
        sub_1B2228890();
        sub_1B2228C98();
        sub_1B2228890();
        sub_1B2228C98();
        sub_1B2228890();
        sub_1B2228C98();
        sub_1B2228890();
LABEL_189:
        sub_1B2228C98();
        goto LABEL_250;
      case 17:
        sub_1B1A02864((uint64_t)v149, (uint64_t)&v143);
        type metadata accessor for simd_float2x2(0);
        swift_dynamicCast();
        v31 = v150;
        *(_QWORD *)&v143 = 0;
        *((_QWORD *)&v143 + 1) = 0xE000000000000000;
        sub_1B2229430();
        v148 = v143;
        sub_1B19FA278((uint64_t)v15, (uint64_t)&v150);
        sub_1B19FA278((uint64_t)&v150, (uint64_t)&v143);
        if (*((_QWORD *)&v143 + 1) >= 0x3BuLL)
        {
          if (*(_QWORD *)(v145 + 16) && (sub_1B1DC3C04(2u), (v84 & 1) != 0))
          {
            swift_bridgeObjectRetain();
          }
          else
          {
            if (qword_1ED4BF430 != -1)
              swift_once();
            *(_QWORD *)&v147 = 0;
            *((_QWORD *)&v147 + 1) = 0xE000000000000000;
            swift_retain();
            sub_1B2229430();
            swift_bridgeObjectRelease();
            *(_QWORD *)&v147 = 0xD00000000000001BLL;
            *((_QWORD *)&v147 + 1) = 0x80000001B232B900;
            swift_bridgeObjectRetain();
            sub_1B2228890();
            swift_bridgeObjectRelease();
            sub_1B2228890();
            sub_1B2228890();
            v105 = v147;
            v106 = sub_1B2228E9C();
            if (qword_1ED4BF658 != -1)
              swift_once();
            *(_QWORD *)&v147 = 0;
            swift_retain();
            sub_1B1F1AD70(v106, (uint64_t *)&v147, v105, *((uint64_t *)&v105 + 1));
            swift_release();
            swift_bridgeObjectRelease();
            swift_release();
          }
        }
        else
        {
          sub_1B1C454D0((uint64_t)&v150);
        }
        sub_1B2228890();
        swift_bridgeObjectRelease();
        sub_1B2228890();
        *(_QWORD *)&v147 = v31;
        v107 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD20];
        sub_1B19F8E54(0, &qword_1ED4BB080, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], MEMORY[0x1E0DEDD20]);
        sub_1B1A09538(&qword_1EEF5AC70, &qword_1ED4BB080, v107, MEMORY[0x1E0DEDD48]);
        sub_1B2229FA0();
        sub_1B2228890();
        swift_bridgeObjectRelease();
        sub_1B2228890();
        *(_QWORD *)&v147 = *((_QWORD *)&v31 + 1);
        goto LABEL_249;
      case 18:
        sub_1B1A02864((uint64_t)v149, (uint64_t)&v143);
        type metadata accessor for simd_float2x3(0);
        swift_dynamicCast();
        v141 = v150;
        v142 = v151;
        *(_QWORD *)&v143 = 0;
        *((_QWORD *)&v143 + 1) = 0xE000000000000000;
        sub_1B2229430();
        v148 = v143;
        sub_1B19FA278((uint64_t)v15, (uint64_t)&v150);
        sub_1B19FA278((uint64_t)&v150, (uint64_t)&v143);
        if (*((_QWORD *)&v143 + 1) >= 0x3BuLL)
        {
          if (*(_QWORD *)(v145 + 16) && (sub_1B1DC3C04(2u), (v85 & 1) != 0))
          {
            swift_bridgeObjectRetain();
          }
          else
          {
            if (qword_1ED4BF430 != -1)
              swift_once();
            *(_QWORD *)&v147 = 0;
            *((_QWORD *)&v147 + 1) = 0xE000000000000000;
            swift_retain();
            sub_1B2229430();
            swift_bridgeObjectRelease();
            *(_QWORD *)&v147 = 0xD00000000000001BLL;
            *((_QWORD *)&v147 + 1) = 0x80000001B232B900;
            swift_bridgeObjectRetain();
            sub_1B2228890();
            swift_bridgeObjectRelease();
            sub_1B2228890();
            sub_1B2228890();
            v108 = v147;
            v109 = sub_1B2228E9C();
            if (qword_1ED4BF658 != -1)
              swift_once();
            *(_QWORD *)&v147 = 0;
            swift_retain();
            sub_1B1F1AD70(v109, (uint64_t *)&v147, v108, *((uint64_t *)&v108 + 1));
            swift_release();
            swift_bridgeObjectRelease();
            swift_release();
          }
        }
        else
        {
          sub_1B1C454D0((uint64_t)&v150);
        }
        sub_1B2228890();
        swift_bridgeObjectRelease();
        sub_1B2228890();
        v147 = v141;
        v110 = &qword_1ED4BB0A0;
        v111 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50];
        sub_1B19F8E54(0, (unint64_t *)&qword_1ED4BB0A0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50]);
        v112 = (unint64_t *)&unk_1EEF5AC68;
        v113 = MEMORY[0x1E0DEDD80];
        goto LABEL_208;
      case 19:
        sub_1B1A02864((uint64_t)v149, (uint64_t)&v143);
        type metadata accessor for simd_float2x4(0);
        swift_dynamicCast();
        v141 = v150;
        v142 = v151;
        *(_QWORD *)&v143 = 0;
        *((_QWORD *)&v143 + 1) = 0xE000000000000000;
        sub_1B2229430();
        v148 = v143;
        sub_1B19FA278((uint64_t)v15, (uint64_t)&v150);
        sub_1B19FA278((uint64_t)&v150, (uint64_t)&v143);
        if (*((_QWORD *)&v143 + 1) >= 0x3BuLL)
        {
          if (*(_QWORD *)(v145 + 16) && (sub_1B1DC3C04(2u), (v86 & 1) != 0))
          {
            swift_bridgeObjectRetain();
          }
          else
          {
            if (qword_1ED4BF430 != -1)
              swift_once();
            *(_QWORD *)&v147 = 0;
            *((_QWORD *)&v147 + 1) = 0xE000000000000000;
            swift_retain();
            sub_1B2229430();
            swift_bridgeObjectRelease();
            *(_QWORD *)&v147 = 0xD00000000000001BLL;
            *((_QWORD *)&v147 + 1) = 0x80000001B232B900;
            swift_bridgeObjectRetain();
            sub_1B2228890();
            swift_bridgeObjectRelease();
            sub_1B2228890();
            sub_1B2228890();
            v114 = v147;
            v115 = sub_1B2228E9C();
            if (qword_1ED4BF658 != -1)
              swift_once();
            *(_QWORD *)&v147 = 0;
            swift_retain();
            sub_1B1F1AD70(v115, (uint64_t *)&v147, v114, *((uint64_t *)&v114 + 1));
            swift_release();
            swift_bridgeObjectRelease();
            swift_release();
          }
        }
        else
        {
          sub_1B1C454D0((uint64_t)&v150);
        }
        sub_1B2228890();
        swift_bridgeObjectRelease();
        sub_1B2228890();
        v147 = v141;
        v110 = &qword_1ED4BB0E0;
        v111 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDDA8];
        sub_1B19F8E54(0, (unint64_t *)&qword_1ED4BB0E0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDDA8]);
        v112 = (unint64_t *)&unk_1EEF5AC60;
        v113 = MEMORY[0x1E0DEDDD0];
LABEL_208:
        sub_1B1A09538(v112, (unint64_t *)v110, v111, v113);
        sub_1B2229FA0();
        sub_1B2228890();
        swift_bridgeObjectRelease();
        sub_1B2228890();
        v147 = v142;
        goto LABEL_249;
      case 20:
        sub_1B1A02864((uint64_t)v149, (uint64_t)&v143);
        type metadata accessor for simd_float3x2(0);
        swift_dynamicCast();
        v32 = *((_QWORD *)&v150 + 1);
        v33 = v150;
        v34 = v151;
        *(_QWORD *)&v143 = 0;
        *((_QWORD *)&v143 + 1) = 0xE000000000000000;
        sub_1B2229430();
        v148 = v143;
        sub_1B19FA278((uint64_t)v15, (uint64_t)&v150);
        sub_1B19FA278((uint64_t)&v150, (uint64_t)&v143);
        if (*((_QWORD *)&v143 + 1) >= 0x3BuLL)
        {
          if (*(_QWORD *)(v145 + 16) && (sub_1B1DC3C04(2u), (v87 & 1) != 0))
          {
            swift_bridgeObjectRetain();
          }
          else
          {
            if (qword_1ED4BF430 != -1)
              swift_once();
            *(_QWORD *)&v147 = 0;
            *((_QWORD *)&v147 + 1) = 0xE000000000000000;
            swift_retain();
            sub_1B2229430();
            swift_bridgeObjectRelease();
            *(_QWORD *)&v147 = 0xD00000000000001BLL;
            *((_QWORD *)&v147 + 1) = 0x80000001B232B900;
            swift_bridgeObjectRetain();
            sub_1B2228890();
            swift_bridgeObjectRelease();
            sub_1B2228890();
            sub_1B2228890();
            v116 = v147;
            v117 = sub_1B2228E9C();
            if (qword_1ED4BF658 != -1)
              swift_once();
            *(_QWORD *)&v147 = 0;
            swift_retain();
            sub_1B1F1AD70(v117, (uint64_t *)&v147, v116, *((uint64_t *)&v116 + 1));
            swift_release();
            swift_bridgeObjectRelease();
            swift_release();
          }
        }
        else
        {
          sub_1B1C454D0((uint64_t)&v150);
        }
        sub_1B2228890();
        swift_bridgeObjectRelease();
        sub_1B2228890();
        *(_QWORD *)&v147 = v33;
        v118 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD20];
        sub_1B19F8E54(0, &qword_1ED4BB080, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], MEMORY[0x1E0DEDD20]);
        sub_1B1A09538(&qword_1EEF5AC70, &qword_1ED4BB080, v118, MEMORY[0x1E0DEDD48]);
        goto LABEL_234;
      case 21:
        sub_1B1A02864((uint64_t)v149, (uint64_t)&v150);
        type metadata accessor for simd_float3x3(0);
        swift_dynamicCast();
        v140 = v143;
        v141 = v144;
        v142 = v145;
        *(_QWORD *)&v143 = 0;
        *((_QWORD *)&v143 + 1) = 0xE000000000000000;
        sub_1B2229430();
        v148 = v143;
        sub_1B19FA278((uint64_t)v15, (uint64_t)&v150);
        sub_1B19FA278((uint64_t)&v150, (uint64_t)&v143);
        if (*((_QWORD *)&v143 + 1) >= 0x3BuLL)
        {
          if (*(_QWORD *)(v145 + 16) && (sub_1B1DC3C04(2u), (v88 & 1) != 0))
          {
            swift_bridgeObjectRetain();
          }
          else
          {
            if (qword_1ED4BF430 != -1)
              swift_once();
            *(_QWORD *)&v147 = 0;
            *((_QWORD *)&v147 + 1) = 0xE000000000000000;
            swift_retain();
            sub_1B2229430();
            swift_bridgeObjectRelease();
            *(_QWORD *)&v147 = 0xD00000000000001BLL;
            *((_QWORD *)&v147 + 1) = 0x80000001B232B900;
            swift_bridgeObjectRetain();
            sub_1B2228890();
            swift_bridgeObjectRelease();
            sub_1B2228890();
            sub_1B2228890();
            v119 = v147;
            v120 = sub_1B2228E9C();
            if (qword_1ED4BF658 != -1)
              swift_once();
            *(_QWORD *)&v147 = 0;
            swift_retain();
            sub_1B1F1AD70(v120, (uint64_t *)&v147, v119, *((uint64_t *)&v119 + 1));
            swift_release();
            swift_bridgeObjectRelease();
            swift_release();
          }
        }
        else
        {
          sub_1B1C454D0((uint64_t)&v150);
        }
        sub_1B2228890();
        swift_bridgeObjectRelease();
        sub_1B2228890();
        v147 = v140;
        v121 = &qword_1ED4BB0A0;
        v122 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50];
        sub_1B19F8E54(0, (unint64_t *)&qword_1ED4BB0A0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50]);
        v123 = (unint64_t *)&unk_1EEF5AC68;
        v124 = MEMORY[0x1E0DEDD80];
        goto LABEL_227;
      case 22:
        sub_1B1A02864((uint64_t)v149, (uint64_t)&v150);
        type metadata accessor for simd_float3x4(0);
        swift_dynamicCast();
        v140 = v143;
        v141 = v144;
        v142 = v145;
        *(_QWORD *)&v143 = 0;
        *((_QWORD *)&v143 + 1) = 0xE000000000000000;
        sub_1B2229430();
        v148 = v143;
        sub_1B19FA278((uint64_t)v15, (uint64_t)&v150);
        sub_1B19FA278((uint64_t)&v150, (uint64_t)&v143);
        if (*((_QWORD *)&v143 + 1) >= 0x3BuLL)
        {
          if (*(_QWORD *)(v145 + 16) && (sub_1B1DC3C04(2u), (v89 & 1) != 0))
          {
            swift_bridgeObjectRetain();
          }
          else
          {
            if (qword_1ED4BF430 != -1)
              swift_once();
            *(_QWORD *)&v147 = 0;
            *((_QWORD *)&v147 + 1) = 0xE000000000000000;
            swift_retain();
            sub_1B2229430();
            swift_bridgeObjectRelease();
            *(_QWORD *)&v147 = 0xD00000000000001BLL;
            *((_QWORD *)&v147 + 1) = 0x80000001B232B900;
            swift_bridgeObjectRetain();
            sub_1B2228890();
            swift_bridgeObjectRelease();
            sub_1B2228890();
            sub_1B2228890();
            v125 = v147;
            v126 = sub_1B2228E9C();
            if (qword_1ED4BF658 != -1)
              swift_once();
            *(_QWORD *)&v147 = 0;
            swift_retain();
            sub_1B1F1AD70(v126, (uint64_t *)&v147, v125, *((uint64_t *)&v125 + 1));
            swift_release();
            swift_bridgeObjectRelease();
            swift_release();
          }
        }
        else
        {
          sub_1B1C454D0((uint64_t)&v150);
        }
        sub_1B2228890();
        swift_bridgeObjectRelease();
        sub_1B2228890();
        v147 = v140;
        v121 = &qword_1ED4BB0E0;
        v122 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDDA8];
        sub_1B19F8E54(0, (unint64_t *)&qword_1ED4BB0E0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDDA8]);
        v123 = (unint64_t *)&unk_1EEF5AC60;
        v124 = MEMORY[0x1E0DEDDD0];
LABEL_227:
        sub_1B1A09538(v123, (unint64_t *)v121, v122, v124);
        goto LABEL_248;
      case 23:
        sub_1B1A02864((uint64_t)v149, (uint64_t)&v143);
        type metadata accessor for simd_float4x2(0);
        swift_dynamicCast();
        v35 = v150;
        v34 = *((_QWORD *)&v151 + 1);
        v32 = v151;
        *(_QWORD *)&v143 = 0;
        *((_QWORD *)&v143 + 1) = 0xE000000000000000;
        sub_1B2229430();
        v148 = v143;
        sub_1B19FA278((uint64_t)v15, (uint64_t)&v150);
        sub_1B19FA278((uint64_t)&v150, (uint64_t)&v143);
        if (*((_QWORD *)&v143 + 1) >= 0x3BuLL)
        {
          if (*(_QWORD *)(v145 + 16) && (sub_1B1DC3C04(2u), (v90 & 1) != 0))
          {
            swift_bridgeObjectRetain();
          }
          else
          {
            if (qword_1ED4BF430 != -1)
              swift_once();
            *(_QWORD *)&v147 = 0;
            *((_QWORD *)&v147 + 1) = 0xE000000000000000;
            swift_retain();
            sub_1B2229430();
            swift_bridgeObjectRelease();
            *(_QWORD *)&v147 = 0xD00000000000001BLL;
            *((_QWORD *)&v147 + 1) = 0x80000001B232B900;
            swift_bridgeObjectRetain();
            sub_1B2228890();
            swift_bridgeObjectRelease();
            sub_1B2228890();
            sub_1B2228890();
            v127 = v147;
            v128 = sub_1B2228E9C();
            if (qword_1ED4BF658 != -1)
              swift_once();
            *(_QWORD *)&v147 = 0;
            swift_retain();
            sub_1B1F1AD70(v128, (uint64_t *)&v147, v127, *((uint64_t *)&v127 + 1));
            swift_release();
            swift_bridgeObjectRelease();
            swift_release();
          }
        }
        else
        {
          sub_1B1C454D0((uint64_t)&v150);
        }
        sub_1B2228890();
        swift_bridgeObjectRelease();
        sub_1B2228890();
        *(_QWORD *)&v147 = v35;
        v129 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD20];
        sub_1B19F8E54(0, &qword_1ED4BB080, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], MEMORY[0x1E0DEDD20]);
        sub_1B1A09538(&qword_1EEF5AC70, &qword_1ED4BB080, v129, MEMORY[0x1E0DEDD48]);
        sub_1B2229FA0();
        sub_1B2228890();
        swift_bridgeObjectRelease();
        sub_1B2228890();
        *(_QWORD *)&v147 = *((_QWORD *)&v35 + 1);
LABEL_234:
        sub_1B2229FA0();
        sub_1B2228890();
        swift_bridgeObjectRelease();
        sub_1B2228890();
        *(_QWORD *)&v147 = v32;
        sub_1B2229FA0();
        sub_1B2228890();
        swift_bridgeObjectRelease();
        sub_1B2228890();
        *(_QWORD *)&v147 = v34;
        goto LABEL_249;
      case 24:
        sub_1B1A02864((uint64_t)v149, (uint64_t)&v150);
        type metadata accessor for simd_float4x3(0);
        swift_dynamicCast();
        v139 = v143;
        v140 = v144;
        v141 = v145;
        v142 = v146;
        *(_QWORD *)&v143 = 0;
        *((_QWORD *)&v143 + 1) = 0xE000000000000000;
        sub_1B2229430();
        v148 = v143;
        sub_1B19FA278((uint64_t)v15, (uint64_t)&v150);
        sub_1B19FA278((uint64_t)&v150, (uint64_t)&v143);
        if (*((_QWORD *)&v143 + 1) >= 0x3BuLL)
        {
          if (*(_QWORD *)(v145 + 16) && (sub_1B1DC3C04(2u), (v91 & 1) != 0))
          {
            swift_bridgeObjectRetain();
          }
          else
          {
            if (qword_1ED4BF430 != -1)
              swift_once();
            *(_QWORD *)&v147 = 0;
            *((_QWORD *)&v147 + 1) = 0xE000000000000000;
            swift_retain();
            sub_1B2229430();
            swift_bridgeObjectRelease();
            *(_QWORD *)&v147 = 0xD00000000000001BLL;
            *((_QWORD *)&v147 + 1) = 0x80000001B232B900;
            swift_bridgeObjectRetain();
            sub_1B2228890();
            swift_bridgeObjectRelease();
            sub_1B2228890();
            sub_1B2228890();
            v130 = v147;
            v131 = sub_1B2228E9C();
            if (qword_1ED4BF658 != -1)
              swift_once();
            *(_QWORD *)&v147 = 0;
            swift_retain();
            sub_1B1F1AD70(v131, (uint64_t *)&v147, v130, *((uint64_t *)&v130 + 1));
            swift_release();
            swift_bridgeObjectRelease();
            swift_release();
          }
        }
        else
        {
          sub_1B1C454D0((uint64_t)&v150);
        }
        sub_1B2228890();
        swift_bridgeObjectRelease();
        sub_1B2228890();
        v147 = v139;
        v132 = &qword_1ED4BB0A0;
        v133 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50];
        sub_1B19F8E54(0, (unint64_t *)&qword_1ED4BB0A0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50]);
        v134 = (unint64_t *)&unk_1EEF5AC68;
        v135 = MEMORY[0x1E0DEDD80];
        goto LABEL_247;
      case 25:
        sub_1B1A02864((uint64_t)v149, (uint64_t)&v150);
        type metadata accessor for simd_float4x4(0);
        swift_dynamicCast();
        v139 = v143;
        v140 = v144;
        v141 = v145;
        v142 = v146;
        *(_QWORD *)&v143 = 0;
        *((_QWORD *)&v143 + 1) = 0xE000000000000000;
        sub_1B2229430();
        v148 = v143;
        sub_1B19FA278((uint64_t)v15, (uint64_t)&v150);
        sub_1B19FA278((uint64_t)&v150, (uint64_t)&v143);
        if (*((_QWORD *)&v143 + 1) >= 0x3BuLL)
        {
          if (*(_QWORD *)(v145 + 16) && (sub_1B1DC3C04(2u), (v92 & 1) != 0))
          {
            swift_bridgeObjectRetain();
          }
          else
          {
            if (qword_1ED4BF430 != -1)
              swift_once();
            *(_QWORD *)&v147 = 0;
            *((_QWORD *)&v147 + 1) = 0xE000000000000000;
            swift_retain();
            sub_1B2229430();
            swift_bridgeObjectRelease();
            *(_QWORD *)&v147 = 0xD00000000000001BLL;
            *((_QWORD *)&v147 + 1) = 0x80000001B232B900;
            swift_bridgeObjectRetain();
            sub_1B2228890();
            swift_bridgeObjectRelease();
            sub_1B2228890();
            sub_1B2228890();
            v136 = v147;
            v137 = sub_1B2228E9C();
            if (qword_1ED4BF658 != -1)
              swift_once();
            *(_QWORD *)&v147 = 0;
            swift_retain();
            sub_1B1F1AD70(v137, (uint64_t *)&v147, v136, *((uint64_t *)&v136 + 1));
            swift_release();
            swift_bridgeObjectRelease();
            swift_release();
          }
        }
        else
        {
          sub_1B1C454D0((uint64_t)&v150);
        }
        sub_1B2228890();
        swift_bridgeObjectRelease();
        sub_1B2228890();
        v147 = v139;
        v132 = &qword_1ED4BB0E0;
        v133 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDDA8];
        sub_1B19F8E54(0, (unint64_t *)&qword_1ED4BB0E0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDDA8]);
        v134 = (unint64_t *)&unk_1EEF5AC60;
        v135 = MEMORY[0x1E0DEDDD0];
LABEL_247:
        sub_1B1A09538(v134, (unint64_t *)v132, v133, v135);
        sub_1B2229FA0();
        sub_1B2228890();
        swift_bridgeObjectRelease();
        sub_1B2228890();
        v147 = v140;
LABEL_248:
        sub_1B2229FA0();
        sub_1B2228890();
        swift_bridgeObjectRelease();
        sub_1B2228890();
        v147 = v141;
        sub_1B2229FA0();
        sub_1B2228890();
        swift_bridgeObjectRelease();
        sub_1B2228890();
        v147 = v142;
LABEL_249:
        sub_1B2229FA0();
        sub_1B2228890();
        swift_bridgeObjectRelease();
LABEL_250:
        sub_1B2228890();
        v22 = v148;
        goto LABEL_251;
      case 26:
        *(_QWORD *)&v150 = 0;
        *((_QWORD *)&v150 + 1) = 0xE000000000000000;
        sub_1B1A02864((uint64_t)v149, (uint64_t)&v143);
        swift_dynamicCast();
        sub_1B2228C5C();
        goto LABEL_113;
      case 27:
        sub_1B1A02864((uint64_t)v149, (uint64_t)&v143);
        swift_dynamicCast();
        v36 = v150;
        *(_QWORD *)&v143 = 0;
        *((_QWORD *)&v143 + 1) = 0xE000000000000000;
        sub_1B2229430();
        swift_bridgeObjectRelease();
        *(_QWORD *)&v143 = 0x283855726F6C6F43;
        *((_QWORD *)&v143 + 1) = 0xE800000000000000;
        LOBYTE(v150) = v36;
        sub_1B2229A0C();
        sub_1B2228890();
        swift_bridgeObjectRelease();
        sub_1B2228890();
        LOBYTE(v150) = BYTE1(v36);
        sub_1B2229A0C();
        sub_1B2228890();
        swift_bridgeObjectRelease();
        sub_1B2228890();
        LOBYTE(v150) = BYTE2(v36);
        sub_1B2229A0C();
        sub_1B2228890();
        swift_bridgeObjectRelease();
        sub_1B2228890();
        LOBYTE(v150) = HIBYTE(v36);
        sub_1B2229A0C();
        sub_1B2228890();
        swift_bridgeObjectRelease();
        goto LABEL_74;
      case 28:
        *(_QWORD *)&v139 = a2;
        sub_1B1A02864((uint64_t)v149, (uint64_t)&v143);
        swift_dynamicCast();
        v37 = *((_QWORD *)&v150 + 1);
        *(_QWORD *)&v143 = 0;
        *((_QWORD *)&v143 + 1) = 0xE000000000000000;
        sub_1B2229430();
        sub_1B2228890();
        v38 = MEMORY[0x1E0DEB188];
        sub_1B19F8E54(0, (unint64_t *)&qword_1ED4BB0E0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDDA8]);
        v40 = v39;
        v41 = swift_bridgeObjectRetain();
        MEMORY[0x1B5E20670](v41, v40);
        sub_1B2228890();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_1B2228890();
        v42 = swift_bridgeObjectRetain();
        MEMORY[0x1B5E20670](v42, v38);
        sub_1B2228890();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_1B2228890();
        v43 = *(_QWORD *)(v37 + 16);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        *(_QWORD *)&v150 = v43;
        sub_1B2229A0C();
        sub_1B2228890();
        swift_bridgeObjectRelease();
        sub_1B2228890();
        v22 = v143;
        if (!(_QWORD)v142)
          goto LABEL_251;
        *(_QWORD *)&v143 = 0;
        *((_QWORD *)&v143 + 1) = 0xE000000000000000;
        sub_1B2229430();
        sub_1B2228890();
        sub_1B1FC0A9C();
        sub_1B2228890();
        swift_bridgeObjectRelease();
        sub_1B2228890();
        goto LABEL_67;
      case 34:
      case 35:
        *(_QWORD *)&v150 = 34;
        *((_QWORD *)&v150 + 1) = 0xE100000000000000;
        sub_1B1A02864((uint64_t)v149, (uint64_t)&v143);
        swift_dynamicCast();
        sub_1B2228890();
        swift_bridgeObjectRelease();
        sub_1B2228890();
        goto LABEL_113;
      case 36:
        sub_1B1A02864((uint64_t)v149, (uint64_t)&v143);
        type metadata accessor for simd_quatf(0);
        swift_dynamicCast();
        v142 = v150;
        *(_QWORD *)&v143 = 0;
        *((_QWORD *)&v143 + 1) = 0xE000000000000000;
        sub_1B2229430();
        sub_1B2228890();
        sub_1B2228C98();
        sub_1B2228890();
        sub_1B2228C98();
        sub_1B2228890();
        sub_1B2228C98();
        sub_1B2228890();
        sub_1B2228C98();
        goto LABEL_74;
      case 37:
        *(_QWORD *)&v139 = a2;
        sub_1B1A02864((uint64_t)v149, (uint64_t)&v143);
        v46 = MEMORY[0x1E0DEB188];
        sub_1B1AED5E4(0, (unint64_t *)&qword_1ED4B9F38, MEMORY[0x1E0DEB188], (uint64_t)&off_1E63C66D8, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for Curve);
        swift_dynamicCast();
        v47 = *((_QWORD *)&v150 + 1);
        *(_QWORD *)&v143 = 0;
        *((_QWORD *)&v143 + 1) = 0xE000000000000000;
        sub_1B2229430();
        swift_bridgeObjectRelease();
        *(_QWORD *)&v143 = 0xD000000000000027;
        *((_QWORD *)&v143 + 1) = 0x80000001B23355E0;
        v48 = swift_bridgeObjectRetain();
        MEMORY[0x1B5E20670](v48, v46);
        sub_1B2228890();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_1B2228890();
        v49 = swift_bridgeObjectRetain();
        MEMORY[0x1B5E20670](v49, v46);
        sub_1B2228890();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_1B2228890();
        v50 = *(_QWORD *)(v47 + 16);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        *(_QWORD *)&v150 = v50;
        sub_1B2229A0C();
        sub_1B2228890();
        swift_bridgeObjectRelease();
        sub_1B2228890();
        v22 = v143;
        if (!(_QWORD)v142)
          goto LABEL_251;
        *(_QWORD *)&v143 = 0;
        *((_QWORD *)&v143 + 1) = 0xE000000000000000;
        sub_1B2229430();
        swift_bridgeObjectRelease();
        *(_QWORD *)&v143 = 0xD00000000000002ALL;
        *((_QWORD *)&v143 + 1) = 0x80000001B2335610;
        sub_1B1FC0A9C();
        sub_1B2228890();
        swift_bridgeObjectRelease();
        sub_1B2228890();
LABEL_67:
        sub_1B2228890();
        swift_bridgeObjectRelease();
        v51 = v143;
        v52 = v139;
        v53 = *(_QWORD **)(v139 + 168);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)(v52 + 168) = v53;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          v53 = sub_1B1C63044(0, v53[2] + 1, 1, v53);
          *(_QWORD *)(v139 + 168) = v53;
        }
        v56 = v53[2];
        v55 = v53[3];
        if (v56 >= v55 >> 1)
        {
          v53 = sub_1B1C63044(v55 > 1, v56 + 1, 1, v53);
          *(_QWORD *)(v139 + 168) = v53;
        }
        v53[2] = v56 + 1;
        *(_OWORD *)&v53[2 * v56 + 4] = v51;
        goto LABEL_251;
      case 39:
        sub_1B1A02864((uint64_t)v149, (uint64_t)&v143);
        sub_1B1AED5E4(0, (unint64_t *)&qword_1ED4BA5B8, MEMORY[0x1E0DEB418], MEMORY[0x1E0DEB430], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEB848]);
        swift_dynamicCast();
        v57 = v150;
        *(_QWORD *)&v143 = 0;
        *((_QWORD *)&v143 + 1) = 0xE000000000000000;
        sub_1B2229430();
        swift_bridgeObjectRelease();
        *(_QWORD *)&v143 = 0xD00000000000001DLL;
        *((_QWORD *)&v143 + 1) = 0x80000001B23355C0;
        *(_QWORD *)&v150 = v57;
        sub_1B2229A0C();
        sub_1B2228890();
        swift_bridgeObjectRelease();
        sub_1B2228890();
        *(_QWORD *)&v150 = *((_QWORD *)&v57 + 1);
        sub_1B2229A0C();
        sub_1B2228890();
        swift_bridgeObjectRelease();
        goto LABEL_74;
      case 40:
        sub_1B1A02864((uint64_t)v149, (uint64_t)&v143);
        sub_1B1AED5E4(0, (unint64_t *)&qword_1ED4BA5A8, MEMORY[0x1E0DEB188], MEMORY[0x1E0DEB1B0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEB848]);
        swift_dynamicCast();
        *(_QWORD *)&v143 = 0;
        *((_QWORD *)&v143 + 1) = 0xE000000000000000;
        sub_1B2229430();
        sub_1B2228890();
        sub_1B2228C98();
        sub_1B2228890();
        sub_1B2228C98();
LABEL_74:
        sub_1B2228890();
        goto LABEL_75;
      case 43:
        sub_1B1A02864((uint64_t)v149, (uint64_t)&v143);
        v58 = &qword_1EEF5CA48;
        v59 = MEMORY[0x1E0DEAFA0];
        goto LABEL_92;
      case 44:
        sub_1B1A02864((uint64_t)v149, (uint64_t)&v143);
        v58 = &qword_1ED4BA510;
        v59 = MEMORY[0x1E0DEDE70];
        goto LABEL_92;
      case 45:
        sub_1B1A02864((uint64_t)v149, (uint64_t)&v143);
        v58 = &qword_1ED4BA528;
        v59 = MEMORY[0x1E0DEE068];
        goto LABEL_92;
      case 46:
        sub_1B1A02864((uint64_t)v149, (uint64_t)&v143);
        v58 = &qword_1EEF5CA40;
        v59 = MEMORY[0x1E0DEE0F8];
        goto LABEL_92;
      case 47:
        sub_1B1A02864((uint64_t)v149, (uint64_t)&v143);
        v58 = &qword_1EEF5CA38;
        v59 = MEMORY[0x1E0DEE190];
        goto LABEL_92;
      case 48:
        sub_1B1A02864((uint64_t)v149, (uint64_t)&v143);
        v58 = &qword_1EEF5CA30;
        v59 = MEMORY[0x1E0DEDA70];
        goto LABEL_92;
      case 49:
        sub_1B1A02864((uint64_t)v149, (uint64_t)&v143);
        v58 = &qword_1EEF5CA28;
        v59 = MEMORY[0x1E0DEDB58];
        goto LABEL_92;
      case 50:
        sub_1B1A02864((uint64_t)v149, (uint64_t)&v143);
        v58 = &qword_1EEF5CA20;
        v59 = MEMORY[0x1E0DEDBC8];
        goto LABEL_92;
      case 51:
        sub_1B1A02864((uint64_t)v149, (uint64_t)&v143);
        v58 = &qword_1EEF5CA18;
        v59 = MEMORY[0x1E0DEDC60];
        goto LABEL_92;
      case 52:
        sub_1B1A02864((uint64_t)v149, (uint64_t)&v143);
        v58 = &qword_1ED4BA4D0;
        v59 = MEMORY[0x1E0DEB418];
        goto LABEL_92;
      case 53:
        sub_1B1A02864((uint64_t)v149, (uint64_t)&v143);
        v58 = (unint64_t *)&qword_1ED4BA4C0;
        v59 = MEMORY[0x1E0DEB188];
        goto LABEL_92;
      case 54:
        sub_1B1A02864((uint64_t)v149, (uint64_t)&v143);
        v60 = &qword_1EEF5B478;
        v61 = &qword_1ED4BB080;
        v62 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD20];
        goto LABEL_90;
      case 55:
        sub_1B1A02864((uint64_t)v149, (uint64_t)&v143);
        v60 = &qword_1EEF5B468;
        v61 = (unint64_t *)&qword_1ED4BB0A0;
        v62 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50];
        goto LABEL_90;
      case 56:
        sub_1B1A02864((uint64_t)v149, (uint64_t)&v143);
        v60 = &qword_1ED4BA500;
        v61 = (unint64_t *)&qword_1ED4BB0E0;
        v62 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDDA8];
LABEL_90:
        sub_1B1B9A650(0, (unint64_t *)v60, v61, v62);
        swift_dynamicCast();
        v63 = v150;
        sub_1B19F8E54(0, v61, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], v62);
        v22 = MEMORY[0x1B5E20670](v63, v64);
        swift_bridgeObjectRelease();
        goto LABEL_251;
      case 57:
        sub_1B1A02864((uint64_t)v149, (uint64_t)&v143);
        v58 = (unint64_t *)&qword_1ED4BA490;
        v59 = MEMORY[0x1E0DEA968];
LABEL_92:
        sub_1B1A02758(0, v58, v59, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
        swift_dynamicCast();
        v65 = v150;
        v66 = v59;
        goto LABEL_93;
      case 58:
        sub_1B1A02864((uint64_t)v149, (uint64_t)&v143);
        sub_1B1AEB244(0);
        swift_dynamicCast();
        v67 = v150;
        v68 = *(_QWORD *)(v150 + 16);
        if (v68)
        {
          *(_QWORD *)&v143 = MEMORY[0x1E0DEE9D8];
          sub_1B2029FFC(0, v68, 0);
          v69 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
          *(_QWORD *)&v140 = v67;
          v70 = v67 + v69;
          *(_QWORD *)&v142 = *(_QWORD *)(v11 + 72);
          *(_QWORD *)&v141 = *(_QWORD *)(v11 + 16);
          do
          {
            ((void (*)(char *, uint64_t, uint64_t))v141)(v14, v70, v10);
            v71 = sub_1B222802C();
            v73 = v72;
            (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
            v74 = v143;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              sub_1B2029FFC(0, *(_QWORD *)(v74 + 16) + 1, 1);
              v74 = v143;
            }
            v76 = *(_QWORD *)(v74 + 16);
            v75 = *(_QWORD *)(v74 + 24);
            if (v76 >= v75 >> 1)
            {
              sub_1B2029FFC(v75 > 1, v76 + 1, 1);
              v74 = v143;
            }
            *(_QWORD *)(v74 + 16) = v76 + 1;
            v77 = v74 + 16 * v76;
            *(_QWORD *)(v77 + 32) = v71;
            *(_QWORD *)(v77 + 40) = v73;
            v70 += v142;
            --v68;
          }
          while (v68);
          swift_bridgeObjectRelease();
        }
        else
        {
          swift_bridgeObjectRelease();
          v74 = MEMORY[0x1E0DEE9D8];
        }
        v66 = MEMORY[0x1E0DEA968];
        v65 = v74;
LABEL_93:
        v22 = MEMORY[0x1B5E20670](v65, v66);
        swift_bridgeObjectRelease();
LABEL_251:
        _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v149);
        break;
      default:
        if (*(_BYTE *)(a2 + 64) == 1)
        {
          if (qword_1ED4BF430 != -1)
            swift_once();
          *(_QWORD *)&v143 = 0;
          *((_QWORD *)&v143 + 1) = 0xE000000000000000;
          swift_retain();
          sub_1B2229430();
          v150 = v143;
          sub_1B2228890();
          *(_QWORD *)&v143 = v16;
          *((_QWORD *)&v143 + 1) = v17;
          *(_QWORD *)&v144 = v18;
          *((_QWORD *)&v144 + 1) = v19;
          *(_QWORD *)&v145 = v20;
          sub_1B22295EC();
          v44 = v150;
          v45 = sub_1B2228E9C();
          if (qword_1ED4BF658 != -1)
            swift_once();
          *(_QWORD *)&v143 = 0;
          swift_retain();
          sub_1B1F1AD70(v45, (uint64_t *)&v143, v44, *((uint64_t *)&v44 + 1));
          swift_release();
          swift_bridgeObjectRelease();
          swift_release();
        }
        v22 = 0x3E524F5252453CLL;
        _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v149);
        break;
    }
  }
  else
  {
    sub_1B1A0DD70((uint64_t)&v143);
    v21 = a1[3];
    if (v21 > 0x3A)
    {
      return 0xD00000000000001FLL;
    }
    else if (((1 << v21) & 0x7FFFFBC5FFFFFFFLL) != 0)
    {
      v22 = 0x3E524F5252453CLL;
      if (*(_BYTE *)(a2 + 64) == 1)
      {
        v23 = a1[2];
        v24 = a1[4];
        v25 = a1[5];
        v26 = a1[6];
        if (qword_1ED4BF430 != -1)
          swift_once();
        *(_QWORD *)&v143 = 0;
        *((_QWORD *)&v143 + 1) = 0xE000000000000000;
        swift_retain();
        sub_1B2229430();
        v150 = v143;
        sub_1B2228890();
        *(_QWORD *)&v143 = v23;
        *((_QWORD *)&v143 + 1) = v21;
        *(_QWORD *)&v144 = v24;
        *((_QWORD *)&v144 + 1) = v25;
        *(_QWORD *)&v145 = v26;
        sub_1B22295EC();
        sub_1B2228890();
        v27 = v150;
        v28 = sub_1B2228E9C();
        if (qword_1ED4BF658 != -1)
          swift_once();
        *(_QWORD *)&v143 = 0;
        swift_retain();
        sub_1B1F1AD70(v28, (uint64_t *)&v143, v27, *((uint64_t *)&v27 + 1));
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
      }
    }
    else
    {
      return 0xD00000000000001BLL;
    }
  }
  return v22;
}

uint64_t sub_1B1C3F84C(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v69;
  unint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  char v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t (*v82)(void);
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t (*v108)(void);
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char v117;
  char v118;
  char v119;
  uint64_t v120;
  uint64_t v121;
  int v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  int v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  int v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  char v150;
  char v151;
  char v152;
  char v153;
  char v154;
  char v155;
  char v156;
  char v157;
  char v158;
  uint64_t v159;
  uint64_t v160;
  int v161;
  uint64_t v162;
  uint64_t v163;
  int v164;
  uint64_t v165;
  uint64_t v166;
  int v167;
  uint64_t v168;
  uint64_t v169;
  int v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  int v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  int v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  int v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  int v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v219;
  uint64_t v220;
  int v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  _BYTE v229[16];
  char v230;
  _QWORD *v231;
  uint64_t v232;
  uint64_t v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  __int128 v238;
  __int128 v239;
  unsigned int v240;
  __int128 v241;
  __int128 v242;
  __int128 v243;
  __int128 v244;
  _OWORD v245[3];
  __int128 v246;
  uint64_t v247;
  __int128 v248;
  __int128 v249;
  __int128 v250;
  __int128 v251;
  __int128 v252;
  uint64_t v253;
  uint64_t v254;
  unint64_t v255;
  _OWORD v256[2];

  sub_1B1A0DCD4((uint64_t)(a1 + 7), (uint64_t)&v248);
  if (*((_QWORD *)&v249 + 1))
  {
    v240 = a5;
    *(_QWORD *)&v241 = a2;
    sub_1B1A0DDAC(&v248, v256);
    v11 = a1[2];
    v10 = a1[3];
    v9 = (uint64_t)(a1 + 2);
    v13 = a1[4];
    v12 = a1[5];
    v14 = a1[6];
    switch(v10)
    {
      case 0:
        *(_QWORD *)&v242 = 0;
        *((_QWORD *)&v242 + 1) = 0xE000000000000000;
        sub_1B1A02864((uint64_t)v256, (uint64_t)&v248);
        swift_dynamicCast();
        sub_1B2228890();
        swift_bridgeObjectRelease();
        goto LABEL_97;
      case 1:
      case 5:
        sub_1B1A02864((uint64_t)v256, (uint64_t)&v248);
        swift_dynamicCast();
        LOBYTE(v246) = v242;
        goto LABEL_20;
      case 2:
      case 6:
        sub_1B1A02864((uint64_t)v256, (uint64_t)&v248);
        swift_dynamicCast();
        LOWORD(v246) = v242;
        goto LABEL_20;
      case 3:
      case 7:
        sub_1B1A02864((uint64_t)v256, (uint64_t)&v248);
        swift_dynamicCast();
        LODWORD(v246) = v242;
        goto LABEL_20;
      case 4:
      case 8:
      case 9:
        sub_1B1A02864((uint64_t)v256, (uint64_t)&v248);
        swift_dynamicCast();
        *(_QWORD *)&v246 = v242;
LABEL_20:
        v15 = sub_1B2229A0C();
        goto LABEL_224;
      case 10:
        sub_1B1A02864((uint64_t)v256, (uint64_t)&v248);
        sub_1B19F8E54(0, &qword_1ED4BB090, (uint64_t (*)(void))sub_1B1AF0D08, MEMORY[0x1E0DEE0F8], MEMORY[0x1E0DEDD20]);
        swift_dynamicCast();
        *(_QWORD *)&v22 = v242;
        v241 = v22;
        *(_QWORD *)&v246 = 40;
        *((_QWORD *)&v246 + 1) = 0xE100000000000000;
        sub_1B19FA278((uint64_t)(a1 + 2), (uint64_t)&v242);
        sub_1B19FA278((uint64_t)&v242, (uint64_t)&v248);
        if (*((_QWORD *)&v248 + 1) >= 0x3BuLL)
        {
          if (*(_QWORD *)(v250 + 16) && (sub_1B1DC3C04(0), (v150 & 1) != 0))
          {
            swift_bridgeObjectRetain();
          }
          else
          {
            if (qword_1ED4BF430 != -1)
              swift_once();
            v254 = 0;
            v255 = 0xE000000000000000;
            swift_retain();
            sub_1B2229430();
            swift_bridgeObjectRelease();
            v254 = 0xD00000000000001BLL;
            v255 = 0x80000001B232B900;
            swift_bridgeObjectRetain();
            sub_1B2228890();
            swift_bridgeObjectRelease();
            sub_1B2228890();
            sub_1B2228890();
            v159 = v254;
            v160 = v255;
            v161 = sub_1B2228E9C();
            if (qword_1ED4BF658 != -1)
              swift_once();
            v254 = 0;
            swift_retain();
            sub_1B1F1AD70(v161, &v254, v159, v160);
            swift_release();
            swift_bridgeObjectRelease();
            swift_release();
          }
        }
        else
        {
          sub_1B1C460C0((uint64_t)&v242);
        }
        sub_1B2228890();
        swift_bridgeObjectRelease();
        sub_1B2228890();
        LODWORD(v254) = v241;
        sub_1B2229A0C();
        sub_1B2228890();
        swift_bridgeObjectRelease();
        sub_1B2228890();
        LODWORD(v254) = DWORD1(v241);
        goto LABEL_178;
      case 11:
        sub_1B1A02864((uint64_t)v256, (uint64_t)&v248);
        sub_1B19F8E54(0, (unint64_t *)&unk_1ED4BB0B0, (uint64_t (*)(void))sub_1B1AF0D08, MEMORY[0x1E0DEE0F8], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50]);
        swift_dynamicCast();
        v241 = v242;
        *(_QWORD *)&v248 = 0;
        *((_QWORD *)&v248 + 1) = 0xE000000000000000;
        sub_1B2229430();
        swift_bridgeObjectRelease();
        *(_QWORD *)&v246 = 40;
        *((_QWORD *)&v246 + 1) = 0xE100000000000000;
        sub_1B19FA278(v9, (uint64_t)&v242);
        sub_1B19FA278((uint64_t)&v242, (uint64_t)&v248);
        if (*((_QWORD *)&v248 + 1) >= 0x3BuLL)
        {
          if (*(_QWORD *)(v250 + 16) && (sub_1B1DC3C04(0), (v151 & 1) != 0))
          {
            swift_bridgeObjectRetain();
          }
          else
          {
            if (qword_1ED4BF430 != -1)
              swift_once();
            v254 = 0;
            v255 = 0xE000000000000000;
            swift_retain();
            sub_1B2229430();
            swift_bridgeObjectRelease();
            v254 = 0xD00000000000001BLL;
            v255 = 0x80000001B232B900;
            swift_bridgeObjectRetain();
            sub_1B2228890();
            swift_bridgeObjectRelease();
            sub_1B2228890();
            sub_1B2228890();
            v162 = v254;
            v163 = v255;
            v164 = sub_1B2228E9C();
            if (qword_1ED4BF658 != -1)
              swift_once();
            v254 = 0;
            swift_retain();
            sub_1B1F1AD70(v164, &v254, v162, v163);
            swift_release();
            swift_bridgeObjectRelease();
            swift_release();
          }
        }
        else
        {
          sub_1B1C460C0((uint64_t)&v242);
        }
        sub_1B2228890();
        swift_bridgeObjectRelease();
        sub_1B2228890();
        LODWORD(v254) = v241;
        sub_1B2229A0C();
        sub_1B2228890();
        swift_bridgeObjectRelease();
        sub_1B2228890();
        LODWORD(v254) = DWORD1(v241);
        sub_1B2229A0C();
        sub_1B2228890();
        swift_bridgeObjectRelease();
        sub_1B2228890();
        LODWORD(v254) = DWORD2(v241);
        goto LABEL_178;
      case 12:
        sub_1B1A02864((uint64_t)v256, (uint64_t)&v248);
        sub_1B19F8E54(0, &qword_1ED4BB0F8, (uint64_t (*)(void))sub_1B1AF0D08, MEMORY[0x1E0DEE0F8], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDDA8]);
        swift_dynamicCast();
        v241 = v242;
        *(_QWORD *)&v248 = 0;
        *((_QWORD *)&v248 + 1) = 0xE000000000000000;
        sub_1B2229430();
        swift_bridgeObjectRelease();
        *(_QWORD *)&v246 = 40;
        *((_QWORD *)&v246 + 1) = 0xE100000000000000;
        sub_1B19FA278(v9, (uint64_t)&v242);
        sub_1B19FA278((uint64_t)&v242, (uint64_t)&v248);
        if (*((_QWORD *)&v248 + 1) >= 0x3BuLL)
        {
          if (*(_QWORD *)(v250 + 16) && (sub_1B1DC3C04(0), (v152 & 1) != 0))
          {
            swift_bridgeObjectRetain();
          }
          else
          {
            if (qword_1ED4BF430 != -1)
              swift_once();
            v254 = 0;
            v255 = 0xE000000000000000;
            swift_retain();
            sub_1B2229430();
            swift_bridgeObjectRelease();
            v254 = 0xD00000000000001BLL;
            v255 = 0x80000001B232B900;
            swift_bridgeObjectRetain();
            sub_1B2228890();
            swift_bridgeObjectRelease();
            sub_1B2228890();
            sub_1B2228890();
            v165 = v254;
            v166 = v255;
            v167 = sub_1B2228E9C();
            if (qword_1ED4BF658 != -1)
              swift_once();
            v254 = 0;
            swift_retain();
            sub_1B1F1AD70(v167, &v254, v165, v166);
            swift_release();
            swift_bridgeObjectRelease();
            swift_release();
          }
        }
        else
        {
          sub_1B1C460C0((uint64_t)&v242);
        }
        sub_1B2228890();
        swift_bridgeObjectRelease();
        sub_1B2228890();
        LODWORD(v254) = v241;
        sub_1B2229A0C();
        sub_1B2228890();
        swift_bridgeObjectRelease();
        sub_1B2228890();
        LODWORD(v254) = DWORD1(v241);
        sub_1B2229A0C();
        sub_1B2228890();
        swift_bridgeObjectRelease();
        sub_1B2228890();
        LODWORD(v254) = DWORD2(v241);
        sub_1B2229A0C();
        sub_1B2228890();
        swift_bridgeObjectRelease();
        sub_1B2228890();
        LODWORD(v254) = HIDWORD(v241);
LABEL_178:
        sub_1B2229A0C();
        sub_1B2228890();
        swift_bridgeObjectRelease();
        goto LABEL_223;
      case 13:
        sub_1B1A02864((uint64_t)v256, (uint64_t)&v248);
        if (swift_dynamicCast())
        {
          *(_QWORD *)&v248 = 0;
          *((_QWORD *)&v248 + 1) = 0xE000000000000000;
          sub_1B2228C98();
LABEL_78:
          sub_1B2228890();
          v15 = v248;
        }
        else
        {
          *(_QWORD *)&v242 = 0;
          *((_QWORD *)&v242 + 1) = 0xE000000000000000;
          sub_1B1A02864((uint64_t)v256, (uint64_t)&v248);
          swift_dynamicCast();
          sub_1B2228C98();
LABEL_96:
          sub_1B2228890();
LABEL_97:
          v15 = v242;
        }
LABEL_224:
        _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v256);
        break;
      case 14:
        sub_1B1A02864((uint64_t)v256, (uint64_t)&v248);
        sub_1B19F8E54(0, &qword_1ED4BB080, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], MEMORY[0x1E0DEDD20]);
        swift_dynamicCast();
        *(_QWORD *)&v23 = v242;
        v241 = v23;
        *(_QWORD *)&v248 = 0;
        *((_QWORD *)&v248 + 1) = 0xE000000000000000;
        sub_1B2229430();
        v246 = v248;
        sub_1B2228890();
        sub_1B19FA278(v9, (uint64_t)&v242);
        sub_1B19FA278((uint64_t)&v242, (uint64_t)&v248);
        if (*((_QWORD *)&v248 + 1) >= 0x3BuLL)
        {
          if (*(_QWORD *)(v250 + 16) && (sub_1B1DC3C04(0), (v153 & 1) != 0))
          {
            swift_bridgeObjectRetain();
          }
          else
          {
            if (qword_1ED4BF430 != -1)
              swift_once();
            v254 = 0;
            v255 = 0xE000000000000000;
            swift_retain();
            sub_1B2229430();
            swift_bridgeObjectRelease();
            v254 = 0xD00000000000001BLL;
            v255 = 0x80000001B232B900;
            swift_bridgeObjectRetain();
            sub_1B2228890();
            swift_bridgeObjectRelease();
            sub_1B2228890();
            sub_1B2228890();
            v168 = v254;
            v169 = v255;
            v170 = sub_1B2228E9C();
            if (qword_1ED4BF658 != -1)
              swift_once();
            v254 = 0;
            swift_retain();
            sub_1B1F1AD70(v170, &v254, v168, v169);
            swift_release();
            swift_bridgeObjectRelease();
            swift_release();
          }
        }
        else
        {
          sub_1B1C460C0((uint64_t)&v242);
        }
        if ((sub_1B2228914() & 1) != 0)
        {
          swift_bridgeObjectRetain();
          sub_1B2228830();
          v171 = sub_1B1DCD8E8();
          v173 = v172;
          v175 = v174;
          v177 = v176;
          swift_bridgeObjectRelease();
          MEMORY[0x1B5E20388](v171, v173, v175, v177);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        sub_1B2228890();
        swift_bridgeObjectRelease();
        sub_1B2228890();
        sub_1B2228C98();
        sub_1B2228890();
        goto LABEL_203;
      case 15:
        sub_1B1A02864((uint64_t)v256, (uint64_t)&v248);
        sub_1B19F8E54(0, (unint64_t *)&qword_1ED4BB0A0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50]);
        swift_dynamicCast();
        v241 = v242;
        *(_QWORD *)&v248 = 0;
        *((_QWORD *)&v248 + 1) = 0xE000000000000000;
        sub_1B2229430();
        v246 = v248;
        sub_1B2228890();
        sub_1B19FA278(v9, (uint64_t)&v242);
        sub_1B19FA278((uint64_t)&v242, (uint64_t)&v248);
        if (*((_QWORD *)&v248 + 1) >= 0x3BuLL)
        {
          if (*(_QWORD *)(v250 + 16) && (sub_1B1DC3C04(0), (v154 & 1) != 0))
          {
            swift_bridgeObjectRetain();
          }
          else
          {
            if (qword_1ED4BF430 != -1)
              swift_once();
            v254 = 0;
            v255 = 0xE000000000000000;
            swift_retain();
            sub_1B2229430();
            swift_bridgeObjectRelease();
            v254 = 0xD00000000000001BLL;
            v255 = 0x80000001B232B900;
            swift_bridgeObjectRetain();
            sub_1B2228890();
            swift_bridgeObjectRelease();
            sub_1B2228890();
            sub_1B2228890();
            v178 = v254;
            v179 = v255;
            v180 = sub_1B2228E9C();
            if (qword_1ED4BF658 != -1)
              swift_once();
            v254 = 0;
            swift_retain();
            sub_1B1F1AD70(v180, &v254, v178, v179);
            swift_release();
            swift_bridgeObjectRelease();
            swift_release();
          }
        }
        else
        {
          sub_1B1C460C0((uint64_t)&v242);
        }
        if ((sub_1B2228914() & 1) != 0)
        {
          swift_bridgeObjectRetain();
          sub_1B2228830();
          v181 = sub_1B1DCD8E8();
          v183 = v182;
          v185 = v184;
          v187 = v186;
          swift_bridgeObjectRelease();
          MEMORY[0x1B5E20388](v181, v183, v185, v187);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        sub_1B2228890();
        swift_bridgeObjectRelease();
        sub_1B2228890();
        sub_1B2228C98();
        sub_1B2228890();
        sub_1B2228C98();
        sub_1B2228890();
        goto LABEL_203;
      case 16:
        sub_1B1A02864((uint64_t)v256, (uint64_t)&v248);
        sub_1B19F8E54(0, (unint64_t *)&qword_1ED4BB0E0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDDA8]);
        swift_dynamicCast();
        v241 = v242;
        *(_QWORD *)&v248 = 0;
        *((_QWORD *)&v248 + 1) = 0xE000000000000000;
        sub_1B2229430();
        v246 = v248;
        sub_1B2228890();
        sub_1B19FA278(v9, (uint64_t)&v242);
        sub_1B19FA278((uint64_t)&v242, (uint64_t)&v248);
        if (*((_QWORD *)&v248 + 1) >= 0x3BuLL)
        {
          if (*(_QWORD *)(v250 + 16) && (sub_1B1DC3C04(0), (v155 & 1) != 0))
          {
            swift_bridgeObjectRetain();
          }
          else
          {
            if (qword_1ED4BF430 != -1)
              swift_once();
            v254 = 0;
            v255 = 0xE000000000000000;
            swift_retain();
            sub_1B2229430();
            swift_bridgeObjectRelease();
            v254 = 0xD00000000000001BLL;
            v255 = 0x80000001B232B900;
            swift_bridgeObjectRetain();
            sub_1B2228890();
            swift_bridgeObjectRelease();
            sub_1B2228890();
            sub_1B2228890();
            v188 = v254;
            v189 = v255;
            v190 = sub_1B2228E9C();
            if (qword_1ED4BF658 != -1)
              swift_once();
            v254 = 0;
            swift_retain();
            sub_1B1F1AD70(v190, &v254, v188, v189);
            swift_release();
            swift_bridgeObjectRelease();
            swift_release();
          }
        }
        else
        {
          sub_1B1C460C0((uint64_t)&v242);
        }
        if ((sub_1B2228914() & 1) != 0)
        {
          swift_bridgeObjectRetain();
          sub_1B2228830();
          v191 = sub_1B1DCD8E8();
          v193 = v192;
          v195 = v194;
          v197 = v196;
          swift_bridgeObjectRelease();
          MEMORY[0x1B5E20388](v191, v193, v195, v197);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        sub_1B2228890();
        swift_bridgeObjectRelease();
        sub_1B2228890();
        sub_1B2228C98();
        sub_1B2228890();
        sub_1B2228C98();
        sub_1B2228890();
        sub_1B2228C98();
        sub_1B2228890();
LABEL_203:
        sub_1B2228C98();
        goto LABEL_223;
      case 17:
        sub_1B1A02864((uint64_t)v256, (uint64_t)&v248);
        type metadata accessor for simd_float2x2(0);
        swift_dynamicCast();
        v24 = *((_QWORD *)&v242 + 1);
        sub_1B19F8E54(0, &qword_1ED4BB080, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], MEMORY[0x1E0DEDD20]);
        v26 = v25;
        v247 = v25;
        *(_QWORD *)&v246 = v242;
        *(_QWORD *)&v242 = 812412771;
        *((_QWORD *)&v242 + 1) = 0xE400000000000000;
        v239 = xmmword_1B2285F70;
        memset(v245, 0, 40);
        sub_1B1C4BD9C((uint64_t)&v246, (uint64_t)v245 + 8);
        v250 = 0u;
        v251 = v245[0];
        v252 = v245[1];
        v253 = *(_QWORD *)&v245[2];
        v248 = v242;
        v249 = xmmword_1B2285F70;
        sub_1B1C3F84C(&v248, v241, 0, 0, v240);
        sub_1B1A203C4((uint64_t)&v248);
        swift_bridgeObjectRelease();
        v247 = v26;
        *(_QWORD *)&v246 = v24;
        *(_QWORD *)&v242 = 829189987;
        *((_QWORD *)&v242 + 1) = 0xE400000000000000;
        v243 = xmmword_1B2285F70;
        memset(v245, 0, 40);
        v244 = 0uLL;
        sub_1B1C4BD9C((uint64_t)&v246, (uint64_t)v245 + 8);
        v250 = 0u;
        v251 = v245[0];
        v252 = v245[1];
        v253 = *(_QWORD *)&v245[2];
        v248 = v242;
        v249 = xmmword_1B2285F70;
        sub_1B1C3F84C(&v248, v241, 0, 0, v240);
        sub_1B1A203C4((uint64_t)&v248);
        swift_bridgeObjectRelease();
        *(_QWORD *)&v246 = 7890550;
        *((_QWORD *)&v246 + 1) = 0xE300000000000000;
        sub_1B19FA278(v9, (uint64_t)&v242);
        sub_1B19FA278((uint64_t)&v242, (uint64_t)&v248);
        if (*((_QWORD *)&v248 + 1) >= 0x3BuLL)
        {
          if (*(_QWORD *)(v250 + 16) && (sub_1B1DC3C04(0), (v156 & 1) != 0))
          {
            swift_bridgeObjectRetain();
          }
          else
          {
            if (qword_1ED4BF430 != -1)
              swift_once();
            v254 = 0;
            v255 = 0xE000000000000000;
            swift_retain();
            sub_1B2229430();
            swift_bridgeObjectRelease();
            v254 = 0xD00000000000001BLL;
            v255 = 0x80000001B232B900;
            swift_bridgeObjectRetain();
            sub_1B2228890();
            swift_bridgeObjectRelease();
            sub_1B2228890();
            sub_1B2228890();
            v198 = v254;
            v199 = v255;
            v200 = sub_1B2228E9C();
            if (qword_1ED4BF658 != -1)
              swift_once();
            v254 = 0;
            swift_retain();
            sub_1B1F1AD70(v200, &v254, v198, v199);
            swift_release();
            swift_bridgeObjectRelease();
            swift_release();
          }
        }
        else
        {
          sub_1B1C460C0((uint64_t)&v242);
        }
        if ((sub_1B2228914() & 1) != 0)
        {
          swift_bridgeObjectRetain();
          sub_1B2228830();
          v201 = sub_1B1DCD8E8();
          v203 = v202;
          v205 = v204;
          v207 = v206;
          swift_bridgeObjectRelease();
          MEMORY[0x1B5E20388](v201, v203, v205, v207);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        goto LABEL_211;
      case 18:
        sub_1B1A02864((uint64_t)v256, (uint64_t)&v248);
        type metadata accessor for simd_float2x3(0);
        swift_dynamicCast();
        v238 = v243;
        v239 = v242;
        sub_1B19F8E54(0, (unint64_t *)&qword_1ED4BB0A0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50]);
        v28 = v27;
        v247 = v27;
        *(_QWORD *)&v246 = swift_allocObject();
        *(_OWORD *)(v246 + 16) = v242;
        memset((char *)v245 + 8, 0, 32);
        *(_QWORD *)&v242 = 812412771;
        *((_QWORD *)&v242 + 1) = 0xE400000000000000;
        v29 = xmmword_1B2285F60;
        goto LABEL_39;
      case 19:
        sub_1B1A02864((uint64_t)v256, (uint64_t)&v248);
        type metadata accessor for simd_float2x4(0);
        swift_dynamicCast();
        v238 = v243;
        v239 = v242;
        sub_1B19F8E54(0, (unint64_t *)&qword_1ED4BB0E0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDDA8]);
        v28 = v30;
        v247 = v30;
        *(_QWORD *)&v246 = swift_allocObject();
        *(_OWORD *)(v246 + 16) = v242;
        memset((char *)v245 + 8, 0, 32);
        *(_QWORD *)&v242 = 812412771;
        *((_QWORD *)&v242 + 1) = 0xE400000000000000;
        v29 = xmmword_1B2285F50;
LABEL_39:
        v237 = v29;
        v243 = v29;
        *(_QWORD *)&v245[0] = 0;
        sub_1B1C4BD9C((uint64_t)&v246, (uint64_t)v245 + 8);
        v250 = 0u;
        v251 = v245[0];
        v252 = v245[1];
        v253 = *(_QWORD *)&v245[2];
        v248 = v242;
        v249 = v243;
        v31 = v241;
        v32 = v240;
        *(_QWORD *)&v239 = sub_1B1C3F84C(&v248, v241, 0, 0, v240);
        sub_1B1A203C4((uint64_t)&v248);
        swift_bridgeObjectRelease();
        v247 = v28;
        *(_QWORD *)&v246 = swift_allocObject();
        *(_OWORD *)(v246 + 16) = v238;
        *(_QWORD *)&v242 = 829189987;
        *((_QWORD *)&v242 + 1) = 0xE400000000000000;
        v243 = v237;
        memset(v245, 0, 40);
        v244 = 0uLL;
        sub_1B1C4BD9C((uint64_t)&v246, (uint64_t)v245 + 8);
        v250 = 0u;
        v251 = v245[0];
        v252 = v245[1];
        v253 = *(_QWORD *)&v245[2];
        v248 = v242;
        v249 = v237;
        sub_1B1C3F84C(&v248, v31, 0, 0, v32);
        sub_1B1A203C4((uint64_t)&v248);
        swift_bridgeObjectRelease();
        *(_QWORD *)&v246 = 7890550;
        *((_QWORD *)&v246 + 1) = 0xE300000000000000;
        sub_1B19FA278(v9, (uint64_t)&v242);
        sub_1B19FA278((uint64_t)&v242, (uint64_t)&v248);
        if (*((_QWORD *)&v248 + 1) >= 0x3BuLL)
        {
          if (*(_QWORD *)(v250 + 16) && (sub_1B1DC3C04(0), (v117 & 1) != 0))
          {
            swift_bridgeObjectRetain();
          }
          else
          {
            if (qword_1ED4BF430 != -1)
              swift_once();
            v254 = 0;
            v255 = 0xE000000000000000;
            swift_retain();
            sub_1B2229430();
            swift_bridgeObjectRelease();
            v254 = 0xD00000000000001BLL;
            v255 = 0x80000001B232B900;
            swift_bridgeObjectRetain();
            sub_1B2228890();
            swift_bridgeObjectRelease();
            sub_1B2228890();
            sub_1B2228890();
            v120 = v254;
            v121 = v255;
            v122 = sub_1B2228E9C();
            if (qword_1ED4BF658 != -1)
              swift_once();
            v254 = 0;
            swift_retain();
            sub_1B1F1AD70(v122, &v254, v120, v121);
            swift_release();
            swift_bridgeObjectRelease();
            swift_release();
          }
        }
        else
        {
          sub_1B1C460C0((uint64_t)&v242);
        }
        if ((sub_1B2228914() & 1) != 0)
        {
          swift_bridgeObjectRetain();
          sub_1B2228830();
          v123 = sub_1B1DCD8E8();
          v125 = v124;
          v127 = v126;
          v129 = v128;
          swift_bridgeObjectRelease();
          MEMORY[0x1B5E20388](v123, v125, v127, v129);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
LABEL_211:
        sub_1B2228890();
        swift_bridgeObjectRelease();
        sub_1B2228890();
        goto LABEL_220;
      case 20:
        sub_1B1A02864((uint64_t)v256, (uint64_t)&v248);
        type metadata accessor for simd_float3x2(0);
        swift_dynamicCast();
        v33 = *((_QWORD *)&v242 + 1);
        v34 = v243;
        sub_1B19F8E54(0, &qword_1ED4BB080, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], MEMORY[0x1E0DEDD20]);
        v36 = v35;
        v247 = v35;
        *(_QWORD *)&v246 = v242;
        *(_QWORD *)&v242 = 812412771;
        *((_QWORD *)&v242 + 1) = 0xE400000000000000;
        v239 = xmmword_1B2285F70;
        memset(v245, 0, 40);
        sub_1B1C4BD9C((uint64_t)&v246, (uint64_t)v245 + 8);
        v250 = 0u;
        v251 = v245[0];
        v252 = v245[1];
        v253 = *(_QWORD *)&v245[2];
        v248 = v242;
        v249 = xmmword_1B2285F70;
        *(_QWORD *)&v238 = sub_1B1C3F84C(&v248, v241, 0, 0, v240);
        sub_1B1A203C4((uint64_t)&v248);
        swift_bridgeObjectRelease();
        v247 = v36;
        *(_QWORD *)&v246 = v33;
        *(_QWORD *)&v242 = 829189987;
        *((_QWORD *)&v242 + 1) = 0xE400000000000000;
        v243 = xmmword_1B2285F70;
        memset(v245, 0, 40);
        sub_1B1C4BD9C((uint64_t)&v246, (uint64_t)v245 + 8);
        v250 = 0u;
        v251 = v245[0];
        v252 = v245[1];
        v253 = *(_QWORD *)&v245[2];
        v248 = v242;
        v249 = xmmword_1B2285F70;
        *(_QWORD *)&v237 = sub_1B1C3F84C(&v248, v241, 0, 0, v240);
        sub_1B1A203C4((uint64_t)&v248);
        swift_bridgeObjectRelease();
        v247 = v36;
        *(_QWORD *)&v246 = v34;
        *(_QWORD *)&v242 = 845967203;
        *((_QWORD *)&v242 + 1) = 0xE400000000000000;
        memset(v245, 0, 40);
        v244 = 0uLL;
        sub_1B1C4BD9C((uint64_t)&v246, (uint64_t)v245 + 8);
        v250 = 0u;
        v251 = v245[0];
        v252 = v245[1];
        v253 = *(_QWORD *)&v245[2];
        v248 = v242;
        v249 = xmmword_1B2285F70;
        sub_1B1C3F84C(&v248, v241, 0, 0, v240);
        v38 = v37;
        sub_1B1A203C4((uint64_t)&v248);
        swift_bridgeObjectRelease();
        *(_QWORD *)&v248 = 0;
        *((_QWORD *)&v248 + 1) = 0xE000000000000000;
        sub_1B2229430();
        swift_bridgeObjectRelease();
        *(_QWORD *)&v246 = 7890550;
        *((_QWORD *)&v246 + 1) = 0xE300000000000000;
        sub_1B19FA278(v9, (uint64_t)&v242);
        sub_1B19FA278((uint64_t)&v242, (uint64_t)&v248);
        if (*((_QWORD *)&v248 + 1) >= 0x3BuLL)
        {
          if (*(_QWORD *)(v250 + 16) && (sub_1B1DC3C04(0), (v157 & 1) != 0))
          {
            swift_bridgeObjectRetain();
          }
          else
          {
            if (qword_1ED4BF430 != -1)
              swift_once();
            v254 = 0;
            v255 = 0xE000000000000000;
            swift_retain();
            sub_1B2229430();
            swift_bridgeObjectRelease();
            v254 = 0xD00000000000001BLL;
            v255 = 0x80000001B232B900;
            swift_bridgeObjectRetain();
            sub_1B2228890();
            swift_bridgeObjectRelease();
            sub_1B2228890();
            sub_1B2228890();
            v209 = v254;
            v208 = v255;
            v210 = sub_1B2228E9C();
            if (qword_1ED4BF658 != -1)
              swift_once();
            v254 = 0;
            swift_retain();
            sub_1B1F1AD70(v210, &v254, v209, v208);
            swift_release();
            swift_bridgeObjectRelease();
            swift_release();
          }
        }
        else
        {
          sub_1B1C460C0((uint64_t)&v242);
        }
        if ((sub_1B2228914() & 1) != 0)
        {
          swift_bridgeObjectRetain();
          sub_1B2228830();
          v211 = sub_1B1DCD8E8();
          v213 = v212;
          v215 = v214;
          *(_QWORD *)&v241 = v38;
          v217 = v216;
          swift_bridgeObjectRelease();
          MEMORY[0x1B5E20388](v211, v213, v215, v217);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        goto LABEL_219;
      case 21:
        sub_1B1A02864((uint64_t)v256, (uint64_t)&v242);
        type metadata accessor for simd_float3x3(0);
        swift_dynamicCast();
        v239 = v248;
        v235 = v250;
        v236 = v249;
        sub_1B19F8E54(0, (unint64_t *)&qword_1ED4BB0A0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50]);
        v40 = v39;
        v247 = v39;
        *(_QWORD *)&v246 = swift_allocObject();
        *(_OWORD *)(v246 + 16) = v239;
        memset((char *)v245 + 8, 0, 32);
        *(_QWORD *)&v242 = 812412771;
        *((_QWORD *)&v242 + 1) = 0xE400000000000000;
        v41 = xmmword_1B2285F60;
        goto LABEL_45;
      case 22:
        sub_1B1A02864((uint64_t)v256, (uint64_t)&v242);
        type metadata accessor for simd_float3x4(0);
        swift_dynamicCast();
        v239 = v248;
        v235 = v250;
        v236 = v249;
        sub_1B19F8E54(0, (unint64_t *)&qword_1ED4BB0E0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDDA8]);
        v40 = v42;
        v247 = v42;
        *(_QWORD *)&v246 = swift_allocObject();
        *(_OWORD *)(v246 + 16) = v239;
        memset((char *)v245 + 8, 0, 32);
        *(_QWORD *)&v242 = 812412771;
        *((_QWORD *)&v242 + 1) = 0xE400000000000000;
        v41 = xmmword_1B2285F50;
LABEL_45:
        v239 = v41;
        v243 = v41;
        *(_QWORD *)&v245[0] = 0;
        v244 = 0uLL;
        sub_1B1C4BD9C((uint64_t)&v246, (uint64_t)v245 + 8);
        v250 = v244;
        v251 = v245[0];
        v252 = v245[1];
        v253 = *(_QWORD *)&v245[2];
        v248 = v242;
        v249 = v243;
        v43 = v241;
        v44 = v240;
        *(_QWORD *)&v237 = sub_1B1C3F84C(&v248, v241, 0, 0, v240);
        *(_QWORD *)&v238 = v45;
        sub_1B1A203C4((uint64_t)&v248);
        swift_bridgeObjectRelease();
        v247 = v40;
        *(_QWORD *)&v246 = swift_allocObject();
        *(_OWORD *)(v246 + 16) = v236;
        *(_QWORD *)&v242 = 829189987;
        *((_QWORD *)&v242 + 1) = 0xE400000000000000;
        v243 = v239;
        memset(v245, 0, 40);
        v244 = 0uLL;
        sub_1B1C4BD9C((uint64_t)&v246, (uint64_t)v245 + 8);
        v250 = v244;
        v251 = v245[0];
        v252 = v245[1];
        v253 = *(_QWORD *)&v245[2];
        v248 = v242;
        v249 = v243;
        *(_QWORD *)&v236 = sub_1B1C3F84C(&v248, v43, 0, 0, v44);
        sub_1B1A203C4((uint64_t)&v248);
        swift_bridgeObjectRelease();
        v247 = v40;
        *(_QWORD *)&v246 = swift_allocObject();
        *(_OWORD *)(v246 + 16) = v235;
        *(_QWORD *)&v242 = 845967203;
        *((_QWORD *)&v242 + 1) = 0xE400000000000000;
        v243 = v239;
        memset(v245, 0, 40);
        v244 = 0uLL;
        sub_1B1C4BD9C((uint64_t)&v246, (uint64_t)v245 + 8);
        v250 = v244;
        v251 = v245[0];
        v252 = v245[1];
        v253 = *(_QWORD *)&v245[2];
        v248 = v242;
        v249 = v243;
        sub_1B1C3F84C(&v248, v43, 0, 0, v44);
        sub_1B1A203C4((uint64_t)&v248);
        swift_bridgeObjectRelease();
        *(_QWORD *)&v248 = 0;
        *((_QWORD *)&v248 + 1) = 0xE000000000000000;
        sub_1B2229430();
        swift_bridgeObjectRelease();
        *(_QWORD *)&v246 = 7890550;
        *((_QWORD *)&v246 + 1) = 0xE300000000000000;
        sub_1B19FA278(v9, (uint64_t)&v242);
        sub_1B19FA278((uint64_t)&v242, (uint64_t)&v248);
        if (*((_QWORD *)&v248 + 1) >= 0x3BuLL)
        {
          if (*(_QWORD *)(v250 + 16) && (sub_1B1DC3C04(0), (v118 & 1) != 0))
          {
            swift_bridgeObjectRetain();
          }
          else
          {
            if (qword_1ED4BF430 != -1)
              swift_once();
            v254 = 0;
            v255 = 0xE000000000000000;
            swift_retain();
            sub_1B2229430();
            swift_bridgeObjectRelease();
            v254 = 0xD00000000000001BLL;
            v255 = 0x80000001B232B900;
            swift_bridgeObjectRetain();
            sub_1B2228890();
            swift_bridgeObjectRelease();
            sub_1B2228890();
            sub_1B2228890();
            v130 = v254;
            v131 = v255;
            v132 = sub_1B2228E9C();
            if (qword_1ED4BF658 != -1)
              swift_once();
            v254 = 0;
            swift_retain();
            sub_1B1F1AD70(v132, &v254, v130, v131);
            swift_release();
            swift_bridgeObjectRelease();
            swift_release();
          }
        }
        else
        {
          sub_1B1C460C0((uint64_t)&v242);
        }
        if ((sub_1B2228914() & 1) != 0)
        {
          swift_bridgeObjectRetain();
          sub_1B2228830();
          v133 = sub_1B1DCD8E8();
          v135 = v134;
          v137 = v136;
          v139 = v138;
          swift_bridgeObjectRelease();
          MEMORY[0x1B5E20388](v133, v135, v137, v139);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
LABEL_219:
        sub_1B2228890();
        swift_bridgeObjectRelease();
        sub_1B2228890();
        sub_1B2228890();
        swift_bridgeObjectRelease();
        sub_1B2228890();
LABEL_220:
        sub_1B2228890();
        goto LABEL_221;
      case 23:
        sub_1B1A02864((uint64_t)v256, (uint64_t)&v248);
        type metadata accessor for simd_float4x2(0);
        swift_dynamicCast();
        v46 = *((_QWORD *)&v242 + 1);
        sub_1B19F8E54(0, &qword_1ED4BB080, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], MEMORY[0x1E0DEDD20]);
        v48 = v47;
        v247 = v47;
        *(_QWORD *)&v246 = v242;
        *(_QWORD *)&v242 = 812412771;
        *((_QWORD *)&v242 + 1) = 0xE400000000000000;
        v239 = xmmword_1B2285F70;
        memset(v245, 0, 40);
        sub_1B1C4BD9C((uint64_t)&v246, (uint64_t)v245 + 8);
        v250 = 0u;
        v251 = v245[0];
        v252 = v245[1];
        v253 = *(_QWORD *)&v245[2];
        v248 = v242;
        v249 = xmmword_1B2285F70;
        *(_QWORD *)&v237 = sub_1B1C3F84C(&v248, v241, 0, 0, v240);
        *(_QWORD *)&v238 = v49;
        sub_1B1A203C4((uint64_t)&v248);
        swift_bridgeObjectRelease();
        v247 = v48;
        *(_QWORD *)&v246 = v46;
        *(_QWORD *)&v242 = 829189987;
        *((_QWORD *)&v242 + 1) = 0xE400000000000000;
        memset(v245, 0, 40);
        sub_1B1C4BD9C((uint64_t)&v246, (uint64_t)v245 + 8);
        v250 = 0u;
        v251 = v245[0];
        v252 = v245[1];
        v253 = *(_QWORD *)&v245[2];
        v248 = v242;
        v249 = xmmword_1B2285F70;
        *(_QWORD *)&v236 = sub_1B1C3F84C(&v248, v241, 0, 0, v240);
        sub_1B1A203C4((uint64_t)&v248);
        swift_bridgeObjectRelease();
        v247 = v48;
        *(_QWORD *)&v246 = v243;
        *(_QWORD *)&v242 = 845967203;
        *((_QWORD *)&v242 + 1) = 0xE400000000000000;
        memset(v245, 0, 40);
        sub_1B1C4BD9C((uint64_t)&v246, (uint64_t)v245 + 8);
        v250 = 0u;
        v251 = v245[0];
        v252 = v245[1];
        v253 = *(_QWORD *)&v245[2];
        v248 = v242;
        v249 = xmmword_1B2285F70;
        *(_QWORD *)&v235 = sub_1B1C3F84C(&v248, v241, 0, 0, v240);
        sub_1B1A203C4((uint64_t)&v248);
        swift_bridgeObjectRelease();
        v247 = v48;
        *(_QWORD *)&v246 = *((_QWORD *)&v243 + 1);
        *(_QWORD *)&v242 = 862744419;
        *((_QWORD *)&v242 + 1) = 0xE400000000000000;
        v243 = xmmword_1B2285F70;
        memset(v245, 0, 40);
        v244 = 0uLL;
        sub_1B1C4BD9C((uint64_t)&v246, (uint64_t)v245 + 8);
        v250 = 0u;
        v251 = v245[0];
        v252 = v245[1];
        v253 = *(_QWORD *)&v245[2];
        v248 = v242;
        v249 = xmmword_1B2285F70;
        sub_1B1C3F84C(&v248, v241, 0, 0, v240);
        v51 = v50;
        sub_1B1A203C4((uint64_t)&v248);
        swift_bridgeObjectRelease();
        *(_QWORD *)&v248 = 0;
        *((_QWORD *)&v248 + 1) = 0xE000000000000000;
        sub_1B2229430();
        swift_bridgeObjectRelease();
        *(_QWORD *)&v246 = 7890550;
        *((_QWORD *)&v246 + 1) = 0xE300000000000000;
        sub_1B19FA278(v9, (uint64_t)&v242);
        sub_1B19FA278((uint64_t)&v242, (uint64_t)&v248);
        if (*((_QWORD *)&v248 + 1) >= 0x3BuLL)
        {
          if (*(_QWORD *)(v250 + 16) && (sub_1B1DC3C04(0), (v158 & 1) != 0))
          {
            swift_bridgeObjectRetain();
          }
          else
          {
            if (qword_1ED4BF430 != -1)
              swift_once();
            v254 = 0;
            v255 = 0xE000000000000000;
            swift_retain();
            sub_1B2229430();
            swift_bridgeObjectRelease();
            v254 = 0xD00000000000001BLL;
            v255 = 0x80000001B232B900;
            swift_bridgeObjectRetain();
            sub_1B2228890();
            swift_bridgeObjectRelease();
            sub_1B2228890();
            sub_1B2228890();
            v219 = v254;
            v220 = v255;
            v221 = sub_1B2228E9C();
            if (qword_1ED4BF658 != -1)
              swift_once();
            v254 = 0;
            swift_retain();
            sub_1B1F1AD70(v221, &v254, v219, v220);
            swift_release();
            swift_bridgeObjectRelease();
            swift_release();
          }
        }
        else
        {
          sub_1B1C460C0((uint64_t)&v242);
        }
        if ((sub_1B2228914() & 1) != 0)
        {
          swift_bridgeObjectRetain();
          sub_1B2228830();
          v222 = sub_1B1DCD8E8();
          v224 = v223;
          v226 = v225;
          *(_QWORD *)&v241 = v51;
          v228 = v227;
          swift_bridgeObjectRelease();
          MEMORY[0x1B5E20388](v222, v224, v226, v228);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        sub_1B2228890();
        swift_bridgeObjectRelease();
        sub_1B2228890();
        sub_1B2228890();
        swift_bridgeObjectRelease();
        sub_1B2228890();
        sub_1B2228890();
        swift_bridgeObjectRelease();
        sub_1B2228890();
        sub_1B2228890();
        swift_bridgeObjectRelease();
        sub_1B2228890();
        goto LABEL_222;
      case 24:
        sub_1B1A02864((uint64_t)v256, (uint64_t)&v242);
        type metadata accessor for simd_float4x3(0);
        swift_dynamicCast();
        v239 = v248;
        v235 = v250;
        v236 = v249;
        v234 = v251;
        sub_1B19F8E54(0, (unint64_t *)&qword_1ED4BB0A0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50]);
        v53 = v52;
        v247 = v52;
        *(_QWORD *)&v246 = swift_allocObject();
        *(_OWORD *)(v246 + 16) = v239;
        memset((char *)v245 + 8, 0, 32);
        *(_QWORD *)&v242 = 812412771;
        *((_QWORD *)&v242 + 1) = 0xE400000000000000;
        v54 = xmmword_1B2285F60;
        goto LABEL_51;
      case 25:
        sub_1B1A02864((uint64_t)v256, (uint64_t)&v242);
        type metadata accessor for simd_float4x4(0);
        swift_dynamicCast();
        v239 = v248;
        v235 = v250;
        v236 = v249;
        v234 = v251;
        sub_1B19F8E54(0, (unint64_t *)&qword_1ED4BB0E0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDDA8]);
        v53 = v55;
        v247 = v55;
        *(_QWORD *)&v246 = swift_allocObject();
        *(_OWORD *)(v246 + 16) = v239;
        memset((char *)v245 + 8, 0, 32);
        *(_QWORD *)&v242 = 812412771;
        *((_QWORD *)&v242 + 1) = 0xE400000000000000;
        v54 = xmmword_1B2285F50;
LABEL_51:
        v239 = v54;
        v243 = v54;
        *(_QWORD *)&v245[0] = 0;
        v244 = 0uLL;
        sub_1B1C4BD9C((uint64_t)&v246, (uint64_t)v245 + 8);
        v250 = v244;
        v251 = v245[0];
        v252 = v245[1];
        v253 = *(_QWORD *)&v245[2];
        v248 = v242;
        v249 = v243;
        v56 = v241;
        v57 = v240;
        *(_QWORD *)&v237 = sub_1B1C3F84C(&v248, v241, 0, 0, v240);
        *(_QWORD *)&v238 = v58;
        sub_1B1A203C4((uint64_t)&v248);
        swift_bridgeObjectRelease();
        v247 = v53;
        *(_QWORD *)&v246 = swift_allocObject();
        *(_OWORD *)(v246 + 16) = v236;
        *(_QWORD *)&v242 = 829189987;
        *((_QWORD *)&v242 + 1) = 0xE400000000000000;
        v243 = v239;
        memset(v245, 0, 40);
        v244 = 0uLL;
        sub_1B1C4BD9C((uint64_t)&v246, (uint64_t)v245 + 8);
        v250 = v244;
        v251 = v245[0];
        v252 = v245[1];
        v253 = *(_QWORD *)&v245[2];
        v248 = v242;
        v249 = v243;
        *(_QWORD *)&v236 = sub_1B1C3F84C(&v248, v56, 0, 0, v57);
        v233 = v59;
        sub_1B1A203C4((uint64_t)&v248);
        swift_bridgeObjectRelease();
        v247 = v53;
        *(_QWORD *)&v246 = swift_allocObject();
        *(_OWORD *)(v246 + 16) = v235;
        *(_QWORD *)&v242 = 845967203;
        *((_QWORD *)&v242 + 1) = 0xE400000000000000;
        v243 = v239;
        memset(v245, 0, 40);
        v244 = 0uLL;
        sub_1B1C4BD9C((uint64_t)&v246, (uint64_t)v245 + 8);
        v250 = v244;
        v251 = v245[0];
        v252 = v245[1];
        v253 = *(_QWORD *)&v245[2];
        v248 = v242;
        v249 = v243;
        *(_QWORD *)&v235 = sub_1B1C3F84C(&v248, v56, 0, 0, v57);
        sub_1B1A203C4((uint64_t)&v248);
        swift_bridgeObjectRelease();
        v247 = v53;
        *(_QWORD *)&v246 = swift_allocObject();
        *(_OWORD *)(v246 + 16) = v234;
        *(_QWORD *)&v242 = 862744419;
        *((_QWORD *)&v242 + 1) = 0xE400000000000000;
        v243 = v239;
        memset(v245, 0, 40);
        v244 = 0uLL;
        sub_1B1C4BD9C((uint64_t)&v246, (uint64_t)v245 + 8);
        v250 = v244;
        v251 = v245[0];
        v252 = v245[1];
        v253 = *(_QWORD *)&v245[2];
        v248 = v242;
        v249 = v243;
        sub_1B1C3F84C(&v248, v56, 0, 0, v57);
        sub_1B1A203C4((uint64_t)&v248);
        swift_bridgeObjectRelease();
        *(_QWORD *)&v248 = 0;
        *((_QWORD *)&v248 + 1) = 0xE000000000000000;
        sub_1B2229430();
        swift_bridgeObjectRelease();
        *(_QWORD *)&v246 = 7890550;
        *((_QWORD *)&v246 + 1) = 0xE300000000000000;
        sub_1B19FA278(v9, (uint64_t)&v242);
        sub_1B19FA278((uint64_t)&v242, (uint64_t)&v248);
        if (*((_QWORD *)&v248 + 1) >= 0x3BuLL)
        {
          if (*(_QWORD *)(v250 + 16) && (sub_1B1DC3C04(0), (v119 & 1) != 0))
          {
            swift_bridgeObjectRetain();
          }
          else
          {
            if (qword_1ED4BF430 != -1)
              swift_once();
            v254 = 0;
            v255 = 0xE000000000000000;
            swift_retain();
            sub_1B2229430();
            swift_bridgeObjectRelease();
            v254 = 0xD00000000000001BLL;
            v255 = 0x80000001B232B900;
            swift_bridgeObjectRetain();
            sub_1B2228890();
            swift_bridgeObjectRelease();
            sub_1B2228890();
            sub_1B2228890();
            v140 = v254;
            v141 = v255;
            v142 = sub_1B2228E9C();
            if (qword_1ED4BF658 != -1)
              swift_once();
            v254 = 0;
            swift_retain();
            sub_1B1F1AD70(v142, &v254, v140, v141);
            swift_release();
            swift_bridgeObjectRelease();
            swift_release();
          }
        }
        else
        {
          sub_1B1C460C0((uint64_t)&v242);
        }
        if ((sub_1B2228914() & 1) != 0)
        {
          swift_bridgeObjectRetain();
          sub_1B2228830();
          v143 = sub_1B1DCD8E8();
          v145 = v144;
          v147 = v146;
          v149 = v148;
          swift_bridgeObjectRelease();
          MEMORY[0x1B5E20388](v143, v145, v147, v149);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        sub_1B2228890();
        swift_bridgeObjectRelease();
        sub_1B2228890();
        sub_1B2228890();
        swift_bridgeObjectRelease();
        sub_1B2228890();
        sub_1B2228890();
        swift_bridgeObjectRelease();
        sub_1B2228890();
        sub_1B2228890();
LABEL_221:
        swift_bridgeObjectRelease();
        sub_1B2228890();
LABEL_222:
        sub_1B2228890();
        swift_bridgeObjectRelease();
LABEL_223:
        sub_1B2228890();
        v15 = v246;
        goto LABEL_224;
      case 26:
        *(_QWORD *)&v242 = 0;
        *((_QWORD *)&v242 + 1) = 0xE000000000000000;
        sub_1B1A02864((uint64_t)v256, (uint64_t)&v248);
        swift_dynamicCast();
        sub_1B2228C5C();
        goto LABEL_97;
      case 28:
        sub_1B1A02864((uint64_t)v256, (uint64_t)&v248);
        swift_dynamicCast();
        v61 = *((_QWORD *)&v242 + 1);
        sub_1B1B9A650(0, (unint64_t *)&qword_1ED4BA500, (unint64_t *)&qword_1ED4BB0E0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDDA8]);
        v247 = v62;
        *(_QWORD *)&v239 = v242;
        *(_QWORD *)&v246 = v242;
        *(_QWORD *)&v242 = 0;
        *((_QWORD *)&v242 + 1) = 0xE000000000000000;
        memset(v245, 0, 40);
        swift_bridgeObjectRetain();
        sub_1B1C4BD9C((uint64_t)&v246, (uint64_t)v245 + 8);
        v250 = 0u;
        v251 = v245[0];
        v252 = v245[1];
        v253 = *(_QWORD *)&v245[2];
        v248 = v242;
        v249 = xmmword_1B2285F40;
        *(_QWORD *)&v238 = sub_1B1C3F84C(&v248, v241, 0, 0, v240);
        sub_1B1A203C4((uint64_t)&v248);
        swift_bridgeObjectRelease();
        sub_1B1A02758(0, (unint64_t *)&qword_1ED4BA4C0, MEMORY[0x1E0DEB188], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
        v247 = v63;
        *(_QWORD *)&v246 = v61;
        *(_QWORD *)&v242 = 0;
        *((_QWORD *)&v242 + 1) = 0xE000000000000000;
        v243 = xmmword_1B2285F30;
        memset(v245, 0, 40);
        v244 = 0uLL;
        swift_bridgeObjectRetain();
        sub_1B1C4BD9C((uint64_t)&v246, (uint64_t)v245 + 8);
        v250 = 0u;
        v251 = v245[0];
        v252 = v245[1];
        v253 = *(_QWORD *)&v245[2];
        v248 = v242;
        v249 = xmmword_1B2285F30;
        sub_1B1C3F84C(&v248, v241, 0, 0, v240);
        sub_1B1A203C4((uint64_t)&v248);
        swift_bridgeObjectRelease();
        *(_QWORD *)&v248 = 0;
        *((_QWORD *)&v248 + 1) = 0xE000000000000000;
        sub_1B2229430();
        sub_1B2228890();
        sub_1B2228890();
        swift_bridgeObjectRelease();
        sub_1B2228890();
        sub_1B2228890();
        swift_bridgeObjectRelease();
        sub_1B2228890();
        v64 = *(_QWORD *)(v61 + 16);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        *(_QWORD *)&v242 = v64;
        sub_1B2229A0C();
        sub_1B2228890();
        swift_bridgeObjectRelease();
        sub_1B2228890();
        LOBYTE(v242) = 1;
        sub_1B2229A0C();
        sub_1B2228890();
        swift_bridgeObjectRelease();
        sub_1B2228890();
        v15 = v248;
        if (!a4)
          goto LABEL_224;
        *(_QWORD *)&v248 = 0;
        *((_QWORD *)&v248 + 1) = 0xE000000000000000;
        sub_1B2229430();
        sub_1B2228890();
        sub_1B1FC0A9C();
        sub_1B2228890();
        swift_bridgeObjectRelease();
        sub_1B2228890();
        goto LABEL_63;
      case 34:
      case 35:
        sub_1B1A02864((uint64_t)v256, (uint64_t)&v248);
        swift_dynamicCast();
        *(_QWORD *)&v248 = 0;
        *((_QWORD *)&v248 + 1) = 0xE000000000000000;
        sub_1B2229430();
        swift_bridgeObjectRelease();
        *(_QWORD *)&v248 = 0xD000000000000029;
        *((_QWORD *)&v248 + 1) = 0x80000001B2335780;
        sub_1B2228890();
        swift_bridgeObjectRelease();
        sub_1B2228890();
        v15 = v248;
        if (!a4)
          goto LABEL_224;
        *(_QWORD *)&v248 = 0;
        *((_QWORD *)&v248 + 1) = 0xE000000000000000;
        sub_1B2229430();
        swift_bridgeObjectRelease();
        *(_QWORD *)&v248 = 0xD00000000000002BLL;
        *((_QWORD *)&v248 + 1) = 0x80000001B23357B0;
        sub_1B1FC0A9C();
        sub_1B2228890();
        swift_bridgeObjectRelease();
        sub_1B2228890();
LABEL_63:
        sub_1B2228890();
        swift_bridgeObjectRelease();
        v66 = *((_QWORD *)&v248 + 1);
        v65 = v248;
        v67 = *(_QWORD **)(v241 + 168);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)(v241 + 168) = v67;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          v67 = sub_1B1C63044(0, v67[2] + 1, 1, v67);
          *(_QWORD *)(v241 + 168) = v67;
        }
        v70 = v67[2];
        v69 = v67[3];
        if (v70 >= v69 >> 1)
        {
          v67 = sub_1B1C63044(v69 > 1, v70 + 1, 1, v67);
          *(_QWORD *)(v241 + 168) = v67;
        }
        v67[2] = v70 + 1;
        v71 = &v67[2 * v70];
        v71[4] = v65;
        goto LABEL_75;
      case 36:
        sub_1B1A02864((uint64_t)v256, (uint64_t)&v248);
        type metadata accessor for simd_quatf(0);
        swift_dynamicCast();
        v241 = v242;
        *(_QWORD *)&v248 = 0;
        *((_QWORD *)&v248 + 1) = 0xE000000000000000;
        sub_1B2229430();
        sub_1B2228890();
        sub_1B2228C98();
        sub_1B2228890();
        sub_1B2228C98();
        sub_1B2228890();
        sub_1B2228C98();
        sub_1B2228890();
        sub_1B2228C98();
        goto LABEL_78;
      case 37:
        sub_1B1A02864((uint64_t)v256, (uint64_t)&v248);
        v72 = MEMORY[0x1E0DEB188];
        sub_1B1AED5E4(0, (unint64_t *)&qword_1ED4B9F38, MEMORY[0x1E0DEB188], (uint64_t)&off_1E63C66D8, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for Curve);
        swift_dynamicCast();
        v73 = *((_QWORD *)&v242 + 1);
        *(_QWORD *)&v239 = v243;
        sub_1B1A02758(0, (unint64_t *)&qword_1ED4BA4C0, v72, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
        v75 = v74;
        v247 = v74;
        *(_QWORD *)&v238 = v242;
        *(_QWORD *)&v246 = v242;
        *(_QWORD *)&v242 = 0;
        *((_QWORD *)&v242 + 1) = 0xE000000000000000;
        v236 = xmmword_1B2285F30;
        memset(v245, 0, 40);
        swift_bridgeObjectRetain();
        sub_1B1C4BD9C((uint64_t)&v246, (uint64_t)v245 + 8);
        v250 = 0u;
        v251 = v245[0];
        v252 = v245[1];
        v253 = *(_QWORD *)&v245[2];
        v248 = v242;
        v249 = xmmword_1B2285F30;
        *(_QWORD *)&v237 = sub_1B1C3F84C(&v248, v241, 0, 0, v240);
        sub_1B1A203C4((uint64_t)&v248);
        swift_bridgeObjectRelease();
        v247 = v75;
        *(_QWORD *)&v246 = v73;
        *(_QWORD *)&v242 = 0;
        *((_QWORD *)&v242 + 1) = 0xE000000000000000;
        v243 = xmmword_1B2285F30;
        memset(v245, 0, 40);
        v244 = 0uLL;
        swift_bridgeObjectRetain();
        sub_1B1C4BD9C((uint64_t)&v246, (uint64_t)v245 + 8);
        v250 = 0u;
        v251 = v245[0];
        v252 = v245[1];
        v253 = *(_QWORD *)&v245[2];
        v248 = v242;
        v249 = xmmword_1B2285F30;
        sub_1B1C3F84C(&v248, v241, 0, 0, v240);
        sub_1B1A203C4((uint64_t)&v248);
        swift_bridgeObjectRelease();
        *(_QWORD *)&v248 = 0;
        *((_QWORD *)&v248 + 1) = 0xE000000000000000;
        sub_1B2229430();
        sub_1B2228890();
        sub_1B2228890();
        swift_bridgeObjectRelease();
        sub_1B2228890();
        sub_1B2228890();
        swift_bridgeObjectRelease();
        sub_1B2228890();
        v76 = *(_QWORD *)(v73 + 16);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        *(_QWORD *)&v242 = v76;
        sub_1B2229A0C();
        sub_1B2228890();
        swift_bridgeObjectRelease();
        sub_1B2228890();
        v15 = v248;
        if (!a4)
          goto LABEL_224;
        *(_QWORD *)&v248 = 0;
        *((_QWORD *)&v248 + 1) = 0xE000000000000000;
        sub_1B2229430();
        swift_bridgeObjectRelease();
        *(_QWORD *)&v248 = 0xD00000000000002ALL;
        *((_QWORD *)&v248 + 1) = 0x80000001B2335610;
        sub_1B1FC0A9C();
        sub_1B2228890();
        swift_bridgeObjectRelease();
        sub_1B2228890();
        sub_1B2228890();
        swift_bridgeObjectRelease();
        v66 = *((_QWORD *)&v248 + 1);
        v77 = v248;
        v78 = *(_QWORD **)(v241 + 168);
        v79 = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)(v241 + 168) = v78;
        if ((v79 & 1) == 0)
        {
          v78 = sub_1B1C63044(0, v78[2] + 1, 1, v78);
          *(_QWORD *)(v241 + 168) = v78;
        }
        v81 = v78[2];
        v80 = v78[3];
        if (v81 >= v80 >> 1)
        {
          v78 = sub_1B1C63044(v80 > 1, v81 + 1, 1, v78);
          *(_QWORD *)(v241 + 168) = v78;
        }
        v78[2] = v81 + 1;
        v71 = &v78[2 * v81];
        v71[4] = v77;
LABEL_75:
        v71[5] = v66;
        goto LABEL_224;
      case 39:
        sub_1B1A02864((uint64_t)v256, (uint64_t)&v248);
        sub_1B1AED5E4(0, (unint64_t *)&qword_1ED4BA5B8, MEMORY[0x1E0DEB418], MEMORY[0x1E0DEB430], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEB848]);
        swift_dynamicCast();
        *(_QWORD *)&v248 = 0;
        *((_QWORD *)&v248 + 1) = 0xE000000000000000;
        sub_1B2229430();
        swift_bridgeObjectRelease();
        *(_QWORD *)&v248 = 0xD000000000000011;
        *((_QWORD *)&v248 + 1) = 0x80000001B2335710;
        sub_1B2229A0C();
        sub_1B2228890();
        swift_bridgeObjectRelease();
        sub_1B2228890();
        *(_QWORD *)&v242 = *((_QWORD *)&v242 + 1);
        sub_1B2229A0C();
        sub_1B2228890();
        swift_bridgeObjectRelease();
        goto LABEL_78;
      case 40:
        sub_1B1A02864((uint64_t)v256, (uint64_t)&v248);
        sub_1B1AED5E4(0, (unint64_t *)&qword_1ED4BA5A8, MEMORY[0x1E0DEB188], MEMORY[0x1E0DEB1B0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEB848]);
        swift_dynamicCast();
        *(_QWORD *)&v248 = 0;
        *((_QWORD *)&v248 + 1) = 0xE000000000000000;
        sub_1B2229430();
        sub_1B2228890();
        sub_1B2228C98();
        sub_1B2228890();
        sub_1B2228C98();
        goto LABEL_78;
      case 43:
        *(_QWORD *)&v242 = 123;
        *((_QWORD *)&v242 + 1) = 0xE100000000000000;
        sub_1B1A02864((uint64_t)v256, (uint64_t)&v248);
        v82 = MEMORY[0x1E0DEAEC8];
        sub_1B1A02758(0, &qword_1EEF5CA48, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
        v83 = swift_dynamicCast();
        MEMORY[0x1E0C80A78](v83, v84);
        v230 = v240;
        v231 = a1;
        v232 = v241;
        v85 = sub_1B1BA8B48((void (*)(_QWORD *__return_ptr, char *))sub_1B1C4BD7C, (uint64_t)v229, v246);
        goto LABEL_90;
      case 44:
        *(_QWORD *)&v242 = 123;
        *((_QWORD *)&v242 + 1) = 0xE100000000000000;
        sub_1B1A02864((uint64_t)v256, (uint64_t)&v248);
        v82 = MEMORY[0x1E0DEAEC8];
        sub_1B1A02758(0, &qword_1ED4BA510, MEMORY[0x1E0DEDE70], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
        v86 = swift_dynamicCast();
        MEMORY[0x1E0C80A78](v86, v87);
        v230 = v240;
        v231 = a1;
        v232 = v241;
        v85 = sub_1B1BA8C50((void (*)(_QWORD *__return_ptr, char *))sub_1B1C4BD54, (uint64_t)v229, v246);
        goto LABEL_90;
      case 45:
        *(_QWORD *)&v242 = 123;
        *((_QWORD *)&v242 + 1) = 0xE100000000000000;
        sub_1B1A02864((uint64_t)v256, (uint64_t)&v248);
        v82 = MEMORY[0x1E0DEAEC8];
        sub_1B1A02758(0, &qword_1ED4BA528, MEMORY[0x1E0DEE068], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
        v88 = swift_dynamicCast();
        MEMORY[0x1E0C80A78](v88, v89);
        v230 = v240;
        v231 = a1;
        v232 = v241;
        v85 = sub_1B1BA8C64((void (*)(_QWORD *__return_ptr, __int16 *))sub_1B1C4BD2C, (uint64_t)v229, v246);
        goto LABEL_90;
      case 46:
        *(_QWORD *)&v242 = 123;
        *((_QWORD *)&v242 + 1) = 0xE100000000000000;
        sub_1B1A02864((uint64_t)v256, (uint64_t)&v248);
        v82 = MEMORY[0x1E0DEAEC8];
        sub_1B1A02758(0, &qword_1EEF5CA40, MEMORY[0x1E0DEE0F8], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
        v90 = swift_dynamicCast();
        MEMORY[0x1E0C80A78](v90, v91);
        v230 = v240;
        v231 = a1;
        v232 = v241;
        v85 = sub_1B1BA8C78((void (*)(_QWORD *__return_ptr, int *))sub_1B1C4BD04, (uint64_t)v229, v246);
        goto LABEL_90;
      case 47:
        *(_QWORD *)&v242 = 123;
        *((_QWORD *)&v242 + 1) = 0xE100000000000000;
        sub_1B1A02864((uint64_t)v256, (uint64_t)&v248);
        v82 = MEMORY[0x1E0DEAEC8];
        sub_1B1A02758(0, &qword_1EEF5CA38, MEMORY[0x1E0DEE190], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
        v92 = swift_dynamicCast();
        MEMORY[0x1E0C80A78](v92, v93);
        v230 = v240;
        v231 = a1;
        v232 = v241;
        v85 = sub_1B1BA8C8C((void (*)(_QWORD *__return_ptr, uint64_t *))sub_1B1C4BCDC, (uint64_t)v229, v246);
        goto LABEL_90;
      case 48:
        *(_QWORD *)&v242 = 123;
        *((_QWORD *)&v242 + 1) = 0xE100000000000000;
        sub_1B1A02864((uint64_t)v256, (uint64_t)&v248);
        v82 = MEMORY[0x1E0DEAEC8];
        sub_1B1A02758(0, &qword_1EEF5CA30, MEMORY[0x1E0DEDA70], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
        v94 = swift_dynamicCast();
        MEMORY[0x1E0C80A78](v94, v95);
        v230 = v240;
        v231 = a1;
        v232 = v241;
        v85 = sub_1B1BA8C50((void (*)(_QWORD *__return_ptr, char *))sub_1B1C4BCB4, (uint64_t)v229, v246);
        goto LABEL_90;
      case 49:
        *(_QWORD *)&v242 = 123;
        *((_QWORD *)&v242 + 1) = 0xE100000000000000;
        sub_1B1A02864((uint64_t)v256, (uint64_t)&v248);
        v82 = MEMORY[0x1E0DEAEC8];
        sub_1B1A02758(0, &qword_1EEF5CA28, MEMORY[0x1E0DEDB58], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
        v96 = swift_dynamicCast();
        MEMORY[0x1E0C80A78](v96, v97);
        v230 = v240;
        v231 = a1;
        v232 = v241;
        v85 = sub_1B1BA8C64((void (*)(_QWORD *__return_ptr, __int16 *))sub_1B1C4BC8C, (uint64_t)v229, v246);
        goto LABEL_90;
      case 50:
        *(_QWORD *)&v242 = 123;
        *((_QWORD *)&v242 + 1) = 0xE100000000000000;
        sub_1B1A02864((uint64_t)v256, (uint64_t)&v248);
        v82 = MEMORY[0x1E0DEAEC8];
        sub_1B1A02758(0, &qword_1EEF5CA20, MEMORY[0x1E0DEDBC8], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
        v98 = swift_dynamicCast();
        MEMORY[0x1E0C80A78](v98, v99);
        v230 = v240;
        v231 = a1;
        v232 = v241;
        v85 = sub_1B1BA8C78((void (*)(_QWORD *__return_ptr, int *))sub_1B1C4BC64, (uint64_t)v229, v246);
        goto LABEL_90;
      case 51:
        *(_QWORD *)&v242 = 123;
        *((_QWORD *)&v242 + 1) = 0xE100000000000000;
        sub_1B1A02864((uint64_t)v256, (uint64_t)&v248);
        v82 = MEMORY[0x1E0DEAEC8];
        sub_1B1A02758(0, &qword_1EEF5CA18, MEMORY[0x1E0DEDC60], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
        v100 = swift_dynamicCast();
        MEMORY[0x1E0C80A78](v100, v101);
        v230 = v240;
        v231 = a1;
        v232 = v241;
        v85 = sub_1B1BA8C8C((void (*)(_QWORD *__return_ptr, uint64_t *))sub_1B1C4BC3C, (uint64_t)v229, v246);
        goto LABEL_90;
      case 52:
        *(_QWORD *)&v242 = 123;
        *((_QWORD *)&v242 + 1) = 0xE100000000000000;
        sub_1B1A02864((uint64_t)v256, (uint64_t)&v248);
        v82 = MEMORY[0x1E0DEAEC8];
        sub_1B1A02758(0, &qword_1ED4BA4D0, MEMORY[0x1E0DEB418], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
        v102 = swift_dynamicCast();
        MEMORY[0x1E0C80A78](v102, v103);
        v230 = v240;
        v231 = a1;
        v232 = v241;
        v85 = sub_1B1BA8C8C((void (*)(_QWORD *__return_ptr, uint64_t *))sub_1B1C4BC14, (uint64_t)v229, v246);
        goto LABEL_90;
      case 53:
        *(_QWORD *)&v242 = 123;
        *((_QWORD *)&v242 + 1) = 0xE100000000000000;
        sub_1B1A02864((uint64_t)v256, (uint64_t)&v248);
        v82 = MEMORY[0x1E0DEAEC8];
        sub_1B1A02758(0, (unint64_t *)&qword_1ED4BA4C0, MEMORY[0x1E0DEB188], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
        v104 = swift_dynamicCast();
        MEMORY[0x1E0C80A78](v104, v105);
        v230 = v240;
        v231 = a1;
        v232 = v241;
        v85 = sub_1B1BA90B0((void (*)(_QWORD *__return_ptr, int *))sub_1B1C4BBF4, (uint64_t)v229, v246);
LABEL_90:
        v106 = v85;
        swift_bridgeObjectRelease();
        *(_QWORD *)&v248 = v106;
        v107 = MEMORY[0x1E0DEA968];
        v108 = v82;
        goto LABEL_95;
      case 54:
        *(_QWORD *)&v242 = 123;
        *((_QWORD *)&v242 + 1) = 0xE100000000000000;
        sub_1B1A02864((uint64_t)v256, (uint64_t)&v248);
        sub_1B1B9A650(0, (unint64_t *)&qword_1EEF5B478, &qword_1ED4BB080, MEMORY[0x1E0DEDD20]);
        v109 = swift_dynamicCast();
        MEMORY[0x1E0C80A78](v109, v110);
        v230 = v240;
        v231 = a1;
        v232 = v241;
        v111 = sub_1B1BA91B8((void (*)(_QWORD *__return_ptr, uint64_t *))sub_1B1C4BBD4, (uint64_t)v229, v246);
        goto LABEL_94;
      case 55:
        *(_QWORD *)&v242 = 123;
        *((_QWORD *)&v242 + 1) = 0xE100000000000000;
        sub_1B1A02864((uint64_t)v256, (uint64_t)&v248);
        sub_1B1B9A650(0, (unint64_t *)&qword_1EEF5B468, (unint64_t *)&qword_1ED4BB0A0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50]);
        v112 = swift_dynamicCast();
        MEMORY[0x1E0C80A78](v112, v113);
        v230 = v240;
        v231 = a1;
        v232 = v241;
        v111 = sub_1B1BA92C0((void (*)(_QWORD *__return_ptr, __int128 *))sub_1B1C4BBA4, (uint64_t)v229, v246);
        goto LABEL_94;
      case 56:
        *(_QWORD *)&v242 = 123;
        *((_QWORD *)&v242 + 1) = 0xE100000000000000;
        sub_1B1A02864((uint64_t)v256, (uint64_t)&v248);
        sub_1B1B9A650(0, (unint64_t *)&qword_1ED4BA500, (unint64_t *)&qword_1ED4BB0E0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDDA8]);
        v114 = swift_dynamicCast();
        MEMORY[0x1E0C80A78](v114, v115);
        v230 = v240;
        v231 = a1;
        v232 = v241;
        v111 = sub_1B1BA92C0((void (*)(_QWORD *__return_ptr, __int128 *))sub_1B1C4BB74, (uint64_t)v229, v246);
LABEL_94:
        v116 = v111;
        swift_bridgeObjectRelease();
        *(_QWORD *)&v248 = v116;
        v107 = MEMORY[0x1E0DEA968];
        v108 = MEMORY[0x1E0DEAEC8];
LABEL_95:
        sub_1B1A02758(0, (unint64_t *)&qword_1ED4BA490, v107, (uint64_t (*)(_QWORD, uint64_t))v108);
        sub_1B19FA230();
        sub_1B2228644();
        swift_bridgeObjectRelease();
        sub_1B2228890();
        swift_bridgeObjectRelease();
        goto LABEL_96;
      default:
        if (*(_BYTE *)(v241 + 64) == 1)
        {
          if (qword_1ED4BF430 != -1)
            swift_once();
          *(_QWORD *)&v248 = 0;
          *((_QWORD *)&v248 + 1) = 0xE000000000000000;
          swift_retain();
          sub_1B2229430();
          v242 = v248;
          sub_1B2228890();
          *(_QWORD *)&v248 = v11;
          *((_QWORD *)&v248 + 1) = v10;
          *(_QWORD *)&v249 = v13;
          *((_QWORD *)&v249 + 1) = v12;
          *(_QWORD *)&v250 = v14;
          sub_1B22295EC();
          v60 = sub_1B2228E9C();
          if (qword_1ED4BF658 != -1)
            swift_once();
          *(_QWORD *)&v248 = 0;
          swift_retain();
          sub_1B1F1AD70(v60, (uint64_t *)&v248, v242, *((uint64_t *)&v242 + 1));
          swift_release();
          swift_bridgeObjectRelease();
          swift_release();
        }
        v15 = 0x3E524F5252453CLL;
        _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v256);
        return v15;
    }
  }
  else
  {
    sub_1B1A0DD70((uint64_t)&v248);
    v16 = a1[3];
    if (v16 > 0x3A)
    {
      return 0xD00000000000001FLL;
    }
    else if (((1 << v16) & 0x7FFFFBC5FFFFFFFLL) != 0)
    {
      v15 = 0x3E524F5252453CLL;
      if (*(_BYTE *)(a2 + 64) == 1)
      {
        v17 = a1[2];
        v18 = a1[4];
        v19 = a1[5];
        v20 = a1[6];
        if (qword_1ED4BF430 != -1)
          swift_once();
        *(_QWORD *)&v248 = 0;
        *((_QWORD *)&v248 + 1) = 0xE000000000000000;
        swift_retain();
        sub_1B2229430();
        v242 = v248;
        sub_1B2228890();
        *(_QWORD *)&v248 = v17;
        *((_QWORD *)&v248 + 1) = v16;
        *(_QWORD *)&v249 = v18;
        *((_QWORD *)&v249 + 1) = v19;
        *(_QWORD *)&v250 = v20;
        sub_1B22295EC();
        sub_1B2228890();
        v21 = sub_1B2228E9C();
        if (qword_1ED4BF658 != -1)
          swift_once();
        *(_QWORD *)&v248 = 0;
        swift_retain();
        sub_1B1F1AD70(v21, (uint64_t *)&v248, v242, *((uint64_t *)&v242 + 1));
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
      }
    }
    else
    {
      return 48;
    }
  }
  return v15;
}

uint64_t sub_1B1C44C28@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  __int128 v13;
  _OWORD v14[2];
  _BYTE v15[40];
  char v16[24];
  uint64_t v17;
  _OWORD v18[5];
  uint64_t v19;
  uint64_t v20[5];
  char v21[40];

  v8 = *a1;
  v17 = MEMORY[0x1E0DEAFA0];
  v16[0] = v8;
  sub_1B19FA278(a3 + 16, (uint64_t)v21);
  sub_1B1E03A80(v20);
  memset(&v15[8], 0, 32);
  *(_QWORD *)&v13 = 0;
  *((_QWORD *)&v13 + 1) = 0xE000000000000000;
  sub_1B19FA278((uint64_t)v20, (uint64_t)v14);
  sub_1B1C4BD9C((uint64_t)v16, (uint64_t)&v15[8]);
  v18[3] = *(_OWORD *)v15;
  v18[4] = *(_OWORD *)&v15[16];
  v19 = *(_QWORD *)&v15[32];
  v18[0] = v13;
  v18[1] = v14[0];
  v18[2] = v14[1];
  v9 = sub_1B1C3F84C(v18, a4, 0, 0, a2);
  v11 = v10;
  sub_1B1A203C4((uint64_t)v18);
  result = swift_bridgeObjectRelease();
  *a5 = v9;
  a5[1] = v11;
  return result;
}

uint64_t sub_1B1C44D34@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X5>, uint64_t *a6@<X8>)
{
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  __int128 v14;
  _OWORD v15[2];
  _BYTE v16[40];
  char v17[24];
  uint64_t v18;
  _OWORD v19[5];
  uint64_t v20;
  uint64_t v21[5];
  char v22[40];

  v9 = *a1;
  v18 = a5;
  v17[0] = v9;
  sub_1B19FA278(a3 + 16, (uint64_t)v22);
  sub_1B1E03A80(v21);
  memset(&v16[8], 0, 32);
  *(_QWORD *)&v14 = 0;
  *((_QWORD *)&v14 + 1) = 0xE000000000000000;
  sub_1B19FA278((uint64_t)v21, (uint64_t)v15);
  sub_1B1C4BD9C((uint64_t)v17, (uint64_t)&v16[8]);
  v19[3] = *(_OWORD *)v16;
  v19[4] = *(_OWORD *)&v16[16];
  v20 = *(_QWORD *)&v16[32];
  v19[0] = v14;
  v19[1] = v15[0];
  v19[2] = v15[1];
  v10 = sub_1B1C3F84C(v19, a4, 0, 0, a2);
  v12 = v11;
  sub_1B1A203C4((uint64_t)v19);
  result = swift_bridgeObjectRelease();
  *a6 = v10;
  a6[1] = v12;
  return result;
}

uint64_t sub_1B1C44E38@<X0>(__int16 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X5>, uint64_t *a6@<X8>)
{
  __int16 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  __int128 v14;
  _OWORD v15[2];
  _BYTE v16[40];
  __int16 v17[12];
  uint64_t v18;
  _OWORD v19[5];
  uint64_t v20;
  uint64_t v21[5];
  char v22[40];

  v9 = *a1;
  v18 = a5;
  v17[0] = v9;
  sub_1B19FA278(a3 + 16, (uint64_t)v22);
  sub_1B1E03A80(v21);
  memset(&v16[8], 0, 32);
  *(_QWORD *)&v14 = 0;
  *((_QWORD *)&v14 + 1) = 0xE000000000000000;
  sub_1B19FA278((uint64_t)v21, (uint64_t)v15);
  sub_1B1C4BD9C((uint64_t)v17, (uint64_t)&v16[8]);
  v19[3] = *(_OWORD *)v16;
  v19[4] = *(_OWORD *)&v16[16];
  v20 = *(_QWORD *)&v16[32];
  v19[0] = v14;
  v19[1] = v15[0];
  v19[2] = v15[1];
  v10 = sub_1B1C3F84C(v19, a4, 0, 0, a2);
  v12 = v11;
  sub_1B1A203C4((uint64_t)v19);
  result = swift_bridgeObjectRelease();
  *a6 = v10;
  a6[1] = v12;
  return result;
}

uint64_t sub_1B1C44F3C@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X5>, uint64_t *a6@<X8>)
{
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  __int128 v14;
  _OWORD v15[2];
  _BYTE v16[40];
  int v17[6];
  uint64_t v18;
  _OWORD v19[5];
  uint64_t v20;
  uint64_t v21[5];
  char v22[40];

  v9 = *a1;
  v18 = a5;
  v17[0] = v9;
  sub_1B19FA278(a3 + 16, (uint64_t)v22);
  sub_1B1E03A80(v21);
  memset(&v16[8], 0, 32);
  *(_QWORD *)&v14 = 0;
  *((_QWORD *)&v14 + 1) = 0xE000000000000000;
  sub_1B19FA278((uint64_t)v21, (uint64_t)v15);
  sub_1B1C4BD9C((uint64_t)v17, (uint64_t)&v16[8]);
  v19[3] = *(_OWORD *)v16;
  v19[4] = *(_OWORD *)&v16[16];
  v20 = *(_QWORD *)&v16[32];
  v19[0] = v14;
  v19[1] = v15[0];
  v19[2] = v15[1];
  v10 = sub_1B1C3F84C(v19, a4, 0, 0, a2);
  v12 = v11;
  sub_1B1A203C4((uint64_t)v19);
  result = swift_bridgeObjectRelease();
  *a6 = v10;
  a6[1] = v12;
  return result;
}

uint64_t sub_1B1C45040@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X5>, uint64_t *a6@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  __int128 v14;
  _OWORD v15[2];
  _BYTE v16[40];
  _QWORD v17[4];
  _OWORD v18[5];
  uint64_t v19;
  uint64_t v20[5];
  char v21[40];

  v9 = *a1;
  v17[3] = a5;
  v17[0] = v9;
  sub_1B19FA278(a3 + 16, (uint64_t)v21);
  sub_1B1E03A80(v20);
  memset(&v16[8], 0, 32);
  *(_QWORD *)&v14 = 0;
  *((_QWORD *)&v14 + 1) = 0xE000000000000000;
  sub_1B19FA278((uint64_t)v20, (uint64_t)v15);
  sub_1B1C4BD9C((uint64_t)v17, (uint64_t)&v16[8]);
  v18[3] = *(_OWORD *)v16;
  v18[4] = *(_OWORD *)&v16[16];
  v19 = *(_QWORD *)&v16[32];
  v18[0] = v14;
  v18[1] = v15[0];
  v18[2] = v15[1];
  v10 = sub_1B1C3F84C(v18, a4, 0, 0, a2);
  v12 = v11;
  sub_1B1A203C4((uint64_t)v18);
  result = swift_bridgeObjectRelease();
  *a6 = v10;
  a6[1] = v12;
  return result;
}

uint64_t sub_1B1C45144@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  __int128 v13;
  _OWORD v14[2];
  _BYTE v15[40];
  int v16[6];
  uint64_t v17;
  _OWORD v18[5];
  uint64_t v19;
  uint64_t v20[5];
  char v21[40];

  v8 = *a1;
  v17 = MEMORY[0x1E0DEB188];
  v16[0] = v8;
  sub_1B19FA278(a3 + 16, (uint64_t)v21);
  sub_1B1E03A80(v20);
  memset(&v15[8], 0, 32);
  *(_QWORD *)&v13 = 0;
  *((_QWORD *)&v13 + 1) = 0xE000000000000000;
  sub_1B19FA278((uint64_t)v20, (uint64_t)v14);
  sub_1B1C4BD9C((uint64_t)v16, (uint64_t)&v15[8]);
  v18[3] = *(_OWORD *)v15;
  v18[4] = *(_OWORD *)&v15[16];
  v19 = *(_QWORD *)&v15[32];
  v18[0] = v13;
  v18[1] = v14[0];
  v18[2] = v14[1];
  v9 = sub_1B1C3F84C(v18, a4, 0, 0, a2);
  v11 = v10;
  sub_1B1A203C4((uint64_t)v18);
  result = swift_bridgeObjectRelease();
  *a5 = v9;
  a5[1] = v11;
  return result;
}

uint64_t sub_1B1C45250@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  __int128 v15;
  _OWORD v16[2];
  _BYTE v17[40];
  _QWORD v18[4];
  _OWORD v19[5];
  uint64_t v20;
  uint64_t v21[5];
  char v22[40];

  v9 = *a1;
  sub_1B19F8E54(0, &qword_1ED4BB080, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], MEMORY[0x1E0DEDD20]);
  v18[3] = v10;
  v18[0] = v9;
  sub_1B19FA278(a3 + 16, (uint64_t)v22);
  sub_1B1E03A80(v21);
  memset(&v17[8], 0, 32);
  *(_QWORD *)&v15 = 0;
  *((_QWORD *)&v15 + 1) = 0xE000000000000000;
  sub_1B19FA278((uint64_t)v21, (uint64_t)v16);
  sub_1B1C4BD9C((uint64_t)v18, (uint64_t)&v17[8]);
  v19[3] = *(_OWORD *)v17;
  v19[4] = *(_OWORD *)&v17[16];
  v20 = *(_QWORD *)&v17[32];
  v19[0] = v15;
  v19[1] = v16[0];
  v19[2] = v16[1];
  v11 = sub_1B1C3F84C(v19, a4, 0, 0, a2);
  v13 = v12;
  sub_1B1A203C4((uint64_t)v19);
  result = swift_bridgeObjectRelease();
  *a5 = v11;
  a5[1] = v13;
  return result;
}

uint64_t sub_1B1C45388@<X0>(__int128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t *a5@<X5>, uint64_t (*a6)(uint64_t, uint64_t, uint64_t)@<X6>, uint64_t *a7@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  __int128 v16;
  __int128 v17;
  _OWORD v18[2];
  _BYTE v19[40];
  _QWORD v20[4];
  _OWORD v21[5];
  uint64_t v22;
  uint64_t v23[5];
  char v24[40];

  v16 = *a1;
  sub_1B19F8E54(0, a5, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], a6);
  v20[3] = v11;
  v20[0] = swift_allocObject();
  *(_OWORD *)(v20[0] + 16) = v16;
  sub_1B19FA278(a3 + 16, (uint64_t)v24);
  sub_1B1E03A80(v23);
  memset(&v19[8], 0, 32);
  *(_QWORD *)&v17 = 0;
  *((_QWORD *)&v17 + 1) = 0xE000000000000000;
  sub_1B19FA278((uint64_t)v23, (uint64_t)v18);
  sub_1B1C4BD9C((uint64_t)v20, (uint64_t)&v19[8]);
  v21[3] = *(_OWORD *)v19;
  v21[4] = *(_OWORD *)&v19[16];
  v22 = *(_QWORD *)&v19[32];
  v21[0] = v17;
  v21[1] = v18[0];
  v21[2] = v18[1];
  v12 = sub_1B1C3F84C(v21, a4, 0, 0, a2);
  v14 = v13;
  sub_1B1A203C4((uint64_t)v21);
  result = swift_bridgeObjectRelease();
  *a7 = v12;
  a7[1] = v14;
  return result;
}

unint64_t sub_1B1C454D0(uint64_t a1)
{
  unint64_t result;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6[5];
  uint64_t v7;
  unint64_t v8;
  _BYTE v9[8];
  uint64_t v10;

  sub_1B19FA278(a1, (uint64_t)v9);
  result = 1819242306;
  switch(v10)
  {
    case 0:
      return result;
    case 1:
      result = 0x38746E4955;
      break;
    case 2:
      result = 0x3631746E4955;
      break;
    case 3:
      result = 0x3233746E4955;
      break;
    case 4:
      result = 0x3436746E4955;
      break;
    case 5:
      result = 947154505;
      break;
    case 6:
      result = 0x3631746E49;
      break;
    case 7:
      result = 0x3233746E49;
      break;
    case 8:
      result = 0x3436746E49;
      break;
    case 9:
    case 41:
      result = 7630409;
      break;
    case 10:
      result = 0x6E69755F646D6973;
      break;
    case 11:
      result = 0x6E69755F646D6973;
      break;
    case 12:
      result = 0x6E69755F646D6973;
      break;
    case 13:
      result = 0x74616F6C46;
      break;
    case 14:
      result = 0x6F6C665F646D6973;
      break;
    case 15:
      result = 0x6F6C665F646D6973;
      break;
    case 16:
      result = 0x6F6C665F646D6973;
      break;
    case 17:
      result = 0x6F6C665F646D6973;
      break;
    case 18:
      result = 0x6F6C665F646D6973;
      break;
    case 19:
      result = 0x6F6C665F646D6973;
      break;
    case 20:
      result = 0x6F6C665F646D6973;
      break;
    case 21:
      result = 0x6F6C665F646D6973;
      break;
    case 22:
      result = 0x6F6C665F646D6973;
      break;
    case 23:
      result = 0x6F6C665F646D6973;
      break;
    case 24:
      result = 0x6F6C665F646D6973;
      break;
    case 25:
      result = 0x6F6C665F646D6973;
      break;
    case 26:
      result = 0x656C62756F44;
      break;
    case 27:
      result = 0x3855726F6C6F43;
      break;
    case 28:
    case 29:
    case 31:
    case 32:
    case 33:
    case 37:
    case 38:
      result = 0xD000000000000010;
      break;
    case 34:
    case 35:
      result = 0x676E69727453;
      break;
    case 36:
      result = 0x6175715F646D6973;
      break;
    case 39:
      result = 0x6E493C65676E6152;
      break;
    case 40:
      result = 0x6C463C65676E6152;
      break;
    case 43:
      result = 0x5D6C6F6F425BLL;
      break;
    case 44:
      result = 0x5D38746E49555BLL;
      break;
    case 45:
      result = 0x5D3631746E49555BLL;
      break;
    case 46:
      result = 0x5D3233746E49555BLL;
      break;
    case 47:
      result = 0x5D3436746E49555BLL;
      break;
    case 48:
      result = 0x5D38746E495BLL;
      break;
    case 49:
      result = 0x5D3631746E495BLL;
      break;
    case 50:
      result = 0x5D3233746E495BLL;
      break;
    case 51:
      result = 0x5D3436746E495BLL;
      break;
    case 52:
      result = 0x5D746E495BLL;
      break;
    case 53:
      result = 0x5D74616F6C465BLL;
      break;
    case 54:
    case 55:
    case 56:
      result = 0x6C665F646D69735BLL;
      break;
    case 57:
    case 58:
      result = 0x5D676E697274535BLL;
      break;
    default:
      if (qword_1ED4BF430 != -1)
        swift_once();
      v6[0] = 0;
      v6[1] = 0xE000000000000000;
      swift_retain();
      sub_1B2229430();
      v7 = 0;
      v8 = 0xE000000000000000;
      sub_1B2228890();
      sub_1B19FA278(a1, (uint64_t)v6);
      sub_1B22295EC();
      v3 = v7;
      v4 = v8;
      v5 = sub_1B2228E90();
      if (qword_1ED4BF658 != -1)
        swift_once();
      v6[0] = 0;
      swift_retain();
      sub_1B1F1AD70(v5, v6, v3, v4);
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      result = 0xD000000000000013;
      break;
  }
  return result;
}

uint64_t sub_1B1C45B38(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9[5];
  uint64_t v10;
  unint64_t v11;
  _BYTE v12[8];
  uint64_t v13;

  sub_1B19FA278(a1, (uint64_t)v12);
  v2 = 1819242338;
  switch(v13)
  {
    case 0:
      return v2;
    case 1:
      return 0x745F38746E6975;
    case 2:
      return 0x745F3631746E6975;
    case 3:
      return 0x745F3233746E6975;
    case 4:
      return 0x745F3436746E6975;
    case 5:
      return 0x745F38746E69;
    case 6:
      return 0x745F3631746E69;
    case 7:
      return 0x745F3233746E69;
    case 8:
    case 9:
      return 0x745F3436746E69;
    case 10:
      return 0x32746E6975;
    case 11:
      return 0x33746E6975;
    case 12:
      return 0x34746E6975;
    case 13:
    case 26:
      return 0x74616F6C66;
    case 14:
      return 0x3274616F6C66;
    case 15:
      return 0x3374616F6C66;
    case 16:
    case 36:
      return 0x3474616F6C66;
    case 17:
      return 0x32783274616F6C66;
    case 18:
      return 0x33783274616F6C66;
    case 19:
      return 0x34783274616F6C66;
    case 20:
      return 0x32783374616F6C66;
    case 21:
      return 0x33783374616F6C66;
    case 22:
      return 0x34783374616F6C66;
    case 23:
      return 0x32783474616F6C66;
    case 24:
      return 0x33783474616F6C66;
    case 25:
      return 0x34783474616F6C66;
    case 29:
    case 31:
    case 38:
      return 0x706D61735F786676;
    case 32:
    case 33:
      return 0x706D61735F786676;
    case 39:
      return 0x5F746E695F786676;
    case 40:
      return 0x616F6C665F786676;
    case 41:
      return 0x745F657A6973;
    case 43:
      return 0x2A6C6F6F62;
    case 44:
      return 0x2A745F38746E6975;
    case 45:
      v6 = 0x3631746E6975;
      return v6 & 0xFFFFFFFFFFFFLL | 0x745F000000000000;
    case 46:
      v6 = 0x3233746E6975;
      return v6 & 0xFFFFFFFFFFFFLL | 0x745F000000000000;
    case 47:
      v6 = 0x3436746E6975;
      return v6 & 0xFFFFFFFFFFFFLL | 0x745F000000000000;
    case 48:
      v7 = 0x745F38746E69;
      goto LABEL_50;
    case 49:
      return 0x2A745F3631746E69;
    case 50:
      return 0x2A745F3233746E69;
    case 51:
    case 52:
      return 0x2A745F3436746E69;
    case 53:
      return 0x2A74616F6C66;
    case 54:
      v7 = 0x3274616F6C66;
      goto LABEL_50;
    case 55:
      v7 = 0x3374616F6C66;
      goto LABEL_50;
    case 56:
      v7 = 0x3474616F6C66;
LABEL_50:
      v2 = v7 & 0xFFFFFFFFFFFFLL | 0x2A000000000000;
      break;
    default:
      if (qword_1ED4BF430 != -1)
        swift_once();
      v2 = 0xD000000000000013;
      v9[0] = 0;
      v9[1] = 0xE000000000000000;
      swift_retain();
      sub_1B2229430();
      v10 = 0;
      v11 = 0xE000000000000000;
      sub_1B2228890();
      sub_1B19FA278(a1, (uint64_t)v9);
      sub_1B22295EC();
      v3 = v10;
      v4 = v11;
      v5 = sub_1B2228E90();
      if (qword_1ED4BF658 != -1)
        swift_once();
      v9[0] = 0;
      swift_retain();
      sub_1B1F1AD70(v5, v9, v3, v4);
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      break;
  }
  return v2;
}

uint64_t sub_1B1C460C0(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8[5];
  uint64_t v9;
  unint64_t v10;
  _BYTE v11[8];
  uint64_t v12;

  sub_1B19FA278(a1, (uint64_t)v11);
  result = 1819242338;
  switch(v12)
  {
    case 0:
      return result;
    case 1:
      return 0x745F38746E6975;
    case 2:
      return 0x745F3631746E6975;
    case 3:
      return 0x745F3233746E6975;
    case 4:
      return 0x745F3436746E6975;
    case 5:
      return 0x745F38746E69;
    case 6:
      return 0x745F3631746E69;
    case 7:
      return 0x745F3233746E69;
    case 8:
    case 9:
      return 0x745F3436746E69;
    case 10:
      return 0x6E69755F646D6973;
    case 11:
      return 0x6E69755F646D6973;
    case 12:
      return 0x6E69755F646D6973;
    case 13:
      return 0x74616F6C66;
    case 14:
      return 0x6F6C665F646D6973;
    case 15:
      return 0x6F6C665F646D6973;
    case 16:
      return 0x6F6C665F646D6973;
    case 17:
      return 0x6F6C665F646D6973;
    case 18:
      return 0x6F6C665F646D6973;
    case 19:
      return 0x6F6C665F646D6973;
    case 20:
      return 0x6F6C665F646D6973;
    case 21:
      return 0x6F6C665F646D6973;
    case 22:
      return 0x6F6C665F646D6973;
    case 23:
      return 0x6F6C665F646D6973;
    case 24:
      return 0x6F6C665F646D6973;
    case 25:
      return 0x6F6C665F646D6973;
    case 26:
      return 0x656C62756F64;
    case 28:
    case 29:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 37:
    case 38:
      v3 = 1684631414;
      return v3 & 0xFFFF0000FFFFFFFFLL | 0x2A00000000;
    case 36:
      return 0x6175715F646D6973;
    case 39:
      return 0x5F746E695F786676;
    case 40:
      return 0x616F6C665F786676;
    case 41:
      return 0x745F657A6973;
    case 43:
      v3 = 1819242338;
      return v3 & 0xFFFF0000FFFFFFFFLL | 0x2A00000000;
    case 44:
      return 0x2A745F38746E6975;
    case 45:
      v7 = 0x3631746E6975;
      goto LABEL_46;
    case 46:
      v7 = 0x3233746E6975;
      goto LABEL_46;
    case 47:
      v7 = 0x3436746E6975;
LABEL_46:
      result = v7 & 0xFFFFFFFFFFFFLL | 0x745F000000000000;
      break;
    case 48:
      result = 0x2A745F38746E69;
      break;
    case 49:
      result = 0x2A745F3631746E69;
      break;
    case 50:
      result = 0x2A745F3233746E69;
      break;
    case 51:
    case 52:
      result = 0x2A745F3436746E69;
      break;
    case 53:
      result = 0x2A74616F6C66;
      break;
    case 54:
      result = 0x6F6C665F646D6973;
      break;
    case 55:
      result = 0x6F6C665F646D6973;
      break;
    case 56:
      result = 0x6F6C665F646D6973;
      break;
    default:
      if (qword_1ED4BF430 != -1)
        swift_once();
      v8[0] = 0;
      v8[1] = 0xE000000000000000;
      swift_retain();
      sub_1B2229430();
      v9 = 0;
      v10 = 0xE000000000000000;
      sub_1B2228890();
      sub_1B19FA278(a1, (uint64_t)v8);
      sub_1B22295EC();
      v4 = v9;
      v5 = v10;
      v6 = sub_1B2228E90();
      if (qword_1ED4BF658 != -1)
        swift_once();
      v8[0] = 0;
      swift_retain();
      sub_1B1F1AD70(v6, v8, v4, v5);
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      result = 0x5F4E574F4E4B4E55;
      break;
  }
  return result;
}

uint64_t sub_1B1C46718(uint64_t a1)
{
  return sub_1B1C46750(a1, &qword_1EEF57330, &qword_1EEF5CA08);
}

uint64_t sub_1B1C46734(uint64_t a1)
{
  return sub_1B1C46750(a1, qword_1EEF57338, &qword_1EEF5CA10);
}

uint64_t sub_1B1C46750(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  _QWORD v26[5];
  _QWORD v27[5];
  _QWORD v28[5];

  if (*a2 != -1)
    swift_once();
  v4 = *a3;
  v5 = *(_QWORD *)(v4 + 16);
  if (v5)
  {
    v6 = v28;
    sub_1B19FA278(v4 + 32, (uint64_t)v28);
    swift_bridgeObjectRetain_n();
    sub_1B19F8C58(v28, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19FA2B4);
    v7 = sub_1B1E03DBC();
    v9 = v8;
    if (v7 == sub_1B1E03DBC() && v9 == v10)
      goto LABEL_6;
    v12 = sub_1B2229D24();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1B19F8C58(v28, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19F9FEC);
    if ((v12 & 1) != 0)
      goto LABEL_9;
    if (v5 != 1)
    {
      v6 = v27;
      sub_1B19FA278(v4 + 72, (uint64_t)v27);
      sub_1B19F8C58(v27, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19FA2B4);
      v14 = sub_1B1E03DBC();
      v16 = v15;
      if (v14 == sub_1B1E03DBC() && v16 == v17)
      {
LABEL_6:
        swift_bridgeObjectRelease_n();
        sub_1B19F8C58(v6, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19F9FEC);
LABEL_9:
        v11 = 1;
LABEL_10:
        swift_bridgeObjectRelease_n();
        return v11;
      }
      v18 = sub_1B2229D24();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1B19F8C58(v27, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19F9FEC);
      if ((v18 & 1) != 0)
        goto LABEL_9;
      v19 = v5 - 2;
      if (v5 != 2)
      {
        v20 = v4 + 112;
        while (1)
        {
          v6 = v26;
          sub_1B19FA278(v20, (uint64_t)v26);
          sub_1B19F8C58(v26, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19FA2B4);
          v21 = sub_1B1E03DBC();
          v23 = v22;
          if (v21 == sub_1B1E03DBC() && v23 == v24)
            goto LABEL_6;
          v25 = sub_1B2229D24();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          sub_1B19F8C58(v26, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19F9FEC);
          if ((v25 & 1) != 0)
            goto LABEL_9;
          v11 = 0;
          v20 += 40;
          if (!--v19)
            goto LABEL_10;
        }
      }
    }
    v11 = 0;
    goto LABEL_10;
  }
  return 0;
}

uint64_t sub_1B1C469E4(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  uint64_t v11;
  _BYTE v12[8];
  unint64_t v13;

  sub_1B19FA278(a3, (uint64_t)v12);
  if (a4)
  {
    if (a4 != 1)
    {
      v11 = 8287;
      sub_1B2228890();
      sub_1B2228890();
      sub_1B1C39C20(a3, 2u);
      sub_1B2228890();
      swift_bridgeObjectRelease();
      return v11;
    }
    v6 = v13 > 0x26 || ((1 << v13) & 0x43A0000000) == 0;
    v7 = 0x20646165726874;
    if (v6)
      v7 = 0;
    v11 = v7;
    v8 = a3;
    v9 = 1;
  }
  else
  {
    v11 = 0x2074736E6F63;
    v8 = a3;
    v9 = 0;
  }
  sub_1B1C39C20(v8, v9);
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  sub_1B2228890();
  return v11;
}

uint64_t sub_1B1C46B30(uint64_t a1)
{
  return sub_1B1C46750(a1, &qword_1EEF57328, &qword_1EEFD5478);
}

uint64_t sub_1B1C46B4C(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  int v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  __int128 v25;
  unint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  unint64_t *v32;
  uint64_t (*v33)(uint64_t, uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  char v39;
  char v40;
  char v41;
  char v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  uint64_t v68;
  __int128 v69;
  uint64_t v70;
  unint64_t v71;
  __int128 v72;
  uint64_t v73;
  _OWORD v74[2];
  __int128 v75;

  sub_1B1A0DCD4(a1 + 56, (uint64_t)&v66);
  if (v68)
  {
    sub_1B1A0DDAC(&v66, v74);
    v6 = *(_QWORD *)(a1 + 16);
    v5 = *(_QWORD *)(a1 + 24);
    v4 = (_QWORD *)(a1 + 16);
    switch(v5)
    {
      case 0:
        *(_QWORD *)&v75 = 0;
        *((_QWORD *)&v75 + 1) = 0xE000000000000000;
        sub_1B1A02864((uint64_t)v74, (uint64_t)&v66);
        swift_dynamicCast();
        sub_1B2228890();
        swift_bridgeObjectRelease();
        goto LABEL_107;
      case 1:
      case 5:
        sub_1B1A02864((uint64_t)v74, (uint64_t)&v66);
        swift_dynamicCast();
        LOBYTE(v72) = v75;
        goto LABEL_18;
      case 2:
      case 6:
        sub_1B1A02864((uint64_t)v74, (uint64_t)&v66);
        swift_dynamicCast();
        LOWORD(v72) = v75;
        goto LABEL_18;
      case 3:
      case 7:
        sub_1B1A02864((uint64_t)v74, (uint64_t)&v66);
        swift_dynamicCast();
        LODWORD(v72) = v75;
        goto LABEL_18;
      case 4:
      case 8:
      case 9:
        sub_1B1A02864((uint64_t)v74, (uint64_t)&v66);
        swift_dynamicCast();
        *(_QWORD *)&v72 = v75;
LABEL_18:
        v12 = sub_1B2229A0C();
        goto LABEL_157;
      case 10:
        sub_1B1A02864((uint64_t)v74, (uint64_t)&v66);
        sub_1B19F8E54(0, &qword_1ED4BB090, (uint64_t (*)(void))sub_1B1AF0D08, MEMORY[0x1E0DEE0F8], MEMORY[0x1E0DEDD20]);
        swift_dynamicCast();
        v63 = v75;
        *(_QWORD *)&v72 = 0;
        *((_QWORD *)&v72 + 1) = 0xE000000000000000;
        sub_1B19FA278((uint64_t)v4, (uint64_t)&v75);
        sub_1B19FA278((uint64_t)&v75, (uint64_t)&v66);
        if (*((_QWORD *)&v66 + 1) >= 0x3BuLL)
        {
          if (*(_QWORD *)(v69 + 16) && (sub_1B1DC3C04(1u), (v38 & 1) != 0))
          {
            swift_bridgeObjectRetain();
          }
          else
          {
            if (qword_1ED4BF430 != -1)
              swift_once();
            v70 = 0;
            v71 = 0xE000000000000000;
            swift_retain();
            sub_1B2229430();
            swift_bridgeObjectRelease();
            v70 = 0xD00000000000001BLL;
            v71 = 0x80000001B232B900;
            swift_bridgeObjectRetain();
            sub_1B2228890();
            swift_bridgeObjectRelease();
            sub_1B2228890();
            sub_1B2228890();
            v44 = v70;
            v45 = v71;
            v46 = sub_1B2228E9C();
            if (qword_1ED4BF658 != -1)
              swift_once();
            v70 = 0;
            swift_retain();
            sub_1B1F1AD70(v46, &v70, v44, v45);
            swift_release();
            swift_bridgeObjectRelease();
            swift_release();
          }
        }
        else
        {
          sub_1B1C45B38((uint64_t)&v75);
        }
        sub_1B2228890();
        swift_bridgeObjectRelease();
        sub_1B2228890();
        LODWORD(v70) = v63;
        sub_1B2229A0C();
        sub_1B2228890();
        swift_bridgeObjectRelease();
        sub_1B2228890();
        LODWORD(v70) = HIDWORD(v63);
        goto LABEL_135;
      case 11:
        sub_1B1A02864((uint64_t)v74, (uint64_t)&v66);
        sub_1B19F8E54(0, (unint64_t *)&unk_1ED4BB0B0, (uint64_t (*)(void))sub_1B1AF0D08, MEMORY[0x1E0DEE0F8], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50]);
        swift_dynamicCast();
        v64 = v75;
        *(_QWORD *)&v72 = 0;
        *((_QWORD *)&v72 + 1) = 0xE000000000000000;
        sub_1B19FA278((uint64_t)v4, (uint64_t)&v75);
        sub_1B19FA278((uint64_t)&v75, (uint64_t)&v66);
        if (*((_QWORD *)&v66 + 1) >= 0x3BuLL)
        {
          if (*(_QWORD *)(v69 + 16) && (sub_1B1DC3C04(1u), (v39 & 1) != 0))
          {
            swift_bridgeObjectRetain();
          }
          else
          {
            if (qword_1ED4BF430 != -1)
              swift_once();
            v70 = 0;
            v71 = 0xE000000000000000;
            swift_retain();
            sub_1B2229430();
            swift_bridgeObjectRelease();
            v70 = 0xD00000000000001BLL;
            v71 = 0x80000001B232B900;
            swift_bridgeObjectRetain();
            sub_1B2228890();
            swift_bridgeObjectRelease();
            sub_1B2228890();
            sub_1B2228890();
            v47 = v70;
            v48 = v71;
            v49 = sub_1B2228E9C();
            if (qword_1ED4BF658 != -1)
              swift_once();
            v70 = 0;
            swift_retain();
            sub_1B1F1AD70(v49, &v70, v47, v48);
            swift_release();
            swift_bridgeObjectRelease();
            swift_release();
          }
        }
        else
        {
          sub_1B1C45B38((uint64_t)&v75);
        }
        sub_1B2228890();
        swift_bridgeObjectRelease();
        sub_1B2228890();
        LODWORD(v70) = v64;
        sub_1B2229A0C();
        sub_1B2228890();
        swift_bridgeObjectRelease();
        sub_1B2228890();
        LODWORD(v70) = DWORD1(v64);
        sub_1B2229A0C();
        sub_1B2228890();
        swift_bridgeObjectRelease();
        sub_1B2228890();
        LODWORD(v70) = DWORD2(v64);
        goto LABEL_135;
      case 12:
        sub_1B1A02864((uint64_t)v74, (uint64_t)&v66);
        sub_1B19F8E54(0, &qword_1ED4BB0F8, (uint64_t (*)(void))sub_1B1AF0D08, MEMORY[0x1E0DEE0F8], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDDA8]);
        swift_dynamicCast();
        v65 = v75;
        *(_QWORD *)&v66 = 0;
        *((_QWORD *)&v66 + 1) = 0xE000000000000000;
        sub_1B2229430();
        v72 = v66;
        sub_1B19FA278((uint64_t)v4, (uint64_t)&v75);
        sub_1B19FA278((uint64_t)&v75, (uint64_t)&v66);
        if (*((_QWORD *)&v66 + 1) >= 0x3BuLL)
        {
          if (*(_QWORD *)(v69 + 16) && (sub_1B1DC3C04(1u), (v40 & 1) != 0))
          {
            swift_bridgeObjectRetain();
          }
          else
          {
            if (qword_1ED4BF430 != -1)
              swift_once();
            v70 = 0;
            v71 = 0xE000000000000000;
            swift_retain();
            sub_1B2229430();
            swift_bridgeObjectRelease();
            v70 = 0xD00000000000001BLL;
            v71 = 0x80000001B232B900;
            swift_bridgeObjectRetain();
            sub_1B2228890();
            swift_bridgeObjectRelease();
            sub_1B2228890();
            sub_1B2228890();
            v50 = v70;
            v51 = v71;
            v52 = sub_1B2228E9C();
            if (qword_1ED4BF658 != -1)
              swift_once();
            v70 = 0;
            swift_retain();
            sub_1B1F1AD70(v52, &v70, v50, v51);
            swift_release();
            swift_bridgeObjectRelease();
            swift_release();
          }
        }
        else
        {
          sub_1B1C45B38((uint64_t)&v75);
        }
        sub_1B2228890();
        swift_bridgeObjectRelease();
        sub_1B2228890();
        LODWORD(v70) = v65;
        sub_1B2229A0C();
        sub_1B2228890();
        swift_bridgeObjectRelease();
        sub_1B2228890();
        LODWORD(v70) = DWORD1(v65);
        sub_1B2229A0C();
        sub_1B2228890();
        swift_bridgeObjectRelease();
        sub_1B2228890();
        LODWORD(v70) = DWORD2(v65);
        sub_1B2229A0C();
        sub_1B2228890();
        swift_bridgeObjectRelease();
        sub_1B2228890();
        LODWORD(v70) = HIDWORD(v65);
LABEL_135:
        sub_1B2229A0C();
        sub_1B2228890();
        goto LABEL_136;
      case 13:
        sub_1B1A02864((uint64_t)v74, (uint64_t)&v66);
        if (!swift_dynamicCast())
          goto LABEL_106;
        *(_QWORD *)&v66 = 0;
        *((_QWORD *)&v66 + 1) = 0xE000000000000000;
        sub_1B2228C98();
        goto LABEL_79;
      case 14:
        sub_1B1A02864((uint64_t)v74, (uint64_t)&v66);
        sub_1B19F8E54(0, &qword_1ED4BB080, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], MEMORY[0x1E0DEDD20]);
        swift_dynamicCast();
        *(_QWORD *)&v72 = 0;
        *((_QWORD *)&v72 + 1) = 0xE000000000000000;
        sub_1B19FA278((uint64_t)v4, (uint64_t)&v75);
        sub_1B19FA278((uint64_t)&v75, (uint64_t)&v66);
        if (*((_QWORD *)&v66 + 1) >= 0x3BuLL)
        {
          if (*(_QWORD *)(v69 + 16) && (sub_1B1DC3C04(1u), (v41 & 1) != 0))
          {
            swift_bridgeObjectRetain();
          }
          else
          {
            if (qword_1ED4BF430 != -1)
              swift_once();
            v70 = 0;
            v71 = 0xE000000000000000;
            swift_retain();
            sub_1B2229430();
            swift_bridgeObjectRelease();
            v70 = 0xD00000000000001BLL;
            v71 = 0x80000001B232B900;
            swift_bridgeObjectRetain();
            sub_1B2228890();
            swift_bridgeObjectRelease();
            sub_1B2228890();
            sub_1B2228890();
            v53 = v70;
            v54 = v71;
            v55 = sub_1B2228E9C();
            if (qword_1ED4BF658 != -1)
              swift_once();
            v70 = 0;
            swift_retain();
            sub_1B1F1AD70(v55, &v70, v53, v54);
            swift_release();
            swift_bridgeObjectRelease();
            swift_release();
          }
        }
        else
        {
          sub_1B1C45B38((uint64_t)&v75);
        }
        sub_1B2228890();
        swift_bridgeObjectRelease();
        sub_1B2228890();
        sub_1B2228C98();
        sub_1B2228890();
        goto LABEL_155;
      case 15:
        sub_1B1A02864((uint64_t)v74, (uint64_t)&v66);
        sub_1B19F8E54(0, (unint64_t *)&qword_1ED4BB0A0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50]);
        swift_dynamicCast();
        *(_QWORD *)&v72 = 0;
        *((_QWORD *)&v72 + 1) = 0xE000000000000000;
        sub_1B19FA278((uint64_t)v4, (uint64_t)&v75);
        sub_1B19FA278((uint64_t)&v75, (uint64_t)&v66);
        if (*((_QWORD *)&v66 + 1) >= 0x3BuLL)
        {
          if (*(_QWORD *)(v69 + 16) && (sub_1B1DC3C04(1u), (v42 & 1) != 0))
          {
            swift_bridgeObjectRetain();
          }
          else
          {
            if (qword_1ED4BF430 != -1)
              swift_once();
            v70 = 0;
            v71 = 0xE000000000000000;
            swift_retain();
            sub_1B2229430();
            swift_bridgeObjectRelease();
            v70 = 0xD00000000000001BLL;
            v71 = 0x80000001B232B900;
            swift_bridgeObjectRetain();
            sub_1B2228890();
            swift_bridgeObjectRelease();
            sub_1B2228890();
            sub_1B2228890();
            v56 = v70;
            v57 = v71;
            v58 = sub_1B2228E9C();
            if (qword_1ED4BF658 != -1)
              swift_once();
            v70 = 0;
            swift_retain();
            sub_1B1F1AD70(v58, &v70, v56, v57);
            swift_release();
            swift_bridgeObjectRelease();
            swift_release();
          }
        }
        else
        {
          sub_1B1C45B38((uint64_t)&v75);
        }
        sub_1B2228890();
        swift_bridgeObjectRelease();
        sub_1B2228890();
        sub_1B2228C98();
        sub_1B2228890();
        sub_1B2228C98();
        sub_1B2228890();
        goto LABEL_155;
      case 16:
        sub_1B1A02864((uint64_t)v74, (uint64_t)&v66);
        sub_1B19F8E54(0, (unint64_t *)&qword_1ED4BB0E0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDDA8]);
        swift_dynamicCast();
        *(_QWORD *)&v66 = 0;
        *((_QWORD *)&v66 + 1) = 0xE000000000000000;
        sub_1B2229430();
        v72 = v66;
        sub_1B19FA278((uint64_t)v4, (uint64_t)&v75);
        sub_1B19FA278((uint64_t)&v75, (uint64_t)&v66);
        if (*((_QWORD *)&v66 + 1) >= 0x3BuLL)
        {
          if (*(_QWORD *)(v69 + 16) && (sub_1B1DC3C04(1u), (v43 & 1) != 0))
          {
            swift_bridgeObjectRetain();
          }
          else
          {
            if (qword_1ED4BF430 != -1)
              swift_once();
            v70 = 0;
            v71 = 0xE000000000000000;
            swift_retain();
            sub_1B2229430();
            swift_bridgeObjectRelease();
            v70 = 0xD00000000000001BLL;
            v71 = 0x80000001B232B900;
            swift_bridgeObjectRetain();
            sub_1B2228890();
            swift_bridgeObjectRelease();
            sub_1B2228890();
            sub_1B2228890();
            v59 = v70;
            v60 = v71;
            v61 = sub_1B2228E9C();
            if (qword_1ED4BF658 != -1)
              swift_once();
            v70 = 0;
            swift_retain();
            sub_1B1F1AD70(v61, &v70, v59, v60);
            swift_release();
            swift_bridgeObjectRelease();
            swift_release();
          }
        }
        else
        {
          sub_1B1C45B38((uint64_t)&v75);
        }
        sub_1B2228890();
        swift_bridgeObjectRelease();
        sub_1B2228890();
        sub_1B2228C98();
        sub_1B2228890();
        sub_1B2228C98();
        sub_1B2228890();
        sub_1B2228C98();
        sub_1B2228890();
LABEL_155:
        sub_1B2228C98();
        goto LABEL_156;
      case 17:
        sub_1B1A02864((uint64_t)v74, (uint64_t)&v66);
        type metadata accessor for simd_float2x2(0);
        swift_dynamicCast();
        *(_QWORD *)&v66 = 0;
        *((_QWORD *)&v66 + 1) = 0xE000000000000000;
        sub_1B2228890();
        sub_1B2228890();
        sub_1B2228C98();
        sub_1B2228890();
        sub_1B2228C98();
        sub_1B2228890();
        *(_QWORD *)&v66 = 0;
        *((_QWORD *)&v66 + 1) = 0xE000000000000000;
        sub_1B2228890();
        sub_1B2228890();
        sub_1B2228C98();
        sub_1B2228890();
        goto LABEL_36;
      case 18:
        sub_1B1A02864((uint64_t)v74, (uint64_t)&v66);
        type metadata accessor for simd_float2x3(0);
        swift_dynamicCast();
        *(_QWORD *)&v66 = 0;
        *((_QWORD *)&v66 + 1) = 0xE000000000000000;
        sub_1B2228890();
        sub_1B2228890();
        sub_1B2228C98();
        sub_1B2228890();
        sub_1B2228C98();
        sub_1B2228890();
        sub_1B2228C98();
        sub_1B2228890();
        *(_QWORD *)&v66 = 0;
        *((_QWORD *)&v66 + 1) = 0xE000000000000000;
        sub_1B2228890();
        sub_1B2228890();
        sub_1B2228C98();
        sub_1B2228890();
        sub_1B2228C98();
        sub_1B2228890();
        goto LABEL_36;
      case 19:
        sub_1B1A02864((uint64_t)v74, (uint64_t)&v66);
        type metadata accessor for simd_float2x4(0);
        swift_dynamicCast();
        *(_QWORD *)&v66 = 0;
        *((_QWORD *)&v66 + 1) = 0xE000000000000000;
        sub_1B2229430();
        sub_1B2228890();
        sub_1B2228890();
        sub_1B2228C98();
        sub_1B2228890();
        sub_1B2228C98();
        sub_1B2228890();
        sub_1B2228C98();
        sub_1B2228890();
        sub_1B2228C98();
        sub_1B2228890();
        *(_QWORD *)&v66 = 0;
        *((_QWORD *)&v66 + 1) = 0xE000000000000000;
        sub_1B2229430();
        sub_1B2228890();
        sub_1B2228890();
        sub_1B2228C98();
        sub_1B2228890();
        sub_1B2228C98();
        sub_1B2228890();
        sub_1B2228C98();
        sub_1B2228890();
LABEL_36:
        sub_1B2228C98();
        sub_1B2228890();
        *(_QWORD *)&v72 = 0;
        *((_QWORD *)&v72 + 1) = 0xE000000000000000;
        sub_1B19FA278((uint64_t)v4, (uint64_t)&v75);
        sub_1B19FA278((uint64_t)&v75, (uint64_t)&v66);
        if (*((_QWORD *)&v66 + 1) >= 0x3BuLL)
        {
          if (*(_QWORD *)(v69 + 16) && (sub_1B1DC3C04(1u), (v13 & 1) != 0))
          {
            swift_bridgeObjectRetain();
          }
          else
          {
            if (qword_1ED4BF430 != -1)
              swift_once();
            v70 = 0;
            v71 = 0xE000000000000000;
            swift_retain();
            sub_1B2229430();
            swift_bridgeObjectRelease();
            v70 = 0xD00000000000001BLL;
            v71 = 0x80000001B232B900;
            swift_bridgeObjectRetain();
            sub_1B2228890();
            swift_bridgeObjectRelease();
            sub_1B2228890();
            sub_1B2228890();
            v14 = v70;
            v15 = v71;
            v16 = sub_1B2228E9C();
            if (qword_1ED4BF658 != -1)
              swift_once();
            v70 = 0;
            swift_retain();
            sub_1B1F1AD70(v16, &v70, v14, v15);
            swift_release();
            swift_bridgeObjectRelease();
            swift_release();
          }
        }
        else
        {
          sub_1B1C45B38((uint64_t)&v75);
        }
        sub_1B2228890();
        swift_bridgeObjectRelease();
        sub_1B2228890();
        sub_1B2228890();
        swift_bridgeObjectRelease();
        sub_1B2228890();
        sub_1B2228890();
        goto LABEL_136;
      case 20:
        sub_1B1A02864((uint64_t)v74, (uint64_t)&v66);
        type metadata accessor for simd_float3x2(0);
        swift_dynamicCast();
        *(_QWORD *)&v66 = 0;
        *((_QWORD *)&v66 + 1) = 0xE000000000000000;
        sub_1B2228890();
        sub_1B2228890();
        sub_1B2228C98();
        sub_1B2228890();
        sub_1B2228C98();
        sub_1B2228890();
        *(_QWORD *)&v66 = 0;
        *((_QWORD *)&v66 + 1) = 0xE000000000000000;
        sub_1B2228890();
        sub_1B2228890();
        sub_1B2228C98();
        sub_1B2228890();
        sub_1B2228C98();
        sub_1B2228890();
        *(_QWORD *)&v66 = 0;
        *((_QWORD *)&v66 + 1) = 0xE000000000000000;
        sub_1B2228890();
        sub_1B2228890();
        sub_1B2228C98();
        sub_1B2228890();
        goto LABEL_50;
      case 21:
        sub_1B1A02864((uint64_t)v74, (uint64_t)&v75);
        type metadata accessor for simd_float3x3(0);
        swift_dynamicCast();
        *(_QWORD *)&v66 = 0;
        *((_QWORD *)&v66 + 1) = 0xE000000000000000;
        sub_1B2228890();
        sub_1B2228890();
        sub_1B2228C98();
        sub_1B2228890();
        sub_1B2228C98();
        sub_1B2228890();
        sub_1B2228C98();
        sub_1B2228890();
        *(_QWORD *)&v66 = 0;
        *((_QWORD *)&v66 + 1) = 0xE000000000000000;
        sub_1B2228890();
        sub_1B2228890();
        sub_1B2228C98();
        sub_1B2228890();
        sub_1B2228C98();
        sub_1B2228890();
        sub_1B2228C98();
        sub_1B2228890();
        *(_QWORD *)&v66 = 0;
        *((_QWORD *)&v66 + 1) = 0xE000000000000000;
        sub_1B2228890();
        sub_1B2228890();
        sub_1B2228C98();
        sub_1B2228890();
        sub_1B2228C98();
        sub_1B2228890();
        goto LABEL_50;
      case 22:
        sub_1B1A02864((uint64_t)v74, (uint64_t)&v75);
        type metadata accessor for simd_float3x4(0);
        swift_dynamicCast();
        *(_QWORD *)&v66 = 0;
        *((_QWORD *)&v66 + 1) = 0xE000000000000000;
        sub_1B2229430();
        sub_1B2228890();
        sub_1B2228890();
        sub_1B2228C98();
        sub_1B2228890();
        sub_1B2228C98();
        sub_1B2228890();
        sub_1B2228C98();
        sub_1B2228890();
        sub_1B2228C98();
        sub_1B2228890();
        *(_QWORD *)&v66 = 0;
        *((_QWORD *)&v66 + 1) = 0xE000000000000000;
        sub_1B2229430();
        sub_1B2228890();
        sub_1B2228890();
        sub_1B2228C98();
        sub_1B2228890();
        sub_1B2228C98();
        sub_1B2228890();
        sub_1B2228C98();
        sub_1B2228890();
        sub_1B2228C98();
        sub_1B2228890();
        *(_QWORD *)&v66 = 0;
        *((_QWORD *)&v66 + 1) = 0xE000000000000000;
        sub_1B2229430();
        sub_1B2228890();
        sub_1B2228890();
        sub_1B2228C98();
        sub_1B2228890();
        sub_1B2228C98();
        sub_1B2228890();
        sub_1B2228C98();
        sub_1B2228890();
LABEL_50:
        sub_1B2228C98();
        sub_1B2228890();
        *(_QWORD *)&v72 = 0;
        *((_QWORD *)&v72 + 1) = 0xE000000000000000;
        sub_1B19FA278((uint64_t)v4, (uint64_t)&v75);
        sub_1B19FA278((uint64_t)&v75, (uint64_t)&v66);
        if (*((_QWORD *)&v66 + 1) >= 0x3BuLL)
        {
          if (*(_QWORD *)(v69 + 16) && (sub_1B1DC3C04(1u), (v17 & 1) != 0))
          {
            swift_bridgeObjectRetain();
          }
          else
          {
            if (qword_1ED4BF430 != -1)
              swift_once();
            v70 = 0;
            v71 = 0xE000000000000000;
            swift_retain();
            sub_1B2229430();
            swift_bridgeObjectRelease();
            v70 = 0xD00000000000001BLL;
            v71 = 0x80000001B232B900;
            swift_bridgeObjectRetain();
            sub_1B2228890();
            swift_bridgeObjectRelease();
            sub_1B2228890();
            sub_1B2228890();
            v18 = v70;
            v19 = v71;
            v20 = sub_1B2228E9C();
            if (qword_1ED4BF658 != -1)
              swift_once();
            v70 = 0;
            swift_retain();
            sub_1B1F1AD70(v20, &v70, v18, v19);
            swift_release();
            swift_bridgeObjectRelease();
            swift_release();
          }
        }
        else
        {
          sub_1B1C45B38((uint64_t)&v75);
        }
        sub_1B2228890();
        swift_bridgeObjectRelease();
        sub_1B2228890();
        sub_1B2228890();
        swift_bridgeObjectRelease();
        sub_1B2228890();
        sub_1B2228890();
        swift_bridgeObjectRelease();
        sub_1B2228890();
        sub_1B2228890();
        goto LABEL_136;
      case 23:
        sub_1B1A02864((uint64_t)v74, (uint64_t)&v66);
        type metadata accessor for simd_float4x2(0);
        swift_dynamicCast();
        *(_QWORD *)&v66 = 0;
        *((_QWORD *)&v66 + 1) = 0xE000000000000000;
        sub_1B2228890();
        sub_1B2228890();
        sub_1B2228C98();
        sub_1B2228890();
        sub_1B2228C98();
        sub_1B2228890();
        *(_QWORD *)&v66 = 0;
        *((_QWORD *)&v66 + 1) = 0xE000000000000000;
        sub_1B2228890();
        sub_1B2228890();
        sub_1B2228C98();
        sub_1B2228890();
        sub_1B2228C98();
        sub_1B2228890();
        *(_QWORD *)&v66 = 0;
        *((_QWORD *)&v66 + 1) = 0xE000000000000000;
        sub_1B2228890();
        sub_1B2228890();
        sub_1B2228C98();
        sub_1B2228890();
        sub_1B2228C98();
        sub_1B2228890();
        *(_QWORD *)&v66 = 0;
        *((_QWORD *)&v66 + 1) = 0xE000000000000000;
        sub_1B2228890();
        sub_1B2228890();
        sub_1B2228C98();
        sub_1B2228890();
        goto LABEL_64;
      case 24:
        sub_1B1A02864((uint64_t)v74, (uint64_t)&v75);
        type metadata accessor for simd_float4x3(0);
        swift_dynamicCast();
        *(_QWORD *)&v66 = 0;
        *((_QWORD *)&v66 + 1) = 0xE000000000000000;
        sub_1B2228890();
        sub_1B2228890();
        sub_1B2228C98();
        sub_1B2228890();
        sub_1B2228C98();
        sub_1B2228890();
        sub_1B2228C98();
        sub_1B2228890();
        *(_QWORD *)&v66 = 0;
        *((_QWORD *)&v66 + 1) = 0xE000000000000000;
        sub_1B2228890();
        sub_1B2228890();
        sub_1B2228C98();
        sub_1B2228890();
        sub_1B2228C98();
        sub_1B2228890();
        sub_1B2228C98();
        sub_1B2228890();
        *(_QWORD *)&v66 = 0;
        *((_QWORD *)&v66 + 1) = 0xE000000000000000;
        sub_1B2228890();
        sub_1B2228890();
        sub_1B2228C98();
        sub_1B2228890();
        sub_1B2228C98();
        sub_1B2228890();
        sub_1B2228C98();
        sub_1B2228890();
        *(_QWORD *)&v66 = 0;
        *((_QWORD *)&v66 + 1) = 0xE000000000000000;
        sub_1B2228890();
        sub_1B2228890();
        sub_1B2228C98();
        sub_1B2228890();
        sub_1B2228C98();
        sub_1B2228890();
        goto LABEL_64;
      case 25:
        sub_1B1A02864((uint64_t)v74, (uint64_t)&v75);
        type metadata accessor for simd_float4x4(0);
        swift_dynamicCast();
        *(_QWORD *)&v66 = 0;
        *((_QWORD *)&v66 + 1) = 0xE000000000000000;
        sub_1B2229430();
        sub_1B2228890();
        sub_1B2228890();
        sub_1B2228C98();
        sub_1B2228890();
        sub_1B2228C98();
        sub_1B2228890();
        sub_1B2228C98();
        sub_1B2228890();
        sub_1B2228C98();
        sub_1B2228890();
        *(_QWORD *)&v66 = 0;
        *((_QWORD *)&v66 + 1) = 0xE000000000000000;
        sub_1B2229430();
        sub_1B2228890();
        sub_1B2228890();
        sub_1B2228C98();
        sub_1B2228890();
        sub_1B2228C98();
        sub_1B2228890();
        sub_1B2228C98();
        sub_1B2228890();
        sub_1B2228C98();
        sub_1B2228890();
        *(_QWORD *)&v66 = 0;
        *((_QWORD *)&v66 + 1) = 0xE000000000000000;
        sub_1B2229430();
        sub_1B2228890();
        sub_1B2228890();
        sub_1B2228C98();
        sub_1B2228890();
        sub_1B2228C98();
        sub_1B2228890();
        sub_1B2228C98();
        sub_1B2228890();
        sub_1B2228C98();
        sub_1B2228890();
        *(_QWORD *)&v66 = 0;
        *((_QWORD *)&v66 + 1) = 0xE000000000000000;
        sub_1B2229430();
        sub_1B2228890();
        sub_1B2228890();
        sub_1B2228C98();
        sub_1B2228890();
        sub_1B2228C98();
        sub_1B2228890();
        sub_1B2228C98();
        sub_1B2228890();
LABEL_64:
        sub_1B2228C98();
        sub_1B2228890();
        *(_QWORD *)&v66 = 0;
        *((_QWORD *)&v66 + 1) = 0xE000000000000000;
        sub_1B2229430();
        v72 = v66;
        sub_1B19FA278((uint64_t)v4, (uint64_t)&v75);
        sub_1B19FA278((uint64_t)&v75, (uint64_t)&v66);
        if (*((_QWORD *)&v66 + 1) >= 0x3BuLL)
        {
          if (*(_QWORD *)(v69 + 16) && (sub_1B1DC3C04(1u), (v21 & 1) != 0))
          {
            swift_bridgeObjectRetain();
          }
          else
          {
            if (qword_1ED4BF430 != -1)
              swift_once();
            v70 = 0;
            v71 = 0xE000000000000000;
            swift_retain();
            sub_1B2229430();
            swift_bridgeObjectRelease();
            v70 = 0xD00000000000001BLL;
            v71 = 0x80000001B232B900;
            swift_bridgeObjectRetain();
            sub_1B2228890();
            swift_bridgeObjectRelease();
            sub_1B2228890();
            sub_1B2228890();
            v23 = v70;
            v22 = v71;
            v24 = sub_1B2228E9C();
            if (qword_1ED4BF658 != -1)
              swift_once();
            v70 = 0;
            swift_retain();
            sub_1B1F1AD70(v24, &v70, v23, v22);
            swift_release();
            swift_bridgeObjectRelease();
            swift_release();
          }
        }
        else
        {
          sub_1B1C45B38((uint64_t)&v75);
        }
        sub_1B2228890();
        swift_bridgeObjectRelease();
        sub_1B2228890();
        sub_1B2228890();
        swift_bridgeObjectRelease();
        sub_1B2228890();
        sub_1B2228890();
        swift_bridgeObjectRelease();
        sub_1B2228890();
        sub_1B2228890();
        swift_bridgeObjectRelease();
        sub_1B2228890();
        sub_1B2228890();
LABEL_136:
        swift_bridgeObjectRelease();
LABEL_156:
        sub_1B2228890();
        v12 = v72;
        goto LABEL_157;
      case 26:
LABEL_106:
        *(_QWORD *)&v75 = 0;
        *((_QWORD *)&v75 + 1) = 0xE000000000000000;
        sub_1B1A02864((uint64_t)v74, (uint64_t)&v66);
        swift_dynamicCast();
        sub_1B2228C98();
LABEL_107:
        v12 = v75;
        goto LABEL_157;
      case 27:
      case 28:
      case 29:
      case 30:
      case 31:
      case 32:
      case 33:
      case 34:
      case 35:
      case 37:
      case 38:
      case 41:
      case 42:
      case 57:
      case 58:
        if (*(_BYTE *)(a2 + 64) == 1)
        {
          v7 = v4[2];
          v8 = v4[3];
          v9 = v4[4];
          if (qword_1ED4BF430 != -1)
            swift_once();
          *(_QWORD *)&v66 = 0;
          *((_QWORD *)&v66 + 1) = 0xE000000000000000;
          swift_retain();
          sub_1B2229430();
          v75 = v66;
          sub_1B2228890();
          *(_QWORD *)&v66 = v6;
          *((_QWORD *)&v66 + 1) = v5;
          v67 = v7;
          v68 = v8;
          *(_QWORD *)&v69 = v9;
          sub_1B22295EC();
          v10 = v75;
          v11 = sub_1B2228E9C();
          if (qword_1ED4BF658 != -1)
            swift_once();
          *(_QWORD *)&v66 = 0;
          swift_retain();
          sub_1B1F1AD70(v11, (uint64_t *)&v66, v10, *((uint64_t *)&v10 + 1));
          swift_release();
          swift_bridgeObjectRelease();
          swift_release();
        }
        _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v74);
        return 0x3E524F5252453CLL;
      case 36:
        sub_1B1A02864((uint64_t)v74, (uint64_t)&v66);
        type metadata accessor for simd_quatf(0);
        swift_dynamicCast();
        *(_QWORD *)&v66 = 0;
        *((_QWORD *)&v66 + 1) = 0xE000000000000000;
        sub_1B2229430();
        sub_1B2228890();
        sub_1B2228C98();
        sub_1B2228890();
        sub_1B2228C98();
        sub_1B2228890();
        sub_1B2228C98();
        sub_1B2228890();
        sub_1B2228C98();
        goto LABEL_78;
      case 39:
        sub_1B1A02864((uint64_t)v74, (uint64_t)&v66);
        sub_1B1AED5E4(0, (unint64_t *)&qword_1ED4BA5B8, MEMORY[0x1E0DEB418], MEMORY[0x1E0DEB430], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEB848]);
        swift_dynamicCast();
        v25 = v75;
        *(_QWORD *)&v66 = 0;
        *((_QWORD *)&v66 + 1) = 0xE000000000000000;
        sub_1B2229430();
        swift_bridgeObjectRelease();
        *(_QWORD *)&v66 = 0xD000000000000011;
        *((_QWORD *)&v66 + 1) = 0x80000001B2335710;
        *(_QWORD *)&v75 = v25;
        sub_1B2229A0C();
        sub_1B2228890();
        swift_bridgeObjectRelease();
        sub_1B2228890();
        *(_QWORD *)&v75 = *((_QWORD *)&v25 + 1);
        sub_1B2229A0C();
        sub_1B2228890();
        swift_bridgeObjectRelease();
        goto LABEL_78;
      case 40:
        sub_1B1A02864((uint64_t)v74, (uint64_t)&v66);
        sub_1B1AED5E4(0, (unint64_t *)&qword_1ED4BA5A8, MEMORY[0x1E0DEB188], MEMORY[0x1E0DEB1B0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEB848]);
        swift_dynamicCast();
        *(_QWORD *)&v66 = 0;
        *((_QWORD *)&v66 + 1) = 0xE000000000000000;
        sub_1B2229430();
        sub_1B2228890();
        sub_1B2228C98();
        sub_1B2228890();
        sub_1B2228C98();
LABEL_78:
        sub_1B2228890();
LABEL_79:
        v12 = v66;
        goto LABEL_157;
      case 43:
        sub_1B1A02864((uint64_t)v74, (uint64_t)&v66);
        v26 = &qword_1EEF5CA48;
        v27 = MEMORY[0x1E0DEAFA0];
        goto LABEL_91;
      case 44:
        sub_1B1A02864((uint64_t)v74, (uint64_t)&v66);
        v26 = &qword_1ED4BA510;
        v27 = MEMORY[0x1E0DEDE70];
        goto LABEL_91;
      case 45:
        sub_1B1A02864((uint64_t)v74, (uint64_t)&v66);
        v26 = &qword_1ED4BA528;
        v27 = MEMORY[0x1E0DEE068];
        goto LABEL_91;
      case 46:
        sub_1B1A02864((uint64_t)v74, (uint64_t)&v66);
        v26 = &qword_1EEF5CA40;
        v27 = MEMORY[0x1E0DEE0F8];
        goto LABEL_91;
      case 47:
        sub_1B1A02864((uint64_t)v74, (uint64_t)&v66);
        v26 = &qword_1EEF5CA38;
        v27 = MEMORY[0x1E0DEE190];
        goto LABEL_91;
      case 48:
        sub_1B1A02864((uint64_t)v74, (uint64_t)&v66);
        v26 = &qword_1EEF5CA30;
        v27 = MEMORY[0x1E0DEDA70];
        goto LABEL_91;
      case 49:
        sub_1B1A02864((uint64_t)v74, (uint64_t)&v66);
        v26 = &qword_1EEF5CA28;
        v27 = MEMORY[0x1E0DEDB58];
        goto LABEL_91;
      case 50:
        sub_1B1A02864((uint64_t)v74, (uint64_t)&v66);
        v26 = &qword_1EEF5CA20;
        v27 = MEMORY[0x1E0DEDBC8];
        goto LABEL_91;
      case 51:
        sub_1B1A02864((uint64_t)v74, (uint64_t)&v66);
        v26 = &qword_1EEF5CA18;
        v27 = MEMORY[0x1E0DEDC60];
        goto LABEL_91;
      case 52:
        sub_1B1A02864((uint64_t)v74, (uint64_t)&v66);
        v26 = &qword_1ED4BA4D0;
        v27 = MEMORY[0x1E0DEB418];
        goto LABEL_91;
      case 53:
        sub_1B1A02864((uint64_t)v74, (uint64_t)&v66);
        v26 = (unint64_t *)&qword_1ED4BA4C0;
        v27 = MEMORY[0x1E0DEB188];
LABEL_91:
        sub_1B1A02758(0, v26, v27, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
        swift_dynamicCast();
        v28 = MEMORY[0x1B5E20670](v73, v27);
        v30 = v29;
        goto LABEL_96;
      case 54:
        sub_1B1A02864((uint64_t)v74, (uint64_t)&v66);
        v31 = &qword_1EEF5B478;
        v32 = &qword_1ED4BB080;
        v33 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD20];
        goto LABEL_95;
      case 55:
        sub_1B1A02864((uint64_t)v74, (uint64_t)&v66);
        v31 = &qword_1EEF5B468;
        v32 = (unint64_t *)&qword_1ED4BB0A0;
        v33 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50];
        goto LABEL_95;
      case 56:
        sub_1B1A02864((uint64_t)v74, (uint64_t)&v66);
        v31 = &qword_1ED4BA500;
        v32 = (unint64_t *)&qword_1ED4BB0E0;
        v33 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDDA8];
LABEL_95:
        sub_1B1B9A650(0, (unint64_t *)v31, v32, v33);
        swift_dynamicCast();
        v34 = v73;
        sub_1B19F8E54(0, v32, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], v33);
        v28 = MEMORY[0x1B5E20670](v34, v35);
        v30 = v36;
LABEL_96:
        swift_bridgeObjectRelease();
        *(_QWORD *)&v75 = v28;
        *((_QWORD *)&v75 + 1) = v30;
        *(_QWORD *)&v72 = 91;
        *((_QWORD *)&v72 + 1) = 0xE100000000000000;
        v70 = 123;
        v71 = 0xE100000000000000;
        sub_1B1A06460();
        *(_QWORD *)&v75 = sub_1B222922C();
        *((_QWORD *)&v75 + 1) = v37;
        *(_QWORD *)&v72 = 93;
        *((_QWORD *)&v72 + 1) = 0xE100000000000000;
        v70 = 125;
        v71 = 0xE100000000000000;
        v12 = sub_1B222922C();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_157:
        _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v74);
        break;
      default:
        _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v74);
        v12 = 0xD00000000000001FLL;
        break;
    }
  }
  else
  {
    sub_1B1A0DD70((uint64_t)&v66);
    return 0x3E524F5252453CLL;
  }
  return v12;
}

uint64_t sub_1B1C4A4A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;

  if (!a11)
  {
    v33 = 0xE200000000000000;
    v30 = a1;
    v31 = a2;
    swift_bridgeObjectRetain();
    sub_1B2228890();
    sub_1B1A06460();
    sub_1B222922C();
    swift_bridgeObjectRelease();
    sub_1B2229430();
    swift_bridgeObjectRelease();
    v26 = 544501353;
    v27 = 0xE400000000000000;
    sub_1B2228890();
    sub_1B2228890();
    v32 = a9;
    sub_1B2229A0C();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    v28 = 544501353;
    v29 = 0xE400000000000000;
    if ((a8 & 1) != 0)
    {
      sub_1B1E03A80(&v30);
      sub_1B1E02E1C(&v30, 1, (uint64_t)&v26);
      sub_1B19F8C58(&v30, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19F9FEC);
      v17 = sub_1B1C3F84C(&v26, a10, 0, 0, 0);
      v19 = v18;
      sub_1B1A203C4((uint64_t)&v26);
      swift_bridgeObjectRelease();
      v20 = sub_1B19F4250(v17, v19, a9);
      v26 = 0;
      v27 = 0xE000000000000000;
      sub_1B2229430();
      v22 = v26;
      v23 = v27;
      sub_1B2228890();
      sub_1B1E03A80(&v32);
      sub_1B19FA278((uint64_t)&v32, (uint64_t)&v26);
      sub_1B22295EC();
      sub_1B19F8C58(&v32, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19F9FEC);
      sub_1B2228890();
      sub_1B2228890();
      sub_1B2228890();
      v26 = v20;
      sub_1B1A02758(0, (unint64_t *)&qword_1ED4BA490, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
      sub_1B19FA230();
      sub_1B2228644();
      swift_bridgeObjectRelease();
      sub_1B2228890();
      swift_bridgeObjectRelease();
      sub_1B2228890();
      sub_1B2228890();
      swift_bridgeObjectRelease();
      v26 = 0;
      v27 = 0xE000000000000000;
      sub_1B2229430();
      v24 = v26;
      v25 = v27;
      goto LABEL_7;
    }
LABEL_8:
    v22 = 0;
    v23 = 0xE000000000000000;
    sub_1B2229430();
    swift_bridgeObjectRelease();
    v22 = 0xD000000000000015;
    v23 = 0x80000001B23354F0;
    sub_1B2228890();
    sub_1B2228890();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    v22 = 2099465;
    v23 = 0xE300000000000000;
    sub_1B2228890();
    sub_1B2228890();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    return v28;
  }
  if (a11 == 1)
  {
    v33 = 0xE200000000000000;
    v30 = a1;
    v31 = a2;
    swift_bridgeObjectRetain();
    sub_1B2228890();
    sub_1B1A06460();
    sub_1B222922C();
    swift_bridgeObjectRelease();
    sub_1B2229430();
    swift_bridgeObjectRelease();
    v26 = 544501353;
    v27 = 0xE400000000000000;
    sub_1B2228890();
    sub_1B2228890();
    v32 = a9;
    sub_1B2229A0C();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    v28 = 544501353;
    v29 = 0xE400000000000000;
    if ((a8 & 1) != 0)
    {
      sub_1B1E03A80(&v30);
      sub_1B1E02E1C(&v30, 1, (uint64_t)&v26);
      sub_1B19F8C58(&v30, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19F9FEC);
      v13 = sub_1B1C46B4C((uint64_t)&v26, a10);
      v15 = v14;
      sub_1B1A203C4((uint64_t)&v26);
      swift_bridgeObjectRelease();
      v16 = sub_1B19F4250(v13, v15, a9);
      v26 = 0;
      v27 = 0xE000000000000000;
      sub_1B2229430();
      v22 = v26;
      v23 = v27;
      sub_1B2228890();
      sub_1B1E03A80(&v32);
      sub_1B19FA278((uint64_t)&v32, (uint64_t)&v26);
      sub_1B22295EC();
      sub_1B19F8C58(&v32, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19F9FEC);
      sub_1B2228890();
      sub_1B2228890();
      sub_1B2228890();
      v26 = v16;
      sub_1B1A02758(0, (unint64_t *)&qword_1ED4BA490, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
      sub_1B19FA230();
      sub_1B2228644();
      swift_bridgeObjectRelease();
      sub_1B2228890();
      swift_bridgeObjectRelease();
      sub_1B2228890();
      sub_1B2228890();
      swift_bridgeObjectRelease();
      v26 = 0;
      v27 = 0xE000000000000000;
      sub_1B2229430();
      v24 = v26;
      v25 = v27;
LABEL_7:
      sub_1B2228890();
      sub_1B1E03A80(&v26);
      sub_1B19FA278((uint64_t)&v26, (uint64_t)&v22);
      sub_1B22295EC();
      sub_1B19F8C58(&v26, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19F9FEC);
      sub_1B2228890();
      sub_1B2228890();
      sub_1B2228890();
      sub_1B2228890();
      sub_1B2228890();
      sub_1B2228890();
      swift_bridgeObjectRelease();
      goto LABEL_8;
    }
    goto LABEL_8;
  }
  if ((a8 & 1) != 0)
  {
    v26 = 0;
    v27 = 0xE000000000000000;
    sub_1B2229430();
    swift_bridgeObjectRelease();
    v32 = 544499052;
    v33 = 0xE400000000000000;
    sub_1B2228890();
    sub_1B2228890();
    sub_1B1E03A80(&v26);
    sub_1B1C39C20((uint64_t)&v26, 2u);
    sub_1B19F8C58(&v26, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19F9FEC);
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    sub_1B2228890();
    sub_1B2228890();
    sub_1B2228890();
    sub_1B2228890();
    return v32;
  }
  else
  {
    sub_1B2229430();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    sub_1B2228890();
    sub_1B2228890();
    sub_1B2228890();
    sub_1B2228890();
    return a4;
  }
}

uint64_t sub_1B1C4AEEC(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8, char a9, unsigned __int8 a10)
{
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  unint64_t v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  unint64_t v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49[2];
  uint64_t v50;
  unint64_t v51;

  sub_1B19FA278((uint64_t)a4, (uint64_t)v49);
  if ((a9 & 1) != 0)
  {
    v16 = sub_1B1C39E78((uint64_t)a4, a5, a6, 0, a10);
    v18 = v17;
    v19 = a10;
    if (a10)
    {
LABEL_3:
      if (v19 == 1)
      {
        v50 = v16;
        v51 = v18;
        sub_1B2228890();
        sub_1B2228890();
        return v50;
      }
      sub_1B19FA278(a1, (uint64_t)&v50);
      if (v51 == 37)
      {
        v33 = HIBYTE(a8) & 0xF;
        if ((a8 & 0x2000000000000000) == 0)
          v33 = a7 & 0xFFFFFFFFFFFFLL;
        if (v33)
        {
          if (qword_1ED4BF430 != -1)
            swift_once();
          v41 = 0;
          v42 = 0xE000000000000000;
          swift_retain();
          sub_1B2229430();
          v47 = 0;
          v48 = 0xE000000000000000;
          sub_1B2228890();
          sub_1B19FA278(a1, (uint64_t)&v41);
          sub_1B22295EC();
          sub_1B2228890();
          sub_1B2228890();
          v34 = v47;
          v35 = v48;
          v36 = sub_1B2228E90();
          if (qword_1ED4BF658 != -1)
            swift_once();
          v41 = 0;
          swift_retain();
          sub_1B1F1AD70(v36, (uint64_t *)&v41, v34, v35);
          swift_release();
          swift_bridgeObjectRelease();
          swift_release();
        }
        v41 = 0;
        v42 = 0xE000000000000000;
        sub_1B2229430();
        swift_bridgeObjectRelease();
        v31 = 0xD000000000000016;
        v32 = "vfx_script_curve_copy(";
        goto LABEL_40;
      }
      if (v51 == 28)
      {
        v27 = HIBYTE(a8) & 0xF;
        if ((a8 & 0x2000000000000000) == 0)
          v27 = a7 & 0xFFFFFFFFFFFFLL;
        if (v27)
        {
          if (qword_1ED4BF430 != -1)
            swift_once();
          v41 = 0;
          v42 = 0xE000000000000000;
          swift_retain();
          sub_1B2229430();
          v47 = 0;
          v48 = 0xE000000000000000;
          sub_1B2228890();
          sub_1B19FA278(a1, (uint64_t)&v41);
          sub_1B22295EC();
          sub_1B2228890();
          sub_1B2228890();
          v28 = v47;
          v29 = v48;
          v30 = sub_1B2228E90();
          if (qword_1ED4BF658 != -1)
            swift_once();
          v41 = 0;
          swift_retain();
          sub_1B1F1AD70(v30, (uint64_t *)&v41, v28, v29);
          swift_release();
          swift_bridgeObjectRelease();
          swift_release();
        }
        v41 = 0;
        v42 = 0xE000000000000000;
        sub_1B2229430();
        swift_bridgeObjectRelease();
        v31 = 0xD00000000000001BLL;
        v32 = "vfx_script_color_ramp_copy(";
LABEL_40:
        v41 = v31;
        v42 = (unint64_t)(v32 - 32) | 0x8000000000000000;
        sub_1B2228890();
        swift_bridgeObjectRelease();
        sub_1B2228890();
        sub_1B2228890();
        goto LABEL_51;
      }
LABEL_29:
      v41 = v16;
      v42 = v18;
      sub_1B2228890();
LABEL_51:
      sub_1B2228890();
      return v41;
    }
  }
  else
  {
    sub_1B19FA2B4(v49[0], v49[1]);
    swift_bridgeObjectRetain();
    sub_1B19F8C58(a4, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19F9FEC);
    v16 = a5;
    v18 = a6;
    v19 = a10;
    if (a10)
      goto LABEL_3;
  }
  sub_1B19FA278(a1, (uint64_t)&v50);
  if (v51 - 34 >= 2)
  {
    if (v51 == 37)
    {
      v37 = HIBYTE(a8) & 0xF;
      if ((a8 & 0x2000000000000000) == 0)
        v37 = a7 & 0xFFFFFFFFFFFFLL;
      if (v37)
      {
        if (qword_1ED4BF430 != -1)
          swift_once();
        v41 = 0;
        v42 = 0xE000000000000000;
        swift_retain();
        sub_1B2229430();
        v47 = 0;
        v48 = 0xE000000000000000;
        sub_1B2228890();
        sub_1B19FA278(a1, (uint64_t)&v41);
        sub_1B22295EC();
        sub_1B2228890();
        sub_1B2228890();
        v38 = v47;
        v39 = v48;
        v40 = sub_1B2228E90();
        if (qword_1ED4BF658 != -1)
          swift_once();
        v41 = 0;
        swift_retain();
        sub_1B1F1AD70(v40, (uint64_t *)&v41, v38, v39);
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
      }
      v41 = 0;
      v42 = 0xE000000000000000;
      sub_1B2229430();
      swift_bridgeObjectRelease();
      v25 = 0xD000000000000016;
      v26 = "vfx_script_curve_copy(";
    }
    else
    {
      if (v51 != 28)
        goto LABEL_29;
      v21 = HIBYTE(a8) & 0xF;
      if ((a8 & 0x2000000000000000) == 0)
        v21 = a7 & 0xFFFFFFFFFFFFLL;
      if (v21)
      {
        if (qword_1ED4BF430 != -1)
          swift_once();
        v41 = 0;
        v42 = 0xE000000000000000;
        swift_retain();
        sub_1B2229430();
        v47 = 0;
        v48 = 0xE000000000000000;
        sub_1B2228890();
        sub_1B19FA278(a1, (uint64_t)&v41);
        sub_1B22295EC();
        sub_1B2228890();
        sub_1B2228890();
        v22 = v47;
        v23 = v48;
        v24 = sub_1B2228E90();
        if (qword_1ED4BF658 != -1)
          swift_once();
        v41 = 0;
        swift_retain();
        sub_1B1F1AD70(v24, (uint64_t *)&v41, v22, v23);
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
      }
      v41 = 0;
      v42 = 0xE000000000000000;
      sub_1B2229430();
      swift_bridgeObjectRelease();
      v25 = 0xD00000000000001BLL;
      v26 = "vfx_script_color_ramp_copy(";
    }
    v41 = v25;
    v42 = (unint64_t)(v26 - 32) | 0x8000000000000000;
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    sub_1B2228890();
    sub_1B2228890();
    goto LABEL_51;
  }
  v41 = v16;
  v42 = v18;
  sub_1B2228890();
  v47 = a7;
  v48 = a8;
  v45 = 1953853220;
  v46 = 0xE400000000000000;
  v43 = a5;
  v44 = a6;
  sub_1B1A06460();
  sub_1B222922C();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  return v41;
}

uint64_t sub_1B1C4B7DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v16;
  unint64_t v17;

  if (a9 == 2)
  {
    if ((a6 & 1) != 0)
    {
      v16 = 0;
      v17 = 0xE000000000000000;
      sub_1B2229430();
      swift_bridgeObjectRelease();
      sub_1B2228890();
      sub_1B2228890();
      sub_1B1E03A80(&v16);
      sub_1B1C39C20((uint64_t)&v16, 2u);
      sub_1B19F8C58(&v16, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19F9FEC);
      sub_1B2228890();
      swift_bridgeObjectRelease();
      sub_1B2228890();
      sub_1B2228890();
      return 544499052;
    }
    v16 = a4;
    v17 = a5;
    swift_bridgeObjectRetain();
    sub_1B2228890();
  }
  else
  {
    sub_1B2229430();
    swift_bridgeObjectRelease();
    v16 = 544501353;
    v17 = 0xE400000000000000;
    sub_1B2228890();
    sub_1B2228890();
    sub_1B2229A0C();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    if ((a6 & 1) != 0)
    {
      sub_1B1C3AAC8(a3, a4, a5, a7, 0, 0, 0, a8, a9);
      sub_1B2228890();
      sub_1B2228890();
      swift_bridgeObjectRelease();
    }
    sub_1B2229430();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    sub_1B2228890();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2229430();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    sub_1B2228890();
    sub_1B2228890();
    sub_1B2228890();
    sub_1B2228890();
    swift_bridgeObjectRelease();
  }
  sub_1B2228890();
  return v16;
}

uint64_t sub_1B1C4BB74@<X0>(__int128 *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_1B1C45388(a1, *(unsigned __int8 *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), (unint64_t *)&qword_1ED4BB0E0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDDA8], a2);
}

uint64_t sub_1B1C4BBA4@<X0>(__int128 *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_1B1C45388(a1, *(unsigned __int8 *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), (unint64_t *)&qword_1ED4BB0A0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50], a2);
}

uint64_t sub_1B1C4BBD4@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_1B1C45250(a1, *(unsigned __int8 *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), a2);
}

uint64_t sub_1B1C4BBF4@<X0>(int *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_1B1C45144(a1, *(unsigned __int8 *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), a2);
}

uint64_t sub_1B1C4BC14@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_1B1C45040(a1, *(unsigned __int8 *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), MEMORY[0x1E0DEB418], a2);
}

uint64_t sub_1B1C4BC3C@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_1B1C45040(a1, *(unsigned __int8 *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), MEMORY[0x1E0DEDC60], a2);
}

uint64_t sub_1B1C4BC64@<X0>(int *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_1B1C44F3C(a1, *(unsigned __int8 *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), MEMORY[0x1E0DEDBC8], a2);
}

uint64_t sub_1B1C4BC8C@<X0>(__int16 *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_1B1C44E38(a1, *(unsigned __int8 *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), MEMORY[0x1E0DEDB58], a2);
}

uint64_t sub_1B1C4BCB4@<X0>(char *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_1B1C44D34(a1, *(unsigned __int8 *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), MEMORY[0x1E0DEDA70], a2);
}

uint64_t sub_1B1C4BCDC@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_1B1C45040(a1, *(unsigned __int8 *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), MEMORY[0x1E0DEE190], a2);
}

uint64_t sub_1B1C4BD04@<X0>(int *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_1B1C44F3C(a1, *(unsigned __int8 *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), MEMORY[0x1E0DEE0F8], a2);
}

uint64_t sub_1B1C4BD2C@<X0>(__int16 *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_1B1C44E38(a1, *(unsigned __int8 *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), MEMORY[0x1E0DEE068], a2);
}

uint64_t sub_1B1C4BD54@<X0>(char *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_1B1C44D34(a1, *(unsigned __int8 *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), MEMORY[0x1E0DEDE70], a2);
}

uint64_t sub_1B1C4BD7C@<X0>(char *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_1B1C44C28(a1, *(unsigned __int8 *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), a2);
}

uint64_t sub_1B1C4BD9C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BB150, MEMORY[0x1E0DEE9B8] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1B1C4BDFC()
{
  return swift_deallocObject();
}

unint64_t sub_1B1C4BE0C(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5, uint64_t a6, char a7, unsigned __int8 a8)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22[2];
  uint64_t v23;
  uint64_t v24;

  sub_1B19FA278((uint64_t)a4, (uint64_t)v22);
  if ((a7 & 1) != 0)
  {
    v14 = sub_1B1C39E78((uint64_t)a4, a5, a6, 0, a8);
    v16 = v15;
    v17 = a8;
    if (a8)
      goto LABEL_3;
LABEL_7:
    if ((a7 & 1) != 0)
      goto LABEL_8;
    sub_1B19FA278(a1, (uint64_t)&v23);
    if ((unint64_t)(v24 - 34) < 2)
    {
      swift_bridgeObjectRelease();
      sub_1B2229430();
      swift_bridgeObjectRelease();
      v20 = 0xD000000000000017;
    }
    else if (v24 == 37)
    {
      swift_bridgeObjectRelease();
      sub_1B2229430();
      swift_bridgeObjectRelease();
      v20 = 0xD000000000000016;
    }
    else
    {
      if (v24 != 28)
      {
        v21 = v14;
        sub_1B2228890();
        goto LABEL_24;
      }
      swift_bridgeObjectRelease();
      sub_1B2229430();
      swift_bridgeObjectRelease();
      v20 = 0xD00000000000001BLL;
    }
    v21 = v20;
    sub_1B2228890();
    sub_1B2228890();
    sub_1B2228890();
LABEL_24:
    sub_1B2228890();
    goto LABEL_25;
  }
  sub_1B19FA2B4(v22[0], v22[1]);
  swift_bridgeObjectRetain();
  sub_1B19F8C58(a4, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19F9FEC);
  v14 = a5;
  v16 = a6;
  v17 = a8;
  if (!a8)
    goto LABEL_7;
LABEL_3:
  if (v17 == 1)
  {
LABEL_8:
    v23 = v14;
    v24 = v16;
    sub_1B2228890();
    sub_1B2228890();
    goto LABEL_9;
  }
  if ((a7 & 1) != 0)
  {
    v23 = v14;
    v24 = v16;
    sub_1B2228890();
LABEL_9:
    sub_1B2228890();
    return v23;
  }
  sub_1B19FA278(a1, (uint64_t)&v23);
  if (v24 == 37)
  {
    swift_bridgeObjectRelease();
    sub_1B2229430();
    swift_bridgeObjectRelease();
    v19 = 0xD000000000000016;
  }
  else
  {
    if (v24 != 28)
    {
      v21 = v14;
      sub_1B2228890();
      goto LABEL_25;
    }
    swift_bridgeObjectRelease();
    sub_1B2229430();
    swift_bridgeObjectRelease();
    v19 = 0xD00000000000001BLL;
  }
  v21 = v19;
  sub_1B2228890();
  sub_1B2228890();
  sub_1B2228890();
LABEL_25:
  sub_1B2228890();
  return v21;
}

uint64_t sub_1B1C4C1B4(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  char v17;
  uint64_t v19;

  if (!a4)
  {
    if ((sub_1B1C3A644(a3, 0) & 1) != 0)
      v6 = 0xE000000000000000;
    else
      v6 = 0xE100000000000000;
    if ((v6 & 0x100000000000000) != 0)
      sub_1B2228890();
    else
      swift_bridgeObjectRelease();
    v9 = 0x2074736E6F63;
    if (sub_1B1E03DBC() == 0x6D6152726F6C6F43 && v10 == 0xE900000000000070)
      goto LABEL_29;
    v11 = sub_1B2229D24();
    swift_bridgeObjectRelease();
    if ((v11 & 1) == 0)
    {
      if (sub_1B1E03DBC() == 0x466576727543 && v12 == 0xE600000000000000)
        goto LABEL_29;
      v13 = sub_1B2229D24();
      swift_bridgeObjectRelease();
      if ((v13 & 1) == 0)
      {
        if (sub_1B1E03DBC() == 0x676E69727453 && v14 == 0xE600000000000000)
        {
LABEL_29:
          swift_bridgeObjectRelease();
          goto LABEL_32;
        }
        v15 = sub_1B2229D24();
        swift_bridgeObjectRelease();
        if ((v15 & 1) == 0)
        {
          if (sub_1B1E03DBC() != 5001813 || v16 != 0xE300000000000000)
          {
            v17 = sub_1B2229D24();
            swift_bridgeObjectRelease();
            if ((v17 & 1) == 0)
              v9 = 0;
            goto LABEL_32;
          }
          goto LABEL_29;
        }
      }
    }
LABEL_32:
    v19 = v9;
    v7 = a3;
    v8 = 0;
LABEL_33:
    sub_1B1C39C20(v7, v8);
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    return v19;
  }
  if (a4 == 1)
  {
    if ((sub_1B1C3A644(a3, 1) & 1) != 0)
      v5 = 0xE000000000000000;
    else
      v5 = 0xE100000000000000;
    if ((v5 & 0x100000000000000) != 0)
      sub_1B2228890();
    else
      swift_bridgeObjectRelease();
    v19 = 0x20646165726874;
    v7 = a3;
    v8 = 1;
    goto LABEL_33;
  }
  sub_1B1C3A644(a3, 2);
  v19 = 8287;
  sub_1B2228890();
  sub_1B2228890();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B1C39C20(a3, 2u);
  sub_1B2228890();
  swift_bridgeObjectRelease();
  return v19;
}

__n128 initializeWithCopy for ParticleQuadRenderer(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v2 = *(_OWORD *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  result = *(__n128 *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 123) = *(_OWORD *)(a2 + 123);
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 80) = result;
  return result;
}

uint64_t getEnumTagSinglePayload for ParticleQuadRenderer(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 139))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 44);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for ParticleQuadRenderer(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 138) = 0;
    *(_WORD *)(result + 136) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 139) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 139) = 0;
    if (a2)
      *(_BYTE *)(result + 44) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for ParticleQuadRenderer()
{
  return &type metadata for ParticleQuadRenderer;
}

void sub_1B1C4C694(_QWORD *a1@<X8>)
{
  *a1 = &unk_1E639D018;
}

uint64_t sub_1B1C4C6A4()
{
  sub_1B1C4D5B8();
  return sub_1B2228A70();
}

uint64_t sub_1B1C4C700()
{
  sub_1B1C4D5B8();
  return sub_1B22289F8();
}

uint64_t sub_1B1C4C74C@<X0>(__int16 a1@<W0>, uint64_t a2@<X8>)
{
  unint64_t v3;
  unint64_t v4;
  _QWORD v6[10];
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  v3 = 0xD000000000000012;
  v6[0] = 0xD000000000000012;
  v6[1] = 0x80000001B2335980;
  v6[2] = 0;
  v6[3] = 0;
  if ((a1 & 0x4800) == 0x4000)
    v3 = 0xD00000000000001BLL;
  v6[4] = MEMORY[0x1E0DEE9D8];
  v6[5] = v3;
  v4 = 0x80000001B23359A0;
  if ((a1 & 0x4800) == 0x4000)
    v4 = 0x80000001B23359C0;
  v6[6] = v4;
  v6[7] = 0;
  v6[8] = 0;
  v6[9] = MEMORY[0x1E0DEE9D8];
  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  nullsub_16(v6);
  return sub_1B1A18378((uint64_t)v6, a2, &qword_1ED4B8CF8, (uint64_t)&type metadata for RenderFunctions);
}

void *sub_1B1C4C814(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  _QWORD *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  unsigned int v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float32x4_t v19;
  int8x16_t v20;
  __int8 v21;
  float32x4_t v22;
  int32x4_t v23;
  float32x2_t v24;
  float32x2_t v25;
  char v26;
  int v27;
  int v28;
  int v29;
  char v30;
  unint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int16 v36;
  int v37;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int64x2_t v47;
  double v48;
  __int16 v50;
  int8x16_t v51;
  int8x16_t v52;
  unsigned int v53;
  int8x16_t v54;
  __int128 v55;
  void *v57;
  uint64_t v59;
  uint64_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  __int128 v64;
  __int128 v65;
  int32x2_t v66;
  double v67;
  _BYTE v68[80];
  _OWORD v69[4];
  char v70;
  _OWORD v71[4];
  float v72;
  int v73;
  float v74;
  int v75;
  __int128 v76;
  float32x4_t v77;
  int v78;
  float32x2_t v79;
  __int16 v80;
  int v81;
  char v82;
  char v83;

  v4 = v3;
  v8 = *a3;
  v9 = (_QWORD *)a3[1];
  swift_retain_n();
  sub_1B1D15764(v9, (uint64_t)v68);
  swift_release();
  sub_1B1A18378((uint64_t)v68, (uint64_t)v69, qword_1ED4B8BB0, (uint64_t)&type metadata for WorldTransform);
  if ((v70 & 1) != 0)
  {
    v10 = xmmword_1B2244E20;
    v11 = xmmword_1B2244D90;
    v12 = xmmword_1B2244DD0;
    v13 = xmmword_1B2244DB0;
  }
  else
  {
    v13 = v69[0];
    v12 = v69[1];
    v11 = v69[2];
    v10 = v69[3];
  }
  v14 = *(_DWORD *)(v4 + 64);
  v64 = v11;
  v65 = v10;
  v62 = (float32x4_t)v12;
  v63 = (float32x4_t)v13;
  if (v14 - 11 > 0xF4)
  {
    v17 = *(float *)(v4 + 8);
    v15 = -1.0;
    if (v17 >= 0.0)
    {
      if (v17 > -1.0)
        v15 = *(float *)(v4 + 8);
      else
        v15 = -1.0;
    }
  }
  else
  {
    v15 = 1.0 / (float)v14;
    v16 = *(float *)(v4 + 8);
    if (v16 >= 0.0 && v16 > v15)
      v15 = *(float *)(v4 + 8);
  }
  v18 = *(float *)(v4 + 100);
  if (*(_BYTE *)(v4 + 76) == 2)
  {
    v19 = *(float32x4_t *)(v4 + 80);
    v20 = (int8x16_t)vabsq_f32(v19);
    if (*(float *)v20.i32 > 0.00000011921
      || (v20.i32[0] = vextq_s8(v20, v20, 8uLL).u32[0],
          *(int32x2_t *)v20.i8 = vcge_f32((float32x2_t)0x3400000034000000, *(float32x2_t *)v20.i8),
          (v20.i8[4] & 1) == 0)
      || (v21 = v20.i8[0], v22 = 0uLL, (v21 & 1) == 0))
    {
      v23 = (int32x4_t)vmulq_f32(v19, v19);
      v23.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v23, 2), vadd_f32(*(float32x2_t *)v23.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v23.i8, 1))).u32[0];
      v24 = vrsqrte_f32((float32x2_t)v23.u32[0]);
      v25 = vmul_f32(v24, vrsqrts_f32((float32x2_t)v23.u32[0], vmul_f32(v24, v24)));
      v22 = vmulq_n_f32(v19, vmul_f32(v25, vrsqrts_f32((float32x2_t)v23.u32[0], vmul_f32(v25, v25))).f32[0]);
    }
  }
  else
  {
    v22 = (float32x4_t)xmmword_1B2244DD0;
  }
  v61 = v22;
  if (v18 == 0.0)
    v26 = *(_BYTE *)(v4 + 104);
  else
    v26 = 1;
  v27 = *(_DWORD *)(v4 + 72);
  v60 = *(_QWORD *)(v4 + 48);
  v59 = *(_QWORD *)(v4 + 56);
  v28 = *(_DWORD *)(v4 + 108);
  v29 = *(_DWORD *)(v4 + 116);
  v30 = *(_BYTE *)(v4 + 112);
  v66 = 0;
  v31 = *(_QWORD *)(v4 + 36);
  if ((*(_BYTE *)(v4 + 136) & 1) != 0 && sub_1B20F26A4(*(_QWORD *)(v4 + 36), v71))
  {
    swift_getObjectType();
    v67 = sub_1B1F9C1A0();
    swift_unknownObjectRelease();
    v32 = 0;
    v66 = (int32x2_t)vmul_f32(*(float32x2_t *)&v67, (float32x2_t)vdup_n_s32(0x3C23D70Au));
  }
  else
  {
    v32 = 1;
  }
  v33 = sub_1B1D16738(v31);
  v37 = v36 & 0xFF00;
  __asm { FMOV            V0.2S, #1.0 }
  if (v34 <= 1)
    v42 = 1;
  else
    v42 = v34;
  v43 = 1024;
  if (v42 >= 1024)
    v42 = 1024;
  if (v33 <= 1)
    v44 = 1;
  else
    v44 = v33;
  if (v44 < 1024)
    v43 = v44;
  v45 = v43 * v42;
  if ((v36 & 1) != 0)
    v46 = v43 * v42;
  else
    v46 = v35;
  if (v45 >= v46)
    LOWORD(v45) = v46;
  v47.i64[0] = v43;
  v47.i64[1] = v42;
  v48 = COERCE_DOUBLE(vdiv_f32(_D0, vcvt_f32_f64(vcvtq_f64_s64(v47))));
  _ZF = v37 == 768;
  if (v37 == 768)
    v50 = 1;
  else
    v50 = v45;
  if (!_ZF)
    *(double *)&_D0 = v48;
  v51 = (int8x16_t)vdupq_lane_s32(v66, 0);
  v52 = (int8x16_t)vdupq_lane_s32(v66, 1);
  if (v32)
    v53 = -1;
  else
    v53 = 0;
  v54 = (int8x16_t)vdupq_n_s32(v53);
  LODWORD(v55) = v60;
  *((float *)&v55 + 1) = -*((float *)&v60 + 1);
  DWORD2(v55) = v59;
  *((float *)&v55 + 3) = *((float *)&v59 + 1) + 1.0;
  __asm { FMOV            V4.4S, #1.0 }
  v71[0] = vmulq_f32(v63, (float32x4_t)vbslq_s8(v54, _Q4, v51));
  v71[1] = vmulq_f32(v62, (float32x4_t)vbslq_s8(v54, _Q4, v52));
  v71[2] = v64;
  v71[3] = v65;
  v72 = v15;
  v73 = v27;
  v74 = v18;
  v75 = v28;
  v76 = v55;
  v77 = v61;
  v78 = 0;
  v79 = _D0;
  v80 = v50;
  v81 = v29;
  v82 = v30;
  v83 = v26;
  swift_retain();
  v57 = sub_1B1D2CF18(v71, a1, a2, (uint64_t)a3, v4, v8, v4);
  swift_release_n();
  return v57;
}

uint64_t sub_1B1C4CBC8(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 28) = result;
  return result;
}

uint64_t sub_1B1C4CBD0()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 36);
}

uint64_t sub_1B1C4CBD8(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 36) = result;
  return result;
}

uint64_t sub_1B1C4CBE0()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 44);
}

uint64_t sub_1B1C4CBE8(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 44) = result;
  return result;
}

uint64_t sub_1B1C4CBF0()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 45);
}

uint64_t sub_1B1C4CBF8(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 45) = result;
  return result;
}

uint64_t sub_1B1C4CC00(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)v1 = result;
  *(_BYTE *)(v1 + 4) = BYTE4(result) & 1;
  return result;
}

double (*sub_1B1C4CC10())(_QWORD)
{
  return nullsub_16;
}

uint64_t sub_1B1C4CC20()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 64);
}

uint64_t sub_1B1C4CC28(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 64) = result;
  return result;
}

uint64_t sub_1B1C4CC30()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 68);
}

uint64_t sub_1B1C4CC38(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 68) = result;
  return result;
}

double (*sub_1B1C4CC40())(_QWORD)
{
  return nullsub_16;
}

uint64_t sub_1B1C4CC50()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 69);
}

uint64_t sub_1B1C4CC58(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 69) = result;
  return result;
}

float sub_1B1C4CC60()
{
  uint64_t v0;

  return *(float *)(v0 + 72);
}

void sub_1B1C4CC68(float a1)
{
  uint64_t v1;

  *(float *)(v1 + 72) = a1;
}

uint64_t sub_1B1C4CC70()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 28);
}

unint64_t sub_1B1C4CC78()
{
  unsigned int *v0;

  return *v0 | ((unint64_t)*((unsigned __int8 *)v0 + 4) << 32);
}

uint64_t sub_1B1C4CC98()
{
  uint64_t v0;

  type metadata accessor for RenderPipelineFactory();
  swift_allocObject();
  v0 = sub_1B20C3C0C(4);
  *(_QWORD *)(v0 + 88) = sub_1B1C4C74C;
  *(_QWORD *)(v0 + 96) = 0;
  swift_release();
  return v0;
}

uint64_t sub_1B1C4CCEC(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;

  v3 = *(_DWORD *)(v2 + 64);
  v4 = *(unsigned __int8 *)(v2 + 96);
  *(_QWORD *)(result + 16) = 4;
  *(_QWORD *)(a2 + 32) = 2 * v4 + 4;
  if (v3 <= 0xFF)
  {
    *(_DWORD *)(result + 136) = v3;
    *(_DWORD *)(result + 140) = v3;
  }
  return result;
}

void *sub_1B1C4CD18(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return sub_1B1C4C814(a1, a2, a3);
}

uint64_t sub_1B1C4CD6C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t ObjectType;
  void (*v5)(uint64_t, _QWORD, uint64_t, uint64_t);

  ObjectType = swift_getObjectType();
  v5 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(a2 + 8);
  v5(v2 + 28, 0, ObjectType, a2);
  v5(v2 + 36, 0, ObjectType, a2);
  v5(v2 + 120, 0, ObjectType, a2);
  return ((uint64_t (*)(uint64_t, _QWORD, uint64_t, uint64_t))v5)(v2 + 128, 0, ObjectType, a2);
}

double sub_1B1C4CDFC@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_DWORD *)a1 = 1;
  *(_BYTE *)(a1 + 4) = 1;
  *(_DWORD *)(a1 + 8) = -1082130432;
  *(_QWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 24) = 0;
  *(_QWORD *)&_Q0 = 0xFFFFFFFFLL;
  *((_QWORD *)&_Q0 + 1) = 0xFFFFFFFFLL;
  *(_OWORD *)(a1 + 28) = _Q0;
  *(_WORD *)(a1 + 44) = 256;
  __asm { FMOV            V0.2S, #1.0 }
  *(_QWORD *)(a1 + 48) = _Q0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 64) = 256;
  *(_WORD *)(a1 + 68) = 256;
  *(_DWORD *)(a1 + 72) = 0;
  *(_BYTE *)(a1 + 76) = 0;
  *(_OWORD *)(a1 + 80) = xmmword_1B2244DD0;
  *(_BYTE *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 100) = 0;
  *(_WORD *)(a1 + 104) = 256;
  *(_DWORD *)(a1 + 108) = 0;
  *(_BYTE *)(a1 + 112) = 0;
  *(_DWORD *)(a1 + 116) = 1065353216;
  *(_QWORD *)&result = 0xFFFFFFFFLL;
  *(_QWORD *)(a1 + 120) = 0xFFFFFFFFLL;
  *(_DWORD *)(a1 + 135) = 0;
  *(_QWORD *)(a1 + 128) = 0xFFFFFFFFLL;
  return result;
}

uint64_t sub_1B1C4CE90(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t result;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v13)(uint64_t, uint64_t, uint64_t);
  __int128 v14;
  char v15;

  v3 = v1;
  sub_1B19F8E54(0, (unint64_t *)&unk_1EEF5AFF0, (uint64_t (*)(void))sub_1B1B668A0, (uint64_t)&type metadata for ParticleDefaultRendererableCodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = (char *)&v14 - v9;
  result = sub_1B1B640CC(a1, (uint64_t)&v14 - v9);
  if (!v2)
  {
    *(_QWORD *)&v14 = *(_QWORD *)(v3 + 48);
    v15 = 11;
    v12 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD20];
    sub_1B19F8E54(0, &qword_1ED4BB080, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], MEMORY[0x1E0DEDD20]);
    sub_1B1A09538((unint64_t *)&qword_1ED4B72D8, &qword_1ED4BB080, v12, MEMORY[0x1E0DEDD30]);
    sub_1B2229958();
    *(_QWORD *)&v14 = *(_QWORD *)(v3 + 56);
    v15 = 12;
    sub_1B2229958();
    LOBYTE(v14) = *(_BYTE *)(v3 + 76);
    v15 = 13;
    sub_1B1A71620();
    sub_1B2229958();
    v14 = *(_OWORD *)(v3 + 80);
    v15 = 14;
    v13 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50];
    sub_1B19F8E54(0, (unint64_t *)&qword_1ED4BB0A0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50]);
    sub_1B1A09538((unint64_t *)&qword_1ED4B72F8, (unint64_t *)&qword_1ED4BB0A0, v13, MEMORY[0x1E0DEDD60]);
    sub_1B2229958();
    LOBYTE(v14) = *(_BYTE *)(v3 + 96);
    v15 = 15;
    sub_1B1A717F4();
    sub_1B2229958();
    LOBYTE(v14) = 16;
    sub_1B2229934();
    LOBYTE(v14) = 25;
    sub_1B222991C();
    LOBYTE(v14) = 17;
    sub_1B2229934();
    LOBYTE(v14) = 18;
    sub_1B2229934();
    LOBYTE(v14) = 19;
    sub_1B222991C();
    *(_QWORD *)&v14 = *(_QWORD *)(v3 + 120);
    v15 = 20;
    sub_1B1A0895C();
    sub_1B2229958();
    *(_QWORD *)&v14 = *(_QWORD *)(v3 + 128);
    v15 = 21;
    sub_1B2229958();
    LOBYTE(v14) = 22;
    sub_1B222991C();
    LOBYTE(v14) = 23;
    sub_1B222991C();
    LOBYTE(v14) = *(_BYTE *)(v3 + 138);
    v15 = 24;
    sub_1B1A70ED0();
    sub_1B2229958();
    LOBYTE(v14) = 26;
    sub_1B222991C();
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  }
  return result;
}

__n128 sub_1B1C4D320@<Q0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __n128 result;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  _OWORD v8[7];
  _OWORD v9[2];

  sub_1B1C4D5FC(a1, (int *)v8);
  if (!v2)
  {
    v5 = v9[0];
    *(_OWORD *)(a2 + 96) = v8[6];
    *(_OWORD *)(a2 + 112) = v5;
    *(_OWORD *)(a2 + 123) = *(_OWORD *)((char *)v9 + 11);
    v6 = v8[3];
    *(_OWORD *)(a2 + 32) = v8[2];
    *(_OWORD *)(a2 + 48) = v6;
    v7 = v8[5];
    *(_OWORD *)(a2 + 64) = v8[4];
    *(_OWORD *)(a2 + 80) = v7;
    result = (__n128)v8[1];
    *(_OWORD *)a2 = v8[0];
    *(__n128 *)(a2 + 16) = result;
  }
  return result;
}

uint64_t sub_1B1C4D378(_QWORD *a1)
{
  return sub_1B1C4CE90(a1);
}

uint64_t sub_1B1C4D3C8(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t result;
  float v5;
  float v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  float v14;
  int v15;
  int v16;
  float v17;
  int v18;
  int v19;
  float v20;
  float v21;
  float v22;
  char v23;
  char v24;
  char v25;
  int v26;
  char v27;

  v3 = *(_DWORD *)(a1 + 36);
  result = 1;
  if (v3 != *(_DWORD *)(a2 + 36)
    || *(_DWORD *)(a1 + 40) != *(_DWORD *)(a2 + 40)
    || ((*(unsigned __int8 *)(a1 + 44) ^ *(unsigned __int8 *)(a2 + 44)) & 1) != 0
    || ((*(unsigned __int8 *)(a1 + 45) ^ *(unsigned __int8 *)(a2 + 45)) & 1) != 0)
  {
    return result;
  }
  v5 = *(float *)a1;
  v6 = *(float *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(unsigned __int8 *)(a1 + 24);
  v9 = *(_DWORD *)(a1 + 28);
  v10 = *(_DWORD *)(a1 + 32);
  v11 = *(_DWORD *)(a1 + 64);
  v12 = *(unsigned __int8 *)(a1 + 68);
  v13 = *(unsigned __int8 *)(a1 + 69);
  v14 = *(float *)(a1 + 72);
  v15 = *(unsigned __int8 *)(a1 + 76);
  v16 = *(unsigned __int8 *)(a1 + 96);
  v17 = *(float *)(a1 + 100);
  v18 = *(unsigned __int8 *)(a1 + 104);
  v19 = *(unsigned __int8 *)(a1 + 105);
  v20 = *(float *)a2;
  v21 = *(float *)(a2 + 8);
  v22 = *(float *)(a2 + 100);
  if (*(_BYTE *)(a1 + 4) == 1)
  {
    if (v5 == 0.0)
    {
      if (v20 == 0.0)
        v25 = *(_BYTE *)(a2 + 4);
      else
        v25 = 0;
      if ((v25 & 1) == 0)
        return 1;
    }
    else if (LODWORD(v5) == 1)
    {
      if (LODWORD(v20) == 1)
        v23 = *(_BYTE *)(a2 + 4);
      else
        v23 = 0;
      if ((v23 & 1) == 0)
        return 1;
    }
    else
    {
      if (LODWORD(v20) > 1)
        v26 = *(unsigned __int8 *)(a2 + 4);
      else
        v26 = 0;
      if (v26 != 1)
        return 1;
    }
    result = 1;
    if (v6 != v21)
      return result;
  }
  else
  {
    if (v5 == v20)
      v24 = *(_BYTE *)(a2 + 4);
    else
      v24 = 1;
    result = 1;
    if ((v24 & 1) != 0 || v6 != v21)
      return result;
  }
  if (v8 != *(unsigned __int8 *)(a2 + 24)
    || v11 != *(_DWORD *)(a2 + 64)
    || v12 != *(unsigned __int8 *)(a2 + 68)
    || ((v13 ^ *(unsigned __int8 *)(a2 + 69)) & 1) != 0
    || v14 <= 0.0 == *(float *)(a2 + 72) > 0.0
    || v16 != *(unsigned __int8 *)(a2 + 96)
    || v15 != *(unsigned __int8 *)(a2 + 76))
  {
    return result;
  }
  if (v17 == 0.0)
  {
    if (v22 == 0.0)
    {
      if (v18 != *(unsigned __int8 *)(a2 + 104))
        return result;
    }
    else if ((v18 & 1) == 0)
    {
      return result;
    }
    goto LABEL_44;
  }
  if (v22 == 0.0)
    v27 = *(_BYTE *)(a2 + 104);
  else
    v27 = 1;
  if ((v27 & 1) != 0)
  {
LABEL_44:
    if (v7 == *(_QWORD *)(a2 + 16) && v9 == *(_DWORD *)(a2 + 28) && v10 == *(_DWORD *)(a2 + 32))
      return v19 ^ *(unsigned __int8 *)(a2 + 105);
    else
      return 1;
  }
  return result;
}

unint64_t sub_1B1C4D5B8()
{
  unint64_t result;

  result = qword_1ED4B95E0;
  if (!qword_1ED4B95E0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2286160, &type metadata for ParticleQuadRenderer.Shape);
    atomic_store(result, (unint64_t *)&qword_1ED4B95E0);
  }
  return result;
}

uint64_t sub_1B1C4D5FC@<X0>(_QWORD *a1@<X0>, int *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v19)(uint64_t, uint64_t, uint64_t);
  __int128 v20;
  int v21;
  uint64_t v22;
  float v23;
  uint64_t v24;
  float v25;
  int v26;
  int v27;
  uint64_t result;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  char v36;
  int v37;
  int v38;
  uint64_t v39;
  char v40;
  char v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  int v46;
  float v47;
  int v48;
  int *v49;
  __int128 v50;
  __int128 v51;
  int v52;
  int v53;
  __int128 v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int *v62;
  __int128 v63;
  __int128 v64;
  char v65;
  char v66;
  int v67;
  char v68;
  int v69;
  uint64_t v70;
  char v71;
  __int128 v72;
  __int16 v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  __int16 v77;
  int v78;
  unsigned __int8 v79;
  __int128 v80;
  unsigned __int8 v81;
  int v82;
  __int16 v83;
  float v84;
  unsigned __int8 v85;
  int v86;
  _BYTE v87[19];

  sub_1B19F8E54(0, &qword_1ED4BAC38, (uint64_t (*)(void))sub_1B1B668A0, (uint64_t)&type metadata for ParticleDefaultRendererableCodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = (char *)&v50 - v9;
  v67 = 1;
  v68 = 1;
  v69 = -1082130432;
  v70 = 0;
  v71 = 0;
  *(_QWORD *)&_Q0 = 0xFFFFFFFFLL;
  *((_QWORD *)&_Q0 + 1) = 0xFFFFFFFFLL;
  v72 = _Q0;
  v73 = 256;
  __asm { FMOV            V0.2S, #1.0 }
  v74 = _Q0;
  v75 = 0;
  v76 = 256;
  v77 = 256;
  v78 = 0;
  v79 = 0;
  v63 = xmmword_1B2244DD0;
  v80 = xmmword_1B2244DD0;
  v81 = 0;
  v82 = 0;
  v83 = 256;
  v84 = 0.0;
  v85 = 0;
  v86 = 1065353216;
  *(_QWORD *)v87 = 0xFFFFFFFFLL;
  *(_DWORD *)&v87[15] = 0;
  *(_DWORD *)&v87[8] = -1;
  *(_DWORD *)&v87[12] = 0;
  sub_1B1B64F74(a1);
  if (v2)
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  v16 = a1[3];
  v17 = a1[4];
  sub_1B19FA070(a1, v16);
  if (sub_1B2067BAC(1046, v16, v17))
  {
    v18 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD20];
    sub_1B19F8E54(0, &qword_1ED4BB080, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], MEMORY[0x1E0DEDD20]);
    v66 = 11;
    sub_1B1A09538((unint64_t *)&qword_1ED4B72F0, &qword_1ED4BB080, v18, MEMORY[0x1E0DEDD40]);
    sub_1B2229814();
    v74 = v64;
    v66 = 12;
    sub_1B2229814();
    v75 = v64;
  }
  v66 = 13;
  sub_1B1A715DC();
  sub_1B2229814();
  v62 = a2;
  v79 = v64;
  v19 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50];
  sub_1B19F8E54(0, (unint64_t *)&qword_1ED4BB0A0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50]);
  v66 = 14;
  sub_1B1A09538((unint64_t *)&qword_1ED4B7310, (unint64_t *)&qword_1ED4BB0A0, v19, MEMORY[0x1E0DEDD70]);
  sub_1B22297B4();
  v20 = v63;
  if ((v65 & 1) == 0)
    v20 = v64;
  v80 = v20;
  v66 = 15;
  sub_1B1A717B0();
  sub_1B2229814();
  v81 = v64;
  LOBYTE(v64) = 25;
  LOBYTE(v83) = sub_1B2229784() & 1;
  LOBYTE(v64) = 16;
  sub_1B22297F0();
  v82 = v21;
  LOBYTE(v64) = 17;
  v22 = sub_1B222979C();
  v23 = *(float *)&v22;
  if ((v22 & 0x100000000) != 0)
    v23 = 0.0;
  v84 = v23;
  LOBYTE(v64) = 18;
  v24 = sub_1B222979C();
  v25 = *(float *)&v24;
  if ((v24 & 0x100000000) != 0)
    v25 = 1.0;
  v86 = LODWORD(v25);
  LOBYTE(v64) = 19;
  v85 = sub_1B2229784() & 1;
  v66 = 20;
  sub_1B1A08878();
  sub_1B22297B4();
  v26 = DWORD1(v64);
  if (BYTE8(v64))
    v27 = -1;
  else
    v27 = v64;
  if (BYTE8(v64))
    v26 = 0;
  *(_DWORD *)v87 = v27;
  *(_DWORD *)&v87[4] = v26;
  v66 = 21;
  sub_1B22297B4();
  v29 = DWORD1(v64);
  if (BYTE8(v64))
    v30 = -1;
  else
    v30 = v64;
  if (BYTE8(v64))
    v29 = 0;
  *(_DWORD *)&v87[8] = v30;
  *(_DWORD *)&v87[12] = v29;
  v31 = a1[3];
  v32 = a1[4];
  sub_1B19FA070(a1, v31);
  if (sub_1B2067BAC(1077, v31, v32))
  {
    LOBYTE(v64) = 22;
    v87[16] = sub_1B22297D8() & 1;
  }
  v33 = a1[3];
  v34 = a1[4];
  sub_1B19FA070(a1, v33);
  if (sub_1B2067BAC(1076, v33, v34))
  {
    LOBYTE(v64) = 23;
    v87[17] = sub_1B22297D8() & 1;
    v66 = 24;
    sub_1B1A70E8C();
    sub_1B2229814();
    v87[18] = v64;
  }
  LOBYTE(v64) = 26;
  v35 = sub_1B2229784();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  v36 = (v35 == 2) | v35 & 1;
  HIBYTE(v83) = v36;
  v37 = v67;
  v38 = v69;
  v39 = v70;
  v40 = v71;
  v41 = v73;
  v42 = HIBYTE(v73);
  v43 = v74;
  v44 = v75;
  v58 = v76;
  v57 = v77;
  v56 = HIBYTE(v77);
  v45 = v78;
  v55 = v79;
  v54 = v80;
  v53 = v81;
  v46 = v82;
  v52 = v83;
  v47 = v84;
  v59 = v85;
  v48 = v86;
  LODWORD(v63) = v87[16];
  v61 = v87[17];
  v60 = v87[18];
  LOBYTE(v64) = v68;
  v50 = v72;
  v51 = *(_OWORD *)v87;
  result = _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  v49 = v62;
  *v62 = v37;
  *((_BYTE *)v49 + 4) = v64;
  v49[2] = v38;
  *((_QWORD *)v49 + 2) = v39;
  *((_BYTE *)v49 + 24) = v40;
  *(_OWORD *)(v49 + 7) = v50;
  *((_BYTE *)v49 + 44) = v41;
  *((_BYTE *)v49 + 45) = v42;
  *((_QWORD *)v49 + 6) = v43;
  *((_QWORD *)v49 + 7) = v44;
  v49[16] = v58;
  *((_BYTE *)v49 + 68) = v57;
  *((_BYTE *)v49 + 69) = v56;
  v49[18] = v45;
  *((_BYTE *)v49 + 76) = v55;
  *((_OWORD *)v49 + 5) = v54;
  *((_BYTE *)v49 + 96) = v53;
  v49[25] = v46;
  *((_BYTE *)v49 + 104) = v52;
  *((_BYTE *)v49 + 105) = v36;
  *((float *)v49 + 27) = v47;
  *((_BYTE *)v49 + 112) = v59;
  v49[29] = v48;
  *(_OWORD *)(v49 + 30) = v51;
  *((_BYTE *)v49 + 136) = v63;
  *((_BYTE *)v49 + 137) = v61;
  *((_BYTE *)v49 + 138) = v60;
  return result;
}

uint64_t storeEnumTagSinglePayload for ParticleQuadRenderer.Shape(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1B1C4DF48 + 4 * byte_1B2285F85[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1B1C4DF7C + 4 * byte_1B2285F80[v4]))();
}

uint64_t sub_1B1C4DF7C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1C4DF84(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B1C4DF8CLL);
  return result;
}

uint64_t sub_1B1C4DF98(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B1C4DFA0);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1B1C4DFA4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1C4DFAC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ParticleQuadRenderer.Shape()
{
  return &type metadata for ParticleQuadRenderer.Shape;
}

unint64_t sub_1B1C4DFCC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EEF5CA50;
  if (!qword_1EEF5CA50)
  {
    sub_1B1A02758(255, &qword_1EEF5CA58, (uint64_t)&type metadata for ParticleQuadRenderer.Shape, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    result = MEMORY[0x1B5E23E74](MEMORY[0x1E0DEAF50], v1);
    atomic_store(result, (unint64_t *)&qword_1EEF5CA50);
  }
  return result;
}

unint64_t sub_1B1C4E030()
{
  unint64_t result;

  result = qword_1EEF5CA60;
  if (!qword_1EEF5CA60)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2286138, &type metadata for ParticleQuadRenderer.Shape);
    atomic_store(result, (unint64_t *)&qword_1EEF5CA60);
  }
  return result;
}

ValueMetadata *type metadata accessor for FieldRecord()
{
  return &type metadata for FieldRecord;
}

unint64_t sub_1B1C4E084(uint64_t a1)
{
  unint64_t result;

  result = sub_1B1C4E0A8();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1B1C4E0A8()
{
  unint64_t result;

  result = qword_1EEF5CA68;
  if (!qword_1EEF5CA68)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22861A4, &type metadata for FieldRecord);
    atomic_store(result, (unint64_t *)&qword_1EEF5CA68);
  }
  return result;
}

ValueMetadata *type metadata accessor for _FieldRecord()
{
  return &type metadata for _FieldRecord;
}

uint64_t sub_1B1C4E0FC(_QWORD *a1, float a2, float a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v13;
  float v14;
  float v15;

  sub_1B1C4EBD0(0, &qword_1EEF5CA80, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED170]);
  v7 = v6;
  v8 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v9);
  v11 = (char *)&v13 - v10;
  sub_1B19FA070(a1, a1[3]);
  sub_1B1C4EB8C();
  sub_1B222A180();
  v14 = a2;
  v15 = a3;
  sub_1B1B4D924();
  sub_1B1B67480(qword_1EEF5B108, MEMORY[0x1E0DEB198], MEMORY[0x1E0DEB880]);
  sub_1B2229958();
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v7);
}

uint64_t sub_1B1C4E224@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x65676E6172 && a2 == 0xE500000000000000)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_1B2229D24();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_1B1C4E2B0()
{
  sub_1B1C4EB8C();
  return sub_1B222A1D4();
}

uint64_t sub_1B1C4E2D8()
{
  sub_1B1C4EB8C();
  return sub_1B222A1E0();
}

void sub_1B1C4E300(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  float v4;
  int v5;

  v4 = sub_1B1C4E908(a1);
  if (!v2)
  {
    *(float *)a2 = v4;
    *(_DWORD *)(a2 + 4) = v5;
  }
}

uint64_t sub_1B1C4E328(_QWORD *a1)
{
  float *v1;

  return sub_1B1C4E0FC(a1, *v1, v1[1]);
}

uint64_t sub_1B1C4E340()
{
  return type metadata accessor for ParticleMassInit.System();
}

double sub_1B1C4E35C()
{
  uint64_t v0;
  double result;

  sub_1B1BDB5D0();
  v0 = swift_allocObject();
  *(_QWORD *)&result = 1;
  *(_OWORD *)(v0 + 16) = xmmword_1B226D240;
  *(_QWORD *)(v0 + 32) = &type metadata for Mass;
  *(_QWORD *)(v0 + 40) = &off_1E63B9850;
  return result;
}

double sub_1B1C4E3A0@<D0>(double *a1@<X8>)
{
  double result;

  __asm { FMOV            V0.2S, #1.0 }
  *a1 = result;
  return result;
}

uint64_t *sub_1B1C4E3AC(float a1, float a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __int128 v7;
  uint64_t *result;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int32x2_t v12;
  unsigned int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  os_unfair_lock_s *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  float v25;
  float v26;
  BOOL v27;
  float v28;
  int32x4_t *v29;
  unint64_t v30;
  uint64_t v31;
  __int32 *v32;
  int32x4_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  __int32 v43;
  uint64_t v44[12];
  _OWORD v45[2];
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  _OWORD v52[2];
  uint64_t v53;
  _OWORD v54[2];
  uint64_t v55;
  _BYTE v56[48];
  _QWORD *v57;

  v7 = *(_OWORD *)(a5 + 104);
  v54[0] = *(_OWORD *)(a5 + 88);
  v54[1] = v7;
  v55 = *(_QWORD *)(a5 + 120);
  sub_1B1E8FCE4(a4, (uint64_t)v54, 0x200000000, v44);
  result = (uint64_t *)sub_1B19F66A0((uint64_t)v44, (uint64_t)v45, (unint64_t *)&qword_1ED4B7DE0);
  if (*(_QWORD *)&v45[0])
  {
    if (v51 >= 1)
    {
      v39 = v48;
      if (v48)
      {
        v9 = 0;
        v10 = v50[4];
        v11 = *(unsigned __int8 *)(v49 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
        v12.i32[1] = DWORD1(v45[0]);
        v52[0] = v45[0];
        v52[1] = v45[1];
        v53 = v46;
        v35 = (uint64_t)(v50 + 6);
        v36 = v47;
        v57 = v50;
        v34 = v50 + 8;
        *(float *)v12.i32 = 1.0 / a1;
        if (a1 <= 0.001)
          *(float *)v12.i32 = 1000.0;
        v43 = v12.i32[0];
        v33 = vdupq_lane_s32(v12, 0);
        v37 = v11;
        v38 = v10;
        do
        {
          v13 = (unsigned int *)(v36 + 48 * v9);
          v15 = *v13;
          v14 = v13[1];
          v41 = *((_QWORD *)v13 + 3);
          v42 = (uint64_t *)*((_QWORD *)v13 + 2);
          v16 = *((_QWORD *)v13 + 5);
          v40 = *((_QWORD *)v13 + 4);
          if (v11)
          {
            v17 = *(os_unfair_lock_s **)(v16 + 376);
            swift_retain_n();
            os_unfair_lock_lock(v17);
            os_unfair_lock_lock(*(os_unfair_lock_t *)(v16 + 344));
            swift_release();
          }
          else
          {
            swift_retain();
          }
          ecs_stack_allocator_push_snapshot(v10);
          sub_1B19F66A0(v35, (uint64_t)v56, &qword_1ED4B7FB0);
          v18 = v57;
          v19 = v57[4];
          v20 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v16 + 40) + 16) + 32) + 16) + 1;
          swift_retain();
          v18[6] = ecs_stack_allocator_allocate(v19, 48 * v20, 8);
          v18[7] = v20;
          v34[1] = 0;
          v34[2] = 0;
          *v34 = 0;
          swift_release();
          v21 = sub_1B1A12038((uint64_t)&type metadata for Mass, (uint64_t)&off_1E63B9850, v42, v41, v40, (uint64_t)v18);
          v22 = v21;
          if (a1 != a2)
          {
            if ((_DWORD)v15 != (_DWORD)v14)
            {
              do
              {
                do
                  v25 = (float)((float)(a2 - a1) * (float)((float)(sub_1B2130F84() & 0xFFFFFF) * 0.000000059605)) + a1;
                while (v25 == a2);
                v26 = 1.0 / v25;
                v27 = v25 > 0.001;
                v28 = 1000.0;
                if (v27)
                  v28 = v26;
                *(float *)(v22 + 4 * v15++) = v28;
              }
              while (v15 != v14);
            }
            goto LABEL_28;
          }
          if ((_DWORD)v15 != (_DWORD)v14)
          {
            v23 = v14 - v15;
            if ((unint64_t)(v14 - v15) < 8)
            {
              v24 = v15;
LABEL_26:
              v31 = v14 - v24;
              v32 = (__int32 *)(v21 + 4 * v24);
              do
              {
                *v32++ = v43;
                --v31;
              }
              while (v31);
              goto LABEL_28;
            }
            v24 = (v23 & 0xFFFFFFFFFFFFFFF8) + v15;
            v29 = (int32x4_t *)(v21 + 4 * v15 + 16);
            v30 = v23 & 0xFFFFFFFFFFFFFFF8;
            do
            {
              v29[-1] = v33;
              *v29 = v33;
              v29 += 2;
              v30 -= 8;
            }
            while (v30);
            if (v23 != (v23 & 0xFFFFFFFFFFFFFFF8))
              goto LABEL_26;
          }
LABEL_28:
          sub_1B1F05D48(v57, (unsigned __int16 **)v52, (uint64_t)v56);
          sub_1B1F03804((char *)v16);
          v10 = v38;
          ecs_stack_allocator_pop_snapshot(v38);
          v11 = v37;
          if ((v37 & 1) != 0)
          {
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v16 + 344));
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v16 + 376));
          }
          swift_release();
          ++v9;
        }
        while (v9 != v39);
      }
    }
    return sub_1B19ED748(v44);
  }
  return result;
}

uint64_t sub_1B1C4E760(float a1, float a2)
{
  float v4;
  uint64_t result;

  v4 = a2 - a1;
  do
    result = sub_1B2130F84();
  while ((float)((float)(v4 * (float)((float)(result & 0xFFFFFF) * 0.000000059605)) + a1) == a2);
  return result;
}

uint64_t type metadata accessor for ParticleMassInit.System()
{
  return objc_opt_self();
}

uint64_t sub_1B1C4E7E0(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  char v5;
  char v6;
  float v7;
  float v8;
  uint64_t v9;

  v2 = *a1;
  v3 = a1[1];
  swift_retain_n();
  v4 = sub_1B1D16820(v3);
  v6 = v5;
  swift_release();
  if ((v6 & 1) != 0)
    v7 = 1.0;
  else
    v7 = *(float *)&v4;
  if ((v6 & 1) != 0)
    v8 = 1.0;
  else
    v8 = *((float *)&v4 + 1);
  v9 = a1[4];
  swift_retain();
  sub_1B1BEE528((uint64_t)a1);
  sub_1B1FE7224(v9, v2, v2, (uint64_t)a1, v7, v8);
  sub_1B1B4F21C((uint64_t)a1);
  return swift_release_n();
}

const char *sub_1B1C4E8A0()
{
  return "ParticleMassInit.CPU";
}

uint64_t type metadata accessor for ParticleMassInit.GPUSystem()
{
  return objc_opt_self();
}

const char *sub_1B1C4E8D8()
{
  return "ParticleMassInit.GPU";
}

uint64_t sub_1B1C4E8EC()
{
  return type metadata accessor for ParticleMassInit.GPUSystem();
}

float sub_1B1C4E908(_QWORD *a1)
{
  uint64_t v1;
  float v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  _DWORD v11[3];

  sub_1B1C4EBD0(0, &qword_1EEF5CA70, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED048]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v7);
  v9 = (char *)v11 - v8;
  sub_1B19FA070(a1, a1[3]);
  sub_1B1C4EB8C();
  sub_1B222A150();
  if (!v1)
  {
    sub_1B1B4D924();
    sub_1B1B67480((unint64_t *)&qword_1ED4BA5B0, MEMORY[0x1E0DEB1C0], MEMORY[0x1E0DEB8B0]);
    sub_1B2229814();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    v2 = *(float *)&v11[2];
  }
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  return v2;
}

uint64_t sub_1B1C4EA6C(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  float v8;
  float v9;
  uint64_t v10;
  uint64_t ObjectType;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD v18[2];

  v2 = a1[2];
  v3 = a1[3];
  v4 = a1[6];
  swift_retain();
  v5 = sub_1B1D16820(v3);
  v7 = v6;
  swift_release();
  v9 = *((float *)&v5 + 1);
  v8 = *(float *)&v5;
  if ((v7 & 1) != 0)
  {
    v8 = 1.0;
    v9 = 1.0;
  }
  *(float *)v18 = v8;
  *(float *)&v18[1] = v9;
  v10 = *a1;
  if (*a1)
  {
    ObjectType = swift_getObjectType();
    type metadata accessor for particle_set_mass_uniforms(0);
    sub_1B1F40E1C((uint64_t)v18, 1, ObjectType, v12, v13, v14, v15, v16);
  }
  swift_retain();
  sub_1B1B1FC34((uint64_t)a1);
  sub_1B1FE6FB8(v4, v2, v10 == 0, 0, (uint64_t)a1, 0xD000000000000011, 0x80000001B2335A60, 0);
  sub_1B1B1FC88((uint64_t)a1);
  return swift_release();
}

ValueMetadata *type metadata accessor for ParticleMassInit()
{
  return &type metadata for ParticleMassInit;
}

unint64_t sub_1B1C4EB8C()
{
  unint64_t result;

  result = qword_1EEF5CA78;
  if (!qword_1EEF5CA78)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22863F8, &type metadata for ParticleMassInit.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5CA78);
  }
  return result;
}

void sub_1B1C4EBD0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_1B1C4EB8C();
    v7 = a3(a1, &type metadata for ParticleMassInit.CodingKeys, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t storeEnumTagSinglePayload for ParticleMassInit.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1B1C4EC6C + 4 * asc_1B2286200[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1B1C4EC8C + 4 * byte_1B2286205[v4]))();
}

_BYTE *sub_1B1C4EC6C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1B1C4EC8C(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1B1C4EC94(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1B1C4EC9C(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1B1C4ECA4(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1B1C4ECAC(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for ParticleMassInit.CodingKeys()
{
  return &type metadata for ParticleMassInit.CodingKeys;
}

unint64_t sub_1B1C4ECCC()
{
  unint64_t result;

  result = qword_1EEF5CA88;
  if (!qword_1EEF5CA88)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22863D0, &type metadata for ParticleMassInit.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5CA88);
  }
  return result;
}

unint64_t sub_1B1C4ED14()
{
  unint64_t result;

  result = qword_1EEF5CA90;
  if (!qword_1EEF5CA90)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2286340, &type metadata for ParticleMassInit.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5CA90);
  }
  return result;
}

unint64_t sub_1B1C4ED5C()
{
  unint64_t result;

  result = qword_1EEF5CA98;
  if (!qword_1EEF5CA98)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2286368, &type metadata for ParticleMassInit.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5CA98);
  }
  return result;
}

uint64_t sub_1B1C4EDA0(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  int64_t v19;
  int64_t v20;
  int64_t v21;
  uint64_t result;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  _QWORD *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  void (*v37)(char *, uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  _QWORD v47[2];
  char *v48;
  char *v49;
  uint64_t *v50;
  char *v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  int64_t v55;
  __int128 v56;
  _QWORD v57[5];
  uint64_t v58;

  v50 = a2;
  v6 = sub_1B222826C();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1B1791524(0, (unint64_t *)&qword_1ED4B7B50, v11, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v12, v13);
  v51 = (char *)v47 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)v47 - v17;
  v19 = *(_QWORD *)(a1 + 16);
  if (!v19)
    return MEMORY[0x1E0DEE9D8];
  v49 = v10;
  v47[0] = a3;
  v47[1] = v3;
  v58 = MEMORY[0x1E0DEE9D8];
  v20 = v19;
  sub_1B202A210(0, v19, 0);
  v21 = v20;
  result = v58;
  v23 = (uint64_t *)(a1 + 40);
  v56 = xmmword_1B2281D30;
  v24 = (uint64_t)v51;
  v48 = v18;
  while (1)
  {
    v26 = *(v23 - 1);
    v25 = *v23;
    if (v26)
      break;
    v33 = 0;
LABEL_15:
    v58 = result;
    v45 = *(_QWORD *)(result + 16);
    v44 = *(_QWORD *)(result + 24);
    if (v45 >= v44 >> 1)
    {
      v55 = v21;
      v52 = v25;
      sub_1B202A210(v44 > 1, v45 + 1, 1);
      v25 = v52;
      v21 = v55;
      result = v58;
    }
    v23 += 2;
    *(_QWORD *)(result + 16) = v45 + 1;
    v46 = result + 16 * v45;
    *(_QWORD *)(v46 + 32) = v33;
    *(_QWORD *)(v46 + 40) = v25;
    if (!--v21)
      return result;
  }
  v52 = *v23;
  v54 = result;
  v55 = v21;
  v27 = *v50;
  if (!*(_QWORD *)(*v50 + 16)
    || (v28 = sub_1B1DC3AC8(v26), (v29 & 1) == 0)
    || (*(_BYTE *)(*(_QWORD *)(v27 + 56) + v28) & 1) != 0)
  {
    type metadata accessor for _PlaceholderNode(0);
    v30 = (_QWORD *)swift_allocObject();
    v57[3] = type metadata accessor for AuthoringNode();
    v57[4] = &off_1ED488F38;
    v57[0] = v26;
    sub_1B19FA198((uint64_t)v57, (uint64_t)v30 + OBJC_IVAR____TtC3VFX16_PlaceholderNode_oldNode);
    v30[4] = 0;
    v31 = MEMORY[0x1E0DEE9D8];
    v30[2] = MEMORY[0x1E0DEE9D8];
    v30[3] = 0;
    v32 = (char *)v30 + OBJC_IVAR____TtC3VFX4Node_authoringID;
    swift_retain_n();
    v53 = v32;
    sub_1B2228260();
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v57);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v18, 1, 1, v6);
    v33 = swift_allocObject();
    *(_OWORD *)(v33 + OBJC_IVAR____TtC3VFX13AuthoringNode_userInfoData) = v56;
    *(_QWORD *)(v33 + OBJC_IVAR____TtC3VFX13AuthoringNode_raw) = v30;
    *(_QWORD *)(v33 + OBJC_IVAR____TtC3VFX13AuthoringNode_inputs) = v31;
    sub_1B1B28FC8((uint64_t)v18, v24);
    LODWORD(v32) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v24, 1, v6);
    swift_retain();
    if ((_DWORD)v32 == 1)
    {
      v34 = (uint64_t)v18;
      v35 = v49;
      sub_1B2228260();
      sub_1B1B2900C(v34);
      sub_1B1B2900C(v24);
      v36 = v7;
      v37 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 32);
    }
    else
    {
      sub_1B1B2900C((uint64_t)v18);
      v38 = v24;
      v36 = v7;
      v37 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 32);
      v35 = v49;
      v37(v49, v38, v6);
    }
    v39 = v6;
    v40 = v33 + OBJC_IVAR____TtC3VFX13AuthoringNode_authoringID;
    v37((char *)(v33 + OBJC_IVAR____TtC3VFX13AuthoringNode_authoringID), (uint64_t)v35, v39);
    v41 = *(_QWORD *)(v33 + OBJC_IVAR____TtC3VFX13AuthoringNode_userInfoData);
    v42 = *(_QWORD *)(v33 + OBJC_IVAR____TtC3VFX13AuthoringNode_userInfoData + 8);
    *(_OWORD *)(v33 + OBJC_IVAR____TtC3VFX13AuthoringNode_userInfoData) = v56;
    sub_1B1A0DAC8(v41, v42);
    (*(void (**)(char *, uint64_t, uint64_t))(v36 + 24))(v53, v40, v39);
    swift_release();
    _s11DeletedNodeCMa_0(0);
    v43 = swift_dynamicCastClass();
    swift_release_n();
    v6 = v39;
    v7 = v36;
    if (v43)
    {
      swift_release();
      v33 = 0;
      v25 = 0;
      v24 = (uint64_t)v51;
    }
    else
    {
      v24 = (uint64_t)v51;
      v25 = v52;
    }
    v18 = v48;
    result = v54;
    v21 = v55;
    goto LABEL_15;
  }
  result = sub_1B1C6D250(v26, *(_QWORD *)v47[0]);
  __break(1u);
  return result;
}

uint64_t sub_1B1C4F1D0(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t (*v10)(uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int64_t v17;
  uint64_t result;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  _QWORD *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  void (*v32)(char *, uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  _QWORD v45[2];
  uint64_t *v46;
  char *v47;
  char *v48;
  char *v49;
  uint64_t *v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  _QWORD v56[5];
  uint64_t v57;

  v46 = a3;
  v50 = a2;
  v5 = sub_1B222826C();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1B1791524(0, (unint64_t *)&qword_1ED4B7B50, v10, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v11, v12);
  v49 = (char *)v45 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = *(_QWORD *)(a1 + 16);
  if (!v17)
    return MEMORY[0x1E0DEE9D8];
  v47 = v9;
  v48 = (char *)v45 - v16;
  v45[1] = v3;
  v57 = MEMORY[0x1E0DEE9D8];
  sub_1B202A210(0, v17, 0);
  result = v57;
  v19 = (uint64_t *)(a1 + 40);
  v54 = xmmword_1B2281D30;
  v20 = (uint64_t)v49;
  do
  {
    v22 = *(v19 - 1);
    v21 = *v19;
    if (v22)
    {
      v51 = *v19;
      v55 = result;
      v23 = *v50;
      if (*(_QWORD *)(*v50 + 16)
        && (v24 = sub_1B1DC3AC8(v22), (v25 & 1) != 0)
        && (*(_BYTE *)(*(_QWORD *)(v23 + 56) + v24) & 1) == 0)
      {
        v42 = *v46;
        if (*(_QWORD *)(*v46 + 16) && (v43 = sub_1B1DC3AC8(v22), (v44 & 1) != 0))
        {
          v30 = *(_QWORD *)(*(_QWORD *)(v42 + 56) + 8 * v43);
          swift_retain();
        }
        else
        {
          v30 = 0;
        }
        swift_retain_n();
      }
      else
      {
        type metadata accessor for _PlaceholderNode(0);
        v26 = (_QWORD *)swift_allocObject();
        v56[3] = type metadata accessor for AuthoringNode();
        v56[4] = &off_1ED488F38;
        v56[0] = v22;
        sub_1B19FA198((uint64_t)v56, (uint64_t)v26 + OBJC_IVAR____TtC3VFX16_PlaceholderNode_oldNode);
        v26[4] = 0;
        v27 = MEMORY[0x1E0DEE9D8];
        v26[2] = MEMORY[0x1E0DEE9D8];
        v26[3] = 0;
        v28 = (char *)v26 + OBJC_IVAR____TtC3VFX4Node_authoringID;
        v53 = v22;
        swift_retain_n();
        v52 = v28;
        sub_1B2228260();
        _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v56);
        v29 = (uint64_t)v48;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v48, 1, 1, v5);
        v30 = swift_allocObject();
        *(_OWORD *)(v30 + OBJC_IVAR____TtC3VFX13AuthoringNode_userInfoData) = v54;
        *(_QWORD *)(v30 + OBJC_IVAR____TtC3VFX13AuthoringNode_raw) = v26;
        *(_QWORD *)(v30 + OBJC_IVAR____TtC3VFX13AuthoringNode_inputs) = v27;
        sub_1B1B28FC8(v29, v20);
        LODWORD(v28) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v20, 1, v5);
        swift_retain();
        if ((_DWORD)v28 == 1)
        {
          v31 = v47;
          sub_1B2228260();
          sub_1B1B2900C(v29);
          sub_1B1B2900C(v20);
          v32 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 32);
        }
        else
        {
          sub_1B1B2900C(v29);
          v33 = v20;
          v32 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 32);
          v31 = v47;
          v32(v47, v33, v5);
        }
        v34 = v5;
        v35 = v30 + OBJC_IVAR____TtC3VFX13AuthoringNode_authoringID;
        v32((char *)(v30 + OBJC_IVAR____TtC3VFX13AuthoringNode_authoringID), (uint64_t)v31, v34);
        v36 = *(_QWORD *)(v30 + OBJC_IVAR____TtC3VFX13AuthoringNode_userInfoData);
        v37 = *(_QWORD *)(v30 + OBJC_IVAR____TtC3VFX13AuthoringNode_userInfoData + 8);
        *(_OWORD *)(v30 + OBJC_IVAR____TtC3VFX13AuthoringNode_userInfoData) = v54;
        sub_1B1A0DAC8(v36, v37);
        (*(void (**)(char *, uint64_t, uint64_t))(v6 + 24))(v52, v35, v34);
        swift_release();
        v5 = v34;
        v20 = (uint64_t)v49;
      }
      _s11DeletedNodeCMa_0(0);
      v38 = swift_dynamicCastClass();
      swift_release_n();
      if (v38)
      {
        swift_release();
        v30 = 0;
        v21 = 0;
        result = v55;
      }
      else
      {
        result = v55;
        v21 = v51;
      }
    }
    else
    {
      v30 = 0;
    }
    v57 = result;
    v40 = *(_QWORD *)(result + 16);
    v39 = *(_QWORD *)(result + 24);
    if (v40 >= v39 >> 1)
    {
      v51 = v21;
      sub_1B202A210(v39 > 1, v40 + 1, 1);
      v21 = v51;
      result = v57;
    }
    v19 += 2;
    *(_QWORD *)(result + 16) = v40 + 1;
    v41 = result + 16 * v40;
    *(_QWORD *)(v41 + 32) = v30;
    *(_QWORD *)(v41 + 40) = v21;
    --v17;
  }
  while (v17);
  return result;
}

uint64_t sub_1B1C4F618(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t (*v10)(uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int64_t v17;
  uint64_t result;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  _QWORD *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  void (*v32)(char *, uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  _QWORD v44[2];
  uint64_t v45;
  char *v46;
  char *v47;
  char *v48;
  uint64_t *v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD v56[5];
  uint64_t v57;

  v45 = a3;
  v49 = a2;
  v5 = sub_1B222826C();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1B1791524(0, (unint64_t *)&qword_1ED4B7B50, v10, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v11, v12);
  v48 = (char *)v44 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = *(_QWORD *)(a1 + 16);
  if (!v17)
    return MEMORY[0x1E0DEE9D8];
  v46 = v9;
  v47 = (char *)v44 - v16;
  v44[1] = v3;
  v57 = MEMORY[0x1E0DEE9D8];
  sub_1B202A210(0, v17, 0);
  result = v57;
  v19 = (uint64_t *)(a1 + 40);
  v53 = xmmword_1B2281D30;
  v20 = (uint64_t)v48;
  do
  {
    v22 = *(v19 - 1);
    v21 = *v19;
    if (v22)
    {
      v50 = *v19;
      v54 = result;
      v23 = *v49;
      if (*(_QWORD *)(*v49 + 16)
        && (v24 = sub_1B1DC3AC8(v22), (v25 & 1) != 0)
        && (*(_BYTE *)(*(_QWORD *)(v23 + 56) + v24) & 1) == 0)
      {
        if (*(_QWORD *)(*(_QWORD *)v45 + 16) && (sub_1B1DC3AC8(v22), (v42 & 1) != 0))
          v43 = swift_retain();
        else
          v43 = 1;
        v56[0] = v43;
        sub_1B1C6BD30(0);
        type metadata accessor for AuthoringNode();
        swift_retain_n();
        swift_dynamicCast();
        v30 = v55;
      }
      else
      {
        type metadata accessor for _PlaceholderNode(0);
        v26 = (_QWORD *)swift_allocObject();
        v56[3] = type metadata accessor for AuthoringNode();
        v56[4] = &off_1ED488F38;
        v56[0] = v22;
        sub_1B19FA198((uint64_t)v56, (uint64_t)v26 + OBJC_IVAR____TtC3VFX16_PlaceholderNode_oldNode);
        v26[4] = 0;
        v27 = MEMORY[0x1E0DEE9D8];
        v26[2] = MEMORY[0x1E0DEE9D8];
        v26[3] = 0;
        v28 = (char *)v26 + OBJC_IVAR____TtC3VFX4Node_authoringID;
        v52 = v22;
        swift_retain_n();
        v51 = v28;
        sub_1B2228260();
        _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v56);
        v29 = (uint64_t)v47;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v47, 1, 1, v5);
        v30 = swift_allocObject();
        *(_OWORD *)(v30 + OBJC_IVAR____TtC3VFX13AuthoringNode_userInfoData) = v53;
        *(_QWORD *)(v30 + OBJC_IVAR____TtC3VFX13AuthoringNode_raw) = v26;
        *(_QWORD *)(v30 + OBJC_IVAR____TtC3VFX13AuthoringNode_inputs) = v27;
        sub_1B1B28FC8(v29, v20);
        LODWORD(v28) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v20, 1, v5);
        swift_retain();
        if ((_DWORD)v28 == 1)
        {
          v31 = v46;
          sub_1B2228260();
          sub_1B1B2900C(v29);
          sub_1B1B2900C(v20);
          v32 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 32);
        }
        else
        {
          sub_1B1B2900C(v29);
          v33 = v20;
          v32 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 32);
          v31 = v46;
          v32(v46, v33, v5);
        }
        v34 = v5;
        v35 = v30 + OBJC_IVAR____TtC3VFX13AuthoringNode_authoringID;
        v32((char *)(v30 + OBJC_IVAR____TtC3VFX13AuthoringNode_authoringID), (uint64_t)v31, v34);
        v36 = *(_QWORD *)(v30 + OBJC_IVAR____TtC3VFX13AuthoringNode_userInfoData);
        v37 = *(_QWORD *)(v30 + OBJC_IVAR____TtC3VFX13AuthoringNode_userInfoData + 8);
        *(_OWORD *)(v30 + OBJC_IVAR____TtC3VFX13AuthoringNode_userInfoData) = v53;
        sub_1B1A0DAC8(v36, v37);
        (*(void (**)(char *, uint64_t, uint64_t))(v6 + 24))(v51, v35, v34);
        swift_release();
        v5 = v34;
        v20 = (uint64_t)v48;
      }
      _s11DeletedNodeCMa_0(0);
      v38 = swift_dynamicCastClass();
      swift_release_n();
      if (v38)
      {
        swift_release();
        v30 = 0;
        v21 = 0;
        result = v54;
      }
      else
      {
        result = v54;
        v21 = v50;
      }
    }
    else
    {
      v30 = 0;
    }
    v57 = result;
    v40 = *(_QWORD *)(result + 16);
    v39 = *(_QWORD *)(result + 24);
    if (v40 >= v39 >> 1)
    {
      v50 = v21;
      sub_1B202A210(v39 > 1, v40 + 1, 1);
      v21 = v50;
      result = v57;
    }
    v19 += 2;
    *(_QWORD *)(result + 16) = v40 + 1;
    v41 = result + 16 * v40;
    *(_QWORD *)(v41 + 32) = v30;
    *(_QWORD *)(v41 + 40) = v21;
    --v17;
  }
  while (v17);
  return result;
}

unint64_t sub_1B1C4FA94(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  int64_t v19;
  int64_t v20;
  int64_t v21;
  unint64_t result;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  _QWORD *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  void (*v37)(char *, uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  _QWORD v47[2];
  char *v48;
  char *v49;
  uint64_t *v50;
  char *v51;
  uint64_t v52;
  char *v53;
  unint64_t v54;
  int64_t v55;
  __int128 v56;
  _QWORD v57[5];
  unint64_t v58;

  v50 = a2;
  v6 = sub_1B222826C();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1B1791524(0, (unint64_t *)&qword_1ED4B7B50, v11, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v12, v13);
  v51 = (char *)v47 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)v47 - v17;
  v19 = *(_QWORD *)(a1 + 16);
  if (!v19)
    return MEMORY[0x1E0DEE9D8];
  v49 = v10;
  v47[0] = a3;
  v47[1] = v3;
  v58 = MEMORY[0x1E0DEE9D8];
  v20 = v19;
  sub_1B202A210(0, v19, 0);
  v21 = v20;
  result = v58;
  v23 = (uint64_t *)(a1 + 40);
  v56 = xmmword_1B2281D30;
  v24 = (uint64_t)v51;
  v48 = v18;
  while (1)
  {
    v26 = *(v23 - 1);
    v25 = *v23;
    if (v26)
      break;
    v33 = 0;
LABEL_15:
    v58 = result;
    v45 = *(_QWORD *)(result + 16);
    v44 = *(_QWORD *)(result + 24);
    if (v45 >= v44 >> 1)
    {
      v55 = v21;
      v52 = v25;
      sub_1B202A210(v44 > 1, v45 + 1, 1);
      v25 = v52;
      v21 = v55;
      result = v58;
    }
    v23 += 2;
    *(_QWORD *)(result + 16) = v45 + 1;
    v46 = result + 16 * v45;
    *(_QWORD *)(v46 + 32) = v33;
    *(_QWORD *)(v46 + 40) = v25;
    if (!--v21)
      return result;
  }
  v52 = *v23;
  v54 = result;
  v55 = v21;
  v27 = *v50;
  if (!*(_QWORD *)(*v50 + 16)
    || (v28 = sub_1B1DC3AC8(v26), (v29 & 1) == 0)
    || (*(_BYTE *)(*(_QWORD *)(v27 + 56) + v28) & 1) != 0)
  {
    type metadata accessor for _PlaceholderNode(0);
    v30 = (_QWORD *)swift_allocObject();
    v57[3] = type metadata accessor for AuthoringNode();
    v57[4] = &off_1ED488F38;
    v57[0] = v26;
    sub_1B19FA198((uint64_t)v57, (uint64_t)v30 + OBJC_IVAR____TtC3VFX16_PlaceholderNode_oldNode);
    v30[4] = 0;
    v31 = MEMORY[0x1E0DEE9D8];
    v30[2] = MEMORY[0x1E0DEE9D8];
    v30[3] = 0;
    v32 = (char *)v30 + OBJC_IVAR____TtC3VFX4Node_authoringID;
    swift_retain_n();
    v53 = v32;
    sub_1B2228260();
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v57);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v18, 1, 1, v6);
    v33 = swift_allocObject();
    *(_OWORD *)(v33 + OBJC_IVAR____TtC3VFX13AuthoringNode_userInfoData) = v56;
    *(_QWORD *)(v33 + OBJC_IVAR____TtC3VFX13AuthoringNode_raw) = v30;
    *(_QWORD *)(v33 + OBJC_IVAR____TtC3VFX13AuthoringNode_inputs) = v31;
    sub_1B1B28FC8((uint64_t)v18, v24);
    LODWORD(v32) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v24, 1, v6);
    swift_retain();
    if ((_DWORD)v32 == 1)
    {
      v34 = (uint64_t)v18;
      v35 = v49;
      sub_1B2228260();
      sub_1B1B2900C(v34);
      sub_1B1B2900C(v24);
      v36 = v7;
      v37 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 32);
    }
    else
    {
      sub_1B1B2900C((uint64_t)v18);
      v38 = v24;
      v36 = v7;
      v37 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 32);
      v35 = v49;
      v37(v49, v38, v6);
    }
    v39 = v6;
    v40 = v33 + OBJC_IVAR____TtC3VFX13AuthoringNode_authoringID;
    v37((char *)(v33 + OBJC_IVAR____TtC3VFX13AuthoringNode_authoringID), (uint64_t)v35, v39);
    v41 = *(_QWORD *)(v33 + OBJC_IVAR____TtC3VFX13AuthoringNode_userInfoData);
    v42 = *(_QWORD *)(v33 + OBJC_IVAR____TtC3VFX13AuthoringNode_userInfoData + 8);
    *(_OWORD *)(v33 + OBJC_IVAR____TtC3VFX13AuthoringNode_userInfoData) = v56;
    sub_1B1A0DAC8(v41, v42);
    (*(void (**)(char *, uint64_t, uint64_t))(v36 + 24))(v53, v40, v39);
    swift_release();
    _s11DeletedNodeCMa_0(0);
    v43 = swift_dynamicCastClass();
    swift_release();
    v6 = v39;
    v7 = v36;
    if (v43)
    {
      swift_release();
      v33 = 0;
      v25 = 0;
      v24 = (uint64_t)v51;
    }
    else
    {
      v24 = (uint64_t)v51;
      v25 = v52;
    }
    v18 = v48;
    result = v54;
    v21 = v55;
    goto LABEL_15;
  }
  result = sub_1B1DC3AC8(v26);
  __break(1u);
  return result;
}

uint64_t sub_1B1C4FEC0(uint64_t a1, uint64_t *a2)
{
  int64_t v2;
  uint64_t v3;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  __objc2_class **v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t (*v28)(uint64_t, uint64_t);
  uint64_t v29;
  uint64_t *v30;
  _BYTE v31[40];
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v26 = a2;
  v2 = *(_QWORD *)(a1 + 16);
  v3 = MEMORY[0x1E0DEE9D8];
  if (v2)
  {
    v34 = MEMORY[0x1E0DEE9D8];
    sub_1B202A270(0, v2, 0);
    v3 = v34;
    v5 = (uint64_t *)(a1 + 40);
    do
    {
      v7 = *(v5 - 1);
      v6 = *v5;
      if (v7)
      {
        v8 = *(__objc2_class ***)(v7 + OBJC_IVAR____TtC3VFX13AuthoringNode_raw);
        if (*v8 == _TtC3VFX16_PlaceholderNode)
        {
          v9 = *(uint64_t *)((char *)v8 + OBJC_IVAR____TtC3VFX16_PlaceholderNode_oldNode + 24);
          v29 = *(uint64_t *)((char *)v8 + OBJC_IVAR____TtC3VFX16_PlaceholderNode_oldNode + 32);
          v27 = (uint64_t)v8 + OBJC_IVAR____TtC3VFX16_PlaceholderNode_oldNode;
          v10 = sub_1B19FA070((__objc2_class **)((char *)v8 + OBJC_IVAR____TtC3VFX16_PlaceholderNode_oldNode), v9);
          v30 = &v25;
          v11 = *(_QWORD *)(v9 - 8);
          v12 = MEMORY[0x1E0C80A78](v10, v10);
          v14 = (char *)&v25 - v13;
          (*(void (**)(char *, double))(v11 + 16))((char *)&v25 - v13, v12);
          v15 = v29;
          v28 = *(uint64_t (**)(uint64_t, uint64_t))(v29 + 24);
          swift_retain_n();
          swift_retain();
          v29 = v28(v9, v15);
          (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v9);
          v16 = *v26;
          if (*(_QWORD *)(*v26 + 16) && (v17 = sub_1B1DC3AC8(v29), (v18 & 1) != 0))
          {
            v19 = *(_QWORD *)(*(_QWORD *)(v16 + 56) + 8 * v17);
            swift_retain();
            swift_release();
            v32 = v19;
          }
          else
          {
            sub_1B19FA198(v27, (uint64_t)v31);
            swift_release();
            sub_1B1AEC268(0, (unint64_t *)&qword_1EEF5BF68);
            type metadata accessor for AuthoringNode();
            swift_dynamicCast();
          }
          swift_release();
          v33 = v6;
        }
        else
        {
          v32 = *(v5 - 1);
          v33 = v6;
          swift_retain_n();
        }
      }
      else
      {
        v32 = 0;
        v33 = v6;
      }
      v20 = v32;
      swift_release();
      v34 = v3;
      v22 = *(_QWORD *)(v3 + 16);
      v21 = *(_QWORD *)(v3 + 24);
      if (v22 >= v21 >> 1)
      {
        sub_1B202A270(v21 > 1, v22 + 1, 1);
        v3 = v34;
      }
      v5 += 2;
      *(_QWORD *)(v3 + 16) = v22 + 1;
      v23 = v3 + 16 * v22;
      *(_QWORD *)(v23 + 32) = v20;
      *(_QWORD *)(v23 + 40) = v6;
      --v2;
    }
    while (v2);
  }
  return v3;
}

uint64_t sub_1B1C50150(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t result;
  _QWORD v21[5];
  uint64_t v22;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = MEMORY[0x1E0DEE9D8];
  if (v3)
  {
    v22 = MEMORY[0x1E0DEE9D8];
    sub_1B202A29C(0, v3, 0);
    v6 = v22;
    v7 = (uint64_t *)(a1 + 40);
    while (1)
    {
      v8 = *(v7 - 1);
      v9 = *v7;
      v10 = *a2;
      if (*(_QWORD *)(*a2 + 16))
      {
        v11 = sub_1B1DC3AC8(*(v7 - 1));
        if ((v12 & 1) != 0 && (*(_BYTE *)(*(_QWORD *)(v10 + 56) + v11) & 1) == 0)
          break;
      }
      type metadata accessor for _PlaceholderNode(0);
      v13 = (_QWORD *)swift_allocObject();
      v21[3] = type metadata accessor for Node();
      v21[4] = &off_1ED4A7188;
      v21[0] = v8;
      sub_1B19FA198((uint64_t)v21, (uint64_t)v13 + OBJC_IVAR____TtC3VFX16_PlaceholderNode_oldNode);
      v13[3] = 0;
      v13[4] = 0;
      v14 = v4;
      v13[2] = v4;
      swift_retain_n();
      sub_1B2228260();
      _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v21);
      swift_release();
      v22 = v6;
      v16 = *(_QWORD *)(v6 + 16);
      v15 = *(_QWORD *)(v6 + 24);
      if (v16 >= v15 >> 1)
      {
        sub_1B202A29C(v15 > 1, v16 + 1, 1);
        v6 = v22;
      }
      v7 += 2;
      *(_QWORD *)(v6 + 16) = v16 + 1;
      v17 = v6 + 16 * v16;
      *(_QWORD *)(v17 + 32) = v13;
      *(_QWORD *)(v17 + 40) = v9;
      --v3;
      v4 = v14;
      if (!v3)
        return v6;
    }
    result = sub_1B1C6D250(v8, *a3);
    __break(1u);
  }
  else
  {
    return MEMORY[0x1E0DEE9D8];
  }
  return result;
}

uint64_t sub_1B1C502F8(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  int64_t v3;
  uint64_t v4;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  _QWORD v22[5];
  uint64_t v23;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = MEMORY[0x1E0DEE9D8];
  if (v3)
  {
    v23 = MEMORY[0x1E0DEE9D8];
    sub_1B202A29C(0, v3, 0);
    v4 = v23;
    v7 = (uint64_t *)(a1 + 40);
    do
    {
      v8 = *(v7 - 1);
      v9 = *v7;
      v10 = *a2;
      if (*(_QWORD *)(*a2 + 16)
        && (v11 = sub_1B1DC3AC8(*(v7 - 1)), (v12 & 1) != 0)
        && (*(_BYTE *)(*(_QWORD *)(v10 + 56) + v11) & 1) == 0)
      {
        v17 = *a3;
        if (*(_QWORD *)(*a3 + 16) && (v18 = sub_1B1DC3AC8(v8), (v19 & 1) != 0))
        {
          v13 = *(_QWORD **)(*(_QWORD *)(v17 + 56) + 8 * v18);
          swift_retain();
        }
        else
        {
          v13 = 0;
        }
      }
      else
      {
        type metadata accessor for _PlaceholderNode(0);
        v13 = (_QWORD *)swift_allocObject();
        v22[3] = type metadata accessor for Node();
        v22[4] = &off_1ED4A7188;
        v22[0] = v8;
        sub_1B19FA198((uint64_t)v22, (uint64_t)v13 + OBJC_IVAR____TtC3VFX16_PlaceholderNode_oldNode);
        v13[4] = 0;
        v13[2] = MEMORY[0x1E0DEE9D8];
        v13[3] = 0;
        swift_retain_n();
        sub_1B2228260();
        _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v22);
        swift_release();
      }
      v23 = v4;
      v15 = *(_QWORD *)(v4 + 16);
      v14 = *(_QWORD *)(v4 + 24);
      if (v15 >= v14 >> 1)
      {
        sub_1B202A29C(v14 > 1, v15 + 1, 1);
        v4 = v23;
      }
      v7 += 2;
      *(_QWORD *)(v4 + 16) = v15 + 1;
      v16 = v4 + 16 * v15;
      *(_QWORD *)(v16 + 32) = v13;
      *(_QWORD *)(v16 + 40) = v9;
      --v3;
    }
    while (v3);
  }
  return v4;
}

uint64_t sub_1B1C504BC(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t *v20;
  _QWORD v23[5];
  uint64_t v24;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = MEMORY[0x1E0DEE9D8];
  if (v3)
  {
    v24 = MEMORY[0x1E0DEE9D8];
    sub_1B202A29C(0, v3, 0);
    v6 = v24;
    v7 = (uint64_t *)(a1 + 40);
    while (1)
    {
      v8 = *(v7 - 1);
      v9 = *v7;
      v10 = *a2;
      if (*(_QWORD *)(*a2 + 16))
      {
        v11 = sub_1B1DC3AC8(*(v7 - 1));
        if ((v12 & 1) != 0 && (*(_BYTE *)(*(_QWORD *)(v10 + 56) + v11) & 1) == 0)
          break;
      }
      type metadata accessor for _PlaceholderNode(0);
      v13 = (_QWORD *)swift_allocObject();
      v23[3] = type metadata accessor for Node();
      v23[4] = &off_1ED4A7188;
      v23[0] = v8;
      sub_1B19FA198((uint64_t)v23, (uint64_t)v13 + OBJC_IVAR____TtC3VFX16_PlaceholderNode_oldNode);
      v13[3] = 0;
      v13[4] = 0;
      v14 = v4;
      v13[2] = v4;
      swift_retain_n();
      sub_1B2228260();
      _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v23);
      swift_release();
      v24 = v6;
      v16 = *(_QWORD *)(v6 + 16);
      v15 = *(_QWORD *)(v6 + 24);
      if (v16 >= v15 >> 1)
      {
        sub_1B202A29C(v15 > 1, v16 + 1, 1);
        v6 = v24;
      }
      v7 += 2;
      *(_QWORD *)(v6 + 16) = v16 + 1;
      v17 = v6 + 16 * v16;
      *(_QWORD *)(v17 + 32) = v13;
      *(_QWORD *)(v17 + 40) = v9;
      --v3;
      v4 = v14;
      if (!v3)
        return v6;
    }
    v19 = *a3;
    v20 = (uint64_t *)(*(_QWORD *)(v19 + 56) + 88 * sub_1B1DC3AC8(v8));
    result = sub_1B1B9D8BC(*v20);
    __break(1u);
  }
  else
  {
    return MEMORY[0x1E0DEE9D8];
  }
  return result;
}

uint64_t sub_1B1C50694(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  unint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  char v39;
  uint64_t v40;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = MEMORY[0x1E0DEE9D8];
  if (v3)
  {
    v40 = MEMORY[0x1E0DEE9D8];
    sub_1B202A29C(0, v3, 0);
    v6 = v40;
    v7 = (uint64_t *)(a1 + 40);
    while (1)
    {
      v8 = *(v7 - 1);
      v9 = *v7;
      v10 = *a2;
      if (*(_QWORD *)(*a2 + 16))
      {
        v11 = sub_1B1DC3AC8(*(v7 - 1));
        if ((v12 & 1) != 0 && (*(_BYTE *)(*(_QWORD *)(v10 + 56) + v11) & 1) == 0)
          break;
      }
      type metadata accessor for _PlaceholderNode(0);
      v13 = (_QWORD *)swift_allocObject();
      *((_QWORD *)&v31 + 1) = type metadata accessor for Node();
      *(_QWORD *)&v32 = &off_1ED4A7188;
      *(_QWORD *)&v30 = v8;
      sub_1B19FA198((uint64_t)&v30, (uint64_t)v13 + OBJC_IVAR____TtC3VFX16_PlaceholderNode_oldNode);
      v13[3] = 0;
      v13[4] = 0;
      v14 = v4;
      v13[2] = v4;
      swift_retain_n();
      sub_1B2228260();
      _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v30);
      swift_release();
      v40 = v6;
      v16 = *(_QWORD *)(v6 + 16);
      v15 = *(_QWORD *)(v6 + 24);
      if (v16 >= v15 >> 1)
      {
        sub_1B202A29C(v15 > 1, v16 + 1, 1);
        v6 = v40;
      }
      v7 += 2;
      *(_QWORD *)(v6 + 16) = v16 + 1;
      v17 = v6 + 16 * v16;
      *(_QWORD *)(v17 + 32) = v13;
      *(_QWORD *)(v17 + 40) = v9;
      --v3;
      v4 = v14;
      if (!v3)
        return v6;
    }
    v19 = *a3;
    v20 = *(_QWORD *)(v19 + 56) + 152 * sub_1B1DC3AC8(v8);
    v21 = *(_OWORD *)(v20 + 16);
    v30 = *(_OWORD *)v20;
    v31 = v21;
    v22 = *(_OWORD *)(v20 + 80);
    v24 = *(_OWORD *)(v20 + 32);
    v23 = *(_OWORD *)(v20 + 48);
    v34 = *(_OWORD *)(v20 + 64);
    v35 = v22;
    v32 = v24;
    v33 = v23;
    v25 = *(_OWORD *)(v20 + 96);
    v26 = *(_OWORD *)(v20 + 112);
    v27 = *(_OWORD *)(v20 + 128);
    v39 = *(_BYTE *)(v20 + 144);
    v37 = v26;
    v38 = v27;
    v36 = v25;
    result = sub_1B1B7C5AC((uint64_t)&v30);
    __break(1u);
  }
  else
  {
    return MEMORY[0x1E0DEE9D8];
  }
  return result;
}

uint64_t sub_1B1C50880(uint64_t a1, uint64_t *a2)
{
  int64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t result;
  _QWORD v19[5];
  uint64_t v20;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = MEMORY[0x1E0DEE9D8];
  if (v2)
  {
    v20 = MEMORY[0x1E0DEE9D8];
    sub_1B202A29C(0, v2, 0);
    v5 = v20;
    v6 = (uint64_t *)(a1 + 40);
    while (1)
    {
      v7 = *(v6 - 1);
      v8 = *v6;
      v9 = *a2;
      if (*(_QWORD *)(*a2 + 16))
      {
        v10 = sub_1B1DC3AC8(*(v6 - 1));
        if ((v11 & 1) != 0 && (*(_BYTE *)(*(_QWORD *)(v9 + 56) + v10) & 1) == 0)
          break;
      }
      type metadata accessor for _PlaceholderNode(0);
      v12 = (_QWORD *)swift_allocObject();
      v19[3] = type metadata accessor for Node();
      v19[4] = &off_1ED4A7188;
      v19[0] = v7;
      sub_1B19FA198((uint64_t)v19, (uint64_t)v12 + OBJC_IVAR____TtC3VFX16_PlaceholderNode_oldNode);
      v12[3] = 0;
      v12[4] = 0;
      v13 = v3;
      v12[2] = v3;
      swift_retain_n();
      sub_1B2228260();
      _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v19);
      swift_release();
      v20 = v5;
      v15 = *(_QWORD *)(v5 + 16);
      v14 = *(_QWORD *)(v5 + 24);
      if (v15 >= v14 >> 1)
      {
        sub_1B202A29C(v14 > 1, v15 + 1, 1);
        v5 = v20;
      }
      v6 += 2;
      *(_QWORD *)(v5 + 16) = v15 + 1;
      v16 = v5 + 16 * v15;
      *(_QWORD *)(v16 + 32) = v12;
      *(_QWORD *)(v16 + 40) = v8;
      --v2;
      v3 = v13;
      if (!v2)
        return v5;
    }
    sub_1B1DC3AC8(v7);
    result = swift_bridgeObjectRetain();
    __break(1u);
  }
  else
  {
    return MEMORY[0x1E0DEE9D8];
  }
  return result;
}

unint64_t sub_1B1C50A38(uint64_t a1, uint64_t *a2)
{
  int64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t result;
  _QWORD v19[5];
  uint64_t v20;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = MEMORY[0x1E0DEE9D8];
  if (v2)
  {
    v20 = MEMORY[0x1E0DEE9D8];
    sub_1B202A29C(0, v2, 0);
    v5 = v20;
    v6 = (uint64_t *)(a1 + 40);
    while (1)
    {
      v7 = *(v6 - 1);
      v8 = *v6;
      v9 = *a2;
      if (*(_QWORD *)(*a2 + 16))
      {
        v10 = sub_1B1DC3AC8(*(v6 - 1));
        if ((v11 & 1) != 0 && (*(_BYTE *)(*(_QWORD *)(v9 + 56) + v10) & 1) == 0)
          break;
      }
      type metadata accessor for _PlaceholderNode(0);
      v12 = (_QWORD *)swift_allocObject();
      v19[3] = type metadata accessor for Node();
      v19[4] = &off_1ED4A7188;
      v19[0] = v7;
      sub_1B19FA198((uint64_t)v19, (uint64_t)v12 + OBJC_IVAR____TtC3VFX16_PlaceholderNode_oldNode);
      v12[3] = 0;
      v12[4] = 0;
      v13 = v3;
      v12[2] = v3;
      swift_retain_n();
      sub_1B2228260();
      _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v19);
      swift_release();
      v20 = v5;
      v15 = *(_QWORD *)(v5 + 16);
      v14 = *(_QWORD *)(v5 + 24);
      if (v15 >= v14 >> 1)
      {
        sub_1B202A29C(v14 > 1, v15 + 1, 1);
        v5 = v20;
      }
      v6 += 2;
      *(_QWORD *)(v5 + 16) = v15 + 1;
      v16 = v5 + 16 * v15;
      *(_QWORD *)(v16 + 32) = v12;
      *(_QWORD *)(v16 + 40) = v8;
      --v2;
      v3 = v13;
      if (!v2)
        return v5;
    }
    result = sub_1B1DC3AC8(v7);
    __break(1u);
  }
  else
  {
    return MEMORY[0x1E0DEE9D8];
  }
  return result;
}

uint64_t sub_1B1C50BE0(uint64_t a1, uint64_t *a2)
{
  int64_t v2;
  uint64_t v3;
  uint64_t *v5;
  uint64_t v6;
  __objc2_class **v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  char *v14;
  uint64_t (*v15)(uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t *v29;
  _BYTE v30[40];
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v27 = a2;
  v2 = *(_QWORD *)(a1 + 16);
  v3 = MEMORY[0x1E0DEE9D8];
  if (v2)
  {
    v33 = MEMORY[0x1E0DEE9D8];
    sub_1B202A2C8(0, v2, 0);
    v3 = v33;
    v5 = (uint64_t *)(a1 + 40);
    do
    {
      v7 = (__objc2_class **)*(v5 - 1);
      v6 = *v5;
      if (v7)
      {
        if (*v7 == _TtC3VFX16_PlaceholderNode)
        {
          v9 = *(uint64_t *)((char *)v7 + OBJC_IVAR____TtC3VFX16_PlaceholderNode_oldNode + 24);
          v8 = *(uint64_t *)((char *)v7 + OBJC_IVAR____TtC3VFX16_PlaceholderNode_oldNode + 32);
          v28 = (uint64_t)v7 + OBJC_IVAR____TtC3VFX16_PlaceholderNode_oldNode;
          v10 = sub_1B19FA070((__objc2_class **)((char *)v7 + OBJC_IVAR____TtC3VFX16_PlaceholderNode_oldNode), v9);
          v29 = &v26;
          v11 = *(_QWORD *)(v9 - 8);
          v12 = MEMORY[0x1E0C80A78](v10, v10);
          v14 = (char *)&v26 - v13;
          (*(void (**)(char *, double))(v11 + 16))((char *)&v26 - v13, v12);
          v15 = *(uint64_t (**)(uint64_t, uint64_t))(v8 + 24);
          swift_retain_n();
          v16 = v15(v9, v8);
          (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v9);
          v17 = *v27;
          if (*(_QWORD *)(*v27 + 16) && (v18 = sub_1B1DC3AC8(v16), (v19 & 1) != 0))
          {
            v20 = *(_QWORD *)(*(_QWORD *)(v17 + 56) + 8 * v18);
            swift_retain();
            swift_release();
            v31 = v20;
          }
          else
          {
            sub_1B19FA198(v28, (uint64_t)v30);
            swift_release();
            sub_1B1AEC268(0, (unint64_t *)&qword_1EEF5BF68);
            type metadata accessor for Node();
            swift_dynamicCast();
          }
          swift_release();
          v32 = v6;
        }
        else
        {
          v31 = *(v5 - 1);
          v32 = v6;
          swift_retain_n();
        }
      }
      else
      {
        v31 = 0;
        v32 = v6;
      }
      v21 = v31;
      swift_release();
      v33 = v3;
      v23 = *(_QWORD *)(v3 + 16);
      v22 = *(_QWORD *)(v3 + 24);
      if (v23 >= v22 >> 1)
      {
        sub_1B202A2C8(v22 > 1, v23 + 1, 1);
        v3 = v33;
      }
      v5 += 2;
      *(_QWORD *)(v3 + 16) = v23 + 1;
      v24 = v3 + 16 * v23;
      *(_QWORD *)(v24 + 32) = v21;
      *(_QWORD *)(v24 + 40) = v6;
      --v2;
    }
    while (v2);
  }
  return v3;
}

uint64_t sub_1B1C50E3C(uint64_t a1)
{
  return sub_1B1C51410(a1, (unint64_t *)&qword_1ED4B8C90, (unint64_t *)&qword_1ED4B8C70);
}

uint64_t sub_1B1C50E58(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x1E0DEE9D8];
  if (v1)
  {
    v11 = MEMORY[0x1E0DEE9D8];
    sub_1B202A2F4(0, v1, 0);
    sub_1B1A02758(0, (unint64_t *)&qword_1ED4BA2B0, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    v4 = a1 + 40;
    do
    {
      swift_bridgeObjectRetain_n();
      swift_dynamicCast();
      swift_bridgeObjectRelease();
      v2 = v11;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1B202A2F4(0, *(_QWORD *)(v11 + 16) + 1, 1);
        v2 = v11;
      }
      v6 = *(_QWORD *)(v2 + 16);
      v5 = *(_QWORD *)(v2 + 24);
      if (v6 >= v5 >> 1)
      {
        sub_1B202A2F4(v5 > 1, v6 + 1, 1);
        v2 = v11;
      }
      v4 += 16;
      *(_QWORD *)(v2 + 16) = v6 + 1;
      v7 = v2 + 16 * v6;
      *(_QWORD *)(v7 + 32) = v9;
      *(_QWORD *)(v7 + 40) = v10;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t sub_1B1C50FA4(uint64_t a1)
{
  return sub_1B1C51410(a1, &qword_1EEF5CE70, &qword_1EEF5CE78);
}

uint64_t sub_1B1C50FC0(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _OWORD *v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x1E0DEE9D8];
  if (v1)
  {
    v12 = MEMORY[0x1E0DEE9D8];
    sub_1B202ACD8(0, v1, 0);
    sub_1B1AF776C();
    sub_1B1B9D790(0, (unint64_t *)&qword_1ED4BA350);
    v4 = a1 + 72;
    do
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_dynamicCast();
      v2 = v12;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1B202ACD8(0, *(_QWORD *)(v12 + 16) + 1, 1);
        v2 = v12;
      }
      v6 = *(_QWORD *)(v2 + 16);
      v5 = *(_QWORD *)(v2 + 24);
      if (v6 >= v5 >> 1)
      {
        sub_1B202ACD8(v5 > 1, v6 + 1, 1);
        v2 = v12;
      }
      v4 += 48;
      *(_QWORD *)(v2 + 16) = v6 + 1;
      v7 = (_OWORD *)(v2 + 48 * v6);
      v7[3] = v10;
      v7[4] = v11;
      v7[2] = v9;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t sub_1B1C51140(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x1E0DEE9D8];
  if (v1)
  {
    v13 = MEMORY[0x1E0DEE9D8];
    sub_1B202ACF4(0, v1, 0);
    sub_1B1C798AC(0, (unint64_t *)&qword_1ED4BA568);
    sub_1B19F8F98();
    v4 = a1 + 48;
    do
    {
      swift_bridgeObjectRetain_n();
      swift_dynamicCast();
      swift_bridgeObjectRelease();
      v2 = v13;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1B202ACF4(0, *(_QWORD *)(v13 + 16) + 1, 1);
        v2 = v13;
      }
      v6 = *(_QWORD *)(v2 + 16);
      v5 = *(_QWORD *)(v2 + 24);
      if (v6 >= v5 >> 1)
      {
        sub_1B202ACF4(v5 > 1, v6 + 1, 1);
        v2 = v13;
      }
      *(_QWORD *)(v2 + 16) = v6 + 1;
      v7 = v2 + 32 * v6;
      *(_QWORD *)(v7 + 32) = v9;
      *(_BYTE *)(v7 + 40) = v10;
      *(_QWORD *)(v7 + 48) = v11;
      *(_QWORD *)(v7 + 56) = v12;
      v4 += 24;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t sub_1B1C512B4(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  __int128 v9;
  int v10;
  uint64_t v11;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x1E0DEE9D8];
  if (v1)
  {
    v11 = MEMORY[0x1E0DEE9D8];
    sub_1B202AD2C(0, v1, 0);
    sub_1B1C71C08();
    sub_1B1C71C90();
    v4 = a1 + 48;
    do
    {
      swift_dynamicCast();
      v2 = v11;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1B202AD2C(0, *(_QWORD *)(v11 + 16) + 1, 1);
        v2 = v11;
      }
      v6 = *(_QWORD *)(v2 + 16);
      v5 = *(_QWORD *)(v2 + 24);
      if (v6 >= v5 >> 1)
      {
        sub_1B202AD2C(v5 > 1, v6 + 1, 1);
        v2 = v11;
      }
      *(_QWORD *)(v2 + 16) = v6 + 1;
      v7 = v2 + 32 * v6;
      *(_OWORD *)(v7 + 32) = v9;
      *(_DWORD *)(v7 + 48) = v10;
      v4 += 32;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t sub_1B1C513F4(uint64_t a1)
{
  return sub_1B1C51410(a1, &qword_1ED4B8A00, (unint64_t *)&qword_1ED4B89D0);
}

uint64_t sub_1B1C51410(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  __int128 v12;
  uint64_t v13;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = MEMORY[0x1E0DEE9D8];
  if (v3)
  {
    v13 = MEMORY[0x1E0DEE9D8];
    sub_1B202A0A8(0, v3, 0);
    v8 = a1 + 32;
    sub_1B1B9CF68(0, a2, a3);
    sub_1B1B9CF68(0, (unint64_t *)&qword_1ED4BA1A0, (unint64_t *)&qword_1ED4BA190);
    do
    {
      swift_dynamicCast();
      v4 = v13;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1B202A0A8(0, *(_QWORD *)(v13 + 16) + 1, 1);
        v4 = v13;
      }
      v10 = *(_QWORD *)(v4 + 16);
      v9 = *(_QWORD *)(v4 + 24);
      if (v10 >= v9 >> 1)
      {
        sub_1B202A0A8(v9 > 1, v10 + 1, 1);
        v4 = v13;
      }
      *(_QWORD *)(v4 + 16) = v10 + 1;
      *(_OWORD *)(v4 + 16 * v10 + 32) = v12;
      v8 += 16;
      --v3;
    }
    while (v3);
  }
  return v4;
}

uint64_t sub_1B1C51570(unint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v2 = sub_1B22296AC();
    swift_bridgeObjectRelease();
  }
  else
  {
    v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  result = MEMORY[0x1E0DEE9D8];
  if (v2)
  {
    v7 = MEMORY[0x1E0DEE9D8];
    sub_1B2229550();
    if ((a1 & 0xC000000000000001) != 0)
    {
      v4 = 0;
      do
      {
        v5 = v4 + 1;
        MEMORY[0x1B5E21018]();
        type metadata accessor for AuthoringNode();
        sub_1B1C6BD30(0);
        swift_retain();
        swift_dynamicCast();
        swift_release();
        sub_1B2229520();
        sub_1B2229568();
        sub_1B2229574();
        sub_1B2229538();
        v4 = v5;
      }
      while (v2 != v5);
    }
    else
    {
      v6 = a1 + 32;
      type metadata accessor for AuthoringNode();
      sub_1B1C6BD30(0);
      do
      {
        v6 += 8;
        swift_retain_n();
        swift_dynamicCast();
        swift_release();
        sub_1B2229520();
        sub_1B2229568();
        sub_1B2229574();
        sub_1B2229538();
        --v2;
      }
      while (v2);
    }
    return v7;
  }
  return result;
}

uint64_t sub_1B1C51740(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t (*v5)(void);
  unint64_t v6;
  unint64_t v7;
  _BYTE v9[88];
  _BYTE v10[88];
  uint64_t v11;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x1E0DEE9D8];
  if (v1)
  {
    v11 = MEMORY[0x1E0DEE9D8];
    sub_1B202B058(0, v1, 0);
    v4 = a1 + 32;
    v5 = MEMORY[0x1E0DEB940];
    do
    {
      sub_1B19F8F0C(v4, (uint64_t)v9);
      sub_1B1A02758(0, (unint64_t *)&unk_1ED4BB3A0, (uint64_t)&_s8MetadataVN, (uint64_t (*)(_QWORD, uint64_t))v5);
      swift_dynamicCast();
      v2 = v11;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1B202B058(0, *(_QWORD *)(v2 + 16) + 1, 1);
        v2 = v11;
      }
      v7 = *(_QWORD *)(v2 + 16);
      v6 = *(_QWORD *)(v2 + 24);
      if (v7 >= v6 >> 1)
      {
        sub_1B202B058(v6 > 1, v7 + 1, 1);
        v2 = v11;
      }
      *(_QWORD *)(v2 + 16) = v7 + 1;
      sub_1B1A18378((uint64_t)v10, v2 + 88 * v7 + 32, (unint64_t *)&unk_1ED4BB3A0, (uint64_t)&_s8MetadataVN);
      v4 += 88;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t sub_1B1C51890(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v8;
  uint64_t v9;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x1E0DEE9D8];
  if (v1)
  {
    v9 = MEMORY[0x1E0DEE9D8];
    sub_1B202B0D8(0, v1, 0);
    v4 = a1 + 32;
    sub_1B1A02758(0, &qword_1ED4B8EF0, (uint64_t)&type metadata for ComponentProperty, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    do
    {
      swift_retain_n();
      swift_dynamicCast();
      swift_release();
      v2 = v9;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1B202B0D8(0, *(_QWORD *)(v9 + 16) + 1, 1);
        v2 = v9;
      }
      v6 = *(_QWORD *)(v2 + 16);
      v5 = *(_QWORD *)(v2 + 24);
      if (v6 >= v5 >> 1)
      {
        sub_1B202B0D8(v5 > 1, v6 + 1, 1);
        v2 = v9;
      }
      *(_QWORD *)(v2 + 16) = v6 + 1;
      *(_QWORD *)(v2 + 8 * v6 + 32) = v8;
      v4 += 8;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t sub_1B1C519D4(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  __int128 v8;
  uint64_t v9;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x1E0DEE9D8];
  if (v1)
  {
    v9 = MEMORY[0x1E0DEE9D8];
    sub_1B202B190(0, v1, 0);
    v4 = a1 + 32;
    v2 = v9;
    do
    {
      swift_dynamicCast();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1B202B190(0, *(_QWORD *)(v2 + 16) + 1, 1);
        v2 = v9;
      }
      v6 = *(_QWORD *)(v2 + 16);
      v5 = *(_QWORD *)(v2 + 24);
      if (v6 >= v5 >> 1)
      {
        sub_1B202B190(v5 > 1, v6 + 1, 1);
        v2 = v9;
      }
      *(_QWORD *)(v2 + 16) = v6 + 1;
      sub_1B1A0DDAC(&v8, (_OWORD *)(v2 + 32 * v6 + 32));
      v4 += 4;
      --v1;
    }
    while (v1);
  }
  return v2;
}

unint64_t sub_1B1C51AF4(uint64_t a1, char a2, unint64_t a3, char a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v11;
  char v13;
  uint64_t v17;
  uint64_t v19;
  unint64_t result;
  char v21;
  char v22;
  char v23;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v11 = v10;
  *((_QWORD *)&v38 + 1) = a7;
  v13 = a4;
  v17 = a9;
  if (!*(_QWORD *)(*(_QWORD *)a9 + 16)
    || (v19 = a6, result = sub_1B1DC3AC8(a1), a6 = v19, v17 = a9, v11 = v10, v13 = a4, (v21 & 1) == 0))
  {
    *(_QWORD *)&v38 = a6;
    if (!*(_QWORD *)(*a8 + 16) || (result = sub_1B1DC3AC8(a1), (v22 & 1) == 0))
    {
      v23 = a2 & 1;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v41 = *a8;
      *a8 = 0x8000000000000000;
      sub_1B1B84A2C(1, a1, isUniquelyReferenced_nonNull_native);
      *a8 = v41;
      swift_bridgeObjectRelease();
      v36 = swift_allocObject();
      *(_QWORD *)(v36 + 16) = a1;
      swift_retain();
      if ((a2 & 1) != 0)
      {
        v35 = v13;
        sub_1B1C558C0(1, a3, v13 & 1, a1, v40, a5, v38, *((uint64_t *)&v38 + 1), (uint64_t)a8, v17, a10);
        if (v11)
          return swift_release();
        sub_1B1C5854C(v40, v36, v38, *((uint64_t *)&v38 + 1), 1, a3, v13 & 1, a5, 0);
        v37 = 0;
        type metadata accessor for Node();
        type metadata accessor for AuthoringNode();
        if (swift_dynamicCastMetatype())
        {
          v27 = OBJC_IVAR____TtC3VFX13AuthoringNode_inputs;
          swift_retain();
          v28 = swift_bridgeObjectRetain();
          v25 = v17;
          v29 = sub_1B1C4EDA0(v28, a8, v17);
          swift_bridgeObjectRelease();
          *(_QWORD *)(a1 + v27) = v29;
          swift_release();
          swift_bridgeObjectRelease();
        }
        else
        {
          v25 = v17;
        }
        v13 = v35;
        v23 = a2 & 1;
      }
      else
      {
        v37 = v11;
        v25 = v17;
      }
      v26 = swift_allocObject();
      *(_OWORD *)(v26 + 16) = v38;
      sub_1B1C5ACBC((void (*)(_QWORD *))sub_1B1C78680, v26, v40, v23, a3, v13 & 1, v25, a5, v38, (uint64_t)a8, a10, (uint64_t *)(v36 + 16));
      if (v37)
      {
        swift_release();
        return swift_release();
      }
      swift_release();
      sub_1B1C62058(a1);
      v30 = swift_isUniquelyReferenced_nonNull_native();
      v42 = *a8;
      *a8 = 0x8000000000000000;
      sub_1B1B84A2C(0, a1, v30);
      *a8 = v42;
      swift_bridgeObjectRelease();
      if ((a2 & 1) != 0)
        return swift_release();
      sub_1B1C558C0(a2 & 1, a3, v13 & 1, a1, v40, a5, v38, *((uint64_t *)&v38 + 1), (uint64_t)a8, v25, a10);
      sub_1B1C5854C(v40, v36, v38, *((uint64_t *)&v38 + 1), a2 & 1, a3, v13 & 1, a5, 0);
      type metadata accessor for Node();
      type metadata accessor for AuthoringNode();
      if (swift_dynamicCastMetatype())
      {
        v31 = *(_QWORD *)(v36 + 16);
        v32 = OBJC_IVAR____TtC3VFX13AuthoringNode_inputs;
        swift_retain();
        v33 = swift_bridgeObjectRetain();
        v34 = sub_1B1C4EDA0(v33, a8, v25);
        swift_bridgeObjectRelease();
        *(_QWORD *)(v31 + v32) = v34;
        swift_release();
        swift_release();
        return swift_bridgeObjectRelease();
      }
      return swift_release();
    }
  }
  return result;
}

uint64_t sub_1B1C51F64(uint64_t a1, char a2, unint64_t a3, char a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8, uint64_t *a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  char v21;
  char isUniquelyReferenced_nonNull_native;
  uint64_t *v23;
  char v24;
  uint64_t (*v25)(uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t result;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v48;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v11 = v10;
  v17 = (uint64_t)a9;
  v18 = *a9;
  if (*(_QWORD *)(*a9 + 16))
  {
    v19 = sub_1B1DC3AC8(a1);
    if ((v20 & 1) != 0)
    {
      a5 = *(_QWORD *)(*(_QWORD *)(v18 + 56) + 8 * v19);
      swift_retain();
      return a5;
    }
  }
  if (!*(_QWORD *)(*a8 + 16) || (sub_1B1DC3AC8(a1), (v21 & 1) == 0))
  {
    v48 = a2 & 1;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v51 = *a8;
    *a8 = 0x8000000000000000;
    sub_1B1B84A2C(1, a1, isUniquelyReferenced_nonNull_native);
    *a8 = v51;
    swift_bridgeObjectRelease();
    v45 = swift_allocObject();
    *(_QWORD *)(v45 + 16) = a1;
    v23 = (uint64_t *)(v45 + 16);
    v24 = a4;
    if ((a4 & 1) != 0)
    {
      v25 = *(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 200);
      swift_retain();
      v26 = v25(1);
      swift_release();
      v24 = a4;
      v44 = v26;
      *v23 = v26;
    }
    else
    {
      swift_retain();
      v44 = a1;
    }
    if (v48)
    {
      sub_1B1C55C8C(1, a3, v24 & 1, a1, v11, a5, a6, a7, (uint64_t)a8, (uint64_t)a9, a10);
      if (v50)
        goto LABEL_17;
      v34 = v11;
      sub_1B1C58840(v11, v45, a6, a7, 1, a3, v24 & 1, a5, 1);
      v35 = OBJC_IVAR____TtC3VFX13AuthoringNode_inputs;
      swift_retain();
      v36 = swift_bridgeObjectRetain();
      v17 = (uint64_t)a9;
      v37 = sub_1B1C4F1D0(v36, a8, a9);
      v50 = 0;
      swift_bridgeObjectRelease();
      *(_QWORD *)(v44 + v35) = v37;
      swift_release();
      swift_bridgeObjectRelease();
      v11 = v34;
      v23 = (uint64_t *)(v45 + 16);
    }
    v27 = swift_allocObject();
    *(_QWORD *)(v27 + 16) = a6;
    *(_QWORD *)(v27 + 24) = a7;
    *((_QWORD *)&v43 + 1) = a7;
    *(_QWORD *)&v43 = a6;
    v28 = sub_1B1C5AE24((void (*)(uint64_t *__return_ptr, _QWORD *))sub_1B1C78C84, v27, v11, v48, a3, a4 & 1, v17, a5, v43, (uint64_t)a8, a10, v23);
    if (v50)
    {
      swift_release();
    }
    else
    {
      v29 = v11;
      v30 = a7;
      v31 = a5;
      a5 = v28;
      swift_release();
      v32 = swift_retain();
      sub_1B1C62310(v32, a1, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1F82B44);
      swift_release();
      swift_release();
      swift_retain();
      swift_release();
      *v23 = a5;
      v33 = swift_isUniquelyReferenced_nonNull_native();
      v52 = *a8;
      *a8 = 0x8000000000000000;
      sub_1B1B84A2C(0, a1, v33);
      *a8 = v52;
      swift_bridgeObjectRelease();
      if (!v48)
      {
        sub_1B1C55C8C(v48, a3, a4 & 1, a1, v29, v31, a6, v30, (uint64_t)a8, (uint64_t)a9, a10);
        sub_1B1C58840(v29, v45, a6, v30, v48, a3, a4 & 1, v31, 1);
        v39 = *(_QWORD *)(v45 + 16);
        v40 = OBJC_IVAR____TtC3VFX13AuthoringNode_inputs;
        swift_retain();
        v41 = swift_bridgeObjectRetain();
        v42 = sub_1B1C4F1D0(v41, a8, a9);
        swift_bridgeObjectRelease();
        *(_QWORD *)(v39 + v40) = v42;
        swift_release();
        swift_release();
        swift_bridgeObjectRelease();
        return a5;
      }
    }
LABEL_17:
    swift_release();
    return a5;
  }
  result = sub_1B2229688();
  __break(1u);
  return result;
}

unint64_t sub_1B1C5248C(_QWORD *a1, char a2, unint64_t a3, char a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8, uint64_t *a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v11;
  char v13;
  uint64_t *v17;
  uint64_t v19;
  unint64_t result;
  char v21;
  char v22;
  char v23;
  char isUniquelyReferenced_nonNull_native;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v11 = v10;
  *((_QWORD *)&v35 + 1) = a7;
  v13 = a4;
  v17 = a9;
  if (!*(_QWORD *)(*a9 + 16)
    || (v19 = a6, result = sub_1B1DC3AC8((uint64_t)a1), a6 = v19, v17 = a9, v11 = v10, v13 = a4, (v21 & 1) == 0))
  {
    *(_QWORD *)&v35 = a6;
    if (!*(_QWORD *)(*a8 + 16) || (result = sub_1B1DC3AC8((uint64_t)a1), (v22 & 1) == 0))
    {
      v23 = a2 & 1;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v38 = *a8;
      *a8 = 0x8000000000000000;
      sub_1B1B84A2C(1, (uint64_t)a1, isUniquelyReferenced_nonNull_native);
      *a8 = v38;
      swift_bridgeObjectRelease();
      v33 = swift_allocObject();
      *(_QWORD *)(v33 + 16) = a1;
      swift_retain();
      if ((a2 & 1) != 0)
      {
        sub_1B1C5606C(1, a3, v13 & 1, a1, v37, a5, v35, *((uint64_t *)&v35 + 1), (uint64_t)a8, (uint64_t)v17, a10);
        if (v11)
          return swift_release();
        sub_1B1C58B74(v37, v33, v35, *((uint64_t *)&v35 + 1), 1, a3, v13 & 1, a5, 0, sub_1B1C6D068, (void (*)(uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, unint64_t, uint64_t *))sub_1B1C5CC00);
        v34 = 0;
        type metadata accessor for Node();
        if (swift_dynamicCastMetatype())
        {
          swift_retain();
          v27 = swift_bridgeObjectRetain();
          v25 = v17;
          v28 = sub_1B1C50150(v27, a8, v17);
          swift_bridgeObjectRelease();
          a1[2] = v28;
          swift_release();
          swift_bridgeObjectRelease();
        }
        else
        {
          v25 = v17;
          type metadata accessor for AuthoringNode();
        }
        v23 = a2 & 1;
      }
      else
      {
        v34 = v11;
        v25 = v17;
      }
      v26 = swift_allocObject();
      *(_OWORD *)(v26 + 16) = v35;
      sub_1B1C5AF94((void (*)(_QWORD *))sub_1B1C78680, v26, v37, v23, a3, v13 & 1, (uint64_t)v25, a5, v35, (uint64_t)a8, a10, (uint64_t *)(v33 + 16));
      if (v34)
      {
        swift_release();
        return swift_release();
      }
      swift_release();
      sub_1B1C62058((uint64_t)a1);
      v29 = swift_isUniquelyReferenced_nonNull_native();
      v39 = *a8;
      *a8 = 0x8000000000000000;
      sub_1B1B84A2C(0, (uint64_t)a1, v29);
      *a8 = v39;
      swift_bridgeObjectRelease();
      if ((a2 & 1) != 0)
        return swift_release();
      sub_1B1C5606C(0, a3, v13 & 1, a1, v37, a5, v35, *((uint64_t *)&v35 + 1), (uint64_t)a8, (uint64_t)v25, a10);
      sub_1B1C58B74(v37, v33, v35, *((uint64_t *)&v35 + 1), 0, a3, v13 & 1, a5, 0, sub_1B1C6D068, (void (*)(uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, unint64_t, uint64_t *))sub_1B1C5CC00);
      type metadata accessor for Node();
      if (swift_dynamicCastMetatype())
      {
        v30 = *(_QWORD *)(v33 + 16);
        swift_retain();
        v31 = swift_bridgeObjectRetain();
        v32 = sub_1B1C50150(v31, a8, v25);
        swift_bridgeObjectRelease();
        *(_QWORD *)(v30 + 16) = v32;
        swift_release();
        swift_release();
        return swift_bridgeObjectRelease();
      }
      type metadata accessor for AuthoringNode();
      return swift_release();
    }
  }
  return result;
}

uint64_t sub_1B1C52908(_QWORD *a1, char a2, unint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8, uint64_t a9, uint64_t a10)
{
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  char v21;
  uint64_t v22;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v24;
  uint64_t v25;
  int v26;
  char v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t result;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  __int128 v38;
  unsigned int v39;
  char v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v17 = a9;
  v18 = *(_QWORD *)a9;
  if (*(_QWORD *)(*(_QWORD *)a9 + 16))
  {
    v19 = sub_1B1DC3AC8((uint64_t)a1);
    if ((v20 & 1) != 0)
    {
      a4 = *(_QWORD *)(*(_QWORD *)(v18 + 56) + 8 * v19);
      swift_retain();
      return a4;
    }
  }
  v41 = a5;
  if (!*(_QWORD *)(*a8 + 16))
  {
    v22 = a7;
LABEL_8:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v46 = *a8;
    *a8 = 0x8000000000000000;
    sub_1B1B84A2C(1, (uint64_t)a1, isUniquelyReferenced_nonNull_native);
    *a8 = v46;
    swift_bridgeObjectRelease();
    sub_1B1791524(0, (unint64_t *)&unk_1EEF60120, (uint64_t (*)(uint64_t))type metadata accessor for GraphCodeGen.CFGNode, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    v42 = swift_allocObject();
    *(_QWORD *)(v42 + 16) = a1;
    swift_retain();
    if ((a2 & 1) != 0)
    {
      v26 = a4 & 1;
      v27 = a4 & 1;
      v39 = a4;
      a4 = a6;
      sub_1B1C56440(1, a3, v27, a1, v44, v41, a6, v22, (uint64_t)a8, a9, a10);
      if (v45)
      {
LABEL_17:
        swift_release();
        return a4;
      }
      sub_1B1C58B74(v44, v42, a6, v22, 1, a3, v26, v41, 0, sub_1B1C6E974, (void (*)(uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, unint64_t, uint64_t *))sub_1B1C5CE3C);
      v45 = 0;
      type metadata accessor for Node();
      if (swift_dynamicCastMetatype())
      {
        swift_retain();
        v32 = swift_bridgeObjectRetain();
        v17 = a9;
        v33 = sub_1B1C50A38(v32, a8);
        swift_bridgeObjectRelease();
        a1[2] = v33;
        swift_release();
        swift_bridgeObjectRelease();
      }
      else
      {
        type metadata accessor for AuthoringNode();
        v17 = a9;
      }
      a4 = v39;
    }
    v24 = swift_allocObject();
    *(_QWORD *)(v24 + 16) = a6;
    *(_QWORD *)(v24 + 24) = v22;
    *((_QWORD *)&v38 + 1) = v22;
    *(_QWORD *)&v38 = a6;
    v25 = sub_1B1C5B0FC((void (*)(uint64_t *__return_ptr, _QWORD *))sub_1B1C7A208, v24, v44, a2 & 1, a3, a4 & 1, v17, v41, v38, (uint64_t)a8, a10, (uint64_t *)(v42 + 16));
    if (v45)
    {
      swift_release();
    }
    else
    {
      v28 = a4;
      a4 = v25;
      v40 = v28;
      swift_release();
      v29 = swift_retain();
      v30 = sub_1B1C627F4(v29, (uint64_t)a1, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1F82C38);
      sub_1B1AE81C8(v30);
      swift_release();
      v31 = swift_isUniquelyReferenced_nonNull_native();
      v47 = *a8;
      *a8 = 0x8000000000000000;
      sub_1B1B84A2C(0, (uint64_t)a1, v31);
      *a8 = v47;
      swift_bridgeObjectRelease();
      if ((a2 & 1) == 0)
      {
        sub_1B1C56440(0, a3, v40 & 1, a1, v44, v41, a6, v22, (uint64_t)a8, v17, a10);
        sub_1B1C58B74(v44, v42, a6, v22, 0, a3, v40 & 1, v41, 0, sub_1B1C6E974, (void (*)(uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, unint64_t, uint64_t *))sub_1B1C5CE3C);
        type metadata accessor for Node();
        if (swift_dynamicCastMetatype())
        {
          v35 = *(_QWORD *)(v42 + 16);
          swift_retain();
          v36 = swift_bridgeObjectRetain();
          v37 = sub_1B1C50A38(v36, a8);
          swift_bridgeObjectRelease();
          *(_QWORD *)(v35 + 16) = v37;
          swift_release();
          swift_release();
          swift_bridgeObjectRelease();
          return a4;
        }
        type metadata accessor for AuthoringNode();
      }
    }
    goto LABEL_17;
  }
  sub_1B1DC3AC8((uint64_t)a1);
  if ((v21 & 1) == 0)
  {
    v22 = a7;
    goto LABEL_8;
  }
  result = sub_1B2229688();
  __break(1u);
  return result;
}

_QWORD *sub_1B1C52E1C@<X0>(uint64_t *__return_ptr a1@<X8>, _QWORD *a2@<X0>, char a3@<W1>, unint64_t a4@<X2>, char a5@<W3>, unint64_t a6@<X4>, uint64_t a7@<X5>, uint64_t a8@<X6>, uint64_t *a9@<X7>, uint64_t *a10, uint64_t a11)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *result;
  char v36;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v54;
  _OWORD v55[5];
  uint64_t v56;
  _QWORD v57[13];
  unint64_t v58;

  v12 = v11;
  v58 = a4;
  v20 = *a10;
  if (*(_QWORD *)(*a10 + 16))
  {
    v21 = sub_1B1DC3AC8((uint64_t)a2);
    if ((v22 & 1) != 0)
    {
      v23 = (uint64_t *)(*(_QWORD *)(v20 + 56) + 88 * v21);
      v24 = *v23;
      v25 = v23[1];
      v26 = v23[2];
      v27 = v23[3];
      v28 = v23[4];
      v29 = v23[5];
      v30 = v23[6];
      v31 = v23[7];
      v32 = v23[8];
      v33 = v23[9];
      v34 = v23[10];
      *a1 = v24;
      a1[1] = v25;
      a1[2] = v26;
      a1[3] = v27;
      a1[4] = v28;
      a1[5] = v29;
      a1[6] = v30;
      a1[7] = v31;
      a1[8] = v32;
      a1[9] = v33;
      a1[10] = v34;
      return (_QWORD *)sub_1B1B9D8BC(v24);
    }
  }
  v50 = a1;
  if (!*(_QWORD *)(*a9 + 16) || (sub_1B1DC3AC8((uint64_t)a2), (v36 & 1) == 0))
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)&v55[0] = *a9;
    *a9 = 0x8000000000000000;
    sub_1B1B84A2C(1, (uint64_t)a2, isUniquelyReferenced_nonNull_native);
    *a9 = *(_QWORD *)&v55[0];
    swift_bridgeObjectRelease();
    sub_1B1A02758(0, &qword_1EEF5B790, (uint64_t)&type metadata for GraphCodeGen.CodeGenAtom, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    v51 = swift_allocObject();
    *(_QWORD *)(v51 + 16) = a2;
    swift_retain();
    if ((a3 & 1) != 0)
    {
      sub_1B1C56828(1, v58, a5 & 1, a2, v52, a6, a7, a8, (uint64_t)a9, (uint64_t)a10, a11);
      if (v11)
        return (_QWORD *)swift_release();
      sub_1B1C58E5C(v52, v51, a7, a8, 1, v58, a5 & 1, a6, 0);
      v12 = 0;
      type metadata accessor for Node();
      if (swift_dynamicCastMetatype())
      {
        swift_retain();
        v44 = swift_bridgeObjectRetain();
        v45 = sub_1B1C504BC(v44, a9, a10);
        swift_bridgeObjectRelease();
        a2[2] = v45;
        swift_release();
        swift_bridgeObjectRelease();
      }
      else
      {
        type metadata accessor for AuthoringNode();
      }
    }
    v38 = swift_allocObject();
    *(_QWORD *)(v38 + 16) = a7;
    *(_QWORD *)(v38 + 24) = a8;
    *((_QWORD *)&v49 + 1) = a8;
    *(_QWORD *)&v49 = a7;
    sub_1B1C5B26C((void (*)(_QWORD *))sub_1B1C78D78, v38, v52, a3 & 1, v58, a5 & 1, (uint64_t)a10, a6, v49, (uint64_t)a9, a11, (uint64_t *)(v51 + 16));
    if (v12)
    {
      swift_release();
      return (_QWORD *)swift_release();
    }
    swift_release();
    sub_1B1A18378((uint64_t)v55, (uint64_t)v57, &qword_1EEF5B790, (uint64_t)&type metadata for GraphCodeGen.CodeGenAtom);
    sub_1B1BCCDD4(v57, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1B9D8BC);
    sub_1B1C62168(v57, (uint64_t)a2, &v54);
    sub_1B1BCCC88(v54);
    sub_1B1BCCDD4(v57, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1BCCCA8);
    v39 = swift_isUniquelyReferenced_nonNull_native();
    v54 = *a9;
    *a9 = 0x8000000000000000;
    sub_1B1B84A2C(0, (uint64_t)a2, v39);
    *a9 = v54;
    swift_bridgeObjectRelease();
    if ((a3 & 1) == 0)
    {
      v40 = v58;
      sub_1B1C56828(0, v58, a5 & 1, a2, v52, a6, a7, a8, (uint64_t)a9, (uint64_t)a10, a11);
      sub_1B1C58E5C(v52, v51, a7, a8, 0, v40, a5 & 1, a6, 0);
      type metadata accessor for Node();
      if (swift_dynamicCastMetatype())
      {
        v46 = *(_QWORD *)(v51 + 16);
        swift_retain();
        v47 = swift_bridgeObjectRetain();
        v48 = sub_1B1C504BC(v47, a9, a10);
        swift_bridgeObjectRelease();
        *(_QWORD *)(v46 + 16) = v48;
        swift_release();
        swift_release();
        result = (_QWORD *)swift_bridgeObjectRelease();
        goto LABEL_15;
      }
      type metadata accessor for AuthoringNode();
    }
    result = (_QWORD *)swift_release();
LABEL_15:
    v41 = v56;
    v42 = v55[1];
    *(_OWORD *)v50 = v55[0];
    *((_OWORD *)v50 + 1) = v42;
    v43 = v55[3];
    *((_OWORD *)v50 + 2) = v55[2];
    *((_OWORD *)v50 + 3) = v43;
    *((_OWORD *)v50 + 4) = v55[4];
    v50[10] = v41;
    return result;
  }
  result = (_QWORD *)sub_1B2229688();
  __break(1u);
  return result;
}

uint64_t sub_1B1C53420(uint64_t a1, char a2, unint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8, uint64_t a9, uint64_t a10)
{
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  uint64_t *v21;
  char v22;
  uint64_t v23;
  int v24;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t result;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  unsigned int v43;
  unint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v17 = a9;
  v18 = *(_QWORD *)a9;
  if (*(_QWORD *)(*(_QWORD *)a9 + 16))
  {
    v19 = sub_1B1DC3AC8(a1);
    if ((v20 & 1) != 0)
    {
      v21 = *(uint64_t **)(*(_QWORD *)(v18 + 56) + 8 * v19);
      swift_retain();
      return (uint64_t)v21;
    }
  }
  v46 = a4;
  if (!*(_QWORD *)(*a8 + 16))
  {
    v23 = a7;
LABEL_8:
    v24 = a2 & 1;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v50 = *a8;
    *a8 = 0x8000000000000000;
    sub_1B1B84A2C(1, a1, isUniquelyReferenced_nonNull_native);
    *a8 = v50;
    swift_bridgeObjectRelease();
    sub_1B1C6BD30(0);
    v45 = swift_allocObject();
    *(_QWORD *)(v45 + 16) = a1;
    v21 = (uint64_t *)(v45 + 16);
    swift_retain();
    v43 = v24;
    v44 = a3;
    if (v24)
    {
      sub_1B1C56C20(1, a3, v46 & 1, a1, v48, a5, a6, v23, (uint64_t)a8, a9, a10);
      if (v49)
        goto LABEL_12;
      sub_1B1C59160(v48, v45, a6, v23, 1, a3, v46 & 1, a5, 0);
      v49 = 0;
      v34 = v23;
      type metadata accessor for Node();
      type metadata accessor for AuthoringNode();
      if (swift_dynamicCastMetatype())
      {
        v35 = OBJC_IVAR____TtC3VFX13AuthoringNode_inputs;
        swift_retain();
        v36 = swift_bridgeObjectRetain();
        v17 = a9;
        v37 = sub_1B1C4F618(v36, a8, a9);
        swift_bridgeObjectRelease();
        *(_QWORD *)(a1 + v35) = v37;
        swift_release();
        swift_bridgeObjectRelease();
      }
      else
      {
        v17 = a9;
      }
      v23 = v34;
    }
    v26 = swift_allocObject();
    *(_QWORD *)(v26 + 16) = a6;
    *(_QWORD *)(v26 + 24) = v23;
    *((_QWORD *)&v42 + 1) = v23;
    *(_QWORD *)&v42 = a6;
    v27 = sub_1B1C5B3D4((void (*)(uint64_t *__return_ptr, _QWORD *))sub_1B1C78C84, v26, v48, v43, v44, v46 & 1, v17, a5, v42, (uint64_t)a8, a10, v21);
    if (v49)
    {
      swift_release();
      swift_release();
      return (uint64_t)v21;
    }
    v21 = (uint64_t *)v27;
    swift_release();
    v28 = swift_retain();
    v29 = sub_1B1C627F4(v28, a1, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1F82DD8);
    sub_1B1AE81C8(v29);
    swift_release();
    v30 = swift_isUniquelyReferenced_nonNull_native();
    v51 = *a8;
    *a8 = 0x8000000000000000;
    sub_1B1B84A2C(0, a1, v30);
    *a8 = v51;
    swift_bridgeObjectRelease();
    if (!v43)
    {
      v31 = a1;
      v32 = v17;
      sub_1B1C56C20(v43, v44, v46 & 1, v31, v48, a5, a6, v23, (uint64_t)a8, v17, a10);
      sub_1B1C59160(v48, v45, a6, v23, v43, v44, v46 & 1, a5, 0);
      type metadata accessor for Node();
      type metadata accessor for AuthoringNode();
      if (swift_dynamicCastMetatype())
      {
        v38 = *(_QWORD *)(v45 + 16);
        v39 = OBJC_IVAR____TtC3VFX13AuthoringNode_inputs;
        swift_retain();
        v40 = swift_bridgeObjectRetain();
        v41 = sub_1B1C4F618(v40, a8, v32);
        swift_bridgeObjectRelease();
        *(_QWORD *)(v38 + v39) = v41;
        swift_release();
        swift_release();
        swift_bridgeObjectRelease();
        return (uint64_t)v21;
      }
    }
LABEL_12:
    swift_release();
    return (uint64_t)v21;
  }
  sub_1B1DC3AC8(a1);
  if ((v22 & 1) == 0)
  {
    v23 = a7;
    goto LABEL_8;
  }
  result = sub_1B2229688();
  __break(1u);
  return result;
}

uint64_t sub_1B1C53924(_QWORD *a1, char a2, unint64_t a3, char a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8, uint64_t *a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  char v21;
  char isUniquelyReferenced_nonNull_native;
  uint64_t *v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t result;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  int v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v11 = v10;
  v17 = (uint64_t)a9;
  v18 = *a9;
  if (*(_QWORD *)(*a9 + 16))
  {
    v19 = sub_1B1DC3AC8((uint64_t)a1);
    if ((v20 & 1) != 0)
    {
      a5 = *(_QWORD *)(*(_QWORD *)(v18 + 56) + 8 * v19);
      swift_retain();
      return a5;
    }
  }
  if (!*(_QWORD *)(*a8 + 16) || (sub_1B1DC3AC8((uint64_t)a1), (v21 & 1) == 0))
  {
    v47 = a2 & 1;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v50 = *a8;
    *a8 = 0x8000000000000000;
    sub_1B1B84A2C(1, (uint64_t)a1, isUniquelyReferenced_nonNull_native);
    *a8 = v50;
    swift_bridgeObjectRelease();
    v44 = swift_allocObject();
    *(_QWORD *)(v44 + 16) = a1;
    v23 = (uint64_t *)(v44 + 16);
    swift_retain();
    v43 = a1;
    v24 = a4;
    if ((a4 & 1) != 0)
    {
      v25 = sub_1B1BCE288(1);
      swift_release();
      v24 = a4;
      v43 = (_QWORD *)v25;
      *v23 = v25;
    }
    if (v47)
    {
      v28 = a7;
      v29 = v24 & 1;
      v42 = v28;
      sub_1B1C57000(1, a3, v24 & 1, a1, v11, a5, a6, v28, (uint64_t)a8, (uint64_t)a9, a10);
      if (v49)
        goto LABEL_16;
      sub_1B1C59540(v11, v44, a6, v42, 1, a3, v29, a5, 1);
      swift_retain();
      v35 = swift_bridgeObjectRetain();
      v17 = (uint64_t)a9;
      v36 = sub_1B1C502F8(v35, a8, a9);
      v49 = 0;
      swift_bridgeObjectRelease();
      v43[2] = v36;
      swift_release();
      swift_bridgeObjectRelease();
      v23 = (uint64_t *)(v44 + 16);
      a7 = v42;
    }
    v26 = swift_allocObject();
    *(_QWORD *)(v26 + 16) = a6;
    *(_QWORD *)(v26 + 24) = a7;
    *((_QWORD *)&v41 + 1) = a7;
    *(_QWORD *)&v41 = a6;
    v27 = sub_1B1C5B544((void (*)(uint64_t *__return_ptr, _QWORD *))sub_1B1C7A208, v26, v11, v47, a3, a4 & 1, v17, a5, v41, (uint64_t)a8, a10, v23);
    if (v49)
    {
      swift_release();
    }
    else
    {
      v30 = v11;
      v31 = a7;
      v32 = a5;
      a5 = v27;
      swift_release();
      v33 = swift_retain();
      sub_1B1C62310(v33, (uint64_t)a1, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1F82DF4);
      swift_release();
      swift_release();
      swift_retain();
      swift_release();
      *v23 = a5;
      v34 = swift_isUniquelyReferenced_nonNull_native();
      v51 = *a8;
      *a8 = 0x8000000000000000;
      sub_1B1B84A2C(0, (uint64_t)a1, v34);
      *a8 = v51;
      swift_bridgeObjectRelease();
      if (!v47)
      {
        sub_1B1C57000(v47, a3, a4 & 1, a1, v30, v32, a6, v31, (uint64_t)a8, (uint64_t)a9, a10);
        sub_1B1C59540(v30, v44, a6, v31, v47, a3, a4 & 1, v32, 1);
        v38 = *(_QWORD *)(v44 + 16);
        swift_retain();
        v39 = swift_bridgeObjectRetain();
        v40 = sub_1B1C502F8(v39, a8, a9);
        swift_bridgeObjectRelease();
        *(_QWORD *)(v38 + 16) = v40;
        swift_release();
        swift_release();
        swift_bridgeObjectRelease();
        return a5;
      }
    }
LABEL_16:
    swift_release();
    return a5;
  }
  result = sub_1B2229688();
  __break(1u);
  return result;
}

uint64_t sub_1B1C53E1C@<X0>(uint64_t a1@<X0>, char a2@<W1>, unint64_t a3@<X2>, char a4@<W3>, unint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t *a8@<X7>, uint64_t a9@<X8>, uint64_t *a10, uint64_t a11)
{
  uint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t result;
  char v34;
  _QWORD *v35;
  unint64_t v36;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  int v57;
  uint64_t v58;
  uint64_t v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;
  char v71;
  _OWORD v72[9];
  char v73;
  _BYTE v74[144];
  char v75;
  _BYTE v76[152];
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  char v86;
  uint64_t v87;

  v17 = a10;
  v18 = *a10;
  if (*(_QWORD *)(*a10 + 16))
  {
    v19 = sub_1B1DC3AC8(a1);
    if ((v20 & 1) != 0)
    {
      v21 = *(_QWORD *)(v18 + 56) + 152 * v19;
      v22 = *(_OWORD *)(v21 + 16);
      v77 = *(_OWORD *)v21;
      v78 = v22;
      v23 = *(_OWORD *)(v21 + 80);
      v25 = *(_OWORD *)(v21 + 32);
      v24 = *(_OWORD *)(v21 + 48);
      v81 = *(_OWORD *)(v21 + 64);
      v82 = v23;
      v79 = v25;
      v80 = v24;
      v26 = *(_OWORD *)(v21 + 96);
      v27 = *(_OWORD *)(v21 + 112);
      v28 = *(_OWORD *)(v21 + 128);
      v86 = *(_BYTE *)(v21 + 144);
      v84 = v27;
      v85 = v28;
      v83 = v26;
      v29 = *(_OWORD *)(v21 + 112);
      *(_OWORD *)(a9 + 96) = *(_OWORD *)(v21 + 96);
      *(_OWORD *)(a9 + 112) = v29;
      *(_OWORD *)(a9 + 128) = *(_OWORD *)(v21 + 128);
      *(_BYTE *)(a9 + 144) = *(_BYTE *)(v21 + 144);
      v30 = *(_OWORD *)(v21 + 48);
      *(_OWORD *)(a9 + 32) = *(_OWORD *)(v21 + 32);
      *(_OWORD *)(a9 + 48) = v30;
      v31 = *(_OWORD *)(v21 + 80);
      *(_OWORD *)(a9 + 64) = *(_OWORD *)(v21 + 64);
      *(_OWORD *)(a9 + 80) = v31;
      v32 = *(_OWORD *)(v21 + 16);
      *(_OWORD *)a9 = *(_OWORD *)v21;
      *(_OWORD *)(a9 + 16) = v32;
      return sub_1B1B7C5AC((uint64_t)&v77);
    }
  }
  v55 = a6;
  if (!*(_QWORD *)(*a8 + 16))
  {
    v35 = (_QWORD *)a1;
    v36 = a5;
LABEL_8:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)&v77 = *a8;
    *a8 = 0x8000000000000000;
    sub_1B1B84A2C(1, (uint64_t)v35, isUniquelyReferenced_nonNull_native);
    *a8 = v77;
    swift_bridgeObjectRelease();
    sub_1B1C795D4();
    v54 = swift_allocObject();
    *(_QWORD *)(v54 + 16) = v35;
    swift_retain();
    if ((a2 & 1) != 0)
    {
      sub_1B1C573E8(1, a3, a4 & 1, v35, v58, v36, v55, a7, (uint64_t)a8, (uint64_t)a10, a11);
      v40 = v87;
      if (v87)
      {
LABEL_13:
        result = swift_release();
        v87 = v40;
        return result;
      }
      sub_1B1C59848(v58, v54, v55, a7, 1, a3, a4 & 1, v36, 0);
      v87 = 0;
      type metadata accessor for Node();
      if (swift_dynamicCastMetatype())
      {
        swift_retain();
        v47 = swift_bridgeObjectRetain();
        v17 = a10;
        v48 = sub_1B1C50694(v47, a8, a10);
        swift_bridgeObjectRelease();
        v35[2] = v48;
        swift_release();
        swift_bridgeObjectRelease();
        v38 = v36;
      }
      else
      {
        type metadata accessor for AuthoringNode();
        v38 = v36;
        v17 = a10;
      }
    }
    else
    {
      v38 = v36;
    }
    v39 = swift_allocObject();
    *(_QWORD *)(v39 + 16) = v55;
    *(_QWORD *)(v39 + 24) = a7;
    *((_QWORD *)&v53 + 1) = a7;
    *(_QWORD *)&v53 = v55;
    sub_1B1C5B6B4((void (*)(_QWORD *))sub_1B1C78D78, v39, v58, a2 & 1, a3, a4 & 1, (uint64_t)v17, v38, v53, (uint64_t)a8, a11, (uint64_t *)(v54 + 16));
    if (v87)
    {
      swift_release();
      return swift_release();
    }
    swift_release();
    *(_OWORD *)&v74[96] = v83;
    *(_OWORD *)&v74[112] = v84;
    *(_OWORD *)&v74[128] = v85;
    v75 = v86;
    *(_OWORD *)&v74[32] = v79;
    *(_OWORD *)&v74[48] = v80;
    *(_OWORD *)&v74[64] = v81;
    *(_OWORD *)&v74[80] = v82;
    *(_OWORD *)v74 = v77;
    *(_OWORD *)&v74[16] = v78;
    sub_1B1B7C5AC((uint64_t)v74);
    v61 = *(_QWORD *)v74;
    v62 = *(_OWORD *)&v74[8];
    v63 = *(_OWORD *)&v74[24];
    v64 = *(_OWORD *)&v74[40];
    v65 = *(_OWORD *)&v74[56];
    v66 = *(_OWORD *)&v74[72];
    v67 = *(_OWORD *)&v74[88];
    v68 = *(_OWORD *)&v74[104];
    v69 = *(_OWORD *)&v74[120];
    v70 = *(_QWORD *)&v74[136];
    v71 = v75;
    sub_1B1C6242C(&v61, (uint64_t)v35, (uint64_t)v72);
    sub_1B1B4D278((uint64_t)v72, (uint64_t)v76, (unint64_t *)&unk_1EEF5CEC0, (uint64_t (*)(uint64_t))sub_1B1C795D4);
    sub_1B19ED720((uint64_t)v76);
    sub_1B19ED720((uint64_t)v74);
    v41 = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)&v72[0] = *a8;
    *a8 = 0x8000000000000000;
    sub_1B1B84A2C(0, (uint64_t)v35, v41);
    *a8 = *(_QWORD *)&v72[0];
    swift_bridgeObjectRelease();
    if ((a2 & 1) == 0)
    {
      v57 = a4 & 1;
      v42 = v87;
      sub_1B1C573E8(a2 & 1, a3, v57, v35, v58, v38, v55, a7, (uint64_t)a8, (uint64_t)v17, a11);
      if (v42)
      {
        v72[6] = v83;
        v72[7] = v84;
        v72[8] = v85;
        v73 = v86;
        v72[2] = v79;
        v72[3] = v80;
        v72[4] = v81;
        v72[5] = v82;
        v72[0] = v77;
        v72[1] = v78;
        v40 = v42;
        sub_1B19ED720((uint64_t)v72);
        goto LABEL_13;
      }
      sub_1B1C59848(v58, v54, v55, a7, a2 & 1, a3, v57, v38, 0);
      v87 = 0;
      type metadata accessor for Node();
      if (swift_dynamicCastMetatype())
      {
        v49 = *(_QWORD *)(v54 + 16);
        swift_retain();
        v50 = swift_bridgeObjectRetain();
        v51 = v87;
        v52 = sub_1B1C50694(v50, a8, v17);
        v87 = v51;
        swift_bridgeObjectRelease();
        *(_QWORD *)(v49 + 16) = v52;
        swift_release();
        swift_release();
        result = swift_bridgeObjectRelease();
        goto LABEL_19;
      }
      type metadata accessor for AuthoringNode();
    }
    result = swift_release();
LABEL_19:
    v43 = v84;
    *(_OWORD *)(a9 + 96) = v83;
    *(_OWORD *)(a9 + 112) = v43;
    *(_OWORD *)(a9 + 128) = v85;
    *(_BYTE *)(a9 + 144) = v86;
    v44 = v80;
    *(_OWORD *)(a9 + 32) = v79;
    *(_OWORD *)(a9 + 48) = v44;
    v45 = v82;
    *(_OWORD *)(a9 + 64) = v81;
    *(_OWORD *)(a9 + 80) = v45;
    v46 = v78;
    *(_OWORD *)a9 = v77;
    *(_OWORD *)(a9 + 16) = v46;
    return result;
  }
  sub_1B1DC3AC8(a1);
  if ((v34 & 1) == 0)
  {
    v35 = (_QWORD *)a1;
    v36 = a5;
    goto LABEL_8;
  }
  result = sub_1B2229688();
  __break(1u);
  return result;
}

uint64_t sub_1B1C544CC(_QWORD *a1, char a2, unint64_t a3, char a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v18;
  unint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t result;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  _QWORD *v44;
  int v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  v11 = v10;
  v18 = *(_QWORD *)a9;
  if (*(_QWORD *)(*(_QWORD *)a9 + 16))
  {
    v19 = sub_1B1DC3AC8((uint64_t)a1);
    if ((v20 & 1) != 0)
    {
      a3 = *(_QWORD *)(*(_QWORD *)(v18 + 56) + 16 * v19);
      swift_bridgeObjectRetain();
      return a3;
    }
  }
  v46 = a6;
  v47 = a3;
  if (!*(_QWORD *)(*a8 + 16))
  {
    v21 = a7;
    v24 = v11;
    v22 = a9;
LABEL_8:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v52 = *a8;
    *a8 = 0x8000000000000000;
    sub_1B1B84A2C(1, (uint64_t)a1, isUniquelyReferenced_nonNull_native);
    *a8 = v52;
    swift_bridgeObjectRelease();
    sub_1B1A02758(0, (unint64_t *)&qword_1ED4BA2B0, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    v48 = swift_allocObject();
    *(_QWORD *)(v48 + 16) = a1;
    swift_retain();
    v45 = a2 & 1;
    v44 = a1;
    if ((a2 & 1) != 0)
    {
      sub_1B1C57794(1, a3, a4 & 1, a1, v24, a5, v46, v21, (uint64_t)a8, v22, a10);
      if (v51)
        goto LABEL_13;
      sub_1B1C59B7C(v24, v48, v46, v21, 1, a3, a4 & 1, a5, 0);
      v51 = 0;
      v27 = a5;
      type metadata accessor for Node();
      if (swift_dynamicCastMetatype())
      {
        swift_retain();
        v38 = swift_bridgeObjectRetain();
        v26 = a9;
        v39 = sub_1B1C50880(v38, a8);
        swift_bridgeObjectRelease();
        v44[2] = v39;
        v27 = a5;
        swift_release();
        swift_bridgeObjectRelease();
      }
      else
      {
        type metadata accessor for AuthoringNode();
        v26 = a9;
      }
    }
    else
    {
      v26 = v22;
      v27 = a5;
    }
    v28 = swift_allocObject();
    a3 = a10;
    *(_QWORD *)(v28 + 16) = v46;
    *(_QWORD *)(v28 + 24) = v21;
    *((_QWORD *)&v43 + 1) = v21;
    *(_QWORD *)&v43 = v46;
    v29 = v26;
    v30 = sub_1B1C5B81C((void (*)(_QWORD *__return_ptr, _QWORD *))sub_1B1C79494, v28, v24, v45, v47, a4 & 1, v26, v27, v43, (uint64_t)a8, a10, (uint64_t *)(v48 + 16));
    if (v51)
    {
      swift_release();
      swift_release();
      return a3;
    }
    v32 = v30;
    v33 = v31;
    swift_release();
    swift_bridgeObjectRetain();
    a3 = v32;
    v34 = sub_1B1C626BC(v32, v33, (uint64_t)v44);
    sub_1B1C79470(v34, v35);
    swift_bridgeObjectRelease();
    v36 = swift_isUniquelyReferenced_nonNull_native();
    v53 = *a8;
    *a8 = 0x8000000000000000;
    sub_1B1B84A2C(0, (uint64_t)v44, v36);
    *a8 = v53;
    swift_bridgeObjectRelease();
    if (!v45)
    {
      sub_1B1C57794(0, v47, a4 & 1, v44, v24, a5, v46, v21, (uint64_t)a8, v29, a10);
      sub_1B1C59B7C(v24, v48, v46, v21, 0, v47, a4 & 1, a5, 0);
      type metadata accessor for Node();
      if (swift_dynamicCastMetatype())
      {
        v40 = *(_QWORD *)(v48 + 16);
        swift_retain();
        v41 = swift_bridgeObjectRetain();
        v42 = sub_1B1C50880(v41, a8);
        swift_bridgeObjectRelease();
        *(_QWORD *)(v40 + 16) = v42;
        swift_release();
        swift_release();
        swift_bridgeObjectRelease();
      }
      else
      {
        type metadata accessor for AuthoringNode();
        swift_release();
      }
      return a3;
    }
LABEL_13:
    swift_release();
    return a3;
  }
  v21 = a7;
  sub_1B1DC3AC8((uint64_t)a1);
  v22 = a9;
  if ((v23 & 1) == 0)
  {
    v24 = v11;
    goto LABEL_8;
  }
  result = sub_1B2229688();
  __break(1u);
  return result;
}

uint64_t sub_1B1C54A14(uint64_t a1, char a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8, uint64_t a9, uint64_t a10)
{
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  char v21;
  uint64_t v22;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v24;
  uint64_t v25;
  int v26;
  char v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t result;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  __int128 v40;
  unsigned int v41;
  char v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v17 = a9;
  v18 = *(_QWORD *)a9;
  if (*(_QWORD *)(*(_QWORD *)a9 + 16))
  {
    v19 = sub_1B1DC3AC8(a1);
    if ((v20 & 1) != 0)
    {
      a4 = *(_QWORD *)(*(_QWORD *)(v18 + 56) + 8 * v19);
      swift_retain();
      return a4;
    }
  }
  v44 = a5;
  if (!*(_QWORD *)(*a8 + 16))
  {
    v22 = a7;
LABEL_8:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v49 = *a8;
    *a8 = 0x8000000000000000;
    sub_1B1B84A2C(1, a1, isUniquelyReferenced_nonNull_native);
    *a8 = v49;
    swift_bridgeObjectRelease();
    sub_1B1A02758(0, &qword_1EEF5CF70, (uint64_t)&type metadata for AuthoringNodeCoder, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    v45 = swift_allocObject();
    *(_QWORD *)(v45 + 16) = a1;
    swift_retain();
    v43 = a3;
    if ((a2 & 1) != 0)
    {
      v26 = a4 & 1;
      v27 = a4 & 1;
      v41 = a4;
      a4 = a6;
      sub_1B1C57B0C(1, a3, v27, a1, v47, v44, a6, v22, (uint64_t)a8, a9, a10);
      if (v48)
      {
LABEL_17:
        swift_release();
        return a4;
      }
      sub_1B1C59E58(v47, v45, a6, v22, 1, a3, v26, v44, 0);
      v48 = 0;
      type metadata accessor for Node();
      type metadata accessor for AuthoringNode();
      if (swift_dynamicCastMetatype())
      {
        v32 = OBJC_IVAR____TtC3VFX13AuthoringNode_inputs;
        swift_retain();
        v33 = swift_bridgeObjectRetain();
        v17 = a9;
        v34 = sub_1B1C4FA94(v33, a8, a9);
        swift_bridgeObjectRelease();
        *(_QWORD *)(a1 + v32) = v34;
        swift_release();
        swift_bridgeObjectRelease();
      }
      else
      {
        v17 = a9;
      }
      a4 = v41;
    }
    v24 = swift_allocObject();
    *(_QWORD *)(v24 + 16) = a6;
    *(_QWORD *)(v24 + 24) = v22;
    *((_QWORD *)&v40 + 1) = v22;
    *(_QWORD *)&v40 = a6;
    v25 = sub_1B1C5B98C((void (*)(uint64_t *__return_ptr, _QWORD *))sub_1B1C7A208, v24, v47, a2 & 1, v43, a4 & 1, v17, v44, v40, (uint64_t)a8, a10, (uint64_t *)(v45 + 16));
    if (v48)
    {
      swift_release();
    }
    else
    {
      v28 = a4;
      a4 = v25;
      v42 = v28;
      swift_release();
      v29 = swift_retain();
      v30 = sub_1B1C627F4(v29, a1, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1F834BC);
      sub_1B1AE81C8(v30);
      swift_release();
      v31 = swift_isUniquelyReferenced_nonNull_native();
      v50 = *a8;
      *a8 = 0x8000000000000000;
      sub_1B1B84A2C(0, a1, v31);
      *a8 = v50;
      swift_bridgeObjectRelease();
      if ((a2 & 1) == 0)
      {
        sub_1B1C57B0C(a2 & 1, v43, v42 & 1, a1, v47, v44, a6, v22, (uint64_t)a8, v17, a10);
        sub_1B1C59E58(v47, v45, a6, v22, a2 & 1, v43, v42 & 1, v44, 0);
        type metadata accessor for Node();
        type metadata accessor for AuthoringNode();
        if (swift_dynamicCastMetatype())
        {
          v36 = *(_QWORD *)(v45 + 16);
          v37 = OBJC_IVAR____TtC3VFX13AuthoringNode_inputs;
          swift_retain();
          v38 = swift_bridgeObjectRetain();
          v39 = sub_1B1C4FA94(v38, a8, v17);
          swift_bridgeObjectRelease();
          *(_QWORD *)(v36 + v37) = v39;
          swift_release();
          swift_release();
          swift_bridgeObjectRelease();
          return a4;
        }
      }
    }
    goto LABEL_17;
  }
  sub_1B1DC3AC8(a1);
  if ((v21 & 1) == 0)
  {
    v22 = a7;
    goto LABEL_8;
  }
  result = sub_1B2229688();
  __break(1u);
  return result;
}

uint64_t sub_1B1C54F20(_QWORD *a1, char a2, unint64_t a3, char a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8, uint64_t a9, uint64_t a10)
{
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  uint64_t result;
  char v22;
  uint64_t v23;
  int v24;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  char v43;
  unint64_t v44;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v17 = a9;
  v18 = *(_QWORD *)a9;
  if (*(_QWORD *)(*(_QWORD *)a9 + 16))
  {
    v19 = sub_1B1DC3AC8((uint64_t)a1);
    if ((v20 & 1) != 0)
      return *(_QWORD *)(*(_QWORD *)(v18 + 56) + 8 * v19);
  }
  v43 = a4;
  v44 = a3;
  if (!*(_QWORD *)(*a8 + 16))
  {
    v23 = a7;
LABEL_8:
    v24 = a2 & 1;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v48 = *a8;
    *a8 = 0x8000000000000000;
    sub_1B1B84A2C(1, (uint64_t)a1, isUniquelyReferenced_nonNull_native);
    *a8 = v48;
    swift_bridgeObjectRelease();
    v26 = swift_allocObject();
    *(_QWORD *)(v26 + 16) = a1;
    v27 = (uint64_t *)(v26 + 16);
    swift_retain();
    v42 = v24;
    if (v24)
    {
      v41 = v26;
      sub_1B1C57E80(1, v44, v43 & 1, a1, v46, a5, a6, v23, (uint64_t)a8, a9, a10);
      if (v47)
        return swift_release();
      v40 = a10;
      sub_1B1C5A154(v46, v26, a6, v23, 1, v44, v43 & 1, a5, 0);
      v47 = 0;
      v28 = v23;
      type metadata accessor for Node();
      if (swift_dynamicCastMetatype())
      {
        swift_retain();
        v36 = swift_bridgeObjectRetain();
        v17 = a9;
        v37 = sub_1B1C50A38(v36, a8);
        swift_bridgeObjectRelease();
        a1[2] = v37;
        swift_release();
        swift_bridgeObjectRelease();
      }
      else
      {
        type metadata accessor for AuthoringNode();
        v17 = a9;
      }
      v26 = v41;
    }
    else
    {
      v40 = a10;
      v28 = v23;
    }
    v29 = swift_allocObject();
    *(_QWORD *)(v29 + 16) = a6;
    *(_QWORD *)(v29 + 24) = v28;
    *((_QWORD *)&v38 + 1) = v28;
    *(_QWORD *)&v38 = a6;
    v30 = sub_1B1C5BAFC((void (*)(uint64_t *__return_ptr, _QWORD *))sub_1B1C7A208, v29, v46, v42, v44, v43 & 1, v17, a5, v38, (uint64_t)a8, v40, v27);
    if (v47)
    {
      swift_release();
      return swift_release();
    }
    v39 = v28;
    v31 = v30;
    swift_release();
    sub_1B1C62914(v31, (uint64_t)a1);
    v32 = swift_isUniquelyReferenced_nonNull_native();
    v49 = *a8;
    *a8 = 0x8000000000000000;
    sub_1B1B84A2C(0, (uint64_t)a1, v32);
    *a8 = v49;
    swift_bridgeObjectRelease();
    if (!v42)
    {
      sub_1B1C57E80(0, v44, v43 & 1, a1, v46, a5, a6, v39, (uint64_t)a8, v17, v40);
      sub_1B1C5A154(v46, v26, a6, v39, 0, v44, v43 & 1, a5, 0);
      type metadata accessor for Node();
      if (swift_dynamicCastMetatype())
      {
        v33 = *(_QWORD *)(v26 + 16);
        swift_retain();
        v34 = swift_bridgeObjectRetain();
        v35 = sub_1B1C50A38(v34, a8);
        swift_bridgeObjectRelease();
        *(_QWORD *)(v33 + 16) = v35;
        swift_release();
        swift_release();
        swift_bridgeObjectRelease();
        return v31;
      }
      type metadata accessor for AuthoringNode();
    }
    swift_release();
    return v31;
  }
  sub_1B1DC3AC8((uint64_t)a1);
  if ((v22 & 1) == 0)
  {
    v23 = a7;
    goto LABEL_8;
  }
  result = sub_1B2229688();
  __break(1u);
  return result;
}

uint64_t sub_1B1C553E0(uint64_t a1, char a2, unint64_t a3, char a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8, uint64_t a9, uint64_t a10)
{
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  uint64_t result;
  char v22;
  uint64_t v23;
  int v24;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  unint64_t v45;
  char v46;
  unint64_t v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v17 = a9;
  v18 = *(_QWORD *)a9;
  if (*(_QWORD *)(*(_QWORD *)a9 + 16))
  {
    v19 = sub_1B1DC3AC8(a1);
    if ((v20 & 1) != 0)
      return *(_QWORD *)(*(_QWORD *)(v18 + 56) + 8 * v19);
  }
  v46 = a4;
  v45 = a5;
  v47 = a3;
  if (*(_QWORD *)(*a8 + 16))
  {
    sub_1B1DC3AC8(a1);
    if ((v22 & 1) != 0)
    {
      result = sub_1B2229688();
      __break(1u);
      return result;
    }
    v23 = a7;
  }
  else
  {
    v23 = a7;
  }
  v24 = a2 & 1;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v51 = *a8;
  *a8 = 0x8000000000000000;
  sub_1B1B84A2C(1, a1, isUniquelyReferenced_nonNull_native);
  *a8 = v51;
  swift_bridgeObjectRelease();
  v26 = swift_allocObject();
  *(_QWORD *)(v26 + 16) = a1;
  v27 = (uint64_t *)(v26 + 16);
  swift_retain();
  v44 = v24;
  if (v24)
  {
    v43 = v26;
    sub_1B1C581EC(1, v47, v46 & 1, a1, v49, a5, a6, v23, (uint64_t)a8, a9, a10);
    if (v50)
      return swift_release();
    v42 = a10;
    sub_1B1C5A420(v49, v26, a6, v23, 1, v47, v46 & 1, a5, 0);
    v50 = 0;
    v28 = v23;
    type metadata accessor for Node();
    type metadata accessor for AuthoringNode();
    if (swift_dynamicCastMetatype())
    {
      v37 = OBJC_IVAR____TtC3VFX13AuthoringNode_inputs;
      swift_retain();
      v38 = swift_bridgeObjectRetain();
      v17 = a9;
      v39 = sub_1B1C4FA94(v38, a8, a9);
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + v37) = v39;
      swift_release();
      swift_bridgeObjectRelease();
    }
    else
    {
      v17 = a9;
    }
    v26 = v43;
  }
  else
  {
    v42 = a10;
    v28 = v23;
  }
  v29 = swift_allocObject();
  *(_QWORD *)(v29 + 16) = a6;
  *(_QWORD *)(v29 + 24) = v28;
  *((_QWORD *)&v40 + 1) = v28;
  *(_QWORD *)&v40 = a6;
  v30 = sub_1B1C5BC6C((void (*)(uint64_t *__return_ptr, _QWORD *))sub_1B1C78C84, v29, v49, v44, v47, v46 & 1, v17, v45, v40, (uint64_t)a8, v42, v27);
  if (v50)
  {
    swift_release();
    return swift_release();
  }
  else
  {
    v41 = v28;
    v31 = v30;
    swift_release();
    sub_1B1C62914(v31, a1);
    v32 = swift_isUniquelyReferenced_nonNull_native();
    v52 = *a8;
    *a8 = 0x8000000000000000;
    sub_1B1B84A2C(0, a1, v32);
    *a8 = v52;
    swift_bridgeObjectRelease();
    if (v44
      || (sub_1B1C581EC(v44, v47, v46 & 1, a1, v49, v45, a6, v41, (uint64_t)a8, v17, v42),
          sub_1B1C5A420(v49, v26, a6, v41, 0, v47, v46 & 1, v45, 0),
          type metadata accessor for Node(),
          type metadata accessor for AuthoringNode(),
          !swift_dynamicCastMetatype()))
    {
      swift_release();
    }
    else
    {
      v33 = *(_QWORD *)(v26 + 16);
      v34 = OBJC_IVAR____TtC3VFX13AuthoringNode_inputs;
      swift_retain();
      v35 = swift_bridgeObjectRetain();
      v36 = sub_1B1C4FA94(v35, a8, v17);
      swift_bridgeObjectRelease();
      *(_QWORD *)(v33 + v34) = v36;
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
    }
    return v31;
  }
}

uint64_t sub_1B1C558C0(uint64_t a1, unint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  uint64_t v12;
  char v16;
  int v17;
  void (*v19)(uint64_t *__return_ptr, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  char v33;
  char v34;
  char v35;
  unint64_t v37;
  unsigned int v38;
  unsigned int v39;
  unint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD v48[6];
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v12 = v11;
  v16 = a1;
  v17 = (a2 >> 59) & 2 | (a2 >> 2) & 1;
  if (v17 == 2 && a2 == 0x1000000000000000)
  {
    v21 = 0;
  }
  else
  {
    v19 = *(void (**)(uint64_t *__return_ptr, uint64_t))(**(_QWORD **)(a4
                                                                              + OBJC_IVAR____TtC3VFX13AuthoringNode_raw)
                                                                + 152);
    v20 = swift_retain();
    v19(&v47, v20);
    v21 = v47;
    a1 = swift_release();
  }
  (*(void (**)(_QWORD *__return_ptr, uint64_t))(**(_QWORD **)(a4 + OBJC_IVAR____TtC3VFX13AuthoringNode_raw)
                                                        + 152))(v48, a1);
  v22 = v48[0];
  v54 = v48[0];
  v53 = v48[1];
  sub_1B1B28C6C((uint64_t)&v53);
  v52 = v48[2];
  sub_1B1B28C6C((uint64_t)&v52);
  v51 = v48[3];
  sub_1B1B28C6C((uint64_t)&v51);
  v50 = v48[4];
  sub_1B1B28C6C((uint64_t)&v50);
  v49 = v48[5];
  sub_1B1B28C6C((uint64_t)&v49);
  v23 = *(_QWORD *)(v22 + 16);
  sub_1B1B28C6C((uint64_t)&v54);
  if (*(_QWORD *)(*(_QWORD *)(a4 + OBJC_IVAR____TtC3VFX13AuthoringNode_inputs) + 16) <= v23)
    v24 = v23;
  else
    v24 = *(_QWORD *)(*(_QWORD *)(a4 + OBJC_IVAR____TtC3VFX13AuthoringNode_inputs) + 16);
  swift_retain();
  v25 = sub_1B2134084(0, v24, a4);
  swift_release();
  v45 = *(_QWORD *)(v25 + 16);
  v46 = v25;
  if (v45)
  {
    v26 = v16;
    v27 = 0;
    v39 = v26 & 1;
    v43 = a2;
    v37 = a2 & 0xEFFFFFFFFFFFFFFBLL;
    v28 = 32;
    v38 = a3 & 1;
    v44 = v17;
    do
    {
      v30 = *(_QWORD *)(v46 + v28);
      if (!v30)
        goto LABEL_15;
      swift_retain();
      if (v21)
      {
        sub_1B1C78694(v21);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v27 >= *(_QWORD *)(v21 + 16))
        {
          v31 = 0x8000000000000000;
        }
        else
        {
          v31 = *(_QWORD *)(v21 + 8 * v27 + 32);
          sub_1B19F8CD0(v31);
        }
        v17 = v44;
        if (!v44)
        {
LABEL_21:
          v29 = v43;
          sub_1B19F8CD0(v43);
          sub_1B1D3590C(v31);
          v33 = v32;
          sub_1B1BBC9D8(v43, (uint64_t (*)(unint64_t))sub_1B19F8D00);
          sub_1B19F8D00(v31);
          if ((v33 & 1) != 0)
            goto LABEL_13;
          goto LABEL_14;
        }
      }
      else
      {
        v31 = 0x8000000000000000;
        if (!v17)
          goto LABEL_21;
      }
      if (v17 != 1)
      {
        sub_1B19F8D00(v31);
        v29 = v43;
LABEL_13:
        sub_1B1C51AF4(v30, v39, v29, v38, a6, a7, a8, a9, a10, a11);
        if (v12)
        {
          swift_bridgeObjectRelease();
          swift_release();
          return sub_1B1C785F0(v21);
        }
        goto LABEL_14;
      }
      sub_1B19F8CD0(v37);
      sub_1B1D3590C(v31);
      v35 = v34;
      v29 = v43;
      sub_1B1BBC9D8(v43, (uint64_t (*)(unint64_t))sub_1B19F8D00);
      sub_1B19F8D00(v31);
      if ((v35 & 1) == 0)
        goto LABEL_13;
LABEL_14:
      swift_release();
      v17 = v44;
LABEL_15:
      ++v27;
      v28 += 16;
    }
    while (v45 != v27);
  }
  swift_bridgeObjectRelease();
  return sub_1B1C785F0(v21);
}

uint64_t sub_1B1C55C8C(uint64_t a1, unint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  uint64_t v12;
  char v16;
  int v17;
  void (*v19)(uint64_t *__return_ptr, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  char v33;
  char v34;
  char v35;
  unint64_t v37;
  unsigned int v38;
  unsigned int v39;
  unint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD v48[6];
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v12 = v11;
  v16 = a1;
  v17 = (a2 >> 59) & 2 | (a2 >> 2) & 1;
  if (v17 == 2 && a2 == 0x1000000000000000)
  {
    v21 = 0;
  }
  else
  {
    v19 = *(void (**)(uint64_t *__return_ptr, uint64_t))(**(_QWORD **)(a4
                                                                              + OBJC_IVAR____TtC3VFX13AuthoringNode_raw)
                                                                + 152);
    v20 = swift_retain();
    v19(&v47, v20);
    v21 = v47;
    a1 = swift_release();
  }
  (*(void (**)(_QWORD *__return_ptr, uint64_t))(**(_QWORD **)(a4 + OBJC_IVAR____TtC3VFX13AuthoringNode_raw)
                                                        + 152))(v48, a1);
  v22 = v48[0];
  v54 = v48[0];
  v53 = v48[1];
  sub_1B1B28C6C((uint64_t)&v53);
  v52 = v48[2];
  sub_1B1B28C6C((uint64_t)&v52);
  v51 = v48[3];
  sub_1B1B28C6C((uint64_t)&v51);
  v50 = v48[4];
  sub_1B1B28C6C((uint64_t)&v50);
  v49 = v48[5];
  sub_1B1B28C6C((uint64_t)&v49);
  v23 = *(_QWORD *)(v22 + 16);
  sub_1B1B28C6C((uint64_t)&v54);
  if (*(_QWORD *)(*(_QWORD *)(a4 + OBJC_IVAR____TtC3VFX13AuthoringNode_inputs) + 16) <= v23)
    v24 = v23;
  else
    v24 = *(_QWORD *)(*(_QWORD *)(a4 + OBJC_IVAR____TtC3VFX13AuthoringNode_inputs) + 16);
  swift_retain();
  v25 = sub_1B2134084(0, v24, a4);
  swift_release();
  v45 = *(_QWORD *)(v25 + 16);
  v46 = v25;
  if (v45)
  {
    v26 = v16;
    v27 = 0;
    v39 = v26 & 1;
    v43 = a2;
    v37 = a2 & 0xEFFFFFFFFFFFFFFBLL;
    v28 = 32;
    v38 = a3 & 1;
    v44 = v17;
    do
    {
      v29 = *(_QWORD *)(v46 + v28);
      if (!v29)
        goto LABEL_13;
      swift_retain();
      if (v21)
      {
        sub_1B1C78694(v21);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v27 >= *(_QWORD *)(v21 + 16))
        {
          v30 = 0x8000000000000000;
        }
        else
        {
          v30 = *(_QWORD *)(v21 + 8 * v27 + 32);
          sub_1B19F8CD0(v30);
        }
        v17 = v44;
        if (!v44)
        {
LABEL_19:
          v31 = v43;
          sub_1B19F8CD0(v43);
          sub_1B1D3590C(v30);
          v33 = v32;
          sub_1B1BBC9D8(v43, (uint64_t (*)(unint64_t))sub_1B19F8D00);
          sub_1B19F8D00(v30);
          if ((v33 & 1) != 0)
            goto LABEL_27;
          goto LABEL_12;
        }
      }
      else
      {
        v30 = 0x8000000000000000;
        if (!v17)
          goto LABEL_19;
      }
      if (v17 != 1)
      {
        sub_1B19F8D00(v30);
        v31 = v43;
LABEL_27:
        sub_1B1C51F64(v29, v39, v31, v38, a6, a7, a8, a9, a10, a11);
        if (v12)
        {
          swift_bridgeObjectRelease();
          swift_release();
          return sub_1B1C785F0(v21);
        }
        swift_release();
        goto LABEL_12;
      }
      sub_1B19F8CD0(v37);
      sub_1B1D3590C(v30);
      v35 = v34;
      v31 = v43;
      sub_1B1BBC9D8(v43, (uint64_t (*)(unint64_t))sub_1B19F8D00);
      sub_1B19F8D00(v30);
      if ((v35 & 1) == 0)
        goto LABEL_27;
LABEL_12:
      swift_release();
      v17 = v44;
LABEL_13:
      ++v27;
      v28 += 16;
    }
    while (v45 != v27);
  }
  swift_bridgeObjectRelease();
  return sub_1B1C785F0(v21);
}

uint64_t sub_1B1C5606C(char a1, unint64_t a2, char a3, _QWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  uint64_t v12;
  unint64_t v15;
  int v16;
  uint64_t v17;
  void (*v18)(uint64_t *__return_ptr, uint64_t);
  uint64_t v19;
  uint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  int v37;
  char v38;
  char v39;
  char v40;
  char v41;
  uint64_t v42;
  unint64_t v44;
  uint64_t v45;
  unsigned int v46;
  char v47;
  unsigned int v49;
  int v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  v12 = v11;
  v15 = a2;
  v16 = (a2 >> 59) & 2 | (a2 >> 2) & 1;
  v53 = v16;
  if (a2 == 0x1000000000000000 && v16 == 2)
  {
    v17 = 0;
  }
  else
  {
    v18 = *(void (**)(uint64_t *__return_ptr, uint64_t))(*a4 + 152);
    v19 = swift_retain();
    v18(&v57, v19);
    v17 = v57;
    swift_release();
  }
  v20 = a4[2];
  v21 = *(_QWORD *)(v20 + 16);
  v22 = MEMORY[0x1E0DEE9D8];
  v54 = v15;
  v56 = v17;
  if (v21)
  {
    v47 = a3;
    v55 = v12;
    v58 = MEMORY[0x1E0DEE9D8];
    swift_bridgeObjectRetain();
    sub_1B202A2C8(0, v21, 0);
    v23 = 0;
    v22 = v58;
    v24 = *(_QWORD *)(v58 + 16);
    v25 = 16 * v24;
    do
    {
      v27 = *(_QWORD *)(v20 + v23 + 32);
      v26 = *(_QWORD *)(v20 + v23 + 40);
      v58 = v22;
      v28 = *(_QWORD *)(v22 + 24);
      swift_retain();
      if (v24 >= v28 >> 1)
      {
        sub_1B202A2C8(v28 > 1, v24 + 1, 1);
        v22 = v58;
      }
      *(_QWORD *)(v22 + 16) = v24 + 1;
      v29 = v22 + v25 + v23;
      *(_QWORD *)(v29 + 32) = v27;
      *(_QWORD *)(v29 + 40) = v26;
      v23 += 16;
      ++v24;
      --v21;
    }
    while (v21);
    swift_bridgeObjectRelease();
    v12 = v55;
    v30 = v17;
    v15 = v54;
    a3 = v47;
    v31 = *(_QWORD *)(v22 + 16);
    if (!v31)
      goto LABEL_30;
    goto LABEL_13;
  }
  v30 = v17;
  v31 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
  if (v31)
  {
LABEL_13:
    v32 = 0;
    v49 = a1 & 1;
    v44 = v15 & 0xEFFFFFFFFFFFFFFBLL;
    v45 = v31;
    v33 = 32;
    v46 = a3 & 1;
    do
    {
      v35 = *(_QWORD *)(v22 + v33);
      if (!v35)
        goto LABEL_17;
      swift_retain();
      if (v30)
      {
        sub_1B1C78694(v30);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v32 >= *(_QWORD *)(v56 + 16))
        {
          v36 = 0x8000000000000000;
        }
        else
        {
          v36 = *(_QWORD *)(v56 + 8 * v32 + 32);
          sub_1B19F8CD0(v36);
        }
        v37 = v53;
        v31 = v45;
        if (!v53)
        {
LABEL_23:
          v34 = v54;
          sub_1B19F8CD0(v54);
          sub_1B1D3590C(v36);
          v39 = v38;
          sub_1B1BBC9D8(v54, (uint64_t (*)(unint64_t))sub_1B19F8D00);
          sub_1B19F8D00(v36);
          if ((v39 & 1) != 0)
            goto LABEL_15;
          goto LABEL_16;
        }
      }
      else
      {
        v36 = 0x8000000000000000;
        v37 = v53;
        if (!v53)
          goto LABEL_23;
      }
      if (v37 != 1)
      {
        sub_1B19F8D00(v36);
        v34 = v54;
LABEL_15:
        sub_1B1C5248C(v35, v49, v34, v46, a6, a7, a8, a9, a10, a11);
        if (v12)
        {
          swift_bridgeObjectRelease();
          swift_release();
          v42 = v56;
          return sub_1B1C785F0(v42);
        }
        goto LABEL_16;
      }
      sub_1B19F8CD0(v44);
      sub_1B1D3590C(v36);
      v41 = v40;
      v34 = v54;
      sub_1B1BBC9D8(v54, (uint64_t (*)(unint64_t))sub_1B19F8D00);
      sub_1B19F8D00(v36);
      if ((v41 & 1) == 0)
        goto LABEL_15;
LABEL_16:
      v30 = v56;
      swift_release();
LABEL_17:
      ++v32;
      v33 += 16;
    }
    while (v31 != v32);
  }
LABEL_30:
  swift_bridgeObjectRelease();
  v42 = v30;
  return sub_1B1C785F0(v42);
}

uint64_t sub_1B1C56440(char a1, unint64_t a2, char a3, _QWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  uint64_t v12;
  unint64_t v15;
  int v16;
  uint64_t v17;
  void (*v18)(uint64_t *__return_ptr, uint64_t);
  uint64_t v19;
  uint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  int v36;
  unint64_t v37;
  char v38;
  char v39;
  char v40;
  char v41;
  uint64_t v42;
  unint64_t v44;
  uint64_t v45;
  unsigned int v46;
  char v47;
  unsigned int v49;
  int v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  v12 = v11;
  v15 = a2;
  v16 = (a2 >> 59) & 2 | (a2 >> 2) & 1;
  v53 = v16;
  if (a2 == 0x1000000000000000 && v16 == 2)
  {
    v17 = 0;
  }
  else
  {
    v18 = *(void (**)(uint64_t *__return_ptr, uint64_t))(*a4 + 152);
    v19 = swift_retain();
    v18(&v57, v19);
    v17 = v57;
    swift_release();
  }
  v20 = a4[2];
  v21 = *(_QWORD *)(v20 + 16);
  v22 = MEMORY[0x1E0DEE9D8];
  v54 = v15;
  v56 = v17;
  if (v21)
  {
    v47 = a3;
    v55 = v12;
    v58 = MEMORY[0x1E0DEE9D8];
    swift_bridgeObjectRetain();
    sub_1B202A2C8(0, v21, 0);
    v23 = 0;
    v22 = v58;
    v24 = *(_QWORD *)(v58 + 16);
    v25 = 16 * v24;
    do
    {
      v27 = *(_QWORD *)(v20 + v23 + 32);
      v26 = *(_QWORD *)(v20 + v23 + 40);
      v58 = v22;
      v28 = *(_QWORD *)(v22 + 24);
      swift_retain();
      if (v24 >= v28 >> 1)
      {
        sub_1B202A2C8(v28 > 1, v24 + 1, 1);
        v22 = v58;
      }
      *(_QWORD *)(v22 + 16) = v24 + 1;
      v29 = v22 + v25 + v23;
      *(_QWORD *)(v29 + 32) = v27;
      *(_QWORD *)(v29 + 40) = v26;
      v23 += 16;
      ++v24;
      --v21;
    }
    while (v21);
    swift_bridgeObjectRelease();
    v12 = v55;
    v30 = v17;
    v15 = v54;
    a3 = v47;
    v31 = *(_QWORD *)(v22 + 16);
    if (!v31)
      goto LABEL_31;
    goto LABEL_13;
  }
  v30 = v17;
  v31 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
  if (v31)
  {
LABEL_13:
    v32 = 0;
    v49 = a1 & 1;
    v44 = v15 & 0xEFFFFFFFFFFFFFFBLL;
    v45 = v31;
    v33 = 32;
    v46 = a3 & 1;
    do
    {
      v34 = *(_QWORD *)(v22 + v33);
      if (!v34)
        goto LABEL_15;
      swift_retain();
      if (v30)
      {
        sub_1B1C78694(v30);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v32 >= *(_QWORD *)(v56 + 16))
        {
          v35 = 0x8000000000000000;
        }
        else
        {
          v35 = *(_QWORD *)(v56 + 8 * v32 + 32);
          sub_1B19F8CD0(v35);
        }
        v36 = v53;
        v31 = v45;
        if (!v53)
        {
LABEL_21:
          v37 = v54;
          sub_1B19F8CD0(v54);
          sub_1B1D3590C(v35);
          v39 = v38;
          sub_1B1BBC9D8(v54, (uint64_t (*)(unint64_t))sub_1B19F8D00);
          sub_1B19F8D00(v35);
          if ((v39 & 1) != 0)
            goto LABEL_29;
          goto LABEL_14;
        }
      }
      else
      {
        v35 = 0x8000000000000000;
        v36 = v53;
        if (!v53)
          goto LABEL_21;
      }
      if (v36 != 1)
      {
        sub_1B19F8D00(v35);
        v37 = v54;
LABEL_29:
        sub_1B1C52908(v34, v49, v37, v46, a6, a7, a8, a9, a10, a11);
        if (v12)
        {
          swift_bridgeObjectRelease();
          swift_release();
          v42 = v56;
          return sub_1B1C785F0(v42);
        }
        swift_release();
        goto LABEL_14;
      }
      sub_1B19F8CD0(v44);
      sub_1B1D3590C(v35);
      v41 = v40;
      v37 = v54;
      sub_1B1BBC9D8(v54, (uint64_t (*)(unint64_t))sub_1B19F8D00);
      sub_1B19F8D00(v35);
      if ((v41 & 1) == 0)
        goto LABEL_29;
LABEL_14:
      swift_release();
      v30 = v56;
LABEL_15:
      ++v32;
      v33 += 16;
    }
    while (v31 != v32);
  }
LABEL_31:
  swift_bridgeObjectRelease();
  v42 = v30;
  return sub_1B1C785F0(v42);
}

uint64_t sub_1B1C56828(char a1, unint64_t a2, char a3, _QWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  uint64_t v12;
  unint64_t v15;
  int v16;
  uint64_t v17;
  void (*v18)(uint64_t *__return_ptr, uint64_t);
  uint64_t v19;
  uint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  int v38;
  char v39;
  char v40;
  char v41;
  char v42;
  uint64_t v43;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unsigned int v48;
  char v49;
  unsigned int v51;
  int v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59[11];
  uint64_t v60;
  uint64_t v61;

  v12 = v11;
  v15 = a2;
  v16 = (a2 >> 59) & 2 | (a2 >> 2) & 1;
  v55 = v16;
  if (a2 == 0x1000000000000000 && v16 == 2)
  {
    v17 = 0;
  }
  else
  {
    v18 = *(void (**)(uint64_t *__return_ptr, uint64_t))(*a4 + 152);
    v19 = swift_retain();
    v18(&v60, v19);
    v17 = v60;
    swift_release();
  }
  v20 = a4[2];
  v21 = *(_QWORD *)(v20 + 16);
  v22 = MEMORY[0x1E0DEE9D8];
  v56 = v15;
  v61 = v17;
  if (v21)
  {
    v49 = a3;
    v57 = v12;
    v59[0] = MEMORY[0x1E0DEE9D8];
    swift_bridgeObjectRetain();
    sub_1B202A2C8(0, v21, 0);
    v23 = 0;
    v24 = *(_QWORD *)(v22 + 16);
    v25 = 16 * v24;
    do
    {
      v27 = *(_QWORD *)(v20 + v23 + 32);
      v26 = *(_QWORD *)(v20 + v23 + 40);
      v59[0] = v22;
      v28 = *(_QWORD *)(v22 + 24);
      swift_retain();
      if (v24 >= v28 >> 1)
      {
        sub_1B202A2C8(v28 > 1, v24 + 1, 1);
        v22 = v59[0];
      }
      *(_QWORD *)(v22 + 16) = v24 + 1;
      v29 = v22 + v25 + v23;
      *(_QWORD *)(v29 + 32) = v27;
      *(_QWORD *)(v29 + 40) = v26;
      v23 += 16;
      ++v24;
      --v21;
    }
    while (v21);
    swift_bridgeObjectRelease();
    v15 = v56;
    v12 = v57;
    v30 = v61;
    a3 = v49;
    v31 = *(_QWORD *)(v22 + 16);
    if (!v31)
      goto LABEL_31;
    goto LABEL_13;
  }
  v30 = v17;
  v31 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
  if (v31)
  {
LABEL_13:
    v32 = 0;
    v51 = a1 & 1;
    v46 = v15 & 0xEFFFFFFFFFFFFFFBLL;
    v47 = v31;
    v33 = 32;
    v48 = a3 & 1;
    do
    {
      v35 = *(_QWORD *)(v22 + v33);
      if (!v35)
        goto LABEL_18;
      swift_retain();
      if (v30)
      {
        v58 = v12;
        sub_1B1C78694(v30);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v36 = v61;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v32 >= *(_QWORD *)(v36 + 16))
        {
          v37 = 0x8000000000000000;
        }
        else
        {
          v37 = *(_QWORD *)(v36 + 8 * v32 + 32);
          sub_1B19F8CD0(v37);
        }
        v38 = v55;
        v12 = v58;
        v31 = v47;
        if (!v55)
        {
LABEL_24:
          v34 = v56;
          sub_1B19F8CD0(v56);
          sub_1B1D3590C(v37);
          v40 = v39;
          sub_1B1BBC9D8(v56, (uint64_t (*)(unint64_t))sub_1B19F8D00);
          sub_1B19F8D00(v37);
          if ((v40 & 1) != 0)
            goto LABEL_15;
          goto LABEL_17;
        }
      }
      else
      {
        v37 = 0x8000000000000000;
        v38 = v55;
        if (!v55)
          goto LABEL_24;
      }
      if (v38 != 1)
      {
        sub_1B19F8D00(v37);
        v34 = v56;
LABEL_15:
        sub_1B1C52E1C(v59, v35, v51, v34, v48, a6, a7, a8, a9, a10, a11, v45);
        if (v12)
        {
          swift_bridgeObjectRelease();
          swift_release();
          v43 = v61;
          return sub_1B1C785F0(v43);
        }
        v45 = v59[10];
        sub_1B1BCCCA8(v59[0]);
        goto LABEL_17;
      }
      sub_1B19F8CD0(v46);
      sub_1B1D3590C(v37);
      v42 = v41;
      v34 = v56;
      sub_1B1BBC9D8(v56, (uint64_t (*)(unint64_t))sub_1B19F8D00);
      sub_1B19F8D00(v37);
      if ((v42 & 1) == 0)
        goto LABEL_15;
LABEL_17:
      swift_release();
      v30 = v61;
LABEL_18:
      ++v32;
      v33 += 16;
    }
    while (v31 != v32);
  }
LABEL_31:
  swift_bridgeObjectRelease();
  v43 = v30;
  return sub_1B1C785F0(v43);
}

uint64_t sub_1B1C56C20(uint64_t a1, unint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  uint64_t v12;
  char v16;
  int v17;
  void (*v19)(uint64_t *__return_ptr, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  char v33;
  char v34;
  char v35;
  unint64_t v37;
  unsigned int v38;
  unsigned int v39;
  unint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD v48[6];
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v12 = v11;
  v16 = a1;
  v17 = (a2 >> 59) & 2 | (a2 >> 2) & 1;
  if (v17 == 2 && a2 == 0x1000000000000000)
  {
    v21 = 0;
  }
  else
  {
    v19 = *(void (**)(uint64_t *__return_ptr, uint64_t))(**(_QWORD **)(a4
                                                                              + OBJC_IVAR____TtC3VFX13AuthoringNode_raw)
                                                                + 152);
    v20 = swift_retain();
    v19(&v47, v20);
    v21 = v47;
    a1 = swift_release();
  }
  (*(void (**)(_QWORD *__return_ptr, uint64_t))(**(_QWORD **)(a4 + OBJC_IVAR____TtC3VFX13AuthoringNode_raw)
                                                        + 152))(v48, a1);
  v22 = v48[0];
  v54 = v48[0];
  v53 = v48[1];
  sub_1B1B28C6C((uint64_t)&v53);
  v52 = v48[2];
  sub_1B1B28C6C((uint64_t)&v52);
  v51 = v48[3];
  sub_1B1B28C6C((uint64_t)&v51);
  v50 = v48[4];
  sub_1B1B28C6C((uint64_t)&v50);
  v49 = v48[5];
  sub_1B1B28C6C((uint64_t)&v49);
  v23 = *(_QWORD *)(v22 + 16);
  sub_1B1B28C6C((uint64_t)&v54);
  if (*(_QWORD *)(*(_QWORD *)(a4 + OBJC_IVAR____TtC3VFX13AuthoringNode_inputs) + 16) <= v23)
    v24 = v23;
  else
    v24 = *(_QWORD *)(*(_QWORD *)(a4 + OBJC_IVAR____TtC3VFX13AuthoringNode_inputs) + 16);
  swift_retain();
  v25 = sub_1B2134084(0, v24, a4);
  swift_release();
  v45 = *(_QWORD *)(v25 + 16);
  v46 = v25;
  if (v45)
  {
    v26 = v16;
    v27 = 0;
    v39 = v26 & 1;
    v43 = a2;
    v37 = a2 & 0xEFFFFFFFFFFFFFFBLL;
    v28 = 32;
    v38 = a3 & 1;
    v44 = v17;
    do
    {
      v29 = *(_QWORD *)(v46 + v28);
      if (!v29)
        goto LABEL_13;
      swift_retain();
      if (v21)
      {
        sub_1B1C78694(v21);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v27 >= *(_QWORD *)(v21 + 16))
        {
          v30 = 0x8000000000000000;
        }
        else
        {
          v30 = *(_QWORD *)(v21 + 8 * v27 + 32);
          sub_1B19F8CD0(v30);
        }
        v17 = v44;
        if (!v44)
        {
LABEL_19:
          v31 = v43;
          sub_1B19F8CD0(v43);
          sub_1B1D3590C(v30);
          v33 = v32;
          sub_1B1BBC9D8(v43, (uint64_t (*)(unint64_t))sub_1B19F8D00);
          sub_1B19F8D00(v30);
          if ((v33 & 1) != 0)
            goto LABEL_27;
          goto LABEL_12;
        }
      }
      else
      {
        v30 = 0x8000000000000000;
        if (!v17)
          goto LABEL_19;
      }
      if (v17 != 1)
      {
        sub_1B19F8D00(v30);
        v31 = v43;
LABEL_27:
        sub_1B1C53420(v29, v39, v31, v38, a6, a7, a8, a9, a10, a11);
        if (v12)
        {
          swift_bridgeObjectRelease();
          swift_release();
          return sub_1B1C785F0(v21);
        }
        swift_release();
        goto LABEL_12;
      }
      sub_1B19F8CD0(v37);
      sub_1B1D3590C(v30);
      v35 = v34;
      v31 = v43;
      sub_1B1BBC9D8(v43, (uint64_t (*)(unint64_t))sub_1B19F8D00);
      sub_1B19F8D00(v30);
      if ((v35 & 1) == 0)
        goto LABEL_27;
LABEL_12:
      swift_release();
      v17 = v44;
LABEL_13:
      ++v27;
      v28 += 16;
    }
    while (v45 != v27);
  }
  swift_bridgeObjectRelease();
  return sub_1B1C785F0(v21);
}

uint64_t sub_1B1C57000(char a1, unint64_t a2, char a3, _QWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  uint64_t v12;
  unint64_t v15;
  int v16;
  uint64_t v17;
  void (*v18)(uint64_t *__return_ptr, uint64_t);
  uint64_t v19;
  uint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  int v36;
  unint64_t v37;
  char v38;
  char v39;
  char v40;
  char v41;
  uint64_t v42;
  unint64_t v44;
  uint64_t v45;
  unsigned int v46;
  char v47;
  unsigned int v49;
  int v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  v12 = v11;
  v15 = a2;
  v16 = (a2 >> 59) & 2 | (a2 >> 2) & 1;
  v53 = v16;
  if (a2 == 0x1000000000000000 && v16 == 2)
  {
    v17 = 0;
  }
  else
  {
    v18 = *(void (**)(uint64_t *__return_ptr, uint64_t))(*a4 + 152);
    v19 = swift_retain();
    v18(&v57, v19);
    v17 = v57;
    swift_release();
  }
  v20 = a4[2];
  v21 = *(_QWORD *)(v20 + 16);
  v22 = MEMORY[0x1E0DEE9D8];
  v54 = v15;
  v56 = v17;
  if (v21)
  {
    v47 = a3;
    v55 = v12;
    v58 = MEMORY[0x1E0DEE9D8];
    swift_bridgeObjectRetain();
    sub_1B202A2C8(0, v21, 0);
    v23 = 0;
    v22 = v58;
    v24 = *(_QWORD *)(v58 + 16);
    v25 = 16 * v24;
    do
    {
      v27 = *(_QWORD *)(v20 + v23 + 32);
      v26 = *(_QWORD *)(v20 + v23 + 40);
      v58 = v22;
      v28 = *(_QWORD *)(v22 + 24);
      swift_retain();
      if (v24 >= v28 >> 1)
      {
        sub_1B202A2C8(v28 > 1, v24 + 1, 1);
        v22 = v58;
      }
      *(_QWORD *)(v22 + 16) = v24 + 1;
      v29 = v22 + v25 + v23;
      *(_QWORD *)(v29 + 32) = v27;
      *(_QWORD *)(v29 + 40) = v26;
      v23 += 16;
      ++v24;
      --v21;
    }
    while (v21);
    swift_bridgeObjectRelease();
    v12 = v55;
    v30 = v17;
    v15 = v54;
    a3 = v47;
    v31 = *(_QWORD *)(v22 + 16);
    if (!v31)
      goto LABEL_31;
    goto LABEL_13;
  }
  v30 = v17;
  v31 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
  if (v31)
  {
LABEL_13:
    v32 = 0;
    v49 = a1 & 1;
    v44 = v15 & 0xEFFFFFFFFFFFFFFBLL;
    v45 = v31;
    v33 = 32;
    v46 = a3 & 1;
    do
    {
      v34 = *(_QWORD *)(v22 + v33);
      if (!v34)
        goto LABEL_15;
      swift_retain();
      if (v30)
      {
        sub_1B1C78694(v30);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v32 >= *(_QWORD *)(v56 + 16))
        {
          v35 = 0x8000000000000000;
        }
        else
        {
          v35 = *(_QWORD *)(v56 + 8 * v32 + 32);
          sub_1B19F8CD0(v35);
        }
        v36 = v53;
        v31 = v45;
        if (!v53)
        {
LABEL_21:
          v37 = v54;
          sub_1B19F8CD0(v54);
          sub_1B1D3590C(v35);
          v39 = v38;
          sub_1B1BBC9D8(v54, (uint64_t (*)(unint64_t))sub_1B19F8D00);
          sub_1B19F8D00(v35);
          if ((v39 & 1) != 0)
            goto LABEL_29;
          goto LABEL_14;
        }
      }
      else
      {
        v35 = 0x8000000000000000;
        v36 = v53;
        if (!v53)
          goto LABEL_21;
      }
      if (v36 != 1)
      {
        sub_1B19F8D00(v35);
        v37 = v54;
LABEL_29:
        sub_1B1C53924(v34, v49, v37, v46, a6, a7, a8, a9, a10, a11);
        if (v12)
        {
          swift_bridgeObjectRelease();
          swift_release();
          v42 = v56;
          return sub_1B1C785F0(v42);
        }
        swift_release();
        goto LABEL_14;
      }
      sub_1B19F8CD0(v44);
      sub_1B1D3590C(v35);
      v41 = v40;
      v37 = v54;
      sub_1B1BBC9D8(v54, (uint64_t (*)(unint64_t))sub_1B19F8D00);
      sub_1B19F8D00(v35);
      if ((v41 & 1) == 0)
        goto LABEL_29;
LABEL_14:
      swift_release();
      v30 = v56;
LABEL_15:
      ++v32;
      v33 += 16;
    }
    while (v31 != v32);
  }
LABEL_31:
  swift_bridgeObjectRelease();
  v42 = v30;
  return sub_1B1C785F0(v42);
}

uint64_t sub_1B1C573E8(char a1, unint64_t a2, char a3, _QWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  uint64_t v12;
  unint64_t v14;
  int v16;
  void (*v17)(uint64_t *__return_ptr, uint64_t);
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  int v35;
  char v36;
  char v37;
  char v38;
  char v39;
  uint64_t v40;
  unint64_t v42;
  unsigned int v44;
  char v45;
  unsigned int v46;
  int v50;
  unint64_t v51;
  uint64_t v52;
  _OWORD v53[9];
  char v54;
  _OWORD v55[9];
  char v56;
  uint64_t v57;
  uint64_t v58;

  v12 = v11;
  v14 = a2;
  v16 = (a2 >> 59) & 2 | (a2 >> 2) & 1;
  v50 = v16;
  if (a2 == 0x1000000000000000 && v16 == 2)
  {
    v52 = 0;
  }
  else
  {
    v17 = *(void (**)(uint64_t *__return_ptr, uint64_t))(*a4 + 152);
    v18 = swift_retain();
    v17(&v57, v18);
    v52 = v57;
    swift_release();
  }
  v19 = a4[2];
  v20 = *(_QWORD *)(v19 + 16);
  v21 = MEMORY[0x1E0DEE9D8];
  v51 = v14;
  if (v20)
  {
    v45 = a1;
    v58 = v12;
    *(_QWORD *)&v55[0] = MEMORY[0x1E0DEE9D8];
    swift_bridgeObjectRetain();
    sub_1B202A2C8(0, v20, 0);
    v22 = 0;
    v21 = *(_QWORD *)&v55[0];
    v23 = *(_QWORD *)(*(_QWORD *)&v55[0] + 16);
    v24 = 16 * v23;
    do
    {
      v26 = *(_QWORD *)(v19 + v22 + 32);
      v25 = *(_QWORD *)(v19 + v22 + 40);
      *(_QWORD *)&v55[0] = v21;
      v27 = *(_QWORD *)(v21 + 24);
      swift_retain();
      if (v23 >= v27 >> 1)
      {
        sub_1B202A2C8(v27 > 1, v23 + 1, 1);
        v21 = *(_QWORD *)&v55[0];
      }
      *(_QWORD *)(v21 + 16) = v23 + 1;
      v28 = v21 + v24 + v22;
      *(_QWORD *)(v28 + 32) = v26;
      *(_QWORD *)(v28 + 40) = v25;
      v22 += 16;
      ++v23;
      --v20;
    }
    while (v20);
    swift_bridgeObjectRelease();
    v12 = v58;
    v14 = v51;
    a1 = v45;
  }
  v29 = v52;
  v58 = *(_QWORD *)(v21 + 16);
  if (v58)
  {
    v30 = 0;
    v46 = a1 & 1;
    v42 = v14 & 0xEFFFFFFFFFFFFFFBLL;
    v31 = 32;
    v44 = a3 & 1;
    do
    {
      v33 = *(_QWORD *)(v21 + v31);
      if (!v33)
        goto LABEL_17;
      swift_retain();
      if (v29 && v30 < *(_QWORD *)(v29 + 16))
      {
        v34 = *(_QWORD *)(v52 + 32 + 8 * v30);
        sub_1B19F8CD0(v34);
        v35 = v50;
        if (!v50)
          goto LABEL_22;
      }
      else
      {
        v34 = 0x8000000000000000;
        v35 = v50;
        if (!v50)
        {
LABEL_22:
          v32 = v51;
          sub_1B19F8CD0(v51);
          sub_1B1D3590C(v34);
          v37 = v36;
          sub_1B1BBC9D8(v51, (uint64_t (*)(unint64_t))sub_1B19F8D00);
          sub_1B19F8D00(v34);
          if ((v37 & 1) != 0)
            goto LABEL_14;
          goto LABEL_16;
        }
      }
      if (v35 != 1)
      {
        sub_1B19F8D00(v34);
        v32 = v51;
LABEL_14:
        sub_1B1C53E1C(v55, v33, v46, v32, v44, a6, a7, a8, a9, a10, a11);
        if (v12)
        {
          swift_bridgeObjectRelease();
          swift_release();
          v40 = v52;
          return sub_1B1C785F0(v40);
        }
        v53[6] = v55[6];
        v53[7] = v55[7];
        v53[8] = v55[8];
        v54 = v56;
        v53[2] = v55[2];
        v53[3] = v55[3];
        v53[4] = v55[4];
        v53[5] = v55[5];
        v53[0] = v55[0];
        v53[1] = v55[1];
        sub_1B19ED720((uint64_t)v53);
        goto LABEL_16;
      }
      sub_1B19F8CD0(v42);
      sub_1B1D3590C(v34);
      v39 = v38;
      v32 = v51;
      sub_1B1BBC9D8(v51, (uint64_t (*)(unint64_t))sub_1B19F8D00);
      sub_1B19F8D00(v34);
      if ((v39 & 1) == 0)
        goto LABEL_14;
LABEL_16:
      swift_release();
      v29 = v52;
LABEL_17:
      ++v30;
      v31 += 16;
    }
    while (v58 != v30);
  }
  swift_bridgeObjectRelease();
  v40 = v29;
  return sub_1B1C785F0(v40);
}

uint64_t sub_1B1C57794(char a1, unint64_t a2, char a3, _QWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  uint64_t v12;
  unint64_t v14;
  int v16;
  uint64_t v17;
  void (*v18)(uint64_t *__return_ptr, uint64_t);
  uint64_t v19;
  uint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  int v35;
  unint64_t v36;
  char v37;
  char v38;
  char v39;
  char v40;
  uint64_t v41;
  uint64_t v43;
  unint64_t v44;
  unsigned int v46;
  char v47;
  uint64_t v48;
  unsigned int v49;
  int v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v12 = v11;
  v14 = a2;
  v16 = (a2 >> 59) & 2 | (a2 >> 2) & 1;
  v53 = v16;
  if (a2 == 0x1000000000000000 && v16 == 2)
  {
    v17 = 0;
  }
  else
  {
    v18 = *(void (**)(uint64_t *__return_ptr, uint64_t))(*a4 + 152);
    v19 = swift_retain();
    v18(&v56, v19);
    v17 = v56;
    swift_release();
  }
  v20 = a4[2];
  v21 = *(_QWORD *)(v20 + 16);
  v22 = MEMORY[0x1E0DEE9D8];
  v54 = v14;
  v55 = v17;
  if (v21)
  {
    v47 = a1;
    v48 = v12;
    v57 = MEMORY[0x1E0DEE9D8];
    swift_bridgeObjectRetain();
    sub_1B202A2C8(0, v21, 0);
    v23 = 0;
    v22 = v57;
    v24 = *(_QWORD *)(v57 + 16);
    v25 = 16 * v24;
    do
    {
      v27 = *(_QWORD *)(v20 + v23 + 32);
      v26 = *(_QWORD *)(v20 + v23 + 40);
      v57 = v22;
      v28 = *(_QWORD *)(v22 + 24);
      swift_retain();
      if (v24 >= v28 >> 1)
      {
        sub_1B202A2C8(v28 > 1, v24 + 1, 1);
        v22 = v57;
      }
      *(_QWORD *)(v22 + 16) = v24 + 1;
      v29 = v22 + v25 + v23;
      *(_QWORD *)(v29 + 32) = v27;
      *(_QWORD *)(v29 + 40) = v26;
      v23 += 16;
      ++v24;
      --v21;
    }
    while (v21);
    swift_bridgeObjectRelease();
    v12 = v48;
    v14 = v54;
    v17 = v55;
    a1 = v47;
  }
  v30 = *(_QWORD *)(v22 + 16);
  if (v30)
  {
    v31 = 0;
    v49 = a1 & 1;
    v43 = v17 + 32;
    v44 = v14 & 0xEFFFFFFFFFFFFFFBLL;
    v32 = 32;
    v46 = a3 & 1;
    do
    {
      v33 = *(_QWORD *)(v22 + v32);
      if (!v33)
        goto LABEL_15;
      swift_retain();
      if (v17 && v31 < *(_QWORD *)(v17 + 16))
      {
        v34 = *(_QWORD *)(v43 + 8 * v31);
        sub_1B19F8CD0(v34);
        v35 = v53;
        if (!v53)
          goto LABEL_20;
      }
      else
      {
        v34 = 0x8000000000000000;
        v35 = v53;
        if (!v53)
        {
LABEL_20:
          v36 = v54;
          sub_1B19F8CD0(v54);
          sub_1B1D3590C(v34);
          v38 = v37;
          sub_1B1BBC9D8(v54, (uint64_t (*)(unint64_t))sub_1B19F8D00);
          sub_1B19F8D00(v34);
          if ((v38 & 1) != 0)
            goto LABEL_27;
          goto LABEL_13;
        }
      }
      if (v35 != 1)
      {
        sub_1B19F8D00(v34);
        v36 = v54;
LABEL_27:
        sub_1B1C544CC(v33, v49, v36, v46, a6, a7, a8, a9, a10, a11);
        if (v12)
        {
          swift_bridgeObjectRelease();
          swift_release();
          v41 = v55;
          return sub_1B1C785F0(v41);
        }
        swift_release();
        swift_bridgeObjectRelease();
        goto LABEL_14;
      }
      sub_1B19F8CD0(v44);
      sub_1B1D3590C(v34);
      v40 = v39;
      v36 = v54;
      sub_1B1BBC9D8(v54, (uint64_t (*)(unint64_t))sub_1B19F8D00);
      sub_1B19F8D00(v34);
      if ((v40 & 1) == 0)
        goto LABEL_27;
LABEL_13:
      swift_release();
LABEL_14:
      v17 = v55;
LABEL_15:
      ++v31;
      v32 += 16;
    }
    while (v30 != v31);
  }
  swift_bridgeObjectRelease();
  v41 = v17;
  return sub_1B1C785F0(v41);
}

uint64_t sub_1B1C57B0C(uint64_t a1, unint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  uint64_t v12;
  char v16;
  void (*v18)(uint64_t *__return_ptr, uint64_t);
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  int v32;
  char v33;
  char v34;
  char v35;
  char v36;
  uint64_t v37;
  unsigned int v39;
  unsigned int v40;
  int v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD v47[6];
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  v12 = v11;
  v16 = a1;
  v44 = (a2 >> 59) & 2 | (a2 >> 2) & 1;
  if (v44 == 2 && a2 == 0x1000000000000000)
  {
    v45 = 0;
  }
  else
  {
    v18 = *(void (**)(uint64_t *__return_ptr, uint64_t))(**(_QWORD **)(a4
                                                                              + OBJC_IVAR____TtC3VFX13AuthoringNode_raw)
                                                                + 152);
    v19 = swift_retain();
    v18(&v46, v19);
    v45 = v46;
    a1 = swift_release();
  }
  (*(void (**)(_QWORD *__return_ptr, uint64_t))(**(_QWORD **)(a4 + OBJC_IVAR____TtC3VFX13AuthoringNode_raw)
                                                        + 152))(v47, a1);
  v20 = v47[0];
  v53 = v47[0];
  v52 = v47[1];
  sub_1B1B28C6C((uint64_t)&v52);
  v51 = v47[2];
  sub_1B1B28C6C((uint64_t)&v51);
  v50 = v47[3];
  sub_1B1B28C6C((uint64_t)&v50);
  v49 = v47[4];
  sub_1B1B28C6C((uint64_t)&v49);
  v48 = v47[5];
  sub_1B1B28C6C((uint64_t)&v48);
  v21 = *(_QWORD *)(v20 + 16);
  sub_1B1B28C6C((uint64_t)&v53);
  if (*(_QWORD *)(*(_QWORD *)(a4 + OBJC_IVAR____TtC3VFX13AuthoringNode_inputs) + 16) <= v21)
    v22 = v21;
  else
    v22 = *(_QWORD *)(*(_QWORD *)(a4 + OBJC_IVAR____TtC3VFX13AuthoringNode_inputs) + 16);
  swift_retain();
  v23 = sub_1B2134084(0, v22, a4);
  v24 = v12;
  swift_release();
  v25 = *(_QWORD *)(v23 + 16);
  if (v25)
  {
    v26 = a3;
    v27 = 0;
    v40 = v16 & 1;
    v28 = v45;
    v29 = 32;
    v39 = v26 & 1;
    while (1)
    {
      v30 = *(_QWORD *)(v23 + v29);
      if (!v30)
        goto LABEL_13;
      swift_retain();
      if (v28 && v27 < *(_QWORD *)(v28 + 16))
      {
        v31 = *(_QWORD *)(v45 + 32 + 8 * v27);
        sub_1B19F8CD0(v31);
        v32 = v44;
        if (!v44)
          goto LABEL_18;
      }
      else
      {
        v31 = 0x8000000000000000;
        v32 = v44;
        if (!v44)
        {
LABEL_18:
          sub_1B19F8CD0(a2);
          sub_1B1D3590C(v31);
          v34 = v33;
          sub_1B1BBC9D8(a2, (uint64_t (*)(unint64_t))sub_1B19F8D00);
          sub_1B19F8D00(v31);
          if ((v34 & 1) != 0)
            goto LABEL_25;
          goto LABEL_12;
        }
      }
      if (v32 != 1)
      {
        sub_1B19F8D00(v31);
LABEL_25:
        sub_1B1C54A14(v30, v40, a2, v39, a6, a7, a8, a9, a10, a11);
        if (v24)
        {
          swift_bridgeObjectRelease();
          swift_release();
          v37 = v45;
          return sub_1B1C785F0(v37);
        }
        swift_release();
        goto LABEL_12;
      }
      sub_1B19F8CD0(a2 & 0xEFFFFFFFFFFFFFFBLL);
      sub_1B1D3590C(v31);
      v36 = v35;
      sub_1B1BBC9D8(a2, (uint64_t (*)(unint64_t))sub_1B19F8D00);
      sub_1B19F8D00(v31);
      if ((v36 & 1) == 0)
        goto LABEL_25;
LABEL_12:
      swift_release();
      v28 = v45;
LABEL_13:
      ++v27;
      v29 += 16;
      if (v25 == v27)
        goto LABEL_28;
    }
  }
  v28 = v45;
LABEL_28:
  swift_bridgeObjectRelease();
  v37 = v28;
  return sub_1B1C785F0(v37);
}

uint64_t sub_1B1C57E80(char a1, unint64_t a2, char a3, _QWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  uint64_t v12;
  unint64_t v15;
  int v17;
  void (*v18)(uint64_t *__return_ptr, uint64_t);
  uint64_t v19;
  uint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  int v37;
  char v38;
  char v39;
  char v40;
  char v41;
  uint64_t v42;
  unint64_t v44;
  unsigned int v46;
  char v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t v52;
  int v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v12 = v11;
  v15 = a2;
  v17 = (a2 >> 59) & 2 | (a2 >> 2) & 1;
  v53 = v17;
  if (a2 == 0x1000000000000000 && v17 == 2)
  {
    v55 = 0;
  }
  else
  {
    v18 = *(void (**)(uint64_t *__return_ptr, uint64_t))(*a4 + 152);
    v19 = swift_retain();
    v18(&v56, v19);
    v55 = v56;
    swift_release();
  }
  v52 = a8;
  v20 = a4[2];
  v21 = *(_QWORD *)(v20 + 16);
  v22 = MEMORY[0x1E0DEE9D8];
  v54 = v15;
  if (v21)
  {
    v47 = a1;
    v48 = v12;
    v57 = MEMORY[0x1E0DEE9D8];
    swift_bridgeObjectRetain();
    sub_1B202A2C8(0, v21, 0);
    v23 = 0;
    v22 = v57;
    v24 = *(_QWORD *)(v57 + 16);
    v25 = 16 * v24;
    do
    {
      v27 = *(_QWORD *)(v20 + v23 + 32);
      v26 = *(_QWORD *)(v20 + v23 + 40);
      v57 = v22;
      v28 = *(_QWORD *)(v22 + 24);
      swift_retain();
      if (v24 >= v28 >> 1)
      {
        sub_1B202A2C8(v28 > 1, v24 + 1, 1);
        v22 = v57;
      }
      *(_QWORD *)(v22 + 16) = v24 + 1;
      v29 = v22 + v25 + v23;
      *(_QWORD *)(v29 + 32) = v27;
      *(_QWORD *)(v29 + 40) = v26;
      v23 += 16;
      ++v24;
      --v21;
    }
    while (v21);
    swift_bridgeObjectRelease();
    v12 = v48;
    v15 = v54;
    a1 = v47;
  }
  v30 = *(_QWORD *)(v22 + 16);
  v31 = v55;
  if (v30)
  {
    v32 = 0;
    v49 = a1 & 1;
    v44 = v15 & 0xEFFFFFFFFFFFFFFBLL;
    v33 = 32;
    v46 = a3 & 1;
    do
    {
      v35 = *(_QWORD *)(v22 + v33);
      if (!v35)
        goto LABEL_16;
      swift_retain();
      if (v31 && v32 < *(_QWORD *)(v31 + 16))
      {
        v36 = *(_QWORD *)(v55 + 32 + 8 * v32);
        sub_1B19F8CD0(v36);
        v37 = v53;
        if (!v53)
          goto LABEL_21;
      }
      else
      {
        v36 = 0x8000000000000000;
        v37 = v53;
        if (!v53)
        {
LABEL_21:
          v34 = v54;
          sub_1B19F8CD0(v54);
          sub_1B1D3590C(v36);
          v39 = v38;
          sub_1B1BBC9D8(v54, (uint64_t (*)(unint64_t))sub_1B19F8D00);
          sub_1B19F8D00(v36);
          if ((v39 & 1) != 0)
            goto LABEL_14;
          goto LABEL_15;
        }
      }
      if (v37 != 1)
      {
        sub_1B19F8D00(v36);
        v34 = v54;
LABEL_14:
        sub_1B1C54F20(v35, v49, v34, v46, a6, a7, v52, a9, a10, a11);
        if (v12)
        {
          swift_bridgeObjectRelease();
          swift_release();
          v42 = v55;
          return sub_1B1C785F0(v42);
        }
        goto LABEL_15;
      }
      sub_1B19F8CD0(v44);
      sub_1B1D3590C(v36);
      v41 = v40;
      v34 = v54;
      sub_1B1BBC9D8(v54, (uint64_t (*)(unint64_t))sub_1B19F8D00);
      sub_1B19F8D00(v36);
      if ((v41 & 1) == 0)
        goto LABEL_14;
LABEL_15:
      v31 = v55;
      swift_release();
LABEL_16:
      ++v32;
      v33 += 16;
    }
    while (v30 != v32);
  }
  swift_bridgeObjectRelease();
  v42 = v31;
  return sub_1B1C785F0(v42);
}

uint64_t sub_1B1C581EC(uint64_t a1, unint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  uint64_t v12;
  char v16;
  void (*v18)(uint64_t *__return_ptr, uint64_t);
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  int v32;
  char v33;
  char v34;
  char v35;
  char v36;
  uint64_t v37;
  unsigned int v39;
  unsigned int v40;
  int v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD v47[6];
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  v12 = v11;
  v16 = a1;
  v44 = (a2 >> 59) & 2 | (a2 >> 2) & 1;
  if (v44 == 2 && a2 == 0x1000000000000000)
  {
    v45 = 0;
  }
  else
  {
    v18 = *(void (**)(uint64_t *__return_ptr, uint64_t))(**(_QWORD **)(a4
                                                                              + OBJC_IVAR____TtC3VFX13AuthoringNode_raw)
                                                                + 152);
    v19 = swift_retain();
    v18(&v46, v19);
    v45 = v46;
    a1 = swift_release();
  }
  (*(void (**)(_QWORD *__return_ptr, uint64_t))(**(_QWORD **)(a4 + OBJC_IVAR____TtC3VFX13AuthoringNode_raw)
                                                        + 152))(v47, a1);
  v20 = v47[0];
  v53 = v47[0];
  v52 = v47[1];
  sub_1B1B28C6C((uint64_t)&v52);
  v51 = v47[2];
  sub_1B1B28C6C((uint64_t)&v51);
  v50 = v47[3];
  sub_1B1B28C6C((uint64_t)&v50);
  v49 = v47[4];
  sub_1B1B28C6C((uint64_t)&v49);
  v48 = v47[5];
  sub_1B1B28C6C((uint64_t)&v48);
  v21 = *(_QWORD *)(v20 + 16);
  sub_1B1B28C6C((uint64_t)&v53);
  if (*(_QWORD *)(*(_QWORD *)(a4 + OBJC_IVAR____TtC3VFX13AuthoringNode_inputs) + 16) <= v21)
    v22 = v21;
  else
    v22 = *(_QWORD *)(*(_QWORD *)(a4 + OBJC_IVAR____TtC3VFX13AuthoringNode_inputs) + 16);
  swift_retain();
  v23 = sub_1B2134084(0, v22, a4);
  v24 = v12;
  swift_release();
  v25 = *(_QWORD *)(v23 + 16);
  if (v25)
  {
    v26 = a3;
    v27 = 0;
    v40 = v16 & 1;
    v28 = v45;
    v29 = 32;
    v39 = v26 & 1;
    while (1)
    {
      v30 = *(_QWORD *)(v23 + v29);
      if (!v30)
        goto LABEL_15;
      swift_retain();
      if (v28 && v27 < *(_QWORD *)(v28 + 16))
      {
        v31 = *(_QWORD *)(v45 + 32 + 8 * v27);
        sub_1B19F8CD0(v31);
        v32 = v44;
        if (!v44)
          goto LABEL_20;
      }
      else
      {
        v31 = 0x8000000000000000;
        v32 = v44;
        if (!v44)
        {
LABEL_20:
          sub_1B19F8CD0(a2);
          sub_1B1D3590C(v31);
          v34 = v33;
          sub_1B1BBC9D8(a2, (uint64_t (*)(unint64_t))sub_1B19F8D00);
          sub_1B19F8D00(v31);
          if ((v34 & 1) != 0)
            goto LABEL_13;
          goto LABEL_14;
        }
      }
      if (v32 != 1)
      {
        sub_1B19F8D00(v31);
LABEL_13:
        sub_1B1C553E0(v30, v40, a2, v39, a6, a7, a8, a9, a10, a11);
        if (v24)
        {
          swift_bridgeObjectRelease();
          swift_release();
          v37 = v45;
          return sub_1B1C785F0(v37);
        }
        goto LABEL_14;
      }
      sub_1B19F8CD0(a2 & 0xEFFFFFFFFFFFFFFBLL);
      sub_1B1D3590C(v31);
      v36 = v35;
      sub_1B1BBC9D8(a2, (uint64_t (*)(unint64_t))sub_1B19F8D00);
      sub_1B19F8D00(v31);
      if ((v36 & 1) == 0)
        goto LABEL_13;
LABEL_14:
      swift_release();
      v28 = v45;
LABEL_15:
      ++v27;
      v29 += 16;
      if (v25 == v27)
        goto LABEL_27;
    }
  }
  v28 = v45;
LABEL_27:
  swift_bridgeObjectRelease();
  v37 = v28;
  return sub_1B1C785F0(v37);
}

unint64_t sub_1B1C5854C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, int a7, unint64_t a8, char a9)
{
  uint64_t v9;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  __objc2_class **v22;
  unint64_t result;
  void (*v24)(char *, char *, uint64_t);
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  unsigned int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v34 = a7;
  v39 = a6;
  v35 = a3;
  v36 = a4;
  v13 = sub_1B222826C();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13, v15);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18, v19);
  v21 = (char *)&v32 - v20;
  v32 = a2;
  v22 = *(__objc2_class ***)(a2 + 16);
  result = sub_1B1BBB394(v22);
  if (result)
  {
    v33 = a5 & 1;
    v24 = *(void (**)(char *, char *, uint64_t))(v14 + 16);
    v24(v21, (char *)v22 + OBJC_IVAR____TtC3VFX13AuthoringNode_authoringID, v13);
    v24(v17, v21, v13);
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      a8 = sub_1B1C64A9C(0, *(_QWORD *)(a8 + 16) + 1, 1, a8, &qword_1EEF5CCA0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998]);
    v26 = *(_QWORD *)(a8 + 16);
    v25 = *(_QWORD *)(a8 + 24);
    if (v26 >= v25 >> 1)
      a8 = sub_1B1C64A9C(v25 > 1, v26 + 1, 1, a8, &qword_1EEF5CCA0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998]);
    *(_QWORD *)(a8 + 16) = v26 + 1;
    (*(void (**)(unint64_t, char *, uint64_t))(v14 + 32))(a8+ ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80))+ *(_QWORD *)(v14 + 72) * v26, v17, v13);
    (*(void (**)(char *, uint64_t))(v14 + 8))(v21, v13);
    v27 = MEMORY[0x1E0DEE9D8];
    v37 = sub_1B1C6D068(MEMORY[0x1E0DEE9D8]);
    v38 = v28;
    sub_1B1C5C9C4(v35, v36, v33, v39, v34 & 1, a8, &v37);
    if (v9)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      return swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    v29 = v38;
    if ((a9 & 1) != 0)
    {
      if (*(_QWORD *)(v38 + 16))
      {
        v37 = v27;
        sub_1B2229550();
        result = sub_1B1DC3AC8(*(_QWORD *)(v29 + 32));
        __break(1u);
        return result;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v30 = *(_QWORD *)(v32 + 16);
      type metadata accessor for AuthoringGraph();
      v31 = (_QWORD *)swift_allocObject();
      v31[2] = 0;
      v31[3] = v27;
      v31[4] = 0;
      v31[5] = 0;
      swift_retain();
      v31[6] = sub_1B1B7DC90(v27);
      v31[3] = v27;
      *(_QWORD *)(v30 + OBJC_IVAR____TtC3VFX21AuthoringSubGraphNode_graph) = v31;
      swift_release();
      swift_release();
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    return swift_release();
  }
  return result;
}

uint64_t sub_1B1C58840(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, int a7, unint64_t a8, char a9)
{
  uint64_t v9;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  __objc2_class **v22;
  uint64_t result;
  uint64_t v24;
  void (*v25)(char *, char *, uint64_t);
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v43 = a7;
  v44 = a6;
  v41 = a3;
  v42 = a4;
  v13 = sub_1B222826C();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13, v15);
  v17 = (char *)&v40 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18, v19);
  v21 = (char *)&v40 - v20;
  v40 = a2;
  v22 = *(__objc2_class ***)(a2 + 16);
  result = sub_1B1BBB394(v22);
  v45 = result;
  if (result)
  {
    v24 = a5 & 1;
    v25 = *(void (**)(char *, char *, uint64_t))(v14 + 16);
    v25(v21, (char *)v22 + OBJC_IVAR____TtC3VFX13AuthoringNode_authoringID, v13);
    v25(v17, v21, v13);
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      a8 = sub_1B1C64A9C(0, *(_QWORD *)(a8 + 16) + 1, 1, a8, &qword_1EEF5CCA0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998]);
    v27 = *(_QWORD *)(a8 + 16);
    v26 = *(_QWORD *)(a8 + 24);
    if (v27 >= v26 >> 1)
      a8 = sub_1B1C64A9C(v26 > 1, v27 + 1, 1, a8, &qword_1EEF5CCA0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998]);
    *(_QWORD *)(a8 + 16) = v27 + 1;
    (*(void (**)(unint64_t, char *, uint64_t))(v14 + 32))(a8+ ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80))+ *(_QWORD *)(v14 + 72) * v27, v17, v13);
    (*(void (**)(char *, uint64_t))(v14 + 8))(v21, v13);
    v28 = sub_1B1C5A714(v41, v42, v24, v44, v43 & 1, a8);
    if (!v9)
    {
      v30 = v28;
      v31 = v29;
      swift_bridgeObjectRelease();
      if ((a9 & 1) != 0)
      {
        v32 = *(_QWORD *)(v31 + 16);
        v33 = MEMORY[0x1E0DEE9D8];
        if (v32)
        {
          v46 = MEMORY[0x1E0DEE9D8];
          sub_1B2229550();
          v34 = (uint64_t *)(v31 + 32);
          do
          {
            if (*(_QWORD *)(v30 + 16))
            {
              sub_1B1DC3AC8(*v34);
              if ((v35 & 1) != 0)
                swift_retain();
            }
            sub_1B2229520();
            sub_1B2229568();
            sub_1B2229574();
            sub_1B2229538();
            ++v34;
            --v32;
          }
          while (v32);
          v36 = v46;
        }
        else
        {
          v36 = MEMORY[0x1E0DEE9D8];
        }
        v37 = v40;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v38 = *(_QWORD *)(v37 + 16);
        type metadata accessor for AuthoringGraph();
        v39 = (_QWORD *)swift_allocObject();
        v39[2] = 0;
        v39[3] = v33;
        v39[4] = 0;
        v39[5] = 0;
        swift_retain();
        v39[6] = sub_1B1B7DC90(v33);
        v39[3] = v36;
        *(_QWORD *)(v38 + OBJC_IVAR____TtC3VFX21AuthoringSubGraphNode_graph) = v39;
        swift_release();
        swift_release();
        return swift_release();
      }
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    return swift_release();
  }
  return result;
}

unint64_t sub_1B1C58B74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, int a7, unint64_t a8, char a9, uint64_t (*a10)(_QWORD), void (*a11)(uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, unint64_t, uint64_t *))
{
  uint64_t v11;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  __objc2_class **v24;
  unint64_t result;
  void (*v26)(char *, char *, uint64_t);
  char isUniquelyReferenced_nonNull_native;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, unint64_t, uint64_t *);
  unsigned int v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v41 = a7;
  v46 = a6;
  v42 = a3;
  v43 = a4;
  v15 = sub_1B222826C();
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15, v17);
  v19 = (char *)&v36 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v20, v21);
  v23 = (char *)&v36 - v22;
  v37 = a2;
  v24 = *(__objc2_class ***)(a2 + 16);
  result = sub_1B1BBB240(v24);
  if (result)
  {
    v40 = v11;
    v26 = *(void (**)(char *, char *, uint64_t))(v16 + 16);
    v26(v23, (char *)v24 + OBJC_IVAR____TtC3VFX4Node_authoringID, v15);
    v26(v19, v23, v15);
    swift_bridgeObjectRetain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v39 = a5 & 1;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      a8 = sub_1B1C64A9C(0, *(_QWORD *)(a8 + 16) + 1, 1, a8, &qword_1EEF5CCA0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998]);
    v38 = a11;
    v29 = *(_QWORD *)(a8 + 16);
    v28 = *(_QWORD *)(a8 + 24);
    if (v29 >= v28 >> 1)
      a8 = sub_1B1C64A9C(v28 > 1, v29 + 1, 1, a8, &qword_1EEF5CCA0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998]);
    *(_QWORD *)(a8 + 16) = v29 + 1;
    (*(void (**)(unint64_t, char *, uint64_t))(v16 + 32))(a8+ ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80))+ *(_QWORD *)(v16 + 72) * v29, v19, v15);
    (*(void (**)(char *, uint64_t))(v16 + 8))(v23, v15);
    v30 = MEMORY[0x1E0DEE9D8];
    v44 = a10(MEMORY[0x1E0DEE9D8]);
    v45 = v31;
    v32 = v40;
    v38(v42, v43, v39, v46, v41 & 1, a8, &v44);
    if (v32)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      return swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    v33 = v45;
    if ((a9 & 1) != 0)
    {
      if (*(_QWORD *)(v45 + 16))
      {
        v44 = v30;
        sub_1B2229550();
        result = sub_1B1DC3AC8(*(_QWORD *)(v33 + 32));
        __break(1u);
        return result;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v34 = *(_QWORD *)(v37 + 16);
      type metadata accessor for Graph();
      v35 = swift_allocObject();
      *(_QWORD *)(v35 + 16) = v30;
      *(_QWORD *)(v34 + OBJC_IVAR____TtC3VFX12SubGraphNode_graph) = v35;
      swift_release();
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    return swift_release();
  }
  return result;
}

uint64_t sub_1B1C58E5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, int a7, unint64_t a8, char a9)
{
  uint64_t v9;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  __objc2_class **v22;
  uint64_t result;
  void (*v24)(char *, char *, uint64_t);
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  unsigned int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v36 = a7;
  v41 = a6;
  v37 = a3;
  v38 = a4;
  v13 = sub_1B222826C();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13, v15);
  v17 = (char *)&v34 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18, v19);
  v21 = (char *)&v34 - v20;
  v34 = a2;
  v22 = *(__objc2_class ***)(a2 + 16);
  result = sub_1B1BBB240(v22);
  if (result)
  {
    v35 = a5 & 1;
    v24 = *(void (**)(char *, char *, uint64_t))(v14 + 16);
    v24(v21, (char *)v22 + OBJC_IVAR____TtC3VFX4Node_authoringID, v13);
    v24(v17, v21, v13);
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      a8 = sub_1B1C64A9C(0, *(_QWORD *)(a8 + 16) + 1, 1, a8, &qword_1EEF5CCA0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998]);
    v26 = *(_QWORD *)(a8 + 16);
    v25 = *(_QWORD *)(a8 + 24);
    if (v26 >= v25 >> 1)
      a8 = sub_1B1C64A9C(v25 > 1, v26 + 1, 1, a8, &qword_1EEF5CCA0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998]);
    *(_QWORD *)(a8 + 16) = v26 + 1;
    (*(void (**)(unint64_t, char *, uint64_t))(v14 + 32))(a8+ ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80))+ *(_QWORD *)(v14 + 72) * v26, v17, v13);
    (*(void (**)(char *, uint64_t))(v14 + 8))(v21, v13);
    v27 = MEMORY[0x1E0DEE9D8];
    v39 = sub_1B1C6EB98(MEMORY[0x1E0DEE9D8]);
    v40 = v28;
    sub_1B1C5D1D8(v37, v38, v35, v41, v36 & 1, a8, &v39);
    if (v9)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      return swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    v29 = v39;
    v30 = v40;
    if ((a9 & 1) != 0)
    {
      if (*(_QWORD *)(v40 + 16))
      {
        v39 = v27;
        sub_1B2229550();
        v33 = (uint64_t *)(*(_QWORD *)(v29 + 56) + 88 * sub_1B1DC3AC8(*(_QWORD *)(v30 + 32)));
        result = sub_1B1B9D8BC(*v33);
        __break(1u);
        return result;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v31 = *(_QWORD *)(v34 + 16);
      type metadata accessor for Graph();
      v32 = swift_allocObject();
      *(_QWORD *)(v32 + 16) = v27;
      *(_QWORD *)(v31 + OBJC_IVAR____TtC3VFX12SubGraphNode_graph) = v32;
      swift_release();
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    return swift_release();
  }
  return result;
}

uint64_t sub_1B1C59160(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, int a7, uint64_t a8, char a9)
{
  uint64_t v9;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  __objc2_class **v22;
  uint64_t result;
  void (*v24)(char *, char *, uint64_t);
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v42 = a7;
  v44 = a4;
  v45 = a6;
  v43 = a3;
  v13 = sub_1B222826C();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13, v15);
  v17 = (char *)&v40 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18, v19);
  v21 = (char *)&v40 - v20;
  v40 = a2;
  v22 = *(__objc2_class ***)(a2 + 16);
  result = sub_1B1BBB394(v22);
  if (result)
  {
    v41 = a5 & 1;
    v24 = *(void (**)(char *, char *, uint64_t))(v14 + 16);
    v24(v21, (char *)v22 + OBJC_IVAR____TtC3VFX13AuthoringNode_authoringID, v13);
    v24(v17, v21, v13);
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      a8 = sub_1B1C64A9C(0, *(_QWORD *)(a8 + 16) + 1, 1, a8, &qword_1EEF5CCA0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998]);
    v26 = *(_QWORD *)(a8 + 16);
    v25 = *(_QWORD *)(a8 + 24);
    if (v26 >= v25 >> 1)
      a8 = sub_1B1C64A9C(v25 > 1, v26 + 1, 1, a8, &qword_1EEF5CCA0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998]);
    *(_QWORD *)(a8 + 16) = v26 + 1;
    (*(void (**)(unint64_t, char *, uint64_t))(v14 + 32))(a8+ ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80))+ *(_QWORD *)(v14 + 72) * v26, v17, v13);
    (*(void (**)(char *, uint64_t))(v14 + 8))(v21, v13);
    v27 = MEMORY[0x1E0DEE9D8];
    v47 = sub_1B1C6E444(MEMORY[0x1E0DEE9D8]);
    v48 = v28;
    sub_1B1C5DFE0(v43, v44, v41, v45, v42 & 1, a8, (uint64_t)&v47, (void (*)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD *, uint64_t, unint64_t *))sub_1B1C53420);
    if (v9)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      return swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      v30 = v47;
      v29 = v48;
      if ((a9 & 1) != 0)
      {
        v31 = *(_QWORD *)(v48 + 16);
        if (v31)
        {
          v47 = v27;
          sub_1B2229550();
          v32 = 0;
          do
          {
            if (*(_QWORD *)(v30 + 16) && (v34 = sub_1B1DC3AC8(*(_QWORD *)(v29 + 8 * v32 + 32)), (v35 & 1) != 0))
            {
              v33 = *(_QWORD *)(*(_QWORD *)(v30 + 56) + 8 * v34);
              swift_retain();
            }
            else
            {
              v33 = 1;
            }
            ++v32;
            v46 = v33;
            sub_1B1C6BD30(0);
            type metadata accessor for AuthoringNode();
            swift_retain();
            swift_dynamicCast();
            sub_1B1AE81C8(v33);
            sub_1B2229520();
            sub_1B2229568();
            sub_1B2229574();
            sub_1B2229538();
          }
          while (v31 != v32);
          v36 = v47;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v37 = v40;
          v27 = MEMORY[0x1E0DEE9D8];
        }
        else
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v36 = MEMORY[0x1E0DEE9D8];
          v37 = v40;
        }
        v38 = *(_QWORD *)(v37 + 16);
        type metadata accessor for AuthoringGraph();
        v39 = (_QWORD *)swift_allocObject();
        v39[2] = 0;
        v39[3] = v27;
        v39[4] = 0;
        v39[5] = 0;
        swift_retain();
        v39[6] = sub_1B1B7DC90(v27);
        v39[3] = v36;
        *(_QWORD *)(v38 + OBJC_IVAR____TtC3VFX21AuthoringSubGraphNode_graph) = v39;
        swift_release();
        swift_release();
      }
      else
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      return swift_release();
    }
  }
  return result;
}

uint64_t sub_1B1C59540(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, int a7, unint64_t a8, char a9)
{
  uint64_t v9;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  __objc2_class **v22;
  uint64_t result;
  uint64_t v24;
  void (*v25)(char *, char *, uint64_t);
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v42 = a7;
  v43 = a6;
  v40 = a3;
  v41 = a4;
  v13 = sub_1B222826C();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13, v15);
  v17 = (char *)&v39 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18, v19);
  v21 = (char *)&v39 - v20;
  v39 = a2;
  v22 = *(__objc2_class ***)(a2 + 16);
  result = sub_1B1BBB240(v22);
  v44 = result;
  if (result)
  {
    v24 = a5 & 1;
    v25 = *(void (**)(char *, char *, uint64_t))(v14 + 16);
    v25(v21, (char *)v22 + OBJC_IVAR____TtC3VFX4Node_authoringID, v13);
    v25(v17, v21, v13);
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      a8 = sub_1B1C64A9C(0, *(_QWORD *)(a8 + 16) + 1, 1, a8, &qword_1EEF5CCA0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998]);
    v27 = *(_QWORD *)(a8 + 16);
    v26 = *(_QWORD *)(a8 + 24);
    if (v27 >= v26 >> 1)
      a8 = sub_1B1C64A9C(v26 > 1, v27 + 1, 1, a8, &qword_1EEF5CCA0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998]);
    *(_QWORD *)(a8 + 16) = v27 + 1;
    (*(void (**)(unint64_t, char *, uint64_t))(v14 + 32))(a8+ ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80))+ *(_QWORD *)(v14 + 72) * v27, v17, v13);
    (*(void (**)(char *, uint64_t))(v14 + 8))(v21, v13);
    v28 = sub_1B1C5A9E8(v40, v41, v24, v43, v42 & 1, a8);
    if (v9)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v30 = v28;
      v31 = v29;
      swift_bridgeObjectRelease();
      if ((a9 & 1) != 0)
      {
        v32 = *(_QWORD *)(v31 + 16);
        v33 = MEMORY[0x1E0DEE9D8];
        if (v32)
        {
          v45 = MEMORY[0x1E0DEE9D8];
          sub_1B2229550();
          v34 = (uint64_t *)(v31 + 32);
          do
          {
            if (*(_QWORD *)(v30 + 16))
            {
              sub_1B1DC3AC8(*v34);
              if ((v35 & 1) != 0)
                swift_retain();
            }
            sub_1B2229520();
            sub_1B2229568();
            sub_1B2229574();
            sub_1B2229538();
            ++v34;
            --v32;
          }
          while (v32);
          v33 = v45;
        }
        v36 = v39;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v37 = *(_QWORD *)(v36 + 16);
        type metadata accessor for Graph();
        v38 = swift_allocObject();
        *(_QWORD *)(v38 + 16) = v33;
        *(_QWORD *)(v37 + OBJC_IVAR____TtC3VFX12SubGraphNode_graph) = v38;
        swift_release();
      }
      else
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
    }
    return swift_release();
  }
  return result;
}

uint64_t sub_1B1C59848(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, int a7, unint64_t a8, char a9)
{
  uint64_t v9;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  __objc2_class **v22;
  uint64_t result;
  void (*v24)(char *, char *, uint64_t);
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _OWORD v47[9];
  char v48;
  uint64_t v49;

  v43 = a7;
  v45 = a4;
  v46 = a6;
  v44 = a3;
  v13 = sub_1B222826C();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13, v15);
  v17 = (char *)&v40 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18, v19);
  v21 = (char *)&v40 - v20;
  v41 = a2;
  v22 = *(__objc2_class ***)(a2 + 16);
  result = sub_1B1BBB240(v22);
  if (result)
  {
    v42 = a5 & 1;
    v24 = *(void (**)(char *, char *, uint64_t))(v14 + 16);
    v24(v21, (char *)v22 + OBJC_IVAR____TtC3VFX4Node_authoringID, v13);
    v24(v17, v21, v13);
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      a8 = sub_1B1C64A9C(0, *(_QWORD *)(a8 + 16) + 1, 1, a8, &qword_1EEF5CCA0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998]);
    v26 = *(_QWORD *)(a8 + 16);
    v25 = *(_QWORD *)(a8 + 24);
    if (v26 >= v25 >> 1)
      a8 = sub_1B1C64A9C(v25 > 1, v26 + 1, 1, a8, &qword_1EEF5CCA0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998]);
    *(_QWORD *)(a8 + 16) = v26 + 1;
    (*(void (**)(unint64_t, char *, uint64_t))(v14 + 32))(a8+ ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80))+ *(_QWORD *)(v14 + 72) * v26, v17, v13);
    (*(void (**)(char *, uint64_t))(v14 + 8))(v21, v13);
    v27 = MEMORY[0x1E0DEE9D8];
    *(_QWORD *)&v47[0] = sub_1B1C71610(MEMORY[0x1E0DEE9D8]);
    *((_QWORD *)&v47[0] + 1) = v28;
    sub_1B1C5D934(v44, v45, v42, v46, v43 & 1, a8, v47);
    if (v9)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      return swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    v29 = v47[0];
    if ((a9 & 1) != 0)
    {
      if (*(_QWORD *)(*((_QWORD *)&v47[0] + 1) + 16))
      {
        v49 = v27;
        sub_1B2229550();
        v32 = *(_QWORD *)(v29 + 56) + 152 * sub_1B1DC3AC8(*(_QWORD *)(*((_QWORD *)&v29 + 1) + 32));
        v33 = *(_OWORD *)(v32 + 16);
        v47[0] = *(_OWORD *)v32;
        v47[1] = v33;
        v34 = *(_OWORD *)(v32 + 80);
        v36 = *(_OWORD *)(v32 + 32);
        v35 = *(_OWORD *)(v32 + 48);
        v47[4] = *(_OWORD *)(v32 + 64);
        v47[5] = v34;
        v47[2] = v36;
        v47[3] = v35;
        v37 = *(_OWORD *)(v32 + 96);
        v38 = *(_OWORD *)(v32 + 112);
        v39 = *(_OWORD *)(v32 + 128);
        v48 = *(_BYTE *)(v32 + 144);
        v47[7] = v38;
        v47[8] = v39;
        v47[6] = v37;
        result = sub_1B1B7C5AC((uint64_t)v47);
        __break(1u);
        return result;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v30 = *(_QWORD *)(v41 + 16);
      type metadata accessor for Graph();
      v31 = swift_allocObject();
      *(_QWORD *)(v31 + 16) = v27;
      *(_QWORD *)(v30 + OBJC_IVAR____TtC3VFX12SubGraphNode_graph) = v31;
      swift_release();
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    return swift_release();
  }
  return result;
}

uint64_t sub_1B1C59B7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, int a7, unint64_t a8, char a9)
{
  uint64_t v9;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  __objc2_class **v22;
  uint64_t result;
  void (*v24)(char *, char *, uint64_t);
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v34 = a7;
  v39 = a6;
  v35 = a3;
  v36 = a4;
  v13 = sub_1B222826C();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13, v15);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18, v19);
  v21 = (char *)&v32 - v20;
  v32 = a2;
  v22 = *(__objc2_class ***)(a2 + 16);
  result = sub_1B1BBB240(v22);
  if (result)
  {
    v33 = a5 & 1;
    v24 = *(void (**)(char *, char *, uint64_t))(v14 + 16);
    v24(v21, (char *)v22 + OBJC_IVAR____TtC3VFX4Node_authoringID, v13);
    v24(v17, v21, v13);
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      a8 = sub_1B1C64A9C(0, *(_QWORD *)(a8 + 16) + 1, 1, a8, &qword_1EEF5CCA0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998]);
    v26 = *(_QWORD *)(a8 + 16);
    v25 = *(_QWORD *)(a8 + 24);
    if (v26 >= v25 >> 1)
      a8 = sub_1B1C64A9C(v25 > 1, v26 + 1, 1, a8, &qword_1EEF5CCA0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998]);
    *(_QWORD *)(a8 + 16) = v26 + 1;
    (*(void (**)(unint64_t, char *, uint64_t))(v14 + 32))(a8+ ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80))+ *(_QWORD *)(v14 + 72) * v26, v17, v13);
    (*(void (**)(char *, uint64_t))(v14 + 8))(v21, v13);
    v27 = MEMORY[0x1E0DEE9D8];
    v37 = sub_1B1C718F4(MEMORY[0x1E0DEE9D8]);
    v38 = v28;
    sub_1B1C5DBF4(v35, v36, v33, v39, v34 & 1, a8, &v37);
    if (v9)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      return swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    v29 = v38;
    if ((a9 & 1) != 0)
    {
      if (*(_QWORD *)(v38 + 16))
      {
        v37 = v27;
        sub_1B2229550();
        sub_1B1DC3AC8(*(_QWORD *)(v29 + 32));
        result = swift_bridgeObjectRetain();
        __break(1u);
        return result;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v30 = *(_QWORD *)(v32 + 16);
      type metadata accessor for Graph();
      v31 = swift_allocObject();
      *(_QWORD *)(v31 + 16) = v27;
      *(_QWORD *)(v30 + OBJC_IVAR____TtC3VFX12SubGraphNode_graph) = v31;
      swift_release();
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    return swift_release();
  }
  return result;
}

unint64_t sub_1B1C59E58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, int a7, uint64_t a8, char a9)
{
  uint64_t v9;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  __objc2_class **v22;
  unint64_t result;
  void (*v24)(char *, char *, uint64_t);
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v34 = a7;
  v39 = a6;
  v35 = a3;
  v36 = a4;
  v13 = sub_1B222826C();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13, v15);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18, v19);
  v21 = (char *)&v32 - v20;
  v32 = a2;
  v22 = *(__objc2_class ***)(a2 + 16);
  result = sub_1B1BBB394(v22);
  if (result)
  {
    v33 = a5 & 1;
    v24 = *(void (**)(char *, char *, uint64_t))(v14 + 16);
    v24(v21, (char *)v22 + OBJC_IVAR____TtC3VFX13AuthoringNode_authoringID, v13);
    v24(v17, v21, v13);
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      a8 = sub_1B1C64A9C(0, *(_QWORD *)(a8 + 16) + 1, 1, a8, &qword_1EEF5CCA0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998]);
    v26 = *(_QWORD *)(a8 + 16);
    v25 = *(_QWORD *)(a8 + 24);
    if (v26 >= v25 >> 1)
      a8 = sub_1B1C64A9C(v25 > 1, v26 + 1, 1, a8, &qword_1EEF5CCA0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998]);
    *(_QWORD *)(a8 + 16) = v26 + 1;
    (*(void (**)(unint64_t, char *, uint64_t))(v14 + 32))(a8+ ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80))+ *(_QWORD *)(v14 + 72) * v26, v17, v13);
    (*(void (**)(char *, uint64_t))(v14 + 8))(v21, v13);
    v27 = MEMORY[0x1E0DEE9D8];
    v37 = sub_1B1C6E138(MEMORY[0x1E0DEE9D8]);
    v38 = v28;
    sub_1B1C5DFE0(v35, v36, v33, v39, v34 & 1, a8, (uint64_t)&v37, (void (*)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD *, uint64_t, unint64_t *))sub_1B1C54A14);
    if (v9)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      return swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    v29 = v38;
    if ((a9 & 1) != 0)
    {
      if (*(_QWORD *)(v38 + 16))
      {
        v37 = v27;
        sub_1B2229550();
        result = sub_1B1DC3AC8(*(_QWORD *)(v29 + 32));
        __break(1u);
        return result;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v30 = *(_QWORD *)(v32 + 16);
      type metadata accessor for AuthoringGraph();
      v31 = (_QWORD *)swift_allocObject();
      v31[2] = 0;
      v31[3] = v27;
      v31[4] = 0;
      v31[5] = 0;
      swift_retain();
      v31[6] = sub_1B1B7DC90(v27);
      v31[3] = v27;
      *(_QWORD *)(v30 + OBJC_IVAR____TtC3VFX21AuthoringSubGraphNode_graph) = v31;
      swift_release();
      swift_release();
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    return swift_release();
  }
  return result;
}

unint64_t sub_1B1C5A154(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, int a7, unint64_t a8, char a9)
{
  uint64_t v9;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  __objc2_class **v22;
  unint64_t result;
  void (*v24)(char *, char *, uint64_t);
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v34 = a7;
  v39 = a6;
  v35 = a3;
  v36 = a4;
  v13 = sub_1B222826C();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13, v15);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18, v19);
  v21 = (char *)&v32 - v20;
  v32 = a2;
  v22 = *(__objc2_class ***)(a2 + 16);
  result = sub_1B1BBB240(v22);
  if (result)
  {
    v33 = a5 & 1;
    v24 = *(void (**)(char *, char *, uint64_t))(v14 + 16);
    v24(v21, (char *)v22 + OBJC_IVAR____TtC3VFX4Node_authoringID, v13);
    v24(v17, v21, v13);
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      a8 = sub_1B1C64A9C(0, *(_QWORD *)(a8 + 16) + 1, 1, a8, &qword_1EEF5CCA0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998]);
    v26 = *(_QWORD *)(a8 + 16);
    v25 = *(_QWORD *)(a8 + 24);
    if (v26 >= v25 >> 1)
      a8 = sub_1B1C64A9C(v25 > 1, v26 + 1, 1, a8, &qword_1EEF5CCA0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998]);
    *(_QWORD *)(a8 + 16) = v26 + 1;
    (*(void (**)(unint64_t, char *, uint64_t))(v14 + 32))(a8+ ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80))+ *(_QWORD *)(v14 + 72) * v26, v17, v13);
    (*(void (**)(char *, uint64_t))(v14 + 8))(v21, v13);
    v27 = MEMORY[0x1E0DEE9D8];
    v37 = sub_1B1C71FD4(MEMORY[0x1E0DEE9D8]);
    v38 = v28;
    sub_1B1C5E280(v35, v36, v33, v39, v34 & 1, a8, &v37);
    if (v9)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      return swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    v29 = v38;
    if ((a9 & 1) != 0)
    {
      if (*(_QWORD *)(v38 + 16))
      {
        v37 = v27;
        sub_1B2229550();
        result = sub_1B1DC3AC8(*(_QWORD *)(v29 + 32));
        __break(1u);
        return result;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v30 = *(_QWORD *)(v32 + 16);
      type metadata accessor for Graph();
      v31 = swift_allocObject();
      *(_QWORD *)(v31 + 16) = v27;
      *(_QWORD *)(v30 + OBJC_IVAR____TtC3VFX12SubGraphNode_graph) = v31;
      swift_release();
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    return swift_release();
  }
  return result;
}

unint64_t sub_1B1C5A420(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, int a7, unint64_t a8, char a9)
{
  uint64_t v9;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  __objc2_class **v22;
  unint64_t result;
  void (*v24)(char *, char *, uint64_t);
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  unsigned int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v34 = a7;
  v39 = a6;
  v35 = a3;
  v36 = a4;
  v13 = sub_1B222826C();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13, v15);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18, v19);
  v21 = (char *)&v32 - v20;
  v32 = a2;
  v22 = *(__objc2_class ***)(a2 + 16);
  result = sub_1B1BBB394(v22);
  if (result)
  {
    v33 = a5 & 1;
    v24 = *(void (**)(char *, char *, uint64_t))(v14 + 16);
    v24(v21, (char *)v22 + OBJC_IVAR____TtC3VFX13AuthoringNode_authoringID, v13);
    v24(v17, v21, v13);
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      a8 = sub_1B1C64A9C(0, *(_QWORD *)(a8 + 16) + 1, 1, a8, &qword_1EEF5CCA0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998]);
    v26 = *(_QWORD *)(a8 + 16);
    v25 = *(_QWORD *)(a8 + 24);
    if (v26 >= v25 >> 1)
      a8 = sub_1B1C64A9C(v25 > 1, v26 + 1, 1, a8, &qword_1EEF5CCA0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998]);
    *(_QWORD *)(a8 + 16) = v26 + 1;
    (*(void (**)(unint64_t, char *, uint64_t))(v14 + 32))(a8+ ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80))+ *(_QWORD *)(v14 + 72) * v26, v17, v13);
    (*(void (**)(char *, uint64_t))(v14 + 8))(v21, v13);
    v27 = MEMORY[0x1E0DEE9D8];
    v37 = sub_1B1C71FD4(MEMORY[0x1E0DEE9D8]);
    v38 = v28;
    sub_1B1C5E610(v35, v36, v33, v39, v34 & 1, a8, &v37);
    if (v9)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      return swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    v29 = v38;
    if ((a9 & 1) != 0)
    {
      if (*(_QWORD *)(v38 + 16))
      {
        v37 = v27;
        sub_1B2229550();
        result = sub_1B1DC3AC8(*(_QWORD *)(v29 + 32));
        __break(1u);
        return result;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v30 = *(_QWORD *)(v32 + 16);
      type metadata accessor for AuthoringGraph();
      v31 = (_QWORD *)swift_allocObject();
      v31[2] = 0;
      v31[3] = v27;
      v31[4] = 0;
      v31[5] = 0;
      swift_retain();
      v31[6] = sub_1B1B7DC90(v27);
      v31[3] = v27;
      *(_QWORD *)(v30 + OBJC_IVAR____TtC3VFX21AuthoringSubGraphNode_graph) = v31;
      swift_release();
      swift_release();
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    return swift_release();
  }
  return result;
}

uint64_t sub_1B1C5A714(uint64_t a1, uint64_t a2, char a3, unint64_t a4, char a5, unint64_t a6)
{
  uint64_t v6;
  char v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t result;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v12 = a3 & 1;
  v33 = sub_1B1C6E758(MEMORY[0x1E0DEE9D8], (void (*)(_QWORD))type metadata accessor for AuthoringNode, (void (*)(void))sub_1B1E91F8C, (void (*)(void))sub_1B1EA8AB8);
  v34 = v13;
  sub_1B1C5C670(a1, a2, v12, a4, a5, a6, &v33);
  v14 = v33;
  if (v6)
  {
LABEL_2:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return a2;
  }
  v15 = (char *)v34;
  v16 = *(_QWORD *)(v34 + 16);
  if (!v16)
    return v33;
  v17 = v34 + 32;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v18 = 0;
  a2 = v14;
  while (1)
  {
    v19 = *(_QWORD *)(v17 + 8 * v18);
    if (*(_QWORD *)(v14 + 16))
    {
      sub_1B1DC3AC8(*(_QWORD *)(v17 + 8 * v18));
      if ((v20 & 1) != 0)
        swift_retain();
    }
    _s11DeletedNodeCMa_0(0);
    v21 = swift_dynamicCastClass();
    swift_release();
    if (!v21)
      goto LABEL_5;
    v22 = sub_1B1DC3AC8(v19);
    if ((v23 & 1) == 0)
      goto LABEL_5;
    v24 = v22;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v35 = a2;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_1B1EA8AB8();
      a2 = v35;
    }
    sub_1B1EA4F6C(v24, a2);
    swift_bridgeObjectRelease();
    v26 = *((_QWORD *)v15 + 2);
    if (!v26)
      goto LABEL_21;
    v27 = 0;
    if (v26 == 1 || *((_QWORD *)v15 + 4) == v19)
      goto LABEL_22;
    if (*((_QWORD *)v15 + 5) != v19)
    {
      v28 = 0;
      v29 = v26 - 2;
      while (v29 != v28)
      {
        v30 = *(_QWORD *)&v15[8 * v28++ + 48];
        if (v30 == v19)
        {
          v27 = v28 + 1;
          goto LABEL_22;
        }
      }
LABEL_21:
      v27 = 0;
      goto LABEL_22;
    }
    v27 = 1;
LABEL_22:
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v15 = sub_1B1FFED54((uint64_t)v15);
    v31 = *((_QWORD *)v15 + 2) - 1;
    if (v31 - v27 < 0)
      break;
    memmove(&v15[8 * v27 + 32], &v15[8 * v27 + 40], 8 * (v31 - v27));
    *((_QWORD *)v15 + 2) = v31;
    swift_release();
LABEL_5:
    if (++v18 == v16)
      goto LABEL_2;
  }
  result = sub_1B2229700();
  __break(1u);
  return result;
}

uint64_t sub_1B1C5A9E8(uint64_t a1, uint64_t a2, char a3, unint64_t a4, int a5, unint64_t a6)
{
  uint64_t v6;
  int v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t result;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v12 = a3 & 1;
  v33 = sub_1B1C6E758(MEMORY[0x1E0DEE9D8], (void (*)(_QWORD))type metadata accessor for Node, (void (*)(void))sub_1B1E94400, (void (*)(void))sub_1B1EA9D2C);
  v34 = v13;
  sub_1B1C5D4E8(a1, a2, v12, a4, a5, a6, &v33);
  v14 = v33;
  if (v6)
  {
LABEL_2:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return a2;
  }
  v15 = (char *)v34;
  v16 = *(_QWORD *)(v34 + 16);
  if (!v16)
    return v33;
  v17 = v34 + 32;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v18 = 0;
  a2 = v14;
  while (1)
  {
    v19 = *(_QWORD *)(v17 + 8 * v18);
    if (*(_QWORD *)(v14 + 16))
    {
      sub_1B1DC3AC8(*(_QWORD *)(v17 + 8 * v18));
      if ((v20 & 1) != 0)
        swift_retain();
    }
    _s11DeletedNodeCMa(0);
    v21 = swift_dynamicCastClass();
    swift_release();
    if (!v21)
      goto LABEL_5;
    v22 = sub_1B1DC3AC8(v19);
    if ((v23 & 1) == 0)
      goto LABEL_5;
    v24 = v22;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v35 = a2;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_1B1EA9D2C();
      a2 = v35;
    }
    sub_1B1EA4F6C(v24, a2);
    swift_bridgeObjectRelease();
    v26 = *((_QWORD *)v15 + 2);
    if (!v26)
      goto LABEL_21;
    v27 = 0;
    if (v26 == 1 || *((_QWORD *)v15 + 4) == v19)
      goto LABEL_22;
    if (*((_QWORD *)v15 + 5) != v19)
    {
      v28 = 0;
      v29 = v26 - 2;
      while (v29 != v28)
      {
        v30 = *(_QWORD *)&v15[8 * v28++ + 48];
        if (v30 == v19)
        {
          v27 = v28 + 1;
          goto LABEL_22;
        }
      }
LABEL_21:
      v27 = 0;
      goto LABEL_22;
    }
    v27 = 1;
LABEL_22:
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v15 = sub_1B1FFED54((uint64_t)v15);
    v31 = *((_QWORD *)v15 + 2) - 1;
    if (v31 - v27 < 0)
      break;
    memmove(&v15[8 * v27 + 32], &v15[8 * v27 + 40], 8 * (v31 - v27));
    *((_QWORD *)v15 + 2) = v31;
    swift_release();
LABEL_5:
    if (++v18 == v16)
      goto LABEL_2;
  }
  result = sub_1B2229700();
  __break(1u);
  return result;
}

uint64_t sub_1B1C5ACBC(void (*a1)(_QWORD *), uint64_t a2, uint64_t a3, char a4, unint64_t a5, char a6, uint64_t a7, uint64_t a8, __int128 a9, uint64_t a10, uint64_t a11, uint64_t *a12)
{
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v23[6];

  v17 = a4 & 1;
  swift_retain();
  sub_1B1BBC9D8(a5, (uint64_t (*)(unint64_t))sub_1B19F8CD0);
  swift_release();
  v18 = swift_allocObject();
  *(_BYTE *)(v18 + 16) = v17;
  *(_QWORD *)(v18 + 24) = a5;
  *(_BYTE *)(v18 + 32) = a6;
  *(_QWORD *)(v18 + 40) = a7;
  *(_QWORD *)(v18 + 48) = a3;
  *(_QWORD *)(v18 + 56) = a8;
  *(_OWORD *)(v18 + 64) = a9;
  *(_QWORD *)(v18 + 80) = a10;
  *(_QWORD *)(v18 + 88) = a11;
  v19 = swift_allocObject();
  *(_QWORD *)(v19 + 16) = sub_1B1C78DB8;
  *(_QWORD *)(v19 + 24) = v18;
  v20 = *a12;
  v23[0] = a3;
  v23[1] = v20;
  v23[2] = a8;
  v23[3] = sub_1B1C78744;
  v23[4] = v19;
  v23[5] = a11;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  a1(v23);
  swift_release();
  swift_release_n();
  return swift_release();
}

uint64_t sub_1B1C5AE24(void (*a1)(uint64_t *__return_ptr, _QWORD *), uint64_t a2, uint64_t a3, char a4, unint64_t a5, char a6, uint64_t a7, uint64_t a8, __int128 a9, uint64_t a10, uint64_t a11, uint64_t *a12)
{
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v23;
  _QWORD v24[6];
  uint64_t v25;

  v17 = a4 & 1;
  swift_retain();
  sub_1B1BBC9D8(a5, (uint64_t (*)(unint64_t))sub_1B19F8CD0);
  swift_release();
  v18 = swift_allocObject();
  *(_BYTE *)(v18 + 16) = v17;
  *(_QWORD *)(v18 + 24) = a5;
  *(_BYTE *)(v18 + 32) = a6;
  *(_QWORD *)(v18 + 40) = a7;
  *(_QWORD *)(v18 + 48) = a3;
  *(_QWORD *)(v18 + 56) = a8;
  *(_OWORD *)(v18 + 64) = a9;
  *(_QWORD *)(v18 + 80) = a10;
  *(_QWORD *)(v18 + 88) = a11;
  v19 = swift_allocObject();
  *(_QWORD *)(v19 + 16) = sub_1B1C79E30;
  *(_QWORD *)(v19 + 24) = v18;
  v20 = *a12;
  v24[0] = a3;
  v24[1] = v20;
  v24[2] = a8;
  v24[3] = sub_1B1C7866C;
  v24[4] = v19;
  v24[5] = a11;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  a1(&v25, v24);
  swift_release();
  swift_release_n();
  result = swift_release();
  if (!v23)
    return v25;
  return result;
}

uint64_t sub_1B1C5AF94(void (*a1)(_QWORD *), uint64_t a2, uint64_t a3, char a4, unint64_t a5, char a6, uint64_t a7, uint64_t a8, __int128 a9, uint64_t a10, uint64_t a11, uint64_t *a12)
{
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v23[6];

  v17 = a4 & 1;
  swift_retain();
  sub_1B1BBC9D8(a5, (uint64_t (*)(unint64_t))sub_1B19F8CD0);
  swift_release();
  v18 = swift_allocObject();
  *(_BYTE *)(v18 + 16) = v17;
  *(_QWORD *)(v18 + 24) = a5;
  *(_BYTE *)(v18 + 32) = a6;
  *(_QWORD *)(v18 + 40) = a7;
  *(_QWORD *)(v18 + 48) = a3;
  *(_QWORD *)(v18 + 56) = a8;
  *(_OWORD *)(v18 + 64) = a9;
  *(_QWORD *)(v18 + 80) = a10;
  *(_QWORD *)(v18 + 88) = a11;
  v19 = swift_allocObject();
  *(_QWORD *)(v19 + 16) = sub_1B1C78738;
  *(_QWORD *)(v19 + 24) = v18;
  v20 = *a12;
  v23[0] = a3;
  v23[1] = v20;
  v23[2] = a8;
  v23[3] = sub_1B1C78744;
  v23[4] = v19;
  v23[5] = a11;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  a1(v23);
  swift_release();
  swift_release_n();
  return swift_release();
}

uint64_t sub_1B1C5B0FC(void (*a1)(uint64_t *__return_ptr, _QWORD *), uint64_t a2, uint64_t a3, char a4, unint64_t a5, char a6, uint64_t a7, uint64_t a8, __int128 a9, uint64_t a10, uint64_t a11, uint64_t *a12)
{
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v23;
  _QWORD v24[6];
  uint64_t v25;

  v17 = a4 & 1;
  swift_retain();
  sub_1B1BBC9D8(a5, (uint64_t (*)(unint64_t))sub_1B19F8CD0);
  swift_release();
  v18 = swift_allocObject();
  *(_BYTE *)(v18 + 16) = v17;
  *(_QWORD *)(v18 + 24) = a5;
  *(_BYTE *)(v18 + 32) = a6;
  *(_QWORD *)(v18 + 40) = a7;
  *(_QWORD *)(v18 + 48) = a3;
  *(_QWORD *)(v18 + 56) = a8;
  *(_OWORD *)(v18 + 64) = a9;
  *(_QWORD *)(v18 + 80) = a10;
  *(_QWORD *)(v18 + 88) = a11;
  v19 = swift_allocObject();
  *(_QWORD *)(v19 + 16) = sub_1B1C793B0;
  *(_QWORD *)(v19 + 24) = v18;
  v20 = *a12;
  v24[0] = a3;
  v24[1] = v20;
  v24[2] = a8;
  v24[3] = sub_1B1C7866C;
  v24[4] = v19;
  v24[5] = a11;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  a1(&v25, v24);
  swift_release();
  swift_release_n();
  result = swift_release();
  if (!v23)
    return v25;
  return result;
}

uint64_t sub_1B1C5B26C(void (*a1)(_QWORD *), uint64_t a2, uint64_t a3, char a4, unint64_t a5, char a6, uint64_t a7, uint64_t a8, __int128 a9, uint64_t a10, uint64_t a11, uint64_t *a12)
{
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v23[6];

  v17 = a4 & 1;
  swift_retain();
  sub_1B1BBC9D8(a5, (uint64_t (*)(unint64_t))sub_1B19F8CD0);
  swift_release();
  v18 = swift_allocObject();
  *(_BYTE *)(v18 + 16) = v17;
  *(_QWORD *)(v18 + 24) = a5;
  *(_BYTE *)(v18 + 32) = a6;
  *(_QWORD *)(v18 + 40) = a7;
  *(_QWORD *)(v18 + 48) = a3;
  *(_QWORD *)(v18 + 56) = a8;
  *(_OWORD *)(v18 + 64) = a9;
  *(_QWORD *)(v18 + 80) = a10;
  *(_QWORD *)(v18 + 88) = a11;
  v19 = swift_allocObject();
  *(_QWORD *)(v19 + 16) = sub_1B1C79358;
  *(_QWORD *)(v19 + 24) = v18;
  v20 = *a12;
  v23[0] = a3;
  v23[1] = v20;
  v23[2] = a8;
  v23[3] = sub_1B1C78E0C;
  v23[4] = v19;
  v23[5] = a11;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  a1(v23);
  swift_release();
  swift_release_n();
  return swift_release();
}

uint64_t sub_1B1C5B3D4(void (*a1)(uint64_t *__return_ptr, _QWORD *), uint64_t a2, uint64_t a3, char a4, unint64_t a5, char a6, uint64_t a7, uint64_t a8, __int128 a9, uint64_t a10, uint64_t a11, uint64_t *a12)
{
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v23;
  _QWORD v24[6];
  uint64_t v25;

  v17 = a4 & 1;
  swift_retain();
  sub_1B1BBC9D8(a5, (uint64_t (*)(unint64_t))sub_1B19F8CD0);
  swift_release();
  v18 = swift_allocObject();
  *(_BYTE *)(v18 + 16) = v17;
  *(_QWORD *)(v18 + 24) = a5;
  *(_BYTE *)(v18 + 32) = a6;
  *(_QWORD *)(v18 + 40) = a7;
  *(_QWORD *)(v18 + 48) = a3;
  *(_QWORD *)(v18 + 56) = a8;
  *(_OWORD *)(v18 + 64) = a9;
  *(_QWORD *)(v18 + 80) = a10;
  *(_QWORD *)(v18 + 88) = a11;
  v19 = swift_allocObject();
  *(_QWORD *)(v19 + 16) = sub_1B1C792CC;
  *(_QWORD *)(v19 + 24) = v18;
  v20 = *a12;
  v24[0] = a3;
  v24[1] = v20;
  v24[2] = a8;
  v24[3] = sub_1B1C7866C;
  v24[4] = v19;
  v24[5] = a11;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  a1(&v25, v24);
  swift_release();
  swift_release_n();
  result = swift_release();
  if (!v23)
    return v25;
  return result;
}

uint64_t sub_1B1C5B544(void (*a1)(uint64_t *__return_ptr, _QWORD *), uint64_t a2, uint64_t a3, char a4, unint64_t a5, char a6, uint64_t a7, uint64_t a8, __int128 a9, uint64_t a10, uint64_t a11, uint64_t *a12)
{
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v23;
  _QWORD v24[6];
  uint64_t v25;

  v17 = a4 & 1;
  swift_retain();
  sub_1B1BBC9D8(a5, (uint64_t (*)(unint64_t))sub_1B19F8CD0);
  swift_release();
  v18 = swift_allocObject();
  *(_BYTE *)(v18 + 16) = v17;
  *(_QWORD *)(v18 + 24) = a5;
  *(_BYTE *)(v18 + 32) = a6;
  *(_QWORD *)(v18 + 40) = a7;
  *(_QWORD *)(v18 + 48) = a3;
  *(_QWORD *)(v18 + 56) = a8;
  *(_OWORD *)(v18 + 64) = a9;
  *(_QWORD *)(v18 + 80) = a10;
  *(_QWORD *)(v18 + 88) = a11;
  v19 = swift_allocObject();
  *(_QWORD *)(v19 + 16) = sub_1B1C79F08;
  *(_QWORD *)(v19 + 24) = v18;
  v20 = *a12;
  v24[0] = a3;
  v24[1] = v20;
  v24[2] = a8;
  v24[3] = sub_1B1C7866C;
  v24[4] = v19;
  v24[5] = a11;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  a1(&v25, v24);
  swift_release();
  swift_release_n();
  result = swift_release();
  if (!v23)
    return v25;
  return result;
}

uint64_t sub_1B1C5B6B4(void (*a1)(_QWORD *), uint64_t a2, uint64_t a3, char a4, unint64_t a5, char a6, uint64_t a7, uint64_t a8, __int128 a9, uint64_t a10, uint64_t a11, uint64_t *a12)
{
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v23[6];

  v17 = a4 & 1;
  swift_retain();
  sub_1B1BBC9D8(a5, (uint64_t (*)(unint64_t))sub_1B19F8CD0);
  swift_release();
  v18 = swift_allocObject();
  *(_BYTE *)(v18 + 16) = v17;
  *(_QWORD *)(v18 + 24) = a5;
  *(_BYTE *)(v18 + 32) = a6;
  *(_QWORD *)(v18 + 40) = a7;
  *(_QWORD *)(v18 + 48) = a3;
  *(_QWORD *)(v18 + 56) = a8;
  *(_OWORD *)(v18 + 64) = a9;
  *(_QWORD *)(v18 + 80) = a10;
  *(_QWORD *)(v18 + 88) = a11;
  v19 = swift_allocObject();
  *(_QWORD *)(v19 + 16) = sub_1B1C79694;
  *(_QWORD *)(v19 + 24) = v18;
  v20 = *a12;
  v23[0] = a3;
  v23[1] = v20;
  v23[2] = a8;
  v23[3] = sub_1B1C78E0C;
  v23[4] = v19;
  v23[5] = a11;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  a1(v23);
  swift_release();
  swift_release_n();
  return swift_release();
}

uint64_t sub_1B1C5B81C(void (*a1)(_QWORD *__return_ptr, _QWORD *), uint64_t a2, uint64_t a3, char a4, unint64_t a5, char a6, uint64_t a7, uint64_t a8, __int128 a9, uint64_t a10, uint64_t a11, uint64_t *a12)
{
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  _QWORD v24[6];
  _QWORD v25[4];

  v17 = a4 & 1;
  swift_retain();
  sub_1B1BBC9D8(a5, (uint64_t (*)(unint64_t))sub_1B19F8CD0);
  swift_release();
  v18 = swift_allocObject();
  *(_BYTE *)(v18 + 16) = v17;
  *(_QWORD *)(v18 + 24) = a5;
  *(_BYTE *)(v18 + 32) = a6;
  *(_QWORD *)(v18 + 40) = a7;
  *(_QWORD *)(v18 + 48) = a3;
  *(_QWORD *)(v18 + 56) = a8;
  *(_OWORD *)(v18 + 64) = a9;
  *(_QWORD *)(v18 + 80) = a10;
  *(_QWORD *)(v18 + 88) = a11;
  v19 = swift_allocObject();
  *(_QWORD *)(v19 + 16) = sub_1B1C794B0;
  *(_QWORD *)(v19 + 24) = v18;
  v20 = *a12;
  v24[0] = a3;
  v24[1] = v20;
  v24[2] = a8;
  v24[3] = sub_1B1C79504;
  v24[4] = v19;
  v24[5] = a11;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  v21 = v25[3];
  a1(v25, v24);
  swift_release();
  swift_release_n();
  result = swift_release();
  if (!v21)
    return v25[0];
  return result;
}

uint64_t sub_1B1C5B98C(void (*a1)(uint64_t *__return_ptr, _QWORD *), uint64_t a2, uint64_t a3, char a4, unint64_t a5, char a6, uint64_t a7, uint64_t a8, __int128 a9, uint64_t a10, uint64_t a11, uint64_t *a12)
{
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v23;
  _QWORD v24[6];
  uint64_t v25;

  v17 = a4 & 1;
  swift_retain();
  sub_1B1BBC9D8(a5, (uint64_t (*)(unint64_t))sub_1B19F8CD0);
  swift_release();
  v18 = swift_allocObject();
  *(_BYTE *)(v18 + 16) = v17;
  *(_QWORD *)(v18 + 24) = a5;
  *(_BYTE *)(v18 + 32) = a6;
  *(_QWORD *)(v18 + 40) = a7;
  *(_QWORD *)(v18 + 48) = a3;
  *(_QWORD *)(v18 + 56) = a8;
  *(_OWORD *)(v18 + 64) = a9;
  *(_QWORD *)(v18 + 80) = a10;
  *(_QWORD *)(v18 + 88) = a11;
  v19 = swift_allocObject();
  *(_QWORD *)(v19 + 16) = sub_1B1C7A18C;
  *(_QWORD *)(v19 + 24) = v18;
  v20 = *a12;
  v24[0] = a3;
  v24[1] = v20;
  v24[2] = a8;
  v24[3] = sub_1B1C7866C;
  v24[4] = v19;
  v24[5] = a11;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  a1(&v25, v24);
  swift_release();
  swift_release_n();
  result = swift_release();
  if (!v23)
    return v25;
  return result;
}

uint64_t sub_1B1C5BAFC(void (*a1)(uint64_t *__return_ptr, _QWORD *), uint64_t a2, uint64_t a3, char a4, unint64_t a5, char a6, uint64_t a7, uint64_t a8, __int128 a9, uint64_t a10, uint64_t a11, uint64_t *a12)
{
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v23;
  _QWORD v24[6];
  uint64_t v25;

  v17 = a4 & 1;
  swift_retain();
  sub_1B1BBC9D8(a5, (uint64_t (*)(unint64_t))sub_1B19F8CD0);
  swift_release();
  v18 = swift_allocObject();
  *(_BYTE *)(v18 + 16) = v17;
  *(_QWORD *)(v18 + 24) = a5;
  *(_BYTE *)(v18 + 32) = a6;
  *(_QWORD *)(v18 + 40) = a7;
  *(_QWORD *)(v18 + 48) = a3;
  *(_QWORD *)(v18 + 56) = a8;
  *(_OWORD *)(v18 + 64) = a9;
  *(_QWORD *)(v18 + 80) = a10;
  *(_QWORD *)(v18 + 88) = a11;
  v19 = swift_allocObject();
  *(_QWORD *)(v19 + 16) = sub_1B1C78660;
  *(_QWORD *)(v19 + 24) = v18;
  v20 = *a12;
  v24[0] = a3;
  v24[1] = v20;
  v24[2] = a8;
  v24[3] = sub_1B1C7866C;
  v24[4] = v19;
  v24[5] = a11;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  a1(&v25, v24);
  swift_release();
  swift_release_n();
  result = swift_release();
  if (!v23)
    return v25;
  return result;
}

uint64_t sub_1B1C5BC6C(void (*a1)(uint64_t *__return_ptr, _QWORD *), uint64_t a2, uint64_t a3, char a4, unint64_t a5, char a6, uint64_t a7, uint64_t a8, __int128 a9, uint64_t a10, uint64_t a11, uint64_t *a12)
{
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v23;
  _QWORD v24[6];
  uint64_t v25;

  v17 = a4 & 1;
  swift_retain();
  sub_1B1BBC9D8(a5, (uint64_t (*)(unint64_t))sub_1B19F8CD0);
  swift_release();
  v18 = swift_allocObject();
  *(_BYTE *)(v18 + 16) = v17;
  *(_QWORD *)(v18 + 24) = a5;
  *(_BYTE *)(v18 + 32) = a6;
  *(_QWORD *)(v18 + 40) = a7;
  *(_QWORD *)(v18 + 48) = a3;
  *(_QWORD *)(v18 + 56) = a8;
  *(_OWORD *)(v18 + 64) = a9;
  *(_QWORD *)(v18 + 80) = a10;
  *(_QWORD *)(v18 + 88) = a11;
  v19 = swift_allocObject();
  *(_QWORD *)(v19 + 16) = sub_1B1C78CA0;
  *(_QWORD *)(v19 + 24) = v18;
  v20 = *a12;
  v24[0] = a3;
  v24[1] = v20;
  v24[2] = a8;
  v24[3] = sub_1B1C7866C;
  v24[4] = v19;
  v24[5] = a11;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  a1(&v25, v24);
  swift_release();
  swift_release_n();
  result = swift_release();
  if (!v23)
    return v25;
  return result;
}

uint64_t sub_1B1C5BDDC(uint64_t a1, char a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void (*a12)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t result;
  char v19;

  if ((a2 & 1) != 0)
  {
    if (!*(_QWORD *)(*(_QWORD *)a5 + 16) || (result = sub_1B1DC3AC8(a1), (v19 & 1) == 0))
    {
      swift_retain();
      a12(a1, 1, a3, a4 & 1, a7, a8, a9, a10, a5, a11);
      return swift_release();
    }
  }
  else
  {
    sub_1B2229688();
    __break(1u);
    result = swift_unexpectedError();
    __break(1u);
  }
  return result;
}

uint64_t sub_1B1C5BF24@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t *a5@<X4>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t *a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t result;

  if ((a2 & 1) != 0)
  {
    v16 = *a5;
    if (*(_QWORD *)(*a5 + 16) && (v17 = sub_1B1DC3AC8(a1), (v18 & 1) != 0))
    {
      v19 = (uint64_t *)(*(_QWORD *)(v16 + 56) + 88 * v17);
      v20 = *v19;
      v21 = v19[1];
      v22 = v19[2];
      v23 = v19[3];
      v24 = v19[4];
      v25 = v19[5];
      v26 = v19[6];
      v27 = v19[7];
      v28 = v19[8];
      v29 = v19[9];
      v30 = v19[10];
      *a8 = v20;
      a8[1] = v21;
      a8[2] = v22;
      a8[3] = v23;
      a8[4] = v24;
      a8[5] = v25;
      a8[6] = v26;
      a8[7] = v27;
      a8[8] = v28;
      a8[9] = v29;
      a8[10] = v30;
      return sub_1B1B9D8BC(v20);
    }
    else
    {
      swift_retain();
      sub_1B1C52E1C(a8, a1, 1, a3, a4 & 1, a6, a7, a9, a10, a5, a11);
      return swift_release();
    }
  }
  else
  {
    sub_1B2229688();
    __break(1u);
    result = swift_unexpectedError();
    __break(1u);
  }
  return result;
}

uint64_t sub_1B1C5C0B8(uint64_t a1, char a2, uint64_t a3, char a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t (*a12)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *, uint64_t))
{
  uint64_t v18;
  unint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t result;

  if ((a2 & 1) != 0)
  {
    v18 = *a5;
    if (*(_QWORD *)(*a5 + 16) && (v19 = sub_1B1DC3AC8(a1), (v20 & 1) != 0))
    {
      v21 = *(_QWORD *)(*(_QWORD *)(v18 + 56) + 8 * v19);
      swift_retain();
    }
    else
    {
      swift_retain();
      v21 = a12(a1, 1, a3, a4 & 1, a7, a8, a9, a10, a5, a11);
      swift_release();
    }
    return v21;
  }
  else
  {
    sub_1B2229688();
    __break(1u);
    result = swift_unexpectedError();
    __break(1u);
  }
  return result;
}

uint64_t sub_1B1C5C210@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t *a5@<X4>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v18;
  unint64_t v19;
  char v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t result;
  _OWORD v34[9];
  char v35;

  if ((a2 & 1) != 0)
  {
    v18 = *a5;
    if (*(_QWORD *)(*a5 + 16) && (v19 = sub_1B1DC3AC8(a1), (v20 & 1) != 0))
    {
      v21 = *(_QWORD *)(v18 + 56) + 152 * v19;
      v22 = *(_OWORD *)(v21 + 16);
      v34[0] = *(_OWORD *)v21;
      v34[1] = v22;
      v23 = *(_OWORD *)(v21 + 80);
      v25 = *(_OWORD *)(v21 + 32);
      v24 = *(_OWORD *)(v21 + 48);
      v34[4] = *(_OWORD *)(v21 + 64);
      v34[5] = v23;
      v34[2] = v25;
      v34[3] = v24;
      v26 = *(_OWORD *)(v21 + 96);
      v27 = *(_OWORD *)(v21 + 112);
      v28 = *(_OWORD *)(v21 + 128);
      v35 = *(_BYTE *)(v21 + 144);
      v34[7] = v27;
      v34[8] = v28;
      v34[6] = v26;
      v29 = *(_OWORD *)(v21 + 112);
      *(_OWORD *)(a8 + 96) = *(_OWORD *)(v21 + 96);
      *(_OWORD *)(a8 + 112) = v29;
      *(_OWORD *)(a8 + 128) = *(_OWORD *)(v21 + 128);
      *(_BYTE *)(a8 + 144) = *(_BYTE *)(v21 + 144);
      v30 = *(_OWORD *)(v21 + 48);
      *(_OWORD *)(a8 + 32) = *(_OWORD *)(v21 + 32);
      *(_OWORD *)(a8 + 48) = v30;
      v31 = *(_OWORD *)(v21 + 80);
      *(_OWORD *)(a8 + 64) = *(_OWORD *)(v21 + 64);
      *(_OWORD *)(a8 + 80) = v31;
      v32 = *(_OWORD *)(v21 + 16);
      *(_OWORD *)a8 = *(_OWORD *)v21;
      *(_OWORD *)(a8 + 16) = v32;
      return sub_1B1B7C5AC((uint64_t)v34);
    }
    else
    {
      swift_retain();
      sub_1B1C53E1C((_QWORD *)a8, a1, 1, a3, a4 & 1, a6, a7, a9, a10, a5, a11);
      return swift_release();
    }
  }
  else
  {
    sub_1B2229688();
    __break(1u);
    result = swift_unexpectedError();
    __break(1u);
  }
  return result;
}

uint64_t sub_1B1C5C3C8(uint64_t a1, char a2, uint64_t a3, char a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t result;

  if ((a2 & 1) != 0)
  {
    v17 = *a5;
    if (*(_QWORD *)(*a5 + 16) && (v18 = sub_1B1DC3AC8(a1), (v19 & 1) != 0))
    {
      v20 = *(_QWORD *)(*(_QWORD *)(v17 + 56) + 16 * v18);
      swift_bridgeObjectRetain();
    }
    else
    {
      swift_retain();
      v20 = sub_1B1C544CC(a1, 1, a3, a4 & 1, a7, a8, a9, a10, a5, a11);
      swift_release();
    }
    return v20;
  }
  else
  {
    sub_1B2229688();
    __break(1u);
    result = swift_unexpectedError();
    __break(1u);
  }
  return result;
}

uint64_t sub_1B1C5C520(uint64_t a1, char a2, uint64_t a3, char a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t (*a12)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *, uint64_t))
{
  uint64_t v18;
  unint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t result;

  if ((a2 & 1) != 0)
  {
    v18 = *a5;
    if (*(_QWORD *)(*a5 + 16))
    {
      v19 = sub_1B1DC3AC8(a1);
      if ((v20 & 1) != 0)
        return *(_QWORD *)(*(_QWORD *)(v18 + 56) + 8 * v19);
    }
    swift_retain();
    v21 = a12(a1, 1, a3, a4 & 1, a7, a8, a9, a10, a5, a11);
    swift_release();
    return v21;
  }
  else
  {
    sub_1B2229688();
    __break(1u);
    result = swift_unexpectedError();
    __break(1u);
  }
  return result;
}

uint64_t sub_1B1C5C670(uint64_t a1, uint64_t a2, char a3, unint64_t a4, char a5, unint64_t a6, uint64_t *a7)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  _QWORD v32[6];
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t *v38;
  char v39[8];
  unint64_t v40;
  uint64_t v41[2];

  v37 = a6;
  v38 = a7;
  v35 = a1;
  v36 = a2;
  v41[1] = *MEMORY[0x1E0C80C00];
  v12 = *(_QWORD *)(v7 + 24);
  swift_bridgeObjectRetain();
  if (a4 != 0x1000000000000000)
  {
    v13 = sub_1B1C6D384(v12);
    swift_bridgeObjectRelease();
    v12 = v13;
  }
  v40 = MEMORY[0x1E0DEE9D8];
  v41[0] = (uint64_t)sub_1B1B95F7C(MEMORY[0x1E0DEE9D8]);
  if (!(v12 >> 62))
  {
    v14 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain_n();
    if (v14)
      goto LABEL_5;
LABEL_14:
    v19 = swift_bridgeObjectRelease_n();
    v21 = MEMORY[0x1E0DEE9D8];
LABEL_15:
    if (v21 >> 62)
    {
      swift_bridgeObjectRetain();
      v31 = sub_1B22296AC();
      v19 = swift_bridgeObjectRelease();
      if (!v31)
        goto LABEL_18;
    }
    else if (!*(_QWORD *)((v21 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_18:
      v23 = v38;
      v24 = *v38;
      v25 = v38[1];
      MEMORY[0x1E0C80A78](v19, v20);
      v32[2] = v38;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v26 = sub_1B1C6D75C(v24, v25, sub_1B1C79E10, (uint64_t)v32, (uint64_t)v39, (void (*)(BOOL, unint64_t, uint64_t))sub_1B202A244);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v27 = sub_1B1F837BC(v26);
      v29 = v28;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      *v23 = v27;
      v23[1] = v29;
      goto LABEL_19;
    }
    v22 = swift_bridgeObjectRetain();
    v19 = sub_1B19F4AF4(v22);
    goto LABEL_18;
  }
  swift_bridgeObjectRetain_n();
  v14 = sub_1B22296AC();
  if (!v14)
    goto LABEL_14;
LABEL_5:
  v32[5] = v7 + 24;
  v33 = v14;
  v15 = 0;
  v34 = a3 & 1;
  v16 = v12 & 0xC000000000000001;
  v17 = v12;
  while (1)
  {
    if (v16)
    {
      v18 = MEMORY[0x1B5E21018](v15, v12);
    }
    else
    {
      v18 = *(_QWORD *)(v12 + 8 * v15 + 32);
      swift_retain();
    }
    sub_1B1C51F64(v18, v34, a4, a5 & 1, v37, v35, v36, v41, v38, (uint64_t)&v40);
    if (v8)
      break;
    swift_release();
    swift_release();
    ++v15;
    v12 = v17;
    if (v33 == v15)
    {
      v19 = swift_bridgeObjectRelease_n();
      v21 = v40;
      goto LABEL_15;
    }
  }
  swift_bridgeObjectRelease_n();
  swift_release();
  swift_bridgeObjectRelease();
LABEL_19:
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B1C5C9C4(uint64_t a1, uint64_t a2, char a3, unint64_t a4, char a5, unint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  unint64_t v15;
  char v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v27;
  uint64_t v28[2];

  v28[1] = *MEMORY[0x1E0C80C00];
  v11 = *(_QWORD *)(v7 + 24);
  v27 = MEMORY[0x1E0DEE9D8];
  v28[0] = (uint64_t)sub_1B1B95F7C(MEMORY[0x1E0DEE9D8]);
  if (!(v11 >> 62))
  {
    v12 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain_n();
    if (v12)
      goto LABEL_3;
LABEL_12:
    swift_bridgeObjectRelease_n();
    v19 = MEMORY[0x1E0DEE9D8];
LABEL_13:
    if (v19 >> 62)
    {
      swift_bridgeObjectRetain();
      v20 = sub_1B22296AC();
      swift_bridgeObjectRelease();
      if (v20)
        goto LABEL_15;
    }
    else if (*(_QWORD *)((v19 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_15:
      sub_1B19F4AF4(v19);
      goto LABEL_18;
    }
    swift_bridgeObjectRelease();
    goto LABEL_18;
  }
  swift_bridgeObjectRetain_n();
  v12 = sub_1B22296AC();
  if (!v12)
    goto LABEL_12;
LABEL_3:
  v13 = 0;
  v14 = a3 & 1;
  v15 = v11 & 0xC000000000000001;
  v16 = a5 & 1;
  v17 = v11;
  while (1)
  {
    if (v15)
    {
      v18 = MEMORY[0x1B5E21018](v13, v11);
    }
    else
    {
      v18 = *(_QWORD *)(v11 + 8 * v13 + 32);
      swift_retain();
    }
    sub_1B1C51AF4(v18, v14, a4, v16, a6, a1, a2, v28, a7, (uint64_t)&v27);
    if (v8)
      break;
    swift_release();
    ++v13;
    v11 = v17;
    if (v12 == v13)
    {
      swift_bridgeObjectRelease_n();
      v19 = v27;
      goto LABEL_13;
    }
  }
  swift_bridgeObjectRelease_n();
  swift_release();
  swift_bridgeObjectRelease();
LABEL_18:
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B1C5CC00(uint64_t a1, uint64_t a2, char a3, unint64_t a4, char a5, unint64_t a6, uint64_t *a7)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  unint64_t v15;
  char v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v27;
  uint64_t v28[2];

  v28[1] = *MEMORY[0x1E0C80C00];
  v11 = *(_QWORD *)(v7 + 16);
  v27 = MEMORY[0x1E0DEE9D8];
  v28[0] = (uint64_t)sub_1B1B95F7C(MEMORY[0x1E0DEE9D8]);
  if (!(v11 >> 62))
  {
    v12 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain_n();
    if (v12)
      goto LABEL_3;
LABEL_12:
    swift_bridgeObjectRelease_n();
    v19 = MEMORY[0x1E0DEE9D8];
LABEL_13:
    if (v19 >> 62)
    {
      swift_bridgeObjectRetain();
      v20 = sub_1B22296AC();
      swift_bridgeObjectRelease();
      if (v20)
        goto LABEL_15;
    }
    else if (*(_QWORD *)((v19 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_15:
      sub_1B19F4B18(v19);
      goto LABEL_18;
    }
    swift_bridgeObjectRelease();
    goto LABEL_18;
  }
  swift_bridgeObjectRetain_n();
  v12 = sub_1B22296AC();
  if (!v12)
    goto LABEL_12;
LABEL_3:
  v13 = 0;
  v14 = a3 & 1;
  v15 = v11 & 0xC000000000000001;
  v16 = a5 & 1;
  v17 = v11;
  while (1)
  {
    if (v15)
    {
      v18 = (_QWORD *)MEMORY[0x1B5E21018](v13, v11);
    }
    else
    {
      v18 = *(_QWORD **)(v11 + 8 * v13 + 32);
      swift_retain();
    }
    sub_1B1C5248C(v18, v14, a4, v16, a6, a1, a2, v28, a7, (uint64_t)&v27);
    if (v8)
      break;
    swift_release();
    ++v13;
    v11 = v17;
    if (v12 == v13)
    {
      swift_bridgeObjectRelease_n();
      v19 = v27;
      goto LABEL_13;
    }
  }
  swift_bridgeObjectRelease_n();
  swift_release();
  swift_bridgeObjectRelease();
LABEL_18:
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B1C5CE3C(uint64_t a1, uint64_t a2, int a3, unint64_t a4, int a5, unint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t result;
  _QWORD v31[7];
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38[2];
  _QWORD v39[2];

  v9 = v8;
  v36 = a6;
  v37 = a7;
  v10 = a5;
  v12 = a3;
  v34 = a1;
  v35 = a2;
  v39[1] = *MEMORY[0x1E0C80C00];
  v13 = *(_QWORD *)(v7 + 16);
  v14 = MEMORY[0x1E0DEE9D8];
  if (a4 == 0x1000000000000000)
  {
    swift_bridgeObjectRetain();
    goto LABEL_5;
  }
  LODWORD(v33) = a3;
  LODWORD(v32) = a5;
  v39[0] = MEMORY[0x1E0DEE9D8];
  v15 = swift_allocObject();
  *(_QWORD *)(v15 + 16) = v13;
  MEMORY[0x1E0C80A78](v15, v16);
  v31[6] = v39;
  MEMORY[0x1E0C80A78](v17, v18);
  v31[2] = sub_1B1C7A1B0;
  v31[3] = v19;
  swift_bridgeObjectRetain_n();
  v38[0] = sub_1B1C6D068(v14);
  v38[1] = v20;
  sub_1B1C5CC00((uint64_t)sub_1B1C785A8, (uint64_t)v31, 1, 0x1000000000000000uLL, 0, v14, v38);
  if (!v8)
  {
    v9 = 0;
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v13 = v39[0];
    v10 = v32;
    v12 = v33;
LABEL_5:
    v38[0] = (uint64_t)sub_1B1B95F7C(v14);
    v39[0] = v14;
    if (v13 >> 62)
    {
      swift_bridgeObjectRetain_n();
      v21 = sub_1B22296AC();
      if (v21)
      {
LABEL_7:
        v32 = v7 + 16;
        v33 = a4;
        v22 = 0;
        v23 = v12 & 1;
        v24 = v13 & 0xC000000000000001;
        v25 = v10 & 1;
        v26 = v13;
        while (1)
        {
          if (v24)
          {
            v27 = (_QWORD *)MEMORY[0x1B5E21018](v22, v13);
          }
          else
          {
            v27 = *(_QWORD **)(v13 + 8 * v22 + 32);
            swift_retain();
          }
          sub_1B1C52908(v27, v23, v33, v25, v36, v34, v35, v38, v37, (uint64_t)v39);
          if (v9)
            break;
          swift_release();
          swift_release();
          ++v22;
          v13 = v26;
          if (v21 == v22)
          {
            swift_bridgeObjectRelease_n();
            v28 = v39[0];
            goto LABEL_17;
          }
        }
        swift_bridgeObjectRelease_n();
        swift_release();
        swift_bridgeObjectRelease();
        goto LABEL_22;
      }
    }
    else
    {
      v21 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain_n();
      if (v21)
        goto LABEL_7;
    }
    swift_bridgeObjectRelease_n();
    v28 = MEMORY[0x1E0DEE9D8];
LABEL_17:
    if (v28 >> 62)
    {
      swift_bridgeObjectRetain();
      v29 = sub_1B22296AC();
      swift_bridgeObjectRelease();
      if (v29)
        goto LABEL_19;
    }
    else if (*(_QWORD *)((v28 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_19:
      sub_1B19F4B18(v28);
LABEL_22:
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    goto LABEL_22;
  }
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  __break(1u);
  return result;
}

uint64_t sub_1B1C5D1D8(uint64_t a1, uint64_t a2, int a3, unint64_t a4, int a5, unint64_t a6, uint64_t *a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t result;
  uint64_t v24;
  _QWORD v25[8];
  uint64_t v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  int v32;
  uint64_t v33[2];
  unint64_t v34;
  uint64_t v35[2];

  v9 = v8;
  v30 = a2;
  v31 = a7;
  v10 = a6;
  v32 = a5;
  v12 = a3;
  v13 = a1;
  v35[1] = *MEMORY[0x1E0C80C00];
  v14 = *(_QWORD *)(v7 + 16);
  v35[0] = v14;
  v15 = MEMORY[0x1E0DEE9D8];
  if (a4 == 0x1000000000000000)
  {
    swift_bridgeObjectRetain();
    goto LABEL_5;
  }
  v27 = a3;
  v28 = a1;
  v29 = a6;
  v34 = MEMORY[0x1E0DEE9D8];
  v16 = swift_allocObject();
  v26 = (uint64_t)&v26;
  *(_QWORD *)(v16 + 16) = v14;
  MEMORY[0x1E0C80A78](v16, v17);
  v25[6] = &v34;
  MEMORY[0x1E0C80A78](v18, v19);
  v25[2] = sub_1B1C7A1B0;
  v25[3] = v20;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain_n();
  v33[0] = sub_1B1C6D068(v15);
  v33[1] = v21;
  sub_1B1C5CC00((uint64_t)sub_1B1C785A8, (uint64_t)v25, 1, 0x1000000000000000uLL, 0, v15, v33);
  if (!v9)
  {
    v9 = 0;
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    v35[0] = v34;
    v13 = v28;
    v10 = v29;
    v12 = v27;
LABEL_5:
    v33[0] = (uint64_t)sub_1B1B95F7C(v15);
    v34 = v15;
    sub_1B1C5E894((uint64_t)&v34, v35, v7, v12 & 1, a4, v32 & 1, v10, v13, v30, v33, v31);
    v22 = v34;
    if (v9)
    {
LABEL_6:
      swift_bridgeObjectRelease();
LABEL_10:
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    if (v34 >> 62)
    {
      swift_bridgeObjectRetain();
      v24 = sub_1B22296AC();
      swift_bridgeObjectRelease();
      if (!v24)
        goto LABEL_6;
    }
    else if (!*(_QWORD *)((v34 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      goto LABEL_6;
    }
    sub_1B19F4B18(v22);
    goto LABEL_10;
  }
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  __break(1u);
  return result;
}

uint64_t sub_1B1C5D498(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7)
{
  return sub_1B1C5DFE0(a1, a2, a3, a4, a5, a6, a7, (void (*)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD *, uint64_t, unint64_t *))sub_1B1C53420);
}

uint64_t sub_1B1C5D4E8(uint64_t a1, uint64_t a2, int a3, unint64_t a4, int a5, unint64_t a6, uint64_t *a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t result;
  uint64_t v40;
  _QWORD v41[4];
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t *v49;
  char v50[8];
  uint64_t v51[2];
  _QWORD v52[2];

  v9 = v8;
  v49 = a7;
  v47 = a2;
  v48 = a6;
  v10 = a5;
  v12 = a3;
  v46 = a1;
  v52[1] = *MEMORY[0x1E0C80C00];
  v13 = *(_QWORD *)(v7 + 16);
  v14 = MEMORY[0x1E0DEE9D8];
  if (a4 == 0x1000000000000000)
  {
    swift_bridgeObjectRetain();
    goto LABEL_5;
  }
  LODWORD(v45) = a3;
  LODWORD(v44) = a5;
  v52[0] = MEMORY[0x1E0DEE9D8];
  v15 = swift_allocObject();
  *(_QWORD *)(v15 + 16) = v13;
  MEMORY[0x1E0C80A78](v15, v16);
  v43 = v52;
  MEMORY[0x1E0C80A78](v17, v18);
  v41[2] = sub_1B1C7A1B0;
  v41[3] = v19;
  swift_bridgeObjectRetain_n();
  v51[0] = sub_1B1C6D068(v14);
  v51[1] = v20;
  sub_1B1C5CC00((uint64_t)sub_1B1C785A8, (uint64_t)v41, 1, 0x1000000000000000uLL, 0, v14, v51);
  if (!v8)
  {
    v9 = 0;
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v13 = v52[0];
    v10 = v44;
    v12 = v45;
LABEL_5:
    v51[0] = (uint64_t)sub_1B1B95F7C(v14);
    v52[0] = v14;
    if (v13 >> 62)
    {
      swift_bridgeObjectRetain_n();
      v21 = sub_1B22296AC();
      if (v21)
      {
LABEL_7:
        v44 = v7 + 16;
        v45 = a4;
        v22 = 0;
        v23 = v12 & 1;
        v24 = v13;
        v25 = v13 & 0xC000000000000001;
        v26 = v10 & 1;
        while (1)
        {
          if (v25)
          {
            v27 = (_QWORD *)MEMORY[0x1B5E21018](v22, v24);
          }
          else
          {
            v27 = *(_QWORD **)(v24 + 8 * v22 + 32);
            swift_retain();
          }
          sub_1B1C53924(v27, v23, v45, v26, v48, v46, v47, v51, v49, (uint64_t)v52);
          if (v9)
            break;
          swift_release();
          swift_release();
          if (v21 == ++v22)
          {
            v28 = swift_bridgeObjectRelease_n();
            v30 = v52[0];
            goto LABEL_17;
          }
        }
        swift_bridgeObjectRelease_n();
        swift_release();
        swift_bridgeObjectRelease();
        goto LABEL_21;
      }
    }
    else
    {
      v21 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain_n();
      if (v21)
        goto LABEL_7;
    }
    v28 = swift_bridgeObjectRelease_n();
    v30 = MEMORY[0x1E0DEE9D8];
LABEL_17:
    if (v30 >> 62)
    {
      swift_bridgeObjectRetain();
      v40 = sub_1B22296AC();
      v28 = swift_bridgeObjectRelease();
      if (!v40)
        goto LABEL_20;
    }
    else if (!*(_QWORD *)((v30 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_20:
      v32 = v49;
      v33 = *v49;
      v34 = v49[1];
      MEMORY[0x1E0C80A78](v28, v29);
      v43 = v32;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v35 = sub_1B1C6D75C(v33, v34, sub_1B1C79EE8, (uint64_t)&v42, (uint64_t)v50, (void (*)(BOOL, unint64_t, uint64_t))sub_1B202A428);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v36 = sub_1B1F83E48(v35);
      v38 = v37;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      *v32 = v36;
      v32[1] = v38;
LABEL_21:
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    v31 = swift_bridgeObjectRetain();
    v28 = sub_1B19F4B18(v31);
    goto LABEL_20;
  }
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  __break(1u);
  return result;
}

uint64_t sub_1B1C5D934(uint64_t a1, uint64_t a2, int a3, unint64_t a4, int a5, unint64_t a6, uint64_t *a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t result;
  uint64_t v24;
  _QWORD v25[8];
  uint64_t v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  int v32;
  uint64_t v33[2];
  unint64_t v34;
  uint64_t v35[2];

  v9 = v8;
  v30 = a2;
  v31 = a7;
  v10 = a6;
  v32 = a5;
  v12 = a3;
  v13 = a1;
  v35[1] = *MEMORY[0x1E0C80C00];
  v14 = *(_QWORD *)(v7 + 16);
  v35[0] = v14;
  v15 = MEMORY[0x1E0DEE9D8];
  if (a4 == 0x1000000000000000)
  {
    swift_bridgeObjectRetain();
    goto LABEL_5;
  }
  v27 = a3;
  v28 = a1;
  v29 = a6;
  v34 = MEMORY[0x1E0DEE9D8];
  v16 = swift_allocObject();
  v26 = (uint64_t)&v26;
  *(_QWORD *)(v16 + 16) = v14;
  MEMORY[0x1E0C80A78](v16, v17);
  v25[6] = &v34;
  MEMORY[0x1E0C80A78](v18, v19);
  v25[2] = sub_1B1C7A1B0;
  v25[3] = v20;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain_n();
  v33[0] = sub_1B1C6D068(v15);
  v33[1] = v21;
  sub_1B1C5CC00((uint64_t)sub_1B1C785A8, (uint64_t)v25, 1, 0x1000000000000000uLL, 0, v15, v33);
  if (!v9)
  {
    v9 = 0;
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    v35[0] = v34;
    v13 = v28;
    v10 = v29;
    v12 = v27;
LABEL_5:
    v33[0] = (uint64_t)sub_1B1B95F7C(v15);
    v34 = v15;
    sub_1B1C5EA2C((uint64_t)&v34, v35, v7, v12 & 1, a4, v32 & 1, v10, v13, v30, v33, v31);
    v22 = v34;
    if (v9)
    {
LABEL_6:
      swift_bridgeObjectRelease();
LABEL_10:
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    if (v34 >> 62)
    {
      swift_bridgeObjectRetain();
      v24 = sub_1B22296AC();
      swift_bridgeObjectRelease();
      if (!v24)
        goto LABEL_6;
    }
    else if (!*(_QWORD *)((v34 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      goto LABEL_6;
    }
    sub_1B19F4B18(v22);
    goto LABEL_10;
  }
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  __break(1u);
  return result;
}

uint64_t sub_1B1C5DBF4(uint64_t a1, uint64_t a2, int a3, unint64_t a4, int a5, unint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t result;
  _QWORD v31[7];
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38[2];
  _QWORD v39[2];

  v9 = v8;
  v36 = a6;
  v37 = a7;
  v10 = a5;
  v12 = a3;
  v34 = a1;
  v35 = a2;
  v39[1] = *MEMORY[0x1E0C80C00];
  v13 = *(_QWORD *)(v7 + 16);
  v14 = MEMORY[0x1E0DEE9D8];
  if (a4 == 0x1000000000000000)
  {
    swift_bridgeObjectRetain();
    goto LABEL_5;
  }
  LODWORD(v33) = a3;
  LODWORD(v32) = a5;
  v39[0] = MEMORY[0x1E0DEE9D8];
  v15 = swift_allocObject();
  *(_QWORD *)(v15 + 16) = v13;
  MEMORY[0x1E0C80A78](v15, v16);
  v31[6] = v39;
  MEMORY[0x1E0C80A78](v17, v18);
  v31[2] = sub_1B1C7A1B0;
  v31[3] = v19;
  swift_bridgeObjectRetain_n();
  v38[0] = sub_1B1C6D068(v14);
  v38[1] = v20;
  sub_1B1C5CC00((uint64_t)sub_1B1C785A8, (uint64_t)v31, 1, 0x1000000000000000uLL, 0, v14, v38);
  if (!v8)
  {
    v9 = 0;
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v13 = v39[0];
    v10 = v32;
    v12 = v33;
LABEL_5:
    v38[0] = (uint64_t)sub_1B1B95F7C(v14);
    v39[0] = v14;
    if (v13 >> 62)
    {
      swift_bridgeObjectRetain_n();
      v21 = sub_1B22296AC();
      if (v21)
      {
LABEL_7:
        v32 = v7 + 16;
        v33 = a4;
        v22 = 0;
        v23 = v12 & 1;
        v24 = v13 & 0xC000000000000001;
        v25 = v10 & 1;
        v26 = v13;
        while (1)
        {
          if (v24)
          {
            v27 = (_QWORD *)MEMORY[0x1B5E21018](v22, v13);
          }
          else
          {
            v27 = *(_QWORD **)(v13 + 8 * v22 + 32);
            swift_retain();
          }
          sub_1B1C544CC(v27, v23, v33, v25, v36, v34, v35, v38, v37, (uint64_t)v39);
          if (v9)
            break;
          swift_release();
          swift_bridgeObjectRelease();
          ++v22;
          v13 = v26;
          if (v21 == v22)
          {
            swift_bridgeObjectRelease_n();
            v28 = v39[0];
            goto LABEL_17;
          }
        }
        swift_bridgeObjectRelease_n();
        swift_release();
        swift_bridgeObjectRelease();
        goto LABEL_22;
      }
    }
    else
    {
      v21 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain_n();
      if (v21)
        goto LABEL_7;
    }
    swift_bridgeObjectRelease_n();
    v28 = MEMORY[0x1E0DEE9D8];
LABEL_17:
    if (v28 >> 62)
    {
      swift_bridgeObjectRetain();
      v29 = sub_1B22296AC();
      swift_bridgeObjectRelease();
      if (v29)
        goto LABEL_19;
    }
    else if (*(_QWORD *)((v28 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_19:
      sub_1B19F4B18(v28);
LABEL_22:
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    goto LABEL_22;
  }
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  __break(1u);
  return result;
}

uint64_t sub_1B1C5DF90(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7)
{
  return sub_1B1C5DFE0(a1, a2, a3, a4, a5, a6, a7, (void (*)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD *, uint64_t, unint64_t *))sub_1B1C54A14);
}

uint64_t sub_1B1C5DFE0(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, void (*a8)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD *, uint64_t, unint64_t *))
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;
  unint64_t v30;
  _QWORD v31[2];

  v31[1] = *MEMORY[0x1E0C80C00];
  v13 = *(_QWORD *)(v8 + 24);
  swift_bridgeObjectRetain();
  if (a4 != 0x1000000000000000)
  {
    v14 = sub_1B1C6D384(v13);
    swift_bridgeObjectRelease();
    v13 = v14;
  }
  v30 = MEMORY[0x1E0DEE9D8];
  v31[0] = sub_1B1B95F7C(MEMORY[0x1E0DEE9D8]);
  if (!(v13 >> 62))
  {
    v15 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain_n();
    if (v15)
      goto LABEL_5;
LABEL_14:
    swift_bridgeObjectRelease_n();
    v21 = MEMORY[0x1E0DEE9D8];
LABEL_15:
    if (v21 >> 62)
    {
      swift_bridgeObjectRetain();
      v22 = sub_1B22296AC();
      swift_bridgeObjectRelease();
      if (v22)
        goto LABEL_17;
    }
    else if (*(_QWORD *)((v21 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_17:
      sub_1B19F4AF4(v21);
      goto LABEL_20;
    }
    swift_bridgeObjectRelease();
    goto LABEL_20;
  }
  swift_bridgeObjectRetain_n();
  v15 = sub_1B22296AC();
  if (!v15)
    goto LABEL_14;
LABEL_5:
  v24 = a4;
  v16 = 0;
  v17 = v13 & 0xC000000000000001;
  v18 = a5 & 1;
  v19 = v13;
  while (1)
  {
    if (v17)
    {
      v20 = MEMORY[0x1B5E21018](v16, v13);
    }
    else
    {
      v20 = *(_QWORD *)(v13 + 8 * v16 + 32);
      swift_retain();
    }
    a8(v20, a3 & 1, v24, v18, a6, a1, a2, v31, a7, &v30);
    if (v9)
      break;
    swift_release();
    swift_release();
    ++v16;
    v13 = v19;
    if (v15 == v16)
    {
      swift_bridgeObjectRelease_n();
      v21 = v30;
      goto LABEL_15;
    }
  }
  swift_bridgeObjectRelease_n();
  swift_release();
  swift_bridgeObjectRelease();
LABEL_20:
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B1C5E280(uint64_t a1, uint64_t a2, int a3, unint64_t a4, int a5, unint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t result;
  _QWORD v31[7];
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38[2];
  _QWORD v39[2];

  v9 = v8;
  v36 = a6;
  v37 = a7;
  v10 = a5;
  v12 = a3;
  v34 = a1;
  v35 = a2;
  v39[1] = *MEMORY[0x1E0C80C00];
  v13 = *(_QWORD *)(v7 + 16);
  v14 = MEMORY[0x1E0DEE9D8];
  if (a4 == 0x1000000000000000)
  {
    swift_bridgeObjectRetain();
    goto LABEL_5;
  }
  LODWORD(v33) = a3;
  LODWORD(v32) = a5;
  v39[0] = MEMORY[0x1E0DEE9D8];
  v15 = swift_allocObject();
  *(_QWORD *)(v15 + 16) = v13;
  MEMORY[0x1E0C80A78](v15, v16);
  v31[6] = v39;
  MEMORY[0x1E0C80A78](v17, v18);
  v31[2] = sub_1B1C7A1B0;
  v31[3] = v19;
  swift_bridgeObjectRetain_n();
  v38[0] = sub_1B1C6D068(v14);
  v38[1] = v20;
  sub_1B1C5CC00((uint64_t)sub_1B1C785A8, (uint64_t)v31, 1, 0x1000000000000000uLL, 0, v14, v38);
  if (!v8)
  {
    v9 = 0;
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v13 = v39[0];
    v10 = v32;
    v12 = v33;
LABEL_5:
    v38[0] = (uint64_t)sub_1B1B95F7C(v14);
    v39[0] = v14;
    if (v13 >> 62)
    {
      swift_bridgeObjectRetain_n();
      v21 = sub_1B22296AC();
      if (v21)
      {
LABEL_7:
        v32 = v7 + 16;
        v33 = a4;
        v22 = 0;
        v23 = v12 & 1;
        v24 = v13 & 0xC000000000000001;
        v25 = v10 & 1;
        v26 = v13;
        while (1)
        {
          if (v24)
          {
            v27 = (_QWORD *)MEMORY[0x1B5E21018](v22, v13);
          }
          else
          {
            v27 = *(_QWORD **)(v13 + 8 * v22 + 32);
            swift_retain();
          }
          sub_1B1C54F20(v27, v23, v33, v25, v36, v34, v35, v38, v37, (uint64_t)v39);
          if (v9)
            break;
          swift_release();
          ++v22;
          v13 = v26;
          if (v21 == v22)
          {
            swift_bridgeObjectRelease_n();
            v28 = v39[0];
            goto LABEL_17;
          }
        }
        swift_bridgeObjectRelease_n();
        swift_release();
        swift_bridgeObjectRelease();
        goto LABEL_22;
      }
    }
    else
    {
      v21 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain_n();
      if (v21)
        goto LABEL_7;
    }
    swift_bridgeObjectRelease_n();
    v28 = MEMORY[0x1E0DEE9D8];
LABEL_17:
    if (v28 >> 62)
    {
      swift_bridgeObjectRetain();
      v29 = sub_1B22296AC();
      swift_bridgeObjectRelease();
      if (v29)
        goto LABEL_19;
    }
    else if (*(_QWORD *)((v28 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_19:
      sub_1B19F4B18(v28);
LABEL_22:
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    goto LABEL_22;
  }
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  __break(1u);
  return result;
}

uint64_t sub_1B1C5E610(uint64_t a1, uint64_t a2, char a3, unint64_t a4, char a5, unint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char v17;
  unint64_t v18;
  char v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v25;
  unint64_t v30;
  uint64_t v31[2];

  v31[1] = *MEMORY[0x1E0C80C00];
  v12 = *(_QWORD *)(v7 + 24);
  swift_bridgeObjectRetain();
  if (a4 != 0x1000000000000000)
  {
    v13 = sub_1B1C6D384(v12);
    swift_bridgeObjectRelease();
    v12 = v13;
  }
  v30 = MEMORY[0x1E0DEE9D8];
  v31[0] = (uint64_t)sub_1B1B95F7C(MEMORY[0x1E0DEE9D8]);
  if (!(v12 >> 62))
  {
    v14 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain_n();
    if (v14)
      goto LABEL_5;
LABEL_14:
    swift_bridgeObjectRelease_n();
    v22 = MEMORY[0x1E0DEE9D8];
LABEL_15:
    if (v22 >> 62)
    {
      swift_bridgeObjectRetain();
      v23 = sub_1B22296AC();
      swift_bridgeObjectRelease();
      if (v23)
        goto LABEL_17;
    }
    else if (*(_QWORD *)((v22 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_17:
      sub_1B19F4AF4(v22);
      goto LABEL_20;
    }
    swift_bridgeObjectRelease();
    goto LABEL_20;
  }
  swift_bridgeObjectRetain_n();
  v14 = sub_1B22296AC();
  if (!v14)
    goto LABEL_14;
LABEL_5:
  v25 = v14;
  v15 = a4;
  v16 = 0;
  v17 = a3 & 1;
  v18 = v12 & 0xC000000000000001;
  v19 = a5 & 1;
  v20 = v12;
  while (1)
  {
    if (v18)
    {
      v21 = MEMORY[0x1B5E21018](v16, v12);
    }
    else
    {
      v21 = *(_QWORD *)(v12 + 8 * v16 + 32);
      swift_retain();
    }
    sub_1B1C553E0(v21, v17, v15, v19, a6, a1, a2, v31, a7, (uint64_t)&v30);
    if (v8)
      break;
    swift_release();
    ++v16;
    v12 = v20;
    if (v25 == v16)
    {
      swift_bridgeObjectRelease_n();
      v22 = v30;
      goto LABEL_15;
    }
  }
  swift_bridgeObjectRelease_n();
  swift_release();
  swift_bridgeObjectRelease();
LABEL_20:
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B1C5E894(uint64_t a1, uint64_t *a2, uint64_t a3, char a4, unint64_t a5, char a6, unint64_t a7, uint64_t a8, uint64_t a9, uint64_t *a10, uint64_t *a11)
{
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  _QWORD *v19;
  char v21;
  uint64_t v25;
  uint64_t v26;

  v26 = a8;
  v14 = *a2;
  if (!((unint64_t)*a2 >> 62))
  {
    v15 = *(_QWORD *)((v14 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain_n();
    if (v15)
      goto LABEL_3;
    return swift_bridgeObjectRelease_n();
  }
  swift_bridgeObjectRetain_n();
  v15 = sub_1B22296AC();
  if (!v15)
    return swift_bridgeObjectRelease_n();
LABEL_3:
  v16 = 0;
  v21 = a4 & 1;
  v17 = a6 & 1;
  while (1)
  {
    v18 = v15;
    if ((v14 & 0xC000000000000001) != 0)
    {
      v19 = (_QWORD *)MEMORY[0x1B5E21018](v16, v14);
    }
    else
    {
      v19 = *(_QWORD **)(v14 + 8 * v16 + 32);
      swift_retain();
    }
    sub_1B1C52E1C(&v25, v19, v21, a5, v17, a7, v26, a9, a10, a11, a1);
    if (v11)
      break;
    ++v16;
    sub_1B1BCCCA8(v25);
    swift_release();
    v15 = v18;
    if (v18 == v16)
      return swift_bridgeObjectRelease_n();
  }
  swift_bridgeObjectRelease_n();
  return swift_release();
}

uint64_t sub_1B1C5EA2C(uint64_t a1, uint64_t *a2, uint64_t a3, char a4, unint64_t a5, char a6, unint64_t a7, uint64_t a8, uint64_t a9, uint64_t *a10, uint64_t *a11)
{
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v20;
  _OWORD v24[9];
  char v25;
  _OWORD v26[9];
  char v27;
  uint64_t v28;

  v28 = a8;
  v14 = *a2;
  if ((unint64_t)*a2 >> 62)
  {
    swift_bridgeObjectRetain_n();
    v15 = sub_1B22296AC();
    if (v15)
      goto LABEL_3;
    return swift_bridgeObjectRelease_n();
  }
  v15 = *(_QWORD *)((v14 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain_n();
  if (!v15)
    return swift_bridgeObjectRelease_n();
LABEL_3:
  v16 = 0;
  v20 = v15 - 1;
  v17 = a6 & 1;
  if ((v14 & 0xC000000000000001) == 0)
    goto LABEL_5;
LABEL_4:
  v18 = MEMORY[0x1B5E21018](v16, v14);
  while (1)
  {
    sub_1B1C53E1C(v18, a4 & 1, a5, v17, a7, v28, a9, a10, (uint64_t)v26, a11, a1);
    if (v11)
      break;
    v24[6] = v26[6];
    v24[7] = v26[7];
    v24[8] = v26[8];
    v25 = v27;
    v24[2] = v26[2];
    v24[3] = v26[3];
    v24[4] = v26[4];
    v24[5] = v26[5];
    v24[0] = v26[0];
    v24[1] = v26[1];
    sub_1B19ED720((uint64_t)v24);
    swift_release();
    if (v20 == v16)
      return swift_bridgeObjectRelease_n();
    ++v16;
    if ((v14 & 0xC000000000000001) != 0)
      goto LABEL_4;
LABEL_5:
    v18 = *(_QWORD *)(v14 + 8 * v16 + 32);
    swift_retain();
  }
  swift_bridgeObjectRelease_n();
  return swift_release();
}

uint64_t sub_1B1C5EBE4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  void (*v8)(_QWORD *__return_ptr, uint64_t);
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[6];
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v8 = *(void (**)(_QWORD *__return_ptr, uint64_t))(**(_QWORD **)(a3 + OBJC_IVAR____TtC3VFX13AuthoringNode_raw)
                                                            + 152);
  v9 = swift_retain();
  v8(v30, v9);
  v10 = v30[0];
  v35 = v30[1];
  v36 = v30[0];
  sub_1B1B28C6C((uint64_t)&v35);
  v34 = v30[2];
  sub_1B1B28C6C((uint64_t)&v34);
  v33 = v30[3];
  sub_1B1B28C6C((uint64_t)&v33);
  v32 = v30[4];
  sub_1B1B28C6C((uint64_t)&v32);
  v31 = v30[5];
  sub_1B1B28C6C((uint64_t)&v31);
  v11 = *(_QWORD *)(v10 + 16);
  sub_1B1B28C6C((uint64_t)&v36);
  v12 = OBJC_IVAR____TtC3VFX13AuthoringNode_inputs;
  if (*(_QWORD *)(*(_QWORD *)(a3 + OBJC_IVAR____TtC3VFX13AuthoringNode_inputs) + 16) <= v11)
    v13 = v11;
  else
    v13 = *(_QWORD *)(*(_QWORD *)(a3 + OBJC_IVAR____TtC3VFX13AuthoringNode_inputs) + 16);
  swift_retain();
  v14 = sub_1B2134084(0, v13, a3);
  swift_release();
  v15 = sub_1B1C4FEC0(v14, a4);
  swift_bridgeObjectRelease();
  v16 = *(_QWORD *)(v15 + 16);
  if (v16)
  {
    v26 = v12;
    v27 = a1;
    v28 = a2;
    v29 = MEMORY[0x1E0DEE9D8];
    sub_1B202A210(0, v16, 0);
    v17 = 0;
    v18 = v29;
    v19 = *(_QWORD *)(v29 + 16);
    v20 = 16 * v19;
    do
    {
      v21 = *(_QWORD *)(v15 + v17 + 32);
      if (v21)
        v22 = *(_QWORD *)(v15 + v17 + 40);
      else
        v22 = 0;
      v23 = *(_QWORD *)(v29 + 24);
      swift_retain();
      if (v19 >= v23 >> 1)
        sub_1B202A210(v23 > 1, v19 + 1, 1);
      *(_QWORD *)(v29 + 16) = v19 + 1;
      v24 = v29 + v20 + v17;
      *(_QWORD *)(v24 + 32) = v21;
      *(_QWORD *)(v24 + 40) = v22;
      v17 += 16;
      ++v19;
      --v16;
    }
    while (v16);
    swift_bridgeObjectRelease();
    a2 = v28;
    v12 = v26;
    a1 = v27;
  }
  else
  {
    swift_bridgeObjectRelease();
    v18 = MEMORY[0x1E0DEE9D8];
  }
  *(_QWORD *)(a3 + v12) = v18;
  swift_bridgeObjectRelease();
  *a1 = a3;
  return a2;
}

uint64_t sub_1B1C5EE04(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t *v4;
  uint64_t v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v31;

  v4 = a4;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 + 16);
  v7 = MEMORY[0x1E0DEE9D8];
  if (v6)
  {
    v31 = MEMORY[0x1E0DEE9D8];
    swift_retain();
    swift_bridgeObjectRetain();
    sub_1B202A2C8(0, v6, 0);
    v8 = 0;
    v9 = v31;
    v10 = *(_QWORD *)(v31 + 16);
    v11 = 16 * v10;
    do
    {
      v13 = *(_QWORD *)(v5 + v8 + 32);
      v12 = *(_QWORD *)(v5 + v8 + 40);
      v14 = *(_QWORD *)(v31 + 24);
      swift_retain();
      if (v10 >= v14 >> 1)
        sub_1B202A2C8(v14 > 1, v10 + 1, 1);
      *(_QWORD *)(v31 + 16) = v10 + 1;
      v15 = v31 + v11 + v8;
      *(_QWORD *)(v15 + 32) = v13;
      *(_QWORD *)(v15 + 40) = v12;
      v8 += 16;
      ++v10;
      --v6;
    }
    while (v6);
    swift_bridgeObjectRelease();
    v7 = MEMORY[0x1E0DEE9D8];
    v4 = a4;
  }
  else
  {
    swift_retain();
    v9 = MEMORY[0x1E0DEE9D8];
  }
  v16 = sub_1B1C50BE0(v9, v4);
  swift_bridgeObjectRelease();
  v17 = *(_QWORD *)(v16 + 16);
  if (v17)
  {
    sub_1B202A29C(0, v17, 0);
    v18 = 0;
    v19 = v7;
    v20 = *(_QWORD *)(v7 + 16);
    v21 = 16 * v20;
    do
    {
      v23 = *(_QWORD *)(v16 + v18 + 32);
      v22 = *(_QWORD *)(v16 + v18 + 40);
      v24 = *(_QWORD *)(v19 + 24);
      swift_retain();
      if (v20 >= v24 >> 1)
        sub_1B202A29C(v24 > 1, v20 + 1, 1);
      *(_QWORD *)(v19 + 16) = v20 + 1;
      v25 = v19 + v21 + v18;
      *(_QWORD *)(v25 + 32) = v23;
      *(_QWORD *)(v25 + 40) = v22;
      v18 += 16;
      ++v20;
      --v17;
    }
    while (v17);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    v19 = MEMORY[0x1E0DEE9D8];
  }
  *(_QWORD *)(a3 + 16) = v19;
  swift_bridgeObjectRelease();
  *a1 = a3;
  return a2;
}

__n128 sub_1B1C5F024@<Q0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, _OWORD *a5@<X5>, uint64_t *a6@<X6>, uint64_t a7@<X8>)
{
  uint64_t v13;
  int v14;
  int v15;
  void *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  int8x16_t v27;
  unsigned int v28;
  uint64_t v29;
  __n128 result;
  __n128 v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  uint64_t *v39;
  __int128 v40;
  uint64_t v41;
  __int128 v42;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __n128 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int8x16_t v56;
  id v57;
  uint64_t v58;
  uint64_t v59;

  type metadata accessor for ConstantNode(0);
  v13 = swift_dynamicCastClass();
  v41 = a3;
  if (v13)
  {
    sub_1B1A02864(v13 + OBJC_IVAR____TtC3VFX12ConstantNode_holder + 8, (uint64_t)&v45);
  }
  else
  {
    v45 = 0u;
    v46 = 0u;
  }
  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BB150, MEMORY[0x1E0DEE9B8] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  sub_1B19F8E54(0, (unint64_t *)&qword_1ED4BB0E0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDDA8]);
  swift_retain();
  v14 = swift_dynamicCast();
  v15 = v14;
  if (v14)
  {
    v34 = v54;
    v36 = v55;
  }
  else
  {
    v36 = 0;
    v34 = 0;
    v54 = 0;
    v55 = 0;
  }
  v56.i8[0] = v14 ^ 1;
  swift_release();
  swift_retain();
  v16 = (void *)sub_1B2076718();
  swift_release();
  v17 = objc_msgSend(v16, sel_nodeRef);

  v18 = swift_dynamicCastClass();
  if (v18)
  {
    sub_1B1A02864(v18 + OBJC_IVAR____TtC3VFX12ConstantNode_holder + 8, (uint64_t)&v45);
  }
  else
  {
    v45 = 0u;
    v46 = 0u;
  }
  swift_retain();
  if (swift_dynamicCast())
  {
    LOBYTE(v55) = 0;
    v32 = v54;
  }
  else
  {
    v32 = 0;
  }
  swift_release();
  v19 = swift_dynamicCastClass();
  if (v19)
  {
    sub_1B1A02864(v19 + OBJC_IVAR____TtC3VFX12ConstantNode_holder + 8, (uint64_t)&v45);
  }
  else
  {
    v45 = 0u;
    v46 = 0u;
  }
  swift_retain();
  v39 = a2;
  v20 = a6;
  if (swift_dynamicCast())
  {
    LOBYTE(v55) = 0;
    v21 = v54;
  }
  else
  {
    v21 = 0;
  }
  swift_release();
  v22 = swift_dynamicCastClass();
  if (v22)
  {
    sub_1B1A02864(v22 + OBJC_IVAR____TtC3VFX12ConstantNode_holder + 8, (uint64_t)&v45);
  }
  else
  {
    v45 = 0u;
    v46 = 0u;
  }
  v23 = v41;
  swift_retain();
  if (swift_dynamicCast())
  {
    v24 = v54 & 1;
  }
  else
  {
    v24 = 0;
    LOBYTE(v54) = 2;
  }
  v25 = swift_release();
  if (v41)
  {
    v26 = a4;
    if (a4)
      goto LABEL_27;
  }
  else
  {
    v25 = static RGResource.null.getter(v25);
    v23 = v25;
    v26 = a4;
    if (a4)
      goto LABEL_27;
  }
  v26 = static RGResource.null.getter(v25);
LABEL_27:
  v27.i64[0] = v34;
  v27.i64[1] = v36;
  if (v15)
    v28 = -1;
  else
    v28 = 0;
  LOWORD(v54) = 257;
  BYTE2(v54) = v24;
  v56 = vandq_s8(v27, (int8x16_t)vdupq_n_s32(v28));
  v57 = v17;
  v58 = v32;
  v59 = v21;
  sub_1B191DB0C(v20, a1, v39, (uint64_t)&v54, v23, v26, a5, (uint64_t)&v45);
  v29 = v53;
  v42 = v46;
  v44 = v45;
  v38 = v48;
  v40 = v47;
  v35 = v50;
  v37 = v49;
  v31 = v52;
  v33 = v51;

  *(_OWORD *)a7 = v44;
  *(_OWORD *)(a7 + 16) = v42;
  *(_OWORD *)(a7 + 32) = v40;
  *(_OWORD *)(a7 + 48) = v38;
  *(_OWORD *)(a7 + 64) = v37;
  *(_OWORD *)(a7 + 80) = v35;
  result = v31;
  *(_OWORD *)(a7 + 96) = v33;
  *(__n128 *)(a7 + 112) = v31;
  *(_QWORD *)(a7 + 128) = v29;
  return result;
}

id sub_1B1C5F454()
{
  return (id)sub_1B1C5F468();
}

uint64_t sub_1B1C5F468()
{
  _QWORD *v0;
  unint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);
  uint64_t inited;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;
  uint64_t i;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  unint64_t v19;
  uint64_t v20;

  type metadata accessor for AuthoringGraph();
  v0 = (_QWORD *)swift_allocObject();
  v1 = MEMORY[0x1E0DEE9D8];
  v0[2] = 0;
  v0[3] = v1;
  v0[4] = 0;
  v0[5] = 0;
  v0[6] = sub_1B1B7DC90(v1);
  type metadata accessor for PresentNode(0);
  v2 = (_QWORD *)swift_allocObject();
  v2[3] = 0;
  v2[4] = 0;
  v2[2] = v1;
  sub_1B2228260();
  v3 = sub_1B2131AC8(sub_1B1C5F8A0, 0, sub_1B1A237B0, 0);
  swift_release();
  v4 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8];
  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226E440;
  *(_QWORD *)(inited + 32) = v3;
  v19 = inited;
  sub_1B2228AD0();
  sub_1B1791524(0, &qword_1EEF5CAA8, (uint64_t (*)(uint64_t))sub_1B1C6BD14, v4);
  v6 = swift_initStackObject();
  *(_OWORD *)(v6 + 16) = xmmword_1B226D240;
  v7 = sub_1B1C51570(v19);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v6 + 32) = v7;
  v8 = *(_QWORD *)(v7 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v9 = MEMORY[0x1B5E21024](0, v8, 1, v1);
  swift_bridgeObjectRelease();
  v20 = v9;
  if (*(_QWORD *)(v7 + 16))
  {
    v10 = v9 + 8 * *(_QWORD *)(v9 + 16) + 32;
    if (v7 + 32 < v10 + 8 * v8 && v10 < v7 + 32 + 8 * v8)
    {
      result = sub_1B2229700();
      __break(1u);
      return result;
    }
    sub_1B1C6BD30(0);
    swift_arrayInitWithCopy();
    if (v8)
      *(_QWORD *)(v20 + 16) += v8;
  }
  swift_bridgeObjectRelease();
  sub_1B2228AD0();
  swift_bridgeObjectRelease();
  v12 = *(_QWORD *)(v20 + 16);
  if (v12)
  {
    swift_bridgeObjectRetain();
    for (i = 0; i != v12; ++i)
    {
      if (*(_QWORD *)(v20 + 8 * i + 32))
      {
        v14 = swift_retain();
        MEMORY[0x1B5E2064C](v14);
        if (*(_QWORD *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          sub_1B2228AF4();
        sub_1B2228B30();
        sub_1B2228AD0();
      }
    }
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_setDeallocating();
  sub_1B1C6BD14(0);
  swift_arrayDestroy();
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain();
    v15 = sub_1B22296AC();
    swift_bridgeObjectRelease();
    if (v15)
    {
LABEL_19:
      v16 = 0;
      do
      {
        if ((v1 & 0xC000000000000001) != 0)
          MEMORY[0x1B5E21018](v16, v1);
        else
          swift_retain();
        v17 = swift_retain();
        MEMORY[0x1B5E2064C](v17);
        if (*(_QWORD *)((v0[3] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v0[3] & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          sub_1B2228AF4();
        ++v16;
        sub_1B2228B30();
        sub_1B2228AD0();
        swift_release();
      }
      while (v15 != v16);
    }
  }
  else
  {
    v15 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v15)
      goto LABEL_19;
  }
  swift_bridgeObjectRelease();
  sub_1B1C240E8(1, 1);
  return (uint64_t)v0;
}

uint64_t sub_1B1C5F8A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t inited;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[8];

  v11[7] = *MEMORY[0x1E0C80C00];
  sub_1B1791524(0, (unint64_t *)&qword_1ED4B7B50, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v0, v1);
  v3 = (char *)v11 - v2;
  type metadata accessor for RenderWorldNode(0);
  v4 = (_QWORD *)swift_allocObject();
  v5 = MEMORY[0x1E0DEE9D8];
  v4[3] = 0;
  v4[4] = 0;
  v4[2] = v5;
  sub_1B2228260();
  sub_1B1C79230();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  v7 = sub_1B222826C();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v3, 1, 1, v7);
  type metadata accessor for AuthoringNode();
  swift_allocObject();
  v8 = swift_retain();
  v9 = sub_1B20E4E94(v8, v5, (uint64_t)v3, 0, 0xF000000000000000);
  swift_release();
  *(_QWORD *)(inited + 32) = v9;
  *(_QWORD *)(inited + 40) = 0;
  swift_release();
  v11[0] = v5;
  sub_1B19F5520(inited);
  return v11[0];
}

_QWORD *sub_1B1C5FA24()
{
  _QWORD *v0;

  swift_unknownObjectRetain();
  v0 = sub_1B2147E80(1);
  swift_unknownObjectRelease();
  return v0;
}

id sub_1B1C5FA5C(void *a1, uint64_t a2, _QWORD *a3)
{
  id v5;
  void *v6;

  v5 = a1;
  swift_unknownObjectRetain();
  v6 = (void *)sub_1B1C5FAB8(v5, a2, a3);

  swift_unknownObjectRelease();
  return v6;
}

uint64_t sub_1B1C5FAB8(void *a1, uint64_t a2, _QWORD *a3)
{
  objc_class *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  id v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v23;
  _QWORD v24[6];
  objc_super v25;

  v6 = (objc_class *)type metadata accessor for RenderGraphDiagnostics();
  v7 = (char *)objc_allocWithZone(v6);
  *(_QWORD *)&v7[OBJC_IVAR____TtC3VFX22RenderGraphDiagnostics_rendererInfo] = 0;
  v8 = OBJC_IVAR____TtC3VFX22RenderGraphDiagnostics_texturePreviewsByNodeID;
  swift_unknownObjectRetain();
  v9 = v7;
  v10 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)&v7[v8] = sub_1B1B80B00(MEMORY[0x1E0DEE9D8]);
  *(_QWORD *)&v9[OBJC_IVAR____TtC3VFX22RenderGraphDiagnostics_graphID] = a2;

  v25.receiver = v9;
  v25.super_class = v6;
  v11 = objc_msgSendSuper2(&v25, sel_init);
  v12 = (char *)objc_msgSend(a1, sel_scene);
  v13 = *(_QWORD *)&v12[OBJC_IVAR____TtC3VFX8VFXScene_entityManager];
  swift_retain();

  v14 = *(_QWORD *)(v13 + OBJC_IVAR____TtC3VFX13EntityManager_replicationStream);
  if (v14 && (swift_retain(), swift_release(), *(_QWORD *)(v14 + 24)))
  {
    swift_unknownObjectRetain();
    swift_release();
    v15 = sub_1B1E33D20();
    v16 = swift_unknownObjectRelease();
    MEMORY[0x1E0C80A78](v16, v17);
    v24[2] = v15;
    v24[3] = &off_1E6376550;
    swift_retain();
    v18 = sub_1B1C5A714((uint64_t)sub_1B1A055F8, (uint64_t)v24, 0, 0x1000000000000000uLL, 1, v10);
    v20 = sub_1B1C6A134(v18, v19, (void (*)(uint64_t *__return_ptr, uint64_t *))sub_1B1BE20A4);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    type metadata accessor for AuthoringGraph();
    v21 = (_QWORD *)swift_allocObject();
    v21[2] = 0;
    v21[3] = v10;
    v21[4] = 0;
    v21[5] = 0;
    v21[6] = sub_1B1B7DC90(v10);
    v21[3] = v20;
    swift_release();
    v23 = sub_1B20386D4(1, v11);
    swift_release();
    swift_release();
    if (a3)
    {
      *a3 = v11;
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
    }
    else
    {
      swift_unknownObjectRelease();

    }
  }
  else
  {
    swift_release();
    if (a3)
    {
      *a3 = v11;
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
    }
    else
    {
      swift_unknownObjectRelease();

    }
    return 0;
  }
  return v23;
}

uint64_t sub_1B1C5FD80(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t *__return_ptr, uint64_t);
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  type metadata accessor for RenderGraphNode(0);
  v3 = swift_dynamicCastClass();
  if (v3)
  {
    v4 = v3;
    v5 = *(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v1 + 152);
    v6 = swift_retain();
    v5(&v13, v6);
    v7 = v14;
    v23 = v13;
    v24 = v14;
    sub_1B1B28C6C((uint64_t)&v23);
    v22 = v15;
    sub_1B1B28C6C((uint64_t)&v22);
    v21 = v16;
    sub_1B1B28C6C((uint64_t)&v21);
    v20 = v17;
    sub_1B1B28C6C((uint64_t)&v20);
    v19 = v18;
    sub_1B1B28C6C((uint64_t)&v19);
    v8 = *(_QWORD *)(v7 + 8 * a1 + 32);
    sub_1B19F8CD0(v8);
    v9 = sub_1B1B28C6C((uint64_t)&v24);
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 248))(v9);
    if (a1 < 0 || *(_QWORD *)(v10 + 16) <= a1)
    {
      sub_1B19F8D00(v8);
      swift_release();
      swift_bridgeObjectRelease();
      return 3;
    }
    else
    {
      v11 = *(unsigned __int8 *)(v10 + a1 + 32);
      sub_1B19F8D00(v8);
      swift_bridgeObjectRelease();
      swift_release();
    }
    return v11;
  }
  else
  {
    sub_1B2229430();
    sub_1B1BCE95C();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    result = sub_1B2229688();
    __break(1u);
  }
  return result;
}

void sub_1B1C5FF4C(void *a1, void *a2)
{
  id v3;
  id v4;

  v3 = a1;
  v4 = a2;
  sub_1B1C5FF94((uint64_t)v3, (uint64_t)a2);

}

uint64_t sub_1B1C5FF94(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t ObjectType;

  result = sub_1B1B0D708(&unk_1EEF5AA30);
  if (result)
  {
    v4 = MEMORY[0x1B5E240CC](result + 16);
    result = swift_release();
    if (v4)
    {
      swift_getObjectType();
      if (swift_conformsToProtocol2())
        v5 = v4;
      else
        v5 = 0;
      if (v5)
      {
        swift_getObjectType();
        v6 = swift_conformsToProtocol2();
        if (v6)
          v7 = v6;
        else
          v7 = 0;
        if (!v6)
          v5 = 0;
        if (v5)
        {
          ObjectType = swift_getObjectType();
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 24))(a2, ObjectType, v7);
        }
      }
      return swift_unknownObjectRelease();
    }
  }
  return result;
}

uint64_t sub_1B1C6005C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v7 = a5;
  *(_BYTE *)(v6 + 72) = 1;
  *(_QWORD *)(v6 + 80) = MEMORY[0x1E0DEE9E8];
  *(_QWORD *)(v6 + 16) = a3;
  *(_QWORD *)(v6 + 24) = a4;
  *(_QWORD *)(v6 + 32) = a5;
  *(_QWORD *)(v6 + 40) = a6;
  *(_QWORD *)(v6 + 56) = a1;
  *(_QWORD *)(v6 + 64) = a2;
  swift_retain();
  v9 = a4;
  swift_unknownObjectRetain();
  v17 = (id)sub_1B1813884(v7, v10, v11, v12, v13, v14, v15, v16);
  *(_QWORD *)(v6 + 48) = *(_QWORD *)((char *)(id)sub_1B187A9C4((uint64_t)v17, v18, v19, v20, v21, v22, v23, v24)+ OBJC_IVAR____TtC3VFX8VFXScene_entityManager);
  swift_retain();
  BYTE1(v7) = (unsigned __int16)sub_1B1807C54(v7) >> 8;
  swift_unknownObjectRelease();
  swift_release();

  swift_unknownObjectRelease();
  *(_BYTE *)(v6 + 72) = BYTE1(v7) & 1;
  return v6;
}

uint64_t sub_1B1C60148(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  _QWORD *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  id v26;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD v33[2];

  v10 = type metadata accessor for GraphError();
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (_QWORD *)((char *)v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = a1 + OBJC_IVAR____TtC3VFX4Node_authoringID;
  v16 = (char *)v13 + *(int *)(v15 + 20);
  v17 = sub_1B222826C();
  v18 = *(_QWORD *)(v17 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v16, v14, v17);
  *v13 = 0;
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v16, 0, 1, v17);
  v19 = (char *)v13 + *(int *)(v10 + 24);
  *(_QWORD *)v19 = a2;
  v19[8] = a3 & 1 | 0x60;
  v20 = (_QWORD *)((char *)v13 + *(int *)(v10 + 28));
  *v20 = a4;
  v20[1] = a5;
  v21 = *(_QWORD *)(v33[1] + 24);
  sub_1B1BE2940();
  v22 = (void *)swift_allocError();
  sub_1B1BE2A1C((uint64_t)v13, v23);
  v24 = OBJC_IVAR____TtC3VFX16GraphDiagnostics_diagnostics;
  v25 = *(_QWORD **)(v21 + OBJC_IVAR____TtC3VFX16GraphDiagnostics_diagnostics);
  swift_bridgeObjectRetain();
  v26 = v22;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v21 + v24) = v25;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v25 = sub_1B1C63944(0, v25[2] + 1, 1, v25);
    *(_QWORD *)(v21 + v24) = v25;
  }
  v29 = v25[2];
  v28 = v25[3];
  if (v29 >= v28 >> 1)
  {
    v25 = sub_1B1C63944(v28 > 1, v29 + 1, 1, v25);
    *(_QWORD *)(v21 + v24) = v25;
  }
  v25[2] = v29 + 1;
  v25[v29 + 4] = v22;

  v30 = swift_allocError();
  sub_1B1A025EC((uint64_t)v13, v31, (uint64_t (*)(_QWORD))type metadata accessor for GraphError);
  return v30;
}

uint64_t sub_1B1C6034C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, size_t a11)
{
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t);
  uint64_t v24;
  char v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned __int8 v30;
  double v31;
  char v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t (*v42)(uint64_t);
  void (*v43)(uint64_t);
  uint64_t v44;
  uint64_t v45;
  void (*v46)(uint64_t);
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD v51[2];

  result = swift_weakLoadStrong();
  if (result)
  {
    v17 = result;
    v48 = a1;
    v49 = a2;
    v50 = a3;
    v18 = result + OBJC_IVAR____TtC3VFX13EntityManager_scriptingConfig;
    v19 = *(_QWORD *)(v18 + *(int *)(type metadata accessor for ScriptingConfiguration() + 36));
    v21 = a5[5];
    if ((~*((_DWORD *)a5 + 10) & 0xFCLL) != 0)
    {
      v23 = (uint64_t (*)(uint64_t))a5[2];
      v22 = a5[3];
      v24 = a5[4];
      v25 = v21 & 0x3F;
      if (v21 >> 6 != 1)
        v25 = a5[4];
      v26 = v21 >> 6 ? v25 : a5[5];
      if (v26 && (v26 == 1 || a5[6] >= v19))
      {
        sub_1B19F8C18(a5[2], a5[3], a5[4], a5[5]);
        v34 = v21 >> 6;
        if (!(v21 >> 6))
          goto LABEL_33;
        goto LABEL_32;
      }
    }
    thread_worker_index(v20);
    sub_1B1E6B02C(a6);
    if (v30 >= 0xFCu)
    {
      if (*(_BYTE *)(v17 + OBJC_IVAR____TtC3VFX13EntityManager_isInPrepare) == 1)
        return swift_release();
      v35 = *(_QWORD *)(v17 + OBJC_IVAR____TtC3VFX13EntityManager_logger);
      v51[1] = 0xE000000000000000;
      swift_retain();
      sub_1B2229430();
      sub_1B2228890();
      sub_1B22295EC();
      v36 = sub_1B2228E90();
      v51[0] = 0;
      (*(void (**)(uint64_t, _QWORD *, _QWORD, unint64_t))(*(_QWORD *)v35 + 88))(v36, v51, 0, 0xE000000000000000);
      swift_release();
      swift_release();
      return swift_bridgeObjectRelease();
    }
    v23 = (uint64_t (*)(uint64_t))v27;
    v22 = v28;
    v24 = v29;
    LOBYTE(v21) = v30;
    if (v30 >> 6)
    {
      if (v30 >> 6 == 1 || v29 == 0)
      {
LABEL_31:
        v34 = v21 >> 6;
        if (!(v21 >> 6))
          goto LABEL_33;
LABEL_32:
        if (v34 != 1)
        {
          v45 = *(_QWORD *)(*(_QWORD *)(v17 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues)
                          + 8 * *(_QWORD *)thread_worker_index(v31)
                          + 8);
          swift_retain();
          v42 = (uint64_t (*)(uint64_t))v23(v45);
          v43 = v46;
          v41 = sub_1B19F8CA0((uint64_t)v23, v22, v24, v21);
          if (v42)
          {
LABEL_34:
            v44 = RGBufferSlice.data.getter(v48, v49, v50);
            if ((a11 & 0x8000000000000000) != 0)
            {
              result = sub_1B2229700();
              __break(1u);
              return result;
            }
            v41 = (uint64_t)memmove((void *)(v44 + a10), v42, a11);
            if (v43)
            {
LABEL_36:
              v43(v41);
              sub_1B19F8CA0((uint64_t)v23, v22, v24, v21);
              swift_release();
              return sub_1B19E5A18((uint64_t)v43);
            }
LABEL_39:
            sub_1B19F8CA0((uint64_t)v23, v22, v24, v21);
            swift_release();
            return sub_1B19E5A18(0);
          }
LABEL_38:
          if (v43)
            goto LABEL_36;
          goto LABEL_39;
        }
LABEL_33:
        v41 = sub_1B19F8C48(v22);
        v42 = v23;
        v43 = (void (*)(uint64_t))v22;
        if (v23)
          goto LABEL_34;
        goto LABEL_38;
      }
      v33 = v29;
    }
    else
    {
      v33 = v30;
      if (!v30)
      {
        LOBYTE(v21) = 0;
        goto LABEL_33;
      }
    }
    if (v33)
    {
      if (v33 == 1)
        v37 = 0;
      else
        v37 = v19;
    }
    else
    {
      v37 = -1;
    }
    v38 = a5[2];
    v39 = a5[3];
    v40 = a5[4];
    v47 = a5[5];
    a5[2] = v27;
    a5[3] = v28;
    a5[4] = v29;
    a5[5] = v30;
    a5[6] = v37;
    sub_1B19F8C18(v27, v28, v29, v30);
    sub_1B19F8C8C(v38, v39, v40, v47);
    goto LABEL_31;
  }
  return result;
}

void sub_1B1C607B8(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  const CFX::RG::Resource *v12;
  CFX::GPUResourceManager *GPUResourceManager;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(_QWORD *);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[3];

  if (a3 == 1)
  {
    v6 = *(_QWORD *)(a5 + 16);
    if (v6)
    {
      v27 = a5 + 32;
      swift_bridgeObjectRetain();
      v9 = 0;
      v25 = v6;
      v26 = a2;
      do
      {
        v10 = (uint64_t *)(v27 + 16 * v9);
        v11 = *v10;
        v12 = (const CFX::RG::Resource *)v10[1];
        GPUResourceManager = (CFX::GPUResourceManager *)RGContextGetGPUResourceManager(a2);
        v16 = RGGPUResourceManager.getBuffer(_:)(v12, GPUResourceManager);
        if (*(_QWORD *)(a6 + 16))
        {
          v17 = v14;
          v18 = v15;
          v19 = sub_1B1DC3AC8(v11);
          if ((v20 & 1) != 0)
          {
            v21 = *(_QWORD *)(*(_QWORD *)(a6 + 56) + 8 * v19);
            v22 = *(_QWORD *)(v21 + 16);
            if (v22)
            {
              swift_bridgeObjectRetain();
              v23 = v21 + 40;
              do
              {
                v24 = *(void (**)(_QWORD *))(v23 - 8);
                v28[0] = v16;
                v28[1] = v17;
                v28[2] = v18;
                swift_retain();
                v24(v28);
                swift_release();
                v23 += 16;
                --v22;
              }
              while (v22);
              swift_bridgeObjectRelease();
              v6 = v25;
              a2 = v26;
            }
          }
        }
        ++v9;
        swift_unknownObjectRelease();
      }
      while (v9 != v6);
      swift_bridgeObjectRelease();
    }
  }
}

uint64_t sub_1B1C6090C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char *v3;
  uint64_t result;
  _QWORD v5[4];

  if ((a2 & 0x1000000000000000) == 0)
  {
    if ((a2 & 0x2000000000000000) != 0)
    {
      v5[0] = a1;
      v5[1] = a2 & 0xFFFFFFFFFFFFFFLL;
      v3 = (char *)v5;
      return RGResourceIdentifierMake(v3);
    }
    if ((a1 & 0x1000000000000000) != 0)
    {
      v3 = (char *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
      return RGResourceIdentifierMake(v3);
    }
  }
  result = sub_1B222940C();
  if (!v2)
    return v5[3];
  return result;
}

uint64_t sub_1B1C60998@<X0>(char *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = RGResourceIdentifierMake(a1);
  *a2 = result;
  return result;
}

uint64_t sub_1B1C609C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t GPUResourceManager;
  id v7;
  uint64_t Strong;
  uint64_t v9;

  GPUResourceManager = RGContextGetGPUResourceManager(a1);
  v7 = (id)RGGPUResourceManagerGetTexture(GPUResourceManager, a2);
  Strong = swift_weakLoadStrong();
  if (Strong)
  {
    v9 = Strong;
    swift_unknownObjectRetain();
    sub_1B1FE69F0(a4, v9, (uint64_t)v7);
    swift_release();
    swift_unknownObjectRelease();
  }
  return swift_unknownObjectRelease();
}

uint64_t sub_1B1C60A50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void (*v5)(uint64_t, uint64_t);

  v5 = *(void (**)(uint64_t, uint64_t))(a1 + 32);
  swift_retain();
  v5(a2, a3);
  return swift_release();
}

uint64_t sub_1B1C60A98(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  char v4;
  uint64_t v5;

  v1 = *(_QWORD *)(a1 + 48);
  swift_retain();
  v2 = sub_1B2076640();
  v4 = v3;
  swift_release();
  if ((v4 & 1) != 0)
    v5 = 0xFFFFFFFFLL;
  else
    v5 = v2;
  return sub_1B1FE0E28(v5, v1);
}

uint64_t sub_1B1C60B00(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t result;
  uint64_t v10;
  void (*v11)(_QWORD *__return_ptr, uint64_t);
  uint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  void *v41;
  unint64_t v42;
  uint64_t v43;
  double v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  unint64_t v54;
  uint64_t v55;
  id v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void (*v61)(_QWORD *__return_ptr, uint64_t);
  _OWORD v62[9];
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD v70[6];
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD v81[3];

  v81[1] = *MEMORY[0x1E0C80C00];
  v4 = sub_1B222826C();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v50 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for RenderGraphNode(0);
  result = swift_dynamicCastClass();
  if (result)
  {
    v10 = result;
    v11 = *(void (**)(_QWORD *__return_ptr, uint64_t))(*(_QWORD *)result + 152);
    v12 = swift_retain();
    v61 = v11;
    v11(&v64, v12);
    v81[0] = v65;
    v13 = *(_QWORD *)(v65 + 16);
    if (v13)
    {
      v50 = v8;
      v51 = v5;
      v52 = v4;
      v53 = (uint64_t *)a2;
      v14 = (_OWORD *)(a2 + 8);
      v15 = v65 + 32;
      swift_bridgeObjectRetain();
      v16 = 0;
      v57 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v59 = v15;
      v60 = a1;
      while (1)
      {
        v17 = *(_QWORD *)(v15 + 8 * v16);
        *(_QWORD *)(swift_allocObject() + 16) = 0x80000000000000A0;
        sub_1B19F8CD0(v17);
        sub_1B1D3590C(v17);
        v19 = v18;
        swift_release();
        if ((v19 & 1) != 0)
        {
          v20 = swift_retain();
          v61(v70, v20);
          v79 = v70[0];
          v80 = v70[1];
          sub_1B1B28C6C((uint64_t)&v79);
          v78 = v70[2];
          sub_1B1B28C6C((uint64_t)&v78);
          v77 = v70[3];
          sub_1B1B28C6C((uint64_t)&v77);
          v76 = v70[4];
          sub_1B1B28C6C((uint64_t)&v76);
          v75 = v70[5];
          sub_1B1B28C6C((uint64_t)&v75);
          v21 = *(_QWORD *)(v80 + 8 * v16 + 32);
          sub_1B19F8CD0(v21);
          v22 = sub_1B1B28C6C((uint64_t)&v80);
          v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 248))(v22);
          if (v16 >= *(_QWORD *)(v23 + 16))
          {
            sub_1B19F8D00(v21);
            swift_bridgeObjectRelease();
            swift_release();
          }
          else
          {
            v24 = *(unsigned __int8 *)(v23 + v16 + 32);
            sub_1B19F8D00(v21);
            swift_bridgeObjectRelease();
            swift_release();
            if (v24 != 3)
            {
              v25 = v14[5];
              v62[4] = v14[4];
              v62[5] = v25;
              v26 = v14[7];
              v62[6] = v14[6];
              v62[7] = v26;
              v27 = v14[1];
              v62[0] = *v14;
              v62[1] = v27;
              v28 = v14[3];
              v62[2] = v14[2];
              v62[3] = v28;
              v29 = *((_QWORD *)v62 + v16);
              if (RGResourceIsNull(v29))
              {
                result = sub_1B2229688();
                __break(1u);
                return result;
              }
              if (RGResourceIsTexture(v29))
              {
                v30 = sub_1B1C7774C(v29, v24);
                v31 = sub_1B1BCF868(v16, v68);
                if (v32)
                  v33 = v31;
                else
                  v33 = 63;
                v34 = 0xE100000000000000;
                if (v32)
                  v34 = v32;
                v54 = v34;
                v55 = v33;
                swift_unknownObjectRetain();
                v35 = v57;
                isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
                v56 = v30;
                if ((isUniquelyReferenced_nonNull_native & 1) == 0)
                  v35 = sub_1B1C674F8(0, v35[2] + 1, 1, v35);
                v38 = v35[2];
                v37 = v35[3];
                v39 = (_QWORD *)(v38 + 1);
                if (v38 >= v37 >> 1)
                {
                  v57 = (_QWORD *)(v38 + 1);
                  v45 = sub_1B1C674F8(v37 > 1, v38 + 1, 1, v35);
                  v39 = v57;
                  v35 = v45;
                }
                v35[2] = v39;
                v57 = v35;
                v40 = &v35[4 * v38];
                v41 = v56;
                v42 = v54;
                v40[4] = v55;
                v40[5] = v42;
                *((_BYTE *)v40 + 48) = v24;
                v40[7] = v41;
                v43 = *v53;
                v44 = sub_1B191E028(*(uint64_t **)(v58 + 64), v29, v41, (uint64_t)v62);
                RGPassDependsOn(*(_QWORD *)&v62[0], v43, v44);
                swift_unknownObjectRelease();
              }
            }
            v15 = v59;
          }
        }
        ++v16;
        sub_1B19F8D00(v17);
        if (v13 == v16)
        {
          sub_1B1B28C6C((uint64_t)v81);
          v5 = v51;
          v4 = v52;
          v8 = v50;
          v46 = (uint64_t)v57;
          goto LABEL_24;
        }
      }
    }
    v46 = MEMORY[0x1E0DEE9D8];
LABEL_24:
    *(_QWORD *)&v62[0] = v64;
    sub_1B1B28C6C((uint64_t)v62);
    sub_1B1B28C6C((uint64_t)v81);
    v74 = v66;
    sub_1B1B28C6C((uint64_t)&v74);
    v73 = v67;
    sub_1B1B28C6C((uint64_t)&v73);
    v72 = v68;
    sub_1B1B28C6C((uint64_t)&v72);
    v71 = v69;
    sub_1B1B28C6C((uint64_t)&v71);
    if (*(_QWORD *)(v46 + 16))
    {
      v47 = *(_QWORD *)(v58 + 24);
      (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, v10 + OBJC_IVAR____TtC3VFX4Node_authoringID, v4);
      v48 = OBJC_IVAR____TtC3VFX22RenderGraphDiagnostics_texturePreviewsByNodeID;
      v49 = swift_isUniquelyReferenced_nonNull_native();
      v63 = *(_QWORD *)(v47 + v48);
      *(_QWORD *)(v47 + v48) = 0x8000000000000000;
      sub_1B1B877E4(v46, (uint64_t)v8, v49);
      *(_QWORD *)(v47 + v48) = v63;
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
      return swift_release();
    }
    else
    {
      swift_release();
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

uint64_t sub_1B1C61030()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _OWORD v23[9];
  _OWORD v24[9];
  char v25;
  _OWORD v26[9];
  _OWORD v27[8];
  uint64_t v28;
  uint64_t v29;

  v2 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)&v24[0] = sub_1B1C71610(MEMORY[0x1E0DEE9D8]);
  *((_QWORD *)&v24[0] + 1) = v3;
  sub_1B1C5D934((uint64_t)sub_1B1C79548, v0, 1, 0x1000000000000000uLL, 0, v2, (uint64_t *)v24);
  if (v1)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    v5 = sub_1B1C6AF6C(*(uint64_t *)&v24[0], *((uint64_t *)&v24[0] + 1), (void (*)(__int128 *__return_ptr, uint64_t *))sub_1B1C6BF94);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((*(_BYTE *)(v0 + 72) & 1) != 0 && (v6 = v5[2]) != 0)
    {
      v29 = 0;
      v7 = v6 - 1;
      for (i = 4; ; i += 19)
      {
        v9 = *(_OWORD *)&v5[i + 2];
        v24[0] = *(_OWORD *)&v5[i];
        v24[1] = v9;
        v10 = *(_OWORD *)&v5[i + 4];
        v11 = *(_OWORD *)&v5[i + 6];
        v12 = *(_OWORD *)&v5[i + 10];
        v24[4] = *(_OWORD *)&v5[i + 8];
        v24[5] = v12;
        v24[2] = v10;
        v24[3] = v11;
        v13 = *(_OWORD *)&v5[i + 12];
        v14 = *(_OWORD *)&v5[i + 14];
        v15 = *(_OWORD *)&v5[i + 16];
        v25 = v5[i + 18];
        v24[7] = v14;
        v24[8] = v15;
        v24[6] = v13;
        v16 = *(_QWORD *)&v24[0];
        sub_1B1A18378((uint64_t)v24 + 8, (uint64_t)v26, &qword_1EEF61660, (uint64_t)&type metadata for GraphTranslateResult);
        if (sub_1B1C79560((uint64_t)v26) != 1)
        {
          sub_1B1C79574(v26, v23);
          v17 = sub_1B1C795AC((uint64_t)v23);
          nullsub_16(v23);
          if (v17 != 1)
          {
            v19 = *(_OWORD *)(v18 + 112);
            v27[6] = *(_OWORD *)(v18 + 96);
            v27[7] = v19;
            v28 = *(_QWORD *)(v18 + 128);
            v20 = *(_OWORD *)(v18 + 48);
            v27[2] = *(_OWORD *)(v18 + 32);
            v27[3] = v20;
            v21 = *(_OWORD *)(v18 + 80);
            v27[4] = *(_OWORD *)(v18 + 64);
            v27[5] = v21;
            v22 = *(_OWORD *)(v18 + 16);
            v27[0] = *(_OWORD *)v18;
            v27[1] = v22;
            sub_1B1B7C5AC((uint64_t)v24);
            sub_1B1C60B00(v16, (uint64_t)v27);
            sub_1B19ED720((uint64_t)v24);
          }
        }
        if (!v7)
          break;
        --v7;
      }
      return swift_release();
    }
    else
    {
      return swift_release();
    }
  }
}

uint64_t sub_1B1C61234@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  void (*v5)(uint64_t *__return_ptr, __int128 *);
  uint64_t result;
  int v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  uint64_t v15;
  unint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  int v19;
  _QWORD *v20;
  _QWORD *v21;
  double v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26[9];
  uint64_t v27;
  uint64_t v28;
  _BYTE v29[144];
  _OWORD v30[9];
  _BYTE v31[144];
  _OWORD v32[9];
  _OWORD v33[9];
  _OWORD v34[9];
  void (*v35)(uint64_t *__return_ptr, __int128 *);

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(void (**)(uint64_t *__return_ptr, __int128 *))(a1 + 24);
  result = sub_1B1C759B0((__objc2_class **)v4, v5, (uint64_t)v31);
  if (!v2)
  {
    sub_1B1A18378((uint64_t)v31, (uint64_t)v32, &qword_1EEF61660, (uint64_t)&type metadata for GraphTranslateResult);
    if (sub_1B1C79560((uint64_t)v32) != 1)
    {
      sub_1B1C79574(v32, v33);
      sub_1B1C79574(v33, v34);
      v7 = sub_1B1C795AC((uint64_t)v34);
      nullsub_16(v34);
      if (v7 != 1)
      {
        v9 = *(_QWORD *)(v4 + 16);
        v10 = *(_QWORD *)(v9 + 16);
        if (v10)
        {
          v23 = a2;
          v24 = v4;
          v25 = *v8;
          v11 = &v28;
          swift_bridgeObjectRetain();
          v12 = v10 - 1;
          v13 = 32;
          v14 = &qword_1EEF61660;
          v15 = v9;
          v35 = v5;
          while (1)
          {
            *(_QWORD *)&v26[0] = *(_QWORD *)(v15 + v13);
            swift_retain_n();
            v5(&v27, v26);
            swift_release();
            sub_1B1A18378((uint64_t)v11, (uint64_t)v29, v14, (uint64_t)&type metadata for GraphTranslateResult);
            sub_1B1A18378((uint64_t)v29, (uint64_t)v30, v14, (uint64_t)&type metadata for GraphTranslateResult);
            if (sub_1B1C79560((uint64_t)v30) == 1)
            {
              swift_release_n();
              if (!v12)
                goto LABEL_14;
            }
            else
            {
              v16 = v14;
              v17 = v11;
              v18 = v15;
              sub_1B1C79574(v30, v26);
              v19 = sub_1B1C795AC((uint64_t)v26);
              nullsub_16(v26);
              if (v19 == 1)
              {
                swift_release_n();
              }
              else
              {
                v21 = v20;
                swift_release();
                RGPassDependsOn(v25, *v21, v22);
                swift_release();
              }
              v15 = v18;
              v11 = v17;
              v14 = v16;
              v5 = v35;
              if (!v12)
              {
LABEL_14:
                swift_bridgeObjectRelease();
                a2 = v23;
                v4 = v24;
                break;
              }
            }
            --v12;
            v13 += 16;
          }
        }
      }
    }
    *a2 = v4;
    sub_1B1A18378((uint64_t)v31, (uint64_t)(a2 + 1), &qword_1EEF61660, (uint64_t)&type metadata for GraphTranslateResult);
    return swift_retain();
  }
  return result;
}

uint64_t sub_1B1C61480()
{
  uint64_t v0;

  swift_release();

  swift_unknownObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t sub_1B1C614C4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  type metadata accessor for RGGraphTranslator();
  swift_allocObject();
  swift_unknownObjectRetain_n();
  swift_unknownObjectRetain_n();
  swift_unknownObjectRetain_n();
  sub_1B1C6005C(a1, a2, a3, a4, a5, a6);
  sub_1B1C61030();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_release();
  return swift_unknownObjectRelease();
}

uint64_t sub_1B1C615C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  char *v15;
  int v16;
  uint64_t (*v17)(uint64_t (**)(_QWORD, double));
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(_QWORD *, uint64_t, uint64_t);
  void (*v22)(_QWORD *, _QWORD);
  uint64_t v23;
  uint64_t v24;
  void (*v25)(_QWORD *__return_ptr, ValueMetadata *, uint64_t, uint64_t, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v26;
  _QWORD *v27;
  uint64_t v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD v35[4];
  _BYTE v36[24];
  uint64_t v37;
  uint64_t v38;

  sub_1B1791524(0, (unint64_t *)&qword_1ED4BA860, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEC990], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v29 - v8;
  v10 = sub_1B2229610();
  v11 = *(_QWORD *)(v10 - 8);
  v13 = MEMORY[0x1E0C80A78](v10, v12);
  v15 = (char *)&v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(unsigned __int8 *)(a3 + 85);
  v30 = *(unsigned __int8 *)(a3 + 86);
  v31 = v16;
  *(_WORD *)(a3 + 85) = 0;
  v17 = (uint64_t (*)(uint64_t (**)(_QWORD, double)))thread_serialization_context;
  v18 = (uint64_t *)thread_serialization_context(&thread_serialization_context, v13);
  v29 = *v18;
  *v18 = a3;
  LOBYTE(v32) = 1;
  sub_1B20681E4(2, 0, 0, 1, 0, 0x100000000uLL, 0, 1);
  sub_1B2229604();
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10);
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v15, v9, v10);
  v33 = type metadata accessor for SerializationContext();
  v32 = a3;
  v19 = v37;
  v20 = v38;
  sub_1B19FC264((uint64_t)v36, v37);
  v21 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v20 + 24);
  swift_retain();
  v22 = (void (*)(_QWORD *, _QWORD))v21(v35, v19, v20);
  sub_1B20E0F5C((uint64_t)&v32, (uint64_t)v15);
  v22(v35, 0);
  sub_1B19FA198((uint64_t)v36, (uint64_t)&v32);
  v23 = v33;
  v24 = v34;
  sub_1B19FA070(&v32, v33);
  v25 = *(void (**)(_QWORD *__return_ptr, ValueMetadata *, uint64_t, uint64_t, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v24 + 32);
  v26 = sub_1B19FC30C();
  v25(v35, &type metadata for AuthoringGraphCoder, a1, a2, &type metadata for AuthoringGraphCoder, v26, v23, v24);
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v32);
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v36);
  v27 = (_QWORD *)v17(&thread_serialization_context);
  *v27 = v29;
  *(_BYTE *)(a3 + 86) = v30;
  *(_BYTE *)(a3 + 85) = v31;
  return v35[0];
}

uint64_t sub_1B1C61990(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(_QWORD *, uint64_t, uint64_t);
  void (*v18)(_QWORD *, _QWORD);
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[4];
  _BYTE v30[24];
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  sub_1B1791524(0, (unint64_t *)&qword_1ED4BA860, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEC990], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v25 - v6;
  v8 = sub_1B2229610();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = a1;
  v13 = *(_BYTE *)(a2 + 85);
  v14 = *(_BYTE *)(a2 + 86);
  *(_WORD *)(a2 + 85) = 0;
  sub_1B206862C(2, 1, (uint64_t)v30);
  sub_1B2229604();
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8);
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v12, v7, v8);
  v27 = type metadata accessor for SerializationContext();
  v26 = a2;
  v15 = v31;
  v16 = v32;
  sub_1B19FC264((uint64_t)v30, v31);
  v17 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v16 + 24);
  swift_retain();
  v18 = (void (*)(_QWORD *, _QWORD))v17(v29, v15, v16);
  sub_1B20E0F5C((uint64_t)&v26, (uint64_t)v12);
  v18(v29, 0);
  sub_1B19FA198((uint64_t)v30, (uint64_t)&v26);
  v19 = v27;
  v20 = v28;
  sub_1B19FA070(&v26, v27);
  v21 = *(uint64_t (**)(uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v20 + 32);
  v22 = sub_1B19FC428();
  v23 = v21(&v33, &type metadata for AuthoringGraphCoder, v22, v19, v20);
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v26);
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v30);
  *(_BYTE *)(a2 + 86) = v14;
  *(_BYTE *)(a2 + 85) = v13;
  return v23;
}

id sub_1B1C61C90(void *a1, uint64_t a2)
{
  id v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  void *v7;

  v3 = a1;
  swift_unknownObjectRetain();
  v4 = sub_1B222817C();
  v6 = v5;

  v7 = (void *)sub_1B1C615C0(v4, v6, a2);
  sub_1B1A0DADC(v4, v6);
  swift_unknownObjectRelease();
  return v7;
}

id sub_1B1C61D08(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  void *v7;

  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  v4 = sub_1B1C61990(a1, a2);
  v6 = v5;
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  v7 = (void *)sub_1B2228170();
  sub_1B1A0DADC(v4, v6);
  return v7;
}

id sub_1B1C61D80()
{
  void *v0;

  swift_unknownObjectRetain();
  sub_1B1C61DD0();
  swift_unknownObjectRelease();
  v0 = (void *)sub_1B2228AAC();
  swift_bridgeObjectRelease();
  return v0;
}

_QWORD *sub_1B1C61DD0()
{
  unint64_t v0;
  uint64_t v1;
  __int128 *v2;
  uint64_t v3;
  uint64_t *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v12;
  uint64_t v13;

  type metadata accessor for Graph();
  swift_unknownObjectRetain();
  if (!swift_dynamicCastClass())
    goto LABEL_13;
  v0 = MEMORY[0x1E0DEE9D8];
  v12 = sub_1B1C718F4(MEMORY[0x1E0DEE9D8]);
  v13 = v1;
  sub_1B1C5DBF4((uint64_t)sub_1B1C61F9C, 0, 0, 0x1000000000000000uLL, 0, v0, (uint64_t)&v12);
  v2 = sub_1B1C6B578(v12, v13, (void (*)(__int128 *__return_ptr, uint64_t *))sub_1B1AFF8FC);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v3 = *((_QWORD *)v2 + 2);
  if (!v3)
  {
    swift_release();
LABEL_13:
    swift_unknownObjectRelease();
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  swift_retain();
  v4 = (uint64_t *)v2 + 5;
  v5 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  do
  {
    v7 = *v4;
    if (*v4)
    {
      v8 = *(v4 - 1);
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v5 = sub_1B1C63044(0, v5[2] + 1, 1, v5);
      v10 = v5[2];
      v9 = v5[3];
      if (v10 >= v9 >> 1)
        v5 = sub_1B1C63044(v9 > 1, v10 + 1, 1, v5);
      v5[2] = v10 + 1;
      v6 = &v5[2 * v10];
      v6[4] = v8;
      v6[5] = v7;
    }
    v4 += 2;
    --v3;
  }
  while (v3);
  swift_unknownObjectRelease();
  swift_release_n();
  return v5;
}

uint64_t sub_1B1C61F9C@<X0>(uint64_t result@<X0>, unint64_t *a2@<X8>)
{
  __objc2_class *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v3 = **(__objc2_class ***)(result + 8);
  if (v3 == _TtC3VFX11PresentNode)
  {
    swift_retain();
    v4 = sub_1B20769D4();
  }
  else
  {
    if (v3 != _TtC3VFX18PublishTextureNode)
    {
      *a2 = 0;
      a2[1] = 0;
      return result;
    }
    swift_retain();
    v4 = sub_1B2076ADC();
  }
  v6 = v4;
  v7 = v5;
  result = swift_release();
  *a2 = v6;
  a2[1] = v7;
  return result;
}

uint64_t sub_1B1C62020()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v0 + 80) - 8) + 8))(v0 + *(_QWORD *)(*(_QWORD *)v0 + 88));
  return swift_deallocClassInstance();
}

uint64_t sub_1B1C62058(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  char isUniquelyReferenced_nonNull_native;
  char v5;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v11;

  v2 = v1;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v11 = *v1;
  *v1 = 0x8000000000000000;
  v5 = sub_1B1F82B60(a1, isUniquelyReferenced_nonNull_native);
  v6 = v5 & 1;
  *v2 = v11;
  swift_bridgeObjectRelease();
  if ((v5 & 1) != 0)
  {
    v7 = (char *)v2[1];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v7 = sub_1B1C632C0(0, *((_QWORD *)v7 + 2) + 1, 1, v7, &qword_1EEF5CCA8, MEMORY[0x1E0DEA520]);
    v9 = *((_QWORD *)v7 + 2);
    v8 = *((_QWORD *)v7 + 3);
    if (v9 >= v8 >> 1)
      v7 = sub_1B1C632C0(v8 > 1, v9 + 1, 1, v7, &qword_1EEF5CCA8, MEMORY[0x1E0DEA520]);
    *((_QWORD *)v7 + 2) = v9 + 1;
    *(_QWORD *)&v7[8 * v9 + 32] = a1;
    v2[1] = v7;
  }
  return v6;
}

uint64_t sub_1B1C62168@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v3;
  _QWORD *v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[5];
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v4 = v3;
  sub_1B1BCCDD4(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1B9D8BC);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v29 = *v3;
  *v3 = 0x8000000000000000;
  sub_1B1F82C54((uint64_t)a1, a2, isUniquelyReferenced_nonNull_native, v30);
  *v3 = v29;
  result = swift_bridgeObjectRelease();
  v10 = v30[1];
  v12 = v30[2];
  v11 = v30[3];
  v14 = v30[4];
  v13 = v31;
  v16 = v32;
  v15 = v33;
  v18 = v34;
  v17 = v35;
  v19 = v36;
  if (v30[0] == 1)
  {
    v23 = v31;
    v24 = v32;
    v25 = v33;
    v26 = v34;
    v27 = v35;
    v28 = v36;
    v20 = v3[1];
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      result = (uint64_t)sub_1B1C632C0(0, *(_QWORD *)(v20 + 16) + 1, 1, (char *)v20, &qword_1EEF5CCA8, MEMORY[0x1E0DEA520]);
      v20 = result;
    }
    v22 = *(_QWORD *)(v20 + 16);
    v21 = *(_QWORD *)(v20 + 24);
    if (v22 >= v21 >> 1)
    {
      result = (uint64_t)sub_1B1C632C0(v21 > 1, v22 + 1, 1, (char *)v20, &qword_1EEF5CCA8, MEMORY[0x1E0DEA520]);
      v20 = result;
    }
    *(_QWORD *)(v20 + 16) = v22 + 1;
    *(_QWORD *)(v20 + 8 * v22 + 32) = a2;
    v4[1] = v20;
    *a3 = 1;
    a3[1] = v10;
    a3[2] = v12;
    a3[3] = v11;
    a3[4] = v14;
    a3[5] = v23;
    a3[6] = v24;
    a3[7] = v25;
    a3[8] = v26;
    a3[9] = v27;
    a3[10] = v28;
  }
  else
  {
    *a3 = v30[0];
    a3[1] = v10;
    a3[2] = v12;
    a3[3] = v11;
    a3[4] = v14;
    a3[5] = v13;
    a3[6] = v16;
    a3[7] = v15;
    a3[8] = v18;
    a3[9] = v17;
    a3[10] = v19;
  }
  return result;
}

uint64_t sub_1B1C62310(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  _QWORD *v3;
  _QWORD *v5;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v14;

  v5 = v3;
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v14 = *v3;
  *v3 = 0x8000000000000000;
  v9 = a3(a1, a2, isUniquelyReferenced_nonNull_native);
  *v5 = v14;
  swift_bridgeObjectRelease();
  if (!v9)
  {
    v10 = (char *)v5[1];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v10 = sub_1B1C632C0(0, *((_QWORD *)v10 + 2) + 1, 1, v10, &qword_1EEF5CCA8, MEMORY[0x1E0DEA520]);
    v12 = *((_QWORD *)v10 + 2);
    v11 = *((_QWORD *)v10 + 3);
    if (v12 >= v11 >> 1)
      v10 = sub_1B1C632C0(v11 > 1, v12 + 1, 1, v10, &qword_1EEF5CCA8, MEMORY[0x1E0DEA520]);
    *((_QWORD *)v10 + 2) = v12 + 1;
    *(_QWORD *)&v10[8 * v12 + 32] = a2;
    v5[1] = v10;
  }
  return v9;
}

double sub_1B1C6242C@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char isUniquelyReferenced_nonNull_native;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  double result;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _OWORD v19[9];
  char v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  char v31;
  _BYTE v32[152];
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  char v43;
  _BYTE v44[152];
  uint64_t v45[19];

  v4 = v3;
  v7 = *a1;
  v8 = a1[17];
  v9 = *((_BYTE *)a1 + 144);
  v34 = *(_OWORD *)(a1 + 1);
  v35 = *(_OWORD *)(a1 + 3);
  v36 = *(_OWORD *)(a1 + 5);
  v37 = *(_OWORD *)(a1 + 7);
  v38 = *(_OWORD *)(a1 + 9);
  v39 = *(_OWORD *)(a1 + 11);
  v40 = *(_OWORD *)(a1 + 13);
  v41 = *(_OWORD *)(a1 + 15);
  v33 = v7;
  v42 = v8;
  v43 = v9;
  sub_1B1B7C5AC((uint64_t)&v33);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v45[0] = *v3;
  *v3 = 0x8000000000000000;
  v22 = v34;
  v23 = v35;
  v24 = v36;
  v25 = v37;
  v26 = v38;
  v27 = v39;
  v28 = v40;
  v29 = v41;
  v21 = v33;
  v30 = v42;
  v31 = v43;
  sub_1B1F8312C((uint64_t)&v21, a2, isUniquelyReferenced_nonNull_native, v32);
  *v3 = v45[0];
  swift_bridgeObjectRelease();
  sub_1B1B4D278((uint64_t)v32, (uint64_t)v44, (unint64_t *)&unk_1EEF5CEC0, (uint64_t (*)(uint64_t))sub_1B1C795D4);
  sub_1B1B4D278((uint64_t)v44, (uint64_t)v45, (unint64_t *)&unk_1EEF5CEC0, (uint64_t (*)(uint64_t))sub_1B1C795D4);
  if (sub_1B1B3C438(v45) == 1)
  {
    v11 = (char *)v3[1];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v11 = sub_1B1C632C0(0, *((_QWORD *)v11 + 2) + 1, 1, v11, &qword_1EEF5CCA8, MEMORY[0x1E0DEA520]);
    v13 = *((_QWORD *)v11 + 2);
    v12 = *((_QWORD *)v11 + 3);
    if (v13 >= v12 >> 1)
      v11 = sub_1B1C632C0(v12 > 1, v13 + 1, 1, v11, &qword_1EEF5CCA8, MEMORY[0x1E0DEA520]);
    *((_QWORD *)v11 + 2) = v13 + 1;
    *(_QWORD *)&v11[8 * v13 + 32] = a2;
    v4[1] = (uint64_t)v11;
    sub_1B1B4D278((uint64_t)v44, a3, (unint64_t *)&unk_1EEF5CEC0, (uint64_t (*)(uint64_t))sub_1B1C795D4);
  }
  else
  {
    sub_1B1B4D278((uint64_t)v44, (uint64_t)v19, (unint64_t *)&unk_1EEF5CEC0, (uint64_t (*)(uint64_t))sub_1B1C795D4);
    v15 = v19[7];
    *(_OWORD *)(a3 + 96) = v19[6];
    *(_OWORD *)(a3 + 112) = v15;
    *(_OWORD *)(a3 + 128) = v19[8];
    *(_BYTE *)(a3 + 144) = v20;
    v16 = v19[3];
    *(_OWORD *)(a3 + 32) = v19[2];
    *(_OWORD *)(a3 + 48) = v16;
    v17 = v19[5];
    *(_OWORD *)(a3 + 64) = v19[4];
    *(_OWORD *)(a3 + 80) = v17;
    v18 = v19[1];
    *(_OWORD *)a3 = v19[0];
    *(_OWORD *)(a3 + 16) = v18;
    return nullsub_16(a3);
  }
  return result;
}

uint64_t sub_1B1C626BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v16;

  v4 = v3;
  swift_bridgeObjectRetain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v16 = *v3;
  *v3 = 0x8000000000000000;
  v9 = sub_1B1F833B8(a1, a2, a3, isUniquelyReferenced_nonNull_native);
  v11 = v10;
  *v4 = v16;
  swift_bridgeObjectRelease();
  if (v11 == 1)
  {
    v12 = (char *)v4[1];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v12 = sub_1B1C632C0(0, *((_QWORD *)v12 + 2) + 1, 1, v12, &qword_1EEF5CCA8, MEMORY[0x1E0DEA520]);
    v14 = *((_QWORD *)v12 + 2);
    v13 = *((_QWORD *)v12 + 3);
    if (v14 >= v13 >> 1)
      v12 = sub_1B1C632C0(v13 > 1, v14 + 1, 1, v12, &qword_1EEF5CCA8, MEMORY[0x1E0DEA520]);
    *((_QWORD *)v12 + 2) = v14 + 1;
    *(_QWORD *)&v12[8 * v14 + 32] = a3;
    v4[1] = v12;
  }
  return v9;
}

uint64_t sub_1B1C627F4(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  _QWORD *v3;
  _QWORD *v5;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v14;

  v5 = v3;
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v14 = *v3;
  *v3 = 0x8000000000000000;
  v9 = a3(a1, a2, isUniquelyReferenced_nonNull_native);
  *v5 = v14;
  swift_bridgeObjectRelease();
  if (v9 == 1)
  {
    v10 = (char *)v5[1];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v10 = sub_1B1C632C0(0, *((_QWORD *)v10 + 2) + 1, 1, v10, &qword_1EEF5CCA8, MEMORY[0x1E0DEA520]);
    v12 = *((_QWORD *)v10 + 2);
    v11 = *((_QWORD *)v10 + 3);
    if (v12 >= v11 >> 1)
      v10 = sub_1B1C632C0(v11 > 1, v12 + 1, 1, v10, &qword_1EEF5CCA8, MEMORY[0x1E0DEA520]);
    *((_QWORD *)v10 + 2) = v12 + 1;
    *(_QWORD *)&v10[8 * v12 + 32] = a2;
    v5[1] = v10;
  }
  return v9;
}

uint64_t sub_1B1C62914(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  char v8;
  char v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v14;

  v3 = v2;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v14 = *v2;
  *v2 = 0x8000000000000000;
  v7 = sub_1B1F835E4(a1, a2, isUniquelyReferenced_nonNull_native);
  v9 = v8;
  *v3 = v14;
  swift_bridgeObjectRelease();
  if ((v9 & 1) != 0)
  {
    v10 = (char *)v3[1];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v10 = sub_1B1C632C0(0, *((_QWORD *)v10 + 2) + 1, 1, v10, &qword_1EEF5CCA8, MEMORY[0x1E0DEA520]);
    v12 = *((_QWORD *)v10 + 2);
    v11 = *((_QWORD *)v10 + 3);
    if (v12 >= v11 >> 1)
      v10 = sub_1B1C632C0(v11 > 1, v12 + 1, 1, v10, &qword_1EEF5CCA8, MEMORY[0x1E0DEA520]);
    *((_QWORD *)v10 + 2) = v12 + 1;
    *(_QWORD *)&v10[8 * v12 + 32] = a2;
    v3[1] = v10;
  }
  return v7;
}

char *sub_1B1C62A3C(char a1, uint64_t a2, char a3, char *a4)
{
  unint64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2)
      v8 = a2;
    if (v7 < a2)
      a2 = v8;
    else
      a2 = v7;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (a2 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = a2;
  if (!v10)
  {
    v11 = (char *)MEMORY[0x1E0DEE9D8];
    v13 = (char *)(MEMORY[0x1E0DEE9D8] + 32);
    if ((a1 & 1) != 0)
      goto LABEL_12;
LABEL_20:
    sub_1B1C6C254(0, v9, v13, (uint64_t)a4);
    goto LABEL_21;
  }
  sub_1B1791524(0, &qword_1ED4BAF60, (uint64_t (*)(uint64_t))type metadata accessor for vfx_memory_entry_t, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  v11 = (char *)swift_allocObject();
  v12 = j__malloc_size(v11);
  *((_QWORD *)v11 + 2) = v9;
  *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 24);
  v13 = v11 + 32;
  if ((a1 & 1) == 0)
    goto LABEL_20;
LABEL_12:
  if (v11 != a4 || v13 >= &a4[24 * v9 + 32])
    memmove(v13, a4 + 32, 24 * v9);
  *((_QWORD *)a4 + 2) = 0;
LABEL_21:
  swift_bridgeObjectRelease();
  return v11;
}

_QWORD *sub_1B1C62B5C(char a1, uint64_t a2, char a3, _QWORD *a4)
{
  return sub_1B1C670DC(a1, a2, a3, a4, (unint64_t *)&qword_1ED4BB008, (uint64_t (*)(uint64_t))sub_1B1A0FCB4);
}

char *sub_1B1C62B70(char a1, uint64_t a2, char a3, char *a4)
{
  unint64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2)
      v8 = a2;
    if (v7 < a2)
      a2 = v8;
    else
      a2 = v7;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (a2 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = a2;
  if (v10)
  {
    sub_1B1A02758(0, &qword_1ED4842E0, MEMORY[0x1E0DEBC70], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v11 = (char *)swift_allocObject();
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v9;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
    v14 = v11 + 32;
    if ((a1 & 1) != 0)
      goto LABEL_14;
LABEL_22:
    sub_1B1C6C734(0, v9, v14, (uint64_t)a4);
    goto LABEL_23;
  }
  v11 = (char *)MEMORY[0x1E0DEE9D8];
  v14 = (char *)(MEMORY[0x1E0DEE9D8] + 32);
  if ((a1 & 1) == 0)
    goto LABEL_22;
LABEL_14:
  if (v11 != a4 || v14 >= &a4[16 * v9 + 32])
    memmove(v14, a4 + 32, 16 * v9);
  *((_QWORD *)a4 + 2) = 0;
LABEL_23:
  swift_bridgeObjectRelease();
  return v11;
}

_QWORD *sub_1B1C62C78(char a1, uint64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2)
      v8 = a2;
    if (v7 < a2)
      a2 = v8;
    else
      a2 = v7;
  }
  v9 = a4[2];
  if (a2 <= v9)
    v10 = a4[2];
  else
    v10 = a2;
  if (!v10)
  {
    v11 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
    if ((a1 & 1) != 0)
      goto LABEL_12;
LABEL_20:
    sub_1B1C6C16C(0, v9, (unint64_t)v13, (uint64_t)a4);
    goto LABEL_21;
  }
  sub_1B1A02758(0, &qword_1ED4BACA0, (uint64_t)&type metadata for ChunksStorage, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v11 = (_QWORD *)swift_allocObject();
  v12 = j__malloc_size(v11);
  v11[2] = v9;
  v11[3] = 2 * ((uint64_t)(v12 - 32) / 40);
  v13 = v11 + 4;
  if ((a1 & 1) == 0)
    goto LABEL_20;
LABEL_12:
  if (v11 != a4 || v13 >= &a4[5 * v9 + 4])
    memmove(v13, a4 + 4, 40 * v9);
  a4[2] = 0;
LABEL_21:
  swift_bridgeObjectRelease();
  return v11;
}

char *sub_1B1C62D94(char a1, uint64_t a2, char a3, char *a4)
{
  return sub_1B1C632C0(a1, a2, a3, a4, &qword_1ED4BAF28, MEMORY[0x1E0DEB418]);
}

_QWORD *sub_1B1C62DA8(char a1, uint64_t a2, char a3, unint64_t a4)
{
  unint64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;

  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2)
      v8 = a2;
    if (v7 < a2)
      a2 = v8;
    else
      a2 = v7;
  }
  v9 = *(_QWORD *)(a4 + 16);
  if (a2 <= v9)
    v10 = *(_QWORD *)(a4 + 16);
  else
    v10 = a2;
  if (v10)
  {
    sub_1B1791524(0, (unint64_t *)&unk_1ED4BAD10, (uint64_t (*)(uint64_t))sub_1B1C79110, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
    v11 = (_QWORD *)swift_allocObject();
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 25;
    v11[2] = v9;
    v11[3] = 2 * (v13 >> 3);
    v14 = (unint64_t)(v11 + 4);
    if ((a1 & 1) != 0)
      goto LABEL_14;
LABEL_21:
    sub_1B1C6C078(0, v9, v14, a4);
    goto LABEL_25;
  }
  v11 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v14 = MEMORY[0x1E0DEE9D8] + 32;
  if ((a1 & 1) == 0)
    goto LABEL_21;
LABEL_14:
  if ((unint64_t)v11 < a4 || v14 >= a4 + 32 + 8 * v9)
  {
    sub_1B1C79110(0);
    swift_arrayInitWithTakeFrontToBack();
  }
  else if (v11 != (_QWORD *)a4)
  {
    sub_1B1C79110(0);
    swift_arrayInitWithTakeBackToFront();
  }
  *(_QWORD *)(a4 + 16) = 0;
LABEL_25:
  swift_bridgeObjectRelease();
  return v11;
}

char *sub_1B1C62EF0(char a1, uint64_t a2, char a3, char *a4)
{
  return sub_1B1C65F7C(a1, a2, a3, a4, (unint64_t *)&unk_1ED4BAF70, MEMORY[0x1E0DEDBC8]);
}

_QWORD *sub_1B1C62F04(char a1, uint64_t a2, char a3, _QWORD *a4)
{
  return sub_1B1C67DF4(a1, a2, a3, a4, (unint64_t *)&unk_1EEF5CEA0, (uint64_t)&type metadata for ReplicationEvent);
}

char *sub_1B1C62F18(char a1, uint64_t a2, char a3, char *a4)
{
  return sub_1B1C693B8(a1, a2, a3, a4, (unint64_t *)&qword_1ED4BAD80, (unint64_t *)&qword_1ED4B8C90, (unint64_t *)&qword_1ED4B8C70);
}

_QWORD *sub_1B1C62F3C(char a1, uint64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2)
      v8 = a2;
    if (v7 < a2)
      a2 = v8;
    else
      a2 = v7;
  }
  v9 = a4[2];
  if (a2 <= v9)
    v10 = a4[2];
  else
    v10 = a2;
  if (v10)
  {
    sub_1B1A02758(0, &qword_1EEF5CB48, (uint64_t)&type metadata for Property.Description, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v11 = (_QWORD *)swift_allocObject();
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 1;
    v11[2] = v9;
    v11[3] = 2 * (v13 >> 5);
    v14 = v11 + 4;
    if ((a1 & 1) != 0)
      goto LABEL_14;
LABEL_22:
    sub_1B1C6CDBC(0, v9, (unint64_t)v14, (uint64_t)a4);
    goto LABEL_23;
  }
  v11 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v14 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
  if ((a1 & 1) == 0)
    goto LABEL_22;
LABEL_14:
  if (v11 != a4 || v14 >= &a4[4 * v9 + 4])
    memmove(v14, a4 + 4, 32 * v9);
  a4[2] = 0;
LABEL_23:
  swift_bridgeObjectRelease();
  return v11;
}

_QWORD *sub_1B1C63044(char a1, uint64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2)
      v8 = a2;
    if (v7 < a2)
      a2 = v8;
    else
      a2 = v7;
  }
  v9 = a4[2];
  if (a2 <= v9)
    v10 = a4[2];
  else
    v10 = a2;
  if (v10)
  {
    sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAE70, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v11 = (_QWORD *)swift_allocObject();
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    v11[2] = v9;
    v11[3] = 2 * (v13 >> 4);
    v14 = v11 + 4;
    if ((a1 & 1) != 0)
      goto LABEL_14;
LABEL_22:
    sub_1B1C6C41C(0, v9, (unint64_t)v14, (uint64_t)a4);
    goto LABEL_23;
  }
  v11 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v14 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
  if ((a1 & 1) == 0)
    goto LABEL_22;
LABEL_14:
  if (v11 != a4 || v14 >= &a4[2 * v9 + 4])
    memmove(v14, a4 + 4, 16 * v9);
  a4[2] = 0;
LABEL_23:
  swift_bridgeObjectRelease();
  return v11;
}

char *sub_1B1C6314C(char a1, int64_t a2, char a3, char *a4)
{
  return sub_1B1C64558(a1, a2, a3, a4, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl);
}

char *sub_1B1C63160(char a1, uint64_t a2, char a3, char *a4)
{
  return sub_1B1C693B8(a1, a2, a3, a4, (unint64_t *)&qword_1ED4BAE50, (unint64_t *)&qword_1ED4BA1A0, (unint64_t *)&qword_1ED4BA190);
}

_QWORD *sub_1B1C63184(char a1, uint64_t a2, char a3, _QWORD *a4)
{
  return sub_1B1C6770C(a1, a2, a3, a4, (unint64_t *)&qword_1ED4BAD30, (unint64_t *)&qword_1ED4B89D0);
}

_QWORD *sub_1B1C631A0(char a1, uint64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2)
      v8 = a2;
    if (v7 < a2)
      a2 = v8;
    else
      a2 = v7;
  }
  v9 = a4[2];
  if (a2 <= v9)
    v10 = a4[2];
  else
    v10 = a2;
  if (!v10)
  {
    v11 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
    if ((a1 & 1) != 0)
      goto LABEL_12;
LABEL_20:
    sub_1B1C6C814(0, v9, (unint64_t)v13, (uint64_t)a4);
    goto LABEL_21;
  }
  sub_1B1BBF038();
  v11 = (_QWORD *)swift_allocObject();
  v12 = j__malloc_size(v11);
  v11[2] = v9;
  v11[3] = 2 * ((uint64_t)(v12 - 32) / 72);
  v13 = v11 + 4;
  if ((a1 & 1) == 0)
    goto LABEL_20;
LABEL_12:
  if (v11 != a4 || v13 >= &a4[9 * v9 + 4])
    memmove(v13, a4 + 4, 72 * v9);
  a4[2] = 0;
LABEL_21:
  swift_bridgeObjectRelease();
  return v11;
}

char *sub_1B1C632AC(char a1, uint64_t a2, char a3, char *a4)
{
  return sub_1B1C632C0(a1, a2, a3, a4, &qword_1ED4BAF68, MEMORY[0x1E0DEC548]);
}

char *sub_1B1C632C0(char a1, uint64_t a2, char a3, char *a4, unint64_t *a5, uint64_t a6)
{
  unint64_t v8;
  uint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int64_t v14;
  uint64_t v15;
  char *v16;

  if ((a3 & 1) != 0)
  {
    v8 = *((_QWORD *)a4 + 3);
    v9 = v8 >> 1;
    v10 = v8 & 0xFFFFFFFFFFFFFFFELL;
    if (v10 <= a2)
      v10 = a2;
    if (v9 < a2)
      a2 = v10;
    else
      a2 = v9;
  }
  v11 = *((_QWORD *)a4 + 2);
  if (a2 <= v11)
    v12 = *((_QWORD *)a4 + 2);
  else
    v12 = a2;
  if (v12)
  {
    sub_1B1A02758(0, a5, a6, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v13 = (char *)swift_allocObject();
    v14 = j__malloc_size(v13);
    v15 = v14 - 32;
    if (v14 < 32)
      v15 = v14 - 25;
    *((_QWORD *)v13 + 2) = v11;
    *((_QWORD *)v13 + 3) = 2 * (v15 >> 3);
    v16 = v13 + 32;
    if ((a1 & 1) != 0)
      goto LABEL_14;
LABEL_22:
    sub_1B1C6CA14(0, v11, v16, (uint64_t)a4);
    goto LABEL_23;
  }
  v13 = (char *)MEMORY[0x1E0DEE9D8];
  v16 = (char *)(MEMORY[0x1E0DEE9D8] + 32);
  if ((a1 & 1) == 0)
    goto LABEL_22;
LABEL_14:
  if (v13 != a4 || v16 >= &a4[8 * v11 + 32])
    memmove(v16, a4 + 32, 8 * v11);
  *((_QWORD *)a4 + 2) = 0;
LABEL_23:
  swift_bridgeObjectRelease();
  return v13;
}

char *sub_1B1C633C0(char a1, uint64_t a2, char a3, char *a4)
{
  unint64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2)
      v8 = a2;
    if (v7 < a2)
      a2 = v8;
    else
      a2 = v7;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (a2 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = a2;
  if (v10)
  {
    sub_1B1C78F00();
    v11 = (char *)swift_allocObject();
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v9;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
    v14 = v11 + 32;
    if ((a1 & 1) != 0)
      goto LABEL_14;
LABEL_22:
    sub_1B1C6C734(0, v9, v14, (uint64_t)a4);
    goto LABEL_23;
  }
  v11 = (char *)MEMORY[0x1E0DEE9D8];
  v14 = (char *)(MEMORY[0x1E0DEE9D8] + 32);
  if ((a1 & 1) == 0)
    goto LABEL_22;
LABEL_14:
  if (v11 != a4 || v14 >= &a4[16 * v9 + 32])
    memmove(v14, a4 + 32, 16 * v9);
  *((_QWORD *)a4 + 2) = 0;
LABEL_23:
  swift_bridgeObjectRelease();
  return v11;
}

_QWORD *sub_1B1C634B0(char a1, uint64_t a2, char a3, _QWORD *a4)
{
  return sub_1B1C663D8(a1, a2, a3, a4, &qword_1EEF5CD78, &qword_1EEF5CD80);
}

_QWORD *sub_1B1C634CC(char a1, uint64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2)
      v8 = a2;
    if (v7 < a2)
      a2 = v8;
    else
      a2 = v7;
  }
  v9 = a4[2];
  if (a2 <= v9)
    v10 = a4[2];
  else
    v10 = a2;
  if (!v10)
  {
    v11 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
    if ((a1 & 1) != 0)
      goto LABEL_12;
LABEL_20:
    sub_1B1C6DB80(0, v9, (unint64_t)v13, (uint64_t)a4);
    goto LABEL_21;
  }
  sub_1B1BBD808();
  v11 = (_QWORD *)swift_allocObject();
  v12 = j__malloc_size(v11);
  v11[2] = v9;
  v11[3] = 2 * ((uint64_t)(v12 - 32) / 88);
  v13 = v11 + 4;
  if ((a1 & 1) == 0)
    goto LABEL_20;
LABEL_12:
  if (v11 != a4 || v13 >= &a4[11 * v9 + 4])
    memmove(v13, a4 + 4, 88 * v9);
  a4[2] = 0;
LABEL_21:
  swift_bridgeObjectRelease();
  return v11;
}

char *sub_1B1C635D8(char a1, uint64_t a2, char a3, char *a4)
{
  unint64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2)
      v8 = a2;
    if (v7 < a2)
      a2 = v8;
    else
      a2 = v7;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (a2 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = a2;
  if (v10)
  {
    sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAF10, MEMORY[0x1E0DEB188], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v11 = (char *)swift_allocObject();
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 29;
    *((_QWORD *)v11 + 2) = v9;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 2);
    v14 = v11 + 32;
    if ((a1 & 1) != 0)
      goto LABEL_14;
LABEL_22:
    sub_1B1C6C33C(0, v9, v14, (uint64_t)a4);
    goto LABEL_23;
  }
  v11 = (char *)MEMORY[0x1E0DEE9D8];
  v14 = (char *)(MEMORY[0x1E0DEE9D8] + 32);
  if ((a1 & 1) == 0)
    goto LABEL_22;
LABEL_14:
  if (v11 != a4 || v14 >= &a4[4 * v9 + 32])
    memmove(v14, a4 + 32, 4 * v9);
  *((_QWORD *)a4 + 2) = 0;
LABEL_23:
  swift_bridgeObjectRelease();
  return v11;
}

char *sub_1B1C636E0(char a1, uint64_t a2, char a3, char *a4)
{
  return sub_1B1C636EC(a1, a2, a3, a4, (void (*)(_QWORD))sub_1B1AE031C);
}

char *sub_1B1C636EC(char a1, uint64_t a2, char a3, char *a4, void (*a5)(_QWORD))
{
  unint64_t v7;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int64_t v13;
  uint64_t v14;
  char *v15;

  if ((a3 & 1) != 0)
  {
    v7 = *((_QWORD *)a4 + 3);
    v8 = v7 >> 1;
    v9 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if (v9 <= a2)
      v9 = a2;
    if (v8 < a2)
      a2 = v9;
    else
      a2 = v8;
  }
  v10 = *((_QWORD *)a4 + 2);
  if (a2 <= v10)
    v11 = *((_QWORD *)a4 + 2);
  else
    v11 = a2;
  if (v11)
  {
    a5(0);
    v12 = (char *)swift_allocObject();
    v13 = j__malloc_size(v12);
    v14 = v13 - 32;
    if (v13 < 32)
      v14 = v13 - 17;
    *((_QWORD *)v12 + 2) = v10;
    *((_QWORD *)v12 + 3) = 2 * (v14 >> 4);
    v15 = v12 + 32;
    if ((a1 & 1) != 0)
      goto LABEL_14;
LABEL_22:
    sub_1B1C6C734(0, v10, v15, (uint64_t)a4);
    goto LABEL_23;
  }
  v12 = (char *)MEMORY[0x1E0DEE9D8];
  v15 = (char *)(MEMORY[0x1E0DEE9D8] + 32);
  if ((a1 & 1) == 0)
    goto LABEL_22;
LABEL_14:
  if (v12 != a4 || v15 >= &a4[16 * v10 + 32])
    memmove(v15, a4 + 32, 16 * v10);
  *((_QWORD *)a4 + 2) = 0;
LABEL_23:
  swift_bridgeObjectRelease();
  return v12;
}

_QWORD *sub_1B1C637DC(char a1, uint64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2)
      v8 = a2;
    if (v7 < a2)
      a2 = v8;
    else
      a2 = v7;
  }
  v9 = a4[2];
  if (a2 <= v9)
    v10 = a4[2];
  else
    v10 = a2;
  if (v10)
  {
    sub_1B1A02758(0, &qword_1EEF5CBC8, (uint64_t)&_s9ErrorInfoVN, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v11 = (_QWORD *)swift_allocObject();
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 + 31;
    v11[2] = v9;
    v11[3] = 2 * (v13 >> 6);
    v14 = v11 + 4;
    if ((a1 & 1) != 0)
      goto LABEL_14;
LABEL_22:
    sub_1B1C6DC90(0, v9, (unint64_t)v14, (uint64_t)a4);
    goto LABEL_23;
  }
  v11 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v14 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
  if ((a1 & 1) == 0)
    goto LABEL_22;
LABEL_14:
  if (v11 != a4 || v14 >= &a4[8 * v9 + 4])
    memmove(v14, a4 + 4, v9 << 6);
  a4[2] = 0;
LABEL_23:
  swift_bridgeObjectRelease();
  return v11;
}

_QWORD *sub_1B1C638E4(char a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1B1C672E4(a1, a2, a3, a4, &qword_1ED4BAD88, (uint64_t)&type metadata for ScriptParameter, (void (*)(_QWORD, int64_t, _QWORD *, _QWORD *))sub_1B1C6CF84);
}

char *sub_1B1C63900(char a1, uint64_t a2, char a3, char *a4)
{
  return sub_1B1C632C0(a1, a2, a3, a4, &qword_1EEF5CCA8, MEMORY[0x1E0DEA520]);
}

uint64_t sub_1B1C63914(char a1, uint64_t a2, char a3, unint64_t a4)
{
  return sub_1B1C64A9C(a1, a2, a3, a4, &qword_1EEF5CCA0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998]);
}

_QWORD *sub_1B1C63928(char a1, uint64_t a2, char a3, _QWORD *a4)
{
  return sub_1B1C640DC(a1, a2, a3, a4, (unint64_t *)&unk_1EEF5CF40, &qword_1EEF5BDE0, (void (*)(uint64_t))type metadata accessor for Node);
}

_QWORD *sub_1B1C63944(char a1, uint64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2)
      v8 = a2;
    if (v7 < a2)
      a2 = v8;
    else
      a2 = v7;
  }
  v9 = a4[2];
  if (a2 <= v9)
    v10 = a4[2];
  else
    v10 = a2;
  if (v10)
  {
    sub_1B1C71BAC(0, (unint64_t *)&unk_1EEF5CD50, (unint64_t *)&qword_1ED4BB030);
    v11 = (_QWORD *)swift_allocObject();
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 25;
    v11[2] = v9;
    v11[3] = 2 * (v13 >> 3);
    v14 = v11 + 4;
    if ((a1 & 1) != 0)
      goto LABEL_14;
LABEL_22:
    sub_1B1C6E650(0, v9, (unint64_t)v14, (uint64_t)a4);
    goto LABEL_23;
  }
  v11 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v14 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
  if ((a1 & 1) == 0)
    goto LABEL_22;
LABEL_14:
  if (v11 != a4 || v14 >= &a4[v9 + 4])
    memmove(v14, a4 + 4, 8 * v9);
  a4[2] = 0;
LABEL_23:
  swift_bridgeObjectRelease();
  return v11;
}

_QWORD *sub_1B1C63A50(char a1, uint64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2)
      v8 = a2;
    if (v7 < a2)
      a2 = v8;
    else
      a2 = v7;
  }
  v9 = a4[2];
  if (a2 <= v9)
    v10 = a4[2];
  else
    v10 = a2;
  if (!v10)
  {
    v11 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
    if ((a1 & 1) != 0)
      goto LABEL_12;
LABEL_20:
    sub_1B1C6EEE8(0, v9, (unint64_t)v13, (uint64_t)a4);
    goto LABEL_21;
  }
  sub_1B1A02758(0, &qword_1EEF5CE30, (uint64_t)&type metadata for GraphCodeGen.CodeGenAtom, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v11 = (_QWORD *)swift_allocObject();
  v12 = j__malloc_size(v11);
  v11[2] = v9;
  v11[3] = 2 * ((uint64_t)(v12 - 32) / 88);
  v13 = v11 + 4;
  if ((a1 & 1) == 0)
    goto LABEL_20;
LABEL_12:
  if (v11 != a4 || v13 >= &a4[11 * v9 + 4])
    memmove(v13, a4 + 4, 88 * v9);
  a4[2] = 0;
LABEL_21:
  swift_bridgeObjectRelease();
  return v11;
}

_QWORD *sub_1B1C63B74(char a1, uint64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2)
      v8 = a2;
    if (v7 < a2)
      a2 = v8;
    else
      a2 = v7;
  }
  v9 = a4[2];
  if (a2 <= v9)
    v10 = a4[2];
  else
    v10 = a2;
  if (!v10)
  {
    v11 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
    if ((a1 & 1) != 0)
      goto LABEL_12;
LABEL_20:
    sub_1B1C6F0BC(0, v9, (unint64_t)v13, (uint64_t)a4);
    goto LABEL_21;
  }
  sub_1B1C792D8();
  v11 = (_QWORD *)swift_allocObject();
  v12 = j__malloc_size(v11);
  v11[2] = v9;
  v11[3] = 2 * ((uint64_t)(v12 - 32) / 80);
  v13 = v11 + 4;
  if ((a1 & 1) == 0)
    goto LABEL_20;
LABEL_12:
  if (v11 != a4 || v13 >= &a4[10 * v9 + 4])
    memmove(v13, a4 + 4, 80 * v9);
  a4[2] = 0;
LABEL_21:
  swift_bridgeObjectRelease();
  return v11;
}

_QWORD *sub_1B1C63C78(char a1, uint64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2)
      v8 = a2;
    if (v7 < a2)
      a2 = v8;
    else
      a2 = v7;
  }
  v9 = a4[2];
  if (a2 <= v9)
    v10 = a4[2];
  else
    v10 = a2;
  if (!v10)
  {
    v11 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
    if ((a1 & 1) != 0)
      goto LABEL_12;
LABEL_20:
    sub_1B1C6F1CC(0, v9, (unint64_t)v13, (uint64_t)a4);
    goto LABEL_21;
  }
  sub_1B1A02758(0, &qword_1EEF5CE48, (uint64_t)&type metadata for GraphCodeGen.CodeGenParameter, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v11 = (_QWORD *)swift_allocObject();
  v12 = j__malloc_size(v11);
  v11[2] = v9;
  v11[3] = 2 * ((uint64_t)(v12 - 32) / 48);
  v13 = v11 + 4;
  if ((a1 & 1) == 0)
    goto LABEL_20;
LABEL_12:
  if (v11 != a4 || v13 >= &a4[6 * v9 + 4])
    memmove(v13, a4 + 4, 48 * v9);
  a4[2] = 0;
LABEL_21:
  swift_bridgeObjectRelease();
  return v11;
}

char *sub_1B1C63D98(char a1, uint64_t a2, char a3, char *a4)
{
  unint64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2)
      v8 = a2;
    if (v7 < a2)
      a2 = v8;
    else
      a2 = v7;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (a2 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = a2;
  if (v10)
  {
    sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAE30, (uint64_t)&type metadata for Entity, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v11 = (char *)swift_allocObject();
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 25;
    *((_QWORD *)v11 + 2) = v9;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 3);
    v14 = v11 + 32;
    if ((a1 & 1) != 0)
      goto LABEL_14;
LABEL_22:
    sub_1B1C6CA14(0, v9, v14, (uint64_t)a4);
    goto LABEL_23;
  }
  v11 = (char *)MEMORY[0x1E0DEE9D8];
  v14 = (char *)(MEMORY[0x1E0DEE9D8] + 32);
  if ((a1 & 1) == 0)
    goto LABEL_22;
LABEL_14:
  if (v11 != a4 || v14 >= &a4[8 * v9 + 32])
    memmove(v14, a4 + 32, 8 * v9);
  *((_QWORD *)a4 + 2) = 0;
LABEL_23:
  swift_bridgeObjectRelease();
  return v11;
}

_QWORD *sub_1B1C63EA0(char a1, uint64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2)
      v8 = a2;
    if (v7 < a2)
      a2 = v8;
    else
      a2 = v7;
  }
  v9 = a4[2];
  if (a2 <= v9)
    v10 = a4[2];
  else
    v10 = a2;
  if (!v10)
  {
    v11 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
    if ((a1 & 1) != 0)
      goto LABEL_12;
LABEL_20:
    sub_1B1C6D47C(0, v9, (unint64_t)v13, (uint64_t)a4);
    goto LABEL_21;
  }
  sub_1B1C79198();
  v11 = (_QWORD *)swift_allocObject();
  v12 = j__malloc_size(v11);
  v11[2] = v9;
  v11[3] = 2 * ((uint64_t)(v12 - 32) / 48);
  v13 = v11 + 4;
  if ((a1 & 1) == 0)
    goto LABEL_20;
LABEL_12:
  if (v11 != a4 || v13 >= &a4[6 * v9 + 4])
    memmove(v13, a4 + 4, 48 * v9);
  a4[2] = 0;
LABEL_21:
  swift_bridgeObjectRelease();
  return v11;
}

char *sub_1B1C63FA8(char a1, uint64_t a2, char a3, char *a4)
{
  unint64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2)
      v8 = a2;
    if (v7 < a2)
      a2 = v8;
    else
      a2 = v7;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (a2 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = a2;
  if (!v10)
  {
    v11 = (char *)MEMORY[0x1E0DEE9D8];
    v13 = (char *)(MEMORY[0x1E0DEE9D8] + 32);
    if ((a1 & 1) != 0)
      goto LABEL_12;
LABEL_20:
    sub_1B1C6D594(0, v9, v13, (uint64_t)a4);
    goto LABEL_21;
  }
  sub_1B1A02758(0, &qword_1ED4BAD90, (uint64_t)&type metadata for ShaderParameter, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v11 = (char *)swift_allocObject();
  v12 = j__malloc_size(v11);
  *((_QWORD *)v11 + 2) = v9;
  *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 80);
  v13 = v11 + 32;
  if ((a1 & 1) == 0)
    goto LABEL_20;
LABEL_12:
  if (v11 != a4 || v13 >= &a4[80 * v9 + 32])
    memmove(v13, a4 + 32, 80 * v9);
  *((_QWORD *)a4 + 2) = 0;
LABEL_21:
  swift_bridgeObjectRelease();
  return v11;
}

_QWORD *sub_1B1C640C0(char a1, uint64_t a2, char a3, _QWORD *a4)
{
  return sub_1B1C640DC(a1, a2, a3, a4, (unint64_t *)&unk_1EEF5CF28, (unint64_t *)&unk_1EEF5B810, (void (*)(uint64_t))type metadata accessor for AuthoringNode);
}

_QWORD *sub_1B1C640DC(char a1, uint64_t a2, char a3, _QWORD *a4, unint64_t *a5, unint64_t *a6, void (*a7)(uint64_t))
{
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  size_t v17;
  _QWORD *v18;

  if ((a3 & 1) != 0)
  {
    v11 = a4[3];
    v12 = v11 >> 1;
    v13 = v11 & 0xFFFFFFFFFFFFFFFELL;
    if (v13 <= a2)
      v13 = a2;
    if (v12 < a2)
      a2 = v13;
    else
      a2 = v12;
  }
  v14 = a4[2];
  if (a2 <= v14)
    v15 = a4[2];
  else
    v15 = a2;
  if (!v15)
  {
    v16 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    v18 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
    if ((a1 & 1) != 0)
      goto LABEL_12;
LABEL_20:
    sub_1B1C72248(0, v14, (unint64_t)v18, (uint64_t)a4, a6, a7);
    goto LABEL_21;
  }
  sub_1B1C79DBC(0, a5, a6, a7);
  v16 = (_QWORD *)swift_allocObject();
  v17 = j__malloc_size(v16);
  v16[2] = v14;
  v16[3] = 2 * ((uint64_t)(v17 - 32) / 24);
  v18 = v16 + 4;
  if ((a1 & 1) == 0)
    goto LABEL_20;
LABEL_12:
  if (v16 != a4 || v18 >= &a4[3 * v14 + 4])
    memmove(v18, a4 + 4, 24 * v14);
  a4[2] = 0;
LABEL_21:
  swift_bridgeObjectRelease();
  return v16;
}

char *sub_1B1C64208(char a1, uint64_t a2, char a3, char *a4)
{
  return sub_1B1C693B8(a1, a2, a3, a4, &qword_1EEF5CE68, &qword_1EEF5CE70, &qword_1EEF5CE78);
}

_QWORD *sub_1B1C6422C(char a1, uint64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2)
      v8 = a2;
    if (v7 < a2)
      a2 = v8;
    else
      a2 = v7;
  }
  v9 = a4[2];
  if (a2 <= v9)
    v10 = a4[2];
  else
    v10 = a2;
  if (v10)
  {
    sub_1B1791524(0, (unint64_t *)&qword_1ED4BAF30, (uint64_t (*)(uint64_t))sub_1B19F8F98, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
    v11 = (_QWORD *)swift_allocObject();
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 1;
    v11[2] = v9;
    v11[3] = 2 * (v13 >> 5);
    v14 = v11 + 4;
    if ((a1 & 1) != 0)
      goto LABEL_14;
LABEL_22:
    sub_1B1C6CAF4(0, v9, (unint64_t)v14, (uint64_t)a4);
    goto LABEL_23;
  }
  v11 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v14 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
  if ((a1 & 1) == 0)
    goto LABEL_22;
LABEL_14:
  if (v11 != a4 || v14 >= &a4[4 * v9 + 4])
    memmove(v14, a4 + 4, 32 * v9);
  a4[2] = 0;
LABEL_23:
  swift_bridgeObjectRelease();
  return v11;
}

char *sub_1B1C64334(char a1, uint64_t a2, char a3, char *a4)
{
  unint64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2)
      v8 = a2;
    if (v7 < a2)
      a2 = v8;
    else
      a2 = v7;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (a2 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = a2;
  if (v10)
  {
    sub_1B1A02758(0, (unint64_t *)&unk_1ED4BACD8, (uint64_t)&type metadata for RelationPair, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v11 = (char *)swift_allocObject();
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v9;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
    v14 = v11 + 32;
    if ((a1 & 1) != 0)
      goto LABEL_14;
LABEL_22:
    sub_1B1C6C734(0, v9, v14, (uint64_t)a4);
    goto LABEL_23;
  }
  v11 = (char *)MEMORY[0x1E0DEE9D8];
  v14 = (char *)(MEMORY[0x1E0DEE9D8] + 32);
  if ((a1 & 1) == 0)
    goto LABEL_22;
LABEL_14:
  if (v11 != a4 || v14 >= &a4[16 * v9 + 32])
    memmove(v14, a4 + 32, 16 * v9);
  *((_QWORD *)a4 + 2) = 0;
LABEL_23:
  swift_bridgeObjectRelease();
  return v11;
}

char *sub_1B1C6443C(char a1, uint64_t a2, char a3, char *a4)
{
  unint64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2)
      v8 = a2;
    if (v7 < a2)
      a2 = v8;
    else
      a2 = v7;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (a2 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = a2;
  if (v10)
  {
    sub_1B1A02758(0, &qword_1ED4BAD58, (uint64_t)&type metadata for EntityInstance, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v11 = (char *)swift_allocObject();
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v9;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
    v14 = v11 + 32;
    if ((a1 & 1) != 0)
      goto LABEL_14;
LABEL_22:
    sub_1B1C6C734(0, v9, v14, (uint64_t)a4);
    goto LABEL_23;
  }
  v11 = (char *)MEMORY[0x1E0DEE9D8];
  v14 = (char *)(MEMORY[0x1E0DEE9D8] + 32);
  if ((a1 & 1) == 0)
    goto LABEL_22;
LABEL_14:
  if (v11 != a4 || v14 >= &a4[16 * v9 + 32])
    memmove(v14, a4 + 32, 16 * v9);
  *((_QWORD *)a4 + 2) = 0;
LABEL_23:
  swift_bridgeObjectRelease();
  return v11;
}

char *sub_1B1C64544(char a1, int64_t a2, char a3, char *a4)
{
  return sub_1B1C64558(a1, a2, a3, a4, &qword_1EEF5CF38, (uint64_t)&type metadata for Section);
}

char *sub_1B1C64558(char a1, int64_t a2, char a3, char *a4, unint64_t *a5, uint64_t a6)
{
  unint64_t v8;
  int64_t v9;
  int64_t v10;
  int64_t v11;
  int64_t v12;
  char *v13;
  size_t v14;
  char *v15;

  if ((a3 & 1) != 0)
  {
    v8 = *((_QWORD *)a4 + 3);
    v9 = v8 >> 1;
    v10 = v8 & 0xFFFFFFFFFFFFFFFELL;
    if (v10 <= a2)
      v10 = a2;
    if (v9 < a2)
      a2 = v10;
    else
      a2 = v9;
  }
  v11 = *((_QWORD *)a4 + 2);
  if (a2 <= v11)
    v12 = *((_QWORD *)a4 + 2);
  else
    v12 = a2;
  if (!v12)
  {
    v13 = (char *)MEMORY[0x1E0DEE9D8];
    v15 = (char *)(MEMORY[0x1E0DEE9D8] + 32);
    if ((a1 & 1) != 0)
      goto LABEL_12;
LABEL_20:
    sub_1B1C6F4A4(0, v11, v15, (uint64_t)a4);
    goto LABEL_21;
  }
  sub_1B1A02758(0, a5, a6, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v13 = (char *)swift_allocObject();
  v14 = j__malloc_size(v13);
  *((_QWORD *)v13 + 2) = v11;
  *((_QWORD *)v13 + 3) = 2 * v14 - 64;
  v15 = v13 + 32;
  if ((a1 & 1) == 0)
    goto LABEL_20;
LABEL_12:
  if (v13 != a4 || v15 >= &a4[v11 + 32])
    memmove(v15, a4 + 32, v11);
  *((_QWORD *)a4 + 2) = 0;
LABEL_21:
  swift_bridgeObjectRelease();
  return v13;
}

char *sub_1B1C64644(char a1, uint64_t a2, char a3, char *a4)
{
  unint64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2)
      v8 = a2;
    if (v7 < a2)
      a2 = v8;
    else
      a2 = v7;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (a2 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = a2;
  if (!v10)
  {
    v11 = (char *)MEMORY[0x1E0DEE9D8];
    v13 = (char *)(MEMORY[0x1E0DEE9D8] + 32);
    if ((a1 & 1) != 0)
      goto LABEL_12;
LABEL_20:
    sub_1B1C6C254(0, v9, v13, (uint64_t)a4);
    goto LABEL_21;
  }
  sub_1B1791524(0, &qword_1ED4BAD40, (uint64_t (*)(uint64_t))sub_1B1C71D14, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  v11 = (char *)swift_allocObject();
  v12 = j__malloc_size(v11);
  *((_QWORD *)v11 + 2) = v9;
  *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 24);
  v13 = v11 + 32;
  if ((a1 & 1) == 0)
    goto LABEL_20;
LABEL_12:
  if (v11 != a4 || v13 >= &a4[24 * v9 + 32])
    memmove(v13, a4 + 32, 24 * v9);
  *((_QWORD *)a4 + 2) = 0;
LABEL_21:
  swift_bridgeObjectRelease();
  return v11;
}

_QWORD *sub_1B1C64764(char a1, uint64_t a2, char a3, _QWORD *a4)
{
  return sub_1B1C6770C(a1, a2, a3, a4, &qword_1EEF5CB38, (unint64_t *)&qword_1EEF5CB40);
}

char *sub_1B1C64780(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  int64_t v10;
  char *v11;
  size_t v12;
  char *v13;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2)
      v8 = a2;
    if (v7 < a2)
      a2 = v8;
    else
      a2 = v7;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (a2 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = a2;
  if (!v10)
  {
    v11 = (char *)MEMORY[0x1E0DEE9D8];
    v13 = (char *)(MEMORY[0x1E0DEE9D8] + 32);
    if ((a1 & 1) != 0)
      goto LABEL_12;
LABEL_20:
    sub_1B1C6F4A4(0, v9, v13, (uint64_t)a4);
    goto LABEL_21;
  }
  sub_1B1A02758(0, &qword_1EEF5CE60, MEMORY[0x1E0DEE9C0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v11 = (char *)swift_allocObject();
  v12 = j__malloc_size(v11);
  *((_QWORD *)v11 + 2) = v9;
  *((_QWORD *)v11 + 3) = 2 * v12 - 64;
  v13 = v11 + 32;
  if ((a1 & 1) == 0)
    goto LABEL_20;
LABEL_12:
  if (v11 != a4 || v13 >= &a4[v9 + 32])
    memmove(v13, a4 + 32, v9);
  *((_QWORD *)a4 + 2) = 0;
LABEL_21:
  swift_bridgeObjectRelease();
  return v11;
}

char *sub_1B1C64878(char a1, uint64_t a2, char a3, char *a4)
{
  unint64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2)
      v8 = a2;
    if (v7 < a2)
      a2 = v8;
    else
      a2 = v7;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (a2 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = a2;
  if (v10)
  {
    sub_1B1AE2028();
    v11 = (char *)swift_allocObject();
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 25;
    *((_QWORD *)v11 + 2) = v9;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 3);
    v14 = v11 + 32;
    if ((a1 & 1) != 0)
      goto LABEL_14;
LABEL_22:
    sub_1B1C6CA14(0, v9, v14, (uint64_t)a4);
    goto LABEL_23;
  }
  v11 = (char *)MEMORY[0x1E0DEE9D8];
  v14 = (char *)(MEMORY[0x1E0DEE9D8] + 32);
  if ((a1 & 1) == 0)
    goto LABEL_22;
LABEL_14:
  if (v11 != a4 || v14 >= &a4[8 * v9 + 32])
    memmove(v14, a4 + 32, 8 * v9);
  *((_QWORD *)a4 + 2) = 0;
LABEL_23:
  swift_bridgeObjectRelease();
  return v11;
}

_QWORD *sub_1B1C64968(char a1, uint64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2)
      v8 = a2;
    if (v7 < a2)
      a2 = v8;
    else
      a2 = v7;
  }
  v9 = a4[2];
  if (a2 <= v9)
    v10 = a4[2];
  else
    v10 = a2;
  if (!v10)
  {
    v11 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
    if ((a1 & 1) != 0)
      goto LABEL_12;
LABEL_20:
    sub_1B1C6F690(0, v9, (unint64_t)v13, (uint64_t)a4);
    goto LABEL_21;
  }
  sub_1B1A02758(0, &qword_1EEF5CC48, (uint64_t)&type metadata for MetalFunctionReflection.Arg, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v11 = (_QWORD *)swift_allocObject();
  v12 = j__malloc_size(v11);
  v11[2] = v9;
  v11[3] = 2 * ((uint64_t)(v12 - 32) / 48);
  v13 = v11 + 4;
  if ((a1 & 1) == 0)
    goto LABEL_20;
LABEL_12:
  if (v11 != a4 || v13 >= &a4[6 * v9 + 4])
    memmove(v13, a4 + 4, 48 * v9);
  a4[2] = 0;
LABEL_21:
  swift_bridgeObjectRelease();
  return v11;
}

uint64_t sub_1B1C64A88(char a1, uint64_t a2, char a3, unint64_t a4)
{
  return sub_1B1C64A9C(a1, a2, a3, a4, &qword_1EEF59608, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8]);
}

uint64_t sub_1B1C64A9C(char a1, uint64_t a2, char a3, unint64_t a4, unint64_t *a5, uint64_t (*a6)(uint64_t))
{
  unint64_t v9;
  uint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  size_t v18;
  BOOL v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = *(_QWORD *)(a4 + 24);
    v10 = v9 >> 1;
    v11 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if (v11 <= a2)
      v11 = a2;
    if (v10 < a2)
      a2 = v11;
    else
      a2 = v10;
  }
  v12 = *(_QWORD *)(a4 + 16);
  if (a2 <= v12)
    v13 = *(_QWORD *)(a4 + 16);
  else
    v13 = a2;
  if (v13)
  {
    sub_1B1791524(0, a5, a6, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
    v14 = *(_QWORD *)(a6(0) - 8);
    v15 = *(_QWORD *)(v14 + 72);
    v16 = (*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
    v17 = (_QWORD *)swift_allocObject();
    v18 = j__malloc_size(v17);
    if (!v15 || (v18 - v16 == 0x8000000000000000 ? (v19 = v15 == -1) : (v19 = 0), v19))
    {
      result = sub_1B222967C();
      __break(1u);
      return result;
    }
    v17[2] = v12;
    v17[3] = 2 * ((uint64_t)(v18 - v16) / v15);
  }
  else
  {
    v17 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  v20 = *(_QWORD *)(a6(0) - 8);
  v21 = (*(unsigned __int8 *)(v20 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80);
  v22 = (unint64_t)v17 + v21;
  if ((a1 & 1) != 0)
  {
    if ((unint64_t)v17 < a4 || v22 >= a4 + v21 + *(_QWORD *)(v20 + 72) * v12)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v17 != (_QWORD *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_1B1C71130(0, v12, v22, a4, a6);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v17;
}

_QWORD *sub_1B1C64CA0(char a1, uint64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2)
      v8 = a2;
    if (v7 < a2)
      a2 = v8;
    else
      a2 = v7;
  }
  v9 = a4[2];
  if (a2 <= v9)
    v10 = a4[2];
  else
    v10 = a2;
  if (!v10)
  {
    v11 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
    if ((a1 & 1) != 0)
      goto LABEL_12;
LABEL_20:
    sub_1B1C70494(0, v9, (unint64_t)v13, (uint64_t)a4);
    goto LABEL_21;
  }
  sub_1B1C71D98();
  v11 = (_QWORD *)swift_allocObject();
  v12 = j__malloc_size(v11);
  v11[2] = v9;
  v11[3] = 2 * ((uint64_t)(v12 - 32) / 40);
  v13 = v11 + 4;
  if ((a1 & 1) == 0)
    goto LABEL_20;
LABEL_12:
  if (v11 != a4 || v13 >= &a4[5 * v9 + 4])
    memmove(v13, a4 + 4, 40 * v9);
  a4[2] = 0;
LABEL_21:
  swift_bridgeObjectRelease();
  return v11;
}

_QWORD *sub_1B1C64DA4(char a1, uint64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2)
      v8 = a2;
    if (v7 < a2)
      a2 = v8;
    else
      a2 = v7;
  }
  v9 = a4[2];
  if (a2 <= v9)
    v10 = a4[2];
  else
    v10 = a2;
  if (v10)
  {
    sub_1B1A02758(0, &qword_1ED4BADA0, (uint64_t)&type metadata for GraphScriptGroup, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v11 = (_QWORD *)swift_allocObject();
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 1;
    v11[2] = v9;
    v11[3] = 2 * (v13 >> 5);
    v14 = v11 + 4;
    if ((a1 & 1) != 0)
      goto LABEL_14;
LABEL_22:
    sub_1B1C705A4(0, v9, (unint64_t)v14, (uint64_t)a4);
    goto LABEL_23;
  }
  v11 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v14 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
  if ((a1 & 1) == 0)
    goto LABEL_22;
LABEL_14:
  if (v11 != a4 || v14 >= &a4[4 * v9 + 4])
    memmove(v14, a4 + 4, 32 * v9);
  a4[2] = 0;
LABEL_23:
  swift_bridgeObjectRelease();
  return v11;
}

_QWORD *sub_1B1C64EAC(char a1, uint64_t a2, char a3, _QWORD *a4)
{
  return sub_1B1C68234(a1, a2, a3, a4, &qword_1ED4BAD98, (uint64_t)&type metadata for GraphScriptGroup.Reference);
}

_QWORD *sub_1B1C64EC0(char a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1B1C689B8(a1, a2, a3, a4, (unint64_t *)&qword_1ED4BF6E0, (uint64_t)&type metadata for FunctionConstant, (void (*)(_QWORD, int64_t, _QWORD *, _QWORD *))sub_1B1C6CCD0);
}

_QWORD *sub_1B1C64EDC(char a1, uint64_t a2, char a3, unint64_t a4)
{
  unint64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;

  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2)
      v8 = a2;
    if (v7 < a2)
      a2 = v8;
    else
      a2 = v7;
  }
  v9 = *(_QWORD *)(a4 + 16);
  if (a2 <= v9)
    v10 = *(_QWORD *)(a4 + 16);
  else
    v10 = a2;
  if (v10)
  {
    sub_1B1A02758(0, &qword_1EEF5CE58, (uint64_t)&type metadata for TriggerOSEvent, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v11 = (_QWORD *)swift_allocObject();
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 1;
    v11[2] = v9;
    v11[3] = 2 * (v13 >> 5);
    v14 = (unint64_t)(v11 + 4);
    if ((a1 & 1) != 0)
      goto LABEL_14;
LABEL_21:
    sub_1B1C70688(0, v9, v14, a4);
    goto LABEL_25;
  }
  v11 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v14 = MEMORY[0x1E0DEE9D8] + 32;
  if ((a1 & 1) == 0)
    goto LABEL_21;
LABEL_14:
  if ((unint64_t)v11 < a4 || v14 >= a4 + 32 + 32 * v9)
  {
    swift_arrayInitWithTakeFrontToBack();
  }
  else if (v11 != (_QWORD *)a4)
  {
    swift_arrayInitWithTakeBackToFront();
  }
  *(_QWORD *)(a4 + 16) = 0;
LABEL_25:
  swift_bridgeObjectRelease();
  return v11;
}

_QWORD *sub_1B1C65008(char a1, uint64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2)
      v8 = a2;
    if (v7 < a2)
      a2 = v8;
    else
      a2 = v7;
  }
  v9 = a4[2];
  if (a2 <= v9)
    v10 = a4[2];
  else
    v10 = a2;
  if (!v10)
  {
    v11 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
    if ((a1 & 1) != 0)
      goto LABEL_12;
LABEL_20:
    sub_1B1C7076C(0, v9, (unint64_t)v13, (uint64_t)a4);
    goto LABEL_21;
  }
  sub_1B1A02758(0, (unint64_t *)&unk_1EEF5CE90, (uint64_t)&type metadata for TickedEvent, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v11 = (_QWORD *)swift_allocObject();
  v12 = j__malloc_size(v11);
  v11[2] = v9;
  v11[3] = 2 * ((uint64_t)(v12 - 32) / 24);
  v13 = v11 + 4;
  if ((a1 & 1) == 0)
    goto LABEL_20;
LABEL_12:
  if (v11 != a4 || v13 >= &a4[3 * v9 + 4])
    memmove(v13, a4 + 4, 24 * v9);
  a4[2] = 0;
LABEL_21:
  swift_bridgeObjectRelease();
  return v11;
}

_QWORD *sub_1B1C65128(char a1, uint64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2)
      v8 = a2;
    if (v7 < a2)
      a2 = v8;
    else
      a2 = v7;
  }
  v9 = a4[2];
  if (a2 <= v9)
    v10 = a4[2];
  else
    v10 = a2;
  if (!v10)
  {
    v11 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
    if ((a1 & 1) != 0)
      goto LABEL_12;
LABEL_20:
    sub_1B1C6FFBC(0, v9, (unint64_t)v13, (uint64_t)a4);
    goto LABEL_21;
  }
  sub_1B1A02758(0, (unint64_t *)&unk_1EEF5CBD0, (uint64_t)&_s12MetadataTypeON, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v11 = (_QWORD *)swift_allocObject();
  v12 = j__malloc_size(v11);
  v11[2] = v9;
  v11[3] = 2 * ((uint64_t)(v12 - 32) / 40);
  v13 = v11 + 4;
  if ((a1 & 1) == 0)
    goto LABEL_20;
LABEL_12:
  if (v11 != a4 || v13 >= &a4[5 * v9 + 4])
    memmove(v13, a4 + 4, 40 * v9);
  a4[2] = 0;
LABEL_21:
  swift_bridgeObjectRelease();
  return v11;
}

_QWORD *sub_1B1C65244(char a1, uint64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2)
      v8 = a2;
    if (v7 < a2)
      a2 = v8;
    else
      a2 = v7;
  }
  v9 = a4[2];
  if (a2 <= v9)
    v10 = a4[2];
  else
    v10 = a2;
  if (v10)
  {
    sub_1B1A02758(0, (unint64_t *)&unk_1EEF5CD60, MEMORY[0x1E0DEBAF0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v11 = (_QWORD *)swift_allocObject();
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 1;
    v11[2] = v9;
    v11[3] = 2 * (v13 >> 5);
    v14 = v11 + 4;
    if ((a1 & 1) != 0)
      goto LABEL_14;
LABEL_22:
    sub_1B1C6F954(0, v9, (unint64_t)v14, (uint64_t)a4);
    goto LABEL_23;
  }
  v11 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v14 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
  if ((a1 & 1) == 0)
    goto LABEL_22;
LABEL_14:
  if (v11 != a4 || v14 >= &a4[4 * v9 + 4])
    memmove(v14, a4 + 4, 32 * v9);
  a4[2] = 0;
LABEL_23:
  swift_bridgeObjectRelease();
  return v11;
}

_QWORD *sub_1B1C6534C(char a1, uint64_t a2, char a3, _QWORD *a4)
{
  return sub_1B1C65B44(a1, a2, a3, a4, (unint64_t *)&qword_1EEF5CB90, (uint64_t)&type metadata for TypeConstraint);
}

_QWORD *sub_1B1C65360(char a1, uint64_t a2, char a3, _QWORD *a4)
{
  return sub_1B1C66838(a1, a2, a3, a4, (void (*)(_QWORD))sub_1B1C71E04, (unint64_t *)&qword_1ED4BA2B0, MEMORY[0x1E0DEA968]);
}

_QWORD *sub_1B1C6537C(char a1, uint64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2)
      v8 = a2;
    if (v7 < a2)
      a2 = v8;
    else
      a2 = v7;
  }
  v9 = a4[2];
  if (a2 <= v9)
    v10 = a4[2];
  else
    v10 = a2;
  if (!v10)
  {
    v11 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
    if ((a1 & 1) != 0)
      goto LABEL_12;
LABEL_20:
    sub_1B1C6DD74(0, v9, (unint64_t)v13, (uint64_t)a4);
    goto LABEL_21;
  }
  sub_1B1A02758(0, &qword_1EEF5CF80, (uint64_t)&type metadata for ShaderCache.SpecializedFunction, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v11 = (_QWORD *)swift_allocObject();
  v12 = j__malloc_size(v11);
  v11[2] = v9;
  v11[3] = 2 * ((uint64_t)(v12 - 32) / 48);
  v13 = v11 + 4;
  if ((a1 & 1) == 0)
    goto LABEL_20;
LABEL_12:
  if (v11 != a4 || v13 >= &a4[6 * v9 + 4])
    memmove(v13, a4 + 4, 48 * v9);
  a4[2] = 0;
LABEL_21:
  swift_bridgeObjectRelease();
  return v11;
}

_QWORD *sub_1B1C6549C(char a1, uint64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2)
      v8 = a2;
    if (v7 < a2)
      a2 = v8;
    else
      a2 = v7;
  }
  v9 = a4[2];
  if (a2 <= v9)
    v10 = a4[2];
  else
    v10 = a2;
  if (!v10)
  {
    v11 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
    if ((a1 & 1) != 0)
      goto LABEL_12;
LABEL_20:
    sub_1B1C6DF44(0, v9, (unint64_t)v13, (uint64_t)a4);
    goto LABEL_21;
  }
  sub_1B1A02758(0, &qword_1EEF5CD28, (uint64_t)&type metadata for ShaderCache.RenderPipeline, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v11 = (_QWORD *)swift_allocObject();
  v12 = j__malloc_size(v11);
  v11[2] = v9;
  v11[3] = 2 * ((uint64_t)(v12 - 32) / 824);
  v13 = v11 + 4;
  if ((a1 & 1) == 0)
    goto LABEL_20;
LABEL_12:
  if (v11 != a4 || v13 >= &a4[103 * v9 + 4])
    memmove(v13, a4 + 4, 824 * v9);
  a4[2] = 0;
LABEL_21:
  swift_bridgeObjectRelease();
  return v11;
}

_QWORD *sub_1B1C655C4(char a1, uint64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2)
      v8 = a2;
    if (v7 < a2)
      a2 = v8;
    else
      a2 = v7;
  }
  v9 = a4[2];
  if (a2 <= v9)
    v10 = a4[2];
  else
    v10 = a2;
  if (!v10)
  {
    v11 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
    if ((a1 & 1) != 0)
      goto LABEL_12;
LABEL_20:
    sub_1B1C6DE5C(0, v9, (unint64_t)v13, (uint64_t)a4);
    goto LABEL_21;
  }
  sub_1B1A02758(0, &qword_1EEF5CD20, (uint64_t)&type metadata for ShaderCache.ComputePipeline, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v11 = (_QWORD *)swift_allocObject();
  v12 = j__malloc_size(v11);
  v11[2] = v9;
  v11[3] = 2 * ((uint64_t)(v12 - 32) / 72);
  v13 = v11 + 4;
  if ((a1 & 1) == 0)
    goto LABEL_20;
LABEL_12:
  if (v11 != a4 || v13 >= &a4[9 * v9 + 4])
    memmove(v13, a4 + 4, 72 * v9);
  a4[2] = 0;
LABEL_21:
  swift_bridgeObjectRelease();
  return v11;
}

_QWORD *sub_1B1C656E8(char a1, uint64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2)
      v8 = a2;
    if (v7 < a2)
      a2 = v8;
    else
      a2 = v7;
  }
  v9 = a4[2];
  if (a2 <= v9)
    v10 = a4[2];
  else
    v10 = a2;
  if (!v10)
  {
    v11 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
    if ((a1 & 1) != 0)
      goto LABEL_12;
LABEL_20:
    sub_1B1C70958(0, v9, (unint64_t)v13, (uint64_t)a4);
    goto LABEL_21;
  }
  sub_1B1A02758(0, &qword_1ED4BACB8, (uint64_t)&type metadata for ShaderCache.Library, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v11 = (_QWORD *)swift_allocObject();
  v12 = j__malloc_size(v11);
  v11[2] = v9;
  v11[3] = 2 * ((uint64_t)(v12 - 32) / 40);
  v13 = v11 + 4;
  if ((a1 & 1) == 0)
    goto LABEL_20;
LABEL_12:
  if (v11 != a4 || v13 >= &a4[5 * v9 + 4])
    memmove(v13, a4 + 4, 40 * v9);
  a4[2] = 0;
LABEL_21:
  swift_bridgeObjectRelease();
  return v11;
}

_QWORD *sub_1B1C65804(char a1, uint64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2)
      v8 = a2;
    if (v7 < a2)
      a2 = v8;
    else
      a2 = v7;
  }
  v9 = a4[2];
  if (a2 <= v9)
    v10 = a4[2];
  else
    v10 = a2;
  if (!v10)
  {
    v11 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
    if ((a1 & 1) != 0)
      goto LABEL_12;
LABEL_20:
    sub_1B1C70B28(0, v9, (unint64_t)v13, (uint64_t)a4);
    goto LABEL_21;
  }
  sub_1B1A02758(0, &qword_1ED4BAE28, (uint64_t)&type metadata for Lexer.Token, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v11 = (_QWORD *)swift_allocObject();
  v12 = j__malloc_size(v11);
  v11[2] = v9;
  v11[3] = 2 * ((uint64_t)(v12 - 32) / 40);
  v13 = v11 + 4;
  if ((a1 & 1) == 0)
    goto LABEL_20;
LABEL_12:
  if (v11 != a4 || v13 >= &a4[5 * v9 + 4])
    memmove(v13, a4 + 4, 40 * v9);
  a4[2] = 0;
LABEL_21:
  swift_bridgeObjectRelease();
  return v11;
}

_QWORD *sub_1B1C65920(char a1, uint64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2)
      v8 = a2;
    if (v7 < a2)
      a2 = v8;
    else
      a2 = v7;
  }
  v9 = a4[2];
  if (a2 <= v9)
    v10 = a4[2];
  else
    v10 = a2;
  if (v10)
  {
    sub_1B1A02758(0, (unint64_t *)&unk_1ED4BACF0, (uint64_t)&type metadata for ScriptParser.Argument, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v11 = (_QWORD *)swift_allocObject();
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 1;
    v11[2] = v9;
    v11[3] = 2 * (v13 >> 5);
    v14 = v11 + 4;
    if ((a1 & 1) != 0)
      goto LABEL_14;
LABEL_22:
    sub_1B1C70C10(0, v9, (unint64_t)v14, (uint64_t)a4);
    goto LABEL_23;
  }
  v11 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v14 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
  if ((a1 & 1) == 0)
    goto LABEL_22;
LABEL_14:
  if (v11 != a4 || v14 >= &a4[4 * v9 + 4])
    memmove(v14, a4 + 4, 32 * v9);
  a4[2] = 0;
LABEL_23:
  swift_bridgeObjectRelease();
  return v11;
}

_QWORD *sub_1B1C65A28(char a1, uint64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2)
      v8 = a2;
    if (v7 < a2)
      a2 = v8;
    else
      a2 = v7;
  }
  v9 = a4[2];
  if (a2 <= v9)
    v10 = a4[2];
  else
    v10 = a2;
  if (v10)
  {
    sub_1B1A02758(0, &qword_1ED4BACE8, (uint64_t)&type metadata for ScriptParser.ParsedScriptParameter, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v11 = (_QWORD *)swift_allocObject();
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 + 31;
    v11[2] = v9;
    v11[3] = 2 * (v13 >> 6);
    v14 = v11 + 4;
    if ((a1 & 1) != 0)
      goto LABEL_14;
LABEL_22:
    sub_1B1C70CF4(0, v9, (unint64_t)v14, (uint64_t)a4);
    goto LABEL_23;
  }
  v11 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v14 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
  if ((a1 & 1) == 0)
    goto LABEL_22;
LABEL_14:
  if (v11 != a4 || v14 >= &a4[8 * v9 + 4])
    memmove(v14, a4 + 4, v9 << 6);
  a4[2] = 0;
LABEL_23:
  swift_bridgeObjectRelease();
  return v11;
}

_QWORD *sub_1B1C65B30(char a1, uint64_t a2, char a3, _QWORD *a4)
{
  return sub_1B1C65B44(a1, a2, a3, a4, &qword_1EEF5CC28, (uint64_t)&type metadata for ScriptLocation);
}

_QWORD *sub_1B1C65B44(char a1, uint64_t a2, char a3, _QWORD *a4, unint64_t *a5, uint64_t a6)
{
  unint64_t v8;
  uint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  int64_t v14;
  uint64_t v15;
  _QWORD *v16;

  if ((a3 & 1) != 0)
  {
    v8 = a4[3];
    v9 = v8 >> 1;
    v10 = v8 & 0xFFFFFFFFFFFFFFFELL;
    if (v10 <= a2)
      v10 = a2;
    if (v9 < a2)
      a2 = v10;
    else
      a2 = v9;
  }
  v11 = a4[2];
  if (a2 <= v11)
    v12 = a4[2];
  else
    v12 = a2;
  if (v12)
  {
    sub_1B1A02758(0, a5, a6, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v13 = (_QWORD *)swift_allocObject();
    v14 = j__malloc_size(v13);
    v15 = v14 - 32;
    if (v14 < 32)
      v15 = v14 - 25;
    v13[2] = v11;
    v13[3] = 2 * (v15 >> 3);
    v16 = v13 + 4;
    if ((a1 & 1) != 0)
      goto LABEL_14;
LABEL_22:
    sub_1B1C70DD8(0, v11, (unint64_t)v16, (uint64_t)a4);
    goto LABEL_23;
  }
  v13 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v16 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
  if ((a1 & 1) == 0)
    goto LABEL_22;
LABEL_14:
  if (v13 != a4 || v16 >= &a4[v11 + 4])
    memmove(v16, a4 + 4, 8 * v11);
  a4[2] = 0;
LABEL_23:
  swift_bridgeObjectRelease();
  return v13;
}

_QWORD *sub_1B1C65C54(char a1, uint64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2)
      v8 = a2;
    if (v7 < a2)
      a2 = v8;
    else
      a2 = v7;
  }
  v9 = a4[2];
  if (a2 <= v9)
    v10 = a4[2];
  else
    v10 = a2;
  if (!v10)
  {
    v11 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
    if ((a1 & 1) != 0)
      goto LABEL_12;
LABEL_20:
    sub_1B1C70A40(0, v9, (unint64_t)v13, (uint64_t)a4);
    goto LABEL_21;
  }
  sub_1B1A02758(0, &qword_1EEF5CE50, (uint64_t)&type metadata for GeneratedScriptCode, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v11 = (_QWORD *)swift_allocObject();
  v12 = j__malloc_size(v11);
  v11[2] = v9;
  v11[3] = 2 * ((uint64_t)(v12 - 32) / 40);
  v13 = v11 + 4;
  if ((a1 & 1) == 0)
    goto LABEL_20;
LABEL_12:
  if (v11 != a4 || v13 >= &a4[5 * v9 + 4])
    memmove(v13, a4 + 4, 40 * v9);
  a4[2] = 0;
LABEL_21:
  swift_bridgeObjectRelease();
  return v11;
}

_QWORD *sub_1B1C65D70(char a1, uint64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2)
      v8 = a2;
    if (v7 < a2)
      a2 = v8;
    else
      a2 = v7;
  }
  v9 = a4[2];
  if (a2 <= v9)
    v10 = a4[2];
  else
    v10 = a2;
  if (v10)
  {
    sub_1B1A02758(0, &qword_1EEF5CC20, (uint64_t)&type metadata for CodeEmitter.Code, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v11 = (_QWORD *)swift_allocObject();
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 1;
    v11[2] = v9;
    v11[3] = 2 * (v13 >> 5);
    v14 = v11 + 4;
    if ((a1 & 1) != 0)
      goto LABEL_14;
LABEL_22:
    sub_1B1C6F2B4(0, v9, (unint64_t)v14, (uint64_t)a4);
    goto LABEL_23;
  }
  v11 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v14 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
  if ((a1 & 1) == 0)
    goto LABEL_22;
LABEL_14:
  if (v11 != a4 || v14 >= &a4[4 * v9 + 4])
    memmove(v14, a4 + 4, 32 * v9);
  a4[2] = 0;
LABEL_23:
  swift_bridgeObjectRelease();
  return v11;
}

_QWORD *sub_1B1C65E78(char a1, uint64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2)
      v8 = a2;
    if (v7 < a2)
      a2 = v8;
    else
      a2 = v7;
  }
  v9 = a4[2];
  if (a2 <= v9)
    v10 = a4[2];
  else
    v10 = a2;
  if (v10)
  {
    sub_1B1B63150();
    v11 = (_QWORD *)swift_allocObject();
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 25;
    v11[2] = v9;
    v11[3] = 2 * (v13 >> 3);
    v14 = v11 + 4;
    if ((a1 & 1) != 0)
      goto LABEL_14;
LABEL_22:
    sub_1B1C6F398(0, v9, (unint64_t)v14, (uint64_t)a4);
    goto LABEL_23;
  }
  v11 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v14 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
  if ((a1 & 1) == 0)
    goto LABEL_22;
LABEL_14:
  if (v11 != a4 || v14 >= &a4[v9 + 4])
    memmove(v14, a4 + 4, 8 * v9);
  a4[2] = 0;
LABEL_23:
  swift_bridgeObjectRelease();
  return v11;
}

char *sub_1B1C65F68(char a1, uint64_t a2, char a3, char *a4)
{
  return sub_1B1C65F7C(a1, a2, a3, a4, (unint64_t *)&unk_1EEF5AB20, MEMORY[0x1E0DEE0F8]);
}

char *sub_1B1C65F7C(char a1, uint64_t a2, char a3, char *a4, unint64_t *a5, uint64_t a6)
{
  unint64_t v8;
  uint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int64_t v14;
  uint64_t v15;
  char *v16;

  if ((a3 & 1) != 0)
  {
    v8 = *((_QWORD *)a4 + 3);
    v9 = v8 >> 1;
    v10 = v8 & 0xFFFFFFFFFFFFFFFELL;
    if (v10 <= a2)
      v10 = a2;
    if (v9 < a2)
      a2 = v10;
    else
      a2 = v9;
  }
  v11 = *((_QWORD *)a4 + 2);
  if (a2 <= v11)
    v12 = *((_QWORD *)a4 + 2);
  else
    v12 = a2;
  if (v12)
  {
    sub_1B1A02758(0, a5, a6, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v13 = (char *)swift_allocObject();
    v14 = j__malloc_size(v13);
    v15 = v14 - 32;
    if (v14 < 32)
      v15 = v14 - 29;
    *((_QWORD *)v13 + 2) = v11;
    *((_QWORD *)v13 + 3) = 2 * (v15 >> 2);
    v16 = v13 + 32;
    if ((a1 & 1) != 0)
      goto LABEL_14;
LABEL_22:
    sub_1B1C6C33C(0, v11, v16, (uint64_t)a4);
    goto LABEL_23;
  }
  v13 = (char *)MEMORY[0x1E0DEE9D8];
  v16 = (char *)(MEMORY[0x1E0DEE9D8] + 32);
  if ((a1 & 1) == 0)
    goto LABEL_22;
LABEL_14:
  if (v13 != a4 || v16 >= &a4[4 * v11 + 32])
    memmove(v16, a4 + 32, 4 * v11);
  *((_QWORD *)a4 + 2) = 0;
LABEL_23:
  swift_bridgeObjectRelease();
  return v13;
}

_QWORD *sub_1B1C6607C(char a1, uint64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2)
      v8 = a2;
    if (v7 < a2)
      a2 = v8;
    else
      a2 = v7;
  }
  v9 = a4[2];
  if (a2 <= v9)
    v10 = a4[2];
  else
    v10 = a2;
  if (!v10)
  {
    v11 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
    if ((a1 & 1) != 0)
      goto LABEL_12;
LABEL_20:
    sub_1B1C6EFD0(0, v9, (unint64_t)v13, (uint64_t)a4);
    goto LABEL_21;
  }
  sub_1B1A02758(0, &qword_1EEF5CE88, (uint64_t)&type metadata for ScriptKeyPath, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v11 = (_QWORD *)swift_allocObject();
  v12 = j__malloc_size(v11);
  v11[2] = v9;
  v11[3] = 2 * ((uint64_t)(v12 - 32) / 48);
  v13 = v11 + 4;
  if ((a1 & 1) == 0)
    goto LABEL_20;
LABEL_12:
  if (v11 != a4 || v13 >= &a4[6 * v9 + 4])
    memmove(v13, a4 + 4, 48 * v9);
  a4[2] = 0;
LABEL_21:
  swift_bridgeObjectRelease();
  return v11;
}

char *sub_1B1C66198(char a1, uint64_t a2, char a3, char *a4)
{
  unint64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2)
      v8 = a2;
    if (v7 < a2)
      a2 = v8;
    else
      a2 = v7;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (a2 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = a2;
  if (v10)
  {
    sub_1B1791524(0, (unint64_t *)&unk_1EEF5AB30, (uint64_t (*)(uint64_t))type metadata accessor for simd_quatf, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
    v11 = (char *)swift_allocObject();
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v9;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
    v14 = v11 + 32;
    if ((a1 & 1) != 0)
      goto LABEL_14;
LABEL_22:
    sub_1B1C6C734(0, v9, v14, (uint64_t)a4);
    goto LABEL_23;
  }
  v11 = (char *)MEMORY[0x1E0DEE9D8];
  v14 = (char *)(MEMORY[0x1E0DEE9D8] + 32);
  if ((a1 & 1) == 0)
    goto LABEL_22;
LABEL_14:
  if (v11 != a4 || v14 >= &a4[16 * v9 + 32])
    memmove(v14, a4 + 32, 16 * v9);
  *((_QWORD *)a4 + 2) = 0;
LABEL_23:
  swift_bridgeObjectRelease();
  return v11;
}

char *sub_1B1C662A0(char a1, uint64_t a2, char a3, char *a4)
{
  return sub_1B1C632C0(a1, a2, a3, a4, &qword_1EEF5CB98, MEMORY[0x1E0DEBC10]);
}

char *sub_1B1C662B4(char a1, uint64_t a2, char a3, char *a4)
{
  unint64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2)
      v8 = a2;
    if (v7 < a2)
      a2 = v8;
    else
      a2 = v7;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (a2 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = a2;
  if (v10)
  {
    sub_1B1A02758(0, (unint64_t *)&unk_1ED4BADD0, (uint64_t)&type metadata for TextureCPURuntime.Slice, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v11 = (char *)swift_allocObject();
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 + 31;
    *((_QWORD *)v11 + 2) = v9;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 6);
    v14 = v11 + 32;
    if ((a1 & 1) != 0)
      goto LABEL_14;
LABEL_22:
    sub_1B1C6FDDC(0, v9, v14, (uint64_t)a4);
    goto LABEL_23;
  }
  v11 = (char *)MEMORY[0x1E0DEE9D8];
  v14 = (char *)(MEMORY[0x1E0DEE9D8] + 32);
  if ((a1 & 1) == 0)
    goto LABEL_22;
LABEL_14:
  if (v11 != a4 || v14 >= &a4[64 * v9 + 32])
    memmove(v14, a4 + 32, v9 << 6);
  *((_QWORD *)a4 + 2) = 0;
LABEL_23:
  swift_bridgeObjectRelease();
  return v11;
}

_QWORD *sub_1B1C663BC(char a1, uint64_t a2, char a3, _QWORD *a4)
{
  return sub_1B1C663D8(a1, a2, a3, a4, (unint64_t *)&unk_1ED4B7A60, (unint64_t *)&qword_1ED4B8418);
}

_QWORD *sub_1B1C663D8(char a1, uint64_t a2, char a3, _QWORD *a4, unint64_t *a5, unint64_t *a6)
{
  unint64_t v9;
  uint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  int64_t v15;
  uint64_t v16;
  _QWORD *v17;

  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    v11 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if (v11 <= a2)
      v11 = a2;
    if (v10 < a2)
      a2 = v11;
    else
      a2 = v10;
  }
  v12 = a4[2];
  if (a2 <= v12)
    v13 = a4[2];
  else
    v13 = a2;
  if (v13)
  {
    sub_1B1C71BAC(0, a5, a6);
    v14 = (_QWORD *)swift_allocObject();
    v15 = j__malloc_size(v14);
    v16 = v15 - 32;
    if (v15 < 32)
      v16 = v15 - 17;
    v14[2] = v12;
    v14[3] = 2 * (v16 >> 4);
    v17 = v14 + 4;
    if ((a1 & 1) != 0)
      goto LABEL_14;
LABEL_22:
    sub_1B1C6DA80(0, v12, (unint64_t)v17, (uint64_t)a4, a6);
    goto LABEL_23;
  }
  v14 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v17 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
  if ((a1 & 1) == 0)
    goto LABEL_22;
LABEL_14:
  if (v14 != a4 || v17 >= &a4[2 * v12 + 4])
    memmove(v17, a4 + 4, 16 * v12);
  a4[2] = 0;
LABEL_23:
  swift_bridgeObjectRelease();
  return v14;
}

char *sub_1B1C664F0(char a1, uint64_t a2, char a3, char *a4)
{
  unint64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2)
      v8 = a2;
    if (v7 < a2)
      a2 = v8;
    else
      a2 = v7;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (a2 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = a2;
  if (!v10)
  {
    v11 = (char *)MEMORY[0x1E0DEE9D8];
    v13 = (char *)(MEMORY[0x1E0DEE9D8] + 32);
    if ((a1 & 1) != 0)
      goto LABEL_12;
LABEL_20:
    sub_1B1C6CBE8(0, v9, v13, (uint64_t)a4);
    goto LABEL_21;
  }
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BF6F0, (uint64_t)&type metadata for RenderVariantDescriptor, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v11 = (char *)swift_allocObject();
  v12 = j__malloc_size(v11);
  *((_QWORD *)v11 + 2) = v9;
  *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 96);
  v13 = v11 + 32;
  if ((a1 & 1) == 0)
    goto LABEL_20;
LABEL_12:
  if (v11 != a4 || v13 >= &a4[96 * v9 + 32])
    memmove(v13, a4 + 32, 96 * v9);
  *((_QWORD *)a4 + 2) = 0;
LABEL_21:
  swift_bridgeObjectRelease();
  return v11;
}

_QWORD *sub_1B1C66610(char a1, uint64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2)
      v8 = a2;
    if (v7 < a2)
      a2 = v8;
    else
      a2 = v7;
  }
  v9 = a4[2];
  if (a2 <= v9)
    v10 = a4[2];
  else
    v10 = a2;
  if (v10)
  {
    sub_1B1A02758(0, &qword_1ED4B7A70, (uint64_t)&type metadata for NoHeapTextureAllocator.UnusedTexture, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v11 = (_QWORD *)swift_allocObject();
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    v11[2] = v9;
    v11[3] = 2 * (v13 >> 4);
    v14 = v11 + 4;
    if ((a1 & 1) != 0)
      goto LABEL_14;
LABEL_22:
    sub_1B1C6CEA0(0, v9, (unint64_t)v14, (uint64_t)a4);
    goto LABEL_23;
  }
  v11 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v14 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
  if ((a1 & 1) == 0)
    goto LABEL_22;
LABEL_14:
  if (v11 != a4 || v14 >= &a4[2 * v9 + 4])
    memmove(v14, a4 + 4, 16 * v9);
  a4[2] = 0;
LABEL_23:
  swift_bridgeObjectRelease();
  return v11;
}

char *sub_1B1C66718(char a1, uint64_t a2, char a3, char *a4)
{
  unint64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  int64_t v13;
  char *v14;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2)
      v8 = a2;
    if (v7 < a2)
      a2 = v8;
    else
      a2 = v7;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (a2 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = a2;
  if (v10)
  {
    sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAFB0, MEMORY[0x1E0DEE068], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v11 = (char *)swift_allocObject();
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 31;
    *((_QWORD *)v11 + 2) = v9;
    *((_QWORD *)v11 + 3) = v13 & 0xFFFFFFFFFFFFFFFELL;
    v14 = v11 + 32;
    if ((a1 & 1) != 0)
      goto LABEL_14;
LABEL_22:
    sub_1B1C6FC18(0, v9, v14, (uint64_t)a4);
    goto LABEL_23;
  }
  v11 = (char *)MEMORY[0x1E0DEE9D8];
  v14 = (char *)(MEMORY[0x1E0DEE9D8] + 32);
  if ((a1 & 1) == 0)
    goto LABEL_22;
LABEL_14:
  if (v11 != a4 || v14 >= &a4[2 * v9 + 32])
    memmove(v14, a4 + 32, 2 * v9);
  *((_QWORD *)a4 + 2) = 0;
LABEL_23:
  swift_bridgeObjectRelease();
  return v11;
}

_QWORD *sub_1B1C6681C(char a1, uint64_t a2, char a3, _QWORD *a4)
{
  return sub_1B1C66838(a1, a2, a3, a4, (void (*)(_QWORD))sub_1B1C79230, (unint64_t *)&qword_1EEF5CE10, (uint64_t)&type metadata for AuthoringNode.Port);
}

_QWORD *sub_1B1C66838(char a1, uint64_t a2, char a3, _QWORD *a4, void (*a5)(_QWORD), unint64_t *a6, uint64_t a7)
{
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  int64_t v17;
  uint64_t v18;
  _QWORD *v19;

  if ((a3 & 1) != 0)
  {
    v11 = a4[3];
    v12 = v11 >> 1;
    v13 = v11 & 0xFFFFFFFFFFFFFFFELL;
    if (v13 <= a2)
      v13 = a2;
    if (v12 < a2)
      a2 = v13;
    else
      a2 = v12;
  }
  v14 = a4[2];
  if (a2 <= v14)
    v15 = a4[2];
  else
    v15 = a2;
  if (v15)
  {
    a5(0);
    v16 = (_QWORD *)swift_allocObject();
    v17 = j__malloc_size(v16);
    v18 = v17 - 32;
    if (v17 < 32)
      v18 = v17 - 17;
    v16[2] = v14;
    v16[3] = 2 * (v18 >> 4);
    v19 = v16 + 4;
    if ((a1 & 1) != 0)
      goto LABEL_14;
LABEL_22:
    sub_1B1C70854(0, v14, (unint64_t)v19, (uint64_t)a4, a6, a7);
    goto LABEL_23;
  }
  v16 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v19 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
  if ((a1 & 1) == 0)
    goto LABEL_22;
LABEL_14:
  if (v16 != a4 || v19 >= &a4[2 * v14 + 4])
    memmove(v19, a4 + 4, 16 * v14);
  a4[2] = 0;
LABEL_23:
  swift_bridgeObjectRelease();
  return v16;
}

_QWORD *sub_1B1C66940(char a1, uint64_t a2, char a3, _QWORD *a4)
{
  return sub_1B1C65B44(a1, a2, a3, a4, &qword_1EEF5E8F0, (uint64_t)&type metadata for AnyType);
}

_QWORD *sub_1B1C66954(char a1, uint64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2)
      v8 = a2;
    if (v7 < a2)
      a2 = v8;
    else
      a2 = v7;
  }
  v9 = a4[2];
  if (a2 <= v9)
    v10 = a4[2];
  else
    v10 = a2;
  if (!v10)
  {
    v11 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
    if ((a1 & 1) != 0)
      goto LABEL_12;
LABEL_20:
    sub_1B1C72424(0, v9, (unint64_t)v13, (uint64_t)a4);
    goto LABEL_21;
  }
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAE18, (uint64_t)&type metadata for GraphEntityComponentPropertyReferences.ExportedDirectPropertyAssignment, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v11 = (_QWORD *)swift_allocObject();
  v12 = j__malloc_size(v11);
  v11[2] = v9;
  v11[3] = 2 * ((uint64_t)(v12 - 32) / 24);
  v13 = v11 + 4;
  if ((a1 & 1) == 0)
    goto LABEL_20;
LABEL_12:
  if (v11 != a4 || v13 >= &a4[3 * v9 + 4])
    memmove(v13, a4 + 4, 24 * v9);
  a4[2] = 0;
LABEL_21:
  swift_bridgeObjectRelease();
  return v11;
}

_QWORD *sub_1B1C66A74(char a1, uint64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2)
      v8 = a2;
    if (v7 < a2)
      a2 = v8;
    else
      a2 = v7;
  }
  v9 = a4[2];
  if (a2 <= v9)
    v10 = a4[2];
  else
    v10 = a2;
  if (v10)
  {
    sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAE00, (uint64_t)&type metadata for EntityComponentProperty, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v11 = (_QWORD *)swift_allocObject();
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    v11[2] = v9;
    v11[3] = 2 * (v13 >> 4);
    v14 = v11 + 4;
    if ((a1 & 1) != 0)
      goto LABEL_14;
LABEL_22:
    sub_1B1C6F778(0, v9, (unint64_t)v14, (uint64_t)a4);
    goto LABEL_23;
  }
  v11 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v14 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
  if ((a1 & 1) == 0)
    goto LABEL_22;
LABEL_14:
  if (v11 != a4 || v14 >= &a4[2 * v9 + 4])
    memmove(v14, a4 + 4, 16 * v9);
  a4[2] = 0;
LABEL_23:
  swift_bridgeObjectRelease();
  return v11;
}

_QWORD *sub_1B1C66B7C(char a1, uint64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2)
      v8 = a2;
    if (v7 < a2)
      a2 = v8;
    else
      a2 = v7;
  }
  v9 = a4[2];
  if (a2 <= v9)
    v10 = a4[2];
  else
    v10 = a2;
  if (!v10)
  {
    v11 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
    if ((a1 & 1) != 0)
      goto LABEL_12;
LABEL_20:
    sub_1B1C6D894(0, v9, (unint64_t)v13, (uint64_t)a4);
    goto LABEL_21;
  }
  sub_1B1A02758(0, &qword_1ED4BAE10, (uint64_t)&type metadata for EntityComponentPropertyLite, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v11 = (_QWORD *)swift_allocObject();
  v12 = j__malloc_size(v11);
  v11[2] = v9;
  v11[3] = 2 * ((uint64_t)(v12 - 32) / 56);
  v13 = v11 + 4;
  if ((a1 & 1) == 0)
    goto LABEL_20;
LABEL_12:
  if (v11 != a4 || v13 >= &a4[7 * v9 + 4])
    memmove(v13, a4 + 4, 56 * v9);
  a4[2] = 0;
LABEL_21:
  swift_bridgeObjectRelease();
  return v11;
}

_QWORD *sub_1B1C66CA0(char a1, uint64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2)
      v8 = a2;
    if (v7 < a2)
      a2 = v8;
    else
      a2 = v7;
  }
  v9 = a4[2];
  if (a2 <= v9)
    v10 = a4[2];
  else
    v10 = a2;
  if (v10)
  {
    sub_1B1791524(0, &qword_1EEF5CBA0, (uint64_t (*)(uint64_t))sub_1B1C71E70, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
    v11 = (_QWORD *)swift_allocObject();
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    v11[2] = v9;
    v11[3] = 2 * (v13 >> 4);
    v14 = v11 + 4;
    if ((a1 & 1) != 0)
      goto LABEL_14;
LABEL_22:
    sub_1B1C71358(0, v9, (unint64_t)v14, (uint64_t)a4);
    goto LABEL_23;
  }
  v11 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v14 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
  if ((a1 & 1) == 0)
    goto LABEL_22;
LABEL_14:
  if (v11 != a4 || v14 >= &a4[2 * v9 + 4])
    memmove(v14, a4 + 4, 16 * v9);
  a4[2] = 0;
LABEL_23:
  swift_bridgeObjectRelease();
  return v11;
}

char *sub_1B1C66DA8(char a1, uint64_t a2, char a3, char *a4)
{
  unint64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2)
      v8 = a2;
    if (v7 < a2)
      a2 = v8;
    else
      a2 = v7;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (a2 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = a2;
  if (v10)
  {
    sub_1B1A02758(0, (unint64_t *)&unk_1EEF5CBE0, (uint64_t)&type metadata for GraphScriptingConfig.EvaluationMode, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v11 = (char *)swift_allocObject();
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 25;
    *((_QWORD *)v11 + 2) = v9;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 3);
    v14 = v11 + 32;
    if ((a1 & 1) != 0)
      goto LABEL_14;
LABEL_22:
    sub_1B1C7018C(0, v9, v14, (uint64_t)a4);
    goto LABEL_23;
  }
  v11 = (char *)MEMORY[0x1E0DEE9D8];
  v14 = (char *)(MEMORY[0x1E0DEE9D8] + 32);
  if ((a1 & 1) == 0)
    goto LABEL_22;
LABEL_14:
  if (v11 != a4 || v14 >= &a4[8 * v9 + 32])
    memmove(v14, a4 + 32, 8 * v9);
  *((_QWORD *)a4 + 2) = 0;
LABEL_23:
  swift_bridgeObjectRelease();
  return v11;
}

_QWORD *sub_1B1C66EB0(char a1, uint64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2)
      v8 = a2;
    if (v7 < a2)
      a2 = v8;
    else
      a2 = v7;
  }
  v9 = a4[2];
  if (a2 <= v9)
    v10 = a4[2];
  else
    v10 = a2;
  if (!v10)
  {
    v11 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
    if ((a1 & 1) != 0)
      goto LABEL_12;
LABEL_20:
    sub_1B1C6C92C(0, v9, (unint64_t)v13, (uint64_t)a4);
    goto LABEL_21;
  }
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAE60, (uint64_t)&type metadata for Scheduler.Job, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v11 = (_QWORD *)swift_allocObject();
  v12 = j__malloc_size(v11);
  v11[2] = v9;
  v11[3] = 2 * ((uint64_t)(v12 - 32) / 96);
  v13 = v11 + 4;
  if ((a1 & 1) == 0)
    goto LABEL_20;
LABEL_12:
  if (v11 != a4 || v13 >= &a4[12 * v9 + 4])
    memmove(v13, a4 + 4, 96 * v9);
  a4[2] = 0;
LABEL_21:
  swift_bridgeObjectRelease();
  return v11;
}

char *sub_1B1C66FD0(char a1, uint64_t a2, char a3, char *a4)
{
  unint64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2)
      v8 = a2;
    if (v7 < a2)
      a2 = v8;
    else
      a2 = v7;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (a2 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = a2;
  if (v10)
  {
    sub_1B1C79E3C();
    v11 = (char *)swift_allocObject();
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v9;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
    v14 = v11 + 32;
    if ((a1 & 1) != 0)
      goto LABEL_14;
LABEL_22:
    sub_1B1C6C734(0, v9, v14, (uint64_t)a4);
    goto LABEL_23;
  }
  v11 = (char *)MEMORY[0x1E0DEE9D8];
  v14 = (char *)(MEMORY[0x1E0DEE9D8] + 32);
  if ((a1 & 1) == 0)
    goto LABEL_22;
LABEL_14:
  if (v11 != a4 || v14 >= &a4[16 * v9 + 32])
    memmove(v14, a4 + 32, 16 * v9);
  *((_QWORD *)a4 + 2) = 0;
LABEL_23:
  swift_bridgeObjectRelease();
  return v11;
}

_QWORD *sub_1B1C670C0(char a1, uint64_t a2, char a3, _QWORD *a4)
{
  return sub_1B1C6770C(a1, a2, a3, a4, &qword_1ED4BAD78, (unint64_t *)&qword_1ED4B8C70);
}

_QWORD *sub_1B1C670DC(char a1, uint64_t a2, char a3, _QWORD *a4, unint64_t *a5, uint64_t (*a6)(uint64_t))
{
  unint64_t v8;
  uint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  int64_t v14;
  uint64_t v15;
  _QWORD *v16;

  if ((a3 & 1) != 0)
  {
    v8 = a4[3];
    v9 = v8 >> 1;
    v10 = v8 & 0xFFFFFFFFFFFFFFFELL;
    if (v10 <= a2)
      v10 = a2;
    if (v9 < a2)
      a2 = v10;
    else
      a2 = v9;
  }
  v11 = a4[2];
  if (a2 <= v11)
    v12 = a4[2];
  else
    v12 = a2;
  if (v12)
  {
    sub_1B1791524(0, a5, a6, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
    v13 = (_QWORD *)swift_allocObject();
    v14 = j__malloc_size(v13);
    v15 = v14 - 32;
    if (v14 < 32)
      v15 = v14 - 17;
    v13[2] = v11;
    v13[3] = 2 * (v15 >> 4);
    v16 = v13 + 4;
    if ((a1 & 1) != 0)
      goto LABEL_14;
LABEL_22:
    sub_1B1C7276C(0, v11, (unint64_t)v16, (uint64_t)a4);
    goto LABEL_23;
  }
  v13 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v16 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
  if ((a1 & 1) == 0)
    goto LABEL_22;
LABEL_14:
  if (v13 != a4 || v16 >= &a4[2 * v11 + 4])
    memmove(v16, a4 + 4, 16 * v11);
  a4[2] = 0;
LABEL_23:
  swift_bridgeObjectRelease();
  return v13;
}

char *sub_1B1C671DC(char a1, uint64_t a2, char a3, char *a4)
{
  unint64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2)
      v8 = a2;
    if (v7 < a2)
      a2 = v8;
    else
      a2 = v7;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (a2 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = a2;
  if (v10)
  {
    sub_1B1791524(0, &qword_1EEF5CF18, (uint64_t (*)(uint64_t))type metadata accessor for RGPass, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
    v11 = (char *)swift_allocObject();
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 25;
    *((_QWORD *)v11 + 2) = v9;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 3);
    v14 = v11 + 32;
    if ((a1 & 1) != 0)
      goto LABEL_14;
LABEL_22:
    sub_1B1C6CA14(0, v9, v14, (uint64_t)a4);
    goto LABEL_23;
  }
  v11 = (char *)MEMORY[0x1E0DEE9D8];
  v14 = (char *)(MEMORY[0x1E0DEE9D8] + 32);
  if ((a1 & 1) == 0)
    goto LABEL_22;
LABEL_14:
  if (v11 != a4 || v14 >= &a4[8 * v9 + 32])
    memmove(v14, a4 + 32, 8 * v9);
  *((_QWORD *)a4 + 2) = 0;
LABEL_23:
  swift_bridgeObjectRelease();
  return v11;
}

_QWORD *sub_1B1C672E4(char a1, int64_t a2, char a3, _QWORD *a4, unint64_t *a5, uint64_t a6, void (*a7)(_QWORD, int64_t, _QWORD *, _QWORD *))
{
  unint64_t v10;
  int64_t v11;
  int64_t v12;
  int64_t v13;
  int64_t v14;
  _QWORD *v15;
  int64_t v16;
  uint64_t v17;
  _QWORD *v18;

  if ((a3 & 1) != 0)
  {
    v10 = a4[3];
    v11 = v10 >> 1;
    v12 = v10 & 0xFFFFFFFFFFFFFFFELL;
    if (v12 <= a2)
      v12 = a2;
    if (v11 < a2)
      a2 = v12;
    else
      a2 = v11;
  }
  v13 = a4[2];
  if (a2 <= v13)
    v14 = a4[2];
  else
    v14 = a2;
  if (v14)
  {
    sub_1B1A02758(0, a5, a6, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v15 = (_QWORD *)swift_allocObject();
    v16 = j__malloc_size(v15);
    v17 = v16 - 32;
    if (v16 < 32)
      v17 = v16 - 1;
    v15[2] = v13;
    v15[3] = 2 * (v17 >> 5);
    v18 = v15 + 4;
    if ((a1 & 1) != 0)
      goto LABEL_14;
LABEL_22:
    a7(0, v13, v18, a4);
    goto LABEL_23;
  }
  v15 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v18 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
  if ((a1 & 1) == 0)
    goto LABEL_22;
LABEL_14:
  if (v15 != a4 || v18 >= &a4[4 * v13 + 4])
    memmove(v18, a4 + 4, 32 * v13);
  a4[2] = 0;
LABEL_23:
  swift_bridgeObjectRelease();
  return v15;
}

char *sub_1B1C673F0(char a1, uint64_t a2, char a3, char *a4)
{
  unint64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2)
      v8 = a2;
    if (v7 < a2)
      a2 = v8;
    else
      a2 = v7;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (a2 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = a2;
  if (v10)
  {
    sub_1B1A02758(0, &qword_1EEF5CF20, (uint64_t)&type metadata for RGGraphTranslator.LoadResourceInfo, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v11 = (char *)swift_allocObject();
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v9;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
    v14 = v11 + 32;
    if ((a1 & 1) != 0)
      goto LABEL_14;
LABEL_22:
    sub_1B1C6C734(0, v9, v14, (uint64_t)a4);
    goto LABEL_23;
  }
  v11 = (char *)MEMORY[0x1E0DEE9D8];
  v14 = (char *)(MEMORY[0x1E0DEE9D8] + 32);
  if ((a1 & 1) == 0)
    goto LABEL_22;
LABEL_14:
  if (v11 != a4 || v14 >= &a4[16 * v9 + 32])
    memmove(v14, a4 + 32, 16 * v9);
  *((_QWORD *)a4 + 2) = 0;
LABEL_23:
  swift_bridgeObjectRelease();
  return v11;
}

_QWORD *sub_1B1C674F8(char a1, uint64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2)
      v8 = a2;
    if (v7 < a2)
      a2 = v8;
    else
      a2 = v7;
  }
  v9 = a4[2];
  if (a2 <= v9)
    v10 = a4[2];
  else
    v10 = a2;
  if (v10)
  {
    sub_1B1A02758(0, (unint64_t *)&unk_1EEF5CDF0, (uint64_t)&type metadata for TexturePreview, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v11 = (_QWORD *)swift_allocObject();
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 1;
    v11[2] = v9;
    v11[3] = 2 * (v13 >> 5);
    v14 = v11 + 4;
    if ((a1 & 1) != 0)
      goto LABEL_14;
LABEL_22:
    sub_1B1C77B18(0, v9, (unint64_t)v14, (uint64_t)a4);
    goto LABEL_23;
  }
  v11 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v14 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
  if ((a1 & 1) == 0)
    goto LABEL_22;
LABEL_14:
  if (v11 != a4 || v14 >= &a4[4 * v9 + 4])
    memmove(v14, a4 + 4, 32 * v9);
  a4[2] = 0;
LABEL_23:
  swift_bridgeObjectRelease();
  return v11;
}

char *sub_1B1C67600(char a1, uint64_t a2, char a3, char *a4)
{
  unint64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2)
      v8 = a2;
    if (v7 < a2)
      a2 = v8;
    else
      a2 = v7;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (a2 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = a2;
  if (v10)
  {
    sub_1B1C71F68();
    v11 = (char *)swift_allocObject();
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v9;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
    v14 = v11 + 32;
    if ((a1 & 1) != 0)
      goto LABEL_14;
LABEL_22:
    sub_1B1C6C734(0, v9, v14, (uint64_t)a4);
    goto LABEL_23;
  }
  v11 = (char *)MEMORY[0x1E0DEE9D8];
  v14 = (char *)(MEMORY[0x1E0DEE9D8] + 32);
  if ((a1 & 1) == 0)
    goto LABEL_22;
LABEL_14:
  if (v11 != a4 || v14 >= &a4[16 * v9 + 32])
    memmove(v14, a4 + 32, 16 * v9);
  *((_QWORD *)a4 + 2) = 0;
LABEL_23:
  swift_bridgeObjectRelease();
  return v11;
}

_QWORD *sub_1B1C676F0(char a1, uint64_t a2, char a3, _QWORD *a4)
{
  return sub_1B1C6770C(a1, a2, a3, a4, &qword_1ED4BAFC0, &qword_1ED4BB128);
}

_QWORD *sub_1B1C6770C(char a1, uint64_t a2, char a3, _QWORD *a4, unint64_t *a5, unint64_t *a6)
{
  unint64_t v9;
  uint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  size_t v15;
  _QWORD *v16;

  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    v11 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if (v11 <= a2)
      v11 = a2;
    if (v10 < a2)
      a2 = v11;
    else
      a2 = v10;
  }
  v12 = a4[2];
  if (a2 <= v12)
    v13 = a4[2];
  else
    v13 = a2;
  if (!v13)
  {
    v14 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    v16 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
    if ((a1 & 1) != 0)
      goto LABEL_12;
LABEL_20:
    sub_1B1C6D97C(0, v12, (unint64_t)v16, (uint64_t)a4, a6);
    goto LABEL_21;
  }
  sub_1B1C71BAC(0, a5, a6);
  v14 = (_QWORD *)swift_allocObject();
  v15 = j__malloc_size(v14);
  v14[2] = v12;
  v14[3] = 2 * ((uint64_t)(v15 - 32) / 40);
  v16 = v14 + 4;
  if ((a1 & 1) == 0)
    goto LABEL_20;
LABEL_12:
  if (v14 != a4 || v16 >= &a4[5 * v12 + 4])
    memmove(v16, a4 + 4, 40 * v12);
  a4[2] = 0;
LABEL_21:
  swift_bridgeObjectRelease();
  return v14;
}

_QWORD *sub_1B1C67838(char a1, uint64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2)
      v8 = a2;
    if (v7 < a2)
      a2 = v8;
    else
      a2 = v7;
  }
  v9 = a4[2];
  if (a2 <= v9)
    v10 = a4[2];
  else
    v10 = a2;
  if (v10)
  {
    sub_1B1A02758(0, &qword_1ED4BAFF0, MEMORY[0x1E0DEE9B8] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v11 = (_QWORD *)swift_allocObject();
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 1;
    v11[2] = v9;
    v11[3] = 2 * (v13 >> 5);
    v14 = v11 + 4;
    if ((a1 & 1) != 0)
      goto LABEL_14;
LABEL_22:
    sub_1B1C6FA38(0, v9, (unint64_t)v14, (uint64_t)a4);
    goto LABEL_23;
  }
  v11 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v14 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
  if ((a1 & 1) == 0)
    goto LABEL_22;
LABEL_14:
  if (v11 != a4 || v14 >= &a4[4 * v9 + 4])
    memmove(v14, a4 + 4, 32 * v9);
  a4[2] = 0;
LABEL_23:
  swift_bridgeObjectRelease();
  return v11;
}

char *sub_1B1C67944(char a1, uint64_t a2, char a3, char *a4)
{
  return sub_1B1C632C0(a1, a2, a3, a4, &qword_1ED4BAF08, MEMORY[0x1E0DEABD0]);
}

char *sub_1B1C67958(char a1, uint64_t a2, char a3, char *a4)
{
  unint64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2)
      v8 = a2;
    if (v7 < a2)
      a2 = v8;
    else
      a2 = v7;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (a2 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = a2;
  if (!v10)
  {
    v11 = (char *)MEMORY[0x1E0DEE9D8];
    v13 = (char *)(MEMORY[0x1E0DEE9D8] + 32);
    if ((a1 & 1) != 0)
      goto LABEL_12;
LABEL_20:
    sub_1B1C77BFC(0, v9, v13, (uint64_t)a4);
    goto LABEL_21;
  }
  sub_1B1C7912C();
  v11 = (char *)swift_allocObject();
  v12 = j__malloc_size(v11);
  *((_QWORD *)v11 + 2) = v9;
  *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 12);
  v13 = v11 + 32;
  if ((a1 & 1) == 0)
    goto LABEL_20;
LABEL_12:
  if (v11 != a4 || v13 >= &a4[12 * v9 + 32])
    memmove(v13, a4 + 32, 12 * v9);
  *((_QWORD *)a4 + 2) = 0;
LABEL_21:
  swift_bridgeObjectRelease();
  return v11;
}

_QWORD *sub_1B1C67A60(char a1, uint64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2)
      v8 = a2;
    if (v7 < a2)
      a2 = v8;
    else
      a2 = v7;
  }
  v9 = a4[2];
  if (a2 <= v9)
    v10 = a4[2];
  else
    v10 = a2;
  if (!v10)
  {
    v11 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
    if ((a1 & 1) != 0)
      goto LABEL_12;
LABEL_20:
    sub_1B1C77CE4(0, v9, (unint64_t)v13, (uint64_t)a4);
    goto LABEL_21;
  }
  sub_1B1A02758(0, (unint64_t *)&unk_1EEF5CC00, (uint64_t)&type metadata for ScriptDiagnostic, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v11 = (_QWORD *)swift_allocObject();
  v12 = j__malloc_size(v11);
  v11[2] = v9;
  v11[3] = 2 * ((uint64_t)(v12 - 32) / 56);
  v13 = v11 + 4;
  if ((a1 & 1) == 0)
    goto LABEL_20;
LABEL_12:
  if (v11 != a4 || v13 >= &a4[7 * v9 + 4])
    memmove(v13, a4 + 4, 56 * v9);
  a4[2] = 0;
LABEL_21:
  swift_bridgeObjectRelease();
  return v11;
}

_QWORD *sub_1B1C67B84(char a1, uint64_t a2, char a3, _QWORD *a4)
{
  return sub_1B1C67BBC(a1, a2, a3, a4, (void (*)(_QWORD))sub_1B1C780A4, &qword_1EEF5AB90);
}

_QWORD *sub_1B1C67BA0(char a1, uint64_t a2, char a3, _QWORD *a4)
{
  return sub_1B1C67BBC(a1, a2, a3, a4, (void (*)(_QWORD))sub_1B1C78030, (unint64_t *)&unk_1EEF5AB80);
}

_QWORD *sub_1B1C67BBC(char a1, uint64_t a2, char a3, _QWORD *a4, void (*a5)(_QWORD), unint64_t *a6)
{
  unint64_t v9;
  uint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  size_t v15;
  _QWORD *v16;

  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    v11 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if (v11 <= a2)
      v11 = a2;
    if (v10 < a2)
      a2 = v11;
    else
      a2 = v10;
  }
  v12 = a4[2];
  if (a2 <= v12)
    v13 = a4[2];
  else
    v13 = a2;
  if (!v13)
  {
    v14 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    v16 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
    if ((a1 & 1) != 0)
      goto LABEL_12;
LABEL_20:
    sub_1B1C70380(0, v12, (unint64_t)v16, (uint64_t)a4, a6);
    goto LABEL_21;
  }
  a5(0);
  v14 = (_QWORD *)swift_allocObject();
  v15 = j__malloc_size(v14);
  v14[2] = v12;
  v14[3] = 2 * ((uint64_t)(v15 - 32) / 40);
  v16 = v14 + 4;
  if ((a1 & 1) == 0)
    goto LABEL_20;
LABEL_12:
  if (v14 != a4 || v16 >= &a4[5 * v12 + 4])
    memmove(v16, a4 + 4, 40 * v12);
  a4[2] = 0;
LABEL_21:
  swift_bridgeObjectRelease();
  return v14;
}

_QWORD *sub_1B1C67CD8(char a1, uint64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2)
      v8 = a2;
    if (v7 < a2)
      a2 = v8;
    else
      a2 = v7;
  }
  v9 = a4[2];
  if (a2 <= v9)
    v10 = a4[2];
  else
    v10 = a2;
  if (!v10)
  {
    v11 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
    if ((a1 & 1) != 0)
      goto LABEL_12;
LABEL_20:
    sub_1B1C70268(0, v9, (unint64_t)v13, (uint64_t)a4);
    goto LABEL_21;
  }
  sub_1B1C77DE0();
  v11 = (_QWORD *)swift_allocObject();
  v12 = j__malloc_size(v11);
  v11[2] = v9;
  v11[3] = 2 * ((uint64_t)(v12 - 32) / 48);
  v13 = v11 + 4;
  if ((a1 & 1) == 0)
    goto LABEL_20;
LABEL_12:
  if (v11 != a4 || v13 >= &a4[6 * v9 + 4])
    memmove(v13, a4 + 4, 48 * v9);
  a4[2] = 0;
LABEL_21:
  swift_bridgeObjectRelease();
  return v11;
}

_QWORD *sub_1B1C67DE0(char a1, uint64_t a2, char a3, _QWORD *a4)
{
  return sub_1B1C67DF4(a1, a2, a3, a4, (unint64_t *)&unk_1ED4BAD60, (uint64_t)&type metadata for ShaderArgument);
}

_QWORD *sub_1B1C67DF4(char a1, uint64_t a2, char a3, _QWORD *a4, unint64_t *a5, uint64_t a6)
{
  unint64_t v8;
  uint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  int64_t v14;
  uint64_t v15;
  _QWORD *v16;

  if ((a3 & 1) != 0)
  {
    v8 = a4[3];
    v9 = v8 >> 1;
    v10 = v8 & 0xFFFFFFFFFFFFFFFELL;
    if (v10 <= a2)
      v10 = a2;
    if (v9 < a2)
      a2 = v10;
    else
      a2 = v9;
  }
  v11 = a4[2];
  if (a2 <= v11)
    v12 = a4[2];
  else
    v12 = a2;
  if (v12)
  {
    sub_1B1A02758(0, a5, a6, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v13 = (_QWORD *)swift_allocObject();
    v14 = j__malloc_size(v13);
    v15 = v14 - 32;
    if (v14 < 32)
      v15 = v14 + 31;
    v13[2] = v11;
    v13[3] = 2 * (v15 >> 6);
    v16 = v13 + 4;
    if ((a1 & 1) != 0)
      goto LABEL_14;
LABEL_22:
    sub_1B1C7250C(0, v11, (unint64_t)v16, (uint64_t)a4);
    goto LABEL_23;
  }
  v13 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v16 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
  if ((a1 & 1) == 0)
    goto LABEL_22;
LABEL_14:
  if (v13 != a4 || v16 >= &a4[8 * v11 + 4])
    memmove(v16, a4 + 4, v11 << 6);
  a4[2] = 0;
LABEL_23:
  swift_bridgeObjectRelease();
  return v13;
}

_QWORD *sub_1B1C67F04(char a1, uint64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2)
      v8 = a2;
    if (v7 < a2)
      a2 = v8;
    else
      a2 = v7;
  }
  v9 = a4[2];
  if (a2 <= v9)
    v10 = a4[2];
  else
    v10 = a2;
  if (v10)
  {
    sub_1B1C71EF4();
    v11 = (_QWORD *)swift_allocObject();
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 + 31;
    v11[2] = v9;
    v11[3] = 2 * (v13 >> 6);
    v14 = v11 + 4;
    if ((a1 & 1) != 0)
      goto LABEL_14;
LABEL_22:
    sub_1B1C71240(0, v9, (unint64_t)v14, (uint64_t)a4);
    goto LABEL_23;
  }
  v11 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v14 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
  if ((a1 & 1) == 0)
    goto LABEL_22;
LABEL_14:
  if (v11 != a4 || v14 >= &a4[8 * v9 + 4])
    memmove(v14, a4 + 4, v9 << 6);
  a4[2] = 0;
LABEL_23:
  swift_bridgeObjectRelease();
  return v11;
}

_QWORD *sub_1B1C67FF4(char a1, uint64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2)
      v8 = a2;
    if (v7 < a2)
      a2 = v8;
    else
      a2 = v7;
  }
  v9 = a4[2];
  if (a2 <= v9)
    v10 = a4[2];
  else
    v10 = a2;
  if (!v10)
  {
    v11 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
    if ((a1 & 1) != 0)
      goto LABEL_12;
LABEL_20:
    sub_1B1C7144C(0, v9, (unint64_t)v13, (uint64_t)a4);
    goto LABEL_21;
  }
  sub_1B1A02758(0, &qword_1EEF5CDC8, (uint64_t)&_s8MetadataVN, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v11 = (_QWORD *)swift_allocObject();
  v12 = j__malloc_size(v11);
  v11[2] = v9;
  v11[3] = 2 * ((uint64_t)(v12 - 32) / 88);
  v13 = v11 + 4;
  if ((a1 & 1) == 0)
    goto LABEL_20;
LABEL_12:
  if (v11 != a4 || v13 >= &a4[11 * v9 + 4])
    memmove(v13, a4 + 4, 88 * v9);
  a4[2] = 0;
LABEL_21:
  swift_bridgeObjectRelease();
  return v11;
}

_QWORD *sub_1B1C68118(char a1, uint64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2)
      v8 = a2;
    if (v7 < a2)
      a2 = v8;
    else
      a2 = v7;
  }
  v9 = a4[2];
  if (a2 <= v9)
    v10 = a4[2];
  else
    v10 = a2;
  if (v10)
  {
    sub_1B1A02758(0, &qword_1EEF5CC68, (uint64_t)&type metadata for MeshPart, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v11 = (_QWORD *)swift_allocObject();
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 + 95;
    v11[2] = v9;
    v11[3] = 2 * (v13 >> 7);
    v14 = v11 + 4;
    if ((a1 & 1) != 0)
      goto LABEL_14;
LABEL_22:
    sub_1B1C6FCF8(0, v9, (unint64_t)v14, (uint64_t)a4);
    goto LABEL_23;
  }
  v11 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v14 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
  if ((a1 & 1) == 0)
    goto LABEL_22;
LABEL_14:
  if (v11 != a4 || v14 >= &a4[16 * v9 + 4])
    memmove(v14, a4 + 4, v9 << 7);
  a4[2] = 0;
LABEL_23:
  swift_bridgeObjectRelease();
  return v11;
}

_QWORD *sub_1B1C68220(char a1, uint64_t a2, char a3, _QWORD *a4)
{
  return sub_1B1C68234(a1, a2, a3, a4, &qword_1EEF5CC70, (uint64_t)&type metadata for MeshBuffer);
}

_QWORD *sub_1B1C68234(char a1, uint64_t a2, char a3, _QWORD *a4, unint64_t *a5, uint64_t a6)
{
  unint64_t v8;
  uint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  size_t v14;
  _QWORD *v15;

  if ((a3 & 1) != 0)
  {
    v8 = a4[3];
    v9 = v8 >> 1;
    v10 = v8 & 0xFFFFFFFFFFFFFFFELL;
    if (v10 <= a2)
      v10 = a2;
    if (v9 < a2)
      a2 = v10;
    else
      a2 = v9;
  }
  v11 = a4[2];
  if (a2 <= v11)
    v12 = a4[2];
  else
    v12 = a2;
  if (!v12)
  {
    v13 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    v15 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
    if ((a1 & 1) != 0)
      goto LABEL_12;
LABEL_20:
    sub_1B1C700A4(0, v11, (unint64_t)v15, (uint64_t)a4);
    goto LABEL_21;
  }
  sub_1B1A02758(0, a5, a6, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v13 = (_QWORD *)swift_allocObject();
  v14 = j__malloc_size(v13);
  v13[2] = v11;
  v13[3] = 2 * ((uint64_t)(v14 - 32) / 40);
  v15 = v13 + 4;
  if ((a1 & 1) == 0)
    goto LABEL_20;
LABEL_12:
  if (v13 != a4 || v15 >= &a4[5 * v11 + 4])
    memmove(v15, a4 + 4, 40 * v11);
  a4[2] = 0;
LABEL_21:
  swift_bridgeObjectRelease();
  return v13;
}

char *sub_1B1C68354(char a1, uint64_t a2, char a3, char *a4)
{
  unint64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2)
      v8 = a2;
    if (v7 < a2)
      a2 = v8;
    else
      a2 = v7;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (a2 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = a2;
  if (v10)
  {
    sub_1B1791524(0, &qword_1EEF5CD70, (uint64_t (*)(uint64_t))type metadata accessor for vfx_vertex_attribute, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
    v11 = (char *)swift_allocObject();
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 25;
    *((_QWORD *)v11 + 2) = v9;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 3);
    v14 = v11 + 32;
    if ((a1 & 1) != 0)
      goto LABEL_14;
LABEL_22:
    sub_1B1C6CA14(0, v9, v14, (uint64_t)a4);
    goto LABEL_23;
  }
  v11 = (char *)MEMORY[0x1E0DEE9D8];
  v14 = (char *)(MEMORY[0x1E0DEE9D8] + 32);
  if ((a1 & 1) == 0)
    goto LABEL_22;
LABEL_14:
  if (v11 != a4 || v14 >= &a4[8 * v9 + 32])
    memmove(v14, a4 + 32, 8 * v9);
  *((_QWORD *)a4 + 2) = 0;
LABEL_23:
  swift_bridgeObjectRelease();
  return v11;
}

_QWORD *sub_1B1C6845C(char a1, uint64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2)
      v8 = a2;
    if (v7 < a2)
      a2 = v8;
    else
      a2 = v7;
  }
  v9 = a4[2];
  if (a2 <= v9)
    v10 = a4[2];
  else
    v10 = a2;
  if (!v10)
  {
    v11 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
    if ((a1 & 1) != 0)
      goto LABEL_12;
LABEL_20:
    sub_1B1C6FB20(0, v9, (unint64_t)v13, (uint64_t)a4);
    goto LABEL_21;
  }
  sub_1B1791524(0, &qword_1EEF5CC78, (uint64_t (*)(uint64_t))sub_1B1C7826C, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  v11 = (_QWORD *)swift_allocObject();
  v12 = j__malloc_size(v11);
  v11[2] = v9;
  v11[3] = 2 * ((uint64_t)(v12 - 32) / 24);
  v13 = v11 + 4;
  if ((a1 & 1) == 0)
    goto LABEL_20;
LABEL_12:
  if (v11 != a4 || v13 >= &a4[3 * v9 + 4])
    memmove(v13, a4 + 4, 24 * v9);
  a4[2] = 0;
LABEL_21:
  swift_bridgeObjectRelease();
  return v11;
}

_QWORD *sub_1B1C6857C(char a1, uint64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2)
      v8 = a2;
    if (v7 < a2)
      a2 = v8;
    else
      a2 = v7;
  }
  v9 = a4[2];
  if (a2 <= v9)
    v10 = a4[2];
  else
    v10 = a2;
  if (v10)
  {
    sub_1B1791524(0, &qword_1ED4BB018, (uint64_t (*)(uint64_t))sub_1B1C78EE4, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
    v11 = (_QWORD *)swift_allocObject();
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    v11[2] = v9;
    v11[3] = 2 * (v13 >> 4);
    v14 = v11 + 4;
    if ((a1 & 1) != 0)
      goto LABEL_14;
LABEL_22:
    sub_1B1C77E54(0, v9, (unint64_t)v14, (uint64_t)a4);
    goto LABEL_23;
  }
  v11 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v14 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
  if ((a1 & 1) == 0)
    goto LABEL_22;
LABEL_14:
  if (v11 != a4 || v14 >= &a4[2 * v9 + 4])
    memmove(v14, a4 + 4, 16 * v9);
  a4[2] = 0;
LABEL_23:
  swift_bridgeObjectRelease();
  return v11;
}

_QWORD *sub_1B1C68684(char a1, uint64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2)
      v8 = a2;
    if (v7 < a2)
      a2 = v8;
    else
      a2 = v7;
  }
  v9 = a4[2];
  if (a2 <= v9)
    v10 = a4[2];
  else
    v10 = a2;
  if (v10)
  {
    sub_1B1C78118();
    v11 = (_QWORD *)swift_allocObject();
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    v11[2] = v9;
    v11[3] = 2 * (v13 >> 4);
    v14 = v11 + 4;
    if ((a1 & 1) != 0)
      goto LABEL_14;
LABEL_22:
    sub_1B1C6F584(0, v9, (unint64_t)v14, (uint64_t)a4);
    goto LABEL_23;
  }
  v11 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v14 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
  if ((a1 & 1) == 0)
    goto LABEL_22;
LABEL_14:
  if (v11 != a4 || v14 >= &a4[2 * v9 + 4])
    memmove(v14, a4 + 4, 16 * v9);
  a4[2] = 0;
LABEL_23:
  swift_bridgeObjectRelease();
  return v11;
}

char *sub_1B1C68774(char a1, uint64_t a2, char a3, char *a4)
{
  unint64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2)
      v8 = a2;
    if (v7 < a2)
      a2 = v8;
    else
      a2 = v7;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (a2 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = a2;
  if (!v10)
  {
    v11 = (char *)MEMORY[0x1E0DEE9D8];
    v13 = (char *)(MEMORY[0x1E0DEE9D8] + 32);
    if ((a1 & 1) != 0)
      goto LABEL_12;
LABEL_20:
    sub_1B1C77F48(0, v9, v13, (uint64_t)a4);
    goto LABEL_21;
  }
  sub_1B1791524(0, (unint64_t *)&unk_1EEF5BAC0, (uint64_t (*)(uint64_t))type metadata accessor for MTLViewport, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  v11 = (char *)swift_allocObject();
  v12 = j__malloc_size(v11);
  *((_QWORD *)v11 + 2) = v9;
  *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 48);
  v13 = v11 + 32;
  if ((a1 & 1) == 0)
    goto LABEL_20;
LABEL_12:
  if (v11 != a4 || v13 >= &a4[48 * v9 + 32])
    memmove(v13, a4 + 32, 48 * v9);
  *((_QWORD *)a4 + 2) = 0;
LABEL_21:
  swift_bridgeObjectRelease();
  return v11;
}

char *sub_1B1C68894(char a1, uint64_t a2, char a3, char *a4)
{
  unint64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2)
      v8 = a2;
    if (v7 < a2)
      a2 = v8;
    else
      a2 = v7;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (a2 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = a2;
  if (v10)
  {
    sub_1B1A02758(0, (unint64_t *)&unk_1EEF5AB70, (uint64_t)&type metadata for ParticleFlockingSolverData.Cell, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v11 = (char *)swift_allocObject();
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v9;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
    v14 = v11 + 32;
    if ((a1 & 1) != 0)
      goto LABEL_14;
LABEL_22:
    sub_1B1C6C734(0, v9, v14, (uint64_t)a4);
    goto LABEL_23;
  }
  v11 = (char *)MEMORY[0x1E0DEE9D8];
  v14 = (char *)(MEMORY[0x1E0DEE9D8] + 32);
  if ((a1 & 1) == 0)
    goto LABEL_22;
LABEL_14:
  if (v11 != a4 || v14 >= &a4[16 * v9 + 32])
    memmove(v14, a4 + 32, 16 * v9);
  *((_QWORD *)a4 + 2) = 0;
LABEL_23:
  swift_bridgeObjectRelease();
  return v11;
}

_QWORD *sub_1B1C6899C(char a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1B1C689B8(a1, a2, a3, a4, (unint64_t *)&unk_1EEF5AB40, (uint64_t)&type metadata for FlockingParticle, (void (*)(_QWORD, int64_t, _QWORD *, _QWORD *))sub_1B1C6D678);
}

_QWORD *sub_1B1C689B8(char a1, int64_t a2, char a3, _QWORD *a4, unint64_t *a5, uint64_t a6, void (*a7)(_QWORD, int64_t, _QWORD *, _QWORD *))
{
  unint64_t v10;
  int64_t v11;
  int64_t v12;
  int64_t v13;
  int64_t v14;
  _QWORD *v15;
  size_t v16;
  _QWORD *v17;

  if ((a3 & 1) != 0)
  {
    v10 = a4[3];
    v11 = v10 >> 1;
    v12 = v10 & 0xFFFFFFFFFFFFFFFELL;
    if (v12 <= a2)
      v12 = a2;
    if (v11 < a2)
      a2 = v12;
    else
      a2 = v11;
  }
  v13 = a4[2];
  if (a2 <= v13)
    v14 = a4[2];
  else
    v14 = a2;
  if (!v14)
  {
    v15 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    v17 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
    if ((a1 & 1) != 0)
      goto LABEL_12;
LABEL_20:
    a7(0, v13, v17, a4);
    goto LABEL_21;
  }
  sub_1B1A02758(0, a5, a6, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v15 = (_QWORD *)swift_allocObject();
  v16 = j__malloc_size(v15);
  v15[2] = v13;
  v15[3] = 2 * ((uint64_t)(v16 - 32) / 112);
  v17 = v15 + 4;
  if ((a1 & 1) == 0)
    goto LABEL_20;
LABEL_12:
  if (v15 != a4 || v17 >= &a4[14 * v13 + 4])
    memmove(v17, a4 + 4, 112 * v13);
  a4[2] = 0;
LABEL_21:
  swift_bridgeObjectRelease();
  return v15;
}

char *sub_1B1C68ADC(char a1, uint64_t a2, char a3, char *a4)
{
  unint64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2)
      v8 = a2;
    if (v7 < a2)
      a2 = v8;
    else
      a2 = v7;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (a2 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = a2;
  if (!v10)
  {
    v11 = (char *)MEMORY[0x1E0DEE9D8];
    v13 = (char *)(MEMORY[0x1E0DEE9D8] + 32);
    if ((a1 & 1) != 0)
      goto LABEL_12;
LABEL_20:
    sub_1B1C78184(0, v9, v13, (uint64_t)a4);
    goto LABEL_21;
  }
  sub_1B1A02758(0, &qword_1EEF5CC60, (uint64_t)&type metadata for ShadowRenderingCommand, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v11 = (char *)swift_allocObject();
  v12 = j__malloc_size(v11);
  *((_QWORD *)v11 + 2) = v9;
  *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 160);
  v13 = v11 + 32;
  if ((a1 & 1) == 0)
    goto LABEL_20;
LABEL_12:
  if (v11 != a4 || v13 >= &a4[160 * v9 + 32])
    memmove(v13, a4 + 32, 160 * v9);
  *((_QWORD *)a4 + 2) = 0;
LABEL_21:
  swift_bridgeObjectRelease();
  return v11;
}

_QWORD *sub_1B1C68BF8(char a1, uint64_t a2, char a3, _QWORD *a4)
{
  return sub_1B1C68C30(a1, a2, a3, a4, (void (*)(_QWORD))sub_1B1C79030, (unint64_t *)&unk_1EEF5CDB8);
}

_QWORD *sub_1B1C68C14(char a1, uint64_t a2, char a3, _QWORD *a4)
{
  return sub_1B1C68C30(a1, a2, a3, a4, (void (*)(_QWORD))sub_1B1C790A0, &qword_1EEF5CDD8);
}

_QWORD *sub_1B1C68C30(char a1, uint64_t a2, char a3, _QWORD *a4, void (*a5)(_QWORD), unint64_t *a6)
{
  unint64_t v9;
  uint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  int64_t v15;
  uint64_t v16;
  _QWORD *v17;

  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    v11 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if (v11 <= a2)
      v11 = a2;
    if (v10 < a2)
      a2 = v11;
    else
      a2 = v10;
  }
  v12 = a4[2];
  if (a2 <= v12)
    v13 = a4[2];
  else
    v13 = a2;
  if (v13)
  {
    a5(0);
    v14 = (_QWORD *)swift_allocObject();
    v15 = j__malloc_size(v14);
    v16 = v15 - 32;
    if (v15 < 32)
      v16 = v15 - 1;
    v14[2] = v12;
    v14[3] = 2 * (v16 >> 5);
    v17 = v14 + 4;
    if ((a1 & 1) != 0)
      goto LABEL_14;
LABEL_22:
    sub_1B1C78380(0, v12, (unint64_t)v17, (uint64_t)a4, a6);
    goto LABEL_23;
  }
  v14 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v17 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
  if ((a1 & 1) == 0)
    goto LABEL_22;
LABEL_14:
  if (v14 != a4 || v17 >= &a4[4 * v12 + 4])
    memmove(v17, a4 + 4, 32 * v12);
  a4[2] = 0;
LABEL_23:
  swift_bridgeObjectRelease();
  return v14;
}

_QWORD *sub_1B1C68D38(char a1, uint64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2)
      v8 = a2;
    if (v7 < a2)
      a2 = v8;
    else
      a2 = v7;
  }
  v9 = a4[2];
  if (a2 <= v9)
    v10 = a4[2];
  else
    v10 = a2;
  if (!v10)
  {
    v11 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
    if ((a1 & 1) != 0)
      goto LABEL_12;
LABEL_20:
    sub_1B1C6E35C(0, v9, (unint64_t)v13, (uint64_t)a4);
    goto LABEL_21;
  }
  sub_1B1A02758(0, &qword_1EEF5CDA8, (uint64_t)&_s7ContextC14AssignmentInfoVN, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v11 = (_QWORD *)swift_allocObject();
  v12 = j__malloc_size(v11);
  v11[2] = v9;
  v11[3] = 2 * ((uint64_t)(v12 - 32) / 40);
  v13 = v11 + 4;
  if ((a1 & 1) == 0)
    goto LABEL_20;
LABEL_12:
  if (v11 != a4 || v13 >= &a4[5 * v9 + 4])
    memmove(v13, a4 + 4, 40 * v9);
  a4[2] = 0;
LABEL_21:
  swift_bridgeObjectRelease();
  return v11;
}

_QWORD *sub_1B1C68E54(char a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1B1C68E68(a1, a2, a3, a4, (void (*)(_QWORD))sub_1B1C78E40, (void (*)(_QWORD, int64_t, _QWORD *, _QWORD *))sub_1B1C6E02C);
}

_QWORD *sub_1B1C68E68(char a1, int64_t a2, char a3, _QWORD *a4, void (*a5)(_QWORD), void (*a6)(_QWORD, int64_t, _QWORD *, _QWORD *))
{
  unint64_t v9;
  int64_t v10;
  int64_t v11;
  int64_t v12;
  int64_t v13;
  _QWORD *v14;
  int64_t v15;
  uint64_t v16;
  _QWORD *v17;

  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    v11 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if (v11 <= a2)
      v11 = a2;
    if (v10 < a2)
      a2 = v11;
    else
      a2 = v10;
  }
  v12 = a4[2];
  if (a2 <= v12)
    v13 = a4[2];
  else
    v13 = a2;
  if (v13)
  {
    a5(0);
    v14 = (_QWORD *)swift_allocObject();
    v15 = j__malloc_size(v14);
    v16 = v15 - 32;
    if (v15 < 32)
      v16 = v15 - 25;
    v14[2] = v12;
    v14[3] = 2 * (v16 >> 3);
    v17 = v14 + 4;
    if ((a1 & 1) != 0)
      goto LABEL_14;
LABEL_22:
    a6(0, v12, v17, a4);
    goto LABEL_23;
  }
  v14 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v17 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
  if ((a1 & 1) == 0)
    goto LABEL_22;
LABEL_14:
  if (v14 != a4 || v17 >= &a4[v12 + 4])
    memmove(v17, a4 + 4, 8 * v12);
  a4[2] = 0;
LABEL_23:
  swift_bridgeObjectRelease();
  return v14;
}

_QWORD *sub_1B1C68F64(char a1, uint64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2)
      v8 = a2;
    if (v7 < a2)
      a2 = v8;
    else
      a2 = v7;
  }
  v9 = a4[2];
  if (a2 <= v9)
    v10 = a4[2];
  else
    v10 = a2;
  if (!v10)
  {
    v11 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
    if ((a1 & 1) != 0)
      goto LABEL_12;
LABEL_20:
    sub_1B1C78488(0, v9, (unint64_t)v13, (uint64_t)a4);
    goto LABEL_21;
  }
  sub_1B1C7830C();
  v11 = (_QWORD *)swift_allocObject();
  v12 = j__malloc_size(v11);
  v11[2] = v9;
  v11[3] = 2 * ((uint64_t)(v12 - 32) / 48);
  v13 = v11 + 4;
  if ((a1 & 1) == 0)
    goto LABEL_20;
LABEL_12:
  if (v11 != a4 || v13 >= &a4[6 * v9 + 4])
    memmove(v13, a4 + 4, 48 * v9);
  a4[2] = 0;
LABEL_21:
  swift_bridgeObjectRelease();
  return v11;
}

char *sub_1B1C69068(char a1, uint64_t a2, char a3, char *a4)
{
  unint64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2)
      v8 = a2;
    if (v7 < a2)
      a2 = v8;
    else
      a2 = v7;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (a2 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = a2;
  if (v10)
  {
    sub_1B1791524(0, &qword_1EEF5AB50, (uint64_t (*)(uint64_t))sub_1B1B20C38, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
    v11 = (char *)swift_allocObject();
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 1;
    *((_QWORD *)v11 + 2) = v9;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 5);
    v14 = v11 + 32;
    if ((a1 & 1) != 0)
      goto LABEL_14;
LABEL_22:
    sub_1B1C71534(0, v9, v14, (uint64_t)a4);
    goto LABEL_23;
  }
  v11 = (char *)MEMORY[0x1E0DEE9D8];
  v14 = (char *)(MEMORY[0x1E0DEE9D8] + 32);
  if ((a1 & 1) == 0)
    goto LABEL_22;
LABEL_14:
  if (v11 != a4 || v14 >= &a4[32 * v9 + 32])
    memmove(v14, a4 + 32, 32 * v9);
  *((_QWORD *)a4 + 2) = 0;
LABEL_23:
  swift_bridgeObjectRelease();
  return v11;
}

_QWORD *sub_1B1C69170(char a1, uint64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2)
      v8 = a2;
    if (v7 < a2)
      a2 = v8;
    else
      a2 = v7;
  }
  v9 = a4[2];
  if (a2 <= v9)
    v10 = a4[2];
  else
    v10 = a2;
  if (!v10)
  {
    v11 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
    if ((a1 & 1) != 0)
      goto LABEL_12;
LABEL_20:
    sub_1B1C6F85C(0, v9, (unint64_t)v13, (uint64_t)a4);
    goto LABEL_21;
  }
  sub_1B1791524(0, &qword_1EEF5CD88, (uint64_t (*)(uint64_t))sub_1B1C78F68, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  v11 = (_QWORD *)swift_allocObject();
  v12 = j__malloc_size(v11);
  v11[2] = v9;
  v11[3] = 2 * ((uint64_t)(v12 - 32) / 40);
  v13 = v11 + 4;
  if ((a1 & 1) == 0)
    goto LABEL_20;
LABEL_12:
  if (v11 != a4 || v13 >= &a4[5 * v9 + 4])
    memmove(v13, a4 + 4, 40 * v9);
  a4[2] = 0;
LABEL_21:
  swift_bridgeObjectRelease();
  return v11;
}

_QWORD *sub_1B1C6928C(char a1, uint64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2)
      v8 = a2;
    if (v7 < a2)
      a2 = v8;
    else
      a2 = v7;
  }
  v9 = a4[2];
  if (a2 <= v9)
    v10 = a4[2];
  else
    v10 = a2;
  if (v10)
  {
    sub_1B1A02758(0, &qword_1EEF5CD30, (uint64_t)&type metadata for GraphNodeLibrary.Entry, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v11 = (_QWORD *)swift_allocObject();
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    v11[2] = v9;
    v11[3] = 2 * (v13 >> 4);
    v14 = v11 + 4;
    if ((a1 & 1) != 0)
      goto LABEL_14;
LABEL_22:
    sub_1B1C78748(0, v9, (unint64_t)v14, (uint64_t)a4);
    goto LABEL_23;
  }
  v11 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v14 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
  if ((a1 & 1) == 0)
    goto LABEL_22;
LABEL_14:
  if (v11 != a4 || v14 >= &a4[2 * v9 + 4])
    memmove(v14, a4 + 4, 16 * v9);
  a4[2] = 0;
LABEL_23:
  swift_bridgeObjectRelease();
  return v11;
}

char *sub_1B1C69394(char a1, uint64_t a2, char a3, char *a4)
{
  return sub_1B1C693B8(a1, a2, a3, a4, &qword_1EEF5CD38, (unint64_t *)&unk_1EEF5CD40, (unint64_t *)&qword_1EEF5C6C0);
}

char *sub_1B1C693B8(char a1, uint64_t a2, char a3, char *a4, unint64_t *a5, unint64_t *a6, unint64_t *a7)
{
  unint64_t v9;
  uint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int64_t v15;
  uint64_t v16;
  char *v17;

  if ((a3 & 1) != 0)
  {
    v9 = *((_QWORD *)a4 + 3);
    v10 = v9 >> 1;
    v11 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if (v11 <= a2)
      v11 = a2;
    if (v10 < a2)
      a2 = v11;
    else
      a2 = v10;
  }
  v12 = *((_QWORD *)a4 + 2);
  if (a2 <= v12)
    v13 = *((_QWORD *)a4 + 2);
  else
    v13 = a2;
  if (v13)
  {
    sub_1B1C79414(0, a5, a6, a7);
    v14 = (char *)swift_allocObject();
    v15 = j__malloc_size(v14);
    v16 = v15 - 32;
    if (v15 < 32)
      v16 = v15 - 17;
    *((_QWORD *)v14 + 2) = v12;
    *((_QWORD *)v14 + 3) = 2 * (v16 >> 4);
    v17 = v14 + 32;
    if ((a1 & 1) != 0)
      goto LABEL_14;
LABEL_22:
    sub_1B1C6C734(0, v12, v17, (uint64_t)a4);
    goto LABEL_23;
  }
  v14 = (char *)MEMORY[0x1E0DEE9D8];
  v17 = (char *)(MEMORY[0x1E0DEE9D8] + 32);
  if ((a1 & 1) == 0)
    goto LABEL_22;
LABEL_14:
  if (v14 != a4 || v17 >= &a4[16 * v12 + 32])
    memmove(v17, a4 + 32, 16 * v12);
  *((_QWORD *)a4 + 2) = 0;
LABEL_23:
  swift_bridgeObjectRelease();
  return v14;
}

_QWORD *sub_1B1C694B8(char a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1B1C68E68(a1, a2, a3, a4, sub_1B1C78EAC, (void (*)(_QWORD, int64_t, _QWORD *, _QWORD *))sub_1B1C6CA14);
}

_QWORD *sub_1B1C694CC(char a1, uint64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2)
      v8 = a2;
    if (v7 < a2)
      a2 = v8;
    else
      a2 = v7;
  }
  v9 = a4[2];
  if (a2 <= v9)
    v10 = a4[2];
  else
    v10 = a2;
  if (!v10)
  {
    v11 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
    if ((a1 & 1) != 0)
      goto LABEL_12;
LABEL_20:
    sub_1B1C6FEBC(0, v9, (unint64_t)v13, (uint64_t)a4);
    goto LABEL_21;
  }
  sub_1B1791524(0, &qword_1EEF5CCC8, (uint64_t (*)(uint64_t))sub_1B1C78898, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  v11 = (_QWORD *)swift_allocObject();
  v12 = j__malloc_size(v11);
  v11[2] = v9;
  v11[3] = 2 * ((uint64_t)(v12 - 32) / 96);
  v13 = v11 + 4;
  if ((a1 & 1) == 0)
    goto LABEL_20;
LABEL_12:
  if (v11 != a4 || v13 >= &a4[12 * v9 + 4])
    memmove(v13, a4 + 4, 96 * v9);
  a4[2] = 0;
LABEL_21:
  swift_bridgeObjectRelease();
  return v11;
}

char *sub_1B1C695E8(char a1, uint64_t a2, char a3, char *a4)
{
  unint64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2)
      v8 = a2;
    if (v7 < a2)
      a2 = v8;
    else
      a2 = v7;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (a2 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = a2;
  if (v10)
  {
    sub_1B1A02758(0, &qword_1EEF5CF60, (uint64_t)&type metadata for VFXEmitter, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v11 = (char *)swift_allocObject();
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v9;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
    v14 = v11 + 32;
    if ((a1 & 1) != 0)
      goto LABEL_14;
LABEL_22:
    sub_1B1C6C734(0, v9, v14, (uint64_t)a4);
    goto LABEL_23;
  }
  v11 = (char *)MEMORY[0x1E0DEE9D8];
  v14 = (char *)(MEMORY[0x1E0DEE9D8] + 32);
  if ((a1 & 1) == 0)
    goto LABEL_22;
LABEL_14:
  if (v11 != a4 || v14 >= &a4[16 * v9 + 32])
    memmove(v14, a4 + 32, 16 * v9);
  *((_QWORD *)a4 + 2) = 0;
LABEL_23:
  swift_bridgeObjectRelease();
  return v11;
}

char *sub_1B1C696F0(char a1, uint64_t a2, char a3, char *a4)
{
  unint64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2)
      v8 = a2;
    if (v7 < a2)
      a2 = v8;
    else
      a2 = v7;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (a2 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = a2;
  if (v10)
  {
    sub_1B1791524(0, &qword_1EEF5CCB0, (uint64_t (*)(uint64_t))type metadata accessor for simd_float4x4, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
    v11 = (char *)swift_allocObject();
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 + 31;
    *((_QWORD *)v11 + 2) = v9;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 6);
    v14 = v11 + 32;
    if ((a1 & 1) != 0)
      goto LABEL_14;
LABEL_22:
    sub_1B1C6FDDC(0, v9, v14, (uint64_t)a4);
    goto LABEL_23;
  }
  v11 = (char *)MEMORY[0x1E0DEE9D8];
  v14 = (char *)(MEMORY[0x1E0DEE9D8] + 32);
  if ((a1 & 1) == 0)
    goto LABEL_22;
LABEL_14:
  if (v11 != a4 || v14 >= &a4[64 * v9 + 32])
    memmove(v14, a4 + 32, v9 << 6);
  *((_QWORD *)a4 + 2) = 0;
LABEL_23:
  swift_bridgeObjectRelease();
  return v11;
}

char *sub_1B1C697F8(char a1, uint64_t a2, char a3, char *a4)
{
  unint64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2)
      v8 = a2;
    if (v7 < a2)
      a2 = v8;
    else
      a2 = v7;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (a2 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = a2;
  if (v10)
  {
    sub_1B1C7882C();
    v11 = (char *)swift_allocObject();
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v9;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
    v14 = v11 + 32;
    if ((a1 & 1) != 0)
      goto LABEL_14;
LABEL_22:
    sub_1B1C6C734(0, v9, v14, (uint64_t)a4);
    goto LABEL_23;
  }
  v11 = (char *)MEMORY[0x1E0DEE9D8];
  v14 = (char *)(MEMORY[0x1E0DEE9D8] + 32);
  if ((a1 & 1) == 0)
    goto LABEL_22;
LABEL_14:
  if (v11 != a4 || v14 >= &a4[16 * v9 + 32])
    memmove(v14, a4 + 32, 16 * v9);
  *((_QWORD *)a4 + 2) = 0;
LABEL_23:
  swift_bridgeObjectRelease();
  return v11;
}

char *sub_1B1C698E8(char a1, uint64_t a2, char a3, char *a4)
{
  unint64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2)
      v8 = a2;
    if (v7 < a2)
      a2 = v8;
    else
      a2 = v7;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (a2 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = a2;
  if (v10)
  {
    sub_1B1C78B8C();
    v11 = (char *)swift_allocObject();
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 25;
    *((_QWORD *)v11 + 2) = v9;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 3);
    v14 = v11 + 32;
    if ((a1 & 1) != 0)
      goto LABEL_14;
LABEL_22:
    sub_1B1C6CA14(0, v9, v14, (uint64_t)a4);
    goto LABEL_23;
  }
  v11 = (char *)MEMORY[0x1E0DEE9D8];
  v14 = (char *)(MEMORY[0x1E0DEE9D8] + 32);
  if ((a1 & 1) == 0)
    goto LABEL_22;
LABEL_14:
  if (v11 != a4 || v14 >= &a4[8 * v9 + 32])
    memmove(v14, a4 + 32, 8 * v9);
  *((_QWORD *)a4 + 2) = 0;
LABEL_23:
  swift_bridgeObjectRelease();
  return v11;
}

char *sub_1B1C699D8(char a1, uint64_t a2, char a3, char *a4)
{
  unint64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2)
      v8 = a2;
    if (v7 < a2)
      a2 = v8;
    else
      a2 = v7;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (a2 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = a2;
  if (!v10)
  {
    v11 = (char *)MEMORY[0x1E0DEE9D8];
    v13 = (char *)(MEMORY[0x1E0DEE9D8] + 32);
    if ((a1 & 1) != 0)
      goto LABEL_12;
LABEL_20:
    sub_1B1C6C254(0, v9, v13, (uint64_t)a4);
    goto LABEL_21;
  }
  sub_1B1C78ACC();
  v11 = (char *)swift_allocObject();
  v12 = j__malloc_size(v11);
  *((_QWORD *)v11 + 2) = v9;
  *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 24);
  v13 = v11 + 32;
  if ((a1 & 1) == 0)
    goto LABEL_20;
LABEL_12:
  if (v11 != a4 || v13 >= &a4[24 * v9 + 32])
    memmove(v13, a4 + 32, 24 * v9);
  *((_QWORD *)a4 + 2) = 0;
LABEL_21:
  swift_bridgeObjectRelease();
  return v11;
}

char *sub_1B1C69AE0(char a1, uint64_t a2, char a3, char *a4)
{
  unint64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2)
      v8 = a2;
    if (v7 < a2)
      a2 = v8;
    else
      a2 = v7;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (a2 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = a2;
  if (v10)
  {
    sub_1B1C78A58();
    v11 = (char *)swift_allocObject();
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 25;
    *((_QWORD *)v11 + 2) = v9;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 3);
    v14 = v11 + 32;
    if ((a1 & 1) != 0)
      goto LABEL_14;
LABEL_22:
    sub_1B1C6CA14(0, v9, v14, (uint64_t)a4);
    goto LABEL_23;
  }
  v11 = (char *)MEMORY[0x1E0DEE9D8];
  v14 = (char *)(MEMORY[0x1E0DEE9D8] + 32);
  if ((a1 & 1) == 0)
    goto LABEL_22;
LABEL_14:
  if (v11 != a4 || v14 >= &a4[8 * v9 + 32])
    memmove(v14, a4 + 32, 8 * v9);
  *((_QWORD *)a4 + 2) = 0;
LABEL_23:
  swift_bridgeObjectRelease();
  return v11;
}

char *sub_1B1C69BD0(char a1, uint64_t a2, char a3, char *a4)
{
  unint64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2)
      v8 = a2;
    if (v7 < a2)
      a2 = v8;
    else
      a2 = v7;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (a2 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = a2;
  if (v10)
  {
    sub_1B1C79F14();
    v11 = (char *)swift_allocObject();
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v9;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
    v14 = v11 + 32;
    if ((a1 & 1) != 0)
      goto LABEL_14;
LABEL_22:
    sub_1B1C6C734(0, v9, v14, (uint64_t)a4);
    goto LABEL_23;
  }
  v11 = (char *)MEMORY[0x1E0DEE9D8];
  v14 = (char *)(MEMORY[0x1E0DEE9D8] + 32);
  if ((a1 & 1) == 0)
    goto LABEL_22;
LABEL_14:
  if (v11 != a4 || v14 >= &a4[16 * v9 + 32])
    memmove(v14, a4 + 32, 16 * v9);
  *((_QWORD *)a4 + 2) = 0;
LABEL_23:
  swift_bridgeObjectRelease();
  return v11;
}

char *sub_1B1C69CC0(char a1, uint64_t a2, char a3, char *a4)
{
  unint64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2)
      v8 = a2;
    if (v7 < a2)
      a2 = v8;
    else
      a2 = v7;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (a2 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = a2;
  if (v10)
  {
    sub_1B1C78C00();
    v11 = (char *)swift_allocObject();
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v9;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
    v14 = v11 + 32;
    if ((a1 & 1) != 0)
      goto LABEL_14;
LABEL_22:
    sub_1B1C72348(0, v9, v14, (uint64_t)a4);
    goto LABEL_23;
  }
  v11 = (char *)MEMORY[0x1E0DEE9D8];
  v14 = (char *)(MEMORY[0x1E0DEE9D8] + 32);
  if ((a1 & 1) == 0)
    goto LABEL_22;
LABEL_14:
  if (v11 != a4 || v14 >= &a4[16 * v9 + 32])
    memmove(v14, a4 + 32, 16 * v9);
  *((_QWORD *)a4 + 2) = 0;
LABEL_23:
  swift_bridgeObjectRelease();
  return v11;
}

uint64_t sub_1B1C69DB0(char a1, uint64_t a2, char a3, unint64_t a4)
{
  return sub_1B1C64A9C(a1, a2, a3, a4, &qword_1EEF5CF78, type metadata accessor for EdgeCoder);
}

_QWORD *sub_1B1C69DC4(unint64_t a1)
{
  _QWORD *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v16;

  v1 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  if (a1)
  {
    v2 = a1;
    v3 = 0;
    v4 = (uint64_t *)(MEMORY[0x1E0DEE9D8] + 32);
    do
    {
      v5 = __clz(__rbit64(v2));
      v6 = v2 & ~(1 << v5);
      if (((1 << v5) & v2) == 0)
        v6 = v2;
      if (v5 >= 0x40)
        v7 = 0;
      else
        v7 = 1 << v5;
      if (v5 < 0x40)
        v2 = v6;
      if (!v3)
      {
        if ((uint64_t)(v1[3] & 0xFFFFFFFFFFFFFFFELL) <= 1)
          v8 = 1;
        else
          v8 = v1[3] & 0xFFFFFFFFFFFFFFFELL;
        sub_1B1A02758(0, &qword_1EEF5CF88, (uint64_t)&type metadata for QueryOptions, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
        v9 = (_QWORD *)swift_allocObject();
        v10 = j__malloc_size(v9);
        v11 = v10 - 32;
        if (v10 < 32)
          v11 = v10 - 25;
        v12 = v11 >> 3;
        v9[2] = v8;
        v9[3] = 2 * (v11 >> 3);
        v13 = (unint64_t)(v9 + 4);
        v14 = v1[3] >> 1;
        if (v1[2])
        {
          if (v9 != v1 || v13 >= (unint64_t)&v1[v14 + 4])
            memmove(v9 + 4, v1 + 4, 8 * v14);
          v1[2] = 0;
        }
        v4 = (uint64_t *)(v13 + 8 * v14);
        v3 = (v12 & 0x7FFFFFFFFFFFFFFFLL) - v14;
        swift_release();
        v1 = v9;
      }
      --v3;
      *v4++ = v7;
    }
    while (v2);
  }
  else
  {
    v3 = 0;
  }
  v16 = v1[3];
  if (v16 >= 2)
    v1[2] = (v16 >> 1) - v3;
  return v1;
}

_QWORD *sub_1B1C69F24(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  uint64_t (*v10)(void);
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v24;

  v1 = *(_QWORD *)(a1 + 24);
  v2 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  if (v1 < 1)
  {
    v6 = 0;
  }
  else
  {
    v4 = *(unint64_t **)(a1 + 32);
    v5 = *v4;
    swift_retain();
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v9 = v2 + 4;
    v10 = MEMORY[0x1E0DED1E8];
    v11 = v5;
    if (!v5)
      goto LABEL_5;
LABEL_3:
    v12 = __clz(__rbit64(v11)) + v7;
    if (v6)
      goto LABEL_28;
LABEL_14:
    if ((uint64_t)(v2[3] & 0xFFFFFFFFFFFFFFFELL) <= 1)
      v16 = 1;
    else
      v16 = v2[3] & 0xFFFFFFFFFFFFFFFELL;
    sub_1B1A02758(0, &qword_1ED4BAF28, MEMORY[0x1E0DEB418], (uint64_t (*)(_QWORD, uint64_t))v10);
    v17 = (_QWORD *)swift_allocObject();
    v18 = j__malloc_size(v17);
    v19 = v18 - 32;
    if (v18 < 32)
      v19 = v18 - 25;
    v20 = v19 >> 3;
    v17[2] = v16;
    v17[3] = 2 * (v19 >> 3);
    v21 = (unint64_t)(v17 + 4);
    v22 = v2[3] >> 1;
    if (v2[2])
    {
      if (v17 != v2 || v21 >= (unint64_t)&v2[v22 + 4])
        memmove(v17 + 4, v2 + 4, 8 * v22);
      v2[2] = 0;
    }
    v9 = (unint64_t *)(v21 + 8 * v22);
    v6 = (v20 & 0x7FFFFFFFFFFFFFFFLL) - v22;
    swift_release();
    v2 = v17;
LABEL_28:
    while (1)
    {
      --v6;
      *v9 = v12;
      v7 = v12 + 1;
      v8 = (uint64_t)(v12 + 1) >> 6;
      v1 = *(_QWORD *)(a1 + 24);
      if (v8 >= v1)
        break;
      v4 = *(unint64_t **)(a1 + 32);
      ++v9;
      v11 = v4[v8] >> (v7 & 0x3F);
      if (v11)
        goto LABEL_3;
LABEL_5:
      v13 = v8 + 1;
      if (v8 + 1 >= v1)
        break;
      v14 = v4[v13];
      if (!v14)
      {
        v13 = v8 + 2;
        if (v8 + 2 >= v1)
          break;
        v14 = v4[v13];
        if (!v14)
        {
          v15 = v8 + 3;
          while (v1 != v15)
          {
            v14 = v4[v15++];
            if (v14)
            {
              v13 = v15 - 1;
              goto LABEL_13;
            }
          }
          break;
        }
      }
LABEL_13:
      v12 = __clz(__rbit64(v14)) + (v13 << 6);
      if (!v6)
        goto LABEL_14;
    }
    swift_release();
  }
  v24 = v2[3];
  if (v24 >= 2)
    v2[2] = (v24 >> 1) - v6;
  return v2;
}

uint64_t *sub_1B1C6A120(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr, uint64_t *), uint64_t a4)
{
  return sub_1B1C6B8A0(a1, a2, a3, a4, sub_1B1C7929C, (void (*)(uint64_t))sub_1B1C7A198);
}

_QWORD *sub_1B1C6A134(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr, uint64_t *))
{
  uint64_t v3;
  _QWORD *v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  int64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v3 = *(_QWORD *)(a2 + 16);
  if (v3)
  {
    sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v6 = (_QWORD *)swift_allocObject();
    v7 = j__malloc_size(v6);
    v8 = v7 - 32;
    if (v7 < 32)
      v8 = v7 - 25;
    v9 = v8 >> 3;
    v6[2] = v3;
    v6[3] = (2 * v9) | 1;
    v36 = v9 & 0x7FFFFFFFFFFFFFFFLL;
    v10 = v6 + 4;
    v11 = a2 + 32;
    swift_bridgeObjectRetain();
    v37 = a2;
    swift_bridgeObjectRetain();
    swift_retain();
    v12 = 0;
    v13 = v3;
    do
    {
      if (v12 == v3)
      {
        v14 = 0;
        v12 = v3;
      }
      else
      {
        v15 = *(_QWORD *)(v11 + 8 * v12);
        if (*(_QWORD *)(a1 + 16) && (v16 = sub_1B1DC3AC8(*(_QWORD *)(v11 + 8 * v12)), (v17 & 1) != 0))
        {
          v18 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v16);
          swift_retain();
        }
        else
        {
          v18 = 0;
        }
        ++v12;
        v40 = v15;
        v41 = v18;
        a3(&v39, &v40);
        swift_release();
        v14 = v39;
      }
      *v10++ = v14;
      --v13;
    }
    while (v13);
    v19 = v36 - v3;
    if (v12 != v3)
    {
      v20 = a2;
      do
      {
        v21 = *(_QWORD *)(v20 + 8 * v12 + 32);
        if (*(_QWORD *)(a1 + 16) && (v22 = sub_1B1DC3AC8(*(_QWORD *)(v20 + 8 * v12 + 32)), (v23 & 1) != 0))
        {
          v24 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v22);
          swift_retain();
        }
        else
        {
          v24 = 0;
        }
        v40 = v21;
        v41 = v24;
        a3(&v39, &v40);
        swift_release();
        v25 = v39;
        if (!v19)
        {
          if ((uint64_t)(v6[3] & 0xFFFFFFFFFFFFFFFELL) <= 1)
            v26 = 1;
          else
            v26 = v6[3] & 0xFFFFFFFFFFFFFFFELL;
          v27 = (_QWORD *)swift_allocObject();
          v28 = j__malloc_size(v27);
          v29 = v28 - 32;
          if (v28 < 32)
            v29 = v28 - 25;
          v30 = v29 >> 3;
          v27[2] = v26;
          v27[3] = (2 * (v29 >> 3)) | 1;
          v31 = (unint64_t)(v27 + 4);
          v32 = v6[3] >> 1;
          if (v6[2])
          {
            if (v27 != v6 || v31 >= (unint64_t)&v6[v32 + 4])
              memmove(v27 + 4, v6 + 4, 8 * v32);
            v6[2] = 0;
          }
          v10 = (_QWORD *)(v31 + 8 * v32);
          v19 = (v30 & 0x7FFFFFFFFFFFFFFFLL) - v32;
          swift_release();
          v6 = v27;
          v20 = v37;
        }
        ++v12;
        --v19;
        *v10++ = v25;
      }
      while (v3 != v12);
    }
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    v6 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    v19 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 24) >> 1;
  }
  v34 = v6[3];
  if (v34 >= 2)
    v6[2] = (v34 >> 1) - v19;
  return v6;
}

_QWORD *sub_1B1C6A418(uint64_t a1, uint64_t a2, void (*a3)(__int128 *__return_ptr, uint64_t *))
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  int64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t i;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  __int128 v19;
  unint64_t v20;
  _QWORD *v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  __int128 v28;
  __int128 v29;
  uint64_t v30;

  v5 = a1;
  v6 = a2 - a1;
  if (a2 - a1 <= 0)
  {
    v7 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    v10 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 24);
  }
  else
  {
    sub_1B1AE11F4();
    v7 = (_QWORD *)swift_allocObject();
    v8 = j__malloc_size(v7);
    v9 = v8 - 32;
    if (v8 < 32)
      v9 = v8 - 17;
    v10 = 2 * (v9 >> 4);
    v7[2] = v6;
    v7[3] = v10;
  }
  i = v10 >> 1;
  if (a2 == v5)
  {
    swift_retain();
  }
  else
  {
    v12 = v7 + 4;
    v13 = i + v5;
    swift_retain();
    v14 = v5;
    do
    {
      if (v14 == a2)
      {
        v15 = 0;
        v16 = 0;
        v14 = a2;
      }
      else
      {
        v30 = v14;
        a3(&v29, &v30);
        v16 = *((_QWORD *)&v29 + 1);
        v15 = v29;
        ++v14;
      }
      *v12 = v15;
      v12[1] = v16;
      v12 += 2;
      ++v5;
    }
    while (a2 != v5);
    for (i = v13 - a2; a2 != v14; v12 += 2)
    {
      v30 = v14;
      a3(&v29, &v30);
      v19 = v29;
      if (!i)
      {
        v28 = v29;
        if ((uint64_t)(v7[3] & 0xFFFFFFFFFFFFFFFELL) <= 1)
          v20 = 1;
        else
          v20 = v7[3] & 0xFFFFFFFFFFFFFFFELL;
        sub_1B1AE11F4();
        v21 = (_QWORD *)swift_allocObject();
        v22 = j__malloc_size(v21);
        v23 = v22 - 32;
        if (v22 < 32)
          v23 = v22 - 17;
        v24 = v23 >> 4;
        v21[2] = v20;
        v21[3] = 2 * (v23 >> 4);
        v25 = (unint64_t)(v21 + 4);
        v26 = v7[3] >> 1;
        if (v7[2])
        {
          if (v21 != v7 || v25 >= (unint64_t)&v7[2 * v26 + 4])
            memmove(v21 + 4, v7 + 4, 16 * v26);
          v7[2] = 0;
        }
        v12 = (_QWORD *)(v25 + 16 * v26);
        i = (v24 & 0x7FFFFFFFFFFFFFFFLL) - v26;
        swift_release();
        v7 = v21;
        v19 = v28;
      }
      ++v14;
      --i;
      *(_OWORD *)v12 = v19;
    }
  }
  swift_release();
  v17 = v7[3];
  if (v17 >= 2)
    v7[2] = (v17 >> 1) - i;
  return v7;
}

_QWORD *sub_1B1C6A62C(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr, uint64_t *))
{
  uint64_t v3;
  _QWORD *v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *result;
  unint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  int64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v3 = *(_QWORD *)(a2 + 16);
  if (v3)
  {
    sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v6 = (_QWORD *)swift_allocObject();
    v7 = j__malloc_size(v6);
    v8 = v7 - 32;
    if (v7 < 32)
      v8 = v7 - 25;
    v9 = v8 >> 3;
    v6[2] = v3;
    v6[3] = (2 * v9) | 1;
    v45 = v9 & 0x7FFFFFFFFFFFFFFFLL;
    v47 = v6;
    v10 = v6 + 4;
    v11 = a2 + 32;
    swift_bridgeObjectRetain();
    v46 = a2;
    swift_bridgeObjectRetain();
    swift_retain();
    v12 = 0;
    v13 = v3;
    do
    {
      if (v12 == v3)
      {
        v14 = 0;
        v12 = v3;
      }
      else
      {
        v15 = (uint64_t *)(v11 + 16 * v12);
        v17 = *v15;
        v16 = v15[1];
        v18 = *(_QWORD *)(a1 + 16);
        swift_bridgeObjectRetain();
        if (v18)
        {
          swift_bridgeObjectRetain();
          v19 = sub_1B1DC3B00(v17, v16);
          if ((v20 & 1) != 0)
          {
            v21 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v19);
            swift_retain();
          }
          else
          {
            v21 = 0;
          }
          swift_bridgeObjectRelease();
        }
        else
        {
          v21 = 0;
        }
        ++v12;
        v50 = v17;
        v51 = v16;
        v52 = v21;
        a3(&v49, &v50);
        swift_release();
        swift_bridgeObjectRelease();
        v14 = v49;
      }
      *v10++ = v14;
      --v13;
    }
    while (v13);
    v22 = v45 - v3;
    v23 = v3 - v12;
    if (v3 != v12)
    {
      v26 = (uint64_t *)(v46 + 16 * v12 + 40);
      do
      {
        v28 = *(v26 - 1);
        v27 = *v26;
        v29 = *(_QWORD *)(a1 + 16);
        swift_bridgeObjectRetain();
        if (v29)
        {
          swift_bridgeObjectRetain();
          v30 = sub_1B1DC3B00(v28, v27);
          if ((v31 & 1) != 0)
          {
            v32 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v30);
            swift_retain();
          }
          else
          {
            v32 = 0;
          }
          swift_bridgeObjectRelease();
        }
        else
        {
          v32 = 0;
        }
        v50 = v28;
        v51 = v27;
        v52 = v32;
        a3(&v49, &v50);
        swift_release();
        swift_bridgeObjectRelease();
        v33 = v49;
        if (!v22)
        {
          if ((uint64_t)(v47[3] & 0xFFFFFFFFFFFFFFFELL) <= 1)
            v34 = 1;
          else
            v34 = v47[3] & 0xFFFFFFFFFFFFFFFELL;
          v35 = (_QWORD *)swift_allocObject();
          v36 = j__malloc_size(v35);
          v38 = v36 - 32;
          v37 = v36 < 32;
          v39 = v36 - 25;
          v40 = v47;
          if (v37)
            v38 = v39;
          v41 = v38 >> 3;
          v35[2] = v34;
          v35[3] = (2 * (v38 >> 3)) | 1;
          v42 = (unint64_t)(v35 + 4);
          v43 = v47[3] >> 1;
          if (v47[2])
          {
            if (v35 != v47 || v42 >= (unint64_t)&v47[v43 + 4])
            {
              memmove(v35 + 4, v47 + 4, 8 * v43);
              v40 = v47;
            }
            v40[2] = 0;
          }
          v10 = (_QWORD *)(v42 + 8 * v43);
          v22 = (v41 & 0x7FFFFFFFFFFFFFFFLL) - v43;
          swift_release();
          v47 = v35;
        }
        v26 += 2;
        --v22;
        *v10++ = v33;
        --v23;
      }
      while (v23);
    }
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    result = v47;
  }
  else
  {
    result = (_QWORD *)MEMORY[0x1E0DEE9D8];
    v22 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 24) >> 1;
  }
  v25 = result[3];
  if (v25 >= 2)
    result[2] = (v25 >> 1) - v22;
  return result;
}

unint64_t *sub_1B1C6A96C(uint64_t a1, uint64_t a2, void (*a3)(unint64_t *__return_ptr, uint64_t *))
{
  unint64_t v3;
  unint64_t *v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  unint64_t v14;
  char v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  int v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t *result;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  int v40;
  unint64_t v41;
  char v42;
  unint64_t v43;
  char v44;
  unint64_t v45;
  char *v46;
  int64_t v47;
  uint64_t v48;
  char *v49;
  unint64_t v50;
  size_t v51;
  char *v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v63;
  char v64;
  unint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  char v70;
  uint64_t v71;
  BOOL v72;

  v3 = *(_QWORD *)(a2 + 16);
  if (v3)
  {
    sub_1B1A02758(0, &qword_1ED4BAD88, (uint64_t)&type metadata for ScriptParameter, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v6 = (unint64_t *)swift_allocObject();
    v7 = j__malloc_size(v6);
    v8 = v7 - 32;
    if (v7 < 32)
      v8 = v7 - 1;
    v9 = v8 >> 5;
    v6[2] = v3;
    v6[3] = 2 * v9;
    v54 = v9 & 0x7FFFFFFFFFFFFFFFLL;
    v10 = v6 + 4;
    v56 = v6;
    v57 = a2 + 32;
    swift_bridgeObjectRetain();
    v55 = a2;
    swift_bridgeObjectRetain();
    swift_retain();
    v11 = 0;
    v12 = v3;
    v61 = a1;
    v59 = v3;
    do
    {
      if (v11 == v3)
      {
        v13 = 0;
        v14 = 0;
        v15 = 0;
        v16 = 0xF000000000000007;
        v11 = v3;
      }
      else
      {
        v17 = (uint64_t *)(v57 + 16 * v11);
        v19 = *v17;
        v18 = v17[1];
        v20 = *(_QWORD *)(a1 + 16);
        swift_bridgeObjectRetain();
        if (v20)
        {
          swift_bridgeObjectRetain();
          v21 = sub_1B1DC3B00(v19, v18);
          if ((v22 & 1) != 0)
          {
            v23 = *(_QWORD *)(a1 + 56) + 32 * v21;
            v24 = *(_QWORD *)v23;
            v25 = *(_BYTE *)(v23 + 8);
            v20 = *(_QWORD *)(v23 + 16);
            v26 = *(unsigned __int8 *)(v23 + 24);
            sub_1B1B1DD24(*(_QWORD *)v23);
          }
          else
          {
            v25 = 0;
            v20 = 0;
            v26 = 0;
            v24 = 0xF000000000000007;
          }
          swift_bridgeObjectRelease();
        }
        else
        {
          v25 = 0;
          v26 = 0;
          v24 = 0xF000000000000007;
        }
        ++v11;
        v67 = v19;
        v68 = v18;
        v69 = v24;
        v70 = v25;
        v71 = v20;
        v72 = v26 != 0;
        a3(&v63, &v67);
        swift_bridgeObjectRelease();
        sub_1B1C77DCC(v24);
        v16 = v63;
        v13 = v64;
        v14 = v65;
        v15 = v66;
        v3 = v59;
        a1 = v61;
      }
      *v10 = v16;
      *((_BYTE *)v10 + 8) = v13;
      v10[2] = v14;
      *((_BYTE *)v10 + 24) = v15;
      v10 += 4;
      --v12;
    }
    while (v12);
    v27 = v54 - v3;
    v28 = v3 - v11;
    if (v3 != v11)
    {
      v30 = (uint64_t *)(v55 + 16 * v11 + 40);
      do
      {
        v33 = *(v30 - 1);
        v32 = *v30;
        v34 = *(_QWORD *)(a1 + 16);
        swift_bridgeObjectRetain();
        v60 = v28;
        if (v34)
        {
          swift_bridgeObjectRetain();
          v35 = sub_1B1DC3B00(v33, v32);
          if ((v36 & 1) != 0)
          {
            v37 = *(_QWORD *)(a1 + 56) + 32 * v35;
            v38 = *(_QWORD *)v37;
            LOBYTE(v34) = *(_BYTE *)(v37 + 8);
            v39 = *(_QWORD *)(v37 + 16);
            v40 = *(unsigned __int8 *)(v37 + 24);
            sub_1B1B1DD24(*(_QWORD *)v37);
          }
          else
          {
            LOBYTE(v34) = 0;
            v39 = 0;
            v40 = 0;
            v38 = 0xF000000000000007;
          }
          swift_bridgeObjectRelease();
        }
        else
        {
          v39 = 0;
          v40 = 0;
          v38 = 0xF000000000000007;
        }
        v67 = v33;
        v68 = v32;
        v69 = v38;
        v70 = v34;
        v71 = v39;
        v72 = v40 != 0;
        a3(&v63, &v67);
        swift_bridgeObjectRelease();
        sub_1B1C77DCC(v38);
        v41 = v63;
        v42 = v64;
        v43 = v65;
        v44 = v66;
        if (!v27)
        {
          if ((uint64_t)(v56[3] & 0xFFFFFFFFFFFFFFFELL) <= 1)
            v45 = 1;
          else
            v45 = v56[3] & 0xFFFFFFFFFFFFFFFELL;
          v46 = (char *)swift_allocObject();
          v47 = j__malloc_size(v46);
          v48 = v47 - 32;
          if (v47 < 32)
            v48 = v47 - 1;
          v31 = v48 >> 5;
          *((_QWORD *)v46 + 2) = v45;
          *((_QWORD *)v46 + 3) = 2 * (v48 >> 5);
          v49 = v46 + 32;
          v50 = v56[3] >> 1;
          v51 = 32 * v50;
          if (v56[2])
          {
            v52 = (char *)(v56 + 4);
            if (v46 != (char *)v56 || v49 >= &v52[v51])
            {
              v58 = v48 >> 5;
              memmove(v46 + 32, v52, v51);
              v31 = v58;
            }
            v56[2] = 0;
          }
          v10 = (unint64_t *)&v49[v51];
          v27 = (v31 & 0x7FFFFFFFFFFFFFFFLL) - v50;
          swift_release();
          v56 = (unint64_t *)v46;
        }
        a1 = v61;
        v30 += 2;
        *v10 = v41;
        --v27;
        *((_BYTE *)v10 + 8) = v42;
        v10[2] = v43;
        *((_BYTE *)v10 + 24) = v44;
        v10 += 4;
        v28 = v60 - 1;
      }
      while (v60 != 1);
    }
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    result = v56;
  }
  else
  {
    result = (unint64_t *)MEMORY[0x1E0DEE9D8];
    v27 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 24) >> 1;
  }
  v53 = result[3];
  if (v53 >= 2)
    result[2] = (v53 >> 1) - v27;
  return result;
}

char *sub_1B1C6AD90(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  uint64_t v21;

  v2 = a1 + 32;
  swift_bridgeObjectRetain();
  v3 = 0;
  v4 = 0;
  v5 = (char *)MEMORY[0x1E0DEE9D8];
  v6 = (char *)(MEMORY[0x1E0DEE9D8] + 32);
  while (v4 != *(_QWORD *)(a1 + 16))
  {
    v7 = *(_QWORD *)(v2 + 8 * v4);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    if (v7 && *(_QWORD *)(v7 + 16))
    {
      v8 = 0;
      ++v4;
      do
      {
        v9 = v7 + 16 * v8;
        v10 = *(_QWORD *)(v9 + 40);
        v21 = *(_QWORD *)(v9 + 32);
        if (v3)
        {
          swift_bridgeObjectRetain();
          v11 = v5;
        }
        else
        {
          if ((uint64_t)(*((_QWORD *)v5 + 3) & 0xFFFFFFFFFFFFFFFELL) <= 1)
            v12 = 1;
          else
            v12 = *((_QWORD *)v5 + 3) & 0xFFFFFFFFFFFFFFFELL;
          sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAE70, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
          v11 = (char *)swift_allocObject();
          v13 = j__malloc_size(v11);
          v14 = v13 - 32;
          if (v13 < 32)
            v14 = v13 - 17;
          v15 = v14 >> 4;
          *((_QWORD *)v11 + 2) = v12;
          *((_QWORD *)v11 + 3) = 2 * (v14 >> 4);
          v16 = v11 + 32;
          v17 = *((_QWORD *)v5 + 3) >> 1;
          v6 = &v11[16 * v17 + 32];
          v3 = (v15 & 0x7FFFFFFFFFFFFFFFLL) - v17;
          if (*((_QWORD *)v5 + 2))
          {
            v18 = v5 + 32;
            if (v11 != v5 || v16 >= &v18[16 * v17])
              memmove(v16, v18, 16 * v17);
            swift_bridgeObjectRetain();
            *((_QWORD *)v5 + 2) = 0;
          }
          else
          {
            swift_bridgeObjectRetain();
          }
          swift_release();
        }
        ++v8;
        --v3;
        *(_QWORD *)v6 = v21;
        *((_QWORD *)v6 + 1) = v10;
        v6 += 16;
        v5 = v11;
      }
      while (v8 != *(_QWORD *)(v7 + 16));
    }
    else
    {
      ++v4;
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v19 = *((_QWORD *)v5 + 3);
  if (v19 >= 2)
    *((_QWORD *)v5 + 2) = (v19 >> 1) - v3;
  return v5;
}

_QWORD *sub_1B1C6AF6C(uint64_t a1, uint64_t a2, void (*a3)(__int128 *__return_ptr, uint64_t *))
{
  uint64_t v3;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  _OWORD *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  _QWORD *result;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  _OWORD *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  unint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  size_t v46;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t __dst;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  char v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  char v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  char v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  char v102;
  _OWORD v103[9];
  char v104;
  _BYTE v105[168];

  v3 = *(_QWORD *)(a2 + 16);
  if (v3)
  {
    sub_1B1791524(0, (unint64_t *)&unk_1EEF5CED0, (uint64_t (*)(uint64_t))sub_1B1C795D4, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
    v6 = (_QWORD *)swift_allocObject();
    v7 = (uint64_t)(j__malloc_size(v6) - 32) / 152;
    v6[2] = v3;
    v6[3] = 2 * v7;
    v56 = v7 & 0x7FFFFFFFFFFFFFFFLL;
    v59 = a2 + 32;
    v60 = a1;
    swift_bridgeObjectRetain();
    v57 = a2;
    swift_bridgeObjectRetain();
    swift_retain();
    v8 = 0;
    v58 = v6;
    v9 = v6 + 23;
    v10 = 1;
LABEL_3:
    v11 = *(_QWORD *)(v59 + 8 * v8);
    if (*(_QWORD *)(v60 + 16) && (v12 = sub_1B1DC3AC8(*(_QWORD *)(v59 + 8 * v8)), (v13 & 1) != 0))
    {
      v14 = (_OWORD *)(*(_QWORD *)(v60 + 56) + 152 * v12);
      v15 = v14[1];
      v93 = *v14;
      v94 = v15;
      v16 = v14[5];
      v18 = v14[2];
      v17 = v14[3];
      v97 = v14[4];
      v98 = v16;
      v95 = v18;
      v96 = v17;
      v20 = v14[7];
      v19 = v14[8];
      v21 = v14[6];
      v102 = *((_BYTE *)v14 + 144);
      v100 = v20;
      v101 = v19;
      v99 = v21;
      memmove(&__dst, v14, 0x91uLL);
      nullsub_16(&__dst);
      sub_1B1B7C5AC((uint64_t)&v93);
    }
    else
    {
      sub_1B1C795B4((uint64_t)&__dst);
    }
    sub_1B1B4D278((uint64_t)&__dst, (uint64_t)v103, (unint64_t *)&unk_1EEF5CEC0, (uint64_t (*)(uint64_t))sub_1B1C795D4);
    sub_1B1B4D278((uint64_t)v103, (uint64_t)&v73, (unint64_t *)&unk_1EEF5CEC0, (uint64_t (*)(uint64_t))sub_1B1C795D4);
    v69 = v79;
    v70 = v80;
    v71 = v81;
    v72 = v82;
    v65 = v75;
    v66 = v76;
    v67 = v77;
    v68 = v78;
    v63 = v73;
    v64 = v74;
    ++v8;
    __dst = v11;
    a3(&v83, &__dst);
    sub_1B19ED720((uint64_t)v103);
    v99 = v89;
    v100 = v90;
    v101 = v91;
    v102 = v92;
    v95 = v85;
    v96 = v86;
    v97 = v87;
    v98 = v88;
    v93 = v83;
    v94 = v84;
    nullsub_16(&v93);
    sub_1B1B4D278((uint64_t)&v93, (uint64_t)v105, (unint64_t *)&unk_1EEF5CEC0, (uint64_t (*)(uint64_t))sub_1B1C795D4);
    while (1)
    {
      sub_1B1B4D278((uint64_t)v105, (uint64_t)v103, (unint64_t *)&unk_1EEF5CEC0, (uint64_t (*)(uint64_t))sub_1B1C795D4);
      v22 = v103[7];
      *(_OWORD *)(v9 - 7) = v103[6];
      *(_OWORD *)(v9 - 5) = v22;
      *(_OWORD *)(v9 - 3) = v103[8];
      *((_BYTE *)v9 - 8) = v104;
      v23 = v103[3];
      *(_OWORD *)(v9 - 15) = v103[2];
      *(_OWORD *)(v9 - 13) = v23;
      v24 = v103[5];
      *(_OWORD *)(v9 - 11) = v103[4];
      *(_OWORD *)(v9 - 9) = v24;
      v25 = v103[1];
      *(_OWORD *)(v9 - 19) = v103[0];
      *(_OWORD *)(v9 - 17) = v25;
      if (v3 == v10)
        break;
      v9 += 19;
      ++v10;
      if (v8 != v3)
        goto LABEL_3;
      sub_1B1C795B4((uint64_t)&__dst);
      sub_1B1B4D278((uint64_t)&__dst, (uint64_t)v105, (unint64_t *)&unk_1EEF5CEC0, (uint64_t (*)(uint64_t))sub_1B1C795D4);
      v8 = v3;
    }
    v26 = v56 - v3;
    if (v8 != v3)
    {
      v28 = v60;
      v29 = v57;
      while (1)
      {
        v30 = *(_QWORD *)(v29 + 8 * v8 + 32);
        if (*(_QWORD *)(v28 + 16) && (v31 = sub_1B1DC3AC8(*(_QWORD *)(v29 + 8 * v8 + 32)), (v32 & 1) != 0))
        {
          v33 = (_OWORD *)(*(_QWORD *)(v28 + 56) + 152 * v31);
          v34 = v33[1];
          v83 = *v33;
          v84 = v34;
          v35 = v33[5];
          v37 = v33[2];
          v36 = v33[3];
          v87 = v33[4];
          v88 = v35;
          v85 = v37;
          v86 = v36;
          v39 = v33[7];
          v38 = v33[8];
          v40 = v33[6];
          v92 = *((_BYTE *)v33 + 144);
          v90 = v39;
          v91 = v38;
          v89 = v40;
          memmove(&__dst, v33, 0x91uLL);
          nullsub_16(&__dst);
          sub_1B1B7C5AC((uint64_t)&v83);
        }
        else
        {
          sub_1B1C795B4((uint64_t)&__dst);
        }
        sub_1B1B4D278((uint64_t)&__dst, (uint64_t)&v93, (unint64_t *)&unk_1EEF5CEC0, (uint64_t (*)(uint64_t))sub_1B1C795D4);
        sub_1B1B4D278((uint64_t)&v93, (uint64_t)&v73, (unint64_t *)&unk_1EEF5CEC0, (uint64_t (*)(uint64_t))sub_1B1C795D4);
        v69 = v79;
        v70 = v80;
        v71 = v81;
        v72 = v82;
        v65 = v75;
        v66 = v76;
        v67 = v77;
        v68 = v78;
        v63 = v73;
        v64 = v74;
        __dst = v30;
        a3(&v83, &__dst);
        sub_1B19ED720((uint64_t)&v93);
        if (!v26)
        {
          if ((uint64_t)(v58[3] & 0xFFFFFFFFFFFFFFFELL) <= 1)
            v41 = 1;
          else
            v41 = v58[3] & 0xFFFFFFFFFFFFFFFELL;
          v42 = (_QWORD *)swift_allocObject();
          v43 = (uint64_t)(j__malloc_size(v42) - 32) / 152;
          v42[2] = v41;
          v42[3] = 2 * v43;
          v44 = (unint64_t)(v42 + 4);
          v45 = v58[3] >> 1;
          v46 = 152 * v45;
          if (v58[2])
          {
            if (v42 != v58 || v44 >= (unint64_t)&v58[v46 / 8 + 4])
              memmove(v42 + 4, v58 + 4, v46);
            v58[2] = 0;
          }
          v9 = (_QWORD *)(v44 + v46);
          v26 = (v43 & 0x7FFFFFFFFFFFFFFFLL) - v45;
          swift_release();
          v58 = v42;
          v28 = v60;
          v29 = v57;
        }
        --v26;
        v48 = v84;
        *(_OWORD *)v9 = v83;
        *((_OWORD *)v9 + 1) = v48;
        v49 = v85;
        v50 = v86;
        v51 = v88;
        *((_OWORD *)v9 + 4) = v87;
        *((_OWORD *)v9 + 5) = v51;
        *((_OWORD *)v9 + 2) = v49;
        *((_OWORD *)v9 + 3) = v50;
        v52 = v89;
        v53 = v90;
        v54 = v91;
        *((_BYTE *)v9 + 144) = v92;
        *((_OWORD *)v9 + 7) = v53;
        *((_OWORD *)v9 + 8) = v54;
        *((_OWORD *)v9 + 6) = v52;
        if (v3 - 1 == v8)
          break;
        v9 += 19;
        ++v8;
      }
    }
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    result = v58;
  }
  else
  {
    result = (_QWORD *)MEMORY[0x1E0DEE9D8];
    v26 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 24) >> 1;
  }
  v55 = result[3];
  if (v55 >= 2)
    result[2] = (v55 >> 1) - v26;
  return result;
}

__int128 *sub_1B1C6B578(uint64_t a1, uint64_t a2, void (*a3)(__int128 *__return_ptr, uint64_t *))
{
  uint64_t v3;
  __int128 *v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t *v22;
  uint64_t v23;
  __int128 *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  unint64_t v33;
  __int128 *v34;
  int64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v41;
  uint64_t v43;
  __int128 *v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v3 = *(_QWORD *)(a2 + 16);
  if (v3)
  {
    sub_1B1C71E04();
    v6 = (__int128 *)swift_allocObject();
    v7 = j__malloc_size(v6);
    v8 = v7 - 32;
    if (v7 < 32)
      v8 = v7 - 17;
    v9 = v8 >> 4;
    *((_QWORD *)v6 + 2) = v3;
    *((_QWORD *)v6 + 3) = 2 * v9;
    v43 = v9 & 0x7FFFFFFFFFFFFFFFLL;
    v44 = v6;
    v10 = v6 + 2;
    v11 = a2 + 32;
    swift_bridgeObjectRetain();
    v45 = a2;
    swift_bridgeObjectRetain();
    swift_retain();
    v12 = 0;
    v13 = xmmword_1B2244C80;
    v14 = v3;
    v47 = a1;
    do
    {
      v17 = v3;
      v18 = v13;
      if (v12 != v3)
      {
        v19 = *(_QWORD *)(v11 + 8 * v12);
        if (*(_QWORD *)(a1 + 16) && (v20 = sub_1B1DC3AC8(*(_QWORD *)(v11 + 8 * v12)), (v21 & 1) != 0))
        {
          v22 = (uint64_t *)(*(_QWORD *)(a1 + 56) + 16 * v20);
          v15 = *v22;
          v16 = v22[1];
          swift_bridgeObjectRetain();
        }
        else
        {
          v15 = 0;
          v16 = 1;
        }
        v17 = v12 + 1;
        v50 = v19;
        v51 = v15;
        v52 = v16;
        a3(&v49, &v50);
        sub_1B1C79470(v15, v16);
        v18 = v49;
        a1 = v47;
        v13 = xmmword_1B2244C80;
      }
      *v10++ = v18;
      v12 = v17;
      --v14;
    }
    while (v14);
    v23 = v43 - v3;
    if (v17 == v3)
    {
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v24 = v44;
    }
    else
    {
      v24 = v44;
      v25 = v45;
      do
      {
        v26 = *(_QWORD *)(v25 + 8 * v17 + 32);
        if (*(_QWORD *)(a1 + 16) && (v27 = sub_1B1DC3AC8(*(_QWORD *)(v25 + 8 * v17 + 32)), (v28 & 1) != 0))
        {
          v29 = (uint64_t *)(*(_QWORD *)(a1 + 56) + 16 * v27);
          v30 = *v29;
          v31 = v29[1];
          swift_bridgeObjectRetain();
        }
        else
        {
          v30 = 0;
          v31 = 1;
        }
        v50 = v26;
        v51 = v30;
        v52 = v31;
        a3(&v49, &v50);
        sub_1B1C79470(v30, v31);
        v32 = v49;
        if (v23)
        {
          a1 = v47;
        }
        else
        {
          v46 = v49;
          if ((uint64_t)(*((_QWORD *)v24 + 3) & 0xFFFFFFFFFFFFFFFELL) <= 1)
            v33 = 1;
          else
            v33 = *((_QWORD *)v24 + 3) & 0xFFFFFFFFFFFFFFFELL;
          v34 = (__int128 *)swift_allocObject();
          v35 = j__malloc_size(v34);
          v36 = v35 - 32;
          if (v35 < 32)
            v36 = v35 - 17;
          v37 = v36 >> 4;
          *((_QWORD *)v34 + 2) = v33;
          *((_QWORD *)v34 + 3) = 2 * (v36 >> 4);
          v38 = (unint64_t)(v34 + 2);
          v39 = *((_QWORD *)v24 + 3) >> 1;
          a1 = v47;
          if (*((_QWORD *)v24 + 2))
          {
            if (v34 != v24 || v38 >= (unint64_t)&v24[v39 + 2])
              memmove(v34 + 2, v24 + 2, 16 * v39);
            *((_QWORD *)v24 + 2) = 0;
          }
          v10 = (__int128 *)(v38 + 16 * v39);
          v23 = (v37 & 0x7FFFFFFFFFFFFFFFLL) - v39;
          swift_release();
          v24 = v34;
          v25 = v45;
          v32 = v46;
        }
        ++v17;
        --v23;
        *v10++ = v32;
      }
      while (v3 != v17);
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    v24 = (__int128 *)MEMORY[0x1E0DEE9D8];
    v23 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 24) >> 1;
  }
  v41 = *((_QWORD *)v24 + 3);
  if (v41 >= 2)
    *((_QWORD *)v24 + 2) = (v41 >> 1) - v23;
  return v24;
}

uint64_t *sub_1B1C6B88C(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr, uint64_t *), uint64_t a4)
{
  return sub_1B1C6B8A0(a1, a2, a3, a4, (void (*)(_QWORD))sub_1B1C7A10C, (void (*)(uint64_t))sub_1B1C7A198);
}

uint64_t *sub_1B1C6B8A0(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr, uint64_t *), uint64_t a4, void (*a5)(_QWORD), void (*a6)(uint64_t))
{
  uint64_t v6;
  uint64_t *v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t *v30;
  int64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v6 = *(_QWORD *)(a2 + 16);
  if (v6)
  {
    a5(0);
    v9 = (uint64_t *)swift_allocObject();
    v10 = j__malloc_size(v9);
    v11 = v10 - 32;
    if (v10 < 32)
      v11 = v10 - 25;
    v12 = v11 >> 3;
    v9[2] = v6;
    v9[3] = 2 * v12;
    v39 = v12 & 0x7FFFFFFFFFFFFFFFLL;
    v13 = v9 + 4;
    v14 = a2 + 32;
    swift_bridgeObjectRetain();
    v40 = a2;
    swift_bridgeObjectRetain();
    swift_retain();
    v15 = 0;
    v16 = v6;
    do
    {
      if (v15 == v6)
      {
        v17 = 1;
        v15 = v6;
      }
      else
      {
        v18 = *(_QWORD *)(v14 + 8 * v15);
        if (*(_QWORD *)(a1 + 16) && (v19 = sub_1B1DC3AC8(*(_QWORD *)(v14 + 8 * v15)), (v20 & 1) != 0))
        {
          v21 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v19);
          swift_retain();
        }
        else
        {
          v21 = 1;
        }
        ++v15;
        v44 = v18;
        v45 = v21;
        a3(&v43, &v44);
        a6(v21);
        v17 = v43;
      }
      *v13++ = v17;
      --v16;
    }
    while (v16);
    v22 = v39 - v6;
    if (v15 != v6)
    {
      v23 = a2;
      do
      {
        v24 = *(_QWORD *)(v23 + 8 * v15 + 32);
        if (*(_QWORD *)(a1 + 16) && (v25 = sub_1B1DC3AC8(*(_QWORD *)(v23 + 8 * v15 + 32)), (v26 & 1) != 0))
        {
          v27 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v25);
          swift_retain();
        }
        else
        {
          v27 = 1;
        }
        v44 = v24;
        v45 = v27;
        a3(&v43, &v44);
        a6(v27);
        v28 = v43;
        if (!v22)
        {
          if ((uint64_t)(v9[3] & 0xFFFFFFFFFFFFFFFELL) <= 1)
            v29 = 1;
          else
            v29 = v9[3] & 0xFFFFFFFFFFFFFFFELL;
          v30 = (uint64_t *)swift_allocObject();
          v31 = j__malloc_size(v30);
          v32 = v31 - 32;
          if (v31 < 32)
            v32 = v31 - 25;
          v33 = v32 >> 3;
          v30[2] = v29;
          v30[3] = 2 * (v32 >> 3);
          v34 = (unint64_t)(v30 + 4);
          v35 = (unint64_t)v9[3] >> 1;
          if (v9[2])
          {
            if (v30 != v9 || v34 >= (unint64_t)&v9[v35 + 4])
              memmove(v30 + 4, v9 + 4, 8 * v35);
            v9[2] = 0;
          }
          v13 = (uint64_t *)(v34 + 8 * v35);
          v22 = (v33 & 0x7FFFFFFFFFFFFFFFLL) - v35;
          swift_release();
          v9 = v30;
          v23 = v40;
        }
        ++v15;
        --v22;
        *v13++ = v28;
      }
      while (v6 != v15);
    }
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    v9 = (uint64_t *)MEMORY[0x1E0DEE9D8];
    v22 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 24) >> 1;
  }
  v37 = v9[3];
  if (v37 >= 2)
    v9[2] = (v37 >> 1) - v22;
  return v9;
}

uint64_t (*sub_1B1C6BB70(uint64_t **a1, uint64_t a2, uint64_t a3))()
{
  uint64_t *v6;

  v6 = (uint64_t *)malloc(0x28uLL);
  *a1 = v6;
  v6[4] = (uint64_t)sub_1B1C6BCC4(v6, a2, a3);
  return sub_1B1C6BBC4;
}

uint64_t (*sub_1B1C6BBC8(uint64_t **a1, uint64_t a2, uint64_t a3))()
{
  uint64_t *v6;

  v6 = (uint64_t *)malloc(0x28uLL);
  *a1 = v6;
  v6[4] = (uint64_t)sub_1B1C6BD4C(v6, a2, a3);
  return sub_1B1C6BBC4;
}

uint64_t (*sub_1B1C6BC1C(uint64_t **a1, uint64_t a2, uint64_t a3))()
{
  uint64_t *v6;

  v6 = (uint64_t *)malloc(0x28uLL);
  *a1 = v6;
  v6[4] = (uint64_t)sub_1B1C6BD9C(v6, a2, a3);
  return sub_1B1C6BBC4;
}

uint64_t (*sub_1B1C6BC70(uint64_t **a1, uint64_t a2, uint64_t a3))()
{
  uint64_t *v6;

  v6 = (uint64_t *)malloc(0x28uLL);
  *a1 = v6;
  v6[4] = (uint64_t)sub_1B1C6BDEC(v6, a2, a3);
  return sub_1B1C6BBC4;
}

uint64_t (*sub_1B1C6BCC4(uint64_t *a1, uint64_t a2, uint64_t a3))()
{
  uint64_t v4;

  if ((a3 & 0xC000000000000001) != 0)
    v4 = MEMORY[0x1B5E21018](a2, a3);
  else
    v4 = swift_retain();
  *a1 = v4;
  return j__s3VFX5QueryVwxx;
}

void sub_1B1C6BD14(uint64_t a1)
{
  sub_1B1791524(a1, qword_1EEF5CAB0, (uint64_t (*)(uint64_t))sub_1B1C6BD30, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
}

void sub_1B1C6BD30(uint64_t a1)
{
  sub_1B1791524(a1, &qword_1EEF60110, (uint64_t (*)(uint64_t))type metadata accessor for AuthoringNode, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
}

uint64_t (*sub_1B1C6BD4C(uint64_t *a1, uint64_t a2, uint64_t a3))()
{
  uint64_t v4;

  if ((a3 & 0xC000000000000001) != 0)
    v4 = MEMORY[0x1B5E21018](a2, a3);
  else
    v4 = swift_retain();
  *a1 = v4;
  return destroy for Query;
}

uint64_t (*sub_1B1C6BD9C(uint64_t *a1, uint64_t a2, uint64_t a3))()
{
  uint64_t v4;

  if ((a3 & 0xC000000000000001) != 0)
    v4 = MEMORY[0x1B5E21018](a2, a3);
  else
    v4 = swift_unknownObjectRetain();
  *a1 = v4;
  return j__s3VFX11BufferSliceVwxx;
}

uint64_t (*sub_1B1C6BDEC(uint64_t *a1, uint64_t a2, uint64_t a3))()
{
  uint64_t v4;

  if ((a3 & 0xC000000000000001) != 0)
    v4 = MEMORY[0x1B5E21018](a2, a3);
  else
    v4 = swift_unknownObjectRetain();
  *a1 = v4;
  return destroy for BufferSlice;
}

uint64_t destroy for BufferSlice()
{
  return swift_unknownObjectRelease();
}

uint64_t type metadata accessor for RGGraphTranslator()
{
  return objc_opt_self();
}

uint64_t sub_1B1C6BE64(_OWORD *a1, uint64_t (*a2)(_OWORD *))
{
  return sub_1B1C6BE78(a1, a2);
}

uint64_t sub_1B1C6BE78(_OWORD *a1, uint64_t (*a2)(_OWORD *))
{
  __int128 v2;
  _OWORD v4[3];

  v2 = a1[1];
  v4[0] = *a1;
  v4[1] = v2;
  v4[2] = a1[2];
  return a2(v4);
}

uint64_t sub_1B1C6BEB4(uint64_t *a1, char a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return sub_1B1C5BDDC(*a1, a2 & 1, a3, a4, a5, a6, a7, a8, a9, a10, a11, (void (*)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1C51AF4);
}

uint64_t sub_1B1C6BEF0(uint64_t *a1, uint64_t (*a2)(uint64_t *))
{
  uint64_t v3;

  v3 = *a1;
  return a2(&v3);
}

void sub_1B1C6BF24(uint64_t a1, _QWORD *a2)
{
  sub_1B1C721CC(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), a2);
}

_QWORD *sub_1B1C6BF44@<X0>(_OWORD *a1@<X0>, _QWORD *(*a2)(uint64_t *__return_ptr, _OWORD *)@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  __int128 v5;
  _QWORD *result;
  _OWORD v7[3];
  uint64_t v8;

  v5 = a1[1];
  v7[0] = *a1;
  v7[1] = v5;
  v7[2] = a1[2];
  result = a2(&v8, v7);
  if (!v3)
    *a3 = v8;
  return result;
}

uint64_t sub_1B1C6BF94@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _BYTE v11[153];

  v2 = a1[7];
  *(_OWORD *)&v11[96] = a1[6];
  *(_OWORD *)&v11[112] = v2;
  v3 = a1[3];
  *(_OWORD *)&v11[32] = a1[2];
  *(_OWORD *)&v11[48] = v3;
  *(_OWORD *)&v11[128] = a1[8];
  *(_OWORD *)&v11[137] = *(_OWORD *)((char *)a1 + 137);
  v4 = a1[5];
  *(_OWORD *)&v11[64] = a1[4];
  *(_OWORD *)&v11[80] = v4;
  v5 = a1[1];
  *(_OWORD *)v11 = *a1;
  *(_OWORD *)&v11[16] = v5;
  v6 = *(_OWORD *)&v11[120];
  *(_OWORD *)(a2 + 96) = *(_OWORD *)&v11[104];
  *(_OWORD *)(a2 + 112) = v6;
  *(_OWORD *)(a2 + 128) = *(_OWORD *)&v11[136];
  *(_BYTE *)(a2 + 144) = v11[152];
  v7 = *(_OWORD *)&v11[56];
  *(_OWORD *)(a2 + 32) = *(_OWORD *)&v11[40];
  *(_OWORD *)(a2 + 48) = v7;
  v8 = *(_OWORD *)&v11[88];
  *(_OWORD *)(a2 + 64) = *(_OWORD *)&v11[72];
  *(_OWORD *)(a2 + 80) = v8;
  v9 = *(_OWORD *)&v11[24];
  *(_OWORD *)a2 = *(_OWORD *)&v11[8];
  *(_OWORD *)(a2 + 16) = v9;
  return sub_1B1C79658((uint64_t)v11);
}

double sub_1B1C6C028@<D0>(_OWORD *a1@<X0>, void (*a2)(__int128 *__return_ptr, _OWORD *)@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v3;
  __int128 v5;
  double result;
  _OWORD v7[3];
  __int128 v8;

  v5 = a1[1];
  v7[0] = *a1;
  v7[1] = v5;
  v7[2] = a1[2];
  a2(&v8, v7);
  if (!v3)
  {
    result = *(double *)&v8;
    *a3 = v8;
  }
  return result;
}

uint64_t sub_1B1C6C078(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v4;
  BOOL v5;
  uint64_t result;

  if (a2 - a1 < 0 || ((v4 = a3 + 8 * (a2 - a1), a4 + 32 + 8 * a1 < v4) ? (v5 = a4 + 32 + 8 * a2 > a3) : (v5 = 0), v5))
  {
    result = sub_1B2229700();
    __break(1u);
  }
  else
  {
    sub_1B1C79110(0);
    swift_arrayInitWithCopy();
    return v4;
  }
  return result;
}

uint64_t sub_1B1C6C16C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v4;
  BOOL v5;
  uint64_t result;

  if (a2 - a1 < 0
    || ((v4 = a3 + 40 * (a2 - a1), a4 + 32 + 40 * a1 < v4) ? (v5 = a4 + 32 + 40 * a2 > a3) : (v5 = 0), v5))
  {
    result = sub_1B2229700();
    __break(1u);
  }
  else
  {
    swift_arrayInitWithCopy();
    return v4;
  }
  return result;
}

char *sub_1B1C6C254(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v6;
  char *v7;
  unint64_t v8;
  BOOL v9;
  char *result;

  v4 = a2 - a1;
  if (a2 - a1 < 0
    || ((v6 = (char *)(a4 + 32 + 24 * a1), v7 = &__dst[24 * v4], v8 = a4 + 32 + 24 * a2, v6 < v7)
      ? (v9 = v8 > (unint64_t)__dst)
      : (v9 = 0),
        v9))
  {
    result = (char *)sub_1B2229700();
    __break(1u);
  }
  else
  {
    memcpy(__dst, v6, 24 * v4);
    return v7;
  }
  return result;
}

char *sub_1B1C6C33C(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v6;
  char *v7;
  unint64_t v8;
  BOOL v9;
  char *result;

  v4 = a2 - a1;
  if (a2 - a1 < 0
    || ((v6 = (char *)(a4 + 32 + 4 * a1), v7 = &__dst[4 * v4], v8 = a4 + 32 + 4 * a2, v6 < v7)
      ? (v9 = v8 > (unint64_t)__dst)
      : (v9 = 0),
        v9))
  {
    result = (char *)sub_1B2229700();
    __break(1u);
  }
  else
  {
    memcpy(__dst, v6, 4 * v4);
    return v7;
  }
  return result;
}

uint64_t sub_1B1C6C41C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v4;
  BOOL v5;
  uint64_t result;

  if (a2 - a1 < 0
    || ((v4 = a3 + 16 * (a2 - a1), a4 + 32 + 16 * a1 < v4) ? (v5 = a4 + 32 + 16 * a2 > a3) : (v5 = 0), v5))
  {
    result = sub_1B2229700();
    __break(1u);
  }
  else
  {
    swift_arrayInitWithCopy();
    return v4;
  }
  return result;
}

uint64_t sub_1B1C6C500(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t *i;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  char isUniquelyReferenced_nonNull_native;
  char v14;
  unint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  type metadata accessor for PropertyDescription();
  v3 = (_QWORD *)sub_1B2228548();
  v4 = sub_1B1C63044(0, v2, 0, MEMORY[0x1E0DEE9D8]);
  if (!v2)
    return (uint64_t)v3;
  for (i = (uint64_t *)(a1 + 48); ; i += 3)
  {
    v8 = *(i - 2);
    v7 = *(i - 1);
    v9 = *i;
    v10 = v4[2];
    v11 = v4[3];
    swift_bridgeObjectRetain_n();
    swift_retain();
    if (v10 >= v11 >> 1)
      v4 = sub_1B1C63044(v11 > 1, v10 + 1, 1, v4);
    v4[2] = v10 + 1;
    v12 = &v4[2 * v10];
    v12[4] = v8;
    v12[5] = v7;
    swift_bridgeObjectRetain();
    swift_retain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v15 = sub_1B1DC3B00(v8, v7);
    v16 = v14;
    v17 = v3[2] + ((v14 & 1) == 0);
    if (v3[3] < v17)
      break;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      if ((v14 & 1) != 0)
        goto LABEL_13;
    }
    else
    {
      sub_1B1EA9B84();
      if ((v16 & 1) != 0)
      {
LABEL_13:
        v20 = v3[7];
        swift_release();
        *(_QWORD *)(v20 + 8 * v15) = v9;
        goto LABEL_4;
      }
    }
LABEL_3:
    v3[(v15 >> 6) + 8] |= 1 << v15;
    v6 = (uint64_t *)(v3[6] + 16 * v15);
    *v6 = v8;
    v6[1] = v7;
    *(_QWORD *)(v3[7] + 8 * v15) = v9;
    ++v3[2];
    swift_bridgeObjectRetain();
LABEL_4:
    swift_release();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    if (!--v2)
      return (uint64_t)v3;
  }
  sub_1B1E93E78(v17, isUniquelyReferenced_nonNull_native);
  v18 = sub_1B1DC3B00(v8, v7);
  if ((v16 & 1) == (v19 & 1))
  {
    v15 = v18;
    if ((v16 & 1) != 0)
      goto LABEL_13;
    goto LABEL_3;
  }
  result = sub_1B2229FC4();
  __break(1u);
  return result;
}

char *sub_1B1C6C734(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v6;
  char *v7;
  unint64_t v8;
  BOOL v9;
  char *result;

  v4 = a2 - a1;
  if (a2 - a1 < 0
    || ((v6 = (char *)(a4 + 32 + 16 * a1), v7 = &__dst[16 * v4], v8 = a4 + 32 + 16 * a2, v6 < v7)
      ? (v9 = v8 > (unint64_t)__dst)
      : (v9 = 0),
        v9))
  {
    result = (char *)sub_1B2229700();
    __break(1u);
  }
  else
  {
    memcpy(__dst, v6, 16 * v4);
    return v7;
  }
  return result;
}

uint64_t sub_1B1C6C814(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v4;
  BOOL v5;
  uint64_t result;

  if (a2 - a1 < 0
    || ((v4 = a3 + 72 * (a2 - a1), a4 + 32 + 72 * a1 < v4) ? (v5 = a4 + 32 + 72 * a2 > a3) : (v5 = 0), v5))
  {
    result = sub_1B2229700();
    __break(1u);
  }
  else
  {
    sub_1B1C19024(0, (unint64_t *)&qword_1ED4B9390, (void (*)(uint64_t))sub_1B1B1F290);
    swift_arrayInitWithCopy();
    return v4;
  }
  return result;
}

uint64_t sub_1B1C6C92C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v4;
  BOOL v5;
  uint64_t result;

  if (a2 - a1 < 0
    || ((v4 = a3 + 96 * (a2 - a1), a4 + 32 + 96 * a1 < v4) ? (v5 = a4 + 32 + 96 * a2 > a3) : (v5 = 0), v5))
  {
    result = sub_1B2229700();
    __break(1u);
  }
  else
  {
    swift_arrayInitWithCopy();
    return v4;
  }
  return result;
}

char *sub_1B1C6CA14(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v6;
  char *v7;
  unint64_t v8;
  BOOL v9;
  char *result;

  v4 = a2 - a1;
  if (a2 - a1 < 0
    || ((v6 = (char *)(a4 + 32 + 8 * a1), v7 = &__dst[8 * v4], v8 = a4 + 32 + 8 * a2, v6 < v7)
      ? (v9 = v8 > (unint64_t)__dst)
      : (v9 = 0),
        v9))
  {
    result = (char *)sub_1B2229700();
    __break(1u);
  }
  else
  {
    memcpy(__dst, v6, 8 * v4);
    return v7;
  }
  return result;
}

uint64_t sub_1B1C6CAF4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v4;
  BOOL v5;
  uint64_t result;

  if (a2 - a1 < 0
    || ((v4 = a3 + 32 * (a2 - a1), a4 + 32 + 32 * a1 < v4) ? (v5 = a4 + 32 + 32 * a2 > a3) : (v5 = 0), v5))
  {
    result = sub_1B2229700();
    __break(1u);
  }
  else
  {
    sub_1B19F8F98();
    swift_arrayInitWithCopy();
    return v4;
  }
  return result;
}

char *sub_1B1C6CBE8(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v6;
  char *v7;
  unint64_t v8;
  BOOL v9;
  char *result;

  v4 = a2 - a1;
  if (a2 - a1 < 0
    || ((v6 = (char *)(a4 + 32 + 96 * a1), v7 = &__dst[96 * v4], v8 = a4 + 32 + 96 * a2, v6 < v7)
      ? (v9 = v8 > (unint64_t)__dst)
      : (v9 = 0),
        v9))
  {
    result = (char *)sub_1B2229700();
    __break(1u);
  }
  else
  {
    memcpy(__dst, v6, 96 * v4);
    return v7;
  }
  return result;
}

uint64_t sub_1B1C6CCD0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  BOOL v8;
  uint64_t result;

  v5 = a2 - a1;
  if (a2 - a1 < 0
    || ((v6 = a4 + 112 * a1 + 32, v7 = a3 + 112 * v5, v6 < v7) ? (v8 = v6 + 112 * v5 > a3) : (v8 = 0), v8))
  {
    result = sub_1B2229700();
    __break(1u);
  }
  else
  {
    swift_arrayInitWithCopy();
    return v7;
  }
  return result;
}

uint64_t sub_1B1C6CDBC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v4;
  BOOL v5;
  uint64_t result;

  if (a2 - a1 < 0
    || ((v4 = a3 + 32 * (a2 - a1), a4 + 32 + 32 * a1 < v4) ? (v5 = a4 + 32 + 32 * a2 > a3) : (v5 = 0), v5))
  {
    result = sub_1B2229700();
    __break(1u);
  }
  else
  {
    swift_arrayInitWithCopy();
    return v4;
  }
  return result;
}

uint64_t sub_1B1C6CEA0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v4;
  BOOL v5;
  uint64_t result;

  if (a2 - a1 < 0
    || ((v4 = a3 + 16 * (a2 - a1), a4 + 32 + 16 * a1 < v4) ? (v5 = a4 + 32 + 16 * a2 > a3) : (v5 = 0), v5))
  {
    result = sub_1B2229700();
    __break(1u);
  }
  else
  {
    swift_arrayInitWithCopy();
    return v4;
  }
  return result;
}

uint64_t sub_1B1C6CF84(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  BOOL v8;
  uint64_t result;

  v5 = a2 - a1;
  if (a2 - a1 < 0 || ((v6 = a4 + 32 * a1 + 32, v7 = a3 + 32 * v5, v6 < v7) ? (v8 = v6 + 32 * v5 > a3) : (v8 = 0), v8))
  {
    result = sub_1B2229700();
    __break(1u);
  }
  else
  {
    swift_arrayInitWithCopy();
    return v7;
  }
  return result;
}

uint64_t sub_1B1C6D068(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  char *v5;
  uint64_t *i;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char isUniquelyReferenced_nonNull_native;
  char v11;
  unint64_t v12;
  char v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = MEMORY[0x1E0DEA520];
  v4 = (_QWORD *)sub_1B2228548();
  v5 = sub_1B1C632C0(0, v2, 0, MEMORY[0x1E0DEE9D8], &qword_1EEF5CCA8, v3);
  if (!v2)
    return (uint64_t)v4;
  for (i = (uint64_t *)(a1 + 32); ; ++i)
  {
    v7 = *i;
    v9 = *((_QWORD *)v5 + 2);
    v8 = *((_QWORD *)v5 + 3);
    if (v9 >= v8 >> 1)
      v5 = sub_1B1C632C0(v8 > 1, v9 + 1, 1, v5, &qword_1EEF5CCA8, MEMORY[0x1E0DEA520]);
    *((_QWORD *)v5 + 2) = v9 + 1;
    *(_QWORD *)&v5[8 * v9 + 32] = v7;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v12 = sub_1B1DC3AC8(v7);
    v13 = v11;
    v14 = v4[2] + ((v11 & 1) == 0);
    if (v4[3] < v14)
      break;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      if ((v11 & 1) != 0)
        goto LABEL_4;
    }
    else
    {
      sub_1B1EA8AC4();
      if ((v13 & 1) != 0)
        goto LABEL_4;
    }
LABEL_3:
    v4[(v12 >> 6) + 8] |= 1 << v12;
    *(_QWORD *)(v4[6] + 8 * v12) = v7;
    ++v4[2];
LABEL_4:
    swift_bridgeObjectRelease();
    if (!--v2)
      return (uint64_t)v4;
  }
  sub_1B1E91F98(v14, isUniquelyReferenced_nonNull_native);
  v15 = sub_1B1DC3AC8(v7);
  if ((v13 & 1) == (v16 & 1))
  {
    v12 = v15;
    if ((v13 & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  result = sub_1B2229FC4();
  __break(1u);
  return result;
}

uint64_t sub_1B1C6D250(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;

  if (*(_QWORD *)(a2 + 16))
  {
    sub_1B1DC3AC8(a1);
    v3 = v2 ^ 1;
  }
  else
  {
    v3 = 1;
  }
  return v3 & 1;
}

uint64_t sub_1B1C6D288(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  v3 = MEMORY[0x1E0DEE9D8];
  if (a2 != a1)
  {
    v7 = a1;
    v14 = MEMORY[0x1E0DEE9D8];
    sub_1B202A210(0, (a2 - a1) & ~((a2 - a1) >> 63), 0);
    v3 = v14;
    v8 = *(_QWORD *)(a3 + 16);
    do
    {
      v9 = 0uLL;
      if (v7 < v8)
      {
        v12 = *(_OWORD *)(a3 + 32 + 16 * v7);
        swift_retain();
        v9 = v12;
      }
      v11 = *(_QWORD *)(v14 + 16);
      v10 = *(_QWORD *)(v14 + 24);
      if (v11 >= v10 >> 1)
      {
        v13 = v9;
        sub_1B202A210(v10 > 1, v11 + 1, 1);
        v9 = v13;
      }
      *(_QWORD *)(v14 + 16) = v11 + 1;
      *(_OWORD *)(v14 + 16 * v11 + 32) = v9;
      ++v7;
    }
    while (a2 != v7);
  }
  return v3;
}

uint64_t sub_1B1C6D384(uint64_t a1)
{
  unint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[4];
  char v7;
  uint64_t *v8;
  _QWORD v9[2];
  uint64_t v10;

  v2 = MEMORY[0x1E0DEE9D8];
  v10 = MEMORY[0x1E0DEE9D8];
  type metadata accessor for AuthoringGraph();
  v3 = (_QWORD *)swift_allocObject();
  v3[2] = 0;
  v3[3] = v2;
  v3[4] = 0;
  v3[5] = 0;
  swift_bridgeObjectRetain();
  v3[6] = sub_1B1B7DC90(v2);
  v3[3] = a1;
  v8 = &v10;
  v6[2] = sub_1B1C78D48;
  v6[3] = &v7;
  v9[0] = sub_1B1C6D068(v2);
  v9[1] = v4;
  sub_1B1C5C9C4((uint64_t)sub_1B1C785A8, (uint64_t)v6, 1, 0x1000000000000000uLL, 0, v2, (uint64_t)v9);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_1B1C6D47C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v4;
  BOOL v5;
  uint64_t result;

  if (a2 - a1 < 0
    || ((v4 = a3 + 48 * (a2 - a1), a4 + 32 + 48 * a1 < v4) ? (v5 = a4 + 32 + 48 * a2 > a3) : (v5 = 0), v5))
  {
    result = sub_1B2229700();
    __break(1u);
  }
  else
  {
    sub_1B1C19024(0, (unint64_t *)&unk_1EEF600C0, (void (*)(uint64_t))_s17CodeSourceSnippetCMa);
    swift_arrayInitWithCopy();
    return v4;
  }
  return result;
}

char *sub_1B1C6D594(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v6;
  size_t v7;
  char *v8;
  unint64_t v9;
  BOOL v10;
  char *result;

  v4 = a2 - a1;
  if (a2 - a1 < 0
    || ((v6 = (char *)(a4 + 80 * a1 + 32),
         v7 = 80 * v4,
         v8 = &__dst[80 * v4],
         v9 = (unint64_t)&v6[80 * v4],
         v6 < v8)
      ? (v10 = v9 > (unint64_t)__dst)
      : (v10 = 0),
        v10))
  {
    result = (char *)sub_1B2229700();
    __break(1u);
  }
  else
  {
    memcpy(__dst, v6, v7);
    return v8;
  }
  return result;
}

char *sub_1B1C6D678(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v6;
  size_t v7;
  char *v8;
  unint64_t v9;
  BOOL v10;
  char *result;

  v4 = a2 - a1;
  if (a2 - a1 < 0
    || ((v6 = (char *)(a4 + 112 * a1 + 32),
         v7 = 112 * v4,
         v8 = &__dst[112 * v4],
         v9 = (unint64_t)&v6[112 * v4],
         v6 < v8)
      ? (v10 = v9 > (unint64_t)__dst)
      : (v10 = 0),
        v10))
  {
    result = (char *)sub_1B2229700();
    __break(1u);
  }
  else
  {
    memcpy(__dst, v6, v7);
    return v8;
  }
  return result;
}

uint64_t sub_1B1C6D75C(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t *, uint64_t, uint64_t *), uint64_t a4, uint64_t a5, void (*a6)(BOOL, unint64_t, uint64_t))
{
  unint64_t v6;
  uint64_t v7;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v6 = *(_QWORD *)(a2 + 16);
  v7 = MEMORY[0x1E0DEE9D8];
  if (v6)
  {
    v25 = MEMORY[0x1E0DEE9D8];
    a6(0, v6, 0);
    v7 = v25;
    v10 = (uint64_t *)(a2 + 32);
    do
    {
      v11 = *v10;
      if (*(_QWORD *)(a1 + 16) && (v12 = sub_1B1DC3AC8(*v10), (v13 & 1) != 0))
      {
        v14 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v12);
        swift_retain();
      }
      else
      {
        v14 = 0;
      }
      v23 = v14;
      v15 = a3(&v24, v11, &v23);
      swift_release();
      v16 = v24;
      v25 = v7;
      v18 = *(_QWORD *)(v7 + 16);
      v17 = *(_QWORD *)(v7 + 24);
      if (v18 >= v17 >> 1)
      {
        a6(v17 > 1, v18 + 1, 1);
        v7 = v25;
      }
      *(_QWORD *)(v7 + 16) = v18 + 1;
      v19 = v7 + 16 * v18;
      *(_QWORD *)(v19 + 32) = v15;
      *(_QWORD *)(v19 + 40) = v16;
      ++v10;
      --v6;
    }
    while (v6);
  }
  return v7;
}

uint64_t sub_1B1C6D894(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v4;
  BOOL v5;
  uint64_t result;

  if (a2 - a1 < 0
    || ((v4 = a3 + 56 * (a2 - a1), a4 + 32 + 56 * a1 < v4) ? (v5 = a4 + 32 + 56 * a2 > a3) : (v5 = 0), v5))
  {
    result = sub_1B2229700();
    __break(1u);
  }
  else
  {
    swift_arrayInitWithCopy();
    return v4;
  }
  return result;
}

uint64_t sub_1B1C6D97C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t *a5)
{
  unint64_t v5;
  BOOL v6;
  uint64_t result;

  if (a2 - a1 < 0
    || ((v5 = a3 + 40 * (a2 - a1), a4 + 32 + 40 * a1 < v5) ? (v6 = a4 + 32 + 40 * a2 > a3) : (v6 = 0), v6))
  {
    result = sub_1B2229700();
    __break(1u);
  }
  else
  {
    sub_1B1AEC268(0, a5);
    swift_arrayInitWithCopy();
    return v5;
  }
  return result;
}

uint64_t sub_1B1C6DA80(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t *a5)
{
  unint64_t v5;
  BOOL v6;
  uint64_t result;

  if (a2 - a1 < 0
    || ((v5 = a3 + 16 * (a2 - a1), a4 + 32 + 16 * a1 < v5) ? (v6 = a4 + 32 + 16 * a2 > a3) : (v6 = 0), v6))
  {
    result = sub_1B2229700();
    __break(1u);
  }
  else
  {
    sub_1B1AEC268(0, a5);
    swift_arrayInitWithCopy();
    return v5;
  }
  return result;
}

uint64_t sub_1B1C6DB80(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v4;
  BOOL v5;
  uint64_t result;

  if (a2 - a1 < 0
    || ((v4 = a3 + 88 * (a2 - a1), a4 + 32 + 88 * a1 < v4) ? (v5 = a4 + 32 + 88 * a2 > a3) : (v5 = 0), v5))
  {
    result = sub_1B2229700();
    __break(1u);
  }
  else
  {
    sub_1B1A02758(0, (unint64_t *)&unk_1ED4BB3A0, (uint64_t)&_s8MetadataVN, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    swift_arrayInitWithCopy();
    return v4;
  }
  return result;
}

uint64_t sub_1B1C6DC90(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v4;
  BOOL v5;
  uint64_t result;

  if (a2 - a1 < 0
    || ((v4 = a3 + ((a2 - a1) << 6), a4 + 32 + (a1 << 6) < v4) ? (v5 = a4 + 32 + (a2 << 6) > a3) : (v5 = 0), v5))
  {
    result = sub_1B2229700();
    __break(1u);
  }
  else
  {
    swift_arrayInitWithCopy();
    return v4;
  }
  return result;
}

uint64_t sub_1B1C6DD74(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v4;
  BOOL v5;
  uint64_t result;

  if (a2 - a1 < 0
    || ((v4 = a3 + 48 * (a2 - a1), a4 + 32 + 48 * a1 < v4) ? (v5 = a4 + 32 + 48 * a2 > a3) : (v5 = 0), v5))
  {
    result = sub_1B2229700();
    __break(1u);
  }
  else
  {
    swift_arrayInitWithCopy();
    return v4;
  }
  return result;
}

uint64_t sub_1B1C6DE5C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v4;
  BOOL v5;
  uint64_t result;

  if (a2 - a1 < 0
    || ((v4 = a3 + 72 * (a2 - a1), a4 + 32 + 72 * a1 < v4) ? (v5 = a4 + 32 + 72 * a2 > a3) : (v5 = 0), v5))
  {
    result = sub_1B2229700();
    __break(1u);
  }
  else
  {
    swift_arrayInitWithCopy();
    return v4;
  }
  return result;
}

uint64_t sub_1B1C6DF44(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v4;
  BOOL v5;
  uint64_t result;

  if (a2 - a1 < 0
    || ((v4 = a3 + 824 * (a2 - a1), a4 + 32 + 824 * a1 < v4) ? (v5 = a4 + 32 + 824 * a2 > a3) : (v5 = 0), v5))
  {
    result = sub_1B2229700();
    __break(1u);
  }
  else
  {
    swift_arrayInitWithCopy();
    return v4;
  }
  return result;
}

uint64_t sub_1B1C6E02C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v4;
  BOOL v5;
  uint64_t result;

  if (a2 - a1 < 0 || ((v4 = a3 + 8 * (a2 - a1), a4 + 32 + 8 * a1 < v4) ? (v5 = a4 + 32 + 8 * a2 > a3) : (v5 = 0), v5))
  {
    result = sub_1B2229700();
    __break(1u);
  }
  else
  {
    sub_1B1A02758(0, &qword_1ED4B8EF0, (uint64_t)&type metadata for ComponentProperty, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    swift_arrayInitWithCopy();
    return v4;
  }
  return result;
}

uint64_t sub_1B1C6E138(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  char *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  sub_1B1A02758(0, &qword_1EEF5CF70, (uint64_t)&type metadata for AuthoringNodeCoder, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  v3 = MEMORY[0x1E0DEA520];
  v4 = (_QWORD *)sub_1B2228548();
  v5 = sub_1B1C632C0(0, v2, 0, MEMORY[0x1E0DEE9D8], &qword_1EEF5CCA8, v3);
  if (!v2)
    return (uint64_t)v4;
  v6 = (uint64_t *)(a1 + 40);
  while (1)
  {
    v8 = *(v6 - 1);
    v7 = *v6;
    v9 = *((_QWORD *)v5 + 2);
    v10 = *((_QWORD *)v5 + 3);
    swift_retain();
    if (v9 >= v10 >> 1)
      v5 = sub_1B1C632C0(v10 > 1, v9 + 1, 1, v5, &qword_1EEF5CCA8, MEMORY[0x1E0DEA520]);
    *((_QWORD *)v5 + 2) = v9 + 1;
    *(_QWORD *)&v5[8 * v9 + 32] = v8;
    swift_retain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v12 = sub_1B1DC3AC8(v8);
    v14 = v13;
    v15 = v4[2] + ((v13 & 1) == 0);
    if (v4[3] >= v15)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        sub_1B1EB1C18();
      goto LABEL_12;
    }
    sub_1B1EA1ACC(v15, isUniquelyReferenced_nonNull_native);
    v16 = sub_1B1DC3AC8(v8);
    if ((v14 & 1) != (v17 & 1))
      break;
    v12 = v16;
LABEL_12:
    if ((v14 & 1) != 0)
    {
      v18 = v4[7];
      swift_release();
      *(_QWORD *)(v18 + 8 * v12) = v7;
    }
    else
    {
      v4[(v12 >> 6) + 8] |= 1 << v12;
      *(_QWORD *)(v4[6] + 8 * v12) = v8;
      *(_QWORD *)(v4[7] + 8 * v12) = v7;
      ++v4[2];
    }
    v6 += 2;
    swift_release();
    swift_bridgeObjectRelease();
    if (!--v2)
      return (uint64_t)v4;
  }
  result = sub_1B2229FC4();
  __break(1u);
  return result;
}

uint64_t sub_1B1C6E35C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v4;
  BOOL v5;
  uint64_t result;

  if (a2 - a1 < 0
    || ((v4 = a3 + 40 * (a2 - a1), a4 + 32 + 40 * a1 < v4) ? (v5 = a4 + 32 + 40 * a2 > a3) : (v5 = 0), v5))
  {
    result = sub_1B2229700();
    __break(1u);
  }
  else
  {
    swift_arrayInitWithCopy();
    return v4;
  }
  return result;
}

uint64_t sub_1B1C6E444(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  char *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  sub_1B1C6BD30(0);
  v3 = MEMORY[0x1E0DEA520];
  v4 = (_QWORD *)sub_1B2228548();
  v5 = sub_1B1C632C0(0, v2, 0, MEMORY[0x1E0DEE9D8], &qword_1EEF5CCA8, v3);
  if (!v2)
    return (uint64_t)v4;
  v6 = (uint64_t *)(a1 + 40);
  while (1)
  {
    v8 = *(v6 - 1);
    v7 = *v6;
    v9 = *((_QWORD *)v5 + 2);
    v10 = *((_QWORD *)v5 + 3);
    swift_retain();
    if (v9 >= v10 >> 1)
      v5 = sub_1B1C632C0(v10 > 1, v9 + 1, 1, v5, &qword_1EEF5CCA8, MEMORY[0x1E0DEA520]);
    *((_QWORD *)v5 + 2) = v9 + 1;
    *(_QWORD *)&v5[8 * v9 + 32] = v8;
    swift_retain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v12 = sub_1B1DC3AC8(v8);
    v14 = v13;
    v15 = v4[2] + ((v13 & 1) == 0);
    if (v4[3] >= v15)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        sub_1B1EA9D20();
      goto LABEL_12;
    }
    sub_1B1E943E8(v15, isUniquelyReferenced_nonNull_native);
    v16 = sub_1B1DC3AC8(v8);
    if ((v14 & 1) != (v17 & 1))
      break;
    v12 = v16;
LABEL_12:
    if ((v14 & 1) != 0)
    {
      v18 = v4[7];
      swift_release();
      *(_QWORD *)(v18 + 8 * v12) = v7;
    }
    else
    {
      v4[(v12 >> 6) + 8] |= 1 << v12;
      *(_QWORD *)(v4[6] + 8 * v12) = v8;
      *(_QWORD *)(v4[7] + 8 * v12) = v7;
      ++v4[2];
    }
    v6 += 2;
    swift_release();
    swift_bridgeObjectRelease();
    if (!--v2)
      return (uint64_t)v4;
  }
  result = sub_1B2229FC4();
  __break(1u);
  return result;
}

uint64_t sub_1B1C6E650(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v4;
  BOOL v5;
  uint64_t result;

  if (a2 - a1 < 0 || ((v4 = a3 + 8 * (a2 - a1), a4 + 32 + 8 * a1 < v4) ? (v5 = a4 + 32 + 8 * a2 > a3) : (v5 = 0), v5))
  {
    result = sub_1B2229700();
    __break(1u);
  }
  else
  {
    sub_1B1AEC268(0, (unint64_t *)&qword_1ED4BB030);
    swift_arrayInitWithCopy();
    return v4;
  }
  return result;
}

uint64_t sub_1B1C6E758(uint64_t a1, void (*a2)(_QWORD), void (*a3)(void), void (*a4)(void))
{
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  char *v10;
  uint64_t *i;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v17;
  char v18;
  char v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  void (*v25)(void);

  v7 = *(_QWORD *)(a1 + 16);
  a2(0);
  v8 = MEMORY[0x1E0DEA520];
  v9 = (_QWORD *)sub_1B2228548();
  v10 = sub_1B1C632C0(0, v7, 0, MEMORY[0x1E0DEE9D8], &qword_1EEF5CCA8, v8);
  if (!v7)
    return (uint64_t)v9;
  v25 = a4;
  for (i = (uint64_t *)(a1 + 40); ; i += 2)
  {
    v13 = *(i - 1);
    v12 = *i;
    v14 = *((_QWORD *)v10 + 2);
    v15 = *((_QWORD *)v10 + 3);
    swift_retain();
    if (v14 >= v15 >> 1)
      v10 = sub_1B1C632C0(v15 > 1, v14 + 1, 1, v10, &qword_1EEF5CCA8, MEMORY[0x1E0DEA520]);
    *((_QWORD *)v10 + 2) = v14 + 1;
    *(_QWORD *)&v10[8 * v14 + 32] = v13;
    swift_retain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v17 = sub_1B1DC3AC8(v13);
    v19 = v18;
    if (v9[3] >= (int64_t)(v9[2] + ((v18 & 1) == 0)))
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        v25();
      goto LABEL_12;
    }
    a3();
    v20 = sub_1B1DC3AC8(v13);
    if ((v19 & 1) != (v21 & 1))
      break;
    v17 = v20;
LABEL_12:
    v22 = 8 * v17;
    if ((v19 & 1) != 0)
    {
      v23 = v9[7];
      swift_release();
      *(_QWORD *)(v23 + v22) = v12;
    }
    else
    {
      v9[(v17 >> 6) + 8] |= 1 << v17;
      *(_QWORD *)(v9[6] + 8 * v17) = v13;
      *(_QWORD *)(v9[7] + 8 * v17) = v12;
      ++v9[2];
    }
    swift_release();
    swift_bridgeObjectRelease();
    if (!--v7)
      return (uint64_t)v9;
  }
  result = sub_1B2229FC4();
  __break(1u);
  return result;
}

uint64_t sub_1B1C6E974(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  char *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  sub_1B1791524(0, (unint64_t *)&unk_1EEF60120, (uint64_t (*)(uint64_t))type metadata accessor for GraphCodeGen.CFGNode, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  v3 = MEMORY[0x1E0DEA520];
  v4 = (_QWORD *)sub_1B2228548();
  v5 = sub_1B1C632C0(0, v2, 0, MEMORY[0x1E0DEE9D8], &qword_1EEF5CCA8, v3);
  if (!v2)
    return (uint64_t)v4;
  v6 = (uint64_t *)(a1 + 40);
  while (1)
  {
    v8 = *(v6 - 1);
    v7 = *v6;
    v9 = *((_QWORD *)v5 + 2);
    v10 = *((_QWORD *)v5 + 3);
    swift_retain();
    if (v9 >= v10 >> 1)
      v5 = sub_1B1C632C0(v10 > 1, v9 + 1, 1, v5, &qword_1EEF5CCA8, MEMORY[0x1E0DEA520]);
    *((_QWORD *)v5 + 2) = v9 + 1;
    *(_QWORD *)&v5[8 * v9 + 32] = v8;
    swift_retain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v12 = sub_1B1DC3AC8(v8);
    v14 = v13;
    v15 = v4[2] + ((v13 & 1) == 0);
    if (v4[3] >= v15)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        sub_1B1EA9024();
      goto LABEL_12;
    }
    sub_1B1E92BB0(v15, isUniquelyReferenced_nonNull_native);
    v16 = sub_1B1DC3AC8(v8);
    if ((v14 & 1) != (v17 & 1))
      break;
    v12 = v16;
LABEL_12:
    if ((v14 & 1) != 0)
    {
      v18 = v4[7];
      swift_release();
      *(_QWORD *)(v18 + 8 * v12) = v7;
    }
    else
    {
      v4[(v12 >> 6) + 8] |= 1 << v12;
      *(_QWORD *)(v4[6] + 8 * v12) = v8;
      *(_QWORD *)(v4[7] + 8 * v12) = v7;
      ++v4[2];
    }
    v6 += 2;
    swift_release();
    swift_bridgeObjectRelease();
    if (!--v2)
      return (uint64_t)v4;
  }
  result = sub_1B2229FC4();
  __break(1u);
  return result;
}

uint64_t sub_1B1C6EB98(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *i;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t result;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v2 = *(_QWORD *)(a1 + 16);
  sub_1B1A02758(0, &qword_1EEF5B790, (uint64_t)&type metadata for GraphCodeGen.CodeGenAtom, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  v3 = MEMORY[0x1E0DEA520];
  v31 = (_QWORD *)sub_1B2228548();
  v32 = sub_1B1C632C0(0, v2, 0, MEMORY[0x1E0DEE9D8], &qword_1EEF5CCA8, v3);
  if (!v2)
    return (uint64_t)v31;
  for (i = (uint64_t *)(a1 + 64); ; i += 12)
  {
    v6 = v2;
    v7 = i[1];
    v8 = i[2];
    v9 = i[3];
    v11 = i[4];
    v10 = i[5];
    v12 = i[6];
    v33 = i[7];
    v27 = *(i - 4);
    v37 = *(i - 3);
    v35 = *(i - 1);
    v36 = *(i - 2);
    v34 = *i;
    sub_1B1B9D8BC(v37);
    v13 = v32;
    v15 = *((_QWORD *)v32 + 2);
    v14 = *((_QWORD *)v32 + 3);
    v30 = v6;
    if (v15 >= v14 >> 1)
      v13 = sub_1B1C632C0(v14 > 1, v15 + 1, 1, v32, &qword_1EEF5CCA8, MEMORY[0x1E0DEA520]);
    *((_QWORD *)v13 + 2) = v15 + 1;
    v32 = v13;
    *(_QWORD *)&v13[8 * v15 + 32] = v27;
    v28 = v12;
    v29 = v11;
    sub_1B1B9D8BC(v37);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v17 = sub_1B1DC3AC8(v27);
    v19 = v18;
    v20 = v31[2] + ((v18 & 1) == 0);
    v21 = v9;
    if (v31[3] >= v20)
    {
      v24 = v8;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        sub_1B1EA9030();
      goto LABEL_12;
    }
    sub_1B1E92BBC(v20, isUniquelyReferenced_nonNull_native);
    v22 = sub_1B1DC3AC8(v27);
    if ((v19 & 1) != (v23 & 1))
      break;
    v17 = v22;
    v24 = v8;
LABEL_12:
    if ((v19 & 1) != 0)
    {
      v25 = (uint64_t *)(v31[7] + 88 * v17);
      sub_1B1BCCCA8(*v25);
      *v25 = v37;
      v25[1] = v36;
      v25[2] = v35;
      v25[3] = v34;
      v25[4] = v7;
      v25[5] = v24;
      v25[6] = v21;
      v25[7] = v29;
      v25[8] = v10;
      v25[9] = v28;
      v25[10] = v33;
    }
    else
    {
      v31[(v17 >> 6) + 8] |= 1 << v17;
      *(_QWORD *)(v31[6] + 8 * v17) = v27;
      v5 = (uint64_t *)(v31[7] + 88 * v17);
      *v5 = v37;
      v5[1] = v36;
      v5[2] = v35;
      v5[3] = v34;
      v5[4] = v7;
      v5[5] = v24;
      v5[6] = v21;
      v5[7] = v29;
      v5[8] = v10;
      v5[9] = v28;
      v5[10] = v33;
      ++v31[2];
    }
    swift_bridgeObjectRelease();
    sub_1B1BCCCA8(v37);
    v2 = v30 - 1;
    if (v30 == 1)
      return (uint64_t)v31;
  }
  result = sub_1B2229FC4();
  __break(1u);
  return result;
}

uint64_t sub_1B1C6EEE8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v4;
  BOOL v5;
  uint64_t result;

  if (a2 - a1 < 0
    || ((v4 = a3 + 88 * (a2 - a1), a4 + 32 + 88 * a1 < v4) ? (v5 = a4 + 32 + 88 * a2 > a3) : (v5 = 0), v5))
  {
    result = sub_1B2229700();
    __break(1u);
  }
  else
  {
    swift_arrayInitWithCopy();
    return v4;
  }
  return result;
}

uint64_t sub_1B1C6EFD0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  BOOL v8;
  uint64_t result;

  v5 = a2 - a1;
  if (a2 - a1 < 0 || ((v6 = a4 + 48 * a1 + 32, v7 = a3 + 48 * v5, v6 < v7) ? (v8 = v6 + 48 * v5 > a3) : (v8 = 0), v8))
  {
    result = sub_1B2229700();
    __break(1u);
  }
  else
  {
    swift_arrayInitWithCopy();
    return v7;
  }
  return result;
}

uint64_t sub_1B1C6F0BC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v4;
  BOOL v5;
  uint64_t result;

  if (a2 - a1 < 0
    || ((v4 = a3 + 80 * (a2 - a1), a4 + 32 + 80 * a1 < v4) ? (v5 = a4 + 32 + 80 * a2 > a3) : (v5 = 0), v5))
  {
    result = sub_1B2229700();
    __break(1u);
  }
  else
  {
    sub_1B1B9D790(0, (unint64_t *)&qword_1EEF5CE40);
    swift_arrayInitWithCopy();
    return v4;
  }
  return result;
}

uint64_t sub_1B1C6F1CC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v4;
  BOOL v5;
  uint64_t result;

  if (a2 - a1 < 0
    || ((v4 = a3 + 48 * (a2 - a1), a4 + 32 + 48 * a1 < v4) ? (v5 = a4 + 32 + 48 * a2 > a3) : (v5 = 0), v5))
  {
    result = sub_1B2229700();
    __break(1u);
  }
  else
  {
    swift_arrayInitWithCopy();
    return v4;
  }
  return result;
}

uint64_t sub_1B1C6F2B4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v4;
  BOOL v5;
  uint64_t result;

  if (a2 - a1 < 0
    || ((v4 = a3 + 32 * (a2 - a1), a4 + 32 + 32 * a1 < v4) ? (v5 = a4 + 32 + 32 * a2 > a3) : (v5 = 0), v5))
  {
    result = sub_1B2229700();
    __break(1u);
  }
  else
  {
    swift_arrayInitWithCopy();
    return v4;
  }
  return result;
}

uint64_t sub_1B1C6F398(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v4;
  BOOL v5;
  uint64_t result;

  if (a2 - a1 < 0 || ((v4 = a3 + 8 * (a2 - a1), a4 + 32 + 8 * a1 < v4) ? (v5 = a4 + 32 + 8 * a2 > a3) : (v5 = 0), v5))
  {
    result = sub_1B2229700();
    __break(1u);
  }
  else
  {
    sub_1B1A02758(0, &qword_1EEF5AFE0, (uint64_t)&type metadata for CodeEmitter.Code, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    swift_arrayInitWithCopy();
    return v4;
  }
  return result;
}

char *sub_1B1C6F4A4(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  size_t v5;
  char *v7;
  char *v8;
  char *result;

  v5 = a2 - a1;
  if (a2 - a1 < 0
    || (v7 = (char *)(a4 + 32 + a1), v8 = &__dst[v5], v7 < &__dst[v5]) && a4 + 32 + a2 > (unint64_t)__dst)
  {
    result = (char *)sub_1B2229700();
    __break(1u);
  }
  else
  {
    memcpy(__dst, v7, v5);
    return v8;
  }
  return result;
}

uint64_t sub_1B1C6F584(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v4;
  BOOL v5;
  uint64_t result;

  if (a2 - a1 < 0
    || ((v4 = a3 + 16 * (a2 - a1), a4 + 32 + 16 * a1 < v4) ? (v5 = a4 + 32 + 16 * a2 > a3) : (v5 = 0), v5))
  {
    result = sub_1B2229700();
    __break(1u);
  }
  else
  {
    sub_1B1B9D790(0, &qword_1EEF5CC58);
    swift_arrayInitWithCopy();
    return v4;
  }
  return result;
}

uint64_t sub_1B1C6F690(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v4;
  BOOL v5;
  uint64_t result;

  if (a2 - a1 < 0
    || ((v4 = a3 + 48 * (a2 - a1), a4 + 32 + 48 * a1 < v4) ? (v5 = a4 + 32 + 48 * a2 > a3) : (v5 = 0), v5))
  {
    result = sub_1B2229700();
    __break(1u);
  }
  else
  {
    swift_arrayInitWithCopy();
    return v4;
  }
  return result;
}

uint64_t sub_1B1C6F778(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v4;
  BOOL v5;
  uint64_t result;

  if (a2 - a1 < 0
    || ((v4 = a3 + 16 * (a2 - a1), a4 + 32 + 16 * a1 < v4) ? (v5 = a4 + 32 + 16 * a2 > a3) : (v5 = 0), v5))
  {
    result = sub_1B2229700();
    __break(1u);
  }
  else
  {
    swift_arrayInitWithCopy();
    return v4;
  }
  return result;
}

uint64_t sub_1B1C6F85C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v4;
  BOOL v5;
  uint64_t result;

  if (a2 - a1 < 0
    || ((v4 = a3 + 40 * (a2 - a1), a4 + 32 + 40 * a1 < v4) ? (v5 = a4 + 32 + 40 * a2 > a3) : (v5 = 0), v5))
  {
    result = sub_1B2229700();
    __break(1u);
  }
  else
  {
    sub_1B1C78F68();
    swift_arrayInitWithCopy();
    return v4;
  }
  return result;
}

uint64_t sub_1B1C6F954(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v4;
  BOOL v5;
  uint64_t result;

  if (a2 - a1 < 0
    || ((v4 = a3 + 32 * (a2 - a1), a4 + 32 + 32 * a1 < v4) ? (v5 = a4 + 32 + 32 * a2 > a3) : (v5 = 0), v5))
  {
    result = sub_1B2229700();
    __break(1u);
  }
  else
  {
    swift_arrayInitWithCopy();
    return v4;
  }
  return result;
}

uint64_t sub_1B1C6FA38(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v4;
  BOOL v5;
  uint64_t result;

  if (a2 - a1 < 0
    || ((v4 = a3 + 32 * (a2 - a1), a4 + 32 + 32 * a1 < v4) ? (v5 = a4 + 32 + 32 * a2 > a3) : (v5 = 0), v5))
  {
    result = sub_1B2229700();
    __break(1u);
  }
  else
  {
    swift_arrayInitWithCopy();
    return v4;
  }
  return result;
}

uint64_t sub_1B1C6FB20(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v4;
  BOOL v5;
  uint64_t result;

  if (a2 - a1 < 0
    || ((v4 = a3 + 24 * (a2 - a1), a4 + 32 + 24 * a1 < v4) ? (v5 = a4 + 32 + 24 * a2 > a3) : (v5 = 0), v5))
  {
    result = sub_1B2229700();
    __break(1u);
  }
  else
  {
    sub_1B1C7826C();
    swift_arrayInitWithCopy();
    return v4;
  }
  return result;
}

char *sub_1B1C6FC18(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v6;
  char *v7;
  unint64_t v8;
  BOOL v9;
  char *result;

  v4 = a2 - a1;
  if (a2 - a1 < 0
    || ((v6 = (char *)(a4 + 32 + 2 * a1), v7 = &__dst[2 * v4], v8 = a4 + 32 + 2 * a2, v6 < v7)
      ? (v9 = v8 > (unint64_t)__dst)
      : (v9 = 0),
        v9))
  {
    result = (char *)sub_1B2229700();
    __break(1u);
  }
  else
  {
    memcpy(__dst, v6, 2 * v4);
    return v7;
  }
  return result;
}

uint64_t sub_1B1C6FCF8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v4;
  BOOL v5;
  uint64_t result;

  if (a2 - a1 < 0
    || ((v4 = a3 + ((a2 - a1) << 7), a4 + 32 + (a1 << 7) < v4) ? (v5 = a4 + 32 + (a2 << 7) > a3) : (v5 = 0), v5))
  {
    result = sub_1B2229700();
    __break(1u);
  }
  else
  {
    swift_arrayInitWithCopy();
    return v4;
  }
  return result;
}

char *sub_1B1C6FDDC(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v6;
  char *v7;
  unint64_t v8;
  BOOL v9;
  char *result;

  v4 = a2 - a1;
  if (a2 - a1 < 0
    || ((v6 = (char *)(a4 + 32 + (a1 << 6)), v7 = &__dst[64 * v4], v8 = a4 + 32 + (a2 << 6), v6 < v7)
      ? (v9 = v8 > (unint64_t)__dst)
      : (v9 = 0),
        v9))
  {
    result = (char *)sub_1B2229700();
    __break(1u);
  }
  else
  {
    memcpy(__dst, v6, v4 << 6);
    return v7;
  }
  return result;
}

uint64_t sub_1B1C6FEBC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  BOOL v7;
  uint64_t result;

  v4 = a2 - a1;
  if (a2 - a1 < 0 || ((v5 = a4 + 96 * a1 + 32, v6 = a3 + 96 * v4, v5 < v6) ? (v7 = v5 + 96 * v4 > a3) : (v7 = 0), v7))
  {
    result = sub_1B2229700();
    __break(1u);
  }
  else
  {
    sub_1B1C78898(0, a2);
    swift_arrayInitWithCopy();
    return v6;
  }
  return result;
}

uint64_t sub_1B1C6FFBC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v4;
  BOOL v5;
  uint64_t result;

  if (a2 - a1 < 0
    || ((v4 = a3 + 40 * (a2 - a1), a4 + 32 + 40 * a1 < v4) ? (v5 = a4 + 32 + 40 * a2 > a3) : (v5 = 0), v5))
  {
    result = sub_1B2229700();
    __break(1u);
  }
  else
  {
    swift_arrayInitWithCopy();
    return v4;
  }
  return result;
}

uint64_t sub_1B1C700A4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  BOOL v8;
  uint64_t result;

  v5 = a2 - a1;
  if (a2 - a1 < 0 || ((v6 = a4 + 40 * a1 + 32, v7 = a3 + 40 * v5, v6 < v7) ? (v8 = v6 + 40 * v5 > a3) : (v8 = 0), v8))
  {
    result = sub_1B2229700();
    __break(1u);
  }
  else
  {
    swift_arrayInitWithCopy();
    return v7;
  }
  return result;
}

char *sub_1B1C7018C(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v6;
  size_t v7;
  char *v8;
  unint64_t v9;
  BOOL v10;
  char *result;

  v4 = a2 - a1;
  if (a2 - a1 < 0
    || ((v6 = (char *)(a4 + 8 * a1 + 32), v7 = 8 * v4, v8 = &__dst[8 * v4], v9 = (unint64_t)&v6[8 * v4], v6 < v8)
      ? (v10 = v9 > (unint64_t)__dst)
      : (v10 = 0),
        v10))
  {
    result = (char *)sub_1B2229700();
    __break(1u);
  }
  else
  {
    memcpy(__dst, v6, v7);
    return v8;
  }
  return result;
}

uint64_t sub_1B1C70268(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v4;
  BOOL v5;
  uint64_t result;

  if (a2 - a1 < 0
    || ((v4 = a3 + 48 * (a2 - a1), a4 + 32 + 48 * a1 < v4) ? (v5 = a4 + 32 + 48 * a2 > a3) : (v5 = 0), v5))
  {
    result = sub_1B2229700();
    __break(1u);
  }
  else
  {
    sub_1B1C798AC(0, &qword_1ED4B89B0);
    swift_arrayInitWithCopy();
    return v4;
  }
  return result;
}

uint64_t sub_1B1C70380(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t *a5)
{
  unint64_t v5;
  BOOL v6;
  uint64_t result;

  if (a2 - a1 < 0
    || ((v5 = a3 + 40 * (a2 - a1), a4 + 32 + 40 * a1 < v5) ? (v6 = a4 + 32 + 40 * a2 > a3) : (v6 = 0), v6))
  {
    result = sub_1B2229700();
    __break(1u);
  }
  else
  {
    sub_1B1C798AC(0, a5);
    swift_arrayInitWithCopy();
    return v5;
  }
  return result;
}

uint64_t sub_1B1C70494(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v4;
  BOOL v5;
  uint64_t result;

  if (a2 - a1 < 0
    || ((v4 = a3 + 40 * (a2 - a1), a4 + 32 + 40 * a1 < v4) ? (v5 = a4 + 32 + 40 * a2 > a3) : (v5 = 0), v5))
  {
    result = sub_1B2229700();
    __break(1u);
  }
  else
  {
    sub_1B1A02758(0, &qword_1ED4B97E0, (uint64_t)&type metadata for CachedLocationMapping, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    swift_arrayInitWithCopy();
    return v4;
  }
  return result;
}

uint64_t sub_1B1C705A4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v4;
  BOOL v5;
  uint64_t result;

  if (a2 - a1 < 0
    || ((v4 = a3 + 32 * (a2 - a1), a4 + 32 + 32 * a1 < v4) ? (v5 = a4 + 32 + 32 * a2 > a3) : (v5 = 0), v5))
  {
    result = sub_1B2229700();
    __break(1u);
  }
  else
  {
    swift_arrayInitWithCopy();
    return v4;
  }
  return result;
}

uint64_t sub_1B1C70688(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v4;
  BOOL v5;
  uint64_t result;

  if (a2 - a1 < 0
    || ((v4 = a3 + 32 * (a2 - a1), a4 + 32 + 32 * a1 < v4) ? (v5 = a4 + 32 + 32 * a2 > a3) : (v5 = 0), v5))
  {
    result = sub_1B2229700();
    __break(1u);
  }
  else
  {
    swift_arrayInitWithCopy();
    return v4;
  }
  return result;
}

uint64_t sub_1B1C7076C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v4;
  BOOL v5;
  uint64_t result;

  if (a2 - a1 < 0
    || ((v4 = a3 + 24 * (a2 - a1), a4 + 32 + 24 * a1 < v4) ? (v5 = a4 + 32 + 24 * a2 > a3) : (v5 = 0), v5))
  {
    result = sub_1B2229700();
    __break(1u);
  }
  else
  {
    swift_arrayInitWithCopy();
    return v4;
  }
  return result;
}

uint64_t sub_1B1C70854(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t *a5, uint64_t a6)
{
  unint64_t v6;
  BOOL v7;
  uint64_t result;

  if (a2 - a1 < 0
    || ((v6 = a3 + 16 * (a2 - a1), a4 + 32 + 16 * a1 < v6) ? (v7 = a4 + 32 + 16 * a2 > a3) : (v7 = 0), v7))
  {
    result = sub_1B2229700();
    __break(1u);
  }
  else
  {
    sub_1B1A02758(0, a5, a6, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    swift_arrayInitWithCopy();
    return v6;
  }
  return result;
}

uint64_t sub_1B1C70958(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v4;
  BOOL v5;
  uint64_t result;

  if (a2 - a1 < 0
    || ((v4 = a3 + 40 * (a2 - a1), a4 + 32 + 40 * a1 < v4) ? (v5 = a4 + 32 + 40 * a2 > a3) : (v5 = 0), v5))
  {
    result = sub_1B2229700();
    __break(1u);
  }
  else
  {
    swift_arrayInitWithCopy();
    return v4;
  }
  return result;
}

uint64_t sub_1B1C70A40(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v4;
  BOOL v5;
  uint64_t result;

  if (a2 - a1 < 0
    || ((v4 = a3 + 40 * (a2 - a1), a4 + 32 + 40 * a1 < v4) ? (v5 = a4 + 32 + 40 * a2 > a3) : (v5 = 0), v5))
  {
    result = sub_1B2229700();
    __break(1u);
  }
  else
  {
    swift_arrayInitWithCopy();
    return v4;
  }
  return result;
}

uint64_t sub_1B1C70B28(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v4;
  BOOL v5;
  uint64_t result;

  if (a2 - a1 < 0
    || ((v4 = a3 + 40 * (a2 - a1), a4 + 32 + 40 * a1 < v4) ? (v5 = a4 + 32 + 40 * a2 > a3) : (v5 = 0), v5))
  {
    result = sub_1B2229700();
    __break(1u);
  }
  else
  {
    swift_arrayInitWithCopy();
    return v4;
  }
  return result;
}

uint64_t sub_1B1C70C10(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v4;
  BOOL v5;
  uint64_t result;

  if (a2 - a1 < 0
    || ((v4 = a3 + 32 * (a2 - a1), a4 + 32 + 32 * a1 < v4) ? (v5 = a4 + 32 + 32 * a2 > a3) : (v5 = 0), v5))
  {
    result = sub_1B2229700();
    __break(1u);
  }
  else
  {
    swift_arrayInitWithCopy();
    return v4;
  }
  return result;
}

uint64_t sub_1B1C70CF4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v4;
  BOOL v5;
  uint64_t result;

  if (a2 - a1 < 0
    || ((v4 = a3 + ((a2 - a1) << 6), a4 + 32 + (a1 << 6) < v4) ? (v5 = a4 + 32 + (a2 << 6) > a3) : (v5 = 0), v5))
  {
    result = sub_1B2229700();
    __break(1u);
  }
  else
  {
    swift_arrayInitWithCopy();
    return v4;
  }
  return result;
}

uint64_t sub_1B1C70DD8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v4;
  BOOL v5;
  uint64_t result;

  if (a2 - a1 < 0 || ((v4 = a3 + 8 * (a2 - a1), a4 + 32 + 8 * a1 < v4) ? (v5 = a4 + 32 + 8 * a2 > a3) : (v5 = 0), v5))
  {
    result = sub_1B2229700();
    __break(1u);
  }
  else
  {
    swift_arrayInitWithCopy();
    return v4;
  }
  return result;
}

uint64_t sub_1B1C70EB8(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _BYTE *i;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  char isUniquelyReferenced_nonNull_native;
  char v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t result;
  char v24;
  uint64_t v25;
  _QWORD *v26;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = (_QWORD *)sub_1B2228548();
  v4 = sub_1B1C63044(0, v2, 0, MEMORY[0x1E0DEE9D8]);
  if (!v2)
    return (uint64_t)v3;
  for (i = (_BYTE *)(a1 + 72); ; i += 48)
  {
    v9 = *((_QWORD *)i - 5);
    v8 = *((_QWORD *)i - 4);
    v10 = *((_QWORD *)i - 3);
    v24 = *(i - 16);
    v25 = *((_QWORD *)i - 1);
    v11 = *i;
    swift_bridgeObjectRetain_n();
    sub_1B1B1DD24(v10);
    v13 = v4[2];
    v12 = v4[3];
    if (v13 >= v12 >> 1)
      v4 = sub_1B1C63044(v12 > 1, v13 + 1, 1, v4);
    v4[2] = v13 + 1;
    v26 = v4;
    v14 = &v4[2 * v13];
    v14[4] = v9;
    v14[5] = v8;
    swift_bridgeObjectRetain();
    sub_1B1B1DD24(v10);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v17 = sub_1B1DC3B00(v9, v8);
    v18 = v16;
    v19 = v3[2] + ((v16 & 1) == 0);
    if (v3[3] < v19)
      break;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      v4 = v26;
      if ((v16 & 1) != 0)
        goto LABEL_13;
    }
    else
    {
      sub_1B1EABB7C();
      v4 = v26;
      if ((v18 & 1) != 0)
      {
LABEL_13:
        v22 = v3[7] + 32 * v17;
        sub_1B1A05610(*(_QWORD *)v22);
        *(_QWORD *)v22 = v10;
        *(_BYTE *)(v22 + 8) = v24;
        *(_QWORD *)(v22 + 16) = v25;
        *(_BYTE *)(v22 + 24) = v11;
        goto LABEL_4;
      }
    }
LABEL_3:
    v3[(v17 >> 6) + 8] |= 1 << v17;
    v6 = (uint64_t *)(v3[6] + 16 * v17);
    *v6 = v9;
    v6[1] = v8;
    v7 = v3[7] + 32 * v17;
    *(_QWORD *)v7 = v10;
    *(_BYTE *)(v7 + 8) = v24;
    *(_QWORD *)(v7 + 16) = v25;
    *(_BYTE *)(v7 + 24) = v11;
    ++v3[2];
    swift_bridgeObjectRetain();
LABEL_4:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1B1A05610(v10);
    swift_bridgeObjectRelease();
    if (!--v2)
      return (uint64_t)v3;
  }
  sub_1B1E975D8(v19, isUniquelyReferenced_nonNull_native);
  v20 = sub_1B1DC3B00(v9, v8);
  if ((v18 & 1) == (v21 & 1))
  {
    v17 = v20;
    v4 = v26;
    if ((v18 & 1) != 0)
      goto LABEL_13;
    goto LABEL_3;
  }
  result = sub_1B2229FC4();
  __break(1u);
  return result;
}

uint64_t sub_1B1C71130(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;

  v5 = a2 - a1;
  if (a2 - a1 < 0)
    goto LABEL_7;
  v9 = *(_QWORD *)(a5(0) - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = *(_QWORD *)(v9 + 72);
  v12 = a4 + ((v10 + 32) & ~v10) + v11 * a1;
  v13 = v11 * v5;
  v14 = a3 + v13;
  v15 = v12 + v13;
  if (v12 < v14 && v15 > a3)
  {
LABEL_7:
    result = sub_1B2229700();
    __break(1u);
  }
  else
  {
    swift_arrayInitWithCopy();
    return v14;
  }
  return result;
}

uint64_t sub_1B1C71240(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  BOOL v7;
  uint64_t result;

  v4 = a2 - a1;
  if (a2 - a1 < 0
    || ((v5 = a4 + (a1 << 6) + 32, v6 = a3 + (v4 << 6), v5 < v6) ? (v7 = v5 + (v4 << 6) > a3) : (v7 = 0), v7))
  {
    result = sub_1B2229700();
    __break(1u);
  }
  else
  {
    sub_1B1C78B38(0, &qword_1EEF5CBC0);
    swift_arrayInitWithCopy();
    return v6;
  }
  return result;
}

uint64_t sub_1B1C71358(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v4;
  BOOL v5;
  uint64_t result;

  if (a2 - a1 < 0
    || ((v4 = a3 + 16 * (a2 - a1), a4 + 32 + 16 * a1 < v4) ? (v5 = a4 + 32 + 16 * a2 > a3) : (v5 = 0), v5))
  {
    result = sub_1B2229700();
    __break(1u);
  }
  else
  {
    sub_1B1C71E70();
    swift_arrayInitWithCopy();
    return v4;
  }
  return result;
}

uint64_t sub_1B1C7144C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v4;
  BOOL v5;
  uint64_t result;

  if (a2 - a1 < 0
    || ((v4 = a3 + 88 * (a2 - a1), a4 + 32 + 88 * a1 < v4) ? (v5 = a4 + 32 + 88 * a2 > a3) : (v5 = 0), v5))
  {
    result = sub_1B2229700();
    __break(1u);
  }
  else
  {
    swift_arrayInitWithCopy();
    return v4;
  }
  return result;
}

char *sub_1B1C71534(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v6;
  size_t v7;
  char *v8;
  unint64_t v9;
  BOOL v10;
  char *result;

  v4 = a2 - a1;
  if (a2 - a1 < 0
    || ((v6 = (char *)(a4 + 32 * a1 + 32),
         v7 = 32 * v4,
         v8 = &__dst[32 * v4],
         v9 = (unint64_t)&v6[32 * v4],
         v6 < v8)
      ? (v10 = v9 > (unint64_t)__dst)
      : (v10 = 0),
        v10))
  {
    result = (char *)sub_1B2229700();
    __break(1u);
  }
  else
  {
    memcpy(__dst, v6, v7);
    return v8;
  }
  return result;
}

uint64_t sub_1B1C71610(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  char *v5;
  _OWORD *i;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char isUniquelyReferenced_nonNull_native;
  char v23;
  unint64_t v24;
  char v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t result;
  _OWORD v45[9];
  char v46;
  _QWORD *v47;
  _BYTE v48[153];

  v2 = *(_QWORD *)(a1 + 16);
  sub_1B1C795D4();
  v3 = MEMORY[0x1E0DEA520];
  v4 = (_QWORD *)sub_1B2228548();
  v5 = sub_1B1C632C0(0, v2, 0, MEMORY[0x1E0DEE9D8], &qword_1EEF5CCA8, v3);
  if (!v2)
    return (uint64_t)v4;
  for (i = (_OWORD *)(a1 + 32); ; i += 10)
  {
    v15 = i[7];
    *(_OWORD *)&v48[96] = i[6];
    *(_OWORD *)&v48[112] = v15;
    *(_OWORD *)&v48[128] = i[8];
    *(_OWORD *)&v48[137] = *(_OWORD *)((char *)i + 137);
    v16 = i[3];
    *(_OWORD *)&v48[32] = i[2];
    *(_OWORD *)&v48[48] = v16;
    v17 = i[5];
    *(_OWORD *)&v48[64] = i[4];
    *(_OWORD *)&v48[80] = v17;
    v18 = i[1];
    *(_OWORD *)v48 = *i;
    *(_OWORD *)&v48[16] = v18;
    v19 = *(_QWORD *)v48;
    sub_1B1C79658((uint64_t)v48);
    v21 = *((_QWORD *)v5 + 2);
    v20 = *((_QWORD *)v5 + 3);
    if (v21 >= v20 >> 1)
      v5 = sub_1B1C632C0(v20 > 1, v21 + 1, 1, v5, &qword_1EEF5CCA8, MEMORY[0x1E0DEA520]);
    *((_QWORD *)v5 + 2) = v21 + 1;
    *(_QWORD *)&v5[8 * v21 + 32] = v19;
    sub_1B1B7C5AC((uint64_t)&v48[8]);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v47 = v4;
    v24 = sub_1B1DC3AC8(v19);
    v25 = v23;
    v26 = v4[2] + ((v23 & 1) == 0);
    if (v4[3] < v26)
      break;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      if ((v23 & 1) != 0)
        goto LABEL_13;
    }
    else
    {
      sub_1B1EADE60();
      if ((v25 & 1) != 0)
      {
LABEL_13:
        v4 = v47;
        v29 = v47[7] + 152 * v24;
        v30 = *(_OWORD *)(v29 + 16);
        v45[0] = *(_OWORD *)v29;
        v45[1] = v30;
        v31 = *(_OWORD *)(v29 + 80);
        v33 = *(_OWORD *)(v29 + 32);
        v32 = *(_OWORD *)(v29 + 48);
        v45[4] = *(_OWORD *)(v29 + 64);
        v45[5] = v31;
        v45[2] = v33;
        v45[3] = v32;
        v35 = *(_OWORD *)(v29 + 112);
        v34 = *(_OWORD *)(v29 + 128);
        v36 = *(_OWORD *)(v29 + 96);
        v46 = *(_BYTE *)(v29 + 144);
        v45[7] = v35;
        v45[8] = v34;
        v45[6] = v36;
        sub_1B19ED720((uint64_t)v45);
        v37 = *(_OWORD *)&v48[24];
        *(_OWORD *)v29 = *(_OWORD *)&v48[8];
        *(_OWORD *)(v29 + 16) = v37;
        v38 = *(_OWORD *)&v48[88];
        v40 = *(_OWORD *)&v48[40];
        v39 = *(_OWORD *)&v48[56];
        *(_OWORD *)(v29 + 64) = *(_OWORD *)&v48[72];
        *(_OWORD *)(v29 + 80) = v38;
        *(_OWORD *)(v29 + 32) = v40;
        *(_OWORD *)(v29 + 48) = v39;
        v42 = *(_OWORD *)&v48[120];
        v41 = *(_OWORD *)&v48[136];
        v43 = *(_OWORD *)&v48[104];
        *(_BYTE *)(v29 + 144) = v48[152];
        *(_OWORD *)(v29 + 112) = v42;
        *(_OWORD *)(v29 + 128) = v41;
        *(_OWORD *)(v29 + 96) = v43;
        goto LABEL_4;
      }
    }
LABEL_3:
    v4 = v47;
    v47[(v24 >> 6) + 8] |= 1 << v24;
    *(_QWORD *)(v4[6] + 8 * v24) = v19;
    v7 = v4[7] + 152 * v24;
    v8 = *(_OWORD *)&v48[24];
    *(_OWORD *)v7 = *(_OWORD *)&v48[8];
    *(_OWORD *)(v7 + 16) = v8;
    v9 = *(_OWORD *)&v48[88];
    v11 = *(_OWORD *)&v48[40];
    v10 = *(_OWORD *)&v48[56];
    *(_OWORD *)(v7 + 64) = *(_OWORD *)&v48[72];
    *(_OWORD *)(v7 + 80) = v9;
    *(_OWORD *)(v7 + 32) = v11;
    *(_OWORD *)(v7 + 48) = v10;
    v12 = *(_OWORD *)&v48[104];
    v13 = *(_OWORD *)&v48[120];
    v14 = *(_OWORD *)&v48[136];
    *(_BYTE *)(v7 + 144) = v48[152];
    *(_OWORD *)(v7 + 112) = v13;
    *(_OWORD *)(v7 + 128) = v14;
    *(_OWORD *)(v7 + 96) = v12;
    ++v4[2];
LABEL_4:
    swift_bridgeObjectRelease();
    sub_1B1C796D8((uint64_t)v48);
    if (!--v2)
      return (uint64_t)v4;
  }
  sub_1B1E9B630(v26, isUniquelyReferenced_nonNull_native);
  v27 = sub_1B1DC3AC8(v19);
  if ((v25 & 1) == (v28 & 1))
  {
    v24 = v27;
    if ((v25 & 1) != 0)
      goto LABEL_13;
    goto LABEL_3;
  }
  result = sub_1B2229FC4();
  __break(1u);
  return result;
}

uint64_t sub_1B1C718F4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  char *v5;
  uint64_t *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char isUniquelyReferenced_nonNull_native;
  char v14;
  unint64_t v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  _QWORD *v20;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BA2B0, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  v3 = MEMORY[0x1E0DEA520];
  v4 = (_QWORD *)sub_1B2228548();
  v5 = sub_1B1C632C0(0, v2, 0, MEMORY[0x1E0DEE9D8], &qword_1EEF5CCA8, v3);
  if (!v2)
    return (uint64_t)v4;
  v6 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v9 = *(v6 - 2);
    v8 = *(v6 - 1);
    v10 = *v6;
    v11 = *((_QWORD *)v5 + 2);
    v12 = *((_QWORD *)v5 + 3);
    swift_bridgeObjectRetain();
    if (v11 >= v12 >> 1)
      v5 = sub_1B1C632C0(v12 > 1, v11 + 1, 1, v5, &qword_1EEF5CCA8, MEMORY[0x1E0DEA520]);
    *((_QWORD *)v5 + 2) = v11 + 1;
    *(_QWORD *)&v5[8 * v11 + 32] = v9;
    swift_bridgeObjectRetain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v15 = sub_1B1DC3AC8(v9);
    v16 = v14;
    v17 = v4[2] + ((v14 & 1) == 0);
    if (v4[3] < v17)
      break;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      if ((v14 & 1) != 0)
        goto LABEL_13;
    }
    else
    {
      sub_1B1EAE08C();
      if ((v16 & 1) != 0)
      {
LABEL_13:
        v20 = (_QWORD *)(v4[7] + 16 * v15);
        swift_bridgeObjectRelease();
        *v20 = v8;
        v20[1] = v10;
        goto LABEL_4;
      }
    }
LABEL_3:
    v4[(v15 >> 6) + 8] |= 1 << v15;
    *(_QWORD *)(v4[6] + 8 * v15) = v9;
    v7 = (_QWORD *)(v4[7] + 16 * v15);
    *v7 = v8;
    v7[1] = v10;
    ++v4[2];
LABEL_4:
    v6 += 3;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (!--v2)
      return (uint64_t)v4;
  }
  sub_1B1E9B9A4(v17, isUniquelyReferenced_nonNull_native);
  v18 = sub_1B1DC3AC8(v9);
  if ((v16 & 1) == (v19 & 1))
  {
    v15 = v18;
    if ((v16 & 1) != 0)
      goto LABEL_13;
    goto LABEL_3;
  }
  result = sub_1B2229FC4();
  __break(1u);
  return result;
}

uint64_t sub_1B1C71B30()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t type metadata accessor for RGGraphTranslator.Reference(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B19E5E34(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for RGGraphTranslator.Reference);
}

void sub_1B1C71BAC(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    sub_1B1AEC268(255, a3);
    v4 = sub_1B2229A18();
    if (!v5)
      atomic_store(v4, a2);
  }
}

void sub_1B1C71C08()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_1ED4BB0C0)
  {
    sub_1B19F8E54(255, (unint64_t *)&qword_1ED4BB0E0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDDA8]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1ED4BB0C0);
  }
}

void sub_1B1C71C90()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_1ED4BB0E8)
  {
    sub_1B19F8E54(255, (unint64_t *)&qword_1ED4BB0E0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDDA8]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1ED4BB0E8);
  }
}

void sub_1B1C71D14()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_1ED4B89F0)
  {
    sub_1B1B9CF68(255, &qword_1ED4B8A00, (unint64_t *)&qword_1ED4B89D0);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1ED4B89F0);
  }
}

void sub_1B1C71D98()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED4BADF0)
  {
    sub_1B1A02758(255, &qword_1ED4B97E0, (uint64_t)&type metadata for CachedLocationMapping, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    v0 = sub_1B2229A18();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED4BADF0);
  }
}

void sub_1B1C71E04()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5CB80)
  {
    sub_1B1A02758(255, (unint64_t *)&qword_1ED4BA2B0, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    v0 = sub_1B2229A18();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5CB80);
  }
}

void sub_1B1C71E70()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_1EEF5CBA8)
  {
    _s11ParameterInCMa();
    sub_1B1791524(255, &qword_1EEF5CBB0, (uint64_t (*)(uint64_t))_s12ParameterOutCMa, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1EEF5CBA8);
  }
}

void sub_1B1C71EF4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5CBB8)
  {
    sub_1B1C78B38(255, &qword_1EEF5CBC0);
    v0 = sub_1B2229A18();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5CBB8);
  }
}

void sub_1B1C71F68()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5CBF0)
  {
    sub_1B1A02758(255, &qword_1EEF5CBF8, (uint64_t)&type metadata for Position, MEMORY[0x1E0DEB9C0]);
    v0 = sub_1B2229A18();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5CBF0);
  }
}

uint64_t sub_1B1C71FD4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  char *v5;
  uint64_t *i;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char isUniquelyReferenced_nonNull_native;
  char v13;
  unint64_t v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = MEMORY[0x1E0DEA520];
  v4 = (_QWORD *)sub_1B2228548();
  v5 = sub_1B1C632C0(0, v2, 0, MEMORY[0x1E0DEE9D8], &qword_1EEF5CCA8, v3);
  if (!v2)
    return (uint64_t)v4;
  for (i = (uint64_t *)(a1 + 40); ; i += 2)
  {
    v9 = *(i - 1);
    v8 = *i;
    v11 = *((_QWORD *)v5 + 2);
    v10 = *((_QWORD *)v5 + 3);
    if (v11 >= v10 >> 1)
      v5 = sub_1B1C632C0(v10 > 1, v11 + 1, 1, v5, &qword_1EEF5CCA8, MEMORY[0x1E0DEA520]);
    *((_QWORD *)v5 + 2) = v11 + 1;
    *(_QWORD *)&v5[8 * v11 + 32] = v9;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v14 = sub_1B1DC3AC8(v9);
    v15 = v13;
    v16 = v4[2] + ((v13 & 1) == 0);
    if (v4[3] < v16)
      break;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      if ((v13 & 1) != 0)
        goto LABEL_13;
    }
    else
    {
      sub_1B1EB1DF8();
      if ((v15 & 1) != 0)
      {
LABEL_13:
        *(_QWORD *)(v4[7] + 8 * v14) = v8;
        goto LABEL_4;
      }
    }
LABEL_3:
    v4[(v14 >> 6) + 8] |= 1 << v14;
    v7 = 8 * v14;
    *(_QWORD *)(v4[6] + v7) = v9;
    *(_QWORD *)(v4[7] + v7) = v8;
    ++v4[2];
LABEL_4:
    swift_bridgeObjectRelease();
    if (!--v2)
      return (uint64_t)v4;
  }
  sub_1B1EA1E00(v16, isUniquelyReferenced_nonNull_native);
  v17 = sub_1B1DC3AC8(v9);
  if ((v15 & 1) == (v18 & 1))
  {
    v14 = v17;
    if ((v15 & 1) != 0)
      goto LABEL_13;
    goto LABEL_3;
  }
  result = sub_1B2229FC4();
  __break(1u);
  return result;
}

void sub_1B1C721CC(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;

  if (!*(_QWORD *)(a2 + 16))
  {
    v4 = swift_retain();
    MEMORY[0x1B5E2064C](v4);
    if (*(_QWORD *)((*a3 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*a3 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      sub_1B2228AF4();
    sub_1B2228B30();
    sub_1B2228AD0();
  }
}

uint64_t sub_1B1C72248(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t *a5, void (*a6)(uint64_t))
{
  unint64_t v6;
  BOOL v7;
  uint64_t result;

  if (a2 - a1 < 0
    || ((v6 = a3 + 24 * (a2 - a1), a4 + 32 + 24 * a1 < v6) ? (v7 = a4 + 32 + 24 * a2 > a3) : (v7 = 0), v7))
  {
    result = sub_1B2229700();
    __break(1u);
  }
  else
  {
    sub_1B1B9D98C(0, a5, a6);
    swift_arrayInitWithCopy();
    return v6;
  }
  return result;
}

char *sub_1B1C72348(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v6;
  size_t v7;
  char *v8;
  unint64_t v9;
  BOOL v10;
  char *result;

  v4 = a2 - a1;
  if (a2 - a1 < 0
    || ((v6 = (char *)(a4 + 16 * a1 + 32),
         v7 = 16 * v4,
         v8 = &__dst[16 * v4],
         v9 = (unint64_t)&v6[16 * v4],
         v6 < v8)
      ? (v10 = v9 > (unint64_t)__dst)
      : (v10 = 0),
        v10))
  {
    result = (char *)sub_1B2229700();
    __break(1u);
  }
  else
  {
    memcpy(__dst, v6, v7);
    return v8;
  }
  return result;
}

uint64_t sub_1B1C72424(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v4;
  BOOL v5;
  uint64_t result;

  if (a2 - a1 < 0
    || ((v4 = a3 + 24 * (a2 - a1), a4 + 32 + 24 * a1 < v4) ? (v5 = a4 + 32 + 24 * a2 > a3) : (v5 = 0), v5))
  {
    result = sub_1B2229700();
    __break(1u);
  }
  else
  {
    swift_arrayInitWithCopy();
    return v4;
  }
  return result;
}

uint64_t sub_1B1C7250C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  BOOL v8;
  uint64_t result;

  v5 = a2 - a1;
  if (a2 - a1 < 0
    || ((v6 = a4 + (a1 << 6) + 32, v7 = a3 + (v5 << 6), v6 < v7) ? (v8 = v6 + (v5 << 6) > a3) : (v8 = 0), v8))
  {
    result = sub_1B2229700();
    __break(1u);
  }
  else
  {
    swift_arrayInitWithCopy();
    return v7;
  }
  return result;
}

void sub_1B1C725EC(uint64_t a1@<X0>, void (*a2)(uint64_t *__return_ptr, _OWORD *)@<X1>, uint64_t a3@<X8>)
{
  int v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _OWORD v13[9];
  uint64_t v14;
  unint64_t v15[18];
  _BYTE v16[144];
  _OWORD v17[9];

  *(_QWORD *)&v17[0] = a1;
  a2(&v14, v17);
  swift_release();
  sub_1B1A18378((uint64_t)v15, (uint64_t)v16, &qword_1EEF61660, (uint64_t)&type metadata for GraphTranslateResult);
  sub_1B1A18378((uint64_t)v16, (uint64_t)v17, &qword_1EEF61660, (uint64_t)&type metadata for GraphTranslateResult);
  if (sub_1B1C79560((uint64_t)v17) == 1
    || (sub_1B1C79574(v17, v13), v4 = sub_1B1C795AC((uint64_t)v13), nullsub_16(v13), v4 == 1))
  {
    v14 = 0;
    v15[0] = 0xE000000000000000;
    sub_1B2229430();
    v10 = sub_1B1BCE95C();
    v12 = v11;
    swift_bridgeObjectRelease();
    v14 = v10;
    v15[0] = v12;
    sub_1B2228890();
    sub_1B2229688();
    __break(1u);
  }
  else
  {
    v6 = *(_OWORD *)(v5 + 112);
    *(_OWORD *)(a3 + 96) = *(_OWORD *)(v5 + 96);
    *(_OWORD *)(a3 + 112) = v6;
    *(_QWORD *)(a3 + 128) = *(_QWORD *)(v5 + 128);
    v7 = *(_OWORD *)(v5 + 48);
    *(_OWORD *)(a3 + 32) = *(_OWORD *)(v5 + 32);
    *(_OWORD *)(a3 + 48) = v7;
    v8 = *(_OWORD *)(v5 + 80);
    *(_OWORD *)(a3 + 64) = *(_OWORD *)(v5 + 64);
    *(_OWORD *)(a3 + 80) = v8;
    v9 = *(_OWORD *)(v5 + 16);
    *(_OWORD *)a3 = *(_OWORD *)v5;
    *(_OWORD *)(a3 + 16) = v9;
  }
}

uint64_t sub_1B1C7276C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v4;
  BOOL v5;
  uint64_t result;

  if (a2 - a1 < 0
    || ((v4 = a3 + 16 * (a2 - a1), a4 + 32 + 16 * a1 < v4) ? (v5 = a4 + 32 + 16 * a2 > a3) : (v5 = 0), v5))
  {
    result = sub_1B2229700();
    __break(1u);
  }
  else
  {
    sub_1B1A0FCB4();
    swift_arrayInitWithCopy();
    return v4;
  }
  return result;
}

uint64_t sub_1B1C72860(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)();
  char v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  char v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  char v39;
  uint64_t v40;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v42;
  unint64_t v43;
  char v44;
  char v45;
  uint64_t v46;
  unint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  char v52;
  unint64_t v53;
  unint64_t v54;
  _QWORD *v55;
  uint64_t result;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  _OWORD v70[2];

  v7 = a1 + OBJC_IVAR____TtC3VFX12ConstantNode_holder;
  v8 = *(_QWORD *)(a1 + OBJC_IVAR____TtC3VFX12ConstantNode_holder);
  *((_QWORD *)&v10 + 1) = v8;
  *(_QWORD *)&v10 = v8 + 0x7FFFFFFFFFFFFFF0;
  v9 = v10 >> 3;
  switch(v9)
  {
    case 0:
      sub_1B1A02864(v7 + 8, (uint64_t)&v66);
      swift_dynamicCast();
      v17 = v70[0];
      v15 = swift_allocObject();
      *(_QWORD *)(v15 + 16) = a3;
      *(_QWORD *)(v15 + 24) = 1;
      *(_BYTE *)(v15 + 32) = v17;
      v16 = (uint64_t (*)())sub_1B1C79BF8;
      goto LABEL_19;
    case 4:
    case 5:
      sub_1B1A02864(v7 + 8, (uint64_t)&v66);
      swift_dynamicCast();
      v24 = v70[0];
      v15 = swift_allocObject();
      *(_QWORD *)(v15 + 16) = a3;
      *(_QWORD *)(v15 + 24) = 4;
      *(_DWORD *)(v15 + 32) = v24;
      v16 = sub_1B1C79BAC;
      goto LABEL_19;
    case 6:
      sub_1B1A02864(v7 + 8, (uint64_t)&v66);
      swift_dynamicCast();
      v25 = *(_QWORD *)&v70[0];
      v15 = swift_allocObject();
      *(_QWORD *)(v15 + 16) = a3;
      *(_QWORD *)(v15 + 24) = 8;
      *(_QWORD *)(v15 + 32) = v25;
      v16 = (uint64_t (*)())sub_1B1C79B74;
      goto LABEL_19;
    case 8:
      sub_1B1A02864(v7 + 8, (uint64_t)&v66);
      swift_dynamicCast();
      v26 = v70[0];
      v15 = swift_allocObject();
      *(_QWORD *)(v15 + 16) = a3;
      *(_QWORD *)(v15 + 24) = 4;
      *(_DWORD *)(v15 + 32) = v26;
      v16 = (uint64_t (*)())sub_1B1C79B34;
      goto LABEL_19;
    default:
      v11 = swift_allocObject();
      *(_OWORD *)(v11 + 16) = xmmword_1B2286450;
      v12 = v11 | 0x1000000000000000;
      sub_1B1B632F0(v8);
      sub_1B1B632F0(v8);
      sub_1B1D76C18(v12);
      LOBYTE(v12) = v13;
      swift_release();
      sub_1B1B28D2C(v8);
      if ((v12 & 1) != 0)
      {
        sub_1B1B28D2C(v8);
        sub_1B1A02864(v7 + 8, (uint64_t)&v66);
        sub_1B19F8E54(0, &qword_1ED4BB080, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], MEMORY[0x1E0DEDD20]);
        swift_dynamicCast();
        v14 = *(_QWORD *)&v70[0];
        v15 = swift_allocObject();
        *(_QWORD *)(v15 + 16) = a3;
        *(_QWORD *)(v15 + 24) = 8;
        *(_QWORD *)(v15 + 32) = v14;
        v16 = (uint64_t (*)())sub_1B1C79AF4;
      }
      else
      {
        v18 = swift_allocObject();
        *(_OWORD *)(v18 + 16) = xmmword_1B22847D0;
        v19 = v18 | 0x1000000000000000;
        sub_1B1B632F0(v8);
        sub_1B1D76C18(v19);
        LOBYTE(v19) = v20;
        swift_release();
        sub_1B1B28D2C(v8);
        if ((v19 & 1) != 0)
        {
          sub_1B1B28D2C(v8);
          sub_1B1A02864(v7 + 8, (uint64_t)&v66);
          sub_1B19F8E54(0, (unint64_t *)&qword_1ED4BB0A0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50]);
          swift_dynamicCast();
          v62 = v70[0];
          v15 = swift_allocObject();
          *(_QWORD *)(v15 + 16) = a3;
          *(_QWORD *)(v15 + 24) = 16;
          *(_OWORD *)(v15 + 32) = v62;
          v16 = sub_1B1C79A98;
        }
        else
        {
          v21 = swift_allocObject();
          *(_OWORD *)(v21 + 16) = xmmword_1B22847C0;
          v22 = v21 | 0x1000000000000000;
          sub_1B1B632F0(v8);
          sub_1B1D76C18(v22);
          LOBYTE(v22) = v23;
          swift_release();
          sub_1B1B28D2C(v8);
          if ((v22 & 1) != 0)
          {
            sub_1B1B28D2C(v8);
            sub_1B1A02864(v7 + 8, (uint64_t)&v66);
            sub_1B19F8E54(0, (unint64_t *)&qword_1ED4BB0E0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDDA8]);
            swift_dynamicCast();
            v63 = v70[0];
            v15 = swift_allocObject();
            *(_QWORD *)(v15 + 16) = a3;
            *(_QWORD *)(v15 + 24) = 16;
            *(_OWORD *)(v15 + 32) = v63;
            v16 = sub_1B1C79A98;
          }
          else
          {
            v27 = swift_allocObject();
            *(_QWORD *)(v27 + 16) = 2;
            v28 = swift_allocObject();
            *(_OWORD *)(v28 + 16) = xmmword_1B2286450;
            *(_QWORD *)(v27 + 24) = v28 | 0x1000000000000000;
            sub_1B1B632F0(v8);
            sub_1B1D76C18(v27 | 0x1000000000000000);
            v30 = v29;
            swift_release();
            sub_1B1B28D2C(v8);
            if ((v30 & 1) != 0)
            {
              sub_1B1B28D2C(v8);
              sub_1B1A02864(v7 + 8, (uint64_t)&v66);
              type metadata accessor for simd_float2x2(0);
              swift_dynamicCast();
              v31 = v70[0];
              v15 = swift_allocObject();
              *(_QWORD *)(v15 + 16) = a3;
              *(_QWORD *)(v15 + 24) = 16;
              *(_OWORD *)(v15 + 32) = v31;
              v16 = (uint64_t (*)())sub_1B1C79A54;
            }
            else
            {
              v32 = swift_allocObject();
              *(_QWORD *)(v32 + 16) = 3;
              v33 = swift_allocObject();
              *(_OWORD *)(v33 + 16) = xmmword_1B22847D0;
              *(_QWORD *)(v32 + 24) = v33 | 0x1000000000000000;
              sub_1B1B632F0(v8);
              sub_1B1D76C18(v32 | 0x1000000000000000);
              v35 = v34;
              swift_release();
              sub_1B1B28D2C(v8);
              if ((v35 & 1) != 0)
              {
                sub_1B1B28D2C(v8);
                sub_1B1A02864(v7 + 8, (uint64_t)v70);
                type metadata accessor for simd_float3x3(0);
                swift_dynamicCast();
                v58 = v67;
                v60 = v66;
                v64 = v68;
                v15 = swift_allocObject();
                *(_QWORD *)(v15 + 16) = a3;
                *(_QWORD *)(v15 + 24) = 48;
                *(_OWORD *)(v15 + 32) = v60;
                *(_OWORD *)(v15 + 48) = v58;
                v16 = (uint64_t (*)())sub_1B1C799F0;
                *(_OWORD *)(v15 + 64) = v64;
              }
              else
              {
                v36 = swift_allocObject();
                *(_QWORD *)(v36 + 16) = 4;
                v37 = swift_allocObject();
                *(_OWORD *)(v37 + 16) = xmmword_1B22847C0;
                *(_QWORD *)(v36 + 24) = v37 | 0x1000000000000000;
                sub_1B1D76C18(v36 | 0x1000000000000000);
                v39 = v38;
                swift_release();
                sub_1B1B28D2C(v8);
                if ((v39 & 1) == 0)
                  return 0;
                sub_1B1A02864(v7 + 8, (uint64_t)v70);
                type metadata accessor for simd_float4x4(0);
                swift_dynamicCast();
                v57 = v67;
                v59 = v66;
                v61 = v69;
                v65 = v68;
                v15 = swift_allocObject();
                *(_QWORD *)(v15 + 16) = a3;
                *(_QWORD *)(v15 + 24) = 64;
                *(_OWORD *)(v15 + 32) = v59;
                *(_OWORD *)(v15 + 48) = v57;
                v16 = (uint64_t (*)())sub_1B1C79958;
                *(_OWORD *)(v15 + 64) = v65;
                *(_OWORD *)(v15 + 80) = v61;
              }
            }
          }
        }
      }
LABEL_19:
      v40 = swift_allocObject();
      *(_QWORD *)(v40 + 16) = v16;
      *(_QWORD *)(v40 + 24) = v15;
      swift_retain_n();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)&v66 = *a4;
      v42 = v66;
      *a4 = 0x8000000000000000;
      v43 = sub_1B1DC3AC8(a2);
      v45 = v44;
      v46 = *(_QWORD *)(v42 + 16) + ((v44 & 1) == 0);
      if (*(_QWORD *)(v42 + 24) >= v46)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_1B1EADA80();
          v42 = v66;
        }
      }
      else
      {
        sub_1B1E9B038(v46, isUniquelyReferenced_nonNull_native);
        v42 = v66;
        v47 = sub_1B1DC3AC8(a2);
        if ((v45 & 1) != (v48 & 1))
        {
          result = sub_1B2229FC4();
          __break(1u);
          return result;
        }
        v43 = v47;
      }
      *a4 = v42;
      swift_bridgeObjectRelease();
      v49 = *a4;
      swift_bridgeObjectRetain();
      if ((v45 & 1) == 0)
        sub_1B1EB6E04(v43, a2, MEMORY[0x1E0DEE9D8], v49);
      v50 = *(_QWORD *)(v49 + 56);
      swift_bridgeObjectRelease();
      v51 = *(_QWORD **)(v50 + 8 * v43);
      v52 = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)(v50 + 8 * v43) = v51;
      if ((v52 & 1) == 0)
      {
        v51 = sub_1B1C670DC(0, v51[2] + 1, 1, v51, &qword_1EEF5CEF8, (uint64_t (*)(uint64_t))sub_1B1C79C20);
        *(_QWORD *)(v50 + 8 * v43) = v51;
      }
      v54 = v51[2];
      v53 = v51[3];
      if (v54 >= v53 >> 1)
      {
        v51 = sub_1B1C670DC(v53 > 1, v54 + 1, 1, v51, &qword_1EEF5CEF8, (uint64_t (*)(uint64_t))sub_1B1C79C20);
        *(_QWORD *)(v50 + 8 * v43) = v51;
      }
      v51[2] = v54 + 1;
      v55 = &v51[2 * v54];
      v55[4] = sub_1B1C799DC;
      v55[5] = v40;
      sub_1B19E5A18((uint64_t)v16);
      sub_1B19E5A18((uint64_t)v16);
      return 1;
  }
}

uint64_t sub_1B1C73264(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v17;
  unint64_t v18;
  char v19;
  char v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  char v27;
  unint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  uint64_t result;
  uint64_t v32;

  v8 = sub_1B2076838(*(_QWORD *)(v4 + 56));
  v11 = v10;
  if ((v10 & 1) != 0)
    return (v11 & 1) == 0;
  v12 = v8;
  v13 = v9;
  v14 = (_QWORD *)swift_allocObject();
  v14[2] = a3;
  v14[3] = 16;
  v14[4] = v12;
  v14[5] = v13;
  v15 = swift_allocObject();
  *(_QWORD *)(v15 + 16) = sub_1B1C79AAC;
  *(_QWORD *)(v15 + 24) = v14;
  swift_retain_n();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v17 = *a4;
  v32 = *a4;
  *a4 = 0x8000000000000000;
  v18 = sub_1B1DC3AC8(a2);
  v20 = v19;
  v21 = *(_QWORD *)(v17 + 16) + ((v19 & 1) == 0);
  if (*(_QWORD *)(v17 + 24) >= v21)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_1B1EADA80();
      v17 = v32;
    }
    goto LABEL_7;
  }
  sub_1B1E9B038(v21, isUniquelyReferenced_nonNull_native);
  v17 = v32;
  v22 = sub_1B1DC3AC8(a2);
  if ((v20 & 1) == (v23 & 1))
  {
    v18 = v22;
LABEL_7:
    *a4 = v17;
    swift_bridgeObjectRelease();
    v24 = *a4;
    swift_bridgeObjectRetain();
    if ((v20 & 1) == 0)
      sub_1B1EB6E04(v18, a2, MEMORY[0x1E0DEE9D8], v24);
    v25 = *(_QWORD *)(v24 + 56);
    swift_bridgeObjectRelease();
    v26 = *(_QWORD **)(v25 + 8 * v18);
    v27 = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(v25 + 8 * v18) = v26;
    if ((v27 & 1) == 0)
    {
      v26 = sub_1B1C670DC(0, v26[2] + 1, 1, v26, &qword_1EEF5CEF8, (uint64_t (*)(uint64_t))sub_1B1C79C20);
      *(_QWORD *)(v25 + 8 * v18) = v26;
    }
    v29 = v26[2];
    v28 = v26[3];
    if (v29 >= v28 >> 1)
    {
      v26 = sub_1B1C670DC(v28 > 1, v29 + 1, 1, v26, &qword_1EEF5CEF8, (uint64_t (*)(uint64_t))sub_1B1C79C20);
      *(_QWORD *)(v25 + 8 * v18) = v26;
    }
    v26[2] = v29 + 1;
    v30 = &v26[2 * v29];
    v30[4] = sub_1B1C799DC;
    v30[5] = v15;
    swift_release_n();
    return (v11 & 1) == 0;
  }
  result = sub_1B2229FC4();
  __break(1u);
  return result;
}

uint64_t sub_1B1C734B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  __int16 v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v22;
  unint64_t v23;
  char v24;
  char v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  char v32;
  unint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  uint64_t result;
  char v37;

  v4 = (_QWORD *)(a1 + OBJC_IVAR____TtC3VFX13_ECSValueNode_entityKeyPath);
  v6 = *(_QWORD *)(a1 + OBJC_IVAR____TtC3VFX13_ECSValueNode_entityKeyPath + 8);
  v5 = *(_QWORD *)(a1 + OBJC_IVAR____TtC3VFX13_ECSValueNode_entityKeyPath + 16);
  v7 = *(_QWORD *)(a1 + OBJC_IVAR____TtC3VFX13_ECSValueNode_entityKeyPath + 24);
  v8 = *(_QWORD *)(a1 + OBJC_IVAR____TtC3VFX13_ECSValueNode_entityKeyPath + 32);
  v9 = *(_QWORD *)(a1 + OBJC_IVAR____TtC3VFX13_ECSValueNode_entityKeyPath + 40);
  v10 = *(_BYTE *)(a1 + OBJC_IVAR____TtC3VFX13_ECSValueNode_entityKeyPath + 48);
  v11 = *(_WORD *)(a1 + OBJC_IVAR____TtC3VFX13_ECSValueNode_entityKeyPath + 50);
  type metadata accessor for SetECSValueNode(0);
  v12 = swift_dynamicCastClass();
  if (v12)
    v13 = 2;
  else
    v13 = 1;
  v37 = v13;
  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = *v4;
  *(_QWORD *)(v14 + 24) = v6;
  *(_QWORD *)(v14 + 32) = v5;
  *(_QWORD *)(v14 + 40) = v7;
  *(_QWORD *)(v14 + 48) = v8;
  *(_QWORD *)(v14 + 56) = v9;
  *(_BYTE *)(v14 + 64) = v10;
  *(_WORD *)(v14 + 66) = v11;
  swift_bridgeObjectRetain();
  swift_retain();
  if ((sub_1B1E68FB0(v8, 0) & 1) != 0)
  {
    if (v12)
      v15 = MEMORY[0x1E0DEBC10];
    else
      v15 = MEMORY[0x1E0DEABD0];
  }
  else
  {
    v15 = *(_QWORD *)(v14 + 48);
  }
  v16 = sub_1B1EFF8AC(v15);
  sub_1B1C79C98(0);
  v17 = swift_allocObject();
  *(_QWORD *)(v17 + 24) = 0;
  *(_QWORD *)(v17 + 32) = 0;
  *(_QWORD *)(v17 + 16) = 0;
  *(_OWORD *)(v17 + 40) = xmmword_1B22849A0;
  v18 = swift_allocObject();
  swift_weakInit();
  v19 = swift_allocObject();
  *(_QWORD *)(v19 + 16) = v18;
  *(_QWORD *)(v19 + 24) = v17;
  *(_QWORD *)(v19 + 32) = v14 | 0x3000000000000000;
  *(_BYTE *)(v19 + 40) = v37;
  *(_QWORD *)(v19 + 48) = 0;
  *(_BYTE *)(v19 + 56) = 1;
  *(_QWORD *)(v19 + 64) = a3;
  *(_QWORD *)(v19 + 72) = v16;
  v20 = swift_allocObject();
  *(_QWORD *)(v20 + 16) = sub_1B1C79D08;
  *(_QWORD *)(v20 + 24) = v19;
  swift_retain();
  swift_retain();
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v22 = *a4;
  *a4 = 0x8000000000000000;
  v23 = sub_1B1DC3AC8(a2);
  v25 = v24;
  v26 = *(_QWORD *)(v22 + 16) + ((v24 & 1) == 0);
  if (*(_QWORD *)(v22 + 24) >= v26)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      sub_1B1EADA80();
  }
  else
  {
    sub_1B1E9B038(v26, isUniquelyReferenced_nonNull_native);
    v27 = sub_1B1DC3AC8(a2);
    if ((v25 & 1) != (v28 & 1))
    {
      result = sub_1B2229FC4();
      __break(1u);
      return result;
    }
    v23 = v27;
  }
  *a4 = v22;
  swift_bridgeObjectRelease();
  v29 = *a4;
  swift_bridgeObjectRetain();
  if ((v25 & 1) == 0)
    sub_1B1EB6E04(v23, a2, MEMORY[0x1E0DEE9D8], v29);
  v30 = *(_QWORD *)(v29 + 56);
  swift_bridgeObjectRelease();
  v31 = *(_QWORD **)(v30 + 8 * v23);
  v32 = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v30 + 8 * v23) = v31;
  if ((v32 & 1) == 0)
  {
    v31 = sub_1B1C670DC(0, v31[2] + 1, 1, v31, &qword_1EEF5CEF8, (uint64_t (*)(uint64_t))sub_1B1C79C20);
    *(_QWORD *)(v30 + 8 * v23) = v31;
  }
  v34 = v31[2];
  v33 = v31[3];
  if (v34 >= v33 >> 1)
  {
    v31 = sub_1B1C670DC(v33 > 1, v34 + 1, 1, v31, &qword_1EEF5CEF8, (uint64_t (*)(uint64_t))sub_1B1C79C20);
    *(_QWORD *)(v30 + 8 * v23) = v31;
  }
  v31[2] = v34 + 1;
  v35 = &v31[2 * v34];
  v35[4] = sub_1B1C799DC;
  v35[5] = v20;
  swift_release();
  swift_release();
  swift_release();
  return 1;
}

uint64_t sub_1B1C7384C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6;
  unint64_t v7;
  char v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v19;
  unint64_t v20;
  char v21;
  char v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  char v29;
  unint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  uint64_t result;
  uint64_t v35;

  v6 = sub_1B20746B4();
  if (!*(_QWORD *)(v6 + 16))
  {
    swift_bridgeObjectRelease();
    sub_1B2229688();
    __break(1u);
    goto LABEL_20;
  }
  v7 = *(_QWORD *)(v6 + 32);
  v8 = *(_BYTE *)(v6 + 40);
  v9 = *(_QWORD *)(v6 + 48);
  v10 = *(_BYTE *)(v6 + 56);
  sub_1B1B1DD24(v7);
  swift_bridgeObjectRelease();
  sub_1B1C96CF0(v7);
  if ((sub_1B1E68FB0(v11, 0) & 1) != 0)
  {
    if ((v8 & 2) != 0)
      v12 = MEMORY[0x1E0DEBC10];
    else
      v12 = MEMORY[0x1E0DEABD0];
  }
  else
  {
    sub_1B1C96CF0(v7);
  }
  v13 = sub_1B1EFF8AC(v12);
  sub_1B1C79C98(0);
  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 24) = 0;
  *(_QWORD *)(v14 + 32) = 0;
  *(_QWORD *)(v14 + 16) = 0;
  *(_OWORD *)(v14 + 40) = xmmword_1B22849A0;
  v15 = swift_allocObject();
  swift_weakInit();
  v16 = swift_allocObject();
  *(_QWORD *)(v16 + 16) = v15;
  *(_QWORD *)(v16 + 24) = v14;
  *(_QWORD *)(v16 + 32) = v7;
  *(_BYTE *)(v16 + 40) = v8;
  *(_QWORD *)(v16 + 48) = v9;
  *(_BYTE *)(v16 + 56) = v10;
  *(_QWORD *)(v16 + 64) = a3;
  *(_QWORD *)(v16 + 72) = v13;
  v17 = swift_allocObject();
  *(_QWORD *)(v17 + 16) = sub_1B1C79D08;
  *(_QWORD *)(v17 + 24) = v16;
  sub_1B1B1DD24(v7);
  swift_retain();
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v19 = *a4;
  v35 = *a4;
  *a4 = 0x8000000000000000;
  v20 = sub_1B1DC3AC8(a2);
  v22 = v21;
  v23 = *(_QWORD *)(v19 + 16) + ((v21 & 1) == 0);
  if (*(_QWORD *)(v19 + 24) >= v23)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_1B1EADA80();
      v19 = v35;
    }
    goto LABEL_12;
  }
  sub_1B1E9B038(v23, isUniquelyReferenced_nonNull_native);
  v19 = v35;
  v24 = sub_1B1DC3AC8(a2);
  if ((v22 & 1) != (v25 & 1))
  {
LABEL_20:
    result = sub_1B2229FC4();
    __break(1u);
    return result;
  }
  v20 = v24;
LABEL_12:
  *a4 = v19;
  swift_bridgeObjectRelease();
  v26 = *a4;
  swift_bridgeObjectRetain();
  if ((v22 & 1) == 0)
    sub_1B1EB6E04(v20, a2, MEMORY[0x1E0DEE9D8], v26);
  v27 = *(_QWORD *)(v26 + 56);
  swift_bridgeObjectRelease();
  v28 = *(_QWORD **)(v27 + 8 * v20);
  v29 = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v27 + 8 * v20) = v28;
  if ((v29 & 1) == 0)
  {
    v28 = sub_1B1C670DC(0, v28[2] + 1, 1, v28, &qword_1EEF5CEF8, (uint64_t (*)(uint64_t))sub_1B1C79C20);
    *(_QWORD *)(v27 + 8 * v20) = v28;
  }
  v31 = v28[2];
  v30 = v28[3];
  if (v31 >= v30 >> 1)
  {
    v28 = sub_1B1C670DC(v30 > 1, v31 + 1, 1, v28, &qword_1EEF5CEF8, (uint64_t (*)(uint64_t))sub_1B1C79C20);
    *(_QWORD *)(v27 + 8 * v20) = v28;
  }
  v28[2] = v31 + 1;
  v32 = &v28[2 * v31];
  v32[4] = sub_1B1C799DC;
  v32[5] = v17;
  sub_1B1A05610(v7);
  swift_release();
  swift_release();
  return 1;
}

uint64_t sub_1B1C73BCC(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v34;
  char v35;
  char v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  uint64_t CustomPass;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  BOOL v72;
  uint64_t v73;
  uint64_t v74;
  BOOL v75;
  char v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  char v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char v84;
  char v85;
  __objc2_class *v86;
  char v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t *v92;
  uint64_t v93;
  BOOL v94;
  uint64_t v95;
  uint64_t v96;
  BOOL v97;
  unint64_t v98;
  unint64_t v99;
  _QWORD *v100;
  uint64_t v101;
  uint64_t v102;
  char v103;
  unint64_t v104;
  unint64_t v105;
  _QWORD *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  CFX::RG::ResourceIdentifier *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char v118;
  _QWORD *v119;
  unint64_t v120;
  _QWORD *v121;
  unint64_t v122;
  _QWORD *v123;
  uint64_t v124;
  int v125;
  uint64_t v126;
  uint64_t v127;
  CFX::RG::Resource *v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  CFX::RG::RenderGraphBuilder *v133;
  uint64_t v134;
  uint64_t v135;
  CFX::RG *v136;
  CFX::RG::Resource *v137;
  unint64_t v138;
  unint64_t v139;
  unint64_t v140;
  unint64_t v141;
  _QWORD *v142;
  unint64_t v143;
  unint64_t v144;
  _QWORD *v145;
  char v146;
  uint64_t v147;
  _QWORD *v148;
  unint64_t v149;
  unint64_t v150;
  _QWORD *v151;
  unint64_t v152;
  uint64_t result;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  char v160;
  void (*v161)(_QWORD **__return_ptr, _OWORD *);
  char *v162;
  uint64_t v163;
  char v164;
  int64x2_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  char *v170;
  uint64_t v171;
  _QWORD *v172;
  uint64_t v173;
  _QWORD *v174;
  _QWORD *v175;
  uint64_t v176;
  int64_t v177;
  int64_t v178;
  uint64_t v179;
  char v180;
  uint64_t v181;
  uint64_t v182;
  _OWORD v183[8];
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  _QWORD v191[3];
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  _QWORD v195[3];
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  char v218;
  char v219;
  char v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  uint64_t v224;
  int v225;
  _OWORD v226[9];
  _QWORD *aBlock;
  uint64_t v228[18];
  _BYTE v229[144];
  _OWORD v230[9];
  _BYTE v231[56];
  _BYTE v232[80];
  _BYTE v233[56];
  uint64_t v234;
  uint64_t v235;
  __int128 v236;
  __int128 v237;
  __int128 v238;
  uint64_t v239;
  int v240;
  _BYTE v241[8];
  uint64_t v242;
  char v243;
  uint64_t v244;
  uint64_t v245;
  char v246;
  _BYTE v247[24];
  uint64_t v248;
  uint64_t v249;
  char v250;
  uint64_t v251;

  v3 = v2;
  v251 = *MEMORY[0x1E0C80C00];
  sub_1B207846C(&v185);
  v6 = v186;
  v216 = v186;
  v215 = v185;
  sub_1B1B28C6C((uint64_t)&v215);
  v214 = v187;
  sub_1B1B28C6C((uint64_t)&v214);
  v213 = v188;
  sub_1B1B28C6C((uint64_t)&v213);
  v212 = v189;
  sub_1B1B28C6C((uint64_t)&v212);
  v211 = v190;
  sub_1B1B28C6C((uint64_t)&v211);
  v7 = *(_QWORD *)(v6 + 16);
  sub_1B1B28C6C((uint64_t)&v216);
  if (v7 > 0x10)
  {
    sub_1B1C60148(a1, 0, 1, 0xD000000000000010, 0x80000001B2336200);
    swift_willThrow();
    return (uint64_t)a2;
  }
  v8 = (_QWORD *)(a1 + OBJC_IVAR____TtC3VFX18CustomFunctionNode_reflection);
  v9 = *(_QWORD *)(a1 + OBJC_IVAR____TtC3VFX18CustomFunctionNode_reflection);
  if (!v9)
    return 0;
  v161 = (void (*)(_QWORD **__return_ptr, _OWORD *))a2;
  v175 = (_QWORD *)a1;
  v182 = v3;
  v10 = v8[2];
  v11 = v8[3];
  v12 = v8[1];
  v13 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  v184 = MEMORY[0x1E0DEE9E0];
  v176 = v9 + 64;
  v14 = 1 << *(_BYTE *)(v9 + 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & *(_QWORD *)(v9 + 64);
  v171 = v12;
  v167 = v10;
  v169 = v11;
  sub_1B1C79790(v9);
  swift_bridgeObjectRetain();
  v17 = 0;
  v178 = (unint64_t)(v14 + 63) >> 6;
  v173 = v9 + 104;
  v18 = (char *)MEMORY[0x1E0DEE9D8];
  v181 = v9;
  while (1)
  {
    if (v16)
    {
      v20 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v21 = v20 | (v17 << 6);
      goto LABEL_23;
    }
    v22 = v17 + 1;
    if (v17 + 1 >= v178)
      goto LABEL_35;
    v23 = *(_QWORD *)(v176 + 8 * v22);
    if (!v23)
    {
      v22 = v17 + 2;
      if (v17 + 2 >= v178)
        goto LABEL_35;
      v23 = *(_QWORD *)(v176 + 8 * v22);
      if (!v23)
      {
        v22 = v17 + 3;
        if (v17 + 3 >= v178)
          goto LABEL_35;
        v23 = *(_QWORD *)(v176 + 8 * v22);
        if (!v23)
        {
          v22 = v17 + 4;
          if (v17 + 4 < v178)
          {
            v23 = *(_QWORD *)(v176 + 8 * v22);
            if (!v23)
            {
              do
              {
                if (v178 - 5 == v17)
                  goto LABEL_35;
                v23 = *(_QWORD *)(v173 + 8 * v17++);
              }
              while (!v23);
              v22 = v17 + 4;
            }
            goto LABEL_22;
          }
LABEL_35:
          v40 = swift_release();
          v41 = (*(uint64_t (**)(uint64_t))(*v175 + 320))(v40);
          *(_BYTE *)(swift_allocObject() + 16) = 3;
          sub_1B1D76C18(v41);
          v43 = v42;
          swift_release();
          sub_1B1B28D2C(v41);
          v44 = v175[3];
          v45 = *(_QWORD *)(v44 + 16);
          if (!v45)
          {
            swift_bridgeObjectRelease();
            v48 = (char *)MEMORY[0x1E0DEE9D8];
            a2 = (_QWORD *)MEMORY[0x1E0DEE9D8];
            v47 = v182;
LABEL_39:
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if (*((_QWORD *)v18 + 2))
            {
              v49 = *(uint64_t **)(v47 + 64);
              v50 = v184;
              v51 = swift_allocObject();
              *(_QWORD *)(v51 + 16) = v18;
              *(_QWORD *)(v51 + 24) = v50;
              v228[3] = (uint64_t)sub_1B1C79830;
              v228[4] = v51;
              aBlock = (_QWORD *)MEMORY[0x1E0C809B0];
              v228[0] = 1107296256;
              v228[1] = (uint64_t)sub_1B1DD4178;
              v228[2] = (uint64_t)&unk_1E63EC3C0;
              v52 = _Block_copy(&aBlock);
              swift_bridgeObjectRetain();
              swift_release();
              CustomPass = RGBuilderCreateCustomPass(v49, "Load data", v52);
              _Block_release(v52);
              v54 = *((_QWORD *)v18 + 2);
              if (v54)
              {
                v55 = (uint64_t *)(v18 + 40);
                do
                {
                  v56 = *v55;
                  v55 += 2;
                  RGPassWritesTo(CustomPass, v56);
                  --v54;
                }
                while (v54);
              }
              swift_bridgeObjectRelease();
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                v48 = sub_1B1C671DC(0, *((_QWORD *)v48 + 2) + 1, 1, v48);
              v58 = *((_QWORD *)v48 + 2);
              v57 = *((_QWORD *)v48 + 3);
              if (v58 >= v57 >> 1)
                v48 = sub_1B1C671DC(v57 > 1, v58 + 1, 1, v48);
              *((_QWORD *)v48 + 2) = v58 + 1;
              *(_QWORD *)&v48[8 * v58 + 32] = CustomPass;
            }
            else
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
            }
            swift_bridgeObjectRelease();
            return (uint64_t)a2;
          }
          v160 = v43;
          v168 = OBJC_IVAR____TtC3VFX18CustomFunctionNode_inputTypes;
          v166 = v44 + 32;
          swift_bridgeObjectRetain();
          v46 = 0;
          a2 = (_QWORD *)MEMORY[0x1E0DEE9D8];
          v163 = v45;
          v165 = vdupq_n_s64(0x8000000000000000);
          v162 = (char *)MEMORY[0x1E0DEE9D8];
          v47 = v182;
          v170 = v18;
          while (1)
          {
            if (!v46)
              goto LABEL_53;
            v172 = a2;
            v177 = *(_QWORD *)(v166 + 8 * v46);
            sub_1B1B632F0(v177);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            v60 = swift_bridgeObjectRetain();
            v61 = sub_1B1C50E58(v60);
            swift_bridgeObjectRelease();
            v62 = swift_bridgeObjectRetain();
            sub_1B1C50E58(v62);
            swift_bridgeObjectRelease();
            sub_1B1A02758(0, (unint64_t *)&qword_1EEF5CB90, (uint64_t)&type metadata for TypeConstraint, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
            *(int64x2_t *)(swift_allocObject() + 32) = v165;
            if (v46 < *(_QWORD *)(v61 + 16) && (v63 = v61 + 16 * v46, (v64 = *(_QWORD *)(v63 + 40)) != 0))
            {
              aBlock = *(_QWORD **)(v63 + 32);
              v228[0] = v64;
              *(_QWORD *)&v230[0] = 35;
              *((_QWORD *)&v230[0] + 1) = 0xE100000000000000;
              sub_1B1A06460();
              swift_bridgeObjectRetain();
              v65 = sub_1B2229214();
              v66 = *(_QWORD *)(v65 + 32);
              v179 = *(_QWORD *)(v65 + 40);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
            }
            else
            {
              swift_bridgeObjectRelease();
              v66 = 0;
              v179 = 0xE000000000000000;
            }
            v18 = v170;
            swift_bridgeObjectRelease();
            swift_setDeallocating();
            swift_arrayDestroy();
            swift_deallocClassInstance();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v67 = v175[2] + 16 * v46;
            a2 = *(_QWORD **)(v67 + 32);
            v174 = a2;
            if ((unint64_t)v177 >> 60 == 1)
              goto LABEL_71;
            if ((unint64_t)v177 >> 60 != 8)
              goto LABEL_183;
            if (v177 > (uint64_t)0x800000000000003FLL)
            {
              if (v177 <= (uint64_t)0x8000000000000097)
              {
                if (v177 != 0x8000000000000040)
                {
                  v68 = 80;
                  goto LABEL_70;
                }
LABEL_71:
                v69 = *(_QWORD *)(v171 + 16);
                if (v69)
                {
                  v70 = (uint64_t *)(v171 + 56);
                  while (1)
                  {
                    v71 = v70[2];
                    v72 = *(_QWORD *)(v71 + 16) == v66 && *(_QWORD *)(v71 + 24) == v179;
                    if (v72 || (sub_1B2229D24() & 1) != 0)
                      break;
                    v70 += 6;
                    if (!--v69)
                      goto LABEL_79;
                  }
                  v76 = 0;
                }
                else
                {
LABEL_79:
                  v73 = *(_QWORD *)(v169 + 16);
                  if (!v73)
                  {
LABEL_175:
                    swift_retain();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    goto LABEL_176;
                  }
                  v70 = (uint64_t *)(v169 + 56);
                  while (1)
                  {
                    v74 = v70[2];
                    v75 = *(_QWORD *)(v74 + 16) == v66 && *(_QWORD *)(v74 + 24) == v179;
                    if (v75 || (sub_1B2229D24() & 1) != 0)
                      break;
                    v70 += 6;
                    if (!--v73)
                      goto LABEL_175;
                  }
                  v76 = 2;
                }
                v78 = *v70;
                v77 = v70[1];
                swift_retain();
                if (!v13[2] || (v79 = sub_1B1DC3AC8(v78), (v80 & 1) == 0))
                {
                  a2 = v174;
                  swift_retain();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_release();
                  swift_bridgeObjectRelease();
LABEL_176:
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  aBlock = 0;
                  v228[0] = 0xE000000000000000;
                  sub_1B2229430();
                  swift_bridgeObjectRelease();
                  aBlock = (_QWORD *)0xD00000000000001DLL;
                  v228[0] = 0x80000001B23360D0;
                  sub_1B2228890();
                  swift_bridgeObjectRelease();
                  sub_1B1C60148((uint64_t)v175, v46, 0, (uint64_t)aBlock, v228[0]);
                  swift_bridgeObjectRelease();
                  swift_willThrow();
LABEL_177:
                  swift_release();
                  v152 = v177;
LABEL_178:
                  sub_1B1B28D2C(v152);
                  swift_bridgeObjectRelease();
                  return (uint64_t)a2;
                }
                v164 = v76;
                v81 = *(_QWORD *)(v13[7] + 8 * v79);
                type metadata accessor for ConstantNode(0);
                a2 = v174;
                v82 = swift_dynamicCastClass();
                if (v82)
                {
                  v83 = v82;
                  swift_retain_n();
                  swift_retain();
                  v84 = sub_1B1C72860(v83, v78, v77, &v184);
                  goto LABEL_94;
                }
                v86 = (__objc2_class *)*v174;
                if ((__objc2_class *)*v174 == _TtC3VFX15GetECSValueNode && v174)
                {
                  swift_retain_n();
                  swift_retain();
                  v87 = sub_1B1C734B4((uint64_t)v174, v78, v77, &v184);
LABEL_127:
                  v103 = v87;
                  swift_release();
                  swift_release();
                  if ((v103 & 1) == 0)
                    goto LABEL_182;
                }
                else
                {
                  type metadata accessor for GetWorldValueNode(0);
                  v101 = swift_dynamicCastClass();
                  if (v101)
                  {
                    v102 = v101;
                    swift_retain_n();
                    swift_retain();
                    v87 = sub_1B1C7384C(v102, v78, v77, &v184);
                    goto LABEL_127;
                  }
                  swift_retain();
                  if (v86 != _TtC3VFX21ResolveResolutionNode || !v174)
                  {
LABEL_182:
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    aBlock = 0;
                    v228[0] = 0xE000000000000000;
                    sub_1B2229430();
                    swift_bridgeObjectRelease();
                    aBlock = (_QWORD *)0xD000000000000019;
                    v228[0] = 0x80000001B23360F0;
                    sub_1B2228890();
                    swift_bridgeObjectRelease();
                    sub_1B1C60148((uint64_t)v175, v46, 0, (uint64_t)aBlock, v228[0]);
                    swift_bridgeObjectRelease();
                    swift_willThrow();
                    swift_release();
                    goto LABEL_177;
                  }
                  a2 = v174;
                  swift_retain();
                  swift_retain();
                  v84 = sub_1B1C73264((uint64_t)v174, v78, v77, &v184);
LABEL_94:
                  v85 = v84;
                  swift_release();
                  swift_release();
                  if ((v85 & 1) == 0)
                    goto LABEL_182;
                }
                swift_bridgeObjectRelease();
                a2 = v172;
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                  a2 = sub_1B1C672E4(0, v172[2] + 1, 1, v172, &qword_1EEF5CF10, (uint64_t)&type metadata for MetalIOData, (void (*)(_QWORD, int64_t, _QWORD *, _QWORD *))sub_1B1C71534);
                v47 = v182;
                v105 = a2[2];
                v104 = a2[3];
                if (v105 >= v104 >> 1)
                  a2 = sub_1B1C672E4(v104 > 1, v105 + 1, 1, a2, &qword_1EEF5CF10, (uint64_t)&type metadata for MetalIOData, (void (*)(_QWORD, int64_t, _QWORD *, _QWORD *))sub_1B1C71534);
                a2[2] = v105 + 1;
                v106 = &a2[4 * v105];
                v106[4] = v78;
                v106[5] = 0;
                v106[6] = v81;
                *((_BYTE *)v106 + 56) = v164;
                swift_release();
                swift_release();
                sub_1B1B28D2C(v177);
                v18 = v170;
                goto LABEL_52;
              }
              if (v177 == 0x80000000000000A0)
              {
                v124 = *(_QWORD *)(v67 + 40);
                *(_QWORD *)&v226[0] = *(_QWORD *)(v67 + 32);
                swift_retain_n();
                v161(&aBlock, v226);
                swift_release();
                sub_1B1A18378((uint64_t)v228, (uint64_t)v229, &qword_1EEF61660, (uint64_t)&type metadata for GraphTranslateResult);
                sub_1B1A18378((uint64_t)v229, (uint64_t)v230, &qword_1EEF61660, (uint64_t)&type metadata for GraphTranslateResult);
                if (sub_1B1C79560((uint64_t)v230) == 1)
                  goto LABEL_194;
                sub_1B1C79574(v230, v226);
                v125 = sub_1B1C795AC((uint64_t)v226);
                nullsub_16(v226);
                if (v125 == 1)
                  goto LABEL_194;
                v127 = v126;
                swift_release();
                v128 = *(CFX::RG::Resource **)v127;
                v129 = *(_OWORD *)(v127 + 88);
                v183[4] = *(_OWORD *)(v127 + 72);
                v183[5] = v129;
                v130 = *(_OWORD *)(v127 + 120);
                v183[6] = *(_OWORD *)(v127 + 104);
                v183[7] = v130;
                v131 = *(_OWORD *)(v127 + 24);
                v183[0] = *(_OWORD *)(v127 + 8);
                v183[1] = v131;
                v132 = *(_OWORD *)(v127 + 56);
                v183[2] = *(_OWORD *)(v127 + 40);
                v183[3] = v132;
                v133 = (CFX::RG::RenderGraphBuilder *)*((_QWORD *)v183 + v124);
                if (RGResourceIsNull((uint64_t)v133))
                  goto LABEL_195;
                sub_1B1D4B2C8(v66, v179, v171, v169, (uint64_t)v231);
                swift_bridgeObjectRelease();
                sub_1B1A025EC((uint64_t)v231, (uint64_t)v241, (uint64_t (*)(_QWORD))sub_1B1C79838);
                if (!v245)
                {
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  *(_QWORD *)&v183[0] = 0;
                  *((_QWORD *)&v183[0] + 1) = 0xE000000000000000;
                  sub_1B2229430();
                  swift_bridgeObjectRelease();
                  *(_QWORD *)&v183[0] = 0xD000000000000020;
                  *((_QWORD *)&v183[0] + 1) = 0x80000001B2336160;
                  v154 = (uint64_t)v175;
                  sub_1B207846C(v195);
                  v210 = v196;
                  sub_1B1BCF9C4(v46, v196);
                  v209 = v195[0];
                  sub_1B1B28C6C((uint64_t)&v209);
                  v208 = v195[1];
                  sub_1B1B28C6C((uint64_t)&v208);
                  v207 = v195[2];
                  sub_1B1B28C6C((uint64_t)&v207);
                  sub_1B1B28C6C((uint64_t)&v210);
                  v206 = v197;
                  sub_1B1B28C6C((uint64_t)&v206);
                  v205 = v198;
                  sub_1B1B28C6C((uint64_t)&v205);
                  sub_1B2228890();
                  swift_bridgeObjectRelease();
                  sub_1B2228890();
                  v156 = *((_QWORD *)&v183[0] + 1);
                  v155 = *(_QWORD *)&v183[0];
                  goto LABEL_191;
                }
                v134 = v244;
                v180 = v246;
                if ((v243 & 1) == 0)
                {
                  v135 = v242;
                  RGContext.tryResolve(resource:)((uint64_t)v133, *(_QWORD *)(v182 + 56), (uint64_t)v232);
                  sub_1B1B4D278((uint64_t)v232, (uint64_t)&v234, (unint64_t *)&qword_1EEF62D90, (uint64_t (*)(uint64_t))type metadata accessor for TextureDescriptor);
                  if ((v235 & 0xFF0000) != 0x20000 && ((v135 - 4) & 0xFFFFFFFFFFFFFFFBLL) != 0)
                  {
                    v136 = *(CFX::RG **)(v182 + 64);
                    v217 = v234;
                    v218 = v235;
                    v219 = 1;
                    v220 = BYTE2(v235) & 1;
                    v221 = v236;
                    v222 = v237;
                    v223 = v238;
                    v224 = v239;
                    v225 = v240;
                    v133 = RGBuilder.createCopyIfNeeded(name:input:inputPass:expected:)((uint64_t)"Input copy", 10, 2, v133, v128, &v217, v136);
                    v128 = v137;
                  }
                }
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                  v162 = sub_1B1C671DC(0, *((_QWORD *)v162 + 2) + 1, 1, v162);
                v139 = *((_QWORD *)v162 + 2);
                v138 = *((_QWORD *)v162 + 3);
                if (v139 >= v138 >> 1)
                  v162 = sub_1B1C671DC(v138 > 1, v139 + 1, 1, v162);
                *((_QWORD *)v162 + 2) = v139 + 1;
                *(_QWORD *)&v162[8 * v139 + 32] = v128;
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                  v172 = sub_1B1C672E4(0, v172[2] + 1, 1, v172, &qword_1EEF5CF10, (uint64_t)&type metadata for MetalIOData, (void (*)(_QWORD, int64_t, _QWORD *, _QWORD *))sub_1B1C71534);
                v141 = v172[2];
                v140 = v172[3];
                if (v141 >= v140 >> 1)
                  v172 = sub_1B1C672E4(v140 > 1, v141 + 1, 1, v172, &qword_1EEF5CF10, (uint64_t)&type metadata for MetalIOData, (void (*)(_QWORD, int64_t, _QWORD *, _QWORD *))sub_1B1C71534);
                a2 = v172;
                v172[2] = v141 + 1;
                v142 = &v172[4 * v141];
                v142[4] = v134;
                v142[5] = 0;
                v142[6] = v133;
                *((_BYTE *)v142 + 56) = v180;
                sub_1B1C798FC((uint64_t)v231);
              }
              else
              {
                if (v177 != 0x8000000000000098)
                {
LABEL_183:
                  swift_retain();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  aBlock = 0;
                  v228[0] = 0xE000000000000000;
                  sub_1B2229430();
                  swift_bridgeObjectRelease();
                  aBlock = (_QWORD *)0xD000000000000012;
                  v228[0] = 0x80000001B23360B0;
                  sub_1B1D763B0(v177);
                  sub_1B2228890();
                  swift_bridgeObjectRelease();
                  sub_1B1C60148((uint64_t)v175, v46, 0, (uint64_t)aBlock, v228[0]);
                  swift_bridgeObjectRelease();
                  swift_willThrow();
                  swift_release();
                  v152 = v177;
                  goto LABEL_178;
                }
                v88 = OBJC_IVAR____TtC3VFX21TextureDescriptorNode__descriptor;
                v89 = *(_QWORD *)((char *)a2 + OBJC_IVAR____TtC3VFX21TextureDescriptorNode__descriptor);
                swift_retain();
                if (!v89)
                {
                  swift_retain();
                  v89 = sub_1B2078044();
                  *(_QWORD *)((char *)a2 + v88) = v89;
                  swift_release();
                }
                v90 = RGBuilder.createTexture(name:desc:)((uint64_t)"metal script output", 19, 2, v89, *(_QWORD *)(v182 + 64));
                v91 = *(_QWORD *)(v167 + 16);
                if (v91)
                {
                  v92 = (uint64_t *)(v167 + 56);
                  while (1)
                  {
                    v93 = v92[2];
                    v94 = *(_QWORD *)(v93 + 16) == v66 && *(_QWORD *)(v93 + 24) == v179;
                    if (v94 || (sub_1B2229D24() & 1) != 0)
                      break;
                    v92 += 6;
                    if (!--v91)
                      goto LABEL_111;
                  }
                  v146 = 1;
                }
                else
                {
LABEL_111:
                  v95 = *(_QWORD *)(v169 + 16);
                  if (!v95)
                  {
LABEL_119:
                    swift_bridgeObjectRelease();
                    if ((v160 & 1) == 0)
                    {
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      aBlock = 0;
                      v228[0] = 0xE000000000000000;
                      sub_1B2229430();
                      sub_1B2228890();
                      v154 = (uint64_t)v175;
                      sub_1B207846C(v191);
                      v204 = v192;
                      sub_1B1BCF9C4(v46, v192);
                      v203 = v191[0];
                      sub_1B1B28C6C((uint64_t)&v203);
                      v202 = v191[1];
                      sub_1B1B28C6C((uint64_t)&v202);
                      v201 = v191[2];
                      sub_1B1B28C6C((uint64_t)&v201);
                      sub_1B1B28C6C((uint64_t)&v204);
                      v200 = v193;
                      sub_1B1B28C6C((uint64_t)&v200);
                      v199 = v194;
                      sub_1B1B28C6C((uint64_t)&v199);
                      sub_1B2228890();
                      swift_bridgeObjectRelease();
                      sub_1B2228890();
                      v155 = (uint64_t)aBlock;
                      v156 = v228[0];
LABEL_191:
                      sub_1B1C60148(v154, v46, 0, v155, v156);
                      swift_bridgeObjectRelease();
                      swift_willThrow();
                      swift_bridgeObjectRelease();
                      swift_release();
                      return (uint64_t)a2;
                    }
                    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                      v172 = sub_1B1C672E4(0, v172[2] + 1, 1, v172, &qword_1EEF5CF10, (uint64_t)&type metadata for MetalIOData, (void (*)(_QWORD, int64_t, _QWORD *, _QWORD *))sub_1B1C71534);
                    v99 = v172[2];
                    v98 = v172[3];
                    if (v99 >= v98 >> 1)
                      v172 = sub_1B1C672E4(v98 > 1, v99 + 1, 1, v172, &qword_1EEF5CF10, (uint64_t)&type metadata for MetalIOData, (void (*)(_QWORD, int64_t, _QWORD *, _QWORD *))sub_1B1C71534);
                    v172[2] = v99 + 1;
                    v100 = &v172[4 * v99];
                    v100[4] = 0;
                    v100[5] = 0;
                    v100[6] = v90;
                    *((_BYTE *)v100 + 56) = 3;
                    a2 = v172;
                    swift_release();
                    v47 = v182;
                    goto LABEL_52;
                  }
                  v92 = (uint64_t *)(v169 + 56);
                  while (1)
                  {
                    v96 = v92[2];
                    v97 = *(_QWORD *)(v96 + 16) == v66 && *(_QWORD *)(v96 + 24) == v179;
                    if (v97 || (sub_1B2229D24() & 1) != 0)
                      break;
                    v92 += 6;
                    if (!--v95)
                      goto LABEL_119;
                  }
                  v146 = 2;
                }
                v147 = *v92;
                swift_retain();
                swift_bridgeObjectRelease();
                v148 = v172;
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                  v148 = sub_1B1C672E4(0, v172[2] + 1, 1, v172, &qword_1EEF5CF10, (uint64_t)&type metadata for MetalIOData, (void (*)(_QWORD, int64_t, _QWORD *, _QWORD *))sub_1B1C71534);
                v150 = v148[2];
                v149 = v148[3];
                v151 = v148;
                if (v150 >= v149 >> 1)
                  v151 = sub_1B1C672E4(v149 > 1, v150 + 1, 1, v148, &qword_1EEF5CF10, (uint64_t)&type metadata for MetalIOData, (void (*)(_QWORD, int64_t, _QWORD *, _QWORD *))sub_1B1C71534);
                v151[2] = v150 + 1;
                v59 = &v151[4 * v150];
                a2 = v151;
                v59[4] = v147;
                v59[5] = 0;
                v59[6] = v90;
                *((_BYTE *)v59 + 56) = v146;
                swift_release();
              }
            }
            else
            {
              if (v177 > (uint64_t)0x800000000000002FLL)
              {
                if (v177 != 0x8000000000000030)
                {
                  v68 = 56;
                  goto LABEL_70;
                }
                goto LABEL_71;
              }
              if (v177 != 0x8000000000000000)
              {
                v68 = 16;
LABEL_70:
                if (v177 != (v68 & 0xFFFFFFFFFFFFLL | 0x8000000000000000))
                  goto LABEL_183;
                goto LABEL_71;
              }
              v107 = *(_QWORD *)((char *)v175 + v168);
              swift_retain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              v108 = swift_bridgeObjectRetain();
              sub_1B1C50E58(v108);
              swift_bridgeObjectRelease();
              v109 = swift_bridgeObjectRetain();
              sub_1B1C50E58(v109);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              v110 = *(_QWORD *)(v107 + 8 * v46 + 32);
              sub_1B19F8CD0(v110);
              swift_bridgeObjectRelease();
              if (v110 >> 61 != 3)
              {
                sub_1B19F8D00(v110);
                a2 = v172;
LABEL_187:
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
LABEL_189:
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                aBlock = 0;
                v228[0] = 0xE000000000000000;
                sub_1B2229430();
                swift_bridgeObjectRelease();
                aBlock = (_QWORD *)0xD000000000000015;
                v228[0] = 0x80000001B2336110;
                sub_1B1D763B0(0x8000000000000000);
                sub_1B2228890();
                swift_bridgeObjectRelease();
                sub_1B1C60148((uint64_t)v175, v46, 0, (uint64_t)aBlock, v228[0]);
                swift_bridgeObjectRelease();
                swift_willThrow();
                swift_bridgeObjectRelease();
                swift_release();
                return (uint64_t)a2;
              }
              v111 = *(_QWORD *)(v110 + 16);
              sub_1B1B632F0(v111);
              sub_1B19F8D00(v110);
              a2 = v172;
              if (v111 >> 60)
              {
                sub_1B1B28D2C(v111);
                goto LABEL_187;
              }
              v112 = *(_QWORD *)(v111 + 16);
              sub_1B1B632F0(v112);
              sub_1B1B28D2C(v111);
              sub_1B1D76C18(v112);
              if ((v113 & 1) == 0)
              {
                sub_1B1B28D2C(v112);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                goto LABEL_189;
              }
              v114 = RGResourceIdentifierFinalColor(v113);
              v115 = RGTextureReferenceDescriptorCreate(v114, 1.0);
              v116 = RGBuilder.createTexture(name:desc:)((uint64_t)"Metal script resource", 21, 2, v115, *(_QWORD *)(v182 + 64));
              RGTextureReferenceDescriptorDestroy(v115);
              sub_1B1D4B3E0(v66, v179, v167, v169, (uint64_t)v233);
              swift_bridgeObjectRelease();
              sub_1B1A025EC((uint64_t)v233, (uint64_t)v247, (uint64_t (*)(_QWORD))sub_1B1C79838);
              if (v249)
              {
                v117 = v248;
                v118 = v250;
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                  a2 = sub_1B1C672E4(0, v172[2] + 1, 1, v172, &qword_1EEF5CF10, (uint64_t)&type metadata for MetalIOData, (void (*)(_QWORD, int64_t, _QWORD *, _QWORD *))sub_1B1C71534);
                v119 = a2;
                v120 = a2[2];
                v121 = v119;
                v122 = v119[3];
                if (v120 >= v122 >> 1)
                  v121 = sub_1B1C672E4(v122 > 1, v120 + 1, 1, v121, &qword_1EEF5CF10, (uint64_t)&type metadata for MetalIOData, (void (*)(_QWORD, int64_t, _QWORD *, _QWORD *))sub_1B1C71534);
                v121[2] = v120 + 1;
                v123 = &v121[4 * v120];
                a2 = v121;
                v123[4] = v117;
                v123[5] = 0;
                v123[6] = v116;
                *((_BYTE *)v123 + 56) = v118;
                sub_1B1B28D2C(v112);
                sub_1B1C798FC((uint64_t)v233);
              }
              else
              {
                if ((v160 & 1) != 0)
                {
                  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                    a2 = sub_1B1C672E4(0, v172[2] + 1, 1, v172, &qword_1EEF5CF10, (uint64_t)&type metadata for MetalIOData, (void (*)(_QWORD, int64_t, _QWORD *, _QWORD *))sub_1B1C71534);
                  v144 = a2[2];
                  v143 = a2[3];
                  if (v144 >= v143 >> 1)
                    a2 = sub_1B1C672E4(v143 > 1, v144 + 1, 1, a2, &qword_1EEF5CF10, (uint64_t)&type metadata for MetalIOData, (void (*)(_QWORD, int64_t, _QWORD *, _QWORD *))sub_1B1C71534);
                  a2[2] = v144 + 1;
                  v145 = &a2[4 * v144];
                  v145[4] = 0;
                  v145[5] = 0;
                  v145[6] = v116;
                  *((_BYTE *)v145 + 56) = 3;
                }
                sub_1B1B28D2C(v112);
              }
            }
            swift_release();
            v47 = v182;
LABEL_52:
            v45 = v163;
LABEL_53:
            if (++v46 == v45)
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              v48 = v162;
              goto LABEL_39;
            }
          }
        }
      }
    }
LABEL_22:
    v16 = (v23 - 1) & v23;
    v21 = __clz(__rbit64(v23)) + (v22 << 6);
    v17 = v22;
LABEL_23:
    v24 = *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v21);
    if (v24 < 0)
      break;
    v25 = *(_QWORD *)(*(_QWORD *)(v9 + 48) + 8 * v21);
    v26 = RGBuilder.createBuffer(name:desc:)((uint64_t)"Metal script buffer", 19, 2, v24, 0, *(_QWORD *)(v182 + 64));
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v18 = sub_1B1C673F0(0, *((_QWORD *)v18 + 2) + 1, 1, v18);
    v28 = *((_QWORD *)v18 + 2);
    v27 = *((_QWORD *)v18 + 3);
    v29 = (uint64_t)v13;
    if (v28 >= v27 >> 1)
      v18 = sub_1B1C673F0(v27 > 1, v28 + 1, 1, v18);
    *((_QWORD *)v18 + 2) = v28 + 1;
    v30 = v18;
    v31 = &v18[16 * v28];
    *((_QWORD *)v31 + 4) = v25;
    *((_QWORD *)v31 + 5) = v26;
    v32 = v29;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    aBlock = (_QWORD *)v29;
    v34 = sub_1B1DC3AC8(v25);
    v36 = v35;
    v37 = *(_QWORD *)(v32 + 16) + ((v35 & 1) == 0);
    if (*(_QWORD *)(v32 + 24) >= v37)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        sub_1B1EADA8C();
    }
    else
    {
      sub_1B1E9B044(v37, isUniquelyReferenced_nonNull_native);
      v38 = sub_1B1DC3AC8(v25);
      if ((v36 & 1) != (v39 & 1))
        goto LABEL_193;
      v34 = v38;
    }
    v18 = v30;
    v13 = aBlock;
    if ((v36 & 1) != 0)
    {
      *(_QWORD *)(aBlock[7] + 8 * v34) = v26;
    }
    else
    {
      aBlock[(v34 >> 6) + 8] |= 1 << v34;
      v19 = 8 * v34;
      *(_QWORD *)(v13[6] + v19) = v25;
      *(_QWORD *)(v13[7] + v19) = v26;
      ++v13[2];
    }
    v9 = v181;
    swift_bridgeObjectRelease();
  }
  sub_1B222967C();
  __break(1u);
LABEL_193:
  sub_1B2229FC4();
  __break(1u);
LABEL_194:
  aBlock = 0;
  v228[0] = 0xE000000000000000;
  sub_1B2229430();
  v157 = sub_1B1BCE95C();
  v159 = v158;
  swift_bridgeObjectRelease();
  aBlock = (_QWORD *)v157;
  v228[0] = v159;
  sub_1B2228890();
LABEL_195:
  result = sub_1B2229688();
  __break(1u);
  return result;
}

uint64_t sub_1B1C759B0@<X0>(__objc2_class **a1@<X0>, void (*a2)(uint64_t *__return_ptr, __int128 *)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __objc2_class *v9;
  BOOL v10;
  __int128 *p_aBlock;
  uint64_t result;
  uint64_t v13;
  BOOL v14;
  char v15;
  __objc2_class *v16;
  int v17;
  uint64_t v18;
  __objc2_class *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  __int128 *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  CFX::RG::Resource *v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  __objc2_class *v47;
  uint64_t v48;
  __objc2_class_ro *info;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  __objc2_class *isa;
  uint64_t v60;
  uint64_t *v61;
  CFX::RG::Resource *v62;
  uint64_t v63;
  __objc2_class *v64;
  __objc2_class_ro *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  char v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  const char *v89;
  uint64_t v90;
  char v91;
  char v92;
  unint64_t v93;
  uint64_t v94;
  char v95;
  char v96;
  unint64_t v97;
  void *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t *v103;
  CFX::RG::RenderGraphContext *v104;
  uint64_t v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  const CFX::RG::Resource *v110;
  uint64_t v111;
  int v112;
  uint64_t *v113;
  uint64_t v114;
  uint64_t v115;
  float v116;
  float v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  __int16 v121;
  __int16 v122;
  __int16 v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t *v130;
  CFX::RG::Resource *v131;
  uint64_t v132;
  char v133;
  char v134;
  char v135;
  __int128 v136;
  __int16 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  char v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  char v146;
  void *cache;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  char v152;
  char v153;
  unsigned __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  char v158;
  uint64_t v159;
  unsigned __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  uint64_t v164;
  int v165[4];
  int v166[4];
  int v167[4];
  int v168[4];
  unint64_t v169;
  uint64_t v170;
  uint64_t v171;
  __int128 v172;
  unsigned __int128 v173;
  __int128 v174;
  __int128 v175;
  unint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  __int128 v182;
  __int128 v183;
  unint64_t v184;
  __int128 v185;
  uint64_t v186;
  uint64_t v187;
  __int128 v188;
  unint64_t v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  uint64_t v198;
  _QWORD v199[3];
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  _QWORD v203[3];
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  _QWORD v207[3];
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  char v211[8];
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  char v220[8];
  __int128 v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  __int128 v227;
  __int128 v228;
  _QWORD v229[3];
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  _QWORD v233[3];
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  _QWORD v237[3];
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  _QWORD v241[3];
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  __int16 v288;
  char v289;
  __int128 v290;
  unsigned __int128 v291;
  unsigned __int128 v292;
  uint64_t v293;
  int v294;
  __int128 v295;
  __int128 v296;
  __int128 v297;
  __int128 v298;
  __int128 v299;
  __int128 v300;
  __int128 v301;
  __int128 v302;
  uint64_t v303;
  __int128 v304;
  __int128 v305;
  __int128 v306;
  __int128 v307;
  __int128 v308;
  __int128 v309;
  __int128 v310;
  __int128 v311;
  uint64_t v312;
  _OWORD v313[9];
  __int128 aBlock;
  __int128 v315;
  unsigned __int128 v316;
  unsigned __int128 v317;
  __int128 v318;
  __int128 v319;
  __int128 v320;
  __int128 v321;
  uint64_t v322;
  __int128 v323;
  __int128 v324;
  __int128 v325;
  __int128 v326;
  __int128 v327;
  __int128 v328;
  __int128 v329;
  __int128 v330;
  __int128 v331;
  __int128 v332;
  unsigned __int128 v333;
  unsigned __int128 v334;
  __int128 v335;
  __int128 v336;
  __int128 v337;
  __int128 v338;
  uint64_t v339;
  _BYTE v340[144];
  uint64_t v341;

  v5 = v3;
  v341 = *MEMORY[0x1E0C80C00];
  type metadata accessor for ConstantNode(0);
  if (swift_dynamicCastClass())
    goto LABEL_11;
  type metadata accessor for NilNode(0);
  if (swift_dynamicCastClass())
    goto LABEL_11;
  type metadata accessor for EntityAssetNode(0);
  if (swift_dynamicCastClass())
    goto LABEL_11;
  type metadata accessor for WorldReferenceNode(0);
  if (swift_dynamicCastClass())
    goto LABEL_11;
  v9 = *a1;
  v10 = *a1 == _TtC3VFX15GetECSValueNode || v9 == _TtC3VFX21TextureDescriptorNode;
  if (v10 && a1
    || ((type metadata accessor for GetWorldValueNode(0),
         v13 = swift_dynamicCastClass(),
         v9 == _TtC3VFX21ResolveResolutionNode)
      ? (v14 = a1 == 0)
      : (v14 = 1),
        !v14 ? (v15 = 0) : (v15 = 1),
        v13 || (v15 & 1) == 0))
  {
LABEL_11:
    sub_1B1C7976C((uint64_t)&aBlock);
LABEL_12:
    p_aBlock = &aBlock;
LABEL_13:
    sub_1B1A18378((uint64_t)p_aBlock, (uint64_t)v340, &qword_1EEF61660, (uint64_t)&type metadata for GraphTranslateResult);
    return sub_1B1A18378((uint64_t)v340, a3, &qword_1EEF61660, (uint64_t)&type metadata for GraphTranslateResult);
  }
  if (v9 != _TtC3VFX15RenderWorldNode || !a1)
  {
    if (v9 == _TtC3VFX11PresentNode && a1)
    {
      swift_retain_n();
      v25 = sub_1B20769D4();
      if (!v26)
      {
        sub_1B2229430();
        v58 = swift_bridgeObjectRelease();
        *(_QWORD *)&aBlock = 0x207475706E49;
        *((_QWORD *)&aBlock + 1) = 0xE600000000000000;
        ((void (*)(_QWORD *__return_ptr, uint64_t))(*a1)[3].info)(v207, v58);
        v262 = v208;
        sub_1B1BCF9C4(1, v208);
        v261 = v207[0];
        sub_1B1B28C6C((uint64_t)&v261);
        v260 = v207[1];
        sub_1B1B28C6C((uint64_t)&v260);
        v259 = v207[2];
        sub_1B1B28C6C((uint64_t)&v259);
        sub_1B1B28C6C((uint64_t)&v262);
        v258 = v209;
        sub_1B1B28C6C((uint64_t)&v258);
        v257 = v210;
        sub_1B1B28C6C((uint64_t)&v257);
        sub_1B2228890();
        swift_bridgeObjectRelease();
        sub_1B2228890();
        v32 = *((_QWORD *)&aBlock + 1);
        v31 = aBlock;
        v33 = (uint64_t)a1;
        v34 = 1;
        v35 = 0;
        goto LABEL_58;
      }
      v27 = v25;
      v28 = v26;
      v29 = *(_QWORD *)(v5 + 80);
      swift_bridgeObjectRetain();
      v179 = v27;
      LOBYTE(v27) = sub_1B1B0F1AC(v27, v28, v29);
      swift_bridgeObjectRelease();
      if ((v27 & 1) != 0)
      {
        *(_QWORD *)&aBlock = 0;
        *((_QWORD *)&aBlock + 1) = 0xE000000000000000;
        sub_1B2229430();
        sub_1B2228890();
        sub_1B2228890();
        swift_bridgeObjectRelease();
        v30 = sub_1B2228890();
        ((void (*)(uint64_t))(*a1)[3].cache)(v30);
        sub_1B2228890();
        swift_bridgeObjectRelease();
        sub_1B2228890();
        v32 = 0xE000000000000000;
        v31 = 0;
        v33 = (uint64_t)a1;
        v34 = 0;
        v35 = 1;
LABEL_58:
        sub_1B1C60148(v33, v34, v35, v31, v32);
        swift_bridgeObjectRelease();
LABEL_59:
        swift_willThrow();
        return swift_release_n();
      }
      swift_bridgeObjectRetain();
      sub_1B1B8B368((uint64_t *)&aBlock, v179, v28);
      swift_bridgeObjectRelease();
      v181 = sub_1B1C6090C(v179, v28);
      swift_bridgeObjectRelease();
      isa = a1[2][1].isa;
      v60 = swift_retain();
      sub_1B1C725EC(v60, a2, (uint64_t)v211);
      v61 = *(uint64_t **)(v5 + 64);
      v327 = v216;
      v328 = v217;
      v329 = v218;
      v330 = v219;
      v323 = v212;
      v324 = v213;
      v325 = v214;
      v326 = v215;
      v62 = (CFX::RG::Resource *)*((_QWORD *)&v323 + (_QWORD)isa);
      if (RGResourceIsNull((uint64_t)v62))
        goto LABEL_132;
      sub_1B191DD68(v62, v61, v181, 0, (uint64_t)&aBlock);
      v63 = v322;
      v182 = v315;
      v185 = aBlock;
      *(_OWORD *)v166 = v317;
      v173 = v316;
      v155 = v319;
      v161 = v318;
      v143 = v321;
      v149 = v320;
      swift_release_n();
      swift_release();
      v331 = v185;
      v332 = v182;
      v333 = v173;
      v334 = *(_OWORD *)v166;
      v335 = v161;
      v336 = v155;
      v337 = v149;
      v338 = v143;
      v339 = v63;
LABEL_62:
      sub_1B1C79714((uint64_t)&v331);
      v24 = &v331;
LABEL_63:
      sub_1B1C79574(v24, &aBlock);
      nullsub_16(&aBlock);
      goto LABEL_12;
    }
    if (v9 == _TtC3VFX18PublishTextureNode && a1)
    {
      swift_retain_n();
      swift_retain_n();
      v159 = sub_1B2076640();
      v153 = v36;
      cache = a1[2][1].cache;
      v180 = swift_retain();
      sub_1B1C725EC(v180, a2, (uint64_t)v220);
      v37 = sub_1B2076ADC();
      v171 = sub_1B1C6090C(v37, v38);
      swift_bridgeObjectRelease();
      v39 = *(uint64_t **)(v5 + 64);
      v327 = v225;
      v328 = v226;
      v329 = v227;
      v330 = v228;
      v323 = v221;
      v324 = v222;
      v325 = v223;
      v326 = v224;
      v40 = (CFX::RG::Resource *)*((_QWORD *)&v323 + (_QWORD)cache);
      if (RGResourceIsNull((uint64_t)v40))
        goto LABEL_132;
      if ((v153 & 1) != 0)
        v41 = 0;
      else
        v41 = HIDWORD(v159);
      if ((v153 & 1) != 0)
        v42 = -1;
      else
        v42 = v159;
      v43 = swift_allocObject();
      swift_retain();
      swift_weakInit();
      swift_release();
      v44 = swift_allocObject();
      *(_QWORD *)(v44 + 16) = v43;
      *(_DWORD *)(v44 + 24) = v42;
      *(_DWORD *)(v44 + 28) = v41;
      *(_QWORD *)&v316 = sub_1B1C79764;
      *((_QWORD *)&v316 + 1) = v44;
      *(_QWORD *)&aBlock = MEMORY[0x1E0C809B0];
      *((_QWORD *)&aBlock + 1) = 1107296256;
      *(_QWORD *)&v315 = sub_1B1C60A50;
      *((_QWORD *)&v315 + 1) = &unk_1E63D4768;
      v45 = _Block_copy(&aBlock);
      swift_release();
      sub_1B191DD68(v40, v39, v171, (uint64_t)v45, (uint64_t)&aBlock);
      v46 = v322;
      *(_OWORD *)v165 = v315;
      v172 = aBlock;
      v154 = v317;
      v160 = v316;
      v142 = v319;
      v148 = v318;
      v136 = v321;
      v138 = v320;
      _Block_release(v45);
      swift_release_n();
      swift_release_n();
      swift_release();
      v331 = v172;
      v332 = *(_OWORD *)v165;
      v333 = v160;
      v334 = v154;
      v335 = v148;
      v336 = v142;
      v337 = v138;
      v338 = v136;
      v339 = v46;
      goto LABEL_62;
    }
    if (v9 == _TtC3VFX8BlurNode && a1)
    {
      v47 = a1[2];
      info = v47->info;
      v48 = (uint64_t)v47[1].isa;
      swift_retain_n();
      swift_retain_n();
      if (sub_1B1C5FD80(v48))
      {
        sub_1B2229430();
        v50 = swift_bridgeObjectRelease();
        *(_QWORD *)&aBlock = 0x207475706E49;
        *((_QWORD *)&aBlock + 1) = 0xE600000000000000;
        ((void (*)(_QWORD *__return_ptr, uint64_t))(*a1)[3].info)(v233, v50);
        v274 = v234;
        sub_1B1BCF9C4(0, v234);
        v273 = v233[0];
        sub_1B1B28C6C((uint64_t)&v273);
        v272 = v233[1];
        sub_1B1B28C6C((uint64_t)&v272);
        v271 = v233[2];
        sub_1B1B28C6C((uint64_t)&v271);
        sub_1B1B28C6C((uint64_t)&v274);
        v270 = v235;
        sub_1B1B28C6C((uint64_t)&v270);
        v269 = v236;
        sub_1B1B28C6C((uint64_t)&v269);
        sub_1B2228890();
        swift_bridgeObjectRelease();
        sub_1B2228890();
        sub_1B1C60148((uint64_t)a1, 0, 0, aBlock, *((uint64_t *)&aBlock + 1));
        swift_bridgeObjectRelease();
        swift_willThrow();
        swift_release_n();
        return swift_release_n();
      }
      *(_QWORD *)&v313[0] = info;
      a2((uint64_t *)&aBlock, v313);
      swift_release();
      sub_1B1A18378((uint64_t)&aBlock + 8, (uint64_t)&v323, &qword_1EEF61660, (uint64_t)&type metadata for GraphTranslateResult);
      sub_1B1A18378((uint64_t)&v323, (uint64_t)&v331, &qword_1EEF61660, (uint64_t)&type metadata for GraphTranslateResult);
      if (sub_1B1C79560((uint64_t)&v331) == 1
        || (sub_1B1C79574(&v331, v313), v77 = sub_1B1C795AC((uint64_t)v313), nullsub_16(v313), v77 == 1))
      {
        *(_QWORD *)&aBlock = 0;
        *((_QWORD *)&aBlock + 1) = 0xE000000000000000;
        sub_1B2229430();
        v79 = swift_bridgeObjectRelease();
        *(_QWORD *)&aBlock = 0x207475706E49;
        *((_QWORD *)&aBlock + 1) = 0xE600000000000000;
        ((void (*)(_QWORD *__return_ptr, uint64_t))(*a1)[3].info)(v229, v79);
        v268 = v230;
        sub_1B1BCF9C4(0, v230);
        v267 = v229[0];
        sub_1B1B28C6C((uint64_t)&v267);
        v266 = v229[1];
        sub_1B1B28C6C((uint64_t)&v266);
        v265 = v229[2];
        sub_1B1B28C6C((uint64_t)&v265);
        sub_1B1B28C6C((uint64_t)&v268);
        v264 = v231;
        sub_1B1B28C6C((uint64_t)&v264);
        v263 = v232;
        sub_1B1B28C6C((uint64_t)&v263);
        sub_1B2228890();
        swift_bridgeObjectRelease();
        sub_1B2228890();
        sub_1B1C60148((uint64_t)a1, 0, 0, aBlock, *((uint64_t *)&aBlock + 1));
        swift_bridgeObjectRelease();
        swift_willThrow();
        swift_release_n();
        return swift_release_n();
      }
      v99 = v78;
      v100 = swift_dynamicCastClass();
      if (v100)
      {
        sub_1B1A02864(v100 + OBJC_IVAR____TtC3VFX12ConstantNode_holder + 8, (uint64_t)&v304);
      }
      else
      {
        v305 = 0u;
        v304 = 0u;
      }
      sub_1B1A02758(0, (unint64_t *)&qword_1ED4BB150, MEMORY[0x1E0DEE9B8] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
      swift_retain();
      v112 = swift_dynamicCast();
      v113 = *(uint64_t **)(v5 + 64);
      v114 = *(_QWORD *)(v5 + 32);
      v308 = *(_OWORD *)(v99 + 72);
      v309 = *(_OWORD *)(v99 + 88);
      v310 = *(_OWORD *)(v99 + 104);
      v311 = *(_OWORD *)(v99 + 120);
      v304 = *(_OWORD *)(v99 + 8);
      v305 = *(_OWORD *)(v99 + 24);
      v306 = *(_OWORD *)(v99 + 40);
      v307 = *(_OWORD *)(v99 + 56);
      v115 = *((_QWORD *)&v304 + v48);
      if (RGResourceIsNull(v115))
        goto LABEL_132;
      v116 = 0.0;
      if (v112)
        v117 = *(float *)&v295;
      else
        v117 = 0.0;
      if (v117 >= 0.0)
        v116 = v117;
      sub_1B191DC78(v113, v114, (uint64_t)"blur", v115, (uint64_t)&v304, v116);
      v118 = v312;
      v188 = v304;
      *(_OWORD *)v168 = v306;
      v175 = v305;
      v157 = v308;
      v163 = v307;
      v145 = v310;
      v151 = v309;
      v140 = v311;
      swift_release_n();
      swift_release_n();
      swift_release();
      v295 = v188;
      v296 = v175;
      v297 = *(_OWORD *)v168;
      v298 = v163;
      v299 = v157;
      v300 = v151;
      v301 = v145;
      v302 = v140;
      v303 = v118;
LABEL_120:
      sub_1B1C79714((uint64_t)&v295);
      sub_1B1C79574(&v295, &v304);
      nullsub_16(&v304);
      p_aBlock = &v304;
      goto LABEL_13;
    }
    if (v9 == _TtC3VFX9BloomNode && a1)
    {
      v64 = a1[2];
      v65 = v64->info;
      v66 = (uint64_t)v64[1].isa;
      swift_retain_n();
      swift_retain();
      if (sub_1B1C5FD80(v66))
      {
        sub_1B2229430();
        v67 = swift_bridgeObjectRelease();
        *(_QWORD *)&aBlock = 0x207475706E49;
        *((_QWORD *)&aBlock + 1) = 0xE600000000000000;
        ((void (*)(_QWORD *__return_ptr, uint64_t))(*a1)[3].info)(v241, v67);
        v286 = v242;
        sub_1B1BCF9C4(0, v242);
        v285 = v241[0];
        sub_1B1B28C6C((uint64_t)&v285);
        v284 = v241[1];
        sub_1B1B28C6C((uint64_t)&v284);
        v283 = v241[2];
        sub_1B1B28C6C((uint64_t)&v283);
        sub_1B1B28C6C((uint64_t)&v286);
        v282 = v243;
        sub_1B1B28C6C((uint64_t)&v282);
        v281 = v244;
        sub_1B1B28C6C((uint64_t)&v281);
        sub_1B2228890();
        swift_bridgeObjectRelease();
        sub_1B2228890();
        sub_1B1C60148((uint64_t)a1, 0, 0, aBlock, *((uint64_t *)&aBlock + 1));
        swift_bridgeObjectRelease();
        swift_willThrow();
        swift_release();
        return swift_release_n();
      }
      *(_QWORD *)&v313[0] = v65;
      a2((uint64_t *)&aBlock, v313);
      swift_release();
      sub_1B1A18378((uint64_t)&aBlock + 8, (uint64_t)&v323, &qword_1EEF61660, (uint64_t)&type metadata for GraphTranslateResult);
      sub_1B1A18378((uint64_t)&v323, (uint64_t)&v331, &qword_1EEF61660, (uint64_t)&type metadata for GraphTranslateResult);
      if (sub_1B1C79560((uint64_t)&v331) == 1
        || (sub_1B1C79574(&v331, v313), v85 = sub_1B1C795AC((uint64_t)v313), nullsub_16(v313), v85 == 1))
      {
        *(_QWORD *)&aBlock = 0;
        *((_QWORD *)&aBlock + 1) = 0xE000000000000000;
        sub_1B2229430();
        v87 = swift_bridgeObjectRelease();
        *(_QWORD *)&aBlock = 0x207475706E49;
        *((_QWORD *)&aBlock + 1) = 0xE600000000000000;
        ((void (*)(_QWORD *__return_ptr, uint64_t))(*a1)[3].info)(v237, v87);
        v280 = v238;
        sub_1B1BCF9C4(0, v238);
        v279 = v237[0];
        sub_1B1B28C6C((uint64_t)&v279);
        v278 = v237[1];
        sub_1B1B28C6C((uint64_t)&v278);
        v277 = v237[2];
        sub_1B1B28C6C((uint64_t)&v277);
        sub_1B1B28C6C((uint64_t)&v280);
        v276 = v239;
        sub_1B1B28C6C((uint64_t)&v276);
        v275 = v240;
        sub_1B1B28C6C((uint64_t)&v275);
        sub_1B2228890();
        swift_bridgeObjectRelease();
        sub_1B2228890();
        sub_1B1C60148((uint64_t)a1, 0, 0, aBlock, *((uint64_t *)&aBlock + 1));
        swift_bridgeObjectRelease();
        swift_willThrow();
        swift_release();
        return swift_release_n();
      }
      v102 = (uint64_t *)v86;
      v104 = *(CFX::RG::RenderGraphContext **)(v5 + 56);
      v103 = *(uint64_t **)(v5 + 64);
      v105 = *(_QWORD *)(v5 + 32);
      v106 = *(_OWORD *)(v86 + 88);
      v194 = *(_OWORD *)(v86 + 72);
      v195 = v106;
      v107 = *(_OWORD *)(v86 + 120);
      v196 = *(_OWORD *)(v86 + 104);
      v197 = v107;
      v108 = *(_OWORD *)(v86 + 24);
      v190 = *(_OWORD *)(v86 + 8);
      v191 = v108;
      v109 = *(_OWORD *)(v86 + 56);
      v192 = *(_OWORD *)(v86 + 40);
      v193 = v109;
      v110 = (const CFX::RG::Resource *)*((_QWORD *)&v190 + v66);
      if (RGResourceIsNull((uint64_t)v110))
        goto LABEL_132;
      sub_1B191DCD0(v103, v104, v105, v110, *v102, (uint64_t)&v304);
      v111 = v312;
      v174 = v305;
      v183 = v304;
      v162 = v307;
      *(_OWORD *)v167 = v306;
      v150 = v309;
      v156 = v308;
      v139 = v311;
      v144 = v310;
      swift_release();
      swift_release_n();
      v295 = v183;
      v296 = v174;
      v297 = *(_OWORD *)v167;
      v298 = v162;
      v299 = v156;
      v300 = v150;
      v301 = v144;
      v302 = v139;
      v303 = v111;
      goto LABEL_120;
    }
    if (v9 == _TtC3VFX17ComputeShaderNode && a1)
    {
      v70 = *(_QWORD *)(v5 + 48);
      swift_retain_n();
      if ((sub_1B2078874() & 1) != 0)
      {
        swift_retain();
        v186 = sub_1B2076640();
        v72 = v71;
        swift_release();
        v73 = sub_1B1C73BCC((uint64_t)a1, a2);
        if (v4)
          return swift_release_n();
        v75 = v73;
        if (v73)
        {
          if ((v72 & 1) != 0)
            v76 = 0xFFFFFFFFLL;
          else
            v76 = v186;
          sub_1B1DD41D8(v76, v70, v75, v74, *(uint64_t **)(v5 + 64), (unint64_t)&v331);
LABEL_126:
          sub_1B1C79714((uint64_t)&v331);
          sub_1B1C79574(&v331, &aBlock);
          nullsub_16(&aBlock);
          swift_release_n();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_12;
        }
LABEL_127:
        v88 = 0xD000000000000033;
        v89 = "Unable to extract script data from metal reflection";
        goto LABEL_128;
      }
    }
    else
    {
      if (v9 != _TtC3VFX18FullscreenQuadNode || !a1)
      {
        if (v9 != _TtC3VFX22RenderGraphTextureNode || !a1)
        {
          swift_retain();
          sub_1B2229430();
          v101 = swift_bridgeObjectRelease();
          *(_QWORD *)&aBlock = 0xD00000000000001BLL;
          *((_QWORD *)&aBlock + 1) = 0x80000001B2335E00;
          ((void (*)(uint64_t))(*a1)[3].cache)(v101);
          sub_1B2228890();
          swift_bridgeObjectRelease();
          sub_1B1C60148((uint64_t)a1, 0, 1, 0xD00000000000001BLL, 0x80000001B2335E00);
          swift_bridgeObjectRelease();
          swift_willThrow();
          return swift_release();
        }
        swift_retain_n();
        swift_retain();
        v90 = sub_1B2076640();
        v92 = v91;
        swift_release();
        if ((v92 & 1) != 0)
          v93 = 0xFFFFFFFFLL;
        else
          v93 = v90;
        if ((sub_1B1DA4E70(v93) & 1) != 0)
        {
          LOBYTE(v323) = 0;
          swift_retain();
          v94 = sub_1B2076640();
          v96 = v95;
          swift_release();
          v97 = (v96 & 1) != 0 ? 0xFFFFFFFFLL : v94;
          v98 = (void *)sub_1B20F26A4(v97, &v323);
          if (v98)
          {
            if ((v323 & 1) == 0)
            {
              RGTextureDescriptorFromMTLTexture(v98, (uint64_t)&aBlock);
              v121 = aBlock;
              v122 = WORD1(aBlock);
              v123 = WORD2(aBlock);
              v287 = aBlock;
              v135 = BYTE8(aBlock);
              v137 = WORD3(aBlock);
              v288 = WORD4(aBlock);
              v133 = BYTE10(aBlock);
              v134 = BYTE9(aBlock);
              v289 = BYTE10(aBlock);
              v132 = v315;
              v290 = v315;
              v184 = *((_QWORD *)&v316 + 1);
              v189 = v316;
              v291 = v316;
              v169 = *((_QWORD *)&v317 + 1);
              v176 = v317;
              v292 = v317;
              v164 = v318;
              v293 = v318;
              v158 = BYTE8(v318);
              v294 = DWORD2(v318);
              v152 = BYTE9(v318);
              v146 = BYTE10(v318);
              v141 = BYTE11(v318);
              if (*((_QWORD *)&v315 + 1) != 2)
              {
                sub_1B1C60148((uint64_t)a1, 0, 1, 0xD000000000000019, 0x80000001B2335E40);
                swift_willThrow();
                swift_unknownObjectRelease();
                return swift_release_n();
              }
              v130 = *(uint64_t **)(v5 + 64);
              v124 = swift_allocObject();
              *(_QWORD *)(v124 + 16) = v5;
              *(_QWORD *)(v124 + 24) = a1;
              swift_retain();
              swift_retain();
              v131 = RGBuilder.createExternalTexture(name:desc:_:)((uint64_t)"TextureAsset", 12, 2, &v287, (uint64_t)sub_1B1C7970C, v124, v130);
              swift_release();
              LOWORD(aBlock) = v121;
              WORD1(aBlock) = v122;
              WORD2(aBlock) = v123;
              WORD3(aBlock) = v137;
              BYTE8(aBlock) = v135;
              BYTE9(aBlock) = v134;
              BYTE10(aBlock) = v133;
              *(_QWORD *)&v315 = v132;
              *((_QWORD *)&v315 + 1) = 2;
              v316 = __PAIR128__(v184, v189);
              v317 = __PAIR128__(v169, v176);
              *(_QWORD *)&v318 = v164;
              BYTE8(v318) = v158;
              BYTE9(v318) = v152;
              BYTE10(v318) = v146;
              BYTE11(v318) = v141;
              v125 = RGTextureReferenceDescriptorCreate((uint64_t)&aBlock);
              v126 = RGNullPass();
              v127 = RGBuilder.createCopy(name:input:inputPass:expected:)((uint64_t)"TextureAssetCopy", 16, 2, (uint64_t)v131, v126, v125, (uint64_t)v130);
              v129 = v128;
              RGTextureReferenceDescriptorDestroy(v125);
              swift_release_n();
              swift_unknownObjectRelease();
              *(_QWORD *)&v331 = v129;
              *((_QWORD *)&v331 + 1) = v127;
              v332 = 0u;
              v333 = 0u;
              v334 = 0u;
              v335 = 0u;
              v336 = 0u;
              v337 = 0u;
              v338 = 0u;
              v339 = 0;
              goto LABEL_62;
            }
            swift_unknownObjectRelease();
          }
        }
        v88 = 0xD000000000000013;
        v89 = "Texture unavailable";
LABEL_128:
        sub_1B1C60148((uint64_t)a1, 0, 1, v88, (unint64_t)(v89 - 32) | 0x8000000000000000);
        goto LABEL_59;
      }
      v80 = *(_QWORD *)(v5 + 48);
      swift_retain_n();
      if ((sub_1B2078874() & 1) != 0)
      {
        swift_retain();
        v187 = sub_1B2076640();
        v82 = v81;
        swift_release();
        v83 = sub_1B1C73BCC((uint64_t)a1, a2);
        if (v4)
          return swift_release_n();
        v119 = v83;
        if (v83)
        {
          if ((v82 & 1) != 0)
            v120 = 0xFFFFFFFFLL;
          else
            v120 = v187;
          sub_1B1DD48C8(v120, v80, v119, v84, *(uint64_t **)(v5 + 64), (unint64_t)&v331);
          goto LABEL_126;
        }
        goto LABEL_127;
      }
    }
    v88 = 0xD000000000000036;
    v89 = "Script runtime data doesn't match authoring reflection";
    goto LABEL_128;
  }
  v16 = a1[2];
  v177 = (uint64_t)v16[3].isa;
  *(_QWORD *)&v313[0] = v16[2].info;
  swift_retain_n();
  swift_retain_n();
  a2((uint64_t *)&aBlock, v313);
  swift_release();
  sub_1B1A18378((uint64_t)&aBlock + 8, (uint64_t)&v323, &qword_1EEF61660, (uint64_t)&type metadata for GraphTranslateResult);
  sub_1B1A18378((uint64_t)&v323, (uint64_t)&v331, &qword_1EEF61660, (uint64_t)&type metadata for GraphTranslateResult);
  if (sub_1B1C79560((uint64_t)&v331) == 1
    || (sub_1B1C79574(&v331, v313), v17 = sub_1B1C795AC((uint64_t)v313), nullsub_16(v313), v17 == 1))
  {
    v178 = 0;
    goto LABEL_27;
  }
  v51 = v18;
  if (sub_1B1C5FD80(v177))
  {
    sub_1B2229430();
    v52 = swift_bridgeObjectRelease();
    *(_QWORD *)&v304 = 0x207475706E49;
    *((_QWORD *)&v304 + 1) = 0xE600000000000000;
    ((void (*)(_QWORD *__return_ptr, uint64_t))(*a1)[3].info)(v199, v52);
    v256 = v200;
    sub_1B1BCF9C4(5, v200);
    v255 = v199[0];
    sub_1B1B28C6C((uint64_t)&v255);
    v254 = v199[1];
    sub_1B1B28C6C((uint64_t)&v254);
    v253 = v199[2];
    sub_1B1B28C6C((uint64_t)&v253);
    sub_1B1B28C6C((uint64_t)&v256);
    v252 = v201;
    sub_1B1B28C6C((uint64_t)&v252);
    v251 = v202;
    sub_1B1B28C6C((uint64_t)&v251);
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    sub_1B1C60148((uint64_t)a1, 5, 0, v304, *((uint64_t *)&v304 + 1));
    swift_bridgeObjectRelease();
    swift_willThrow();
LABEL_69:
    swift_release_n();
    return swift_release_n();
  }
  v308 = *(_OWORD *)(v51 + 72);
  v309 = *(_OWORD *)(v51 + 88);
  v310 = *(_OWORD *)(v51 + 104);
  v311 = *(_OWORD *)(v51 + 120);
  v304 = *(_OWORD *)(v51 + 8);
  v305 = *(_OWORD *)(v51 + 24);
  v306 = *(_OWORD *)(v51 + 40);
  v307 = *(_OWORD *)(v51 + 56);
  v69 = *((_QWORD *)&v304 + v177);
  if (!RGResourceIsNull(v69))
  {
    v178 = v69;
LABEL_27:
    v19 = a1[2];
    v170 = (uint64_t)v19[3].cache;
    *(_QWORD *)&v295 = v19[3].superclass;
    swift_retain_n();
    a2((uint64_t *)&aBlock, &v295);
    swift_release();
    sub_1B1A18378((uint64_t)&aBlock + 8, (uint64_t)&v304, &qword_1EEF61660, (uint64_t)&type metadata for GraphTranslateResult);
    sub_1B1A18378((uint64_t)&v304, (uint64_t)v313, &qword_1EEF61660, (uint64_t)&type metadata for GraphTranslateResult);
    if (sub_1B1C79560((uint64_t)v313) == 1
      || (sub_1B1C79574(v313, &v295), v20 = sub_1B1C795AC((uint64_t)&v295), nullsub_16(&v295), v20 == 1))
    {
      v22 = 0;
LABEL_30:
      v23 = (_OWORD *)sub_1B2076914();
      if (!v23)
        v23 = (_OWORD *)static RGTextureReferenceDescriptor.null.getter();
      sub_1B1C5F024(*(uint64_t **)(v5 + 56), *(uint64_t **)(v5 + 32), v178, v22, v23, *(uint64_t **)(v5 + 64), (uint64_t)&v190);
      swift_release_n();
      swift_release_n();
      swift_release_n();
      v301 = v196;
      v302 = v197;
      v303 = v198;
      v297 = v192;
      v298 = v193;
      v300 = v195;
      v299 = v194;
      v296 = v191;
      v295 = v190;
      sub_1B1C79714((uint64_t)&v295);
      v24 = &v295;
      goto LABEL_63;
    }
    v53 = v21;
    if (sub_1B1C5FD80(v170) == 1)
    {
      v54 = *(_OWORD *)(v53 + 88);
      v194 = *(_OWORD *)(v53 + 72);
      v195 = v54;
      v55 = *(_OWORD *)(v53 + 120);
      v196 = *(_OWORD *)(v53 + 104);
      v197 = v55;
      v56 = *(_OWORD *)(v53 + 24);
      v190 = *(_OWORD *)(v53 + 8);
      v191 = v56;
      v57 = *(_OWORD *)(v53 + 56);
      v192 = *(_OWORD *)(v53 + 40);
      v193 = v57;
      v22 = *((_QWORD *)&v190 + v170);
      if (!RGResourceIsNull(v22))
        goto LABEL_30;
      goto LABEL_132;
    }
    sub_1B2229430();
    v68 = swift_bridgeObjectRelease();
    *(_QWORD *)&v190 = 0x207475706E49;
    *((_QWORD *)&v190 + 1) = 0xE600000000000000;
    ((void (*)(_QWORD *__return_ptr, uint64_t))(*a1)[3].info)(v203, v68);
    v250 = v204;
    sub_1B1BCF9C4(6, v204);
    v249 = v203[0];
    sub_1B1B28C6C((uint64_t)&v249);
    v248 = v203[1];
    sub_1B1B28C6C((uint64_t)&v248);
    v247 = v203[2];
    sub_1B1B28C6C((uint64_t)&v247);
    sub_1B1B28C6C((uint64_t)&v250);
    v246 = v205;
    sub_1B1B28C6C((uint64_t)&v246);
    v245 = v206;
    sub_1B1B28C6C((uint64_t)&v245);
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    sub_1B1C60148((uint64_t)a1, 6, 0, 0x207475706E49, 0xE600000000000000);
    swift_bridgeObjectRelease();
    swift_willThrow();
    swift_release_n();
    goto LABEL_69;
  }
LABEL_132:
  result = sub_1B2229688();
  __break(1u);
  return result;
}

id sub_1B1C7774C(uint64_t a1, char a2)
{
  uint64_t v2;
  id v5;
  id v6;
  unint64_t v7;
  unint64_t v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  id v14;
  void *v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  _BYTE v26[80];
  _WORD v27[5];
  unsigned __int8 v28;

  v5 = MTLCreateSystemDefaultDevice();
  v6 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CC6BB0]), sel_init);
  RGContext.tryResolve(resource:)(a1, *(_QWORD *)(v2 + 56), (uint64_t)v26);
  sub_1B1B4D278((uint64_t)v26, (uint64_t)v27, (unint64_t *)&qword_1EEF62D90, (uint64_t (*)(uint64_t))type metadata accessor for TextureDescriptor);
  if ((unint64_t)v28 << 16 == 0x20000)
  {
    v9 = 1.0;
    if (a2 == 1)
    {
LABEL_3:
      v10 = 55;
      goto LABEL_6;
    }
  }
  else
  {
    LOWORD(v7) = v27[0];
    LOWORD(v8) = v27[1];
    v9 = (double)v7 / (double)v8;
    if (a2 == 1)
      goto LABEL_3;
  }
  v10 = 115;
LABEL_6:
  objc_msgSend(v6, sel_setPixelFormat_, v10);
  objc_msgSend(v6, sel_setWidth_, 256);
  v11 = (uint64_t)(256.0 / v9);
  if (v11 >= 256)
    v11 = 256;
  if (v11 <= 1)
    v12 = 1;
  else
    v12 = v11;
  objc_msgSend(v6, sel_setHeight_, v12);
  objc_msgSend(v6, sel_setStorageMode_, 2);
  objc_msgSend(v6, sel_setUsage_, 5);
  if (a2 == 1)
  {
    objc_msgSend(v6, sel_setStorageMode_, 0);
    objc_msgSend(v6, sel_setUsage_, (unint64_t)objc_msgSend(v6, sel_usage) | 2);
  }
  v13 = objc_msgSend(v5, sel_newTextureWithDescriptor_, v6);
  v14 = objc_msgSend(*(id *)(v2 + 40), sel_commandBuffer);
  v15 = (void *)sub_1B2228728();
  objc_msgSend(v14, sel_setLabel_, v15);

  v16 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CC6B50]), sel_init);
  v17 = objc_msgSend(v16, sel_colorAttachments);
  v18 = objc_msgSend(v17, sel_objectAtIndexedSubscript_, 0);

  objc_msgSend(v18, sel_setTexture_, v13);
  v19 = objc_msgSend(v16, sel_colorAttachments);
  v20 = objc_msgSend(v19, sel_objectAtIndexedSubscript_, 0);

  objc_msgSend(v20, sel_setLoadAction_, 2);
  v21 = objc_msgSend(v16, sel_colorAttachments);
  v22 = objc_msgSend(v21, sel_objectAtIndexedSubscript_, 0);

  objc_msgSend(v22, sel_setClearColor_, 1.0, 1.0, 1.0, 1.0);
  v23 = objc_msgSend(v16, sel_colorAttachments);
  v24 = objc_msgSend(v23, sel_objectAtIndexedSubscript_, 0);

  objc_msgSend(v24, sel_setStoreAction_, 1);
  objc_msgSend(objc_msgSend(v14, sel_renderCommandEncoderWithDescriptor_, v16), sel_endEncoding);
  objc_msgSend(v14, sel_commit);
  swift_unknownObjectRelease();

  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  return v13;
}

uint64_t sub_1B1C77B18(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v4;
  BOOL v5;
  uint64_t result;

  if (a2 - a1 < 0
    || ((v4 = a3 + 32 * (a2 - a1), a4 + 32 + 32 * a1 < v4) ? (v5 = a4 + 32 + 32 * a2 > a3) : (v5 = 0), v5))
  {
    result = sub_1B2229700();
    __break(1u);
  }
  else
  {
    swift_arrayInitWithCopy();
    return v4;
  }
  return result;
}

char *sub_1B1C77BFC(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v6;
  char *v7;
  unint64_t v8;
  BOOL v9;
  char *result;

  v4 = a2 - a1;
  if (a2 - a1 < 0
    || ((v6 = (char *)(a4 + 32 + 12 * a1), v7 = &__dst[12 * v4], v8 = a4 + 32 + 12 * a2, v6 < v7)
      ? (v9 = v8 > (unint64_t)__dst)
      : (v9 = 0),
        v9))
  {
    result = (char *)sub_1B2229700();
    __break(1u);
  }
  else
  {
    memcpy(__dst, v6, 12 * v4);
    return v7;
  }
  return result;
}

uint64_t sub_1B1C77CE4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v4;
  BOOL v5;
  uint64_t result;

  if (a2 - a1 < 0
    || ((v4 = a3 + 56 * (a2 - a1), a4 + 32 + 56 * a1 < v4) ? (v5 = a4 + 32 + 56 * a2 > a3) : (v5 = 0), v5))
  {
    result = sub_1B2229700();
    __break(1u);
  }
  else
  {
    swift_arrayInitWithCopy();
    return v4;
  }
  return result;
}

unint64_t sub_1B1C77DCC(unint64_t result)
{
  if ((~result & 0xF000000000000007) != 0)
    return sub_1B1A05610(result);
  return result;
}

void sub_1B1C77DE0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED4BAD20)
  {
    sub_1B1C798AC(255, &qword_1ED4B89B0);
    v0 = sub_1B2229A18();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED4BAD20);
  }
}

uint64_t sub_1B1C77E54(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v4;
  BOOL v5;
  uint64_t result;

  if (a2 - a1 < 0
    || ((v4 = a3 + 16 * (a2 - a1), a4 + 32 + 16 * a1 < v4) ? (v5 = a4 + 32 + 16 * a2 > a3) : (v5 = 0), v5))
  {
    result = sub_1B2229700();
    __break(1u);
  }
  else
  {
    sub_1B1C78EE4(0);
    swift_arrayInitWithCopy();
    return v4;
  }
  return result;
}

char *sub_1B1C77F48(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v6;
  char *v7;
  unint64_t v8;
  BOOL v9;
  char *result;

  v4 = a2 - a1;
  if (a2 - a1 < 0
    || ((v6 = (char *)(a4 + 32 + 48 * a1), v7 = &__dst[48 * v4], v8 = a4 + 32 + 48 * a2, v6 < v7)
      ? (v9 = v8 > (unint64_t)__dst)
      : (v9 = 0),
        v9))
  {
    result = (char *)sub_1B2229700();
    __break(1u);
  }
  else
  {
    memcpy(__dst, v6, 48 * v4);
    return v7;
  }
  return result;
}

void sub_1B1C78030()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5CC30)
  {
    sub_1B1C798AC(255, (unint64_t *)&unk_1EEF5AB80);
    v0 = sub_1B2229A18();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5CC30);
  }
}

void sub_1B1C780A4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5CC40)
  {
    sub_1B1C798AC(255, &qword_1EEF5AB90);
    v0 = sub_1B2229A18();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5CC40);
  }
}

void sub_1B1C78118()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5CC50)
  {
    sub_1B1B9D790(255, &qword_1EEF5CC58);
    v0 = sub_1B2229A18();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5CC50);
  }
}

char *sub_1B1C78184(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v6;
  char *v7;
  unint64_t v8;
  BOOL v9;
  char *result;

  v4 = a2 - a1;
  if (a2 - a1 < 0
    || ((v6 = (char *)(a4 + 32 + 160 * a1), v7 = &__dst[160 * v4], v8 = a4 + 32 + 160 * a2, v6 < v7)
      ? (v9 = v8 > (unint64_t)__dst)
      : (v9 = 0),
        v9))
  {
    result = (char *)sub_1B2229700();
    __break(1u);
  }
  else
  {
    memcpy(__dst, v6, 160 * v4);
    return v7;
  }
  return result;
}

void sub_1B1C7826C()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_1EEF5CC80)
  {
    sub_1B1C782D0();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1EEF5CC80);
  }
}

unint64_t sub_1B1C782D0()
{
  unint64_t result;

  result = qword_1EEF5CC88;
  if (!qword_1EEF5CC88)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EEF5CC88);
  }
  return result;
}

void sub_1B1C7830C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5CC90)
  {
    sub_1B1C798AC(255, &qword_1EEF5CC98);
    v0 = sub_1B2229A18();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5CC90);
  }
}

uint64_t sub_1B1C78380(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t *a5)
{
  unint64_t v5;
  BOOL v6;
  uint64_t result;

  if (a2 - a1 < 0
    || ((v5 = a3 + 32 * (a2 - a1), a4 + 32 + 32 * a1 < v5) ? (v6 = a4 + 32 + 32 * a2 > a3) : (v6 = 0), v6))
  {
    result = sub_1B2229700();
    __break(1u);
  }
  else
  {
    sub_1B1C798AC(0, a5);
    swift_arrayInitWithCopy();
    return v5;
  }
  return result;
}

uint64_t sub_1B1C78488(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  BOOL v7;
  uint64_t result;

  v4 = a2 - a1;
  if (a2 - a1 < 0 || ((v5 = a4 + 48 * a1 + 32, v6 = a3 + 48 * v4, v5 < v6) ? (v7 = v5 + 48 * v4 > a3) : (v7 = 0), v7))
  {
    result = sub_1B2229700();
    __break(1u);
  }
  else
  {
    sub_1B1C798AC(0, &qword_1EEF5CC98);
    swift_arrayInitWithCopy();
    return v6;
  }
  return result;
}

uint64_t sub_1B1C785A8(_OWORD *a1)
{
  return sub_1B1C79EAC(a1);
}

uint64_t sub_1B1C785BC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1B1C785E0()
{
  return swift_deallocObject();
}

uint64_t sub_1B1C785F0(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1B1C78660@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1B1C78CAC(a1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *, uint64_t))sub_1B1C54F20, a2);
}

uint64_t sub_1B1C78670()
{
  return swift_deallocObject();
}

uint64_t sub_1B1C78680(_OWORD *a1)
{
  return sub_1B1C78D78(a1);
}

uint64_t sub_1B1C78694(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_1B1C78704()
{
  uint64_t v0;

  sub_1B1BBC9D8(*(_QWORD *)(v0 + 24), (uint64_t (*)(unint64_t))sub_1B19F8D00);
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1B1C78738(uint64_t *a1)
{
  return sub_1B1C78DC4(a1, (void (*)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1C5248C);
}

uint64_t sub_1B1C78748(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v4;
  BOOL v5;
  uint64_t result;

  if (a2 - a1 < 0
    || ((v4 = a3 + 16 * (a2 - a1), a4 + 32 + 16 * a1 < v4) ? (v5 = a4 + 32 + 16 * a2 > a3) : (v5 = 0), v5))
  {
    result = sub_1B2229700();
    __break(1u);
  }
  else
  {
    swift_arrayInitWithCopy();
    return v4;
  }
  return result;
}

void sub_1B1C7882C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5CCB8)
  {
    sub_1B1B9D790(255, &qword_1EEF5CCC0);
    v0 = sub_1B2229A18();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5CCB8);
  }
}

void sub_1B1C78898(uint64_t a1, uint64_t a2)
{
  unint64_t TupleTypeMetadata;
  uint64_t v3;

  if (!qword_1EEF5CCD0)
  {
    MEMORY[0x1E0C80A78](0, a2);
    sub_1B1C78980();
    sub_1B1C789EC();
    TupleTypeMetadata = swift_getTupleTypeMetadata();
    if (!v3)
      atomic_store(TupleTypeMetadata, (unint64_t *)&qword_1EEF5CCD0);
  }
}

void sub_1B1C78980()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5CCD8)
  {
    sub_1B1A02758(255, &qword_1EEF5CCE0, MEMORY[0x1E0DEB188], MEMORY[0x1E0DEB9C0]);
    v0 = sub_1B2229124();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5CCD8);
  }
}

void sub_1B1C789EC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5CCE8)
  {
    sub_1B1A02758(255, &qword_1EEF5CCF0, MEMORY[0x1E0DEDE70], MEMORY[0x1E0DEB9C0]);
    v0 = sub_1B2229124();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5CCE8);
  }
}

void sub_1B1C78A58()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5CCF8)
  {
    sub_1B1C798AC(255, (unint64_t *)&qword_1EEF5CD00);
    v0 = sub_1B2229A18();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5CCF8);
  }
}

void sub_1B1C78ACC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5CD08)
  {
    sub_1B1C78B38(255, &qword_1EEF5CD10);
    v0 = sub_1B2229A18();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5CD08);
  }
}

void sub_1B1C78B38(uint64_t a1, unint64_t *a2)
{
  unint64_t TupleTypeMetadata3;
  uint64_t v4;

  if (!*a2)
  {
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v4)
      atomic_store(TupleTypeMetadata3, a2);
  }
}

void sub_1B1C78B8C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5CD18)
  {
    sub_1B19F8E54(255, &qword_1ED4BB0F0, (uint64_t (*)(void))sub_1B19F8E10, MEMORY[0x1E0DEDB58], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDDA8]);
    v0 = sub_1B2229A18();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5CD18);
  }
}

void sub_1B1C78C00()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED4BAF20)
  {
    sub_1B1C798AC(255, (unint64_t *)&qword_1ED4BA570);
    v0 = sub_1B2229A18();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED4BAF20);
  }
}

uint64_t sub_1B1C78C74()
{
  return swift_deallocObject();
}

_QWORD *sub_1B1C78C84@<X0>(_OWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  return sub_1B1C6BF44(a1, *(_QWORD *(**)(uint64_t *__return_ptr, _OWORD *))(v2 + 16), a2);
}

uint64_t sub_1B1C78CA0@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1B1C78CAC(a1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *, uint64_t))sub_1B1C553E0, a2);
}

uint64_t sub_1B1C78CAC@<X0>(uint64_t *a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *, uint64_t)@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t result;

  result = sub_1B1C5C520(*a1, *(_BYTE *)(v3 + 16), *(_QWORD *)(v3 + 24), *(_BYTE *)(v3 + 32), *(uint64_t **)(v3 + 40), *(_QWORD *)(v3 + 48), *(_QWORD *)(v3 + 56), *(_QWORD *)(v3 + 64), *(_QWORD *)(v3 + 72), *(_QWORD *)(v3 + 80), *(_QWORD *)(v3 + 88), a2);
  *a3 = result;
  return result;
}

_QWORD *sub_1B1C78D04@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  _QWORD *(*v4)(uint64_t *__return_ptr, uint64_t *);
  _QWORD *result;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *(**)(uint64_t *__return_ptr, uint64_t *))(v2 + 16);
  v6 = *a1;
  result = v4(&v7, &v6);
  *a2 = v7;
  return result;
}

void sub_1B1C78D48(uint64_t a1)
{
  uint64_t v1;

  sub_1B1C721CC(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD **)(v1 + 16));
}

uint64_t sub_1B1C78D68()
{
  return swift_deallocObject();
}

uint64_t sub_1B1C78D78(_OWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_OWORD *);
  __int128 v3;
  _OWORD v5[3];

  v2 = *(uint64_t (**)(_OWORD *))(v1 + 16);
  v3 = a1[1];
  v5[0] = *a1;
  v5[1] = v3;
  v5[2] = a1[2];
  return v2(v5);
}

uint64_t sub_1B1C78DB8(uint64_t *a1)
{
  return sub_1B1C78DC4(a1, (void (*)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1C51AF4);
}

uint64_t sub_1B1C78DC4(uint64_t *a1, void (*a2)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v2;

  return sub_1B1C5BDDC(*a1, *(_BYTE *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_BYTE *)(v2 + 32), *(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 48), *(_QWORD *)(v2 + 56), *(_QWORD *)(v2 + 64), *(_QWORD *)(v2 + 72), *(_QWORD *)(v2 + 80), *(_QWORD *)(v2 + 88), a2);
}

uint64_t sub_1B1C78E0C(uint64_t *a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t *);
  uint64_t v4;

  v2 = *(uint64_t (**)(uint64_t *))(v1 + 16);
  v4 = *a1;
  return v2(&v4);
}

void sub_1B1C78E40()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED4BADB8)
  {
    sub_1B1A02758(255, &qword_1ED4B8EF0, (uint64_t)&type metadata for ComponentProperty, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    v0 = sub_1B2229A18();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED4BADB8);
  }
}

void sub_1B1C78EAC(uint64_t a1)
{
  sub_1B1791524(a1, &qword_1ED4BAFF8, (uint64_t (*)(uint64_t))sub_1B1C78EC8, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
}

void sub_1B1C78EC8(uint64_t a1)
{
  sub_1B1791524(a1, (unint64_t *)&unk_1ED4BB180, (uint64_t (*)(uint64_t))sub_1B1B9CCA4, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
}

void sub_1B1C78EE4(uint64_t a1)
{
  sub_1B1791524(a1, &qword_1ED4B7AA0, (uint64_t (*)(uint64_t))sub_1B1A0FCB4, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
}

void sub_1B1C78F00()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED4BAF48)
  {
    sub_1B1B9D790(255, &qword_1ED4BA5A0);
    v0 = sub_1B2229A18();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED4BAF48);
  }
}

void sub_1B1C78F68()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_1EEF5CD90)
  {
    sub_1B19F8E54(255, (unint64_t *)&unk_1EEF5CD98, (uint64_t (*)(void))sub_1B1C78FEC, (uint64_t)&type metadata for StringCodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _KeyBox);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1EEF5CD90);
  }
}

unint64_t sub_1B1C78FEC()
{
  unint64_t result;

  result = qword_1ED4B8EB0;
  if (!qword_1ED4B8EB0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B5B94, &type metadata for StringCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED4B8EB0);
  }
  return result;
}

void sub_1B1C79030()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5CDB0)
  {
    sub_1B1C798AC(255, (unint64_t *)&unk_1EEF5CDB8);
    v0 = sub_1B2229A18();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5CDB0);
  }
}

void sub_1B1C790A0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5CDD0)
  {
    sub_1B1C798AC(255, &qword_1EEF5CDD8);
    v0 = sub_1B2229A18();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5CDD0);
  }
}

void sub_1B1C79110(uint64_t a1)
{
  sub_1B1791524(a1, qword_1ED4B88F0, (uint64_t (*)(uint64_t))type metadata accessor for EntityManager, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for WeakReference);
}

void sub_1B1C7912C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED4BAE40)
  {
    sub_1B1B9D790(255, (unint64_t *)&unk_1ED4B9F68);
    v0 = sub_1B2229A18();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED4BAE40);
  }
}

void sub_1B1C79198()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5CDE0)
  {
    sub_1B1C19024(255, (unint64_t *)&unk_1EEF600C0, (void (*)(uint64_t))_s17CodeSourceSnippetCMa);
    v0 = sub_1B2229A18();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5CDE0);
  }
}

uint64_t sub_1B1C7920C()
{
  uint64_t v0;

  sub_1B1B28D2C(*(_QWORD *)(v0 + 16));
  return swift_deallocObject();
}

void sub_1B1C79230()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5C1F8)
  {
    sub_1B1A02758(255, (unint64_t *)&qword_1EEF5CE10, (uint64_t)&type metadata for AuthoringNode.Port, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    v0 = sub_1B2229A18();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5C1F8);
  }
}

void sub_1B1C7929C(uint64_t a1)
{
  sub_1B1791524(a1, (unint64_t *)&unk_1EEF5CE20, (uint64_t (*)(uint64_t))sub_1B1C6BD30, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
}

uint64_t sub_1B1C792B8()
{
  return swift_deallocObject();
}

uint64_t sub_1B1C792CC@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1B1C793BC(a1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *, uint64_t))sub_1B1C53420, a2);
}

void sub_1B1C792D8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5CE38)
  {
    sub_1B1B9D790(255, (unint64_t *)&qword_1EEF5CE40);
    v0 = sub_1B2229A18();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5CE38);
  }
}

uint64_t sub_1B1C79344()
{
  return swift_deallocObject();
}

uint64_t sub_1B1C79358@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_1B1C5BF24(*a1, *(_BYTE *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_BYTE *)(v2 + 32), *(uint64_t **)(v2 + 40), *(_QWORD *)(v2 + 56), *(_QWORD *)(v2 + 64), a2, *(_QWORD *)(v2 + 72), *(_QWORD *)(v2 + 80), *(_QWORD *)(v2 + 88));
}

uint64_t sub_1B1C7939C()
{
  return swift_deallocObject();
}

uint64_t sub_1B1C793B0@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1B1C793BC(a1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *, uint64_t))sub_1B1C52908, a2);
}

uint64_t sub_1B1C793BC@<X0>(uint64_t *a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *, uint64_t)@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t result;

  result = sub_1B1C5C0B8(*a1, *(_BYTE *)(v3 + 16), *(_QWORD *)(v3 + 24), *(_BYTE *)(v3 + 32), *(uint64_t **)(v3 + 40), *(_QWORD *)(v3 + 48), *(_QWORD *)(v3 + 56), *(_QWORD *)(v3 + 64), *(_QWORD *)(v3 + 72), *(_QWORD *)(v3 + 80), *(_QWORD *)(v3 + 88), a2);
  *a3 = result;
  return result;
}

void sub_1B1C79414(uint64_t a1, unint64_t *a2, unint64_t *a3, unint64_t *a4)
{
  unint64_t v5;
  uint64_t v6;

  if (!*a2)
  {
    sub_1B1B9CF68(255, a3, a4);
    v5 = sub_1B2229A18();
    if (!v6)
      atomic_store(v5, a2);
  }
}

uint64_t sub_1B1C79470(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2 != 1)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t sub_1B1C79484()
{
  return swift_deallocObject();
}

double sub_1B1C79494@<D0>(_OWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;

  return sub_1B1C6C028(a1, *(void (**)(__int128 *__return_ptr, _OWORD *))(v2 + 16), a2);
}

uint64_t sub_1B1C794B0@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;

  result = sub_1B1C5C3C8(*a1, *(_BYTE *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_BYTE *)(v2 + 32), *(uint64_t **)(v2 + 40), *(_QWORD *)(v2 + 48), *(_QWORD *)(v2 + 56), *(_QWORD *)(v2 + 64), *(_QWORD *)(v2 + 72), *(_QWORD *)(v2 + 80), *(_QWORD *)(v2 + 88));
  *a2 = result;
  a2[1] = v5;
  return result;
}

double sub_1B1C79504@<D0>(uint64_t *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  void (*v4)(__int128 *__return_ptr, uint64_t *);
  double result;
  uint64_t v6;
  __int128 v7;

  v4 = *(void (**)(__int128 *__return_ptr, uint64_t *))(v2 + 16);
  v6 = *a1;
  v4(&v7, &v6);
  result = *(double *)&v7;
  *a2 = v7;
  return result;
}

uint64_t sub_1B1C79548@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1B1C61234(a1, a2);
}

uint64_t sub_1B1C79560(uint64_t a1)
{
  unsigned int v1;

  v1 = *(unsigned __int8 *)(a1 + 136);
  if (v1 > 1)
    return (v1 ^ 0xFF) + 1;
  else
    return 0;
}

_OWORD *sub_1B1C79574(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  *a2 = *a1;
  v2 = a1[1];
  v3 = a1[2];
  v4 = a1[4];
  a2[3] = a1[3];
  a2[4] = v4;
  a2[1] = v2;
  a2[2] = v3;
  v5 = a1[5];
  v6 = a1[6];
  v7 = a1[7];
  *(_OWORD *)((char *)a2 + 121) = *(_OWORD *)((char *)a1 + 121);
  a2[6] = v6;
  a2[7] = v7;
  a2[5] = v5;
  return a2;
}

uint64_t sub_1B1C795AC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 136);
}

double sub_1B1C795B4(uint64_t a1)
{
  double result;

  *(_BYTE *)(a1 + 144) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  return result;
}

void sub_1B1C795D4()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_1EEF60160)
  {
    type metadata accessor for Node();
    sub_1B1A02758(255, &qword_1EEF61660, (uint64_t)&type metadata for GraphTranslateResult, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1EEF60160);
  }
}

uint64_t sub_1B1C79658(uint64_t a1)
{
  swift_retain();
  return a1;
}

uint64_t sub_1B1C79680()
{
  return swift_deallocObject();
}

uint64_t sub_1B1C79694@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1C5C210(*a1, *(_BYTE *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_BYTE *)(v2 + 32), *(uint64_t **)(v2 + 40), *(_QWORD *)(v2 + 56), *(_QWORD *)(v2 + 64), a2, *(_QWORD *)(v2 + 72), *(_QWORD *)(v2 + 80), *(_QWORD *)(v2 + 88));
}

uint64_t sub_1B1C796D8(uint64_t a1)
{
  swift_release();
  return a1;
}

uint64_t sub_1B1C79700()
{
  return sub_1B1C797F8((void (*)(_QWORD))MEMORY[0x1E0DEEE30]);
}

uint64_t sub_1B1C7970C()
{
  uint64_t v0;

  return sub_1B1C60A98(*(_QWORD *)(v0 + 16));
}

uint64_t sub_1B1C79714(uint64_t result)
{
  *(_BYTE *)(result + 136) = 0;
  return result;
}

uint64_t sub_1B1C7971C()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1B1C79740()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1B1C79764(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1B1C609C4(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
}

double sub_1B1C7976C(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 128) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_BYTE *)(a1 + 136) = -1;
  return result;
}

uint64_t sub_1B1C79790(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_1B1C797DC()
{
  return swift_deallocObject();
}

uint64_t sub_1B1C797EC()
{
  return sub_1B1C797F8((void (*)(_QWORD))MEMORY[0x1E0DEEB08]);
}

uint64_t sub_1B1C797F8(void (*a1)(_QWORD))
{
  uint64_t v1;

  a1(*(_QWORD *)(v1 + 16));
  a1(*(_QWORD *)(v1 + 24));
  return swift_deallocObject();
}

void sub_1B1C79830(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v4;

  sub_1B1C607B8(a1, a2, a3, a4, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24));
}

void sub_1B1C79838()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5CEE0)
  {
    sub_1B1C798AC(255, (unint64_t *)&unk_1EEF5CEE8);
    v0 = sub_1B2229124();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5CEE0);
  }
}

void sub_1B1C798AC(uint64_t a1, unint64_t *a2)
{
  unint64_t TupleTypeMetadata2;
  uint64_t v4;

  if (!*a2)
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v4)
      atomic_store(TupleTypeMetadata2, a2);
  }
}

uint64_t sub_1B1C798FC(uint64_t a1)
{
  swift_release();
  return a1;
}

uint64_t sub_1B1C79924()
{
  uint64_t v0;

  sub_1B1B28D2C(*(_QWORD *)(v0 + 24));
  return swift_deallocObject();
}

uint64_t sub_1B1C79948()
{
  return swift_deallocObject();
}

__n128 sub_1B1C79958(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _OWORD *v5;
  __n128 result;
  __n128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;

  v4 = *(_QWORD *)(v3 + 16);
  v10 = *(_OWORD *)(v3 + 32);
  v8 = *(_OWORD *)(v3 + 64);
  v9 = *(_OWORD *)(v3 + 48);
  v7 = *(__n128 *)(v3 + 80);
  v5 = (_OWORD *)(RGBufferSlice.data.getter(a1, a2, a3) + v4);
  *v5 = v10;
  v5[1] = v9;
  result = v7;
  v5[2] = v8;
  v5[3] = v7;
  return result;
}

uint64_t sub_1B1C799B8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1B1C799E0()
{
  return swift_deallocObject();
}

__n128 sub_1B1C799F0(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _OWORD *v5;
  __n128 result;
  __n128 v7;
  __int128 v8;
  __int128 v9;

  v4 = *(_QWORD *)(v3 + 16);
  v8 = *(_OWORD *)(v3 + 48);
  v9 = *(_OWORD *)(v3 + 32);
  v7 = *(__n128 *)(v3 + 64);
  v5 = (_OWORD *)(RGBufferSlice.data.getter(a1, a2, a3) + v4);
  *v5 = v9;
  v5[1] = v8;
  result = v7;
  v5[2] = v7;
  return result;
}

uint64_t sub_1B1C79A44()
{
  return swift_deallocObject();
}

uint64_t sub_1B1C79A54(void *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  _QWORD *v8;

  v4 = v3[2];
  v5 = v3[4];
  v6 = v3[5];
  result = RGBufferSlice.data.getter(a1, a2, a3);
  v8 = (_QWORD *)(result + v4);
  *v8 = v5;
  v8[1] = v6;
  return result;
}

uint64_t sub_1B1C79A88()
{
  return swift_deallocObject();
}

uint64_t sub_1B1C79A9C()
{
  return swift_deallocObject();
}

__n128 sub_1B1C79AAC(void *a1, uint64_t a2, uint64_t a3)
{
  __n128 *v3;
  unint64_t v4;
  uint64_t v5;
  __n128 result;
  __n128 v7;

  v4 = v3[1].n128_u64[0];
  v7 = v3[2];
  v5 = RGBufferSlice.data.getter(a1, a2, a3);
  result = v7;
  *(__n128 *)(v5 + v4) = v7;
  return result;
}

uint64_t sub_1B1C79AE4()
{
  return swift_deallocObject();
}

uint64_t sub_1B1C79AF4(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v4 = *(_QWORD *)(v3 + 16);
  v5 = *(_QWORD *)(v3 + 32);
  result = RGBufferSlice.data.getter(a1, a2, a3);
  *(_QWORD *)(result + v4) = v5;
  return result;
}

uint64_t sub_1B1C79B24()
{
  return swift_deallocObject();
}

uint64_t sub_1B1C79B34(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t result;

  v4 = *(_QWORD *)(v3 + 16);
  v5 = *(_DWORD *)(v3 + 32);
  result = RGBufferSlice.data.getter(a1, a2, a3);
  *(_DWORD *)(result + v4) = v5;
  return result;
}

uint64_t sub_1B1C79B64()
{
  return swift_deallocObject();
}

uint64_t sub_1B1C79B74(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v4 = *(_QWORD *)(v3 + 16);
  v5 = *(_QWORD *)(v3 + 32);
  result = RGBufferSlice.data.getter(a1, a2, a3);
  *(_QWORD *)(result + v4) = v5;
  return result;
}

uint64_t sub_1B1C79B9C()
{
  return swift_deallocObject();
}

uint64_t sub_1B1C79BB0()
{
  return swift_deallocObject();
}

uint64_t sub_1B1C79BC0(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t result;

  v4 = *(_QWORD *)(v3 + 16);
  v5 = *(_DWORD *)(v3 + 32);
  result = RGBufferSlice.data.getter(a1, a2, a3);
  *(_DWORD *)(result + v4) = v5;
  return result;
}

uint64_t sub_1B1C79BE8()
{
  return swift_deallocObject();
}

uint64_t sub_1B1C79BF8(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t result;

  v4 = *(_QWORD *)(v3 + 16);
  v5 = *(_BYTE *)(v3 + 32);
  result = RGBufferSlice.data.getter(a1, a2, a3);
  *(_BYTE *)(result + v4) = v5;
  return result;
}

unint64_t sub_1B1C79C20()
{
  unint64_t result;

  result = qword_1EEF5CF00;
  if (!qword_1EEF5CF00)
  {
    result = swift_getFunctionTypeMetadata1();
    atomic_store(result, (unint64_t *)&qword_1EEF5CF00);
  }
  return result;
}

uint64_t sub_1B1C79C6C()
{
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

void sub_1B1C79C98(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!qword_1EEF5CF08)
  {
    sub_1B1A02758(255, &qword_1ED4B97E0, (uint64_t)&type metadata for CachedLocationMapping, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    v5 = type metadata accessor for RGGraphTranslator.Reference(a1, v2, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_1EEF5CF08);
  }
}

uint64_t sub_1B1C79D10()
{
  uint64_t v0;

  swift_release();
  swift_release();
  sub_1B1A05610(*(_QWORD *)(v0 + 32));
  return swift_deallocObject();
}

uint64_t sub_1B1C79D44(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;

  LOBYTE(v5) = *(_BYTE *)(v3 + 56);
  return sub_1B1C6034C(a1, a2, a3, *(_QWORD *)(v3 + 16), *(uint64_t **)(v3 + 24), *(_QWORD *)(v3 + 32), *(unsigned __int8 *)(v3 + 40), *(_QWORD *)(v3 + 48), v5, *(_QWORD *)(v3 + 64), *(_QWORD *)(v3 + 72));
}

uint64_t sub_1B1C79D80()
{
  return swift_deallocObject();
}

uint64_t sub_1B1C79D90(_QWORD *a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v1 + 16))(*a1, a1[1], a1[2]);
}

void sub_1B1C79DBC(uint64_t a1, unint64_t *a2, unint64_t *a3, void (*a4)(uint64_t))
{
  unint64_t v5;
  uint64_t v6;

  if (!*a2)
  {
    sub_1B1B9D98C(255, a3, a4);
    v5 = sub_1B2229A18();
    if (!v6)
      atomic_store(v5, a2);
  }
}

uint64_t sub_1B1C79E10(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  return sub_1B1C5EBE4(a1, a2, *a3, *(uint64_t **)(v3 + 16));
}

uint64_t sub_1B1C79E1C()
{
  return swift_deallocObject();
}

uint64_t sub_1B1C79E30@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1B1C793BC(a1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *, uint64_t))sub_1B1C51F64, a2);
}

void sub_1B1C79E3C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED4BAD70)
  {
    sub_1B1B9CF68(255, (unint64_t *)&qword_1ED4B8C68, &qword_1ED4B8C60);
    v0 = sub_1B2229A18();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED4BAD70);
  }
}

uint64_t sub_1B1C79EAC(_OWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_OWORD *);
  __int128 v3;
  _OWORD v5[3];

  v2 = *(uint64_t (**)(_OWORD *))(v1 + 16);
  v3 = a1[1];
  v5[0] = *a1;
  v5[1] = v3;
  v5[2] = a1[2];
  return v2(v5);
}

uint64_t sub_1B1C79EE8(_QWORD *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  return sub_1B1C5EE04(a1, a2, *a3, *(uint64_t **)(v3 + 16));
}

uint64_t sub_1B1C79EF4()
{
  return swift_deallocObject();
}

uint64_t sub_1B1C79F08@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1B1C793BC(a1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *, uint64_t))sub_1B1C53924, a2);
}

void sub_1B1C79F14()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5CF50)
  {
    sub_1B1B9D790(255, (unint64_t *)&qword_1EEF5CF58);
    v0 = sub_1B2229A18();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5CF50);
  }
}

uint64_t getEnumTagSinglePayload for RGGraphTranslator.LoadResourceInfo(uint64_t a1, int a2)
{
  int v3;

  if (!a2)
    return 0;
  if (a2 != 1 && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 2);
  if (*(_QWORD *)(a1 + 8))
    v3 = -1;
  else
    v3 = 0;
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for RGGraphTranslator.LoadResourceInfo(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 1)
  {
    *(_QWORD *)result = a2 - 2;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 2)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 2)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for RGGraphTranslator.LoadResourceInfo()
{
  return &type metadata for RGGraphTranslator.LoadResourceInfo;
}

__n128 initializeWithCopy for GraphTranslateResult(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v2 = *(_OWORD *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  result = *(__n128 *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 121) = *(_OWORD *)(a2 + 121);
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 80) = result;
  return result;
}

uint64_t getEnumTagSinglePayload for GraphTranslateResult(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 137))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 136);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for GraphTranslateResult(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 136) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 137) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 137) = 0;
    if (a2)
      *(_BYTE *)(result + 136) = -(char)a2;
  }
  return result;
}

uint64_t sub_1B1C7A0F0(uint64_t result, char a2)
{
  *(_BYTE *)(result + 136) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for GraphTranslateResult()
{
  return &type metadata for GraphTranslateResult;
}

void sub_1B1C7A10C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5CF68)
  {
    sub_1B1A02758(255, &qword_1EEF5CF70, (uint64_t)&type metadata for AuthoringNodeCoder, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    v0 = sub_1B2229A18();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5CF68);
  }
}

uint64_t sub_1B1C7A178()
{
  return swift_deallocObject();
}

uint64_t sub_1B1C7A18C@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1B1C793BC(a1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *, uint64_t))sub_1B1C54A14, a2);
}

uint64_t sub_1B1C7A19C@<X0>(char *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1B1C60998(a1, a2);
}

void sub_1B1C7A1B0(uint64_t a1)
{
  sub_1B1C78D48(a1);
}

_QWORD *sub_1B1C7A208@<X0>(_OWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1B1C78C84(a1, a2);
}

float32x2_t *sub_1B1C7A228(void *a1, void *a2)
{
  uint64_t v2;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  id v19;
  unint64_t v20;
  uint64_t v21;
  id v22;
  id v23;
  id v24;
  double v25;
  double v26;
  float64x2_t v27;
  double v28;
  double v29;
  float64x2_t v30;
  uint64_t v31;
  void *v33;
  void *v34;
  float32x2_t *v35;
  void *v36;
  float64_t v37;
  CGFloat v38;
  uint64_t v39;
  float64_t v40;
  CGFloat v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  void *v47;
  CGPoint v48;
  CGRect v49;

  *(_WORD *)(v2 + 16) = 265;
  *(_OWORD *)(v2 + 24) = 0u;
  *(_OWORD *)(v2 + 40) = 0u;
  *(_OWORD *)(v2 + 49) = 0u;
  *(_QWORD *)(v2 + 136) = 0;
  *(_QWORD *)(v2 + 72) = -1;
  *(_QWORD *)(v2 + 80) = 0;
  *(_QWORD *)(v2 + 88) = 0;
  *(_QWORD *)(v2 + 96) = 0;
  *(_WORD *)(v2 + 104) = 0;
  *(_QWORD *)(v2 + 112) = 0;
  *(_QWORD *)(v2 + 120) = 0;
  *(_BYTE *)(v2 + 128) = 0;
  v5 = objc_msgSend(a1, sel_touchesForView_, a2);
  v33 = a1;
  v34 = a2;
  if (v5)
  {
    v6 = v5;
    sub_1B1C7AF6C();
    sub_1B1C7AFA8();
    v7 = sub_1B2228CBC();

  }
  else if ((MEMORY[0x1E0DEE9D8] & 0xC000000000000000) != 0 && sub_1B22296AC())
  {
    v7 = sub_1B1EF1FEC(MEMORY[0x1E0DEE9D8]);
  }
  else
  {
    v7 = MEMORY[0x1E0DEE9E8];
  }
  v35 = (float32x2_t *)v2;
  if ((v7 & 0xC000000000000001) != 0)
  {
    *(_QWORD *)(v2 + 136) = sub_1B22293AC();
    sub_1B22293A0();
    sub_1B1C7AF6C();
    sub_1B1C7AFA8();
    sub_1B2228CE0();
    v7 = v42;
    v39 = v43;
    v8 = v44;
    v9 = v45;
    v10 = v46;
  }
  else
  {
    v9 = 0;
    *(_QWORD *)(v2 + 136) = *(_QWORD *)(v7 + 16);
    v11 = -1 << *(_BYTE *)(v7 + 32);
    v39 = v7 + 56;
    v8 = ~v11;
    v12 = -v11;
    if (v12 < 64)
      v13 = ~(-1 << v12);
    else
      v13 = -1;
    v10 = v13 & *(_QWORD *)(v7 + 56);
  }
  v36 = 0;
  v14 = (unint64_t)(v8 + 64) >> 6;
  LOBYTE(v15) = 9;
  while (1)
  {
    v16 = v9;
    if ((v7 & 0x8000000000000000) == 0)
      break;
    if (!sub_1B22293B8())
      goto LABEL_35;
    sub_1B1C7AF6C();
    swift_unknownObjectRetain();
    swift_dynamicCast();
    v19 = v47;
    swift_unknownObjectRelease();
    if (!v47)
      goto LABEL_35;
LABEL_32:
    v22 = objc_msgSend(v19, sel_phase);
    if ((unint64_t)v22 < 5)
    {
      v15 = 0x202010100uLL >> (8 * v22);

      v36 = v19;
    }
    else
    {

      LOBYTE(v15) = 9;
    }
  }
  if (v10)
  {
    v17 = __clz(__rbit64(v10));
    v10 &= v10 - 1;
    v18 = v17 | (v9 << 6);
    goto LABEL_31;
  }
  ++v9;
  if (v16 + 1 >= v14)
    goto LABEL_35;
  v20 = *(_QWORD *)(v39 + 8 * v9);
  if (v20)
    goto LABEL_30;
  v9 = v16 + 2;
  if (v16 + 2 >= v14)
    goto LABEL_35;
  v20 = *(_QWORD *)(v39 + 8 * v9);
  if (v20)
    goto LABEL_30;
  v9 = v16 + 3;
  if (v16 + 3 >= v14)
    goto LABEL_35;
  v20 = *(_QWORD *)(v39 + 8 * v9);
  if (v20)
    goto LABEL_30;
  v9 = v16 + 4;
  if (v16 + 4 >= v14)
    goto LABEL_35;
  v20 = *(_QWORD *)(v39 + 8 * v9);
  if (v20)
  {
LABEL_30:
    v10 = (v20 - 1) & v20;
    v18 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_31:
    v19 = *(id *)(*(_QWORD *)(v7 + 48) + 8 * v18);
    if (!v19)
      goto LABEL_35;
    goto LABEL_32;
  }
  v21 = v16 + 5;
  while (v14 != v21)
  {
    v20 = *(_QWORD *)(v39 + 8 * v21++);
    if (v20)
    {
      v9 = v21 - 1;
      goto LABEL_30;
    }
  }
LABEL_35:
  sub_1B19F8D30();
  *(_BYTE *)(v2 + 16) = v15;
  if (v36)
  {
    v23 = v36;
    v24 = objc_msgSend(v34, sel_window);
    objc_msgSend(v23, sel_locationInView_, v24);
    v37 = v26;
    v40 = v25;

    v27.f64[0] = v40;
    v27.f64[1] = v37;
    v35[6] = vcvt_f32_f64(v27);
    objc_msgSend(v23, sel_locationInView_, v34);
    v38 = v29;
    v41 = v28;
    objc_msgSend(v34, sel_bounds);
    v48.y = v38;
    v48.x = v41;
    v35[8].i8[0] = CGRectContainsPoint(v49, v48);

    v30.f64[0] = v41;
    v30.f64[1] = v38;
    v35[7] = vcvt_f32_f64(v30);
  }
  sub_1B222A0CC();
  sub_1B222A078();
  v31 = sub_1B222A0B4();

  v35[5] = (float32x2_t)v31;
  return v35;
}

uint64_t sub_1B1C7A684()
{
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for InputEvent()
{
  return objc_opt_self();
}

void sub_1B1C7A6C8(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)a1 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(a1 + 8) = -1;
  *(_QWORD *)(a1 + 16) = 0;
  v1 = MEMORY[0x1E0DEE9E8];
  *(_QWORD *)(a1 + 24) = MEMORY[0x1E0DEE9E8];
  *(_QWORD *)(a1 + 32) = v1;
  *(_WORD *)(a1 + 40) = 0;
}

uint64_t sub_1B1C7A6F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  char v6;

  v4 = swift_retain();
  MEMORY[0x1B5E2064C](v4);
  if (*(_QWORD *)((*(_QWORD *)a1 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*(_QWORD *)a1 & 0xFFFFFFFFFFFFFF8)
                                                                              + 0x18) >> 1)
    sub_1B2228AF4();
  sub_1B2228B30();
  result = sub_1B2228AD0();
  if (*(_BYTE *)(a2 + 16))
  {
    if (*(_BYTE *)(a2 + 16) != 2)
      return result;
    v6 = 0;
  }
  else
  {
    v6 = 1;
  }
  *(_BYTE *)(a1 + 40) = v6;
  return result;
}

uint64_t sub_1B1C7A788(unint64_t *a1)
{
  unint64_t v2;
  char isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v4;
  uint64_t v6;
  unint64_t v7;

  if (*(_QWORD *)(a1[4] + 16))
  {
    swift_isUniquelyReferenced_nonNull_native();
    v7 = a1[4];
    a1[4] = 0x8000000000000000;
    sub_1B1C7AF10();
    sub_1B2229388();
    a1[4] = v7;
    swift_bridgeObjectRelease();
  }
  v2 = *a1;
  if ((*a1 & 0x8000000000000000) != 0
    || (v2 & 0x4000000000000000) != 0
    || (isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(),
        v2 = *a1,
        (isUniquelyReferenced_nonNull_bridgeObject & 1) == 0))
  {
    if (v2 >> 62)
    {
      swift_bridgeObjectRetain();
      v6 = sub_1B22296AC();
      sub_1B22296AC();
      sub_1B22296AC();
      swift_bridgeObjectRelease();
    }
    else
    {
      v6 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x18) >> 1;
    }
    *a1 = (unint64_t)sub_1B1B1C804(0, v6);
    return swift_bridgeObjectRelease();
  }
  else
  {
    if (v2 >> 62)
    {
      swift_bridgeObjectRetain();
      v4 = sub_1B22296AC();
      swift_bridgeObjectRelease();
    }
    else
    {
      v4 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    return sub_1B1C93CFC(0, v4);
  }
}

uint64_t sub_1B1C7A8E0()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for InputClearSystem()
{
  return objc_opt_self();
}

ValueMetadata *type metadata accessor for Modifiers()
{
  return &type metadata for Modifiers;
}

ValueMetadata *type metadata accessor for InputEvent.Phase()
{
  return &type metadata for InputEvent.Phase;
}

uint64_t storeEnumTagSinglePayload for InputEvent.State(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1B1C7A97C + 4 * byte_1B2286575[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1B1C7A9B0 + 4 * asc_1B2286570[v4]))();
}

uint64_t sub_1B1C7A9B0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1C7A9B8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B1C7A9C0);
  return result;
}

uint64_t sub_1B1C7A9CC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B1C7A9D4);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1B1C7A9D8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1C7A9E0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for InputEvent.State()
{
  return &type metadata for InputEvent.State;
}

uint64_t getEnumTagSinglePayload for InputEvent.EventType(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF7)
    goto LABEL_17;
  if (a2 + 9 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 9) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 9;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 9;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 9;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xA;
  v8 = v6 - 10;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for InputEvent.EventType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 9 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 9) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF7)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF6)
    return ((uint64_t (*)(void))((char *)&loc_1B1C7AAD8 + 4 * byte_1B228657F[v4]))();
  *a1 = a2 + 9;
  return ((uint64_t (*)(void))((char *)sub_1B1C7AB0C + 4 * byte_1B228657A[v4]))();
}

uint64_t sub_1B1C7AB0C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1C7AB14(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B1C7AB1CLL);
  return result;
}

uint64_t sub_1B1C7AB28(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B1C7AB30);
  *(_BYTE *)result = a2 + 9;
  return result;
}

uint64_t sub_1B1C7AB34(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1C7AB3C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for InputEvent.EventType()
{
  return &type metadata for InputEvent.EventType;
}

unint64_t sub_1B1C7AB5C()
{
  unint64_t result;

  result = qword_1EEF5CF90;
  if (!qword_1EEF5CF90)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2286694, &type metadata for InputEvent.EventType);
    atomic_store(result, (unint64_t *)&qword_1EEF5CF90);
  }
  return result;
}

unint64_t sub_1B1C7ABA4()
{
  unint64_t result;

  result = qword_1EEF5CF98;
  if (!qword_1EEF5CF98)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22866FC, &type metadata for InputEvent.State);
    atomic_store(result, (unint64_t *)&qword_1EEF5CF98);
  }
  return result;
}

unint64_t sub_1B1C7ABEC()
{
  unint64_t result;

  result = qword_1EEF5CFA0;
  if (!qword_1EEF5CFA0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2286754, &type metadata for InputEvent.Phase);
    atomic_store(result, (unint64_t *)&qword_1EEF5CFA0);
  }
  return result;
}

unint64_t sub_1B1C7AC34()
{
  unint64_t result;

  result = qword_1EEF5CFA8;
  if (!qword_1EEF5CFA8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2286724, &type metadata for InputEvent.Phase);
    atomic_store(result, (unint64_t *)&qword_1EEF5CFA8);
  }
  return result;
}

unint64_t sub_1B1C7AC7C()
{
  unint64_t result;

  result = qword_1EEF5CFB0;
  if (!qword_1EEF5CFB0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B228677C, &type metadata for InputEvent.Phase);
    atomic_store(result, (unint64_t *)&qword_1EEF5CFB0);
  }
  return result;
}

unint64_t sub_1B1C7ACC4()
{
  unint64_t result;

  result = qword_1EEF5CFB8;
  if (!qword_1EEF5CFB8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22867B4, &type metadata for InputEvent.Phase);
    atomic_store(result, (unint64_t *)&qword_1EEF5CFB8);
  }
  return result;
}

unint64_t sub_1B1C7AD0C()
{
  unint64_t result;

  result = qword_1EEF5CFC0;
  if (!qword_1EEF5CFC0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22868E4, &type metadata for Modifiers);
    atomic_store(result, (unint64_t *)&qword_1EEF5CFC0);
  }
  return result;
}

unint64_t sub_1B1C7AD54()
{
  unint64_t result;

  result = qword_1EEF5CFC8;
  if (!qword_1EEF5CFC8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22868B4, &type metadata for Modifiers);
    atomic_store(result, (unint64_t *)&qword_1EEF5CFC8);
  }
  return result;
}

unint64_t sub_1B1C7AD9C()
{
  unint64_t result;

  result = qword_1EEF5CFD0;
  if (!qword_1EEF5CFD0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B228690C, &type metadata for Modifiers);
    atomic_store(result, (unint64_t *)&qword_1EEF5CFD0);
  }
  return result;
}

unint64_t sub_1B1C7ADE4()
{
  unint64_t result;

  result = qword_1EEF5CFD8;
  if (!qword_1EEF5CFD8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2286944, &type metadata for Modifiers);
    atomic_store(result, (unint64_t *)&qword_1EEF5CFD8);
  }
  return result;
}

uint64_t sub_1B1C7AE28(uint64_t a1)
{
  _QWORD *v1;

  v1 = *(_QWORD **)(a1 + 176);
  swift_retain();
  sub_1B1F2268C((uint64_t)&type metadata for InputStream, (uint64_t)&off_1E6370C40, v1);
  return swift_release();
}

uint64_t sub_1B1C7AE7C()
{
  uint64_t result;

  result = swift_allocObject();
  *(_QWORD *)(result + 16) = qword_1EEF5DE70;
  return result;
}

const char *sub_1B1C7AEA8()
{
  return "InputClearSystem";
}

uint64_t sub_1B1C7AEBC(uint64_t a1)
{
  _QWORD *v1;

  v1 = *(_QWORD **)(a1 + 176);
  swift_retain();
  sub_1B1F22258((uint64_t)&type metadata for InputStream, (uint64_t)&off_1E6370C40, v1);
  return swift_release();
}

void sub_1B1C7AF10()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5CFE0)
  {
    v0 = sub_1B2229394();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5CFE0);
  }
}

unint64_t sub_1B1C7AF6C()
{
  unint64_t result;

  result = qword_1EEF5F630;
  if (!qword_1EEF5F630)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EEF5F630);
  }
  return result;
}

unint64_t sub_1B1C7AFA8()
{
  unint64_t result;
  unint64_t v1;

  result = qword_1EEF5CFE8;
  if (!qword_1EEF5CFE8)
  {
    v1 = sub_1B1C7AF6C();
    result = MEMORY[0x1B5E23E74](MEMORY[0x1E0DEFCF8], v1);
    atomic_store(result, (unint64_t *)&qword_1EEF5CFE8);
  }
  return result;
}

uint64_t destroy for InputStream()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for InputStream(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v3 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v3;
  *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for InputStream(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_BYTE *)(a1 + 41) = *(_BYTE *)(a2 + 41);
  return a1;
}

__n128 initializeWithTake for InputStream(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 26) = *(_OWORD *)(a2 + 26);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for InputStream(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_BYTE *)(a1 + 41) = *(_BYTE *)(a2 + 41);
  return a1;
}

uint64_t getEnumTagSinglePayload for InputStream(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 42))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for InputStream(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 40) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 42) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 42) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for InputStream()
{
  return &type metadata for InputStream;
}

uint64_t destroy for FunctionConstant.Key(uint64_t a1)
{
  return sub_1B1B40E74(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t initializeWithCopy for FunctionConstant(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  __int128 v7;
  __int128 v8;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_BYTE *)(a2 + 16);
  sub_1B1B40E34(*(_QWORD *)a2, v5, v6);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = v6;
  v7 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v7;
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  v8 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v8;
  return a1;
}

uint64_t assignWithCopy for FunctionConstant(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_BYTE *)(a2 + 16);
  sub_1B1B40E34(*(_QWORD *)a2, v5, v6);
  v7 = *(_QWORD *)a1;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_BYTE *)(a1 + 16);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = v6;
  sub_1B1B40E74(v7, v8, v9);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  v10 = *(_OWORD *)(a2 + 48);
  v11 = *(_OWORD *)(a2 + 64);
  v12 = *(_OWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(_OWORD *)(a1 + 64) = v11;
  *(_OWORD *)(a1 + 80) = v12;
  *(_OWORD *)(a1 + 48) = v10;
  return a1;
}

__n128 initializeWithTake for FunctionConstant(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;
  __int128 v5;
  __int128 v6;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  result = (__n128)a2[3];
  v5 = a2[4];
  v6 = a2[5];
  *(_BYTE *)(a1 + 96) = *((_BYTE *)a2 + 96);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t assignWithTake for FunctionConstant(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  __int128 v8;
  __int128 v9;

  v4 = *(_BYTE *)(a2 + 16);
  v5 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_BYTE *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v4;
  sub_1B1B40E74(v5, v6, v7);
  v8 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v8;
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  v9 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v9;
  return a1;
}

uint64_t getEnumTagSinglePayload for FunctionConstant(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 97))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for FunctionConstant(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 96) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 97) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 97) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for FunctionConstant()
{
  return &type metadata for FunctionConstant;
}

uint64_t sub_1B1C7B470(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t result;
  char v7;

  if ((a6 & 1) == 0)
  {
    if ((a3 & 1) == 0)
      return a4 < a1;
    return (a6 & 1u) < (a3 & 1u);
  }
  if ((a3 & 1) == 0)
    return (a6 & 1u) < (a3 & 1u);
  if (a4 == a1 && a5 == a2)
    return 0;
  v7 = sub_1B2229D24();
  result = 0;
  if ((v7 & 1) == 0)
    return sub_1B2229D24();
  return result;
}

uint64_t sub_1B1C7B528(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  char v8;
  _BYTE v10[80];

  if (!a1)
    return 16718;
  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
    return 0;
  swift_bridgeObjectRetain_n();
  v3 = 0;
  v4 = a1 + 64;
  do
  {
    v5 = *(_QWORD *)(v4 - 32);
    v6 = *(_QWORD *)(v4 - 24);
    v7 = *(unsigned __int8 *)(v4 - 16);
    sub_1B1B2A86C(v4, (uint64_t)v10);
    swift_bridgeObjectRetain();
    sub_1B1B40E34(v5, v6, v7);
    sub_1B2228890();
    if (v7 == 1)
      goto LABEL_4;
    if (qword_1ED4B7930 != -1)
      swift_once();
    if (*((_QWORD *)off_1ED4B9B08 + 2) && (sub_1B1DC3AC8(v5), (v8 & 1) != 0))
LABEL_4:
      swift_bridgeObjectRetain();
    else
      sub_1B2229A0C();
    v4 += 112;
    sub_1B2228890();
    sub_1B1B292F0();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1B1B40E74(v5, v6, v7);
    swift_bridgeObjectRelease();
    --v2;
  }
  while (v2);
  swift_bridgeObjectRelease_n();
  return v3;
}

BOOL sub_1B1C7B72C(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6)
{
  char v6;
  char v8;

  if ((a6 & 1) == 0)
  {
    if ((a3 & 1) == 0)
    {
      v6 = a4 < a1;
      return (v6 & 1) == 0;
    }
LABEL_5:
    v6 = (a6 & 1u) < (a3 & 1u);
    return (v6 & 1) == 0;
  }
  if ((a3 & 1) == 0)
    goto LABEL_5;
  if (a4 == a1 && a5 == a2)
  {
    v6 = 0;
  }
  else
  {
    v8 = sub_1B2229D24();
    v6 = 0;
    if ((v8 & 1) == 0)
      v6 = sub_1B2229D24();
  }
  return (v6 & 1) == 0;
}

BOOL sub_1B1C7B7E4(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6)
{
  char v6;
  char v8;

  if ((a3 & 1) == 0)
  {
    if ((a6 & 1) == 0)
    {
      v6 = a1 < a4;
      return (v6 & 1) == 0;
    }
LABEL_5:
    v6 = (a3 & 1u) < (a6 & 1u);
    return (v6 & 1) == 0;
  }
  if ((a6 & 1) == 0)
    goto LABEL_5;
  if (a1 == a4 && a2 == a5)
  {
    v6 = 0;
  }
  else
  {
    v8 = sub_1B2229D24();
    v6 = 0;
    if ((v8 & 1) == 0)
      v6 = sub_1B2229D24();
  }
  return (v6 & 1) == 0;
}

uint64_t sub_1B1C7B89C(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v4;
  unint64_t v5;
  char v6;

  if ((a3 & 1) == 0)
  {
    if (qword_1ED4B7930 != -1)
      swift_once();
    v4 = off_1ED4B9B08;
    if (!*((_QWORD *)off_1ED4B9B08 + 2))
      return 0;
    v5 = sub_1B1DC3AC8(a1);
    if ((v6 & 1) == 0)
      return 0;
    a1 = *(_QWORD *)(v4[7] + 16 * v5);
  }
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1B1C7B930(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v4;
  unint64_t v5;
  char v6;

  if ((a3 & 1) == 0)
  {
    if (qword_1ED4B7930 != -1)
      swift_once();
    v4 = off_1ED4B9B08;
    if (!*((_QWORD *)off_1ED4B9B08 + 2))
      return sub_1B2229A0C();
    v5 = sub_1B1DC3AC8(a1);
    if ((v6 & 1) == 0)
      return sub_1B2229A0C();
    a1 = *(_QWORD *)(v4[7] + 16 * v5);
  }
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1B1C7B9E8()
{
  uint64_t v0;
  int v1;

  v1 = *(unsigned __int8 *)(v0 + 16);
  sub_1B222A06C();
  sub_1B222A078();
  if (v1 == 1)
    sub_1B2228824();
  else
    sub_1B222A078();
  return sub_1B222A0C0();
}

uint64_t sub_1B1C7BA6C()
{
  uint64_t v0;

  if (*(_BYTE *)(v0 + 16) == 1)
  {
    sub_1B222A078();
    return sub_1B2228824();
  }
  else
  {
    sub_1B222A078();
    return sub_1B222A078();
  }
}

uint64_t sub_1B1C7BAE0()
{
  uint64_t v0;
  int v1;

  v1 = *(unsigned __int8 *)(v0 + 16);
  sub_1B222A06C();
  sub_1B222A078();
  if (v1 == 1)
    sub_1B2228824();
  else
    sub_1B222A078();
  return sub_1B222A0C0();
}

uint64_t sub_1B1C7BB60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1C7BB90(a1, a2, a3, a4, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1C7E728);
}

uint64_t sub_1B1C7BB6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1C7BB90(a1, a2, a3, a4, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1C7B72C);
}

uint64_t sub_1B1C7BB78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1C7BB90(a1, a2, a3, a4, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1C7B7E4);
}

uint64_t sub_1B1C7BB84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1C7BB90(a1, a2, a3, a4, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1C7B470);
}

uint64_t sub_1B1C7BB90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  return a5(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(unsigned __int8 *)(a1 + 16), *(_QWORD *)a2, *(_QWORD *)(a2 + 8), *(unsigned __int8 *)(a2 + 16));
}

uint64_t sub_1B1C7BBB0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;

  v3 = *a1;
  v4 = *a2;
  v5 = *((unsigned __int8 *)a2 + 16);
  if (*((_BYTE *)a1 + 16) != 1)
    return (v3 == v4) & ~v5;
  if ((v5 & 1) == 0)
    return 0;
  v6 = a1[1];
  if (v3 == v4 && v6 == a2[1])
    return 1;
  else
    return sub_1B2229D24();
}

uint64_t sub_1B1C7BC10()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  unint64_t v3;
  char v4;

  v1 = *(_QWORD *)v0;
  if (*(_BYTE *)(v0 + 16) != 1)
  {
    if (qword_1ED4B7930 != -1)
      swift_once();
    v2 = off_1ED4B9B08;
    if (!*((_QWORD *)off_1ED4B9B08 + 2))
      return 0;
    v3 = sub_1B1DC3AC8(v1);
    if ((v4 & 1) == 0)
      return 0;
    v1 = *(_QWORD *)(v2[7] + 16 * v3);
  }
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_1B1C7BCAC()
{
  uint64_t v0;
  int v1;
  _BYTE v3[80];

  v1 = *(unsigned __int8 *)(v0 + 16);
  sub_1B1B2A86C(v0 + 32, (uint64_t)v3);
  sub_1B222A06C();
  sub_1B222A078();
  if (v1 == 1)
    sub_1B2228824();
  else
    sub_1B222A078();
  sub_1B1B29888();
  return sub_1B222A0C0();
}

void sub_1B1C7BD44()
{
  uint64_t v0;
  int v1;
  uint64_t v2;

  v1 = *(unsigned __int8 *)(v0 + 16);
  sub_1B1B2A86C(v0 + 32, (uint64_t)&v2);
  sub_1B222A078();
  if (v1 == 1)
    sub_1B2228824();
  else
    sub_1B222A078();
  sub_1B1B29888();
}

uint64_t sub_1B1C7BDD4()
{
  uint64_t v0;
  int v1;
  _BYTE v3[80];

  v1 = *(unsigned __int8 *)(v0 + 16);
  sub_1B1B2A86C(v0 + 32, (uint64_t)v3);
  sub_1B222A06C();
  sub_1B222A078();
  if (v1 == 1)
    sub_1B2228824();
  else
    sub_1B222A078();
  sub_1B1B29888();
  return sub_1B222A0C0();
}

uint64_t sub_1B1C7BE78(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  BOOL v10;
  char v11;
  char v12;
  char v13;
  _BYTE v15[80];
  _BYTE v16[80];

  v3 = *a1;
  v4 = a1[1];
  v5 = *((unsigned __int8 *)a1 + 16);
  sub_1B1B2A86C((uint64_t)(a1 + 4), (uint64_t)v15);
  v6 = *a2;
  v7 = a2[1];
  v8 = (uint64_t)(a2 + 4);
  v9 = *((_BYTE *)a2 + 16);
  sub_1B1B2A86C(v8, (uint64_t)v16);
  if (v5 != 1)
  {
    if (v3 == v6)
      v13 = v9;
    else
      v13 = 1;
    if ((v13 & 1) == 0)
      goto LABEL_14;
LABEL_13:
    v12 = 0;
    return v12 & 1;
  }
  if ((v9 & 1) == 0)
    goto LABEL_13;
  v10 = v3 == v6 && v4 == v7;
  if (v10 || (v11 = sub_1B2229D24(), v12 = 0, (v11 & 1) != 0))
LABEL_14:
    sub_1B1B2A920((uint64_t)v15);
  return v12 & 1;
}

unint64_t sub_1B1C7BF3C()
{
  unint64_t result;

  result = qword_1ED4B8DC0;
  if (!qword_1ED4B8DC0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2286B14, &type metadata for FunctionConstant);
    atomic_store(result, (unint64_t *)&qword_1ED4B8DC0);
  }
  return result;
}

uint64_t sub_1B1C7BF80(char *a1, unsigned __int8 *a2)
{
  return sub_1B1F9198C(*a1, *a2);
}

uint64_t sub_1B1C7BF8C()
{
  sub_1B222A06C();
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

uint64_t sub_1B1C7C01C()
{
  sub_1B2228824();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B1C7C088()
{
  sub_1B222A06C();
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

uint64_t sub_1B1C7C114@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B1C7E7E0();
  *a1 = result;
  return result;
}

void sub_1B1C7C140(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;

  v2 = *v1;
  v3 = 0xE400000000000000;
  v4 = 0x7865646E69;
  if (v2 != 1)
    v4 = 0x65756C6176;
  v5 = v2 == 0;
  if (*v1)
    v6 = v4;
  else
    v6 = 1701667182;
  if (!v5)
    v3 = 0xE500000000000000;
  *a1 = v6;
  a1[1] = v3;
}

uint64_t sub_1B1C7C190()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x7865646E69;
  if (*v0 != 1)
    v1 = 0x65756C6176;
  if (*v0)
    return v1;
  else
    return 1701667182;
}

uint64_t sub_1B1C7C1DC@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B1C7E7E0();
  *a1 = result;
  return result;
}

uint64_t sub_1B1C7C200()
{
  sub_1B1C7EB4C();
  return sub_1B222A1D4();
}

uint64_t sub_1B1C7C228()
{
  sub_1B1C7EB4C();
  return sub_1B222A1E0();
}

uint64_t sub_1B1C7C250(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  _BYTE v12[16];
  char v13[80];
  _BYTE v14[80];

  v3 = v1;
  sub_1B1C7EC2C(0, &qword_1EEF5D008, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED170]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = &v12[-v9];
  sub_1B19FA070(a1, a1[3]);
  sub_1B1C7EB4C();
  sub_1B222A180();
  if (*(_BYTE *)(v3 + 16) == 1)
  {
    v13[0] = 0;
    swift_bridgeObjectRetain();
    sub_1B2229910();
    if (v2)
    {
      (*(void (**)(_BYTE *, uint64_t))(v7 + 8))(v10, v6);
      return sub_1B1B40E44(v3);
    }
    sub_1B1B40E44(v3);
    goto LABEL_7;
  }
  v13[0] = 1;
  sub_1B2229940();
  if (!v2)
  {
LABEL_7:
    sub_1B1B2A86C(v3 + 32, (uint64_t)v14);
    sub_1B1B2A86C((uint64_t)v14, (uint64_t)v13);
    v12[15] = 2;
    sub_1B1C7EC88();
    sub_1B2229958();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v7 + 8))(v10, v6);
}

__n128 sub_1B1C7C404@<Q0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __n128 result;
  __int128 v5;
  __int128 v6;
  _OWORD v7[6];
  char v8;

  sub_1B1C7E8C0(a1, (uint64_t)v7);
  if (!v2)
  {
    v5 = v7[5];
    *(_OWORD *)(a2 + 64) = v7[4];
    *(_OWORD *)(a2 + 80) = v5;
    *(_BYTE *)(a2 + 96) = v8;
    v6 = v7[1];
    *(_OWORD *)a2 = v7[0];
    *(_OWORD *)(a2 + 16) = v6;
    result = (__n128)v7[3];
    *(_OWORD *)(a2 + 32) = v7[2];
    *(__n128 *)(a2 + 48) = result;
  }
  return result;
}

uint64_t sub_1B1C7C454(_QWORD *a1)
{
  return sub_1B1C7C250(a1);
}

unint64_t sub_1B1C7C49C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v17[4];
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24[80];

  v2 = sub_1B22281B8();
  v21 = *(_QWORD *)(v2 - 8);
  v22 = v2;
  MEMORY[0x1E0C80A78](v2, v3);
  v4 = sub_1B22287A0();
  v19 = *(_QWORD *)(v4 - 8);
  v20 = v4;
  MEMORY[0x1E0C80A78](v4, v5);
  v18 = (char *)v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = 0;
  v7 = *(_QWORD *)(a1 + 16);
  if (!v7)
    return 0;
  v17[1] = a1;
  swift_bridgeObjectRetain();
  v8 = 0;
  v17[2] = a1 + 32;
  v17[3] = v7;
  do
  {
    v9 = a1 + 32 + 112 * v8;
    v10 = *(_QWORD *)v9;
    v11 = *(_QWORD *)(v9 + 8);
    v12 = *(unsigned __int8 *)(v9 + 16);
    sub_1B1B2A86C(v9 + 32, (uint64_t)v24);
    if (v12 == 1)
    {
      swift_bridgeObjectRetain_n();
      v13 = v18;
      sub_1B2228788();
      sub_1B2228758();
      v15 = v14;
      (*(void (**)(char *, uint64_t))(v19 + 8))(v13, v20);
      __asm { BR              X9 }
    }
    v23 ^= v10 - 0x61C8864680B583EBLL + (v23 << 6) + (v23 >> 2);
    ++v8;
    sub_1B1B29B38();
    sub_1B1B40E74(v10, v11, v12);
  }
  while (v8 != v7);
  swift_bridgeObjectRelease();
  return v23;
}

uint64_t sub_1B1C7C6F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v5;
  _BYTE v6[80];

  v1 = *(_QWORD *)v0;
  v2 = *(_QWORD *)(v0 + 8);
  v3 = *(_BYTE *)(v0 + 16);
  sub_1B1B2A86C(v0 + 32, (uint64_t)v6);
  v5 = sub_1B1C7B930(v1, v2, v3);
  sub_1B2228890();
  sub_1B1B292F0();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  return v5;
}

void sub_1B1C7C774(__n128 *a1)
{
  _BYTE v2[80];
  __n128 v3;
  __n128 v4;
  char v5;
  _DWORD v6[16];
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  sub_1B1B40DC8(a1, &v3);
  sub_1B1B40DC8(&v3, &v4);
  if ((v5 & 1) != 0)
  {
    sub_1B1C7BC10();
    sub_1B1B2A86C((uint64_t)&a1[2], (uint64_t)v2);
    sub_1B1B2A86C((uint64_t)v2, (uint64_t)v6);
    __asm { BR              X10 }
  }
  sub_1B1B2A86C((uint64_t)&a1[2], (uint64_t)v2);
  sub_1B1B2A86C((uint64_t)v2, (uint64_t)v6);
  __asm { BR              X10 }
}

void sub_1B1C7C874(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9)
{
  void *v9;
  uint64_t v10;
  uint64_t v11;

  a9 = *(_DWORD *)(v11 - 128);
  objc_msgSend(v9, sel_setConstantValue_type_atIndex_, &a9, 3, v10);
  JUMPOUT(0x1B1C7CE1CLL);
}

void sub_1B1C7C894(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9)
{
  void *v9;
  uint64_t v10;
  void *v11;

  a9 = *(_OWORD *)(v10 - 128);
  v11 = (void *)sub_1B2228728();
  swift_bridgeObjectRelease();
  objc_msgSend(v9, sel_setConstantValue_type_withName_, &a9, 5, v11);

  JUMPOUT(0x1B1C7CE1CLL);
}

void sub_1B1C7C8CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9)
{
  void *v9;
  uint64_t v10;
  void *v11;

  a9 = *(_OWORD *)(v10 - 128);
  v11 = (void *)sub_1B2228728();
  swift_bridgeObjectRelease();
  objc_msgSend(v9, sel_setConstantValue_type_withName_, &a9, 7, v11);

  JUMPOUT(0x1B1C7CE1CLL);
}

void sub_1B1C7C904(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, __int128 a10, __int128 a11)
{
  void *v11;
  uint64_t v12;
  __int128 v13;
  void *v14;

  v13 = *(_OWORD *)(v12 - 112);
  a9 = *(_OWORD *)(v12 - 128);
  a10 = v13;
  a11 = *(_OWORD *)(v12 - 96);
  v14 = (void *)sub_1B2228728();
  swift_bridgeObjectRelease();
  objc_msgSend(v11, sel_setConstantValue_type_withName_, &a9, 12, v14);

  JUMPOUT(0x1B1C7CE1CLL);
}

void sub_1B1C7C944(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, __int128 a10, __int128 a11, __int128 a12)
{
  void *v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  void *v16;

  v14 = *(_OWORD *)(v13 - 112);
  a9 = *(_OWORD *)(v13 - 128);
  a10 = v14;
  v15 = *(_OWORD *)(v13 - 80);
  a11 = *(_OWORD *)(v13 - 96);
  a12 = v15;
  v16 = (void *)sub_1B2228728();
  swift_bridgeObjectRelease();
  objc_msgSend(v12, sel_setConstantValue_type_withName_, &a9, 14, v16);

  JUMPOUT(0x1B1C7CE1CLL);
}

void sub_1B1C7C984(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, __int128 a10, __int128 a11, __int128 a12)
{
  void *v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  void *v16;

  v14 = *(_OWORD *)(v13 - 112);
  a9 = *(_OWORD *)(v13 - 128);
  a10 = v14;
  v15 = *(_OWORD *)(v13 - 80);
  a11 = *(_OWORD *)(v13 - 96);
  a12 = v15;
  v16 = (void *)sub_1B2228728();
  swift_bridgeObjectRelease();
  objc_msgSend(v12, sel_setConstantValue_type_withName_, &a9, 15, v16);

  JUMPOUT(0x1B1C7CE1CLL);
}

void sub_1B1C7C9C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9)
{
  void *v9;
  uint64_t v10;
  void *v11;

  a9 = *(_DWORD *)(v10 - 128);
  v11 = (void *)sub_1B2228728();
  swift_bridgeObjectRelease();
  objc_msgSend(v9, sel_setConstantValue_type_withName_, &a9, 29, v11);

  JUMPOUT(0x1B1C7CE1CLL);
}

void sub_1B1C7C9FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9)
{
  void *v9;
  uint64_t v10;
  void *v11;

  a9 = *(_DWORD *)(v10 - 128);
  v11 = (void *)sub_1B2228728();
  swift_bridgeObjectRelease();
  objc_msgSend(v9, sel_setConstantValue_type_withName_, &a9, 33, v11);

  JUMPOUT(0x1B1C7CE1CLL);
}

void sub_1B1C7CA34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9)
{
  void *v9;
  uint64_t v10;
  uint64_t v11;

  a9 = *(_OWORD *)(v11 - 128);
  objc_msgSend(v9, sel_setConstantValue_type_atIndex_, &a9, 5, v10);
  JUMPOUT(0x1B1C7CE1CLL);
}

void sub_1B1C7CA54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9)
{
  void *v9;
  uint64_t v10;
  uint64_t v11;

  a9 = *(_OWORD *)(v11 - 128);
  objc_msgSend(v9, sel_setConstantValue_type_atIndex_, &a9, 7, v10);
  JUMPOUT(0x1B1C7CE1CLL);
}

void sub_1B1C7CA74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, __int128 a10, __int128 a11)
{
  void *v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;

  v14 = *(_OWORD *)(v13 - 112);
  a9 = *(_OWORD *)(v13 - 128);
  a10 = v14;
  a11 = *(_OWORD *)(v13 - 96);
  objc_msgSend(v11, sel_setConstantValue_type_atIndex_, &a9, 12, v12);
  JUMPOUT(0x1B1C7CE1CLL);
}

void sub_1B1C7CA9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, __int128 a10, __int128 a11, __int128 a12)
{
  void *v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;

  v15 = *(_OWORD *)(v14 - 112);
  a9 = *(_OWORD *)(v14 - 128);
  a10 = v15;
  v16 = *(_OWORD *)(v14 - 80);
  a11 = *(_OWORD *)(v14 - 96);
  a12 = v16;
  objc_msgSend(v12, sel_setConstantValue_type_atIndex_, &a9, 14, v13);
  JUMPOUT(0x1B1C7CE1CLL);
}

void sub_1B1C7CAC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, __int128 a10, __int128 a11, __int128 a12)
{
  void *v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;

  v15 = *(_OWORD *)(v14 - 112);
  a9 = *(_OWORD *)(v14 - 128);
  a10 = v15;
  v16 = *(_OWORD *)(v14 - 80);
  a11 = *(_OWORD *)(v14 - 96);
  a12 = v16;
  objc_msgSend(v12, sel_setConstantValue_type_atIndex_, &a9, 15, v13);
  JUMPOUT(0x1B1C7CE1CLL);
}

void sub_1B1C7CAEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9)
{
  void *v9;
  uint64_t v10;
  uint64_t v11;

  a9 = *(_DWORD *)(v11 - 128);
  objc_msgSend(v9, sel_setConstantValue_type_atIndex_, &a9, 29, v10);
  JUMPOUT(0x1B1C7CE1CLL);
}

void sub_1B1C7CB0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9)
{
  void *v9;
  uint64_t v10;
  uint64_t v11;

  a9 = *(_DWORD *)(v11 - 128);
  objc_msgSend(v9, sel_setConstantValue_type_atIndex_, &a9, 33, v10);
  JUMPOUT(0x1B1C7CE1CLL);
}

void sub_1B1C7CB2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  uint64_t v10;
  void *v11;

  a9 = *(_QWORD *)(v10 - 128);
  v11 = (void *)sub_1B2228728();
  swift_bridgeObjectRelease();
  objc_msgSend(v9, sel_setConstantValue_type_withName_, &a9, 4, v11);

  JUMPOUT(0x1B1C7CE1CLL);
}

void sub_1B1C7CB64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9)
{
  void *v9;
  uint64_t v10;
  void *v11;

  a9 = *(_OWORD *)(v10 - 128);
  v11 = (void *)sub_1B2228728();
  swift_bridgeObjectRelease();
  objc_msgSend(v9, sel_setConstantValue_type_withName_, &a9, 6, v11);

  JUMPOUT(0x1B1C7CE1CLL);
}

void sub_1B1C7CB9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, __int128 a10)
{
  void *v10;
  uint64_t v11;
  __int128 v12;
  void *v13;

  v12 = *(_OWORD *)(v11 - 112);
  a9 = *(_OWORD *)(v11 - 128);
  a10 = v12;
  v13 = (void *)sub_1B2228728();
  swift_bridgeObjectRelease();
  objc_msgSend(v10, sel_setConstantValue_type_withName_, &a9, 8, v13);

  JUMPOUT(0x1B1C7CE1CLL);
}

void sub_1B1C7CBD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, __int128 a10)
{
  void *v10;
  uint64_t v11;
  __int128 v12;
  void *v13;

  v12 = *(_OWORD *)(v11 - 112);
  a9 = *(_OWORD *)(v11 - 128);
  a10 = v12;
  v13 = (void *)sub_1B2228728();
  swift_bridgeObjectRelease();
  objc_msgSend(v10, sel_setConstantValue_type_withName_, &a9, 9, v13);

  JUMPOUT(0x1B1C7CE1CLL);
}

void sub_1B1C7CC0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, uint64_t a10)
{
  void *v10;
  uint64_t v11;
  void *v12;

  a9 = *(_OWORD *)(v11 - 128);
  a10 = *(_QWORD *)(v11 - 112);
  v12 = (void *)sub_1B2228728();
  swift_bridgeObjectRelease();
  objc_msgSend(v10, sel_setConstantValue_type_withName_, &a9, 10, v12);

  JUMPOUT(0x1B1C7CE1CLL);
}

void sub_1B1C7CC4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, __int128 a10, __int128 a11)
{
  void *v11;
  uint64_t v12;
  __int128 v13;
  void *v14;

  v13 = *(_OWORD *)(v12 - 112);
  a9 = *(_OWORD *)(v12 - 128);
  a10 = v13;
  a11 = *(_OWORD *)(v12 - 96);
  v14 = (void *)sub_1B2228728();
  swift_bridgeObjectRelease();
  objc_msgSend(v11, sel_setConstantValue_type_withName_, &a9, 11, v14);

  JUMPOUT(0x1B1C7CE1CLL);
}

void sub_1B1C7CC8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, __int128 a10)
{
  void *v10;
  uint64_t v11;
  __int128 v12;
  void *v13;

  v12 = *(_OWORD *)(v11 - 112);
  a9 = *(_OWORD *)(v11 - 128);
  a10 = v12;
  v13 = (void *)sub_1B2228728();
  swift_bridgeObjectRelease();
  objc_msgSend(v10, sel_setConstantValue_type_withName_, &a9, 13, v13);

  JUMPOUT(0x1B1C7CE1CLL);
}

void sub_1B1C7CCC4()
{
  sub_1B2228728();
  swift_bridgeObjectRelease();
  JUMPOUT(0x1B1C7CCF8);
}

void sub_1B1C7CD08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  uint64_t v10;
  uint64_t v11;

  a9 = *(_QWORD *)(v11 - 128);
  objc_msgSend(v9, sel_setConstantValue_type_atIndex_, &a9, 4, v10);
  JUMPOUT(0x1B1C7CE1CLL);
}

void sub_1B1C7CD28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9)
{
  void *v9;
  uint64_t v10;
  uint64_t v11;

  a9 = *(_OWORD *)(v11 - 128);
  objc_msgSend(v9, sel_setConstantValue_type_atIndex_, &a9, 6, v10);
  JUMPOUT(0x1B1C7CE1CLL);
}

void sub_1B1C7CD48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, __int128 a10)
{
  void *v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;

  v13 = *(_OWORD *)(v12 - 112);
  a9 = *(_OWORD *)(v12 - 128);
  a10 = v13;
  objc_msgSend(v10, sel_setConstantValue_type_atIndex_, &a9, 8, v11);
  JUMPOUT(0x1B1C7CE1CLL);
}

void sub_1B1C7CD68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, __int128 a10)
{
  void *v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;

  v13 = *(_OWORD *)(v12 - 112);
  a9 = *(_OWORD *)(v12 - 128);
  a10 = v13;
  objc_msgSend(v10, sel_setConstantValue_type_atIndex_, &a9, 9, v11);
  JUMPOUT(0x1B1C7CE1CLL);
}

void sub_1B1C7CD88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, uint64_t a10)
{
  void *v10;
  uint64_t v11;
  uint64_t v12;

  a9 = *(_OWORD *)(v12 - 128);
  a10 = *(_QWORD *)(v12 - 112);
  objc_msgSend(v10, sel_setConstantValue_type_atIndex_, &a9, 10, v11);
  JUMPOUT(0x1B1C7CE1CLL);
}

void sub_1B1C7CDB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, __int128 a10, __int128 a11)
{
  void *v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;

  v14 = *(_OWORD *)(v13 - 112);
  a9 = *(_OWORD *)(v13 - 128);
  a10 = v14;
  a11 = *(_OWORD *)(v13 - 96);
  objc_msgSend(v11, sel_setConstantValue_type_atIndex_, &a9, 11, v12);
  JUMPOUT(0x1B1C7CE1CLL);
}

void sub_1B1C7CDD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, __int128 a10)
{
  void *v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;

  v13 = *(_OWORD *)(v12 - 112);
  a9 = *(_OWORD *)(v12 - 128);
  a10 = v13;
  objc_msgSend(v10, sel_setConstantValue_type_atIndex_, &a9, 13, v11);
  JUMPOUT(0x1B1C7CE1CLL);
}

void sub_1B1C7CDF8()
{
  JUMPOUT(0x1B1C7CE14);
}

uint64_t sub_1B1C7CE50(int a1, char a2, uint64_t a3)
{
  uint64_t v3;
  _BYTE *v4;
  int v5;
  char v6;
  uint64_t result;

  v3 = *(_QWORD *)(a3 + 16);
  if (!v3)
    goto LABEL_7;
  v4 = (_BYTE *)(a3 + 64);
  while ((*(v4 - 16) & 1) != 0 || *((_QWORD *)v4 - 4) != a1)
  {
    v4 += 112;
    if (!--v3)
      goto LABEL_7;
  }
  v5 = v4[64];
  if (v5 == 14)
  {
LABEL_7:
    v6 = 0;
    return v6 & 1;
  }
  if (v5 == 13)
  {
    v6 = ((*v4 & 1) == 0) ^ a2;
    return v6 & 1;
  }
  result = sub_1B2229688();
  __break(1u);
  return result;
}

uint64_t sub_1B1C7CF1C@<X0>(id *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  id v3;
  uint64_t v4;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v16;
  char v17;
  id v18;
  uint64_t result;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  _QWORD v38[8];
  char v39;
  uint64_t v40;
  unsigned __int8 v41;
  uint64_t v42[2];
  char v43;
  id v44;

  v3 = *a1;
  if (!a2 || (v4 = *(_QWORD *)(a2 + 16)) == 0)
  {
LABEL_20:
    result = (uint64_t)objc_msgSend(v3, sel_required);
    if ((_DWORD)result)
    {
      v20 = v3;
      v44 = objc_msgSend(v20, sel_index);
      sub_1B1B2AE34((uint64_t)objc_msgSend(v20, sel_type), (uint64_t)v38);
      v21 = v38[1];
      v37 = v38[0];
      v22 = v38[2];
      v23 = v38[3];
      v24 = v38[4];
      v25 = v38[5];
      v27 = v38[6];
      v26 = v38[7];
      v28 = v39;

      result = sub_1B1C7E828((uint64_t)v38, (uint64_t)&v40);
      if (v41 == 255)
      {
        v21 = 0;
        v22 = 0;
        v23 = 0;
        v24 = 0;
        v25 = 0;
        v27 = 0;
        v26 = 0;
        v28 = 14;
        v29 = 0xFFFFFFFFLL;
      }
      else
      {
        result = sub_1B1B2A86C((uint64_t)&v40, (uint64_t)v42);
        v29 = v37;
      }
      *(_QWORD *)a3 = v44;
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)(a3 + 24) = 0;
      *(_QWORD *)(a3 + 32) = v29;
      *(_QWORD *)(a3 + 40) = v21;
      *(_QWORD *)(a3 + 48) = v22;
      *(_QWORD *)(a3 + 56) = v23;
      *(_QWORD *)(a3 + 64) = v24;
      *(_QWORD *)(a3 + 72) = v25;
      *(_QWORD *)(a3 + 80) = v27;
      *(_QWORD *)(a3 + 88) = v26;
      *(_BYTE *)(a3 + 96) = v28;
    }
    else
    {
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 255;
      *(_OWORD *)(a3 + 24) = 0u;
      *(_OWORD *)(a3 + 40) = 0u;
      *(_OWORD *)(a3 + 56) = 0u;
      *(_OWORD *)(a3 + 72) = 0u;
      *(_OWORD *)(a3 + 81) = 0u;
    }
    return result;
  }
  swift_bridgeObjectRetain_n();
  v31 = a2;
  v6 = a2 + 64;
  v44 = v3;
  while (1)
  {
    v7 = *(id *)(v6 - 32);
    v8 = *(_QWORD *)(v6 - 24);
    v9 = *(unsigned __int8 *)(v6 - 16);
    v35 = *(_OWORD *)(v6 + 16);
    v36 = *(_OWORD *)v6;
    v33 = *(_OWORD *)(v6 + 48);
    v34 = *(_OWORD *)(v6 + 32);
    v10 = *(char *)(v6 + 64);
    if (v9 != 1)
      break;
    swift_bridgeObjectRetain_n();
    v11 = objc_msgSend(v3, sel_name);
    v12 = sub_1B222874C();
    v14 = v13;

    if ((id)v12 == v7 && v8 == v14)
    {
      sub_1B1B40E74((uint64_t)v7, v8, 1);
      swift_bridgeObjectRelease();
LABEL_16:
      v3 = v44;
      v18 = objc_msgSend(v44, sel_type);
      goto LABEL_17;
    }
    v16 = sub_1B2229D24();
    v17 = 1;
    sub_1B1B40E74((uint64_t)v7, v8, 1);
    swift_bridgeObjectRelease();
    if ((v16 & 1) != 0)
      goto LABEL_16;
LABEL_4:
    sub_1B1B40E74((uint64_t)v7, v8, v17);
    v3 = v44;
LABEL_5:
    v6 += 112;
    if (!--v4)
    {
      swift_bridgeObjectRelease_n();
      goto LABEL_20;
    }
  }
  if (objc_msgSend(v3, sel_index) != v7)
    goto LABEL_5;
  v18 = objc_msgSend(v3, sel_type);
LABEL_17:
  if (v18 != qword_1B2286DF8[v10])
  {
    v17 = v9;
    goto LABEL_4;
  }
  result = swift_bridgeObjectRelease_n();
  if (!(_DWORD)v9)
  {
    if ((_DWORD)v7 != 606)
      goto LABEL_37;
    result = sub_1B1C7CE50(601, 1, v31);
    if ((result & 1) != 0)
      goto LABEL_37;
    result = sub_1B1C7CE50(602, 1, v31);
    if ((result & 1) != 0)
      goto LABEL_37;
    result = sub_1B1C7CE50(603, 1, v31);
    if ((result & 1) != 0)
      goto LABEL_37;
    result = sub_1B1C7CE50(604, 1, v31);
    if ((result & 1) != 0)
      goto LABEL_37;
    goto LABEL_20;
  }
  if (qword_1ED4BF430 != -1)
    swift_once();
  swift_retain();
  sub_1B2229430();
  sub_1B2228890();
  v42[0] = (uint64_t)v7;
  v42[1] = v8;
  v43 = 1;
  sub_1B22295EC();
  v30 = sub_1B2228E90();
  if (qword_1ED4BF658 != -1)
    swift_once();
  v42[0] = 0;
  swift_retain();
  sub_1B1F1AD70(v30, v42, 0, 0xE000000000000000);
  swift_release();
  swift_bridgeObjectRelease();
  result = swift_release();
LABEL_37:
  *(_QWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = v8;
  *(_QWORD *)(a3 + 16) = v9;
  *(_QWORD *)(a3 + 24) = 0;
  *(_OWORD *)(a3 + 32) = v36;
  *(_OWORD *)(a3 + 48) = v35;
  *(_OWORD *)(a3 + 64) = v34;
  *(_OWORD *)(a3 + 80) = v33;
  *(_BYTE *)(a3 + 96) = v10;
  return result;
}

uint64_t sub_1B1C7D3C4()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t result;

  sub_1B1C7E6D4();
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B2286E80;
  *(_OWORD *)(v0 + 32) = xmmword_1B2286E90;
  *(_QWORD *)(v0 + 48) = 0x80000001B23363E0;
  *(_OWORD *)(v0 + 56) = xmmword_1B2286EA0;
  *(_QWORD *)(v0 + 72) = 0x80000001B2336400;
  *(_OWORD *)(v0 + 80) = xmmword_1B2286EB0;
  *(_QWORD *)(v0 + 96) = 0x80000001B2336420;
  *(_OWORD *)(v0 + 104) = xmmword_1B2286EC0;
  *(_QWORD *)(v0 + 120) = 0x80000001B2336440;
  *(_OWORD *)(v0 + 128) = xmmword_1B2286ED0;
  *(_QWORD *)(v0 + 144) = 0xEE006E6F6974704FLL;
  *(_OWORD *)(v0 + 152) = xmmword_1B2286EE0;
  *(_QWORD *)(v0 + 168) = 0x80000001B2336460;
  *(_OWORD *)(v0 + 176) = xmmword_1B2286EF0;
  *(_QWORD *)(v0 + 192) = 0x80000001B2336480;
  *(_OWORD *)(v0 + 200) = xmmword_1B2286F00;
  *(_QWORD *)(v0 + 216) = 0xEE003076755F7865;
  *(_OWORD *)(v0 + 224) = xmmword_1B2286F10;
  *(_QWORD *)(v0 + 240) = 0xEE003176755F7865;
  *(_OWORD *)(v0 + 248) = xmmword_1B2286F20;
  *(_QWORD *)(v0 + 264) = 0xEE003276755F7865;
  *(_OWORD *)(v0 + 272) = xmmword_1B2286F30;
  *(_QWORD *)(v0 + 288) = 0xEE003376755F7865;
  *(_QWORD *)(v0 + 296) = 406;
  *(_QWORD *)(v0 + 304) = 0xD000000000000010;
  *(_QWORD *)(v0 + 312) = 0x80000001B23364A0;
  *(_OWORD *)(v0 + 320) = xmmword_1B2286F40;
  *(_QWORD *)(v0 + 336) = 0x80000001B23364C0;
  *(_QWORD *)(v0 + 344) = 450;
  strcpy((char *)(v0 + 352), "gamma_blending");
  *(_BYTE *)(v0 + 367) = -18;
  *(_OWORD *)(v0 + 368) = xmmword_1B2286F50;
  *(_QWORD *)(v0 + 384) = 0xEB00000000736D72;
  *(_QWORD *)(v0 + 392) = 452;
  *(_QWORD *)(v0 + 400) = 0x635F656C62616E65;
  *(_QWORD *)(v0 + 408) = 0xEF676E697070696CLL;
  *(_OWORD *)(v0 + 416) = xmmword_1B2286F60;
  *(_QWORD *)(v0 + 432) = 0x80000001B23364E0;
  *(_QWORD *)(v0 + 440) = 455;
  *(_QWORD *)(v0 + 448) = 0xD000000000000011;
  *(_QWORD *)(v0 + 456) = 0x80000001B2336500;
  *(_OWORD *)(v0 + 464) = xmmword_1B2286F70;
  *(_QWORD *)(v0 + 480) = 0x80000001B2336520;
  *(_QWORD *)(v0 + 488) = 457;
  *(_QWORD *)(v0 + 496) = 0xD000000000000011;
  *(_QWORD *)(v0 + 504) = 0x80000001B2336540;
  *(_OWORD *)(v0 + 512) = xmmword_1B2286F80;
  *(_QWORD *)(v0 + 528) = 0x80000001B2336560;
  *(_QWORD *)(v0 + 536) = 459;
  *(_QWORD *)(v0 + 544) = 0xD000000000000014;
  *(_QWORD *)(v0 + 552) = 0x80000001B2336580;
  *(_OWORD *)(v0 + 560) = xmmword_1B2286F90;
  *(_QWORD *)(v0 + 576) = 0x80000001B23365A0;
  *(_QWORD *)(v0 + 584) = 461;
  strcpy((char *)(v0 + 592), "outputs_normal");
  *(_BYTE *)(v0 + 607) = -18;
  *(_OWORD *)(v0 + 608) = xmmword_1B2286FA0;
  *(_QWORD *)(v0 + 624) = 0xEE0065646F6D5F67;
  *(_QWORD *)(v0 + 632) = 463;
  *(_QWORD *)(v0 + 640) = 0xD000000000000018;
  *(_QWORD *)(v0 + 648) = 0x80000001B23365C0;
  *(_OWORD *)(v0 + 656) = xmmword_1B2286FB0;
  *(_QWORD *)(v0 + 672) = 0xEC00000079746963;
  *(_QWORD *)(v0 + 680) = 501;
  *(_QWORD *)(v0 + 688) = 0x6567615F736168;
  *(_QWORD *)(v0 + 696) = 0xE700000000000000;
  *(_OWORD *)(v0 + 704) = xmmword_1B2286FC0;
  *(_QWORD *)(v0 + 720) = 0xEC000000656D6974;
  *(_QWORD *)(v0 + 728) = 503;
  *(_QWORD *)(v0 + 736) = 0xD000000000000010;
  *(_QWORD *)(v0 + 744) = 0x80000001B23365E0;
  *(_OWORD *)(v0 + 752) = xmmword_1B2286FD0;
  *(_QWORD *)(v0 + 768) = 0xE900000000000072;
  *(_QWORD *)(v0 + 776) = 506;
  *(_QWORD *)(v0 + 784) = 0x6569726F5F736168;
  *(_QWORD *)(v0 + 792) = 0xEF6E6F697461746ELL;
  *(_OWORD *)(v0 + 800) = xmmword_1B2286FE0;
  *(_QWORD *)(v0 + 816) = 0x80000001B2336600;
  *(_QWORD *)(v0 + 824) = 508;
  *(_QWORD *)(v0 + 832) = 0x6C676E615F736168;
  *(_QWORD *)(v0 + 840) = 0xE900000000000065;
  *(_OWORD *)(v0 + 848) = xmmword_1B2286FF0;
  *(_QWORD *)(v0 + 864) = 0x80000001B2336620;
  *(_QWORD *)(v0 + 872) = 510;
  *(_QWORD *)(v0 + 880) = 0x6F7669705F736168;
  *(_QWORD *)(v0 + 888) = 0xE900000000000074;
  *(_OWORD *)(v0 + 896) = xmmword_1B2287000;
  *(_QWORD *)(v0 + 912) = 0xEA00000000007465;
  *(_QWORD *)(v0 + 920) = 512;
  *(_QWORD *)(v0 + 928) = 0x7373616D5F736168;
  *(_QWORD *)(v0 + 936) = 0xE800000000000000;
  *(_OWORD *)(v0 + 944) = xmmword_1B2287010;
  *(_QWORD *)(v0 + 960) = 0x80000001B2336640;
  *(_QWORD *)(v0 + 968) = 514;
  *(_QWORD *)(v0 + 976) = 0xD000000000000011;
  *(_QWORD *)(v0 + 984) = 0x80000001B2336660;
  *(_OWORD *)(v0 + 992) = xmmword_1B2287020;
  *(_QWORD *)(v0 + 1008) = 0x80000001B2336680;
  *(_QWORD *)(v0 + 1016) = 516;
  *(_QWORD *)(v0 + 1024) = 0xD000000000000011;
  *(_QWORD *)(v0 + 1032) = 0x80000001B23366A0;
  *(_OWORD *)(v0 + 1040) = xmmword_1B2287030;
  *(_QWORD *)(v0 + 1056) = 0xEE0031617461645FLL;
  *(_QWORD *)(v0 + 1064) = 518;
  strcpy((char *)(v0 + 1072), "has_user_data2");
  *(_BYTE *)(v0 + 1087) = -18;
  *(_OWORD *)(v0 + 1088) = xmmword_1B2287040;
  *(_QWORD *)(v0 + 1104) = 0xEE0033617461645FLL;
  *(_QWORD *)(v0 + 1112) = 520;
  strcpy((char *)(v0 + 1120), "has_user_data4");
  *(_BYTE *)(v0 + 1135) = -18;
  *(_OWORD *)(v0 + 1136) = xmmword_1B2287050;
  *(_QWORD *)(v0 + 1152) = 0xEA00000000004431;
  *(_QWORD *)(v0 + 1160) = 522;
  *(_QWORD *)(v0 + 1168) = 0x657A69735F736168;
  *(_QWORD *)(v0 + 1176) = 0xEA00000000004432;
  *(_OWORD *)(v0 + 1184) = xmmword_1B2287060;
  *(_QWORD *)(v0 + 1200) = 0xEA00000000004433;
  *(_QWORD *)(v0 + 1208) = 524;
  *(_QWORD *)(v0 + 1216) = 0xD000000000000017;
  *(_QWORD *)(v0 + 1224) = 0x80000001B23366C0;
  *(_OWORD *)(v0 + 1232) = xmmword_1B2287070;
  *(_QWORD *)(v0 + 1248) = 0xE800000000000000;
  *(_QWORD *)(v0 + 1256) = 527;
  *(_QWORD *)(v0 + 1264) = 0x747261705F736168;
  *(_QWORD *)(v0 + 1272) = 0xEF64695F656C6369;
  *(_OWORD *)(v0 + 1280) = xmmword_1B2287080;
  *(_QWORD *)(v0 + 1296) = 0xED000064695F746ELL;
  *(_QWORD *)(v0 + 1304) = 530;
  *(_QWORD *)(v0 + 1312) = 0xD000000000000013;
  *(_QWORD *)(v0 + 1320) = 0x80000001B23366E0;
  *(_OWORD *)(v0 + 1328) = xmmword_1B2287090;
  *(_QWORD *)(v0 + 1344) = 0xED0000657A69735FLL;
  *(_QWORD *)(v0 + 1352) = 532;
  *(_QWORD *)(v0 + 1360) = 0xD000000000000014;
  *(_QWORD *)(v0 + 1368) = 0x80000001B2336700;
  *(_OWORD *)(v0 + 1376) = xmmword_1B22870A0;
  *(_QWORD *)(v0 + 1392) = 0x80000001B2336720;
  *(_QWORD *)(v0 + 1400) = 534;
  *(_QWORD *)(v0 + 1408) = 0xD000000000000017;
  *(_QWORD *)(v0 + 1416) = 0x80000001B2336740;
  *(_OWORD *)(v0 + 1424) = xmmword_1B22870B0;
  *(_QWORD *)(v0 + 1440) = 0x80000001B2336760;
  *(_QWORD *)(v0 + 1448) = 536;
  *(_QWORD *)(v0 + 1456) = 0xD00000000000001BLL;
  *(_QWORD *)(v0 + 1464) = 0x80000001B2336780;
  *(_OWORD *)(v0 + 1472) = xmmword_1B22870C0;
  *(_QWORD *)(v0 + 1488) = 0xEE00797469766172;
  *(_QWORD *)(v0 + 1496) = 538;
  *(_QWORD *)(v0 + 1504) = 0xD000000000000013;
  *(_QWORD *)(v0 + 1512) = 0x80000001B23367A0;
  *(_OWORD *)(v0 + 1520) = xmmword_1B22870D0;
  *(_QWORD *)(v0 + 1536) = 0x80000001B23367C0;
  *(_QWORD *)(v0 + 1544) = 540;
  *(_QWORD *)(v0 + 1552) = 0xD000000000000012;
  *(_QWORD *)(v0 + 1560) = 0x80000001B23367E0;
  *(_OWORD *)(v0 + 1568) = xmmword_1B22870E0;
  *(_QWORD *)(v0 + 1584) = 0x80000001B2336800;
  *(_QWORD *)(v0 + 1592) = 542;
  *(_QWORD *)(v0 + 1600) = 0xD000000000000019;
  *(_QWORD *)(v0 + 1608) = 0x80000001B2336820;
  *(_OWORD *)(v0 + 1616) = xmmword_1B22870F0;
  *(_QWORD *)(v0 + 1632) = 0x80000001B2336840;
  *(_QWORD *)(v0 + 1640) = 544;
  *(_QWORD *)(v0 + 1648) = 0xD00000000000001CLL;
  *(_QWORD *)(v0 + 1656) = 0x80000001B2336860;
  *(_OWORD *)(v0 + 1664) = xmmword_1B2287100;
  *(_QWORD *)(v0 + 1680) = 0x80000001B2336880;
  *(_QWORD *)(v0 + 1688) = 551;
  *(_QWORD *)(v0 + 1696) = 0xD000000000000020;
  *(_QWORD *)(v0 + 1704) = 0x80000001B23368B0;
  *(_OWORD *)(v0 + 1712) = xmmword_1B2287110;
  *(_QWORD *)(v0 + 1728) = 0x80000001B23368E0;
  *(_QWORD *)(v0 + 1736) = 553;
  *(_QWORD *)(v0 + 1744) = 0xD000000000000026;
  *(_QWORD *)(v0 + 1752) = 0x80000001B2336910;
  *(_OWORD *)(v0 + 1760) = xmmword_1B2287120;
  *(_QWORD *)(v0 + 1776) = 0x80000001B2336940;
  *(_QWORD *)(v0 + 1784) = 555;
  *(_QWORD *)(v0 + 1792) = 0xD000000000000020;
  *(_QWORD *)(v0 + 1800) = 0x80000001B2336960;
  *(_OWORD *)(v0 + 1808) = xmmword_1B2287130;
  *(_QWORD *)(v0 + 1824) = 0xEE0065646F6D5F72;
  *(_QWORD *)(v0 + 1832) = 600;
  strcpy((char *)(v0 + 1840), "blending_mode");
  *(_WORD *)(v0 + 1854) = -4864;
  *(_OWORD *)(v0 + 1856) = xmmword_1B2287140;
  *(_QWORD *)(v0 + 1872) = 0x80000001B2336990;
  *(_QWORD *)(v0 + 1880) = 602;
  *(_QWORD *)(v0 + 1888) = 0xD000000000000011;
  *(_QWORD *)(v0 + 1896) = 0x80000001B23369B0;
  *(_OWORD *)(v0 + 1904) = xmmword_1B2287150;
  *(_QWORD *)(v0 + 1920) = 0x80000001B23369D0;
  *(_QWORD *)(v0 + 1928) = 604;
  *(_QWORD *)(v0 + 1936) = 0xD000000000000013;
  *(_QWORD *)(v0 + 1944) = 0x80000001B23369F0;
  *(_OWORD *)(v0 + 1952) = xmmword_1B2287160;
  *(_QWORD *)(v0 + 1968) = 0x80000001B2336A10;
  *(_QWORD *)(v0 + 1976) = 606;
  *(_QWORD *)(v0 + 1984) = 0xD000000000000021;
  *(_QWORD *)(v0 + 1992) = 0x80000001B2336A30;
  *(_OWORD *)(v0 + 2000) = xmmword_1B2287170;
  *(_QWORD *)(v0 + 2016) = 0xEF6C656E6E616863;
  *(_QWORD *)(v0 + 2024) = 608;
  *(_QWORD *)(v0 + 2032) = 0xD000000000000016;
  *(_QWORD *)(v0 + 2040) = 0x80000001B2336A60;
  *(_OWORD *)(v0 + 2048) = xmmword_1B2287180;
  *(_QWORD *)(v0 + 2064) = 0x80000001B2336A80;
  *(_QWORD *)(v0 + 2072) = 610;
  *(_QWORD *)(v0 + 2080) = 0xD000000000000010;
  *(_QWORD *)(v0 + 2088) = 0x80000001B2336AA0;
  *(_OWORD *)(v0 + 2096) = xmmword_1B2287190;
  *(_QWORD *)(v0 + 2112) = 0x80000001B2336AC0;
  *(_QWORD *)(v0 + 2120) = 612;
  strcpy((char *)(v0 + 2128), "animation_mode");
  *(_BYTE *)(v0 + 2143) = -18;
  *(_OWORD *)(v0 + 2144) = xmmword_1B22871A0;
  *(_QWORD *)(v0 + 2160) = 0x80000001B2336AE0;
  *(_QWORD *)(v0 + 2168) = 614;
  *(_QWORD *)(v0 + 2176) = 0xD000000000000011;
  *(_QWORD *)(v0 + 2184) = 0x80000001B2336B00;
  *(_OWORD *)(v0 + 2192) = xmmword_1B22871B0;
  *(_QWORD *)(v0 + 2208) = 0x80000001B2336B20;
  *(_QWORD *)(v0 + 2216) = 616;
  *(_QWORD *)(v0 + 2224) = 0x6F6D5F6570616873;
  *(_QWORD *)(v0 + 2232) = 0xEA00000000006564;
  *(_OWORD *)(v0 + 2240) = xmmword_1B22871C0;
  *(_QWORD *)(v0 + 2256) = 0x80000001B2336B40;
  *(_QWORD *)(v0 + 2264) = 618;
  strcpy((char *)(v0 + 2272), "enable_cutoff");
  *(_WORD *)(v0 + 2286) = -4864;
  *(_OWORD *)(v0 + 2288) = xmmword_1B22871D0;
  *(_QWORD *)(v0 + 2304) = 0xEE00676E6974726FLL;
  *(_QWORD *)(v0 + 2312) = 620;
  *(_QWORD *)(v0 + 2320) = 0xD000000000000012;
  *(_QWORD *)(v0 + 2328) = 0x80000001B2336B60;
  *(_OWORD *)(v0 + 2336) = xmmword_1B22871E0;
  *(_QWORD *)(v0 + 2352) = 0x80000001B2336B80;
  *(_QWORD *)(v0 + 2360) = 622;
  *(_QWORD *)(v0 + 2368) = 0xD000000000000013;
  *(_QWORD *)(v0 + 2376) = 0x80000001B2336BA0;
  *(_OWORD *)(v0 + 2384) = xmmword_1B22871F0;
  *(_QWORD *)(v0 + 2400) = 0x80000001B2336BC0;
  *(_QWORD *)(v0 + 2408) = 624;
  *(_QWORD *)(v0 + 2416) = 0xD000000000000015;
  *(_QWORD *)(v0 + 2424) = 0x80000001B2336BE0;
  *(_OWORD *)(v0 + 2432) = xmmword_1B2287200;
  *(_QWORD *)(v0 + 2448) = 0xEF7974696361704FLL;
  *(_QWORD *)(v0 + 2456) = 626;
  strcpy((char *)(v0 + 2464), "voxelizeColor");
  *(_WORD *)(v0 + 2478) = -4864;
  *(_OWORD *)(v0 + 2480) = xmmword_1B2287210;
  *(_QWORD *)(v0 + 2496) = 0x80000001B2336C00;
  *(_QWORD *)(v0 + 2504) = 628;
  *(_QWORD *)(v0 + 2512) = 0xD000000000000016;
  *(_QWORD *)(v0 + 2520) = 0x80000001B2336C20;
  *(_OWORD *)(v0 + 2528) = xmmword_1B2287220;
  *(_QWORD *)(v0 + 2544) = 0x80000001B2336C40;
  *(_QWORD *)(v0 + 2552) = 630;
  *(_QWORD *)(v0 + 2560) = 0xD000000000000019;
  *(_QWORD *)(v0 + 2568) = 0x80000001B2336C60;
  *(_OWORD *)(v0 + 2576) = xmmword_1B2287230;
  *(_QWORD *)(v0 + 2592) = 0x80000001B2336C80;
  *(_QWORD *)(v0 + 2600) = 800;
  *(_QWORD *)(v0 + 2608) = 0xD000000000000012;
  *(_QWORD *)(v0 + 2616) = 0x80000001B2336CA0;
  *(_OWORD *)(v0 + 2624) = xmmword_1B2287240;
  *(_QWORD *)(v0 + 2640) = 0x80000001B2336CC0;
  *(_QWORD *)(v0 + 2648) = 20001;
  *(_QWORD *)(v0 + 2656) = 0xD000000000000017;
  *(_QWORD *)(v0 + 2664) = 0x80000001B2336CE0;
  *(_OWORD *)(v0 + 2672) = xmmword_1B2287250;
  *(_QWORD *)(v0 + 2688) = 0x80000001B2336D00;
  *(_QWORD *)(v0 + 2696) = 20003;
  *(_QWORD *)(v0 + 2704) = 0xD000000000000019;
  *(_QWORD *)(v0 + 2712) = 0x80000001B2336D20;
  *(_OWORD *)(v0 + 2720) = xmmword_1B2287260;
  *(_QWORD *)(v0 + 2736) = 0x80000001B2336D40;
  *(_QWORD *)(v0 + 2744) = 20050;
  *(_QWORD *)(v0 + 2752) = 0xD000000000000018;
  *(_QWORD *)(v0 + 2760) = 0x80000001B2336D60;
  *(_OWORD *)(v0 + 2768) = xmmword_1B2287270;
  *(_QWORD *)(v0 + 2784) = 0x80000001B2336D80;
  *(_QWORD *)(v0 + 2792) = 20052;
  *(_QWORD *)(v0 + 2800) = 0xD000000000000015;
  *(_QWORD *)(v0 + 2808) = 0x80000001B2336DA0;
  *(_OWORD *)(v0 + 2816) = xmmword_1B2287280;
  *(_QWORD *)(v0 + 2832) = 0xEF64656469735F65;
  *(_QWORD *)(v0 + 2840) = 20054;
  *(_QWORD *)(v0 + 2848) = 0xD000000000000012;
  *(_QWORD *)(v0 + 2856) = 0x80000001B2336DC0;
  *(_OWORD *)(v0 + 2864) = xmmword_1B2287290;
  *(_QWORD *)(v0 + 2880) = 0x80000001B2336DC0;
  *(_QWORD *)(v0 + 2888) = 20071;
  strcpy((char *)(v0 + 2896), "has_color_map");
  *(_WORD *)(v0 + 2910) = -4864;
  *(_OWORD *)(v0 + 2912) = xmmword_1B22872A0;
  *(_QWORD *)(v0 + 2928) = 0xEE0070616D5F6C61;
  *(_QWORD *)(v0 + 2936) = 20073;
  *(_QWORD *)(v0 + 2944) = 0xD000000000000017;
  *(_QWORD *)(v0 + 2952) = 0x80000001B2336DE0;
  *(_OWORD *)(v0 + 2960) = xmmword_1B22872B0;
  *(_QWORD *)(v0 + 2976) = 0x80000001B2336E00;
  *(_QWORD *)(v0 + 2984) = 20101;
  *(_QWORD *)(v0 + 2992) = 0x666F44736168;
  *(_QWORD *)(v0 + 3000) = 0xE600000000000000;
  *(_OWORD *)(v0 + 3008) = xmmword_1B22872C0;
  *(_QWORD *)(v0 + 3024) = 0xEB0000000072756CLL;
  *(_QWORD *)(v0 + 3032) = 20103;
  strcpy((char *)(v0 + 3040), "hasVignetting");
  *(_WORD *)(v0 + 3054) = -4864;
  *(_OWORD *)(v0 + 3056) = xmmword_1B22872D0;
  *(_QWORD *)(v0 + 3072) = 0xEF676E6964617247;
  *(_QWORD *)(v0 + 3080) = 20105;
  *(_QWORD *)(v0 + 3088) = 0x6D6F6F6C42736168;
  *(_QWORD *)(v0 + 3096) = 0xE800000000000000;
  *(_OWORD *)(v0 + 3104) = xmmword_1B22872E0;
  *(_QWORD *)(v0 + 3120) = 0xED0000676E69726FLL;
  *(_QWORD *)(v0 + 3128) = 20107;
  *(_QWORD *)(v0 + 3136) = 0xD000000000000021;
  *(_QWORD *)(v0 + 3144) = 0x80000001B2336E20;
  *(_OWORD *)(v0 + 3152) = xmmword_1B22872F0;
  *(_QWORD *)(v0 + 3168) = 0xEB00000000424752;
  *(_QWORD *)(v0 + 3176) = 20109;
  strcpy((char *)(v0 + 3184), "hasClearColor");
  *(_WORD *)(v0 + 3198) = -4864;
  *(_OWORD *)(v0 + 3200) = xmmword_1B2287300;
  *(_QWORD *)(v0 + 3216) = 0xED0000676E69646ELL;
  *(_QWORD *)(v0 + 3224) = 20300;
  strcpy((char *)(v0 + 3232), "useHighQuality");
  *(_BYTE *)(v0 + 3247) = -18;
  *(_OWORD *)(v0 + 3248) = xmmword_1B2287310;
  *(_QWORD *)(v0 + 3264) = 0xE800000000000000;
  *(_QWORD *)(v0 + 3272) = 20302;
  *(_QWORD *)(v0 + 3280) = 0xD000000000000011;
  *(_QWORD *)(v0 + 3288) = 0x80000001B2336E50;
  *(_OWORD *)(v0 + 3296) = xmmword_1B2287320;
  *(_QWORD *)(v0 + 3312) = 0xE900000000000042;
  *(_QWORD *)(v0 + 3320) = 20401;
  strcpy((char *)(v0 + 3328), "needsDithering");
  *(_BYTE *)(v0 + 3343) = -18;
  *(_OWORD *)(v0 + 3344) = xmmword_1B2287330;
  *(_QWORD *)(v0 + 3360) = 0xEC00000073746E65;
  *(_QWORD *)(v0 + 3368) = 20501;
  *(_QWORD *)(v0 + 3376) = 0x4247525364616572;
  *(_QWORD *)(v0 + 3384) = 0xE800000000000000;
  *(_OWORD *)(v0 + 3392) = xmmword_1B2287340;
  *(_QWORD *)(v0 + 3408) = 0x80000001B2336E70;
  *(_QWORD *)(v0 + 3416) = 20601;
  *(_QWORD *)(v0 + 3424) = 0xD000000000000015;
  *(_QWORD *)(v0 + 3432) = 0x80000001B2336E90;
  *(_OWORD *)(v0 + 3440) = xmmword_1B2287350;
  *(_QWORD *)(v0 + 3456) = 0x80000001B2336EB0;
  *(_QWORD *)(v0 + 3464) = 20603;
  *(_QWORD *)(v0 + 3472) = 0xD000000000000014;
  *(_QWORD *)(v0 + 3480) = 0x80000001B2336ED0;
  *(_OWORD *)(v0 + 3488) = xmmword_1B2287360;
  *(_QWORD *)(v0 + 3504) = 0xEC00000073726566;
  v1 = sub_1B1B95DF4(v0);
  swift_setDeallocating();
  sub_1B1BCF93C();
  swift_arrayDestroy();
  result = swift_deallocClassInstance();
  off_1ED4B9B08 = v1;
  return result;
}

void sub_1B1C7E6D4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED4BAF38)
  {
    sub_1B1BCF93C();
    v0 = sub_1B2229A18();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED4BAF38);
  }
}

uint64_t sub_1B1C7E728(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t result;
  char v7;

  if ((a3 & 1) == 0)
  {
    if ((a6 & 1) == 0)
      return a1 < a4;
    return (a3 & 1u) < (a6 & 1u);
  }
  if ((a6 & 1) == 0)
    return (a3 & 1u) < (a6 & 1u);
  if (a1 == a4 && a2 == a5)
    return 0;
  v7 = sub_1B2229D24();
  result = 0;
  if ((v7 & 1) == 0)
    return sub_1B2229D24();
  return result;
}

uint64_t sub_1B1C7E7E0()
{
  unint64_t v0;

  v0 = sub_1B2229730();
  swift_bridgeObjectRelease();
  if (v0 >= 3)
    return 3;
  else
    return v0;
}

uint64_t sub_1B1C7E828(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1B1C7E86C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_1B1C7E86C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED4BA1B8)
  {
    v0 = sub_1B2229124();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED4BA1B8);
  }
}

uint64_t sub_1B1C7E8C0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char v12;
  uint64_t result;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  char v33;

  sub_1B1C7EC2C(0, &qword_1EEF5CFF0, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED048]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = (char *)&v23 - v9;
  sub_1B19FA070(a1, a1[3]);
  sub_1B1C7EB4C();
  sub_1B222A150();
  if (v2)
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  LOBYTE(v27) = 1;
  v11 = sub_1B22297A8();
  v14 = v12;
  if ((v12 & 1) == 0)
  {
    v17 = v11;
    v26 = 0;
    goto LABEL_8;
  }
  LOBYTE(v27) = 0;
  v15 = sub_1B2229778();
  if (!v16)
  {
    LOBYTE(v27) = 1;
    sub_1B22294CC();
    swift_allocError();
    sub_1B1C7EB90();
    sub_1B22294A8();
    swift_willThrow();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  }
  v17 = v15;
  v26 = v16;
LABEL_8:
  v33 = 2;
  sub_1B1C7EBE8();
  sub_1B2229814();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  v24 = v28;
  v25 = v27;
  v23 = v29;
  v18 = v30;
  v19 = v31;
  v20 = v32;
  result = _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  v21 = v26;
  *(_QWORD *)a2 = v17;
  *(_QWORD *)(a2 + 8) = v21;
  *(_BYTE *)(a2 + 16) = v14 & 1;
  v22 = v24;
  *(_OWORD *)(a2 + 32) = v25;
  *(_OWORD *)(a2 + 48) = v22;
  *(_OWORD *)(a2 + 64) = v23;
  *(_QWORD *)(a2 + 80) = v18;
  *(_QWORD *)(a2 + 88) = v19;
  *(_BYTE *)(a2 + 96) = v20;
  return result;
}

unint64_t sub_1B1C7EB4C()
{
  unint64_t result;

  result = qword_1EEF5CFF8;
  if (!qword_1EEF5CFF8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2286DA4, &type metadata for FunctionConstant.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5CFF8);
  }
  return result;
}

unint64_t sub_1B1C7EB90()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EEF5D000;
  if (!qword_1EEF5D000)
  {
    sub_1B1C7EC2C(255, &qword_1EEF5CFF0, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED048]);
    result = MEMORY[0x1B5E23E74](MEMORY[0x1E0DED060], v1);
    atomic_store(result, (unint64_t *)&qword_1EEF5D000);
  }
  return result;
}

unint64_t sub_1B1C7EBE8()
{
  unint64_t result;

  result = qword_1ED4BA1B0;
  if (!qword_1ED4BA1B0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B227AA4C, &type metadata for DataValue);
    atomic_store(result, (unint64_t *)&qword_1ED4BA1B0);
  }
  return result;
}

void sub_1B1C7EC2C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_1B1C7EB4C();
    v7 = a3(a1, &type metadata for FunctionConstant.CodingKeys, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

unint64_t sub_1B1C7EC88()
{
  unint64_t result;

  result = qword_1EEF5D010;
  if (!qword_1EEF5D010)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B227AA24, &type metadata for DataValue);
    atomic_store(result, (unint64_t *)&qword_1EEF5D010);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for FunctionConstant.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1B1C7ED18 + 4 * byte_1B2286AF9[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1B1C7ED4C + 4 * byte_1B2286AF4[v4]))();
}

uint64_t sub_1B1C7ED4C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1C7ED54(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B1C7ED5CLL);
  return result;
}

uint64_t sub_1B1C7ED68(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B1C7ED70);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1B1C7ED74(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1C7ED7C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FunctionConstant.CodingKeys()
{
  return &type metadata for FunctionConstant.CodingKeys;
}

uint64_t sub_1B1C7ED9C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_1B1B40E34(*(_QWORD *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for FunctionConstant.Key(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_1B1B40E34(*(_QWORD *)a2, v4, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_BYTE *)(a1 + 16);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  sub_1B1B40E74(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for FunctionConstant.Key(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_BYTE *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v3;
  sub_1B1B40E74(v4, v5, v6);
  return a1;
}

ValueMetadata *type metadata accessor for FunctionConstant.Key()
{
  return &type metadata for FunctionConstant.Key;
}

unint64_t sub_1B1C7EE90()
{
  unint64_t result;

  result = qword_1EEF5D018;
  if (!qword_1EEF5D018)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2286C04, &type metadata for FunctionConstant.Key);
    atomic_store(result, (unint64_t *)&qword_1EEF5D018);
  }
  return result;
}

unint64_t sub_1B1C7EED8()
{
  unint64_t result;

  result = qword_1EEF5D020;
  if (!qword_1EEF5D020)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2286D7C, &type metadata for FunctionConstant.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5D020);
  }
  return result;
}

unint64_t sub_1B1C7EF20()
{
  unint64_t result;

  result = qword_1EEF5D028;
  if (!qword_1EEF5D028)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2286CB4, &type metadata for FunctionConstant.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5D028);
  }
  return result;
}

unint64_t sub_1B1C7EF68()
{
  unint64_t result;

  result = qword_1EEF5D030;
  if (!qword_1EEF5D030)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2286CDC, &type metadata for FunctionConstant.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5D030);
  }
  return result;
}

uint64_t sub_1B1C7EFAC(uint64_t result, unint64_t a2, uint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  float v8;
  unint64_t v9;
  float v10;
  unint64_t v11;

  v5 = result;
  v6 = HIDWORD(a2);
  *(_OWORD *)result = xmmword_1B2287370;
  *(_DWORD *)(result + 16) = 0;
  *(_OWORD *)(result + 32) = xmmword_1B2245E60;
  *(_OWORD *)(result + 48) = xmmword_1B2245E60;
  *(_DWORD *)(result + 64) = 0;
  *(_OWORD *)(result + 72) = 0u;
  *(_OWORD *)(result + 88) = 0u;
  *(_OWORD *)(result + 97) = 0u;
  if (a2 != 0xFFFFFFFF)
  {
    swift_retain();
    if ((a2 & 0x80000000) == 0
      && (int)a2 < *(_QWORD *)(a3 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8)
      && ((v7 = *(_QWORD *)(a3 + OBJC_IVAR____TtC3VFX13EntityManager__entries), (_DWORD)v6 == -1)
       || *(_DWORD *)(v7 + 12 * (int)a2 + 8) == (_DWORD)v6))
    {
      v11 = sub_1B1D1E6B8(*(_QWORD *)(*(_QWORD *)(a3 + 136) + 8 * *(int *)(v7 + 12 * (int)a2) + 32), *(_DWORD *)(v7 + 12 * (int)a2), *(_WORD *)(v7 + 12 * (int)a2 + 4), 4, a3);
      swift_release();
      v8 = 0.0;
      if ((v11 & 0x100000000) == 0)
      {
        v8 = *(float *)&v11;
        *(_DWORD *)(v5 + 4) = v11;
      }
    }
    else
    {
      swift_release();
      v8 = 0.0;
    }
    swift_retain();
    v9 = sub_1B1D16C28(a2);
    result = swift_release();
    if ((v9 & 0x100000000) == 0)
    {
      v10 = *(float *)&v9;
      if (*(float *)&v9 < 0.0)
        v10 = INFINITY;
      *(float *)(v5 + 8) = v8 + v10;
    }
  }
  return result;
}

double sub_1B1C7F110@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_OWORD *)a1 = xmmword_1B2287370;
  *(_DWORD *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 32) = xmmword_1B2245E60;
  *(_OWORD *)(a1 + 48) = xmmword_1B2245E60;
  *(_DWORD *)(a1 + 64) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 97) = 0u;
  return result;
}

BOOL sub_1B1C7F144(uint64_t a1, uint64_t *a2, float a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  float v10;
  float v11;
  uint64_t v13;
  char v14;
  char v15;

  v5 = *a2;
  v6 = *((_DWORD *)a2 + 3);
  v7 = *((int *)a2 + 2);
  swift_retain();
  v8 = (_DWORD)v7 == -1 && v6 == 0;
  if (!v8
    && (v7 & 0x80000000) == 0
    && *(_QWORD *)(v5 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8) > v7
    && ((v9 = *(_QWORD *)(v5 + OBJC_IVAR____TtC3VFX13EntityManager__entries), v6 == -1)
     || *(_DWORD *)(v9 + 12 * (int)v7 + 8) == v6))
  {
    v13 = sub_1B1FE7FF8(*(_QWORD *)(*(_QWORD *)(v5 + 136) + 8 * *(int *)(v9 + 12 * (int)v7) + 32), *(_WORD *)(v9 + 12 * (int)v7 + 4), 8);
    v15 = v14;
    swift_release();
    if ((v15 & 1) == 0 && *(_QWORD *)(a1 + 104) != v13)
    {
      *(_QWORD *)(a1 + 104) = v13;
      if (v13)
      {
        *(_QWORD *)(a1 + 72) = 0;
        *(_DWORD *)a1 = *(_DWORD *)(a1 + 4);
      }
    }
  }
  else
  {
    swift_release();
  }
  v10 = *(float *)(a1 + 4);
  v11 = *(float *)a1 + a3;
  *(float *)a1 = v11;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  return v10 <= v11 && v11 <= *(float *)(a1 + 8);
}

uint64_t sub_1B1C7F270(uint64_t a1, char a2, uint64_t a3, char a4, uint64_t a5, float a6, float a7, float a8, uint64_t a9, uint64_t *a10)
{
  uint64_t v18;
  int v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  float v23;
  float v24;
  float v25;
  float v27;
  uint64_t v28;
  char v29;
  char v30;
  int v31;
  float v32;

  v18 = *a10;
  v19 = *((_DWORD *)a10 + 3);
  v20 = *((int *)a10 + 2);
  swift_retain();
  v21 = (_DWORD)v20 == -1 && v19 == 0;
  if (!v21
    && (v20 & 0x80000000) == 0
    && *(_QWORD *)(v18 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8) > v20
    && ((v22 = *(_QWORD *)(v18 + OBJC_IVAR____TtC3VFX13EntityManager__entries), v19 == -1)
     || *(_DWORD *)(v22 + 12 * (int)v20 + 8) == v19))
  {
    v28 = sub_1B1FE7FF8(*(_QWORD *)(*(_QWORD *)(v18 + 136) + 8 * *(int *)(v22 + 12 * (int)v20) + 32), *(_WORD *)(v22 + 12 * (int)v20 + 4), 8);
    v30 = v29;
    swift_release();
    if ((v30 & 1) == 0 && *(_QWORD *)(a5 + 104) != v28)
    {
      *(_QWORD *)(a5 + 104) = v28;
      if (v28)
      {
        *(_QWORD *)(a5 + 72) = 0;
        *(_DWORD *)a5 = *(_DWORD *)(a5 + 4);
      }
    }
  }
  else
  {
    swift_release();
  }
  v23 = *(float *)a5;
  v24 = *(float *)(a5 + 4);
  v25 = *(float *)a5 + a6;
  *(float *)a5 = v25;
  *(_QWORD *)(a5 + 88) = 0;
  *(_QWORD *)(a5 + 96) = 0;
  *(_QWORD *)(a5 + 80) = 0;
  if (v24 > v25 || v25 > *(float *)(a5 + 8))
    return 0;
  if (v23 <= v24)
  {
    if ((a2 & 1) == 0)
    {
      v27 = *(float *)&a1;
      if (*(float *)&a1 != *((float *)&a1 + 1))
        sub_1B1C4E760(*(float *)&a1, *((float *)&a1 + 1));
      v24 = v24 + v27;
    }
    *(float *)(a5 + 12) = v24;
    if ((a4 & 1) == 0)
    {
      if (*(float *)&a3 == *((float *)&a3 + 1))
      {
        *(_DWORD *)(a5 + 16) = a3;
      }
      else
      {
        sub_1B1C4E760(*(float *)&a3, *((float *)&a3 + 1));
        *(_DWORD *)(a5 + 16) = v31;
      }
    }
  }
  if (*(float *)(a5 + 12) <= v25)
  {
    if (a7 != a8)
    {
      sub_1B1C4E760(a7, a8);
      a7 = v32;
    }
    *(float *)(a5 + 4) = v25 + a7;
  }
  return 1;
}

uint64_t sub_1B1C7F468()
{
  return 0x566E776170736572;
}

uint64_t sub_1B1C7F488@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x566E776170736572 && a2 == 0xEC00000065756C61)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_1B2229D24();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_1B1C7F534()
{
  sub_1B1C8AE04();
  return sub_1B222A1D4();
}

uint64_t sub_1B1C7F55C()
{
  sub_1B1C8AE04();
  return sub_1B222A1E0();
}

uint64_t sub_1B1C7F584@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t *v14;

  v14 = a2;
  sub_1B19F8E54(0, &qword_1ED4BAAE0, (uint64_t (*)(void))sub_1B1C8AE04, (uint64_t)&type metadata for ParticleRespawn.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v7);
  v9 = (char *)&v13 - v8;
  sub_1B19FA070(a1, a1[3]);
  sub_1B1C8AE04();
  sub_1B222A150();
  if (v2)
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  v10 = v14;
  v11 = sub_1B22297FC();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  result = _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  *v10 = v11;
  return result;
}

uint64_t sub_1B1C7F6C4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v9;

  sub_1B19F8E54(0, &qword_1EEF5D0D0, (uint64_t (*)(void))sub_1B1C8AE04, (uint64_t)&type metadata for ParticleRespawn.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v3 = v2;
  v4 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v5);
  v7 = (char *)&v9 - v6;
  sub_1B19FA070(a1, a1[3]);
  sub_1B1C8AE04();
  sub_1B222A180();
  sub_1B2229940();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v3);
}

uint64_t sub_1B1C7F7C4()
{
  return 0x6D695479616C6564;
}

uint64_t sub_1B1C7F7E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x6D695479616C6564 && a2 == 0xE900000000000065)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_1B2229D24();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_1B1C7F880()
{
  sub_1B1C8ADC0();
  return sub_1B222A1D4();
}

uint64_t sub_1B1C7F8A8()
{
  sub_1B1C8ADC0();
  return sub_1B222A1E0();
}

uint64_t sub_1B1C7F8D0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1B1C7FA5C(a1, &qword_1ED4BABA8, (uint64_t (*)(void))sub_1B1C8ADC0, (uint64_t)&type metadata for ParticleSpawnDelay.CodingKeys, a2);
}

uint64_t sub_1B1C7F8FC(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1B1C7FBC8(a1, a2, a3, &qword_1EEF5D0C8, (uint64_t (*)(void))sub_1B1C8ADC0, (uint64_t)&type metadata for ParticleSpawnDelay.CodingKeys);
}

void sub_1B1C7F928(_DWORD *a1@<X8>)
{
  *a1 = 1065353216;
}

uint64_t sub_1B1C7F934()
{
  return 0x6E6F697461727564;
}

uint64_t sub_1B1C7F94C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x6E6F697461727564 && a2 == 0xE800000000000000)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_1B2229D24();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_1B1C7F9E0()
{
  sub_1B1C8AD7C();
  return sub_1B222A1D4();
}

uint64_t sub_1B1C7FA08()
{
  sub_1B1C8AD7C();
  return sub_1B222A1E0();
}

uint64_t sub_1B1C7FA30@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1B1C7FA5C(a1, &qword_1EEF5D0B0, (uint64_t (*)(void))sub_1B1C8AD7C, (uint64_t)&type metadata for ParticleSpawnDuration.CodingKeys, a2);
}

uint64_t sub_1B1C7FA5C@<X0>(_QWORD *a1@<X0>, unint64_t *a2@<X3>, uint64_t (*a3)(void)@<X4>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  _DWORD *v14;
  int v15;
  int v16;
  uint64_t result;
  _QWORD v18[2];

  v18[0] = a5;
  sub_1B19F8E54(0, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v8 = v7;
  v9 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v10);
  v12 = (char *)v18 - v11;
  sub_1B19FA070(a1, a1[3]);
  a3();
  v13 = v18[1];
  sub_1B222A150();
  if (v13)
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  v14 = (_DWORD *)v18[0];
  sub_1B22297F0();
  v16 = v15;
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  result = _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  *v14 = v16;
  return result;
}

uint64_t sub_1B1C7FB9C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1B1C7FBC8(a1, a2, a3, &qword_1EEF5D0C0, (uint64_t (*)(void))sub_1B1C8AD7C, (uint64_t)&type metadata for ParticleSpawnDuration.CodingKeys);
}

uint64_t sub_1B1C7FBC8(_QWORD *a1, uint64_t a2, uint64_t a3, unint64_t *a4, uint64_t (*a5)(void), uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v15;

  sub_1B19F8E54(0, a4, a5, a6, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v9 = v8;
  v10 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v11);
  v13 = (char *)&v15 - v12;
  sub_1B19FA070(a1, a1[3]);
  a5();
  sub_1B222A180();
  sub_1B2229934();
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, v9);
}

uint64_t sub_1B1C7FCCC()
{
  sub_1B222A06C();
  sub_1B2228824();
  return sub_1B222A0C0();
}

uint64_t sub_1B1C7FD24()
{
  return sub_1B2228824();
}

uint64_t sub_1B1C7FD44()
{
  sub_1B222A06C();
  sub_1B2228824();
  return sub_1B222A0C0();
}

uint64_t sub_1B1C7FD98@<X0>(BOOL *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = sub_1B2229730();
  result = swift_bridgeObjectRelease();
  *a1 = v2 != 0;
  return result;
}

void sub_1B1C7FDE8(uint64_t a1@<X8>)
{
  strcpy((char *)a1, "rateOverTime");
  *(_BYTE *)(a1 + 13) = 0;
  *(_WORD *)(a1 + 14) = -5120;
}

uint64_t sub_1B1C7FE0C()
{
  return 0x7265764F65746172;
}

uint64_t sub_1B1C7FE2C@<X0>(BOOL *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = sub_1B2229730();
  result = swift_bridgeObjectRelease();
  *a1 = v2 != 0;
  return result;
}

uint64_t sub_1B1C7FE80()
{
  sub_1B1C8AAF8();
  return sub_1B222A1D4();
}

uint64_t sub_1B1C7FEA8()
{
  sub_1B1C8AAF8();
  return sub_1B222A1E0();
}

uint64_t sub_1B1C7FED0(uint64_t a1, uint64_t a2)
{
  swift_retain();
  sub_1B1FDF510(a1, a2, a1, a2);
  return swift_release();
}

uint64_t sub_1B1C7FF24@<X0>(_QWORD *a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  _DWORD *v10;
  int v11;
  int v12;
  uint64_t result;
  uint64_t v14;
  _DWORD *v15;

  v15 = a2;
  sub_1B19F8E54(0, &qword_1ED4BABF0, (uint64_t (*)(void))sub_1B1C8AAF8, (uint64_t)&type metadata for ParticleContinuousSpawn.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v7);
  v9 = (char *)&v14 - v8;
  sub_1B19FA070(a1, a1[3]);
  sub_1B1C8AAF8();
  sub_1B222A150();
  if (v2)
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  v10 = v15;
  sub_1B22297F0();
  v12 = v11;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  result = _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  *v10 = v12;
  return result;
}

uint64_t sub_1B1C80070(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v9;

  sub_1B19F8E54(0, &qword_1EEF5D060, (uint64_t (*)(void))sub_1B1C8AAF8, (uint64_t)&type metadata for ParticleContinuousSpawn.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v3 = v2;
  v4 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v5);
  v7 = (char *)&v9 - v6;
  sub_1B19FA070(a1, a1[3]);
  sub_1B1C8AAF8();
  sub_1B222A180();
  sub_1B2229934();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v3);
}

uint64_t sub_1B1C80178(uint64_t a1)
{
  return sub_1B1C870AC(a1);
}

uint64_t sub_1B1C8018C()
{
  return type metadata accessor for ParticleContinousSpawnSystem();
}

void sub_1B1C801A8(_DWORD *a1@<X8>)
{
  *a1 = 1092616192;
}

uint64_t sub_1B1C801B4(uint64_t a1, uint64_t *a2, uint64_t a3, float a4, float a5)
{
  uint64_t result;
  uint64_t v11;
  float v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  unsigned __int8 v19;
  int v20;

  result = sub_1B1C7F144(a1, a2, a4);
  if ((result & 1) != 0)
  {
    v11 = a2[1];
    result = sub_1B1D16B60(v11, (uint64_t)&v18);
    if ((unint64_t)BYTE12(v18) << 32 == 0x200000000)
    {
LABEL_3:
      v12 = (float)(a4 * a5) + *(float *)(a1 + 64);
      goto LABEL_11;
    }
    v13 = v19;
    result = sub_1B1D16C40(v11, &v18);
    v14 = v18;
    if ((_QWORD)v18)
    {
      v20 = v13;
      v15 = swift_bridgeObjectRetain();
      sub_1B1C87AFC(v15);
      v16 = *(_QWORD *)(v14 + 16);
      result = swift_bridgeObjectRelease();
      if (v20 != 2)
      {
        if (!v16)
          return result;
        goto LABEL_3;
      }
    }
    else
    {
      if (v13 != 2)
        return result;
      v16 = 0;
    }
    v12 = *(float *)(a1 + 64) + (float)((float)((float)v16 * a5) * a4);
LABEL_11:
    *(float *)(a1 + 64) = v12;
    if (v12 >= 1.0)
    {
      v17 = a2[4];
      sub_1B1BEE528((uint64_t)a2);
      sub_1B1FE7BE0(v17, a3, a1, (uint64_t)a2);
      result = sub_1B1B4F21C((uint64_t)a2);
      *(float *)(a1 + 64) = fminf(*(float *)(a1 + 64) - floorf(*(float *)(a1 + 64)), 1.0);
    }
  }
  return result;
}

uint64_t type metadata accessor for ParticleContinousSpawnSystem()
{
  return objc_opt_self();
}

uint64_t sub_1B1C80360(uint64_t *a1)
{
  uint64_t v2;
  float v3;
  float v4;
  uint64_t v5;
  unint64_t v6;
  float v7;

  v2 = *a1;
  swift_retain();
  sub_1B1E5267C();
  v4 = v3;
  v5 = a1[1];
  swift_retain();
  v6 = sub_1B1D16C34(v5);
  swift_release();
  if ((v6 & 0x100000000) != 0)
    v7 = 10.0;
  else
    v7 = *(float *)&v6;
  sub_1B1BEE528((uint64_t)a1);
  swift_retain();
  sub_1B1FEABD8(v5, v2, a1, v2, v4, v7);
  swift_release();
  sub_1B1B4F21C((uint64_t)a1);
  return swift_release();
}

const char *sub_1B1C80424()
{
  return "Continous Spawn";
}

uint64_t sub_1B1C80438(char *a1, unsigned __int8 *a2)
{
  return sub_1B1F97CD4(*a1, *a2);
}

uint64_t sub_1B1C80444()
{
  sub_1B222A06C();
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

uint64_t sub_1B1C804E0()
{
  sub_1B2228824();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B1C80558()
{
  sub_1B222A06C();
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

uint64_t sub_1B1C805F0@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B1C86F74();
  *a1 = result;
  return result;
}

void sub_1B1C80624(unint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  uint64_t v4;
  BOOL v5;
  unint64_t v6;

  v2 = *v1;
  v3 = 0x80000001B2329930;
  v4 = 0x776F6C6C6F66;
  if (v2 != 1)
    v4 = 0x7261656E696CLL;
  v5 = v2 == 0;
  if (*v1)
    v6 = v4;
  else
    v6 = 0xD000000000000010;
  if (!v5)
    v3 = 0xE600000000000000;
  *a1 = v6;
  a1[1] = v3;
}

unint64_t sub_1B1C80680()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x776F6C6C6F66;
  if (*v0 != 1)
    v1 = 0x7261656E696CLL;
  if (*v0)
    return v1;
  else
    return 0xD000000000000010;
}

uint64_t sub_1B1C806D8@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B1C86F74();
  *a1 = result;
  return result;
}

uint64_t sub_1B1C80704()
{
  sub_1B1C8AB3C();
  return sub_1B222A1D4();
}

uint64_t sub_1B1C8072C()
{
  sub_1B1C8AB3C();
  return sub_1B222A1E0();
}

uint64_t sub_1B1C80754(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE v10[16];

  sub_1B19F8E54(0, &qword_1EEF5D078, (uint64_t (*)(void))sub_1B1C8AB3C, (uint64_t)&type metadata for ParticleSpawnOverDistance.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v6);
  v8 = &v10[-v7];
  sub_1B19FA070(a1, a1[3]);
  sub_1B1C8AB3C();
  sub_1B222A180();
  v10[15] = 0;
  sub_1B2229934();
  if (!v1)
  {
    v10[14] = 1;
    sub_1B222991C();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v5 + 8))(v8, v4);
}

uint64_t sub_1B1C80894(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;
  char v5;

  v3 = *(_QWORD *)a1;
  swift_retain();
  v5 = 0;
  if ((sub_1B1FF0FEC(*(_QWORD *)(a1 + 32), v3, v3, &v5) & 1) != 0)
  {
    sub_1B2229430();
    sub_1B2228890();
    sub_1B1BC3C70();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    sub_1B2228890();
    sub_1B2228890();
    result = sub_1B2229688();
    __break(1u);
  }
  else
  {
    sub_1B1FD6458(*(_QWORD *)(a1 + 8), v3, &v5);
    sub_1B1B4F21C(a1);
    swift_release();
    return v1;
  }
  return result;
}

unint64_t sub_1B1C80A0C(unint64_t result, uint64_t a2, _BYTE *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v6;
  int *v7;
  uint64_t v8;
  int v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;

  v3 = *(_QWORD *)(result + 8);
  v4 = *(_QWORD *)(v3 + 16);
  if (v4)
  {
    v6 = (uint64_t *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
    v7 = (int *)(v3 + 36);
    do
    {
      v8 = *(v7 - 1);
      v9 = *v7;
      if (((_DWORD)v8 != -1 || v9 != 0) && (v8 & 0x80000000) == 0 && v6[1] > v8)
      {
        v11 = *v6;
        if ((v9 == -1 || *(_DWORD *)(v11 + 12 * (int)v8 + 8) == v9)
          && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a2 + 136) + 8 * *(int *)(v11 + 12 * (int)v8) + 32) + 120) == 1)
        {
          v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 80) + 8 * *(__int16 *)(v11 + 12 * (int)v8 + 6) + 32) + 16);
          v13 = *(_QWORD *)(v12 + 128);
          if (*(_QWORD *)(v13 + 16))
          {
            result = sub_1B1DC3AC8((uint64_t)&type metadata for EmitterShape);
            if ((v14 & 1) != 0
              && *(ValueMetadata **)(*(_QWORD *)(v12 + 24) + 16 * *(_QWORD *)(*(_QWORD *)(v13 + 56) + 8 * result) + 32) == &type metadata for EmitterShape)
            {
              *a3 = 1;
            }
          }
        }
      }
      v7 += 2;
      --v4;
    }
    while (v4);
  }
  return result;
}

uint64_t sub_1B1C80B48(uint64_t a1, uint64_t a2, int a3, uint64_t a4, float a5, float a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v15;
  Swift::Int v16;
  uint64_t v17;
  _QWORD *v18;
  int v19;
  _BOOL4 v20;
  float32x4_t v21;
  _BOOL4 v22;
  float32x4_t v23;
  float32x4_t v24;
  float v25;
  float v26;
  float v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  int32x4_t v37;
  uint64_t v38;
  float v39;
  uint64_t v40;
  float v41;
  __int128 v42;
  uint64_t v43;
  float v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  float32x4_t v48;
  unsigned int *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  os_unfair_lock_s *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  uint64_t v67;
  float32x4_t *v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  int v77;
  unsigned int *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  os_unfair_lock_s *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unsigned int v91;
  uint64_t v92;
  uint64_t v93;
  int32x4_t v94;
  int32x4_t *v95;
  unint64_t v96;
  uint64_t v97;
  unsigned int *v98;
  uint64_t v99;
  uint64_t v100;
  __int16 v101;
  float32x4_t v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  float32x4_t v109;
  __n128 v110;
  float32x4_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t *v114;
  float32x4_t v115;
  float32x4_t v116;
  float32x4_t v117;
  float32x4_t v118;
  int v119;
  float32x4_t v120;
  _QWORD *v121;
  float32x4_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  float32x4_t v126;
  uint64_t v127;
  float32x4_t v128;
  uint64_t v129;
  float32x4_t v130;
  uint64_t *v131;
  __n128 v132;
  float32x4_t v133;
  uint64_t v134;
  uint64_t v135;
  _BYTE v136[80];
  uint64_t v137[12];
  uint64_t v138[12];
  _OWORD v139[2];
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  _QWORD *v144;
  uint64_t v145;
  _OWORD v146[2];
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  _QWORD *v151;
  uint64_t v152;
  char v153[48];
  float32x4_t v154;
  char v155;
  _OWORD v156[2];
  uint64_t v157;
  _OWORD v158[2];
  uint64_t v159;
  _OWORD v160[2];
  uint64_t v161;
  _BYTE v162[40];
  _BYTE v163[40];
  uint64_t v164;
  int v165;
  char v166;
  unint64_t v167;
  char v168;
  uint64_t v169;
  uint64_t v170;

  v7 = v6;
  result = sub_1B1C7F144(a1, (uint64_t *)a2, a5);
  if ((result & 1) == 0)
    return result;
  if (a6 <= 0.0)
  {
    *(_OWORD *)(a1 + 32) = xmmword_1B2245E60;
    *(_OWORD *)(a1 + 48) = xmmword_1B2245E60;
    return result;
  }
  v15 = *(_QWORD *)(a2 + 8);
  if (sub_1B1FD568C((uint64_t)&type metadata for ParticleSubSpawn, (uint64_t)&off_1E638A010, v15))
  {
    result = sub_1B1FEAE04(v15, a4, a1, a5, a6);
    v16 = (uint64_t)*(float *)(a1 + 64);
    if (v16 >= 1)
    {
      v17 = *(_QWORD *)(a2 + 32);
      sub_1B1BEE528(a2);
      sub_1B1FE7DA0(v17, a4, v16, (_QWORD *)a1, a2);
      result = sub_1B1B4F21C(a2);
      *(float *)(a1 + 64) = *(float *)(a1 + 64) - (float)v16;
    }
    return result;
  }
  v18 = *(_QWORD **)(a2 + 32);
  sub_1B1D15764(v18, (uint64_t)v136);
  sub_1B1A18378((uint64_t)v136, (uint64_t)v153, qword_1ED4B8BB0, (uint64_t)&type metadata for WorldTransform);
  if (v155 != 1)
  {
    v109 = v154;
    v110 = *(__n128 *)(a1 + 32);
    v20 = sub_1B1BF30AC(v110);
    v21 = v109;
    v22 = v20;
    if (v20)
    {
      v23 = vsubq_f32((float32x4_t)v110, v109);
      v24 = vmulq_f32(v23, v23);
      v25 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v24, 2), vaddq_f32(v24, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v24.f32, 1))).f32[0]);
      v26 = 0.0;
      if ((a3 & 1) != 0)
        v26 = 0.25;
      v27 = (float)(v25 * a6) - v26;
      v28 = *(float32x4_t *)(a1 + 48);
      v21 = (float32x4_t)v110;
    }
    else
    {
      *(float32x4_t *)(a1 + 32) = v109;
      *(float32x4_t *)(a1 + 48) = v109;
      v27 = 0.0;
      v28 = v109;
    }
    v111 = v21;
    v132 = (__n128)vsubq_f32(v21, v28);
    if (sub_1B1BF30E8(v132))
    {
      v29.i64[0] = 0x3F0000003F000000;
      v29.i64[1] = 0x3F0000003F000000;
      v30 = vmulq_f32(vsubq_f32(v109, v111), v29);
    }
    else
    {
      v31 = vsubq_f32(v111, v109);
      v32 = vmulq_f32(v31, v31);
      v33 = vmulq_f32((float32x4_t)v132, (float32x4_t)v132);
      v33.i64[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v33, 2), vaddq_f32(v33, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v33.f32, 1))).u64[0];
      v34 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v33.f32, 0);
      v34.i32[3] = 0;
      v35 = vrsqrteq_f32(v34);
      v36 = vmulq_f32(v35, vrsqrtsq_f32(v34, vmulq_f32(v35, v35)));
      v37 = vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vdup_n_s16(v33.f32[0] != 0.0)), 0x1FuLL));
      v37.i32[3] = 0;
      v30 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v37), (int8x16_t)vmulq_f32((float32x4_t)v132, vmulq_n_f32(vmulq_f32(v36, vrsqrtsq_f32(v34, vmulq_f32(v36, v36))), sqrtf(v32.f32[2] + vaddv_f32(*(float32x2_t *)v32.f32)) * 0.5)), (int8x16_t)v132);
    }
    v133 = v30;
    v38 = (uint64_t)v27;
    if ((uint64_t)v27 >= 1)
    {
      sub_1B1BEE528(a2);
      sub_1B1FE7DA0((uint64_t)v18, a4, (uint64_t)v27, (_QWORD *)a1, a2);
      sub_1B1B4F21C(a2);
    }
    v39 = floorf(v27);
    if (v39 <= 0.0)
    {
      v41 = 0.0;
      v40 = v38;
      if ((a3 & v22 & 1) == 0)
      {
LABEL_28:
        v42 = *(_OWORD *)(a2 + 104);
        v160[0] = *(_OWORD *)(a2 + 88);
        v160[1] = v42;
        v161 = *(_QWORD *)(a2 + 120);
        result = *(_QWORD *)&v160[0];
        v164 = *(_QWORD *)&v160[0];
        v165 = DWORD2(v160[0]);
        v166 = BYTE12(v160[0]);
        v167 = v42 & 0xFFFFFFFFFFFFFFF7;
        v168 = BYTE8(v42);
        v169 = v161;
        if (v40 < 1)
          return result;
        swift_retain();
        sub_1B1E8FCE4(a4, (uint64_t)&v164, 0x200000000, v137);
        sub_1B1A18378((uint64_t)v137, (uint64_t)v146, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
        if (*(_QWORD *)&v146[0])
        {
          v99 = v38;
          v100 = a4;
          if (v152 >= 1)
          {
            v108 = v149;
            if (v149)
            {
              v43 = 0;
              v130 = vaddq_f32(v111, v133);
              v44 = v41 / v39;
              v45 = v151;
              v46 = v151[4];
              LODWORD(v170) = *(unsigned __int8 *)(v150 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
              v47 = v152 - v40;
              v156[0] = v146[0];
              v156[1] = v146[1];
              v157 = v147;
              v105 = (uint64_t)(v151 + 6);
              v106 = v148;
              v103 = v152 - 1;
              v104 = v151 + 8;
              v48 = v109;
              v48.i32[3] = 1.0;
              v102 = v48;
              v48.f32[0] = v44;
              v126 = v48;
              v128 = vsubq_f32(v109, v111);
              v101 = a3;
              v107 = v46;
              do
              {
                v134 = v7;
                v124 = v43;
                v49 = (unsigned int *)(v106 + 48 * v43);
                v50 = *v49;
                v51 = v49[2];
                v114 = (uint64_t *)*((_QWORD *)v49 + 2);
                v52 = *((_QWORD *)v49 + 4);
                v112 = v49[1];
                v113 = *((_QWORD *)v49 + 3);
                v53 = *((_QWORD *)v49 + 5);
                if ((_DWORD)v170)
                {
                  v54 = *(os_unfair_lock_s **)(v53 + 376);
                  swift_retain_n();
                  os_unfair_lock_lock(v54);
                  os_unfair_lock_lock(*(os_unfair_lock_t *)(v53 + 344));
                  swift_release();
                }
                else
                {
                  swift_retain();
                }
                ecs_stack_allocator_push_snapshot(v46);
                sub_1B1A18378(v105, (uint64_t)v163, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
                v55 = v45[4];
                v56 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v53 + 40) + 16) + 32) + 16) + 1;
                swift_retain();
                v45[6] = ecs_stack_allocator_allocate(v55, 48 * v56, 8);
                v45[7] = v56;
                v104[1] = 0;
                v104[2] = 0;
                *v104 = 0;
                swift_release();
                v57 = sub_1B1A12038((uint64_t)&type metadata for Position, (uint64_t)&off_1E63C2398, v114, v113, v52, (uint64_t)v45);
                if ((v58 & 1) != 0)
                {
                  v59 = v134;
                  v61 = v120;
                  v60 = v122;
                  v62 = v126;
                  v64 = v117;
                  v63 = v118;
                  v66 = v115;
                  v65 = v116;
                }
                else
                {
                  v59 = v134;
                  v61 = v120;
                  v60 = v122;
                  v62 = v126;
                  v64 = v117;
                  v63 = v118;
                  v66 = v115;
                  v65 = v116;
                  if ((_DWORD)v50 != (_DWORD)v112)
                  {
                    v67 = v112 - v50;
                    v68 = (float32x4_t *)(v57 + 16 * v50);
                    do
                    {
                      if (v51 >= v47)
                      {
                        if (v103 == v51 && (v101 & 1) != 0)
                        {
                          *v68 = v102;
                          if (*(_BYTE *)(a1 + 112) == 1)
                          {
                            v69 = v109;
                            v69.i32[3] = v66.i32[3];
                            v70 = vsubq_f32(v109, v109);
                            v70.i32[3] = v65.i32[3];
                            v65 = v70;
                            v70.i32[3] = 1.0;
                            *v68 = v70;
                            v66 = v69;
                          }
                        }
                        else
                        {
                          *(_OWORD *)(a1 + 48) = *(_OWORD *)(a1 + 32);
                          if ((v101 & 0x100) != 0)
                          {
                            v71 = vmlaq_n_f32(v111, v128, v62.f32[0]);
                            v71.i32[3] = v61.i32[3];
                            v61 = v71;
                          }
                          else
                          {
                            v71 = vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v130, v62.f32[0] * (float)((float)(1.0 - v62.f32[0]) + (float)(1.0 - v62.f32[0]))), v111, (float)(1.0 - v62.f32[0]) * (float)(1.0 - v62.f32[0])), v109, v62.f32[0] * v62.f32[0]);
                            v71.i32[3] = v60.i32[3];
                            v60 = v71;
                          }
                          *(float32x4_t *)(a1 + 32) = v71;
                          v72 = v71;
                          v72.i32[3] = 1.0;
                          *v68 = v72;
                          if (*(_BYTE *)(a1 + 112) == 1)
                          {
                            v73 = vsubq_f32(v71, v109);
                            v71.i32[3] = v64.i32[3];
                            v73.i32[3] = v63.i32[3];
                            v63 = v73;
                            v73.i32[3] = 1.0;
                            *v68 = v73;
                            v64 = v71;
                          }
                          v62.f32[0] = v44 + v62.f32[0];
                        }
                      }
                      ++v51;
                      ++v68;
                      --v67;
                    }
                    while (v67);
                  }
                }
                v115 = v66;
                v116 = v65;
                v117 = v64;
                v118 = v63;
                v126 = v62;
                v120 = v61;
                v122 = v60;
                sub_1B1F05D48(v45, (unsigned __int16 **)v156, (uint64_t)v163);
                v7 = v59;
                sub_1B1F03804((char *)v53);
                v46 = v107;
                ecs_stack_allocator_pop_snapshot(v107);
                if ((v170 & 1) != 0)
                {
                  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v53 + 344));
                  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v53 + 376));
                }
                swift_release();
                v43 = v124 + 1;
              }
              while (v124 + 1 != v108);
            }
          }
          sub_1B19ED748(v137);
          v38 = v99;
          a4 = v100;
        }
        if (v38 < 1)
          return sub_1B19ED720((uint64_t)v160);
        sub_1B1E8FCE4(a4, (uint64_t)v160, 0x200000000, v138);
        sub_1B1A18378((uint64_t)v138, (uint64_t)v139, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
        if (!*(_QWORD *)&v139[0])
          return sub_1B19ED720((uint64_t)v160);
        if (v145 <= 0 || (v129 = v142) == 0)
        {
LABEL_80:
          sub_1B19ED720((uint64_t)v160);
          return (uint64_t)sub_1B19ED748(v138);
        }
        v74 = 0;
        v75 = v144;
        v76 = v144[4];
        v77 = *(unsigned __int8 *)(v143 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
        v158[0] = v139[0];
        v158[1] = v139[1];
        v125 = v141;
        v127 = v76;
        v159 = v140;
        v123 = (uint64_t)(v144 + 6);
        v121 = v144 + 8;
        v119 = v77;
        while (1)
        {
          v135 = v7;
          v78 = (unsigned int *)(v125 + 48 * v74);
          v79 = *v78;
          v170 = v78[1];
          v80 = *((_QWORD *)v78 + 3);
          v131 = (uint64_t *)*((_QWORD *)v78 + 2);
          v81 = *((_QWORD *)v78 + 4);
          v82 = *((_QWORD *)v78 + 5);
          if (v77)
          {
            v83 = *(os_unfair_lock_s **)(v82 + 376);
            swift_retain_n();
            os_unfair_lock_lock(v83);
            os_unfair_lock_lock(*(os_unfair_lock_t *)(v82 + 344));
            swift_release();
          }
          else
          {
            swift_retain();
          }
          ecs_stack_allocator_push_snapshot(v76);
          sub_1B1A18378(v123, (uint64_t)v162, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
          v84 = v75[4];
          v85 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v82 + 40) + 16) + 32) + 16) + 1;
          swift_retain();
          v75[6] = ecs_stack_allocator_allocate(v84, 48 * v85, 8);
          v75[7] = v85;
          v121[1] = 0;
          v121[2] = 0;
          *v121 = 0;
          swift_release();
          v86 = sub_1B1A12038((uint64_t)&type metadata for ParticleParentID, (uint64_t)&off_1E63895A0, v131, v80, v81, (uint64_t)v75);
          if ((v87 & 1) != 0)
          {
            v89 = v135;
            v77 = v119;
          }
          else
          {
            v88 = v170;
            v89 = v135;
            v77 = v119;
            if ((_DWORD)v79 != (_DWORD)v170)
            {
              v90 = *(_QWORD *)(a1 + 104);
              if (v90 >= 0xFFFFFFFFLL)
                v90 = 0xFFFFFFFFLL;
              v91 = v90 & ~(v90 >> 63);
              v92 = v170 - v79;
              if ((unint64_t)(v170 - v79) >= 8)
              {
                v93 = (v92 & 0xFFFFFFFFFFFFFFF8) + v79;
                v94 = vdupq_n_s32(v91);
                v95 = (int32x4_t *)(v86 + 4 * v79 + 16);
                v96 = v92 & 0xFFFFFFFFFFFFFFF8;
                do
                {
                  v95[-1] = v94;
                  *v95 = v94;
                  v95 += 2;
                  v96 -= 8;
                }
                while (v96);
                if (v92 == (v92 & 0xFFFFFFFFFFFFFFF8))
                  goto LABEL_77;
              }
              else
              {
                v93 = v79;
              }
              v97 = v88 - v93;
              v98 = (unsigned int *)(v86 + 4 * v93);
              do
              {
                *v98++ = v91;
                --v97;
              }
              while (v97);
            }
          }
LABEL_77:
          sub_1B1F05D48(v75, (unsigned __int16 **)v158, (uint64_t)v162);
          v7 = v89;
          sub_1B1F03804((char *)v82);
          v76 = v127;
          ecs_stack_allocator_pop_snapshot(v127);
          if ((v77 & 1) != 0)
          {
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v82 + 344));
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v82 + 376));
          }
          swift_release();
          if (++v74 == v129)
            goto LABEL_80;
        }
      }
    }
    else
    {
      v40 = (uint64_t)v27;
      v41 = v39 / v27;
      if ((a3 & 1) == 0 || !v22)
        goto LABEL_28;
    }
    v40 = v38 + 1;
    goto LABEL_28;
  }
  if (qword_1ED4BF430 != -1)
    swift_once();
  swift_retain();
  v19 = sub_1B2228E90();
  if (qword_1ED4BF658 != -1)
    swift_once();
  *(_QWORD *)&v146[0] = 0;
  swift_retain();
  sub_1B1F1AD70(v19, (uint64_t *)v146, 0xD000000000000042, 0x80000001B2337180);
  swift_release();
  return swift_release();
}

uint64_t type metadata accessor for ParticleSpawnOverDistance.ParticleSpawnOverDistanceSystem()
{
  return objc_opt_self();
}

uint64_t sub_1B1C815DC(uint64_t a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  sub_1B1C80894(a1);
  return v2;
}

uint64_t sub_1B1C81618(uint64_t *a1)
{
  uint64_t v2;
  float v3;
  float v4;
  unint64_t v5;
  uint64_t v6;
  float v7;
  __int16 v8;
  __int16 v9;

  v2 = *a1;
  swift_retain();
  sub_1B1E5267C();
  v4 = v3;
  v5 = a1[1];
  swift_retain();
  v6 = sub_1B1D16D2C(v5);
  swift_release();
  if ((v6 & 0xFF00000000) == 0x200000000)
    v7 = 10.0;
  else
    v7 = *(float *)&v6;
  sub_1B1BEE528((uint64_t)a1);
  if ((((v6 & 0xFF00000000) != 0x200000000) & BYTE5(v6) & 1) != 0)
    v8 = 256;
  else
    v8 = 0;
  v9 = v8 | BYTE4(v6) & 1;
  swift_retain();
  sub_1B1FEB014(v5, v2, (uint64_t)a1, v9, v2, v4, v7);
  swift_release();
  sub_1B1B4F21C((uint64_t)a1);
  return swift_release();
}

const char *sub_1B1C8170C()
{
  return "Spawn Over Distance";
}

void sub_1B1C81720(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __int16 v4;
  float v5;

  v5 = sub_1B1C87244(a1);
  if (!v2)
  {
    *(float *)a2 = v5;
    *(_BYTE *)(a2 + 4) = v4 & 1;
    *(_BYTE *)(a2 + 5) = HIBYTE(v4) & 1;
  }
}

uint64_t sub_1B1C81758(_QWORD *a1)
{
  return sub_1B1C80754(a1);
}

uint64_t sub_1B1C81788()
{
  return type metadata accessor for ParticleSpawnOverDistance.ParticleSpawnOverDistanceSystem();
}

void sub_1B1C817A4(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 1092616192;
  *(_WORD *)(a1 + 4) = 0;
}

uint64_t sub_1B1C817B4(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1B1F960B4(*a1, *a2);
}

uint64_t sub_1B1C817C0()
{
  sub_1B222A06C();
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

uint64_t sub_1B1C8186C()
{
  sub_1B2228824();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B1C818F4()
{
  sub_1B222A06C();
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

uint64_t sub_1B1C8199C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B1C86F74();
  *a1 = result;
  return result;
}

void sub_1B1C819D0(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xEC000000656D6954;
  v4 = 0xE800000000000000;
  v5 = 0x6E6F697461727564;
  if (v2 != 1)
  {
    v5 = 0x6954746165706572;
    v4 = 0xEA0000000000656DLL;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 0x7265764F65746172;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

uint64_t sub_1B1C81A3C()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x6E6F697461727564;
  if (*v0 != 1)
    v1 = 0x6954746165706572;
  if (*v0)
    return v1;
  else
    return 0x7265764F65746172;
}

uint64_t sub_1B1C81AA4@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B1C86F74();
  *a1 = result;
  return result;
}

uint64_t sub_1B1C81AD0()
{
  sub_1B1C8AB80();
  return sub_1B222A1D4();
}

uint64_t sub_1B1C81AF8()
{
  sub_1B1C8AB80();
  return sub_1B222A1E0();
}

uint64_t sub_1B1C81B20(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v12;
  char v13;
  uint64_t v14;

  v3 = v1;
  sub_1B19F8E54(0, &qword_1EEF5D090, (uint64_t (*)(void))sub_1B1C8AB80, (uint64_t)&type metadata for ParticleVariableSpawn.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = (char *)&v12 - v9;
  sub_1B19FA070(a1, a1[3]);
  sub_1B1C8AB80();
  sub_1B222A180();
  v14 = *v3;
  v13 = 0;
  sub_1B1C8AC7C(0, (unint64_t *)&qword_1ED4BA5A8);
  sub_1B1C8ABC4(qword_1EEF5B108, MEMORY[0x1E0DEB198], MEMORY[0x1E0DEB880]);
  sub_1B2229958();
  if (!v2)
  {
    v14 = v3[1];
    v13 = 1;
    sub_1B2229958();
    v14 = v3[2];
    v13 = 2;
    sub_1B2229958();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
}

double sub_1B1C81CF4@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  uint64_t v6;

  sub_1B1C873E8(a1, &v5);
  if (!v2)
  {
    result = *(double *)&v5;
    *(_OWORD *)a2 = v5;
    *(_QWORD *)(a2 + 16) = v6;
  }
  return result;
}

uint64_t sub_1B1C81D34(_QWORD *a1)
{
  return sub_1B1C81B20(a1);
}

uint64_t sub_1B1C81D48()
{
  return type metadata accessor for ParticleVariableSpawnSystem();
}

double sub_1B1C81D64@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_OWORD *)a1 = xmmword_1B2287380;
  result = 2.00000047;
  *(_QWORD *)(a1 + 16) = 0x400000003F800000;
  return result;
}

uint64_t sub_1B1C81D80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, float a5)
{
  int v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  BOOL v9;
  int *v14;
  uint64_t v15;
  __int16 v16;
  uint64_t result;

  v5 = *(_DWORD *)(a3 + 12);
  v6 = *(int *)(a3 + 8);
  v7 = (_DWORD)v6 == -1 && v5 == 0;
  if (v7 || (v6 & 0x80000000) != 0 || *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8) <= v6)
    goto LABEL_13;
  v8 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
  v9 = v5 == -1 || *(_DWORD *)(v8 + 12 * (int)v6 + 8) == v5;
  if (!v9
    || (v14 = (int *)(v8 + 12 * (int)v6),
        v15 = *(_QWORD *)(*(_QWORD *)(a2 + 136) + 8 * *v14 + 32),
        v16 = *((_WORD *)v14 + 2),
        sub_1B1BEE528(a3),
        LOBYTE(a4) = sub_1B1FE8050(v15, v16, 128, a4, a1, (uint64_t *)a3, a5),
        result = sub_1B1B4F21C(a3),
        (a4 & 1) == 0))
  {
LABEL_13:
    sub_1B2229430();
    sub_1B2228890();
    sub_1B1BC3C70();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    sub_1B2228890();
    sub_1B2228890();
    result = sub_1B2229688();
    __break(1u);
  }
  return result;
}

uint64_t sub_1B1C81F74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, float a5)
{
  uint64_t result;
  float v9;
  float v10;
  uint64_t v11;

  result = sub_1B1C7F270(*(_QWORD *)(a2 + 8), 0, *(_QWORD *)a2, 0, a1, a5, *(float *)(a2 + 16), *(float *)(a2 + 20), a3 + 8, a4);
  if ((result & 1) != 0)
  {
    *(_QWORD *)(a1 + 80) = 0;
    *(_QWORD *)(a1 + 88) = 0;
    *(_QWORD *)(a1 + 96) = 0;
    v9 = *(float *)(a1 + 16);
    if (v9 > 0.0)
    {
      v10 = (float)(v9 * a5) + *(float *)(a1 + 64);
      *(float *)(a1 + 64) = v10;
      v11 = (uint64_t)v10;
      if ((uint64_t)v10 >= 1)
      {
        result = sub_1B1CCA790((uint64_t)v10, (_QWORD *)a1, (uint64_t)a4);
        *(float *)(a1 + 64) = *(float *)(a1 + 64) - (float)v11;
      }
    }
  }
  return result;
}

uint64_t type metadata accessor for ParticleVariableSpawnSystem()
{
  return objc_opt_self();
}

uint64_t sub_1B1C82050(uint64_t *a1)
{
  uint64_t v2;
  float v3;
  float v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  unint64_t v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  _DWORD v21[6];

  v2 = *a1;
  swift_retain();
  sub_1B1E5267C();
  v4 = v3;
  v5 = a1[1];
  swift_retain();
  v6 = sub_1B1D16DE4(v5);
  v8 = v7;
  v10 = v9;
  v12 = v11;
  swift_release();
  v13 = HIDWORD(v8);
  if ((v12 & 1) != 0)
    v14 = 1092616192;
  else
    v14 = v6;
  if ((v12 & 1) != 0)
    v15 = 1101004800;
  else
    v15 = HIDWORD(v6);
  if ((v12 & 1) != 0)
    v16 = 1065353216;
  else
    v16 = v8;
  if ((v12 & 1) != 0)
  {
    LODWORD(v13) = 0x40000000;
    v17 = 1065353216;
  }
  else
  {
    v17 = v10;
  }
  if ((v12 & 1) != 0)
    v18 = 0x40000000;
  else
    v18 = HIDWORD(v10);
  v21[0] = v14;
  v21[1] = v15;
  v21[2] = v16;
  v21[3] = v13;
  v21[4] = v17;
  v21[5] = v18;
  v19 = a1[4];
  swift_retain();
  sub_1B1BEE528((uint64_t)a1);
  sub_1B1FE8138(v19, v2, v2, (uint64_t)a1, (uint64_t)v21, v4);
  sub_1B1B4F21C((uint64_t)a1);
  return swift_release_n();
}

const char *sub_1B1C82164()
{
  return "Variable Spawn";
}

uint64_t sub_1B1C82178(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD v13[2];

  sub_1B19F8E54(0, &qword_1EEF5D098, (uint64_t (*)(void))sub_1B1C8AC38, (uint64_t)&type metadata for ParticleBurstSpawn.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v7 = v6;
  v8 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v9);
  v11 = (char *)v13 - v10;
  sub_1B19FA070(a1, a1[3]);
  sub_1B1C8AC38();
  sub_1B222A180();
  v13[0] = a2;
  v13[1] = a3;
  sub_1B1C8AC7C(0, (unint64_t *)&qword_1ED4BA5B8);
  sub_1B1C8ACC4(&qword_1EEF5D0A0, MEMORY[0x1E0DEB420], MEMORY[0x1E0DEB880]);
  sub_1B2229958();
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v7);
}

uint64_t sub_1B1C822CC()
{
  return 0x746E756F63;
}

uint64_t sub_1B1C822E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x746E756F63 && a2 == 0xE500000000000000)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_1B2229D24();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_1B1C8236C()
{
  sub_1B1C8AC38();
  return sub_1B222A1D4();
}

uint64_t sub_1B1C82394()
{
  sub_1B1C8AC38();
  return sub_1B222A1E0();
}

_QWORD *sub_1B1C823BC@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v5;

  result = sub_1B1C87610(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }
  return result;
}

uint64_t sub_1B1C823E4(_QWORD *a1)
{
  uint64_t *v1;

  return sub_1B1C82178(a1, *v1, v1[1]);
}

uint64_t sub_1B1C823FC()
{
  return type metadata accessor for ParticleBurstSpawnSystem();
}

double sub_1B1C82418@<D0>(_OWORD *a1@<X8>)
{
  double result;

  *(_QWORD *)&result = 10;
  *a1 = xmmword_1B2287390;
  return result;
}

unint64_t sub_1B1C82428(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, Swift::Int a5, uint64_t a6, float a7)
{
  _QWORD *v12;
  int v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  __int16 v19;

  v12 = (_QWORD *)result;
  v13 = *(_DWORD *)(a3 + 12);
  v14 = *(int *)(a3 + 8);
  v15 = (_DWORD)v14 == -1 && v13 == 0;
  if (v15
    || (v14 & 0x80000000) != 0
    || *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8) <= v14
    || (v16 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries), v13 != -1)
    && *(_DWORD *)(v16 + 12 * (int)v14 + 8) != v13
    || (v17 = (int *)(v16 + 12 * (int)v14),
        v18 = *(_QWORD *)(*(_QWORD *)(a2 + 136) + 8 * *v17 + 32),
        v19 = *((_WORD *)v17 + 2),
        sub_1B1BEE528(a3),
        LOBYTE(v18) = sub_1B1FE8308(v18, v19, 64, a4, a5, v12, (_QWORD *)a6, a3),
        result = sub_1B1B4F21C(a3),
        (v18 & 1) == 0))
  {
    if (!*(_QWORD *)(a6 + 72) && *(float *)a6 <= (float)(*(float *)(a6 + 4) + a7))
    {
      result = a5 - a4;
      if (a5 != a4)
      {
        result = sub_1B1C86D20(result);
        a5 = result + a4;
      }
      if (a5 >= 1)
        return sub_1B1CCA790(a5, (_QWORD *)a6, a3);
    }
  }
  return result;
}

uint64_t sub_1B1C82578(uint64_t *a1, uint64_t a2, uint64_t a3, _QWORD *a4, _QWORD *a5, uint64_t a6)
{
  uint64_t v9;
  unint64_t v10;
  char *v11;
  unint64_t v12;
  int isUniquelyReferenced_nonNull_native;
  int32x2_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  Swift::Int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v38;
  unint64_t v39;

  v9 = *a1;
  v10 = *(_QWORD *)(*a1 + 16);
  v11 = (char *)a1[6];
  v38 = a1 + 6;
  v12 = *((_QWORD *)v11 + 2);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v10 > *((_QWORD *)v11 + 3) >> 1)
  {
    if (v12 <= v10)
      v15 = v10;
    else
      v15 = v12;
    v11 = sub_1B1C635D8(isUniquelyReferenced_nonNull_native, v15, 0, v11);
  }
  *v38 = (uint64_t)v11;
  result = v10 - v12;
  if (v10 >= v12)
  {
    if (v12 < v10)
    {
      v14.i32[0] = 0;
      result = sub_1B19F5604(result, v14);
    }
  }
  else
  {
    result = sub_1B1C83084(v12 - v10);
  }
  v17 = *(_QWORD *)(v9 + 16);
  if (v17)
  {
    v18 = 0;
    v19 = 0;
    v20 = *v38;
    v21 = a3 - a2;
    v39 = a2 - a3;
    do
    {
      v22 = a3;
      if (a3 != a2)
      {
        v23 = a4[1];
        v24 = a4[2];
        v25 = 9 * __ROR8__(5 * v24, 57);
        v26 = a4[3] ^ v23;
        v27 = a4[4] ^ v24;
        v28 = v26 ^ v24;
        v29 = v27 ^ v23;
        a4[1] = v29;
        a4[2] = v26 ^ v24;
        v30 = __ROR8__(v27, 19);
        v31 = v26 ^ (v24 << 17);
        a4[3] = v31;
        a4[4] = v30;
        v32 = ((unint64_t)v25 * (unsigned __int128)v21) >> 64;
        if (v21 > v25 * v21 && v39 % v21 > v25 * v21)
        {
          do
          {
            v33 = 9 * __ROR8__(5 * v28, 57);
            v34 = v29 ^ v31;
            v35 = v28 ^ v30;
            v31 ^= v29 ^ (v28 << 17);
            v28 ^= v34;
            v29 ^= v35;
            v30 = __ROR8__(v35, 19);
          }
          while (v39 % v21 > v33 * v21);
          a4[1] = v29;
          a4[2] = v28;
          v32 = ((unint64_t)v33 * (unsigned __int128)v21) >> 64;
          a4[3] = v31;
          a4[4] = v30;
        }
        v22 = v32 + a2;
      }
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        result = (uint64_t)sub_1B1FFEEAC(v20);
        v20 = result;
      }
      *(float *)(v20 + 4 * v19 + 32) = (float)v22;
      v18 += v22;
      ++v19;
    }
    while (v19 != v17);
    *v38 = v20;
    if (v18 > 0)
      return sub_1B1CCA790(v18, a5, a6);
  }
  return result;
}

uint64_t type metadata accessor for ParticleBurstSpawnSystem()
{
  return objc_opt_self();
}

const char *sub_1B1C82794()
{
  return "Burst Spawn";
}

uint64_t sub_1B1C827A8(_QWORD *a1, unint64_t a2, uint64_t a3, float a4, float a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  _QWORD v18[2];
  unint64_t v19;
  uint64_t v20;
  char v21;

  sub_1B19F8E54(0, &qword_1EEF5D0A8, (uint64_t (*)(void))sub_1B1C8AD38, (uint64_t)&type metadata for ParticlePeriodicBurstSpawn.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v11 = v10;
  v12 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v13);
  v15 = (char *)v18 - v14;
  sub_1B19FA070(a1, a1[3]);
  sub_1B1C8AD38();
  sub_1B222A180();
  v19 = a2;
  v20 = a3;
  v21 = 0;
  sub_1B1C8AC7C(0, (unint64_t *)&qword_1ED4BA5B8);
  sub_1B1C8ACC4(&qword_1EEF5D0A0, MEMORY[0x1E0DEB420], MEMORY[0x1E0DEB880]);
  v16 = v18[1];
  sub_1B2229958();
  if (!v16)
  {
    v19 = __PAIR64__(LODWORD(a5), LODWORD(a4));
    v21 = 1;
    sub_1B1C8AC7C(0, (unint64_t *)&qword_1ED4BA5A8);
    sub_1B1C8ABC4(qword_1EEF5B108, MEMORY[0x1E0DEB198], MEMORY[0x1E0DEB880]);
    sub_1B2229958();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v15, v11);
}

uint64_t sub_1B1C82988(char *a1, char *a2)
{
  return sub_1B1F97DD0(*a1, *a2);
}

uint64_t sub_1B1C82994()
{
  _BYTE *v0;

  if (*v0)
    return 0x6954746165706572;
  else
    return 0x746E756F63;
}

uint64_t sub_1B1C829D0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1B1C86FB8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1B1C829F4()
{
  sub_1B1C8AD38();
  return sub_1B222A1D4();
}

uint64_t sub_1B1C82A1C()
{
  sub_1B1C8AD38();
  return sub_1B222A1E0();
}

void sub_1B1C82A44(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  float v6;
  int v7;

  v6 = sub_1B1C87898(a1);
  if (!v2)
  {
    *(_QWORD *)a2 = v4;
    *(_QWORD *)(a2 + 8) = v5;
    *(float *)(a2 + 16) = v6;
    *(_DWORD *)(a2 + 20) = v7;
  }
}

uint64_t sub_1B1C82A70(_QWORD *a1)
{
  uint64_t v1;

  return sub_1B1C827A8(a1, *(_QWORD *)v1, *(_QWORD *)(v1 + 8), *(float *)(v1 + 16), *(float *)(v1 + 20));
}

uint64_t sub_1B1C82A8C()
{
  return type metadata accessor for ParticlePeriodicBurstSpawnSystem();
}

double sub_1B1C82AA8@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_OWORD *)a1 = xmmword_1B2287390;
  result = 2.00000047;
  *(_QWORD *)(a1 + 16) = 0x400000003F800000;
  return result;
}

uint64_t sub_1B1C82AC4(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, Swift::Int a5, float a6, float a7, float a8)
{
  int v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  BOOL v12;
  int *v20;
  uint64_t v21;
  __int16 v22;
  uint64_t result;

  v8 = *(_DWORD *)(a3 + 36);
  v9 = *(int *)(a3 + 32);
  v10 = (_DWORD)v9 == -1 && v8 == 0;
  if (v10 || (v9 & 0x80000000) != 0 || *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8) <= v9)
    goto LABEL_13;
  v11 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
  v12 = v8 == -1 || *(_DWORD *)(v11 + 12 * (int)v9 + 8) == v8;
  if (!v12
    || (v20 = (int *)(v11 + 12 * (int)v9),
        v21 = *(_QWORD *)(*(_QWORD *)(a2 + 136) + 8 * *v20 + 32),
        v22 = *((_WORD *)v20 + 2),
        sub_1B1BEE528(a3),
        LOBYTE(a5) = sub_1B1FEB4AC(v21, v22, 656, a4, a5, a1, (uint64_t *)a3, a6, a7, a8),
        result = sub_1B1B4F21C(a3),
        (a5 & 1) == 0))
  {
LABEL_13:
    sub_1B2229430();
    sub_1B2228890();
    sub_1B1BC3C70();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    sub_1B2228890();
    sub_1B2228890();
    result = sub_1B2229688();
    __break(1u);
  }
  return result;
}

uint64_t type metadata accessor for ParticlePeriodicBurstSpawnSystem()
{
  return objc_opt_self();
}

uint64_t sub_1B1C82D0C(uint64_t *a1)
{
  uint64_t v2;
  float v3;
  float v4;
  unint64_t v5;
  uint64_t v6;
  Swift::Int v7;
  Swift::Int v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  float v13;
  float v14;

  v2 = *a1;
  swift_retain();
  sub_1B1E5267C();
  v4 = v3;
  v5 = a1[1];
  swift_retain();
  v6 = sub_1B1D16DFC(v5);
  v8 = v7;
  v10 = v9;
  v12 = v11;
  swift_release();
  if ((v12 & 1) != 0)
  {
    v6 = 10;
    v8 = 20;
    v13 = 1.0;
  }
  else
  {
    v13 = *(float *)&v10;
  }
  if ((v12 & 1) != 0)
    v14 = 2.0;
  else
    v14 = *((float *)&v10 + 1);
  swift_retain();
  sub_1B1BEE528((uint64_t)a1);
  sub_1B1FEB620(v5, v2, v2, (uint64_t)a1, v6, v8, v4, v13, v14);
  sub_1B1B4F21C((uint64_t)a1);
  return swift_release_n();
}

const char *sub_1B1C82E20()
{
  return "Periodic Burst Spawn";
}

_QWORD *sub_1B1C82E34@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_1B1C82E7C(a1, a2, a3, (_QWORD *(*)(__int128 *__return_ptr, _QWORD, _QWORD, uint64_t, __n128))sub_1B1FE73F0, (void (*)(__int128 *__return_ptr, uint64_t))sub_1B1F212D4, a4);
}

_QWORD *sub_1B1C82E58@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_1B1C82E7C(a1, a2, a3, (_QWORD *(*)(__int128 *__return_ptr, _QWORD, _QWORD, uint64_t, __n128))sub_1B1FE743C, (void (*)(__int128 *__return_ptr, uint64_t))sub_1B1F213C0, a4);
}

_QWORD *sub_1B1C82E7C@<X0>(_QWORD *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *(*a4)(__int128 *__return_ptr, _QWORD, _QWORD, uint64_t, __n128)@<X3>, void (*a5)(__int128 *__return_ptr, uint64_t)@<X4>, uint64_t a6@<X8>)
{
  __int128 v7;
  char v8;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  char v23;

  if (*((_BYTE *)result + 56) == 1)
  {
    v7 = 0uLL;
    if (a3 == 0xFFFFFFFFLL)
    {
      v8 = 1;
    }
    else
    {
      v8 = 1;
      if (a3 << 32 >= (uint64_t)0xFFFFFFFF00000001
        && (int)a3 < *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8))
      {
        v14 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
        if (HIDWORD(a3) == -1 || *(_DWORD *)(v14 + 12 * (int)a3 + 8) == HIDWORD(a3))
        {
          result = a4(&v19, *(_QWORD *)(*(_QWORD *)(a2 + 136) + 8 * *(int *)(v14 + 12 * (int)a3) + 32), *(unsigned __int16 *)(v14 + 12 * (int)a3 + 4), 64, (__n128)0);
          v7 = v19;
          v13 = v20;
          v11 = v21;
          v12 = v22;
          v8 = v23;
          goto LABEL_10;
        }
      }
    }
    v13 = 0uLL;
    v11 = 0uLL;
    v12 = 0uLL;
  }
  else
  {
    v10 = swift_retain();
    a5(&v19, v10);
    v17 = v20;
    v18 = v19;
    v15 = v22;
    v16 = v21;
    v8 = v23;
    result = (_QWORD *)swift_release();
    v12 = v15;
    v11 = v16;
    v13 = v17;
    v7 = v18;
  }
LABEL_10:
  *(_OWORD *)a6 = v7;
  *(_OWORD *)(a6 + 16) = v13;
  *(_OWORD *)(a6 + 32) = v11;
  *(_OWORD *)(a6 + 48) = v12;
  *(_BYTE *)(a6 + 64) = v8;
  return result;
}

