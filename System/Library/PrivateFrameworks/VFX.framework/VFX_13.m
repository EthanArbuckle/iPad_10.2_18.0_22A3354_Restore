uint64_t sub_1B1E96A6C(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t result;
  uint64_t *v30;
  char v31[8];

  v3 = v2;
  v5 = *v2;
  sub_1B1EB6DB4(0, (unint64_t *)&qword_1ED4BF6B0);
  v6 = sub_1B22296C4();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_36;
  v30 = v3;
  v8 = 0;
  v9 = (_QWORD *)(v5 + 64);
  v10 = 1 << *(_BYTE *)(v5 + 32);
  if (v10 < 64)
    v11 = ~(-1 << v10);
  else
    v11 = -1;
  v12 = v11 & *(_QWORD *)(v5 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  v14 = v6 + 64;
  while (1)
  {
    if (v12)
    {
      v17 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v18 = v17 | (v8 << 6);
      goto LABEL_20;
    }
    v19 = v8 + 1;
    if (v8 + 1 >= v13)
      goto LABEL_30;
    v20 = v9[v19];
    if (!v20)
    {
      v19 = v8 + 2;
      if (v8 + 2 >= v13)
        goto LABEL_30;
      v20 = v9[v19];
      if (!v20)
      {
        v19 = v8 + 3;
        if (v8 + 3 >= v13)
          goto LABEL_30;
        v20 = v9[v19];
        if (!v20)
          break;
      }
    }
LABEL_19:
    v12 = (v20 - 1) & v20;
    v18 = __clz(__rbit64(v20)) + (v19 << 6);
    v8 = v19;
LABEL_20:
    v21 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v18);
    if ((a2 & 1) != 0)
      sub_1B1B9BAB0(*(_QWORD *)(v5 + 56) + 8 * v18, (uint64_t)v31);
    else
      sub_1B1B425D0();
    v22 = sub_1B222A060();
    v23 = -1 << *(_BYTE *)(v7 + 32);
    v24 = v22 & ~v23;
    v25 = v24 >> 6;
    if (((-1 << v24) & ~*(_QWORD *)(v14 + 8 * (v24 >> 6))) != 0)
    {
      v15 = __clz(__rbit64((-1 << v24) & ~*(_QWORD *)(v14 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (v25 + 1 == v26)
          v25 = 0;
        else
          ++v25;
        v27 = *(_QWORD *)(v14 + 8 * v25);
      }
      while (v27 == -1);
      v15 = __clz(__rbit64(~v27)) + (v25 << 6);
    }
    *(_QWORD *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    v16 = 8 * v15;
    *(_QWORD *)(*(_QWORD *)(v7 + 48) + v16) = v21;
    sub_1B1B9BAB0((uint64_t)v31, *(_QWORD *)(v7 + 56) + v16);
    ++*(_QWORD *)(v7 + 16);
  }
  while (v13 - 4 != v8)
  {
    v20 = *(_QWORD *)(v5 + 96 + 8 * v8++);
    if (v20)
    {
      v19 = v8 + 3;
      goto LABEL_19;
    }
  }
LABEL_30:
  if ((a2 & 1) != 0)
  {
    v28 = 1 << *(_BYTE *)(v5 + 32);
    v3 = v30;
    if (v28 >= 64)
      bzero((void *)(v5 + 64), ((unint64_t)(v28 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
    else
      *v9 = -1 << v28;
    *(_QWORD *)(v5 + 16) = 0;
LABEL_36:
    result = swift_release();
  }
  else
  {
    result = swift_release();
    v3 = v30;
  }
  *v3 = v7;
  return result;
}

uint64_t sub_1B1E96D28(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t result;
  uint64_t *v27;
  _QWORD *v28;
  int64_t v29;
  _BYTE v30[832];
  _BYTE v31[840];

  v3 = v2;
  v5 = *v2;
  sub_1B1B9B7F0();
  v6 = sub_1B22296C4();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_35;
  v27 = v3;
  v8 = 0;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v12 = v6 + 64;
  v28 = (_QWORD *)(v5 + 64);
  v29 = (unint64_t)(v9 + 63) >> 6;
  while (1)
  {
    if (v11)
    {
      v14 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v15 = v14 | (v8 << 6);
      goto LABEL_20;
    }
    v16 = v8 + 1;
    if (v8 + 1 >= v29)
      goto LABEL_29;
    v17 = v28[v16];
    if (!v17)
    {
      v16 = v8 + 2;
      if (v8 + 2 >= v29)
        goto LABEL_29;
      v17 = v28[v16];
      if (!v17)
      {
        v16 = v8 + 3;
        if (v8 + 3 >= v29)
          goto LABEL_29;
        v17 = v28[v16];
        if (!v17)
          break;
      }
    }
LABEL_19:
    v11 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v16 << 6);
    v8 = v16;
LABEL_20:
    v18 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v15);
    sub_1B1B41294(*(_QWORD *)(v5 + 56) + 832 * v15, (uint64_t)v30, &qword_1ED4B7E90, (uint64_t)&type metadata for ShaderCache.RenderPipeline, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for ShaderCache.Status);
    if ((a2 & 1) == 0)
      sub_1B1EB58B4((uint64_t)v30);
    sub_1B1B41294((uint64_t)v30, (uint64_t)v31, &qword_1ED4B7E90, (uint64_t)&type metadata for ShaderCache.RenderPipeline, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for ShaderCache.Status);
    v19 = sub_1B222A060();
    v20 = -1 << *(_BYTE *)(v7 + 32);
    v21 = v19 & ~v20;
    v22 = v21 >> 6;
    if (((-1 << v21) & ~*(_QWORD *)(v12 + 8 * (v21 >> 6))) != 0)
    {
      v13 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v12 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v23 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (v22 + 1 == v23)
          v22 = 0;
        else
          ++v22;
        v24 = *(_QWORD *)(v12 + 8 * v22);
      }
      while (v24 == -1);
      v13 = __clz(__rbit64(~v24)) + (v22 << 6);
    }
    *(_QWORD *)(v12 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v13) = v18;
    sub_1B1B41294((uint64_t)v31, *(_QWORD *)(v7 + 56) + 832 * v13, &qword_1ED4B7E90, (uint64_t)&type metadata for ShaderCache.RenderPipeline, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for ShaderCache.Status);
    ++*(_QWORD *)(v7 + 16);
  }
  while (v29 - 4 != v8)
  {
    v17 = *(_QWORD *)(v5 + 96 + 8 * v8++);
    if (v17)
    {
      v16 = v8 + 3;
      goto LABEL_19;
    }
  }
LABEL_29:
  if ((a2 & 1) != 0)
  {
    v25 = 1 << *(_BYTE *)(v5 + 32);
    v3 = v27;
    if (v25 >= 64)
      bzero(v28, ((unint64_t)(v25 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
    else
      *v28 = -1 << v25;
    *(_QWORD *)(v5 + 16) = 0;
LABEL_35:
    result = swift_release();
  }
  else
  {
    result = swift_release();
    v3 = v27;
  }
  *v3 = v7;
  return result;
}

uint64_t sub_1B1E97060(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t result;
  uint64_t *v32;
  _QWORD *v33;
  char v34[72];

  v3 = v2;
  v5 = *v2;
  sub_1B1B9A02C();
  v6 = sub_1B22296C4();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_34;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v32 = v2;
  v33 = (_QWORD *)(v5 + 64);
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v11 = (unint64_t)(v8 + 63) >> 6;
  v12 = v6 + 64;
  swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v21 = v20 | (v13 << 6);
      goto LABEL_21;
    }
    v22 = v13 + 1;
    if (v13 + 1 >= v11)
      goto LABEL_29;
    v23 = v33[v22];
    if (!v23)
    {
      v22 = v13 + 2;
      if (v13 + 2 >= v11)
        goto LABEL_29;
      v23 = v33[v22];
      if (!v23)
      {
        v22 = v13 + 3;
        if (v13 + 3 >= v11)
          goto LABEL_29;
        v23 = v33[v22];
        if (!v23)
          break;
      }
    }
LABEL_20:
    v10 = (v23 - 1) & v23;
    v21 = __clz(__rbit64(v23)) + (v22 << 6);
    v13 = v22;
LABEL_21:
    v24 = 8 * v21;
    v25 = *(_QWORD *)(v5 + 48);
    v26 = *(_QWORD *)(v25 + v24);
    v27 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + v24);
    if ((a2 & 1) == 0)
      sub_1B1B1DD24(*(_QWORD *)(v25 + v24));
    sub_1B222A06C();
    sub_1B1C9721C((uint64_t)v34, v26);
    v14 = sub_1B222A0C0();
    v15 = -1 << *(_BYTE *)(v7 + 32);
    v16 = v14 & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v28 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (v17 + 1 == v28)
          v17 = 0;
        else
          ++v17;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = 8 * v18;
    *(_QWORD *)(*(_QWORD *)(v7 + 48) + v19) = v26;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + v19) = v27;
    ++*(_QWORD *)(v7 + 16);
  }
  while (v11 - 4 != v13)
  {
    v23 = *(_QWORD *)(v5 + 8 * v13++ + 96);
    if (v23)
    {
      v22 = v13 + 3;
      goto LABEL_20;
    }
  }
LABEL_29:
  swift_release();
  v3 = v32;
  if ((a2 & 1) != 0)
  {
    v30 = 1 << *(_BYTE *)(v5 + 32);
    if (v30 >= 64)
      bzero(v33, ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
    else
      *v33 = -1 << v30;
    *(_QWORD *)(v5 + 16) = 0;
  }
LABEL_34:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_1B1E97320(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t result;
  uint64_t *v30;
  _QWORD *v31;
  char v32[72];

  v3 = v2;
  v5 = *v2;
  sub_1B1B9A08C();
  v6 = sub_1B22296C4();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_34;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v30 = v2;
  v31 = (_QWORD *)(v5 + 64);
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v11 = (unint64_t)(v8 + 63) >> 6;
  v12 = v6 + 64;
  swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v20 = v19 | (v13 << 6);
      goto LABEL_21;
    }
    v21 = v13 + 1;
    if (v13 + 1 >= v11)
      goto LABEL_29;
    v22 = v31[v21];
    if (!v22)
    {
      v21 = v13 + 2;
      if (v13 + 2 >= v11)
        goto LABEL_29;
      v22 = v31[v21];
      if (!v22)
      {
        v21 = v13 + 3;
        if (v13 + 3 >= v11)
          goto LABEL_29;
        v22 = v31[v21];
        if (!v22)
          break;
      }
    }
LABEL_20:
    v10 = (v22 - 1) & v22;
    v20 = __clz(__rbit64(v22)) + (v21 << 6);
    v13 = v21;
LABEL_21:
    v23 = *(_QWORD *)(v5 + 48);
    v24 = *(_QWORD *)(v23 + 8 * v20);
    v25 = *(_BYTE *)(*(_QWORD *)(v5 + 56) + v20);
    if ((a2 & 1) == 0)
      sub_1B1B1DD24(*(_QWORD *)(v23 + 8 * v20));
    sub_1B222A06C();
    sub_1B1C9721C((uint64_t)v32, v24);
    v14 = sub_1B222A0C0();
    v15 = -1 << *(_BYTE *)(v7 + 32);
    v16 = v14 & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (v17 + 1 == v26)
          v17 = 0;
        else
          ++v17;
        v27 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v27 == -1);
      v18 = __clz(__rbit64(~v27)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v18) = v24;
    *(_BYTE *)(*(_QWORD *)(v7 + 56) + v18) = v25;
    ++*(_QWORD *)(v7 + 16);
  }
  while (v11 - 4 != v13)
  {
    v22 = *(_QWORD *)(v5 + 8 * v13++ + 96);
    if (v22)
    {
      v21 = v13 + 3;
      goto LABEL_20;
    }
  }
LABEL_29:
  swift_release();
  v3 = v30;
  if ((a2 & 1) != 0)
  {
    v28 = 1 << *(_BYTE *)(v5 + 32);
    if (v28 >= 64)
      bzero(v31, ((unint64_t)(v28 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
    else
      *v31 = -1 << v28;
    *(_QWORD *)(v5 + 16) = 0;
  }
LABEL_34:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_1B1E975D8(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t result;
  unint64_t v36;
  _QWORD *v37;
  int64_t v38;
  uint64_t v39;
  char v40;
  char v41;

  v3 = v2;
  v5 = *v2;
  sub_1B1EB6DB4(0, (unint64_t *)&qword_1EEF5FF40);
  v40 = a2;
  v6 = sub_1B22296C4();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_34;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v37 = (_QWORD *)(v5 + 64);
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v11 = (unint64_t)(v8 + 63) >> 6;
  v12 = v6 + 64;
  swift_retain();
  v13 = 0;
  v38 = v11;
  v39 = v5;
  v36 = v11 - 4;
  while (1)
  {
    if (v10)
    {
      v21 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v22 = v21 | (v13 << 6);
      goto LABEL_21;
    }
    v23 = v13 + 1;
    if (v13 + 1 >= v38)
      goto LABEL_29;
    v24 = v37[v23];
    if (!v24)
    {
      v23 = v13 + 2;
      if (v13 + 2 >= v38)
        goto LABEL_29;
      v24 = v37[v23];
      if (!v24)
      {
        v23 = v13 + 3;
        if (v13 + 3 >= v38)
          goto LABEL_29;
        v24 = v37[v23];
        if (!v24)
          break;
      }
    }
LABEL_20:
    v10 = (v24 - 1) & v24;
    v22 = __clz(__rbit64(v24)) + (v23 << 6);
    v13 = v23;
LABEL_21:
    v25 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v22);
    v27 = *v25;
    v26 = v25[1];
    v28 = *(_QWORD *)(v5 + 56) + 32 * v22;
    v29 = *(_QWORD *)v28;
    v30 = *(_BYTE *)(v28 + 8);
    v31 = *(_QWORD *)(v28 + 16);
    v41 = *(_BYTE *)(v28 + 24);
    if ((v40 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      sub_1B1B1DD24(v29);
    }
    sub_1B222A06C();
    sub_1B2228824();
    v14 = sub_1B222A0C0();
    v15 = -1 << *(_BYTE *)(v7 + 32);
    v16 = v14 & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v32 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (v17 + 1 == v32)
          v17 = 0;
        else
          ++v17;
        v33 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v33 == -1);
      v18 = __clz(__rbit64(~v33)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v18);
    *v19 = v27;
    v19[1] = v26;
    v20 = *(_QWORD *)(v7 + 56) + 32 * v18;
    *(_QWORD *)v20 = v29;
    *(_BYTE *)(v20 + 8) = v30;
    *(_QWORD *)(v20 + 16) = v31;
    *(_BYTE *)(v20 + 24) = v41;
    ++*(_QWORD *)(v7 + 16);
    v5 = v39;
  }
  while (v36 != v13)
  {
    v24 = *(_QWORD *)(v5 + 8 * v13++ + 96);
    if (v24)
    {
      v23 = v13 + 3;
      goto LABEL_20;
    }
  }
LABEL_29:
  swift_release();
  v3 = v2;
  if ((v40 & 1) != 0)
  {
    v34 = 1 << *(_BYTE *)(v5 + 32);
    if (v34 >= 64)
      bzero(v37, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
    else
      *v37 = -1 << v34;
    *(_QWORD *)(v5 + 16) = 0;
  }
LABEL_34:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_1B1E97900(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t result;
  uint64_t *v20;

  v3 = v2;
  v5 = *v2;
  sub_1B1B99DB0(0, &qword_1EEF5B3B8, (void (*)(uint64_t))type metadata accessor for XcodeInfo, (void (*)(void))sub_1B1B99E24);
  v6 = sub_1B22296C4();
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_25;
  v20 = v3;
  v7 = 1 << *(_BYTE *)(v5 + 32);
  v8 = (_QWORD *)(v5 + 64);
  v9 = -1;
  if (v7 < 64)
    v9 = ~(-1 << v7);
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v11 = (unint64_t)(v7 + 63) >> 6;
  swift_retain();
  v12 = 0;
  while (1)
  {
    if (v10)
    {
      v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v14 = v13 | (v12 << 6);
      goto LABEL_18;
    }
    v15 = v12 + 1;
    if (v12 + 1 >= v11)
      goto LABEL_20;
    v16 = v8[v15];
    if (!v16)
    {
      v15 = v12 + 2;
      if (v12 + 2 >= v11)
        goto LABEL_20;
      v16 = v8[v15];
      if (!v16)
      {
        v15 = v12 + 3;
        if (v12 + 3 >= v11)
          goto LABEL_20;
        v16 = v8[v15];
        if (!v16)
          break;
      }
    }
LABEL_17:
    v10 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v15 << 6);
    v12 = v15;
LABEL_18:
    v17 = *(_BYTE *)(*(_QWORD *)(v5 + 48) + 2 * v14);
    if ((a2 & 1) == 0)
      swift_retain();
    sub_1B1EA3C30(v17);
  }
  while (v11 - 4 != v12)
  {
    v16 = *(_QWORD *)(v5 + 96 + 8 * v12++);
    if (v16)
    {
      v15 = v12 + 3;
      goto LABEL_17;
    }
  }
LABEL_20:
  swift_release();
  v3 = v20;
  if ((a2 & 1) != 0)
  {
    v18 = 1 << *(_BYTE *)(v5 + 32);
    if (v18 > 63)
      bzero((void *)(v5 + 64), ((unint64_t)(v18 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
    else
      *v8 = -1 << v18;
    *(_QWORD *)(v5 + 16) = 0;
  }
LABEL_25:
  result = swift_release();
  *v3 = v6;
  return result;
}

uint64_t sub_1B1E97B10(uint64_t a1, int a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t result;
  uint64_t *v37;
  int v38;
  uint64_t v39;
  int64_t v40;
  _QWORD *v41;
  int64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;

  v3 = v2;
  v45 = sub_1B2228110();
  v5 = *(_QWORD *)(v45 - 8);
  MEMORY[0x1E0C80A78](v45, v6);
  v44 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v2;
  sub_1B1B9C650();
  v9 = sub_1B22296C4();
  v10 = v9;
  if (!*(_QWORD *)(v8 + 16))
    goto LABEL_37;
  v37 = v2;
  v11 = 0;
  v12 = 1 << *(_BYTE *)(v8 + 32);
  if (v12 < 64)
    v13 = ~(-1 << v12);
  else
    v13 = -1;
  v14 = v13 & *(_QWORD *)(v8 + 64);
  v15 = v9 + 64;
  v38 = a2;
  v16 = 16;
  if ((a2 & 1) != 0)
    v16 = 32;
  v42 = (unint64_t)(v12 + 63) >> 6;
  v43 = v16;
  v40 = v42 - 4;
  v41 = (_QWORD *)(v8 + 64);
  v39 = v8 + 96;
  while (1)
  {
    if (v14)
    {
      v19 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v20 = v19 | (v11 << 6);
      goto LABEL_22;
    }
    v21 = v11 + 1;
    if (v11 + 1 >= v42)
      goto LABEL_31;
    v22 = v41[v21];
    if (!v22)
    {
      v21 = v11 + 2;
      if (v11 + 2 >= v42)
        goto LABEL_31;
      v22 = v41[v21];
      if (!v22)
      {
        v21 = v11 + 3;
        if (v11 + 3 >= v42)
          goto LABEL_31;
        v22 = v41[v21];
        if (!v22)
          break;
      }
    }
LABEL_21:
    v14 = (v22 - 1) & v22;
    v20 = __clz(__rbit64(v22)) + (v21 << 6);
    v11 = v21;
LABEL_22:
    v23 = *(_QWORD *)(v8 + 56);
    v24 = v8;
    v25 = *(_QWORD *)(v8 + 48) + 8 * v20;
    v26 = *(_DWORD *)v25;
    v27 = *(unsigned __int8 *)(v25 + 4);
    v28 = *(_QWORD *)(v5 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v5 + v43))(v44, v23 + v28 * v20, v45);
    sub_1B222A06C();
    sub_1B222A084();
    if (v27 != 1)
      sub_1B222A09C();
    v29 = sub_1B222A0C0();
    v30 = -1 << *(_BYTE *)(v10 + 32);
    v31 = v29 & ~v30;
    v32 = v31 >> 6;
    if (((-1 << v31) & ~*(_QWORD *)(v15 + 8 * (v31 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v31) & ~*(_QWORD *)(v15 + 8 * (v31 >> 6)))) | v31 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v33 = (unint64_t)(63 - v30) >> 6;
      do
      {
        if (v32 + 1 == v33)
          v32 = 0;
        else
          ++v32;
        v34 = *(_QWORD *)(v15 + 8 * v32);
      }
      while (v34 == -1);
      v17 = __clz(__rbit64(~v34)) + (v32 << 6);
    }
    *(_QWORD *)(v15 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = *(_QWORD *)(v10 + 48) + 8 * v17;
    *(_DWORD *)v18 = v26;
    *(_BYTE *)(v18 + 4) = v27;
    (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(*(_QWORD *)(v10 + 56) + v28 * v17, v44, v45);
    ++*(_QWORD *)(v10 + 16);
    v8 = v24;
  }
  while (v40 != v11)
  {
    v22 = *(_QWORD *)(v39 + 8 * v11++);
    if (v22)
    {
      v21 = v11 + 3;
      goto LABEL_21;
    }
  }
LABEL_31:
  if ((v38 & 1) != 0)
  {
    v35 = 1 << *(_BYTE *)(v8 + 32);
    v3 = v37;
    if (v35 >= 64)
      bzero(v41, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
    else
      *v41 = -1 << v35;
    *(_QWORD *)(v8 + 16) = 0;
LABEL_37:
    result = swift_release();
  }
  else
  {
    result = swift_release();
    v3 = v37;
  }
  *v3 = v10;
  return result;
}

uint64_t sub_1B1E97E6C(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  id v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t result;
  uint64_t *v33;
  _QWORD *v34;
  char v35;

  v3 = v2;
  v5 = *v2;
  sub_1B1EB6BBC();
  v35 = a2;
  v6 = sub_1B22296C4();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_34;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v33 = v2;
  v34 = (_QWORD *)(v5 + 64);
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v11 = (unint64_t)(v8 + 63) >> 6;
  v12 = v6 + 64;
  swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v21 = v20 | (v13 << 6);
      goto LABEL_21;
    }
    v22 = v13 + 1;
    if (v13 + 1 >= v11)
      goto LABEL_29;
    v23 = v34[v22];
    if (!v23)
    {
      v22 = v13 + 2;
      if (v13 + 2 >= v11)
        goto LABEL_29;
      v23 = v34[v22];
      if (!v23)
      {
        v22 = v13 + 3;
        if (v13 + 3 >= v11)
          goto LABEL_29;
        v23 = v34[v22];
        if (!v23)
          break;
      }
    }
LABEL_20:
    v10 = (v23 - 1) & v23;
    v21 = __clz(__rbit64(v23)) + (v22 << 6);
    v13 = v22;
LABEL_21:
    v24 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v21);
    v26 = *v24;
    v25 = v24[1];
    v27 = *(void **)(*(_QWORD *)(v5 + 56) + 8 * v21);
    if ((v35 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      v28 = v27;
    }
    sub_1B222A06C();
    sub_1B2228824();
    v14 = sub_1B222A0C0();
    v15 = -1 << *(_BYTE *)(v7 + 32);
    v16 = v14 & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v29 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (v17 + 1 == v29)
          v17 = 0;
        else
          ++v17;
        v30 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v30 == -1);
      v18 = __clz(__rbit64(~v30)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v18);
    *v19 = v26;
    v19[1] = v25;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v18) = v27;
    ++*(_QWORD *)(v7 + 16);
  }
  while (v11 - 4 != v13)
  {
    v23 = *(_QWORD *)(v5 + 8 * v13++ + 96);
    if (v23)
    {
      v22 = v13 + 3;
      goto LABEL_20;
    }
  }
LABEL_29:
  swift_release();
  v3 = v33;
  if ((v35 & 1) != 0)
  {
    v31 = 1 << *(_BYTE *)(v5 + 32);
    if (v31 >= 64)
      bzero(v34, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
    else
      *v34 = -1 << v31;
    *(_QWORD *)(v5 + 16) = 0;
  }
LABEL_34:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_1B1E98140(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t result;
  uint64_t *v31;
  _QWORD *v32;
  __int128 v33;

  v3 = v2;
  v5 = *v2;
  sub_1B1B99B8C(0, &qword_1ED4BA908, (void (*)(uint64_t))sub_1B1B9AA24);
  v6 = sub_1B22296C4();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_33;
  v31 = v3;
  v8 = 0;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v12 = (unint64_t)(v9 + 63) >> 6;
  v13 = v6 + 64;
  v32 = (_QWORD *)(v5 + 64);
  while (1)
  {
    if (v11)
    {
      v16 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v17 = v16 | (v8 << 6);
      goto LABEL_20;
    }
    v18 = v8 + 1;
    if (v8 + 1 >= v12)
      goto LABEL_27;
    v19 = v32[v18];
    if (!v19)
    {
      v18 = v8 + 2;
      if (v8 + 2 >= v12)
        goto LABEL_27;
      v19 = v32[v18];
      if (!v19)
      {
        v18 = v8 + 3;
        if (v8 + 3 >= v12)
          goto LABEL_27;
        v19 = v32[v18];
        if (!v19)
          break;
      }
    }
LABEL_19:
    v11 = (v19 - 1) & v19;
    v17 = __clz(__rbit64(v19)) + (v18 << 6);
    v8 = v18;
LABEL_20:
    v20 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v17);
    v21 = *(_QWORD *)(v5 + 56) + 24 * v17;
    v22 = *(_QWORD *)(v21 + 16);
    v33 = *(_OWORD *)v21;
    v23 = sub_1B222A060();
    v24 = -1 << *(_BYTE *)(v7 + 32);
    v25 = v23 & ~v24;
    v26 = v25 >> 6;
    if (((-1 << v25) & ~*(_QWORD *)(v13 + 8 * (v25 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v13 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (v26 + 1 == v27)
          v26 = 0;
        else
          ++v26;
        v28 = *(_QWORD *)(v13 + 8 * v26);
      }
      while (v28 == -1);
      v14 = __clz(__rbit64(~v28)) + (v26 << 6);
    }
    *(_QWORD *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v14) = v20;
    v15 = *(_QWORD *)(v7 + 56) + 24 * v14;
    *(_OWORD *)v15 = v33;
    *(_QWORD *)(v15 + 16) = v22;
    ++*(_QWORD *)(v7 + 16);
  }
  while (v12 - 4 != v8)
  {
    v19 = *(_QWORD *)(v5 + 96 + 8 * v8++);
    if (v19)
    {
      v18 = v8 + 3;
      goto LABEL_19;
    }
  }
LABEL_27:
  if ((a2 & 1) != 0)
  {
    v29 = 1 << *(_BYTE *)(v5 + 32);
    v3 = v31;
    if (v29 >= 64)
      bzero(v32, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
    else
      *v32 = -1 << v29;
    *(_QWORD *)(v5 + 16) = 0;
LABEL_33:
    result = swift_release();
  }
  else
  {
    result = swift_release();
    v3 = v31;
  }
  *v3 = v7;
  return result;
}

uint64_t sub_1B1E98410(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t result;
  uint64_t v33;
  _QWORD *v34;
  int64_t v35;
  uint64_t i;
  char v37;
  char v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;

  v3 = v2;
  v5 = *v2;
  sub_1B1B9BBB4();
  v37 = a2;
  v6 = sub_1B22296C4();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_35;
  v8 = 0;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v12 = v6 + 64;
  v34 = (_QWORD *)(v5 + 64);
  v35 = (unint64_t)(v9 + 63) >> 6;
  v33 = v5 + 96;
  for (i = v5; ; v5 = i)
  {
    if (v11)
    {
      v19 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v20 = v8;
      v21 = v19 | (v8 << 6);
      goto LABEL_21;
    }
    v20 = v8 + 1;
    if (v8 + 1 >= v35)
      goto LABEL_29;
    v22 = v34[v20];
    if (!v22)
    {
      v20 = v8 + 2;
      if (v8 + 2 >= v35)
        goto LABEL_29;
      v22 = v34[v20];
      if (!v22)
      {
        v20 = v8 + 3;
        if (v8 + 3 >= v35)
          goto LABEL_29;
        v22 = v34[v20];
        if (!v22)
          break;
      }
    }
LABEL_20:
    v11 = (v22 - 1) & v22;
    v21 = __clz(__rbit64(v22)) + (v20 << 6);
LABEL_21:
    v23 = *(_BYTE *)(*(_QWORD *)(v5 + 48) + v21);
    v24 = *(_QWORD *)(v5 + 56) + 80 * v21;
    v26 = *(_QWORD *)v24;
    v25 = *(_QWORD *)(v24 + 8);
    v27 = *(_QWORD *)(v24 + 32);
    v28 = *(_BYTE *)(v24 + 40);
    v39 = *(_QWORD *)(v24 + 48);
    v38 = *(_BYTE *)(v24 + 56);
    v40 = *(_OWORD *)(v24 + 64);
    v41 = *(_OWORD *)(v24 + 16);
    if ((v37 & 1) == 0)
      swift_bridgeObjectRetain();
    sub_1B222A06C();
    sub_1B222A078();
    v13 = sub_1B222A0C0();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = v13 & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v12 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v12 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v29 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (v16 + 1 == v29)
          v16 = 0;
        else
          ++v16;
        v30 = *(_QWORD *)(v12 + 8 * v16);
      }
      while (v30 == -1);
      v17 = __clz(__rbit64(~v30)) + (v16 << 6);
    }
    v8 = v20;
    *(_QWORD *)(v12 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    *(_BYTE *)(*(_QWORD *)(v7 + 48) + v17) = v23;
    v18 = *(_QWORD *)(v7 + 56) + 80 * v17;
    *(_QWORD *)v18 = v26;
    *(_QWORD *)(v18 + 8) = v25;
    *(_OWORD *)(v18 + 16) = v41;
    *(_QWORD *)(v18 + 32) = v27;
    *(_BYTE *)(v18 + 40) = v28;
    *(_QWORD *)(v18 + 48) = v39;
    *(_BYTE *)(v18 + 56) = v38;
    *(_OWORD *)(v18 + 64) = v40;
    ++*(_QWORD *)(v7 + 16);
  }
  while (v35 - 4 != v8)
  {
    v22 = *(_QWORD *)(v33 + 8 * v8++);
    if (v22)
    {
      v20 = v8 + 3;
      goto LABEL_20;
    }
  }
LABEL_29:
  if ((v37 & 1) != 0)
  {
    v31 = 1 << *(_BYTE *)(v5 + 32);
    v3 = v2;
    if (v31 >= 64)
      bzero(v34, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
    else
      *v34 = -1 << v31;
    *(_QWORD *)(v5 + 16) = 0;
LABEL_35:
    result = swift_release();
  }
  else
  {
    result = swift_release();
    v3 = v2;
  }
  *v3 = v7;
  return result;
}

uint64_t sub_1B1E98744(uint64_t a1, char a2)
{
  return sub_1B1E98760(a1, a2, (void (*)(_QWORD))sub_1B1B9C1C8, (void (*)(uint64_t, char *))sub_1B1EB6150, (void (*)(uint64_t, char *))sub_1B1EB613C);
}

uint64_t sub_1B1E98760(uint64_t a1, char a2, void (*a3)(_QWORD), void (*a4)(uint64_t, char *), void (*a5)(uint64_t, char *))
{
  uint64_t *v5;
  uint64_t *v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t result;
  uint64_t *v34;
  _QWORD *v35;
  int64_t v36;
  char v37[8];

  v8 = v5;
  v10 = *v5;
  a3(0);
  v11 = sub_1B22296C4();
  v12 = v11;
  if (!*(_QWORD *)(v10 + 16))
    goto LABEL_36;
  v34 = v8;
  v13 = 0;
  v14 = 1 << *(_BYTE *)(v10 + 32);
  if (v14 < 64)
    v15 = ~(-1 << v14);
  else
    v15 = -1;
  v16 = v15 & *(_QWORD *)(v10 + 64);
  v17 = v11 + 64;
  v35 = (_QWORD *)(v10 + 64);
  v36 = (unint64_t)(v14 + 63) >> 6;
  while (1)
  {
    if (v16)
    {
      v20 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v21 = v20 | (v13 << 6);
      goto LABEL_20;
    }
    v22 = v13 + 1;
    if (v13 + 1 >= v36)
      goto LABEL_30;
    v23 = v35[v22];
    if (!v23)
    {
      v22 = v13 + 2;
      if (v13 + 2 >= v36)
        goto LABEL_30;
      v23 = v35[v22];
      if (!v23)
      {
        v22 = v13 + 3;
        if (v13 + 3 >= v36)
          goto LABEL_30;
        v23 = v35[v22];
        if (!v23)
          break;
      }
    }
LABEL_19:
    v16 = (v23 - 1) & v23;
    v21 = __clz(__rbit64(v23)) + (v22 << 6);
    v13 = v22;
LABEL_20:
    v24 = *(_QWORD *)(*(_QWORD *)(v10 + 48) + 8 * v21);
    v25 = *(_QWORD *)(v10 + 56) + 8 * v21;
    if ((a2 & 1) != 0)
      a4(v25, v37);
    else
      a5(v25, v37);
    v26 = sub_1B222A060();
    v27 = -1 << *(_BYTE *)(v12 + 32);
    v28 = v26 & ~v27;
    v29 = v28 >> 6;
    if (((-1 << v28) & ~*(_QWORD *)(v17 + 8 * (v28 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v28) & ~*(_QWORD *)(v17 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v30 = (unint64_t)(63 - v27) >> 6;
      do
      {
        if (v29 + 1 == v30)
          v29 = 0;
        else
          ++v29;
        v31 = *(_QWORD *)(v17 + 8 * v29);
      }
      while (v31 == -1);
      v18 = __clz(__rbit64(~v31)) + (v29 << 6);
    }
    *(_QWORD *)(v17 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = 8 * v18;
    *(_QWORD *)(*(_QWORD *)(v12 + 48) + v19) = v24;
    a4((uint64_t)v37, (char *)(*(_QWORD *)(v12 + 56) + v19));
    ++*(_QWORD *)(v12 + 16);
  }
  while (v36 - 4 != v13)
  {
    v23 = *(_QWORD *)(v10 + 96 + 8 * v13++);
    if (v23)
    {
      v22 = v13 + 3;
      goto LABEL_19;
    }
  }
LABEL_30:
  if ((a2 & 1) != 0)
  {
    v32 = 1 << *(_BYTE *)(v10 + 32);
    v8 = v34;
    if (v32 >= 64)
      bzero(v35, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
    else
      *v35 = -1 << v32;
    *(_QWORD *)(v10 + 16) = 0;
LABEL_36:
    result = swift_release();
  }
  else
  {
    result = swift_release();
    v8 = v34;
  }
  *v8 = v12;
  return result;
}

uint64_t sub_1B1E98A20(uint64_t a1, char a2)
{
  return sub_1B1E98760(a1, a2, (void (*)(_QWORD))sub_1B1B9BEDC, (void (*)(uint64_t, char *))sub_1B1EB60D0, (void (*)(uint64_t, char *))sub_1B1EB6064);
}

uint64_t sub_1B1E98A3C(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t result;
  _QWORD *v32;
  int64_t v33;
  char v34;
  __int128 v35;

  v3 = v2;
  v5 = *v2;
  sub_1B1B99DB0(0, &qword_1EEF5B6D0, (void (*)(uint64_t))sub_1B1B9C354, (void (*)(void))sub_1B1B9C3D0);
  v34 = a2;
  v6 = sub_1B22296C4();
  v8 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_35;
  v9 = 0;
  v10 = 1 << *(_BYTE *)(v5 + 32);
  if (v10 < 64)
    v11 = ~(-1 << v10);
  else
    v11 = -1;
  v12 = v11 & *(_QWORD *)(v5 + 64);
  v13 = v6 + 64;
  v32 = (_QWORD *)(v5 + 64);
  v33 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v20 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v21 = v20 | (v9 << 6);
      goto LABEL_21;
    }
    v22 = v9 + 1;
    if (v9 + 1 >= v33)
      goto LABEL_29;
    v23 = v32[v22];
    if (!v23)
    {
      v22 = v9 + 2;
      if (v9 + 2 >= v33)
        goto LABEL_29;
      v23 = v32[v22];
      if (!v23)
      {
        v22 = v9 + 3;
        if (v9 + 3 >= v33)
          goto LABEL_29;
        v23 = v32[v22];
        if (!v23)
          break;
      }
    }
LABEL_20:
    v12 = (v23 - 1) & v23;
    v21 = __clz(__rbit64(v23)) + (v22 << 6);
    v9 = v22;
LABEL_21:
    *(_QWORD *)&v7 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v21);
    v35 = v7;
    v24 = (uint64_t *)(*(_QWORD *)(v5 + 56) + 24 * v21);
    v25 = *v24;
    v26 = v24[1];
    v27 = v24[2];
    if ((v34 & 1) == 0)
      swift_unknownObjectRetain();
    sub_1B222A06C();
    sub_1B222A09C();
    sub_1B222A09C();
    v14 = sub_1B222A0C0();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = v14 & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v13 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v13 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v28 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (v17 + 1 == v28)
          v17 = 0;
        else
          ++v17;
        v29 = *(_QWORD *)(v13 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v13 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    *((_QWORD *)&v7 + 1) = *((_QWORD *)&v35 + 1);
    *(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * v18) = v35;
    v19 = (_QWORD *)(*(_QWORD *)(v8 + 56) + 24 * v18);
    *v19 = v25;
    v19[1] = v26;
    v19[2] = v27;
    ++*(_QWORD *)(v8 + 16);
  }
  while (v33 - 4 != v9)
  {
    v23 = *(_QWORD *)(v5 + 96 + 8 * v9++);
    if (v23)
    {
      v22 = v9 + 3;
      goto LABEL_20;
    }
  }
LABEL_29:
  if ((v34 & 1) != 0)
  {
    v30 = 1 << *(_BYTE *)(v5 + 32);
    v3 = v2;
    if (v30 >= 64)
      bzero(v32, ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
    else
      *v32 = -1 << v30;
    *(_QWORD *)(v5 + 16) = 0;
LABEL_35:
    result = swift_release();
  }
  else
  {
    result = swift_release();
    v3 = v2;
  }
  *v3 = v8;
  return result;
}

uint64_t sub_1B1E98D58(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t result;
  uint64_t v39;
  _QWORD *v40;
  int64_t v41;
  uint64_t i;
  char v43;
  __int128 v44;
  uint64_t v45;
  char v46;
  uint64_t v47;

  v3 = v2;
  v5 = *v2;
  sub_1B1B9C2B4();
  v43 = a2;
  v6 = sub_1B22296C4();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_37;
  v8 = 0;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v12 = v6 + 64;
  v40 = (_QWORD *)(v5 + 64);
  v41 = (unint64_t)(v9 + 63) >> 6;
  v39 = v5 + 96;
  for (i = v5; ; v5 = i)
  {
    if (v11)
    {
      v17 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v47 = v8;
      v18 = v17 | (v8 << 6);
      goto LABEL_20;
    }
    v19 = v8 + 1;
    if (v8 + 1 >= v41)
      goto LABEL_31;
    v20 = v40[v19];
    if (!v20)
    {
      v19 = v8 + 2;
      if (v8 + 2 >= v41)
        goto LABEL_31;
      v20 = v40[v19];
      if (!v20)
      {
        v19 = v8 + 3;
        if (v8 + 3 >= v41)
          goto LABEL_31;
        v20 = v40[v19];
        if (!v20)
          break;
      }
    }
LABEL_19:
    v11 = (v20 - 1) & v20;
    v18 = __clz(__rbit64(v20)) + (v19 << 6);
    v47 = v19;
LABEL_20:
    v21 = 40 * v18;
    v22 = *(_QWORD *)(v5 + 56);
    v23 = *(_QWORD *)(v5 + 48) + 40 * v18;
    v24 = *(_QWORD *)v23;
    v25 = *(_QWORD *)(v23 + 8);
    v27 = *(_QWORD *)(v23 + 16);
    v26 = *(_QWORD *)(v23 + 24);
    v28 = *(unsigned __int8 *)(v23 + 32);
    v29 = (uint64_t *)(v22 + v21);
    v30 = *v29;
    v44 = *(_OWORD *)(v29 + 1);
    v45 = v29[3];
    v46 = *((_BYTE *)v29 + 32);
    if ((v43 & 1) == 0)
    {
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
    }
    sub_1B222A06C();
    sub_1B222A078();
    sub_1B222A078();
    sub_1B222A078();
    sub_1B222A084();
    if (!v28)
      sub_1B222A078();
    v31 = sub_1B222A0C0();
    v32 = -1 << *(_BYTE *)(v7 + 32);
    v33 = v31 & ~v32;
    v34 = v33 >> 6;
    if (((-1 << v33) & ~*(_QWORD *)(v12 + 8 * (v33 >> 6))) != 0)
    {
      v13 = __clz(__rbit64((-1 << v33) & ~*(_QWORD *)(v12 + 8 * (v33 >> 6)))) | v33 & 0x7FFFFFFFFFFFFFC0;
      v8 = v47;
    }
    else
    {
      v35 = (unint64_t)(63 - v32) >> 6;
      v8 = v47;
      do
      {
        if (v34 + 1 == v35)
          v34 = 0;
        else
          ++v34;
        v36 = *(_QWORD *)(v12 + 8 * v34);
      }
      while (v36 == -1);
      v13 = __clz(__rbit64(~v36)) + (v34 << 6);
    }
    *(_QWORD *)(v12 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    v14 = 40 * v13;
    v15 = *(_QWORD *)(v7 + 48) + v14;
    *(_QWORD *)v15 = v24;
    *(_QWORD *)(v15 + 8) = v25;
    *(_QWORD *)(v15 + 16) = v27;
    *(_QWORD *)(v15 + 24) = v26;
    *(_BYTE *)(v15 + 32) = v28;
    v16 = *(_QWORD *)(v7 + 56) + v14;
    *(_QWORD *)v16 = v30;
    *(_OWORD *)(v16 + 8) = v44;
    *(_QWORD *)(v16 + 24) = v45;
    *(_BYTE *)(v16 + 32) = v46;
    ++*(_QWORD *)(v7 + 16);
  }
  while (v41 - 4 != v8)
  {
    v20 = *(_QWORD *)(v39 + 8 * v8++);
    if (v20)
    {
      v19 = v8 + 3;
      goto LABEL_19;
    }
  }
LABEL_31:
  if ((v43 & 1) != 0)
  {
    v37 = 1 << *(_BYTE *)(v5 + 32);
    v3 = v2;
    if (v37 >= 64)
      bzero(v40, ((unint64_t)(v37 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
    else
      *v40 = -1 << v37;
    *(_QWORD *)(v5 + 16) = 0;
LABEL_37:
    result = swift_release();
  }
  else
  {
    result = swift_release();
    v3 = v2;
  }
  *v3 = v7;
  return result;
}

uint64_t sub_1B1E990D8(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t result;
  uint64_t *v30;
  _QWORD *v31;

  v3 = v2;
  v5 = *v2;
  sub_1B1EB5840(0, (unint64_t *)&qword_1ED4BA9B0);
  v6 = sub_1B22296C4();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_35;
  v30 = v3;
  v8 = 0;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v12 = (unint64_t)(v9 + 63) >> 6;
  v13 = v6 + 64;
  v31 = (_QWORD *)(v5 + 64);
  while (1)
  {
    if (v11)
    {
      v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v21 = v20 | (v8 << 6);
      goto LABEL_21;
    }
    v22 = v8 + 1;
    if (v8 + 1 >= v12)
      goto LABEL_29;
    v23 = v31[v22];
    if (!v23)
    {
      v22 = v8 + 2;
      if (v8 + 2 >= v12)
        goto LABEL_29;
      v23 = v31[v22];
      if (!v23)
      {
        v22 = v8 + 3;
        if (v8 + 3 >= v12)
          goto LABEL_29;
        v23 = v31[v22];
        if (!v23)
          break;
      }
    }
LABEL_20:
    v11 = (v23 - 1) & v23;
    v21 = __clz(__rbit64(v23)) + (v22 << 6);
    v8 = v22;
LABEL_21:
    v24 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v21);
    v25 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v21);
    if ((a2 & 1) == 0)
      swift_unknownObjectRetain();
    v14 = sub_1B222A060();
    v15 = -1 << *(_BYTE *)(v7 + 32);
    v16 = v14 & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v13 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v13 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (v17 + 1 == v26)
          v17 = 0;
        else
          ++v17;
        v27 = *(_QWORD *)(v13 + 8 * v17);
      }
      while (v27 == -1);
      v18 = __clz(__rbit64(~v27)) + (v17 << 6);
    }
    *(_QWORD *)(v13 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = 8 * v18;
    *(_QWORD *)(*(_QWORD *)(v7 + 48) + v19) = v24;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + v19) = v25;
    ++*(_QWORD *)(v7 + 16);
  }
  while (v12 - 4 != v8)
  {
    v23 = *(_QWORD *)(v5 + 96 + 8 * v8++);
    if (v23)
    {
      v22 = v8 + 3;
      goto LABEL_20;
    }
  }
LABEL_29:
  if ((a2 & 1) != 0)
  {
    v28 = 1 << *(_BYTE *)(v5 + 32);
    v3 = v30;
    if (v28 >= 64)
      bzero(v31, ((unint64_t)(v28 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
    else
      *v31 = -1 << v28;
    *(_QWORD *)(v5 + 16) = 0;
LABEL_35:
    result = swift_release();
  }
  else
  {
    result = swift_release();
    v3 = v30;
  }
  *v3 = v7;
  return result;
}

uint64_t sub_1B1E99394(uint64_t a1, char a2)
{
  return sub_1B1EA33A0(a1, a2, (unint64_t *)&qword_1EEF5B358);
}

uint64_t sub_1B1E993A8(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  int v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t result;
  uint64_t *v37;
  _QWORD *v38;
  uint64_t i;
  char v40;
  uint64_t v41;
  char v42[72];

  v3 = v2;
  v5 = *v2;
  sub_1B1B9D92C();
  v40 = a2;
  v6 = sub_1B22296C4();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_36;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v37 = v2;
  v38 = (_QWORD *)(v5 + 64);
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v11 = (unint64_t)(v8 + 63) >> 6;
  v12 = v6 + 64;
  swift_retain();
  v13 = 0;
  for (i = v5; ; v5 = i)
  {
    if (v10)
    {
      v17 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v18 = v17 | (v13 << 6);
      goto LABEL_20;
    }
    v19 = v13 + 1;
    if (v13 + 1 >= v11)
      goto LABEL_31;
    v20 = v38[v19];
    if (!v20)
    {
      v19 = v13 + 2;
      if (v13 + 2 >= v11)
        goto LABEL_31;
      v20 = v38[v19];
      if (!v20)
      {
        v19 = v13 + 3;
        if (v13 + 3 >= v11)
          goto LABEL_31;
        v20 = v38[v19];
        if (!v20)
          break;
      }
    }
LABEL_19:
    v10 = (v20 - 1) & v20;
    v18 = __clz(__rbit64(v20)) + (v19 << 6);
    v13 = v19;
LABEL_20:
    v21 = *(_QWORD *)(v5 + 56);
    v22 = *(_QWORD *)(v5 + 48) + 32 * v18;
    v23 = *(_QWORD *)v22;
    v24 = *(_BYTE *)(v22 + 8);
    v25 = *(_QWORD *)(v22 + 16);
    v26 = *(unsigned __int8 *)(v22 + 24);
    v27 = (uint64_t *)(v21 + 16 * v18);
    v28 = v27[1];
    v41 = *v27;
    if ((v40 & 1) == 0)
    {
      sub_1B1B1DD24(v23);
      swift_bridgeObjectRetain();
    }
    sub_1B222A06C();
    sub_1B1C9721C((uint64_t)v42, v23);
    sub_1B222A084();
    sub_1B222A084();
    if (!v26)
      sub_1B222A078();
    v29 = sub_1B222A0C0();
    v30 = -1 << *(_BYTE *)(v7 + 32);
    v31 = v29 & ~v30;
    v32 = v31 >> 6;
    if (((-1 << v31) & ~*(_QWORD *)(v12 + 8 * (v31 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1 << v31) & ~*(_QWORD *)(v12 + 8 * (v31 >> 6)))) | v31 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v33 = (unint64_t)(63 - v30) >> 6;
      do
      {
        if (v32 + 1 == v33)
          v32 = 0;
        else
          ++v32;
        v34 = *(_QWORD *)(v12 + 8 * v32);
      }
      while (v34 == -1);
      v14 = __clz(__rbit64(~v34)) + (v32 << 6);
    }
    *(_QWORD *)(v12 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    v15 = *(_QWORD *)(v7 + 48) + 32 * v14;
    *(_QWORD *)v15 = v23;
    *(_BYTE *)(v15 + 8) = v24;
    *(_QWORD *)(v15 + 16) = v25;
    *(_BYTE *)(v15 + 24) = v26;
    v16 = (_QWORD *)(*(_QWORD *)(v7 + 56) + 16 * v14);
    *v16 = v41;
    v16[1] = v28;
    ++*(_QWORD *)(v7 + 16);
  }
  while (v11 - 4 != v13)
  {
    v20 = *(_QWORD *)(v5 + 8 * v13++ + 96);
    if (v20)
    {
      v19 = v13 + 3;
      goto LABEL_19;
    }
  }
LABEL_31:
  swift_release();
  v3 = v37;
  if ((v40 & 1) != 0)
  {
    v35 = 1 << *(_BYTE *)(v5 + 32);
    if (v35 >= 64)
      bzero(v38, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
    else
      *v38 = -1 << v35;
    *(_QWORD *)(v5 + 16) = 0;
  }
LABEL_36:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_1B1E996DC(uint64_t a1, int a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t result;
  uint64_t v38;
  unint64_t v39;
  int v40;
  uint64_t *v41;
  _QWORD *v42;
  int64_t v43;
  uint64_t v44;
  uint64_t i;

  v3 = v2;
  v5 = sub_1B222826C();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v2;
  sub_1B1B9C920();
  v11 = sub_1B22296C4();
  v12 = v11;
  if (!*(_QWORD *)(v10 + 16))
    goto LABEL_36;
  v13 = 1 << *(_BYTE *)(v10 + 32);
  v14 = *(_QWORD *)(v10 + 64);
  v41 = v2;
  v42 = (_QWORD *)(v10 + 64);
  if (v13 < 64)
    v15 = ~(-1 << v13);
  else
    v15 = -1;
  v16 = v15 & v14;
  v17 = (unint64_t)(v13 + 63) >> 6;
  v18 = v11 + 64;
  swift_retain();
  v19 = a2;
  v20 = 0;
  v40 = v19;
  v21 = (v19 & 1) == 0;
  v22 = 16;
  if (!v21)
    v22 = 32;
  v43 = v17;
  v44 = v22;
  v39 = v17 - 4;
  for (i = v10; ; v10 = i)
  {
    if (v16)
    {
      v24 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v25 = v24 | (v20 << 6);
      goto LABEL_22;
    }
    v26 = v20 + 1;
    if (v20 + 1 >= v43)
      goto LABEL_29;
    v27 = v42[v26];
    if (!v27)
    {
      v26 = v20 + 2;
      if (v20 + 2 >= v43)
        goto LABEL_29;
      v27 = v42[v26];
      if (!v27)
      {
        v26 = v20 + 3;
        if (v20 + 3 >= v43)
          goto LABEL_29;
        v27 = v42[v26];
        if (!v27)
          break;
      }
    }
LABEL_21:
    v16 = (v27 - 1) & v27;
    v25 = __clz(__rbit64(v27)) + (v26 << 6);
    v20 = v26;
LABEL_22:
    v28 = *(_QWORD *)(v6 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v6 + v44))(v9, *(_QWORD *)(v10 + 48) + v28 * v25, v5);
    v29 = *(_BYTE *)(*(_QWORD *)(v10 + 56) + v25);
    sub_1B19E52CC((unint64_t *)&qword_1ED4B7B38, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
    v30 = sub_1B22285D8();
    v31 = -1 << *(_BYTE *)(v12 + 32);
    v32 = v30 & ~v31;
    v33 = v32 >> 6;
    if (((-1 << v32) & ~*(_QWORD *)(v18 + 8 * (v32 >> 6))) != 0)
    {
      v23 = __clz(__rbit64((-1 << v32) & ~*(_QWORD *)(v18 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v34 = (unint64_t)(63 - v31) >> 6;
      do
      {
        if (v33 + 1 == v34)
          v33 = 0;
        else
          ++v33;
        v35 = *(_QWORD *)(v18 + 8 * v33);
      }
      while (v35 == -1);
      v23 = __clz(__rbit64(~v35)) + (v33 << 6);
    }
    *(_QWORD *)(v18 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(*(_QWORD *)(v12 + 48) + v28 * v23, v9, v5);
    *(_BYTE *)(*(_QWORD *)(v12 + 56) + v23) = v29;
    ++*(_QWORD *)(v12 + 16);
  }
  while (v39 != v20)
  {
    v27 = *(_QWORD *)(v10 + 8 * v20++ + 96);
    if (v27)
    {
      v26 = v20 + 3;
      goto LABEL_21;
    }
  }
LABEL_29:
  swift_release();
  v3 = v41;
  if ((v40 & 1) != 0)
  {
    v36 = 1 << *(_BYTE *)(i + 32);
    if (v36 >= 64)
      bzero(v42, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
    else
      *v42 = -1 << v36;
    *(_QWORD *)(i + 16) = 0;
  }
LABEL_36:
  result = swift_release();
  *v3 = v12;
  return result;
}

uint64_t sub_1B1E99A38(uint64_t a1, int a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t result;
  uint64_t v43;
  unint64_t v44;
  uint64_t *v45;
  _QWORD *v46;
  int64_t v47;
  uint64_t v48;
  uint64_t i;
  int v50;

  v3 = v2;
  v5 = sub_1B222826C();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v2;
  sub_1B1EB66A8();
  v50 = a2;
  v11 = sub_1B22296C4();
  v12 = v11;
  if (!*(_QWORD *)(v10 + 16))
    goto LABEL_35;
  v13 = 1 << *(_BYTE *)(v10 + 32);
  v14 = *(_QWORD *)(v10 + 64);
  v45 = v2;
  v46 = (_QWORD *)(v10 + 64);
  if (v13 < 64)
    v15 = ~(-1 << v13);
  else
    v15 = -1;
  v16 = v15 & v14;
  v17 = (unint64_t)(v13 + 63) >> 6;
  v18 = v11 + 64;
  swift_retain();
  v19 = 0;
  v47 = v17;
  v48 = v6;
  v44 = v17 - 4;
  for (i = v10; ; v10 = i)
  {
    if (v16)
    {
      v23 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v24 = v23 | (v19 << 6);
      goto LABEL_20;
    }
    v25 = v19 + 1;
    if (v19 + 1 >= v47)
      goto LABEL_30;
    v26 = v46[v25];
    if (!v26)
    {
      v25 = v19 + 2;
      if (v19 + 2 >= v47)
        goto LABEL_30;
      v26 = v46[v25];
      if (!v26)
      {
        v25 = v19 + 3;
        if (v19 + 3 >= v47)
          goto LABEL_30;
        v26 = v46[v25];
        if (!v26)
          break;
      }
    }
LABEL_19:
    v16 = (v26 - 1) & v26;
    v24 = __clz(__rbit64(v26)) + (v25 << 6);
    v19 = v25;
LABEL_20:
    v27 = v6;
    v28 = *(_QWORD *)(v6 + 72);
    v29 = *(_QWORD *)(v10 + 48) + v28 * v24;
    v30 = 16 * v24;
    if ((v50 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v27 + 32))(v9, v29, v5);
      v31 = *(_QWORD *)(v10 + 56) + v30;
      v32 = *(id *)v31;
      v33 = *(_BYTE *)(v31 + 8);
    }
    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v27 + 16))(v9, v29, v5);
      v34 = *(_QWORD *)(v10 + 56) + v30;
      v32 = *(id *)v34;
      v33 = *(_BYTE *)(v34 + 8);
      sub_1B1BE2C40(*(id *)v34, v33);
    }
    sub_1B19E52CC((unint64_t *)&qword_1ED4B7B38, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
    v35 = sub_1B22285D8();
    v36 = -1 << *(_BYTE *)(v12 + 32);
    v37 = v35 & ~v36;
    v38 = v37 >> 6;
    if (((-1 << v37) & ~*(_QWORD *)(v18 + 8 * (v37 >> 6))) != 0)
    {
      v20 = __clz(__rbit64((-1 << v37) & ~*(_QWORD *)(v18 + 8 * (v37 >> 6)))) | v37 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v39 = (unint64_t)(63 - v36) >> 6;
      do
      {
        if (v38 + 1 == v39)
          v38 = 0;
        else
          ++v38;
        v40 = *(_QWORD *)(v18 + 8 * v38);
      }
      while (v40 == -1);
      v20 = __clz(__rbit64(~v40)) + (v38 << 6);
    }
    *(_QWORD *)(v18 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
    v21 = *(_QWORD *)(v12 + 48) + v28 * v20;
    v6 = v48;
    (*(void (**)(unint64_t, char *, uint64_t))(v48 + 32))(v21, v9, v5);
    v22 = *(_QWORD *)(v12 + 56) + 16 * v20;
    *(_QWORD *)v22 = v32;
    *(_BYTE *)(v22 + 8) = v33;
    ++*(_QWORD *)(v12 + 16);
  }
  while (v44 != v19)
  {
    v26 = *(_QWORD *)(v10 + 8 * v19++ + 96);
    if (v26)
    {
      v25 = v19 + 3;
      goto LABEL_19;
    }
  }
LABEL_30:
  swift_release();
  v3 = v45;
  if ((v50 & 1) != 0)
  {
    v41 = 1 << *(_BYTE *)(v10 + 32);
    if (v41 >= 64)
      bzero(v46, ((unint64_t)(v41 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
    else
      *v46 = -1 << v41;
    *(_QWORD *)(v10 + 16) = 0;
  }
LABEL_35:
  result = swift_release();
  *v3 = v12;
  return result;
}

uint64_t sub_1B1E99DBC(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t result;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  __int128 v31;

  v3 = v2;
  v5 = *v2;
  sub_1B1B99B8C(0, (unint64_t *)&qword_1EEF5B740, (void (*)(uint64_t))sub_1B1EB6644);
  v6 = sub_1B22296C4();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_35;
  v30 = v3;
  v8 = 0;
  v9 = (uint64_t *)(v5 + 64);
  v10 = 1 << *(_BYTE *)(v5 + 32);
  v28 = -1 << v10;
  v29 = v10;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  else
    v11 = -1;
  v12 = v11 & *(_QWORD *)(v5 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  v14 = v6 + 64;
  while (1)
  {
    if (v12)
    {
      v20 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v21 = v20 | (v8 << 6);
      goto LABEL_21;
    }
    v22 = v8 + 1;
    if (v8 + 1 >= v13)
      goto LABEL_29;
    v23 = v9[v22];
    if (!v23)
    {
      v22 = v8 + 2;
      if (v8 + 2 >= v13)
        goto LABEL_29;
      v23 = v9[v22];
      if (!v23)
      {
        v22 = v8 + 3;
        if (v8 + 3 >= v13)
          goto LABEL_29;
        v23 = v9[v22];
        if (!v23)
          break;
      }
    }
LABEL_20:
    v12 = (v23 - 1) & v23;
    v21 = __clz(__rbit64(v23)) + (v22 << 6);
    v8 = v22;
LABEL_21:
    v24 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v21);
    v31 = *(_OWORD *)(*(_QWORD *)(v5 + 56) + 16 * v21);
    if ((a2 & 1) == 0)
      sub_1B1B632F0(*((unint64_t *)&v31 + 1));
    v15 = sub_1B222A060();
    v16 = -1 << *(_BYTE *)(v7 + 32);
    v17 = v15 & ~v16;
    v18 = v17 >> 6;
    if (((-1 << v17) & ~*(_QWORD *)(v14 + 8 * (v17 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v17) & ~*(_QWORD *)(v14 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = (unint64_t)(63 - v16) >> 6;
      do
      {
        if (v18 + 1 == v25)
          v18 = 0;
        else
          ++v18;
        v26 = *(_QWORD *)(v14 + 8 * v18);
      }
      while (v26 == -1);
      v19 = __clz(__rbit64(~v26)) + (v18 << 6);
    }
    *(_QWORD *)(v14 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v19) = v24;
    *(_OWORD *)(*(_QWORD *)(v7 + 56) + 16 * v19) = v31;
    ++*(_QWORD *)(v7 + 16);
  }
  while (v13 - 4 != v8)
  {
    v23 = *(_QWORD *)(v5 + 96 + 8 * v8++);
    if (v23)
    {
      v22 = v8 + 3;
      goto LABEL_20;
    }
  }
LABEL_29:
  if ((a2 & 1) != 0)
  {
    v3 = v30;
    if (v29 >= 64)
      bzero((void *)(v5 + 64), 8 * v13);
    else
      *v9 = v28;
    *(_QWORD *)(v5 + 16) = 0;
LABEL_35:
    result = swift_release();
  }
  else
  {
    result = swift_release();
    v3 = v30;
  }
  *v3 = v7;
  return result;
}

uint64_t sub_1B1E9A05C(uint64_t a1, int a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t result;
  unint64_t v40;
  uint64_t *v41;
  _QWORD *v42;
  int64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  int v48;

  v3 = v2;
  v5 = sub_1B222826C();
  v46 = *(_QWORD *)(v5 - 8);
  v47 = v5;
  MEMORY[0x1E0C80A78](v5, v6);
  v45 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v2;
  sub_1B1B9D4E0();
  v48 = a2;
  v9 = sub_1B22296C4();
  v10 = v9;
  if (!*(_QWORD *)(v8 + 16))
    goto LABEL_34;
  v11 = 1 << *(_BYTE *)(v8 + 32);
  v12 = *(_QWORD *)(v8 + 64);
  v41 = v2;
  v42 = (_QWORD *)(v8 + 64);
  if (v11 < 64)
    v13 = ~(-1 << v11);
  else
    v13 = -1;
  v14 = v13 & v12;
  v15 = (unint64_t)(v11 + 63) >> 6;
  v16 = v9 + 64;
  swift_retain();
  v17 = 0;
  v43 = v15;
  v44 = v8;
  v40 = v15 - 4;
  v18 = v46;
  v19 = v47;
  while (1)
  {
    if (v14)
    {
      v27 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v28 = v27 | (v17 << 6);
      goto LABEL_21;
    }
    v29 = v17 + 1;
    if (v17 + 1 >= v43)
      goto LABEL_29;
    v30 = v42[v29];
    if (!v30)
    {
      v29 = v17 + 2;
      if (v17 + 2 >= v43)
        goto LABEL_29;
      v30 = v42[v29];
      if (!v30)
      {
        v29 = v17 + 3;
        if (v17 + 3 >= v43)
          goto LABEL_29;
        v30 = v42[v29];
        if (!v30)
          break;
      }
    }
LABEL_20:
    v14 = (v30 - 1) & v30;
    v28 = __clz(__rbit64(v30)) + (v29 << 6);
    v17 = v29;
LABEL_21:
    v31 = *(_QWORD *)(v8 + 56);
    v32 = (uint64_t *)(*(_QWORD *)(v8 + 48) + 16 * v28);
    v33 = *v32;
    v34 = v32[1];
    v35 = *(_QWORD *)(v31 + 8 * v28);
    if ((v48 & 1) == 0)
    {
      swift_retain();
      sub_1B1B632F0(v35);
    }
    sub_1B222A06C();
    v20 = v45;
    (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v45, v33 + OBJC_IVAR____TtC3VFX13AuthoringNode_authoringID, v19);
    sub_1B19E52CC((unint64_t *)&qword_1ED4B7B38, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
    sub_1B22285E4();
    (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v19);
    sub_1B222A078();
    v21 = sub_1B222A0C0();
    v22 = -1 << *(_BYTE *)(v10 + 32);
    v23 = v21 & ~v22;
    v24 = v23 >> 6;
    if (((-1 << v23) & ~*(_QWORD *)(v16 + 8 * (v23 >> 6))) != 0)
    {
      v25 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v16 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v36 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (v24 + 1 == v36)
          v24 = 0;
        else
          ++v24;
        v37 = *(_QWORD *)(v16 + 8 * v24);
      }
      while (v37 == -1);
      v25 = __clz(__rbit64(~v37)) + (v24 << 6);
    }
    *(_QWORD *)(v16 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v25;
    v26 = (_QWORD *)(*(_QWORD *)(v10 + 48) + 16 * v25);
    *v26 = v33;
    v26[1] = v34;
    *(_QWORD *)(*(_QWORD *)(v10 + 56) + 8 * v25) = v35;
    ++*(_QWORD *)(v10 + 16);
    v8 = v44;
  }
  while (v40 != v17)
  {
    v30 = *(_QWORD *)(v8 + 8 * v17++ + 96);
    if (v30)
    {
      v29 = v17 + 3;
      goto LABEL_20;
    }
  }
LABEL_29:
  swift_release();
  v3 = v41;
  if ((v48 & 1) != 0)
  {
    v38 = 1 << *(_BYTE *)(v8 + 32);
    if (v38 >= 64)
      bzero(v42, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
    else
      *v42 = -1 << v38;
    *(_QWORD *)(v8 + 16) = 0;
  }
LABEL_34:
  result = swift_release();
  *v3 = v10;
  return result;
}

uint64_t sub_1B1E9A3D4(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t result;
  _QWORD *v37;
  char v38;

  v3 = v2;
  v5 = *v2;
  sub_1B1EB6DB4(0, (unint64_t *)&qword_1ED4BA920);
  v38 = a2;
  v6 = sub_1B22296C4();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_34;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v37 = (_QWORD *)(v5 + 64);
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v11 = (unint64_t)(v8 + 63) >> 6;
  v12 = v6 + 64;
  swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v22 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v23 = v22 | (v13 << 6);
      goto LABEL_21;
    }
    v24 = v13 + 1;
    if (v13 + 1 >= v11)
      goto LABEL_29;
    v25 = v37[v24];
    if (!v25)
    {
      v24 = v13 + 2;
      if (v13 + 2 >= v11)
        goto LABEL_29;
      v25 = v37[v24];
      if (!v25)
      {
        v24 = v13 + 3;
        if (v13 + 3 >= v11)
          goto LABEL_29;
        v25 = v37[v24];
        if (!v25)
          break;
      }
    }
LABEL_20:
    v10 = (v25 - 1) & v25;
    v23 = __clz(__rbit64(v25)) + (v24 << 6);
    v13 = v24;
LABEL_21:
    v26 = 16 * v23;
    v27 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v23);
    v29 = *v27;
    v28 = v27[1];
    v30 = (uint64_t *)(*(_QWORD *)(v5 + 56) + v26);
    v31 = *v30;
    v32 = v30[1];
    if ((v38 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_retain();
    }
    sub_1B222A06C();
    sub_1B2228824();
    v14 = sub_1B222A0C0();
    v15 = -1 << *(_BYTE *)(v7 + 32);
    v16 = v14 & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v33 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (v17 + 1 == v33)
          v17 = 0;
        else
          ++v17;
        v34 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v34 == -1);
      v18 = __clz(__rbit64(~v34)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = 16 * v18;
    v20 = (_QWORD *)(*(_QWORD *)(v7 + 48) + v19);
    *v20 = v29;
    v20[1] = v28;
    v21 = (_QWORD *)(*(_QWORD *)(v7 + 56) + v19);
    *v21 = v31;
    v21[1] = v32;
    ++*(_QWORD *)(v7 + 16);
  }
  while (v11 - 4 != v13)
  {
    v25 = *(_QWORD *)(v5 + 8 * v13++ + 96);
    if (v25)
    {
      v24 = v13 + 3;
      goto LABEL_20;
    }
  }
LABEL_29:
  swift_release();
  if ((v38 & 1) != 0)
  {
    v35 = 1 << *(_BYTE *)(v5 + 32);
    if (v35 >= 64)
      bzero(v37, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
    else
      *v37 = -1 << v35;
    *(_QWORD *)(v5 + 16) = 0;
  }
LABEL_34:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_1B1E9A6EC(uint64_t a1, char a2)
{
  return sub_1B1EA0974(a1, a2, sub_1B1EB5BC0);
}

uint64_t sub_1B1E9A6F8(uint64_t a1, int a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  void (*v10)(uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t result;
  uint64_t *v37;
  uint64_t v38;
  int64_t v39;
  _QWORD *v40;
  int64_t v41;
  uint64_t v42;
  int v43;

  v3 = v2;
  v5 = type metadata accessor for GraphScriptingConfig.ScriptInfo();
  v42 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v2;
  sub_1B1B99DB0(0, (unint64_t *)&qword_1ED4BA8C0, v10, (void (*)(void))sub_1B1B9DE34);
  v43 = a2;
  v11 = sub_1B22296C4();
  v12 = v11;
  if (!*(_QWORD *)(v9 + 16))
    goto LABEL_38;
  v13 = 0;
  v14 = 1 << *(_BYTE *)(v9 + 32);
  if (v14 < 64)
    v15 = ~(-1 << v14);
  else
    v15 = -1;
  v16 = v15 & *(_QWORD *)(v9 + 64);
  v17 = v11 + 64;
  v40 = (_QWORD *)(v9 + 64);
  v41 = (unint64_t)(v14 + 63) >> 6;
  v39 = v41 - 4;
  v37 = v2;
  v38 = v9 + 96;
  while (1)
  {
    if (v16)
    {
      v20 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v21 = v20 | (v13 << 6);
      goto LABEL_20;
    }
    v22 = v13 + 1;
    if (v13 + 1 >= v41)
      goto LABEL_32;
    v23 = v40[v22];
    if (!v23)
    {
      v22 = v13 + 2;
      if (v13 + 2 >= v41)
        goto LABEL_32;
      v23 = v40[v22];
      if (!v23)
      {
        v22 = v13 + 3;
        if (v13 + 3 >= v41)
          goto LABEL_32;
        v23 = v40[v22];
        if (!v23)
          break;
      }
    }
LABEL_19:
    v16 = (v23 - 1) & v23;
    v21 = __clz(__rbit64(v23)) + (v22 << 6);
    v13 = v22;
LABEL_20:
    v24 = *(_QWORD *)(v9 + 48) + 8 * v21;
    v25 = *(_DWORD *)v24;
    v26 = *(unsigned __int8 *)(v24 + 4);
    v27 = *(_QWORD *)(v42 + 72);
    v28 = *(_QWORD *)(v9 + 56) + v27 * v21;
    if ((v43 & 1) != 0)
      sub_1B1A025EC(v28, (uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for GraphScriptingConfig.ScriptInfo);
    else
      sub_1B1792810(v28, (uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for GraphScriptingConfig.ScriptInfo);
    sub_1B222A06C();
    sub_1B222A078();
    if (!v26)
      sub_1B222A09C();
    v29 = sub_1B222A0C0();
    v30 = -1 << *(_BYTE *)(v12 + 32);
    v31 = v29 & ~v30;
    v32 = v31 >> 6;
    if (((-1 << v31) & ~*(_QWORD *)(v17 + 8 * (v31 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v31) & ~*(_QWORD *)(v17 + 8 * (v31 >> 6)))) | v31 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v33 = (unint64_t)(63 - v30) >> 6;
      do
      {
        if (v32 + 1 == v33)
          v32 = 0;
        else
          ++v32;
        v34 = *(_QWORD *)(v17 + 8 * v32);
      }
      while (v34 == -1);
      v18 = __clz(__rbit64(~v34)) + (v32 << 6);
    }
    *(_QWORD *)(v17 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = *(_QWORD *)(v12 + 48) + 8 * v18;
    *(_DWORD *)v19 = v25;
    *(_BYTE *)(v19 + 4) = v26;
    sub_1B1A025EC((uint64_t)v8, *(_QWORD *)(v12 + 56) + v27 * v18, (uint64_t (*)(_QWORD))type metadata accessor for GraphScriptingConfig.ScriptInfo);
    ++*(_QWORD *)(v12 + 16);
  }
  while (v39 != v13)
  {
    v23 = *(_QWORD *)(v38 + 8 * v13++);
    if (v23)
    {
      v22 = v13 + 3;
      goto LABEL_19;
    }
  }
LABEL_32:
  if ((v43 & 1) != 0)
  {
    v35 = 1 << *(_BYTE *)(v9 + 32);
    v3 = v37;
    if (v35 >= 64)
      bzero(v40, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
    else
      *v40 = -1 << v35;
    *(_QWORD *)(v9 + 16) = 0;
LABEL_38:
    result = swift_release();
  }
  else
  {
    result = swift_release();
    v3 = v37;
  }
  *v3 = v12;
  return result;
}

uint64_t sub_1B1E9AAA0(uint64_t a1, char a2)
{
  return sub_1B1EA0974(a1, a2, sub_1B1EB5B48);
}

uint64_t sub_1B1E9AAAC(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t result;
  _QWORD *v29;
  int64_t v30;

  v3 = v2;
  v5 = *v2;
  sub_1B1EB6AF4();
  v6 = sub_1B22296C4();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_35;
  v8 = 0;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v12 = v6 + 64;
  v29 = (_QWORD *)(v5 + 64);
  v30 = (unint64_t)(v9 + 63) >> 6;
  while (1)
  {
    if (v11)
    {
      v19 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v20 = v19 | (v8 << 6);
      goto LABEL_21;
    }
    v21 = v8 + 1;
    if (v8 + 1 >= v30)
      goto LABEL_29;
    v22 = v29[v21];
    if (!v22)
    {
      v21 = v8 + 2;
      if (v8 + 2 >= v30)
        goto LABEL_29;
      v22 = v29[v21];
      if (!v22)
      {
        v21 = v8 + 3;
        if (v8 + 3 >= v30)
          goto LABEL_29;
        v22 = v29[v21];
        if (!v22)
          break;
      }
    }
LABEL_20:
    v11 = (v22 - 1) & v22;
    v20 = __clz(__rbit64(v22)) + (v21 << 6);
    v8 = v21;
LABEL_21:
    v23 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v20);
    v24 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v20);
    if ((a2 & 1) == 0)
      swift_bridgeObjectRetain();
    sub_1B222A06C();
    sub_1B222A078();
    v13 = sub_1B222A0C0();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = v13 & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v12 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v12 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (v16 + 1 == v25)
          v16 = 0;
        else
          ++v16;
        v26 = *(_QWORD *)(v12 + 8 * v16);
      }
      while (v26 == -1);
      v17 = __clz(__rbit64(~v26)) + (v16 << 6);
    }
    *(_QWORD *)(v12 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = 8 * v17;
    *(_QWORD *)(*(_QWORD *)(v7 + 48) + v18) = v23;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + v18) = v24;
    ++*(_QWORD *)(v7 + 16);
  }
  while (v30 - 4 != v8)
  {
    v22 = *(_QWORD *)(v5 + 96 + 8 * v8++);
    if (v22)
    {
      v21 = v8 + 3;
      goto LABEL_20;
    }
  }
LABEL_29:
  if ((a2 & 1) != 0)
  {
    v27 = 1 << *(_BYTE *)(v5 + 32);
    v3 = v2;
    if (v27 >= 64)
      bzero(v29, ((unint64_t)(v27 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
    else
      *v29 = -1 << v27;
    *(_QWORD *)(v5 + 16) = 0;
LABEL_35:
    result = swift_release();
  }
  else
  {
    result = swift_release();
    v3 = v2;
  }
  *v3 = v7;
  return result;
}

uint64_t sub_1B1E9AD70(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t result;
  char v29;
  _QWORD *v30;

  v3 = v2;
  v5 = *v2;
  sub_1B1EB6DB4(0, (unint64_t *)&qword_1ED4B7A50);
  v6 = sub_1B22296C4();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_33;
  v29 = a2;
  v8 = 0;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v12 = (unint64_t)(v9 + 63) >> 6;
  v13 = v6 + 64;
  v30 = (_QWORD *)(v5 + 64);
  while (1)
  {
    if (v11)
    {
      v15 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v16 = v15 | (v8 << 6);
      goto LABEL_20;
    }
    v17 = v8 + 1;
    if (v8 + 1 >= v12)
      goto LABEL_27;
    v18 = v30[v17];
    if (!v18)
    {
      v17 = v8 + 2;
      if (v8 + 2 >= v12)
        goto LABEL_27;
      v18 = v30[v17];
      if (!v18)
      {
        v17 = v8 + 3;
        if (v8 + 3 >= v12)
          goto LABEL_27;
        v18 = v30[v17];
        if (!v18)
          break;
      }
    }
LABEL_19:
    v11 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v8 = v17;
LABEL_20:
    v19 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v16);
    v20 = *(_BYTE *)(*(_QWORD *)(v5 + 56) + v16);
    sub_1B222A06C();
    sub_1B222A078();
    v21 = sub_1B222A0C0();
    v22 = -1 << *(_BYTE *)(v7 + 32);
    v23 = v21 & ~v22;
    v24 = v23 >> 6;
    if (((-1 << v23) & ~*(_QWORD *)(v13 + 8 * (v23 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v13 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (v24 + 1 == v25)
          v24 = 0;
        else
          ++v24;
        v26 = *(_QWORD *)(v13 + 8 * v24);
      }
      while (v26 == -1);
      v14 = __clz(__rbit64(~v26)) + (v24 << 6);
    }
    *(_QWORD *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v14) = v19;
    *(_BYTE *)(*(_QWORD *)(v7 + 56) + v14) = v20;
    ++*(_QWORD *)(v7 + 16);
  }
  while (v12 - 4 != v8)
  {
    v18 = *(_QWORD *)(v5 + 96 + 8 * v8++);
    if (v18)
    {
      v17 = v8 + 3;
      goto LABEL_19;
    }
  }
LABEL_27:
  if ((v29 & 1) != 0)
  {
    v27 = 1 << *(_BYTE *)(v5 + 32);
    v3 = v2;
    if (v27 >= 64)
      bzero(v30, ((unint64_t)(v27 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
    else
      *v30 = -1 << v27;
    *(_QWORD *)(v5 + 16) = 0;
LABEL_33:
    result = swift_release();
  }
  else
  {
    result = swift_release();
    v3 = v2;
  }
  *v3 = v7;
  return result;
}

uint64_t sub_1B1E9B038(uint64_t a1, char a2)
{
  return sub_1B1E94158(a1, a2, (void (*)(_QWORD))sub_1B1EB68B0);
}

uint64_t sub_1B1E9B044(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t result;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  char v33;

  v3 = v2;
  v5 = *v2;
  sub_1B1B99B8C(0, &qword_1EEF60188, type metadata accessor for RGResource);
  v6 = sub_1B22296C4();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_33;
  v33 = a2;
  v8 = 0;
  v9 = (uint64_t *)(v5 + 64);
  v10 = 1 << *(_BYTE *)(v5 + 32);
  v30 = -1 << v10;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  else
    v11 = -1;
  v12 = v11 & *(_QWORD *)(v5 + 64);
  v31 = 1 << *(_BYTE *)(v5 + 32);
  v32 = v3;
  v13 = (unint64_t)(v10 + 63) >> 6;
  v14 = v6 + 64;
  while (1)
  {
    if (v12)
    {
      v17 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v18 = v17 | (v8 << 6);
      goto LABEL_20;
    }
    v19 = v8 + 1;
    if (v8 + 1 >= v13)
      goto LABEL_27;
    v20 = v9[v19];
    if (!v20)
    {
      v19 = v8 + 2;
      if (v8 + 2 >= v13)
        goto LABEL_27;
      v20 = v9[v19];
      if (!v20)
      {
        v19 = v8 + 3;
        if (v8 + 3 >= v13)
          goto LABEL_27;
        v20 = v9[v19];
        if (!v20)
          break;
      }
    }
LABEL_19:
    v12 = (v20 - 1) & v20;
    v18 = __clz(__rbit64(v20)) + (v19 << 6);
    v8 = v19;
LABEL_20:
    v21 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v18);
    v22 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v18);
    v23 = sub_1B222A060();
    v24 = -1 << *(_BYTE *)(v7 + 32);
    v25 = v23 & ~v24;
    v26 = v25 >> 6;
    if (((-1 << v25) & ~*(_QWORD *)(v14 + 8 * (v25 >> 6))) != 0)
    {
      v15 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v14 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (v26 + 1 == v27)
          v26 = 0;
        else
          ++v26;
        v28 = *(_QWORD *)(v14 + 8 * v26);
      }
      while (v28 == -1);
      v15 = __clz(__rbit64(~v28)) + (v26 << 6);
    }
    *(_QWORD *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    v16 = 8 * v15;
    *(_QWORD *)(*(_QWORD *)(v7 + 48) + v16) = v21;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + v16) = v22;
    ++*(_QWORD *)(v7 + 16);
  }
  while (v13 - 4 != v8)
  {
    v20 = *(_QWORD *)(v5 + 96 + 8 * v8++);
    if (v20)
    {
      v19 = v8 + 3;
      goto LABEL_19;
    }
  }
LABEL_27:
  if ((v33 & 1) != 0)
  {
    v3 = v32;
    if (v31 >= 64)
      bzero((void *)(v5 + 64), 8 * v13);
    else
      *v9 = v30;
    *(_QWORD *)(v5 + 16) = 0;
LABEL_33:
    result = swift_release();
  }
  else
  {
    result = swift_release();
    v3 = v32;
  }
  *v3 = v7;
  return result;
}

uint64_t sub_1B1E9B2D8(uint64_t a1, int a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t result;
  unint64_t v36;
  uint64_t *v37;
  _QWORD *v38;
  int64_t v39;
  uint64_t v40;
  int v41;

  v3 = v2;
  v5 = sub_1B222826C();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v2;
  sub_1B1B9D3B4();
  v41 = a2;
  v11 = sub_1B22296C4();
  v12 = v11;
  if (!*(_QWORD *)(v10 + 16))
    goto LABEL_35;
  v13 = 1 << *(_BYTE *)(v10 + 32);
  v14 = *(_QWORD *)(v10 + 64);
  v37 = v2;
  v38 = (_QWORD *)(v10 + 64);
  if (v13 < 64)
    v15 = ~(-1 << v13);
  else
    v15 = -1;
  v16 = v15 & v14;
  v17 = (unint64_t)(v13 + 63) >> 6;
  v18 = v11 + 64;
  swift_retain();
  v19 = 0;
  v39 = v17;
  v40 = v10;
  v36 = v17 - 4;
  while (1)
  {
    if (v16)
    {
      v21 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v22 = v21 | (v19 << 6);
      goto LABEL_20;
    }
    v23 = v19 + 1;
    if (v19 + 1 >= v39)
      goto LABEL_30;
    v24 = v38[v23];
    if (!v24)
    {
      v23 = v19 + 2;
      if (v19 + 2 >= v39)
        goto LABEL_30;
      v24 = v38[v23];
      if (!v24)
      {
        v23 = v19 + 3;
        if (v19 + 3 >= v39)
          goto LABEL_30;
        v24 = v38[v23];
        if (!v24)
          break;
      }
    }
LABEL_19:
    v16 = (v24 - 1) & v24;
    v22 = __clz(__rbit64(v24)) + (v23 << 6);
    v19 = v23;
LABEL_20:
    v25 = *(_QWORD *)(v6 + 72);
    v26 = *(_QWORD *)(v10 + 48) + v25 * v22;
    if ((v41 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v6 + 32))(v9, v26, v5);
      v27 = *(_QWORD *)(*(_QWORD *)(v10 + 56) + 8 * v22);
    }
    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v9, v26, v5);
      v27 = *(_QWORD *)(*(_QWORD *)(v10 + 56) + 8 * v22);
      swift_bridgeObjectRetain();
    }
    sub_1B19E52CC((unint64_t *)&qword_1ED4B7B38, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
    v28 = sub_1B22285D8();
    v29 = -1 << *(_BYTE *)(v12 + 32);
    v30 = v28 & ~v29;
    v31 = v30 >> 6;
    if (((-1 << v30) & ~*(_QWORD *)(v18 + 8 * (v30 >> 6))) != 0)
    {
      v20 = __clz(__rbit64((-1 << v30) & ~*(_QWORD *)(v18 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v32 = (unint64_t)(63 - v29) >> 6;
      do
      {
        if (v31 + 1 == v32)
          v31 = 0;
        else
          ++v31;
        v33 = *(_QWORD *)(v18 + 8 * v31);
      }
      while (v33 == -1);
      v20 = __clz(__rbit64(~v33)) + (v31 << 6);
    }
    *(_QWORD *)(v18 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
    (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(*(_QWORD *)(v12 + 48) + v25 * v20, v9, v5);
    *(_QWORD *)(*(_QWORD *)(v12 + 56) + 8 * v20) = v27;
    ++*(_QWORD *)(v12 + 16);
    v10 = v40;
  }
  while (v36 != v19)
  {
    v24 = *(_QWORD *)(v10 + 8 * v19++ + 96);
    if (v24)
    {
      v23 = v19 + 3;
      goto LABEL_19;
    }
  }
LABEL_30:
  swift_release();
  v3 = v37;
  if ((v41 & 1) != 0)
  {
    v34 = 1 << *(_BYTE *)(v10 + 32);
    if (v34 >= 64)
      bzero(v38, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
    else
      *v38 = -1 << v34;
    *(_QWORD *)(v10 + 16) = 0;
  }
LABEL_35:
  result = swift_release();
  *v3 = v12;
  return result;
}

uint64_t sub_1B1E9B630(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t result;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  int64_t v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  char v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  char v69;

  v3 = v2;
  v5 = *v2;
  sub_1B1B99B8C(0, &qword_1EEF60158, (void (*)(uint64_t))sub_1B1C795D4);
  v6 = sub_1B22296C4();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_35;
  v48 = v3;
  v8 = 0;
  v9 = (uint64_t *)(v5 + 64);
  v10 = 1 << *(_BYTE *)(v5 + 32);
  v46 = -1 << v10;
  v47 = v10;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  else
    v11 = -1;
  v12 = v11 & *(_QWORD *)(v5 + 64);
  v13 = v6 + 64;
  v49 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v20 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v21 = v20 | (v8 << 6);
      if ((a2 & 1) != 0)
        goto LABEL_10;
      goto LABEL_21;
    }
    v29 = v8 + 1;
    if (v8 + 1 >= v49)
      goto LABEL_29;
    v30 = v9[v29];
    if (!v30)
    {
      v29 = v8 + 2;
      if (v8 + 2 >= v49)
        goto LABEL_29;
      v30 = v9[v29];
      if (!v30)
      {
        v29 = v8 + 3;
        if (v8 + 3 >= v49)
          goto LABEL_29;
        v30 = v9[v29];
        if (!v30)
          break;
      }
    }
LABEL_20:
    v12 = (v30 - 1) & v30;
    v21 = __clz(__rbit64(v30)) + (v29 << 6);
    v8 = v29;
    if ((a2 & 1) != 0)
    {
LABEL_10:
      v22 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v21);
      v23 = *(_QWORD *)(v5 + 56) + 152 * v21;
      v24 = *(_OWORD *)(v23 + 112);
      v66 = *(_OWORD *)(v23 + 96);
      v67 = v24;
      v68 = *(_OWORD *)(v23 + 128);
      v69 = *(_BYTE *)(v23 + 144);
      v25 = *(_OWORD *)(v23 + 48);
      v62 = *(_OWORD *)(v23 + 32);
      v63 = v25;
      v26 = *(_OWORD *)(v23 + 80);
      v64 = *(_OWORD *)(v23 + 64);
      v65 = v26;
      v27 = *(_OWORD *)v23;
      v28 = *(_OWORD *)(v23 + 16);
      goto LABEL_22;
    }
LABEL_21:
    v22 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v21);
    v31 = *(_QWORD *)(v5 + 56) + 152 * v21;
    v32 = *(_OWORD *)(v31 + 16);
    v50 = *(_OWORD *)v31;
    v51 = v32;
    v33 = *(_OWORD *)(v31 + 80);
    v35 = *(_OWORD *)(v31 + 32);
    v34 = *(_OWORD *)(v31 + 48);
    v54 = *(_OWORD *)(v31 + 64);
    v55 = v33;
    v52 = v35;
    v53 = v34;
    v37 = *(_OWORD *)(v31 + 112);
    v36 = *(_OWORD *)(v31 + 128);
    v38 = *(_OWORD *)(v31 + 96);
    v59 = *(_BYTE *)(v31 + 144);
    v57 = v37;
    v58 = v36;
    v56 = v38;
    sub_1B1B7C5AC((uint64_t)&v50);
    v66 = v56;
    v67 = v57;
    v68 = v58;
    v69 = v59;
    v62 = v52;
    v63 = v53;
    v64 = v54;
    v65 = v55;
    v27 = v50;
    v28 = v51;
LABEL_22:
    v60 = v27;
    v61 = v28;
    v39 = sub_1B222A060();
    v40 = -1 << *(_BYTE *)(v7 + 32);
    v41 = v39 & ~v40;
    v42 = v41 >> 6;
    if (((-1 << v41) & ~*(_QWORD *)(v13 + 8 * (v41 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1 << v41) & ~*(_QWORD *)(v13 + 8 * (v41 >> 6)))) | v41 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v43 = (unint64_t)(63 - v40) >> 6;
      do
      {
        if (v42 + 1 == v43)
          v42 = 0;
        else
          ++v42;
        v44 = *(_QWORD *)(v13 + 8 * v42);
      }
      while (v44 == -1);
      v14 = __clz(__rbit64(~v44)) + (v42 << 6);
    }
    *(_QWORD *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v14) = v22;
    v15 = *(_QWORD *)(v7 + 56) + 152 * v14;
    v16 = v67;
    *(_OWORD *)(v15 + 96) = v66;
    *(_OWORD *)(v15 + 112) = v16;
    *(_OWORD *)(v15 + 128) = v68;
    *(_BYTE *)(v15 + 144) = v69;
    v17 = v63;
    *(_OWORD *)(v15 + 32) = v62;
    *(_OWORD *)(v15 + 48) = v17;
    v18 = v65;
    *(_OWORD *)(v15 + 64) = v64;
    *(_OWORD *)(v15 + 80) = v18;
    v19 = v61;
    *(_OWORD *)v15 = v60;
    *(_OWORD *)(v15 + 16) = v19;
    ++*(_QWORD *)(v7 + 16);
  }
  while (v49 - 4 != v8)
  {
    v30 = *(_QWORD *)(v5 + 96 + 8 * v8++);
    if (v30)
    {
      v29 = v8 + 3;
      goto LABEL_20;
    }
  }
LABEL_29:
  if ((a2 & 1) != 0)
  {
    v3 = v48;
    if (v47 >= 64)
      bzero((void *)(v5 + 64), 8 * v49);
    else
      *v9 = v46;
    *(_QWORD *)(v5 + 16) = 0;
LABEL_35:
    result = swift_release();
  }
  else
  {
    result = swift_release();
    v3 = v48;
  }
  *v3 = v7;
  return result;
}

uint64_t sub_1B1E9B9A4(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t result;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  __int128 v31;

  v3 = v2;
  v5 = *v2;
  sub_1B1EB6834();
  v6 = sub_1B22296C4();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_35;
  v30 = v3;
  v8 = 0;
  v9 = (uint64_t *)(v5 + 64);
  v10 = 1 << *(_BYTE *)(v5 + 32);
  v28 = -1 << v10;
  v29 = v10;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  else
    v11 = -1;
  v12 = v11 & *(_QWORD *)(v5 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  v14 = v6 + 64;
  while (1)
  {
    if (v12)
    {
      v20 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v21 = v20 | (v8 << 6);
      goto LABEL_21;
    }
    v22 = v8 + 1;
    if (v8 + 1 >= v13)
      goto LABEL_29;
    v23 = v9[v22];
    if (!v23)
    {
      v22 = v8 + 2;
      if (v8 + 2 >= v13)
        goto LABEL_29;
      v23 = v9[v22];
      if (!v23)
      {
        v22 = v8 + 3;
        if (v8 + 3 >= v13)
          goto LABEL_29;
        v23 = v9[v22];
        if (!v23)
          break;
      }
    }
LABEL_20:
    v12 = (v23 - 1) & v23;
    v21 = __clz(__rbit64(v23)) + (v22 << 6);
    v8 = v22;
LABEL_21:
    v24 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v21);
    v31 = *(_OWORD *)(*(_QWORD *)(v5 + 56) + 16 * v21);
    if ((a2 & 1) == 0)
      swift_bridgeObjectRetain();
    v15 = sub_1B222A060();
    v16 = -1 << *(_BYTE *)(v7 + 32);
    v17 = v15 & ~v16;
    v18 = v17 >> 6;
    if (((-1 << v17) & ~*(_QWORD *)(v14 + 8 * (v17 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v17) & ~*(_QWORD *)(v14 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = (unint64_t)(63 - v16) >> 6;
      do
      {
        if (v18 + 1 == v25)
          v18 = 0;
        else
          ++v18;
        v26 = *(_QWORD *)(v14 + 8 * v18);
      }
      while (v26 == -1);
      v19 = __clz(__rbit64(~v26)) + (v18 << 6);
    }
    *(_QWORD *)(v14 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v19) = v24;
    *(_OWORD *)(*(_QWORD *)(v7 + 56) + 16 * v19) = v31;
    ++*(_QWORD *)(v7 + 16);
  }
  while (v13 - 4 != v8)
  {
    v23 = *(_QWORD *)(v5 + 96 + 8 * v8++);
    if (v23)
    {
      v22 = v8 + 3;
      goto LABEL_20;
    }
  }
LABEL_29:
  if ((a2 & 1) != 0)
  {
    v3 = v30;
    if (v29 >= 64)
      bzero((void *)(v5 + 64), 8 * v13);
    else
      *v9 = v28;
    *(_QWORD *)(v5 + 16) = 0;
LABEL_35:
    result = swift_release();
  }
  else
  {
    result = swift_release();
    v3 = v30;
  }
  *v3 = v7;
  return result;
}

uint64_t sub_1B1E9BC24(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t result;
  unint64_t v34;
  uint64_t *v35;
  _QWORD *v36;
  int64_t v37;
  uint64_t v38;
  char v39;
  _QWORD v40[6];

  v3 = v2;
  v5 = *v2;
  sub_1B1B99DB0(0, (unint64_t *)&unk_1EEF600A0, (void (*)(uint64_t))_s17CodeSourceSnippetCMa, (void (*)(void))sub_1B1B9CCE0);
  v39 = a2;
  v6 = sub_1B22296C4();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_34;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v35 = v2;
  v36 = (_QWORD *)(v5 + 64);
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v11 = (unint64_t)(v8 + 63) >> 6;
  v12 = v6 + 64;
  swift_retain();
  v13 = 0;
  v37 = v11;
  v38 = v5;
  v34 = v11 - 4;
  while (1)
  {
    if (v10)
    {
      v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v20 = v19 | (v13 << 6);
      goto LABEL_21;
    }
    v21 = v13 + 1;
    if (v13 + 1 >= v37)
      goto LABEL_29;
    v22 = v36[v21];
    if (!v22)
    {
      v21 = v13 + 2;
      if (v13 + 2 >= v37)
        goto LABEL_29;
      v22 = v36[v21];
      if (!v22)
      {
        v21 = v13 + 3;
        if (v13 + 3 >= v37)
          goto LABEL_29;
        v22 = v36[v21];
        if (!v22)
          break;
      }
    }
LABEL_20:
    v10 = (v22 - 1) & v22;
    v20 = __clz(__rbit64(v22)) + (v21 << 6);
    v13 = v21;
LABEL_21:
    v23 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 40 * v20);
    v24 = *v23;
    v25 = v23[1];
    v27 = v23[2];
    v26 = v23[3];
    v28 = v23[4];
    v29 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v20);
    if ((v39 & 1) == 0)
    {
      sub_1B19FA2B4(v24, v25);
      swift_retain();
    }
    v40[0] = v24;
    v40[1] = v25;
    v40[2] = v27;
    v40[3] = v26;
    v40[4] = v28;
    sub_1B222A06C();
    sub_1B1E03DBC();
    sub_1B2228824();
    swift_bridgeObjectRelease();
    v14 = sub_1B222A0C0();
    v15 = -1 << *(_BYTE *)(v7 + 32);
    v16 = v14 & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v30 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (v17 + 1 == v30)
          v17 = 0;
        else
          ++v17;
        v31 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v31 == -1);
      v18 = __clz(__rbit64(~v31)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    sub_1B19FA278((uint64_t)v40, *(_QWORD *)(v7 + 48) + 40 * v18);
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v18) = v29;
    ++*(_QWORD *)(v7 + 16);
    v5 = v38;
  }
  while (v34 != v13)
  {
    v22 = *(_QWORD *)(v5 + 8 * v13++ + 96);
    if (v22)
    {
      v21 = v13 + 3;
      goto LABEL_20;
    }
  }
LABEL_29:
  swift_release();
  v3 = v35;
  if ((v39 & 1) != 0)
  {
    v32 = 1 << *(_BYTE *)(v5 + 32);
    if (v32 >= 64)
      bzero(v36, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
    else
      *v36 = -1 << v32;
    *(_QWORD *)(v5 + 16) = 0;
  }
LABEL_34:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_1B1E9BF6C(uint64_t a1, char a2)
{
  return sub_1B1EA0974(a1, a2, sub_1B1EB657C);
}

uint64_t sub_1B1E9BF78(uint64_t a1, char a2)
{
  return sub_1B1EA0974(a1, a2, sub_1B1EB63CC);
}

uint64_t sub_1B1E9BF84(uint64_t a1, char a2)
{
  return sub_1B1EA0974(a1, a2, sub_1B1EB63A8);
}

uint64_t sub_1B1E9BF90(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t result;
  _QWORD *v30;
  int64_t v31;
  uint64_t v32;
  _BYTE v33[56];

  v3 = v2;
  v5 = *v2;
  sub_1B1B9A0EC();
  v6 = sub_1B22296C4();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_36;
  v8 = 0;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v12 = v6 + 64;
  v30 = (_QWORD *)(v5 + 64);
  v31 = (unint64_t)(v9 + 63) >> 6;
  while (1)
  {
    if (v11)
    {
      v15 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v16 = v15 | (v8 << 6);
      goto LABEL_20;
    }
    v17 = v8 + 1;
    if (v8 + 1 >= v31)
      goto LABEL_30;
    v18 = v30[v17];
    if (!v18)
    {
      v17 = v8 + 2;
      if (v8 + 2 >= v31)
        goto LABEL_30;
      v18 = v30[v17];
      if (!v18)
      {
        v17 = v8 + 3;
        if (v8 + 3 >= v31)
          goto LABEL_30;
        v18 = v30[v17];
        if (!v18)
          break;
      }
    }
LABEL_19:
    v11 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v8 = v17;
LABEL_20:
    v19 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v16);
    v20 = *v19;
    v32 = v19[1];
    v21 = *(_QWORD *)(v5 + 56) + 48 * v16;
    if ((a2 & 1) != 0)
      sub_1B1B9A190(v21, (uint64_t)v33);
    else
      sub_1B1D12130(v21, (uint64_t)v33);
    sub_1B222A06C();
    sub_1B222A078();
    sub_1B222A09C();
    sub_1B222A09C();
    v22 = sub_1B222A0C0();
    v23 = -1 << *(_BYTE *)(v7 + 32);
    v24 = v22 & ~v23;
    v25 = v24 >> 6;
    if (((-1 << v24) & ~*(_QWORD *)(v12 + 8 * (v24 >> 6))) != 0)
    {
      v13 = __clz(__rbit64((-1 << v24) & ~*(_QWORD *)(v12 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (v25 + 1 == v26)
          v25 = 0;
        else
          ++v25;
        v27 = *(_QWORD *)(v12 + 8 * v25);
      }
      while (v27 == -1);
      v13 = __clz(__rbit64(~v27)) + (v25 << 6);
    }
    *(_QWORD *)(v12 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    v14 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v13);
    *v14 = v20;
    v14[1] = v32;
    sub_1B1B9A190((uint64_t)v33, *(_QWORD *)(v7 + 56) + 48 * v13);
    ++*(_QWORD *)(v7 + 16);
  }
  while (v31 - 4 != v8)
  {
    v18 = *(_QWORD *)(v5 + 96 + 8 * v8++);
    if (v18)
    {
      v17 = v8 + 3;
      goto LABEL_19;
    }
  }
LABEL_30:
  if ((a2 & 1) != 0)
  {
    v28 = 1 << *(_BYTE *)(v5 + 32);
    v3 = v2;
    if (v28 >= 64)
      bzero(v30, ((unint64_t)(v28 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
    else
      *v30 = -1 << v28;
    *(_QWORD *)(v5 + 16) = 0;
LABEL_36:
    result = swift_release();
  }
  else
  {
    result = swift_release();
    v3 = v2;
  }
  *v3 = v7;
  return result;
}

uint64_t sub_1B1E9C294(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint8x8_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t result;
  uint64_t v44;
  _QWORD *v45;
  int64_t v46;
  uint64_t i;
  char v48;
  __int128 v49;
  int16x8_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  char v55;
  char v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;

  v3 = v2;
  v5 = *v2;
  sub_1B1B99DB0(0, (unint64_t *)&unk_1EEF5FF20, (void (*)(uint64_t))sub_1B1B9BFA8, (void (*)(void))sub_1B1B9C020);
  v48 = a2;
  v6 = sub_1B22296C4();
  v8 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_36;
  v9 = 0;
  v10 = 1 << *(_BYTE *)(v5 + 32);
  if (v10 < 64)
    v11 = ~(-1 << v10);
  else
    v11 = -1;
  v12 = v11 & *(_QWORD *)(v5 + 64);
  v13 = v6 + 64;
  v45 = (_QWORD *)(v5 + 64);
  v46 = (unint64_t)(v10 + 63) >> 6;
  v44 = v5 + 96;
  for (i = v5; ; v5 = i)
  {
    if (v12)
    {
      v17 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v18 = v17 | (v9 << 6);
      goto LABEL_20;
    }
    v19 = v9 + 1;
    if (v9 + 1 >= v46)
      goto LABEL_30;
    v20 = v45[v19];
    if (!v20)
    {
      v19 = v9 + 2;
      if (v9 + 2 >= v46)
        goto LABEL_30;
      v20 = v45[v19];
      if (!v20)
      {
        v19 = v9 + 3;
        if (v9 + 3 >= v46)
          goto LABEL_30;
        v20 = v45[v19];
        if (!v20)
          break;
      }
    }
LABEL_19:
    v12 = (v20 - 1) & v20;
    v18 = __clz(__rbit64(v20)) + (v19 << 6);
    v9 = v19;
LABEL_20:
    v61 = v9;
    v21 = *(_QWORD *)(v5 + 48) + 16 * v18;
    v22 = *(_BYTE *)v21;
    v23 = *(_QWORD *)(v21 + 8);
    v24 = *(_QWORD *)(v5 + 56) + (v18 << 7);
    if ((v48 & 1) != 0)
    {
      v59 = *(_QWORD *)(v24 + 8);
      v60 = *(_QWORD *)v24;
      v58 = *(_QWORD *)(v24 + 16);
      v25 = *(_QWORD *)(v24 + 32);
      v56 = *(_BYTE *)(v24 + 40);
      v57 = *(_BYTE *)(v24 + 24);
      v54 = *(_BYTE *)(v24 + 42);
      v55 = *(_BYTE *)(v24 + 41);
      v52 = *(_QWORD *)(v24 + 56);
      v53 = *(_QWORD *)(v24 + 48);
      v26 = *(_QWORD *)(v24 + 72);
      v51 = *(_QWORD *)(v24 + 64);
      v27 = *(_QWORD *)(v24 + 80);
      v28 = *(_QWORD *)(v24 + 88);
      v29 = *(_QWORD *)(v24 + 96);
      v7.i32[0] = *(_DWORD *)(v24 + 104);
      v49 = *(_OWORD *)(v24 + 112);
      v50 = (int16x8_t)vmovl_u8(v7);
    }
    else
    {
      v31 = *(_OWORD *)(v24 + 32);
      v30 = *(_OWORD *)(v24 + 48);
      v32 = *(_OWORD *)v24;
      v63 = *(_OWORD *)(v24 + 16);
      v64 = v31;
      v62 = v32;
      v33 = *(_OWORD *)(v24 + 112);
      v35 = *(_OWORD *)(v24 + 64);
      v34 = *(_OWORD *)(v24 + 80);
      v68 = *(_OWORD *)(v24 + 96);
      v69 = v33;
      v66 = v35;
      v67 = v34;
      v65 = v30;
      v59 = *((_QWORD *)&v62 + 1);
      v60 = v62;
      v58 = v63;
      v25 = v31;
      v56 = BYTE8(v31);
      v57 = BYTE8(v63);
      v54 = BYTE10(v31);
      v55 = BYTE9(v31);
      v52 = *((_QWORD *)&v30 + 1);
      v53 = v30;
      v26 = *((_QWORD *)&v35 + 1);
      v51 = v35;
      v28 = *((_QWORD *)&v34 + 1);
      v27 = v34;
      v29 = v68;
      LODWORD(v30) = DWORD2(v68);
      v49 = v33;
      v50 = (int16x8_t)vmovl_u8(*(uint8x8_t *)&v30);
      sub_1B1CC6C0C((uint64_t)&v62);
    }
    sub_1B222A06C();
    sub_1B222A084();
    sub_1B222A078();
    v36 = sub_1B222A0C0();
    v37 = -1 << *(_BYTE *)(v8 + 32);
    v38 = v36 & ~v37;
    v39 = v38 >> 6;
    if (((-1 << v38) & ~*(_QWORD *)(v13 + 8 * (v38 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1 << v38) & ~*(_QWORD *)(v13 + 8 * (v38 >> 6)))) | v38 & 0x7FFFFFFFFFFFFFC0;
      v9 = v61;
    }
    else
    {
      v40 = (unint64_t)(63 - v37) >> 6;
      v9 = v61;
      do
      {
        if (v39 + 1 == v40)
          v39 = 0;
        else
          ++v39;
        v41 = *(_QWORD *)(v13 + 8 * v39);
      }
      while (v41 == -1);
      v14 = __clz(__rbit64(~v41)) + (v39 << 6);
    }
    *(_QWORD *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    v15 = *(_QWORD *)(v8 + 48) + 16 * v14;
    *(_BYTE *)v15 = v22;
    *(_QWORD *)(v15 + 8) = v23;
    v16 = *(_QWORD *)(v8 + 56) + (v14 << 7);
    *(_QWORD *)v16 = v60;
    *(_QWORD *)(v16 + 8) = v59;
    *(_QWORD *)(v16 + 16) = v58;
    *(_BYTE *)(v16 + 24) = v57;
    *(_QWORD *)(v16 + 32) = v25;
    *(_BYTE *)(v16 + 40) = v56;
    *(_BYTE *)(v16 + 41) = v55;
    *(_BYTE *)(v16 + 42) = v54;
    *(_QWORD *)(v16 + 48) = v53;
    *(_QWORD *)(v16 + 56) = v52;
    *(_QWORD *)(v16 + 64) = v51;
    *(_QWORD *)(v16 + 72) = v26;
    *(_QWORD *)(v16 + 80) = v27;
    *(_QWORD *)(v16 + 88) = v28;
    *(_QWORD *)(v16 + 96) = v29;
    *(_DWORD *)(v16 + 104) = vmovn_s16(v50).u32[0];
    v7.i32[1] = DWORD1(v49);
    *(_OWORD *)(v16 + 112) = v49;
    ++*(_QWORD *)(v8 + 16);
  }
  while (v46 - 4 != v9)
  {
    v20 = *(_QWORD *)(v44 + 8 * v9++);
    if (v20)
    {
      v19 = v9 + 3;
      goto LABEL_19;
    }
  }
LABEL_30:
  if ((v48 & 1) != 0)
  {
    v42 = 1 << *(_BYTE *)(v5 + 32);
    v3 = v2;
    if (v42 >= 64)
      bzero(v45, ((unint64_t)(v42 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
    else
      *v45 = -1 << v42;
    *(_QWORD *)(v5 + 16) = 0;
LABEL_36:
    result = swift_release();
  }
  else
  {
    result = swift_release();
    v3 = v2;
  }
  *v3 = v8;
  return result;
}

uint64_t sub_1B1E9C710(uint64_t a1, char a2)
{
  return sub_1B1E94158(a1, a2, (void (*)(_QWORD))sub_1B1EB5CD0);
}

uint64_t sub_1B1E9C71C(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t result;
  _QWORD *v32;
  int64_t v33;
  char v34;
  __int128 v35;

  v4 = *v2;
  sub_1B1B99E68();
  v34 = a2;
  v5 = sub_1B22296C4();
  v6 = v5;
  if (!*(_QWORD *)(v4 + 16))
    goto LABEL_35;
  v7 = 0;
  v8 = 1 << *(_BYTE *)(v4 + 32);
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v4 + 64);
  v11 = v5 + 64;
  v32 = (_QWORD *)(v4 + 64);
  v33 = (unint64_t)(v8 + 63) >> 6;
  while (1)
  {
    if (v10)
    {
      v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v20 = v19 | (v7 << 6);
      goto LABEL_21;
    }
    v21 = v7 + 1;
    if (v7 + 1 >= v33)
      goto LABEL_29;
    v22 = v32[v21];
    if (!v22)
    {
      v21 = v7 + 2;
      if (v7 + 2 >= v33)
        goto LABEL_29;
      v22 = v32[v21];
      if (!v22)
      {
        v21 = v7 + 3;
        if (v7 + 3 >= v33)
          goto LABEL_29;
        v22 = v32[v21];
        if (!v22)
          break;
      }
    }
LABEL_20:
    v10 = (v22 - 1) & v22;
    v20 = __clz(__rbit64(v22)) + (v21 << 6);
    v7 = v21;
LABEL_21:
    v23 = 16 * v20;
    v24 = *(_QWORD *)(v4 + 48) + 16 * v20;
    v26 = *(_DWORD *)v24;
    v25 = *(_DWORD *)(v24 + 4);
    v27 = *(_QWORD *)(v24 + 8);
    v35 = *(_OWORD *)(*(_QWORD *)(v4 + 56) + v23);
    if ((v34 & 1) == 0)
      sub_1B1B99F0C(v35, *((unint64_t *)&v35 + 1));
    sub_1B222A06C();
    sub_1B222A09C();
    sub_1B222A09C();
    sub_1B222A078();
    v12 = sub_1B222A0C0();
    v13 = -1 << *(_BYTE *)(v6 + 32);
    v14 = v12 & ~v13;
    v15 = v14 >> 6;
    if (((-1 << v14) & ~*(_QWORD *)(v11 + 8 * (v14 >> 6))) != 0)
    {
      v16 = __clz(__rbit64((-1 << v14) & ~*(_QWORD *)(v11 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v28 = (unint64_t)(63 - v13) >> 6;
      do
      {
        if (v15 + 1 == v28)
          v15 = 0;
        else
          ++v15;
        v29 = *(_QWORD *)(v11 + 8 * v15);
      }
      while (v29 == -1);
      v16 = __clz(__rbit64(~v29)) + (v15 << 6);
    }
    *(_QWORD *)(v11 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
    v17 = 16 * v16;
    v18 = *(_QWORD *)(v6 + 48) + v17;
    *(_DWORD *)v18 = v26;
    *(_DWORD *)(v18 + 4) = v25;
    *(_QWORD *)(v18 + 8) = v27;
    *(_OWORD *)(*(_QWORD *)(v6 + 56) + v17) = v35;
    ++*(_QWORD *)(v6 + 16);
  }
  while (v33 - 4 != v7)
  {
    v22 = *(_QWORD *)(v4 + 96 + 8 * v7++);
    if (v22)
    {
      v21 = v7 + 3;
      goto LABEL_20;
    }
  }
LABEL_29:
  if ((v34 & 1) != 0)
  {
    v30 = 1 << *(_BYTE *)(v4 + 32);
    if (v30 >= 64)
      bzero(v32, ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
    else
      *v32 = -1 << v30;
    *(_QWORD *)(v4 + 16) = 0;
  }
LABEL_35:
  result = swift_release();
  *v2 = v6;
  return result;
}

uint64_t sub_1B1E9CA24(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t result;
  _QWORD *v30;
  int64_t v31;
  uint64_t v32;
  _BYTE v33[104];

  v3 = v2;
  v5 = *v2;
  sub_1B1B9A1CC();
  v6 = sub_1B22296C4();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_36;
  v8 = 0;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v12 = v6 + 64;
  v30 = (_QWORD *)(v5 + 64);
  v31 = (unint64_t)(v9 + 63) >> 6;
  while (1)
  {
    if (v11)
    {
      v15 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v16 = v15 | (v8 << 6);
      goto LABEL_20;
    }
    v17 = v8 + 1;
    if (v8 + 1 >= v31)
      goto LABEL_30;
    v18 = v30[v17];
    if (!v18)
    {
      v17 = v8 + 2;
      if (v8 + 2 >= v31)
        goto LABEL_30;
      v18 = v30[v17];
      if (!v18)
      {
        v17 = v8 + 3;
        if (v8 + 3 >= v31)
          goto LABEL_30;
        v18 = v30[v17];
        if (!v18)
          break;
      }
    }
LABEL_19:
    v11 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v8 = v17;
LABEL_20:
    v19 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v16);
    v20 = *v19;
    v32 = v19[1];
    v21 = *(_QWORD *)(v5 + 56) + 96 * v16;
    if ((a2 & 1) != 0)
      sub_1B1B99D74(v21, (uint64_t)v33);
    else
      sub_1B1C1A1D0(v21, (uint64_t)v33);
    sub_1B222A06C();
    sub_1B222A078();
    sub_1B222A09C();
    sub_1B222A09C();
    v22 = sub_1B222A0C0();
    v23 = -1 << *(_BYTE *)(v7 + 32);
    v24 = v22 & ~v23;
    v25 = v24 >> 6;
    if (((-1 << v24) & ~*(_QWORD *)(v12 + 8 * (v24 >> 6))) != 0)
    {
      v13 = __clz(__rbit64((-1 << v24) & ~*(_QWORD *)(v12 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (v25 + 1 == v26)
          v25 = 0;
        else
          ++v25;
        v27 = *(_QWORD *)(v12 + 8 * v25);
      }
      while (v27 == -1);
      v13 = __clz(__rbit64(~v27)) + (v25 << 6);
    }
    *(_QWORD *)(v12 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    v14 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v13);
    *v14 = v20;
    v14[1] = v32;
    sub_1B1B99D74((uint64_t)v33, *(_QWORD *)(v7 + 56) + 96 * v13);
    ++*(_QWORD *)(v7 + 16);
  }
  while (v31 - 4 != v8)
  {
    v18 = *(_QWORD *)(v5 + 96 + 8 * v8++);
    if (v18)
    {
      v17 = v8 + 3;
      goto LABEL_19;
    }
  }
LABEL_30:
  if ((a2 & 1) != 0)
  {
    v28 = 1 << *(_BYTE *)(v5 + 32);
    v3 = v2;
    if (v28 >= 64)
      bzero(v30, ((unint64_t)(v28 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
    else
      *v30 = -1 << v28;
    *(_QWORD *)(v5 + 16) = 0;
LABEL_36:
    result = swift_release();
  }
  else
  {
    result = swift_release();
    v3 = v2;
  }
  *v3 = v7;
  return result;
}

uint64_t sub_1B1E9CD28(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t result;
  uint64_t *v30;
  _BYTE v31[32];
  _BYTE v32[16];

  v3 = v2;
  v5 = *v2;
  sub_1B1D20D50();
  v6 = sub_1B22296C4();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
  {
    result = swift_release();
    goto LABEL_37;
  }
  v30 = v2;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v9 = (_QWORD *)(v5 + 64);
  if (v8 < 64)
    v10 = ~(-1 << v8);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v12 = (unint64_t)(v8 + 63) >> 6;
  v13 = v6 + 64;
  swift_retain();
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v17 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v18 = v17 | (v14 << 6);
      goto LABEL_20;
    }
    v19 = v14 + 1;
    if (v14 + 1 >= v12)
      goto LABEL_30;
    v20 = v9[v19];
    if (!v20)
    {
      v19 = v14 + 2;
      if (v14 + 2 >= v12)
        goto LABEL_30;
      v20 = v9[v19];
      if (!v20)
      {
        v19 = v14 + 3;
        if (v14 + 3 >= v12)
          goto LABEL_30;
        v20 = v9[v19];
        if (!v20)
          break;
      }
    }
LABEL_19:
    v11 = (v20 - 1) & v20;
    v18 = __clz(__rbit64(v20)) + (v19 << 6);
    v14 = v19;
LABEL_20:
    v21 = *(_QWORD *)(v5 + 48) + 32 * v18;
    if ((a2 & 1) != 0)
    {
      sub_1B19FC2D0(v21, (uint64_t)v32);
      sub_1B19FC2D0(*(_QWORD *)(v5 + 56) + 32 * v18, (uint64_t)v31);
    }
    else
    {
      sub_1B1A00060(v21, (uint64_t)v32);
      sub_1B1A00060(*(_QWORD *)(v5 + 56) + 32 * v18, (uint64_t)v31);
    }
    sub_1B222A06C();
    sub_1B2228824();
    v22 = sub_1B222A0C0();
    v23 = -1 << *(_BYTE *)(v7 + 32);
    v24 = v22 & ~v23;
    v25 = v24 >> 6;
    if (((-1 << v24) & ~*(_QWORD *)(v13 + 8 * (v24 >> 6))) != 0)
    {
      v15 = __clz(__rbit64((-1 << v24) & ~*(_QWORD *)(v13 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (v25 + 1 == v26)
          v25 = 0;
        else
          ++v25;
        v27 = *(_QWORD *)(v13 + 8 * v25);
      }
      while (v27 == -1);
      v15 = __clz(__rbit64(~v27)) + (v25 << 6);
    }
    *(_QWORD *)(v13 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    v16 = 32 * v15;
    sub_1B19FC2D0((uint64_t)v32, *(_QWORD *)(v7 + 48) + 32 * v15);
    sub_1B19FC2D0((uint64_t)v31, *(_QWORD *)(v7 + 56) + v16);
    ++*(_QWORD *)(v7 + 16);
  }
  while (v12 - 4 != v14)
  {
    v20 = *(_QWORD *)(v5 + 8 * v14++ + 96);
    if (v20)
    {
      v19 = v14 + 3;
      goto LABEL_19;
    }
  }
LABEL_30:
  swift_release();
  if ((a2 & 1) != 0)
  {
    v28 = 1 << *(_BYTE *)(v5 + 32);
    if (v28 >= 64)
      bzero((void *)(v5 + 64), ((unint64_t)(v28 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
    else
      *v9 = -1 << v28;
    *(_QWORD *)(v5 + 16) = 0;
  }
  result = swift_release();
  v3 = v30;
LABEL_37:
  *v3 = v7;
  return result;
}

uint64_t sub_1B1E9D000(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t result;
  uint64_t v39;
  _QWORD *v40;
  int64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  char v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;

  v3 = v2;
  v5 = *v2;
  sub_1B1B9A22C();
  v43 = a2;
  v6 = sub_1B22296C4();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_35;
  v8 = 0;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v12 = v6 + 64;
  v40 = (_QWORD *)(v5 + 64);
  v41 = (unint64_t)(v9 + 63) >> 6;
  v39 = v5 + 96;
  v42 = v5;
  while (1)
  {
    if (v11)
    {
      v50 = (v11 - 1) & v11;
      v51 = v8;
      v20 = __clz(__rbit64(v11)) | (v8 << 6);
      goto LABEL_21;
    }
    v21 = v8 + 1;
    if (v8 + 1 >= v41)
      goto LABEL_29;
    v22 = v40[v21];
    if (!v22)
    {
      v21 = v8 + 2;
      if (v8 + 2 >= v41)
        goto LABEL_29;
      v22 = v40[v21];
      if (!v22)
      {
        v21 = v8 + 3;
        if (v8 + 3 >= v41)
          goto LABEL_29;
        v22 = v40[v21];
        if (!v22)
          break;
      }
    }
LABEL_20:
    v50 = (v22 - 1) & v22;
    v51 = v21;
    v20 = __clz(__rbit64(v22)) + (v21 << 6);
LABEL_21:
    v23 = *(_QWORD *)(v5 + 56);
    v24 = *(_QWORD *)(v5 + 48) + 96 * v20;
    v25 = *(_DWORD *)v24;
    v26 = *(_QWORD *)(v24 + 8);
    v27 = *(_QWORD *)(v24 + 16);
    v29 = *(_QWORD *)(v24 + 24);
    v28 = *(_QWORD *)(v24 + 32);
    v31 = *(_QWORD *)(v24 + 40);
    v30 = *(_QWORD *)(v24 + 48);
    v52 = *(_QWORD *)(v24 + 56);
    v54 = *(_OWORD *)(v24 + 64);
    v55 = *(_OWORD *)(v24 + 80);
    v32 = (__int128 *)(v23 + 112 * v20);
    v53 = *v32;
    v44 = *((_QWORD *)v32 + 2);
    v45 = *((_BYTE *)v32 + 24);
    v46 = v32[2];
    v47 = v32[3];
    v33 = *((_QWORD *)v32 + 8);
    v48 = *(__int128 *)((char *)v32 + 72);
    v49 = *(__int128 *)((char *)v32 + 88);
    v34 = *((_QWORD *)v32 + 13);
    if ((v43 & 1) == 0)
    {
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
    }
    sub_1B222A06C();
    sub_1B222A09C();
    sub_1B1DC3544();
    sub_1B222A078();
    sub_1B222A078();
    sub_1B222A078();
    v13 = sub_1B222A0C0();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = v13 & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v12 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v12 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v35 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (v16 + 1 == v35)
          v16 = 0;
        else
          ++v16;
        v36 = *(_QWORD *)(v12 + 8 * v16);
      }
      while (v36 == -1);
      v17 = __clz(__rbit64(~v36)) + (v16 << 6);
    }
    *(_QWORD *)(v12 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = *(_QWORD *)(v7 + 48) + 96 * v17;
    *(_DWORD *)v18 = v25;
    *(_QWORD *)(v18 + 8) = v26;
    *(_QWORD *)(v18 + 16) = v27;
    *(_QWORD *)(v18 + 24) = v29;
    *(_QWORD *)(v18 + 32) = v28;
    *(_QWORD *)(v18 + 40) = v31;
    *(_QWORD *)(v18 + 48) = v30;
    v8 = v51;
    *(_QWORD *)(v18 + 56) = v52;
    *(_OWORD *)(v18 + 64) = v54;
    *(_OWORD *)(v18 + 80) = v55;
    v19 = *(_QWORD *)(v7 + 56) + 112 * v17;
    *(_OWORD *)v19 = v53;
    *(_QWORD *)(v19 + 16) = v44;
    *(_BYTE *)(v19 + 24) = v45;
    *(_OWORD *)(v19 + 32) = v46;
    *(_OWORD *)(v19 + 48) = v47;
    *(_QWORD *)(v19 + 64) = v33;
    *(_OWORD *)(v19 + 72) = v48;
    *(_OWORD *)(v19 + 88) = v49;
    *(_QWORD *)(v19 + 104) = v34;
    ++*(_QWORD *)(v7 + 16);
    v5 = v42;
    v11 = v50;
  }
  while (v41 - 4 != v8)
  {
    v22 = *(_QWORD *)(v39 + 8 * v8++);
    if (v22)
    {
      v21 = v8 + 3;
      goto LABEL_20;
    }
  }
LABEL_29:
  if ((v43 & 1) != 0)
  {
    v37 = 1 << *(_BYTE *)(v5 + 32);
    v3 = v2;
    if (v37 >= 64)
      bzero(v40, ((unint64_t)(v37 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
    else
      *v40 = -1 << v37;
    *(_QWORD *)(v5 + 16) = 0;
LABEL_35:
    result = swift_release();
  }
  else
  {
    result = swift_release();
    v3 = v2;
  }
  *v3 = v7;
  return result;
}

uint64_t sub_1B1E9D418(uint64_t a1, char a2)
{
  return sub_1B1E94158(a1, a2, sub_1B1EB5C4C);
}

uint64_t sub_1B1E9D424(uint64_t a1, char a2)
{
  return sub_1B1EA0974(a1, a2, sub_1B1EB5B24);
}

uint64_t sub_1B1E9D430(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint8x8_t v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  char v28;
  char v29;
  char v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t result;
  uint64_t *v36;
  uint64_t v37;
  _QWORD *v38;
  int64_t v39;
  uint64_t i;
  char v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;

  v4 = v2;
  v6 = *v2;
  sub_1B1EB6DB4(0, (unint64_t *)&qword_1ED4BA990);
  v41 = a2;
  v7 = sub_1B22296C4();
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
    goto LABEL_35;
  v36 = v4;
  v9 = 0;
  v10 = 1 << *(_BYTE *)(v6 + 32);
  if (v10 < 64)
    v11 = ~(-1 << v10);
  else
    v11 = -1;
  v12 = v11 & *(_QWORD *)(v6 + 64);
  v13 = v7 + 64;
  v38 = (_QWORD *)(v6 + 64);
  v39 = (unint64_t)(v10 + 63) >> 6;
  v37 = v6 + 96;
  for (i = v6; ; v6 = i)
  {
    if (v12)
    {
      v20 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v21 = v9;
      v22 = v20 | (v9 << 6);
      goto LABEL_21;
    }
    v21 = v9 + 1;
    if (v9 + 1 >= v39)
      goto LABEL_29;
    v23 = v38[v21];
    if (!v23)
    {
      v21 = v9 + 2;
      if (v9 + 2 >= v39)
        goto LABEL_29;
      v23 = v38[v21];
      if (!v23)
      {
        v21 = v9 + 3;
        if (v9 + 3 >= v39)
          goto LABEL_29;
        v23 = v38[v21];
        if (!v23)
          break;
      }
    }
LABEL_20:
    v12 = (v23 - 1) & v23;
    v22 = __clz(__rbit64(v23)) + (v21 << 6);
LABEL_21:
    v24 = *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v22);
    v25 = *(_QWORD *)(v6 + 56) + 120 * v22;
    v26 = *(_BYTE *)(v25 + 24);
    v27 = *(_QWORD *)(v25 + 32);
    v28 = *(_BYTE *)(v25 + 40);
    v29 = *(_BYTE *)(v25 + 41);
    v30 = *(_BYTE *)(v25 + 42);
    v46 = *(_OWORD *)(v25 + 48);
    v47 = *(_OWORD *)v25;
    v44 = *(_OWORD *)(v25 + 80);
    v45 = *(_OWORD *)(v25 + 64);
    v42 = *(_QWORD *)(v25 + 96);
    v43 = *(_QWORD *)(v25 + 16);
    v3.i32[0] = *(_DWORD *)(v25 + 104);
    v31 = *(_QWORD *)(v25 + 112);
    if ((v41 & 1) == 0)
    {
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain();
    }
    v14 = sub_1B222A060();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = v14 & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v13 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v13 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v32 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (v17 + 1 == v32)
          v17 = 0;
        else
          ++v17;
        v33 = *(_QWORD *)(v13 + 8 * v17);
      }
      while (v33 == -1);
      v18 = __clz(__rbit64(~v33)) + (v17 << 6);
    }
    v9 = v21;
    *(_QWORD *)(v13 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    *(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * v18) = v24;
    v19 = *(_QWORD *)(v8 + 56) + 120 * v18;
    *(_OWORD *)v19 = v47;
    *(_QWORD *)(v19 + 16) = v43;
    *(_BYTE *)(v19 + 24) = v26;
    *(_QWORD *)(v19 + 32) = v27;
    *(_BYTE *)(v19 + 40) = v28;
    *(_BYTE *)(v19 + 41) = v29;
    *(_BYTE *)(v19 + 42) = v30;
    *(_OWORD *)(v19 + 48) = v46;
    *(_OWORD *)(v19 + 64) = v45;
    *(_OWORD *)(v19 + 80) = v44;
    *(_QWORD *)(v19 + 96) = v42;
    *(_DWORD *)(v19 + 104) = vmovn_s16((int16x8_t)vmovl_u8(v3)).u32[0];
    *(_QWORD *)(v19 + 112) = v31;
    ++*(_QWORD *)(v8 + 16);
  }
  while (v39 - 4 != v9)
  {
    v23 = *(_QWORD *)(v37 + 8 * v9++);
    if (v23)
    {
      v21 = v9 + 3;
      goto LABEL_20;
    }
  }
LABEL_29:
  if ((v41 & 1) != 0)
  {
    v34 = 1 << *(_BYTE *)(v6 + 32);
    v4 = v36;
    if (v34 >= 64)
      bzero(v38, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
    else
      *v38 = -1 << v34;
    *(_QWORD *)(v6 + 16) = 0;
LABEL_35:
    result = swift_release();
  }
  else
  {
    result = swift_release();
    v4 = v36;
  }
  *v4 = v8;
  return result;
}

uint64_t sub_1B1E9D7C0(uint64_t a1, int a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t result;
  uint64_t v41;
  unint64_t v42;
  uint64_t *v43;
  _QWORD *v44;
  int64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;

  v3 = v2;
  v5 = sub_1B2228110();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v2;
  sub_1B1B9C824();
  v47 = a2;
  v11 = sub_1B22296C4();
  v12 = v11;
  if (!*(_QWORD *)(v10 + 16))
    goto LABEL_35;
  v48 = v6;
  v13 = 1 << *(_BYTE *)(v10 + 32);
  v14 = *(_QWORD *)(v10 + 64);
  v43 = v2;
  v44 = (_QWORD *)(v10 + 64);
  if (v13 < 64)
    v15 = ~(-1 << v13);
  else
    v15 = -1;
  v16 = v15 & v14;
  v17 = (unint64_t)(v13 + 63) >> 6;
  v18 = v11 + 64;
  swift_retain();
  v19 = 0;
  v45 = v17;
  v46 = v10;
  v42 = v17 - 4;
  while (1)
  {
    if (v16)
    {
      v22 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v23 = v22 | (v19 << 6);
      v24 = v48;
      goto LABEL_20;
    }
    v25 = v19 + 1;
    if (v19 + 1 >= v45)
      goto LABEL_30;
    v26 = v44[v25];
    v24 = v48;
    if (!v26)
    {
      v25 = v19 + 2;
      if (v19 + 2 >= v45)
        goto LABEL_30;
      v26 = v44[v25];
      if (!v26)
      {
        v25 = v19 + 3;
        if (v19 + 3 >= v45)
          goto LABEL_30;
        v26 = v44[v25];
        if (!v26)
          break;
      }
    }
LABEL_19:
    v16 = (v26 - 1) & v26;
    v23 = __clz(__rbit64(v26)) + (v25 << 6);
    v19 = v25;
LABEL_20:
    v27 = *(_QWORD *)(v24 + 72);
    v28 = *(_QWORD *)(v10 + 48) + v27 * v23;
    if ((v47 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v24 + 32))(v9, v28, v5);
      v29 = (uint64_t *)(*(_QWORD *)(v10 + 56) + 16 * v23);
      v31 = *v29;
      v30 = v29[1];
    }
    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v24 + 16))(v9, v28, v5);
      v32 = (uint64_t *)(*(_QWORD *)(v10 + 56) + 16 * v23);
      v31 = *v32;
      v30 = v32[1];
      swift_bridgeObjectRetain();
    }
    sub_1B19E52CC((unint64_t *)&unk_1ED4B7B10, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], MEMORY[0x1E0CB0018]);
    v33 = sub_1B22285D8();
    v34 = -1 << *(_BYTE *)(v12 + 32);
    v35 = v33 & ~v34;
    v36 = v35 >> 6;
    if (((-1 << v35) & ~*(_QWORD *)(v18 + 8 * (v35 >> 6))) != 0)
    {
      v20 = __clz(__rbit64((-1 << v35) & ~*(_QWORD *)(v18 + 8 * (v35 >> 6)))) | v35 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v37 = (unint64_t)(63 - v34) >> 6;
      do
      {
        if (v36 + 1 == v37)
          v36 = 0;
        else
          ++v36;
        v38 = *(_QWORD *)(v18 + 8 * v36);
      }
      while (v38 == -1);
      v20 = __clz(__rbit64(~v38)) + (v36 << 6);
    }
    *(_QWORD *)(v18 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
    (*(void (**)(unint64_t, char *, uint64_t))(v48 + 32))(*(_QWORD *)(v12 + 48) + v27 * v20, v9, v5);
    v21 = (_QWORD *)(*(_QWORD *)(v12 + 56) + 16 * v20);
    *v21 = v31;
    v21[1] = v30;
    ++*(_QWORD *)(v12 + 16);
    v10 = v46;
  }
  while (v42 != v19)
  {
    v26 = *(_QWORD *)(v10 + 8 * v19++ + 96);
    if (v26)
    {
      v25 = v19 + 3;
      goto LABEL_19;
    }
  }
LABEL_30:
  swift_release();
  v3 = v43;
  if ((v47 & 1) != 0)
  {
    v39 = 1 << *(_BYTE *)(v10 + 32);
    if (v39 >= 64)
      bzero(v44, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
    else
      *v44 = -1 << v39;
    *(_QWORD *)(v10 + 16) = 0;
  }
LABEL_35:
  result = swift_release();
  *v3 = v12;
  return result;
}

uint64_t sub_1B1E9DB34(uint64_t a1, char a2)
{
  return sub_1B1EA0974(a1, a2, sub_1B1EB5DC8);
}

uint64_t sub_1B1E9DB40(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  id v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t result;
  uint64_t *v31;
  _QWORD *v32;

  v3 = v2;
  v5 = *v2;
  sub_1B1B9AB5C();
  v6 = sub_1B22296C4();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_34;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v31 = v2;
  v32 = (_QWORD *)(v5 + 64);
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v11 = (unint64_t)(v8 + 63) >> 6;
  v12 = v6 + 64;
  swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v21 = v20 | (v13 << 6);
      goto LABEL_21;
    }
    v22 = v13 + 1;
    if (v13 + 1 >= v11)
      goto LABEL_29;
    v23 = v32[v22];
    if (!v23)
    {
      v22 = v13 + 2;
      if (v13 + 2 >= v11)
        goto LABEL_29;
      v23 = v32[v22];
      if (!v23)
      {
        v22 = v13 + 3;
        if (v13 + 3 >= v11)
          goto LABEL_29;
        v23 = v32[v22];
        if (!v23)
          break;
      }
    }
LABEL_20:
    v10 = (v23 - 1) & v23;
    v21 = __clz(__rbit64(v23)) + (v22 << 6);
    v13 = v22;
LABEL_21:
    v24 = *(void **)(*(_QWORD *)(v5 + 48) + 8 * v21);
    v25 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v21);
    if ((a2 & 1) == 0)
    {
      v26 = v24;
      swift_retain();
    }
    v14 = sub_1B2229010();
    v15 = -1 << *(_BYTE *)(v7 + 32);
    v16 = v14 & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (v17 + 1 == v27)
          v17 = 0;
        else
          ++v17;
        v28 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v28 == -1);
      v18 = __clz(__rbit64(~v28)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = 8 * v18;
    *(_QWORD *)(*(_QWORD *)(v7 + 48) + v19) = v24;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + v19) = v25;
    ++*(_QWORD *)(v7 + 16);
  }
  while (v11 - 4 != v13)
  {
    v23 = *(_QWORD *)(v5 + 8 * v13++ + 96);
    if (v23)
    {
      v22 = v13 + 3;
      goto LABEL_20;
    }
  }
LABEL_29:
  swift_release();
  v3 = v31;
  if ((a2 & 1) != 0)
  {
    v29 = 1 << *(_BYTE *)(v5 + 32);
    if (v29 >= 64)
      bzero(v32, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
    else
      *v32 = -1 << v29;
    *(_QWORD *)(v5 + 16) = 0;
  }
LABEL_34:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_1B1E9DDDC(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t result;
  _QWORD *v29;
  int64_t v30;

  v3 = v2;
  v5 = *v2;
  sub_1B1B9A304();
  v6 = sub_1B22296C4();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_35;
  v8 = 0;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v12 = v6 + 64;
  v29 = (_QWORD *)(v5 + 64);
  v30 = (unint64_t)(v9 + 63) >> 6;
  while (1)
  {
    if (v11)
    {
      v19 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v20 = v19 | (v8 << 6);
      goto LABEL_21;
    }
    v21 = v8 + 1;
    if (v8 + 1 >= v30)
      goto LABEL_29;
    v22 = v29[v21];
    if (!v22)
    {
      v21 = v8 + 2;
      if (v8 + 2 >= v30)
        goto LABEL_29;
      v22 = v29[v21];
      if (!v22)
      {
        v21 = v8 + 3;
        if (v8 + 3 >= v30)
          goto LABEL_29;
        v22 = v29[v21];
        if (!v22)
          break;
      }
    }
LABEL_20:
    v11 = (v22 - 1) & v22;
    v20 = __clz(__rbit64(v22)) + (v21 << 6);
    v8 = v21;
LABEL_21:
    v23 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v20);
    v24 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v20);
    if ((a2 & 1) == 0)
      swift_retain();
    sub_1B222A06C();
    sub_1B1E1F710();
    v13 = sub_1B222A0C0();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = v13 & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v12 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v12 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (v16 + 1 == v25)
          v16 = 0;
        else
          ++v16;
        v26 = *(_QWORD *)(v12 + 8 * v16);
      }
      while (v26 == -1);
      v17 = __clz(__rbit64(~v26)) + (v16 << 6);
    }
    *(_QWORD *)(v12 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = 8 * v17;
    *(_QWORD *)(*(_QWORD *)(v7 + 48) + v18) = v23;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + v18) = v24;
    ++*(_QWORD *)(v7 + 16);
  }
  while (v30 - 4 != v8)
  {
    v22 = *(_QWORD *)(v5 + 96 + 8 * v8++);
    if (v22)
    {
      v21 = v8 + 3;
      goto LABEL_20;
    }
  }
LABEL_29:
  if ((a2 & 1) != 0)
  {
    v27 = 1 << *(_BYTE *)(v5 + 32);
    v3 = v2;
    if (v27 >= 64)
      bzero(v29, ((unint64_t)(v27 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
    else
      *v29 = -1 << v27;
    *(_QWORD *)(v5 + 16) = 0;
LABEL_35:
    result = swift_release();
  }
  else
  {
    result = swift_release();
    v3 = v2;
  }
  *v3 = v7;
  return result;
}

uint64_t sub_1B1E9E0A0(uint64_t a1, char a2)
{
  return sub_1B1E9E6F8(a1, a2, &qword_1EEF60010, &qword_1EEF5B4D0, 0x1E0CC77C8, &qword_1EEF5B4D8);
}

uint64_t sub_1B1E9E0C4(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t result;
  __int128 v29;

  v3 = v2;
  v5 = *v2;
  sub_1B1B9AE04();
  v6 = sub_1B22296C4();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
  {
    result = swift_release();
    goto LABEL_36;
  }
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v9 = (_QWORD *)(v5 + 64);
  if (v8 < 64)
    v10 = ~(-1 << v8);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v12 = (unint64_t)(v8 + 63) >> 6;
  v13 = v6 + 64;
  swift_retain();
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v21 = v20 | (v14 << 6);
      goto LABEL_21;
    }
    v22 = v14 + 1;
    if (v14 + 1 >= v12)
      goto LABEL_29;
    v23 = v9[v22];
    if (!v23)
    {
      v22 = v14 + 2;
      if (v14 + 2 >= v12)
        goto LABEL_29;
      v23 = v9[v22];
      if (!v23)
      {
        v22 = v14 + 3;
        if (v14 + 3 >= v12)
          goto LABEL_29;
        v23 = v9[v22];
        if (!v23)
          break;
      }
    }
LABEL_20:
    v11 = (v23 - 1) & v23;
    v21 = __clz(__rbit64(v23)) + (v22 << 6);
    v14 = v22;
LABEL_21:
    v24 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v21);
    v29 = *(_OWORD *)(*(_QWORD *)(v5 + 48) + 16 * v21);
    if ((a2 & 1) == 0)
      sub_1B1A0DC90(v29, *(_QWORD *)(*(_QWORD *)(v5 + 48) + 16 * v21 + 8));
    sub_1B222A06C();
    sub_1B2228188();
    v15 = sub_1B222A0C0();
    v16 = -1 << *(_BYTE *)(v7 + 32);
    v17 = v15 & ~v16;
    v18 = v17 >> 6;
    if (((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = (unint64_t)(63 - v16) >> 6;
      do
      {
        if (v18 + 1 == v25)
          v18 = 0;
        else
          ++v18;
        v26 = *(_QWORD *)(v13 + 8 * v18);
      }
      while (v26 == -1);
      v19 = __clz(__rbit64(~v26)) + (v18 << 6);
    }
    *(_QWORD *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    *(_OWORD *)(*(_QWORD *)(v7 + 48) + 16 * v19) = v29;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v19) = v24;
    ++*(_QWORD *)(v7 + 16);
  }
  while (v12 - 4 != v14)
  {
    v23 = *(_QWORD *)(v5 + 8 * v14++ + 96);
    if (v23)
    {
      v22 = v14 + 3;
      goto LABEL_20;
    }
  }
LABEL_29:
  swift_release();
  if ((a2 & 1) != 0)
  {
    v27 = 1 << *(_BYTE *)(v5 + 32);
    if (v27 >= 64)
      bzero((void *)(v5 + 64), ((unint64_t)(v27 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
    else
      *v9 = -1 << v27;
    *(_QWORD *)(v5 + 16) = 0;
  }
  result = swift_release();
  v3 = v2;
LABEL_36:
  *v3 = v7;
  return result;
}

uint64_t sub_1B1E9E38C(uint64_t a1, int a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t result;
  unint64_t v38;
  int v39;
  uint64_t *v40;
  _QWORD *v41;
  int64_t v42;
  uint64_t v43;

  v3 = v2;
  v5 = sub_1B2228110();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v2;
  sub_1B1B9AD84();
  v11 = sub_1B22296C4();
  v12 = v11;
  if (!*(_QWORD *)(v10 + 16))
    goto LABEL_34;
  v13 = 1 << *(_BYTE *)(v10 + 32);
  v14 = *(_QWORD *)(v10 + 64);
  v40 = v2;
  v41 = (_QWORD *)(v10 + 64);
  if (v13 < 64)
    v15 = ~(-1 << v13);
  else
    v15 = -1;
  v16 = v15 & v14;
  v17 = (unint64_t)(v13 + 63) >> 6;
  v18 = v11 + 64;
  swift_retain();
  v19 = a2;
  v20 = 0;
  v39 = v19;
  v21 = (v19 & 1) == 0;
  v22 = 16;
  if (!v21)
    v22 = 32;
  v42 = v17;
  v43 = v22;
  v38 = v17 - 4;
  while (1)
  {
    if (v16)
    {
      v24 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v25 = v24 | (v20 << 6);
      goto LABEL_22;
    }
    v26 = v20 + 1;
    if (v20 + 1 >= v42)
      goto LABEL_29;
    v27 = v41[v26];
    if (!v27)
    {
      v26 = v20 + 2;
      if (v20 + 2 >= v42)
        goto LABEL_29;
      v27 = v41[v26];
      if (!v27)
      {
        v26 = v20 + 3;
        if (v20 + 3 >= v42)
          goto LABEL_29;
        v27 = v41[v26];
        if (!v27)
          break;
      }
    }
LABEL_21:
    v16 = (v27 - 1) & v27;
    v25 = __clz(__rbit64(v27)) + (v26 << 6);
    v20 = v26;
LABEL_22:
    v28 = *(_QWORD *)(v6 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v6 + v43))(v9, *(_QWORD *)(v10 + 48) + v28 * v25, v5);
    v29 = *(_QWORD *)(*(_QWORD *)(v10 + 56) + 8 * v25);
    sub_1B19E52CC((unint64_t *)&unk_1ED4B7B10, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], MEMORY[0x1E0CB0018]);
    v30 = sub_1B22285D8();
    v31 = -1 << *(_BYTE *)(v12 + 32);
    v32 = v30 & ~v31;
    v33 = v32 >> 6;
    if (((-1 << v32) & ~*(_QWORD *)(v18 + 8 * (v32 >> 6))) != 0)
    {
      v23 = __clz(__rbit64((-1 << v32) & ~*(_QWORD *)(v18 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v34 = (unint64_t)(63 - v31) >> 6;
      do
      {
        if (v33 + 1 == v34)
          v33 = 0;
        else
          ++v33;
        v35 = *(_QWORD *)(v18 + 8 * v33);
      }
      while (v35 == -1);
      v23 = __clz(__rbit64(~v35)) + (v33 << 6);
    }
    *(_QWORD *)(v18 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(*(_QWORD *)(v12 + 48) + v28 * v23, v9, v5);
    *(_QWORD *)(*(_QWORD *)(v12 + 56) + 8 * v23) = v29;
    ++*(_QWORD *)(v12 + 16);
  }
  while (v38 != v20)
  {
    v27 = *(_QWORD *)(v10 + 8 * v20++ + 96);
    if (v27)
    {
      v26 = v20 + 3;
      goto LABEL_21;
    }
  }
LABEL_29:
  swift_release();
  v3 = v40;
  if ((v39 & 1) != 0)
  {
    v36 = 1 << *(_BYTE *)(v10 + 32);
    if (v36 >= 64)
      bzero(v41, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
    else
      *v41 = -1 << v36;
    *(_QWORD *)(v10 + 16) = 0;
  }
LABEL_34:
  result = swift_release();
  *v3 = v12;
  return result;
}

uint64_t sub_1B1E9E6D4(uint64_t a1, char a2)
{
  return sub_1B1E9E6F8(a1, a2, (unint64_t *)&unk_1EEF5FFA0, &qword_1EEF5B4F0, (uint64_t)off_1E636B5B8, &qword_1EEF5B540);
}

uint64_t sub_1B1E9E6F8(uint64_t a1, char a2, unint64_t *a3, unint64_t *a4, uint64_t a5, unint64_t *a6)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  void *v29;
  uint64_t v30;
  id v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t result;
  uint64_t *v36;

  v7 = v6;
  v9 = *v6;
  sub_1B1B9AEA8(0, a3, a4, a5, a6);
  v10 = sub_1B22296C4();
  v11 = v10;
  if (!*(_QWORD *)(v9 + 16))
  {
    result = swift_release();
    goto LABEL_36;
  }
  v36 = v6;
  v12 = 1 << *(_BYTE *)(v9 + 32);
  v13 = (_QWORD *)(v9 + 64);
  if (v12 < 64)
    v14 = ~(-1 << v12);
  else
    v14 = -1;
  v15 = v14 & *(_QWORD *)(v9 + 64);
  v16 = (unint64_t)(v12 + 63) >> 6;
  v17 = v10 + 64;
  swift_retain();
  v18 = 0;
  while (1)
  {
    if (v15)
    {
      v25 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v26 = v25 | (v18 << 6);
      goto LABEL_21;
    }
    v27 = v18 + 1;
    if (v18 + 1 >= v16)
      goto LABEL_29;
    v28 = v13[v27];
    if (!v28)
    {
      v27 = v18 + 2;
      if (v18 + 2 >= v16)
        goto LABEL_29;
      v28 = v13[v27];
      if (!v28)
      {
        v27 = v18 + 3;
        if (v18 + 3 >= v16)
          goto LABEL_29;
        v28 = v13[v27];
        if (!v28)
          break;
      }
    }
LABEL_20:
    v15 = (v28 - 1) & v28;
    v26 = __clz(__rbit64(v28)) + (v27 << 6);
    v18 = v27;
LABEL_21:
    v29 = *(void **)(*(_QWORD *)(v9 + 48) + 8 * v26);
    v30 = *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v26);
    if ((a2 & 1) == 0)
      v31 = v29;
    v19 = sub_1B2229010();
    v20 = -1 << *(_BYTE *)(v11 + 32);
    v21 = v19 & ~v20;
    v22 = v21 >> 6;
    if (((-1 << v21) & ~*(_QWORD *)(v17 + 8 * (v21 >> 6))) != 0)
    {
      v23 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v17 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v32 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (v22 + 1 == v32)
          v22 = 0;
        else
          ++v22;
        v33 = *(_QWORD *)(v17 + 8 * v22);
      }
      while (v33 == -1);
      v23 = __clz(__rbit64(~v33)) + (v22 << 6);
    }
    *(_QWORD *)(v17 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    v24 = 8 * v23;
    *(_QWORD *)(*(_QWORD *)(v11 + 48) + v24) = v29;
    *(_QWORD *)(*(_QWORD *)(v11 + 56) + v24) = v30;
    ++*(_QWORD *)(v11 + 16);
  }
  while (v16 - 4 != v18)
  {
    v28 = *(_QWORD *)(v9 + 8 * v18++ + 96);
    if (v28)
    {
      v27 = v18 + 3;
      goto LABEL_20;
    }
  }
LABEL_29:
  swift_release();
  if ((a2 & 1) != 0)
  {
    v34 = 1 << *(_BYTE *)(v9 + 32);
    if (v34 >= 64)
      bzero((void *)(v9 + 64), ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
    else
      *v13 = -1 << v34;
    *(_QWORD *)(v9 + 16) = 0;
  }
  result = swift_release();
  v7 = v36;
LABEL_36:
  *v7 = v11;
  return result;
}

uint64_t sub_1B1E9E9A0(uint64_t a1, char a2)
{
  return sub_1B1E9E6F8(a1, a2, &qword_1EEF5B548, &qword_1EEF5E8B0, (uint64_t)off_1E636B5E0, &qword_1EEF5B550);
}

uint64_t sub_1B1E9E9C4(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t result;
  _QWORD *v31;
  int64_t v32;
  __int128 v33;

  v3 = v2;
  v5 = *v2;
  sub_1B1B9A894();
  v6 = sub_1B22296C4();
  v8 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_35;
  v9 = 0;
  v10 = 1 << *(_BYTE *)(v5 + 32);
  if (v10 < 64)
    v11 = ~(-1 << v10);
  else
    v11 = -1;
  v12 = v11 & *(_QWORD *)(v5 + 64);
  v13 = v6 + 64;
  v31 = (_QWORD *)(v5 + 64);
  v32 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v20 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v21 = v20 | (v9 << 6);
      goto LABEL_21;
    }
    v22 = v9 + 1;
    if (v9 + 1 >= v32)
      goto LABEL_29;
    v23 = v31[v22];
    if (!v23)
    {
      v22 = v9 + 2;
      if (v9 + 2 >= v32)
        goto LABEL_29;
      v23 = v31[v22];
      if (!v23)
      {
        v22 = v9 + 3;
        if (v9 + 3 >= v32)
          goto LABEL_29;
        v23 = v31[v22];
        if (!v23)
          break;
      }
    }
LABEL_20:
    v12 = (v23 - 1) & v23;
    v21 = __clz(__rbit64(v23)) + (v22 << 6);
    v9 = v22;
LABEL_21:
    *(_QWORD *)&v7 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v21);
    v33 = v7;
    v24 = (uint64_t *)(*(_QWORD *)(v5 + 56) + 16 * v21);
    v25 = *v24;
    v26 = v24[1];
    if ((a2 & 1) == 0)
      swift_bridgeObjectRetain();
    sub_1B222A06C();
    sub_1B222A09C();
    sub_1B222A09C();
    v14 = sub_1B222A0C0();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = v14 & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v13 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v13 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (v17 + 1 == v27)
          v17 = 0;
        else
          ++v17;
        v28 = *(_QWORD *)(v13 + 8 * v17);
      }
      while (v28 == -1);
      v18 = __clz(__rbit64(~v28)) + (v17 << 6);
    }
    *(_QWORD *)(v13 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    *((_QWORD *)&v7 + 1) = *((_QWORD *)&v33 + 1);
    *(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * v18) = v33;
    v19 = (_QWORD *)(*(_QWORD *)(v8 + 56) + 16 * v18);
    *v19 = v25;
    v19[1] = v26;
    ++*(_QWORD *)(v8 + 16);
  }
  while (v32 - 4 != v9)
  {
    v23 = *(_QWORD *)(v5 + 96 + 8 * v9++);
    if (v23)
    {
      v22 = v9 + 3;
      goto LABEL_20;
    }
  }
LABEL_29:
  if ((a2 & 1) != 0)
  {
    v29 = 1 << *(_BYTE *)(v5 + 32);
    v3 = v2;
    if (v29 >= 64)
      bzero(v31, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
    else
      *v31 = -1 << v29;
    *(_QWORD *)(v5 + 16) = 0;
LABEL_35:
    result = swift_release();
  }
  else
  {
    result = swift_release();
    v3 = v2;
  }
  *v3 = v8;
  return result;
}

uint64_t sub_1B1E9ECA4(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t result;
  uint64_t *v32;
  _QWORD *v33;

  v3 = v2;
  v5 = *v2;
  sub_1B1EB6DB4(0, (unint64_t *)&qword_1EEF5B4C0);
  v6 = sub_1B22296C4();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_34;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v32 = v2;
  v33 = (_QWORD *)(v5 + 64);
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v11 = (unint64_t)(v8 + 63) >> 6;
  v12 = v6 + 64;
  swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v21 = v20 | (v13 << 6);
      goto LABEL_21;
    }
    v22 = v13 + 1;
    if (v13 + 1 >= v11)
      goto LABEL_29;
    v23 = v33[v22];
    if (!v23)
    {
      v22 = v13 + 2;
      if (v13 + 2 >= v11)
        goto LABEL_29;
      v23 = v33[v22];
      if (!v23)
      {
        v22 = v13 + 3;
        if (v13 + 3 >= v11)
          goto LABEL_29;
        v23 = v33[v22];
        if (!v23)
          break;
      }
    }
LABEL_20:
    v10 = (v23 - 1) & v23;
    v21 = __clz(__rbit64(v23)) + (v22 << 6);
    v13 = v22;
LABEL_21:
    v24 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v21);
    v26 = *v24;
    v25 = v24[1];
    v27 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v21);
    if ((a2 & 1) == 0)
      swift_bridgeObjectRetain();
    sub_1B222A06C();
    sub_1B2228824();
    v14 = sub_1B222A0C0();
    v15 = -1 << *(_BYTE *)(v7 + 32);
    v16 = v14 & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v28 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (v17 + 1 == v28)
          v17 = 0;
        else
          ++v17;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v18);
    *v19 = v26;
    v19[1] = v25;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v18) = v27;
    ++*(_QWORD *)(v7 + 16);
  }
  while (v11 - 4 != v13)
  {
    v23 = *(_QWORD *)(v5 + 8 * v13++ + 96);
    if (v23)
    {
      v22 = v13 + 3;
      goto LABEL_20;
    }
  }
LABEL_29:
  swift_release();
  v3 = v32;
  if ((a2 & 1) != 0)
  {
    v30 = 1 << *(_BYTE *)(v5 + 32);
    if (v30 >= 64)
      bzero(v33, ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
    else
      *v33 = -1 << v30;
    *(_QWORD *)(v5 + 16) = 0;
  }
LABEL_34:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_1B1E9EF90(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t result;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  __int128 v31;

  v3 = v2;
  v5 = *v2;
  sub_1B1B99B8C(0, &qword_1ED4BB490, (void (*)(uint64_t))sub_1B1A0FCB4);
  v6 = sub_1B22296C4();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_35;
  v30 = v3;
  v8 = 0;
  v9 = (uint64_t *)(v5 + 64);
  v10 = 1 << *(_BYTE *)(v5 + 32);
  v28 = -1 << v10;
  v29 = v10;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  else
    v11 = -1;
  v12 = v11 & *(_QWORD *)(v5 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  v14 = v6 + 64;
  while (1)
  {
    if (v12)
    {
      v20 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v21 = v20 | (v8 << 6);
      goto LABEL_21;
    }
    v22 = v8 + 1;
    if (v8 + 1 >= v13)
      goto LABEL_29;
    v23 = v9[v22];
    if (!v23)
    {
      v22 = v8 + 2;
      if (v8 + 2 >= v13)
        goto LABEL_29;
      v23 = v9[v22];
      if (!v23)
      {
        v22 = v8 + 3;
        if (v8 + 3 >= v13)
          goto LABEL_29;
        v23 = v9[v22];
        if (!v23)
          break;
      }
    }
LABEL_20:
    v12 = (v23 - 1) & v23;
    v21 = __clz(__rbit64(v23)) + (v22 << 6);
    v8 = v22;
LABEL_21:
    v24 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v21);
    v31 = *(_OWORD *)(*(_QWORD *)(v5 + 56) + 16 * v21);
    if ((a2 & 1) == 0)
      swift_retain();
    v15 = sub_1B222A060();
    v16 = -1 << *(_BYTE *)(v7 + 32);
    v17 = v15 & ~v16;
    v18 = v17 >> 6;
    if (((-1 << v17) & ~*(_QWORD *)(v14 + 8 * (v17 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v17) & ~*(_QWORD *)(v14 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = (unint64_t)(63 - v16) >> 6;
      do
      {
        if (v18 + 1 == v25)
          v18 = 0;
        else
          ++v18;
        v26 = *(_QWORD *)(v14 + 8 * v18);
      }
      while (v26 == -1);
      v19 = __clz(__rbit64(~v26)) + (v18 << 6);
    }
    *(_QWORD *)(v14 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v19) = v24;
    *(_OWORD *)(*(_QWORD *)(v7 + 56) + 16 * v19) = v31;
    ++*(_QWORD *)(v7 + 16);
  }
  while (v13 - 4 != v8)
  {
    v23 = *(_QWORD *)(v5 + 96 + 8 * v8++);
    if (v23)
    {
      v22 = v8 + 3;
      goto LABEL_20;
    }
  }
LABEL_29:
  if ((a2 & 1) != 0)
  {
    v3 = v30;
    if (v29 >= 64)
      bzero((void *)(v5 + 64), 8 * v13);
    else
      *v9 = v28;
    *(_QWORD *)(v5 + 16) = 0;
LABEL_35:
    result = swift_release();
  }
  else
  {
    result = swift_release();
    v3 = v30;
  }
  *v3 = v7;
  return result;
}

uint64_t sub_1B1E9F230(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _OWORD *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  __int128 *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t result;
  __int128 v30;
  __int128 v31;
  uint64_t v32;

  v3 = v2;
  v5 = *v2;
  sub_1B1EB5C70();
  v6 = sub_1B22296C4();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_35;
  v8 = 0;
  v9 = (_QWORD *)(v5 + 64);
  v10 = 1 << *(_BYTE *)(v5 + 32);
  if (v10 < 64)
    v11 = ~(-1 << v10);
  else
    v11 = -1;
  v12 = v11 & *(_QWORD *)(v5 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  v14 = v6 + 64;
  while (1)
  {
    if (v12)
    {
      v21 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v22 = v21 | (v8 << 6);
      goto LABEL_21;
    }
    v23 = v8 + 1;
    if (v8 + 1 >= v13)
      goto LABEL_29;
    v24 = v9[v23];
    if (!v24)
    {
      v23 = v8 + 2;
      if (v8 + 2 >= v13)
        goto LABEL_29;
      v24 = v9[v23];
      if (!v24)
      {
        v23 = v8 + 3;
        if (v8 + 3 >= v13)
          goto LABEL_29;
        v24 = v9[v23];
        if (!v24)
          break;
      }
    }
LABEL_20:
    v12 = (v24 - 1) & v24;
    v22 = __clz(__rbit64(v24)) + (v23 << 6);
    v8 = v23;
LABEL_21:
    v32 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v22);
    v25 = (__int128 *)(*(_QWORD *)(v5 + 56) + 32 * v22);
    v30 = v25[1];
    v31 = *v25;
    if ((a2 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    sub_1B222A06C();
    sub_1B222A09C();
    sub_1B222A09C();
    v15 = sub_1B222A0C0();
    v16 = -1 << *(_BYTE *)(v7 + 32);
    v17 = v15 & ~v16;
    v18 = v17 >> 6;
    if (((-1 << v17) & ~*(_QWORD *)(v14 + 8 * (v17 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v17) & ~*(_QWORD *)(v14 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = (unint64_t)(63 - v16) >> 6;
      do
      {
        if (v18 + 1 == v26)
          v18 = 0;
        else
          ++v18;
        v27 = *(_QWORD *)(v14 + 8 * v18);
      }
      while (v27 == -1);
      v19 = __clz(__rbit64(~v27)) + (v18 << 6);
    }
    *(_QWORD *)(v14 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v19) = v32;
    v20 = (_OWORD *)(*(_QWORD *)(v7 + 56) + 32 * v19);
    *v20 = v31;
    v20[1] = v30;
    ++*(_QWORD *)(v7 + 16);
  }
  while (v13 - 4 != v8)
  {
    v24 = *(_QWORD *)(v5 + 96 + 8 * v8++);
    if (v24)
    {
      v23 = v8 + 3;
      goto LABEL_20;
    }
  }
LABEL_29:
  if ((a2 & 1) != 0)
  {
    v28 = 1 << *(_BYTE *)(v5 + 32);
    v3 = v2;
    if (v28 >= 64)
      bzero((void *)(v5 + 64), ((unint64_t)(v28 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
    else
      *v9 = -1 << v28;
    *(_QWORD *)(v5 + 16) = 0;
LABEL_35:
    result = swift_release();
  }
  else
  {
    result = swift_release();
    v3 = v2;
  }
  *v3 = v7;
  return result;
}

uint64_t sub_1B1E9F528(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  _OWORD *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  __int128 *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t result;
  uint64_t *v33;
  _QWORD *v34;
  __int128 v35;
  __int128 v36;

  v3 = v2;
  v5 = *v2;
  sub_1B1EB6DB4(0, (unint64_t *)&qword_1EEF5B440);
  v6 = sub_1B22296C4();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_34;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v33 = v2;
  v34 = (_QWORD *)(v5 + 64);
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v11 = (unint64_t)(v8 + 63) >> 6;
  v12 = v6 + 64;
  swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v21 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v22 = v21 | (v13 << 6);
      goto LABEL_21;
    }
    v23 = v13 + 1;
    if (v13 + 1 >= v11)
      goto LABEL_29;
    v24 = v34[v23];
    if (!v24)
    {
      v23 = v13 + 2;
      if (v13 + 2 >= v11)
        goto LABEL_29;
      v24 = v34[v23];
      if (!v24)
      {
        v23 = v13 + 3;
        if (v13 + 3 >= v11)
          goto LABEL_29;
        v24 = v34[v23];
        if (!v24)
          break;
      }
    }
LABEL_20:
    v10 = (v24 - 1) & v24;
    v22 = __clz(__rbit64(v24)) + (v23 << 6);
    v13 = v23;
LABEL_21:
    v25 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v22);
    v27 = *v25;
    v26 = v25[1];
    v28 = (__int128 *)(*(_QWORD *)(v5 + 56) + 32 * v22);
    v35 = *v28;
    v36 = v28[1];
    if ((a2 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    sub_1B222A06C();
    sub_1B2228824();
    v14 = sub_1B222A0C0();
    v15 = -1 << *(_BYTE *)(v7 + 32);
    v16 = v14 & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v29 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (v17 + 1 == v29)
          v17 = 0;
        else
          ++v17;
        v30 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v30 == -1);
      v18 = __clz(__rbit64(~v30)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v18);
    *v19 = v27;
    v19[1] = v26;
    v20 = (_OWORD *)(*(_QWORD *)(v7 + 56) + 32 * v18);
    *v20 = v35;
    v20[1] = v36;
    ++*(_QWORD *)(v7 + 16);
  }
  while (v11 - 4 != v13)
  {
    v24 = *(_QWORD *)(v5 + 8 * v13++ + 96);
    if (v24)
    {
      v23 = v13 + 3;
      goto LABEL_20;
    }
  }
LABEL_29:
  swift_release();
  v3 = v33;
  if ((a2 & 1) != 0)
  {
    v31 = 1 << *(_BYTE *)(v5 + 32);
    if (v31 >= 64)
      bzero(v34, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
    else
      *v34 = -1 << v31;
    *(_QWORD *)(v5 + 16) = 0;
  }
LABEL_34:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_1B1E9F854(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;
  _QWORD *v28;
  int64_t v29;

  v3 = v2;
  v5 = *v2;
  sub_1B1B99DB0(0, (unint64_t *)&unk_1ED4BA8B0, (void (*)(uint64_t))type metadata accessor for EntityClass, (void (*)(void))sub_1B1EB5C08);
  v6 = sub_1B22296C4();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_35;
  v8 = 0;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v12 = v6 + 64;
  v28 = (_QWORD *)(v5 + 64);
  v29 = (unint64_t)(v9 + 63) >> 6;
  while (1)
  {
    if (v11)
    {
      v18 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v19 = v18 | (v8 << 6);
      goto LABEL_21;
    }
    v20 = v8 + 1;
    if (v8 + 1 >= v29)
      goto LABEL_29;
    v21 = v28[v20];
    if (!v21)
    {
      v20 = v8 + 2;
      if (v8 + 2 >= v29)
        goto LABEL_29;
      v21 = v28[v20];
      if (!v21)
      {
        v20 = v8 + 3;
        if (v8 + 3 >= v29)
          goto LABEL_29;
        v21 = v28[v20];
        if (!v21)
          break;
      }
    }
LABEL_20:
    v11 = (v21 - 1) & v21;
    v19 = __clz(__rbit64(v21)) + (v20 << 6);
    v8 = v20;
LABEL_21:
    v22 = *(_BYTE *)(*(_QWORD *)(v5 + 48) + v19);
    v23 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v19);
    if ((a2 & 1) == 0)
      swift_retain();
    sub_1B222A06C();
    sub_1B222A084();
    v13 = sub_1B222A0C0();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = v13 & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v12 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v12 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v24 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (v16 + 1 == v24)
          v16 = 0;
        else
          ++v16;
        v25 = *(_QWORD *)(v12 + 8 * v16);
      }
      while (v25 == -1);
      v17 = __clz(__rbit64(~v25)) + (v16 << 6);
    }
    *(_QWORD *)(v12 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    *(_BYTE *)(*(_QWORD *)(v7 + 48) + v17) = v22;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v17) = v23;
    ++*(_QWORD *)(v7 + 16);
  }
  while (v29 - 4 != v8)
  {
    v21 = *(_QWORD *)(v5 + 96 + 8 * v8++);
    if (v21)
    {
      v20 = v8 + 3;
      goto LABEL_20;
    }
  }
LABEL_29:
  if ((a2 & 1) != 0)
  {
    v26 = 1 << *(_BYTE *)(v5 + 32);
    v3 = v2;
    if (v26 >= 64)
      bzero(v28, ((unint64_t)(v26 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
    else
      *v28 = -1 << v26;
    *(_QWORD *)(v5 + 16) = 0;
LABEL_35:
    result = swift_release();
  }
  else
  {
    result = swift_release();
    v3 = v2;
  }
  *v3 = v7;
  return result;
}

uint64_t sub_1B1E9FB30(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t result;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  int64_t v32;
  __int128 v33;

  v3 = v2;
  v5 = *v2;
  sub_1B1EB6DB4(0, (unint64_t *)&qword_1EEF5B968);
  v6 = sub_1B22296C4();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_35;
  v8 = 0;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v29 = -1 << v9;
  v30 = v9;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v12 = v6 + 64;
  v31 = (uint64_t *)(v5 + 64);
  v32 = (unint64_t)(v9 + 63) >> 6;
  while (1)
  {
    if (v11)
    {
      v19 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v20 = v19 | (v8 << 6);
      goto LABEL_21;
    }
    v21 = v8 + 1;
    if (v8 + 1 >= v32)
      goto LABEL_29;
    v22 = v31[v21];
    if (!v22)
    {
      v21 = v8 + 2;
      if (v8 + 2 >= v32)
        goto LABEL_29;
      v22 = v31[v21];
      if (!v22)
      {
        v21 = v8 + 3;
        if (v8 + 3 >= v32)
          goto LABEL_29;
        v22 = v31[v21];
        if (!v22)
          break;
      }
    }
LABEL_20:
    v11 = (v22 - 1) & v22;
    v20 = __clz(__rbit64(v22)) + (v21 << 6);
    v8 = v21;
LABEL_21:
    v23 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v20);
    v24 = *(_QWORD *)(v5 + 56) + 24 * v20;
    v25 = *(_QWORD *)v24;
    v33 = *(_OWORD *)(v24 + 8);
    if ((a2 & 1) == 0)
      swift_unknownObjectRetain();
    v13 = sub_1B222A060();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = v13 & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v12 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v12 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (v16 + 1 == v26)
          v16 = 0;
        else
          ++v16;
        v27 = *(_QWORD *)(v12 + 8 * v16);
      }
      while (v27 == -1);
      v17 = __clz(__rbit64(~v27)) + (v16 << 6);
    }
    *(_QWORD *)(v12 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v17) = v23;
    v18 = *(_QWORD *)(v7 + 56) + 24 * v17;
    *(_QWORD *)v18 = v25;
    *(_OWORD *)(v18 + 8) = v33;
    ++*(_QWORD *)(v7 + 16);
  }
  while (v32 - 4 != v8)
  {
    v22 = *(_QWORD *)(v5 + 96 + 8 * v8++);
    if (v22)
    {
      v21 = v8 + 3;
      goto LABEL_20;
    }
  }
LABEL_29:
  if ((a2 & 1) != 0)
  {
    if (v30 >= 64)
      bzero(v31, 8 * v32);
    else
      *v31 = v29;
    *(_QWORD *)(v5 + 16) = 0;
  }
LABEL_35:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_1B1E9FE00(uint64_t a1, char a2)
{
  return sub_1B1E94158(a1, a2, (void (*)(_QWORD))sub_1B1EB5D4C);
}

uint64_t sub_1B1E9FE0C(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t result;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  char v32;

  v3 = v2;
  v5 = *v2;
  sub_1B1EB6DB4(0, (unint64_t *)&qword_1ED4BA9B8);
  v6 = sub_1B22296C4();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_33;
  v32 = a2;
  v8 = 0;
  v9 = (uint64_t *)(v5 + 64);
  v10 = 1 << *(_BYTE *)(v5 + 32);
  v29 = -1 << v10;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  else
    v11 = -1;
  v12 = v11 & *(_QWORD *)(v5 + 64);
  v30 = 1 << *(_BYTE *)(v5 + 32);
  v31 = v3;
  v13 = (unint64_t)(v10 + 63) >> 6;
  v14 = v6 + 64;
  while (1)
  {
    if (v12)
    {
      v16 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v17 = v16 | (v8 << 6);
      goto LABEL_20;
    }
    v18 = v8 + 1;
    if (v8 + 1 >= v13)
      goto LABEL_27;
    v19 = v9[v18];
    if (!v19)
    {
      v18 = v8 + 2;
      if (v8 + 2 >= v13)
        goto LABEL_27;
      v19 = v9[v18];
      if (!v19)
      {
        v18 = v8 + 3;
        if (v8 + 3 >= v13)
          goto LABEL_27;
        v19 = v9[v18];
        if (!v19)
          break;
      }
    }
LABEL_19:
    v12 = (v19 - 1) & v19;
    v17 = __clz(__rbit64(v19)) + (v18 << 6);
    v8 = v18;
LABEL_20:
    v20 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v17);
    v21 = *(_DWORD *)(*(_QWORD *)(v5 + 56) + 4 * v17);
    v22 = sub_1B222A060();
    v23 = -1 << *(_BYTE *)(v7 + 32);
    v24 = v22 & ~v23;
    v25 = v24 >> 6;
    if (((-1 << v24) & ~*(_QWORD *)(v14 + 8 * (v24 >> 6))) != 0)
    {
      v15 = __clz(__rbit64((-1 << v24) & ~*(_QWORD *)(v14 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (v25 + 1 == v26)
          v25 = 0;
        else
          ++v25;
        v27 = *(_QWORD *)(v14 + 8 * v25);
      }
      while (v27 == -1);
      v15 = __clz(__rbit64(~v27)) + (v25 << 6);
    }
    *(_QWORD *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v15) = v20;
    *(_DWORD *)(*(_QWORD *)(v7 + 56) + 4 * v15) = v21;
    ++*(_QWORD *)(v7 + 16);
  }
  while (v13 - 4 != v8)
  {
    v19 = *(_QWORD *)(v5 + 96 + 8 * v8++);
    if (v19)
    {
      v18 = v8 + 3;
      goto LABEL_19;
    }
  }
LABEL_27:
  if ((v32 & 1) != 0)
  {
    v3 = v31;
    if (v30 >= 64)
      bzero((void *)(v5 + 64), 8 * v13);
    else
      *v9 = v29;
    *(_QWORD *)(v5 + 16) = 0;
LABEL_33:
    result = swift_release();
  }
  else
  {
    result = swift_release();
    v3 = v31;
  }
  *v3 = v7;
  return result;
}

uint64_t sub_1B1EA0098(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t result;
  uint64_t v28;
  uint64_t v29;
  int64_t v30;

  v3 = v2;
  v5 = *v2;
  sub_1B1EB6DB4(0, &qword_1EEF60058);
  v6 = sub_1B22296C4();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_35;
  v8 = 0;
  v9 = (uint64_t *)(v5 + 64);
  v10 = 1 << *(_BYTE *)(v5 + 32);
  v28 = -1 << v10;
  v29 = v10;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  else
    v11 = -1;
  v12 = v11 & *(_QWORD *)(v5 + 64);
  v13 = v6 + 64;
  v30 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v19 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v20 = v19 | (v8 << 6);
      goto LABEL_21;
    }
    v21 = v8 + 1;
    if (v8 + 1 >= v30)
      goto LABEL_29;
    v22 = v9[v21];
    if (!v22)
    {
      v21 = v8 + 2;
      if (v8 + 2 >= v30)
        goto LABEL_29;
      v22 = v9[v21];
      if (!v22)
      {
        v21 = v8 + 3;
        if (v8 + 3 >= v30)
          goto LABEL_29;
        v22 = v9[v21];
        if (!v22)
          break;
      }
    }
LABEL_20:
    v12 = (v22 - 1) & v22;
    v20 = __clz(__rbit64(v22)) + (v21 << 6);
    v8 = v21;
LABEL_21:
    v23 = *(unsigned int *)(*(_QWORD *)(v5 + 48) + 4 * v20);
    v24 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v20);
    if ((a2 & 1) == 0)
      swift_bridgeObjectRetain();
    v14 = MEMORY[0x1B5E21C00](*(_QWORD *)(v7 + 40), v23, 4);
    v15 = -1 << *(_BYTE *)(v7 + 32);
    v16 = v14 & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v13 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v13 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (v17 + 1 == v25)
          v17 = 0;
        else
          ++v17;
        v26 = *(_QWORD *)(v13 + 8 * v17);
      }
      while (v26 == -1);
      v18 = __clz(__rbit64(~v26)) + (v17 << 6);
    }
    *(_QWORD *)(v13 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    *(_DWORD *)(*(_QWORD *)(v7 + 48) + 4 * v18) = v23;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v18) = v24;
    ++*(_QWORD *)(v7 + 16);
  }
  while (v30 - 4 != v8)
  {
    v22 = *(_QWORD *)(v5 + 96 + 8 * v8++);
    if (v22)
    {
      v21 = v8 + 3;
      goto LABEL_20;
    }
  }
LABEL_29:
  if ((a2 & 1) != 0)
  {
    if (v29 >= 64)
      bzero((void *)(v5 + 64), 8 * v30);
    else
      *v9 = v28;
    *(_QWORD *)(v5 + 16) = 0;
  }
LABEL_35:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_1B1EA0344(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t result;
  char v30;
  __int128 v31;

  v3 = v2;
  v5 = *v2;
  sub_1B1EB6348();
  v6 = sub_1B22296C4();
  v8 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_33;
  v30 = a2;
  v9 = 0;
  v10 = (_QWORD *)(v5 + 64);
  v11 = 1 << *(_BYTE *)(v5 + 32);
  if (v11 < 64)
    v12 = ~(-1 << v11);
  else
    v12 = -1;
  v13 = v12 & *(_QWORD *)(v5 + 64);
  v14 = (unint64_t)(v11 + 63) >> 6;
  v15 = v6 + 64;
  while (1)
  {
    if (v13)
    {
      v17 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v18 = v17 | (v9 << 6);
      goto LABEL_20;
    }
    v19 = v9 + 1;
    if (v9 + 1 >= v14)
      goto LABEL_27;
    v20 = v10[v19];
    if (!v20)
    {
      v19 = v9 + 2;
      if (v9 + 2 >= v14)
        goto LABEL_27;
      v20 = v10[v19];
      if (!v20)
      {
        v19 = v9 + 3;
        if (v9 + 3 >= v14)
          goto LABEL_27;
        v20 = v10[v19];
        if (!v20)
          break;
      }
    }
LABEL_19:
    v13 = (v20 - 1) & v20;
    v18 = __clz(__rbit64(v20)) + (v19 << 6);
    v9 = v19;
LABEL_20:
    *(_QWORD *)&v7 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v18);
    v31 = v7;
    v21 = *(_BYTE *)(*(_QWORD *)(v5 + 56) + v18);
    sub_1B222A06C();
    sub_1B222A09C();
    sub_1B222A09C();
    v22 = sub_1B222A0C0();
    v23 = -1 << *(_BYTE *)(v8 + 32);
    v24 = v22 & ~v23;
    v25 = v24 >> 6;
    if (((-1 << v24) & ~*(_QWORD *)(v15 + 8 * (v24 >> 6))) != 0)
    {
      v16 = __clz(__rbit64((-1 << v24) & ~*(_QWORD *)(v15 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (v25 + 1 == v26)
          v25 = 0;
        else
          ++v25;
        v27 = *(_QWORD *)(v15 + 8 * v25);
      }
      while (v27 == -1);
      v16 = __clz(__rbit64(~v27)) + (v25 << 6);
    }
    *(_QWORD *)(v15 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
    *((_QWORD *)&v7 + 1) = *((_QWORD *)&v31 + 1);
    *(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * v16) = v31;
    *(_BYTE *)(*(_QWORD *)(v8 + 56) + v16) = v21;
    ++*(_QWORD *)(v8 + 16);
  }
  while (v14 - 4 != v9)
  {
    v20 = *(_QWORD *)(v5 + 96 + 8 * v9++);
    if (v20)
    {
      v19 = v9 + 3;
      goto LABEL_19;
    }
  }
LABEL_27:
  if ((v30 & 1) != 0)
  {
    v28 = 1 << *(_BYTE *)(v5 + 32);
    v3 = v2;
    if (v28 >= 64)
      bzero((void *)(v5 + 64), ((unint64_t)(v28 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
    else
      *v10 = -1 << v28;
    *(_QWORD *)(v5 + 16) = 0;
LABEL_33:
    result = swift_release();
  }
  else
  {
    result = swift_release();
    v3 = v2;
  }
  *v3 = v8;
  return result;
}

uint64_t sub_1B1EA05F4(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t result;
  uint64_t *v36;
  _QWORD *v37;
  uint64_t i;
  char v39;

  v3 = v2;
  v5 = *v2;
  sub_1B1B99B8C(0, (unint64_t *)&unk_1EEF5B610, (void (*)(uint64_t))sub_1B1B9B510);
  v39 = a2;
  v6 = sub_1B22296C4();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_34;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v36 = v2;
  v37 = (_QWORD *)(v5 + 64);
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v11 = (unint64_t)(v8 + 63) >> 6;
  v12 = v6 + 64;
  swift_retain();
  v13 = 0;
  for (i = v5; ; v5 = i)
  {
    if (v10)
    {
      v21 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v22 = v21 | (v13 << 6);
      goto LABEL_21;
    }
    v23 = v13 + 1;
    if (v13 + 1 >= v11)
      goto LABEL_29;
    v24 = v37[v23];
    if (!v24)
    {
      v23 = v13 + 2;
      if (v13 + 2 >= v11)
        goto LABEL_29;
      v24 = v37[v23];
      if (!v24)
      {
        v23 = v13 + 3;
        if (v13 + 3 >= v11)
          goto LABEL_29;
        v24 = v37[v23];
        if (!v24)
          break;
      }
    }
LABEL_20:
    v10 = (v24 - 1) & v24;
    v22 = __clz(__rbit64(v24)) + (v23 << 6);
    v13 = v23;
LABEL_21:
    v25 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v22);
    v27 = *v25;
    v26 = v25[1];
    v28 = (uint64_t *)(*(_QWORD *)(v5 + 56) + 24 * v22);
    v29 = *v28;
    v30 = v28[1];
    v31 = v28[2];
    if ((v39 & 1) == 0)
    {
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    sub_1B222A06C();
    sub_1B2228824();
    v14 = sub_1B222A0C0();
    v15 = -1 << *(_BYTE *)(v7 + 32);
    v16 = v14 & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v32 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (v17 + 1 == v32)
          v17 = 0;
        else
          ++v17;
        v33 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v33 == -1);
      v18 = __clz(__rbit64(~v33)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v18);
    *v19 = v27;
    v19[1] = v26;
    v20 = (_QWORD *)(*(_QWORD *)(v7 + 56) + 24 * v18);
    *v20 = v29;
    v20[1] = v30;
    v20[2] = v31;
    ++*(_QWORD *)(v7 + 16);
  }
  while (v11 - 4 != v13)
  {
    v24 = *(_QWORD *)(v5 + 8 * v13++ + 96);
    if (v24)
    {
      v23 = v13 + 3;
      goto LABEL_20;
    }
  }
LABEL_29:
  swift_release();
  v3 = v36;
  if ((v39 & 1) != 0)
  {
    v34 = 1 << *(_BYTE *)(v5 + 32);
    if (v34 >= 64)
      bzero(v37, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
    else
      *v37 = -1 << v34;
    *(_QWORD *)(v5 + 16) = 0;
  }
LABEL_34:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_1B1EA0914(uint64_t a1, char a2)
{
  return sub_1B1EA0974(a1, a2, sub_1B1EB6438);
}

uint64_t sub_1B1EA0920(uint64_t a1, char a2)
{
  return sub_1B1EA0974(a1, a2, sub_1B1EB63F0);
}

uint64_t sub_1B1EA092C(uint64_t a1, char a2)
{
  return sub_1B1EA0974(a1, a2, sub_1B1EB6510);
}

uint64_t sub_1B1EA0938(uint64_t a1, char a2)
{
  return sub_1B1EA0974(a1, a2, sub_1B1EB64EC);
}

uint64_t sub_1B1EA0944(uint64_t a1, char a2)
{
  return sub_1B1EA0974(a1, a2, sub_1B1EB64C8);
}

uint64_t sub_1B1EA0950(uint64_t a1, char a2)
{
  return sub_1B1EA0974(a1, a2, sub_1B1EB64A4);
}

uint64_t sub_1B1EA095C(uint64_t a1, char a2)
{
  return sub_1B1EA0974(a1, a2, sub_1B1EB6480);
}

uint64_t sub_1B1EA0968(uint64_t a1, char a2)
{
  return sub_1B1EA0974(a1, a2, sub_1B1EB645C);
}

uint64_t sub_1B1EA0974(uint64_t a1, char a2, void (*a3)(_QWORD))
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t result;
  _QWORD *v33;
  char v34;

  v4 = v3;
  v6 = *v3;
  a3(0);
  v34 = a2;
  v7 = sub_1B22296C4();
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
    goto LABEL_34;
  v9 = 1 << *(_BYTE *)(v6 + 32);
  v33 = (_QWORD *)(v6 + 64);
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v6 + 64);
  v12 = (unint64_t)(v9 + 63) >> 6;
  v13 = v7 + 64;
  swift_retain();
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v21 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v22 = v21 | (v14 << 6);
      goto LABEL_21;
    }
    v23 = v14 + 1;
    if (v14 + 1 >= v12)
      goto LABEL_29;
    v24 = v33[v23];
    if (!v24)
    {
      v23 = v14 + 2;
      if (v14 + 2 >= v12)
        goto LABEL_29;
      v24 = v33[v23];
      if (!v24)
      {
        v23 = v14 + 3;
        if (v14 + 3 >= v12)
          goto LABEL_29;
        v24 = v33[v23];
        if (!v24)
          break;
      }
    }
LABEL_20:
    v11 = (v24 - 1) & v24;
    v22 = __clz(__rbit64(v24)) + (v23 << 6);
    v14 = v23;
LABEL_21:
    v25 = (uint64_t *)(*(_QWORD *)(v6 + 48) + 16 * v22);
    v27 = *v25;
    v26 = v25[1];
    v28 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v22);
    if ((v34 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_retain();
    }
    sub_1B222A06C();
    sub_1B2228824();
    v15 = sub_1B222A0C0();
    v16 = -1 << *(_BYTE *)(v8 + 32);
    v17 = v15 & ~v16;
    v18 = v17 >> 6;
    if (((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v29 = (unint64_t)(63 - v16) >> 6;
      do
      {
        if (v18 + 1 == v29)
          v18 = 0;
        else
          ++v18;
        v30 = *(_QWORD *)(v13 + 8 * v18);
      }
      while (v30 == -1);
      v19 = __clz(__rbit64(~v30)) + (v18 << 6);
    }
    *(_QWORD *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    v20 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v19);
    *v20 = v27;
    v20[1] = v26;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v19) = v28;
    ++*(_QWORD *)(v8 + 16);
  }
  while (v12 - 4 != v14)
  {
    v24 = *(_QWORD *)(v6 + 8 * v14++ + 96);
    if (v24)
    {
      v23 = v14 + 3;
      goto LABEL_20;
    }
  }
LABEL_29:
  swift_release();
  if ((v34 & 1) != 0)
  {
    v31 = 1 << *(_BYTE *)(v6 + 32);
    if (v31 >= 64)
      bzero(v33, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
    else
      *v33 = -1 << v31;
    *(_QWORD *)(v6 + 16) = 0;
  }
LABEL_34:
  result = swift_release();
  *v4 = v8;
  return result;
}

uint64_t sub_1B1EA0C4C(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t result;
  unint64_t v38;
  _QWORD *v39;
  int64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v3 = v2;
  v5 = *v2;
  sub_1B1EB6DB4(0, (unint64_t *)&qword_1EEF5B600);
  v42 = a2;
  v6 = sub_1B22296C4();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_34;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v39 = (_QWORD *)(v5 + 64);
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v11 = (unint64_t)(v8 + 63) >> 6;
  v12 = v6 + 64;
  swift_retain();
  v13 = 0;
  v40 = v11;
  v41 = v5;
  v38 = v11 - 4;
  while (1)
  {
    if (v10)
    {
      v21 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v43 = v13;
      v22 = v21 | (v13 << 6);
      goto LABEL_21;
    }
    v23 = v13 + 1;
    if (v13 + 1 >= v40)
      goto LABEL_29;
    v24 = v39[v23];
    if (!v24)
    {
      v23 = v13 + 2;
      if (v13 + 2 >= v40)
        goto LABEL_29;
      v24 = v39[v23];
      if (!v24)
      {
        v23 = v13 + 3;
        if (v13 + 3 >= v40)
          goto LABEL_29;
        v24 = v39[v23];
        if (!v24)
          break;
      }
    }
LABEL_20:
    v10 = (v24 - 1) & v24;
    v22 = __clz(__rbit64(v24)) + (v23 << 6);
    v43 = v23;
LABEL_21:
    v25 = *(_QWORD *)(v5 + 56);
    v26 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v22);
    v28 = *v26;
    v27 = v26[1];
    v29 = (uint64_t *)(v25 + 56 * v22);
    v30 = v29[1];
    v31 = v29[3];
    v46 = v29[2];
    v32 = v29[5];
    v44 = *v29;
    v45 = v29[4];
    v33 = v29[6];
    if ((v42 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    sub_1B222A06C();
    sub_1B2228824();
    v14 = sub_1B222A0C0();
    v15 = -1 << *(_BYTE *)(v7 + 32);
    v16 = v14 & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v34 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (v17 + 1 == v34)
          v17 = 0;
        else
          ++v17;
        v35 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v35 == -1);
      v18 = __clz(__rbit64(~v35)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v18);
    *v19 = v28;
    v19[1] = v27;
    v20 = (_QWORD *)(*(_QWORD *)(v7 + 56) + 56 * v18);
    v13 = v43;
    *v20 = v44;
    v20[1] = v30;
    v20[2] = v46;
    v20[3] = v31;
    v20[4] = v45;
    v20[5] = v32;
    v20[6] = v33;
    ++*(_QWORD *)(v7 + 16);
    v5 = v41;
  }
  while (v38 != v13)
  {
    v24 = *(_QWORD *)(v5 + 8 * v13++ + 96);
    if (v24)
    {
      v23 = v13 + 3;
      goto LABEL_20;
    }
  }
LABEL_29:
  swift_release();
  v3 = v2;
  if ((v42 & 1) != 0)
  {
    v36 = 1 << *(_BYTE *)(v5 + 32);
    if (v36 >= 64)
      bzero(v39, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
    else
      *v39 = -1 << v36;
    *(_QWORD *)(v5 + 16) = 0;
  }
LABEL_34:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_1B1EA0FA0(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t result;
  uint64_t *v19;
  _QWORD *v20;

  v3 = v2;
  v5 = *v2;
  sub_1B1B99DB0(0, &qword_1EEF5B5F0, (void (*)(uint64_t))type metadata accessor for VFXREBindingMeshData, (void (*)(void))sub_1B1B9B468);
  v6 = sub_1B22296C4();
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_25;
  v7 = 1 << *(_BYTE *)(v5 + 32);
  v19 = v2;
  v20 = (_QWORD *)(v5 + 64);
  if (v7 < 64)
    v8 = ~(-1 << v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(v5 + 64);
  v10 = (unint64_t)(v7 + 63) >> 6;
  swift_retain();
  v11 = 0;
  if (v9)
  {
    v12 = __clz(__rbit64(v9));
    goto LABEL_17;
  }
  v13 = 1;
  if (v10 > 1)
  {
    v14 = *(_QWORD *)(v5 + 72);
    if (v14)
      goto LABEL_16;
    v13 = 2;
    if (v10 > 2)
    {
      v14 = *(_QWORD *)(v5 + 80);
      if (!v14)
      {
        v13 = 3;
        if (v10 > 3)
        {
          v14 = *(_QWORD *)(v5 + 88);
          if (!v14)
          {
            do
            {
              if (v10 - 4 == v11)
                goto LABEL_20;
              v14 = *(_QWORD *)(v5 + 8 * v11++ + 96);
            }
            while (!v14);
            v13 = v11 + 3;
          }
          goto LABEL_16;
        }
        goto LABEL_20;
      }
LABEL_16:
      v12 = __clz(__rbit64(v14)) + (v13 << 6);
LABEL_17:
      v15 = *(unsigned __int8 *)(*(_QWORD *)(v5 + 48) + v12);
      if ((a2 & 1) == 0)
        v16 = *(id *)(*(_QWORD *)(v5 + 56) + 8 * v12);
      sub_1B222A06C();
      __asm { BR              X8 }
    }
  }
LABEL_20:
  swift_release();
  v3 = v19;
  if ((a2 & 1) != 0)
  {
    v17 = 1 << *(_BYTE *)(v5 + 32);
    if (v17 >= 64)
      bzero(v20, ((unint64_t)(v17 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
    else
      *v20 = -1 << v17;
    *(_QWORD *)(v5 + 16) = 0;
  }
LABEL_25:
  result = swift_release();
  *v3 = v6;
  return result;
}

uint64_t sub_1B1EA134C(uint64_t a1, char a2)
{
  return sub_1B1EA1388(a1, a2, &qword_1EEF60140, &qword_1EEF5B3B0, MEMORY[0x1E0DEE9B8] + 8);
}

uint64_t sub_1B1EA136C(uint64_t a1, char a2)
{
  return sub_1B1EA1388(a1, a2, (unint64_t *)&unk_1EEF5B390, (unint64_t *)&qword_1ED4BA490, MEMORY[0x1E0DEA968]);
}

uint64_t sub_1B1EA1388(uint64_t a1, char a2, unint64_t *a3, unint64_t *a4, uint64_t a5)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t result;
  unint64_t v41;
  uint64_t *v42;
  _QWORD *v43;
  int64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  int v51;

  v6 = v5;
  v8 = *v5;
  sub_1B1B99C78(0, a3, a4, a5);
  v46 = a2;
  v9 = sub_1B22296C4();
  v10 = v9;
  if (!*(_QWORD *)(v8 + 16))
    goto LABEL_41;
  v11 = 1 << *(_BYTE *)(v8 + 32);
  v42 = v5;
  v43 = (_QWORD *)(v8 + 64);
  if (v11 < 64)
    v12 = ~(-1 << v11);
  else
    v12 = -1;
  v13 = v12 & *(_QWORD *)(v8 + 64);
  v14 = (unint64_t)(v11 + 63) >> 6;
  v15 = v9 + 64;
  swift_retain();
  v16 = 0;
  v44 = v14;
  v45 = v8;
  v41 = v14 - 4;
  while (1)
  {
    if (v13)
    {
      v20 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v47 = v16;
      v21 = v20 | (v16 << 6);
      goto LABEL_20;
    }
    v22 = v16 + 1;
    if (v16 + 1 >= v44)
      goto LABEL_36;
    v23 = v43[v22];
    if (!v23)
    {
      v22 = v16 + 2;
      if (v16 + 2 >= v44)
        goto LABEL_36;
      v23 = v43[v22];
      if (!v23)
      {
        v22 = v16 + 3;
        if (v16 + 3 >= v44)
          goto LABEL_36;
        v23 = v43[v22];
        if (!v23)
          break;
      }
    }
LABEL_19:
    v13 = (v23 - 1) & v23;
    v21 = __clz(__rbit64(v23)) + (v22 << 6);
    v47 = v22;
LABEL_20:
    v24 = *(_QWORD *)(v8 + 56);
    v25 = *(_QWORD *)(v8 + 48) + 72 * v21;
    v27 = *(_QWORD *)v25;
    v26 = *(_QWORD *)(v25 + 8);
    v28 = *(_QWORD *)(v25 + 16);
    v29 = *(_QWORD *)(v25 + 24);
    v30 = *(_QWORD *)(v25 + 40);
    v49 = *(_QWORD *)(v25 + 32);
    v31 = *(_QWORD *)(v25 + 56);
    v50 = *(_QWORD *)(v25 + 48);
    v48 = *(_DWORD *)(v25 + 64);
    v51 = *(unsigned __int8 *)(v25 + 68);
    v32 = *(_QWORD *)(v24 + 8 * v21);
    if ((v46 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    sub_1B222A06C();
    swift_bridgeObjectRetain();
    sub_1B2228824();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    sub_1B2228824();
    swift_bridgeObjectRelease();
    if (v30)
    {
      sub_1B222A084();
      swift_bridgeObjectRetain();
      sub_1B2228824();
      swift_bridgeObjectRelease();
      if (v31)
        goto LABEL_24;
    }
    else
    {
      sub_1B222A084();
      if (v31)
      {
LABEL_24:
        sub_1B222A084();
        swift_bridgeObjectRetain();
        sub_1B2228824();
        swift_bridgeObjectRelease();
        if (v51)
          goto LABEL_25;
        goto LABEL_28;
      }
    }
    sub_1B222A084();
    if (v51)
    {
LABEL_25:
      sub_1B222A084();
      goto LABEL_29;
    }
LABEL_28:
    sub_1B222A084();
    sub_1B222A09C();
LABEL_29:
    v33 = sub_1B222A0C0();
    v34 = -1 << *(_BYTE *)(v10 + 32);
    v35 = v33 & ~v34;
    v36 = v35 >> 6;
    if (((-1 << v35) & ~*(_QWORD *)(v15 + 8 * (v35 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v35) & ~*(_QWORD *)(v15 + 8 * (v35 >> 6)))) | v35 & 0x7FFFFFFFFFFFFFC0;
      v18 = v32;
    }
    else
    {
      v37 = (unint64_t)(63 - v34) >> 6;
      v18 = v32;
      do
      {
        if (v36 + 1 == v37)
          v36 = 0;
        else
          ++v36;
        v38 = *(_QWORD *)(v15 + 8 * v36);
      }
      while (v38 == -1);
      v17 = __clz(__rbit64(~v38)) + (v36 << 6);
    }
    *(_QWORD *)(v15 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v19 = *(_QWORD *)(v10 + 48) + 72 * v17;
    *(_QWORD *)v19 = v27;
    *(_QWORD *)(v19 + 8) = v26;
    *(_QWORD *)(v19 + 16) = v28;
    *(_QWORD *)(v19 + 24) = v29;
    *(_QWORD *)(v19 + 32) = v49;
    *(_QWORD *)(v19 + 40) = v30;
    *(_QWORD *)(v19 + 48) = v50;
    *(_QWORD *)(v19 + 56) = v31;
    *(_DWORD *)(v19 + 64) = v48;
    *(_BYTE *)(v19 + 68) = v51;
    *(_QWORD *)(*(_QWORD *)(v10 + 56) + 8 * v17) = v18;
    ++*(_QWORD *)(v10 + 16);
    v8 = v45;
    v16 = v47;
  }
  while (v41 != v16)
  {
    v23 = *(_QWORD *)(v8 + 8 * v16++ + 96);
    if (v23)
    {
      v22 = v16 + 3;
      goto LABEL_19;
    }
  }
LABEL_36:
  swift_release();
  v6 = v42;
  if ((v46 & 1) != 0)
  {
    v39 = 1 << *(_BYTE *)(v8 + 32);
    if (v39 >= 64)
      bzero(v43, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
    else
      *v43 = -1 << v39;
    *(_QWORD *)(v8 + 16) = 0;
  }
LABEL_41:
  result = swift_release();
  *v6 = v10;
  return result;
}

uint64_t sub_1B1EA17CC(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t result;
  unint64_t v35;
  _QWORD *v36;
  int64_t v37;
  uint64_t v38;
  char v39;

  v3 = v2;
  v5 = *v2;
  sub_1B1EB6248();
  v39 = a2;
  v6 = sub_1B22296C4();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_34;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v36 = (_QWORD *)(v5 + 64);
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v11 = (unint64_t)(v8 + 63) >> 6;
  v12 = v6 + 64;
  swift_retain();
  v13 = 0;
  v37 = v11;
  v38 = v5;
  v35 = v11 - 4;
  while (1)
  {
    if (v10)
    {
      v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v21 = v20 | (v13 << 6);
      goto LABEL_21;
    }
    v22 = v13 + 1;
    if (v13 + 1 >= v37)
      goto LABEL_29;
    v23 = v36[v22];
    if (!v23)
    {
      v22 = v13 + 2;
      if (v13 + 2 >= v37)
        goto LABEL_29;
      v23 = v36[v22];
      if (!v23)
      {
        v22 = v13 + 3;
        if (v13 + 3 >= v37)
          goto LABEL_29;
        v23 = v36[v22];
        if (!v23)
          break;
      }
    }
LABEL_20:
    v10 = (v23 - 1) & v23;
    v21 = __clz(__rbit64(v23)) + (v22 << 6);
    v13 = v22;
LABEL_21:
    v24 = *(_QWORD *)(v5 + 56);
    v25 = *(_QWORD *)(v5 + 48) + 32 * v21;
    v26 = *(_QWORD *)v25;
    v27 = *(_BYTE *)(v25 + 8);
    v29 = *(_QWORD *)(v25 + 16);
    v28 = *(_QWORD *)(v25 + 24);
    v30 = *(_QWORD *)(v24 + 8 * v21);
    if ((v39 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_retain();
    }
    sub_1B222A06C();
    swift_bridgeObjectRetain();
    sub_1B2228824();
    swift_bridgeObjectRelease();
    v14 = sub_1B222A0C0();
    v15 = -1 << *(_BYTE *)(v7 + 32);
    v16 = v14 & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v31 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (v17 + 1 == v31)
          v17 = 0;
        else
          ++v17;
        v32 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v32 == -1);
      v18 = __clz(__rbit64(~v32)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = *(_QWORD *)(v7 + 48) + 32 * v18;
    *(_QWORD *)v19 = v26;
    *(_BYTE *)(v19 + 8) = v27;
    *(_QWORD *)(v19 + 16) = v29;
    *(_QWORD *)(v19 + 24) = v28;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v18) = v30;
    ++*(_QWORD *)(v7 + 16);
    v5 = v38;
  }
  while (v35 != v13)
  {
    v23 = *(_QWORD *)(v5 + 8 * v13++ + 96);
    if (v23)
    {
      v22 = v13 + 3;
      goto LABEL_20;
    }
  }
LABEL_29:
  swift_release();
  v3 = v2;
  if ((v39 & 1) != 0)
  {
    v33 = 1 << *(_BYTE *)(v5 + 32);
    if (v33 >= 64)
      bzero(v36, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
    else
      *v36 = -1 << v33;
    *(_QWORD *)(v5 + 16) = 0;
  }
LABEL_34:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_1B1EA1ACC(uint64_t a1, char a2)
{
  return sub_1B1E9440C(a1, a2, (void (*)(_QWORD))sub_1B1EB6D38);
}

uint64_t sub_1B1EA1AD8(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t result;
  unint64_t v33;
  _QWORD *v34;
  int64_t v35;
  char v36;
  __int128 v37;

  v3 = v2;
  v5 = *v2;
  sub_1B1EB6164();
  v36 = a2;
  v6 = sub_1B22296C4();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_36;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v34 = (_QWORD *)(v5 + 64);
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v11 = (unint64_t)(v8 + 63) >> 6;
  v12 = v6 + 64;
  swift_retain();
  v13 = 0;
  v35 = v11;
  v33 = v11 - 4;
  while (1)
  {
    if (v10)
    {
      v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v17 = v16 | (v13 << 6);
      goto LABEL_20;
    }
    v18 = v13 + 1;
    if (v13 + 1 >= v35)
      goto LABEL_31;
    v19 = v34[v18];
    if (!v19)
    {
      v18 = v13 + 2;
      if (v13 + 2 >= v35)
        goto LABEL_31;
      v19 = v34[v18];
      if (!v19)
      {
        v18 = v13 + 3;
        if (v13 + 3 >= v35)
          goto LABEL_31;
        v19 = v34[v18];
        if (!v19)
          break;
      }
    }
LABEL_19:
    v10 = (v19 - 1) & v19;
    v17 = __clz(__rbit64(v19)) + (v18 << 6);
    v13 = v18;
LABEL_20:
    v20 = *(_QWORD *)(v5 + 48) + 32 * v17;
    v22 = *(_QWORD *)v20;
    v21 = *(_QWORD *)(v20 + 8);
    v23 = *(_QWORD *)(v20 + 16);
    v24 = *(unsigned __int8 *)(v20 + 24);
    v37 = *(_OWORD *)(*(_QWORD *)(v5 + 56) + 16 * v17);
    if ((v36 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_unknownObjectRetain();
    }
    sub_1B222A06C();
    sub_1B2228824();
    sub_1B222A084();
    if (!v24)
      sub_1B222A078();
    v25 = sub_1B222A0C0();
    v26 = -1 << *(_BYTE *)(v7 + 32);
    v27 = v25 & ~v26;
    v28 = v27 >> 6;
    if (((-1 << v27) & ~*(_QWORD *)(v12 + 8 * (v27 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1 << v27) & ~*(_QWORD *)(v12 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v29 = (unint64_t)(63 - v26) >> 6;
      do
      {
        if (v28 + 1 == v29)
          v28 = 0;
        else
          ++v28;
        v30 = *(_QWORD *)(v12 + 8 * v28);
      }
      while (v30 == -1);
      v14 = __clz(__rbit64(~v30)) + (v28 << 6);
    }
    *(_QWORD *)(v12 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    v15 = *(_QWORD *)(v7 + 48) + 32 * v14;
    *(_QWORD *)v15 = v22;
    *(_QWORD *)(v15 + 8) = v21;
    *(_QWORD *)(v15 + 16) = v23;
    *(_BYTE *)(v15 + 24) = v24;
    *(_OWORD *)(*(_QWORD *)(v7 + 56) + 16 * v14) = v37;
    ++*(_QWORD *)(v7 + 16);
  }
  while (v33 != v13)
  {
    v19 = *(_QWORD *)(v5 + 8 * v13++ + 96);
    if (v19)
    {
      v18 = v13 + 3;
      goto LABEL_19;
    }
  }
LABEL_31:
  swift_release();
  v3 = v2;
  if ((v36 & 1) != 0)
  {
    v31 = 1 << *(_BYTE *)(v5 + 32);
    if (v31 >= 64)
      bzero(v34, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
    else
      *v34 = -1 << v31;
    *(_QWORD *)(v5 + 16) = 0;
  }
LABEL_36:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_1B1EA1DF4(uint64_t a1, char a2)
{
  return sub_1B1EA2B40(a1, a2, (void (*)(_QWORD))sub_1B1B9D634);
}

uint64_t sub_1B1EA1E00(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t result;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  char v33;

  v3 = v2;
  v5 = *v2;
  sub_1B1EB6DB4(0, (unint64_t *)&qword_1EEF5B4B0);
  v6 = sub_1B22296C4();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_33;
  v33 = a2;
  v8 = 0;
  v9 = (uint64_t *)(v5 + 64);
  v10 = 1 << *(_BYTE *)(v5 + 32);
  v30 = -1 << v10;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  else
    v11 = -1;
  v12 = v11 & *(_QWORD *)(v5 + 64);
  v31 = 1 << *(_BYTE *)(v5 + 32);
  v32 = v3;
  v13 = (unint64_t)(v10 + 63) >> 6;
  v14 = v6 + 64;
  while (1)
  {
    if (v12)
    {
      v17 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v18 = v17 | (v8 << 6);
      goto LABEL_20;
    }
    v19 = v8 + 1;
    if (v8 + 1 >= v13)
      goto LABEL_27;
    v20 = v9[v19];
    if (!v20)
    {
      v19 = v8 + 2;
      if (v8 + 2 >= v13)
        goto LABEL_27;
      v20 = v9[v19];
      if (!v20)
      {
        v19 = v8 + 3;
        if (v8 + 3 >= v13)
          goto LABEL_27;
        v20 = v9[v19];
        if (!v20)
          break;
      }
    }
LABEL_19:
    v12 = (v20 - 1) & v20;
    v18 = __clz(__rbit64(v20)) + (v19 << 6);
    v8 = v19;
LABEL_20:
    v21 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v18);
    v22 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v18);
    v23 = sub_1B222A060();
    v24 = -1 << *(_BYTE *)(v7 + 32);
    v25 = v23 & ~v24;
    v26 = v25 >> 6;
    if (((-1 << v25) & ~*(_QWORD *)(v14 + 8 * (v25 >> 6))) != 0)
    {
      v15 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v14 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (v26 + 1 == v27)
          v26 = 0;
        else
          ++v26;
        v28 = *(_QWORD *)(v14 + 8 * v26);
      }
      while (v28 == -1);
      v15 = __clz(__rbit64(~v28)) + (v26 << 6);
    }
    *(_QWORD *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    v16 = 8 * v15;
    *(_QWORD *)(*(_QWORD *)(v7 + 48) + v16) = v21;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + v16) = v22;
    ++*(_QWORD *)(v7 + 16);
  }
  while (v13 - 4 != v8)
  {
    v20 = *(_QWORD *)(v5 + 96 + 8 * v8++);
    if (v20)
    {
      v19 = v8 + 3;
      goto LABEL_19;
    }
  }
LABEL_27:
  if ((v33 & 1) != 0)
  {
    v3 = v32;
    if (v31 >= 64)
      bzero((void *)(v5 + 64), 8 * v13);
    else
      *v9 = v30;
    *(_QWORD *)(v5 + 16) = 0;
LABEL_33:
    result = swift_release();
  }
  else
  {
    result = swift_release();
    v3 = v32;
  }
  *v3 = v7;
  return result;
}

uint64_t sub_1B1EA2094(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t result;
  unint64_t v35;
  _QWORD *v36;
  int64_t v37;
  char v38;
  __int128 v39;

  v3 = v2;
  v5 = *v2;
  sub_1B1EB6DB4(0, (unint64_t *)&qword_1EEF5B5B0);
  v38 = a2;
  v6 = sub_1B22296C4();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_34;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v36 = (_QWORD *)(v5 + 64);
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v11 = (unint64_t)(v8 + 63) >> 6;
  v12 = v6 + 64;
  swift_retain();
  v13 = 0;
  v37 = v11;
  v35 = v11 - 4;
  while (1)
  {
    if (v10)
    {
      v21 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v22 = v21 | (v13 << 6);
      goto LABEL_21;
    }
    v23 = v13 + 1;
    if (v13 + 1 >= v37)
      goto LABEL_29;
    v24 = v36[v23];
    if (!v24)
    {
      v23 = v13 + 2;
      if (v13 + 2 >= v37)
        goto LABEL_29;
      v24 = v36[v23];
      if (!v24)
      {
        v23 = v13 + 3;
        if (v13 + 3 >= v37)
          goto LABEL_29;
        v24 = v36[v23];
        if (!v24)
          break;
      }
    }
LABEL_20:
    v10 = (v24 - 1) & v24;
    v22 = __clz(__rbit64(v24)) + (v23 << 6);
    v13 = v23;
LABEL_21:
    v25 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v22);
    v27 = *v25;
    v26 = v25[1];
    v28 = *(_QWORD *)(v5 + 56) + 32 * v22;
    v29 = *(_QWORD *)v28;
    v39 = *(_OWORD *)(v28 + 8);
    v30 = *(_QWORD *)(v28 + 24);
    if ((v38 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_unknownObjectRetain();
    }
    sub_1B222A06C();
    sub_1B2228824();
    v14 = sub_1B222A0C0();
    v15 = -1 << *(_BYTE *)(v7 + 32);
    v16 = v14 & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v31 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (v17 + 1 == v31)
          v17 = 0;
        else
          ++v17;
        v32 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v32 == -1);
      v18 = __clz(__rbit64(~v32)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v18);
    *v19 = v27;
    v19[1] = v26;
    v20 = *(_QWORD *)(v7 + 56) + 32 * v18;
    *(_QWORD *)v20 = v29;
    *(_OWORD *)(v20 + 8) = v39;
    *(_QWORD *)(v20 + 24) = v30;
    ++*(_QWORD *)(v7 + 16);
  }
  while (v35 != v13)
  {
    v24 = *(_QWORD *)(v5 + 8 * v13++ + 96);
    if (v24)
    {
      v23 = v13 + 3;
      goto LABEL_20;
    }
  }
LABEL_29:
  swift_release();
  v3 = v2;
  if ((v38 & 1) != 0)
  {
    v33 = 1 << *(_BYTE *)(v5 + 32);
    if (v33 >= 64)
      bzero(v36, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
    else
      *v36 = -1 << v33;
    *(_QWORD *)(v5 + 16) = 0;
  }
LABEL_34:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_1B1EA23B0(uint64_t a1, char a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  _QWORD *v25;
  uint64_t v26;
  int64_t v27;
  _QWORD *v28;

  v3 = v2;
  v5 = type metadata accessor for TextureCache.TextureKey();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v2;
  sub_1B1EB5E4C();
  v11 = (_QWORD *)sub_1B22296C4();
  if (!*(_QWORD *)(v10 + 16))
    goto LABEL_27;
  v25 = v3;
  v12 = 1 << *(_BYTE *)(v10 + 32);
  v13 = *(_QWORD *)(v10 + 64);
  v28 = (_QWORD *)(v10 + 64);
  v14 = -1;
  if (v12 < 64)
    v14 = ~(-1 << v12);
  v15 = v14 & v13;
  v16 = (unint64_t)(v12 + 63) >> 6;
  swift_retain();
  v17 = 0;
  v26 = v10 + 96;
  v27 = v16 - 4;
  while (1)
  {
    if (v15)
    {
      v18 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v19 = v18 | (v17 << 6);
      goto LABEL_19;
    }
    v20 = v17 + 1;
    if (v17 + 1 >= v16)
      goto LABEL_21;
    v21 = v28[v20];
    if (!v21)
    {
      v20 = v17 + 2;
      if (v17 + 2 >= v16)
        goto LABEL_21;
      v21 = v28[v20];
      if (!v21)
      {
        v20 = v17 + 3;
        if (v17 + 3 >= v16)
          goto LABEL_21;
        v21 = v28[v20];
        if (!v21)
          break;
      }
    }
LABEL_18:
    v15 = (v21 - 1) & v21;
    v19 = __clz(__rbit64(v21)) + (v20 << 6);
    v17 = v20;
LABEL_19:
    v22 = *(_QWORD *)(v10 + 48) + *(_QWORD *)(v6 + 72) * v19;
    if ((a2 & 1) != 0)
      sub_1B1A025EC(v22, (uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for TextureCache.TextureKey);
    else
      sub_1B1792810(v22, (uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for TextureCache.TextureKey);
    sub_1B1EA3DC4((uint64_t)v9, *(_QWORD *)(*(_QWORD *)(v10 + 56) + 8 * v19), v11);
  }
  while (v27 != v17)
  {
    v21 = *(_QWORD *)(v26 + 8 * v17++);
    if (v21)
    {
      v20 = v17 + 3;
      goto LABEL_18;
    }
  }
LABEL_21:
  swift_release();
  if ((a2 & 1) != 0)
  {
    v23 = 1 << *(_BYTE *)(v10 + 32);
    v3 = v25;
    if (v23 >= 64)
      bzero(v28, ((unint64_t)(v23 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
    else
      *v28 = -1 << v23;
    *(_QWORD *)(v10 + 16) = 0;
LABEL_27:
    result = swift_release();
  }
  else
  {
    result = swift_release();
    v3 = v25;
  }
  *v3 = v11;
  return result;
}

uint64_t sub_1B1EA2608(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t result;
  uint64_t v29;
  uint64_t v30;
  int64_t v31;

  v3 = v2;
  v5 = *v2;
  sub_1B1EB6DB4(0, (unint64_t *)&qword_1ED4B7A48);
  v6 = sub_1B22296C4();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_35;
  v8 = 0;
  v9 = (uint64_t *)(v5 + 64);
  v10 = 1 << *(_BYTE *)(v5 + 32);
  v29 = -1 << v10;
  v30 = v10;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  else
    v11 = -1;
  v12 = v11 & *(_QWORD *)(v5 + 64);
  v13 = v6 + 64;
  v31 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v20 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v21 = v20 | (v8 << 6);
      goto LABEL_21;
    }
    v22 = v8 + 1;
    if (v8 + 1 >= v31)
      goto LABEL_29;
    v23 = v9[v22];
    if (!v23)
    {
      v22 = v8 + 2;
      if (v8 + 2 >= v31)
        goto LABEL_29;
      v23 = v9[v22];
      if (!v23)
      {
        v22 = v8 + 3;
        if (v8 + 3 >= v31)
          goto LABEL_29;
        v23 = v9[v22];
        if (!v23)
          break;
      }
    }
LABEL_20:
    v12 = (v23 - 1) & v23;
    v21 = __clz(__rbit64(v23)) + (v22 << 6);
    v8 = v22;
LABEL_21:
    v24 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v21);
    v25 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v21);
    if ((a2 & 1) == 0)
      swift_bridgeObjectRetain();
    v14 = sub_1B222A060();
    v15 = -1 << *(_BYTE *)(v7 + 32);
    v16 = v14 & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v13 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v13 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (v17 + 1 == v26)
          v17 = 0;
        else
          ++v17;
        v27 = *(_QWORD *)(v13 + 8 * v17);
      }
      while (v27 == -1);
      v18 = __clz(__rbit64(~v27)) + (v17 << 6);
    }
    *(_QWORD *)(v13 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = 8 * v18;
    *(_QWORD *)(*(_QWORD *)(v7 + 48) + v19) = v24;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + v19) = v25;
    ++*(_QWORD *)(v7 + 16);
  }
  while (v31 - 4 != v8)
  {
    v23 = *(_QWORD *)(v5 + 96 + 8 * v8++);
    if (v23)
    {
      v22 = v8 + 3;
      goto LABEL_20;
    }
  }
LABEL_29:
  if ((a2 & 1) != 0)
  {
    if (v30 >= 64)
      bzero((void *)(v5 + 64), 8 * v31);
    else
      *v9 = v29;
    *(_QWORD *)(v5 + 16) = 0;
  }
LABEL_35:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_1B1EA28B8(uint64_t a1, char a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  _QWORD *v26;
  uint64_t v27;
  int64_t v28;
  _BYTE v29[168];

  v3 = v2;
  v5 = type metadata accessor for TextureCache.TextureKey();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v2;
  sub_1B1B9C0A8();
  v11 = (_QWORD *)sub_1B22296C4();
  if (!*(_QWORD *)(v10 + 16))
    goto LABEL_27;
  v26 = v3;
  v12 = 1 << *(_BYTE *)(v10 + 32);
  v13 = (_QWORD *)(v10 + 64);
  v14 = -1;
  if (v12 < 64)
    v14 = ~(-1 << v12);
  v15 = v14 & *(_QWORD *)(v10 + 64);
  v16 = (unint64_t)(v12 + 63) >> 6;
  swift_retain();
  v17 = 0;
  v28 = v16 - 4;
  v27 = v10 + 96;
  while (1)
  {
    if (v15)
    {
      v18 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v19 = v18 | (v17 << 6);
      goto LABEL_19;
    }
    v20 = v17 + 1;
    if (v17 + 1 >= v16)
      goto LABEL_21;
    v21 = v13[v20];
    if (!v21)
    {
      v20 = v17 + 2;
      if (v17 + 2 >= v16)
        goto LABEL_21;
      v21 = v13[v20];
      if (!v21)
      {
        v20 = v17 + 3;
        if (v17 + 3 >= v16)
          goto LABEL_21;
        v21 = v13[v20];
        if (!v21)
          break;
      }
    }
LABEL_18:
    v15 = (v21 - 1) & v21;
    v19 = __clz(__rbit64(v21)) + (v20 << 6);
    v17 = v20;
LABEL_19:
    v22 = *(_QWORD *)(v10 + 48) + *(_QWORD *)(v6 + 72) * v19;
    v23 = 160 * v19;
    if ((a2 & 1) != 0)
    {
      sub_1B1A025EC(v22, (uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for TextureCache.TextureKey);
      sub_1B1B9C128(*(_QWORD *)(v10 + 56) + v23, (uint64_t)v29);
    }
    else
    {
      sub_1B1792810(v22, (uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for TextureCache.TextureKey);
      sub_1B1C1AA1C(*(_QWORD *)(v10 + 56) + v23, (uint64_t)v29);
    }
    sub_1B1EA4010((uint64_t)v9, (uint64_t)v29, v11);
  }
  while (v28 != v17)
  {
    v21 = *(_QWORD *)(v27 + 8 * v17++);
    if (v21)
    {
      v20 = v17 + 3;
      goto LABEL_18;
    }
  }
LABEL_21:
  swift_release();
  if ((a2 & 1) != 0)
  {
    v24 = 1 << *(_BYTE *)(v10 + 32);
    v3 = v26;
    if (v24 >= 64)
      bzero((void *)(v10 + 64), ((unint64_t)(v24 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
    else
      *v13 = -1 << v24;
    *(_QWORD *)(v10 + 16) = 0;
LABEL_27:
    result = swift_release();
  }
  else
  {
    result = swift_release();
    v3 = v26;
  }
  *v3 = v11;
  return result;
}

uint64_t sub_1B1EA2B34(uint64_t a1, char a2)
{
  return sub_1B1EA2B40(a1, a2, (void (*)(_QWORD))sub_1B1B9B000);
}

uint64_t sub_1B1EA2B40(uint64_t a1, char a2, void (*a3)(_QWORD))
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t result;
  _QWORD *v31;
  __int128 v32;

  v4 = v3;
  v6 = *v3;
  a3(0);
  v7 = sub_1B22296C4();
  v9 = v7;
  if (!*(_QWORD *)(v6 + 16))
    goto LABEL_35;
  v10 = 0;
  v11 = 1 << *(_BYTE *)(v6 + 32);
  if (v11 < 64)
    v12 = ~(-1 << v11);
  else
    v12 = -1;
  v13 = v12 & *(_QWORD *)(v6 + 64);
  v14 = (unint64_t)(v11 + 63) >> 6;
  v15 = v7 + 64;
  v31 = (_QWORD *)(v6 + 64);
  while (1)
  {
    if (v13)
    {
      v22 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v23 = v22 | (v10 << 6);
      goto LABEL_21;
    }
    v24 = v10 + 1;
    if (v10 + 1 >= v14)
      goto LABEL_29;
    v25 = v31[v24];
    if (!v25)
    {
      v24 = v10 + 2;
      if (v10 + 2 >= v14)
        goto LABEL_29;
      v25 = v31[v24];
      if (!v25)
      {
        v24 = v10 + 3;
        if (v10 + 3 >= v14)
          goto LABEL_29;
        v25 = v31[v24];
        if (!v25)
          break;
      }
    }
LABEL_20:
    v13 = (v25 - 1) & v25;
    v23 = __clz(__rbit64(v25)) + (v24 << 6);
    v10 = v24;
LABEL_21:
    *(_QWORD *)&v8 = *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v23);
    v32 = v8;
    v26 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v23);
    if ((a2 & 1) == 0)
      swift_bridgeObjectRetain();
    sub_1B222A06C();
    sub_1B222A09C();
    sub_1B222A09C();
    v16 = sub_1B222A0C0();
    v17 = -1 << *(_BYTE *)(v9 + 32);
    v18 = v16 & ~v17;
    v19 = v18 >> 6;
    if (((-1 << v18) & ~*(_QWORD *)(v15 + 8 * (v18 >> 6))) != 0)
    {
      v20 = __clz(__rbit64((-1 << v18) & ~*(_QWORD *)(v15 + 8 * (v18 >> 6)))) | v18 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = (unint64_t)(63 - v17) >> 6;
      do
      {
        if (v19 + 1 == v27)
          v19 = 0;
        else
          ++v19;
        v28 = *(_QWORD *)(v15 + 8 * v19);
      }
      while (v28 == -1);
      v20 = __clz(__rbit64(~v28)) + (v19 << 6);
    }
    *(_QWORD *)(v15 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
    v21 = 8 * v20;
    *((_QWORD *)&v8 + 1) = *((_QWORD *)&v32 + 1);
    *(_QWORD *)(*(_QWORD *)(v9 + 48) + v21) = v32;
    *(_QWORD *)(*(_QWORD *)(v9 + 56) + v21) = v26;
    ++*(_QWORD *)(v9 + 16);
  }
  while (v14 - 4 != v10)
  {
    v25 = *(_QWORD *)(v6 + 96 + 8 * v10++);
    if (v25)
    {
      v24 = v10 + 3;
      goto LABEL_20;
    }
  }
LABEL_29:
  if ((a2 & 1) != 0)
  {
    v29 = 1 << *(_BYTE *)(v6 + 32);
    v4 = v3;
    if (v29 >= 64)
      bzero(v31, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
    else
      *v31 = -1 << v29;
    *(_QWORD *)(v6 + 16) = 0;
LABEL_35:
    result = swift_release();
  }
  else
  {
    result = swift_release();
    v4 = v3;
  }
  *v4 = v9;
  return result;
}

uint64_t sub_1B1EA2E14(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t result;
  _QWORD *v30;
  int64_t v31;
  char v32;
  __int128 v33;

  v3 = v2;
  v5 = *v2;
  sub_1B1EB5DEC();
  v32 = a2;
  v6 = sub_1B22296C4();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_35;
  v8 = 0;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v12 = v6 + 64;
  v30 = (_QWORD *)(v5 + 64);
  v31 = (unint64_t)(v9 + 63) >> 6;
  while (1)
  {
    if (v11)
    {
      v19 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v20 = v19 | (v8 << 6);
      goto LABEL_21;
    }
    v21 = v8 + 1;
    if (v8 + 1 >= v31)
      goto LABEL_29;
    v22 = v30[v21];
    if (!v22)
    {
      v21 = v8 + 2;
      if (v8 + 2 >= v31)
        goto LABEL_29;
      v22 = v30[v21];
      if (!v22)
      {
        v21 = v8 + 3;
        if (v8 + 3 >= v31)
          goto LABEL_29;
        v22 = v30[v21];
        if (!v22)
          break;
      }
    }
LABEL_20:
    v11 = (v22 - 1) & v22;
    v20 = __clz(__rbit64(v22)) + (v21 << 6);
    v8 = v21;
LABEL_21:
    v23 = *(_BYTE *)(*(_QWORD *)(v5 + 48) + v20);
    v24 = *(_QWORD *)(v5 + 56) + 24 * v20;
    v25 = *(_QWORD *)v24;
    v33 = *(_OWORD *)(v24 + 8);
    if ((v32 & 1) == 0)
      swift_unknownObjectRetain();
    sub_1B222A06C();
    sub_1B222A084();
    v13 = sub_1B222A0C0();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = v13 & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v12 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v12 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (v16 + 1 == v26)
          v16 = 0;
        else
          ++v16;
        v27 = *(_QWORD *)(v12 + 8 * v16);
      }
      while (v27 == -1);
      v17 = __clz(__rbit64(~v27)) + (v16 << 6);
    }
    *(_QWORD *)(v12 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    *(_BYTE *)(*(_QWORD *)(v7 + 48) + v17) = v23;
    v18 = *(_QWORD *)(v7 + 56) + 24 * v17;
    *(_QWORD *)v18 = v25;
    *(_OWORD *)(v18 + 8) = v33;
    ++*(_QWORD *)(v7 + 16);
  }
  while (v31 - 4 != v8)
  {
    v22 = *(_QWORD *)(v5 + 96 + 8 * v8++);
    if (v22)
    {
      v21 = v8 + 3;
      goto LABEL_20;
    }
  }
LABEL_29:
  if ((v32 & 1) != 0)
  {
    v28 = 1 << *(_BYTE *)(v5 + 32);
    v3 = v2;
    if (v28 >= 64)
      bzero(v30, ((unint64_t)(v28 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
    else
      *v30 = -1 << v28;
    *(_QWORD *)(v5 + 16) = 0;
LABEL_35:
    result = swift_release();
  }
  else
  {
    result = swift_release();
    v3 = v2;
  }
  *v3 = v7;
  return result;
}

uint64_t sub_1B1EA30F8(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t result;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  char v32;

  v3 = v2;
  v5 = *v2;
  sub_1B1EB6DB4(0, (unint64_t *)&qword_1ED4BA9F0);
  v6 = sub_1B22296C4();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_33;
  v32 = a2;
  v8 = 0;
  v9 = (uint64_t *)(v5 + 64);
  v10 = 1 << *(_BYTE *)(v5 + 32);
  v29 = -1 << v10;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  else
    v11 = -1;
  v12 = v11 & *(_QWORD *)(v5 + 64);
  v30 = 1 << *(_BYTE *)(v5 + 32);
  v31 = v3;
  v13 = (unint64_t)(v10 + 63) >> 6;
  v14 = v6 + 64;
  while (1)
  {
    if (v12)
    {
      v16 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v17 = v16 | (v8 << 6);
      goto LABEL_20;
    }
    v18 = v8 + 1;
    if (v8 + 1 >= v13)
      goto LABEL_27;
    v19 = v9[v18];
    if (!v19)
    {
      v18 = v8 + 2;
      if (v8 + 2 >= v13)
        goto LABEL_27;
      v19 = v9[v18];
      if (!v19)
      {
        v18 = v8 + 3;
        if (v8 + 3 >= v13)
          goto LABEL_27;
        v19 = v9[v18];
        if (!v19)
          break;
      }
    }
LABEL_19:
    v12 = (v19 - 1) & v19;
    v17 = __clz(__rbit64(v19)) + (v18 << 6);
    v8 = v18;
LABEL_20:
    v20 = *(_DWORD *)(*(_QWORD *)(v5 + 48) + 4 * v17);
    v21 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v17);
    v22 = MEMORY[0x1B5E21C00](*(_QWORD *)(v7 + 40), v20, 4);
    v23 = -1 << *(_BYTE *)(v7 + 32);
    v24 = v22 & ~v23;
    v25 = v24 >> 6;
    if (((-1 << v24) & ~*(_QWORD *)(v14 + 8 * (v24 >> 6))) != 0)
    {
      v15 = __clz(__rbit64((-1 << v24) & ~*(_QWORD *)(v14 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (v25 + 1 == v26)
          v25 = 0;
        else
          ++v25;
        v27 = *(_QWORD *)(v14 + 8 * v25);
      }
      while (v27 == -1);
      v15 = __clz(__rbit64(~v27)) + (v25 << 6);
    }
    *(_QWORD *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    *(_DWORD *)(*(_QWORD *)(v7 + 48) + 4 * v15) = v20;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v15) = v21;
    ++*(_QWORD *)(v7 + 16);
  }
  while (v13 - 4 != v8)
  {
    v19 = *(_QWORD *)(v5 + 96 + 8 * v8++);
    if (v19)
    {
      v18 = v8 + 3;
      goto LABEL_19;
    }
  }
LABEL_27:
  if ((v32 & 1) != 0)
  {
    v3 = v31;
    if (v30 >= 64)
      bzero((void *)(v5 + 64), 8 * v13);
    else
      *v9 = v29;
    *(_QWORD *)(v5 + 16) = 0;
LABEL_33:
    result = swift_release();
  }
  else
  {
    result = swift_release();
    v3 = v31;
  }
  *v3 = v7;
  return result;
}

uint64_t sub_1B1EA338C(uint64_t a1, char a2)
{
  return sub_1B1EA33A0(a1, a2, (unint64_t *)&qword_1ED4BA938);
}

uint64_t sub_1B1EA33A0(uint64_t a1, char a2, unint64_t *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t result;
  uint64_t *v33;
  _QWORD *v34;
  char v35;

  v4 = v3;
  v6 = *v3;
  sub_1B1EB6DB4(0, a3);
  v35 = a2;
  v7 = sub_1B22296C4();
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
    goto LABEL_34;
  v9 = 1 << *(_BYTE *)(v6 + 32);
  v33 = v3;
  v34 = (_QWORD *)(v6 + 64);
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v6 + 64);
  v12 = (unint64_t)(v9 + 63) >> 6;
  v13 = v7 + 64;
  swift_retain();
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v21 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v22 = v21 | (v14 << 6);
      goto LABEL_21;
    }
    v23 = v14 + 1;
    if (v14 + 1 >= v12)
      goto LABEL_29;
    v24 = v34[v23];
    if (!v24)
    {
      v23 = v14 + 2;
      if (v14 + 2 >= v12)
        goto LABEL_29;
      v24 = v34[v23];
      if (!v24)
      {
        v23 = v14 + 3;
        if (v14 + 3 >= v12)
          goto LABEL_29;
        v24 = v34[v23];
        if (!v24)
          break;
      }
    }
LABEL_20:
    v11 = (v24 - 1) & v24;
    v22 = __clz(__rbit64(v24)) + (v23 << 6);
    v14 = v23;
LABEL_21:
    v25 = (uint64_t *)(*(_QWORD *)(v6 + 48) + 16 * v22);
    v27 = *v25;
    v26 = v25[1];
    v28 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v22);
    if ((v35 & 1) == 0)
      swift_bridgeObjectRetain();
    sub_1B222A06C();
    sub_1B2228824();
    v15 = sub_1B222A0C0();
    v16 = -1 << *(_BYTE *)(v8 + 32);
    v17 = v15 & ~v16;
    v18 = v17 >> 6;
    if (((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v29 = (unint64_t)(63 - v16) >> 6;
      do
      {
        if (v18 + 1 == v29)
          v18 = 0;
        else
          ++v18;
        v30 = *(_QWORD *)(v13 + 8 * v18);
      }
      while (v30 == -1);
      v19 = __clz(__rbit64(~v30)) + (v18 << 6);
    }
    *(_QWORD *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    v20 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v19);
    *v20 = v27;
    v20[1] = v26;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v19) = v28;
    ++*(_QWORD *)(v8 + 16);
  }
  while (v12 - 4 != v14)
  {
    v24 = *(_QWORD *)(v6 + 8 * v14++ + 96);
    if (v24)
    {
      v23 = v14 + 3;
      goto LABEL_20;
    }
  }
LABEL_29:
  swift_release();
  v4 = v33;
  if ((v35 & 1) != 0)
  {
    v31 = 1 << *(_BYTE *)(v6 + 32);
    if (v31 >= 64)
      bzero(v34, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
    else
      *v34 = -1 << v31;
    *(_QWORD *)(v6 + 16) = 0;
  }
LABEL_34:
  result = swift_release();
  *v4 = v8;
  return result;
}

uint64_t sub_1B1EA3688(uint64_t a1, int a2)
{
  return sub_1B1EA3694(a1, a2, (void (*)(_QWORD, __n128))sub_1B1EB6A60);
}

uint64_t sub_1B1EA3694(uint64_t a1, int a2, void (*a3)(_QWORD, __n128))
{
  uint64_t *v3;
  uint64_t *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t result;
  unint64_t v39;
  uint64_t *v40;
  _QWORD *v41;
  int64_t v42;
  uint64_t v43;
  int v44;

  v5 = v3;
  v7 = sub_1B222826C();
  v8 = *(_QWORD *)(v7 - 8);
  v10.n128_f64[0] = MEMORY[0x1E0C80A78](v7, v9);
  v12 = (char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *v3;
  a3(0, v10);
  v44 = a2;
  v14 = sub_1B22296C4();
  v15 = v14;
  if (!*(_QWORD *)(v13 + 16))
    goto LABEL_35;
  v16 = 1 << *(_BYTE *)(v13 + 32);
  v17 = *(_QWORD *)(v13 + 64);
  v40 = v3;
  v41 = (_QWORD *)(v13 + 64);
  if (v16 < 64)
    v18 = ~(-1 << v16);
  else
    v18 = -1;
  v19 = v18 & v17;
  v20 = (unint64_t)(v16 + 63) >> 6;
  v21 = v14 + 64;
  swift_retain();
  v22 = 0;
  v42 = v20;
  v43 = v13;
  v39 = v20 - 4;
  while (1)
  {
    if (v19)
    {
      v24 = __clz(__rbit64(v19));
      v19 &= v19 - 1;
      v25 = v24 | (v22 << 6);
      goto LABEL_20;
    }
    v26 = v22 + 1;
    if (v22 + 1 >= v42)
      goto LABEL_30;
    v27 = v41[v26];
    if (!v27)
    {
      v26 = v22 + 2;
      if (v22 + 2 >= v42)
        goto LABEL_30;
      v27 = v41[v26];
      if (!v27)
      {
        v26 = v22 + 3;
        if (v22 + 3 >= v42)
          goto LABEL_30;
        v27 = v41[v26];
        if (!v27)
          break;
      }
    }
LABEL_19:
    v19 = (v27 - 1) & v27;
    v25 = __clz(__rbit64(v27)) + (v26 << 6);
    v22 = v26;
LABEL_20:
    v28 = *(_QWORD *)(v8 + 72);
    v29 = *(_QWORD *)(v13 + 48) + v28 * v25;
    if ((v44 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v8 + 32))(v12, v29, v7);
      v30 = *(_QWORD *)(*(_QWORD *)(v13 + 56) + 8 * v25);
    }
    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v8 + 16))(v12, v29, v7);
      v30 = *(_QWORD *)(*(_QWORD *)(v13 + 56) + 8 * v25);
      swift_retain();
    }
    sub_1B19E52CC((unint64_t *)&qword_1ED4B7B38, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
    v31 = sub_1B22285D8();
    v32 = -1 << *(_BYTE *)(v15 + 32);
    v33 = v31 & ~v32;
    v34 = v33 >> 6;
    if (((-1 << v33) & ~*(_QWORD *)(v21 + 8 * (v33 >> 6))) != 0)
    {
      v23 = __clz(__rbit64((-1 << v33) & ~*(_QWORD *)(v21 + 8 * (v33 >> 6)))) | v33 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v35 = (unint64_t)(63 - v32) >> 6;
      do
      {
        if (v34 + 1 == v35)
          v34 = 0;
        else
          ++v34;
        v36 = *(_QWORD *)(v21 + 8 * v34);
      }
      while (v36 == -1);
      v23 = __clz(__rbit64(~v36)) + (v34 << 6);
    }
    *(_QWORD *)(v21 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(*(_QWORD *)(v15 + 48) + v28 * v23, v12, v7);
    *(_QWORD *)(*(_QWORD *)(v15 + 56) + 8 * v23) = v30;
    ++*(_QWORD *)(v15 + 16);
    v13 = v43;
  }
  while (v39 != v22)
  {
    v27 = *(_QWORD *)(v13 + 8 * v22++ + 96);
    if (v27)
    {
      v26 = v22 + 3;
      goto LABEL_19;
    }
  }
LABEL_30:
  swift_release();
  v5 = v40;
  if ((v44 & 1) != 0)
  {
    v37 = 1 << *(_BYTE *)(v13 + 32);
    if (v37 >= 64)
      bzero(v41, ((unint64_t)(v37 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
    else
      *v41 = -1 << v37;
    *(_QWORD *)(v13 + 16) = 0;
  }
LABEL_35:
  result = swift_release();
  *v5 = v15;
  return result;
}

uint64_t sub_1B1EA39F4(uint64_t a1, char a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t result;
  _QWORD *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  char v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;

  v3 = v2;
  v5 = *v2;
  sub_1B1B9BE20();
  v6 = (_QWORD *)sub_1B22296C4();
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_25;
  v29 = v3;
  v7 = 1 << *(_BYTE *)(v5 + 32);
  v8 = (_QWORD *)(v5 + 64);
  v9 = -1;
  if (v7 < 64)
    v9 = ~(-1 << v7);
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v11 = (unint64_t)(v7 + 63) >> 6;
  swift_retain();
  v12 = 0;
  while (1)
  {
    if (v10)
    {
      v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v14 = v13 | (v12 << 6);
      goto LABEL_18;
    }
    v15 = v12 + 1;
    if (v12 + 1 >= v11)
      goto LABEL_20;
    v16 = v8[v15];
    if (!v16)
    {
      v15 = v12 + 2;
      if (v12 + 2 >= v11)
        goto LABEL_20;
      v16 = v8[v15];
      if (!v16)
      {
        v15 = v12 + 3;
        if (v12 + 3 >= v11)
          goto LABEL_20;
        v16 = v8[v15];
        if (!v16)
          break;
      }
    }
LABEL_17:
    v10 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v15 << 6);
    v12 = v15;
LABEL_18:
    v17 = *(_QWORD *)(v5 + 48) + 96 * v14;
    v18 = *(_QWORD *)v17;
    v19 = *(_BYTE *)(v17 + 8);
    v21 = *(_OWORD *)(v17 + 16);
    v20 = *(_OWORD *)(v17 + 32);
    v22 = *(_QWORD *)(v17 + 48);
    v23 = *(_OWORD *)(v17 + 56);
    v24 = *(_OWORD *)(v17 + 72);
    v25 = *(_QWORD *)(v17 + 88);
    v26 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v14);
    if ((a2 & 1) == 0)
    {
      v32 = *(_OWORD *)(v17 + 56);
      v33 = *(_OWORD *)(v17 + 72);
      v30 = *(_OWORD *)(v17 + 16);
      v31 = *(_OWORD *)(v17 + 32);
      swift_unknownObjectRetain();
      v21 = v30;
      v20 = v31;
      v23 = v32;
      v24 = v33;
    }
    v34 = v18;
    v35 = v19;
    v36 = v21;
    v37 = v20;
    v38 = v22;
    v39 = v23;
    v40 = v24;
    v41 = v25;
    sub_1B1EA4268((uint64_t)&v34, v26, v6);
  }
  while (v11 - 4 != v12)
  {
    v16 = *(_QWORD *)(v5 + 96 + 8 * v12++);
    if (v16)
    {
      v15 = v12 + 3;
      goto LABEL_17;
    }
  }
LABEL_20:
  swift_release();
  v3 = v29;
  if ((a2 & 1) != 0)
  {
    v27 = 1 << *(_BYTE *)(v5 + 32);
    if (v27 > 63)
      bzero((void *)(v5 + 64), ((unint64_t)(v27 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
    else
      *v8 = -1 << v27;
    *(_QWORD *)(v5 + 16) = 0;
  }
LABEL_25:
  result = swift_release();
  *v3 = v6;
  return result;
}

void sub_1B1EA3C30(char a1)
{
  sub_1B222A06C();
  __asm { BR              X10 }
}

uint64_t sub_1B1EA3C88()
{
  __int16 v0;
  uint64_t v1;

  sub_1B2228824();
  v1 = swift_bridgeObjectRelease();
  return ((uint64_t (*)(uint64_t, uint64_t))((char *)sub_1B1EA3D00 + 4 * byte_1B229CC0C[HIBYTE(v0)]))(v1, 0x34365F363878);
}

unint64_t sub_1B1EA3D00()
{
  _QWORD *v0;
  uint64_t v1;
  __int16 v2;
  unint64_t result;

  sub_1B2228824();
  swift_bridgeObjectRelease();
  sub_1B222A0C0();
  result = sub_1B222937C();
  *(_QWORD *)((char *)v0 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
  *(_WORD *)(v0[6] + 2 * result) = v2;
  *(_QWORD *)(v0[7] + 8 * result) = v1;
  ++v0[2];
  return result;
}

uint64_t sub_1B1EA3DC4(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  __int16 v8;
  unint64_t v9;
  uint64_t result;

  sub_1B222A06C();
  sub_1B222A078();
  v5 = type metadata accessor for TextureCache.TextureKey();
  sub_1B2228110();
  sub_1B19E52CC((unint64_t *)&unk_1ED4B7B10, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], MEMORY[0x1E0CB0018]);
  sub_1B22285E4();
  v6 = a1 + *(int *)(v5 + 24);
  v7 = *(unsigned __int8 *)(v6 + 24);
  v8 = *(_WORD *)(v6 + 56);
  sub_1B222A078();
  if (v7 >= 0xFE || (sub_1B222A084(), sub_1B222A078(), sub_1B222A078(), sub_1B222A078(), (v7 & 0x80) == 0))
    sub_1B222A084();
  if ((v8 & 0xFF00) != 0x300)
  {
    sub_1B222A084();
    sub_1B222A078();
    sub_1B222A078();
    sub_1B222A084();
    if ((v8 & 1) == 0)
      sub_1B222A078();
  }
  sub_1B222A084();
  sub_1B222A0C0();
  v9 = sub_1B222937C();
  *(_QWORD *)((char *)a3 + ((v9 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v9;
  result = sub_1B1A025EC(a1, a3[6] + *(_QWORD *)(*(_QWORD *)(v5 - 8) + 72) * v9, (uint64_t (*)(_QWORD))type metadata accessor for TextureCache.TextureKey);
  *(_QWORD *)(a3[7] + 8 * v9) = a2;
  ++a3[2];
  return result;
}

uint64_t sub_1B1EA4010(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  __int16 v8;
  unint64_t v9;
  uint64_t result;

  sub_1B222A06C();
  sub_1B222A078();
  v5 = type metadata accessor for TextureCache.TextureKey();
  sub_1B2228110();
  sub_1B19E52CC((unint64_t *)&unk_1ED4B7B10, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], MEMORY[0x1E0CB0018]);
  sub_1B22285E4();
  v6 = a1 + *(int *)(v5 + 24);
  v7 = *(unsigned __int8 *)(v6 + 24);
  v8 = *(_WORD *)(v6 + 56);
  sub_1B222A078();
  if (v7 >= 0xFE || (sub_1B222A084(), sub_1B222A078(), sub_1B222A078(), sub_1B222A078(), (v7 & 0x80) == 0))
    sub_1B222A084();
  if ((v8 & 0xFF00) != 0x300)
  {
    sub_1B222A084();
    sub_1B222A078();
    sub_1B222A078();
    sub_1B222A084();
    if ((v8 & 1) == 0)
      sub_1B222A078();
  }
  sub_1B222A084();
  sub_1B222A0C0();
  v9 = sub_1B222937C();
  *(_QWORD *)((char *)a3 + ((v9 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v9;
  sub_1B1A025EC(a1, a3[6] + *(_QWORD *)(*(_QWORD *)(v5 - 8) + 72) * v9, (uint64_t (*)(_QWORD))type metadata accessor for TextureCache.TextureKey);
  result = sub_1B1B9C128(a2, a3[7] + 160 * v9);
  ++a3[2];
  return result;
}

__n128 sub_1B1EA4268(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  unint64_t v5;
  _OWORD *v6;
  __int128 v7;
  __int128 v8;
  __n128 result;
  __int128 v10;

  sub_1B222A06C();
  sub_1B222A078();
  sub_1B222A084();
  sub_1B222A078();
  sub_1B222A078();
  sub_1B222A078();
  sub_1B222A078();
  sub_1B222A09C();
  sub_1B222A09C();
  sub_1B222A078();
  sub_1B222A078();
  sub_1B222A078();
  sub_1B222A078();
  sub_1B222A09C();
  sub_1B222A09C();
  sub_1B222A0C0();
  v5 = sub_1B222937C();
  *(_QWORD *)((char *)a3 + ((v5 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v5;
  v6 = (_OWORD *)(a3[6] + 96 * v5);
  v7 = *(_OWORD *)(a1 + 48);
  v6[2] = *(_OWORD *)(a1 + 32);
  v6[3] = v7;
  v8 = *(_OWORD *)(a1 + 80);
  v6[4] = *(_OWORD *)(a1 + 64);
  v6[5] = v8;
  result = *(__n128 *)a1;
  v10 = *(_OWORD *)(a1 + 16);
  *v6 = *(_OWORD *)a1;
  v6[1] = v10;
  *(_QWORD *)(a3[7] + 8 * v5) = a2;
  ++a3[2];
  return result;
}

unint64_t sub_1B1EA4418(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  unint64_t v11;
  _DWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = sub_1B2229370();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v9 = *(_QWORD *)(a2 + 48);
        v10 = (_DWORD *)(v9 + 4 * v6);
        result = MEMORY[0x1B5E21C00](*(_QWORD *)(a2 + 40), *v10, 4);
        v11 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 >= v8 && v3 >= (uint64_t)v11)
          {
LABEL_16:
            v14 = (_DWORD *)(v9 + 4 * v3);
            if (v3 != v6 || v14 >= v10 + 1)
              *v14 = *v10;
            v15 = *(_QWORD *)(a2 + 56);
            v16 = (_QWORD *)(v15 + 8 * v3);
            v17 = (_QWORD *)(v15 + 8 * v6);
            if (v3 != v6 || (v3 = v6, v16 >= v17 + 1))
            {
              *v16 = *v17;
              v3 = v6;
            }
          }
        }
        else if (v11 >= v8 || v3 >= (uint64_t)v11)
        {
          goto LABEL_16;
        }
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v18 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v19 = *v18;
    v20 = (-1 << v3) - 1;
  }
  else
  {
    v18 = (uint64_t *)(v4 + 8 * (result >> 6));
    v20 = *v18;
    v19 = (-1 << result) - 1;
  }
  *v18 = v20 & v19;
  --*(_QWORD *)(a2 + 16);
  ++*(_DWORD *)(a2 + 36);
  return result;
}

unint64_t sub_1B1EA45A8(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  __int128 *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = sub_1B2229370();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v10 = *(_QWORD *)(a2 + 48);
        v11 = (_QWORD *)(v10 + 8 * v6);
        result = sub_1B222A060();
        v12 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v12 >= v8 && v3 >= (uint64_t)v12)
          {
LABEL_16:
            v15 = (_QWORD *)(v10 + 8 * v3);
            if (v3 != v6 || v15 >= v11 + 1)
              *v15 = *v11;
            v16 = *(_QWORD *)(a2 + 56);
            v17 = v16 + 24 * v3;
            v18 = (__int128 *)(v16 + 24 * v6);
            if (v3 != v6 || (v3 = v6, v17 >= (unint64_t)v18 + 24))
            {
              v9 = *v18;
              *(_QWORD *)(v17 + 16) = *((_QWORD *)v18 + 2);
              *(_OWORD *)v17 = v9;
              v3 = v6;
            }
          }
        }
        else if (v12 >= v8 || v3 >= (uint64_t)v12)
        {
          goto LABEL_16;
        }
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v19 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v20 = *v19;
    v21 = (-1 << v3) - 1;
  }
  else
  {
    v19 = (uint64_t *)(v4 + 8 * (result >> 6));
    v21 = *v19;
    v20 = (-1 << result) - 1;
  }
  *v19 = v21 & v20;
  --*(_QWORD *)(a2 + 16);
  ++*(_DWORD *)(a2 + 36);
  return result;
}

unint64_t sub_1B1EA4748(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  const void *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = sub_1B2229370();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        sub_1B222A06C();
        swift_bridgeObjectRetain();
        sub_1B2228824();
        v9 = sub_1B222A0C0();
        result = swift_bridgeObjectRelease();
        v10 = v9 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8)
            goto LABEL_5;
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          v11 = *(_QWORD *)(a2 + 48);
          v12 = (_OWORD *)(v11 + 16 * v3);
          v13 = (_OWORD *)(v11 + 16 * v6);
          if (v3 != v6 || v12 >= v13 + 1)
            *v12 = *v13;
          v14 = *(_QWORD *)(a2 + 56);
          result = v14 + 88 * v3;
          v15 = (const void *)(v14 + 88 * v6);
          if (v3 != v6 || (v3 = v6, result >= (unint64_t)v15 + 88))
          {
            result = (unint64_t)memmove((void *)result, v15, 0x58uLL);
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v16 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v17 = *v16;
    v18 = (-1 << v3) - 1;
  }
  else
  {
    v16 = (uint64_t *)(v4 + 8 * (result >> 6));
    v18 = *v16;
    v17 = (-1 << result) - 1;
  }
  *v16 = v18 & v17;
  --*(_QWORD *)(a2 + 16);
  ++*(_DWORD *)(a2 + 36);
  return result;
}

unint64_t sub_1B1EA4920(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = sub_1B2229370();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        sub_1B222A06C();
        swift_bridgeObjectRetain();
        sub_1B2228824();
        v9 = sub_1B222A0C0();
        result = swift_bridgeObjectRelease();
        v10 = v9 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8)
            goto LABEL_5;
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          v11 = *(_QWORD *)(a2 + 48);
          v12 = (_OWORD *)(v11 + 16 * v3);
          v13 = (_OWORD *)(v11 + 16 * v6);
          if (v3 != v6 || v12 >= v13 + 1)
            *v12 = *v13;
          v14 = *(_QWORD *)(a2 + 56);
          v15 = (_QWORD *)(v14 + 8 * v3);
          v16 = (_QWORD *)(v14 + 8 * v6);
          if (v3 != v6 || (v3 = v6, v15 >= v16 + 1))
          {
            *v15 = *v16;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v18 = *v17;
    v19 = (-1 << v3) - 1;
  }
  else
  {
    v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    v19 = *v17;
    v18 = (-1 << result) - 1;
  }
  *v17 = v19 & v18;
  --*(_QWORD *)(a2 + 16);
  ++*(_DWORD *)(a2 + 36);
  return result;
}

unint64_t sub_1B1EA4AEC(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = sub_1B2229370();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        sub_1B222A06C();
        swift_bridgeObjectRetain();
        sub_1B2228824();
        v9 = sub_1B222A0C0();
        result = swift_bridgeObjectRelease();
        v10 = v9 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8)
            goto LABEL_5;
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          v11 = *(_QWORD *)(a2 + 48);
          v12 = (_OWORD *)(v11 + 16 * v3);
          v13 = (_OWORD *)(v11 + 16 * v6);
          if (v3 != v6 || v12 >= v13 + 1)
            *v12 = *v13;
          v14 = *(_QWORD *)(a2 + 56);
          v15 = (_OWORD *)(v14 + 16 * v3);
          v16 = (_OWORD *)(v14 + 16 * v6);
          if (v3 != v6 || (v3 = v6, v15 >= v16 + 1))
          {
            *v15 = *v16;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v18 = *v17;
    v19 = (-1 << v3) - 1;
  }
  else
  {
    v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    v19 = *v17;
    v18 = (-1 << result) - 1;
  }
  *v17 = v19 & v18;
  --*(_QWORD *)(a2 + 16);
  ++*(_DWORD *)(a2 + 36);
  return result;
}

void sub_1B1EA4CB8(int64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int64_t v22;
  BOOL v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, unint64_t, uint64_t);
  unint64_t v29;
  uint64_t v30;

  v4 = sub_1B222826C();
  v30 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a2 + 64;
  v9 = -1 << *(_BYTE *)(a2 + 32);
  v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(_QWORD *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    v11 = ~v9;
    v12 = sub_1B2229370();
    if ((*(_QWORD *)(v8 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      v29 = (v12 + 1) & v11;
      v13 = *(_QWORD *)(v30 + 72);
      v28 = *(void (**)(char *, unint64_t, uint64_t))(v30 + 16);
      v14 = v11;
      do
      {
        v15 = v8;
        v16 = v13 * v10;
        v17 = v14;
        v28(v7, *(_QWORD *)(a2 + 48) + v13 * v10, v4);
        sub_1B19E52CC((unint64_t *)&qword_1ED4B7B38, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
        v18 = sub_1B22285D8();
        (*(void (**)(char *, uint64_t))(v30 + 8))(v7, v4);
        v14 = v17;
        v19 = v18 & v17;
        if (a1 >= (uint64_t)v29)
        {
          if (v19 >= v29 && a1 >= (uint64_t)v19)
          {
LABEL_16:
            v22 = v13 * a1;
            if (v13 * a1 < v16
              || *(_QWORD *)(a2 + 48) + v13 * a1 >= (unint64_t)(*(_QWORD *)(a2 + 48) + v16 + v13))
            {
              swift_arrayInitWithTakeFrontToBack();
            }
            else if (v22 != v16)
            {
              swift_arrayInitWithTakeBackToFront();
            }
            if (v22 < v16 || *(_QWORD *)(a2 + 56) + v22 >= (unint64_t)(*(_QWORD *)(a2 + 56) + v16 + v13))
            {
              swift_arrayInitWithTakeFrontToBack();
              a1 = v10;
              v8 = v15;
              v14 = v17;
            }
            else
            {
              a1 = v10;
              v23 = v22 == v16;
              v8 = v15;
              v14 = v17;
              if (!v23)
              {
                swift_arrayInitWithTakeBackToFront();
                v14 = v17;
                a1 = v10;
              }
            }
            goto LABEL_5;
          }
        }
        else if (v19 >= v29 || a1 >= (uint64_t)v19)
        {
          goto LABEL_16;
        }
        v8 = v15;
LABEL_5:
        v10 = (v10 + 1) & v14;
      }
      while (((*(_QWORD *)(v8 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
    }
    v24 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v25 = *v24;
    v26 = (-1 << a1) - 1;
  }
  else
  {
    v24 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v26 = *v24;
    v25 = (-1 << a1) - 1;
  }
  *v24 = v26 & v25;
  --*(_QWORD *)(a2 + 16);
  ++*(_DWORD *)(a2 + 36);
}

unint64_t sub_1B1EA4F70(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = sub_1B2229370();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v9 = *(_QWORD *)(a2 + 48);
        v10 = (_QWORD *)(v9 + 8 * v6);
        result = sub_1B222A060();
        v11 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 >= v8 && v3 >= (uint64_t)v11)
          {
LABEL_16:
            v14 = (_QWORD *)(v9 + 8 * v3);
            if (v3 != v6 || v14 >= v10 + 1)
              *v14 = *v10;
            v15 = *(_QWORD *)(a2 + 56);
            v16 = (_QWORD *)(v15 + 8 * v3);
            v17 = (_QWORD *)(v15 + 8 * v6);
            if (v3 != v6 || (v3 = v6, v16 >= v17 + 1))
            {
              *v16 = *v17;
              v3 = v6;
            }
          }
        }
        else if (v11 >= v8 || v3 >= (uint64_t)v11)
        {
          goto LABEL_16;
        }
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v18 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v19 = *v18;
    v20 = (-1 << v3) - 1;
  }
  else
  {
    v18 = (uint64_t *)(v4 + 8 * (result >> 6));
    v20 = *v18;
    v19 = (-1 << result) - 1;
  }
  *v18 = v20 & v19;
  --*(_QWORD *)(a2 + 16);
  ++*(_DWORD *)(a2 + 36);
  return result;
}

void sub_1B1EA50FC(int64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v23;
  _OWORD *v24;
  _OWORD *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, unint64_t, uint64_t);
  unint64_t v31;
  uint64_t v32;

  v4 = sub_1B222826C();
  v32 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a2 + 64;
  v9 = -1 << *(_BYTE *)(a2 + 32);
  v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(_QWORD *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    v11 = ~v9;
    v12 = sub_1B2229370();
    if ((*(_QWORD *)(v8 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      v31 = (v12 + 1) & v11;
      v13 = *(_QWORD *)(v32 + 72);
      v30 = *(void (**)(char *, unint64_t, uint64_t))(v32 + 16);
      v14 = v11;
      do
      {
        v15 = v8;
        v16 = v13;
        v17 = v13 * v10;
        v18 = v14;
        v30(v7, *(_QWORD *)(a2 + 48) + v13 * v10, v4);
        sub_1B19E52CC((unint64_t *)&qword_1ED4B7B38, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
        v19 = sub_1B22285D8();
        (*(void (**)(char *, uint64_t))(v32 + 8))(v7, v4);
        v14 = v18;
        v20 = v19 & v18;
        if (a1 >= (uint64_t)v31)
        {
          if (v20 >= v31 && a1 >= (uint64_t)v20)
          {
LABEL_16:
            if (v16 * a1 < v17
              || (v13 = v16, *(_QWORD *)(a2 + 48) + v16 * a1 >= (unint64_t)(*(_QWORD *)(a2 + 48) + v17 + v16)))
            {
              swift_arrayInitWithTakeFrontToBack();
              v14 = v18;
              v13 = v16;
              v8 = v15;
            }
            else
            {
              v8 = v15;
              if (v16 * a1 != v17)
              {
                swift_arrayInitWithTakeBackToFront();
                v14 = v18;
                v13 = v16;
              }
            }
            v23 = *(_QWORD *)(a2 + 56);
            v24 = (_OWORD *)(v23 + 16 * a1);
            v25 = (_OWORD *)(v23 + 16 * v10);
            if (a1 != v10 || (a1 = v10, v24 >= v25 + 1))
            {
              *v24 = *v25;
              a1 = v10;
            }
            goto LABEL_5;
          }
        }
        else if (v20 >= v31 || a1 >= (uint64_t)v20)
        {
          goto LABEL_16;
        }
        v8 = v15;
        v13 = v16;
LABEL_5:
        v10 = (v10 + 1) & v14;
      }
      while (((*(_QWORD *)(v8 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
    }
    v26 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v27 = *v26;
    v28 = (-1 << a1) - 1;
  }
  else
  {
    v26 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v28 = *v26;
    v27 = (-1 << a1) - 1;
  }
  *v26 = v28 & v27;
  --*(_QWORD *)(a2 + 16);
  ++*(_DWORD *)(a2 + 36);
}

void sub_1B1EA53A0(int64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v23;
  _OWORD *v24;
  _OWORD *v25;
  __int128 v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, unint64_t, uint64_t);
  unint64_t v32;
  uint64_t v33;

  v4 = sub_1B2229610();
  v33 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a2 + 64;
  v9 = -1 << *(_BYTE *)(a2 + 32);
  v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(_QWORD *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    v11 = ~v9;
    v12 = sub_1B2229370();
    if ((*(_QWORD *)(v8 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      v32 = (v12 + 1) & v11;
      v13 = *(_QWORD *)(v33 + 72);
      v31 = *(void (**)(char *, unint64_t, uint64_t))(v33 + 16);
      v14 = v11;
      do
      {
        v15 = v8;
        v16 = v13;
        v17 = v13 * v10;
        v18 = v14;
        v31(v7, *(_QWORD *)(a2 + 48) + v13 * v10, v4);
        v19 = sub_1B22285D8();
        (*(void (**)(char *, uint64_t))(v33 + 8))(v7, v4);
        v14 = v18;
        v20 = v19 & v18;
        if (a1 >= (uint64_t)v32)
        {
          if (v20 >= v32 && a1 >= (uint64_t)v20)
          {
LABEL_16:
            if (v16 * a1 < v17
              || (v13 = v16, *(_QWORD *)(a2 + 48) + v16 * a1 >= (unint64_t)(*(_QWORD *)(a2 + 48) + v17 + v16)))
            {
              swift_arrayInitWithTakeFrontToBack();
              v13 = v16;
              v14 = v18;
              v8 = v15;
            }
            else
            {
              v8 = v15;
              if (v16 * a1 != v17)
              {
                swift_arrayInitWithTakeBackToFront();
                v13 = v16;
                v14 = v18;
              }
            }
            v23 = *(_QWORD *)(a2 + 56);
            v24 = (_OWORD *)(v23 + 32 * a1);
            v25 = (_OWORD *)(v23 + 32 * v10);
            if (a1 != v10 || (a1 = v10, v24 >= v25 + 2))
            {
              v26 = v25[1];
              *v24 = *v25;
              v24[1] = v26;
              a1 = v10;
            }
            goto LABEL_5;
          }
        }
        else if (v20 >= v32 || a1 >= (uint64_t)v20)
        {
          goto LABEL_16;
        }
        v8 = v15;
        v13 = v16;
LABEL_5:
        v10 = (v10 + 1) & v14;
      }
      while (((*(_QWORD *)(v8 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
    }
    v27 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v28 = *v27;
    v29 = (-1 << a1) - 1;
  }
  else
  {
    v27 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v29 = *v27;
    v28 = (-1 << a1) - 1;
  }
  *v27 = v29 & v28;
  --*(_QWORD *)(a2 + 16);
  ++*(_DWORD *)(a2 + 36);
}

unint64_t sub_1B1EA5628(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = sub_1B2229370();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        sub_1B222A06C();
        sub_1B222A09C();
        sub_1B222A09C();
        result = sub_1B222A0C0();
        v9 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v9 < v8)
            goto LABEL_5;
        }
        else if (v9 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v9)
        {
LABEL_11:
          v10 = *(_QWORD *)(a2 + 48);
          v11 = (_QWORD *)(v10 + 8 * v3);
          v12 = (_QWORD *)(v10 + 8 * v6);
          if (v3 != v6 || v11 >= v12 + 1)
            *v11 = *v12;
          v13 = *(_QWORD *)(a2 + 56);
          v14 = (_QWORD *)(v13 + 8 * v3);
          v15 = (_QWORD *)(v13 + 8 * v6);
          if (v3 != v6 || (v3 = v6, v14 >= v15 + 1))
          {
            *v14 = *v15;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v16 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v17 = *v16;
    v18 = (-1 << v3) - 1;
  }
  else
  {
    v16 = (uint64_t *)(v4 + 8 * (result >> 6));
    v18 = *v16;
    v17 = (-1 << result) - 1;
  }
  *v16 = v18 & v17;
  --*(_QWORD *)(a2 + 16);
  ++*(_DWORD *)(a2 + 36);
  return result;
}

unint64_t sub_1B1EA57F0(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = sub_1B2229370();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        sub_1B222A06C();
        sub_1B222A078();
        result = sub_1B222A0C0();
        v9 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v9 < v8)
            goto LABEL_5;
        }
        else if (v9 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v9)
        {
LABEL_11:
          v10 = *(_QWORD *)(a2 + 48);
          v11 = (_BYTE *)(v10 + v3);
          v12 = (_BYTE *)(v10 + v6);
          if (v3 != v6 || v11 >= v12 + 1)
            *v11 = *v12;
          v13 = *(_QWORD *)(a2 + 56);
          v14 = (_QWORD *)(v13 + 8 * v3);
          v15 = (_QWORD *)(v13 + 8 * v6);
          if (v3 != v6 || (v3 = v6, v14 >= v15 + 1))
          {
            *v14 = *v15;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v16 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v17 = *v16;
    v18 = (-1 << v3) - 1;
  }
  else
  {
    v16 = (uint64_t *)(v4 + 8 * (result >> 6));
    v18 = *v16;
    v17 = (-1 << result) - 1;
  }
  *v16 = v18 & v17;
  --*(_QWORD *)(a2 + 16);
  ++*(_DWORD *)(a2 + 36);
  return result;
}

unint64_t sub_1B1EA59A0(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  const void *v16;
  BOOL v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = sub_1B2229370();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v9 = *(_QWORD *)(a2 + 48);
        v10 = (_QWORD *)(v9 + 8 * v6);
        result = sub_1B222A060();
        v11 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 >= v8 && v3 >= (uint64_t)v11)
          {
LABEL_16:
            v14 = (_QWORD *)(v9 + 8 * v3);
            if (v3 != v6 || v14 >= v10 + 1)
              *v14 = *v10;
            v15 = *(_QWORD *)(a2 + 56);
            result = v15 + 80 * v3;
            v16 = (const void *)(v15 + 80 * v6);
            if (80 * v3 < (uint64_t)(80 * v6) || result >= (unint64_t)v16 + 80 || (v17 = v3 == v6, v3 = v6, !v17))
            {
              result = (unint64_t)memmove((void *)result, v16, 0x50uLL);
              v3 = v6;
            }
          }
        }
        else if (v11 >= v8 || v3 >= (uint64_t)v11)
        {
          goto LABEL_16;
        }
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v18 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v19 = *v18;
    v20 = (-1 << v3) - 1;
  }
  else
  {
    v18 = (uint64_t *)(v4 + 8 * (result >> 6));
    v20 = *v18;
    v19 = (-1 << result) - 1;
  }
  *v18 = v20 & v19;
  --*(_QWORD *)(a2 + 16);
  ++*(_DWORD *)(a2 + 36);
  return result;
}

unint64_t sub_1B1EA5B44(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  __int128 *v20;
  BOOL v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = sub_1B2229370();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v12 = *(_QWORD *)(a2 + 48);
        v13 = (_QWORD *)(v12 + 8 * v6);
        result = sub_1B222A060();
        v14 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v14 >= v8 && v3 >= (uint64_t)v14)
          {
LABEL_16:
            v17 = (_QWORD *)(v12 + 8 * v3);
            if (v3 != v6 || v17 >= v13 + 1)
              *v17 = *v13;
            v18 = *(_QWORD *)(a2 + 56);
            v19 = v18 + 56 * v3;
            v20 = (__int128 *)(v18 + 56 * v6);
            if (56 * v3 < (uint64_t)(56 * v6) || v19 >= (unint64_t)v20 + 56 || (v21 = v3 == v6, v3 = v6, !v21))
            {
              v9 = *v20;
              v10 = v20[1];
              v11 = v20[2];
              *(_QWORD *)(v19 + 48) = *((_QWORD *)v20 + 6);
              *(_OWORD *)(v19 + 16) = v10;
              *(_OWORD *)(v19 + 32) = v11;
              *(_OWORD *)v19 = v9;
              v3 = v6;
            }
          }
        }
        else if (v14 >= v8 || v3 >= (uint64_t)v14)
        {
          goto LABEL_16;
        }
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v22 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v23 = *v22;
    v24 = (-1 << v3) - 1;
  }
  else
  {
    v22 = (uint64_t *)(v4 + 8 * (result >> 6));
    v24 = *v22;
    v23 = (-1 << result) - 1;
  }
  *v22 = v24 & v23;
  --*(_QWORD *)(a2 + 16);
  ++*(_DWORD *)(a2 + 36);
  return result;
}

unint64_t sub_1B1EA5CF8(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  BOOL v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = sub_1B2229370();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v9 = *(_QWORD *)(a2 + 48);
        v10 = (_QWORD *)(v9 + 8 * v6);
        result = sub_1B222A060();
        v11 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 < v8 || v3 < (uint64_t)v11)
            goto LABEL_6;
        }
        else if (v11 < v8 && v3 < (uint64_t)v11)
        {
          goto LABEL_6;
        }
        v14 = (_QWORD *)(v9 + 8 * v3);
        if (v3 != v6 || v14 >= v10 + 1)
          *v14 = *v10;
        v15 = *(_QWORD *)(a2 + 56);
        result = v15 + 8 * v3;
        if (v3 < (uint64_t)v6 || result >= v15 + 8 * v6 + 8)
        {
          result = swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          v16 = v3 == v6;
          v3 = v6;
          if (v16)
            goto LABEL_6;
          result = swift_arrayInitWithTakeBackToFront();
        }
        v3 = v6;
LABEL_6:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v18 = *v17;
    v19 = (-1 << v3) - 1;
  }
  else
  {
    v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    v19 = *v17;
    v18 = (-1 << result) - 1;
  }
  *v17 = v19 & v18;
  --*(_QWORD *)(a2 + 16);
  ++*(_DWORD *)(a2 + 36);
  return result;
}

unint64_t sub_1B1EA5EAC(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  int64_t v17;
  int64_t v18;
  unint64_t v19;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = sub_1B2229370();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      while (1)
      {
        v9 = 8 * v6;
        v10 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 48) + 8 * v6 + 4);
        sub_1B222A06C();
        sub_1B222A084();
        if (v10 != 1)
          sub_1B222A09C();
        result = sub_1B222A0C0();
        v11 = result & v7;
        if (v3 >= (uint64_t)v8)
          break;
        if (v11 < v8)
          goto LABEL_13;
LABEL_14:
        v12 = *(_QWORD *)(a2 + 48);
        v13 = (_QWORD *)(v12 + 8 * v3);
        v14 = (_QWORD *)(v12 + v9);
        if (8 * v3 != v9 || v13 >= v14 + 1)
          *v13 = *v14;
        v15 = *(_QWORD *)(a2 + 56);
        v16 = *(_QWORD *)(*(_QWORD *)(sub_1B2228110() - 8) + 72);
        v17 = v16 * v3;
        result = v15 + v16 * v3;
        v18 = v16 * v6;
        v19 = v15 + v16 * v6 + v16;
        if (v17 < v18 || result >= v19)
        {
          result = swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          v3 = v6;
          if (v17 == v18)
            goto LABEL_6;
          result = swift_arrayInitWithTakeBackToFront();
        }
        v3 = v6;
LABEL_6:
        v6 = (v6 + 1) & v7;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          goto LABEL_23;
      }
      if (v11 < v8)
        goto LABEL_6;
LABEL_13:
      if (v3 < (uint64_t)v11)
        goto LABEL_6;
      goto LABEL_14;
    }
LABEL_23:
    v21 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v22 = *v21;
    v23 = (-1 << v3) - 1;
  }
  else
  {
    v21 = (uint64_t *)(v4 + 8 * (result >> 6));
    v23 = *v21;
    v22 = (-1 << result) - 1;
  }
  *v21 = v23 & v22;
  --*(_QWORD *)(a2 + 16);
  ++*(_DWORD *)(a2 + 36);
  return result;
}

unint64_t sub_1B1EA60C4(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  uint64_t v13;
  const void *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = sub_1B2229370();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        sub_1B222A06C();
        sub_1B222A078();
        result = sub_1B222A0C0();
        v9 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v9 < v8)
            goto LABEL_5;
        }
        else if (v9 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v9)
        {
LABEL_11:
          v10 = *(_QWORD *)(a2 + 48);
          v11 = (_BYTE *)(v10 + v3);
          v12 = (_BYTE *)(v10 + v6);
          if (v3 != v6 || v11 >= v12 + 1)
            *v11 = *v12;
          v13 = *(_QWORD *)(a2 + 56);
          result = v13 + 80 * v3;
          v14 = (const void *)(v13 + 80 * v6);
          if (v3 != v6 || (v3 = v6, result >= (unint64_t)v14 + 80))
          {
            result = (unint64_t)memmove((void *)result, v14, 0x50uLL);
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v15 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v16 = *v15;
    v17 = (-1 << v3) - 1;
  }
  else
  {
    v15 = (uint64_t *)(v4 + 8 * (result >> 6));
    v17 = *v15;
    v16 = (-1 << result) - 1;
  }
  *v15 = v17 & v16;
  --*(_QWORD *)(a2 + 16);
  ++*(_DWORD *)(a2 + 36);
  return result;
}

unint64_t sub_1B1EA6280(unint64_t a1, uint64_t a2)
{
  return sub_1B1EA62A8(a1, a2, (unint64_t *)&unk_1ED4BF620, (uint64_t (*)(uint64_t))type metadata accessor for TextureCache);
}

unint64_t sub_1B1EA6294(unint64_t a1, uint64_t a2)
{
  return sub_1B1EA62A8(a1, a2, (unint64_t *)&unk_1ED4BF640, (uint64_t (*)(uint64_t))type metadata accessor for DepthStencilCache);
}

unint64_t sub_1B1EA62A8(unint64_t result, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t))
{
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  _QWORD *v18;
  BOOL v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;

  v5 = result;
  v6 = a2 + 64;
  v7 = -1 << *(_BYTE *)(a2 + 32);
  v8 = (result + 1) & ~v7;
  if (((1 << v8) & *(_QWORD *)(a2 + 64 + 8 * (v8 >> 6))) != 0)
  {
    v11 = ~v7;
    result = sub_1B2229370();
    if ((*(_QWORD *)(v6 + 8 * (v8 >> 6)) & (1 << v8)) != 0)
    {
      v12 = (result + 1) & v11;
      do
      {
        v13 = *(_QWORD *)(a2 + 48);
        v14 = (_QWORD *)(v13 + 8 * v8);
        result = sub_1B222A060();
        v15 = result & v11;
        if (v5 >= (uint64_t)v12)
        {
          if (v15 < v12 || v5 < (uint64_t)v15)
            goto LABEL_6;
        }
        else if (v15 < v12 && v5 < (uint64_t)v15)
        {
          goto LABEL_6;
        }
        v18 = (_QWORD *)(v13 + 8 * v5);
        if (v5 != v8 || v18 >= v14 + 1)
          *v18 = *v14;
        if (v5 < (uint64_t)v8 || *(_QWORD *)(a2 + 56) + 8 * v5 >= *(_QWORD *)(a2 + 56) + 8 * v8 + 8)
        {
          sub_1B1791524(0, a3, a4, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for WeakReference);
          result = swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          v19 = v5 == v8;
          v5 = v8;
          if (v19)
            goto LABEL_6;
          sub_1B1791524(0, a3, a4, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for WeakReference);
          result = swift_arrayInitWithTakeBackToFront();
        }
        v5 = v8;
LABEL_6:
        v8 = (v8 + 1) & v11;
      }
      while (((*(_QWORD *)(v6 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0);
    }
    v20 = (uint64_t *)(v6 + 8 * ((unint64_t)v5 >> 6));
    v21 = *v20;
    v22 = (-1 << v5) - 1;
  }
  else
  {
    v20 = (uint64_t *)(v6 + 8 * (result >> 6));
    v22 = *v20;
    v21 = (-1 << result) - 1;
  }
  *v20 = v22 & v21;
  --*(_QWORD *)(a2 + 16);
  ++*(_DWORD *)(a2 + 36);
  return result;
}

unint64_t sub_1B1EA649C(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  int64_t v17;
  int64_t v18;
  unint64_t v19;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = sub_1B2229370();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      while (1)
      {
        v9 = 8 * v6;
        v10 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 48) + 8 * v6 + 4);
        sub_1B222A06C();
        sub_1B222A078();
        if (v10 != 1)
          sub_1B222A09C();
        result = sub_1B222A0C0();
        v11 = result & v7;
        if (v3 >= (uint64_t)v8)
          break;
        if (v11 < v8)
          goto LABEL_13;
LABEL_14:
        v12 = *(_QWORD *)(a2 + 48);
        v13 = (_QWORD *)(v12 + 8 * v3);
        v14 = (_QWORD *)(v12 + v9);
        if (8 * v3 != v9 || v13 >= v14 + 1)
          *v13 = *v14;
        v15 = *(_QWORD *)(a2 + 56);
        v16 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for GraphScriptingConfig.ScriptInfo() - 8) + 72);
        v17 = v16 * v3;
        result = v15 + v16 * v3;
        v18 = v16 * v6;
        v19 = v15 + v16 * v6 + v16;
        if (v17 < v18 || result >= v19)
        {
          result = swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          v3 = v6;
          if (v17 == v18)
            goto LABEL_6;
          result = swift_arrayInitWithTakeBackToFront();
        }
        v3 = v6;
LABEL_6:
        v6 = (v6 + 1) & v7;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          goto LABEL_23;
      }
      if (v11 < v8)
        goto LABEL_6;
LABEL_13:
      if (v3 < (uint64_t)v11)
        goto LABEL_6;
      goto LABEL_14;
    }
LABEL_23:
    v21 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v22 = *v21;
    v23 = (-1 << v3) - 1;
  }
  else
  {
    v21 = (uint64_t *)(v4 + 8 * (result >> 6));
    v23 = *v21;
    v22 = (-1 << result) - 1;
  }
  *v21 = v23 & v22;
  --*(_QWORD *)(a2 + 16);
  ++*(_DWORD *)(a2 + 36);
  return result;
}

unint64_t sub_1B1EA66D0(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  unint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  _OWORD *v14;
  uint64_t v15;
  __int128 *v16;
  __int128 *v17;
  BOOL v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = sub_1B2229370();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        sub_1B222A06C();
        sub_1B222A078();
        sub_1B222A09C();
        sub_1B222A09C();
        result = sub_1B222A0C0();
        v11 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 < v8)
            goto LABEL_5;
        }
        else if (v11 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v11)
        {
LABEL_11:
          v12 = *(_QWORD *)(a2 + 48);
          v13 = (_OWORD *)(v12 + 16 * v3);
          v14 = (_OWORD *)(v12 + 16 * v6);
          if (v3 != v6 || v13 >= v14 + 1)
            *v13 = *v14;
          v15 = *(_QWORD *)(a2 + 56);
          v16 = (__int128 *)(v15 + 48 * v3);
          v17 = (__int128 *)(v15 + 48 * v6);
          if (48 * v3 < (uint64_t)(48 * v6) || v16 >= v17 + 3 || (v18 = v3 == v6, v3 = v6, !v18))
          {
            v9 = *v17;
            v10 = v17[2];
            v16[1] = v17[1];
            v16[2] = v10;
            *v16 = v9;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v19 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v20 = *v19;
    v21 = (-1 << v3) - 1;
  }
  else
  {
    v19 = (uint64_t *)(v4 + 8 * (result >> 6));
    v21 = *v19;
    v20 = (-1 << result) - 1;
  }
  *v19 = v21 & v20;
  --*(_QWORD *)(a2 + 16);
  ++*(_DWORD *)(a2 + 36);
  return result;
}

unint64_t sub_1B1EA68C8(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  _OWORD *v12;
  uint64_t v13;
  const void *v14;
  BOOL v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = sub_1B2229370();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        sub_1B222A06C();
        sub_1B222A078();
        sub_1B222A09C();
        sub_1B222A09C();
        result = sub_1B222A0C0();
        v9 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v9 < v8)
            goto LABEL_5;
        }
        else if (v9 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v9)
        {
LABEL_11:
          v10 = *(_QWORD *)(a2 + 48);
          v11 = (_OWORD *)(v10 + 16 * v3);
          v12 = (_OWORD *)(v10 + 16 * v6);
          if (v3 != v6 || v11 >= v12 + 1)
            *v11 = *v12;
          v13 = *(_QWORD *)(a2 + 56);
          result = v13 + 96 * v3;
          v14 = (const void *)(v13 + 96 * v6);
          if (96 * v3 < (uint64_t)(96 * v6) || result >= (unint64_t)v14 + 96 || (v15 = v3 == v6, v3 = v6, !v15))
          {
            result = (unint64_t)memmove((void *)result, v14, 0x60uLL);
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v16 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v17 = *v16;
    v18 = (-1 << v3) - 1;
  }
  else
  {
    v16 = (uint64_t *)(v4 + 8 * (result >> 6));
    v18 = *v16;
    v17 = (-1 << result) - 1;
  }
  *v16 = v18 & v17;
  --*(_QWORD *)(a2 + 16);
  ++*(_DWORD *)(a2 + 36);
  return result;
}

unint64_t sub_1B1EA6AB8(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = sub_1B2229370();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        sub_1B222A06C();
        sub_1B222A09C();
        sub_1B222A09C();
        result = sub_1B222A0C0();
        v10 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8)
            goto LABEL_5;
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          v11 = *(_QWORD *)(a2 + 48);
          v12 = (_QWORD *)(v11 + 8 * v3);
          v13 = (_QWORD *)(v11 + 8 * v6);
          if (v3 != v6 || v12 >= v13 + 1)
            *v12 = *v13;
          v14 = *(_QWORD *)(a2 + 56);
          v15 = (_OWORD *)(v14 + 32 * v3);
          v16 = (_OWORD *)(v14 + 32 * v6);
          if (v3 != v6 || (v3 = v6, v15 >= v16 + 2))
          {
            v9 = v16[1];
            *v15 = *v16;
            v15[1] = v9;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v18 = *v17;
    v19 = (-1 << v3) - 1;
  }
  else
  {
    v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    v19 = *v17;
    v18 = (-1 << result) - 1;
  }
  *v17 = v19 & v18;
  --*(_QWORD *)(a2 + 16);
  ++*(_DWORD *)(a2 + 36);
  return result;
}

unint64_t sub_1B1EA6C80(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  _DWORD *v16;
  _DWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = sub_1B2229370();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v9 = *(_QWORD *)(a2 + 48);
        v10 = (_QWORD *)(v9 + 8 * v6);
        result = sub_1B222A060();
        v11 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 >= v8 && v3 >= (uint64_t)v11)
          {
LABEL_16:
            v14 = (_QWORD *)(v9 + 8 * v3);
            if (v3 != v6 || v14 >= v10 + 1)
              *v14 = *v10;
            v15 = *(_QWORD *)(a2 + 56);
            v16 = (_DWORD *)(v15 + 4 * v3);
            v17 = (_DWORD *)(v15 + 4 * v6);
            if (v3 != v6 || (v3 = v6, v16 >= v17 + 1))
            {
              *v16 = *v17;
              v3 = v6;
            }
          }
        }
        else if (v11 >= v8 || v3 >= (uint64_t)v11)
        {
          goto LABEL_16;
        }
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v18 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v19 = *v18;
    v20 = (-1 << v3) - 1;
  }
  else
  {
    v18 = (uint64_t *)(v4 + 8 * (result >> 6));
    v20 = *v18;
    v19 = (-1 << result) - 1;
  }
  *v18 = v20 & v19;
  --*(_QWORD *)(a2 + 16);
  ++*(_DWORD *)(a2 + 36);
  return result;
}

unint64_t sub_1B1EA6E0C(unint64_t result, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = result;
  v4 = a2 + 64;
  v5 = (result + 1) & ~(-1 << *(_BYTE *)(a2 + 32));
  if (((1 << v5) & *(_QWORD *)(a2 + 64 + 8 * (v5 >> 6))) != 0)
  {
    result = sub_1B2229370();
    if ((*(_QWORD *)(v4 + 8 * (v5 >> 6)) & (1 << v5)) != 0)
    {
      v6 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 48) + v5);
      sub_1B222A06C();
      __asm { BR              X8 }
    }
    v7 = (uint64_t *)(v4 + 8 * (v3 >> 6));
    v8 = *v7;
    v9 = (-1 << v3) - 1;
  }
  else
  {
    v7 = (uint64_t *)(v4 + 8 * (result >> 6));
    v9 = *v7;
    v8 = (-1 << result) - 1;
  }
  *v7 = v9 & v8;
  --*(_QWORD *)(a2 + 16);
  ++*(_DWORD *)(a2 + 36);
  return result;
}

unint64_t sub_1B1EA70A4(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  const void *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  int v23;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = sub_1B2229370();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v21 = (result + 1) & v7;
      do
      {
        v22 = 72 * v6;
        v8 = *(_QWORD *)(a2 + 48) + 72 * v6;
        v9 = *(_QWORD *)(v8 + 40);
        v10 = *(_QWORD *)(v8 + 56);
        v23 = *(unsigned __int8 *)(v8 + 68);
        sub_1B222A06C();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_1B2228824();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        sub_1B2228824();
        swift_bridgeObjectRelease();
        sub_1B222A084();
        if (v9)
        {
          swift_bridgeObjectRetain();
          sub_1B2228824();
          swift_bridgeObjectRelease();
        }
        if (v10)
        {
          sub_1B222A084();
          swift_bridgeObjectRetain();
          sub_1B2228824();
          swift_bridgeObjectRelease();
          if (v23)
            goto LABEL_10;
        }
        else
        {
          sub_1B222A084();
          if (v23)
          {
LABEL_10:
            sub_1B222A084();
            goto LABEL_13;
          }
        }
        sub_1B222A084();
        sub_1B222A09C();
LABEL_13:
        v11 = sub_1B222A0C0();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        result = swift_bridgeObjectRelease();
        v12 = v11 & v7;
        if (v3 >= (uint64_t)v21)
        {
          if (v12 < v21)
            goto LABEL_5;
        }
        else if (v12 >= v21)
        {
          goto LABEL_18;
        }
        if (v3 >= (uint64_t)v12)
        {
LABEL_18:
          v13 = *(_QWORD *)(a2 + 48);
          result = v13 + 72 * v3;
          v14 = (const void *)(v13 + v22);
          if (72 * v3 < v22 || result >= (unint64_t)v14 + 72 || v3 != v6)
            result = (unint64_t)memmove((void *)result, v14, 0x48uLL);
          v15 = *(_QWORD *)(a2 + 56);
          v16 = (_QWORD *)(v15 + 8 * v3);
          v17 = (_QWORD *)(v15 + 8 * v6);
          if (v3 != v6 || (v3 = v6, v16 >= v17 + 1))
          {
            *v16 = *v17;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v18 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v19 = *v18;
    v20 = (-1 << v3) - 1;
  }
  else
  {
    v18 = (uint64_t *)(v4 + 8 * (result >> 6));
    v20 = *v18;
    v19 = (-1 << result) - 1;
  }
  *v18 = v20 & v19;
  --*(_QWORD *)(a2 + 16);
  ++*(_DWORD *)(a2 + 36);
  return result;
}

unint64_t sub_1B1EA73E4(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  _OWORD *v14;
  uint64_t v15;
  _OWORD *v16;
  _OWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = sub_1B2229370();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        sub_1B222A06C();
        swift_bridgeObjectRetain();
        sub_1B2228824();
        v10 = sub_1B222A0C0();
        result = swift_bridgeObjectRelease();
        v11 = v10 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 < v8)
            goto LABEL_5;
        }
        else if (v11 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v11)
        {
LABEL_11:
          v12 = *(_QWORD *)(a2 + 48);
          v13 = (_OWORD *)(v12 + 16 * v3);
          v14 = (_OWORD *)(v12 + 16 * v6);
          if (v3 != v6 || v13 >= v14 + 1)
            *v13 = *v14;
          v15 = *(_QWORD *)(a2 + 56);
          v16 = (_OWORD *)(v15 + 32 * v3);
          v17 = (_OWORD *)(v15 + 32 * v6);
          if (v3 != v6 || (v3 = v6, v16 >= v17 + 2))
          {
            v9 = v17[1];
            *v16 = *v17;
            v16[1] = v9;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v18 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v19 = *v18;
    v20 = (-1 << v3) - 1;
  }
  else
  {
    v18 = (uint64_t *)(v4 + 8 * (result >> 6));
    v20 = *v18;
    v19 = (-1 << result) - 1;
  }
  *v18 = v20 & v19;
  --*(_QWORD *)(a2 + 16);
  ++*(_DWORD *)(a2 + 36);
  return result;
}

void sub_1B1EA75B0(unint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  __int16 v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  BOOL v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int64_t v32;
  unint64_t v33;
  uint64_t v34;

  v30 = type metadata accessor for TextureCache.TextureKey();
  v4 = *(_QWORD *)(v30 - 8);
  MEMORY[0x1E0C80A78](v30, v5);
  v34 = (uint64_t)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a2 + 64;
  v8 = -1 << *(_BYTE *)(a2 + 32);
  v9 = (a1 + 1) & ~v8;
  if (((1 << v9) & *(_QWORD *)(a2 + 64 + 8 * (v9 >> 6))) != 0)
  {
    v10 = ~v8;
    v11 = sub_1B2229370();
    if ((*(_QWORD *)(v7 + 8 * (v9 >> 6)) & (1 << v9)) != 0)
    {
      v12 = *(_QWORD *)(v4 + 72);
      v27 = v12;
      v28 = (v11 + 1) & v10;
      while (1)
      {
        v13 = *(_QWORD *)(a2 + 48);
        v32 = v12 * v9;
        v33 = a1;
        v14 = v34;
        sub_1B1792810(v13 + v12 * v9, v34, (uint64_t (*)(_QWORD))type metadata accessor for TextureCache.TextureKey);
        sub_1B222A06C();
        sub_1B222A078();
        v15 = v30;
        sub_1B2228110();
        sub_1B19E52CC((unint64_t *)&unk_1ED4B7B10, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], MEMORY[0x1E0CB0018]);
        sub_1B22285E4();
        v16 = v14 + *(int *)(v15 + 24);
        v17 = *(unsigned __int8 *)(v16 + 24);
        v31 = *(_QWORD *)(v16 + 40);
        v29 = *(_QWORD *)(v16 + 48);
        v18 = *(_WORD *)(v16 + 56);
        sub_1B222A078();
        if (v17 >= 0xFE || (sub_1B222A084(), sub_1B222A078(), sub_1B222A078(), sub_1B222A078(), (v17 & 0x80) == 0))
          sub_1B222A084();
        v19 = v28;
        if ((v18 & 0xFF00) != 0x300)
        {
          sub_1B222A084();
          sub_1B222A078();
          sub_1B222A078();
          sub_1B222A084();
          if ((v18 & 1) == 0)
            sub_1B222A078();
        }
        a1 = v33;
        v12 = v27;
        sub_1B222A084();
        v20 = sub_1B222A0C0();
        sub_1B1EB5ECC(v34);
        v21 = v20 & v10;
        if ((uint64_t)a1 >= (uint64_t)v19)
          break;
        if (v21 < v19)
          goto LABEL_17;
LABEL_18:
        if ((uint64_t)(v12 * a1) < v32 || *(_QWORD *)(a2 + 48) + v12 * a1 >= *(_QWORD *)(a2 + 48) + v32 + v12)
        {
          swift_arrayInitWithTakeFrontToBack();
        }
        else if (v12 * a1 != v32)
        {
          swift_arrayInitWithTakeBackToFront();
        }
        if ((uint64_t)(160 * a1) < (uint64_t)(160 * v9)
          || *(_QWORD *)(a2 + 56) + 160 * a1 >= *(_QWORD *)(a2 + 56) + 160 * v9 + 160)
        {
          swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          v22 = a1 == v9;
          a1 = v9;
          if (v22)
            goto LABEL_6;
          swift_arrayInitWithTakeBackToFront();
        }
        a1 = v9;
LABEL_6:
        v9 = (v9 + 1) & v10;
        if (((*(_QWORD *)(v7 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
          goto LABEL_27;
      }
      if (v21 < v19)
        goto LABEL_6;
LABEL_17:
      if ((uint64_t)a1 < (uint64_t)v21)
        goto LABEL_6;
      goto LABEL_18;
    }
LABEL_27:
    v23 = (uint64_t *)(v7 + 8 * (a1 >> 6));
    v24 = *v23;
    v25 = (-1 << a1) - 1;
  }
  else
  {
    v23 = (uint64_t *)(v7 + 8 * (a1 >> 6));
    v25 = *v23;
    v24 = (-1 << a1) - 1;
  }
  *v23 = v25 & v24;
  --*(_QWORD *)(a2 + 16);
  ++*(_DWORD *)(a2 + 36);
}

uint64_t sub_1B1EA7974()
{
  return sub_1B1EA79AC((unint64_t *)&qword_1ED4BA900);
}

uint64_t sub_1B1EA7990()
{
  return sub_1B1EA79AC((unint64_t *)&qword_1ED4BA9D0);
}

uint64_t sub_1B1EA79AC(unint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t result;

  v2 = v1;
  sub_1B1EB6DB4(0, a1);
  v3 = *v1;
  v4 = sub_1B22296B8();
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
    goto LABEL_24;
  v6 = (void *)(v4 + 64);
  v7 = v3 + 64;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)v6 >= v3 + 64 + 8 * v8)
    memmove(v6, (const void *)(v3 + 64), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 64);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v19 = v10 + 1;
    if (v10 + 1 >= v14)
      goto LABEL_24;
    v20 = *(_QWORD *)(v7 + 8 * v19);
    if (!v20)
    {
      v19 = v10 + 2;
      if (v10 + 2 >= v14)
        goto LABEL_24;
      v20 = *(_QWORD *)(v7 + 8 * v19);
      if (!v20)
      {
        v19 = v10 + 3;
        if (v10 + 3 >= v14)
          goto LABEL_24;
        v20 = *(_QWORD *)(v7 + 8 * v19);
        if (!v20)
          break;
      }
    }
LABEL_23:
    v21 = __clz(__rbit64(v20));
    v13 = (v20 - 1) & v20;
    v16 = v21 + (v19 << 6);
    v10 = v19;
LABEL_12:
    v17 = 8 * v16;
    v18 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + 8 * v16);
    *(_QWORD *)(*(_QWORD *)(v5 + 48) + v17) = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v16);
    *(_QWORD *)(*(_QWORD *)(v5 + 56) + v17) = v18;
  }
  while (v14 - 4 != v10)
  {
    v20 = *(_QWORD *)(v3 + 96 + 8 * v10++);
    if (v20)
    {
      v19 = v10 + 3;
      goto LABEL_23;
    }
  }
LABEL_24:
  result = swift_release();
  *v2 = v5;
  return result;
}

uint64_t sub_1B1EA7B38()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t result;

  v1 = v0;
  sub_1B1B9CD24();
  v2 = *v0;
  v3 = sub_1B22296B8();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
    goto LABEL_24;
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (v9 + 1 >= v13)
      goto LABEL_24;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    if (!v21)
    {
      v20 = v9 + 2;
      if (v9 + 2 >= v13)
        goto LABEL_24;
      v21 = *(_QWORD *)(v6 + 8 * v20);
      if (!v21)
      {
        v20 = v9 + 3;
        if (v9 + 3 >= v13)
          goto LABEL_24;
        v21 = *(_QWORD *)(v6 + 8 * v20);
        if (!v21)
          break;
      }
    }
LABEL_23:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v20 << 6);
    v9 = v20;
LABEL_12:
    v16 = 4 * v15;
    v17 = *(_DWORD *)(*(_QWORD *)(v2 + 48) + 4 * v15);
    v18 = 8 * v15;
    v19 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v18);
    *(_DWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v18) = v19;
    swift_retain();
  }
  while (v13 - 4 != v9)
  {
    v21 = *(_QWORD *)(v2 + 96 + 8 * v9++);
    if (v21)
    {
      v20 = v9 + 3;
      goto LABEL_23;
    }
  }
LABEL_24:
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_1B1EA7CD0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t result;

  v1 = v0;
  sub_1B1EB6DB4(0, (unint64_t *)&qword_1ED4BA970);
  v2 = *v0;
  v3 = sub_1B22296B8();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
    goto LABEL_24;
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v23 = v9 + 1;
    if (v9 + 1 >= v13)
      goto LABEL_24;
    v24 = *(_QWORD *)(v6 + 8 * v23);
    if (!v24)
    {
      v23 = v9 + 2;
      if (v9 + 2 >= v13)
        goto LABEL_24;
      v24 = *(_QWORD *)(v6 + 8 * v23);
      if (!v24)
      {
        v23 = v9 + 3;
        if (v9 + 3 >= v13)
          goto LABEL_24;
        v24 = *(_QWORD *)(v6 + 8 * v23);
        if (!v24)
          break;
      }
    }
LABEL_23:
    v12 = (v24 - 1) & v24;
    v15 = __clz(__rbit64(v24)) + (v23 << 6);
    v9 = v23;
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v18 = 24 * v15;
    v19 = *(_QWORD *)(v2 + 56) + v18;
    v20 = *(_QWORD *)(v19 + 16);
    v21 = *(_OWORD *)v19;
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    v22 = *(_QWORD *)(v4 + 56) + v18;
    *(_OWORD *)v22 = v21;
    *(_QWORD *)(v22 + 16) = v20;
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  while (v13 - 4 != v9)
  {
    v24 = *(_QWORD *)(v2 + 96 + 8 * v9++);
    if (v24)
    {
      v23 = v9 + 3;
      goto LABEL_23;
    }
  }
LABEL_24:
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_1B1EA7EC0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t result;

  v1 = v0;
  sub_1B1EB5A78();
  v2 = *v0;
  v3 = sub_1B22296B8();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
    goto LABEL_24;
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v18 = v9 + 1;
    if (v9 + 1 >= v13)
      goto LABEL_24;
    v19 = *(_QWORD *)(v6 + 8 * v18);
    if (!v19)
    {
      v18 = v9 + 2;
      if (v9 + 2 >= v13)
        goto LABEL_24;
      v19 = *(_QWORD *)(v6 + 8 * v18);
      if (!v19)
      {
        v18 = v9 + 3;
        if (v9 + 3 >= v13)
          goto LABEL_24;
        v19 = *(_QWORD *)(v6 + 8 * v18);
        if (!v19)
          break;
      }
    }
LABEL_23:
    v12 = (v19 - 1) & v19;
    v15 = __clz(__rbit64(v19)) + (v18 << 6);
    v9 = v18;
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v15);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v16) = v17;
    swift_retain();
    swift_bridgeObjectRetain();
  }
  while (v13 - 4 != v9)
  {
    v19 = *(_QWORD *)(v2 + 96 + 8 * v9++);
    if (v19)
    {
      v18 = v9 + 3;
      goto LABEL_23;
    }
  }
LABEL_24:
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_1B1EA805C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t result;
  uint64_t *v29;
  void *__src;
  _OWORD v31[5];
  uint64_t v32;

  v1 = v0;
  sub_1B1EB6DB4(0, (unint64_t *)&qword_1EEF5B370);
  v2 = *v0;
  v3 = sub_1B22296B8();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
    goto LABEL_26;
  }
  v5 = (void *)(v3 + 64);
  v6 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  v29 = v1;
  __src = (void *)(v2 + 64);
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v6)
    memmove(v5, __src, 8 * v6);
  v8 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v9 = 1 << *(_BYTE *)(v2 + 32);
  v10 = -1;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  v11 = v10 & *(_QWORD *)(v2 + 64);
  v12 = (unint64_t)(v9 + 63) >> 6;
  while (1)
  {
    if (v11)
    {
      v13 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v14 = v13 | (v8 << 6);
      goto LABEL_12;
    }
    v26 = v8 + 1;
    if (v8 + 1 >= v12)
      goto LABEL_24;
    v27 = *((_QWORD *)__src + v26);
    if (!v27)
    {
      v26 = v8 + 2;
      if (v8 + 2 >= v12)
        goto LABEL_24;
      v27 = *((_QWORD *)__src + v26);
      if (!v27)
      {
        v26 = v8 + 3;
        if (v8 + 3 >= v12)
          goto LABEL_24;
        v27 = *((_QWORD *)__src + v26);
        if (!v27)
          break;
      }
    }
LABEL_23:
    v11 = (v27 - 1) & v27;
    v14 = __clz(__rbit64(v27)) + (v26 << 6);
    v8 = v26;
LABEL_12:
    v15 = 16 * v14;
    v16 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v14);
    v18 = *v16;
    v17 = v16[1];
    v19 = 88 * v14;
    sub_1B19F8F0C(*(_QWORD *)(v2 + 56) + 88 * v14, (uint64_t)v31);
    v20 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v15);
    *v20 = v18;
    v20[1] = v17;
    v21 = *(_QWORD *)(v4 + 56) + v19;
    v22 = v31[1];
    *(_OWORD *)v21 = v31[0];
    v23 = v31[2];
    v24 = v31[3];
    v25 = v31[4];
    *(_QWORD *)(v21 + 80) = v32;
    *(_OWORD *)(v21 + 48) = v24;
    *(_OWORD *)(v21 + 64) = v25;
    *(_OWORD *)(v21 + 16) = v22;
    *(_OWORD *)(v21 + 32) = v23;
    swift_bridgeObjectRetain();
  }
  while (v12 - 4 != v8)
  {
    v27 = *(_QWORD *)(v2 + 8 * v8++ + 96);
    if (v27)
    {
      v26 = v8 + 3;
      goto LABEL_23;
    }
  }
LABEL_24:
  result = swift_release();
  v1 = v29;
LABEL_26:
  *v1 = v4;
  return result;
}

uint64_t sub_1B1EA8284()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t result;

  v1 = v0;
  sub_1B1EB5840(0, (unint64_t *)&unk_1ED4BA940);
  v2 = *v0;
  v3 = sub_1B22296B8();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
    goto LABEL_24;
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (v9 + 1 >= v13)
      goto LABEL_24;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    if (!v23)
    {
      v22 = v9 + 2;
      if (v9 + 2 >= v13)
        goto LABEL_24;
      v23 = *(_QWORD *)(v6 + 8 * v22);
      if (!v23)
      {
        v22 = v9 + 3;
        if (v9 + 3 >= v13)
          goto LABEL_24;
        v23 = *(_QWORD *)(v6 + 8 * v22);
        if (!v23)
          break;
      }
    }
LABEL_23:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v22 << 6);
    v9 = v22;
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = v17[1];
    v19 = 8 * v15;
    v20 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v19);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = *v17;
    v21[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
  }
  while (v13 - 4 != v9)
  {
    v23 = *(_QWORD *)(v2 + 96 + 8 * v9++);
    if (v23)
    {
      v22 = v9 + 3;
      goto LABEL_23;
    }
  }
LABEL_24:
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_1B1EA8444()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t result;
  uint64_t *v29;
  void *__src;

  sub_1B1EB6DB4(0, (unint64_t *)&unk_1ED4BB480);
  v29 = v0;
  v1 = *v0;
  v2 = sub_1B22296B8();
  v3 = v2;
  if (!*(_QWORD *)(v1 + 16))
    goto LABEL_24;
  v4 = (void *)(v2 + 64);
  v5 = (unint64_t)((1 << *(_BYTE *)(v3 + 32)) + 63) >> 6;
  __src = (void *)(v1 + 64);
  if (v3 != v1 || (unint64_t)v4 >= v1 + 64 + 8 * v5)
    memmove(v4, __src, 8 * v5);
  v7 = 0;
  *(_QWORD *)(v3 + 16) = *(_QWORD *)(v1 + 16);
  v8 = 1 << *(_BYTE *)(v1 + 32);
  v9 = -1;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  v10 = v9 & *(_QWORD *)(v1 + 64);
  v11 = (unint64_t)(v8 + 63) >> 6;
  while (1)
  {
    if (v10)
    {
      v12 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v13 = v12 | (v7 << 6);
      goto LABEL_12;
    }
    v26 = v7 + 1;
    if (v7 + 1 >= v11)
      goto LABEL_24;
    v27 = *((_QWORD *)__src + v26);
    if (!v27)
    {
      v26 = v7 + 2;
      if (v7 + 2 >= v11)
        goto LABEL_24;
      v27 = *((_QWORD *)__src + v26);
      if (!v27)
      {
        v26 = v7 + 3;
        if (v7 + 3 >= v11)
          goto LABEL_24;
        v27 = *((_QWORD *)__src + v26);
        if (!v27)
          break;
      }
    }
LABEL_23:
    v10 = (v27 - 1) & v27;
    v13 = __clz(__rbit64(v27)) + (v26 << 6);
    v7 = v26;
LABEL_12:
    v14 = 16 * v13;
    v15 = *(_QWORD *)(v1 + 56);
    v16 = (_QWORD *)(*(_QWORD *)(v1 + 48) + 16 * v13);
    v17 = v16[1];
    v18 = 40 * v13;
    v19 = *(_QWORD *)(v15 + v18);
    v20 = *(_QWORD *)(v15 + v18 + 8);
    v21 = *(_QWORD *)(v15 + v18 + 16);
    v22 = *(_QWORD *)(v15 + v18 + 24);
    v23 = *(_QWORD *)(v15 + v18 + 32);
    v24 = (_QWORD *)(*(_QWORD *)(v3 + 48) + v14);
    *v24 = *v16;
    v24[1] = v17;
    v25 = (uint64_t *)(*(_QWORD *)(v3 + 56) + v18);
    *v25 = v19;
    v25[1] = v20;
    v25[2] = v21;
    v25[3] = v22;
    v25[4] = v23;
    swift_bridgeObjectRetain();
    sub_1B19FA2B4(v19, v20);
  }
  while (v11 - 4 != v7)
  {
    v27 = *(_QWORD *)(v1 + 96 + 8 * v7++);
    if (v27)
    {
      v26 = v7 + 3;
      goto LABEL_23;
    }
  }
LABEL_24:
  result = swift_release();
  *v29 = v3;
  return result;
}

uint64_t sub_1B1EA8664()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t result;

  v1 = v0;
  sub_1B1EB6DB4(0, (unint64_t *)&qword_1EEF5B360);
  v2 = *v0;
  v3 = sub_1B22296B8();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
    goto LABEL_24;
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v25 = v9 + 1;
    if (v9 + 1 >= v13)
      goto LABEL_24;
    v26 = *(_QWORD *)(v6 + 8 * v25);
    if (!v26)
    {
      v25 = v9 + 2;
      if (v9 + 2 >= v13)
        goto LABEL_24;
      v26 = *(_QWORD *)(v6 + 8 * v25);
      if (!v26)
      {
        v25 = v9 + 3;
        if (v9 + 3 >= v13)
          goto LABEL_24;
        v26 = *(_QWORD *)(v6 + 8 * v25);
        if (!v26)
          break;
      }
    }
LABEL_23:
    v12 = (v26 - 1) & v26;
    v15 = __clz(__rbit64(v26)) + (v25 << 6);
    v9 = v25;
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = (uint64_t *)(*(_QWORD *)(v2 + 56) + v16);
    v21 = *v20;
    v22 = v20[1];
    v23 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v23 = v19;
    v23[1] = v18;
    v24 = (_QWORD *)(*(_QWORD *)(v4 + 56) + v16);
    *v24 = v21;
    v24[1] = v22;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  while (v13 - 4 != v9)
  {
    v26 = *(_QWORD *)(v2 + 96 + 8 * v9++);
    if (v26)
    {
      v25 = v9 + 3;
      goto LABEL_23;
    }
  }
LABEL_24:
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_1B1EA882C()
{
  return sub_1B1EA9D38(sub_1B1EB6224);
}

uint64_t sub_1B1EA8838()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  unint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  void (*v24)(char *, unint64_t, uint64_t);
  void (*v25)(unint64_t, char *, uint64_t);
  uint64_t v26;
  unint64_t v27;
  uint64_t result;
  int64_t v29;
  uint64_t *v30;
  const void *v31;
  int64_t v32;

  v1 = v0;
  v2 = sub_1B222826C();
  v3 = *(_QWORD **)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)&v29 - v9;
  sub_1B1B9D198(0, (unint64_t *)&unk_1ED4BA880, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DECD58]);
  v11 = *v0;
  v12 = sub_1B22296B8();
  v13 = v12;
  if (!*(_QWORD *)(v11 + 16))
  {
    result = swift_release();
    goto LABEL_26;
  }
  v14 = (void *)(v12 + 64);
  v15 = (unint64_t)((1 << *(_BYTE *)(v13 + 32)) + 63) >> 6;
  v30 = v1;
  v31 = (const void *)(v11 + 64);
  if (v13 != v11 || (unint64_t)v14 >= v11 + 64 + 8 * v15)
    memmove(v14, v31, 8 * v15);
  v17 = 0;
  *(_QWORD *)(v13 + 16) = *(_QWORD *)(v11 + 16);
  v18 = 1 << *(_BYTE *)(v11 + 32);
  v19 = -1;
  if (v18 < 64)
    v19 = ~(-1 << v18);
  v20 = v19 & *(_QWORD *)(v11 + 64);
  v32 = (unint64_t)(v18 + 63) >> 6;
  v29 = v32 - 4;
  while (1)
  {
    if (v20)
    {
      v21 = __clz(__rbit64(v20));
      v20 &= v20 - 1;
      v22 = v21 | (v17 << 6);
      goto LABEL_12;
    }
    v26 = v17 + 1;
    if (v17 + 1 >= v32)
      goto LABEL_24;
    v27 = *((_QWORD *)v31 + v26);
    if (!v27)
    {
      v26 = v17 + 2;
      if (v17 + 2 >= v32)
        goto LABEL_24;
      v27 = *((_QWORD *)v31 + v26);
      if (!v27)
      {
        v26 = v17 + 3;
        if (v17 + 3 >= v32)
          goto LABEL_24;
        v27 = *((_QWORD *)v31 + v26);
        if (!v27)
          break;
      }
    }
LABEL_23:
    v20 = (v27 - 1) & v27;
    v22 = __clz(__rbit64(v27)) + (v26 << 6);
    v17 = v26;
LABEL_12:
    v23 = v3[9] * v22;
    v24 = (void (*)(char *, unint64_t, uint64_t))v3[2];
    v24(v10, *(_QWORD *)(v11 + 48) + v23, v2);
    v24(v6, *(_QWORD *)(v11 + 56) + v23, v2);
    v25 = (void (*)(unint64_t, char *, uint64_t))v3[4];
    v25(*(_QWORD *)(v13 + 48) + v23, v10, v2);
    v25(*(_QWORD *)(v13 + 56) + v23, v6, v2);
  }
  while (v29 != v17)
  {
    v27 = *(_QWORD *)(v11 + 8 * v17++ + 96);
    if (v27)
    {
      v26 = v17 + 3;
      goto LABEL_23;
    }
  }
LABEL_24:
  result = swift_release();
  v1 = v30;
LABEL_26:
  *v1 = v13;
  return result;
}

uint64_t sub_1B1EA8AAC()
{
  return sub_1B1EAA82C((void (*)(_QWORD))sub_1B1B9D124);
}

uint64_t sub_1B1EA8AB8()
{
  return sub_1B1EA9D38(sub_1B1EB6A3C);
}

uint64_t sub_1B1EA8AC4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t result;

  v1 = v0;
  sub_1B1EB6DB4(0, (unint64_t *)&unk_1EEF5FF90);
  v2 = *v0;
  v3 = sub_1B22296B8();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
    goto LABEL_24;
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v16 = v9 + 1;
    if (v9 + 1 >= v13)
      goto LABEL_24;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    if (!v17)
    {
      v16 = v9 + 2;
      if (v9 + 2 >= v13)
        goto LABEL_24;
      v17 = *(_QWORD *)(v6 + 8 * v16);
      if (!v17)
      {
        v16 = v9 + 3;
        if (v9 + 3 >= v13)
          goto LABEL_24;
        v17 = *(_QWORD *)(v6 + 8 * v16);
        if (!v17)
          break;
      }
    }
LABEL_23:
    v18 = __clz(__rbit64(v17));
    v12 = (v17 - 1) & v17;
    v15 = v18 + (v16 << 6);
    v9 = v16;
LABEL_12:
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v15) = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
  }
  while (v13 - 4 != v9)
  {
    v17 = *(_QWORD *)(v2 + 96 + 8 * v9++);
    if (v17)
    {
      v16 = v9 + 3;
      goto LABEL_23;
    }
  }
LABEL_24:
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_1B1EA8C54()
{
  return sub_1B1EAAD90((unint64_t *)&qword_1EEF5B4A8);
}

uint64_t sub_1B1EA8C78()
{
  return sub_1B1EB09CC((void (*)(_QWORD))sub_1B1EB6C30);
}

uint64_t sub_1B1EA8C84()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t result;

  v1 = v0;
  sub_1B1EB6DB4(0, (unint64_t *)&qword_1EEF5B8E0);
  v2 = *v0;
  v3 = sub_1B22296B8();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
    goto LABEL_24;
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (v9 + 1 >= v13)
      goto LABEL_24;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    if (!v21)
    {
      v20 = v9 + 2;
      if (v9 + 2 >= v13)
        goto LABEL_24;
      v21 = *(_QWORD *)(v6 + 8 * v20);
      if (!v21)
      {
        v20 = v9 + 3;
        if (v9 + 3 >= v13)
          goto LABEL_24;
        v21 = *(_QWORD *)(v6 + 8 * v20);
        if (!v21)
          break;
      }
    }
LABEL_23:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v20 << 6);
    v9 = v20;
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v18 = 16 * v15;
    v19 = *(_OWORD *)(*(_QWORD *)(v2 + 56) + v18);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    *(_OWORD *)(*(_QWORD *)(v4 + 56) + v18) = v19;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  while (v13 - 4 != v9)
  {
    v21 = *(_QWORD *)(v2 + 96 + 8 * v9++);
    if (v21)
    {
      v20 = v9 + 3;
      goto LABEL_23;
    }
  }
LABEL_24:
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_1B1EA8E58()
{
  return sub_1B1EB09CC((void (*)(_QWORD))sub_1B1B9D9EC);
}

uint64_t sub_1B1EA8E64()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t result;

  v1 = v0;
  sub_1B1B9DB0C();
  v2 = *v0;
  v3 = sub_1B22296B8();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
    goto LABEL_24;
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v25 = v9 + 1;
    if (v9 + 1 >= v13)
      goto LABEL_24;
    v26 = *(_QWORD *)(v6 + 8 * v25);
    if (!v26)
    {
      v25 = v9 + 2;
      if (v9 + 2 >= v13)
        goto LABEL_24;
      v26 = *(_QWORD *)(v6 + 8 * v25);
      if (!v26)
      {
        v25 = v9 + 3;
        if (v9 + 3 >= v13)
          goto LABEL_24;
        v26 = *(_QWORD *)(v6 + 8 * v25);
        if (!v26)
          break;
      }
    }
LABEL_23:
    v12 = (v26 - 1) & v26;
    v15 = __clz(__rbit64(v26)) + (v25 << 6);
    v9 = v25;
LABEL_12:
    v16 = 24 * v15;
    v17 = *(_QWORD *)(v2 + 48) + 24 * v15;
    v18 = *(void **)v17;
    v19 = *(void **)(v17 + 8);
    v20 = *(unsigned __int8 *)(v17 + 20);
    v21 = *(unsigned int *)(v17 + 16);
    v22 = 8 * v15;
    v23 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v22);
    v24 = *(_QWORD *)(v4 + 48) + v16;
    *(_QWORD *)v24 = v18;
    *(_QWORD *)(v24 + 8) = v19;
    *(_DWORD *)(v24 + 16) = v21;
    *(_BYTE *)(v24 + 20) = v20;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v22) = v23;
    sub_1B1A026F0(v18, v19, v21 | (v20 << 32));
    swift_bridgeObjectRetain();
  }
  while (v13 - 4 != v9)
  {
    v26 = *(_QWORD *)(v2 + 96 + 8 * v9++);
    if (v26)
    {
      v25 = v9 + 3;
      goto LABEL_23;
    }
  }
LABEL_24:
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_1B1EA9024()
{
  return sub_1B1EA9D38((void (*)(_QWORD))sub_1B1EB67B8);
}

uint64_t sub_1B1EA9030()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t result;

  v1 = v0;
  sub_1B1B9D840();
  v2 = *v0;
  v3 = sub_1B22296B8();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
    goto LABEL_24;
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v32 = v9 + 1;
    if (v9 + 1 >= v13)
      goto LABEL_24;
    v33 = *(_QWORD *)(v6 + 8 * v32);
    if (!v33)
    {
      v32 = v9 + 2;
      if (v9 + 2 >= v13)
        goto LABEL_24;
      v33 = *(_QWORD *)(v6 + 8 * v32);
      if (!v33)
      {
        v32 = v9 + 3;
        if (v9 + 3 >= v13)
          goto LABEL_24;
        v33 = *(_QWORD *)(v6 + 8 * v32);
        if (!v33)
          break;
      }
    }
LABEL_23:
    v12 = (v33 - 1) & v33;
    v15 = __clz(__rbit64(v33)) + (v32 << 6);
    v9 = v32;
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v18 = 88 * v15;
    v19 = (uint64_t *)(*(_QWORD *)(v2 + 56) + v18);
    v20 = *v19;
    v21 = v19[1];
    v22 = v19[2];
    v23 = v19[3];
    v24 = v19[4];
    v25 = v19[5];
    v26 = v19[6];
    v27 = v19[7];
    v28 = v19[8];
    v29 = v19[9];
    v30 = v19[10];
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    v31 = (uint64_t *)(*(_QWORD *)(v4 + 56) + v18);
    *v31 = v20;
    v31[1] = v21;
    v31[2] = v22;
    v31[3] = v23;
    v31[4] = v24;
    v31[5] = v25;
    v31[6] = v26;
    v31[7] = v27;
    v31[8] = v28;
    v31[9] = v29;
    v31[10] = v30;
    sub_1B1B9D8BC(v20);
  }
  while (v13 - 4 != v9)
  {
    v33 = *(_QWORD *)(v2 + 96 + 8 * v9++);
    if (v33)
    {
      v32 = v9 + 3;
      goto LABEL_23;
    }
  }
LABEL_24:
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_1B1EA920C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t result;

  v1 = v0;
  sub_1B1EB6DB4(0, (unint64_t *)&qword_1EEF5FFE0);
  v2 = *v0;
  v3 = sub_1B22296B8();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
    goto LABEL_24;
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v18 = v9 + 1;
    if (v9 + 1 >= v13)
      goto LABEL_24;
    v19 = *(_QWORD *)(v6 + 8 * v18);
    if (!v19)
    {
      v18 = v9 + 2;
      if (v9 + 2 >= v13)
        goto LABEL_24;
      v19 = *(_QWORD *)(v6 + 8 * v18);
      if (!v19)
      {
        v18 = v9 + 3;
        if (v9 + 3 >= v13)
          goto LABEL_24;
        v19 = *(_QWORD *)(v6 + 8 * v18);
        if (!v19)
          break;
      }
    }
LABEL_23:
    v20 = __clz(__rbit64(v19));
    v12 = (v19 - 1) & v19;
    v15 = v20 + (v18 << 6);
    v9 = v18;
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v15);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v16) = v17;
  }
  while (v13 - 4 != v9)
  {
    v19 = *(_QWORD *)(v2 + 96 + 8 * v9++);
    if (v19)
    {
      v18 = v9 + 3;
      goto LABEL_23;
    }
  }
LABEL_24:
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_1B1EA93A4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  void (*v23)(unint64_t, char *, uint64_t);
  uint64_t v24;
  unint64_t v25;
  uint64_t result;
  uint64_t v27;
  int64_t v28;
  uint64_t *v29;
  const void *v30;
  __int128 v31;

  v1 = v0;
  v2 = sub_1B222826C();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1B1EB5F2C();
  v7 = *v0;
  v8 = sub_1B22296B8();
  v9 = v8;
  if (!*(_QWORD *)(v7 + 16))
  {
    result = swift_release();
    goto LABEL_26;
  }
  v10 = (void *)(v8 + 64);
  v11 = (unint64_t)((1 << *(_BYTE *)(v9 + 32)) + 63) >> 6;
  v29 = v1;
  v30 = (const void *)(v7 + 64);
  if (v9 != v7 || (unint64_t)v10 >= v7 + 64 + 8 * v11)
    memmove(v10, v30, 8 * v11);
  v13 = 0;
  *(_QWORD *)(v9 + 16) = *(_QWORD *)(v7 + 16);
  v14 = 1 << *(_BYTE *)(v7 + 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & *(_QWORD *)(v7 + 64);
  v17 = (unint64_t)(v14 + 63) >> 6;
  v28 = v17 - 4;
  while (1)
  {
    if (v16)
    {
      v18 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v19 = v18 | (v13 << 6);
      goto LABEL_12;
    }
    v24 = v13 + 1;
    if (v13 + 1 >= v17)
      goto LABEL_24;
    v25 = *((_QWORD *)v30 + v24);
    if (!v25)
    {
      v24 = v13 + 2;
      if (v13 + 2 >= v17)
        goto LABEL_24;
      v25 = *((_QWORD *)v30 + v24);
      if (!v25)
      {
        v24 = v13 + 3;
        if (v13 + 3 >= v17)
          goto LABEL_24;
        v25 = *((_QWORD *)v30 + v24);
        if (!v25)
          break;
      }
    }
LABEL_23:
    v16 = (v25 - 1) & v25;
    v19 = __clz(__rbit64(v25)) + (v24 << 6);
    v13 = v24;
LABEL_12:
    v20 = *(_QWORD *)(v3 + 72) * v19;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v6, *(_QWORD *)(v7 + 48) + v20, v2);
    v21 = 16 * v19;
    v22 = *(_QWORD *)(v9 + 48) + v20;
    v23 = *(void (**)(unint64_t, char *, uint64_t))(v3 + 32);
    v31 = *(_OWORD *)(*(_QWORD *)(v7 + 56) + v21);
    v23(v22, v6, v2);
    *(_OWORD *)(*(_QWORD *)(v9 + 56) + v21) = v31;
    swift_retain();
  }
  while (v28 != v13)
  {
    v25 = *(_QWORD *)(v7 + 8 * v13++ + 96);
    if (v25)
    {
      v24 = v13 + 3;
      goto LABEL_23;
    }
  }
LABEL_24:
  result = swift_release();
  v1 = v29;
LABEL_26:
  *v1 = v9;
  return result;
}

uint64_t sub_1B1EA95D8()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  __int128 v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t result;

  v1 = v0;
  sub_1B1B9C780();
  v2 = *v0;
  v3 = sub_1B22296B8();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
    goto LABEL_24;
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v17 = v9 + 1;
    if (v9 + 1 >= v13)
      goto LABEL_24;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
    {
      v17 = v9 + 2;
      if (v9 + 2 >= v13)
        goto LABEL_24;
      v18 = *(_QWORD *)(v6 + 8 * v17);
      if (!v18)
      {
        v17 = v9 + 3;
        if (v9 + 3 >= v13)
          goto LABEL_24;
        v18 = *(_QWORD *)(v6 + 8 * v17);
        if (!v18)
          break;
      }
    }
LABEL_23:
    v12 = (v18 - 1) & v18;
    v15 = __clz(__rbit64(v18)) + (v17 << 6);
    v9 = v17;
LABEL_12:
    v16 = *(_OWORD *)(*(_QWORD *)(v2 + 56) + 16 * v15);
    *(_BYTE *)(*(_QWORD *)(v4 + 48) + v15) = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v15);
    *(_OWORD *)(*(_QWORD *)(v4 + 56) + 16 * v15) = v16;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  while (v13 - 4 != v9)
  {
    v18 = *(_QWORD *)(v2 + 96 + 8 * v9++);
    if (v18)
    {
      v17 = v9 + 3;
      goto LABEL_23;
    }
  }
LABEL_24:
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_1B1EA9788()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t result;

  v1 = v0;
  sub_1B1EB65A0();
  v2 = *v0;
  v3 = sub_1B22296B8();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
    goto LABEL_24;
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v26 = v9 + 1;
    if (v9 + 1 >= v13)
      goto LABEL_24;
    v27 = *(_QWORD *)(v6 + 8 * v26);
    if (!v27)
    {
      v26 = v9 + 2;
      if (v9 + 2 >= v13)
        goto LABEL_24;
      v27 = *(_QWORD *)(v6 + 8 * v26);
      if (!v27)
      {
        v26 = v9 + 3;
        if (v9 + 3 >= v13)
          goto LABEL_24;
        v27 = *(_QWORD *)(v6 + 8 * v26);
        if (!v27)
          break;
      }
    }
LABEL_23:
    v12 = (v27 - 1) & v27;
    v15 = __clz(__rbit64(v27)) + (v26 << 6);
    v9 = v26;
LABEL_12:
    v16 = 40 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 40 * v15);
    v18 = *v17;
    v19 = v17[1];
    v20 = v17[2];
    v21 = v17[3];
    v22 = v17[4];
    v23 = 8 * v15;
    v24 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v23);
    v25 = (uint64_t *)(*(_QWORD *)(v4 + 48) + v16);
    *v25 = *v17;
    v25[1] = v19;
    v25[2] = v20;
    v25[3] = v21;
    v25[4] = v22;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v23) = v24;
    sub_1B19FA2B4(v18, v19);
    swift_bridgeObjectRetain();
  }
  while (v13 - 4 != v9)
  {
    v27 = *(_QWORD *)(v2 + 96 + 8 * v9++);
    if (v27)
    {
      v26 = v9 + 3;
      goto LABEL_23;
    }
  }
LABEL_24:
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_1B1EA9944()
{
  return sub_1B1EB1284(sub_1B1EB6558);
}

uint64_t sub_1B1EA9950()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t result;
  uint64_t v25;
  int64_t v26;
  uint64_t *v27;
  const void *v28;
  _OWORD v29[2];

  v1 = v0;
  v2 = sub_1B2229610();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1B1B9A9BC();
  v7 = *v0;
  v8 = sub_1B22296B8();
  v9 = v8;
  if (!*(_QWORD *)(v7 + 16))
  {
    result = swift_release();
    goto LABEL_26;
  }
  v10 = (void *)(v8 + 64);
  v11 = (unint64_t)((1 << *(_BYTE *)(v9 + 32)) + 63) >> 6;
  v27 = v1;
  v28 = (const void *)(v7 + 64);
  if (v9 != v7 || (unint64_t)v10 >= v7 + 64 + 8 * v11)
    memmove(v10, v28, 8 * v11);
  v13 = 0;
  *(_QWORD *)(v9 + 16) = *(_QWORD *)(v7 + 16);
  v14 = 1 << *(_BYTE *)(v7 + 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & *(_QWORD *)(v7 + 64);
  v17 = (unint64_t)(v14 + 63) >> 6;
  v26 = v17 - 4;
  while (1)
  {
    if (v16)
    {
      v18 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v19 = v18 | (v13 << 6);
      goto LABEL_12;
    }
    v22 = v13 + 1;
    if (v13 + 1 >= v17)
      goto LABEL_24;
    v23 = *((_QWORD *)v28 + v22);
    if (!v23)
    {
      v22 = v13 + 2;
      if (v13 + 2 >= v17)
        goto LABEL_24;
      v23 = *((_QWORD *)v28 + v22);
      if (!v23)
      {
        v22 = v13 + 3;
        if (v13 + 3 >= v17)
          goto LABEL_24;
        v23 = *((_QWORD *)v28 + v22);
        if (!v23)
          break;
      }
    }
LABEL_23:
    v16 = (v23 - 1) & v23;
    v19 = __clz(__rbit64(v23)) + (v22 << 6);
    v13 = v22;
LABEL_12:
    v20 = *(_QWORD *)(v3 + 72) * v19;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v6, *(_QWORD *)(v7 + 48) + v20, v2);
    v21 = 32 * v19;
    sub_1B1A02864(*(_QWORD *)(v7 + 56) + v21, (uint64_t)v29);
    (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(v9 + 48) + v20, v6, v2);
    sub_1B1A0DDAC(v29, (_OWORD *)(*(_QWORD *)(v9 + 56) + v21));
  }
  while (v26 != v13)
  {
    v23 = *(_QWORD *)(v7 + 8 * v13++ + 96);
    if (v23)
    {
      v22 = v13 + 3;
      goto LABEL_23;
    }
  }
LABEL_24:
  result = swift_release();
  v1 = v27;
LABEL_26:
  *v1 = v9;
  return result;
}

uint64_t sub_1B1EA9B84()
{
  return sub_1B1EB1284(sub_1B1EB5BE4);
}

uint64_t sub_1B1EA9B90()
{
  return sub_1B1EB1284(sub_1B1EB5F08);
}

uint64_t sub_1B1EA9B9C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t result;

  v1 = v0;
  sub_1B1B9D218();
  v2 = *v0;
  v3 = sub_1B22296B8();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
    goto LABEL_24;
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v18 = v9 + 1;
    if (v9 + 1 >= v13)
      goto LABEL_24;
    v19 = *(_QWORD *)(v6 + 8 * v18);
    if (!v19)
    {
      v18 = v9 + 2;
      if (v9 + 2 >= v13)
        goto LABEL_24;
      v19 = *(_QWORD *)(v6 + 8 * v18);
      if (!v19)
      {
        v18 = v9 + 3;
        if (v9 + 3 >= v13)
          goto LABEL_24;
        v19 = *(_QWORD *)(v6 + 8 * v18);
        if (!v19)
          break;
      }
    }
LABEL_23:
    v20 = __clz(__rbit64(v19));
    v12 = (v19 - 1) & v19;
    v15 = v20 + (v18 << 6);
    v9 = v18;
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v15);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v16) = v17;
  }
  while (v13 - 4 != v9)
  {
    v19 = *(_QWORD *)(v2 + 96 + 8 * v9++);
    if (v19)
    {
      v18 = v9 + 3;
      goto LABEL_23;
    }
  }
LABEL_24:
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_1B1EA9D14()
{
  return sub_1B1EB09CC((void (*)(_QWORD))sub_1B1EB69C0);
}

uint64_t sub_1B1EA9D20()
{
  return sub_1B1EA9D38((void (*)(_QWORD))sub_1B1EB673C);
}

uint64_t sub_1B1EA9D2C()
{
  return sub_1B1EA9D38(sub_1B1EB5FE4);
}

uint64_t sub_1B1EA9D38(void (*a1)(_QWORD))
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t result;

  v2 = v1;
  a1(0);
  v3 = *v1;
  v4 = sub_1B22296B8();
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
    goto LABEL_24;
  v6 = (void *)(v4 + 64);
  v7 = v3 + 64;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)v6 >= v3 + 64 + 8 * v8)
    memmove(v6, (const void *)(v3 + 64), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 64);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v19 = v10 + 1;
    if (v10 + 1 >= v14)
      goto LABEL_24;
    v20 = *(_QWORD *)(v7 + 8 * v19);
    if (!v20)
    {
      v19 = v10 + 2;
      if (v10 + 2 >= v14)
        goto LABEL_24;
      v20 = *(_QWORD *)(v7 + 8 * v19);
      if (!v20)
      {
        v19 = v10 + 3;
        if (v10 + 3 >= v14)
          goto LABEL_24;
        v20 = *(_QWORD *)(v7 + 8 * v19);
        if (!v20)
          break;
      }
    }
LABEL_23:
    v13 = (v20 - 1) & v20;
    v16 = __clz(__rbit64(v20)) + (v19 << 6);
    v10 = v19;
LABEL_12:
    v17 = 8 * v16;
    v18 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + 8 * v16);
    *(_QWORD *)(*(_QWORD *)(v5 + 48) + v17) = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v16);
    *(_QWORD *)(*(_QWORD *)(v5 + 56) + v17) = v18;
    swift_retain();
  }
  while (v14 - 4 != v10)
  {
    v20 = *(_QWORD *)(v3 + 96 + 8 * v10++);
    if (v20)
    {
      v19 = v10 + 3;
      goto LABEL_23;
    }
  }
LABEL_24:
  result = swift_release();
  *v2 = v5;
  return result;
}

uint64_t sub_1B1EA9ED0()
{
  return sub_1B1EA9F18((uint64_t (*)(_QWORD))sub_1B1EB6CE0, (void (*)(_QWORD, double))sub_1B1EB6CFC, (void (*)(unint64_t, char *))sub_1B1EB6D20, (void (*)(char *, unint64_t))sub_1B1EB6D2C);
}

uint64_t sub_1B1EA9EF4()
{
  return sub_1B1EA9F18((uint64_t (*)(_QWORD))sub_1B1EB6CAC, (void (*)(_QWORD, double))sub_1B1A05728, (void (*)(unint64_t, char *))sub_1B1EB6CC8, (void (*)(char *, unint64_t))sub_1B1EB6CD4);
}

uint64_t sub_1B1EA9F18(uint64_t (*a1)(_QWORD), void (*a2)(_QWORD, double), void (*a3)(unint64_t, char *), void (*a4)(char *, unint64_t))
{
  uint64_t *v4;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  unint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t result;
  uint64_t v31;
  int64_t v32;
  uint64_t *v33;
  const void *v34;
  int64_t v35;
  void (*v36)(char *, unint64_t);

  v36 = a4;
  v7 = v4;
  v8 = a1(0);
  v9 = *(_QWORD *)(v8 - 8);
  v11 = MEMORY[0x1E0C80A78](v8, v10);
  v13 = (char *)&v31 - v12;
  a2(0, v11);
  v14 = *v4;
  v15 = sub_1B22296B8();
  v16 = v15;
  if (!*(_QWORD *)(v14 + 16))
  {
    result = swift_release();
    goto LABEL_26;
  }
  v17 = (void *)(v15 + 64);
  v18 = (unint64_t)((1 << *(_BYTE *)(v16 + 32)) + 63) >> 6;
  v33 = v7;
  v34 = (const void *)(v14 + 64);
  if (v16 != v14 || (unint64_t)v17 >= v14 + 64 + 8 * v18)
    memmove(v17, v34, 8 * v18);
  v20 = 0;
  *(_QWORD *)(v16 + 16) = *(_QWORD *)(v14 + 16);
  v21 = 1 << *(_BYTE *)(v14 + 32);
  v22 = -1;
  if (v21 < 64)
    v22 = ~(-1 << v21);
  v23 = v22 & *(_QWORD *)(v14 + 64);
  v35 = (unint64_t)(v21 + 63) >> 6;
  v32 = v35 - 4;
  while (1)
  {
    if (v23)
    {
      v24 = __clz(__rbit64(v23));
      v23 &= v23 - 1;
      v25 = v24 | (v20 << 6);
      goto LABEL_12;
    }
    v28 = v20 + 1;
    if (v20 + 1 >= v35)
      goto LABEL_24;
    v29 = *((_QWORD *)v34 + v28);
    if (!v29)
    {
      v28 = v20 + 2;
      if (v20 + 2 >= v35)
        goto LABEL_24;
      v29 = *((_QWORD *)v34 + v28);
      if (!v29)
      {
        v28 = v20 + 3;
        if (v20 + 3 >= v35)
          goto LABEL_24;
        v29 = *((_QWORD *)v34 + v28);
        if (!v29)
          break;
      }
    }
LABEL_23:
    v23 = (v29 - 1) & v29;
    v25 = __clz(__rbit64(v29)) + (v28 << 6);
    v20 = v28;
LABEL_12:
    v26 = *(_BYTE *)(*(_QWORD *)(v14 + 48) + v25);
    v27 = *(_QWORD *)(v9 + 72) * v25;
    a3(*(_QWORD *)(v14 + 56) + v27, v13);
    *(_BYTE *)(*(_QWORD *)(v16 + 48) + v25) = v26;
    v36(v13, *(_QWORD *)(v16 + 56) + v27);
  }
  while (v32 != v20)
  {
    v29 = *(_QWORD *)(v14 + 8 * v20++ + 96);
    if (v29)
    {
      v28 = v20 + 3;
      goto LABEL_23;
    }
  }
LABEL_24:
  result = swift_release();
  v7 = v33;
LABEL_26:
  *v7 = v16;
  return result;
}

uint64_t sub_1B1EAA140()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t result;

  v1 = v0;
  sub_1B1EB6DB4(0, (unint64_t *)&qword_1ED4BA910);
  v2 = *v0;
  v3 = sub_1B22296B8();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
    goto LABEL_24;
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v26 = v9 + 1;
    if (v9 + 1 >= v13)
      goto LABEL_24;
    v27 = *(_QWORD *)(v6 + 8 * v26);
    if (!v27)
    {
      v26 = v9 + 2;
      if (v9 + 2 >= v13)
        goto LABEL_24;
      v27 = *(_QWORD *)(v6 + 8 * v26);
      if (!v27)
      {
        v26 = v9 + 3;
        if (v9 + 3 >= v13)
          goto LABEL_24;
        v27 = *(_QWORD *)(v6 + 8 * v26);
        if (!v27)
          break;
      }
    }
LABEL_23:
    v12 = (v27 - 1) & v27;
    v15 = __clz(__rbit64(v27)) + (v26 << 6);
    v9 = v26;
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 24 * v15;
    v21 = *(_QWORD *)(v2 + 56) + v20;
    v22 = *(_QWORD *)v21;
    v23 = *(_QWORD *)(v21 + 8);
    LOBYTE(v21) = *(_BYTE *)(v21 + 16);
    v24 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v24 = v19;
    v24[1] = v18;
    v25 = *(_QWORD *)(v4 + 56) + v20;
    *(_QWORD *)v25 = v22;
    *(_QWORD *)(v25 + 8) = v23;
    *(_BYTE *)(v25 + 16) = v21;
    swift_bridgeObjectRetain();
  }
  while (v13 - 4 != v9)
  {
    v27 = *(_QWORD *)(v2 + 96 + 8 * v9++);
    if (v27)
    {
      v26 = v9 + 3;
      goto LABEL_23;
    }
  }
LABEL_24:
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_1B1EAA314()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t result;

  v1 = v0;
  sub_1B1B9B170();
  v2 = *v0;
  v3 = sub_1B22296B8();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
    goto LABEL_24;
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v17 = v9 + 1;
    if (v9 + 1 >= v13)
      goto LABEL_24;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
    {
      v17 = v9 + 2;
      if (v9 + 2 >= v13)
        goto LABEL_24;
      v18 = *(_QWORD *)(v6 + 8 * v17);
      if (!v18)
      {
        v17 = v9 + 3;
        if (v9 + 3 >= v13)
          goto LABEL_24;
        v18 = *(_QWORD *)(v6 + 8 * v17);
        if (!v18)
          break;
      }
    }
LABEL_23:
    v12 = (v18 - 1) & v18;
    v15 = __clz(__rbit64(v18)) + (v17 << 6);
    v9 = v17;
LABEL_12:
    v16 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v15);
    *(_BYTE *)(*(_QWORD *)(v4 + 48) + v15) = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v15);
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v15) = v16;
    swift_bridgeObjectRetain();
  }
  while (v13 - 4 != v9)
  {
    v18 = *(_QWORD *)(v2 + 96 + 8 * v9++);
    if (v18)
    {
      v17 = v9 + 3;
      goto LABEL_23;
    }
  }
LABEL_24:
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_1B1EAA4A8()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t result;

  v1 = v0;
  sub_1B1EB6DB4(0, (unint64_t *)&qword_1ED4BA980);
  v2 = *v0;
  v3 = sub_1B22296B8();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
    goto LABEL_24;
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v23 = v9 + 1;
    if (v9 + 1 >= v13)
      goto LABEL_24;
    v24 = *(_QWORD *)(v6 + 8 * v23);
    if (!v24)
    {
      v23 = v9 + 2;
      if (v9 + 2 >= v13)
        goto LABEL_24;
      v24 = *(_QWORD *)(v6 + 8 * v23);
      if (!v24)
      {
        v23 = v9 + 3;
        if (v9 + 3 >= v13)
          goto LABEL_24;
        v24 = *(_QWORD *)(v6 + 8 * v23);
        if (!v24)
          break;
      }
    }
LABEL_23:
    v12 = (v24 - 1) & v24;
    v15 = __clz(__rbit64(v24)) + (v23 << 6);
    v9 = v23;
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v18 = 24 * v15;
    v19 = *(_QWORD *)(v2 + 56) + v18;
    v20 = *(_QWORD *)(v19 + 16);
    v21 = *(_OWORD *)v19;
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    v22 = *(_QWORD *)(v4 + 56) + v18;
    *(_OWORD *)v22 = v21;
    *(_QWORD *)(v22 + 16) = v20;
    swift_bridgeObjectRetain();
  }
  while (v13 - 4 != v9)
  {
    v24 = *(_QWORD *)(v2 + 96 + 8 * v9++);
    if (v24)
    {
      v23 = v9 + 3;
      goto LABEL_23;
    }
  }
LABEL_24:
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_1B1EAA678()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t result;

  v1 = v0;
  sub_1B1B9D7E0();
  v2 = *v0;
  v3 = sub_1B22296B8();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
    goto LABEL_24;
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v17 = v9 + 1;
    if (v9 + 1 >= v13)
      goto LABEL_24;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
    {
      v17 = v9 + 2;
      if (v9 + 2 >= v13)
        goto LABEL_24;
      v18 = *(_QWORD *)(v6 + 8 * v17);
      if (!v18)
      {
        v17 = v9 + 3;
        if (v9 + 3 >= v13)
          goto LABEL_24;
        v18 = *(_QWORD *)(v6 + 8 * v17);
        if (!v18)
          break;
      }
    }
LABEL_23:
    v19 = __clz(__rbit64(v18));
    v12 = (v18 - 1) & v18;
    v15 = v19 + (v17 << 6);
    v9 = v17;
LABEL_12:
    v16 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v15);
    *(_BYTE *)(*(_QWORD *)(v4 + 48) + v15) = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v15);
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v15) = v16;
  }
  while (v13 - 4 != v9)
  {
    v18 = *(_QWORD *)(v2 + 96 + 8 * v9++);
    if (v18)
    {
      v17 = v9 + 3;
      goto LABEL_23;
    }
  }
LABEL_24:
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_1B1EAA7F0()
{
  return sub_1B1EAA82C((void (*)(_QWORD))sub_1B1B9C550);
}

uint64_t sub_1B1EAA7FC()
{
  return sub_1B1EB1284(sub_1B1EB6414);
}

uint64_t sub_1B1EAA808()
{
  return sub_1B1EB1284(sub_1B1EB6534);
}

uint64_t sub_1B1EAA814()
{
  return sub_1B1EAA82C(sub_1B1EB5FC0);
}

uint64_t sub_1B1EAA820()
{
  return sub_1B1EAA82C((void (*)(_QWORD))sub_1B1B9B590);
}

uint64_t sub_1B1EAA82C(void (*a1)(_QWORD))
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t result;

  v2 = v1;
  a1(0);
  v3 = *v1;
  v4 = sub_1B22296B8();
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
    goto LABEL_24;
  v6 = (void *)(v4 + 64);
  v7 = v3 + 64;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)v6 >= v3 + 64 + 8 * v8)
    memmove(v6, (const void *)(v3 + 64), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 64);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v23 = v10 + 1;
    if (v10 + 1 >= v14)
      goto LABEL_24;
    v24 = *(_QWORD *)(v7 + 8 * v23);
    if (!v24)
    {
      v23 = v10 + 2;
      if (v10 + 2 >= v14)
        goto LABEL_24;
      v24 = *(_QWORD *)(v7 + 8 * v23);
      if (!v24)
      {
        v23 = v10 + 3;
        if (v10 + 3 >= v14)
          goto LABEL_24;
        v24 = *(_QWORD *)(v7 + 8 * v23);
        if (!v24)
          break;
      }
    }
LABEL_23:
    v13 = (v24 - 1) & v24;
    v16 = __clz(__rbit64(v24)) + (v23 << 6);
    v10 = v23;
LABEL_12:
    v17 = 16 * v16;
    v18 = (_QWORD *)(*(_QWORD *)(v3 + 48) + 16 * v16);
    v19 = v18[1];
    v20 = 8 * v16;
    v21 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + v20);
    v22 = (_QWORD *)(*(_QWORD *)(v5 + 48) + v17);
    *v22 = *v18;
    v22[1] = v19;
    *(_QWORD *)(*(_QWORD *)(v5 + 56) + v20) = v21;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  while (v14 - 4 != v10)
  {
    v24 = *(_QWORD *)(v3 + 96 + 8 * v10++);
    if (v24)
    {
      v23 = v10 + 3;
      goto LABEL_23;
    }
  }
LABEL_24:
  result = swift_release();
  *v2 = v5;
  return result;
}

uint64_t sub_1B1EAA9D8()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t result;

  v1 = v0;
  sub_1B1EB6DB4(0, (unint64_t *)&qword_1EEF5FF80);
  v2 = *v0;
  v3 = sub_1B22296B8();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
    goto LABEL_24;
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v26 = v9 + 1;
    if (v9 + 1 >= v13)
      goto LABEL_24;
    v27 = *(_QWORD *)(v6 + 8 * v26);
    if (!v27)
    {
      v26 = v9 + 2;
      if (v9 + 2 >= v13)
        goto LABEL_24;
      v27 = *(_QWORD *)(v6 + 8 * v26);
      if (!v27)
      {
        v26 = v9 + 3;
        if (v9 + 3 >= v13)
          goto LABEL_24;
        v27 = *(_QWORD *)(v6 + 8 * v26);
        if (!v27)
          break;
      }
    }
LABEL_23:
    v28 = __clz(__rbit64(v27));
    v12 = (v27 - 1) & v27;
    v15 = v28 + (v26 << 6);
    v9 = v26;
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v18 = 80 * v15;
    v19 = *(_QWORD *)(v2 + 56) + v18;
    v20 = *(_BYTE *)(v19 + 64);
    v21 = *(_OWORD *)v19;
    v22 = *(_OWORD *)(v19 + 16);
    v23 = *(_OWORD *)(v19 + 32);
    v24 = *(_OWORD *)(v19 + 48);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    v25 = *(_QWORD *)(v4 + 56) + v18;
    *(_OWORD *)v25 = v21;
    *(_OWORD *)(v25 + 16) = v22;
    *(_OWORD *)(v25 + 32) = v23;
    *(_OWORD *)(v25 + 48) = v24;
    *(_BYTE *)(v25 + 64) = v20;
  }
  while (v13 - 4 != v9)
  {
    v27 = *(_QWORD *)(v2 + 96 + 8 * v9++);
    if (v27)
    {
      v26 = v9 + 3;
      goto LABEL_23;
    }
  }
LABEL_24:
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_1B1EAAB90()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t result;

  v1 = v0;
  sub_1B1EB6DB4(0, (unint64_t *)&qword_1ED4BA950);
  v2 = *v0;
  v3 = sub_1B22296B8();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
    goto LABEL_24;
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v28 = v9 + 1;
    if (v9 + 1 >= v13)
      goto LABEL_24;
    v29 = *(_QWORD *)(v6 + 8 * v28);
    if (!v29)
    {
      v28 = v9 + 2;
      if (v9 + 2 >= v13)
        goto LABEL_24;
      v29 = *(_QWORD *)(v6 + 8 * v28);
      if (!v29)
      {
        v28 = v9 + 3;
        if (v9 + 3 >= v13)
          goto LABEL_24;
        v29 = *(_QWORD *)(v6 + 8 * v28);
        if (!v29)
          break;
      }
    }
LABEL_23:
    v12 = (v29 - 1) & v29;
    v15 = __clz(__rbit64(v29)) + (v28 << 6);
    v9 = v28;
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v18 = 56 * v15;
    v19 = *(_QWORD *)(v2 + 56) + v18;
    v20 = *(_QWORD *)v19;
    v21 = *(_QWORD *)(v19 + 8);
    v22 = *(_QWORD *)(v19 + 16);
    v23 = *(_QWORD *)(v19 + 24);
    v24 = *(_QWORD *)(v19 + 32);
    v25 = *(_QWORD *)(v19 + 40);
    v26 = *(_BYTE *)(v19 + 48);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    v27 = *(_QWORD *)(v4 + 56) + v18;
    *(_QWORD *)v27 = v20;
    *(_QWORD *)(v27 + 8) = v21;
    *(_QWORD *)(v27 + 16) = v22;
    *(_QWORD *)(v27 + 24) = v23;
    *(_QWORD *)(v27 + 32) = v24;
    *(_QWORD *)(v27 + 40) = v25;
    *(_BYTE *)(v27 + 48) = v26;
    sub_1B1B3C554(v20, v21, v22, v23, v24, v25, v26);
  }
  while (v13 - 4 != v9)
  {
    v29 = *(_QWORD *)(v2 + 96 + 8 * v9++);
    if (v29)
    {
      v28 = v9 + 3;
      goto LABEL_23;
    }
  }
LABEL_24:
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_1B1EAAD6C()
{
  return sub_1B1EAAD90((unint64_t *)&qword_1EEF5B698);
}

uint64_t sub_1B1EAAD90(unint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t result;

  v2 = v1;
  sub_1B1EB6DB4(0, a1);
  v3 = *v1;
  v4 = sub_1B22296B8();
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
    goto LABEL_24;
  v6 = (void *)(v4 + 64);
  v7 = v3 + 64;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)v6 >= v3 + 64 + 8 * v8)
    memmove(v6, (const void *)(v3 + 64), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 64);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v18 = v10 + 1;
    if (v10 + 1 >= v14)
      goto LABEL_24;
    v19 = *(_QWORD *)(v7 + 8 * v18);
    if (!v19)
    {
      v18 = v10 + 2;
      if (v10 + 2 >= v14)
        goto LABEL_24;
      v19 = *(_QWORD *)(v7 + 8 * v18);
      if (!v19)
      {
        v18 = v10 + 3;
        if (v10 + 3 >= v14)
          goto LABEL_24;
        v19 = *(_QWORD *)(v7 + 8 * v18);
        if (!v19)
          break;
      }
    }
LABEL_23:
    v20 = __clz(__rbit64(v19));
    v13 = (v19 - 1) & v19;
    v16 = v20 + (v18 << 6);
    v10 = v18;
LABEL_12:
    v17 = *(_BYTE *)(*(_QWORD *)(v3 + 56) + v16);
    *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v16) = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v16);
    *(_BYTE *)(*(_QWORD *)(v5 + 56) + v16) = v17;
  }
  while (v14 - 4 != v10)
  {
    v19 = *(_QWORD *)(v3 + 96 + 8 * v10++);
    if (v19)
    {
      v18 = v10 + 3;
      goto LABEL_23;
    }
  }
LABEL_24:
  result = swift_release();
  *v2 = v5;
  return result;
}

uint64_t sub_1B1EAAF18()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t result;

  v1 = v0;
  sub_1B1B9B774();
  v2 = *v0;
  v3 = sub_1B22296B8();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
    goto LABEL_24;
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v30 = v9 + 1;
    if (v9 + 1 >= v13)
      goto LABEL_24;
    v31 = *(_QWORD *)(v6 + 8 * v30);
    if (!v31)
    {
      v30 = v9 + 2;
      if (v9 + 2 >= v13)
        goto LABEL_24;
      v31 = *(_QWORD *)(v6 + 8 * v30);
      if (!v31)
      {
        v30 = v9 + 3;
        if (v9 + 3 >= v13)
          goto LABEL_24;
        v31 = *(_QWORD *)(v6 + 8 * v30);
        if (!v31)
          break;
      }
    }
LABEL_23:
    v12 = (v31 - 1) & v31;
    v15 = __clz(__rbit64(v31)) + (v30 << 6);
    v9 = v30;
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v18 = 80 * v15;
    v19 = *(_QWORD *)(v2 + 56) + v18;
    v20 = *(void **)v19;
    v21 = *(_QWORD *)(v19 + 8);
    v22 = *(_QWORD *)(v19 + 16);
    v23 = *(_QWORD *)(v19 + 24);
    v24 = *(_QWORD *)(v19 + 32);
    v25 = *(_QWORD *)(v19 + 40);
    v26 = *(_QWORD *)(v19 + 48);
    v27 = *(_QWORD *)(v19 + 56);
    v28 = *(void **)(v19 + 64);
    LOBYTE(v19) = *(_BYTE *)(v19 + 72);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    v29 = *(_QWORD *)(v4 + 56) + v18;
    *(_QWORD *)v29 = v20;
    *(_QWORD *)(v29 + 8) = v21;
    *(_QWORD *)(v29 + 16) = v22;
    *(_QWORD *)(v29 + 24) = v23;
    *(_QWORD *)(v29 + 32) = v24;
    *(_QWORD *)(v29 + 40) = v25;
    *(_QWORD *)(v29 + 48) = v26;
    *(_QWORD *)(v29 + 56) = v27;
    *(_QWORD *)(v29 + 64) = v28;
    *(_BYTE *)(v29 + 72) = v19;
    sub_1B1B3FCA8(v20, v21, v22, v23, v24, v25, v26, v27, v28, v19);
  }
  while (v13 - 4 != v9)
  {
    v31 = *(_QWORD *)(v2 + 96 + 8 * v9++);
    if (v31)
    {
      v30 = v9 + 3;
      goto LABEL_23;
    }
  }
LABEL_24:
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_1B1EAB0F4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t result;

  v1 = v0;
  sub_1B1B99824();
  v2 = *v0;
  v3 = sub_1B22296B8();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
    goto LABEL_24;
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (v9 + 1 >= v13)
      goto LABEL_24;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    if (!v21)
    {
      v20 = v9 + 2;
      if (v9 + 2 >= v13)
        goto LABEL_24;
      v21 = *(_QWORD *)(v6 + 8 * v20);
      if (!v21)
      {
        v20 = v9 + 3;
        if (v9 + 3 >= v13)
          goto LABEL_24;
        v21 = *(_QWORD *)(v6 + 8 * v20);
        if (!v21)
          break;
      }
    }
LABEL_23:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v20 << 6);
    v9 = v20;
LABEL_12:
    v16 = 8 * v15;
    v17 = *(void **)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v18 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v16) = v18;
    v19 = v17;
    swift_bridgeObjectRetain();
  }
  while (v13 - 4 != v9)
  {
    v21 = *(_QWORD *)(v2 + 96 + 8 * v9++);
    if (v21)
    {
      v20 = v9 + 3;
      goto LABEL_23;
    }
  }
LABEL_24:
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_1B1EAB290()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  int v20;
  char v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t result;

  v1 = v0;
  sub_1B1B997C4();
  v2 = *v0;
  v3 = sub_1B22296B8();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
    goto LABEL_24;
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v26 = v9 + 1;
    if (v9 + 1 >= v13)
      goto LABEL_24;
    v27 = *(_QWORD *)(v6 + 8 * v26);
    if (!v27)
    {
      v26 = v9 + 2;
      if (v9 + 2 >= v13)
        goto LABEL_24;
      v27 = *(_QWORD *)(v6 + 8 * v26);
      if (!v27)
      {
        v26 = v9 + 3;
        if (v9 + 3 >= v13)
          goto LABEL_24;
        v27 = *(_QWORD *)(v6 + 8 * v26);
        if (!v27)
          break;
      }
    }
LABEL_23:
    v12 = (v27 - 1) & v27;
    v15 = __clz(__rbit64(v27)) + (v26 << 6);
    v9 = v26;
LABEL_12:
    v16 = 8 * v15;
    v17 = 40 * v15;
    v18 = *(_QWORD *)(v2 + 56) + v17;
    v19 = *(void **)v18;
    v20 = *(_DWORD *)(v18 + 16);
    v21 = *(_BYTE *)(v18 + 20);
    v22 = *(_QWORD *)(v18 + 8);
    v23 = *(_OWORD *)(v18 + 24);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = *(_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    v24 = *(_QWORD *)(v4 + 56) + v17;
    *(_QWORD *)v24 = v19;
    *(_QWORD *)(v24 + 8) = v22;
    *(_DWORD *)(v24 + 16) = v20;
    *(_BYTE *)(v24 + 20) = v21;
    *(_OWORD *)(v24 + 24) = v23;
    v25 = v19;
    swift_retain();
  }
  while (v13 - 4 != v9)
  {
    v27 = *(_QWORD *)(v2 + 96 + 8 * v9++);
    if (v27)
    {
      v26 = v9 + 3;
      goto LABEL_23;
    }
  }
LABEL_24:
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_1B1EAB46C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t result;
  char v21[8];

  v1 = v0;
  sub_1B1EB6DB4(0, (unint64_t *)&qword_1ED4BF6B0);
  v2 = *v0;
  v3 = sub_1B22296B8();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
    goto LABEL_24;
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v18 = v9 + 1;
    if (v9 + 1 >= v13)
      goto LABEL_24;
    v19 = *(_QWORD *)(v6 + 8 * v18);
    if (!v19)
    {
      v18 = v9 + 2;
      if (v9 + 2 >= v13)
        goto LABEL_24;
      v19 = *(_QWORD *)(v6 + 8 * v18);
      if (!v19)
      {
        v18 = v9 + 3;
        if (v9 + 3 >= v13)
          goto LABEL_24;
        v19 = *(_QWORD *)(v6 + 8 * v18);
        if (!v19)
          break;
      }
    }
LABEL_23:
    v12 = (v19 - 1) & v19;
    v15 = __clz(__rbit64(v19)) + (v18 << 6);
    v9 = v18;
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    sub_1B1B425D0();
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    sub_1B1B9BAB0((uint64_t)v21, *(_QWORD *)(v4 + 56) + v16);
  }
  while (v13 - 4 != v9)
  {
    v19 = *(_QWORD *)(v2 + 8 * v9++ + 96);
    if (v19)
    {
      v18 = v9 + 3;
      goto LABEL_23;
    }
  }
LABEL_24:
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_1B1EAB634()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t result;
  uint64_t *v20;
  void *__src;
  int64_t v22;
  _BYTE v23[840];

  v1 = v0;
  sub_1B1B9B7F0();
  v2 = *v0;
  v3 = sub_1B22296B8();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
    goto LABEL_26;
  }
  v5 = (void *)(v3 + 64);
  v6 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  v20 = v1;
  __src = (void *)(v2 + 64);
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v6)
    memmove(v5, __src, 8 * v6);
  v8 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v9 = 1 << *(_BYTE *)(v2 + 32);
  v10 = -1;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  v11 = v10 & *(_QWORD *)(v2 + 64);
  v22 = (unint64_t)(v9 + 63) >> 6;
  while (1)
  {
    if (v11)
    {
      v12 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v13 = v12 | (v8 << 6);
      goto LABEL_12;
    }
    v17 = v8 + 1;
    if (v8 + 1 >= v22)
      goto LABEL_24;
    v18 = *((_QWORD *)__src + v17);
    if (!v18)
    {
      v17 = v8 + 2;
      if (v8 + 2 >= v22)
        goto LABEL_24;
      v18 = *((_QWORD *)__src + v17);
      if (!v18)
      {
        v17 = v8 + 3;
        if (v8 + 3 >= v22)
          goto LABEL_24;
        v18 = *((_QWORD *)__src + v17);
        if (!v18)
          break;
      }
    }
LABEL_23:
    v11 = (v18 - 1) & v18;
    v13 = __clz(__rbit64(v18)) + (v17 << 6);
    v8 = v17;
LABEL_12:
    v14 = 8 * v13;
    v15 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v13);
    v16 = 832 * v13;
    sub_1B1B41294(*(_QWORD *)(v2 + 56) + 832 * v13, (uint64_t)v23, &qword_1ED4B7E90, (uint64_t)&type metadata for ShaderCache.RenderPipeline, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for ShaderCache.Status);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v14) = v15;
    sub_1B1B41294((uint64_t)v23, *(_QWORD *)(v4 + 56) + v16, &qword_1ED4B7E90, (uint64_t)&type metadata for ShaderCache.RenderPipeline, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for ShaderCache.Status);
    sub_1B1EB58B4((uint64_t)v23);
  }
  while (v22 - 4 != v8)
  {
    v18 = *(_QWORD *)(v2 + 8 * v8++ + 96);
    if (v18)
    {
      v17 = v8 + 3;
      goto LABEL_23;
    }
  }
LABEL_24:
  result = swift_release();
  v1 = v20;
LABEL_26:
  *v1 = v4;
  return result;
}

uint64_t sub_1B1EAB854()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t result;

  v1 = v0;
  sub_1B1B9A02C();
  v2 = *v0;
  v3 = sub_1B22296B8();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
    goto LABEL_24;
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v19 = v9 + 1;
    if (v9 + 1 >= v13)
      goto LABEL_24;
    v20 = *(_QWORD *)(v6 + 8 * v19);
    if (!v20)
    {
      v19 = v9 + 2;
      if (v9 + 2 >= v13)
        goto LABEL_24;
      v20 = *(_QWORD *)(v6 + 8 * v19);
      if (!v20)
      {
        v19 = v9 + 3;
        if (v9 + 3 >= v13)
          goto LABEL_24;
        v20 = *(_QWORD *)(v6 + 8 * v19);
        if (!v20)
          break;
      }
    }
LABEL_23:
    v12 = (v20 - 1) & v20;
    v15 = __clz(__rbit64(v20)) + (v19 << 6);
    v9 = v19;
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v18 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v15);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v16) = v18;
    sub_1B1B1DD24(v17);
  }
  while (v13 - 4 != v9)
  {
    v20 = *(_QWORD *)(v2 + 96 + 8 * v9++);
    if (v20)
    {
      v19 = v9 + 3;
      goto LABEL_23;
    }
  }
LABEL_24:
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_1B1EAB9E8()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t result;

  v1 = v0;
  sub_1B1B9A08C();
  v2 = *v0;
  v3 = sub_1B22296B8();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
    goto LABEL_24;
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v18 = v9 + 1;
    if (v9 + 1 >= v13)
      goto LABEL_24;
    v19 = *(_QWORD *)(v6 + 8 * v18);
    if (!v19)
    {
      v18 = v9 + 2;
      if (v9 + 2 >= v13)
        goto LABEL_24;
      v19 = *(_QWORD *)(v6 + 8 * v18);
      if (!v19)
      {
        v18 = v9 + 3;
        if (v9 + 3 >= v13)
          goto LABEL_24;
        v19 = *(_QWORD *)(v6 + 8 * v18);
        if (!v19)
          break;
      }
    }
LABEL_23:
    v12 = (v19 - 1) & v19;
    v15 = __clz(__rbit64(v19)) + (v18 << 6);
    v9 = v18;
LABEL_12:
    v16 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v17 = *(_BYTE *)(*(_QWORD *)(v2 + 56) + v15);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v15) = v16;
    *(_BYTE *)(*(_QWORD *)(v4 + 56) + v15) = v17;
    sub_1B1B1DD24(v16);
  }
  while (v13 - 4 != v9)
  {
    v19 = *(_QWORD *)(v2 + 96 + 8 * v9++);
    if (v19)
    {
      v18 = v9 + 3;
      goto LABEL_23;
    }
  }
LABEL_24:
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_1B1EABB7C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t result;

  v1 = v0;
  sub_1B1EB6DB4(0, (unint64_t *)&qword_1EEF5FF40);
  v2 = *v0;
  v3 = sub_1B22296B8();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
    goto LABEL_24;
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v27 = v9 + 1;
    if (v9 + 1 >= v13)
      goto LABEL_24;
    v28 = *(_QWORD *)(v6 + 8 * v27);
    if (!v28)
    {
      v27 = v9 + 2;
      if (v9 + 2 >= v13)
        goto LABEL_24;
      v28 = *(_QWORD *)(v6 + 8 * v27);
      if (!v28)
      {
        v27 = v9 + 3;
        if (v9 + 3 >= v13)
          goto LABEL_24;
        v28 = *(_QWORD *)(v6 + 8 * v27);
        if (!v28)
          break;
      }
    }
LABEL_23:
    v12 = (v28 - 1) & v28;
    v15 = __clz(__rbit64(v28)) + (v27 << 6);
    v9 = v27;
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 32 * v15;
    v21 = *(_QWORD *)(v2 + 56) + v20;
    v22 = *(_QWORD *)v21;
    v23 = *(_BYTE *)(v21 + 8);
    v24 = *(_QWORD *)(v21 + 16);
    LOBYTE(v21) = *(_BYTE *)(v21 + 24);
    v25 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v25 = v19;
    v25[1] = v18;
    v26 = *(_QWORD *)(v4 + 56) + v20;
    *(_QWORD *)v26 = v22;
    *(_BYTE *)(v26 + 8) = v23;
    *(_QWORD *)(v26 + 16) = v24;
    *(_BYTE *)(v26 + 24) = v21;
    swift_bridgeObjectRetain();
    sub_1B1B1DD24(v22);
  }
  while (v13 - 4 != v9)
  {
    v28 = *(_QWORD *)(v2 + 96 + 8 * v9++);
    if (v28)
    {
      v27 = v9 + 3;
      goto LABEL_23;
    }
  }
LABEL_24:
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_1B1EABD64()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  __int16 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t result;

  v1 = v0;
  sub_1B1B99DB0(0, &qword_1EEF5B3B8, (void (*)(uint64_t))type metadata accessor for XcodeInfo, (void (*)(void))sub_1B1B99E24);
  v2 = *v0;
  v3 = sub_1B22296B8();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
    goto LABEL_24;
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (v9 + 1 >= v13)
      goto LABEL_24;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    if (!v21)
    {
      v20 = v9 + 2;
      if (v9 + 2 >= v13)
        goto LABEL_24;
      v21 = *(_QWORD *)(v6 + 8 * v20);
      if (!v21)
      {
        v20 = v9 + 3;
        if (v9 + 3 >= v13)
          goto LABEL_24;
        v21 = *(_QWORD *)(v6 + 8 * v20);
        if (!v21)
          break;
      }
    }
LABEL_23:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v20 << 6);
    v9 = v20;
LABEL_12:
    v16 = 2 * v15;
    v17 = *(_WORD *)(*(_QWORD *)(v2 + 48) + 2 * v15);
    v18 = 8 * v15;
    v19 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v18);
    *(_WORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v18) = v19;
    swift_retain();
  }
  while (v13 - 4 != v9)
  {
    v21 = *(_QWORD *)(v2 + 96 + 8 * v9++);
    if (v21)
    {
      v20 = v9 + 3;
      goto LABEL_23;
    }
  }
LABEL_24:
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_1B1EABF1C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  unint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  char v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t result;
  int64_t v30;
  uint64_t *v31;
  const void *v32;
  int64_t v33;
  uint64_t v34;
  uint64_t v35;

  v1 = v0;
  v34 = sub_1B2228110();
  v2 = *(_QWORD *)(v34 - 8);
  MEMORY[0x1E0C80A78](v34, v3);
  v5 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1B1B9C650();
  v6 = *v0;
  v7 = sub_1B22296B8();
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
  {
    result = swift_release();
    goto LABEL_26;
  }
  v9 = (void *)(v7 + 64);
  v10 = (unint64_t)((1 << *(_BYTE *)(v8 + 32)) + 63) >> 6;
  v31 = v1;
  v32 = (const void *)(v6 + 64);
  if (v8 != v6 || (unint64_t)v9 >= v6 + 64 + 8 * v10)
    memmove(v9, v32, 8 * v10);
  v12 = 0;
  v13 = *(_QWORD *)(v6 + 16);
  v35 = v8;
  *(_QWORD *)(v8 + 16) = v13;
  v14 = 1 << *(_BYTE *)(v6 + 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & *(_QWORD *)(v6 + 64);
  v33 = (unint64_t)(v14 + 63) >> 6;
  v30 = v33 - 4;
  for (i = v34; ; (*(void (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(_QWORD *)(v25 + 56) + v24, v5, i))
  {
    if (v16)
    {
      v18 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v19 = v18 | (v12 << 6);
      goto LABEL_12;
    }
    v27 = v12 + 1;
    if (v12 + 1 >= v33)
      goto LABEL_24;
    v28 = *((_QWORD *)v32 + v27);
    if (!v28)
    {
      v27 = v12 + 2;
      if (v12 + 2 >= v33)
        goto LABEL_24;
      v28 = *((_QWORD *)v32 + v27);
      if (!v28)
      {
        v27 = v12 + 3;
        if (v12 + 3 >= v33)
          goto LABEL_24;
        v28 = *((_QWORD *)v32 + v27);
        if (!v28)
          break;
      }
    }
LABEL_23:
    v16 = (v28 - 1) & v28;
    v19 = __clz(__rbit64(v28)) + (v27 << 6);
    v12 = v27;
LABEL_12:
    v20 = 8 * v19;
    v21 = *(_QWORD *)(v6 + 48) + 8 * v19;
    v22 = *(_DWORD *)v21;
    v23 = *(_BYTE *)(v21 + 4);
    v24 = *(_QWORD *)(v2 + 72) * v19;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v5, *(_QWORD *)(v6 + 56) + v24, i);
    v25 = v35;
    v26 = *(_QWORD *)(v35 + 48) + v20;
    *(_DWORD *)v26 = v22;
    *(_BYTE *)(v26 + 4) = v23;
  }
  while (v30 != v12)
  {
    v28 = *(_QWORD *)(v6 + 8 * v12++ + 96);
    if (v28)
    {
      v27 = v12 + 3;
      goto LABEL_23;
    }
  }
LABEL_24:
  result = swift_release();
  v1 = v31;
  v8 = v35;
LABEL_26:
  *v1 = v8;
  return result;
}

uint64_t sub_1B1EAC16C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  _QWORD *v21;
  id v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t result;

  v1 = v0;
  sub_1B1EB6BBC();
  v2 = *v0;
  v3 = sub_1B22296B8();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
    goto LABEL_24;
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v23 = v9 + 1;
    if (v9 + 1 >= v13)
      goto LABEL_24;
    v24 = *(_QWORD *)(v6 + 8 * v23);
    if (!v24)
    {
      v23 = v9 + 2;
      if (v9 + 2 >= v13)
        goto LABEL_24;
      v24 = *(_QWORD *)(v6 + 8 * v23);
      if (!v24)
      {
        v23 = v9 + 3;
        if (v9 + 3 >= v13)
          goto LABEL_24;
        v24 = *(_QWORD *)(v6 + 8 * v23);
        if (!v24)
          break;
      }
    }
LABEL_23:
    v12 = (v24 - 1) & v24;
    v15 = __clz(__rbit64(v24)) + (v23 << 6);
    v9 = v23;
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = v17[1];
    v19 = 8 * v15;
    v20 = *(void **)(*(_QWORD *)(v2 + 56) + v19);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = *v17;
    v21[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    v22 = v20;
  }
  while (v13 - 4 != v9)
  {
    v24 = *(_QWORD *)(v2 + 96 + 8 * v9++);
    if (v24)
    {
      v23 = v9 + 3;
      goto LABEL_23;
    }
  }
LABEL_24:
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_1B1EAC310()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t result;

  v1 = v0;
  sub_1B1B99B8C(0, &qword_1ED4BA908, (void (*)(uint64_t))sub_1B1B9AA24);
  v2 = *v0;
  v3 = sub_1B22296B8();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
    goto LABEL_24;
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v23 = v9 + 1;
    if (v9 + 1 >= v13)
      goto LABEL_24;
    v24 = *(_QWORD *)(v6 + 8 * v23);
    if (!v24)
    {
      v23 = v9 + 2;
      if (v9 + 2 >= v13)
        goto LABEL_24;
      v24 = *(_QWORD *)(v6 + 8 * v23);
      if (!v24)
      {
        v23 = v9 + 3;
        if (v9 + 3 >= v13)
          goto LABEL_24;
        v24 = *(_QWORD *)(v6 + 8 * v23);
        if (!v24)
          break;
      }
    }
LABEL_23:
    v25 = __clz(__rbit64(v24));
    v12 = (v24 - 1) & v24;
    v15 = v25 + (v23 << 6);
    v9 = v23;
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v18 = 24 * v15;
    v19 = *(_QWORD *)(v2 + 56) + v18;
    v20 = *(_QWORD *)(v19 + 16);
    v21 = *(_OWORD *)v19;
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    v22 = *(_QWORD *)(v4 + 56) + v18;
    *(_OWORD *)v22 = v21;
    *(_QWORD *)(v22 + 16) = v20;
  }
  while (v13 - 4 != v9)
  {
    v24 = *(_QWORD *)(v2 + 96 + 8 * v9++);
    if (v24)
    {
      v23 = v9 + 3;
      goto LABEL_23;
    }
  }
LABEL_24:
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_1B1EAC4C0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  char v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t result;

  v1 = v0;
  sub_1B1B9BBB4();
  v2 = *v0;
  v3 = sub_1B22296B8();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
    goto LABEL_24;
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v26 = v9 + 1;
    if (v9 + 1 >= v13)
      goto LABEL_24;
    v27 = *(_QWORD *)(v6 + 8 * v26);
    if (!v27)
    {
      v26 = v9 + 2;
      if (v9 + 2 >= v13)
        goto LABEL_24;
      v27 = *(_QWORD *)(v6 + 8 * v26);
      if (!v27)
      {
        v26 = v9 + 3;
        if (v9 + 3 >= v13)
          goto LABEL_24;
        v27 = *(_QWORD *)(v6 + 8 * v26);
        if (!v27)
          break;
      }
    }
LABEL_23:
    v12 = (v27 - 1) & v27;
    v15 = __clz(__rbit64(v27)) + (v26 << 6);
    v9 = v26;
LABEL_12:
    v16 = *(_QWORD *)(v2 + 56) + 80 * v15;
    v18 = *(_QWORD *)v16;
    v17 = *(_QWORD *)(v16 + 8);
    v19 = *(_QWORD *)(v16 + 32);
    v20 = *(_BYTE *)(v16 + 40);
    v21 = *(_QWORD *)(v16 + 48);
    v22 = *(_BYTE *)(v16 + 56);
    v23 = *(_OWORD *)(v16 + 64);
    v24 = *(_OWORD *)(v16 + 16);
    *(_BYTE *)(*(_QWORD *)(v4 + 48) + v15) = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v15);
    v25 = *(_QWORD *)(v4 + 56) + 80 * v15;
    *(_QWORD *)v25 = v18;
    *(_QWORD *)(v25 + 8) = v17;
    *(_OWORD *)(v25 + 16) = v24;
    *(_QWORD *)(v25 + 32) = v19;
    *(_BYTE *)(v25 + 40) = v20;
    *(_QWORD *)(v25 + 48) = v21;
    *(_BYTE *)(v25 + 56) = v22;
    *(_OWORD *)(v25 + 64) = v23;
    swift_bridgeObjectRetain();
  }
  while (v13 - 4 != v9)
  {
    v27 = *(_QWORD *)(v2 + 96 + 8 * v9++);
    if (v27)
    {
      v26 = v9 + 3;
      goto LABEL_23;
    }
  }
LABEL_24:
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_1B1EAC690()
{
  return sub_1B1EAC6AC((void (*)(_QWORD))sub_1B1B9C1C8, (void (*)(unint64_t, char *))sub_1B1EB613C, (void (*)(char *, uint64_t))sub_1B1EB6150);
}

uint64_t sub_1B1EAC6AC(void (*a1)(_QWORD), void (*a2)(unint64_t, char *), void (*a3)(char *, uint64_t))
{
  uint64_t *v3;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t result;
  uint64_t *v26;
  char v27[8];

  v6 = v3;
  a1(0);
  v7 = *v3;
  v8 = sub_1B22296B8();
  v9 = v8;
  if (!*(_QWORD *)(v7 + 16))
  {
    result = swift_release();
    goto LABEL_26;
  }
  v26 = v6;
  v10 = (void *)(v8 + 64);
  v11 = v7 + 64;
  v12 = (unint64_t)((1 << *(_BYTE *)(v9 + 32)) + 63) >> 6;
  if (v9 != v7 || (unint64_t)v10 >= v7 + 64 + 8 * v12)
    memmove(v10, (const void *)(v7 + 64), 8 * v12);
  v14 = 0;
  *(_QWORD *)(v9 + 16) = *(_QWORD *)(v7 + 16);
  v15 = 1 << *(_BYTE *)(v7 + 32);
  v16 = -1;
  if (v15 < 64)
    v16 = ~(-1 << v15);
  v17 = v16 & *(_QWORD *)(v7 + 64);
  v18 = (unint64_t)(v15 + 63) >> 6;
  while (1)
  {
    if (v17)
    {
      v19 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      v20 = v19 | (v14 << 6);
      goto LABEL_12;
    }
    v23 = v14 + 1;
    if (v14 + 1 >= v18)
      goto LABEL_24;
    v24 = *(_QWORD *)(v11 + 8 * v23);
    if (!v24)
    {
      v23 = v14 + 2;
      if (v14 + 2 >= v18)
        goto LABEL_24;
      v24 = *(_QWORD *)(v11 + 8 * v23);
      if (!v24)
      {
        v23 = v14 + 3;
        if (v14 + 3 >= v18)
          goto LABEL_24;
        v24 = *(_QWORD *)(v11 + 8 * v23);
        if (!v24)
          break;
      }
    }
LABEL_23:
    v17 = (v24 - 1) & v24;
    v20 = __clz(__rbit64(v24)) + (v23 << 6);
    v14 = v23;
LABEL_12:
    v21 = 8 * v20;
    v22 = *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v20);
    a2(*(_QWORD *)(v7 + 56) + 8 * v20, v27);
    *(_QWORD *)(*(_QWORD *)(v9 + 48) + v21) = v22;
    a3(v27, *(_QWORD *)(v9 + 56) + v21);
  }
  while (v18 - 4 != v14)
  {
    v24 = *(_QWORD *)(v7 + 8 * v14++ + 96);
    if (v24)
    {
      v23 = v14 + 3;
      goto LABEL_23;
    }
  }
LABEL_24:
  result = swift_release();
  v6 = v26;
LABEL_26:
  *v6 = v9;
  return result;
}

uint64_t sub_1B1EAC87C()
{
  return sub_1B1EAC6AC((void (*)(_QWORD))sub_1B1B9BEDC, (void (*)(unint64_t, char *))sub_1B1EB6064, (void (*)(char *, uint64_t))sub_1B1EB60D0);
}

uint64_t sub_1B1EAC898()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t result;

  v1 = v0;
  sub_1B1B99DB0(0, &qword_1EEF5B6D0, (void (*)(uint64_t))sub_1B1B9C354, (void (*)(void))sub_1B1B9C3D0);
  v2 = *v0;
  v3 = sub_1B22296B8();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
    goto LABEL_24;
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v23 = v9 + 1;
    if (v9 + 1 >= v13)
      goto LABEL_24;
    v24 = *(_QWORD *)(v6 + 8 * v23);
    if (!v24)
    {
      v23 = v9 + 2;
      if (v9 + 2 >= v13)
        goto LABEL_24;
      v24 = *(_QWORD *)(v6 + 8 * v23);
      if (!v24)
      {
        v23 = v9 + 3;
        if (v9 + 3 >= v13)
          goto LABEL_24;
        v24 = *(_QWORD *)(v6 + 8 * v23);
        if (!v24)
          break;
      }
    }
LABEL_23:
    v12 = (v24 - 1) & v24;
    v15 = __clz(__rbit64(v24)) + (v23 << 6);
    v9 = v23;
LABEL_12:
    v16 = 8 * v15;
    v17 = 24 * v15;
    v18 = (uint64_t *)(*(_QWORD *)(v2 + 56) + v17);
    v20 = *v18;
    v19 = v18[1];
    v21 = v18[2];
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = *(_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    v22 = (_QWORD *)(*(_QWORD *)(v4 + 56) + v17);
    *v22 = v20;
    v22[1] = v19;
    v22[2] = v21;
    swift_unknownObjectRetain();
  }
  while (v13 - 4 != v9)
  {
    v24 = *(_QWORD *)(v2 + 96 + 8 * v9++);
    if (v24)
    {
      v23 = v9 + 3;
      goto LABEL_23;
    }
  }
LABEL_24:
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_1B1EACA64()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t result;

  v1 = v0;
  sub_1B1B9C2B4();
  v2 = *v0;
  v3 = sub_1B22296B8();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
    goto LABEL_24;
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v28 = v9 + 1;
    if (v9 + 1 >= v13)
      goto LABEL_24;
    v29 = *(_QWORD *)(v6 + 8 * v28);
    if (!v29)
    {
      v28 = v9 + 2;
      if (v9 + 2 >= v13)
        goto LABEL_24;
      v29 = *(_QWORD *)(v6 + 8 * v28);
      if (!v29)
      {
        v28 = v9 + 3;
        if (v9 + 3 >= v13)
          goto LABEL_24;
        v29 = *(_QWORD *)(v6 + 8 * v28);
        if (!v29)
          break;
      }
    }
LABEL_23:
    v12 = (v29 - 1) & v29;
    v15 = __clz(__rbit64(v29)) + (v28 << 6);
    v9 = v28;
LABEL_12:
    v16 = 40 * v15;
    v17 = *(_QWORD *)(v2 + 48) + 40 * v15;
    v18 = *(_QWORD *)(v17 + 24);
    v19 = *(_BYTE *)(v17 + 32);
    v20 = *(_QWORD *)(v2 + 56) + v16;
    v21 = *(_QWORD *)v20;
    v22 = *(_QWORD *)(v20 + 24);
    v23 = *(_BYTE *)(v20 + 32);
    v24 = *(_QWORD *)(v4 + 48) + v16;
    v25 = *(_OWORD *)(v17 + 8);
    v26 = *(_OWORD *)(v20 + 8);
    *(_QWORD *)v24 = *(_QWORD *)v17;
    *(_OWORD *)(v24 + 8) = v25;
    *(_QWORD *)(v24 + 24) = v18;
    *(_BYTE *)(v24 + 32) = v19;
    v27 = *(_QWORD *)(v4 + 56) + v16;
    *(_QWORD *)v27 = v21;
    *(_OWORD *)(v27 + 8) = v26;
    *(_QWORD *)(v27 + 24) = v22;
    *(_BYTE *)(v27 + 32) = v23;
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
  }
  while (v13 - 4 != v9)
  {
    v29 = *(_QWORD *)(v2 + 96 + 8 * v9++);
    if (v29)
    {
      v28 = v9 + 3;
      goto LABEL_23;
    }
  }
LABEL_24:
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_1B1EACC44()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t result;

  v1 = v0;
  sub_1B1EB5840(0, (unint64_t *)&qword_1ED4BA9B0);
  v2 = *v0;
  v3 = sub_1B22296B8();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
    goto LABEL_24;
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v18 = v9 + 1;
    if (v9 + 1 >= v13)
      goto LABEL_24;
    v19 = *(_QWORD *)(v6 + 8 * v18);
    if (!v19)
    {
      v18 = v9 + 2;
      if (v9 + 2 >= v13)
        goto LABEL_24;
      v19 = *(_QWORD *)(v6 + 8 * v18);
      if (!v19)
      {
        v18 = v9 + 3;
        if (v9 + 3 >= v13)
          goto LABEL_24;
        v19 = *(_QWORD *)(v6 + 8 * v18);
        if (!v19)
          break;
      }
    }
LABEL_23:
    v12 = (v19 - 1) & v19;
    v15 = __clz(__rbit64(v19)) + (v18 << 6);
    v9 = v18;
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v15);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v16) = v17;
    swift_unknownObjectRetain();
  }
  while (v13 - 4 != v9)
  {
    v19 = *(_QWORD *)(v2 + 96 + 8 * v9++);
    if (v19)
    {
      v18 = v9 + 3;
      goto LABEL_23;
    }
  }
LABEL_24:
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_1B1EACDF0()
{
  return sub_1B1EB2CF0((unint64_t *)&qword_1EEF5B358);
}

uint64_t sub_1B1EACE04()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t result;

  v1 = v0;
  sub_1B1B9D92C();
  v2 = *v0;
  v3 = sub_1B22296B8();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
    goto LABEL_24;
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v27 = v9 + 1;
    if (v9 + 1 >= v13)
      goto LABEL_24;
    v28 = *(_QWORD *)(v6 + 8 * v27);
    if (!v28)
    {
      v27 = v9 + 2;
      if (v9 + 2 >= v13)
        goto LABEL_24;
      v28 = *(_QWORD *)(v6 + 8 * v27);
      if (!v28)
      {
        v27 = v9 + 3;
        if (v9 + 3 >= v13)
          goto LABEL_24;
        v28 = *(_QWORD *)(v6 + 8 * v27);
        if (!v28)
          break;
      }
    }
LABEL_23:
    v12 = (v28 - 1) & v28;
    v15 = __clz(__rbit64(v28)) + (v27 << 6);
    v9 = v27;
LABEL_12:
    v16 = 32 * v15;
    v17 = *(_QWORD *)(v2 + 48) + 32 * v15;
    v18 = *(_QWORD *)v17;
    v19 = *(_BYTE *)(v17 + 8);
    v20 = *(_QWORD *)(v17 + 16);
    LOBYTE(v17) = *(_BYTE *)(v17 + 24);
    v21 = 16 * v15;
    v22 = (uint64_t *)(*(_QWORD *)(v2 + 56) + v21);
    v23 = *v22;
    v24 = v22[1];
    v25 = *(_QWORD *)(v4 + 48) + v16;
    *(_QWORD *)v25 = v18;
    *(_BYTE *)(v25 + 8) = v19;
    *(_QWORD *)(v25 + 16) = v20;
    *(_BYTE *)(v25 + 24) = v17;
    v26 = (_QWORD *)(*(_QWORD *)(v4 + 56) + v21);
    *v26 = v23;
    v26[1] = v24;
    sub_1B1B1DD24(v18);
    swift_bridgeObjectRetain();
  }
  while (v13 - 4 != v9)
  {
    v28 = *(_QWORD *)(v2 + 96 + 8 * v9++);
    if (v28)
    {
      v27 = v9 + 3;
      goto LABEL_23;
    }
  }
LABEL_24:
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_1B1EACFCC()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t result;
  int64_t v24;
  uint64_t *v25;
  const void *v26;
  int64_t v27;

  v1 = v0;
  v2 = sub_1B222826C();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1B1B9C920();
  v7 = *v0;
  v8 = sub_1B22296B8();
  v9 = v8;
  if (!*(_QWORD *)(v7 + 16))
  {
    result = swift_release();
    goto LABEL_26;
  }
  v10 = (void *)(v8 + 64);
  v11 = (unint64_t)((1 << *(_BYTE *)(v9 + 32)) + 63) >> 6;
  v25 = v1;
  v26 = (const void *)(v7 + 64);
  if (v9 != v7 || (unint64_t)v10 >= v7 + 64 + 8 * v11)
    memmove(v10, v26, 8 * v11);
  v13 = 0;
  *(_QWORD *)(v9 + 16) = *(_QWORD *)(v7 + 16);
  v14 = 1 << *(_BYTE *)(v7 + 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & *(_QWORD *)(v7 + 64);
  v27 = (unint64_t)(v14 + 63) >> 6;
  v24 = v27 - 4;
  while (1)
  {
    if (v16)
    {
      v17 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v18 = v17 | (v13 << 6);
      goto LABEL_12;
    }
    v21 = v13 + 1;
    if (v13 + 1 >= v27)
      goto LABEL_24;
    v22 = *((_QWORD *)v26 + v21);
    if (!v22)
    {
      v21 = v13 + 2;
      if (v13 + 2 >= v27)
        goto LABEL_24;
      v22 = *((_QWORD *)v26 + v21);
      if (!v22)
      {
        v21 = v13 + 3;
        if (v13 + 3 >= v27)
          goto LABEL_24;
        v22 = *((_QWORD *)v26 + v21);
        if (!v22)
          break;
      }
    }
LABEL_23:
    v16 = (v22 - 1) & v22;
    v18 = __clz(__rbit64(v22)) + (v21 << 6);
    v13 = v21;
LABEL_12:
    v19 = *(_QWORD *)(v3 + 72) * v18;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v6, *(_QWORD *)(v7 + 48) + v19, v2);
    v20 = *(_BYTE *)(*(_QWORD *)(v7 + 56) + v18);
    (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(v9 + 48) + v19, v6, v2);
    *(_BYTE *)(*(_QWORD *)(v9 + 56) + v18) = v20;
  }
  while (v24 != v13)
  {
    v22 = *(_QWORD *)(v7 + 8 * v13++ + 96);
    if (v22)
    {
      v21 = v13 + 3;
      goto LABEL_23;
    }
  }
LABEL_24:
  result = swift_release();
  v1 = v25;
LABEL_26:
  *v1 = v9;
  return result;
}

uint64_t sub_1B1EAD1FC()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  unint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t result;
  int64_t v32;
  uint64_t *v33;
  const void *v34;
  int64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v1 = v0;
  v37 = sub_1B222826C();
  v2 = *(_QWORD *)(v37 - 8);
  MEMORY[0x1E0C80A78](v37, v3);
  v36 = (char *)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1B1EB66A8();
  v5 = *v0;
  v6 = sub_1B22296B8();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
  {
    result = swift_release();
    goto LABEL_26;
  }
  v8 = (void *)(v6 + 64);
  v9 = (unint64_t)((1 << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  v33 = v1;
  v34 = (const void *)(v5 + 64);
  if (v7 != v5 || (unint64_t)v8 >= v5 + 64 + 8 * v9)
    memmove(v8, v34, 8 * v9);
  v11 = 0;
  v12 = *(_QWORD *)(v5 + 16);
  v38 = v7;
  v39 = v5;
  *(_QWORD *)(v7 + 16) = v12;
  v13 = 1 << *(_BYTE *)(v5 + 32);
  v14 = -1;
  if (v13 < 64)
    v14 = ~(-1 << v13);
  v15 = v14 & *(_QWORD *)(v5 + 64);
  v35 = (unint64_t)(v13 + 63) >> 6;
  v32 = v35 - 4;
  v17 = v36;
  v16 = v37;
  v18 = v38;
  while (1)
  {
    if (v15)
    {
      v19 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v20 = v19 | (v11 << 6);
      v21 = v39;
      goto LABEL_12;
    }
    v29 = v11 + 1;
    if (v11 + 1 >= v35)
      goto LABEL_25;
    v30 = *((_QWORD *)v34 + v29);
    v21 = v39;
    if (!v30)
    {
      v29 = v11 + 2;
      if (v11 + 2 >= v35)
        goto LABEL_25;
      v30 = *((_QWORD *)v34 + v29);
      if (!v30)
      {
        v29 = v11 + 3;
        if (v11 + 3 >= v35)
          goto LABEL_25;
        v30 = *((_QWORD *)v34 + v29);
        if (!v30)
          break;
      }
    }
LABEL_23:
    v15 = (v30 - 1) & v30;
    v20 = __clz(__rbit64(v30)) + (v29 << 6);
    v11 = v29;
LABEL_12:
    v22 = *(_QWORD *)(v2 + 72) * v20;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v17, *(_QWORD *)(v21 + 48) + v22, v16);
    v23 = *(_QWORD *)(v21 + 56);
    v24 = 16 * v20;
    v25 = v23 + 16 * v20;
    v26 = *(void **)v25;
    v27 = *(_BYTE *)(v25 + 8);
    (*(void (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(_QWORD *)(v18 + 48) + v22, v17, v16);
    v28 = *(_QWORD *)(v18 + 56) + v24;
    *(_QWORD *)v28 = v26;
    *(_BYTE *)(v28 + 8) = v27;
    sub_1B1BE2C40(v26, v27);
  }
  while (v32 != v11)
  {
    v30 = *(_QWORD *)(v39 + 8 * v11++ + 96);
    if (v30)
    {
      v29 = v11 + 3;
      goto LABEL_23;
    }
  }
LABEL_25:
  result = swift_release();
  v1 = v33;
  v7 = v38;
LABEL_26:
  *v1 = v7;
  return result;
}

uint64_t sub_1B1EAD470()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t result;

  v1 = v0;
  sub_1B1B99B8C(0, (unint64_t *)&qword_1EEF5B740, (void (*)(uint64_t))sub_1B1EB6644);
  v2 = *v0;
  v3 = sub_1B22296B8();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
    goto LABEL_24;
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (v9 + 1 >= v13)
      goto LABEL_24;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    if (!v21)
    {
      v20 = v9 + 2;
      if (v9 + 2 >= v13)
        goto LABEL_24;
      v21 = *(_QWORD *)(v6 + 8 * v20);
      if (!v21)
      {
        v20 = v9 + 3;
        if (v9 + 3 >= v13)
          goto LABEL_24;
        v21 = *(_QWORD *)(v6 + 8 * v20);
        if (!v21)
          break;
      }
    }
LABEL_23:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v20 << 6);
    v9 = v20;
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v18 = 16 * v15;
    v19 = *(_OWORD *)(*(_QWORD *)(v2 + 56) + v18);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    *(_OWORD *)(*(_QWORD *)(v4 + 56) + v18) = v19;
    sub_1B1B632F0(*((unint64_t *)&v19 + 1));
  }
  while (v13 - 4 != v9)
  {
    v21 = *(_QWORD *)(v2 + 96 + 8 * v9++);
    if (v21)
    {
      v20 = v9 + 3;
      goto LABEL_23;
    }
  }
LABEL_24:
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_1B1EAD62C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t result;

  v1 = v0;
  sub_1B1B9D4E0();
  v2 = *v0;
  v3 = sub_1B22296B8();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
    goto LABEL_24;
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v23 = v9 + 1;
    if (v9 + 1 >= v13)
      goto LABEL_24;
    v24 = *(_QWORD *)(v6 + 8 * v23);
    if (!v24)
    {
      v23 = v9 + 2;
      if (v9 + 2 >= v13)
        goto LABEL_24;
      v24 = *(_QWORD *)(v6 + 8 * v23);
      if (!v24)
      {
        v23 = v9 + 3;
        if (v9 + 3 >= v13)
          goto LABEL_24;
        v24 = *(_QWORD *)(v6 + 8 * v23);
        if (!v24)
          break;
      }
    }
LABEL_23:
    v12 = (v24 - 1) & v24;
    v15 = __clz(__rbit64(v24)) + (v23 << 6);
    v9 = v23;
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = *v17;
    v19 = v17[1];
    v20 = 8 * v15;
    v21 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v20);
    v22 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v22 = v18;
    v22[1] = v19;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v20) = v21;
    swift_retain();
    sub_1B1B632F0(v21);
  }
  while (v13 - 4 != v9)
  {
    v24 = *(_QWORD *)(v2 + 96 + 8 * v9++);
    if (v24)
    {
      v23 = v9 + 3;
      goto LABEL_23;
    }
  }
LABEL_24:
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_1B1EAD7D4()
{
  return sub_1B1EB1284(sub_1B1EB5BC0);
}

uint64_t sub_1B1EAD7E0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  void (*v6)(uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  char v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t result;
  uint64_t v28;
  int64_t v29;
  uint64_t *v30;
  const void *v31;
  int64_t v32;
  uint64_t v33;

  v1 = v0;
  v2 = type metadata accessor for GraphScriptingConfig.ScriptInfo();
  v33 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1B1B99DB0(0, (unint64_t *)&qword_1ED4BA8C0, v6, (void (*)(void))sub_1B1B9DE34);
  v7 = *v0;
  v8 = sub_1B22296B8();
  v9 = v8;
  if (!*(_QWORD *)(v7 + 16))
  {
    result = swift_release();
    goto LABEL_26;
  }
  v10 = (void *)(v8 + 64);
  v11 = (unint64_t)((1 << *(_BYTE *)(v9 + 32)) + 63) >> 6;
  v30 = v1;
  v31 = (const void *)(v7 + 64);
  if (v9 != v7 || (unint64_t)v10 >= v7 + 64 + 8 * v11)
    memmove(v10, v31, 8 * v11);
  v13 = 0;
  *(_QWORD *)(v9 + 16) = *(_QWORD *)(v7 + 16);
  v14 = 1 << *(_BYTE *)(v7 + 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & *(_QWORD *)(v7 + 64);
  v32 = (unint64_t)(v14 + 63) >> 6;
  v29 = v32 - 4;
  while (1)
  {
    if (v16)
    {
      v17 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v18 = v17 | (v13 << 6);
      goto LABEL_12;
    }
    v25 = v13 + 1;
    if (v13 + 1 >= v32)
      goto LABEL_24;
    v26 = *((_QWORD *)v31 + v25);
    if (!v26)
    {
      v25 = v13 + 2;
      if (v13 + 2 >= v32)
        goto LABEL_24;
      v26 = *((_QWORD *)v31 + v25);
      if (!v26)
      {
        v25 = v13 + 3;
        if (v13 + 3 >= v32)
          goto LABEL_24;
        v26 = *((_QWORD *)v31 + v25);
        if (!v26)
          break;
      }
    }
LABEL_23:
    v16 = (v26 - 1) & v26;
    v18 = __clz(__rbit64(v26)) + (v25 << 6);
    v13 = v25;
LABEL_12:
    v19 = 8 * v18;
    v20 = *(_QWORD *)(v7 + 48) + 8 * v18;
    v21 = *(_DWORD *)v20;
    v22 = *(_BYTE *)(v20 + 4);
    v23 = *(_QWORD *)(v33 + 72) * v18;
    sub_1B1792810(*(_QWORD *)(v7 + 56) + v23, (uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for GraphScriptingConfig.ScriptInfo);
    v24 = *(_QWORD *)(v9 + 48) + v19;
    *(_DWORD *)v24 = v21;
    *(_BYTE *)(v24 + 4) = v22;
    sub_1B1A025EC((uint64_t)v5, *(_QWORD *)(v9 + 56) + v23, (uint64_t (*)(_QWORD))type metadata accessor for GraphScriptingConfig.ScriptInfo);
  }
  while (v29 != v13)
  {
    v26 = *(_QWORD *)(v7 + 8 * v13++ + 96);
    if (v26)
    {
      v25 = v13 + 3;
      goto LABEL_23;
    }
  }
LABEL_24:
  result = swift_release();
  v1 = v30;
LABEL_26:
  *v1 = v9;
  return result;
}

uint64_t sub_1B1EADA44()
{
  return sub_1B1EB1284(sub_1B1EB5B48);
}

uint64_t sub_1B1EADA50()
{
  return sub_1B1EB09CC((void (*)(_QWORD))sub_1B1EB6AF4);
}

uint64_t sub_1B1EADA5C()
{
  return sub_1B1EAAD90((unint64_t *)&qword_1ED4B7A50);
}

uint64_t sub_1B1EADA80()
{
  return sub_1B1EB09CC((void (*)(_QWORD))sub_1B1EB68B0);
}

uint64_t sub_1B1EADA8C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t result;

  v1 = v0;
  sub_1B1B99B8C(0, &qword_1EEF60188, type metadata accessor for RGResource);
  v2 = *v0;
  v3 = sub_1B22296B8();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
    goto LABEL_24;
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v18 = v9 + 1;
    if (v9 + 1 >= v13)
      goto LABEL_24;
    v19 = *(_QWORD *)(v6 + 8 * v18);
    if (!v19)
    {
      v18 = v9 + 2;
      if (v9 + 2 >= v13)
        goto LABEL_24;
      v19 = *(_QWORD *)(v6 + 8 * v18);
      if (!v19)
      {
        v18 = v9 + 3;
        if (v9 + 3 >= v13)
          goto LABEL_24;
        v19 = *(_QWORD *)(v6 + 8 * v18);
        if (!v19)
          break;
      }
    }
LABEL_23:
    v20 = __clz(__rbit64(v19));
    v12 = (v19 - 1) & v19;
    v15 = v20 + (v18 << 6);
    v9 = v18;
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v15);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v16) = v17;
  }
  while (v13 - 4 != v9)
  {
    v19 = *(_QWORD *)(v2 + 96 + 8 * v9++);
    if (v19)
    {
      v18 = v9 + 3;
      goto LABEL_23;
    }
  }
LABEL_24:
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_1B1EADC24()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t result;
  int64_t v25;
  uint64_t *v26;
  const void *v27;
  int64_t v28;

  v1 = v0;
  v2 = sub_1B222826C();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1B1B9D3B4();
  v7 = *v0;
  v8 = sub_1B22296B8();
  v9 = v8;
  if (!*(_QWORD *)(v7 + 16))
  {
    result = swift_release();
    goto LABEL_26;
  }
  v10 = (void *)(v8 + 64);
  v11 = (unint64_t)((1 << *(_BYTE *)(v9 + 32)) + 63) >> 6;
  v26 = v1;
  v27 = (const void *)(v7 + 64);
  if (v9 != v7 || (unint64_t)v10 >= v7 + 64 + 8 * v11)
    memmove(v10, v27, 8 * v11);
  v13 = 0;
  *(_QWORD *)(v9 + 16) = *(_QWORD *)(v7 + 16);
  v14 = 1 << *(_BYTE *)(v7 + 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & *(_QWORD *)(v7 + 64);
  v28 = (unint64_t)(v14 + 63) >> 6;
  v25 = v28 - 4;
  while (1)
  {
    if (v16)
    {
      v17 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v18 = v17 | (v13 << 6);
      goto LABEL_12;
    }
    v22 = v13 + 1;
    if (v13 + 1 >= v28)
      goto LABEL_24;
    v23 = *((_QWORD *)v27 + v22);
    if (!v23)
    {
      v22 = v13 + 2;
      if (v13 + 2 >= v28)
        goto LABEL_24;
      v23 = *((_QWORD *)v27 + v22);
      if (!v23)
      {
        v22 = v13 + 3;
        if (v13 + 3 >= v28)
          goto LABEL_24;
        v23 = *((_QWORD *)v27 + v22);
        if (!v23)
          break;
      }
    }
LABEL_23:
    v16 = (v23 - 1) & v23;
    v18 = __clz(__rbit64(v23)) + (v22 << 6);
    v13 = v22;
LABEL_12:
    v19 = *(_QWORD *)(v3 + 72) * v18;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v6, *(_QWORD *)(v7 + 48) + v19, v2);
    v20 = 8 * v18;
    v21 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v18);
    (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(v9 + 48) + v19, v6, v2);
    *(_QWORD *)(*(_QWORD *)(v9 + 56) + v20) = v21;
    swift_bridgeObjectRetain();
  }
  while (v25 != v13)
  {
    v23 = *(_QWORD *)(v7 + 8 * v13++ + 96);
    if (v23)
    {
      v22 = v13 + 3;
      goto LABEL_23;
    }
  }
LABEL_24:
  result = swift_release();
  v1 = v26;
LABEL_26:
  *v1 = v9;
  return result;
}

uint64_t sub_1B1EADE60()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t result;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  char v47;

  v1 = v0;
  sub_1B1B99B8C(0, &qword_1EEF60158, (void (*)(uint64_t))sub_1B1C795D4);
  v2 = *v0;
  v3 = sub_1B22296B8();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
    goto LABEL_24;
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v35 = v9 + 1;
    if (v9 + 1 >= v13)
      goto LABEL_24;
    v36 = *(_QWORD *)(v6 + 8 * v35);
    if (!v36)
    {
      v35 = v9 + 2;
      if (v9 + 2 >= v13)
        goto LABEL_24;
      v36 = *(_QWORD *)(v6 + 8 * v35);
      if (!v36)
      {
        v35 = v9 + 3;
        if (v9 + 3 >= v13)
          goto LABEL_24;
        v36 = *(_QWORD *)(v6 + 8 * v35);
        if (!v36)
          break;
      }
    }
LABEL_23:
    v12 = (v36 - 1) & v36;
    v15 = __clz(__rbit64(v36)) + (v35 << 6);
    v9 = v35;
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v18 = 152 * v15;
    v19 = *(_QWORD *)(v2 + 56) + v18;
    v20 = *(_OWORD *)(v19 + 32);
    v21 = *(_OWORD *)(v19 + 48);
    v22 = *(_OWORD *)(v19 + 80);
    v42 = *(_OWORD *)(v19 + 64);
    v43 = v22;
    v41 = v21;
    v24 = *(_OWORD *)(v19 + 112);
    v23 = *(_OWORD *)(v19 + 128);
    v25 = *(_OWORD *)(v19 + 96);
    v47 = *(_BYTE *)(v19 + 144);
    v45 = v24;
    v46 = v23;
    v44 = v25;
    v26 = *(_OWORD *)(v19 + 16);
    v38 = *(_OWORD *)v19;
    v39 = v26;
    v40 = v20;
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    v27 = *(_QWORD *)(v4 + 56) + v18;
    v28 = v39;
    *(_OWORD *)v27 = v38;
    *(_OWORD *)(v27 + 16) = v28;
    v29 = v40;
    v30 = v41;
    v31 = v43;
    *(_OWORD *)(v27 + 64) = v42;
    *(_OWORD *)(v27 + 80) = v31;
    *(_OWORD *)(v27 + 32) = v29;
    *(_OWORD *)(v27 + 48) = v30;
    v32 = v44;
    v33 = v45;
    v34 = v46;
    *(_BYTE *)(v27 + 144) = v47;
    *(_OWORD *)(v27 + 112) = v33;
    *(_OWORD *)(v27 + 128) = v34;
    *(_OWORD *)(v27 + 96) = v32;
    sub_1B1B7C5AC((uint64_t)&v38);
  }
  while (v13 - 4 != v9)
  {
    v36 = *(_QWORD *)(v2 + 8 * v9++ + 96);
    if (v36)
    {
      v35 = v9 + 3;
      goto LABEL_23;
    }
  }
LABEL_24:
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_1B1EAE08C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t result;

  v1 = v0;
  sub_1B1EB6834();
  v2 = *v0;
  v3 = sub_1B22296B8();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
    goto LABEL_24;
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (v9 + 1 >= v13)
      goto LABEL_24;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    if (!v21)
    {
      v20 = v9 + 2;
      if (v9 + 2 >= v13)
        goto LABEL_24;
      v21 = *(_QWORD *)(v6 + 8 * v20);
      if (!v21)
      {
        v20 = v9 + 3;
        if (v9 + 3 >= v13)
          goto LABEL_24;
        v21 = *(_QWORD *)(v6 + 8 * v20);
        if (!v21)
          break;
      }
    }
LABEL_23:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v20 << 6);
    v9 = v20;
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v18 = 16 * v15;
    v19 = *(_OWORD *)(*(_QWORD *)(v2 + 56) + v18);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    *(_OWORD *)(*(_QWORD *)(v4 + 56) + v18) = v19;
    swift_bridgeObjectRetain();
  }
  while (v13 - 4 != v9)
  {
    v21 = *(_QWORD *)(v2 + 96 + 8 * v9++);
    if (v21)
    {
      v20 = v9 + 3;
      goto LABEL_23;
    }
  }
LABEL_24:
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_1B1EAE228()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t result;

  v1 = v0;
  sub_1B1B99DB0(0, (unint64_t *)&unk_1EEF600A0, (void (*)(uint64_t))_s17CodeSourceSnippetCMa, (void (*)(void))sub_1B1B9CCE0);
  v2 = *v0;
  v3 = sub_1B22296B8();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
    goto LABEL_24;
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v26 = v9 + 1;
    if (v9 + 1 >= v13)
      goto LABEL_24;
    v27 = *(_QWORD *)(v6 + 8 * v26);
    if (!v27)
    {
      v26 = v9 + 2;
      if (v9 + 2 >= v13)
        goto LABEL_24;
      v27 = *(_QWORD *)(v6 + 8 * v26);
      if (!v27)
      {
        v26 = v9 + 3;
        if (v9 + 3 >= v13)
          goto LABEL_24;
        v27 = *(_QWORD *)(v6 + 8 * v26);
        if (!v27)
          break;
      }
    }
LABEL_23:
    v12 = (v27 - 1) & v27;
    v15 = __clz(__rbit64(v27)) + (v26 << 6);
    v9 = v26;
LABEL_12:
    v16 = 40 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 40 * v15);
    v18 = *v17;
    v19 = v17[1];
    v20 = v17[2];
    v21 = v17[3];
    v22 = v17[4];
    v23 = 8 * v15;
    v24 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v23);
    v25 = (uint64_t *)(*(_QWORD *)(v4 + 48) + v16);
    *v25 = *v17;
    v25[1] = v19;
    v25[2] = v20;
    v25[3] = v21;
    v25[4] = v22;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v23) = v24;
    sub_1B19FA2B4(v18, v19);
    swift_retain();
  }
  while (v13 - 4 != v9)
  {
    v27 = *(_QWORD *)(v2 + 96 + 8 * v9++);
    if (v27)
    {
      v26 = v9 + 3;
      goto LABEL_23;
    }
  }
LABEL_24:
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_1B1EAE404()
{
  return sub_1B1EB1284(sub_1B1EB657C);
}

uint64_t sub_1B1EAE410()
{
  return sub_1B1EB1284(sub_1B1EB63CC);
}

uint64_t sub_1B1EAE41C()
{
  return sub_1B1EB1284(sub_1B1EB63A8);
}

uint64_t sub_1B1EAE428()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t result;
  uint64_t *v25;
  _BYTE v26[48];

  v1 = v0;
  sub_1B1B9A0EC();
  v2 = *v0;
  v3 = sub_1B22296B8();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
    goto LABEL_26;
  }
  v25 = v1;
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (v9 + 1 >= v13)
      goto LABEL_24;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    if (!v23)
    {
      v22 = v9 + 2;
      if (v9 + 2 >= v13)
        goto LABEL_24;
      v23 = *(_QWORD *)(v6 + 8 * v22);
      if (!v23)
      {
        v22 = v9 + 3;
        if (v9 + 3 >= v13)
          goto LABEL_24;
        v23 = *(_QWORD *)(v6 + 8 * v22);
        if (!v23)
          break;
      }
    }
LABEL_23:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v22 << 6);
    v9 = v22;
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = *v17;
    v19 = 48 * v15;
    v20 = v17[1];
    sub_1B1D12130(*(_QWORD *)(v2 + 56) + 48 * v15, (uint64_t)v26);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = v18;
    v21[1] = v20;
    sub_1B1B9A190((uint64_t)v26, *(_QWORD *)(v4 + 56) + v19);
  }
  while (v13 - 4 != v9)
  {
    v23 = *(_QWORD *)(v2 + 8 * v9++ + 96);
    if (v23)
    {
      v22 = v9 + 3;
      goto LABEL_23;
    }
  }
LABEL_24:
  result = swift_release();
  v1 = v25;
LABEL_26:
  *v1 = v4;
  return result;
}

uint64_t sub_1B1EAE604()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  unint64_t v20;
  __int128 *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  _OWORD *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t result;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;

  v1 = v0;
  sub_1B1B99DB0(0, (unint64_t *)&unk_1EEF5FF20, (void (*)(uint64_t))sub_1B1B9BFA8, (void (*)(void))sub_1B1B9C020);
  v2 = *v0;
  v3 = sub_1B22296B8();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
    goto LABEL_24;
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v36 = v9 + 1;
    if (v9 + 1 >= v13)
      goto LABEL_24;
    v37 = *(_QWORD *)(v6 + 8 * v36);
    if (!v37)
    {
      v36 = v9 + 2;
      if (v9 + 2 >= v13)
        goto LABEL_24;
      v37 = *(_QWORD *)(v6 + 8 * v36);
      if (!v37)
      {
        v36 = v9 + 3;
        if (v9 + 3 >= v13)
          goto LABEL_24;
        v37 = *(_QWORD *)(v6 + 8 * v36);
        if (!v37)
          break;
      }
    }
LABEL_23:
    v12 = (v37 - 1) & v37;
    v15 = __clz(__rbit64(v37)) + (v36 << 6);
    v9 = v36;
LABEL_12:
    v16 = 16 * v15;
    v17 = *(_QWORD *)(v2 + 48) + 16 * v15;
    v18 = *(_BYTE *)v17;
    v19 = *(_QWORD *)(v17 + 8);
    v20 = v15 << 7;
    v21 = (__int128 *)(*(_QWORD *)(v2 + 56) + v20);
    v22 = v21[7];
    v24 = v21[4];
    v23 = v21[5];
    v45 = v21[6];
    v46 = v22;
    v43 = v24;
    v44 = v23;
    v26 = *v21;
    v25 = v21[1];
    v27 = v21[3];
    v41 = v21[2];
    v42 = v27;
    v39 = v26;
    v40 = v25;
    v28 = *(_QWORD *)(v4 + 48) + v16;
    *(_BYTE *)v28 = v18;
    *(_QWORD *)(v28 + 8) = v19;
    v29 = (_OWORD *)(*(_QWORD *)(v4 + 56) + v20);
    v30 = v39;
    v31 = v40;
    v32 = v42;
    v29[2] = v41;
    v29[3] = v32;
    *v29 = v30;
    v29[1] = v31;
    v33 = v43;
    v34 = v44;
    v35 = v46;
    v29[6] = v45;
    v29[7] = v35;
    v29[4] = v33;
    v29[5] = v34;
    sub_1B1CC6C0C((uint64_t)&v39);
  }
  while (v13 - 4 != v9)
  {
    v37 = *(_QWORD *)(v2 + 8 * v9++ + 96);
    if (v37)
    {
      v36 = v9 + 3;
      goto LABEL_23;
    }
  }
LABEL_24:
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_1B1EAE810()
{
  return sub_1B1EB09CC((void (*)(_QWORD))sub_1B1EB5CD0);
}

uint64_t sub_1B1EAE81C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  __int128 v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t result;

  v1 = v0;
  sub_1B1B99E68();
  v2 = *v0;
  v3 = sub_1B22296B8();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
    goto LABEL_24;
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v21 = v9 + 1;
    if (v9 + 1 >= v13)
      goto LABEL_24;
    v22 = *(_QWORD *)(v6 + 8 * v21);
    if (!v22)
    {
      v21 = v9 + 2;
      if (v9 + 2 >= v13)
        goto LABEL_24;
      v22 = *(_QWORD *)(v6 + 8 * v21);
      if (!v22)
      {
        v21 = v9 + 3;
        if (v9 + 3 >= v13)
          goto LABEL_24;
        v22 = *(_QWORD *)(v6 + 8 * v21);
        if (!v22)
          break;
      }
    }
LABEL_23:
    v12 = (v22 - 1) & v22;
    v15 = __clz(__rbit64(v22)) + (v21 << 6);
    v9 = v21;
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = v17[1];
    v19 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    v20 = *(_OWORD *)(*(_QWORD *)(v2 + 56) + v16);
    *v19 = *v17;
    v19[1] = v18;
    *(_OWORD *)(*(_QWORD *)(v4 + 56) + v16) = v20;
    sub_1B1B99F0C(v20, *((unint64_t *)&v20 + 1));
  }
  while (v13 - 4 != v9)
  {
    v22 = *(_QWORD *)(v2 + 96 + 8 * v9++);
    if (v22)
    {
      v21 = v9 + 3;
      goto LABEL_23;
    }
  }
LABEL_24:
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_1B1EAE9C8()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t result;
  uint64_t *v25;
  _BYTE v26[96];

  v1 = v0;
  sub_1B1B9A1CC();
  v2 = *v0;
  v3 = sub_1B22296B8();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
    goto LABEL_26;
  }
  v25 = v1;
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (v9 + 1 >= v13)
      goto LABEL_24;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    if (!v23)
    {
      v22 = v9 + 2;
      if (v9 + 2 >= v13)
        goto LABEL_24;
      v23 = *(_QWORD *)(v6 + 8 * v22);
      if (!v23)
      {
        v22 = v9 + 3;
        if (v9 + 3 >= v13)
          goto LABEL_24;
        v23 = *(_QWORD *)(v6 + 8 * v22);
        if (!v23)
          break;
      }
    }
LABEL_23:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v22 << 6);
    v9 = v22;
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = *v17;
    v19 = 96 * v15;
    v20 = v17[1];
    sub_1B1C1A1D0(*(_QWORD *)(v2 + 56) + 96 * v15, (uint64_t)v26);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = v18;
    v21[1] = v20;
    sub_1B1B99D74((uint64_t)v26, *(_QWORD *)(v4 + 56) + v19);
  }
  while (v13 - 4 != v9)
  {
    v23 = *(_QWORD *)(v2 + 8 * v9++ + 96);
    if (v23)
    {
      v22 = v9 + 3;
      goto LABEL_23;
    }
  }
LABEL_24:
  result = swift_release();
  v1 = v25;
LABEL_26:
  *v1 = v4;
  return result;
}

uint64_t sub_1B1EAEBA4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t result;
  _BYTE v20[32];
  _BYTE v21[32];

  v1 = v0;
  sub_1B1D20D50();
  v2 = *v0;
  v3 = sub_1B22296B8();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
    goto LABEL_24;
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v17 = v9 + 1;
    if (v9 + 1 >= v13)
      goto LABEL_24;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
    {
      v17 = v9 + 2;
      if (v9 + 2 >= v13)
        goto LABEL_24;
      v18 = *(_QWORD *)(v6 + 8 * v17);
      if (!v18)
      {
        v17 = v9 + 3;
        if (v9 + 3 >= v13)
          goto LABEL_24;
        v18 = *(_QWORD *)(v6 + 8 * v17);
        if (!v18)
          break;
      }
    }
LABEL_23:
    v12 = (v18 - 1) & v18;
    v15 = __clz(__rbit64(v18)) + (v17 << 6);
    v9 = v17;
LABEL_12:
    v16 = 32 * v15;
    sub_1B1A00060(*(_QWORD *)(v2 + 48) + 32 * v15, (uint64_t)v21);
    sub_1B1A00060(*(_QWORD *)(v2 + 56) + v16, (uint64_t)v20);
    sub_1B19FC2D0((uint64_t)v21, *(_QWORD *)(v4 + 48) + v16);
    sub_1B19FC2D0((uint64_t)v20, *(_QWORD *)(v4 + 56) + v16);
  }
  while (v13 - 4 != v9)
  {
    v18 = *(_QWORD *)(v2 + 8 * v9++ + 96);
    if (v18)
    {
      v17 = v9 + 3;
      goto LABEL_23;
    }
  }
LABEL_24:
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_1B1EAED60()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t result;

  v1 = v0;
  sub_1B1B9A22C();
  v2 = *v0;
  v3 = sub_1B22296B8();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
    goto LABEL_24;
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v37 = v9 + 1;
    if (v9 + 1 >= v13)
      goto LABEL_24;
    v38 = *(_QWORD *)(v6 + 8 * v37);
    if (!v38)
    {
      v37 = v9 + 2;
      if (v9 + 2 >= v13)
        goto LABEL_24;
      v38 = *(_QWORD *)(v6 + 8 * v37);
      if (!v38)
      {
        v37 = v9 + 3;
        if (v9 + 3 >= v13)
          goto LABEL_24;
        v38 = *(_QWORD *)(v6 + 8 * v37);
        if (!v38)
          break;
      }
    }
LABEL_23:
    v12 = (v38 - 1) & v38;
    v15 = __clz(__rbit64(v38)) + (v37 << 6);
    v9 = v37;
LABEL_12:
    v16 = 96 * v15;
    v17 = *(_QWORD *)(v2 + 48) + 96 * v15;
    v18 = *(_QWORD *)(v17 + 88);
    v19 = 112 * v15;
    v20 = *(_QWORD *)(v2 + 56) + v19;
    v21 = *(_QWORD *)(v20 + 16);
    v22 = *(_BYTE *)(v20 + 24);
    v23 = *(_QWORD *)(v4 + 48) + v16;
    v24 = *(_OWORD *)(v17 + 8);
    v25 = *(_OWORD *)(v17 + 24);
    v26 = *(_OWORD *)(v17 + 40);
    v27 = *(_OWORD *)(v17 + 56);
    v28 = *(_OWORD *)(v17 + 72);
    v29 = *(_QWORD *)(v20 + 64);
    v30 = *(_QWORD *)(v20 + 104);
    v31 = *(_OWORD *)(v20 + 32);
    v32 = *(_OWORD *)(v20 + 48);
    v33 = *(_OWORD *)(v20 + 72);
    v34 = *(_OWORD *)(v20 + 88);
    v35 = *(_OWORD *)v20;
    *(_DWORD *)v23 = *(_DWORD *)v17;
    *(_OWORD *)(v23 + 8) = v24;
    *(_OWORD *)(v23 + 24) = v25;
    *(_OWORD *)(v23 + 40) = v26;
    *(_OWORD *)(v23 + 56) = v27;
    *(_OWORD *)(v23 + 72) = v28;
    *(_QWORD *)(v23 + 88) = v18;
    v36 = *(_QWORD *)(v4 + 56) + v19;
    *(_OWORD *)v36 = v35;
    *(_QWORD *)(v36 + 16) = v21;
    *(_BYTE *)(v36 + 24) = v22;
    *(_OWORD *)(v36 + 32) = v31;
    *(_OWORD *)(v36 + 48) = v32;
    *(_QWORD *)(v36 + 64) = v29;
    *(_OWORD *)(v36 + 72) = v33;
    *(_OWORD *)(v36 + 88) = v34;
    *(_QWORD *)(v36 + 104) = v30;
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
  }
  while (v13 - 4 != v9)
  {
    v38 = *(_QWORD *)(v2 + 96 + 8 * v9++);
    if (v38)
    {
      v37 = v9 + 3;
      goto LABEL_23;
    }
  }
LABEL_24:
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_1B1EAEF94()
{
  return sub_1B1EB09CC(sub_1B1EB5C4C);
}

uint64_t sub_1B1EAEFA0()
{
  return sub_1B1EB1284(sub_1B1EB5B24);
}

uint64_t sub_1B1EAEFAC()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  __int16 v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t result;

  v1 = v0;
  sub_1B1EB6DB4(0, (unint64_t *)&qword_1ED4BA990);
  v2 = *v0;
  v3 = sub_1B22296B8();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
    goto LABEL_24;
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v32 = v9 + 1;
    if (v9 + 1 >= v13)
      goto LABEL_24;
    v33 = *(_QWORD *)(v6 + 8 * v32);
    if (!v33)
    {
      v32 = v9 + 2;
      if (v9 + 2 >= v13)
        goto LABEL_24;
      v33 = *(_QWORD *)(v6 + 8 * v32);
      if (!v33)
      {
        v32 = v9 + 3;
        if (v9 + 3 >= v13)
          goto LABEL_24;
        v33 = *(_QWORD *)(v6 + 8 * v32);
        if (!v33)
          break;
      }
    }
LABEL_23:
    v12 = (v33 - 1) & v33;
    v15 = __clz(__rbit64(v33)) + (v32 << 6);
    v9 = v32;
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v18 = 120 * v15;
    v19 = *(_QWORD *)(v2 + 56) + v18;
    v20 = *(_QWORD *)(v19 + 16);
    v21 = *(_BYTE *)(v19 + 24);
    v22 = *(_WORD *)(v19 + 40);
    v23 = *(_BYTE *)(v19 + 42);
    v24 = *(_QWORD *)(v19 + 96);
    v25 = *(_QWORD *)(v19 + 112);
    v26 = *(_QWORD *)(v19 + 32);
    v27 = *(_OWORD *)v19;
    v28 = *(_OWORD *)(v19 + 48);
    v29 = *(_OWORD *)(v19 + 64);
    v30 = *(_OWORD *)(v19 + 80);
    LODWORD(v19) = *(_DWORD *)(v19 + 104);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    v31 = *(_QWORD *)(v4 + 56) + v18;
    *(_OWORD *)v31 = v27;
    *(_QWORD *)(v31 + 16) = v20;
    *(_BYTE *)(v31 + 24) = v21;
    *(_QWORD *)(v31 + 32) = v26;
    *(_WORD *)(v31 + 40) = v22;
    *(_BYTE *)(v31 + 42) = v23;
    *(_OWORD *)(v31 + 48) = v28;
    *(_OWORD *)(v31 + 64) = v29;
    *(_OWORD *)(v31 + 80) = v30;
    *(_QWORD *)(v31 + 96) = v24;
    *(_DWORD *)(v31 + 104) = v19;
    *(_QWORD *)(v31 + 112) = v25;
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
  }
  while (v13 - 4 != v9)
  {
    v33 = *(_QWORD *)(v2 + 96 + 8 * v9++);
    if (v33)
    {
      v32 = v9 + 3;
      goto LABEL_23;
    }
  }
LABEL_24:
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_1B1EAF1CC()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  unint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t result;
  int64_t v31;
  uint64_t *v32;
  const void *v33;
  int64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v1 = v0;
  v36 = sub_1B2228110();
  v2 = *(_QWORD *)(v36 - 8);
  MEMORY[0x1E0C80A78](v36, v3);
  v35 = (char *)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1B1B9C824();
  v5 = *v0;
  v6 = sub_1B22296B8();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
  {
    result = swift_release();
    goto LABEL_26;
  }
  v8 = (void *)(v6 + 64);
  v9 = (unint64_t)((1 << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  v32 = v1;
  v33 = (const void *)(v5 + 64);
  if (v7 != v5 || (unint64_t)v8 >= v5 + 64 + 8 * v9)
    memmove(v8, v33, 8 * v9);
  v11 = 0;
  v12 = *(_QWORD *)(v5 + 16);
  v37 = v7;
  v38 = v5;
  *(_QWORD *)(v7 + 16) = v12;
  v13 = 1 << *(_BYTE *)(v5 + 32);
  v14 = -1;
  if (v13 < 64)
    v14 = ~(-1 << v13);
  v15 = v14 & *(_QWORD *)(v5 + 64);
  v34 = (unint64_t)(v13 + 63) >> 6;
  v31 = v34 - 4;
  v17 = v35;
  v16 = v36;
  v18 = v37;
  while (1)
  {
    if (v15)
    {
      v19 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v20 = v19 | (v11 << 6);
      v21 = v38;
      goto LABEL_12;
    }
    v28 = v11 + 1;
    if (v11 + 1 >= v34)
      goto LABEL_25;
    v29 = *((_QWORD *)v33 + v28);
    v21 = v38;
    if (!v29)
    {
      v28 = v11 + 2;
      if (v11 + 2 >= v34)
        goto LABEL_25;
      v29 = *((_QWORD *)v33 + v28);
      if (!v29)
      {
        v28 = v11 + 3;
        if (v11 + 3 >= v34)
          goto LABEL_25;
        v29 = *((_QWORD *)v33 + v28);
        if (!v29)
          break;
      }
    }
LABEL_23:
    v15 = (v29 - 1) & v29;
    v20 = __clz(__rbit64(v29)) + (v28 << 6);
    v11 = v28;
LABEL_12:
    v22 = *(_QWORD *)(v2 + 72) * v20;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v17, *(_QWORD *)(v21 + 48) + v22, v16);
    v23 = 16 * v20;
    v24 = (uint64_t *)(*(_QWORD *)(v21 + 56) + 16 * v20);
    v25 = *v24;
    v26 = v24[1];
    (*(void (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(_QWORD *)(v18 + 48) + v22, v17, v16);
    v27 = (_QWORD *)(*(_QWORD *)(v18 + 56) + v23);
    *v27 = v25;
    v27[1] = v26;
    swift_bridgeObjectRetain();
  }
  while (v31 != v11)
  {
    v29 = *(_QWORD *)(v38 + 8 * v11++ + 96);
    if (v29)
    {
      v28 = v11 + 3;
      goto LABEL_23;
    }
  }
LABEL_25:
  result = swift_release();
  v1 = v32;
  v7 = v37;
LABEL_26:
  *v1 = v7;
  return result;
}

uint64_t sub_1B1EAF434()
{
  return sub_1B1EB1284(sub_1B1EB5DC8);
}

uint64_t sub_1B1EAF440()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t result;

  v1 = v0;
  sub_1B1B9AB5C();
  v2 = *v0;
  v3 = sub_1B22296B8();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
    goto LABEL_24;
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (v9 + 1 >= v13)
      goto LABEL_24;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    if (!v21)
    {
      v20 = v9 + 2;
      if (v9 + 2 >= v13)
        goto LABEL_24;
      v21 = *(_QWORD *)(v6 + 8 * v20);
      if (!v21)
      {
        v20 = v9 + 3;
        if (v9 + 3 >= v13)
          goto LABEL_24;
        v21 = *(_QWORD *)(v6 + 8 * v20);
        if (!v21)
          break;
      }
    }
LABEL_23:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v20 << 6);
    v9 = v20;
LABEL_12:
    v16 = 8 * v15;
    v17 = *(void **)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v18 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v16) = v18;
    v19 = v17;
    swift_retain();
  }
  while (v13 - 4 != v9)
  {
    v21 = *(_QWORD *)(v2 + 96 + 8 * v9++);
    if (v21)
    {
      v20 = v9 + 3;
      goto LABEL_23;
    }
  }
LABEL_24:
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_1B1EAF5DC()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t result;

  v1 = v0;
  sub_1B1B9A304();
  v2 = *v0;
  v3 = sub_1B22296B8();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
    goto LABEL_24;
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v19 = v9 + 1;
    if (v9 + 1 >= v13)
      goto LABEL_24;
    v20 = *(_QWORD *)(v6 + 8 * v19);
    if (!v20)
    {
      v19 = v9 + 2;
      if (v9 + 2 >= v13)
        goto LABEL_24;
      v20 = *(_QWORD *)(v6 + 8 * v19);
      if (!v20)
      {
        v19 = v9 + 3;
        if (v9 + 3 >= v13)
          goto LABEL_24;
        v20 = *(_QWORD *)(v6 + 8 * v19);
        if (!v20)
          break;
      }
    }
LABEL_23:
    v12 = (v20 - 1) & v20;
    v15 = __clz(__rbit64(v20)) + (v19 << 6);
    v9 = v19;
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v18 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v15);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v16) = v18;
    swift_retain();
  }
  while (v13 - 4 != v9)
  {
    v20 = *(_QWORD *)(v2 + 96 + 8 * v9++);
    if (v20)
    {
      v19 = v9 + 3;
      goto LABEL_23;
    }
  }
LABEL_24:
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_1B1EAF770()
{
  return sub_1B1EAFB84(&qword_1EEF60010, &qword_1EEF5B4D0, 0x1E0CC77C8, &qword_1EEF5B4D8);
}

uint64_t sub_1B1EAF794()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t result;

  v1 = v0;
  sub_1B1B9AE04();
  v2 = *v0;
  v3 = sub_1B22296B8();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
    goto LABEL_24;
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (v9 + 1 >= v13)
      goto LABEL_24;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    if (!v21)
    {
      v20 = v9 + 2;
      if (v9 + 2 >= v13)
        goto LABEL_24;
      v21 = *(_QWORD *)(v6 + 8 * v20);
      if (!v21)
      {
        v20 = v9 + 3;
        if (v9 + 3 >= v13)
          goto LABEL_24;
        v21 = *(_QWORD *)(v6 + 8 * v20);
        if (!v21)
          break;
      }
    }
LABEL_23:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v20 << 6);
    v9 = v20;
LABEL_12:
    v16 = 16 * v15;
    v17 = 8 * v15;
    v18 = *(_OWORD *)(*(_QWORD *)(v2 + 48) + v16);
    v19 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v17);
    *(_OWORD *)(*(_QWORD *)(v4 + 48) + v16) = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v17) = v19;
    sub_1B1A0DC90(v18, *((unint64_t *)&v18 + 1));
  }
  while (v13 - 4 != v9)
  {
    v21 = *(_QWORD *)(v2 + 96 + 8 * v9++);
    if (v21)
    {
      v20 = v9 + 3;
      goto LABEL_23;
    }
  }
LABEL_24:
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_1B1EAF934()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t result;
  uint64_t v26;
  int64_t v27;
  uint64_t *v28;
  const void *v29;

  v1 = v0;
  v2 = sub_1B2228110();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1B1B9AD84();
  v7 = *v0;
  v8 = sub_1B22296B8();
  v9 = v8;
  if (!*(_QWORD *)(v7 + 16))
  {
    result = swift_release();
    goto LABEL_26;
  }
  v10 = (void *)(v8 + 64);
  v11 = (unint64_t)((1 << *(_BYTE *)(v9 + 32)) + 63) >> 6;
  v28 = v1;
  v29 = (const void *)(v7 + 64);
  if (v9 != v7 || (unint64_t)v10 >= v7 + 64 + 8 * v11)
    memmove(v10, v29, 8 * v11);
  v13 = 0;
  *(_QWORD *)(v9 + 16) = *(_QWORD *)(v7 + 16);
  v14 = 1 << *(_BYTE *)(v7 + 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & *(_QWORD *)(v7 + 64);
  v17 = (unint64_t)(v14 + 63) >> 6;
  v27 = v17 - 4;
  while (1)
  {
    if (v16)
    {
      v18 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v19 = v18 | (v13 << 6);
      goto LABEL_12;
    }
    v23 = v13 + 1;
    if (v13 + 1 >= v17)
      goto LABEL_24;
    v24 = *((_QWORD *)v29 + v23);
    if (!v24)
    {
      v23 = v13 + 2;
      if (v13 + 2 >= v17)
        goto LABEL_24;
      v24 = *((_QWORD *)v29 + v23);
      if (!v24)
      {
        v23 = v13 + 3;
        if (v13 + 3 >= v17)
          goto LABEL_24;
        v24 = *((_QWORD *)v29 + v23);
        if (!v24)
          break;
      }
    }
LABEL_23:
    v16 = (v24 - 1) & v24;
    v19 = __clz(__rbit64(v24)) + (v23 << 6);
    v13 = v23;
LABEL_12:
    v20 = *(_QWORD *)(v3 + 72) * v19;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v6, *(_QWORD *)(v7 + 48) + v20, v2);
    v21 = 8 * v19;
    v22 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + v21);
    (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(v9 + 48) + v20, v6, v2);
    *(_QWORD *)(*(_QWORD *)(v9 + 56) + v21) = v22;
  }
  while (v27 != v13)
  {
    v24 = *(_QWORD *)(v7 + 8 * v13++ + 96);
    if (v24)
    {
      v23 = v13 + 3;
      goto LABEL_23;
    }
  }
LABEL_24:
  result = swift_release();
  v1 = v28;
LABEL_26:
  *v1 = v9;
  return result;
}

uint64_t sub_1B1EAFB60()
{
  return sub_1B1EAFB84((unint64_t *)&unk_1EEF5FFA0, &qword_1EEF5B4F0, (uint64_t)off_1E636B5B8, &qword_1EEF5B540);
}

uint64_t sub_1B1EAFB84(unint64_t *a1, unint64_t *a2, uint64_t a3, unint64_t *a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t result;

  v5 = v4;
  sub_1B1B9AEA8(0, a1, a2, a3, a4);
  v6 = *v4;
  v7 = sub_1B22296B8();
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
    goto LABEL_24;
  v9 = (void *)(v7 + 64);
  v10 = v6 + 64;
  v11 = (unint64_t)((1 << *(_BYTE *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)v9 >= v6 + 64 + 8 * v11)
    memmove(v9, (const void *)(v6 + 64), 8 * v11);
  v13 = 0;
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v6 + 16);
  v14 = 1 << *(_BYTE *)(v6 + 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & *(_QWORD *)(v6 + 64);
  v17 = (unint64_t)(v14 + 63) >> 6;
  while (1)
  {
    if (v16)
    {
      v18 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v19 = v18 | (v13 << 6);
      goto LABEL_12;
    }
    v24 = v13 + 1;
    if (v13 + 1 >= v17)
      goto LABEL_24;
    v25 = *(_QWORD *)(v10 + 8 * v24);
    if (!v25)
    {
      v24 = v13 + 2;
      if (v13 + 2 >= v17)
        goto LABEL_24;
      v25 = *(_QWORD *)(v10 + 8 * v24);
      if (!v25)
      {
        v24 = v13 + 3;
        if (v13 + 3 >= v17)
          goto LABEL_24;
        v25 = *(_QWORD *)(v10 + 8 * v24);
        if (!v25)
          break;
      }
    }
LABEL_23:
    v16 = (v25 - 1) & v25;
    v19 = __clz(__rbit64(v25)) + (v24 << 6);
    v13 = v24;
LABEL_12:
    v20 = 8 * v19;
    v21 = *(void **)(*(_QWORD *)(v6 + 48) + 8 * v19);
    v22 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + v20);
    *(_QWORD *)(*(_QWORD *)(v8 + 48) + v20) = v21;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + v20) = v22;
    v23 = v21;
  }
  while (v17 - 4 != v13)
  {
    v25 = *(_QWORD *)(v6 + 96 + 8 * v13++);
    if (v25)
    {
      v24 = v13 + 3;
      goto LABEL_23;
    }
  }
LABEL_24:
  result = swift_release();
  *v5 = v8;
  return result;
}

uint64_t sub_1B1EAFD28()
{
  return sub_1B1EAFB84(&qword_1EEF5B548, &qword_1EEF5E8B0, (uint64_t)off_1E636B5E0, &qword_1EEF5B550);
}

uint64_t sub_1B1EAFD4C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t result;

  v1 = v0;
  sub_1B1B9A894();
  v2 = *v0;
  v3 = sub_1B22296B8();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
    goto LABEL_24;
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (v9 + 1 >= v13)
      goto LABEL_24;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    if (!v23)
    {
      v22 = v9 + 2;
      if (v9 + 2 >= v13)
        goto LABEL_24;
      v23 = *(_QWORD *)(v6 + 8 * v22);
      if (!v23)
      {
        v22 = v9 + 3;
        if (v9 + 3 >= v13)
          goto LABEL_24;
        v23 = *(_QWORD *)(v6 + 8 * v22);
        if (!v23)
          break;
      }
    }
LABEL_23:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v22 << 6);
    v9 = v22;
LABEL_12:
    v16 = 8 * v15;
    v17 = 16 * v15;
    v18 = (uint64_t *)(*(_QWORD *)(v2 + 56) + v17);
    v20 = *v18;
    v19 = v18[1];
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = *(_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 56) + v17);
    *v21 = v20;
    v21[1] = v19;
    swift_bridgeObjectRetain();
  }
  while (v13 - 4 != v9)
  {
    v23 = *(_QWORD *)(v2 + 96 + 8 * v9++);
    if (v23)
    {
      v22 = v9 + 3;
      goto LABEL_23;
    }
  }
LABEL_24:
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_1B1EAFEEC()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t result;

  v1 = v0;
  sub_1B1EB6DB4(0, (unint64_t *)&qword_1EEF5B4C0);
  v2 = *v0;
  v3 = sub_1B22296B8();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
    goto LABEL_24;
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (v9 + 1 >= v13)
      goto LABEL_24;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    if (!v23)
    {
      v22 = v9 + 2;
      if (v9 + 2 >= v13)
        goto LABEL_24;
      v23 = *(_QWORD *)(v6 + 8 * v22);
      if (!v23)
      {
        v22 = v9 + 3;
        if (v9 + 3 >= v13)
          goto LABEL_24;
        v23 = *(_QWORD *)(v6 + 8 * v22);
        if (!v23)
          break;
      }
    }
LABEL_23:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v22 << 6);
    v9 = v22;
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = v17[1];
    v19 = 8 * v15;
    v20 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v19);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = *v17;
    v21[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
  }
  while (v13 - 4 != v9)
  {
    v23 = *(_QWORD *)(v2 + 96 + 8 * v9++);
    if (v23)
    {
      v22 = v9 + 3;
      goto LABEL_23;
    }
  }
LABEL_24:
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_1B1EB00AC()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t result;

  v1 = v0;
  sub_1B1B99B8C(0, &qword_1ED4BB490, (void (*)(uint64_t))sub_1B1A0FCB4);
  v2 = *v0;
  v3 = sub_1B22296B8();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
    goto LABEL_24;
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (v9 + 1 >= v13)
      goto LABEL_24;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    if (!v21)
    {
      v20 = v9 + 2;
      if (v9 + 2 >= v13)
        goto LABEL_24;
      v21 = *(_QWORD *)(v6 + 8 * v20);
      if (!v21)
      {
        v20 = v9 + 3;
        if (v9 + 3 >= v13)
          goto LABEL_24;
        v21 = *(_QWORD *)(v6 + 8 * v20);
        if (!v21)
          break;
      }
    }
LABEL_23:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v20 << 6);
    v9 = v20;
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v18 = 16 * v15;
    v19 = *(_OWORD *)(*(_QWORD *)(v2 + 56) + v18);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    *(_OWORD *)(*(_QWORD *)(v4 + 56) + v18) = v19;
    swift_retain();
  }
  while (v13 - 4 != v9)
  {
    v21 = *(_QWORD *)(v2 + 96 + 8 * v9++);
    if (v21)
    {
      v20 = v9 + 3;
      goto LABEL_23;
    }
  }
LABEL_24:
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_1B1EB0268()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 *v18;
  __int128 v19;
  _OWORD *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t result;
  __int128 v24;

  v1 = v0;
  sub_1B1EB5C70();
  v2 = *v0;
  v3 = sub_1B22296B8();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
    goto LABEL_24;
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v21 = v9 + 1;
    if (v9 + 1 >= v13)
      goto LABEL_24;
    v22 = *(_QWORD *)(v6 + 8 * v21);
    if (!v22)
    {
      v21 = v9 + 2;
      if (v9 + 2 >= v13)
        goto LABEL_24;
      v22 = *(_QWORD *)(v6 + 8 * v21);
      if (!v22)
      {
        v21 = v9 + 3;
        if (v9 + 3 >= v13)
          goto LABEL_24;
        v22 = *(_QWORD *)(v6 + 8 * v21);
        if (!v22)
          break;
      }
    }
LABEL_23:
    v12 = (v22 - 1) & v22;
    v15 = __clz(__rbit64(v22)) + (v21 << 6);
    v9 = v21;
LABEL_12:
    v16 = 8 * v15;
    v17 = 32 * v15;
    v18 = (__int128 *)(*(_QWORD *)(v2 + 56) + v17);
    v19 = *v18;
    v24 = v18[1];
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = *(_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    v20 = (_OWORD *)(*(_QWORD *)(v4 + 56) + v17);
    *v20 = v19;
    v20[1] = v24;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  while (v13 - 4 != v9)
  {
    v22 = *(_QWORD *)(v2 + 96 + 8 * v9++);
    if (v22)
    {
      v21 = v9 + 3;
      goto LABEL_23;
    }
  }
LABEL_24:
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_1B1EB043C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 *v21;
  _QWORD *v22;
  __int128 v23;
  _OWORD *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t result;
  __int128 v28;

  v1 = v0;
  sub_1B1EB6DB4(0, (unint64_t *)&qword_1EEF5B440);
  v2 = *v0;
  v3 = sub_1B22296B8();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
    goto LABEL_24;
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v25 = v9 + 1;
    if (v9 + 1 >= v13)
      goto LABEL_24;
    v26 = *(_QWORD *)(v6 + 8 * v25);
    if (!v26)
    {
      v25 = v9 + 2;
      if (v9 + 2 >= v13)
        goto LABEL_24;
      v26 = *(_QWORD *)(v6 + 8 * v25);
      if (!v26)
      {
        v25 = v9 + 3;
        if (v9 + 3 >= v13)
          goto LABEL_24;
        v26 = *(_QWORD *)(v6 + 8 * v25);
        if (!v26)
          break;
      }
    }
LABEL_23:
    v12 = (v26 - 1) & v26;
    v15 = __clz(__rbit64(v26)) + (v25 << 6);
    v9 = v25;
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 32 * v15;
    v21 = (__int128 *)(*(_QWORD *)(v2 + 56) + v20);
    v22 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    v23 = *v21;
    v28 = v21[1];
    *v22 = v19;
    v22[1] = v18;
    v24 = (_OWORD *)(*(_QWORD *)(v4 + 56) + v20);
    *v24 = v23;
    v24[1] = v28;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  while (v13 - 4 != v9)
  {
    v26 = *(_QWORD *)(v2 + 96 + 8 * v9++);
    if (v26)
    {
      v25 = v9 + 3;
      goto LABEL_23;
    }
  }
LABEL_24:
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_1B1EB0640()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t result;

  v1 = v0;
  sub_1B1B99DB0(0, (unint64_t *)&unk_1ED4BA8B0, (void (*)(uint64_t))type metadata accessor for EntityClass, (void (*)(void))sub_1B1EB5C08);
  v2 = *v0;
  v3 = sub_1B22296B8();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
    goto LABEL_24;
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v17 = v9 + 1;
    if (v9 + 1 >= v13)
      goto LABEL_24;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
    {
      v17 = v9 + 2;
      if (v9 + 2 >= v13)
        goto LABEL_24;
      v18 = *(_QWORD *)(v6 + 8 * v17);
      if (!v18)
      {
        v17 = v9 + 3;
        if (v9 + 3 >= v13)
          goto LABEL_24;
        v18 = *(_QWORD *)(v6 + 8 * v17);
        if (!v18)
          break;
      }
    }
LABEL_23:
    v12 = (v18 - 1) & v18;
    v15 = __clz(__rbit64(v18)) + (v17 << 6);
    v9 = v17;
LABEL_12:
    v16 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v15);
    *(_BYTE *)(*(_QWORD *)(v4 + 48) + v15) = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v15);
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v15) = v16;
    swift_retain();
  }
  while (v13 - 4 != v9)
  {
    v18 = *(_QWORD *)(v2 + 96 + 8 * v9++);
    if (v18)
    {
      v17 = v9 + 3;
      goto LABEL_23;
    }
  }
LABEL_24:
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_1B1EB07F4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t result;

  v1 = v0;
  sub_1B1EB6DB4(0, (unint64_t *)&qword_1EEF5B968);
  v2 = *v0;
  v3 = sub_1B22296B8();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
    goto LABEL_24;
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v23 = v9 + 1;
    if (v9 + 1 >= v13)
      goto LABEL_24;
    v24 = *(_QWORD *)(v6 + 8 * v23);
    if (!v24)
    {
      v23 = v9 + 2;
      if (v9 + 2 >= v13)
        goto LABEL_24;
      v24 = *(_QWORD *)(v6 + 8 * v23);
      if (!v24)
      {
        v23 = v9 + 3;
        if (v9 + 3 >= v13)
          goto LABEL_24;
        v24 = *(_QWORD *)(v6 + 8 * v23);
        if (!v24)
          break;
      }
    }
LABEL_23:
    v12 = (v24 - 1) & v24;
    v15 = __clz(__rbit64(v24)) + (v23 << 6);
    v9 = v23;
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v18 = 24 * v15;
    v19 = *(_QWORD *)(v2 + 56) + v18;
    v20 = *(_QWORD *)v19;
    v21 = *(_OWORD *)(v19 + 8);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    v22 = *(_QWORD *)(v4 + 56) + v18;
    *(_QWORD *)v22 = v20;
    *(_OWORD *)(v22 + 8) = v21;
    swift_unknownObjectRetain();
  }
  while (v13 - 4 != v9)
  {
    v24 = *(_QWORD *)(v2 + 96 + 8 * v9++);
    if (v24)
    {
      v23 = v9 + 3;
      goto LABEL_23;
    }
  }
LABEL_24:
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_1B1EB09C0()
{
  return sub_1B1EB09CC((void (*)(_QWORD))sub_1B1EB5D4C);
}

uint64_t sub_1B1EB09CC(void (*a1)(_QWORD))
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t result;

  v2 = v1;
  a1(0);
  v3 = *v1;
  v4 = sub_1B22296B8();
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
    goto LABEL_24;
  v6 = (void *)(v4 + 64);
  v7 = v3 + 64;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)v6 >= v3 + 64 + 8 * v8)
    memmove(v6, (const void *)(v3 + 64), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 64);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v19 = v10 + 1;
    if (v10 + 1 >= v14)
      goto LABEL_24;
    v20 = *(_QWORD *)(v7 + 8 * v19);
    if (!v20)
    {
      v19 = v10 + 2;
      if (v10 + 2 >= v14)
        goto LABEL_24;
      v20 = *(_QWORD *)(v7 + 8 * v19);
      if (!v20)
      {
        v19 = v10 + 3;
        if (v10 + 3 >= v14)
          goto LABEL_24;
        v20 = *(_QWORD *)(v7 + 8 * v19);
        if (!v20)
          break;
      }
    }
LABEL_23:
    v13 = (v20 - 1) & v20;
    v16 = __clz(__rbit64(v20)) + (v19 << 6);
    v10 = v19;
LABEL_12:
    v17 = 8 * v16;
    v18 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + 8 * v16);
    *(_QWORD *)(*(_QWORD *)(v5 + 48) + v17) = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v16);
    *(_QWORD *)(*(_QWORD *)(v5 + 56) + v17) = v18;
    swift_bridgeObjectRetain();
  }
  while (v14 - 4 != v10)
  {
    v20 = *(_QWORD *)(v3 + 96 + 8 * v10++);
    if (v20)
    {
      v19 = v10 + 3;
      goto LABEL_23;
    }
  }
LABEL_24:
  result = swift_release();
  *v2 = v5;
  return result;
}

uint64_t sub_1B1EB0B64()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t result;

  v1 = v0;
  sub_1B1EB6DB4(0, (unint64_t *)&qword_1ED4BA9B8);
  v2 = *v0;
  v3 = sub_1B22296B8();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
    goto LABEL_24;
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (v9 + 1 >= v13)
      goto LABEL_24;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    if (!v21)
    {
      v20 = v9 + 2;
      if (v9 + 2 >= v13)
        goto LABEL_24;
      v21 = *(_QWORD *)(v6 + 8 * v20);
      if (!v21)
      {
        v20 = v9 + 3;
        if (v9 + 3 >= v13)
          goto LABEL_24;
        v21 = *(_QWORD *)(v6 + 8 * v20);
        if (!v21)
          break;
      }
    }
LABEL_23:
    v22 = __clz(__rbit64(v21));
    v12 = (v21 - 1) & v21;
    v15 = v22 + (v20 << 6);
    v9 = v20;
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v18 = 4 * v15;
    v19 = *(_DWORD *)(*(_QWORD *)(v2 + 56) + v18);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    *(_DWORD *)(*(_QWORD *)(v4 + 56) + v18) = v19;
  }
  while (v13 - 4 != v9)
  {
    v21 = *(_QWORD *)(v2 + 96 + 8 * v9++);
    if (v21)
    {
      v20 = v9 + 3;
      goto LABEL_23;
    }
  }
LABEL_24:
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_1B1EB0D00()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t result;

  v1 = v0;
  sub_1B1EB6DB4(0, &qword_1EEF60058);
  v2 = *v0;
  v3 = sub_1B22296B8();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
    goto LABEL_24;
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (v9 + 1 >= v13)
      goto LABEL_24;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    if (!v21)
    {
      v20 = v9 + 2;
      if (v9 + 2 >= v13)
        goto LABEL_24;
      v21 = *(_QWORD *)(v6 + 8 * v20);
      if (!v21)
      {
        v20 = v9 + 3;
        if (v9 + 3 >= v13)
          goto LABEL_24;
        v21 = *(_QWORD *)(v6 + 8 * v20);
        if (!v21)
          break;
      }
    }
LABEL_23:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v20 << 6);
    v9 = v20;
LABEL_12:
    v16 = 4 * v15;
    v17 = *(_DWORD *)(*(_QWORD *)(v2 + 48) + 4 * v15);
    v18 = 8 * v15;
    v19 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v18);
    *(_DWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v18) = v19;
    swift_bridgeObjectRetain();
  }
  while (v13 - 4 != v9)
  {
    v21 = *(_QWORD *)(v2 + 96 + 8 * v9++);
    if (v21)
    {
      v20 = v9 + 3;
      goto LABEL_23;
    }
  }
LABEL_24:
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_1B1EB0EB8()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t result;

  v1 = v0;
  sub_1B1EB6348();
  v2 = *v0;
  v3 = sub_1B22296B8();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
    goto LABEL_24;
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v17 = v9 + 1;
    if (v9 + 1 >= v13)
      goto LABEL_24;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
    {
      v17 = v9 + 2;
      if (v9 + 2 >= v13)
        goto LABEL_24;
      v18 = *(_QWORD *)(v6 + 8 * v17);
      if (!v18)
      {
        v17 = v9 + 3;
        if (v9 + 3 >= v13)
          goto LABEL_24;
        v18 = *(_QWORD *)(v6 + 8 * v17);
        if (!v18)
          break;
      }
    }
LABEL_23:
    v19 = __clz(__rbit64(v18));
    v12 = (v18 - 1) & v18;
    v15 = v19 + (v17 << 6);
    v9 = v17;
LABEL_12:
    v16 = *(_BYTE *)(*(_QWORD *)(v2 + 56) + v15);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v15) = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    *(_BYTE *)(*(_QWORD *)(v4 + 56) + v15) = v16;
  }
  while (v13 - 4 != v9)
  {
    v18 = *(_QWORD *)(v2 + 96 + 8 * v9++);
    if (v18)
    {
      v17 = v9 + 3;
      goto LABEL_23;
    }
  }
LABEL_24:
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_1B1EB1030()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t result;
  uint64_t *v29;

  sub_1B1B99B8C(0, (unint64_t *)&unk_1EEF5B610, (void (*)(uint64_t))sub_1B1B9B510);
  v29 = v0;
  v1 = *v0;
  v2 = sub_1B22296B8();
  v3 = v2;
  if (!*(_QWORD *)(v1 + 16))
    goto LABEL_24;
  v4 = (void *)(v2 + 64);
  v5 = v1 + 64;
  v6 = (unint64_t)((1 << *(_BYTE *)(v3 + 32)) + 63) >> 6;
  if (v3 != v1 || (unint64_t)v4 >= v1 + 64 + 8 * v6)
    memmove(v4, (const void *)(v1 + 64), 8 * v6);
  v8 = 0;
  *(_QWORD *)(v3 + 16) = *(_QWORD *)(v1 + 16);
  v9 = 1 << *(_BYTE *)(v1 + 32);
  v10 = -1;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  v11 = v10 & *(_QWORD *)(v1 + 64);
  v12 = (unint64_t)(v9 + 63) >> 6;
  while (1)
  {
    if (v11)
    {
      v13 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v14 = v13 | (v8 << 6);
      goto LABEL_12;
    }
    v26 = v8 + 1;
    if (v8 + 1 >= v12)
      goto LABEL_24;
    v27 = *(_QWORD *)(v5 + 8 * v26);
    if (!v27)
    {
      v26 = v8 + 2;
      if (v8 + 2 >= v12)
        goto LABEL_24;
      v27 = *(_QWORD *)(v5 + 8 * v26);
      if (!v27)
      {
        v26 = v8 + 3;
        if (v8 + 3 >= v12)
          goto LABEL_24;
        v27 = *(_QWORD *)(v5 + 8 * v26);
        if (!v27)
          break;
      }
    }
LABEL_23:
    v11 = (v27 - 1) & v27;
    v14 = __clz(__rbit64(v27)) + (v26 << 6);
    v8 = v26;
LABEL_12:
    v15 = 16 * v14;
    v16 = (uint64_t *)(*(_QWORD *)(v1 + 48) + 16 * v14);
    v17 = *v16;
    v18 = v16[1];
    v19 = 24 * v14;
    v20 = (uint64_t *)(*(_QWORD *)(v1 + 56) + v19);
    v21 = *v20;
    v22 = v20[1];
    v23 = v20[2];
    v24 = (_QWORD *)(*(_QWORD *)(v3 + 48) + v15);
    *v24 = v17;
    v24[1] = v18;
    v25 = (_QWORD *)(*(_QWORD *)(v3 + 56) + v19);
    *v25 = v21;
    v25[1] = v22;
    v25[2] = v23;
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  while (v12 - 4 != v8)
  {
    v27 = *(_QWORD *)(v1 + 96 + 8 * v8++);
    if (v27)
    {
      v26 = v8 + 3;
      goto LABEL_23;
    }
  }
LABEL_24:
  result = swift_release();
  *v29 = v3;
  return result;
}

uint64_t sub_1B1EB1224()
{
  return sub_1B1EB1284(sub_1B1EB6438);
}

uint64_t sub_1B1EB1230()
{
  return sub_1B1EB1284(sub_1B1EB63F0);
}

uint64_t sub_1B1EB123C()
{
  return sub_1B1EB1284(sub_1B1EB6510);
}

uint64_t sub_1B1EB1248()
{
  return sub_1B1EB1284(sub_1B1EB64EC);
}

uint64_t sub_1B1EB1254()
{
  return sub_1B1EB1284(sub_1B1EB64C8);
}

uint64_t sub_1B1EB1260()
{
  return sub_1B1EB1284(sub_1B1EB64A4);
}

uint64_t sub_1B1EB126C()
{
  return sub_1B1EB1284(sub_1B1EB6480);
}

uint64_t sub_1B1EB1278()
{
  return sub_1B1EB1284(sub_1B1EB645C);
}

uint64_t sub_1B1EB1284(void (*a1)(_QWORD))
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t result;

  v2 = v1;
  a1(0);
  v3 = *v1;
  v4 = sub_1B22296B8();
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
    goto LABEL_24;
  v6 = (void *)(v4 + 64);
  v7 = v3 + 64;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)v6 >= v3 + 64 + 8 * v8)
    memmove(v6, (const void *)(v3 + 64), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 64);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v23 = v10 + 1;
    if (v10 + 1 >= v14)
      goto LABEL_24;
    v24 = *(_QWORD *)(v7 + 8 * v23);
    if (!v24)
    {
      v23 = v10 + 2;
      if (v10 + 2 >= v14)
        goto LABEL_24;
      v24 = *(_QWORD *)(v7 + 8 * v23);
      if (!v24)
      {
        v23 = v10 + 3;
        if (v10 + 3 >= v14)
          goto LABEL_24;
        v24 = *(_QWORD *)(v7 + 8 * v23);
        if (!v24)
          break;
      }
    }
LABEL_23:
    v13 = (v24 - 1) & v24;
    v16 = __clz(__rbit64(v24)) + (v23 << 6);
    v10 = v23;
LABEL_12:
    v17 = 16 * v16;
    v18 = (_QWORD *)(*(_QWORD *)(v3 + 48) + 16 * v16);
    v19 = v18[1];
    v20 = 8 * v16;
    v21 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + v20);
    v22 = (_QWORD *)(*(_QWORD *)(v5 + 48) + v17);
    *v22 = *v18;
    v22[1] = v19;
    *(_QWORD *)(*(_QWORD *)(v5 + 56) + v20) = v21;
    swift_bridgeObjectRetain();
    swift_retain();
  }
  while (v14 - 4 != v10)
  {
    v24 = *(_QWORD *)(v3 + 96 + 8 * v10++);
    if (v24)
    {
      v23 = v10 + 3;
      goto LABEL_23;
    }
  }
LABEL_24:
  result = swift_release();
  *v2 = v5;
  return result;
}

uint64_t sub_1B1EB1430()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t result;
  uint64_t *v33;

  sub_1B1EB6DB4(0, (unint64_t *)&qword_1EEF5B600);
  v33 = v0;
  v1 = *v0;
  v2 = sub_1B22296B8();
  v3 = v2;
  if (!*(_QWORD *)(v1 + 16))
    goto LABEL_24;
  v4 = (void *)(v2 + 64);
  v5 = v1 + 64;
  v6 = (unint64_t)((1 << *(_BYTE *)(v3 + 32)) + 63) >> 6;
  if (v3 != v1 || (unint64_t)v4 >= v1 + 64 + 8 * v6)
    memmove(v4, (const void *)(v1 + 64), 8 * v6);
  v8 = 0;
  *(_QWORD *)(v3 + 16) = *(_QWORD *)(v1 + 16);
  v9 = 1 << *(_BYTE *)(v1 + 32);
  v10 = -1;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  v11 = v10 & *(_QWORD *)(v1 + 64);
  v12 = (unint64_t)(v9 + 63) >> 6;
  while (1)
  {
    if (v11)
    {
      v13 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v14 = v13 | (v8 << 6);
      goto LABEL_12;
    }
    v30 = v8 + 1;
    if (v8 + 1 >= v12)
      goto LABEL_24;
    v31 = *(_QWORD *)(v5 + 8 * v30);
    if (!v31)
    {
      v30 = v8 + 2;
      if (v8 + 2 >= v12)
        goto LABEL_24;
      v31 = *(_QWORD *)(v5 + 8 * v30);
      if (!v31)
      {
        v30 = v8 + 3;
        if (v8 + 3 >= v12)
          goto LABEL_24;
        v31 = *(_QWORD *)(v5 + 8 * v30);
        if (!v31)
          break;
      }
    }
LABEL_23:
    v11 = (v31 - 1) & v31;
    v14 = __clz(__rbit64(v31)) + (v30 << 6);
    v8 = v30;
LABEL_12:
    v15 = 16 * v14;
    v16 = (uint64_t *)(*(_QWORD *)(v1 + 48) + 16 * v14);
    v17 = *v16;
    v18 = v16[1];
    v19 = 56 * v14;
    v20 = (uint64_t *)(*(_QWORD *)(v1 + 56) + v19);
    v21 = *v20;
    v22 = v20[1];
    v23 = v20[2];
    v24 = v20[3];
    v25 = v20[4];
    v26 = v20[5];
    v27 = v20[6];
    v28 = (_QWORD *)(*(_QWORD *)(v3 + 48) + v15);
    *v28 = v17;
    v28[1] = v18;
    v29 = (_QWORD *)(*(_QWORD *)(v3 + 56) + v19);
    *v29 = v21;
    v29[1] = v22;
    v29[2] = v23;
    v29[3] = v24;
    v29[4] = v25;
    v29[5] = v26;
    v29[6] = v27;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  while (v12 - 4 != v8)
  {
    v31 = *(_QWORD *)(v1 + 96 + 8 * v8++);
    if (v31)
    {
      v30 = v8 + 3;
      goto LABEL_23;
    }
  }
LABEL_24:
  result = swift_release();
  *v33 = v3;
  return result;
}

uint64_t sub_1B1EB1650()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  void *v16;
  id v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t result;

  v1 = v0;
  sub_1B1B99DB0(0, &qword_1EEF5B5F0, (void (*)(uint64_t))type metadata accessor for VFXREBindingMeshData, (void (*)(void))sub_1B1B9B468);
  v2 = *v0;
  v3 = sub_1B22296B8();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
    goto LABEL_24;
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v18 = v9 + 1;
    if (v9 + 1 >= v13)
      goto LABEL_24;
    v19 = *(_QWORD *)(v6 + 8 * v18);
    if (!v19)
    {
      v18 = v9 + 2;
      if (v9 + 2 >= v13)
        goto LABEL_24;
      v19 = *(_QWORD *)(v6 + 8 * v18);
      if (!v19)
      {
        v18 = v9 + 3;
        if (v9 + 3 >= v13)
          goto LABEL_24;
        v19 = *(_QWORD *)(v6 + 8 * v18);
        if (!v19)
          break;
      }
    }
LABEL_23:
    v12 = (v19 - 1) & v19;
    v15 = __clz(__rbit64(v19)) + (v18 << 6);
    v9 = v18;
LABEL_12:
    v16 = *(void **)(*(_QWORD *)(v2 + 56) + 8 * v15);
    *(_BYTE *)(*(_QWORD *)(v4 + 48) + v15) = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v15);
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v15) = v16;
    v17 = v16;
  }
  while (v13 - 4 != v9)
  {
    v19 = *(_QWORD *)(v2 + 96 + 8 * v9++);
    if (v19)
    {
      v18 = v9 + 3;
      goto LABEL_23;
    }
  }
LABEL_24:
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_1B1EB1804()
{
  return sub_1B1EB1840(&qword_1EEF60140, &qword_1EEF5B3B0, MEMORY[0x1E0DEE9B8] + 8);
}

uint64_t sub_1B1EB1824()
{
  return sub_1B1EB1840((unint64_t *)&unk_1EEF5B390, (unint64_t *)&qword_1ED4BA490, MEMORY[0x1E0DEA968]);
}

uint64_t sub_1B1EB1840(unint64_t *a1, unint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t result;
  uint64_t *v34;

  sub_1B1B99C78(0, a1, a2, a3);
  v34 = v3;
  v4 = *v3;
  v5 = sub_1B22296B8();
  v6 = v5;
  if (!*(_QWORD *)(v4 + 16))
    goto LABEL_24;
  v7 = (void *)(v5 + 64);
  v8 = v4 + 64;
  v9 = (unint64_t)((1 << *(_BYTE *)(v6 + 32)) + 63) >> 6;
  if (v6 != v4 || (unint64_t)v7 >= v4 + 64 + 8 * v9)
    memmove(v7, (const void *)(v4 + 64), 8 * v9);
  v11 = 0;
  *(_QWORD *)(v6 + 16) = *(_QWORD *)(v4 + 16);
  v12 = 1 << *(_BYTE *)(v4 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & *(_QWORD *)(v4 + 64);
  v15 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      v16 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v17 = v16 | (v11 << 6);
      goto LABEL_12;
    }
    v31 = v11 + 1;
    if (v11 + 1 >= v15)
      goto LABEL_24;
    v32 = *(_QWORD *)(v8 + 8 * v31);
    if (!v32)
    {
      v31 = v11 + 2;
      if (v11 + 2 >= v15)
        goto LABEL_24;
      v32 = *(_QWORD *)(v8 + 8 * v31);
      if (!v32)
      {
        v31 = v11 + 3;
        if (v11 + 3 >= v15)
          goto LABEL_24;
        v32 = *(_QWORD *)(v8 + 8 * v31);
        if (!v32)
          break;
      }
    }
LABEL_23:
    v14 = (v32 - 1) & v32;
    v17 = __clz(__rbit64(v32)) + (v31 << 6);
    v11 = v31;
LABEL_12:
    v18 = 8 * v17;
    v19 = 72 * v17;
    v20 = *(_QWORD *)(v4 + 48) + v19;
    v21 = *(_QWORD *)(v20 + 8);
    v22 = *(_QWORD *)(v20 + 16);
    v23 = *(_QWORD *)(v20 + 24);
    v24 = *(_QWORD *)(v20 + 32);
    v25 = *(_QWORD *)(v20 + 56);
    v26 = *(_DWORD *)(v20 + 64);
    v27 = *(_BYTE *)(v20 + 68);
    v28 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + v18);
    v29 = *(_QWORD *)(v6 + 48) + v19;
    v30 = *(_OWORD *)(v20 + 40);
    *(_QWORD *)v29 = *(_QWORD *)v20;
    *(_QWORD *)(v29 + 8) = v21;
    *(_QWORD *)(v29 + 16) = v22;
    *(_QWORD *)(v29 + 24) = v23;
    *(_QWORD *)(v29 + 32) = v24;
    *(_OWORD *)(v29 + 40) = v30;
    *(_QWORD *)(v29 + 56) = v25;
    *(_DWORD *)(v29 + 64) = v26;
    *(_BYTE *)(v29 + 68) = v27;
    *(_QWORD *)(*(_QWORD *)(v6 + 56) + v18) = v28;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  while (v15 - 4 != v11)
  {
    v32 = *(_QWORD *)(v4 + 96 + 8 * v11++);
    if (v32)
    {
      v31 = v11 + 3;
      goto LABEL_23;
    }
  }
LABEL_24:
  result = swift_release();
  *v34 = v6;
  return result;
}

uint64_t sub_1B1EB1A60()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t result;

  v1 = v0;
  sub_1B1EB6248();
  v2 = *v0;
  v3 = sub_1B22296B8();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
    goto LABEL_24;
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v24 = v9 + 1;
    if (v9 + 1 >= v13)
      goto LABEL_24;
    v25 = *(_QWORD *)(v6 + 8 * v24);
    if (!v25)
    {
      v24 = v9 + 2;
      if (v9 + 2 >= v13)
        goto LABEL_24;
      v25 = *(_QWORD *)(v6 + 8 * v24);
      if (!v25)
      {
        v24 = v9 + 3;
        if (v9 + 3 >= v13)
          goto LABEL_24;
        v25 = *(_QWORD *)(v6 + 8 * v24);
        if (!v25)
          break;
      }
    }
LABEL_23:
    v12 = (v25 - 1) & v25;
    v15 = __clz(__rbit64(v25)) + (v24 << 6);
    v9 = v24;
LABEL_12:
    v16 = 32 * v15;
    v17 = *(_QWORD *)(v2 + 48) + 32 * v15;
    v18 = *(_BYTE *)(v17 + 8);
    v20 = *(_QWORD *)(v17 + 16);
    v19 = *(_QWORD *)(v17 + 24);
    v21 = 8 * v15;
    v22 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v21);
    v23 = *(_QWORD *)(v4 + 48) + v16;
    *(_QWORD *)v23 = *(_QWORD *)v17;
    *(_BYTE *)(v23 + 8) = v18;
    *(_QWORD *)(v23 + 16) = v20;
    *(_QWORD *)(v23 + 24) = v19;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v21) = v22;
    swift_bridgeObjectRetain();
    swift_retain();
  }
  while (v13 - 4 != v9)
  {
    v25 = *(_QWORD *)(v2 + 96 + 8 * v9++);
    if (v25)
    {
      v24 = v9 + 3;
      goto LABEL_23;
    }
  }
LABEL_24:
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_1B1EB1C18()
{
  return sub_1B1EA9D38((void (*)(_QWORD))sub_1B1EB6D38);
}

uint64_t sub_1B1EB1C24()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t result;

  v1 = v0;
  sub_1B1EB6164();
  v2 = *v0;
  v3 = sub_1B22296B8();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
    goto LABEL_24;
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v24 = v9 + 1;
    if (v9 + 1 >= v13)
      goto LABEL_24;
    v25 = *(_QWORD *)(v6 + 8 * v24);
    if (!v25)
    {
      v24 = v9 + 2;
      if (v9 + 2 >= v13)
        goto LABEL_24;
      v25 = *(_QWORD *)(v6 + 8 * v24);
      if (!v25)
      {
        v24 = v9 + 3;
        if (v9 + 3 >= v13)
          goto LABEL_24;
        v25 = *(_QWORD *)(v6 + 8 * v24);
        if (!v25)
          break;
      }
    }
LABEL_23:
    v12 = (v25 - 1) & v25;
    v15 = __clz(__rbit64(v25)) + (v24 << 6);
    v9 = v24;
LABEL_12:
    v16 = 32 * v15;
    v17 = *(_QWORD *)(v2 + 48) + 32 * v15;
    v19 = *(_QWORD *)v17;
    v18 = *(_QWORD *)(v17 + 8);
    v20 = *(_QWORD *)(v17 + 16);
    LOBYTE(v17) = *(_BYTE *)(v17 + 24);
    v21 = 16 * v15;
    v22 = *(_QWORD *)(v4 + 48) + v16;
    v23 = *(_OWORD *)(*(_QWORD *)(v2 + 56) + v21);
    *(_QWORD *)v22 = v19;
    *(_QWORD *)(v22 + 8) = v18;
    *(_QWORD *)(v22 + 16) = v20;
    *(_BYTE *)(v22 + 24) = v17;
    *(_OWORD *)(*(_QWORD *)(v4 + 56) + v21) = v23;
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
  }
  while (v13 - 4 != v9)
  {
    v25 = *(_QWORD *)(v2 + 96 + 8 * v9++);
    if (v25)
    {
      v24 = v9 + 3;
      goto LABEL_23;
    }
  }
LABEL_24:
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_1B1EB1DEC()
{
  return sub_1B1EB262C((void (*)(_QWORD))sub_1B1B9D634);
}

uint64_t sub_1B1EB1DF8()
{
  return sub_1B1EA79AC((unint64_t *)&qword_1EEF5B4B0);
}

uint64_t sub_1B1EB1E14()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t result;

  v1 = v0;
  sub_1B1EB6DB4(0, (unint64_t *)&qword_1EEF5B5B0);
  v2 = *v0;
  v3 = sub_1B22296B8();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
    goto LABEL_24;
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v27 = v9 + 1;
    if (v9 + 1 >= v13)
      goto LABEL_24;
    v28 = *(_QWORD *)(v6 + 8 * v27);
    if (!v28)
    {
      v27 = v9 + 2;
      if (v9 + 2 >= v13)
        goto LABEL_24;
      v28 = *(_QWORD *)(v6 + 8 * v27);
      if (!v28)
      {
        v27 = v9 + 3;
        if (v9 + 3 >= v13)
          goto LABEL_24;
        v28 = *(_QWORD *)(v6 + 8 * v27);
        if (!v28)
          break;
      }
    }
LABEL_23:
    v12 = (v28 - 1) & v28;
    v15 = __clz(__rbit64(v28)) + (v27 << 6);
    v9 = v27;
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 32 * v15;
    v21 = *(_QWORD *)(v2 + 56) + v20;
    v22 = *(_QWORD *)v21;
    v23 = *(_QWORD *)(v21 + 24);
    v24 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    v25 = *(_OWORD *)(v21 + 8);
    *v24 = v19;
    v24[1] = v18;
    v26 = *(_QWORD *)(v4 + 56) + v20;
    *(_QWORD *)v26 = v22;
    *(_OWORD *)(v26 + 8) = v25;
    *(_QWORD *)(v26 + 24) = v23;
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
  }
  while (v13 - 4 != v9)
  {
    v28 = *(_QWORD *)(v2 + 96 + 8 * v9++);
    if (v28)
    {
      v27 = v9 + 3;
      goto LABEL_23;
    }
  }
LABEL_24:
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_1B1EB1FF4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t result;
  int64_t v25;
  uint64_t *v26;
  const void *v27;
  int64_t v28;

  v1 = v0;
  v2 = type metadata accessor for TextureCache.TextureKey();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1B1EB5E4C();
  v7 = *v0;
  v8 = sub_1B22296B8();
  v9 = v8;
  if (!*(_QWORD *)(v7 + 16))
  {
    result = swift_release();
    goto LABEL_26;
  }
  v10 = (void *)(v8 + 64);
  v11 = (unint64_t)((1 << *(_BYTE *)(v9 + 32)) + 63) >> 6;
  v26 = v1;
  v27 = (const void *)(v7 + 64);
  if (v9 != v7 || (unint64_t)v10 >= v7 + 64 + 8 * v11)
    memmove(v10, v27, 8 * v11);
  v13 = 0;
  *(_QWORD *)(v9 + 16) = *(_QWORD *)(v7 + 16);
  v14 = 1 << *(_BYTE *)(v7 + 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & *(_QWORD *)(v7 + 64);
  v28 = (unint64_t)(v14 + 63) >> 6;
  v25 = v28 - 4;
  while (1)
  {
    if (v16)
    {
      v17 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v18 = v17 | (v13 << 6);
      goto LABEL_12;
    }
    v22 = v13 + 1;
    if (v13 + 1 >= v28)
      goto LABEL_24;
    v23 = *((_QWORD *)v27 + v22);
    if (!v23)
    {
      v22 = v13 + 2;
      if (v13 + 2 >= v28)
        goto LABEL_24;
      v23 = *((_QWORD *)v27 + v22);
      if (!v23)
      {
        v22 = v13 + 3;
        if (v13 + 3 >= v28)
          goto LABEL_24;
        v23 = *((_QWORD *)v27 + v22);
        if (!v23)
          break;
      }
    }
LABEL_23:
    v16 = (v23 - 1) & v23;
    v18 = __clz(__rbit64(v23)) + (v22 << 6);
    v13 = v22;
LABEL_12:
    v19 = *(_QWORD *)(v3 + 72) * v18;
    sub_1B1792810(*(_QWORD *)(v7 + 48) + v19, (uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for TextureCache.TextureKey);
    v20 = 8 * v18;
    v21 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + v20);
    sub_1B1A025EC((uint64_t)v6, *(_QWORD *)(v9 + 48) + v19, (uint64_t (*)(_QWORD))type metadata accessor for TextureCache.TextureKey);
    *(_QWORD *)(*(_QWORD *)(v9 + 56) + v20) = v21;
  }
  while (v25 != v13)
  {
    v23 = *(_QWORD *)(v7 + 8 * v13++ + 96);
    if (v23)
    {
      v22 = v13 + 3;
      goto LABEL_23;
    }
  }
LABEL_24:
  result = swift_release();
  v1 = v26;
LABEL_26:
  *v1 = v9;
  return result;
}

uint64_t sub_1B1EB2224()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t result;

  v1 = v0;
  sub_1B1EB6DB4(0, (unint64_t *)&qword_1ED4B7A48);
  v2 = *v0;
  v3 = sub_1B22296B8();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
    goto LABEL_24;
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v18 = v9 + 1;
    if (v9 + 1 >= v13)
      goto LABEL_24;
    v19 = *(_QWORD *)(v6 + 8 * v18);
    if (!v19)
    {
      v18 = v9 + 2;
      if (v9 + 2 >= v13)
        goto LABEL_24;
      v19 = *(_QWORD *)(v6 + 8 * v18);
      if (!v19)
      {
        v18 = v9 + 3;
        if (v9 + 3 >= v13)
          goto LABEL_24;
        v19 = *(_QWORD *)(v6 + 8 * v18);
        if (!v19)
          break;
      }
    }
LABEL_23:
    v12 = (v19 - 1) & v19;
    v15 = __clz(__rbit64(v19)) + (v18 << 6);
    v9 = v18;
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v15);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v16) = v17;
    swift_bridgeObjectRetain();
  }
  while (v13 - 4 != v9)
  {
    v19 = *(_QWORD *)(v2 + 96 + 8 * v9++);
    if (v19)
    {
      v18 = v9 + 3;
      goto LABEL_23;
    }
  }
LABEL_24:
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_1B1EB23D8()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t result;
  int64_t v25;
  uint64_t *v26;
  const void *v27;
  _BYTE v28[168];

  v1 = v0;
  v2 = type metadata accessor for TextureCache.TextureKey();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1B1B9C0A8();
  v7 = *v0;
  v8 = sub_1B22296B8();
  v9 = v8;
  if (!*(_QWORD *)(v7 + 16))
  {
    result = swift_release();
    goto LABEL_26;
  }
  v26 = v1;
  v10 = (void *)(v8 + 64);
  v11 = (unint64_t)((1 << *(_BYTE *)(v9 + 32)) + 63) >> 6;
  v27 = (const void *)(v7 + 64);
  if (v9 != v7 || (unint64_t)v10 >= v7 + 64 + 8 * v11)
    memmove(v10, v27, 8 * v11);
  v13 = 0;
  *(_QWORD *)(v9 + 16) = *(_QWORD *)(v7 + 16);
  v14 = 1 << *(_BYTE *)(v7 + 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & *(_QWORD *)(v7 + 64);
  v17 = (unint64_t)(v14 + 63) >> 6;
  v25 = v17 - 4;
  while (1)
  {
    if (v16)
    {
      v18 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v19 = v18 | (v13 << 6);
      goto LABEL_12;
    }
    v22 = v13 + 1;
    if (v13 + 1 >= v17)
      goto LABEL_24;
    v23 = *((_QWORD *)v27 + v22);
    if (!v23)
    {
      v22 = v13 + 2;
      if (v13 + 2 >= v17)
        goto LABEL_24;
      v23 = *((_QWORD *)v27 + v22);
      if (!v23)
      {
        v22 = v13 + 3;
        if (v13 + 3 >= v17)
          goto LABEL_24;
        v23 = *((_QWORD *)v27 + v22);
        if (!v23)
          break;
      }
    }
LABEL_23:
    v16 = (v23 - 1) & v23;
    v19 = __clz(__rbit64(v23)) + (v22 << 6);
    v13 = v22;
LABEL_12:
    v20 = *(_QWORD *)(v3 + 72) * v19;
    sub_1B1792810(*(_QWORD *)(v7 + 48) + v20, (uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for TextureCache.TextureKey);
    v21 = 160 * v19;
    sub_1B1C1AA1C(*(_QWORD *)(v7 + 56) + v21, (uint64_t)v28);
    sub_1B1A025EC((uint64_t)v6, *(_QWORD *)(v9 + 48) + v20, (uint64_t (*)(_QWORD))type metadata accessor for TextureCache.TextureKey);
    sub_1B1B9C128((uint64_t)v28, *(_QWORD *)(v9 + 56) + v21);
  }
  while (v25 != v13)
  {
    v23 = *(_QWORD *)(v7 + 8 * v13++ + 96);
    if (v23)
    {
      v22 = v13 + 3;
      goto LABEL_23;
    }
  }
LABEL_24:
  result = swift_release();
  v1 = v26;
LABEL_26:
  *v1 = v9;
  return result;
}

uint64_t sub_1B1EB2620()
{
  return sub_1B1EB262C((void (*)(_QWORD))sub_1B1B9B000);
}

uint64_t sub_1B1EB262C(void (*a1)(_QWORD))
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t result;

  v2 = v1;
  a1(0);
  v3 = *v1;
  v4 = sub_1B22296B8();
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
    goto LABEL_24;
  v6 = (void *)(v4 + 64);
  v7 = v3 + 64;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)v6 >= v3 + 64 + 8 * v8)
    memmove(v6, (const void *)(v3 + 64), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 64);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v19 = v10 + 1;
    if (v10 + 1 >= v14)
      goto LABEL_24;
    v20 = *(_QWORD *)(v7 + 8 * v19);
    if (!v20)
    {
      v19 = v10 + 2;
      if (v10 + 2 >= v14)
        goto LABEL_24;
      v20 = *(_QWORD *)(v7 + 8 * v19);
      if (!v20)
      {
        v19 = v10 + 3;
        if (v10 + 3 >= v14)
          goto LABEL_24;
        v20 = *(_QWORD *)(v7 + 8 * v19);
        if (!v20)
          break;
      }
    }
LABEL_23:
    v13 = (v20 - 1) & v20;
    v16 = __clz(__rbit64(v20)) + (v19 << 6);
    v10 = v19;
LABEL_12:
    v17 = 8 * v16;
    v18 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + 8 * v16);
    *(_QWORD *)(*(_QWORD *)(v5 + 48) + v17) = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v16);
    *(_QWORD *)(*(_QWORD *)(v5 + 56) + v17) = v18;
    swift_bridgeObjectRetain();
  }
  while (v14 - 4 != v10)
  {
    v20 = *(_QWORD *)(v3 + 96 + 8 * v10++);
    if (v20)
    {
      v19 = v10 + 3;
      goto LABEL_23;
    }
  }
LABEL_24:
  result = swift_release();
  *v2 = v5;
  return result;
}

uint64_t sub_1B1EB27C4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t result;

  v1 = v0;
  sub_1B1EB5DEC();
  v2 = *v0;
  v3 = sub_1B22296B8();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
    goto LABEL_24;
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (v9 + 1 >= v13)
      goto LABEL_24;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    if (!v21)
    {
      v20 = v9 + 2;
      if (v9 + 2 >= v13)
        goto LABEL_24;
      v21 = *(_QWORD *)(v6 + 8 * v20);
      if (!v21)
      {
        v20 = v9 + 3;
        if (v9 + 3 >= v13)
          goto LABEL_24;
        v21 = *(_QWORD *)(v6 + 8 * v20);
        if (!v21)
          break;
      }
    }
LABEL_23:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v20 << 6);
    v9 = v20;
LABEL_12:
    v16 = *(_QWORD *)(v2 + 56) + 24 * v15;
    v17 = *(_QWORD *)v16;
    v18 = *(_OWORD *)(v16 + 8);
    *(_BYTE *)(*(_QWORD *)(v4 + 48) + v15) = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v15);
    v19 = *(_QWORD *)(v4 + 56) + 24 * v15;
    *(_QWORD *)v19 = v17;
    *(_OWORD *)(v19 + 8) = v18;
    swift_unknownObjectRetain();
  }
  while (v13 - 4 != v9)
  {
    v21 = *(_QWORD *)(v2 + 96 + 8 * v9++);
    if (v21)
    {
      v20 = v9 + 3;
      goto LABEL_23;
    }
  }
LABEL_24:
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_1B1EB296C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t result;

  v1 = v0;
  sub_1B1EB6DB4(0, (unint64_t *)&qword_1ED4BA9F0);
  v2 = *v0;
  v3 = sub_1B22296B8();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
    goto LABEL_24;
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (v9 + 1 >= v13)
      goto LABEL_24;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    if (!v21)
    {
      v20 = v9 + 2;
      if (v9 + 2 >= v13)
        goto LABEL_24;
      v21 = *(_QWORD *)(v6 + 8 * v20);
      if (!v21)
      {
        v20 = v9 + 3;
        if (v9 + 3 >= v13)
          goto LABEL_24;
        v21 = *(_QWORD *)(v6 + 8 * v20);
        if (!v21)
          break;
      }
    }
LABEL_23:
    v22 = __clz(__rbit64(v21));
    v12 = (v21 - 1) & v21;
    v15 = v22 + (v20 << 6);
    v9 = v20;
LABEL_12:
    v16 = 4 * v15;
    v17 = *(_DWORD *)(*(_QWORD *)(v2 + 48) + 4 * v15);
    v18 = 8 * v15;
    v19 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v18);
    *(_DWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v18) = v19;
  }
  while (v13 - 4 != v9)
  {
    v21 = *(_QWORD *)(v2 + 96 + 8 * v9++);
    if (v21)
    {
      v20 = v9 + 3;
      goto LABEL_23;
    }
  }
LABEL_24:
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_1B1EB2B08()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t result;

  v1 = v0;
  sub_1B1EB6DB4(0, (unint64_t *)&qword_1ED4BA920);
  v2 = *v0;
  v3 = sub_1B22296B8();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
    goto LABEL_24;
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v25 = v9 + 1;
    if (v9 + 1 >= v13)
      goto LABEL_24;
    v26 = *(_QWORD *)(v6 + 8 * v25);
    if (!v26)
    {
      v25 = v9 + 2;
      if (v9 + 2 >= v13)
        goto LABEL_24;
      v26 = *(_QWORD *)(v6 + 8 * v25);
      if (!v26)
      {
        v25 = v9 + 3;
        if (v9 + 3 >= v13)
          goto LABEL_24;
        v26 = *(_QWORD *)(v6 + 8 * v25);
        if (!v26)
          break;
      }
    }
LABEL_23:
    v12 = (v26 - 1) & v26;
    v15 = __clz(__rbit64(v26)) + (v25 << 6);
    v9 = v25;
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = (uint64_t *)(*(_QWORD *)(v2 + 56) + v16);
    v21 = v20[1];
    v22 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    v23 = *v20;
    *v22 = v19;
    v22[1] = v18;
    v24 = (_QWORD *)(*(_QWORD *)(v4 + 56) + v16);
    *v24 = v23;
    v24[1] = v21;
    swift_bridgeObjectRetain();
    swift_retain();
  }
  while (v13 - 4 != v9)
  {
    v26 = *(_QWORD *)(v2 + 96 + 8 * v9++);
    if (v26)
    {
      v25 = v9 + 3;
      goto LABEL_23;
    }
  }
LABEL_24:
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_1B1EB2CDC()
{
  return sub_1B1EB2CF0((unint64_t *)&qword_1ED4BA938);
}

uint64_t sub_1B1EB2CF0(unint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t result;

  v2 = v1;
  sub_1B1EB6DB4(0, a1);
  v3 = *v1;
  v4 = sub_1B22296B8();
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
    goto LABEL_24;
  v6 = (void *)(v4 + 64);
  v7 = v3 + 64;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)v6 >= v3 + 64 + 8 * v8)
    memmove(v6, (const void *)(v3 + 64), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 64);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v24 = v10 + 1;
    if (v10 + 1 >= v14)
      goto LABEL_24;
    v25 = *(_QWORD *)(v7 + 8 * v24);
    if (!v25)
    {
      v24 = v10 + 2;
      if (v10 + 2 >= v14)
        goto LABEL_24;
      v25 = *(_QWORD *)(v7 + 8 * v24);
      if (!v25)
      {
        v24 = v10 + 3;
        if (v10 + 3 >= v14)
          goto LABEL_24;
        v25 = *(_QWORD *)(v7 + 8 * v24);
        if (!v25)
          break;
      }
    }
LABEL_23:
    v13 = (v25 - 1) & v25;
    v16 = __clz(__rbit64(v25)) + (v24 << 6);
    v10 = v24;
LABEL_12:
    v17 = 16 * v16;
    v18 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v16);
    v20 = *v18;
    v19 = v18[1];
    v21 = 8 * v16;
    v22 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + v21);
    v23 = (_QWORD *)(*(_QWORD *)(v5 + 48) + v17);
    *v23 = v20;
    v23[1] = v19;
    *(_QWORD *)(*(_QWORD *)(v5 + 56) + v21) = v22;
    swift_bridgeObjectRetain();
  }
  while (v14 - 4 != v10)
  {
    v25 = *(_QWORD *)(v3 + 96 + 8 * v10++);
    if (v25)
    {
      v24 = v10 + 3;
      goto LABEL_23;
    }
  }
LABEL_24:
  result = swift_release();
  *v2 = v5;
  return result;
}

uint64_t sub_1B1EB2EA8()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t result;
  int64_t v25;
  uint64_t *v26;
  const void *v27;
  int64_t v28;

  v1 = v0;
  v2 = sub_1B222826C();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1B1EB6A60();
  v7 = *v0;
  v8 = sub_1B22296B8();
  v9 = v8;
  if (!*(_QWORD *)(v7 + 16))
  {
    result = swift_release();
    goto LABEL_26;
  }
  v10 = (void *)(v8 + 64);
  v11 = (unint64_t)((1 << *(_BYTE *)(v9 + 32)) + 63) >> 6;
  v26 = v1;
  v27 = (const void *)(v7 + 64);
  if (v9 != v7 || (unint64_t)v10 >= v7 + 64 + 8 * v11)
    memmove(v10, v27, 8 * v11);
  v13 = 0;
  *(_QWORD *)(v9 + 16) = *(_QWORD *)(v7 + 16);
  v14 = 1 << *(_BYTE *)(v7 + 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & *(_QWORD *)(v7 + 64);
  v28 = (unint64_t)(v14 + 63) >> 6;
  v25 = v28 - 4;
  while (1)
  {
    if (v16)
    {
      v17 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v18 = v17 | (v13 << 6);
      goto LABEL_12;
    }
    v22 = v13 + 1;
    if (v13 + 1 >= v28)
      goto LABEL_24;
    v23 = *((_QWORD *)v27 + v22);
    if (!v23)
    {
      v22 = v13 + 2;
      if (v13 + 2 >= v28)
        goto LABEL_24;
      v23 = *((_QWORD *)v27 + v22);
      if (!v23)
      {
        v22 = v13 + 3;
        if (v13 + 3 >= v28)
          goto LABEL_24;
        v23 = *((_QWORD *)v27 + v22);
        if (!v23)
          break;
      }
    }
LABEL_23:
    v16 = (v23 - 1) & v23;
    v18 = __clz(__rbit64(v23)) + (v22 << 6);
    v13 = v22;
LABEL_12:
    v19 = *(_QWORD *)(v3 + 72) * v18;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v6, *(_QWORD *)(v7 + 48) + v19, v2);
    v20 = 8 * v18;
    v21 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v18);
    (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(v9 + 48) + v19, v6, v2);
    *(_QWORD *)(*(_QWORD *)(v9 + 56) + v20) = v21;
    swift_retain();
  }
  while (v25 != v13)
  {
    v23 = *(_QWORD *)(v7 + 8 * v13++ + 96);
    if (v23)
    {
      v22 = v13 + 3;
      goto LABEL_23;
    }
  }
LABEL_24:
  result = swift_release();
  v1 = v26;
LABEL_26:
  *v1 = v9;
  return result;
}

uint64_t sub_1B1EB30E4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t result;

  v1 = v0;
  sub_1B1B9BE20();
  v2 = *v0;
  v3 = sub_1B22296B8();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
    goto LABEL_24;
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v28 = v9 + 1;
    if (v9 + 1 >= v13)
      goto LABEL_24;
    v29 = *(_QWORD *)(v6 + 8 * v28);
    if (!v29)
    {
      v28 = v9 + 2;
      if (v9 + 2 >= v13)
        goto LABEL_24;
      v29 = *(_QWORD *)(v6 + 8 * v28);
      if (!v29)
      {
        v28 = v9 + 3;
        if (v9 + 3 >= v13)
          goto LABEL_24;
        v29 = *(_QWORD *)(v6 + 8 * v28);
        if (!v29)
          break;
      }
    }
LABEL_23:
    v12 = (v29 - 1) & v29;
    v15 = __clz(__rbit64(v29)) + (v28 << 6);
    v9 = v28;
LABEL_12:
    v16 = 96 * v15;
    v17 = *(_QWORD *)(v2 + 48) + 96 * v15;
    v18 = *(_BYTE *)(v17 + 8);
    v19 = 8 * v15;
    v20 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v19);
    v21 = *(_QWORD *)(v4 + 48) + v16;
    v22 = *(_QWORD *)(v17 + 48);
    v23 = *(_QWORD *)(v17 + 88);
    v24 = *(_OWORD *)(v17 + 16);
    v25 = *(_OWORD *)(v17 + 32);
    v26 = *(_OWORD *)(v17 + 56);
    v27 = *(_OWORD *)(v17 + 72);
    *(_QWORD *)v21 = *(_QWORD *)v17;
    *(_BYTE *)(v21 + 8) = v18;
    *(_OWORD *)(v21 + 16) = v24;
    *(_OWORD *)(v21 + 32) = v25;
    *(_QWORD *)(v21 + 48) = v22;
    *(_OWORD *)(v21 + 56) = v26;
    *(_OWORD *)(v21 + 72) = v27;
    *(_QWORD *)(v21 + 88) = v23;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v20;
    swift_unknownObjectRetain();
  }
  while (v13 - 4 != v9)
  {
    v29 = *(_QWORD *)(v2 + 96 + 8 * v9++);
    if (v29)
    {
      v28 = v9 + 3;
      goto LABEL_23;
    }
  }
LABEL_24:
  result = swift_release();
  *v1 = v4;
  return result;
}

unint64_t sub_1B1EB32BC(unint64_t result, int a2, uint64_t a3, _QWORD *a4)
{
  a4[(result >> 6) + 8] |= 1 << result;
  *(_DWORD *)(a4[6] + 4 * result) = a2;
  *(_QWORD *)(a4[7] + 8 * result) = a3;
  ++a4[2];
  return result;
}

unint64_t sub_1B1EB32F8(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  _QWORD *v6;

  a6[(result >> 6) + 8] |= 1 << result;
  *(_QWORD *)(a6[6] + 8 * result) = a2;
  v6 = (_QWORD *)(a6[7] + 24 * result);
  *v6 = a3;
  v6[1] = a4;
  v6[2] = a5;
  ++a6[2];
  return result;
}

unint64_t sub_1B1EB3340(unint64_t result, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;

  a4[(result >> 6) + 8] |= 1 << result;
  v4 = 8 * result;
  *(_QWORD *)(a4[6] + v4) = a2;
  *(_QWORD *)(a4[7] + v4) = a3;
  ++a4[2];
  return result;
}

__n128 sub_1B1EB3380(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v5;
  uint64_t v6;
  __int128 v7;
  __n128 result;
  __int128 v9;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  v5 = (_QWORD *)(a5[6] + 16 * a1);
  *v5 = a2;
  v5[1] = a3;
  v6 = a5[7] + 88 * a1;
  v7 = *(_OWORD *)(a4 + 48);
  *(_OWORD *)(v6 + 32) = *(_OWORD *)(a4 + 32);
  *(_OWORD *)(v6 + 48) = v7;
  *(_OWORD *)(v6 + 64) = *(_OWORD *)(a4 + 64);
  *(_QWORD *)(v6 + 80) = *(_QWORD *)(a4 + 80);
  result = *(__n128 *)a4;
  v9 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)v6 = *(_OWORD *)a4;
  *(_OWORD *)(v6 + 16) = v9;
  ++a5[2];
  return result;
}

unint64_t sub_1B1EB33E4(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v5;

  a5[(result >> 6) + 8] |= 1 << result;
  v5 = (_QWORD *)(a5[6] + 16 * result);
  *v5 = a2;
  v5[1] = a3;
  *(_QWORD *)(a5[7] + 8 * result) = a4;
  ++a5[2];
  return result;
}

unint64_t sub_1B1EB3424(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  _QWORD *v6;
  _QWORD *v7;

  a6[(result >> 6) + 8] |= 1 << result;
  v6 = (_QWORD *)(a6[6] + 16 * result);
  *v6 = a2;
  v6[1] = a3;
  v7 = (_QWORD *)(a6[7] + 16 * result);
  *v7 = a4;
  v7[1] = a5;
  ++a6[2];
  return result;
}

uint64_t sub_1B1EB346C(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t result;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v8 = a4[6];
  v9 = sub_1B222826C();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 72) * a1;
  v12 = v8 + v11;
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 32);
  v13(v12, a2, v9);
  result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v13)(a4[7] + v11, a3, v9);
  ++a4[2];
  return result;
}

unint64_t sub_1B1EB3514(unint64_t result, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)(a3 + 8 * (result >> 6) + 64) |= 1 << result;
  *(_QWORD *)(*(_QWORD *)(a3 + 48) + 8 * result) = a2;
  ++*(_QWORD *)(a3 + 16);
  return result;
}

unint64_t sub_1B1EB354C(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v5;

  a5[(result >> 6) + 8] |= 1 << result;
  *(_QWORD *)(a5[6] + 8 * result) = a2;
  v5 = (_QWORD *)(a5[7] + 16 * result);
  *v5 = a3;
  v5[1] = a4;
  ++a5[2];
  return result;
}

uint64_t sub_1B1EB358C(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t result;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(_QWORD *)(a4[6] + 8 * a1) = a2;
  result = sub_1B1B41294(a3, a4[7] + 88 * a1, &qword_1EEF5B790, (uint64_t)&type metadata for GraphCodeGen.CodeGenAtom, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  ++a4[2];
  return result;
}

unint64_t sub_1B1EB3608(unint64_t result, char a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v5;

  a5[(result >> 6) + 8] |= 1 << result;
  *(_BYTE *)(a5[6] + result) = a2;
  v5 = (_QWORD *)(a5[7] + 16 * result);
  *v5 = a3;
  v5[1] = a4;
  ++a5[2];
  return result;
}

uint64_t sub_1B1EB3648(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t result;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  result = sub_1B19FA278(a2, a4[6] + 40 * a1);
  *(_QWORD *)(a4[7] + 8 * a1) = a3;
  ++a4[2];
  return result;
}

uint64_t sub_1B1EB36BC(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  _QWORD *v13;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  v10 = a5[6];
  v11 = sub_1B222826C();
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v10 + *(_QWORD *)(*(_QWORD *)(v11 - 8) + 72) * a1, a2, v11);
  v13 = (_QWORD *)(a5[7] + 16 * a1);
  *v13 = a3;
  v13[1] = a4;
  ++a5[2];
  return result;
}

_OWORD *sub_1B1EB3754(unint64_t a1, uint64_t a2, _OWORD *a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  _OWORD *result;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v8 = a4[6];
  v9 = sub_1B2229610();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * a1, a2, v9);
  result = sub_1B1A0DDAC(a3, (_OWORD *)(a4[7] + 32 * a1));
  ++a4[2];
  return result;
}

unint64_t sub_1B1EB37EC(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, _QWORD *a7)
{
  _QWORD *v7;
  uint64_t v8;

  a7[(result >> 6) + 8] |= 1 << result;
  v7 = (_QWORD *)(a7[6] + 16 * result);
  *v7 = a2;
  v7[1] = a3;
  v8 = a7[7] + 24 * result;
  *(_QWORD *)v8 = a4;
  *(_QWORD *)(v8 + 8) = a5;
  *(_BYTE *)(v8 + 16) = a6 & 1;
  ++a7[2];
  return result;
}

unint64_t sub_1B1EB383C(unint64_t result, char a2, uint64_t a3, _QWORD *a4)
{
  a4[(result >> 6) + 8] |= 1 << result;
  *(_BYTE *)(a4[6] + result) = a2;
  *(_QWORD *)(a4[7] + 8 * result) = a3;
  ++a4[2];
  return result;
}

uint64_t sub_1B1EB3878(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t result;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(_QWORD *)(a4[6] + 8 * a1) = a2;
  result = sub_1B1B9A484(a3, a4[7] + 80 * a1);
  ++a4[2];
  return result;
}

uint64_t sub_1B1EB38D8(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t result;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(_QWORD *)(a4[6] + 8 * a1) = a2;
  result = sub_1B1EB5804(a3, a4[7] + 56 * a1);
  ++a4[2];
  return result;
}

unint64_t sub_1B1EB3938(unint64_t result, uint64_t a2, char a3, _QWORD *a4)
{
  a4[(result >> 6) + 8] |= 1 << result;
  *(_QWORD *)(a4[6] + 8 * result) = a2;
  *(_BYTE *)(a4[7] + result) = a3;
  ++a4[2];
  return result;
}

uint64_t sub_1B1EB3974(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t result;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(_QWORD *)(a4[6] + 8 * a1) = a2;
  result = sub_1B1B41294(a3, a4[7] + 80 * a1, (unint64_t *)&unk_1EEF5AE70, (uint64_t)&type metadata for ShaderCache.ComputePipeline, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for ShaderCache.Status);
  ++a4[2];
  return result;
}

__n128 sub_1B1EB39F0(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  __n128 result;
  __int128 v6;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(_QWORD *)(a4[6] + 8 * a1) = a2;
  v4 = a4[7] + 40 * a1;
  result = *(__n128 *)a3;
  v6 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)v4 = *(_OWORD *)a3;
  *(_OWORD *)(v4 + 16) = v6;
  *(_QWORD *)(v4 + 32) = *(_QWORD *)(a3 + 32);
  ++a4[2];
  return result;
}

uint64_t sub_1B1EB3A40(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  return sub_1B1EB3BAC(a1, a2, a3, a4, sub_1B1B9BAB0);
}

uint64_t sub_1B1EB3A4C(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t result;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(_QWORD *)(a4[6] + 8 * a1) = a2;
  result = sub_1B1B41294(a3, a4[7] + 832 * a1, &qword_1ED4B7E90, (uint64_t)&type metadata for ShaderCache.RenderPipeline, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for ShaderCache.Status);
  ++a4[2];
  return result;
}

unint64_t sub_1B1EB3AC8(unint64_t result, __int16 a2, uint64_t a3, _QWORD *a4)
{
  a4[(result >> 6) + 8] |= 1 << result;
  *(_WORD *)(a4[6] + 2 * result) = a2;
  *(_QWORD *)(a4[7] + 8 * result) = a3;
  ++a4[2];
  return result;
}

uint64_t sub_1B1EB3B04(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v7 = a4[6] + 8 * a1;
  *(_DWORD *)v7 = a2;
  *(_BYTE *)(v7 + 4) = BYTE4(a2) & 1;
  v8 = a4[7];
  v9 = sub_1B2228110();
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * a1, a3, v9);
  ++a4[2];
  return result;
}

uint64_t sub_1B1EB3B94(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  return sub_1B1EB3BAC(a1, a2, a3, a4, sub_1B1EB6150);
}

uint64_t sub_1B1EB3BA0(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  return sub_1B1EB3BAC(a1, a2, a3, a4, sub_1B1EB60D0);
}

uint64_t sub_1B1EB3BAC(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t result;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(_QWORD *)(a4[6] + 8 * a1) = a2;
  result = a5(a3, a4[7] + 8 * a1);
  ++a4[2];
  return result;
}

__n128 sub_1B1EB3C0C(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __n128 result;
  __int128 v8;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v4 = a4[6] + 40 * a1;
  v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v4 = *(_OWORD *)a2;
  *(_OWORD *)(v4 + 16) = v5;
  *(_BYTE *)(v4 + 32) = *(_BYTE *)(a2 + 32);
  v6 = a4[7] + 40 * a1;
  result = *(__n128 *)a3;
  v8 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)v6 = *(_OWORD *)a3;
  *(_OWORD *)(v6 + 16) = v8;
  *(_BYTE *)(v6 + 32) = *(_BYTE *)(a3 + 32);
  ++a4[2];
  return result;
}

unint64_t sub_1B1EB3C70(unint64_t result, uint64_t a2, char a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, _QWORD *a8)
{
  uint64_t v8;
  _QWORD *v9;

  a8[(result >> 6) + 8] |= 1 << result;
  v8 = a8[6] + 32 * result;
  *(_QWORD *)v8 = a2;
  *(_BYTE *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 16) = a4;
  *(_BYTE *)(v8 + 24) = a5 & 1;
  v9 = (_QWORD *)(a8[7] + 16 * result);
  *v9 = a6;
  v9[1] = a7;
  ++a8[2];
  return result;
}

uint64_t sub_1B1EB3CC4(unint64_t a1, uint64_t a2, char a3, _QWORD *a4)
{
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  v7 = a3 & 1;
  a4[(a1 >> 6) + 8] |= 1 << a1;
  v8 = a4[6];
  v9 = sub_1B222826C();
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * a1, a2, v9);
  *(_BYTE *)(a4[7] + a1) = v7;
  ++a4[2];
  return result;
}

uint64_t sub_1B1EB3D54(unint64_t a1, uint64_t a2, uint64_t a3, char a4, _QWORD *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  v10 = a5[6];
  v11 = sub_1B222826C();
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v10 + *(_QWORD *)(*(_QWORD *)(v11 - 8) + 72) * a1, a2, v11);
  v13 = a5[7] + 16 * a1;
  *(_QWORD *)v13 = a3;
  *(_BYTE *)(v13 + 8) = a4 & 1;
  ++a5[2];
  return result;
}

uint64_t sub_1B1EB3DF4(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v7 = a4[6] + 8 * a1;
  *(_DWORD *)v7 = a2;
  *(_BYTE *)(v7 + 4) = BYTE4(a2) & 1;
  v8 = a4[7];
  v9 = type metadata accessor for GraphScriptingConfig.ScriptInfo();
  result = sub_1B1A025EC(a3, v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * a1, (uint64_t (*)(_QWORD))type metadata accessor for GraphScriptingConfig.ScriptInfo);
  ++a4[2];
  return result;
}

unint64_t sub_1B1EB3E84(unint64_t result, uint64_t a2, char a3, _QWORD *a4)
{
  a4[(result >> 6) + 8] |= 1 << result;
  *(_QWORD *)(a4[6] + 8 * result) = a2;
  *(_BYTE *)(a4[7] + result) = a3 & 1;
  ++a4[2];
  return result;
}

uint64_t sub_1B1EB3EC4(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v8 = a4[6];
  v9 = sub_1B222826C();
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * a1, a2, v9);
  *(_QWORD *)(a4[7] + 8 * a1) = a3;
  ++a4[2];
  return result;
}

__n128 sub_1B1EB3F54(unint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  __n128 result;

  v4 = *a3;
  v5 = a3[17];
  v6 = *((_BYTE *)a3 + 144);
  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(_QWORD *)(a4[6] + 8 * a1) = a2;
  v7 = a4[7] + 152 * a1;
  *(_QWORD *)v7 = v4;
  *(_OWORD *)(v7 + 8) = *(_OWORD *)(a3 + 1);
  *(_OWORD *)(v7 + 24) = *(_OWORD *)(a3 + 3);
  *(_OWORD *)(v7 + 40) = *(_OWORD *)(a3 + 5);
  *(_OWORD *)(v7 + 56) = *(_OWORD *)(a3 + 7);
  *(_OWORD *)(v7 + 72) = *(_OWORD *)(a3 + 9);
  *(_OWORD *)(v7 + 88) = *(_OWORD *)(a3 + 11);
  *(_OWORD *)(v7 + 104) = *(_OWORD *)(a3 + 13);
  result = *(__n128 *)(a3 + 15);
  *(__n128 *)(v7 + 120) = result;
  *(_QWORD *)(v7 + 136) = v5;
  *(_BYTE *)(v7 + 144) = v6;
  ++a4[2];
  return result;
}

uint64_t sub_1B1EB3FEC(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v6;
  uint64_t result;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  v6 = (_QWORD *)(a5[6] + 16 * a1);
  *v6 = a2;
  v6[1] = a3;
  result = sub_1B1B9A190(a4, a5[7] + 48 * a1);
  ++a5[2];
  return result;
}

__n128 sub_1B1EB4058(unint64_t a1, char a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  char v6;
  __int16 v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __n128 result;

  v5 = *(_QWORD *)(a4 + 16);
  v6 = *(_BYTE *)(a4 + 24);
  v7 = *(_WORD *)(a4 + 40);
  v8 = *(_BYTE *)(a4 + 42);
  v9 = *(_QWORD *)(a4 + 96);
  a5[(a1 >> 6) + 8] |= 1 << a1;
  v10 = a5[6] + 16 * a1;
  *(_BYTE *)v10 = a2;
  *(_QWORD *)(v10 + 8) = a3;
  v11 = a5[7] + (a1 << 7);
  *(_OWORD *)v11 = *(_OWORD *)a4;
  *(_QWORD *)(v11 + 16) = v5;
  *(_BYTE *)(v11 + 24) = v6;
  *(_QWORD *)(v11 + 32) = *(_QWORD *)(a4 + 32);
  *(_WORD *)(v11 + 40) = v7;
  *(_BYTE *)(v11 + 42) = v8;
  v12 = *(_OWORD *)(a4 + 64);
  *(_OWORD *)(v11 + 48) = *(_OWORD *)(a4 + 48);
  *(_OWORD *)(v11 + 64) = v12;
  *(_OWORD *)(v11 + 80) = *(_OWORD *)(a4 + 80);
  *(_QWORD *)(v11 + 96) = v9;
  *(_DWORD *)(v11 + 104) = *(_DWORD *)(a4 + 104);
  result = *(__n128 *)(a4 + 112);
  *(__n128 *)(v11 + 112) = result;
  ++a5[2];
  return result;
}

uint64_t sub_1B1EB40F4(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v6;
  uint64_t result;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  v6 = (_QWORD *)(a5[6] + 16 * a1);
  *v6 = a2;
  v6[1] = a3;
  result = sub_1B1B99D74(a4, a5[7] + 96 * a1);
  ++a5[2];
  return result;
}

__n128 sub_1B1EB4160(unint64_t a1, _OWORD *a2, uint64_t a3, _QWORD *a4)
{
  _OWORD *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __n128 result;
  __int128 v13;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v4 = (_OWORD *)(a4[6] + 96 * a1);
  v5 = a2[3];
  v4[2] = a2[2];
  v4[3] = v5;
  v6 = a2[5];
  v4[4] = a2[4];
  v4[5] = v6;
  v7 = a2[1];
  *v4 = *a2;
  v4[1] = v7;
  v8 = a4[7] + 112 * a1;
  v9 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)v8 = *(_OWORD *)a3;
  *(_OWORD *)(v8 + 16) = v9;
  v10 = *(_OWORD *)(a3 + 96);
  v11 = *(_OWORD *)(a3 + 64);
  *(_OWORD *)(v8 + 80) = *(_OWORD *)(a3 + 80);
  *(_OWORD *)(v8 + 96) = v10;
  result = *(__n128 *)(a3 + 32);
  v13 = *(_OWORD *)(a3 + 48);
  *(__n128 *)(v8 + 32) = result;
  *(_OWORD *)(v8 + 48) = v13;
  *(_OWORD *)(v8 + 64) = v11;
  ++a4[2];
  return result;
}

__n128 sub_1B1EB41DC(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __n128 result;
  __int128 v8;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(_QWORD *)(a4[6] + 8 * a1) = a2;
  v4 = a4[7] + 120 * a1;
  v5 = *(_OWORD *)(a3 + 80);
  *(_OWORD *)(v4 + 64) = *(_OWORD *)(a3 + 64);
  *(_OWORD *)(v4 + 80) = v5;
  *(_OWORD *)(v4 + 96) = *(_OWORD *)(a3 + 96);
  *(_QWORD *)(v4 + 112) = *(_QWORD *)(a3 + 112);
  v6 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)v4 = *(_OWORD *)a3;
  *(_OWORD *)(v4 + 16) = v6;
  result = *(__n128 *)(a3 + 32);
  v8 = *(_OWORD *)(a3 + 48);
  *(__n128 *)(v4 + 32) = result;
  *(_OWORD *)(v4 + 48) = v8;
  ++a4[2];
  return result;
}

uint64_t sub_1B1EB4244(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v8 = a4[6];
  v9 = sub_1B2228110();
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * a1, a2, v9);
  *(_QWORD *)(a4[7] + 8 * a1) = a3;
  ++a4[2];
  return result;
}

unint64_t sub_1B1EB42D4(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _QWORD *a7)
{
  _QWORD *v7;

  a7[(result >> 6) + 8] |= 1 << result;
  *(_QWORD *)(a7[6] + 8 * result) = a2;
  v7 = (_QWORD *)(a7[7] + 32 * result);
  *v7 = a3;
  v7[1] = a4;
  v7[2] = a5;
  v7[3] = a6;
  ++a7[2];
  return result;
}

unint64_t sub_1B1EB4318(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, _QWORD *a8)
{
  _QWORD *v8;
  _QWORD *v9;

  a8[(result >> 6) + 8] |= 1 << result;
  v8 = (_QWORD *)(a8[6] + 16 * result);
  *v8 = a2;
  v8[1] = a3;
  v9 = (_QWORD *)(a8[7] + 32 * result);
  *v9 = a4;
  v9[1] = a5;
  v9[2] = a6;
  v9[3] = a7;
  ++a8[2];
  return result;
}

unint64_t sub_1B1EB4360(unint64_t result, uint64_t a2, int a3, _QWORD *a4)
{
  a4[(result >> 6) + 8] |= 1 << result;
  *(_QWORD *)(a4[6] + 8 * result) = a2;
  *(_DWORD *)(a4[7] + 4 * result) = a3;
  ++a4[2];
  return result;
}

unint64_t sub_1B1EB439C(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _QWORD *a7)
{
  _QWORD *v7;
  _QWORD *v8;

  a7[(result >> 6) + 8] |= 1 << result;
  v7 = (_QWORD *)(a7[6] + 16 * result);
  *v7 = a2;
  v7[1] = a3;
  v8 = (_QWORD *)(a7[7] + 24 * result);
  *v8 = a4;
  v8[1] = a5;
  v8[2] = a6;
  ++a7[2];
  return result;
}

__n128 sub_1B1EB43E8(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v5;
  uint64_t v6;
  __int128 v7;
  __n128 result;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  v5 = (_QWORD *)(a5[6] + 16 * a1);
  *v5 = a2;
  v5[1] = a3;
  v6 = a5[7] + 56 * a1;
  v7 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)v6 = *(_OWORD *)a4;
  *(_OWORD *)(v6 + 16) = v7;
  result = *(__n128 *)(a4 + 32);
  *(__n128 *)(v6 + 32) = result;
  *(_QWORD *)(v6 + 48) = *(_QWORD *)(a4 + 48);
  ++a5[2];
  return result;
}

__n128 sub_1B1EB4448(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  __int128 v5;
  __n128 result;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v4 = a4[6] + 72 * a1;
  v5 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v4 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v4 + 48) = v5;
  *(_QWORD *)(v4 + 61) = *(_QWORD *)(a2 + 61);
  result = *(__n128 *)(a2 + 16);
  *(_OWORD *)v4 = *(_OWORD *)a2;
  *(__n128 *)(v4 + 16) = result;
  *(_QWORD *)(a4[7] + 8 * a1) = a3;
  ++a4[2];
  return result;
}

unint64_t sub_1B1EB44A0(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, _QWORD *a8)
{
  uint64_t v8;
  _QWORD *v9;

  a8[(result >> 6) + 8] |= 1 << result;
  v8 = a8[6] + 32 * result;
  *(_QWORD *)v8 = a2;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 16) = a4;
  *(_BYTE *)(v8 + 24) = a5 & 1;
  v9 = (_QWORD *)(a8[7] + 16 * result);
  *v9 = a6;
  v9[1] = a7;
  ++a8[2];
  return result;
}

uint64_t sub_1B1EB44F0(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v8 = a4[6];
  v9 = type metadata accessor for TextureCache.TextureKey();
  result = sub_1B1A025EC(a2, v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * a1, (uint64_t (*)(_QWORD))type metadata accessor for TextureCache.TextureKey);
  *(_QWORD *)(a4[7] + 8 * a1) = a3;
  ++a4[2];
  return result;
}

uint64_t sub_1B1EB4580(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v8 = a4[6];
  v9 = type metadata accessor for TextureCache.TextureKey();
  sub_1B1A025EC(a2, v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * a1, (uint64_t (*)(_QWORD))type metadata accessor for TextureCache.TextureKey);
  result = sub_1B1B9C128(a3, a4[7] + 160 * a1);
  ++a4[2];
  return result;
}

unint64_t sub_1B1EB461C(unint64_t result, char a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  _QWORD *v6;

  a6[(result >> 6) + 8] |= 1 << result;
  *(_BYTE *)(a6[6] + result) = a2;
  v6 = (_QWORD *)(a6[7] + 24 * result);
  *v6 = a3;
  v6[1] = a4;
  v6[2] = a5;
  ++a6[2];
  return result;
}

__n128 sub_1B1EB4664(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _OWORD *v4;
  __int128 v5;
  __int128 v6;
  __n128 result;
  __int128 v8;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v4 = (_OWORD *)(a4[6] + 96 * a1);
  v5 = *(_OWORD *)(a2 + 48);
  v4[2] = *(_OWORD *)(a2 + 32);
  v4[3] = v5;
  v6 = *(_OWORD *)(a2 + 80);
  v4[4] = *(_OWORD *)(a2 + 64);
  v4[5] = v6;
  result = *(__n128 *)a2;
  v8 = *(_OWORD *)(a2 + 16);
  *v4 = *(_OWORD *)a2;
  v4[1] = v8;
  *(_QWORD *)(a4[7] + 8 * a1) = a3;
  ++a4[2];
  return result;
}

uint64_t (*sub_1B1EB46BC(_QWORD *a1, uint64_t a2))()
{
  _QWORD *v4;
  char isUniquelyReferenced_nonNull_native;

  v4 = malloc(0x50uLL);
  *a1 = v4;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v4[8] = sub_1B1EB5510(v4);
  v4[9] = sub_1B1EB4A0C(v4 + 4, a2, isUniquelyReferenced_nonNull_native);
  return sub_1B1EB4738;
}

uint64_t (*sub_1B1EB473C(_QWORD *a1, unsigned __int8 a2))()
{
  _QWORD *v4;
  char isUniquelyReferenced_nonNull_native;

  v4 = malloc(0x50uLL);
  *a1 = v4;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v4[8] = sub_1B1EB55A0(v4);
  v4[9] = sub_1B1EB4C20(v4 + 4, a2, isUniquelyReferenced_nonNull_native);
  return sub_1B1EB4738;
}

uint64_t (*sub_1B1EB47B8(_QWORD *a1, unint64_t a2))()
{
  _QWORD *v4;
  char isUniquelyReferenced_nonNull_native;

  v4 = malloc(0x50uLL);
  *a1 = v4;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v4[8] = sub_1B1EB5510(v4);
  v4[9] = sub_1B1EB4F58(v4 + 4, a2 | ((HIDWORD(a2) & 1) << 32), isUniquelyReferenced_nonNull_native);
  return sub_1B1EB4738;
}

uint64_t (*sub_1B1EB4844(_QWORD *a1, uint64_t a2))()
{
  _QWORD *v4;
  char isUniquelyReferenced_nonNull_native;

  v4 = malloc(0x50uLL);
  *a1 = v4;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v4[8] = sub_1B1EB5510(v4);
  v4[9] = sub_1B1EB5198(v4 + 4, a2, isUniquelyReferenced_nonNull_native);
  return sub_1B1EB4738;
}

void sub_1B1EB48C0(uint64_t a1)
{
  void *v1;
  void (*v2)(void *, _QWORD);

  v1 = *(void **)a1;
  v2 = *(void (**)(void *, _QWORD))(*(_QWORD *)a1 + 64);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 72))(*(_QWORD *)a1 + 32, 0);
  v2(v1, 0);
  free(v1);
}

void (*sub_1B1EB48FC(_QWORD *a1, uint64_t a2))(uint64_t a1)
{
  _QWORD *v4;
  uint64_t v5;
  unsigned __int8 *v6;
  char isUniquelyReferenced_nonNull_native;

  v4 = malloc(0x58uLL);
  *a1 = v4;
  v5 = type metadata accessor for TextureCache.TextureKey();
  v6 = (unsigned __int8 *)malloc(*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64));
  v4[8] = v6;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  sub_1B1792810(a2, (uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for TextureCache.TextureKey);
  v4[9] = sub_1B1EB5510(v4);
  v4[10] = sub_1B1EB5384(v4 + 4, v6, isUniquelyReferenced_nonNull_native);
  return sub_1B1EB49B4;
}

void sub_1B1EB49B4(uint64_t a1)
{
  void *v1;
  void (*v2)(void *, _QWORD);
  void *v3;

  v1 = *(void **)a1;
  v2 = *(void (**)(void *, _QWORD))(*(_QWORD *)a1 + 72);
  v3 = *(void **)(*(_QWORD *)a1 + 64);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 80))(*(_QWORD *)a1 + 32, 0);
  sub_1B1EB5ECC((uint64_t)v3);
  v2(v1, 0);
  free(v3);
  free(v1);
}

void (*sub_1B1EB4A0C(_QWORD *a1, uint64_t a2, char a3))(uint64_t **a1)
{
  uint64_t *v3;
  uint64_t *v4;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  void (*result)(uint64_t **);

  v4 = v3;
  v8 = malloc(0x38uLL);
  *a1 = v8;
  v8[3] = a2;
  v8[4] = v4;
  v9 = *v4;
  v10 = sub_1B1DC3AC8(a2);
  v12 = v11;
  *((_BYTE *)v8 + 48) = v11 & 1;
  v13 = *(_QWORD *)(v9 + 24);
  v14 = *(_QWORD *)(v9 + 16) + ((v11 & 1) == 0);
  if (v13 >= v14 && (a3 & 1) != 0)
  {
LABEL_6:
    v8[5] = v10;
    if ((v12 & 1) != 0)
    {
LABEL_7:
      v15 = *(_QWORD *)(*v4 + 56) + 24 * v10;
      v16 = *(_OWORD *)v15;
      v17 = *(_QWORD *)(v15 + 16);
LABEL_11:
      *(_OWORD *)v8 = v16;
      v8[2] = v17;
      return sub_1B1EB4B30;
    }
LABEL_10:
    v17 = 0;
    v16 = 0uLL;
    goto LABEL_11;
  }
  if (v13 >= v14 && (a3 & 1) == 0)
  {
    sub_1B1EA7CD0();
    goto LABEL_6;
  }
  sub_1B1E90708(v14, a3 & 1);
  v18 = sub_1B1DC3AC8(a2);
  if ((v12 & 1) == (v19 & 1))
  {
    v10 = v18;
    v8[5] = v18;
    if ((v12 & 1) != 0)
      goto LABEL_7;
    goto LABEL_10;
  }
  result = (void (*)(uint64_t **))sub_1B2229FC4();
  __break(1u);
  return result;
}

void sub_1B1EB4B30(uint64_t **a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;

  v1 = *a1;
  v2 = **a1;
  v3 = (*a1)[1];
  v4 = (*a1)[2];
  if (v2)
  {
    v5 = v1[5];
    v6 = *(_QWORD **)v1[4];
    if (((*a1)[6] & 1) != 0)
    {
      v7 = (uint64_t *)(v6[7] + 24 * v5);
      *v7 = v2;
      v7[1] = v3;
      v7[2] = v4;
    }
    else
    {
      v8 = v1[3];
      v6[(v5 >> 6) + 8] |= 1 << v5;
      *(_QWORD *)(v6[6] + 8 * v5) = v8;
      v9 = (uint64_t *)(v6[7] + 24 * v5);
      *v9 = v2;
      v9[1] = v3;
      v9[2] = v4;
      ++v6[2];
    }
  }
  else if (((*a1)[6] & 1) != 0)
  {
    sub_1B1EA45A8(v1[5], *(_QWORD *)v1[4]);
  }
  v10 = *v1;
  sub_1B1EB5530(v2);
  sub_1B1EB5568(v10);
  free(v1);
}

uint64_t sub_1B1EB4C20(_QWORD *a1, unsigned __int8 a2, char a3)
{
  uint64_t *v3;
  uint64_t *v4;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t result;

  v4 = v3;
  v8 = malloc(0x80uLL);
  *a1 = v8;
  v8[10] = v4;
  *((_BYTE *)v8 + 97) = a2;
  v9 = *v4;
  v10 = sub_1B1DC3F80(a2);
  v12 = v11;
  *((_BYTE *)v8 + 98) = v11 & 1;
  v13 = *(_QWORD *)(v9 + 24);
  v14 = *(_QWORD *)(v9 + 16) + ((v11 & 1) == 0);
  if (v13 >= v14 && (a3 & 1) != 0)
  {
LABEL_6:
    v8[11] = v10;
    if ((v12 & 1) != 0)
    {
LABEL_7:
      v15 = *(_QWORD *)(*v4 + 56) + 80 * v10;
      v16 = *(_QWORD *)v15;
      v17 = *(_QWORD *)(v15 + 8);
      v18 = *(_OWORD *)(v15 + 16);
      v19 = *(_QWORD *)(v15 + 32);
      v20 = *(unsigned __int8 *)(v15 + 40);
      v21 = *(_QWORD *)(v15 + 48);
      v22 = *(unsigned __int8 *)(v15 + 56);
      v23 = *(_QWORD *)(v15 + 64);
      v24 = *(_QWORD *)(v15 + 72);
LABEL_11:
      *v8 = v16;
      v8[1] = v17;
      *((_OWORD *)v8 + 1) = v18;
      v8[4] = v19;
      v8[5] = v20;
      v8[6] = v21;
      v8[7] = v22;
      result = (uint64_t)sub_1B1EB4D84;
      v8[8] = v23;
      v8[9] = v24;
      return result;
    }
LABEL_10:
    v16 = 0;
    v17 = 0;
    v19 = 0;
    v20 = 0;
    v21 = 0;
    v22 = 0;
    v23 = 0;
    v24 = 0;
    v18 = 0uLL;
    goto LABEL_11;
  }
  if (v13 >= v14 && (a3 & 1) == 0)
  {
    sub_1B1EAC4C0();
    goto LABEL_6;
  }
  sub_1B1E98410(v14, a3 & 1);
  v25 = sub_1B1DC3F80(a2);
  if ((v12 & 1) == (v26 & 1))
  {
    v10 = v25;
    v8[11] = v25;
    if ((v12 & 1) != 0)
      goto LABEL_7;
    goto LABEL_10;
  }
  result = sub_1B2229FC4();
  __break(1u);
  return result;
}

void sub_1B1EB4D84(char **a1, char a2)
{
  char *v2;
  uint64_t v3;
  char v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  _BYTE *v15;
  _BYTE *v16;
  char v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  char v21;
  char v22;

  v2 = *a1;
  v3 = *((_QWORD *)*a1 + 1);
  v4 = (*a1)[98];
  if ((a2 & 1) != 0)
  {
    if (v3)
    {
      v5 = *((_DWORD *)v2 + 14);
      v6 = *((_QWORD *)v2 + 6);
      v8 = *((_QWORD *)v2 + 3);
      v7 = *((_QWORD *)v2 + 4);
      v9 = *((_QWORD *)v2 + 2);
      v10 = *(_QWORD *)v2;
      v11 = *((_QWORD *)v2 + 8);
      v12 = *((_QWORD *)v2 + 9);
      v2[96] = *((_DWORD *)v2 + 10) & 1;
      v2[104] = v5 & 1;
      v13 = *((_QWORD *)v2 + 11);
      v14 = (_QWORD *)**((_QWORD **)v2 + 10);
      if ((v4 & 1) != 0)
      {
        v15 = v2 + 96;
        v16 = v2 + 104;
LABEL_8:
        v18 = v14[7] + 80 * v13;
        *(_QWORD *)v18 = v10;
        *(_QWORD *)(v18 + 8) = v3;
        *(_QWORD *)(v18 + 16) = v9;
        *(_QWORD *)(v18 + 24) = v8;
        *(_QWORD *)(v18 + 32) = v7;
        *(_BYTE *)(v18 + 40) = *v15;
        *(_QWORD *)(v18 + 48) = v6;
        *(_BYTE *)(v18 + 56) = *v16;
        *(_QWORD *)(v18 + 64) = v11;
        *(_QWORD *)(v18 + 72) = v12;
        goto LABEL_14;
      }
      v19 = v2[97];
      v14[(v13 >> 6) + 8] |= 1 << v13;
      *(_BYTE *)(v14[6] + v13) = v19;
      v20 = v14[7] + 80 * v13;
      *(_QWORD *)v20 = v10;
      *(_QWORD *)(v20 + 8) = v3;
      *(_QWORD *)(v20 + 16) = v9;
      *(_QWORD *)(v20 + 24) = v8;
      *(_QWORD *)(v20 + 32) = v7;
      *(_BYTE *)(v20 + 40) = v2[96];
      *(_QWORD *)(v20 + 48) = v6;
      v21 = v2[104];
      goto LABEL_13;
    }
  }
  else if (v3)
  {
    v17 = *((_DWORD *)v2 + 14);
    v6 = *((_QWORD *)v2 + 6);
    v8 = *((_QWORD *)v2 + 3);
    v7 = *((_QWORD *)v2 + 4);
    v9 = *((_QWORD *)v2 + 2);
    v10 = *(_QWORD *)v2;
    v11 = *((_QWORD *)v2 + 8);
    v12 = *((_QWORD *)v2 + 9);
    v2[112] = *((_DWORD *)v2 + 10) & 1;
    v2[120] = v17 & 1;
    v13 = *((_QWORD *)v2 + 11);
    v14 = (_QWORD *)**((_QWORD **)v2 + 10);
    if ((v4 & 1) != 0)
    {
      v15 = v2 + 112;
      v16 = v2 + 120;
      goto LABEL_8;
    }
    v22 = v2[97];
    v14[(v13 >> 6) + 8] |= 1 << v13;
    *(_BYTE *)(v14[6] + v13) = v22;
    v20 = v14[7] + 80 * v13;
    *(_QWORD *)v20 = v10;
    *(_QWORD *)(v20 + 8) = v3;
    *(_QWORD *)(v20 + 16) = v9;
    *(_QWORD *)(v20 + 24) = v8;
    *(_QWORD *)(v20 + 32) = v7;
    *(_BYTE *)(v20 + 40) = v2[112];
    *(_QWORD *)(v20 + 48) = v6;
    v21 = v2[120];
LABEL_13:
    *(_BYTE *)(v20 + 56) = v21;
    *(_QWORD *)(v20 + 64) = v11;
    *(_QWORD *)(v20 + 72) = v12;
    ++v14[2];
    goto LABEL_14;
  }
  if (((*a1)[98] & 1) != 0)
    sub_1B1EA60C4(*((_QWORD *)v2 + 11), **((_QWORD **)v2 + 10));
LABEL_14:
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  free(v2);
}

void (*sub_1B1EB4F58(_QWORD *a1, unint64_t a2, char a3))(uint64_t a1)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  void (*result)(uint64_t);

  v4 = v3;
  v8 = malloc(0x28uLL);
  *a1 = v8;
  *v8 = a2;
  v8[1] = v3;
  sub_1B1791524(0, &qword_1ED4B94E0, (uint64_t (*)(uint64_t))type metadata accessor for GraphScriptingConfig.ScriptInfo, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  v10 = malloc(*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  v8[2] = v10;
  v11 = *v3;
  v12 = HIDWORD(a2) & 1;
  v13 = a2;
  v14 = sub_1B1DC4040(a2 | (unint64_t)(v12 << 32));
  v16 = v15;
  *((_BYTE *)v8 + 32) = v15 & 1;
  v17 = *(_QWORD *)(v11 + 24);
  v18 = *(_QWORD *)(v11 + 16) + ((v15 & 1) == 0);
  if (v17 >= v18 && (a3 & 1) != 0)
  {
LABEL_6:
    v8[3] = v14;
    if ((v16 & 1) != 0)
    {
LABEL_7:
      v19 = *(_QWORD *)(*v4 + 56);
      v20 = type metadata accessor for GraphScriptingConfig.ScriptInfo();
      v21 = *(_QWORD *)(v20 - 8);
      sub_1B1A025EC(v19 + *(_QWORD *)(v21 + 72) * v14, (uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for GraphScriptingConfig.ScriptInfo);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v10, 0, 1, v20);
      return sub_1B1EB510C;
    }
LABEL_10:
    v24 = type metadata accessor for GraphScriptingConfig.ScriptInfo();
    (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v10, 1, 1, v24);
    return sub_1B1EB510C;
  }
  if (v17 >= v18 && (a3 & 1) == 0)
  {
    sub_1B1EAD7E0();
    goto LABEL_6;
  }
  sub_1B1E9A6F8(v18, a3 & 1);
  v22 = sub_1B1DC4040(v13 | (v12 << 32));
  if ((v16 & 1) == (v23 & 1))
  {
    v14 = v22;
    v8[3] = v22;
    if ((v16 & 1) != 0)
      goto LABEL_7;
    goto LABEL_10;
  }
  result = (void (*)(uint64_t))sub_1B2229FC4();
  __break(1u);
  return result;
}

void sub_1B1EB510C(uint64_t a1)
{
  void *v1;
  void *v2;

  v1 = *(void **)a1;
  v2 = *(void **)(*(_QWORD *)a1 + 16);
  sub_1B1C07170((uint64_t)v2, *(_BYTE *)(*(_QWORD *)a1 + 32), *(uint64_t **)(*(_QWORD *)a1 + 8), *(_QWORD *)(*(_QWORD *)a1 + 24), **(_QWORD **)a1 | ((HIDWORD(**(_QWORD **)a1) & 1) << 32));
  sub_1B1AEA224((uint64_t)v2, (uint64_t)&qword_1ED4B94E0, (uint64_t)type metadata accessor for GraphScriptingConfig.ScriptInfo, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))sub_1B1791524);
  free(v2);
  free(v1);
}

void (*sub_1B1EB5198(_QWORD *a1, uint64_t a2, char a3))(uint64_t **a1)
{
  uint64_t *v3;
  uint64_t *v4;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  void (*result)(uint64_t **);

  v4 = v3;
  v8 = malloc(0x38uLL);
  *a1 = v8;
  v8[3] = a2;
  v8[4] = v4;
  v9 = *v4;
  v10 = sub_1B1DC3AC8(a2);
  v12 = v11;
  *((_BYTE *)v8 + 48) = v11 & 1;
  v13 = *(_QWORD *)(v9 + 24);
  v14 = *(_QWORD *)(v9 + 16) + ((v11 & 1) == 0);
  if (v13 >= v14 && (a3 & 1) != 0)
  {
LABEL_6:
    v8[5] = v10;
    if ((v12 & 1) != 0)
    {
LABEL_7:
      v15 = *(_QWORD *)(*v4 + 56) + 24 * v10;
      v16 = *(_OWORD *)v15;
      v17 = *(_QWORD *)(v15 + 16);
LABEL_11:
      *(_OWORD *)v8 = v16;
      v8[2] = v17;
      return sub_1B1EB52BC;
    }
LABEL_10:
    v17 = 0;
    v16 = 0uLL;
    goto LABEL_11;
  }
  if (v13 >= v14 && (a3 & 1) == 0)
  {
    sub_1B1EAA4A8();
    goto LABEL_6;
  }
  sub_1B1E94FD0(v14, a3 & 1);
  v18 = sub_1B1DC3AC8(a2);
  if ((v12 & 1) == (v19 & 1))
  {
    v10 = v18;
    v8[5] = v18;
    if ((v12 & 1) != 0)
      goto LABEL_7;
    goto LABEL_10;
  }
  result = (void (*)(uint64_t **))sub_1B2229FC4();
  __break(1u);
  return result;
}

void sub_1B1EB52BC(uint64_t **a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v3 = v1[2];
    v5 = v1[5];
    v6 = *(_QWORD **)v1[4];
    if (((*a1)[6] & 1) != 0)
    {
      v6 = (_QWORD *)(v6[7] + 24 * v5);
      *v6 = v2;
      v6[1] = v4;
    }
    else
    {
      v7 = v1[3];
      v6[(v5 >> 6) + 8] |= 1 << v5;
      *(_QWORD *)(v6[6] + 8 * v5) = v7;
      v8 = (_QWORD *)(v6[7] + 24 * v5);
      *v8 = v2;
      v8[1] = v4;
      v8[2] = v3;
      v3 = v6[2] + 1;
    }
    v6[2] = v3;
  }
  else if (((*a1)[6] & 1) != 0)
  {
    sub_1B1EA45A8(v1[5], *(_QWORD *)v1[4]);
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  free(v1);
}

void (*sub_1B1EB5384(_QWORD *a1, unsigned __int8 *a2, char a3))(uint64_t *a1)
{
  uint64_t *v3;
  uint64_t *v4;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  void (*result)(uint64_t *);

  v4 = v3;
  v8 = malloc(0xB8uLL);
  *a1 = v8;
  v8[20] = a2;
  v8[21] = v4;
  v9 = *v4;
  v10 = sub_1B1DC457C(a2);
  v12 = v11;
  *((_BYTE *)v8 + 153) = v11 & 1;
  v13 = *(_QWORD *)(v9 + 24);
  v14 = *(_QWORD *)(v9 + 16) + ((v11 & 1) == 0);
  if (v13 >= v14 && (a3 & 1) != 0)
  {
LABEL_6:
    v8[22] = v10;
    if ((v12 & 1) != 0)
    {
LABEL_7:
      sub_1B1B9C128(*(_QWORD *)(*v4 + 56) + 160 * v10, (uint64_t)v8);
      return sub_1B1EB54BC;
    }
LABEL_10:
    v8[18] = 0;
    *((_OWORD *)v8 + 7) = 0u;
    *((_OWORD *)v8 + 8) = 0u;
    *((_OWORD *)v8 + 5) = 0u;
    *((_OWORD *)v8 + 6) = 0u;
    *((_OWORD *)v8 + 3) = 0u;
    *((_OWORD *)v8 + 4) = 0u;
    *((_OWORD *)v8 + 1) = 0u;
    *((_OWORD *)v8 + 2) = 0u;
    *(_OWORD *)v8 = 0u;
    *((_BYTE *)v8 + 152) = -1;
    return sub_1B1EB54BC;
  }
  if (v13 >= v14 && (a3 & 1) == 0)
  {
    sub_1B1EB23D8();
    goto LABEL_6;
  }
  sub_1B1EA28B8(v14, a3 & 1);
  v15 = sub_1B1DC457C(a2);
  if ((v12 & 1) == (v16 & 1))
  {
    v10 = v15;
    v8[22] = v15;
    if ((v12 & 1) != 0)
      goto LABEL_7;
    goto LABEL_10;
  }
  type metadata accessor for TextureCache.TextureKey();
  result = (void (*)(uint64_t *))sub_1B2229FC4();
  __break(1u);
  return result;
}

void sub_1B1EB54BC(uint64_t *a1)
{
  void *v1;

  v1 = (void *)*a1;
  sub_1B1C073CC(*a1, *(_BYTE *)(*a1 + 153), *(uint64_t **)(*a1 + 168), *(_QWORD *)(*a1 + 176), *(_QWORD *)(*a1 + 160));
  sub_1B1AEA224((uint64_t)v1, (uint64_t)&unk_1ED4B84C0, (uint64_t)&type metadata for TextureCache.CacheEntry, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))sub_1B1A02758);
  free(v1);
}

uint64_t (*sub_1B1EB5510(_QWORD *a1))()
{
  _QWORD *v1;

  *a1 = *v1;
  a1[1] = v1;
  *v1 = 0x8000000000000000;
  return sub_1B1EB6E00;
}

uint64_t sub_1B1EB5530(uint64_t result)
{
  if (result)
  {
    swift_retain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_1B1EB5568(uint64_t result)
{
  if (result)
  {
    swift_release();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t (*sub_1B1EB55A0(_QWORD *a1))(uint64_t result)
{
  _QWORD *v1;

  *a1 = *v1;
  a1[1] = v1;
  *v1 = 0x8000000000000000;
  return sub_1B1EB55C0;
}

uint64_t sub_1B1EB55C0(uint64_t result)
{
  **(_QWORD **)(result + 8) = *(_QWORD *)result;
  return result;
}

uint64_t sub_1B1EB55CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v21;
  uint64_t v22;
  int64_t v23;

  v4 = 0;
  v5 = a1 + 64;
  v6 = 1 << *(_BYTE *)(a1 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(a1 + 64);
  v23 = (unint64_t)(v6 + 63) >> 6;
  v21 = a1 + 112;
  v22 = MEMORY[0x1E0DEE9D8];
  while (1)
  {
    if (v8)
    {
      v9 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v10 = v9 | (v4 << 6);
      goto LABEL_20;
    }
    v11 = v4 + 1;
    if (v4 + 1 >= v23)
      goto LABEL_28;
    v12 = *(_QWORD *)(v5 + 8 * v11);
    if (!v12)
    {
      v11 = v4 + 2;
      if (v4 + 2 >= v23)
        goto LABEL_28;
      v12 = *(_QWORD *)(v5 + 8 * v11);
      if (!v12)
      {
        v11 = v4 + 3;
        if (v4 + 3 >= v23)
          goto LABEL_28;
        v12 = *(_QWORD *)(v5 + 8 * v11);
        if (!v12)
        {
          v11 = v4 + 4;
          if (v4 + 4 >= v23)
            goto LABEL_28;
          v12 = *(_QWORD *)(v5 + 8 * v11);
          if (!v12)
          {
            v11 = v4 + 5;
            if (v4 + 5 >= v23)
              goto LABEL_28;
            v12 = *(_QWORD *)(v5 + 8 * v11);
            if (!v12)
              break;
          }
        }
      }
    }
LABEL_19:
    v8 = (v12 - 1) & v12;
    v10 = __clz(__rbit64(v12)) + (v11 << 6);
    v4 = v11;
LABEL_20:
    v13 = *(int *)(*(_QWORD *)(a1 + 48) + 4 * v10);
    v14 = *(_QWORD *)(*(_QWORD *)(a2 + 80) + 8 * v13 + 32);
    v15 = sub_1B1E8EDB4(*(_QWORD *)(v14 + 16));
    if (v15 && (v15 != 1 || (sub_1B1E8EF04(v14) & 1) != 0))
    {
      v16 = v22;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1B202A018(0, *(_QWORD *)(v22 + 16) + 1, 1);
        v16 = v22;
      }
      v18 = *(_QWORD *)(v16 + 16);
      v17 = *(_QWORD *)(v16 + 24);
      v19 = v18 + 1;
      if (v18 >= v17 >> 1)
      {
        sub_1B202A018(v17 > 1, v18 + 1, 1);
        v19 = v18 + 1;
        v16 = v22;
      }
      *(_QWORD *)(v16 + 16) = v19;
      v22 = v16;
      *(_DWORD *)(v16 + 4 * v18 + 32) = v13;
    }
  }
  while (v23 - 6 != v4)
  {
    v12 = *(_QWORD *)(v21 + 8 * v4++);
    if (v12)
    {
      v11 = v4 + 5;
      goto LABEL_19;
    }
  }
LABEL_28:
  swift_release();
  return v22;
}

uint64_t sub_1B1EB5804(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for BlendingStates(a2, a1);
  return a2;
}

void sub_1B1EB5840(uint64_t a1, unint64_t *a2)
{
  unint64_t v3;
  uint64_t v4;

  if (!*a2)
  {
    sub_1B19F8F48(255, (unint64_t *)&qword_1ED4B7990);
    v3 = sub_1B22296E8();
    if (!v4)
      atomic_store(v3, a2);
  }
}

uint64_t sub_1B1EB58B4(uint64_t a1)
{
  sub_1B1B4157C(*(id *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136));
  return a1;
}

void sub_1B1EB5A78()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5FF00)
  {
    type metadata accessor for ComponentsDataChunk();
    sub_1B1791524(255, (unint64_t *)&unk_1EEF5FF08, (uint64_t (*)(uint64_t))sub_1B1B1F228, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
    sub_1B19E52CC((unint64_t *)&qword_1EEF5FF18, (uint64_t (*)(uint64_t))type metadata accessor for ComponentsDataChunk, (uint64_t)&unk_1B226DF04);
    v0 = sub_1B22296E8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5FF00);
  }
}

void sub_1B1EB5B24(uint64_t a1)
{
  sub_1B1B99B8C(a1, &qword_1EEF5B380, (void (*)(uint64_t))_s12ParameterOutCMa);
}

void sub_1B1EB5B48(uint64_t a1)
{
  sub_1B1B99B8C(a1, &qword_1EEF5B388, (void (*)(uint64_t))_s11MetadataSetCMa);
}

uint64_t sub_1B1EB5B6C(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void sub_1B1EB5BC0(uint64_t a1)
{
  sub_1B1B99B8C(a1, &qword_1EEF5B608, (void (*)(uint64_t))_s13ParameterBaseCMa);
}

void sub_1B1EB5BE4(uint64_t a1)
{
  sub_1B1B99B8C(a1, &qword_1ED4BA918, (void (*)(uint64_t))type metadata accessor for PropertyDescription);
}

unint64_t sub_1B1EB5C08()
{
  unint64_t result;

  result = qword_1ED4B8598;
  if (!qword_1ED4B8598)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2291228, &_s28DrawCallEntityClassesContextVN);
    atomic_store(result, (unint64_t *)&qword_1ED4B8598);
  }
  return result;
}

void sub_1B1EB5C4C(uint64_t a1)
{
  sub_1B1B99B8C(a1, (unint64_t *)&unk_1EEF5FF70, (void (*)(uint64_t))sub_1B1B9A3C0);
}

void sub_1B1EB5C70()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5FF88)
  {
    sub_1B1B68ED0();
    v0 = sub_1B22296E8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5FF88);
  }
}

void sub_1B1EB5CD0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5B460)
  {
    sub_1B1B9A650(255, (unint64_t *)&qword_1EEF5B468, (unint64_t *)&qword_1ED4BB0A0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50]);
    v0 = sub_1B22296E8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5B460);
  }
}

void sub_1B1EB5D4C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5B470)
  {
    sub_1B1B9A650(255, (unint64_t *)&qword_1EEF5B478, &qword_1ED4BB080, MEMORY[0x1E0DEDD20]);
    v0 = sub_1B22296E8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5B470);
  }
}

void sub_1B1EB5DC8(uint64_t a1)
{
  sub_1B1B99B8C(a1, &qword_1EEF5B738, (void (*)(uint64_t))type metadata accessor for SceneAssetRegistryEntry);
}

void sub_1B1EB5DEC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED4842D8)
  {
    sub_1B1CDB19C();
    v0 = sub_1B22296E8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED4842D8);
  }
}

void sub_1B1EB5E4C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED4BA8A0)
  {
    type metadata accessor for TextureCache.TextureKey();
    sub_1B19E52CC((unint64_t *)&unk_1ED4B84A0, (uint64_t (*)(uint64_t))type metadata accessor for TextureCache.TextureKey, (uint64_t)&unk_1B22AA130);
    v0 = sub_1B22296E8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED4BA8A0);
  }
}

uint64_t sub_1B1EB5ECC(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for TextureCache.TextureKey();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_1B1EB5F08(uint64_t a1)
{
  sub_1B1B99B8C(a1, &qword_1ED4BA930, (void (*)(uint64_t))type metadata accessor for Bindings.Value);
}

void sub_1B1EB5F2C()
{
  uint64_t (*v0)(uint64_t);
  unint64_t v1;
  uint64_t v2;

  if (!qword_1EEF5FFF0)
  {
    sub_1B222826C();
    v0 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998];
    sub_1B1A0FCB4();
    sub_1B19E52CC((unint64_t *)&qword_1ED4B7B38, v0, MEMORY[0x1E0CB09C8]);
    v1 = sub_1B22296E8();
    if (!v2)
      atomic_store(v1, (unint64_t *)&qword_1EEF5FFF0);
  }
}

void sub_1B1EB5FC0(uint64_t a1)
{
  sub_1B1B99B8C(a1, (unint64_t *)&unk_1EEF60000, (void (*)(uint64_t))sub_1B1B9A5D4);
}

void sub_1B1EB5FE4(uint64_t a1)
{
  sub_1B1B99B8C(a1, (unint64_t *)&unk_1EEF5B940, (void (*)(uint64_t))type metadata accessor for Node);
}

void sub_1B1EB6008()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5B8D8)
  {
    v0 = sub_1B2228CEC();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5B8D8);
  }
}

uint64_t sub_1B1EB6064(uint64_t a1, uint64_t a2)
{
  return sub_1B1EB6078(a1, a2, (unint64_t *)&unk_1ED4BF640, (uint64_t (*)(uint64_t))type metadata accessor for DepthStencilCache);
}

uint64_t sub_1B1EB6078(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t))
{
  uint64_t v6;

  sub_1B1791524(0, a3, a4, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for WeakReference);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

uint64_t sub_1B1EB60D0(uint64_t a1, uint64_t a2)
{
  return sub_1B1EB60E4(a1, a2, (unint64_t *)&unk_1ED4BF640, (uint64_t (*)(uint64_t))type metadata accessor for DepthStencilCache);
}

uint64_t sub_1B1EB60E4(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t))
{
  uint64_t v6;

  sub_1B1791524(0, a3, a4, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for WeakReference);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a2, a1, v6);
  return a2;
}

uint64_t sub_1B1EB613C(uint64_t a1, uint64_t a2)
{
  return sub_1B1EB6078(a1, a2, (unint64_t *)&unk_1ED4BF620, (uint64_t (*)(uint64_t))type metadata accessor for TextureCache);
}

uint64_t sub_1B1EB6150(uint64_t a1, uint64_t a2)
{
  return sub_1B1EB60E4(a1, a2, (unint64_t *)&unk_1ED4BF620, (uint64_t (*)(uint64_t))type metadata accessor for TextureCache);
}

void sub_1B1EB6164()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF60018)
  {
    sub_1B1AEC268(255, &qword_1EEF5CD80);
    sub_1B1EB61E0();
    v0 = sub_1B22296E8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF60018);
  }
}

unint64_t sub_1B1EB61E0()
{
  unint64_t result;

  result = qword_1EEF60028;
  if (!qword_1EEF60028)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22A0EB8, &type metadata for _BinaryKey);
    atomic_store(result, (unint64_t *)&qword_1EEF60028);
  }
  return result;
}

void sub_1B1EB6224(uint64_t a1)
{
  sub_1B1B99B8C(a1, &qword_1EEF60038, (void (*)(uint64_t))type metadata accessor for _BinaryDecoder.DataStream);
}

void sub_1B1EB6248()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF60040)
  {
    sub_1B19F8E54(255, (unint64_t *)&unk_1EEF5CD98, (uint64_t (*)(void))sub_1B1C78FEC, (uint64_t)&type metadata for StringCodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _KeyBox);
    type metadata accessor for _BinaryDecoder.DataStream();
    sub_1B1EB62E0();
    v0 = sub_1B22296E8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF60040);
  }
}

unint64_t sub_1B1EB62E0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EEF60048;
  if (!qword_1EEF60048)
  {
    sub_1B19F8E54(255, (unint64_t *)&unk_1EEF5CD98, (uint64_t (*)(void))sub_1B1C78FEC, (uint64_t)&type metadata for StringCodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _KeyBox);
    result = MEMORY[0x1B5E23E74](&unk_1B22A10C0, v1);
    atomic_store(result, (unint64_t *)&qword_1EEF60048);
  }
  return result;
}

void sub_1B1EB6348()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF60060)
  {
    sub_1B1B68ED0();
    v0 = sub_1B22296E8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF60060);
  }
}

void sub_1B1EB63A8(uint64_t a1)
{
  sub_1B1B99B8C(a1, &qword_1EEF5B678, (void (*)(uint64_t))_s12ContextEntryCMa);
}

void sub_1B1EB63CC(uint64_t a1)
{
  sub_1B1B99B8C(a1, &qword_1EEF5B670, (void (*)(uint64_t))_s11ContextExitCMa);
}

void sub_1B1EB63F0(uint64_t a1)
{
  sub_1B1B99B8C(a1, &qword_1EEF5B668, (void (*)(uint64_t))_s10SubContextCMa);
}

void sub_1B1EB6414(uint64_t a1)
{
  sub_1B1B99B8C(a1, (unint64_t *)&unk_1EEF60070, (void (*)(uint64_t))_s7ContextCMa);
}

void sub_1B1EB6438(uint64_t a1)
{
  sub_1B1B99B8C(a1, &qword_1EEF5B658, (void (*)(uint64_t))_s11CodeSnippetCMa);
}

void sub_1B1EB645C(uint64_t a1)
{
  sub_1B1B99B8C(a1, &qword_1EEF5B640, (void (*)(uint64_t))_s19StaticSwitchSnippetCMa);
}

void sub_1B1EB6480(uint64_t a1)
{
  sub_1B1B99B8C(a1, &qword_1EEF5B648, (void (*)(uint64_t))_s17TypedArraySnippetCMa);
}

void sub_1B1EB64A4(uint64_t a1)
{
  sub_1B1B99B8C(a1, &qword_1EEF60080, (void (*)(uint64_t))_s24VariableReferenceSnippetCMa);
}

void sub_1B1EB64C8(uint64_t a1)
{
  sub_1B1B99B8C(a1, &qword_1EEF5B630, (void (*)(uint64_t))_s15VariableSnippetCMa);
}

void sub_1B1EB64EC(uint64_t a1)
{
  sub_1B1B99B8C(a1, &qword_1EEF5B650, (void (*)(uint64_t))_s17CustomCodeSnippetCMa);
}

void sub_1B1EB6510(uint64_t a1)
{
  sub_1B1B99B8C(a1, &qword_1EEF5B660, (void (*)(uint64_t))_s20ArraySequenceSnippetCMa);
}

void sub_1B1EB6534(uint64_t a1)
{
  sub_1B1B99B8C(a1, &qword_1EEF60088, (void (*)(uint64_t))_s17CodeSourceSnippetCMa);
}

void sub_1B1EB6558(uint64_t a1)
{
  sub_1B1B99B8C(a1, (unint64_t *)&unk_1EEF60090, (void (*)(uint64_t))_s7LibraryCMa);
}

void sub_1B1EB657C(uint64_t a1)
{
  sub_1B1B99B8C(a1, (unint64_t *)&unk_1EEF5B330, (void (*)(uint64_t))_s11TemplateSetCMa);
}

void sub_1B1EB65A0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF600B0)
  {
    sub_1B1791524(255, &qword_1EEF600B8, (uint64_t (*)(uint64_t))sub_1B1EB6620, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
    sub_1B1B9CCE0();
    v0 = sub_1B22296E8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF600B0);
  }
}

void sub_1B1EB6620(uint64_t a1)
{
  sub_1B1C19024(a1, (unint64_t *)&unk_1EEF600C0, (void (*)(uint64_t))_s17CodeSourceSnippetCMa);
}

void sub_1B1EB6644()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_1EEF600E0)
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1EEF600E0);
  }
}

void sub_1B1EB66A8()
{
  uint64_t (*v0)(uint64_t);
  unint64_t v1;
  uint64_t v2;

  if (!qword_1EEF5B768)
  {
    sub_1B222826C();
    v0 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998];
    sub_1B1B9CA60();
    sub_1B19E52CC((unint64_t *)&qword_1ED4B7B38, v0, MEMORY[0x1E0CB09C8]);
    v1 = sub_1B22296E8();
    if (!v2)
      atomic_store(v1, (unint64_t *)&qword_1EEF5B768);
  }
}

void sub_1B1EB673C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF60108)
  {
    sub_1B1791524(255, &qword_1EEF60110, (uint64_t (*)(uint64_t))type metadata accessor for AuthoringNode, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    v0 = sub_1B22296E8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF60108);
  }
}

void sub_1B1EB67B8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF60118)
  {
    sub_1B1791524(255, (unint64_t *)&unk_1EEF60120, (uint64_t (*)(uint64_t))type metadata accessor for GraphCodeGen.CFGNode, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    v0 = sub_1B22296E8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF60118);
  }
}

void sub_1B1EB6834()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF60148)
  {
    sub_1B1A02758(255, (unint64_t *)&qword_1ED4BA2B0, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    v0 = sub_1B22296E8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF60148);
  }
}

void sub_1B1EB68B0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF60170)
  {
    sub_1B1791524(255, (unint64_t *)&unk_1EEF60178, (uint64_t (*)(uint64_t))sub_1B1C79C20, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
    v0 = sub_1B22296E8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF60170);
  }
}

void sub_1B1EB692C()
{
  uint64_t (*v0)(uint64_t);
  unint64_t v1;
  uint64_t v2;

  if (!qword_1EEF60190)
  {
    sub_1B222826C();
    v0 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998];
    type metadata accessor for Node();
    sub_1B19E52CC((unint64_t *)&qword_1ED4B7B38, v0, MEMORY[0x1E0CB09C8]);
    v1 = sub_1B22296E8();
    if (!v2)
      atomic_store(v1, (unint64_t *)&qword_1EEF60190);
  }
}

void sub_1B1EB69C0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5B800)
  {
    sub_1B1B9D2DC(255, (unint64_t *)&unk_1EEF5BDB0, (unint64_t *)&unk_1EEF5B810, (void (*)(uint64_t))type metadata accessor for AuthoringNode);
    v0 = sub_1B22296E8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5B800);
  }
}

void sub_1B1EB6A3C(uint64_t a1)
{
  sub_1B1B99B8C(a1, (unint64_t *)&unk_1EEF601A0, (void (*)(uint64_t))type metadata accessor for AuthoringNode);
}

void sub_1B1EB6A60()
{
  uint64_t (*v0)(uint64_t);
  unint64_t v1;
  uint64_t v2;

  if (!qword_1EEF5B860)
  {
    sub_1B222826C();
    v0 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998];
    type metadata accessor for AuthoringNode();
    sub_1B19E52CC((unint64_t *)&qword_1ED4B7B38, v0, MEMORY[0x1E0CB09C8]);
    v1 = sub_1B22296E8();
    if (!v2)
      atomic_store(v1, (unint64_t *)&qword_1EEF5B860);
  }
}

void sub_1B1EB6AF4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED4BA9C8)
  {
    sub_1B1791524(255, (unint64_t *)&qword_1ED4BA3D0, (uint64_t (*)(uint64_t))sub_1B1EB6B70, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
    v0 = sub_1B22296E8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED4BA9C8);
  }
}

unint64_t sub_1B1EB6B70()
{
  unint64_t result;

  result = qword_1ED4B8C68;
  if (!qword_1ED4B8C68)
  {
    sub_1B1AEC268(255, &qword_1ED4B8C60);
    result = swift_getExistentialMetatypeMetadata();
    atomic_store(result, (unint64_t *)&qword_1ED4B8C68);
  }
  return result;
}

void sub_1B1EB6BBC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5B950)
  {
    sub_1B1B9DAD4(255, &qword_1ED4BA680);
    v0 = sub_1B22296E8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5B950);
  }
}

void sub_1B1EB6C30()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5B8B8)
  {
    sub_1B1B9D2DC(255, (unint64_t *)&unk_1EEF5B8C0, &qword_1EEF5BDE0, (void (*)(uint64_t))type metadata accessor for Node);
    v0 = sub_1B22296E8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5B8B8);
  }
}

void sub_1B1EB6CAC(uint64_t a1)
{
  sub_1B1791524(a1, (unint64_t *)&unk_1EEF5B930, type metadata accessor for GraphScript, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for VFXObjectScriptsDiff.Diff);
}

uint64_t sub_1B1EB6CC8(uint64_t a1, uint64_t a2)
{
  return sub_1B1792810(a1, a2, (uint64_t (*)(_QWORD))sub_1B1EB6CAC);
}

uint64_t sub_1B1EB6CD4(uint64_t a1, uint64_t a2)
{
  return sub_1B1A025EC(a1, a2, (uint64_t (*)(_QWORD))sub_1B1EB6CAC);
}

void sub_1B1EB6CE0(uint64_t a1)
{
  sub_1B1791524(a1, (unint64_t *)&unk_1EEF601C0, type metadata accessor for TriggerScript, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for VFXObjectScriptsDiff.Diff);
}

void sub_1B1EB6CFC(uint64_t a1)
{
  sub_1B1B99DB0(a1, &qword_1EEF5B920, sub_1B1EB6CE0, (void (*)(void))sub_1B1A057A8);
}

uint64_t sub_1B1EB6D20(uint64_t a1, uint64_t a2)
{
  return sub_1B1792810(a1, a2, (uint64_t (*)(_QWORD))sub_1B1EB6CE0);
}

uint64_t sub_1B1EB6D2C(uint64_t a1, uint64_t a2)
{
  return sub_1B1A025EC(a1, a2, (uint64_t (*)(_QWORD))sub_1B1EB6CE0);
}

void sub_1B1EB6D38()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF601D8)
  {
    sub_1B1A02758(255, &qword_1EEF5CF70, (uint64_t)&type metadata for AuthoringNodeCoder, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    v0 = sub_1B22296E8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF601D8);
  }
}

void sub_1B1EB6DB4(uint64_t a1, unint64_t *a2)
{
  unint64_t v3;
  uint64_t v4;

  if (!*a2)
  {
    v3 = sub_1B22296E8();
    if (!v4)
      atomic_store(v3, a2);
  }
}

id sub_1B1EB6E08()
{
  char *v0;
  char *v1;
  char *v2;
  objc_super v4;
  CFRunLoopSourceContext context;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v0[OBJC_IVAR____TtCC3VFX13RunloopThreadP33_C5453D25073BE51EF98804DB40F9E2866Thread_currentRunloop] = 0;
  v1 = &v0[OBJC_IVAR____TtCC3VFX13RunloopThreadP33_C5453D25073BE51EF98804DB40F9E2866Thread_startedCallback];
  *(_QWORD *)v1 = 0;
  *((_QWORD *)v1 + 1) = 0;
  memset(&context, 0, sizeof(context));
  v2 = v0;
  *(_QWORD *)&v2[OBJC_IVAR____TtCC3VFX13RunloopThreadP33_C5453D25073BE51EF98804DB40F9E2866Thread_runloopSource] = CFRunLoopSourceCreate(0, 0, &context);

  v4.receiver = v2;
  v4.super_class = (Class)type metadata accessor for RunloopThread.Thread();
  return objc_msgSendSuper2(&v4, sel_init);
}

void sub_1B1EB6EE4()
{
  char *v0;
  __CFRunLoop *v1;
  uint64_t v2;
  void *v3;
  __CFRunLoop *v4;
  __CFRunLoopSource *v5;
  const __CFString *v6;
  uint64_t v7;
  void *v8;
  __CFRunLoop *v9;
  char *v10;
  __CFRunLoopObserver *v11;
  void *v12;
  _QWORD v13[6];

  v1 = CFRunLoopGetCurrent();
  v2 = OBJC_IVAR____TtCC3VFX13RunloopThreadP33_C5453D25073BE51EF98804DB40F9E2866Thread_currentRunloop;
  v3 = *(void **)&v0[OBJC_IVAR____TtCC3VFX13RunloopThreadP33_C5453D25073BE51EF98804DB40F9E2866Thread_currentRunloop];
  *(_QWORD *)&v0[OBJC_IVAR____TtCC3VFX13RunloopThreadP33_C5453D25073BE51EF98804DB40F9E2866Thread_currentRunloop] = v1;
  v4 = v1;

  v5 = *(__CFRunLoopSource **)&v0[OBJC_IVAR____TtCC3VFX13RunloopThreadP33_C5453D25073BE51EF98804DB40F9E2866Thread_runloopSource];
  v6 = (const __CFString *)*MEMORY[0x1E0C9B270];
  CFRunLoopAddSource(v4, v5, (CFRunLoopMode)*MEMORY[0x1E0C9B270]);
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = v0;
  *(_QWORD *)(v7 + 24) = v4;
  v13[4] = sub_1B1EB7548;
  v13[5] = v7;
  v13[0] = MEMORY[0x1E0C809B0];
  v13[1] = 1107296256;
  v13[2] = sub_1B1EB70B0;
  v13[3] = &unk_1E63D4948;
  v8 = _Block_copy(v13);
  v9 = v4;
  v10 = v0;
  swift_release();
  v11 = CFRunLoopObserverCreateWithHandler(0, 1uLL, 0, 0, v8);
  _Block_release(v8);
  CFRunLoopAddObserver(v9, v11, v6);
  CFRunLoopRun();
  CFRunLoopRemoveObserver(v9, v11, v6);
  CFRunLoopRemoveSource(v9, v5, v6);
  v12 = *(void **)&v0[v2];
  *(_QWORD *)&v0[v2] = 0;

}

uint64_t sub_1B1EB704C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void (*v4)(uint64_t);
  uint64_t result;

  v4 = *(void (**)(uint64_t))(a3
                                      + OBJC_IVAR____TtCC3VFX13RunloopThreadP33_C5453D25073BE51EF98804DB40F9E2866Thread_startedCallback);
  if (v4)
  {
    swift_retain();
    v4(a4);
    return sub_1B19E5A18((uint64_t)v4);
  }
  return result;
}

void sub_1B1EB70B0(uint64_t a1, void *a2, uint64_t a3)
{
  void (*v5)(void *, uint64_t);
  id v6;

  v5 = *(void (**)(void *, uint64_t))(a1 + 32);
  swift_retain();
  v6 = a2;
  v5(a2, a3);
  swift_release();

}

id sub_1B1EB7144()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for RunloopThread.Thread();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_1B1EB71C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  id v5;
  id v6;
  void *v7;

  *(_QWORD *)(v3 + 24) = 0;
  v5 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for RunloopThread.Thread()), sel_init);
  *(_QWORD *)(v3 + 16) = v5;
  v6 = v5;
  v7 = (void *)sub_1B2228728();
  swift_bridgeObjectRelease();
  objc_msgSend(v6, sel_setName_, v7);

  objc_msgSend(*(id *)(v3 + 16), sel_setQualityOfService_, a3);
  sub_1B1EB72C4();
  return v3;
}

uint64_t sub_1B1EB7270()
{
  uint64_t v0;

  CFRunLoopStop(*(CFRunLoopRef *)(v0 + 24));

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for RunloopThread()
{
  return objc_opt_self();
}

void sub_1B1EB72C4()
{
  uint64_t v0;
  dispatch_semaphore_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (**v5)(void *);
  uint64_t v6;
  NSObject *v7;

  v1 = dispatch_semaphore_create(0);
  v2 = *(char **)(v0 + 16);
  v3 = swift_allocObject();
  swift_weakInit();
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = v1;
  *(_QWORD *)(v4 + 24) = v3;
  v5 = (uint64_t (**)(void *))&v2[OBJC_IVAR____TtCC3VFX13RunloopThreadP33_C5453D25073BE51EF98804DB40F9E2866Thread_startedCallback];
  v6 = *(_QWORD *)&v2[OBJC_IVAR____TtCC3VFX13RunloopThreadP33_C5453D25073BE51EF98804DB40F9E2866Thread_startedCallback];
  *v5 = sub_1B1EB75A0;
  v5[1] = (uint64_t (*)(void *))v4;
  v7 = v1;
  swift_retain();
  swift_retain();
  sub_1B19E5A18(v6);
  objc_msgSend(v2, sel_start);
  swift_release();
  swift_release();
  sub_1B2228FD4();

}

uint64_t sub_1B1EB73B0(void *a1)
{
  uint64_t Strong;
  void *v3;
  id v4;

  Strong = swift_weakLoadStrong();
  if (Strong)
  {
    v3 = *(void **)(Strong + 24);
    *(_QWORD *)(Strong + 24) = a1;
    v4 = a1;
    swift_release();

  }
  return sub_1B2228FE0();
}

void sub_1B1EB7404(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  const void *v4;
  void *v5;
  __CFRunLoop *v6;
  uint64_t v7;
  void *v8;
  __CFRunLoop *v9;
  _QWORD v10[6];

  v3 = *(void **)(v2 + 24);
  v4 = (const void *)*MEMORY[0x1E0C9B280];
  v10[4] = a1;
  v10[5] = a2;
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 1107296256;
  v10[2] = sub_1B17915D0;
  v10[3] = &unk_1E63F33E0;
  v5 = _Block_copy(v10);
  v6 = v3;
  swift_retain();
  swift_release();
  CFRunLoopPerformBlock(v6, v4, v5);
  _Block_release(v5);

  v7 = *(_QWORD *)(v2 + 16);
  v8 = *(void **)(v7 + OBJC_IVAR____TtCC3VFX13RunloopThreadP33_C5453D25073BE51EF98804DB40F9E2866Thread_currentRunloop);
  if (v8)
  {
    v9 = v8;
    if (CFRunLoopIsWaiting(v9))
    {
      CFRunLoopSourceSignal(*(CFRunLoopSourceRef *)(v7
                                                  + OBJC_IVAR____TtCC3VFX13RunloopThreadP33_C5453D25073BE51EF98804DB40F9E2866Thread_runloopSource));
      CFRunLoopWakeUp(v9);
    }

  }
}

uint64_t type metadata accessor for RunloopThread.Thread()
{
  return objc_opt_self();
}

uint64_t sub_1B1EB751C()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_1B1EB7548(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1B1EB704C(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
}

uint64_t sub_1B1EB7550()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1B1EB7574()
{
  uint64_t v0;

  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1B1EB75A0(void *a1)
{
  return sub_1B1EB73B0(a1);
}

uint64_t vfx_script_debug_record_scalar(_:_:_:_:_:_:)(_OWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, uint64_t a9)
{
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  int *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _OWORD v26[4];

  v16 = a1[1];
  v26[0] = *a1;
  v26[1] = v16;
  v17 = a1[3];
  v26[2] = a1[2];
  v26[3] = v17;
  swift_retain();
  if (*((_QWORD *)&v26[0] + 1) != 0xFFFFFFFFLL
    && (DWORD2(v26[0]) & 0x80000000) == 0
    && *(_QWORD *)(*(_QWORD *)&v26[0] + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8) > SDWORD2(v26[0])
    && ((v18 = *(_QWORD *)(*(_QWORD *)&v26[0] + OBJC_IVAR____TtC3VFX13EntityManager__entries), HIDWORD(v26[0]) == -1)
     || *(_DWORD *)(v18 + 12 * SDWORD2(v26[0]) + 8) == HIDWORD(v26[0])))
  {
    v20 = (int *)(v18 + 12 * SDWORD2(v26[0]));
    v21 = *((__int16 *)v20 + 2);
    v22 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)&v26[0] + 136) + 8 * *v20 + 32);
    sub_1B1EB7BAC((uint64_t)v26);
    v23 = *(_QWORD *)(v22 + 48);
    v24 = *(_QWORD *)(v23 + 16);
    if (v24)
    {
      v25 = (_QWORD *)(v23 + 56);
      while ((ValueMetadata *)*(v25 - 3) != &type metadata for GraphDebuggingComponent)
      {
        v25 += 5;
        if (!--v24)
          goto LABEL_7;
      }
      sub_1B1EB7730((uint64_t *)(*(_QWORD *)(v22 + 128) + *v25 + 16 * v21), (uint64_t)v26, a2, a3, a4, a5, a6, a7, a8, a9);
    }
  }
  else
  {
    sub_1B1EB7BAC((uint64_t)v26);
  }
LABEL_7:
  swift_release();
  return sub_1B1EB7BD4((uint64_t)v26);
}

uint64_t sub_1B1EB7730(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, uint64_t a10)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  unint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  char v27;
  char v28;
  uint64_t v29;
  char v30;
  unint64_t v31;
  char v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  uint64_t v36;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t result;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _OWORD v46[2];
  uint64_t v47[8];
  int v48;
  char v49;
  uint64_t v50;

  v43 = a6;
  v44 = a4;
  v42 = a10;
  sub_1B1792854(0, &qword_1ED4B7D80, (void (*)(uint64_t))type metadata accessor for GraphScript);
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = (char *)&v42 - v18;
  v20 = *(_QWORD *)(a2 + 8);
  swift_retain();
  sub_1B1D15B00(v20, (uint64_t)v19);
  swift_release();
  v21 = type metadata accessor for GraphScript(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 48))(v19, 1, v21) == 1)
  {
    sub_1B1EC559C((uint64_t)v19);
    v22 = 0;
  }
  else
  {
    v22 = v19[40];
    sub_1B1A04628((uint64_t)v19, type metadata accessor for GraphScript);
  }
  LOBYTE(v47[0]) = v22;
  v23 = sub_1B22287AC();
  v47[0] = a3;
  v47[1] = v44;
  v47[2] = v23;
  v47[3] = v24;
  v47[4] = a5;
  v47[5] = v43;
  v47[6] = a7;
  v47[7] = a8;
  v48 = a9;
  v49 = 0;
  v25 = *(_QWORD *)(*a1 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (!v25)
    goto LABEL_10;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1B1DC40E0(v47);
  v27 = v26;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v27 & 1) == 0)
  {
LABEL_10:
    sub_1B1A02758(0, &qword_1ED4BAFF0, MEMORY[0x1E0DEE9B8] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v36 = swift_allocObject();
    *(_OWORD *)(v36 + 16) = xmmword_1B226D240;
    sub_1B1A02864(v42, v36 + 32);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)&v46[0] = *a1;
    *a1 = 0x8000000000000000;
    sub_1B1B89B98(v36, v47, isUniquelyReferenced_nonNull_native);
    *a1 = *(_QWORD *)&v46[0];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  sub_1B1A02864(v42, (uint64_t)v46);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v28 = swift_isUniquelyReferenced_nonNull_native();
  v50 = *a1;
  v29 = v50;
  *a1 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v31 = sub_1B1DC40E0(v47);
  v32 = v30;
  v33 = *(_QWORD *)(v29 + 16) + ((v30 & 1) == 0);
  if (*(_QWORD *)(v29 + 24) >= v33)
  {
    if ((v28 & 1) != 0)
    {
      if ((v30 & 1) != 0)
        goto LABEL_13;
    }
    else
    {
      sub_1B1EB1804();
      if ((v32 & 1) != 0)
        goto LABEL_13;
    }
LABEL_15:
    v38 = 0;
    goto LABEL_16;
  }
  sub_1B1EA134C(v33, v28);
  v34 = sub_1B1DC40E0(v47);
  if ((v32 & 1) == (v35 & 1))
  {
    v31 = v34;
    if ((v32 & 1) == 0)
      goto LABEL_15;
LABEL_13:
    v38 = *(_QWORD **)(*(_QWORD *)(v50 + 56) + 8 * v31);
LABEL_16:
    v45 = v38;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v38 = sub_1B1C67838(0, v38[2] + 1, 1, v38);
    v40 = v38[2];
    v39 = v38[3];
    if (v40 >= v39 >> 1)
      v38 = sub_1B1C67838(v39 > 1, v40 + 1, 1, v38);
    v38[2] = v40 + 1;
    sub_1B1A0DDAC(v46, &v38[4 * v40 + 4]);
    v45 = v38;
    sub_1B1C07314((uint64_t *)&v45, v32 & 1, &v50, v31, (uint64_t)v47);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *a1 = v50;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  result = sub_1B2229FC4();
  __break(1u);
  return result;
}

uint64_t sub_1B1EB7BAC(uint64_t a1)
{
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1B1EB7BD4(uint64_t a1)
{
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t vfx_script_debug_record_scalar(_OWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, unsigned int a6, uint64_t a7)
{
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _OWORD v17[4];

  v13 = a1[1];
  v17[0] = *a1;
  v17[1] = v13;
  v14 = a1[3];
  v17[2] = a1[2];
  v17[3] = v14;
  v15 = v17[0];
  swift_retain();
  sub_1B1EB7BAC((uint64_t)v17);
  sub_1B1FF29E4(*((uint64_t *)&v15 + 1), v15, (uint64_t)v17, a2, a3, a4, a5, a6, a7);
  swift_release();
  return sub_1B1EB7BD4((uint64_t)v17);
}

uint64_t vfx_script_debug_record_scalar(_:_:_:_:_:_:_:)(_OWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, unsigned int a6, uint64_t a7)
{
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  int *v17;
  uint64_t v18;
  __int16 v19;
  _OWORD v20[4];

  v13 = a1[1];
  v20[0] = *a1;
  v20[1] = v13;
  v14 = a1[3];
  v20[2] = a1[2];
  v20[3] = v14;
  swift_retain();
  if (*((_QWORD *)&v20[0] + 1) != 0xFFFFFFFFLL
    && (DWORD2(v20[0]) & 0x80000000) == 0
    && *(_QWORD *)(*(_QWORD *)&v20[0] + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8) > SDWORD2(v20[0])
    && ((v15 = *(_QWORD *)(*(_QWORD *)&v20[0] + OBJC_IVAR____TtC3VFX13EntityManager__entries), HIDWORD(v20[0]) == -1)
     || *(_DWORD *)(v15 + 12 * SDWORD2(v20[0]) + 8) == HIDWORD(v20[0])))
  {
    v17 = (int *)(v15 + 12 * SDWORD2(v20[0]));
    v18 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)&v20[0] + 136) + 8 * *v17 + 32);
    v19 = *((_WORD *)v17 + 2);
    sub_1B1EB7BAC((uint64_t)v20);
    sub_1B1FF2958(v18, v19, 16, (uint64_t)v20, a2, a3, a4, a5, a6, a7);
  }
  else
  {
    sub_1B1EB7BAC((uint64_t)v20);
  }
  swift_release();
  return sub_1B1EB7BD4((uint64_t)v20);
}

uint64_t sub_1B1EB7DE8(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, unsigned int a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  char v31;
  char v32;
  char v33;
  uint64_t v34;
  char v35;
  unint64_t v36;
  char v37;
  uint64_t v38;
  unint64_t v39;
  char v40;
  uint64_t result;
  uint64_t v42;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v44;
  unint64_t v45;
  unint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  _QWORD *v49;
  __int128 v50;
  __int128 v51;
  _OWORD v52[2];
  uint64_t v53[8];
  int v54;
  char v55;
  _QWORD v56[6];
  uint64_t v57;

  v48 = a8;
  v47 = a1;
  sub_1B1792854(0, &qword_1ED4B7D80, (void (*)(uint64_t))type metadata accessor for GraphScript);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v47 - v13;
  v15 = *(_QWORD *)(a2 + 8);
  swift_retain();
  sub_1B1D15B00(v15, (uint64_t)v14);
  swift_release();
  v16 = type metadata accessor for GraphScript(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 48))(v14, 1, v16) == 1)
  {
    sub_1B1EC559C((uint64_t)v14);
    v17 = 0;
  }
  else
  {
    v17 = v14[40];
    sub_1B1A04628((uint64_t)v14, type metadata accessor for GraphScript);
  }
  LOBYTE(v53[0]) = v17;
  v18 = sub_1B22287AC();
  v20 = v19;
  v21 = sub_1B22288A8();
  v23 = v22;
  v24 = sub_1B22288A8();
  v26 = v25;
  v27 = sub_1B22288A8();
  v53[0] = v21;
  v53[1] = v23;
  v53[2] = v18;
  v53[3] = v20;
  v53[4] = v24;
  v53[5] = v26;
  v53[6] = v27;
  v53[7] = v28;
  v54 = a6;
  v55 = 0;
  if (qword_1ED4BB388 != -1)
    swift_once();
  if (*(_QWORD *)(qword_1ED4D0F28 + 16) <= (unint64_t)a7)
  {
    v51 = 0u;
    v50 = 0u;
    goto LABEL_15;
  }
  sub_1B19FA278(qword_1ED4D0F28 + 40 * a7 + 32, (uint64_t)v56);
  sub_1B19F8C58(v56, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19FA2B4);
  v29 = sub_1B1E10A60(v56);
  sub_1B1E048E4(v48, v29, (uint64_t *)&v50);
  sub_1B19F8C58(v56, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19F9FEC);
  if (!*((_QWORD *)&v51 + 1))
  {
LABEL_15:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return sub_1B1A0DD70((uint64_t)&v50);
  }
  sub_1B1A0DDAC(&v50, v52);
  v30 = v47;
  if (!*(_QWORD *)(*v47 + 16))
    goto LABEL_16;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1B1DC40E0(v53);
  v32 = v31;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v32 & 1) == 0)
  {
LABEL_16:
    sub_1B1A02758(0, &qword_1ED4BAFF0, MEMORY[0x1E0DEE9B8] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v42 = swift_allocObject();
    *(_OWORD *)(v42 + 16) = xmmword_1B226D240;
    sub_1B1A02864((uint64_t)v52, v42 + 32);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)&v50 = *v30;
    *v30 = 0x8000000000000000;
    sub_1B1B89B98(v42, v53, isUniquelyReferenced_nonNull_native);
    *v30 = v50;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_27:
    swift_bridgeObjectRelease();
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v52);
  }
  sub_1B1A02864((uint64_t)v52, (uint64_t)&v50);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v33 = swift_isUniquelyReferenced_nonNull_native();
  v57 = *v30;
  v34 = v57;
  *v30 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v36 = sub_1B1DC40E0(v53);
  v37 = v35;
  v38 = *(_QWORD *)(v34 + 16) + ((v35 & 1) == 0);
  if (*(_QWORD *)(v34 + 24) >= v38)
  {
    if ((v33 & 1) != 0)
    {
      if ((v35 & 1) != 0)
        goto LABEL_19;
    }
    else
    {
      sub_1B1EB1804();
      if ((v37 & 1) != 0)
        goto LABEL_19;
    }
LABEL_21:
    v44 = 0;
    goto LABEL_22;
  }
  sub_1B1EA134C(v38, v33);
  v39 = sub_1B1DC40E0(v53);
  if ((v37 & 1) == (v40 & 1))
  {
    v36 = v39;
    if ((v37 & 1) == 0)
      goto LABEL_21;
LABEL_19:
    v44 = *(_QWORD **)(*(_QWORD *)(v57 + 56) + 8 * v36);
LABEL_22:
    v49 = v44;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v44 = sub_1B1C67838(0, v44[2] + 1, 1, v44);
    v46 = v44[2];
    v45 = v44[3];
    if (v46 >= v45 >> 1)
      v44 = sub_1B1C67838(v45 > 1, v46 + 1, 1, v44);
    v44[2] = v46 + 1;
    sub_1B1A0DDAC(&v50, &v44[4 * v46 + 4]);
    v49 = v44;
    sub_1B1C07314((uint64_t *)&v49, v37 & 1, &v57, v36, (uint64_t)v53);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *v47 = v57;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_27;
  }
  result = sub_1B2229FC4();
  __break(1u);
  return result;
}

uint64_t vfx_script_debug_record_array(_OWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, unsigned int a6, uint64_t a7)
{
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _OWORD v17[4];

  v13 = a1[1];
  v17[0] = *a1;
  v17[1] = v13;
  v14 = a1[3];
  v17[2] = a1[2];
  v17[3] = v14;
  v15 = v17[0];
  swift_retain();
  sub_1B1EB7BAC((uint64_t)v17);
  sub_1B1FF2B40(*((uint64_t *)&v15 + 1), v15, (uint64_t)v17, a2, a3, a4, a5, a6, a7);
  swift_release();
  return sub_1B1EB7BD4((uint64_t)v17);
}

uint64_t vfx_script_debug_record_array(_:_:_:_:_:_:_:_:)(_OWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, unsigned int a6, uint64_t a7)
{
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  int *v17;
  uint64_t v18;
  __int16 v19;
  _OWORD v20[4];

  v13 = a1[1];
  v20[0] = *a1;
  v20[1] = v13;
  v14 = a1[3];
  v20[2] = a1[2];
  v20[3] = v14;
  swift_retain();
  if (*((_QWORD *)&v20[0] + 1) != 0xFFFFFFFFLL
    && (DWORD2(v20[0]) & 0x80000000) == 0
    && *(_QWORD *)(*(_QWORD *)&v20[0] + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8) > SDWORD2(v20[0])
    && ((v15 = *(_QWORD *)(*(_QWORD *)&v20[0] + OBJC_IVAR____TtC3VFX13EntityManager__entries), HIDWORD(v20[0]) == -1)
     || *(_DWORD *)(v15 + 12 * SDWORD2(v20[0]) + 8) == HIDWORD(v20[0])))
  {
    v17 = (int *)(v15 + 12 * SDWORD2(v20[0]));
    v18 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)&v20[0] + 136) + 8 * *v17 + 32);
    v19 = *((_WORD *)v17 + 2);
    sub_1B1EB7BAC((uint64_t)v20);
    sub_1B1FF2AA8(v18, v19, 16, (uint64_t)v20, a2, a3, a4, a5, a6, a7);
  }
  else
  {
    sub_1B1EB7BAC((uint64_t)v20);
  }
  swift_release();
  return sub_1B1EB7BD4((uint64_t)v20);
}

uint64_t sub_1B1EB857C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, unsigned int a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  char v30;
  char v31;
  char v32;
  uint64_t v33;
  char v34;
  unint64_t v35;
  char v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  uint64_t result;
  uint64_t v41;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v43;
  unint64_t v44;
  unint64_t v45;
  _QWORD v46[3];
  _QWORD *v47;
  __int128 v48;
  __int128 v49;
  _OWORD v50[2];
  uint64_t v51[5];
  uint64_t v52[8];
  int v53;
  char v54;
  _QWORD v55[6];
  uint64_t v56;

  v46[1] = a8;
  v46[0] = a1;
  sub_1B1792854(0, &qword_1ED4B7D80, (void (*)(uint64_t))type metadata accessor for GraphScript);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)v46 - v13;
  v15 = *(_QWORD *)(a2 + 8);
  swift_retain();
  sub_1B1D15B00(v15, (uint64_t)v14);
  swift_release();
  v16 = type metadata accessor for GraphScript(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 48))(v14, 1, v16) == 1)
  {
    sub_1B1EC559C((uint64_t)v14);
    v17 = 0;
  }
  else
  {
    v17 = v14[40];
    sub_1B1A04628((uint64_t)v14, type metadata accessor for GraphScript);
  }
  LOBYTE(v52[0]) = v17;
  v18 = sub_1B22287AC();
  v20 = v19;
  v21 = sub_1B22288A8();
  v23 = v22;
  v24 = sub_1B22288A8();
  v26 = v25;
  v27 = sub_1B22288A8();
  v52[0] = v21;
  v52[1] = v23;
  v52[2] = v18;
  v52[3] = v20;
  v52[4] = v24;
  v52[5] = v26;
  v52[6] = v27;
  v52[7] = v28;
  v53 = a6;
  v54 = 0;
  if (qword_1ED4BB388 != -1)
    swift_once();
  if (*(_QWORD *)(qword_1ED4D0F28 + 16) <= (unint64_t)a7)
  {
    v49 = 0u;
    v48 = 0u;
    goto LABEL_15;
  }
  sub_1B19FA278(qword_1ED4D0F28 + 40 * a7 + 32, (uint64_t)v55);
  sub_1B19F8C58(v55, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19FA2B4);
  sub_1B1E03A80(v51);
  sub_1B1E10A60(v51);
  sub_1B19F8C58(v51, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19F9FEC);
  sub_1B1E04920((uint64_t *)&v48);
  sub_1B19F8C58(v55, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19F9FEC);
  if (!*((_QWORD *)&v49 + 1))
  {
LABEL_15:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return sub_1B1A0DD70((uint64_t)&v48);
  }
  sub_1B1A0DDAC(&v48, v50);
  v29 = (_QWORD *)v46[0];
  if (!*(_QWORD *)(*(_QWORD *)v46[0] + 16))
    goto LABEL_16;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1B1DC40E0(v52);
  v31 = v30;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v31 & 1) == 0)
  {
LABEL_16:
    sub_1B1A02758(0, &qword_1ED4BAFF0, MEMORY[0x1E0DEE9B8] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v41 = swift_allocObject();
    *(_OWORD *)(v41 + 16) = xmmword_1B226D240;
    sub_1B1A02864((uint64_t)v50, v41 + 32);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)&v48 = *v29;
    *v29 = 0x8000000000000000;
    sub_1B1B89B98(v41, v52, isUniquelyReferenced_nonNull_native);
    *v29 = v48;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_27:
    swift_bridgeObjectRelease();
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v50);
  }
  sub_1B1A02864((uint64_t)v50, (uint64_t)&v48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v32 = swift_isUniquelyReferenced_nonNull_native();
  v56 = *v29;
  v33 = v56;
  *v29 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v35 = sub_1B1DC40E0(v52);
  v36 = v34;
  v37 = *(_QWORD *)(v33 + 16) + ((v34 & 1) == 0);
  if (*(_QWORD *)(v33 + 24) >= v37)
  {
    if ((v32 & 1) != 0)
    {
      if ((v34 & 1) != 0)
        goto LABEL_19;
    }
    else
    {
      sub_1B1EB1804();
      if ((v36 & 1) != 0)
        goto LABEL_19;
    }
LABEL_21:
    v43 = 0;
    goto LABEL_22;
  }
  sub_1B1EA134C(v37, v32);
  v38 = sub_1B1DC40E0(v52);
  if ((v36 & 1) == (v39 & 1))
  {
    v35 = v38;
    if ((v36 & 1) == 0)
      goto LABEL_21;
LABEL_19:
    v43 = *(_QWORD **)(*(_QWORD *)(v56 + 56) + 8 * v35);
LABEL_22:
    v47 = v43;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v43 = sub_1B1C67838(0, v43[2] + 1, 1, v43);
    v45 = v43[2];
    v44 = v43[3];
    if (v45 >= v44 >> 1)
      v43 = sub_1B1C67838(v44 > 1, v45 + 1, 1, v43);
    v43[2] = v45 + 1;
    sub_1B1A0DDAC(&v48, &v43[4 * v45 + 4]);
    v47 = v43;
    sub_1B1C07314((uint64_t *)&v47, v36 & 1, &v56, v35, (uint64_t)v52);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(_QWORD *)v46[0] = v56;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_27;
  }
  result = sub_1B2229FC4();
  __break(1u);
  return result;
}

uint64_t vfx_script_debug_log(_:_:_:_:)(_OWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12;

  v12 = HIBYTE(a5) & 0xF;
  if ((a5 & 0x2000000000000000) == 0)
    v12 = a4 & 0xFFFFFFFFFFFFLL;
  if (v12)
  {
    swift_bridgeObjectRetain();
    sub_1B2228890();
    sub_1B2228890();
    a6 = a4;
    a7 = a5;
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  vfx_script_debug_log(_:_:_:)(a1, a2, a3, a6, a7);
  return swift_bridgeObjectRelease();
}

uint64_t vfx_script_debug_log(_:_:_:)(_OWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _OWORD v27[4];

  sub_1B1792854(0, &qword_1ED4B7D80, (void (*)(uint64_t))type metadata accessor for GraphScript);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v24 - v12;
  v14 = a1[1];
  v27[0] = *a1;
  v27[1] = v14;
  v15 = a1[3];
  v27[2] = a1[2];
  v27[3] = v15;
  v16 = v27[0];
  swift_retain();
  if (sub_1B1FD568C((uint64_t)&type metadata for GraphDebuggingComponent, (uint64_t)&off_1E63AA7B0, *((uint64_t *)&v16 + 1)))
  {
    sub_1B1EB7BAC((uint64_t)v27);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1B1FF2C0C(*((unint64_t *)&v16 + 1), v16, (uint64_t)v27, a2, a3, a4, a5);
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return sub_1B1EB7BD4((uint64_t)v27);
  }
  else if ((*(_BYTE *)(v16 + 48) & 1) != 0)
  {
    return swift_release();
  }
  else
  {
    swift_retain();
    sub_1B1D15B00(*((unint64_t *)&v16 + 1), (uint64_t)v13);
    swift_release();
    v18 = type metadata accessor for GraphScript(0);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 48))(v13, 1, v18) == 1)
    {
      sub_1B1EC559C((uint64_t)v13);
      v19 = 0;
    }
    else
    {
      v19 = v13[40];
      sub_1B1A04628((uint64_t)v13, type metadata accessor for GraphScript);
    }
    LOBYTE(v25) = v19;
    sub_1B22287AC();
    v25 = a2;
    v26 = a3;
    swift_bridgeObjectRetain();
    sub_1B2228890();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    v20 = *(_QWORD *)(v16 + OBJC_IVAR____TtC3VFX13EntityManager_logger);
    swift_retain();
    sub_1B2228890();
    sub_1B2228890();
    v21 = v25;
    v22 = v26;
    v23 = sub_1B2228EA8();
    v25 = 0;
    (*(void (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(*(_QWORD *)v20 + 88))(v23, &v25, v21, v22);
    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_1B1EB8E78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_1B1EB913C(a1, a2, a3, a4, a5, a6);
}

uint64_t vfx_script_debug_log(_:_:_:)(_OWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _OWORD v27[4];

  sub_1B1792854(0, &qword_1ED4B7D80, (void (*)(uint64_t))type metadata accessor for GraphScript);
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)&v24 - v4;
  v6 = sub_1B22288A8();
  v8 = v7;
  v9 = sub_1B22288A8();
  v11 = v10;
  v12 = a1[1];
  v27[0] = *a1;
  v27[1] = v12;
  v13 = a1[3];
  v27[2] = a1[2];
  v27[3] = v13;
  v14 = v27[0];
  swift_retain();
  if (sub_1B1FD568C((uint64_t)&type metadata for GraphDebuggingComponent, (uint64_t)&off_1E63AA7B0, *((uint64_t *)&v14 + 1)))
  {
    sub_1B1EB7BAC((uint64_t)v27);
    swift_bridgeObjectRetain();
    sub_1B1FF2C0C(*((unint64_t *)&v14 + 1), v14, (uint64_t)v27, v6, v8, v9, v11);
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease_n();
    return sub_1B1EB7BD4((uint64_t)v27);
  }
  if ((*(_BYTE *)(v14 + 48) & 1) != 0)
  {
    sub_1B1EB7BAC((uint64_t)v27);
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return sub_1B1EB7BD4((uint64_t)v27);
  }
  swift_retain();
  sub_1B1D15B00(*((unint64_t *)&v14 + 1), (uint64_t)v5);
  sub_1B1EB7BAC((uint64_t)v27);
  swift_release();
  v16 = type metadata accessor for GraphScript(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 48))(v5, 1, v16) == 1)
  {
    sub_1B1EC559C((uint64_t)v5);
    v17 = 0;
  }
  else
  {
    v17 = v5[40];
    sub_1B1A04628((uint64_t)v5, type metadata accessor for GraphScript);
  }
  LOBYTE(v25) = v17;
  sub_1B22287AC();
  v25 = v6;
  v26 = v8;
  sub_1B2228890();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  v18 = v25;
  v19 = v26;
  v20 = *(_QWORD *)(v14 + OBJC_IVAR____TtC3VFX13EntityManager_logger);
  swift_retain();
  v25 = v18;
  v26 = v19;
  sub_1B2228890();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  v21 = v25;
  v22 = v26;
  v23 = sub_1B2228EA8();
  v25 = 0;
  (*(void (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(*(_QWORD *)v20 + 88))(v23, &v25, v21, v22);
  swift_release();
  swift_bridgeObjectRelease();
  sub_1B1EB7BD4((uint64_t)v27);
  return swift_release();
}

uint64_t sub_1B1EB913C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char v25;
  char v26;
  uint64_t v27;
  char v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  uint64_t v34;
  char isUniquelyReferenced_nonNull_native;
  uint64_t result;
  _QWORD *v37;
  char v38;
  unint64_t v39;
  unint64_t v40;
  _QWORD *v41;
  _QWORD v42[2];
  _QWORD *v43;
  uint64_t v44[4];
  __int128 v45;
  __int128 v46;
  int v47;
  char v48;
  uint64_t v49;

  v7 = v6;
  sub_1B1792854(0, &qword_1ED4B7D80, (void (*)(uint64_t))type metadata accessor for GraphScript);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)v42 - v16;
  v18 = *(_QWORD *)(a2 + 8);
  swift_retain();
  sub_1B1D15B00(v18, (uint64_t)v17);
  swift_release();
  v19 = type metadata accessor for GraphScript(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 48))(v17, 1, v19) == 1)
  {
    sub_1B1EC559C((uint64_t)v17);
    v20 = 0;
  }
  else
  {
    v20 = v17[40];
    sub_1B1A04628((uint64_t)v17, type metadata accessor for GraphScript);
  }
  LOBYTE(v44[0]) = v20;
  v21 = sub_1B22287AC();
  v44[0] = a3;
  v44[1] = a4;
  v44[2] = v21;
  v44[3] = v22;
  v45 = 0u;
  v46 = 0u;
  v47 = 0;
  v48 = 1;
  v23 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 16);
  swift_bridgeObjectRetain();
  if (!v23
    || (swift_bridgeObjectRetain(),
        swift_bridgeObjectRetain(),
        sub_1B1DC40E0(v44),
        v25 = v24,
        swift_bridgeObjectRelease_n(),
        swift_bridgeObjectRelease(),
        swift_bridgeObjectRelease(),
        (v25 & 1) == 0))
  {
    sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAE70, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v34 = swift_allocObject();
    *(_OWORD *)(v34 + 16) = xmmword_1B226D240;
    *(_QWORD *)(v34 + 32) = a5;
    *(_QWORD *)(v34 + 40) = a6;
    swift_bridgeObjectRetain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v49 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0x8000000000000000;
    sub_1B1B89BB4(v34, v44, isUniquelyReferenced_nonNull_native);
    *(_QWORD *)(a1 + 8) = v49;
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  v42[0] = a5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v26 = swift_isUniquelyReferenced_nonNull_native();
  v49 = *(_QWORD *)(a1 + 8);
  v27 = v49;
  *(_QWORD *)(a1 + 8) = 0x8000000000000000;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v29 = sub_1B1DC40E0(v44);
  v30 = v28;
  v31 = *(_QWORD *)(v27 + 16) + ((v28 & 1) == 0);
  if (*(_QWORD *)(v27 + 24) >= v31)
  {
    if ((v26 & 1) != 0)
    {
      if ((v28 & 1) != 0)
        goto LABEL_13;
    }
    else
    {
      sub_1B1EB1824();
      if ((v30 & 1) != 0)
        goto LABEL_13;
    }
LABEL_15:
    v37 = 0;
    goto LABEL_16;
  }
  sub_1B1EA136C(v31, v26);
  v32 = sub_1B1DC40E0(v44);
  if ((v30 & 1) != (v33 & 1))
  {
    result = sub_1B2229FC4();
    __break(1u);
    return result;
  }
  v29 = v32;
  if ((v30 & 1) == 0)
    goto LABEL_15;
LABEL_13:
  v37 = *(_QWORD **)(*(_QWORD *)(v49 + 56) + 8 * v29);
LABEL_16:
  v38 = swift_isUniquelyReferenced_nonNull_native();
  v42[1] = v7;
  if ((v38 & 1) == 0)
    v37 = sub_1B1C63044(0, v37[2] + 1, 1, v37);
  v40 = v37[2];
  v39 = v37[3];
  if (v40 >= v39 >> 1)
    v37 = sub_1B1C63044(v39 > 1, v40 + 1, 1, v37);
  v37[2] = v40 + 1;
  v41 = &v37[2 * v40];
  v41[4] = v42[0];
  v41[5] = a6;
  v43 = v37;
  sub_1B1C07314((uint64_t *)&v43, v30 & 1, &v49, v29, (uint64_t)v44);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 8) = v49;
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t vfx_script_debug_log_value(_:_:_:_:_:)(_OWORD *a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v24;
  unint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  _OWORD v34[2];
  _OWORD v35[4];
  _QWORD v36[5];

  sub_1B1792854(0, &qword_1ED4B7D80, (void (*)(uint64_t))type metadata accessor for GraphScript);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v31 - v10;
  v12 = sub_1B22288A8();
  v14 = v13;
  v15 = sub_1B22288A8();
  v17 = v16;
  v18 = a1[1];
  v35[0] = *a1;
  v35[1] = v18;
  v19 = a1[3];
  v35[2] = a1[2];
  v35[3] = v19;
  v20 = *(_QWORD *)&v35[0];
  swift_retain();
  sub_1B1EB7BAC((uint64_t)v35);
  if (qword_1ED4BB388 != -1)
    swift_once();
  if (*(_QWORD *)(qword_1ED4D0F28 + 16) <= (unint64_t)a4)
  {
    v32 = 0u;
    v33 = 0u;
    goto LABEL_10;
  }
  sub_1B19FA278(qword_1ED4D0F28 + 40 * a4 + 32, (uint64_t)v36);
  sub_1B19F8C58(v36, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19FA2B4);
  v21 = sub_1B1E10A60(v36);
  sub_1B1E048E4(a5, v21, (uint64_t *)&v32);
  sub_1B19F8C58(v36, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19F9FEC);
  if (!*((_QWORD *)&v33 + 1))
  {
LABEL_10:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    sub_1B1EB7BD4((uint64_t)v35);
    return sub_1B1A0DD70((uint64_t)&v32);
  }
  sub_1B1A0DDAC(&v32, v34);
  v22 = HIBYTE(v17) & 0xF;
  if ((v17 & 0x2000000000000000) == 0)
    v22 = v15 & 0xFFFFFFFFFFFFLL;
  if (v22)
  {
    *(_QWORD *)&v32 = 0;
    *((_QWORD *)&v32 + 1) = 0xE000000000000000;
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
  }
  else
  {
    swift_bridgeObjectRelease();
    *(_QWORD *)&v32 = 0;
    *((_QWORD *)&v32 + 1) = 0xE000000000000000;
  }
  sub_1B22295EC();
  v24 = v32;
  v25 = *((_QWORD *)&v35[0] + 1);
  if (sub_1B1FD568C((uint64_t)&type metadata for GraphDebuggingComponent, (uint64_t)&off_1E63AA7B0, *((uint64_t *)&v35[0] + 1)))
  {
    sub_1B1EB7BAC((uint64_t)v35);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1B1FF2C0C(v25, v20, (uint64_t)v35, v12, v14, v24, *((uint64_t *)&v24 + 1));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1B1EB7BD4((uint64_t)v35);
    swift_release();
    swift_bridgeObjectRelease();
    sub_1B1EB7BD4((uint64_t)v35);
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v34);
    return swift_bridgeObjectRelease();
  }
  else if ((*(_BYTE *)(v20 + 48) & 1) != 0)
  {
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v34);
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return sub_1B1EB7BD4((uint64_t)v35);
  }
  else
  {
    swift_retain();
    sub_1B1D15B00(v25, (uint64_t)v11);
    swift_release();
    v26 = type metadata accessor for GraphScript(0);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 48))(v11, 1, v26) == 1)
    {
      sub_1B1EC559C((uint64_t)v11);
      v27 = 0;
    }
    else
    {
      v27 = v11[40];
      sub_1B1A04628((uint64_t)v11, type metadata accessor for GraphScript);
    }
    LOBYTE(v32) = v27;
    sub_1B22287AC();
    v28 = *(_QWORD *)(v20 + OBJC_IVAR____TtC3VFX13EntityManager_logger);
    swift_retain();
    *(_QWORD *)&v32 = v12;
    *((_QWORD *)&v32 + 1) = v14;
    sub_1B2228890();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    v29 = v32;
    v30 = sub_1B2228EA8();
    *(_QWORD *)&v32 = 0;
    (*(void (**)(uint64_t, __int128 *, _QWORD, _QWORD))(*(_QWORD *)v28 + 88))(v30, &v32, v29, *((_QWORD *)&v29 + 1));
    swift_release();
    swift_bridgeObjectRelease();
    sub_1B1EB7BD4((uint64_t)v35);
    swift_release();
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v34);
  }
}

uint64_t sub_1B1EB998C(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *i;

  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(v4 + 16);
  if (!v5)
    return 0;
  for (i = (_QWORD *)(v4 + 56); (ValueMetadata *)*(i - 3) != &type metadata for Children; i += 5)
  {
    if (!--v5)
      return 0;
  }
  a4(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
  return 1;
}

uint64_t sub_1B1EB99FC(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *i;

  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(v4 + 16);
  if (!v5)
    return 0;
  for (i = (_QWORD *)(v4 + 56); (ValueMetadata *)*(i - 3) != &type metadata for TextureGPURuntime; i += 5)
  {
    if (!--v5)
      return 0;
  }
  a4(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
  return 1;
}

uint64_t sub_1B1EB9A6C(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(id *), uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *i;
  id v13;
  uint64_t v14;
  id v15;
  id v17;

  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(_QWORD *)(v8 + 16);
  if (v9)
  {
    for (i = (_QWORD *)(v8 + 56); (ValueMetadata *)*(i - 3) != &type metadata for TextureCGImage; i += 5)
    {
      if (!--v9)
        return v9 & 1;
    }
    v17 = *(id *)(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
    v13 = v17;
    a4(&v17);
    if (v7)
    {

    }
    else
    {
      v14 = sub_1B1DA61CC(a7) << 16 >> 48;
      v15 = v17;
      swift_retain();
      sub_1B1FDE0D0(v14, v15);
      swift_release();

      LOBYTE(v9) = 1;
    }
  }
  return v9 & 1;
}

uint64_t sub_1B1EB9B80(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *i;

  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(v4 + 16);
  if (!v5)
    return 0;
  for (i = (_QWORD *)(v4 + 56); (ValueMetadata *)*(i - 3) != &type metadata for EmitterRuntime; i += 5)
  {
    if (!--v5)
      return 0;
  }
  a4(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
  return 1;
}

uint64_t sub_1B1EB9BF0(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *i;

  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(v4 + 16);
  if (!v5)
    return 0;
  for (i = (_QWORD *)(v4 + 56); (ValueMetadata *)*(i - 3) != &type metadata for Bindings; i += 5)
  {
    if (!--v5)
      return 0;
  }
  a4(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
  return 1;
}

uint64_t sub_1B1EB9C60(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *i;

  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(v4 + 16);
  if (!v5)
    return 0;
  for (i = (_QWORD *)(v4 + 56); (ValueMetadata *)*(i - 3) != &type metadata for WorldTransform; i += 5)
  {
    if (!--v5)
      return 0;
  }
  a4(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
  return 1;
}

uint64_t sub_1B1EB9CD0(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *i;

  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(v4 + 16);
  if (!v5)
    return 0;
  for (i = (_QWORD *)(v4 + 56); (ValueMetadata *)*(i - 3) != &type metadata for InverseWorldTransform; i += 5)
  {
    if (!--v5)
      return 0;
  }
  a4(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
  return 1;
}

uint64_t sub_1B1EB9D40(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *i;

  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(v4 + 16);
  if (!v5)
    return 0;
  for (i = (_QWORD *)(v4 + 56); (ValueMetadata *)*(i - 3) != &type metadata for DirectionalLight; i += 5)
  {
    if (!--v5)
      return 0;
  }
  a4(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
  return 1;
}

uint64_t sub_1B1EB9DB0(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *i;

  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(v4 + 16);
  if (!v5)
    return 0;
  for (i = (_QWORD *)(v4 + 56); (ValueMetadata *)*(i - 3) != &type metadata for PointLight; i += 5)
  {
    if (!--v5)
      return 0;
  }
  a4(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
  return 1;
}

uint64_t sub_1B1EB9E20(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *i;

  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(v4 + 16);
  if (!v5)
    return 0;
  for (i = (_QWORD *)(v4 + 56); (ValueMetadata *)*(i - 3) != &type metadata for AmbientLight; i += 5)
  {
    if (!--v5)
      return 0;
  }
  a4(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
  return 1;
}

uint64_t sub_1B1EB9E90(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *i;

  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(v4 + 16);
  if (!v5)
    return 0;
  for (i = (_QWORD *)(v4 + 56); (ValueMetadata *)*(i - 3) != &type metadata for SpotLight; i += 5)
  {
    if (!--v5)
      return 0;
  }
  a4(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
  return 1;
}

uint64_t sub_1B1EB9F00(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *i;

  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(v4 + 16);
  if (!v5)
    return 0;
  for (i = (_QWORD *)(v4 + 56); (ValueMetadata *)*(i - 3) != &type metadata for IBLGenerator; i += 5)
  {
    if (!--v5)
      return 0;
  }
  a4(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
  return 1;
}

uint64_t sub_1B1EB9F70(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *i;

  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(v4 + 16);
  if (!v5)
    return 0;
  for (i = (_QWORD *)(v4 + 56); (ValueMetadata *)*(i - 3) != &type metadata for Shadow; i += 5)
  {
    if (!--v5)
      return 0;
  }
  a4(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
  return 1;
}

uint64_t sub_1B1EB9FE0(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(__int128 *), uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *i;
  __int128 *v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  __int16 v16;
  uint64_t v17;
  __int128 v19;
  __int128 v20;
  _BYTE v21[26];
  _OWORD v22[2];
  _OWORD v23[2];

  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(_QWORD *)(v8 + 16);
  if (v9)
  {
    for (i = (_QWORD *)(v8 + 56); (ValueMetadata *)*(i - 3) != &type metadata for TextureLoadingOptions; i += 5)
    {
      if (!--v9)
        return v9 & 1;
    }
    v12 = (__int128 *)(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
    v13 = *((_QWORD *)v12 + 2);
    v14 = *((_BYTE *)v12 + 24);
    v15 = *((_QWORD *)v12 + 6);
    v16 = *((_WORD *)v12 + 28);
    v19 = *v12;
    *(_QWORD *)&v20 = v13;
    BYTE8(v20) = v14;
    *(_OWORD *)v21 = v12[2];
    *(_QWORD *)&v21[16] = v15;
    *(_WORD *)&v21[24] = v16;
    a4(&v19);
    if (!v7)
    {
      v17 = sub_1B1DA61CC(a7) << 16 >> 48;
      v22[0] = v19;
      v22[1] = v20;
      v23[0] = *(_OWORD *)v21;
      *(_OWORD *)((char *)v23 + 10) = *(_OWORD *)&v21[10];
      swift_retain();
      sub_1B1FD97BC(v17, (uint64_t)v22);
      swift_release();
      LOBYTE(v9) = 1;
    }
  }
  return v9 & 1;
}

uint64_t sub_1B1EBA120(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *i;

  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(v4 + 16);
  if (!v5)
    return 0;
  for (i = (_QWORD *)(v4 + 56); (ValueMetadata *)*(i - 3) != &type metadata for ScriptsHolder; i += 5)
  {
    if (!--v5)
      return 0;
  }
  a4(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
  return 1;
}

uint64_t sub_1B1EBA190(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(char *), uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1B1EBA250(a1, a2, a3, a4, a5, a6, a7, type metadata accessor for TriggerScript, (void (*)(uint64_t, char *, uint64_t))sub_1B1FDDFB0) & 1;
}

uint64_t sub_1B1EBA1F0(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(char *), uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1B1EBA250(a1, a2, a3, a4, a5, a6, a7, type metadata accessor for GraphScript, (void (*)(uint64_t, char *, uint64_t))sub_1B1FDDFC4) & 1;
}

uint64_t sub_1B1EBA250(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(char *), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t (*a8)(_QWORD), void (*a9)(uint64_t, char *, uint64_t))
{
  uint64_t v9;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *i;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  void (*v28)(uint64_t, char *, uint64_t);
  uint64_t v29;
  uint64_t v30;

  v29 = a7;
  v30 = *MEMORY[0x1E0C80C00];
  v16 = a8(0);
  MEMORY[0x1E0C80A78](v16, v17);
  v20 = (char *)&v27 - v19;
  v21 = *(_QWORD *)(a1 + 48);
  v22 = *(_QWORD *)(v21 + 16);
  if (v22)
  {
    for (i = (_QWORD *)(v21 + 56); *(i - 3) != v18; i += 5)
    {
      if (!--v22)
        return v22 & 1;
    }
    v28 = a9;
    sub_1B1792810(*(_QWORD *)(a1 + 128) + *i + a2 * a3, (uint64_t)v20, a8);
    a4(v20);
    if (v9)
    {
      sub_1B1A04628((uint64_t)v20, a8);
    }
    else
    {
      v24 = sub_1B1DA61CC(v29) << 16 >> 48;
      v25 = **(_QWORD **)(a6 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues);
      swift_retain();
      v28(v24, v20, v25);
      swift_release();
      sub_1B1A04628((uint64_t)v20, a8);
      LOBYTE(v22) = 1;
    }
  }
  return v22 & 1;
}

uint64_t sub_1B1EBA3F8(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(char *), uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1B1EBA250(a1, a2, a3, a4, a5, a6, a7, type metadata accessor for ParticleUpdateScript, (void (*)(uint64_t, char *, uint64_t))sub_1B1FDC390) & 1;
}

uint64_t sub_1B1EBA458(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(char *), uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1B1EBA250(a1, a2, a3, a4, a5, a6, a7, type metadata accessor for ParticleInitScript, (void (*)(uint64_t, char *, uint64_t))sub_1B1FDB410) & 1;
}

uint64_t sub_1B1EBA4B8(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *i;

  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(v4 + 16);
  if (!v5)
    return 0;
  for (i = (_QWORD *)(v4 + 56); (ValueMetadata *)*(i - 3) != &type metadata for ForceField; i += 5)
  {
    if (!--v5)
      return 0;
  }
  a4(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
  return 1;
}

uint64_t sub_1B1EBA528(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *i;

  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(v4 + 16);
  if (!v5)
    return 0;
  for (i = (_QWORD *)(v4 + 56); (ValueMetadata *)*(i - 3) != &type metadata for ParticleFluidSolver2DSolver; i += 5)
  {
    if (!--v5)
      return 0;
  }
  a4(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
  return 1;
}

uint64_t sub_1B1EBA598(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *i;

  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(v4 + 16);
  if (!v5)
    return 0;
  for (i = (_QWORD *)(v4 + 56); (ValueMetadata *)*(i - 3) != &type metadata for GraphScriptingConfig; i += 5)
  {
    if (!--v5)
      return 0;
  }
  a4(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
  return 1;
}

uint64_t sub_1B1EBA608(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *i;

  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(v4 + 16);
  if (!v5)
    return 0;
  for (i = (_QWORD *)(v4 + 56); (ValueMetadata *)*(i - 3) != &type metadata for PropagateDirtiness; i += 5)
  {
    if (!--v5)
      return 0;
  }
  a4(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
  return 1;
}

uint64_t sub_1B1EBA678(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *i;

  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(v4 + 16);
  if (!v5)
    return 0;
  for (i = (_QWORD *)(v4 + 56); (ValueMetadata *)*(i - 3) != &type metadata for VFXTag; i += 5)
  {
    if (!--v5)
      return 0;
  }
  a4(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
  return 1;
}

uint64_t sub_1B1EBA6E8(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(__int128 *), uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *i;
  uint64_t v14;
  uint64_t v15;
  int v16;
  char v17;
  int v18;
  char v19;
  char v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v27;
  _BYTE v28[32];
  __int128 v29;
  _BYTE v30[32];
  uint64_t v31;
  _OWORD v32[6];
  uint64_t v33;

  v8 = v7;
  v9 = *(_QWORD *)(a1 + 48);
  v10 = *(_QWORD *)(v9 + 16);
  if (v10)
  {
    for (i = (_QWORD *)(v9 + 56); (ValueMetadata *)*(i - 3) != &type metadata for Material; i += 5)
    {
      if (!--v10)
        return v10 & 1;
    }
    v14 = *(_QWORD *)(a1 + 128) + *i + a2 * a3;
    v15 = *(_QWORD *)(v14 + 8);
    v16 = *(_DWORD *)(v14 + 40);
    v17 = *(_BYTE *)(v14 + 44);
    v18 = *(_DWORD *)(v14 + 48);
    v19 = *(_BYTE *)(v14 + 52);
    v20 = *(_BYTE *)(v14 + 53);
    v21 = *(_QWORD *)(v14 + 56);
    v22 = *(_BYTE *)(v14 + 64);
    v23 = *(_QWORD *)(v14 + 88);
    v24 = *(_QWORD *)(v14 + 96);
    LOBYTE(v27) = *(_BYTE *)v14;
    *((_QWORD *)&v27 + 1) = v15;
    *(_QWORD *)v28 = *(_QWORD *)(v14 + 16);
    *(_OWORD *)&v28[8] = *(_OWORD *)(v14 + 24);
    *(_DWORD *)&v28[24] = v16;
    v28[28] = v17;
    LODWORD(v29) = v18;
    BYTE4(v29) = v19;
    BYTE5(v29) = v20;
    *((_QWORD *)&v29 + 1) = v21;
    v30[0] = v22;
    *(_OWORD *)&v30[8] = *(_OWORD *)(v14 + 72);
    *(_QWORD *)&v30[24] = v23;
    v31 = v24;
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    a4(&v27);
    if (v8)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_unknownObjectRelease();
    }
    else
    {
      v25 = sub_1B1DA61CC(a7) << 16 >> 48;
      v32[4] = *(_OWORD *)v30;
      v32[5] = *(_OWORD *)&v30[16];
      v33 = v31;
      v32[0] = v27;
      v32[1] = *(_OWORD *)v28;
      v32[2] = *(_OWORD *)&v28[16];
      v32[3] = v29;
      swift_retain();
      sub_1B1FDDC1C(v25, (uint64_t)v32);
      swift_release();
      sub_1B1D341B0((uint64_t)v32);
      LOBYTE(v10) = 1;
    }
  }
  return v10 & 1;
}

uint64_t sub_1B1EBA8E4(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(uint64_t), uint64_t a5)
{
  return sub_1B1EBA974(a1, a2, a3, a4, a5, &qword_1ED4BB3C0, type metadata accessor for TriggerScript, (uint64_t)&off_1ED4BEFD8) & 1;
}

uint64_t sub_1B1EBA914(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(uint64_t), uint64_t a5)
{
  return sub_1B1EBAA60(a1, a2, a3, a4, a5, &qword_1ED4BB250, type metadata accessor for TriggerScript, (uint64_t)&off_1ED4BEFD8) & 1;
}

uint64_t sub_1B1EBA944(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(uint64_t), uint64_t a5)
{
  return sub_1B1EBA974(a1, a2, a3, a4, a5, (unint64_t *)&unk_1ED4B9910, type metadata accessor for ParticleUpdateScript, (uint64_t)&off_1ED4BD280) & 1;
}

uint64_t sub_1B1EBA974(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(uint64_t), uint64_t a5, unint64_t *a6, uint64_t (*a7)(uint64_t), uint64_t a8)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *i;

  v12 = *(_QWORD *)(a1 + 48);
  sub_1B1A1B6FC(0, a6, a7, a8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptStateRestoration);
  v14 = *(_QWORD *)(v12 + 16);
  if (!v14)
    return 0;
  for (i = (_QWORD *)(v12 + 56); *(i - 3) != v13; i += 5)
  {
    if (!--v14)
      return 0;
  }
  a4(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
  return 1;
}

uint64_t sub_1B1EBAA30(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(uint64_t), uint64_t a5)
{
  return sub_1B1EBAA60(a1, a2, a3, a4, a5, &qword_1ED4B88A0, type metadata accessor for ParticleUpdateScript, (uint64_t)&off_1ED4BD280) & 1;
}

uint64_t sub_1B1EBAA60(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(uint64_t), uint64_t a5, unint64_t *a6, uint64_t (*a7)(uint64_t), uint64_t a8)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *i;

  v12 = *(_QWORD *)(a1 + 48);
  sub_1B1A1B6FC(0, a6, a7, a8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptRuntime);
  v14 = *(_QWORD *)(v12 + 16);
  if (!v14)
    return 0;
  for (i = (_QWORD *)(v12 + 56); *(i - 3) != v13; i += 5)
  {
    if (!--v14)
      return 0;
  }
  a4(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
  return 1;
}

uint64_t sub_1B1EBAB1C(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(uint64_t), uint64_t a5)
{
  return sub_1B1EBA974(a1, a2, a3, a4, a5, (unint64_t *)&unk_1ED4B9900, type metadata accessor for ParticleInitScript, (uint64_t)&off_1ED4BCD90) & 1;
}

uint64_t sub_1B1EBAB4C(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(uint64_t), uint64_t a5)
{
  return sub_1B1EBAA60(a1, a2, a3, a4, a5, &qword_1ED4B8890, type metadata accessor for ParticleInitScript, (uint64_t)&off_1ED4BCD90) & 1;
}

uint64_t sub_1B1EBAB7C(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(uint64_t), uint64_t a5)
{
  return sub_1B1EBA974(a1, a2, a3, a4, a5, (unint64_t *)&unk_1ED4B9930, type metadata accessor for ShaderScript, (uint64_t)&off_1ED4BC090) & 1;
}

uint64_t sub_1B1EBABAC(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(uint64_t), uint64_t a5)
{
  return sub_1B1EBAA60(a1, a2, a3, a4, a5, (unint64_t *)&qword_1ED4B88C0, type metadata accessor for ShaderScript, (uint64_t)&off_1ED4BC090) & 1;
}

uint64_t sub_1B1EBABDC(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(uint64_t), uint64_t a5)
{
  return sub_1B1EBA974(a1, a2, a3, a4, a5, (unint64_t *)&unk_1ED4BB3B0, type metadata accessor for MetalFunctionScript, (uint64_t)&off_1ED4BF0F8) & 1;
}

uint64_t sub_1B1EBAC0C(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(uint64_t), uint64_t a5)
{
  return sub_1B1EBAA60(a1, a2, a3, a4, a5, (unint64_t *)&qword_1ED4BB240, type metadata accessor for MetalFunctionScript, (uint64_t)&off_1ED4BF0F8) & 1;
}

uint64_t sub_1B1EBAC3C(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(uint64_t), uint64_t a5)
{
  return sub_1B1EBA974(a1, a2, a3, a4, a5, (unint64_t *)&unk_1ED4B9940, type metadata accessor for SimpleScript, (uint64_t)&off_1ED4BC1D8) & 1;
}

uint64_t sub_1B1EBAC6C(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(uint64_t), uint64_t a5)
{
  return sub_1B1EBAA60(a1, a2, a3, a4, a5, (unint64_t *)&unk_1ED4B88D0, type metadata accessor for SimpleScript, (uint64_t)&off_1ED4BC1D8) & 1;
}

uint64_t sub_1B1EBAC9C(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(uint64_t), uint64_t a5)
{
  return sub_1B1EBA974(a1, a2, a3, a4, a5, (unint64_t *)&unk_1ED4B9920, type metadata accessor for GraphScript, (uint64_t)&off_1ED4BBD80) & 1;
}

uint64_t sub_1B1EBACCC(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(uint64_t), uint64_t a5)
{
  return sub_1B1EBAA60(a1, a2, a3, a4, a5, (unint64_t *)&unk_1ED4B88B0, type metadata accessor for GraphScript, (uint64_t)&off_1ED4BBD80) & 1;
}

uint64_t sub_1B1EBACFC(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(uint64_t), uint64_t a5)
{
  return sub_1B1EBA974(a1, a2, a3, a4, a5, &qword_1ED4B9950, type metadata accessor for EmitterScript, (uint64_t)&off_1ED4BC418) & 1;
}

uint64_t sub_1B1EBAD2C(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(uint64_t), uint64_t a5)
{
  return sub_1B1EBAA60(a1, a2, a3, a4, a5, (unint64_t *)&unk_1ED4B88E0, type metadata accessor for EmitterScript, (uint64_t)&off_1ED4BC418) & 1;
}

uint64_t sub_1B1EBAD5C(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *i;

  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(v4 + 16);
  if (!v5)
    return 0;
  for (i = (_QWORD *)(v4 + 56); (ValueMetadata *)*(i - 3) != &type metadata for MaterialRuntime; i += 5)
  {
    if (!--v5)
      return 0;
  }
  a4(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
  return 1;
}

uint64_t sub_1B1EBADCC(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(__int128 *), uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *i;
  uint64_t v12;
  __int128 v13;
  __int128 v15;

  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(_QWORD *)(v8 + 16);
  if (v9)
  {
    for (i = (_QWORD *)(v8 + 56); (ValueMetadata *)*(i - 3) != &type metadata for ModelRenderer; i += 5)
    {
      if (!--v9)
        return v9 & 1;
    }
    v15 = *(_OWORD *)(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
    a4(&v15);
    if (!v7)
    {
      v12 = sub_1B1DA61CC(a7) << 16 >> 48;
      v13 = v15;
      swift_retain();
      sub_1B1FD9E04(v12, v13, *((unint64_t *)&v13 + 1));
      swift_release();
      LOBYTE(v9) = 1;
    }
  }
  return v9 & 1;
}

uint64_t sub_1B1EBAED8(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(unint64_t *), uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *i;
  uint64_t v12;
  unint64_t v13;
  unint64_t v15;

  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(_QWORD *)(v8 + 16);
  if (v9)
  {
    for (i = (_QWORD *)(v8 + 56); (ValueMetadata *)*(i - 3) != &type metadata for Parent; i += 5)
    {
      if (!--v9)
        return v9 & 1;
    }
    v15 = *(_QWORD *)(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
    a4(&v15);
    if (!v7)
    {
      v12 = sub_1B1DA61CC(a7) << 16 >> 48;
      v13 = v15;
      swift_retain();
      sub_1B1FDDA24(v12, v13);
      swift_release();
      LOBYTE(v9) = 1;
    }
  }
  return v9 & 1;
}

uint64_t sub_1B1EBAFD8(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *i;

  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(v4 + 16);
  if (!v5)
    return 0;
  for (i = (_QWORD *)(v4 + 56); (ValueMetadata *)*(i - 3) != &type metadata for Scale3; i += 5)
  {
    if (!--v5)
      return 0;
  }
  a4(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
  return 1;
}

uint64_t sub_1B1EBB048(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *i;

  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(v4 + 16);
  if (!v5)
    return 0;
  for (i = (_QWORD *)(v4 + 56); (ValueMetadata *)*(i - 3) != &type metadata for Skeleton; i += 5)
  {
    if (!--v5)
      return 0;
  }
  a4(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
  return 1;
}

uint64_t sub_1B1EBB0B8(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *i;

  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(v4 + 16);
  if (!v5)
    return 0;
  for (i = (_QWORD *)(v4 + 56); (ValueMetadata *)*(i - 3) != &type metadata for SkinnedMeshBinding; i += 5)
  {
    if (!--v5)
      return 0;
  }
  a4(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
  return 1;
}

uint64_t sub_1B1EBB128(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *i;

  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(v4 + 16);
  if (!v5)
    return 0;
  for (i = (_QWORD *)(v4 + 56); (ValueMetadata *)*(i - 3) != &type metadata for PerspectiveCamera; i += 5)
  {
    if (!--v5)
      return 0;
  }
  a4(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
  return 1;
}

uint64_t sub_1B1EBB198(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *i;

  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(v4 + 16);
  if (!v5)
    return 0;
  for (i = (_QWORD *)(v4 + 56); (ValueMetadata *)*(i - 3) != &type metadata for OrthographicCamera; i += 5)
  {
    if (!--v5)
      return 0;
  }
  a4(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
  return 1;
}

uint64_t sub_1B1EBB208(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(uint64_t *), uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *i;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v8 = v7;
  v9 = *(_QWORD *)(a1 + 48);
  v10 = *(_QWORD *)(v9 + 16);
  if (v10)
  {
    for (i = (_QWORD *)(v9 + 56); (ValueMetadata *)*(i - 3) != &type metadata for MeshReferenceAsset; i += 5)
    {
      if (!--v10)
        return v10 & 1;
    }
    v14 = (uint64_t *)(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
    v15 = v14[1];
    v16 = v14[2];
    v17 = v14[3];
    v24 = *v14;
    v25 = v15;
    v26 = v16;
    v27 = v17;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    a4(&v24);
    if (v8)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      v18 = sub_1B1DA61CC(a7) << 16 >> 48;
      v19 = v24;
      v20 = v25;
      v21 = v26;
      v22 = v27;
      swift_retain();
      sub_1B1FDB2D8(v18, v19, v20, v21, v22);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      LOBYTE(v10) = 1;
    }
  }
  return v10 & 1;
}

uint64_t sub_1B1EBB364(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *i;

  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(v4 + 16);
  if (!v5)
    return 0;
  for (i = (_QWORD *)(v4 + 56); (ValueMetadata *)*(i - 3) != &type metadata for MetalScriptReflection; i += 5)
  {
    if (!--v5)
      return 0;
  }
  a4(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
  return 1;
}

uint64_t sub_1B1EBB3D4(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(__int128 *), uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *i;
  __int128 *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  _OWORD v26[5];
  _OWORD v27[2];
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  _OWORD v33[2];
  _OWORD v34[5];
  _OWORD v35[2];
  _OWORD v36[5];
  _BYTE v37[19];

  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(_QWORD *)(v8 + 16);
  if (v9)
  {
    for (i = (_QWORD *)(v8 + 56); (ValueMetadata *)*(i - 3) != &type metadata for ParticleFlockingSolver; i += 5)
    {
      if (!--v9)
        return v9 & 1;
    }
    v13 = (__int128 *)(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
    v15 = v13[1];
    v14 = v13[2];
    v34[0] = *v13;
    v34[1] = v15;
    v34[2] = v14;
    v17 = v13[4];
    v16 = v13[5];
    v18 = v13[3];
    *(_DWORD *)((char *)v35 + 15) = *(_DWORD *)((char *)v13 + 95);
    v34[4] = v17;
    v35[0] = v16;
    v34[3] = v18;
    v19 = v13[1];
    v28 = *v13;
    v29 = v19;
    v20 = v13[2];
    v21 = v13[3];
    v22 = v13[4];
    v23 = v13[5];
    *(_DWORD *)((char *)v33 + 15) = *(_DWORD *)((char *)v13 + 95);
    v32 = v22;
    v33[0] = v23;
    v30 = v20;
    v31 = v21;
    sub_1B1B7C5AC((uint64_t)v34);
    a4(&v28);
    if (v7)
    {
      v26[4] = v32;
      v27[0] = v33[0];
      *(_DWORD *)((char *)v27 + 15) = *(_DWORD *)((char *)v33 + 15);
      v26[0] = v28;
      v26[1] = v29;
      v26[2] = v30;
      v26[3] = v31;
      sub_1B19ED720((uint64_t)v26);
    }
    else
    {
      v24 = sub_1B1DA61CC(a7) << 16 >> 48;
      v36[0] = v28;
      v36[1] = v29;
      *(_DWORD *)&v37[15] = *(_DWORD *)((char *)v33 + 15);
      v36[4] = v32;
      *(_OWORD *)v37 = v33[0];
      v36[2] = v30;
      v36[3] = v31;
      swift_retain();
      sub_1B1FEC29C(v24, (uint64_t)v36);
      swift_release();
      sub_1B19ED720((uint64_t)v36);
      LOBYTE(v9) = 1;
    }
  }
  return v9 & 1;
}

uint64_t sub_1B1EBB56C(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *i;

  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(v4 + 16);
  if (!v5)
    return 0;
  for (i = (_QWORD *)(v4 + 56); (ValueMetadata *)*(i - 3) != &type metadata for Opacity; i += 5)
  {
    if (!--v5)
      return 0;
  }
  a4(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
  return 1;
}

uint64_t sub_1B1EBB5DC(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(uint64_t *), uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *i;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v8 = v7;
  v9 = *(_QWORD *)(a1 + 48);
  v10 = *(_QWORD *)(v9 + 16);
  if (v10)
  {
    for (i = (_QWORD *)(v9 + 56); (ValueMetadata *)*(i - 3) != &type metadata for REMeshAssetPointCache; i += 5)
    {
      if (!--v10)
        return v10 & 1;
    }
    v14 = (uint64_t *)(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
    v15 = v14[1];
    v16 = v14[2];
    v22 = *v14;
    v23 = v15;
    v24 = v16;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    a4(&v22);
    if (v8)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      v17 = sub_1B1DA61CC(a7) << 16 >> 48;
      v18 = v22;
      v19 = v23;
      v20 = v24;
      swift_retain();
      sub_1B1FDC8FC(v17, v18, v19, v20);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      LOBYTE(v10) = 1;
    }
  }
  return v10 & 1;
}

uint64_t sub_1B1EBB72C(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *i;

  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(v4 + 16);
  if (!v5)
    return 0;
  for (i = (_QWORD *)(v4 + 56); (ValueMetadata *)*(i - 3) != &type metadata for LocalAABB; i += 5)
  {
    if (!--v5)
      return 0;
  }
  a4(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
  return 1;
}

uint64_t sub_1B1EBB79C(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *i;

  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(v4 + 16);
  if (!v5)
    return 0;
  for (i = (_QWORD *)(v4 + 56); (ValueMetadata *)*(i - 3) != &type metadata for NodeVisibilityController; i += 5)
  {
    if (!--v5)
      return 0;
  }
  a4(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
  return 1;
}

uint64_t sub_1B1EBB80C(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *i;

  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(v4 + 16);
  if (!v5)
    return 0;
  for (i = (_QWORD *)(v4 + 56); (ValueMetadata *)*(i - 3) != &type metadata for NodeTransformController; i += 5)
  {
    if (!--v5)
      return 0;
  }
  a4(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
  return 1;
}

uint64_t sub_1B1EBB87C(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *i;

  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(v4 + 16);
  if (!v5)
    return 0;
  for (i = (_QWORD *)(v4 + 56); (ValueMetadata *)*(i - 3) != &type metadata for ProjectionMatrix; i += 5)
  {
    if (!--v5)
      return 0;
  }
  a4(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
  return 1;
}

uint64_t sub_1B1EBB8EC(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *i;

  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(v4 + 16);
  if (!v5)
    return 0;
  for (i = (_QWORD *)(v4 + 56); (ValueMetadata *)*(i - 3) != &type metadata for LastFrameWorldTransform; i += 5)
  {
    if (!--v5)
      return 0;
  }
  a4(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
  return 1;
}

uint64_t sub_1B1EBB95C(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *i;

  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(v4 + 16);
  if (!v5)
    return 0;
  for (i = (_QWORD *)(v4 + 56); (ValueMetadata *)*(i - 3) != &type metadata for ParticleID; i += 5)
  {
    if (!--v5)
      return 0;
  }
  a4(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
  return 1;
}

uint64_t sub_1B1EBB9CC(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(uint64_t *), uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *i;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(_QWORD *)(v8 + 16);
  if (v9)
  {
    for (i = (_QWORD *)(v8 + 56); (ValueMetadata *)*(i - 3) != &type metadata for Scheduling; i += 5)
    {
      if (!--v9)
        return v9 & 1;
    }
    v15 = *(_QWORD *)(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
    a4(&v15);
    if (!v7)
    {
      v12 = sub_1B1DA61CC(a7) << 16 >> 48;
      v13 = v15;
      swift_retain();
      sub_1B1FD9920(v12, v13);
      swift_release();
      LOBYTE(v9) = 1;
    }
  }
  return v9 & 1;
}

uint64_t sub_1B1EBBACC(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *i;

  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(v4 + 16);
  if (!v5)
    return 0;
  for (i = (_QWORD *)(v4 + 56); (ValueMetadata *)*(i - 3) != &type metadata for CameraBloom; i += 5)
  {
    if (!--v5)
      return 0;
  }
  a4(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
  return 1;
}

uint64_t sub_1B1EBBB3C(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *i;

  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(v4 + 16);
  if (!v5)
    return 0;
  for (i = (_QWORD *)(v4 + 56); (ValueMetadata *)*(i - 3) != &type metadata for ParticleAge; i += 5)
  {
    if (!--v5)
      return 0;
  }
  a4(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
  return 1;
}

uint64_t sub_1B1EBBBAC(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *i;

  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(v4 + 16);
  if (!v5)
    return 0;
  for (i = (_QWORD *)(v4 + 56); (ValueMetadata *)*(i - 3) != &type metadata for CSVFileAsset; i += 5)
  {
    if (!--v5)
      return 0;
  }
  a4(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
  return 1;
}

uint64_t sub_1B1EBBC1C(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(__int128 *), uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *i;
  __int128 *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  char v34;
  _OWORD v35[13];
  char v36;

  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(_QWORD *)(v8 + 16);
  if (v9)
  {
    for (i = (_QWORD *)(v8 + 56); (ValueMetadata *)*(i - 3) != &type metadata for EmitterShape; i += 5)
    {
      if (!--v9)
        return v9 & 1;
    }
    v12 = (__int128 *)(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
    v13 = v12[11];
    v31 = v12[10];
    v32 = v13;
    v33 = v12[12];
    v34 = *((_BYTE *)v12 + 208);
    v14 = v12[7];
    v27 = v12[6];
    v28 = v14;
    v15 = v12[9];
    v29 = v12[8];
    v30 = v15;
    v16 = v12[3];
    v23 = v12[2];
    v24 = v16;
    v17 = v12[5];
    v25 = v12[4];
    v26 = v17;
    v18 = v12[1];
    v21 = *v12;
    v22 = v18;
    a4(&v21);
    if (!v7)
    {
      v19 = sub_1B1DA61CC(a7) << 16 >> 48;
      v35[10] = v31;
      v35[11] = v32;
      v35[12] = v33;
      v36 = v34;
      v35[6] = v27;
      v35[7] = v28;
      v35[8] = v29;
      v35[9] = v30;
      v35[2] = v23;
      v35[3] = v24;
      v35[4] = v25;
      v35[5] = v26;
      v35[0] = v21;
      v35[1] = v22;
      swift_retain();
      sub_1B1FD9A20(v19, (uint64_t)v35);
      swift_release();
      LOBYTE(v9) = 1;
    }
  }
  return v9 & 1;
}

uint64_t sub_1B1EBBD9C(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *i;

  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(v4 + 16);
  if (!v5)
    return 0;
  for (i = (_QWORD *)(v4 + 56); (ValueMetadata *)*(i - 3) != &type metadata for LinearFactor; i += 5)
  {
    if (!--v5)
      return 0;
  }
  a4(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
  return 1;
}

uint64_t sub_1B1EBBE0C(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(float *), uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *i;
  uint64_t v12;
  float v13;
  uint64_t v14;
  float v16;
  char v17;

  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(_QWORD *)(v8 + 16);
  if (v9)
  {
    for (i = (_QWORD *)(v8 + 56); (ValueMetadata *)*(i - 3) != &type metadata for ParticleDrag; i += 5)
    {
      if (!--v9)
        return v9 & 1;
    }
    v12 = *(_QWORD *)(a1 + 128) + *i + a2 * a3;
    v13 = *(float *)v12;
    LOBYTE(v12) = *(_BYTE *)(v12 + 4);
    v16 = v13;
    v17 = v12;
    a4(&v16);
    if (!v7)
    {
      v14 = sub_1B1DA61CC(a7);
      sub_1B1FED908(v14 << 16 >> 48, v17, v16);
      LOBYTE(v9) = 1;
    }
  }
  return v9 & 1;
}

uint64_t sub_1B1EBBEEC(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *i;

  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(v4 + 16);
  if (!v5)
    return 0;
  for (i = (_QWORD *)(v4 + 56); (ValueMetadata *)*(i - 3) != &type metadata for SmoothMotion; i += 5)
  {
    if (!--v5)
      return 0;
  }
  a4(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
  return 1;
}

uint64_t sub_1B1EBBF5C(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(unsigned __int8 *), uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *i;
  char *v13;
  unsigned __int8 v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  unsigned __int8 v24;
  unsigned __int8 v25;
  char v26;
  uint64_t v27;
  uint64_t v28;

  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(_QWORD *)(v8 + 16);
  if (v9)
  {
    for (i = (_QWORD *)(v8 + 56); (ValueMetadata *)*(i - 3) != &type metadata for VideoCapture; i += 5)
    {
      if (!--v9)
        return v9 & 1;
    }
    v13 = (char *)(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
    v14 = v13[1];
    v15 = v13[2];
    v17 = *((_QWORD *)v13 + 1);
    v16 = *((_QWORD *)v13 + 2);
    v24 = *v13;
    v25 = v14;
    v26 = v15;
    v27 = v17;
    v28 = v16;
    swift_bridgeObjectRetain();
    a4(&v24);
    if (v7)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v18 = sub_1B1DA61CC(a7) << 16 >> 48;
      v19 = v27;
      v20 = v28;
      if (v26)
        v21 = 0x10000;
      else
        v21 = 0;
      v22 = v24 | (v25 << 8) | v21;
      swift_retain();
      sub_1B1FD9B50(v18, v22, v19, v20);
      swift_bridgeObjectRelease();
      swift_release();
      LOBYTE(v9) = 1;
    }
  }
  return v9 & 1;
}

uint64_t sub_1B1EBC0C0(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *i;

  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(v4 + 16);
  if (!v5)
    return 0;
  for (i = (_QWORD *)(v4 + 56); (ValueMetadata *)*(i - 3) != &type metadata for AngularFactor; i += 5)
  {
    if (!--v5)
      return 0;
  }
  a4(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
  return 1;
}

uint64_t sub_1B1EBC130(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *i;

  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(v4 + 16);
  if (!v5)
    return 0;
  for (i = (_QWORD *)(v4 + 56); (ValueMetadata *)*(i - 3) != &type metadata for AudioAnalyzer; i += 5)
  {
    if (!--v5)
      return 0;
  }
  a4(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
  return 1;
}

uint64_t sub_1B1EBC1A0(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *i;

  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(v4 + 16);
  if (!v5)
    return 0;
  for (i = (_QWORD *)(v4 + 56); (ValueMetadata *)*(i - 3) != &type metadata for AudioSpectrum; i += 5)
  {
    if (!--v5)
      return 0;
  }
  a4(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
  return 1;
}

uint64_t sub_1B1EBC210(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(char *), uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1B1EBA250(a1, a2, a3, a4, a5, a6, a7, type metadata accessor for EmitterScript, (void (*)(uint64_t, char *, uint64_t))sub_1B1FD9C54) & 1;
}

uint64_t sub_1B1EBC270(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(__int128 *), uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *i;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  _OWORD v26[3];
  uint64_t v27;
  _BYTE v28[8];
  __int128 v29;
  __int128 v30;
  __int128 v31;
  id v32[2];
  __int128 v33;
  __int128 v34;

  v8 = v7;
  v9 = *(_QWORD *)(a1 + 48);
  v10 = *(_QWORD *)(v9 + 16);
  if (v10)
  {
    for (i = (_QWORD *)(v9 + 56); (ValueMetadata *)*(i - 3) != &type metadata for MeshFileAsset; i += 5)
    {
      if (!--v10)
        return v10 & 1;
    }
    v14 = *(_QWORD *)(a1 + 128) + *i + a2 * a3;
    v15 = *(_QWORD *)(v14 + 8);
    v16 = *(_QWORD *)(v14 + 16);
    v17 = *(_QWORD *)(v14 + 24);
    v18 = *(_QWORD *)(v14 + 48);
    *(_QWORD *)&v22 = *(_QWORD *)v14;
    *((_QWORD *)&v22 + 1) = v15;
    *(_QWORD *)&v23 = v16;
    *((_QWORD *)&v23 + 1) = v17;
    v24 = *(_OWORD *)(v14 + 32);
    v25 = v18;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v19 = (id)v24;
    a4(&v22);
    if (v8)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
    }
    else
    {
      v20 = sub_1B1DA61CC(a7) << 16 >> 48;
      v29 = v22;
      v26[0] = v22;
      v26[1] = v23;
      v26[2] = v24;
      v27 = v25;
      v30 = v23;
      v31 = v24;
      v33 = v23;
      v34 = v22;
      sub_1B1AE72F4((uint64_t)&v31, (uint64_t)v32);
      sub_1B1EC57D4((uint64_t)&v27, (uint64_t)v28, (unint64_t *)&qword_1EEF59398, &qword_1ED4BA4D0, MEMORY[0x1E0DEB418]);
      swift_retain();
      sub_1B1FD9C68(v20, (uint64_t)v26);
      swift_release();
      sub_1B1BA80C0((uint64_t)&v34);
      sub_1B1BA80C0((uint64_t)&v33);
      sub_1B1BB52CC(v32);
      sub_1B1B28C6C((uint64_t)v28);
      LOBYTE(v10) = 1;
    }
  }
  return v10 & 1;
}

uint64_t sub_1B1EBC470(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *i;

  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(v4 + 16);
  if (!v5)
    return 0;
  for (i = (_QWORD *)(v4 + 56); (ValueMetadata *)*(i - 3) != &type metadata for NeighborCount; i += 5)
  {
    if (!--v5)
      return 0;
  }
  a4(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
  return 1;
}

uint64_t sub_1B1EBC4E0(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *i;

  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(v4 + 16);
  if (!v5)
    return 0;
  for (i = (_QWORD *)(v4 + 56); (ValueMetadata *)*(i - 3) != &type metadata for ParticleAngle; i += 5)
  {
    if (!--v5)
      return 0;
  }
  a4(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
  return 1;
}

uint64_t sub_1B1EBC550(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(__n128 *), uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *i;
  __n128 *v12;
  __n128 v13;
  uint64_t v14;
  __n128 v16;
  unsigned __int8 v17;

  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(_QWORD *)(v8 + 16);
  if (v9)
  {
    for (i = (_QWORD *)(v8 + 56); (ValueMetadata *)*(i - 3) != &type metadata for ParticleForce; i += 5)
    {
      if (!--v9)
        return v9 & 1;
    }
    v12 = (__n128 *)(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
    v13 = *v12;
    LOBYTE(v12) = v12[1].n128_u8[0];
    v16 = v13;
    v17 = v12;
    a4(&v16);
    if (!v7)
    {
      v14 = sub_1B1DA61CC(a7);
      sub_1B1FED95C(v14 << 16 >> 48, v17, v16);
      LOBYTE(v9) = 1;
    }
  }
  return v9 & 1;
}

uint64_t sub_1B1EBC630(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(__int128 *), uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *i;
  int *v12;
  int v13;
  __int128 v14;
  int v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  char v23;
  _OWORD v24[3];
  char v25;

  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(_QWORD *)(v8 + 16);
  if (v9)
  {
    for (i = (_QWORD *)(v8 + 56); (ValueMetadata *)*(i - 3) != &type metadata for ParticleNoise; i += 5)
    {
      if (!--v9)
        return v9 & 1;
    }
    v12 = (int *)(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
    v13 = *v12;
    v14 = *((_OWORD *)v12 + 1);
    v15 = v12[8];
    v16 = *((_BYTE *)v12 + 36);
    v17 = *((_QWORD *)v12 + 5);
    LOBYTE(v12) = *((_BYTE *)v12 + 48);
    LODWORD(v20) = v13;
    v21 = v14;
    LODWORD(v22) = v15;
    BYTE4(v22) = v16;
    *((_QWORD *)&v22 + 1) = v17;
    v23 = (char)v12;
    a4(&v20);
    if (!v7)
    {
      v18 = sub_1B1DA61CC(a7);
      v24[0] = v20;
      v24[1] = v21;
      v24[2] = v22;
      v25 = v23;
      sub_1B1FED9AC(v18 << 16 >> 48, (uint64_t)v24);
      LOBYTE(v9) = 1;
    }
  }
  return v9 & 1;
}

uint64_t sub_1B1EBC744(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *i;

  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(v4 + 16);
  if (!v5)
    return 0;
  for (i = (_QWORD *)(v4 + 56); (ValueMetadata *)*(i - 3) != &type metadata for ParticlePivot; i += 5)
  {
    if (!--v5)
      return 0;
  }
  a4(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
  return 1;
}

uint64_t sub_1B1EBC7B4(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(unsigned __int8 *), uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *i;
  uint64_t v12;
  unsigned __int8 v13;
  unsigned __int8 v15;

  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(_QWORD *)(v8 + 16);
  if (v9)
  {
    for (i = (_QWORD *)(v8 + 56); (ValueMetadata *)*(i - 3) != &type metadata for SpaceOverride; i += 5)
    {
      if (!--v9)
        return v9 & 1;
    }
    v15 = *(_BYTE *)(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
    a4(&v15);
    if (!v7)
    {
      v12 = sub_1B1DA61CC(a7) << 16 >> 48;
      v13 = v15;
      swift_retain();
      sub_1B1FD9F28(v12, v13);
      swift_release();
      LOBYTE(v9) = 1;
    }
  }
  return v9 & 1;
}

uint64_t sub_1B1EBC8B4(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *i;

  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(v4 + 16);
  if (!v5)
    return 0;
  for (i = (_QWORD *)(v4 + 56); (ValueMetadata *)*(i - 3) != &type metadata for TextureClient; i += 5)
  {
    if (!--v5)
      return 0;
  }
  a4(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
  return 1;
}

uint64_t sub_1B1EBC924(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(__n128 *), uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *i;
  __n128 *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  id v17;
  uint64_t v18;
  __n128 v20;
  __n128 v21;
  __n128 v22;
  __n128 v23[5];
  __n128 v24;
  id v25[2];
  __n128 v26;
  __n128 v27;

  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(_QWORD *)(v8 + 16);
  if (v9)
  {
    for (i = (_QWORD *)(v8 + 56); (ValueMetadata *)*(i - 3) != &type metadata for AudioFileAsset; i += 5)
    {
      if (!--v9)
        return v9 & 1;
    }
    v13 = (__n128 *)(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
    v14 = v13->n128_u64[1];
    v15 = v13[1].n128_u64[0];
    v16 = v13[1].n128_u64[1];
    v20.n128_u64[0] = v13->n128_u64[0];
    v20.n128_u64[1] = v14;
    v21.n128_u64[0] = v15;
    v21.n128_u64[1] = v16;
    v22 = v13[2];
    v17 = (id)v22.n128_u64[0];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    a4(&v20);
    if (v7)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

    }
    else
    {
      v18 = sub_1B1DA61CC(a7) << 16 >> 48;
      v23[0] = v20;
      v23[1] = v21;
      v23[2] = v22;
      v23[3] = v20;
      v23[4] = v21;
      v24 = v22;
      v26 = v21;
      v27 = v20;
      sub_1B1AE72F4((uint64_t)&v24, (uint64_t)v25);
      swift_retain();
      sub_1B1FDA024(v18, v23);
      swift_release();
      sub_1B1BA80C0((uint64_t)&v27);
      sub_1B1BA80C0((uint64_t)&v26);
      sub_1B1BB52CC(v25);
      LOBYTE(v9) = 1;
    }
  }
  return v9 & 1;
}

uint64_t sub_1B1EBCABC(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *i;

  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(v4 + 16);
  if (!v5)
    return 0;
  for (i = (_QWORD *)(v4 + 56); (ValueMetadata *)*(i - 3) != &type metadata for CameraLensBlur; i += 5)
  {
    if (!--v5)
      return 0;
  }
  a4(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
  return 1;
}

uint64_t sub_1B1EBCB2C(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(uint64_t *), uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *i;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;

  v8 = v7;
  v9 = *(_QWORD *)(a1 + 48);
  v10 = *(_QWORD *)(v9 + 16);
  if (v10)
  {
    for (i = (_QWORD *)(v9 + 56); (ValueMetadata *)*(i - 3) != &type metadata for CurveComponent; i += 5)
    {
      if (!--v10)
        return v10 & 1;
    }
    v14 = *(_QWORD *)(a1 + 128) + *i + a2 * a3;
    v15 = *(_QWORD *)v14;
    v16 = *(_QWORD *)(v14 + 8);
    v17 = *(_QWORD *)(v14 + 16);
    LOBYTE(v14) = *(_BYTE *)(v14 + 24);
    v24 = v15;
    v25 = v16;
    v26 = v17;
    v27 = v14;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    a4(&v24);
    if (v8)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      v18 = sub_1B1DA61CC(a7) << 16 >> 48;
      v19 = v24;
      v20 = v25;
      v21 = v26;
      v22 = v27;
      swift_retain();
      sub_1B1FDA180(v18, v19, v20, v21, v22);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      LOBYTE(v10) = 1;
    }
  }
  return v10 & 1;
}

uint64_t sub_1B1EBCCAC(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(__int128 *), uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *i;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  char v19;
  id v20;
  void *v21;
  uint64_t v22;
  __int128 v24;
  __int128 v25;
  _BYTE v26[19];
  _OWORD v27[2];
  _OWORD v28[2];

  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(_QWORD *)(v8 + 16);
  if (v9)
  {
    for (i = (_QWORD *)(v8 + 56); (ValueMetadata *)*(i - 3) != &type metadata for MovieFileAsset; i += 5)
    {
      if (!--v9)
        return v9 & 1;
    }
    v13 = *(_QWORD *)(a1 + 128) + *i + a2 * a3;
    v14 = *(_QWORD *)(v13 + 8);
    v15 = *(_QWORD *)(v13 + 16);
    v16 = *(_QWORD *)(v13 + 24);
    v17 = *(_BYTE *)(v13 + 48);
    v18 = *(_BYTE *)(v13 + 49);
    v19 = *(_BYTE *)(v13 + 50);
    *(_QWORD *)&v24 = *(_QWORD *)v13;
    *((_QWORD *)&v24 + 1) = v14;
    *(_QWORD *)&v25 = v15;
    *((_QWORD *)&v25 + 1) = v16;
    *(_OWORD *)v26 = *(_OWORD *)(v13 + 32);
    v26[16] = v17;
    v26[17] = v18;
    v26[18] = v19;
    v20 = *(id *)v26;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    a4(&v24);
    if (v7)
    {
      v21 = *(void **)v26;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

    }
    else
    {
      v22 = sub_1B1DA61CC(a7) << 16 >> 48;
      v27[0] = v24;
      v27[1] = v25;
      v28[0] = *(_OWORD *)v26;
      *(_DWORD *)((char *)v28 + 15) = *(_DWORD *)&v26[15];
      swift_retain();
      sub_1B1FDA2CC(v22, (uint64_t)v27);
      swift_release();
      sub_1B1EC5694((uint64_t)v27);
      LOBYTE(v9) = 1;
    }
  }
  return v9 & 1;
}

uint64_t sub_1B1EBCE3C(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *i;

  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(v4 + 16);
  if (!v5)
    return 0;
  for (i = (_QWORD *)(v4 + 56); (ValueMetadata *)*(i - 3) != &type metadata for ParticleTarget; i += 5)
  {
    if (!--v5)
      return 0;
  }
  a4(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
  return 1;
}

uint64_t sub_1B1EBCEAC(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *i;

  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(v4 + 16);
  if (!v5)
    return 0;
  for (i = (_QWORD *)(v4 + 56); (ValueMetadata *)*(i - 3) != &type metadata for RenderSettings; i += 5)
  {
    if (!--v5)
      return 0;
  }
  a4(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
  return 1;
}

uint64_t sub_1B1EBCF1C(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *i;

  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(v4 + 16);
  if (!v5)
    return 0;
  for (i = (_QWORD *)(v4 + 56); (ValueMetadata *)*(i - 3) != &type metadata for RenderingOrder; i += 5)
  {
    if (!--v5)
      return 0;
  }
  a4(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
  return 1;
}

uint64_t sub_1B1EBCF8C(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(__int128 *), uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *i;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  void *v20;
  uint64_t v21;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _OWORD v27[4];

  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(_QWORD *)(v8 + 16);
  if (v9)
  {
    for (i = (_QWORD *)(v8 + 56); (ValueMetadata *)*(i - 3) != &type metadata for SceneFileAsset; i += 5)
    {
      if (!--v9)
        return v9 & 1;
    }
    v13 = *(_QWORD *)(a1 + 128) + *i + a2 * a3;
    v14 = *(_QWORD *)(v13 + 8);
    v15 = *(_QWORD *)(v13 + 16);
    v16 = *(_QWORD *)(v13 + 24);
    v17 = *(_QWORD *)(v13 + 48);
    v18 = *(_QWORD *)(v13 + 56);
    *(_QWORD *)&v23 = *(_QWORD *)v13;
    *((_QWORD *)&v23 + 1) = v14;
    *(_QWORD *)&v24 = v15;
    *((_QWORD *)&v24 + 1) = v16;
    v25 = *(_OWORD *)(v13 + 32);
    *(_QWORD *)&v26 = v17;
    *((_QWORD *)&v26 + 1) = v18;
    v19 = (id)v25;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    a4(&v23);
    if (v7)
    {
      v20 = (void *)v25;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

    }
    else
    {
      v21 = sub_1B1DA61CC(a7) << 16 >> 48;
      v27[0] = v23;
      v27[1] = v24;
      v27[2] = v25;
      v27[3] = v26;
      swift_retain();
      sub_1B1FDA3FC(v21, (uint64_t)v27);
      swift_release();
      sub_1B1EC5884((uint64_t)v27);
      LOBYTE(v9) = 1;
    }
  }
  return v9 & 1;
}

uint64_t sub_1B1EBD114(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *i;

  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(v4 + 16);
  if (!v5)
    return 0;
  for (i = (_QWORD *)(v4 + 56); (ValueMetadata *)*(i - 3) != &type metadata for SineMoveAction; i += 5)
  {
    if (!--v5)
      return 0;
  }
  a4(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
  return 1;
}

uint64_t sub_1B1EBD184(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *i;

  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(v4 + 16);
  if (!v5)
    return 0;
  for (i = (_QWORD *)(v4 + 56); (ValueMetadata *)*(i - 3) != &type metadata for AngularVelocity; i += 5)
  {
    if (!--v5)
      return 0;
  }
  a4(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
  return 1;
}

uint64_t sub_1B1EBD1F4(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(unsigned __int8 *), uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *i;
  unsigned __int8 *v12;
  unsigned __int8 v13;
  unsigned __int8 v14;
  uint64_t v15;
  int v16;
  int v17;
  unsigned int v18;
  unsigned __int8 v20;
  unsigned __int8 v21;
  char v22;

  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(_QWORD *)(v8 + 16);
  if (v9)
  {
    for (i = (_QWORD *)(v8 + 56); (ValueMetadata *)*(i - 3) != &type metadata for AudioController; i += 5)
    {
      if (!--v9)
        return v9 & 1;
    }
    v12 = (unsigned __int8 *)(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
    v13 = *v12;
    v14 = v12[1];
    LOBYTE(v12) = v12[2];
    v20 = v13;
    v21 = v14;
    v22 = (char)v12;
    a4(&v20);
    if (!v7)
    {
      v15 = sub_1B1DA61CC(a7) << 16 >> 48;
      if (v22)
        v16 = 0x10000;
      else
        v16 = 0;
      if (v21)
        v17 = 256;
      else
        v17 = 0;
      v18 = v17 | v20 | v16;
      swift_retain();
      sub_1B1FDA52C(v15, v18);
      swift_release();
      LOBYTE(v9) = 1;
    }
  }
  return v9 & 1;
}

uint64_t sub_1B1EBD330(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *i;

  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(v4 + 16);
  if (!v5)
    return 0;
  for (i = (_QWORD *)(v4 + 56); (ValueMetadata *)*(i - 3) != &type metadata for LightController; i += 5)
  {
    if (!--v5)
      return 0;
  }
  a4(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
  return 1;
}

uint64_t sub_1B1EBD3A0(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(__n128 *), uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *i;
  __n128 *v12;
  unsigned __int32 v13;
  unsigned __int32 v14;
  uint64_t v15;
  __n128 v17;
  unint64_t v18;
  __n128 v19;
  unint64_t v20;

  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(_QWORD *)(v8 + 16);
  if (v9)
  {
    for (i = (_QWORD *)(v8 + 56); (ValueMetadata *)*(i - 3) != &type metadata for ParticleCollide; i += 5)
    {
      if (!--v9)
        return v9 & 1;
    }
    v12 = (__n128 *)(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
    v13 = v12[1].n128_u32[0];
    v14 = v12[1].n128_u32[1];
    v17 = *v12;
    v18 = __PAIR64__(v14, v13);
    a4(&v17);
    if (!v7)
    {
      v15 = sub_1B1DA61CC(a7);
      v19 = v17;
      v20 = v18;
      sub_1B1FEDA0C(v15 << 16 >> 48, &v19);
      LOBYTE(v9) = 1;
    }
  }
  return v9 & 1;
}

uint64_t sub_1B1EBD494(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *i;

  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(v4 + 16);
  if (!v5)
    return 0;
  for (i = (_QWORD *)(v4 + 56); (ValueMetadata *)*(i - 3) != &type metadata for ParticleRespawn; i += 5)
  {
    if (!--v5)
      return 0;
  }
  a4(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
  return 1;
}

uint64_t sub_1B1EBD504(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(uint64_t *), uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *i;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(_QWORD *)(v8 + 16);
  if (v9)
  {
    for (i = (_QWORD *)(v8 + 56); (ValueMetadata *)*(i - 3) != &type metadata for ParticleSpawnID; i += 5)
    {
      if (!--v9)
        return v9 & 1;
    }
    v15 = *(_QWORD *)(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
    a4(&v15);
    if (!v7)
    {
      v12 = sub_1B1DA61CC(a7) << 16 >> 48;
      v13 = v15;
      swift_retain();
      sub_1B1FDA658(v12, v13);
      swift_release();
      LOBYTE(v9) = 1;
    }
  }
  return v9 & 1;
}

uint64_t sub_1B1EBD604(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(__n128 *), uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *i;
  __n128 *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  id v17;
  uint64_t v18;
  __n128 v20;
  __n128 v21;
  __n128 v22;
  __n128 v23[5];
  __n128 v24;
  id v25[2];
  __n128 v26;
  __n128 v27;

  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(_QWORD *)(v8 + 16);
  if (v9)
  {
    for (i = (_QWORD *)(v8 + 56); (ValueMetadata *)*(i - 3) != &type metadata for ShaderFileAsset; i += 5)
    {
      if (!--v9)
        return v9 & 1;
    }
    v13 = (__n128 *)(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
    v14 = v13->n128_u64[1];
    v15 = v13[1].n128_u64[0];
    v16 = v13[1].n128_u64[1];
    v20.n128_u64[0] = v13->n128_u64[0];
    v20.n128_u64[1] = v14;
    v21.n128_u64[0] = v15;
    v21.n128_u64[1] = v16;
    v22 = v13[2];
    v17 = (id)v22.n128_u64[0];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    a4(&v20);
    if (v7)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

    }
    else
    {
      v18 = sub_1B1DA61CC(a7) << 16 >> 48;
      v23[0] = v20;
      v23[1] = v21;
      v23[2] = v22;
      v23[3] = v20;
      v23[4] = v21;
      v24 = v22;
      v26 = v21;
      v27 = v20;
      sub_1B1AE72F4((uint64_t)&v24, (uint64_t)v25);
      swift_retain();
      sub_1B1FDA758(v18, v23);
      swift_release();
      sub_1B1BA80C0((uint64_t)&v27);
      sub_1B1BA80C0((uint64_t)&v26);
      sub_1B1BB52CC(v25);
      LOBYTE(v9) = 1;
    }
  }
  return v9 & 1;
}

uint64_t sub_1B1EBD79C(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(uint64_t *), uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *i;
  uint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v19;
  unint64_t v20;

  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(_QWORD *)(v8 + 16);
  if (v9)
  {
    for (i = (_QWORD *)(v8 + 56); (ValueMetadata *)*(i - 3) != &type metadata for TextureFileData; i += 5)
    {
      if (!--v9)
        return v9 & 1;
    }
    v13 = (uint64_t *)(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
    v14 = v13[1];
    v19 = *v13;
    v20 = v14;
    sub_1B1AEB720(v19, v14);
    a4(&v19);
    if (v7)
    {
      sub_1B1A0DAC8(v19, v20);
    }
    else
    {
      v15 = sub_1B1DA61CC(a7) << 16 >> 48;
      v16 = v19;
      v17 = v20;
      swift_retain();
      sub_1B1FDA8B4(v15, v16, v17);
      swift_release();
      sub_1B1A0DAC8(v16, v17);
      LOBYTE(v9) = 1;
    }
  }
  return v9 & 1;
}

uint64_t sub_1B1EBD8C8(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *i;

  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(v4 + 16);
  if (!v5)
    return 0;
  for (i = (_QWORD *)(v4 + 56); (ValueMetadata *)*(i - 3) != &type metadata for CALayerFileAsset; i += 5)
  {
    if (!--v5)
      return 0;
  }
  a4(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
  return 1;
}

uint64_t sub_1B1EBD938(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *i;

  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(v4 + 16);
  if (!v5)
    return 0;
  for (i = (_QWORD *)(v4 + 56); (ValueMetadata *)*(i - 3) != &type metadata for CameraController; i += 5)
  {
    if (!--v5)
      return 0;
  }
  a4(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
  return 1;
}

uint64_t sub_1B1EBD9A8(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *i;

  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(v4 + 16);
  if (!v5)
    return 0;
  for (i = (_QWORD *)(v4 + 56); (ValueMetadata *)*(i - 3) != &type metadata for CameraVignetting; i += 5)
  {
    if (!--v5)
      return 0;
  }
  a4(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
  return 1;
}

uint64_t sub_1B1EBDA18(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *i;

  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(v4 + 16);
  if (!v5)
    return 0;
  for (i = (_QWORD *)(v4 + 56); (ValueMetadata *)*(i - 3) != &type metadata for ParticleCopyData; i += 5)
  {
    if (!--v5)
      return 0;
  }
  a4(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
  return 1;
}

uint64_t sub_1B1EBDA88(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *i;

  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(v4 + 16);
  if (!v5)
    return 0;
  for (i = (_QWORD *)(v4 + 56); (ValueMetadata *)*(i - 3) != &type metadata for ParticleEmission; i += 5)
  {
    if (!--v5)
      return 0;
  }
  a4(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
  return 1;
}

uint64_t sub_1B1EBDAF8(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(uint64_t *), uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *i;
  uint64_t *v12;
  char v13;
  uint64_t v14;
  uint64_t v16;
  char v17;

  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(_QWORD *)(v8 + 16);
  if (v9)
  {
    for (i = (_QWORD *)(v8 + 56); (ValueMetadata *)*(i - 3) != &type metadata for ParticleLifeInit; i += 5)
    {
      if (!--v9)
        return v9 & 1;
    }
    v12 = (uint64_t *)(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
    v13 = *((_BYTE *)v12 + 8);
    v16 = *v12;
    v17 = v13;
    a4(&v16);
    if (!v7)
    {
      v14 = sub_1B1DA61CC(a7);
      sub_1B1FEDA68(v14 << 16 >> 48, v17, *(float *)&v16, *((float *)&v16 + 1));
      LOBYTE(v9) = 1;
    }
  }
  return v9 & 1;
}

uint64_t sub_1B1EBDBD8(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *i;

  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(v4 + 16);
  if (!v5)
    return 0;
  for (i = (_QWORD *)(v4 + 56); (ValueMetadata *)*(i - 3) != &type metadata for ParticleLifetime; i += 5)
  {
    if (!--v5)
      return 0;
  }
  a4(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
  return 1;
}

uint64_t sub_1B1EBDC48(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(uint64_t *), uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *i;
  uint64_t v12;
  uint64_t v14;

  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(_QWORD *)(v8 + 16);
  if (v9)
  {
    for (i = (_QWORD *)(v8 + 56); (ValueMetadata *)*(i - 3) != &type metadata for ParticleMassInit; i += 5)
    {
      if (!--v9)
        return v9 & 1;
    }
    v14 = *(_QWORD *)(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
    a4(&v14);
    if (!v7)
    {
      v12 = sub_1B1DA61CC(a7);
      sub_1B1FEDAC0(v12 << 16 >> 48, *(float *)&v14, *((float *)&v14 + 1));
      LOBYTE(v9) = 1;
    }
  }
  return v9 & 1;
}

uint64_t sub_1B1EBDD18(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(_BYTE *), uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *i;
  uint64_t v12;
  int v13;
  uint64_t v14;
  _BYTE v16[32];
  _OWORD v17[2];

  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(_QWORD *)(v8 + 16);
  if (v9)
  {
    for (i = (_QWORD *)(v8 + 56); (ValueMetadata *)*(i - 3) != &type metadata for ParticleSizeInit; i += 5)
    {
      if (!--v9)
        return v9 & 1;
    }
    v12 = *(_QWORD *)(a1 + 128) + *i + a2 * a3;
    v13 = *(_DWORD *)(v12 + 28);
    v16[0] = *(_BYTE *)v12;
    *(_OWORD *)&v16[4] = *(_OWORD *)(v12 + 4);
    *(_QWORD *)&v16[20] = *(_QWORD *)(v12 + 20);
    *(_DWORD *)&v16[28] = v13;
    a4(v16);
    if (!v7)
    {
      v14 = sub_1B1DA61CC(a7) << 16 >> 48;
      v17[0] = *(_OWORD *)v16;
      v17[1] = *(_OWORD *)&v16[16];
      swift_retain();
      sub_1B1FDA9C8(v14, (unsigned __int8 *)v17);
      swift_release();
      LOBYTE(v9) = 1;
    }
  }
  return v9 & 1;
}

uint64_t sub_1B1EBDE38(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(_BYTE *), uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *i;
  uint64_t v12;
  int v13;
  char v14;
  char v15;
  char v16;
  char v17;
  int v18;
  char v19;
  uint64_t v20;
  _BYTE v22[21];
  _OWORD v23[2];

  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(_QWORD *)(v8 + 16);
  if (v9)
  {
    for (i = (_QWORD *)(v8 + 56); (ValueMetadata *)*(i - 3) != &type metadata for ParticleSubSpawn; i += 5)
    {
      if (!--v9)
        return v9 & 1;
    }
    v12 = *(_QWORD *)(a1 + 128) + *i + a2 * a3;
    v13 = *(_DWORD *)(v12 + 8);
    v14 = *(_BYTE *)(v12 + 12);
    v15 = *(_BYTE *)(v12 + 13);
    v16 = *(_BYTE *)(v12 + 14);
    v17 = *(_BYTE *)(v12 + 15);
    v18 = *(_DWORD *)(v12 + 16);
    v19 = *(_BYTE *)(v12 + 20);
    *(_QWORD *)v22 = *(_QWORD *)v12;
    *(_DWORD *)&v22[8] = v13;
    v22[12] = v14;
    v22[13] = v15;
    v22[14] = v16;
    v22[15] = v17;
    *(_DWORD *)&v22[16] = v18;
    v22[20] = v19;
    a4(v22);
    if (!v7)
    {
      v20 = sub_1B1DA61CC(a7) << 16 >> 48;
      v23[0] = *(_OWORD *)v22;
      *(_QWORD *)((char *)v23 + 13) = *(_QWORD *)&v22[13];
      swift_retain();
      sub_1B1FDAA9C(v20, (uint64_t)v23);
      swift_release();
      LOBYTE(v9) = 1;
    }
  }
  return v9 & 1;
}

uint64_t sub_1B1EBDF80(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(__n128 *), uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *i;
  __n128 *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  id v17;
  uint64_t v18;
  __n128 v20;
  __n128 v21;
  __n128 v22;
  __n128 v23[5];
  __n128 v24;
  id v25[2];
  __n128 v26;
  __n128 v27;

  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(_QWORD *)(v8 + 16);
  if (v9)
  {
    for (i = (_QWORD *)(v8 + 56); (ValueMetadata *)*(i - 3) != &type metadata for TextureFileAsset; i += 5)
    {
      if (!--v9)
        return v9 & 1;
    }
    v13 = (__n128 *)(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
    v14 = v13->n128_u64[1];
    v15 = v13[1].n128_u64[0];
    v16 = v13[1].n128_u64[1];
    v20.n128_u64[0] = v13->n128_u64[0];
    v20.n128_u64[1] = v14;
    v21.n128_u64[0] = v15;
    v21.n128_u64[1] = v16;
    v22 = v13[2];
    v17 = (id)v22.n128_u64[0];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    a4(&v20);
    if (v7)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

    }
    else
    {
      v18 = sub_1B1DA61CC(a7) << 16 >> 48;
      v23[0] = v20;
      v23[1] = v21;
      v23[2] = v22;
      v23[3] = v20;
      v23[4] = v21;
      v24 = v22;
      v26 = v21;
      v27 = v20;
      sub_1B1AE72F4((uint64_t)&v24, (uint64_t)v25);
      swift_retain();
      sub_1B1FDABC8(v18, v23);
      swift_release();
      sub_1B1BA80C0((uint64_t)&v27);
      sub_1B1BA80C0((uint64_t)&v26);
      sub_1B1BB52CC(v25);
      LOBYTE(v9) = 1;
    }
  }
  return v9 & 1;
}

uint64_t sub_1B1EBE118(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(__int128 *), uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *i;
  __int128 *v12;
  char v13;
  char v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  __int128 v19;
  _BYTE v20[21];
  __int128 v21;
  _OWORD v22[2];

  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(_QWORD *)(v8 + 16);
  if (v9)
  {
    for (i = (_QWORD *)(v8 + 56); (ValueMetadata *)*(i - 3) != &type metadata for WrapAroundCamera; i += 5)
    {
      if (!--v9)
        return v9 & 1;
    }
    v12 = (__int128 *)(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
    v13 = *((_BYTE *)v12 + 24);
    v14 = *((_BYTE *)v12 + 25);
    v15 = *(_QWORD *)((char *)v12 + 28);
    v16 = *((_BYTE *)v12 + 36);
    v19 = *v12;
    *(_QWORD *)v20 = *((_QWORD *)v12 + 2);
    v20[8] = v13;
    v20[9] = v14;
    *(_QWORD *)&v20[12] = v15;
    v20[20] = v16;
    a4(&v19);
    if (!v7)
    {
      v17 = sub_1B1DA61CC(a7);
      v21 = v19;
      v22[0] = *(_OWORD *)v20;
      *(_QWORD *)((char *)v22 + 13) = *(_QWORD *)&v20[13];
      sub_1B1FEDB0C(v17 << 16 >> 48, (uint64_t)&v21);
      LOBYTE(v9) = 1;
    }
  }
  return v9 & 1;
}

uint64_t sub_1B1EBE224(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *i;

  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(v4 + 16);
  if (!v5)
    return 0;
  for (i = (_QWORD *)(v4 + 56); (ValueMetadata *)*(i - 3) != &type metadata for CameraToneMapping; i += 5)
  {
    if (!--v5)
      return 0;
  }
  a4(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
  return 1;
}

uint64_t sub_1B1EBE294(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(uint64_t *), uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *i;
  uint64_t v12;
  uint64_t v14;

  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(_QWORD *)(v8 + 16);
  if (v9)
  {
    for (i = (_QWORD *)(v8 + 56); (ValueMetadata *)*(i - 3) != &type metadata for ParticleAngleInit; i += 5)
    {
      if (!--v9)
        return v9 & 1;
    }
    v14 = *(_QWORD *)(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
    a4(&v14);
    if (!v7)
    {
      v12 = sub_1B1DA61CC(a7);
      sub_1B1FEDB68(v12 << 16 >> 48, *(float *)&v14, *((float *)&v14 + 1));
      LOBYTE(v9) = 1;
    }
  }
  return v9 & 1;
}

uint64_t sub_1B1EBE364(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(__int128 *), uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *i;
  char *v14;
  char v15;
  unsigned int v16;
  unsigned int v17;
  char v18;
  int v19;
  char v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  char v30;
  _OWORD v31[4];
  char v32;

  v8 = v7;
  v9 = *(_QWORD *)(a1 + 48);
  v10 = *(_QWORD *)(v9 + 16);
  if (v10)
  {
    for (i = (_QWORD *)(v9 + 56); (ValueMetadata *)*(i - 3) != &type metadata for ParticleColorInit; i += 5)
    {
      if (!--v10)
        return v10 & 1;
    }
    v14 = (char *)(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
    v15 = *v14;
    v16 = *((_DWORD *)v14 + 1);
    v17 = *((_DWORD *)v14 + 2);
    v18 = v14[12];
    v19 = *((_DWORD *)v14 + 4);
    v20 = v14[20];
    v21 = *((_OWORD *)v14 + 2);
    v22 = *((_QWORD *)v14 + 6);
    v23 = *((_QWORD *)v14 + 7);
    LOBYTE(v14) = v14[64];
    LOBYTE(v26) = v15;
    *(_QWORD *)((char *)&v26 + 4) = __PAIR64__(v17, v16);
    BYTE12(v26) = v18;
    LODWORD(v27) = v19;
    BYTE4(v27) = v20;
    v28 = v21;
    *(_QWORD *)&v29 = v22;
    *((_QWORD *)&v29 + 1) = v23;
    v30 = (char)v14;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    a4(&v26);
    if (v8)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      v24 = sub_1B1DA61CC(a7) << 16 >> 48;
      v32 = v30;
      v31[2] = v28;
      v31[3] = v29;
      v31[0] = v26;
      v31[1] = v27;
      swift_retain();
      sub_1B1FEDBB4(v24, (uint64_t)v31);
      swift_release();
      sub_1B1EC56D8((uint64_t)v31);
      LOBYTE(v10) = 1;
    }
  }
  return v10 & 1;
}

uint64_t sub_1B1EBE4D4(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *i;

  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(v4 + 16);
  if (!v5)
    return 0;
  for (i = (_QWORD *)(v4 + 56); (ValueMetadata *)*(i - 3) != &type metadata for ParticleMetalness; i += 5)
  {
    if (!--v5)
      return 0;
  }
  a4(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
  return 1;
}

uint64_t sub_1B1EBE544(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(__n128 *), uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *i;
  __n128 *v12;
  uint64_t v13;
  __n128 v15;
  unint64_t v16;
  __n128 v17;
  unint64_t v18;

  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(_QWORD *)(v8 + 16);
  if (v9)
  {
    for (i = (_QWORD *)(v8 + 56); (ValueMetadata *)*(i - 3) != &type metadata for ParticlePivotInit; i += 5)
    {
      if (!--v9)
        return v9 & 1;
    }
    v12 = (__n128 *)(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
    v15 = *v12;
    v16 = v12[1].n128_u64[0];
    a4(&v15);
    if (!v7)
    {
      v13 = sub_1B1DA61CC(a7);
      v17 = v15;
      v18 = v16;
      sub_1B1FEDC5C(v13 << 16 >> 48, &v17);
      LOBYTE(v9) = 1;
    }
  }
  return v9 & 1;
}

uint64_t sub_1B1EBE630(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *i;

  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(v4 + 16);
  if (!v5)
    return 0;
  for (i = (_QWORD *)(v4 + 56); (ValueMetadata *)*(i - 3) != &type metadata for ParticleRoughness; i += 5)
  {
    if (!--v5)
      return 0;
  }
  a4(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
  return 1;
}

uint64_t sub_1B1EBE6A0(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(__int128 *), uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *i;
  __int128 *v12;
  char v13;
  char v14;
  char v15;
  char v16;
  char v17;
  char v18;
  int v19;
  uint64_t v20;
  __int128 v22;
  __int128 v23;
  int v24;
  _OWORD v25[2];
  int v26;

  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(_QWORD *)(v8 + 16);
  if (v9)
  {
    for (i = (_QWORD *)(v8 + 56); (ValueMetadata *)*(i - 3) != &type metadata for PointCacheEmitter; i += 5)
    {
      if (!--v9)
        return v9 & 1;
    }
    v12 = (__int128 *)(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
    v13 = *((_BYTE *)v12 + 24);
    v14 = *((_BYTE *)v12 + 25);
    v15 = *((_BYTE *)v12 + 26);
    v16 = *((_BYTE *)v12 + 27);
    v17 = *((_BYTE *)v12 + 28);
    v18 = *((_BYTE *)v12 + 29);
    v19 = *((_DWORD *)v12 + 8);
    v22 = *v12;
    *(_QWORD *)&v23 = *((_QWORD *)v12 + 2);
    BYTE8(v23) = v13;
    BYTE9(v23) = v14;
    BYTE10(v23) = v15;
    BYTE11(v23) = v16;
    BYTE12(v23) = v17;
    BYTE13(v23) = v18;
    v24 = v19;
    a4(&v22);
    if (!v7)
    {
      v20 = sub_1B1DA61CC(a7) << 16 >> 48;
      v25[0] = v22;
      v25[1] = v23;
      v26 = v24;
      swift_retain();
      sub_1B1FDAD24(v20, (uint64_t)v25);
      swift_release();
      LOBYTE(v9) = 1;
    }
  }
  return v9 & 1;
}

uint64_t sub_1B1EBE7F0(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(uint64_t *), uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *i;
  uint64_t v12;
  unsigned __int8 v13;
  char v14;
  char v15;
  char v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  int v21;
  uint64_t v23;
  unsigned __int8 v24;
  char v25;
  char v26;
  char v27;

  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(_QWORD *)(v8 + 16);
  if (v9)
  {
    for (i = (_QWORD *)(v8 + 56); (ValueMetadata *)*(i - 3) != &type metadata for PointCacheSpawner; i += 5)
    {
      if (!--v9)
        return v9 & 1;
    }
    v12 = *(_QWORD *)(a1 + 128) + *i + a2 * a3;
    v13 = *(_BYTE *)(v12 + 8);
    v14 = *(_BYTE *)(v12 + 9);
    v15 = *(_BYTE *)(v12 + 10);
    v16 = *(_BYTE *)(v12 + 11);
    v23 = *(_QWORD *)v12;
    v24 = v13;
    v25 = v14;
    v26 = v15;
    v27 = v16;
    a4(&v23);
    if (!v7)
    {
      v17 = sub_1B1DA61CC(a7) << 16 >> 48;
      if (v25)
        v18 = 256;
      else
        v18 = 0;
      v19 = v18 | v24;
      if (v26)
        v20 = 0x10000;
      else
        v20 = 0;
      if (v27)
        v21 = 0x1000000;
      else
        v21 = 0;
      sub_1B1FEDCB8(v17, v23, v19 | v20 | v21);
      LOBYTE(v9) = 1;
    }
  }
  return v9 & 1;
}

uint64_t sub_1B1EBE924(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(__int16 *), uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *i;
  __int16 *v12;
  __int16 v13;
  unsigned __int8 v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  __int16 v19;
  unsigned __int8 v20;
  char v21;

  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(_QWORD *)(v8 + 16);
  if (v9)
  {
    for (i = (_QWORD *)(v8 + 56); (ValueMetadata *)*(i - 3) != &type metadata for TextureLoadPolicy; i += 5)
    {
      if (!--v9)
        return v9 & 1;
    }
    v12 = (__int16 *)(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
    v13 = *v12;
    v14 = *((_BYTE *)v12 + 2);
    LOBYTE(v12) = *((_BYTE *)v12 + 3);
    v19 = v13;
    v20 = v14;
    v21 = (char)v12;
    a4(&v19);
    if (!v7)
    {
      v15 = sub_1B1DA61CC(a7) << 16 >> 48;
      if (v21)
        v16 = 0x1000000;
      else
        v16 = 0;
      v17 = v16 | (v20 << 16) | (HIBYTE(v19) << 8) | v19;
      swift_retain();
      sub_1B1FDAE5C(v15, v17);
      swift_release();
      LOBYTE(v9) = 1;
    }
  }
  return v9 & 1;
}

uint64_t sub_1B1EBEA5C(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(uint64_t *), uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *i;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;

  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(_QWORD *)(v8 + 16);
  if (v9)
  {
    for (i = (_QWORD *)(v8 + 56); (ValueMetadata *)*(i - 3) != &type metadata for TextureNamedAsset; i += 5)
    {
      if (!--v9)
        return v9 & 1;
    }
    v13 = (uint64_t *)(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
    v14 = v13[1];
    v19 = *v13;
    v20 = v14;
    swift_bridgeObjectRetain();
    a4(&v19);
    if (v7)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v15 = sub_1B1DA61CC(a7) << 16 >> 48;
      v16 = v19;
      v17 = v20;
      swift_retain();
      sub_1B1FDAF90(v15, v16, v17);
      swift_bridgeObjectRelease();
      swift_release();
      LOBYTE(v9) = 1;
    }
  }
  return v9 & 1;
}

uint64_t sub_1B1EBEB84(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *i;

  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(v4 + 16);
  if (!v5)
    return 0;
  for (i = (_QWORD *)(v4 + 56); (ValueMetadata *)*(i - 3) != &type metadata for CameraColorGrading; i += 5)
  {
    if (!--v5)
      return 0;
  }
  a4(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
  return 1;
}

uint64_t sub_1B1EBEBF4(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *i;

  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(v4 + 16);
  if (!v5)
    return 0;
  for (i = (_QWORD *)(v4 + 56); (ValueMetadata *)*(i - 3) != &type metadata for CameraDepthOfField; i += 5)
  {
    if (!--v5)
      return 0;
  }
  a4(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
  return 1;
}

uint64_t sub_1B1EBEC64(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(uint64_t *), uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *i;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v22;
  uint64_t v23;
  char v24;

  v8 = v7;
  v9 = *(_QWORD *)(a1 + 48);
  v10 = *(_QWORD *)(v9 + 16);
  if (v10)
  {
    for (i = (_QWORD *)(v9 + 56); (ValueMetadata *)*(i - 3) != &type metadata for ColorRampComponent; i += 5)
    {
      if (!--v10)
        return v10 & 1;
    }
    v14 = *(_QWORD *)(a1 + 128) + *i + a2 * a3;
    v15 = *(_QWORD *)v14;
    v16 = *(_QWORD *)(v14 + 8);
    LOBYTE(v14) = *(_BYTE *)(v14 + 16);
    v22 = v15;
    v23 = v16;
    v24 = v14;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    a4(&v22);
    if (v8)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      v17 = sub_1B1DA61CC(a7) << 16 >> 48;
      v18 = v22;
      v19 = v23;
      v20 = v24;
      swift_retain();
      sub_1B1FDB094(v17, v18, v19, v20);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      LOBYTE(v10) = 1;
    }
  }
  return v10 & 1;
}

uint64_t sub_1B1EBEDB4(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(float *), uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *i;
  uint64_t v12;
  float v14;

  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(_QWORD *)(v8 + 16);
  if (v9)
  {
    for (i = (_QWORD *)(v8 + 56); (ValueMetadata *)*(i - 3) != &type metadata for DistanceConstraint; i += 5)
    {
      if (!--v9)
        return v9 & 1;
    }
    v14 = *(float *)(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
    a4(&v14);
    if (!v7)
    {
      v12 = sub_1B1DA61CC(a7);
      sub_1B1FEDD2C(v12 << 16 >> 48, v14);
      LOBYTE(v9) = 1;
    }
  }
  return v9 & 1;
}

uint64_t sub_1B1EBEE84(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(__int128 *), uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *i;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  char v21;
  char v22;
  char v23;
  char v24;
  char v25;
  char v26;
  char v27;
  uint64_t v28;
  char v29;
  __int16 v30;
  char v31;
  char v32;
  int v33;
  uint64_t v34;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  int v41;
  _OWORD v42[5];
  int v43;

  v8 = v7;
  v9 = *(_QWORD *)(a1 + 48);
  v10 = *(_QWORD *)(v9 + 16);
  if (v10)
  {
    for (i = (_QWORD *)(v9 + 56); (ValueMetadata *)*(i - 3) != &type metadata for EmitterDescription; i += 5)
    {
      if (!--v10)
        return v10 & 1;
    }
    v14 = *(_QWORD *)(a1 + 128) + *i + a2 * a3;
    v15 = *(_QWORD *)(v14 + 8);
    v16 = *(_QWORD *)(v14 + 16);
    v17 = *(_QWORD *)(v14 + 24);
    v18 = *(_QWORD *)(v14 + 32);
    v19 = *(_BYTE *)(v14 + 40);
    v20 = *(_BYTE *)(v14 + 41);
    v21 = *(_BYTE *)(v14 + 42);
    v22 = *(_BYTE *)(v14 + 43);
    v23 = *(_BYTE *)(v14 + 44);
    v24 = *(_BYTE *)(v14 + 45);
    v25 = *(_BYTE *)(v14 + 56);
    v26 = *(_BYTE *)(v14 + 57);
    v27 = *(_BYTE *)(v14 + 58);
    v28 = *(_QWORD *)(v14 + 64);
    v29 = *(_BYTE *)(v14 + 72);
    v30 = *(_WORD *)(v14 + 74);
    v31 = *(_BYTE *)(v14 + 76);
    v32 = *(_BYTE *)(v14 + 77);
    v33 = *(_DWORD *)(v14 + 80);
    *(_QWORD *)&v36 = *(_QWORD *)v14;
    *((_QWORD *)&v36 + 1) = v15;
    *(_QWORD *)&v37 = v16;
    *((_QWORD *)&v37 + 1) = v17;
    *(_QWORD *)&v38 = v18;
    BYTE8(v38) = v19;
    BYTE9(v38) = v20;
    BYTE10(v38) = v21;
    BYTE11(v38) = v22;
    BYTE12(v38) = v23;
    BYTE13(v38) = v24;
    *(_QWORD *)&v39 = *(_QWORD *)(v14 + 48);
    BYTE8(v39) = v25;
    BYTE9(v39) = v26;
    BYTE10(v39) = v27;
    *(_QWORD *)&v40 = v28;
    BYTE8(v40) = v29;
    WORD5(v40) = v30;
    BYTE12(v40) = v31;
    BYTE13(v40) = v32;
    v41 = v33;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    a4(&v36);
    if (v8)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      v34 = sub_1B1DA61CC(a7) << 16 >> 48;
      v42[3] = v39;
      v42[4] = v40;
      v43 = v41;
      v42[0] = v36;
      v42[1] = v37;
      v42[2] = v38;
      swift_retain();
      sub_1B1FDB188(v34, (uint64_t)v42);
      swift_release();
      sub_1B1EC55E8((uint64_t)v42);
      LOBYTE(v10) = 1;
    }
  }
  return v10 & 1;
}

uint64_t sub_1B1EBF0A4(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *i;

  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(v4 + 16);
  if (!v5)
    return 0;
  for (i = (_QWORD *)(v4 + 56); (ValueMetadata *)*(i - 3) != &type metadata for MaterialController; i += 5)
  {
    if (!--v5)
      return 0;
  }
  a4(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
  return 1;
}

uint64_t sub_1B1EBF114(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(__int128 *), uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *i;
  uint64_t v12;
  __int128 v14;

  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(_QWORD *)(v8 + 16);
  if (v9)
  {
    for (i = (_QWORD *)(v8 + 56); (ValueMetadata *)*(i - 3) != &type metadata for ParticleBurstSpawn; i += 5)
    {
      if (!--v9)
        return v9 & 1;
    }
    v14 = *(_OWORD *)(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
    a4(&v14);
    if (!v7)
    {
      v12 = sub_1B1DA61CC(a7);
      sub_1B1FEDD74(v12 << 16 >> 48, v14, *((uint64_t *)&v14 + 1));
      LOBYTE(v9) = 1;
    }
  }
  return v9 & 1;
}

uint64_t sub_1B1EBF1E4(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(__int128 *), uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *i;
  __int128 *v12;
  int v13;
  __int128 v14;
  uint64_t v15;
  __int128 v17;
  _BYTE v18[28];
  __int128 v19;
  _OWORD v20[2];

  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(_QWORD *)(v8 + 16);
  if (v9)
  {
    for (i = (_QWORD *)(v8 + 56); (ValueMetadata *)*(i - 3) != &type metadata for ParticleForceField; i += 5)
    {
      if (!--v9)
        return v9 & 1;
    }
    v12 = (__int128 *)(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
    v13 = *((_DWORD *)v12 + 10);
    v14 = v12[1];
    v17 = *v12;
    *(_OWORD *)v18 = v14;
    *(_QWORD *)&v18[16] = *((_QWORD *)v12 + 4);
    *(_DWORD *)&v18[24] = v13;
    a4(&v17);
    if (!v7)
    {
      v15 = sub_1B1DA61CC(a7);
      v19 = v17;
      v20[0] = *(_OWORD *)v18;
      *(_OWORD *)((char *)v20 + 12) = *(_OWORD *)&v18[12];
      sub_1B1FEDDC0(v15 << 16 >> 48, (uint64_t)&v19);
      LOBYTE(v9) = 1;
    }
  }
  return v9 & 1;
}

uint64_t sub_1B1EBF2D8(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(float *), uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *i;
  uint64_t v12;
  float v13;
  float v15;

  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(_QWORD *)(v8 + 16);
  if (v9)
  {
    for (i = (_QWORD *)(v8 + 56); (ValueMetadata *)*(i - 3) != &type metadata for ParticleSpawnDelay; i += 5)
    {
      if (!--v9)
        return v9 & 1;
    }
    v15 = *(float *)(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
    a4(&v15);
    if (!v7)
    {
      v12 = sub_1B1DA61CC(a7) << 16 >> 48;
      v13 = v15;
      swift_retain();
      sub_1B1FDB424(v12, v13);
      swift_release();
      LOBYTE(v9) = 1;
    }
  }
  return v9 & 1;
}

uint64_t sub_1B1EBF3D8(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(__int128 *), uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *i;
  _OWORD *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  _OWORD v29[9];
  _OWORD v30[2];
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  _OWORD v40[2];
  _OWORD v41[9];
  _OWORD v42[2];
  _OWORD v43[9];
  _OWORD v44[2];

  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(_QWORD *)(v8 + 16);
  if (v9)
  {
    for (i = (_QWORD *)(v8 + 56); (ValueMetadata *)*(i - 3) != &type metadata for PrimitiveGenerator; i += 5)
    {
      if (!--v9)
        return v9 & 1;
    }
    v13 = (_OWORD *)(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
    v15 = v13[1];
    v14 = v13[2];
    v41[0] = *v13;
    v41[1] = v15;
    v41[2] = v14;
    v16 = v13[6];
    v18 = v13[3];
    v17 = v13[4];
    v41[5] = v13[5];
    v41[6] = v16;
    v41[3] = v18;
    v41[4] = v17;
    v20 = v13[8];
    v19 = v13[9];
    v21 = v13[7];
    *(_OWORD *)((char *)v42 + 9) = *(_OWORD *)((char *)v13 + 153);
    v41[8] = v20;
    v42[0] = v19;
    v41[7] = v21;
    v22 = v13[9];
    v39 = v13[8];
    v40[0] = v22;
    *(_OWORD *)((char *)v40 + 9) = *(_OWORD *)((char *)v13 + 153);
    v23 = v13[5];
    v35 = v13[4];
    v36 = v23;
    v24 = v13[7];
    v37 = v13[6];
    v38 = v24;
    v25 = v13[1];
    v31 = *v13;
    v32 = v25;
    v26 = v13[3];
    v33 = v13[2];
    v34 = v26;
    sub_1B1E8498C((uint64_t)v41);
    a4(&v31);
    if (v7)
    {
      v29[8] = v39;
      v30[0] = v40[0];
      *(_OWORD *)((char *)v30 + 9) = *(_OWORD *)((char *)v40 + 9);
      v29[4] = v35;
      v29[5] = v36;
      v29[6] = v37;
      v29[7] = v38;
      v29[0] = v31;
      v29[1] = v32;
      v29[2] = v33;
      v29[3] = v34;
      sub_1B1E84958((uint64_t)v29);
    }
    else
    {
      v27 = sub_1B1DA61CC(a7) << 16 >> 48;
      v43[8] = v39;
      v44[0] = v40[0];
      *(_OWORD *)((char *)v44 + 9) = *(_OWORD *)((char *)v40 + 9);
      v43[4] = v35;
      v43[5] = v36;
      v43[6] = v37;
      v43[7] = v38;
      v43[0] = v31;
      v43[1] = v32;
      v43[2] = v33;
      v43[3] = v34;
      swift_retain();
      sub_1B1FDB528(v27, (uint64_t)v43);
      swift_release();
      sub_1B1E84958((uint64_t)v43);
      LOBYTE(v9) = 1;
    }
  }
  return v9 & 1;
}

uint64_t sub_1B1EBF5CC(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(unint64_t *), uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *i;
  unint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v19;
  uint64_t v20;

  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(_QWORD *)(v8 + 16);
  if (v9)
  {
    for (i = (_QWORD *)(v8 + 56); (ValueMetadata *)*(i - 3) != &type metadata for TexturePlaceholder; i += 5)
    {
      if (!--v9)
        return v9 & 1;
    }
    v13 = (unint64_t *)(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
    v14 = v13[1];
    v19 = *v13;
    v20 = v14;
    swift_unknownObjectRetain();
    a4(&v19);
    if (v7)
    {
      swift_unknownObjectRelease();
    }
    else
    {
      v15 = sub_1B1DA61CC(a7) << 16 >> 48;
      v16 = v19;
      v17 = v20;
      swift_retain();
      sub_1B1FDB6A0(v15, v16, v17);
      swift_release();
      swift_unknownObjectRelease();
      LOBYTE(v9) = 1;
    }
  }
  return v9 & 1;
}

uint64_t sub_1B1EBF6FC(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *i;

  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(v4 + 16);
  if (!v5)
    return 0;
  for (i = (_QWORD *)(v4 + 56); (ValueMetadata *)*(i - 3) != &type metadata for TextureRequireMask; i += 5)
  {
    if (!--v5)
      return 0;
  }
  a4(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
  return 1;
}

uint64_t sub_1B1EBF76C(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(__int128 *), uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *i;
  __int128 *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  _OWORD v29[10];
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  _OWORD v42[10];
  uint64_t v43;
  _OWORD v44[10];
  uint64_t v45;

  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(_QWORD *)(v8 + 16);
  if (v9)
  {
    for (i = (_QWORD *)(v8 + 56); (ValueMetadata *)*(i - 3) != &type metadata for TextureShaderAsset; i += 5)
    {
      if (!--v9)
        return v9 & 1;
    }
    v13 = (__int128 *)(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
    v15 = v13[1];
    v14 = v13[2];
    v42[0] = *v13;
    v42[1] = v15;
    v42[2] = v14;
    v16 = v13[6];
    v18 = v13[3];
    v17 = v13[4];
    v42[5] = v13[5];
    v42[6] = v16;
    v42[3] = v18;
    v42[4] = v17;
    v20 = v13[8];
    v19 = v13[9];
    v21 = v13[7];
    v43 = *((_QWORD *)v13 + 20);
    v42[8] = v20;
    v42[9] = v19;
    v42[7] = v21;
    v22 = v13[9];
    v39 = v13[8];
    v40 = v22;
    v41 = *((_QWORD *)v13 + 20);
    v23 = v13[5];
    v35 = v13[4];
    v36 = v23;
    v24 = v13[7];
    v37 = v13[6];
    v38 = v24;
    v25 = v13[1];
    v31 = *v13;
    v32 = v25;
    v26 = v13[3];
    v33 = v13[2];
    v34 = v26;
    sub_1B1EC58D0((uint64_t)v42);
    a4(&v31);
    if (v7)
    {
      v29[8] = v39;
      v29[9] = v40;
      v30 = v41;
      v29[4] = v35;
      v29[5] = v36;
      v29[6] = v37;
      v29[7] = v38;
      v29[0] = v31;
      v29[1] = v32;
      v29[2] = v33;
      v29[3] = v34;
      sub_1B1EC5968((uint64_t)v29);
    }
    else
    {
      v27 = sub_1B1DA61CC(a7) << 16 >> 48;
      v44[8] = v39;
      v44[9] = v40;
      v45 = v41;
      v44[4] = v35;
      v44[5] = v36;
      v44[6] = v37;
      v44[7] = v38;
      v44[0] = v31;
      v44[1] = v32;
      v44[2] = v33;
      v44[3] = v34;
      swift_retain();
      sub_1B1FDB7B4(v27, (uint64_t)v44);
      swift_release();
      sub_1B1EC5968((uint64_t)v44);
      LOBYTE(v9) = 1;
    }
  }
  return v9 & 1;
}

uint64_t sub_1B1EBF950(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *i;

  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(v4 + 16);
  if (!v5)
    return 0;
  for (i = (_QWORD *)(v4 + 56); (ValueMetadata *)*(i - 3) != &type metadata for WorldFogController; i += 5)
  {
    if (!--v5)
      return 0;
  }
  a4(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
  return 1;
}

uint64_t sub_1B1EBF9C0(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *i;

  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(v4 + 16);
  if (!v5)
    return 0;
  for (i = (_QWORD *)(v4 + 56); (ValueMetadata *)*(i - 3) != &type metadata for WorldIBLController; i += 5)
  {
    if (!--v5)
      return 0;
  }
  a4(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
  return 1;
}

uint64_t sub_1B1EBFA30(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *i;

  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(v4 + 16);
  if (!v5)
    return 0;
  for (i = (_QWORD *)(v4 + 56); (ValueMetadata *)*(i - 3) != &type metadata for AnimationTimeSource; i += 5)
  {
    if (!--v5)
      return 0;
  }
  a4(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
  return 1;
}

uint64_t sub_1B1EBFAA0(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(char *), uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1B1EBA250(a1, a2, a3, a4, a5, a6, a7, type metadata accessor for MetalFunctionScript, (void (*)(uint64_t, char *, uint64_t))sub_1B1FDB974) & 1;
}

uint64_t sub_1B1EBFB00(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *i;

  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(v4 + 16);
  if (!v5)
    return 0;
  for (i = (_QWORD *)(v4 + 56); (ValueMetadata *)*(i - 3) != &type metadata for ParticleBoxCollider; i += 5)
  {
    if (!--v5)
      return 0;
  }
  a4(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
  return 1;
}

uint64_t sub_1B1EBFB70(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(__int128 *), uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *i;
  uint64_t v12;
  int v13;
  char v14;
  int v15;
  char v16;
  int v17;
  char v18;
  char v19;
  char v20;
  char v21;
  int v22;
  uint64_t v23;
  __int128 v25;
  __int128 v26;
  int v27;
  _OWORD v28[2];
  int v29;

  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(_QWORD *)(v8 + 16);
  if (v9)
  {
    for (i = (_QWORD *)(v8 + 56); (ValueMetadata *)*(i - 3) != &type metadata for ParticleBoxRenderer; i += 5)
    {
      if (!--v9)
        return v9 & 1;
    }
    v12 = *(_QWORD *)(a1 + 128) + *i + a2 * a3;
    v13 = *(_DWORD *)(v12 + 8);
    v14 = *(_BYTE *)(v12 + 12);
    v15 = *(_DWORD *)(v12 + 16);
    v16 = *(_BYTE *)(v12 + 20);
    v17 = *(_DWORD *)(v12 + 24);
    v18 = *(_BYTE *)(v12 + 28);
    v19 = *(_BYTE *)(v12 + 29);
    v20 = *(_BYTE *)(v12 + 30);
    v21 = *(_BYTE *)(v12 + 31);
    v22 = *(_DWORD *)(v12 + 32);
    *(_QWORD *)&v25 = *(_QWORD *)v12;
    DWORD2(v25) = v13;
    BYTE12(v25) = v14;
    LODWORD(v26) = v15;
    BYTE4(v26) = v16;
    DWORD2(v26) = v17;
    BYTE12(v26) = v18;
    BYTE13(v26) = v19;
    BYTE14(v26) = v20;
    HIBYTE(v26) = v21;
    v27 = v22;
    a4(&v25);
    if (!v7)
    {
      v23 = sub_1B1DA61CC(a7) << 16 >> 48;
      v28[0] = v25;
      v28[1] = v26;
      v29 = v27;
      swift_retain();
      sub_1B1FDB988(v23, (uint64_t)v28);
      swift_release();
      LOBYTE(v9) = 1;
    }
  }
  return v9 & 1;
}

uint64_t sub_1B1EBFCD4(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(__int128 *), uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *i;
  uint64_t v12;
  __int128 v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  __int128 v19;
  __int128 v20;
  _BYTE v21[28];
  _OWORD v22[2];
  _OWORD v23[2];

  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(_QWORD *)(v8 + 16);
  if (v9)
  {
    for (i = (_QWORD *)(v8 + 56); (ValueMetadata *)*(i - 3) != &type metadata for ParticleGrowEmitter; i += 5)
    {
      if (!--v9)
        return v9 & 1;
    }
    v12 = *(_QWORD *)(a1 + 128) + *i + a2 * a3;
    v13 = *(_OWORD *)(v12 + 16);
    v14 = *(_DWORD *)(v12 + 40);
    v15 = *(_QWORD *)(v12 + 48);
    v16 = *(_DWORD *)(v12 + 56);
    LOBYTE(v19) = *(_BYTE *)v12;
    v20 = v13;
    *(_QWORD *)v21 = *(_QWORD *)(v12 + 32);
    *(_DWORD *)&v21[8] = v14;
    *(_QWORD *)&v21[16] = v15;
    *(_DWORD *)&v21[24] = v16;
    a4(&v19);
    if (!v7)
    {
      v17 = sub_1B1DA61CC(a7);
      v22[0] = v19;
      v22[1] = v20;
      v23[0] = *(_OWORD *)v21;
      *(_OWORD *)((char *)v23 + 12) = *(_OWORD *)&v21[12];
      sub_1B1FEDE1C(v17 << 16 >> 48, (uint64_t)v22);
      LOBYTE(v9) = 1;
    }
  }
  return v9 & 1;
}

uint64_t sub_1B1EBFDE8(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *i;

  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(v4 + 16);
  if (!v5)
    return 0;
  for (i = (_QWORD *)(v4 + 56); (ValueMetadata *)*(i - 3) != &type metadata for ParticleSDFCollider; i += 5)
  {
    if (!--v5)
      return 0;
  }
  a4(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
  return 1;
}

uint64_t sub_1B1EBFE58(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(__n128 *), uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *i;
  __n128 *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  id v17;
  uint64_t v18;
  __n128 v20;
  __n128 v21;
  __n128 v22;
  __n128 v23[5];
  __n128 v24;
  id v25[2];
  __n128 v26;
  __n128 v27;

  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(_QWORD *)(v8 + 16);
  if (v9)
  {
    for (i = (_QWORD *)(v8 + 56); (ValueMetadata *)*(i - 3) != &type metadata for PointCacheFileAsset; i += 5)
    {
      if (!--v9)
        return v9 & 1;
    }
    v13 = (__n128 *)(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
    v14 = v13->n128_u64[1];
    v15 = v13[1].n128_u64[0];
    v16 = v13[1].n128_u64[1];
    v20.n128_u64[0] = v13->n128_u64[0];
    v20.n128_u64[1] = v14;
    v21.n128_u64[0] = v15;
    v21.n128_u64[1] = v16;
    v22 = v13[2];
    v17 = (id)v22.n128_u64[0];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    a4(&v20);
    if (v7)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

    }
    else
    {
      v18 = sub_1B1DA61CC(a7) << 16 >> 48;
      v23[0] = v20;
      v23[1] = v21;
      v23[2] = v22;
      v23[3] = v20;
      v23[4] = v21;
      v24 = v22;
      v26 = v21;
      v27 = v20;
      sub_1B1AE72F4((uint64_t)&v24, (uint64_t)v25);
      swift_retain();
      sub_1B1FDBAB4(v18, v23);
      swift_release();
      sub_1B1BA80C0((uint64_t)&v27);
      sub_1B1BA80C0((uint64_t)&v26);
      sub_1B1BB52CC(v25);
      LOBYTE(v9) = 1;
    }
  }
  return v9 & 1;
}

uint64_t sub_1B1EBFFF0(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *i;

  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(v4 + 16);
  if (!v5)
    return 0;
  for (i = (_QWORD *)(v4 + 56); (ValueMetadata *)*(i - 3) != &type metadata for PointCacheFromModel; i += 5)
  {
    if (!--v5)
      return 0;
  }
  a4(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
  return 1;
}

uint64_t sub_1B1EC0060(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(unint64_t *), uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *i;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 v14;
  unsigned __int16 v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unint64_t v23;
  uint64_t v24;
  unsigned __int8 v25;
  unsigned __int16 v26;
  uint64_t v27;

  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(_QWORD *)(v8 + 16);
  if (v9)
  {
    for (i = (_QWORD *)(v8 + 56); (ValueMetadata *)*(i - 3) != &type metadata for PointCacheGenerator; i += 5)
    {
      if (!--v9)
        return v9 & 1;
    }
    v12 = *(_QWORD *)(a1 + 128) + *i + a2 * a3;
    v13 = *(_QWORD *)(v12 + 8);
    v14 = *(_BYTE *)(v12 + 16);
    v15 = *(_WORD *)(v12 + 18);
    v16 = *(_QWORD *)(v12 + 24);
    v23 = *(_QWORD *)v12;
    v24 = v13;
    v25 = v14;
    v26 = v15;
    v27 = v16;
    a4(&v23);
    if (!v7)
    {
      v17 = sub_1B1DA61CC(a7) << 16 >> 48;
      v18 = v23;
      v19 = v24;
      v20 = v27;
      v21 = v25 | (v26 << 16);
      swift_retain();
      sub_1B1FDBC10(v17, v18, v19, v21, v20);
      swift_release();
      LOBYTE(v9) = 1;
    }
  }
  return v9 & 1;
}

uint64_t sub_1B1EC01B0(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(__int128 *), uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *i;
  uint64_t v12;
  int v13;
  char v14;
  int v15;
  uint64_t v16;
  __int128 v18;
  _BYTE v19[20];
  _OWORD v20[2];
  int v21;

  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(_QWORD *)(v8 + 16);
  if (v9)
  {
    for (i = (_QWORD *)(v8 + 56); (ValueMetadata *)*(i - 3) != &type metadata for ProjectorParameters; i += 5)
    {
      if (!--v9)
        return v9 & 1;
    }
    v12 = *(_QWORD *)(a1 + 128) + *i + a2 * a3;
    v13 = *(_DWORD *)(v12 + 8);
    v14 = *(_BYTE *)(v12 + 12);
    v15 = *(_DWORD *)(v12 + 24);
    *(_QWORD *)&v18 = *(_QWORD *)v12;
    DWORD2(v18) = v13;
    BYTE12(v18) = v14;
    *(_QWORD *)v19 = *(_QWORD *)(v12 + 16);
    *(_DWORD *)&v19[8] = v15;
    *(_QWORD *)&v19[12] = *(_QWORD *)(v12 + 28);
    a4(&v18);
    if (!v7)
    {
      v16 = sub_1B1DA61CC(a7);
      v20[0] = v18;
      v20[1] = *(_OWORD *)v19;
      v21 = *(_DWORD *)&v19[16];
      sub_1B1FEDE7C(v16 << 16 >> 48, (uint64_t)v20);
      LOBYTE(v9) = 1;
    }
  }
  return v9 & 1;
}

uint64_t sub_1B1EC02C0(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(unint64_t *), uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *i;
  uint64_t v12;
  float v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  float v17;
  uint64_t v18;
  unint64_t v20;
  float v21;
  uint64_t v22;

  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(_QWORD *)(v8 + 16);
  if (v9)
  {
    for (i = (_QWORD *)(v8 + 56); (ValueMetadata *)*(i - 3) != &type metadata for SDFTextureGenerator; i += 5)
    {
      if (!--v9)
        return v9 & 1;
    }
    v12 = *(_QWORD *)(a1 + 128) + *i + a2 * a3;
    v13 = *(float *)(v12 + 8);
    v14 = *(_QWORD *)(v12 + 16);
    v20 = *(_QWORD *)v12;
    v21 = v13;
    v22 = v14;
    a4(&v20);
    if (!v7)
    {
      v15 = sub_1B1DA61CC(a7) << 16 >> 48;
      v16 = v20;
      v17 = v21;
      v18 = v22;
      swift_retain();
      sub_1B1FDBD70(v15, v16, v18, v17);
      swift_release();
      LOBYTE(v9) = 1;
    }
  }
  return v9 & 1;
}

uint64_t sub_1B1EC03F4(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(__int128 *), uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *i;
  uint64_t v12;
  char v13;
  int v14;
  char v15;
  int v16;
  char v17;
  char v18;
  char v19;
  char v20;
  uint64_t v21;
  __int128 v23;
  _BYTE v24[28];
  __int128 v25;
  _OWORD v26[2];

  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(_QWORD *)(v8 + 16);
  if (v9)
  {
    for (i = (_QWORD *)(v8 + 56); (ValueMetadata *)*(i - 3) != &type metadata for ParticleLineRenderer; i += 5)
    {
      if (!--v9)
        return v9 & 1;
    }
    v12 = *(_QWORD *)(a1 + 128) + *i + a2 * a3;
    v13 = *(_BYTE *)(v12 + 4);
    v14 = *(_DWORD *)(v12 + 8);
    v15 = *(_BYTE *)(v12 + 12);
    v16 = *(_DWORD *)(v12 + 16);
    v17 = *(_BYTE *)(v12 + 20);
    v18 = *(_BYTE *)(v12 + 21);
    v19 = *(_BYTE *)(v12 + 32);
    v20 = *(_BYTE *)(v12 + 33);
    LODWORD(v23) = *(_DWORD *)v12;
    BYTE4(v23) = v13;
    DWORD2(v23) = v14;
    BYTE12(v23) = v15;
    *(_DWORD *)v24 = v16;
    v24[4] = v17;
    v24[5] = v18;
    *(_QWORD *)&v24[8] = *(_QWORD *)(v12 + 24);
    v24[16] = v19;
    v24[17] = v20;
    *(_QWORD *)&v24[20] = *(_QWORD *)(v12 + 36);
    a4(&v23);
    if (!v7)
    {
      v21 = sub_1B1DA61CC(a7) << 16 >> 48;
      v25 = v23;
      v26[0] = *(_OWORD *)v24;
      *(_OWORD *)((char *)v26 + 12) = *(_OWORD *)&v24[12];
      swift_retain();
      sub_1B1FDBEA8(v21, &v25);
      swift_release();
      LOBYTE(v9) = 1;
    }
  }
  return v9 & 1;
}

uint64_t sub_1B1EC0558(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *i;

  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(v4 + 16);
  if (!v5)
    return 0;
  for (i = (_QWORD *)(v4 + 56); (ValueMetadata *)*(i - 3) != &type metadata for ParticleMeshCollider; i += 5)
  {
    if (!--v5)
      return 0;
  }
  a4(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
  return 1;
}

uint64_t sub_1B1EC05C8(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(int32x4_t *), uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *i;
  uint64_t v12;
  char v13;
  uint64_t v14;
  int32x4_t v16;
  _BYTE v17[24];
  int32x4_t v18[2];
  uint64_t v19;

  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(_QWORD *)(v8 + 16);
  if (v9)
  {
    for (i = (_QWORD *)(v8 + 56); (ValueMetadata *)*(i - 3) != &type metadata for ParticleMeshRenderer; i += 5)
    {
      if (!--v9)
        return v9 & 1;
    }
    v12 = *(_QWORD *)(a1 + 128) + *i + a2 * a3;
    v13 = *(_BYTE *)(v12 + 16);
    v16 = *(int32x4_t *)v12;
    v17[0] = v13;
    *(_OWORD *)&v17[8] = *(_OWORD *)(v12 + 24);
    a4(&v16);
    if (!v7)
    {
      v14 = sub_1B1DA61CC(a7) << 16 >> 48;
      v18[0] = v16;
      v18[1] = *(int32x4_t *)v17;
      v19 = *(_QWORD *)&v17[16];
      swift_retain();
      sub_1B1FDBF78(v14, v18);
      swift_release();
      LOBYTE(v9) = 1;
    }
  }
  return v9 & 1;
}

uint64_t sub_1B1EC06E8(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(__int128 *), uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *i;
  __int128 *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _OWORD v26[2];
  _OWORD v27[7];
  _OWORD v28[2];

  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(_QWORD *)(v8 + 16);
  if (v9)
  {
    for (i = (_QWORD *)(v8 + 56); (ValueMetadata *)*(i - 3) != &type metadata for ParticleQuadRenderer; i += 5)
    {
      if (!--v9)
        return v9 & 1;
    }
    v12 = (__int128 *)(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
    v13 = v12[7];
    v25 = v12[6];
    v26[0] = v13;
    *(_OWORD *)((char *)v26 + 11) = *(__int128 *)((char *)v12 + 123);
    v14 = v12[3];
    v21 = v12[2];
    v22 = v14;
    v15 = v12[5];
    v23 = v12[4];
    v24 = v15;
    v16 = v12[1];
    v19 = *v12;
    v20 = v16;
    a4(&v19);
    if (!v7)
    {
      v17 = sub_1B1DA61CC(a7) << 16 >> 48;
      v27[6] = v25;
      v28[0] = v26[0];
      *(_OWORD *)((char *)v28 + 11) = *(_OWORD *)((char *)v26 + 11);
      v27[2] = v21;
      v27[3] = v22;
      v27[4] = v23;
      v27[5] = v24;
      v27[0] = v19;
      v27[1] = v20;
      swift_retain();
      sub_1B1FDC0A4(v17, v27);
      swift_release();
      LOBYTE(v9) = 1;
    }
  }
  return v9 & 1;
}

uint64_t sub_1B1EC083C(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *i;

  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(v4 + 16);
  if (!v5)
    return 0;
  for (i = (_QWORD *)(v4 + 56); (ValueMetadata *)*(i - 3) != &type metadata for ParticleRibbonTrails; i += 5)
  {
    if (!--v5)
      return 0;
  }
  a4(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
  return 1;
}

uint64_t sub_1B1EC08AC(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(__int128 *), uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *i;
  char *v12;
  char v13;
  int v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  _BYTE v35[25];
  _OWORD v36[5];
  _OWORD v37[3];
  void (*v38)(__int128 *);

  v8 = v7;
  v9 = *(_QWORD *)(a1 + 48);
  v10 = *(_QWORD *)(v9 + 16);
  if (v10)
  {
    for (i = (_QWORD *)(v9 + 56); (ValueMetadata *)*(i - 3) != &type metadata for ParticleSizeOverLife; i += 5)
    {
      if (!--v10)
        return v10 & 1;
    }
    v12 = (char *)(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
    v13 = *v12;
    v14 = *((_DWORD *)v12 + 1);
    v15 = v12[8];
    v16 = *((_QWORD *)v12 + 2);
    v17 = *((_QWORD *)v12 + 3);
    v18 = *((_QWORD *)v12 + 4);
    v19 = v12[40];
    v20 = *((_QWORD *)v12 + 6);
    v21 = *((_QWORD *)v12 + 7);
    v22 = *((_QWORD *)v12 + 8);
    v23 = v12[72];
    v24 = *((_QWORD *)v12 + 10);
    v25 = *((_QWORD *)v12 + 11);
    v26 = *((_QWORD *)v12 + 12);
    LOBYTE(v12) = v12[104];
    LOBYTE(v30) = v13;
    DWORD1(v30) = v14;
    BYTE8(v30) = v15;
    *(_QWORD *)&v31 = v16;
    *((_QWORD *)&v31 + 1) = v17;
    *(_QWORD *)&v32 = v18;
    BYTE8(v32) = v19;
    *(_QWORD *)&v33 = v20;
    *((_QWORD *)&v33 + 1) = v21;
    *(_QWORD *)&v34 = v22;
    BYTE8(v34) = v23;
    *(_QWORD *)v35 = v24;
    *(_QWORD *)&v35[8] = v25;
    *(_QWORD *)&v35[16] = v26;
    v35[24] = (_BYTE)v12;
    v38 = a4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v38(&v30);
    if (v8)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      v27 = sub_1B1DA61CC(a7) << 16 >> 48;
      v36[4] = v34;
      v37[0] = *(_OWORD *)v35;
      *(_OWORD *)((char *)v37 + 9) = *(_OWORD *)&v35[9];
      v36[0] = v30;
      v36[1] = v31;
      v36[2] = v32;
      v36[3] = v33;
      swift_retain();
      sub_1B1FDC200(v27, v36);
      swift_release();
      sub_1B1EC5738((uint64_t)v36);
      LOBYTE(v10) = 1;
    }
  }
  return v10 & 1;
}

uint64_t sub_1B1EC0AE8(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *i;

  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(v4 + 16);
  if (!v5)
    return 0;
  for (i = (_QWORD *)(v4 + 56); (ValueMetadata *)*(i - 3) != &type metadata for ParticleTextureFrame; i += 5)
  {
    if (!--v5)
      return 0;
  }
  a4(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
  return 1;
}

uint64_t sub_1B1EC0B58(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(__n128 *), uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *i;
  __n128 *v12;
  unsigned __int8 v13;
  unsigned __int32 v14;
  uint64_t v15;
  __n128 v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v20;

  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(_QWORD *)(v8 + 16);
  if (v9)
  {
    for (i = (_QWORD *)(v8 + 56); (ValueMetadata *)*(i - 3) != &type metadata for ParticleVelocityInit; i += 5)
    {
      if (!--v9)
        return v9 & 1;
    }
    v12 = (__n128 *)(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
    v13 = v12[1].n128_u8[0];
    v14 = v12[1].n128_u32[1];
    v17 = *v12;
    LOBYTE(v18) = v13;
    HIDWORD(v18) = v14;
    a4(&v17);
    if (!v7)
    {
      v15 = sub_1B1DA61CC(a7);
      v19 = v17;
      v20 = v18;
      sub_1B1FEDED8(v15 << 16 >> 48, &v19);
      LOBYTE(v9) = 1;
    }
  }
  return v9 & 1;
}

uint64_t sub_1B1EC0C4C(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(uint64_t *), uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *i;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v18;
  char v19;

  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(_QWORD *)(v8 + 16);
  if (v9)
  {
    for (i = (_QWORD *)(v8 + 56); (ValueMetadata *)*(i - 3) != &type metadata for TextureRequireMipmap; i += 5)
    {
      if (!--v9)
        return v9 & 1;
    }
    v12 = *(_QWORD *)(a1 + 128) + *i + a2 * a3;
    v13 = *(_QWORD *)v12;
    LOBYTE(v12) = *(_BYTE *)(v12 + 8);
    v18 = v13;
    v19 = v12;
    a4(&v18);
    if (!v7)
    {
      v14 = sub_1B1DA61CC(a7) << 16 >> 48;
      v15 = v18;
      v16 = v19;
      swift_retain();
      sub_1B1FDC4A4(v14, v15, v16);
      swift_release();
      LOBYTE(v9) = 1;
    }
  }
  return v9 & 1;
}

uint64_t sub_1B1EC0D68(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *i;

  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(v4 + 16);
  if (!v5)
    return 0;
  for (i = (_QWORD *)(v4 + 56); (ValueMetadata *)*(i - 3) != &type metadata for ForceFieldsController; i += 5)
  {
    if (!--v5)
      return 0;
  }
  a4(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
  return 1;
}

uint64_t sub_1B1EC0DD8(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(char *), uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *i;
  uint64_t v12;
  float v13;
  uint64_t v14;
  char v16[4];
  float v17;

  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(_QWORD *)(v8 + 16);
  if (v9)
  {
    for (i = (_QWORD *)(v8 + 56); (ValueMetadata *)*(i - 3) != &type metadata for OrientationConstraint; i += 5)
    {
      if (!--v9)
        return v9 & 1;
    }
    v12 = *(_QWORD *)(a1 + 128) + *i + a2 * a3;
    v13 = *(float *)(v12 + 4);
    v16[0] = *(_BYTE *)v12;
    v17 = v13;
    a4(v16);
    if (!v7)
    {
      v14 = sub_1B1DA61CC(a7);
      sub_1B1FEDF34(v14 << 16 >> 48, v16[0], v17);
      LOBYTE(v9) = 1;
    }
  }
  return v9 & 1;
}

uint64_t sub_1B1EC0EB8(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(uint64_t *), uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *i;
  uint64_t v12;
  uint64_t v14;

  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(_QWORD *)(v8 + 16);
  if (v9)
  {
    for (i = (_QWORD *)(v8 + 56); (ValueMetadata *)*(i - 3) != &type metadata for ParticleAOBoxRenderer; i += 5)
    {
      if (!--v9)
        return v9 & 1;
    }
    v14 = *(_QWORD *)(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
    a4(&v14);
    if (!v7)
    {
      v12 = sub_1B1DA61CC(a7);
      sub_1B1FEDF88(v12 << 16 >> 48, *(float *)&v14, *((float *)&v14 + 1));
      LOBYTE(v9) = 1;
    }
  }
  return v9 & 1;
}

uint64_t sub_1B1EC0F88(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *i;

  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(v4 + 16);
  if (!v5)
    return 0;
  for (i = (_QWORD *)(v4 + 56); (ValueMetadata *)*(i - 3) != &type metadata for ParticleAngleVelocity; i += 5)
  {
    if (!--v5)
      return 0;
  }
  a4(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
  return 1;
}

uint64_t sub_1B1EC0FF8(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(__int128 *), uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *i;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  __int128 v22;
  _BYTE v23[20];
  _OWORD v24[2];
  int v25;

  v8 = v7;
  v9 = *(_QWORD *)(a1 + 48);
  v10 = *(_QWORD *)(v9 + 16);
  if (v10)
  {
    for (i = (_QWORD *)(v9 + 56); (ValueMetadata *)*(i - 3) != &type metadata for ParticleColorOverLife; i += 5)
    {
      if (!--v10)
        return v10 & 1;
    }
    v14 = *(_QWORD *)(a1 + 128) + *i + a2 * a3;
    v15 = *(_DWORD *)(v14 + 4);
    v16 = *(_QWORD *)(v14 + 8);
    v17 = *(_QWORD *)(v14 + 16);
    v18 = *(_BYTE *)(v14 + 24);
    v19 = *(_BYTE *)(v14 + 25);
    LOBYTE(v22) = *(_BYTE *)v14;
    DWORD1(v22) = v15;
    *((_QWORD *)&v22 + 1) = v16;
    *(_QWORD *)v23 = v17;
    v23[8] = v18;
    v23[9] = v19;
    *(_QWORD *)&v23[12] = *(_QWORD *)(v14 + 28);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    a4(&v22);
    if (v8)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      v20 = sub_1B1DA61CC(a7) << 16 >> 48;
      v24[0] = v22;
      v24[1] = *(_OWORD *)v23;
      v25 = *(_DWORD *)&v23[16];
      swift_retain();
      sub_1B1FDC5C0(v20, (uint64_t)v24);
      swift_release();
      sub_1B1EC5708((uint64_t)v24);
      LOBYTE(v10) = 1;
    }
  }
  return v10 & 1;
}

uint64_t sub_1B1EC1164(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(uint64_t *), uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *i;
  uint64_t v12;
  uint64_t v14;

  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(_QWORD *)(v8 + 16);
  if (v9)
  {
    for (i = (_QWORD *)(v8 + 56); (ValueMetadata *)*(i - 3) != &type metadata for ParticleDecalRenderer; i += 5)
    {
      if (!--v9)
        return v9 & 1;
    }
    v14 = *(_QWORD *)(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
    a4(&v14);
    if (!v7)
    {
      v12 = sub_1B1DA61CC(a7);
      sub_1B1FEDFD4(v12 << 16 >> 48, v14);
      LOBYTE(v9) = 1;
    }
  }
  return v9 & 1;
}

uint64_t sub_1B1EC1234(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *i;

  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(v4 + 16);
  if (!v5)
    return 0;
  for (i = (_QWORD *)(v4 + 56); (ValueMetadata *)*(i - 3) != &type metadata for ParticlePlaneCollider; i += 5)
  {
    if (!--v5)
      return 0;
  }
  a4(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
  return 1;
}

uint64_t sub_1B1EC12A4(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(__n128 *), uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *i;
  __n128 *v12;
  unsigned __int32 v13;
  unsigned __int8 v14;
  unsigned __int32 v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  unsigned __int32 v19;
  unsigned __int8 v20;
  unsigned __int8 v21;
  uint64_t v22;
  __n128 v24;
  __n128 v25;
  __n128 v26;
  __n128 v27[3];

  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(_QWORD *)(v8 + 16);
  if (v9)
  {
    for (i = (_QWORD *)(v8 + 56); (ValueMetadata *)*(i - 3) != &type metadata for ParticlePointRenderer; i += 5)
    {
      if (!--v9)
        return v9 & 1;
    }
    v12 = (__n128 *)(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
    v13 = v12->n128_u32[2];
    v14 = v12->n128_u8[12];
    v15 = v12[1].n128_u32[0];
    v16 = v12[1].n128_u8[4];
    v17 = v12[1].n128_u8[5];
    v18 = v12[1].n128_u8[6];
    v19 = v12[1].n128_u32[2];
    v20 = v12[1].n128_u8[12];
    v21 = v12[1].n128_u8[13];
    v24.n128_u64[0] = v12->n128_u64[0];
    v24.n128_u32[2] = v13;
    v24.n128_u8[12] = v14;
    v25.n128_u32[0] = v15;
    v25.n128_u8[4] = v16;
    v25.n128_u8[5] = v17;
    v25.n128_u8[6] = v18;
    v25.n128_u32[2] = v19;
    v25.n128_u8[12] = v20;
    v25.n128_u8[13] = v21;
    v26 = v12[2];
    a4(&v24);
    if (!v7)
    {
      v22 = sub_1B1DA61CC(a7) << 16 >> 48;
      v27[0] = v24;
      v27[1] = v25;
      v27[2] = v26;
      swift_retain();
      sub_1B1FDC6CC(v22, v27);
      swift_release();
      LOBYTE(v9) = 1;
    }
  }
  return v9 & 1;
}

uint64_t sub_1B1EC1404(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(float *), uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *i;
  uint64_t v12;
  float v13;
  float v15;

  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(_QWORD *)(v8 + 16);
  if (v9)
  {
    for (i = (_QWORD *)(v8 + 56); (ValueMetadata *)*(i - 3) != &type metadata for ParticleSpawnDuration; i += 5)
    {
      if (!--v9)
        return v9 & 1;
    }
    v15 = *(float *)(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
    a4(&v15);
    if (!v7)
    {
      v12 = sub_1B1DA61CC(a7) << 16 >> 48;
      v13 = v15;
      swift_retain();
      sub_1B1FDC7F8(v12, v13);
      swift_release();
      LOBYTE(v9) = 1;
    }
  }
  return v9 & 1;
}

uint64_t sub_1B1EC1504(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(__n128 *), uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *i;
  __n128 *v12;
  uint64_t v13;
  __n128 v15;
  unint64_t v16;
  __n128 v17;
  unint64_t v18;

  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(_QWORD *)(v8 + 16);
  if (v9)
  {
    for (i = (_QWORD *)(v8 + 56); (ValueMetadata *)*(i - 3) != &type metadata for ParticleVariableSpawn; i += 5)
    {
      if (!--v9)
        return v9 & 1;
    }
    v12 = (__n128 *)(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
    v15 = *v12;
    v16 = v12[1].n128_u64[0];
    a4(&v15);
    if (!v7)
    {
      v13 = sub_1B1DA61CC(a7);
      v17 = v15;
      v18 = v16;
      sub_1B1FEE01C(v13 << 16 >> 48, &v17);
      LOBYTE(v9) = 1;
    }
  }
  return v9 & 1;
}

uint64_t sub_1B1EC15F0(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *i;

  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(v4 + 16);
  if (!v5)
    return 0;
  for (i = (_QWORD *)(v4 + 56); (ValueMetadata *)*(i - 3) != &type metadata for PhysicsBodyController; i += 5)
  {
    if (!--v5)
      return 0;
  }
  a4(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
  return 1;
}

uint64_t sub_1B1EC1660(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(unint64_t *), uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *i;
  uint64_t v12;
  char v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  unint64_t v18;
  char v19;

  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(_QWORD *)(v8 + 16);
  if (v9)
  {
    for (i = (_QWORD *)(v8 + 56); (ValueMetadata *)*(i - 3) != &type metadata for SceneKitAssetInstance; i += 5)
    {
      if (!--v9)
        return v9 & 1;
    }
    v12 = *(_QWORD *)(a1 + 128) + *i + a2 * a3;
    v13 = *(_BYTE *)(v12 + 8);
    v18 = *(_QWORD *)v12;
    v19 = v13;
    a4(&v18);
    if (!v7)
    {
      v14 = sub_1B1DA61CC(a7) << 16 >> 48;
      v15 = v18;
      v16 = v19;
      swift_retain();
      sub_1B1FDCA28(v14, v15, v16);
      swift_release();
      LOBYTE(v9) = 1;
    }
  }
  return v9 & 1;
}

uint64_t sub_1B1EC177C(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(_QWORD **), uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *i;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v16;

  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(_QWORD *)(v8 + 16);
  if (v9)
  {
    for (i = (_QWORD *)(v8 + 56); (ValueMetadata *)*(i - 3) != &type metadata for TextureArrayFileAsset; i += 5)
    {
      if (!--v9)
        return v9 & 1;
    }
    v16 = *(_QWORD **)(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
    swift_bridgeObjectRetain();
    a4(&v16);
    if (v7)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v13 = sub_1B1DA61CC(a7) << 16 >> 48;
      v14 = v16;
      swift_retain();
      sub_1B1FDCB50(v13, v14);
      swift_bridgeObjectRelease();
      swift_release();
      LOBYTE(v9) = 1;
    }
  }
  return v9 & 1;
}

uint64_t sub_1B1EC1894(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(__int128 *), uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *i;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v19;
  __int128 v20;
  char v21;
  _OWORD v22[2];
  char v23;

  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(_QWORD *)(v8 + 16);
  if (v9)
  {
    for (i = (_QWORD *)(v8 + 56); (ValueMetadata *)*(i - 3) != &type metadata for ParticleAngleEvolution; i += 5)
    {
      if (!--v9)
        return v9 & 1;
    }
    v13 = *(_QWORD *)(a1 + 128) + *i + a2 * a3;
    v14 = *(_QWORD *)(v13 + 8);
    v15 = *(_QWORD *)(v13 + 16);
    v16 = *(_QWORD *)(v13 + 24);
    LODWORD(v19) = *(_DWORD *)v13;
    *((_QWORD *)&v19 + 1) = v14;
    *(_QWORD *)&v20 = v15;
    *((_QWORD *)&v20 + 1) = v16;
    v21 = *(_BYTE *)(v13 + 32);
    sub_1B1AF7674(v14);
    a4(&v19);
    if (v7)
    {
      sub_1B1AF76C0(*((uint64_t *)&v19 + 1));
    }
    else
    {
      v17 = sub_1B1DA61CC(a7) << 16 >> 48;
      v23 = v21;
      v22[0] = v19;
      v22[1] = v20;
      swift_retain();
      sub_1B1FEE078(v17, (uint64_t)v22);
      swift_release();
      sub_1B1EC5854((uint64_t)v22);
      LOBYTE(v9) = 1;
    }
  }
  return v9 & 1;
}

uint64_t sub_1B1EC19D0(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(__int128 *), uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *i;
  __int128 *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _OWORD v23[2];
  _OWORD v24[5];
  _OWORD v25[2];

  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(_QWORD *)(v8 + 16);
  if (v9)
  {
    for (i = (_QWORD *)(v8 + 56); (ValueMetadata *)*(i - 3) != &type metadata for ParticleRibbonRenderer; i += 5)
    {
      if (!--v9)
        return v9 & 1;
    }
    v12 = (__int128 *)(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
    v13 = v12[5];
    v22 = v12[4];
    v23[0] = v13;
    *(_OWORD *)((char *)v23 + 9) = *(__int128 *)((char *)v12 + 89);
    v14 = v12[1];
    v18 = *v12;
    v19 = v14;
    v15 = v12[3];
    v20 = v12[2];
    v21 = v15;
    a4(&v18);
    if (!v7)
    {
      v16 = sub_1B1DA61CC(a7) << 16 >> 48;
      v24[4] = v22;
      v25[0] = v23[0];
      *(_OWORD *)((char *)v25 + 9) = *(_OWORD *)((char *)v23 + 9);
      v24[0] = v18;
      v24[1] = v19;
      v24[2] = v20;
      v24[3] = v21;
      swift_retain();
      sub_1B1FDCC40(v16, v24);
      swift_release();
      LOBYTE(v9) = 1;
    }
  }
  return v9 & 1;
}

uint64_t sub_1B1EC1B10(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *i;

  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(v4 + 16);
  if (!v5)
    return 0;
  for (i = (_QWORD *)(v4 + 56); (ValueMetadata *)*(i - 3) != &type metadata for ParticleSphereCollider; i += 5)
  {
    if (!--v5)
      return 0;
  }
  a4(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
  return 1;
}

uint64_t sub_1B1EC1B80(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(__int128 *), uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *i;
  uint64_t v12;
  int v13;
  char v14;
  int v15;
  char v16;
  int v17;
  char v18;
  char v19;
  char v20;
  char v21;
  int v22;
  uint64_t v23;
  __int128 v25;
  __int128 v26;
  int v27;
  _OWORD v28[2];
  int v29;

  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(_QWORD *)(v8 + 16);
  if (v9)
  {
    for (i = (_QWORD *)(v8 + 56); (ValueMetadata *)*(i - 3) != &type metadata for ParticleSphereRenderer; i += 5)
    {
      if (!--v9)
        return v9 & 1;
    }
    v12 = *(_QWORD *)(a1 + 128) + *i + a2 * a3;
    v13 = *(_DWORD *)(v12 + 8);
    v14 = *(_BYTE *)(v12 + 12);
    v15 = *(_DWORD *)(v12 + 16);
    v16 = *(_BYTE *)(v12 + 20);
    v17 = *(_DWORD *)(v12 + 24);
    v18 = *(_BYTE *)(v12 + 28);
    v19 = *(_BYTE *)(v12 + 29);
    v20 = *(_BYTE *)(v12 + 30);
    v21 = *(_BYTE *)(v12 + 31);
    v22 = *(_DWORD *)(v12 + 32);
    *(_QWORD *)&v25 = *(_QWORD *)v12;
    DWORD2(v25) = v13;
    BYTE12(v25) = v14;
    LODWORD(v26) = v15;
    BYTE4(v26) = v16;
    DWORD2(v26) = v17;
    BYTE12(v26) = v18;
    BYTE13(v26) = v19;
    BYTE14(v26) = v20;
    HIBYTE(v26) = v21;
    v27 = v22;
    a4(&v25);
    if (!v7)
    {
      v23 = sub_1B1DA61CC(a7) << 16 >> 48;
      v28[0] = v25;
      v28[1] = v26;
      v29 = v27;
      swift_retain();
      sub_1B1FDCD8C(v23, (uint64_t)v28);
      swift_release();
      LOBYTE(v9) = 1;
    }
  }
  return v9 & 1;
}

uint64_t sub_1B1EC1CE4(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *i;

  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(v4 + 16);
  if (!v5)
    return 0;
  for (i = (_QWORD *)(v4 + 56); (ValueMetadata *)*(i - 3) != &type metadata for WorldPhysicsController; i += 5)
  {
    if (!--v5)
      return 0;
  }
  a4(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
  return 1;
}

uint64_t sub_1B1EC1D54(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(float *), uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *i;
  uint64_t v12;
  float v13;
  uint64_t v14;
  float v16;
  char v17;

  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(_QWORD *)(v8 + 16);
  if (v9)
  {
    for (i = (_QWORD *)(v8 + 56); (ValueMetadata *)*(i - 3) != &type metadata for OrientationOverVelocity; i += 5)
    {
      if (!--v9)
        return v9 & 1;
    }
    v12 = *(_QWORD *)(a1 + 128) + *i + a2 * a3;
    v13 = *(float *)v12;
    LOBYTE(v12) = *(_BYTE *)(v12 + 4);
    v16 = v13;
    v17 = v12;
    a4(&v16);
    if (!v7)
    {
      v14 = sub_1B1DA61CC(a7);
      sub_1B1FEE140(v14 << 16 >> 48, v17, v16);
      LOBYTE(v9) = 1;
    }
  }
  return v9 & 1;
}

uint64_t sub_1B1EC1E34(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(float *), uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *i;
  uint64_t v12;
  float v14;

  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(_QWORD *)(v8 + 16);
  if (v9)
  {
    for (i = (_QWORD *)(v8 + 56); (ValueMetadata *)*(i - 3) != &type metadata for ParticleContinuousSpawn; i += 5)
    {
      if (!--v9)
        return v9 & 1;
    }
    v14 = *(float *)(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
    a4(&v14);
    if (!v7)
    {
      v12 = sub_1B1DA61CC(a7);
      sub_1B1FEE194(v12 << 16 >> 48, v14);
      LOBYTE(v9) = 1;
    }
  }
  return v9 & 1;
}

uint64_t sub_1B1EC1F04(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(uint64_t *), uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *i;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;

  v8 = v7;
  v9 = *(_QWORD *)(a1 + 48);
  v10 = *(_QWORD *)(v9 + 16);
  if (v10)
  {
    for (i = (_QWORD *)(v9 + 56); (ValueMetadata *)*(i - 3) != &type metadata for ParticleOpacityOverLife; i += 5)
    {
      if (!--v10)
        return v10 & 1;
    }
    v14 = *(_QWORD *)(a1 + 128) + *i + a2 * a3;
    v15 = *(_QWORD *)v14;
    v16 = *(_QWORD *)(v14 + 8);
    v17 = *(_QWORD *)(v14 + 16);
    LOBYTE(v14) = *(_BYTE *)(v14 + 24);
    v24 = v15;
    v25 = v16;
    v26 = v17;
    v27 = v14;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    a4(&v24);
    if (v8)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      v18 = sub_1B1DA61CC(a7) << 16 >> 48;
      v19 = v24;
      v20 = v25;
      v21 = v26;
      v22 = v27;
      swift_retain();
      sub_1B1FEE1DC(v18, v19, v20, v21, v22);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      LOBYTE(v10) = 1;
    }
  }
  return v10 & 1;
}

uint64_t sub_1B1EC2064(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(__n128 *), uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *i;
  __n128 *v12;
  uint64_t v13;
  __n128 v15;
  unint64_t v16;
  __n128 v17;
  unint64_t v18;

  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(_QWORD *)(v8 + 16);
  if (v9)
  {
    for (i = (_QWORD *)(v8 + 56); (ValueMetadata *)*(i - 3) != &type metadata for ParticleOrientationInit; i += 5)
    {
      if (!--v9)
        return v9 & 1;
    }
    v12 = (__n128 *)(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
    v15 = *v12;
    v16 = v12[1].n128_u64[0];
    a4(&v15);
    if (!v7)
    {
      v13 = sub_1B1DA61CC(a7);
      v17 = v15;
      v18 = v16;
      sub_1B1FEE2A4(v13 << 16 >> 48, &v17);
      LOBYTE(v9) = 1;
    }
  }
  return v9 & 1;
}

uint64_t sub_1B1EC2150(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(__int128 *), uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *i;
  uint64_t v12;
  __int16 v13;
  char v14;
  int v15;
  char v16;
  uint64_t v17;
  int v18;
  __int128 v19;
  uint64_t v20;
  __int128 v22;
  _BYTE v23[48];
  int v24;
  _OWORD v25[4];
  int v26;

  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(_QWORD *)(v8 + 16);
  if (v9)
  {
    for (i = (_QWORD *)(v8 + 56); (ValueMetadata *)*(i - 3) != &type metadata for ParticleSizeOverTexture; i += 5)
    {
      if (!--v9)
        return v9 & 1;
    }
    v12 = *(_QWORD *)(a1 + 128) + *i + a2 * a3;
    v13 = *(_WORD *)(v12 + 8);
    v14 = *(_BYTE *)(v12 + 12);
    v15 = *(_DWORD *)(v12 + 16);
    v16 = *(_BYTE *)(v12 + 20);
    v17 = *(_QWORD *)(v12 + 56);
    v18 = *(_DWORD *)(v12 + 64);
    *(_QWORD *)&v22 = *(_QWORD *)v12;
    WORD4(v22) = v13;
    BYTE12(v22) = v14;
    *(_DWORD *)v23 = v15;
    v23[4] = v16;
    v19 = *(_OWORD *)(v12 + 40);
    *(_OWORD *)&v23[8] = *(_OWORD *)(v12 + 24);
    *(_OWORD *)&v23[24] = v19;
    *(_QWORD *)&v23[40] = v17;
    v24 = v18;
    a4(&v22);
    if (!v7)
    {
      v20 = sub_1B1DA61CC(a7) << 16 >> 48;
      v25[2] = *(_OWORD *)&v23[16];
      v25[3] = *(_OWORD *)&v23[32];
      v26 = v24;
      v25[0] = v22;
      v25[1] = *(_OWORD *)v23;
      swift_retain();
      sub_1B1FDCEB8(v20, (uint64_t)v25);
      swift_release();
      LOBYTE(v9) = 1;
    }
  }
  return v9 & 1;
}

uint64_t sub_1B1EC22AC(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(__n128 *), uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *i;
  __n128 *v12;
  uint64_t v13;
  __n128 v15;
  unint64_t v16;
  __n128 v17;
  unint64_t v18;

  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(_QWORD *)(v8 + 16);
  if (v9)
  {
    for (i = (_QWORD *)(v8 + 56); (ValueMetadata *)*(i - 3) != &type metadata for ParticleSurfaceRenderer; i += 5)
    {
      if (!--v9)
        return v9 & 1;
    }
    v12 = (__n128 *)(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
    v15 = *v12;
    v16 = v12[1].n128_u64[0];
    a4(&v15);
    if (!v7)
    {
      v13 = sub_1B1DA61CC(a7);
      v17 = v15;
      v18 = v16;
      sub_1B1FEE300(v13 << 16 >> 48, &v17);
      LOBYTE(v9) = 1;
    }
  }
  return v9 & 1;
}

uint64_t sub_1B1EC2398(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(__int128 *), uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *i;
  __int128 *v12;
  char v13;
  uint64_t v14;
  __int128 v15;
  char v16;
  __int128 v18;
  char v19;

  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(_QWORD *)(v8 + 16);
  if (v9)
  {
    for (i = (_QWORD *)(v8 + 56); (ValueMetadata *)*(i - 3) != &type metadata for TextureRequireSizeLimit; i += 5)
    {
      if (!--v9)
        return v9 & 1;
    }
    v12 = (__int128 *)(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
    v13 = *((_BYTE *)v12 + 16);
    v18 = *v12;
    v19 = v13;
    a4(&v18);
    if (!v7)
    {
      v14 = sub_1B1DA61CC(a7) << 16 >> 48;
      v15 = v18;
      v16 = v19;
      swift_retain();
      sub_1B1FDCFA8(v14, v15, *((uint64_t *)&v15 + 1), v16);
      swift_release();
      LOBYTE(v9) = 1;
    }
  }
  return v9 & 1;
}

uint64_t sub_1B1EC24B8(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(uint64_t *), uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *i;
  uint64_t v12;
  uint64_t v14;

  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(_QWORD *)(v8 + 16);
  if (v9)
  {
    for (i = (_QWORD *)(v8 + 56); (ValueMetadata *)*(i - 3) != &type metadata for ParticleAOSphereRenderer; i += 5)
    {
      if (!--v9)
        return v9 & 1;
    }
    v14 = *(_QWORD *)(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
    a4(&v14);
    if (!v7)
    {
      v12 = sub_1B1DA61CC(a7);
      sub_1B1FEE35C(v12 << 16 >> 48, *(float *)&v14, *((float *)&v14 + 1));
      LOBYTE(v9) = 1;
    }
  }
  return v9 & 1;
}

uint64_t sub_1B1EC2588(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(__int128 *), uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *i;
  uint64_t v12;
  int v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  __int128 v20;
  _BYTE v21[28];
  __int128 v22;
  _OWORD v23[2];

  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(_QWORD *)(v8 + 16);
  if (v9)
  {
    for (i = (_QWORD *)(v8 + 56); (ValueMetadata *)*(i - 3) != &type metadata for ParticleColorOverTexture; i += 5)
    {
      if (!--v9)
        return v9 & 1;
    }
    v12 = *(_QWORD *)(a1 + 128) + *i + a2 * a3;
    v13 = *(_DWORD *)(v12 + 4);
    v14 = *(_BYTE *)(v12 + 16);
    v15 = *(_QWORD *)(v12 + 24);
    v16 = *(_QWORD *)(v12 + 32);
    v17 = *(_DWORD *)(v12 + 40);
    LOBYTE(v20) = *(_BYTE *)v12;
    DWORD1(v20) = v13;
    *((_QWORD *)&v20 + 1) = *(_QWORD *)(v12 + 8);
    v21[0] = v14;
    *(_QWORD *)&v21[8] = v15;
    *(_QWORD *)&v21[16] = v16;
    *(_DWORD *)&v21[24] = v17;
    a4(&v20);
    if (!v7)
    {
      v18 = sub_1B1DA61CC(a7) << 16 >> 48;
      v22 = v20;
      v23[0] = *(_OWORD *)v21;
      *(_OWORD *)((char *)v23 + 12) = *(_OWORD *)&v21[12];
      swift_retain();
      sub_1B1FDD0D0(v18, (uint64_t)&v22);
      swift_release();
      LOBYTE(v9) = 1;
    }
  }
  return v9 & 1;
}

uint64_t sub_1B1EC26C0(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *i;

  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(v4 + 16);
  if (!v5)
    return 0;
  for (i = (_QWORD *)(v4 + 56); (ValueMetadata *)*(i - 3) != &type metadata for ParticleCylinderCollider; i += 5)
  {
    if (!--v5)
      return 0;
  }
  a4(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
  return 1;
}

uint64_t sub_1B1EC2730(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(_BYTE *), uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *i;
  uint64_t v12;
  char v13;
  int v14;
  char v15;
  uint64_t v16;
  _BYTE v18[25];
  _OWORD v19[2];

  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(_QWORD *)(v8 + 16);
  if (v9)
  {
    for (i = (_QWORD *)(v8 + 56); (ValueMetadata *)*(i - 3) != &type metadata for ParticleGaussianRenderer; i += 5)
    {
      if (!--v9)
        return v9 & 1;
    }
    v12 = *(_QWORD *)(a1 + 128) + *i + a2 * a3;
    v13 = *(_BYTE *)(v12 + 8);
    v14 = *(_DWORD *)(v12 + 20);
    v15 = *(_BYTE *)(v12 + 24);
    *(_QWORD *)v18 = *(_QWORD *)v12;
    v18[8] = v13;
    *(_QWORD *)&v18[12] = *(_QWORD *)(v12 + 12);
    *(_DWORD *)&v18[20] = v14;
    v18[24] = v15;
    a4(v18);
    if (!v7)
    {
      v16 = sub_1B1DA61CC(a7) << 16 >> 48;
      v19[0] = *(_OWORD *)v18;
      *(_OWORD *)((char *)v19 + 9) = *(_OWORD *)&v18[9];
      swift_retain();
      sub_1B1FDD1C0(v16, (uint64_t)v19);
      swift_release();
      LOBYTE(v9) = 1;
    }
  }
  return v9 & 1;
}

uint64_t sub_1B1EC2860(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(__int128 *), uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *i;
  __int128 *v12;
  __int128 v13;
  char v14;
  uint64_t v15;
  __int128 v17;
  _BYTE v18[25];
  __int128 v19;
  _OWORD v20[2];

  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(_QWORD *)(v8 + 16);
  if (v9)
  {
    for (i = (_QWORD *)(v8 + 56); (ValueMetadata *)*(i - 3) != &type metadata for ParticleLocalBoxCollider; i += 5)
    {
      if (!--v9)
        return v9 & 1;
    }
    v12 = (__int128 *)(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
    v13 = v12[1];
    v14 = *((_BYTE *)v12 + 40);
    v17 = *v12;
    *(_OWORD *)v18 = v13;
    *(_QWORD *)&v18[16] = *((_QWORD *)v12 + 4);
    v18[24] = v14;
    a4(&v17);
    if (!v7)
    {
      v15 = sub_1B1DA61CC(a7) << 16 >> 48;
      v19 = v17;
      v20[0] = *(_OWORD *)v18;
      *(_OWORD *)((char *)v20 + 9) = *(_OWORD *)&v18[9];
      swift_retain();
      sub_1B1FDD2C0(v15, (uint64_t)&v19);
      swift_release();
      LOBYTE(v9) = 1;
    }
  }
  return v9 & 1;
}

uint64_t sub_1B1EC2980(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(__int128 *), uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *i;
  uint64_t *v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v23;
  _BYTE v24[25];
  __int128 v25;
  _OWORD v26[2];
  _OWORD v27[2];
  _BYTE v28[8];
  uint64_t v29;
  uint64_t v30;

  v8 = v7;
  v9 = *(_QWORD *)(a1 + 48);
  v10 = *(_QWORD *)(v9 + 16);
  if (v10)
  {
    for (i = (_QWORD *)(v9 + 56); (ValueMetadata *)*(i - 3) != &type metadata for ParticleOpacityEvolution; i += 5)
    {
      if (!--v10)
        return v10 & 1;
    }
    v14 = (uint64_t *)(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
    v15 = *v14;
    v16 = *((_BYTE *)v14 + 8);
    v17 = v14[2];
    v18 = v14[3];
    v19 = v14[4];
    LOBYTE(v14) = *((_BYTE *)v14 + 40);
    *(_QWORD *)&v23 = v15;
    BYTE8(v23) = v16;
    *(_QWORD *)v24 = v17;
    *(_QWORD *)&v24[8] = v18;
    *(_QWORD *)&v24[16] = v19;
    v24[24] = (_BYTE)v14;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    a4(&v23);
    if (v8)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      v20 = sub_1B1DA61CC(a7);
      v25 = v23;
      v26[0] = *(_OWORD *)v24;
      *(_OWORD *)((char *)v26 + 9) = *(_OWORD *)&v24[9];
      v27[0] = v26[0];
      *(_OWORD *)((char *)v27 + 9) = *(_OWORD *)&v24[9];
      v29 = *((_QWORD *)&v27[0] + 1);
      v30 = *(_QWORD *)v24;
      v21 = v20 << 16 >> 48;
      sub_1B1EC57D4((uint64_t)&v27[1], (uint64_t)v28, (unint64_t *)&qword_1ED4BA390, &qword_1ED4BA380, (uint64_t)&type metadata for CurveTangents);
      swift_retain();
      sub_1B1FEE3A8(v21, &v25);
      swift_release();
      sub_1B1B28C6C((uint64_t)&v30);
      sub_1B1B28C6C((uint64_t)&v29);
      sub_1B1B28C6C((uint64_t)v28);
      LOBYTE(v10) = 1;
    }
  }
  return v10 & 1;
}

uint64_t sub_1B1EC2B28(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(_BYTE *), uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *i;
  uint64_t v12;
  int v13;
  char v14;
  __int128 v15;
  uint64_t v16;
  _BYTE v18[44];
  __int128 v19;
  _OWORD v20[2];

  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(_QWORD *)(v8 + 16);
  if (v9)
  {
    for (i = (_QWORD *)(v8 + 56); (ValueMetadata *)*(i - 3) != &type metadata for ParticleSizeOverVelocity; i += 5)
    {
      if (!--v9)
        return v9 & 1;
    }
    v12 = *(_QWORD *)(a1 + 128) + *i + a2 * a3;
    v13 = *(_DWORD *)(v12 + 4);
    v14 = *(_BYTE *)(v12 + 8);
    v18[0] = *(_BYTE *)v12;
    *(_DWORD *)&v18[4] = v13;
    v18[8] = v14;
    v15 = *(_OWORD *)(v12 + 28);
    *(_OWORD *)&v18[12] = *(_OWORD *)(v12 + 12);
    *(_OWORD *)&v18[28] = v15;
    a4(v18);
    if (!v7)
    {
      v16 = sub_1B1DA61CC(a7) << 16 >> 48;
      v19 = *(_OWORD *)v18;
      v20[0] = *(_OWORD *)&v18[16];
      *(_OWORD *)((char *)v20 + 12) = *(_OWORD *)&v18[28];
      swift_retain();
      sub_1B1FDD408(v16, &v19);
      swift_release();
      LOBYTE(v9) = 1;
    }
  }
  return v9 & 1;
}

uint64_t sub_1B1EC2C58(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(uint64_t *), uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *i;
  uint64_t v12;
  uint64_t v14;

  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(_QWORD *)(v8 + 16);
  if (v9)
  {
    for (i = (_QWORD *)(v8 + 56); (ValueMetadata *)*(i - 3) != &type metadata for ParticleTextureFrameInit; i += 5)
    {
      if (!--v9)
        return v9 & 1;
    }
    v14 = *(_QWORD *)(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
    a4(&v14);
    if (!v7)
    {
      v12 = sub_1B1DA61CC(a7);
      sub_1B1FEE4AC(v12 << 16 >> 48, *(float *)&v14, *((float *)&v14 + 1));
      LOBYTE(v9) = 1;
    }
  }
  return v9 & 1;
}

uint64_t sub_1B1EC2D28(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *i;

  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(v4 + 16);
  if (!v5)
    return 0;
  for (i = (_QWORD *)(v4 + 56); (ValueMetadata *)*(i - 3) != &type metadata for RenderGraphTextureTarget; i += 5)
  {
    if (!--v5)
      return 0;
  }
  a4(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
  return 1;
}

uint64_t sub_1B1EC2D98(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *i;

  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(v4 + 16);
  if (!v5)
    return 0;
  for (i = (_QWORD *)(v4 + 56); (ValueMetadata *)*(i - 3) != &type metadata for ParametricModelController; i += 5)
  {
    if (!--v5)
      return 0;
  }
  a4(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
  return 1;
}

uint64_t sub_1B1EC2E08(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(uint64_t *), uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *i;
  uint64_t v12;
  uint64_t v14;

  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(_QWORD *)(v8 + 16);
  if (v9)
  {
    for (i = (_QWORD *)(v8 + 56); (ValueMetadata *)*(i - 3) != &type metadata for ParticleAngleVelocityInit; i += 5)
    {
      if (!--v9)
        return v9 & 1;
    }
    v14 = *(_QWORD *)(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
    a4(&v14);
    if (!v7)
    {
      v12 = sub_1B1DA61CC(a7);
      sub_1B1FEE4F8(v12 << 16 >> 48, *(float *)&v14, *((float *)&v14 + 1));
      LOBYTE(v9) = 1;
    }
  }
  return v9 & 1;
}

uint64_t sub_1B1EC2ED8(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(__int128 *), uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *i;
  __int16 *v14;
  __int16 v15;
  char v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v22;
  __int128 v23;
  char v24;
  _OWORD v25[2];
  char v26;

  v8 = v7;
  v9 = *(_QWORD *)(a1 + 48);
  v10 = *(_QWORD *)(v9 + 16);
  if (v10)
  {
    for (i = (_QWORD *)(v9 + 56); (ValueMetadata *)*(i - 3) != &type metadata for ParticleColorOverPosition; i += 5)
    {
      if (!--v10)
        return v10 & 1;
    }
    v14 = (__int16 *)(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
    v15 = *v14;
    v16 = *((_BYTE *)v14 + 4);
    v17 = *((_DWORD *)v14 + 2);
    v18 = *((_QWORD *)v14 + 2);
    v19 = *((_QWORD *)v14 + 3);
    LOBYTE(v14) = *((_BYTE *)v14 + 32);
    LOWORD(v22) = v15;
    BYTE4(v22) = v16;
    DWORD2(v22) = v17;
    *(_QWORD *)&v23 = v18;
    *((_QWORD *)&v23 + 1) = v19;
    v24 = (char)v14;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    a4(&v22);
    if (v8)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      v20 = sub_1B1DA61CC(a7) << 16 >> 48;
      v25[0] = v22;
      v25[1] = v23;
      v26 = v24;
      swift_retain();
      sub_1B1FDD4E8(v20, (uint64_t)v25);
      swift_release();
      sub_1B1EC5824((uint64_t)v25);
      LOBYTE(v10) = 1;
    }
  }
  return v10 & 1;
}

uint64_t sub_1B1EC303C(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(__int128 *), uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *i;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  __int128 v21;
  __int128 v22;
  char v23;
  _OWORD v24[2];
  char v25;

  v8 = v7;
  v9 = *(_QWORD *)(a1 + 48);
  v10 = *(_QWORD *)(v9 + 16);
  if (v10)
  {
    for (i = (_QWORD *)(v9 + 56); (ValueMetadata *)*(i - 3) != &type metadata for ParticleColorOverVelocity; i += 5)
    {
      if (!--v10)
        return v10 & 1;
    }
    v14 = *(_QWORD *)(a1 + 128) + *i + a2 * a3;
    v15 = *(_DWORD *)(v14 + 12);
    v16 = *(_QWORD *)(v14 + 16);
    v17 = *(_QWORD *)(v14 + 24);
    v18 = *(_BYTE *)(v14 + 32);
    LOBYTE(v21) = *(_BYTE *)v14;
    *(_QWORD *)((char *)&v21 + 4) = *(_QWORD *)(v14 + 4);
    HIDWORD(v21) = v15;
    *(_QWORD *)&v22 = v16;
    *((_QWORD *)&v22 + 1) = v17;
    v23 = v18;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    a4(&v21);
    if (v8)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      v19 = sub_1B1DA61CC(a7) << 16 >> 48;
      v24[0] = v21;
      v24[1] = v22;
      v25 = v23;
      swift_retain();
      sub_1B1FDD5F4(v19, (uint64_t)v24);
      swift_release();
      sub_1B1EC5824((uint64_t)v24);
      LOBYTE(v10) = 1;
    }
  }
  return v10 & 1;
}

uint64_t sub_1B1EC31A0(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(__int128 *), uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *i;
  uint64_t v12;
  int v13;
  char v14;
  int v15;
  char v16;
  int v17;
  char v18;
  char v19;
  char v20;
  char v21;
  int v22;
  char v23;
  uint64_t v24;
  __int128 v26;
  _BYTE v27[21];
  __int128 v28;
  _OWORD v29[2];

  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(_QWORD *)(v8 + 16);
  if (v9)
  {
    for (i = (_QWORD *)(v8 + 56); (ValueMetadata *)*(i - 3) != &type metadata for ParticlePrimitiveRenderer; i += 5)
    {
      if (!--v9)
        return v9 & 1;
    }
    v12 = *(_QWORD *)(a1 + 128) + *i + a2 * a3;
    v13 = *(_DWORD *)(v12 + 8);
    v14 = *(_BYTE *)(v12 + 12);
    v15 = *(_DWORD *)(v12 + 16);
    v16 = *(_BYTE *)(v12 + 20);
    v17 = *(_DWORD *)(v12 + 24);
    v18 = *(_BYTE *)(v12 + 28);
    v19 = *(_BYTE *)(v12 + 29);
    v20 = *(_BYTE *)(v12 + 30);
    v21 = *(_BYTE *)(v12 + 31);
    v22 = *(_DWORD *)(v12 + 32);
    v23 = *(_BYTE *)(v12 + 36);
    *(_QWORD *)&v26 = *(_QWORD *)v12;
    DWORD2(v26) = v13;
    BYTE12(v26) = v14;
    *(_DWORD *)v27 = v15;
    v27[4] = v16;
    *(_DWORD *)&v27[8] = v17;
    v27[12] = v18;
    v27[13] = v19;
    v27[14] = v20;
    v27[15] = v21;
    *(_DWORD *)&v27[16] = v22;
    v27[20] = v23;
    a4(&v26);
    if (!v7)
    {
      v24 = sub_1B1DA61CC(a7) << 16 >> 48;
      v28 = v26;
      v29[0] = *(_OWORD *)v27;
      *(_QWORD *)((char *)v29 + 13) = *(_QWORD *)&v27[13];
      swift_retain();
      sub_1B1FDD700(v24, (uint64_t)&v28);
      swift_release();
      LOBYTE(v9) = 1;
    }
  }
  return v9 & 1;
}

uint64_t sub_1B1EC330C(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(float *), uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *i;
  uint64_t v12;
  float v13;
  unsigned __int8 v14;
  uint64_t v15;
  __int16 v16;
  float v18;
  unsigned __int8 v19;
  char v20;

  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(_QWORD *)(v8 + 16);
  if (v9)
  {
    for (i = (_QWORD *)(v8 + 56); (ValueMetadata *)*(i - 3) != &type metadata for ParticleSpawnOverDistance; i += 5)
    {
      if (!--v9)
        return v9 & 1;
    }
    v12 = *(_QWORD *)(a1 + 128) + *i + a2 * a3;
    v13 = *(float *)v12;
    v14 = *(_BYTE *)(v12 + 4);
    LOBYTE(v12) = *(_BYTE *)(v12 + 5);
    v18 = v13;
    v19 = v14;
    v20 = v12;
    a4(&v18);
    if (!v7)
    {
      v15 = sub_1B1DA61CC(a7) << 16 >> 48;
      if (v20)
        v16 = 256;
      else
        v16 = 0;
      sub_1B1FEE544(v15, v16 | v19, v18);
      LOBYTE(v9) = 1;
    }
  }
  return v9 & 1;
}

uint64_t sub_1B1EC3408(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *i;

  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(v4 + 16);
  if (!v5)
    return 0;
  for (i = (_QWORD *)(v4 + 56); (ValueMetadata *)*(i - 3) != &type metadata for WorldBackgroundController; i += 5)
  {
    if (!--v5)
      return 0;
  }
  a4(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
  return 1;
}

uint64_t sub_1B1EC3478(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *i;

  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(v4 + 16);
  if (!v5)
    return 0;
  for (i = (_QWORD *)(v4 + 56); (ValueMetadata *)*(i - 3) != &type metadata for CameraEffectSSAOController; i += 5)
  {
    if (!--v5)
      return 0;
  }
  a4(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
  return 1;
}

uint64_t sub_1B1EC34E8(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(__int128 *), uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *i;
  __int128 *v12;
  uint64_t v13;
  __int128 v15;
  float v16[4];

  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(_QWORD *)(v8 + 16);
  if (v9)
  {
    for (i = (_QWORD *)(v8 + 56); (ValueMetadata *)*(i - 3) != &type metadata for ParticlePeriodicBurstSpawn; i += 5)
    {
      if (!--v9)
        return v9 & 1;
    }
    v12 = (__int128 *)(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
    v15 = *v12;
    *(_QWORD *)v16 = *((_QWORD *)v12 + 2);
    a4(&v15);
    if (!v7)
    {
      v13 = sub_1B1DA61CC(a7);
      sub_1B1FEE5A0(v13 << 16 >> 48, v15, *((uint64_t *)&v15 + 1), v16[0], v16[1]);
      LOBYTE(v9) = 1;
    }
  }
  return v9 & 1;
}

uint64_t sub_1B1EC35C8(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(uint64_t *), uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *i;
  float *v12;
  float v13;
  uint64_t v14;
  uint64_t v16;
  float v17;

  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(_QWORD *)(v8 + 16);
  if (v9)
  {
    for (i = (_QWORD *)(v8 + 56); (ValueMetadata *)*(i - 3) != &type metadata for ParticleVolumetricRenderer; i += 5)
    {
      if (!--v9)
        return v9 & 1;
    }
    v12 = (float *)(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
    v13 = v12[2];
    v16 = *(_QWORD *)v12;
    v17 = v13;
    a4(&v16);
    if (!v7)
    {
      v14 = sub_1B1DA61CC(a7);
      sub_1B1FEE5F4(v14 << 16 >> 48, *(float *)&v16, *((float *)&v16 + 1), v17);
      LOBYTE(v9) = 1;
    }
  }
  return v9 & 1;
}

uint64_t sub_1B1EC36A8(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *i;

  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(v4 + 16);
  if (!v5)
    return 0;
  for (i = (_QWORD *)(v4 + 56); (ValueMetadata *)*(i - 3) != &type metadata for CameraEffectBloomController; i += 5)
  {
    if (!--v5)
      return 0;
  }
  a4(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
  return 1;
}

uint64_t sub_1B1EC3718(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *i;

  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(v4 + 16);
  if (!v5)
    return 0;
  for (i = (_QWORD *)(v4 + 56); (ValueMetadata *)*(i - 3) != &type metadata for CameraEffectGrainController; i += 5)
  {
    if (!--v5)
      return 0;
  }
  a4(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
  return 1;
}

uint64_t sub_1B1EC3788(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(__n128 *), uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *i;
  __n128 *v12;
  uint64_t v13;
  __n128 v15;
  unint64_t v16;
  __n128 v17;
  unint64_t v18;

  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(_QWORD *)(v8 + 16);
  if (v9)
  {
    for (i = (_QWORD *)(v8 + 56); (ValueMetadata *)*(i - 3) != &type metadata for ParticleAngularVelocityInit; i += 5)
    {
      if (!--v9)
        return v9 & 1;
    }
    v12 = (__n128 *)(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
    v15 = *v12;
    v16 = v12[1].n128_u64[0];
    a4(&v15);
    if (!v7)
    {
      v13 = sub_1B1DA61CC(a7);
      v17 = v15;
      v18 = v16;
      sub_1B1FEE648(v13 << 16 >> 48, &v17);
      LOBYTE(v9) = 1;
    }
  }
  return v9 & 1;
}

uint64_t sub_1B1EC3874(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(_BYTE *), uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *i;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v20[36];
  _OWORD v21[2];
  int v22;
  _OWORD v23[2];
  _BYTE v24[8];
  uint64_t v25;
  uint64_t v26;

  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(_QWORD *)(v8 + 16);
  if (v9)
  {
    for (i = (_QWORD *)(v8 + 56); (ValueMetadata *)*(i - 3) != &type metadata for ParticleOpacityOverVelocity; i += 5)
    {
      if (!--v9)
        return v9 & 1;
    }
    v13 = *(_QWORD *)(a1 + 128) + *i + a2 * a3;
    v14 = *(_QWORD *)(v13 + 8);
    v15 = *(_QWORD *)(v13 + 16);
    v16 = *(_BYTE *)(v13 + 24);
    *(_QWORD *)v20 = *(_QWORD *)v13;
    *(_QWORD *)&v20[8] = v14;
    *(_QWORD *)&v20[16] = v15;
    v20[24] = v16;
    *(_QWORD *)&v20[28] = *(_QWORD *)(v13 + 28);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    a4(v20);
    if (v7)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      v17 = sub_1B1DA61CC(a7);
      v22 = *(_DWORD *)&v20[32];
      v23[0] = *(_OWORD *)v20;
      *(_OWORD *)((char *)v23 + 9) = *(_OWORD *)&v20[9];
      v25 = *((_QWORD *)&v23[0] + 1);
      v26 = *(_QWORD *)v20;
      v18 = v17 << 16 >> 48;
      v21[0] = *(_OWORD *)v20;
      v21[1] = *(_OWORD *)&v20[16];
      sub_1B1EC57D4((uint64_t)&v23[1], (uint64_t)v24, (unint64_t *)&qword_1ED4BA390, &qword_1ED4BA380, (uint64_t)&type metadata for CurveTangents);
      swift_retain();
      sub_1B1FEE6D8(v18, (uint64_t)v21);
      swift_release();
      sub_1B1B28C6C((uint64_t)&v26);
      sub_1B1B28C6C((uint64_t)&v25);
      sub_1B1B28C6C((uint64_t)v24);
      LOBYTE(v9) = 1;
    }
  }
  return v9 & 1;
}

uint64_t sub_1B1EC3A14(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(_BYTE *), uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *i;
  uint64_t v12;
  __int16 v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  _BYTE v19[44];
  __int128 v20;
  _OWORD v21[2];

  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(_QWORD *)(v8 + 16);
  if (v9)
  {
    for (i = (_QWORD *)(v8 + 56); (ValueMetadata *)*(i - 3) != &type metadata for ParticlePositionOverTexture; i += 5)
    {
      if (!--v9)
        return v9 & 1;
    }
    v12 = *(_QWORD *)(a1 + 128) + *i + a2 * a3;
    v13 = *(_WORD *)(v12 + 8);
    v14 = *(_QWORD *)(v12 + 24);
    v15 = *(_QWORD *)(v12 + 32);
    v16 = *(_DWORD *)(v12 + 40);
    *(_QWORD *)v19 = *(_QWORD *)v12;
    *(_WORD *)&v19[8] = v13;
    *(_QWORD *)&v19[12] = *(_QWORD *)(v12 + 12);
    *(_QWORD *)&v19[24] = v14;
    *(_QWORD *)&v19[32] = v15;
    *(_DWORD *)&v19[40] = v16;
    a4(v19);
    if (!v7)
    {
      v17 = sub_1B1DA61CC(a7);
      v20 = *(_OWORD *)v19;
      v21[0] = *(_OWORD *)&v19[16];
      *(_OWORD *)((char *)v21 + 12) = *(_OWORD *)&v19[28];
      sub_1B1FEE7DC(v17 << 16 >> 48, (uint64_t)&v20);
      LOBYTE(v9) = 1;
    }
  }
  return v9 & 1;
}

uint64_t sub_1B1EC3B18(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(_BYTE *), uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *i;
  uint64_t v12;
  char v13;
  uint64_t v14;
  _BYTE v16[25];
  _OWORD v17[2];

  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(_QWORD *)(v8 + 16);
  if (v9)
  {
    for (i = (_QWORD *)(v8 + 56); (ValueMetadata *)*(i - 3) != &type metadata for ParticleFlockingSpeedControl; i += 5)
    {
      if (!--v9)
        return v9 & 1;
    }
    v12 = *(_QWORD *)(a1 + 128) + *i + a2 * a3;
    v13 = *(_BYTE *)(v12 + 24);
    *(_OWORD *)v16 = *(_OWORD *)v12;
    *(_QWORD *)&v16[16] = *(_QWORD *)(v12 + 16);
    v16[24] = v13;
    a4(v16);
    if (!v7)
    {
      v14 = sub_1B1DA61CC(a7);
      v17[0] = *(_OWORD *)v16;
      *(_OWORD *)((char *)v17 + 9) = *(_OWORD *)&v16[9];
      sub_1B1FEE838(v14 << 16 >> 48, (uint64_t)v17);
      LOBYTE(v9) = 1;
    }
  }
  return v9 & 1;
}

uint64_t sub_1B1EC3C0C(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *i;

  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(v4 + 16);
  if (!v5)
    return 0;
  for (i = (_QWORD *)(v4 + 56); (ValueMetadata *)*(i - 3) != &type metadata for ParticleFluidSolver2DEmitter; i += 5)
  {
    if (!--v5)
      return 0;
  }
  a4(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
  return 1;
}

uint64_t sub_1B1EC3C7C(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(__int128 *), uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *i;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v19;
  __int128 v20;
  char v21;
  _OWORD v22[2];
  char v23;

  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(_QWORD *)(v8 + 16);
  if (v9)
  {
    for (i = (_QWORD *)(v8 + 56); (ValueMetadata *)*(i - 3) != &type metadata for ParticleTextureFrameEvolution; i += 5)
    {
      if (!--v9)
        return v9 & 1;
    }
    v13 = *(_QWORD *)(a1 + 128) + *i + a2 * a3;
    v14 = *(_QWORD *)(v13 + 8);
    v15 = *(_QWORD *)(v13 + 16);
    v16 = *(_QWORD *)(v13 + 24);
    LODWORD(v19) = *(_DWORD *)v13;
    *((_QWORD *)&v19 + 1) = v14;
    *(_QWORD *)&v20 = v15;
    *((_QWORD *)&v20 + 1) = v16;
    v21 = *(_BYTE *)(v13 + 32);
    sub_1B1AF7674(v14);
    a4(&v19);
    if (v7)
    {
      sub_1B1AF76C0(*((uint64_t *)&v19 + 1));
    }
    else
    {
      v17 = sub_1B1DA61CC(a7) << 16 >> 48;
      v23 = v21;
      v22[0] = v19;
      v22[1] = v20;
      swift_retain();
      sub_1B1FEE890(v17, (uint64_t)v22);
      swift_release();
      sub_1B1EC5854((uint64_t)v22);
      LOBYTE(v9) = 1;
    }
  }
  return v9 & 1;
}

uint64_t sub_1B1EC3DB8(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *i;

  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(v4 + 16);
  if (!v5)
    return 0;
  for (i = (_QWORD *)(v4 + 56); (ValueMetadata *)*(i - 3) != &type metadata for CameraEffectExposureController; i += 5)
  {
    if (!--v5)
      return 0;
  }
  a4(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
  return 1;
}

uint64_t sub_1B1EC3E28(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *i;

  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(v4 + 16);
  if (!v5)
    return 0;
  for (i = (_QWORD *)(v4 + 56); (ValueMetadata *)*(i - 3) != &type metadata for CameraEffectLensBlurController; i += 5)
  {
    if (!--v5)
      return 0;
  }
  a4(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
  return 1;
}

uint64_t sub_1B1EC3E98(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(_BYTE *), uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *i;
  uint64_t v12;
  char v13;
  uint64_t v14;
  _BYTE v16[25];
  _OWORD v17[2];

  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(_QWORD *)(v8 + 16);
  if (v9)
  {
    for (i = (_QWORD *)(v8 + 56); (ValueMetadata *)*(i - 3) != &type metadata for ParticleFlockingFlyTowardsArea; i += 5)
    {
      if (!--v9)
        return v9 & 1;
    }
    v12 = *(_QWORD *)(a1 + 128) + *i + a2 * a3;
    v13 = *(_BYTE *)(v12 + 24);
    *(_OWORD *)v16 = *(_OWORD *)v12;
    *(_QWORD *)&v16[16] = *(_QWORD *)(v12 + 16);
    v16[24] = v13;
    a4(v16);
    if (!v7)
    {
      v14 = sub_1B1DA61CC(a7);
      v17[0] = *(_OWORD *)v16;
      *(_OWORD *)((char *)v17 + 9) = *(_OWORD *)&v16[9];
      sub_1B1FEE958(v14 << 16 >> 48, (uint64_t)v17);
      LOBYTE(v9) = 1;
    }
  }
  return v9 & 1;
}

uint64_t sub_1B1EC3F8C(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(__n128 *), uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *i;
  __n128 *v12;
  uint64_t v13;
  __n128 v15;
  unint64_t v16;
  __n128 v17;
  unint64_t v18;

  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(_QWORD *)(v8 + 16);
  if (v9)
  {
    for (i = (_QWORD *)(v8 + 56); (ValueMetadata *)*(i - 3) != &type metadata for ParticleTargetFromPositionInit; i += 5)
    {
      if (!--v9)
        return v9 & 1;
    }
    v12 = (__n128 *)(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
    v15 = *v12;
    v16 = v12[1].n128_u64[0];
    a4(&v15);
    if (!v7)
    {
      v13 = sub_1B1DA61CC(a7);
      v17 = v15;
      v18 = v16;
      sub_1B1FEE9B4(v13 << 16 >> 48, &v17);
      LOBYTE(v9) = 1;
    }
  }
  return v9 & 1;
}

uint64_t sub_1B1EC4078(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(float *), uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *i;
  __n128 *v12;
  float v13;
  __n128 v14;
  __n128 v15;
  uint64_t v16;
  float v18[4];
  __n128 v19;
  __n128 v20;
  char v21;

  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(_QWORD *)(v8 + 16);
  if (v9)
  {
    for (i = (_QWORD *)(v8 + 56); (ValueMetadata *)*(i - 3) != &type metadata for ParticleFlockingConstrainToArea; i += 5)
    {
      if (!--v9)
        return v9 & 1;
    }
    v12 = (__n128 *)(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
    v13 = v12->n128_f32[0];
    v14 = v12[1];
    v15 = v12[2];
    LOBYTE(v12) = v12[3].n128_u8[0];
    v18[0] = v13;
    v19 = v14;
    v20 = v15;
    v21 = (char)v12;
    a4(v18);
    if (!v7)
    {
      v16 = sub_1B1DA61CC(a7);
      sub_1B1FEEADC(v16 << 16 >> 48, v21, v18[0], v19, v20);
      LOBYTE(v9) = 1;
    }
  }
  return v9 & 1;
}

uint64_t sub_1B1EC4164(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *i;

  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(v4 + 16);
  if (!v5)
    return 0;
  for (i = (_QWORD *)(v4 + 56); (ValueMetadata *)*(i - 3) != &type metadata for CameraEffectMotionBlurController; i += 5)
  {
    if (!--v5)
      return 0;
  }
  a4(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
  return 1;
}

uint64_t sub_1B1EC41D4(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(__int128 *), uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *i;
  uint64_t v12;
  int v13;
  char v14;
  __int128 v15;
  char v16;
  int v17;
  uint64_t v18;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  _OWORD v23[2];
  uint64_t v24;

  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(_QWORD *)(v8 + 16);
  if (v9)
  {
    for (i = (_QWORD *)(v8 + 56); (ValueMetadata *)*(i - 3) != &type metadata for ParticleFlockingAlignOrientation; i += 5)
    {
      if (!--v9)
        return v9 & 1;
    }
    v12 = *(_QWORD *)(a1 + 128) + *i + a2 * a3;
    v13 = *(_DWORD *)(v12 + 4);
    v14 = *(_BYTE *)(v12 + 8);
    v15 = *(_OWORD *)(v12 + 16);
    v16 = *(_BYTE *)(v12 + 32);
    v17 = *(_DWORD *)(v12 + 36);
    LOBYTE(v20) = *(_BYTE *)v12;
    DWORD1(v20) = v13;
    BYTE8(v20) = v14;
    v21 = v15;
    LOBYTE(v22) = v16;
    HIDWORD(v22) = v17;
    a4(&v20);
    if (!v7)
    {
      v18 = sub_1B1DA61CC(a7);
      v23[0] = v20;
      v23[1] = v21;
      v24 = v22;
      sub_1B1FEEB34(v18 << 16 >> 48, (uint64_t)v23);
      LOBYTE(v9) = 1;
    }
  }
  return v9 & 1;
}

uint64_t sub_1B1EC42E0(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(float *), uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *i;
  __n128 *v12;
  float v13;
  __n128 v14;
  __n128 v15;
  uint64_t v16;
  float v18[4];
  __n128 v19;
  __n128 v20;
  char v21;

  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(_QWORD *)(v8 + 16);
  if (v9)
  {
    for (i = (_QWORD *)(v8 + 56); (ValueMetadata *)*(i - 3) != &type metadata for ParticleFlockingConstrainToPlane; i += 5)
    {
      if (!--v9)
        return v9 & 1;
    }
    v12 = (__n128 *)(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
    v13 = v12->n128_f32[0];
    v14 = v12[1];
    v15 = v12[2];
    LOBYTE(v12) = v12[3].n128_u8[0];
    v18[0] = v13;
    v19 = v14;
    v20 = v15;
    v21 = (char)v12;
    a4(v18);
    if (!v7)
    {
      v16 = sub_1B1DA61CC(a7);
      sub_1B1FEEB90(v16 << 16 >> 48, v21, v18[0], v19, v20);
      LOBYTE(v9) = 1;
    }
  }
  return v9 & 1;
}

uint64_t sub_1B1EC43CC(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *i;

  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(v4 + 16);
  if (!v5)
    return 0;
  for (i = (_QWORD *)(v4 + 56); (ValueMetadata *)*(i - 3) != &type metadata for CameraEffectToneMappingController; i += 5)
  {
    if (!--v5)
      return 0;
  }
  a4(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
  return 1;
}

uint64_t sub_1B1EC443C(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *i;

  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(v4 + 16);
  if (!v5)
    return 0;
  for (i = (_QWORD *)(v4 + 56); (ValueMetadata *)*(i - 3) != &type metadata for CameraEffectDepthOfFieldController; i += 5)
  {
    if (!--v5)
      return 0;
  }
  a4(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
  return 1;
}

uint64_t sub_1B1EC44AC(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *i;

  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(v4 + 16);
  if (!v5)
    return 0;
  for (i = (_QWORD *)(v4 + 56); (ValueMetadata *)*(i - 3) != &type metadata for CameraEffectDoughnutBokehController; i += 5)
  {
    if (!--v5)
      return 0;
  }
  a4(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
  return 1;
}

uint64_t sub_1B1EC451C(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(float *), uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *i;
  __n128 *v12;
  __n128 v13;
  uint64_t v14;
  float v16[4];
  __n128 v17;

  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(_QWORD *)(v8 + 16);
  if (v9)
  {
    for (i = (_QWORD *)(v8 + 56);
          (ValueMetadata *)*(i - 3) != &type metadata for ParticleFlockingAlignVelocityOnPlane;
          i += 5)
    {
      if (!--v9)
        return v9 & 1;
    }
    v12 = (__n128 *)(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
    v13 = v12[1];
    v16[0] = v12->n128_f32[0];
    v17 = v13;
    a4(v16);
    if (!v7)
    {
      v14 = sub_1B1DA61CC(a7);
      sub_1B1FEEBE8(v14 << 16 >> 48, v16[0], v17);
      LOBYTE(v9) = 1;
    }
  }
  return v9 & 1;
}

uint64_t sub_1B1EC45FC(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(__int128 *), uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *i;
  __int128 *v12;
  uint64_t v13;
  unsigned __int8 v14;
  unsigned __int8 v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  int v19;
  int v20;
  __int128 v22;
  uint64_t v23;
  unsigned __int8 v24;
  unsigned __int8 v25;

  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(_QWORD *)(v8 + 16);
  if (v9)
  {
    for (i = (_QWORD *)(v8 + 56);
          (ValueMetadata *)*(i - 3) != &type metadata for TextureRequireAnimationRepresentation;
          i += 5)
    {
      if (!--v9)
        return v9 & 1;
    }
    v12 = (__int128 *)(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
    v13 = *((_QWORD *)v12 + 2);
    v14 = *((_BYTE *)v12 + 24);
    v15 = *((_BYTE *)v12 + 25);
    v22 = *v12;
    v23 = v13;
    v24 = v14;
    v25 = v15;
    a4(&v22);
    if (!v7)
    {
      v16 = sub_1B1DA61CC(a7) << 16 >> 48;
      v17 = v22;
      v18 = v23;
      v19 = v24;
      v20 = v25;
      swift_retain();
      sub_1B1FDD82C(v16, v17, *((uint64_t *)&v17 + 1), v18, v19 | (v20 << 8));
      swift_release();
      LOBYTE(v9) = 1;
    }
  }
  return v9 & 1;
}

uint64_t sub_1B1EC4740(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *i;

  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(v4 + 16);
  if (!v5)
    return 0;
  for (i = (_QWORD *)(v4 + 56);
        (ValueMetadata *)*(i - 3) != &type metadata for CameraEffectChromaticTransformController;
        i += 5)
  {
    if (!--v5)
      return 0;
  }
  a4(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
  return 1;
}

uint64_t sub_1B1EC47B0(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *i;

  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(v4 + 16);
  if (!v5)
    return 0;
  for (i = (_QWORD *)(v4 + 56); (ValueMetadata *)*(i - 3) != &type metadata for Mass; i += 5)
  {
    if (!--v5)
      return 0;
  }
  a4(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
  return 1;
}

uint64_t sub_1B1EC4820(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(unsigned int *), uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *i;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v18;
  char v19;

  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(_QWORD *)(v8 + 16);
  if (v9)
  {
    for (i = (_QWORD *)(v8 + 56); (ValueMetadata *)*(i - 3) != &type metadata for Seed; i += 5)
    {
      if (!--v9)
        return v9 & 1;
    }
    v12 = (unsigned int *)(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
    v13 = *v12;
    LOBYTE(v12) = *((_BYTE *)v12 + 4);
    v18 = v13;
    v19 = (char)v12;
    a4(&v18);
    if (!v7)
    {
      v14 = sub_1B1DA61CC(a7) << 16 >> 48;
      v15 = 0x100000000;
      if (!v19)
        v15 = 0;
      v16 = v15 | v18;
      swift_retain();
      sub_1B1FDD930(v14, v16);
      swift_release();
      LOBYTE(v9) = 1;
    }
  }
  return v9 & 1;
}

uint64_t sub_1B1EC4940(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *i;

  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(v4 + 16);
  if (!v5)
    return 0;
  for (i = (_QWORD *)(v4 + 56); (ValueMetadata *)*(i - 3) != &type metadata for Scale; i += 5)
  {
    if (!--v5)
      return 0;
  }
  a4(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
  return 1;
}

uint64_t sub_1B1EC49B0(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(float *), uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *i;
  uint64_t v12;
  float v13;
  uint64_t v14;
  float v16;
  char v17;

  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(_QWORD *)(v8 + 16);
  if (v9)
  {
    for (i = (_QWORD *)(v8 + 56); (ValueMetadata *)*(i - 3) != &type metadata for Attach; i += 5)
    {
      if (!--v9)
        return v9 & 1;
    }
    v12 = *(_QWORD *)(a1 + 128) + *i + a2 * a3;
    v13 = *(float *)v12;
    LOBYTE(v12) = *(_BYTE *)(v12 + 4);
    v16 = v13;
    v17 = v12;
    a4(&v16);
    if (!v7)
    {
      v14 = sub_1B1DA61CC(a7);
      sub_1B1FEEC38(v14 << 16 >> 48, v17, v16);
      LOBYTE(v9) = 1;
    }
  }
  return v9 & 1;
}

uint64_t sub_1B1EC4A90(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *i;

  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(v4 + 16);
  if (!v5)
    return 0;
  for (i = (_QWORD *)(v4 + 56); (ValueMetadata *)*(i - 3) != &type metadata for LookAt; i += 5)
  {
    if (!--v5)
      return 0;
  }
  a4(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
  return 1;
}

uint64_t sub_1B1EC4B00(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *i;

  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(v4 + 16);
  if (!v5)
    return 0;
  for (i = (_QWORD *)(v4 + 56); (ValueMetadata *)*(i - 3) != &type metadata for Normal; i += 5)
  {
    if (!--v5)
      return 0;
  }
  a4(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
  return 1;
}

uint64_t sub_1B1EC4B70(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *i;

  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(v4 + 16);
  if (!v5)
    return 0;
  for (i = (_QWORD *)(v4 + 56); (ValueMetadata *)*(i - 3) != &type metadata for Prefab; i += 5)
  {
    if (!--v5)
      return 0;
  }
  a4(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
  return 1;
}

uint64_t sub_1B1EC4BE0(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *i;

  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(v4 + 16);
  if (!v5)
    return 0;
  for (i = (_QWORD *)(v4 + 56); (ValueMetadata *)*(i - 3) != &type metadata for Rect2D; i += 5)
  {
    if (!--v5)
      return 0;
  }
  a4(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
  return 1;
}

uint64_t sub_1B1EC4C50(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *i;

  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(v4 + 16);
  if (!v5)
    return 0;
  for (i = (_QWORD *)(v4 + 56); (ValueMetadata *)*(i - 3) != &type metadata for Scale1; i += 5)
  {
    if (!--v5)
      return 0;
  }
  a4(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
  return 1;
}

uint64_t sub_1B1EC4CC0(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *i;

  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(v4 + 16);
  if (!v5)
    return 0;
  for (i = (_QWORD *)(v4 + 56); (ValueMetadata *)*(i - 3) != &type metadata for Scale2; i += 5)
  {
    if (!--v5)
      return 0;
  }
  a4(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
  return 1;
}

uint64_t sub_1B1EC4D30(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(_BYTE *), uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *i;
  uint64_t v12;
  int v13;
  char v14;
  int v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v20[29];
  _OWORD v21[2];

  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(_QWORD *)(v8 + 16);
  if (v9)
  {
    for (i = (_QWORD *)(v8 + 56); (ValueMetadata *)*(i - 3) != &type metadata for Skybox; i += 5)
    {
      if (!--v9)
        return v9 & 1;
    }
    v12 = *(_QWORD *)(a1 + 128) + *i + a2 * a3;
    v13 = *(_DWORD *)(v12 + 16);
    v14 = *(_BYTE *)(v12 + 20);
    v15 = *(_DWORD *)(v12 + 24);
    v16 = *(_BYTE *)(v12 + 28);
    v17 = *(_QWORD *)(v12 + 8);
    *(_QWORD *)v20 = *(_QWORD *)v12;
    *(_QWORD *)&v20[8] = v17;
    *(_DWORD *)&v20[16] = v13;
    v20[20] = v14;
    *(_DWORD *)&v20[24] = v15;
    v20[28] = v16;
    a4(v20);
    if (!v7)
    {
      v18 = sub_1B1DA61CC(a7) << 16 >> 48;
      v21[0] = *(_OWORD *)v20;
      *(_OWORD *)((char *)v21 + 13) = *(_OWORD *)&v20[13];
      swift_retain();
      sub_1B1FDDB30(v18, (uint64_t)v21);
      swift_release();
      LOBYTE(v9) = 1;
    }
  }
  return v9 & 1;
}

uint64_t sub_1B1EC4E60(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(__int128 *), uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *i;
  uint64_t v12;
  __int128 v14;

  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(_QWORD *)(v8 + 16);
  if (v9)
  {
    for (i = (_QWORD *)(v8 + 56); (ValueMetadata *)*(i - 3) != &type metadata for Vortex; i += 5)
    {
      if (!--v9)
        return v9 & 1;
    }
    v14 = *(_OWORD *)(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
    a4(&v14);
    if (!v7)
    {
      v12 = sub_1B1DA61CC(a7);
      sub_1B1FEEC8C(v12 << 16 >> 48, *(float *)&v14, *((float *)&v14 + 1), *((float *)&v14 + 2), *((float *)&v14 + 3));
      LOBYTE(v9) = 1;
    }
  }
  return v9 & 1;
}

uint64_t sub_1B1EC4F34(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *i;

  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(v4 + 16);
  if (!v5)
    return 0;
  for (i = (_QWORD *)(v4 + 56); (ValueMetadata *)*(i - 3) != &type metadata for Velocity; i += 5)
  {
    if (!--v5)
      return 0;
  }
  a4(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
  return 1;
}

uint64_t sub_1B1EC4FA4(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *i;

  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(v4 + 16);
  if (!v5)
    return 0;
  for (i = (_QWORD *)(v4 + 56); (ValueMetadata *)*(i - 3) != &type metadata for KillShape; i += 5)
  {
    if (!--v5)
      return 0;
  }
  a4(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
  return 1;
}

uint64_t sub_1B1EC5014(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(uint64_t *), uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *i;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;

  v8 = v7;
  v9 = *(_QWORD *)(a1 + 48);
  v10 = *(_QWORD *)(v9 + 16);
  if (v10)
  {
    for (i = (_QWORD *)(v9 + 56); (ValueMetadata *)*(i - 3) != &type metadata for MeshModel; i += 5)
    {
      if (!--v10)
        return v10 & 1;
    }
    v14 = (uint64_t *)(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
    v15 = v14[1];
    v20 = *v14;
    v21 = v15;
    swift_retain();
    swift_bridgeObjectRetain();
    a4(&v20);
    if (v8)
    {
      swift_release();
      swift_bridgeObjectRelease();
    }
    else
    {
      v16 = sub_1B1DA61CC(a7) << 16 >> 48;
      v17 = v20;
      v18 = v21;
      swift_retain();
      sub_1B1FDDD6C(v16, v17, v18);
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      LOBYTE(v10) = 1;
    }
  }
  return v10 & 1;
}

uint64_t sub_1B1EC5154(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *i;

  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(v4 + 16);
  if (!v5)
    return 0;
  for (i = (_QWORD *)(v4 + 56); (ValueMetadata *)*(i - 3) != &type metadata for SetActive; i += 5)
  {
    if (!--v5)
      return 0;
  }
  a4(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
  return 1;
}

uint64_t sub_1B1EC51C4(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *i;

  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(v4 + 16);
  if (!v5)
    return 0;
  for (i = (_QWORD *)(v4 + 56); (ValueMetadata *)*(i - 3) != &type metadata for UserData1; i += 5)
  {
    if (!--v5)
      return 0;
  }
  a4(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
  return 1;
}

uint64_t sub_1B1EC5234(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *i;

  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(v4 + 16);
  if (!v5)
    return 0;
  for (i = (_QWORD *)(v4 + 56); (ValueMetadata *)*(i - 3) != &type metadata for UserData2; i += 5)
  {
    if (!--v5)
      return 0;
  }
  a4(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
  return 1;
}

uint64_t sub_1B1EC52A4(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *i;

  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(v4 + 16);
  if (!v5)
    return 0;
  for (i = (_QWORD *)(v4 + 56); (ValueMetadata *)*(i - 3) != &type metadata for UserData3; i += 5)
  {
    if (!--v5)
      return 0;
  }
  a4(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
  return 1;
}

uint64_t sub_1B1EC5314(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *i;

  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(v4 + 16);
  if (!v5)
    return 0;
  for (i = (_QWORD *)(v4 + 56); (ValueMetadata *)*(i - 3) != &type metadata for UserData4; i += 5)
  {
    if (!--v5)
      return 0;
  }
  a4(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
  return 1;
}

uint64_t sub_1B1EC5384(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *i;

  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(v4 + 16);
  if (!v5)
    return 0;
  for (i = (_QWORD *)(v4 + 56); (ValueMetadata *)*(i - 3) != &type metadata for WorldAABB; i += 5)
  {
    if (!--v5)
      return 0;
  }
  a4(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
  return 1;
}

uint64_t sub_1B1EC53F4(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(uint64_t *), uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *i;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  uint64_t v20;
  unsigned __int8 v21;
  char v22;

  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(_QWORD *)(v8 + 16);
  if (v9)
  {
    for (i = (_QWORD *)(v8 + 56); (ValueMetadata *)*(i - 3) != &type metadata for MeshImportOptions; i += 5)
    {
      if (!--v9)
        return v9 & 1;
    }
    v12 = *(_QWORD *)(a1 + 128) + *i + a2 * a3;
    v13 = *(_QWORD *)v12;
    v14 = *(_BYTE *)(v12 + 8);
    LOBYTE(v12) = *(_BYTE *)(v12 + 9);
    v20 = v13;
    v21 = v14;
    v22 = v12;
    a4(&v20);
    if (!v7)
    {
      v15 = sub_1B1DA61CC(a7) << 16 >> 48;
      v16 = v20;
      if (v22)
        v17 = 256;
      else
        v17 = 0;
      v18 = v17 | v21;
      swift_retain();
      sub_1B1FDDE88(v15, v16, v18);
      swift_release();
      LOBYTE(v9) = 1;
    }
  }
  return v9 & 1;
}

uint64_t sub_1B1EC552C(uint64_t a1, __int16 a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *i;

  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(v4 + 16);
  if (!v5)
    return 0;
  for (i = (_QWORD *)(v4 + 56); (ValueMetadata *)*(i - 3) != &type metadata for MorpherController; i += 5)
  {
    if (!--v5)
      return 0;
  }
  a4(*(_QWORD *)(a1 + 128) + *i + a2 * a3);
  return 1;
}

uint64_t sub_1B1EC559C(uint64_t a1)
{
  uint64_t v2;

  sub_1B1792854(0, &qword_1ED4B7D80, (void (*)(uint64_t))type metadata accessor for GraphScript);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1B1EC55E8(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

void sub_1B1EC5634(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  unint64_t v5;
  uint64_t v6;

  if (!*a2)
  {
    sub_1B1A02758(255, a3, a4, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    v5 = sub_1B2229124();
    if (!v6)
      atomic_store(v5, a2);
  }
}

uint64_t sub_1B1EC5694(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 32);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return a1;
}

uint64_t sub_1B1EC56D8(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1B1EC5708(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1B1EC5738(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1B1EC57D4(uint64_t a1, uint64_t a2, unint64_t *a3, unint64_t *a4, uint64_t a5)
{
  uint64_t v7;

  sub_1B1EC5634(0, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a2, a1, v7);
  return a2;
}

uint64_t sub_1B1EC5824(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1B1EC5854(uint64_t a1)
{
  sub_1B1AF76C0(*(_QWORD *)(a1 + 8));
  return a1;
}

uint64_t sub_1B1EC5884(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 32);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return a1;
}

uint64_t sub_1B1EC58D0(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1B1EC5968(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1B1EC5A00(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE v17[16];
  _BYTE v18[32];
  _BYTE v19[32];

  v3 = v1;
  sub_1B1EC6C84(0, &qword_1EEF60218, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED170]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = &v17[-v9];
  sub_1B19FA070(a1, a1[3]);
  sub_1B1EC6C40();
  sub_1B222A180();
  v18[0] = 0;
  sub_1B2229934();
  if (!v2)
  {
    sub_1B1B4D278(v3 + 8, (uint64_t)v19, (unint64_t *)&qword_1EEF60220, (uint64_t (*)(uint64_t))sub_1B1A0DBF0);
    sub_1B1B4D278((uint64_t)v19, (uint64_t)v18, (unint64_t *)&qword_1EEF60220, (uint64_t (*)(uint64_t))sub_1B1A0DBF0);
    v17[15] = 1;
    sub_1B1A0DBF0(0, v11, v12, v13);
    sub_1B1BC374C((unint64_t *)&qword_1EEF63460, (uint64_t)&unk_1B22B9C6C, v14, v15);
    sub_1B2229904();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v7 + 8))(v10, v6);
}

uint64_t sub_1B1EC5B7C(char *a1, char *a2)
{
  return sub_1B1F98588(*a1, *a2);
}

uint64_t sub_1B1EC5B88()
{
  _BYTE *v0;

  if (*v0)
    return 0x6576727563;
  else
    return 0x6E6F697461727564;
}

uint64_t sub_1B1EC5BC0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1B1EC66A8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1B1EC5BE4()
{
  sub_1B1EC6C40();
  return sub_1B222A1D4();
}

uint64_t sub_1B1EC5C0C()
{
  sub_1B1EC6C40();
  return sub_1B222A1E0();
}

double sub_1B1EC5C34@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  char v7;

  sub_1B1EC6A90(a1, (uint64_t)v6);
  if (!v2)
  {
    result = *(double *)v6;
    v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    *(_BYTE *)(a2 + 32) = v7;
  }
  return result;
}

uint64_t sub_1B1EC5C78(_QWORD *a1)
{
  return sub_1B1EC5A00(a1);
}

uint64_t sub_1B1EC5CB0()
{
  return type metadata accessor for ParticleTextureFrameEvolutionSystem();
}

double sub_1B1EC5CCC()
{
  uint64_t v0;
  double result;

  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAD80, (uint64_t (*)(uint64_t))sub_1B19ED84C, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_QWORD *)&result = 1;
  *(_OWORD *)(v0 + 16) = xmmword_1B226D240;
  *(_QWORD *)(v0 + 32) = &type metadata for ParticleTextureFrame;
  *(_QWORD *)(v0 + 40) = &off_1E639E080;
  return result;
}

void sub_1B1EC5D28(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 1065353216;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 32) = 0;
}

uint64_t type metadata accessor for ParticleTextureFrameEvolution.GPUSystem()
{
  return objc_opt_self();
}

const char *sub_1B1EC5D64()
{
  return "ParticleTextureFrameEvolution.GPU";
}

uint64_t sub_1B1EC5D78()
{
  return type metadata accessor for ParticleTextureFrameEvolution.GPUSystem();
}

uint64_t *sub_1B1EC5D94(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  float v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  float v11;
  __int128 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  unsigned int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  os_unfair_lock_s *v20;
  uint64_t v21;
  uint64_t v22;
  _DWORD *v23;
  uint64_t v24;
  float *v25;
  float v26;
  int v27;
  uint64_t v28;
  float *v29;
  _DWORD *v30;
  float v31;
  int v32;
  float v33;
  float v34;
  __int128 v35;
  int32x2_t v36;
  _QWORD *v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  unsigned int *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  unint64_t v46;
  os_unfair_lock_s *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  float v52;
  float32x4_t *v53;
  unint64_t v54;
  float32x4_t v55;
  unint64_t v56;
  float *v57;
  uint64_t v58;
  uint64_t v59;
  float v60;
  float32x4_t *v61;
  unint64_t v62;
  float32x4_t v63;
  uint64_t v64;
  float *v65;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  float32x4_t v71;
  uint64_t v72;
  int32x2_t v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD v89[4];
  char v90;
  uint64_t v91[8];
  __int128 v92;
  __int128 v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  uint64_t v99;
  _BYTE v100[8];
  uint64_t v101;
  __int128 v102;
  __int128 v103;
  uint64_t v104;
  _BYTE v105[40];
  __int128 v106;
  __int128 v107;
  uint64_t v108;

  v2 = v1;
  v3 = 0;
  v5 = *a1;
  v4 = (_QWORD *)a1[1];
  swift_retain_n();
  sub_1B1D18298(v4, (uint64_t)v89);
  v6 = *(float *)v89;
  v7 = v89[1];
  v9 = v89[2];
  v8 = v89[3];
  v10 = v90;
  swift_release();
  sub_1B19F66A0((uint64_t)v89, (uint64_t)v100, &qword_1EEF60200);
  v11 = 1.0;
  if (v101 == 1)
    goto LABEL_23;
  if (!v7)
  {
    v11 = v6;
LABEL_23:
    sub_1B1E5267C();
    v34 = v33;
    v35 = *(_OWORD *)(v2 + 32);
    v106 = *(_OWORD *)(v2 + 16);
    v107 = v35;
    v108 = *(_QWORD *)(v2 + 48);
    sub_1B1E8FCE4(v5, (uint64_t)&v106, 0x200000000, v91);
    sub_1B19F66A0((uint64_t)v91, (uint64_t)&v92, (unint64_t *)&qword_1ED4B7DE0);
    if (!(_QWORD)v92)
      return (uint64_t *)swift_release();
    if (v99 <= 0)
    {
      swift_release();
      return sub_1B19ED748(v91);
    }
    v85 = v96;
    if (!v96)
    {
      swift_retain();
      swift_retain();
      swift_retain();
LABEL_58:
      swift_release();
      sub_1B19ED748(v91);
      return sub_1B19ED748(v91);
    }
    *(float *)v36.i32 = v34 / v11;
    v73 = v36;
    v37 = v98;
    v38 = v98[4];
    v39 = *(_BYTE *)(v97 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
    v102 = v92;
    v103 = v93;
    v104 = v94;
    v81 = (uint64_t)(v98 + 6);
    v83 = v95;
    v79 = v98 + 8;
    swift_retain();
    swift_retain();
    swift_retain();
    v40 = 0;
    v71 = (float32x4_t)vdupq_lane_s32(v73, 0);
    v77 = v39;
    v75 = v38;
    while (1)
    {
      v41 = (unsigned int *)(v83 + 48 * v40);
      v42 = *v41;
      v87 = v41[1];
      v88 = v3;
      v44 = (uint64_t *)*((_QWORD *)v41 + 2);
      v43 = *((_QWORD *)v41 + 3);
      v46 = *((_QWORD *)v41 + 4);
      v45 = *((_QWORD *)v41 + 5);
      if ((v39 & 1) != 0)
      {
        v47 = *(os_unfair_lock_s **)(v45 + 376);
        swift_retain_n();
        os_unfair_lock_lock(v47);
        os_unfair_lock_lock(*(os_unfair_lock_t *)(v45 + 344));
        swift_release();
      }
      else
      {
        swift_retain();
      }
      ecs_stack_allocator_push_snapshot(v38);
      sub_1B19F66A0(v81, (uint64_t)v105, &qword_1ED4B7FB0);
      v48 = v37[4];
      v49 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v45 + 40) + 16) + 32) + 16) + 1;
      swift_retain();
      v37[6] = ecs_stack_allocator_allocate(v48, 48 * v49, 8);
      v37[7] = v49;
      v79[1] = 0;
      v79[2] = 0;
      *v79 = 0;
      swift_release();
      v50 = sub_1B1A12038((uint64_t)&type metadata for ParticleTextureFrame, (uint64_t)&off_1E639E080, v44, v43, v46, (uint64_t)v37);
      if (v44)
      {
        v39 = v77;
        if (v46)
        {
          if (v46 >= 8)
          {
            v51 = v46 & 0xFFFFFFFFFFFFFFF8;
            v53 = (float32x4_t *)(v50 + 16);
            v54 = v46 & 0xFFFFFFFFFFFFFFF8;
            v3 = v88;
            v38 = v75;
            do
            {
              v55 = vaddq_f32(v71, *v53);
              v53[-1] = vaddq_f32(v71, v53[-1]);
              *v53 = v55;
              v53 += 2;
              v54 -= 8;
            }
            while (v54);
            v52 = *(float *)v73.i32;
            if (v46 == v51)
              goto LABEL_51;
          }
          else
          {
            v51 = 0;
            v3 = v88;
            v52 = *(float *)v73.i32;
            v38 = v75;
          }
          v56 = v46 - v51;
          v57 = (float *)(v50 + 4 * v51);
          do
          {
            *v57 = v52 + *v57;
            ++v57;
            --v56;
          }
          while (v56);
        }
        else
        {
          v3 = v88;
          v38 = v75;
        }
      }
      else if ((_DWORD)v42 == (_DWORD)v87)
      {
        v3 = v88;
        v38 = v75;
        v39 = v77;
      }
      else
      {
        v58 = v87 - v42;
        if ((unint64_t)(v87 - v42) >= 8)
        {
          v59 = (v58 & 0xFFFFFFFFFFFFFFF8) + v42;
          v61 = (float32x4_t *)(v50 + 4 * v42 + 16);
          v62 = v58 & 0xFFFFFFFFFFFFFFF8;
          do
          {
            v63 = vaddq_f32(v71, *v61);
            v61[-1] = vaddq_f32(v71, v61[-1]);
            *v61 = v63;
            v61 += 2;
            v62 -= 8;
          }
          while (v62);
          v3 = v88;
          v60 = *(float *)v73.i32;
          v38 = v75;
          v39 = v77;
          if (v58 == (v58 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_51;
        }
        else
        {
          v59 = v42;
          v3 = v88;
          v60 = *(float *)v73.i32;
          v38 = v75;
          v39 = v77;
        }
        v64 = v87 - v59;
        v65 = (float *)(v50 + 4 * v59);
        do
        {
          *v65 = v60 + *v65;
          ++v65;
          --v64;
        }
        while (v64);
      }
LABEL_51:
      sub_1B1F05D48(v37, (unsigned __int16 **)&v102, (uint64_t)v105);
      sub_1B1F03804((char *)v45);
      ecs_stack_allocator_pop_snapshot(v38);
      if ((v39 & 1) != 0)
      {
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v45 + 344));
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v45 + 376));
      }
      swift_release();
      if (++v40 == v85)
        goto LABEL_58;
    }
  }
  v12 = *(_OWORD *)(v2 + 72);
  v106 = *(_OWORD *)(v2 + 56);
  v107 = v12;
  v108 = *(_QWORD *)(v2 + 88);
  sub_1B1E8FCE4(v5, (uint64_t)&v106, 0x200000000, v91);
  sub_1B19F66A0((uint64_t)v91, (uint64_t)&v92, (unint64_t *)&qword_1ED4B7DE0);
  if (!(_QWORD)v92)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return (uint64_t *)swift_bridgeObjectRelease();
  }
  if (v99 <= 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
  }
  else
  {
    v76 = v96;
    if (v96)
    {
      v13 = v98[4];
      v14 = *(_BYTE *)(v97 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
      v102 = v92;
      v103 = v93;
      v72 = v95;
      v104 = v94;
      v86 = v98;
      v69 = v98 + 8;
      v70 = (uint64_t)(v98 + 6);
      swift_retain();
      swift_retain();
      swift_retain();
      v15 = 0;
      v74 = v14;
      v67 = v8;
      v68 = v13;
      while (1)
      {
        v84 = v15;
        v16 = (unsigned int *)(v72 + 48 * v15);
        v80 = *v16;
        v78 = v16[1];
        v17 = *((_QWORD *)v16 + 3);
        v82 = (uint64_t *)*((_QWORD *)v16 + 2);
        v18 = *((_QWORD *)v16 + 4);
        v19 = *((_QWORD *)v16 + 5);
        if ((v14 & 1) != 0)
        {
          v20 = *(os_unfair_lock_s **)(v19 + 376);
          swift_retain_n();
          os_unfair_lock_lock(v20);
          os_unfair_lock_lock(*(os_unfair_lock_t *)(v19 + 344));
          swift_release();
        }
        else
        {
          swift_retain();
        }
        ecs_stack_allocator_push_snapshot(v13);
        sub_1B19F66A0(v70, (uint64_t)v105, &qword_1ED4B7FB0);
        v21 = v86[4];
        v22 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v19 + 40) + 16) + 32) + 16) + 1;
        swift_retain();
        v86[6] = ecs_stack_allocator_allocate(v21, 48 * v22, 8);
        v86[7] = v22;
        v69[1] = 0;
        v69[2] = 0;
        *v69 = 0;
        swift_release();
        v23 = (_DWORD *)sub_1B1A12038((uint64_t)&type metadata for ParticleTextureFrame, (uint64_t)&off_1E639E080, v82, v17, v18, (uint64_t)v86);
        v24 = sub_1B1A12038((uint64_t)&type metadata for ParticleAge, (uint64_t)&off_1E63717C8, v82, v17, v18, (uint64_t)v86);
        v25 = (float *)v24;
        if (v82)
        {
          if (!v18)
            goto LABEL_17;
          v13 = v68;
          do
          {
            v26 = *v25++;
            sub_1B1FFCF6C(v7, v9, v67, v10, v26);
            *v23++ = v27;
            --v18;
          }
          while (v18);
        }
        else
        {
          if ((_DWORD)v80 == (_DWORD)v78)
          {
LABEL_17:
            v13 = v68;
            goto LABEL_20;
          }
          v28 = v78 - v80;
          v29 = (float *)(v24 + 4 * v80);
          v30 = &v23[v80];
          v13 = v68;
          do
          {
            v31 = *v29++;
            sub_1B1FFCF6C(v7, v9, v67, v10, v31);
            *v30++ = v32;
            --v28;
          }
          while (v28);
        }
LABEL_20:
        sub_1B1F05D48(v86, (unsigned __int16 **)&v102, (uint64_t)v105);
        sub_1B1F03804((char *)v19);
        ecs_stack_allocator_pop_snapshot(v13);
        v14 = v74;
        if ((v74 & 1) != 0)
        {
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v19 + 344));
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v19 + 376));
        }
        swift_release();
        v15 = v84 + 1;
        if (v84 + 1 == v76)
          goto LABEL_61;
      }
    }
    swift_retain();
    swift_retain();
    swift_retain();
LABEL_61:
    swift_release();
    sub_1B19ED748(v91);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  return sub_1B19ED748(v91);
}

uint64_t type metadata accessor for ParticleTextureFrameEvolutionSystem()
{
  return objc_opt_self();
}

uint64_t sub_1B1EC65F0(uint64_t a1)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[2];
  uint64_t v8;
  _OWORD v9[2];
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;

  v2 = swift_allocObject();
  v3 = *(_OWORD *)(a1 + 104);
  v11 = *(_OWORD *)(a1 + 88);
  v12 = v3;
  v13 = *(_QWORD *)(a1 + 120);
  sub_1B19F15CC((uint64_t)v7);
  v4 = v7[1];
  *(_OWORD *)(v2 + 56) = v7[0];
  *(_OWORD *)(v2 + 72) = v4;
  *(_QWORD *)(v2 + 88) = v8;
  sub_1B1B7095C((uint64_t)v9);
  sub_1B1B4F21C(a1);
  v5 = v9[1];
  *(_OWORD *)(v2 + 16) = v9[0];
  *(_OWORD *)(v2 + 32) = v5;
  *(_QWORD *)(v2 + 48) = v10;
  return v2;
}

const char *sub_1B1EC6694()
{
  return "ParticleTextureFrameEvolution";
}

uint64_t sub_1B1EC66A8(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6E6F697461727564 && a2 == 0xE800000000000000;
  if (v2 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6576727563 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_1B2229D24();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_1B1EC6790(uint64_t *a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  float v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  float v10;
  void *v11;
  float v12;
  float v13;
  uint64_t v14;
  uint64_t ObjectType;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  float v22;
  _QWORD v23[4];
  char v24;
  _BYTE v25[8];
  uint64_t v26;
  _BYTE v27[8];
  id v28;

  v2 = a1[2];
  v3 = (_QWORD *)a1[3];
  v4 = a1[6];
  swift_retain_n();
  sub_1B1D18298(v3, (uint64_t)v23);
  v5 = *(float *)v23;
  v6 = v23[1];
  v8 = v23[2];
  v7 = v23[3];
  v9 = v24;
  swift_release();
  sub_1B19F66A0((uint64_t)v23, (uint64_t)v25, &qword_1EEF60200);
  if (v26 == 1)
  {
    v10 = 1.0;
LABEL_7:
    sub_1B1B4D278((uint64_t)a1, (uint64_t)v27, &qword_1EEF60208, (uint64_t (*)(uint64_t))sub_1B1EC6A2C);
    sub_1B1B4D278((uint64_t)v27, (uint64_t)&v28, &qword_1EEF60208, (uint64_t (*)(uint64_t))sub_1B1EC6A2C);
    if (v28)
      objc_msgSend(v28, sel_setTexture_atIndex_, 0, 0);
    v6 = 0;
    goto LABEL_10;
  }
  v10 = v5;
  if (!v6)
    goto LABEL_7;
  swift_retain();
  sub_1B1AF7674(v6);
  v11 = sub_1B20E1C70(v6, v8, v7, v9);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B1B4D278((uint64_t)a1, (uint64_t)v27, &qword_1EEF60208, (uint64_t (*)(uint64_t))sub_1B1EC6A2C);
  sub_1B1B4D278((uint64_t)v27, (uint64_t)&v28, &qword_1EEF60208, (uint64_t (*)(uint64_t))sub_1B1EC6A2C);
  if (v28)
    objc_msgSend(v28, sel_setTexture_atIndex_, v11, 0);
  swift_unknownObjectRelease();
LABEL_10:
  sub_1B1E52E10();
  v13 = v12;
  sub_1B1AF76C0(v6);
  v22 = v13 / v10;
  v14 = *a1;
  if (*a1)
  {
    ObjectType = swift_getObjectType();
    type metadata accessor for particle_textureframe_evolution_uniforms(0);
    sub_1B1F40E1C((uint64_t)&v22, 1, ObjectType, v16, v17, v18, v19, v20);
  }
  swift_retain();
  sub_1B1B1FC34((uint64_t)a1);
  sub_1B1FE6FB8(v4, v2, v14 == 0, 0, (uint64_t)a1, 0xD00000000000001FLL, 0x80000001B23406C0, 0);
  sub_1B1B1FC88((uint64_t)a1);
  return swift_release_n();
}

unint64_t sub_1B1EC6A2C()
{
  unint64_t result;

  result = qword_1EEF60210;
  if (!qword_1EEF60210)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&qword_1EEF60210);
  }
  return result;
}

ValueMetadata *type metadata accessor for ParticleTextureFrameEvolution()
{
  return &type metadata for ParticleTextureFrameEvolution;
}

uint64_t sub_1B1EC6A90@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t result;
  __int128 v21;
  char v22;
  __int128 v23;
  uint64_t v24;
  char v25;

  sub_1B1EC6C84(0, &qword_1ED4BAC30, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED048]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = (char *)&v21 - v9;
  sub_1B19FA070(a1, a1[3]);
  sub_1B1EC6C40();
  sub_1B222A150();
  if (v2)
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  LOBYTE(v23) = 0;
  sub_1B22297F0();
  v12 = v11;
  sub_1B1A0DBF0(0, v13, v14, v15);
  v22 = 1;
  sub_1B1BC374C((unint64_t *)&qword_1ED4B9F30, (uint64_t)&unk_1B22B9C94, v16, v17);
  sub_1B22297B4();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  v21 = v23;
  v18 = v24;
  v19 = v25;
  result = _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  *(_DWORD *)a2 = v12;
  *(_OWORD *)(a2 + 8) = v21;
  *(_QWORD *)(a2 + 24) = v18;
  *(_BYTE *)(a2 + 32) = v19;
  return result;
}

unint64_t sub_1B1EC6C40()
{
  unint64_t result;

  result = qword_1ED4B9C68;
  if (!qword_1ED4B9C68)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B229CEC4, &type metadata for ParticleTextureFrameEvolution.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED4B9C68);
  }
  return result;
}

void sub_1B1EC6C84(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_1B1EC6C40();
    v7 = a3(a1, &type metadata for ParticleTextureFrameEvolution.CodingKeys, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t storeEnumTagSinglePayload for ParticleTextureFrameEvolution.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1B1EC6D2C + 4 * byte_1B229CC85[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1B1EC6D60 + 4 * asc_1B229CC80[v4]))();
}

uint64_t sub_1B1EC6D60(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1EC6D68(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B1EC6D70);
  return result;
}

uint64_t sub_1B1EC6D7C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B1EC6D84);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1B1EC6D88(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1EC6D90(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ParticleTextureFrameEvolution.CodingKeys()
{
  return &type metadata for ParticleTextureFrameEvolution.CodingKeys;
}

unint64_t sub_1B1EC6DB0()
{
  unint64_t result;

  result = qword_1EEF60228;
  if (!qword_1EEF60228)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B229CE9C, &type metadata for ParticleTextureFrameEvolution.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF60228);
  }
  return result;
}

unint64_t sub_1B1EC6DF8()
{
  unint64_t result;

  result = qword_1ED4B9C80[0];
  if (!qword_1ED4B9C80[0])
  {
    result = MEMORY[0x1B5E23E74](&unk_1B229CE0C, &type metadata for ParticleTextureFrameEvolution.CodingKeys);
    atomic_store(result, qword_1ED4B9C80);
  }
  return result;
}

unint64_t sub_1B1EC6E40()
{
  unint64_t result;

  result = qword_1ED4B9C78;
  if (!qword_1ED4B9C78)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B229CE34, &type metadata for ParticleTextureFrameEvolution.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED4B9C78);
  }
  return result;
}

uint64_t destroy for RenderArguments()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for RenderArguments(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  v6 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v6;
  v7 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v7;
  v8 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v8;
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for RenderArguments(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_WORD *)(a1 + 96) = *(_WORD *)(a2 + 96);
  *(_WORD *)(a1 + 98) = *(_WORD *)(a2 + 98);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for RenderArguments(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for RenderArguments()
{
  return &type metadata for RenderArguments;
}

uint64_t sub_1B1EC7248(uint64_t a1)
{
  uint64_t v1;
  int v3;
  int v4;
  int v5;
  int v6;
  unint64_t v7;

  sub_1B1EC72F4(*(_QWORD *)a1);
  sub_1B1EC76B0(*(_QWORD *)(a1 + 8));
  sub_1B1EC7A34(*(_QWORD *)(a1 + 16));
  v3 = *(unsigned __int16 *)(a1 + 96);
  v4 = *(unsigned __int16 *)(v1 + 96);
  if ((v3 & ~v4) != 0)
    *(_WORD *)(v1 + 96) = v4 | v3;
  sub_1B1EC72F4(*(_QWORD *)(a1 + 24));
  sub_1B1EC76B0(*(_QWORD *)(a1 + 32));
  sub_1B1EC7A34(*(_QWORD *)(a1 + 40));
  v5 = *(unsigned __int16 *)(a1 + 98);
  v6 = *(unsigned __int16 *)(v1 + 98);
  if ((v5 & ~v6) != 0)
    *(_WORD *)(v1 + 98) = v6 | v5;
  v7 = swift_bridgeObjectRetain();
  return sub_1B19F5FD0(v7);
}

uint64_t sub_1B1EC72F4(uint64_t result)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 v26;
  uint64_t v27;
  unsigned __int8 v28;
  unint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  unsigned __int8 v34;
  _QWORD *v35;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned __int8 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned __int8 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v2 = (_QWORD *)result;
  v3 = *(_QWORD **)v1;
  if (*(_QWORD *)(*(_QWORD *)v1 + 16))
  {
    if (*(_QWORD *)(result + 16))
    {
      v46 = result + 32;
      v4 = *(_QWORD *)(result + 16);
      swift_bridgeObjectRetain();
      v5 = v4;
      v6 = 0;
      v47 = v5;
      while (1)
      {
        v13 = v46 + 48 * v6;
        v15 = *(_QWORD *)v13;
        v14 = *(_QWORD *)(v13 + 8);
        v17 = *(_QWORD *)(v13 + 16);
        v16 = *(_QWORD *)(v13 + 24);
        v18 = *(_BYTE *)(v13 + 32);
        v19 = *(_QWORD *)(v13 + 40);
        v20 = v3[2];
        if (!v20)
          break;
        v21 = 0;
        v22 = v3 + 4;
        v23 = v20 - 1;
        do
        {
          while (1)
          {
            v24 = v21 + (v23 - v21) / 2;
            v25 = v22[6 * v24 + 5];
            if (v25 >= v19)
              break;
            v21 = v24 + 1;
            if (v23 < v24 + 1)
              goto LABEL_14;
          }
          if (v19 >= v25)
          {
            v21 += (v23 - v21) / 2;
            goto LABEL_21;
          }
          v23 = v24 - 1;
        }
        while (v24 - 1 >= v21);
LABEL_14:
        if (v21 >= (uint64_t)v20)
          break;
        v25 = v22[6 * v21 + 5];
LABEL_21:
        if (v25 == v19)
        {
          v32 = v16;
          v33 = v16;
          v34 = v18;
          sub_1B1D2DBE0(v15, v14, v17, v33, v18);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v3 = sub_1B1FFEF4C(v3);
          v35 = &v3[6 * v21];
          v43 = v35[5];
          v44 = v35[4];
          v41 = v35[7];
          v42 = v35[6];
          v40 = *((_BYTE *)v35 + 64);
          sub_1B1D2DBE0(v15, v14, v17, v32, v34);
          sub_1B1D2DC08(v44, v43, v42, v41, v40);
          v35[4] = v15;
          v35[5] = v14;
          v35[6] = v17;
          v35[7] = v32;
          *((_BYTE *)v35 + 64) = v34;
          v35[9] = v19;
          v10 = v15;
          v11 = v14;
          v12 = v17;
          v9 = v32;
          v7 = v34;
LABEL_6:
          sub_1B1D2DC08(v10, v11, v12, v9, v7);
          goto LABEL_7;
        }
        v45 = v18;
        sub_1B1D2DBE0(v15, v14, v17, v16, v18);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        if (!isUniquelyReferenced_nonNull_native || v20 >= v3[3] >> 1)
          v3 = sub_1B1C67CD8(isUniquelyReferenced_nonNull_native, v20 + 1, 1, v3);
        v37 = (uint64_t)&v3[6 * v21 + 4];
        sub_1B1B20CB0(0, &qword_1ED4B89B0);
        swift_arrayDestroy();
        v38 = v3[2] - v21;
        if (v38 < 0)
        {
          result = sub_1B2229700();
          __break(1u);
          return result;
        }
        memmove((void *)(v37 + 48), &v3[6 * v21 + 4], 48 * v38);
        ++v3[2];
        *(_QWORD *)v37 = v15;
        *(_QWORD *)(v37 + 8) = v14;
        *(_QWORD *)(v37 + 16) = v17;
        *(_QWORD *)(v37 + 24) = v16;
        *(_BYTE *)(v37 + 32) = v45;
        v3[6 * v21 + 9] = v19;
LABEL_7:
        if (++v6 == v47)
        {
          result = swift_bridgeObjectRelease();
          v2 = v3;
          v1 = v39;
          goto LABEL_32;
        }
      }
      v26 = v18;
      sub_1B1D2DBE0(v15, v14, v17, v16, v18);
      v48 = v16;
      v27 = v16;
      v28 = v26;
      sub_1B1D2DBE0(v15, v14, v17, v27, v26);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v3 = sub_1B1C67CD8(0, v20 + 1, 1, v3);
      v30 = v3[2];
      v29 = v3[3];
      if (v30 < v29 >> 1)
      {
        v7 = v28;
      }
      else
      {
        v31 = sub_1B1C67CD8(v29 > 1, v30 + 1, 1, v3);
        v7 = v28;
        v3 = v31;
      }
      v3[2] = v30 + 1;
      v8 = &v3[6 * v30];
      v8[4] = v15;
      v8[5] = v14;
      v9 = v48;
      v8[6] = v17;
      v8[7] = v48;
      *((_BYTE *)v8 + 64) = v7;
      v8[9] = v19;
      v10 = v15;
      v11 = v14;
      v12 = v17;
      goto LABEL_6;
    }
  }
  else
  {
    swift_bridgeObjectRetain();
    result = swift_bridgeObjectRelease();
LABEL_32:
    *(_QWORD *)v1 = v2;
  }
  return result;
}

uint64_t sub_1B1EC76B0(uint64_t result)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  _QWORD *v26;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;

  v2 = (_QWORD *)result;
  v3 = *(_QWORD **)v1;
  if (!*(_QWORD *)(*(_QWORD *)v1 + 16))
  {
    swift_bridgeObjectRetain();
    result = swift_bridgeObjectRelease();
    goto LABEL_32;
  }
  v4 = *(_QWORD *)(result + 16);
  if (v4)
  {
    v36 = result + 32;
    swift_bridgeObjectRetain();
    v5 = 0;
    v37 = v4;
    while (2)
    {
      v9 = v36 + 40 * v5;
      v11 = *(_QWORD *)v9;
      v10 = *(_QWORD *)(v9 + 8);
      v12 = *(_QWORD *)(v9 + 16);
      v13 = *(_BYTE *)(v9 + 24);
      v14 = *(_QWORD *)(v9 + 32);
      v15 = v3[2];
      if (!v15)
        goto LABEL_17;
      v16 = 0;
      v17 = v3 + 4;
      v18 = v15 - 1;
      do
      {
        while (1)
        {
          v19 = v16 + (v18 - v16) / 2;
          v20 = v17[5 * v19 + 4];
          if (v20 >= v14)
            break;
          v16 = v19 + 1;
          if (v18 < v19 + 1)
            goto LABEL_15;
        }
        if (v14 >= v20)
        {
          v16 += (v18 - v16) / 2;
LABEL_23:
          v35 = v13;
          if (v20 == v14)
          {
            sub_1B1CC60E4(v11, v10, v12, v13);
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              v3 = sub_1B1FFEF24(v3);
            v6 = &v3[5 * v16];
            v7 = v6[4];
            v33 = v6[6];
            v34 = v6[5];
            v32 = *((_BYTE *)v6 + 56);
            sub_1B1CC60E4(v11, v10, v12, v35);
            sub_1B1CC62AC(v7, v34, v33, v32);
            v6[4] = v11;
            v6[5] = v10;
            v6[6] = v12;
            *((_BYTE *)v6 + 56) = v35;
            v6[8] = v14;
            sub_1B1CC62AC(v11, v10, v12, v35);
          }
          else
          {
            sub_1B1CC60E4(v11, v10, v12, v13);
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            if (!isUniquelyReferenced_nonNull_native || v15 >= v3[3] >> 1)
              v3 = sub_1B1C67B84(isUniquelyReferenced_nonNull_native, v15 + 1, 1, v3);
            v28 = (uint64_t)&v3[5 * v16 + 4];
            sub_1B1B20CB0(0, &qword_1EEF5AB90);
            swift_arrayDestroy();
            v29 = v3[2] - v16;
            if (v29 < 0)
            {
              result = sub_1B2229700();
              __break(1u);
              return result;
            }
            memmove((void *)(v28 + 40), &v3[5 * v16 + 4], 40 * v29);
            ++v3[2];
            *(_QWORD *)v28 = v11;
            *(_QWORD *)(v28 + 8) = v10;
            *(_QWORD *)(v28 + 16) = v12;
            *(_BYTE *)(v28 + 24) = v35;
            v3[5 * v16 + 8] = v14;
          }
          v8 = v37;
          goto LABEL_8;
        }
        v18 = v19 - 1;
      }
      while (v19 - 1 >= v16);
LABEL_15:
      if (v16 < (uint64_t)v15)
      {
        v20 = v17[5 * v16 + 4];
        goto LABEL_23;
      }
LABEL_17:
      v21 = v13;
      sub_1B1CC60E4(v11, v10, v12, v13);
      v22 = v21;
      sub_1B1CC60E4(v11, v10, v12, v21);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v3 = sub_1B1C67B84(0, v15 + 1, 1, v3);
      v24 = v3[2];
      v23 = v3[3];
      if (v24 >= v23 >> 1)
      {
        v30 = sub_1B1C67B84(v23 > 1, v24 + 1, 1, v3);
        v25 = v22;
        v3 = v30;
      }
      else
      {
        v25 = v22;
      }
      v8 = v37;
      v3[2] = v24 + 1;
      v26 = &v3[5 * v24];
      v26[4] = v11;
      v26[5] = v10;
      v26[6] = v12;
      *((_BYTE *)v26 + 56) = v25;
      v26[8] = v14;
      sub_1B1CC62AC(v11, v10, v12, v25);
LABEL_8:
      if (++v5 != v8)
        continue;
      break;
    }
    result = swift_bridgeObjectRelease();
    v2 = v3;
    v1 = v31;
LABEL_32:
    *(_QWORD *)v1 = v2;
  }
  return result;
}

uint64_t sub_1B1EC7A34(uint64_t result)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  _QWORD *v26;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;

  v2 = (_QWORD *)result;
  v3 = *(_QWORD **)v1;
  if (!*(_QWORD *)(*(_QWORD *)v1 + 16))
  {
    swift_bridgeObjectRetain();
    result = swift_bridgeObjectRelease();
    goto LABEL_32;
  }
  v4 = *(_QWORD *)(result + 16);
  if (v4)
  {
    v36 = result + 32;
    swift_bridgeObjectRetain();
    v5 = 0;
    v37 = v4;
    while (2)
    {
      v9 = v36 + 40 * v5;
      v11 = *(_QWORD *)v9;
      v10 = *(_QWORD *)(v9 + 8);
      v12 = *(_QWORD *)(v9 + 16);
      v13 = *(_BYTE *)(v9 + 24);
      v14 = *(_QWORD *)(v9 + 32);
      v15 = v3[2];
      if (!v15)
        goto LABEL_17;
      v16 = 0;
      v17 = v3 + 4;
      v18 = v15 - 1;
      do
      {
        while (1)
        {
          v19 = v16 + (v18 - v16) / 2;
          v20 = v17[5 * v19 + 4];
          if (v20 >= v14)
            break;
          v16 = v19 + 1;
          if (v18 < v19 + 1)
            goto LABEL_15;
        }
        if (v14 >= v20)
        {
          v16 += (v18 - v16) / 2;
LABEL_23:
          v35 = v13;
          if (v20 == v14)
          {
            sub_1B1EC837C(v11, v10, v12, v13);
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              v3 = sub_1B1FFEF38(v3);
            v6 = &v3[5 * v16];
            v7 = v6[4];
            v33 = v6[6];
            v34 = v6[5];
            v32 = *((_BYTE *)v6 + 56);
            sub_1B1EC837C(v11, v10, v12, v35);
            sub_1B1D65DE4(v7, v34, v33, v32);
            v6[4] = v11;
            v6[5] = v10;
            v6[6] = v12;
            *((_BYTE *)v6 + 56) = v35;
            v6[8] = v14;
            sub_1B1D65DE4(v11, v10, v12, v35);
          }
          else
          {
            sub_1B1EC837C(v11, v10, v12, v13);
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            if (!isUniquelyReferenced_nonNull_native || v15 >= v3[3] >> 1)
              v3 = sub_1B1C67BA0(isUniquelyReferenced_nonNull_native, v15 + 1, 1, v3);
            v28 = (uint64_t)&v3[5 * v16 + 4];
            sub_1B1B20CB0(0, (unint64_t *)&unk_1EEF5AB80);
            swift_arrayDestroy();
            v29 = v3[2] - v16;
            if (v29 < 0)
            {
              result = sub_1B2229700();
              __break(1u);
              return result;
            }
            memmove((void *)(v28 + 40), &v3[5 * v16 + 4], 40 * v29);
            ++v3[2];
            *(_QWORD *)v28 = v11;
            *(_QWORD *)(v28 + 8) = v10;
            *(_QWORD *)(v28 + 16) = v12;
            *(_BYTE *)(v28 + 24) = v35;
            v3[5 * v16 + 8] = v14;
          }
          v8 = v37;
          goto LABEL_8;
        }
        v18 = v19 - 1;
      }
      while (v19 - 1 >= v16);
LABEL_15:
      if (v16 < (uint64_t)v15)
      {
        v20 = v17[5 * v16 + 4];
        goto LABEL_23;
      }
LABEL_17:
      v21 = v13;
      sub_1B1EC837C(v11, v10, v12, v13);
      v22 = v21;
      sub_1B1EC837C(v11, v10, v12, v21);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v3 = sub_1B1C67BA0(0, v15 + 1, 1, v3);
      v24 = v3[2];
      v23 = v3[3];
      if (v24 >= v23 >> 1)
      {
        v30 = sub_1B1C67BA0(v23 > 1, v24 + 1, 1, v3);
        v25 = v22;
        v3 = v30;
      }
      else
      {
        v25 = v22;
      }
      v8 = v37;
      v3[2] = v24 + 1;
      v26 = &v3[5 * v24];
      v26[4] = v11;
      v26[5] = v10;
      v26[6] = v12;
      *((_BYTE *)v26 + 56) = v25;
      v26[8] = v14;
      sub_1B1D65DE4(v11, v10, v12, v25);
LABEL_8:
      if (++v5 != v8)
        continue;
      break;
    }
    result = swift_bridgeObjectRelease();
    v2 = v3;
    v1 = v31;
LABEL_32:
    *(_QWORD *)v1 = v2;
  }
  return result;
}

uint64_t sub_1B1EC7DB8(char a1)
{
  _QWORD *v1;
  _QWORD *v2;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t result;

  v2 = v1;
  if ((a1 & 1) == 0)
  {
    v6 = MEMORY[0x1E0DEE9D8];
    *v2 = MEMORY[0x1E0DEE9D8];
    swift_bridgeObjectRelease();
    v2[1] = v6;
    swift_bridgeObjectRelease();
    v2[2] = v6;
    swift_bridgeObjectRelease();
    v2[3] = v6;
    swift_bridgeObjectRelease();
    v2[4] = v6;
    swift_bridgeObjectRelease();
    v2[5] = v6;
    swift_bridgeObjectRelease();
    v2[6] = v6;
    swift_bridgeObjectRelease();
    v2[7] = v6;
    swift_bridgeObjectRelease();
    v2[8] = v6;
    swift_bridgeObjectRelease();
    v2[9] = v6;
    swift_bridgeObjectRelease();
    v2[10] = v6;
    swift_bridgeObjectRelease();
    v2[11] = v6;
LABEL_39:
    swift_bridgeObjectRelease();
    goto LABEL_40;
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v5 = *v1;
  if (isUniquelyReferenced_nonNull_native)
  {
    sub_1B1C9431C(0, *(_QWORD *)(v5 + 16));
  }
  else
  {
    *v2 = sub_1B1B1CD68(0, *(_QWORD *)(v5 + 24) >> 1);
    swift_bridgeObjectRelease();
  }
  v7 = swift_isUniquelyReferenced_nonNull_native();
  v8 = v2[1];
  if (v7)
  {
    sub_1B1C94454(0, *(_QWORD *)(v8 + 16));
  }
  else
  {
    v2[1] = sub_1B1B1CCB8(0, *(_QWORD *)(v8 + 24) >> 1);
    swift_bridgeObjectRelease();
  }
  v9 = swift_isUniquelyReferenced_nonNull_native();
  v10 = v2[2];
  if (v9)
  {
    sub_1B1C94470(0, *(_QWORD *)(v10 + 16));
  }
  else
  {
    v2[2] = sub_1B1B1CC94(0, *(_QWORD *)(v10 + 24) >> 1);
    swift_bridgeObjectRelease();
  }
  v11 = swift_isUniquelyReferenced_nonNull_native();
  v12 = v2[3];
  if (v11)
  {
    sub_1B1C9431C(0, *(_QWORD *)(v12 + 16));
  }
  else
  {
    v2[3] = sub_1B1B1CD68(0, *(_QWORD *)(v12 + 24) >> 1);
    swift_bridgeObjectRelease();
  }
  v13 = swift_isUniquelyReferenced_nonNull_native();
  v14 = v2[4];
  if (v13)
  {
    sub_1B1C94454(0, *(_QWORD *)(v14 + 16));
  }
  else
  {
    v2[4] = sub_1B1B1CCB8(0, *(_QWORD *)(v14 + 24) >> 1);
    swift_bridgeObjectRelease();
  }
  v15 = swift_isUniquelyReferenced_nonNull_native();
  v16 = v2[5];
  if (v15)
  {
    sub_1B1C94470(0, *(_QWORD *)(v16 + 16));
  }
  else
  {
    v2[5] = sub_1B1B1CC94(0, *(_QWORD *)(v16 + 24) >> 1);
    swift_bridgeObjectRelease();
  }
  v17 = swift_isUniquelyReferenced_nonNull_native();
  v18 = v2[6];
  if (v17)
  {
    sub_1B1C9431C(0, *(_QWORD *)(v18 + 16));
  }
  else
  {
    v2[6] = sub_1B1B1CD68(0, *(_QWORD *)(v18 + 24) >> 1);
    swift_bridgeObjectRelease();
  }
  v19 = swift_isUniquelyReferenced_nonNull_native();
  v20 = v2[7];
  if (v19)
  {
    sub_1B1C94454(0, *(_QWORD *)(v20 + 16));
  }
  else
  {
    v2[7] = sub_1B1B1CCB8(0, *(_QWORD *)(v20 + 24) >> 1);
    swift_bridgeObjectRelease();
  }
  v21 = swift_isUniquelyReferenced_nonNull_native();
  v22 = v2[8];
  if (v21)
  {
    sub_1B1C94470(0, *(_QWORD *)(v22 + 16));
  }
  else
  {
    v2[8] = sub_1B1B1CC94(0, *(_QWORD *)(v22 + 24) >> 1);
    swift_bridgeObjectRelease();
  }
  v23 = swift_isUniquelyReferenced_nonNull_native();
  v24 = v2[9];
  if (v23)
  {
    sub_1B1C9431C(0, *(_QWORD *)(v24 + 16));
  }
  else
  {
    v2[9] = sub_1B1B1CD68(0, *(_QWORD *)(v24 + 24) >> 1);
    swift_bridgeObjectRelease();
  }
  v25 = swift_isUniquelyReferenced_nonNull_native();
  v26 = v2[10];
  if (v25)
  {
    sub_1B1C94454(0, *(_QWORD *)(v26 + 16));
  }
  else
  {
    v2[10] = sub_1B1B1CCB8(0, *(_QWORD *)(v26 + 24) >> 1);
    swift_bridgeObjectRelease();
  }
  v27 = swift_isUniquelyReferenced_nonNull_native();
  v28 = v2[11];
  if ((v27 & 1) == 0)
  {
    v2[11] = sub_1B1B1CC94(0, *(_QWORD *)(v28 + 24) >> 1);
    goto LABEL_39;
  }
  sub_1B1C94470(0, *(_QWORD *)(v28 + 16));
LABEL_40:
  result = sub_1B1E124B8(a1 & 1);
  *((_DWORD *)v2 + 24) = 0;
  return result;
}

uint64_t sub_1B1EC8188()
{
  sub_1B222A06C();
  sub_1B222A09C();
  return sub_1B222A0C0();
}

uint64_t sub_1B1EC81CC()
{
  return sub_1B222A09C();
}

uint64_t sub_1B1EC81F4()
{
  sub_1B222A06C();
  sub_1B222A09C();
  return sub_1B222A0C0();
}

uint64_t sub_1B1EC8234@<X0>(unsigned int *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_1B1EC8AF4(*a1);
  *a2 = result;
  return result;
}

void sub_1B1EC825C(_DWORD *a1@<X8>)
{
  unsigned __int8 *v1;

  *a1 = *v1;
}

uint64_t sub_1B1EC8268(char a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if ((a1 & 1) == 0)
  {
    if ((a1 & 2) == 0)
      goto LABEL_3;
LABEL_7:
    sub_1B2228890();
    if ((a1 & 4) == 0)
      goto LABEL_5;
    goto LABEL_4;
  }
  sub_1B2228890();
  if ((a1 & 2) != 0)
    goto LABEL_7;
LABEL_3:
  if ((a1 & 4) != 0)
LABEL_4:
    sub_1B2228890();
LABEL_5:
  v2 = sub_1B214E3E8();
  v4 = v3;
  v6 = v5;
  v8 = v7;
  swift_bridgeObjectRelease();
  v9 = MEMORY[0x1B5E20388](v2, v4, v6, v8);
  swift_bridgeObjectRelease();
  return v9;
}

uint64_t sub_1B1EC8374()
{
  _WORD *v0;

  return sub_1B1EC8268(*v0);
}

uint64_t sub_1B1EC837C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if ((a4 & 1) != 0)
    return swift_bridgeObjectRetain();
  else
    return swift_unknownObjectRetain();
}

uint64_t storeEnumTagSinglePayload for ArgumentScope(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 10 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 10) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF6)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF5)
    return ((uint64_t (*)(void))((char *)&loc_1B1EC83D8 + 4 * byte_1B229CF25[v4]))();
  *a1 = a2 + 10;
  return ((uint64_t (*)(void))((char *)sub_1B1EC840C + 4 * byte_1B229CF20[v4]))();
}

uint64_t sub_1B1EC840C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1EC8414(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B1EC841CLL);
  return result;
}

uint64_t sub_1B1EC8428(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B1EC8430);
  *(_BYTE *)result = a2 + 10;
  return result;
}

uint64_t sub_1B1EC8434(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1EC843C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ArgumentScope()
{
  return &type metadata for ArgumentScope;
}

ValueMetadata *type metadata accessor for BindingRequirement()
{
  return &type metadata for BindingRequirement;
}

uint64_t destroy for SamplerArgument(uint64_t a1)
{
  return sub_1B1D65DE4(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 24));
}

uint64_t initializeWithCopy for SamplerArgument(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_BYTE *)(a2 + 24);
  sub_1B1EC837C(*(_QWORD *)a2, v4, v5, v6);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 24) = v6;
  return a1;
}

uint64_t assignWithCopy for SamplerArgument(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_BYTE *)(a2 + 24);
  sub_1B1EC837C(*(_QWORD *)a2, v4, v5, v6);
  v7 = *(_QWORD *)a1;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  v10 = *(_BYTE *)(a1 + 24);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 24) = v6;
  sub_1B1D65DE4(v7, v8, v9, v10);
  return a1;
}

uint64_t assignWithTake for SamplerArgument(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_BYTE *)(a2 + 24);
  v5 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v8 = *(_BYTE *)(a1 + 24);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = v3;
  *(_BYTE *)(a1 + 24) = v4;
  sub_1B1D65DE4(v5, v7, v6, v8);
  return a1;
}

ValueMetadata *type metadata accessor for SamplerArgument()
{
  return &type metadata for SamplerArgument;
}

uint64_t destroy for TextureArgument(uint64_t a1)
{
  return sub_1B1CC62AC(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 24));
}

uint64_t initializeWithCopy for TextureArgument(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_BYTE *)(a2 + 24);
  sub_1B1CC60E4(*(_QWORD *)a2, v4, v5, v6);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 24) = v6;
  return a1;
}

uint64_t assignWithCopy for TextureArgument(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_BYTE *)(a2 + 24);
  sub_1B1CC60E4(*(_QWORD *)a2, v4, v5, v6);
  v7 = *(_QWORD *)a1;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  v10 = *(_BYTE *)(a1 + 24);
  *(_BYTE *)(a1 + 24) = v6;
  sub_1B1CC62AC(v7, v8, v9, v10);
  return a1;
}

uint64_t assignWithTake for TextureArgument(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_BYTE *)(a2 + 24);
  v5 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = v3;
  v8 = *(_BYTE *)(a1 + 24);
  *(_BYTE *)(a1 + 24) = v4;
  sub_1B1CC62AC(v5, v7, v6, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for TextureArgument(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFD && *(_BYTE *)(a1 + 25))
    return (*(_DWORD *)a1 + 253);
  v3 = *(unsigned __int8 *)(a1 + 24);
  if (v3 <= 3)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for TextureArgument(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 253;
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 25) = 1;
  }
  else
  {
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 25) = 0;
    if (a2)
      *(_BYTE *)(result + 24) = -(char)a2;
  }
  return result;
}

uint64_t sub_1B1EC8758(uint64_t result, char a2)
{
  *(_BYTE *)(result + 24) = a2;
  return result;
}

ValueMetadata *type metadata accessor for TextureArgument()
{
  return &type metadata for TextureArgument;
}

uint64_t destroy for BufferArgument(uint64_t a1)
{
  return sub_1B1D2DC08(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
}

uint64_t initializeWithCopy for BufferArgument(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_BYTE *)(a2 + 32);
  sub_1B1D2DBE0(*(_QWORD *)a2, v4, v5, v6, v7);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 32) = v7;
  return a1;
}

uint64_t assignWithCopy for BufferArgument(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 v12;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_BYTE *)(a2 + 32);
  sub_1B1D2DBE0(*(_QWORD *)a2, v4, v5, v6, v7);
  v8 = *(_QWORD *)a1;
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  v12 = *(_BYTE *)(a1 + 32);
  *(_BYTE *)(a1 + 32) = v7;
  sub_1B1D2DC08(v8, v9, v10, v11, v12);
  return a1;
}

uint64_t assignWithTake for BufferArgument(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  unsigned __int8 v9;

  v3 = *(_BYTE *)(a2 + 32);
  v4 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v8;
  v9 = *(_BYTE *)(a1 + 32);
  *(_BYTE *)(a1 + 32) = v3;
  sub_1B1D2DC08(v4, v6, v5, v7, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for BufferArgument(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7E && *(_BYTE *)(a1 + 33))
    return (*(_DWORD *)a1 + 126);
  v3 = ((*(unsigned __int8 *)(a1 + 32) >> 6) & 0xFFFFFF83 | (4 * ((*(unsigned __int8 *)(a1 + 32) >> 1) & 0x1F))) ^ 0x7F;
  if (v3 >= 0x7D)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for BufferArgument(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7D)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = a2 - 126;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7E)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if (a3 >= 0x7E)
      *(_BYTE *)(result + 33) = 0;
    if (a2)
    {
      *(_OWORD *)result = 0u;
      *(_OWORD *)(result + 16) = 0u;
      *(_BYTE *)(result + 32) = 2 * (((-a2 >> 2) & 0x1F) - 32 * a2);
    }
  }
  return result;
}

uint64_t sub_1B1EC894C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 32) >> 6;
}

uint64_t sub_1B1EC8958(uint64_t result)
{
  *(_BYTE *)(result + 32) &= 0x3Fu;
  return result;
}

uint64_t sub_1B1EC8968(uint64_t result, char a2)
{
  *(_BYTE *)(result + 32) = *(_BYTE *)(result + 32) & 1 | (a2 << 6);
  return result;
}

ValueMetadata *type metadata accessor for BufferArgument()
{
  return &type metadata for BufferArgument;
}

unint64_t sub_1B1EC8990()
{
  unint64_t result;

  result = qword_1EEF60238;
  if (!qword_1EEF60238)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B229CFE8, &type metadata for BindingRequirement);
    atomic_store(result, (unint64_t *)&qword_1EEF60238);
  }
  return result;
}

unint64_t sub_1B1EC89D8()
{
  unint64_t result;

  result = qword_1EEF60240;
  if (!qword_1EEF60240)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B229CFB8, &type metadata for BindingRequirement);
    atomic_store(result, (unint64_t *)&qword_1EEF60240);
  }
  return result;
}

unint64_t sub_1B1EC8A20()
{
  unint64_t result;

  result = qword_1EEF60248;
  if (!qword_1EEF60248)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B229D010, &type metadata for BindingRequirement);
    atomic_store(result, (unint64_t *)&qword_1EEF60248);
  }
  return result;
}

unint64_t sub_1B1EC8A68()
{
  unint64_t result;

  result = qword_1EEF60250;
  if (!qword_1EEF60250)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B229D048, &type metadata for BindingRequirement);
    atomic_store(result, (unint64_t *)&qword_1EEF60250);
  }
  return result;
}

unint64_t sub_1B1EC8AB0()
{
  unint64_t result;

  result = qword_1EEF60258;
  if (!qword_1EEF60258)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B229D1E8, &type metadata for ArgumentScope);
    atomic_store(result, (unint64_t *)&qword_1EEF60258);
  }
  return result;
}

uint64_t sub_1B1EC8AF4(uint64_t result)
{
  if (result >= 0xB)
    return 11;
  else
    return result;
}

uint64_t sub_1B1EC8B04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BYTE *v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  _QWORD *v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  _QWORD *v68;
  unint64_t v69;
  unint64_t v70;
  _QWORD *v71;
  int v72;
  int v73;
  void *v74;
  id v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  _BYTE *v89;
  char *v90;
  id v91;
  char *v92;
  unint64_t v93;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  _QWORD *v105;
  uint64_t v106;
  uint64_t v107;
  char isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  _BYTE *v112;
  _BYTE *v113;
  uint64_t v115[3];

  v115[2] = *MEMORY[0x1E0C80C00];
  v5 = (_BYTE *)(a2 + 537);
  if (((*(_BYTE *)(a2 + 537) & 1) != 0 || (*(_BYTE *)(a2 + 539) & 1) != 0 || *(_BYTE *)(a2 + 540) == 1)
    && !*(_QWORD *)(a1 + 1592))
  {
    v6 = sub_1B1C68F64(0, 1, 1, MEMORY[0x1E0DEE9D8]);
    v8 = v6[2];
    v7 = v6[3];
    v9 = v7 >> 1;
    v10 = v8 + 1;
    v112 = v5;
    if (v7 >> 1 <= v8)
    {
      v6 = sub_1B1C68F64(v7 > 1, v8 + 1, 1, v6);
      v7 = v6[3];
      v9 = v7 >> 1;
    }
    v6[2] = v10;
    v11 = &v6[6 * v8];
    *((_BYTE *)v11 + 32) = 8;
    strcpy((char *)v11 + 40, "viewportCount");
    *((_WORD *)v11 + 27) = -4864;
    *(_OWORD *)(v11 + 7) = xmmword_1B229D210;
    *((_BYTE *)v11 + 72) = 1;
    if (v9 <= v10)
      v6 = sub_1B1C68F64(v7 > 1, v8 + 2, 1, v6);
    v6[2] = v8 + 2;
    v12 = &v6[6 * v10];
    *((_BYTE *)v12 + 32) = 8;
    v12[5] = 0xD000000000000012;
    v12[6] = 0x80000001B2340C00;
    *(_OWORD *)(v12 + 7) = xmmword_1B229D220;
    *((_BYTE *)v12 + 72) = 1;
    v14 = v6[2];
    v13 = v6[3];
    v15 = v13 >> 1;
    v16 = v14 + 1;
    v111 = a3;
    if (v13 >> 1 <= v14)
    {
      v6 = sub_1B1C68F64(v13 > 1, v14 + 1, 1, v6);
      v13 = v6[3];
      v15 = v13 >> 1;
    }
    v6[2] = v16;
    v17 = &v6[6 * v14];
    *((_BYTE *)v17 + 32) = 8;
    v17[5] = 0xD000000000000012;
    v17[6] = 0x80000001B2340C20;
    *(int64x2_t *)(v17 + 7) = vdupq_n_s64(0x80uLL);
    *((_BYTE *)v17 + 72) = 1;
    if (v15 <= v16)
      v6 = sub_1B1C68F64(v13 > 1, v14 + 2, 1, v6);
    v6[2] = v14 + 2;
    v18 = &v6[6 * v16];
    *((_BYTE *)v18 + 32) = 8;
    v18[5] = 0x72506F5477656976;
    v18[6] = 0xEF79617272416A6FLL;
    *(_OWORD *)(v18 + 7) = xmmword_1B229D230;
    *((_BYTE *)v18 + 72) = 1;
    v20 = v6[2];
    v19 = v6[3];
    v21 = v19 >> 1;
    v22 = v20 + 1;
    if (v19 >> 1 <= v20)
    {
      v6 = sub_1B1C68F64(v19 > 1, v20 + 1, 1, v6);
      v19 = v6[3];
      v21 = v19 >> 1;
    }
    v6[2] = v22;
    v23 = &v6[6 * v20];
    *((_BYTE *)v23 + 32) = 8;
    v23[5] = 0x69566F546A6F7270;
    v23[6] = 0xEF79617272417765;
    *(_OWORD *)(v23 + 7) = xmmword_1B229D240;
    *((_BYTE *)v23 + 72) = 1;
    if (v21 <= v22)
      v6 = sub_1B1C68F64(v19 > 1, v20 + 2, 1, v6);
    v6[2] = v20 + 2;
    v24 = &v6[6 * v22];
    *((_BYTE *)v24 + 32) = 8;
    v24[5] = 0xD000000000000017;
    v24[6] = 0x80000001B2340C40;
    *(_OWORD *)(v24 + 7) = xmmword_1B229D250;
    *((_BYTE *)v24 + 72) = 1;
    v26 = v6[2];
    v25 = v6[3];
    v27 = v25 >> 1;
    v28 = v26 + 1;
    if (v25 >> 1 <= v26)
    {
      v6 = sub_1B1C68F64(v25 > 1, v26 + 1, 1, v6);
      v25 = v6[3];
      v27 = v25 >> 1;
    }
    v6[2] = v28;
    v29 = &v6[6 * v26];
    *((_BYTE *)v29 + 32) = 8;
    v29[5] = 0xD000000000000016;
    v29[6] = 0x80000001B2340A50;
    *(_OWORD *)(v29 + 7) = xmmword_1B229D260;
    *((_BYTE *)v29 + 72) = 1;
    if (v27 <= v28)
      v6 = sub_1B1C68F64(v25 > 1, v26 + 2, 1, v6);
    v6[2] = v26 + 2;
    v30 = &v6[6 * v28];
    *((_BYTE *)v30 + 32) = 8;
    v30[5] = 0xD000000000000010;
    v30[6] = 0x80000001B2340A30;
    *(_OWORD *)(v30 + 7) = xmmword_1B229D270;
    *((_BYTE *)v30 + 72) = 1;
    v32 = v6[2];
    v31 = v6[3];
    v33 = v31 >> 1;
    v34 = v32 + 1;
    if (v31 >> 1 <= v32)
    {
      v6 = sub_1B1C68F64(v31 > 1, v32 + 1, 1, v6);
      v31 = v6[3];
      v33 = v31 >> 1;
    }
    v6[2] = v34;
    v35 = &v6[6 * v32];
    *((_BYTE *)v35 + 32) = 8;
    v35[5] = 0xD000000000000015;
    v35[6] = 0x80000001B2340C60;
    *(_OWORD *)(v35 + 7) = xmmword_1B229D280;
    *((_BYTE *)v35 + 72) = 1;
    if (v33 <= v34)
      v6 = sub_1B1C68F64(v31 > 1, v32 + 2, 1, v6);
    v6[2] = v32 + 2;
    v36 = &v6[6 * v34];
    *((_BYTE *)v36 + 32) = 8;
    v36[5] = 0xD000000000000029;
    v36[6] = 0x80000001B2340A90;
    *(_OWORD *)(v36 + 7) = xmmword_1B229D290;
    *((_BYTE *)v36 + 72) = 1;
    v38 = v6[2];
    v37 = v6[3];
    v39 = v37 >> 1;
    v40 = v38 + 1;
    if (v37 >> 1 <= v38)
    {
      v6 = sub_1B1C68F64(v37 > 1, v38 + 1, 1, v6);
      v37 = v6[3];
      v39 = v37 >> 1;
    }
    v6[2] = v40;
    v41 = &v6[6 * v38];
    *((_BYTE *)v41 + 32) = 8;
    v41[5] = 0xD000000000000017;
    v41[6] = 0x80000001B2340AC0;
    *(_OWORD *)(v41 + 7) = xmmword_1B229D2A0;
    *((_BYTE *)v41 + 72) = 1;
    if (v39 <= v40)
      v6 = sub_1B1C68F64(v37 > 1, v38 + 2, 1, v6);
    v6[2] = v38 + 2;
    v42 = &v6[6 * v40];
    *((_BYTE *)v42 + 32) = 8;
    v42[5] = 0xD000000000000010;
    v42[6] = 0x80000001B2340B00;
    *(_OWORD *)(v42 + 7) = xmmword_1B229D2B0;
    *((_BYTE *)v42 + 72) = 1;
    v44 = v6[2];
    v43 = v6[3];
    v45 = v43 >> 1;
    v46 = v44 + 1;
    if (v43 >> 1 <= v44)
    {
      v6 = sub_1B1C68F64(v43 > 1, v44 + 1, 1, v6);
      v43 = v6[3];
      v45 = v43 >> 1;
    }
    v6[2] = v46;
    v47 = &v6[6 * v44];
    *((_BYTE *)v47 + 32) = 8;
    v47[5] = 0x6C436C6174726F70;
    v47[6] = 0xEF656E616C507069;
    *(_OWORD *)(v47 + 7) = xmmword_1B229D2C0;
    *((_BYTE *)v47 + 72) = 1;
    if (v45 <= v46)
      v6 = sub_1B1C68F64(v43 > 1, v44 + 2, 1, v6);
    v6[2] = v44 + 2;
    v48 = &v6[6 * v46];
    *((_BYTE *)v48 + 32) = 9;
    v48[5] = 0x6361704F65646166;
    v48[6] = 0xEB00000000797469;
    *(_OWORD *)(v48 + 7) = xmmword_1B229D2D0;
    *((_BYTE *)v48 + 72) = 1;
    v50 = v6[2];
    v49 = v6[3];
    v51 = v49 >> 1;
    v52 = v50 + 1;
    if (v49 >> 1 <= v50)
    {
      v6 = sub_1B1C68F64(v49 > 1, v50 + 1, 1, v6);
      v49 = v6[3];
      v51 = v49 >> 1;
    }
    v6[2] = v52;
    v53 = &v6[6 * v50];
    *((_BYTE *)v53 + 32) = 1;
    v53[5] = 0xD000000000000015;
    v53[6] = 0x80000001B2340C80;
    *(_OWORD *)(v53 + 7) = xmmword_1B229D2E0;
    *((_BYTE *)v53 + 72) = 1;
    if (v51 <= v52)
      v6 = sub_1B1C68F64(v49 > 1, v50 + 2, 1, v6);
    v6[2] = v50 + 2;
    v54 = &v6[6 * v52];
    *((_BYTE *)v54 + 32) = 1;
    v54[5] = 0xD000000000000015;
    v54[6] = 0x80000001B2340C80;
    *(_OWORD *)(v54 + 7) = xmmword_1B229D2F0;
    *((_BYTE *)v54 + 72) = 3;
    v56 = v6[2];
    v55 = v6[3];
    v57 = v55 >> 1;
    v58 = v56 + 1;
    if (v55 >> 1 <= v56)
    {
      v6 = sub_1B1C68F64(v55 > 1, v56 + 1, 1, v6);
      v55 = v6[3];
      v57 = v55 >> 1;
    }
    v6[2] = v58;
    v59 = &v6[6 * v56];
    *((_BYTE *)v59 + 32) = 9;
    v59[5] = 0xD000000000000012;
    v59[6] = 0x80000001B2340CA0;
    *(_OWORD *)(v59 + 7) = xmmword_1B229D300;
    *((_BYTE *)v59 + 72) = 2;
    v60 = v56 + 2;
    if (v57 <= v58)
      v6 = sub_1B1C68F64(v55 > 1, v60, 1, v6);
    v6[2] = v60;
    v61 = &v6[6 * v58];
    *((_BYTE *)v61 + 32) = 9;
    v61[5] = 0x6361704F65646166;
    v61[6] = 0xEB00000000797469;
    *(int64x2_t *)(v61 + 7) = vdupq_n_s64(4uLL);
    *((_BYTE *)v61 + 72) = 2;
    v63 = v6[2];
    v62 = v6[3];
    v64 = v62 >> 1;
    v65 = v63 + 1;
    if (v62 >> 1 <= v63)
    {
      v6 = sub_1B1C68F64(v62 > 1, v63 + 1, 1, v6);
      v62 = v6[3];
      v64 = v62 >> 1;
    }
    v6[2] = v65;
    v66 = &v6[6 * v63];
    *((_BYTE *)v66 + 32) = 9;
    v66[5] = 0xD000000000000012;
    v66[6] = 0x80000001B2340CC0;
    *(_OWORD *)(v66 + 7) = xmmword_1B2298AF0;
    *((_BYTE *)v66 + 72) = 2;
    v67 = v63 + 2;
    if (v64 <= v65)
      v6 = sub_1B1C68F64(v62 > 1, v67, 1, v6);
    v6[2] = v67;
    v68 = &v6[6 * v65];
    *((_BYTE *)v68 + 32) = 9;
    v68[5] = 0xD000000000000013;
    v68[6] = 0x80000001B2340CE0;
    *(int64x2_t *)(v68 + 7) = vdupq_n_s64(0x10uLL);
    *((_BYTE *)v68 + 72) = 2;
    v70 = v6[2];
    v69 = v6[3];
    if (v70 >= v69 >> 1)
      v6 = sub_1B1C68F64(v69 > 1, v70 + 1, 1, v6);
    a3 = v111;
    v5 = v112;
    v6[2] = v70 + 1;
    v71 = &v6[6 * v70];
    *((_BYTE *)v71 + 32) = 9;
    v71[5] = 0xD000000000000019;
    v71[6] = 0x80000001B2340D00;
    *(_OWORD *)(v71 + 7) = xmmword_1B229D310;
    *((_BYTE *)v71 + 72) = 2;
    *(_QWORD *)(a1 + 1592) = v6;
  }
  sub_1B1EC9AEC((_BYTE *)a2);
  v72 = *(_DWORD *)(a1 + 8);
  v73 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 1296) = v72;
  *(_DWORD *)(a1 + 1300) = v73;
  sub_1B216516C();
  if (qword_1ED4B7878 != -1)
    swift_once();
  if (byte_1ED4D097C == 1)
  {
    v74 = *(void **)(a1 + 1312);
    if (!v74)
    {
      swift_unknownObjectRelease();
      return swift_unknownObjectRelease();
    }
    swift_getObjectType();
    v75 = objc_msgSend((id)swift_unknownObjectRetain(), sel_encodedLength);
    swift_retain();
    v76 = sub_1B1D22DA8(0, (uint64_t)v75);
    v113 = v5;
    v78 = v77;
    v80 = v79;
    swift_unknownObjectRetain();
    swift_release();
    swift_unknownObjectRelease();
    *(_QWORD *)(a1 + 1272) = v76;
    *(_QWORD *)(a1 + 1280) = v78;
    *(_QWORD *)(a1 + 1288) = v80;
    v81 = swift_unknownObjectRetain();
    v82 = v78;
    v5 = v113;
    sub_1B1F9C328(v81, v82, v80, 0);
    swift_unknownObjectRelease();
    *(_QWORD *)objc_msgSend(v74, sel_constantDataAtIndex_, 0) = *(_QWORD *)(a1 + 1296);
    if ((*v113 & 1) != 0)
    {
      swift_unknownObjectRelease();
    }
    else
    {
      v95 = sub_1B216516C();
      v97 = v96;
      v98 = swift_unknownObjectRetain();
      sub_1B1F9C9D8(v98, 20);
      swift_unknownObjectRelease();
      v99 = swift_unknownObjectRetain();
      sub_1B1F9C9D8(v99, 21);
      swift_unknownObjectRelease();
      v100 = *(_QWORD *)(a2 + 240);
      swift_retain();
      v101 = sub_1B1FAE530(0x46445242584656, 0xE700000000000000, v100);
      swift_release();
      sub_1B1F9C9D8(v101, 22);
      sub_1B1BF6F5C();
      v102 = swift_allocObject();
      *(_OWORD *)(v102 + 16) = xmmword_1B226E470;
      *(_QWORD *)(v102 + 32) = v95;
      *(_QWORD *)(v102 + 40) = v97;
      *(_QWORD *)(v102 + 48) = v101;
      v115[0] = v102;
      sub_1B2228AD0();
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      v103 = swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 1304) = v115[0];
      MEMORY[0x1E0C80A78](v103, v104);
      v105 = *(_QWORD **)(a3 + 176);
      MEMORY[0x1E0C80A78](v106, v107);
      swift_retain();
      sub_1B1F21F8C((uint64_t)&type metadata for LightsUniforms, (uint64_t)&off_1E637F8B8, v105, (void (*)(uint64_t))sub_1B1B6932C);
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      v5 = v113;
      swift_unknownObjectRelease();
      swift_release();
    }
LABEL_65:
    swift_unknownObjectRelease();
    *(_QWORD *)(a1 + 1264) = 0;
    *(_OWORD *)(a1 + 1248) = 0u;
    v93 = *(_QWORD *)(a1 + 1240);
    if ((v93 & 0x8000000000000000) != 0 || (v93 & 0x4000000000000000) != 0)
      goto LABEL_73;
LABEL_67:
    isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
    v93 = *(_QWORD *)(a1 + 1240);
    if ((isUniquelyReferenced_nonNull_bridgeObject & 1) != 0)
    {
      if (v93 >> 62)
      {
        swift_bridgeObjectRetain();
        v109 = sub_1B22296AC();
        swift_bridgeObjectRelease();
      }
      else
      {
        v109 = *(_QWORD *)((v93 & 0xFFFFFFFFFFFFF8) + 0x10);
      }
      sub_1B1C93410(0, v109);
      if ((*v5 & 1) == 0)
        goto LABEL_77;
      goto LABEL_76;
    }
    goto LABEL_73;
  }
  swift_retain();
  v83 = (void *)sub_1B1D22DA8(0, 8);
  v85 = v84;
  v87 = v86;
  if (objc_msgSend((id)swift_unknownObjectRetain(), sel_storageMode) == (id)2)
  {
    if (qword_1ED4BF430 != -1)
      swift_once();
    v115[0] = 0;
    v115[1] = 0xE000000000000000;
    swift_retain();
    sub_1B2229430();
    swift_bridgeObjectRelease();
    v88 = sub_1B2228E90();
    if (qword_1ED4BF658 != -1)
      swift_once();
    v115[0] = 0;
    swift_retain();
    sub_1B1F1AD70(v88, v115, 0xD000000000000036, 0x80000001B2340BC0);
    swift_release();
    swift_release();
    swift_release();
    swift_unknownObjectRelease();
    *(_QWORD *)(a1 + 1272) = v83;
    *(_QWORD *)(a1 + 1280) = v85;
    *(_QWORD *)(a1 + 1288) = v87;
    goto LABEL_65;
  }
  v89 = v5;
  v90 = (char *)objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
  v91 = v83;
  v92 = &v90[v85];
  *(_DWORD *)v92 = v72;
  *((_DWORD *)v92 + 1) = v73;
  swift_release();
  swift_unknownObjectRelease();
  *(_QWORD *)(a1 + 1272) = v91;
  *(_QWORD *)(a1 + 1280) = v85;
  *(_QWORD *)(a1 + 1288) = v87;
  swift_unknownObjectRelease();
  *(_QWORD *)(a1 + 1264) = 0;
  *(_OWORD *)(a1 + 1248) = 0u;
  v93 = *(_QWORD *)(a1 + 1240);
  if ((v93 & 0x8000000000000000) != 0)
  {
    v5 = v89;
    goto LABEL_73;
  }
  v5 = v89;
  if ((v93 & 0x4000000000000000) == 0)
    goto LABEL_67;
LABEL_73:
  if (v93 >> 62)
  {
    swift_bridgeObjectRetain();
    v110 = sub_1B22296AC();
    sub_1B22296AC();
    sub_1B22296AC();
    swift_bridgeObjectRelease();
  }
  else
  {
    v110 = *(_QWORD *)((v93 & 0xFFFFFFFFFFFFF8) + 0x18) >> 1;
  }
  *(_QWORD *)(a1 + 1240) = sub_1B1B1C804(0, v110);
  swift_bridgeObjectRelease();
  if ((*v5 & 1) == 0)
    goto LABEL_77;
LABEL_76:
  *(_DWORD *)(a1 + 1364) = 0;
  *(_OWORD *)(a1 + 1376) = 0u;
  *(_OWORD *)(a1 + 1392) = 0u;
  *(_DWORD *)(a1 + 1360) = *(_DWORD *)(a1 + 1604);
  sub_1B1ECAAF4(a1 + 1328);
  sub_1B1ECAE1C(a1 + 1432);
LABEL_77:
  swift_unknownObjectRelease();
  return swift_unknownObjectRelease();
}

_BYTE *sub_1B1EC9AEC(_BYTE *result)
{
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  id v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  id v9;
  char v10;
  id v11;

  v2 = v1;
  v3 = result + 537;
  if ((result[537] & 1) != 0 || (result[539] & 1) != 0 || result[540] == 1)
  {
    if (!*(_QWORD *)(v1 + 1568))
    {
      *(_OWORD *)(v1 + 1552) = 0u;
      *(_OWORD *)(v1 + 1536) = 0u;
      *(_OWORD *)(v1 + 1520) = 0u;
      *(_OWORD *)(v1 + 1504) = 0u;
      *(_OWORD *)(v1 + 1488) = 0u;
      *(_QWORD *)(v1 + 1568) = MEMORY[0x1E0DEE9D8];
      *(_QWORD *)(v1 + 1584) = 0;
      *(_QWORD *)(v1 + 1576) = 0;
      *(_DWORD *)(v1 + 1588) = 550;
      if (qword_1ED4B7878 != -1)
        result = (_BYTE *)swift_once();
      if (byte_1ED4D097C == 1)
      {
        v4 = objc_msgSend(sub_1B1B2EC54(0xD000000000000021, 0x80000001B2340E90, 0, MEMORY[0x1E0DEE9D8], 0), sel_newArgumentEncoderWithBufferIndex_, 0);
        swift_unknownObjectRelease();
        result = (_BYTE *)swift_unknownObjectRelease();
        *(_QWORD *)(v1 + 1576) = v4;
      }
    }
    if (*v3 == 1 && !*(_QWORD *)(v1 + 1408) && !*(_QWORD *)(v1 + 1456))
    {
      *(_OWORD *)(v1 + 1376) = 0u;
      *(_OWORD *)(v1 + 1392) = 0u;
      *(_OWORD *)(v1 + 1344) = 0u;
      *(_OWORD *)(v1 + 1360) = 0u;
      *(_OWORD *)(v1 + 1328) = 0u;
      v5 = MEMORY[0x1E0DEE9D8];
      *(_QWORD *)(v2 + 1408) = MEMORY[0x1E0DEE9D8];
      *(_QWORD *)(v2 + 1416) = 0;
      *(_QWORD *)(v2 + 1424) = 0;
      *(_DWORD *)(v2 + 1428) = 530;
      if (qword_1ED4B7878 != -1)
        result = (_BYTE *)swift_once();
      v6 = (_QWORD *)(v2 + 1432);
      v7 = (_QWORD *)(v2 + 1464);
      if (byte_1ED4D097C == 1)
      {
        v8 = MEMORY[0x1E0DEE9D8];
        v9 = objc_msgSend(sub_1B1B2EC54(0xD000000000000020, 0x80000001B2340E10, 0, MEMORY[0x1E0DEE9D8], 0), sel_newArgumentEncoderWithBufferIndex_, 0);
        swift_unknownObjectRelease();
        result = (_BYTE *)swift_unknownObjectRelease();
        *(_QWORD *)(v2 + 1416) = v9;
        v10 = byte_1ED4D097C;
        *(_QWORD *)(v2 + 1440) = 0;
        *(_QWORD *)(v2 + 1448) = 0;
        *v6 = 0;
        *(_QWORD *)(v2 + 1456) = v8;
        *v7 = 0;
        *(_QWORD *)(v2 + 1472) = 0;
        if ((v10 & 1) != 0)
        {
          v11 = objc_msgSend(sub_1B1B2EC54(0xD00000000000001ELL, 0x80000001B2340DA0, 0, MEMORY[0x1E0DEE9D8], 0), sel_newArgumentEncoderWithBufferIndex_, 0);
          swift_unknownObjectRelease();
          result = (_BYTE *)swift_unknownObjectRelease();
          *v7 = v11;
        }
      }
      else
      {
        *v6 = 0;
        *(_QWORD *)(v2 + 1440) = 0;
        *(_QWORD *)(v2 + 1448) = 0;
        *(_QWORD *)(v2 + 1456) = v5;
        *v7 = 0;
        *(_QWORD *)(v2 + 1472) = 0;
      }
    }
  }
  return result;
}

id sub_1B1EC9F98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v9[80];

  swift_getObjectType();
  sub_1B1F9C9F0(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), 0, 10, (unint64_t *)(a3 + 1304));
  sub_1B1F9C9F0(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), 0, 11, (unint64_t *)(a3 + 1304));
  if (*(_BYTE *)(a1 + 50) != 1)
    return sub_1B1F9C9D8(0, 23);
  sub_1B206309C(3u, (uint64_t)v9);
  v5 = sub_1B206318C((uint64_t)v9, 1, 0, 2);
  sub_1B1BA80C0((uint64_t)v9);
  if (!v5)
    return sub_1B1F9C9D8(0, 23);
  v6 = swift_unknownObjectRetain();
  sub_1B1F9C9D8(v6, 23);
  swift_unknownObjectRelease();
  v7 = swift_unknownObjectRetain();
  MEMORY[0x1B5E2064C](v7);
  if (*(_QWORD *)((*(_QWORD *)(a3 + 1304) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*(_QWORD *)(a3 + 1304) & 0xFFFFFFFFFFFFFF8)
                                                                                       + 0x18) >> 1)
    sub_1B2228AF4();
  sub_1B2228B30();
  sub_1B2228AD0();
  return (id)swift_unknownObjectRelease();
}

uint64_t type metadata accessor for GlobalsSystem()
{
  return objc_opt_self();
}

uint64_t sub_1B1ECA128(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  if (*(_QWORD *)(result + OBJC_IVAR____TtC3VFX13EntityManager_renderer))
  {
    MEMORY[0x1E0C80A78](result, a2);
    v3 = *(_QWORD **)(v2 + 176);
    swift_retain();
    swift_retain();
    sub_1B1F21F8C((uint64_t)&type metadata for FrameConstantsStorage, (uint64_t)&off_1E63A0688, v3, (void (*)(uint64_t))sub_1B1ECF340);
    swift_release();
    return swift_release();
  }
  return result;
}

const char *sub_1B1ECA1E0()
{
  return "GlobalsSystem";
}

uint64_t sub_1B1ECA1F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  void *v15;
  id v16;
  void *v17;
  char v18;
  void *v19;
  uint64_t v20;
  void *v21;
  char v22;
  void *v23;
  id v24;
  void *v25;
  char v26;
  void *v27;
  uint64_t v28;
  void *v29;
  char v30;
  void *v31;
  id v32;
  uint64_t v33;
  void **v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void **v40;
  uint64_t v41;
  uint64_t v42;
  void **v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  char v52;
  void *v53;
  id v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  id v62;
  id v63;
  _QWORD v64[5];
  _QWORD v65[5];
  __int128 v66;
  uint64_t v67;
  _QWORD v68[3];
  uint64_t v69;
  uint64_t v70;

  v5 = v4;
  if (qword_1ED4B7878 != -1)
    swift_once();
  v10 = a1 + 1272;
  if (byte_1ED4D097C == 1 && (*(_BYTE *)(a1 + 1320) & 1) == 0)
  {
    sub_1B1D65D24(a2 + 40, (uint64_t)&v66);
    if (v67)
    {
      sub_1B1A02518(&v66, (uint64_t)v68);
      if (*(_BYTE *)(a3 + 537) == 1)
      {
        v11 = (void *)*sub_1B19FA070(v68, v69);
        v12 = qword_1EEF573B8;
        swift_unknownObjectRetain();
        if (v12 != -1)
          swift_once();
        v13 = *(_QWORD *)(qword_1EEFD56A8 + 16);
        v70 = v5;
        if (v13)
        {
          sub_1B1DC3B00(0xD000000000000019, 0x80000001B23408A0);
          if ((v14 & 1) != 0)
            swift_bridgeObjectRetain();
        }
        v15 = (void *)sub_1B2228728();
        swift_bridgeObjectRelease();
        v16 = objc_msgSend(v11, sel_texture::, 7, v15);

        sub_1B19FA198((uint64_t)v68, (uint64_t)&v66);
        if (!v16)
        {
          v17 = (void *)*sub_1B19FA070(&v66, v67);
          if (*(_QWORD *)(qword_1EEFD56A8 + 16))
          {
            sub_1B1DC3B00(0x6E61696461727269, 0xEA00000000006563);
            if ((v18 & 1) != 0)
              swift_bridgeObjectRetain();
          }
          v19 = (void *)sub_1B2228728();
          swift_bridgeObjectRelease();
          v16 = objc_msgSend(v17, sel_texture::, 2, v19);

          if (!v16)
          {
            v20 = *(_QWORD *)(a3 + 240);
            swift_retain();
            v16 = sub_1B1FAE524(0xD000000000000017, 0x80000001B23408C0, v20, a3);
            swift_release();
          }
        }
        v63 = v16;
        _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v66);
        v21 = (void *)*sub_1B19FA070(v68, v69);
        if (*(_QWORD *)(qword_1EEFD56A8 + 16))
        {
          sub_1B1DC3B00(0xD00000000000001ALL, 0x80000001B23408E0);
          if ((v22 & 1) != 0)
            swift_bridgeObjectRetain();
        }
        v23 = (void *)sub_1B2228728();
        swift_bridgeObjectRelease();
        v24 = objc_msgSend(v21, sel_texture::, 7, v23);

        sub_1B19FA198((uint64_t)v68, (uint64_t)v65);
        if (!v24)
        {
          v25 = (void *)*sub_1B19FA070(v65, v65[3]);
          if (*(_QWORD *)(qword_1EEFD56A8 + 16))
          {
            sub_1B1DC3B00(0x65636E6169646172, 0xE800000000000000);
            if ((v26 & 1) != 0)
              swift_bridgeObjectRetain();
          }
          v27 = (void *)sub_1B2228728();
          swift_bridgeObjectRelease();
          v24 = objc_msgSend(v25, sel_texture::, 2, v27);

          if (!v24)
          {
            v28 = *(_QWORD *)(a3 + 240);
            swift_retain();
            v24 = sub_1B1FAE524(0xD000000000000017, 0x80000001B23408C0, v28, a3);
            swift_release();
          }
        }
        _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v65);
        v29 = (void *)*sub_1B19FA070(v68, v69);
        if (*(_QWORD *)(qword_1EEFD56A8 + 16))
        {
          sub_1B1DC3B00(0x74754C66647262, 0xE700000000000000);
          if ((v30 & 1) != 0)
            swift_bridgeObjectRetain();
        }
        v31 = (void *)sub_1B2228728();
        swift_bridgeObjectRelease();
        v32 = objc_msgSend(v29, sel_texture::, 4, v31);

        if (!v32)
        {
          v33 = *(_QWORD *)(a3 + 240);
          swift_retain();
          v32 = (id)sub_1B1FAE530(0x46445242584656, 0xE700000000000000, v33);
          swift_release();
        }
        v34 = (void **)sub_1B19FA070(v68, v69);
        v35 = sub_1B1F4D310(7u, 0x74736E6F436C6269, 0xEC00000073746E61, *v34);
        v37 = v36;
        v39 = v38;
        sub_1B19FA198((uint64_t)v68, (uint64_t)v64);
        if (v35)
        {
          v62 = v35;
          v60 = v39;
          v61 = v37;
        }
        else
        {
          v40 = (void **)sub_1B19FA070(v64, v64[3]);
          v62 = sub_1B1F4D310(3u, 0x74736E6F436C6269, 0xEC00000073746E61, *v40);
          v60 = v42;
          v61 = v41;
        }
        _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v64);
        v43 = (void **)sub_1B19FA070(v68, v69);
        v44 = sub_1B1F4D310(3u, 0x6E6F43746867696CLL, 0xEE0073746E617473, *v43);
        v58 = v46;
        v59 = v45;
        swift_getObjectType();
        v47 = swift_unknownObjectRetain();
        sub_1B1F9C9D8(v47, 20);
        swift_unknownObjectRelease();
        v48 = swift_unknownObjectRetain();
        sub_1B1F9C9D8(v48, 21);
        swift_unknownObjectRelease();
        v49 = swift_unknownObjectRetain();
        sub_1B1F9C9D8(v49, 22);
        swift_unknownObjectRelease();
        sub_1B1BF6F5C();
        v50 = swift_allocObject();
        *(_OWORD *)(v50 + 16) = xmmword_1B226E470;
        *(_QWORD *)(v50 + 32) = v63;
        *(_QWORD *)(v50 + 40) = v24;
        *(_QWORD *)(v50 + 48) = v32;
        *(_QWORD *)&v66 = v50;
        sub_1B2228AD0();
        *(_QWORD *)(a1 + 1304) = v66;
        swift_unknownObjectRetain();
        swift_unknownObjectRetain();
        swift_unknownObjectRetain();
        swift_bridgeObjectRelease();
        sub_1B1F9C9F0((uint64_t)v62, v61, v60, 0, 10, (unint64_t *)(a1 + 1304));
        sub_1B1F9C9F0((uint64_t)v44, v59, v58, 0, 11, (unint64_t *)(a1 + 1304));
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        v10 = a1 + 1272;
      }
      else
      {
        swift_unknownObjectRetain();
      }
      v51 = (void *)*sub_1B19FA070(v68, v69);
      if (qword_1EEF573B8 != -1)
        swift_once();
      if (*(_QWORD *)(qword_1EEFD56A8 + 16))
      {
        sub_1B1DC3B00(0x614D776F64616873, 0xE900000000000070);
        if ((v52 & 1) != 0)
          swift_bridgeObjectRetain();
      }
      v53 = (void *)sub_1B2228728();
      swift_bridgeObjectRelease();
      v54 = objc_msgSend(v51, sel_texture::, 2, v53);

      swift_getObjectType();
      sub_1B1F9C9D8((uint64_t)v54, 23);
      if (v54)
      {
        v55 = swift_unknownObjectRetain();
        MEMORY[0x1B5E2064C](v55);
        if (*(_QWORD *)((*(_QWORD *)(a1 + 1304) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*(_QWORD *)(a1 + 1304) & 0xFFFFFFFFFFFFFF8)
                                                                                             + 0x18) >> 1)
          sub_1B2228AF4();
        sub_1B2228B30();
        sub_1B2228AD0();
        swift_unknownObjectRelease();
      }
      swift_unknownObjectRelease();
      _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v68);
    }
    else
    {
      sub_1B1D65D88((uint64_t)&v66);
    }
    *(_BYTE *)(v10 + 48) = 1;
  }
  v56 = *(_QWORD *)(a1 + 1288);
  *(_OWORD *)a4 = *(_OWORD *)v10;
  *(_QWORD *)(a4 + 16) = v56;
  return swift_unknownObjectRetain();
}

uint64_t sub_1B1ECAAF4(uint64_t result)
{
  uint64_t v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD *v10;
  __int128 v11;
  __int128 v12;
  int v13;
  __int16 v14;
  __int16 v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  char *v22;
  char *v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26[3];

  v1 = result;
  v26[2] = *MEMORY[0x1E0C80C00];
  if (qword_1ED4B7878 != -1)
    result = swift_once();
  if (byte_1ED4D097C == 1)
  {
    v2 = *(void **)(v1 + 88);
    if (v2)
    {
      swift_getObjectType();
      v3 = objc_msgSend((id)swift_unknownObjectRetain(), sel_encodedLength);
      swift_retain();
      v4 = sub_1B1D22DA8(0, (uint64_t)v3);
      v6 = v5;
      v8 = v7;
      swift_unknownObjectRetain();
      swift_release();
      swift_unknownObjectRelease();
      *(_QWORD *)v1 = v4;
      *(_QWORD *)(v1 + 8) = v6;
      *(_QWORD *)(v1 + 16) = v8;
      v9 = swift_unknownObjectRetain();
      sub_1B1F9C328(v9, v6, v8, 0);
      swift_unknownObjectRelease();
      if (*(_DWORD *)(v1 + 100))
      {
        v10 = objc_msgSend(v2, sel_constantDataAtIndex_);
        v12 = *(_OWORD *)(v1 + 48);
        v11 = *(_OWORD *)(v1 + 64);
        *v10 = *(_OWORD *)(v1 + 32);
        v10[1] = v12;
        v10[2] = v11;
      }
      return swift_unknownObjectRelease();
    }
  }
  else
  {
    v13 = *(_DWORD *)(v1 + 32);
    v14 = *(_WORD *)(v1 + 36);
    v15 = *(_WORD *)(v1 + 38);
    v24 = *(_OWORD *)(v1 + 64);
    v25 = *(_OWORD *)(v1 + 48);
    swift_retain();
    v16 = (id)sub_1B1D22DA8(0, 48);
    v18 = v17;
    v20 = v19;
    if (objc_msgSend((id)swift_unknownObjectRetain(), sel_storageMode) == (id)2)
    {
      if (qword_1ED4BF430 != -1)
        swift_once();
      v26[0] = 0;
      v26[1] = 0xE000000000000000;
      swift_retain();
      sub_1B2229430();
      swift_bridgeObjectRelease();
      v21 = sub_1B2228E90();
      if (qword_1ED4BF658 != -1)
        swift_once();
      v26[0] = 0;
      swift_retain();
      sub_1B1F1AD70(v21, v26, 0xD00000000000003ELL, 0x80000001B2340D60);
      swift_release();
      swift_release();
    }
    else
    {
      v22 = (char *)objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
      v16 = v16;
      v23 = &v22[v18];
      *(_DWORD *)v23 = v13;
      *((_WORD *)v23 + 2) = v14;
      *((_WORD *)v23 + 3) = v15;
      *((_OWORD *)v23 + 1) = v25;
      *((_OWORD *)v23 + 2) = v24;
    }
    swift_release();
    result = swift_unknownObjectRelease();
    *(_QWORD *)v1 = v16;
    *(_QWORD *)(v1 + 8) = v18;
    *(_QWORD *)(v1 + 16) = v20;
  }
  return result;
}

uint64_t sub_1B1ECAE1C(uint64_t result)
{
  uint64_t v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  id v16;
  uint64_t v17[3];

  v1 = result;
  v17[2] = *MEMORY[0x1E0C80C00];
  if (qword_1ED4B7878 != -1)
    result = swift_once();
  if (byte_1ED4D097C == 1)
  {
    v2 = *(void **)(v1 + 32);
    if (v2)
    {
      swift_getObjectType();
      v3 = objc_msgSend((id)swift_unknownObjectRetain(), sel_encodedLength);
      swift_retain();
      v4 = sub_1B1D22DA8(0, (uint64_t)v3);
      v6 = v5;
      v8 = v7;
      swift_unknownObjectRetain();
      swift_release();
      swift_unknownObjectRelease();
      *(_QWORD *)v1 = v4;
      *(_QWORD *)(v1 + 8) = v6;
      *(_QWORD *)(v1 + 16) = v8;
      v9 = swift_unknownObjectRetain();
      sub_1B1F9C328(v9, v6, v8, 0);
      swift_unknownObjectRelease();
      if (*(_DWORD *)(v1 + 44))
        objc_msgSend(v2, sel_constantDataAtIndex_);
      return swift_unknownObjectRelease();
    }
  }
  else
  {
    swift_retain();
    v10 = (void *)sub_1B1D22DA8(0, 0);
    v12 = v11;
    v14 = v13;
    if (objc_msgSend((id)swift_unknownObjectRetain(), sel_storageMode) == (id)2)
    {
      if (qword_1ED4BF430 != -1)
        swift_once();
      v17[0] = 0;
      v17[1] = 0xE000000000000000;
      swift_retain();
      sub_1B2229430();
      swift_bridgeObjectRelease();
      v15 = sub_1B2228E90();
      if (qword_1ED4BF658 != -1)
        swift_once();
      v17[0] = 0;
      swift_retain();
      sub_1B1F1AD70(v15, v17, 0xD00000000000003CLL, 0x80000001B2340D20);
      swift_release();
      swift_release();
      swift_release();
      result = swift_unknownObjectRelease();
      *(_QWORD *)v1 = v10;
    }
    else
    {
      objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
      v16 = v10;
      swift_release();
      result = swift_unknownObjectRelease();
      *(_QWORD *)v1 = v16;
    }
    *(_QWORD *)(v1 + 8) = v12;
    *(_QWORD *)(v1 + 16) = v14;
  }
  return result;
}

uint64_t sub_1B1ECB100(uint64_t result)
{
  uint64_t v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD *v10;
  __int128 v11;
  __int128 v12;
  __int16 v13;
  char v14;
  char v15;
  int v16;
  __int16 v17;
  __int16 v18;
  int v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  char *v27;
  id v28;
  char *v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32[3];

  v1 = result;
  v32[2] = *MEMORY[0x1E0C80C00];
  if (qword_1ED4B7878 != -1)
    result = swift_once();
  if (byte_1ED4D097C == 1)
  {
    v2 = *(void **)(v1 + 88);
    if (v2)
    {
      swift_getObjectType();
      v3 = objc_msgSend((id)swift_unknownObjectRetain(), sel_encodedLength);
      swift_retain();
      v4 = sub_1B1D22DA8(0, (uint64_t)v3);
      v6 = v5;
      v8 = v7;
      swift_unknownObjectRetain();
      swift_release();
      swift_unknownObjectRelease();
      *(_QWORD *)v1 = v4;
      *(_QWORD *)(v1 + 8) = v6;
      *(_QWORD *)(v1 + 16) = v8;
      v9 = swift_unknownObjectRetain();
      sub_1B1F9C328(v9, v6, v8, 0);
      swift_unknownObjectRelease();
      if (*(_DWORD *)(v1 + 100))
      {
        v10 = objc_msgSend(v2, sel_constantDataAtIndex_);
        v12 = *(_OWORD *)(v1 + 48);
        v11 = *(_OWORD *)(v1 + 64);
        *v10 = *(_OWORD *)(v1 + 32);
        v10[1] = v12;
        v10[2] = v11;
      }
      return swift_unknownObjectRelease();
    }
  }
  else
  {
    v13 = *(_WORD *)(v1 + 32);
    v14 = *(_BYTE *)(v1 + 34);
    v15 = *(_BYTE *)(v1 + 35);
    v16 = *(_DWORD *)(v1 + 36);
    v17 = *(_WORD *)(v1 + 40);
    v18 = *(_WORD *)(v1 + 42);
    v31 = *(_OWORD *)(v1 + 48);
    v19 = *(_DWORD *)(v1 + 64);
    swift_retain();
    v20 = (void *)sub_1B1D22DA8(0, 48);
    v22 = v21;
    v24 = v23;
    if (objc_msgSend((id)swift_unknownObjectRetain(), sel_storageMode) == (id)2)
    {
      v25 = v24;
      if (qword_1ED4BF430 != -1)
        swift_once();
      v32[0] = 0;
      v32[1] = 0xE000000000000000;
      swift_retain();
      sub_1B2229430();
      swift_bridgeObjectRelease();
      v26 = sub_1B2228E90();
      if (qword_1ED4BF658 != -1)
        swift_once();
      v32[0] = 0;
      swift_retain();
      sub_1B1F1AD70(v26, v32, 0xD00000000000003FLL, 0x80000001B2340860);
      swift_release();
      swift_release();
      swift_release();
      result = swift_unknownObjectRelease();
      *(_QWORD *)v1 = v20;
      *(_QWORD *)(v1 + 8) = v22;
      *(_QWORD *)(v1 + 16) = v25;
    }
    else
    {
      v30 = v24;
      v27 = (char *)objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
      v28 = v20;
      v29 = &v27[v22];
      *(_WORD *)v29 = v13;
      v29[2] = v14;
      v29[3] = v15;
      *((_DWORD *)v29 + 1) = v16;
      *((_WORD *)v29 + 4) = v17;
      *((_WORD *)v29 + 5) = v18;
      *((_OWORD *)v29 + 1) = v31;
      *((_DWORD *)v29 + 8) = v19;
      swift_release();
      result = swift_unknownObjectRelease();
      *(_QWORD *)v1 = v28;
      *(_QWORD *)(v1 + 8) = v22;
      *(_QWORD *)(v1 + 16) = v30;
    }
  }
  return result;
}

uint64_t sub_1B1ECB46C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, int a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  __int128 *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  __int128 *v17;
  void *v18;
  uint64_t v19;
  char v20;
  uint64_t result;
  uint64_t v22;
  __int128 v23;
  void *v24;
  id v25;
  uint64_t ObjectType;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  void *v35;
  void **v36;
  uint64_t v37;
  uint64_t v38;
  void **v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  char v43;
  void *v44;
  void *v45;
  char v46;
  void *v47;
  void *v48;
  char v49;
  void *v50;
  char v51;
  void *v52;
  void **v53;
  uint64_t v54;
  uint64_t v55;
  void **v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  void *v60;
  void *v61;
  char v62;
  void *v63;
  id v64;
  id v65;
  id v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  __int128 *v78;
  id v79;
  id v80;
  id v81;
  id v82;
  id v83;
  id v84;
  id v85;
  id v86;
  id v87;
  id v88;
  id v89;
  id v90;
  int v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  uint64_t v96;
  _QWORD v97[3];
  uint64_t v98;
  uint64_t v99;

  v13 = (__int128 *)(a1 + 1432);
  v14 = a2 + 40;
  sub_1B1D65D24(a2 + 40, (uint64_t)&v95);
  if (v96)
  {
    v91 = a5;
    sub_1B1A02518(&v95, (uint64_t)v97);
    if (*(_QWORD *)(a1 + 1456)
      && (v99 = *(_QWORD *)(a1 + 1464)) != 0
      && (*(_BYTE *)(a3 + 537) & 1) != 0
      && (*((_BYTE *)v13 + 40) & 1) == 0)
    {
      v77 = a4;
      v78 = v13;
      v31 = (void *)*sub_1B19FA070(v97, v98);
      swift_unknownObjectRetain();
      v90 = sub_1B1F4D310(2u, 0x65626F7250766E65, 0xED0000656C626154, v31);
      v75 = v33;
      v76 = v32;
      v88 = (id)*sub_1B19FA070(v97, v98);
      if (qword_1EEF573B8 != -1)
        swift_once();
      if (*(_QWORD *)(qword_1EEFD56A8 + 16))
      {
        sub_1B1DC3B00(0x4578614D63657073, 0xED000070614D7373);
        if ((v34 & 1) != 0)
          swift_bridgeObjectRetain();
      }
      v35 = (void *)sub_1B2228728();
      swift_bridgeObjectRelease();
      v87 = objc_msgSend(v88, sel_texture::, 4, v35);

      v36 = (void **)sub_1B19FA070(v97, v98);
      v89 = sub_1B1F4D310(4u, 0xD000000000000012, 0x80000001B23407A0, *v36);
      v73 = v38;
      v74 = v37;
      v39 = (void **)sub_1B19FA070(v97, v98);
      v86 = sub_1B1F4D310(2u, 0xD000000000000011, 0x80000001B232ACC0, *v39);
      v71 = v41;
      v72 = v40;
      v42 = (void *)*sub_1B19FA070(v97, v98);
      if (*(_QWORD *)(qword_1EEFD56A8 + 16))
      {
        sub_1B1DC3B00(0xD000000000000010, 0x80000001B232AC40);
        if ((v43 & 1) != 0)
          swift_bridgeObjectRetain();
      }
      v44 = (void *)sub_1B2228728();
      swift_bridgeObjectRelease();
      v85 = objc_msgSend(v42, sel_texture::, 6, v44);

      v45 = (void *)*sub_1B19FA070(v97, v98);
      if (*(_QWORD *)(qword_1EEFD56A8 + 16))
      {
        sub_1B1DC3B00(0xD000000000000011, 0x80000001B23407C0);
        if ((v46 & 1) != 0)
          swift_bridgeObjectRetain();
      }
      v47 = (void *)sub_1B2228728();
      swift_bridgeObjectRelease();
      v84 = objc_msgSend(v45, sel_texture::, 2, v47);

      v48 = (void *)*sub_1B19FA070(v97, v98);
      if (*(_QWORD *)(qword_1EEFD56A8 + 16))
      {
        sub_1B1DC3B00(0xD000000000000014, 0x80000001B23407E0);
        if ((v49 & 1) != 0)
          swift_bridgeObjectRetain();
      }
      v50 = (void *)sub_1B2228728();
      swift_bridgeObjectRelease();
      v83 = objc_msgSend(v48, sel_texture::, 2, v50);

      v81 = (id)*sub_1B19FA070(v97, v98);
      if (*(_QWORD *)(qword_1EEFD56A8 + 16))
      {
        sub_1B1DC3B00(0xD000000000000014, 0x80000001B2340800);
        if ((v51 & 1) != 0)
          swift_bridgeObjectRetain();
      }
      v52 = (void *)sub_1B2228728();
      swift_bridgeObjectRelease();
      v82 = objc_msgSend(v81, sel_texture::, 2, v52);

      v53 = (void **)sub_1B19FA070(v97, v98);
      v80 = sub_1B1F4D310(3u, 0xD000000000000014, 0x80000001B2340820, *v53);
      v69 = v55;
      v70 = v54;
      v56 = (void **)sub_1B19FA070(v97, v98);
      v79 = sub_1B1F4D310(3u, 0xD000000000000015, 0x80000001B2340840, *v56);
      v67 = v58;
      v68 = v57;
      v65 = (id)*sub_1B19FA070(v97, v98);
      if (*(_QWORD *)(qword_1EEFD56A8 + 16))
      {
        sub_1B1DC3B00(0x6D656E6F54707369, 0xED000054554C7061);
        if ((v59 & 1) != 0)
          swift_bridgeObjectRetain();
      }
      v60 = (void *)sub_1B2228728();
      swift_bridgeObjectRelease();
      v66 = objc_msgSend(v65, sel_texture::, 1, v60);

      v61 = (void *)*sub_1B19FA070(v97, v98);
      if (*(_QWORD *)(qword_1EEFD56A8 + 16))
      {
        sub_1B1DC3B00(0x614D7265746C6966, 0xE900000000000070);
        if ((v62 & 1) != 0)
          swift_bridgeObjectRetain();
      }
      v63 = (void *)sub_1B2228728();
      swift_bridgeObjectRelease();
      v64 = objc_msgSend(v61, sel_texture::, 2, v63);

      swift_getObjectType();
      sub_1B1F9C9F0((uint64_t)v90, v76, v75, 0, 500, (unint64_t *)(a1 + 1456));
      sub_1B1F9C214((uint64_t)v87, 504, (unint64_t *)(a1 + 1456));
      sub_1B1F9C9F0((uint64_t)v89, v74, v73, 0, 505, (unint64_t *)(a1 + 1456));
      sub_1B1F9C9F0((uint64_t)v86, v72, v71, 0, 506, (unint64_t *)(a1 + 1456));
      sub_1B1F9C214((uint64_t)v85, 507, (unint64_t *)(a1 + 1456));
      sub_1B1F9C214((uint64_t)v84, 501, (unint64_t *)(a1 + 1456));
      sub_1B1F9C214((uint64_t)v83, 502, (unint64_t *)(a1 + 1456));
      sub_1B1F9C214((uint64_t)v82, 503, (unint64_t *)(a1 + 1456));
      sub_1B1F9C9F0((uint64_t)v80, v70, v69, 0, 526, (unint64_t *)(a1 + 1456));
      sub_1B1F9C9F0((uint64_t)v79, v68, v67, 0, 525, (unint64_t *)(a1 + 1456));
      sub_1B1F9C214((uint64_t)v66, 513, (unint64_t *)(a1 + 1456));
      sub_1B1F9C214((uint64_t)v64, 514, (unint64_t *)(a1 + 1456));
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      v13 = v78;
      *((_BYTE *)v78 + 40) = 1;
      _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v97);
      a4 = v77;
      a5 = v91;
    }
    else
    {
      _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v97);
    }
  }
  else
  {
    sub_1B1D65D88((uint64_t)&v95);
  }
  sub_1B1D65D24(v14, (uint64_t)&v95);
  if (v96)
  {
    v15 = a4;
    sub_1B1A02518(&v95, (uint64_t)v97);
    v16 = *(_QWORD *)(a1 + 1592);
    if (v16)
    {
      swift_bridgeObjectRetain();
      sub_1B1E136FC(a1 + 1520, v16, v15);
      swift_bridgeObjectRelease();
    }
    *(_WORD *)(a1 + 1520) = sub_1B2163ABC(a5);
    sub_1B1ECB100(a1 + 1488);
    if (*(_QWORD *)(a1 + 1576))
    {
      v17 = v13;
      v18 = (void *)*sub_1B19FA070(v97, v98);
      v19 = qword_1EEF573B8;
      swift_unknownObjectRetain();
      if (v19 != -1)
        swift_once();
      if (*(_QWORD *)(qword_1EEFD56A8 + 16))
      {
        sub_1B1DC3B00(0x6B73614D7442, 0xE600000000000000);
        if ((v20 & 1) != 0)
          swift_bridgeObjectRetain();
      }
      v24 = (void *)sub_1B2228728();
      swift_bridgeObjectRelease();
      v25 = objc_msgSend(v18, sel_texture::, 6, v24);

      ObjectType = swift_getObjectType();
      sub_1B1F9C214((uint64_t)v25, 570, (unint64_t *)(a1 + 1568));
      if ((a6 & 0x100000000) == 0)
      {
        LODWORD(v95) = a6;
        sub_1B1F9C340((uint64_t)&v95, 553, ObjectType, MEMORY[0x1E0DEB188]);
      }
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      v13 = v17;
    }
    result = _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v97);
    if (*(_QWORD *)(a1 + 1408))
      goto LABEL_23;
LABEL_18:
    v22 = 0;
    v23 = 0uLL;
    goto LABEL_24;
  }
  result = sub_1B1D65D88((uint64_t)&v95);
  if (!*(_QWORD *)(a1 + 1408))
    goto LABEL_18;
LABEL_23:
  v92 = *(_OWORD *)(a1 + 1328);
  v22 = *(_QWORD *)(a1 + 1344);
  result = swift_unknownObjectRetain();
  v23 = v92;
LABEL_24:
  *(_OWORD *)a7 = v23;
  *(_QWORD *)(a7 + 16) = v22;
  if (*(_QWORD *)(a1 + 1456))
  {
    v93 = *v13;
    v27 = *(_QWORD *)(a1 + 1448);
    result = swift_unknownObjectRetain();
    v28 = v93;
  }
  else
  {
    v27 = 0;
    v28 = 0uLL;
  }
  *(_OWORD *)(a7 + 24) = v28;
  *(_QWORD *)(a7 + 40) = v27;
  if (*(_QWORD *)(a1 + 1568))
  {
    v94 = *(_OWORD *)(a1 + 1488);
    v29 = *(_QWORD *)(a1 + 1504);
    result = swift_unknownObjectRetain();
    v30 = v94;
  }
  else
  {
    v29 = 0;
    v30 = 0uLL;
  }
  *(_OWORD *)(a7 + 48) = v30;
  *(_QWORD *)(a7 + 64) = v29;
  *(_QWORD *)(a7 + 72) = 0;
  *(_QWORD *)(a7 + 80) = 0;
  *(_QWORD *)(a7 + 88) = 0;
  return result;
}

void sub_1B1ECBFB8(unint64_t a1, id a2, void *a3)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  id v15;
  _BYTE *v16;
  _BYTE *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  void *v24;
  id v25;
  void *v26;
  int KeyPath;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  _QWORD *v47;
  id v48;
  void *v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  char v53;

  v4 = v3;
  v8 = objc_msgSend(a2, sel_supportsFamily_, 5001);
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v9 = sub_1B22296AC();
    if (v9)
      goto LABEL_3;
LABEL_27:
    swift_bridgeObjectRelease();
    return;
  }
  v9 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v9)
    goto LABEL_27;
LABEL_3:
  v53 = v8;
  v10 = 0;
  v11 = a1 & 0xC000000000000001;
  while (1)
  {
    if (v11)
    {
      v12 = (void *)MEMORY[0x1B5E21018](v10, a1);
    }
    else
    {
      v12 = *(void **)(a1 + 8 * v10 + 32);
      swift_unknownObjectRetain();
    }
    if (!objc_msgSend(v12, sel_index))
      break;
    swift_unknownObjectRelease();
    if (v9 == ++v10)
      goto LABEL_21;
  }
  swift_bridgeObjectRelease();
  if (qword_1ED4B7878 != -1)
    swift_once();
  if (byte_1ED4D097C == 1)
  {
    v13 = swift_dynamicCastObjCProtocolConditional();
    if (!v13)
      goto LABEL_34;
    v14 = (void *)v13;
    swift_unknownObjectRetain();
    v15 = objc_msgSend(a2, sel_newArgumentEncoderWithBufferBinding_, v14);
    if ((uint64_t)objc_msgSend(v15, sel_encodedLength) < 1
      || (objc_msgSend(v15, sel_setArgumentBuffer_offset_, a3, 0),
          v16 = objc_msgSend(v15, sel_constantDataAtIndex_, 0),
          v17 = objc_msgSend((id)swift_unknownObjectRetain(), sel_contents),
          v18 = a3,
          v19 = v16 - v17,
          v19 < 0))
    {
      v20 = 0;
    }
    else if (v19 >= (uint64_t)objc_msgSend(v18, sel_length))
    {
      v20 = 0;
    }
    else
    {
      v20 = v19;
    }
    v48 = objc_msgSend(v14, sel_bufferStructType);
    if (!v48)
    {
      sub_1B2229430();
      sub_1B19F8F48(0, &qword_1EEF615F0);
      sub_1B22295EC();
      sub_1B2228890();
      sub_1B1ECF288();
      swift_allocError();
      *v52 = 0;
      v52[1] = 0xE000000000000000;
      swift_willThrow();
      swift_unknownObjectRelease();
      goto LABEL_43;
    }
    v49 = v48;
    sub_1B1ECCDF4(29796, 0xE200000000000000, (id)v20, 4, v48);
    if (v3)
    {

      swift_unknownObjectRelease();
      swift_unknownObjectRelease_n();
      return;
    }
    sub_1B1ECCDF4(1701669236, 0xE400000000000000, (id)(v20 + 4), 4, v49);
    sub_1B1ECD4AC(7103081, 0xE300000000000000, 10, (id)0xD0, (id)8, v49, v53);
    sub_1B1ECD4AC(0x70616D5F727276, 0xE700000000000000, 12, 0, (id)0x18, v49, v53);
    sub_1B1ECD160(0x6E61696461727269, 0xEA00000000006563, 20, (id)0x20, v49, v53);
    sub_1B1ECD160(0x65636E6169646172, 0xE800000000000000, 21, (id)0x28, v49, v53);
    sub_1B1ECD160(0x54554C66647262, 0xE700000000000000, 22, (id)0x30, v49, v53);
    sub_1B1ECD160(0x614D776F64616873, 0xE900000000000070, 23, (id)0x38, v49, v53);
    sub_1B1ECD4AC(0x696E556C65786F76, 0xE800000000000000, 33, (id)0x60, (id)0x40, v49, v53);
    sub_1B1ECD160(0x7865547474616373, 0xE800000000000000, 34, (id)0x48, v49, v53);
    v4 = 0;

    swift_unknownObjectRelease();
    swift_unknownObjectRelease_n();
  }
  else
  {
    swift_unknownObjectRelease();
  }
  swift_bridgeObjectRetain();
LABEL_21:
  v21 = 0;
  while (1)
  {
    if (v11)
    {
      v22 = (void *)MEMORY[0x1B5E21018](v21, a1);
    }
    else
    {
      v22 = *(void **)(a1 + 8 * v21 + 32);
      swift_unknownObjectRetain();
    }
    if (objc_msgSend(v22, sel_index) == (id)1)
      break;
    swift_unknownObjectRelease();
    if (v9 == ++v21)
      goto LABEL_27;
  }
  swift_bridgeObjectRelease();
  v23 = swift_dynamicCastObjCProtocolConditional();
  if (!v23)
  {
LABEL_34:
    sub_1B2229430();
    sub_1B19F8F48(0, (unint64_t *)&qword_1ED4B7980);
    sub_1B22295EC();
    sub_1B2228890();
    sub_1B1ECF288();
    swift_allocError();
    *v47 = 0;
    v47[1] = 0xE000000000000000;
    swift_willThrow();
    swift_unknownObjectRelease();
    return;
  }
  v24 = (void *)v23;
  swift_unknownObjectRetain();
  v25 = objc_msgSend(v24, sel_bufferStructType);
  if (!v25)
  {
    sub_1B2229430();
    sub_1B19F8F48(0, &qword_1EEF615F0);
    sub_1B22295EC();
    sub_1B2228890();
    sub_1B1ECF288();
    swift_allocError();
    *v50 = 0;
    v50[1] = 0xE000000000000000;
    swift_willThrow();
LABEL_43:
    swift_unknownObjectRelease_n();
    return;
  }
  v26 = v25;
  if (objc_msgSend(v24, sel_bufferDataSize) == (id)1152)
  {
    KeyPath = swift_getKeyPath();
    sub_1B1ECD904(0xD000000000000011, 0x80000001B2340970, KeyPath, v26);
    if (!v4)
    {
      swift_release();
      v28 = swift_getKeyPath();
      sub_1B1ECD904(0xD000000000000011, 0x80000001B2340990, v28, v26);
      swift_release();
      v29 = swift_getKeyPath();
      sub_1B1ECD904(0x6F72665F6A6F7270, 0xEE00776569765F6DLL, v29, v26);
      swift_release();
      v30 = swift_getKeyPath();
      sub_1B1ECD904(0x6F72665F77656976, 0xEE006A6F72705F6DLL, v30, v26);
      swift_release();
      v31 = swift_getKeyPath();
      sub_1B1ECEBB0(0x6D61635F73777263, 0xEF736F705F617265, v31, v26);
      swift_release();
      v32 = swift_getKeyPath();
      sub_1B1ECDCC0(0xD00000000000001BLL, 0x80000001B23409B0, v32, v26);
      swift_release();
      v33 = swift_getKeyPath();
      sub_1B1ECDCC0(0xD00000000000001DLL, 0x80000001B23409D0, v33, v26);
      swift_release();
      v34 = swift_getKeyPath();
      sub_1B1ECD904(0xD000000000000012, 0x80000001B23409F0, v34, v26);
      swift_release();
      v35 = swift_getKeyPath();
      sub_1B1ECE07C(0xD000000000000016, 0x80000001B2340A10, v35, v26);
      swift_release();
      v36 = swift_getKeyPath();
      sub_1B1ECE07C(0xD000000000000010, 0x80000001B2340A30, v36, v26);
      swift_release();
      v37 = swift_getKeyPath();
      sub_1B1ECE438(0x74726F7077656976, 0xED0000746E756F43, v37, v26);
      swift_release();
      v38 = swift_getKeyPath();
      sub_1B1ECE438(0xD000000000000016, 0x80000001B2340A50, v38, v26);
      swift_release();
      v39 = swift_getKeyPath();
      sub_1B1ECE07C(0x536D6F724663646ELL, 0xED00006E65657263, v39, v26);
      swift_release();
      v40 = swift_getKeyPath();
      sub_1B1ECE7F4(0x7261467261656ELL, 0xE700000000000000, v40, v26);
      swift_release();
      v41 = swift_getKeyPath();
      sub_1B1ECE7F4(0xD000000000000014, 0x80000001B2340A70, v41, v26);
      swift_release();
      v42 = swift_getKeyPath();
      sub_1B1ECE438(0x6361704F65646166, 0xEB00000000797469, v42, v26);
      swift_release();
      v43 = swift_getKeyPath();
      sub_1B1ECE7F4(0xD000000000000029, 0x80000001B2340A90, v43, v26);
      swift_release();
      v44 = swift_getKeyPath();
      sub_1B1ECEBB0(0xD000000000000017, 0x80000001B2340AC0, v44, v26);
      swift_release();
      v45 = swift_getKeyPath();
      sub_1B1ECEBB0(0xD000000000000011, 0x80000001B2340AE0, v45, v26);
      swift_release();
      v46 = swift_getKeyPath();
      sub_1B1ECE07C(0xD000000000000010, 0x80000001B2340B00, v46, v26);
    }
    swift_unknownObjectRelease_n();

    swift_release();
  }
  else
  {
    sub_1B2229430();
    swift_bridgeObjectRelease();
    objc_msgSend(v24, sel_bufferDataSize);
    sub_1B2229A0C();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    sub_1B2229A0C();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B1ECF288();
    swift_allocError();
    *v51 = 0xD000000000000020;
    v51[1] = 0x80000001B2340940;
    swift_willThrow();
    swift_unknownObjectRelease_n();

  }
}

void sub_1B1ECCDF4(uint64_t a1, uint64_t a2, id a3, uint64_t a4, id a5)
{
  id v9;
  unint64_t v10;
  void *v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;

  v9 = objc_msgSend(a5, sel_members);
  sub_1B1ECF2CC();
  v10 = sub_1B2228AB8();

  swift_bridgeObjectRetain();
  v11 = sub_1B1ECF10C(v10, a1, a2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v11)
  {
    if (objc_msgSend(v11, sel_offset) == a3)
    {
      if (sub_1B1F9CB40() == a4)
      {

        return;
      }
      sub_1B2229430();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v14 = a1;
      v15 = a2;
      sub_1B2228890();
      sub_1B1F9CB40();
      sub_1B2229A0C();
      sub_1B2228890();
      swift_bridgeObjectRelease();
      sub_1B2228890();
    }
    else
    {
      sub_1B2229430();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v14 = a1;
      v15 = a2;
      sub_1B2228890();
      objc_msgSend(v11, sel_offset);
      sub_1B2229A0C();
      sub_1B2228890();
      swift_bridgeObjectRelease();
      sub_1B2228890();
    }
    sub_1B2229A0C();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    sub_1B1ECF288();
    swift_allocError();
    *v13 = v14;
    v13[1] = v15;
    swift_willThrow();

  }
  else
  {
    sub_1B2229430();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    sub_1B2228890();
    sub_1B1ECF288();
    swift_allocError();
    *v12 = 0x20676E697373694DLL;
    v12[1] = 0xE800000000000000;
    swift_willThrow();
  }
}

void sub_1B1ECD160(uint64_t a1, uint64_t a2, int a3, id a4, id a5, char a6)
{
  id v11;
  unint64_t v12;
  void *v13;
  id v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;

  v11 = objc_msgSend(a5, sel_members);
  sub_1B1ECF2CC();
  v12 = sub_1B2228AB8();

  swift_bridgeObjectRetain();
  v13 = sub_1B1ECEF6C(v12, a1, a2, a3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v13)
  {
    v14 = objc_msgSend(v13, sel_textureReferenceType);

    if (v14)
    {
      if ((a6 & 1) == 0 || objc_msgSend(v13, sel_offset) == a4)
      {

        return;
      }
      sub_1B2229430();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v17 = a1;
      v18 = a2;
      sub_1B2228890();
      objc_msgSend(v13, sel_offset);
      sub_1B2229A0C();
      sub_1B2228890();
      swift_bridgeObjectRelease();
      sub_1B2228890();
      sub_1B2229A0C();
      sub_1B2228890();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_1B2229430();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v17 = a1;
      v18 = a2;
      sub_1B2228890();
    }
    sub_1B1ECF288();
    swift_allocError();
    *v16 = v17;
    v16[1] = v18;
    swift_willThrow();

  }
  else
  {
    sub_1B2229430();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    sub_1B2228890();
    sub_1B2229A0C();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    sub_1B1ECF288();
    swift_allocError();
    *v15 = 0x20676E697373694DLL;
    v15[1] = 0xE800000000000000;
    swift_willThrow();
  }
}

void sub_1B1ECD4AC(uint64_t a1, uint64_t a2, int a3, id a4, id a5, id a6, char a7)
{
  id v13;
  unint64_t v14;
  void *v15;
  id v16;
  void *v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;

  v13 = objc_msgSend(a6, sel_members);
  sub_1B1ECF2CC();
  v14 = sub_1B2228AB8();

  swift_bridgeObjectRetain();
  v15 = sub_1B1ECEF6C(v14, a1, a2, a3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v15)
  {
    v16 = objc_msgSend(v15, sel_pointerType);
    if (v16)
    {
      v17 = v16;
      if (objc_msgSend(v16, sel_dataSize) == a4)
      {
        if ((a7 & 1) == 0 || objc_msgSend(v15, sel_offset) == a5)
        {

          return;
        }
        sub_1B2229430();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        v21 = a1;
        v22 = a2;
        sub_1B2228890();
        objc_msgSend(v15, sel_offset);
        sub_1B2229A0C();
        sub_1B2228890();
        swift_bridgeObjectRelease();
        sub_1B2228890();
      }
      else
      {
        sub_1B2229430();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        v21 = a1;
        v22 = a2;
        sub_1B2228890();
        objc_msgSend(v17, sel_dataSize);
        sub_1B2229A0C();
        sub_1B2228890();
        swift_bridgeObjectRelease();
        sub_1B2228890();
      }
      sub_1B2229A0C();
      sub_1B2228890();
      swift_bridgeObjectRelease();
      sub_1B1ECF288();
      swift_allocError();
      *v20 = v21;
      v20[1] = v22;
      swift_willThrow();

    }
    else
    {
      sub_1B2229430();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      sub_1B2228890();
      sub_1B1ECF288();
      swift_allocError();
      *v19 = a1;
      v19[1] = a2;
      swift_willThrow();

    }
  }
  else
  {
    sub_1B2229430();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    sub_1B2228890();
    sub_1B2229A0C();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    sub_1B1ECF288();
    swift_allocError();
    *v18 = 0x20676E697373694DLL;
    v18[1] = 0xE800000000000000;
    swift_willThrow();
  }
}

void sub_1B1ECD904(uint64_t a1, uint64_t a2, int a3, id a4)
{
  id v6;
  unint64_t v7;
  void *v8;
  id v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;

  v6 = objc_msgSend(a4, sel_members);
  sub_1B1ECF2CC();
  v7 = sub_1B2228AB8();

  swift_bridgeObjectRetain();
  v8 = sub_1B1ECF10C(v7, a1, a2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v8)
  {
    v9 = (id)sub_1B2229310();
    if (objc_msgSend(v8, sel_offset) == v9)
    {
      if (sub_1B1F9CB40() == 128)
      {

        return;
      }
      sub_1B2229430();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v12 = a1;
      v13 = a2;
      sub_1B2228890();
      sub_1B1F9CB40();
      sub_1B2229A0C();
      sub_1B2228890();
      swift_bridgeObjectRelease();
      sub_1B2228890();
    }
    else
    {
      sub_1B2229430();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v12 = a1;
      v13 = a2;
      sub_1B2228890();
      objc_msgSend(v8, sel_offset);
      sub_1B2229A0C();
      sub_1B2228890();
      swift_bridgeObjectRelease();
      sub_1B2228890();
    }
    sub_1B2229A0C();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    type metadata accessor for view_constants(0);
    sub_1B1ECF308();
    sub_1B22287AC();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B1ECF288();
    swift_allocError();
    *v11 = v12;
    v11[1] = v13;
    swift_willThrow();

  }
  else
  {
    sub_1B2229430();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    sub_1B2228890();
    type metadata accessor for view_constants(0);
    sub_1B1ECF308();
    sub_1B22287AC();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B1ECF288();
    swift_allocError();
    *v10 = 0x20676E697373694DLL;
    v10[1] = 0xE800000000000000;
    swift_willThrow();
  }
}

void sub_1B1ECDCC0(uint64_t a1, uint64_t a2, int a3, id a4)
{
  id v6;
  unint64_t v7;
  void *v8;
  id v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;

  v6 = objc_msgSend(a4, sel_members);
  sub_1B1ECF2CC();
  v7 = sub_1B2228AB8();

  swift_bridgeObjectRetain();
  v8 = sub_1B1ECF10C(v7, a1, a2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v8)
  {
    v9 = (id)sub_1B2229310();
    if (objc_msgSend(v8, sel_offset) == v9)
    {
      if (sub_1B1F9CB40() == 64)
      {

        return;
      }
      sub_1B2229430();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v12 = a1;
      v13 = a2;
      sub_1B2228890();
      sub_1B1F9CB40();
      sub_1B2229A0C();
      sub_1B2228890();
      swift_bridgeObjectRelease();
      sub_1B2228890();
    }
    else
    {
      sub_1B2229430();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v12 = a1;
      v13 = a2;
      sub_1B2228890();
      objc_msgSend(v8, sel_offset);
      sub_1B2229A0C();
      sub_1B2228890();
      swift_bridgeObjectRelease();
      sub_1B2228890();
    }
    sub_1B2229A0C();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    type metadata accessor for view_constants(0);
    sub_1B1ECF308();
    sub_1B22287AC();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B1ECF288();
    swift_allocError();
    *v11 = v12;
    v11[1] = v13;
    swift_willThrow();

  }
  else
  {
    sub_1B2229430();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    sub_1B2228890();
    type metadata accessor for view_constants(0);
    sub_1B1ECF308();
    sub_1B22287AC();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B1ECF288();
    swift_allocError();
    *v10 = 0x20676E697373694DLL;
    v10[1] = 0xE800000000000000;
    swift_willThrow();
  }
}

void sub_1B1ECE07C(uint64_t a1, uint64_t a2, int a3, id a4)
{
  id v6;
  unint64_t v7;
  void *v8;
  id v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;

  v6 = objc_msgSend(a4, sel_members);
  sub_1B1ECF2CC();
  v7 = sub_1B2228AB8();

  swift_bridgeObjectRetain();
  v8 = sub_1B1ECF10C(v7, a1, a2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v8)
  {
    v9 = (id)sub_1B2229310();
    if (objc_msgSend(v8, sel_offset) == v9)
    {
      if (sub_1B1F9CB40() == 16)
      {

        return;
      }
      sub_1B2229430();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v12 = a1;
      v13 = a2;
      sub_1B2228890();
      sub_1B1F9CB40();
      sub_1B2229A0C();
      sub_1B2228890();
      swift_bridgeObjectRelease();
      sub_1B2228890();
    }
    else
    {
      sub_1B2229430();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v12 = a1;
      v13 = a2;
      sub_1B2228890();
      objc_msgSend(v8, sel_offset);
      sub_1B2229A0C();
      sub_1B2228890();
      swift_bridgeObjectRelease();
      sub_1B2228890();
    }
    sub_1B2229A0C();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    type metadata accessor for view_constants(0);
    sub_1B1ECF308();
    sub_1B22287AC();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B1ECF288();
    swift_allocError();
    *v11 = v12;
    v11[1] = v13;
    swift_willThrow();

  }
  else
  {
    sub_1B2229430();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    sub_1B2228890();
    type metadata accessor for view_constants(0);
    sub_1B1ECF308();
    sub_1B22287AC();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B1ECF288();
    swift_allocError();
    *v10 = 0x20676E697373694DLL;
    v10[1] = 0xE800000000000000;
    swift_willThrow();
  }
}

void sub_1B1ECE438(uint64_t a1, uint64_t a2, int a3, id a4)
{
  id v6;
  unint64_t v7;
  void *v8;
  id v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;

  v6 = objc_msgSend(a4, sel_members);
  sub_1B1ECF2CC();
  v7 = sub_1B2228AB8();

  swift_bridgeObjectRetain();
  v8 = sub_1B1ECF10C(v7, a1, a2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v8)
  {
    v9 = (id)sub_1B2229310();
    if (objc_msgSend(v8, sel_offset) == v9)
    {
      if (sub_1B1F9CB40() == 4)
      {

        return;
      }
      sub_1B2229430();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v12 = a1;
      v13 = a2;
      sub_1B2228890();
      sub_1B1F9CB40();
      sub_1B2229A0C();
      sub_1B2228890();
      swift_bridgeObjectRelease();
      sub_1B2228890();
    }
    else
    {
      sub_1B2229430();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v12 = a1;
      v13 = a2;
      sub_1B2228890();
      objc_msgSend(v8, sel_offset);
      sub_1B2229A0C();
      sub_1B2228890();
      swift_bridgeObjectRelease();
      sub_1B2228890();
    }
    sub_1B2229A0C();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    type metadata accessor for view_constants(0);
    sub_1B1ECF308();
    sub_1B22287AC();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B1ECF288();
    swift_allocError();
    *v11 = v12;
    v11[1] = v13;
    swift_willThrow();

  }
  else
  {
    sub_1B2229430();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    sub_1B2228890();
    type metadata accessor for view_constants(0);
    sub_1B1ECF308();
    sub_1B22287AC();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B1ECF288();
    swift_allocError();
    *v10 = 0x20676E697373694DLL;
    v10[1] = 0xE800000000000000;
    swift_willThrow();
  }
}

void sub_1B1ECE7F4(uint64_t a1, uint64_t a2, int a3, id a4)
{
  id v6;
  unint64_t v7;
  void *v8;
  id v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;

  v6 = objc_msgSend(a4, sel_members);
  sub_1B1ECF2CC();
  v7 = sub_1B2228AB8();

  swift_bridgeObjectRetain();
  v8 = sub_1B1ECF10C(v7, a1, a2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v8)
  {
    v9 = (id)sub_1B2229310();
    if (objc_msgSend(v8, sel_offset) == v9)
    {
      if (sub_1B1F9CB40() == 8)
      {

        return;
      }
      sub_1B2229430();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v12 = a1;
      v13 = a2;
      sub_1B2228890();
      sub_1B1F9CB40();
      sub_1B2229A0C();
      sub_1B2228890();
      swift_bridgeObjectRelease();
      sub_1B2228890();
    }
    else
    {
      sub_1B2229430();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v12 = a1;
      v13 = a2;
      sub_1B2228890();
      objc_msgSend(v8, sel_offset);
      sub_1B2229A0C();
      sub_1B2228890();
      swift_bridgeObjectRelease();
      sub_1B2228890();
    }
    sub_1B2229A0C();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    type metadata accessor for view_constants(0);
    sub_1B1ECF308();
    sub_1B22287AC();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B1ECF288();
    swift_allocError();
    *v11 = v12;
    v11[1] = v13;
    swift_willThrow();

  }
  else
  {
    sub_1B2229430();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    sub_1B2228890();
    type metadata accessor for view_constants(0);
    sub_1B1ECF308();
    sub_1B22287AC();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B1ECF288();
    swift_allocError();
    *v10 = 0x20676E697373694DLL;
    v10[1] = 0xE800000000000000;
    swift_willThrow();
  }
}

void sub_1B1ECEBB0(uint64_t a1, uint64_t a2, int a3, id a4)
{
  id v6;
  unint64_t v7;
  void *v8;
  id v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;

  v6 = objc_msgSend(a4, sel_members);
  sub_1B1ECF2CC();
  v7 = sub_1B2228AB8();

  swift_bridgeObjectRetain();
  v8 = sub_1B1ECF10C(v7, a1, a2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v8)
  {
    v9 = (id)sub_1B2229310();
    if (objc_msgSend(v8, sel_offset) == v9)
    {
      if (sub_1B1F9CB40() == 32)
      {

        return;
      }
      sub_1B2229430();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v12 = a1;
      v13 = a2;
      sub_1B2228890();
      sub_1B1F9CB40();
      sub_1B2229A0C();
      sub_1B2228890();
      swift_bridgeObjectRelease();
      sub_1B2228890();
    }
    else
    {
      sub_1B2229430();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v12 = a1;
      v13 = a2;
      sub_1B2228890();
      objc_msgSend(v8, sel_offset);
      sub_1B2229A0C();
      sub_1B2228890();
      swift_bridgeObjectRelease();
      sub_1B2228890();
    }
    sub_1B2229A0C();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    type metadata accessor for view_constants(0);
    sub_1B1ECF308();
    sub_1B22287AC();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B1ECF288();
    swift_allocError();
    *v11 = v12;
    v11[1] = v13;
    swift_willThrow();

  }
  else
  {
    sub_1B2229430();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    sub_1B2228890();
    type metadata accessor for view_constants(0);
    sub_1B1ECF308();
    sub_1B22287AC();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B1ECF288();
    swift_allocError();
    *v10 = 0x20676E697373694DLL;
    v10[1] = 0xE800000000000000;
    swift_willThrow();
  }
}

void *sub_1B1ECEF6C(unint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  id v11;
  void *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v18;
  uint64_t v20;
  id v21;

  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v9 = sub_1B22296AC();
    if (v9)
      goto LABEL_3;
LABEL_19:
    swift_bridgeObjectRelease();
    return 0;
  }
  v9 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v9)
    goto LABEL_19;
LABEL_3:
  v10 = 0;
  v20 = v4;
  v21 = (id)a4;
  while (1)
  {
    v11 = (a1 & 0xC000000000000001) != 0 ? (id)MEMORY[0x1B5E21018](v10, a1) : *(id *)(a1 + 8 * v10 + 32);
    v12 = v11;
    v13 = objc_msgSend(v11, sel_name, v20);
    v14 = sub_1B222874C();
    v16 = v15;

    if (v14 == a2 && v16 == a3)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v18 = sub_1B2229D24();
      swift_bridgeObjectRelease();
      if ((v18 & 1) == 0)
        goto LABEL_6;
    }
    if (objc_msgSend(v12, sel_argumentIndex) == v21)
      break;
LABEL_6:

    if (v9 == ++v10)
      goto LABEL_19;
  }
  swift_bridgeObjectRelease();
  return v12;
}

void *sub_1B1ECF10C(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v15;

  if (!(a1 >> 62))
  {
    v6 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v6)
      goto LABEL_3;
LABEL_17:
    swift_bridgeObjectRelease();
    return 0;
  }
  swift_bridgeObjectRetain();
  v6 = sub_1B22296AC();
  if (!v6)
    goto LABEL_17;
LABEL_3:
  v7 = 0;
  while (1)
  {
    v8 = (a1 & 0xC000000000000001) != 0 ? (id)MEMORY[0x1B5E21018](v7, a1) : *(id *)(a1 + 8 * v7 + 32);
    v9 = v8;
    v10 = objc_msgSend(v8, sel_name);
    v11 = sub_1B222874C();
    v13 = v12;

    if (v11 == a2 && v13 == a3)
      break;
    v15 = sub_1B2229D24();
    swift_bridgeObjectRelease();
    if ((v15 & 1) != 0)
      goto LABEL_15;

    if (v6 == ++v7)
      goto LABEL_17;
  }
  swift_bridgeObjectRelease();
LABEL_15:
  swift_bridgeObjectRelease();
  return v9;
}

unint64_t sub_1B1ECF288()
{
  unint64_t result;

  result = qword_1ED4B7950;
  if (!qword_1ED4B7950)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B229D628, &type metadata for BindError);
    atomic_store(result, (unint64_t *)&qword_1ED4B7950);
  }
  return result;
}

unint64_t sub_1B1ECF2CC()
{
  unint64_t result;

  result = qword_1ED4B79E0;
  if (!qword_1ED4B79E0)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1ED4B79E0);
  }
  return result;
}

unint64_t sub_1B1ECF308()
{
  unint64_t result;

  result = qword_1EEF60268;
  if (!qword_1EEF60268)
  {
    type metadata accessor for view_constants(255);
    result = swift_getMetatypeMetadata();
    atomic_store(result, (unint64_t *)&qword_1EEF60268);
  }
  return result;
}

uint64_t sub_1B1ECF340(uint64_t a1)
{
  uint64_t v1;

  return sub_1B1EC8B04(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

id sub_1B1ECF358(uint64_t a1)
{
  uint64_t v1;

  return sub_1B1EC9F98(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

ValueMetadata *type metadata accessor for BindError()
{
  return &type metadata for BindError;
}

uint64_t sub_1B1ECF388()
{
  return type metadata accessor for MathNode(0);
}

uint64_t type metadata accessor for MathNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF60270);
}

void sub_1B1ECF3A4()
{
  sub_1B2229688();
  __break(1u);
}

uint64_t sub_1B1ECF3EC()
{
  return type metadata accessor for ArithmeticOperatorNode(0);
}

uint64_t type metadata accessor for ArithmeticOperatorNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF60280);
}

__n128 sub_1B1ECF408@<Q0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 result;
  uint64_t v11;

  sub_1B1E58F20();
  v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_1B226CD10;
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)(v3 + 32) = v4 | 0x4000000000000000;
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = 0;
  *(_QWORD *)(v3 + 40) = v5 | 0x4000000000000000;
  v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_1B226D240;
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = 0;
  *(_QWORD *)(v6 + 32) = v7 | 0x4000000000000000;
  v8 = (*(uint64_t (**)(void))(*(_QWORD *)v1 + 256))();
  v9 = swift_allocObject();
  result = (__n128)xmmword_1B226CD10;
  *(_OWORD *)(v9 + 16) = xmmword_1B226CD10;
  *(_QWORD *)(v9 + 32) = v8;
  *(_QWORD *)(v9 + 40) = 0x8000000000000000;
  *a1 = v3;
  a1[1] = v6;
  v11 = MEMORY[0x1E0DEE9D8];
  a1[2] = v9;
  a1[3] = v11;
  a1[4] = v11;
  a1[5] = v11;
  return result;
}

uint64_t sub_1B1ECF528()
{
  return type metadata accessor for ArithmeticBinaryOperatorNode(0);
}

uint64_t type metadata accessor for ArithmeticBinaryOperatorNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF60290);
}

uint64_t sub_1B1ECF544()
{
  return 6579265;
}

uint64_t sub_1B1ECF554()
{
  return 0x3125202B203025;
}

uint64_t sub_1B1ECF56C()
{
  return type metadata accessor for AddNode(0);
}

uint64_t type metadata accessor for AddNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF602A0);
}

uint64_t sub_1B1ECF588()
{
  return 0x7463617274627553;
}

uint64_t sub_1B1ECF5A0()
{
  return 0x3125202D203025;
}

uint64_t sub_1B1ECF5B8()
{
  return type metadata accessor for SubNode(0);
}

uint64_t type metadata accessor for SubNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF602B0);
}

uint64_t sub_1B1ECF5D4()
{
  return 0x796C7069746C754DLL;
}

uint64_t sub_1B1ECF5EC()
{
  return 0x3125202A203025;
}

uint64_t sub_1B1ECF604()
{
  return type metadata accessor for MulNode(0);
}

uint64_t type metadata accessor for MulNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF602C0);
}

uint64_t sub_1B1ECF620()
{
  return 0x656469766944;
}

uint64_t sub_1B1ECF634(char a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  uint64_t v10;
  unint64_t v11;

  v3 = *v1;
  v4 = v1[3];
  v5 = *(_QWORD *)(v4 + 32);
  sub_1B1BCCD2C(v4);
  sub_1B1B632F0(v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B1D750D8(v5, (uint64_t)&v10, 0.0);
  if ((a1 & 1) != 0)
    v6 = 0x6C616D726F6E7369;
  else
    v6 = 0x6E73695F67745F5FLL;
  if ((a1 & 1) != 0)
    v7 = 0xE800000000000000;
  else
    v7 = 0xED00006C616D726FLL;
  sub_1B1FF3F6C(v5, (uint64_t)&v10, a1 & 1, v3, (uint64_t)&off_1E63A7668);
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v10);
  if (v5 >> 60 == 1 && *(_QWORD *)(v5 + 24) >> 60 != 1)
  {
    v10 = 0;
    v11 = 0xE000000000000000;
    sub_1B2229430();
    swift_bridgeObjectRelease();
    v10 = 0x656C65735F786676;
    v11 = 0xEB00000000287463;
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
  sub_1B1D76C18(v5);
  if ((v8 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    v10 = 0;
    v11 = 0xE000000000000000;
    sub_1B2229430();
    swift_bridgeObjectRelease();
    v10 = 0x203D3D203125;
    v11 = 0xE600000000000000;
    sub_1B2228890();
    sub_1B2228890();
    sub_1B2228890();
    swift_bridgeObjectRelease();
LABEL_13:
    sub_1B2228890();
    goto LABEL_14;
  }
  v10 = 0;
  v11 = 0xE000000000000000;
  sub_1B2229430();
  swift_bridgeObjectRelease();
  v10 = v6;
  v11 = v7;
  sub_1B2228890();
  sub_1B2228890();
  swift_bridgeObjectRelease();
LABEL_14:
  sub_1B1B28D2C(v5);
  return v10;
}

uint64_t sub_1B1ECF8E8()
{
  return type metadata accessor for DivNode(0);
}

uint64_t type metadata accessor for DivNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF602D0);
}

uint64_t sub_1B1ECF904()
{
  return 0x65646E69616D6552;
}

uint64_t sub_1B1ECF920(char a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  uint64_t v10;
  unint64_t v11;

  v3 = *v1;
  v4 = v1[3];
  v5 = *(_QWORD *)(v4 + 32);
  sub_1B1BCCD2C(v4);
  sub_1B1B632F0(v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B1D750D8(v5, (uint64_t)&v10, 0.0);
  if ((a1 & 1) != 0)
    v6 = 0x6C616D726F6E7369;
  else
    v6 = 0x6E73695F67745F5FLL;
  if ((a1 & 1) != 0)
    v7 = 0xE800000000000000;
  else
    v7 = 0xED00006C616D726FLL;
  sub_1B1FF3F6C(v5, (uint64_t)&v10, a1 & 1, v3, (uint64_t)&off_1E63A7668);
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v10);
  if (v5 >> 60 == 1 && *(_QWORD *)(v5 + 24) >> 60 != 1)
  {
    v10 = 0;
    v11 = 0xE000000000000000;
    sub_1B2229430();
    swift_bridgeObjectRelease();
    v10 = 0x656C65735F786676;
    v11 = 0xEB00000000287463;
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
  sub_1B1D76C18(v5);
  if ((v8 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v10 = 0;
    v11 = 0xE000000000000000;
    sub_1B2229430();
    swift_bridgeObjectRelease();
    v10 = 0x203D3D203125;
    v11 = 0xE600000000000000;
    sub_1B2228890();
    sub_1B2228890();
    sub_1B2228890();
    swift_bridgeObjectRelease();
LABEL_13:
    sub_1B2228890();
    goto LABEL_14;
  }
  v10 = 0;
  v11 = 0xE000000000000000;
  sub_1B2229430();
  swift_bridgeObjectRelease();
  v10 = v6;
  v11 = v7;
  sub_1B2228890();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  sub_1B2228890();
  swift_bridgeObjectRelease();
LABEL_14:
  sub_1B1B28D2C(v5);
  return v10;
}

uint64_t sub_1B1ECFC80()
{
  return type metadata accessor for RemainderNode(0);
}

uint64_t type metadata accessor for RemainderNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF602E0);
}

uint64_t sub_1B1ECFC9C()
{
  return 0x746E6569746F7551;
}

unint64_t sub_1B1ECFCB4()
{
  return 0xD000000000000017;
}

uint64_t sub_1B1ECFCD0()
{
  return type metadata accessor for QuotientNode(0);
}

uint64_t type metadata accessor for QuotientNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF602F0);
}

uint64_t sub_1B1ECFCEC()
{
  return 1685015878;
}

unint64_t sub_1B1ECFCFC()
{
  return 0x8000000000000020;
}

uint64_t sub_1B1ECFD08(char a1)
{
  uint64_t *v1;
  uint64_t v3;
  char v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v9;
  unint64_t v10;

  v3 = *v1;
  v4 = a1 & 1;
  v5 = v1[3];
  v6 = *(_QWORD *)(v5 + 32);
  sub_1B1BCCD2C(v5);
  sub_1B1B632F0(v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B1D750D8(v6, (uint64_t)&v9, 0.0);
  sub_1B1FF3F6C(v6, (uint64_t)&v9, v4, v3, (uint64_t)&off_1E63A7668);
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v9);
  if ((a1 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    sub_1B1B28D2C(v6);
    return 0x2C302528646F6D66;
  }
  else
  {
    v7 = 0xD000000000000011;
    if (v6 >> 60 == 1 && *(_QWORD *)(v6 + 24) >> 60 != 1)
    {
      v9 = 0;
      v10 = 0xE000000000000000;
      sub_1B2229430();
      swift_bridgeObjectRelease();
      v9 = 0x656C65735F786676;
      v10 = 0xEB00000000287463;
      sub_1B2228890();
      swift_bridgeObjectRelease();
      sub_1B2228890();
      sub_1B2228890();
      sub_1B2228890();
      sub_1B1B28D2C(v6);
      return v9;
    }
    else
    {
      swift_bridgeObjectRelease();
      sub_1B1B28D2C(v6);
    }
  }
  return v7;
}

uint64_t sub_1B1ECFEEC()
{
  return type metadata accessor for FModNode(0);
}

uint64_t type metadata accessor for FModNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF60300);
}

uint64_t sub_1B1ECFF08()
{
  return 7235917;
}

uint64_t sub_1B1ECFF18(char a1)
{
  if ((a1 & 1) != 0)
    return 0x202C3025286E696DLL;
  else
    return 0x286E696D5F786676;
}

uint64_t sub_1B1ECFF64()
{
  return type metadata accessor for MinNode(0);
}

uint64_t type metadata accessor for MinNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF60310);
}

uint64_t sub_1B1ECFF80()
{
  return 7889229;
}

uint64_t sub_1B1ECFF90(char a1)
{
  if ((a1 & 1) != 0)
    return 0x202C30252878616DLL;
  else
    return 0x2878616D5F786676;
}

uint64_t sub_1B1ECFFDC()
{
  return type metadata accessor for MaxNode(0);
}

uint64_t type metadata accessor for MaxNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF60320);
}

uint64_t sub_1B1ECFFF8()
{
  return 7827280;
}

uint64_t sub_1B1ED0008()
{
  return 0x28776F705F786676;
}

uint64_t sub_1B1ED002C()
{
  return type metadata accessor for PowNode(0);
}

uint64_t type metadata accessor for PowNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF60330);
}

uint64_t sub_1B1ED0048()
{
  return 1851872321;
}

unint64_t sub_1B1ED0058()
{
  return 0xD000000000000011;
}

uint64_t sub_1B1ED0074()
{
  return type metadata accessor for ATan2Node(0);
}

uint64_t type metadata accessor for ATan2Node(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF60340);
}

uint64_t sub_1B1ED0090()
{
  return 1885697107;
}

unint64_t sub_1B1ED00A0()
{
  return 0xD000000000000010;
}

uint64_t sub_1B1ED00BC()
{
  return type metadata accessor for StepNode(0);
}

uint64_t type metadata accessor for StepNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF60350);
}

uint64_t sub_1B1ED00D8()
{
  return 0x65636E6174736944;
}

unint64_t sub_1B1ED00F0()
{
  return 0x8000000000000028;
}

unint64_t sub_1B1ED00FC()
{
  return 0xD000000000000014;
}

uint64_t sub_1B1ED0118()
{
  return type metadata accessor for DistanceNode(0);
}

uint64_t type metadata accessor for DistanceNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF60360);
}

uint64_t sub_1B1ED0134()
{
  return 0x65636E6174736944;
}

unint64_t sub_1B1ED0158()
{
  return 0xD00000000000001CLL;
}

uint64_t sub_1B1ED0174()
{
  return type metadata accessor for DistanceSquaredNode(0);
}

uint64_t type metadata accessor for DistanceSquaredNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF60370);
}

uint64_t sub_1B1ED0190()
{
  return 0x74736F6D6C417349;
}

unint64_t sub_1B1ED01B4()
{
  return 0xD00000000000001BLL;
}

uint64_t sub_1B1ED01D0()
{
  return type metadata accessor for IsAlmostEqualNode(0);
}

uint64_t type metadata accessor for IsAlmostEqualNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF60380);
}

uint64_t sub_1B1ED01EC()
{
  return 0x6F725073736F7243;
}

uint64_t sub_1B1ED020C()
{
  uint64_t v0;
  uint64_t v1;

  v0 = swift_allocObject();
  v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_1B22847D0;
  *(_QWORD *)(v0 + 16) = v1 | 0x1000000000000000;
  return v0 | 0x6000000000000000;
}

uint64_t sub_1B1ED0268(char a1)
{
  if ((a1 & 1) != 0)
    return 0x30252873736F7263;
  else
    return 0xD000000000000012;
}

uint64_t sub_1B1ED02B0()
{
  return type metadata accessor for CrossProductNode(0);
}

uint64_t type metadata accessor for CrossProductNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF60390);
}

uint64_t sub_1B1ED02CC()
{
  return 0x75646F7250746F44;
}

uint64_t sub_1B1ED02E8(char a1)
{
  if ((a1 & 1) != 0)
    return 0x202C302528746F64;
  else
    return 0xD000000000000010;
}

uint64_t sub_1B1ED032C()
{
  return type metadata accessor for DotProductNode(0);
}

uint64_t type metadata accessor for DotProductNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF603A0);
}

uint64_t sub_1B1ED0348()
{
  return 0x71536874676E654CLL;
}

uint64_t sub_1B1ED036C(char a1)
{
  if ((a1 & 1) != 0)
    return 0x202C302528746F64;
  else
    return 0xD000000000000010;
}

uint64_t sub_1B1ED03B0()
{
  return type metadata accessor for LengthSquaredNode(0);
}

uint64_t type metadata accessor for LengthSquaredNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF603B0);
}

double sub_1B1ED03CC@<D0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double result;
  uint64_t v10;

  sub_1B1E58F20();
  v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_1B226D240;
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)(v3 + 32) = v4 | 0x4000000000000000;
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1B226D240;
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = 0;
  *(_QWORD *)(v5 + 32) = v6 | 0x4000000000000000;
  v7 = (*(uint64_t (**)(void))(*(_QWORD *)v1 + 256))();
  v8 = swift_allocObject();
  *(_QWORD *)&result = 2;
  *(_OWORD *)(v8 + 16) = xmmword_1B226CD10;
  *(_QWORD *)(v8 + 32) = v7;
  *(_QWORD *)(v8 + 40) = 0x8000000000000000;
  *a1 = v3;
  a1[1] = v5;
  v10 = MEMORY[0x1E0DEE9D8];
  a1[2] = v8;
  a1[3] = v10;
  a1[4] = v10;
  a1[5] = v10;
  return result;
}

double sub_1B1ED04D0@<D0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double result;
  uint64_t v12;

  sub_1B1E58F20();
  v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_1B226E100;
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)(v3 + 32) = v4 | 0x4000000000000000;
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = 0;
  *(_QWORD *)(v3 + 40) = v5 | 0x4000000000000000;
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = 0;
  *(_QWORD *)(v3 + 48) = v6 | 0x4000000000000000;
  v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_1B226D240;
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = 0;
  *(_QWORD *)(v7 + 32) = v8 | 0x4000000000000000;
  v9 = (*(uint64_t (**)(void))(*(_QWORD *)v1 + 256))();
  v10 = swift_allocObject();
  *(_QWORD *)&result = 2;
  *(_OWORD *)(v10 + 16) = xmmword_1B226CD10;
  *(_QWORD *)(v10 + 32) = v9;
  *(_QWORD *)(v10 + 40) = 0x8000000000000000;
  *a1 = v3;
  a1[1] = v7;
  v12 = MEMORY[0x1E0DEE9D8];
  a1[2] = v10;
  a1[3] = v12;
  a1[4] = v12;
  a1[5] = v12;
  return result;
}

uint64_t sub_1B1ED0604()
{
  return type metadata accessor for ArithmeticTernaryOperatorNode(0);
}

uint64_t type metadata accessor for ArithmeticTernaryOperatorNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF603C0);
}

uint64_t sub_1B1ED0620()
{
  return 862873933;
}

unint64_t sub_1B1ED0630(char a1)
{
  if ((a1 & 1) != 0)
    return 0xD000000000000010;
  else
    return 0xD00000000000001CLL;
}

uint64_t sub_1B1ED066C()
{
  return type metadata accessor for Min3Node(0);
}

uint64_t type metadata accessor for Min3Node(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF603D0);
}

uint64_t sub_1B1ED0688()
{
  return 863527245;
}

unint64_t sub_1B1ED0698(char a1)
{
  if ((a1 & 1) != 0)
    return 0xD000000000000010;
  else
    return 0xD00000000000001CLL;
}

uint64_t sub_1B1ED06D4()
{
  return type metadata accessor for Max3Node(0);
}

uint64_t type metadata accessor for Max3Node(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF603E0);
}

uint64_t sub_1B1ED06F0()
{
  return 0x745368746F6F6D53;
}

unint64_t sub_1B1ED070C()
{
  return 0xD00000000000001ALL;
}

uint64_t sub_1B1ED0728()
{
  return type metadata accessor for SmoothStepNode(0);
}

uint64_t type metadata accessor for SmoothStepNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF603F0);
}

uint64_t sub_1B1ED0744()
{
  return 0x6464416C754DLL;
}

unint64_t sub_1B1ED0758()
{
  return 0xD000000000000016;
}

uint64_t sub_1B1ED0774()
{
  return type metadata accessor for MulAddNode(0);
}

uint64_t type metadata accessor for MulAddNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF60400);
}

uint64_t sub_1B1ED0790()
{
  return 0x706D616C43;
}

unint64_t sub_1B1ED07A4()
{
  return 0xD000000000000015;
}

uint64_t sub_1B1ED07C0()
{
  return type metadata accessor for ClampNode(0);
}

uint64_t type metadata accessor for ClampNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF60410);
}

uint64_t sub_1B1ED07DC()
{
  return type metadata accessor for ArithmeticUnaryOperatorNode(0);
}

uint64_t type metadata accessor for ArithmeticUnaryOperatorNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF60420);
}

uint64_t sub_1B1ED07F8()
{
  return 0x6E61696461526F54;
}

unint64_t sub_1B1ED0814()
{
  return 0xD000000000000016;
}

uint64_t sub_1B1ED0830()
{
  return type metadata accessor for ToRadiansNode(0);
}

uint64_t type metadata accessor for ToRadiansNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF60430);
}

uint64_t sub_1B1ED084C()
{
  return 0x6565726765446F54;
}

uint64_t sub_1B1ED0868()
{
  uint64_t v0;

  v0 = swift_allocObject();
  *(_QWORD *)(v0 + 16) = 0x8000000000000050;
  return v0 | 0x6000000000000000;
}

unint64_t sub_1B1ED089C()
{
  return 0xD000000000000016;
}

uint64_t sub_1B1ED08B8()
{
  return type metadata accessor for ToDegreesNode(0);
}

uint64_t type metadata accessor for ToDegreesNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF60440);
}

uint64_t sub_1B1ED08D4()
{
  return 1953657171;
}

uint64_t sub_1B1ED08E4()
{
  return 0x747271735F786676;
}

uint64_t sub_1B1ED0904()
{
  return type metadata accessor for SqrtNode(0);
}

uint64_t type metadata accessor for SqrtNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF60450);
}

uint64_t sub_1B1ED0920()
{
  return 0x7463617246;
}

uint64_t sub_1B1ED0934()
{
  return 0x636172665F786676;
}

uint64_t sub_1B1ED0958()
{
  return type metadata accessor for FractNode(0);
}

uint64_t type metadata accessor for FractNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF60460);
}

uint64_t sub_1B1ED0974()
{
  return 0x73756E694D656E4FLL;
}

uint64_t sub_1B1ED098C(char a1)
{
  uint64_t *v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[4];

  v2 = *v1;
  v3 = a1 & 1;
  v4 = v1[3];
  v5 = *(_QWORD *)(v4 + 32);
  sub_1B1BCCD2C(v4);
  sub_1B1B632F0(v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B1D750D8(v5, (uint64_t)v10, 1.0);
  v6 = sub_1B1FF3F6C(v5, (uint64_t)v10, v3, v2, (uint64_t)&off_1E63A7668);
  v8 = v7;
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v10);
  swift_bridgeObjectRelease();
  v10[0] = v6;
  v10[1] = v8;
  sub_1B2228890();
  sub_1B1B28D2C(v5);
  return v10[0];
}

uint64_t sub_1B1ED0A60()
{
  return type metadata accessor for OneMinusNode(0);
}

uint64_t type metadata accessor for OneMinusNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF60470);
}

uint64_t sub_1B1ED0A7C()
{
  return 846688080;
}

uint64_t sub_1B1ED0A8C()
{
  return 0x32776F705F786676;
}

uint64_t sub_1B1ED0AAC()
{
  return type metadata accessor for Pow2Node(0);
}

uint64_t type metadata accessor for Pow2Node(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF60480);
}

uint64_t sub_1B1ED0AC8()
{
  return 863465296;
}

uint64_t sub_1B1ED0AD8()
{
  return 0x33776F705F786676;
}

uint64_t sub_1B1ED0AF8()
{
  return type metadata accessor for Pow3Node(0);
}

uint64_t type metadata accessor for Pow3Node(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF60490);
}

uint64_t sub_1B1ED0B14()
{
  return 0x646E756F52;
}

uint64_t sub_1B1ED0B28(char a1)
{
  if ((a1 & 1) != 0)
    return 0x302528646E756F72;
  else
    return 0x252866646E756F72;
}

uint64_t sub_1B1ED0B68()
{
  return type metadata accessor for RoundNode(0);
}

uint64_t type metadata accessor for RoundNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF604A0);
}

uint64_t sub_1B1ED0B84()
{
  return 1852270931;
}

uint64_t sub_1B1ED0B94()
{
  return 0x6E6769735F786676;
}

uint64_t sub_1B1ED0BB4()
{
  return type metadata accessor for SignNode(0);
}

uint64_t type metadata accessor for SignNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF604B0);
}

uint64_t sub_1B1ED0BD0()
{
  return 7561793;
}

uint64_t sub_1B1ED0BE0(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  uint64_t v6;

  v2 = 0x287362615F786676;
  if ((a1 & 1) != 0)
  {
    v3 = *(_QWORD *)(v1 + 24);
    v4 = *(_QWORD *)(v3 + 32);
    sub_1B1BCCD2C(v3);
    sub_1B1B632F0(v4);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v5 = v4 + 0x7FFFFFFFFFFFFFD0 > 0x10 || ((1 << (v4 - 48)) & 0x10101) == 0;
    v6 = 0x29302528736261;
    if (v5)
      v6 = 0x287362615F786676;
    if (v4 >> 60 == 8)
      v2 = v6;
    sub_1B1B28D2C(v4);
  }
  return v2;
}

uint64_t sub_1B1ED0CB8()
{
  return type metadata accessor for AbsNode(0);
}

uint64_t type metadata accessor for AbsNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF604C0);
}

uint64_t sub_1B1ED0CD4()
{
  return 0x726F6F6C46;
}

uint64_t sub_1B1ED0CE8()
{
  return 0x6F6F6C665F786676;
}

uint64_t sub_1B1ED0D0C()
{
  return type metadata accessor for FloorNode(0);
}

uint64_t type metadata accessor for FloorNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF604D0);
}

uint64_t sub_1B1ED0D28()
{
  return 0x28676F6C5F786676;
}

uint64_t sub_1B1ED0D48()
{
  return type metadata accessor for LogNode(0);
}

uint64_t type metadata accessor for LogNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF604E0);
}

uint64_t sub_1B1ED0D64()
{
  return 7370821;
}

uint64_t sub_1B1ED0D74()
{
  return 0x287078655F786676;
}

uint64_t sub_1B1ED0D94()
{
  return type metadata accessor for ExpNode(0);
}

uint64_t type metadata accessor for ExpNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF604F0);
}

uint64_t sub_1B1ED0DB0()
{
  return 846231621;
}

uint64_t sub_1B1ED0DC0()
{
  return 0x327078655F786676;
}

uint64_t sub_1B1ED0DE0()
{
  return type metadata accessor for Exp2Node(0);
}

uint64_t type metadata accessor for Exp2Node(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF60500);
}

uint64_t sub_1B1ED0DFC()
{
  return 0x3031707845;
}

uint64_t sub_1B1ED0E10()
{
  return 0x317078655F786676;
}

uint64_t sub_1B1ED0E34()
{
  return type metadata accessor for Exp10Node(0);
}

uint64_t type metadata accessor for Exp10Node(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF60510);
}

uint64_t sub_1B1ED0E50()
{
  return 7565123;
}

uint64_t sub_1B1ED0E60()
{
  return 0x28736F635F786676;
}

uint64_t sub_1B1ED0E80()
{
  return type metadata accessor for CosNode(0);
}

uint64_t type metadata accessor for CosNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF60520);
}

uint64_t sub_1B1ED0E9C()
{
  return 7235923;
}

uint64_t sub_1B1ED0EAC()
{
  return 0x286E69735F786676;
}

uint64_t sub_1B1ED0ECC()
{
  return type metadata accessor for SinNode(0);
}

uint64_t type metadata accessor for SinNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF60530);
}

uint64_t sub_1B1ED0EE8()
{
  return 1852396353;
}

uint64_t sub_1B1ED0EF8()
{
  return 0x6E6973615F786676;
}

uint64_t sub_1B1ED0F18()
{
  return type metadata accessor for ASinNode(0);
}

uint64_t type metadata accessor for ASinNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF60540);
}

uint64_t sub_1B1ED0F34()
{
  return 1936671553;
}

uint64_t sub_1B1ED0F44()
{
  return 0x736F63615F786676;
}

uint64_t sub_1B1ED0F64()
{
  return type metadata accessor for ACosNode(0);
}

uint64_t type metadata accessor for ACosNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF60550);
}

uint64_t sub_1B1ED0F80()
{
  return 1818846531;
}

uint64_t sub_1B1ED0F90()
{
  return 0x6C6965635F786676;
}

uint64_t sub_1B1ED0FB0()
{
  return type metadata accessor for CeilNode(0);
}

uint64_t type metadata accessor for CeilNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF60560);
}

uint64_t sub_1B1ED0FCC()
{
  return 7233876;
}

uint64_t sub_1B1ED0FDC()
{
  return 0x286E61745F786676;
}

uint64_t sub_1B1ED0FFC()
{
  return type metadata accessor for TanNode(0);
}

uint64_t type metadata accessor for TanNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF60570);
}

uint64_t sub_1B1ED1018()
{
  return 0x6E6174615F786676;
}

uint64_t sub_1B1ED1038()
{
  return type metadata accessor for ATanNode(0);
}

uint64_t type metadata accessor for ATanNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF60580);
}

uint64_t sub_1B1ED1054()
{
  return 0x6874676E654CLL;
}

uint64_t sub_1B1ED1068(char a1)
{
  if ((a1 & 1) != 0)
    return 0x25286874676E656CLL;
  else
    return 0x6E656C5F646D6973;
}

uint64_t sub_1B1ED10B0()
{
  return type metadata accessor for LengthNode(0);
}

uint64_t type metadata accessor for LengthNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF60590);
}

uint64_t sub_1B1ED10CC()
{
  return 0x74736F6D6C417349;
}

unint64_t sub_1B1ED10EC()
{
  return 0xD000000000000016;
}

uint64_t sub_1B1ED1108()
{
  return type metadata accessor for IsAlmostZeroNode(0);
}

uint64_t type metadata accessor for IsAlmostZeroNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF605A0);
}

unint64_t sub_1B1ED1124()
{
  return 0xD000000000000010;
}

uint64_t sub_1B1ED1140()
{
  return type metadata accessor for SaturateNode(0);
}

uint64_t type metadata accessor for SaturateNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF605B0);
}

uint64_t sub_1B1ED115C()
{
  return 0x615364656E676953;
}

uint64_t sub_1B1ED1180(char a1)
{
  uint64_t *v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v7[4];

  v2 = *v1;
  v3 = a1 & 1;
  v4 = v1[3];
  v5 = *(_QWORD *)(v4 + 32);
  sub_1B1BCCD2C(v4);
  sub_1B1B632F0(v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B1D750D8(v5, (uint64_t)v7, 1.0);
  sub_1B1FF3F6C(v5, (uint64_t)v7, v3, v2, (uint64_t)&off_1E63A7668);
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v7);
  sub_1B1D750D8(v5, (uint64_t)v7, -1.0);
  sub_1B1FF3F6C(v5, (uint64_t)v7, v3, v2, (uint64_t)&off_1E63A7668);
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v7);
  v7[0] = 0;
  v7[1] = 0xE000000000000000;
  sub_1B2229430();
  swift_bridgeObjectRelease();
  strcpy((char *)v7, "vfx_clamp(%0, ");
  HIBYTE(v7[1]) = -18;
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  sub_1B1B28D2C(v5);
  return v7[0];
}

uint64_t sub_1B1ED1304()
{
  return type metadata accessor for SignedSaturateNode(0);
}

uint64_t type metadata accessor for SignedSaturateNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF605C0);
}

uint64_t sub_1B1ED1320()
{
  return 0x7A696C616D726F4ELL;
}

unint64_t sub_1B1ED133C()
{
  return 0xD000000000000018;
}

uint64_t sub_1B1ED1358()
{
  return type metadata accessor for NormalizedNode(0);
}

uint64_t type metadata accessor for NormalizedNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF605D0);
}

unint64_t sub_1B1ED1374()
{
  return 0xD000000000000016;
}

uint64_t sub_1B1ED1390()
{
  return type metadata accessor for QNormalizedNode(0);
}

uint64_t type metadata accessor for QNormalizedNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF605E0);
}

uint64_t sub_1B1ED13AC()
{
  return 0x746167756A6E6F43;
}

uint64_t sub_1B1ED13C8()
{
  uint64_t v0;

  v0 = swift_allocObject();
  *(_QWORD *)(v0 + 16) = 0x8000000000000028;
  return v0 | 0x6000000000000000;
}

unint64_t sub_1B1ED13FC()
{
  return 0xD000000000000016;
}

uint64_t sub_1B1ED1418()
{
  return type metadata accessor for ConjugateNode(0);
}

uint64_t type metadata accessor for ConjugateNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF605F0);
}

uint64_t sub_1B1ED1434()
{
  return 28236;
}

uint64_t sub_1B1ED1440()
{
  return 0x746175715F786676;
}

uint64_t sub_1B1ED1464()
{
  return type metadata accessor for QLnNode(0);
}

uint64_t type metadata accessor for QLnNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF60600);
}

uint64_t sub_1B1ED1480()
{
  return type metadata accessor for QExpNode(0);
}

uint64_t type metadata accessor for QExpNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF60610);
}

uint64_t sub_1B1ED149C()
{
  return 0x676E4172656C7545;
}

double sub_1B1ED14BC@<D0>(uint64_t *a1@<X8>)
{
  double result;

  *(_QWORD *)&result = sub_1B1ED165C((uint64_t)&unk_1E6383B68, a1, (__n128)xmmword_1B22847D0).n128_u64[0];
  return result;
}

unint64_t sub_1B1ED14D0()
{
  return 0xD000000000000015;
}

uint64_t sub_1B1ED14EC()
{
  return type metadata accessor for EulerAnglesNode(0);
}

uint64_t type metadata accessor for EulerAnglesNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF60620);
}

uint64_t sub_1B1ED1508()
{
  return 0x6C676E4173697841;
}

double sub_1B1ED1524@<D0>(uint64_t *a1@<X8>)
{
  double result;

  *(_QWORD *)&result = sub_1B1ED165C((uint64_t)&unk_1E6379610, a1, (__n128)xmmword_1B22847C0).n128_u64[0];
  return result;
}

unint64_t sub_1B1ED1538()
{
  return 0xD00000000000001ALL;
}

uint64_t sub_1B1ED1554()
{
  return type metadata accessor for AxisAngleNode(0);
}

uint64_t type metadata accessor for AxisAngleNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF60630);
}

uint64_t sub_1B1ED1570()
{
  return 1936291905;
}

double sub_1B1ED1580@<D0>(uint64_t *a1@<X8>)
{
  double result;

  *(_QWORD *)&result = sub_1B1ED165C((uint64_t)&unk_1E63BE590, a1, (__n128)xmmword_1B22847D0).n128_u64[0];
  return result;
}

unint64_t sub_1B1ED1594()
{
  return 0xD000000000000011;
}

uint64_t sub_1B1ED15B0()
{
  return type metadata accessor for AxisNode(0);
}

uint64_t type metadata accessor for AxisNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF60640);
}

uint64_t sub_1B1ED15CC()
{
  return 0x656C676E41;
}

uint64_t sub_1B1ED15E0@<X0>(uint64_t *a1@<X8>)
{
  return sub_1B1ED3600(0x8000000000000050, (uint64_t)&unk_1E636ECC0, a1);
}

unint64_t sub_1B1ED15F4()
{
  return 0xD000000000000012;
}

uint64_t sub_1B1ED1610()
{
  return type metadata accessor for QAngleNode(0);
}

uint64_t type metadata accessor for QAngleNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF60650);
}

uint64_t sub_1B1ED162C()
{
  return 0x78416C616D726F4ELL;
}

double sub_1B1ED1648@<D0>(uint64_t *a1@<X8>)
{
  double result;

  *(_QWORD *)&result = sub_1B1ED165C((uint64_t)&unk_1E637FFC0, a1, (__n128)xmmword_1B22847D0).n128_u64[0];
  return result;
}

__n128 sub_1B1ED165C@<Q0>(uint64_t a1@<X0>, uint64_t *a2@<X8>, __n128 a3@<Q0>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 result;
  uint64_t v11;

  sub_1B1E58F20();
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1B226D240;
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = 0x8000000000000028;
  *(_QWORD *)(v5 + 32) = v6 | 0x6000000000000000;
  v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_1B226D240;
  v8 = swift_allocObject();
  v9 = swift_allocObject();
  result = a3;
  *(__n128 *)(v9 + 16) = a3;
  *(_QWORD *)(v8 + 16) = v9 | 0x1000000000000000;
  *(_QWORD *)(v7 + 32) = v8 | 0x6000000000000000;
  *a2 = v5;
  a2[1] = v7;
  v11 = MEMORY[0x1E0DEE9D8];
  a2[2] = a1;
  a2[3] = v11;
  a2[4] = v11;
  a2[5] = v11;
  return result;
}

unint64_t sub_1B1ED1760()
{
  return 0xD000000000000024;
}

uint64_t sub_1B1ED177C()
{
  return type metadata accessor for NormalAxisNode(0);
}

uint64_t type metadata accessor for NormalAxisNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF60660);
}

uint64_t sub_1B1ED1798()
{
  return 0x7553656375646552;
}

uint64_t sub_1B1ED17B4@<X0>(uint64_t *a1@<X8>)
{
  return sub_1B1ED1820((uint64_t)&unk_1E637CCD8, a1);
}

unint64_t sub_1B1ED17C0()
{
  return 0xD000000000000012;
}

uint64_t sub_1B1ED17DC()
{
  return type metadata accessor for ReduceSumNode(0);
}

uint64_t type metadata accessor for ReduceSumNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF60670);
}

uint64_t sub_1B1ED17F8()
{
  return 0x754D656375646552;
}

uint64_t sub_1B1ED1814@<X0>(uint64_t *a1@<X8>)
{
  return sub_1B1ED1820((uint64_t)&unk_1E637CCA8, a1);
}

uint64_t sub_1B1ED1820@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  sub_1B1E58F20();
  v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1B226D240;
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = 0;
  *(_QWORD *)(v4 + 32) = v5 | 0x4000000000000000;
  v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_1B226D240;
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = 0x8000000000000050;
  *(_QWORD *)(v6 + 32) = result | 0x6000000000000000;
  *a2 = v4;
  a2[1] = v6;
  v8 = MEMORY[0x1E0DEE9D8];
  a2[2] = a1;
  a2[3] = v8;
  a2[4] = v8;
  a2[5] = v8;
  return result;
}

unint64_t sub_1B1ED18F4()
{
  return 0xD000000000000012;
}

uint64_t sub_1B1ED1910()
{
  return type metadata accessor for ReduceMulNode(0);
}

uint64_t type metadata accessor for ReduceMulNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF60680);
}

unint64_t sub_1B1ED192C()
{
  return 0xD000000000000010;
}

__n128 sub_1B1ED1948@<Q0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 result;
  uint64_t v11;

  sub_1B1E58F20();
  v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_1B226D240;
  v3 = swift_allocObject();
  v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1B22847D0;
  *(_QWORD *)(v3 + 16) = v4 | 0x1000000000000000;
  *(_QWORD *)(v2 + 32) = v3 | 0x6000000000000000;
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1B226CD10;
  v6 = swift_allocObject();
  v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_1B22847D0;
  *(_QWORD *)(v6 + 16) = v7 | 0x1000000000000000;
  *(_QWORD *)(v5 + 32) = v6 | 0x6000000000000000;
  v8 = swift_allocObject();
  v9 = swift_allocObject();
  result = (__n128)xmmword_1B22847D0;
  *(_OWORD *)(v9 + 16) = xmmword_1B22847D0;
  *(_QWORD *)(v8 + 16) = v9 | 0x1000000000000000;
  *(_QWORD *)(v5 + 40) = v8 | 0x6000000000000000;
  *a1 = v2;
  a1[1] = v5;
  v11 = MEMORY[0x1E0DEE9D8];
  a1[2] = (uint64_t)&unk_1E639BF40;
  a1[3] = v11;
  a1[4] = v11;
  a1[5] = v11;
  return result;
}

unint64_t sub_1B1ED1AAC()
{
  return 0xD0000000000000B0;
}

uint64_t sub_1B1ED1AC8()
{
  return type metadata accessor for OrthonormalBasisNode(0);
}

uint64_t type metadata accessor for OrthonormalBasisNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF60690);
}

uint64_t sub_1B1ED1AE4()
{
  return 7891277;
}

double sub_1B1ED1AF4@<D0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double result;
  uint64_t v12;

  sub_1B1E58F20();
  v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_1B226E100;
  v3 = swift_allocObject();
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)(v2 + 32) = v3 | 0x4000000000000000;
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)(v2 + 40) = v4 | 0x4000000000000000;
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = 1;
  *(_QWORD *)(v2 + 48) = v5 | 0x4000000000000000;
  v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_1B226D240;
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = 0;
  *(_QWORD *)(v6 + 32) = v7 | 0x4000000000000000;
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = 0x8000000000000050;
  v9 = v8 | 0x6000000000000000;
  v10 = swift_allocObject();
  *(_QWORD *)&result = 2;
  *(_OWORD *)(v10 + 16) = xmmword_1B226CD10;
  *(_QWORD *)(v10 + 32) = 0x8000000000000020;
  *(_QWORD *)(v10 + 40) = v9;
  *a1 = v2;
  a1[1] = v6;
  v12 = MEMORY[0x1E0DEE9D8];
  a1[2] = v10;
  a1[3] = v12;
  a1[4] = v12;
  a1[5] = v12;
  return result;
}

unint64_t sub_1B1ED1C40()
{
  return 0xD000000000000013;
}

uint64_t sub_1B1ED1C5C()
{
  return type metadata accessor for MixNode(0);
}

uint64_t type metadata accessor for MixNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF606A0);
}

uint64_t sub_1B1ED1C78()
{
  return 0x726F66736E617254;
}

double sub_1B1ED1C94@<D0>(uint64_t *a1@<X8>)
{
  double result;

  *(_QWORD *)&result = sub_1B1ED2EC4((uint64_t)&unk_1E63804E0, a1).n128_u64[0];
  return result;
}

unint64_t sub_1B1ED1CA0()
{
  return 0xD00000000000001ELL;
}

uint64_t sub_1B1ED1CBC()
{
  return type metadata accessor for QTransformNode(0);
}

uint64_t type metadata accessor for QTransformNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF606B0);
}

uint64_t sub_1B1ED1CD8@<X0>(uint64_t *a1@<X8>)
{
  return sub_1B1ED3600(0x8000000000000050, (uint64_t)&unk_1E6371BB0, a1);
}

unint64_t sub_1B1ED1CEC()
{
  return 0xD000000000000014;
}

uint64_t sub_1B1ED1D08()
{
  return type metadata accessor for QLengthNode(0);
}

uint64_t type metadata accessor for QLengthNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF606C0);
}

uint64_t sub_1B1ED1D24()
{
  return 0x747265766E49;
}

uint64_t sub_1B1ED1D38@<X0>(uint64_t *a1@<X8>)
{
  return sub_1B1ED1DF8((uint64_t)&unk_1E6370D80, a1);
}

uint64_t sub_1B1ED1D44()
{
  return 0x65766E695F786676;
}

uint64_t sub_1B1ED1D68()
{
  return type metadata accessor for InverseNode(0);
}

uint64_t type metadata accessor for InverseNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF606D0);
}

uint64_t sub_1B1ED1D84@<X0>(uint64_t *a1@<X8>)
{
  return sub_1B1ED3600(0x8000000000000028, (uint64_t)&unk_1E63761D0, a1);
}

unint64_t sub_1B1ED1D98()
{
  return 0xD000000000000014;
}

uint64_t sub_1B1ED1DB4()
{
  return type metadata accessor for QInverseNode(0);
}

uint64_t type metadata accessor for QInverseNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF606E0);
}

uint64_t sub_1B1ED1DD0()
{
  return 0x736F70736E617254;
}

uint64_t sub_1B1ED1DEC@<X0>(uint64_t *a1@<X8>)
{
  return sub_1B1ED1DF8((uint64_t)&unk_1E637D7E8, a1);
}

uint64_t sub_1B1ED1DF8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  sub_1B1E58F20();
  v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1B226D240;
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = 0;
  *(_QWORD *)(v4 + 32) = v5 | 0x4000000000000000;
  v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_1B226D240;
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(v6 + 32) = result | 0x4000000000000000;
  *a2 = v4;
  a2[1] = v6;
  v8 = MEMORY[0x1E0DEE9D8];
  a2[2] = a1;
  a2[3] = v8;
  a2[4] = v8;
  a2[5] = v8;
  return result;
}

unint64_t sub_1B1ED1ECC()
{
  return 0xD000000000000011;
}

uint64_t sub_1B1ED1EE8()
{
  return type metadata accessor for TransposeNode(0);
}

uint64_t type metadata accessor for TransposeNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF606F0);
}

uint64_t sub_1B1ED1F04()
{
  return 0x726F66736E617254;
}

double sub_1B1ED1F28@<D0>(uint64_t *a1@<X8>)
{
  double result;

  *(_QWORD *)&result = sub_1B1ED24B4(4, (uint64_t)&unk_1E639AC38, a1, (__n128)xmmword_1B22847C0, (__n128)xmmword_1B22847D0).n128_u64[0];
  return result;
}

unint64_t sub_1B1ED1F48()
{
  return 0xD00000000000001CLL;
}

uint64_t sub_1B1ED1F64()
{
  return type metadata accessor for TransformNormalNode(0);
}

uint64_t type metadata accessor for TransformNormalNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF60700);
}

unint64_t sub_1B1ED1F80()
{
  return 0xD000000000000011;
}

double sub_1B1ED1F9C@<D0>(uint64_t *a1@<X8>)
{
  double result;

  *(_QWORD *)&result = sub_1B1ED24B4(3, (uint64_t)&unk_1E63A9AB8, a1, (__n128)xmmword_1B22847D0, (__n128)xmmword_1B2286450).n128_u64[0];
  return result;
}

unint64_t sub_1B1ED1FBC()
{
  return 0xD00000000000001ELL;
}

uint64_t sub_1B1ED1FD8()
{
  return type metadata accessor for TransformPosition3Node(0);
}

uint64_t type metadata accessor for TransformPosition3Node(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF60710);
}

double sub_1B1ED1FF4@<D0>(uint64_t *a1@<X8>)
{
  double result;

  *(_QWORD *)&result = sub_1B1ED24B4(4, (uint64_t)&unk_1E63A9AE8, a1, (__n128)xmmword_1B22847C0, (__n128)xmmword_1B22847D0).n128_u64[0];
  return result;
}

uint64_t sub_1B1ED2014()
{
  return type metadata accessor for TransformPosition4Node(0);
}

uint64_t type metadata accessor for TransformPosition4Node(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF60720);
}

double sub_1B1ED2030@<D0>(uint64_t *a1@<X8>)
{
  double result;

  *(_QWORD *)&result = sub_1B1ED24B4(3, (uint64_t)&unk_1E637D7B8, a1, (__n128)xmmword_1B22847D0, (__n128)xmmword_1B2286450).n128_u64[0];
  return result;
}

unint64_t sub_1B1ED2050()
{
  return 0xD000000000000015;
}

uint64_t sub_1B1ED206C()
{
  return type metadata accessor for TransformNode(0);
}

uint64_t type metadata accessor for TransformNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF60730);
}

uint64_t sub_1B1ED2088()
{
  return 0x74616C736E617254;
}

double sub_1B1ED20AC@<D0>(uint64_t *a1@<X8>)
{
  double result;

  *(_QWORD *)&result = sub_1B1ED21D8(3, (uint64_t)&unk_1E639F960, a1, (__n128)xmmword_1B22847D0, (__n128)xmmword_1B2286450).n128_u64[0];
  return result;
}

unint64_t sub_1B1ED20CC()
{
  return 0xD000000000000015;
}

uint64_t sub_1B1ED20E8()
{
  return type metadata accessor for TranslateMatrix3Node(0);
}

uint64_t type metadata accessor for TranslateMatrix3Node(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF60740);
}

double sub_1B1ED2104@<D0>(uint64_t *a1@<X8>)
{
  double result;

  *(_QWORD *)&result = sub_1B1ED21D8(4, (uint64_t)&unk_1E639F990, a1, (__n128)xmmword_1B22847C0, (__n128)xmmword_1B22847D0).n128_u64[0];
  return result;
}

uint64_t sub_1B1ED2124()
{
  return type metadata accessor for TranslateMatrix4Node(0);
}

uint64_t type metadata accessor for TranslateMatrix4Node(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF60750);
}

uint64_t sub_1B1ED2140()
{
  return 0x74614D656C616353;
}

double sub_1B1ED2160@<D0>(uint64_t *a1@<X8>)
{
  double result;

  *(_QWORD *)&result = sub_1B1ED21D8(3, (uint64_t)&unk_1E638A828, a1, (__n128)xmmword_1B22847D0, (__n128)xmmword_1B2286450).n128_u64[0];
  return result;
}

unint64_t sub_1B1ED2180()
{
  return 0xD000000000000011;
}

uint64_t sub_1B1ED219C()
{
  return type metadata accessor for ScaleMatrix3Node(0);
}

uint64_t type metadata accessor for ScaleMatrix3Node(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF60760);
}

double sub_1B1ED21B8@<D0>(uint64_t *a1@<X8>)
{
  double result;

  *(_QWORD *)&result = sub_1B1ED21D8(4, (uint64_t)&unk_1E638A858, a1, (__n128)xmmword_1B22847C0, (__n128)xmmword_1B22847D0).n128_u64[0];
  return result;
}

__n128 sub_1B1ED21D8@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>, __n128 a4@<Q0>, __n128 a5@<Q1>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __n128 result;
  uint64_t v19;

  sub_1B1E58F20();
  v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_1B226CD10;
  v9 = swift_allocObject();
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = a1;
  v11 = swift_allocObject();
  *(__n128 *)(v11 + 16) = a4;
  *(_QWORD *)(v10 + 24) = v11 | 0x1000000000000000;
  *(_QWORD *)(v9 + 16) = v10 | 0x1000000000000000;
  *(_QWORD *)(v8 + 32) = v9 | 0x6000000000000000;
  v12 = swift_allocObject();
  v13 = swift_allocObject();
  *(__n128 *)(v13 + 16) = a5;
  *(_QWORD *)(v12 + 16) = v13 | 0x1000000000000000;
  *(_QWORD *)(v8 + 40) = v12 | 0x6000000000000000;
  v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_1B226D240;
  v15 = swift_allocObject();
  v16 = swift_allocObject();
  *(_QWORD *)(v16 + 16) = a1;
  v17 = swift_allocObject();
  result = a4;
  *(__n128 *)(v17 + 16) = a4;
  *(_QWORD *)(v16 + 24) = v17 | 0x1000000000000000;
  *(_QWORD *)(v15 + 16) = v16 | 0x1000000000000000;
  *(_QWORD *)(v14 + 32) = v15 | 0x6000000000000000;
  *a3 = v8;
  a3[1] = v14;
  v19 = MEMORY[0x1E0DEE9D8];
  a3[2] = a2;
  a3[3] = v19;
  a3[4] = v19;
  a3[5] = v19;
  return result;
}

uint64_t sub_1B1ED2388()
{
  return type metadata accessor for ScaleMatrix4Node(0);
}

uint64_t type metadata accessor for ScaleMatrix4Node(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF60770);
}

uint64_t sub_1B1ED23A4()
{
  return 0x507463656A6F7250;
}

double sub_1B1ED23C8@<D0>(uint64_t *a1@<X8>)
{
  double result;

  *(_QWORD *)&result = sub_1B1ED24B4(4, (uint64_t)&unk_1E6399F18, a1, (__n128)xmmword_1B22847C0, (__n128)xmmword_1B22847D0).n128_u64[0];
  return result;
}

unint64_t sub_1B1ED23E8()
{
  return 0xD00000000000001CLL;
}

uint64_t sub_1B1ED2404()
{
  return type metadata accessor for ProjectPositionNode(0);
}

uint64_t type metadata accessor for ProjectPositionNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF60780);
}

unint64_t sub_1B1ED2420()
{
  return 0xD000000000000012;
}

double sub_1B1ED243C@<D0>(uint64_t *a1@<X8>)
{
  double result;

  *(_QWORD *)&result = sub_1B1ED24B4(3, (uint64_t)&unk_1E63AD108, a1, (__n128)xmmword_1B22847D0, (__n128)xmmword_1B2286450).n128_u64[0];
  return result;
}

unint64_t sub_1B1ED245C()
{
  return 0xD00000000000001FLL;
}

uint64_t sub_1B1ED2478()
{
  return type metadata accessor for TransformDirection3Node(0);
}

uint64_t type metadata accessor for TransformDirection3Node(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF60790);
}

double sub_1B1ED2494@<D0>(uint64_t *a1@<X8>)
{
  double result;

  *(_QWORD *)&result = sub_1B1ED24B4(4, (uint64_t)&unk_1E63AD138, a1, (__n128)xmmword_1B22847C0, (__n128)xmmword_1B22847D0).n128_u64[0];
  return result;
}

__n128 sub_1B1ED24B4@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>, __n128 a4@<Q0>, __n128 a5@<Q1>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 result;
  uint64_t v18;

  sub_1B1E58F20();
  v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_1B226CD10;
  v9 = swift_allocObject();
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = a1;
  v11 = swift_allocObject();
  *(__n128 *)(v11 + 16) = a4;
  *(_QWORD *)(v10 + 24) = v11 | 0x1000000000000000;
  *(_QWORD *)(v9 + 16) = v10 | 0x1000000000000000;
  *(_QWORD *)(v8 + 32) = v9 | 0x6000000000000000;
  v12 = swift_allocObject();
  v13 = swift_allocObject();
  *(__n128 *)(v13 + 16) = a5;
  *(_QWORD *)(v12 + 16) = v13 | 0x1000000000000000;
  *(_QWORD *)(v8 + 40) = v12 | 0x6000000000000000;
  v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_1B226D240;
  v15 = swift_allocObject();
  v16 = swift_allocObject();
  result = a5;
  *(__n128 *)(v16 + 16) = a5;
  *(_QWORD *)(v15 + 16) = v16 | 0x1000000000000000;
  *(_QWORD *)(v14 + 32) = v15 | 0x6000000000000000;
  *a3 = v8;
  a3[1] = v14;
  v18 = MEMORY[0x1E0DEE9D8];
  a3[2] = a2;
  a3[3] = v18;
  a3[4] = v18;
  a3[5] = v18;
  return result;
}

uint64_t sub_1B1ED2644()
{
  return type metadata accessor for TransformDirection4Node(0);
}

uint64_t type metadata accessor for TransformDirection4Node(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF607A0);
}

__n128 sub_1B1ED2660@<Q0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 result;
  uint64_t v13;

  sub_1B1E58F20();
  v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_1B226D240;
  v3 = swift_allocObject();
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = 4;
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1B22847C0;
  *(_QWORD *)(v4 + 24) = v5 | 0x1000000000000000;
  *(_QWORD *)(v3 + 16) = v4 | 0x1000000000000000;
  *(_QWORD *)(v2 + 32) = v3 | 0x6000000000000000;
  v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_1B226E100;
  v7 = swift_allocObject();
  v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_1B22847D0;
  *(_QWORD *)(v7 + 16) = v8 | 0x1000000000000000;
  *(_QWORD *)(v6 + 32) = v7 | 0x6000000000000000;
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = 0x8000000000000028;
  *(_QWORD *)(v6 + 40) = v9 | 0x6000000000000000;
  v10 = swift_allocObject();
  v11 = swift_allocObject();
  result = (__n128)xmmword_1B22847D0;
  *(_OWORD *)(v11 + 16) = xmmword_1B22847D0;
  *(_QWORD *)(v10 + 16) = v11 | 0x1000000000000000;
  *(_QWORD *)(v6 + 48) = v10 | 0x6000000000000000;
  *a1 = v2;
  a1[1] = v6;
  v13 = MEMORY[0x1E0DEE9D8];
  a1[2] = (uint64_t)&unk_1E63BE200;
  a1[3] = v13;
  a1[4] = v13;
  a1[5] = v13;
  return result;
}

unint64_t sub_1B1ED2818()
{
  return 0xD00000000000006DLL;
}

uint64_t sub_1B1ED2834()
{
  return type metadata accessor for TRSNode(0);
}

uint64_t type metadata accessor for TRSNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF607B0);
}

uint64_t sub_1B1ED2850()
{
  return 0x736E617254746547;
}

double sub_1B1ED2874@<D0>(uint64_t *a1@<X8>)
{
  double result;

  *(_QWORD *)&result = sub_1B1ED2D0C(3, (uint64_t)&unk_1E6397E18, a1, (__n128)xmmword_1B22847D0, (__n128)xmmword_1B2286450).n128_u64[0];
  return result;
}

unint64_t sub_1B1ED2894()
{
  return 0xD00000000000001ALL;
}

uint64_t sub_1B1ED28B0()
{
  return type metadata accessor for GetTranslation3Node(0);
}

uint64_t type metadata accessor for GetTranslation3Node(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF607C0);
}

double sub_1B1ED28CC@<D0>(uint64_t *a1@<X8>)
{
  double result;

  *(_QWORD *)&result = sub_1B1ED2D0C(4, (uint64_t)&unk_1E6397E48, a1, (__n128)xmmword_1B22847C0, (__n128)xmmword_1B22847D0).n128_u64[0];
  return result;
}

unint64_t sub_1B1ED28EC()
{
  return 0xD000000000000017;
}

uint64_t sub_1B1ED2908()
{
  return type metadata accessor for GetTranslation4Node(0);
}

uint64_t type metadata accessor for GetTranslation4Node(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF607D0);
}

uint64_t sub_1B1ED2924()
{
  return 0x7461746F52746547;
}

double sub_1B1ED2944@<D0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double result;
  uint64_t v11;

  sub_1B1E58F20();
  v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_1B226D240;
  v3 = swift_allocObject();
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = 4;
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1B22847C0;
  *(_QWORD *)(v4 + 24) = v5 | 0x1000000000000000;
  *(_QWORD *)(v3 + 16) = v4 | 0x1000000000000000;
  *(_QWORD *)(v2 + 32) = v3 | 0x6000000000000000;
  v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_1B226D240;
  v7 = swift_allocObject();
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = 3;
  v9 = swift_allocObject();
  *(_QWORD *)&result = 3;
  *(_OWORD *)(v9 + 16) = xmmword_1B22847D0;
  *(_QWORD *)(v8 + 24) = v9 | 0x1000000000000000;
  *(_QWORD *)(v7 + 16) = v8 | 0x1000000000000000;
  *(_QWORD *)(v6 + 32) = v7 | 0x6000000000000000;
  *a1 = v2;
  a1[1] = v6;
  v11 = MEMORY[0x1E0DEE9D8];
  a1[2] = (uint64_t)&unk_1E6383C08;
  a1[3] = v11;
  a1[4] = v11;
  a1[5] = v11;
  return result;
}

unint64_t sub_1B1ED2ABC()
{
  return 0xD000000000000014;
}

uint64_t sub_1B1ED2AD8()
{
  return type metadata accessor for GetRotationNode(0);
}

uint64_t type metadata accessor for GetRotationNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF607E0);
}

uint64_t sub_1B1ED2AF4()
{
  return 0x6E6F697461746F52;
}

uint64_t sub_1B1ED2B0C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  sub_1B1E58F20();
  v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_1B226D240;
  v3 = swift_allocObject();
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = 4;
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1B22847C0;
  *(_QWORD *)(v4 + 24) = v5 | 0x1000000000000000;
  *(_QWORD *)(v3 + 16) = v4 | 0x1000000000000000;
  *(_QWORD *)(v2 + 32) = v3 | 0x6000000000000000;
  v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_1B226D240;
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = 0x8000000000000028;
  *(_QWORD *)(v6 + 32) = result | 0x6000000000000000;
  *a1 = v2;
  a1[1] = v6;
  v8 = MEMORY[0x1E0DEE9D8];
  a1[2] = (uint64_t)&unk_1E6376820;
  a1[3] = v8;
  a1[4] = v8;
  a1[5] = v8;
  return result;
}

unint64_t sub_1B1ED2C44()
{
  return 0xD00000000000001FLL;
}

uint64_t sub_1B1ED2C60()
{
  return type metadata accessor for RotationNode(0);
}

uint64_t type metadata accessor for RotationNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF607F0);
}

uint64_t sub_1B1ED2C7C()
{
  return 0x656C616353746547;
}

double sub_1B1ED2C94@<D0>(uint64_t *a1@<X8>)
{
  double result;

  *(_QWORD *)&result = sub_1B1ED2D0C(3, (uint64_t)&unk_1E637AFD8, a1, (__n128)xmmword_1B22847D0, (__n128)xmmword_1B2286450).n128_u64[0];
  return result;
}

unint64_t sub_1B1ED2CB4()
{
  return 0xD000000000000014;
}

uint64_t sub_1B1ED2CD0()
{
  return type metadata accessor for GetScale3Node(0);
}

uint64_t type metadata accessor for GetScale3Node(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF60800);
}

double sub_1B1ED2CEC@<D0>(uint64_t *a1@<X8>)
{
  double result;

  *(_QWORD *)&result = sub_1B1ED2D0C(4, (uint64_t)&unk_1E637B008, a1, (__n128)xmmword_1B22847C0, (__n128)xmmword_1B22847D0).n128_u64[0];
  return result;
}

__n128 sub_1B1ED2D0C@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>, __n128 a4@<Q0>, __n128 a5@<Q1>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __n128 result;
  uint64_t v16;

  sub_1B1E58F20();
  v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_1B226D240;
  v9 = swift_allocObject();
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = a1;
  v11 = swift_allocObject();
  *(__n128 *)(v11 + 16) = a4;
  *(_QWORD *)(v10 + 24) = v11 | 0x1000000000000000;
  *(_QWORD *)(v9 + 16) = v10 | 0x1000000000000000;
  *(_QWORD *)(v8 + 32) = v9 | 0x6000000000000000;
  v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_1B226D240;
  v13 = swift_allocObject();
  v14 = swift_allocObject();
  result = a5;
  *(__n128 *)(v14 + 16) = a5;
  *(_QWORD *)(v13 + 16) = v14 | 0x1000000000000000;
  *(_QWORD *)(v12 + 32) = v13 | 0x6000000000000000;
  *a3 = v8;
  a3[1] = v12;
  v16 = MEMORY[0x1E0DEE9D8];
  a3[2] = a2;
  a3[3] = v16;
  a3[4] = v16;
  a3[5] = v16;
  return result;
}

unint64_t sub_1B1ED2E60()
{
  return 0xD000000000000011;
}

uint64_t sub_1B1ED2E7C()
{
  return type metadata accessor for GetScale4Node(0);
}

uint64_t type metadata accessor for GetScale4Node(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF60810);
}

uint64_t sub_1B1ED2E98()
{
  return 0x6556657461746F52;
}

double sub_1B1ED2EB8@<D0>(uint64_t *a1@<X8>)
{
  double result;

  *(_QWORD *)&result = sub_1B1ED2EC4((uint64_t)&unk_1E638A688, a1).n128_u64[0];
  return result;
}

__n128 sub_1B1ED2EC4@<Q0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __n128 result;
  uint64_t v12;

  sub_1B1E58F20();
  v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1B226CD10;
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = 0x8000000000000028;
  *(_QWORD *)(v4 + 32) = v5 | 0x6000000000000000;
  v6 = swift_allocObject();
  v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_1B22847D0;
  *(_QWORD *)(v6 + 16) = v7 | 0x1000000000000000;
  *(_QWORD *)(v4 + 40) = v6 | 0x6000000000000000;
  v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_1B226D240;
  v9 = swift_allocObject();
  v10 = swift_allocObject();
  result = (__n128)xmmword_1B22847D0;
  *(_OWORD *)(v10 + 16) = xmmword_1B22847D0;
  *(_QWORD *)(v9 + 16) = v10 | 0x1000000000000000;
  *(_QWORD *)(v8 + 32) = v9 | 0x6000000000000000;
  *a2 = v4;
  a2[1] = v8;
  v12 = MEMORY[0x1E0DEE9D8];
  a2[2] = a1;
  a2[3] = v12;
  a2[4] = v12;
  a2[5] = v12;
  return result;
}

uint64_t sub_1B1ED3014()
{
  return type metadata accessor for RotateVectorNode(0);
}

uint64_t type metadata accessor for RotateVectorNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF60820);
}

uint64_t sub_1B1ED3030@<X0>(uint64_t *a1@<X8>)
{
  return sub_1B1ED33A4(0x8000000000000050, (uint64_t)&unk_1E63C25C0, a1);
}

unint64_t sub_1B1ED3044()
{
  return 0xD000000000000014;
}

uint64_t sub_1B1ED3060()
{
  return type metadata accessor for QPowNode(0);
}

uint64_t type metadata accessor for QPowNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF60830);
}

uint64_t sub_1B1ED307C@<X0>(uint64_t *a1@<X8>)
{
  return sub_1B1ED372C(0x8000000000000028, (uint64_t)&unk_1E636E1E0, a1);
}

unint64_t sub_1B1ED3090()
{
  return 0xD000000000000019;
}

uint64_t sub_1B1ED30AC()
{
  return type metadata accessor for LookAtNode(0);
}

uint64_t type metadata accessor for LookAtNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF60840);
}

uint64_t sub_1B1ED30C8()
{
  return 0x7072656C53;
}

uint64_t sub_1B1ED30DC@<X0>(uint64_t *a1@<X8>)
{
  return sub_1B1ED314C((uint64_t)&unk_1E63C4FD8, a1);
}

unint64_t sub_1B1ED30E8()
{
  return 0xD00000000000001ALL;
}

uint64_t sub_1B1ED3104()
{
  return type metadata accessor for SlerpNode(0);
}

uint64_t type metadata accessor for SlerpNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF60850);
}

uint64_t sub_1B1ED3120()
{
  return 0x6E6F4C7072656C53;
}

uint64_t sub_1B1ED3140@<X0>(uint64_t *a1@<X8>)
{
  return sub_1B1ED314C((uint64_t)&unk_1E638AC68, a1);
}

uint64_t sub_1B1ED314C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;

  sub_1B1E58F20();
  v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1B226E100;
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = 0x8000000000000028;
  *(_QWORD *)(v4 + 32) = v5 | 0x6000000000000000;
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = 0x8000000000000028;
  *(_QWORD *)(v4 + 40) = v6 | 0x6000000000000000;
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = 0x8000000000000050;
  *(_QWORD *)(v4 + 48) = v7 | 0x6000000000000000;
  v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_1B226D240;
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = 0x8000000000000028;
  *(_QWORD *)(v8 + 32) = result | 0x6000000000000000;
  *a2 = v4;
  a2[1] = v8;
  v10 = MEMORY[0x1E0DEE9D8];
  a2[2] = a1;
  a2[3] = v10;
  a2[4] = v10;
  a2[5] = v10;
  return result;
}

unint64_t sub_1B1ED325C()
{
  return 0xD000000000000022;
}

uint64_t sub_1B1ED3278()
{
  return type metadata accessor for SlerpLongestNode(0);
}

uint64_t type metadata accessor for SlerpLongestNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF60860);
}

uint64_t sub_1B1ED3294()
{
  return 0x6461757153;
}

uint64_t sub_1B1ED32A8@<X0>(uint64_t *a1@<X8>)
{
  return sub_1B1ED3A38(0x8000000000000028, (uint64_t)&unk_1E63C5318, MEMORY[0x1E0DEE9D8], MEMORY[0x1E0DEE9D8], a1);
}

unint64_t sub_1B1ED32C8()
{
  return 0xD000000000000022;
}

uint64_t sub_1B1ED32E4()
{
  return type metadata accessor for SquadNode(0);
}

uint64_t type metadata accessor for SquadNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF60870);
}

uint64_t sub_1B1ED3300()
{
  return 0x7265697A6542;
}

uint64_t sub_1B1ED3314@<X0>(uint64_t *a1@<X8>)
{
  return sub_1B1ED3A38(0x8000000000000028, (uint64_t)&unk_1E636CD80, MEMORY[0x1E0DEE9D8], MEMORY[0x1E0DEE9D8], a1);
}

unint64_t sub_1B1ED3334()
{
  return 0xD000000000000023;
}

uint64_t sub_1B1ED3350()
{
  return type metadata accessor for BezierNode(0);
}

uint64_t type metadata accessor for BezierNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF60880);
}

uint64_t sub_1B1ED336C()
{
  return 0x6E6F697461746F52;
}

uint64_t sub_1B1ED3390@<X0>(uint64_t *a1@<X8>)
{
  return sub_1B1ED33A4(0x8000000000000028, (uint64_t)&unk_1E639A618, a1);
}

uint64_t sub_1B1ED33A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;

  sub_1B1E58F20();
  v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_1B226CD10;
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = 0x8000000000000028;
  *(_QWORD *)(v6 + 32) = v7 | 0x6000000000000000;
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = a1;
  *(_QWORD *)(v6 + 40) = v8 | 0x6000000000000000;
  v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_1B226D240;
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = 0x8000000000000028;
  *(_QWORD *)(v9 + 32) = result | 0x6000000000000000;
  *a3 = v6;
  a3[1] = v9;
  v11 = MEMORY[0x1E0DEE9D8];
  a3[2] = a2;
  a3[3] = v11;
  a3[4] = v11;
  a3[5] = v11;
  return result;
}

unint64_t sub_1B1ED34A0()
{
  sub_1B2229430();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  return 0xD000000000000019;
}

uint64_t sub_1B1ED354C()
{
  return type metadata accessor for RotationBetweenNode(0);
}

uint64_t type metadata accessor for RotationBetweenNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF60890);
}

unint64_t sub_1B1ED3568()
{
  return 0xD000000000000013;
}

uint64_t sub_1B1ED3584@<X0>(uint64_t *a1@<X8>)
{
  return sub_1B1ED372C(0x8000000000000028, (uint64_t)&unk_1E63ACAE8, a1);
}

unint64_t sub_1B1ED3598()
{
  return 0xD000000000000027;
}

uint64_t sub_1B1ED35B4()
{
  return type metadata accessor for RotationBetweenFastNode(0);
}

uint64_t type metadata accessor for RotationBetweenFastNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF608A0);
}

uint64_t sub_1B1ED35D0()
{
  return 0x69746E6564497349;
}

uint64_t sub_1B1ED35EC@<X0>(uint64_t *a1@<X8>)
{
  return sub_1B1ED3600(0x8000000000000010, (uint64_t)&unk_1E637F880, a1);
}

uint64_t sub_1B1ED3600@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;

  sub_1B1E58F20();
  v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_1B226D240;
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = 0x8000000000000028;
  *(_QWORD *)(v6 + 32) = v7 | 0x6000000000000000;
  v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_1B226D240;
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = a1;
  *(_QWORD *)(v8 + 32) = result | 0x6000000000000000;
  *a3 = v6;
  a3[1] = v8;
  v10 = MEMORY[0x1E0DEE9D8];
  a3[2] = a2;
  a3[3] = v10;
  a3[4] = v10;
  a3[5] = v10;
  return result;
}

unint64_t sub_1B1ED36E0()
{
  return 0xD000000000000018;
}

uint64_t sub_1B1ED36FC()
{
  return type metadata accessor for IsIdentityNode(0);
}

uint64_t type metadata accessor for IsIdentityNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF608B0);
}

uint64_t sub_1B1ED3718@<X0>(uint64_t *a1@<X8>)
{
  return sub_1B1ED372C(0x8000000000000050, (uint64_t)&unk_1E63C32C8, a1);
}

uint64_t sub_1B1ED372C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;

  sub_1B1E58F20();
  v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_1B226CD10;
  v7 = swift_allocObject();
  v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_1B22847D0;
  *(_QWORD *)(v7 + 16) = v8 | 0x1000000000000000;
  *(_QWORD *)(v6 + 32) = v7 | 0x6000000000000000;
  v9 = swift_allocObject();
  v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_1B22847D0;
  *(_QWORD *)(v9 + 16) = v10 | 0x1000000000000000;
  *(_QWORD *)(v6 + 40) = v9 | 0x6000000000000000;
  v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_1B226D240;
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = a1;
  *(_QWORD *)(v11 + 32) = result | 0x6000000000000000;
  *a3 = v6;
  a3[1] = v11;
  v13 = MEMORY[0x1E0DEE9D8];
  a3[2] = a2;
  a3[3] = v13;
  a3[4] = v13;
  a3[5] = v13;
  return result;
}

unint64_t sub_1B1ED3878()
{
  return 0xD000000000000011;
}

uint64_t sub_1B1ED3894()
{
  return type metadata accessor for AngleNode(0);
}

uint64_t type metadata accessor for AngleNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF608C0);
}

uint64_t sub_1B1ED38B0()
{
  return 0x313070616D6552;
}

uint64_t sub_1B1ED38C8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  sub_1B1E58F20();
  v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_1B226E100;
  v3 = swift_allocObject();
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)(v2 + 32) = v3 | 0x4000000000000000;
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)(v2 + 40) = v4 | 0x4000000000000000;
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = 0;
  *(_QWORD *)(v2 + 48) = v5 | 0x4000000000000000;
  v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_1B226D240;
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(v6 + 32) = result | 0x4000000000000000;
  *a1 = v2;
  a1[1] = v6;
  v8 = MEMORY[0x1E0DEE9D8];
  a1[2] = (uint64_t)&unk_1E6371E10;
  a1[3] = v8;
  a1[4] = v8;
  a1[5] = v8;
  return result;
}

unint64_t sub_1B1ED39C8()
{
  return 0xD000000000000018;
}

uint64_t sub_1B1ED39E4()
{
  return type metadata accessor for Remap01Node(0);
}

uint64_t type metadata accessor for Remap01Node(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF608D0);
}

uint64_t sub_1B1ED3A00()
{
  return 0x70616D6552;
}

uint64_t sub_1B1ED3A14@<X0>(uint64_t *a1@<X8>)
{
  return sub_1B1ED3A38(0x8000000000000050, (uint64_t)&unk_1E63C48A8, (uint64_t)&unk_1E63C4808, (uint64_t)&unk_1E63C4878, a1);
}

uint64_t sub_1B1ED3A38@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;

  sub_1B1E58F20();
  v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_1B226CAD0;
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = a1;
  *(_QWORD *)(v10 + 32) = v11 | 0x6000000000000000;
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = a1;
  *(_QWORD *)(v10 + 40) = v12 | 0x6000000000000000;
  v13 = swift_allocObject();
  *(_QWORD *)(v13 + 16) = a1;
  *(_QWORD *)(v10 + 48) = v13 | 0x6000000000000000;
  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = a1;
  *(_QWORD *)(v10 + 56) = v14 | 0x6000000000000000;
  v15 = swift_allocObject();
  *(_QWORD *)(v15 + 16) = 0x8000000000000050;
  *(_QWORD *)(v10 + 64) = v15 | 0x6000000000000000;
  v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_1B226D240;
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = a1;
  *(_QWORD *)(v16 + 32) = result | 0x6000000000000000;
  *a5 = v10;
  a5[1] = v16;
  a5[2] = a2;
  a5[3] = a3;
  v18 = MEMORY[0x1E0DEE9D8];
  a5[4] = a4;
  a5[5] = v18;
  return result;
}

unint64_t sub_1B1ED3B90()
{
  return 0xD000000000000029;
}

uint64_t sub_1B1ED3BAC()
{
  return type metadata accessor for RemapNode(0);
}

uint64_t type metadata accessor for RemapNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF608E0);
}

uint64_t sub_1B1ED3BC8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  sub_1B1E58F20();
  v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_1B226E100;
  v3 = swift_allocObject();
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)(v2 + 32) = v3 | 0x4000000000000000;
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)(v2 + 40) = v4 | 0x4000000000000000;
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = 0;
  *(_QWORD *)(v2 + 48) = v5 | 0x4000000000000000;
  v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_1B226D240;
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = 0x8000000000000010;
  *(_QWORD *)(v6 + 32) = result | 0x6000000000000000;
  *a1 = v2;
  a1[1] = v6;
  v8 = MEMORY[0x1E0DEE9D8];
  a1[2] = (uint64_t)&unk_1E6383E68;
  a1[3] = v8;
  a1[4] = v8;
  a1[5] = v8;
  return result;
}

unint64_t sub_1B1ED3CD4()
{
  return 0xD000000000000010;
}

unint64_t sub_1B1ED3CF0()
{
  return 0xD000000000000018;
}

uint64_t sub_1B1ED3D0C()
{
  return type metadata accessor for IsInClosedRange(0);
}

uint64_t type metadata accessor for IsInClosedRange(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF608F0);
}

uint64_t sub_1B1ED3D28()
{
  return swift_deallocObject();
}

uint64_t sub_1B1ED3D38()
{
  uint64_t v0;

  sub_1B1B28D2C(*(_QWORD *)(v0 + 16));
  return swift_deallocObject();
}

uint64_t sub_1B1ED3D5C()
{
  uint64_t v0;

  sub_1B1B28D2C(*(_QWORD *)(v0 + 24));
  return swift_deallocObject();
}

uint64_t sub_1B1ED3DA0(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x1E0DEE9D8];
  if (v1)
  {
    v11 = MEMORY[0x1E0DEE9D8];
    sub_1B2029FFC(0, v1, 0);
    v2 = v11;
    v4 = a1 + 56;
    do
    {
      v9 = *(_QWORD *)(v4 - 24);
      v10 = *(_QWORD *)(v4 - 16);
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      sub_1B2228890();
      sub_1B2228890();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v6 = *(_QWORD *)(v11 + 16);
      v5 = *(_QWORD *)(v11 + 24);
      if (v6 >= v5 >> 1)
        sub_1B2029FFC(v5 > 1, v6 + 1, 1);
      v4 += 32;
      *(_QWORD *)(v11 + 16) = v6 + 1;
      v7 = v11 + 16 * v6;
      *(_QWORD *)(v7 + 32) = v9;
      *(_QWORD *)(v7 + 40) = v10;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t sub_1B1ED3EC4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  int64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t result;
  uint64_t v41;
  uint64_t v42;

  v1 = v0;
  swift_retain();
  v2 = swift_bridgeObjectRetain();
  sub_1B1EDC238(v2, v0);
  swift_bridgeObjectRelease();
  swift_release();
  if (*(_QWORD *)(v0 + 224))
  {
    swift_retain();
    v3 = swift_bridgeObjectRetain();
    sub_1B1EDC5E8(v3, v0);
    swift_bridgeObjectRelease();
    swift_release();
  }
  v4 = MEMORY[0x1E0DEE9D8];
  v5 = *(_QWORD *)(v0 + 208);
  if (*(_QWORD *)(v1 + 200))
    v6 = *(_QWORD *)(v1 + 200);
  else
    v6 = MEMORY[0x1E0DEE9D8];
  if (v5)
    v7 = *(_QWORD *)(v1 + 208);
  else
    v7 = MEMORY[0x1E0DEE9D8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v8 = sub_1B1ED6C00(v6, v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v9 = *(_QWORD *)(v8 + 16);
  if (v9)
  {
    swift_bridgeObjectRetain();
    v10 = v8 + 56;
    do
    {
      v10 += 32;
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v11 = swift_bridgeObjectRetain();
      sub_1B1EDC9C0(v11, v1);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      --v9;
    }
    while (v9);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  v12 = *(_QWORD *)(v1 + 200);
  if (!v12)
    goto LABEL_16;
  if (*(_QWORD *)(v12 + 16) != 1)
  {
    v14 = *(_QWORD *)(v1 + 200);
    goto LABEL_18;
  }
  swift_retain();
  swift_bridgeObjectRetain();
  v13 = swift_bridgeObjectRetain();
  sub_1B1EDCD54(v13, v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  v14 = *(_QWORD *)(v1 + 200);
  if (!v14)
LABEL_16:
    v14 = MEMORY[0x1E0DEE9D8];
LABEL_18:
  if (*(_QWORD *)(v1 + 208))
    v15 = *(_QWORD *)(v1 + 208);
  else
    v15 = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v16 = sub_1B1ED6C00(v14, v15);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v17 = *(_QWORD *)(v16 + 16);
  if (v17)
  {
    swift_bridgeObjectRetain();
    v18 = (uint64_t *)(v16 + 56);
    do
    {
      v19 = *(v18 - 3);
      v20 = *(v18 - 2);
      v21 = *(v18 - 1);
      v22 = *v18;
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v23 = swift_bridgeObjectRetain();
      sub_1B1EDD114(v23, v1, v21, v22, v19, v20);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      v18 += 4;
      --v17;
    }
    while (v17);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v1 + 192))
  {
    v24 = sub_1B1CC9D08(*(_QWORD **)(v1 + 192), qword_1E63A0900);
    swift_bridgeObjectRetain();
    swift_arrayDestroy();
    swift_bridgeObjectRelease();
    if ((v24 & 1) != 0)
    {
      *(_QWORD *)(v1 + 192) = *(_QWORD *)(v1 + 160);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    swift_arrayDestroy();
  }
  v25 = *(_QWORD *)(v1 + 216);
  v26 = *(_QWORD *)(v25 + 64);
  v41 = v25 + 64;
  v27 = 1 << *(_BYTE *)(v25 + 32);
  v28 = -1;
  if (v27 < 64)
    v28 = ~(-1 << v27);
  v29 = v28 & v26;
  v30 = (unint64_t)(v27 + 63) >> 6;
  v42 = *(_QWORD *)(v1 + 216);
  swift_bridgeObjectRetain_n();
  v31 = 0;
  if (!v29)
    goto LABEL_33;
LABEL_32:
  v32 = __clz(__rbit64(v29));
  v29 &= v29 - 1;
  v33 = v32 | (v31 << 6);
  while (1)
  {
    v36 = (uint64_t *)(*(_QWORD *)(v42 + 48) + 16 * v33);
    v38 = *v36;
    v37 = v36[1];
    sub_1B1A06460();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if ((sub_1B2229274() & 1) != 0)
    {
      swift_release();
      swift_bridgeObjectRelease();
      v39 = 1;
      goto LABEL_54;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v29)
      goto LABEL_32;
LABEL_33:
    v34 = v31 + 1;
    if (v31 + 1 >= v30)
      break;
    v35 = *(_QWORD *)(v41 + 8 * v34);
    if (!v35)
    {
      v34 = v31 + 2;
      if (v31 + 2 >= v30)
        break;
      v35 = *(_QWORD *)(v41 + 8 * v34);
      if (!v35)
      {
        v34 = v31 + 3;
        if (v31 + 3 >= v30)
          break;
        v35 = *(_QWORD *)(v41 + 8 * v34);
        if (!v35)
        {
          v34 = v31 + 4;
          if (v31 + 4 >= v30)
            break;
          v35 = *(_QWORD *)(v41 + 8 * v34);
          if (!v35)
          {
            v34 = v31 + 5;
            if (v31 + 5 >= v30)
              break;
            v35 = *(_QWORD *)(v41 + 8 * v34);
            if (!v35)
            {
              v34 = v31 + 6;
              if (v31 + 6 >= v30)
                break;
              v35 = *(_QWORD *)(v41 + 8 * v34);
              if (!v35)
              {
                while (v30 - 7 != v31)
                {
                  v35 = *(_QWORD *)(v42 + 8 * v31++ + 120);
                  if (v35)
                  {
                    v34 = v31 + 6;
                    goto LABEL_48;
                  }
                }
                break;
              }
            }
          }
        }
      }
    }
LABEL_48:
    v29 = (v35 - 1) & v35;
    v33 = __clz(__rbit64(v35)) + (v34 << 6);
    v31 = v34;
  }
  swift_release();
  swift_bridgeObjectRelease();
  v39 = 0;
  v38 = 0;
  v37 = 0;
LABEL_54:
  result = sub_1B1EDE224(v38, v37);
  *(_BYTE *)(v1 + 240) = v39;
  return result;
}

uint64_t sub_1B1ED4440()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  int64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v1 = (_QWORD *)v0;
  if ((*(_BYTE *)(v0 + 104) & 1) == 0)
  {
    v2 = *(_QWORD *)(v0 + 168);
    if (v2)
    {
      v3 = *(_QWORD *)(v2 + 16);
      if (v3)
      {
        v38 = MEMORY[0x1E0DEE9D8];
        swift_bridgeObjectRetain();
        sub_1B2029FFC(0, v3, 0);
        v4 = (uint64_t *)(v2 + 40);
        do
        {
          v6 = *(v4 - 1);
          v5 = *v4;
          v8 = *(_QWORD *)(v38 + 16);
          v7 = *(_QWORD *)(v38 + 24);
          swift_bridgeObjectRetain();
          if (v8 >= v7 >> 1)
            sub_1B2029FFC(v7 > 1, v8 + 1, 1);
          v4 += 2;
          *(_QWORD *)(v38 + 16) = v8 + 1;
          v9 = v38 + 16 * v8;
          *(_QWORD *)(v9 + 32) = v6;
          *(_QWORD *)(v9 + 40) = v5;
          --v3;
        }
        while (v3);
        swift_bridgeObjectRelease();
      }
      sub_1B1A02758(0, (unint64_t *)&qword_1ED4BA490, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
      sub_1B19FA230();
      sub_1B2228644();
      swift_bridgeObjectRelease();
      v21 = v1[26];
      if (!v21)
        goto LABEL_30;
    }
    else
    {
      v21 = *(_QWORD *)(v0 + 208);
      if (!v21)
      {
LABEL_30:
        sub_1B2228890();
        swift_bridgeObjectRelease();
        sub_1B2228890();
        sub_1B2228890();
        goto LABEL_43;
      }
    }
    v22 = *(_QWORD *)(v21 + 16);
    if (v22)
    {
      v40 = MEMORY[0x1E0DEE9D8];
      swift_bridgeObjectRetain();
      sub_1B2029FFC(0, v22, 0);
      v23 = (uint64_t *)(v21 + 40);
      do
      {
        v25 = *(v23 - 1);
        v24 = *v23;
        v27 = *(_QWORD *)(v40 + 16);
        v26 = *(_QWORD *)(v40 + 24);
        swift_bridgeObjectRetain();
        if (v27 >= v26 >> 1)
          sub_1B2029FFC(v26 > 1, v27 + 1, 1);
        v23 += 2;
        *(_QWORD *)(v40 + 16) = v27 + 1;
        v28 = v40 + 16 * v27;
        *(_QWORD *)(v28 + 32) = v25;
        *(_QWORD *)(v28 + 40) = v24;
        --v22;
      }
      while (v22);
      swift_bridgeObjectRelease();
    }
    sub_1B1A02758(0, (unint64_t *)&qword_1ED4BA490, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    sub_1B19FA230();
    sub_1B2228644();
    swift_bridgeObjectRelease();
    goto LABEL_30;
  }
  v10 = MEMORY[0x1E0DEE9D8];
  v11 = *(_QWORD *)(v0 + 160);
  v12 = *(_QWORD *)(v0 + 168);
  if (v11)
    v13 = v1[20];
  else
    v13 = MEMORY[0x1E0DEE9D8];
  if (v12)
    v14 = v1[21];
  else
    v14 = MEMORY[0x1E0DEE9D8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v15 = sub_1B1ED6C00(v13, v14);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v16 = *(_QWORD *)(v15 + 16);
  if (v16)
  {
    sub_1B2029FFC(0, v16, 0);
    v17 = v15 + 56;
    do
    {
      v39 = *(_QWORD *)(v17 - 24);
      v41 = *(_QWORD *)(v17 - 16);
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      sub_1B2228890();
      sub_1B2228890();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v19 = *(_QWORD *)(v10 + 16);
      v18 = *(_QWORD *)(v10 + 24);
      if (v19 >= v18 >> 1)
        sub_1B2029FFC(v18 > 1, v19 + 1, 1);
      v17 += 32;
      *(_QWORD *)(v10 + 16) = v19 + 1;
      v20 = v10 + 16 * v19;
      *(_QWORD *)(v20 + 32) = v39;
      *(_QWORD *)(v20 + 40) = v41;
      --v16;
    }
    while (v16);
    swift_bridgeObjectRelease();
    v10 = MEMORY[0x1E0DEE9D8];
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BA490, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
  sub_1B19FA230();
  sub_1B2228644();
  swift_bridgeObjectRelease();
  if (v1[26])
    v29 = v1[26];
  else
    v29 = v10;
  v30 = *(_QWORD *)(v29 + 16);
  if (v30)
  {
    swift_bridgeObjectRetain();
    sub_1B2029FFC(0, v30, 0);
    v31 = (uint64_t *)(v29 + 40);
    do
    {
      v32 = *(v31 - 1);
      v33 = *v31;
      v35 = *(_QWORD *)(v10 + 16);
      v34 = *(_QWORD *)(v10 + 24);
      swift_bridgeObjectRetain();
      if (v35 >= v34 >> 1)
        sub_1B2029FFC(v34 > 1, v35 + 1, 1);
      v31 += 2;
      *(_QWORD *)(v10 + 16) = v35 + 1;
      v36 = v10 + 16 * v35;
      *(_QWORD *)(v36 + 32) = v32;
      *(_QWORD *)(v36 + 40) = v33;
      --v30;
    }
    while (v30);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  sub_1B2228644();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  sub_1B2228890();
LABEL_43:
  swift_bridgeObjectRelease();
  sub_1B2228890();
  return 40;
}

uint64_t sub_1B1ED49D4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  char isUniquelyReferenced_nonNull_native;
  uint64_t result;
  uint64_t v6;
  char v7;
  uint64_t v8;

  v3 = *(_QWORD *)(a1 + 216);
  swift_bridgeObjectRetain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v8 = *(_QWORD *)(v1 + 216);
  *(_QWORD *)(v1 + 216) = 0x8000000000000000;
  sub_1B1EDB79C(v3, (uint64_t)sub_1B1DF5EEC, 0, isUniquelyReferenced_nonNull_native, &v8);
  *(_QWORD *)(v1 + 216) = v8;
  result = swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a1 + 224);
  if (*(_QWORD *)(v1 + 224))
  {
    if (v6)
    {
      swift_bridgeObjectRetain();
      v7 = swift_isUniquelyReferenced_nonNull_native();
      v8 = *(_QWORD *)(v1 + 224);
      *(_QWORD *)(v1 + 224) = 0x8000000000000000;
      sub_1B1EDB79C(v6, (uint64_t)sub_1B1DF5EEC, 0, v7, &v8);
      *(_QWORD *)(v1 + 224) = v8;
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    *(_QWORD *)(v1 + 224) = v6;
    return swift_bridgeObjectRetain();
  }
  return result;
}

void sub_1B1ED4ACC()
{
  uint64_t v0;
  _QWORD *v1;
  char v2;
  uint64_t v3;
  int64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  _QWORD *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  _QWORD *v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  _QWORD *v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  uint64_t v107;
  _QWORD v108[5];
  _QWORD v109[5];
  _QWORD v110[5];
  _QWORD v111[6];

  v1 = *(_QWORD **)(v0 + 144);
  if (v1)
  {
    v106 = *(_QWORD **)(v0 + 144);
    v2 = sub_1B1CC9D08(v1, qword_1E63A0CE8);
    swift_bridgeObjectRetain_n();
    swift_arrayDestroy();
    if ((v2 & 1) != 0)
    {
      swift_bridgeObjectRelease();
      if (qword_1ED4BB388 != -1)
        swift_once();
      v3 = qword_1ED4D0F28;
      v4 = *(_QWORD *)(qword_1ED4D0F28 + 16);
      if (v4)
      {
        v110[0] = MEMORY[0x1E0DEE9D8];
        swift_bridgeObjectRetain();
        sub_1B2029FFC(0, v4, 0);
        v5 = (_QWORD *)v110[0];
        v6 = v3 + 32;
        do
        {
          sub_1B19FA278(v6, (uint64_t)v111);
          sub_1B19F8C58(v111, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19FA2B4);
          v7 = sub_1B1E03DBC();
          v9 = v8;
          sub_1B19F8C58(v111, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19F9FEC);
          v110[0] = v5;
          v11 = v5[2];
          v10 = v5[3];
          if (v11 >= v10 >> 1)
          {
            sub_1B2029FFC(v10 > 1, v11 + 1, 1);
            v5 = (_QWORD *)v110[0];
          }
          v5[2] = v11 + 1;
          v12 = &v5[2 * v11];
          v12[4] = v7;
          v12[5] = v9;
          v6 += 40;
          --v4;
        }
        while (v4);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
        v5 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      }
      goto LABEL_97;
    }
    if ((sub_1B1DB8EB4(0x5F544E495F4C4C41, 0xED00005345505954, v1) & 1) == 0)
    {
      swift_bridgeObjectRelease();
      goto LABEL_34;
    }
    v13 = sub_1B1EDC0EC((uint64_t)v1, 0x5F544E495F4C4C41, 0xED00005345505954);
    swift_bridgeObjectRelease_n();
    v106 = (_QWORD *)v13;
    if (qword_1ED4BB388 != -1)
      swift_once();
    v14 = *(_QWORD *)(qword_1ED4D0F28 + 16);
    v15 = MEMORY[0x1E0DEE9D8];
    if (v14)
    {
      v16 = (uint64_t *)(swift_bridgeObjectRetain() + 64);
      v17 = MEMORY[0x1E0DEE9D8];
      do
      {
        v21 = *(v16 - 3);
        if (v21 - 1 <= 8)
        {
          v22 = *(v16 - 2);
          v23 = *(v16 - 1);
          v24 = *v16;
          v101 = *(v16 - 4);
          sub_1B19FA2B4(v101, v21);
          v111[0] = v17;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            sub_1B202A3C4(0, *(_QWORD *)(v17 + 16) + 1, 1);
            v17 = v111[0];
          }
          v19 = *(_QWORD *)(v17 + 16);
          v18 = *(_QWORD *)(v17 + 24);
          if (v19 >= v18 >> 1)
          {
            sub_1B202A3C4(v18 > 1, v19 + 1, 1);
            v17 = v111[0];
          }
          *(_QWORD *)(v17 + 16) = v19 + 1;
          v20 = (_QWORD *)(v17 + 40 * v19);
          v20[4] = v101;
          v20[5] = v21;
          v20[6] = v22;
          v20[7] = v23;
          v20[8] = v24;
        }
        v16 += 5;
        --v14;
      }
      while (v14);
      swift_bridgeObjectRelease();
      v15 = MEMORY[0x1E0DEE9D8];
      v25 = *(_QWORD *)(v17 + 16);
      if (v25)
        goto LABEL_26;
    }
    else
    {
      v17 = MEMORY[0x1E0DEE9D8];
      v25 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
      if (v25)
      {
LABEL_26:
        v110[0] = v15;
        sub_1B2029FFC(0, v25, 0);
        v26 = v110[0];
        v27 = v17 + 32;
        do
        {
          sub_1B19FA278(v27, (uint64_t)v111);
          sub_1B19F8C58(v111, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19FA2B4);
          v28 = sub_1B1E03DBC();
          v30 = v29;
          sub_1B19F8C58(v111, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19F9FEC);
          v110[0] = v26;
          v32 = *(_QWORD *)(v26 + 16);
          v31 = *(_QWORD *)(v26 + 24);
          if (v32 >= v31 >> 1)
          {
            sub_1B2029FFC(v31 > 1, v32 + 1, 1);
            v26 = v110[0];
          }
          *(_QWORD *)(v26 + 16) = v32 + 1;
          v33 = v26 + 16 * v32;
          *(_QWORD *)(v33 + 32) = v28;
          *(_QWORD *)(v33 + 40) = v30;
          v27 += 40;
          --v25;
        }
        while (v25);
        swift_release();
        goto LABEL_33;
      }
    }
    swift_release();
    v26 = MEMORY[0x1E0DEE9D8];
LABEL_33:
    sub_1B19F48F0(v26);
    v1 = v106;
LABEL_34:
    if ((sub_1B1DB8EB4(0xD000000000000014, 0x80000001B2342AA0, v1) & 1) == 0)
      goto LABEL_55;
    v34 = swift_bridgeObjectRetain();
    v35 = sub_1B1EDC0EC(v34, 0xD000000000000014, 0x80000001B2342AA0);
    swift_bridgeObjectRelease_n();
    v106 = (_QWORD *)v35;
    if (qword_1ED4BB388 != -1)
      swift_once();
    v36 = *(_QWORD *)(qword_1ED4D0F28 + 16);
    v37 = MEMORY[0x1E0DEE9D8];
    if (v36)
    {
      v38 = (uint64_t *)(swift_bridgeObjectRetain() + 64);
      v39 = MEMORY[0x1E0DEE9D8];
      do
      {
        v43 = *(v38 - 3);
        if (v43 - 5 <= 4)
        {
          v44 = *(v38 - 2);
          v45 = *(v38 - 1);
          v46 = *v38;
          v102 = *(v38 - 4);
          sub_1B19FA2B4(v102, v43);
          v110[0] = v39;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            sub_1B202A3C4(0, *(_QWORD *)(v39 + 16) + 1, 1);
            v39 = v110[0];
          }
          v41 = *(_QWORD *)(v39 + 16);
          v40 = *(_QWORD *)(v39 + 24);
          if (v41 >= v40 >> 1)
          {
            sub_1B202A3C4(v40 > 1, v41 + 1, 1);
            v39 = v110[0];
          }
          *(_QWORD *)(v39 + 16) = v41 + 1;
          v42 = (_QWORD *)(v39 + 40 * v41);
          v42[4] = v102;
          v42[5] = v43;
          v42[6] = v44;
          v42[7] = v45;
          v42[8] = v46;
        }
        v38 += 5;
        --v36;
      }
      while (v36);
      swift_bridgeObjectRelease();
      v37 = MEMORY[0x1E0DEE9D8];
      v47 = *(_QWORD *)(v39 + 16);
      if (v47)
        goto LABEL_47;
    }
    else
    {
      v39 = MEMORY[0x1E0DEE9D8];
      v47 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
      if (v47)
      {
LABEL_47:
        v109[0] = v37;
        sub_1B2029FFC(0, v47, 0);
        v48 = v109[0];
        v49 = v39 + 32;
        do
        {
          sub_1B19FA278(v49, (uint64_t)v110);
          sub_1B19F8C58(v110, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19FA2B4);
          v50 = sub_1B1E03DBC();
          v52 = v51;
          sub_1B19F8C58(v110, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19F9FEC);
          v109[0] = v48;
          v54 = *(_QWORD *)(v48 + 16);
          v53 = *(_QWORD *)(v48 + 24);
          if (v54 >= v53 >> 1)
          {
            sub_1B2029FFC(v53 > 1, v54 + 1, 1);
            v48 = v109[0];
          }
          *(_QWORD *)(v48 + 16) = v54 + 1;
          v55 = v48 + 16 * v54;
          *(_QWORD *)(v55 + 32) = v50;
          *(_QWORD *)(v55 + 40) = v52;
          v49 += 40;
          --v47;
        }
        while (v47);
        swift_release();
        goto LABEL_54;
      }
    }
    swift_release();
    v48 = MEMORY[0x1E0DEE9D8];
LABEL_54:
    sub_1B19F48F0(v48);
    v1 = v106;
LABEL_55:
    if ((sub_1B1DB8EB4(0xD000000000000016, 0x80000001B2342AC0, v1) & 1) == 0)
      goto LABEL_76;
    v56 = swift_bridgeObjectRetain();
    v57 = sub_1B1EDC0EC(v56, 0xD000000000000016, 0x80000001B2342AC0);
    swift_bridgeObjectRelease_n();
    v106 = (_QWORD *)v57;
    if (qword_1ED4BB388 != -1)
      swift_once();
    v58 = *(_QWORD *)(qword_1ED4D0F28 + 16);
    v59 = MEMORY[0x1E0DEE9D8];
    if (v58)
    {
      v60 = (uint64_t *)(swift_bridgeObjectRetain() + 64);
      v61 = MEMORY[0x1E0DEE9D8];
      do
      {
        v65 = *(v60 - 3);
        if (v65 - 1 <= 3)
        {
          v66 = *(v60 - 2);
          v67 = *(v60 - 1);
          v68 = *v60;
          v103 = *(v60 - 4);
          sub_1B19FA2B4(v103, v65);
          v109[0] = v61;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            sub_1B202A3C4(0, *(_QWORD *)(v61 + 16) + 1, 1);
            v61 = v109[0];
          }
          v63 = *(_QWORD *)(v61 + 16);
          v62 = *(_QWORD *)(v61 + 24);
          if (v63 >= v62 >> 1)
          {
            sub_1B202A3C4(v62 > 1, v63 + 1, 1);
            v61 = v109[0];
          }
          *(_QWORD *)(v61 + 16) = v63 + 1;
          v64 = (_QWORD *)(v61 + 40 * v63);
          v64[4] = v103;
          v64[5] = v65;
          v64[6] = v66;
          v64[7] = v67;
          v64[8] = v68;
        }
        v60 += 5;
        --v58;
      }
      while (v58);
      swift_bridgeObjectRelease();
      v59 = MEMORY[0x1E0DEE9D8];
      v69 = *(_QWORD *)(v61 + 16);
      if (v69)
        goto LABEL_68;
    }
    else
    {
      v61 = MEMORY[0x1E0DEE9D8];
      v69 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
      if (v69)
      {
LABEL_68:
        v108[0] = v59;
        sub_1B2029FFC(0, v69, 0);
        v70 = v108[0];
        v71 = v61 + 32;
        do
        {
          sub_1B19FA278(v71, (uint64_t)v109);
          sub_1B19F8C58(v109, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19FA2B4);
          v72 = sub_1B1E03DBC();
          v74 = v73;
          sub_1B19F8C58(v109, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19F9FEC);
          v108[0] = v70;
          v76 = *(_QWORD *)(v70 + 16);
          v75 = *(_QWORD *)(v70 + 24);
          if (v76 >= v75 >> 1)
          {
            sub_1B2029FFC(v75 > 1, v76 + 1, 1);
            v70 = v108[0];
          }
          *(_QWORD *)(v70 + 16) = v76 + 1;
          v77 = v70 + 16 * v76;
          *(_QWORD *)(v77 + 32) = v72;
          *(_QWORD *)(v77 + 40) = v74;
          v71 += 40;
          --v69;
        }
        while (v69);
        swift_release();
        goto LABEL_75;
      }
    }
    swift_release();
    v70 = MEMORY[0x1E0DEE9D8];
LABEL_75:
    sub_1B19F48F0(v70);
LABEL_76:
    v5 = v106;
    if ((sub_1B1DB8EB4(0xD000000000000010, 0x80000001B2342AE0, v106) & 1) == 0)
    {
LABEL_97:
      *(_QWORD *)(v100 + 144) = v5;
      swift_bridgeObjectRelease();
      return;
    }
    v78 = swift_bridgeObjectRetain();
    v79 = sub_1B1EDC0EC(v78, 0xD000000000000010, 0x80000001B2342AE0);
    swift_bridgeObjectRelease_n();
    v107 = v79;
    if (qword_1ED4BB388 != -1)
      swift_once();
    v80 = *(_QWORD *)(qword_1ED4D0F28 + 16);
    v81 = MEMORY[0x1E0DEE9D8];
    if (v80)
    {
      v82 = (uint64_t *)(swift_bridgeObjectRetain() + 64);
      v83 = MEMORY[0x1E0DEE9D8];
      do
      {
        v87 = *(v82 - 3);
        if (v87 - 17 <= 8)
        {
          v88 = *(v82 - 2);
          v89 = *(v82 - 1);
          v90 = *v82;
          v104 = *(v82 - 4);
          sub_1B19FA2B4(v104, v87);
          v108[0] = v83;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            sub_1B202A3C4(0, *(_QWORD *)(v83 + 16) + 1, 1);
            v83 = v108[0];
          }
          v85 = *(_QWORD *)(v83 + 16);
          v84 = *(_QWORD *)(v83 + 24);
          if (v85 >= v84 >> 1)
          {
            sub_1B202A3C4(v84 > 1, v85 + 1, 1);
            v83 = v108[0];
          }
          *(_QWORD *)(v83 + 16) = v85 + 1;
          v86 = (_QWORD *)(v83 + 40 * v85);
          v86[4] = v104;
          v86[5] = v87;
          v86[6] = v88;
          v86[7] = v89;
          v86[8] = v90;
        }
        v82 += 5;
        --v80;
      }
      while (v80);
      swift_bridgeObjectRelease();
      v81 = MEMORY[0x1E0DEE9D8];
      v91 = *(_QWORD *)(v83 + 16);
      if (v91)
        goto LABEL_89;
    }
    else
    {
      v83 = MEMORY[0x1E0DEE9D8];
      v91 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
      if (v91)
      {
LABEL_89:
        v105 = v81;
        sub_1B2029FFC(0, v91, 0);
        v92 = v105;
        v93 = v83 + 32;
        do
        {
          sub_1B19FA278(v93, (uint64_t)v108);
          sub_1B19F8C58(v108, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19FA2B4);
          v94 = sub_1B1E03DBC();
          v96 = v95;
          sub_1B19F8C58(v108, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19F9FEC);
          v98 = *(_QWORD *)(v105 + 16);
          v97 = *(_QWORD *)(v105 + 24);
          if (v98 >= v97 >> 1)
            sub_1B2029FFC(v97 > 1, v98 + 1, 1);
          *(_QWORD *)(v105 + 16) = v98 + 1;
          v99 = v105 + 16 * v98;
          *(_QWORD *)(v99 + 32) = v94;
          *(_QWORD *)(v99 + 40) = v96;
          v93 += 40;
          --v91;
        }
        while (v91);
        swift_release();
        goto LABEL_96;
      }
    }
    swift_release();
    v92 = MEMORY[0x1E0DEE9D8];
LABEL_96:
    sub_1B19F48F0(v92);
    v5 = (_QWORD *)v107;
    goto LABEL_97;
  }
}

uint64_t sub_1B1ED5694()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  BOOL v51;
  unint64_t v52;
  unint64_t v53;
  _QWORD *v54;
  BOOL v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  uint64_t v79;
  uint64_t v80;
  __int128 v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  unint64_t v90;
  char *v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96[5];
  uint64_t v97[5];
  _QWORD v98[5];
  uint64_t v99;
  unint64_t v100;
  char v101[8];
  uint64_t v102;
  char v103[48];

  v1 = v0;
  sub_1B1B1F358();
  v92 = v2;
  MEMORY[0x1E0C80A78](v2, v3);
  v91 = (char *)&v79 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1B222820C();
  v89 = *(_QWORD *)(v5 - 8);
  v90 = v5;
  MEMORY[0x1E0C80A78](v5, v6);
  v88 = (char *)&v79 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = v0[21];
  v93 = v1;
  if (v8)
  {
    v9 = *(_QWORD *)(v8 + 16);
    if (v9)
    {
      swift_bridgeObjectRetain_n();
      v80 = v8;
      v10 = (uint64_t *)(v8 + 40);
      v82 = 0x80000001B23429D0;
      v81 = xmmword_1B226D240;
      v11 = v88;
      do
      {
        v13 = *(v10 - 1);
        v12 = *v10;
        swift_bridgeObjectRetain_n();
        sub_1B1E0E85C(v13, v12, v96);
        sub_1B1A202F4((uint64_t)v96, (uint64_t)v101);
        if (v102 == 59)
        {
          v84 = v10;
          if (qword_1ED4BF430 != -1)
            swift_once();
          v99 = 0;
          v100 = 0xE000000000000000;
          v86 = qword_1ED4D0FB0;
          swift_retain();
          sub_1B2229430();
          sub_1B2228890();
          swift_bridgeObjectRetain();
          sub_1B2228890();
          swift_bridgeObjectRelease();
          sub_1B2228890();
          swift_bridgeObjectRetain();
          sub_1B2228890();
          swift_bridgeObjectRelease();
          sub_1B2228890();
          v87 = v12;
          sub_1B2228890();
          sub_1B2228890();
          v14 = v99;
          v15 = v100;
          v16 = sub_1B2228E90();
          if (qword_1ED4BF658 != -1)
            swift_once();
          v85 = v9;
          v17 = qword_1ED4D0FD0;
          v18 = qword_1ED4BF688;
          swift_retain();
          if (v18 != -1)
            swift_once();
          sub_1B1791524(0, (unint64_t *)&qword_1ED4BF700, (uint64_t (*)(uint64_t))sub_1B1BB9F44, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
          v19 = swift_allocObject();
          *(_OWORD *)(v19 + 16) = v81;
          *(_QWORD *)(v19 + 56) = MEMORY[0x1E0DEA968];
          *(_QWORD *)(v19 + 64) = sub_1B1B1F47C();
          *(_QWORD *)(v19 + 32) = v14;
          *(_QWORD *)(v19 + 40) = v15;
          swift_bridgeObjectRetain();
          sub_1B222835C();
          swift_bridgeObjectRelease();
          swift_retain();
          sub_1B2228200();
          v20 = (uint64_t)v91;
          v21 = *(int *)(v92 + 48);
          v22 = v14;
          v23 = *(int *)(v92 + 64);
          v24 = *(int *)(v92 + 80);
          v83 = v17;
          v25 = &v91[v24];
          (*(void (**)(char *, char *, unint64_t))(v89 + 32))(v91, v11, v90);
          *(_BYTE *)(v20 + v21) = v16;
          *(_QWORD *)(v20 + v23) = 0;
          *(_QWORD *)v25 = v22;
          *((_QWORD *)v25 + 1) = v15;
          swift_bridgeObjectRetain();
          sub_1B2228428();
          swift_release();
          sub_1B1B429AC(v20);
          swift_bridgeObjectRelease();
          swift_release();
          swift_bridgeObjectRelease();
          swift_release();
          v1 = v93;
          v10 = v84;
          v9 = v85;
        }
        else
        {
          sub_1B19FA278((uint64_t)v101, (uint64_t)v103);
          sub_1B19F8C58(v96, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1A20360);
          swift_bridgeObjectRelease();
        }
        v10 += 2;
        --v9;
      }
      while (v9);
      swift_bridgeObjectRelease_n();
    }
  }
  v26 = v1[26];
  if (v26)
  {
    v27 = *(_QWORD *)(v26 + 16);
    if (v27)
    {
      swift_bridgeObjectRetain_n();
      v80 = v26;
      v28 = (uint64_t *)(v26 + 40);
      v82 = 0x80000001B23429D0;
      v81 = xmmword_1B226D240;
      v29 = (uint64_t)v91;
      do
      {
        v30 = *(v28 - 1);
        v31 = *v28;
        swift_bridgeObjectRetain_n();
        sub_1B1E0E85C(v30, v31, v97);
        sub_1B1A202F4((uint64_t)v97, (uint64_t)v98);
        if (v98[1] == 59)
        {
          v84 = v28;
          v85 = v27;
          if (qword_1ED4BF430 != -1)
            swift_once();
          v94 = 0;
          v95 = 0xE000000000000000;
          v86 = qword_1ED4D0FB0;
          swift_retain();
          sub_1B2229430();
          sub_1B2228890();
          swift_bridgeObjectRetain();
          sub_1B2228890();
          swift_bridgeObjectRelease();
          sub_1B2228890();
          swift_bridgeObjectRetain();
          sub_1B2228890();
          swift_bridgeObjectRelease();
          sub_1B2228890();
          sub_1B2228890();
          sub_1B2228890();
          v33 = v94;
          v32 = v95;
          v34 = sub_1B2228E90();
          if (qword_1ED4BF658 != -1)
            swift_once();
          v87 = v31;
          v35 = qword_1ED4D0FD0;
          v36 = qword_1ED4BF688;
          swift_retain();
          if (v36 != -1)
            swift_once();
          sub_1B1791524(0, (unint64_t *)&qword_1ED4BF700, (uint64_t (*)(uint64_t))sub_1B1BB9F44, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
          v37 = swift_allocObject();
          *(_OWORD *)(v37 + 16) = v81;
          *(_QWORD *)(v37 + 56) = MEMORY[0x1E0DEA968];
          *(_QWORD *)(v37 + 64) = sub_1B1B1F47C();
          *(_QWORD *)(v37 + 32) = v33;
          *(_QWORD *)(v37 + 40) = v32;
          swift_bridgeObjectRetain();
          sub_1B222835C();
          swift_bridgeObjectRelease();
          swift_retain();
          v38 = v88;
          sub_1B2228200();
          v39 = *(int *)(v92 + 48);
          v40 = *(int *)(v92 + 64);
          v41 = *(int *)(v92 + 80);
          v83 = v35;
          v42 = (uint64_t *)(v29 + v41);
          (*(void (**)(uint64_t, char *, unint64_t))(v89 + 32))(v29, v38, v90);
          *(_BYTE *)(v29 + v39) = v34;
          *(_QWORD *)(v29 + v40) = 0;
          *v42 = v33;
          v42[1] = v32;
          swift_bridgeObjectRetain();
          sub_1B2228428();
          swift_release();
          sub_1B1B429AC(v29);
          swift_bridgeObjectRelease();
          swift_release();
          swift_bridgeObjectRelease();
          swift_release();
          v1 = v93;
          v28 = v84;
          v27 = v85;
        }
        else
        {
          sub_1B19FA278((uint64_t)v98, (uint64_t)&v99);
          sub_1B19F8C58(v97, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1A20360);
          swift_bridgeObjectRelease();
        }
        v28 += 2;
        --v27;
      }
      while (v27);
      swift_bridgeObjectRelease_n();
    }
  }
  if (v1[20])
    v43 = (_QWORD *)v1[20];
  else
    v43 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v92 = v1[25];
  if (v92)
  {
    v44 = *(_QWORD *)(v92 + 16);
    if (v44)
    {
      v45 = v92 + 32;
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      v46 = 0;
      while (1)
      {
        v47 = (uint64_t *)(v45 + 16 * v46);
        v49 = *v47;
        v48 = v47[1];
        v50 = v43[2];
        if (!v50)
          goto LABEL_45;
        v51 = v43[4] == v49 && v43[5] == v48;
        if (!v51 && (sub_1B2229D24() & 1) == 0)
        {
          if (v50 == 1)
            goto LABEL_45;
          v55 = v43[6] == v49 && v43[7] == v48;
          if (!v55 && (sub_1B2229D24() & 1) == 0)
          {
            v56 = v50 - 2;
            if (v50 == 2)
              goto LABEL_45;
            if ((v43[8] != v49 || v43[9] != v48) && (sub_1B2229D24() & 1) == 0)
              break;
          }
        }
LABEL_37:
        if (++v46 == v44)
        {
          swift_bridgeObjectRelease_n();
          v1 = v93;
          goto LABEL_68;
        }
      }
      v91 = (char *)v43;
      v57 = v43 + 11;
      while (1)
      {
        --v56;
        v43 = v91;
        if (!v56)
          break;
        if (*(v57 - 1) != v49 || *v57 != v48)
        {
          v57 += 2;
          if ((sub_1B2229D24() & 1) == 0)
            continue;
        }
        v43 = v91;
        goto LABEL_37;
      }
LABEL_45:
      swift_bridgeObjectRetain_n();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v43 = sub_1B1C63044(0, v50 + 1, 1, v43);
      v53 = v43[2];
      v52 = v43[3];
      if (v53 >= v52 >> 1)
        v43 = sub_1B1C63044(v52 > 1, v53 + 1, 1, v43);
      v43[2] = v53 + 1;
      v54 = &v43[2 * v53];
      v54[4] = v49;
      v54[5] = v48;
      swift_bridgeObjectRelease();
      goto LABEL_37;
    }
  }
  swift_bridgeObjectRetain();
LABEL_68:
  if (*(_QWORD *)(v1[27] + 16))
  {
    v59 = v43[2];
    if (v59)
    {
      swift_bridgeObjectRetain();
      v60 = 0;
      v61 = v43 + 5;
      v90 = 0x80000001B23429B0;
      v91 = (char *)v43;
      do
      {
        v62 = *(v61 - 1);
        v63 = *v61;
        swift_bridgeObjectRetain();
        v64 = swift_bridgeObjectRetain();
        v65 = sub_1B1EDD690(v64, v62, v63);
        swift_bridgeObjectRelease();
        v66 = *(_QWORD *)(v65 + 16);
        swift_bridgeObjectRelease();
        if (v66)
        {
          v92 = v60;
          if (qword_1ED4BF430 != -1)
            swift_once();
          v94 = 0;
          v95 = 0xE000000000000000;
          swift_retain();
          sub_1B2229430();
          swift_bridgeObjectRelease();
          v94 = 0x6E6920726F727245;
          v95 = 0xE900000000000020;
          swift_bridgeObjectRetain();
          sub_1B2228890();
          swift_bridgeObjectRelease();
          sub_1B2228890();
          swift_bridgeObjectRetain();
          sub_1B2228890();
          swift_bridgeObjectRelease();
          sub_1B2228890();
          sub_1B2228890();
          sub_1B2228890();
          v67 = swift_bridgeObjectRetain();
          MEMORY[0x1B5E20670](v67, MEMORY[0x1E0DEA968]);
          sub_1B2228890();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v68 = v94;
          v69 = v95;
          v70 = sub_1B2228E90();
          if (qword_1ED4BF658 != -1)
            swift_once();
          v94 = 0;
          swift_retain();
          sub_1B1F1AD70(v70, &v94, v68, v69);
          swift_bridgeObjectRelease();
          swift_release();
          swift_bridgeObjectRelease();
          swift_release();
          v60 = v92;
        }
        else
        {
          swift_bridgeObjectRelease();
        }
        v61 += 2;
        --v59;
      }
      while (v59);
      swift_bridgeObjectRelease();
      v1 = v93;
    }
  }
  if (v1[37])
  {
    v71 = (_QWORD *)v1[20];
    if (v71)
    {
      if ((sub_1B1DB8EB4(v1[36], v1[37], v71) & 1) != 0)
        goto LABEL_92;
      v72 = qword_1ED4BF430;
      swift_bridgeObjectRetain();
      if (v72 != -1)
        swift_once();
      v94 = 0;
      v95 = 0xE000000000000000;
      swift_retain();
      sub_1B2229430();
      sub_1B2228890();
      swift_bridgeObjectRetain();
      sub_1B2228890();
      swift_bridgeObjectRelease();
      sub_1B2228890();
      swift_bridgeObjectRetain();
      sub_1B2228890();
      swift_bridgeObjectRelease();
      sub_1B2228890();
      sub_1B2228890();
      swift_bridgeObjectRelease();
      sub_1B2228890();
      v73 = swift_bridgeObjectRetain();
      MEMORY[0x1B5E20670](v73, MEMORY[0x1E0DEA968]);
      sub_1B2228890();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      v74 = qword_1ED4BF430;
      swift_bridgeObjectRetain();
      if (v74 != -1)
        swift_once();
      v94 = 0;
      v95 = 0xE000000000000000;
      swift_retain();
      sub_1B2229430();
      sub_1B2228890();
      swift_bridgeObjectRetain();
      sub_1B2228890();
      swift_bridgeObjectRelease();
      sub_1B2228890();
      swift_bridgeObjectRetain();
      sub_1B2228890();
      swift_bridgeObjectRelease();
      sub_1B2228890();
      sub_1B2228890();
      swift_bridgeObjectRelease();
      sub_1B2228890();
    }
    v75 = v94;
    v76 = v95;
    v77 = sub_1B2228E90();
    if (qword_1ED4BF658 != -1)
      swift_once();
    v94 = 0;
    swift_retain();
    sub_1B1F1AD70(v77, &v94, v75, v76);
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
  }
LABEL_92:
  sub_1B1EDB158();
  return swift_bridgeObjectRelease();
}

void sub_1B1ED65AC()
{
  _QWORD *v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  char v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  int64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;

  if (!v0[18])
    return;
  v1 = v0[3];
  v39 = v0[2];
  v40 = v1;
  v37 = 0x254550595425;
  v38 = 0xE600000000000000;
  sub_1B1A06460();
  if ((sub_1B2229274() & 1) != 0)
    return;
  v33 = (uint64_t)&v33;
  v34 = v0;
  v2 = v0[27];
  v3 = v2 + 64;
  v4 = 1 << *(_BYTE *)(v2 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(v2 + 64);
  v7 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain_n();
  v8 = 0;
  v9 = 0;
  v35 = v2 + 112;
  v36 = v7 - 6;
  while (v6)
  {
    v10 = __clz(__rbit64(v6));
    v6 &= v6 - 1;
    v11 = v10 | (v9 << 6);
LABEL_7:
    v12 = (uint64_t *)(*(_QWORD *)(v2 + 56) + 16 * v11);
    v14 = *v12;
    v13 = v12[1];
    v39 = v14;
    v40 = v13;
    v37 = 0x254550595425;
    v38 = 0xE600000000000000;
    if ((sub_1B2229274() & 1) != 0)
      v8 = 1;
  }
  v15 = v9 + 1;
  if (v9 + 1 >= v7)
    goto LABEL_24;
  v16 = *(_QWORD *)(v3 + 8 * v15);
  if (v16)
    goto LABEL_23;
  v15 = v9 + 2;
  if (v9 + 2 >= v7)
    goto LABEL_24;
  v16 = *(_QWORD *)(v3 + 8 * v15);
  if (v16)
    goto LABEL_23;
  v15 = v9 + 3;
  if (v9 + 3 >= v7)
    goto LABEL_24;
  v16 = *(_QWORD *)(v3 + 8 * v15);
  if (v16)
    goto LABEL_23;
  v15 = v9 + 4;
  if (v9 + 4 >= v7)
    goto LABEL_24;
  v16 = *(_QWORD *)(v3 + 8 * v15);
  if (v16)
    goto LABEL_23;
  v15 = v9 + 5;
  if (v9 + 5 >= v7)
    goto LABEL_24;
  v16 = *(_QWORD *)(v3 + 8 * v15);
  if (v16)
  {
LABEL_23:
    v6 = (v16 - 1) & v16;
    v11 = __clz(__rbit64(v16)) + (v15 << 6);
    v9 = v15;
    goto LABEL_7;
  }
  while (v36 != v9)
  {
    v16 = *(_QWORD *)(v35 + 8 * v9++);
    if (v16)
    {
      v15 = v9 + 5;
      goto LABEL_23;
    }
  }
LABEL_24:
  swift_release();
  swift_bridgeObjectRelease();
  v17 = v34;
  if ((v8 & 1) == 0)
  {
    v18 = v34[21];
    if (v18)
    {
      v19 = *(_QWORD *)(v18 + 16);
      if (v19)
      {
        swift_bridgeObjectRetain();
        v20 = 0;
        v21 = 0;
LABEL_28:
        v22 = (unint64_t *)(v18 + 40 + 16 * v20++);
        do
        {
          v23 = *v22;
          v39 = *(v22 - 1);
          v40 = v23;
          v37 = 0x254550595425;
          v38 = 0xE600000000000000;
          if ((sub_1B2229274() & 1) != 0)
          {
            v21 = 1;
            if (v20 != v19)
              goto LABEL_28;
LABEL_43:
            swift_bridgeObjectRelease();
            return;
          }
          v22 += 2;
          ++v20;
        }
        while (v20 - v19 != 1);
        swift_bridgeObjectRelease();
        v17 = v34;
        if ((v21 & 1) != 0)
          return;
      }
    }
    v24 = v17[26];
    if (v24)
    {
      v25 = *(_QWORD *)(v24 + 16);
      if (v25)
      {
        swift_bridgeObjectRetain();
        v26 = 0;
        v27 = 0;
LABEL_38:
        v28 = (unint64_t *)(v24 + 40 + 16 * v26++);
        do
        {
          v29 = *v28;
          v39 = *(v28 - 1);
          v40 = v29;
          v37 = 0x254550595425;
          v38 = 0xE600000000000000;
          if ((sub_1B2229274() & 1) != 0)
          {
            v27 = 1;
            if (v26 != v25)
              goto LABEL_38;
            goto LABEL_43;
          }
          v28 += 2;
          ++v26;
        }
        while (v26 - v25 != 1);
        swift_bridgeObjectRelease();
        if ((v27 & 1) != 0)
          return;
      }
    }
    if (qword_1ED4BF430 != -1)
      swift_once();
    v39 = 0;
    v40 = 0xE000000000000000;
    swift_retain();
    sub_1B2229430();
    sub_1B2228890();
    swift_bridgeObjectRetain();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    swift_bridgeObjectRetain();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    v31 = v39;
    v30 = v40;
    v32 = sub_1B2228E9C();
    if (qword_1ED4BF658 != -1)
      swift_once();
    v39 = 0;
    swift_retain();
    sub_1B1F1AD70(v32, &v39, v31, v30);
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
  }
}

uint64_t sub_1B1ED6A88(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;

  if (a1)
  {
    if (a1 == 1)
      v2 = 0x6C6174656DLL;
    else
      v2 = 0x7466697773;
    v3 = 0xE500000000000000;
  }
  else
  {
    v3 = 0xE100000000000000;
    v2 = 99;
  }
  v4 = *(_QWORD *)(v1 + 216);
  if (*(_QWORD *)(v4 + 16) && (v5 = sub_1B1DC3B00(v2, v3), (v6 & 1) != 0))
  {
    v7 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 16 * v5);
    swift_bridgeObjectRetain();
  }
  else
  {
    v7 = 0;
  }
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t sub_1B1ED6B30(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v2 = *(_QWORD *)(v1 + 224);
  if (v2)
  {
    if (a1)
    {
      if (a1 == 1)
        v3 = 0x6C6174656DLL;
      else
        v3 = 0x7466697773;
      v4 = 0xE500000000000000;
      if (!*(_QWORD *)(v2 + 16))
        goto LABEL_12;
    }
    else
    {
      v4 = 0xE100000000000000;
      v3 = 99;
      if (!*(_QWORD *)(v2 + 16))
        goto LABEL_12;
    }
    v5 = sub_1B1DC3B00(v3, v4);
    if ((v6 & 1) != 0)
    {
      v2 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 16 * v5);
      swift_bridgeObjectRetain();
LABEL_13:
      swift_bridgeObjectRelease();
      return v2;
    }
LABEL_12:
    v2 = 0;
    goto LABEL_13;
  }
  return v2;
}

uint64_t sub_1B1ED6BEC(uint64_t a1, uint64_t a2)
{
  return sub_1B1ED6C00(a1, a2);
}

uint64_t sub_1B1ED6C00(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int64_t v4;
  char v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v2 = a2;
  v41 = *(_QWORD *)(a2 + 16);
  v38 = *(_QWORD *)(a1 + 16);
  if (v41 >= v38)
    v4 = *(_QWORD *)(a1 + 16);
  else
    v4 = *(_QWORD *)(a2 + 16);
  v43 = MEMORY[0x1E0DEE9D8];
  sub_1B2029FC8(0, v4, 0);
  v40 = v2;
  v34 = a1;
  if (!v4)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v7 = 0;
    v6 = 0;
    v8 = v41;
    v22 = v38;
    if (!v38)
      goto LABEL_21;
    goto LABEL_22;
  }
  v35 = v2 + 32;
  v36 = a1 + 32;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v5 = 0;
  v6 = 0;
  v7 = 0;
  v8 = v41;
  v9 = v38;
  do
  {
    v10 = 0;
    v11 = v5;
    v5 = 1;
    if ((v11 & 1) != 0 || v7 == v9)
    {
      v13 = 0;
      v14 = 0;
      v15 = 0;
    }
    else
    {
      v12 = v7 + 1;
      if (v6 == v8)
      {
        v10 = 0;
        v13 = 0;
        v14 = 0;
        v15 = 0;
        v6 = v8;
      }
      else
      {
        v16 = (uint64_t *)(v36 + 16 * v7);
        v10 = *v16;
        v13 = v16[1];
        v17 = (uint64_t *)(v35 + 16 * v6);
        v14 = *v17;
        v15 = v17[1];
        v18 = v6 + 1;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v6 = v18;
        v9 = v38;
        v8 = v41;
        v5 = 0;
      }
      v7 = v12;
    }
    v20 = *(_QWORD *)(v43 + 16);
    v19 = *(_QWORD *)(v43 + 24);
    if (v20 >= v19 >> 1)
    {
      v32 = v7;
      v33 = v6;
      sub_1B2029FC8(v19 > 1, v20 + 1, 1);
      v7 = v32;
      v6 = v33;
      v9 = v38;
      v8 = v41;
    }
    *(_QWORD *)(v43 + 16) = v20 + 1;
    v21 = (_QWORD *)(v43 + 32 * v20);
    v21[4] = v10;
    v21[5] = v13;
    v21[6] = v14;
    v21[7] = v15;
    --v4;
  }
  while (v4);
  if ((v5 & 1) == 0)
  {
    v2 = v40;
    v22 = v9 - v7;
    if (v9 != v7)
    {
LABEL_22:
      v24 = 0;
      v25 = v8 - v6;
      v37 = v34 + 16 * v7;
      v39 = v2 + 16 * v6;
      do
      {
        if (!v25)
          break;
        v26 = *(_QWORD *)(v37 + v24 + 40);
        v42 = *(_QWORD *)(v37 + v24 + 32);
        v27 = *(_QWORD *)(v39 + v24 + 32);
        v28 = *(_QWORD *)(v39 + v24 + 40);
        v30 = *(_QWORD *)(v43 + 16);
        v29 = *(_QWORD *)(v43 + 24);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v30 >= v29 >> 1)
          sub_1B2029FC8(v29 > 1, v30 + 1, 1);
        *(_QWORD *)(v43 + 16) = v30 + 1;
        v31 = (_QWORD *)(v43 + 32 * v30);
        v31[4] = v42;
        v31[5] = v26;
        v31[6] = v27;
        v31[7] = v28;
        v24 += 16;
        --v25;
        --v22;
      }
      while (v22);
    }
  }
LABEL_21:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v43;
}

uint64_t sub_1B1ED6EB0(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  int v8;
  uint64_t v10;
  uint64_t v11;

  v2 = *(_QWORD *)(v1 + 232);
  if (!v2)
    goto LABEL_12;
  if (a1)
  {
    if (a1 == 1)
      v3 = 0x6C6174656DLL;
    else
      v3 = 0x7466697773;
    v4 = 0xE500000000000000;
    if (!*(_QWORD *)(v2 + 16))
      goto LABEL_11;
LABEL_9:
    v5 = sub_1B1DC3B00(v3, v4);
    if ((v6 & 1) != 0)
    {
      v7 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 16 * v5);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      return v7;
    }
    goto LABEL_11;
  }
  v4 = 0xE100000000000000;
  v3 = 99;
  if (*(_QWORD *)(v2 + 16))
    goto LABEL_9;
LABEL_11:
  swift_bridgeObjectRelease();
LABEL_12:
  if (qword_1ED4BF430 != -1)
    swift_once();
  v11 = 0xE000000000000000;
  swift_retain();
  sub_1B2229430();
  sub_1B2228890();
  swift_bridgeObjectRetain();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  swift_bridgeObjectRetain();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  v8 = sub_1B2228E90();
  if (qword_1ED4BF658 != -1)
    swift_once();
  v10 = 0;
  swift_retain();
  sub_1B1F1AD70(v8, &v10, 0, v11);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return 0;
}

uint64_t sub_1B1ED7144(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[4];
  char v15;
  char v16;

  v14[2] = a5;
  v14[1] = a4;
  sub_1B19F8E54(0, &qword_1EEF609B8, (uint64_t (*)(void))sub_1B1EDE1E0, (uint64_t)&_s17CodeSourceSnippetC9ParameterV10CodingKeysON, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v7 = v6;
  v8 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v9);
  v11 = (char *)v14 - v10;
  sub_1B19FA070(a1, a1[3]);
  sub_1B1EDE1E0();
  sub_1B222A180();
  v16 = 0;
  v12 = v14[3];
  sub_1B2229910();
  if (!v12)
  {
    v15 = 1;
    sub_1B2229910();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v7);
}

uint64_t sub_1B1ED7284(char *a1, char *a2)
{
  return sub_1B1F956D8(*a1, *a2);
}

uint64_t sub_1B1ED7290()
{
  _BYTE *v0;

  if (*v0)
    return 1701869940;
  else
    return 1701667182;
}

uint64_t sub_1B1ED72B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1B1EDDA7C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1B1ED72D8()
{
  sub_1B1EDE1E0();
  return sub_1B222A1D4();
}

uint64_t sub_1B1ED7300()
{
  sub_1B1EDE1E0();
  return sub_1B222A1E0();
}

uint64_t sub_1B1ED7328@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = sub_1B1EDE018(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
    a2[3] = v7;
  }
  return result;
}

uint64_t sub_1B1ED7354(_QWORD *a1)
{
  uint64_t *v1;

  return sub_1B1ED7144(a1, *v1, v1[1], v1[2], v1[3]);
}

uint64_t sub_1B1ED7370(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, char a8, int a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  uint64_t v28;
  _QWORD *v33;

  *(_OWORD *)(v28 + 48) = 0u;
  *(_OWORD *)(v28 + 64) = 0u;
  *(_OWORD *)(v28 + 32) = 0u;
  *(_BYTE *)(v28 + 80) = 2;
  *(_QWORD *)(v28 + 88) = 0;
  *(_QWORD *)(v28 + 96) = 0;
  *(_DWORD *)(v28 + 104) = 33686018;
  *(_DWORD *)(v28 + 107) = 33686018;
  *(_OWORD *)(v28 + 112) = 0u;
  *(_OWORD *)(v28 + 128) = 0u;
  *(_OWORD *)(v28 + 144) = 0u;
  *(_OWORD *)(v28 + 160) = 0u;
  *(_OWORD *)(v28 + 176) = 0u;
  *(_OWORD *)(v28 + 192) = 0u;
  *(_QWORD *)(v28 + 208) = 0;
  v33 = sub_1B1B7DF34(MEMORY[0x1E0DEE9D8]);
  *(_QWORD *)(v28 + 224) = 0;
  *(_QWORD *)(v28 + 232) = 0;
  *(_QWORD *)(v28 + 216) = v33;
  *(_BYTE *)(v28 + 240) = 0;
  *(_OWORD *)(v28 + 248) = xmmword_1B229DD00;
  *(_QWORD *)(v28 + 296) = 0;
  *(_OWORD *)(v28 + 264) = 0u;
  *(_OWORD *)(v28 + 280) = 0u;
  *(_BYTE *)(v28 + 304) = 2;
  *(_OWORD *)(v28 + 312) = 0u;
  *(_OWORD *)(v28 + 328) = 0u;
  *(_QWORD *)(v28 + 344) = 0xE000000000000000;
  *(_QWORD *)(v28 + 352) = &unk_1E63A0EE8;
  *(_QWORD *)(v28 + 360) = 0;
  *(_QWORD *)(v28 + 16) = a1;
  *(_QWORD *)(v28 + 24) = a2;
  *(_QWORD *)(v28 + 32) = a3;
  *(_QWORD *)(v28 + 40) = a4;
  swift_bridgeObjectRelease();
  *(_QWORD *)(v28 + 64) = a5;
  *(_QWORD *)(v28 + 72) = a6;
  swift_bridgeObjectRelease();
  *(_BYTE *)(v28 + 105) = a7;
  *(_BYTE *)(v28 + 106) = a8;
  *(_DWORD *)(v28 + 107) = a9;
  *(_QWORD *)(v28 + 112) = a10;
  *(_QWORD *)(v28 + 120) = a11;
  swift_bridgeObjectRelease();
  *(_QWORD *)(v28 + 128) = a12;
  *(_QWORD *)(v28 + 136) = a13;
  swift_bridgeObjectRelease();
  *(_QWORD *)(v28 + 152) = a14;
  swift_bridgeObjectRelease();
  *(_QWORD *)(v28 + 184) = a15;
  swift_bridgeObjectRelease();
  *(_QWORD *)(v28 + 192) = a16;
  swift_bridgeObjectRelease();
  *(_QWORD *)(v28 + 160) = a17;
  swift_bridgeObjectRelease();
  *(_QWORD *)(v28 + 168) = a18;
  swift_bridgeObjectRelease();
  *(_QWORD *)(v28 + 200) = a19;
  swift_bridgeObjectRelease();
  *(_QWORD *)(v28 + 208) = a20;
  swift_bridgeObjectRelease();
  *(_QWORD *)(v28 + 216) = a21;
  swift_bridgeObjectRelease();
  *(_QWORD *)(v28 + 224) = a22;
  swift_bridgeObjectRelease();
  *(_QWORD *)(v28 + 88) = a23;
  swift_bridgeObjectRelease();
  *(_QWORD *)(v28 + 96) = a24;
  swift_bridgeObjectRelease();
  sub_1B1EDE254(a25, v28 + 248);
  *(_QWORD *)(v28 + 288) = a26;
  *(_QWORD *)(v28 + 296) = a27;
  swift_bridgeObjectRelease();
  *(_BYTE *)(v28 + 304) = a28;
  return v28;
}

uint64_t sub_1B1ED7610()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = v0;
  v2 = MEMORY[0x1E0DEE9D8];
  v3 = *(_QWORD *)(v0 + 160);
  v4 = *(_QWORD *)(v0 + 168);
  if (v3)
    v5 = v3;
  else
    v5 = MEMORY[0x1E0DEE9D8];
  if (v4)
    v6 = v4;
  else
    v6 = MEMORY[0x1E0DEE9D8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v7 = sub_1B1ED6C00(v5, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B1ED3DA0(v7);
  swift_bridgeObjectRelease();
  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BA490, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
  sub_1B19FA230();
  sub_1B2228644();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v1 + 200))
    v8 = *(_QWORD *)(v1 + 200);
  else
    v8 = v2;
  if (*(_QWORD *)(v1 + 208))
    v2 = *(_QWORD *)(v1 + 208);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v9 = sub_1B1ED6C00(v8, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B1ED3DA0(v9);
  swift_bridgeObjectRelease();
  sub_1B2228644();
  swift_bridgeObjectRelease();
  sub_1B2229430();
  sub_1B2228890();
  swift_bridgeObjectRetain();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  return 0;
}

uint64_t sub_1B1ED7880(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1B1ED78AC + 4 * byte_1B229DD10[a1]))(1701667182, 0xE400000000000000);
}

uint64_t sub_1B1ED78AC()
{
  return 0x6C6562616CLL;
}

unint64_t sub_1B1ED78C0()
{
  return 0xD000000000000010;
}

unint64_t sub_1B1ED7944()
{
  return 0xD000000000000018;
}

unint64_t sub_1B1ED795C()
{
  return 0xD000000000000011;
}

unint64_t sub_1B1ED7974()
{
  return 0xD000000000000011;
}

uint64_t sub_1B1ED798C()
{
  return 1701080931;
}

uint64_t sub_1B1ED7998()
{
  return 0x70795465756C6176;
}

unint64_t sub_1B1ED79B4()
{
  return 0xD000000000000012;
}

uint64_t sub_1B1ED79CC()
{
  return 0x7461636572706564;
}

unint64_t sub_1B1ED79FC()
{
  return 0xD000000000000012;
}

uint64_t sub_1B1ED7A14()
{
  return 0x65756C6156736168;
}

uint64_t sub_1B1ED7A2C()
{
  return 0x656D617261506E69;
}

uint64_t sub_1B1ED7A4C()
{
  return 0x6D6172615074756FLL;
}

unint64_t sub_1B1ED7A70()
{
  return 0xD00000000000001CLL;
}

unint64_t sub_1B1ED7A88()
{
  return 0xD000000000000015;
}

uint64_t sub_1B1ED7AA4()
{
  return 0x6E6564646968;
}

uint64_t sub_1B1ED7AB8()
{
  return 0x7069746C6F6F74;
}

uint64_t sub_1B1ED7AD0()
{
  return 0x4370756E61656C63;
}

uint64_t sub_1B1ED7AF0()
{
  return 0x7473655470696B73;
}

uint64_t sub_1B1ED7B08()
{
  return 0x65706544656D6974;
}

unint64_t sub_1B1ED7B2C()
{
  return 0xD000000000000013;
}

uint64_t sub_1B1ED7B44()
{
  return 0x6574726F70707573;
}

uint64_t sub_1B1ED7B64()
{
  return 0x61656C6261736964;
}

void sub_1B1ED7B88()
{
  JUMPOUT(0x1B1ED7B9CLL);
}

uint64_t sub_1B1ED7BA8()
{
  return 0x53746C7561666564;
}

uint64_t sub_1B1ED7BCC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v8;

  v2 = *a2;
  v3 = sub_1B1ED7880(*a1);
  v5 = v4;
  if (v3 == sub_1B1ED7880(v2) && v5 == v6)
    v8 = 1;
  else
    v8 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_1B1ED7C54()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;

  v1 = *v0;
  sub_1B222A06C();
  sub_1B1ED7880(v1);
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

uint64_t sub_1B1ED7CB4()
{
  unsigned __int8 *v0;

  sub_1B1ED7880(*v0);
  sub_1B2228824();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B1ED7CF4()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;

  v1 = *v0;
  sub_1B222A06C();
  sub_1B1ED7880(v1);
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

uint64_t sub_1B1ED7D50@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B1EDDA2C();
  *a1 = result;
  return result;
}

uint64_t sub_1B1ED7D7C@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1B1ED7880(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1B1ED7DA4()
{
  unsigned __int8 *v0;

  return sub_1B1ED7880(*v0);
}

uint64_t sub_1B1ED7DAC@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B1EDDA2C();
  *a1 = result;
  return result;
}

void sub_1B1ED7DD0(_BYTE *a1@<X8>)
{
  *a1 = 32;
}

uint64_t sub_1B1ED7DDC()
{
  sub_1B1EDBC84();
  return sub_1B222A1D4();
}

uint64_t sub_1B1ED7E04()
{
  sub_1B1EDBC84();
  return sub_1B222A1E0();
}

uint64_t sub_1B1ED7E2C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t (*v33)(void);
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  unint64_t v39;
  char v40;
  char v41;
  char v42;
  char v43;
  char v44;
  char v45;
  char v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  uint64_t v74;
  char v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t *v78;
  _QWORD *v79;
  _QWORD *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  char v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t *v97;
  _QWORD *v98;
  _QWORD *v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  _QWORD *v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  _QWORD *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  _QWORD *v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  _QWORD *v130;
  _QWORD *v131;
  uint64_t v132;
  uint64_t v133;
  _QWORD *v134;
  unint64_t v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  _QWORD v139[6];
  uint64_t v140;

  v129 = *(_QWORD *)v1;
  sub_1B19F8E54(0, &qword_1EEF60900, (uint64_t (*)(void))sub_1B1EDBC84, (uint64_t)&_s17CodeSourceSnippetC10CodingKeysON, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v4 = *(_QWORD *)(v3 - 8);
  v127 = v3;
  v128 = v4;
  MEMORY[0x1E0C80A78](v3, v5);
  v7 = (char *)&v123 - v6;
  *(_OWORD *)(v1 + 32) = 0u;
  *(_OWORD *)(v1 + 48) = 0u;
  *(_OWORD *)(v1 + 64) = 0u;
  *(_BYTE *)(v1 + 80) = 2;
  *(_DWORD *)(v1 + 104) = 33686018;
  *(_QWORD *)(v1 + 88) = 0;
  *(_QWORD *)(v1 + 96) = 0;
  *(_OWORD *)(v1 + 112) = 0u;
  *(_DWORD *)(v1 + 107) = 33686018;
  *(_OWORD *)(v1 + 128) = 0u;
  *(_OWORD *)(v1 + 144) = 0u;
  *(_OWORD *)(v1 + 160) = 0u;
  *(_OWORD *)(v1 + 176) = 0u;
  *(_OWORD *)(v1 + 192) = 0u;
  *(_QWORD *)(v1 + 208) = 0;
  v8 = sub_1B1B7DF34(MEMORY[0x1E0DEE9D8]);
  v140 = v1;
  *(_OWORD *)(v1 + 248) = xmmword_1B229DD00;
  *(_QWORD *)(v1 + 224) = 0;
  v9 = (_QWORD *)(v1 + 224);
  *(_QWORD *)(v1 + 216) = v8;
  *(_QWORD *)(v1 + 232) = 0;
  *(_BYTE *)(v1 + 240) = 0;
  *(_OWORD *)(v1 + 264) = 0u;
  *(_OWORD *)(v1 + 280) = 0u;
  *(_QWORD *)(v1 + 296) = 0;
  *(_BYTE *)(v1 + 304) = 2;
  *(_OWORD *)(v1 + 312) = 0u;
  *(_OWORD *)(v1 + 328) = 0u;
  *(_QWORD *)(v1 + 344) = 0xE000000000000000;
  *(_QWORD *)(v1 + 352) = &unk_1E63A0D88;
  *(_QWORD *)(v1 + 360) = 0;
  v10 = a1[3];
  v130 = a1;
  sub_1B19FA070(a1, v10);
  sub_1B1EDBC84();
  v11 = v131;
  sub_1B222A150();
  if (v11)
  {
    v14 = v140;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1B1A20360(*(_QWORD *)(v14 + 248), *(_QWORD *)(v14 + 256));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_deallocPartialClassInstance();
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v130);
  }
  else
  {
    v131 = (_QWORD *)(v1 + 32);
    v125 = (_QWORD *)(v1 + 112);
    v126 = (char *)(v1 + 104);
    LOBYTE(v134) = 0;
    v12 = v127;
    v13 = sub_1B22297CC();
    v16 = v140;
    *(_QWORD *)(v140 + 16) = v13;
    *(_QWORD *)(v16 + 24) = v17;
    v18 = sub_1B2229880();
    v19 = sub_1B1DB92AC(9, v18);
    swift_bridgeObjectRelease();
    if ((v19 & 1) != 0)
    {
      sub_1B1EC5634(0, (unint64_t *)&qword_1ED4BA4B8, (unint64_t *)&qword_1ED4BA490, MEMORY[0x1E0DEA968]);
      LOBYTE(v132) = 9;
      sub_1B1EDBD38();
      sub_1B2229814();
      *(_QWORD *)(v16 + 200) = v134;
      swift_bridgeObjectRelease();
    }
    v20 = sub_1B2229880();
    v21 = sub_1B1DB92AC(10, v20);
    swift_bridgeObjectRelease();
    if ((v21 & 1) != 0)
    {
      sub_1B1EC5634(0, (unint64_t *)&qword_1ED4BA4B8, (unint64_t *)&qword_1ED4BA490, MEMORY[0x1E0DEA968]);
      LOBYTE(v132) = 10;
      sub_1B1EDBD38();
      sub_1B2229814();
      *(_QWORD *)(v16 + 208) = v134;
      swift_bridgeObjectRelease();
    }
    v22 = sub_1B2229880();
    v23 = sub_1B1DB92AC(11, v22);
    swift_bridgeObjectRelease();
    if ((v23 & 1) != 0)
    {
      sub_1B1EDDCE8();
      LOBYTE(v132) = 11;
      sub_1B1EDDFBC(&qword_1EEF60988, MEMORY[0x1E0DEA9A0], MEMORY[0x1E0DEA0D8]);
      sub_1B2229814();
      v24 = (uint64_t)v134;
      swift_retain();
      sub_1B1EDDDD8(v24, v16, (void (*)(_QWORD *, uint64_t))sub_1B1ED9594);
      swift_bridgeObjectRelease();
      swift_release();
    }
    v25 = sub_1B2229880();
    v26 = sub_1B1DB92AC(24, v25);
    swift_bridgeObjectRelease();
    if ((v26 & 1) != 0)
    {
      *v9 = sub_1B1B7DF34(MEMORY[0x1E0DEE9D8]);
      swift_bridgeObjectRelease();
      sub_1B1791524(0, &qword_1EEF60970, (uint64_t (*)(uint64_t))sub_1B1EDDCE8, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
      LOBYTE(v132) = 24;
      sub_1B1EDDD48();
      sub_1B2229814();
      v27 = (uint64_t)v134;
      swift_retain();
      sub_1B1EDDDD8(v27, v16, (void (*)(_QWORD *, uint64_t))sub_1B1ED9D3C);
      swift_bridgeObjectRelease();
      swift_release();
    }
    v28 = sub_1B2229880();
    v29 = sub_1B1DB92AC(2, v28);
    swift_bridgeObjectRelease();
    if ((v29 & 1) != 0)
    {
      sub_1B1EC5634(0, (unint64_t *)&qword_1ED4BA4B8, (unint64_t *)&qword_1ED4BA490, MEMORY[0x1E0DEA968]);
      LOBYTE(v132) = 2;
      sub_1B1EDBD38();
      sub_1B2229814();
      *(_QWORD *)(v16 + 88) = v134;
      swift_bridgeObjectRelease();
      swift_retain();
      v30 = swift_bridgeObjectRetain();
      sub_1B1EDDB4C(v30, v16);
      swift_bridgeObjectRelease();
      swift_release();
    }
    v31 = sub_1B2229880();
    v32 = sub_1B1DB92AC(17, v31);
    swift_bridgeObjectRelease();
    if ((v32 & 1) != 0)
    {
      sub_1B1A02758(0, &qword_1EEF5ED00, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
      LOBYTE(v132) = 17;
      sub_1B1EDBCC8();
      sub_1B2229814();
      *(_BYTE *)(v16 + 80) = (_BYTE)v134;
    }
    v33 = MEMORY[0x1E0DEB940];
    sub_1B1A02758(0, (unint64_t *)&qword_1ED4BA2B0, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    LOBYTE(v132) = 1;
    v34 = sub_1B1EDBDD0(&qword_1ED4BA2B8, (unint64_t *)&qword_1ED4BA2B0, (uint64_t (*)(_QWORD, uint64_t))v33, MEMORY[0x1E0DEE9A0]);
    sub_1B22297B4();
    v35 = v135;
    if (v135 == 1)
    {
      v36 = (_QWORD *)*v131;
      v35 = swift_bridgeObjectRetain();
    }
    else
    {
      v36 = v134;
    }
    *(_QWORD *)(v16 + 32) = v36;
    *(_QWORD *)(v16 + 40) = v35;
    swift_bridgeObjectRelease();
    LOBYTE(v132) = 23;
    sub_1B22297B4();
    v37 = v135;
    v131 = v7;
    v129 = v34;
    if (v135 == 1)
    {
      v38 = *(_QWORD **)(v16 + 64);
      v37 = swift_bridgeObjectRetain();
    }
    else
    {
      v38 = v134;
    }
    *(_QWORD *)(v16 + 64) = v38;
    *(_QWORD *)(v16 + 72) = v37;
    swift_bridgeObjectRelease();
    sub_1B1A02758(0, &qword_1EEF5ED00, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    LOBYTE(v132) = 3;
    v39 = sub_1B1EDBCC8();
    sub_1B22297B4();
    v124 = v39;
    v40 = (char)v134;
    if (v134 == 3)
      v40 = *v126;
    *v126 = v40;
    LOBYTE(v132) = 22;
    sub_1B22297B4();
    v41 = (char)v134;
    if (v134 == 3)
      v41 = *(_BYTE *)(v16 + 105);
    *(_BYTE *)(v16 + 105) = v41;
    LOBYTE(v132) = 25;
    sub_1B22297B4();
    v42 = (char)v134;
    if (v134 == 3)
      v42 = *(_BYTE *)(v16 + 106);
    *(_BYTE *)(v16 + 106) = v42;
    LOBYTE(v132) = 29;
    sub_1B22297B4();
    v43 = (char)v134;
    if (v134 == 3)
      v43 = *(_BYTE *)(v16 + 107);
    *(_BYTE *)(v16 + 107) = v43;
    LOBYTE(v132) = 26;
    sub_1B22297B4();
    v44 = (char)v134;
    if (v134 == 3)
      v44 = *(_BYTE *)(v140 + 108);
    *(_BYTE *)(v140 + 108) = v44;
    LOBYTE(v132) = 27;
    sub_1B22297B4();
    v45 = (char)v134;
    if (v134 == 3)
      v45 = *(_BYTE *)(v140 + 109);
    *(_BYTE *)(v140 + 109) = v45;
    LOBYTE(v132) = 14;
    sub_1B22297B4();
    v46 = (char)v134;
    if (v134 == 3)
      v46 = *(_BYTE *)(v140 + 110);
    *(_BYTE *)(v140 + 110) = v46;
    LOBYTE(v132) = 15;
    sub_1B22297B4();
    v47 = v135;
    if (v135 == 1)
    {
      v48 = (_QWORD *)*v125;
      v47 = swift_bridgeObjectRetain();
    }
    else
    {
      v48 = v134;
    }
    v49 = v140;
    *(_QWORD *)(v140 + 112) = v48;
    *(_QWORD *)(v49 + 120) = v47;
    swift_bridgeObjectRelease();
    LOBYTE(v132) = 16;
    sub_1B22297B4();
    v50 = v135;
    if (v135 == 1)
    {
      v51 = *(_QWORD **)(v140 + 128);
      v50 = swift_bridgeObjectRetain();
    }
    else
    {
      v51 = v134;
    }
    v52 = v140;
    *(_QWORD *)(v140 + 128) = v51;
    *(_QWORD *)(v52 + 136) = v50;
    swift_bridgeObjectRelease();
    sub_1B1EC5634(0, (unint64_t *)&qword_1ED4BA4B8, (unint64_t *)&qword_1ED4BA490, MEMORY[0x1E0DEA968]);
    LOBYTE(v132) = 4;
    sub_1B1EDBD38();
    sub_1B22297B4();
    v53 = (uint64_t)v134;
    if (v134 == (_QWORD *)1)
      v53 = swift_bridgeObjectRetain();
    *(_QWORD *)(v140 + 144) = v53;
    swift_bridgeObjectRelease();
    LOBYTE(v132) = 5;
    sub_1B22297B4();
    v54 = (uint64_t)v134;
    if (v134 == (_QWORD *)1)
      v54 = swift_bridgeObjectRetain();
    *(_QWORD *)(v140 + 152) = v54;
    swift_bridgeObjectRelease();
    LOBYTE(v132) = 6;
    sub_1B22297B4();
    v55 = (uint64_t)v134;
    if (v134 == (_QWORD *)1)
      v55 = swift_bridgeObjectRetain();
    *(_QWORD *)(v140 + 160) = v55;
    swift_bridgeObjectRelease();
    LOBYTE(v132) = 7;
    sub_1B22297B4();
    v56 = (uint64_t)v134;
    if (v134 == (_QWORD *)1)
      v56 = swift_bridgeObjectRetain();
    *(_QWORD *)(v140 + 168) = v56;
    swift_bridgeObjectRelease();
    sub_1B1EC5634(0, &qword_1EEF60920, &qword_1EEF60928, (uint64_t)&_s8MetadataVN);
    LOBYTE(v132) = 8;
    sub_1B1EDBE34();
    sub_1B22297B4();
    v57 = (uint64_t)v134;
    if (v134 == (_QWORD *)1)
      v57 = swift_bridgeObjectRetain();
    *(_QWORD *)(v140 + 176) = v57;
    swift_bridgeObjectRelease();
    LOBYTE(v132) = 20;
    sub_1B22297B4();
    v58 = (uint64_t)v134;
    if (v134 == (_QWORD *)1)
      v58 = swift_bridgeObjectRetain();
    *(_QWORD *)(v140 + 184) = v58;
    swift_bridgeObjectRelease();
    LOBYTE(v132) = 21;
    sub_1B22297B4();
    v59 = (uint64_t)v134;
    if (v134 == (_QWORD *)1)
      v59 = swift_bridgeObjectRetain();
    *(_QWORD *)(v140 + 192) = v59;
    swift_bridgeObjectRelease();
    sub_1B1A02758(0, &qword_1EEF58BF0, (uint64_t)&_s12MetadataTypeON, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    LOBYTE(v132) = 12;
    sub_1B1EDBF40();
    sub_1B22297B4();
    v60 = v135;
    if (v135 == 60)
    {
      v60 = *(_QWORD *)(v140 + 256);
      v61 = *(char **)(v140 + 264);
      v62 = *(_QWORD *)(v140 + 272);
      v63 = *(_QWORD *)(v140 + 280);
      v125 = *(_QWORD **)(v140 + 248);
      v126 = v61;
      v123 = v62;
      v64 = v63;
      sub_1B1A20350((uint64_t)v125, v60);
    }
    else
    {
      v125 = v134;
      v126 = v136;
      v64 = v138;
      v123 = v137;
    }
    v65 = (_QWORD *)v140;
    v66 = *(_QWORD *)(v140 + 248);
    v67 = *(_QWORD *)(v140 + 256);
    *(_QWORD *)(v140 + 248) = v125;
    v65[32] = v60;
    v68 = v123;
    v65[33] = v126;
    v65[34] = v68;
    v65[35] = v64;
    sub_1B1A20360(v66, v67);
    LOBYTE(v132) = 13;
    sub_1B22297B4();
    v69 = v135;
    if (v135 == 1)
    {
      v70 = *(_QWORD **)(v140 + 288);
      v69 = swift_bridgeObjectRetain();
    }
    else
    {
      v70 = v134;
    }
    v71 = v140;
    *(_QWORD *)(v140 + 288) = v70;
    *(_QWORD *)(v71 + 296) = v69;
    swift_bridgeObjectRelease();
    LOBYTE(v132) = 28;
    sub_1B22297B4();
    v72 = (uint64_t)v134;
    if (v134 == (_QWORD *)1)
      v72 = swift_bridgeObjectRetain();
    *(_QWORD *)(v140 + 96) = v72;
    swift_bridgeObjectRelease();
    LOBYTE(v132) = 31;
    sub_1B22297B4();
    v73 = (char)v134;
    if (v134 == 3)
      v73 = *(_BYTE *)(v140 + 304);
    *(_BYTE *)(v140 + 304) = v73;
    v74 = sub_1B2229880();
    v75 = sub_1B1DB92AC(18, v74);
    swift_bridgeObjectRelease();
    if ((v75 & 1) != 0)
    {
      sub_1B1EC5634(0, &qword_1EEF60948, &qword_1EEF60950, (uint64_t)&_s17CodeSourceSnippetC9ParameterVN);
      LOBYTE(v132) = 18;
      sub_1B1EDBFB8();
      sub_1B2229814();
      v9[11] = v134;
      swift_bridgeObjectRelease();
      v124 = v9[11];
      if (v124 && (v76 = *(_QWORD *)(v124 + 16)) != 0)
      {
        v77 = v124;
        swift_bridgeObjectRetain_n();
        v78 = (uint64_t *)(v77 + 56);
        v79 = (_QWORD *)MEMORY[0x1E0DEE9D8];
        v80 = (_QWORD *)MEMORY[0x1E0DEE9D8];
        do
        {
          v81 = (char *)*(v78 - 3);
          v82 = *(v78 - 2);
          v83 = *v78;
          v125 = (_QWORD *)*(v78 - 1);
          v126 = v81;
          v129 = v83;
          swift_bridgeObjectRetain_n();
          swift_bridgeObjectRetain();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v80 = sub_1B1C63044(0, v80[2] + 1, 1, v80);
          v85 = v80[2];
          v84 = v80[3];
          if (v85 >= v84 >> 1)
            v80 = sub_1B1C63044(v84 > 1, v85 + 1, 1, v80);
          v80[2] = v85 + 1;
          v86 = &v80[2 * v85];
          v87 = v129;
          v86[4] = v125;
          v86[5] = v87;
          swift_bridgeObjectRetain();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v79 = sub_1B1C63044(0, v79[2] + 1, 1, v79);
          v89 = v79[2];
          v88 = v79[3];
          if (v89 >= v88 >> 1)
            v79 = sub_1B1C63044(v88 > 1, v89 + 1, 1, v79);
          v78 += 4;
          v79[2] = v89 + 1;
          v90 = &v79[2 * v89];
          v90[4] = v126;
          v90[5] = v82;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          --v76;
        }
        while (v76);
        swift_bridgeObjectRelease_n();
      }
      else
      {
        v79 = (_QWORD *)MEMORY[0x1E0DEE9D8];
        v80 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      }
      v91 = v140;
      *(_QWORD *)(v140 + 168) = v80;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(v91 + 160) = v79;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(v91 + 312) = 0;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    v92 = sub_1B2229880();
    v93 = sub_1B1DB92AC(19, v92);
    swift_bridgeObjectRelease();
    if ((v93 & 1) != 0)
    {
      sub_1B1EC5634(0, &qword_1EEF60948, &qword_1EEF60950, (uint64_t)&_s17CodeSourceSnippetC9ParameterVN);
      LOBYTE(v132) = 19;
      sub_1B1EDBFB8();
      sub_1B2229814();
      v94 = v140;
      *(_QWORD *)(v140 + 320) = v134;
      swift_bridgeObjectRelease();
      v124 = *(_QWORD *)(v94 + 320);
      if (v124 && (v95 = *(_QWORD *)(v124 + 16)) != 0)
      {
        v96 = v124;
        swift_bridgeObjectRetain_n();
        v97 = (uint64_t *)(v96 + 56);
        v98 = (_QWORD *)MEMORY[0x1E0DEE9D8];
        v99 = (_QWORD *)MEMORY[0x1E0DEE9D8];
        do
        {
          v100 = (char *)*(v97 - 3);
          v101 = *(v97 - 2);
          v102 = *v97;
          v125 = (_QWORD *)*(v97 - 1);
          v126 = v100;
          v129 = v102;
          swift_bridgeObjectRetain_n();
          swift_bridgeObjectRetain();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v99 = sub_1B1C63044(0, v99[2] + 1, 1, v99);
          v104 = v99[2];
          v103 = v99[3];
          if (v104 >= v103 >> 1)
            v99 = sub_1B1C63044(v103 > 1, v104 + 1, 1, v99);
          v99[2] = v104 + 1;
          v105 = &v99[2 * v104];
          v106 = v129;
          v105[4] = v125;
          v105[5] = v106;
          swift_bridgeObjectRetain();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v98 = sub_1B1C63044(0, v98[2] + 1, 1, v98);
          v108 = v98[2];
          v107 = v98[3];
          if (v108 >= v107 >> 1)
            v98 = sub_1B1C63044(v107 > 1, v108 + 1, 1, v98);
          v97 += 4;
          v98[2] = v108 + 1;
          v109 = &v98[2 * v108];
          v109[4] = v126;
          v109[5] = v101;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          --v95;
        }
        while (v95);
        swift_bridgeObjectRelease_n();
      }
      else
      {
        v98 = (_QWORD *)MEMORY[0x1E0DEE9D8];
        v99 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      }
      v110 = v140;
      *(_QWORD *)(v140 + 208) = v99;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(v110 + 200) = v98;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(v110 + 320) = 0;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    sub_1B1EC5634(0, &qword_1EEF60948, &qword_1EEF60950, (uint64_t)&_s17CodeSourceSnippetC9ParameterVN);
    LOBYTE(v132) = 30;
    sub_1B1EDBFB8();
    sub_1B22297B4();
    v111 = (uint64_t)v134;
    if (v134 == (_QWORD *)1)
      v111 = swift_bridgeObjectRetain();
    v112 = v140;
    *(_QWORD *)(v140 + 328) = v111;
    swift_bridgeObjectRelease();
    v113 = *(_QWORD *)(v112 + 40);
    if (v113)
    {
      v114 = *(_QWORD **)(v140 + 32);
      v115 = qword_1ED4BB388;
      swift_bridgeObjectRetain();
      if (v115 != -1)
        swift_once();
      v129 = qword_1ED4D0F28;
      v116 = *(_QWORD *)(qword_1ED4D0F28 + 16);
      if (v116)
      {
        v117 = v129 + 32;
        swift_bridgeObjectRetain_n();
        while (1)
        {
          sub_1B19FA278(v117, (uint64_t)v139);
          v134 = v114;
          v135 = v113;
          sub_1B19F8C58(v139, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19FA2B4);
          v132 = sub_1B1E03DBC();
          v133 = v118;
          sub_1B1A06460();
          v119 = sub_1B2229274();
          swift_bridgeObjectRelease();
          if ((v119 & 1) != 0)
            break;
          sub_1B19F8C58(v139, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19F9FEC);
          v117 += 40;
          if (!--v116)
          {
            swift_bridgeObjectRelease_n();
            goto LABEL_109;
          }
        }
        swift_bridgeObjectRelease_n();
        (*(void (**)(_QWORD *, uint64_t))(v128 + 8))(v131, v12);
        sub_1B19F8C58(v139, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19F9FEC);
        swift_bridgeObjectRelease();
        v121 = v140;
        v122 = *(_QWORD *)(v140 + 24);
        *(_QWORD *)(v140 + 48) = *(_QWORD *)(v140 + 16);
        *(_QWORD *)(v121 + 56) = v122;
        swift_bridgeObjectRetain();
      }
      else
      {
LABEL_109:
        (*(void (**)(_QWORD *, uint64_t))(v128 + 8))(v131, v12);
        v120 = v140;
        *(_QWORD *)(v140 + 48) = v114;
        *(_QWORD *)(v120 + 56) = v113;
      }
      swift_bridgeObjectRelease();
    }
    else
    {
      (*(void (**)(_QWORD *, uint64_t))(v128 + 8))(v131, v12);
    }
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v130);
    return v140;
  }
  return v14;
}

uint64_t sub_1B1ED9594(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  BOOL v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v36;
  char v37;
  unint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  _QWORD *v43;
  unint64_t v44;
  _QWORD *v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  char *v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t result;
  _QWORD v59[2];
  __int128 v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  int *v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  unint64_t v76;
  uint64_t v77;

  v69 = a2;
  sub_1B1B1F358();
  v68 = v4;
  MEMORY[0x1E0C80A78](v4, v5);
  v67 = (char *)v59 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1B222820C();
  v65 = *(_QWORD *)(v7 - 8);
  v66 = v7;
  MEMORY[0x1E0C80A78](v7, v8);
  v64 = (char *)v59 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *a1;
  v11 = a1[1];
  v63 = a1[2];
  v74 = a1[3];
  v12 = v10 == 42 && v11 == 0xE100000000000000;
  if (v12 || (sub_1B2229D24() & 1) != 0)
  {
    v75 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    sub_1B2029FFC(0, 3, 0);
    v13 = v75;
    v15 = v75[2];
    v14 = v75[3];
    v16 = v15 + 1;
    if (v15 >= v14 >> 1)
    {
      sub_1B2029FFC(v14 > 1, v15 + 1, 1);
      v13 = v75;
    }
    v13[2] = v16;
    v17 = &v13[2 * v15];
    v17[4] = 99;
    v17[5] = 0xE100000000000000;
    v75 = v13;
    v18 = v13[3];
    if (v16 >= v18 >> 1)
    {
      sub_1B2029FFC(v18 > 1, v15 + 2, 1);
      v13 = v75;
    }
    v13[2] = v15 + 2;
    v19 = &v13[2 * v16];
    v19[4] = 0x6C6174656DLL;
    v19[5] = 0xE500000000000000;
    v75 = v13;
    v21 = v13[2];
    v20 = v13[3];
    if (v21 >= v20 >> 1)
    {
      sub_1B2029FFC(v20 > 1, v21 + 1, 1);
      v13 = v75;
    }
    v13[2] = v21 + 1;
    v22 = &v13[2 * v21];
    v22[4] = 0x7466697773;
    v22[5] = 0xE500000000000000;
    v75 = v13;
    sub_1B1A02758(0, (unint64_t *)&qword_1ED4BA490, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    sub_1B19FA230();
    v10 = sub_1B2228644();
    v11 = v23;
    swift_release();
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  v75 = (_QWORD *)v10;
  v76 = v11;
  sub_1B1A06460();
  v24 = sub_1B2229280();
  swift_bridgeObjectRelease();
  v25 = *(_QWORD *)(v24 + 16);
  v26 = v69;
  if (!v25)
    return swift_bridgeObjectRelease();
  v59[1] = v2;
  swift_bridgeObjectRetain();
  v59[0] = v24;
  v27 = (_QWORD *)(v24 + 56);
  v61 = 0x80000001B23428A0;
  v62 = 0x80000001B2342880;
  v60 = xmmword_1B226D240;
  while (1)
  {
    v31 = *v27;
    swift_bridgeObjectRetain();
    v77 = v31;
    v32 = sub_1B2229160();
    v34 = v33;
    if ((unint64_t)sub_1B2229730() > 2)
    {
      if (qword_1ED4BF430 != -1)
        swift_once();
      v75 = 0;
      v76 = 0xE000000000000000;
      v72 = qword_1ED4D0FB0;
      swift_retain();
      sub_1B2229430();
      sub_1B2228890();
      swift_bridgeObjectRetain();
      sub_1B2228890();
      swift_bridgeObjectRelease();
      sub_1B2228890();
      sub_1B2228890();
      swift_bridgeObjectRelease();
      sub_1B2228890();
      v45 = v75;
      v44 = v76;
      v46 = sub_1B2228E90();
      if (qword_1ED4BF658 != -1)
        swift_once();
      v71 = v27;
      v73 = v25;
      v47 = qword_1ED4D0FD0;
      v48 = qword_1ED4BF688;
      swift_retain();
      if (v48 != -1)
        swift_once();
      sub_1B1791524(0, (unint64_t *)&qword_1ED4BF700, (uint64_t (*)(uint64_t))sub_1B1BB9F44, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
      v49 = swift_allocObject();
      *(_OWORD *)(v49 + 16) = v60;
      *(_QWORD *)(v49 + 56) = MEMORY[0x1E0DEA968];
      *(_QWORD *)(v49 + 64) = sub_1B1B1F47C();
      *(_QWORD *)(v49 + 32) = v45;
      *(_QWORD *)(v49 + 40) = v44;
      swift_bridgeObjectRetain();
      sub_1B222835C();
      swift_bridgeObjectRelease();
      swift_retain();
      v70 = v47;
      v50 = v64;
      sub_1B2228200();
      v51 = (uint64_t)v67;
      v52 = v68[12];
      v53 = v68[16];
      v54 = v46;
      v55 = &v67[v68[20]];
      (*(void (**)(char *, char *, uint64_t))(v65 + 32))(v67, v50, v66);
      *(_BYTE *)(v51 + v52) = v54;
      *(_QWORD *)(v51 + v53) = 0;
      *(_QWORD *)v55 = v45;
      *((_QWORD *)v55 + 1) = v44;
      swift_bridgeObjectRetain();
      sub_1B2228428();
      swift_release();
      sub_1B1B429AC(v51);
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      v26 = v69;
      v25 = v73;
      v27 = v71;
      goto LABEL_19;
    }
    swift_bridgeObjectRetain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v75 = *(_QWORD **)(v26 + 216);
    v36 = v75;
    *(_QWORD *)(v26 + 216) = 0x8000000000000000;
    v38 = sub_1B1DC3B00(v32, v34);
    v39 = v37;
    v40 = v36[2] + ((v37 & 1) == 0);
    if (v36[3] < v40)
      break;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      v43 = v75;
      if ((v37 & 1) != 0)
        goto LABEL_34;
    }
    else
    {
      sub_1B1EA8664();
      v43 = v75;
      if ((v39 & 1) != 0)
      {
LABEL_34:
        v56 = (uint64_t *)(v43[7] + 16 * v38);
        swift_bridgeObjectRelease();
        v57 = v74;
        *v56 = v63;
        v56[1] = v57;
        goto LABEL_18;
      }
    }
LABEL_17:
    v43[(v38 >> 6) + 8] |= 1 << v38;
    v28 = (uint64_t *)(v43[6] + 16 * v38);
    *v28 = v32;
    v28[1] = v34;
    v29 = (uint64_t *)(v43[7] + 16 * v38);
    v30 = v74;
    *v29 = v63;
    v29[1] = v30;
    ++v43[2];
    swift_bridgeObjectRetain();
LABEL_18:
    *(_QWORD *)(v26 + 216) = v43;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_19:
    v27 += 4;
    if (!--v25)
    {
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
  }
  sub_1B1E91634(v40, isUniquelyReferenced_nonNull_native);
  v41 = sub_1B1DC3B00(v32, v34);
  if ((v39 & 1) == (v42 & 1))
  {
    v38 = v41;
    v43 = v75;
    if ((v39 & 1) != 0)
      goto LABEL_34;
    goto LABEL_17;
  }
  result = sub_1B2229FC4();
  __break(1u);
  return result;
}

uint64_t sub_1B1ED9D3C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  BOOL v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v36;
  char v37;
  unint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  _QWORD *v43;
  unint64_t v44;
  _QWORD *v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  char *v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t result;
  _QWORD v59[2];
  __int128 v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  int *v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  unint64_t v76;
  uint64_t v77;

  v69 = a2;
  sub_1B1B1F358();
  v68 = v4;
  MEMORY[0x1E0C80A78](v4, v5);
  v67 = (char *)v59 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1B222820C();
  v65 = *(_QWORD *)(v7 - 8);
  v66 = v7;
  MEMORY[0x1E0C80A78](v7, v8);
  v64 = (char *)v59 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *a1;
  v11 = a1[1];
  v63 = a1[2];
  v74 = a1[3];
  v12 = v10 == 42 && v11 == 0xE100000000000000;
  if (v12 || (sub_1B2229D24() & 1) != 0)
  {
    v75 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    sub_1B2029FFC(0, 3, 0);
    v13 = v75;
    v15 = v75[2];
    v14 = v75[3];
    v16 = v15 + 1;
    if (v15 >= v14 >> 1)
    {
      sub_1B2029FFC(v14 > 1, v15 + 1, 1);
      v13 = v75;
    }
    v13[2] = v16;
    v17 = &v13[2 * v15];
    v17[4] = 99;
    v17[5] = 0xE100000000000000;
    v75 = v13;
    v18 = v13[3];
    if (v16 >= v18 >> 1)
    {
      sub_1B2029FFC(v18 > 1, v15 + 2, 1);
      v13 = v75;
    }
    v13[2] = v15 + 2;
    v19 = &v13[2 * v16];
    v19[4] = 0x6C6174656DLL;
    v19[5] = 0xE500000000000000;
    v75 = v13;
    v21 = v13[2];
    v20 = v13[3];
    if (v21 >= v20 >> 1)
    {
      sub_1B2029FFC(v20 > 1, v21 + 1, 1);
      v13 = v75;
    }
    v13[2] = v21 + 1;
    v22 = &v13[2 * v21];
    v22[4] = 0x7466697773;
    v22[5] = 0xE500000000000000;
    v75 = v13;
    sub_1B1A02758(0, (unint64_t *)&qword_1ED4BA490, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    sub_1B19FA230();
    v10 = sub_1B2228644();
    v11 = v23;
    swift_release();
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  v75 = (_QWORD *)v10;
  v76 = v11;
  sub_1B1A06460();
  v24 = sub_1B2229280();
  swift_bridgeObjectRelease();
  v25 = *(_QWORD *)(v24 + 16);
  v26 = v69;
  if (!v25)
    return swift_bridgeObjectRelease();
  v59[1] = v2;
  swift_bridgeObjectRetain();
  v59[0] = v24;
  v27 = (_QWORD *)(v24 + 56);
  v61 = 0x80000001B23428A0;
  v62 = 0x80000001B2342880;
  v60 = xmmword_1B226D240;
  while (1)
  {
    v31 = *v27;
    swift_bridgeObjectRetain();
    v77 = v31;
    v32 = sub_1B2229160();
    v34 = v33;
    if ((unint64_t)sub_1B2229730() > 2)
    {
      if (qword_1ED4BF430 != -1)
        swift_once();
      v75 = 0;
      v76 = 0xE000000000000000;
      v72 = qword_1ED4D0FB0;
      swift_retain();
      sub_1B2229430();
      sub_1B2228890();
      swift_bridgeObjectRetain();
      sub_1B2228890();
      swift_bridgeObjectRelease();
      sub_1B2228890();
      sub_1B2228890();
      swift_bridgeObjectRelease();
      sub_1B2228890();
      v45 = v75;
      v44 = v76;
      v46 = sub_1B2228E90();
      if (qword_1ED4BF658 != -1)
        swift_once();
      v71 = v27;
      v73 = v25;
      v47 = qword_1ED4D0FD0;
      v48 = qword_1ED4BF688;
      swift_retain();
      if (v48 != -1)
        swift_once();
      sub_1B1791524(0, (unint64_t *)&qword_1ED4BF700, (uint64_t (*)(uint64_t))sub_1B1BB9F44, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
      v49 = swift_allocObject();
      *(_OWORD *)(v49 + 16) = v60;
      *(_QWORD *)(v49 + 56) = MEMORY[0x1E0DEA968];
      *(_QWORD *)(v49 + 64) = sub_1B1B1F47C();
      *(_QWORD *)(v49 + 32) = v45;
      *(_QWORD *)(v49 + 40) = v44;
      swift_bridgeObjectRetain();
      sub_1B222835C();
      swift_bridgeObjectRelease();
      swift_retain();
      v70 = v47;
      v50 = v64;
      sub_1B2228200();
      v51 = (uint64_t)v67;
      v52 = v68[12];
      v53 = v68[16];
      v54 = v46;
      v55 = &v67[v68[20]];
      (*(void (**)(char *, char *, uint64_t))(v65 + 32))(v67, v50, v66);
      *(_BYTE *)(v51 + v52) = v54;
      *(_QWORD *)(v51 + v53) = 0;
      *(_QWORD *)v55 = v45;
      *((_QWORD *)v55 + 1) = v44;
      swift_bridgeObjectRetain();
      sub_1B2228428();
      swift_release();
      sub_1B1B429AC(v51);
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      v26 = v69;
      v25 = v73;
      v27 = v71;
      goto LABEL_19;
    }
    swift_bridgeObjectRetain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v75 = *(_QWORD **)(v26 + 224);
    v36 = v75;
    *(_QWORD *)(v26 + 224) = 0x8000000000000000;
    v38 = sub_1B1DC3B00(v32, v34);
    v39 = v37;
    v40 = v36[2] + ((v37 & 1) == 0);
    if (v36[3] < v40)
      break;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      v43 = v75;
      if ((v37 & 1) != 0)
        goto LABEL_34;
    }
    else
    {
      sub_1B1EA8664();
      v43 = v75;
      if ((v39 & 1) != 0)
      {
LABEL_34:
        v56 = (uint64_t *)(v43[7] + 16 * v38);
        swift_bridgeObjectRelease();
        v57 = v74;
        *v56 = v63;
        v56[1] = v57;
        goto LABEL_18;
      }
    }
LABEL_17:
    v43[(v38 >> 6) + 8] |= 1 << v38;
    v28 = (uint64_t *)(v43[6] + 16 * v38);
    *v28 = v32;
    v28[1] = v34;
    v29 = (uint64_t *)(v43[7] + 16 * v38);
    v30 = v74;
    *v29 = v63;
    v29[1] = v30;
    ++v43[2];
    swift_bridgeObjectRetain();
LABEL_18:
    *(_QWORD *)(v26 + 224) = v43;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_19:
    v27 += 4;
    if (!--v25)
    {
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
  }
  sub_1B1E91634(v40, isUniquelyReferenced_nonNull_native);
  v41 = sub_1B1DC3B00(v32, v34);
  if ((v39 & 1) == (v42 & 1))
  {
    v38 = v41;
    v43 = v75;
    if ((v39 & 1) != 0)
      goto LABEL_34;
    goto LABEL_17;
  }
  result = sub_1B2229FC4();
  __break(1u);
  return result;
}

uint64_t *sub_1B1EDA4E4(uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v27;
  unint64_t v28;
  char v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  _QWORD *v34;
  uint64_t *v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;

  v2 = a2;
  v3 = *result;
  v4 = result[1];
  v5 = *(_QWORD *)(a2 + 216);
  v40 = *result;
  if (!*(_QWORD *)(v5 + 16))
  {
LABEL_10:
    v12 = *(_QWORD *)(v2 + 88);
    if (!v12)
      return result;
    goto LABEL_11;
  }
  swift_bridgeObjectRetain();
  v6 = sub_1B1DC3B00(v3, v4);
  if ((v7 & 1) == 0)
  {
    result = (uint64_t *)swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  v8 = (uint64_t *)(*(_QWORD *)(v5 + 56) + 16 * v6);
  v10 = *v8;
  v9 = v8[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v42 = (_QWORD *)v10;
  v43 = v9;
  sub_1B1A06460();
  LOBYTE(v10) = sub_1B2229274();
  result = (uint64_t *)swift_bridgeObjectRelease();
  if ((v10 & 1) != 0)
    goto LABEL_10;
  if (qword_1ED4BF430 != -1)
    swift_once();
  v42 = 0;
  v43 = 0xE000000000000000;
  swift_retain();
  sub_1B2229430();
  sub_1B2228890();
  swift_bridgeObjectRetain();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  if (*(_QWORD *)(*(_QWORD *)(a2 + 216) + 16))
  {
    swift_bridgeObjectRetain();
    sub_1B1DC3B00(v3, v4);
    if ((v11 & 1) != 0)
      swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  sub_1B2228890();
  swift_bridgeObjectRelease();
  v36 = (uint64_t)v42;
  v37 = sub_1B2228E90();
  if (qword_1ED4BF658 != -1)
    swift_once();
  v42 = 0;
  swift_retain();
  sub_1B1F1AD70(v37, (uint64_t *)&v42, v36, v43);
  swift_release();
  swift_bridgeObjectRelease();
  result = (uint64_t *)swift_release();
  v2 = a2;
  v3 = v40;
  v12 = *(_QWORD *)(a2 + 88);
  if (v12)
  {
LABEL_11:
    v13 = *(_QWORD *)(v12 + 16);
    if (!v13)
      return result;
    swift_bridgeObjectRetain_n();
    v14 = 40;
    v38 = v12;
    while (1)
    {
      v17 = *(_QWORD *)(v2 + 216);
      v18 = *(_QWORD *)(v17 + 16);
      v44 = *(_QWORD *)(v12 + v14);
      if (v18)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v19 = sub_1B1DC3B00(v3, v4);
        if ((v20 & 1) != 0)
        {
          v21 = (uint64_t *)(*(_QWORD *)(v17 + 56) + 16 * v19);
          v22 = *v21;
          v23 = v21[1];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          goto LABEL_21;
        }
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRetain();
      }
      v22 = 0;
      v23 = 0;
LABEL_21:
      v42 = (_QWORD *)v22;
      v43 = v23;
      sub_1B1A06460();
      v24 = sub_1B222922C();
      v41 = v25;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v42 = *(_QWORD **)(v2 + 216);
      v27 = (uint64_t)v42;
      *(_QWORD *)(v2 + 216) = 0x8000000000000000;
      v3 = v40;
      v28 = sub_1B1DC3B00(v40, v4);
      v30 = v29;
      v31 = *(_QWORD *)(v27 + 16) + ((v29 & 1) == 0);
      if (*(_QWORD *)(v27 + 24) >= v31)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          sub_1B1EA8664();
        v3 = v40;
      }
      else
      {
        sub_1B1E91634(v31, isUniquelyReferenced_nonNull_native);
        v32 = sub_1B1DC3B00(v40, v4);
        if ((v30 & 1) != (v33 & 1))
        {
          result = (uint64_t *)sub_1B2229FC4();
          __break(1u);
          return result;
        }
        v28 = v32;
      }
      v12 = v38;
      v34 = v42;
      if ((v30 & 1) != 0)
      {
        v35 = (uint64_t *)(v42[7] + 16 * v28);
        swift_bridgeObjectRelease();
        *v35 = v24;
        v35[1] = v41;
      }
      else
      {
        v42[(v28 >> 6) + 8] |= 1 << v28;
        v15 = (uint64_t *)(v34[6] + 16 * v28);
        *v15 = v3;
        v15[1] = v4;
        v16 = (uint64_t *)(v34[7] + 16 * v28);
        *v16 = v24;
        v16[1] = v41;
        ++v34[2];
        swift_bridgeObjectRetain();
      }
      v2 = a2;
      *(_QWORD *)(a2 + 216) = v34;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v14 += 16;
      if (!--v13)
        return (uint64_t *)swift_bridgeObjectRelease_n();
    }
  }
  return result;
}

uint64_t sub_1B1EDA9F8(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  __int128 v19;
  _QWORD v20[4];
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  char v24;

  v3 = v1;
  sub_1B19F8E54(0, &qword_1EEF60990, (uint64_t (*)(void))sub_1B1EDBC84, (uint64_t)&_s17CodeSourceSnippetC10CodingKeysON, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = (char *)v20 - v9;
  sub_1B19FA070(a1, a1[3]);
  sub_1B1EDBC84();
  sub_1B222A180();
  LOBYTE(v21) = 0;
  swift_bridgeObjectRetain();
  sub_1B2229910();
  if (v2)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    return swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    *(_QWORD *)&v21 = *(_QWORD *)(v3 + 216);
    v24 = 11;
    sub_1B1EDDCE8();
    v13 = v12;
    sub_1B1EDDFBC(&qword_1EEF60998, MEMORY[0x1E0DEA970], MEMORY[0x1E0DEA0B8]);
    sub_1B2229958();
    v14 = *(_QWORD *)(v3 + 200);
    v20[3] = v13;
    *(_QWORD *)&v21 = v14;
    v24 = 9;
    sub_1B1A02758(0, (unint64_t *)&qword_1ED4BA490, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    v16 = v15;
    v17 = sub_1B1E10124();
    sub_1B2229904();
    *(_QWORD *)&v21 = *(_QWORD *)(v3 + 208);
    v24 = 10;
    sub_1B2229904();
    *(_QWORD *)&v21 = *(_QWORD *)(v3 + 88);
    v24 = 2;
    sub_1B2229904();
    v20[1] = v17;
    v20[2] = v16;
    LOBYTE(v21) = 17;
    sub_1B22298E0();
    LOBYTE(v21) = 1;
    swift_bridgeObjectRetain();
    sub_1B22298D4();
    swift_bridgeObjectRelease();
    LOBYTE(v21) = 23;
    swift_bridgeObjectRetain();
    sub_1B22298D4();
    swift_bridgeObjectRelease();
    LOBYTE(v21) = 3;
    sub_1B22298E0();
    LOBYTE(v21) = 22;
    sub_1B22298E0();
    LOBYTE(v21) = 25;
    sub_1B22298E0();
    LOBYTE(v21) = 29;
    sub_1B22298E0();
    LOBYTE(v21) = 26;
    sub_1B22298E0();
    LOBYTE(v21) = 27;
    sub_1B22298E0();
    LOBYTE(v21) = 14;
    sub_1B22298E0();
    LOBYTE(v21) = 15;
    swift_bridgeObjectRetain();
    sub_1B22298D4();
    swift_bridgeObjectRelease();
    LOBYTE(v21) = 16;
    swift_bridgeObjectRetain();
    sub_1B22298D4();
    swift_bridgeObjectRelease();
    *(_QWORD *)&v21 = *(_QWORD *)(v3 + 144);
    v24 = 4;
    sub_1B2229904();
    *(_QWORD *)&v21 = *(_QWORD *)(v3 + 160);
    v24 = 6;
    sub_1B2229904();
    *(_QWORD *)&v21 = *(_QWORD *)(v3 + 168);
    v24 = 7;
    sub_1B2229904();
    *(_QWORD *)&v21 = *(_QWORD *)(v3 + 176);
    v24 = 8;
    sub_1B1A02758(0, &qword_1EEF60928, (uint64_t)&_s8MetadataVN, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    sub_1B1EDBEC4(&qword_1EEF609A0, (uint64_t (*)(void))sub_1B1B25B0C, MEMORY[0x1E0DEAF10]);
    sub_1B2229904();
    *(_QWORD *)&v21 = *(_QWORD *)(v3 + 184);
    v24 = 20;
    sub_1B2229904();
    *(_QWORD *)&v21 = *(_QWORD *)(v3 + 192);
    v24 = 21;
    sub_1B2229904();
    v18 = *(_QWORD *)(v3 + 280);
    v19 = *(_OWORD *)(v3 + 264);
    v21 = *(_OWORD *)(v3 + 248);
    v22 = v19;
    v23 = v18;
    v24 = 12;
    sub_1B19FA094();
    sub_1B2229904();
    LOBYTE(v21) = 13;
    swift_bridgeObjectRetain();
    sub_1B22298D4();
    swift_bridgeObjectRelease();
    *(_QWORD *)&v21 = *(_QWORD *)(v3 + 224);
    v24 = 24;
    sub_1B2229904();
    *(_QWORD *)&v21 = *(_QWORD *)(v3 + 96);
    v24 = 28;
    sub_1B2229904();
    LOBYTE(v21) = 31;
    sub_1B22298E0();
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  }
}

uint64_t sub_1B1EDB158()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v10;
  unint64_t v11;

  if (!*(_QWORD *)(v0 + 160))
    goto LABEL_8;
  v1 = swift_bridgeObjectRetain();
  v2 = sub_1B1EDD82C(v1, (uint64_t)&unk_1E63A0D20);
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v2 + 16))
  {
    if (qword_1ED4BF430 != -1)
      swift_once();
    v11 = 0xE000000000000000;
    swift_retain();
    sub_1B2229430();
    sub_1B2228890();
    swift_bridgeObjectRetain();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    swift_bridgeObjectRetain();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    MEMORY[0x1B5E20670](v2, MEMORY[0x1E0DEA968]);
    sub_1B2228890();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    v3 = sub_1B2228E90();
    if (qword_1ED4BF658 != -1)
      swift_once();
    v10 = 0;
    swift_retain();
    sub_1B1F1AD70(v3, &v10, 0, 0xE000000000000000);
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
LABEL_8:
    if (*(_QWORD *)(v0 + 200))
      goto LABEL_9;
    return swift_arrayDestroy();
  }
  swift_bridgeObjectRelease();
  if (!*(_QWORD *)(v0 + 200))
    return swift_arrayDestroy();
LABEL_9:
  v4 = swift_bridgeObjectRetain();
  v5 = sub_1B1EDD82C(v4, (uint64_t)&unk_1E63A0D20);
  swift_bridgeObjectRelease();
  swift_arrayDestroy();
  if (!*(_QWORD *)(v5 + 16))
    return swift_bridgeObjectRelease();
  if (qword_1ED4BF430 != -1)
    swift_once();
  v10 = 0;
  v11 = 0xE000000000000000;
  swift_retain();
  sub_1B2229430();
  sub_1B2228890();
  swift_bridgeObjectRetain();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  swift_bridgeObjectRetain();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  MEMORY[0x1B5E20670](v5, MEMORY[0x1E0DEA968]);
  sub_1B2228890();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  v7 = v10;
  v6 = v11;
  v8 = sub_1B2228E90();
  if (qword_1ED4BF658 != -1)
    swift_once();
  v10 = 0;
  swift_retain();
  sub_1B1F1AD70(v8, &v10, v7, v6);
  swift_release();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t sub_1B1EDB5B0()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B1A20360(*(_QWORD *)(v0 + 248), *(_QWORD *)(v0 + 256));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_1B1EDB6AC()
{
  sub_1B1EDB5B0();
  return swift_deallocClassInstance();
}

uint64_t _s17CodeSourceSnippetCMa()
{
  return objc_opt_self();
}

ValueMetadata *_s17CodeSourceSnippetC9ParameterVMa()
{
  return &_s17CodeSourceSnippetC9ParameterVN;
}

uint64_t sub_1B1EDB6FC(_QWORD **a1, _QWORD **a2)
{
  return sub_1B1EDBAC0(*a1, *a2);
}

uint64_t sub_1B1EDB708@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t result;

  v5 = swift_allocObject();
  result = sub_1B1ED7E2C(a1);
  if (!v2)
    *a2 = v5;
  return result;
}

uint64_t sub_1B1EDB75C(_QWORD *a1)
{
  return sub_1B1EDA9F8(a1);
}

uint64_t sub_1B1EDB77C()
{
  return sub_1B1ED7610();
}

uint64_t sub_1B1EDB79C(uint64_t a1, uint64_t a2, uint64_t a3, char a4, _QWORD *a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  char v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  _QWORD *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  unint64_t v43;
  char v44;
  char v45;
  char v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t result;

  swift_bridgeObjectRetain();
  swift_retain();
  v7 = sub_1B1DF5D60();
  if (!v8)
    goto LABEL_19;
  v11 = v7;
  v12 = v8;
  v13 = v9;
  v14 = v10;
  v15 = (_QWORD *)*a5;
  v17 = sub_1B1DC3B00(v7, v8);
  v18 = v16;
  v19 = v15[2] + ((v16 & 1) == 0);
  if (v15[3] >= v19)
  {
    if ((a4 & 1) != 0)
    {
      v22 = (_QWORD *)*a5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
    }
    else
    {
      sub_1B1EA8664();
      v22 = (_QWORD *)*a5;
      if ((v18 & 1) != 0)
        goto LABEL_8;
    }
LABEL_10:
    v22[(v17 >> 6) + 8] |= 1 << v17;
    v27 = (uint64_t *)(v22[6] + 16 * v17);
    *v27 = v11;
    v27[1] = v12;
    v28 = (_QWORD *)(v22[7] + 16 * v17);
    *v28 = v13;
    v28[1] = v14;
    ++v22[2];
LABEL_11:
    v29 = sub_1B1DF5D60();
    if (v30)
    {
      v33 = v29;
      v34 = v30;
      v35 = v31;
      v36 = v32;
      do
      {
        v42 = (_QWORD *)*a5;
        v43 = sub_1B1DC3B00(v33, v34);
        v45 = v44;
        if (v42[3] < (int64_t)(v42[2] + ((v44 & 1) == 0)))
        {
          sub_1B1E91634(v42[2] + ((v44 & 1) == 0), 1);
          v43 = sub_1B1DC3B00(v33, v34);
          if ((v45 & 1) != (v46 & 1))
            goto LABEL_20;
        }
        v47 = (_QWORD *)*a5;
        v48 = 16 * v43;
        if ((v45 & 1) != 0)
        {
          v49 = (uint64_t *)(v47[7] + v48);
          v51 = *v49;
          v50 = v49[1];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v52 = (_QWORD *)(v47[7] + v48);
          swift_bridgeObjectRelease();
          *v52 = v51;
          v52[1] = v50;
        }
        else
        {
          v47[(v43 >> 6) + 8] |= 1 << v43;
          v37 = (uint64_t *)(v47[6] + v48);
          *v37 = v33;
          v37[1] = v34;
          v38 = (_QWORD *)(v47[7] + v48);
          *v38 = v35;
          v38[1] = v36;
          ++v47[2];
        }
        v33 = sub_1B1DF5D60();
        v34 = v39;
        v35 = v40;
        v36 = v41;
      }
      while (v39);
    }
LABEL_19:
    swift_release();
    swift_bridgeObjectRelease();
    sub_1B19F8D30();
    return swift_release();
  }
  sub_1B1E91634(v19, a4 & 1);
  v20 = sub_1B1DC3B00(v11, v12);
  if ((v18 & 1) == (v21 & 1))
  {
    v17 = v20;
    v22 = (_QWORD *)*a5;
    if ((v18 & 1) == 0)
      goto LABEL_10;
LABEL_8:
    v23 = (uint64_t *)(v22[7] + 16 * v17);
    v25 = *v23;
    v24 = v23[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v26 = (_QWORD *)(v22[7] + 16 * v17);
    swift_bridgeObjectRelease();
    *v26 = v25;
    v26[1] = v24;
    goto LABEL_11;
  }
LABEL_20:
  result = sub_1B2229FC4();
  __break(1u);
  return result;
}

uint64_t sub_1B1EDBAC0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  if (a1[2] != a2[2] || a1[3] != a2[3])
  {
    LOBYTE(v5) = 0;
    if ((sub_1B2229D24() & 1) == 0)
      return v5 & 1;
  }
  v6 = (_QWORD *)a1[20];
  v7 = (_QWORD *)a2[20];
  if (v6)
  {
    if (!v7 || (sub_1B1CC9D08(v6, v7) & 1) == 0)
      goto LABEL_34;
  }
  else if (v7)
  {
    goto LABEL_34;
  }
  v8 = (_QWORD *)a1[21];
  v9 = (_QWORD *)a2[21];
  if (v8)
  {
    if (!v9 || (sub_1B1CC9D08(v8, v9) & 1) == 0)
      goto LABEL_34;
  }
  else if (v9)
  {
    goto LABEL_34;
  }
  v10 = (_QWORD *)a1[25];
  v11 = (_QWORD *)a2[25];
  if (v10)
  {
    if (!v11 || (sub_1B1CC9D08(v10, v11) & 1) == 0)
      goto LABEL_34;
  }
  else if (v11)
  {
    goto LABEL_34;
  }
  v12 = (_QWORD *)a1[26];
  v13 = (_QWORD *)a2[26];
  if (v12)
  {
    if (!v13 || (sub_1B1CC9D08(v12, v13) & 1) == 0)
      goto LABEL_34;
  }
  else if (v13)
  {
    goto LABEL_34;
  }
  v14 = a1[27];
  v15 = a2[27];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v16 = sub_1B1D48FE0(v14, v15);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v16 & 1) == 0)
    goto LABEL_34;
  v5 = a2[28];
  if (a1[28])
  {
    if (!v5)
      return v5 & 1;
    swift_bridgeObjectRetain();
    v17 = swift_bridgeObjectRetain();
    v18 = sub_1B1D48FE0(v17, v5);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v18 & 1) != 0)
      goto LABEL_30;
LABEL_34:
    LOBYTE(v5) = 0;
    return v5 & 1;
  }
  if (v5)
    goto LABEL_34;
LABEL_30:
  v19 = sub_1B1ED4440();
  v21 = v20;
  if (v19 == sub_1B1ED4440() && v21 == v22)
    LOBYTE(v5) = 1;
  else
    LOBYTE(v5) = sub_1B2229D24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

unint64_t sub_1B1EDBC84()
{
  unint64_t result;

  result = qword_1EEF60908;
  if (!qword_1EEF60908)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B229E190, &_s17CodeSourceSnippetC10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EEF60908);
  }
  return result;
}

unint64_t sub_1B1EDBCC8()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_1EEF60910;
  if (!qword_1EEF60910)
  {
    sub_1B1A02758(255, &qword_1EEF5ED00, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    v2 = MEMORY[0x1E0DEAFC0];
    result = MEMORY[0x1B5E23E74](MEMORY[0x1E0DEE9A0], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_1EEF60910);
  }
  return result;
}

unint64_t sub_1B1EDBD38()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  result = qword_1EEF60918;
  if (!qword_1EEF60918)
  {
    sub_1B1EC5634(255, (unint64_t *)&qword_1ED4BA4B8, (unint64_t *)&qword_1ED4BA490, MEMORY[0x1E0DEA968]);
    v2 = v1;
    v3 = sub_1B1EDBDD0((unint64_t *)&qword_1ED4BA4A8, (unint64_t *)&qword_1ED4BA490, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8], MEMORY[0x1E0DEAF40]);
    result = MEMORY[0x1B5E23E74](MEMORY[0x1E0DEE9A0], v2, &v3);
    atomic_store(result, (unint64_t *)&qword_1EEF60918);
  }
  return result;
}

uint64_t sub_1B1EDBDD0(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(_QWORD, uint64_t), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    sub_1B1A02758(255, a2, MEMORY[0x1E0DEA968], a3);
    v8 = MEMORY[0x1E0DEA9A0];
    result = MEMORY[0x1B5E23E74](a4, v7, &v8);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1B1EDBE34()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  result = qword_1EEF60930;
  if (!qword_1EEF60930)
  {
    sub_1B1EC5634(255, &qword_1EEF60920, &qword_1EEF60928, (uint64_t)&_s8MetadataVN);
    v2 = v1;
    v3 = sub_1B1EDBEC4(&qword_1EEF60938, (uint64_t (*)(void))sub_1B1B259A8, MEMORY[0x1E0DEAF40]);
    result = MEMORY[0x1B5E23E74](MEMORY[0x1E0DEE9A0], v2, &v3);
    atomic_store(result, (unint64_t *)&qword_1EEF60930);
  }
  return result;
}

uint64_t sub_1B1EDBEC4(unint64_t *a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = *a1;
  if (!result)
  {
    sub_1B1A02758(255, &qword_1EEF60928, (uint64_t)&_s8MetadataVN, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    v8 = v7;
    v9 = a2();
    result = MEMORY[0x1B5E23E74](a3, v8, &v9);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1B1EDBF40()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  result = qword_1EEF60940;
  if (!qword_1EEF60940)
  {
    sub_1B1A02758(255, &qword_1EEF58BF0, (uint64_t)&_s12MetadataTypeON, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    v2 = v1;
    v3 = sub_1B19FA154();
    result = MEMORY[0x1B5E23E74](MEMORY[0x1E0DEE9A0], v2, &v3);
    atomic_store(result, (unint64_t *)&qword_1EEF60940);
  }
  return result;
}

unint64_t sub_1B1EDBFB8()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  result = qword_1EEF60958;
  if (!qword_1EEF60958)
  {
    sub_1B1EC5634(255, &qword_1EEF60948, &qword_1EEF60950, (uint64_t)&_s17CodeSourceSnippetC9ParameterVN);
    v2 = v1;
    v3 = sub_1B1EDC030();
    result = MEMORY[0x1B5E23E74](MEMORY[0x1E0DEE9A0], v2, &v3);
    atomic_store(result, (unint64_t *)&qword_1EEF60958);
  }
  return result;
}

unint64_t sub_1B1EDC030()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  result = qword_1EEF60960;
  if (!qword_1EEF60960)
  {
    sub_1B1A02758(255, &qword_1EEF60950, (uint64_t)&_s17CodeSourceSnippetC9ParameterVN, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    v2 = v1;
    v3 = sub_1B1EDC0A8();
    result = MEMORY[0x1B5E23E74](MEMORY[0x1E0DEAF40], v2, &v3);
    atomic_store(result, (unint64_t *)&qword_1EEF60960);
  }
  return result;
}

unint64_t sub_1B1EDC0A8()
{
  unint64_t result;

  result = qword_1EEF60968;
  if (!qword_1EEF60968)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B229DEC4, &_s17CodeSourceSnippetC9ParameterVN);
    atomic_store(result, (unint64_t *)&qword_1EEF60968);
  }
  return result;
}

uint64_t sub_1B1EDC0EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *i;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;

  v4 = v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
    return MEMORY[0x1E0DEE9D8];
  v8 = 0;
  v9 = a1 + 40;
  v10 = -v5;
  v11 = MEMORY[0x1E0DEE9D8];
  v21 = a1 + 40;
  do
  {
    for (i = (uint64_t *)(v9 + 16 * v8++); ; i += 2)
    {
      v13 = *(i - 1);
      v14 = *i;
      v15 = v13 == a2 && v14 == a3;
      if (!v15 && (sub_1B2229D24() & 1) == 0)
        break;
      ++v8;
      if (v10 + v8 == 1)
        return v11;
    }
    swift_bridgeObjectRetain();
    v20 = v4;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      sub_1B2029FFC(0, *(_QWORD *)(v11 + 16) + 1, 1);
    v17 = *(_QWORD *)(v11 + 16);
    v16 = *(_QWORD *)(v11 + 24);
    if (v17 >= v16 >> 1)
      sub_1B2029FFC(v16 > 1, v17 + 1, 1);
    *(_QWORD *)(v11 + 16) = v17 + 1;
    v18 = v11 + 16 * v17;
    *(_QWORD *)(v18 + 32) = v13;
    *(_QWORD *)(v18 + 40) = v14;
    v4 = v20;
    v9 = v21;
  }
  while (v10 + v8);
  return v11;
}

uint64_t sub_1B1EDC238(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  char isUniquelyReferenced_nonNull_native;
  char v25;
  unint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t *v33;
  _QWORD *v34;
  uint64_t result;
  uint64_t v36;
  uint64_t v37;
  uint64_t i;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;

  v2 = a1;
  v3 = a1 + 64;
  v4 = 1 << *(_BYTE *)(a1 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(a1 + 64);
  v7 = (unint64_t)(v4 + 63) >> 6;
  v8 = swift_bridgeObjectRetain();
  v9 = 0;
  v36 = v8 + 112;
  v37 = v3;
  for (i = v8; ; v2 = i)
  {
    while (1)
    {
      while (1)
      {
        if (v6)
        {
          v10 = __clz(__rbit64(v6));
          v6 &= v6 - 1;
          v11 = v10 | (v9 << 6);
        }
        else
        {
          v12 = v9 + 1;
          if (v9 + 1 >= v7)
            return swift_release();
          v13 = *(_QWORD *)(v3 + 8 * v12);
          if (!v13)
          {
            v12 = v9 + 2;
            if (v9 + 2 >= v7)
              return swift_release();
            v13 = *(_QWORD *)(v3 + 8 * v12);
            if (!v13)
            {
              v12 = v9 + 3;
              if (v9 + 3 >= v7)
                return swift_release();
              v13 = *(_QWORD *)(v3 + 8 * v12);
              if (!v13)
              {
                v12 = v9 + 4;
                if (v9 + 4 >= v7)
                  return swift_release();
                v13 = *(_QWORD *)(v3 + 8 * v12);
                if (!v13)
                {
                  v12 = v9 + 5;
                  if (v9 + 5 >= v7)
                    return swift_release();
                  v13 = *(_QWORD *)(v3 + 8 * v12);
                  if (!v13)
                  {
                    while (v7 - 6 != v9)
                    {
                      v13 = *(_QWORD *)(v36 + 8 * v9++);
                      if (v13)
                      {
                        v12 = v9 + 5;
                        goto LABEL_20;
                      }
                    }
                    return swift_release();
                  }
                }
              }
            }
          }
LABEL_20:
          v6 = (v13 - 1) & v13;
          v11 = __clz(__rbit64(v13)) + (v12 << 6);
          v9 = v12;
        }
        v14 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v11);
        v16 = *v14;
        v15 = v14[1];
        swift_bridgeObjectRetain_n();
        v17 = sub_1B2229730();
        swift_bridgeObjectRelease();
        if (v17 <= 2)
        {
          v18 = *(_QWORD *)(a2 + 216);
          if (*(_QWORD *)(v18 + 16))
            break;
        }
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRetain();
      v19 = sub_1B1DC3B00(v16, v15);
      if ((v20 & 1) != 0)
        break;
      swift_bridgeObjectRelease_n();
    }
    v21 = (uint64_t *)(*(_QWORD *)(v18 + 56) + 16 * v19);
    v23 = *v21;
    v22 = v21[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    v39 = v23;
    v40 = v22;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v41 = *(_QWORD **)(a2 + 216);
    *(_QWORD *)(a2 + 216) = 0x8000000000000000;
    v26 = sub_1B1DC3B00(v16, v15);
    v27 = v25;
    v28 = v41[2] + ((v25 & 1) == 0);
    if (v41[3] < v28)
      break;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      v31 = v41;
      if ((v25 & 1) != 0)
        goto LABEL_31;
    }
    else
    {
      sub_1B1EA8664();
      v31 = v41;
      if ((v27 & 1) != 0)
      {
LABEL_31:
        v32 = (_QWORD *)(v31[7] + 16 * v26);
        swift_bridgeObjectRelease();
        *v32 = v39;
        v32[1] = v40;
        goto LABEL_34;
      }
    }
LABEL_33:
    v31[(v26 >> 6) + 8] |= 1 << v26;
    v33 = (uint64_t *)(v31[6] + 16 * v26);
    *v33 = v16;
    v33[1] = v15;
    v34 = (_QWORD *)(v31[7] + 16 * v26);
    *v34 = v39;
    v34[1] = v40;
    ++v31[2];
    swift_bridgeObjectRetain();
LABEL_34:
    *(_QWORD *)(a2 + 216) = v31;
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    v3 = v37;
  }
  sub_1B1E91634(v28, isUniquelyReferenced_nonNull_native);
  v29 = sub_1B1DC3B00(v16, v15);
  if ((v27 & 1) == (v30 & 1))
  {
    v26 = v29;
    v31 = v41;
    if ((v27 & 1) != 0)
      goto LABEL_31;
    goto LABEL_33;
  }
  result = sub_1B2229FC4();
  __break(1u);
  return result;
}

uint64_t sub_1B1EDC5E8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v25;
  char v26;
  unint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  _QWORD *v32;
  uint64_t *v33;
  _QWORD *v34;
  uint64_t result;
  uint64_t v36;
  uint64_t v37;
  uint64_t i;
  uint64_t v39;
  uint64_t v40;

  v2 = a1;
  v3 = a1 + 64;
  v4 = 1 << *(_BYTE *)(a1 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(a1 + 64);
  v7 = (unint64_t)(v4 + 63) >> 6;
  v8 = swift_bridgeObjectRetain();
  v9 = 0;
  v36 = v8 + 112;
  v37 = v3;
  for (i = v8; ; v2 = i)
  {
    while (1)
    {
      while (1)
      {
        if (v6)
        {
          v10 = __clz(__rbit64(v6));
          v6 &= v6 - 1;
          v11 = v10 | (v9 << 6);
        }
        else
        {
          v12 = v9 + 1;
          if (v9 + 1 >= v7)
            return swift_release();
          v13 = *(_QWORD *)(v3 + 8 * v12);
          if (!v13)
          {
            v12 = v9 + 2;
            if (v9 + 2 >= v7)
              return swift_release();
            v13 = *(_QWORD *)(v3 + 8 * v12);
            if (!v13)
            {
              v12 = v9 + 3;
              if (v9 + 3 >= v7)
                return swift_release();
              v13 = *(_QWORD *)(v3 + 8 * v12);
              if (!v13)
              {
                v12 = v9 + 4;
                if (v9 + 4 >= v7)
                  return swift_release();
                v13 = *(_QWORD *)(v3 + 8 * v12);
                if (!v13)
                {
                  v12 = v9 + 5;
                  if (v9 + 5 >= v7)
                    return swift_release();
                  v13 = *(_QWORD *)(v3 + 8 * v12);
                  if (!v13)
                  {
                    while (v7 - 6 != v9)
                    {
                      v13 = *(_QWORD *)(v36 + 8 * v9++);
                      if (v13)
                      {
                        v12 = v9 + 5;
                        goto LABEL_20;
                      }
                    }
                    return swift_release();
                  }
                }
              }
            }
          }
LABEL_20:
          v6 = (v13 - 1) & v13;
          v11 = __clz(__rbit64(v13)) + (v12 << 6);
          v9 = v12;
        }
        v14 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v11);
        v16 = *v14;
        v15 = v14[1];
        swift_bridgeObjectRetain_n();
        v17 = sub_1B2229730();
        swift_bridgeObjectRelease();
        if (v17 <= 2)
        {
          v18 = *(_QWORD *)(a2 + 224);
          if (v18)
          {
            if (*(_QWORD *)(v18 + 16))
              break;
          }
        }
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRetain();
      v19 = sub_1B1DC3B00(v16, v15);
      if ((v20 & 1) != 0)
        break;
      swift_bridgeObjectRelease_n();
    }
    v21 = (uint64_t *)(*(_QWORD *)(v18 + 56) + 16 * v19);
    v23 = *v21;
    v22 = v21[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    if (!*(_QWORD *)(a2 + 224))
    {
      *(_QWORD *)(a2 + 224) = sub_1B1B7DF34(MEMORY[0x1E0DEE9D8]);
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRetain();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    v39 = v23;
    v40 = v22;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v25 = *(_QWORD **)(a2 + 224);
    *(_QWORD *)(a2 + 224) = 0x8000000000000000;
    v27 = sub_1B1DC3B00(v16, v15);
    v28 = v26;
    v29 = v25[2] + ((v26 & 1) == 0);
    if (v25[3] < v29)
      break;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      if ((v26 & 1) != 0)
        goto LABEL_34;
    }
    else
    {
      sub_1B1EA8664();
      if ((v28 & 1) != 0)
      {
LABEL_34:
        v32 = (_QWORD *)(v25[7] + 16 * v27);
        swift_bridgeObjectRelease();
        *v32 = v39;
        v32[1] = v40;
        goto LABEL_37;
      }
    }
LABEL_36:
    v25[(v27 >> 6) + 8] |= 1 << v27;
    v33 = (uint64_t *)(v25[6] + 16 * v27);
    *v33 = v16;
    v33[1] = v15;
    v34 = (_QWORD *)(v25[7] + 16 * v27);
    *v34 = v39;
    v34[1] = v40;
    ++v25[2];
    swift_bridgeObjectRetain();
LABEL_37:
    *(_QWORD *)(a2 + 224) = v25;
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    v3 = v37;
  }
  sub_1B1E91634(v29, isUniquelyReferenced_nonNull_native);
  v30 = sub_1B1DC3B00(v16, v15);
  if ((v28 & 1) == (v31 & 1))
  {
    v27 = v30;
    if ((v28 & 1) != 0)
      goto LABEL_34;
    goto LABEL_36;
  }
  result = sub_1B2229FC4();
  __break(1u);
  return result;
}

uint64_t sub_1B1EDC9C0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t *v21;
  _QWORD *v22;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v24;
  unint64_t v25;
  char v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  _QWORD *v31;
  uint64_t *v32;
  _QWORD *v33;
  uint64_t result;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v2 = a1;
  v3 = a1 + 64;
  v4 = 1 << *(_BYTE *)(a1 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(a1 + 64);
  v7 = (unint64_t)(v4 + 63) >> 6;
  v8 = swift_bridgeObjectRetain();
  v9 = 0;
  v35 = v8 + 112;
  v36 = v3;
  v37 = v8;
  while (1)
  {
    while (1)
    {
      while (1)
      {
        if (v6)
        {
          v10 = __clz(__rbit64(v6));
          v6 &= v6 - 1;
          v11 = v10 | (v9 << 6);
        }
        else
        {
          v12 = v9 + 1;
          if (v9 + 1 >= v7)
            return swift_release();
          v13 = *(_QWORD *)(v3 + 8 * v12);
          if (!v13)
          {
            v12 = v9 + 2;
            if (v9 + 2 >= v7)
              return swift_release();
            v13 = *(_QWORD *)(v3 + 8 * v12);
            if (!v13)
            {
              v12 = v9 + 3;
              if (v9 + 3 >= v7)
                return swift_release();
              v13 = *(_QWORD *)(v3 + 8 * v12);
              if (!v13)
              {
                v12 = v9 + 4;
                if (v9 + 4 >= v7)
                  return swift_release();
                v13 = *(_QWORD *)(v3 + 8 * v12);
                if (!v13)
                {
                  v12 = v9 + 5;
                  if (v9 + 5 >= v7)
                    return swift_release();
                  v13 = *(_QWORD *)(v3 + 8 * v12);
                  if (!v13)
                  {
                    while (v7 - 6 != v9)
                    {
                      v13 = *(_QWORD *)(v35 + 8 * v9++);
                      if (v13)
                      {
                        v12 = v9 + 5;
                        goto LABEL_20;
                      }
                    }
                    return swift_release();
                  }
                }
              }
            }
          }
LABEL_20:
          v6 = (v13 - 1) & v13;
          v11 = __clz(__rbit64(v13)) + (v12 << 6);
          v9 = v12;
        }
        v14 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v11);
        v16 = *v14;
        v15 = v14[1];
        swift_bridgeObjectRetain_n();
        v17 = sub_1B2229730();
        swift_bridgeObjectRelease();
        if (v17 <= 2)
        {
          v18 = *(_QWORD *)(a2 + 216);
          if (*(_QWORD *)(v18 + 16))
            break;
        }
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRetain();
      v19 = sub_1B1DC3B00(v16, v15);
      if ((v20 & 1) != 0)
        break;
      swift_bridgeObjectRelease_n();
    }
    v21 = (uint64_t *)(*(_QWORD *)(v18 + 56) + 16 * v19);
    v38 = *v21;
    v39 = v21[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v22 = *(_QWORD **)(a2 + 232);
    if (!v22)
      v22 = sub_1B1B7DF34(MEMORY[0x1E0DEE9D8]);
    *(_QWORD *)(a2 + 232) = v22;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v24 = *(_QWORD **)(a2 + 232);
    *(_QWORD *)(a2 + 232) = 0x8000000000000000;
    v25 = sub_1B1DC3B00(v16, v15);
    v27 = v26;
    v28 = v24[2] + ((v26 & 1) == 0);
    if (v24[3] < v28)
      break;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      sub_1B1EA8664();
LABEL_32:
    v2 = v37;
    if ((v27 & 1) != 0)
    {
      v31 = (_QWORD *)(v24[7] + 16 * v25);
      swift_bridgeObjectRelease();
      *v31 = v38;
      v31[1] = v39;
    }
    else
    {
      v24[(v25 >> 6) + 8] |= 1 << v25;
      v32 = (uint64_t *)(v24[6] + 16 * v25);
      *v32 = v16;
      v32[1] = v15;
      v33 = (_QWORD *)(v24[7] + 16 * v25);
      *v33 = v38;
      v33[1] = v39;
      ++v24[2];
      swift_bridgeObjectRetain();
    }
    *(_QWORD *)(a2 + 232) = v24;
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    v3 = v36;
  }
  sub_1B1E91634(v28, isUniquelyReferenced_nonNull_native);
  v29 = sub_1B1DC3B00(v16, v15);
  if ((v27 & 1) == (v30 & 1))
  {
    v25 = v29;
    goto LABEL_32;
  }
  result = sub_1B2229FC4();
  __break(1u);
  return result;
}

uint64_t sub_1B1EDCD54(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  char v20;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v3 = a1;
  v4 = a1 + 64;
  v5 = 1 << *(_BYTE *)(a1 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(a1 + 64);
  v8 = (unint64_t)(v5 + 63) >> 6;
  v9 = swift_bridgeObjectRetain();
  v10 = 0;
  v23 = v9 + 112;
  v24 = v9;
  v25 = v4;
  v26 = a2;
  while (1)
  {
    if (v7)
    {
      v11 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v12 = v11 | (v10 << 6);
      goto LABEL_21;
    }
    v13 = v10 + 1;
    if (v10 + 1 >= v8)
      return swift_release();
    v14 = *(_QWORD *)(v4 + 8 * v13);
    if (!v14)
    {
      v13 = v10 + 2;
      if (v10 + 2 >= v8)
        return swift_release();
      v14 = *(_QWORD *)(v4 + 8 * v13);
      if (!v14)
      {
        v13 = v10 + 3;
        if (v10 + 3 >= v8)
          return swift_release();
        v14 = *(_QWORD *)(v4 + 8 * v13);
        if (!v14)
        {
          v13 = v10 + 4;
          if (v10 + 4 >= v8)
            return swift_release();
          v14 = *(_QWORD *)(v4 + 8 * v13);
          if (!v14)
          {
            v13 = v10 + 5;
            if (v10 + 5 >= v8)
              return swift_release();
            v14 = *(_QWORD *)(v4 + 8 * v13);
            if (!v14)
              break;
          }
        }
      }
    }
LABEL_20:
    v7 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v13 << 6);
    v10 = v13;
LABEL_21:
    v15 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v12);
    v16 = *v15;
    v17 = v15[1];
    swift_bridgeObjectRetain_n();
    v18 = sub_1B2229730();
    swift_bridgeObjectRelease();
    if (v18 <= 2 && *(_QWORD *)(*(_QWORD *)(a2 + 216) + 16))
    {
      swift_bridgeObjectRetain();
      sub_1B1DC3B00(v16, v17);
      if ((v19 & 1) != 0)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        sub_1B1A06460();
        if ((sub_1B2229274() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_29;
        }
        sub_1B2228890();
        sub_1B1A2044C();
        sub_1B1A20490();
        v20 = sub_1B222862C();
        swift_bridgeObjectRelease();
        if ((v20 & 1) != 0)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v3 = v24;
LABEL_29:
          v4 = v25;
          a2 = v26;
        }
        else
        {
          swift_bridgeObjectRetain();
          sub_1B2228890();
          sub_1B2228890();
          sub_1B2228890();
          swift_bridgeObjectRelease();
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v27 = *(_QWORD *)(v26 + 216);
          *(_QWORD *)(v26 + 216) = 0x8000000000000000;
          a2 = v26;
          sub_1B1B84788(36, 0xE100000000000000, v16, v17, isUniquelyReferenced_nonNull_native);
          *(_QWORD *)(v26 + 216) = v27;
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease();
          v3 = v24;
          v4 = v25;
        }
      }
      else
      {
        swift_bridgeObjectRelease_n();
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
  while (v8 - 6 != v10)
  {
    v14 = *(_QWORD *)(v23 + 8 * v10++);
    if (v14)
    {
      v13 = v10 + 5;
      goto LABEL_20;
    }
  }
  return swift_release();
}

uint64_t sub_1B1EDD114(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  void (*v35)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  int64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  _OWORD v66[2];
  uint64_t v67;
  _OWORD v68[2];
  uint64_t v69;
  uint64_t v70;

  v50 = a5;
  v56 = a4;
  v54 = a3;
  v70 = a2;
  sub_1B1791524(0, (unint64_t *)&qword_1ED4B7B60, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0E38], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v8, v9);
  v53 = (char *)&v47 - v10;
  v11 = a1 + 64;
  v12 = 1 << *(_BYTE *)(a1 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & *(_QWORD *)(a1 + 64);
  v15 = (unint64_t)(v12 + 63) >> 6;
  swift_bridgeObjectRetain();
  v16 = 0;
  v61 = v15;
  v49 = v15 - 6;
  v48 = a1 + 112;
  v51 = a6;
  v55 = a1;
  v52 = a1 + 64;
  while (1)
  {
    if (v14)
    {
      v17 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v18 = v17 | (v16 << 6);
      goto LABEL_21;
    }
    v19 = v16 + 1;
    if (v16 + 1 >= v61)
      return swift_release();
    v20 = *(_QWORD *)(v11 + 8 * v19);
    if (!v20)
    {
      v19 = v16 + 2;
      if (v16 + 2 >= v61)
        return swift_release();
      v20 = *(_QWORD *)(v11 + 8 * v19);
      if (!v20)
      {
        v19 = v16 + 3;
        if (v16 + 3 >= v61)
          return swift_release();
        v20 = *(_QWORD *)(v11 + 8 * v19);
        if (!v20)
        {
          v19 = v16 + 4;
          if (v16 + 4 >= v61)
            return swift_release();
          v20 = *(_QWORD *)(v11 + 8 * v19);
          if (!v20)
          {
            v19 = v16 + 5;
            if (v16 + 5 >= v61)
              return swift_release();
            v20 = *(_QWORD *)(v11 + 8 * v19);
            if (!v20)
              break;
          }
        }
      }
    }
LABEL_20:
    v14 = (v20 - 1) & v20;
    v18 = __clz(__rbit64(v20)) + (v19 << 6);
    v16 = v19;
LABEL_21:
    v21 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v18);
    v22 = *v21;
    v23 = v21[1];
    swift_bridgeObjectRetain_n();
    v24 = sub_1B2229730();
    swift_bridgeObjectRelease();
    if (v24 <= 2 && (v25 = *(_QWORD *)(v70 + 216), *(_QWORD *)(v25 + 16)))
    {
      swift_bridgeObjectRetain();
      v26 = sub_1B1DC3B00(v22, v23);
      if ((v27 & 1) != 0)
      {
        v60 = v16;
        v28 = (uint64_t *)(*(_QWORD *)(v25 + 56) + 16 * v26);
        v30 = *v28;
        v29 = v28[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        v31 = v56;
        swift_bridgeObjectRetain();
        sub_1B1E0E85C(v54, v31, (uint64_t *)v66);
        v68[0] = v66[0];
        v68[1] = v66[1];
        v69 = v67;
        if ((v24 & 7) == 2)
        {
          v64 = 544499052;
          v65 = 0xE400000000000000;
          sub_1B2228890();
          sub_1B2228890();
          sub_1B2228890();
          sub_1B1C39C20((uint64_t)v68, 2u);
          sub_1B2228890();
          swift_bridgeObjectRelease();
        }
        else
        {
          v64 = 0x2074736E6F63;
          v65 = 0xE600000000000000;
          sub_1B1C39C20((uint64_t)v68, v24);
          sub_1B2228890();
          swift_bridgeObjectRelease();
          sub_1B2228890();
          sub_1B2228890();
          sub_1B2228890();
        }
        sub_1B19F8C58(v66, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1A20360);
        v57 = v64;
        v58 = v65;
        v64 = 36;
        v65 = 0xE100000000000000;
        swift_bridgeObjectRetain();
        sub_1B2228890();
        v32 = v64;
        v33 = v65;
        v64 = v30;
        v65 = v29;
        v62 = v32;
        v63 = v33;
        v34 = sub_1B2228278();
        v35 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56);
        v59 = v29;
        v36 = (uint64_t)v53;
        v35(v53, 1, 1, v34);
        sub_1B1A06460();
        v37 = sub_1B222925C();
        v39 = v38;
        v41 = v40;
        sub_1B1BB9EF0(v36);
        if ((v41 & 1) != 0)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v43 = v59;
        }
        else
        {
          v30 = sub_1B1D8E6F0(v37, v39, v57, v58, v30, v59);
          v43 = v42;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        v44 = v70;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v64 = *(_QWORD *)(v44 + 216);
        *(_QWORD *)(v44 + 216) = 0x8000000000000000;
        sub_1B1B84788(v30, v43, v22, v23, isUniquelyReferenced_nonNull_native);
        *(_QWORD *)(v44 + 216) = v64;
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        a1 = v55;
        v11 = v52;
        v16 = v60;
      }
      else
      {
        swift_bridgeObjectRelease_n();
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
  while (v49 != v16)
  {
    v20 = *(_QWORD *)(v48 + 8 * v16++);
    if (v20)
    {
      v19 = v16 + 5;
      goto LABEL_20;
    }
  }
  return swift_release();
}

uint64_t sub_1B1EDD690(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t *i;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
    return MEMORY[0x1E0DEE9D8];
  v6 = 0;
  v7 = a1 + 40;
  v8 = -v3;
  result = MEMORY[0x1E0DEE9D8];
  do
  {
    v18 = result;
    for (i = (uint64_t *)(v7 + 16 * v6++); ; i += 2)
    {
      v12 = *(i - 1);
      v11 = *i;
      v13 = v12 == a2 && v11 == a3;
      if (v13 || (sub_1B2229D24() & 1) != 0)
        goto LABEL_4;
      sub_1B1A2044C();
      sub_1B1A20490();
      swift_bridgeObjectRetain();
      if ((sub_1B222862C() & 1) != 0)
        break;
      swift_bridgeObjectRelease();
LABEL_4:
      ++v6;
      if (v8 + v6 == 1)
        return v18;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      sub_1B2029FFC(0, *(_QWORD *)(v18 + 16) + 1, 1);
    result = v18;
    v15 = *(_QWORD *)(v18 + 16);
    v14 = *(_QWORD *)(v18 + 24);
    if (v15 >= v14 >> 1)
    {
      sub_1B2029FFC(v14 > 1, v15 + 1, 1);
      result = v18;
    }
    *(_QWORD *)(result + 16) = v15 + 1;
    v16 = result + 16 * v15;
    *(_QWORD *)(v16 + 32) = v12;
    *(_QWORD *)(v16 + 40) = v11;
    v7 = v17;
  }
  while (v8 + v6);
  return result;
}

uint64_t sub_1B1EDD82C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v23 = *(_QWORD *)(a1 + 16);
  if (!v23)
    return MEMORY[0x1E0DEE9D8];
  v2 = a2;
  v3 = 0;
  v21 = a1 + 32;
  v25 = a2 + 40;
  v4 = MEMORY[0x1E0DEE9D8];
  do
  {
    v20 = v4;
    v5 = v3;
    while (1)
    {
      v6 = v5 + 1;
      v7 = *(_QWORD *)(v2 + 16);
      if (v7)
        break;
LABEL_4:
      v5 = v6;
      if (v6 == v23)
        return v20;
    }
    v24 = v5 + 1;
    v8 = (uint64_t *)(v21 + 16 * v5);
    v10 = *v8;
    v9 = v8[1];
    sub_1B1A06460();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v11 = 0;
    v12 = -v7;
    v13 = 1;
LABEL_7:
    v14 = v25 + 16 * v11++;
    do
    {
      if ((sub_1B2229274() & 1) != 0)
      {
        v13 = 0;
        if (v12 + v11)
          goto LABEL_7;
        v2 = a2;
        swift_bridgeObjectRelease();
        goto LABEL_15;
      }
      v14 += 16;
      ++v11;
    }
    while (v12 + v11 != 1);
    v2 = a2;
    swift_bridgeObjectRelease();
    if ((v13 & 1) != 0)
    {
      swift_bridgeObjectRelease();
      v6 = v24;
      goto LABEL_4;
    }
LABEL_15:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v4 = v20;
    v3 = v24;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_1B2029FFC(0, *(_QWORD *)(v20 + 16) + 1, 1);
      v4 = v20;
    }
    v17 = *(_QWORD *)(v4 + 16);
    v16 = *(_QWORD *)(v4 + 24);
    if (v17 >= v16 >> 1)
    {
      sub_1B2029FFC(v16 > 1, v17 + 1, 1);
      v4 = v20;
    }
    *(_QWORD *)(v4 + 16) = v17 + 1;
    v18 = v4 + 16 * v17;
    *(_QWORD *)(v18 + 32) = v10;
    *(_QWORD *)(v18 + 40) = v9;
  }
  while (v24 != v23);
  return v4;
}

uint64_t sub_1B1EDDA2C()
{
  unint64_t v0;

  v0 = sub_1B2229F64();
  swift_bridgeObjectRelease();
  if (v0 >= 0x20)
    return 32;
  else
    return v0;
}

uint64_t sub_1B1EDDA7C(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 1701667182 && a2 == 0xE400000000000000;
  if (v2 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1701869940 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_1B2229D24();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_1B1EDDB4C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v18[2];

  v5 = a1 + 64;
  v6 = 1 << *(_BYTE *)(a1 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(a1 + 64);
  v9 = (unint64_t)(v6 + 63) >> 6;
  swift_bridgeObjectRetain();
  v10 = 0;
  if (!v8)
    goto LABEL_5;
LABEL_4:
  v11 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  v12 = v11 | (v10 << 6);
  while (1)
  {
    v15 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v12);
    v16 = v15[1];
    v18[0] = *v15;
    v18[1] = v16;
    swift_bridgeObjectRetain();
    sub_1B1EDA4E4(v18, a2);
    if (v2)
    {
      swift_release();
      return swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    if (v8)
      goto LABEL_4;
LABEL_5:
    v13 = v10 + 1;
    if (v10 + 1 >= v9)
      return swift_release();
    v14 = *(_QWORD *)(v5 + 8 * v13);
    if (!v14)
    {
      v13 = v10 + 2;
      if (v10 + 2 >= v9)
        return swift_release();
      v14 = *(_QWORD *)(v5 + 8 * v13);
      if (!v14)
      {
        v13 = v10 + 3;
        if (v10 + 3 >= v9)
          return swift_release();
        v14 = *(_QWORD *)(v5 + 8 * v13);
        if (!v14)
        {
          v13 = v10 + 4;
          if (v10 + 4 >= v9)
            return swift_release();
          v14 = *(_QWORD *)(v5 + 8 * v13);
          if (!v14)
          {
            v13 = v10 + 5;
            if (v10 + 5 >= v9)
              return swift_release();
            v14 = *(_QWORD *)(v5 + 8 * v13);
            if (!v14)
            {
              while (v9 - 6 != v10)
              {
                v14 = *(_QWORD *)(a1 + 8 * v10++ + 112);
                if (v14)
                {
                  v13 = v10 + 5;
                  goto LABEL_18;
                }
              }
              return swift_release();
            }
          }
        }
      }
    }
LABEL_18:
    v8 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v13 << 6);
    v10 = v13;
  }
}

void sub_1B1EDDCE8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF60978)
  {
    v0 = sub_1B22285A8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF60978);
  }
}

unint64_t sub_1B1EDDD48()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  result = qword_1EEF60980;
  if (!qword_1EEF60980)
  {
    sub_1B1791524(255, &qword_1EEF60970, (uint64_t (*)(uint64_t))sub_1B1EDDCE8, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    v2 = v1;
    v3 = sub_1B1EDDFBC(&qword_1EEF60988, MEMORY[0x1E0DEA9A0], MEMORY[0x1E0DEA0D8]);
    result = MEMORY[0x1B5E23E74](MEMORY[0x1E0DEE9A0], v2, &v3);
    atomic_store(result, (unint64_t *)&qword_1EEF60980);
  }
  return result;
}

uint64_t sub_1B1EDDDD8(uint64_t a1, uint64_t a2, void (*a3)(_QWORD *, uint64_t))
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v24[4];
  uint64_t v25;

  v7 = 1 << *(_BYTE *)(a1 + 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & *(_QWORD *)(a1 + 64);
  v10 = (unint64_t)(v7 + 63) >> 6;
  swift_bridgeObjectRetain();
  v11 = 0;
  if (!v9)
    goto LABEL_5;
LABEL_4:
  v12 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v13 = v12 | (v11 << 6);
  while (1)
  {
    v16 = 16 * v13;
    v17 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v13);
    v18 = *v17;
    v19 = v17[1];
    v20 = (uint64_t *)(*(_QWORD *)(a1 + 56) + v16);
    v21 = *v20;
    v22 = v20[1];
    v24[0] = v18;
    v24[1] = v19;
    v24[2] = v21;
    v24[3] = v22;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    a3(v24, a2);
    if (v3)
    {
      swift_release();
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v9)
      goto LABEL_4;
LABEL_5:
    v14 = v11 + 1;
    if (v11 + 1 >= v10)
      return swift_release();
    v15 = *(_QWORD *)(v25 + 8 * v14);
    if (!v15)
    {
      v14 = v11 + 2;
      if (v11 + 2 >= v10)
        return swift_release();
      v15 = *(_QWORD *)(v25 + 8 * v14);
      if (!v15)
      {
        v14 = v11 + 3;
        if (v11 + 3 >= v10)
          return swift_release();
        v15 = *(_QWORD *)(v25 + 8 * v14);
        if (!v15)
        {
          v14 = v11 + 4;
          if (v11 + 4 >= v10)
            return swift_release();
          v15 = *(_QWORD *)(v25 + 8 * v14);
          if (!v15)
          {
            v14 = v11 + 5;
            if (v11 + 5 >= v10)
              return swift_release();
            v15 = *(_QWORD *)(v25 + 8 * v14);
            if (!v15)
            {
              while (v10 - 6 != v11)
              {
                v15 = *(_QWORD *)(a1 + 8 * v11++ + 112);
                if (v15)
                {
                  v14 = v11 + 5;
                  goto LABEL_18;
                }
              }
              return swift_release();
            }
          }
        }
      }
    }
LABEL_18:
    v9 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v14 << 6);
    v11 = v14;
  }
}

uint64_t sub_1B1EDDFBC(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  _QWORD v8[2];

  result = *a1;
  if (!result)
  {
    sub_1B1EDDCE8();
    v8[0] = a2;
    v8[1] = a2;
    result = MEMORY[0x1B5E23E74](a3, v7, v8);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1B1EDE018(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v11;
  char v12;
  char v13;

  sub_1B19F8E54(0, &qword_1EEF609A8, (uint64_t (*)(void))sub_1B1EDE1E0, (uint64_t)&_s17CodeSourceSnippetC9ParameterV10CodingKeysON, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v6);
  v8 = (char *)&v11 - v7;
  v9 = a1[4];
  sub_1B19FA070(a1, a1[3]);
  sub_1B1EDE1E0();
  sub_1B222A150();
  if (v1)
  {
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  }
  else
  {
    v13 = 0;
    v9 = sub_1B22297CC();
    v12 = 1;
    swift_bridgeObjectRetain();
    sub_1B22297CC();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    swift_bridgeObjectRetain();
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v9;
}

unint64_t sub_1B1EDE1E0()
{
  unint64_t result;

  result = qword_1EEF609B0;
  if (!qword_1EEF609B0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B229E140, &_s17CodeSourceSnippetC9ParameterV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EEF609B0);
  }
  return result;
}

uint64_t sub_1B1EDE224(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1B1EDE254(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1B1A02758(0, &qword_1EEF58BF0, (uint64_t)&_s12MetadataTypeON, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t _s17CodeSourceSnippetC9ParameterV10CodingKeysOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1B1EDE2FC + 4 * byte_1B229DD35[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1B1EDE330 + 4 * byte_1B229DD30[v4]))();
}

uint64_t sub_1B1EDE330(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1EDE338(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B1EDE340);
  return result;
}

uint64_t sub_1B1EDE34C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B1EDE354);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1B1EDE358(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1EDE360(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s17CodeSourceSnippetC9ParameterV10CodingKeysOMa()
{
  return &_s17CodeSourceSnippetC9ParameterV10CodingKeysON;
}

uint64_t _s17CodeSourceSnippetC10CodingKeysOwet(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xE1)
    goto LABEL_17;
  if (a2 + 31 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 31) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 31;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 31;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 31;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x20;
  v8 = v6 - 32;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s17CodeSourceSnippetC10CodingKeysOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 31 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 31) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xE1)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xE0)
    return ((uint64_t (*)(void))((char *)&loc_1B1EDE458 + 4 * byte_1B229DD3F[v4]))();
  *a1 = a2 + 31;
  return ((uint64_t (*)(void))((char *)sub_1B1EDE48C + 4 * byte_1B229DD3A[v4]))();
}

uint64_t sub_1B1EDE48C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1EDE494(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B1EDE49CLL);
  return result;
}

uint64_t sub_1B1EDE4A8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B1EDE4B0);
  *(_BYTE *)result = a2 + 31;
  return result;
}

uint64_t sub_1B1EDE4B4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1EDE4BC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s17CodeSourceSnippetC10CodingKeysOMa()
{
  return &_s17CodeSourceSnippetC10CodingKeysON;
}

unint64_t sub_1B1EDE4DC()
{
  unint64_t result;

  result = qword_1EEF609C0;
  if (!qword_1EEF609C0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B229E060, &_s17CodeSourceSnippetC10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EEF609C0);
  }
  return result;
}

unint64_t sub_1B1EDE524()
{
  unint64_t result;

  result = qword_1EEF609C8;
  if (!qword_1EEF609C8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B229E118, &_s17CodeSourceSnippetC9ParameterV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EEF609C8);
  }
  return result;
}

unint64_t sub_1B1EDE56C()
{
  unint64_t result;

  result = qword_1EEF609D0;
  if (!qword_1EEF609D0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B229E088, &_s17CodeSourceSnippetC9ParameterV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EEF609D0);
  }
  return result;
}

unint64_t sub_1B1EDE5B4()
{
  unint64_t result;

  result = qword_1EEF609D8;
  if (!qword_1EEF609D8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B229E0B0, &_s17CodeSourceSnippetC9ParameterV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EEF609D8);
  }
  return result;
}

unint64_t sub_1B1EDE5FC()
{
  unint64_t result;

  result = qword_1EEF609E0;
  if (!qword_1EEF609E0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B229DF98, &_s17CodeSourceSnippetC10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EEF609E0);
  }
  return result;
}

unint64_t sub_1B1EDE644()
{
  unint64_t result;

  result = qword_1EEF609E8;
  if (!qword_1EEF609E8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B229DFC0, &_s17CodeSourceSnippetC10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EEF609E8);
  }
  return result;
}

uint64_t sub_1B1EDE688()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[12];
  _OWORD v6[12];
  _OWORD v7[2];
  uint64_t v8;

  if (qword_1ED4B85E0 != -1)
    swift_once();
  v7[0] = xmmword_1ED4D0948;
  v7[1] = unk_1ED4D0958;
  v8 = qword_1ED4D0968;
  sub_1B1E8FCE4(v0, (uint64_t)v7, 0x200000000, v5);
  sub_1B19F66A0((uint64_t)v5, (uint64_t)v6, (unint64_t *)&qword_1ED4B7DE0);
  if (!*(_QWORD *)&v6[0])
    return sub_1B1E126A4();
  v6[8] = v6[2];
  v6[9] = v6[3];
  v6[10] = v6[4];
  v6[11] = v6[5];
  v6[6] = v6[0];
  v6[7] = v6[1];
  sub_1B1BEC018(0);
  v2 = v1;
  swift_retain();
  v3 = sub_1B1A101F0(v2);
  swift_release();
  sub_1B1A086DC(v5, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
  return v3;
}

float32x4_t sub_1B1EDE7BC@<Q0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  float32x4_t v8;
  int32x4_t v9;
  int32x4_t v10;
  float32x4_t v11;
  int32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  int32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  int32x4_t v18;
  int32x4_t v19;
  float32x2_t v20;
  float32x2_t v21;
  float32x4_t v22;
  float32x2_t v23;
  float32x2_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t result;
  simd_float4 v28;
  simd_float4 v29;
  simd_float4 v30;
  simd_float4 v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  _BYTE v36[80];
  _BYTE v37[80];
  _OWORD v38[4];
  char v39;
  _OWORD v40[4];
  char v41;
  simd_float4x4 v42;
  simd_float4x4 v43;

  sub_1B1D15764(a1, (uint64_t)v36);
  sub_1B19F66A0((uint64_t)v36, (uint64_t)v40, qword_1ED4B8BB0);
  v4 = xmmword_1B2244E20;
  v5 = xmmword_1B2244D90;
  v6 = xmmword_1B2244DD0;
  v7 = xmmword_1B2244DB0;
  v32 = (float32x4_t)xmmword_1B2244DB0;
  v33 = (float32x4_t)xmmword_1B2244DD0;
  v34 = (float32x4_t)xmmword_1B2244D90;
  v35 = (float32x4_t)xmmword_1B2244E20;
  if ((v41 & 1) == 0)
  {
    v7 = v40[0];
    v6 = v40[1];
    v5 = v40[2];
    v4 = v40[3];
  }
  v28 = (simd_float4)v4;
  v29 = (simd_float4)v5;
  v30 = (simd_float4)v6;
  v31 = (simd_float4)v7;
  sub_1B1D15DE8(a1, (uint64_t)v37);
  sub_1B19F66A0((uint64_t)v37, (uint64_t)v38, &qword_1ED4B8E80);
  if ((v39 & 1) == 0)
  {
    v32 = (float32x4_t)v38[0];
    v33 = (float32x4_t)v38[1];
    v34 = (float32x4_t)v38[2];
    v35 = (float32x4_t)v38[3];
  }
  v42.columns[1] = v30;
  v42.columns[0] = v31;
  v42.columns[3] = v28;
  v42.columns[2] = v29;
  v43 = __invert_f4(v42);
  v8.i32[3] = v32.i32[3];
  v9 = (int32x4_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v32, v43.columns[0].f32[0]), v33, *(float32x2_t *)v43.columns[0].f32, 1), v34, (float32x4_t)v43.columns[0], 2), v35, (float32x4_t)v43.columns[0], 3);
  v43.columns[0] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v32, v43.columns[1].f32[0]), v33, *(float32x2_t *)v43.columns[1].f32, 1), v34, (float32x4_t)v43.columns[1], 2), v35, (float32x4_t)v43.columns[1], 3);
  v43.columns[1] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v32, v43.columns[2].f32[0]), v33, *(float32x2_t *)v43.columns[2].f32, 1), v34, (float32x4_t)v43.columns[2], 2), v35, (float32x4_t)v43.columns[2], 3);
  v43.columns[2] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v32, v43.columns[3].f32[0]), v33, *(float32x2_t *)v43.columns[3].f32, 1), v34, (float32x4_t)v43.columns[3], 2), v35, (float32x4_t)v43.columns[3], 3);
  v8.f32[0] = *(float *)&v9.i32[3] - *(float *)v9.i32;
  v8.f32[1] = v43.columns[0].f32[3] - v43.columns[0].f32[0];
  v8.f32[2] = v43.columns[1].f32[3] - v43.columns[1].f32[0];
  v10 = (int32x4_t)vmulq_f32(v8, v8);
  v8.f32[3] = v43.columns[2].f32[3] - v43.columns[2].f32[0];
  v11.f32[0] = *(float *)&v9.i32[3] + *(float *)v9.i32;
  v11.f32[1] = v43.columns[0].f32[3] + v43.columns[0].f32[0];
  v11.f32[2] = v43.columns[1].f32[3] + v43.columns[1].f32[0];
  v12 = (int32x4_t)vmulq_f32(v11, v11);
  v11.f32[3] = v43.columns[2].f32[3] + v43.columns[2].f32[0];
  v13.f32[0] = *(float *)&v9.i32[3] + *(float *)&v9.i32[1];
  v13.f32[1] = v43.columns[0].f32[3] + v43.columns[0].f32[1];
  v13.f32[2] = v43.columns[1].f32[3] + v43.columns[1].f32[1];
  v14 = v13;
  v14.f32[3] = v43.columns[2].f32[3] + v43.columns[2].f32[1];
  v15 = (int32x4_t)vmulq_f32(v13, v13);
  v16.f32[0] = *(float *)&v9.i32[3] - *(float *)&v9.i32[1];
  v16.f32[1] = v43.columns[0].f32[3] - v43.columns[0].f32[1];
  v16.f32[2] = v43.columns[1].f32[3] - v43.columns[1].f32[1];
  v17 = v16;
  v17.f32[3] = v43.columns[2].f32[3] - v43.columns[2].f32[1];
  v18 = (int32x4_t)vmulq_f32(v16, v16);
  v43.columns[3].f32[0] = *(float *)&v9.i32[3] - *(float *)&v9.i32[2];
  v43.columns[3].f32[1] = v43.columns[0].f32[3] - v43.columns[0].f32[2];
  v43.columns[3].f32[2] = v43.columns[1].f32[3] - v43.columns[1].f32[2];
  v19 = (int32x4_t)vmulq_f32((float32x4_t)v43.columns[3], (float32x4_t)v43.columns[3]);
  v43.columns[3].f32[3] = v43.columns[2].f32[3] - v43.columns[2].f32[2];
  v43.columns[0] = (simd_float4)vzip2q_s32(v9, (int32x4_t)v43.columns[0]);
  v43.columns[0].i32[2] = v43.columns[1].i32[2];
  v43.columns[1] = (simd_float4)vmulq_f32((float32x4_t)v43.columns[0], (float32x4_t)v43.columns[0]);
  v43.columns[0].i32[3] = v43.columns[2].i32[2];
  v43.columns[2].i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v10, 2), vadd_f32(*(float32x2_t *)v10.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v10.i8, 1))).u32[0];
  *(float32x2_t *)v9.i8 = vrsqrte_f32((float32x2_t)v43.columns[2].u32[0]);
  *(float32x2_t *)v9.i8 = vmul_f32(*(float32x2_t *)v9.i8, vrsqrts_f32((float32x2_t)v43.columns[2].u32[0], vmul_f32(*(float32x2_t *)v9.i8, *(float32x2_t *)v9.i8)));
  v43.columns[2] = (simd_float4)vmulq_n_f32(v8, vmul_f32(*(float32x2_t *)v9.i8, vrsqrts_f32((float32x2_t)v43.columns[2].u32[0], vmul_f32(*(float32x2_t *)v9.i8, *(float32x2_t *)v9.i8))).f32[0]);
  v9.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v12, 2), vadd_f32(*(float32x2_t *)v12.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v12.i8, 1))).u32[0];
  v20 = vrsqrte_f32((float32x2_t)v9.u32[0]);
  v21 = vmul_f32(v20, vrsqrts_f32((float32x2_t)v9.u32[0], vmul_f32(v20, v20)));
  v22 = vmulq_n_f32(v11, vmul_f32(v21, vrsqrts_f32((float32x2_t)v9.u32[0], vmul_f32(v21, v21))).f32[0]);
  v21.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v15, 2), vadd_f32(*(float32x2_t *)v15.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v15.i8, 1))).u32[0];
  v23 = vrsqrte_f32((float32x2_t)v21.u32[0]);
  v24 = vmul_f32(v23, vrsqrts_f32((float32x2_t)v21.u32[0], vmul_f32(v23, v23)));
  v25 = vmulq_n_f32(v14, vmul_f32(v24, vrsqrts_f32((float32x2_t)v21.u32[0], vmul_f32(v24, v24))).f32[0]);
  v24.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v18, 2), vadd_f32(*(float32x2_t *)v18.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v18.i8, 1))).u32[0];
  *(float32x2_t *)v8.f32 = vrsqrte_f32((float32x2_t)v24.u32[0]);
  *(float32x2_t *)v8.f32 = vmul_f32(*(float32x2_t *)v8.f32, vrsqrts_f32((float32x2_t)v24.u32[0], vmul_f32(*(float32x2_t *)v8.f32, *(float32x2_t *)v8.f32)));
  v26 = vmulq_n_f32(v17, vmul_f32(*(float32x2_t *)v8.f32, vrsqrts_f32((float32x2_t)v24.u32[0], vmul_f32(*(float32x2_t *)v8.f32, *(float32x2_t *)v8.f32))).f32[0]);
  v43.columns[1].i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32((int32x4_t)v43.columns[1], 2), vadd_f32(*(float32x2_t *)v43.columns[1].f32, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v43.columns[1].f32, 1))).u32[0];
  *(float32x2_t *)v8.f32 = vrsqrte_f32((float32x2_t)v43.columns[1].u32[0]);
  *(float32x2_t *)v8.f32 = vmul_f32(*(float32x2_t *)v8.f32, vrsqrts_f32((float32x2_t)v43.columns[1].u32[0], vmul_f32(*(float32x2_t *)v8.f32, *(float32x2_t *)v8.f32)));
  result = vmulq_n_f32((float32x4_t)v43.columns[0], vmul_f32(*(float32x2_t *)v8.f32, vrsqrts_f32((float32x2_t)v43.columns[1].u32[0], vmul_f32(*(float32x2_t *)v8.f32, *(float32x2_t *)v8.f32))).f32[0]);
  v43.columns[1].i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v19, 2), vadd_f32(*(float32x2_t *)v19.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v19.i8, 1))).u32[0];
  *(float32x2_t *)v19.i8 = vrsqrte_f32((float32x2_t)v43.columns[1].u32[0]);
  *(float32x2_t *)v19.i8 = vmul_f32(*(float32x2_t *)v19.i8, vrsqrts_f32((float32x2_t)v43.columns[1].u32[0], vmul_f32(*(float32x2_t *)v19.i8, *(float32x2_t *)v19.i8)));
  *(simd_float4 *)a2 = v43.columns[2];
  *(float32x4_t *)(a2 + 16) = v22;
  *(float32x4_t *)(a2 + 32) = v25;
  *(float32x4_t *)(a2 + 48) = v26;
  *(float32x4_t *)(a2 + 64) = result;
  *(float32x4_t *)(a2 + 80) = vmulq_n_f32((float32x4_t)v43.columns[3], vmul_f32(*(float32x2_t *)v19.i8, vrsqrts_f32((float32x2_t)v43.columns[1].u32[0], vmul_f32(*(float32x2_t *)v19.i8, *(float32x2_t *)v19.i8))).f32[0]);
  return result;
}

void sub_1B1EDEB18(_QWORD *a1@<X8>)
{
  *a1 = -1;
}

double sub_1B1EDEB24()
{
  double result;
  _OWORD v1[2];
  uint64_t v2;
  uint64_t v3;
  int v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;

  if (qword_1ED4B7DB8 != -1)
    swift_once();
  v3 = qword_1ED4D09F8;
  v4 = 0;
  v5 = 2;
  v6 = 0;
  v7 = 2;
  v8 = 0;
  swift_retain();
  sub_1B1A158F8(1, 1, 1, (uint64_t)v1);
  swift_release();
  result = *(double *)v1;
  xmmword_1ED4D0948 = v1[0];
  unk_1ED4D0958 = v1[1];
  qword_1ED4D0968 = v2;
  return result;
}

_QWORD *sub_1B1EDEBD0(_QWORD *result, float32x4_t *a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t ObjectType;
  uint64_t (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  unsigned int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  os_unfair_lock_s *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t i;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  void (*v28)(uint64_t);
  uint64_t v29;
  BOOL v30;
  unint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  char *v36;
  unsigned int v37;
  BOOL v38;
  int v39;
  uint64_t v41;
  _QWORD *v42;
  unint64_t v43;
  char *v44;
  unsigned int v45;
  int v46;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unsigned __int16 *v68;
  _BYTE v69[160];
  uint64_t v70[20];
  _QWORD v71[8];
  _QWORD v72[7];
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  _QWORD v77[10];
  char v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _OWORD v82[2];
  uint64_t v83;

  v59 = (uint64_t)result;
  v3 = *(_QWORD *)((char *)result + OBJC_IVAR____TtC3VFX13EntityManager_renderer);
  if (!v3)
    return result;
  sub_1B19F66A0(v3 + 624, (uint64_t)v69, &qword_1ED4BF400);
  sub_1B19F66A0((uint64_t)v69, (uint64_t)v70, &qword_1ED4BF400);
  if (sub_1B1B3C438(v70) == 1)
  {
    result = (_QWORD *)sub_1B2229688();
    __break(1u);
    return result;
  }
  v4 = v70[1];
  ObjectType = swift_getObjectType();
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 144);
  swift_unknownObjectRetain();
  swift_retain();
  v7 = v6(ObjectType, v4);
  swift_unknownObjectRelease();
  if (qword_1ED4B8548 != -1)
    swift_once();
  v82[0] = xmmword_1ED4D0918;
  v82[1] = unk_1ED4D0928;
  v83 = qword_1ED4D0938;
  sub_1B1E8FCE4(v59, (uint64_t)v82, v7 & 0xFFFFFFFFFFLL, v71);
  sub_1B19F66A0((uint64_t)v71, (uint64_t)v72, (unint64_t *)&qword_1ED4B7DE0);
  v68 = (unsigned __int16 *)v72[0];
  if (!v72[0])
    return (_QWORD *)swift_release();
  v56 = v76;
  if (v76 <= 0 || (v55 = v73) == 0)
  {
    swift_release();
    return sub_1B1A086DC(v71, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
  }
  v54 = v72[5];
  v8 = v75;
  v9 = v75[4];
  v53 = v74;
  v10 = *(_BYTE *)(v74 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
  sub_1B1A086DC(v71, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1A086A4);
  swift_retain();
  swift_retain();
  swift_retain();
  v11 = 0;
  v51 = v10;
  v52 = v9;
  while (2)
  {
    v67 = v11;
    v12 = (unsigned int *)(v54 + 48 * v11);
    v13 = *v12;
    v14 = v12[1];
    v15 = v12[2];
    v16 = *((_QWORD *)v12 + 3);
    v60 = *((_QWORD *)v12 + 2);
    v18 = *((_QWORD *)v12 + 4);
    v17 = *((_QWORD *)v12 + 5);
    if ((v10 & 1) != 0)
    {
      v19 = *(os_unfair_lock_s **)(v17 + 376);
      swift_retain_n();
      os_unfair_lock_lock(v19);
      os_unfair_lock_lock(*(os_unfair_lock_t *)(v17 + 344));
      swift_release();
    }
    else
    {
      swift_retain();
    }
    ecs_stack_allocator_push_snapshot(v9);
    v64 = v8[7];
    v65 = v8[6];
    v62 = v8[9];
    v63 = v8[8];
    v61 = v8[10];
    v20 = v8[4];
    v21 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v17 + 40) + 16) + 32) + 16) + 1;
    swift_retain();
    v8[6] = ecs_stack_allocator_allocate(v20, 48 * v21, 8);
    v8[7] = v21;
    v8[9] = 0;
    v8[10] = 0;
    v8[8] = 0;
    swift_release();
    v77[0] = v53;
    v77[1] = v17;
    v66 = v17;
    v77[2] = v8;
    v77[3] = v15;
    v77[4] = (v14 - v13 + v15);
    v77[5] = v56;
    v77[6] = v13;
    v77[7] = v14;
    v77[8] = 0;
    v77[9] = 0;
    v78 = 1;
    v79 = v60;
    v80 = v16;
    v81 = v18;
    sub_1B1EDF1C8((uint64_t)v77, a2, v59, a3);
    v22 = v8[6];
    v23 = v8[8];
    if (!v23)
    {
      v49 = v8[7];
      v50 = (_QWORD *)v8[4];
      goto LABEL_50;
    }
    for (i = 0; i != v23; ++i)
    {
      v26 = (uint64_t *)(v22 + 48 * i);
      v27 = *v26;
      v28 = (void (*)(uint64_t))v26[4];
      v29 = v8[9];
      if (v29)
        v30 = v27 == v29;
      else
        v30 = 0;
      if (v30 || !v68[11])
        goto LABEL_15;
      v31 = v68[9];
      v32 = (_QWORD *)((char *)v68 + v68[8] + 41);
      v33 = v26[2];
      v34 = v32;
      v35 = v31 >> 4;
      v36 = (char *)v68 + 41;
      if (v31 >= 0x10)
      {
        while (*v34 != v27)
        {
          ++v36;
          v34 += 2;
          if (!--v35)
            goto LABEL_30;
        }
        v37 = v36[v68[10]];
        v38 = v37 > 5;
        v39 = (1 << v37) & 0x23;
        if (v38 || v39 == 0)
        {
LABEL_15:
          v25 = swift_retain();
          v28(v25);
          swift_release();
          continue;
        }
      }
LABEL_30:
      if (swift_conformsToProtocol2())
        v41 = v33;
      else
        v41 = 0;
      if (v41)
      {
        if (v31 < 0x10)
          goto LABEL_15;
        v42 = v32;
        v43 = v31 >> 4;
        v44 = (char *)v68 + 41;
        while (*v42 != v41)
        {
          ++v44;
          v42 += 2;
          if (!--v43)
            goto LABEL_43;
        }
        v45 = v44[v68[10]];
        v38 = v45 > 5;
        v46 = (1 << v45) & 0x23;
        if (v38 || v46 == 0)
          goto LABEL_15;
LABEL_43:
        v48 = 16 * (v31 >> 4);
        while (*v32 != v41)
        {
          v32 += 2;
          v48 -= 16;
          if (!v48)
            goto LABEL_15;
        }
      }
    }
    v49 = v8[7];
    v22 = v8[6];
    v50 = (_QWORD *)v8[4];
    if ((uint64_t)v8[8] >= 1)
      swift_arrayDestroy();
LABEL_50:
    v9 = v52;
    ecs_stack_allocator_deallocate(v50, v22, 48 * v49);
    v8[6] = v65;
    v8[7] = v64;
    v8[8] = v63;
    v8[9] = v62;
    v8[10] = v61;
    sub_1B1F03804((char *)v66);
    ecs_stack_allocator_pop_snapshot(v52);
    v10 = v51;
    if ((v51 & 1) != 0)
    {
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v66 + 344));
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v66 + 376));
    }
    swift_release();
    v11 = v67 + 1;
    if (v67 + 1 != v55)
      continue;
    break;
  }
  sub_1B1A086DC(v71, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
  swift_release();
  sub_1B1A086DC(v71, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
  return sub_1B1A086DC(v71, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
}

uint64_t sub_1B1EDF1C8(uint64_t a1, float32x4_t *a2, uint64_t a3, unint64_t a4)
{
  float32x4_t *v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int8x16_t *v16;
  uint64_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t *v30;
  float32x4_t v31;
  float32x4_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  float v36;
  int8x16_t v37;
  float v38;
  BOOL v39;
  int8x16_t v40;
  float v41;
  int8x16_t v42;
  float v43;
  BOOL v44;
  int8x16_t v45;
  float v46;
  int8x16_t v47;
  float v48;
  BOOL v49;
  int8x16_t v50;
  float v51;
  int8x16_t v52;
  float v53;
  BOOL v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int8x16_t v59;
  int8x16_t v60;
  os_unfair_lock_s *v61;
  int v62;
  _QWORD *v63;
  char isUniquelyReferenced_nonNull_native;

  v8 = *(float32x4_t **)(a1 + 8);
  if (v8[19].i32[0] == v8[7].i32[1])
  {
    result = sub_1B1BF3AAC(v8[17], v8[18]);
    if (!(_BYTE)result)
    {
      v61 = *(os_unfair_lock_s **)(a3 + 128);
      swift_retain();
      os_unfair_lock_lock(v61);
      v62 = v8[11].i32[3];
      v63 = *(_QWORD **)(a3 + 96);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)(a3 + 96) = v63;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        *(_QWORD *)(a3 + 96) = sub_1B1FFECDC(v63);
      sub_1B1C8F2C0(v62, 0, 0, a4);
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(a3 + 128));
      return swift_release();
    }
    if (result == 1)
      return result;
  }
  v10 = *(_QWORD *)(a1 + 48);
  v11 = *(_QWORD *)(a1 + 56);
  v12 = a4;
  v13 = *(_QWORD *)(a1 + 16);
  v14 = (v11 + 63) >> 6;
  if (v14 <= 1)
    v14 = 1;
  v15 = 8 * v14;
  swift_retain();
  swift_retain();
  v16 = (int8x16_t *)sub_1B1BC47E4(v15, 8);
  bzero(v16, v15);
  swift_release();
  v17 = sub_1B1A12038((uint64_t)&type metadata for WorldAABB, (uint64_t)&off_1E63C5FC8, *(uint64_t **)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), v13);
  if (v10 != v11)
  {
    v18 = *a2;
    v19 = a2[1];
    v20 = a2[2];
    v21 = a2[3];
    v22 = a2[4];
    v23 = a2[5];
    v24 = vabsq_f32(*a2);
    v25 = vabsq_f32(v19);
    v26 = vabsq_f32(v20);
    v27 = vabsq_f32(v21);
    v28 = vabsq_f32(v22);
    v29 = vabsq_f32(v23);
    v30 = (float32x4_t *)(v17 + 32 * v10 + 16);
    do
    {
      v32 = v30[-1];
      v31 = *v30;
      v33 = (int8x16_t)vmulq_f32(v18, v32);
      v34 = (int8x16_t)vmulq_f32(*v30, v24);
      v39 = vaddv_f32(vadd_f32(*(float32x2_t *)v33.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v33, v33, 8uLL))) <= (float)-vaddv_f32(vadd_f32(*(float32x2_t *)v34.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v34, v34, 8uLL)));
      v35 = (int8x16_t)vmulq_f32(v19, v32);
      v36 = vaddv_f32(vadd_f32(*(float32x2_t *)v35.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v35, v35, 8uLL)));
      v37 = (int8x16_t)vmulq_f32(*v30, v25);
      v38 = -vaddv_f32(vadd_f32(*(float32x2_t *)v37.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v37, v37, 8uLL)));
      v39 = v39 || v36 <= v38;
      v40 = (int8x16_t)vmulq_f32(v20, v32);
      v41 = vaddv_f32(vadd_f32(*(float32x2_t *)v40.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v40, v40, 8uLL)));
      v42 = (int8x16_t)vmulq_f32(v31, v26);
      v43 = -vaddv_f32(vadd_f32(*(float32x2_t *)v42.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v42, v42, 8uLL)));
      v44 = v39 || v41 <= v43;
      v45 = (int8x16_t)vmulq_f32(v21, v32);
      v46 = vaddv_f32(vadd_f32(*(float32x2_t *)v45.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v45, v45, 8uLL)));
      v47 = (int8x16_t)vmulq_f32(v31, v27);
      v48 = -vaddv_f32(vadd_f32(*(float32x2_t *)v47.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v47, v47, 8uLL)));
      v49 = v44 || v46 <= v48;
      v50 = (int8x16_t)vmulq_f32(v22, v32);
      v51 = vaddv_f32(vadd_f32(*(float32x2_t *)v50.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v50, v50, 8uLL)));
      v52 = (int8x16_t)vmulq_f32(v31, v28);
      v53 = -vaddv_f32(vadd_f32(*(float32x2_t *)v52.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v52, v52, 8uLL)));
      v54 = v49 || v51 <= v53;
      v55 = v10 >> 6;
      if (v54)
      {
        v56 = 1 << v10;
      }
      else
      {
        v59 = (int8x16_t)vmulq_f32(v23, v32);
        v60 = (int8x16_t)vmulq_f32(v31, v29);
        v56 = 1 << v10;
        if (vaddv_f32(vadd_f32(*(float32x2_t *)v59.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v59, v59, 8uLL))) > (float)-vaddv_f32(vadd_f32(*(float32x2_t *)v60.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v60, v60, 8uLL))))
        {
          v57 = v55;
          v58 = v16->i64[v57] | v56;
          goto LABEL_25;
        }
      }
      v57 = v55;
      v58 = v16->i64[v57] & ~v56;
LABEL_25:
      v16->i64[v57] = v58;
      ++v10;
      v30 += 2;
    }
    while (v11 != v10);
  }
  sub_1B1DAC8B8((uint64_t)v8, v16, v11, v12);
  return swift_release();
}

uint64_t sub_1B1EDF4EC()
{
  uint64_t inited;
  _BYTE v2[40];
  _OWORD v3[2];
  uint64_t v4;
  uint64_t v5;
  int v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (qword_1ED4B7DB8 != -1)
    swift_once();
  v5 = qword_1ED4D09F8;
  v6 = 0;
  v7 = 2;
  v8 = 0;
  v9 = 2;
  v10 = 0;
  swift_retain();
  sub_1B1E416C4(1, (uint64_t)v2);
  swift_release();
  sub_1B1A19B14();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = &type metadata for LODCulled;
  *(_QWORD *)(inited + 40) = &off_1E63C3FF0;
  sub_1B1B44110(v3, inited);
  swift_setDeallocating();
  xmmword_1ED4D0918 = v3[0];
  unk_1ED4D0928 = v3[1];
  qword_1ED4D0938 = v4;
  return sub_1B19ED720((uint64_t)v2);
}

uint64_t type metadata accessor for CullingSystem()
{
  return objc_opt_self();
}

const char *sub_1B1EDF634()
{
  return "Culling";
}

uint64_t sub_1B1EDF648(uint64_t result)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  _BYTE v7[160];
  uint64_t v8[6];
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15[6];

  v1 = *(_QWORD *)(result + OBJC_IVAR____TtC3VFX13EntityManager_renderer);
  if (v1)
  {
    v2 = (_QWORD *)result;
    sub_1B19F66A0(v1 + 624, (uint64_t)v7, &qword_1ED4BF400);
    sub_1B19F66A0((uint64_t)v7, (uint64_t)v8, &qword_1ED4BF400);
    v3 = sub_1B1B3C438(v8);
    if ((_DWORD)v3 == 1)
    {
      result = sub_1B2229688();
      __break(1u);
    }
    else
    {
      v15[0] = v9;
      v15[1] = v10;
      v15[2] = v11;
      v15[3] = v12;
      v15[4] = v13;
      v15[5] = v14;
      v5 = v2[23];
      v2[23] = v5 + 1;
      MEMORY[0x1E0C80A78](v3, v4);
      v6 = (_QWORD *)v2[22];
      swift_retain();
      swift_retain();
      sub_1B1F22244((uint64_t)&type metadata for MainCullGroup, (uint64_t)&off_1E637B280, v6, (void (*)(uint64_t))sub_1B1EDF7EC);
      swift_release();
      sub_1B1EDEBD0(v2, v15, v5);
      return swift_release();
    }
  }
  return result;
}

_QWORD *sub_1B1EDF7EC(_QWORD *result)
{
  uint64_t v1;

  *result = *(_QWORD *)(v1 + 16);
  return result;
}

ValueMetadata *type metadata accessor for MainCullGroup()
{
  return &type metadata for MainCullGroup;
}

uint64_t sub_1B1EDF808(uint64_t a1)
{
  int v2;
  int v3;
  int v4;
  uint64_t v6[2];

  v2 = 0;
  v3 = 0;
  switch(a1)
  {
    case 10:
      v3 = 0;
      v2 = 4;
      break;
    case 11:
      v3 = 0;
      v2 = 5;
      break;
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
      goto LABEL_6;
    case 25:
      return v2 | (v3 << 8);
    case 55:
      v3 = 0;
      v2 = 1;
      break;
    case 70:
      v3 = 0;
      v2 = 6;
      break;
    case 71:
      v3 = 0;
      v2 = 7;
      break;
    case 80:
      v3 = 0;
      v2 = 8;
      break;
    case 81:
      v3 = 0;
      v2 = 9;
      break;
    default:
      if (a1 == 115)
      {
        v3 = 0;
        v2 = 2;
      }
      else if (a1 == 125)
      {
        v3 = 0;
        v2 = 3;
      }
      else
      {
LABEL_6:
        if (qword_1ED4BF430 != -1)
          swift_once();
        swift_retain();
        sub_1B2229430();
        swift_bridgeObjectRelease();
        v6[1] = 0x80000001B232F910;
        sub_1B1F9A724(a1);
        sub_1B2228890();
        swift_bridgeObjectRelease();
        v4 = sub_1B2228E90();
        if (qword_1ED4BF658 != -1)
          swift_once();
        v6[0] = 0;
        swift_retain();
        sub_1B1F1AD70(v4, v6, 0xD00000000000001ALL, 0x80000001B232F910);
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        v2 = 0;
        v3 = 1;
      }
      break;
  }
  return v2 | (v3 << 8);
}

void sub_1B1EDF9F4(uint64_t isStackAllocationSafe, uint64_t a2, uint64_t a3, uint64_t a4, char a5, unint64_t a6, uint64_t a7)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[2];

  v13 = isStackAllocationSafe;
  v16[1] = *MEMORY[0x1E0C80C00];
  if (4 * isStackAllocationSafe >= 1025)
  {
    isStackAllocationSafe = swift_stdlib_isStackAllocationSafe();
    if ((isStackAllocationSafe & 1) == 0)
    {
      v15 = swift_slowAlloc();
      sub_1B1EDFBAC(v15, v13, a2, a3, a4, a5, v13, a6, a7);
      JUMPOUT(0x1B5E23F88);
    }
  }
  MEMORY[0x1E0C80A78](isStackAllocationSafe, a2);
  sub_1B1EDFBAC((uint64_t)v16 - v14, v13, a2, a3, a4, a5, v13, a6, a7);
}

void sub_1B1EDFBAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, unint64_t a8, uint64_t a9)
{
  uint64_t v16;
  float v17;
  uint64_t v18;
  float v19;
  int v20;
  unint64_t v21;
  uint64_t v22;
  _DWORD *v23;
  unint64_t v24;
  int *v25;
  int v26;
  _OWORD *v27;
  __int128 *v28;
  unint64_t v29;
  __int128 v30;

  v16 = *(_QWORD *)(a4 + 16);
  if (v16)
  {
    v17 = *(float *)(a4 + 4 * v16 + 28);
    if (!a7)
      goto LABEL_7;
  }
  else
  {
    v17 = 1.0;
    if (!a7)
      goto LABEL_7;
  }
  v18 = 0;
  v19 = v17 / (float)((float)a7 + -1.0);
  do
  {
    sub_1B1FFCF6C(a3, a4, a5, a6, v19 * (float)v18);
    *(_DWORD *)(a1 + 4 * v18++) = v20;
  }
  while (a7 != v18);
LABEL_7:
  if (!a8)
    return;
  if (a8 < 8 || (unint64_t)(a9 - a1 + 4) < 0x20)
  {
    v21 = 0;
LABEL_11:
    v22 = 4 * v21;
    v23 = (_DWORD *)(4 * v21 + a9 + 4);
    v24 = a8 - v21;
    v25 = (int *)(a1 + v22);
    do
    {
      v26 = *v25++;
      *v23++ = v26;
      --v24;
    }
    while (v24);
    return;
  }
  v21 = a8 & 0xFFFFFFFFFFFFFFF8;
  v27 = (_OWORD *)(a9 + 20);
  v28 = (__int128 *)(a1 + 16);
  v29 = a8 & 0xFFFFFFFFFFFFFFF8;
  do
  {
    v30 = *v28;
    *(v27 - 1) = *(v28 - 1);
    *v27 = v30;
    v27 += 2;
    v28 += 2;
    v29 -= 8;
  }
  while (v29);
  if (v21 != a8)
    goto LABEL_11;
}

void sub_1B1EDFCF8(uint64_t a1@<X0>, char a2@<W1>, char a3@<W2>, uint64_t a4@<X8>)
{
  unsigned int v8;
  unsigned int v9;
  __int16 v10;
  __int128 v11;
  __int128 v12;
  void *v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  id v18;
  id v19;
  _OWORD v20[2];
  uint64_t v21;
  __int128 v22;

  v8 = *(unsigned __int16 *)(a1 + 32);
  v9 = *(unsigned __int16 *)(a1 + 34);
  v10 = sub_1B1EDF808(*(_QWORD *)(a1 + 48));
  v11 = xmmword_1B2246910;
  v12 = 0uLL;
  if ((v10 & 0x100) != 0 || (v13 = *(void **)a1) == 0)
  {
    v16 = 0;
    v17 = 0uLL;
  }
  else
  {
    v14 = v10;
    v15 = *(_QWORD *)(a1 + 8);
    if (objc_msgSend((id)swift_unknownObjectRetain(), sel_storageMode) == (id)2)
    {
      swift_unknownObjectRelease();
      v16 = 0;
      v17 = 0uLL;
      v11 = xmmword_1B2246910;
      v12 = 0uLL;
    }
    else
    {
      v18 = objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
      v19 = v13;
      swift_unknownObjectRelease();
      vfx_sampler2d_make((uint64_t)v18 + v15, v14, a2, a3 & 1, (uint64_t)v20, (int32x2_t)__PAIR64__(v9, v8));
      v12 = v20[0];
      v17 = v20[1];
      v16 = v21;
      v11 = v22;
    }
  }
  *(_OWORD *)a4 = v12;
  *(_OWORD *)(a4 + 16) = v17;
  *(_QWORD *)(a4 + 32) = v16;
  *(_OWORD *)(a4 + 40) = v11;
}

void sub_1B1EDFE20(uint64_t a1@<X0>, char a2@<W1>, char a3@<W2>, uint64_t a4@<X8>)
{
  int v8;
  __int16 v9;
  __int128 v10;
  void *v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  id v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;

  v8 = *(unsigned __int16 *)(a1 + 32);
  v9 = sub_1B1EDF808(*(_QWORD *)(a1 + 48));
  v10 = 0uLL;
  if ((v9 & 0x100) != 0 || (v11 = *(void **)a1) == 0)
  {
    v14 = 0;
    v15 = 0;
    v16 = 1;
  }
  else
  {
    v12 = v9;
    v13 = *(_QWORD *)(a1 + 8);
    if (objc_msgSend((id)swift_unknownObjectRetain(), sel_storageMode) == (id)2)
    {
      swift_unknownObjectRelease();
      v14 = 0;
      v15 = 0;
      v16 = 1;
      v10 = 0uLL;
    }
    else
    {
      v17 = objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
      v18 = v11;
      swift_unknownObjectRelease();
      vfx_sampler1d_make((uint64_t)v17 + v13, v8, v12, a2, a3 & 1, (uint64_t)&v19);
      v10 = v19;
      v14 = v20;
      v16 = v21;
      v15 = v22;
    }
  }
  *(_OWORD *)a4 = v10;
  *(_QWORD *)(a4 + 16) = v14;
  *(_QWORD *)(a4 + 24) = v16;
  *(_QWORD *)(a4 + 32) = v15;
}

void sub_1B1EDFF30(uint64_t a1@<X0>, char a2@<W1>, char a3@<W2>, uint64_t a4@<X8>)
{
  unsigned int v8;
  unsigned int v9;
  __int32 v10;
  __int16 v11;
  __int128 v12;
  void *v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  id v27;
  int32x4_t v28;
  _QWORD v29[8];
  __int128 v30;
  uint64_t v31;
  uint64_t v32;

  v8 = *(unsigned __int16 *)(a1 + 32);
  v9 = *(unsigned __int16 *)(a1 + 34);
  v10 = *(unsigned __int16 *)(a1 + 36);
  v11 = sub_1B1EDF808(*(_QWORD *)(a1 + 48));
  v12 = xmmword_1B2244C80;
  if ((v11 & 0x100) != 0 || (v13 = *(void **)a1) == 0)
  {
    v16 = 0;
    v17 = 0;
    v18 = 0;
    v19 = 0;
    v20 = 0;
    v21 = 0;
    v22 = 0;
    v23 = 0;
    v24 = 0;
    v25 = 0;
  }
  else
  {
    v14 = v11;
    v15 = *(_QWORD *)(a1 + 8);
    if (objc_msgSend((id)swift_unknownObjectRetain(), sel_storageMode) == (id)2)
    {
      swift_unknownObjectRelease();
      v16 = 0;
      v17 = 0;
      v18 = 0;
      v19 = 0;
      v20 = 0;
      v21 = 0;
      v22 = 0;
      v23 = 0;
      v24 = 0;
      v25 = 0;
      v12 = xmmword_1B2244C80;
    }
    else
    {
      v26 = objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
      v27 = v13;
      swift_unknownObjectRelease();
      v28.i64[0] = __PAIR64__(v9, v8);
      v28.i32[2] = v10;
      vfx_sampler3d_make((uint64_t)v26 + v15, v14, a2, a3 & 1, (uint64_t)v29, v28);
      v16 = v29[0];
      v17 = v29[1];
      v18 = v29[2];
      v19 = v29[3];
      v20 = v29[4];
      v21 = v29[5];
      v22 = v29[6];
      v23 = v29[7];
      v12 = v30;
      v24 = v31;
      v25 = v32;
    }
  }
  *(_QWORD *)a4 = v16;
  *(_QWORD *)(a4 + 8) = v17;
  *(_QWORD *)(a4 + 16) = v18;
  *(_QWORD *)(a4 + 24) = v19;
  *(_QWORD *)(a4 + 32) = v20;
  *(_QWORD *)(a4 + 40) = v21;
  *(_QWORD *)(a4 + 48) = v22;
  *(_QWORD *)(a4 + 56) = v23;
  *(_OWORD *)(a4 + 64) = v12;
  *(_QWORD *)(a4 + 80) = v24;
  *(_QWORD *)(a4 + 88) = v25;
}

double sub_1B1EE00B0@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v7;
  float v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  int v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  double result;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _BYTE v25[32];
  int v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v24 = 0u;
  memset(v25, 0, 28);
  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  v18 = 0u;
  v19 = 0u;
  v7 = *(_QWORD *)(a2 + 16);
  if (v7)
    v8 = *(float *)(a2 + 4 * v7 + 28);
  else
    v8 = 1.0;
  v9 = 32;
  if (a5 < 32)
    v9 = a5;
  if (v9 <= 2)
    v10 = 2;
  else
    v10 = v9;
  *(float *)&v25[28] = (float)((float)v10 + -1.0) / v8;
  v26 = 1065353216;
  sub_1B1EDF9F4(v10, a1, a2, a3, a4, v10, (uint64_t)&v18);
  LODWORD(v18) = DWORD1(v18);
  v11 = (int *)&v18 + v10;
  v12 = *v11;
  v11[1] = *v11;
  v11[2] = v12;
  v13 = *(_OWORD *)v25;
  *(_OWORD *)(a6 + 96) = v24;
  *(_OWORD *)(a6 + 112) = v13;
  *(_OWORD *)(a6 + 128) = *(_OWORD *)&v25[16];
  *(_DWORD *)(a6 + 144) = v26;
  v14 = v21;
  *(_OWORD *)(a6 + 32) = v20;
  *(_OWORD *)(a6 + 48) = v14;
  v15 = v23;
  *(_OWORD *)(a6 + 64) = v22;
  *(_OWORD *)(a6 + 80) = v15;
  result = *(double *)&v18;
  v17 = v19;
  *(_OWORD *)a6 = v18;
  *(_OWORD *)(a6 + 16) = v17;
  return result;
}

uint64_t sub_1B1EE01D8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t ObjectType;

  ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(a2 + 8))(v2 + 24, 0, ObjectType, a2);
}

double sub_1B1EE0220@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_OWORD *)a1 = xmmword_1B228FB70;
  *(_DWORD *)(a1 + 16) = 0;
  result = NAN;
  *(_QWORD *)(a1 + 20) = 0xFFFFFFFF000000FFLL;
  *(_DWORD *)(a1 + 28) = 0;
  return result;
}

double sub_1B1EE0240@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];

  sub_1B1EE4040(a1, (uint64_t)v6);
  if (!v2)
  {
    result = *(double *)v6;
    v5 = v6[1];
    *a2 = v6[0];
    a2[1] = v5;
  }
  return result;
}

uint64_t sub_1B1EE0278(_QWORD *a1)
{
  __int128 *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  __int128 v10;
  uint64_t result;
  _BYTE v12[8];
  uint64_t v13;
  __int128 v14;
  __int128 v15;

  sub_1B1D4F120(0, &qword_1EEF5CA00, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED170]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v7);
  v9 = &v12[-v8];
  v10 = v1[1];
  v14 = *v1;
  v15 = v10;
  result = sub_1B1C36AC4(a1, (uint64_t)&v12[-v8]);
  if (!v2)
  {
    v13 = *((_QWORD *)&v15 + 1);
    v12[7] = 12;
    sub_1B1A0895C();
    sub_1B2229958();
    return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v9, v5);
  }
  return result;
}

double sub_1B1EE0368()
{
  double result;
  _OWORD v1[2];
  uint64_t v2;
  uint64_t v3;
  int v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;

  if (qword_1ED4B7DB8 != -1)
    swift_once();
  v3 = qword_1ED4D09F8;
  v4 = 0;
  v5 = 2;
  v6 = 0;
  v7 = 2;
  v8 = 0;
  swift_retain();
  sub_1B19F19D4((uint64_t)v1);
  swift_release();
  result = *(double *)v1;
  xmmword_1EEFD5668 = v1[0];
  unk_1EEFD5678 = v1[1];
  qword_1EEFD5688 = v2;
  return result;
}

uint64_t *sub_1B1EE0408(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t *result;
  uint64_t v7;
  int i;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  os_unfair_lock_s *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  float32x2_t *v21;
  uint64_t v22;
  float32x2_t *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37[8];
  _OWORD v38[2];
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  _OWORD v48[2];
  uint64_t v49;
  _BYTE v50[40];
  _OWORD v51[2];
  uint64_t v52;

  if (qword_1EEF573B0 != -1)
    swift_once();
  v51[0] = xmmword_1EEFD5668;
  v51[1] = unk_1EEFD5678;
  v52 = qword_1EEFD5688;
  v5 = a2 & 0xFFFFFFFFFFLL;
  sub_1B1E8FCE4(a1, (uint64_t)v51, a2 & 0xFFFFFFFFFFLL, v37);
  result = (uint64_t *)sub_1B19F66A0((uint64_t)v37, (uint64_t)v38, (unint64_t *)&qword_1ED4B7DE0);
  if (*(_QWORD *)&v38[0])
  {
    v45 = v38[0];
    v46 = v38[1];
    v47 = v39;
    if (v44 >= 1)
    {
      v31 = v41;
      if (v41)
      {
        v29 = v40;
        v7 = v43[4];
        i = *(unsigned __int8 *)(v42 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
        v36 = v43;
        v26 = v43 + 8;
        v27 = (uint64_t)(v43 + 6);
        swift_retain();
        swift_retain();
        swift_retain();
        v9 = 0;
        v28 = i;
        v30 = v7;
        v25 = v2;
        do
        {
          v10 = (unsigned int *)(v29 + 48 * v9);
          v33 = *v10;
          v32 = v10[1];
          v11 = *((_QWORD *)v10 + 3);
          v13 = *((_QWORD *)v10 + 4);
          v12 = *((_QWORD *)v10 + 5);
          v34 = (uint64_t *)*((_QWORD *)v10 + 2);
          v35 = v9;
          if (i)
          {
            v14 = *(os_unfair_lock_s **)(v12 + 376);
            swift_retain();
            os_unfair_lock_lock(v14);
            os_unfair_lock_lock(*(os_unfair_lock_t *)(v12 + 344));
          }
          else
          {
            swift_retain();
          }
          ecs_stack_allocator_push_snapshot(v7);
          sub_1B19F66A0(v27, (uint64_t)v50, &qword_1ED4B7FB0);
          v15 = v36[4];
          v16 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v12 + 40) + 16) + 32) + 16) + 1;
          v17 = v12;
          swift_retain();
          v36[6] = ecs_stack_allocator_allocate(v15, 48 * v16, 8);
          v36[7] = v16;
          v26[1] = 0;
          v26[2] = 0;
          *v26 = 0;
          swift_release();
          v18 = sub_1B1A12038((uint64_t)&type metadata for ParticleMeshCollider, (uint64_t)&off_1E639CA10, v34, v11, v13, (uint64_t)v36);
          v19 = v17;
          v20 = sub_1B1A12038((uint64_t)&type metadata for WorldTransform, (uint64_t)&off_1E6382C00, v34, v11, v13, (uint64_t)v36);
          v21 = (float32x2_t *)v20;
          if (v34)
          {
            for (i = v28; v13; --v13)
            {
              sub_1B1EE37EC(v18, v21, v25, a1, v5);
              v21 += 8;
              v18 += 32;
            }
          }
          else
          {
            i = v28;
            if ((_DWORD)v33 != (_DWORD)v32)
            {
              v22 = v32 - v33;
              v23 = (float32x2_t *)(v20 + (v33 << 6));
              v24 = v18 + 32 * v33;
              do
              {
                sub_1B1EE37EC(v24, v23, v25, a1, v5);
                v23 += 8;
                v24 += 32;
                --v22;
              }
              while (v22);
            }
          }
          v48[0] = v45;
          v48[1] = v46;
          v49 = v47;
          sub_1B1F05D48(v36, (unsigned __int16 **)v48, (uint64_t)v50);
          sub_1B1F03804((char *)v19);
          v7 = v30;
          ecs_stack_allocator_pop_snapshot(v30);
          if ((i & 1) != 0)
          {
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v19 + 344));
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v19 + 376));
          }
          swift_release();
          v9 = v35 + 1;
        }
        while (v35 + 1 != v31);
        sub_1B19ED748(v37);
      }
    }
    return sub_1B19ED748(v37);
  }
  return result;
}

uint64_t sub_1B1EE0804(__int128 *a1, float32x4_t *a2, uint64_t a3, unint64_t a4, uint64_t a5, float a6, float32x4_t a7, float32x4_t a8, float32x4_t a9, float32x4_t a10, float32x4_t a11, float32x4_t a12, float32x4_t a13, uint64_t a14, uint64_t a15, uint64_t a16, float32x4_t a17, float32x4_t a18, float32x4_t a19, float32x4_t a20)
{
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char v29;
  char v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v41;
  float32x4_t v42;
  int32x4_t v43;
  int32x4_t v44;
  uint64_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint16x4_t *v59;
  uint64_t v60;
  uint64_t v61;
  float32x4_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint16x4_t *v66;
  uint64_t v67;
  uint64_t v68;
  float v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  float v73;
  float32x4_t v74;
  float v75;
  uint64_t v76;
  float v77;
  char v78;
  _QWORD *v79;
  void *v80;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  id v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  uint64_t v90;
  char *v91;
  float32x4_t v92;
  float32x4_t v93;
  float32x4_t v94;
  char *v95;
  id v96;
  float32x4_t v97;
  float32x4_t v98;
  float32x4_t v99;
  uint64_t v100;
  char *v101;
  float32x4_t v102;
  float32x4_t v103;
  float32x4_t v104;
  uint64_t v105;
  char *v106;
  char *v107;
  float32x4_t v108;
  char *v109;
  float32x4_t v110;
  char *v111;
  __int32 v112;
  float32x4_t v113;
  float32x4_t v114;
  float32x4_t v115;
  float32x4_t v116;
  float32x4_t v117;
  float32x4_t v118;
  float32x4_t v119;
  float32x4_t v120;
  float32x4_t v121;
  int32x4_t v122;
  float32x4_t v123;
  float32x4_t v124;
  float v125;
  float32x4_t v126;
  float32x4_t v127;
  float v128;
  float v130;
  float32x4_t v131;
  float32x4_t v132;
  int32x2_t v133;
  float32x4_t v135;
  float32x4_t v136;
  float32x4_t v137;
  float32x4_t v138;
  float32x4_t v139;
  float32x4_t v140;
  float32x4_t v141;
  float32x4_t v142;
  float32x4_t v143;
  float32x4_t v144;
  int32x4_t v145;
  int32x4_t v146;
  int32x4_t v147;
  int32x4_t v148;
  float32x4_t v149;
  float32x4_t v150;
  float32x4_t v151;
  float32x4_t v152;
  float v153;
  float32x4_t v154;
  float32x4_t v155;
  float32x4_t v156;
  float32x4_t v157;
  float v158;
  float32x4_t v159;
  float32x4_t v160;
  float32x4_t v161;
  float32x4_t v162;
  float v163;
  float32x4_t v164;
  float v165;
  float v166;
  float32x4_t v168;
  float32x4_t v170;
  float32x4_t v171;
  float v172;
  float32x4_t v173;
  float32x4_t v174;
  float32x4_t v175;
  float32x4_t v176;
  float v177;
  float32x4_t v178;
  float32x4_t v179;
  float32x4_t v180;
  float32x4_t v181;
  float v182;
  float32x4_t v183;
  float v184;
  float v185;
  float32x4_t v187;
  float32x4_t v189;
  float32x4_t v190;
  float32x4_t v191;
  float32x4_t v192;
  float32x4_t v193;
  float32x4_t v194;
  float v195;
  float32x4_t v196;
  float32x4_t v197;
  float32x4_t v198;
  float32x4_t v199;
  float v200;
  float32x4_t v201;
  float v202;
  float v203;
  float32x4_t v205;
  float v208;
  float32x4_t v209;
  float32x4_t v210;
  float v211;
  float32x4_t v212;
  float v213;
  BOOL v214;
  float32x4_t v215;
  float32x4_t v216;
  float32x4_t v217;
  float v218;
  BOOL v219;
  float32x4_t v220;
  float32x4_t v221;
  float32x4_t v222;
  uint64_t v224;
  char *v225;
  char *v226;
  float32x4_t v227;
  char *v228;
  float32x4_t v229;
  char *v230;
  __int32 v231;
  float32x4_t v232;
  float32x4_t v233;
  float32x4_t v234;
  float32x4_t v235;
  float32x4_t v236;
  float32x4_t v237;
  float32x4_t v238;
  float32x4_t v239;
  float32x4_t v240;
  int32x4_t v241;
  float32x4_t v242;
  float32x4_t v243;
  float v244;
  float32x4_t v245;
  float32x4_t v246;
  float v247;
  float v249;
  float32x4_t v250;
  float32x4_t v251;
  int32x2_t v252;
  float32x4_t v254;
  float32x4_t v255;
  float32x4_t v256;
  float32x4_t v257;
  float32x4_t v258;
  float32x4_t v259;
  float32x4_t v260;
  float32x4_t v261;
  float32x4_t v262;
  float32x4_t v263;
  int32x4_t v264;
  int32x4_t v265;
  int32x4_t v266;
  int32x4_t v267;
  float32x4_t v268;
  float32x4_t v269;
  float32x4_t v270;
  float32x4_t v271;
  float v272;
  float32x4_t v273;
  float32x4_t v274;
  float32x4_t v275;
  float32x4_t v276;
  float v277;
  float32x4_t v278;
  float32x4_t v279;
  float32x4_t v280;
  float32x4_t v281;
  float v282;
  float32x4_t v283;
  float v284;
  float v285;
  float32x4_t v287;
  float32x4_t v289;
  float32x4_t v290;
  float v291;
  float32x4_t v292;
  float32x4_t v293;
  float32x4_t v294;
  float32x4_t v295;
  float v296;
  float32x4_t v297;
  float32x4_t v298;
  float32x4_t v299;
  float32x4_t v300;
  float v301;
  float32x4_t v302;
  float v303;
  float v304;
  float32x4_t v306;
  float32x4_t v308;
  float32x4_t v309;
  float32x4_t v310;
  float32x4_t v311;
  float32x4_t v312;
  float32x4_t v313;
  float v314;
  float32x4_t v315;
  float32x4_t v316;
  float32x4_t v317;
  float32x4_t v318;
  float v319;
  float32x4_t v320;
  float v321;
  float v322;
  float32x4_t v324;
  float v327;
  float32x4_t v328;
  float32x4_t v329;
  float v330;
  float32x4_t v331;
  float v332;
  float32x4_t v334;
  float32x4_t v335;
  float32x4_t v336;
  float v337;
  float32x4_t v339;
  float32x4_t v340;
  float32x4_t v341;
  uint64_t v344;
  float32x4_t v345;
  float32x4_t v346;
  int8x16_t v347;
  uint64_t v348;
  uint64_t v349;
  _DWORD *v350;
  float32x4_t v351;
  int8x16_t v352;
  int8x16_t v353;
  int8x16_t v354;
  int32x4_t v355;
  float32x4_t v356;
  unsigned int v357;
  int32x4_t v358;
  int32x2_t v359;
  float32x4_t v360;
  uint32x4_t v361;
  float32x2_t v362;
  int16x4_t v363;
  float32x4_t v364;
  uint32x4_t v365;
  float v366;
  int32x4_t v367;
  int8x16_t v368;
  int8x16_t v369;
  int8x16_t v370;
  float v371;
  uint64_t v372;
  float32x4_t v373;
  int8x16_t v375;
  uint64_t v376;
  uint64_t v377;
  _DWORD *v378;
  int8x16_t v379;
  int8x16_t v380;
  int8x16_t v381;
  int32x4_t v382;
  float32x4_t v383;
  unsigned int v384;
  int32x4_t v385;
  float32x4_t v387;
  int32x2_t v388;
  float32x4_t v389;
  uint32x4_t v390;
  float32x2_t v391;
  int16x4_t v392;
  float32x4_t v393;
  uint32x4_t v394;
  float v395;
  int32x4_t v396;
  int8x16_t v397;
  int8x16_t v398;
  int8x16_t v399;
  float32x4_t v400;
  float32x4_t v401;
  int32x2_t v402;
  unsigned int v403;
  uint64_t *v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  float v410;
  float32x4_t v411;
  float v412;
  uint64_t v413;
  char v414;
  _QWORD *v415;
  void *v416;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  char *v421;
  id v422;
  float32x4_t v423;
  float32x4_t v424;
  float32x4_t v425;
  uint64_t v426;
  char *v427;
  float32x4_t v428;
  float32x4_t v429;
  float32x4_t v430;
  char *v431;
  id v432;
  float32x4_t v433;
  float32x4_t v434;
  float32x4_t v435;
  uint64_t v436;
  char *v437;
  float32x4_t v438;
  float32x4_t v439;
  float32x4_t v440;
  uint64_t v441;
  char *v442;
  uint64_t v443;
  float32x4_t v444;
  uint64_t v445;
  float32x4_t v446;
  uint64_t v447;
  __int32 v448;
  float32x4_t v449;
  float32x4_t v450;
  float32x4_t v451;
  float32x4_t v452;
  float32x4_t v453;
  float32x4_t v454;
  float32x4_t v455;
  float32x4_t v456;
  float32x4_t v457;
  int32x4_t v458;
  float32x4_t v459;
  float32x4_t v460;
  float v461;
  float32x4_t v462;
  float32x4_t v463;
  float v464;
  float v466;
  float32x4_t v467;
  float32x4_t v468;
  int32x2_t v469;
  float32x4_t v471;
  float32x4_t v472;
  float32x4_t v473;
  float32x4_t v474;
  float32x4_t v475;
  float32x4_t v476;
  float32x4_t v477;
  float32x4_t v478;
  float32x4_t v479;
  float32x4_t v480;
  int32x4_t v481;
  int32x4_t v482;
  int32x4_t v483;
  int32x4_t v484;
  float32x4_t v485;
  float32x4_t v486;
  float32x4_t v487;
  float32x4_t v488;
  float v489;
  float32x4_t v490;
  float32x4_t v491;
  float32x4_t v492;
  float32x4_t v493;
  float v494;
  float32x4_t v495;
  float32x4_t v496;
  float32x4_t v497;
  float32x4_t v498;
  float v499;
  float32x4_t v500;
  float v501;
  float v502;
  float32x4_t v504;
  float32x4_t v506;
  float32x4_t v507;
  float v508;
  float32x4_t v509;
  float32x4_t v510;
  float32x4_t v511;
  float32x4_t v512;
  float v513;
  float32x4_t v514;
  float32x4_t v515;
  float32x4_t v516;
  float32x4_t v517;
  float v518;
  float32x4_t v519;
  float v520;
  float v521;
  float32x4_t v523;
  float32x4_t v525;
  float32x4_t v526;
  float32x4_t v527;
  float32x4_t v528;
  float32x4_t v529;
  float32x4_t v530;
  float v531;
  float32x4_t v532;
  float32x4_t v533;
  float32x4_t v534;
  float32x4_t v535;
  float v536;
  float32x4_t v537;
  float v538;
  float v539;
  float32x4_t v541;
  float v544;
  float32x4_t v545;
  float32x4_t v546;
  float v547;
  float32x4_t v548;
  float v549;
  BOOL v550;
  float32x4_t v551;
  float32x4_t v552;
  float32x4_t v553;
  float v554;
  BOOL v555;
  float32x4_t v556;
  float32x4_t v557;
  float32x4_t v558;
  uint64_t v560;
  char *v561;
  uint64_t v562;
  float32x4_t v563;
  uint64_t v564;
  float32x4_t v565;
  uint64_t v566;
  __int32 v567;
  float32x4_t v568;
  float32x4_t v569;
  float32x4_t v570;
  float32x4_t v571;
  float32x4_t v572;
  float32x4_t v573;
  float32x4_t v574;
  float32x4_t v575;
  float32x4_t v576;
  int32x4_t v577;
  float32x4_t v578;
  float32x4_t v579;
  float v580;
  float32x4_t v581;
  float32x4_t v582;
  float v583;
  float v585;
  float32x4_t v586;
  float32x4_t v587;
  int32x2_t v588;
  float32x4_t v589;
  float32x4_t v590;
  float32x4_t v591;
  float32x4_t v592;
  float32x4_t v593;
  float32x4_t v594;
  float32x4_t v595;
  float32x4_t v596;
  float32x4_t v597;
  float32x4_t v598;
  float32x4_t v599;
  int32x4_t v600;
  int32x4_t v601;
  int32x4_t v602;
  int32x4_t v603;
  float32x4_t v604;
  float32x4_t v605;
  float32x4_t v606;
  float32x4_t v607;
  float v608;
  float32x4_t v609;
  float32x4_t v610;
  float32x4_t v611;
  float32x4_t v612;
  float v613;
  float32x4_t v614;
  float32x4_t v615;
  float32x4_t v616;
  float32x4_t v617;
  float v618;
  float32x4_t v619;
  float v620;
  float v621;
  float32x4_t v623;
  float32x4_t v625;
  float32x4_t v626;
  float v627;
  float32x4_t v628;
  float32x4_t v629;
  float32x4_t v630;
  float32x4_t v631;
  float v632;
  float32x4_t v633;
  float32x4_t v634;
  float32x4_t v635;
  float32x4_t v636;
  float v637;
  float32x4_t v638;
  float v639;
  float v640;
  float32x4_t v642;
  float32x4_t v644;
  float32x4_t v645;
  float32x4_t v646;
  float32x4_t v647;
  float32x4_t v648;
  float32x4_t v649;
  float v650;
  float32x4_t v651;
  float32x4_t v652;
  float32x4_t v653;
  float32x4_t v654;
  float v655;
  float32x4_t v656;
  float v657;
  float v658;
  float32x4_t v660;
  float v663;
  float32x4_t v664;
  float32x4_t v665;
  float v666;
  float32x4_t v667;
  float v668;
  float32x4_t v670;
  float32x4_t v671;
  float32x4_t v672;
  float v673;
  float32x4_t v675;
  float32x4_t v676;
  float32x4_t v677;
  __int32 v679;
  __int32 v680;
  uint64_t v681;
  uint64_t v682;
  uint64_t *v683;
  float32x4_t v684;
  float32x4_t v685;
  float32x4_t v686;
  float32x4_t v687;
  float32x4_t v688;
  float32x4_t v689;
  float32x4_t v690;
  float32x4_t v691;
  float32x4_t v692;
  int8x16_t v693;
  int32x4_t v694;
  float32x4_t v695;
  int8x16_t v697;
  float32x4_t v698;
  float32x4_t v699;
  uint64_t v700;
  __int32 v701;
  __int32 v702;
  uint64_t v703;
  __int32 v704;
  __int32 v705;
  __int32 v709;
  float v710;
  char v711;
  int v712;
  uint64_t v713;
  uint64_t v714;
  uint64_t v715;
  uint64_t v720;
  uint64_t v722;
  float32x4_t *v723;
  float32x4_t *v724;
  float32x4_t v725;
  float32x4_t v726;
  float32x4_t v727;
  float32x4_t v728;
  float32x4_t v729;
  float32x4_t v730;
  float32x4_t v731;
  float32x4_t v732;
  float v733;
  float v734;
  float32x4_t v735;
  float32x4_t v736;
  float32x4_t v737;
  float32x4_t v738;
  float32x4_t v740;
  float32x4_t v741;
  uint64_t v742;
  uint64_t v743;
  float32x4_t v744;
  uint64_t v745;
  float32x4_t v746;
  float32x2_t v747;
  float32x4_t v748;
  __int32 v749;
  float32x4_t v750;
  float v751;
  float v752;
  uint64_t v753;
  __int32 v754;
  float32x4_t v755;
  uint64_t v756;
  float32x4_t v757;
  float32x4_t v758;
  float32x4_t v759;
  char v760;
  _QWORD v761[2];
  _QWORD v762[6];
  float v763;
  char v764;
  __int128 v765;
  __int128 v766;
  __int128 v767;
  __int128 v768;
  __int128 v769;
  __int128 v770;
  __int128 v771;
  _QWORD *v772;
  uint64_t v773;
  uint64_t v774;
  _QWORD *v775;
  uint64_t v776;
  uint64_t v777;
  uint64_t v778;

  v778 = *MEMORY[0x1E0C80C00];
  v23 = (uint64_t *)*((_QWORD *)a1 + 11);
  v24 = *((_QWORD *)a1 + 12);
  v25 = *((_QWORD *)a1 + 13);
  v26 = *((_QWORD *)a1 + 1);
  v27 = *((_QWORD *)a1 + 2);
  v715 = sub_1B1A12038((uint64_t)&type metadata for Position, (uint64_t)&off_1E63C2398, v23, v24, v25, v27);
  v714 = sub_1B1A12038((uint64_t)&type metadata for Velocity, (uint64_t)&off_1E63C30D0, v23, v24, v25, v27);
  v700 = sub_1B1B47B28();
  v29 = v28;
  v703 = sub_1B1B47B98();
  v711 = v30;
  v757 = *a2;
  v771 = a1[6];
  v31 = a1[4];
  v770 = a1[5];
  v769 = v31;
  v32 = a1[2];
  v768 = a1[3];
  v33 = a1[1];
  v765 = *a1;
  v766 = v33;
  v759.i64[0] = (uint64_t)&off_1E6397A08;
  v34 = a2[1].i64[0];
  v758.i64[1] = (uint64_t)&type metadata for CollisionProperties;
  v758.i64[0] = v34;
  v720 = a3;
  v35 = *(_QWORD *)(a3 + 16);
  v761[1] = 0;
  v761[0] = 0;
  v767 = v32;
  v36 = *((_QWORD *)a1 + 6);
  v37 = *((_QWORD *)a1 + 7);
  v38 = *(_QWORD *)(v27 + 32);
  swift_retain();
  v772 = ecs_stack_allocator_allocate(v38, 8 * (v37 - v36), 8);
  v773 = v37 - v36;
  v774 = 0;
  sub_1B19FA198((uint64_t)&v757, (uint64_t)v762);
  v763 = a6;
  v762[5] = v35;
  sub_1B1A10AA4(*(_QWORD *)(v26 + 40), (uint64_t)&type metadata for Anchored, &v756);
  v764 = v756;
  swift_retain();
  v39 = ecs_stack_allocator_allocate(v38, 80 * (v37 - v36), 16);
  swift_release();
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v757);
  v713 = v37;
  v775 = v39;
  v776 = v37 - v36;
  v777 = 0;
  if (v37 != v36)
  {
    v41 = v36;
    v712 = v29 & 1;
    v710 = *(float *)(v720 + 80) * 0.5;
    v699 = vmlaq_f32(vmlaq_f32(vmulq_f32(a20, (float32x4_t)0), (float32x4_t)0, a19), (float32x4_t)0, a18);
    v42 = vmulq_f32(v699, v699);
    v42.i64[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v42, 2), vaddq_f32(v42, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v42.f32, 1))).u64[0];
    v43 = vdupq_lane_s32(*(int32x2_t *)v42.f32, 0);
    v43.i32[3] = 0;
    v44 = vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vdup_n_s16(v42.f32[0] != 0.0)), 0x1FuLL));
    v44.i32[3] = 0;
    v697 = (int8x16_t)vcltzq_s32(v44);
    v698 = (float32x4_t)v43;
    while (1)
    {
      v724 = (float32x4_t *)(v714 + 16 * v41);
      v46 = vmulq_n_f32(*v724, a6);
      v723 = (float32x4_t *)(v715 + 16 * v41);
      v47 = vsubq_f32(*v723, v46);
      v48 = vmlaq_n_f32(vmlaq_lane_f32(vmlaq_laneq_f32(a10, a9, v47, 2), a8, *(float32x2_t *)v47.f32, 1), a7, v47.f32[0]);
      v49 = v48;
      v49.i32[3] = v755.i32[3];
      v755 = v49;
      v50 = vmlaq_n_f32(vmlaq_lane_f32(vmulq_laneq_f32(a9, v46, 2), a8, *(float32x2_t *)v46.f32, 1), a7, v46.f32[0]);
      v51 = v50;
      v51.i32[3] = v738.i32[3];
      v738 = v51;
      if ((*(_DWORD *)(v720 + 80) & 0x7FFFFFFF) == 0)
        break;
      __asm { FMOV            V0.4S, #1.0 }
      v744 = v48;
      v746 = _Q0;
      v748 = v50;
      v722 = v41;
      if ((v711 & 1) != 0)
      {
        v62 = _Q0;
        v62.i32[3] = v709;
        v750 = v62;
      }
      else
      {
        v750 = *(float32x4_t *)(v703 + 16 * v41);
      }
      v63 = sub_1B1E218F4(0);
      if (!v63)
        goto LABEL_466;
      v66 = (uint16x4_t *)v63;
      v67 = v64;
      v68 = v65;
      v69 = v710 * fmaxf(fmaxf(v750.f32[0], v750.f32[2]), v750.f32[1]);
      if (v64 != 30)
      {
        __asm { FMOV            V0.4S, #-1.0 }
        v741 = _Q0;
        v344 = swift_slowAlloc();
        v348 = v344;
        v349 = *(_QWORD *)(a5 + 48);
        if (!v349)
        {
          v351 = v748;
          goto LABEL_270;
        }
        if ((unint64_t)(v67 - 9) < 0x2D && ((0x1C01805FFC09uLL >> (v67 - 9)) & 1) != 0)
        {
          v350 = (_DWORD *)(v344 + 8);
          v351 = v748;
          do
          {
            switch(v67)
            {
              case 9:
                *(double *)v345.i64 = sub_1B1AE4138(v66->i32[0]);
                v351 = v748;
                break;
              case 12:
                *(uint32x2_t *)v358.i8 = vshl_u32((uint32x2_t)vdup_n_s32(v66->i32[0]), (uint32x2_t)0x1000000018);
                v358.i32[2] = v66->i32[0] << 8;
                v358.i32[3] = v66->i32[0];
                v346.i16[1] = v746.i16[1];
                v345 = vminnmq_f32(vmaxnmq_f32(vmulq_f32(vcvtq_f32_s32(vshrq_n_s32(v358, 0x18uLL)), (float32x4_t)vdupq_n_s32(0x3C010204u)), v741), v746);
                break;
              case 19:
                v345.i16[0] = v66->i16[0];
                v362.f32[0] = (float)v345.u32[0];
                v346.i16[0] = v66->i16[1];
                v362.f32[1] = (float)v346.u32[0];
                *(int32x2_t *)v346.f32 = vdup_n_s32(0x37800080u);
                *(float32x2_t *)v345.f32 = vmul_f32(v362, *(float32x2_t *)v346.f32);
                break;
              case 20:
                v345.i16[0] = v66->i16[0];
                v346.i16[0] = v66->i16[1];
                v346.f32[0] = (float)v346.u32[0];
                v347.i16[0] = v66->i16[2];
                v360.i32[3] = 0;
                v360.f32[0] = (float)v345.u32[0];
                v360.i32[1] = v346.i32[0];
                v360.f32[2] = (float)v347.u32[0];
                v345 = vmulq_f32(v360, (float32x4_t)vdupq_n_s32(0x37800080u));
                break;
              case 21:
                v356 = vcvtq_f32_u32(vmovl_u16(*v66));
                v357 = 931135616;
                goto LABEL_225;
              case 22:
                v359.i32[0] = v66->i16[0];
                v359.i32[1] = v66->i16[1];
                *(int32x2_t *)v346.f32 = vdup_n_s32(0x38000100u);
                *(float32x2_t *)v345.f32 = vmul_f32(vadd_f32((float32x2_t)vadd_s32(v359, vdup_n_s32(0x4B400000u)), (float32x2_t)vdup_n_s32(0xCB400000)), *(float32x2_t *)v346.f32);
                break;
              case 23:
                v363.i32[0] = v66->i32[0];
                v363.i32[1] = v66->u16[2];
                v364 = (float32x4_t)vaddw_s16(vdupq_n_s32(0x4B400000u), v363);
                goto LABEL_224;
              case 24:
                v364 = (float32x4_t)vaddw_s16(vdupq_n_s32(0x4B400000u), (int16x4_t)*v66);
LABEL_224:
                v356 = vaddq_f32(v364, (float32x4_t)vdupq_n_s32(0xCB400000));
                v357 = 939524352;
LABEL_225:
                v346 = (float32x4_t)vdupq_n_s32(v357);
                v345 = vmulq_f32(v356, v346);
                break;
              case 25:
                v751 = sub_1B189E3A8(v66->u16[0]);
                v345.f32[0] = sub_1B189E3A8(v66->u16[1]);
                v351 = v748;
                v347.i16[1] = HIWORD(v751);
                v346.i16[1] = v345.i16[1];
                v345.i32[2] = 0;
                v345.i64[0] = __PAIR64__(v345.u32[0], LODWORD(v751));
                break;
              case 26:
                v367.i32[0] = v66->u16[0];
                v367.i32[1] = v66->u16[1];
                v367.i64[1] = v66->u16[2];
                v368.i64[0] = 0x8000000080000000;
                v368.i64[1] = 0x8000000080000000;
                v369 = vandq_s8((int8x16_t)vshlq_n_s32(v367, 0x10uLL), v368);
                v370 = (int8x16_t)vshlq_n_s32(v367, 0xDuLL);
                v346 = (float32x4_t)vorrq_s8(v369, vandq_s8(v370, (int8x16_t)vdupq_n_s32(0x7FE000u)));
                v347.i64[0] = 0x3800000038000000;
                v347.i64[1] = 0x3800000038000000;
                v345 = (float32x4_t)vorrq_s8((int8x16_t)v346, (int8x16_t)vaddq_s32((int32x4_t)vandq_s8(v370, (int8x16_t)vdupq_n_s32(0xF800000u)), (int32x4_t)v347));
                break;
              case 27:
                v352.i64[0] = 0x8000000080000000;
                v352.i64[1] = 0x8000000080000000;
                v353 = (int8x16_t)vshll_n_u16(*v66, 0xDuLL);
                v354 = vorrq_s8(vandq_s8((int8x16_t)vmovl_s16((int16x4_t)*v66), v352), vandq_s8(v353, (int8x16_t)vdupq_n_s32(0x7FE000u)));
                v347 = (int8x16_t)vdupq_n_s32(0xF800000u);
                v355 = (int32x4_t)vorrq_s8(vandq_s8(v353, v347), v354);
                v346.i64[0] = 0x3800000038000000;
                v346.i64[1] = 0x3800000038000000;
                v345 = (float32x4_t)vaddq_s32(v355, (int32x4_t)v346);
                break;
              case 28:
                v345.i32[0] = v66->i32[0];
                break;
              case 29:
                *(uint16x4_t *)v345.f32 = *v66;
                break;
              case 31:
                v345 = *(float32x4_t *)v66->i8;
                break;
              case 41:
                v365 = (uint32x4_t)vld1q_dup_f32((const float *)v66);
                v346.i16[1] = 14976;
                v345 = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v365, (uint32x4_t)xmmword_1B2268AE0), (int8x16_t)xmmword_1B2268AA0)), (float32x4_t)xmmword_1B2268AF0);
                break;
              case 51:
                v345.i16[0] = v66->i16[0];
                v345.f32[0] = (float)v345.u32[0];
                v366 = 0.000015259;
                goto LABEL_232;
              case 52:
                v345.i16[0] = v66->i16[0];
                v345.f32[0] = (float)vmovl_s16(*(int16x4_t *)v345.f32).i32[0];
                v366 = 0.000030519;
LABEL_232:
                v346.f32[0] = v345.f32[0] * v366;
                goto LABEL_233;
              case 53:
                v371 = sub_1B189E3A8(v66->u16[0]);
                v351 = v748;
                v346.f32[0] = v371;
LABEL_233:
                v345.i32[2] = 0;
                v345.i64[0] = v346.u32[0];
                break;
              default:
                v361 = (uint32x4_t)vld1q_dup_f32((const float *)v66);
                v346.i16[1] = 15104;
                v345 = vmulq_f32(vcvtq_f32_s32(vshlq_s32((int32x4_t)vshlq_u32(v361, (uint32x4_t)xmmword_1B2268AC0), (int32x4_t)xmmword_1B2268AD0)), (float32x4_t)xmmword_1B2268B00);
                break;
            }
            *((_QWORD *)v350 - 1) = v345.i64[0];
            *v350 = v345.i32[2];
            v350 += 3;
            v66 = (uint16x4_t *)((char *)v66 + v68);
            --v349;
          }
          while (v349);
LABEL_270:
          v407 = *(_QWORD *)(a5 + 40);
          v408 = *(_QWORD *)(v407 + 16);
          if (!v408)
          {
            MEMORY[0x1B5E23F88](v348, -1, -1);
            goto LABEL_5;
          }
          v409 = v407 + 32;
          v410 = -v69;
          v411 = vmulq_f32(v351, v351);
          v735 = vnegq_f32(v351);
          v737 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v351, (int32x4_t)v351), (int8x16_t)v351, 0xCuLL);
          v733 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v411, 2), vaddq_f32(v411, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v411.f32, 1))).f32[0];
          v412 = -v733;
          swift_bridgeObjectRetain();
          v747 = 0;
          v745 = 0;
          v413 = 0;
          v77 = 0.0;
          v414 = 1;
          v753 = v409;
          v743 = v408;
          while (2)
          {
            v415 = (_QWORD *)(v409 + (v413 << 7));
            v416 = (void *)v415[4];
            if (*v415 != 3 || v416 == 0)
              goto LABEL_274;
            v418 = v415[5];
            v419 = v415[9];
            v420 = v415[10];
            if (v420 == 4)
            {
              swift_unknownObjectRetain_n();
              swift_bridgeObjectRetain();
              if (objc_msgSend(v416, sel_storageMode) == (id)2)
                goto LABEL_466;
              v421 = (char *)objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
              v422 = v416;
              if (v419 >= 1)
              {
                v426 = 0;
                v427 = &v421[v418];
                v428.i64[0] = 0x3F0000003F000000;
                v428.i64[1] = 0x3F0000003F000000;
                v430 = v731;
                v429 = v732;
                v409 = v753;
                v408 = v743;
                while (1)
                {
                  _VF = __OFADD__(v426, 3);
                  v441 = v426 + 3;
                  v442 = &v427[4 * v426];
                  v443 = v348 + 12 * *(unsigned int *)v442;
                  v425.i64[0] = *(_QWORD *)v443;
                  v444 = v425;
                  v444.i32[2] = *(_DWORD *)(v443 + 8);
                  v425.i32[2] = v444.i32[2];
                  v445 = v348 + 12 * *((unsigned int *)v442 + 1);
                  v424.i64[0] = *(_QWORD *)v445;
                  v446 = v424;
                  v447 = v348 + 12 * *((unsigned int *)v442 + 2);
                  v423.i64[0] = *(_QWORD *)v447;
                  v448 = *(_DWORD *)(v447 + 8);
                  v449 = v423;
                  v449.i32[2] = v448;
                  v426 = _VF ? 0x7FFFFFFFFFFFFFFFLL : v441;
                  v446.i32[2] = *(_DWORD *)(v445 + 8);
                  v450 = vsubq_f32(v446, v425);
                  v425 = vsubq_f32(v449, v425);
                  v451 = vnegq_f32(v450);
                  v452 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v425, (int32x4_t)v425), (int8x16_t)v425, 0xCuLL), v451), v425, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v450, (int32x4_t)v450), (int8x16_t)v450, 0xCuLL));
                  v453 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v452, (int32x4_t)v452), (int8x16_t)v452, 0xCuLL);
                  v454 = vmulq_f32(v452, v452);
                  v454.i64[0] = vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v454.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v454, 2), v454)).u64[0];
                  v455 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v454.f32, 0);
                  v455.i32[3] = 0;
                  v456 = vrsqrteq_f32(v455);
                  v457 = vmulq_f32(v456, vrsqrtsq_f32(v455, vmulq_f32(v456, v456)));
                  v458 = vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vdup_n_s16(v454.f32[0] != 0.0)), 0x1FuLL));
                  v458.i32[3] = 0;
                  v459 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v458), (int8x16_t)vmulq_f32(vmulq_f32(v457, vrsqrtsq_f32(v455, vmulq_f32(v457, v457))), v453), (int8x16_t)v453);
                  v460 = vmulq_f32(v748, v459);
                  v461 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v460, 2), vaddq_f32(v460, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v460.f32, 1))).f32[0];
                  v462 = vmulq_f32(v444, v459);
                  v463 = vmulq_f32(v744, v459);
                  LODWORD(v464) = vsubq_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v463, 2), vaddq_f32(v463, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v463.f32, 1))), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v462, 2), vaddq_f32(v462, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v462.f32, 1)))).u32[0];
                  if (v461 < 0.0 && v464 >= v410)
                  {
                    v424.i32[2] = *(_DWORD *)(v445 + 8);
                    v423.i32[2] = v448;
                    if (v464 <= v69)
                      goto LABEL_302;
                    v466 = (float)-(float)(v464 - v69) / v461;
                    if (v466 <= 1.0)
                      break;
                  }
LABEL_288:
                  if (v426 >= v419)
                  {
                    v731 = v430;
                    v732 = v429;
                    goto LABEL_273;
                  }
                }
                v467 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v425, (int8x16_t)v425, 0xCuLL), (int8x16_t)v425, 8uLL), v451), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v450, (int8x16_t)v450, 0xCuLL), (int8x16_t)v450, 8uLL), v425);
                v468 = vmulq_f32(v467, v467);
                v469 = (int32x2_t)vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v468, 2), vaddq_f32(v468, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v468.f32, 1))).u64[0];
                if (fabsf(*(float *)v469.i32) >= 1.1755e-38)
                {
                  v471 = vmlaq_n_f32(v744, v748, v466);
                  v472 = vsubq_f32(v423, v471);
                  v473 = vsubq_f32(v424, v471);
                  v474 = vsubq_f32(v444, v471);
                  v475 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v473, (int8x16_t)v473, 0xCuLL), (int8x16_t)v473, 8uLL);
                  v476 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v472, (int8x16_t)v472, 0xCuLL), (int8x16_t)v472, 8uLL);
                  v477 = vmlaq_f32(vmulq_f32(v476, vnegq_f32(v473)), v475, v472);
                  v478 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v474, (int8x16_t)v474, 0xCuLL), (int8x16_t)v474, 8uLL);
                  v479 = vmlaq_f32(vmulq_f32(v478, vnegq_f32(v472)), v476, v474);
                  v480 = vmlaq_f32(vmulq_f32(v475, vnegq_f32(v474)), v478, v473);
                  v481 = (int32x4_t)vmulq_f32(v467, v477);
                  v482 = (int32x4_t)vmulq_f32(v467, v479);
                  v483 = (int32x4_t)vmulq_f32(v467, v480);
                  v484 = vdupq_laneq_s32(v482, 2);
                  v485 = (float32x4_t)vzip1q_s32(vzip1q_s32(v481, v483), v482);
                  v486 = (float32x4_t)vtrn2q_s32(v481, v482);
                  v486.i32[2] = v483.i32[1];
                  _Q5 = vdivq_f32(vaddq_f32((float32x4_t)vzip1q_s32(vzip2q_s32(v481, v483), v484), vaddq_f32(v485, v486)), (float32x4_t)vdupq_lane_s32(v469, 0));
                }
                else
                {
                  __asm { FMOV            V5.4S, #-1.0 }
                }
                v487.i64[0] = 0xBF000000BF000000;
                v487.i64[1] = 0xBF000000BF000000;
                v425 = (float32x4_t)vcgeq_f32(v428, vabsq_f32(vaddq_f32(_Q5, v487)));
                v425.i32[3] = v425.i32[2];
                if ((vminvq_u32((uint32x4_t)v425) & 0x80000000) == 0)
                {
LABEL_302:
                  v488 = vmulq_f32(v450, v450);
                  v489 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v488, 2), vaddq_f32(v488, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v488.f32, 1))).f32[0]);
                  v490 = vmulq_n_f32(v450, 1.0 / v489);
                  v491 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v490, (int32x4_t)v490), (int8x16_t)v490, 0xCuLL);
                  v492 = vmlaq_f32(vmulq_f32(v491, v735), v490, v737);
                  v493 = vmulq_f32(v492, v492);
                  v494 = vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v493.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v493, 2), v493)).f32[0];
                  v466 = 2.0;
                  if (v494 != 0.0)
                  {
                    v495 = vmulq_f32(vaddq_f32(v444, v424), v428);
                    v496 = vsubq_f32(v744, v495);
                    v497 = vmlaq_f32(vmulq_f32(v491, vnegq_f32(v496)), v490, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v496, (int32x4_t)v496), (int8x16_t)v496, 0xCuLL));
                    v498 = vmulq_f32(v492, v497);
                    v498.f32[0] = vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v498.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v498, 2), v498)).f32[0];
                    v499 = v498.f32[0] + v498.f32[0];
                    v500 = vmulq_f32(v497, v497);
                    v501 = (float)((float)(v494 * -4.0)
                                 * (float)(vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v500.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v500, 2), v500)).f32[0]+ (float)(v410 * v69)))+ (float)(v499 * v499);
                    if (v501 >= 0.0)
                    {
                      v502 = (float)((float)-v499 - sqrtf(v501)) / (float)(v494 + v494);
                      if (v502 >= 0.0 && v502 <= 1.0)
                      {
                        v504 = vmulq_f32(v490, vsubq_f32(vmlaq_n_f32(v744, v748, v502), v495));
                        if (fabsf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v504, 2), vaddq_f32(v504, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v504.f32, 1))).f32[0]) <= (float)(v489 * 0.5))
                        {
                          if (v502 >= 2.0 || v502 < 0.0)
                            v466 = 2.0;
                          else
                            v466 = v502;
                        }
                      }
                    }
                  }
                  v506 = vsubq_f32(v423, v424);
                  v507 = vmulq_f32(v506, v506);
                  v508 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v507, 2), vaddq_f32(v507, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v507.f32, 1))).f32[0]);
                  v509 = vmulq_n_f32(v506, 1.0 / v508);
                  v510 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v509, (int32x4_t)v509), (int8x16_t)v509, 0xCuLL);
                  v511 = vmlaq_f32(vmulq_f32(v510, v735), v509, v737);
                  v512 = vmulq_f32(v511, v511);
                  v513 = vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v512.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v512, 2), v512)).f32[0];
                  if (v513 != 0.0)
                  {
                    v514 = vmulq_f32(vaddq_f32(v424, v423), v428);
                    v515 = vsubq_f32(v744, v514);
                    v516 = vmlaq_f32(vmulq_f32(v510, vnegq_f32(v515)), v509, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v515, (int32x4_t)v515), (int8x16_t)v515, 0xCuLL));
                    v517 = vmulq_f32(v511, v516);
                    v517.f32[0] = vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v517.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v517, 2), v517)).f32[0];
                    v518 = v517.f32[0] + v517.f32[0];
                    v519 = vmulq_f32(v516, v516);
                    v520 = (float)((float)(v513 * -4.0)
                                 * (float)(vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v519.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v519, 2), v519)).f32[0]+ (float)(v410 * v69)))+ (float)(v518 * v518);
                    if (v520 >= 0.0)
                    {
                      v521 = (float)((float)-v518 - sqrtf(v520)) / (float)(v513 + v513);
                      if (v521 >= 0.0 && v521 <= 1.0)
                      {
                        v523 = vmulq_f32(v509, vsubq_f32(vmlaq_n_f32(v744, v748, v521), v514));
                        if (fabsf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v523, 2), vaddq_f32(v523, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v523.f32, 1))).f32[0]) <= (float)(v508 * 0.5)&& v521 < v466&& v521 >= 0.0)
                        {
                          v466 = v521;
                        }
                      }
                    }
                  }
                  v525 = vsubq_f32(v444, v423);
                  v526 = vmulq_f32(v525, v525);
                  v425 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v526, 2), vaddq_f32(v526, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v526.f32, 1)));
                  v425.f32[0] = sqrtf(v425.f32[0]);
                  v527 = vmulq_n_f32(v525, 1.0 / v425.f32[0]);
                  v528 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v527, (int32x4_t)v527), (int8x16_t)v527, 0xCuLL);
                  v529 = vmlaq_f32(vmulq_f32(v528, v735), v527, v737);
                  v530 = vmulq_f32(v529, v529);
                  v531 = vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v530.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v530, 2), v530)).f32[0];
                  if (v531 != 0.0)
                  {
                    v532 = vmulq_f32(vaddq_f32(v444, v423), v428);
                    v533 = vsubq_f32(v744, v532);
                    v534 = vmlaq_f32(vmulq_f32(v528, vnegq_f32(v533)), v527, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v533, (int32x4_t)v533), (int8x16_t)v533, 0xCuLL));
                    v535 = vmulq_f32(v529, v534);
                    v535.f32[0] = vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v535.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v535, 2), v535)).f32[0];
                    v536 = v535.f32[0] + v535.f32[0];
                    v537 = vmulq_f32(v534, v534);
                    v538 = (float)((float)(v531 * -4.0)
                                 * (float)(vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v537.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v537, 2), v537)).f32[0]+ (float)(v410 * v69)))+ (float)(v536 * v536);
                    if (v538 >= 0.0)
                    {
                      v539 = (float)((float)-v536 - sqrtf(v538)) / (float)(v531 + v531);
                      if (v539 >= 0.0 && v539 <= 1.0)
                      {
                        v541 = vmulq_f32(v527, vsubq_f32(vmlaq_n_f32(v744, v748, v539), v532));
                        if (fabsf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v541, 2), vaddq_f32(v541, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v541.f32, 1))).f32[0]) <= (float)(v425.f32[0] * 0.5)&& v539 < v466&& v539 >= 0.0)
                        {
                          v466 = v539;
                        }
                      }
                    }
                  }
                  if (v466 < 0.0 || v466 > 1.0)
                  {
                    if (v733 < 0.00000011921)
                      goto LABEL_288;
                    v545 = vsubq_f32(v744, v444);
                    v546 = vmulq_f32(v748, v545);
                    LODWORD(v547) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v546, 2), vaddq_f32(v546, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v546.f32, 1))).u32[0];
                    v548 = vmulq_f32(v545, v545);
                    v425 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v548, 2);
                    v549 = vmlas_n_f32((float)(vaddq_f32(v425, vaddq_f32(v548, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v548.f32, 1))).f32[0]+ (float)(v410 * v69))* v412, v547, v547);
                    if (v549 < 0.0
                      || ((v466 = (float)((float)-sqrtf(v549) - v547) / v733, v466 >= 0.0)
                        ? (v550 = v466 > 1.0)
                        : (v550 = 1),
                          v550))
                    {
                      v551 = vsubq_f32(v744, v424);
                      v552 = vmulq_f32(v748, v551);
                      v424 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v552, 2), vaddq_f32(v552, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v552.f32, 1)));
                      v553 = vmulq_f32(v551, v551);
                      v554 = vmlas_n_f32((float)(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v553, 2), vaddq_f32(v553, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v553.f32, 1))).f32[0]+ (float)(v410 * v69))* v412, v424.f32[0], v424.f32[0]);
                      if (v554 < 0.0
                        || ((v466 = (float)((float)-sqrtf(v554) - v424.f32[0]) / v733, v466 >= 0.0)
                          ? (v555 = v466 > 1.0)
                          : (v555 = 1),
                            v555))
                      {
                        v556 = vsubq_f32(v744, v423);
                        v557 = vmulq_f32(v748, v556);
                        v423 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v557, 2), vaddq_f32(v557, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v557.f32, 1)));
                        v558 = vmulq_f32(v556, v556);
                        v424 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v558, 2), vaddq_f32(v558, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v558.f32, 1)));
                        v424.f32[0] = vmlas_n_f32((float)(v424.f32[0] + (float)(v410 * v69)) * v412, v423.f32[0], v423.f32[0]);
                        if (v424.f32[0] < 0.0)
                          goto LABEL_288;
                        v466 = (float)((float)-sqrtf(v424.f32[0]) - v423.f32[0]) / v733;
                        if (v466 < 0.0 || v466 > 1.0)
                          goto LABEL_288;
                      }
                    }
                  }
                }
                if (v466 >= 0.0 && v466 <= 1.0)
                {
                  v424 = vmulq_n_f32(v748, v466);
                  v423 = vaddq_f32(v755, v424);
                  v424.i32[3] = v429.i32[3];
                  v423.i32[3] = v430.i32[3];
                  v544 = INFINITY;
                  if ((v414 & 1) == 0)
                    v544 = v77;
                  if (v466 < v544)
                  {
                    v414 = 0;
                    v745 = v423.i64[1];
                    v747 = *(float32x2_t *)v423.f32;
                    v429 = v424;
                    v430 = v423;
                    v77 = v466;
                  }
                  else
                  {
                    v429 = v424;
                    v430 = v423;
                  }
                }
                goto LABEL_288;
              }
LABEL_272:
              v409 = v753;
              v408 = v743;
              goto LABEL_273;
            }
            if (v420 != 2)
              goto LABEL_466;
            swift_unknownObjectRetain_n();
            swift_bridgeObjectRetain();
            if (objc_msgSend(v416, sel_storageMode) == (id)2)
              goto LABEL_466;
            v431 = (char *)objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
            v432 = v416;
            if (v419 < 1)
              goto LABEL_272;
            v436 = 0;
            v437 = &v431[v418];
            v438.i64[0] = 0x3F0000003F000000;
            v438.i64[1] = 0x3F0000003F000000;
            v440 = v729;
            v439 = v730;
            v409 = v753;
            v408 = v743;
LABEL_374:
            _VF = __OFADD__(v436, 3);
            v560 = v436 + 3;
            v561 = &v437[2 * v436];
            v562 = v348 + 12 * *(unsigned __int16 *)v561;
            v435.i64[0] = *(_QWORD *)v562;
            v563 = v435;
            v563.i32[2] = *(_DWORD *)(v562 + 8);
            v435.i32[2] = v563.i32[2];
            v564 = v348 + 12 * *((unsigned __int16 *)v561 + 1);
            v434.i64[0] = *(_QWORD *)v564;
            v565 = v434;
            v566 = v348 + 12 * *((unsigned __int16 *)v561 + 2);
            v433.i64[0] = *(_QWORD *)v566;
            v567 = *(_DWORD *)(v566 + 8);
            v568 = v433;
            v568.i32[2] = v567;
            if (_VF)
              v436 = 0x7FFFFFFFFFFFFFFFLL;
            else
              v436 = v560;
            v565.i32[2] = *(_DWORD *)(v564 + 8);
            v569 = vsubq_f32(v565, v435);
            v435 = vsubq_f32(v568, v435);
            v570 = vnegq_f32(v569);
            v571 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v435, (int32x4_t)v435), (int8x16_t)v435, 0xCuLL), v570), v435, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v569, (int32x4_t)v569), (int8x16_t)v569, 0xCuLL));
            v572 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v571, (int32x4_t)v571), (int8x16_t)v571, 0xCuLL);
            v573 = vmulq_f32(v571, v571);
            v573.i64[0] = vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v573.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v573, 2), v573)).u64[0];
            v574 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v573.f32, 0);
            v574.i32[3] = 0;
            v575 = vrsqrteq_f32(v574);
            v576 = vmulq_f32(v575, vrsqrtsq_f32(v574, vmulq_f32(v575, v575)));
            v577 = vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vdup_n_s16(v573.f32[0] != 0.0)), 0x1FuLL));
            v577.i32[3] = 0;
            v578 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v577), (int8x16_t)vmulq_f32(vmulq_f32(v576, vrsqrtsq_f32(v574, vmulq_f32(v576, v576))), v572), (int8x16_t)v572);
            v579 = vmulq_f32(v748, v578);
            v580 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v579, 2), vaddq_f32(v579, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v579.f32, 1))).f32[0];
            v581 = vmulq_f32(v563, v578);
            v582 = vmulq_f32(v744, v578);
            LODWORD(v583) = vsubq_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v582, 2), vaddq_f32(v582, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v582.f32, 1))), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v581, 2), vaddq_f32(v581, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v581.f32, 1)))).u32[0];
            if (v580 < 0.0 && v583 >= v410)
            {
              v434.i32[2] = *(_DWORD *)(v564 + 8);
              v433.i32[2] = v567;
              if (v583 <= v69)
                goto LABEL_386;
              v585 = (float)-(float)(v583 - v69) / v580;
              if (v585 <= 1.0)
              {
                v586 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v435, (int8x16_t)v435, 0xCuLL), (int8x16_t)v435, 8uLL), v570), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v569, (int8x16_t)v569, 0xCuLL), (int8x16_t)v569, 8uLL), v435);
                v587 = vmulq_f32(v586, v586);
                v588 = (int32x2_t)vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v587, 2), vaddq_f32(v587, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v587.f32, 1))).u64[0];
                v589 = v741;
                if (fabsf(*(float *)v588.i32) >= 1.1755e-38)
                {
                  v590 = vmlaq_n_f32(v744, v748, v585);
                  v591 = vsubq_f32(v433, v590);
                  v592 = vsubq_f32(v434, v590);
                  v593 = vsubq_f32(v563, v590);
                  v594 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v592, (int8x16_t)v592, 0xCuLL), (int8x16_t)v592, 8uLL);
                  v595 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v591, (int8x16_t)v591, 0xCuLL), (int8x16_t)v591, 8uLL);
                  v596 = vmlaq_f32(vmulq_f32(v595, vnegq_f32(v592)), v594, v591);
                  v597 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v593, (int8x16_t)v593, 0xCuLL), (int8x16_t)v593, 8uLL);
                  v598 = vmlaq_f32(vmulq_f32(v597, vnegq_f32(v591)), v595, v593);
                  v599 = vmlaq_f32(vmulq_f32(v594, vnegq_f32(v593)), v597, v592);
                  v600 = (int32x4_t)vmulq_f32(v586, v596);
                  v601 = (int32x4_t)vmulq_f32(v586, v598);
                  v602 = (int32x4_t)vmulq_f32(v586, v599);
                  v603 = vdupq_laneq_s32(v601, 2);
                  v604 = (float32x4_t)vzip1q_s32(vzip1q_s32(v600, v602), v601);
                  v605 = (float32x4_t)vtrn2q_s32(v600, v601);
                  v605.i32[2] = v602.i32[1];
                  v589 = vdivq_f32(vaddq_f32((float32x4_t)vzip1q_s32(vzip2q_s32(v600, v602), v603), vaddq_f32(v604, v605)), (float32x4_t)vdupq_lane_s32(v588, 0));
                }
                v606.i64[0] = 0xBF000000BF000000;
                v606.i64[1] = 0xBF000000BF000000;
                v435 = (float32x4_t)vcgeq_f32(v438, vabsq_f32(vaddq_f32(v589, v606)));
                v435.i32[3] = v435.i32[2];
                if ((vminvq_u32((uint32x4_t)v435) & 0x80000000) != 0)
                {
LABEL_428:
                  if (v585 >= 0.0 && v585 <= 1.0)
                  {
                    v434 = vmulq_n_f32(v748, v585);
                    v433 = vaddq_f32(v755, v434);
                    v434.i32[3] = v439.i32[3];
                    v433.i32[3] = v440.i32[3];
                    v663 = INFINITY;
                    if ((v414 & 1) == 0)
                      v663 = v77;
                    if (v585 < v663)
                    {
                      v414 = 0;
                      v745 = v433.i64[1];
                      v747 = *(float32x2_t *)v433.f32;
                      v439 = v434;
                      v440 = v433;
                      v77 = v585;
                    }
                    else
                    {
                      v439 = v434;
                      v440 = v433;
                    }
                  }
                }
                else
                {
LABEL_386:
                  v607 = vmulq_f32(v569, v569);
                  v608 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v607, 2), vaddq_f32(v607, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v607.f32, 1))).f32[0]);
                  v609 = vmulq_n_f32(v569, 1.0 / v608);
                  v610 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v609, (int32x4_t)v609), (int8x16_t)v609, 0xCuLL);
                  v611 = vmlaq_f32(vmulq_f32(v610, v735), v609, v737);
                  v612 = vmulq_f32(v611, v611);
                  v613 = vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v612.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v612, 2), v612)).f32[0];
                  v585 = 2.0;
                  if (v613 != 0.0)
                  {
                    v614 = vmulq_f32(vaddq_f32(v563, v434), v438);
                    v615 = vsubq_f32(v744, v614);
                    v616 = vmlaq_f32(vmulq_f32(v610, vnegq_f32(v615)), v609, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v615, (int32x4_t)v615), (int8x16_t)v615, 0xCuLL));
                    v617 = vmulq_f32(v611, v616);
                    v617.f32[0] = vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v617.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v617, 2), v617)).f32[0];
                    v618 = v617.f32[0] + v617.f32[0];
                    v619 = vmulq_f32(v616, v616);
                    v620 = (float)((float)(v613 * -4.0)
                                 * (float)(vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v619.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v619, 2), v619)).f32[0]+ (float)(v410 * v69)))+ (float)(v618 * v618);
                    if (v620 >= 0.0)
                    {
                      v621 = (float)((float)-v618 - sqrtf(v620)) / (float)(v613 + v613);
                      if (v621 >= 0.0 && v621 <= 1.0)
                      {
                        v623 = vmulq_f32(v609, vsubq_f32(vmlaq_n_f32(v744, v748, v621), v614));
                        if (fabsf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v623, 2), vaddq_f32(v623, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v623.f32, 1))).f32[0]) <= (float)(v608 * 0.5))
                        {
                          if (v621 >= 2.0 || v621 < 0.0)
                            v585 = 2.0;
                          else
                            v585 = v621;
                        }
                      }
                    }
                  }
                  v625 = vsubq_f32(v433, v434);
                  v626 = vmulq_f32(v625, v625);
                  v627 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v626, 2), vaddq_f32(v626, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v626.f32, 1))).f32[0]);
                  v628 = vmulq_n_f32(v625, 1.0 / v627);
                  v629 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v628, (int32x4_t)v628), (int8x16_t)v628, 0xCuLL);
                  v630 = vmlaq_f32(vmulq_f32(v629, v735), v628, v737);
                  v631 = vmulq_f32(v630, v630);
                  v632 = vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v631.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v631, 2), v631)).f32[0];
                  if (v632 != 0.0)
                  {
                    v633 = vmulq_f32(vaddq_f32(v434, v433), v438);
                    v634 = vsubq_f32(v744, v633);
                    v635 = vmlaq_f32(vmulq_f32(v629, vnegq_f32(v634)), v628, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v634, (int32x4_t)v634), (int8x16_t)v634, 0xCuLL));
                    v636 = vmulq_f32(v630, v635);
                    v636.f32[0] = vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v636.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v636, 2), v636)).f32[0];
                    v637 = v636.f32[0] + v636.f32[0];
                    v638 = vmulq_f32(v635, v635);
                    v639 = (float)((float)(v632 * -4.0)
                                 * (float)(vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v638.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v638, 2), v638)).f32[0]+ (float)(v410 * v69)))+ (float)(v637 * v637);
                    if (v639 >= 0.0)
                    {
                      v640 = (float)((float)-v637 - sqrtf(v639)) / (float)(v632 + v632);
                      if (v640 >= 0.0 && v640 <= 1.0)
                      {
                        v642 = vmulq_f32(v628, vsubq_f32(vmlaq_n_f32(v744, v748, v640), v633));
                        if (fabsf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v642, 2), vaddq_f32(v642, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v642.f32, 1))).f32[0]) <= (float)(v627 * 0.5)&& v640 < v585&& v640 >= 0.0)
                        {
                          v585 = v640;
                        }
                      }
                    }
                  }
                  v644 = vsubq_f32(v563, v433);
                  v645 = vmulq_f32(v644, v644);
                  v435 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v645, 2), vaddq_f32(v645, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v645.f32, 1)));
                  v435.f32[0] = sqrtf(v435.f32[0]);
                  v646 = vmulq_n_f32(v644, 1.0 / v435.f32[0]);
                  v647 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v646, (int32x4_t)v646), (int8x16_t)v646, 0xCuLL);
                  v648 = vmlaq_f32(vmulq_f32(v647, v735), v646, v737);
                  v649 = vmulq_f32(v648, v648);
                  v650 = vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v649.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v649, 2), v649)).f32[0];
                  if (v650 != 0.0)
                  {
                    v651 = vmulq_f32(vaddq_f32(v563, v433), v438);
                    v652 = vsubq_f32(v744, v651);
                    v653 = vmlaq_f32(vmulq_f32(v647, vnegq_f32(v652)), v646, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v652, (int32x4_t)v652), (int8x16_t)v652, 0xCuLL));
                    v654 = vmulq_f32(v648, v653);
                    v654.f32[0] = vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v654.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v654, 2), v654)).f32[0];
                    v655 = v654.f32[0] + v654.f32[0];
                    v656 = vmulq_f32(v653, v653);
                    v657 = (float)((float)(v650 * -4.0)
                                 * (float)(vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v656.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v656, 2), v656)).f32[0]+ (float)(v410 * v69)))+ (float)(v655 * v655);
                    if (v657 >= 0.0)
                    {
                      v658 = (float)((float)-v655 - sqrtf(v657)) / (float)(v650 + v650);
                      if (v658 >= 0.0 && v658 <= 1.0)
                      {
                        v660 = vmulq_f32(v646, vsubq_f32(vmlaq_n_f32(v744, v748, v658), v651));
                        if (fabsf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v660, 2), vaddq_f32(v660, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v660.f32, 1))).f32[0]) <= (float)(v435.f32[0] * 0.5)&& v658 < v585&& v658 >= 0.0)
                        {
                          v585 = v658;
                        }
                      }
                    }
                  }
                  if (v585 >= 0.0 && v585 <= 1.0)
                    goto LABEL_428;
                  if (v733 >= 0.00000011921)
                  {
                    v664 = vsubq_f32(v744, v563);
                    v665 = vmulq_f32(v748, v664);
                    LODWORD(v666) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v665, 2), vaddq_f32(v665, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v665.f32, 1))).u32[0];
                    v667 = vmulq_f32(v664, v664);
                    v435 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v667, 2);
                    v668 = vmlas_n_f32((float)(vaddq_f32(v435, vaddq_f32(v667, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v667.f32, 1))).f32[0]+ (float)(v410 * v69))* v412, v666, v666);
                    if (v668 >= 0.0)
                    {
                      v585 = (float)((float)-sqrtf(v668) - v666) / v733;
                      if (v585 >= 0.0 && v585 <= 1.0)
                        goto LABEL_428;
                    }
                    v670 = vsubq_f32(v744, v434);
                    v671 = vmulq_f32(v748, v670);
                    v434 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v671, 2), vaddq_f32(v671, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v671.f32, 1)));
                    v672 = vmulq_f32(v670, v670);
                    v673 = vmlas_n_f32((float)(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v672, 2), vaddq_f32(v672, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v672.f32, 1))).f32[0]+ (float)(v410 * v69))* v412, v434.f32[0], v434.f32[0]);
                    if (v673 >= 0.0)
                    {
                      v585 = (float)((float)-sqrtf(v673) - v434.f32[0]) / v733;
                      if (v585 >= 0.0 && v585 <= 1.0)
                        goto LABEL_428;
                    }
                    v675 = vsubq_f32(v744, v433);
                    v676 = vmulq_f32(v748, v675);
                    v433 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v676, 2), vaddq_f32(v676, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v676.f32, 1)));
                    v677 = vmulq_f32(v675, v675);
                    v434 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v677, 2), vaddq_f32(v677, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v677.f32, 1)));
                    v434.f32[0] = vmlas_n_f32((float)(v434.f32[0] + (float)(v410 * v69)) * v412, v433.f32[0], v433.f32[0]);
                    if (v434.f32[0] >= 0.0)
                    {
                      v585 = (float)((float)-sqrtf(v434.f32[0]) - v433.f32[0]) / v733;
                      if (v585 >= 0.0 && v585 <= 1.0)
                        goto LABEL_428;
                    }
                  }
                }
              }
            }
            if (v436 >= v419)
            {
              v729 = v440;
              v730 = v439;
LABEL_273:
              swift_bridgeObjectRelease();
              swift_unknownObjectRelease_n();
LABEL_274:
              if (++v413 != v408)
                continue;
              swift_bridgeObjectRelease();
              MEMORY[0x1B5E23F88](v348, -1, -1);
              if ((v414 & 1) == 0)
              {
                v45 = v722;
                v679 = v704;
                v680 = v705;
                if (v712)
                  goto LABEL_460;
LABEL_462:
                v683 = (uint64_t *)(v700 + 16 * v45);
                v681 = *v683;
                v682 = v683[1];
LABEL_463:
                *(float32x2_t *)v684.f32 = v747;
                v684.i64[1] = v745;
                v685 = vmlaq_n_f32(vmlaq_lane_f32(vmlaq_laneq_f32(a17, a13, v684, 2), a12, v747, 1), a11, v747.f32[0]);
                v685.i32[3] = v679;
                v686 = vrsqrteq_f32(v698);
                v687 = vmulq_f32(v686, vrsqrtsq_f32(v698, vmulq_f32(v686, v686)));
                v688 = (float32x4_t)vbslq_s8(v697, (int8x16_t)vmulq_f32(v699, vmulq_f32(v687, vrsqrtsq_f32(v698, vmulq_f32(v687, v687)))), (int8x16_t)v699);
                v688.i32[3] = v680;
                v749 = v680;
                v754 = v679;
                sub_1B2021194(v45, v723, v724, v681, v682, v712, v685, v688, v77);
                v704 = v754;
                v705 = v749;
                goto LABEL_6;
              }
LABEL_5:
              v45 = v722;
              goto LABEL_6;
            }
            goto LABEL_374;
          }
        }
        v757.i64[0] = 0;
        v757.i64[1] = 0xE000000000000000;
        sub_1B2229430();
        sub_1B2228890();
        v756 = v67;
LABEL_470:
        type metadata accessor for MTLVertexFormat(0);
        sub_1B22295EC();
        goto LABEL_466;
      }
      v70 = *(_QWORD *)(a5 + 40);
      v71 = *(_QWORD *)(v70 + 16);
      if (!v71)
        goto LABEL_5;
      v72 = v70 + 32;
      v73 = -v69;
      v740 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v748, (int32x4_t)v748), (int8x16_t)v748, 0xCuLL);
      v74 = vmulq_f32(v748, v748);
      v734 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v74, 2), vaddq_f32(v74, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v74.f32, 1))).f32[0];
      v736 = vnegq_f32(v748);
      v75 = -v734;
      swift_bridgeObjectRetain();
      v747 = 0;
      v745 = 0;
      v76 = 0;
      v77 = 0.0;
      v78 = 1;
      v742 = v71;
      while (2)
      {
        v79 = (_QWORD *)(v72 + (v76 << 7));
        v80 = (void *)v79[4];
        if (*v79 != 3 || v80 == 0)
          goto LABEL_20;
        v82 = v79[5];
        v83 = v79[9];
        v84 = v79[10];
        if (v84 == 4)
        {
          swift_unknownObjectRetain_n();
          swift_bridgeObjectRetain();
          if (objc_msgSend(v80, sel_storageMode) != (id)2)
          {
            v85 = (char *)objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
            v86 = v80;
            if (v83 < 1)
            {
LABEL_18:
              v71 = v742;
              goto LABEL_19;
            }
            v90 = 0;
            v91 = &v85[v82];
            v92.i64[0] = 0x3F0000003F000000;
            v92.i64[1] = 0x3F0000003F000000;
            v94 = v727;
            v93 = v728;
            v71 = v742;
            while (1)
            {
              _VF = __OFADD__(v90, 3);
              v105 = v90 + 3;
              v106 = &v91[4 * v90];
              v107 = (char *)v66 + v68 * *(unsigned int *)v106;
              v89.i64[0] = *(_QWORD *)v107;
              v108 = v89;
              v108.i32[2] = *((_DWORD *)v107 + 2);
              v89.i32[2] = v108.i32[2];
              v109 = (char *)v66 + v68 * *((unsigned int *)v106 + 1);
              v88.i64[0] = *(_QWORD *)v109;
              v110 = v88;
              v111 = (char *)v66 + v68 * *((unsigned int *)v106 + 2);
              v87.i64[0] = *(_QWORD *)v111;
              v112 = *((_DWORD *)v111 + 2);
              v113 = v87;
              v113.i32[2] = v112;
              v90 = _VF ? 0x7FFFFFFFFFFFFFFFLL : v105;
              v110.i32[2] = *((_DWORD *)v109 + 2);
              v114 = vsubq_f32(v110, v89);
              v89 = vsubq_f32(v113, v89);
              v115 = vnegq_f32(v114);
              v116 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v89, (int32x4_t)v89), (int8x16_t)v89, 0xCuLL), v115), v89, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v114, (int32x4_t)v114), (int8x16_t)v114, 0xCuLL));
              v117 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v116, (int32x4_t)v116), (int8x16_t)v116, 0xCuLL);
              v118 = vmulq_f32(v116, v116);
              v118.i64[0] = vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v118.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v118, 2), v118)).u64[0];
              v119 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v118.f32, 0);
              v119.i32[3] = 0;
              v120 = vrsqrteq_f32(v119);
              v121 = vmulq_f32(v120, vrsqrtsq_f32(v119, vmulq_f32(v120, v120)));
              v122 = vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vdup_n_s16(v118.f32[0] != 0.0)), 0x1FuLL));
              v122.i32[3] = 0;
              v123 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v122), (int8x16_t)vmulq_f32(vmulq_f32(v121, vrsqrtsq_f32(v119, vmulq_f32(v121, v121))), v117), (int8x16_t)v117);
              v124 = vmulq_f32(v748, v123);
              v125 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v124, 2), vaddq_f32(v124, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v124.f32, 1))).f32[0];
              v126 = vmulq_f32(v108, v123);
              v127 = vmulq_f32(v744, v123);
              LODWORD(v128) = vsubq_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v127, 2), vaddq_f32(v127, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v127.f32, 1))), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v126, 2), vaddq_f32(v126, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v126.f32, 1)))).u32[0];
              if (v125 < 0.0 && v128 >= v73)
              {
                v88.i32[2] = *((_DWORD *)v109 + 2);
                v87.i32[2] = v112;
                if (v128 <= v69)
                  goto LABEL_48;
                v130 = (float)-(float)(v128 - v69) / v125;
                if (v130 <= 1.0)
                  break;
              }
LABEL_34:
              if (v90 >= v83)
              {
                v727 = v94;
                v728 = v93;
                goto LABEL_19;
              }
            }
            v131 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v89, (int8x16_t)v89, 0xCuLL), (int8x16_t)v89, 8uLL), v115), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v114, (int8x16_t)v114, 0xCuLL), (int8x16_t)v114, 8uLL), v89);
            v132 = vmulq_f32(v131, v131);
            v133 = (int32x2_t)vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v132, 2), vaddq_f32(v132, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v132.f32, 1))).u64[0];
            if (fabsf(*(float *)v133.i32) >= 1.1755e-38)
            {
              v135 = vmlaq_n_f32(v744, v748, v130);
              v136 = vsubq_f32(v87, v135);
              v137 = vsubq_f32(v88, v135);
              v138 = vsubq_f32(v108, v135);
              v139 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v137, (int8x16_t)v137, 0xCuLL), (int8x16_t)v137, 8uLL);
              v140 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v136, (int8x16_t)v136, 0xCuLL), (int8x16_t)v136, 8uLL);
              v141 = vmlaq_f32(vmulq_f32(v140, vnegq_f32(v137)), v139, v136);
              v142 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v138, (int8x16_t)v138, 0xCuLL), (int8x16_t)v138, 8uLL);
              v143 = vmlaq_f32(vmulq_f32(v142, vnegq_f32(v136)), v140, v138);
              v144 = vmlaq_f32(vmulq_f32(v139, vnegq_f32(v138)), v142, v137);
              v145 = (int32x4_t)vmulq_f32(v131, v141);
              v146 = (int32x4_t)vmulq_f32(v131, v143);
              v147 = (int32x4_t)vmulq_f32(v131, v144);
              v148 = vdupq_laneq_s32(v146, 2);
              v149 = (float32x4_t)vzip1q_s32(vzip1q_s32(v145, v147), v146);
              v150 = (float32x4_t)vtrn2q_s32(v145, v146);
              v150.i32[2] = v147.i32[1];
              _Q5 = vdivq_f32(vaddq_f32((float32x4_t)vzip1q_s32(vzip2q_s32(v145, v147), v148), vaddq_f32(v149, v150)), (float32x4_t)vdupq_lane_s32(v133, 0));
            }
            else
            {
              __asm { FMOV            V5.4S, #-1.0 }
            }
            v151.i64[0] = 0xBF000000BF000000;
            v151.i64[1] = 0xBF000000BF000000;
            v89 = (float32x4_t)vcgeq_f32(v92, vabsq_f32(vaddq_f32(_Q5, v151)));
            v89.i32[3] = v89.i32[2];
            if ((vminvq_u32((uint32x4_t)v89) & 0x80000000) == 0)
            {
LABEL_48:
              v152 = vmulq_f32(v114, v114);
              v153 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v152, 2), vaddq_f32(v152, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v152.f32, 1))).f32[0]);
              v154 = vmulq_n_f32(v114, 1.0 / v153);
              v155 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v154, (int32x4_t)v154), (int8x16_t)v154, 0xCuLL);
              v156 = vmlaq_f32(vmulq_f32(v155, v736), v154, v740);
              v157 = vmulq_f32(v156, v156);
              v158 = vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v157.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v157, 2), v157)).f32[0];
              v130 = 2.0;
              if (v158 != 0.0)
              {
                v159 = vmulq_f32(vaddq_f32(v108, v88), v92);
                v160 = vsubq_f32(v744, v159);
                v161 = vmlaq_f32(vmulq_f32(v155, vnegq_f32(v160)), v154, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v160, (int32x4_t)v160), (int8x16_t)v160, 0xCuLL));
                v162 = vmulq_f32(v156, v161);
                v162.f32[0] = vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v162.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v162, 2), v162)).f32[0];
                v163 = v162.f32[0] + v162.f32[0];
                v164 = vmulq_f32(v161, v161);
                v165 = (float)((float)(v158 * -4.0)
                             * (float)(vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v164.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v164, 2), v164)).f32[0]+ (float)(v73 * v69)))+ (float)(v163 * v163);
                if (v165 >= 0.0)
                {
                  v166 = (float)((float)-v163 - sqrtf(v165)) / (float)(v158 + v158);
                  if (v166 >= 0.0 && v166 <= 1.0)
                  {
                    v168 = vmulq_f32(v154, vsubq_f32(vmlaq_n_f32(v744, v748, v166), v159));
                    if (fabsf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v168, 2), vaddq_f32(v168, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v168.f32, 1))).f32[0]) <= (float)(v153 * 0.5))
                    {
                      if (v166 >= 2.0 || v166 < 0.0)
                        v130 = 2.0;
                      else
                        v130 = v166;
                    }
                  }
                }
              }
              v170 = vsubq_f32(v87, v88);
              v171 = vmulq_f32(v170, v170);
              v172 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v171, 2), vaddq_f32(v171, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v171.f32, 1))).f32[0]);
              v173 = vmulq_n_f32(v170, 1.0 / v172);
              v174 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v173, (int32x4_t)v173), (int8x16_t)v173, 0xCuLL);
              v175 = vmlaq_f32(vmulq_f32(v174, v736), v173, v740);
              v176 = vmulq_f32(v175, v175);
              v177 = vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v176.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v176, 2), v176)).f32[0];
              if (v177 != 0.0)
              {
                v178 = vmulq_f32(vaddq_f32(v88, v87), v92);
                v179 = vsubq_f32(v744, v178);
                v180 = vmlaq_f32(vmulq_f32(v174, vnegq_f32(v179)), v173, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v179, (int32x4_t)v179), (int8x16_t)v179, 0xCuLL));
                v181 = vmulq_f32(v175, v180);
                v181.f32[0] = vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v181.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v181, 2), v181)).f32[0];
                v182 = v181.f32[0] + v181.f32[0];
                v183 = vmulq_f32(v180, v180);
                v184 = (float)((float)(v177 * -4.0)
                             * (float)(vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v183.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v183, 2), v183)).f32[0]+ (float)(v73 * v69)))+ (float)(v182 * v182);
                if (v184 >= 0.0)
                {
                  v185 = (float)((float)-v182 - sqrtf(v184)) / (float)(v177 + v177);
                  if (v185 >= 0.0 && v185 <= 1.0)
                  {
                    v187 = vmulq_f32(v173, vsubq_f32(vmlaq_n_f32(v744, v748, v185), v178));
                    if (fabsf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v187, 2), vaddq_f32(v187, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v187.f32, 1))).f32[0]) <= (float)(v172 * 0.5)&& v185 < v130&& v185 >= 0.0)
                    {
                      v130 = v185;
                    }
                  }
                }
              }
              v189 = vsubq_f32(v108, v87);
              v190 = vmulq_f32(v189, v189);
              v89 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v190, 2), vaddq_f32(v190, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v190.f32, 1)));
              v89.f32[0] = sqrtf(v89.f32[0]);
              v191 = vmulq_n_f32(v189, 1.0 / v89.f32[0]);
              v192 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v191, (int32x4_t)v191), (int8x16_t)v191, 0xCuLL);
              v193 = vmlaq_f32(vmulq_f32(v192, v736), v191, v740);
              v194 = vmulq_f32(v193, v193);
              v195 = vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v194.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v194, 2), v194)).f32[0];
              if (v195 != 0.0)
              {
                v196 = vmulq_f32(vaddq_f32(v108, v87), v92);
                v197 = vsubq_f32(v744, v196);
                v198 = vmlaq_f32(vmulq_f32(v192, vnegq_f32(v197)), v191, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v197, (int32x4_t)v197), (int8x16_t)v197, 0xCuLL));
                v199 = vmulq_f32(v193, v198);
                v199.f32[0] = vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v199.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v199, 2), v199)).f32[0];
                v200 = v199.f32[0] + v199.f32[0];
                v201 = vmulq_f32(v198, v198);
                v202 = (float)((float)(v195 * -4.0)
                             * (float)(vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v201.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v201, 2), v201)).f32[0]+ (float)(v73 * v69)))+ (float)(v200 * v200);
                if (v202 >= 0.0)
                {
                  v203 = (float)((float)-v200 - sqrtf(v202)) / (float)(v195 + v195);
                  if (v203 >= 0.0 && v203 <= 1.0)
                  {
                    v205 = vmulq_f32(v191, vsubq_f32(vmlaq_n_f32(v744, v748, v203), v196));
                    if (fabsf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v205, 2), vaddq_f32(v205, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v205.f32, 1))).f32[0]) <= (float)(v89.f32[0] * 0.5)&& v203 < v130&& v203 >= 0.0)
                    {
                      v130 = v203;
                    }
                  }
                }
              }
              if (v130 < 0.0 || v130 > 1.0)
              {
                if (v734 < 0.00000011921)
                  goto LABEL_34;
                v209 = vsubq_f32(v744, v108);
                v210 = vmulq_f32(v748, v209);
                LODWORD(v211) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v210, 2), vaddq_f32(v210, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v210.f32, 1))).u32[0];
                v212 = vmulq_f32(v209, v209);
                v89 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v212, 2);
                v213 = vmlas_n_f32((float)(vaddq_f32(v89, vaddq_f32(v212, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v212.f32, 1))).f32[0]+ (float)(v73 * v69))* v75, v211, v211);
                if (v213 < 0.0
                  || ((v130 = (float)((float)-sqrtf(v213) - v211) / v734, v130 >= 0.0)
                    ? (v214 = v130 > 1.0)
                    : (v214 = 1),
                      v214))
                {
                  v215 = vsubq_f32(v744, v88);
                  v216 = vmulq_f32(v748, v215);
                  v88 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v216, 2), vaddq_f32(v216, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v216.f32, 1)));
                  v217 = vmulq_f32(v215, v215);
                  v218 = vmlas_n_f32((float)(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v217, 2), vaddq_f32(v217, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v217.f32, 1))).f32[0]+ (float)(v73 * v69))* v75, v88.f32[0], v88.f32[0]);
                  if (v218 < 0.0
                    || ((v130 = (float)((float)-sqrtf(v218) - v88.f32[0]) / v734, v130 >= 0.0)
                      ? (v219 = v130 > 1.0)
                      : (v219 = 1),
                        v219))
                  {
                    v220 = vsubq_f32(v744, v87);
                    v221 = vmulq_f32(v748, v220);
                    v87 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v221, 2), vaddq_f32(v221, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v221.f32, 1)));
                    v222 = vmulq_f32(v220, v220);
                    v88 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v222, 2), vaddq_f32(v222, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v222.f32, 1)));
                    v88.f32[0] = vmlas_n_f32((float)(v88.f32[0] + (float)(v73 * v69)) * v75, v87.f32[0], v87.f32[0]);
                    if (v88.f32[0] < 0.0)
                      goto LABEL_34;
                    v130 = (float)((float)-sqrtf(v88.f32[0]) - v87.f32[0]) / v734;
                    if (v130 < 0.0 || v130 > 1.0)
                      goto LABEL_34;
                  }
                }
              }
            }
            if (v130 >= 0.0 && v130 <= 1.0)
            {
              v88 = vmulq_n_f32(v748, v130);
              v87 = vaddq_f32(v755, v88);
              v88.i32[3] = v93.i32[3];
              v87.i32[3] = v94.i32[3];
              v208 = INFINITY;
              if ((v78 & 1) == 0)
                v208 = v77;
              if (v130 < v208)
              {
                v78 = 0;
                v745 = v87.i64[1];
                v747 = *(float32x2_t *)v87.f32;
                v93 = v88;
                v94 = v87;
                v77 = v130;
              }
              else
              {
                v93 = v88;
                v94 = v87;
              }
            }
            goto LABEL_34;
          }
          while (1)
          {
LABEL_466:
            sub_1B2229688();
            __break(1u);
          }
        }
        if (v84 != 2)
          goto LABEL_466;
        swift_unknownObjectRetain_n();
        swift_bridgeObjectRetain();
        if (objc_msgSend(v80, sel_storageMode) == (id)2)
          goto LABEL_466;
        v95 = (char *)objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
        v96 = v80;
        if (v83 < 1)
          goto LABEL_18;
        v100 = 0;
        v101 = &v95[v82];
        v102.i64[0] = 0x3F0000003F000000;
        v102.i64[1] = 0x3F0000003F000000;
        v104 = v725;
        v103 = v726;
        v71 = v742;
        do
        {
          _VF = __OFADD__(v100, 3);
          v224 = v100 + 3;
          v225 = &v101[2 * v100];
          v226 = (char *)v66 + v68 * *(unsigned __int16 *)v225;
          v99.i64[0] = *(_QWORD *)v226;
          v227 = v99;
          v227.i32[2] = *((_DWORD *)v226 + 2);
          v99.i32[2] = v227.i32[2];
          v228 = (char *)v66 + v68 * *((unsigned __int16 *)v225 + 1);
          v98.i64[0] = *(_QWORD *)v228;
          v229 = v98;
          v230 = (char *)v66 + v68 * *((unsigned __int16 *)v225 + 2);
          v97.i64[0] = *(_QWORD *)v230;
          v231 = *((_DWORD *)v230 + 2);
          v232 = v97;
          v232.i32[2] = v231;
          if (_VF)
            v100 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v100 = v224;
          v229.i32[2] = *((_DWORD *)v228 + 2);
          v233 = vsubq_f32(v229, v99);
          v99 = vsubq_f32(v232, v99);
          v234 = vnegq_f32(v233);
          v235 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v99, (int32x4_t)v99), (int8x16_t)v99, 0xCuLL), v234), v99, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v233, (int32x4_t)v233), (int8x16_t)v233, 0xCuLL));
          v236 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v235, (int32x4_t)v235), (int8x16_t)v235, 0xCuLL);
          v237 = vmulq_f32(v235, v235);
          v237.i64[0] = vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v237.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v237, 2), v237)).u64[0];
          v238 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v237.f32, 0);
          v238.i32[3] = 0;
          v239 = vrsqrteq_f32(v238);
          v240 = vmulq_f32(v239, vrsqrtsq_f32(v238, vmulq_f32(v239, v239)));
          v241 = vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vdup_n_s16(v237.f32[0] != 0.0)), 0x1FuLL));
          v241.i32[3] = 0;
          v242 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v241), (int8x16_t)vmulq_f32(vmulq_f32(v240, vrsqrtsq_f32(v238, vmulq_f32(v240, v240))), v236), (int8x16_t)v236);
          v243 = vmulq_f32(v748, v242);
          v244 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v243, 2), vaddq_f32(v243, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v243.f32, 1))).f32[0];
          v245 = vmulq_f32(v227, v242);
          v246 = vmulq_f32(v744, v242);
          LODWORD(v247) = vsubq_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v246, 2), vaddq_f32(v246, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v246.f32, 1))), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v245, 2), vaddq_f32(v245, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v245.f32, 1)))).u32[0];
          if (v244 < 0.0 && v247 >= v73)
          {
            v98.i32[2] = *((_DWORD *)v228 + 2);
            v97.i32[2] = v231;
            if (v247 > v69)
            {
              v249 = (float)-(float)(v247 - v69) / v244;
              if (v249 > 1.0)
                continue;
              v250 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v99, (int8x16_t)v99, 0xCuLL), (int8x16_t)v99, 8uLL), v234), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v233, (int8x16_t)v233, 0xCuLL), (int8x16_t)v233, 8uLL), v99);
              v251 = vmulq_f32(v250, v250);
              v252 = (int32x2_t)vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v251, 2), vaddq_f32(v251, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v251.f32, 1))).u64[0];
              if (fabsf(*(float *)v252.i32) >= 1.1755e-38)
              {
                v254 = vmlaq_n_f32(v744, v748, v249);
                v255 = vsubq_f32(v97, v254);
                v256 = vsubq_f32(v98, v254);
                v257 = vsubq_f32(v227, v254);
                v258 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v256, (int8x16_t)v256, 0xCuLL), (int8x16_t)v256, 8uLL);
                v259 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v255, (int8x16_t)v255, 0xCuLL), (int8x16_t)v255, 8uLL);
                v260 = vmlaq_f32(vmulq_f32(v259, vnegq_f32(v256)), v258, v255);
                v261 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v257, (int8x16_t)v257, 0xCuLL), (int8x16_t)v257, 8uLL);
                v262 = vmlaq_f32(vmulq_f32(v261, vnegq_f32(v255)), v259, v257);
                v263 = vmlaq_f32(vmulq_f32(v258, vnegq_f32(v257)), v261, v256);
                v264 = (int32x4_t)vmulq_f32(v250, v260);
                v265 = (int32x4_t)vmulq_f32(v250, v262);
                v266 = (int32x4_t)vmulq_f32(v250, v263);
                v267 = vdupq_laneq_s32(v265, 2);
                v268 = (float32x4_t)vzip1q_s32(vzip1q_s32(v264, v266), v265);
                v269 = (float32x4_t)vtrn2q_s32(v264, v265);
                v269.i32[2] = v266.i32[1];
                _Q5 = vdivq_f32(vaddq_f32((float32x4_t)vzip1q_s32(vzip2q_s32(v264, v266), v267), vaddq_f32(v268, v269)), (float32x4_t)vdupq_lane_s32(v252, 0));
              }
              else
              {
                __asm { FMOV            V5.4S, #-1.0 }
              }
              v270.i64[0] = 0xBF000000BF000000;
              v270.i64[1] = 0xBF000000BF000000;
              v99 = (float32x4_t)vcgeq_f32(v102, vabsq_f32(vaddq_f32(_Q5, v270)));
              v99.i32[3] = v99.i32[2];
              if ((vminvq_u32((uint32x4_t)v99) & 0x80000000) != 0)
                goto LABEL_175;
            }
            v271 = vmulq_f32(v233, v233);
            v272 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v271, 2), vaddq_f32(v271, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v271.f32, 1))).f32[0]);
            v273 = vmulq_n_f32(v233, 1.0 / v272);
            v274 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v273, (int32x4_t)v273), (int8x16_t)v273, 0xCuLL);
            v275 = vmlaq_f32(vmulq_f32(v274, v736), v273, v740);
            v276 = vmulq_f32(v275, v275);
            v277 = vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v276.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v276, 2), v276)).f32[0];
            v249 = 2.0;
            if (v277 != 0.0)
            {
              v278 = vmulq_f32(vaddq_f32(v227, v98), v102);
              v279 = vsubq_f32(v744, v278);
              v280 = vmlaq_f32(vmulq_f32(v274, vnegq_f32(v279)), v273, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v279, (int32x4_t)v279), (int8x16_t)v279, 0xCuLL));
              v281 = vmulq_f32(v275, v280);
              v281.f32[0] = vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v281.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v281, 2), v281)).f32[0];
              v282 = v281.f32[0] + v281.f32[0];
              v283 = vmulq_f32(v280, v280);
              v284 = (float)((float)(v277 * -4.0)
                           * (float)(vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v283.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v283, 2), v283)).f32[0]+ (float)(v73 * v69)))+ (float)(v282 * v282);
              if (v284 >= 0.0)
              {
                v285 = (float)((float)-v282 - sqrtf(v284)) / (float)(v277 + v277);
                if (v285 >= 0.0 && v285 <= 1.0)
                {
                  v287 = vmulq_f32(v273, vsubq_f32(vmlaq_n_f32(v744, v748, v285), v278));
                  if (fabsf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v287, 2), vaddq_f32(v287, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v287.f32, 1))).f32[0]) <= (float)(v272 * 0.5))
                  {
                    if (v285 >= 2.0 || v285 < 0.0)
                      v249 = 2.0;
                    else
                      v249 = v285;
                  }
                }
              }
            }
            v289 = vsubq_f32(v97, v98);
            v290 = vmulq_f32(v289, v289);
            v291 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v290, 2), vaddq_f32(v290, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v290.f32, 1))).f32[0]);
            v292 = vmulq_n_f32(v289, 1.0 / v291);
            v293 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v292, (int32x4_t)v292), (int8x16_t)v292, 0xCuLL);
            v294 = vmlaq_f32(vmulq_f32(v293, v736), v292, v740);
            v295 = vmulq_f32(v294, v294);
            v296 = vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v295.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v295, 2), v295)).f32[0];
            if (v296 != 0.0)
            {
              v297 = vmulq_f32(vaddq_f32(v98, v97), v102);
              v298 = vsubq_f32(v744, v297);
              v299 = vmlaq_f32(vmulq_f32(v293, vnegq_f32(v298)), v292, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v298, (int32x4_t)v298), (int8x16_t)v298, 0xCuLL));
              v300 = vmulq_f32(v294, v299);
              v300.f32[0] = vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v300.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v300, 2), v300)).f32[0];
              v301 = v300.f32[0] + v300.f32[0];
              v302 = vmulq_f32(v299, v299);
              v303 = (float)((float)(v296 * -4.0)
                           * (float)(vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v302.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v302, 2), v302)).f32[0]+ (float)(v73 * v69)))+ (float)(v301 * v301);
              if (v303 >= 0.0)
              {
                v304 = (float)((float)-v301 - sqrtf(v303)) / (float)(v296 + v296);
                if (v304 >= 0.0 && v304 <= 1.0)
                {
                  v306 = vmulq_f32(v292, vsubq_f32(vmlaq_n_f32(v744, v748, v304), v297));
                  if (fabsf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v306, 2), vaddq_f32(v306, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v306.f32, 1))).f32[0]) <= (float)(v291 * 0.5)&& v304 < v249&& v304 >= 0.0)
                  {
                    v249 = v304;
                  }
                }
              }
            }
            v308 = vsubq_f32(v227, v97);
            v309 = vmulq_f32(v308, v308);
            v99 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v309, 2), vaddq_f32(v309, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v309.f32, 1)));
            v99.f32[0] = sqrtf(v99.f32[0]);
            v310 = vmulq_n_f32(v308, 1.0 / v99.f32[0]);
            v311 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v310, (int32x4_t)v310), (int8x16_t)v310, 0xCuLL);
            v312 = vmlaq_f32(vmulq_f32(v311, v736), v310, v740);
            v313 = vmulq_f32(v312, v312);
            v314 = vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v313.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v313, 2), v313)).f32[0];
            if (v314 != 0.0)
            {
              v315 = vmulq_f32(vaddq_f32(v227, v97), v102);
              v316 = vsubq_f32(v744, v315);
              v317 = vmlaq_f32(vmulq_f32(v311, vnegq_f32(v316)), v310, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v316, (int32x4_t)v316), (int8x16_t)v316, 0xCuLL));
              v318 = vmulq_f32(v312, v317);
              v318.f32[0] = vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v318.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v318, 2), v318)).f32[0];
              v319 = v318.f32[0] + v318.f32[0];
              v320 = vmulq_f32(v317, v317);
              v321 = (float)((float)(v314 * -4.0)
                           * (float)(vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v320.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v320, 2), v320)).f32[0]+ (float)(v73 * v69)))+ (float)(v319 * v319);
              if (v321 >= 0.0)
              {
                v322 = (float)((float)-v319 - sqrtf(v321)) / (float)(v314 + v314);
                if (v322 >= 0.0 && v322 <= 1.0)
                {
                  v324 = vmulq_f32(v310, vsubq_f32(vmlaq_n_f32(v744, v748, v322), v315));
                  if (fabsf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v324, 2), vaddq_f32(v324, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v324.f32, 1))).f32[0]) <= (float)(v99.f32[0] * 0.5)&& v322 < v249&& v322 >= 0.0)
                  {
                    v249 = v322;
                  }
                }
              }
            }
            if (v249 >= 0.0 && v249 <= 1.0)
              goto LABEL_175;
            if (v734 >= 0.00000011921)
            {
              v328 = vsubq_f32(v744, v227);
              v329 = vmulq_f32(v748, v328);
              LODWORD(v330) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v329, 2), vaddq_f32(v329, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v329.f32, 1))).u32[0];
              v331 = vmulq_f32(v328, v328);
              v99 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v331, 2);
              v332 = vmlas_n_f32((float)(vaddq_f32(v99, vaddq_f32(v331, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v331.f32, 1))).f32[0]+ (float)(v73 * v69))* v75, v330, v330);
              if (v332 >= 0.0)
              {
                v249 = (float)((float)-sqrtf(v332) - v330) / v734;
                if (v249 >= 0.0 && v249 <= 1.0)
                  goto LABEL_175;
              }
              v334 = vsubq_f32(v744, v98);
              v335 = vmulq_f32(v748, v334);
              v98 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v335, 2), vaddq_f32(v335, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v335.f32, 1)));
              v336 = vmulq_f32(v334, v334);
              v337 = vmlas_n_f32((float)(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v336, 2), vaddq_f32(v336, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v336.f32, 1))).f32[0]+ (float)(v73 * v69))* v75, v98.f32[0], v98.f32[0]);
              if (v337 >= 0.0)
              {
                v249 = (float)((float)-sqrtf(v337) - v98.f32[0]) / v734;
                if (v249 >= 0.0 && v249 <= 1.0)
                  goto LABEL_175;
              }
              v339 = vsubq_f32(v744, v97);
              v340 = vmulq_f32(v748, v339);
              v97 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v340, 2), vaddq_f32(v340, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v340.f32, 1)));
              v341 = vmulq_f32(v339, v339);
              v98 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v341, 2), vaddq_f32(v341, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v341.f32, 1)));
              v98.f32[0] = vmlas_n_f32((float)(v98.f32[0] + (float)(v73 * v69)) * v75, v97.f32[0], v97.f32[0]);
              if (v98.f32[0] >= 0.0)
              {
                v249 = (float)((float)-sqrtf(v98.f32[0]) - v97.f32[0]) / v734;
                if (v249 >= 0.0 && v249 <= 1.0)
                {
LABEL_175:
                  if (v249 >= 0.0 && v249 <= 1.0)
                  {
                    v98 = vmulq_n_f32(v748, v249);
                    v97 = vaddq_f32(v755, v98);
                    v98.i32[3] = v103.i32[3];
                    v97.i32[3] = v104.i32[3];
                    v327 = INFINITY;
                    if ((v78 & 1) == 0)
                      v327 = v77;
                    if (v249 < v327)
                    {
                      v78 = 0;
                      v745 = v97.i64[1];
                      v747 = *(float32x2_t *)v97.f32;
                      v103 = v98;
                      v104 = v97;
                      v77 = v249;
                    }
                    else
                    {
                      v103 = v98;
                      v104 = v97;
                    }
                  }
                }
              }
            }
          }
        }
        while (v100 < v83);
        v725 = v104;
        v726 = v103;
LABEL_19:
        swift_bridgeObjectRelease();
        swift_unknownObjectRelease_n();
LABEL_20:
        if (++v76 != v71)
          continue;
        break;
      }
      swift_bridgeObjectRelease();
      v45 = v722;
      if ((v78 & 1) == 0)
      {
        v679 = v704;
        v680 = v705;
        if (!v712)
          goto LABEL_462;
LABEL_460:
        v681 = 0;
        v682 = 0;
        goto LABEL_463;
      }
LABEL_6:
      v41 = v45 + 1;
      if (v41 == v713)
        goto LABEL_2;
    }
    v55 = v41;
    v56 = sub_1B1E218F4(0);
    if (!v56)
      goto LABEL_466;
    v59 = (uint16x4_t *)v56;
    v60 = v57;
    v61 = v58;
    if (v57 == 30)
    {
      sub_1B1E21BE8(v56, v58, 1, a5, &v757, v755, v738);
    }
    else
    {
      v372 = swift_slowAlloc();
      v376 = v372;
      v377 = *(_QWORD *)(a5 + 48);
      if (v377)
      {
        if ((unint64_t)(v60 - 9) >= 0x2D || ((0x1C01805FFC09uLL >> (v60 - 9)) & 1) == 0)
        {
          v757.i64[0] = 0;
          v757.i64[1] = 0xE000000000000000;
          sub_1B2229430();
          sub_1B2228890();
          v756 = v60;
          goto LABEL_470;
        }
        v378 = (_DWORD *)(v372 + 8);
        do
        {
          switch(v60)
          {
            case 9:
              *(double *)v373.i64 = sub_1B1AE4138(v59->i32[0]);
              break;
            case 12:
              *(uint32x2_t *)v385.i8 = vshl_u32((uint32x2_t)vdup_n_s32(v59->i32[0]), (uint32x2_t)0x1000000018);
              v385.i32[2] = v59->i32[0] << 8;
              v385.i32[3] = v59->i32[0];
              __asm { FMOV            V1.4S, #-1.0 }
              v387 = vmaxnmq_f32(vmulq_f32(vcvtq_f32_s32(vshrq_n_s32(v385, 0x18uLL)), (float32x4_t)vdupq_n_s32(0x3C010204u)), _Q1);
              __asm { FMOV            V1.4S, #1.0 }
              v373 = vminnmq_f32(v387, _Q1);
              break;
            case 19:
              v373.i16[0] = v59->i16[0];
              v391.f32[0] = (float)v373.u32[0];
              _Q1.i16[0] = v59->i16[1];
              v391.f32[1] = (float)_Q1.u32[0];
              *(int32x2_t *)_Q1.f32 = vdup_n_s32(0x37800080u);
              *(float32x2_t *)v373.f32 = vmul_f32(v391, *(float32x2_t *)_Q1.f32);
              break;
            case 20:
              v373.i16[0] = v59->i16[0];
              _Q1.i16[0] = v59->i16[1];
              _Q1.f32[0] = (float)_Q1.u32[0];
              v375.i16[0] = v59->i16[2];
              v389.i32[3] = 0;
              v389.f32[0] = (float)v373.u32[0];
              v389.i32[1] = _Q1.i32[0];
              v389.f32[2] = (float)v375.u32[0];
              v373 = vmulq_f32(v389, (float32x4_t)vdupq_n_s32(0x37800080u));
              break;
            case 21:
              v383 = vcvtq_f32_u32(vmovl_u16(*v59));
              v384 = 931135616;
              goto LABEL_256;
            case 22:
              v388.i32[0] = v59->i16[0];
              v388.i32[1] = v59->i16[1];
              *(int32x2_t *)_Q1.f32 = vdup_n_s32(0x38000100u);
              *(float32x2_t *)v373.f32 = vmul_f32(vadd_f32((float32x2_t)vadd_s32(v388, vdup_n_s32(0x4B400000u)), (float32x2_t)vdup_n_s32(0xCB400000)), *(float32x2_t *)_Q1.f32);
              break;
            case 23:
              v392.i32[0] = v59->i32[0];
              v392.i32[1] = v59->u16[2];
              v393 = (float32x4_t)vaddw_s16(vdupq_n_s32(0x4B400000u), v392);
              goto LABEL_255;
            case 24:
              v393 = (float32x4_t)vaddw_s16(vdupq_n_s32(0x4B400000u), (int16x4_t)*v59);
LABEL_255:
              v383 = vaddq_f32(v393, (float32x4_t)vdupq_n_s32(0xCB400000));
              v384 = 939524352;
LABEL_256:
              _Q1 = (float32x4_t)vdupq_n_s32(v384);
              v373 = vmulq_f32(v383, _Q1);
              break;
            case 25:
              v752 = sub_1B189E3A8(v59->u16[0]);
              _Q1.i32[0] = sub_1B189E3A8(v59->u16[1]);
              v373.i32[2] = 0;
              v375.i16[1] = HIWORD(v752);
              v373.i64[0] = __PAIR64__(_Q1.u32[0], LODWORD(v752));
              break;
            case 26:
              v396.i32[0] = v59->u16[0];
              v396.i32[1] = v59->u16[1];
              v396.i64[1] = v59->u16[2];
              v397.i64[0] = 0x8000000080000000;
              v397.i64[1] = 0x8000000080000000;
              v398 = vandq_s8((int8x16_t)vshlq_n_s32(v396, 0x10uLL), v397);
              v399 = (int8x16_t)vshlq_n_s32(v396, 0xDuLL);
              _Q1 = (float32x4_t)vorrq_s8(v398, vandq_s8(v399, (int8x16_t)vdupq_n_s32(0x7FE000u)));
              v375.i64[0] = 0x3800000038000000;
              v375.i64[1] = 0x3800000038000000;
              v373 = (float32x4_t)vorrq_s8((int8x16_t)_Q1, (int8x16_t)vaddq_s32((int32x4_t)vandq_s8(v399, (int8x16_t)vdupq_n_s32(0xF800000u)), (int32x4_t)v375));
              break;
            case 27:
              v379.i64[0] = 0x8000000080000000;
              v379.i64[1] = 0x8000000080000000;
              v380 = (int8x16_t)vshll_n_u16(*v59, 0xDuLL);
              v381 = vorrq_s8(vandq_s8((int8x16_t)vmovl_s16((int16x4_t)*v59), v379), vandq_s8(v380, (int8x16_t)vdupq_n_s32(0x7FE000u)));
              v375 = (int8x16_t)vdupq_n_s32(0xF800000u);
              v382 = (int32x4_t)vorrq_s8(vandq_s8(v380, v375), v381);
              _Q1.i64[0] = 0x3800000038000000;
              _Q1.i64[1] = 0x3800000038000000;
              v373 = (float32x4_t)vaddq_s32(v382, (int32x4_t)_Q1);
              break;
            case 28:
              v373.i32[0] = v59->i32[0];
              break;
            case 29:
              *(uint16x4_t *)v373.f32 = *v59;
              break;
            case 31:
              v373 = *(float32x4_t *)v59->i8;
              break;
            case 41:
              v394 = (uint32x4_t)vld1q_dup_f32((const float *)v59);
              _Q1.i16[1] = 14976;
              v373 = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v394, (uint32x4_t)xmmword_1B2268AE0), (int8x16_t)xmmword_1B2268AA0)), (float32x4_t)xmmword_1B2268AF0);
              break;
            case 51:
              v373.i16[0] = v59->i16[0];
              v373.f32[0] = (float)v373.u32[0];
              v395 = 0.000015259;
              goto LABEL_263;
            case 52:
              v373.i16[0] = v59->i16[0];
              v373.f32[0] = (float)vmovl_s16(*(int16x4_t *)v373.f32).i32[0];
              v395 = 0.000030519;
LABEL_263:
              _Q1.f32[0] = v373.f32[0] * v395;
              goto LABEL_264;
            case 53:
              _Q1.i32[0] = sub_1B189E3A8(v59->u16[0]);
LABEL_264:
              v373.i32[2] = 0;
              v373.i64[0] = _Q1.u32[0];
              break;
            default:
              v390 = (uint32x4_t)vld1q_dup_f32((const float *)v59);
              _Q1.i16[1] = 15104;
              v373 = vmulq_f32(vcvtq_f32_s32(vshlq_s32((int32x4_t)vshlq_u32(v390, (uint32x4_t)xmmword_1B2268AC0), (int32x4_t)xmmword_1B2268AD0)), (float32x4_t)xmmword_1B2268B00);
              break;
          }
          *((_QWORD *)v378 - 1) = v373.i64[0];
          *v378 = v373.i32[2];
          v378 += 3;
          v59 = (uint16x4_t *)((char *)v59 + v61);
          --v377;
        }
        while (v377);
      }
      sub_1B1E21BE8(v376, 12, 1, a5, &v757, v755, v738);
      MEMORY[0x1B5E23F88](v376, -1, -1);
    }
    v45 = v55;
    if ((v760 & 1) == 0)
    {
      v400 = vmlaq_n_f32(vmlaq_lane_f32(vmulq_laneq_f32(a20, v759, 2), a19, *(float32x2_t *)v759.f32, 1), a18, v759.f32[0]);
      v401 = vmulq_f32(v400, v400);
      v402 = (int32x2_t)vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v401, 2), vaddq_f32(v401, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v401.f32, 1))).u64[0];
      v403 = *(float *)v402.i32 != 0.0;
      if (v712)
      {
        v405 = 0;
        v406 = 0;
      }
      else
      {
        v404 = (uint64_t *)(v700 + 16 * v55);
        v405 = *v404;
        v406 = v404[1];
      }
      v689 = vmlaq_n_f32(vmlaq_lane_f32(vmlaq_laneq_f32(a17, a13, v758, 2), a12, *(float32x2_t *)v758.f32, 1), a11, v758.f32[0]);
      v689.i32[3] = v701;
      v690 = (float32x4_t)vdupq_lane_s32(v402, 0);
      v690.i32[3] = 0;
      v691 = vrsqrteq_f32(v690);
      v692 = vmulq_f32(v691, vrsqrtsq_f32(v690, vmulq_f32(v691, v691)));
      v693 = (int8x16_t)vmulq_f32(v400, vmulq_f32(v692, vrsqrtsq_f32(v690, vmulq_f32(v692, v692))));
      v694 = vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vdup_n_s16(v403)), 0x1FuLL));
      v694.i32[3] = 0;
      v695 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v694), v693, (int8x16_t)v400);
      v695.i32[3] = v702;
      sub_1B2021194(v55, v723, v724, v405, v406, v712, v689, v695, v757.f32[0]);
    }
    goto LABEL_6;
  }
LABEL_2:
  sub_1B1C38184((uint64_t)v761, a4 | ((HIDWORD(a4) & 1) << 32));
  return sub_1B1C390B0((uint64_t)v761);
}

uint64_t sub_1B1EE37EC(uint64_t result, float32x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v5;
  uint64_t v6;
  float32x2_t *v12;
  float v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float v32;
  float32x4_t v33;
  float v34;
  int v36;
  BOOL v37;
  uint64_t v38;
  int32x4_t v39;
  int32x4_t v40;
  int32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  int32x4_t v44;
  float32x4_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  os_unfair_lock_s *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t i;
  uint64_t v66;
  unint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  void (*v70)(uint64_t);
  uint64_t v71;
  BOOL v72;
  unint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  _QWORD *v76;
  unint64_t v77;
  uint64_t v78;
  unsigned int v79;
  BOOL v80;
  int v81;
  uint64_t v83;
  _QWORD *v84;
  unint64_t v85;
  uint64_t v86;
  unsigned int v87;
  int v88;
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  float32x4_t v99;
  float32x4_t v100;
  float32x4_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  BOOL v105;
  float32x4_t v106;
  float32x4_t v107;
  float32x4_t v108;
  float32x4_t v109;
  float32x4_t v110;
  float32x4_t v111;
  float32x4_t v112;
  float32x4_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  int v122;
  float32x4_t v123;
  unsigned __int16 *v124;
  float32x4_t v125;
  uint64_t v126;
  float32x4_t v127;
  _QWORD *v128;
  uint64_t v129[12];
  _QWORD v130[7];
  uint64_t v131;
  uint64_t v132;
  _QWORD *v133;
  uint64_t v134;
  __int128 v135;
  _QWORD *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  char v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  float32x4_t v148;
  float v149;
  int v150;
  _OWORD v151[2];
  uint64_t v152;
  uint64_t v153;
  simd_float4x4 v154;
  simd_float4x4 v155;

  v5 = *(_DWORD *)(result + 28);
  v6 = *(int *)(result + 24);
  if (((_DWORD)v6 != -1 || v5 != 0)
    && (v6 & 0x80000000) == 0
    && *(_QWORD *)(a4 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8) > v6)
  {
    v12 = (float32x2_t *)result;
    v13 = *(float *)(a3 + 160);
    v14 = *(_QWORD *)(a4 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
    if (v5 == -1 || *(_DWORD *)(v14 + 12 * (int)v6 + 8) == v5)
    {
      result = sub_1B1D1F7AC(*(_QWORD *)(*(_QWORD *)(a4 + 136) + 8 * *(int *)(v14 + 12 * (int)v6) + 32), *(_DWORD *)(v14 + 12 * (int)v6), *(_WORD *)(v14 + 12 * (int)v6 + 4), 16, a4);
      if (v15)
      {
        v16 = result;
        result = swift_bridgeObjectRelease();
        if (v16)
        {
          v17 = *(_DWORD *)(a3 + 84) & v12[2].i32[1];
          if (!v17)
            return swift_release();
          v114 = v16;
          v18 = *(float *)(a3 + 80);
          v19 = v12[2].f32[0] + v18;
          v20 = fminf(fmaxf(v12[1].f32[1] + *(float *)(a3 + 76), 0.0), 1.0);
          v21 = fminf(fmaxf(v12[1].f32[0] + *(float *)(a3 + 72), 0.0), 1.0);
          __asm { FMOV            V4.2S, #1.0 }
          *(float32x2_t *)v148.f32 = vminnm_f32(vmaxnm_f32(vadd_f32(*v12, *(float32x2_t *)(a3 + 64)), 0), _D4);
          v148.f32[2] = v21;
          v148.f32[3] = 1.0 - v20;
          v149 = v19;
          v150 = v17;
          v26 = *(float32x4_t *)(a3 + 96);
          v27 = *(float32x4_t *)(a3 + 112);
          v28 = *(float32x4_t *)(a3 + 128);
          v29 = *(float32x4_t *)(a3 + 144);
          v123 = *(float32x4_t *)a2->f32;
          v125 = *(float32x4_t *)a2[2].f32;
          v154.columns[0] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v26, COERCE_FLOAT(*(_OWORD *)a2->f32)), v27, *a2, 1), v28, *(float32x4_t *)a2->f32, 2), v29, *(float32x4_t *)a2->f32, 3);
          v154.columns[1] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v26, v125.f32[0]), v27, *(float32x2_t *)v125.f32, 1), v28, v125, 2), v29, v125, 3);
          v127 = *(float32x4_t *)a2[4].f32;
          v154.columns[2] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v26, v127.f32[0]), v27, a2[4], 1), v28, v127, 2), v29, v127, 3);
          v154.columns[3] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v26, COERCE_FLOAT(*(_OWORD *)a2[6].f32)), v27, a2[6], 1), v28, *(float32x4_t *)a2[6].f32, 2), v29, *(float32x4_t *)a2[6].f32, 3);
          v112 = (float32x4_t)v154.columns[1];
          v113 = (float32x4_t)v154.columns[0];
          v110 = (float32x4_t)v154.columns[3];
          v111 = (float32x4_t)v154.columns[2];
          v155 = __invert_f4(v154);
          v108 = (float32x4_t)v155.columns[1];
          v109 = (float32x4_t)v155.columns[0];
          v106 = (float32x4_t)v155.columns[3];
          v107 = (float32x4_t)v155.columns[2];
          if ((LODWORD(v18) & 0x7FFFFFFF) != 0)
          {
            v30 = vmulq_f32(v123, v123);
            v31 = vmulq_f32(v125, v125);
            v32 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v31, 2), vaddq_f32(v31, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v31.f32, 1))).f32[0]);
            v33 = vmulq_f32(v127, v127);
            v34 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v33, 2), vaddq_f32(v33, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v33.f32, 1))).f32[0]);
            if (sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v30, 2), vaddq_f32(v30, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v30.f32, 1))).f32[0]) != v32|| v32 != v34)
            {
              if (qword_1ED4BF430 != -1)
                swift_once();
              swift_retain();
              v36 = sub_1B2228E90();
              if (qword_1ED4BF658 != -1)
                swift_once();
              *(_QWORD *)&v135 = 0;
              swift_retain();
              sub_1B1F1AD70(v36, (uint64_t *)&v135, 0xD00000000000004ALL, 0x80000001B2342B20);
              swift_release();
              swift_release();
            }
          }
          v37 = (a5 & 0xFE00000000) != 0;
          if (!(_DWORD)a5)
            v37 = 1;
          v105 = v37;
          v151[0] = *(_OWORD *)(a3 + 24);
          v151[1] = *(_OWORD *)(a3 + 40);
          v152 = *(_QWORD *)(a3 + 56);
          sub_1B1E8FCE4(a4, (uint64_t)v151, 0x200000000, v129);
          sub_1B19F66A0((uint64_t)v129, (uint64_t)v130, (unint64_t *)&qword_1ED4B7DE0);
          v124 = (unsigned __int16 *)v130[0];
          if (v130[0])
          {
            v104 = v134;
            if (v134 > 0)
            {
              v103 = v131;
              if (v131)
              {
                v38 = 0;
                v39 = (int32x4_t)vmulq_f32(v113, v113);
                v40 = (int32x4_t)vmulq_f32(v112, v112);
                v41 = (int32x4_t)vmulq_f32(v111, v111);
                v42 = (float32x4_t)vtrn2q_s32(v39, v40);
                v42.i32[2] = v41.i32[1];
                v43 = vaddq_f32((float32x4_t)vzip1q_s32(vzip2q_s32(v39, v41), vdupq_laneq_s32(v40, 2)), vaddq_f32((float32x4_t)vzip1q_s32(vzip1q_s32(v39, v41), v40), v42));
                v44 = vceqzq_f32(v43);
                __asm { FMOV            V2.4S, #1.0 }
                v44.i32[3] = 0;
                v46 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v44), (int8x16_t)v43, (int8x16_t)vdivq_f32(_Q2, v43));
                v100 = vmulq_lane_f32(v112, *(float32x2_t *)v46.f32, 1);
                v101 = vmulq_n_f32(v113, v46.f32[0]);
                v99 = vmulq_laneq_f32(v111, v46, 2);
                v98 = v130[5];
                v47 = v133;
                v48 = v133[4];
                v122 = *(unsigned __int8 *)(v132 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
                v96 = v133 + 8;
                v97 = v132;
                if ((a5 & 0xFE00000000) != 0)
                  v49 = 0;
                else
                  v49 = a5;
                v95 = v49;
                v153 = v130[0] + 41;
                v102 = a3;
                v128 = v133;
                v94 = v48;
                while (1)
                {
                  v118 = v38;
                  v50 = (unsigned int *)(v98 + 48 * v38);
                  v51 = *v50;
                  v52 = v50[1];
                  v53 = v50[2];
                  v54 = *((_QWORD *)v50 + 2);
                  v55 = *((_QWORD *)v50 + 3);
                  v56 = *((_QWORD *)v50 + 4);
                  v57 = *((_QWORD *)v50 + 5);
                  if (v122)
                  {
                    v58 = *(os_unfair_lock_s **)(v57 + 376);
                    swift_retain_n();
                    os_unfair_lock_lock(v58);
                    os_unfair_lock_lock(*(os_unfair_lock_t *)(v57 + 344));
                    swift_release();
                  }
                  else
                  {
                    swift_retain();
                  }
                  ecs_stack_allocator_push_snapshot(v48);
                  v115 = v47[7];
                  v116 = v47[6];
                  v120 = v47[9];
                  v121 = v47[8];
                  v119 = v47[10];
                  v59 = v47[4];
                  v60 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v57 + 40) + 16) + 32) + 16) + 1;
                  swift_retain();
                  v128[6] = ecs_stack_allocator_allocate(v59, 48 * v60, 8);
                  v128[7] = v60;
                  v47 = v128;
                  v96[1] = 0;
                  v96[2] = 0;
                  *v96 = 0;
                  swift_release();
                  *(_QWORD *)&v135 = v97;
                  *((_QWORD *)&v135 + 1) = v57;
                  v117 = v57;
                  v136 = v128;
                  v137 = v53;
                  v138 = (v52 - v51 + v53);
                  v139 = v104;
                  v140 = v51;
                  v141 = v52;
                  v142 = 0;
                  v143 = 0;
                  v144 = 1;
                  v145 = v54;
                  v146 = v55;
                  v147 = v56;
                  sub_1B1EE0804(&v135, &v148, v102, v95 | ((unint64_t)v105 << 32), v114, v13, v109, v108, v107, v106, v113, v112, v111, v61, v62, v63, v110, v101, v100,
                    v99);
                  v64 = v128[6];
                  v126 = v128[8];
                  if (!v126)
                  {
                    v91 = v128[7];
                    v92 = (_QWORD *)v128[4];
                    goto LABEL_72;
                  }
                  for (i = 0; i != v126; ++i)
                  {
                    v67 = v64;
                    v68 = (uint64_t *)(v64 + 48 * i);
                    v69 = *v68;
                    v70 = (void (*)(uint64_t))v68[4];
                    v71 = v47[9];
                    if (v71)
                      v72 = v69 == v71;
                    else
                      v72 = 0;
                    if (v72 || !v124[11])
                      goto LABEL_37;
                    v73 = v124[9];
                    v74 = (_QWORD *)(v153 + v124[8]);
                    v75 = v68[2];
                    v76 = v74;
                    v77 = v73 >> 4;
                    v78 = v153;
                    if (v73 >= 0x10)
                    {
                      while (*v76 != v69)
                      {
                        ++v78;
                        v76 += 2;
                        if (!--v77)
                          goto LABEL_52;
                      }
                      v79 = *(unsigned __int8 *)(v78 + v124[10]);
                      v80 = v79 > 5;
                      v81 = (1 << v79) & 0x23;
                      if (v80 || v81 == 0)
                      {
LABEL_37:
                        v66 = swift_retain();
                        v70(v66);
                        swift_release();
                        goto LABEL_38;
                      }
                    }
LABEL_52:
                    if (swift_conformsToProtocol2())
                      v83 = v75;
                    else
                      v83 = 0;
                    if (v83)
                    {
                      if (v73 < 0x10)
                        goto LABEL_37;
                      v84 = v74;
                      v85 = v73 >> 4;
                      v86 = v153;
                      while (*v84 != v83)
                      {
                        ++v86;
                        v84 += 2;
                        if (!--v85)
                          goto LABEL_65;
                      }
                      v87 = *(unsigned __int8 *)(v86 + v124[10]);
                      v80 = v87 > 5;
                      v88 = (1 << v87) & 0x23;
                      if (v80 || v88 == 0)
                        goto LABEL_37;
LABEL_65:
                      v90 = 16 * (v73 >> 4);
                      while (*v74 != v83)
                      {
                        v74 += 2;
                        v90 -= 16;
                        if (!v90)
                          goto LABEL_37;
                      }
                    }
LABEL_38:
                    v47 = v128;
                    v64 = v67;
                  }
                  v91 = v128[7];
                  v64 = v128[6];
                  v92 = (_QWORD *)v128[4];
                  if ((uint64_t)v128[8] >= 1)
                  {
                    v93 = v128[6];
                    swift_arrayDestroy();
                    v64 = v93;
                  }
LABEL_72:
                  v48 = v94;
                  ecs_stack_allocator_deallocate(v92, v64, 48 * v91);
                  v47[6] = v116;
                  v47[7] = v115;
                  v47[8] = v121;
                  v47[9] = v120;
                  v47[10] = v119;
                  sub_1B1F03804((char *)v117);
                  ecs_stack_allocator_pop_snapshot(v94);
                  if ((v122 & 1) != 0)
                  {
                    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v117 + 344));
                    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v117 + 376));
                  }
                  swift_release();
                  v38 = v118 + 1;
                  if (v118 + 1 == v103)
                  {
                    sub_1B19ED748(v129);
                    return swift_release();
                  }
                }
              }
            }
            sub_1B19ED748(v129);
          }
          return swift_release();
        }
      }
    }
  }
  return result;
}

uint64_t sub_1B1EE4040@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t result;
  uint64_t v12;
  int v13;
  int v14;
  _BYTE v15[16];
  __int128 v16;
  int v17;
  unint64_t v18;
  int v19;
  uint64_t v20;

  sub_1B1D4F120(0, (unint64_t *)&unk_1EEF61C30, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED048]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = &v15[-v9];
  v16 = xmmword_1B228FB70;
  v17 = 0;
  v18 = 0xFFFFFFFF000000FFLL;
  v19 = 0;
  sub_1B1C37430(a1, 0);
  if (v2)
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  v15[15] = 12;
  sub_1B1A08878();
  sub_1B2229814();
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  result = (*(uint64_t (**)(_BYTE *, uint64_t))(v7 + 8))(v10, v6);
  v12 = v20;
  v13 = v17;
  v14 = v18;
  *(_OWORD *)a2 = v16;
  *(_DWORD *)(a2 + 16) = v13;
  *(_DWORD *)(a2 + 20) = v14;
  *(_QWORD *)(a2 + 24) = v12;
  return result;
}

ValueMetadata *type metadata accessor for ParticleMeshCollider()
{
  return &type metadata for ParticleMeshCollider;
}

BOOL sub_1B1EE41B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t (*v6)(uint64_t, uint64_t);
  uint64_t v7;

  v6 = *(uint64_t (**)(uint64_t, uint64_t))(a4 + 24);
  v7 = v6(a3, a4);
  return v7 == v6(a3, a4);
}

uint64_t sub_1B1EE4214()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if ((v0[1] ^ (unint64_t)*v0) < 0x4000)
    return 0;
  sub_1B2229190();
  swift_bridgeObjectRetain();
  v1 = sub_1B22291C0();
  swift_bridgeObjectRelease();
  sub_1B22291A8();
  swift_bridgeObjectRetain();
  sub_1B2229178();
  swift_bridgeObjectRelease();
  v2 = sub_1B22291C0();
  v4 = v3;
  v6 = v5;
  v8 = v7;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *v0 = v2;
  v0[1] = v4;
  v0[2] = v6;
  v0[3] = v8;
  return v1;
}

uint64_t sub_1B1EE4374@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  __int128 v7;
  unsigned __int8 *v8;
  __int128 v9;

  v3 = v1[2];
  if (v3 == v1[3] >> 1)
  {
    v4 = 0;
    v5 = 0;
    result = 0;
    v7 = 0uLL;
  }
  else
  {
    v8 = (unsigned __int8 *)(v1[1] + 40 * v3);
    v4 = *v8;
    v9 = *(_OWORD *)(v8 + 8);
    v5 = *((_QWORD *)v8 + 3);
    v1[2] = v3 + 1;
    result = swift_bridgeObjectRetain();
    v7 = v9;
  }
  *(_QWORD *)a1 = v4;
  *(_OWORD *)(a1 + 8) = v7;
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = result;
  return result;
}

uint64_t sub_1B1EE43F8()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int v10;
  int v11;

  swift_bridgeObjectRetain();
  v0 = sub_1B2228974();
  v2 = v1;
  swift_bridgeObjectRelease();
  if (v2 >> 14 != v0 >> 14)
  {
    swift_bridgeObjectRetain();
    v3 = 0;
    while (1)
    {
      v5 = sub_1B22291A8();
      v7 = v6;
      v8 = sub_1B2229178();
      if (!((v7 & 0x2000000000000000) != 0 ? HIBYTE(v7) & 0xF : v5 & 0xFFFFFFFFFFFFLL))
        break;
      if ((v7 & 0x1000000000000000) != 0)
      {
        v10 = sub_1B2229424();
      }
      else
      {
        if ((v7 & 0x2000000000000000) == 0 && (v5 & 0x1000000000000000) == 0)
          sub_1B22294FC();
        v10 = sub_1B2229508();
      }
      v11 = v10;
      swift_bridgeObjectRelease();
      if ((v11 - 14) < 0xFFFFFFFC && (v11 - 8232) >= 2)
      {
        v4 = 1;
        if (v11 == 133)
          goto LABEL_5;
        goto LABEL_15;
      }
      v4 = 1;
LABEL_5:
      v3 += v4;
      if (v2 >> 14 == v8 >> 14)
      {
        swift_bridgeObjectRelease_n();
        goto LABEL_24;
      }
    }
    swift_bridgeObjectRelease();
LABEL_15:
    v4 = 0;
    goto LABEL_5;
  }
  swift_bridgeObjectRelease();
LABEL_24:
  sub_1B2229430();
  swift_bridgeObjectRelease();
  sub_1B2229A0C();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  sub_1B2228890();
  return 0x3A7475706E69;
}

uint64_t sub_1B1EE465C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t);
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  sub_1B1EF1D38();
  MEMORY[0x1E0C80A78](v0, v1);
  v27 = (char *)&v26 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1B1A02758(0, &qword_1ED4B7B98, MEMORY[0x1E0DEBAF0], MEMORY[0x1E0DF1F50]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v6);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v26 - v11;
  swift_bridgeObjectRetain();
  v13 = sub_1B2228974();
  v15 = v14;
  v17 = v16;
  v19 = v18;
  swift_bridgeObjectRelease();
  v28 = v13;
  v29 = v15;
  v30 = v17;
  v31 = v19;
  sub_1B19F8E54(0, &qword_1EEF60A10, (uint64_t (*)(void))sub_1B1EF1DEC, MEMORY[0x1E0DEBAF0], MEMORY[0x1E0DECCE0]);
  sub_1B1EF1E30();
  sub_1B222895C();
  sub_1B22282E4();
  sub_1B222832C();
  v20 = *(void (**)(char *, uint64_t))(v5 + 8);
  v21 = v8;
  v22 = (uint64_t)v27;
  v20(v21, v4);
  v23 = v32;
  sub_1B2228308();
  v20(v12, v4);
  swift_bridgeObjectRelease();
  if (!v23)
  {
    sub_1B1A02758(0, &qword_1ED4B7B78, MEMORY[0x1E0DEBAF0], MEMORY[0x1E0DF1F30]);
    LOBYTE(v20) = (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 48))(v22, 1, v24) != 1;
    sub_1B1EF1DA4(v22);
  }
  return v20 & 1;
}

void sub_1B1EE48B8(uint64_t *a1@<X0>, char a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  BOOL v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  char v41[8];
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46[8];
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v6 = *a1;
  v7 = a1[1];
  sub_1B2229190();
  v8 = sub_1B22291A8();
  v10 = v8 == 36 && v9 == 0xE100000000000000;
  if (v10 || (v11 = v8, v12 = v9, (sub_1B2229D24() & 1) != 0))
  {
    swift_bridgeObjectRelease();
    v13 = sub_1B1EE4214();
    v17 = 5;
LABEL_7:
    *a3 = v17;
    a3[1] = v13;
    a3[2] = v14;
    a3[3] = v15;
    a3[4] = v16;
    return;
  }
  v18 = v11 == 46 && v12 == 0xE100000000000000;
  if (v18 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v13 = sub_1B1EE4214();
    v17 = 2;
    goto LABEL_7;
  }
  if (v11 == 58 && v12 == 0xE100000000000000 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v13 = sub_1B1EE4214();
    v17 = 3;
    goto LABEL_7;
  }
  if (v11 == 59 && v12 == 0xE100000000000000 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v13 = sub_1B1EE4214();
    v17 = 4;
    goto LABEL_7;
  }
  if (v11 == 64 && v12 == 0xE100000000000000 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v13 = sub_1B1EE4214();
    v17 = 6;
    goto LABEL_7;
  }
  if (v11 == 61 && v12 == 0xE100000000000000 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v13 = sub_1B1EE4214();
    v17 = 7;
    goto LABEL_7;
  }
  if (v11 == 40 && v12 == 0xE100000000000000 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v13 = sub_1B1EE4214();
    v17 = 8;
    goto LABEL_7;
  }
  if (v11 == 41 && v12 == 0xE100000000000000 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v13 = sub_1B1EE4214();
    v17 = 9;
    goto LABEL_7;
  }
  if (v11 == 91 && v12 == 0xE100000000000000 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v13 = sub_1B1EE4214();
    v17 = 10;
    goto LABEL_7;
  }
  if (v11 == 93 && v12 == 0xE100000000000000 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v13 = sub_1B1EE4214();
    v17 = 11;
    goto LABEL_7;
  }
  if (v11 == 60 && v12 == 0xE100000000000000 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v13 = sub_1B1EE4214();
    v17 = 12;
    goto LABEL_7;
  }
  if (v11 == 62 && v12 == 0xE100000000000000 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v13 = sub_1B1EE4214();
    v17 = 13;
    goto LABEL_7;
  }
  if (v11 == 44 && v12 == 0xE100000000000000 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v13 = sub_1B1EE4214();
    v17 = 0;
    goto LABEL_7;
  }
  if ((v11 != 35 || v12 != 0xE100000000000000) && (sub_1B2229D24() & 1) == 0)
  {
    if (v11 == 65 && v12 == 0xE100000000000000
      || (sub_1B2229D24() & 1) != 0
      || v11 == 66 && v12 == 0xE100000000000000
      || (sub_1B2229D24() & 1) != 0
      || v11 == 67 && v12 == 0xE100000000000000
      || (sub_1B2229D24() & 1) != 0
      || v11 == 68 && v12 == 0xE100000000000000
      || (sub_1B2229D24() & 1) != 0
      || v11 == 69 && v12 == 0xE100000000000000
      || (sub_1B2229D24() & 1) != 0
      || v11 == 70 && v12 == 0xE100000000000000
      || (sub_1B2229D24() & 1) != 0
      || v11 == 71 && v12 == 0xE100000000000000
      || (sub_1B2229D24() & 1) != 0
      || v11 == 72 && v12 == 0xE100000000000000
      || (sub_1B2229D24() & 1) != 0
      || v11 == 73 && v12 == 0xE100000000000000
      || (sub_1B2229D24() & 1) != 0
      || v11 == 74 && v12 == 0xE100000000000000
      || (sub_1B2229D24() & 1) != 0
      || v11 == 75 && v12 == 0xE100000000000000
      || (sub_1B2229D24() & 1) != 0
      || v11 == 76 && v12 == 0xE100000000000000
      || (sub_1B2229D24() & 1) != 0
      || v11 == 77 && v12 == 0xE100000000000000
      || (sub_1B2229D24() & 1) != 0
      || v11 == 78 && v12 == 0xE100000000000000
      || (sub_1B2229D24() & 1) != 0
      || v11 == 79 && v12 == 0xE100000000000000
      || (sub_1B2229D24() & 1) != 0
      || v11 == 80 && v12 == 0xE100000000000000
      || (sub_1B2229D24() & 1) != 0
      || v11 == 81 && v12 == 0xE100000000000000
      || (sub_1B2229D24() & 1) != 0
      || v11 == 82 && v12 == 0xE100000000000000
      || (sub_1B2229D24() & 1) != 0
      || v11 == 83 && v12 == 0xE100000000000000
      || (sub_1B2229D24() & 1) != 0
      || v11 == 84 && v12 == 0xE100000000000000
      || (sub_1B2229D24() & 1) != 0
      || v11 == 85 && v12 == 0xE100000000000000
      || (sub_1B2229D24() & 1) != 0
      || v11 == 86 && v12 == 0xE100000000000000
      || (sub_1B2229D24() & 1) != 0
      || v11 == 87 && v12 == 0xE100000000000000
      || (sub_1B2229D24() & 1) != 0
      || v11 == 88 && v12 == 0xE100000000000000
      || (sub_1B2229D24() & 1) != 0
      || v11 == 89 && v12 == 0xE100000000000000
      || (sub_1B2229D24() & 1) != 0
      || v11 == 90 && v12 == 0xE100000000000000
      || (sub_1B2229D24() & 1) != 0
      || v11 == 97 && v12 == 0xE100000000000000
      || (sub_1B2229D24() & 1) != 0
      || v11 == 98 && v12 == 0xE100000000000000
      || (sub_1B2229D24() & 1) != 0
      || v11 == 99 && v12 == 0xE100000000000000
      || (sub_1B2229D24() & 1) != 0
      || v11 == 100 && v12 == 0xE100000000000000
      || (sub_1B2229D24() & 1) != 0
      || v11 == 101 && v12 == 0xE100000000000000
      || (sub_1B2229D24() & 1) != 0
      || v11 == 102 && v12 == 0xE100000000000000
      || (sub_1B2229D24() & 1) != 0
      || v11 == 103 && v12 == 0xE100000000000000
      || (sub_1B2229D24() & 1) != 0
      || v11 == 104 && v12 == 0xE100000000000000
      || (sub_1B2229D24() & 1) != 0
      || v11 == 105 && v12 == 0xE100000000000000
      || (sub_1B2229D24() & 1) != 0
      || v11 == 106 && v12 == 0xE100000000000000
      || (sub_1B2229D24() & 1) != 0
      || v11 == 107 && v12 == 0xE100000000000000
      || (sub_1B2229D24() & 1) != 0
      || v11 == 108 && v12 == 0xE100000000000000
      || (sub_1B2229D24() & 1) != 0
      || v11 == 109 && v12 == 0xE100000000000000
      || (sub_1B2229D24() & 1) != 0
      || v11 == 110 && v12 == 0xE100000000000000
      || (sub_1B2229D24() & 1) != 0
      || v11 == 111 && v12 == 0xE100000000000000
      || (sub_1B2229D24() & 1) != 0
      || v11 == 112 && v12 == 0xE100000000000000
      || (sub_1B2229D24() & 1) != 0
      || v11 == 113 && v12 == 0xE100000000000000
      || (sub_1B2229D24() & 1) != 0
      || v11 == 114 && v12 == 0xE100000000000000
      || (sub_1B2229D24() & 1) != 0
      || v11 == 115 && v12 == 0xE100000000000000
      || (sub_1B2229D24() & 1) != 0
      || v11 == 116 && v12 == 0xE100000000000000
      || (sub_1B2229D24() & 1) != 0
      || v11 == 117 && v12 == 0xE100000000000000
      || (sub_1B2229D24() & 1) != 0
      || v11 == 118 && v12 == 0xE100000000000000
      || (sub_1B2229D24() & 1) != 0
      || v11 == 119 && v12 == 0xE100000000000000
      || (sub_1B2229D24() & 1) != 0
      || v11 == 120 && v12 == 0xE100000000000000
      || (sub_1B2229D24() & 1) != 0
      || v11 == 121 && v12 == 0xE100000000000000
      || (sub_1B2229D24() & 1) != 0
      || v11 == 122 && v12 == 0xE100000000000000
      || (sub_1B2229D24() & 1) != 0
      || v11 == 95 && v12 == 0xE100000000000000
      || (sub_1B2229D24() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      v20 = v51;
      sub_1B1EE88EC(a1, v41);
      v51 = v20;
      if (!v20)
      {
        v17 = v41[0];
        v13 = v42;
        v14 = v43;
        v15 = v44;
        v16 = v45;
        goto LABEL_7;
      }
      return;
    }
    if (v11 == 48 && v12 == 0xE100000000000000
      || (sub_1B2229D24() & 1) != 0
      || v11 == 49 && v12 == 0xE100000000000000
      || (sub_1B2229D24() & 1) != 0
      || v11 == 50 && v12 == 0xE100000000000000
      || (sub_1B2229D24() & 1) != 0
      || v11 == 51 && v12 == 0xE100000000000000
      || (sub_1B2229D24() & 1) != 0
      || v11 == 52 && v12 == 0xE100000000000000
      || (sub_1B2229D24() & 1) != 0
      || v11 == 53 && v12 == 0xE100000000000000
      || (sub_1B2229D24() & 1) != 0
      || v11 == 54 && v12 == 0xE100000000000000
      || (sub_1B2229D24() & 1) != 0
      || v11 == 55 && v12 == 0xE100000000000000
      || (sub_1B2229D24() & 1) != 0
      || v11 == 56 && v12 == 0xE100000000000000
      || (sub_1B2229D24() & 1) != 0
      || v11 == 57 && v12 == 0xE100000000000000
      || (sub_1B2229D24() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      v26 = v51;
      sub_1B1EE8C34(a1, v46);
      v51 = v26;
      if (!v26)
      {
        v17 = v46[0];
        v13 = v47;
        v14 = v48;
        v15 = v49;
        v16 = v50;
        goto LABEL_7;
      }
      return;
    }
    if (v11 == 47 && v12 == 0xE100000000000000 || (sub_1B2229D24() & 1) != 0)
    {
      sub_1B2229190();
      if (sub_1B22291A8() == 47 && v27 == 0xE100000000000000)
      {
        swift_bridgeObjectRelease();
        goto LABEL_271;
      }
      v28 = sub_1B2229D24();
      swift_bridgeObjectRelease();
      if ((v28 & 1) != 0)
      {
LABEL_271:
        swift_bridgeObjectRelease();
        sub_1B1EE8F9C(a1);
        if (v51)
          return;
LABEL_65:
        v17 = 0;
        v13 = 0;
        v14 = 0;
        v15 = 0;
        v16 = 0;
        goto LABEL_7;
      }
    }
    if (v11 == 32 && v12 == 0xE100000000000000
      || (sub_1B2229D24() & 1) != 0
      || v11 == 9 && v12 == 0xE100000000000000
      || (sub_1B2229D24() & 1) != 0
      || v11 == 10 && v12 == 0xE100000000000000)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v29 = sub_1B2229D24();
      swift_bridgeObjectRelease();
      if ((v29 & 1) == 0)
      {
        sub_1B2229430();
        sub_1B2228890();
        sub_1B2229190();
        sub_1B22291A8();
        sub_1B22285FC();
        swift_bridgeObjectRelease();
        v37 = sub_1B1EE43F8();
        v39 = v38;
        swift_bridgeObjectRelease();
        sub_1B1EF1CF4();
        v24 = swift_allocError();
        *v40 = v37;
        v40[1] = v39;
        goto LABEL_74;
      }
    }
    if ((v7 ^ (unint64_t)v6) >= 0x4000)
    {
      sub_1B22291A8();
      swift_bridgeObjectRetain();
      sub_1B2229178();
      swift_bridgeObjectRelease();
      v30 = sub_1B22291C0();
      v32 = v31;
      v34 = v33;
      v36 = v35;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v17 = 0;
      v13 = 0;
      v14 = 0;
      v15 = 0;
      v16 = 0;
      *a1 = v30;
      a1[1] = v32;
      a1[2] = v34;
      a1[3] = v36;
      goto LABEL_7;
    }
    goto LABEL_65;
  }
  swift_bridgeObjectRelease();
  v19 = sub_1B1EE84BC(a1);
  if (!v51)
  {
    if ((v19 & 1) == 0)
    {
      v13 = sub_1B1EE4214();
      v17 = 1;
      goto LABEL_7;
    }
    if ((a2 & 1) != 0)
      goto LABEL_65;
    v21 = sub_1B1EE43F8();
    v23 = v22;
    sub_1B1EF1CF4();
    v24 = swift_allocError();
    *v25 = v21;
    v25[1] = v23;
LABEL_74:
    v51 = v24;
    swift_willThrow();
  }
}

_QWORD *sub_1B1EE5D74(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v9;
  __int128 v10;
  __int128 v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[5];
  _OWORD v30[2];
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;

  v6 = v5;
  v25 = a1;
  v26 = a2;
  v27 = a3;
  v28 = a4;
  if ((a2 ^ a1) >= 0x4000)
  {
    v35 = a3;
    swift_bridgeObjectRetain();
    v7 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    while (1)
    {
      sub_1B1EE48B8((uint64_t *)&v25, a5 & 1, v29);
      if (v6)
        break;
      sub_1B1A18378((uint64_t)v29, (uint64_t)v30, (unint64_t *)&unk_1ED4B9F40, (uint64_t)&type metadata for Lexer.Token);
      if (v31)
      {
        v32 = v30[0];
        v33 = v30[1];
        v34 = v31;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v7 = sub_1B1C65804(0, v7[2] + 1, 1, v7);
        v13 = v7[2];
        v12 = v7[3];
        if (v13 >= v12 >> 1)
          v7 = sub_1B1C65804(v12 > 1, v13 + 1, 1, v7);
        v7[2] = v13 + 1;
        v9 = &v7[5 * v13];
        v10 = v32;
        v11 = v33;
        v9[8] = v34;
        *((_OWORD *)v9 + 2) = v10;
        *((_OWORD *)v9 + 3) = v11;
      }
      if (!((v26 ^ v25) >> 14))
        goto LABEL_13;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
    v7 = (_QWORD *)MEMORY[0x1E0DEE9D8];
LABEL_13:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v14 = sub_1B22291C0();
    v16 = v15;
    v18 = v17;
    v20 = v19;
    swift_bridgeObjectRelease();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v7 = sub_1B1C65804(0, v7[2] + 1, 1, v7);
    v22 = v7[2];
    v21 = v7[3];
    if (v22 >= v21 >> 1)
      v7 = sub_1B1C65804(v21 > 1, v22 + 1, 1, v7);
    v7[2] = v22 + 1;
    v23 = &v7[5 * v22];
    *((_BYTE *)v23 + 32) = 16;
    v23[5] = v14;
    v23[6] = v16;
    v23[7] = v18;
    v23[8] = v20;
  }
  return v7;
}

uint64_t sub_1B1EE5FD8(uint64_t a1)
{
  uint64_t v1;
  uint64_t i;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v11;
  char v12;
  _QWORD *v13;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return v1 | 0x100;
  for (i = a1 + 56; ; i += 32)
  {
    v3 = *(_QWORD *)(i - 16);
    if (v3)
    {
      v4 = *(_QWORD *)(i - 24) == 0x74756F6E69 && v3 == 0xE500000000000000;
      if (v4 || (sub_1B2229D24() & 1) != 0)
        break;
    }
    if (!--v1)
      return v1 | 0x100;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v5 = sub_1B22287B8();
  v7 = v5 == 1702195828 && v6 == 0xE400000000000000;
  if (v7
    || (v8 = v5, v9 = v6, (sub_1B2229D24() & 1) != 0)
    || v8 == 7562617 && v9 == 0xE300000000000000
    || (sub_1B2229D24() & 1) != 0
    || v8 == 49 && v9 == 0xE100000000000000
    || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v11 = 3;
LABEL_18:
    swift_bridgeObjectRelease();
    return v11;
  }
  if (v8 == 0x65736C6166 && v9 == 0xE500000000000000
    || (sub_1B2229D24() & 1) != 0
    || v8 == 28526 && v9 == 0xE200000000000000
    || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
LABEL_32:
    swift_bridgeObjectRelease();
    v11 = 1;
    goto LABEL_18;
  }
  if (v8 == 48 && v9 == 0xE100000000000000)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v11 = 1;
    goto LABEL_18;
  }
  v12 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  if ((v12 & 1) != 0)
    goto LABEL_32;
  sub_1B2229430();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_1B2228890();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  sub_1B1EF1A2C();
  swift_allocError();
  *v13 = 39;
  v13[1] = 0xE100000000000000;
  return swift_willThrow();
}

uint64_t sub_1B1EE6330()
{
  uint64_t v0;
  uint64_t result;

  v0 = sub_1B1F4E8C4((uint64_t)&unk_1E63770B0);
  result = swift_arrayDestroy();
  qword_1ED4D0A40 = v0;
  return result;
}

uint64_t sub_1B1EE6378()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (*(_QWORD *)(v0 + 16) == *(_QWORD *)(v0 + 24) >> 1)
    return 0;
  swift_bridgeObjectRetain();
  v2 = sub_1B2228974();
  v4 = v3;
  v6 = v5;
  v8 = v7;
  swift_bridgeObjectRelease();
  v1 = MEMORY[0x1B5E20388](v2, v4, v6, v8);
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t sub_1B1EE6458()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int v11;
  int v12;

  if (*(_QWORD *)(v0 + 16) != *(_QWORD *)(v0 + 24) >> 1)
    swift_bridgeObjectRetain();
  v1 = sub_1B2228974();
  v3 = v2;
  swift_bridgeObjectRelease();
  if (v3 >> 14 != v1 >> 14)
  {
    swift_bridgeObjectRetain();
    v4 = 0;
    while (1)
    {
      v6 = sub_1B22291A8();
      v8 = v7;
      v9 = sub_1B2229178();
      if (!((v8 & 0x2000000000000000) != 0 ? HIBYTE(v8) & 0xF : v6 & 0xFFFFFFFFFFFFLL))
        break;
      if ((v8 & 0x1000000000000000) != 0)
      {
        v11 = sub_1B2229424();
      }
      else
      {
        if ((v8 & 0x2000000000000000) == 0 && (v6 & 0x1000000000000000) == 0)
          sub_1B22294FC();
        v11 = sub_1B2229508();
      }
      v12 = v11;
      swift_bridgeObjectRelease();
      if ((v12 - 14) < 0xFFFFFFFC && (v12 - 8232) >= 2)
      {
        v5 = 1;
        if (v12 == 133)
          goto LABEL_7;
        goto LABEL_17;
      }
      v5 = 1;
LABEL_7:
      v4 += v5;
      if (v3 >> 14 == v9 >> 14)
      {
        swift_bridgeObjectRelease_n();
        goto LABEL_26;
      }
    }
    swift_bridgeObjectRelease();
LABEL_17:
    v5 = 0;
    goto LABEL_7;
  }
  swift_bridgeObjectRelease();
LABEL_26:
  sub_1B2229430();
  swift_bridgeObjectRelease();
  sub_1B2229A0C();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  sub_1B2228890();
  return 0x3A7475706E69;
}

uint64_t sub_1B1EE66E0@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  char v11;
  uint64_t v12;
  char v13[8];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v3 = v1[2];
  if (v3 == v1[3] >> 1 || (v4 = v1[1], *(_BYTE *)(v4 + 40 * v3) != 16))
  {
    sub_1B1EE4374((uint64_t)v13);
    v6 = v14;
    v7 = v15;
    v9 = v16;
    v8 = v17;
    v12 = (uint64_t)(v1 + 4);
    v11 = v13[0];
    sub_1B1EF1AD8((uint64_t)v13, v12);
    result = swift_bridgeObjectRetain();
  }
  else
  {
    v5 = (_QWORD *)(v4 + 40 * v3);
    v6 = v5[1];
    v7 = v5[2];
    v9 = v5[3];
    v8 = v5[4];
    result = swift_bridgeObjectRetain();
    v11 = 16;
  }
  *(_BYTE *)a1 = v11;
  *(_QWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 16) = v7;
  *(_QWORD *)(a1 + 24) = v9;
  *(_QWORD *)(a1 + 32) = v8;
  return result;
}

uint64_t sub_1B1EE678C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (*(_QWORD *)(v0 + 16) == *(_QWORD *)(v0 + 24) >> 1)
    return 0;
  swift_bridgeObjectRetain();
  v2 = sub_1B2228974();
  v4 = v3;
  v6 = v5;
  v8 = v7;
  swift_bridgeObjectRelease();
  v1 = MEMORY[0x1B5E20388](v2, v4, v6, v8);
  swift_bridgeObjectRelease();
  return v1;
}

unint64_t sub_1B1EE6864(unsigned __int8 a1, uint64_t a2, uint64_t a3, unsigned __int8 a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v12;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  BOOL v23;
  uint64_t v24;
  _QWORD *v25;
  BOOL v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _OWORD *v32;
  uint64_t *v33;
  unint64_t result;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v45;
  _OWORD v47[4];
  uint64_t v48;
  _OWORD v49[4];
  uint64_t v50;
  _OWORD v51[4];
  uint64_t v52;
  uint64_t v53;

  v12 = a5 + 16;
  if (a4 == 3 || (sub_1B1B0F2E0(a4, a3) & 1) == 0)
  {
    v27 = *(_OWORD *)(v12 + 48);
    v51[2] = *(_OWORD *)(v12 + 32);
    v51[3] = v27;
    v52 = *(_QWORD *)(v12 + 64);
    v28 = *(_OWORD *)(v12 + 16);
    v51[0] = *(_OWORD *)v12;
    v51[1] = v28;
    sub_1B1EF1B88((uint64_t)v51);
    sub_1B2229430();
    swift_bridgeObjectRelease();
    MEMORY[0x1B5E20388](a6, a7, a8, a9);
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    sub_1B1EF1C8C();
    sub_1B2228CC8();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    v29 = sub_1B1EE6458();
    v31 = v30;
    swift_bridgeObjectRelease();
    v32 = v51;
LABEL_23:
    sub_1B1EF1BBC((uint64_t)v32);
    sub_1B1EF1A2C();
    swift_allocError();
    *v33 = v29;
    v33[1] = v31;
    return swift_willThrow();
  }
  v45 = *(_QWORD *)(a10 + 16);
  if (v45)
  {
    v42 = a7;
    v43 = a8;
    v53 = a2 + 56;
    swift_bridgeObjectRetain();
    v14 = 0;
    while (1)
    {
      v15 = (uint64_t *)(a10 + 32 + 32 * v14);
      v16 = v15[1];
      if (!v16)
      {
        swift_bridgeObjectRelease();
        v35 = *(_OWORD *)(v12 + 48);
        v49[2] = *(_OWORD *)(v12 + 32);
        v49[3] = v35;
        v50 = *(_QWORD *)(v12 + 64);
        v36 = *(_OWORD *)(v12 + 16);
        v49[0] = *(_OWORD *)v12;
        v49[1] = v36;
        sub_1B1EF1B88((uint64_t)v49);
        sub_1B2229430();
        swift_bridgeObjectRelease();
        MEMORY[0x1B5E20388](a6, v42, v43, a9);
        sub_1B2228890();
        swift_bridgeObjectRelease();
        sub_1B2228890();
        v29 = sub_1B1EE6458();
        v31 = v37;
        swift_bridgeObjectRelease();
        v32 = v49;
        goto LABEL_23;
      }
      v17 = *v15;
      if (!*(_QWORD *)(a2 + 16))
      {
        swift_bridgeObjectRetain();
        goto LABEL_28;
      }
      sub_1B222A06C();
      swift_bridgeObjectRetain();
      sub_1B2228824();
      v18 = sub_1B222A0C0();
      v19 = -1 << *(_BYTE *)(a2 + 32);
      v20 = v18 & ~v19;
      if (((*(_QWORD *)(v53 + ((v20 >> 3) & 0xFFFFFFFFFFFFF8)) >> v20) & 1) == 0)
        goto LABEL_28;
      v21 = *(_QWORD *)(a2 + 48);
      v22 = (_QWORD *)(v21 + 16 * v20);
      v23 = *v22 == v17 && v16 == v22[1];
      if (!v23 && (sub_1B2229D24() & 1) == 0)
        break;
LABEL_5:
      ++v14;
      swift_bridgeObjectRelease();
      if (v14 == v45)
      {
        swift_bridgeObjectRelease();
        goto LABEL_26;
      }
    }
    v24 = ~v19;
    while (1)
    {
      v20 = (v20 + 1) & v24;
      if (((*(_QWORD *)(v53 + ((v20 >> 3) & 0xFFFFFFFFFFFFF8)) >> v20) & 1) == 0)
        break;
      v25 = (_QWORD *)(v21 + 16 * v20);
      v26 = *v25 == v17 && v16 == v25[1];
      if (v26 || (sub_1B2229D24() & 1) != 0)
        goto LABEL_5;
    }
LABEL_28:
    swift_bridgeObjectRelease();
    v39 = *(_OWORD *)(v12 + 48);
    v47[2] = *(_OWORD *)(v12 + 32);
    v47[3] = v39;
    v48 = *(_QWORD *)(v12 + 64);
    v40 = *(_OWORD *)(v12 + 16);
    v47[0] = *(_OWORD *)v12;
    v47[1] = v40;
    sub_1B1EF1B88((uint64_t)v47);
    sub_1B2229430();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    MEMORY[0x1B5E20388](a6, v42, v43, a9);
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    v29 = sub_1B1EE6458();
    v31 = v41;
    swift_bridgeObjectRelease();
    v32 = v47;
    goto LABEL_23;
  }
LABEL_26:
  v38 = swift_allocObject();
  *(_QWORD *)(v38 + 16) = a1;
  *(_QWORD *)(v38 + 24) = 0;
  *(_QWORD *)(v38 + 32) = 0;
  *(_QWORD *)(v38 + 40) = 0;
  result = v38 | 0xD000000000000000;
  *(_BYTE *)(v38 + 48) = 5;
  return result;
}

uint64_t sub_1B1EE6D54(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  BOOL v19;
  uint64_t v20;
  unint64_t i;
  uint64_t v22;
  _QWORD *v23;
  BOOL v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _OWORD *v30;
  char v31;
  uint64_t result;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  uint64_t *v36;
  char v37;
  uint64_t v38;
  uint64_t v43;
  _OWORD v44[4];
  uint64_t v45;
  _OWORD v46[4];
  uint64_t v47;
  uint64_t v48;

  v43 = *(_QWORD *)(a3 + 16);
  if (v43)
  {
    v37 = a1;
    v38 = a4 + 16;
    v48 = a3 + 32;
    v9 = a2 + 56;
    swift_bridgeObjectRetain();
    v10 = 0;
    while (1)
    {
      v11 = (uint64_t *)(v48 + 32 * v10);
      v12 = v11[1];
      if (!v12)
      {
        swift_bridgeObjectRelease();
        v25 = *(_OWORD *)(v38 + 48);
        v46[2] = *(_OWORD *)(v38 + 32);
        v46[3] = v25;
        v47 = *(_QWORD *)(v38 + 64);
        v26 = *(_OWORD *)(v38 + 16);
        v46[0] = *(_OWORD *)v38;
        v46[1] = v26;
        sub_1B1EF1B88((uint64_t)v46);
        sub_1B2229430();
        swift_bridgeObjectRelease();
        MEMORY[0x1B5E20388](a5, a6, a7, a8);
        sub_1B2228890();
        swift_bridgeObjectRelease();
        sub_1B2228890();
        v27 = sub_1B1EE6458();
        v29 = v28;
        swift_bridgeObjectRelease();
        v30 = v46;
        goto LABEL_25;
      }
      v13 = *v11;
      if (!*(_QWORD *)(a2 + 16))
      {
        swift_bridgeObjectRetain();
        goto LABEL_24;
      }
      sub_1B222A06C();
      swift_bridgeObjectRetain();
      sub_1B2228824();
      v14 = sub_1B222A0C0();
      v15 = -1 << *(_BYTE *)(a2 + 32);
      v16 = v14 & ~v15;
      if (((*(_QWORD *)(v9 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) == 0)
        goto LABEL_24;
      v17 = *(_QWORD *)(a2 + 48);
      v18 = (_QWORD *)(v17 + 16 * v16);
      v19 = *v18 == v13 && v12 == v18[1];
      if (!v19 && (sub_1B2229D24() & 1) == 0)
        break;
LABEL_3:
      ++v10;
      swift_bridgeObjectRelease();
      if (v10 == v43)
      {
        swift_bridgeObjectRelease();
        a1 = v37;
        goto LABEL_22;
      }
    }
    v20 = ~v15;
    for (i = v16 + 1; ; i = v22 + 1)
    {
      v22 = i & v20;
      if (((*(_QWORD *)(v9 + (((i & v20) >> 3) & 0xFFFFFFFFFFFFF8)) >> (i & v20)) & 1) == 0)
        break;
      v23 = (_QWORD *)(v17 + 16 * v22);
      v24 = *v23 == v13 && v12 == v23[1];
      if (v24 || (sub_1B2229D24() & 1) != 0)
        goto LABEL_3;
    }
LABEL_24:
    swift_bridgeObjectRelease();
    v33 = *(_OWORD *)(v38 + 48);
    v44[2] = *(_OWORD *)(v38 + 32);
    v44[3] = v33;
    v45 = *(_QWORD *)(v38 + 64);
    v34 = *(_OWORD *)(v38 + 16);
    v44[0] = *(_OWORD *)v38;
    v44[1] = v34;
    sub_1B1EF1B88((uint64_t)v44);
    sub_1B2229430();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    MEMORY[0x1B5E20388](a5, a6, a7, a8);
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    v27 = sub_1B1EE6458();
    v29 = v35;
    swift_bridgeObjectRelease();
    v30 = v44;
LABEL_25:
    sub_1B1EF1BBC((uint64_t)v30);
    sub_1B1EF1A2C();
    swift_allocError();
    *v36 = v27;
    v36[1] = v29;
    return swift_willThrow();
  }
  else
  {
LABEL_22:
    v31 = a1 & 1;
    result = swift_allocObject();
    *(_BYTE *)(result + 16) = v31;
  }
  return result;
}

uint64_t sub_1B1EE7108(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned __int8 a6, uint64_t a7)
{
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  _OWORD v17[4];
  uint64_t v18;

  if (a6 != result)
  {
    v11 = *(_OWORD *)(a7 + 64);
    v17[2] = *(_OWORD *)(a7 + 48);
    v17[3] = v11;
    v18 = *(_QWORD *)(a7 + 80);
    v12 = *(_OWORD *)(a7 + 32);
    v17[0] = *(_OWORD *)(a7 + 16);
    v17[1] = v12;
    sub_1B1EF1B88((uint64_t)v17);
    sub_1B2229430();
    sub_1B2228890();
    MEMORY[0x1B5E20388](a2, a3, a4, a5);
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    sub_1B22295EC();
    v13 = sub_1B1EE6458();
    v15 = v14;
    swift_bridgeObjectRelease();
    sub_1B1EF1BBC((uint64_t)v17);
    sub_1B1EF1A2C();
    swift_allocError();
    *v16 = v13;
    v16[1] = v15;
    return swift_willThrow();
  }
  return result;
}

void sub_1B1EE7274(uint64_t a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1B1EE72BC()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;

  sub_1B1C96CF0(v1);
  v4 = sub_1B1E68FB0(v3, 1u);
  if ((v2 & 2) != 0)
  {
    if ((v4 & 1) != 0)
      v6 = MEMORY[0x1E0DEBC10];
    else
      sub_1B1C96CF0(v1);
    v7 = 1;
    result = sub_1B1B4F95C(v6, 1);
    v9 = result;
    v11 = v10;
    v12 = 0xE600000000000000;
    v13 = 0x646165726874;
  }
  else
  {
    if ((v4 & 1) != 0)
      v5 = MEMORY[0x1E0DEABD0];
    else
      sub_1B1C96CF0(v1);
    result = sub_1B1B4F95C(v5, 1);
    v9 = result;
    v11 = v14;
    v7 = 0;
    v12 = 0xE500000000000000;
    v13 = 0x74736E6F63;
  }
  *(_QWORD *)v0 = v9;
  *(_QWORD *)(v0 + 8) = v11;
  *(_QWORD *)(v0 + 16) = v13;
  *(_QWORD *)(v0 + 24) = v12;
  *(_BYTE *)(v0 + 32) = v7;
  return result;
}

void sub_1B1EE74D0()
{
  swift_bridgeObjectRetain();
  JUMPOUT(0x1B1EE73FCLL);
}

void sub_1B1EE74F4()
{
  unsigned __int8 v0;
  uint64_t v1;
  char v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (v0 - 20 >= 3)
  {
    if (v0 != 18)
      JUMPOUT(0x1B1EE73A4);
    sub_1B1C96CF0(v1);
    if ((sub_1B1E68FB0(v4, 1u) & 1) != 0)
    {
      if ((v2 & 2) != 0)
        v5 = MEMORY[0x1E0DEBC10];
      else
        v5 = MEMORY[0x1E0DEABD0];
    }
    else
    {
      sub_1B1C96CF0(v1);
    }
    sub_1B1B4F95C(v5, 1);
  }
  else
  {
    v3 = sub_1B1C95DA4(v0);
    if (v3 >> 60 != 7)
    {
      while (1)
      {
        sub_1B1B28D2C(v3);
        sub_1B2229430();
        sub_1B2228890();
        sub_1B22295EC();
        sub_1B2228890();
        sub_1B2229688();
        __break(1u);
      }
    }
    swift_bridgeObjectRetain();
    sub_1B1B28D2C(v3);
  }
  JUMPOUT(0x1B1EE73FCLL);
}

unint64_t sub_1B1EE7710(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unsigned int v5;

  if ((a2 & 0x2000000000000000) != 0)
    v2 = HIBYTE(a2) & 0xF;
  else
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  if (v2)
  {
    sub_1B1EE77EC(15, a1, a2);
    if ((a2 & 0x1000000000000000) != 0)
    {
      v5 = sub_1B2229424();
    }
    else
    {
      if ((a2 & 0x2000000000000000) == 0 && (a1 & 0x1000000000000000) == 0)
        sub_1B22294FC();
      v5 = sub_1B2229508();
    }
  }
  else
  {
    v5 = 0;
  }
  return v5 | ((unint64_t)(v2 == 0) << 32);
}

uint64_t sub_1B1EE77EC(uint64_t result, uint64_t a2, unint64_t a3)
{
  char v5;
  uint64_t v6;
  uint64_t v7;

  v5 = (a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0;
  v6 = result & 0xC;
  v7 = 4 << v5;
  if ((result & 1) == 0 || v6 == v7)
  {
    if (v6 != v7)
    {
      if ((result & 1) != 0)
        return result;
      return result & 0xC | sub_1B1EE7878(result, a2, a3) & 0xFFFFFFFFFFFFFFF3 | 1;
    }
    result = sub_1B1DCCCD0(result, a2, a3);
    if ((result & 1) == 0)
      return result & 0xC | sub_1B1EE7878(result, a2, a3) & 0xFFFFFFFFFFFFFFF3 | 1;
  }
  return result;
}

unint64_t sub_1B1EE7878(unint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  _QWORD v13[4];

  if ((result & 0xC000) != 0 || result < 0x10000)
  {
    result &= 0xFFFFFFFFFFFF0000;
  }
  else
  {
    v5 = result >> 16;
    if ((a3 & 0x1000000000000000) == 0)
    {
      v13[2] = v3;
      v13[3] = v4;
      if ((a3 & 0x2000000000000000) != 0)
      {
        v13[0] = a2;
        v13[1] = a3 & 0xFFFFFFFFFFFFFFLL;
        if (v5 != (HIBYTE(a3) & 0xF) && (*((_BYTE *)v13 + v5) & 0xC0) == 0x80)
        {
          do
          {
            v7 = v5 - 1;
            v11 = *((_BYTE *)&v12 + v5-- + 7) & 0xC0;
          }
          while (v11 == 128);
          return v7 << 16;
        }
        goto LABEL_14;
      }
      if ((a2 & 0x1000000000000000) != 0)
      {
        v6 = (a3 & 0xFFFFFFFFFFFFFFFLL) + 32;
        if (v5 == (a2 & 0xFFFFFFFFFFFFLL))
          goto LABEL_14;
      }
      else
      {
        v12 = result >> 16;
        v6 = sub_1B22294FC();
        v5 = v12;
        if (v12 == v10)
          goto LABEL_14;
      }
      if ((*(_BYTE *)(v6 + v5) & 0xC0) == 0x80)
      {
        do
        {
          v7 = v5 - 1;
          v8 = *(_BYTE *)(v6 - 1 + v5--) & 0xC0;
        }
        while (v8 == 128);
        return v7 << 16;
      }
LABEL_14:
      v7 = v5;
      return v7 << 16;
    }
    v9 = HIBYTE(a3) & 0xF;
    if ((a3 & 0x2000000000000000) == 0)
      v9 = a2 & 0xFFFFFFFFFFFFLL;
    if (v5 != v9)
      return sub_1B2229418();
  }
  return result;
}

uint64_t sub_1B1EE7988(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v6;

  if ((a6 & 0x2000000000000000) != 0)
    v6 = HIBYTE(a6) & 0xF;
  else
    v6 = a5 & 0xFFFFFFFFFFFFLL;
  if (a3 == a5 && a4 == a6 && !(a1 >> 16) && a2 >> 16 == v6)
    return 1;
  else
    return sub_1B22299F4() & 1;
}

uint64_t sub_1B1EE79FC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return MEMORY[0x1E0DEE9E8];
  sub_1B1AED5E4(0, &qword_1ED4BA838, MEMORY[0x1E0DEB418], MEMORY[0x1E0DEB428], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEC268]);
  v3 = sub_1B22293F4();
  v4 = 0;
  v5 = v3 + 56;
  v6 = a1 + 32;
  v7 = ~(-1 << *(_BYTE *)(v3 + 32));
  do
  {
    v8 = *(_QWORD *)(v6 + 8 * v4);
    v9 = sub_1B222A060();
    v10 = v9 & v7;
    v11 = (v9 & (unint64_t)v7) >> 6;
    v12 = *(_QWORD *)(v5 + 8 * v11);
    v13 = 1 << (v9 & v7);
    v14 = *(_QWORD *)(v3 + 48);
    if ((v13 & v12) != 0)
    {
      while (*(_QWORD *)(v14 + 8 * v10) != v8)
      {
        v10 = (v10 + 1) & v7;
        v11 = v10 >> 6;
        v12 = *(_QWORD *)(v5 + 8 * (v10 >> 6));
        v13 = 1 << v10;
        if ((v12 & (1 << v10)) == 0)
          goto LABEL_3;
      }
    }
    else
    {
LABEL_3:
      *(_QWORD *)(v5 + 8 * v11) = v13 | v12;
      *(_QWORD *)(v14 + 8 * v10) = v8;
      ++*(_QWORD *)(v3 + 16);
    }
    ++v4;
  }
  while (v4 != v1);
  return v3;
}

uint64_t sub_1B1EE7B1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t i;
  uint64_t v7;
  uint64_t v8;

  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
    return 0;
  for (i = a1 + 56; ; i += 32)
  {
    v7 = *(_QWORD *)(i - 16);
    if (v7)
    {
      v8 = *(_QWORD *)(i - 24);
      if (v8 == a2 && v7 == a3)
        goto LABEL_11;
      if ((sub_1B2229D24() & 1) != 0)
        break;
    }
    if (!--v3)
      return 0;
  }
  a2 = v8;
LABEL_11:
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a2;
}

uint64_t sub_1B1EE7BF4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  void (*v18)(char *, uint64_t);
  _QWORD v20[5];

  sub_1B1EF1F0C(0);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v7);
  v9 = (char *)v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)v20 - v12;
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)v20 - v16;
  sub_1B1EF1F28();
  sub_1B22282E4();
  sub_1B222832C();
  v18 = *(void (**)(char *, uint64_t))(v6 + 8);
  v18(v9, v5);
  sub_1B2228320();
  v18(v13, v5);
  v20[2] = a1;
  v20[3] = a2;
  v20[0] = 0;
  v20[1] = 0xE000000000000000;
  sub_1B1EF1FA8();
  sub_1B1CAED6C();
  sub_1B19E52CC(&qword_1EEF60A48, (uint64_t (*)(uint64_t))sub_1B1EF1F0C, MEMORY[0x1E0DF1F60]);
  sub_1B2228E30();
  v18(v17, v5);
  return v20[4];
}

uint64_t sub_1B1EE7D98(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v27;
  uint64_t v29;
  uint64_t v30;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_1B1B9D460(0, &qword_1EEF60A50, (uint64_t (*)(uint64_t))type metadata accessor for URLResourceKey, &qword_1EEF58558, (uint64_t)&unk_1B226C3F0);
    v3 = sub_1B22293F4();
    v4 = 0;
    v5 = v3 + 56;
    v29 = v1;
    v30 = a1 + 32;
    while (1)
    {
      v7 = *(void **)(v30 + 8 * v4);
      sub_1B222874C();
      sub_1B222A06C();
      v8 = v7;
      sub_1B2228824();
      v9 = sub_1B222A0C0();
      swift_bridgeObjectRelease();
      v10 = -1 << *(_BYTE *)(v3 + 32);
      v11 = v9 & ~v10;
      v12 = v11 >> 6;
      v13 = *(_QWORD *)(v5 + 8 * (v11 >> 6));
      v14 = 1 << v11;
      if (((1 << v11) & v13) != 0)
      {
        v15 = sub_1B222874C();
        v17 = v16;
        if (v15 == sub_1B222874C() && v17 == v18)
        {
LABEL_19:
          swift_bridgeObjectRelease_n();
LABEL_20:

          v6 = v29;
          goto LABEL_4;
        }
        v20 = sub_1B2229D24();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v20 & 1) != 0)
          goto LABEL_20;
        v21 = ~v10;
        while (1)
        {
          v11 = (v11 + 1) & v21;
          v12 = v11 >> 6;
          v13 = *(_QWORD *)(v5 + 8 * (v11 >> 6));
          v14 = 1 << v11;
          if ((v13 & (1 << v11)) == 0)
            break;
          v22 = sub_1B222874C();
          v24 = v23;
          if (v22 == sub_1B222874C() && v24 == v25)
            goto LABEL_19;
          v27 = sub_1B2229D24();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v27 & 1) != 0)
            goto LABEL_20;
        }
      }
      v6 = v29;
      *(_QWORD *)(v5 + 8 * v12) = v14 | v13;
      *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v11) = v8;
      ++*(_QWORD *)(v3 + 16);
LABEL_4:
      if (++v4 == v6)
        return v3;
    }
  }
  return MEMORY[0x1E0DEE9E8];
}

uint64_t sub_1B1EE7FDC(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4, unsigned __int8 a5)
{
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t result;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;

  v52 = a3;
  v53 = a4;
  v7 = a5;
  v50 = sub_1B22282C0();
  v47 = *(_QWORD *)(v50 - 8);
  MEMORY[0x1E0C80A78](v50, v8);
  v46 = (char *)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1B1791524(0, &qword_1ED4B7B70, (uint64_t (*)(uint64_t))sub_1B1CAF124, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v45 - v12;
  sub_1B1CAF124(0);
  v15 = v14;
  v54 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14, v16);
  v45 = (char *)&v45 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1B1EF1E98(0);
  v57 = v18;
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A78](v18, v20);
  v22 = (char *)&v45 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v23, v24);
  v26 = (char *)&v45 - v25;
  MEMORY[0x1E0C80A78](v27, v28);
  v30 = (char *)&v45 - v29;
  v48 = a1;
  v49 = a2;
  if (v7 != 2)
  {
    v55 = 0;
    v56 = 0xE000000000000000;
    sub_1B2229430();
    swift_bridgeObjectRelease();
    v55 = 0x2B735C64696F76;
    v56 = 0xE700000000000000;
    sub_1B2228890();
    sub_1B2228890();
    v32 = v51;
    sub_1B2228350();
    if (!v32)
      goto LABEL_5;
LABEL_10:
    result = swift_unexpectedError();
    __break(1u);
    return result;
  }
  v55 = 0;
  v56 = 0xE000000000000000;
  sub_1B2229430();
  swift_bridgeObjectRelease();
  v55 = 0x2B735C636E7566;
  v56 = 0xE700000000000000;
  sub_1B2228890();
  sub_1B2228890();
  v31 = v51;
  sub_1B2228350();
  if (v31)
  {
    swift_unexpectedError();
    __break(1u);
    goto LABEL_10;
  }
  v22 = v26;
LABEL_5:
  v33 = v57;
  (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v30, v22, v57);
  v55 = v52;
  v56 = v53;
  sub_1B22282CC();
  sub_1B1A2044C();
  sub_1B19E52CC(&qword_1ED4B7B88, (uint64_t (*)(uint64_t))sub_1B1EF1E98, MEMORY[0x1E0DF1F60]);
  sub_1B2228620();
  v34 = v54;
  v35 = v15;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v54 + 48))(v13, 1, v15) == 1)
  {
    sub_1B1AEA224((uint64_t)v13, (uint64_t)&qword_1ED4B7B70, (uint64_t)sub_1B1CAF124, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))sub_1B1791524);
    v55 = 0;
    v56 = 0xE000000000000000;
    sub_1B2229430();
    swift_bridgeObjectRelease();
    v55 = 0xD00000000000001DLL;
    v56 = 0x80000001B2343530;
    sub_1B2228890();
    v36 = v55;
    v37 = v56;
    sub_1B1EF1A2C();
    swift_allocError();
    *v38 = v36;
    v38[1] = v37;
    swift_willThrow();
    (*(void (**)(char *, uint64_t))(v19 + 8))(v30, v33);
  }
  else
  {
    v39 = v45;
    v40 = (*(uint64_t (**)(char *, char *, uint64_t))(v34 + 32))(v45, v13, v35);
    v41 = v35;
    MEMORY[0x1E0C80A78](v40, v42);
    *(&v45 - 2) = (char *)1;
    swift_getKeyPath();
    v43 = v46;
    sub_1B2228338();
    swift_release();
    v36 = sub_1B22282B4();
    (*(void (**)(char *, uint64_t))(v47 + 8))(v43, v50);
    (*(void (**)(char *, uint64_t))(v34 + 8))(v39, v41);
    (*(void (**)(char *, uint64_t))(v19 + 8))(v30, v57);
  }
  return v36;
}

uint64_t sub_1B1EE84BC(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char v27;
  char v28;
  char *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int (*v35)(uint64_t, uint64_t, uint64_t);
  unsigned int v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  void (*v45)(char *, uint64_t);
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  unsigned int (*v51)(uint64_t, uint64_t, uint64_t);
  unsigned int (*v52)(uint64_t, uint64_t, uint64_t);
  void (*v53)(char *, uint64_t);
  uint64_t v54;
  uint64_t v55;
  unsigned int (*v56)(uint64_t, uint64_t, uint64_t);
  char *v57;
  char *v58;
  char *v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;

  v2 = MEMORY[0x1E0DEBAF0];
  sub_1B1A02758(0, &qword_1ED4B7B78, MEMORY[0x1E0DEBAF0], MEMORY[0x1E0DF1F30]);
  v4 = *(_QWORD *)(v3 - 8);
  v62 = v3;
  v63 = v4;
  MEMORY[0x1E0C80A78](v3, v5);
  v7 = (char *)&v55 - v6;
  sub_1B1EF1D38();
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v55 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)&v55 - v14;
  sub_1B1A02758(0, &qword_1ED4B7B98, v2, MEMORY[0x1E0DF1F50]);
  v17 = v16;
  v18 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16, v19);
  v21 = (char *)&v55 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v22, v23);
  v25 = (char *)&v55 - v24;
  v26 = v64;
  v27 = sub_1B1EE465C();
  if (!v26)
  {
    v57 = v7;
    v58 = v11;
    v60 = v18;
    v61 = v25;
    v59 = v21;
    v64 = v17;
    if ((v27 & 1) != 0)
    {
      v30 = v61;
      sub_1B22282E4();
      v31 = a1;
      v32 = (uint64_t)v15;
      sub_1B22282FC();
      v33 = v62;
      v34 = v63;
      v35 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v63 + 48);
      v36 = v35(v32, 1, v62);
      sub_1B1EF1DA4(v32);
      if (v36 == 1)
      {
        (*(void (**)(char *, uint64_t))(v60 + 8))(v30, v64);
        v28 = 0;
      }
      else
      {
        v56 = v35;
        v37 = v59;
        sub_1B22282E4();
        v38 = (uint64_t)v58;
        v39 = v64;
        sub_1B2228314();
        v40 = v60;
        if (v56(v38, 1, v33) == 1)
        {
          sub_1B1EF1DA4(v38);
          v41 = sub_1B1EE43F8();
          v43 = v42;
          sub_1B1EF1CF4();
          swift_allocError();
          *v44 = v41;
          v44[1] = v43;
          swift_willThrow();
          v45 = *(void (**)(char *, uint64_t))(v40 + 8);
          v45(v37, v39);
          v45(v61, v39);
        }
        else
        {
          v46 = v57;
          (*(void (**)(char *, uint64_t, uint64_t))(v34 + 32))(v57, v38, v33);
          swift_getKeyPath();
          sub_1B2228338();
          swift_release();
          if ((v31[1] ^ (unint64_t)*v31) >= 0x4000)
          {
            v58 = (char *)v31[2];
            swift_bridgeObjectRetain();
            v47 = sub_1B22291C0();
            v49 = v48;
            v58 = v50;
            v56 = v51;
            v34 = v63;
            swift_bridgeObjectRelease_n();
            *v31 = v47;
            v31[1] = v49;
            v52 = v56;
            v31[2] = (uint64_t)v58;
            v31[3] = (uint64_t)v52;
          }
          (*(void (**)(char *, uint64_t))(v34 + 8))(v46, v33);
          v53 = *(void (**)(char *, uint64_t))(v40 + 8);
          v54 = v64;
          v53(v37, v64);
          v53(v61, v54);
          v28 = 1;
        }
      }
    }
    else
    {
      v28 = 0;
    }
  }
  return v28 & 1;
}

__n128 sub_1B1EE88EC@<Q0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  __n128 result;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  _BYTE *v43;
  __n128 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v43 = a2;
  sub_1B1EF1D38();
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (char *)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x1E0DEBAF0];
  sub_1B1A02758(0, &qword_1ED4B7B78, MEMORY[0x1E0DEBAF0], MEMORY[0x1E0DF1F30]);
  v9 = v8;
  v10 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v11);
  v13 = (char *)&v40 - v12;
  sub_1B1A02758(0, &qword_1ED4B7B98, v7, MEMORY[0x1E0DF1F50]);
  v15 = v14;
  v16 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14, v17);
  v19 = (char *)&v40 - v18;
  sub_1B22282E4();
  v20 = v47;
  sub_1B2228314();
  if (v20)
    goto LABEL_4;
  v41 = v19;
  v42 = v15;
  v47 = v16;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v6, 1, v9) == 1)
  {
    sub_1B1EF1DA4((uint64_t)v6);
    v44.n128_u64[0] = 0;
    v44.n128_u64[1] = 0xE000000000000000;
    sub_1B2229430();
    swift_bridgeObjectRelease();
    v44.n128_u64[0] = 0xD000000000000014;
    v44.n128_u64[1] = 0x80000001B23434B0;
    v22 = *a1;
    v21 = a1[1];
    v24 = a1[2];
    v23 = a1[3];
    swift_bridgeObjectRetain();
    MEMORY[0x1B5E20388](v22, v21, v24, v23);
    sub_1B2228890();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v26 = v44.n128_u64[1];
    v25 = v44.n128_u64[0];
    sub_1B1EF1CF4();
    swift_allocError();
    *v27 = v25;
    v27[1] = v26;
    swift_willThrow();
    v16 = v47;
    v19 = v41;
    v15 = v42;
LABEL_4:
    (*(void (**)(char *, uint64_t))(v16 + 8))(v19, v15);
    return result;
  }
  v29 = v13;
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v13, v6, v9);
  swift_getKeyPath();
  sub_1B2228338();
  swift_release();
  if ((a1[1] ^ (unint64_t)*a1) >= 0x4000)
  {
    swift_bridgeObjectRetain();
    v30 = sub_1B22291C0();
    v32 = v31;
    v34 = v33;
    v40 = v35;
    swift_bridgeObjectRelease_n();
    *a1 = v30;
    a1[1] = v32;
    v36 = v40;
    a1[2] = v34;
    a1[3] = v36;
  }
  sub_1B2228344();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v29, v9);
  (*(void (**)(char *, uint64_t))(v47 + 8))(v41, v42);
  v37 = v45;
  v38 = v46;
  result = v44;
  v39 = v43;
  *v43 = 14;
  *(__n128 *)(v39 + 8) = result;
  *((_QWORD *)v39 + 3) = v37;
  *((_QWORD *)v39 + 4) = v38;
  return result;
}

__n128 sub_1B1EE8C34@<Q0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  __n128 result;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  _BYTE *v44;
  __n128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v44 = a2;
  sub_1B1EF1D38();
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (char *)&v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x1E0DEBAF0];
  sub_1B1A02758(0, &qword_1ED4B7B78, MEMORY[0x1E0DEBAF0], MEMORY[0x1E0DF1F30]);
  v9 = v8;
  v10 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v11);
  v13 = (char *)&v41 - v12;
  sub_1B1A02758(0, &qword_1ED4B7B98, v7, MEMORY[0x1E0DF1F50]);
  v15 = v14;
  v16 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14, v17);
  v19 = (char *)&v41 - v18;
  sub_1B22282E4();
  v20 = v48;
  sub_1B2228314();
  if (v20)
    goto LABEL_4;
  v42 = v19;
  v43 = v15;
  v48 = v16;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v6, 1, v9) == 1)
  {
    sub_1B1EF1DA4((uint64_t)v6);
    v22 = *a1;
    v21 = a1[1];
    v24 = a1[2];
    v23 = a1[3];
    v45.n128_u64[0] = 0;
    v45.n128_u64[1] = 0xE000000000000000;
    sub_1B2229430();
    swift_bridgeObjectRelease();
    v45.n128_u64[0] = 0xD000000000000010;
    v45.n128_u64[1] = 0x80000001B23434F0;
    swift_bridgeObjectRetain();
    MEMORY[0x1B5E20388](v22, v21, v24, v23);
    sub_1B2228890();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v25 = sub_1B1EE43F8();
    v27 = v26;
    swift_bridgeObjectRelease();
    sub_1B1EF1CF4();
    swift_allocError();
    *v28 = v25;
    v28[1] = v27;
    swift_willThrow();
    v16 = v48;
    v19 = v42;
    v15 = v43;
LABEL_4:
    (*(void (**)(char *, uint64_t))(v16 + 8))(v19, v15);
    return result;
  }
  v30 = v13;
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v13, v6, v9);
  swift_getKeyPath();
  sub_1B2228338();
  swift_release();
  if ((a1[1] ^ (unint64_t)*a1) >= 0x4000)
  {
    swift_bridgeObjectRetain();
    v31 = sub_1B22291C0();
    v33 = v32;
    v35 = v34;
    v41 = v36;
    swift_bridgeObjectRelease_n();
    *a1 = v31;
    a1[1] = v33;
    v37 = v41;
    a1[2] = v35;
    a1[3] = v37;
  }
  sub_1B2228344();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v30, v9);
  (*(void (**)(char *, uint64_t))(v48 + 8))(v42, v43);
  v38 = v46;
  v39 = v47;
  result = v45;
  v40 = v44;
  *v44 = 15;
  *(__n128 *)(v40 + 8) = result;
  *((_QWORD *)v40 + 3) = v38;
  *((_QWORD *)v40 + 4) = v39;
  return result;
}

uint64_t sub_1B1EE8F9C(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD v33[2];
  uint64_t v34;
  uint64_t v35;

  sub_1B1EF1D38();
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = MEMORY[0x1E0DEBAF0];
  sub_1B1A02758(0, &qword_1ED4B7B78, MEMORY[0x1E0DEBAF0], MEMORY[0x1E0DF1F30]);
  v8 = v7;
  v9 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v10);
  v12 = (char *)v33 - v11;
  sub_1B1A02758(0, &qword_1ED4B7B98, v6, MEMORY[0x1E0DF1F50]);
  v14 = v13;
  v15 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13, v16);
  v18 = (char *)v33 - v17;
  sub_1B22282E4();
  v19 = v35;
  sub_1B2228314();
  if (v19)
    return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v18, v14);
  v33[1] = 0;
  v34 = v14;
  v35 = v15;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v5, 1, v8) == 1)
  {
    sub_1B1EF1DA4((uint64_t)v5);
    v20 = sub_1B1EE43F8();
    v22 = v21;
    sub_1B1EF1CF4();
    swift_allocError();
    *v23 = v20;
    v23[1] = v22;
    swift_willThrow();
    v14 = v34;
    v15 = v35;
    return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v18, v14);
  }
  v25 = v12;
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v12, v5, v8);
  swift_getKeyPath();
  sub_1B2228338();
  swift_release();
  if ((a1[1] ^ (unint64_t)*a1) >= 0x4000)
  {
    swift_bridgeObjectRetain();
    v26 = sub_1B22291C0();
    v28 = v27;
    v30 = v29;
    v33[0] = v31;
    swift_bridgeObjectRelease_n();
    *a1 = v26;
    a1[1] = v28;
    v32 = v33[0];
    a1[2] = v30;
    a1[3] = v32;
  }
  (*(void (**)(char *, uint64_t))(v9 + 8))(v25, v8);
  return (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v18, v34);
}

uint64_t sub_1B1EE9260(unsigned __int8 a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  char v13[8];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  unsigned __int8 v22;

  v3 = v1[1];
  v4 = v1[2];
  v5 = v1[3];
  if (v4 == v5 >> 1 || *(unsigned __int8 *)(v3 + 40 * v4) != a1)
  {
    v7 = v1[8];
    v15 = *v1;
    v16 = v3;
    v17 = v4;
    v18 = v5;
    v8 = *((_OWORD *)v1 + 3);
    v19 = *((_OWORD *)v1 + 2);
    v20 = v8;
    v21 = v7;
    sub_1B2229430();
    sub_1B2228890();
    v22 = a1;
    sub_1B22295EC();
    sub_1B2228890();
    sub_1B1EE6378();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    v9 = sub_1B1EE6458();
    v6 = v10;
    swift_bridgeObjectRelease();
    sub_1B1EF1A2C();
    swift_allocError();
    *v11 = v9;
    v11[1] = v6;
    swift_willThrow();
  }
  else
  {
    sub_1B1EE4374((uint64_t)v13);
    v6 = v14;
    sub_1B1EF1AD8((uint64_t)v13, (uint64_t)(v1 + 4));
  }
  return v6;
}

uint64_t sub_1B1EE93F8(unsigned __int8 a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;

  v2 = v1[2];
  if (v2 != v1[3] >> 1)
  {
    v3 = v1[1];
    if (*(unsigned __int8 *)(v3 + 40 * v2) == a1)
      return *(_QWORD *)(v3 + 40 * v2 + 8);
  }
  sub_1B2229430();
  sub_1B2228890();
  sub_1B22295EC();
  sub_1B2228890();
  sub_1B1EE6378();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  v5 = sub_1B1EE6458();
  v7 = v6;
  swift_bridgeObjectRelease();
  sub_1B1EF1A2C();
  swift_allocError();
  *v8 = v5;
  v8[1] = v7;
  return swift_willThrow();
}

uint64_t sub_1B1EE9554@<X0>(__int128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, _QWORD, char, _QWORD, char, _QWORD, _QWORD, __int128 *, _WORD, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  __int16 v31;
  uint64_t result;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  _OWORD v57[2];
  __int128 v58;
  __int128 v59;
  uint64_t v60;

  v7 = a1[3];
  v58 = a1[2];
  v59 = v7;
  v60 = *((_QWORD *)a1 + 8);
  v8 = a1[1];
  v57[0] = *a1;
  v57[1] = v8;
  v49 = v58;
  v50 = v7;
  v51 = v60;
  v47 = v57[0];
  v48 = v8;
  sub_1B1EF1B88((uint64_t)v57);
  v9 = sub_1B1EE9260(0xEu);
  if (!v3)
  {
    v13 = v9;
    v14 = v10;
    v15 = v11;
    v16 = v12;
    swift_bridgeObjectRetain();
    v17 = MEMORY[0x1B5E20388](v13, v14, v15, v16);
    v19 = v18;
    swift_bridgeObjectRelease();
    v20 = swift_conformsToProtocol2();
    if (v20)
      v21 = v20;
    else
      v21 = 0;
    if (v20)
      v22 = a2;
    else
      v22 = 0;
    if (v22)
    {
      v23 = *(_QWORD *)(v21 + 8);
      if (((*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(v23 + 16))(0, 1, v22, v23) & 1) != 0)
      {
        sub_1B1EF1BBC((uint64_t)v57);
        v44 = 0u;
        v45 = 0u;
        v24 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, _QWORD, char, _QWORD, char, _QWORD, _QWORD, __int128 *, _WORD, uint64_t, uint64_t))(v23 + 64);
        v42 = v23;
        v25 = MEMORY[0x1E0DEE9B8] + 8;
        v26 = v24(v17, v19, MEMORY[0x1E0DEE9B8] + 8, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, &v44, 0, v22, v42);
        swift_bridgeObjectRelease();
        sub_1B1AEA224((uint64_t)&v44, (uint64_t)&qword_1ED4BB150, v25, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))sub_1B1A02758);
LABEL_14:
        v28 = *(_QWORD *)(v26 + 16);
        v27 = *(_QWORD *)(v26 + 24);
        v29 = *(_QWORD *)(v26 + 48);
        v30 = *(_BYTE *)(v26 + 56);
        v31 = *(_WORD *)(v26 + 58);
        swift_bridgeObjectRetain();
        v43 = *(_OWORD *)(v26 + 32);
        swift_retain();
        result = swift_release();
        v33 = v51;
        v34 = v48;
        *a1 = v47;
        a1[1] = v34;
        v35 = v50;
        a1[2] = v49;
        a1[3] = v35;
        *((_QWORD *)a1 + 8) = v33;
        *(_QWORD *)a3 = v28;
        *(_QWORD *)(a3 + 8) = v27;
        *(_OWORD *)(a3 + 16) = v43;
        *(_QWORD *)(a3 + 32) = v29;
        *(_BYTE *)(a3 + 40) = v30;
        *(_WORD *)(a3 + 42) = v31;
        return result;
      }
      *((_QWORD *)&v45 + 1) = v22;
      v46 = v21;
      sub_1B1A137F4((uint64_t *)&v44);
      sub_1B1E2854C(v22, v23);
      if (sub_1B1E28574(v17, v19, v22, v23))
      {
        swift_bridgeObjectRelease();
        v26 = sub_1B1BF6D88(0, 1);
        swift_retain();
        swift_release();
        _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v44);
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_14;
      }
      _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v44);
      v36 = a1[3];
      v54 = a1[2];
      v55 = v36;
      v56 = *((_QWORD *)a1 + 8);
      v37 = a1[1];
      v52 = *a1;
      v53 = v37;
      *(_QWORD *)&v44 = 0;
      *((_QWORD *)&v44 + 1) = 0xE000000000000000;
      sub_1B2229430();
      swift_bridgeObjectRelease();
      *(_QWORD *)&v44 = 0xD000000000000012;
      *((_QWORD *)&v44 + 1) = 0x80000001B2343150;
      sub_1B2228890();
      swift_bridgeObjectRelease();
      sub_1B2228890();
    }
    else
    {
      swift_bridgeObjectRelease();
      sub_1B2229430();
      swift_bridgeObjectRelease();
      *(_QWORD *)&v44 = 0xD000000000000013;
      *((_QWORD *)&v44 + 1) = 0x80000001B2343130;
      sub_1B222A210();
      sub_1B2228890();
      swift_bridgeObjectRelease();
      sub_1B2228890();
    }
    v38 = sub_1B1EE6458();
    v40 = v39;
    swift_bridgeObjectRelease();
    sub_1B1EF1A2C();
    swift_allocError();
    *v41 = v38;
    v41[1] = v40;
    swift_willThrow();
  }
  swift_unknownObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B1EE9944(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  BOOL v17;
  uint64_t v18;
  _QWORD *v19;
  BOOL v20;
  _QWORD *v21;
  uint64_t v23;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_1B1AED5E4(0, (unint64_t *)&unk_1ED4BA828, MEMORY[0x1E0DEA968], MEMORY[0x1E0DEA978], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEC268]);
    v3 = sub_1B22293F4();
    v4 = 0;
    v5 = v3 + 56;
    v23 = a1 + 32;
    while (1)
    {
      v6 = (uint64_t *)(v23 + 16 * v4);
      v8 = *v6;
      v7 = v6[1];
      sub_1B222A06C();
      swift_bridgeObjectRetain();
      sub_1B2228824();
      v9 = sub_1B222A0C0();
      v10 = -1 << *(_BYTE *)(v3 + 32);
      v11 = v9 & ~v10;
      v12 = v11 >> 6;
      v13 = *(_QWORD *)(v5 + 8 * (v11 >> 6));
      v14 = 1 << v11;
      if (((1 << v11) & v13) == 0)
        goto LABEL_19;
      v15 = *(_QWORD *)(v3 + 48);
      v16 = (_QWORD *)(v15 + 16 * v11);
      v17 = *v16 == v8 && v16[1] == v7;
      if (!v17 && (sub_1B2229D24() & 1) == 0)
        break;
LABEL_3:
      swift_bridgeObjectRelease();
LABEL_4:
      if (++v4 == v1)
        return v3;
    }
    v18 = ~v10;
    while (1)
    {
      v11 = (v11 + 1) & v18;
      v12 = v11 >> 6;
      v13 = *(_QWORD *)(v5 + 8 * (v11 >> 6));
      v14 = 1 << v11;
      if ((v13 & (1 << v11)) == 0)
        break;
      v19 = (_QWORD *)(v15 + 16 * v11);
      v20 = *v19 == v8 && v19[1] == v7;
      if (v20 || (sub_1B2229D24() & 1) != 0)
        goto LABEL_3;
    }
LABEL_19:
    *(_QWORD *)(v5 + 8 * v12) = v14 | v13;
    v21 = (_QWORD *)(*(_QWORD *)(v3 + 48) + 16 * v11);
    *v21 = v8;
    v21[1] = v7;
    ++*(_QWORD *)(v3 + 16);
    goto LABEL_4;
  }
  return MEMORY[0x1E0DEE9E8];
}

uint64_t sub_1B1EE9AF8(uint64_t *a1)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _BYTE v45[40];
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;

  v1 = *a1;
  v2 = a1[2];
  v3 = a1[4];
  v4 = a1[5];
  v6 = a1[6];
  v5 = a1[7];
  v39 = *a1;
  v40 = a1[1];
  v41 = a1[3];
  v42 = v3;
  v43 = v6;
  v44 = a1[8];
  if (v2 == v41 >> 1 || *(_BYTE *)(a1[1] + 40 * v2) != 1)
  {
    v11 = a1[8];
    v16 = a1[3];
    v17 = a1[1];
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    v13 = v3;
    v9 = v2;
    v12 = v4;
    v14 = v6;
    v10 = v5;
    v15 = v41 >> 1;
    v7 = v17;
    v8 = v16;
    if (v2 == v41 >> 1)
    {
LABEL_9:
      v15 = v9;
LABEL_10:
      v46 = v1;
      v47 = v7;
      v48 = v15;
      v49 = v8;
      v50 = v13;
      v51 = v12;
      v52 = v14;
      v53 = v10;
      v54 = v11;
      sub_1B2229430();
      sub_1B2228890();
      v55 = 14;
      sub_1B22295EC();
      sub_1B2228890();
      sub_1B1EE6378();
      sub_1B2228890();
      swift_bridgeObjectRelease();
      v24 = sub_1B1EE6458();
      v26 = v25;
      swift_bridgeObjectRelease();
      sub_1B1EF1A2C();
      swift_allocError();
      *v27 = v24;
      v27[1] = v26;
      swift_willThrow();
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    sub_1B1EE66E0((uint64_t)v45);
    sub_1B1EF1B60((uint64_t)v45);
    sub_1B2228890();
    v1 = v39;
    v7 = v40;
    v9 = v2;
    v8 = v41;
    v10 = v5;
    v11 = v44;
    v13 = v42;
    v12 = v4;
    v14 = v43;
    v15 = v41 >> 1;
    if (v2 == v41 >> 1)
      goto LABEL_9;
  }
  if (*(_BYTE *)(v7 + 40 * v9) != 14)
    goto LABEL_9;
  v35 = v1;
  v36 = v8;
  v18 = (_QWORD *)(v7 + 40 * v9);
  v19 = v18[1];
  v20 = v18[2];
  v22 = v18[3];
  v21 = v18[4];
  v23 = v9 + 1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v37 = v21;
  sub_1B1B25B50();
  sub_1B2228878();
  if (v9 + 1 != v15)
  {
    if (*(_BYTE *)(v7 + 40 * v23) == 2)
    {
      v29 = (_QWORD *)(v7 + 40 * v23);
      v14 = v29[2];
      v33 = v29[1];
      v10 = v29[3];
      v11 = v29[4];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      sub_1B2228890();
      if (v9 + 2 == v15)
      {
        v13 = 2;
      }
      else
      {
        if (*(_BYTE *)(v7 + 40 * (v9 + 2)) == 14)
        {
          v30 = v7 + 40 * v9 + 88;
          while (1)
          {
            v19 = *(_QWORD *)v30;
            v20 = *(_QWORD *)(v30 + 8);
            v22 = *(_QWORD *)(v30 + 16);
            v31 = *(_QWORD *)(v30 + 24);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            sub_1B2228878();
            if (v15 - 3 == v9)
            {
              v37 = v31;
              goto LABEL_15;
            }
            if (*(_BYTE *)(v30 + 32) != 2)
              break;
            v14 = *(_QWORD *)(v30 + 48);
            v34 = *(_QWORD *)(v30 + 40);
            v10 = *(_QWORD *)(v30 + 56);
            v11 = *(_QWORD *)(v30 + 64);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            sub_1B2228890();
            if (v15 - 4 == v9)
              goto LABEL_23;
            v32 = *(unsigned __int8 *)(v30 + 72);
            v30 += 80;
            v9 += 2;
            if (v32 != 14)
            {
              v15 = v9 + 2;
LABEL_23:
              v1 = v35;
              v8 = v36;
              v12 = v34;
              v13 = 2;
              goto LABEL_10;
            }
          }
          v37 = v31;
          v15 = v9 + 3;
          goto LABEL_15;
        }
        v13 = 2;
        v15 = v9 + 2;
      }
      v8 = v36;
      v12 = v33;
      goto LABEL_10;
    }
    v15 = v9 + 1;
  }
LABEL_15:
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  *a1 = v35;
  a1[1] = v7;
  a1[2] = v15;
  a1[3] = v36;
  a1[4] = 14;
  a1[5] = v19;
  a1[6] = v20;
  a1[7] = v22;
  a1[8] = v37;
  return 0;
}

uint64_t sub_1B1EE9FBC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  _QWORD *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int8 *v27;
  uint64_t *v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  _BYTE v50[40];
  _BYTE v51[40];
  _OWORD v52[2];
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;

  v3 = *(_OWORD *)(a1 + 16);
  v52[0] = *(_OWORD *)a1;
  v52[1] = v3;
  v4 = *(_OWORD *)(a1 + 48);
  v53 = *(_OWORD *)(a1 + 32);
  v54 = v4;
  v55 = *(_QWORD *)(a1 + 64);
  v47 = v53;
  v48 = v4;
  v49 = v55;
  v45 = v52[0];
  v46 = v3;
  if ((_QWORD)v3 == *((_QWORD *)&v3 + 1) >> 1)
  {
LABEL_6:
    sub_1B1EF1B88((uint64_t)v52);
    sub_1B1EF1B88((uint64_t)v52);
    sub_1B2229430();
    swift_bridgeObjectRelease();
    sub_1B1EF1B88((uint64_t)v52);
    sub_1B1EE6378();
    sub_1B1EF1BBC((uint64_t)v52);
    sub_1B2228890();
    swift_bridgeObjectRelease();
    v1 = sub_1B1EE6458();
    v14 = v13;
    swift_bridgeObjectRelease();
    sub_1B1EF1BBC((uint64_t)v52);
    sub_1B1EF1A2C();
    swift_allocError();
    *v15 = v1;
    v15[1] = v14;
    swift_willThrow();
LABEL_7:
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    return v1;
  }
  v5 = v2;
  v7 = (_QWORD *)(*((_QWORD *)&v52[0] + 1) + 40 * v3);
  v8 = *(unsigned __int8 *)v7;
  v9 = v7[1];
  v10 = v7[2];
  v12 = v7[3];
  v11 = v7[4];
  swift_bridgeObjectRetain();
  if (v8 == 1)
  {
    sub_1B1EF1B88((uint64_t)v52);
    sub_1B1EE9AF8((uint64_t *)&v45);
    if (!v5)
    {
      sub_1B1EF1BBC((uint64_t)v52);
      v9 = sub_1B2228974();
      v10 = v16;
      v12 = v17;
      v19 = v18;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v11 = v19;
      goto LABEL_26;
    }
    goto LABEL_7;
  }
  if (v8 != 14)
  {
    if (v8 == 15)
    {
      sub_1B1EE66E0((uint64_t)v50);
      sub_1B1EF1B60((uint64_t)v50);
      goto LABEL_26;
    }
    goto LABEL_6;
  }
  sub_1B1EE66E0((uint64_t)v51);
  sub_1B1EF1B60((uint64_t)v51);
  if ((_QWORD)v46 == *((_QWORD *)&v46 + 1) >> 1
    || (v20 = *((_QWORD *)&v45 + 1), *(_BYTE *)(*((_QWORD *)&v45 + 1) + 40 * v46) != 12))
  {
    swift_bridgeObjectRetain();
    goto LABEL_25;
  }
  v21 = (_QWORD *)(*((_QWORD *)&v45 + 1) + 40 * v46);
  v56 = v21[1];
  v22 = v21[4];
  v43 = v21[3];
  v44 = v21[2];
  v23 = v46 + 1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v24 = 12;
  v42 = v46 + 1;
  v25 = *((_QWORD *)&v46 + 1) >> 1;
  while (1)
  {
    if (v23 == v25)
    {
      swift_bridgeObjectRelease();
      v24 = 0;
      v56 = 0;
      v43 = 0;
      v44 = 0;
      v22 = 0;
      v23 = v25;
      goto LABEL_17;
    }
    v26 = v20;
    v27 = (unsigned __int8 *)(v20 + 40 * v23);
    v30 = *v27;
    v28 = (uint64_t *)(v27 + 8);
    v29 = v30;
    if (v30 == 16)
      break;
    v56 = *v28;
    v31 = v28[3];
    v43 = v28[2];
    v44 = v28[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    ++v23;
    v24 = v29;
    v22 = v31;
    v42 = v23;
    v20 = v26;
    v25 = *((_QWORD *)&v46 + 1) >> 1;
LABEL_17:
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    if ((_DWORD)v24 == 16)
    {
      v26 = v20;
      v33 = v44;
      goto LABEL_23;
    }
    if ((_DWORD)v24 == 13)
    {
      *(_QWORD *)&v47 = v24;
      *((_QWORD *)&v47 + 1) = v56;
      *(_QWORD *)&v48 = v44;
      *((_QWORD *)&v48 + 1) = v43;
      v49 = v22;
      *((_QWORD *)&v45 + 1) = v20;
      v32 = v42;
      goto LABEL_24;
    }
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v33 = v44;
LABEL_23:
  *(_QWORD *)&v47 = v24;
  *((_QWORD *)&v47 + 1) = v56;
  *(_QWORD *)&v48 = v33;
  *((_QWORD *)&v48 + 1) = v43;
  v49 = v22;
  *((_QWORD *)&v45 + 1) = v26;
  v32 = v42;
LABEL_24:
  *(_QWORD *)&v46 = v32;
LABEL_25:
  swift_bridgeObjectRetain();
  v9 = sub_1B2228974();
  v10 = v34;
  v12 = v35;
  v37 = v36;
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  v11 = v37;
LABEL_26:
  v38 = v49;
  v39 = v46;
  *(_OWORD *)a1 = v45;
  *(_OWORD *)(a1 + 16) = v39;
  v40 = v48;
  *(_OWORD *)(a1 + 32) = v47;
  *(_OWORD *)(a1 + 48) = v40;
  *(_QWORD *)(a1 + 64) = v38;
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  v1 = MEMORY[0x1B5E20388](v9, v10, v12, v11);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t sub_1B1EEA4A0(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  _QWORD *v36;
  unint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  unint64_t v41;
  unint64_t v42;
  __int128 v43;
  uint64_t v44;
  _BYTE *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  __int128 v60;
  uint64_t v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  _BYTE v66[32];
  uint64_t v67;
  __int128 v68;
  __int128 v69;
  _OWORD v70[2];
  uint64_t v71;
  __int128 v72;
  __int128 v73;
  _OWORD v74[2];
  uint64_t v75;
  _OWORD v76[2];
  _OWORD v77[2];
  uint64_t v78;
  _BYTE v79[40];
  _BYTE v80[56];
  _QWORD *v81;

  if ((a2 & 1) != 0)
  {
    v5 = *(_QWORD *)(a1 + 16);
    v6 = *(_QWORD *)(a1 + 24);
    if (v5 == v6 >> 1)
      return MEMORY[0x1E0DEE9D8];
    v7 = *(_QWORD *)(a1 + 8);
    if (*(_BYTE *)(v7 + 40 * v5) != 8)
      return MEMORY[0x1E0DEE9D8];
  }
  else
  {
    v7 = *(_QWORD *)(a1 + 8);
    v5 = *(_QWORD *)(a1 + 16);
    v6 = *(_QWORD *)(a1 + 24);
  }
  v9 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)&v68 = *(_QWORD *)a1;
  *((_QWORD *)&v68 + 1) = v7;
  *(_QWORD *)&v69 = v5;
  *((_QWORD *)&v69 + 1) = v6;
  v10 = *(_OWORD *)(a1 + 48);
  v70[0] = *(_OWORD *)(a1 + 32);
  v70[1] = v10;
  v71 = v9;
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  sub_1B1EE9260(8u);
  if (v3)
    goto LABEL_7;
  v58 = a1;
  v81 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  while (1)
  {
    v76[0] = v68;
    v76[1] = v69;
    v77[0] = v70[0];
    v77[1] = v70[1];
    v78 = v71;
    *(_OWORD *)v66 = v70[0];
    *(_OWORD *)&v66[16] = v70[1];
    v67 = v71;
    v64 = v68;
    v65 = v69;
    v11 = *((_QWORD *)&v68 + 1);
    v12 = v69;
    v13 = *((_QWORD *)&v69 + 1) >> 1;
    if ((_QWORD)v69 == *((_QWORD *)&v69 + 1) >> 1 || *(_BYTE *)(*((_QWORD *)&v68 + 1) + 40 * v69) != 14)
    {
      sub_1B1EF1B88((uint64_t)v76);
      sub_1B1EF1B88((uint64_t)v76);
      sub_1B2229430();
      sub_1B2228890();
      sub_1B22295EC();
      sub_1B2228890();
      if ((_QWORD)v12 != v13)
      {
        swift_bridgeObjectRetain();
        v25 = sub_1B2228974();
        v27 = v26;
        v29 = v28;
        v31 = v30;
        swift_bridgeObjectRelease();
        MEMORY[0x1B5E20388](v25, v27, v29, v31);
        swift_bridgeObjectRelease();
      }
      sub_1B2228890();
      swift_bridgeObjectRelease();
      sub_1B1EE6458();
      swift_bridgeObjectRelease();
      sub_1B1EF1BBC((uint64_t)v76);
      swift_bridgeObjectRelease();
      v19 = 0;
      v21 = 0;
    }
    else
    {
      v62 = *(_QWORD *)&v76[0];
      v14 = (_QWORD *)(*((_QWORD *)&v68 + 1) + 40 * v69);
      v15 = v14[2];
      v59 = v14[1];
      v17 = v14[3];
      v16 = v14[4];
      sub_1B1A18378((uint64_t)v77, (uint64_t)v79, (unint64_t *)&unk_1ED4B9F40, (uint64_t)&type metadata for Lexer.Token);
      v18 = v12 + 1;
      sub_1B1EF1B88((uint64_t)v76);
      sub_1B1EF1B88((uint64_t)v76);
      swift_bridgeObjectRetain();
      sub_1B1EF1B60((uint64_t)v79);
      swift_bridgeObjectRetain();
      v19 = MEMORY[0x1B5E20388](v59, v15, v17, v16);
      v21 = v20;
      swift_bridgeObjectRelease();
      if ((_QWORD)v12 + 1 == v13 || *(_BYTE *)(v11 + 40 * v18) != 7)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_unknownObjectRelease();
        v19 = 0;
        v21 = 0;
      }
      else
      {
        v22 = v11 + 40 * v18;
        v60 = *(_OWORD *)(v22 + 8);
        v23 = *(_QWORD *)(v22 + 24);
        v24 = *(_QWORD *)(v22 + 32);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        sub_1B1EF1BBC((uint64_t)v76);
        *(_QWORD *)&v64 = v62;
        *((_QWORD *)&v64 + 1) = v11;
        *(_QWORD *)&v65 = v12 + 2;
        *((_QWORD *)&v65 + 1) = *((_QWORD *)&v12 + 1);
        *(_QWORD *)v66 = 7;
        *(_OWORD *)&v66[8] = v60;
        *(_QWORD *)&v66[24] = v23;
        v67 = v24;
      }
    }
    v32 = sub_1B1EE9FBC((uint64_t)&v64);
    v34 = v33;
    sub_1B1EF1BBC((uint64_t)v76);
    v74[0] = *(_OWORD *)v66;
    v74[1] = *(_OWORD *)&v66[16];
    v75 = v67;
    v72 = v64;
    v73 = v65;
    v70[0] = *(_OWORD *)v66;
    v70[1] = *(_OWORD *)&v66[16];
    v71 = v67;
    v68 = v64;
    v69 = v65;
    if (v21)
      break;
    v40 = v81;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v40 = sub_1B1C65920(0, v40[2] + 1, 1, v40);
    v42 = v40[2];
    v41 = v40[3];
    if (v42 >= v41 >> 1)
      v40 = sub_1B1C65920(v41 > 1, v42 + 1, 1, v40);
    v40[2] = v42 + 1;
    v81 = v40;
    v39 = &v40[4 * v42];
    v39[4] = v19;
    v39[5] = 0;
LABEL_30:
    v39[6] = v32;
    v39[7] = v34;
    v43 = v73;
    if ((_QWORD)v73 == *((_QWORD *)&v73 + 1) >> 1
      || (v44 = *((_QWORD *)&v72 + 1), v45 = (_BYTE *)(*((_QWORD *)&v72 + 1) + 40 * v73), *v45))
    {
      sub_1B1EE9260(9u);
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
      v51 = v71;
      v52 = v69;
      *(_OWORD *)v58 = v68;
      *(_OWORD *)(v58 + 16) = v52;
      v53 = v70[1];
      *(_OWORD *)(v58 + 32) = v70[0];
      *(_OWORD *)(v58 + 48) = v53;
      *(_QWORD *)(v58 + 64) = v51;
      return (uint64_t)v81;
    }
    v46 = v72;
    sub_1B1A18378((uint64_t)v74, (uint64_t)v80, (unint64_t *)&unk_1ED4B9F40, (uint64_t)&type metadata for Lexer.Token);
    v47 = *v45;
    v48 = v44 + 40 * v43;
    v63 = *(_OWORD *)(v48 + 8);
    v50 = *(_QWORD *)(v48 + 24);
    v49 = *(_QWORD *)(v48 + 32);
    swift_bridgeObjectRetain();
    sub_1B1EF1B60((uint64_t)v80);
    *(_QWORD *)&v68 = v46;
    *((_QWORD *)&v68 + 1) = v44;
    *(_QWORD *)&v69 = v43 + 1;
    *((_QWORD *)&v69 + 1) = *((_QWORD *)&v43 + 1);
    *(_QWORD *)&v70[0] = v47;
    *(_OWORD *)((char *)v70 + 8) = v63;
    *((_QWORD *)&v70[1] + 1) = v50;
    v71 = v49;
  }
  v35 = sub_1B1B0F1AC(v19, v21, a3);
  v36 = v81;
  if ((v35 & 1) != 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v36 = sub_1B1C65920(0, v36[2] + 1, 1, v36);
    v38 = v36[2];
    v37 = v36[3];
    if (v38 >= v37 >> 1)
      v36 = sub_1B1C65920(v37 > 1, v38 + 1, 1, v36);
    v36[2] = v38 + 1;
    v81 = v36;
    v39 = &v36[4 * v38];
    v39[4] = v19;
    v39[5] = v21;
    goto LABEL_30;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_QWORD *)&v64 = 0;
  *((_QWORD *)&v64 + 1) = 0xE000000000000000;
  sub_1B1EF1B88((uint64_t)&v72);
  sub_1B2229430();
  swift_bridgeObjectRelease();
  *(_QWORD *)&v64 = 0x746E656D75677261;
  *((_QWORD *)&v64 + 1) = 0xEA00000000002720;
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  v54 = sub_1B1EE6458();
  v56 = v55;
  swift_bridgeObjectRelease();
  sub_1B1EF1BBC((uint64_t)&v72);
  sub_1B1EF1A2C();
  swift_allocError();
  *v57 = v54;
  v57[1] = v56;
  swift_willThrow();
LABEL_7:
  swift_unknownObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B1EEABE0@<X0>(uint64_t a1@<X0>, char a2@<W1>, int a3@<W2>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t result;
  uint64_t v39;
  uint64_t v40;
  __int16 v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  char v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  __int128 v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  uint64_t v85;
  _BYTE v86[40];
  _OWORD v87[2];
  uint64_t v88;
  char v89;
  __int16 v90;
  _BYTE v91[48];
  uint64_t v92;
  uint64_t v93;
  __int128 v94;
  uint64_t v95;
  char v96;
  unsigned __int16 v97;
  char v98;
  __int128 v99;
  _OWORD v100[4];
  uint64_t v101;
  _OWORD v102[4];
  uint64_t v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  uint64_t v114;
  uint64_t v115;

  v5 = v4;
  v10 = sub_1B2227DA4();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v12);
  v14 = (char *)&v70 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *(_OWORD *)(a1 + 48);
  v106 = *(_OWORD *)(a1 + 32);
  v107 = v15;
  v108 = *(_QWORD *)(a1 + 64);
  v16 = *(_OWORD *)(a1 + 16);
  v104 = *(_OWORD *)a1;
  v105 = v16;
  v83 = v106;
  v84 = v15;
  v85 = v108;
  v81 = v104;
  v82 = v16;
  if ((a2 & 1) != 0)
  {
    if ((_QWORD)v105 == *((_QWORD *)&v105 + 1) >> 1
      || (*(unsigned __int8 *)(*((_QWORD *)&v104 + 1) + 40 * v105) | 4) != 5)
    {
      sub_1B1EF1B88((uint64_t)&v104);
    }
    else
    {
      sub_1B1EF1B88((uint64_t)&v104);
      sub_1B1EE66E0((uint64_t)v86);
      sub_1B1EF1B60((uint64_t)v86);
    }
    sub_1B1EE9260(0xEu);
    if (v4)
      goto LABEL_35;
    sub_1B1EE9260(2u);
    v5 = 0;
    LODWORD(v77) = a3;
    v78 = v11;
    v115 = v10;
  }
  else
  {
    LODWORD(v77) = a3;
    v78 = v11;
    v115 = v10;
    sub_1B1EF1B88((uint64_t)&v104);
  }
  v17 = sub_1B1EE9260(0xEu);
  if (!v5)
  {
    v21 = v17;
    v22 = v18;
    v23 = v19;
    v24 = v20;
    v76 = a4;
    swift_bridgeObjectRetain();
    v25 = MEMORY[0x1B5E20388](v21, v22, v23, v24);
    v27 = v26;
    swift_bridgeObjectRelease();
    v28 = *((_QWORD *)&v81 + 1);
    v29 = v82;
    if ((_QWORD)v82 == *((_QWORD *)&v82 + 1) >> 1 || *(_BYTE *)(*((_QWORD *)&v81 + 1) + 40 * v82) != 2)
    {
      v77 = v81;
      sub_1B1C349A0(v25, v27, (uint64_t)v91);
      sub_1B1A18378((uint64_t)v91, (uint64_t)&v92, (unint64_t *)&unk_1ED4B8880, (uint64_t)&type metadata for ScriptKeyPath);
      if (v93)
      {
        v74 = v94;
        v72 = v95;
        v73 = v92;
        v98 = v96;
        v71 = v97;
        v75 = v93;
        swift_bridgeObjectRelease();
        v109 = v77;
        v110 = v28;
        v111 = v29;
        v112 = v83;
        v113 = v84;
        v114 = v85;
        swift_bridgeObjectRetain();
        swift_unknownObjectRetain();
        v32 = sub_1B1EE678C();
        v34 = v33;
        swift_bridgeObjectRelease();
        swift_unknownObjectRelease();
        sub_1B1EF1BBC((uint64_t)&v104);
        v79 = v32;
        v80 = v34;
        sub_1B2227D5C();
        sub_1B1A06460();
        v35 = sub_1B2229220();
        v37 = v36;
        (*(void (**)(char *, uint64_t))(v78 + 8))(v14, v115);
        result = swift_bridgeObjectRelease();
        v39 = v72;
        v40 = v73;
        v41 = v71;
        v42 = v75;
        v43 = 0;
        v44 = v85;
        v45 = v82;
        *(_OWORD *)a1 = v81;
        *(_OWORD *)(a1 + 16) = v45;
        v46 = v84;
        *(_OWORD *)(a1 + 32) = v83;
        *(_OWORD *)(a1 + 48) = v46;
        v47 = v74;
        *(_QWORD *)(a1 + 64) = v44;
        LOBYTE(v14) = 1;
        v48 = v98;
LABEL_17:
        v49 = v76;
        *v76 = v40;
        v49[1] = v42;
        *((_OWORD *)v49 + 1) = v47;
        v49[4] = v39;
        *((_BYTE *)v49 + 40) = v48;
        *((_WORD *)v49 + 21) = v41;
        v49[6] = v35;
        v49[7] = v37;
        *((_BYTE *)v49 + 64) = v43;
        *((_BYTE *)v49 + 65) = (_BYTE)v14;
        return result;
      }
      v79 = 0;
      v80 = 0xE000000000000000;
      sub_1B2229430();
      swift_bridgeObjectRelease();
      v79 = 0xD000000000000017;
      v80 = 0x80000001B2343090;
      sub_1B2228890();
    }
    else
    {
      v30 = 0x73676E69646E6942;
      v31 = v27;
      if (v25 == 0x73676E69646E6962 && v27 == 0xE800000000000000)
      {
        v31 = 0xE800000000000000;
        swift_bridgeObjectRelease();
      }
      else if ((sub_1B2229D24() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        v31 = 0xE800000000000000;
      }
      else
      {
        v30 = v25;
      }
      if (qword_1ED4B7760 != -1)
        swift_once();
      swift_retain();
      v50 = sub_1B1A0608C(v30, v31, 0, 1);
      swift_release();
      if (v50)
      {
        if (!swift_conformsToProtocol2())
          v50 = 0;
        if (v50)
        {
          v51 = swift_conformsToProtocol2() ? v50 : 0;
          if (v51)
          {
            swift_bridgeObjectRelease();
            sub_1B1EE9260(2u);
            sub_1B1EE9554(&v81, v51, (uint64_t)v87);
            v102[2] = v83;
            v102[3] = v84;
            v103 = v85;
            v102[0] = v81;
            v102[1] = v82;
            sub_1B1EF1B88((uint64_t)v102);
            v52 = sub_1B1EE678C();
            v54 = v53;
            sub_1B1EF1BBC((uint64_t)v102);
            v79 = v52;
            v80 = v54;
            sub_1B2227D5C();
            sub_1B1A06460();
            v35 = sub_1B2229220();
            v37 = v55;
            (*(void (**)(char *, uint64_t))(v78 + 8))(v14, v115);
            swift_bridgeObjectRelease();
            v100[2] = v83;
            v100[3] = v84;
            v101 = v85;
            v100[0] = v81;
            v100[1] = v82;
            sub_1B1EF1B88((uint64_t)v100);
            v56 = sub_1B1EE9944((uint64_t)&unk_1E6376F08);
            swift_arrayDestroy();
            v61 = sub_1B1EEA4A0((uint64_t)&v81, 1, v56);
            swift_bridgeObjectRelease();
            if (!*(_QWORD *)(v61 + 16))
            {
              v43 = 0;
              LOBYTE(v14) = 1;
              goto LABEL_41;
            }
            if ((v77 & 1) != 0)
            {
              v62 = sub_1B1EE5FD8(v61);
              v43 = v62;
              LODWORD(v14) = (v62 >> 8) & 1;
LABEL_41:
              sub_1B1EF1BBC((uint64_t)v100);
              swift_bridgeObjectRelease();
              swift_unknownObjectRelease();
              result = swift_bridgeObjectRelease();
              v67 = v85;
              v68 = v82;
              *(_OWORD *)a1 = v81;
              *(_OWORD *)(a1 + 16) = v68;
              v69 = v84;
              *(_OWORD *)(a1 + 32) = v83;
              *(_OWORD *)(a1 + 48) = v69;
              *(_QWORD *)(a1 + 64) = v67;
              v41 = v90;
              v39 = v88;
              v47 = v87[1];
              v42 = *((_QWORD *)&v87[0] + 1);
              v40 = *(_QWORD *)&v87[0];
              v48 = v89;
              goto LABEL_17;
            }
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v63 = sub_1B1EE6458();
            v65 = v64;
            sub_1B1EF1A2C();
            swift_allocError();
            *v66 = v63;
            v66[1] = v65;
            swift_willThrow();
            sub_1B1EF1BBC((uint64_t)v100);
            v99 = v87[0];
            sub_1B1BA80C0((uint64_t)&v99);
            swift_release();
            goto LABEL_35;
          }
        }
      }
      v79 = 0;
      v80 = 0xE000000000000000;
      sub_1B2229430();
      swift_bridgeObjectRelease();
      v79 = 0xD000000000000018;
      v80 = 0x80000001B23430B0;
      sub_1B2228890();
    }
    swift_bridgeObjectRelease();
    sub_1B2228890();
    v57 = sub_1B1EE6458();
    v59 = v58;
    swift_bridgeObjectRelease();
    sub_1B1EF1A2C();
    swift_allocError();
    *v60 = v57;
    v60[1] = v59;
    swift_willThrow();
  }
LABEL_35:
  swift_unknownObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B1EEB438(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  _QWORD *v6;

  v2 = a1 == 0x6C61636F6CLL && a2 == 0xE500000000000000;
  if (v2 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x646C726F77 && a2 == 0xE500000000000000 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x656E656373 && a2 == 0xE500000000000000 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x646C726F777263 && a2 == 0xE700000000000000 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 2003134838 && a2 == 0xE400000000000000 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    sub_1B2229430();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    sub_1B1EF1A2C();
    swift_allocError();
    *v6 = 39;
    v6[1] = 0xE100000000000000;
    return swift_willThrow();
  }
}

uint64_t sub_1B1EEB6C8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  uint64_t v19;
  uint64_t v20;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return MEMORY[0x1E0DEE9E8];
  sub_1B19F8E54(0, &qword_1EEF60A00, (uint64_t (*)(void))sub_1B1EF1C8C, (uint64_t)&type metadata for MetalScriptCodeGen.FunctionKind, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEC268]);
  v3 = sub_1B22293F4();
  v4 = 0;
  v5 = v3 + 56;
  v19 = a1 + 32;
  v20 = v1;
  while (2)
  {
    v6 = *(unsigned __int8 *)(v19 + v4);
    sub_1B222A06C();
    sub_1B2228824();
    swift_bridgeObjectRelease();
    v7 = sub_1B222A0C0();
    v8 = ~(-1 << *(_BYTE *)(v3 + 32));
    v9 = v7 & v8;
    v10 = (v7 & (unint64_t)v8) >> 6;
    v11 = *(_QWORD *)(v5 + 8 * v10);
    v12 = 1 << (v7 & v8);
    if ((v12 & v11) == 0)
    {
LABEL_3:
      *(_QWORD *)(v5 + 8 * v10) = v12 | v11;
      *(_BYTE *)(*(_QWORD *)(v3 + 48) + v9) = v6;
      ++*(_QWORD *)(v3 + 16);
      goto LABEL_4;
    }
    while (!*(_BYTE *)(*(_QWORD *)(v3 + 48) + v9))
    {
      v13 = 0xE600000000000000;
      v14 = 0x786574726576;
      if (v6)
        goto LABEL_11;
LABEL_20:
      v16 = 0xE600000000000000;
      if (v14 == 0x786574726576)
        goto LABEL_21;
LABEL_22:
      v17 = sub_1B2229D24();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v17 & 1) != 0)
        goto LABEL_4;
      v9 = (v9 + 1) & v8;
      v10 = v9 >> 6;
      v11 = *(_QWORD *)(v5 + 8 * (v9 >> 6));
      v12 = 1 << v9;
      if ((v11 & (1 << v9)) == 0)
        goto LABEL_3;
    }
    if (*(_BYTE *)(*(_QWORD *)(v3 + 48) + v9) == 1)
    {
      v13 = 0xE800000000000000;
      v14 = 0x746E656D67617266;
      if (v6)
        goto LABEL_11;
      goto LABEL_20;
    }
    v13 = 0xE700000000000000;
    v14 = 0x657475706D6F63;
    if (!v6)
      goto LABEL_20;
LABEL_11:
    if (v6 == 1)
      v15 = 0x746E656D67617266;
    else
      v15 = 0x657475706D6F63;
    if (v6 == 1)
      v16 = 0xE800000000000000;
    else
      v16 = 0xE700000000000000;
    if (v14 != v15)
      goto LABEL_22;
LABEL_21:
    if (v13 != v16)
      goto LABEL_22;
    swift_bridgeObjectRelease_n();
LABEL_4:
    if (++v4 != v20)
      continue;
    return v3;
  }
}

unint64_t sub_1B1EEB958(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v5;
  __int128 v6;
  _OWORD *v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  unsigned __int8 v60;
  unint64_t v61;
  __int128 v62;
  unint64_t v63;
  __int128 v64;
  uint64_t v65;
  __int128 v66;
  _OWORD v67[4];
  uint64_t v68;
  int v69;
  int v70;

  v5 = swift_allocObject();
  v6 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v5 + 16) = *(_OWORD *)a1;
  v7 = (_OWORD *)(v5 + 16);
  v8 = *(_QWORD *)(a1 + 64);
  v9 = *(_OWORD *)(a1 + 32);
  v10 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v5 + 32) = v6;
  *(_OWORD *)(v5 + 48) = v9;
  *(_OWORD *)(v5 + 64) = v10;
  *(_QWORD *)(v5 + 80) = v8;
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  v11 = sub_1B1EE9260(0xEu);
  if (v2)
    goto LABEL_2;
  v15 = v14;
  v70 = a2;
  v61 = v11;
  v63 = v12;
  v65 = v13;
  swift_bridgeObjectRetain();
  v16 = sub_1B1EE9944((uint64_t)&unk_1E6376E68);
  swift_arrayDestroy();
  v17 = sub_1B1EEA4A0((uint64_t)v7, 1, v16);
  swift_bridgeObjectRelease();
  v18 = *(_QWORD *)(v17 + 16);
  if (v18)
  {
    v58 = v15;
    v59 = v17;
    v19 = (uint64_t *)(v17 + 56);
    do
    {
      v20 = *(v19 - 2);
      if (v20)
      {
        v21 = *(v19 - 1);
        v22 = *v19;
        v23 = *(v19 - 3) == 0x6563617073 && v20 == 0xE500000000000000;
        if (v23 || (sub_1B2229D24() & 1) != 0)
        {
          swift_bridgeObjectRetain();
          v69 = sub_1B1EEB438(v21, v22);
          goto LABEL_15;
        }
      }
      v19 += 4;
      --v18;
    }
    while (v18);
    v69 = 5;
LABEL_15:
    v15 = v58;
    v17 = v59;
  }
  else
  {
    v69 = 5;
  }
  if ((sub_1B1ADE3D8(29796, 0xE200000000000000, v61, v63, v65, v15) & 1) != 0)
  {
    v24 = MEMORY[0x1E0DEE9E8];
    v25 = 0;
LABEL_20:
    v8 = sub_1B1EE6D54(v25, v24, v17, v5, v61, v63, v65, v15);
LABEL_33:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    v64 = *(_OWORD *)(v5 + 48);
    v66 = *(_OWORD *)(v5 + 32);
    v33 = *(_QWORD *)(v5 + 64);
    v34 = *(_QWORD *)(v5 + 72);
    v35 = *(_QWORD *)(v5 + 80);
    swift_bridgeObjectRetain();
    v62 = *(_OWORD *)(v5 + 16);
    swift_unknownObjectRetain();
    swift_release();
    *(_OWORD *)a1 = v62;
    *(_OWORD *)(a1 + 16) = v66;
    *(_OWORD *)(a1 + 32) = v64;
    *(_QWORD *)(a1 + 48) = v33;
    *(_QWORD *)(a1 + 56) = v34;
    *(_QWORD *)(a1 + 64) = v35;
    return v8;
  }
  if ((sub_1B1ADE3D8(1701669236, 0xE400000000000000, v61, v63, v65, v15) & 1) != 0)
  {
    v24 = MEMORY[0x1E0DEE9E8];
    v25 = 1;
    goto LABEL_20;
  }
  if ((sub_1B1ADE3D8(0x5F646C726F777263, 0xEF6A6F72705F6F74, v61, v63, v65, v15) & 1) != 0)
  {
    v26 = sub_1B1EEB6C8((uint64_t)&unk_1E6376B38);
    v27 = sub_1B1EE6864(5u, MEMORY[0x1E0DEE9E8], v26, v70, v5, v61, v63, v65, v15, v17);
LABEL_32:
    v8 = v27;
    swift_bridgeObjectRelease();
    goto LABEL_33;
  }
  if ((sub_1B1ADE3D8(0x5F646C726F777263, 0xEF776569765F6F74, v61, v63, v65, v15) & 1) != 0)
  {
    v28 = sub_1B1EEB6C8((uint64_t)&unk_1E6376CF0);
    v27 = sub_1B1EE6864(6u, MEMORY[0x1E0DEE9E8], v28, v70, v5, v61, v63, v65, v15, v17);
    goto LABEL_32;
  }
  if ((sub_1B1ADE3D8(0x5F6F745F77656976, 0xEC0000006A6F7270, v61, v63, v65, v15) & 1) != 0)
  {
    v29 = sub_1B1EEB6C8((uint64_t)&unk_1E6376D18);
    v27 = sub_1B1EE6864(7u, MEMORY[0x1E0DEE9E8], v29, v70, v5, v61, v63, v65, v15, v17);
    goto LABEL_32;
  }
  if ((sub_1B1ADE3D8(0x5F6F745F6A6F7270, 0xEC00000077656976, v61, v63, v65, v15) & 1) != 0)
  {
    v30 = sub_1B1EEB6C8((uint64_t)&unk_1E6376D40);
    v27 = sub_1B1EE6864(8u, MEMORY[0x1E0DEE9E8], v30, v70, v5, v61, v63, v65, v15, v17);
    goto LABEL_32;
  }
  if ((sub_1B1ADE3D8(0xD000000000000012, 0x80000001B2342F80, v61, v63, v65, v15) & 1) != 0)
  {
    v31 = sub_1B1EEB6C8((uint64_t)&unk_1E6376D68);
    v27 = sub_1B1EE6864(9u, MEMORY[0x1E0DEE9E8], v31, v70, v5, v61, v63, v65, v15, v17);
    goto LABEL_32;
  }
  if ((sub_1B1ADE3D8(0x705F6172656D6163, 0xEF6E6F697469736FLL, v61, v63, v65, v15) & 1) != 0)
  {
    if (v69 == 5)
      v36 = 3;
    else
      v36 = v69;
    v60 = v36;
    v37 = sub_1B1EE9944((uint64_t)&unk_1E6376D90);
    swift_arrayDestroy();
    v38 = sub_1B1EEB6C8((uint64_t)&unk_1E6376DC0);
    v8 = sub_1B1EE6864(v60, v37, v38, v70, v5, v61, v63, v65, v15, v17);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_33;
  }
  if ((sub_1B1ADE3D8(0xD000000000000018, 0x80000001B2342FA0, v61, v63, v65, v15) & 1) != 0)
  {
    v39 = sub_1B1EEB6C8((uint64_t)&unk_1E6376DE8);
    v27 = sub_1B1EE6864(0xAu, MEMORY[0x1E0DEE9E8], v39, v70, v5, v61, v63, v65, v15, v17);
    goto LABEL_32;
  }
  if ((sub_1B1ADE3D8(0xD000000000000012, 0x80000001B2342FC0, v61, v63, v65, v15) & 1) != 0)
  {
    v40 = sub_1B1EEB6C8((uint64_t)&unk_1E6376E10);
    v27 = sub_1B1EE6864(0xBu, MEMORY[0x1E0DEE9E8], v40, v70, v5, v61, v63, v65, v15, v17);
    goto LABEL_32;
  }
  if ((sub_1B1ADE3D8(0xD00000000000001ALL, 0x80000001B2342FE0, v61, v63, v65, v15) & 1) != 0)
  {
    v41 = sub_1B1EEB6C8((uint64_t)&unk_1E6376E38);
    v8 = sub_1B1EE6864(0xCu, MEMORY[0x1E0DEE9E8], v41, v70, v5, v61, v63, v65, v15, v17);
    swift_bridgeObjectRelease();
    goto LABEL_33;
  }
  v42 = v15;
  if ((sub_1B1ADE3D8(0x6E5F6172656D6163, 0xEB00000000726165, v61, v63, v65, v15) & 1) != 0)
  {
    v43 = sub_1B1EEB6C8((uint64_t)&unk_1E6376B60);
    v27 = sub_1B1EE6864(0xEu, MEMORY[0x1E0DEE9E8], v43, v70, v5, v61, v63, v65, v42, v17);
    goto LABEL_32;
  }
  if ((sub_1B1ADE3D8(0x665F6172656D6163, 0xEA00000000007261, v61, v63, v65, v15) & 1) != 0)
  {
    v44 = sub_1B1EEB6C8((uint64_t)&unk_1E6376B88);
    v27 = sub_1B1EE6864(0xFu, MEMORY[0x1E0DEE9E8], v44, v70, v5, v61, v63, v65, v42, v17);
    goto LABEL_32;
  }
  if ((sub_1B1ADE3D8(0x695F6172656D6163, 0xEC0000007865646ELL, v61, v63, v65, v15) & 1) != 0)
  {
    v45 = sub_1B1EEB6C8((uint64_t)&unk_1E6376BB0);
    v27 = sub_1B1EE6864(0xDu, MEMORY[0x1E0DEE9E8], v45, v70, v5, v61, v63, v65, v42, v17);
    goto LABEL_32;
  }
  if ((sub_1B1ADE3D8(0x6F5F6C6174726F70, 0xEE00797469636170, v61, v63, v65, v15) & 1) != 0)
  {
    v46 = sub_1B1EEB6C8((uint64_t)&unk_1E6376BD8);
    v27 = sub_1B1EE6864(0x13u, MEMORY[0x1E0DEE9E8], v46, v70, v5, v61, v63, v65, v42, v17);
    goto LABEL_32;
  }
  if ((sub_1B1ADE3D8(0x65636E6169646172, 0xE800000000000000, v61, v63, v65, v15) & 1) != 0)
  {
    v47 = sub_1B1EEB6C8((uint64_t)&unk_1E6376C00);
    v27 = sub_1B1EE6864(0x14u, MEMORY[0x1E0DEE9E8], v47, v70, v5, v61, v63, v65, v42, v17);
    goto LABEL_32;
  }
  if ((sub_1B1ADE3D8(0x6E61696461727269, 0xEA00000000006563, v61, v63, v65, v15) & 1) != 0)
  {
    v48 = sub_1B1EEB6C8((uint64_t)&unk_1E6376C28);
    v27 = sub_1B1EE6864(0x15u, MEMORY[0x1E0DEE9E8], v48, v70, v5, v61, v63, v65, v42, v17);
    goto LABEL_32;
  }
  if ((sub_1B1ADE3D8(0x65746E695F6C6269, 0xED0000797469736ELL, v61, v63, v65, v15) & 1) != 0)
  {
    v49 = sub_1B1EEB6C8((uint64_t)&unk_1E6376C50);
    v27 = sub_1B1EE6864(0x10u, MEMORY[0x1E0DEE9E8], v49, v70, v5, v61, v63, v65, v42, v17);
    goto LABEL_32;
  }
  if ((sub_1B1ADE3D8(0x61746F725F6C6269, 0xEC0000006E6F6974, v61, v63, v65, v15) & 1) != 0)
  {
    v50 = sub_1B1EEB6C8((uint64_t)&unk_1E6376C78);
    v27 = sub_1B1EE6864(0x11u, MEMORY[0x1E0DEE9E8], v50, v70, v5, v61, v63, v65, v42, v17);
    goto LABEL_32;
  }
  if ((sub_1B1ADE3D8(0x74756C5F66647262, 0xE800000000000000, v61, v63, v65, v15) & 1) != 0)
  {
    v51 = sub_1B1EEB6C8((uint64_t)&unk_1E6376CA0);
    v27 = sub_1B1EE6864(0x16u, MEMORY[0x1E0DEE9E8], v51, v70, v5, v61, v63, v65, v42, v17);
    goto LABEL_32;
  }
  if ((sub_1B1ADE3D8(0xD000000000000017, 0x80000001B232FB20, v61, v63, v65, v15) & 1) != 0)
  {
    v52 = sub_1B1EEB6C8((uint64_t)&unk_1E6376CC8);
    v27 = sub_1B1EE6864(0x12u, MEMORY[0x1E0DEE9E8], v52, v70, v5, v61, v63, v65, v42, v17);
    goto LABEL_32;
  }
  swift_bridgeObjectRelease();
  v53 = *(_OWORD *)(v5 + 64);
  v67[2] = *(_OWORD *)(v5 + 48);
  v67[3] = v53;
  v68 = *(_QWORD *)(v5 + 80);
  v54 = *(_OWORD *)(v5 + 32);
  v67[0] = *v7;
  v67[1] = v54;
  sub_1B1EF1B88((uint64_t)v67);
  sub_1B2229430();
  swift_bridgeObjectRelease();
  MEMORY[0x1B5E20388](v61, v63, v65, v15);
  sub_1B2228890();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  v55 = sub_1B1EE6458();
  v8 = v56;
  swift_bridgeObjectRelease();
  sub_1B1EF1BBC((uint64_t)v67);
  sub_1B1EF1A2C();
  swift_allocError();
  *v57 = v55;
  v57[1] = v8;
  swift_willThrow();
LABEL_2:
  swift_release();
  return v8;
}

uint64_t sub_1B1EEC6AC(__int128 *a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  _OWORD v22[4];
  uint64_t v23;

  v17 = *a1;
  v18 = a1[1];
  v19 = a1[2];
  v20 = a1[3];
  v21 = *((_QWORD *)a1 + 8);
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  sub_1B1EE9260(2u);
  if (!v1)
  {
    v5 = sub_1B1EE9260(0xEu);
    v7 = v6;
    v9 = v8;
    v11 = v10;
    v12 = sub_1B1ADE3D8(0x6E6F697469736F70, 0xE800000000000000, v5, v6, v8, v10);
    if ((v12 & 1) != 0)
    {
      v3 = 0;
LABEL_21:
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
      *a1 = v17;
      a1[1] = v18;
      a1[2] = v19;
      a1[3] = v20;
      *((_QWORD *)a1 + 8) = v21;
      return v3;
    }
    if ((sub_1B1ADE3D8(0x726F6C6F63, 0xE500000000000000, v5, v7, v9, v11) & 1) != 0)
    {
      v3 = 5;
      goto LABEL_21;
    }
    if ((sub_1B1ADE3D8(0x6C616D726F6ELL, 0xE600000000000000, v5, v7, v9, v11) & 1) != 0)
    {
      v3 = 6;
      goto LABEL_21;
    }
    if ((sub_1B1ADE3D8(0x746E65676E6174, 0xE700000000000000, v5, v7, v9, v11) & 1) != 0)
    {
      v3 = 7;
      goto LABEL_21;
    }
    if ((sub_1B1ADE3D8(3176053, 0xE300000000000000, v5, v7, v9, v11) & 1) != 0)
    {
      v3 = 1;
      goto LABEL_21;
    }
    if ((sub_1B1ADE3D8(3241589, 0xE300000000000000, v5, v7, v9, v11) & 1) != 0)
    {
      v3 = 2;
      goto LABEL_21;
    }
    if ((sub_1B1ADE3D8(3307125, 0xE300000000000000, v5, v7, v9, v11) & 1) != 0)
    {
      v3 = 3;
      goto LABEL_21;
    }
    if ((sub_1B1ADE3D8(3372661, 0xE300000000000000, v5, v7, v9, v11) & 1) != 0)
    {
      v3 = 4;
      goto LABEL_21;
    }
    v22[2] = v19;
    v22[3] = v20;
    v23 = v21;
    v22[0] = v17;
    v22[1] = v18;
    swift_bridgeObjectRetain();
    sub_1B1EF1B88((uint64_t)v22);
    sub_1B2229430();
    swift_bridgeObjectRelease();
    MEMORY[0x1B5E20388](v5, v7, v9, v11);
    sub_1B2228890();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    v13 = sub_1B1EE6458();
    v15 = v14;
    swift_bridgeObjectRelease();
    sub_1B1EF1BBC((uint64_t)v22);
    sub_1B1EF1A2C();
    swift_allocError();
    *v16 = v13;
    v16[1] = v15;
    swift_willThrow();
  }
  v3 = v21;
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  return v3;
}

unint64_t sub_1B1EECA24(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  unint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  char v12;
  char v13;
  uint64_t v14;

  v2 = a1 == 1718378856 && a2 == 0xE400000000000000;
  if (v2 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0x8000000000000048;
  }
  if (a1 == 0x32666C6168 && a2 == 0xE500000000000000 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v6 = swift_allocObject();
    v7 = xmmword_1B2292120;
LABEL_11:
    *(_OWORD *)(v6 + 16) = v7;
    return v6 | 0x1000000000000000;
  }
  if (a1 == 0x33666C6168 && a2 == 0xE500000000000000 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v6 = swift_allocObject();
    v7 = xmmword_1B2292130;
    goto LABEL_11;
  }
  if (a1 == 0x34666C6168 && a2 == 0xE500000000000000 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v6 = swift_allocObject();
    v7 = xmmword_1B2292140;
    goto LABEL_11;
  }
  if (a1 == 0x74616F6C66 && a2 == 0xE500000000000000 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0x8000000000000050;
  }
  if (a1 == 0x3274616F6C66 && a2 == 0xE600000000000000 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v6 = swift_allocObject();
    v7 = xmmword_1B2286450;
    goto LABEL_11;
  }
  if (a1 == 0x3374616F6C66 && a2 == 0xE600000000000000 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v6 = swift_allocObject();
    v7 = xmmword_1B22847D0;
    goto LABEL_11;
  }
  if (a1 == 0x3474616F6C66 && a2 == 0xE600000000000000 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v6 = swift_allocObject();
    v7 = xmmword_1B22847C0;
    goto LABEL_11;
  }
  if (a1 == 0x33783374616F6C66 && a2 == 0xE800000000000000 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v9 = swift_allocObject();
    *(_QWORD *)(v9 + 16) = 3;
    v10 = swift_allocObject();
    v11 = xmmword_1B22847D0;
LABEL_41:
    *(_OWORD *)(v10 + 16) = v11;
    *(_QWORD *)(v9 + 24) = v10 | 0x1000000000000000;
    return v9 | 0x1000000000000000;
  }
  if (a1 == 0x34783474616F6C66 && a2 == 0xE800000000000000 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v9 = swift_allocObject();
    *(_QWORD *)(v9 + 16) = 4;
    v10 = swift_allocObject();
    v11 = xmmword_1B22847C0;
    goto LABEL_41;
  }
  if (a1 == 7630441 && a2 == 0xE300000000000000 || (sub_1B2229D24() & 1) != 0)
  {
    v5 = 0x8000000000000030;
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_1B1A2044C();
    sub_1B1A20490();
    if (((sub_1B222862C() & 1) != 0 || (sub_1B222862C() & 1) != 0)
      && (swift_bridgeObjectRetain(), v12 = sub_1B1D784B4(), v12 != 7))
    {
      v13 = v12;
      v14 = swift_allocObject();
      *(_BYTE *)(v14 + 16) = v13;
      *(_QWORD *)(v14 + 24) = a1;
      *(_QWORD *)(v14 + 32) = a2;
      return v14 | 0x7000000000000000;
    }
    else
    {
      swift_bridgeObjectRelease();
      return 0xF000000000000007;
    }
  }
  return v5;
}

uint64_t sub_1B1EED068(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;

  if (qword_1ED4B7748 != -1)
    swift_once();
  result = sub_1B1B0F1AC(a2, a3, qword_1ED4D0A40);
  if ((result & 1) != 0)
  {
    sub_1B2229430();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    sub_1B2228890();
    v6 = sub_1B1EE6458();
    v8 = v7;
    swift_bridgeObjectRelease();
    sub_1B1EF1A2C();
    swift_allocError();
    *v9 = v6;
    v9[1] = v8;
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_1B1EED188(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  __int128 v58;
  __int128 v59;
  _BYTE v60[48];
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  _QWORD v68[2];
  __int128 v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  uint64_t v78;
  _OWORD v79[4];
  uint64_t v80;
  uint64_t v81;

  v4 = *a1;
  v3 = a1[1];
  v5 = a1[2];
  v6 = a1[7];
  v7 = a1[8];
  *(_QWORD *)&v59 = *a1;
  *((_QWORD *)&v59 + 1) = v3;
  *(_QWORD *)v60 = v5;
  v8 = *(_OWORD *)(a1 + 3);
  *(_OWORD *)&v60[8] = v8;
  *(_OWORD *)&v60[24] = *(_OWORD *)(a1 + 5);
  *(_QWORD *)&v60[40] = v6;
  v61 = v7;
  if (v5 != (unint64_t)v8 >> 1 && *(_BYTE *)(v3 + 40 * v5) == 2)
  {
    v81 = v7;
    v9 = v3 + 40 * v5;
    v11 = *(_QWORD *)(v9 + 24);
    v10 = *(_QWORD *)(v9 + 32);
    *(_QWORD *)&v59 = v4;
    *((_QWORD *)&v59 + 1) = v3;
    *(_QWORD *)v60 = v5 + 1;
    *(_QWORD *)&v60[8] = v8;
    *(_QWORD *)&v60[16] = 2;
    *(_OWORD *)&v60[24] = *(_OWORD *)(v9 + 8);
    *(_QWORD *)&v60[40] = v11;
    v61 = v10;
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    v12 = sub_1B1EE9260(0xEu);
    if (v1)
    {
LABEL_29:
      v20 = v61;
      swift_unknownObjectRelease();
      goto LABEL_30;
    }
    v16 = v12;
    v17 = v13;
    v18 = v14;
    v19 = v15;
    if ((sub_1B1ADE3D8(0x6E6F697469736F70, 0xE800000000000000, v12, v13, v14, v15) & 1) != 0
      || (sub_1B1ADE3D8(0xD000000000000010, 0x80000001B2343200, v16, v17, v18, v19) & 1) != 0
      || (sub_1B1ADE3D8(3176053, 0xE300000000000000, v16, v17, v18, v19) & 1) != 0
      || (sub_1B1ADE3D8(3241589, 0xE300000000000000, v16, v17, v18, v19) & 1) != 0
      || (sub_1B1ADE3D8(3307125, 0xE300000000000000, v16, v17, v18, v19) & 1) != 0
      || (sub_1B1ADE3D8(3372661, 0xE300000000000000, v16, v17, v18, v19) & 1) != 0
      || (sub_1B1ADE3D8(0x726F6C6F63, 0xE500000000000000, v16, v17, v18, v19) & 1) != 0
      || (sub_1B1ADE3D8(0x6C616D726F6ELL, 0xE600000000000000, v16, v17, v18, v19) & 1) != 0
      || (sub_1B1ADE3D8(0x746E65676E6174, 0xE700000000000000, v16, v17, v18, v19) & 1) != 0)
    {
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
      v20 = 0;
      goto LABEL_44;
    }
    v79[2] = *(_OWORD *)&v60[16];
    v79[3] = *(_OWORD *)&v60[32];
    v80 = v61;
    v79[0] = v59;
    v79[1] = *(_OWORD *)v60;
    swift_bridgeObjectRetain();
    sub_1B1EF1B88((uint64_t)v79);
    sub_1B2229430();
    swift_bridgeObjectRelease();
    MEMORY[0x1B5E20388](v16, v17, v18, v19);
    sub_1B2228890();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    v47 = sub_1B1EE6458();
    v49 = v55;
    swift_bridgeObjectRelease();
    sub_1B1EF1BBC((uint64_t)v79);
    goto LABEL_27;
  }
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  v20 = sub_1B1EE9944((uint64_t)&unk_1E6376ED0);
  swift_arrayDestroy();
  v21 = sub_1B1EEA4A0((uint64_t)&v59, 0, v20);
  if (!v1)
  {
    v22 = (_QWORD *)v21;
    v81 = v7;
    swift_bridgeObjectRelease();
    v23 = v59;
    v58 = *(_OWORD *)v60;
    v57 = *((_QWORD *)&v59 + 1);
    if (*(_QWORD *)v60 == *(_QWORD *)&v60[8] >> 1
      || (v24 = (_QWORD *)(*((_QWORD *)&v59 + 1) + 40 * *(_QWORD *)v60),
          v25 = *(unsigned __int8 *)v24,
          v27 = v24[1],
          v26 = v24[2],
          v28 = v24[3],
          v29 = v24[4],
          swift_bridgeObjectRetain(),
          v25 != 14))
    {
      swift_bridgeObjectRelease();
      v35 = v22[2];
      if (!v35)
      {
LABEL_26:
        swift_bridgeObjectRelease();
        v62 = v23;
        v63 = v57;
        v64 = v58;
        v65 = *(_OWORD *)&v60[16];
        v66 = *(_OWORD *)&v60[32];
        v67 = v61;
        swift_bridgeObjectRetain();
        swift_unknownObjectRetain();
        v47 = sub_1B1EE6458();
        v49 = v48;
        swift_bridgeObjectRelease();
        swift_unknownObjectRelease();
LABEL_27:
        sub_1B1EF1A2C();
        swift_allocError();
        *v50 = v47;
        v50[1] = v49;
LABEL_28:
        swift_willThrow();
        goto LABEL_29;
      }
    }
    else
    {
      v30 = MEMORY[0x1B5E20388](v27, v26, v28, v29);
      v32 = v31;
      swift_bridgeObjectRelease();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v22 = sub_1B1C65920(0, v22[2] + 1, 1, v22);
      v34 = v22[2];
      v33 = v22[3];
      v35 = v34 + 1;
      if (v34 >= v33 >> 1)
        v22 = sub_1B1C65920(v33 > 1, v34 + 1, 1, v22);
      v22[2] = v35;
      v36 = &v22[4 * v34];
      *((_OWORD *)v36 + 2) = xmmword_1B229E650;
      v36[6] = v30;
      v36[7] = v32;
    }
    v56 = v23;
    v37 = v22 + 7;
    while (1)
    {
      v38 = *(v37 - 2);
      if (v38)
      {
        v20 = *(v37 - 1);
        v39 = *v37;
        v40 = *(v37 - 3) == 1701667182 && v38 == 0xE400000000000000;
        if (v40 || (sub_1B2229D24() & 1) != 0)
          break;
      }
      v37 += 4;
      if (!--v35)
        goto LABEL_26;
    }
    v41 = v22[6];
    v42 = v22[7];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRelease();
    if ((~sub_1B1EECA24(v41, v42) & 0xF000000000000007) != 0)
    {
      swift_bridgeObjectRelease();
      v68[0] = v56;
      v68[1] = v57;
      v69 = v58;
      v70 = *(_OWORD *)&v60[16];
      v71 = *(_OWORD *)&v60[32];
      v72 = v61;
      swift_bridgeObjectRetain();
      swift_unknownObjectRetain();
      sub_1B1EED068((uint64_t)v68, v20, v39);
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
LABEL_44:
      v52 = v61;
      v53 = *(_OWORD *)v60;
      *(_OWORD *)a1 = v59;
      *((_OWORD *)a1 + 1) = v53;
      v54 = *(_OWORD *)&v60[32];
      *((_OWORD *)a1 + 2) = *(_OWORD *)&v60[16];
      *((_OWORD *)a1 + 3) = v54;
      a1[8] = v52;
      return v20;
    }
    swift_bridgeObjectRelease();
    v73 = v56;
    v74 = v57;
    v75 = v58;
    v76 = *(_OWORD *)&v60[16];
    v77 = *(_OWORD *)&v60[32];
    v78 = v61;
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    sub_1B2229430();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    v43 = sub_1B1EE6458();
    v45 = v44;
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    sub_1B1EF1A2C();
    swift_allocError();
    *v46 = v43;
    v46[1] = v45;
    goto LABEL_28;
  }
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
LABEL_30:
  swift_bridgeObjectRelease();
  return v20;
}

uint64_t sub_1B1EEDA60(__int128 *a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  _OWORD v22[4];
  uint64_t v23;

  v17 = *a1;
  v18 = a1[1];
  v19 = a1[2];
  v20 = a1[3];
  v21 = *((_QWORD *)a1 + 8);
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  sub_1B1EE9260(2u);
  if (!v1)
  {
    v5 = sub_1B1EE9260(0xEu);
    v7 = v6;
    v9 = v8;
    v11 = v10;
    v12 = sub_1B1ADE3D8(0x726F6C6F63, 0xE500000000000000, v5, v6, v8, v10);
    if ((v12 & 1) != 0)
    {
      v3 = 0;
LABEL_17:
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
      *a1 = v17;
      a1[1] = v18;
      a1[2] = v19;
      a1[3] = v20;
      *((_QWORD *)a1 + 8) = v21;
      return v3;
    }
    if ((sub_1B1ADE3D8(0xD000000000000010, 0x80000001B2343200, v5, v7, v9, v11) & 1) != 0)
    {
      v3 = 1;
      goto LABEL_17;
    }
    if ((sub_1B1ADE3D8(0x645F7261656E696CLL, 0xEC00000068747065, v5, v7, v9, v11) & 1) != 0)
    {
      v3 = 2;
      goto LABEL_17;
    }
    if ((sub_1B1ADE3D8(0x61665F746E6F7266, 0xEC000000676E6963, v5, v7, v9, v11) & 1) != 0)
    {
      v3 = 3;
      goto LABEL_17;
    }
    if ((sub_1B1ADE3D8(0xD000000000000017, 0x80000001B2343280, v5, v7, v9, v11) & 1) != 0)
    {
      v3 = 4;
      goto LABEL_17;
    }
    if ((sub_1B1ADE3D8(0x766974696D697270, 0xEC00000064695F65, v5, v7, v9, v11) & 1) != 0)
    {
      v3 = 5;
      goto LABEL_17;
    }
    v22[2] = v19;
    v22[3] = v20;
    v23 = v21;
    v22[0] = v17;
    v22[1] = v18;
    swift_bridgeObjectRetain();
    sub_1B1EF1B88((uint64_t)v22);
    sub_1B2229430();
    swift_bridgeObjectRelease();
    MEMORY[0x1B5E20388](v5, v7, v9, v11);
    sub_1B2228890();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    v13 = sub_1B1EE6458();
    v15 = v14;
    swift_bridgeObjectRelease();
    sub_1B1EF1BBC((uint64_t)v22);
    sub_1B1EF1A2C();
    swift_allocError();
    *v16 = v13;
    v16[1] = v15;
    swift_willThrow();
  }
  v3 = v21;
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t sub_1B1EEDDB8(__int128 *a1)
{
  uint64_t v1;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  _OWORD v20[4];
  uint64_t v21;

  v15 = *a1;
  v16 = a1[1];
  v17 = a1[2];
  v18 = a1[3];
  v19 = *((_QWORD *)a1 + 8);
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  sub_1B1EE9260(2u);
  if (!v1)
  {
    v3 = sub_1B1EE9260(0xEu);
    v5 = v4;
    v7 = v6;
    v9 = v8;
    if ((sub_1B1ADE3D8(0x726F6C6F63, 0xE500000000000000, v3, v4, v6, v8) & 1) != 0)
    {
      swift_bridgeObjectRelease();
      result = swift_unknownObjectRelease();
      *a1 = v15;
      a1[1] = v16;
      a1[2] = v17;
      a1[3] = v18;
      *((_QWORD *)a1 + 8) = v19;
      return result;
    }
    v20[2] = v17;
    v20[3] = v18;
    v21 = v19;
    v20[0] = v15;
    v20[1] = v16;
    swift_bridgeObjectRetain();
    sub_1B1EF1B88((uint64_t)v20);
    sub_1B2229430();
    swift_bridgeObjectRelease();
    MEMORY[0x1B5E20388](v3, v5, v7, v9);
    sub_1B2228890();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    v11 = sub_1B1EE6458();
    v13 = v12;
    swift_bridgeObjectRelease();
    sub_1B1EF1BBC((uint64_t)v20);
    sub_1B1EF1A2C();
    swift_allocError();
    *v14 = v11;
    v14[1] = v13;
    swift_willThrow();
  }
  swift_unknownObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *sub_1B1EEDFD8(__int128 *a1)
{
  uint64_t v1;
  _QWORD *v3;
  __int128 v4;
  __int128 v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  _QWORD *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  _QWORD *v39;
  _OWORD v40[4];
  _QWORD *v41;
  uint64_t v42;

  v3 = (_QWORD *)*((_QWORD *)a1 + 8);
  v4 = a1[1];
  v35 = *a1;
  v36 = v4;
  v5 = a1[3];
  v37 = a1[2];
  v38 = v5;
  v39 = v3;
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  v6 = sub_1B1EE9260(0xEu);
  if (!v1)
  {
    if ((sub_1B1EE7988(v6, v7, v8, v9, 0x6C6169726574616DLL, 0xE800000000000000) & 1) != 0)
    {
      v10 = sub_1B1EE9944((uint64_t)&unk_1E6376EA0);
      swift_arrayDestroy();
      v15 = (_QWORD *)sub_1B1EEA4A0((uint64_t)&v35, 0, v10);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
      v17 = *((_QWORD *)&v35 + 1);
      v18 = v35;
      v19 = v36;
      if ((_QWORD)v36 != *((_QWORD *)&v36 + 1) >> 1)
      {
        v34 = *((_QWORD *)&v35 + 1);
        v42 = v35;
        v20 = (_QWORD *)(*((_QWORD *)&v35 + 1) + 40 * v36);
        v21 = *(unsigned __int8 *)v20;
        v22 = v20[1];
        v23 = v20[2];
        v24 = v20[3];
        v25 = v20[4];
        swift_bridgeObjectRetain();
        if (v21 == 14)
        {
          v26 = MEMORY[0x1B5E20388](v22, v23, v24, v25);
          v28 = v27;
          swift_bridgeObjectRelease();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v15 = sub_1B1C65920(0, v15[2] + 1, 1, v15);
          v30 = v15[2];
          v29 = v15[3];
          if (v30 >= v29 >> 1)
            v15 = sub_1B1C65920(v29 > 1, v30 + 1, 1, v15);
          v15[2] = v30 + 1;
          v31 = &v15[4 * v30];
          *((_OWORD *)v31 + 2) = xmmword_1B229E650;
          v31[6] = v26;
          v31[7] = v28;
          v17 = v34;
          v18 = v42;
          goto LABEL_16;
        }
        v17 = v34;
        v18 = v42;
      }
      swift_bridgeObjectRelease();
LABEL_16:
      v32 = v39;
      *(_QWORD *)a1 = v18;
      *((_QWORD *)a1 + 1) = v17;
      a1[1] = v19;
      v33 = v38;
      a1[2] = v37;
      a1[3] = v33;
      *((_QWORD *)a1 + 8) = v32;
      return v15;
    }
    v40[2] = v37;
    v40[3] = v38;
    v41 = v39;
    v40[0] = v35;
    v40[1] = v36;
    sub_1B1EF1B88((uint64_t)v40);
    sub_1B2229430();
    swift_bridgeObjectRelease();
    sub_1B1EF1B88((uint64_t)v40);
    sub_1B1EE6378();
    sub_1B1EF1BBC((uint64_t)v40);
    sub_1B2228890();
    swift_bridgeObjectRelease();
    v11 = sub_1B1EE6458();
    v13 = v12;
    swift_bridgeObjectRelease();
    sub_1B1EF1BBC((uint64_t)v40);
    sub_1B1EF1A2C();
    swift_allocError();
    *v14 = v11;
    v14[1] = v13;
    swift_willThrow();
  }
  v15 = v39;
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  return v15;
}

uint64_t sub_1B1EEE314@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __int128 v5;
  __int128 v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t result;
  _QWORD *v19;
  _QWORD *v20;
  __int128 v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  __int128 v46;
  _OWORD v47[2];
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  _OWORD v53[2];
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  unint64_t v57;

  v5 = *(_OWORD *)(a1 + 48);
  v54 = *(_OWORD *)(a1 + 32);
  v55 = v5;
  v56 = *(_QWORD *)(a1 + 64);
  v6 = *(_OWORD *)(a1 + 16);
  v53[0] = *(_OWORD *)a1;
  v53[1] = v6;
  v50 = v54;
  v51 = v5;
  v52 = v56;
  v48 = v53[0];
  v49 = v6;
  sub_1B1EF1B88((uint64_t)v53);
  v7 = sub_1B1EEDFD8(&v48);
  if (v2)
    goto LABEL_7;
  v8 = v7;
  v9 = v7[2];
  if (!v9)
  {
    swift_bridgeObjectRelease();
    v13 = sub_1B1EE6458();
    v15 = v16;
    goto LABEL_6;
  }
  v11 = v7[6];
  v10 = v7[7];
  swift_bridgeObjectRetain_n();
  v12 = sub_1B1EECA24(v11, v10);
  if ((~v12 & 0xF000000000000007) == 0)
  {
    swift_bridgeObjectRelease();
    sub_1B2229430();
    swift_bridgeObjectRelease();
    *(_QWORD *)&v47[0] = 0xD00000000000001DLL;
    *((_QWORD *)&v47[0] + 1) = 0x80000001B2343310;
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    v13 = sub_1B1EE6458();
    v15 = v14;
    swift_bridgeObjectRelease();
LABEL_6:
    sub_1B1EF1A2C();
    swift_allocError();
    *v17 = v13;
    v17[1] = v15;
    swift_willThrow();
LABEL_7:
    swift_unknownObjectRelease();
    return swift_bridgeObjectRelease();
  }
  v43 = v11;
  v44 = a2;
  v45 = v12;
  v19 = v8 + 7;
  v20 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  do
  {
    v25 = *(v19 - 2);
    if (v25)
    {
      v46 = *((_OWORD *)v19 - 1);
      v26 = *(v19 - 3);
      v27 = *v19;
      v28 = v26 == 1701667182 && v25 == 0xE400000000000000;
      if (v28 || (sub_1B2229D24() & 1) != 0)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        *(_QWORD *)&v47[0] = v20;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1B202ADF0(0, v20[2] + 1, 1);
          v20 = *(_QWORD **)&v47[0];
        }
        v21 = v46;
        v23 = v20[2];
        v22 = v20[3];
        if (v23 >= v22 >> 1)
        {
          sub_1B202ADF0(v22 > 1, v23 + 1, 1);
          v21 = v46;
          v20 = *(_QWORD **)&v47[0];
        }
        v20[2] = v23 + 1;
        v24 = &v20[4 * v23];
        v24[4] = v26;
        *(_OWORD *)(v24 + 5) = v21;
        v24[7] = v27;
      }
    }
    v19 += 4;
    --v9;
  }
  while (v9);
  swift_bridgeObjectRelease();
  if (!v20[2])
  {
    swift_bridgeObjectRelease();
    swift_release();
    v31 = sub_1B1EE6458();
    v33 = v32;
    sub_1B1EF1A2C();
    swift_allocError();
    *v34 = v31;
    v34[1] = v33;
    swift_willThrow();
    sub_1B1BCBFE4(v45);
    goto LABEL_7;
  }
  v30 = v20[6];
  v29 = v20[7];
  swift_bridgeObjectRetain();
  swift_release();
  sub_1B1EF1B88((uint64_t)v53);
  sub_1B1EED068((uint64_t)v53, v30, v29);
  sub_1B1EF1BBC((uint64_t)v53);
  sub_1B1EF1BBC((uint64_t)v53);
  v35 = v10;
  if (v45 >> 60 == 7)
  {
    result = sub_1B1BCBFE4(v45);
    v36 = 4;
    v37 = v43;
    v38 = v44;
LABEL_28:
    v40 = v52;
    v41 = v49;
    *(_OWORD *)a1 = v48;
    *(_OWORD *)(a1 + 16) = v41;
    v42 = v51;
    *(_OWORD *)(a1 + 32) = v50;
    *(_OWORD *)(a1 + 48) = v42;
    *(_QWORD *)(a1 + 64) = v40;
    *(_QWORD *)v38 = v30;
    *(_QWORD *)(v38 + 8) = v29;
    *(_QWORD *)(v38 + 16) = v37;
    *(_QWORD *)(v38 + 24) = v35;
    *(_BYTE *)(v38 + 32) = v36;
    return result;
  }
  swift_bridgeObjectRelease();
  sub_1B1D77964(v45);
  v38 = v44;
  if (v39)
  {
    memset(v47, 0, sizeof(v47));
    v30 = sub_1B1A23334(v39, (uint64_t)v47, v30, v29, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, (uint64_t)&type metadata for MaterialParameters, v39, (uint64_t)&off_1E6392500);
    sub_1B1BCBFE4(v45);
    swift_bridgeObjectRelease();
    result = sub_1B1AEA224((uint64_t)v47, (uint64_t)&qword_1ED4BB150, MEMORY[0x1E0DEE9B8] + 8, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))sub_1B1A02758);
    v29 = 0;
    v37 = 0;
    v35 = 0;
    v36 = 3;
    goto LABEL_28;
  }
  sub_1B2229430();
  sub_1B2228890();
  v57 = v45;
  sub_1B22295EC();
  result = sub_1B2229688();
  __break(1u);
  return result;
}

uint64_t sub_1B1EEE880(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  _QWORD *v6;

  v2 = a1 == 0x746165706572 && a2 == 0xE600000000000000;
  if (v2 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6F745F706D616C63 && a2 == 0xED00006F72657A5FLL || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6F745F706D616C63 && a2 == 0xED0000656764655FLL || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6D5F746165706572 && a2 == 0xED0000726F727269 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    sub_1B2229430();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    sub_1B1EF1A2C();
    swift_allocError();
    *v6 = 39;
    v6[1] = 0xE100000000000000;
    return swift_willThrow();
  }
}

uint64_t sub_1B1EEEB28(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  _QWORD *v6;

  v2 = a1 == 0x7473657261656ELL && a2 == 0xE700000000000000;
  if (v2 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7261656E696CLL && a2 == 0xE600000000000000 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    sub_1B2229430();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    sub_1B1EF1A2C();
    swift_allocError();
    *v6 = 39;
    v6[1] = 0xE100000000000000;
    return swift_willThrow();
  }
}

uint64_t sub_1B1EEECAC(uint64_t a1, char a2, char a3, int a4)
{
  uint64_t v4;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  int v13;
  __int128 v14;
  __int128 v15;
  _OWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  char v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _OWORD *v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  _OWORD *v65;
  _OWORD *v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;
  _OWORD *v70;
  _OWORD *v71;
  uint64_t v72;
  char v73;
  unsigned __int8 v74;
  uint64_t v75;
  _OWORD *v76;
  uint64_t *v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  __int128 v82;
  __int128 v83;
  _OWORD *v84;
  __int128 v85;
  __int128 v86;
  _OWORD *v87;
  char v88;
  unsigned __int8 v89;
  uint64_t v90;
  __int128 v91;
  __int128 v92;
  _OWORD *v93;
  uint64_t v94;
  _OWORD *v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t v98;
  _OWORD *v99;
  char v100;
  uint64_t v101;
  __int128 v102;
  __int128 v103;
  _OWORD *v104;
  __int128 v105;
  __int128 v106;
  uint64_t v107;
  _QWORD *v108;
  uint64_t v109;
  char v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char v116;
  char v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char v127;
  __int128 v128;
  __int128 v129;
  uint64_t v130;
  _OWORD *v131;
  uint64_t *v132;
  __int128 *v133;
  char v134;
  uint64_t v135;
  char v136;
  char v137;
  uint64_t v138;
  __int128 v139;
  __int128 v140;
  uint64_t v141;
  _OWORD *v142;
  uint64_t *v143;
  __int128 v144;
  __int128 v146;
  __int128 v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t v152;
  unint64_t v153;
  uint64_t v154;
  _BYTE v155[40];
  _BYTE v156[40];
  _BYTE v157[40];
  _BYTE v158[40];
  _BYTE v159[40];
  _BYTE v160[40];
  _BYTE v161[48];
  _BYTE v162[40];
  _BYTE v163[40];
  _BYTE v164[40];
  _BYTE v165[40];
  __int128 v166[2];
  _BYTE v167[40];
  __int128 v168;
  uint64_t v169;
  __int128 v170;
  int v171;
  __int128 v172;
  int v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  _OWORD v177[4];
  uint64_t v178;
  _OWORD v179[4];
  uint64_t v180;
  _OWORD v181[4];
  uint64_t v182;
  _OWORD v183[4];
  uint64_t v184;
  _OWORD v185[4];
  uint64_t v186;
  _OWORD v187[4];
  uint64_t v188;
  _OWORD v189[4];
  uint64_t v190;
  _OWORD v191[4];
  uint64_t v192;
  _OWORD v193[4];
  uint64_t v194;
  _OWORD v195[4];
  uint64_t v196;
  _OWORD v197[4];
  uint64_t v198;
  _OWORD v199[4];
  uint64_t v200;
  _OWORD *v201;

  v7 = swift_allocObject();
  v8 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v7 + 16) = *(_OWORD *)a1;
  v9 = v7 + 16;
  v10 = *(_QWORD *)(a1 + 64);
  v11 = *(_OWORD *)(a1 + 32);
  v12 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v7 + 32) = v8;
  *(_OWORD *)(v7 + 48) = v11;
  *(_OWORD *)(v7 + 64) = v12;
  *(_QWORD *)(v7 + 80) = v10;
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  sub_1B1EE66E0((uint64_t)v155);
  sub_1B1EF1B60((uint64_t)v155);
  v13 = v155[0];
  if (v155[0] != 5 && v155[0] != 6 && v155[0] != 1)
  {
    v14 = *(_OWORD *)v9;
    v199[1] = *(_OWORD *)(v7 + 32);
    v15 = *(_OWORD *)(v7 + 64);
    v199[2] = *(_OWORD *)(v7 + 48);
    v199[3] = v15;
    v200 = *(_QWORD *)(v7 + 80);
    v199[0] = v14;
    sub_1B1EF1B88((uint64_t)v199);
    sub_1B2229430();
    swift_bridgeObjectRelease();
    v152 = 0xD00000000000001ELL;
    v153 = 0x80000001B2342C50;
    sub_1B1EF1B88((uint64_t)v199);
    sub_1B1EE6378();
    sub_1B1EF1BBC((uint64_t)v199);
    sub_1B2228890();
    swift_bridgeObjectRelease();
    v16 = (_OWORD *)sub_1B1EE6458();
    v18 = v17;
    swift_bridgeObjectRelease();
    sub_1B1EF1BBC((uint64_t)v199);
    sub_1B1EF1A2C();
    swift_allocError();
    *v19 = v16;
    v19[1] = v18;
    swift_willThrow();
LABEL_14:
    swift_release();
    return (uint64_t)v16;
  }
  v151 = v7;
  v201 = (_OWORD *)a1;
  if (a4 != 3)
  {
    if (a4 != 1)
    {
      v20 = sub_1B2229D24();
      swift_bridgeObjectRelease();
      if ((v20 & 1) != 0)
        goto LABEL_12;
      if ((_BYTE)a4)
        sub_1B2229D24();
    }
    swift_bridgeObjectRelease();
  }
LABEL_12:
  v21 = *(_OWORD *)(v7 + 64);
  v189[2] = *(_OWORD *)(v7 + 48);
  v189[3] = v21;
  v190 = *(_QWORD *)(v7 + 80);
  v22 = *(_OWORD *)(v7 + 32);
  v189[0] = *(_OWORD *)v9;
  v189[1] = v22;
  sub_1B1EF1B88((uint64_t)v189);
  v16 = v189;
  v23 = sub_1B1EE93F8(0xEu);
  if (v4)
  {
    sub_1B1EF1BBC((uint64_t)v189);
    goto LABEL_14;
  }
  v28 = v23;
  v29 = v24;
  v30 = v25;
  v31 = v26;
  swift_bridgeObjectRetain();
  sub_1B1EF1BBC((uint64_t)v189);
  if ((sub_1B1ADE3D8(0x6F43747069726373, 0xED0000747865746ELL, v28, v29, v30, v31) & 1) != 0
    || (sub_1B1ADE3D8(0x635F747069726373, 0xEE00747865746E6FLL, v28, v29, v30, v31) & 1) != 0)
  {
    sub_1B1EE7108(5, v28, v29, v30, v31, v13, v151);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    sub_1B1EE66E0((uint64_t)v156);
    sub_1B1EF1B60((uint64_t)v156);
    v16 = (_OWORD *)0xF000000000000000;
LABEL_19:
    v146 = *(_OWORD *)(v151 + 48);
    v148 = *(_OWORD *)(v151 + 32);
    v32 = *(_QWORD *)(v151 + 64);
    v33 = *(_QWORD *)(v151 + 72);
    v34 = *(_QWORD *)(v151 + 80);
    swift_bridgeObjectRetain();
    v144 = *(_OWORD *)(v151 + 16);
    swift_unknownObjectRetain();
    swift_release();
    v35 = v201;
    *v201 = v144;
    v35[1] = v148;
    v35[2] = v146;
    *((_QWORD *)v35 + 6) = v32;
    *((_QWORD *)v35 + 7) = v33;
    *((_QWORD *)v35 + 8) = v34;
    return (uint64_t)v16;
  }
  if (v13 == 1)
  {
    swift_bridgeObjectRelease();
    sub_1B1EEABE0(v9, 1, 1, &v152);
    v36 = v154;
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    v152 = 35;
    v153 = 0xE100000000000000;
    sub_1B2228890();
    swift_bridgeObjectRelease();
    v37 = v152;
    v38 = v153;
    v39 = swift_allocObject();
    *(_QWORD *)(v39 + 16) = v36;
    *(_QWORD *)(v39 + 24) = v37;
    *(_QWORD *)(v39 + 32) = v38;
    swift_release();
    swift_bridgeObjectRelease();
    v16 = (_OWORD *)(v39 | 0x6000000000000000);
    goto LABEL_19;
  }
  if ((sub_1B1ADE3D8(0x6E69746C697562, 0xE700000000000000, v28, v29, v30, v31) & 1) != 0)
  {
    sub_1B1EE7108(5, v28, v29, v30, v31, v13, v151);
    swift_bridgeObjectRelease();
    sub_1B1EE66E0((uint64_t)v157);
    sub_1B1EF1B60((uint64_t)v157);
    sub_1B1EE9260(2u);
    v16 = (_OWORD *)sub_1B1EEB958(v9, a4);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    goto LABEL_19;
  }
  if ((sub_1B1ADE3D8(0x72657474696D65, 0xE700000000000000, v28, v29, v30, v31) & 1) != 0)
  {
    swift_bridgeObjectRelease();
    if (v13 == 5)
    {
      sub_1B1EE66E0((uint64_t)v158);
      sub_1B1EF1B60((uint64_t)v158);
      v40 = *(_QWORD *)(v151 + 32);
      if (v40 == *(_QWORD *)(v151 + 40) >> 1 || *(_BYTE *)(*(_QWORD *)(v151 + 24) + 40 * v40) != 2)
      {
        swift_bridgeObjectRelease();
        swift_unknownObjectRelease();
        v54 = swift_allocObject();
        *(_QWORD *)(v54 + 16) = 0;
        *(_QWORD *)(v54 + 24) = 0;
        *(_BYTE *)(v54 + 32) = 2;
        v16 = (_OWORD *)(v54 | 0x8000000000000000);
      }
      else
      {
        sub_1B1EE9260(2u);
        sub_1B1EEABE0(v9, 0, 1, &v152);
        v41 = v154;
        v152 = 0x72657474696D6524;
        v153 = 0xE90000000000002ELL;
        sub_1B2228890();
        swift_bridgeObjectRelease();
        v42 = v153;
        if (a2 == 1)
        {
          swift_bridgeObjectRelease();
          v43 = *(_OWORD *)(v9 + 48);
          v177[2] = *(_OWORD *)(v9 + 32);
          v177[3] = v43;
          v178 = *(_QWORD *)(v9 + 64);
          v44 = *(_OWORD *)(v9 + 16);
          v177[0] = *(_OWORD *)v9;
          v177[1] = v44;
          sub_1B1EF1B88((uint64_t)v177);
          v16 = (_OWORD *)sub_1B1EE6458();
          v46 = v45;
          sub_1B1EF1BBC((uint64_t)v177);
          sub_1B1EF1A2C();
          swift_allocError();
          *v47 = v16;
          v47[1] = v46;
          swift_willThrow();
          swift_release();
          swift_release();
          swift_bridgeObjectRelease();
          return (uint64_t)v16;
        }
        v79 = v152;
        swift_bridgeObjectRelease();
        swift_unknownObjectRelease();
        v80 = swift_allocObject();
        *(_QWORD *)(v80 + 16) = v41;
        *(_QWORD *)(v80 + 24) = v79;
        *(_QWORD *)(v80 + 32) = v42;
        swift_release();
        swift_bridgeObjectRelease();
        v16 = (_OWORD *)(v80 | 0x6000000000000000);
      }
      goto LABEL_19;
    }
    sub_1B1EE66E0((uint64_t)v159);
    sub_1B1EF1B60((uint64_t)v159);
    sub_1B1EE9260(8u);
    v51 = sub_1B1EE9AF8((uint64_t *)v9);
    v53 = v52;
    sub_1B1EE9260(9u);
    if (a2 != 1)
    {
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
      v78 = swift_allocObject();
      *(_QWORD *)(v78 + 16) = v51;
      *(_QWORD *)(v78 + 24) = v53;
      *(_BYTE *)(v78 + 32) = 1;
      v16 = (_OWORD *)(v78 | 0x8000000000000000);
      goto LABEL_19;
    }
    swift_bridgeObjectRelease();
    v67 = *(_OWORD *)(v9 + 48);
    v179[2] = *(_OWORD *)(v9 + 32);
    v179[3] = v67;
    v180 = *(_QWORD *)(v9 + 64);
    v68 = *(_OWORD *)(v9 + 16);
    v179[0] = *(_OWORD *)v9;
    v179[1] = v68;
    sub_1B1EF1B88((uint64_t)v179);
    v69 = sub_1B1EE6458();
    v16 = v70;
    v71 = v179;
    goto LABEL_85;
  }
  if ((sub_1B1ADE3D8(0x656C636974726170, 0xE800000000000000, v28, v29, v30, v31) & 1) == 0)
  {
    if ((sub_1B1ADE3D8(0x695F786574726576, 0xE90000000000006ELL, v28, v29, v30, v31) & 1) != 0)
    {
      sub_1B1EE7108(5, v28, v29, v30, v31, v13, v151);
      swift_bridgeObjectRelease();
      if (a4 != 3)
      {
        if (!(_BYTE)a4)
        {
          swift_bridgeObjectRelease();
LABEL_63:
          sub_1B1EE66E0((uint64_t)v162);
          sub_1B1EF1B60((uint64_t)v162);
          v74 = sub_1B1EEC6AC((__int128 *)v9);
          swift_bridgeObjectRelease();
          swift_unknownObjectRelease();
          v75 = swift_allocObject();
          *(_QWORD *)(v75 + 16) = v74;
          *(_QWORD *)(v75 + 24) = 0;
          v16 = (_OWORD *)(v75 | 0xD000000000000000);
          *(_QWORD *)(v75 + 32) = 0;
          *(_QWORD *)(v75 + 40) = 0;
          *(_BYTE *)(v75 + 48) = 0;
          goto LABEL_19;
        }
        v73 = sub_1B2229D24();
        swift_bridgeObjectRelease();
        if ((v73 & 1) != 0)
          goto LABEL_63;
      }
LABEL_64:
      sub_1B1EF1B88((uint64_t)v189);
      v64 = sub_1B1EE6458();
      v16 = v76;
      v66 = v189;
      goto LABEL_65;
    }
    if ((sub_1B1ADE3D8(0x6F5F786574726576, 0xEA00000000007475, v28, v29, v30, v31) & 1) != 0)
    {
      sub_1B1EE7108(5, v28, v29, v30, v31, v13, v151);
      swift_bridgeObjectRelease();
      sub_1B1EE66E0((uint64_t)v163);
      sub_1B1EF1B60((uint64_t)v163);
      if (a4 <= 1u)
      {
        v55 = sub_1B1EED188((uint64_t *)v9);
        v57 = v56;
        v59 = v58;
        swift_bridgeObjectRelease();
        swift_unknownObjectRelease();
        v60 = swift_allocObject();
        *(_QWORD *)(v60 + 16) = v55;
        *(_QWORD *)(v60 + 24) = v57;
        *(_QWORD *)(v60 + 32) = v59;
        *(_QWORD *)(v60 + 40) = 0;
        v16 = (_OWORD *)(v60 | 0xD000000000000000);
        *(_BYTE *)(v60 + 48) = 1;
        goto LABEL_19;
      }
      v62 = *(_OWORD *)(v9 + 48);
      v191[2] = *(_OWORD *)(v9 + 32);
      v191[3] = v62;
      v192 = *(_QWORD *)(v9 + 64);
      v63 = *(_OWORD *)(v9 + 16);
      v191[0] = *(_OWORD *)v9;
      v191[1] = v63;
      sub_1B1EF1B88((uint64_t)v191);
      v64 = sub_1B1EE6458();
      v16 = v65;
      v66 = v191;
LABEL_65:
      sub_1B1EF1BBC((uint64_t)v66);
      sub_1B1EF1A2C();
      swift_allocError();
      *v77 = v64;
      v77[1] = (uint64_t)v16;
      swift_willThrow();
      goto LABEL_14;
    }
    if ((sub_1B1ADE3D8(0x746E656D67617266, 0xEB000000006E695FLL, v28, v29, v30, v31) & 1) != 0)
    {
      sub_1B1EE7108(5, v28, v29, v30, v31, v13, v151);
      swift_bridgeObjectRelease();
      sub_1B1EE66E0((uint64_t)v164);
      sub_1B1EF1B60((uint64_t)v164);
      if (a4 != 3)
      {
        if (a4 == 1)
        {
          swift_bridgeObjectRelease();
LABEL_79:
          v89 = sub_1B1EEDA60((__int128 *)v9);
          swift_bridgeObjectRelease();
          swift_unknownObjectRelease();
          v90 = swift_allocObject();
          *(_QWORD *)(v90 + 16) = v89;
          *(_QWORD *)(v90 + 24) = 0;
          *(_QWORD *)(v90 + 32) = 0;
          *(_QWORD *)(v90 + 40) = 0;
          v16 = (_OWORD *)(v90 | 0xD000000000000000);
          *(_BYTE *)(v90 + 48) = 2;
          goto LABEL_19;
        }
        v88 = sub_1B2229D24();
        swift_bridgeObjectRelease();
        if ((v88 & 1) != 0)
          goto LABEL_79;
      }
      v91 = *(_OWORD *)(v9 + 48);
      v193[2] = *(_OWORD *)(v9 + 32);
      v193[3] = v91;
      v194 = *(_QWORD *)(v9 + 64);
      v92 = *(_OWORD *)(v9 + 16);
      v193[0] = *(_OWORD *)v9;
      v193[1] = v92;
      sub_1B1EF1B88((uint64_t)v193);
      v64 = sub_1B1EE6458();
      v16 = v93;
      v66 = v193;
      goto LABEL_65;
    }
    if ((sub_1B1ADE3D8(0x746E656D67617266, 0xEC00000074756F5FLL, v28, v29, v30, v31) & 1) != 0)
    {
      sub_1B1EE7108(5, v28, v29, v30, v31, v13, v151);
      swift_bridgeObjectRelease();
      sub_1B1EE66E0((uint64_t)v165);
      sub_1B1EF1B60((uint64_t)v165);
      if (a4 != 3)
      {
        if (a4 == 1)
        {
          swift_bridgeObjectRelease();
LABEL_90:
          sub_1B1EEDDB8((__int128 *)v9);
          swift_bridgeObjectRelease();
          swift_unknownObjectRelease();
          v101 = swift_allocObject();
          *(_QWORD *)(v101 + 16) = 1;
          *(_QWORD *)(v101 + 24) = 0;
          *(_QWORD *)(v101 + 32) = 0;
          *(_QWORD *)(v101 + 40) = 0;
          v16 = (_OWORD *)(v101 | 0xD000000000000000);
          *(_BYTE *)(v101 + 48) = 6;
          goto LABEL_19;
        }
        v100 = sub_1B2229D24();
        swift_bridgeObjectRelease();
        if ((v100 & 1) != 0)
          goto LABEL_90;
      }
      v102 = *(_OWORD *)(v9 + 48);
      v195[2] = *(_OWORD *)(v9 + 32);
      v195[3] = v102;
      v196 = *(_QWORD *)(v9 + 64);
      v103 = *(_OWORD *)(v9 + 16);
      v195[0] = *(_OWORD *)v9;
      v195[1] = v103;
      sub_1B1EF1B88((uint64_t)v195);
      v64 = sub_1B1EE6458();
      v16 = v104;
      v66 = v195;
      goto LABEL_65;
    }
    if ((sub_1B1ADE3D8(0x6C6169726574616DLL, 0xE800000000000000, v28, v29, v30, v31) & 1) != 0)
    {
      sub_1B1EE7108(5, v28, v29, v30, v31, v13, v151);
      swift_bridgeObjectRelease();
      if (a4 <= 1u)
      {
        sub_1B1EEE314(v9, (uint64_t)v166);
        swift_bridgeObjectRelease();
        swift_unknownObjectRelease();
        v61 = swift_allocObject();
        sub_1B1CAECBC(v166, v61 + 16);
        v16 = (_OWORD *)(v61 | 0xD000000000000000);
        goto LABEL_19;
      }
      sub_1B1EF1B88((uint64_t)v189);
      v69 = sub_1B1EE6458();
      v16 = v95;
      v71 = v189;
      goto LABEL_85;
    }
    if ((sub_1B1ADE3D8(0x3165727574786574, 0xE900000000000064, v28, v29, v30, v31) & 1) == 0
      && (sub_1B1ADE3D8(0x3265727574786574, 0xE900000000000064, v28, v29, v30, v31) & 1) == 0
      && (sub_1B1ADE3D8(0x3365727574786574, 0xE900000000000064, v28, v29, v30, v31) & 1) == 0)
    {
      swift_bridgeObjectRelease();
      sub_1B1EF1B88((uint64_t)v189);
      sub_1B2229430();
      swift_bridgeObjectRelease();
      v152 = 0xD00000000000001BLL;
      v153 = 0x80000001B2342C70;
      sub_1B1EF1B88((uint64_t)v189);
      sub_1B1EE6378();
      sub_1B1EF1BBC((uint64_t)v189);
      sub_1B2228890();
      swift_bridgeObjectRelease();
      v16 = (_OWORD *)sub_1B1EE6458();
      v98 = v97;
      swift_bridgeObjectRelease();
      v99 = v189;
LABEL_93:
      sub_1B1EF1BBC((uint64_t)v99);
      sub_1B1EF1A2C();
      swift_allocError();
      *v108 = v16;
      v108[1] = v98;
      goto LABEL_86;
    }
    sub_1B1EE66E0((uint64_t)v167);
    sub_1B1EF1B60((uint64_t)v167);
    v72 = sub_1B1EE9944((uint64_t)&unk_1E6376F40);
    swift_arrayDestroy();
    v81 = (_QWORD *)sub_1B1EEA4A0(v9, 1, v72);
    swift_bridgeObjectRelease();
    if (!v81[2] || v81[5])
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v82 = *(_OWORD *)(v9 + 48);
      v197[2] = *(_OWORD *)(v9 + 32);
      v197[3] = v82;
      v198 = *(_QWORD *)(v9 + 64);
      v83 = *(_OWORD *)(v9 + 16);
      v197[0] = *(_OWORD *)v9;
      v197[1] = v83;
      sub_1B1EF1B88((uint64_t)v197);
      v69 = sub_1B1EE6458();
      v16 = v84;
      v71 = v197;
LABEL_85:
      sub_1B1EF1BBC((uint64_t)v71);
      sub_1B1EF1A2C();
      swift_allocError();
      *v96 = v69;
      v96[1] = (uint64_t)v16;
LABEL_86:
      swift_willThrow();
      goto LABEL_14;
    }
    v109 = v81[7];
    v150 = v81[6];
    if ((sub_1B1ADE3D8(0x3165727574786574, 0xE900000000000064, v28, v29, v30, v31) & 1) != 0)
    {
      v110 = 0;
    }
    else
    {
      if ((sub_1B1ADE3D8(0x3265727574786574, 0xE900000000000064, v28, v29, v30, v31) & 1) == 0)
      {
        v117 = sub_1B1ADE3D8(0x3365727574786574, 0xE900000000000064, v28, v29, v30, v31);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        if ((v117 & 1) == 0)
          goto LABEL_133;
        v110 = 2;
LABEL_103:
        sub_1B1EE7B1C((uint64_t)v81, 0x5F73736572646461, 0xEC00000065646F6DLL);
        if (v119)
        {
          v120 = v118;
          v121 = v119;
          swift_bridgeObjectRetain();
          v122 = sub_1B1EEE880(v120, v121);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        else
        {
          v122 = 2;
        }
        sub_1B1EE7B1C((uint64_t)v81, 0x6D5F7265746C6966, 0xEB0000000065646FLL);
        if (v124)
        {
          v125 = v123;
          v126 = v124;
          swift_bridgeObjectRetain();
          LOBYTE(v125) = sub_1B1EEEB28(v125, v126);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_unknownObjectRelease();
          swift_bridgeObjectRelease();
          v134 = v125 & 1;
          swift_bridgeObjectRelease();
        }
        else
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_unknownObjectRelease();
          v134 = 1;
        }
        v135 = swift_allocObject();
        *(_QWORD *)(v135 + 16) = v150;
        *(_QWORD *)(v135 + 24) = v109;
        *(_BYTE *)(v135 + 32) = 1;
        *(_BYTE *)(v135 + 33) = v110;
        *(_BYTE *)(v135 + 34) = v122;
        v16 = (_OWORD *)(v135 | 0x7000000000000000);
        *(_BYTE *)(v135 + 35) = v134;
        goto LABEL_19;
      }
      v110 = 1;
    }
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    goto LABEL_103;
  }
  sub_1B1EE7108(5, v28, v29, v30, v31, v13, v151);
  swift_bridgeObjectRelease();
  if ((a3 & 1) == 0)
    goto LABEL_64;
  sub_1B1EE66E0((uint64_t)v160);
  sub_1B1EF1B60((uint64_t)v160);
  sub_1B1EE9260(2u);
  v49 = sub_1B1EE9AF8((uint64_t *)v9);
  v50 = v48;
  if (v49 == 0x7865646E69 && v48 == 0xE500000000000000 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    if (a2 == 1)
    {
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
      v16 = (_OWORD *)0xF000000000000008;
      goto LABEL_19;
    }
    v85 = *(_OWORD *)(v9 + 48);
    v181[2] = *(_OWORD *)(v9 + 32);
    v181[3] = v85;
    v182 = *(_QWORD *)(v9 + 64);
    v86 = *(_OWORD *)(v9 + 16);
    v181[0] = *(_OWORD *)v9;
    v181[1] = v86;
    sub_1B1EF1B88((uint64_t)v181);
    v69 = sub_1B1EE6458();
    v16 = v87;
    v71 = v181;
    goto LABEL_85;
  }
  sub_1B1DCE0A4(v49, v50, (uint64_t)v161);
  swift_bridgeObjectRelease();
  sub_1B1A18378((uint64_t)v161, (uint64_t)&v168, (unint64_t *)&unk_1ED4B8880, (uint64_t)&type metadata for ScriptKeyPath);
  if (!*((_QWORD *)&v168 + 1))
  {
    v105 = *(_OWORD *)(v9 + 48);
    v187[2] = *(_OWORD *)(v9 + 32);
    v187[3] = v105;
    v188 = *(_QWORD *)(v9 + 64);
    v106 = *(_OWORD *)(v9 + 16);
    v187[0] = *(_OWORD *)v9;
    v187[1] = v106;
    sub_1B1EF1B88((uint64_t)v187);
    sub_1B2229430();
    swift_bridgeObjectRelease();
    v152 = 0xD00000000000001BLL;
    v153 = 0x80000001B2342DE0;
    sub_1B1EF1B88((uint64_t)v187);
    sub_1B1EE6378();
    sub_1B1EF1BBC((uint64_t)v187);
    sub_1B2228890();
    swift_bridgeObjectRelease();
    v16 = (_OWORD *)sub_1B1EE6458();
    v98 = v107;
    swift_bridgeObjectRelease();
    v99 = v187;
    goto LABEL_93;
  }
  v174 = v168;
  v149 = v169;
  v172 = v170;
  v173 = v171;
  v94 = sub_1B1EE9944((uint64_t)&unk_1E6376F80);
  swift_arrayDestroy();
  v111 = sub_1B1EEA4A0(v9, 1, v94);
  swift_bridgeObjectRelease();
  sub_1B1EE7B1C(v111, 0x6563617073, 0xE500000000000000);
  if (!v113)
  {
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    v127 = 5;
    goto LABEL_130;
  }
  v114 = v112;
  v115 = v113;
  swift_bridgeObjectRetain();
  v116 = sub_1B1EEB438(v114, v115);
  v127 = v116;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (a4 == 3)
    goto LABEL_111;
  if (a4 != 1)
  {
    v136 = sub_1B2229D24();
    swift_bridgeObjectRelease();
    if ((v136 & 1) != 0)
      goto LABEL_120;
    if ((_BYTE)a4)
    {
      v137 = sub_1B2229D24();
      swift_bridgeObjectRelease();
      if ((v137 & 1) == 0)
      {
LABEL_111:
        v128 = *(_OWORD *)(v9 + 48);
        v185[2] = *(_OWORD *)(v9 + 32);
        v185[3] = v128;
        v186 = *(_QWORD *)(v9 + 64);
        v129 = *(_OWORD *)(v9 + 16);
        v185[0] = *(_OWORD *)v9;
        v185[1] = v129;
        sub_1B1EF1B88((uint64_t)v185);
        v130 = sub_1B1EE6458();
        v16 = v131;
        sub_1B1EF1BBC((uint64_t)v185);
        sub_1B1EF1A2C();
        swift_allocError();
        *v132 = v130;
        v132[1] = (uint64_t)v16;
        swift_willThrow();
        v176 = v174;
        v133 = &v176;
LABEL_83:
        sub_1B1BA80C0((uint64_t)v133);
        swift_release();
        goto LABEL_14;
      }
      goto LABEL_120;
    }
  }
  swift_bridgeObjectRelease();
LABEL_120:
  sub_1B2229304();
  if (swift_conformsToProtocol2())
  {
    if (!swift_dynamicCastMetatype()
      && !swift_dynamicCastMetatype()
      && !swift_dynamicCastMetatype()
      && !swift_dynamicCastMetatype()
      && !swift_dynamicCastMetatype()
      && !swift_dynamicCastMetatype()
      && !swift_dynamicCastMetatype()
      && !swift_dynamicCastMetatype())
    {
      v139 = *(_OWORD *)(v9 + 48);
      v183[2] = *(_OWORD *)(v9 + 32);
      v183[3] = v139;
      v184 = *(_QWORD *)(v9 + 64);
      v140 = *(_OWORD *)(v9 + 16);
      v183[0] = *(_OWORD *)v9;
      v183[1] = v140;
      sub_1B1EF1B88((uint64_t)v183);
      v141 = sub_1B1EE6458();
      v16 = v142;
      sub_1B1EF1BBC((uint64_t)v183);
      sub_1B1EF1A2C();
      swift_allocError();
      *v143 = v141;
      v143[1] = (uint64_t)v16;
      swift_willThrow();
      v175 = v174;
      v133 = &v175;
      goto LABEL_83;
    }
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
LABEL_130:
    v138 = swift_allocObject();
    *(_QWORD *)(v138 + 32) = v149;
    *(_OWORD *)(v138 + 16) = v174;
    *(_OWORD *)(v138 + 40) = v172;
    *(_DWORD *)(v138 + 56) = v173;
    *(_BYTE *)(v138 + 60) = v127;
    v16 = (_OWORD *)(v138 | 0x9000000000000000);
    goto LABEL_19;
  }
  __break(1u);
LABEL_133:
  result = sub_1B2229688();
  __break(1u);
  return result;
}

uint64_t sub_1B1EF0B78@<X0>(uint64_t *a1@<X0>, unsigned __int8 a2@<W1>, char a3@<W2>, int a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  char v19;
  uint64_t result;
  uint64_t v21;
  char v22;
  char v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  char v36;
  uint64_t v37;
  __int128 v39;
  __int128 v40;
  _BYTE v41[48];
  uint64_t v42;
  uint64_t v43;

  v11 = *a1;
  v10 = a1[1];
  v43 = a1[2];
  v12 = a1[7];
  v13 = a1[8];
  *(_QWORD *)&v40 = v11;
  *((_QWORD *)&v40 + 1) = v10;
  *(_QWORD *)v41 = v43;
  v39 = *(_OWORD *)(a1 + 3);
  *(_OWORD *)&v41[8] = v39;
  *(_OWORD *)&v41[24] = *(_OWORD *)(a1 + 5);
  *(_QWORD *)&v41[40] = v12;
  v42 = v13;
  if (a2 > 1u)
  {
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    swift_bridgeObjectRelease();
  }
  else
  {
    v14 = sub_1B2229D24();
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    swift_bridgeObjectRelease();
    if ((v14 & 1) == 0)
    {
      v15 = (unint64_t)v39 >> 1;
      v16 = sub_1B1EEECAC((uint64_t)&v40, a2, a3 & 1, a4);
      if (!v5)
      {
        v21 = v16;
        v23 = v17;
        v36 = v19;
        v37 = v18;
        sub_1B1EE9260(0xEu);
        goto LABEL_10;
      }
LABEL_9:
      swift_unknownObjectRelease();
      return swift_bridgeObjectRelease();
    }
  }
  sub_1B1EE9260(0xEu);
  if (v5)
    goto LABEL_9;
  sub_1B1EE9260(0xEu);
  sub_1B1EE9260(3u);
  v21 = sub_1B1EEECAC((uint64_t)&v40, a2, a3 & 1, a4);
  v23 = v22;
  v36 = v24;
  v37 = v25;
  v15 = (unint64_t)v39 >> 1;
LABEL_10:
  if (v43 != v15)
    swift_bridgeObjectRetain();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  v26 = sub_1B2228974();
  v28 = v27;
  v30 = v29;
  v32 = v31;
  result = swift_bridgeObjectRelease();
  v33 = v42;
  v34 = *(_OWORD *)v41;
  *(_OWORD *)a1 = v40;
  *((_OWORD *)a1 + 1) = v34;
  v35 = *(_OWORD *)&v41[32];
  *((_OWORD *)a1 + 2) = *(_OWORD *)&v41[16];
  *((_OWORD *)a1 + 3) = v35;
  a1[8] = v33;
  *(_QWORD *)a5 = v21;
  *(_BYTE *)(a5 + 8) = v23;
  *(_QWORD *)(a5 + 16) = v37;
  *(_BYTE *)(a5 + 24) = v36 & 1;
  *(_QWORD *)(a5 + 32) = v26;
  *(_QWORD *)(a5 + 40) = v28;
  *(_QWORD *)(a5 + 48) = v30;
  *(_QWORD *)(a5 + 56) = v32;
  return result;
}

_QWORD *sub_1B1EF0E94(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4, unsigned __int8 a5, char a6, int a7)
{
  uint64_t v7;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  char v20;
  unint64_t v21;
  int v22;
  unint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  _OWORD *v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  __int128 v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  unint64_t v44;
  _OWORD v45[2];
  uint64_t v46;
  _OWORD v47[4];
  _QWORD *v48;
  _QWORD *v49;
  uint64_t v50;
  unint64_t v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  int v55;
  int v56;

  v11 = (_QWORD *)a4;
  sub_1B1EE7FDC(a1, a2, a3, a4, a5);
  if (v7)
    return v11;
  v55 = a7;
  sub_1B2228974();
  v12 = sub_1B22291C0();
  v16 = sub_1B1EE5D74(v12, v13, v14, v15, 0);
  swift_bridgeObjectRelease();
  v17 = v16[2];
  swift_bridgeObjectRelease();
  v18 = 0;
  v19 = v16 + 4;
  v20 = 1;
  v21 = (2 * v17) | 1;
  v41 = v16;
  v42 = v16 + 4;
  v43 = 0;
  v44 = v21;
  memset(v45, 0, sizeof(v45));
  v46 = 0;
  v11 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v56 = a6 & 1;
  v22 = v55;
  while (1)
  {
    v23 = v21 >> 1;
    if (v18 == v21 >> 1)
      break;
    if (LOBYTE(v19[5 * v18]) == 16)
      goto LABEL_16;
    if ((v20 & 1) == 0)
    {
      v34 = v46;
      if (LOBYTE(v19[5 * v18]))
        goto LABEL_17;
      v24 = &v19[5 * v18];
      v40 = *(_OWORD *)(v24 + 1);
      v25 = v24[3];
      v26 = v24[4];
      v27 = v18 + 1;
      v43 = v18 + 1;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)&v45[0] = 0;
      *(_OWORD *)((char *)v45 + 8) = v40;
      *((_QWORD *)&v45[1] + 1) = v25;
      v46 = v26;
      v22 = v55;
      if (v27 != v23 && LOBYTE(v19[5 * v27]) == 16)
      {
LABEL_16:
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
        return v11;
      }
    }
LABEL_11:
    sub_1B1EF0B78((uint64_t *)&v41, a5, v56, v22, (uint64_t)v47);
    sub_1B1EF1A70((unint64_t *)v47);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v11 = sub_1B1C65A28(0, v11[2] + 1, 1, v11);
    v29 = v11[2];
    v28 = v11[3];
    if (v29 >= v28 >> 1)
      v11 = sub_1B1C65A28(v28 > 1, v29 + 1, 1, v11);
    v11[2] = v29 + 1;
    v30 = &v11[8 * v29];
    v31 = v47[0];
    v32 = v47[1];
    v33 = v47[3];
    v30[4] = v47[2];
    v30[5] = v33;
    v30[2] = v31;
    v30[3] = v32;
    sub_1B1EF1AA4((unint64_t *)v47);
    v20 = 0;
    v16 = v41;
    v19 = v42;
    v18 = v43;
    v21 = v44;
  }
  if ((v20 & 1) != 0)
    goto LABEL_11;
  v34 = v46;
LABEL_17:
  v48 = v16;
  v49 = v19;
  v50 = v18;
  v51 = v21;
  v52 = v45[0];
  v53 = v45[1];
  v54 = v34;
  sub_1B2229430();
  sub_1B2228890();
  sub_1B22295EC();
  sub_1B2228890();
  sub_1B1EE6378();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  v35 = sub_1B1EE6458();
  v37 = v36;
  swift_bridgeObjectRelease();
  sub_1B1EF1A2C();
  swift_allocError();
  *v38 = v35;
  v38[1] = v37;
  swift_willThrow();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  return v11;
}

uint64_t sub_1B1EF1234(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v23;
  uint64_t v25;
  char v26;
  __int128 v28;
  _OWORD v29[2];
  uint64_t v30;

  v4 = *(_QWORD *)(a3 + 16);
  if (!v4)
  {
    v23 = a1;
    swift_bridgeObjectRetain();
    return v23;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v7 = MEMORY[0x1E0DEABD0];
  v8 = (_QWORD *)(a3 + (v4 << 6));
  v25 = MEMORY[0x1E0DEE9B8] + 8;
  v26 = a4;
  do
  {
    if (v8[3])
    {
      v10 = *(v8 - 4);
      v11 = *((_BYTE *)v8 - 24);
      v30 = *v8;
      if (a4)
      {
        if (a4 == 1)
        {
          sub_1B1B1DD24(v10);
          swift_bridgeObjectRetain();
          sub_1B1B1DD24(v10);
          sub_1B1EE7274(v10);
          v29[0] = v28;
          if ((*((_QWORD *)&v28 + 1) & 0x2000000000000000) != 0)
            v9 = HIBYTE(*((_QWORD *)&v29[0] + 1)) & 0xFLL;
          else
            v9 = *(_QWORD *)&v29[0] & 0xFFFFFFFFFFFFLL;
          if (v9)
          {
            swift_bridgeObjectRetain();
            sub_1B1AE7408((uint64_t)v29);
            sub_1B2228890();
            swift_bridgeObjectRelease();
          }
          sub_1B1BA80C0((uint64_t)v29);
          sub_1B2228890();
          swift_bridgeObjectRelease();
          sub_1B2228890();
          swift_bridgeObjectRelease();
          a4 = v26;
        }
        else
        {
          sub_1B1B1DD24(v10);
          swift_bridgeObjectRetain();
          sub_1B1B1DD24(v10);
          sub_1B1C96CF0(v10);
          v13 = v12;
          if (swift_dynamicCastMetatype()
            || (type metadata accessor for frame_constants(0), swift_dynamicCastMetatype())
            || !swift_dynamicCastMetatype()
            && !swift_dynamicCastMetatype()
            && !swift_dynamicCastMetatype()
            && !swift_dynamicCastMetatype()
            && !swift_dynamicCastMetatype()
            && (swift_dynamicCastMetatype()
             || swift_dynamicCastMetatype()
             || (sub_1B1AED5E4(0, (unint64_t *)&qword_1ED4B9F38, MEMORY[0x1E0DEB188], (uint64_t)&off_1E63C66D8, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for Curve), swift_dynamicCastMetatype())|| !swift_dynamicCastMetatype()&& (v13 == MEMORY[0x1E0DEE9B8] + 8|| swift_dynamicCastMetatype()|| (type metadata accessor for __vfx_sampler1d(0), swift_dynamicCastMetatype())|| (type metadata accessor for __vfx_sampler2d(0), swift_dynamicCastMetatype())|| (type metadata accessor for __vfx_sampler3d(0), swift_dynamicCastMetatype())|| (swift_conformsToProtocol2() ? (v20 = v13) : (v20 = 0), v20))))
          {
            if ((v11 & 2) != 0)
              v14 = MEMORY[0x1E0DEBC10];
            else
              v14 = v7;
          }
          else
          {
            sub_1B1C96CF0(v10);
          }
          sub_1B1B4F95C(v14, 2);
          sub_1B2228890();
          swift_bridgeObjectRelease();
        }
        goto LABEL_9;
      }
      sub_1B1B1DD24(v10);
      swift_bridgeObjectRetain();
      sub_1B1B1DD24(v10);
      sub_1B1C96CF0(v10);
      v16 = v15;
      if (swift_dynamicCastMetatype())
        goto LABEL_22;
      type metadata accessor for frame_constants(0);
      if (swift_dynamicCastMetatype())
        goto LABEL_22;
      if (swift_dynamicCastMetatype()
        || swift_dynamicCastMetatype()
        || swift_dynamicCastMetatype()
        || swift_dynamicCastMetatype()
        || swift_dynamicCastMetatype())
      {
LABEL_45:
        sub_1B1C96CF0(v10);
        goto LABEL_25;
      }
      if (!swift_dynamicCastMetatype() && !swift_dynamicCastMetatype())
      {
        sub_1B1AED5E4(0, (unint64_t *)&qword_1ED4B9F38, MEMORY[0x1E0DEB188], (uint64_t)&off_1E63C66D8, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for Curve);
        if (!swift_dynamicCastMetatype())
        {
          if (swift_dynamicCastMetatype())
          {
            if ((sub_1B2229D24() & 1) != 0)
              goto LABEL_45;
          }
          else if (v16 != v25 && !swift_dynamicCastMetatype())
          {
            type metadata accessor for __vfx_sampler1d(0);
            if (!swift_dynamicCastMetatype())
            {
              type metadata accessor for __vfx_sampler2d(0);
              if (!swift_dynamicCastMetatype())
              {
                type metadata accessor for __vfx_sampler3d(0);
                if (!swift_dynamicCastMetatype() && !(swift_conformsToProtocol2() ? v16 : 0))
                  goto LABEL_45;
              }
            }
          }
        }
      }
LABEL_22:
      if ((v11 & 2) != 0)
        v17 = MEMORY[0x1E0DEBC10];
      else
        v17 = v7;
LABEL_25:
      sub_1B1B4F95C(v17, 0);
      sub_1B1C96CF0(v10);
      v19 = v18;
      if (swift_dynamicCastMetatype())
        goto LABEL_9;
      type metadata accessor for frame_constants(0);
      if (swift_dynamicCastMetatype())
        goto LABEL_9;
      if (!swift_dynamicCastMetatype()
        && !swift_dynamicCastMetatype()
        && !swift_dynamicCastMetatype()
        && !swift_dynamicCastMetatype()
        && !swift_dynamicCastMetatype())
      {
        if (swift_dynamicCastMetatype())
          goto LABEL_9;
        if (swift_dynamicCastMetatype())
          goto LABEL_9;
        sub_1B1AED5E4(0, (unint64_t *)&qword_1ED4B9F38, MEMORY[0x1E0DEB188], (uint64_t)&off_1E63C66D8, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for Curve);
        if (swift_dynamicCastMetatype())
          goto LABEL_9;
        if (swift_dynamicCastMetatype())
        {
          if ((sub_1B2229D24() & 1) == 0)
            goto LABEL_9;
        }
        else
        {
          if (v19 == MEMORY[0x1E0DEE9B8] + 8)
            goto LABEL_9;
          if (swift_dynamicCastMetatype())
            goto LABEL_9;
          type metadata accessor for __vfx_sampler1d(0);
          if (swift_dynamicCastMetatype())
            goto LABEL_9;
          type metadata accessor for __vfx_sampler2d(0);
          if (swift_dynamicCastMetatype())
            goto LABEL_9;
          type metadata accessor for __vfx_sampler3d(0);
          if (swift_dynamicCastMetatype())
            goto LABEL_9;
          if (swift_conformsToProtocol2() ? v19 : 0)
            goto LABEL_9;
        }
      }
      sub_1B2228890();
LABEL_9:
      sub_1B1CAED6C();
      sub_1B22287F4();
      sub_1B1A05610(v10);
      sub_1B1A05610(v10);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v7 = MEMORY[0x1E0DEABD0];
    }
    v8 -= 8;
    --v4;
  }
  while (v4);
  swift_bridgeObjectRelease();
  return a1;
}

unint64_t sub_1B1EF1A2C()
{
  unint64_t result;

  result = qword_1EEF609F0;
  if (!qword_1EEF609F0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B229E608, &type metadata for ScriptParser.Error);
    atomic_store(result, (unint64_t *)&qword_1EEF609F0);
  }
  return result;
}

unint64_t *sub_1B1EF1A70(unint64_t *a1)
{
  sub_1B1B1DD24(*a1);
  swift_bridgeObjectRetain();
  return a1;
}

unint64_t *sub_1B1EF1AA4(unint64_t *a1)
{
  sub_1B1A05610(*a1);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1B1EF1AD8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1B1A02758(0, (unint64_t *)&unk_1ED4B9F40, (uint64_t)&type metadata for Lexer.Token, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1B1EF1B34()
{
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1B1EF1B60(uint64_t a1)
{
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1B1EF1B88(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  return a1;
}

uint64_t sub_1B1EF1BBC(uint64_t a1)
{
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1B1EF1BF0()
{
  return sub_1B1791240();
}

uint64_t sub_1B1EF1BF8()
{
  uint64_t v0;

  sub_1B1B631E8(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_BYTE *)(v0 + 48));
  return swift_deallocObject();
}

uint64_t sub_1B1EF1C24()
{
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1B1EF1C50()
{
  return sub_1B1791240();
}

uint64_t sub_1B1EF1C58()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1B1EF1C7C()
{
  return swift_deallocObject();
}

unint64_t sub_1B1EF1C8C()
{
  unint64_t result;

  result = qword_1EEF609F8;
  if (!qword_1EEF609F8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B227C038, &type metadata for MetalScriptCodeGen.FunctionKind);
    atomic_store(result, (unint64_t *)&qword_1EEF609F8);
  }
  return result;
}

uint64_t sub_1B1EF1CD0()
{
  uint64_t v0;

  sub_1B1B28D2C(*(_QWORD *)(v0 + 24));
  return swift_deallocObject();
}

unint64_t sub_1B1EF1CF4()
{
  unint64_t result;

  result = qword_1EEF60A08;
  if (!qword_1EEF60A08)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B229E5C8, &type metadata for Lexer.Error);
    atomic_store(result, (unint64_t *)&qword_1EEF60A08);
  }
  return result;
}

void sub_1B1EF1D38()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED4B7B80)
  {
    sub_1B1A02758(255, &qword_1ED4B7B78, MEMORY[0x1E0DEBAF0], MEMORY[0x1E0DF1F30]);
    v0 = sub_1B2229124();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED4B7B80);
  }
}

uint64_t sub_1B1EF1DA4(uint64_t a1)
{
  uint64_t v2;

  sub_1B1EF1D38();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1B1EF1DE0@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *(_QWORD *)(result + 8);
  return result;
}

unint64_t sub_1B1EF1DEC()
{
  unint64_t result;

  result = qword_1EEF60A18;
  if (!qword_1EEF60A18)
  {
    result = MEMORY[0x1B5E23E74](MEMORY[0x1E0DEBB00], MEMORY[0x1E0DEBAF0]);
    atomic_store(result, (unint64_t *)&qword_1EEF60A18);
  }
  return result;
}

unint64_t sub_1B1EF1E30()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EEF60A20;
  if (!qword_1EEF60A20)
  {
    sub_1B19F8E54(255, &qword_1EEF60A10, (uint64_t (*)(void))sub_1B1EF1DEC, MEMORY[0x1E0DEBAF0], MEMORY[0x1E0DECCE0]);
    result = MEMORY[0x1B5E23E74](MEMORY[0x1E0DECCF8], v1);
    atomic_store(result, (unint64_t *)&qword_1EEF60A20);
  }
  return result;
}

void sub_1B1EF1E98(uint64_t a1)
{
  sub_1B1791524(a1, &qword_1ED4B7B90, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF1E50], MEMORY[0x1E0DF1F50]);
}

uint64_t sub_1B1EF1EB4()
{
  return sub_1B22282D8();
}

uint64_t sub_1B1EF1ED8()
{
  return 8;
}

BOOL sub_1B1EF1EE4(_QWORD *a1, _QWORD *a2)
{
  return *a2 == *a1;
}

uint64_t sub_1B1EF1EF8()
{
  return sub_1B2228CF8();
}

_QWORD *sub_1B1EF1F00(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

void sub_1B1EF1F0C(uint64_t a1)
{
  sub_1B1791524(a1, &qword_1EEF60A28, (uint64_t (*)(uint64_t))sub_1B1EF1F28, MEMORY[0x1E0DF1F50]);
}

void sub_1B1EF1F28()
{
  unint64_t TupleTypeMetadata3;
  uint64_t v1;

  if (!qword_1EEF60A30)
  {
    sub_1B1A02758(255, &qword_1EEF60A38, MEMORY[0x1E0DEBAF0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v1)
      atomic_store(TupleTypeMetadata3, (unint64_t *)&qword_1EEF60A30);
  }
}

unint64_t sub_1B1EF1FA8()
{
  unint64_t result;

  result = qword_1EEF60A40;
  if (!qword_1EEF60A40)
  {
    result = MEMORY[0x1B5E23E74](MEMORY[0x1E0DEA9B0], MEMORY[0x1E0DEA968]);
    atomic_store(result, (unint64_t *)&qword_1EEF60A40);
  }
  return result;
}

uint64_t sub_1B1EF1FEC(unint64_t a1)
{
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  char v16;
  uint64_t v17;
  id v18;
  char v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  char v29;
  uint64_t v30;
  id v31;
  char v32;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;

  v1 = a1;
  v2 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v5 = sub_1B22296AC();
    swift_bridgeObjectRelease();
    if (v5)
    {
LABEL_3:
      sub_1B1B9D460(0, &qword_1EEF60A58, (uint64_t (*)(uint64_t))sub_1B1C7AF6C, (unint64_t *)&qword_1EEF5CFE8, MEMORY[0x1E0DEFCF8]);
      v3 = sub_1B22293F4();
      if (!v2)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if (*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_3;
  }
  v3 = MEMORY[0x1E0DEE9E8];
  if (!v2)
  {
LABEL_4:
    v4 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v4)
      return v3;
    goto LABEL_9;
  }
LABEL_8:
  swift_bridgeObjectRetain();
  v4 = sub_1B22296AC();
  swift_bridgeObjectRelease();
  if (v4)
  {
LABEL_9:
    v6 = v3 + 56;
    v36 = v4;
    if ((v1 & 0xC000000000000001) != 0)
    {
      v7 = 0;
      v34 = v1;
      while (1)
      {
        v8 = MEMORY[0x1B5E21018](v7, v1);
        v9 = sub_1B2229010();
        v10 = -1 << *(_BYTE *)(v3 + 32);
        v11 = v9 & ~v10;
        v12 = v11 >> 6;
        v13 = *(_QWORD *)(v6 + 8 * (v11 >> 6));
        v14 = 1 << v11;
        if (((1 << v11) & v13) != 0)
        {
          sub_1B1C7AF6C();
          v15 = *(id *)(*(_QWORD *)(v3 + 48) + 8 * v11);
          v16 = sub_1B222901C();

          if ((v16 & 1) != 0)
          {
LABEL_19:
            swift_unknownObjectRelease();
            v1 = v34;
            v4 = v36;
            goto LABEL_13;
          }
          v17 = ~v10;
          while (1)
          {
            v11 = (v11 + 1) & v17;
            v12 = v11 >> 6;
            v13 = *(_QWORD *)(v6 + 8 * (v11 >> 6));
            v14 = 1 << v11;
            if ((v13 & (1 << v11)) == 0)
              break;
            v18 = *(id *)(*(_QWORD *)(v3 + 48) + 8 * v11);
            v19 = sub_1B222901C();

            if ((v19 & 1) != 0)
              goto LABEL_19;
          }
          v1 = v34;
          v4 = v36;
        }
        *(_QWORD *)(v6 + 8 * v12) = v14 | v13;
        *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v11) = v8;
        ++*(_QWORD *)(v3 + 16);
LABEL_13:
        if (++v7 == v4)
          return v3;
      }
    }
    v20 = 0;
    v35 = v1 + 32;
    do
    {
      v21 = *(id *)(v35 + 8 * v20);
      v22 = sub_1B2229010();
      v23 = -1 << *(_BYTE *)(v3 + 32);
      v24 = v22 & ~v23;
      v25 = v24 >> 6;
      v26 = *(_QWORD *)(v6 + 8 * (v24 >> 6));
      v27 = 1 << v24;
      if (((1 << v24) & v26) != 0)
      {
        sub_1B1C7AF6C();
        v28 = *(id *)(*(_QWORD *)(v3 + 48) + 8 * v24);
        v29 = sub_1B222901C();

        if ((v29 & 1) != 0)
        {
LABEL_28:

          goto LABEL_22;
        }
        v30 = ~v23;
        while (1)
        {
          v24 = (v24 + 1) & v30;
          v25 = v24 >> 6;
          v26 = *(_QWORD *)(v6 + 8 * (v24 >> 6));
          v27 = 1 << v24;
          if ((v26 & (1 << v24)) == 0)
            break;
          v31 = *(id *)(*(_QWORD *)(v3 + 48) + 8 * v24);
          v32 = sub_1B222901C();

          if ((v32 & 1) != 0)
            goto LABEL_28;
        }
      }
      *(_QWORD *)(v6 + 8 * v25) = v27 | v26;
      *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v24) = v21;
      ++*(_QWORD *)(v3 + 16);
LABEL_22:
      ++v20;
    }
    while (v20 != v36);
  }
  return v3;
}

ValueMetadata *type metadata accessor for Lexer.Error()
{
  return &type metadata for Lexer.Error;
}

ValueMetadata *type metadata accessor for ScriptParser.Argument()
{
  return &type metadata for ScriptParser.Argument;
}

uint64_t destroy for Lexer.Token()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for Lexer.Token(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v3 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Lexer.Token(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for Lexer.Token(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v3 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AnyValue(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AnyValue(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 32) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for Lexer.Token()
{
  return &type metadata for Lexer.Token;
}

uint64_t destroy for ScriptParser.ParsedScriptParameter(unint64_t *a1)
{
  sub_1B1A05610(*a1);
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ScriptParser.ParsedScriptParameter(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)a2;
  sub_1B1B1DD24(*(_QWORD *)a2);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v5;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ScriptParser.ParsedScriptParameter(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)a2;
  sub_1B1B1DD24(*(_QWORD *)a2);
  v5 = *(_QWORD *)a1;
  *(_QWORD *)a1 = v4;
  sub_1B1A05610(v5);
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for ScriptParser.ParsedScriptParameter(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  sub_1B1A05610(v4);
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ScriptParser.ParsedScriptParameter(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 64))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 56);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ScriptParser.ParsedScriptParameter(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 64) = 0;
    if (a2)
      *(_QWORD *)(result + 56) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for ScriptParser.ParsedScriptParameter()
{
  return &type metadata for ScriptParser.ParsedScriptParameter;
}

ValueMetadata *type metadata accessor for ScriptParser.Error()
{
  return &type metadata for ScriptParser.Error;
}

uint64_t storeEnumTagSinglePayload for Lexer.TokenKind(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 16 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 16) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF0)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xEF)
    return ((uint64_t (*)(void))((char *)&loc_1B1EF2750 + 4 * byte_1B229E3FA[v4]))();
  *a1 = a2 + 16;
  return ((uint64_t (*)(void))((char *)sub_1B1EF2784 + 4 * byte_1B229E3F5[v4]))();
}

uint64_t sub_1B1EF2784(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1EF278C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B1EF2794);
  return result;
}

uint64_t sub_1B1EF27A0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B1EF27A8);
  *(_BYTE *)result = a2 + 16;
  return result;
}

uint64_t sub_1B1EF27AC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1EF27B4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Lexer.TokenKind()
{
  return &type metadata for Lexer.TokenKind;
}

unint64_t sub_1B1EF27D4()
{
  unint64_t result;

  result = qword_1EEF60A60[0];
  if (!qword_1EEF60A60[0])
  {
    result = MEMORY[0x1B5E23E74](&unk_1B229E510, &type metadata for Lexer.TokenKind);
    atomic_store(result, qword_1EEF60A60);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for Lexer(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = (v6 + 2147483646) & 0x7FFFFFFF;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for Lexer(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1B1EF290C + 4 * byte_1B229E404[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1B1EF2940 + 4 * byte_1B229E3FF[v4]))();
}

uint64_t sub_1B1EF2940(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1EF2948(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B1EF2950);
  return result;
}

uint64_t sub_1B1EF295C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B1EF2964);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1B1EF2968(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1EF2970(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Lexer()
{
  return &type metadata for Lexer;
}

uint64_t *sub_1B1EF2990(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  float v3;
  float v4;
  __int128 v5;
  uint64_t v6;
  _QWORD *v7;
  int v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  os_unfair_lock_s *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t i;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  void (*v26)(uint64_t);
  uint64_t v27;
  BOOL v28;
  unint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  uint64_t v34;
  unsigned int v35;
  BOOL v36;
  int v37;
  uint64_t v39;
  _QWORD *v40;
  unint64_t v41;
  uint64_t v42;
  unsigned int v43;
  int v44;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  int v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unsigned __int16 *v67;
  uint64_t v68[12];
  _QWORD v69[7];
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  _QWORD v74[10];
  char v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _OWORD v79[2];
  uint64_t v80;

  v2 = *a1;
  swift_retain();
  sub_1B1E5267C();
  v4 = v3;
  v5 = *(_OWORD *)(v1 + 32);
  v79[0] = *(_OWORD *)(v1 + 16);
  v79[1] = v5;
  v80 = *(_QWORD *)(v1 + 48);
  sub_1B1E8FCE4(v2, (uint64_t)v79, 0x200000000, v68);
  sub_1B19ED688((uint64_t)v68, (uint64_t)v69);
  v67 = (unsigned __int16 *)v69[0];
  if (!v69[0])
    return (uint64_t *)swift_release();
  v57 = v73;
  if (v73 > 0)
  {
    v56 = v70;
    if (v70)
    {
      v6 = 0;
      v55 = v69[5];
      v7 = v72;
      v8 = *(unsigned __int8 *)(v71 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
      v9 = v72[4];
      v52 = v72 + 8;
      v66 = v69[0] + 41;
      v51 = v8;
      v53 = v9;
      v54 = v71;
      do
      {
        v62 = v6;
        v10 = (unsigned int *)(v55 + 48 * v6);
        v11 = *v10;
        v12 = v10[1];
        v13 = v10[2];
        v14 = *((_QWORD *)v10 + 3);
        v63 = *((_QWORD *)v10 + 2);
        v16 = *((_QWORD *)v10 + 4);
        v15 = *((_QWORD *)v10 + 5);
        if (v8)
        {
          v17 = *(os_unfair_lock_s **)(v15 + 376);
          swift_retain_n();
          os_unfair_lock_lock(v17);
          os_unfair_lock_lock(*(os_unfair_lock_t *)(v15 + 344));
          swift_release();
        }
        else
        {
          swift_retain();
        }
        ecs_stack_allocator_push_snapshot(v9);
        v59 = v7[7];
        v60 = v7[6];
        v58 = v7[8];
        v64 = v7[10];
        v65 = v7[9];
        v18 = v7[4];
        v19 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v15 + 40) + 16) + 32) + 16) + 1;
        swift_retain();
        v7[6] = ecs_stack_allocator_allocate(v18, 48 * v19, 8);
        v7[7] = v19;
        v52[1] = 0;
        v52[2] = 0;
        *v52 = 0;
        swift_release();
        v74[0] = v54;
        v74[1] = v15;
        v61 = v15;
        v74[2] = v7;
        v74[3] = v13;
        v74[4] = (v12 - v11 + v13);
        v74[5] = v57;
        v74[6] = v11;
        v74[7] = v12;
        v74[8] = 0;
        v74[9] = 0;
        v75 = 1;
        v76 = v63;
        v77 = v14;
        v78 = v16;
        sub_1B1EF2E18(v74, v4);
        v20 = v7[6];
        v21 = v7[8];
        if (!v21)
        {
          v47 = v7[7];
          v48 = (_QWORD *)v7[4];
          v49 = v62;
          v8 = v51;
          goto LABEL_46;
        }
        for (i = 0; i != v21; ++i)
        {
          v24 = (uint64_t *)(v20 + 48 * i);
          v25 = *v24;
          v26 = (void (*)(uint64_t))v24[4];
          v27 = v7[9];
          if (v27)
            v28 = v25 == v27;
          else
            v28 = 0;
          if (v28 || !v67[11])
            goto LABEL_11;
          v29 = v67[9];
          v30 = (_QWORD *)(v66 + v67[8]);
          v31 = v24[2];
          v32 = v30;
          v33 = v29 >> 4;
          v34 = v66;
          if (v29 >= 0x10)
          {
            while (*v32 != v25)
            {
              ++v34;
              v32 += 2;
              if (!--v33)
                goto LABEL_26;
            }
            v35 = *(unsigned __int8 *)(v34 + v67[10]);
            v36 = v35 > 5;
            v37 = (1 << v35) & 0x23;
            if (v36 || v37 == 0)
            {
LABEL_11:
              v23 = swift_retain();
              v26(v23);
              swift_release();
              continue;
            }
          }
LABEL_26:
          if (swift_conformsToProtocol2())
            v39 = v31;
          else
            v39 = 0;
          if (v39)
          {
            if (v29 < 0x10)
              goto LABEL_11;
            v40 = v30;
            v41 = v29 >> 4;
            v42 = v66;
            while (*v40 != v39)
            {
              ++v42;
              v40 += 2;
              if (!--v41)
                goto LABEL_39;
            }
            v43 = *(unsigned __int8 *)(v42 + v67[10]);
            v36 = v43 > 5;
            v44 = (1 << v43) & 0x23;
            if (v36 || v44 == 0)
              goto LABEL_11;
LABEL_39:
            v46 = 16 * (v29 >> 4);
            while (*v30 != v39)
            {
              v30 += 2;
              v46 -= 16;
              if (!v46)
                goto LABEL_11;
            }
          }
        }
        v47 = v7[7];
        v20 = v7[6];
        v48 = (_QWORD *)v7[4];
        v49 = v62;
        v8 = v51;
        if ((uint64_t)v7[8] >= 1)
          swift_arrayDestroy();
LABEL_46:
        ecs_stack_allocator_deallocate(v48, v20, 48 * v47);
        v7[6] = v60;
        v7[7] = v59;
        v7[8] = v58;
        v7[9] = v65;
        v7[10] = v64;
        sub_1B1F03804((char *)v61);
        v9 = v53;
        ecs_stack_allocator_pop_snapshot(v53);
        if ((v8 & 1) != 0)
        {
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v61 + 344));
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v61 + 376));
        }
        swift_release();
        v6 = v49 + 1;
      }
      while (v6 != v56);
    }
  }
  swift_release();
  return sub_1B19ED748(v68);
}

uint64_t sub_1B1EF2E18(_QWORD *a1, float a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t i;
  float v17;
  _QWORD *v18;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _OWORD v27[3];
  __int128 v28;
  uint64_t v29;
  _OWORD v30[2];
  uint64_t v31;
  char v32;

  v4 = (uint64_t *)a1[11];
  v5 = a1[12];
  v6 = a1[13];
  v8 = a1[1];
  v7 = a1[2];
  v9 = sub_1B1A12038((uint64_t)&type metadata for ParticleAge, (uint64_t)&off_1E63717C8, v4, v5, v6, v7);
  v10 = sub_1B1A12038((uint64_t)&type metadata for ParticleLifetime, (uint64_t)&off_1E6389120, v4, v5, v6, v7);
  v11 = a1[6];
  v12 = a1[7];
  v13 = ecs_stack_allocator_allocate(*(_QWORD *)(v7 + 32), 8 * (v12 - v11), 8);
  v14 = v13;
  v15 = 0;
  for (i = v12 - v11; v12 != v11; ++v11)
  {
    v17 = *(float *)(v9 + 4 * v11) + (float)(*(float *)(v10 + 4 * v11) * a2);
    if (v17 >= 1.0)
      v13[v15++] = v11;
    else
      *(float *)(v9 + 4 * v11) = v17;
  }
  v31 = 0;
  memset(v30, 0, sizeof(v30));
  v32 = 5;
  if (v15 < 1)
  {
    swift_retain();
  }
  else
  {
    if (v15 == *(_QWORD *)(v8 + 240) - *(_QWORD *)(v8 + 232))
    {
      sub_1B1BE90FC((uint64_t)v30, (uint64_t)v27);
      v29 = 0;
      v28 = 0uLL;
    }
    else
    {
      sub_1B1BE90FC((uint64_t)v30, (uint64_t)v27);
      *(_QWORD *)&v28 = v14;
      *((_QWORD *)&v28 + 1) = i;
      v29 = v15;
    }
    v18 = *(_QWORD **)(v7 + 104);
    swift_retain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(v7 + 104) = v18;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v18 = sub_1B1C631A0(0, v18[2] + 1, 1, v18);
      *(_QWORD *)(v7 + 104) = v18;
    }
    v21 = v18[2];
    v20 = v18[3];
    if (v21 >= v20 >> 1)
    {
      v18 = sub_1B1C631A0(v20 > 1, v21 + 1, 1, v18);
      *(_QWORD *)(v7 + 104) = v18;
    }
    v18[2] = v21 + 1;
    v22 = &v18[9 * v21];
    *((_OWORD *)v22 + 2) = v27[0];
    v23 = v27[1];
    v24 = v27[2];
    v25 = v28;
    v22[12] = v29;
    *((_OWORD *)v22 + 4) = v24;
    *((_OWORD *)v22 + 5) = v25;
    *((_OWORD *)v22 + 3) = v23;
  }
  sub_1B1B68F14((uint64_t)v30);
  return swift_release();
}

uint64_t type metadata accessor for ParticleLifeAndDeath.System()
{
  return objc_opt_self();
}

uint64_t sub_1B1EF305C(uint64_t a1)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[2];
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;

  v2 = swift_allocObject();
  v3 = *(_OWORD *)(a1 + 64);
  v8 = *(_OWORD *)(a1 + 48);
  v9 = v3;
  v10 = *(_QWORD *)(a1 + 80);
  sub_1B19F0FC0((uint64_t)v6);
  sub_1B1B4F21C(a1);
  v4 = v6[1];
  *(_OWORD *)(v2 + 16) = v6[0];
  *(_OWORD *)(v2 + 32) = v4;
  *(_QWORD *)(v2 + 48) = v7;
  return v2;
}

const char *sub_1B1EF30DC()
{
  return "ParticleLifeAndDeath";
}

uint64_t sub_1B1EF30F0()
{
  return type metadata accessor for ParticleLifeAndDeath.System();
}

ValueMetadata *type metadata accessor for ParticleLifeAndDeath()
{
  return &type metadata for ParticleLifeAndDeath;
}

uint64_t sub_1B1EF311C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, uint64_t, char *);
  uint64_t result;
  uint64_t v18;

  v11 = *(_QWORD *)(a5 - 8);
  v12 = MEMORY[0x1E0C80A78](a1, a2);
  v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = v16(v12, v12 + *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64), v14);
  if (v8)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 32))(a8, v14, a5);
  return result;
}

uint64_t sub_1B1EF31B4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v21;
  uint64_t v22;
  _UNKNOWN **v23;

  v8 = *(_QWORD *)(v5 + 40);
  v9 = *(_QWORD *)(v5 + 48);
  v10 = *(_QWORD *)(v5 + 16);
  v11 = *(_BYTE *)(v5 + 24);
  v12 = *(_QWORD *)(v5 + 32);
  v13 = type metadata accessor for _BinaryDecoder.DataStream();
  v14 = (_QWORD *)swift_allocObject();
  v14[2] = a2;
  v14[3] = a3;
  v14[4] = 0;
  v22 = v13;
  v23 = &off_1E6382D78;
  *(_QWORD *)&v21 = v14;
  type metadata accessor for _BinaryDecoder();
  v15 = swift_allocObject();
  v16 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v15 + 48) = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v15 + 64) = 0;
  *(_QWORD *)(v15 + 112) = v16;
  sub_1B1A02518(&v21, v15 + 72);
  *(_QWORD *)(v15 + 56) = v9;
  *(_QWORD *)(v15 + 16) = v10;
  *(_BYTE *)(v15 + 24) = v11;
  *(_QWORD *)(v15 + 32) = v12;
  *(_QWORD *)(v15 + 40) = v8;
  sub_1B1A0DC90(a2, a3);
  swift_retain();
  swift_bridgeObjectRetain();
  sub_1B19F8C48(v12);
  sub_1B1EF34A4(a1, a4, a5);
  return swift_release();
}

uint64_t sub_1B1EF32DC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  swift_release();
  sub_1B19E5A18(v1);
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for BinaryDecoder()
{
  return objc_opt_self();
}

uint64_t sub_1B1EF3348()
{
  uint64_t v0;
  uint64_t result;

  if (*(_QWORD *)(v0 + 64))
    return *(_QWORD *)(v0 + 64);
  result = v0;
  *(_QWORD *)(v0 + 64) = v0;
  return result;
}

uint64_t sub_1B1EF3364(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  void (*v5)(uint64_t *);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE v19[24];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v2 = v1;
  v4 = v1[7];
  v22 = v4;
  v5 = (void (*)(uint64_t *))v1[4];
  v6 = v1[5];
  swift_bridgeObjectRetain();
  if (v5)
  {
    v5(&v22);
    v4 = v22;
  }
  v7 = type metadata accessor for _BinaryDecoder();
  sub_1B19FA198(a1, (uint64_t)v19);
  v8 = v2[2];
  v9 = *((_BYTE *)v2 + 24);
  v10 = v20;
  v11 = v21;
  v12 = sub_1B19FC264((uint64_t)v19, v20);
  v13 = MEMORY[0x1E0C80A78](v12, v12);
  v15 = &v19[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(_BYTE *, double))(v16 + 16))(v15, v13);
  v17 = sub_1B1EFD478((uint64_t)v15, v4, v8, v9, (uint64_t)v5, v6, v7, v10, v11);
  swift_retain();
  sub_1B19F8C48((uint64_t)v5);
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v19);
  return v17;
}

uint64_t sub_1B1EF34A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  _BYTE v28[40];
  uint64_t v29[2];
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v33 = a3;
  v6 = sub_1B22287A0();
  MEMORY[0x1E0C80A78](v6, v7);
  v8 = v3 + 72;
  sub_1B19FA198(v3 + 72, (uint64_t)v29);
  v9 = v31;
  v10 = v32;
  sub_1B19FA070(v29, v31);
  v11 = sub_1B2228830();
  v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(v11, v9, v10);
  v14 = v13;
  result = _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v29);
  if (!v4)
  {
    v26 = v3;
    sub_1B1A0DC90(v12, v14);
    sub_1B1F19804(v12, v14);
    v17 = v16;
    sub_1B1A0DADC(v12, v14);
    v29[0] = v17;
    sub_1B2228788();
    sub_1B1EFD960(0, &qword_1ED4BA510, (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x1E0DEAEC8]);
    sub_1B1EFD9A8();
    v18 = sub_1B2228770();
    v20 = v19;
    swift_release();
    if (v20)
    {
      v21 = v18 == 0x30316E6962786676 && v20 == 0xE800000000000000;
      if (v21 || (sub_1B2229D24() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        sub_1B19FA198(v8, (uint64_t)v28);
        v22 = sub_1B1EF3348();
        v23 = *(_QWORD *)(v26 + 48);
        sub_1B1EF87B0((uint64_t)v28, (uint64_t)&v30);
        v29[0] = v22;
        v29[1] = v23;
        swift_bridgeObjectRetain();
        sub_1B1EF87F0((uint64_t)v28);
        sub_1B1EFA2D0(v29[0], (uint64_t)&v30, v29[0], a1, (uint64_t)&type metadata for _BinaryDecoder.SingleValueStore, a2, (uint64_t)&off_1E6382EB8, v33);
        sub_1B1A0DADC(v12, v14);
        return sub_1B1EFCFE8((uint64_t)v29);
      }
      sub_1B1EFD0E0();
      swift_allocError();
      *(_QWORD *)v24 = v18;
      *(_QWORD *)(v24 + 8) = v20;
      v25 = 1;
    }
    else
    {
      sub_1B1EFD0E0();
      swift_allocError();
      *(_QWORD *)v24 = 0;
      *(_QWORD *)(v24 + 8) = 0;
      v25 = 6;
    }
    *(_BYTE *)(v24 + 16) = v25;
    swift_willThrow();
    return sub_1B1A0DADC(v12, v14);
  }
  return result;
}

uint64_t sub_1B1EF376C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[5];

  type metadata accessor for _BinaryDecoder.KeyedStore(0, a2, a3, a4);
  sub_1B19FA198(v4 + 72, (uint64_t)v18);
  swift_allocObject();
  result = sub_1B1EF620C(v18, v8, v9, v10);
  if (!v5)
  {
    v12 = result;
    v13 = swift_retain();
    MEMORY[0x1B5E2064C](v13);
    if (*(_QWORD *)((*(_QWORD *)(v4 + 112) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*(_QWORD *)(v4 + 112) & 0xFFFFFFFFFFFFFF8)
                                                                                        + 0x18) >> 1)
      sub_1B2228AF4();
    sub_1B2228B30();
    sub_1B2228AD0();
    v14 = sub_1B1EF3348();
    v15 = *(_QWORD *)(v4 + 48);
    v18[0] = v14;
    v18[1] = v15;
    v18[2] = v12;
    v17 = type metadata accessor for _BinaryKeyedDecodingContainer(0, a2, a3, v16);
    swift_bridgeObjectRetain();
    MEMORY[0x1B5E23E74](&unk_1B229E984, v17);
    sub_1B22298A4();
    return swift_release();
  }
  return result;
}

uint64_t sub_1B1EF38A8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  swift_allocObject();
  return sub_1B1EF620C(a1, v2, v3, v4);
}

uint64_t sub_1B1EF38F0@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[5];

  v3 = v1;
  sub_1B19FA198((uint64_t)(v1 + 9), (uint64_t)v11);
  v5 = sub_1B1EF3348();
  type metadata accessor for _BinaryDecoder.UnkeyedStore();
  swift_allocObject();
  result = sub_1B1EF7C88(v11, v5);
  if (!v2)
  {
    v7 = result;
    v8 = swift_retain();
    MEMORY[0x1B5E2064C](v8);
    if (*(_QWORD *)((v3[14] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v3[14] & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      sub_1B2228AF4();
    sub_1B2228B30();
    sub_1B2228AD0();
    v9 = v3[8];
    v10 = v3[6];
    a1[3] = &type metadata for _BinaryUnkeyedDecodingContainer;
    a1[4] = sub_1B1EFD910();
    swift_bridgeObjectRetain();
    result = swift_release();
    *a1 = v10;
    a1[1] = v9;
    a1[2] = v7;
  }
  return result;
}

uint64_t sub_1B1EF39F8(uint64_t *a1, void (*a2)(void), uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21[2];
  uint64_t v22;

  v22 = a4;
  v8 = v4 + 72;
  sub_1B19FA198(v4 + 72, (uint64_t)v21);
  sub_1B1E354A4((uint64_t *)(v4 + 72), a1);
  v9 = a1[3];
  v10 = a1[4];
  sub_1B19FA070(a1, v9);
  v11 = (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 56))(v9, v10);
  v13 = v12;
  a2();
  if (v5)
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v21);
  if ((v13 & 1) == 0)
  {
    v15 = a1[3];
    v16 = a1[4];
    sub_1B19FA070(a1, v15);
    v17 = (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 56))(v15, v16);
    if ((v18 & 1) == 0 && v11 == v17)
    {
      v19 = a1[3];
      v20 = a1[4];
      sub_1B19FA070(a1, v19);
      sub_1B1EF3B50(v19, v20);
    }
  }
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0(v8);
  return sub_1B1A02518(v21, v8);
}

uint64_t sub_1B1EF3B50(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = (*(uint64_t (**)(void))(a2 + 40))();
  if (!v2)
    __asm { BR              X10 }
  return result;
}

void sub_1B1EF3BBC(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  va_list va;

  va_start(va, a3);
  v6 = sub_1B1A137F4((uint64_t *)va);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(v6, v4, v5);
  sub_1B1EFD8B4(0, &qword_1ED4B8C38, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))type metadata accessor for _BinaryDecoder.KeyedStore);
  swift_allocObject();
  sub_1B1EF5954((uint64_t *)va);
  if (!v3)
    swift_release();
  JUMPOUT(0x1B1EF3B80);
}

void sub_1B1EF3C20()
{
  uint64_t v0;
  uint64_t v1;

  sub_1B1EF9ACC(v0, v1);
  JUMPOUT(0x1B1EF3B80);
}

void sub_1B1EF3C38()
{
  uint64_t v0;
  uint64_t v1;

  (*(void (**)(uint64_t, uint64_t))(v1 + 48))(v0, v1);
  JUMPOUT(0x1B1EF3B80);
}

void sub_1B1EF3C54()
{
  uint64_t v0;
  uint64_t v1;

  sub_1B1EF97B8(v0, v1);
  JUMPOUT(0x1B1EF3B80);
}

void sub_1B1EF3C6C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_1B1EF896C(v1, v2);
  if (!v0)
    swift_bridgeObjectRelease();
  JUMPOUT(0x1B1EF3B80);
}

void sub_1B1EF3C90()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  int i;

  v3 = sub_1B1EF6CF0(0xA0u, v1, v2);
  if (!v0)
  {
    for (i = v3; i; --i)
      sub_1B1EF3B50(v1, v2);
  }
  JUMPOUT(0x1B1EF3B80);
}

void sub_1B1EF3CD8()
{
  sub_1B2229688();
  __break(1u);
}

uint64_t sub_1B1EF3D2C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  swift_release();
  sub_1B19E5A18(v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0(v0 + 72);
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for _BinaryDecoder()
{
  return objc_opt_self();
}

uint64_t sub_1B1EF3DB0()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1B1EF3DBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1EF376C(a1, a2, a3, a4);
}

uint64_t sub_1B1EF3DDC@<X0>(_QWORD *a1@<X8>)
{
  return sub_1B1EF38F0(a1);
}

uint64_t sub_1B1EF3DFC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE v8[40];

  v3 = *v1;
  sub_1B19FA198(v3 + 72, (uint64_t)v8);
  v4 = sub_1B1EF3348();
  v5 = *(_QWORD *)(v3 + 48);
  a1[3] = (uint64_t)&type metadata for _BinarySingleValueDecodingContainer;
  a1[4] = sub_1B1EF8740();
  v6 = swift_allocObject();
  *a1 = v6;
  sub_1B1EF87B0((uint64_t)v8, v6 + 32);
  *(_QWORD *)(v6 + 16) = v4;
  *(_QWORD *)(v6 + 24) = v5;
  swift_bridgeObjectRetain();
  return sub_1B1EF87F0((uint64_t)v8);
}

void sub_1B1EF3EA4()
{
  __asm { BR              X12 }
}

uint64_t sub_1B1EF3EF0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  __int16 v8;
  char v9;
  char v10;
  char v11;
  char v12;

  if (v3 < BYTE6(a1))
  {
    if (v2)
    {
      v6 = sub_1B2227E4C();
      return *(unsigned __int8 *)(v6 + v3 - sub_1B2227E70());
    }
    else
    {
      v7 = v1;
      v8 = a1;
      v9 = BYTE2(a1);
      v10 = BYTE3(a1);
      v11 = BYTE4(a1);
      v12 = BYTE5(a1);
      return *((unsigned __int8 *)&v7 + v3);
    }
  }
  else
  {
    sub_1B1EFD0E0();
    swift_allocError();
    *(_OWORD *)v4 = xmmword_1B2246910;
    *(_BYTE *)(v4 + 16) = 6;
    return swift_willThrow();
  }
}

uint64_t sub_1B1EF4020(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 8))(1, a1);
}

void sub_1B1EF4044()
{
  __asm { BR              X12 }
}

uint64_t sub_1B1EF4098@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  __int16 v9;
  char v10;
  char v11;
  char v12;
  char v13;

  if (v4 < BYTE6(a1))
  {
    if (v2)
    {
      v7 = sub_1B2227E4C();
      result = *(unsigned __int8 *)(v7 + v4 - sub_1B2227E70());
    }
    else
    {
      v8 = v1;
      v9 = a1;
      v10 = BYTE2(a1);
      v11 = BYTE3(a1);
      v12 = BYTE4(a1);
      v13 = BYTE5(a1);
      result = *((unsigned __int8 *)&v8 + v4);
    }
    ++*(_QWORD *)(v3 + 32);
  }
  else
  {
    sub_1B1EFD0E0();
    swift_allocError();
    *(_OWORD *)v5 = xmmword_1B2246910;
    *(_BYTE *)(v5 + 16) = 6;
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_1B1EF41D8(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(a2 + 8))(0, a1);
}

uint64_t sub_1B1EF41FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t *v5;

  a3[3] = a1;
  a3[4] = a2;
  v5 = sub_1B1A137F4(a3);
  return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(v5, v3, a1);
}

uint64_t sub_1B1EF4234(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t v6;

  v5 = v2[3];
  v6 = v2[4];
  sub_1B19FA070(v2, v5);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 32))(a1, a2, v5, v6);
}

uint64_t sub_1B1EF42A8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1[3];
  v4 = v1[4];
  sub_1B19FA070(v1, v3);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 8))(a1, v3, v4);
}

uint64_t sub_1B1EF4304(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1[3];
  v4 = v1[4];
  sub_1B19FA070(v1, v3);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(a1, v3, v4);
}

uint64_t sub_1B1EF4360(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[3];
  uint64_t v9;
  uint64_t v10;

  v3 = v1[3];
  v4 = v1[4];
  sub_1B19FA070(v1, v3);
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v4 + 64))(v8, v3, v4);
  v5 = v9;
  v6 = v10;
  sub_1B19FA070(v8, v9);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 24))(a1, v5, v6);
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v8);
}

uint64_t sub_1B1EF4404(uint64_t a1, uint64_t a2)
{
  return sub_1B1EF4234(a1, a2);
}

uint64_t sub_1B1EF4418()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[3];
  v2 = v0[4];
  sub_1B19FA070(v0, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 8))(1, v1, v2);
}

uint64_t sub_1B1EF4468()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[3];
  v2 = v0[4];
  sub_1B19FA070(v0, v1);
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(v2 + 8))(0, v1, v2);
}

uint64_t sub_1B1EF44B8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[3];
  v2 = v0[4];
  sub_1B19FA070(v0, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 56))(v1, v2);
}

uint64_t sub_1B1EF4500()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[3];
  v2 = v0[4];
  sub_1B19FA070(v0, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 64))(v1, v2);
}

void sub_1B1EF454C()
{
  __asm { BR              X12 }
}

uint64_t sub_1B1EF45A4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  __int16 v10;
  char v11;
  char v12;
  char v13;
  char v14;

  if (v5 >= BYTE6(a1))
  {
    sub_1B1EFD0E0();
    swift_allocError();
    *(_OWORD *)v6 = xmmword_1B2246910;
    *(_BYTE *)(v6 + 16) = 6;
    return swift_willThrow();
  }
  if (v2)
  {
    v8 = sub_1B2227E4C();
    result = *(unsigned __int8 *)(v8 + v5 - sub_1B2227E70());
    if ((v4 & 1) != 0)
      return result;
  }
  else
  {
    v9 = v1;
    v10 = a1;
    v11 = BYTE2(a1);
    v12 = BYTE3(a1);
    v13 = BYTE4(a1);
    v14 = BYTE5(a1);
    result = *((unsigned __int8 *)&v9 + v5);
    if ((v4 & 1) != 0)
      return result;
  }
  ++*(_QWORD *)(v3 + 32);
  return result;
}

void sub_1B1EF46EC()
{
  __asm { BR              X10 }
}

uint64_t sub_1B1EF4728(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  if (BYTE6(a4) >= a2)
  {
    result = sub_1B22281A0();
    *(_QWORD *)(v4 + 32) += v5;
  }
  else
  {
    sub_1B1EFD0E0();
    swift_allocError();
    *(_OWORD *)v6 = xmmword_1B2246910;
    *(_BYTE *)(v6 + 16) = 6;
    return swift_willThrow();
  }
  return result;
}

void sub_1B1EF47BC()
{
  __asm { BR              X10 }
}

uint64_t sub_1B1EF4800()
{
  uint64_t v0;
  unint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  if (BYTE6(v1) >= v3)
  {
    v4 = type metadata accessor for _BinaryDecoder.DataStream();
    v5 = (_QWORD *)swift_allocObject();
    v5[2] = v0;
    v5[3] = v1;
    v5[4] = v3;
    v2[3] = v4;
    v2[4] = &off_1E6382D78;
    *v2 = v5;
    return sub_1B1A0DC90(v0, v1);
  }
  else
  {
    sub_1B1EFD0E0();
    swift_allocError();
    *(_OWORD *)v6 = xmmword_1B2246910;
    *(_BYTE *)(v6 + 16) = 6;
    return swift_willThrow();
  }
}

void sub_1B1EF48C8()
{
  __asm { BR              X11 }
}

uint64_t sub_1B1EF491C@<X0>(int a1@<W8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int16 v23;
  char v24;
  char v25;
  char v26;
  char v27;
  uint64_t v28;
  uint64_t v29;

  if (BYTE6(v17) < v13)
  {
    sub_1B1EFD0E0();
    swift_allocError();
    *(_OWORD *)v18 = xmmword_1B2246910;
    *(_BYTE *)(v18 + 16) = 6;
    return swift_willThrow();
  }
  v28 = 0;
  if (!a1)
  {
    v22 = v16;
    v23 = v17;
    v24 = BYTE2(v17);
    v25 = BYTE3(v17);
    v26 = BYTE4(v17);
    v27 = BYTE5(v17);
    sub_1B1EF5774(&v28, (uint64_t)&v29, (uint64_t)&v22, (int)&v22 + BYTE6(v17), v15, 8);
    goto LABEL_10;
  }
  if (a1 == 1)
  {
    swift_retain();
    sub_1B1A0DC90(v16, v17);
    sub_1B1EFD188((int)v16, v16 >> 32, v17 & 0x3FFFFFFFFFFFFFFFLL, &v28, v15, 8);
    if (!v14)
    {
      sub_1B1A0DADC(v16, v17);
LABEL_10:
      *(_QWORD *)(v15 + 32) += 8;
      return v28;
    }
    sub_1B1A0DADC(v16, v17);
    __break(1u);
  }
  else
  {
    v20 = *(_QWORD *)(v16 + 16);
    v21 = *(_QWORD *)(v16 + 24);
    swift_retain();
    swift_retain();
    swift_retain();
    sub_1B1EFD188(v20, v21, v17 & 0x3FFFFFFFFFFFFFFFLL, &v28, v15, 8);
    if (!v14)
    {
      swift_release();
      swift_release();
      goto LABEL_10;
    }
  }
  swift_release();
  result = swift_release();
  __break(1u);
  return result;
}

void sub_1B1EF4B84()
{
  __asm { BR              X12 }
}

uint64_t sub_1B1EF4BD8@<X0>(int a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int16 v11;
  char v12;
  char v13;
  char v14;
  char v15;
  unsigned __int8 v16;
  uint64_t v17;

  if (BYTE6(v5) < v1)
  {
    sub_1B1EFD0E0();
    swift_allocError();
    *(_OWORD *)v6 = xmmword_1B2246910;
    *(_BYTE *)(v6 + 16) = 6;
    return swift_willThrow();
  }
  v16 = 0;
  if (!a1)
  {
    v10 = v4;
    v11 = v5;
    v12 = BYTE2(v5);
    v13 = BYTE3(v5);
    v14 = BYTE4(v5);
    v15 = BYTE5(v5);
    sub_1B1EF5774(&v16, (uint64_t)&v17, (uint64_t)&v10, (int)&v10 + BYTE6(v5), v3, 1);
    goto LABEL_10;
  }
  if (a1 == 1)
  {
    swift_retain();
    sub_1B1A0DC90(v4, v5);
    sub_1B1EFD244((int)v4, v4 >> 32, v5 & 0x3FFFFFFFFFFFFFFFLL, &v16, v3, 1);
    if (!v2)
    {
      sub_1B1A0DADC(v4, v5);
LABEL_10:
      ++*(_QWORD *)(v3 + 32);
      return v16;
    }
    sub_1B1A0DADC(v4, v5);
    __break(1u);
  }
  else
  {
    v8 = *(_QWORD *)(v4 + 16);
    v9 = *(_QWORD *)(v4 + 24);
    swift_retain();
    swift_retain();
    swift_retain();
    sub_1B1EFD244(v8, v9, v5 & 0x3FFFFFFFFFFFFFFFLL, &v16, v3, 1);
    if (!v2)
    {
      swift_release();
      swift_release();
      goto LABEL_10;
    }
  }
  swift_release();
  result = swift_release();
  __break(1u);
  return result;
}

void sub_1B1EF4E44()
{
  __asm { BR              X11 }
}

uint64_t sub_1B1EF4E98@<X0>(int a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int16 v11;
  char v12;
  char v13;
  char v14;
  char v15;
  unsigned __int16 v16;
  uint64_t v17;

  if (BYTE6(v5) < v1)
  {
    sub_1B1EFD0E0();
    swift_allocError();
    *(_OWORD *)v6 = xmmword_1B2246910;
    *(_BYTE *)(v6 + 16) = 6;
    return swift_willThrow();
  }
  v16 = 0;
  if (!a1)
  {
    v10 = v4;
    v11 = v5;
    v12 = BYTE2(v5);
    v13 = BYTE3(v5);
    v14 = BYTE4(v5);
    v15 = BYTE5(v5);
    sub_1B1EF5774(&v16, (uint64_t)&v17, (uint64_t)&v10, (int)&v10 + BYTE6(v5), v3, 2);
    goto LABEL_10;
  }
  if (a1 == 1)
  {
    swift_retain();
    sub_1B1A0DC90(v4, v5);
    sub_1B1EFD300((int)v4, v4 >> 32, v5 & 0x3FFFFFFFFFFFFFFFLL, &v16, v3, 2);
    if (!v2)
    {
      sub_1B1A0DADC(v4, v5);
LABEL_10:
      *(_QWORD *)(v3 + 32) += 2;
      return v16;
    }
    sub_1B1A0DADC(v4, v5);
    __break(1u);
  }
  else
  {
    v8 = *(_QWORD *)(v4 + 16);
    v9 = *(_QWORD *)(v4 + 24);
    swift_retain();
    swift_retain();
    swift_retain();
    sub_1B1EFD300(v8, v9, v5 & 0x3FFFFFFFFFFFFFFFLL, &v16, v3, 2);
    if (!v2)
    {
      swift_release();
      swift_release();
      goto LABEL_10;
    }
  }
  swift_release();
  result = swift_release();
  __break(1u);
  return result;
}

void sub_1B1EF5100()
{
  __asm { BR              X11 }
}

uint64_t sub_1B1EF5154@<X0>(int a1@<W8>, uint64_t a2, uint64_t a3, int a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int16 v24;
  char v25;
  char v26;
  char v27;
  char v28;
  unsigned int v29;
  uint64_t v30;

  if (BYTE6(v18) < v14)
  {
    sub_1B1EFD0E0();
    swift_allocError();
    *(_OWORD *)v19 = xmmword_1B2246910;
    *(_BYTE *)(v19 + 16) = 6;
    return swift_willThrow();
  }
  v29 = 0;
  if (!a1)
  {
    v23 = v17;
    v24 = v18;
    v25 = BYTE2(v18);
    v26 = BYTE3(v18);
    v27 = BYTE4(v18);
    v28 = BYTE5(v18);
    sub_1B1EF5774(&v29, (uint64_t)&v30, (uint64_t)&v23, (int)&v23 + BYTE6(v18), v16, 4);
    goto LABEL_10;
  }
  if (a1 == 1)
  {
    swift_retain();
    sub_1B1A0DC90(v17, v18);
    sub_1B1EFD3BC((int)v17, v17 >> 32, v18 & 0x3FFFFFFFFFFFFFFFLL, &v29, v16, 4);
    if (!v15)
    {
      sub_1B1A0DADC(v17, v18);
LABEL_10:
      *(_QWORD *)(v16 + 32) += 4;
      return v29;
    }
    sub_1B1A0DADC(v17, v18);
    __break(1u);
  }
  else
  {
    v21 = *(_QWORD *)(v17 + 16);
    v22 = *(_QWORD *)(v17 + 24);
    swift_retain();
    swift_retain();
    swift_retain();
    sub_1B1EFD3BC(v21, v22, v18 & 0x3FFFFFFFFFFFFFFFLL, &v29, v16, 4);
    if (!v15)
    {
      swift_release();
      swift_release();
      goto LABEL_10;
    }
  }
  swift_release();
  result = swift_release();
  __break(1u);
  return result;
}

void sub_1B1EF53BC()
{
  uint64_t AssociatedTypeWitness;
  uint64_t v2;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v2);
  __asm { BR              X10 }
}

uint64_t sub_1B1EF5474@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (BYTE6(v3) >= a1)
  {
    *(_QWORD *)(v4 - 184) = v1;
    swift_getAssociatedConformanceWitness();
    sub_1B2229F88();
    v5 = sub_1B2229CC4();
    MEMORY[0x1E0C80A78](v5, v6);
    __asm { BR              X10 }
  }
  sub_1B1EFD0E0();
  swift_allocError();
  *(_OWORD *)v7 = xmmword_1B2246910;
  *(_BYTE *)(v7 + 16) = 6;
  return swift_willThrow();
}

void *sub_1B1EF5774(void *result, uint64_t a2, uint64_t a3, int a4, uint64_t a5, int64_t __len)
{
  if (a3)
  {
    if (!result)
      goto LABEL_8;
    if (a2 - (uint64_t)result >= __len)
      return memmove(result, (const void *)(a3 + *(_QWORD *)(a5 + 32)), __len);
  }
  else if (!result || ((a2 - (_QWORD)result) & 0x8000000000000000) == 0)
  {
    return result;
  }
  do
  {
    result = (void *)sub_1B2229700();
    __break(1u);
LABEL_8:
    ;
  }
  while (__len > 0);
  return result;
}

uint64_t sub_1B1EF5814()
{
  uint64_t v0;

  sub_1B1A0DADC(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for _BinaryDecoder.DataStream()
{
  return objc_opt_self();
}

uint64_t sub_1B1EF5858()
{
  return swift_initClassMetadata2();
}

void sub_1B1EF5898()
{
  sub_1B1EF454C();
}

void sub_1B1EF58B8()
{
  sub_1B1EF46EC();
}

void sub_1B1EF58D8()
{
  sub_1B1EF47BC();
}

void sub_1B1EF58F8()
{
  sub_1B1EF53BC();
}

uint64_t sub_1B1EF5918(uint64_t a1, uint64_t a2)
{
  return sub_1B1EF4020(a1, a2);
}

uint64_t sub_1B1EF592C(uint64_t a1, uint64_t a2)
{
  return sub_1B1EF41D8(a1, a2);
}

uint64_t sub_1B1EF5940()
{
  uint64_t v0;

  return *(_QWORD *)(*(_QWORD *)v0 + 32);
}

uint64_t sub_1B1EF5954(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  char *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  _QWORD *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  _QWORD *v40;
  unint64_t v41;
  _QWORD *v42;
  unint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  char v58;
  unint64_t v59;
  char v60;
  char v61;
  uint64_t v62;
  unint64_t v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t (*v74)(uint64_t, uint64_t, uint64_t);
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v80;
  char v81;
  char v82;
  uint64_t v83;
  unint64_t v84;
  char v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t result;
  _QWORD *v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char v98;
  unint64_t v99;
  char v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD v103[3];
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;

  v3 = v1;
  v4 = a1;
  v5 = a1[3];
  v6 = a1[4];
  sub_1B19FA070(a1, v5);
  v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 40))(v5, v6);
  if (v2)
    goto LABEL_43;
  v8 = v7;
  v9 = v4[3];
  v10 = v4[4];
  sub_1B19FA070(v4, v9);
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v10 + 64))(v103, v9, v10);
  if ((v8 & 0xE0) == 0xC0)
  {
    v25 = v4[3];
    v26 = v4[4];
    sub_1B19FA070(v4, v25);
    v27 = sub_1B1EF6CF0(0xC0u, v25, v26);
    v89 = v4;
    v92 = v3;
    v106 = MEMORY[0x1E0DEE9E0];
    v28 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    if (v27)
    {
      v29 = v27;
      do
      {
        v30 = v104;
        v31 = v105;
        sub_1B19FA070(v103, v104);
        v32 = sub_1B1C78FEC();
        sub_1B1EF6E08(v30, (uint64_t)&type metadata for StringCodingKeys, v31, v32, (uint64_t)&v99);
        v33 = v99;
        v34 = v100;
        v36 = v101;
        v35 = v102;
        v37 = v104;
        v38 = v105;
        sub_1B19FA070(v103, v104);
        v39 = sub_1B1EF73B8(v37, v38);
        swift_bridgeObjectRetain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v28 = sub_1B1C69170(0, v28[2] + 1, 1, v28);
        v40 = v28;
        v41 = v28[2];
        v42 = v40;
        v43 = v40[3];
        if (v41 >= v43 >> 1)
          v42 = sub_1B1C69170(v43 > 1, v41 + 1, 1, v42);
        v42[2] = v41 + 1;
        v44 = &v42[5 * v41];
        v28 = v42;
        v44[4] = v33;
        *((_BYTE *)v44 + 40) = v34;
        v44[6] = v36;
        v44[7] = v35;
        v44[8] = v39;
        swift_bridgeObjectRelease();
        --v29;
      }
      while (v29);
    }
    sub_1B1EFD82C();
    sub_1B2228554();
    v66 = v28[2];
    if (v66)
    {
      v67 = (_QWORD *)v106;
      v68 = (_QWORD *)(swift_bridgeObjectRetain() + 64);
      do
      {
        v94 = v66;
        v95 = *(v68 - 4);
        v98 = *((_BYTE *)v68 - 24);
        v70 = *(v68 - 1);
        v96 = *(v68 - 2);
        v71 = *v68;
        v72 = v104;
        v73 = v105;
        sub_1B19FA070(v103, v104);
        v74 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v73 + 16);
        swift_bridgeObjectRetain_n();
        v75 = v74(v71, v72, v73);
        v77 = v76;
        type metadata accessor for _BinaryDecoder.DataStream();
        v78 = (_QWORD *)swift_allocObject();
        v78[2] = v75;
        v78[3] = v77;
        v78[4] = 0;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v99 = (unint64_t)v67;
        v106 = 0x8000000000000000;
        v80 = sub_1B1DC4EA8(v95, v98, v96, v70);
        v82 = v81;
        v83 = v67[2] + ((v81 & 1) == 0);
        v93 = v70;
        if (v67[3] >= v83)
        {
          v86 = v95;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            sub_1B1EB1A60();
        }
        else
        {
          sub_1B1EA17CC(v83, isUniquelyReferenced_nonNull_native);
          v84 = sub_1B1DC4EA8(v95, v98, v96, v70);
          if ((v82 & 1) != (v85 & 1))
            goto LABEL_51;
          v80 = v84;
          v86 = v95;
        }
        v67 = (_QWORD *)v99;
        if ((v82 & 1) != 0)
        {
          v87 = *(_QWORD *)(v99 + 56);
          swift_release();
          *(_QWORD *)(v87 + 8 * v80) = v78;
        }
        else
        {
          *(_QWORD *)(v99 + 8 * (v80 >> 6) + 64) |= 1 << v80;
          v69 = v67[6] + 32 * v80;
          *(_QWORD *)v69 = v86;
          *(_BYTE *)(v69 + 8) = v98;
          *(_QWORD *)(v69 + 16) = v96;
          *(_QWORD *)(v69 + 24) = v93;
          *(_QWORD *)(v67[7] + 8 * v80) = v78;
          ++v67[2];
          swift_bridgeObjectRetain();
        }
        v68 += 5;
        v106 = (unint64_t)v67;
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        v66 = v94 - 1;
      }
      while (v94 != 1);
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    v4 = v89;
    v3 = v92;
    *(_QWORD *)(v92 + 16) = v106;
    *(_BYTE *)(v92 + 24) = 0;
    goto LABEL_49;
  }
  if ((v8 & 0xE0) != 0xE0)
  {
    sub_1B1EFD0E0();
    swift_allocError();
    *(_QWORD *)v45 = &unk_1E6382E38;
    *(_QWORD *)(v45 + 8) = v8 & 0xE0;
    *(_BYTE *)(v45 + 16) = 3;
    swift_willThrow();
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v103);
LABEL_43:
    sub_1B1EFD8B4(0, &qword_1ED4B8C38, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))type metadata accessor for _BinaryDecoder.KeyedStore);
    swift_deallocPartialClassInstance();
LABEL_44:
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v4);
    return v3;
  }
  v91 = v1;
  v11 = v4[3];
  v12 = v4[4];
  sub_1B19FA070(v4, v11);
  v13 = sub_1B1EF6CF0(0xE0u, v11, v12);
  v99 = MEMORY[0x1E0DEE9E0];
  v14 = (char *)MEMORY[0x1E0DEE9D8];
  if (v13)
  {
    v15 = v13;
    do
    {
      v16 = v104;
      v17 = v105;
      sub_1B19FA070(v103, v104);
      v18 = sub_1B1EF73B8(v16, v17);
      v19 = v104;
      v20 = v105;
      sub_1B19FA070(v103, v104);
      v21 = sub_1B1EF73B8(v19, v20);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v14 = sub_1B1C633C0(0, *((_QWORD *)v14 + 2) + 1, 1, v14);
      v23 = *((_QWORD *)v14 + 2);
      v22 = *((_QWORD *)v14 + 3);
      if (v23 >= v22 >> 1)
        v14 = sub_1B1C633C0(v22 > 1, v23 + 1, 1, v14);
      *((_QWORD *)v14 + 2) = v23 + 1;
      v24 = &v14[16 * v23];
      *((_QWORD *)v24 + 4) = v18;
      *((_QWORD *)v24 + 5) = v21;
      --v15;
    }
    while (v15);
  }
  sub_1B1EFD574();
  sub_1B2228554();
  v46 = *((_QWORD *)v14 + 2);
  if (!v46)
  {
LABEL_46:
    swift_bridgeObjectRelease();
    v3 = v91;
    *(_QWORD *)(v91 + 16) = v99;
    *(_BYTE *)(v91 + 24) = 1;
LABEL_49:
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v103);
    goto LABEL_44;
  }
  v90 = v4;
  v47 = (_QWORD *)v99;
  swift_bridgeObjectRetain();
  v48 = (uint64_t *)(v14 + 40);
  while (1)
  {
    v97 = v46;
    v51 = *(v48 - 1);
    v50 = *v48;
    v52 = v104;
    v53 = v105;
    sub_1B19FA070(v103, v104);
    v54 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v53 + 16))(v50, v52, v53);
    v56 = v55;
    type metadata accessor for _BinaryDecoder.DataStream();
    v57 = (_QWORD *)swift_allocObject();
    v57[2] = v54;
    v57[3] = v56;
    v57[4] = 0;
    v58 = swift_isUniquelyReferenced_nonNull_native();
    v106 = (unint64_t)v47;
    v99 = 0x8000000000000000;
    v59 = sub_1B1DC3AC8(v51);
    v61 = v60;
    v62 = v47[2] + ((v60 & 1) == 0);
    if (v47[3] >= v62)
    {
      if ((v58 & 1) == 0)
        sub_1B1EA882C();
      goto LABEL_30;
    }
    sub_1B1E9193C(v62, v58);
    v63 = sub_1B1DC3AC8(v51);
    if ((v61 & 1) != (v64 & 1))
      break;
    v59 = v63;
LABEL_30:
    v47 = (_QWORD *)v106;
    if ((v61 & 1) != 0)
    {
      v65 = *(_QWORD *)(v106 + 56);
      swift_release();
      *(_QWORD *)(v65 + 8 * v59) = v57;
    }
    else
    {
      *(_QWORD *)(v106 + 8 * (v59 >> 6) + 64) |= 1 << v59;
      v49 = 8 * v59;
      *(_QWORD *)(v47[6] + v49) = v51;
      *(_QWORD *)(v47[7] + v49) = v57;
      ++v47[2];
    }
    v48 += 2;
    v99 = (unint64_t)v47;
    swift_bridgeObjectRelease();
    v46 = v97 - 1;
    if (v97 == 1)
    {
      swift_bridgeObjectRelease();
      v4 = v90;
      goto LABEL_46;
    }
  }
  sub_1B2229FC4();
  __break(1u);
LABEL_51:
  sub_1B1EFD8B4(0, (unint64_t *)&unk_1EEF5CD98, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))type metadata accessor for _KeyBox);
  result = sub_1B2229FC4();
  __break(1u);
  return result;
}

uint64_t sub_1B1EF620C(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;
  unsigned __int8 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int v60;
  unint64_t v61;
  unint64_t v62;
  char *v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v76;
  char v77;
  char v78;
  uint64_t v79;
  unint64_t v80;
  char v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD v92[3];
  char *v93;
  char *v94;
  _QWORD *v95;
  uint64_t v96;
  char *v97;
  uint64_t TupleTypeMetadata2;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  _QWORD v105[3];
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;

  v6 = *(_QWORD *)(*(_QWORD *)v4 + 80);
  v102 = *(_QWORD *)(*(_QWORD *)v4 + 88);
  v7 = type metadata accessor for _KeyBox(255, v6, v102, a4);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x1E0C80A78](TupleTypeMetadata2, v8);
  v10 = (char *)v92 - v9;
  v100 = v6;
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)v92 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = (char *)v92 - v18;
  v21 = a1[3];
  v20 = a1[4];
  sub_1B19FA070(a1, v21);
  v22 = v99;
  v23 = (*(uint64_t (**)(uint64_t, uint64_t))(v20 + 40))(v21, v20);
  v99 = v22;
  if (v22)
  {
    v25 = v101;
    v26 = v102;
LABEL_3:
    type metadata accessor for _BinaryDecoder.KeyedStore(0, v100, v26, v24);
    swift_deallocPartialClassInstance();
LABEL_4:
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
    return v25;
  }
  v28 = v23;
  v93 = v14;
  v94 = v19;
  v96 = v15;
  v97 = v10;
  v29 = a1[3];
  v30 = a1[4];
  v95 = a1;
  sub_1B19FA070(a1, v29);
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v30 + 64))(v105, v29, v30);
  if ((v28 & 0xE0) != 0xE0)
  {
    if ((v28 & 0xE0) != 0xC0)
    {
      sub_1B1EFD0E0();
      swift_allocError();
      *(_QWORD *)v39 = &unk_1E6382E60;
      *(_QWORD *)(v39 + 8) = v28 & 0xE0;
      *(_BYTE *)(v39 + 16) = 3;
      swift_willThrow();
      _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v105);
      v25 = v101;
      a1 = v95;
      v26 = v102;
      goto LABEL_3;
    }
    v31 = v95[3];
    v32 = v95[4];
    sub_1B19FA070(v95, v31);
    v33 = v99;
    v34 = sub_1B1EF6CF0(0xC0u, v31, v32);
    v25 = v101;
    if (v33)
    {
      _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v105);
      a1 = v95;
      v26 = v102;
      goto LABEL_3;
    }
    v40 = v34;
    v41 = type metadata accessor for _BinaryDecoder.DataStream();
    v92[1] = MEMORY[0x1B5E23E74](&unk_1B22A10C0, v7);
    v92[2] = v41;
    v108 = sub_1B222850C();
    v104 = sub_1B2228518();
    LODWORD(v99) = v40;
    if (v40)
    {
      v42 = v40;
      v43 = v100;
      v44 = (uint64_t)v93;
      v45 = (uint64_t)v94;
      do
      {
        v46 = v106;
        v47 = v107;
        sub_1B19FA070(v105, v106);
        sub_1B1EF6E08(v46, v43, v47, v102, v44);
        sub_1B1F1DF40(v44, v43, v45);
        v48 = v106;
        v49 = v107;
        sub_1B19FA070(v105, v106);
        v50 = sub_1B1EF73B8(v48, v49);
        v51 = *(int *)(TupleTypeMetadata2 + 48);
        (*(void (**)(char *, uint64_t, uint64_t))(v96 + 16))(v97, v45, v7);
        *(_QWORD *)&v97[v51] = v50;
        v52 = v96;
        sub_1B2228B6C();
        sub_1B2228B48();
        (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v45, v7);
        --v42;
      }
      while (v42);
    }
    else
    {
      v43 = v100;
    }
    sub_1B22285A8();
    v84 = sub_1B2228554();
    v103 = v104;
    MEMORY[0x1E0C80A78](v84, v85);
    v86 = v102;
    v92[-4] = v43;
    v92[-3] = v86;
    v92[-2] = &v108;
    v92[-1] = v105;
    MEMORY[0x1E0C80A78](v87, v88);
    v92[-4] = v43;
    v92[-3] = v89;
    v92[-2] = sub_1B1EFD5D8;
    v92[-1] = v90;
    v91 = sub_1B2228B6C();
    MEMORY[0x1B5E23E74](MEMORY[0x1E0DEAF38], v91);
    sub_1B2228998();
    swift_bridgeObjectRelease();
    v25 = v101;
    *(_QWORD *)(v101 + 16) = v108;
    *(_BYTE *)(v25 + 24) = 0;
    a1 = v95;
LABEL_38:
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v105);
    goto LABEL_4;
  }
  a1 = v95;
  v36 = v95[3];
  v35 = v95[4];
  sub_1B19FA070(v95, v36);
  v37 = v99;
  v38 = sub_1B1EF6CF0(0xE0u, v36, v35);
  v26 = v102;
  if (v37)
  {
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v105);
    v25 = v101;
    goto LABEL_3;
  }
  v108 = MEMORY[0x1E0DEE9E0];
  v53 = (char *)MEMORY[0x1E0DEE9D8];
  if (v38)
  {
    v54 = v38;
    do
    {
      v55 = v106;
      v56 = v107;
      sub_1B19FA070(v105, v106);
      v57 = sub_1B1EF73B8(v55, v56);
      v58 = v106;
      v59 = v107;
      sub_1B19FA070(v105, v106);
      v60 = sub_1B1EF73B8(v58, v59);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v53 = sub_1B1C633C0(0, *((_QWORD *)v53 + 2) + 1, 1, v53);
      v62 = *((_QWORD *)v53 + 2);
      v61 = *((_QWORD *)v53 + 3);
      if (v62 >= v61 >> 1)
        v53 = sub_1B1C633C0(v61 > 1, v62 + 1, 1, v53);
      *((_QWORD *)v53 + 2) = v62 + 1;
      v63 = &v53[16 * v62];
      *((_QWORD *)v63 + 4) = v57;
      *((_QWORD *)v63 + 5) = v60;
      --v54;
    }
    while (v54);
  }
  sub_1B1EFD574();
  sub_1B2228554();
  v64 = *((_QWORD *)v53 + 2);
  v25 = v101;
  if (!v64)
  {
LABEL_37:
    swift_bridgeObjectRelease();
    *(_QWORD *)(v25 + 16) = v108;
    *(_BYTE *)(v25 + 24) = 1;
    goto LABEL_38;
  }
  v65 = (_QWORD *)v108;
  swift_bridgeObjectRetain();
  v66 = (uint64_t *)(v53 + 40);
  v97 = v53;
  while (1)
  {
    v99 = v64;
    v68 = *(v66 - 1);
    v67 = *v66;
    v69 = v106;
    v70 = v107;
    sub_1B19FA070(v105, v106);
    v71 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v70 + 16))(v67, v69, v70);
    v73 = v72;
    TupleTypeMetadata2 = (uint64_t)v66;
    type metadata accessor for _BinaryDecoder.DataStream();
    v74 = (_QWORD *)swift_allocObject();
    v74[2] = v71;
    v74[3] = v73;
    v74[4] = 0;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v104 = (uint64_t)v65;
    v108 = 0x8000000000000000;
    v76 = sub_1B1DC3AC8(v68);
    v78 = v77;
    v79 = v65[2] + ((v77 & 1) == 0);
    if (v65[3] >= v79)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        sub_1B1EA882C();
      goto LABEL_32;
    }
    sub_1B1E9193C(v79, isUniquelyReferenced_nonNull_native);
    v80 = sub_1B1DC3AC8(v68);
    if ((v78 & 1) != (v81 & 1))
      break;
    v76 = v80;
LABEL_32:
    v82 = v99;
    v65 = (_QWORD *)v104;
    if ((v78 & 1) != 0)
    {
      v83 = *(_QWORD *)(v104 + 56);
      swift_release();
      *(_QWORD *)(v83 + 8 * v76) = v74;
    }
    else
    {
      *(_QWORD *)(v104 + 8 * (v76 >> 6) + 64) |= 1 << v76;
      *(_QWORD *)(v65[6] + 8 * v76) = v68;
      *(_QWORD *)(v65[7] + 8 * v76) = v74;
      ++v65[2];
    }
    v25 = v101;
    v66 = (uint64_t *)(TupleTypeMetadata2 + 16);
    v108 = (uint64_t)v65;
    swift_bridgeObjectRelease();
    v64 = v82 - 1;
    if (!v64)
    {
      swift_bridgeObjectRelease();
      a1 = v95;
      goto LABEL_37;
    }
  }
  result = sub_1B2229FC4();
  __break(1u);
  return result;
}

uint64_t sub_1B1EF6AC0(unsigned __int8 a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  char v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  uint64_t v11;
  uint64_t v12;

  v4 = v1[3];
  v5 = v1[4];
  sub_1B19FA070(v1, v4);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 8))(1, v4, v5);
  if (!v2)
  {
    v7 = result;
    if ((result & 0xE0) == a1)
    {
      v8 = v1[3];
      v9 = v1[4];
      sub_1B19FA070(v1, v8);
      (*(void (**)(_QWORD, uint64_t, uint64_t))(v9 + 8))(0, v8, v9);
      result = v7 & 0x1F;
      if ((_DWORD)result == 31)
        return (uint64_t)sub_1B1EF70A4();
    }
    else
    {
      v10 = result & 0xE0;
      sub_1B1EFD960(0, (unint64_t *)&unk_1ED4BAFA0, (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x1E0DED1E8]);
      v11 = swift_allocObject();
      *(_OWORD *)(v11 + 16) = xmmword_1B226D240;
      *(_BYTE *)(v11 + 32) = a1;
      sub_1B1EFD0E0();
      swift_allocError();
      *(_QWORD *)v12 = v11;
      *(_QWORD *)(v12 + 8) = v10;
      *(_BYTE *)(v12 + 16) = 3;
      return swift_willThrow();
    }
  }
  return result;
}

void sub_1B1EF6C08(unsigned __int8 a1)
{
  uint64_t v1;
  char v3;
  char v4;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;

  sub_1B1EF3EA4();
  if (!v1)
  {
    v4 = v3;
    if ((v3 & 0xE0) == a1)
    {
      sub_1B1EF4044();
      if ((v4 & 0x1F) == 0x1F)
        sub_1B1EF7298();
    }
    else
    {
      v5 = v3 & 0xE0;
      sub_1B1EFD960(0, (unint64_t *)&unk_1ED4BAFA0, (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x1E0DED1E8]);
      v6 = swift_allocObject();
      *(_OWORD *)(v6 + 16) = xmmword_1B226D240;
      *(_BYTE *)(v6 + 32) = a1;
      sub_1B1EFD0E0();
      swift_allocError();
      *(_QWORD *)v7 = v6;
      *(_QWORD *)(v7 + 8) = v5;
      *(_BYTE *)(v7 + 16) = 3;
      swift_willThrow();
    }
  }
}

uint64_t sub_1B1EF6CF0(unsigned __int8 a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t result;
  char v8;
  unsigned __int8 v9;
  uint64_t v10;
  uint64_t v11;

  result = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 40))(a2, a3);
  if (!v3)
  {
    v8 = result;
    if ((result & 0xE0) == a1)
    {
      (*(void (**)(uint64_t, uint64_t))(a3 + 48))(a2, a3);
      result = v8 & 0x1F;
      if ((_DWORD)result == 31)
        return sub_1B1EF73B8(a2, a3);
    }
    else
    {
      v9 = result & 0xE0;
      sub_1B1EFD960(0, (unint64_t *)&unk_1ED4BAFA0, (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x1E0DED1E8]);
      v10 = swift_allocObject();
      *(_OWORD *)(v10 + 16) = xmmword_1B226D240;
      *(_BYTE *)(v10 + 32) = a1;
      sub_1B1EFD0E0();
      swift_allocError();
      *(_QWORD *)v11 = v10;
      *(_QWORD *)(v11 + 8) = v9;
      *(_BYTE *)(v11 + 16) = 3;
      return swift_willThrow();
    }
  }
  return result;
}

uint64_t sub_1B1EF6E08@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  char *v18;
  uint64_t result;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  _QWORD v31[2];
  int v32;

  v31[0] = a5;
  v31[1] = a4;
  v9 = sub_1B2229124();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v11);
  v13 = (char *)v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x1E0C80A78](v14, v15);
  v18 = (char *)v31 - v17;
  result = (*(uint64_t (**)(uint64_t, uint64_t, double))(a3 + 40))(a1, a3, v16);
  if (!v5)
  {
    if ((result & 0xE0) == 0x20)
    {
      v25 = sub_1B1EF73B8(a1, a3);
      sub_1B222A1C8();
      v23 = *(_QWORD *)(a2 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v13, 1, a2) == 1)
      {
        (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
        v32 = v25;
        v26 = sub_1B2229A0C();
        v28 = v27;
        sub_1B1EFD0E0();
        swift_allocError();
        *(_QWORD *)v24 = v26;
        *(_QWORD *)(v24 + 8) = v28;
        goto LABEL_8;
      }
      v18 = v13;
    }
    else
    {
      if ((result & 0xE0) != 0x60)
      {
        v30 = result & 0xE0;
        sub_1B1EFD0E0();
        swift_allocError();
        *(_QWORD *)v24 = &unk_1E636D508;
        *(_QWORD *)(v24 + 8) = v30;
        v29 = 3;
        goto LABEL_10;
      }
      v20 = sub_1B1EF896C(a1, a3);
      v22 = v21;
      swift_bridgeObjectRetain();
      sub_1B222A1B0();
      v23 = *(_QWORD *)(a2 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v18, 1, a2) == 1)
      {
        (*(void (**)(char *, uint64_t))(v10 + 8))(v18, v9);
        sub_1B1EFD0E0();
        swift_allocError();
        *(_QWORD *)v24 = v20;
        *(_QWORD *)(v24 + 8) = v22;
LABEL_8:
        v29 = 2;
LABEL_10:
        *(_BYTE *)(v24 + 16) = v29;
        return swift_willThrow();
      }
      swift_bridgeObjectRelease();
    }
    return (*(uint64_t (**)(_QWORD, char *, uint64_t))(v23 + 32))(v31[0], v18, a2);
  }
  return result;
}

_QWORD *sub_1B1EF70A4()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  unsigned __int8 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = v0;
  v3 = v0[3];
  v4 = v0[4];
  v5 = sub_1B19FA070(v0, v3);
  v6 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(v4 + 8))(0, v3, v4);
  if (!v1)
  {
    if ((v6 & 0xE0) != 0x20)
    {
      v5 = (_QWORD *)(v6 & 0xE0);
      sub_1B1EFD0E0();
      swift_allocError();
      *(_QWORD *)v9 = &unk_1E636D2F8;
      *(_QWORD *)(v9 + 8) = v5;
      *(_BYTE *)(v9 + 16) = 3;
      goto LABEL_10;
    }
    v5 = (_QWORD *)(v6 & 0xF);
    if ((v6 & 0x10) == 0)
      return v5;
    if ((v6 & 0xF) != 0)
    {
      if ((_DWORD)v5 != 1)
      {
        if ((_DWORD)v5 == 2)
        {
          v7 = v2[3];
          v8 = v2[4];
          sub_1B19FA070(v2, v7);
          (*(void (**)(char *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(v8 + 32))((char *)&v16 + 3, MEMORY[0x1E0DEE0F8], MEMORY[0x1E0DEE158], v7, v8);
          return (_QWORD *)bswap32(*(unsigned int *)((char *)&v16 + 3));
        }
        sub_1B1EFD0E0();
        swift_allocError();
        *(_QWORD *)v15 = v5;
        *(_QWORD *)(v15 + 8) = 0;
        *(_BYTE *)(v15 + 16) = 0;
LABEL_10:
        swift_willThrow();
        return v5;
      }
      v13 = v2[3];
      v14 = v2[4];
      sub_1B19FA070(v2, v13);
      (*(void (**)(char *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(v14 + 32))((char *)&v16 + 1, MEMORY[0x1E0DEE068], MEMORY[0x1E0DEE0C0], v13, v14);
      return (_QWORD *)(bswap32(*(unsigned __int16 *)((char *)&v16 + 1)) >> 16);
    }
    else
    {
      v11 = v2[3];
      v12 = v2[4];
      sub_1B19FA070(v2, v11);
      (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(v12 + 32))(&v16, MEMORY[0x1E0DEDE70], MEMORY[0x1E0DEDEC0], v11, v12);
      return (_QWORD *)v16;
    }
  }
  return v5;
}

uint64_t sub_1B1EF7298()
{
  uint64_t v0;
  uint64_t v1;
  unsigned __int8 v2;
  unsigned int v3;
  uint64_t v5;
  uint64_t v6;
  char v7;
  unsigned __int8 v8;
  unsigned int v9;

  sub_1B1EF4044();
  if (v0)
    return v1;
  if ((v2 & 0xE0) != 0x20)
  {
    v5 = v2 & 0xE0;
    sub_1B1EFD0E0();
    swift_allocError();
    *(_QWORD *)v6 = &unk_1E636D2C8;
    v7 = 3;
LABEL_9:
    *(_QWORD *)(v6 + 8) = v5;
    *(_BYTE *)(v6 + 16) = v7;
    swift_willThrow();
    return v1;
  }
  v1 = v2 & 0xF;
  if ((v2 & 0x10) != 0)
  {
    if ((v2 & 0xF) == 0)
    {
      sub_1B1EF4B84();
      return v8;
    }
    if ((_DWORD)v1 == 1)
    {
      sub_1B1EF4E44();
      return bswap32(v9) >> 16;
    }
    if ((_DWORD)v1 == 2)
    {
      sub_1B1EF5100();
      return bswap32(v3);
    }
    sub_1B1EFD0E0();
    swift_allocError();
    v5 = 0;
    v7 = 0;
    *(_QWORD *)v6 = v1;
    goto LABEL_9;
  }
  return v1;
}

uint64_t sub_1B1EF73B8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;

  v6 = (*(uint64_t (**)(void))(a2 + 48))();
  if (!v2)
  {
    if ((v6 & 0xE0) != 0x20)
    {
      v7 = v6 & 0xE0;
      sub_1B1EFD0E0();
      swift_allocError();
      *(_QWORD *)v8 = &unk_1E636D320;
      *(_QWORD *)(v8 + 8) = v7;
      *(_BYTE *)(v8 + 16) = 3;
      goto LABEL_10;
    }
    v3 = v6 & 0xF;
    if ((v6 & 0x10) == 0)
      return v3;
    if ((_DWORD)v3 == 2)
    {
      (*(void (**)(char *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(a2 + 32))((char *)&v11 + 3, MEMORY[0x1E0DEE0F8], MEMORY[0x1E0DEE158], a1, a2);
      return bswap32(*(unsigned int *)((char *)&v11 + 3));
    }
    else
    {
      if ((_DWORD)v3 != 1)
      {
        if ((v6 & 0xF) == 0)
        {
          (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(a2 + 32))(&v11, MEMORY[0x1E0DEDE70], MEMORY[0x1E0DEDEC0], a1, a2);
          return v11;
        }
        sub_1B1EFD0E0();
        swift_allocError();
        *(_QWORD *)v10 = v3;
        *(_QWORD *)(v10 + 8) = 0;
        *(_BYTE *)(v10 + 16) = 0;
LABEL_10:
        swift_willThrow();
        return v3;
      }
      (*(void (**)(char *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(a2 + 32))((char *)&v11 + 1, MEMORY[0x1E0DEE068], MEMORY[0x1E0DEE0C0], a1, a2);
      return bswap32(*(unsigned __int16 *)((char *)&v11 + 1)) >> 16;
    }
  }
  return v3;
}

uint64_t sub_1B1EF754C(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD v24[2];

  v10 = type metadata accessor for _KeyBox(0, a5, a6, (uint64_t)a4);
  v11 = *(_QWORD *)(v10 - 8);
  v13 = MEMORY[0x1E0C80A78](v10, v12);
  v15 = (char *)v24 - v14;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v11 + 16))((char *)v24 - v14, a1, v10, v13);
  v16 = a4[3];
  v17 = a4[4];
  sub_1B19FA070(a4, v16);
  v18 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v17 + 16))(a2, v16, v17);
  if (v6)
    return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v15, v10);
  v21 = v18;
  v22 = v19;
  type metadata accessor for _BinaryDecoder.DataStream();
  v23 = (_QWORD *)swift_allocObject();
  v23[2] = v21;
  v23[3] = v22;
  v23[4] = 0;
  v24[1] = v23;
  MEMORY[0x1B5E23E74](&unk_1B22A10C0, v10);
  sub_1B22285A8();
  return sub_1B22285C0();
}

uint64_t sub_1B1EF769C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  int v16;
  char v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v26 = a1;
  v3 = *(_QWORD *)(*(_QWORD *)v2 + 80);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for _KeyBox(0, v3, *(_QWORD *)(v7 + 88), v8);
  v10 = *(_QWORD *)(v9 - 8);
  v12 = MEMORY[0x1E0C80A78](v9, v11);
  v14 = (char *)&v25 - v13;
  v15 = *(_QWORD *)(v2 + 16);
  if ((*(_BYTE *)(v2 + 24) & 1) != 0)
  {
    v16 = sub_1B1F1DF58();
    if (*(_QWORD *)(v15 + 16))
    {
      sub_1B1DC3AC8(v16);
      if ((v17 & 1) != 0)
        return swift_retain();
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, double))(v4 + 16))(v6, v26, v3, v12);
    sub_1B1F1DF40((uint64_t)v6, v3, (uint64_t)v14);
    v19 = type metadata accessor for _BinaryDecoder.DataStream();
    v20 = MEMORY[0x1B5E23E74](&unk_1B22A10C0, v9);
    MEMORY[0x1B5E20160](&v27, v14, v15, v9, v19, v20);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v14, v9);
    result = v27;
    if (v27)
      return result;
  }
  v21 = sub_1B222A1A4();
  v23 = v22;
  sub_1B1EFD0E0();
  swift_allocError();
  *(_QWORD *)v24 = v21;
  *(_QWORD *)(v24 + 8) = v23;
  *(_BYTE *)(v24 + 16) = 2;
  return swift_willThrow();
}

uint64_t sub_1B1EF7870(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v17[6];

  v5 = *v4;
  if ((v4[3] & 1) != 0)
    return sub_1B2228B00();
  v7 = v4[2];
  v8 = *(_QWORD *)(v5 + 80);
  v9 = *(_QWORD *)(v5 + 88);
  v10 = type metadata accessor for _KeyBox(0, v8, v9, a4);
  type metadata accessor for _BinaryDecoder.DataStream();
  v11 = MEMORY[0x1B5E23E74](&unk_1B22A10C0, v10);
  v17[5] = v7;
  MEMORY[0x1E0C80A78](v11, v12);
  v17[2] = v8;
  v17[3] = v9;
  v13 = sub_1B222856C();
  swift_bridgeObjectRetain();
  v14 = MEMORY[0x1B5E23E74](MEMORY[0x1E0DE9ED8], v13);
  v6 = sub_1B1D5E618((void (*)(char *, char *))sub_1B1EFD53C, (uint64_t)v17, v13, v8, MEMORY[0x1E0DEDCE8], v14, MEMORY[0x1E0DEDD18], v15);
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t sub_1B1EF79A0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;

  v3 = *(_QWORD *)(v2 + 16);
  if ((*(_BYTE *)(v2 + 24) & 1) == 0)
  {
    MEMORY[0x1E0C80A78](a1, a2);
    MEMORY[0x1E0C80A78](v17, *(_QWORD *)(v16 + 80));
    v21 = type metadata accessor for _KeyBox(255, v18, v19, v20);
    type metadata accessor for _BinaryDecoder.DataStream();
    MEMORY[0x1B5E23E74](&unk_1B22A10C0, v21);
    v22 = sub_1B22285A8();
    MEMORY[0x1B5E23E74](MEMORY[0x1E0DEA0D0], v22);
    v23 = sub_1B22289A4();
    return v23 & 1;
  }
  v4 = sub_1B1F1DF58();
  v5 = 0;
  v6 = v3 + 64;
  v7 = 1 << *(_BYTE *)(v3 + 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & *(_QWORD *)(v3 + 64);
  v10 = (unint64_t)(v7 + 63) >> 6;
  while (v9)
  {
    v11 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    v12 = v11 | (v5 << 6);
LABEL_6:
    if (*(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v12) == v4)
    {
      v23 = 1;
      return v23 & 1;
    }
  }
  v13 = v5 + 1;
  if (v5 + 1 >= v10)
    goto LABEL_24;
  v14 = *(_QWORD *)(v6 + 8 * v13);
  if (v14)
    goto LABEL_21;
  v13 = v5 + 2;
  if (v5 + 2 >= v10)
    goto LABEL_24;
  v14 = *(_QWORD *)(v6 + 8 * v13);
  if (v14)
    goto LABEL_21;
  v13 = v5 + 3;
  if (v5 + 3 >= v10)
    goto LABEL_24;
  v14 = *(_QWORD *)(v6 + 8 * v13);
  if (v14)
    goto LABEL_21;
  v13 = v5 + 4;
  if (v5 + 4 >= v10)
    goto LABEL_24;
  v14 = *(_QWORD *)(v6 + 8 * v13);
  if (v14)
    goto LABEL_21;
  v13 = v5 + 5;
  if (v5 + 5 >= v10)
    goto LABEL_24;
  v14 = *(_QWORD *)(v6 + 8 * v13);
  if (v14)
  {
LABEL_21:
    v15 = __clz(__rbit64(v14));
    v9 = (v14 - 1) & v14;
    v12 = v15 + (v13 << 6);
    v5 = v13;
    goto LABEL_6;
  }
  while (v10 - 6 != v5)
  {
    v14 = *(_QWORD *)(v3 + 112 + 8 * v5++);
    if (v14)
    {
      v13 = v5 + 5;
      goto LABEL_21;
    }
  }
LABEL_24:
  v23 = 0;
  return v23 & 1;
}

uint64_t sub_1B1EF7BD0(uint64_t a1, uint64_t (*a2)(uint64_t, _QWORD), uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t TupleTypeMetadata2;

  type metadata accessor for _KeyBox(255, a4, a5, a4);
  type metadata accessor for _BinaryDecoder.DataStream();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  return a2(a1, *(_QWORD *)(a1 + *(int *)(TupleTypeMetadata2 + 48))) & 1;
}

uint64_t sub_1B1EF7C58()
{
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for _BinaryDecoder.KeyedStore(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B19E5E34(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _BinaryDecoder.KeyedStore);
}

uint64_t sub_1B1EF7C88(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23[2];

  v4 = v2;
  *(_DWORD *)(v2 + 80) = 0;
  *(_QWORD *)(v2 + 72) = a2;
  v6 = a1[3];
  v7 = a1[4];
  sub_1B19FA070(a1, v6);
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v7 + 64))(v23, v6, v7);
  v8 = a1[3];
  v9 = a1[4];
  sub_1B19FA070(a1, v8);
  v10 = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 40))(v8, v9);
  if (v3)
    goto LABEL_2;
  if ((v10 & 0xE0) == 0xA0)
  {
    v18 = a1[3];
    v19 = a1[4];
    sub_1B19FA070(a1, v18);
    v20 = sub_1B1EF6CF0(0xA0u, v18, v19);
    v17 = 0;
    *(_DWORD *)(v4 + 56) = v20;
    goto LABEL_8;
  }
  if ((v10 & 0xE0) == 0x80)
  {
    v12 = a1[3];
    v13 = a1[4];
    sub_1B19FA070(a1, v12);
    v14 = sub_1B1EF6CF0(0x80u, v12, v13);
    *(_DWORD *)(v4 + 56) = v14;
    MEMORY[0x1E0C80A78](v14, v15);
    v17 = sub_1B1EFCEC8(v16, (void (*)(_QWORD *, uint64_t *))sub_1B1EFD124);
LABEL_8:
    *(_QWORD *)(v4 + 64) = v17;
    sub_1B1A02518(v23, v4 + 16);
    goto LABEL_3;
  }
  v21 = v10 & 0xE0;
  sub_1B1EFD0E0();
  swift_allocError();
  *(_QWORD *)v22 = &unk_1E6382E90;
  *(_QWORD *)(v22 + 8) = v21;
  *(_BYTE *)(v22 + 16) = 3;
  swift_willThrow();
LABEL_2:
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v23);
  type metadata accessor for _BinaryDecoder.UnkeyedStore();
  swift_deallocPartialClassInstance();
LABEL_3:
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  return v4;
}

_QWORD **sub_1B1EF7E84(_QWORD **result, _QWORD *a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (a3)
  {
    v8 = 0;
    v9 = *result;
    v10 = a3;
    while (1)
    {
      *v9 = v8;
      v11 = a4[3];
      v12 = a4[4];
      sub_1B19FA070(a4, v11);
      result = (_QWORD **)sub_1B1EF73B8(v11, v12);
      if (v4)
        break;
      v8 += result;
      ++v9;
      if (!--v10)
        goto LABEL_5;
    }
  }
  else
  {
LABEL_5:
    *a2 = a3;
  }
  return result;
}

uint64_t sub_1B1EF7F28(uint64_t (*a1)(uint64_t))
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  result = a1(v1 + 16);
  if (!v2)
    ++*(_DWORD *)(v1 + 80);
  return result;
}

uint64_t sub_1B1EF7F64(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v3 = *(unsigned int *)(v2 + 56);
  if (!(_DWORD)v3)
    return sub_1B2228B00();
  MEMORY[0x1E0C80A78](v3, a2);
  return sub_1B2228B18();
}

uint64_t sub_1B1EF8010(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  *a2 = a3;
  sub_1B17914E8();
  return sub_1B1E8D54C();
}

uint64_t sub_1B1EF80CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _BYTE v41[40];
  _QWORD v42[2];
  _BYTE v43[40];
  _BYTE v44[40];
  _QWORD v45[7];

  v40 = a8;
  v39 = a6;
  v45[5] = *MEMORY[0x1E0C80C00];
  v12 = *(_QWORD *)(a7 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = v18 * v17;
  v20 = v18 + v18 * v17;
  if (v20 >= v13)
    v20 = v13;
  v34 = v20;
  v21 = v14[5];
  v22 = v14[6];
  sub_1B19FA070(v14 + 2, v21);
  (*(void (**)(_QWORD *__return_ptr, _QWORD, uint64_t, uint64_t))(v22 + 24))(v45, *(_QWORD *)(*(_QWORD *)(a4 + 64) + 8 * v19 + 32), v21, v22);
  v38 = v12;
  sub_1B19FA198((uint64_t)v45, (uint64_t)v44);
  v23 = sub_1B1EF3364((uint64_t)v44);
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v44);
  v24 = v34;
  if (v19 != v34)
  {
    v36 = a9;
    v37 = v23 + 72;
    v35 = MEMORY[0x1E0DEE9C0] + 8;
    do
    {
      if (*a5)
        break;
      v25 = a5;
      sub_1B19FA198(v37, (uint64_t)v41);
      v26 = sub_1B1EF3348();
      v27 = *(_QWORD *)(v23 + 48);
      sub_1B1EF87B0((uint64_t)v41, (uint64_t)v43);
      v42[0] = v26;
      v42[1] = v27;
      swift_bridgeObjectRetain();
      sub_1B1EF87F0((uint64_t)v41);
      v28 = sub_1B1EFA2D0(v42[0], v43, v42[0], a7, &type metadata for _BinaryDecoder.SingleValueStore, a7, &off_1E6382EB8, v40);
      MEMORY[0x1E0C80A78](v28, v29);
      *(&v34 - 6) = a7;
      *(&v34 - 5) = v30;
      v31 = v39;
      *(&v34 - 4) = v36;
      *(&v34 - 3) = v31;
      *(&v34 - 2) = v19;
      sub_1B1EFFA50((uint64_t)v16, (uint64_t)sub_1B1EFD018, (uint64_t)(&v34 - 8), a7, MEMORY[0x1E0DEDCE8], v35, MEMORY[0x1E0DEDD18], v32);
      (*(void (**)(char *, uint64_t))(v38 + 8))(v16, a7);
      sub_1B1EFCFE8((uint64_t)v42);
      ++v19;
      a5 = v25;
    }
    while (v24 != v19);
  }
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v45);
  return swift_release();
}

uint64_t sub_1B1EF83AC()
{
  uint64_t v0;

  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0(v0 + 16);
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for _BinaryDecoder.UnkeyedStore()
{
  return objc_opt_self();
}

uint64_t sub_1B1EF83F8(uint64_t a1, uint64_t a2)
{
  char v3;

  v3 = *(_BYTE *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t _s15RelationStorageVwxx()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B1EF8434(uint64_t a1, uint64_t a2)
{
  char v3;

  v3 = *(_BYTE *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1B1EF8474(uint64_t a1, uint64_t a2)
{
  char v3;

  v3 = *(_BYTE *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for RenderPass.Dimension(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for RenderPass.Dimension(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = -(char)a2;
  }
  return result;
}

uint64_t sub_1B1EF8538(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

uint64_t sub_1B1EF8540(uint64_t result, char a2)
{
  *(_BYTE *)(result + 8) = a2 & 1;
  return result;
}

uint64_t type metadata accessor for _BinaryDecoder.KeyedStore.KeyedSources(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B19E5E34(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _BinaryDecoder.KeyedStore.KeyedSources);
}

uint64_t destroy for BinaryDecoder.Options(uint64_t a1)
{
  uint64_t result;

  result = swift_release();
  if (*(_QWORD *)(a1 + 16))
    return swift_release();
  return result;
}

uint64_t initializeWithCopy for BinaryDecoder.Options(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _OWORD *v5;
  uint64_t v6;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v5 = (_OWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 16);
  swift_retain();
  if (v4)
  {
    v6 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 16) = v4;
    *(_QWORD *)(a1 + 24) = v6;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 16) = *v5;
  }
  return a1;
}

uint64_t assignWithCopy for BinaryDecoder.Options(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  v4 = *(_QWORD *)(a1 + 16);
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  if (!v4)
  {
    if (v5)
    {
      v7 = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 16) = v5;
      *(_QWORD *)(a1 + 24) = v7;
      swift_retain();
      return a1;
    }
LABEL_7:
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    return a1;
  }
  if (!v5)
  {
    swift_release();
    goto LABEL_7;
  }
  v6 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for BinaryDecoder.Options(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a1 + 16);
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  if (!v5)
  {
    if (v4)
    {
      v7 = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 16) = v4;
      *(_QWORD *)(a1 + 24) = v7;
      return a1;
    }
LABEL_7:
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    return a1;
  }
  if (!v4)
  {
    swift_release();
    goto LABEL_7;
  }
  v6 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v6;
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for BinaryDecoder.Options()
{
  return &type metadata for BinaryDecoder.Options;
}

unint64_t sub_1B1EF8740()
{
  unint64_t result;

  result = qword_1ED4B9D10;
  if (!qword_1ED4B9D10)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B229EC84, &type metadata for _BinarySingleValueDecodingContainer);
    atomic_store(result, (unint64_t *)&qword_1ED4B9D10);
  }
  return result;
}

uint64_t sub_1B1EF8784()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0(v0 + 32);
  return swift_deallocObject();
}

uint64_t sub_1B1EF87B0(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_1B1EF87F0(uint64_t a1)
{
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0(a1);
  return a1;
}

char *sub_1B1EF8814()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[2];

  v2 = sub_1B22287A0();
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1B1EF6AC0(0x60u);
  if (!v1)
  {
    v7 = v6;
    v8 = v0[3];
    v9 = v0[4];
    sub_1B19FA070(v0, v8);
    v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v7, v8, v9);
    v13 = v10;
    v14 = v11;
    v18[0] = v10;
    v18[1] = v11;
    sub_1B2228788();
    sub_1B1EFD65C();
    v15 = sub_1B2228770();
    if (v16)
    {
      v5 = (char *)v15;
    }
    else
    {
      sub_1B1EFD0E0();
      swift_allocError();
      *(_OWORD *)v17 = xmmword_1B226E520;
      *(_BYTE *)(v17 + 16) = 6;
      swift_willThrow();
    }
    sub_1B1A0DADC(v13, v14);
  }
  return v5;
}

char *sub_1B1EF896C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  unsigned int v9;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[2];

  v5 = sub_1B22287A0();
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (char *)v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1B1EF6CF0(0x60u, a1, a2);
  if (!v2)
  {
    v11 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(a2 + 16))(v9, a1, a2);
    v13 = v12;
    v17[0] = v11;
    v17[1] = v12;
    sub_1B2228788();
    sub_1B1EFD65C();
    v14 = sub_1B2228770();
    if (v15)
    {
      v8 = (char *)v14;
    }
    else
    {
      sub_1B1EFD0E0();
      swift_allocError();
      *(_OWORD *)v16 = xmmword_1B226E520;
      *(_BYTE *)(v16 + 16) = 6;
      swift_willThrow();
    }
    sub_1B1A0DADC(v11, v13);
  }
  return v8;
}

uint64_t sub_1B1EF8ABC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v5;
  char v6;

  v5 = (*(uint64_t (**)(void))(a2 + 40))();
  if (!v2)
  {
    if (v5)
    {
      v6 = 0;
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t))(a2 + 48))(a1, a2);
      v6 = 1;
    }
  }
  return v6 & 1;
}

uint64_t sub_1B1EF8B18()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v2 = v0[3];
  v3 = v0[4];
  sub_1B19FA070(v0, v2);
  v4 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(v3 + 8))(0, v2, v3);
  if (!v1)
  {
    if ((v4 & 0xE0) != 0)
    {
      v6 = v4 & 0xE0;
      sub_1B1EFD0E0();
      swift_allocError();
      *(_QWORD *)v7 = &unk_1E636D450;
      v8 = 3;
    }
    else
    {
      if ((v4 & 0x10) != 0)
      {
        v5 = v4 & 1;
        return v5 & 1;
      }
      sub_1B1EFD0E0();
      swift_allocError();
      v6 = 0;
      *(_QWORD *)v7 = 16;
      v8 = 4;
    }
    *(_QWORD *)(v7 + 8) = v6;
    *(_BYTE *)(v7 + 16) = v8;
    swift_willThrow();
  }
  return v5 & 1;
}

uint64_t sub_1B1EF8C08()
{
  uint64_t v0;
  unsigned __int8 v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  char v5;

  sub_1B1EF4044();
  if (!v0)
  {
    if ((v1 & 0xE0) != 0)
    {
      v3 = v1 & 0xE0;
      sub_1B1EFD0E0();
      swift_allocError();
      *(_QWORD *)v4 = &unk_1E636D428;
      v5 = 3;
    }
    else
    {
      if ((v1 & 0x10) != 0)
      {
        v2 = v1 & 1;
        return v2 & 1;
      }
      sub_1B1EFD0E0();
      swift_allocError();
      v3 = 0;
      *(_QWORD *)v4 = 16;
      v5 = 4;
    }
    *(_QWORD *)(v4 + 8) = v3;
    *(_BYTE *)(v4 + 16) = v5;
    swift_willThrow();
  }
  return v2 & 1;
}

uint64_t sub_1B1EF8CC4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned __int8 v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  v3 = (*(uint64_t (**)(void))(a2 + 48))();
  if (!v2)
  {
    if ((v3 & 0xE0) != 0)
    {
      v5 = v3 & 0xE0;
      sub_1B1EFD0E0();
      swift_allocError();
      *(_QWORD *)v6 = &unk_1E636D480;
      v7 = 3;
    }
    else
    {
      if ((v3 & 0x10) != 0)
      {
        v4 = v3 & 1;
        return v4 & 1;
      }
      sub_1B1EFD0E0();
      swift_allocError();
      v5 = 0;
      *(_QWORD *)v6 = 16;
      v7 = 4;
    }
    *(_QWORD *)(v6 + 8) = v5;
    *(_BYTE *)(v6 + 16) = v7;
    swift_willThrow();
  }
  return v4 & 1;
}

uint64_t sub_1B1EF8D84(uint64_t a1, uint64_t a2)
{
  return sub_1B1EF992C(a1, a2, (void (*)(void))sub_1B1EFE030, MEMORY[0x1E0DEDC60]);
}

uint64_t sub_1B1EF8DA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  unint64_t v18;

  v8 = v3[3];
  v9 = v3[4];
  sub_1B19FA070(v3, v8);
  result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(v9 + 8))(0, v8, v9);
  if (!v4)
  {
    v11 = result;
    if ((result & 0xE0) == 0x20)
    {
      result &= 0xFu;
      if ((v11 & 0x10) == 0)
        return result;
      if ((_DWORD)result == 3)
      {
        v12 = v3[3];
        v13 = v3[4];
        sub_1B19FA070(v3, v12);
        (*(void (**)(unint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 32))(&v18, a2, a3, v12, v13);
        return bswap64(v18);
      }
      v17 = (result << 8) | 3;
      sub_1B1EFD0E0();
      swift_allocError();
      *(_QWORD *)v15 = v17;
      *(_QWORD *)(v15 + 8) = 0;
      v16 = 5;
    }
    else
    {
      v14 = result & 0xE0;
      sub_1B1EFD0E0();
      swift_allocError();
      *(_QWORD *)v15 = a1;
      *(_QWORD *)(v15 + 8) = v14;
      v16 = 3;
    }
    *(_BYTE *)(v15 + 16) = v16;
    return swift_willThrow();
  }
  return result;
}

void sub_1B1EF8F04(uint64_t a1)
{
  uint64_t v1;
  unsigned __int8 v3;
  unsigned __int8 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;

  sub_1B1EF4044();
  if (!v1)
  {
    v4 = v3;
    if ((v3 & 0xE0) == 0x20)
    {
      v5 = v3 & 0xF;
      if ((v4 & 0x10) == 0)
        return;
      if ((_DWORD)v5 == 3)
      {
        sub_1B1EF48C8();
        return;
      }
      v9 = (v5 << 8) | 3;
      sub_1B1EFD0E0();
      swift_allocError();
      v6 = 0;
      *(_QWORD *)v7 = v9;
      v8 = 5;
    }
    else
    {
      v6 = v3 & 0xE0;
      sub_1B1EFD0E0();
      swift_allocError();
      *(_QWORD *)v7 = a1;
      v8 = 3;
    }
    *(_QWORD *)(v7 + 8) = v6;
    *(_BYTE *)(v7 + 16) = v8;
    swift_willThrow();
  }
}

void sub_1B1EF8FE8(uint64_t a1)
{
  uint64_t v1;
  unsigned __int8 v3;
  unsigned __int8 v4;
  int v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  sub_1B1EF4044();
  if (!v1)
  {
    v4 = v3;
    if ((v3 & 0xE0) == 0x20)
    {
      v5 = v3 & 0xF;
      if ((v4 & 0x10) == 0)
        return;
      if (!v5)
      {
        sub_1B1EF4B84();
        return;
      }
      v6 = (unint64_t)(v4 & 0xF) << 8;
      sub_1B1EFD0E0();
      swift_allocError();
      v8 = 0;
      *(_QWORD *)v7 = v6;
      v9 = 5;
    }
    else
    {
      v8 = v3 & 0xE0;
      sub_1B1EFD0E0();
      swift_allocError();
      *(_QWORD *)v7 = a1;
      v9 = 3;
    }
    *(_QWORD *)(v7 + 8) = v8;
    *(_BYTE *)(v7 + 16) = v9;
    swift_willThrow();
  }
}

void sub_1B1EF90C0(uint64_t a1)
{
  uint64_t v1;
  unsigned __int8 v3;
  unsigned __int8 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;

  sub_1B1EF4044();
  if (!v1)
  {
    v4 = v3;
    if ((v3 & 0xE0) == 0x20)
    {
      v5 = v3 & 0xF;
      if ((v4 & 0x10) == 0)
        return;
      if ((_DWORD)v5 == 1)
      {
        sub_1B1EF4E44();
        return;
      }
      v9 = (v5 << 8) | 1;
      sub_1B1EFD0E0();
      swift_allocError();
      v6 = 0;
      *(_QWORD *)v7 = v9;
      v8 = 5;
    }
    else
    {
      v6 = v3 & 0xE0;
      sub_1B1EFD0E0();
      swift_allocError();
      *(_QWORD *)v7 = a1;
      v8 = 3;
    }
    *(_QWORD *)(v7 + 8) = v6;
    *(_BYTE *)(v7 + 16) = v8;
    swift_willThrow();
  }
}

void sub_1B1EF91A8(uint64_t a1)
{
  uint64_t v1;
  unsigned __int8 v3;
  unsigned __int8 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;

  sub_1B1EF4044();
  if (!v1)
  {
    v4 = v3;
    if ((v3 & 0xE0) == 0x20)
    {
      v5 = v3 & 0xF;
      if ((v4 & 0x10) == 0)
        return;
      if ((_DWORD)v5 == 2)
      {
        sub_1B1EF5100();
        return;
      }
      v9 = (v5 << 8) | 2;
      sub_1B1EFD0E0();
      swift_allocError();
      v6 = 0;
      *(_QWORD *)v7 = v9;
      v8 = 5;
    }
    else
    {
      v6 = v3 & 0xE0;
      sub_1B1EFD0E0();
      swift_allocError();
      *(_QWORD *)v7 = a1;
      v8 = 3;
    }
    *(_QWORD *)(v7 + 8) = v6;
    *(_BYTE *)(v7 + 16) = v8;
    swift_willThrow();
  }
}

uint64_t sub_1B1EF928C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;

  v8 = v3[3];
  v9 = v3[4];
  sub_1B19FA070(v3, v8);
  result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(v9 + 8))(0, v8, v9);
  if (!v4)
  {
    v11 = result;
    if ((result & 0xE0) == 0x20)
    {
      result &= 0xFu;
      if ((v11 & 0x10) == 0)
        return result;
      if ((_DWORD)result == 1)
      {
        v12 = v3[3];
        v13 = v3[4];
        sub_1B19FA070(v3, v12);
        (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 32))(&v18, a2, a3, v12, v13);
        return bswap32((unsigned __int16)v18) >> 16;
      }
      v17 = (result << 8) | 1;
      sub_1B1EFD0E0();
      swift_allocError();
      *(_QWORD *)v15 = v17;
      *(_QWORD *)(v15 + 8) = 0;
      v16 = 5;
    }
    else
    {
      v14 = result & 0xE0;
      sub_1B1EFD0E0();
      swift_allocError();
      *(_QWORD *)v15 = a1;
      *(_QWORD *)(v15 + 8) = v14;
      v16 = 3;
    }
    *(_BYTE *)(v15 + 16) = v16;
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_1B1EF93EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;

  v8 = v3[3];
  v9 = v3[4];
  sub_1B19FA070(v3, v8);
  result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(v9 + 8))(0, v8, v9);
  if (!v4)
  {
    v11 = result;
    if ((result & 0xE0) == 0x20)
    {
      result &= 0xFu;
      if ((v11 & 0x10) == 0)
        return result;
      if ((_DWORD)result == 2)
      {
        v12 = v3[3];
        v13 = v3[4];
        sub_1B19FA070(v3, v12);
        (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 32))(&v18, a2, a3, v12, v13);
        return bswap32(v18);
      }
      v17 = (result << 8) | 2;
      sub_1B1EFD0E0();
      swift_allocError();
      *(_QWORD *)v15 = v17;
      *(_QWORD *)(v15 + 8) = 0;
      v16 = 5;
    }
    else
    {
      v14 = result & 0xE0;
      sub_1B1EFD0E0();
      swift_allocError();
      *(_QWORD *)v15 = a1;
      *(_QWORD *)(v15 + 8) = v14;
      v16 = 3;
    }
    *(_BYTE *)(v15 + 16) = v16;
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_1B1EF9548(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t result;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  unsigned __int8 v13;
  uint64_t v14;
  unint64_t v15;

  result = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 48))(a2, a4);
  if (!v4)
  {
    v9 = result;
    if ((result & 0xE0) == 0x20)
    {
      if ((result & 0x10) == 0)
      {
        sub_1B1EFDFEC();
        return sub_1B22292E0();
      }
      v13 = sub_1B1F1E04C(a3);
      v14 = v9 & 0xF;
      if ((_DWORD)v14 == v13)
        return sub_1B1EF96C8(a1, a2, a3);
      v15 = v13 | (unint64_t)(v14 << 8);
      sub_1B1EFD0E0();
      swift_allocError();
      v10 = 0;
      *(_QWORD *)v11 = v15;
      v12 = 5;
    }
    else
    {
      v10 = result & 0xE0;
      sub_1B1EFD0E0();
      swift_allocError();
      *(_QWORD *)v11 = &unk_1E636D270;
      v12 = 3;
    }
    *(_QWORD *)(v11 + 8) = v10;
    *(_BYTE *)(v11 + 16) = v12;
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_1B1EF96C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;

  v5 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x1E0C80A78](v8, v9);
  v12 = (char *)&v16 - v11;
  result = (*(uint64_t (**)(uint64_t, _QWORD, double))(v13 + 32))(a3, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v14 + 8) + 24) + 16), v10);
  if (!v3)
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v7, v12, a3);
    sub_1B2229628();
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v12, a3);
  }
  return result;
}

uint64_t sub_1B1EF97B8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = (*(uint64_t (**)(void))(a2 + 48))();
  if (!v2 && (result & 0x10) != 0)
    return sub_1B1EF97F4(result, a1);
  return result;
}

uint64_t sub_1B1EF97F4(char a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t result;

  switch(a1 & 0xF)
  {
    case 0:
      sub_1B1EFD7E8();
      v3 = MEMORY[0x1E0DEDE70];
      goto LABEL_7;
    case 1:
      sub_1B1EFD7A4();
      v3 = MEMORY[0x1E0DEE068];
      goto LABEL_7;
    case 2:
      sub_1B1EFD760();
      v3 = MEMORY[0x1E0DEE0F8];
      goto LABEL_7;
    case 3:
      sub_1B1EFD71C();
      v3 = MEMORY[0x1E0DEE190];
LABEL_7:
      result = sub_1B1EF96C8(v3, a2, v3);
      break;
    default:
      v4 = ((unint64_t)(a1 & 0xF) << 8) | 3;
      sub_1B1EFD0E0();
      swift_allocError();
      *(_QWORD *)v5 = v4;
      *(_QWORD *)(v5 + 8) = 0;
      *(_BYTE *)(v5 + 16) = 5;
      result = swift_willThrow();
      break;
  }
  return result;
}

uint64_t sub_1B1EF9908(uint64_t a1, uint64_t a2)
{
  return sub_1B1EF992C(a1, a2, (void (*)(void))sub_1B1EFD71C, MEMORY[0x1E0DEE190]);
}

uint64_t sub_1B1EF992C(uint64_t a1, uint64_t a2, void (*a3)(void), uint64_t a4)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v9;

  a3();
  result = sub_1B1EF9548(a4, a1, a4, a2);
  if (!v4)
    return v9;
  return result;
}

uint64_t sub_1B1EF9994(uint64_t a1, uint64_t a2, void (*a3)(void), uint64_t a4)
{
  uint64_t v4;
  uint64_t result;
  unsigned __int8 v9;

  a3();
  result = sub_1B1EF9548(a4, a1, a4, a2);
  if (!v4)
    return v9;
  return result;
}

uint64_t sub_1B1EF99FC(uint64_t a1, uint64_t a2, void (*a3)(void), uint64_t a4)
{
  uint64_t v4;
  uint64_t result;
  unsigned __int16 v9;

  a3();
  result = sub_1B1EF9548(a4, a1, a4, a2);
  if (!v4)
    return v9;
  return result;
}

uint64_t sub_1B1EF9A64(uint64_t a1, uint64_t a2, void (*a3)(void), uint64_t a4)
{
  uint64_t v4;
  uint64_t result;
  unsigned int v9;

  a3();
  result = sub_1B1EF9548(a4, a1, a4, a2);
  if (!v4)
    return v9;
  return result;
}

uint64_t sub_1B1EF9ACC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  result = (*(uint64_t (**)(void))(a2 + 48))();
  if (!v2)
  {
    if ((result & 0xE0) == 0x40)
    {
      if (result != 64)
        return sub_1B1EF97F4(result, a1);
    }
    else
    {
      v5 = result & 0xE0;
      sub_1B1EFD0E0();
      swift_allocError();
      *(_QWORD *)v6 = &unk_1E636D2A0;
      *(_QWORD *)(v6 + 8) = v5;
      *(_BYTE *)(v6 + 16) = 3;
      return swift_willThrow();
    }
  }
  return result;
}

uint64_t sub_1B1EF9B7C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v2 = v0[3];
  v3 = v0[4];
  sub_1B19FA070(v0, v2);
  result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(v3 + 8))(0, v2, v3);
  if (!v1)
  {
    if ((result & 0xE0) == 0x40)
    {
      v5 = result & 0xF;
      if (result == 64 || (_DWORD)v5 == 2)
        return result != 64;
      v7 = (v5 << 8) | 2;
      sub_1B1EFD0E0();
      swift_allocError();
      v9 = 0;
      *(_QWORD *)v8 = v7;
      v10 = 5;
    }
    else
    {
      v9 = result & 0xE0;
      sub_1B1EFD0E0();
      swift_allocError();
      *(_QWORD *)v8 = &unk_1E636D3C8;
      v10 = 3;
    }
    *(_QWORD *)(v8 + 8) = v9;
    *(_BYTE *)(v8 + 16) = v10;
    return swift_willThrow();
  }
  return result;
}

void sub_1B1EF9C84()
{
  uint64_t v0;
  unsigned __int8 v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;

  sub_1B1EF4044();
  if (!v0)
  {
    if ((v1 & 0xE0) == 0x40)
    {
      if (v1 == 64)
        return;
      v2 = v1 & 0xF;
      if ((_DWORD)v2 == 3)
        return;
      v6 = (v2 << 8) | 3;
      sub_1B1EFD0E0();
      swift_allocError();
      v3 = 0;
      *(_QWORD *)v4 = v6;
      v5 = 5;
    }
    else
    {
      v3 = v1 & 0xE0;
      sub_1B1EFD0E0();
      swift_allocError();
      *(_QWORD *)v4 = &unk_1E636D350;
      v5 = 3;
    }
    *(_QWORD *)(v4 + 8) = v3;
    *(_BYTE *)(v4 + 16) = v5;
    swift_willThrow();
  }
}

void sub_1B1EF9D64()
{
  uint64_t v0;
  unsigned __int8 v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;

  sub_1B1EF4044();
  if (!v0)
  {
    if ((v1 & 0xE0) == 0x40)
    {
      if (v1 == 64)
        return;
      v2 = v1 & 0xF;
      if ((_DWORD)v2 == 2)
        return;
      v6 = (v2 << 8) | 2;
      sub_1B1EFD0E0();
      swift_allocError();
      v3 = 0;
      *(_QWORD *)v4 = v6;
      v5 = 5;
    }
    else
    {
      v3 = v1 & 0xE0;
      sub_1B1EFD0E0();
      swift_allocError();
      *(_QWORD *)v4 = &unk_1E636D378;
      v5 = 3;
    }
    *(_QWORD *)(v4 + 8) = v3;
    *(_BYTE *)(v4 + 16) = v5;
    swift_willThrow();
  }
}

uint64_t sub_1B1EF9E44()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v2 = v0[3];
  v3 = v0[4];
  sub_1B19FA070(v0, v2);
  result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(v3 + 8))(0, v2, v3);
  if (!v1)
  {
    if ((result & 0xE0) == 0x40)
    {
      v5 = result & 0xF;
      if (result == 64 || (_DWORD)v5 == 3)
        return result != 64;
      v7 = (v5 << 8) | 3;
      sub_1B1EFD0E0();
      swift_allocError();
      v9 = 0;
      *(_QWORD *)v8 = v7;
      v10 = 5;
    }
    else
    {
      v9 = result & 0xE0;
      sub_1B1EFD0E0();
      swift_allocError();
      *(_QWORD *)v8 = &unk_1E636D3A0;
      v10 = 3;
    }
    *(_QWORD *)(v8 + 8) = v9;
    *(_BYTE *)(v8 + 16) = v10;
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_1B1EF9F4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t result;
  char v7;
  int v8;
  unsigned __int8 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  unint64_t v14;

  result = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 48))(a2, a4);
  if (!v4)
  {
    v7 = result;
    if ((result & 0xE0) == 0x40)
    {
      v8 = result;
      if (result == 64)
        return v8 != 64;
      v9 = sub_1B1F1E04C(a3);
      if (!v9)
        return v8 != 64;
      v10 = v7 & 0xF;
      if ((_DWORD)v10 == v9)
        return v8 != 64;
      v14 = v9 | (unint64_t)(v10 << 8);
      sub_1B1EFD0E0();
      swift_allocError();
      v11 = 0;
      *(_QWORD *)v12 = v14;
      v13 = 5;
    }
    else
    {
      v11 = result & 0xE0;
      sub_1B1EFD0E0();
      swift_allocError();
      *(_QWORD *)v12 = &unk_1E636D3F8;
      v13 = 3;
    }
    *(_QWORD *)(v12 + 8) = v11;
    *(_BYTE *)(v12 + 16) = v13;
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_1B1EFA05C@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t result;
  _QWORD v18[4];

  v18[1] = a4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v9);
  v11 = (char *)v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)v18 - v14;
  swift_getAssociatedConformanceWitness();
  v16 = v18[3];
  result = sub_1B1EF96C8(AssociatedTypeWitness, a1, AssociatedTypeWitness);
  if (!v16)
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v11, v15, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t, uint64_t))(a3 + 40))(v11, a2, a3);
    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v15, AssociatedTypeWitness);
  }
  return result;
}

float sub_1B1EFA1A8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v5;
  char v6;
  float result;
  float v8;

  v5 = sub_1B1EFE140();
  v6 = sub_1B1EF9F4C(MEMORY[0x1E0DEB188], a1, MEMORY[0x1E0DEB188], a2);
  if (!v2)
  {
    result = 0.0;
    if ((v6 & 1) != 0)
    {
      sub_1B1EFA05C(a1, MEMORY[0x1E0DEB188], v5, (uint64_t)&v8);
      return v8;
    }
  }
  return result;
}

double sub_1B1EFA23C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v5;
  char v6;
  double result;
  double v8;

  v5 = sub_1B1EFE184();
  v6 = sub_1B1EF9F4C(MEMORY[0x1E0DEB070], a1, MEMORY[0x1E0DEB070], a2);
  if (!v2)
  {
    result = 0.0;
    if ((v6 & 1) != 0)
    {
      sub_1B1EFA05C(a1, MEMORY[0x1E0DEB070], v5, (uint64_t)&v8);
      return v8;
    }
  }
  return result;
}

uint64_t sub_1B1EFA2D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v16;
  _QWORD v18[11];
  uint64_t v19[5];

  v19[4] = a7;
  v19[3] = a5;
  v16 = sub_1B1A137F4(v19);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a5 - 8) + 16))(v16, a2, a5);
  v18[2] = a5;
  v18[3] = a6;
  v18[4] = a7;
  v18[5] = a8;
  v18[6] = a1;
  v18[7] = a2;
  v18[8] = a3;
  v18[9] = a4;
  sub_1B1EF39F8(v19, (void (*)(void))sub_1B1EFD074, (uint64_t)v18, a6);
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v19);
}

uint64_t sub_1B1EFA39C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X7>, uint64_t a7@<X8>)
{
  uint64_t v11;
  uint64_t v12;

  if (*(_BYTE *)(a1 + 24) == 1)
  {
    if (*(_QWORD *)(a1 + 16))
    {
      v11 = sub_1B1F1E31C(a4, a4, a6);
      if (v11)
        return sub_1B1EFA4B0(a2, a3, a4, v11, a5, a7, v12);
    }
  }
  type metadata accessor for _BinaryDecoder();
  sub_1B1EFD098();
  swift_retain();
  return sub_1B2228C68();
}

uint64_t sub_1B1EFA4B0@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X8>, uint64_t a7)
{
  uint64_t v7;
  uint64_t result;
  uint64_t v13;
  double v14;
  uint64_t v15;
  _QWORD v16[5];

  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(a5 + 64))(v16, a2, a5);
  type metadata accessor for _BinaryDecoder.UnkeyedStore();
  swift_allocObject();
  result = sub_1B1EF7C88(v16, a1);
  if (!v7)
  {
    v13 = sub_1B1EF7F64(a4, a7);
    swift_release();
    v14 = nullsub_16(v13);
    v16[0] = v15;
    (*(void (**)(uint64_t, _QWORD *, uint64_t, double))(*(_QWORD *)(a3 - 8) + 16))(a6, v16, a3, v14);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1B1EFA5B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1EF7870(a1, a2, a3, a4);
}

uint64_t sub_1B1EFA5D4(uint64_t a1, uint64_t a2)
{
  return sub_1B1EF79A0(a1, a2) & 1;
}

BOOL sub_1B1EFA5F8(uint64_t a1)
{
  uint64_t v1;
  BOOL v2;
  BOOL v4;

  sub_1B1EFA630(a1, &v4);
  if (!v1)
    return v4;
  return v2;
}

uint64_t sub_1B1EFA630@<X0>(uint64_t a1@<X1>, BOOL *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v5;
  char v6;

  result = sub_1B1EF769C(a1, a1);
  if (!v2)
  {
    sub_1B1EF3EA4();
    v6 = v5;
    if (!v5)
      sub_1B1EF4044();
    result = swift_release();
    *a2 = v6 == 0;
  }
  return result;
}

uint64_t sub_1B1EFA6C8(uint64_t a1)
{
  uint64_t v1;
  char v2;
  char v4;

  sub_1B1EFA700(a1, &v4);
  if (!v1)
    v2 = v4;
  return v2 & 1;
}

uint64_t sub_1B1EFA700@<X0>(uint64_t a1@<X1>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v5;

  result = sub_1B1EF769C(a1, a1);
  if (!v2)
  {
    v5 = sub_1B1EF8C08();
    result = swift_release();
    *a2 = v5 & 1;
  }
  return result;
}

uint64_t sub_1B1EFA764(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;

  result = sub_1B1EFA798(a1, &v3);
  if (!v1)
    return v3;
  return result;
}

uint64_t sub_1B1EFA798@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v5 = sub_1B22287A0();
  MEMORY[0x1E0C80A78](v5, v6);
  result = sub_1B1EF769C(a1, v7);
  if (!v2)
  {
    sub_1B1EF6C08(0x60u);
    sub_1B1EF46EC();
    v10 = v9;
    v12 = v11;
    sub_1B2228788();
    sub_1B1EFD65C();
    v13 = sub_1B2228770();
    if (v14)
    {
      v15 = v13;
      v16 = v14;
      sub_1B1A0DADC(v10, v12);
      result = swift_release();
      *a2 = v15;
      a2[1] = v16;
    }
    else
    {
      sub_1B1EFD0E0();
      swift_allocError();
      *(_OWORD *)v17 = xmmword_1B226E520;
      *(_BYTE *)(v17 + 16) = 6;
      swift_willThrow();
      sub_1B1A0DADC(v10, v12);
      return swift_release();
    }
  }
  return result;
}

double sub_1B1EFA908(uint64_t a1)
{
  uint64_t v1;
  double result;
  double v3;

  sub_1B1EFA93C(a1, &v3);
  if (!v1)
    return v3;
  return result;
}

uint64_t sub_1B1EFA93C@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v5;
  unint64_t v6;
  unint64_t v7;

  result = sub_1B1EF769C(a1, a1);
  if (!v2)
  {
    sub_1B1EF9C84();
    if ((v5 & 1) != 0)
    {
      sub_1B1EF48C8();
      v7 = v6;
      result = swift_release();
      *a2 = bswap64(v7);
    }
    else
    {
      result = swift_release();
      *a2 = 0;
    }
  }
  return result;
}

float sub_1B1EFA9D0(uint64_t a1)
{
  uint64_t v1;
  float result;
  float v3;

  sub_1B1EFAA04(a1, &v3);
  if (!v1)
    return v3;
  return result;
}

uint64_t sub_1B1EFAA04@<X0>(uint64_t a1@<X1>, _DWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v5;
  unsigned int v6;
  unsigned int v7;

  result = sub_1B1EF769C(a1, a1);
  if (!v2)
  {
    sub_1B1EF9D64();
    if ((v5 & 1) != 0)
    {
      sub_1B1EF5100();
      v7 = v6;
      result = swift_release();
      *a2 = bswap32(v7);
    }
    else
    {
      result = swift_release();
      *a2 = 0;
    }
  }
  return result;
}

uint64_t sub_1B1EFAA98@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = sub_1B1EF769C(a1, a1);
  if (!v3)
  {
    sub_1B1EF8F04(a2);
    v8 = v7;
    result = swift_release();
    *a3 = v8;
  }
  return result;
}

uint64_t sub_1B1EFAB00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t result;
  unsigned __int8 v9;

  result = sub_1B1EFAB38(a1, a7, &v9);
  if (!v7)
    return v9;
  return result;
}

uint64_t sub_1B1EFAB38@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, _BYTE *a3@<X8>)
{
  uint64_t v3;
  uint64_t result;
  char v7;
  char v8;

  result = sub_1B1EF769C(a1, a1);
  if (!v3)
  {
    sub_1B1EF8FE8(a2);
    v8 = v7;
    result = swift_release();
    *a3 = v8;
  }
  return result;
}

uint64_t sub_1B1EFABA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t result;
  unsigned __int16 v9;

  result = sub_1B1EFABD8(a1, a7, &v9);
  if (!v7)
    return v9;
  return result;
}

uint64_t sub_1B1EFABD8@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, _WORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t result;
  __int16 v7;
  __int16 v8;

  result = sub_1B1EF769C(a1, a1);
  if (!v3)
  {
    sub_1B1EF90C0(a2);
    v8 = v7;
    result = swift_release();
    *a3 = v8;
  }
  return result;
}

uint64_t sub_1B1EFAC40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t result;
  unsigned int v9;

  result = sub_1B1EFAC78(a1, a7, &v9);
  if (!v7)
    return v9;
  return result;
}

uint64_t sub_1B1EFAC78@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, _DWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t result;
  int v7;
  int v8;

  result = sub_1B1EF769C(a1, a1);
  if (!v3)
  {
    sub_1B1EF91A8(a2);
    v8 = v7;
    result = swift_release();
    *a3 = v8;
  }
  return result;
}

_QWORD *sub_1B1EFACE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, _QWORD *(*a8)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))
{
  uint64_t v8;
  _QWORD *result;
  uint64_t v10;

  result = a8(&v10, a4, a1, a7);
  if (!v8)
    return (_QWORD *)v10;
  return result;
}

uint64_t sub_1B1EFAD18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_1B1EFAD44(a5, a2, a1, a3, a4, a5, a7, a9);
}

uint64_t sub_1B1EFAD44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;

  result = sub_1B1EF769C(a2, a2);
  if (!v8)
  {
    v15 = result;
    v14 = type metadata accessor for _BinaryDecoder.DataStream();
    sub_1B1EFA2D0(a4, (uint64_t)&v15, a4, a3, v14, a7, (uint64_t)&off_1E6382D78, a8);
    return swift_release();
  }
  return result;
}

uint64_t sub_1B1EFADEC@<X0>(uint64_t a1@<X2>, _QWORD *a2@<X3>, uint64_t *a3@<X4>, uint64_t a4@<X6>, uint64_t a5@<X8>, uint64_t a6)
{
  return sub_1B1EFAE1C(a3, a1, a2, a4, a6, a5);
}

uint64_t sub_1B1EFAE1C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  char *v17;
  void (*v18)(char *, uint64_t, uint64_t, double);
  uint64_t v19;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD v39[2];
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD v45[5];
  _QWORD *v46;

  v41 = a5;
  v42 = a4;
  v39[1] = a6;
  v8 = *a1;
  v9 = *(_QWORD *)(*a1 + 80);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v12 = (char *)v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x1E0C80A78](v13, v14);
  v17 = (char *)v39 - v16;
  v18 = *(void (**)(char *, uint64_t, uint64_t, double))(v10 + 16);
  v43 = v19;
  v18((char *)v39 - v16, v19, v9, v15);
  swift_bridgeObjectRetain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v46 = a3;
  v40 = a2;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    a3 = sub_1B1C676F0(0, a3[2] + 1, 1, a3);
    v46 = a3;
  }
  v22 = a3[2];
  v21 = a3[3];
  if (v22 >= v21 >> 1)
    v46 = sub_1B1C676F0(v21 > 1, v22 + 1, 1, a3);
  ((void (*)(char *, char *, uint64_t))v18)(v12, v17, v9);
  sub_1B1DACB58(v22, (uint64_t)v12, (uint64_t *)&v46, v9, *(_QWORD *)(v8 + 88));
  (*(void (**)(char *, uint64_t))(v10 + 8))(v17, v9);
  v23 = v46;
  v24 = v44;
  v26 = sub_1B1EF769C(v43, v25);
  if (v24)
    return swift_bridgeObjectRelease();
  v28 = v26;
  v30 = v41;
  v29 = v42;
  type metadata accessor for _BinaryDecoder.KeyedStore(0, v42, v41, v27);
  v45[3] = type metadata accessor for _BinaryDecoder.DataStream();
  v45[4] = &off_1E6382D78;
  v45[0] = v28;
  swift_allocObject();
  v34 = sub_1B1EF620C(v45, v31, v32, v33);
  v35 = v40;
  sub_1B1EFB078(v40);
  v45[0] = v35;
  v45[1] = v23;
  v45[2] = v34;
  v37 = type metadata accessor for _BinaryKeyedDecodingContainer(0, v29, v30, v36);
  MEMORY[0x1B5E23E74](&unk_1B229E984, v37);
  sub_1B22298A4();
  return swift_release();
}

uint64_t sub_1B1EFB078(uint64_t a1)
{
  uint64_t v2;

  v2 = swift_retain();
  MEMORY[0x1B5E2064C](v2);
  if (*(_QWORD *)((*(_QWORD *)(a1 + 112) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*(_QWORD *)(a1 + 112) & 0xFFFFFFFFFFFFFF8)
                                                                                      + 0x18) >> 1)
    sub_1B2228AF4();
  sub_1B2228B30();
  return sub_1B2228AD0();
}

uint64_t sub_1B1EFB0F4@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X2>, uint64_t *a3@<X3>, _QWORD *a4@<X8>)
{
  return sub_1B1EFB110(a3, a1, a2, a4);
}

uint64_t sub_1B1EFB110@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  char *v15;
  void (*v16)(char *, uint64_t, uint64_t, double);
  uint64_t v17;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v36[5];
  _QWORD *v37;

  v33 = a2;
  v6 = *a1;
  v7 = *(_QWORD *)(*a1 + 80);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v10 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x1E0C80A78](v11, v12);
  v15 = (char *)&v31 - v14;
  v16 = *(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16);
  v34 = v17;
  v16((char *)&v31 - v14, v17, v7, v13);
  swift_bridgeObjectRetain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v37 = a3;
  v32 = a4;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    a3 = sub_1B1C676F0(0, a3[2] + 1, 1, a3);
    v37 = a3;
  }
  v20 = a3[2];
  v19 = a3[3];
  if (v20 >= v19 >> 1)
    v37 = sub_1B1C676F0(v19 > 1, v20 + 1, 1, a3);
  ((void (*)(char *, char *, uint64_t))v16)(v10, v15, v7);
  sub_1B1DACB58(v20, (uint64_t)v10, (uint64_t *)&v37, v7, *(_QWORD *)(v6 + 88));
  (*(void (**)(char *, uint64_t))(v8 + 8))(v15, v7);
  v21 = v37;
  v22 = v35;
  v24 = sub_1B1EF769C(v34, v23);
  if (v22)
    return swift_bridgeObjectRelease();
  v25 = v24;
  v36[3] = type metadata accessor for _BinaryDecoder.DataStream();
  v36[4] = &off_1E6382D78;
  v36[0] = v25;
  type metadata accessor for _BinaryDecoder.UnkeyedStore();
  swift_allocObject();
  v26 = v33;
  v28 = sub_1B1EF7C88(v36, v33);
  v29 = swift_retain();
  MEMORY[0x1B5E2064C](v29);
  if (*(_QWORD *)((*(_QWORD *)(v26 + 112) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*(_QWORD *)(v26 + 112) & 0xFFFFFFFFFFFFFF8)
                                                                                       + 0x18) >> 1)
    sub_1B2228AF4();
  sub_1B2228B30();
  sub_1B2228AD0();
  v30 = v32;
  v32[3] = &type metadata for _BinaryUnkeyedDecodingContainer;
  v30[4] = sub_1B1EFD910();
  result = swift_release();
  *v30 = v21;
  v30[1] = v26;
  v30[2] = v28;
  return result;
}

void sub_1B1EFB358()
{
  sub_1B2229688();
  __break(1u);
}

uint64_t sub_1B1EFB3B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_1B1EFB3E0(a1, a2, a3);
}

uint64_t sub_1B1EFB3E0@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  _UNKNOWN **v18;

  result = sub_1B1EF769C(a1, a1);
  if (!v3)
  {
    v7 = result;
    v8 = *(_QWORD *)(a2 + 56);
    v9 = *(_QWORD *)(a2 + 16);
    v10 = *(_BYTE *)(a2 + 24);
    v11 = *(_QWORD *)(a2 + 32);
    v12 = *(_QWORD *)(a2 + 40);
    v17 = type metadata accessor for _BinaryDecoder.DataStream();
    v18 = &off_1E6382D78;
    *(_QWORD *)&v16 = v7;
    v13 = type metadata accessor for _BinaryDecoder();
    v14 = swift_allocObject();
    v15 = MEMORY[0x1E0DEE9D8];
    *(_QWORD *)(v14 + 48) = MEMORY[0x1E0DEE9D8];
    *(_QWORD *)(v14 + 64) = 0;
    *(_QWORD *)(v14 + 112) = v15;
    sub_1B1A02518(&v16, v14 + 72);
    *(_QWORD *)(v14 + 56) = v8;
    *(_QWORD *)(v14 + 16) = v9;
    *(_BYTE *)(v14 + 24) = v10;
    *(_QWORD *)(v14 + 32) = v11;
    *(_QWORD *)(v14 + 40) = v12;
    a3[3] = v13;
    a3[4] = sub_1B1EFD098();
    *a3 = v14;
    swift_retain();
    swift_bridgeObjectRetain();
    return sub_1B19F8C48(v11);
  }
  return result;
}

uint64_t sub_1B1EFB4E4(uint64_t a1)
{
  uint64_t *v1;

  return sub_1B1EFA5B4(*v1, v1[1], v1[2], *(_QWORD *)(a1 + 16));
}

uint64_t sub_1B1EFB4F8(uint64_t a1)
{
  uint64_t *v1;

  return sub_1B1EFA5D4(a1, *v1);
}

uint64_t sub_1B1EFB50C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B1EFB54C(a1, a2, a3, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1EFA5F8) & 1;
}

uint64_t sub_1B1EFB52C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B1EFB54C(a1, a2, a3, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1EFA6C8) & 1;
}

uint64_t sub_1B1EFB54C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v4;

  return a4(a1, *v4, v4[1], v4[2], *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24)) & 1;
}

uint64_t sub_1B1EFB578(uint64_t a1)
{
  return sub_1B1EFA764(a1);
}

double sub_1B1EFB59C(uint64_t a1)
{
  return sub_1B1EFA908(a1);
}

float sub_1B1EFB5C0(uint64_t a1)
{
  return sub_1B1EFA9D0(a1);
}

_QWORD *sub_1B1EFB5E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B1EFB680(a1, a2, a3, (uint64_t)&unk_1E636D4B0, (_QWORD *(*)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))sub_1B1EFAA98);
}

uint64_t sub_1B1EFB608(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B1EFB700(a1, a2, a3, (uint64_t)&unk_1E636D040);
}

uint64_t sub_1B1EFB624(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B1EFB744(a1, a2, a3, (uint64_t)&unk_1E636D068);
}

uint64_t sub_1B1EFB640(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B1EFB788(a1, a2, a3, (uint64_t)&unk_1E636D090);
}

_QWORD *sub_1B1EFB65C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B1EFB680(a1, a2, a3, (uint64_t)&unk_1E636D0B8, (_QWORD *(*)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))sub_1B1EFAA98);
}

_QWORD *sub_1B1EFB680(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *(*a5)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))
{
  uint64_t *v5;

  return sub_1B1EFACE0(a1, *v5, v5[1], v5[2], *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a4, a5);
}

uint64_t sub_1B1EFB6AC()
{
  return sub_1B2229EB0();
}

_QWORD *sub_1B1EFB6C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B1EFB680(a1, a2, a3, (uint64_t)&unk_1E636D4E0, (_QWORD *(*)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))sub_1B1EFAA98);
}

uint64_t sub_1B1EFB6E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B1EFB700(a1, a2, a3, (uint64_t)&unk_1E636D0E0);
}

uint64_t sub_1B1EFB700(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;

  return sub_1B1EFAB00(a1, *v4, v4[1], v4[2], *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a4);
}

uint64_t sub_1B1EFB728(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B1EFB744(a1, a2, a3, (uint64_t)&unk_1E636D108);
}

uint64_t sub_1B1EFB744(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;

  return sub_1B1EFABA0(a1, *v4, v4[1], v4[2], *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a4);
}

uint64_t sub_1B1EFB76C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B1EFB788(a1, a2, a3, (uint64_t)&unk_1E63DAEC0);
}

uint64_t sub_1B1EFB788(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;

  return sub_1B1EFAC40(a1, *v4, v4[1], v4[2], *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a4);
}

_QWORD *sub_1B1EFB7B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B1EFB680(a1, a2, a3, (uint64_t)&unk_1E636D138, (_QWORD *(*)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))sub_1B1EFAA98);
}

uint64_t sub_1B1EFB7D4()
{
  return sub_1B2229EBC();
}

uint64_t sub_1B1EFB7E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_1B1EFBAB0(a1, a2, a3, a4, a5, a6, sub_1B1EFAD18);
}

uint64_t sub_1B1EFB804()
{
  return sub_1B2229E5C();
}

uint64_t sub_1B1EFB818()
{
  return sub_1B2229E50();
}

uint64_t sub_1B1EFB82C()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;

  result = sub_1B2229E68();
  if (v0)
    return v2;
  return result;
}

uint64_t sub_1B1EFB84C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B1EFB9DC(a1, a2, a3, MEMORY[0x1E0DED7E8]);
}

uint64_t sub_1B1EFB868()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;

  result = sub_1B2229E74();
  if (v0)
    return v2;
  return result;
}

uint64_t sub_1B1EFB888(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B1EFB954(a1, a2, a3, MEMORY[0x1E0DED808]);
}

uint64_t sub_1B1EFB8A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B1EFB998(a1, a2, a3, MEMORY[0x1E0DED810]);
}

uint64_t sub_1B1EFB8C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B1EFB9DC(a1, a2, a3, MEMORY[0x1E0DED818]);
}

uint64_t sub_1B1EFB8DC()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;

  result = sub_1B2229E98();
  if (v0)
    return v2;
  return result;
}

uint64_t sub_1B1EFB8FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B1EFBA48(a1, a2, a3, MEMORY[0x1E0DED830]);
}

uint64_t sub_1B1EFB918()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;

  result = sub_1B2229E80();
  if (v0)
    return v2;
  return result;
}

uint64_t sub_1B1EFB938(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B1EFB954(a1, a2, a3, MEMORY[0x1E0DED828]);
}

uint64_t sub_1B1EFB954(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4() & 0x1FF;
}

uint64_t sub_1B1EFB97C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B1EFB998(a1, a2, a3, MEMORY[0x1E0DED838]);
}

uint64_t sub_1B1EFB998(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4() & 0x1FFFF;
}

uint64_t sub_1B1EFB9C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B1EFB9DC(a1, a2, a3, MEMORY[0x1E0DED840]);
}

uint64_t sub_1B1EFB9DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  unint64_t v4;

  v4 = a4();
  return v4 | ((HIDWORD(v4) & 1) << 32);
}

uint64_t sub_1B1EFBA0C()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;

  result = sub_1B2229EA4();
  if (v0)
    return v2;
  return result;
}

uint64_t sub_1B1EFBA2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B1EFBA48(a1, a2, a3, MEMORY[0x1E0DED850]);
}

uint64_t sub_1B1EFBA48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  result = a4();
  if (v4)
    return v6;
  return result;
}

uint64_t sub_1B1EFBA6C()
{
  return sub_1B2229E8C();
}

uint64_t sub_1B1EFBA94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_1B1EFBAB0(a1, a2, a3, a4, a5, a6, (uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, _QWORD, uint64_t))sub_1B1EFADEC);
}

uint64_t sub_1B1EFBAB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, _QWORD, uint64_t))
{
  _QWORD *v7;

  return a7(a1, a2, *v7, v7[1], v7[2], *(_QWORD *)(a5 + 16), a3, *(_QWORD *)(a5 + 24), a4);
}

uint64_t sub_1B1EFBAEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B1EFBB48(a1, a2, a3, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1EFB0F4);
}

void sub_1B1EFBB08()
{
  sub_1B1EFB358();
}

uint64_t sub_1B1EFBB2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B1EFBB48(a1, a2, a3, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1EFB3B8);
}

uint64_t sub_1B1EFBB48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v4;

  return a4(a1, *v4, v4[1], v4[2], *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
}

uint64_t sub_1B1EFBB70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1EFBB98(*(_QWORD *)(v3 + 16), a1, v3, a2, a3);
}

uint64_t sub_1B1EFBB98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t result;

  v11 = *(_QWORD *)(a1 + 40);
  v12 = *(_QWORD *)(a1 + 48);
  v13 = sub_1B19FA070((_QWORD *)(a1 + 16), v11);
  result = sub_1B1EFA2D0(*(_QWORD *)(a3 + 8), (uint64_t)v13, *(_QWORD *)(a3 + 8), a2, v11, a4, v12, a5);
  if (!v5)
    ++*(_DWORD *)(a1 + 80);
  return result;
}

uint64_t sub_1B1EFBC38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1EFBC5C(*(_QWORD **)(v3 + 16), v3, a2, a3);
}

uint64_t sub_1B1EFBC5C(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v27;
  uint64_t v28;
  ValueMetadata *v29;
  unint64_t v30;
  uint64_t v31;

  v7 = *(_QWORD **)a2;
  v8 = *(unsigned int *)(*(_QWORD *)(a2 + 16) + 80);
  *(_QWORD *)&v27 = 0x207865646E49;
  *((_QWORD *)&v27 + 1) = 0xE600000000000000;
  v31 = v8;
  swift_bridgeObjectRetain();
  sub_1B2229A0C();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v7 = sub_1B1C676F0(0, v7[2] + 1, 1, v7);
  v10 = v7[2];
  v9 = v7[3];
  if (v10 >= v9 >> 1)
    v7 = sub_1B1C676F0(v9 > 1, v10 + 1, 1, v7);
  v29 = &type metadata for _BinaryKey;
  v30 = sub_1B1EFDF84();
  v11 = swift_allocObject();
  *(_QWORD *)&v27 = v11;
  *(_QWORD *)(v11 + 16) = 0x207865646E49;
  *(_QWORD *)(v11 + 24) = 0xE600000000000000;
  *(_QWORD *)(v11 + 32) = v8;
  *(_BYTE *)(v11 + 40) = 0;
  v7[2] = v10 + 1;
  sub_1B1A02518(&v27, (uint64_t)&v7[5 * v10 + 4]);
  v12 = a3;
  type metadata accessor for _BinaryDecoder.KeyedStore(0, a3, a4, v13);
  v14 = a1 + 2;
  v15 = a1[5];
  v16 = a1[6];
  sub_1B19FA070(v14, v15);
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v16 + 64))(&v27, v15, v16);
  swift_allocObject();
  v20 = sub_1B1EF620C(&v27, v17, v18, v19);
  if (v25)
    return swift_bridgeObjectRelease();
  v22 = v20;
  sub_1B1EFB078(*(_QWORD *)(a2 + 8));
  *(_QWORD *)&v27 = *(_QWORD *)(a2 + 8);
  *((_QWORD *)&v27 + 1) = v7;
  v28 = v22;
  v24 = type metadata accessor for _BinaryKeyedDecodingContainer(0, v12, a4, v23);
  MEMORY[0x1B5E23E74](&unk_1B229E984, v24);
  sub_1B22298A4();
  return swift_release();
}

uint64_t sub_1B1EFBEA0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  __int128 v23;
  ValueMetadata *v24;
  unint64_t v25;

  v7 = *(_QWORD **)a2;
  v8 = *(unsigned int *)(*(_QWORD *)(a2 + 16) + 80);
  *(_QWORD *)&v23 = 0x207865646E49;
  *((_QWORD *)&v23 + 1) = 0xE600000000000000;
  swift_bridgeObjectRetain();
  sub_1B2229A0C();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  v22 = a3;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v7 = sub_1B1C676F0(0, v7[2] + 1, 1, v7);
  v10 = v7[2];
  v9 = v7[3];
  if (v10 >= v9 >> 1)
    v7 = sub_1B1C676F0(v9 > 1, v10 + 1, 1, v7);
  v24 = &type metadata for _BinaryKey;
  v25 = sub_1B1EFDF84();
  v11 = swift_allocObject();
  *(_QWORD *)&v23 = v11;
  *(_QWORD *)(v11 + 16) = 0x207865646E49;
  *(_QWORD *)(v11 + 24) = 0xE600000000000000;
  *(_QWORD *)(v11 + 32) = v8;
  *(_BYTE *)(v11 + 40) = 0;
  v7[2] = v10 + 1;
  sub_1B1A02518(&v23, (uint64_t)&v7[5 * v10 + 4]);
  v12 = a1 + 2;
  v14 = a1[5];
  v13 = a1[6];
  sub_1B19FA070(v12, v14);
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v13 + 64))(&v23, v14, v13);
  v15 = *(_QWORD *)(a2 + 8);
  type metadata accessor for _BinaryDecoder.UnkeyedStore();
  swift_allocObject();
  v16 = sub_1B1EF7C88(&v23, v15);
  if (v3)
    return swift_bridgeObjectRelease();
  v18 = v16;
  v19 = *(_QWORD *)(a2 + 8);
  v20 = swift_retain();
  MEMORY[0x1B5E2064C](v20);
  if (*(_QWORD *)((*(_QWORD *)(v19 + 112) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*(_QWORD *)(v19 + 112) & 0xFFFFFFFFFFFFFF8)
                                                                                       + 0x18) >> 1)
    sub_1B2228AF4();
  sub_1B2228B30();
  sub_1B2228AD0();
  v21 = *(_QWORD *)(a2 + 8);
  v22[3] = &type metadata for _BinaryUnkeyedDecodingContainer;
  v22[4] = sub_1B1EFD910();
  result = swift_release();
  *v22 = v7;
  v22[1] = v21;
  v22[2] = v18;
  return result;
}

uint64_t sub_1B1EFC0E4()
{
  uint64_t v0;

  return *(unsigned int *)(*(_QWORD *)(v0 + 16) + 56);
}

BOOL sub_1B1EFC0F4()
{
  uint64_t v0;

  return *(_DWORD *)(*(_QWORD *)(v0 + 16) + 80) == *(_DWORD *)(*(_QWORD *)(v0 + 16) + 56);
}

uint64_t sub_1B1EFC10C()
{
  uint64_t v0;

  return *(unsigned int *)(*(_QWORD *)(v0 + 16) + 80);
}

uint64_t sub_1B1EFC118()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;

  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v2 + 40);
  v4 = *(_QWORD *)(v2 + 48);
  sub_1B19FA070((_QWORD *)(v2 + 16), v3);
  v5 = sub_1B1EF8ABC(v3, v4);
  if (!v1)
    ++*(_DWORD *)(v2 + 80);
  return v5 & 1;
}

uint64_t sub_1B1EFC17C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;

  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v2 + 40);
  v4 = *(_QWORD *)(v2 + 48);
  sub_1B19FA070((_QWORD *)(v2 + 16), v3);
  v5 = sub_1B1EF8CC4(v3, v4);
  if (!v1)
    ++*(_DWORD *)(v2 + 80);
  return v5 & 1;
}

char *sub_1B1EFC1E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *result;

  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v2 + 40);
  v4 = *(_QWORD *)(v2 + 48);
  sub_1B19FA070((_QWORD *)(v2 + 16), v3);
  result = sub_1B1EF896C(v3, v4);
  if (!v1)
    ++*(_DWORD *)(v2 + 80);
  return result;
}

void sub_1B1EFC240()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v2 + 40);
  v4 = *(_QWORD *)(v2 + 48);
  sub_1B19FA070((_QWORD *)(v2 + 16), v3);
  sub_1B1EFA23C(v3, v4);
  if (!v1)
    ++*(_DWORD *)(v2 + 80);
}

void sub_1B1EFC2A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v2 + 40);
  v4 = *(_QWORD *)(v2 + 48);
  sub_1B19FA070((_QWORD *)(v2 + 16), v3);
  sub_1B1EFA1A8(v3, v4);
  if (!v1)
    ++*(_DWORD *)(v2 + 80);
}

uint64_t sub_1B1EFC300(uint64_t a1, uint64_t a2)
{
  return sub_1B1EFC454(a1, a2, sub_1B1EF8D84);
}

uint64_t sub_1B1EFC31C(uint64_t a1, uint64_t a2)
{
  return sub_1B1EFC4E4(a1, a2, (void (*)(void))sub_1B1EFE0FC, MEMORY[0x1E0DEDA70]);
}

uint64_t sub_1B1EFC340(uint64_t a1, uint64_t a2)
{
  return sub_1B1EFC580(a1, a2, (void (*)(void))sub_1B1EFE0B8, MEMORY[0x1E0DEDB58]);
}

uint64_t sub_1B1EFC364(uint64_t a1, uint64_t a2)
{
  return sub_1B1EFC61C(a1, a2, (void (*)(void))sub_1B1EFE074, MEMORY[0x1E0DEDBC8]);
}

uint64_t sub_1B1EFC388(uint64_t a1, uint64_t a2)
{
  return sub_1B1EFC3AC(a1, a2, (void (*)(void))sub_1B1EFE030, MEMORY[0x1E0DEDC60]);
}

uint64_t sub_1B1EFC3AC(uint64_t a1, uint64_t a2, void (*a3)(void), uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;

  v8 = *(_QWORD *)(v4 + 16);
  v9 = *(_QWORD *)(v8 + 40);
  v10 = *(_QWORD *)(v8 + 48);
  sub_1B19FA070((_QWORD *)(v8 + 16), v9);
  result = sub_1B1EF992C(v9, v10, a3, a4);
  if (!v5)
    ++*(_DWORD *)(v8 + 80);
  return result;
}

uint64_t sub_1B1EFC424()
{
  return sub_1B2229B38();
}

uint64_t sub_1B1EFC438(uint64_t a1, uint64_t a2)
{
  return sub_1B1EFC454(a1, a2, sub_1B1EF9908);
}

uint64_t sub_1B1EFC454(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  v6 = *(_QWORD *)(v3 + 16);
  v7 = *(_QWORD *)(v6 + 40);
  v8 = *(_QWORD *)(v6 + 48);
  sub_1B19FA070((_QWORD *)(v6 + 16), v7);
  result = a3(v7, v8);
  if (!v4)
    ++*(_DWORD *)(v6 + 80);
  return result;
}

uint64_t sub_1B1EFC4C0(uint64_t a1, uint64_t a2)
{
  return sub_1B1EFC4E4(a1, a2, (void (*)(void))sub_1B1EFD7E8, MEMORY[0x1E0DEDE70]);
}

uint64_t sub_1B1EFC4E4(uint64_t a1, uint64_t a2, void (*a3)(void), uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;

  v8 = *(_QWORD *)(v4 + 16);
  v9 = *(_QWORD *)(v8 + 40);
  v10 = *(_QWORD *)(v8 + 48);
  sub_1B19FA070((_QWORD *)(v8 + 16), v9);
  result = sub_1B1EF9994(v9, v10, a3, a4);
  if (!v5)
    ++*(_DWORD *)(v8 + 80);
  return result;
}

uint64_t sub_1B1EFC55C(uint64_t a1, uint64_t a2)
{
  return sub_1B1EFC580(a1, a2, (void (*)(void))sub_1B1EFD7A4, MEMORY[0x1E0DEE068]);
}

uint64_t sub_1B1EFC580(uint64_t a1, uint64_t a2, void (*a3)(void), uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;

  v8 = *(_QWORD *)(v4 + 16);
  v9 = *(_QWORD *)(v8 + 40);
  v10 = *(_QWORD *)(v8 + 48);
  sub_1B19FA070((_QWORD *)(v8 + 16), v9);
  result = sub_1B1EF99FC(v9, v10, a3, a4);
  if (!v5)
    ++*(_DWORD *)(v8 + 80);
  return result;
}

uint64_t sub_1B1EFC5F8(uint64_t a1, uint64_t a2)
{
  return sub_1B1EFC61C(a1, a2, (void (*)(void))sub_1B1EFD760, MEMORY[0x1E0DEE0F8]);
}

uint64_t sub_1B1EFC61C(uint64_t a1, uint64_t a2, void (*a3)(void), uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;

  v8 = *(_QWORD *)(v4 + 16);
  v9 = *(_QWORD *)(v8 + 40);
  v10 = *(_QWORD *)(v8 + 48);
  sub_1B19FA070((_QWORD *)(v8 + 16), v9);
  result = sub_1B1EF9A64(v9, v10, a3, a4);
  if (!v5)
    ++*(_DWORD *)(v8 + 80);
  return result;
}

uint64_t sub_1B1EFC694(uint64_t a1, uint64_t a2)
{
  return sub_1B1EFC3AC(a1, a2, (void (*)(void))sub_1B1EFD71C, MEMORY[0x1E0DEE190]);
}

uint64_t sub_1B1EFC6B8()
{
  return sub_1B2229B44();
}

uint64_t sub_1B1EFC6CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B1EFBB70(a1, a2, a3);
}

uint64_t sub_1B1EFC6E0()
{
  return sub_1B2229AE4();
}

uint64_t sub_1B1EFC6F4()
{
  return sub_1B2229AD8();
}

uint64_t sub_1B1EFC708()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;

  result = sub_1B2229AF0();
  if (v0)
    return v2;
  return result;
}

uint64_t sub_1B1EFC728(uint64_t a1, uint64_t a2)
{
  return sub_1B1EFC8B8(a1, a2, MEMORY[0x1E0DED2E0]);
}

uint64_t sub_1B1EFC744()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;

  result = sub_1B2229AFC();
  if (v0)
    return v2;
  return result;
}

uint64_t sub_1B1EFC764(uint64_t a1, uint64_t a2)
{
  return sub_1B1EFC830(a1, a2, MEMORY[0x1E0DED300]);
}

uint64_t sub_1B1EFC780(uint64_t a1, uint64_t a2)
{
  return sub_1B1EFC874(a1, a2, MEMORY[0x1E0DED308]);
}

uint64_t sub_1B1EFC79C(uint64_t a1, uint64_t a2)
{
  return sub_1B1EFC8B8(a1, a2, MEMORY[0x1E0DED310]);
}

uint64_t sub_1B1EFC7B8()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;

  result = sub_1B2229B20();
  if (v0)
    return v2;
  return result;
}

uint64_t sub_1B1EFC7D8(uint64_t a1, uint64_t a2)
{
  return sub_1B1EFC924(a1, a2, MEMORY[0x1E0DED328]);
}

uint64_t sub_1B1EFC7F4()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;

  result = sub_1B2229B08();
  if (v0)
    return v2;
  return result;
}

uint64_t sub_1B1EFC814(uint64_t a1, uint64_t a2)
{
  return sub_1B1EFC830(a1, a2, MEMORY[0x1E0DED320]);
}

uint64_t sub_1B1EFC830(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3() & 0x1FF;
}

uint64_t sub_1B1EFC858(uint64_t a1, uint64_t a2)
{
  return sub_1B1EFC874(a1, a2, MEMORY[0x1E0DED330]);
}

uint64_t sub_1B1EFC874(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3() & 0x1FFFF;
}

uint64_t sub_1B1EFC89C(uint64_t a1, uint64_t a2)
{
  return sub_1B1EFC8B8(a1, a2, MEMORY[0x1E0DED338]);
}

uint64_t sub_1B1EFC8B8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  unint64_t v3;

  v3 = a3();
  return v3 | ((HIDWORD(v3) & 1) << 32);
}

uint64_t sub_1B1EFC8E8()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;

  result = sub_1B2229B2C();
  if (v0)
    return v2;
  return result;
}

uint64_t sub_1B1EFC908(uint64_t a1, uint64_t a2)
{
  return sub_1B1EFC924(a1, a2, MEMORY[0x1E0DED348]);
}

uint64_t sub_1B1EFC924(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  result = a3();
  if (v3)
    return v5;
  return result;
}

uint64_t sub_1B1EFC948()
{
  return sub_1B2229B14();
}

uint64_t sub_1B1EFC970(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B1EFBC38(a1, a2, a3);
}

uint64_t sub_1B1EFC984@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  return sub_1B1EFBEA0(*(_QWORD **)(v1 + 16), v1, a1);
}

void sub_1B1EFC9A0()
{
  sub_1B2229688();
  __break(1u);
}

uint64_t sub_1B1EFCA00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;

  return sub_1B1EFA2D0(*v3, (uint64_t)(v3 + 2), *v3, a1, (uint64_t)&type metadata for _BinaryDecoder.SingleValueStore, a2, (uint64_t)&off_1E6382EB8, a3);
}

uint64_t sub_1B1EFCA44()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v1 = v0[5];
  v2 = v0[6];
  sub_1B19FA070(v0 + 2, v1);
  if ((*(unsigned __int8 (**)(uint64_t, uint64_t, uint64_t))(v2 + 8))(1, v1, v2))
    return 0;
  v5 = v0[5];
  v4 = v0[6];
  sub_1B19FA070(v0 + 2, v5);
  (*(void (**)(_QWORD, uint64_t, uint64_t))(v4 + 8))(0, v5, v4);
  return 1;
}

uint64_t sub_1B1EFCAF8()
{
  return sub_1B1EF8B18() & 1;
}

char *sub_1B1EFCB1C()
{
  return sub_1B1EF8814();
}

uint64_t sub_1B1EFCB3C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = v0;
  v3 = (_QWORD *)(v0 + 16);
  result = sub_1B1EF9E44();
  if (!v1 && (result & 1) != 0)
  {
    v6 = *(_QWORD *)(v2 + 40);
    v5 = *(_QWORD *)(v2 + 48);
    sub_1B19FA070(v3, v6);
    return (uint64_t)(*(_QWORD *(**)(uint64_t *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(v5 + 32))(&v7, MEMORY[0x1E0DEE190], MEMORY[0x1E0DEE1E0], v6, v5);
  }
  return result;
}

uint64_t sub_1B1EFCBD8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = v0;
  v3 = (_QWORD *)(v0 + 16);
  result = sub_1B1EF9B7C();
  if (!v1 && (result & 1) != 0)
  {
    v6 = *(_QWORD *)(v2 + 40);
    v5 = *(_QWORD *)(v2 + 48);
    sub_1B19FA070(v3, v6);
    return (uint64_t)(*(_QWORD *(**)(uint64_t *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(v5 + 32))(&v7, MEMORY[0x1E0DEE0F8], MEMORY[0x1E0DEE158], v6, v5);
  }
  return result;
}

uint64_t sub_1B1EFCC74()
{
  return sub_1B1EF8DA8((uint64_t)&unk_1E636D1C0, MEMORY[0x1E0DEDC60], MEMORY[0x1E0DEDCC8]);
}

uint64_t sub_1B1EFCCAC()
{
  return sub_1B1EFDE30((uint64_t)&unk_1E63B7DB8, MEMORY[0x1E0DEDA70], MEMORY[0x1E0DEDAB8]);
}

uint64_t sub_1B1EFCCD8()
{
  return sub_1B1EF928C((uint64_t)&unk_1E636D168, MEMORY[0x1E0DEDB58], MEMORY[0x1E0DEDBA0]);
}

uint64_t sub_1B1EFCD10()
{
  return sub_1B1EF93EC((uint64_t)&unk_1E636D190, MEMORY[0x1E0DEDBC8], MEMORY[0x1E0DEDC28]);
}

uint64_t sub_1B1EFCD48()
{
  return sub_1B2229D9C();
}

uint64_t sub_1B1EFCD5C()
{
  return sub_1B1EF8DA8((uint64_t)&unk_1E636D248, MEMORY[0x1E0DEE190], MEMORY[0x1E0DEE1E0]);
}

uint64_t sub_1B1EFCD94()
{
  return sub_1B1EFDE30((uint64_t)&unk_1E63B7DE0, MEMORY[0x1E0DEDE70], MEMORY[0x1E0DEDEC0]);
}

uint64_t sub_1B1EFCDC0()
{
  return sub_1B1EF928C((uint64_t)&unk_1E636D1F0, MEMORY[0x1E0DEE068], MEMORY[0x1E0DEE0C0]);
}

uint64_t sub_1B1EFCDF8()
{
  return sub_1B1EF93EC((uint64_t)&unk_1E636D218, MEMORY[0x1E0DEE0F8], MEMORY[0x1E0DEE158]);
}

uint64_t sub_1B1EFCE30()
{
  return sub_1B2229DA8();
}

uint64_t sub_1B1EFCE44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B1EFCA00(a1, a2, a3);
}

uint64_t sub_1B1EFCE58()
{
  return swift_bridgeObjectRetain();
}

double (*sub_1B1EFCE64())(_QWORD)
{
  return nullsub_16;
}

uint64_t sub_1B1EFCE78(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1B1EF31B4(a1, a2, a3, a4, a5);
}

uint64_t sub_1B1EFCE98(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  return sub_1B1EF8010(a1, a2, *(_QWORD *)(v2 + 40));
}

uint64_t sub_1B1EFCEC8(uint64_t a1, void (*a2)(_QWORD *, uint64_t *))
{
  uint64_t v2;
  uint64_t v5;
  uint64_t result;
  _QWORD v7[2];
  uint64_t v8;

  if (a1 < 0)
  {
    result = sub_1B222967C();
    __break(1u);
  }
  else
  {
    if (a1)
    {
      v5 = sub_1B2228B0C();
      *(_QWORD *)(v5 + 16) = a1;
    }
    else
    {
      v5 = MEMORY[0x1E0DEE9D8];
    }
    v8 = 0;
    v7[0] = v5 + 32;
    v7[1] = a1;
    a2(v7, &v8);
    *(_QWORD *)(v5 + 16) = v8;
    if (v2)
      swift_bridgeObjectRelease();
    return v5;
  }
  return result;
}

uint64_t sub_1B1EFCFB8(uint64_t a1)
{
  uint64_t v1;

  return sub_1B1EF80CC(a1, *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56), *(_QWORD **)(v1 + 64), *(_QWORD *)(v1 + 72), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t sub_1B1EFCFE8(uint64_t a1)
{
  swift_bridgeObjectRelease();
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0(a1 + 16);
  return a1;
}

uint64_t sub_1B1EFD018()
{
  sub_1B2229130();
  return sub_1B22290D0();
}

uint64_t sub_1B1EFD074@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_1B1EFA39C(v1[6], v1[8], v1[2], v1[3], v1[4], v1[5], a1);
}

unint64_t sub_1B1EFD098()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1ED4B8C40;
  if (!qword_1ED4B8C40)
  {
    v1 = type metadata accessor for _BinaryDecoder();
    result = MEMORY[0x1B5E23E74](&unk_1B229E898, v1);
    atomic_store(result, (unint64_t *)&qword_1ED4B8C40);
  }
  return result;
}

unint64_t sub_1B1EFD0E0()
{
  unint64_t result;

  result = qword_1ED4B7F88;
  if (!qword_1ED4B7F88)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22A1100, &type metadata for BinaryCoding.Err);
    atomic_store(result, (unint64_t *)&qword_1ED4B7F88);
  }
  return result;
}

_QWORD **sub_1B1EFD124(_QWORD **a1, _QWORD *a2)
{
  uint64_t v2;

  return sub_1B1EF7E84(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD **)(v2 + 24));
}

uint64_t sub_1B1EFD13C()
{
  return sub_1B1F1DDE8() & 1;
}

uint64_t sub_1B1EFD168(uint64_t a1)
{
  uint64_t v1;

  return sub_1B1EF7BD0(a1, *(uint64_t (**)(uint64_t, _QWORD))(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24)) & 1;
}

uint64_t sub_1B1EFD188(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, int64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;

  v11 = sub_1B2227E4C();
  if (v11)
    v11 += a1 - sub_1B2227E70();
  v12 = sub_1B2227E64();
  v13 = a2 - a1;
  if (v12 < a2 - a1)
    v13 = v12;
  v14 = v11 + v13;
  if (v11)
    v15 = v14;
  else
    v15 = 0;
  sub_1B1EF5774(a4, (uint64_t)a4 + 8, v11, v15, a5, a6);
  return swift_release();
}

uint64_t sub_1B1EFD244(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, int64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;

  v11 = sub_1B2227E4C();
  if (v11)
    v11 += a1 - sub_1B2227E70();
  v12 = sub_1B2227E64();
  v13 = a2 - a1;
  if (v12 < a2 - a1)
    v13 = v12;
  v14 = v11 + v13;
  if (v11)
    v15 = v14;
  else
    v15 = 0;
  sub_1B1EF5774(a4, (uint64_t)a4 + 1, v11, v15, a5, a6);
  return swift_release();
}

uint64_t sub_1B1EFD300(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, int64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;

  v11 = sub_1B2227E4C();
  if (v11)
    v11 += a1 - sub_1B2227E70();
  v12 = sub_1B2227E64();
  v13 = a2 - a1;
  if (v12 < a2 - a1)
    v13 = v12;
  v14 = v11 + v13;
  if (v11)
    v15 = v14;
  else
    v15 = 0;
  sub_1B1EF5774(a4, (uint64_t)a4 + 2, v11, v15, a5, a6);
  return swift_release();
}

uint64_t sub_1B1EFD3BC(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, int64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;

  v11 = sub_1B2227E4C();
  if (v11)
    v11 += a1 - sub_1B2227E70();
  v12 = sub_1B2227E64();
  v13 = a2 - a1;
  if (v12 < a2 - a1)
    v13 = v12;
  v14 = v11 + v13;
  if (v11)
    v15 = v14;
  else
    v15 = 0;
  sub_1B1EF5774(a4, (uint64_t)a4 + 4, v11, v15, a5, a6);
  return swift_release();
}

uint64_t sub_1B1EFD478(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;

  v21 = a8;
  v22 = a9;
  v16 = sub_1B1A137F4((uint64_t *)&v20);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a8 - 8) + 32))(v16, a1, a8);
  type metadata accessor for _BinaryDecoder();
  v17 = swift_allocObject();
  v18 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v17 + 48) = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v17 + 64) = 0;
  *(_QWORD *)(v17 + 112) = v18;
  sub_1B1A02518(&v20, v17 + 72);
  *(_QWORD *)(v17 + 56) = a2;
  *(_QWORD *)(v17 + 16) = a3;
  *(_BYTE *)(v17 + 24) = a4;
  *(_QWORD *)(v17 + 32) = a5;
  *(_QWORD *)(v17 + 40) = a6;
  return v17;
}

uint64_t sub_1B1EFD53C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v2 + 16) - 8) + 16))(a2, a1);
}

void sub_1B1EFD574()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED4BA288)
  {
    type metadata accessor for _BinaryDecoder.DataStream();
    v0 = sub_1B22285A8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED4BA288);
  }
}

uint64_t sub_1B1EFD5D8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1B1EF754C(a1, a2, *(_QWORD *)(v2 + 32), *(_QWORD **)(v2 + 40), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
}

uint64_t sub_1B1EFD5F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t (*v6)(uint64_t, _QWORD);
  uint64_t TupleTypeMetadata2;

  v6 = (uint64_t (*)(uint64_t, _QWORD))v4[4];
  type metadata accessor for _KeyBox(255, v4[2], v4[3], a4);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  return v6(a1, *(_QWORD *)(a1 + *(int *)(TupleTypeMetadata2 + 48)));
}

unint64_t sub_1B1EFD65C()
{
  unint64_t result;

  result = qword_1ED4B7B30;
  if (!qword_1ED4B7B30)
  {
    result = MEMORY[0x1B5E23E74](MEMORY[0x1E0CB0368], MEMORY[0x1E0CB0338]);
    atomic_store(result, (unint64_t *)&qword_1ED4B7B30);
  }
  return result;
}

uint64_t sub_1B1EFD6A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[6];

  v9 = v8[2];
  v10 = v8[4];
  v11 = v8[5];
  v12 = v8[6];
  v14[2] = a1;
  v14[3] = a2;
  v14[4] = v11;
  v14[5] = v12;
  return sub_1B1EF311C(v10, (uint64_t)sub_1B1EFD6FC, (uint64_t)v14, v9, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEE9C0] + 8, MEMORY[0x1E0DEDD18], a8);
}

void *sub_1B1EFD6FC(void *a1, uint64_t a2)
{
  uint64_t *v2;

  return sub_1B1EF5774(a1, a2, v2[2], v2[3], v2[4], v2[5]);
}

unint64_t sub_1B1EFD71C()
{
  unint64_t result;

  result = qword_1ED4BB118;
  if (!qword_1ED4BB118)
  {
    result = MEMORY[0x1B5E23E74](MEMORY[0x1E0DEE1D0], MEMORY[0x1E0DEE190]);
    atomic_store(result, (unint64_t *)&qword_1ED4BB118);
  }
  return result;
}

unint64_t sub_1B1EFD760()
{
  unint64_t result;

  result = qword_1ED4BB110;
  if (!qword_1ED4BB110)
  {
    result = MEMORY[0x1B5E23E74](MEMORY[0x1E0DEE148], MEMORY[0x1E0DEE0F8]);
    atomic_store(result, (unint64_t *)&qword_1ED4BB110);
  }
  return result;
}

unint64_t sub_1B1EFD7A4()
{
  unint64_t result;

  result = qword_1EEF60AE8;
  if (!qword_1EEF60AE8)
  {
    result = MEMORY[0x1B5E23E74](MEMORY[0x1E0DEE0B0], MEMORY[0x1E0DEE068]);
    atomic_store(result, (unint64_t *)&qword_1EEF60AE8);
  }
  return result;
}

unint64_t sub_1B1EFD7E8()
{
  unint64_t result;

  result = qword_1EEF60AF0;
  if (!qword_1EEF60AF0)
  {
    result = MEMORY[0x1B5E23E74](MEMORY[0x1E0DEDEB0], MEMORY[0x1E0DEDE70]);
    atomic_store(result, (unint64_t *)&qword_1EEF60AF0);
  }
  return result;
}

void sub_1B1EFD82C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF60AF8)
  {
    sub_1B1EFD8B4(255, (unint64_t *)&unk_1EEF5CD98, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))type metadata accessor for _KeyBox);
    type metadata accessor for _BinaryDecoder.DataStream();
    sub_1B1EB62E0();
    v0 = sub_1B22285A8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF60AF8);
  }
}

void sub_1B1EFD8B4(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_1B1C78FEC();
    v7 = a3(a1, &type metadata for StringCodingKeys, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

unint64_t sub_1B1EFD910()
{
  unint64_t result;

  result = qword_1ED4B9D08;
  if (!qword_1ED4B9D08)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B229EB04, &type metadata for _BinaryUnkeyedDecodingContainer);
    atomic_store(result, (unint64_t *)&qword_1ED4B9D08);
  }
  return result;
}

uint64_t type metadata accessor for _BinaryKeyedDecodingContainer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B19E5E34(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _BinaryKeyedDecodingContainer);
}

void sub_1B1EFD960(uint64_t a1, unint64_t *a2, uint64_t (*a3)(_QWORD, _QWORD))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    v4 = a3(0, MEMORY[0x1E0DEDE70]);
    if (!v5)
      atomic_store(v4, a2);
  }
}

unint64_t sub_1B1EFD9A8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1ED4BA518;
  if (!qword_1ED4BA518)
  {
    sub_1B1EFD960(255, &qword_1ED4BA510, (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x1E0DEAEC8]);
    result = MEMORY[0x1B5E23E74](MEMORY[0x1E0DEAF38], v1);
    atomic_store(result, (unint64_t *)&qword_1ED4BA518);
  }
  return result;
}

uint64_t sub_1B1EFDA00(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  return a1;
}

uint64_t initializeBufferWithCopyOfBuffer for _BinaryUnkeyedDecodingContainer(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for _BinaryUnkeyedDecodingContainer(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  return a1;
}

uint64_t assignWithTake for _BinaryUnkeyedDecodingContainer(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  return a1;
}

ValueMetadata *type metadata accessor for _BinaryUnkeyedDecodingContainer()
{
  return &type metadata for _BinaryUnkeyedDecodingContainer;
}

uint64_t initializeWithCopy for _BinaryDecoder.SingleValueStore(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v3;
  (**(void (***)(void))(v3 - 8))();
  return a1;
}

uint64_t *assignWithCopy for _BinaryDecoder.SingleValueStore(uint64_t *a1, uint64_t *a2)
{
  sub_1B1E354A4(a1, a2);
  return a1;
}

uint64_t assignWithTake for _BinaryDecoder.SingleValueStore(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0(a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for _BinaryDecoder.SingleValueStore(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for _BinaryDecoder.SingleValueStore(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for _BinaryDecoder.SingleValueStore()
{
  return &type metadata for _BinaryDecoder.SingleValueStore;
}

uint64_t destroy for _BinarySingleValueDecodingContainer(uint64_t a1)
{
  swift_bridgeObjectRelease();
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0(a1 + 16);
}

uint64_t initializeWithCopy for _BinarySingleValueDecodingContainer(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = a2 + 16;
  v5 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 40) = v5;
  v6 = v5;
  v7 = **(void (***)(uint64_t, uint64_t, uint64_t))(v5 - 8);
  swift_bridgeObjectRetain();
  v7(a1 + 16, v4, v6);
  return a1;
}

_QWORD *assignWithCopy for _BinarySingleValueDecodingContainer(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  sub_1B1E354A4(a1 + 2, a2 + 2);
  return a1;
}

uint64_t assignWithTake for _BinarySingleValueDecodingContainer(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0(a1 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v4;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  return a1;
}

uint64_t getEnumTagSinglePayload for _BinarySingleValueDecodingContainer(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 56))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for _BinarySingleValueDecodingContainer(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 56) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for _BinarySingleValueDecodingContainer()
{
  return &type metadata for _BinarySingleValueDecodingContainer;
}

uint64_t sub_1B1EFDE28(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 24);
}

uint64_t sub_1B1EFDE30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  char v11;
  unint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v8 = v3[5];
  v9 = v3[6];
  sub_1B19FA070(v3 + 2, v8);
  result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(v9 + 8))(0, v8, v9);
  if (!v4)
  {
    v11 = result;
    if ((result & 0xE0) == 0x20)
    {
      result &= 0xFu;
      if ((v11 & 0x10) == 0)
        return result;
      if (!(_DWORD)result)
      {
        v16 = v3[5];
        v17 = v3[6];
        sub_1B19FA070(v3 + 2, v16);
        (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(v17 + 32))(&v18, a2, a3, v16, v17);
        return v18;
      }
      v12 = (unint64_t)(v11 & 0xF) << 8;
      sub_1B1EFD0E0();
      swift_allocError();
      *(_QWORD *)v13 = v12;
      *(_QWORD *)(v13 + 8) = 0;
      v14 = 5;
    }
    else
    {
      v15 = result & 0xE0;
      sub_1B1EFD0E0();
      swift_allocError();
      *(_QWORD *)v13 = a1;
      *(_QWORD *)(v13 + 8) = v15;
      v14 = 3;
    }
    *(_BYTE *)(v13 + 16) = v14;
    return swift_willThrow();
  }
  return result;
}

unint64_t sub_1B1EFDF84()
{
  unint64_t result;

  result = qword_1ED4B7C10;
  if (!qword_1ED4B7C10)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22A0EF8, &type metadata for _BinaryKey);
    atomic_store(result, (unint64_t *)&qword_1ED4B7C10);
  }
  return result;
}

uint64_t sub_1B1EFDFC8()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

unint64_t sub_1B1EFDFEC()
{
  unint64_t result;

  result = qword_1ED4BB100;
  if (!qword_1ED4BB100)
  {
    result = MEMORY[0x1B5E23E74](MEMORY[0x1E0DEDEA0], MEMORY[0x1E0DEDE70]);
    atomic_store(result, (unint64_t *)&qword_1ED4BB100);
  }
  return result;
}

unint64_t sub_1B1EFE030()
{
  unint64_t result;

  result = qword_1ED4BB068;
  if (!qword_1ED4BB068)
  {
    result = MEMORY[0x1B5E23E74](MEMORY[0x1E0DEDCB0], MEMORY[0x1E0DEDC60]);
    atomic_store(result, (unint64_t *)&qword_1ED4BB068);
  }
  return result;
}

unint64_t sub_1B1EFE074()
{
  unint64_t result;

  result = qword_1ED4BB040;
  if (!qword_1ED4BB040)
  {
    result = MEMORY[0x1B5E23E74](MEMORY[0x1E0DEDC10], MEMORY[0x1E0DEDBC8]);
    atomic_store(result, (unint64_t *)&qword_1ED4BB040);
  }
  return result;
}

unint64_t sub_1B1EFE0B8()
{
  unint64_t result;

  result = qword_1EEF60B00;
  if (!qword_1EEF60B00)
  {
    result = MEMORY[0x1B5E23E74](MEMORY[0x1E0DEDB90], MEMORY[0x1E0DEDB58]);
    atomic_store(result, (unint64_t *)&qword_1EEF60B00);
  }
  return result;
}

unint64_t sub_1B1EFE0FC()
{
  unint64_t result;

  result = qword_1EEF60B08;
  if (!qword_1EEF60B08)
  {
    result = MEMORY[0x1B5E23E74](MEMORY[0x1E0DEDAA8], MEMORY[0x1E0DEDA70]);
    atomic_store(result, (unint64_t *)&qword_1EEF60B08);
  }
  return result;
}

unint64_t sub_1B1EFE140()
{
  unint64_t result;

  result = qword_1ED4BA248;
  if (!qword_1ED4BA248)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22A0DB0, MEMORY[0x1E0DEB188]);
    atomic_store(result, (unint64_t *)&qword_1ED4BA248);
  }
  return result;
}

unint64_t sub_1B1EFE184()
{
  unint64_t result;

  result = qword_1EEF60B10;
  if (!qword_1EEF60B10)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22A0DCC, MEMORY[0x1E0DEB070]);
    atomic_store(result, (unint64_t *)&qword_1EEF60B10);
  }
  return result;
}

void sub_1B1EFE1D4(void *a1, uint64_t a2, uint64_t *a3, char a4, uint64_t a5, void *a6, uint64_t a7, unsigned int *a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  void *v25;
  void *v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  id v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  char **v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  const char *v40;
  char **v41;
  uint64_t v42;
  uint64_t v43;
  BOOL v44;
  uint64_t v45;
  uint64_t v46;
  id v47;
  void *v48;
  void *v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  _QWORD v64[7];
  _QWORD v65[7];
  _QWORD v66[8];

  v21 = *a3;
  v22 = a3[1];
  sub_1B1EFF55C();
  v23 = swift_allocObject();
  *(_OWORD *)(v23 + 16) = xmmword_1B226D240;
  *(_OWORD *)(v23 + 32) = xmmword_1B229ED40;
  *(_BYTE *)(v23 + 48) = 0;
  *(_QWORD *)(v23 + 64) = a4 & 1;
  *(_OWORD *)(v23 + 72) = 0u;
  *(_OWORD *)(v23 + 88) = 0u;
  *(_OWORD *)(v23 + 104) = 0u;
  *(_QWORD *)(v23 + 120) = 0;
  *(_BYTE *)(v23 + 128) = 13;
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  sub_1B1E2738C(v21, v22, 0, v23, v64);
  v24 = sub_1B1B3947C((uint64_t)v64, 0, 0);
  v26 = v25;
  sub_1B1B1FB80((uint64_t)v64);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  if (v24)
  {
    swift_getObjectType();
    objc_msgSend(a1, sel_setTexture_atIndex_, a5, 0);
    objc_msgSend(a1, sel_setTexture_atIndex_, a6, 1);
    objc_msgSend(a1, sel_setBytes_length_atIndex_, a7, 4, 0);
    sub_1B1F40F48(v24, (uint64_t)a6, 0);
    v27 = objc_msgSend(*(id *)(a2 + 16), sel_supportsWritableArrayOfTextures);
    v28 = swift_allocObject();
    v29 = *a8;
    *(_OWORD *)(v28 + 16) = xmmword_1B226D240;
    *(_OWORD *)(v28 + 32) = xmmword_1B229ED50;
    *(_BYTE *)(v28 + 48) = 0;
    *(_QWORD *)(v28 + 64) = v29;
    *(_OWORD *)(v28 + 72) = 0u;
    *(_OWORD *)(v28 + 88) = 0u;
    *(_OWORD *)(v28 + 104) = 0u;
    *(_QWORD *)(v28 + 120) = 0;
    *(_BYTE *)(v28 + 128) = 14;
    swift_bridgeObjectRetain();
    v30 = a8;
    if (v27)
    {
      sub_1B1E2738C(0xD00000000000001CLL, 0x80000001B2343960, 0, v28, v65);
      v31 = sub_1B1B3947C((uint64_t)v65, 0, 0);
      v33 = v32;
      sub_1B1B1FB80((uint64_t)v65);
      swift_bridgeObjectRelease();

      if (!v31)
        goto LABEL_19;
      objc_msgSend(a1, sel_setTexture_atIndex_, a6, 0);
      objc_msgSend(a1, sel_setTexture_atIndex_, a9, 1);
      objc_msgSend(a1, sel_setTexture_atIndex_, a10, 2);
    }
    else
    {
      sub_1B1E2738C(0xD00000000000002BLL, 0x80000001B2343910, 0, v28, v65);
      v31 = sub_1B1B3947C((uint64_t)v65, 0, 0);
      v35 = v34;
      sub_1B1B1FB80((uint64_t)v65);
      swift_bridgeObjectRelease();

      if (!v31)
        goto LABEL_19;
      v36 = &selRef_setKeyPathDst_;
      objc_msgSend(a1, sel_setTexture_atIndex_, a6, 0);
      v37 = *(_QWORD *)a8;
      if (*(_QWORD *)a8)
      {
        v56 = a6;
        swift_getObjectType();
        v38 = 0;
        while (1)
        {
          v39 = sub_1B1F9CD08();
          if (!v39)
            goto LABEL_18;
          v40 = v36[386];
          v41 = v36;
          v42 = v38 + 1;
          objc_msgSend(a1, v40, v39, v38 + 1);
          swift_getObjectType();
          v43 = sub_1B1F9CD08();
          if (!v43)
          {
            swift_unknownObjectRelease();
            goto LABEL_18;
          }
          objc_msgSend(a1, (SEL)v41 + 3086, v43, v38 + 4);
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          ++v38;
          v44 = v42 == v37;
          v36 = v41;
          if (v44)
          {
            a6 = v56;
            v30 = a8;
            break;
          }
        }
      }
    }
    objc_msgSend(a1, sel_setBytes_length_atIndex_, a11, 40, 0, v56);
    sub_1B1F40DEC(a12, a13, a14, 0);
    sub_1B1F40F48(v31, (uint64_t)a6, 0);
    swift_unknownObjectRelease();
    v45 = swift_allocObject();
    v46 = *(unsigned int *)v30;
    *(_OWORD *)(v45 + 16) = xmmword_1B226D240;
    *(_OWORD *)(v45 + 32) = xmmword_1B229ED50;
    *(_BYTE *)(v45 + 48) = 0;
    *(_QWORD *)(v45 + 64) = v46;
    *(_OWORD *)(v45 + 72) = 0u;
    *(_OWORD *)(v45 + 88) = 0u;
    *(_OWORD *)(v45 + 104) = 0u;
    *(_QWORD *)(v45 + 120) = 0;
    *(_BYTE *)(v45 + 128) = 14;
    swift_bridgeObjectRetain();
    sub_1B1E2738C(0xD00000000000001ALL, 0x80000001B2343940, 0, v45, v66);
    v47 = sub_1B1B3947C((uint64_t)v66, 0, 0);
    v49 = v48;
    sub_1B1B1FB80((uint64_t)v66);
    swift_bridgeObjectRelease();

    if (v47)
    {
      objc_msgSend(a1, sel_setTexture_atIndex_, a9, 0);
      objc_msgSend(a1, sel_setTexture_atIndex_, a10, 1);
      objc_msgSend(a1, sel_setTexture_atIndex_, a6, 2);
      v50 = (uint64_t)objc_msgSend(v47, sel_threadExecutionWidth);
      sub_1B1EFF5B0(1, (v50 + 2 * a15) / v50 * v50, &v62);
      v51 = v62;
      v52 = v63;
      sub_1B1EFF5B0((uint64_t)objc_msgSend(a6, sel_width), ((uint64_t)objc_msgSend(a6, sel_height) + *((_QWORD *)&v62 + 1) - 1) / *((_QWORD *)&v62 + 1), &v62);
      v59 = v62;
      v53 = v63;
      v54 = ((32 * a16 + 16 * *((_QWORD *)&v51 + 1)) * *v30) | 0xF;
      if (v54 <= 0)
        v55 = -(-v54 & 0xF);
      else
        v55 = 15;
      objc_msgSend(a1, sel_setThreadgroupMemoryLength_atIndex_, v54 - v55, 0);
      objc_msgSend(a1, sel_setComputePipelineState_, v47);
      v62 = v59;
      v63 = v53;
      v60 = v51;
      v61 = v52;
      objc_msgSend(a1, sel_dispatchThreadgroups_threadsPerThreadgroup_, &v62, &v60);
LABEL_18:
      swift_unknownObjectRelease();
    }
LABEL_19:
    swift_unknownObjectRelease();
  }
}

uint64_t type metadata accessor for LensBlurPassSystem()
{
  return objc_opt_self();
}

const char *sub_1B1EFE860()
{
  return "LensBlurPass";
}

uint64_t sub_1B1EFE874()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t inited;
  __int128 v3;
  _OWORD v5[2];
  uint64_t v6;
  uint64_t v7;
  int v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  type metadata accessor for LensBlurPassSystem();
  v0 = swift_allocObject();
  if (qword_1ED4B7DB8 != -1)
    swift_once();
  v1 = qword_1ED4D09F8;
  sub_1B1BF28AC(0, (unint64_t *)&qword_1ED4BAE50, (void (*)(uint64_t))sub_1B19F66EC);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = &type metadata for ProjectionMatrix;
  *(_QWORD *)(inited + 40) = &off_1E638A420;
  v7 = v1;
  v8 = 0;
  v9 = 2;
  v10 = 0;
  v11 = 2;
  v12 = 0;
  swift_retain();
  sub_1B1E68AF8(inited, 1, (uint64_t)v5);
  swift_setDeallocating();
  swift_release();
  v3 = v5[1];
  *(_OWORD *)(v0 + 16) = v5[0];
  *(_OWORD *)(v0 + 32) = v3;
  *(_QWORD *)(v0 + 48) = v6;
  return v0;
}

_OWORD *sub_1B1EFE9B0(void *a1, uint64_t a2, uint64_t a3, float a4)
{
  float32x2_t *v8;
  _OWORD *v9;
  char *v10;
  id v11;
  uint64_t v12;
  unint64_t v13;
  _OWORD *v14;
  float32x2_t *v15;
  _OWORD *v16;
  float v17;
  uint64_t v18;
  uint64_t v19;
  float32x2_t *v20;
  float v21;
  __float2 v22;
  uint64_t v23;
  float v24;
  float32x2_t *v25;
  _OWORD *result;
  float *v27;
  uint64_t v28;
  float32x2_t v29;
  float v30;
  float v31;
  float v32;
  uint64_t v33;
  float v34;
  float v35;
  uint64_t v36;
  float v37;
  float v38;
  uint64_t v39;
  float32x2_t v40;
  float v41;
  uint64_t v42;
  float v43;
  _OWORD *v44;
  __int128 v45;
  float v46;

  if (objc_msgSend(a1, sel_storageMode) == (id)2)
  {
    v8 = 0;
    if (a3 != 3)
      goto LABEL_3;
LABEL_7:
    sub_1B1BF28AC(0, (unint64_t *)&qword_1ED4BAF90, (void (*)(uint64_t))sub_1B1791068);
    v9 = (_OWORD *)swift_allocObject();
    v9[1] = xmmword_1B226E100;
    v9[2] = xmmword_1B229ED60;
    v9[3] = xmmword_1B229ED70;
    v9[4] = xmmword_1B229ED80;
    goto LABEL_9;
  }
  v10 = (char *)objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
  v11 = a1;
  v8 = (float32x2_t *)&v10[a2];
  if (a3 == 3)
    goto LABEL_7;
LABEL_3:
  if (a3 == 2)
  {
    sub_1B1BF28AC(0, (unint64_t *)&qword_1ED4BAF90, (void (*)(uint64_t))sub_1B1791068);
    v9 = (_OWORD *)swift_allocObject();
    v9[1] = xmmword_1B226CD10;
    v9[2] = xmmword_1B229ED90;
    v9[3] = xmmword_1B229EDA0;
  }
  else
  {
    if (a3 != 1)
      return (_OWORD *)MEMORY[0x1E0DEE9D8];
    sub_1B1BF28AC(0, (unint64_t *)&qword_1ED4BAF90, (void (*)(uint64_t))sub_1B1791068);
    v9 = (_OWORD *)swift_allocObject();
    v9[1] = xmmword_1B226D240;
    v9[2] = xmmword_1B229EDB0;
  }
LABEL_9:
  v12 = 0;
  v13 = vcvtps_s32_f32(a4);
  v14 = v9 + 2;
  v44 = v9;
  v15 = v8;
  do
  {
    v16 = v14;
    v45 = v14[v12];
    LODWORD(v17) = HIDWORD(*(_QWORD *)&v14[v12]);
    v19 = (2 * v13) | 1;
    v18 = -(uint64_t)v13;
    v20 = v15;
    do
    {
      v21 = (float)((float)((float)v18 * 1.1) / a4) * (float)((float)((float)v18 * 1.1) / a4);
      v46 = expf(v17 * v21);
      v22 = __sincosf_stret(*(float *)&v45 * v21);
      *v20++ = vmul_n_f32((float32x2_t)__PAIR64__(LODWORD(v22.__sinval), LODWORD(v22.__cosval)), v46);
      ++v18;
      --v19;
    }
    while (v19);
    ++v12;
    v15 += 128;
    v14 = v16;
  }
  while (v12 != a3);
  v23 = 0;
  v24 = 0.0;
  v25 = v8;
  result = v44;
  do
  {
    v27 = (float *)&v16[v23];
    v28 = v23 << 7;
    v29 = v8[128 * v23 + v13];
    v30 = v27[2];
    v31 = v27[3];
    v32 = vmuls_lane_f32(v29.f32[0], v29, 1);
    v24 = (float)(v31 * (float)(v32 + v32))
        + (float)(v24 + (float)(v30 * (float)(vmul_f32(v29, v29).f32[0] - vmuls_lane_f32(v29.f32[1], v29, 1))));
    if (v13)
    {
      v33 = 0;
      v34 = v30 + v30;
      v35 = v31 + v31;
      do
      {
        v24 = (float)(v35
                    * (float)(vmuls_lane_f32(v29.f32[0], v25[v33], 1)
                            + (float)(v29.f32[1] * COERCE_FLOAT(*(_QWORD *)&v25[v33]))))
            + (float)(v24
                    + (float)(v34 * (float)(vmul_f32(v29, v25[v33]).f32[0] - vmuls_lane_f32(v29.f32[1], v25[v33], 1))));
        ++v33;
      }
      while (v13 != v33);
      v36 = 0;
      v37 = v30 * 4.0;
      v38 = v31 * 4.0;
      do
      {
        v39 = 0;
        v40 = v8[v36 + v28];
        v24 = (float)(v35 * (float)((float)(v29.f32[1] * v40.f32[0]) + vmuls_lane_f32(v29.f32[0], v40, 1)))
            + (float)(v24 + (float)(v34 * (float)(vmul_f32(v29, v40).f32[0] - vmuls_lane_f32(v29.f32[1], v40, 1))));
        do
        {
          LODWORD(v41) = HIDWORD(*(_QWORD *)&v8[v36 + v28]);
          v24 = (float)(v38
                      * (float)(vmuls_lane_f32(v40.f32[0], v25[v39], 1)
                              + (float)(v41 * COERCE_FLOAT(*(_QWORD *)&v25[v39]))))
              + (float)(v24 + (float)(v37 * (float)(vmul_f32(v40, v25[v39]).f32[0] - vmuls_lane_f32(v41, v25[v39], 1))));
          ++v39;
        }
        while (v13 != v39);
        ++v36;
      }
      while (v36 != v13);
    }
    ++v23;
    v25 += 128;
  }
  while (v23 != a3);
  v42 = a3 << 7;
  if (a3 << 7)
  {
    v43 = 1.0 / sqrtf(v24);
    do
    {
      *v8 = vmul_n_f32(*v8, v43);
      ++v8;
      --v42;
    }
    while (v42);
  }
  return result;
}

unint64_t sub_1B1EFED50(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  char v4;
  char v5;
  unint64_t result;
  unsigned __int8 v7;
  float v8;
  uint64_t v9;
  void *v10;
  char v11;
  unint64_t v12;
  float v13;
  float v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t (*v18)();
  void *v19;
  id v20;
  float v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int8x16_t *v26;
  __int16 v27;
  __int16 v28;
  __int16 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  void *v37;
  void *v38;
  int v39;
  void *v40;
  int v41;
  int8x16_t v42;
  char v43;
  char v44;
  char v45;
  int16x8_t v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  int v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  float v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  int v65;
  _BYTE v66[88];
  uint64_t v67;
  char v68;
  char v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  unsigned __int32 v76;
  uint64_t v77;

  v77 = *MEMORY[0x1E0C80C00];
  v2 = swift_retain();
  v3 = sub_1B1F215A8(v2);
  v5 = v4;
  result = swift_release();
  if ((v5 & 1) != 0)
    return result;
  result = sub_1B1D16348(v3);
  if ((result & 0xFF00000000) == 0x300000000)
    return result;
  v7 = BYTE4(result);
  v8 = *(float *)&result;
  if (*(float *)&result <= 0.0)
    return result;
  v9 = *(_QWORD *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_renderer);
  if (!v9)
    return result;
  swift_retain();
  swift_retain();
  v10 = sub_1B2062908();
  swift_release();
  v11 = *(_BYTE *)(v9 + 600);
  v12 = v7 + 1;
  v13 = v8 * 0.01;
  v63 = 0;
  v64 = 0;
  v61 = v13;
  v58 = 0xD000000000000013;
  v59 = 0x80000001B2343810;
  v60 = v12;
  v14 = v13 * (float)(uint64_t)objc_msgSend(v10, sel_height);
  v57 = 1056964608;
  if (v14 <= 128.0)
  {
    if (v14 <= 32.0)
    {
      if (v14 < 4.0)
      {
        v12 = 1;
        v60 = 1;
      }
      v15 = 1056964608;
      goto LABEL_13;
    }
    v15 = 1048576000;
    v57 = 1048576000;
    v16 = "compute_downsample4";
  }
  else
  {
    v15 = 1040187392;
    v57 = 1040187392;
    v16 = "compute_downsample8";
  }
  v58 = 0xD000000000000013;
  v59 = (unint64_t)(v16 - 32) | 0x8000000000000000;
LABEL_13:
  swift_retain();
  v18 = sub_1B1E8DDEC(&v67, 9u);
  if (*(_QWORD *)(v17 + 8))
  {
    *(_QWORD *)(v17 + 32) = v15;
    *(_BYTE *)(v17 + 40) = 1;
  }
  ((void (*)(uint64_t *, _QWORD))v18)(&v67, 0);
  swift_release();
  sub_1B206309C(9u, (uint64_t)v66);
  swift_retain();
  v19 = (void *)sub_1B206318C((uint64_t)v66, 1, 1, 2);
  sub_1B1BA80C0((uint64_t)v66);
  swift_release();
  if (!v19)
  {
    swift_bridgeObjectRelease();
    swift_release();
    return swift_unknownObjectRelease();
  }
  v52 = v11;
  v53 = (uint64_t)v10;
  v20 = objc_msgSend(v19, sel_height);
  if ((float)(v13 * (float)(uint64_t)v20) <= 63.0)
    v21 = v13 * (float)(uint64_t)v20;
  else
    v21 = 63.0;
  v51 = vcvtps_s32_f32(v21);
  v65 = v51;
  swift_retain();
  v22 = (void *)sub_1B1D22DA8(0, v12 << 10);
  v24 = v23;
  v49 = v25;
  swift_unknownObjectRetain();
  swift_release();
  v54 = (uint64_t)v22;
  v50 = v24;
  v26 = (int8x16_t *)sub_1B1EFE9B0(v22, v24, v12, v21);
  v62 = vextq_s8(v26[2], v26[2], 8uLL).u64[0];
  RGTextureDescriptorFromMTLTexture(v19, (uint64_t)&v67);
  v27 = v67;
  v28 = WORD1(v67);
  v29 = WORD2(v67);
  v44 = v69;
  v45 = v68;
  v43 = v70;
  v47 = v74;
  v48 = v73;
  v46 = (int16x8_t)vmovl_u8((uint8x8_t)__PAIR64__(DWORD1(v74), v76));
  v30 = v71;
  v31 = v75;
  if (v12 < 2 || (v63 = vextq_s8(v26[3], v26[3], 8uLL).u64[0], v12 == 2))
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v42 = v26[4];
    swift_bridgeObjectRelease();
    v64 = vextq_s8(v42, v42, 8uLL).u64[0];
  }
  v32 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 264) + 40) + 16);
  swift_retain();
  if (v32)
    sub_1B1DC3B00(0xD000000000000014, 0x80000001B2343830);
  LOWORD(v67) = v27;
  WORD1(v67) = v28;
  WORD2(v67) = v29;
  HIWORD(v67) = v12;
  v68 = v45;
  v69 = v44;
  v70 = v43;
  v71 = v30;
  v72 = 3;
  v73 = v48;
  v74 = v47;
  v75 = v31;
  v76 = vmovn_s16(v46).u32[0];
  v33 = sub_1B2062B30(0xD000000000000014, 0x80000001B2343830, &v67);
  swift_release();
  v34 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 264) + 40) + 16);
  swift_retain();
  if (v34)
    sub_1B1DC3B00(0xD000000000000012, 0x80000001B2343850);
  v35 = sub_1B2062B30(0xD000000000000012, 0x80000001B2343850, &v67);
  swift_release();
  v36 = (void *)sub_1B1BA669C(0x657475706D6F43, 0xE700000000000000, 0);
  v37 = (void *)sub_1B2228728();
  objc_msgSend(v36, sel_pushDebugGroup_, v37);

  sub_1B1EFE1D4(v36, v9, &v58, v52, v53, v19, (uint64_t)&v57, (unsigned int *)&v60, v33, v35, (uint64_t)&v61, v54, v50, v49, 63, v51);
  objc_msgSend(v36, sel_popDebugGroup);
  swift_unknownObjectRelease();
  v38 = (void *)sub_1B1B83834(0xD000000000000012, 0x80000001B2343850);
  if (v38)
  {
    sub_1B215FACC(v38);
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
  }
  else
  {
    if (qword_1ED4BF430 != -1)
      swift_once();
    v55 = 0;
    v56 = 0xE000000000000000;
    swift_retain();
    sub_1B2229430();
    swift_bridgeObjectRelease();
    v39 = sub_1B2228E90();
    if (qword_1ED4BF658 != -1)
      swift_once();
    v55 = 0;
    swift_retain();
    sub_1B1F1AD70(v39, &v55, 0xD000000000000027, 0x80000001B2343870);
    swift_unknownObjectRelease();
    swift_release();
    swift_release();
  }
  v40 = (void *)sub_1B1B83834(0xD000000000000014, 0x80000001B2343830);
  if (v40)
  {
    sub_1B215FACC(v40);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_release();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    return swift_unknownObjectRelease();
  }
  if (qword_1ED4BF430 != -1)
    swift_once();
  v55 = 0;
  v56 = 0xE000000000000000;
  swift_retain();
  sub_1B2229430();
  swift_bridgeObjectRelease();
  v41 = sub_1B2228E90();
  if (qword_1ED4BF658 != -1)
    swift_once();
  v55 = 0;
  swift_retain();
  sub_1B1F1AD70(v41, &v55, 0xD000000000000029, 0x80000001B23438A0);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_release();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_release();
  return swift_release();
}

void sub_1B1EFF55C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED4BF6E0)
  {
    v0 = sub_1B2229A18();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED4BF6E0);
  }
}

uint64_t sub_1B1EFF5B0@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  a3[2] = 1;
  return result;
}

ValueMetadata *type metadata accessor for Extensions()
{
  return &type metadata for Extensions;
}

uint64_t sub_1B1EFF5D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  int v16;
  void (*v17)(_BYTE *, uint64_t, uint64_t, uint64_t);
  _BYTE v19[32];

  v6 = sub_1B2229124();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = &v19[-v9];
  v11 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = &v19[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1B1A02864(a1, (uint64_t)v19);
  v16 = swift_dynamicCast();
  v17 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v11 + 56);
  if (v16)
  {
    v17(v10, 0, 1, a3);
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v11 + 32))(v15, v10, a3);
    return (*(uint64_t (**)(uint64_t, _BYTE *, uint64_t))(v11 + 40))(a2, v15, a3);
  }
  else
  {
    v17(v10, 1, 1, a3);
    return (*(uint64_t (**)(_BYTE *, uint64_t))(v7 + 8))(v10, v6);
  }
}

uint64_t sub_1B1EFF710(uint64_t a1, uint64_t a2)
{
  return sub_1B1EFF774(a1, a2, (uint64_t)sub_1B1F008F8, MEMORY[0x1E0DEABD0]);
}

uint64_t sub_1B1EFF724@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t *v5;

  a3[3] = a2;
  v5 = sub_1B1A137F4(a3);
  return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(v5, a1, a2);
}

uint64_t sub_1B1EFF760(uint64_t a1, uint64_t a2)
{
  return sub_1B1EFF774(a1, a2, (uint64_t)sub_1B19E4FB0, MEMORY[0x1E0DEBC10]);
}

uint64_t sub_1B1EFF774(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v10;
  double v11;
  uint64_t v12;
  char *v13;
  uint64_t DynamicType;
  uint64_t isClassType;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v21[2];

  v7 = v4;
  v10 = *(_QWORD *)(a1 - 8);
  v11 = MEMORY[0x1E0C80A78](a1, a2);
  v13 = (char *)v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v10 + 16))(v13, v7, a1, v11);
  DynamicType = swift_getDynamicType();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v13, a1);
  isClassType = swift_isClassType();
  if ((_DWORD)isClassType)
    v17 = DynamicType;
  else
    v17 = 0;
  if (v17)
  {
    v18 = sub_1B2229D0C();
    swift_unknownObjectRelease();
  }
  else
  {
    MEMORY[0x1E0C80A78](isClassType, v16);
    v21[-2] = a1;
    v21[-1] = a2;
    sub_1B1EFFA50(v7, a3, (uint64_t)&v21[-4], a1, MEMORY[0x1E0DEDCE8], a4, MEMORY[0x1E0DEDD18], v19);
    return v21[1];
  }
  return v18;
}

uint64_t sub_1B1EFF8AC(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 - 8) + 64);
}

uint64_t sub_1B1EFF8C0(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  int v20;
  void (*v21)(_BYTE *, uint64_t, uint64_t, uint64_t);
  void (*v22)(_BYTE *, _BYTE *, uint64_t);
  _BYTE v24[32];

  v6 = sub_1B2229124();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = &v24[-v9];
  v11 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = &v24[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = &v24[-v18];
  sub_1B1A02864(a1, (uint64_t)v24);
  v20 = swift_dynamicCast();
  v21 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v11 + 56);
  if (v20)
  {
    v21(v10, 0, 1, a3);
    v22 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v11 + 32);
    v22(v19, v10, a3);
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v11 + 16))(v15, v19, a3);
    v22(a2, v15, a3);
    return (*(uint64_t (**)(_BYTE *, uint64_t))(v11 + 8))(v19, a3);
  }
  else
  {
    v21(v10, 1, 1, a3);
    return (*(uint64_t (**)(_BYTE *, uint64_t))(v7 + 8))(v10, v6);
  }
}

uint64_t sub_1B1EFFA40()
{
  return sub_1B22290F4();
}

uint64_t sub_1B1EFFA50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t (*v15)(uint64_t, char *);
  uint64_t result;
  uint64_t v17;

  v11 = *(_QWORD *)(a5 - 8);
  v12 = MEMORY[0x1E0C80A78](a1, a2);
  v14 = (char *)&v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = v15(v12, v14);
  if (v8)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 32))(a8, v14, a5);
  return result;
}

uint64_t sub_1B1EFFADC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t result;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;

  v4 = v3;
  v8 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v10 = (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1B2229A24();
  if (swift_dynamicCastClass())
    goto LABEL_2;
  sub_1B2229A24();
  if (swift_dynamicCastClass())
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v4, a3);
    sub_1B1A02864(a1, (uint64_t)&v17);
    swift_retain();
    swift_dynamicCast();
    LOBYTE(v21) = v13;
    goto LABEL_9;
  }
  sub_1B2229A24();
  if (swift_dynamicCastClass())
  {
LABEL_6:
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v4, a3);
    sub_1B1A02864(a1, (uint64_t)&v17);
    swift_retain();
    swift_dynamicCast();
    LODWORD(v21) = v13;
    goto LABEL_9;
  }
  sub_1B2229A24();
  if (swift_dynamicCastClass()
    || (sub_1B19F8E54(255, &qword_1ED4BB090, (uint64_t (*)(void))sub_1B1AF0D08, MEMORY[0x1E0DEE0F8], MEMORY[0x1E0DEDD20]), sub_1B2229A24(), swift_dynamicCastClass()))
  {
LABEL_8:
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v4, a3);
    sub_1B1A02864(a1, (uint64_t)&v17);
    swift_retain();
    swift_dynamicCast();
    *(_QWORD *)&v21 = v13;
    goto LABEL_9;
  }
  sub_1B19F8E54(255, (unint64_t *)&unk_1ED4BB0B0, (uint64_t (*)(void))sub_1B1AF0D08, MEMORY[0x1E0DEE0F8], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50]);
  sub_1B2229A24();
  if (swift_dynamicCastClass())
    goto LABEL_2;
  sub_1B19F8E54(255, &qword_1ED4BB0F8, (uint64_t (*)(void))sub_1B1AF0D08, MEMORY[0x1E0DEE0F8], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDDA8]);
  sub_1B2229A24();
  if (swift_dynamicCastClass())
    goto LABEL_2;
  sub_1B2229A24();
  if (swift_dynamicCastClass())
    goto LABEL_6;
  sub_1B19F8E54(255, &qword_1ED4BB080, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], MEMORY[0x1E0DEDD20]);
  sub_1B2229A24();
  if (swift_dynamicCastClass())
    goto LABEL_8;
  sub_1B19F8E54(255, (unint64_t *)&qword_1ED4BB0A0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50]);
  sub_1B2229A24();
  if (swift_dynamicCastClass())
    goto LABEL_2;
  sub_1B19F8E54(255, (unint64_t *)&qword_1ED4BB0E0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDDA8]);
  sub_1B2229A24();
  if (swift_dynamicCastClass())
    goto LABEL_2;
  type metadata accessor for simd_float2x2(255);
  sub_1B2229A24();
  if (swift_dynamicCastClass())
    goto LABEL_2;
  type metadata accessor for simd_float2x3(255);
  sub_1B2229A24();
  if (swift_dynamicCastClass())
    goto LABEL_29;
  type metadata accessor for simd_float2x4(255);
  sub_1B2229A24();
  if (swift_dynamicCastClass())
    goto LABEL_29;
  type metadata accessor for simd_float3x2(255);
  sub_1B2229A24();
  if (swift_dynamicCastClass())
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v4, a3);
    sub_1B1A02864(a1, (uint64_t)&v17);
    swift_retain();
    swift_dynamicCast();
    v21 = v13;
    *(_QWORD *)&v22 = v14;
    goto LABEL_9;
  }
  type metadata accessor for simd_float3x3(255);
  sub_1B2229A24();
  if (swift_dynamicCastClass()
    || (type metadata accessor for simd_float3x4(255), sub_1B2229A24(), swift_dynamicCastClass()))
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v4, a3);
    sub_1B1A02864(a1, (uint64_t)&v21);
    swift_retain();
    swift_dynamicCast();
    v13 = v17;
    v14 = v18;
    v15 = v19;
    goto LABEL_9;
  }
  type metadata accessor for simd_float4x2(255);
  sub_1B2229A24();
  if (swift_dynamicCastClass())
  {
LABEL_29:
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v4, a3);
    sub_1B1A02864(a1, (uint64_t)&v17);
    swift_retain();
    swift_dynamicCast();
    v21 = v13;
    v22 = v14;
    goto LABEL_9;
  }
  type metadata accessor for simd_float4x3(255);
  sub_1B2229A24();
  if (swift_dynamicCastClass()
    || (type metadata accessor for simd_float4x4(255), sub_1B2229A24(), swift_dynamicCastClass()))
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v4, a3);
    sub_1B1A02864(a1, (uint64_t)&v21);
    swift_retain();
    swift_dynamicCast();
    v13 = v17;
    v14 = v18;
    v15 = v19;
    v16 = v20;
    goto LABEL_9;
  }
  type metadata accessor for simd_quatf(255);
  sub_1B2229A24();
  if (swift_dynamicCastClass())
    goto LABEL_2;
  sub_1B2229A24();
  if (swift_dynamicCastClass())
    goto LABEL_8;
  sub_1B1AED5E4(255, (unint64_t *)&qword_1ED4BA5B8, MEMORY[0x1E0DEB418], MEMORY[0x1E0DEB430], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEB848]);
  sub_1B2229A24();
  if (swift_dynamicCastClass())
  {
LABEL_2:
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v4, a3);
    sub_1B1A02864(a1, (uint64_t)&v17);
    swift_retain();
    swift_dynamicCast();
    v21 = v13;
LABEL_9:
    swift_setAtReferenceWritableKeyPath();
    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, a3);
  }
  sub_1B1AED5E4(255, (unint64_t *)&qword_1ED4BA5A8, MEMORY[0x1E0DEB188], MEMORY[0x1E0DEB1B0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEB848]);
  sub_1B2229A24();
  if (swift_dynamicCastClass())
    goto LABEL_8;
  sub_1B2229A24();
  if (swift_dynamicCastClass())
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v4, a3);
    sub_1B1A02864(a1, (uint64_t)&v17);
    swift_retain();
    swift_dynamicCast();
    v21 = v13;
    LOBYTE(v22) = v14;
    goto LABEL_9;
  }
  sub_1B1AED5E4(255, (unint64_t *)&qword_1ED4B9F38, MEMORY[0x1E0DEB188], (uint64_t)&off_1E63C66D8, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for Curve);
  sub_1B2229A24();
  if (swift_dynamicCastClass())
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v4, a3);
    sub_1B1A02864(a1, (uint64_t)&v17);
    swift_retain();
    swift_dynamicCast();
    v21 = v13;
    *(_QWORD *)&v22 = v14;
    BYTE8(v22) = BYTE8(v14);
    goto LABEL_9;
  }
  sub_1B1A02758(255, (unint64_t *)&qword_1ED4BA490, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
  sub_1B2229A24();
  if (swift_dynamicCastClass())
    goto LABEL_8;
  sub_1B1A02758(255, (unint64_t *)&qword_1ED4BA4C0, MEMORY[0x1E0DEB188], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
  sub_1B2229A24();
  if (swift_dynamicCastClass())
    goto LABEL_8;
  v12 = MEMORY[0x1E0DEE9B8] + 8;
  sub_1B2229A24();
  if (swift_dynamicCastClass()
    || (sub_1B1A02758(255, (unint64_t *)&qword_1ED4BB150, v12, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]), sub_1B2229A24(), swift_dynamicCastClass()))
  {
    sub_1B1A02864(a1, (uint64_t)&v17);
    swift_retain();
    swift_setAtReferenceWritableKeyPath();
    return swift_release();
  }
  else
  {
    *(_QWORD *)&v17 = 0;
    *((_QWORD *)&v17 + 1) = 0xE000000000000000;
    sub_1B2229430();
    sub_1B2228890();
    *(_QWORD *)&v13 = a2;
    sub_1B2229328();
    sub_1B22295EC();
    result = sub_1B2229688();
    __break(1u);
  }
  return result;
}

ValueMetadata *_s3VFX10ExtensionsVMa_0()
{
  return &_s3VFX10ExtensionsVN_0;
}

uint64_t sub_1B1F008F8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1B19E4FB0(a1, a2);
}

uint64_t sub_1B1F0090C()
{
  return type metadata accessor for ParticleLifeInit.System();
}

double sub_1B1F00928()
{
  uint64_t v0;
  double result;

  sub_1B1BDB5D0();
  v0 = swift_allocObject();
  *(_QWORD *)&result = 2;
  *(_OWORD *)(v0 + 16) = xmmword_1B226CD10;
  *(_QWORD *)(v0 + 32) = &type metadata for ParticleAge;
  *(_QWORD *)(v0 + 40) = &off_1E63717C8;
  *(_QWORD *)(v0 + 48) = &type metadata for ParticleLifetime;
  *(_QWORD *)(v0 + 56) = &off_1E6389120;
  return result;
}

double sub_1B1F00980@<D0>(uint64_t a1@<X8>)
{
  double result;

  __asm { FMOV            V0.2S, #1.0 }
  *(double *)a1 = result;
  *(_BYTE *)(a1 + 8) = 0;
  return result;
}

uint64_t sub_1B1F00990(char *a1, char *a2)
{
  return sub_1B1F91D08(*a1, *a2);
}

uint64_t sub_1B1F0099C()
{
  sub_1B222A06C();
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

uint64_t sub_1B1F00A1C()
{
  sub_1B2228824();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B1F00A78()
{
  sub_1B222A06C();
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

uint64_t sub_1B1F00AF4@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_1B2229730();
  result = swift_bridgeObjectRelease();
  if (v2 == 1)
    v4 = 1;
  else
    v4 = 2;
  if (!v2)
    v4 = 0;
  *a1 = v4;
  return result;
}

void sub_1B1F00B50(unint64_t *a1@<X8>)
{
  _BYTE *v1;
  unint64_t v2;
  unint64_t v3;

  v2 = 0x65676E6172;
  if (*v1)
    v2 = 0xD000000000000011;
  v3 = 0x80000001B2328980;
  if (!*v1)
    v3 = 0xE500000000000000;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_1B1F00B90()
{
  _BYTE *v0;

  if (*v0)
    return 0xD000000000000011;
  else
    return 0x65676E6172;
}

uint64_t sub_1B1F00BCC@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_1B2229730();
  result = swift_bridgeObjectRelease();
  if (v2 == 1)
    v4 = 1;
  else
    v4 = 2;
  if (!v2)
    v4 = 0;
  *a1 = v4;
  return result;
}

uint64_t sub_1B1F00C2C()
{
  sub_1B1F023C0();
  return sub_1B222A1D4();
}

uint64_t sub_1B1F00C54()
{
  sub_1B1F023C0();
  return sub_1B222A1E0();
}

uint64_t sub_1B1F00C7C(_QWORD *a1, float a2, float a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  _BYTE v14[8];
  float v15;
  float v16;

  sub_1B1F02404(0, &qword_1EEF60B18, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED170]);
  v8 = v7;
  v9 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v10);
  v12 = &v14[-v11];
  sub_1B19FA070(a1, a1[3]);
  sub_1B1F023C0();
  sub_1B222A180();
  v15 = a2;
  v16 = a3;
  v14[7] = 0;
  sub_1B1B4D924();
  sub_1B1B67480(qword_1EEF5B108, MEMORY[0x1E0DEB198], MEMORY[0x1E0DEB880]);
  sub_1B2229958();
  if (!v3)
  {
    v14[6] = 1;
    sub_1B222991C();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v9 + 8))(v12, v8);
}

void sub_1B1F00DDC(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  char v4;
  float v5;
  int v6;

  v5 = sub_1B1F02224(a1);
  if (!v2)
  {
    *(float *)a2 = v5;
    *(_DWORD *)(a2 + 4) = v6;
    *(_BYTE *)(a2 + 8) = v4 & 1;
  }
}

uint64_t sub_1B1F00E0C(_QWORD *a1)
{
  float *v1;

  return sub_1B1F00C7C(a1, *v1, v1[1]);
}

uint64_t *sub_1B1F00E28(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;
  unsigned __int8 v9;
  int v10;
  float v11;
  float v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  unint64_t v29;
  os_unfair_lock_s *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  int32x4_t *v37;
  _OWORD *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int32x4_t *v44;
  _OWORD *v45;
  unint64_t v46;
  uint64_t v47;
  _DWORD *v48;
  _DWORD *v49;
  unint64_t v50;
  uint64_t v51;
  _DWORD *v52;
  _DWORD *v53;
  uint64_t v54;
  uint64_t v55;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  int v63;
  int32x2_t v64;
  uint64_t v65;
  unsigned int *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  unint64_t v70;
  uint64_t v71;
  os_unfair_lock_s *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  __int32 v77;
  int32x4_t *v78;
  unint64_t v79;
  unint64_t v80;
  __int32 *v81;
  uint64_t v82;
  uint64_t v83;
  __int32 v84;
  int32x4_t *v85;
  unint64_t v86;
  uint64_t v87;
  __int32 *v88;
  __int128 v89;
  int32x4_t v90;
  uint64_t v91;
  int32x4_t v92;
  uint64_t v93;
  int32x2_t v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  uint64_t v102;
  _QWORD *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107[8];
  __int128 v108;
  __int128 v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  _QWORD *v114;
  uint64_t v115;
  __int128 v116;
  __int128 v117;
  uint64_t v118;
  __int128 v119;
  __int128 v120;
  uint64_t v121;
  _BYTE v122[40];
  __int128 v123;
  __int128 v124;
  uint64_t v125;

  v2 = v1;
  v4 = 0;
  v6 = *a1;
  v5 = a1[1];
  swift_retain();
  v7 = sub_1B1D1771C(v5);
  v9 = v8;
  v10 = v8;
  swift_release();
  if (v10 == 2)
    v11 = 1.0;
  else
    v11 = *(float *)&v7;
  if (v10 == 2)
    v12 = 1.0;
  else
    v12 = *((float *)&v7 + 1);
  if ((v9 & 1) != 0)
  {
    v54 = a1[4];
    swift_retain();
    sub_1B1BEE528((uint64_t)a1);
    swift_retain();
    sub_1B1FE8BE4(v54, v6, (uint64_t)a1, v2);
LABEL_43:
    swift_release();
    sub_1B1B4F21C((uint64_t)a1);
    return (uint64_t *)swift_release();
  }
  if (v11 != v12)
  {
    v55 = a1[4];
    swift_retain();
    sub_1B1BEE528((uint64_t)a1);
    swift_retain();
    sub_1B1FE8C70(v55, v6, (uint64_t)a1, v2);
    goto LABEL_43;
  }
  if (v11 == 0.0)
  {
    v13 = *(_OWORD *)(v2 + 32);
    v123 = *(_OWORD *)(v2 + 16);
    v124 = v13;
    v125 = *(_QWORD *)(v2 + 48);
    v14 = swift_retain();
    sub_1B1E8FCE4(v14, (uint64_t)&v123, 0x200000000, v107);
    sub_1B19F66A0((uint64_t)v107, (uint64_t)&v108, (unint64_t *)&qword_1ED4B7DE0);
    if ((_QWORD)v108)
    {
      v116 = v108;
      v117 = v109;
      v96 = v111;
      v118 = v110;
      v16 = v112;
      v15 = v113;
      v17 = v115;
      v103 = v114;
      swift_release();
      if (v17 > 0 && v16)
      {
        v18 = v103[4];
        v101 = *(unsigned __int8 *)(v15 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
        v119 = v116;
        v120 = v117;
        v121 = v118;
        swift_retain();
        swift_retain();
        swift_retain();
        v19 = 0;
        __asm { FMOV            V0.4S, #1.0 }
        v89 = _Q0;
        v90 = vdupq_n_s32(0x4479FFFFu);
        v93 = v16;
        v91 = v18;
        while (1)
        {
          v25 = (unsigned int *)(v96 + 48 * v19);
          v27 = (uint64_t *)*((_QWORD *)v25 + 2);
          v26 = *((_QWORD *)v25 + 3);
          v29 = *((_QWORD *)v25 + 4);
          v28 = *((_QWORD *)v25 + 5);
          v105 = v4;
          v97 = v25[1];
          v99 = *v25;
          if (v101)
          {
            v30 = *(os_unfair_lock_s **)(v28 + 376);
            swift_retain_n();
            os_unfair_lock_lock(v30);
            os_unfair_lock_lock(*(os_unfair_lock_t *)(v28 + 344));
            swift_release();
          }
          else
          {
            swift_retain();
          }
          ecs_stack_allocator_push_snapshot(v18);
          sub_1B19F66A0((uint64_t)(v103 + 6), (uint64_t)v122, &qword_1ED4B7FB0);
          v31 = v103[4];
          v32 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v28 + 40) + 16) + 32) + 16) + 1;
          swift_retain();
          v103[6] = ecs_stack_allocator_allocate(v31, 48 * v32, 8);
          v103[7] = v32;
          v103[9] = 0;
          v103[10] = 0;
          v103[8] = 0;
          swift_release();
          v33 = sub_1B1A12038((uint64_t)&type metadata for ParticleLifetime, (uint64_t)&off_1E6389120, v27, v26, v29, (uint64_t)v103);
          v34 = sub_1B1A12038((uint64_t)&type metadata for ParticleAge, (uint64_t)&off_1E63717C8, v27, v26, v29, (uint64_t)v103);
          if (!v27)
          {
            v40 = v99;
            if ((_DWORD)v99 != (_DWORD)v97)
            {
              v41 = v97 - v99;
              v36 = v93;
              v18 = v91;
              if ((unint64_t)(v97 - v99) < 0xC)
                goto LABEL_33;
              v42 = v34 + 4 * v99;
              v43 = v33 + 4 * v99;
              if ((unint64_t)(v42 - v43) < 0x20)
                goto LABEL_33;
              v40 = (v41 & 0xFFFFFFFFFFFFFFF8) + v99;
              v44 = (int32x4_t *)(v43 + 16);
              v45 = (_OWORD *)(v42 + 16);
              v46 = v41 & 0xFFFFFFFFFFFFFFF8;
              do
              {
                v44[-1] = v90;
                *v44 = v90;
                v44 += 2;
                *(v45 - 1) = v89;
                *v45 = v89;
                v45 += 2;
                v46 -= 8;
              }
              while (v46);
              if (v41 != (v41 & 0xFFFFFFFFFFFFFFF8))
              {
LABEL_33:
                v47 = v97 - v40;
                v48 = (_DWORD *)(v34 + 4 * v40);
                v49 = (_DWORD *)(v33 + 4 * v40);
                do
                {
                  *v49++ = 1148846079;
                  *v48++ = 1065353216;
                  --v47;
                }
                while (v47);
              }
              goto LABEL_39;
            }
LABEL_27:
            v36 = v93;
            v18 = v91;
            goto LABEL_39;
          }
          if (!v29)
            goto LABEL_27;
          v35 = 0;
          if (v29 < 8)
            break;
          v36 = v93;
          v18 = v91;
          if ((unint64_t)(v34 - v33) < 0x20)
            goto LABEL_37;
          v35 = v29 & 0xFFFFFFFFFFFFFFF8;
          v37 = (int32x4_t *)(v33 + 16);
          v38 = (_OWORD *)(v34 + 16);
          v39 = v29 & 0xFFFFFFFFFFFFFFF8;
          do
          {
            v37[-1] = v90;
            *v37 = v90;
            v37 += 2;
            *(v38 - 1) = v89;
            *v38 = v89;
            v38 += 2;
            v39 -= 8;
          }
          while (v39);
          if (v29 != v35)
            goto LABEL_37;
LABEL_39:
          v4 = v105;
          sub_1B1F05D48(v103, (unsigned __int16 **)&v119, (uint64_t)v122);
          sub_1B1F03804((char *)v28);
          ecs_stack_allocator_pop_snapshot(v18);
          if ((v101 & 1) != 0)
          {
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v28 + 344));
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v28 + 376));
          }
          swift_release();
          if (++v19 == v36)
            goto LABEL_76;
        }
        v36 = v93;
        v18 = v91;
LABEL_37:
        v50 = v29 - v35;
        v51 = 4 * v35;
        v52 = (_DWORD *)(v34 + 4 * v35);
        v53 = (_DWORD *)(v33 + v51);
        do
        {
          *v53++ = 1148846079;
          *v52++ = 1065353216;
          --v50;
        }
        while (v50);
        goto LABEL_39;
      }
      return sub_1B19ED748(v107);
    }
    return (uint64_t *)swift_release();
  }
  v57 = *(_OWORD *)(v2 + 72);
  v123 = *(_OWORD *)(v2 + 56);
  v124 = v57;
  v125 = *(_QWORD *)(v2 + 88);
  v58 = swift_retain();
  sub_1B1E8FCE4(v58, (uint64_t)&v123, 0x200000000, v107);
  sub_1B19F66A0((uint64_t)v107, (uint64_t)&v108, (unint64_t *)&qword_1ED4B7DE0);
  if (!(_QWORD)v108)
    return (uint64_t *)swift_release();
  v116 = v108;
  v117 = v109;
  v100 = v111;
  v118 = v110;
  v60 = v112;
  v59 = v113;
  v61 = v114;
  v62 = v115;
  swift_release();
  if (v62 > 0 && v60)
  {
    v104 = v61[4];
    v63 = *(unsigned __int8 *)(v59 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
    v64.i32[1] = DWORD1(v116);
    v119 = v116;
    v120 = v117;
    v121 = v118;
    *(float *)v64.i32 = 1.0 / v11;
    if (v11 <= 0.001)
      *(float *)v64.i32 = 1000.0;
    v94 = v64;
    swift_retain();
    swift_retain();
    swift_retain();
    v65 = 0;
    v92 = vdupq_lane_s32(v94, 0);
    v95 = v63;
    v98 = v60;
    while (1)
    {
      v66 = (unsigned int *)(v100 + 48 * v65);
      v67 = *v66;
      v102 = v66[1];
      v69 = (uint64_t *)*((_QWORD *)v66 + 2);
      v68 = *((_QWORD *)v66 + 3);
      v70 = *((_QWORD *)v66 + 4);
      v71 = *((_QWORD *)v66 + 5);
      v106 = v4;
      if (v63)
      {
        v72 = *(os_unfair_lock_s **)(v71 + 376);
        swift_retain_n();
        os_unfair_lock_lock(v72);
        os_unfair_lock_lock(*(os_unfair_lock_t *)(v71 + 344));
        swift_release();
      }
      else
      {
        swift_retain();
      }
      ecs_stack_allocator_push_snapshot(v104);
      sub_1B19F66A0((uint64_t)(v61 + 6), (uint64_t)v122, &qword_1ED4B7FB0);
      v73 = v61[4];
      v74 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v71 + 40) + 16) + 32) + 16) + 1;
      swift_retain();
      v61[6] = ecs_stack_allocator_allocate(v73, 48 * v74, 8);
      v61[7] = v74;
      v61[9] = 0;
      v61[10] = 0;
      v61[8] = 0;
      swift_release();
      v75 = sub_1B1A12038((uint64_t)&type metadata for ParticleLifetime, (uint64_t)&off_1E6389120, v69, v68, v70, (uint64_t)v61);
      if (v69)
      {
        if (!v70)
          goto LABEL_59;
        if (v70 >= 8)
        {
          v76 = v70 & 0xFFFFFFFFFFFFFFF8;
          v78 = (int32x4_t *)(v75 + 16);
          v79 = v70 & 0xFFFFFFFFFFFFFFF8;
          v4 = v106;
          v63 = v95;
          v77 = v94.i32[0];
          do
          {
            v78[-1] = v92;
            *v78 = v92;
            v78 += 2;
            v79 -= 8;
          }
          while (v79);
          if (v70 == v76)
            goto LABEL_73;
        }
        else
        {
          v76 = 0;
          v4 = v106;
          v63 = v95;
          v77 = v94.i32[0];
        }
        v80 = v70 - v76;
        v81 = (__int32 *)(v75 + 4 * v76);
        do
        {
          *v81++ = v77;
          --v80;
        }
        while (v80);
      }
      else
      {
        if ((_DWORD)v67 == (_DWORD)v102)
        {
LABEL_59:
          v4 = v106;
          v63 = v95;
          goto LABEL_73;
        }
        v82 = v102 - v67;
        if ((unint64_t)(v102 - v67) >= 8)
        {
          v83 = (v82 & 0xFFFFFFFFFFFFFFF8) + v67;
          v85 = (int32x4_t *)(v75 + 4 * v67 + 16);
          v86 = v82 & 0xFFFFFFFFFFFFFFF8;
          do
          {
            v85[-1] = v92;
            *v85 = v92;
            v85 += 2;
            v86 -= 8;
          }
          while (v86);
          v4 = v106;
          v63 = v95;
          v84 = v94.i32[0];
          if (v82 == (v82 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_73;
        }
        else
        {
          v83 = v67;
          v4 = v106;
          v63 = v95;
          v84 = v94.i32[0];
        }
        v87 = v102 - v83;
        v88 = (__int32 *)(v75 + 4 * v83);
        do
        {
          *v88++ = v84;
          --v87;
        }
        while (v87);
      }
LABEL_73:
      sub_1B1F05D48(v61, (unsigned __int16 **)&v119, (uint64_t)v122);
      sub_1B1F03804((char *)v71);
      ecs_stack_allocator_pop_snapshot(v104);
      if ((v63 & 1) != 0)
      {
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v71 + 344));
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v71 + 376));
      }
      swift_release();
      if (++v65 == v98)
      {
LABEL_76:
        sub_1B19ED748(v107);
        return sub_1B19ED748(v107);
      }
    }
  }
  return sub_1B19ED748(v107);
}

uint64_t *sub_1B1F016C8(_QWORD *a1, float a2, float a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  float v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  float v17;
  uint64_t v23;
  unsigned int *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  os_unfair_lock_s *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int32x4_t *v40;
  _OWORD *v41;
  unint64_t v42;
  uint64_t v43;
  _DWORD *v44;
  _DWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  float *v51;
  float *v52;
  float v53;
  float v54;
  uint64_t v55;
  uint64_t v56;
  BOOL v57;
  float v58;
  uint64_t v59;
  uint64_t v60;
  float *v61;
  float *v62;
  __int128 v64;
  int32x4_t v65;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74[8];
  _OWORD v75[2];
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  __int128 v82;
  __int128 v83;
  uint64_t v84;
  _OWORD v85[2];
  uint64_t v86;
  _BYTE v87[40];
  _OWORD v88[2];
  uint64_t v89;

  v8 = *(_OWORD *)(a5 + 32);
  v88[0] = *(_OWORD *)(a5 + 16);
  v88[1] = v8;
  v89 = *(_QWORD *)(a5 + 48);
  v9 = swift_retain();
  sub_1B1E8FCE4(v9, (uint64_t)v88, 0x200000000, v74);
  sub_1B19F66A0((uint64_t)v74, (uint64_t)v75, (unint64_t *)&qword_1ED4B7DE0);
  if (!*(_QWORD *)&v75[0])
    return (uint64_t *)swift_release();
  v82 = v75[0];
  v83 = v75[1];
  v69 = v77;
  v84 = v76;
  v11 = v78;
  v10 = v79;
  v12 = v81;
  v72 = v80;
  swift_release();
  sub_1B1E5267C();
  if (v12 <= 0 || !v11)
    return sub_1B19ED748(v74);
  v14 = (float)-(float)(v13 * (float)(1.0 / a2)) / (float)v12;
  v15 = v72[4];
  v71 = *(unsigned __int8 *)(v10 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
  v85[0] = v82;
  v85[1] = v83;
  v86 = v84;
  swift_retain();
  swift_retain();
  swift_retain();
  v16 = 0;
  v17 = 0.0;
  __asm { FMOV            V0.4S, #1.0 }
  v64 = _Q0;
  v65 = vdupq_n_s32(0x4479FFFFu);
  v23 = v5;
  v67 = v11;
  v68 = v15;
  do
  {
    v24 = (unsigned int *)(v69 + 48 * v16);
    v25 = v24[1];
    v70 = *v24;
    v27 = (uint64_t *)*((_QWORD *)v24 + 2);
    v26 = *((_QWORD *)v24 + 3);
    v28 = *((_QWORD *)v24 + 4);
    v29 = *((_QWORD *)v24 + 5);
    v73 = v23;
    if (v71)
    {
      v30 = *(os_unfair_lock_s **)(v29 + 376);
      swift_retain_n();
      os_unfair_lock_lock(v30);
      os_unfair_lock_lock(*(os_unfair_lock_t *)(v29 + 344));
      swift_release();
    }
    else
    {
      swift_retain();
    }
    ecs_stack_allocator_push_snapshot(v15);
    sub_1B19F66A0((uint64_t)(v72 + 6), (uint64_t)v87, &qword_1ED4B7FB0);
    v31 = v72[4];
    v32 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v29 + 40) + 16) + 32) + 16) + 1;
    swift_retain();
    v72[6] = ecs_stack_allocator_allocate(v31, 48 * v32, 8);
    v72[7] = v32;
    v72[9] = 0;
    v72[10] = 0;
    v72[8] = 0;
    swift_release();
    v33 = sub_1B1A12038((uint64_t)&type metadata for ParticleLifetime, (uint64_t)&off_1E6389120, v27, v26, v28, (uint64_t)v72);
    v34 = sub_1B1A12038((uint64_t)&type metadata for ParticleAge, (uint64_t)&off_1E63717C8, v27, v26, v28, (uint64_t)v72);
    if (a2 == a3)
    {
      if (a2 == 0.0)
      {
        v35 = v70;
        if ((_DWORD)v70 != (_DWORD)v25)
        {
          v36 = v25 - v70;
          v37 = v73;
          if ((unint64_t)(v25 - v70) < 0xC)
            goto LABEL_17;
          v38 = v34 + 4 * v70;
          v39 = v33 + 4 * v70;
          if ((unint64_t)(v38 - v39) < 0x20)
            goto LABEL_17;
          v35 = (v36 & 0xFFFFFFFFFFFFFFF8) + v70;
          v40 = (int32x4_t *)(v39 + 16);
          v41 = (_OWORD *)(v38 + 16);
          v42 = v36 & 0xFFFFFFFFFFFFFFF8;
          do
          {
            v40[-1] = v65;
            *v40 = v65;
            v40 += 2;
            *(v41 - 1) = v64;
            *v41 = v64;
            v41 += 2;
            v42 -= 8;
          }
          while (v42);
          if (v36 != (v36 & 0xFFFFFFFFFFFFFFF8))
          {
LABEL_17:
            v43 = v25 - v35;
            v44 = (_DWORD *)(v34 + 4 * v35);
            v45 = (_DWORD *)(v33 + 4 * v35);
            do
            {
              *v45++ = 1148846079;
              *v44++ = 1065353216;
              --v43;
            }
            while (v43);
          }
          goto LABEL_29;
        }
      }
      else if ((_DWORD)v70 != (_DWORD)v25)
      {
        v60 = v25 - v70;
        v61 = (float *)(v34 + 4 * v70);
        v62 = (float *)(v33 + 4 * v70);
        v37 = v73;
        v59 = v67;
        do
        {
          *v62++ = 1.0 / a2;
          *v61++ = v17;
          v17 = v14 + v17;
          --v60;
        }
        while (v60);
        goto LABEL_30;
      }
    }
    else if ((_DWORD)v70 != (_DWORD)v25)
    {
      v46 = a1[3];
      v47 = a1[4];
      v48 = a1[1];
      v49 = a1[2];
      v50 = v25 - v70;
      v51 = (float *)(v34 + 4 * v70);
      v52 = (float *)(v33 + 4 * v70);
      do
      {
        v53 = (float)((float)(a3 - a2)
                    * (float)((float)((9 * ((((unint64_t)(5 * v49) >> 32) >> 25) | (640 * v49))) & 0xFFFFFF)
                            * 0.000000059605))
            + a2;
        v54 = 1.0 / v53;
        v55 = v48 ^ v46;
        v56 = v49 ^ v47;
        v46 ^= v48 ^ (v49 << 17);
        v49 ^= v55;
        v48 ^= v56;
        v57 = v53 > 0.001;
        v58 = 1000.0;
        if (v57)
          v58 = v54;
        v47 = __ROR8__(v56, 19);
        *v52++ = v58;
        *v51++ = v17;
        v17 = v14 + v17;
        --v50;
      }
      while (v50);
      a1[1] = v48;
      a1[2] = v49;
      a1[3] = v46;
      a1[4] = v47;
    }
    v37 = v73;
LABEL_29:
    v59 = v67;
LABEL_30:
    sub_1B1F05D48(v72, (unsigned __int16 **)v85, (uint64_t)v87);
    v23 = v37;
    sub_1B1F03804((char *)v29);
    v15 = v68;
    ecs_stack_allocator_pop_snapshot(v68);
    if ((v71 & 1) != 0)
    {
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v29 + 344));
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v29 + 376));
    }
    swift_release();
    ++v16;
  }
  while (v16 != v59);
  sub_1B19ED748(v74);
  return sub_1B19ED748(v74);
}

uint64_t *sub_1B1F01BC8(_QWORD *a1, float a2, float a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  float v15;
  uint64_t v16;
  unsigned int *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  os_unfair_lock_s *v21;
  uint64_t v22;
  uint64_t v23;
  float *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  float v31;
  float v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  float v37;
  uint64_t v38;
  float *v39;
  uint64_t v40;
  float v41;
  float v42;
  uint64_t v43;
  uint64_t v44;
  float v45;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57[8];
  _OWORD v58[2];
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  _OWORD v68[2];
  uint64_t v69;
  _BYTE v70[40];
  _OWORD v71[2];
  uint64_t v72;

  v6 = v5;
  v9 = *(_OWORD *)(a5 + 72);
  v71[0] = *(_OWORD *)(a5 + 56);
  v71[1] = v9;
  v72 = *(_QWORD *)(a5 + 88);
  v10 = swift_retain();
  sub_1B1E8FCE4(v10, (uint64_t)v71, 0x200000000, v57);
  sub_1B19F66A0((uint64_t)v57, (uint64_t)v58, (unint64_t *)&qword_1ED4B7DE0);
  if (!*(_QWORD *)&v58[0])
    return (uint64_t *)swift_release();
  v65 = v58[0];
  v66 = v58[1];
  v49 = v60;
  v67 = v59;
  v12 = v61;
  v11 = v62;
  v13 = v64;
  v56 = v63;
  swift_release();
  if (v13 > 0 && v12)
  {
    v55 = v56[4];
    v14 = *(unsigned __int8 *)(v11 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
    v68[0] = v65;
    v68[1] = v66;
    v69 = v67;
    v15 = a3 - a2;
    swift_retain();
    swift_retain();
    swift_retain();
    v16 = 0;
    v48 = v14;
    v47 = v12;
    while (1)
    {
      v17 = (unsigned int *)(v49 + 48 * v16);
      v52 = *v17;
      v53 = v16;
      v51 = v17[1];
      v18 = (uint64_t *)*((_QWORD *)v17 + 2);
      v54 = *((_QWORD *)v17 + 3);
      v20 = *((_QWORD *)v17 + 4);
      v19 = *((_QWORD *)v17 + 5);
      if (v14)
      {
        v21 = *(os_unfair_lock_s **)(v19 + 376);
        swift_retain_n();
        os_unfair_lock_lock(v21);
        os_unfair_lock_lock(*(os_unfair_lock_t *)(v19 + 344));
        swift_release();
      }
      else
      {
        swift_retain();
      }
      ecs_stack_allocator_push_snapshot(v55);
      sub_1B19F66A0((uint64_t)(v56 + 6), (uint64_t)v70, &qword_1ED4B7FB0);
      v22 = v56[4];
      v23 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v19 + 40) + 16) + 32) + 16) + 1;
      swift_retain();
      v56[6] = ecs_stack_allocator_allocate(v22, 48 * v23, 8);
      v56[7] = v23;
      v56[9] = 0;
      v56[10] = 0;
      v56[8] = 0;
      swift_release();
      v24 = (float *)sub_1B1A12038((uint64_t)&type metadata for ParticleLifetime, (uint64_t)&off_1E6389120, v18, v54, v20, (uint64_t)v56);
      if (v18)
      {
        v14 = v48;
        if (v20)
        {
          v25 = a1[3];
          v26 = a1[4];
          v27 = a1[1];
          v28 = a1[2];
          v30 = v53;
          v29 = v6;
          do
          {
            v31 = (float)(v15
                        * (float)((float)((9 * ((((unint64_t)(5 * v28) >> 32) >> 25) | (640 * v28))) & 0xFFFFFF)
                                * 0.000000059605))
                + a2;
            v32 = 1.0 / v31;
            v33 = v27 ^ v25;
            v34 = v28 ^ v26;
            v35 = v33 ^ v28;
            v27 ^= v34;
            v25 = v33 ^ (v28 << 17);
            v36 = v31 > 0.001;
            v26 = __ROR8__(v34, 19);
            v37 = 1000.0;
            if (v36)
              v37 = v32;
            *v24++ = v37;
            v28 = v35;
            --v20;
          }
          while (v20);
LABEL_24:
          a1[1] = v27;
          a1[2] = v35;
          a1[3] = v25;
          a1[4] = v26;
          goto LABEL_25;
        }
      }
      else
      {
        v14 = v48;
        if ((_DWORD)v52 != (_DWORD)v51)
        {
          v25 = a1[3];
          v26 = a1[4];
          v38 = v51 - v52;
          v39 = &v24[v52];
          v27 = a1[1];
          v40 = a1[2];
          v30 = v53;
          v29 = v6;
          do
          {
            v41 = (float)(v15
                        * (float)((float)((9 * ((((unint64_t)(5 * v40) >> 32) >> 25) | (640 * v40))) & 0xFFFFFF)
                                * 0.000000059605))
                + a2;
            v42 = 1.0 / v41;
            v43 = v27 ^ v25;
            v44 = v40 ^ v26;
            v35 = v43 ^ v40;
            v27 ^= v44;
            v25 = v43 ^ (v40 << 17);
            v36 = v41 > 0.001;
            v26 = __ROR8__(v44, 19);
            v45 = 1000.0;
            if (v36)
              v45 = v42;
            *v39++ = v45;
            v40 = v35;
            --v38;
          }
          while (v38);
          goto LABEL_24;
        }
      }
      v30 = v53;
      v29 = v6;
LABEL_25:
      sub_1B1F05D48(v56, (unsigned __int16 **)v68, (uint64_t)v70);
      v6 = v29;
      sub_1B1F03804((char *)v19);
      ecs_stack_allocator_pop_snapshot(v55);
      if ((v14 & 1) != 0)
      {
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v19 + 344));
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v19 + 376));
      }
      swift_release();
      v16 = v30 + 1;
      if (v16 == v47)
      {
        sub_1B19ED748(v57);
        return sub_1B19ED748(v57);
      }
    }
  }
  return sub_1B19ED748(v57);
}

uint64_t type metadata accessor for ParticleLifeInit.System()
{
  return objc_opt_self();
}

uint64_t sub_1B1F02008(uint64_t a1)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[2];
  uint64_t v8;
  _OWORD v9[2];
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;

  v2 = swift_allocObject();
  v3 = *(_OWORD *)(a1 + 104);
  v11 = *(_OWORD *)(a1 + 88);
  v12 = v3;
  v13 = *(_QWORD *)(a1 + 120);
  sub_1B19F0DBC((uint64_t)v7);
  v4 = v7[1];
  *(_OWORD *)(v2 + 16) = v7[0];
  *(_OWORD *)(v2 + 32) = v4;
  *(_QWORD *)(v2 + 48) = v8;
  sub_1B1B7076C((uint64_t)v9);
  sub_1B1B4F21C(a1);
  v5 = v9[1];
  *(_OWORD *)(v2 + 56) = v9[0];
  *(_OWORD *)(v2 + 72) = v5;
  *(_QWORD *)(v2 + 88) = v10;
  return v2;
}

const char *sub_1B1F020AC()
{
  return "SetLife.CPU";
}

uint64_t type metadata accessor for ParticleLifeInit.GPUSystem()
{
  return objc_opt_self();
}

const char *sub_1B1F020E4()
{
  return "ParticleLifeInit.GPU";
}

uint64_t sub_1B1F020F8()
{
  return type metadata accessor for ParticleLifeInit.GPUSystem();
}

uint64_t sub_1B1F02114(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;
  int v7;
  float v8;
  float v9;
  uint64_t v10;
  uint64_t ObjectType;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD v18[2];

  v2 = a1[2];
  v3 = a1[3];
  v4 = a1[6];
  swift_retain();
  v5 = sub_1B1D1771C(v3);
  v7 = v6;
  swift_release();
  v9 = *((float *)&v5 + 1);
  v8 = *(float *)&v5;
  if (v7 == 2)
  {
    v8 = 1.0;
    v9 = 1.0;
  }
  *(float *)v18 = v8;
  *(float *)&v18[1] = v9;
  v10 = *a1;
  if (*a1)
  {
    ObjectType = swift_getObjectType();
    type metadata accessor for particle_set_life_uniforms(0);
    sub_1B1F40E1C((uint64_t)v18, 1, ObjectType, v12, v13, v14, v15, v16);
  }
  swift_retain();
  sub_1B1B1FC34((uint64_t)a1);
  sub_1B1FE6FB8(v4, v2, v10 == 0, 0, (uint64_t)a1, 0xD000000000000011, 0x80000001B2343A30, 0);
  sub_1B1B1FC88((uint64_t)a1);
  return swift_release();
}

float sub_1B1F02224(_QWORD *a1)
{
  uint64_t v1;
  float v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  _BYTE v11[8];
  float v12;

  sub_1B1F02404(0, &qword_1ED4BB498, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED048]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v7);
  v9 = &v11[-v8];
  sub_1B19FA070(a1, a1[3]);
  sub_1B1F023C0();
  sub_1B222A150();
  if (!v1)
  {
    sub_1B1B4D924();
    v11[7] = 0;
    sub_1B1B67480((unint64_t *)&qword_1ED4BA5B0, MEMORY[0x1E0DEB1C0], MEMORY[0x1E0DEB8B0]);
    sub_1B2229814();
    v2 = v12;
    v11[6] = 1;
    sub_1B2229784();
    (*(void (**)(_BYTE *, uint64_t))(v6 + 8))(v9, v5);
  }
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  return v2;
}

unint64_t sub_1B1F023C0()
{
  unint64_t result;

  result = qword_1ED4BB2D8;
  if (!qword_1ED4BB2D8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B229F070, &type metadata for ParticleLifeInit.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED4BB2D8);
  }
  return result;
}

void sub_1B1F02404(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_1B1F023C0();
    v7 = a3(a1, &type metadata for ParticleLifeInit.CodingKeys, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t storeEnumTagSinglePayload for ParticleLifeInit.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1B1F024AC + 4 * byte_1B229EE45[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1B1F024E0 + 4 * byte_1B229EE40[v4]))();
}

uint64_t sub_1B1F024E0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1F024E8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B1F024F0);
  return result;
}

uint64_t sub_1B1F024FC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B1F02504);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1B1F02508(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1F02510(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ParticleLifeInit.CodingKeys()
{
  return &type metadata for ParticleLifeInit.CodingKeys;
}

uint64_t initializeBufferWithCopyOfBuffer for ParticleLifeInit(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for ParticleLifeInit(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 8);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for ParticleLifeInit(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for ParticleLifeInit()
{
  return &type metadata for ParticleLifeInit;
}

unint64_t sub_1B1F025EC()
{
  unint64_t result;

  result = qword_1EEF60B20;
  if (!qword_1EEF60B20)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B229F048, &type metadata for ParticleLifeInit.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF60B20);
  }
  return result;
}

unint64_t sub_1B1F02634()
{
  unint64_t result;

  result = qword_1ED4BB2E8;
  if (!qword_1ED4BB2E8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B229EF80, &type metadata for ParticleLifeInit.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED4BB2E8);
  }
  return result;
}

unint64_t sub_1B1F0267C()
{
  unint64_t result;

  result = qword_1ED4BB2E0;
  if (!qword_1ED4BB2E0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B229EFA8, &type metadata for ParticleLifeInit.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED4BB2E0);
  }
  return result;
}

uint64_t sub_1B1F026C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 96);
  v2 = *(_QWORD *)(v0 + 24);
  v3 = *(_QWORD *)(v2 + 16);
  if (v3)
  {
    v4 = v2 + 32;
    swift_retain();
    do
    {
      sub_1B1F24B64();
      v4 += 40;
      --v3;
    }
    while (v3);
    swift_release();
    v1 = *(_QWORD *)(v0 + 96);
  }
  if (v1)
    MEMORY[0x1B5E23F88](v1, -1, -1);
  swift_release();
  swift_release();
  swift_release();
  return v0;
}

uint64_t sub_1B1F0276C()
{
  sub_1B1F026C0();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for WorkerComponentStorage()
{
  return objc_opt_self();
}

uint64_t sub_1B1F027AC(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  unint64_t v9;
  __int128 v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x1E0DEE9D8];
  if (v1)
  {
    v19 = MEMORY[0x1E0DEE9D8];
    sub_1B202AE44(0, v1, 0);
    v2 = v19;
    v4 = sub_1B1C0754C(a1);
    v5 = 0;
    v6 = a1 + 64;
    v7 = *(_QWORD *)(v19 + 16);
    v8 = a1 + 88;
    do
    {
      v9 = v7;
      v10 = *(_OWORD *)(*(_QWORD *)(a1 + 56) + 24 * v4 + 8);
      v11 = *(_QWORD *)(v19 + 24);
      ++v7;
      if (v9 >= v11 >> 1)
      {
        v18 = v8;
        v17 = *(_OWORD *)(*(_QWORD *)(a1 + 56) + 24 * v4 + 8);
        sub_1B202AE44(v11 > 1, v7, 1);
        v10 = v17;
        v8 = v18;
      }
      *(_QWORD *)(v19 + 16) = v7;
      *(_OWORD *)(v19 + 16 * v9 + 32) = v10;
      v12 = v4 >> 6;
      if ((*(_QWORD *)(v6 + 8 * (v4 >> 6)) & (-2 << v4)) != 0)
      {
        v4 = __clz(__rbit64(*(_QWORD *)(v6 + 8 * (v4 >> 6)) & (-2 << v4))) | v4 & 0xFFFFFFFFFFFFFFC0;
      }
      else
      {
        v4 = 1 << *(_BYTE *)(a1 + 32);
        v13 = v12 + 1;
        v14 = (v4 + 63) >> 6;
        if (v12 + 1 < v14)
        {
          v15 = *(_QWORD *)(v6 + 8 * v13);
          if (!v15)
          {
            v13 = v12 + 2;
            if (v12 + 2 >= v14)
              goto LABEL_4;
            v15 = *(_QWORD *)(v6 + 8 * v13);
            if (!v15)
            {
              while (v14 - 3 != v12)
              {
                v15 = *(_QWORD *)(v8 + 8 * v12++);
                if (v15)
                {
                  v13 = v12 + 2;
                  goto LABEL_10;
                }
              }
              goto LABEL_4;
            }
          }
LABEL_10:
          v4 = __clz(__rbit64(v15)) + (v13 << 6);
        }
      }
LABEL_4:
      ++v5;
    }
    while (v5 != v1);
  }
  return v2;
}

double (*sub_1B1F02954())(_QWORD)
{
  _QWORD **v0;
  _QWORD *v1;
  char isUniquelyReferenced_nonNull_native;

  v1 = *v0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *v0 = v1;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    *v0 = sub_1B1FFEE48(v1);
  return nullsub_16;
}

double (*sub_1B1F029B4())(_QWORD)
{
  _QWORD **v0;
  _QWORD *v1;
  char isUniquelyReferenced_nonNull_native;

  v1 = *v0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *v0 = v1;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    *v0 = sub_1B1FFEFB0(v1);
  return nullsub_16;
}

void sub_1B1F02A14(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;

  sub_1B1FE26A8(*(_QWORD *)(v3 + 40), v3, a1, a2, a3);
  sub_1B1FD7538(*(_QWORD *)(v3 + 40), a1, a2, a3, 1, v3);
  v7 = *(_QWORD *)(v3 + 16);
  if (*(_QWORD *)(v7 + OBJC_IVAR____TtC3VFX13EntityManager_counters))
    vfx_counters.add(_:_:)(*(_DWORD *)(v7 + OBJC_IVAR____TtC3VFX13EntityManager_counters + 44), a3);
  if (*(_QWORD *)(v7 + OBJC_IVAR____TtC3VFX13EntityManager_counters))
    vfx_counters.add(_:_:)(*(_DWORD *)(v7 + OBJC_IVAR____TtC3VFX13EntityManager_counters + 48), -a3);
  ++*(_DWORD *)(v3 + 116);
}

uint64_t sub_1B1F02ADC(uint64_t result, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  int v8;

  v5 = v4;
  if (*(_BYTE *)(v4 + 120) != (result & 1))
  {
    v6 = result;
    if (a2 && *(_QWORD *)(v5 + 240) - *(_QWORD *)(v5 + 232) > a4)
    {
      return sub_1B1FD891C(a2, a3, a4, *(_DWORD *)(v5 + 24), result & 1, *(unsigned int *)(v5 + 28) | ((unint64_t)*(unsigned __int8 *)(v5 + 32) << 32), 0, 0);
    }
    else
    {
      v7 = *(unsigned int *)(v5 + 188);
      v8 = *(_DWORD *)(v5 + 24);
      swift_retain();
      sub_1B1C8DBF4(v7, v6 & 1, v8);
      result = swift_release();
      *(_BYTE *)(v5 + 120) = v6 & 1;
    }
  }
  return result;
}

uint64_t sub_1B1F02BB8(uint64_t result, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  int v7;

  v4 = v3;
  if (*(_BYTE *)(v3 + 120) != (result & 1))
  {
    v5 = result;
    if ((a3 & 1) != 0 || (uint64_t)(*(_QWORD *)(v4 + 240) - *(_QWORD *)(v4 + 232)) < 2)
    {
      v6 = *(unsigned int *)(v4 + 188);
      v7 = *(_DWORD *)(v4 + 24);
      swift_retain();
      sub_1B1C8DBF4(v6, v5 & 1, v7);
      result = swift_release();
      *(_BYTE *)(v4 + 120) = v5 & 1;
    }
    else
    {
      return sub_1B1FD8FC0(a2, *(_DWORD *)(v4 + 24), result & 1, *(unsigned int *)(v4 + 28) | ((unint64_t)*(unsigned __int8 *)(v4 + 32) << 32), 0, 0, 0, 0);
    }
  }
  return result;
}

uint64_t sub_1B1F02C90(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;

  v2 = type metadata accessor for TriggerScript(0);
  v3 = sub_1B1A11FDC(v2);
  v4 = 0;
  if ((v5 & 1) == 0)
  {
    v6 = *(_QWORD *)(v2 - 8);
    if (*(_QWORD *)(v6 + 64))
      v7 = *(_QWORD *)(v6 + 72);
    else
      v7 = 0;
    return v3 + v7 * a1;
  }
  return v4;
}

uint64_t sub_1B1F02CF8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;

  v2 = type metadata accessor for GraphScript(0);
  v3 = sub_1B1A11FDC(v2);
  v4 = 0;
  if ((v5 & 1) == 0)
  {
    v6 = *(_QWORD *)(v2 - 8);
    if (*(_QWORD *)(v6 + 64))
      v7 = *(_QWORD *)(v6 + 72);
    else
      v7 = 0;
    return v3 + v7 * a1;
  }
  return v4;
}

uint64_t sub_1B1F02D60(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;

  v2 = type metadata accessor for VFXObjectTag();
  v3 = sub_1B1A11FDC(v2);
  v4 = 0;
  if ((v5 & 1) == 0)
  {
    v6 = *(_QWORD *)(v2 - 8);
    if (*(_QWORD *)(v6 + 64))
      v7 = *(_QWORD *)(v6 + 72);
    else
      v7 = 0;
    return v3 + v7 * a1;
  }
  return v4;
}

__n128 sub_1B1F02DC8@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  __n128 result;
  __n128 v8;
  __int128 v9;

  v8 = *(__n128 *)(a2 + 64);
  v9 = *(_OWORD *)(a2 + 48);
  v5 = *(_QWORD *)(a2 + 80);
  v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 16) + 32) + 16) + 1;
  *(_QWORD *)(a2 + 48) = ecs_stack_allocator_allocate(*(_QWORD *)(a2 + 32), 48 * v6, 8);
  *(_QWORD *)(a2 + 56) = v6;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  result = v8;
  *(_OWORD *)a3 = v9;
  *(__n128 *)(a3 + 16) = v8;
  *(_QWORD *)(a3 + 32) = v5;
  return result;
}

unint64_t sub_1B1F02E4C(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4;
  unint64_t v5;
  unint64_t v7;

  v4 = a1;
  v5 = HIDWORD(a1);
  v7 = a1;
  (*(void (**)(unint64_t *))(a4 + 8))(&v7);
  if ((_DWORD)v7 == v4 && HIDWORD(v7) == (_DWORD)v5)
    return 0;
  else
    return v7 | ((unint64_t)HIDWORD(v7) << 32);
}

uint64_t sub_1B1F02EAC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  sub_1B1A00060(a1, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a3 + 16))(a4, a2, a3);
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> sub_1B1F02EF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  (*(void (**)(uint64_t *))(a4 + 8))(&v4);
}

uint64_t sub_1B1F02F1C(unint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  unsigned int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v8 = MEMORY[0x1E0DEE9D8];
  v9 = sub_1B1B95EBC(MEMORY[0x1E0DEE9D8]);
  type metadata accessor for RemapContext();
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 24) = sub_1B1B95EBC(v8);
  v11 = sub_1B1B7DC84(v8);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v10 + 24) = v9;
  *(_QWORD *)(v10 + 32) = v11;
  *(_BYTE *)(v10 + 16) = a3;
  sub_1B1DA67D0(a1, v10);
  sub_1B1F07378(v10, a2, 0x100000000uLL, 0, a4);
  if (*(_QWORD *)(*(_QWORD *)(v10 + 24) + 16)
    && (sub_1B1DC3CA4(a1), v12 = *(_QWORD *)(v10 + 24), *(_QWORD *)(v12 + 16))
    && (v13 = sub_1B1DC3CA4(a1), (v14 & 1) != 0))
  {
    v15 = (unsigned int *)(*(_QWORD *)(v12 + 56) + 8 * v13);
    v16 = *v15;
    v17 = v15[1];
    swift_release();
    v18 = v17 << 32;
  }
  else
  {
    swift_release();
    v18 = 0;
    v16 = 0xFFFFFFFFLL;
  }
  return v18 | v16;
}

uint64_t sub_1B1F03048@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;

  v4 = sub_1B222826C();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
}

uint64_t sub_1B1F03084(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  char v5;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v10[32];

  v3 = *(_QWORD *)(v1 + 24);
  if (!*(_QWORD *)(v3 + 16))
  {
    v7 = xmmword_1B2244C80;
    v8 = 0;
    v9 = 0;
    goto LABEL_7;
  }
  swift_bridgeObjectRetain();
  v4 = sub_1B1DC3D30(a1);
  if ((v5 & 1) == 0)
  {
    v7 = xmmword_1B2244C80;
    v8 = 0;
    v9 = 0;
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  sub_1B1A00060(*(_QWORD *)(v3 + 56) + 32 * v4, (uint64_t)&v7);
  swift_bridgeObjectRelease();
  if (v7 == __PAIR128__(1, 0))
  {
LABEL_7:
    sub_1B19FC2D0(a1, (uint64_t)v10);
    sub_1B1AEA224((uint64_t)&v7, (uint64_t)&qword_1EEF60B50, (uint64_t)&type metadata for VFXBridgeableReference, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))sub_1B1A02758);
    goto LABEL_8;
  }
  sub_1B19FC350(a1);
  sub_1B19FC2D0((uint64_t)&v7, (uint64_t)v10);
LABEL_8:
  sub_1B19FC2D0((uint64_t)v10, a1);
  sub_1B1A00060(a1, (uint64_t)v10);
  MEMORY[0x1B5E240CC](v10);
  sub_1B19FC350((uint64_t)v10);
  return swift_unknownObjectRelease();
}

uint64_t sub_1B1F03198()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t sub_1B1F031C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1B1F03048(a1, a2);
}

uint64_t sub_1B1F031DC(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  BOOL v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;

  v3 = *(_QWORD *)result == -1 && HIDWORD(*(_QWORD *)result) == 0;
  if (!v3 && (*(_QWORD *)(v2 + 16) & ~a2) == 0)
  {
    v12 = *(_QWORD *)result;
    v4 = *(_QWORD *)(v2 + 24);
    result = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(v2 + 24) = v4;
    if ((result & 1) == 0)
    {
      result = (uint64_t)sub_1B1C63D98(0, *(_QWORD *)(v4 + 16) + 1, 1, (char *)v4);
      v4 = result;
      *(_QWORD *)(v2 + 24) = result;
    }
    v5 = *(_QWORD *)(v4 + 16);
    v6 = *(_QWORD *)(v4 + 24);
    v7 = v5 + 1;
    v8 = v12;
    if (v5 >= v6 >> 1)
    {
      v11 = v5 + 1;
      v9 = (char *)v4;
      v10 = *(_QWORD *)(v4 + 16);
      result = (uint64_t)sub_1B1C63D98(v6 > 1, v5 + 1, 1, v9);
      v8 = v12;
      v5 = v10;
      v7 = v11;
      v4 = result;
    }
    *(_QWORD *)(v4 + 16) = v7;
    *(_QWORD *)(v4 + 8 * v5 + 32) = v8;
    *(_QWORD *)(v2 + 24) = v4;
  }
  return result;
}

uint64_t sub_1B1F032B4()
{
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t sub_1B1F032DC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void (*a4)(uint64_t)@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  __n128 v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  void (*v33)(char *, uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v34;
  void (*v35)(char *, uint64_t, uint64_t);
  uint64_t v36;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t result;
  int v49;
  uint64_t v50[2];
  void (*v51)(uint64_t);
  char *v52;
  uint64_t v53;
  uint64_t v54;

  v7 = v6;
  v50[1] = a5;
  v51 = a4;
  v12 = sub_1B222826C();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v14);
  v52 = (char *)v50 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1B1791524(0, (unint64_t *)&qword_1ED4B7B50, v16, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)v50 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23.n128_f64[0] = MEMORY[0x1E0C80A78](v21, v22);
  v25 = (char *)v50 - v24;
  v26 = *(_QWORD *)(v6 + 32);
  v27 = *(_QWORD *)(v26 + 16);
  v53 = a2;
  if (!v27)
    goto LABEL_7;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v28 = sub_1B1DC3B00(a2, a3);
  if ((v29 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_7:
    v33 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v13 + 56);
    v33(v25, 1, 1, v12, v23);
    goto LABEL_8;
  }
  v50[0] = a1;
  v30 = *(_QWORD *)(*(_QWORD *)(v26 + 56) + 8 * v28);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v30 + 16) && (v31 = sub_1B1DC3CA8(v50[0]), (v32 & 1) != 0))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v13 + 16))(v25, *(_QWORD *)(v30 + 56) + *(_QWORD *)(v13 + 72) * v31, v12);
    v33 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v13 + 56);
    ((void (*)(char *, _QWORD, uint64_t, uint64_t))v33)(v25, 0, 1, v12);
  }
  else
  {
    v33 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v13 + 56);
    ((void (*)(char *, uint64_t, uint64_t, uint64_t))v33)(v25, 1, 1, v12);
  }
  swift_bridgeObjectRelease();
  v49 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v25, 1, v12);
  a1 = v50[0];
  if (v49 != 1)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v13 + 32))(a6, v25, v12);
LABEL_8:
  v34 = sub_1B1AEA224((uint64_t)v25, (uint64_t)&qword_1ED4B7B50, (uint64_t)MEMORY[0x1E0CB0998], (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))sub_1B1791524);
  v51(v34);
  v35 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
  v36 = (uint64_t)v52;
  v35(v52, a1, v12);
  v35(v20, a6, v12);
  ((void (*)(char *, _QWORD, uint64_t, uint64_t))v33)(v20, 0, 1, v12);
  swift_bridgeObjectRetain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v54 = *(_QWORD *)(v7 + 32);
  v38 = v54;
  *(_QWORD *)(v7 + 32) = 0x8000000000000000;
  v39 = v53;
  v40 = sub_1B1DC3B00(v53, a3);
  v42 = v41;
  v43 = *(_QWORD *)(v38 + 16) + ((v41 & 1) == 0);
  if (*(_QWORD *)(v38 + 24) >= v43)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_1B1EA8AAC();
      v38 = v54;
    }
  }
  else
  {
    sub_1B1E91F80(v43, isUniquelyReferenced_nonNull_native);
    v38 = v54;
    v44 = sub_1B1DC3B00(v39, a3);
    if ((v42 & 1) != (v45 & 1))
    {
      result = sub_1B2229FC4();
      __break(1u);
      return result;
    }
    v40 = v44;
  }
  *(_QWORD *)(v7 + 32) = v38;
  swift_bridgeObjectRelease();
  v46 = *(_QWORD **)(v7 + 32);
  swift_bridgeObjectRetain();
  if ((v42 & 1) == 0)
  {
    v47 = sub_1B1B816D0(MEMORY[0x1E0DEE9D8]);
    sub_1B1EB3510(v40, v39, a3, (uint64_t)v47, v46);
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  sub_1B20E0DEC((uint64_t)v20, v36);
  return swift_bridgeObjectRelease();
}

_QWORD *sub_1B1F03670@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;

  result = sub_1B1B816D0(MEMORY[0x1E0DEE9D8]);
  *a1 = result;
  return result;
}

uint64_t sub_1B1F0369C()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

double sub_1B1F036C8(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  double result;
  char v6;

  v2 = *(_QWORD *)(v1 + 24);
  if (*(_QWORD *)(v2 + 16))
  {
    v4 = sub_1B1DC3CA4(*a1);
    if ((v6 & 1) != 0)
    {
      result = *(double *)(*(_QWORD *)(v2 + 56) + 8 * v4);
      *(double *)a1 = result;
    }
  }
  return result;
}

uint64_t sub_1B1F0370C()
{
  sub_1B222A06C();
  sub_1B222A09C();
  sub_1B222A09C();
  return sub_1B222A0C0();
}

uint64_t sub_1B1F03764()
{
  sub_1B222A09C();
  return sub_1B222A09C();
}

uint64_t sub_1B1F0379C()
{
  sub_1B222A06C();
  sub_1B222A09C();
  sub_1B222A09C();
  return sub_1B222A0C0();
}

BOOL sub_1B1F037F0(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8);
}

char *sub_1B1F03804(char *result)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  char *v4;
  _QWORD *v5;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  char *v8;
  char *v9;

  v2 = (_QWORD *)(v1 + 104);
  if (*(_QWORD *)(*(_QWORD *)(v1 + 104) + 16))
  {
    v3 = v1;
    v4 = result;
    v5 = (_QWORD *)swift_bridgeObjectRetain();
    sub_1B1F05034(v5, (uint64_t)v4);
    swift_bridgeObjectRelease();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v7 = *(_QWORD *)(v1 + 104);
    if (isUniquelyReferenced_nonNull_native)
    {
      result = (char *)sub_1B1C92670(0, *(_QWORD *)(v7 + 16));
    }
    else
    {
      *v2 = sub_1B1B1C808(0, *(_QWORD *)(v7 + 24) >> 1);
      result = (char *)swift_bridgeObjectRelease();
    }
    if (*(unsigned __int8 *)(*(_QWORD *)(v3 + 16) + OBJC_IVAR____TtC3VFX13EntityManager_currentState) - 1 >= 2)
    {
      v8 = (char *)*((_QWORD *)v4 + 29);
      result = (char *)*((_QWORD *)v4 + 32);
      if (v8 == result)
      {
        v9 = (char *)*((_QWORD *)v4 + 30);
      }
      else
      {
        sub_1B1A1059C(result, v8);
        result = (char *)*((_QWORD *)v4 + 29);
        v9 = (char *)*((_QWORD *)v4 + 30);
        if (v9 == result)
        {
          v9 = 0;
          result = 0;
          *((_QWORD *)v4 + 29) = 0;
          *((_QWORD *)v4 + 30) = 0;
        }
      }
      *((_QWORD *)v4 + 31) = v9;
      *((_QWORD *)v4 + 32) = result;
    }
  }
  return result;
}

uint64_t PrivateCommandQueue.deinit()
{
  uint64_t v0;

  ecs_stack_allocator_destroy(*(uint64_t **)(v0 + 32));
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t PrivateCommandQueue.__deallocating_deinit()
{
  uint64_t v0;

  ecs_stack_allocator_destroy(*(uint64_t **)(v0 + 32));
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for VFXBridgingRemapAndResolveContext()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for CollectReferencesContext()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for RemapContext()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for PrivateCommandQueue()
{
  return objc_opt_self();
}

uint64_t method lookup function for PrivateCommandQueue()
{
  return swift_lookUpClassMethod();
}

ValueMetadata *type metadata accessor for PrivateCommandQueue.Stats()
{
  return &type metadata for PrivateCommandQueue.Stats;
}

uint64_t destroy for PrivateCommandQueue.Operation(uint64_t a1)
{
  unsigned int v1;

  v1 = *(unsigned __int8 *)(a1 + 40);
  if (v1 >= 5)
    v1 = *(_DWORD *)a1 + 5;
  if ((v1 & 0xFFFFFFFE) == 2)
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0(a1);
  return a1;
}

uint64_t initializeWithCopy for PrivateCommandQueue.Operation(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  __int128 v4;
  char v5;
  __int128 v6;
  __int128 v7;

  v3 = *(unsigned __int8 *)(a2 + 40);
  if (v3 >= 5)
    v3 = *(_DWORD *)a2 + 5;
  switch(v3)
  {
    case 0u:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_BYTE *)(a1 + 40) = 0;
      return a1;
    case 1u:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      v5 = 1;
      goto LABEL_10;
    case 2u:
      v6 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 24) = v6;
      (**(void (***)(uint64_t))(v6 - 8))(a1);
      v5 = 2;
      goto LABEL_10;
    case 3u:
      v7 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 24) = v7;
      (**(void (***)(uint64_t))(v7 - 8))(a1);
      v5 = 3;
      goto LABEL_10;
    case 4u:
      *(_BYTE *)a1 = *(_BYTE *)a2;
      v5 = 4;
LABEL_10:
      *(_BYTE *)(a1 + 40) = v5;
      break;
    default:
      v4 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v4;
      *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
      break;
  }
  return a1;
}

uint64_t assignWithCopy for PrivateCommandQueue.Operation(uint64_t a1, __int128 *a2)
{
  unsigned int v4;
  unsigned int v5;
  __int128 v6;
  __int128 v7;
  char v8;
  uint64_t v9;
  uint64_t v10;

  if ((__int128 *)a1 != a2)
  {
    v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 >= 5)
      v4 = *(_DWORD *)a1 + 5;
    if ((v4 & 0xFFFFFFFE) == 2)
      _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0(a1);
    v5 = *((unsigned __int8 *)a2 + 40);
    if (v5 >= 5)
      v5 = *(_DWORD *)a2 + 5;
    switch(v5)
    {
      case 0u:
        *(_OWORD *)a1 = *a2;
        *(_BYTE *)(a1 + 40) = 0;
        return a1;
      case 1u:
        *(_OWORD *)a1 = *a2;
        v8 = 1;
        goto LABEL_15;
      case 2u:
        v9 = *((_QWORD *)a2 + 3);
        *(_QWORD *)(a1 + 24) = v9;
        *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
        (**(void (***)(uint64_t, __int128 *))(v9 - 8))(a1, a2);
        v8 = 2;
        goto LABEL_15;
      case 3u:
        v10 = *((_QWORD *)a2 + 3);
        *(_QWORD *)(a1 + 24) = v10;
        *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
        (**(void (***)(uint64_t, __int128 *))(v10 - 8))(a1, a2);
        v8 = 3;
        goto LABEL_15;
      case 4u:
        *(_BYTE *)a1 = *(_BYTE *)a2;
        v8 = 4;
LABEL_15:
        *(_BYTE *)(a1 + 40) = v8;
        break;
      default:
        v6 = *a2;
        v7 = a2[1];
        *(_OWORD *)(a1 + 25) = *(__int128 *)((char *)a2 + 25);
        *(_OWORD *)a1 = v6;
        *(_OWORD *)(a1 + 16) = v7;
        break;
    }
  }
  return a1;
}

uint64_t assignWithTake for PrivateCommandQueue.Operation(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  __int128 v6;
  char v7;
  __int128 v8;
  __int128 v9;

  if (a1 != a2)
  {
    v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 >= 5)
      v4 = *(_DWORD *)a1 + 5;
    if ((v4 & 0xFFFFFFFE) == 2)
      _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0(a1);
    v5 = *(unsigned __int8 *)(a2 + 40);
    if (v5 >= 5)
      v5 = *(_DWORD *)a2 + 5;
    switch(v5)
    {
      case 0u:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_BYTE *)(a1 + 40) = 0;
        return a1;
      case 1u:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        v7 = 1;
        goto LABEL_15;
      case 2u:
        v8 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v8;
        *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
        v7 = 2;
        goto LABEL_15;
      case 3u:
        v9 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v9;
        *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
        v7 = 3;
        goto LABEL_15;
      case 4u:
        *(_BYTE *)a1 = *(_BYTE *)a2;
        v7 = 4;
LABEL_15:
        *(_BYTE *)(a1 + 40) = v7;
        break;
      default:
        v6 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v6;
        *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
        break;
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for PrivateCommandQueue.Operation(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xFB && *(_BYTE *)(a1 + 41))
    return (*(_DWORD *)a1 + 251);
  v3 = *(unsigned __int8 *)(a1 + 40);
  if (v3 >= 6)
    return (v3 ^ 0xFF) + 1;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for PrivateCommandQueue.Operation(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFA)
  {
    *(_OWORD *)(result + 25) = 0u;
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)result = a2 - 251;
    if (a3 >= 0xFB)
      *(_BYTE *)(result + 41) = 1;
  }
  else
  {
    if (a3 >= 0xFB)
      *(_BYTE *)(result + 41) = 0;
    if (a2)
      *(_BYTE *)(result + 40) = -(char)a2;
  }
  return result;
}

uint64_t sub_1B1F03DD8(uint64_t a1)
{
  uint64_t result;

  result = *(unsigned __int8 *)(a1 + 40);
  if (result >= 5)
    return (*(_DWORD *)a1 + 5);
  return result;
}

uint64_t sub_1B1F03DF4(uint64_t result, unsigned int a2)
{
  if (a2 > 4)
  {
    *(_QWORD *)(result + 32) = 0;
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)result = a2 - 5;
    LOBYTE(a2) = 5;
  }
  *(_BYTE *)(result + 40) = a2;
  return result;
}

ValueMetadata *type metadata accessor for PrivateCommandQueue.Operation()
{
  return &type metadata for PrivateCommandQueue.Operation;
}

ValueMetadata *type metadata accessor for CommandQueue.DirtyPropagation()
{
  return &type metadata for CommandQueue.DirtyPropagation;
}

ValueMetadata *type metadata accessor for ReferenceOptions()
{
  return &type metadata for ReferenceOptions;
}

uint64_t getEnumTagSinglePayload for CommandQueue(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 8))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CommandQueue(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 8) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for CommandQueue()
{
  return &type metadata for CommandQueue;
}

ValueMetadata *type metadata accessor for CommandQueue.IterationContext()
{
  return &type metadata for CommandQueue.IterationContext;
}

unint64_t sub_1B1F03EF4()
{
  unint64_t result;

  result = qword_1EEF60B28;
  if (!qword_1EEF60B28)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B229F314, &type metadata for ReferenceOptions);
    atomic_store(result, (unint64_t *)&qword_1EEF60B28);
  }
  return result;
}

unint64_t sub_1B1F03F3C()
{
  unint64_t result;

  result = qword_1EEF60B30;
  if (!qword_1EEF60B30)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B229F2E4, &type metadata for ReferenceOptions);
    atomic_store(result, (unint64_t *)&qword_1EEF60B30);
  }
  return result;
}

unint64_t sub_1B1F03F84()
{
  unint64_t result;

  result = qword_1EEF60B38;
  if (!qword_1EEF60B38)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B229F33C, &type metadata for ReferenceOptions);
    atomic_store(result, (unint64_t *)&qword_1EEF60B38);
  }
  return result;
}

unint64_t sub_1B1F03FCC()
{
  unint64_t result;

  result = qword_1EEF60B40;
  if (!qword_1EEF60B40)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B229F374, &type metadata for ReferenceOptions);
    atomic_store(result, (unint64_t *)&qword_1EEF60B40);
  }
  return result;
}

unint64_t sub_1B1F04014()
{
  unint64_t result;

  result = qword_1ED4B7FA0;
  if (!qword_1ED4B7FA0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B229F474, &type metadata for CommandQueue.DirtyPropagation);
    atomic_store(result, (unint64_t *)&qword_1ED4B7FA0);
  }
  return result;
}

unint64_t sub_1B1F04058(unint64_t result, unint64_t a2)
{
  _DWORD v2[4];

  if (a2 != 0xFFFFFFFF)
    return sub_1B1B8A6C8(v2, result, a2);
  return result;
}

uint64_t sub_1B1F04098(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  unsigned int *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  unsigned int *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  BOOL v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  _QWORD *v53;
  int v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int *v58;
  uint64_t v59;
  size_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  _BYTE *v65;
  uint64_t v66;
  uint64_t v67;
  _BYTE *v68;
  _QWORD *v69;
  uint64_t v70;
  _QWORD *v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  _QWORD *v84;
  BOOL v85;
  uint64_t v86;
  _QWORD *v87;
  _QWORD *v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  __int128 *v95;
  _OWORD *v96;
  unint64_t v97;
  __int128 v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  signed int v107;
  uint64_t v108;
  _QWORD *v110;
  uint64_t v111;
  uint64_t v112;
  _BYTE v114[48];
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;

  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 232);
  v6 = *(_QWORD *)(a2 + 240);
  swift_retain();
  v105 = v5;
  v103 = v6 - v5;
  if (v6 == v5)
    return swift_release();
  v8 = *(_QWORD *)(v2 + 32);
  v102 = v6;
  ecs_stack_allocator_push_snapshot(v8);
  v104 = v8;
  v99 = 8 * v6;
  v9 = ecs_stack_allocator_allocate(v8, 8 * v6, 4);
  v10 = v9;
  if (v6)
  {
    v11 = v6;
    v12 = v9;
    do
    {
      *((_WORD *)v12 + 2) = 256;
      *(_DWORD *)v12++ = 0;
      --v11;
    }
    while (v11);
  }
  v111 = v4;
  if (a1[2])
  {
    v13 = a1 + 4;
    sub_1B1BE90FC((uint64_t)(a1 + 4), (uint64_t)v114);
    v14 = a1[11];
    v15 = a1[12];
    v115 = v13[6];
    v116 = v14;
    v117 = v15;
    sub_1B1BE90FC((uint64_t)v114, (uint64_t)&v112);
    __asm { BR              X9 }
  }
  if (v6)
  {
    v16 = 0;
    v17 = 0;
    v18 = a2;
    do
    {
      v19 = (char *)&v9[v16] + 5;
      while (1)
      {
        v20 = v16 + 1;
        if (*v19 != 1)
          break;
        v19 += 8;
        ++v16;
        if (v6 == v20)
          goto LABEL_18;
      }
      ++v17;
    }
    while (v6 - 1 != v16++);
  }
  else
  {
    v17 = 0;
    v18 = a2;
  }
LABEL_18:
  v22 = ecs_stack_allocator_allocate(v8, 24 * v17, 8);
  v23 = v22;
  v24 = 0;
  v25 = v105;
  while (2)
  {
    v27 = (unsigned int *)&v10[v25];
    if ((*((_BYTE *)v27 + 5) & 1) != 0)
      goto LABEL_20;
    v28 = *((unsigned __int8 *)v27 + 4);
    v29 = *v27;
    v30 = v29 | (v28 << 32);
    if (!v24)
    {
LABEL_19:
      v26 = &v22[3 * v24];
      *(_DWORD *)v26 = v29;
      *((_BYTE *)v26 + 4) = BYTE4(v30) & 1;
      *(_OWORD *)(v26 + 1) = xmmword_1B2244C80;
      ++v24;
      goto LABEL_20;
    }
    v31 = v24;
    v32 = v22 + 2;
    while ((*((_BYTE *)v32 - 12) & 1) != 0)
    {
      if ((v30 & 0x100000000) != 0)
        goto LABEL_29;
LABEL_25:
      v32 += 3;
      if (!--v31)
        goto LABEL_19;
    }
    if ((v30 & 0x100000000) != 0 || *((_DWORD *)v32 - 4) != (_DWORD)v29)
      goto LABEL_25;
LABEL_29:
    ++*v32;
LABEL_20:
    if (++v25 != v6)
      continue;
    break;
  }
  v33 = v24 - 1;
  if (v24 != 1)
  {
    v34 = v22[1];
    v35 = v22 + 4;
    do
    {
      v34 += *(v35 - 2);
      *v35 = v34;
      v35 += 3;
      --v33;
    }
    while (v33);
  }
  v110 = ecs_stack_allocator_allocate(v8, 8 * v103, 8);
  memset(v110, 255, 8 * v103);
  v36 = v105;
  while (2)
  {
    v37 = (unsigned int *)&v10[v36];
    if ((*((_BYTE *)v37 + 5) & 1) != 0)
    {
LABEL_35:
      if (++v36 != v6)
        continue;
      v42 = ecs_stack_allocator_allocate(v8, 8 * v103, 8);
      v43 = v23[2];
      v106 = v23;
      v44 = 0;
      if (v24 != 1)
      {
        v45 = v23 + 5;
        v46 = 1;
        do
        {
          v48 = *v45;
          v45 += 3;
          v47 = v48;
          v49 = v43 <= v48;
          if (v43 < v48)
            v44 = v46;
          v50 = v46 + 1;
          if (v49)
            v43 = v47;
          ++v46;
        }
        while (v24 != v50);
      }
      v51 = *(_QWORD *)(v18 + 240) - (*(_QWORD *)(v18 + 232) + v17);
      if (v51 < v43)
      {
        v52 = *(_DWORD *)(v18 + 24);
        v53 = &v106[3 * v44];
        if ((*((_BYTE *)v53 + 4) & 1) != 0)
        {
          v54 = -1;
LABEL_58:
          v56 = 0;
          v57 = v105;
          v58 = (unsigned int *)&v10[v105];
          v59 = v102;
          v60 = v99;
          do
          {
            if ((*((_BYTE *)v58 + 5) & 1) != 0
              || (v61 = *v58, ((v61 | ((unint64_t)*((unsigned __int8 *)v58 + 4) << 32)) & 0x100000000) != 0)
              || v54 != (_DWORD)v61)
            {
              v42[v56++] = v57;
            }
            ++v57;
            v58 += 2;
          }
          while (v102 != v57);
          v67 = v105;
          v68 = (char *)&v10[v105] + 5;
          v66 = v111;
          do
          {
            if ((*v68 & 1) != 0)
              v110[v17++] = v67;
            ++v67;
            v68 += 8;
          }
          while (v102 != v67);
          *(_DWORD *)v53 = v52;
          *((_BYTE *)v53 + 4) = 0;
          v64 = v106;
          v69 = &v106[3 * v44];
          v69[1] = v17;
          v69[2] = v51;
LABEL_74:
          v70 = v59;
          v71 = ecs_stack_allocator_allocate(v104, v60, 8);
          v72 = v71;
          if (v70)
            bzero(v71, v60);
          if (!v24)
          {
LABEL_109:
            ecs_stack_allocator_pop_snapshot(v104);
            return swift_release();
          }
          v73 = 0;
          v100 = v66 + 48;
          v101 = v66 + 44;
          v74 = v105;
          while (1)
          {
            v75 = &v64[3 * v73];
            v76 = v75[2];
            if (v76 >= 1)
              break;
LABEL_78:
            if (++v73 == v24)
              goto LABEL_109;
          }
          v107 = *(_DWORD *)v75;
          v77 = *((unsigned __int8 *)v75 + 4);
          v78 = v64[3 * v73 + 1];
          v79 = 8 * v76;
          v80 = ecs_stack_allocator_allocate(v104, 8 * v76, 8);
          memset(v80, 255, 8 * v76);
          v108 = v78;
          if (v74 != v105)
          {
            v86 = -v76;
            v87 = &v110[v78];
            v88 = v80;
            v82 = v111;
            do
            {
              *v88++ = v72[v87[v86]];
              v85 = __CFADD__(v86++, 1);
            }
            while (!v85);
            goto LABEL_91;
          }
          if ((unint64_t)v76 >= 0xA && (unint64_t)v80 + v79 - (_QWORD)&v110[v78] >= 0x20)
          {
            v81 = v76 & 0xFFFFFFFFFFFFFFFCLL;
            v95 = (__int128 *)((char *)v110 + 8 * v78 - v79 + 16);
            v96 = v80 + 2;
            v97 = v76 & 0xFFFFFFFFFFFFFFFCLL;
            do
            {
              v98 = *v95;
              *(v96 - 1) = *(v95 - 1);
              *v96 = v98;
              v95 += 2;
              v96 += 2;
              v97 -= 4;
            }
            while (v97);
            v82 = v111;
            if (v76 == v81)
              goto LABEL_91;
          }
          else
          {
            v81 = 0;
            v82 = v111;
          }
          v83 = v81 - v76;
          v84 = &v80[v81];
          do
          {
            *v84++ = v110[v108 + v83];
            v85 = __CFADD__(v83++, 1);
          }
          while (!v85);
LABEL_91:
          if (v77)
          {
            sub_1B1FE26A8(*(_QWORD *)(a2 + 40), a2, v80, v76, v76);
            sub_1B1FD7538(*(_QWORD *)(a2 + 40), v80, v76, v76, 1, a2);
            if (*(_QWORD *)(v82 + OBJC_IVAR____TtC3VFX13EntityManager_counters))
              vfx_counters.add(_:_:)(*(_DWORD *)(v101 + OBJC_IVAR____TtC3VFX13EntityManager_counters), v76);
            v64 = v106;
            if (*(_QWORD *)(v82 + OBJC_IVAR____TtC3VFX13EntityManager_counters))
              vfx_counters.add(_:_:)(*(_DWORD *)(v100 + OBJC_IVAR____TtC3VFX13EntityManager_counters), -v76);
            ++*(_DWORD *)(a2 + 116);
          }
          else
          {
            v89 = *(unsigned __int8 *)(a2 + 120);
            v90 = *(unsigned int *)(a2 + 28);
            v114[0] = *(_BYTE *)(a2 + 32);
            sub_1B1FD891C(v80, v76, v76, v107, v89, v90 | ((unint64_t)v114[0] << 32), 0, 0);
            v64 = v106;
          }
          v91 = -v76;
          do
          {
            v72[v110[v108 + v91]] = -1;
            v85 = __CFADD__(v91++, 1);
          }
          while (!v85);
          v92 = 0;
          v74 += v76;
          v93 = &v72[v105];
          v94 = v103;
          do
          {
            if (*v93 != -1)
            {
              *v93 = v92 + v74;
              ++v92;
            }
            ++v93;
            --v94;
          }
          while (v94);
          goto LABEL_78;
        }
        v55 = *(_DWORD *)(v18 + 24);
        v54 = *(_DWORD *)v53;
        if (sub_1B1A10B20(*(_DWORD *)v53))
        {
          sub_1B1A10BB0(v54);
          v52 = v55;
          goto LABEL_58;
        }
      }
      v62 = 0;
      v63 = v105;
      v64 = v106;
      v65 = (char *)&v10[v105] + 5;
      v66 = v111;
      v59 = v102;
      v60 = v99;
      do
      {
        if ((*v65 & 1) == 0)
          v42[v62++] = v63;
        ++v63;
        v65 += 8;
      }
      while (v102 != v63);
      goto LABEL_74;
    }
    break;
  }
  if (v24)
  {
    v38 = *v37;
    v39 = v38 | ((unint64_t)*((unsigned __int8 *)v37 + 4) << 32);
    v40 = v24;
    v41 = v23 + 1;
    do
    {
      if ((*((_BYTE *)v41 - 4) & 1) != 0)
      {
        if ((v39 & 0x100000000) != 0)
          goto LABEL_34;
      }
      else if ((v39 & 0x100000000) == 0 && *((_DWORD *)v41 - 2) == (_DWORD)v38)
      {
LABEL_34:
        v110[(*v41)++] = v36;
        goto LABEL_35;
      }
      v41 += 3;
      --v40;
    }
    while (v40);
  }
  result = sub_1B2229688();
  __break(1u);
  return result;
}

uint64_t sub_1B1F05034(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  _BYTE v5[48];

  if (a1[2] == 1)
  {
    sub_1B1F09F2C((uint64_t)(a1 + 4), (uint64_t)v5);
    sub_1B1BE90FC((uint64_t)v5, (uint64_t)&v3);
    __asm { BR              X10 }
  }
  return sub_1B1F04098(a1, a2);
}

uint64_t sub_1B1F0510C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t result;

  v34 = a30;
  v35 = a31;
  sub_1B1BE90FC(v33 - 152, (uint64_t)&a21);
  v37 = *(_QWORD *)(v33 - 96);
  v38 = *(_QWORD *)(v33 - 88);
  a27 = *(uint64_t **)(v33 - 104);
  v36 = a27;
  a28 = v37;
  a29 = v38;
  sub_1B1B68F14((uint64_t)&a21);
  sub_1B1A11D9C(v34, v35, v36, v37, v38, v31, *(_BYTE *)(v31 + 112));
  result = sub_1B1A04628(v33 - 152, (uint64_t (*)(_QWORD))sub_1B1B1F228);
  *(_QWORD *)(v31 + 152) += *(_QWORD *)(v32 + 240) - *(_QWORD *)(v32 + 232);
  return result;
}

void sub_1B1F0515C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, __int128 a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,__int128 a28)
{
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  signed int v34;

  sub_1B1A02518(&a28, (uint64_t)&a19);
  v30 = *(uint64_t **)(v29 - 104);
  v31 = *(_QWORD *)(v29 - 96);
  v32 = *(_QWORD *)(v29 - 88);
  v33 = *(_DWORD *)(v28 + 24);
  swift_retain();
  sub_1B19FA198((uint64_t)&a19, (uint64_t)&a13);
  a11 = 0;
  a9 = 0u;
  a10 = 0u;
  v34 = sub_1B1DA4ED8(v33, 0, 0, 0, 0, (uint64_t)&a13, (uint64_t)&a9);
  swift_release();
  sub_1B1AEA224((uint64_t)&a9, (uint64_t)&qword_1ED4B89E0, (uint64_t)sub_1B1A12ED4, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))sub_1B1791524);
  sub_1B1AEA224((uint64_t)&a13, (uint64_t)&qword_1ED4B89E0, (uint64_t)sub_1B1A12ED4, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))sub_1B1791524);
  sub_1B1A11BB8(v30, v31, v32, v34);
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&a19);
  JUMPOUT(0x1B1F05228);
}

void sub_1B1F05250(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, __int128 a15, __int128 a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,__int128 a28)
{
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  signed int v34;

  sub_1B1A02518(&a28, (uint64_t)&a19);
  v30 = *(uint64_t **)(v29 - 104);
  v31 = *(_QWORD *)(v29 - 96);
  v32 = *(_QWORD *)(v29 - 88);
  v33 = *(_DWORD *)(v28 + 24);
  swift_retain();
  a17 = 0;
  a15 = 0u;
  a16 = 0u;
  sub_1B19FA198((uint64_t)&a19, (uint64_t)&a9);
  v34 = sub_1B1DA4ED8(v33, 0, 0, 0, 0, (uint64_t)&a15, (uint64_t)&a9);
  swift_release();
  sub_1B1AEA224((uint64_t)&a9, (uint64_t)&qword_1ED4B89E0, (uint64_t)sub_1B1A12ED4, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))sub_1B1791524);
  sub_1B1AEA224((uint64_t)&a15, (uint64_t)&qword_1ED4B89E0, (uint64_t)sub_1B1A12ED4, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))sub_1B1791524);
  sub_1B1A11BB8(v30, v31, v32, v34);
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&a19);
  JUMPOUT(0x1B1F0531CLL);
}

uint64_t sub_1B1F05344(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,unsigned __int8 a30)
{
  uint64_t v30;

  sub_1B1F02ADC(a30, *(uint64_t **)(v30 - 104), *(_QWORD *)(v30 - 96), *(_QWORD *)(v30 - 88));
  return sub_1B1A04628(v30 - 152, (uint64_t (*)(_QWORD))sub_1B1B1F228);
}

void sub_1B1F05370(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t *a27,uint64_t a28,uint64_t a29)
{
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  sub_1B1BE90FC(v31 - 152, (uint64_t)&a21);
  v33 = *(_QWORD *)(v31 - 96);
  v34 = *(_QWORD *)(v31 - 88);
  a27 = *(uint64_t **)(v31 - 104);
  v32 = a27;
  a28 = v33;
  a29 = v34;
  sub_1B1B68F14((uint64_t)&a21);
  if (v32)
  {
    sub_1B1F02A14(v32, v33, v34);
    sub_1B1A04628(v31 - 152, (uint64_t (*)(_QWORD))sub_1B1B1F228);
    v35 = *(_QWORD *)(v29 + 160) + v34;
  }
  else
  {
    sub_1B1A11624(*(_QWORD *)(v30 + 232), *(_QWORD *)(v30 + 240));
    sub_1B1A04628(v31 - 152, (uint64_t (*)(_QWORD))sub_1B1B1F228);
    v35 = *(_QWORD *)(v30 + 240) - *(_QWORD *)(v30 + 232) + *(_QWORD *)(v29 + 160);
  }
  *(_QWORD *)(v29 + 160) = v35;
  JUMPOUT(0x1B1F05404);
}

uint64_t sub_1B1F05424(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  os_unfair_lock_s *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t result;
  uint64_t v17;

  v1 = *a1;
  v2 = *a1 + 64;
  v3 = 1 << *(_BYTE *)(*a1 + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(*a1 + 64);
  v6 = (unint64_t)(v3 + 63) >> 6;
  swift_bridgeObjectRetain();
  v7 = 0;
  while (1)
  {
    if (v5)
    {
      v8 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      v9 = v8 | (v7 << 6);
      goto LABEL_5;
    }
    v13 = v7 + 1;
    if (v7 + 1 >= v6)
      goto LABEL_19;
    v14 = *(_QWORD *)(v2 + 8 * v13);
    if (!v14)
    {
      v13 = v7 + 2;
      if (v7 + 2 >= v6)
        goto LABEL_19;
      v14 = *(_QWORD *)(v2 + 8 * v13);
      if (!v14)
      {
        v13 = v7 + 3;
        if (v7 + 3 >= v6)
          goto LABEL_19;
        v14 = *(_QWORD *)(v2 + 8 * v13);
        if (!v14)
        {
          v13 = v7 + 4;
          if (v7 + 4 >= v6)
            goto LABEL_19;
          v14 = *(_QWORD *)(v2 + 8 * v13);
          if (!v14)
            break;
        }
      }
    }
LABEL_18:
    v5 = (v14 - 1) & v14;
    v9 = __clz(__rbit64(v14)) + (v13 << 6);
    v7 = v13;
LABEL_5:
    v10 = *(_QWORD *)(*(_QWORD *)(v1 + 48) + 8 * v9);
    v11 = *(_QWORD **)(*(_QWORD *)(v1 + 56) + 8 * v9);
    v12 = *(os_unfair_lock_s **)(v10 + 376);
    swift_retain();
    swift_bridgeObjectRetain();
    os_unfair_lock_lock(v12);
    os_unfair_lock_lock(*(os_unfair_lock_t *)(v10 + 344));
    sub_1B1F05034(v11, v10);
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v10 + 344));
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v10 + 376));
    swift_release();
    swift_bridgeObjectRelease();
  }
  while (v6 - 5 != v7)
  {
    v14 = *(_QWORD *)(v1 + 104 + 8 * v7++);
    if (v14)
    {
      v13 = v7 + 4;
      goto LABEL_18;
    }
  }
LABEL_19:
  swift_release();
  result = *a1;
  if (*(_QWORD *)(*a1 + 16))
  {
    swift_isUniquelyReferenced_nonNull_native();
    v17 = *a1;
    *a1 = 0x8000000000000000;
    sub_1B1F10D78();
    sub_1B2229634();
    *a1 = v17;
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1B1F05610(char a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  unint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;

  v4 = v3;
  if ((a1 & 1) == 0)
    return a3(v3 + 104);
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v9 = *(_QWORD *)(v3 + 96);
  v18 = *(_QWORD *)(v4 + 96);
  *(_QWORD *)(v4 + 96) = 0x8000000000000000;
  v10 = sub_1B1DC3BAC(a2);
  v12 = v11;
  v13 = *(_QWORD *)(v9 + 16) + ((v11 & 1) == 0);
  if (*(_QWORD *)(v9 + 24) >= v13)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_1B1EA7EC0();
      v9 = v18;
    }
  }
  else
  {
    sub_1B1E909F0(v13, isUniquelyReferenced_nonNull_native);
    v9 = v18;
    v14 = sub_1B1DC3BAC(a2);
    if ((v12 & 1) != (v15 & 1))
    {
      type metadata accessor for ComponentsDataChunk();
      result = sub_1B2229FC4();
      __break(1u);
      return result;
    }
    v10 = v14;
  }
  *(_QWORD *)(v4 + 96) = v9;
  swift_bridgeObjectRelease();
  v16 = *(_QWORD **)(v4 + 96);
  swift_bridgeObjectRetain();
  if ((v12 & 1) == 0)
  {
    sub_1B1EB3340(v10, a2, MEMORY[0x1E0DEE9D8], v16);
    swift_retain();
  }
  v17 = v16[7];
  swift_bridgeObjectRelease();
  a3(v17 + 8 * v10);
  return swift_release();
}

uint64_t sub_1B1F0577C(uint64_t result, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  _QWORD **v10;
  uint64_t v12;
  char *v13;
  char *v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _OWORD v23[3];
  __int128 v24;
  uint64_t v25;

  v10 = (_QWORD **)result;
  if (!a2)
  {
    sub_1B1BE90FC(a5, (uint64_t)v23);
    *(_QWORD *)&v24 = 0;
    *((_QWORD *)&v24 + 1) = a3;
LABEL_13:
    v25 = a4;
    goto LABEL_14;
  }
  if (a4 <= 0)
    return result;
  if (*(_QWORD *)(a6 + 240) - *(_QWORD *)(a6 + 232) != a4)
  {
    if ((a7 & 1) != 0)
    {
      v12 = 8 * a4;
      swift_retain();
      v13 = (char *)sub_1B1BC47E4(8 * a4, 8);
      if (&v13[v12] > a2 && &a2[v12] > v13)
      {
        result = sub_1B2229700();
        __break(1u);
        return result;
      }
      v15 = v13;
      memcpy(v13, a2, 8 * a4);
      swift_release();
      sub_1B1BE90FC(a5, (uint64_t)v23);
      *(_QWORD *)&v24 = v15;
      *((_QWORD *)&v24 + 1) = a4;
    }
    else
    {
      sub_1B1BE90FC(a5, (uint64_t)v23);
      *(_QWORD *)&v24 = a2;
      *((_QWORD *)&v24 + 1) = a3;
    }
    goto LABEL_13;
  }
  sub_1B1BE90FC(a5, (uint64_t)v23);
  v25 = 0;
  v24 = 0uLL;
LABEL_14:
  v16 = *v10;
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    result = (uint64_t)sub_1B1C631A0(0, v16[2] + 1, 1, v16);
    v16 = (_QWORD *)result;
  }
  v18 = v16[2];
  v17 = v16[3];
  if (v18 >= v17 >> 1)
  {
    result = (uint64_t)sub_1B1C631A0(v17 > 1, v18 + 1, 1, v16);
    v16 = (_QWORD *)result;
  }
  v16[2] = v18 + 1;
  v19 = &v16[9 * v18];
  *((_OWORD *)v19 + 2) = v23[0];
  v20 = v23[1];
  v21 = v23[2];
  v22 = v24;
  v19[12] = v25;
  *((_OWORD *)v19 + 4) = v21;
  *((_OWORD *)v19 + 5) = v22;
  *((_OWORD *)v19 + 3) = v20;
  *v10 = v16;
  return result;
}

__n128 sub_1B1F05960(uint64_t *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  __n128 result;
  __int128 v20;
  __int128 v21;
  _OWORD v22[2];
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v9 = *a1;
  if (*(_QWORD *)(*a1 + 16))
  {
    swift_bridgeObjectRetain();
    sub_1B1BE90FC(v9 + 32, (uint64_t)v22);
    sub_1B1BE90FC(a2, (uint64_t)&v24);
    __asm { BR              X9 }
  }
  v10 = *(_QWORD *)(a5 + 232);
  v11 = *(_QWORD *)(a5 + 240);
  v12 = v11 - v10;
  v13 = 8 * (v11 - v10);
  if ((a4 & 1) != 0)
  {
    swift_retain();
    v14 = (_QWORD *)sub_1B1BC47E4(v13, 8);
    swift_release();
  }
  else
  {
    v14 = ecs_stack_allocator_allocate(*(_QWORD *)(a6 + 32), 8 * (v11 - v10), 8);
  }
  *v14 = a3;
  sub_1B1BE90FC(a2, (uint64_t)v22);
  *(_QWORD *)&v24 = v14;
  *((_QWORD *)&v24 + 1) = v12;
  v25 = 1;
  v15 = (_QWORD *)*a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v15 = sub_1B1C631A0(0, v15[2] + 1, 1, v15);
  v17 = v15[2];
  v16 = v15[3];
  if (v17 >= v16 >> 1)
    v15 = sub_1B1C631A0(v16 > 1, v17 + 1, 1, v15);
  v15[2] = v17 + 1;
  v18 = &v15[9 * v17];
  *((_OWORD *)v18 + 2) = v22[0];
  result = (__n128)v22[1];
  v20 = v23;
  v21 = v24;
  v18[12] = v25;
  *((_OWORD *)v18 + 4) = v20;
  *((_OWORD *)v18 + 5) = v21;
  *((__n128 *)v18 + 3) = result;
  *a1 = (uint64_t)v15;
  return result;
}

uint64_t sub_1B1F05D20(uint64_t a1, uint64_t a2)
{
  char v2;

  sub_1B1F09F70(a1, a2);
  return v2 & 1;
}

uint64_t sub_1B1F05D48(_QWORD *a1, unsigned __int16 **a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t i;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  void (*v11)(uint64_t);
  uint64_t v12;
  BOOL v13;
  unsigned __int16 *v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  char *v18;
  unint64_t v19;
  char *v20;
  unsigned int v21;
  BOOL v22;
  int v23;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v32;
  uint64_t v35;

  v3 = a3;
  v5 = (uint64_t)(a1 + 6);
  v6 = a1[6];
  v35 = a1[8];
  if (!v35)
  {
    v29 = a1[7];
    v30 = (_QWORD *)a1[4];
    goto LABEL_33;
  }
  v32 = a1 + 6;
  for (i = 0; i != v35; ++i)
  {
    v9 = (uint64_t *)(v6 + 48 * i);
    v10 = *v9;
    v11 = (void (*)(uint64_t))v9[4];
    v12 = a1[9];
    if (v12)
      v13 = v10 == v12;
    else
      v13 = 0;
    if (v13)
      goto LABEL_3;
    v14 = *a2;
    if (!(*a2)[11])
      goto LABEL_3;
    v15 = v9[2];
    v16 = (char *)v14 + 41;
    v17 = v14[9];
    if (v17 >= 0x10)
    {
      v18 = &v16[v14[8]];
      v19 = v17 >> 4;
      v20 = (char *)v14 + 41;
      while (*(_QWORD *)v18 != v10)
      {
        ++v20;
        v18 += 16;
        if (!--v19)
          goto LABEL_19;
      }
      v21 = v20[v14[10]];
      v22 = v21 > 5;
      v23 = (1 << v21) & 0x23;
      if (v22 || v23 == 0)
      {
LABEL_3:
        v8 = swift_retain();
        v11(v8);
        swift_release();
        continue;
      }
    }
LABEL_19:
    if (swift_conformsToProtocol2())
      v25 = v15;
    else
      v25 = 0;
    if (v25)
    {
      if ((sub_1B1A182FC(v25) & 1) != 0)
        goto LABEL_3;
      v26 = v14[9];
      if (v26 < 0x10)
        goto LABEL_3;
      v27 = &v16[v14[8]];
      v28 = 16 * (v26 >> 4);
      while (*(_QWORD *)v27 != v25)
      {
        v27 += 16;
        v28 -= 16;
        if (!v28)
          goto LABEL_3;
      }
    }
  }
  v29 = a1[7];
  v6 = a1[6];
  v30 = (_QWORD *)a1[4];
  if ((uint64_t)a1[8] >= 1)
    swift_arrayDestroy();
  v3 = a3;
  v5 = (uint64_t)v32;
LABEL_33:
  ecs_stack_allocator_deallocate(v30, v6, 48 * v29);
  return sub_1B1A18378(v3, v5, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
}

uint64_t sub_1B1F05F54(uint64_t a1, char a2, char a3, unint64_t a4, uint64_t a5)
{
  uint64_t KeyPath;
  uint64_t v11;
  signed int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  int v18;

  swift_retain();
  KeyPath = swift_getKeyPath();
  sub_1B1DAC77C(KeyPath, 1);
  swift_release();
  swift_release();
  swift_retain();
  v11 = swift_getKeyPath();
  sub_1B1DAC77C(v11, 1);
  swift_release();
  swift_release();
  v12 = *(_DWORD *)(a1 + 204);
  if ((*(_BYTE *)(a1 + 208) & 1) != 0)
  {
    v13 = 0xFFFFFFFFLL;
  }
  else
  {
    swift_retain();
    v13 = sub_1B1DA8E54();
    swift_release();
  }
  v18 = -1;
  v14 = *(_QWORD *)(a5 + 16);
  swift_retain();
  swift_retain();
  sub_1B1C92338(v12, a4 | ((HIDWORD(a4) & 1) << 32), a2 & 1, v14, &v17, v13, &v18, a1, a5, v12, SHIWORD(v12), a3 & 1);
  swift_release();
  swift_release();
  v15 = type metadata accessor for GraphScript(0);
  swift_retain();
  sub_1B1A11FDC(v15);
  swift_release();
  return v13;
}

uint64_t sub_1B1F060FC(uint64_t a1, char a2, char a3, unint64_t a4, uint64_t a5)
{
  uint64_t KeyPath;
  uint64_t v11;
  signed int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  int v17;

  swift_retain();
  KeyPath = swift_getKeyPath();
  sub_1B1DAC77C(KeyPath, 1);
  swift_release();
  swift_release();
  swift_retain();
  v11 = swift_getKeyPath();
  sub_1B1DAC77C(v11, 1);
  swift_release();
  swift_release();
  v12 = *(_DWORD *)(a1 + 204);
  if ((*(_BYTE *)(a1 + 208) & 1) != 0)
  {
    v13 = 0xFFFFFFFFLL;
  }
  else
  {
    swift_retain();
    v13 = sub_1B1DA8E54();
    swift_release();
  }
  v17 = -1;
  v14 = *(_QWORD *)(a5 + 16);
  swift_retain();
  swift_retain();
  sub_1B1C92338(v12, a4 | ((HIDWORD(a4) & 1) << 32), a2 & 1, v14, &v16, v13, &v17, a1, a5, v12, SHIWORD(v12), a3 & 1);
  swift_release();
  swift_release();
  swift_retain();
  sub_1B1A11FDC((uint64_t)&type metadata for IBLRuntime);
  swift_release();
  return v13;
}

uint64_t sub_1B1F0629C(uint64_t a1, char a2, char a3, unint64_t a4, uint64_t a5, __int128 *a6, int a7, __n128 a8, __n128 a9, __n128 a10, __n128 a11)
{
  uint64_t KeyPath;
  uint64_t v17;
  signed int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v29[3];
  int v30;
  _QWORD v31[3];
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  swift_retain();
  KeyPath = swift_getKeyPath();
  sub_1B1DAC77C(KeyPath, 1);
  swift_release();
  swift_release();
  swift_retain();
  v17 = swift_getKeyPath();
  sub_1B1DAC77C(v17, 1);
  swift_release();
  swift_release();
  v18 = *(_DWORD *)(a1 + 204);
  if ((*(_BYTE *)(a1 + 208) & 1) != 0)
  {
    v19 = 0xFFFFFFFFLL;
  }
  else
  {
    swift_retain();
    v19 = sub_1B1DA8E54();
    swift_release();
  }
  v30 = -1;
  *(_OWORD *)v29 = 0uLL;
  v20 = *(_QWORD *)(a5 + 16);
  swift_retain();
  swift_retain();
  sub_1B1C92338(v18, a4 | ((HIDWORD(a4) & 1) << 32), a2 & 1, v20, v29, v19, &v30, a1, a5, v18, SHIWORD(v18), a3 & 1);
  swift_release();
  swift_release();
  v21 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a5 + 16) + 136) + 8 * v30 + 32);
  v31[0] = *(_QWORD *)(a5 + 16);
  v31[1] = v21;
  v31[2] = a5;
  v32 = xmmword_1B2244C80;
  v33 = 1;
  v34 = *(_OWORD *)v29;
  v35 = 0;
  v36 = 0;
  v37 = 1;
  v38 = 0;
  v39 = 0;
  v40 = 0;
  swift_retain();
  sub_1B217FC64((uint64_t)v31, a6, a7, a8, a9, a10, a11);
  swift_release();
  return v19;
}

uint64_t sub_1B1F0648C(uint64_t a1, char a2, char a3, unint64_t a4, uint64_t a5, __int128 *a6, int a7)
{
  uint64_t KeyPath;
  uint64_t v13;
  signed int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v21[3];
  int v22;
  _QWORD v23[3];
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  swift_retain();
  KeyPath = swift_getKeyPath();
  sub_1B1DAC77C(KeyPath, 1);
  swift_release();
  swift_release();
  swift_retain();
  v13 = swift_getKeyPath();
  sub_1B1DAC77C(v13, 1);
  swift_release();
  swift_release();
  v14 = *(_DWORD *)(a1 + 204);
  if ((*(_BYTE *)(a1 + 208) & 1) != 0)
  {
    v15 = 0xFFFFFFFFLL;
  }
  else
  {
    swift_retain();
    v15 = sub_1B1DA8E54();
    swift_release();
  }
  v22 = -1;
  *(_OWORD *)v21 = 0uLL;
  v16 = *(_QWORD *)(a5 + 16);
  swift_retain();
  swift_retain();
  sub_1B1C92338(v14, a4 | ((HIDWORD(a4) & 1) << 32), a2 & 1, v16, v21, v15, &v22, a1, a5, v14, SHIWORD(v14), a3 & 1);
  swift_release();
  swift_release();
  v17 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a5 + 16) + 136) + 8 * v22 + 32);
  v23[0] = *(_QWORD *)(a5 + 16);
  v23[1] = v17;
  v23[2] = a5;
  v24 = xmmword_1B2244C80;
  v25 = 1;
  v26 = *(_OWORD *)v21;
  v27 = 0;
  v28 = 0;
  v29 = 1;
  v30 = 0;
  v31 = 0;
  v32 = 0;
  swift_retain();
  sub_1B217F840((uint64_t)v23, a6, a7);
  swift_release();
  return v15;
}

uint64_t sub_1B1F0666C(uint64_t a1, char a2, char a3, unint64_t a4, uint64_t a5, __n128 a6, __n128 a7, float a8)
{
  uint64_t KeyPath;
  uint64_t v15;
  signed int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v23[3];
  int v24;
  _QWORD v25[3];
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  swift_retain();
  KeyPath = swift_getKeyPath();
  sub_1B1DAC77C(KeyPath, 1);
  swift_release();
  swift_release();
  swift_retain();
  v15 = swift_getKeyPath();
  sub_1B1DAC77C(v15, 1);
  swift_release();
  swift_release();
  v16 = *(_DWORD *)(a1 + 204);
  if ((*(_BYTE *)(a1 + 208) & 1) != 0)
  {
    v17 = 0xFFFFFFFFLL;
  }
  else
  {
    swift_retain();
    v17 = sub_1B1DA8E54();
    swift_release();
  }
  v24 = -1;
  *(_OWORD *)v23 = 0uLL;
  v18 = *(_QWORD *)(a5 + 16);
  swift_retain();
  swift_retain();
  sub_1B1C92338(v16, a4 | ((HIDWORD(a4) & 1) << 32), a2 & 1, v18, v23, v17, &v24, a1, a5, v16, SHIWORD(v16), a3 & 1);
  swift_release();
  swift_release();
  v19 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a5 + 16) + 136) + 8 * v24 + 32);
  v25[0] = *(_QWORD *)(a5 + 16);
  v25[1] = v19;
  v25[2] = a5;
  v26 = xmmword_1B2244C80;
  v27 = 1;
  v28 = *(_OWORD *)v23;
  v29 = 0;
  v30 = 0;
  v31 = 1;
  v32 = 0;
  v33 = 0;
  v34 = 0;
  swift_retain();
  sub_1B217FA6C((uint64_t)v25, a6, a7, a8);
  swift_release();
  return v17;
}

uint64_t sub_1B1F06858(uint64_t a1, char a2, char a3, unint64_t a4, uint64_t a5)
{
  return sub_1B1F06FC8(a1, a2, a3, a4, a5, (void (*)(_QWORD *))sub_1B217FB60);
}

uint64_t sub_1B1F06874(uint64_t a1, char a2, char a3, unint64_t a4, uint64_t a5)
{
  uint64_t KeyPath;
  uint64_t v11;
  signed int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17[2];
  int v18;

  swift_retain();
  KeyPath = swift_getKeyPath();
  sub_1B1DAC77C(KeyPath, 1);
  swift_release();
  swift_release();
  swift_retain();
  v11 = swift_getKeyPath();
  sub_1B1DAC77C(v11, 1);
  swift_release();
  swift_release();
  v12 = *(_DWORD *)(a1 + 204);
  if ((*(_BYTE *)(a1 + 208) & 1) != 0)
  {
    v13 = 0xFFFFFFFFLL;
  }
  else
  {
    swift_retain();
    v13 = sub_1B1DA8E54();
    swift_release();
  }
  v18 = -1;
  v17[0] = 0;
  v17[1] = 0;
  v14 = *(_QWORD *)(a5 + 16);
  swift_retain();
  swift_retain();
  sub_1B1C92338(v12, a4 | ((HIDWORD(a4) & 1) << 32), a2 & 1, v14, v17, v13, &v18, a1, a5, v12, SHIWORD(v12), a3 & 1);
  swift_release();
  swift_release();
  v15 = v17[0];
  swift_retain();
  sub_1B1A11FDC((uint64_t)&type metadata for VFXTag);
  sub_1B1F02D60(v15);
  sub_1B1A11FDC((uint64_t)&type metadata for WorldTransform);
  swift_release();
  return v13;
}

uint64_t sub_1B1F06A3C(uint64_t a1, char a2, char a3, unint64_t a4, uint64_t a5)
{
  return sub_1B1F06FC8(a1, a2, a3, a4, a5, (void (*)(_QWORD *))sub_1B217FDC8);
}

uint64_t sub_1B1F06A58(uint64_t a1, char a2, char a3, unint64_t a4, uint64_t a5, float32x4_t a6, float32x4_t a7, float32x4_t a8, __n128 a9, float32x4_t a10)
{
  uint64_t KeyPath;
  uint64_t v16;
  signed int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v27[3];
  int v28;
  _QWORD v29[3];
  __int128 v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  swift_retain();
  KeyPath = swift_getKeyPath();
  sub_1B1DAC77C(KeyPath, 1);
  swift_release();
  swift_release();
  swift_retain();
  v16 = swift_getKeyPath();
  sub_1B1DAC77C(v16, 1);
  swift_release();
  swift_release();
  v17 = *(_DWORD *)(a1 + 204);
  if ((*(_BYTE *)(a1 + 208) & 1) != 0)
  {
    v18 = 0xFFFFFFFFLL;
  }
  else
  {
    swift_retain();
    v18 = sub_1B1DA8E54();
    swift_release();
  }
  v28 = -1;
  *(_OWORD *)v27 = 0uLL;
  v19 = *(_QWORD *)(a5 + 16);
  swift_retain();
  swift_retain();
  sub_1B1C92338(v17, a4 | ((HIDWORD(a4) & 1) << 32), a2 & 1, v19, v27, v18, &v28, a1, a5, v17, SHIWORD(v17), a3 & 1);
  swift_release();
  swift_release();
  v20 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a5 + 16) + 136) + 8 * v28 + 32);
  v29[0] = *(_QWORD *)(a5 + 16);
  v29[1] = v20;
  v29[2] = a5;
  v30 = xmmword_1B2244C80;
  v31 = 1;
  v32 = *(_OWORD *)v27;
  v33 = 0;
  v34 = 0;
  v35 = 1;
  v36 = 0;
  v37 = 0;
  v38 = 0;
  swift_retain();
  sub_1B217FE7C((uint64_t)v29, a6, a7, a8, a9, a10);
  swift_release();
  return v18;
}

uint64_t sub_1B1F06C44(uint64_t a1, char a2, char a3, unint64_t a4, uint64_t a5)
{
  return sub_1B1F06FC8(a1, a2, a3, a4, a5, (void (*)(_QWORD *))sub_1B217F7AC);
}

uint64_t sub_1B1F06C60(uint64_t a1, char a2, char a3, unint64_t a4, uint64_t a5, __int128 *a6, __n128 a7, __n128 a8, __n128 a9, __n128 a10)
{
  uint64_t KeyPath;
  uint64_t v16;
  signed int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v27[3];
  int v28;
  _QWORD v29[3];
  __int128 v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  swift_retain();
  KeyPath = swift_getKeyPath();
  sub_1B1DAC77C(KeyPath, 1);
  swift_release();
  swift_release();
  swift_retain();
  v16 = swift_getKeyPath();
  sub_1B1DAC77C(v16, 1);
  swift_release();
  swift_release();
  v17 = *(_DWORD *)(a1 + 204);
  if ((*(_BYTE *)(a1 + 208) & 1) != 0)
  {
    v18 = 0xFFFFFFFFLL;
  }
  else
  {
    swift_retain();
    v18 = sub_1B1DA8E54();
    swift_release();
  }
  v28 = -1;
  *(_OWORD *)v27 = 0uLL;
  v19 = *(_QWORD *)(a5 + 16);
  swift_retain();
  swift_retain();
  sub_1B1C92338(v17, a4 | ((HIDWORD(a4) & 1) << 32), a2 & 1, v19, v27, v18, &v28, a1, a5, v17, SHIWORD(v17), a3 & 1);
  swift_release();
  swift_release();
  v20 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a5 + 16) + 136) + 8 * v28 + 32);
  v29[0] = *(_QWORD *)(a5 + 16);
  v29[1] = v20;
  v29[2] = a5;
  v30 = xmmword_1B2244C80;
  v31 = 1;
  v32 = *(_OWORD *)v27;
  v33 = 0;
  v34 = 0;
  v35 = 1;
  v36 = 0;
  v37 = 0;
  v38 = 0;
  swift_retain();
  sub_1B217F93C((uint64_t)v29, a6, a7, a8, a9, a10);
  swift_release();
  return v18;
}

uint64_t sub_1B1F06E48(uint64_t a1, char a2, char a3, unint64_t a4, uint64_t a5)
{
  uint64_t KeyPath;
  uint64_t v11;
  signed int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  int v17;

  swift_retain();
  KeyPath = swift_getKeyPath();
  sub_1B1DAC77C(KeyPath, 1);
  swift_release();
  swift_release();
  swift_retain();
  v11 = swift_getKeyPath();
  sub_1B1DAC77C(v11, 1);
  swift_release();
  swift_release();
  v12 = *(_DWORD *)(a1 + 204);
  if ((*(_BYTE *)(a1 + 208) & 1) != 0)
  {
    v13 = 0xFFFFFFFFLL;
  }
  else
  {
    swift_retain();
    v13 = sub_1B1DA8E54();
    swift_release();
  }
  v17 = -1;
  v14 = *(_QWORD *)(a5 + 16);
  swift_retain();
  swift_retain();
  sub_1B1C92338(v12, a4 | ((HIDWORD(a4) & 1) << 32), a2 & 1, v14, &v16, v13, &v17, a1, a5, v12, SHIWORD(v12), a3 & 1);
  swift_release();
  swift_release();
  return v13;
}

uint64_t sub_1B1F06FAC(uint64_t a1, char a2, char a3, unint64_t a4, uint64_t a5)
{
  return sub_1B1F06FC8(a1, a2, a3, a4, a5, (void (*)(_QWORD *))sub_1B2180270);
}

uint64_t sub_1B1F06FC8(uint64_t a1, char a2, char a3, unint64_t a4, uint64_t a5, void (*a6)(_QWORD *))
{
  uint64_t KeyPath;
  uint64_t v12;
  signed int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18[3];
  int v19;
  _QWORD v20[3];
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(_QWORD *);

  v30 = a6;
  swift_retain();
  KeyPath = swift_getKeyPath();
  sub_1B1DAC77C(KeyPath, 1);
  swift_release();
  swift_release();
  swift_retain();
  v12 = swift_getKeyPath();
  sub_1B1DAC77C(v12, 1);
  swift_release();
  swift_release();
  v13 = *(_DWORD *)(a1 + 204);
  if ((*(_BYTE *)(a1 + 208) & 1) != 0)
  {
    v14 = 0xFFFFFFFFLL;
  }
  else
  {
    swift_retain();
    v14 = sub_1B1DA8E54();
    swift_release();
  }
  v19 = -1;
  *(_OWORD *)v18 = 0uLL;
  v15 = *(_QWORD *)(a5 + 16);
  swift_retain();
  swift_retain();
  sub_1B1C92338(v13, a4 | ((HIDWORD(a4) & 1) << 32), a2 & 1, v15, v18, v14, &v19, a1, a5, v13, SHIWORD(v13), a3 & 1);
  swift_release();
  swift_release();
  v16 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a5 + 16) + 136) + 8 * v19 + 32);
  v20[0] = *(_QWORD *)(a5 + 16);
  v20[1] = v16;
  v20[2] = a5;
  v21 = xmmword_1B2244C80;
  v22 = 1;
  v23 = *(_OWORD *)v18;
  v24 = 0;
  v25 = 0;
  v26 = 1;
  v27 = 0;
  v28 = 0;
  v29 = 0;
  swift_retain();
  v30(v20);
  swift_release();
  return v14;
}

uint64_t sub_1B1F071A0(uint64_t a1, char a2, char a3, unint64_t a4, void (*a5)(_QWORD *), uint64_t a6, uint64_t a7)
{
  uint64_t KeyPath;
  uint64_t v13;
  signed int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19[3];
  int v20;
  _QWORD v21[3];
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(_QWORD *);

  v31 = a5;
  swift_retain();
  KeyPath = swift_getKeyPath();
  sub_1B1DAC77C(KeyPath, 1);
  swift_release();
  swift_release();
  swift_retain();
  v13 = swift_getKeyPath();
  sub_1B1DAC77C(v13, 1);
  swift_release();
  swift_release();
  v14 = *(_DWORD *)(a1 + 204);
  if ((*(_BYTE *)(a1 + 208) & 1) != 0)
  {
    v15 = 0xFFFFFFFFLL;
  }
  else
  {
    swift_retain();
    v15 = sub_1B1DA8E54();
    swift_release();
  }
  v20 = -1;
  *(_OWORD *)v19 = 0uLL;
  v16 = *(_QWORD *)(a7 + 16);
  swift_retain();
  swift_retain();
  sub_1B1C92338(v14, a4 | ((HIDWORD(a4) & 1) << 32), a2 & 1, v16, v19, v15, &v20, a1, a7, v14, SHIWORD(v14), a3 & 1);
  swift_release();
  swift_release();
  v17 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a7 + 16) + 136) + 8 * v20 + 32);
  v21[0] = *(_QWORD *)(a7 + 16);
  v21[1] = v17;
  v21[2] = a7;
  v22 = xmmword_1B2244C80;
  v23 = 1;
  v24 = *(_OWORD *)v19;
  v25 = 0;
  v26 = 0;
  v27 = 1;
  v28 = 0;
  v29 = 0;
  v30 = 0;
  swift_retain();
  v31(v21);
  swift_release();
  return v15;
}

uint64_t sub_1B1F07378(uint64_t a1, uint64_t a2, unint64_t a3, char a4, uint64_t a5)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v29;
  unint64_t v30;
  char v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  __int128 v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  os_unfair_lock_s *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char v53;
  int v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  os_unfair_lock_s *v58;
  uint64_t v59;
  uint64_t KeyPath;
  uint64_t v61;
  signed int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  _QWORD *v68;
  int64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  int *v78;
  int v79;
  int v80;
  BOOL v81;
  int *v83;
  int v84;
  int v85;
  uint64_t v87;
  uint64_t v88;
  int *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  __int128 v100;
  uint64_t v101;
  unint64_t v102;
  char *v103;
  char v104;
  uint64_t v105;
  unsigned int *v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char v116;
  uint64_t v117;
  unint64_t v118;
  unint64_t v119;
  uint64_t v120;
  int32x2_t *v121;
  int32x2_t v122;
  uint64_t v123;
  uint64_t v124;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v126;
  unint64_t v127;
  char v128;
  char v129;
  uint64_t v130;
  unint64_t v131;
  char v132;
  _QWORD *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  char **v137;
  char *v138;
  char v139;
  unint64_t v140;
  unint64_t v141;
  __int128 v142;
  char *v143;
  uint64_t result;
  unint64_t v145;
  uint64_t v146;
  int64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v152;
  uint64_t v153;
  _QWORD *v154;
  char v155;
  uint64_t v156;
  char v157;
  _QWORD *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  unint64_t v163;
  unint64_t v164;
  uint64_t v166;
  uint64_t v167;
  __int128 v168;
  __int128 v169;
  _QWORD *v170;
  int v171;
  __int128 v172;
  __int128 v173;
  uint64_t v174;
  __int128 v175;
  __int128 v176;
  uint64_t v177;
  char v178;
  uint64_t v179;

  v6 = *(_QWORD **)(a5 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v146 = v7 + 64;
  v8 = 1 << *(_BYTE *)(v7 + 32);
  v9 = -1;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  v10 = v9 & *(_QWORD *)(v7 + 64);
  v149 = OBJC_IVAR____TtC3VFX13EntityManager_commandQueues;
  v11 = (_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
  v12 = (char *)v6 + OBJC_IVAR____TtC3VFX13EntityManager_lock;
  v13 = (unint64_t)(v8 + 63) >> 6;
  v148 = a3;
  swift_retain();
  v152 = v7;
  swift_bridgeObjectRetain();
  v14 = 0;
  v147 = v13;
  v145 = v13 - 5;
  v170 = v6;
  v154 = v11;
  while (1)
  {
    if (v10)
    {
      v19 = __clz(__rbit64(v10));
      v20 = (v10 - 1) & v10;
      v21 = v19 | (v14 << 6);
    }
    else
    {
      v22 = v14 + 1;
      if (v14 + 1 >= v147)
        goto LABEL_48;
      v23 = *(_QWORD *)(v146 + 8 * v22);
      if (!v23)
      {
        v22 = v14 + 2;
        if (v14 + 2 >= v147)
          goto LABEL_48;
        v23 = *(_QWORD *)(v146 + 8 * v22);
        if (!v23)
        {
          v22 = v14 + 3;
          if (v14 + 3 >= v147)
            goto LABEL_48;
          v23 = *(_QWORD *)(v146 + 8 * v22);
          if (!v23)
          {
            v22 = v14 + 4;
            if (v14 + 4 >= v147)
            {
LABEL_48:
              swift_release();
              v63 = *(_QWORD *)(a1 + 24);
              v64 = *(_QWORD *)(v63 + 64);
              v153 = v63 + 64;
              v65 = 1 << *(_BYTE *)(v63 + 32);
              v66 = -1;
              if (v65 < 64)
                v66 = ~(-1 << v65);
              v67 = v66 & v64;
              v68 = (_QWORD *)((char *)v6 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
              v69 = (unint64_t)(v65 + 63) >> 6;
              v70 = swift_bridgeObjectRetain();
              v71 = 0;
              v158 = v68;
              v161 = v70;
              while (1)
              {
                if (v67)
                {
                  v72 = __clz(__rbit64(v67));
                  v73 = (v67 - 1) & v67;
                  v74 = v72 | (v71 << 6);
                }
                else
                {
                  v75 = v71 + 1;
                  if (v71 + 1 >= v69)
                    goto LABEL_89;
                  v76 = *(_QWORD *)(v153 + 8 * v75);
                  if (!v76)
                  {
                    v75 = v71 + 2;
                    if (v71 + 2 >= v69)
                      goto LABEL_89;
                    v76 = *(_QWORD *)(v153 + 8 * v75);
                    if (!v76)
                    {
                      v75 = v71 + 3;
                      if (v71 + 3 >= v69)
                        goto LABEL_89;
                      v76 = *(_QWORD *)(v153 + 8 * v75);
                      if (!v76)
                      {
                        v75 = v71 + 4;
                        if (v71 + 4 >= v69)
                        {
LABEL_89:
                          swift_release();
                          v96 = swift_bridgeObjectRetain();
                          v97 = sub_1B1F027AC(v96);
                          swift_bridgeObjectRelease();
                          v159 = *(_QWORD *)(v97 + 16);
                          if (!v159)
                          {
LABEL_126:
                            swift_release();
                            return swift_bridgeObjectRelease();
                          }
                          v98 = 0;
                          v156 = v97 + 32;
                          v99 = (char *)MEMORY[0x1E0DEE9D8];
                          while (2)
                          {
                            v100 = *(_OWORD *)(v156 + 16 * v98);
                            v101 = *(_QWORD *)(a2 + 208);
                            v162 = v98;
                            v168 = v100;
                            if (*(_QWORD *)(v101 + 16))
                            {
                              v102 = sub_1B1DC3AC8(v100);
                              v103 = v99;
                              if ((v104 & 1) != 0)
                              {
                                v103 = *(char **)(*(_QWORD *)(v101 + 56) + 24 * v102);
                                swift_bridgeObjectRetain();
                              }
                              v105 = *((_QWORD *)v103 + 2);
                              if (!v105)
                              {
LABEL_110:
                                swift_bridgeObjectRelease();
                                v120 = *((_QWORD *)v99 + 2);
                                if (v120)
                                {
                                  v121 = (int32x2_t *)(v99 + 32);
                                  do
                                  {
                                    v122 = vceq_s32(vrev64_s32(*v121), (int32x2_t)0xFFFFFFFF00000000);
                                    if ((v122.i32[1] & v122.i32[0] & 1) == 0)
                                    {
                                      v169 = *(_OWORD *)v121->i8;
                                      v123 = swift_allocObject();
                                      *(_OWORD *)(v123 + 16) = v168;
                                      v124 = swift_allocObject();
                                      *(_QWORD *)(v124 + 16) = sub_1B1E353B8;
                                      *(_QWORD *)(v124 + 24) = v123;
                                      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
                                      *(_QWORD *)&v172 = v170[26];
                                      v126 = v172;
                                      v170[26] = 0x8000000000000000;
                                      v127 = sub_1B1DC3AC8(v168);
                                      v129 = v128;
                                      v130 = *(_QWORD *)(v126 + 16) + ((v128 & 1) == 0);
                                      if (*(_QWORD *)(v126 + 24) >= v130)
                                      {
                                        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
                                        {
                                          sub_1B1EAA4A8();
                                          v126 = v172;
                                        }
                                      }
                                      else
                                      {
                                        sub_1B1E94FD0(v130, isUniquelyReferenced_nonNull_native);
                                        v126 = v172;
                                        v131 = sub_1B1DC3AC8(v168);
                                        if ((v129 & 1) != (v132 & 1))
                                          goto LABEL_128;
                                        v127 = v131;
                                      }
                                      v170[26] = v126;
                                      swift_bridgeObjectRelease();
                                      v133 = (_QWORD *)v170[26];
                                      swift_bridgeObjectRetain();
                                      if ((v129 & 1) == 0)
                                      {
                                        sub_1B20204FC(*(uint64_t (**)(void))(v124 + 16), (uint64_t *)&v172);
                                        v134 = v173;
                                        v133[(v127 >> 6) + 8] |= 1 << v127;
                                        *(_QWORD *)(v133[6] + 8 * v127) = v168;
                                        v135 = v133[7] + 24 * v127;
                                        *(_OWORD *)v135 = v172;
                                        *(_QWORD *)(v135 + 16) = v134;
                                        ++v133[2];
                                      }
                                      v136 = v133[7];
                                      swift_bridgeObjectRelease();
                                      v137 = (char **)(v136 + 24 * v127);
                                      v138 = *v137;
                                      v139 = swift_isUniquelyReferenced_nonNull_native();
                                      *v137 = v138;
                                      if ((v139 & 1) == 0)
                                      {
                                        v138 = sub_1B1C64334(0, *((_QWORD *)v138 + 2) + 1, 1, v138);
                                        *v137 = v138;
                                      }
                                      v141 = *((_QWORD *)v138 + 2);
                                      v140 = *((_QWORD *)v138 + 3);
                                      v142 = v169;
                                      if (v141 >= v140 >> 1)
                                      {
                                        v143 = sub_1B1C64334(v140 > 1, v141 + 1, 1, v138);
                                        v142 = v169;
                                        v138 = v143;
                                        *v137 = v143;
                                      }
                                      *((_QWORD *)v138 + 2) = v141 + 1;
                                      *(_OWORD *)&v138[16 * v141 + 32] = v142;
                                      swift_release();
                                      swift_release();
                                    }
                                    v121 += 2;
                                    --v120;
                                  }
                                  while (v120);
                                }
                                v98 = v162 + 1;
                                swift_bridgeObjectRelease();
                                v99 = (char *)MEMORY[0x1E0DEE9D8];
                                if (v162 + 1 == v159)
                                  goto LABEL_126;
                                continue;
                              }
                            }
                            else
                            {
                              v103 = v99;
                              v105 = *((_QWORD *)v99 + 2);
                              if (!v105)
                                goto LABEL_110;
                            }
                            break;
                          }
                          swift_bridgeObjectRetain();
                          v106 = (unsigned int *)(v103 + 44);
                          do
                          {
                            v108 = *(_QWORD *)(a1 + 24);
                            if (*(_QWORD *)(v108 + 16))
                            {
                              v109 = *(v106 - 1);
                              v110 = *v106;
                              v111 = sub_1B1DC3CA4(*(_QWORD *)(v106 - 3));
                              if ((v112 & 1) != 0)
                              {
                                v113 = *(_QWORD *)(a1 + 24);
                                if (*(_QWORD *)(v113 + 16))
                                {
                                  v114 = *(_QWORD *)(*(_QWORD *)(v108 + 56) + 8 * v111);
                                  v115 = sub_1B1DC3CA4(v109 | (v110 << 32));
                                  if ((v116 & 1) != 0)
                                  {
                                    v117 = *(_QWORD *)(*(_QWORD *)(v113 + 56) + 8 * v115);
                                    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                                      v99 = sub_1B1C64334(0, *((_QWORD *)v99 + 2) + 1, 1, v99);
                                    v119 = *((_QWORD *)v99 + 2);
                                    v118 = *((_QWORD *)v99 + 3);
                                    if (v119 >= v118 >> 1)
                                      v99 = sub_1B1C64334(v118 > 1, v119 + 1, 1, v99);
                                    *((_QWORD *)v99 + 2) = v119 + 1;
                                    v107 = &v99[16 * v119];
                                    *((_QWORD *)v107 + 4) = v114;
                                    *((_QWORD *)v107 + 5) = v117;
                                  }
                                }
                              }
                            }
                            v106 += 4;
                            --v105;
                          }
                          while (v105);
                          swift_bridgeObjectRelease();
                          goto LABEL_110;
                        }
                        v76 = *(_QWORD *)(v153 + 8 * v75);
                        if (!v76)
                        {
                          do
                          {
                            if (v69 - 5 == v71)
                              goto LABEL_89;
                            v76 = *(_QWORD *)(v70 + 8 * v71++ + 104);
                          }
                          while (!v76);
                          v75 = v71 + 4;
                        }
                      }
                    }
                  }
                  v73 = (v76 - 1) & v76;
                  v74 = __clz(__rbit64(v76)) + (v75 << 6);
                  v71 = v75;
                }
                v77 = 8 * v74;
                v78 = (int *)(*(_QWORD *)(v70 + 48) + v77);
                v79 = *v78;
                v80 = v78[1];
                v81 = v79 == -1 && v80 == 0;
                if (v81 || v79 < 0 || v11[1] <= v79)
                  goto LABEL_127;
                if (v80 != -1 && *(_DWORD *)(*v11 + 12 * v79 + 8) != v80)
                  goto LABEL_127;
                v164 = v73;
                v167 = v71;
                v83 = (int *)(*(_QWORD *)(v70 + 56) + v77);
                v84 = *v83;
                v85 = v83[1];
                if (v84 == -1 && v85 == 0)
                  goto LABEL_127;
                if (v84 < 0)
                  goto LABEL_127;
                if (v68[1] <= v84)
                  goto LABEL_127;
                v87 = *(__int16 *)(*v11 + 12 * v79 + 4);
                v88 = *v68;
                if (v85 != -1 && *(_DWORD *)(v88 + 12 * v84 + 8) != v85)
                  goto LABEL_127;
                v89 = (int *)(v88 + 12 * v84);
                v90 = *((__int16 *)v89 + 2);
                v91 = *(_QWORD *)(v6[17] + 8 * *v89 + 32);
                swift_retain();
                swift_retain();
                sub_1B1A1127C(v87, v90, v91);
                v92 = *(_QWORD *)(*(_QWORD *)(v91 + 40) + 24);
                v93 = *(_QWORD *)(v92 + 16);
                if (v93)
                {
                  v94 = *(_QWORD *)(v91 + 128);
                  swift_retain();
                  v95 = (_QWORD *)(v92 + 56);
                  do
                  {
                    sub_1B1F24B30(v94 + *v95 + *(v95 - 1) * v90, a1, (uint64_t)&off_1E6376550, *(v95 - 3), *(v95 - 2));
                    v95 += 5;
                    --v93;
                  }
                  while (v93);
                  swift_release();
                  v6 = v170;
                  v11 = v154;
                }
                swift_release();
                swift_release();
                v68 = v158;
                v70 = v161;
                v71 = v167;
                v67 = v164;
              }
            }
            v23 = *(_QWORD *)(v146 + 8 * v22);
            if (!v23)
            {
              do
              {
                if (v145 == v14)
                  goto LABEL_48;
                v23 = *(_QWORD *)(v152 + 8 * v14++ + 104);
              }
              while (!v23);
              v22 = v14 + 4;
            }
          }
        }
      }
      v20 = (v23 - 1) & v23;
      v21 = __clz(__rbit64(v23)) + (v22 << 6);
      v14 = v22;
    }
    v24 = (unsigned int *)(*(_QWORD *)(v152 + 48) + 8 * v21);
    v25 = *v24;
    v26 = v24[1];
    v27 = v25 == -1 && (_DWORD)v26 == 0;
    if (v27 || (v25 & 0x80000000) != 0 || v11[1] <= (int)v25)
      break;
    if ((_DWORD)v26 != -1 && *(_DWORD *)(*v11 + 12 * (int)v25 + 8) != (_DWORD)v26)
      break;
    v29 = *(__int16 *)(*v11 + 12 * (int)v25 + 6);
    v30 = v25 | (unint64_t)(v26 << 32);
    v31 = sub_1B1DA5684(v30);
    v32 = *(_QWORD *)(*(_QWORD *)(a2 + 80) + 8 * v29 + 32);
    v166 = v14;
    v160 = v30;
    v163 = v20;
    v157 = v31;
    if ((a4 & 1) != 0)
    {
      v33 = *(_BYTE *)(v32 + 212);
      swift_retain();
      if ((v33 & 1) != 0)
      {
        v155 = sub_1B2094F98(v30);
        goto LABEL_36;
      }
    }
    else
    {
      swift_retain();
    }
    v155 = 1;
LABEL_36:
    v34 = *(_QWORD *)(v32 + 128);
    v35 = *(_QWORD *)(v32 + 168);
    v36 = *(_BYTE *)(v32 + 176);
    v37 = *(_QWORD *)(v32 + 184);
    v38 = *(_OWORD *)(v32 + 112);
    v172 = *(_OWORD *)(v32 + 96);
    v173 = v38;
    v174 = v34;
    v175 = *(_OWORD *)(v32 + 136);
    v176 = *(_OWORD *)(v32 + 152);
    v177 = v35;
    v178 = v36;
    v179 = v37;
    v39 = sub_1B1C95414();
    swift_retain();
    v40 = sub_1B1F0A258((uint64_t)v39, a1);
    swift_bridgeObjectRelease();
    swift_release();
    v41 = *(_QWORD *)(*(_QWORD *)(v32 + 16) + 32);
    v42 = v12;
    v43 = (os_unfair_lock_s *)*((_QWORD *)v12 + 3);
    swift_retain();
    os_unfair_lock_lock(v43);
    v44 = sub_1B1DADA68(v41);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v45 = sub_1B1DAD000(v44, v40);
    v47 = v46;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v48 = (_QWORD *)v6[9];
    v49 = v48[2];
    if (v49)
    {
      v50 = v48[4];
      if (*(_QWORD *)(v50 + 144) != v45)
      {
        v55 = v49 - 1;
        if (!v55)
          goto LABEL_45;
        v56 = v48 + 5;
        while (1)
        {
          v50 = *v56;
          if (*(_QWORD *)(*v56 + 144) == v45)
            break;
          ++v56;
          if (!--v55)
            goto LABEL_45;
        }
      }
      v51 = *(_QWORD *)(v50 + 16);
      if (*(_QWORD *)(v51 + 16))
      {
        v52 = sub_1B1DC3AC8(v47);
        if ((v53 & 1) != 0)
        {
          v54 = *(_DWORD *)(*(_QWORD *)(v51 + 56) + 4 * v52);
          goto LABEL_46;
        }
      }
    }
LABEL_45:
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v54 = sub_1B1DA8838(v45, v47, (uint64_t)v44, v40);
    swift_bridgeObjectRelease_n();
LABEL_46:
    swift_bridgeObjectRelease();
    v57 = *(_QWORD *)(v6[10] + 8 * v54 + 32);
    v12 = v42;
    v58 = (os_unfair_lock_s *)*((_QWORD *)v42 + 3);
    swift_retain();
    os_unfair_lock_unlock(v58);
    swift_release();
    swift_bridgeObjectRelease();
    v59 = **(_QWORD **)((char *)v6 + v149);
    swift_retain();
    KeyPath = swift_getKeyPath();
    sub_1B1DAC77C(KeyPath, 1);
    swift_release();
    swift_release();
    swift_retain();
    v61 = swift_getKeyPath();
    sub_1B1DAC77C(v61, 1);
    swift_release();
    swift_release();
    v62 = *(_DWORD *)(v57 + 204);
    if ((*(_BYTE *)(v57 + 208) & 1) != 0)
    {
      v16 = 0;
      LODWORD(v15) = -1;
    }
    else
    {
      swift_retain();
      v15 = sub_1B1DA8E54();
      swift_release();
      v16 = v15 & 0xFFFFFFFF00000000;
    }
    v171 = -1;
    v17 = *(_QWORD *)(v59 + 16);
    swift_retain();
    swift_retain();
    sub_1B1C92338(v62, v148 | ((HIDWORD(a3) & 1) << 32), v157 & 1, v17, (uint64_t *)&v172, v16 | v15, &v171, v57, v59, v62, SHIWORD(v62), v155 & 1);
    swift_release();
    swift_release();
    v18 = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)&v172 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = 0x8000000000000000;
    sub_1B1F8302C(v16 | v15, v160, v18);
    *(_QWORD *)(a1 + 24) = v172;
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    v6 = v170;
    v11 = v154;
    v14 = v166;
    v10 = v163;
  }
LABEL_127:
  sub_1B2229688();
  __break(1u);
LABEL_128:
  result = sub_1B2229FC4();
  __break(1u);
  return result;
}

uint64_t sub_1B1F0807C(uint64_t result, uint64_t a2, int a3, _QWORD *a4, uint64_t a5, uint64_t a6, char **a7, uint64_t *a8)
{
  uint64_t v8;
  Swift::Int v11;
  uint64_t KeyPath;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  signed int v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  signed int v30;
  char v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t *v34;
  int v35;
  char *v36;
  uint64_t *v37;
  uint64_t v38;
  os_unfair_lock_s *v39;
  uint64_t v40;
  char **v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  int v50;
  int v51;
  char *v52;
  _QWORD *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  _QWORD *v66;
  int v67;
  uint64_t v68;
  unsigned int *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  os_unfair_lock_s *v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  _QWORD *v78;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  int v84;
  char *v85;
  char v86;
  char *v87;
  _QWORD *v88;
  size_t v89;
  char *v90;
  char *v91;
  char *v92;
  uint64_t *v93;
  _QWORD *v94;
  int v95;
  uint64_t v96;
  unsigned int *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  os_unfair_lock_s *v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  _QWORD *v106;
  char v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  int v112;
  char *v113;
  char v114;
  char *v115;
  _QWORD *v116;
  size_t v117;
  char *v118;
  char *v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  int v123;
  _QWORD *v124;
  uint64_t v125;
  uint64_t v126;
  _QWORD *v127;
  _QWORD *v128;
  int v129;
  _QWORD *v130;
  uint64_t *v131;
  uint64_t *v132;
  uint64_t v133;
  uint64_t v134;
  _QWORD v135[2];
  uint64_t v136;
  uint64_t v137;
  __int128 v138;
  __int128 v139;
  uint64_t v140;
  _QWORD *v141;
  uint64_t *v142;
  uint64_t v143;
  _QWORD *v144;
  uint64_t v145;
  __int128 v146;
  __int128 v147;
  uint64_t v148;
  _BYTE v149[40];
  uint64_t v150;
  int v151;
  char v152;
  uint64_t v153;
  char v154;
  uint64_t v155;
  uint64_t *v156;

  v156 = a8;
  if (a5 < 1)
    return result;
  v11 = a5;
  v124 = a4;
  LODWORD(v125) = a3;
  v129 = result;
  v134 = v8;
  swift_retain();
  KeyPath = swift_getKeyPath();
  sub_1B1DAC77C(KeyPath, v11);
  swift_release();
  swift_release();
  swift_retain();
  v14 = swift_getKeyPath();
  sub_1B1DAC77C(v14, v11);
  swift_release();
  swift_release();
  v15 = *(_QWORD *)(a6 + 32);
  ecs_stack_allocator_push_snapshot(v15);
  v16 = *(int *)(a2 + 204);
  v126 = 4 * v11;
  v127 = (_QWORD *)v16;
  v17 = ecs_stack_allocator_allocate(v15, 4 * v11, 4);
  v18 = (uint64_t)v17;
  v128 = (_QWORD *)a2;
  v19 = *(_BYTE *)(a2 + 208);
  v133 = a6;
  if ((v19 & 1) == 0)
  {
    v33 = 0;
    v34 = &qword_1ED4B8000;
    v130 = v17;
    v132 = (uint64_t *)v11;
    do
    {
      v38 = *(_QWORD *)(a6 + 16);
      v37 = (uint64_t *)(v38 + v34[191]);
      v39 = (os_unfair_lock_s *)v37[3];
      swift_retain();
      os_unfair_lock_lock(v39);
      ++*(_QWORD *)(v38 + OBJC_IVAR____TtC3VFX13EntityManager_entityCount);
      v40 = OBJC_IVAR____TtC3VFX13EntityManager_firstFreeIndex;
      LODWORD(a6) = *(_DWORD *)(v38 + OBJC_IVAR____TtC3VFX13EntityManager_firstFreeIndex);
      if ((_DWORD)a6 == -1)
      {
        v131 = v37;
        v41 = (char **)(v38 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
        v42 = OBJC_IVAR____TtC3VFX13EntityManager_entityCapacity;
        v43 = *(char **)(v38 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
        a6 = *(_QWORD *)(v38 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8);
        v44 = 2 * *(_QWORD *)(v38 + OBJC_IVAR____TtC3VFX13EntityManager_entityCapacity);
        *(_QWORD *)(v38 + OBJC_IVAR____TtC3VFX13EntityManager_entityCapacity) = v44;
        v45 = (char *)swift_slowAlloc();
        *v41 = v45;
        v41[1] = (char *)v44;
        if (a6 < 0)
          goto LABEL_95;
        if (v45 != v43 || v45 >= &v43[12 * a6])
          memmove(v45, v43, 12 * a6);
        if (v43)
          MEMORY[0x1B5E23F88](v43, -1, -1);
        v47 = *(_QWORD *)(v38 + v42);
        v48 = *v41;
        if ((_DWORD)v47 - 1 != (_DWORD)a6)
        {
          v49 = OBJC_IVAR____TtC3VFX13EntityManager_generationSalt;
          v50 = a6 + 1;
          do
          {
            v51 = *(_DWORD *)(v38 + v49);
            v52 = &v48[12 * v50 - 12];
            *(_DWORD *)v52 = v50;
            *((_DWORD *)v52 + 1) = -1;
            *((_DWORD *)v52 + 2) = v51;
            ++v50;
          }
          while ((_DWORD)v47 != v50);
        }
        v35 = *(_DWORD *)(v38 + OBJC_IVAR____TtC3VFX13EntityManager_generationSalt);
        v36 = &v48[12 * v47];
        *(_QWORD *)(v36 - 12) = -1;
        *((_DWORD *)v36 - 1) = v35;
        *(_DWORD *)(v38 + v40) = a6;
        v18 = (uint64_t)v130;
        v37 = v131;
        v34 = &qword_1ED4B8000;
      }
      *(_DWORD *)(v38 + v40) = *(_DWORD *)(*(_QWORD *)(v38 + OBJC_IVAR____TtC3VFX13EntityManager__entries)
                                         + 12 * (int)a6);
      os_unfair_lock_unlock((os_unfair_lock_t)v37[3]);
      swift_release();
      *(_DWORD *)(v18 + 4 * (_QWORD)v33) = a6;
      v33 = (uint64_t *)((char *)v33 + 1);
      v11 = (Swift::Int)v132;
      a6 = v133;
    }
    while (v33 != v132);
  }
  v20 = (4 * v11) >> 2;
  v137 = 0;
  v21 = v128;
  v22 = v11 / v128[8];
  v23 = (int)v127;
  v24 = v22
      + 2 * *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a6 + 16) + 96) + 40 * (int)v127 + 32) + 16)
      + 1;
  v25 = ecs_stack_allocator_allocate(*(_QWORD *)(a6 + 32), 24 * v24, 8);
  v135[0] = v25;
  v135[1] = v24;
  v136 = 0;
  v26 = *(_QWORD *)(a6 + 16);
  swift_retain();
  v132 = &v121;
  *(_QWORD *)&v138 = 0;
  *((_QWORD *)&v138 + 1) = v20;
  *(_QWORD *)&v139 = v18;
  *((_QWORD *)&v139 + 1) = v20;
  if (v126 < 1)
  {
    swift_release();
    v32 = 0;
  }
  else
  {
    v27 = (unint64_t)v124;
    v28 = v124;
    swift_retain();
    v29 = v28 | ((HIDWORD(v27) & 1) << 32);
    v30 = v23;
    v31 = v125 & 1;
    do
    {
      swift_retain();
      sub_1B1C939A8(v30, v29, v31, v26, (uint64_t *)&v138, (uint64_t)v21, v18, v20, &v137, a6, v30, v135);
      swift_release();
    }
    while ((uint64_t)(*((_QWORD *)&v138 + 1) - v138) > 0);
    swift_release();
    swift_release();
    v32 = v136;
    v25 = (_QWORD *)v135[0];
  }
  v53 = ecs_stack_allocator_allocate(*(_QWORD *)(a6 + 32), 48 * v32, 8);
  v54 = (uint64_t)v53;
  if (!v32)
  {
LABEL_30:
    v62 = v133;
    v63 = *(_QWORD *)(v133 + 16);
    v64 = qword_1ED4B7DB8;
    swift_retain();
    if (v64 != -1)
      swift_once();
    v150 = qword_1ED4D09F8;
    v151 = 0;
    v152 = 2;
    v153 = 0;
    v154 = 2;
    v155 = 0;
    swift_retain();
    sub_1B1BEC74C(v63, v62, (uint64_t)&v150, v54, v32, v32, (uint64_t)&v138);
    swift_release();
    swift_release();
    if ((v129 & 1) != 0)
    {
      if (v145 > 0)
      {
        v131 = v142;
        if (v142)
        {
          v65 = 0;
          v66 = v144;
          v130 = v141;
          v67 = *(unsigned __int8 *)(v143 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
          v126 = (uint64_t)(v144 + 8);
          v127 = v144 + 6;
          v68 = v144[4];
          v129 = v67;
          v128 = v144;
          v124 = v144 + 13;
          v125 = v68;
          while (1)
          {
            v69 = (unsigned int *)&v130[6 * (_QWORD)v65];
            v70 = *v69;
            v71 = v69[1];
            v72 = *((_QWORD *)v69 + 5);
            v132 = v65;
            if (v67)
            {
              v73 = *(os_unfair_lock_s **)(v72 + 376);
              swift_retain();
              os_unfair_lock_lock(v73);
              os_unfair_lock_lock(*(os_unfair_lock_t *)(v72 + 344));
            }
            else
            {
              swift_retain();
            }
            ecs_stack_allocator_push_snapshot(v68);
            sub_1B1A18378((uint64_t)v127, (uint64_t)v149, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
            v74 = v66[4];
            v75 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v72 + 40) + 16) + 32) + 16) + 1;
            swift_retain();
            v66[6] = ecs_stack_allocator_allocate(v74, 48 * v75, 8);
            v66[7] = v75;
            v76 = (_QWORD *)v126;
            *(_QWORD *)(v126 + 8) = 0;
            v76[2] = 0;
            *v76 = 0;
            swift_release();
            if ((_DWORD)v70 != (_DWORD)v71)
              break;
LABEL_41:
            v146 = v138;
            v147 = v139;
            v148 = v140;
            v66 = v128;
            v77 = v134;
            sub_1B1F05D48(v128, (unsigned __int16 **)&v146, (uint64_t)v149);
            v134 = v77;
            v68 = v125;
            if (*(_QWORD *)(v66[13] + 16))
            {
              v78 = (_QWORD *)swift_bridgeObjectRetain();
              sub_1B1F05034(v78, v72);
              swift_bridgeObjectRelease();
              isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
              v80 = v66[13];
              if ((isUniquelyReferenced_nonNull_native & 1) != 0)
              {
                sub_1B1C92670(0, *(_QWORD *)(v80 + 16));
              }
              else
              {
                v88 = (_QWORD *)MEMORY[0x1E0DEE9D8];
                if (*(_QWORD *)(v80 + 24) >= 2uLL)
                {
                  sub_1B1791524(0, (unint64_t *)&qword_1ED4BADE0, (uint64_t (*)(uint64_t))sub_1B1B1F228, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
                  v88 = (_QWORD *)swift_allocObject();
                  v89 = j__malloc_size(v88);
                  v88[2] = 0;
                  v88[3] = 2 * ((uint64_t)(v89 - 32) / 72);
                }
                *v124 = v88;
                swift_bridgeObjectRelease();
              }
              if (*(unsigned __int8 *)(v66[2] + OBJC_IVAR____TtC3VFX13EntityManager_currentState) - 1 >= 2)
              {
                v90 = *(char **)(v72 + 232);
                v91 = *(char **)(v72 + 256);
                if (v90 == v91)
                {
                  v92 = *(char **)(v72 + 240);
                }
                else
                {
                  sub_1B1A1059C(v91, v90);
                  v91 = *(char **)(v72 + 232);
                  v92 = *(char **)(v72 + 240);
                  if (v92 == v91)
                  {
                    v92 = 0;
                    v91 = 0;
                    *(_QWORD *)(v72 + 232) = 0;
                    *(_QWORD *)(v72 + 240) = 0;
                  }
                }
                *(_QWORD *)(v72 + 248) = v92;
                *(_QWORD *)(v72 + 256) = v91;
              }
            }
            ecs_stack_allocator_pop_snapshot(v68);
            v67 = v129;
            if (v129)
            {
              os_unfair_lock_unlock(*(os_unfair_lock_t *)(v72 + 344));
              os_unfair_lock_unlock(*(os_unfair_lock_t *)(v72 + 376));
            }
            swift_release();
            v65 = (uint64_t *)((char *)v132 + 1);
            if ((uint64_t *)((char *)v132 + 1) == v131)
              goto LABEL_89;
          }
          v81 = *v156;
          while (1)
          {
            v82 = swift_retain();
            if ((*(_BYTE *)(v72 + 184) & 1) != 0)
              break;
            v83 = *(_DWORD *)(*(_QWORD *)(v72 + 168) + 4 * v70);
            v84 = *(_DWORD *)(*(_QWORD *)(v82 + OBJC_IVAR____TtC3VFX13EntityManager__entries) + 12 * v83 + 8);
            swift_release();
            v85 = *a7;
            v86 = swift_isUniquelyReferenced_nonNull_native();
            *a7 = v85;
            if ((v86 & 1) == 0)
              v85 = sub_1B1FFEDA4((uint64_t)v85);
            ++v70;
            v87 = &v85[8 * v81];
            *((_DWORD *)v87 + 8) = v83;
            *((_DWORD *)v87 + 9) = v84;
            *a7 = v85;
            v81 = *v156 + 1;
            *v156 = v81;
            if (v71 == v70)
              goto LABEL_41;
          }
LABEL_91:
          LODWORD(v122) = 0;
          v121 = 204;
          sub_1B2229688();
          __break(1u);
          goto LABEL_92;
        }
      }
    }
    else if (v145 > 0)
    {
      v131 = v142;
      if (v142)
      {
        v93 = 0;
        v94 = v144;
        v130 = v141;
        v95 = *(unsigned __int8 *)(v143 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
        v126 = (uint64_t)(v144 + 8);
        v127 = v144 + 6;
        v96 = v144[4];
        v129 = v95;
        v128 = v144;
        v124 = v144 + 13;
        v125 = v96;
        while (1)
        {
          v97 = (unsigned int *)&v130[6 * (_QWORD)v93];
          v98 = *v97;
          v99 = v97[1];
          v100 = *((_QWORD *)v97 + 5);
          v132 = v93;
          if (v95)
          {
            v101 = *(os_unfair_lock_s **)(v100 + 376);
            swift_retain();
            os_unfair_lock_lock(v101);
            os_unfair_lock_lock(*(os_unfair_lock_t *)(v100 + 344));
          }
          else
          {
            swift_retain();
          }
          ecs_stack_allocator_push_snapshot(v96);
          sub_1B1A18378((uint64_t)v127, (uint64_t)v149, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
          v102 = v94[4];
          v103 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v100 + 40) + 16) + 32) + 16) + 1;
          swift_retain();
          v94[6] = ecs_stack_allocator_allocate(v102, 48 * v103, 8);
          v94[7] = v103;
          v104 = (_QWORD *)v126;
          *(_QWORD *)(v126 + 8) = 0;
          v104[2] = 0;
          *v104 = 0;
          swift_release();
          if ((_DWORD)v98 != (_DWORD)v99)
            break;
LABEL_69:
          v146 = v138;
          v147 = v139;
          v148 = v140;
          v94 = v128;
          v105 = v134;
          sub_1B1F05D48(v128, (unsigned __int16 **)&v146, (uint64_t)v149);
          v134 = v105;
          v96 = v125;
          if (*(_QWORD *)(v94[13] + 16))
          {
            v106 = (_QWORD *)swift_bridgeObjectRetain();
            sub_1B1F05034(v106, v100);
            swift_bridgeObjectRelease();
            v107 = swift_isUniquelyReferenced_nonNull_native();
            v108 = v94[13];
            if ((v107 & 1) != 0)
            {
              sub_1B1C92670(0, *(_QWORD *)(v108 + 16));
            }
            else
            {
              v116 = (_QWORD *)MEMORY[0x1E0DEE9D8];
              if (*(_QWORD *)(v108 + 24) >= 2uLL)
              {
                sub_1B1791524(0, (unint64_t *)&qword_1ED4BADE0, (uint64_t (*)(uint64_t))sub_1B1B1F228, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
                v116 = (_QWORD *)swift_allocObject();
                v117 = j__malloc_size(v116);
                v116[2] = 0;
                v116[3] = 2 * ((uint64_t)(v117 - 32) / 72);
              }
              *v124 = v116;
              swift_bridgeObjectRelease();
            }
            if (*(unsigned __int8 *)(v94[2] + OBJC_IVAR____TtC3VFX13EntityManager_currentState) - 1 >= 2)
            {
              v118 = *(char **)(v100 + 232);
              v119 = *(char **)(v100 + 256);
              if (v118 == v119)
              {
                v120 = *(char **)(v100 + 240);
              }
              else
              {
                sub_1B1A1059C(v119, v118);
                v119 = *(char **)(v100 + 232);
                v120 = *(char **)(v100 + 240);
                if (v120 == v119)
                {
                  v120 = 0;
                  v119 = 0;
                  *(_QWORD *)(v100 + 232) = 0;
                  *(_QWORD *)(v100 + 240) = 0;
                }
              }
              *(_QWORD *)(v100 + 248) = v120;
              *(_QWORD *)(v100 + 256) = v119;
            }
          }
          ecs_stack_allocator_pop_snapshot(v96);
          v95 = v129;
          if (v129)
          {
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v100 + 344));
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v100 + 376));
          }
          swift_release();
          v93 = (uint64_t *)((char *)v132 + 1);
          if ((uint64_t *)((char *)v132 + 1) == v131)
            goto LABEL_89;
        }
        v109 = *v156;
        while (1)
        {
          v110 = swift_retain();
          if ((*(_BYTE *)(v100 + 184) & 1) != 0)
            goto LABEL_91;
          v111 = *(_DWORD *)(*(_QWORD *)(v100 + 168) + 4 * v98);
          v112 = *(_DWORD *)(*(_QWORD *)(v110 + OBJC_IVAR____TtC3VFX13EntityManager__entries) + 12 * v111 + 8);
          swift_release();
          v113 = *a7;
          v114 = swift_isUniquelyReferenced_nonNull_native();
          *a7 = v113;
          if ((v114 & 1) == 0)
            v113 = sub_1B1FFEDA4((uint64_t)v113);
          ++v98;
          v115 = &v113[8 * v109];
          *((_DWORD *)v115 + 8) = v111;
          *((_DWORD *)v115 + 9) = v112;
          *a7 = v113;
          v109 = *v156 + 1;
          *v156 = v109;
          if (v99 == v98)
            goto LABEL_69;
        }
      }
    }
LABEL_89:
    sub_1B1D66364((uint64_t)&v138);
    return ecs_stack_allocator_pop_snapshot(*(_QWORD *)(v133 + 32));
  }
  v55 = 0;
  v56 = v25 + 2;
  v57 = v32;
  v58 = v53;
  while (1)
  {
    v59 = *(v56 - 1);
    v60 = *v56;
    v61 = swift_retain();
    if ((v55 & 0x8000000000000000) != 0)
      break;
    if (HIDWORD(v55))
    {
      v123 = 0;
      v122 = 3455;
      LOBYTE(v121) = 2;
      goto LABEL_94;
    }
    *((_DWORD *)v58 + 1) = v60;
    *((_DWORD *)v58 + 2) = v55;
    v55 = v55 - v59 + v60;
    *(_DWORD *)v58 = v59;
    v58[2] = 0;
    v58[3] = 0;
    v58[4] = 0;
    v58[5] = v61;
    v58 += 6;
    v56 += 3;
    if (!--v57)
      goto LABEL_30;
  }
LABEL_92:
  v123 = 0;
  v122 = 3451;
  LOBYTE(v121) = 2;
LABEL_94:
  sub_1B222967C();
  __break(1u);
LABEL_95:
  v123 = 0;
  v122 = 1046;
  LOBYTE(v121) = 2;
  result = sub_1B2229700();
  __break(1u);
  return result;
}

uint64_t sub_1B1F08D20(uint64_t result, uint64_t a2, char a3, unint64_t a4, uint64_t a5, void (*a6)(_QWORD *), uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  Swift::Int v10;
  uint64_t KeyPath;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  int v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  os_unfair_lock_s *v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v46;
  _QWORD *v47;
  size_t v48;
  char *v49;
  char *v50;
  char *v51;
  uint64_t v52;
  int v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  os_unfair_lock_s *v57;
  uint64_t v58;
  uint64_t v59;
  char **v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  char *v64;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  int v69;
  int v70;
  char *v71;
  uint64_t v72;
  _QWORD *v73;
  int v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  os_unfair_lock_s *v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  char v85;
  uint64_t v86;
  _QWORD *v87;
  size_t v88;
  char *v89;
  char *v90;
  char *v91;
  _QWORD *v92;
  _QWORD *v93;
  _QWORD *v94;
  _QWORD *v95;
  uint64_t v97;
  uint64_t v98;
  int v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char v110;
  uint64_t v111;
  int v112;
  uint64_t v113;
  Swift::Int v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _QWORD *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  _QWORD *v125;
  uint64_t v126;
  _QWORD *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  __int128 v131;
  __int128 v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  _QWORD *v137;
  uint64_t v138;
  _OWORD v139[2];
  uint64_t v140;
  _OWORD v141[2];
  uint64_t v142;
  _OWORD v143[2];
  uint64_t v144;
  _BYTE v145[40];
  _QWORD v146[10];
  char v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  _BYTE v151[40];
  _QWORD v152[10];
  char v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  int v158;
  char v159;
  uint64_t v160;
  char v161;
  uint64_t v162;
  uint64_t v163;

  if (a5 < 1)
    return result;
  v10 = a5;
  v110 = result;
  v122 = v8;
  swift_retain();
  KeyPath = swift_getKeyPath();
  sub_1B1DAC77C(KeyPath, v10);
  swift_release();
  swift_release();
  swift_retain();
  v13 = swift_getKeyPath();
  sub_1B1DAC77C(v13, v10);
  swift_release();
  swift_release();
  v14 = *(_QWORD *)(a8 + 32);
  ecs_stack_allocator_push_snapshot(v14);
  v163 = *(unsigned int *)(a2 + 204);
  v102 = 4 * v10;
  v119 = ecs_stack_allocator_allocate(v14, 4 * v10, 4);
  v105 = a2;
  v108 = a8;
  v15 = a8;
  if ((*(_BYTE *)(a2 + 208) & 1) == 0)
  {
    v52 = 0;
    v114 = v10;
    do
    {
      v56 = *(_QWORD *)(v15 + 16);
      v55 = v56 + OBJC_IVAR____TtC3VFX13EntityManager_lock;
      v57 = *(os_unfair_lock_s **)(v56 + OBJC_IVAR____TtC3VFX13EntityManager_lock + 24);
      swift_retain();
      os_unfair_lock_lock(v57);
      ++*(_QWORD *)(v56 + OBJC_IVAR____TtC3VFX13EntityManager_entityCount);
      v58 = OBJC_IVAR____TtC3VFX13EntityManager_firstFreeIndex;
      LODWORD(v59) = *(_DWORD *)(v56 + OBJC_IVAR____TtC3VFX13EntityManager_firstFreeIndex);
      if ((_DWORD)v59 == -1)
      {
        v117 = v55;
        v60 = (char **)(v56 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
        v61 = OBJC_IVAR____TtC3VFX13EntityManager_entityCapacity;
        v62 = *(char **)(v56 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
        v59 = *(_QWORD *)(v56 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8);
        v63 = 2 * *(_QWORD *)(v56 + OBJC_IVAR____TtC3VFX13EntityManager_entityCapacity);
        *(_QWORD *)(v56 + OBJC_IVAR____TtC3VFX13EntityManager_entityCapacity) = v63;
        v64 = (char *)swift_slowAlloc();
        *v60 = v64;
        v60[1] = (char *)v63;
        if (v59 < 0)
          goto LABEL_81;
        if (v64 != v62 || v64 >= &v62[12 * v59])
          memmove(v64, v62, 12 * v59);
        if (v62)
          MEMORY[0x1B5E23F88](v62, -1, -1);
        v66 = *(_QWORD *)(v56 + v61);
        v67 = *v60;
        if ((_DWORD)v66 - 1 != (_DWORD)v59)
        {
          v68 = OBJC_IVAR____TtC3VFX13EntityManager_generationSalt;
          v69 = v59 + 1;
          do
          {
            v70 = *(_DWORD *)(v56 + v68);
            v71 = &v67[12 * v69 - 12];
            *(_DWORD *)v71 = v69;
            *((_DWORD *)v71 + 1) = -1;
            *((_DWORD *)v71 + 2) = v70;
            ++v69;
          }
          while ((_DWORD)v66 != v69);
        }
        v53 = *(_DWORD *)(v56 + OBJC_IVAR____TtC3VFX13EntityManager_generationSalt);
        v54 = &v67[12 * v66];
        *(_QWORD *)(v54 - 12) = -1;
        *((_DWORD *)v54 - 1) = v53;
        *(_DWORD *)(v56 + v58) = v59;
        v15 = v108;
        v10 = v114;
        v55 = v117;
      }
      *(_DWORD *)(v56 + v58) = *(_DWORD *)(*(_QWORD *)(v56 + OBJC_IVAR____TtC3VFX13EntityManager__entries)
                                         + 12 * (int)v59);
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v55 + 24));
      swift_release();
      *((_DWORD *)v119 + v52++) = v59;
    }
    while (v52 != v10);
  }
  v130 = 0;
  v16 = v10 / *(_QWORD *)(v105 + 64)
      + 2 * *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v15 + 16) + 96) + 40 * (int)v163 + 32) + 16)
      + 1;
  v127 = ecs_stack_allocator_allocate(*(_QWORD *)(v15 + 32), 24 * v16, 8);
  v128 = v16;
  v129 = 0;
  v17 = *(_QWORD *)(v15 + 16);
  v18 = swift_retain();
  MEMORY[0x1E0C80A78](v18, v19);
  v123 = 0;
  v124 = (4 * v10) >> 2;
  v125 = v119;
  v126 = v124;
  if (v102 >= 1)
  {
    do
      sub_1B1C93028(v163, a4 | ((HIDWORD(a4) & 1) << 32), a3 & 1, v17, &v123, sub_1B1F0C940);
    while (v124 - v123 > 0);
  }
  swift_release();
  v20 = v129;
  v21 = ecs_stack_allocator_allocate(*(_QWORD *)(v108 + 32), 48 * v129, 8);
  v22 = (uint64_t)v21;
  v23 = v129;
  if (!v129)
  {
LABEL_10:
    v31 = *(_QWORD *)(v108 + 16);
    v32 = qword_1ED4B7DB8;
    swift_retain();
    if (v32 != -1)
      swift_once();
    v157 = qword_1ED4D09F8;
    v158 = 0;
    v159 = 2;
    v160 = 0;
    v161 = 2;
    v162 = 0;
    swift_retain();
    sub_1B1BEC74C(v31, v108, (uint64_t)&v157, v22, v20, v23, (uint64_t)&v131);
    swift_release();
    swift_release();
    if ((v110 & 1) != 0)
    {
      if (v138 >= 1)
      {
        v33 = v135;
        if (v135)
        {
          v106 = v138;
          v34 = v137;
          v103 = v136;
          v35 = *(unsigned __int8 *)(v136 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
          v163 = v137[4];
          v92 = v137 + 13;
          v94 = v137 + 8;
          v97 = (uint64_t)(v137 + 6);
          v36 = (uint64_t *)(v134 + 24);
          v100 = v35;
          do
          {
            v37 = *((unsigned int *)v36 - 6);
            v38 = *((unsigned int *)v36 - 5);
            v39 = *((unsigned int *)v36 - 4);
            v116 = *(v36 - 1);
            v120 = v33;
            v40 = v36[2];
            v111 = v36[1];
            v113 = *v36;
            if (v35)
            {
              v41 = *(os_unfair_lock_s **)(v40 + 376);
              swift_retain();
              os_unfair_lock_lock(v41);
              os_unfair_lock_lock(*(os_unfair_lock_t *)(v40 + 344));
            }
            else
            {
              swift_retain();
            }
            ecs_stack_allocator_push_snapshot(v163);
            sub_1B1A18378(v97, (uint64_t)v145, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
            v42 = v34[4];
            v43 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v40 + 40) + 16) + 32) + 16) + 1;
            swift_retain();
            v34[6] = ecs_stack_allocator_allocate(v42, 48 * v43, 8);
            v34[7] = v43;
            v94[1] = 0;
            v94[2] = 0;
            *v94 = 0;
            swift_release();
            v146[0] = v103;
            v146[1] = v40;
            v146[2] = v34;
            v146[3] = v39;
            v146[4] = (v38 - v37 + v39);
            v146[5] = v106;
            v146[6] = v37;
            v146[7] = v38;
            v146[8] = 0;
            v146[9] = 0;
            v147 = 1;
            v148 = v116;
            v149 = v113;
            v150 = v111;
            a6(v146);
            if (v122)
              goto LABEL_80;
            v139[0] = v131;
            v139[1] = v132;
            v140 = v133;
            sub_1B1F05D48(v34, (unsigned __int16 **)v139, (uint64_t)v145);
            v122 = 0;
            v35 = v100;
            if (*(_QWORD *)(v34[13] + 16))
            {
              v44 = (_QWORD *)swift_bridgeObjectRetain();
              sub_1B1F05034(v44, v40);
              swift_bridgeObjectRelease();
              isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
              v46 = v34[13];
              if ((isUniquelyReferenced_nonNull_native & 1) != 0)
              {
                sub_1B1C92670(0, *(_QWORD *)(v46 + 16));
              }
              else
              {
                v47 = (_QWORD *)MEMORY[0x1E0DEE9D8];
                if (*(_QWORD *)(v46 + 24) >= 2uLL)
                {
                  sub_1B1791524(0, (unint64_t *)&qword_1ED4BADE0, (uint64_t (*)(uint64_t))sub_1B1B1F228, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
                  v47 = (_QWORD *)swift_allocObject();
                  v48 = j__malloc_size(v47);
                  v47[2] = 0;
                  v47[3] = 2 * ((uint64_t)(v48 - 32) / 72);
                }
                *v92 = v47;
                swift_bridgeObjectRelease();
              }
              if (*(unsigned __int8 *)(v34[2] + OBJC_IVAR____TtC3VFX13EntityManager_currentState) - 1 >= 2)
              {
                v49 = *(char **)(v40 + 232);
                v50 = *(char **)(v40 + 256);
                if (v49 == v50)
                {
                  v51 = *(char **)(v40 + 240);
                }
                else
                {
                  sub_1B1A1059C(v50, v49);
                  v50 = *(char **)(v40 + 232);
                  v51 = *(char **)(v40 + 240);
                  if (v51 == v50)
                  {
                    v51 = 0;
                    v50 = 0;
                    *(_QWORD *)(v40 + 232) = 0;
                    *(_QWORD *)(v40 + 240) = 0;
                  }
                }
                *(_QWORD *)(v40 + 248) = v51;
                *(_QWORD *)(v40 + 256) = v50;
              }
            }
            ecs_stack_allocator_pop_snapshot(v163);
            if ((v100 & 1) != 0)
            {
              os_unfair_lock_unlock(*(os_unfair_lock_t *)(v40 + 344));
              os_unfair_lock_unlock(*(os_unfair_lock_t *)(v40 + 376));
            }
            swift_release();
            v36 += 6;
            v33 = v120 - 1;
          }
          while (v120 != 1);
        }
      }
    }
    else if (v138 >= 1)
    {
      v72 = v135;
      if (v135)
      {
        v107 = v138;
        v73 = v137;
        v101 = v136;
        v74 = *(unsigned __int8 *)(v136 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
        v75 = v137[4];
        v93 = v137 + 13;
        v95 = v137 + 8;
        v98 = (uint64_t)(v137 + 6);
        v76 = (uint64_t *)(v134 + 24);
        v112 = v74;
        v104 = v75;
        while (1)
        {
          v115 = v72;
          v78 = *((unsigned int *)v76 - 6);
          v77 = *((unsigned int *)v76 - 5);
          v79 = *((unsigned int *)v76 - 4);
          v163 = *(v76 - 1);
          v80 = v76[2];
          v118 = v76[1];
          v121 = *v76;
          if (v74)
          {
            v81 = *(os_unfair_lock_s **)(v80 + 376);
            swift_retain();
            os_unfair_lock_lock(v81);
            os_unfair_lock_lock(*(os_unfair_lock_t *)(v80 + 344));
          }
          else
          {
            swift_retain();
          }
          ecs_stack_allocator_push_snapshot(v75);
          sub_1B1A18378(v98, (uint64_t)v151, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
          v82 = v73[4];
          v83 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v80 + 40) + 16) + 32) + 16) + 1;
          swift_retain();
          v73[6] = ecs_stack_allocator_allocate(v82, 48 * v83, 8);
          v73[7] = v83;
          v95[1] = 0;
          v95[2] = 0;
          *v95 = 0;
          swift_release();
          v152[0] = v101;
          v152[1] = v80;
          v152[2] = v73;
          v152[3] = v79;
          v152[4] = (v77 - v78 + v79);
          v152[5] = v107;
          v152[6] = v78;
          v152[7] = v77;
          v152[8] = 0;
          v152[9] = 0;
          v153 = 1;
          v154 = v163;
          v155 = v121;
          v156 = v118;
          a6(v152);
          if (v122)
            break;
          v141[0] = v131;
          v141[1] = v132;
          v142 = v133;
          sub_1B1F05D48(v73, (unsigned __int16 **)v141, (uint64_t)v151);
          v122 = 0;
          if (*(_QWORD *)(v73[13] + 16))
          {
            v84 = (_QWORD *)swift_bridgeObjectRetain();
            sub_1B1F05034(v84, v80);
            swift_bridgeObjectRelease();
            v85 = swift_isUniquelyReferenced_nonNull_native();
            v86 = v73[13];
            if ((v85 & 1) != 0)
            {
              sub_1B1C92670(0, *(_QWORD *)(v86 + 16));
            }
            else
            {
              v87 = (_QWORD *)MEMORY[0x1E0DEE9D8];
              if (*(_QWORD *)(v86 + 24) >= 2uLL)
              {
                sub_1B1791524(0, (unint64_t *)&qword_1ED4BADE0, (uint64_t (*)(uint64_t))sub_1B1B1F228, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
                v87 = (_QWORD *)swift_allocObject();
                v88 = j__malloc_size(v87);
                v87[2] = 0;
                v87[3] = 2 * ((uint64_t)(v88 - 32) / 72);
              }
              *v93 = v87;
              swift_bridgeObjectRelease();
            }
            if (*(unsigned __int8 *)(v73[2] + OBJC_IVAR____TtC3VFX13EntityManager_currentState) - 1 >= 2)
            {
              v89 = *(char **)(v80 + 232);
              v90 = *(char **)(v80 + 256);
              if (v89 == v90)
              {
                v91 = *(char **)(v80 + 240);
              }
              else
              {
                sub_1B1A1059C(v90, v89);
                v90 = *(char **)(v80 + 232);
                v91 = *(char **)(v80 + 240);
                if (v91 == v90)
                {
                  v91 = 0;
                  v90 = 0;
                  *(_QWORD *)(v80 + 232) = 0;
                  *(_QWORD *)(v80 + 240) = 0;
                }
              }
              *(_QWORD *)(v80 + 248) = v91;
              *(_QWORD *)(v80 + 256) = v90;
            }
          }
          v75 = v104;
          ecs_stack_allocator_pop_snapshot(v104);
          v74 = v112;
          if ((v112 & 1) != 0)
          {
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v80 + 344));
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v80 + 376));
          }
          swift_release();
          v76 += 6;
          v72 = v115 - 1;
          if (v115 == 1)
            goto LABEL_74;
        }
        v143[0] = v131;
        v143[1] = v132;
        v144 = v133;
        sub_1B1F05D48(v73, (unsigned __int16 **)v143, (uint64_t)v151);
        sub_1B1F03804((char *)v80);
        ecs_stack_allocator_pop_snapshot(v104);
        if (v112)
        {
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v80 + 344));
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v80 + 376));
        }
        sub_1B1D66364((uint64_t)&v131);
        swift_release();
        return ecs_stack_allocator_pop_snapshot(*(_QWORD *)(v108 + 32));
      }
    }
LABEL_74:
    sub_1B1D66364((uint64_t)&v131);
    return ecs_stack_allocator_pop_snapshot(*(_QWORD *)(v108 + 32));
  }
  v24 = 0;
  v25 = v127 + 2;
  v26 = v129;
  v27 = v21;
  while (1)
  {
    v28 = *(v25 - 1);
    v29 = *v25;
    v30 = swift_retain();
    if ((v24 & 0x8000000000000000) != 0 || HIDWORD(v24))
      break;
    *((_DWORD *)v27 + 1) = v29;
    *((_DWORD *)v27 + 2) = v24;
    v24 = v24 - v28 + v29;
    *(_DWORD *)v27 = v28;
    v27[2] = 0;
    v27[3] = 0;
    v27[4] = 0;
    v27[5] = v30;
    v27 += 6;
    v25 += 3;
    if (!--v26)
      goto LABEL_10;
  }
  sub_1B222967C();
  __break(1u);
LABEL_80:
  swift_unexpectedError();
  __break(1u);
LABEL_81:
  result = sub_1B2229700();
  __break(1u);
  return result;
}

uint64_t sub_1B1F099C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t a8, __int16 a9)
{
  char v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;

  v16 = *(_BYTE *)(a4 + 208);
  swift_retain();
  if ((v16 & 1) == 0 && a2 != a3)
  {
    v17 = *a7;
    v18 = a2;
    do
    {
      v19 = *(_DWORD *)(a1 + 188);
      v20 = *(_QWORD *)(*(_QWORD *)(a8 + 16) + OBJC_IVAR____TtC3VFX13EntityManager__entries)
          + 12 * *(int *)(a5 + 4 * v17);
      *(_WORD *)(v20 + 4) = v18;
      *(_DWORD *)v20 = v19;
      *(_WORD *)(v20 + 6) = a9;
      v17 = *a7 + 1;
      *a7 = v17;
      ++v18;
    }
    while (a3 != v18);
  }
  if (*(_BYTE *)(a4 + 212) == 1)
  {
    v21 = *(_QWORD *)(a1 + 192);
    if (v21)
      sub_1B1FE243C(a2, a3, 3, 0, 3, v21, *(_QWORD *)(a1 + 200), *(_QWORD *)(a1 + 208));
    sub_1B1FE2814(*(_QWORD *)(a1 + 40), a1, a2, a3);
  }
  return swift_release();
}

uint64_t sub_1B1F09AE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t a8, __int16 a9, _QWORD *a10)
{
  char v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;

  v17 = *(_BYTE *)(a4 + 208);
  swift_retain();
  if ((v17 & 1) == 0 && a2 != a3)
  {
    v18 = *a7;
    v19 = a2;
    do
    {
      v20 = *(_DWORD *)(a1 + 188);
      v21 = *(_QWORD *)(*(_QWORD *)(a8 + 16) + OBJC_IVAR____TtC3VFX13EntityManager__entries)
          + 12 * *(int *)(a5 + 4 * v18);
      *(_WORD *)(v21 + 4) = v19;
      *(_DWORD *)v21 = v20;
      *(_WORD *)(v21 + 6) = a9;
      v18 = *a7 + 1;
      *a7 = v18;
      ++v19;
    }
    while (a3 != v19);
  }
  if (*(_BYTE *)(a4 + 212) == 1)
  {
    v22 = *(_QWORD *)(a1 + 192);
    if (v22)
      sub_1B1FE243C(a2, a3, 3, 0, 3, v22, *(_QWORD *)(a1 + 200), *(_QWORD *)(a1 + 208));
    sub_1B1FE2814(*(_QWORD *)(a1 + 40), a1, a2, a3);
  }
  v23 = a10[2];
  v24 = (uint64_t *)(*a10 + 24 * v23);
  *v24 = a1;
  v24[1] = a2;
  v24[2] = a3;
  a10[2] = v23 + 1;
  return swift_release();
}

uint64_t sub_1B1F09C24(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t))
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;

  v3 = *(_QWORD *)(a1 + 48);
  v4 = sub_1B1A11FDC((uint64_t)&type metadata for DebugInfoWireframePrimitive);
  if ((v5 & 1) != 0)
    v6 = 0;
  else
    v6 = v4 + 112 * v3;
  v7 = sub_1B1A11FDC((uint64_t)&type metadata for DebugInfoColor);
  if ((v8 & 1) != 0)
    v9 = 0;
  else
    v9 = v7 + 4 * v3;
  return a2(v6, v9);
}

uint64_t sub_1B1F09CBC(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;

  v3 = *(_QWORD *)(a1 + 48);
  v4 = sub_1B1A11FDC((uint64_t)&type metadata for DebugInfoWireframePrimitive);
  if ((v5 & 1) != 0)
    v6 = 0;
  else
    v6 = v4 + 112 * v3;
  v7 = sub_1B1A11FDC((uint64_t)&type metadata for WorldTransform);
  if ((v8 & 1) != 0)
    v9 = 0;
  else
    v9 = v7 + (v3 << 6);
  v10 = sub_1B1A11FDC((uint64_t)&type metadata for Beamed);
  if ((v11 & 1) != 0)
    v12 = 0;
  else
    v12 = v10;
  return a2(v6, v9, v12);
}

uint64_t sub_1B1F09D78(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;

  v3 = *(_QWORD *)(a1 + 48);
  v4 = sub_1B1A11FDC((uint64_t)&type metadata for TextureFileAsset);
  if ((v5 & 1) != 0)
    v6 = 0;
  else
    v6 = v4 + 48 * v3;
  v7 = sub_1B1A11FDC((uint64_t)&type metadata for TextureLoadPolicy);
  if ((v8 & 1) != 0)
    v9 = 0;
  else
    v9 = v7 + 4 * v3;
  v10 = sub_1B1A11FDC((uint64_t)&type metadata for TextureLoadingOptions);
  if ((v11 & 1) != 0)
    v12 = 0;
  else
    v12 = v10 + (v3 << 6);
  return a2(v6, v9, v12);
}

uint64_t sub_1B1F09E40(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;

  v3 = *(_QWORD *)(a1 + 48);
  v4 = sub_1B1A11FDC((uint64_t)&type metadata for DebugInfoWireframePrimitive);
  if ((v5 & 1) != 0)
    v6 = 0;
  else
    v6 = v4 + 112 * v3;
  v7 = sub_1B1A11FDC((uint64_t)&type metadata for DebugInfoColor);
  if ((v8 & 1) != 0)
    v9 = 0;
  else
    v9 = v7 + 4 * v3;
  v10 = sub_1B1A11FDC((uint64_t)&type metadata for WorldTransform);
  if ((v11 & 1) != 0)
    v12 = 0;
  else
    v12 = v10 + (v3 << 6);
  v13 = sub_1B1A11FDC((uint64_t)&type metadata for Beamed);
  if ((v14 & 1) != 0)
    v15 = 0;
  else
    v15 = v13;
  return a2(v6, v9, v12, v15);
}

uint64_t sub_1B1F09F2C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1B1B1F228();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_1B1F09F70(uint64_t a1, uint64_t a2)
{
  _BYTE v3[48];
  _QWORD v4[7];

  v4[6] = *MEMORY[0x1E0C80C00];
  sub_1B1BE90FC(a1, (uint64_t)v3);
  sub_1B1BE90FC(a2, (uint64_t)v4);
  __asm { BR              X10 }
}

BOOL sub_1B1F09FD0()
{
  BOOL v0;
  uint64_t v2;
  _QWORD v3[11];
  char v4;

  sub_1B1BE90FC((uint64_t)v3, (uint64_t)&v2);
  if (v4)
  {
    sub_1B1A04628((uint64_t)v3, (uint64_t (*)(_QWORD))sub_1B1CDB1E0);
    return 0;
  }
  else
  {
    v0 = v2 == v3[6];
    sub_1B1B68F14((uint64_t)v3);
  }
  return v0;
}

uint64_t sub_1B1F0A164(uint64_t a1, uint64_t *a2, int a3, _DWORD *a4, uint64_t a5, uint64_t a6, __int16 a7, char a8)
{
  uint64_t result;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  result = sub_1B1C8EC88(a3);
  *a2 = result;
  a2[1] = v17;
  v18 = *(_DWORD *)(a1 + 188);
  *a4 = v18;
  if ((*(_BYTE *)(a5 + 208) & 1) == 0)
  {
    v19 = *(_QWORD *)(*(_QWORD *)(a6 + 16) + OBJC_IVAR____TtC3VFX13EntityManager__entries) + 12 * a3;
    *(_DWORD *)v19 = v18;
    *(_WORD *)(v19 + 4) = result;
    *(_WORD *)(v19 + 6) = a7;
  }
  if ((a8 & 1) != 0 && *(_BYTE *)(a5 + 212) == 1)
  {
    v20 = *(_QWORD *)(a1 + 192);
    if (v20)
    {
      v21 = *(_QWORD *)(a1 + 208);
      v22 = 8 * (result >> 6);
      *(_QWORD *)(v20 + v22) |= 1 << result;
      *(_QWORD *)(v21 + v22) &= ~(1 << result);
    }
    return sub_1B1FE2568(*(_QWORD *)(a1 + 40), a1, result);
  }
  return result;
}

uint64_t sub_1B1F0A258(uint64_t a1, uint64_t a2)
{
  int64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v10;
  unint64_t v11;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = MEMORY[0x1E0DEE9D8];
  if (v2)
  {
    v16 = MEMORY[0x1E0DEE9D8];
    sub_1B202A198(0, v2, 0);
    v3 = v16;
    v6 = a1 + 32;
    do
    {
      sub_1B19FA198(v6, (uint64_t)&v13);
      v8 = v14;
      v7 = v15;
      sub_1B19FC264((uint64_t)&v13, v14);
      (*(void (**)(uint64_t, _UNKNOWN **, uint64_t))(*(_QWORD *)(v7 + 8) + 96))(a2, &off_1E6376550, v8);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v16 = v3;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_1B202A198(0, *(_QWORD *)(v3 + 16) + 1, 1);
        v3 = v16;
      }
      v11 = *(_QWORD *)(v3 + 16);
      v10 = *(_QWORD *)(v3 + 24);
      if (v11 >= v10 >> 1)
      {
        sub_1B202A198(v10 > 1, v11 + 1, 1);
        v3 = v16;
      }
      *(_QWORD *)(v3 + 16) = v11 + 1;
      sub_1B1A02518(&v13, v3 + 40 * v11 + 32);
      v6 += 40;
      --v2;
    }
    while (v2);
  }
  return v3;
}

uint64_t sub_1B1F0A3A0(uint64_t a1, unint64_t a2, Swift::Int a3, uint64_t a4)
{
  uint64_t KeyPath;
  uint64_t v9;
  uint64_t v10;
  signed int v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  int v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  os_unfair_lock_s *v21;
  os_unfair_lock_s *v22;
  uint64_t v23;
  uint64_t v24;
  char **v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  int v34;
  int v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t result;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  signed int v44;
  uint64_t v45;
  _QWORD *v46;
  Swift::Int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;

  swift_retain();
  KeyPath = swift_getKeyPath();
  sub_1B1DAC77C(KeyPath, a3);
  swift_release();
  swift_release();
  swift_retain();
  v9 = swift_getKeyPath();
  sub_1B1DAC77C(v9, a3);
  swift_release();
  swift_release();
  v10 = *(_QWORD *)(a4 + 32);
  ecs_stack_allocator_push_snapshot(v10);
  v11 = *(_DWORD *)(a1 + 204);
  v12 = ecs_stack_allocator_allocate(v10, 4 * a3, 4);
  v13 = v12;
  if (*(_BYTE *)(a1 + 208) == 1)
  {
    v14 = *(_QWORD *)(a4 + 16);
    swift_retain();
    v49 = 0;
    v50 = (4 * a3) >> 2;
    v51 = v13;
    v52 = v50;
    if (4 * a3 >= 1)
    {
      do
        sub_1B1C8F5CC(v11, a2 | ((HIDWORD(a2) & 1) << 32), 1, v14, &v49);
      while (v50 - v49 > 0);
    }
LABEL_25:
    swift_release();
    return ecs_stack_allocator_pop_snapshot(*(_QWORD *)(a4 + 32));
  }
  v42 = (4 * a3) >> 2;
  v43 = 4 * a3;
  v44 = v11;
  v41 = a2;
  v15 = v12;
  if (!a3)
  {
LABEL_23:
    v53 = 0;
    v37 = *(_QWORD *)(a4 + 16);
    v38 = swift_retain();
    MEMORY[0x1E0C80A78](v38, v39);
    v49 = 0;
    v50 = v42;
    v51 = v15;
    v52 = v42;
    if (v43 >= 1)
    {
      do
        sub_1B1C93028(v44, v41 | ((HIDWORD(v41) & 1) << 32), 1, v37, &v49, sub_1B1F0A7A8);
      while (v50 - v49 > 0);
    }
    goto LABEL_25;
  }
  v16 = 0;
  v46 = v12;
  v47 = a3;
  v45 = a4;
  while (1)
  {
    v20 = *(_QWORD *)(a4 + 16);
    v19 = v20 + OBJC_IVAR____TtC3VFX13EntityManager_lock;
    v24 = a4;
    v21 = *(os_unfair_lock_s **)(v20 + OBJC_IVAR____TtC3VFX13EntityManager_lock + 24);
    swift_retain();
    v22 = v21;
    a4 = v24;
    os_unfair_lock_lock(v22);
    ++*(_QWORD *)(v20 + OBJC_IVAR____TtC3VFX13EntityManager_entityCount);
    v23 = OBJC_IVAR____TtC3VFX13EntityManager_firstFreeIndex;
    LODWORD(v24) = *(_DWORD *)(v20 + OBJC_IVAR____TtC3VFX13EntityManager_firstFreeIndex);
    if ((_DWORD)v24 == -1)
      break;
LABEL_8:
    *(_DWORD *)(v20 + v23) = *(_DWORD *)(*(_QWORD *)(v20 + OBJC_IVAR____TtC3VFX13EntityManager__entries)
                                       + 12 * (int)v24);
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v19 + 24));
    swift_release();
    *((_DWORD *)v15 + v16++) = v24;
    if (v16 == a3)
      goto LABEL_23;
  }
  v48 = v19;
  v25 = (char **)(v20 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
  v26 = OBJC_IVAR____TtC3VFX13EntityManager_entityCapacity;
  v27 = *(char **)(v20 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
  v24 = *(_QWORD *)(v20 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8);
  v28 = 2 * *(_QWORD *)(v20 + OBJC_IVAR____TtC3VFX13EntityManager_entityCapacity);
  *(_QWORD *)(v20 + OBJC_IVAR____TtC3VFX13EntityManager_entityCapacity) = v28;
  v29 = (char *)swift_slowAlloc();
  *v25 = v29;
  v25[1] = (char *)v28;
  if ((v24 & 0x8000000000000000) == 0)
  {
    if (v29 != v27 || v29 >= &v27[12 * v24])
      memmove(v29, v27, 12 * v24);
    if (v27)
      MEMORY[0x1B5E23F88](v27, -1, -1);
    v31 = *(_QWORD *)(v20 + v26);
    v32 = *v25;
    v15 = v46;
    if ((_DWORD)v31 - 1 != (_DWORD)v24)
    {
      v33 = OBJC_IVAR____TtC3VFX13EntityManager_generationSalt;
      v34 = v24 + 1;
      do
      {
        v35 = *(_DWORD *)(v20 + v33);
        v36 = &v32[12 * v34 - 12];
        *(_DWORD *)v36 = v34;
        *((_DWORD *)v36 + 1) = -1;
        *((_DWORD *)v36 + 2) = v35;
        ++v34;
      }
      while ((_DWORD)v31 != v34);
    }
    v17 = *(_DWORD *)(v20 + OBJC_IVAR____TtC3VFX13EntityManager_generationSalt);
    v18 = &v32[12 * v31];
    *(_QWORD *)(v18 - 12) = -1;
    *((_DWORD *)v18 - 1) = v17;
    *(_DWORD *)(v20 + v23) = v24;
    a3 = v47;
    v19 = v48;
    a4 = v45;
    goto LABEL_8;
  }
  result = sub_1B2229700();
  __break(1u);
  return result;
}

uint64_t sub_1B1F0A7A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1F099C8(a1, a2, a3, *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24), *(_QWORD *)(v3 + 32), *(uint64_t **)(v3 + 40), *(_QWORD *)(v3 + 48), *(_DWORD *)(v3 + 56));
}

uint64_t sub_1B1F0A7D8(uint64_t a1, char a2, char a3, unint64_t a4, uint64_t a5, void (*a6)(uint64_t), uint64_t a7)
{
  return sub_1B1F0A810(a1, a2, a3, a4, a5, a6, a7, sub_1B1F02CF8);
}

uint64_t sub_1B1F0A7F4(uint64_t a1, char a2, char a3, unint64_t a4, uint64_t a5, void (*a6)(uint64_t), uint64_t a7)
{
  return sub_1B1F0A810(a1, a2, a3, a4, a5, a6, a7, sub_1B1F02C90);
}

uint64_t sub_1B1F0A810(uint64_t a1, char a2, char a3, unint64_t a4, uint64_t a5, void (*a6)(uint64_t), uint64_t a7, uint64_t (*a8)(uint64_t))
{
  uint64_t KeyPath;
  uint64_t v14;
  signed int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v23[2];
  int v24;

  swift_retain();
  KeyPath = swift_getKeyPath();
  sub_1B1DAC77C(KeyPath, 1);
  swift_release();
  swift_release();
  swift_retain();
  v14 = swift_getKeyPath();
  sub_1B1DAC77C(v14, 1);
  swift_release();
  swift_release();
  v15 = *(_DWORD *)(a1 + 204);
  if ((*(_BYTE *)(a1 + 208) & 1) != 0)
  {
    v16 = 0xFFFFFFFFLL;
  }
  else
  {
    swift_retain();
    v16 = sub_1B1DA8E54();
    swift_release();
  }
  v24 = -1;
  v23[0] = 0;
  v23[1] = 0;
  v17 = *(_QWORD *)(a5 + 16);
  swift_retain();
  swift_retain();
  sub_1B1C92338(v15, a4 | ((HIDWORD(a4) & 1) << 32), a2 & 1, v17, v23, v16, &v24, a1, a5, v15, SHIWORD(v15), a3 & 1);
  swift_release();
  swift_release();
  v18 = v23[0];
  swift_retain();
  v19 = a8(v18);
  a6(v19);
  swift_release();
  return v16;
}

uint64_t sub_1B1F0A9C0(uint64_t a1, char a2, char a3, unint64_t a4, uint64_t a5, char a6, uint64_t a7, unint64_t a8, float a9)
{
  uint64_t KeyPath;
  uint64_t v16;
  signed int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v25;
  int v26;
  _QWORD v27[3];
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  swift_retain();
  KeyPath = swift_getKeyPath();
  swift_retain();
  sub_1B1DAC77C(KeyPath, 1);
  swift_release();
  swift_release();
  swift_retain();
  v16 = swift_getKeyPath();
  sub_1B1DAC77C(v16, 1);
  swift_release();
  swift_release();
  v17 = *(_DWORD *)(a1 + 204);
  if ((*(_BYTE *)(a1 + 208) & 1) != 0)
  {
    v18 = 0xFFFFFFFFLL;
  }
  else
  {
    swift_retain();
    v18 = sub_1B1DA8E54();
    swift_release();
  }
  v26 = -1;
  v25 = 0uLL;
  v19 = *(_QWORD *)(a5 + 16);
  swift_retain();
  swift_retain();
  sub_1B1C92338(v17, a4 | ((HIDWORD(a4) & 1) << 32), a2 & 1, v19, (uint64_t *)&v25, v18, &v26, a1, a5, v17, SHIWORD(v17), a3 & 1);
  swift_release();
  swift_release();
  v20 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a5 + 16) + 136) + 8 * v26 + 32);
  v27[0] = *(_QWORD *)(a5 + 16);
  v27[1] = v20;
  v27[2] = a5;
  v28 = xmmword_1B2244C80;
  v29 = 1;
  v30 = v25;
  v31 = 0;
  v32 = 0;
  v33 = 1;
  v35 = 0;
  v36 = 0;
  v34 = 0;
  swift_retain();
  swift_retain();
  sub_1B21803B8((uint64_t)v27, a6, a7, a8 | ((HIDWORD(a8) & 1) << 32), a9);
  swift_release();
  swift_release_n();
  return v18;
}

uint64_t sub_1B1F0ABE0(uint64_t a1, char a2, char a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t KeyPath;
  uint64_t v13;
  signed int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v21[3];
  int v22;
  _QWORD v23[3];
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  swift_retain();
  KeyPath = swift_getKeyPath();
  swift_retain();
  sub_1B1DAC77C(KeyPath, 1);
  swift_release();
  swift_release();
  swift_retain();
  v13 = swift_getKeyPath();
  sub_1B1DAC77C(v13, 1);
  swift_release();
  swift_release();
  v14 = *(_DWORD *)(a1 + 204);
  if ((*(_BYTE *)(a1 + 208) & 1) != 0)
  {
    v15 = 0xFFFFFFFFLL;
  }
  else
  {
    swift_retain();
    v15 = sub_1B1DA8E54();
    swift_release();
  }
  v22 = -1;
  *(_OWORD *)v21 = 0uLL;
  v16 = *(_QWORD *)(a5 + 16);
  swift_retain();
  swift_retain();
  sub_1B1C92338(v14, a4 | ((HIDWORD(a4) & 1) << 32), a2 & 1, v16, v21, v15, &v22, a1, a5, v14, SHIWORD(v14), a3 & 1);
  swift_release();
  swift_release();
  v17 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a5 + 16) + 136) + 8 * v22 + 32);
  v23[0] = *(_QWORD *)(a5 + 16);
  v23[1] = v17;
  v23[2] = a5;
  v24 = xmmword_1B2244C80;
  v25 = 1;
  v26 = *(_OWORD *)v21;
  v27 = 0;
  v28 = 0;
  v29 = 1;
  v30 = 0;
  v31 = 0;
  v32 = 0;
  swift_retain();
  swift_retain();
  sub_1B2180630((uint64_t)v23, a6, a7);
  swift_release();
  swift_release_n();
  return v15;
}

uint64_t sub_1B1F0ADE4(uint64_t a1, char a2, char a3, unint64_t a4, uint64_t a5, void *a6)
{
  return sub_1B1F0B2D4(a1, a2, a3, a4, a5, a6, (void (*)(_QWORD *, id))sub_1B2180858);
}

uint64_t sub_1B1F0AE00(uint64_t a1, char a2, char a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1B1F10B98(a1, a2, a3, a4, a5, a6, a7, (void (*)(_QWORD *, uint64_t, uint64_t))sub_1B1F09D78);
}

uint64_t sub_1B1F0AE1C(uint64_t a1, char a2, char a3, unint64_t a4, uint64_t a5, char a6, uint64_t a7, unint64_t a8, float a9, uint64_t a10, uint64_t a11)
{
  uint64_t KeyPath;
  uint64_t v17;
  signed int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v27;
  int v28;
  _QWORD v29[3];
  __int128 v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  swift_retain();
  KeyPath = swift_getKeyPath();
  swift_retain();
  swift_bridgeObjectRetain();
  sub_1B1DAC77C(KeyPath, 1);
  swift_release();
  swift_release();
  swift_retain();
  v17 = swift_getKeyPath();
  sub_1B1DAC77C(v17, 1);
  swift_release();
  swift_release();
  v18 = *(_DWORD *)(a1 + 204);
  if ((*(_BYTE *)(a1 + 208) & 1) != 0)
  {
    v19 = 0xFFFFFFFFLL;
  }
  else
  {
    swift_retain();
    v19 = sub_1B1DA8E54();
    swift_release();
  }
  v28 = -1;
  v27 = 0uLL;
  v20 = *(_QWORD *)(a5 + 16);
  swift_retain();
  swift_retain();
  sub_1B1C92338(v18, a4 | ((HIDWORD(a4) & 1) << 32), a2 & 1, v20, (uint64_t *)&v27, v19, &v28, a1, a5, v18, SHIWORD(v18), a3 & 1);
  swift_release();
  swift_release();
  v21 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a5 + 16) + 136) + 8 * v28 + 32);
  v29[0] = *(_QWORD *)(a5 + 16);
  v29[1] = v21;
  v29[2] = a5;
  v30 = xmmword_1B2244C80;
  v31 = 1;
  v32 = v27;
  v33 = 0;
  v34 = 0;
  v35 = 1;
  v37 = 0;
  v38 = 0;
  v36 = 0;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1B2180AB4((uint64_t)v29, a6, a7, a8 | ((HIDWORD(a8) & 1) << 32), a10, a11, a9);
  swift_release();
  swift_release_n();
  swift_bridgeObjectRelease_n();
  return v19;
}

uint64_t sub_1B1F0B068(uint64_t a1, char a2, char a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t KeyPath;
  uint64_t v15;
  signed int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v24[3];
  int v25;
  _QWORD v26[3];
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  swift_retain();
  KeyPath = swift_getKeyPath();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1B1DAC77C(KeyPath, 1);
  swift_release();
  swift_release();
  swift_retain();
  v15 = swift_getKeyPath();
  sub_1B1DAC77C(v15, 1);
  swift_release();
  swift_release();
  v16 = *(_DWORD *)(a1 + 204);
  if ((*(_BYTE *)(a1 + 208) & 1) != 0)
  {
    v17 = 0xFFFFFFFFLL;
  }
  else
  {
    swift_retain();
    v17 = sub_1B1DA8E54();
    swift_release();
  }
  v25 = -1;
  *(_OWORD *)v24 = 0uLL;
  v18 = *(_QWORD *)(a5 + 16);
  swift_retain();
  swift_retain();
  sub_1B1C92338(v16, a4 | ((HIDWORD(a4) & 1) << 32), a2 & 1, v18, v24, v17, &v25, a1, a5, v16, SHIWORD(v16), a3 & 1);
  swift_release();
  swift_release();
  v19 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a5 + 16) + 136) + 8 * v25 + 32);
  v26[0] = *(_QWORD *)(a5 + 16);
  v26[1] = v19;
  v26[2] = a5;
  v27 = xmmword_1B2244C80;
  v28 = 1;
  v29 = *(_OWORD *)v24;
  v30 = 0;
  v31 = 0;
  v32 = 1;
  v33 = 0;
  v34 = 0;
  v35 = 0;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1B2180DC4((uint64_t)v26, a6, a7, a8, a9);
  swift_release();
  swift_release_n();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  return v17;
}

uint64_t sub_1B1F0B2B8(uint64_t a1, char a2, char a3, unint64_t a4, uint64_t a5, void *a6)
{
  return sub_1B1F0B2D4(a1, a2, a3, a4, a5, a6, (void (*)(_QWORD *, id))sub_1B21810BC);
}

uint64_t sub_1B1F0B2D4(uint64_t a1, char a2, char a3, unint64_t a4, uint64_t a5, void *a6, void (*a7)(_QWORD *, id))
{
  uint64_t KeyPath;
  uint64_t v14;
  signed int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  id v21;
  uint64_t v22[3];
  int v23;
  _QWORD v24[3];
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(_QWORD *, id);

  v34 = a7;
  swift_retain();
  KeyPath = swift_getKeyPath();
  v21 = a6;
  sub_1B1DAC77C(KeyPath, 1);
  swift_release();
  swift_release();
  swift_retain();
  v14 = swift_getKeyPath();
  sub_1B1DAC77C(v14, 1);
  swift_release();
  swift_release();
  v15 = *(_DWORD *)(a1 + 204);
  if ((*(_BYTE *)(a1 + 208) & 1) != 0)
  {
    v16 = 0xFFFFFFFFLL;
  }
  else
  {
    swift_retain();
    v16 = sub_1B1DA8E54();
    swift_release();
  }
  v23 = -1;
  *(_OWORD *)v22 = 0uLL;
  v17 = *(_QWORD *)(a5 + 16);
  swift_retain();
  swift_retain();
  sub_1B1C92338(v15, a4 | ((HIDWORD(a4) & 1) << 32), a2 & 1, v17, v22, v16, &v23, a1, a5, v15, SHIWORD(v15), a3 & 1);
  swift_release();
  swift_release();
  v18 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a5 + 16) + 136) + 8 * v23 + 32);
  v24[0] = *(_QWORD *)(a5 + 16);
  v24[1] = v18;
  v24[2] = a5;
  v25 = xmmword_1B2244C80;
  v26 = 1;
  v27 = *(_OWORD *)v22;
  v28 = 0;
  v29 = 0;
  v30 = 1;
  v31 = 0;
  v32 = 0;
  v33 = 0;
  v19 = v21;
  swift_retain();
  v34(v24, v19);
  swift_release();

  return v16;
}

uint64_t sub_1B1F0B4D8(uint64_t a1, char a2, char a3, unint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7)
{
  uint64_t KeyPath;
  uint64_t v13;
  signed int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v21[3];
  int v22;
  _QWORD v23[3];
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  swift_retain();
  KeyPath = swift_getKeyPath();
  sub_1B1A0DC90(a6, a7);
  sub_1B1DAC77C(KeyPath, 1);
  swift_release();
  swift_release();
  swift_retain();
  v13 = swift_getKeyPath();
  sub_1B1DAC77C(v13, 1);
  swift_release();
  swift_release();
  v14 = *(_DWORD *)(a1 + 204);
  if ((*(_BYTE *)(a1 + 208) & 1) != 0)
  {
    v15 = 0xFFFFFFFFLL;
  }
  else
  {
    swift_retain();
    v15 = sub_1B1DA8E54();
    swift_release();
  }
  v22 = -1;
  *(_OWORD *)v21 = 0uLL;
  v16 = *(_QWORD *)(a5 + 16);
  swift_retain();
  swift_retain();
  sub_1B1C92338(v14, a4 | ((HIDWORD(a4) & 1) << 32), a2 & 1, v16, v21, v15, &v22, a1, a5, v14, SHIWORD(v14), a3 & 1);
  swift_release();
  swift_release();
  v17 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a5 + 16) + 136) + 8 * v22 + 32);
  v23[0] = *(_QWORD *)(a5 + 16);
  v23[1] = v17;
  v23[2] = a5;
  v24 = xmmword_1B2244C80;
  v25 = 1;
  v26 = *(_OWORD *)v21;
  v27 = 0;
  v28 = 0;
  v29 = 1;
  v30 = 0;
  v31 = 0;
  v32 = 0;
  swift_retain();
  sub_1B1A0DC90(a6, a7);
  sub_1B21813BC((uint64_t)v23, a6, a7);
  sub_1B1A0DADC(a6, a7);
  swift_release();
  sub_1B1A0DADC(a6, a7);
  return v15;
}

uint64_t sub_1B1F0B6F0(uint64_t a1, char a2, char a3, unint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, float a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  return sub_1B1F0B7C0(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, (void (*)(_QWORD *, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float))sub_1B21816A4);
}

uint64_t sub_1B1F0B724(uint64_t a1, char a2, char a3, unint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, float a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  return sub_1B1F0B7C0(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, (void (*)(_QWORD *, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float))sub_1B2181718);
}

uint64_t sub_1B1F0B758(uint64_t a1, char a2, char a3, unint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, float a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  return sub_1B1F0B7C0(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, (void (*)(_QWORD *, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float))sub_1B2181884);
}

uint64_t sub_1B1F0B78C(uint64_t a1, char a2, char a3, unint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, float a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  return sub_1B1F0B7C0(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, (void (*)(_QWORD *, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float))sub_1B21818F8);
}

uint64_t sub_1B1F0B7C0(uint64_t a1, char a2, char a3, unint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, float a9, uint64_t a10, uint64_t a11, uint64_t a12, void (*a13)(_QWORD *, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float))
{
  uint64_t KeyPath;
  uint64_t v19;
  signed int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v29[3];
  int v30;
  _QWORD v31[3];
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  swift_retain();
  KeyPath = swift_getKeyPath();
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1B1DAC77C(KeyPath, 1);
  swift_release();
  swift_release();
  swift_retain();
  v19 = swift_getKeyPath();
  sub_1B1DAC77C(v19, 1);
  swift_release();
  swift_release();
  v20 = *(_DWORD *)(a1 + 204);
  if ((*(_BYTE *)(a1 + 208) & 1) != 0)
  {
    v21 = 0xFFFFFFFFLL;
  }
  else
  {
    swift_retain();
    v21 = sub_1B1DA8E54();
    swift_release();
  }
  v30 = -1;
  *(_OWORD *)v29 = 0uLL;
  v22 = *(_QWORD *)(a5 + 16);
  swift_retain();
  swift_retain();
  sub_1B1C92338(v20, a4 | ((HIDWORD(a4) & 1) << 32), a2 & 1, v22, v29, v21, &v30, a1, a5, v20, SHIWORD(v20), a3 & 1);
  swift_release();
  swift_release();
  v23 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a5 + 16) + 136) + 8 * v30 + 32);
  v31[0] = *(_QWORD *)(a5 + 16);
  v31[1] = v23;
  v31[2] = a5;
  v32 = xmmword_1B2244C80;
  v33 = 1;
  v34 = *(_OWORD *)v29;
  v35 = 0;
  v36 = 0;
  v37 = 1;
  v38 = 0;
  v39 = 0;
  v40 = 0;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  a13(v31, a6, a7, a8, a10, a11, a12, a9);
  swift_release();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return v21;
}

uint64_t sub_1B1F0BA14(uint64_t a1, char a2, char a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t KeyPath;
  uint64_t v12;
  signed int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v19[3];
  int v20;
  _QWORD v21[3];
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  swift_retain();
  KeyPath = swift_getKeyPath();
  swift_unknownObjectRetain();
  sub_1B1DAC77C(KeyPath, 1);
  swift_release();
  swift_release();
  swift_retain();
  v12 = swift_getKeyPath();
  sub_1B1DAC77C(v12, 1);
  swift_release();
  swift_release();
  v13 = *(_DWORD *)(a1 + 204);
  if ((*(_BYTE *)(a1 + 208) & 1) != 0)
  {
    v14 = 0xFFFFFFFFLL;
  }
  else
  {
    swift_retain();
    v14 = sub_1B1DA8E54();
    swift_release();
  }
  v20 = -1;
  *(_OWORD *)v19 = 0uLL;
  v15 = *(_QWORD *)(a5 + 16);
  swift_retain();
  swift_retain();
  sub_1B1C92338(v13, a4 | ((HIDWORD(a4) & 1) << 32), a2 & 1, v15, v19, v14, &v20, a1, a5, v13, SHIWORD(v13), a3 & 1);
  swift_release();
  swift_release();
  v16 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a5 + 16) + 136) + 8 * v20 + 32);
  v21[0] = *(_QWORD *)(a5 + 16);
  v21[1] = v16;
  v21[2] = a5;
  v22 = xmmword_1B2244C80;
  v23 = 1;
  v24 = *(_OWORD *)v19;
  v25 = 0;
  v26 = 0;
  v27 = 1;
  v28 = 0;
  v29 = 0;
  v30 = 0;
  swift_unknownObjectRetain();
  swift_retain();
  sub_1B2181BD0((uint64_t)v21, a6);
  swift_release();
  swift_unknownObjectRelease_n();
  return v14;
}

uint64_t sub_1B1F0BC10(uint64_t result, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unsigned __int8 a14)
{
  uint64_t v14;
  Swift::Int v16;
  uint64_t KeyPath;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  int v33;
  char *v34;
  uint64_t *v35;
  uint64_t v36;
  os_unfair_lock_s *v37;
  uint64_t v38;
  uint64_t v39;
  Swift::Int v40;
  char **v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  int v50;
  int v51;
  char *v52;
  _QWORD *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  int v67;
  uint64_t v68;
  uint64_t **v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  os_unfair_lock_s *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  _BYTE *v80;
  uint64_t v81;
  _QWORD *v82;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v84;
  _QWORD *v85;
  size_t v86;
  char *v87;
  char *v88;
  char *v89;
  uint64_t v90;
  _QWORD *v91;
  int v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t *v98;
  uint64_t v99;
  os_unfair_lock_s *v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  _BYTE *v104;
  uint64_t v105;
  _QWORD *v106;
  char v107;
  uint64_t v108;
  _QWORD *v109;
  size_t v110;
  char *v111;
  char *v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  int v117;
  _QWORD *v118;
  _BYTE *v119;
  _QWORD *v120;
  _QWORD *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  int v125;
  Swift::Int v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t *v134;
  uint64_t v135;
  _QWORD *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  _QWORD *v140;
  uint64_t v141;
  _QWORD v142[2];
  uint64_t v143;
  uint64_t v144;
  __int128 v145;
  __int128 v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  _QWORD *v151;
  uint64_t v152;
  _OWORD v153[2];
  uint64_t v154;
  _OWORD v155[2];
  uint64_t v156;
  _OWORD v157[2];
  uint64_t v158;
  _BYTE v159[40];
  _QWORD v160[8];
  _BYTE v161[24];
  _QWORD *v162;
  uint64_t *v163;
  uint64_t v164;
  _BYTE v165[40];
  _QWORD v166[8];
  _BYTE v167[24];
  _QWORD *v168;
  uint64_t v169;
  uint64_t *v170;
  uint64_t v171;
  int v172;
  char v173;
  uint64_t v174;
  char v175;
  uint64_t v176;
  uint64_t v177;

  v131 = a7;
  v132 = a8;
  if (a5 >= 1)
  {
    v16 = a5;
    v124 = a4;
    v125 = a3;
    LODWORD(v133) = result;
    v137 = v14;
    swift_retain();
    KeyPath = swift_getKeyPath();
    sub_1B1DAC77C(KeyPath, v16);
    swift_release();
    swift_release();
    swift_retain();
    v19 = swift_getKeyPath();
    sub_1B1DAC77C(v19, v16);
    swift_release();
    swift_release();
    v20 = *(_QWORD *)(a6 + 32);
    ecs_stack_allocator_push_snapshot(v20);
    v177 = *(int *)(a2 + 204);
    v126 = 4 * v16;
    v135 = a6;
    v136 = ecs_stack_allocator_allocate(v20, 4 * v16, 4);
    v127 = a2;
    if ((*(_BYTE *)(a2 + 208) & 1) == 0)
    {
      v31 = 0;
      v32 = &qword_1ED4B8000;
      do
      {
        v36 = *(_QWORD *)(a6 + 16);
        v35 = (uint64_t *)(v36 + v32[191]);
        v37 = (os_unfair_lock_s *)v35[3];
        swift_retain();
        os_unfair_lock_lock(v37);
        ++*(_QWORD *)(v36 + OBJC_IVAR____TtC3VFX13EntityManager_entityCount);
        v38 = OBJC_IVAR____TtC3VFX13EntityManager_firstFreeIndex;
        LODWORD(v39) = *(_DWORD *)(v36 + OBJC_IVAR____TtC3VFX13EntityManager_firstFreeIndex);
        if ((_DWORD)v39 == -1)
        {
          v134 = v35;
          v40 = v16;
          v41 = (char **)(v36 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
          v42 = OBJC_IVAR____TtC3VFX13EntityManager_entityCapacity;
          v43 = *(char **)(v36 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
          v39 = *(_QWORD *)(v36 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8);
          v44 = 2 * *(_QWORD *)(v36 + OBJC_IVAR____TtC3VFX13EntityManager_entityCapacity);
          *(_QWORD *)(v36 + OBJC_IVAR____TtC3VFX13EntityManager_entityCapacity) = v44;
          v45 = (char *)swift_slowAlloc();
          *v41 = v45;
          v41[1] = (char *)v44;
          if (v39 < 0)
            goto LABEL_85;
          if (v45 != v43 || v45 >= &v43[12 * v39])
            memmove(v45, v43, 12 * v39);
          if (v43)
            MEMORY[0x1B5E23F88](v43, -1, -1);
          v16 = v40;
          v47 = *(_QWORD *)(v36 + v42);
          v48 = *v41;
          v32 = &qword_1ED4B8000;
          if ((_DWORD)v47 - 1 != (_DWORD)v39)
          {
            v49 = OBJC_IVAR____TtC3VFX13EntityManager_generationSalt;
            v50 = v39 + 1;
            do
            {
              v51 = *(_DWORD *)(v36 + v49);
              v52 = &v48[12 * v50 - 12];
              *(_DWORD *)v52 = v50;
              *((_DWORD *)v52 + 1) = -1;
              *((_DWORD *)v52 + 2) = v51;
              ++v50;
            }
            while ((_DWORD)v47 != v50);
          }
          v33 = *(_DWORD *)(v36 + OBJC_IVAR____TtC3VFX13EntityManager_generationSalt);
          v34 = &v48[12 * v47];
          *(_QWORD *)(v34 - 12) = -1;
          *((_DWORD *)v34 - 1) = v33;
          *(_DWORD *)(v36 + v38) = v39;
          v35 = v134;
          a6 = v135;
        }
        *(_DWORD *)(v36 + v38) = *(_DWORD *)(*(_QWORD *)(v36 + OBJC_IVAR____TtC3VFX13EntityManager__entries)
                                           + 12 * (int)v39);
        os_unfair_lock_unlock((os_unfair_lock_t)v35[3]);
        swift_release();
        *((_DWORD *)v136 + v31++) = v39;
      }
      while (v31 != v16);
    }
    v130 = a12;
    v128 = a11;
    v129 = a10;
    v21 = (4 * v16) >> 2;
    v144 = 0;
    v22 = v127;
    v23 = v16 / *(_QWORD *)(v127 + 64)
        + 2 * *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a6 + 16) + 96) + 40 * (int)v177 + 32) + 16)
        + 1;
    v24 = ecs_stack_allocator_allocate(*(_QWORD *)(a6 + 32), 24 * v23, 8);
    v142[0] = v24;
    v142[1] = v23;
    v143 = 0;
    v25 = *(_QWORD *)(a6 + 16);
    swift_retain();
    v138 = 0;
    v139 = v21;
    v140 = v136;
    v141 = v21;
    if (v126 < 1)
    {
      swift_release();
      v30 = 0;
    }
    else
    {
      v134 = &v115;
      v26 = v124;
      v27 = v124;
      swift_retain();
      v28 = v125 & 1;
      v29 = (uint64_t)v136;
      do
      {
        swift_retain();
        sub_1B1C939A8(v177, v27 | ((HIDWORD(v26) & 1) << 32), v28, v25, &v138, v22, v29, v21, &v144, a6, v177, v142);
        swift_release();
      }
      while (v139 - v138 > 0);
      swift_release();
      swift_release();
      v30 = v143;
      v24 = (_QWORD *)v142[0];
    }
    v53 = ecs_stack_allocator_allocate(*(_QWORD *)(a6 + 32), 48 * v30, 8);
    v54 = (uint64_t)v53;
    if (v30)
    {
      v55 = 0;
      v56 = v24 + 2;
      v57 = v30;
      v58 = v53;
      while (1)
      {
        v59 = *(v56 - 1);
        v60 = *v56;
        v61 = swift_retain();
        if ((v55 & 0x8000000000000000) != 0)
        {
          swift_release();
          swift_release();
          swift_release();
          sub_1B1B4F21C(v130);
          v117 = 0;
          v116 = 3451;
          LOBYTE(v115) = 2;
          goto LABEL_84;
        }
        if (HIDWORD(v55))
          break;
        *((_DWORD *)v58 + 1) = v60;
        *((_DWORD *)v58 + 2) = v55;
        v55 = v55 - v59 + v60;
        *(_DWORD *)v58 = v59;
        v58[2] = 0;
        v58[3] = 0;
        v58[4] = 0;
        v58[5] = v61;
        v58 += 6;
        v56 += 3;
        if (!--v57)
          goto LABEL_30;
      }
      swift_release();
      swift_release();
      swift_release();
      sub_1B1B4F21C(v130);
      v117 = 0;
      v116 = 3455;
      LOBYTE(v115) = 2;
LABEL_84:
      sub_1B222967C();
      __break(1u);
LABEL_85:
      v117 = 0;
      v116 = 1046;
      LOBYTE(v115) = 2;
      sub_1B2229700();
      __break(1u);
      goto LABEL_86;
    }
LABEL_30:
    v127 = a13;
    v126 = a9;
    v62 = v135;
    v63 = *(_QWORD *)(v135 + 16);
    v64 = qword_1ED4B7DB8;
    swift_retain();
    if (v64 != -1)
      swift_once();
    v125 = a14;
    v171 = qword_1ED4D09F8;
    v172 = 0;
    v173 = 2;
    v174 = 0;
    v175 = 2;
    v176 = 0;
    swift_retain();
    sub_1B1BEC74C(v63, v62, (uint64_t)&v171, v54, v30, v30, (uint64_t)&v145);
    swift_release();
    swift_release();
    v124 = v152;
    if ((v133 & 1) != 0)
    {
      if (v152 > 0)
      {
        v65 = v149;
        if (v149)
        {
          v66 = v151;
          v123 = v150;
          v67 = *(unsigned __int8 *)(v150 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
          v68 = v151[4];
          v118 = v151 + 13;
          v120 = v151 + 8;
          v121 = v151 + 6;
          v119 = v161;
          v69 = (uint64_t **)(v148 + 24);
          LODWORD(v122) = v67;
          while (1)
          {
            v177 = v65;
            v70 = *((unsigned int *)v69 - 6);
            v71 = *((unsigned int *)v69 - 5);
            v72 = *((unsigned int *)v69 - 4);
            v136 = *(v69 - 1);
            v73 = *v69;
            v74 = (uint64_t)v69[2];
            v133 = (uint64_t)v69[1];
            v134 = v73;
            if (v67)
            {
              v75 = *(os_unfair_lock_s **)(v74 + 376);
              swift_retain();
              os_unfair_lock_lock(v75);
              os_unfair_lock_lock(*(os_unfair_lock_t *)(v74 + 344));
            }
            else
            {
              swift_retain();
            }
            v76 = v68;
            ecs_stack_allocator_push_snapshot(v68);
            sub_1B1A18378((uint64_t)v121, (uint64_t)v159, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
            v77 = v66[4];
            v78 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v74 + 40) + 16) + 32) + 16) + 1;
            swift_retain();
            v66[6] = ecs_stack_allocator_allocate(v77, 48 * v78, 8);
            v66[7] = v78;
            v79 = v120;
            v120[1] = 0;
            v79[2] = 0;
            *v79 = 0;
            swift_release();
            v160[0] = v123;
            v160[1] = v74;
            v160[2] = v66;
            v160[3] = v72;
            v160[4] = (v71 - v70 + v72);
            v160[5] = v124;
            v160[6] = v70;
            v160[7] = v71;
            v80 = v119;
            *(_QWORD *)v119 = 0;
            *((_QWORD *)v80 + 1) = 0;
            v161[16] = 1;
            v81 = v137;
            v162 = v136;
            v163 = v134;
            v164 = v133;
            sub_1B1D2D5D0((uint64_t)v160, v131, v132, v126, v129, v128, v130, v127, v125 & 1);
            if (v81)
              break;
            v153[0] = v145;
            v153[1] = v146;
            v154 = v147;
            sub_1B1F05D48(v66, (unsigned __int16 **)v153, (uint64_t)v159);
            v137 = 0;
            v62 = v135;
            v68 = v76;
            if (*(_QWORD *)(v66[13] + 16))
            {
              v82 = (_QWORD *)swift_bridgeObjectRetain();
              sub_1B1F05034(v82, v74);
              swift_bridgeObjectRelease();
              isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
              v84 = v66[13];
              if ((isUniquelyReferenced_nonNull_native & 1) != 0)
              {
                sub_1B1C92670(0, *(_QWORD *)(v84 + 16));
              }
              else
              {
                v85 = (_QWORD *)MEMORY[0x1E0DEE9D8];
                if (*(_QWORD *)(v84 + 24) >= 2uLL)
                {
                  sub_1B1791524(0, (unint64_t *)&qword_1ED4BADE0, (uint64_t (*)(uint64_t))sub_1B1B1F228, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
                  v85 = (_QWORD *)swift_allocObject();
                  v86 = j__malloc_size(v85);
                  v85[2] = 0;
                  v85[3] = 2 * ((uint64_t)(v86 - 32) / 72);
                }
                *v118 = v85;
                swift_bridgeObjectRelease();
              }
              if (*(unsigned __int8 *)(v66[2] + OBJC_IVAR____TtC3VFX13EntityManager_currentState) - 1 >= 2)
              {
                v87 = *(char **)(v74 + 232);
                v88 = *(char **)(v74 + 256);
                if (v87 == v88)
                {
                  v89 = *(char **)(v74 + 240);
                }
                else
                {
                  sub_1B1A1059C(v88, v87);
                  v88 = *(char **)(v74 + 232);
                  v89 = *(char **)(v74 + 240);
                  if (v89 == v88)
                  {
                    v89 = 0;
                    v88 = 0;
                    *(_QWORD *)(v74 + 232) = 0;
                    *(_QWORD *)(v74 + 240) = 0;
                  }
                }
                *(_QWORD *)(v74 + 248) = v89;
                *(_QWORD *)(v74 + 256) = v88;
              }
            }
            ecs_stack_allocator_pop_snapshot(v76);
            v67 = v122;
            if ((_DWORD)v122)
            {
              os_unfair_lock_unlock(*(os_unfair_lock_t *)(v74 + 344));
              os_unfair_lock_unlock(*(os_unfair_lock_t *)(v74 + 376));
            }
            swift_release();
            v69 += 6;
            v65 = v177 - 1;
            if (v177 == 1)
              goto LABEL_77;
          }
LABEL_86:
          result = swift_unexpectedError();
          __break(1u);
          return result;
        }
      }
      goto LABEL_77;
    }
    if (v152 <= 0 || (v90 = v149) == 0)
    {
LABEL_77:
      sub_1B1D66364((uint64_t)&v145);
      return ecs_stack_allocator_pop_snapshot(*(_QWORD *)(v62 + 32));
    }
    v91 = v151;
    v122 = v150;
    v92 = *(unsigned __int8 *)(v150 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
    v177 = v151[4];
    v118 = v151 + 13;
    v120 = v151 + 8;
    v121 = v151 + 6;
    v119 = v167;
    v93 = (uint64_t *)(v148 + 24);
    LODWORD(v123) = v92;
    while (1)
    {
      v94 = *((unsigned int *)v93 - 6);
      v95 = *((unsigned int *)v93 - 5);
      v96 = *((unsigned int *)v93 - 4);
      v97 = *v93;
      v136 = (_QWORD *)*(v93 - 1);
      v98 = (uint64_t *)v93[1];
      v99 = v93[2];
      v133 = v90;
      v134 = v98;
      if (v92)
      {
        v100 = *(os_unfair_lock_s **)(v99 + 376);
        swift_retain();
        os_unfair_lock_lock(v100);
        os_unfair_lock_lock(*(os_unfair_lock_t *)(v99 + 344));
      }
      else
      {
        swift_retain();
      }
      ecs_stack_allocator_push_snapshot(v177);
      sub_1B1A18378((uint64_t)v121, (uint64_t)v165, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
      v101 = v91[4];
      v102 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v99 + 40) + 16) + 32) + 16) + 1;
      swift_retain();
      v91[6] = ecs_stack_allocator_allocate(v101, 48 * v102, 8);
      v91[7] = v102;
      v103 = v120;
      v120[1] = 0;
      v103[2] = 0;
      *v103 = 0;
      swift_release();
      v166[0] = v122;
      v166[1] = v99;
      v166[2] = v91;
      v166[3] = v96;
      v166[4] = (v95 - v94 + v96);
      v166[5] = v124;
      v166[6] = v94;
      v166[7] = v95;
      v104 = v119;
      *(_QWORD *)v119 = 0;
      *((_QWORD *)v104 + 1) = 0;
      v167[16] = 1;
      v105 = v137;
      v168 = v136;
      v169 = v97;
      v170 = v134;
      sub_1B1D2D5D0((uint64_t)v166, v131, v132, v126, v129, v128, v130, v127, v125 & 1);
      if (v105)
        break;
      v155[0] = v145;
      v155[1] = v146;
      v156 = v147;
      sub_1B1F05D48(v91, (unsigned __int16 **)v155, (uint64_t)v165);
      v137 = 0;
      v62 = v135;
      if (*(_QWORD *)(v91[13] + 16))
      {
        v106 = (_QWORD *)swift_bridgeObjectRetain();
        sub_1B1F05034(v106, v99);
        swift_bridgeObjectRelease();
        v107 = swift_isUniquelyReferenced_nonNull_native();
        v108 = v91[13];
        if ((v107 & 1) != 0)
        {
          sub_1B1C92670(0, *(_QWORD *)(v108 + 16));
        }
        else
        {
          v109 = (_QWORD *)MEMORY[0x1E0DEE9D8];
          if (*(_QWORD *)(v108 + 24) >= 2uLL)
          {
            sub_1B1791524(0, (unint64_t *)&qword_1ED4BADE0, (uint64_t (*)(uint64_t))sub_1B1B1F228, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
            v109 = (_QWORD *)swift_allocObject();
            v110 = j__malloc_size(v109);
            v109[2] = 0;
            v109[3] = 2 * ((uint64_t)(v110 - 32) / 72);
          }
          *v118 = v109;
          swift_bridgeObjectRelease();
        }
        if (*(unsigned __int8 *)(v91[2] + OBJC_IVAR____TtC3VFX13EntityManager_currentState) - 1 >= 2)
        {
          v111 = *(char **)(v99 + 232);
          v112 = *(char **)(v99 + 256);
          if (v111 == v112)
          {
            v113 = *(char **)(v99 + 240);
          }
          else
          {
            sub_1B1A1059C(v112, v111);
            v112 = *(char **)(v99 + 232);
            v113 = *(char **)(v99 + 240);
            if (v113 == v112)
            {
              v113 = 0;
              v112 = 0;
              *(_QWORD *)(v99 + 232) = 0;
              *(_QWORD *)(v99 + 240) = 0;
            }
          }
          *(_QWORD *)(v99 + 248) = v113;
          *(_QWORD *)(v99 + 256) = v112;
        }
      }
      ecs_stack_allocator_pop_snapshot(v177);
      v92 = v123;
      if ((_DWORD)v123)
      {
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v99 + 344));
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v99 + 376));
      }
      swift_release();
      v93 += 6;
      v90 = v133 - 1;
      if (v133 == 1)
        goto LABEL_77;
    }
    v157[0] = v145;
    v157[1] = v146;
    v158 = v147;
    sub_1B1F05D48(v91, (unsigned __int16 **)v157, (uint64_t)v165);
    sub_1B1F03804((char *)v99);
    ecs_stack_allocator_pop_snapshot(v177);
    v114 = v135;
    if ((v123 & 1) != 0)
    {
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v99 + 344));
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v99 + 376));
    }
    sub_1B1D66364((uint64_t)&v145);
    swift_release();
    return ecs_stack_allocator_pop_snapshot(*(_QWORD *)(v114 + 32));
  }
  return result;
}

uint64_t sub_1B1F0C940(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1F09AE4(a1, a2, a3, *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24), *(_QWORD *)(v3 + 32), *(uint64_t **)(v3 + 40), *(_QWORD *)(v3 + 48), *(_DWORD *)(v3 + 56), *(_QWORD **)(v3 + 64));
}

uint64_t sub_1B1F0C978(uint64_t result, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, _QWORD *a11, unsigned __int8 a12)
{
  uint64_t v12;
  Swift::Int v14;
  uint64_t KeyPath;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  os_unfair_lock_s *v38;
  uint64_t v39;
  uint64_t v40;
  char **v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  int v50;
  int v51;
  char *v52;
  _QWORD *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  int v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  os_unfair_lock_s *v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  char v84;
  uint64_t v85;
  unsigned int v86;
  int8x16_t v87;
  int8x16_t v88;
  int8x16_t v89;
  int8x16_t *v90;
  uint64_t v91;
  _QWORD *v92;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v94;
  _QWORD *v95;
  size_t v96;
  char *v97;
  char *v98;
  char *v99;
  uint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  int v103;
  uint64_t *v104;
  uint64_t v105;
  uint64_t *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  os_unfair_lock_s *v110;
  uint64_t v111;
  uint64_t v112;
  _QWORD *v113;
  uint64_t v114;
  uint64_t v115;
  _QWORD *v116;
  uint64_t v117;
  uint64_t v118;
  char v119;
  uint64_t v120;
  unsigned int v121;
  int8x16_t v122;
  int8x16_t v123;
  int8x16_t v124;
  int8x16_t *v125;
  uint64_t v126;
  _QWORD *v127;
  char v128;
  uint64_t v129;
  _QWORD *v130;
  size_t v131;
  char *v132;
  char *v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  int v137;
  int8x16_t v138;
  int8x16_t v139;
  _QWORD *v140;
  _QWORD *v141;
  _QWORD *v142;
  unint64_t v143;
  _QWORD *v144;
  int v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t *v153;
  _QWORD *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  _QWORD v159[2];
  uint64_t v160;
  uint64_t v161;
  __int128 v162;
  __int128 v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  _QWORD *v168;
  uint64_t v169;
  _BYTE v170[48];
  int8x16_t v171;
  int8x16_t v172;
  char v173;
  __int128 v174;
  __int128 v175;
  uint64_t v176;
  _BYTE v177[40];
  uint64_t v178;
  uint64_t v179;
  _QWORD *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  _BYTE v186[16];
  char v187;
  uint64_t *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  int v192;
  char v193;
  uint64_t v194;
  char v195;
  uint64_t v196;
  uint64_t v197;

  v148 = a8;
  v156 = a7;
  if (a5 >= 1)
  {
    v14 = a5;
    v147 = a4;
    LODWORD(v149) = a3;
    LODWORD(v151) = result;
    v197 = v12;
    swift_retain();
    KeyPath = swift_getKeyPath();
    sub_1B1DAC77C(KeyPath, v14);
    swift_release();
    swift_release();
    swift_retain();
    v17 = swift_getKeyPath();
    sub_1B1DAC77C(v17, v14);
    swift_release();
    swift_release();
    v18 = *(_QWORD *)(a6 + 32);
    ecs_stack_allocator_push_snapshot(v18);
    v158 = *(int *)(a2 + 204);
    v150 = 4 * v14;
    v19 = ecs_stack_allocator_allocate(v18, 4 * v14, 4);
    v20 = v19;
    v152 = a2;
    v21 = *(_BYTE *)(a2 + 208);
    v157 = a6;
    if ((v21 & 1) == 0)
    {
      v33 = 0;
      v153 = (uint64_t *)v14;
      v154 = v19;
      do
      {
        v37 = *(_QWORD *)(a6 + 16);
        v36 = v37 + OBJC_IVAR____TtC3VFX13EntityManager_lock;
        v38 = *(os_unfair_lock_s **)(v37 + OBJC_IVAR____TtC3VFX13EntityManager_lock + 24);
        swift_retain();
        os_unfair_lock_lock(v38);
        ++*(_QWORD *)(v37 + OBJC_IVAR____TtC3VFX13EntityManager_entityCount);
        v39 = OBJC_IVAR____TtC3VFX13EntityManager_firstFreeIndex;
        LODWORD(v40) = *(_DWORD *)(v37 + OBJC_IVAR____TtC3VFX13EntityManager_firstFreeIndex);
        if ((_DWORD)v40 == -1)
        {
          v155 = v36;
          v41 = (char **)(v37 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
          v42 = OBJC_IVAR____TtC3VFX13EntityManager_entityCapacity;
          v43 = *(char **)(v37 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
          v40 = *(_QWORD *)(v37 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8);
          v44 = 2 * *(_QWORD *)(v37 + OBJC_IVAR____TtC3VFX13EntityManager_entityCapacity);
          *(_QWORD *)(v37 + OBJC_IVAR____TtC3VFX13EntityManager_entityCapacity) = v44;
          v45 = (char *)swift_slowAlloc();
          *v41 = v45;
          v41[1] = (char *)v44;
          if (v40 < 0)
            goto LABEL_90;
          if (v45 != v43 || v45 >= &v43[12 * v40])
            memmove(v45, v43, 12 * v40);
          if (v43)
            MEMORY[0x1B5E23F88](v43, -1, -1);
          v47 = *(_QWORD *)(v37 + v42);
          v48 = *v41;
          if ((_DWORD)v47 - 1 != (_DWORD)v40)
          {
            v49 = OBJC_IVAR____TtC3VFX13EntityManager_generationSalt;
            v50 = v40 + 1;
            do
            {
              v51 = *(_DWORD *)(v37 + v49);
              v52 = &v48[12 * v50 - 12];
              *(_DWORD *)v52 = v50;
              *((_DWORD *)v52 + 1) = -1;
              *((_DWORD *)v52 + 2) = v51;
              ++v50;
            }
            while ((_DWORD)v47 != v50);
          }
          v34 = *(_DWORD *)(v37 + OBJC_IVAR____TtC3VFX13EntityManager_generationSalt);
          v35 = &v48[12 * v47];
          *(_QWORD *)(v35 - 12) = -1;
          *((_DWORD *)v35 - 1) = v34;
          *(_DWORD *)(v37 + v39) = v40;
          v14 = (Swift::Int)v153;
          v20 = v154;
          v36 = v155;
        }
        *(_DWORD *)(v37 + v39) = *(_DWORD *)(*(_QWORD *)(v37 + OBJC_IVAR____TtC3VFX13EntityManager__entries)
                                           + 12 * (int)v40);
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v36 + 24));
        swift_release();
        *((_DWORD *)v20 + v33++) = v40;
        a6 = v157;
      }
      while (v33 != v14);
    }
    v155 = a10;
    v161 = 0;
    v22 = v152;
    v23 = v14 / *(_QWORD *)(v152 + 64)
        + 2 * *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a6 + 16) + 96) + 40 * (int)v158 + 32) + 16)
        + 1;
    v24 = ecs_stack_allocator_allocate(*(_QWORD *)(a6 + 32), 24 * v23, 8);
    v159[0] = v24;
    v159[1] = v23;
    v160 = 0;
    v25 = *(_QWORD *)(a6 + 16);
    swift_retain();
    v178 = 0;
    v179 = (4 * v14) >> 2;
    v180 = v20;
    v181 = v179;
    if (v150 < 1)
    {
      swift_release();
      v32 = 0;
    }
    else
    {
      v153 = &v135;
      v26 = v147;
      v27 = v147;
      swift_retain();
      v28 = v27 | ((HIDWORD(v26) & 1) << 32);
      v29 = (uint64_t)v20;
      v30 = v149 & 1;
      v31 = v157;
      do
      {
        swift_retain();
        sub_1B1C939A8(v158, v28, v30, v25, &v178, v22, v29, (4 * v14) >> 2, &v161, v31, v158, v159);
        swift_release();
      }
      while (v179 - v178 > 0);
      swift_release();
      swift_release();
      v32 = v160;
      v24 = (_QWORD *)v159[0];
    }
    v158 = a9;
    v53 = ecs_stack_allocator_allocate(*(_QWORD *)(v157 + 32), 48 * v32, 8);
    v54 = (uint64_t)v53;
    if (v32)
    {
      v55 = 0;
      v56 = v24 + 2;
      v57 = v32;
      v58 = v53;
      while (1)
      {
        v59 = *(v56 - 1);
        v60 = *v56;
        v61 = swift_retain();
        if ((v55 & 0x8000000000000000) != 0)
        {
          swift_release();
          sub_1B1B4F21C(v148);
          swift_release();
          swift_release();
          v137 = 0;
          v136 = 3451;
          LOBYTE(v135) = 2;
          goto LABEL_89;
        }
        if (HIDWORD(v55))
          break;
        *((_DWORD *)v58 + 1) = v60;
        *((_DWORD *)v58 + 2) = v55;
        v55 = v55 - v59 + v60;
        *(_DWORD *)v58 = v59;
        v58[2] = 0;
        v58[3] = 0;
        v58[4] = 0;
        v58[5] = v61;
        v58 += 6;
        v56 += 3;
        if (!--v57)
          goto LABEL_30;
      }
      swift_release();
      sub_1B1B4F21C(v148);
      swift_release();
      swift_release();
      v137 = 0;
      v136 = 3455;
      LOBYTE(v135) = 2;
LABEL_89:
      sub_1B222967C();
      __break(1u);
LABEL_90:
      v137 = 0;
      v136 = 1046;
      LOBYTE(v135) = 2;
      result = sub_1B2229700();
      __break(1u);
    }
    else
    {
LABEL_30:
      v154 = a11;
      v62 = v157;
      v63 = *(_QWORD *)(v157 + 16);
      v64 = qword_1ED4B7DB8;
      swift_retain();
      if (v64 != -1)
        swift_once();
      LODWORD(v153) = a12;
      v191 = qword_1ED4D09F8;
      v192 = 0;
      v193 = 2;
      v194 = 0;
      v195 = 2;
      v196 = 0;
      swift_retain();
      sub_1B1BEC74C(v63, v62, (uint64_t)&v191, v54, v32, v32, (uint64_t)&v162);
      swift_release();
      swift_release();
      v152 = v169;
      if ((v151 & 1) != 0)
      {
        if (v169 > 0)
        {
          v65 = v166;
          if (v166)
          {
            v66 = v168;
            v67 = v168[4];
            v147 = v167;
            v68 = *(unsigned __int8 *)(v167 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
            v140 = v168 + 13;
            v143 = *(_QWORD *)(v148 + 32);
            v144 = v168 + 6;
            v174 = v162;
            v175 = v163;
            v142 = v168 + 8;
            v141 = v186;
            v69 = (uint64_t *)(v165 + 24);
            v176 = v164;
            v139 = (int8x16_t)xmmword_1B2244E20;
            v138 = (int8x16_t)xmmword_1B226DDC0;
            v145 = v68;
            v146 = v67;
            do
            {
              v150 = *((unsigned int *)v69 - 6);
              v151 = v65;
              v70 = *((unsigned int *)v69 - 4);
              v149 = *((unsigned int *)v69 - 5);
              v71 = (uint64_t *)*(v69 - 1);
              v72 = *v69;
              v74 = v69[1];
              v73 = v69[2];
              if (v68)
              {
                v75 = *(os_unfair_lock_s **)(v73 + 376);
                swift_retain();
                os_unfair_lock_lock(v75);
                os_unfair_lock_lock(*(os_unfair_lock_t *)(v73 + 344));
              }
              else
              {
                swift_retain();
              }
              ecs_stack_allocator_push_snapshot(v67);
              sub_1B1A18378((uint64_t)v144, (uint64_t)v177, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
              v76 = v66[4];
              v77 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v73 + 40) + 16) + 32) + 16) + 1;
              swift_retain();
              v66[6] = ecs_stack_allocator_allocate(v76, 48 * v77, 8);
              v66[7] = v77;
              v78 = v142;
              v142[1] = 0;
              v78[2] = 0;
              *v78 = 0;
              swift_release();
              v79 = (v149 - v150 + v70);
              v178 = v147;
              v179 = v73;
              v180 = v66;
              v181 = v70;
              v80 = v150;
              v182 = v79;
              v183 = v152;
              v184 = v150;
              v185 = v149;
              v81 = v141;
              *v141 = 0;
              v81[1] = 0;
              v187 = 1;
              v188 = v71;
              v189 = v72;
              v190 = v74;
              v82 = sub_1B1A12038((uint64_t)&type metadata for DrawCallComponent, (uint64_t)&off_1E638BEB8, v71, v72, v74, (uint64_t)v66);
              v83 = sub_1B1A12038((uint64_t)&type metadata for WorldAABB, (uint64_t)&off_1E63C5FC8, v71, v72, v74, (uint64_t)v66);
              if ((v84 & 1) == 0)
              {
                v85 = v83;
                sub_1B1D15DF4(*(_QWORD *)(v148 + 32), (uint64_t)v170);
                sub_1B1A18378((uint64_t)v170, (uint64_t)&v171, &qword_1ED4BA220, (uint64_t)&type metadata for WorldAABB);
                if (v173)
                  v86 = -1;
                else
                  v86 = 0;
                v87 = (int8x16_t)vdupq_n_s32(v86);
                v88 = vbslq_s8(v87, v139, v171);
                v89 = vbslq_s8(v87, v138, v172);
                v90 = (int8x16_t *)(v85 + 32 * v80);
                *v90 = v88;
                v90[1] = v89;
              }
              *(_QWORD *)(v82 + 8 * v80) = v158;
              swift_retain();
              swift_release();
              sub_1B1D5EBC4(v156, v155, v143, 0, *((unsigned __int8 *)v154 + 227), v153 & 1, &v178);
              v91 = v197;
              sub_1B1F05D48(v66, (unsigned __int16 **)&v174, (uint64_t)v177);
              v197 = v91;
              v67 = v146;
              if (*(_QWORD *)(v66[13] + 16))
              {
                v92 = (_QWORD *)swift_bridgeObjectRetain();
                sub_1B1F05034(v92, v73);
                swift_bridgeObjectRelease();
                isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
                v94 = v66[13];
                if ((isUniquelyReferenced_nonNull_native & 1) != 0)
                {
                  sub_1B1C92670(0, *(_QWORD *)(v94 + 16));
                }
                else
                {
                  v95 = (_QWORD *)MEMORY[0x1E0DEE9D8];
                  if (*(_QWORD *)(v94 + 24) >= 2uLL)
                  {
                    sub_1B1791524(0, (unint64_t *)&qword_1ED4BADE0, (uint64_t (*)(uint64_t))sub_1B1B1F228, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
                    v95 = (_QWORD *)swift_allocObject();
                    v96 = j__malloc_size(v95);
                    v95[2] = 0;
                    v95[3] = 2 * ((uint64_t)(v96 - 32) / 72);
                  }
                  *v140 = v95;
                  swift_bridgeObjectRelease();
                }
                if (*(unsigned __int8 *)(v66[2] + OBJC_IVAR____TtC3VFX13EntityManager_currentState) - 1 >= 2)
                {
                  v97 = *(char **)(v73 + 232);
                  v98 = *(char **)(v73 + 256);
                  if (v97 == v98)
                  {
                    v99 = *(char **)(v73 + 240);
                  }
                  else
                  {
                    sub_1B1A1059C(v98, v97);
                    v98 = *(char **)(v73 + 232);
                    v99 = *(char **)(v73 + 240);
                    if (v99 == v98)
                    {
                      v99 = 0;
                      v98 = 0;
                      *(_QWORD *)(v73 + 232) = 0;
                      *(_QWORD *)(v73 + 240) = 0;
                    }
                  }
                  *(_QWORD *)(v73 + 248) = v99;
                  *(_QWORD *)(v73 + 256) = v98;
                }
              }
              ecs_stack_allocator_pop_snapshot(v67);
              v68 = v145;
              if (v145)
              {
                os_unfair_lock_unlock(*(os_unfair_lock_t *)(v73 + 344));
                os_unfair_lock_unlock(*(os_unfair_lock_t *)(v73 + 376));
              }
              swift_release();
              v69 += 6;
              v65 = v151 - 1;
            }
            while (v151 != 1);
          }
        }
      }
      else if (v169 > 0)
      {
        v100 = v166;
        if (v166)
        {
          v101 = v168;
          v102 = v168[4];
          v147 = v167;
          v103 = *(unsigned __int8 *)(v167 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
          v140 = v168 + 13;
          v143 = *(_QWORD *)(v148 + 32);
          v144 = v168 + 6;
          v174 = v162;
          v175 = v163;
          v142 = v168 + 8;
          v141 = v186;
          v104 = (uint64_t *)(v165 + 24);
          v176 = v164;
          v139 = (int8x16_t)xmmword_1B2244E20;
          v138 = (int8x16_t)xmmword_1B226DDC0;
          v145 = v103;
          v146 = v102;
          do
          {
            v150 = *((unsigned int *)v104 - 6);
            v151 = v100;
            v105 = *((unsigned int *)v104 - 4);
            v149 = *((unsigned int *)v104 - 5);
            v106 = (uint64_t *)*(v104 - 1);
            v107 = *v104;
            v108 = v104[1];
            v109 = v104[2];
            if (v103)
            {
              v110 = *(os_unfair_lock_s **)(v109 + 376);
              swift_retain();
              os_unfair_lock_lock(v110);
              os_unfair_lock_lock(*(os_unfair_lock_t *)(v109 + 344));
            }
            else
            {
              swift_retain();
            }
            ecs_stack_allocator_push_snapshot(v102);
            sub_1B1A18378((uint64_t)v144, (uint64_t)v177, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
            v111 = v101[4];
            v112 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v109 + 40) + 16) + 32) + 16) + 1;
            swift_retain();
            v101[6] = ecs_stack_allocator_allocate(v111, 48 * v112, 8);
            v101[7] = v112;
            v113 = v142;
            v142[1] = 0;
            v113[2] = 0;
            *v113 = 0;
            swift_release();
            v114 = (v149 - v150 + v105);
            v178 = v147;
            v179 = v109;
            v180 = v101;
            v181 = v105;
            v115 = v150;
            v182 = v114;
            v183 = v152;
            v184 = v150;
            v185 = v149;
            v116 = v141;
            *v141 = 0;
            v116[1] = 0;
            v187 = 1;
            v188 = v106;
            v189 = v107;
            v190 = v108;
            v117 = sub_1B1A12038((uint64_t)&type metadata for DrawCallComponent, (uint64_t)&off_1E638BEB8, v106, v107, v108, (uint64_t)v101);
            v118 = sub_1B1A12038((uint64_t)&type metadata for WorldAABB, (uint64_t)&off_1E63C5FC8, v106, v107, v108, (uint64_t)v101);
            if ((v119 & 1) == 0)
            {
              v120 = v118;
              sub_1B1D15DF4(*(_QWORD *)(v148 + 32), (uint64_t)v170);
              sub_1B1A18378((uint64_t)v170, (uint64_t)&v171, &qword_1ED4BA220, (uint64_t)&type metadata for WorldAABB);
              if (v173)
                v121 = -1;
              else
                v121 = 0;
              v122 = (int8x16_t)vdupq_n_s32(v121);
              v123 = vbslq_s8(v122, v139, v171);
              v124 = vbslq_s8(v122, v138, v172);
              v125 = (int8x16_t *)(v120 + 32 * v115);
              *v125 = v123;
              v125[1] = v124;
            }
            *(_QWORD *)(v117 + 8 * v115) = v158;
            swift_retain();
            swift_release();
            sub_1B1D5EBC4(v156, v155, v143, 0, *((unsigned __int8 *)v154 + 227), v153 & 1, &v178);
            v126 = v197;
            sub_1B1F05D48(v101, (unsigned __int16 **)&v174, (uint64_t)v177);
            v197 = v126;
            v102 = v146;
            if (*(_QWORD *)(v101[13] + 16))
            {
              v127 = (_QWORD *)swift_bridgeObjectRetain();
              sub_1B1F05034(v127, v109);
              swift_bridgeObjectRelease();
              v128 = swift_isUniquelyReferenced_nonNull_native();
              v129 = v101[13];
              if ((v128 & 1) != 0)
              {
                sub_1B1C92670(0, *(_QWORD *)(v129 + 16));
              }
              else
              {
                v130 = (_QWORD *)MEMORY[0x1E0DEE9D8];
                if (*(_QWORD *)(v129 + 24) >= 2uLL)
                {
                  sub_1B1791524(0, (unint64_t *)&qword_1ED4BADE0, (uint64_t (*)(uint64_t))sub_1B1B1F228, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
                  v130 = (_QWORD *)swift_allocObject();
                  v131 = j__malloc_size(v130);
                  v130[2] = 0;
                  v130[3] = 2 * ((uint64_t)(v131 - 32) / 72);
                }
                *v140 = v130;
                swift_bridgeObjectRelease();
              }
              if (*(unsigned __int8 *)(v101[2] + OBJC_IVAR____TtC3VFX13EntityManager_currentState) - 1 >= 2)
              {
                v132 = *(char **)(v109 + 232);
                v133 = *(char **)(v109 + 256);
                if (v132 == v133)
                {
                  v134 = *(char **)(v109 + 240);
                }
                else
                {
                  sub_1B1A1059C(v133, v132);
                  v133 = *(char **)(v109 + 232);
                  v134 = *(char **)(v109 + 240);
                  if (v134 == v133)
                  {
                    v134 = 0;
                    v133 = 0;
                    *(_QWORD *)(v109 + 232) = 0;
                    *(_QWORD *)(v109 + 240) = 0;
                  }
                }
                *(_QWORD *)(v109 + 248) = v134;
                *(_QWORD *)(v109 + 256) = v133;
              }
            }
            ecs_stack_allocator_pop_snapshot(v102);
            v103 = v145;
            if (v145)
            {
              os_unfair_lock_unlock(*(os_unfair_lock_t *)(v109 + 344));
              os_unfair_lock_unlock(*(os_unfair_lock_t *)(v109 + 376));
            }
            swift_release();
            v104 += 6;
            v100 = v151 - 1;
          }
          while (v151 != 1);
        }
      }
      sub_1B1D66364((uint64_t)&v162);
      return ecs_stack_allocator_pop_snapshot(*(_QWORD *)(v157 + 32));
    }
  }
  return result;
}

uint64_t sub_1B1F0D7E0()
{
  return swift_deallocObject();
}

uint64_t sub_1B1F0D7F0()
{
  return swift_deallocObject();
}

uint64_t sub_1B1F0D800(uint64_t result, uint64_t a2, int a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9, __n128 a10, uint64_t a11, unsigned __int8 a12)
{
  uint64_t v12;
  Swift::Int v14;
  uint64_t KeyPath;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  int v30;
  char *v31;
  uint64_t *v32;
  uint64_t v33;
  os_unfair_lock_s *v34;
  uint64_t v35;
  uint64_t v36;
  char **v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  int v46;
  int v47;
  char *v48;
  _QWORD *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  _QWORD *v63;
  int v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  os_unfair_lock_s *v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  _BYTE *v77;
  uint64_t v78;
  _QWORD *v79;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v81;
  _QWORD *v82;
  size_t v83;
  char *v84;
  char *v85;
  char *v86;
  Swift::Int v87;
  _QWORD *v88;
  int v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  os_unfair_lock_s *v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  uint64_t v101;
  _BYTE *v102;
  uint64_t v103;
  _QWORD *v104;
  char v105;
  uint64_t v106;
  _QWORD *v107;
  size_t v108;
  char *v109;
  char *v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  int v115;
  _QWORD *v116;
  _BYTE *v117;
  _QWORD *v118;
  _QWORD *v119;
  unint64_t v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  __n128 v125;
  __n128 v126;
  uint64_t v127;
  uint64_t v128;
  Swift::Int v129;
  uint64_t *v130;
  uint64_t v131;
  _QWORD *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  _QWORD *v136;
  uint64_t v137;
  _QWORD v138[2];
  uint64_t v139;
  uint64_t v140;
  __int128 v141;
  __int128 v142;
  uint64_t v143;
  uint64_t v144;
  _QWORD *v145;
  unint64_t v146;
  _QWORD *v147;
  uint64_t v148;
  _OWORD v149[2];
  uint64_t v150;
  _OWORD v151[2];
  uint64_t v152;
  _OWORD v153[2];
  uint64_t v154;
  _BYTE v155[40];
  _QWORD v156[8];
  _BYTE v157[24];
  uint64_t *v158;
  uint64_t v159;
  Swift::Int v160;
  _BYTE v161[40];
  _QWORD v162[8];
  _BYTE v163[24];
  _QWORD *v164;
  uint64_t v165;
  uint64_t *v166;
  uint64_t v167;
  int v168;
  char v169;
  uint64_t v170;
  char v171;
  uint64_t v172;
  uint64_t v173;

  v127 = a8;
  v128 = a7;
  v125 = a9;
  v126 = a10;
  if (a5 >= 1)
  {
    v14 = a5;
    v120 = a4;
    LODWORD(v121) = a3;
    LODWORD(v122) = result;
    v133 = v12;
    swift_retain();
    KeyPath = swift_getKeyPath();
    sub_1B1DAC77C(KeyPath, v14);
    swift_release();
    swift_release();
    swift_retain();
    v17 = swift_getKeyPath();
    sub_1B1DAC77C(v17, v14);
    swift_release();
    swift_release();
    v18 = *(_QWORD *)(a6 + 32);
    ecs_stack_allocator_push_snapshot(v18);
    v173 = *(int *)(a2 + 204);
    v123 = 4 * v14;
    v131 = a6;
    v132 = ecs_stack_allocator_allocate(v18, 4 * v14, 4);
    v124 = a2;
    if ((*(_BYTE *)(a2 + 208) & 1) == 0)
    {
      v28 = 0;
      v29 = &qword_1ED4B8000;
      v129 = v14;
      do
      {
        v33 = *(_QWORD *)(a6 + 16);
        v32 = (uint64_t *)(v33 + v29[191]);
        v34 = (os_unfair_lock_s *)v32[3];
        swift_retain();
        os_unfair_lock_lock(v34);
        ++*(_QWORD *)(v33 + OBJC_IVAR____TtC3VFX13EntityManager_entityCount);
        v35 = OBJC_IVAR____TtC3VFX13EntityManager_firstFreeIndex;
        LODWORD(v36) = *(_DWORD *)(v33 + OBJC_IVAR____TtC3VFX13EntityManager_firstFreeIndex);
        if ((_DWORD)v36 == -1)
        {
          v130 = v32;
          v37 = (char **)(v33 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
          v38 = OBJC_IVAR____TtC3VFX13EntityManager_entityCapacity;
          v39 = *(char **)(v33 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
          v36 = *(_QWORD *)(v33 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8);
          v40 = 2 * *(_QWORD *)(v33 + OBJC_IVAR____TtC3VFX13EntityManager_entityCapacity);
          *(_QWORD *)(v33 + OBJC_IVAR____TtC3VFX13EntityManager_entityCapacity) = v40;
          v41 = (char *)swift_slowAlloc();
          *v37 = v41;
          v37[1] = (char *)v40;
          if (v36 < 0)
            goto LABEL_86;
          if (v41 != v39 || v41 >= &v39[12 * v36])
            memmove(v41, v39, 12 * v36);
          if (v39)
            MEMORY[0x1B5E23F88](v39, -1, -1);
          v43 = *(_QWORD *)(v33 + v38);
          v44 = *v37;
          v29 = &qword_1ED4B8000;
          if ((_DWORD)v43 - 1 != (_DWORD)v36)
          {
            v45 = OBJC_IVAR____TtC3VFX13EntityManager_generationSalt;
            v46 = v36 + 1;
            do
            {
              v47 = *(_DWORD *)(v33 + v45);
              v48 = &v44[12 * v46 - 12];
              *(_DWORD *)v48 = v46;
              *((_DWORD *)v48 + 1) = -1;
              *((_DWORD *)v48 + 2) = v47;
              ++v46;
            }
            while ((_DWORD)v43 != v46);
          }
          v30 = *(_DWORD *)(v33 + OBJC_IVAR____TtC3VFX13EntityManager_generationSalt);
          v31 = &v44[12 * v43];
          *(_QWORD *)(v31 - 12) = -1;
          *((_DWORD *)v31 - 1) = v30;
          *(_DWORD *)(v33 + v35) = v36;
          v32 = v130;
          a6 = v131;
          v14 = v129;
        }
        *(_DWORD *)(v33 + v35) = *(_DWORD *)(*(_QWORD *)(v33 + OBJC_IVAR____TtC3VFX13EntityManager__entries)
                                           + 12 * (int)v36);
        os_unfair_lock_unlock((os_unfair_lock_t)v32[3]);
        swift_release();
        *((_DWORD *)v132 + v28++) = v36;
      }
      while (v28 != v14);
    }
    v140 = 0;
    v19 = v124;
    v20 = v14 / *(_QWORD *)(v124 + 64)
        + 2 * *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a6 + 16) + 96) + 40 * (int)v173 + 32) + 16)
        + 1;
    v21 = ecs_stack_allocator_allocate(*(_QWORD *)(a6 + 32), 24 * v20, 8);
    v138[0] = v21;
    v138[1] = v20;
    v139 = 0;
    v22 = *(_QWORD *)(a6 + 16);
    swift_retain();
    v134 = 0;
    v135 = (4 * v14) >> 2;
    v136 = v132;
    v137 = v135;
    if (v123 < 1)
    {
      swift_release();
      v27 = 0;
    }
    else
    {
      v130 = &v113;
      v23 = v120;
      v24 = v120;
      swift_retain();
      v25 = v121 & 1;
      v26 = (uint64_t)v132;
      do
      {
        swift_retain();
        sub_1B1C939A8(v173, v24 | ((HIDWORD(v23) & 1) << 32), v25, v22, &v134, v19, v26, (4 * v14) >> 2, &v140, a6, v173, v138);
        swift_release();
      }
      while (v135 - v134 > 0);
      swift_release();
      swift_release();
      v27 = v139;
      v21 = (_QWORD *)v138[0];
    }
    v49 = ecs_stack_allocator_allocate(*(_QWORD *)(a6 + 32), 48 * v27, 8);
    v50 = (uint64_t)v49;
    if (v27)
    {
      v51 = 0;
      v52 = v21 + 2;
      v53 = v27;
      v54 = v49;
      while (1)
      {
        v55 = *(v52 - 1);
        v56 = *v52;
        v57 = swift_retain();
        if ((v51 & 0x8000000000000000) != 0)
        {
          swift_release();
          v115 = 0;
          v114 = 3451;
          LOBYTE(v113) = 2;
          goto LABEL_85;
        }
        if (HIDWORD(v51))
          break;
        *((_DWORD *)v54 + 1) = v56;
        *((_DWORD *)v54 + 2) = v51;
        v51 = v51 - v55 + v56;
        *(_DWORD *)v54 = v55;
        v54[2] = 0;
        v54[3] = 0;
        v54[4] = 0;
        v54[5] = v57;
        v54 += 6;
        v52 += 3;
        if (!--v53)
          goto LABEL_30;
      }
      swift_release();
      v115 = 0;
      v114 = 3455;
      LOBYTE(v113) = 2;
LABEL_85:
      sub_1B222967C();
      __break(1u);
LABEL_86:
      v115 = 0;
      v114 = 1046;
      LOBYTE(v113) = 2;
      sub_1B2229700();
      __break(1u);
      goto LABEL_87;
    }
LABEL_30:
    LODWORD(v124) = a12;
    v123 = a11;
    v58 = v131;
    v59 = *(_QWORD *)(v131 + 16);
    v60 = qword_1ED4B7DB8;
    swift_retain();
    if (v60 != -1)
      swift_once();
    v167 = qword_1ED4D09F8;
    v168 = 0;
    v169 = 2;
    v170 = 0;
    v171 = 2;
    v172 = 0;
    swift_retain();
    sub_1B1BEC74C(v59, v58, (uint64_t)&v167, v50, v27, v27, (uint64_t)&v141);
    swift_release();
    swift_release();
    if ((v122 & 1) != 0)
    {
      if (v148 > 0)
      {
        v61 = v145;
        v62 = v131;
        if (v145)
        {
          v122 = v148;
          v63 = v147;
          v121 = v146;
          v64 = *(unsigned __int8 *)(v146 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
          v173 = v147[4];
          v116 = v147 + 13;
          v118 = v147 + 8;
          v119 = v147 + 6;
          v117 = v157;
          v65 = (uint64_t *)(v144 + 24);
          LODWORD(v120) = v64;
          while (1)
          {
            v132 = v61;
            v67 = *((unsigned int *)v65 - 6);
            v66 = *((unsigned int *)v65 - 5);
            v68 = *((unsigned int *)v65 - 4);
            v69 = (uint64_t *)*(v65 - 1);
            v70 = *v65;
            v71 = v65[2];
            v129 = v65[1];
            v130 = v69;
            if (v64)
            {
              v72 = *(os_unfair_lock_s **)(v71 + 376);
              swift_retain();
              os_unfair_lock_lock(v72);
              os_unfair_lock_lock(*(os_unfair_lock_t *)(v71 + 344));
            }
            else
            {
              swift_retain();
            }
            ecs_stack_allocator_push_snapshot(v173);
            sub_1B1A18378((uint64_t)v119, (uint64_t)v155, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
            v73 = v63[4];
            v74 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v71 + 40) + 16) + 32) + 16) + 1;
            swift_retain();
            v63[6] = ecs_stack_allocator_allocate(v73, 48 * v74, 8);
            v63[7] = v74;
            v75 = v118;
            v118[1] = 0;
            v75[2] = 0;
            *v75 = 0;
            swift_release();
            v156[0] = v121;
            v156[1] = v71;
            v156[2] = v63;
            v156[3] = v68;
            v156[4] = (v66 - v67 + v68);
            v76 = v123;
            v156[5] = v122;
            v156[6] = v67;
            v156[7] = v66;
            v77 = v117;
            *(_QWORD *)v117 = 0;
            *((_QWORD *)v77 + 1) = 0;
            v157[16] = 1;
            v158 = v130;
            v159 = v70;
            v160 = v129;
            v78 = v133;
            sub_1B1D663AC(v156, v128, v127, v76, v124, v125, v126);
            if (v78)
              break;
            v149[0] = v141;
            v149[1] = v142;
            v150 = v143;
            sub_1B1F05D48(v63, (unsigned __int16 **)v149, (uint64_t)v155);
            v133 = 0;
            v62 = v131;
            if (*(_QWORD *)(v63[13] + 16))
            {
              v79 = (_QWORD *)swift_bridgeObjectRetain();
              sub_1B1F05034(v79, v71);
              swift_bridgeObjectRelease();
              isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
              v81 = v63[13];
              if ((isUniquelyReferenced_nonNull_native & 1) != 0)
              {
                sub_1B1C92670(0, *(_QWORD *)(v81 + 16));
              }
              else
              {
                v82 = (_QWORD *)MEMORY[0x1E0DEE9D8];
                if (*(_QWORD *)(v81 + 24) >= 2uLL)
                {
                  sub_1B1791524(0, (unint64_t *)&qword_1ED4BADE0, (uint64_t (*)(uint64_t))sub_1B1B1F228, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
                  v82 = (_QWORD *)swift_allocObject();
                  v83 = j__malloc_size(v82);
                  v82[2] = 0;
                  v82[3] = 2 * ((uint64_t)(v83 - 32) / 72);
                }
                *v116 = v82;
                swift_bridgeObjectRelease();
              }
              if (*(unsigned __int8 *)(v63[2] + OBJC_IVAR____TtC3VFX13EntityManager_currentState) - 1 >= 2)
              {
                v84 = *(char **)(v71 + 232);
                v85 = *(char **)(v71 + 256);
                if (v84 == v85)
                {
                  v86 = *(char **)(v71 + 240);
                }
                else
                {
                  sub_1B1A1059C(v85, v84);
                  v85 = *(char **)(v71 + 232);
                  v86 = *(char **)(v71 + 240);
                  if (v86 == v85)
                  {
                    v86 = 0;
                    v85 = 0;
                    *(_QWORD *)(v71 + 232) = 0;
                    *(_QWORD *)(v71 + 240) = 0;
                  }
                }
                *(_QWORD *)(v71 + 248) = v86;
                *(_QWORD *)(v71 + 256) = v85;
              }
            }
            ecs_stack_allocator_pop_snapshot(v173);
            v64 = v120;
            if ((_DWORD)v120)
            {
              os_unfair_lock_unlock(*(os_unfair_lock_t *)(v71 + 344));
              os_unfair_lock_unlock(*(os_unfair_lock_t *)(v71 + 376));
            }
            swift_release();
            v65 += 6;
            v61 = (_QWORD *)((char *)v132 - 1);
            if (v132 == (_QWORD *)1)
              goto LABEL_78;
          }
LABEL_87:
          result = swift_unexpectedError();
          __break(1u);
          return result;
        }
        goto LABEL_78;
      }
      goto LABEL_77;
    }
    if (v148 <= 0)
    {
LABEL_77:
      v62 = v131;
      goto LABEL_78;
    }
    v87 = (Swift::Int)v145;
    v62 = v131;
    if (!v145)
    {
LABEL_78:
      sub_1B1D66364((uint64_t)&v141);
      return ecs_stack_allocator_pop_snapshot(*(_QWORD *)(v62 + 32));
    }
    v122 = v148;
    v88 = v147;
    v120 = v146;
    v89 = *(unsigned __int8 *)(v146 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
    v173 = v147[4];
    v116 = v147 + 13;
    v118 = v147 + 8;
    v119 = v147 + 6;
    v117 = v163;
    v90 = (uint64_t *)(v144 + 24);
    LODWORD(v121) = v89;
    while (1)
    {
      v92 = *((unsigned int *)v90 - 6);
      v91 = *((unsigned int *)v90 - 5);
      v93 = *((unsigned int *)v90 - 4);
      v94 = *v90;
      v132 = (_QWORD *)*(v90 - 1);
      v95 = (uint64_t *)v90[1];
      v96 = v90[2];
      v129 = v87;
      v130 = v95;
      if (v89)
      {
        v97 = *(os_unfair_lock_s **)(v96 + 376);
        swift_retain();
        os_unfair_lock_lock(v97);
        os_unfair_lock_lock(*(os_unfair_lock_t *)(v96 + 344));
      }
      else
      {
        swift_retain();
      }
      ecs_stack_allocator_push_snapshot(v173);
      sub_1B1A18378((uint64_t)v119, (uint64_t)v161, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
      v98 = v88[4];
      v99 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v96 + 40) + 16) + 32) + 16) + 1;
      swift_retain();
      v88[6] = ecs_stack_allocator_allocate(v98, 48 * v99, 8);
      v88[7] = v99;
      v100 = v118;
      v118[1] = 0;
      v100[2] = 0;
      *v100 = 0;
      swift_release();
      v162[0] = v120;
      v162[1] = v96;
      v162[2] = v88;
      v162[3] = v93;
      v162[4] = (v91 - v92 + v93);
      v101 = v123;
      v162[5] = v122;
      v162[6] = v92;
      v162[7] = v91;
      v102 = v117;
      *(_QWORD *)v117 = 0;
      *((_QWORD *)v102 + 1) = 0;
      v163[16] = 1;
      v103 = v133;
      v164 = v132;
      v165 = v94;
      v166 = v130;
      sub_1B1D663AC(v162, v128, v127, v101, v124, v125, v126);
      if (v103)
        break;
      v151[0] = v141;
      v151[1] = v142;
      v152 = v143;
      sub_1B1F05D48(v88, (unsigned __int16 **)v151, (uint64_t)v161);
      v133 = 0;
      v62 = v131;
      if (*(_QWORD *)(v88[13] + 16))
      {
        v104 = (_QWORD *)swift_bridgeObjectRetain();
        sub_1B1F05034(v104, v96);
        swift_bridgeObjectRelease();
        v105 = swift_isUniquelyReferenced_nonNull_native();
        v106 = v88[13];
        if ((v105 & 1) != 0)
        {
          sub_1B1C92670(0, *(_QWORD *)(v106 + 16));
        }
        else
        {
          v107 = (_QWORD *)MEMORY[0x1E0DEE9D8];
          if (*(_QWORD *)(v106 + 24) >= 2uLL)
          {
            sub_1B1791524(0, (unint64_t *)&qword_1ED4BADE0, (uint64_t (*)(uint64_t))sub_1B1B1F228, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
            v107 = (_QWORD *)swift_allocObject();
            v108 = j__malloc_size(v107);
            v107[2] = 0;
            v107[3] = 2 * ((uint64_t)(v108 - 32) / 72);
          }
          *v116 = v107;
          swift_bridgeObjectRelease();
        }
        if (*(unsigned __int8 *)(v88[2] + OBJC_IVAR____TtC3VFX13EntityManager_currentState) - 1 >= 2)
        {
          v109 = *(char **)(v96 + 232);
          v110 = *(char **)(v96 + 256);
          if (v109 == v110)
          {
            v111 = *(char **)(v96 + 240);
          }
          else
          {
            sub_1B1A1059C(v110, v109);
            v110 = *(char **)(v96 + 232);
            v111 = *(char **)(v96 + 240);
            if (v111 == v110)
            {
              v111 = 0;
              v110 = 0;
              *(_QWORD *)(v96 + 232) = 0;
              *(_QWORD *)(v96 + 240) = 0;
            }
          }
          *(_QWORD *)(v96 + 248) = v111;
          *(_QWORD *)(v96 + 256) = v110;
        }
      }
      ecs_stack_allocator_pop_snapshot(v173);
      v89 = v121;
      if ((_DWORD)v121)
      {
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v96 + 344));
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v96 + 376));
      }
      swift_release();
      v90 += 6;
      v87 = v129 - 1;
      if (v129 == 1)
        goto LABEL_78;
    }
    v153[0] = v141;
    v153[1] = v142;
    v154 = v143;
    sub_1B1F05D48(v88, (unsigned __int16 **)v153, (uint64_t)v161);
    sub_1B1F03804((char *)v96);
    ecs_stack_allocator_pop_snapshot(v173);
    v112 = v131;
    if ((v121 & 1) != 0)
    {
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v96 + 344));
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v96 + 376));
    }
    sub_1B1D66364((uint64_t)&v141);
    swift_release();
    return ecs_stack_allocator_pop_snapshot(*(_QWORD *)(v112 + 32));
  }
  return result;
}

uint64_t sub_1B1F0E4D4(uint64_t result, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int32x4_t *a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, unsigned __int8 a20)
{
  uint64_t v20;
  Swift::Int v22;
  uint64_t KeyPath;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  char *v40;
  uint64_t *v41;
  uint64_t v42;
  os_unfair_lock_s *v43;
  uint64_t v44;
  uint64_t v45;
  char **v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  int v55;
  int v56;
  char *v57;
  _QWORD *v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  Swift::Int v70;
  _QWORD *v71;
  int v72;
  uint64_t v73;
  uint64_t **v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  os_unfair_lock_s *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  _BYTE *v85;
  uint64_t v86;
  _QWORD *v87;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v89;
  _QWORD *v90;
  size_t v91;
  char *v92;
  char *v93;
  char *v94;
  Swift::Int v95;
  _QWORD *v96;
  int v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  uint64_t v104;
  os_unfair_lock_s *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  _QWORD *v109;
  _BYTE *v110;
  uint64_t v111;
  _QWORD *v112;
  char v113;
  uint64_t v114;
  _QWORD *v115;
  size_t v116;
  char *v117;
  char *v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  _QWORD *v123;
  _BYTE *v124;
  _QWORD *v125;
  _QWORD *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  int v136;
  uint64_t v137;
  uint64_t v138;
  Swift::Int v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  int32x4_t *v144;
  Swift::Int v145;
  uint64_t *v146;
  _QWORD *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  _QWORD *v151;
  uint64_t v152;
  _QWORD v153[2];
  uint64_t v154;
  uint64_t v155;
  __int128 v156;
  __int128 v157;
  uint64_t v158;
  uint64_t v159;
  Swift::Int v160;
  uint64_t v161;
  _QWORD *v162;
  uint64_t v163;
  _OWORD v164[2];
  uint64_t v165;
  _OWORD v166[2];
  uint64_t v167;
  _OWORD v168[2];
  uint64_t v169;
  _BYTE v170[40];
  _QWORD v171[8];
  _BYTE v172[24];
  _QWORD *v173;
  uint64_t *v174;
  Swift::Int v175;
  _BYTE v176[40];
  _QWORD v177[8];
  _BYTE v178[24];
  Swift::Int v179;
  _QWORD *v180;
  uint64_t *v181;
  uint64_t v182;
  int v183;
  char v184;
  uint64_t v185;
  char v186;
  uint64_t v187;
  Swift::Int v188;

  v143 = a7;
  v144 = a8;
  if (a5 >= 1)
  {
    v22 = a5;
    v137 = a4;
    LODWORD(v138) = a3;
    LODWORD(v128) = result;
    v148 = v20;
    swift_retain();
    KeyPath = swift_getKeyPath();
    sub_1B1DAC77C(KeyPath, v22);
    swift_release();
    swift_release();
    swift_retain();
    v25 = swift_getKeyPath();
    sub_1B1DAC77C(v25, v22);
    swift_release();
    swift_release();
    v26 = *(_QWORD *)(a6 + 32);
    ecs_stack_allocator_push_snapshot(v26);
    v188 = *(int *)(a2 + 204);
    v139 = 4 * v22;
    v147 = ecs_stack_allocator_allocate(v26, 4 * v22, 4);
    v140 = a2;
    v27 = *(_BYTE *)(a2 + 208);
    v129 = a6;
    if ((v27 & 1) == 0)
    {
      v38 = 0;
      v145 = v22;
      do
      {
        v42 = *(_QWORD *)(a6 + 16);
        v41 = (uint64_t *)(v42 + OBJC_IVAR____TtC3VFX13EntityManager_lock);
        v43 = *(os_unfair_lock_s **)(v42 + OBJC_IVAR____TtC3VFX13EntityManager_lock + 24);
        swift_retain();
        os_unfair_lock_lock(v43);
        ++*(_QWORD *)(v42 + OBJC_IVAR____TtC3VFX13EntityManager_entityCount);
        v44 = OBJC_IVAR____TtC3VFX13EntityManager_firstFreeIndex;
        LODWORD(v45) = *(_DWORD *)(v42 + OBJC_IVAR____TtC3VFX13EntityManager_firstFreeIndex);
        if ((_DWORD)v45 == -1)
        {
          v146 = v41;
          v46 = (char **)(v42 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
          v47 = OBJC_IVAR____TtC3VFX13EntityManager_entityCapacity;
          v48 = *(char **)(v42 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
          v45 = *(_QWORD *)(v42 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8);
          v49 = 2 * *(_QWORD *)(v42 + OBJC_IVAR____TtC3VFX13EntityManager_entityCapacity);
          *(_QWORD *)(v42 + OBJC_IVAR____TtC3VFX13EntityManager_entityCapacity) = v49;
          v50 = (char *)swift_slowAlloc();
          *v46 = v50;
          v46[1] = (char *)v49;
          if (v45 < 0)
            goto LABEL_85;
          if (v50 != v48 || v50 >= &v48[12 * v45])
            memmove(v50, v48, 12 * v45);
          if (v48)
            MEMORY[0x1B5E23F88](v48, -1, -1);
          v52 = *(_QWORD *)(v42 + v47);
          v53 = *v46;
          if ((_DWORD)v52 - 1 != (_DWORD)v45)
          {
            v54 = OBJC_IVAR____TtC3VFX13EntityManager_generationSalt;
            v55 = v45 + 1;
            do
            {
              v56 = *(_DWORD *)(v42 + v54);
              v57 = &v53[12 * v55 - 12];
              *(_DWORD *)v57 = v55;
              *((_DWORD *)v57 + 1) = -1;
              *((_DWORD *)v57 + 2) = v56;
              ++v55;
            }
            while ((_DWORD)v52 != v55);
          }
          v39 = *(_DWORD *)(v42 + OBJC_IVAR____TtC3VFX13EntityManager_generationSalt);
          v40 = &v53[12 * v52];
          *(_QWORD *)(v40 - 12) = -1;
          *((_DWORD *)v40 - 1) = v39;
          *(_DWORD *)(v42 + v44) = v45;
          a6 = v129;
          v22 = v145;
          v41 = v146;
        }
        *(_DWORD *)(v42 + v44) = *(_DWORD *)(*(_QWORD *)(v42 + OBJC_IVAR____TtC3VFX13EntityManager__entries)
                                           + 12 * (int)v45);
        os_unfair_lock_unlock((os_unfair_lock_t)v41[3]);
        swift_release();
        *((_DWORD *)v147 + v38++) = v45;
      }
      while (v38 != v22);
    }
    v141 = a10;
    v142 = a9;
    v28 = (4 * v22) >> 2;
    v155 = 0;
    v29 = v140;
    v30 = v22 / *(_QWORD *)(v140 + 64)
        + 2 * *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a6 + 16) + 96) + 40 * (int)v188 + 32) + 16)
        + 1;
    v31 = ecs_stack_allocator_allocate(*(_QWORD *)(a6 + 32), 24 * v30, 8);
    v153[0] = v31;
    v153[1] = v30;
    v154 = 0;
    v32 = *(_QWORD *)(a6 + 16);
    swift_retain();
    v149 = 0;
    v150 = v28;
    v151 = v147;
    v152 = v28;
    if (v139 < 1)
    {
      swift_release();
      v37 = 0;
    }
    else
    {
      v146 = &v120;
      v33 = v137;
      v34 = v137;
      swift_retain();
      v35 = v138 & 1;
      v36 = (uint64_t)v147;
      do
      {
        swift_retain();
        sub_1B1C939A8(v188, v34 | ((HIDWORD(v33) & 1) << 32), v35, v32, &v149, v29, v36, v28, &v155, a6, v188, v153);
        swift_release();
      }
      while (v150 - v149 > 0);
      swift_release();
      swift_release();
      v37 = v154;
      v31 = (_QWORD *)v153[0];
    }
    v140 = a14;
    v58 = ecs_stack_allocator_allocate(*(_QWORD *)(a6 + 32), 48 * v37, 8);
    v59 = (uint64_t)v58;
    if (v37)
    {
      v60 = 0;
      v61 = v31 + 2;
      v62 = v37;
      v63 = v58;
      while (1)
      {
        v64 = *(v61 - 1);
        v65 = *v61;
        v66 = swift_retain();
        if ((v60 & 0x8000000000000000) != 0)
        {
          sub_1B1D2DA94((uint64_t)v144);
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          swift_release();
          LODWORD(v122) = 0;
          v121 = 3451;
          LOBYTE(v120) = 2;
          goto LABEL_84;
        }
        if (HIDWORD(v60))
          break;
        *((_DWORD *)v63 + 1) = v65;
        *((_DWORD *)v63 + 2) = v60;
        v60 = v60 - v64 + v65;
        *(_DWORD *)v63 = v64;
        v63[2] = 0;
        v63[3] = 0;
        v63[4] = 0;
        v63[5] = v66;
        v63 += 6;
        v61 += 3;
        if (!--v62)
          goto LABEL_30;
      }
      sub_1B1D2DA94((uint64_t)v144);
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      swift_release();
      LODWORD(v122) = 0;
      v121 = 3455;
      LOBYTE(v120) = 2;
LABEL_84:
      sub_1B222967C();
      __break(1u);
LABEL_85:
      LODWORD(v122) = 0;
      v121 = 1046;
      LOBYTE(v120) = 2;
      sub_1B2229700();
      __break(1u);
      goto LABEL_86;
    }
LABEL_30:
    v139 = a13;
    v138 = a12;
    v137 = a11;
    v67 = v129;
    v68 = *(_QWORD *)(v129 + 16);
    v69 = qword_1ED4B7DB8;
    swift_retain();
    if (v69 != -1)
      swift_once();
    v136 = a20;
    v135 = a19;
    v134 = a18;
    v133 = a17;
    v132 = a16;
    v131 = a15;
    v182 = qword_1ED4D09F8;
    v183 = 0;
    v184 = 2;
    v185 = 0;
    v186 = 2;
    v187 = 0;
    swift_retain();
    sub_1B1BEC74C(v68, v67, (uint64_t)&v182, v59, v37, v37, (uint64_t)&v156);
    swift_release();
    swift_release();
    v130 = v163;
    if ((v128 & 1) != 0)
    {
      if (v163 > 0)
      {
        v70 = v160;
        if (v160)
        {
          v71 = v162;
          v128 = v161;
          v72 = *(unsigned __int8 *)(v161 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
          v73 = v162[4];
          v123 = v162 + 13;
          v125 = v162 + 8;
          v126 = v162 + 6;
          v124 = v172;
          v74 = (uint64_t **)(v159 + 24);
          LODWORD(v127) = v72;
          while (1)
          {
            v188 = v70;
            v75 = *((unsigned int *)v74 - 6);
            v76 = *((unsigned int *)v74 - 5);
            v77 = *((unsigned int *)v74 - 4);
            v78 = *(v74 - 1);
            v146 = *v74;
            v147 = v78;
            v79 = (uint64_t)v74[2];
            v145 = (Swift::Int)v74[1];
            if (v72)
            {
              v80 = *(os_unfair_lock_s **)(v79 + 376);
              swift_retain();
              os_unfair_lock_lock(v80);
              os_unfair_lock_lock(*(os_unfair_lock_t *)(v79 + 344));
            }
            else
            {
              swift_retain();
            }
            v81 = v73;
            ecs_stack_allocator_push_snapshot(v73);
            sub_1B1A18378((uint64_t)v126, (uint64_t)v170, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
            v82 = v71[4];
            v83 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v79 + 40) + 16) + 32) + 16) + 1;
            swift_retain();
            v71[6] = ecs_stack_allocator_allocate(v82, 48 * v83, 8);
            v71[7] = v83;
            v84 = v125;
            v125[1] = 0;
            v84[2] = 0;
            *v84 = 0;
            swift_release();
            v171[0] = v128;
            v171[1] = v79;
            v171[2] = v71;
            v171[3] = v77;
            v171[4] = (v76 - v75 + v77);
            v171[5] = v130;
            v171[6] = v75;
            v171[7] = v76;
            v85 = v124;
            *(_QWORD *)v124 = 0;
            *((_QWORD *)v85 + 1) = 0;
            v172[16] = 1;
            v173 = v147;
            v174 = v146;
            v175 = v145;
            v86 = v148;
            sub_1B1D664D0(v171, v143, v144, v142, v141, v137, v138, v139, v140, v131, v132, v133, v134, v135, v136);
            if (v86)
              break;
            v164[0] = v156;
            v164[1] = v157;
            v165 = v158;
            sub_1B1F05D48(v71, (unsigned __int16 **)v164, (uint64_t)v170);
            v148 = 0;
            v73 = v81;
            if (*(_QWORD *)(v71[13] + 16))
            {
              v87 = (_QWORD *)swift_bridgeObjectRetain();
              sub_1B1F05034(v87, v79);
              swift_bridgeObjectRelease();
              isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
              v89 = v71[13];
              if ((isUniquelyReferenced_nonNull_native & 1) != 0)
              {
                sub_1B1C92670(0, *(_QWORD *)(v89 + 16));
              }
              else
              {
                v90 = (_QWORD *)MEMORY[0x1E0DEE9D8];
                if (*(_QWORD *)(v89 + 24) >= 2uLL)
                {
                  sub_1B1791524(0, (unint64_t *)&qword_1ED4BADE0, (uint64_t (*)(uint64_t))sub_1B1B1F228, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
                  v90 = (_QWORD *)swift_allocObject();
                  v91 = j__malloc_size(v90);
                  v90[2] = 0;
                  v90[3] = 2 * ((uint64_t)(v91 - 32) / 72);
                }
                *v123 = v90;
                swift_bridgeObjectRelease();
              }
              if (*(unsigned __int8 *)(v71[2] + OBJC_IVAR____TtC3VFX13EntityManager_currentState) - 1 >= 2)
              {
                v92 = *(char **)(v79 + 232);
                v93 = *(char **)(v79 + 256);
                if (v92 == v93)
                {
                  v94 = *(char **)(v79 + 240);
                }
                else
                {
                  sub_1B1A1059C(v93, v92);
                  v93 = *(char **)(v79 + 232);
                  v94 = *(char **)(v79 + 240);
                  if (v94 == v93)
                  {
                    v94 = 0;
                    v93 = 0;
                    *(_QWORD *)(v79 + 232) = 0;
                    *(_QWORD *)(v79 + 240) = 0;
                  }
                }
                *(_QWORD *)(v79 + 248) = v94;
                *(_QWORD *)(v79 + 256) = v93;
              }
            }
            ecs_stack_allocator_pop_snapshot(v81);
            v72 = v127;
            if ((_DWORD)v127)
            {
              os_unfair_lock_unlock(*(os_unfair_lock_t *)(v79 + 344));
              os_unfair_lock_unlock(*(os_unfair_lock_t *)(v79 + 376));
            }
            swift_release();
            v74 += 6;
            v70 = v188 - 1;
            if (v188 == 1)
              goto LABEL_77;
          }
LABEL_86:
          result = swift_unexpectedError();
          __break(1u);
          return result;
        }
      }
      goto LABEL_77;
    }
    if (v163 <= 0 || (v95 = v160) == 0)
    {
LABEL_77:
      sub_1B1D66364((uint64_t)&v156);
      return ecs_stack_allocator_pop_snapshot(*(_QWORD *)(v129 + 32));
    }
    v96 = v162;
    v127 = v161;
    v97 = *(unsigned __int8 *)(v161 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
    v98 = v162[4];
    v123 = v162 + 13;
    v125 = v162 + 8;
    v126 = v162 + 6;
    v124 = v178;
    v99 = (_QWORD *)(v159 + 24);
    LODWORD(v128) = v97;
    while (1)
    {
      v145 = v95;
      v100 = *((unsigned int *)v99 - 6);
      v101 = *((unsigned int *)v99 - 5);
      v102 = *((unsigned int *)v99 - 4);
      v188 = *(v99 - 1);
      v103 = (_QWORD *)*v99;
      v104 = v99[2];
      v146 = (uint64_t *)v99[1];
      v147 = v103;
      if (v97)
      {
        v105 = *(os_unfair_lock_s **)(v104 + 376);
        swift_retain();
        os_unfair_lock_lock(v105);
        os_unfair_lock_lock(*(os_unfair_lock_t *)(v104 + 344));
      }
      else
      {
        swift_retain();
      }
      v106 = v98;
      ecs_stack_allocator_push_snapshot(v98);
      sub_1B1A18378((uint64_t)v126, (uint64_t)v176, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
      v107 = v96[4];
      v108 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v104 + 40) + 16) + 32) + 16) + 1;
      swift_retain();
      v96[6] = ecs_stack_allocator_allocate(v107, 48 * v108, 8);
      v96[7] = v108;
      v109 = v125;
      v125[1] = 0;
      v109[2] = 0;
      *v109 = 0;
      swift_release();
      v177[0] = v127;
      v177[1] = v104;
      v177[2] = v96;
      v177[3] = v102;
      v177[4] = (v101 - v100 + v102);
      v177[5] = v130;
      v177[6] = v100;
      v177[7] = v101;
      v110 = v124;
      *(_QWORD *)v124 = 0;
      *((_QWORD *)v110 + 1) = 0;
      v178[16] = 1;
      v179 = v188;
      v180 = v147;
      v181 = v146;
      v111 = v148;
      sub_1B1D664D0(v177, v143, v144, v142, v141, v137, v138, v139, v140, v131, v132, v133, v134, v135, v136);
      if (v111)
        break;
      v166[0] = v156;
      v166[1] = v157;
      v167 = v158;
      sub_1B1F05D48(v96, (unsigned __int16 **)v166, (uint64_t)v176);
      v148 = 0;
      v98 = v106;
      if (*(_QWORD *)(v96[13] + 16))
      {
        v112 = (_QWORD *)swift_bridgeObjectRetain();
        sub_1B1F05034(v112, v104);
        swift_bridgeObjectRelease();
        v113 = swift_isUniquelyReferenced_nonNull_native();
        v114 = v96[13];
        if ((v113 & 1) != 0)
        {
          sub_1B1C92670(0, *(_QWORD *)(v114 + 16));
        }
        else
        {
          v115 = (_QWORD *)MEMORY[0x1E0DEE9D8];
          if (*(_QWORD *)(v114 + 24) >= 2uLL)
          {
            sub_1B1791524(0, (unint64_t *)&qword_1ED4BADE0, (uint64_t (*)(uint64_t))sub_1B1B1F228, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
            v115 = (_QWORD *)swift_allocObject();
            v116 = j__malloc_size(v115);
            v115[2] = 0;
            v115[3] = 2 * ((uint64_t)(v116 - 32) / 72);
          }
          *v123 = v115;
          swift_bridgeObjectRelease();
        }
        if (*(unsigned __int8 *)(v96[2] + OBJC_IVAR____TtC3VFX13EntityManager_currentState) - 1 >= 2)
        {
          v117 = *(char **)(v104 + 232);
          v118 = *(char **)(v104 + 256);
          if (v117 == v118)
          {
            v119 = *(char **)(v104 + 240);
          }
          else
          {
            sub_1B1A1059C(v118, v117);
            v118 = *(char **)(v104 + 232);
            v119 = *(char **)(v104 + 240);
            if (v119 == v118)
            {
              v119 = 0;
              v118 = 0;
              *(_QWORD *)(v104 + 232) = 0;
              *(_QWORD *)(v104 + 240) = 0;
            }
          }
          *(_QWORD *)(v104 + 248) = v119;
          *(_QWORD *)(v104 + 256) = v118;
        }
      }
      ecs_stack_allocator_pop_snapshot(v106);
      v97 = v128;
      if ((_DWORD)v128)
      {
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v104 + 344));
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v104 + 376));
      }
      swift_release();
      v99 += 6;
      v95 = v145 - 1;
      if (v145 == 1)
        goto LABEL_77;
    }
    v168[0] = v156;
    v168[1] = v157;
    v169 = v158;
    sub_1B1F05D48(v96, (unsigned __int16 **)v168, (uint64_t)v176);
    sub_1B1F03804((char *)v104);
    ecs_stack_allocator_pop_snapshot(v106);
    if ((v128 & 1) != 0)
    {
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v104 + 344));
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v104 + 376));
    }
    sub_1B1D66364((uint64_t)&v156);
    swift_release();
    return ecs_stack_allocator_pop_snapshot(*(_QWORD *)(v129 + 32));
  }
  return result;
}

