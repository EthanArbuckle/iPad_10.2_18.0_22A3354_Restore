void sub_1B19D4488(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a3 >= 1)
  {
    v3 = a3;
    do
    {
      if ((*(unsigned int (**)(void))(*(_QWORD *)(a1 + 32) + 13080))())
        sub_1B19D2050(*(float32x4_t **)(a1 + 32), *(_QWORD *)(a1 + 40), *a2, v6, v7, v8, v9, v10);
      ++a2;
      --v3;
    }
    while (v3);
  }
}

uint64_t sub_1B19D44E8()
{
  if (qword_1ED4CECF0 != -1)
    dispatch_once(&qword_1ED4CECF0, &unk_1E63D14B0);
  return qword_1ED4CECF8;
}

double sub_1B19D4528()
{
  double result;

  if (!qword_1ED4CECF8)
  {
    qword_1ED4CECF8 = sub_1B179CB60(&qword_1ED4CECF8);
    *(_QWORD *)&result = 0x1B19D4CB4;
    xmmword_1ED4BE2E8 = xmmword_1E63D2FB8;
  }
  return result;
}

uint64_t sub_1B19D457C()
{
  uint64_t v0;

  if (qword_1ED4CECF0 != -1)
    dispatch_once(&qword_1ED4CECF0, &unk_1E63D14B0);
  v0 = sub_1B179CB90(qword_1ED4CECF8, 0x40uLL);
  *(_QWORD *)(v0 + 64) = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  return v0;
}

uint64_t sub_1B19D45F4(CFDictionaryRef *a1, CFArrayRef theArray, int a3, uint64_t a4)
{
  CFIndex Count;
  int v9;
  CFIndex v10;
  const void *ValueAtIndex;
  char *Value;
  char *v13;
  CFTypeID v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const void *v23;
  unsigned int v24;
  char v25;
  int v26;
  CFIndex v27;
  __CFArray *Mutable;
  __CFString *v29;
  __CFString *v30;
  char *v31;
  CFTypeID v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __int16 v46;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  CFRange v55;

  Count = CFArrayGetCount(theArray);
  v9 = a3 + 1;
  v10 = a3;
  ValueAtIndex = CFArrayGetValueAtIndex(theArray, a3);
  Value = (char *)CFDictionaryGetValue(a1[8], ValueAtIndex);
  v13 = Value;
  if (Value)
  {
    v14 = CFGetTypeID(Value);
    if (v14 == sub_1B1843480())
    {
      if (sub_1B19C1378(v13, theArray, (a3 + 1), Count, a4, 0, v15, v16))
      {
        sub_1B19C44C8(a4, a1, v17, v18, v19, v20, v21, v22);
        return 1;
      }
    }
  }
  if (v9 >= (int)Count)
  {
    v24 = 0;
    v25 = 0;
    goto LABEL_19;
  }
  if ((_DWORD)Count - 2 != a3)
    goto LABEL_17;
  v23 = CFArrayGetValueAtIndex(theArray, v9);
  if (CFEqual(v23, CFSTR("x")))
  {
    v24 = 0;
LABEL_12:
    v25 = 1;
    goto LABEL_19;
  }
  if (CFEqual(v23, CFSTR("y")))
  {
    v24 = 1;
    goto LABEL_12;
  }
  if (CFEqual(v23, CFSTR("z")))
  {
    v25 = 1;
    v24 = 2;
    goto LABEL_19;
  }
  if (!CFEqual(v23, CFSTR("w")))
  {
LABEL_17:
    v26 = Count - a3;
    v27 = (int)Count - a3;
    Mutable = CFArrayCreateMutable(0, v26, MEMORY[0x1E0C9B378]);
    v55.location = v10;
    v55.length = v27;
    CFArrayAppendArray(Mutable, theArray, v55);
    v29 = (__CFString *)CFStringCreateByCombiningStrings(0, Mutable, CFSTR("."));
    v30 = v29;
    CFRelease(Mutable);
    v31 = (char *)CFDictionaryGetValue(a1[8], v29);
    v24 = 0;
    v25 = 0;
    if (v31)
      v13 = v31;
    goto LABEL_19;
  }
  v25 = 1;
  v24 = 3;
LABEL_19:
  if (!v13)
    return 0;
  v32 = CFGetTypeID(v13);
  if (v32 != sub_1B191E200())
    return 0;
  sub_1B19C44C8(a4, a1, v33, v34, v35, v36, v37, v38);
  if ((v25 & 1) != 0)
    v46 = 1;
  else
    v46 = sub_1B191E464((uint64_t)v13, v39, v40, v41, v42, v43, v44, v45);
  *(_WORD *)(a4 + 32) = v46;
  *(_BYTE *)(a4 + 34) = sub_1B191E4AC((uint64_t)v13, v39, v40, v41, v42, v43, v44, v45);
  *(_QWORD *)(a4 + 24) = sub_1B191E41C((uint64_t)v13, v48, v49, v50, v51, v52, v53, v54) + 4 * v24;
  *(_BYTE *)(a4 + 35) = v24;
  return 1;
}

const void *sub_1B19D483C(uint64_t a1, const void *a2)
{
  return CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 64), a2);
}

void sub_1B19D4844(uint64_t a1, const void *a2)
{
  _QWORD *Value;
  _QWORD *v5;
  CFTypeID v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  _OWORD *v15;
  uint64_t v16;

  Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 64), a2);
  if (Value)
  {
    v5 = Value;
    v6 = CFGetTypeID(Value);
    if (v6 == sub_1B191E200())
    {
      v14 = *((unsigned __int16 *)v5 + 8);
      v15 = (_OWORD *)v5[3];
      if (v14 == 10)
      {
        *v15 = xmmword_1B2244DB0;
        v15[1] = xmmword_1B2244DD0;
        v15[2] = xmmword_1B2244D90;
        v15[3] = xmmword_1B2244E20;
      }
      else
      {
        v16 = sub_1B179E250((__int16)v14, v7, v8, v9, v10, v11, v12, v13);
        bzero(v15, v5[4] * v16);
      }
    }
    else
    {
      CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 64), a2);
    }
    ++*(_DWORD *)(a1 + 72);
  }
}

void sub_1B19D4900(uint64_t a1, void *key, __int16 *a3)
{
  _WORD *Value;
  CFTypeID v7;
  CFTypeID v8;
  _WORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  if (!a3)
  {
    CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 64), key);
    ++*(_DWORD *)(a1 + 72);
    return;
  }
  ++*(_DWORD *)(a1 + 72);
  Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 64), key);
  v7 = CFGetTypeID(a3);
  if (Value)
  {
    v8 = CFGetTypeID(Value);
    if (v8 == sub_1B191E200())
      v9 = Value;
    else
      v9 = 0;
    if (v7 == sub_1B191E200())
    {
      if (v9)
      {
        v17 = (unsigned __int16)v9[8];
        if (v17 != (unsigned __int16)a3[8])
        {
          sub_1B179E5A0((__int16)v17, v10, v11, v12, v13, v14, v15, v16);
          sub_1B179E5A0(a3[8], v18, v19, v20, v21, v22, v23, v24);
          sub_1B17C4408(16, (uint64_t)CFSTR("Error: type for key %@ is switching from %@ to %@, this will lead to improper animation"), v25, v26, v27, v28, v29, v30, (uint64_t)key);
        }
        goto LABEL_13;
      }
LABEL_12:
      Value = (_WORD *)sub_1B191E290(10, 1, v11, v12, v13, v14, v15, v16);
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 64), key, Value);
      CFRelease(Value);
LABEL_13:
      v31 = (void *)sub_1B191E41C((uint64_t)Value, v10, v11, v12, v13, v14, v15, v16);
      sub_1B191E598((uint64_t)a3, v31, v32, v33, v34, v35, v36, v37);
      Value[8] = sub_1B191E464((uint64_t)a3, v38, v39, v40, v41, v42, v43, v44);
      return;
    }
  }
  else if (v7 == sub_1B191E200())
  {
    goto LABEL_12;
  }
  CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 64), key, a3);
}

uint64_t sub_1B19D4A68(uint64_t a1)
{
  return *(unsigned int *)(a1 + 72);
}

uint64_t sub_1B19D4A70(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  void *v4;
  _QWORD v6[5];

  v4 = *(void **)(a1 + 64);
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = sub_1B19D4AC4;
  v6[3] = &unk_1E63DAD18;
  v6[4] = a2;
  return objc_msgSend_enumerateKeysAndObjectsUsingBlock_(v4, a2, (uint64_t)v6, a4);
}

uint64_t sub_1B19D4AC4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_1B19D4AD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  void *v10;
  const char *v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _QWORD v26[5];
  _BYTE v27[128];
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v5 = *(void **)(a1 + 64);
  if ((unint64_t)objc_msgSend_count(v5, (const char *)a2, a3, a4) > 1)
  {
    v10 = (void *)objc_msgSend_allKeys(v5, v6, v7, v8);
    v13 = (void *)objc_msgSend_sortedArrayUsingSelector_(v10, v11, (uint64_t)sel_compare_, v12);
    v22 = 0u;
    v23 = 0u;
    v24 = 0u;
    v25 = 0u;
    result = objc_msgSend_countByEnumeratingWithState_objects_count_(v13, v14, (uint64_t)&v22, (uint64_t)v27, 16);
    if (result)
    {
      v17 = result;
      v18 = *(_QWORD *)v23;
      do
      {
        v19 = 0;
        do
        {
          if (*(_QWORD *)v23 != v18)
            objc_enumerationMutation(v13);
          v20 = *(_QWORD *)(*((_QWORD *)&v22 + 1) + 8 * v19);
          v21 = objc_msgSend_objectForKeyedSubscript_(v5, v15, v20, v16);
          (*(void (**)(uint64_t, uint64_t, uint64_t))(a2 + 16))(a2, v20, v21);
          ++v19;
        }
        while (v17 != v19);
        result = objc_msgSend_countByEnumeratingWithState_objects_count_(v13, v15, (uint64_t)&v22, (uint64_t)v27, 16);
        v17 = result;
      }
      while (result);
    }
  }
  else
  {
    v26[0] = MEMORY[0x1E0C809B0];
    v26[1] = 3221225472;
    v26[2] = sub_1B19D4C3C;
    v26[3] = &unk_1E63DAD18;
    v26[4] = a2;
    return objc_msgSend_enumerateKeysAndObjectsUsingBlock_(v5, v6, (uint64_t)v26, v8);
  }
  return result;
}

uint64_t sub_1B19D4C3C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

id sub_1B19D4C4C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  CFRelease(*(CFTypeRef *)(a1 + 64));
  return sub_1B193E38C(a1, v2, v3, v4, v5, v6, v7, v8);
}

CFStringRef sub_1B19D4C74(const void *a1)
{
  const __CFAllocator *v1;

  v1 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v1, 0, CFSTR("<CFXKeyValueStore>"));
}

CFStringRef sub_1B19D4C94(const void *a1)
{
  const __CFAllocator *v1;

  v1 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v1, 0, CFSTR("<CFXKeyValueStore>"));
}

void *sub_1B19D4CB4(uint64_t a1, void *__dst, void *__src, size_t __n)
{
  void *result;

  result = memcpy(__dst, __src, __n);
  ++*(_DWORD *)(a1 + 72);
  return result;
}

uint64_t sub_1B19D4CEC(uint64_t *a1)
{
  uint64_t result;

  result = sub_1B179CB60(a1);
  *a1 = result;
  return result;
}

uint64_t sub_1B19D4D18(int a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;

  if (qword_1ED4D0648 != -1)
    dispatch_once_f(&qword_1ED4D0648, &qword_1ED4CEAC8, (dispatch_function_t)sub_1B19D4CEC);
  v4 = sub_1B179CB90(qword_1ED4CEAC8, 0x18uLL);
  v5 = v4;
  *(_DWORD *)(v4 + 32) = a1;
  v6 = *(_DWORD *)(v4 + 28);
  if (v6 != a2)
  {
    sub_1B19D50E0(v4, v6 * a1, (a2 * a1));
    *(_DWORD *)(v5 + 28) = a2;
  }
  return v5;
}

uint64_t sub_1B19D4DAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"array");
  return *(unsigned int *)(a1 + 24);
}

uint64_t sub_1B19D4DF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"array");
  return *(unsigned int *)(a1 + 28);
}

uint64_t sub_1B19D4E3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (!a1)
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"array");
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), v10, v11, v12, v13, v14, v15, (uint64_t)"array");
  }
  if (*(unsigned int *)(a1 + 24) <= a2)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. index out of bounds"), a3, a4, a5, a6, a7, a8, (uint64_t)"index < CFXArrayGetCount(array)");
  return *(_QWORD *)(a1 + 16) + *(unsigned int *)(a1 + 32) * a2;
}

uint64_t sub_1B19D4ED4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"array");
  return *(_QWORD *)(a1 + 16);
}

void sub_1B19D4F1C(uint64_t a1, int a2)
{
  int v3;

  v3 = *(_DWORD *)(a1 + 28);
  if (v3 != a2)
  {
    sub_1B19D50E0(a1, *(_DWORD *)(a1 + 32) * v3, (*(_DWORD *)(a1 + 32) * a2));
    *(_DWORD *)(a1 + 28) = a2;
  }
}

void sub_1B19D4F5C(_DWORD *a1, unsigned int a2)
{
  unsigned int v4;

  if (a1[6] != a2)
  {
    v4 = a1[7];
    if (v4 < a2)
    {
      sub_1B19D50E0((uint64_t)a1, a1[8] * v4, a1[8] * a2);
      a1[7] = a2;
    }
    a1[6] = a2;
  }
}

void *sub_1B19D4FB0(uint64_t a1, void *__src)
{
  int v4;
  int v5;
  size_t v6;
  void *v7;

  v4 = *(_DWORD *)(a1 + 24);
  if (v4 == *(_DWORD *)(a1 + 28))
  {
    v5 = v4 ? 2 * v4 : 4;
    if (v4 != v5)
    {
      sub_1B19D50E0(a1, *(_DWORD *)(a1 + 32) * v4, (*(_DWORD *)(a1 + 32) * v5));
      *(_DWORD *)(a1 + 28) = v5;
      v4 = *(_DWORD *)(a1 + 24);
    }
  }
  v6 = *(unsigned int *)(a1 + 32);
  v7 = (void *)(*(_QWORD *)(a1 + 16) + (v6 * v4));
  if (__src)
    memcpy(v7, __src, v6);
  else
    bzero(v7, *(unsigned int *)(a1 + 32));
  ++*(_DWORD *)(a1 + 24);
  return v7;
}

void sub_1B19D5054(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"array");
  if (*(_DWORD *)(a1 + 24))
  {
    v10 = 0;
    do
    {
      (*(void (**)(uint64_t, unint64_t, _QWORD))(a2 + 16))(a2, v10, *(_QWORD *)(a1 + 16) + (*(_DWORD *)(a1 + 32) * v10));
      ++v10;
    }
    while (v10 < *(unsigned int *)(a1 + 24));
  }
}

void sub_1B19D50E0(uint64_t a1, unsigned int a2, size_t size)
{
  void *v4;
  unsigned int v5;
  size_t v6;
  char *v8;
  size_t v9;
  char *v10;

  v4 = *(void **)(a1 + 16);
  if ((_DWORD)size)
  {
    v5 = size;
    v6 = size;
    if (!v4)
    {
      v10 = (char *)sub_1B179E244(size);
      *(_QWORD *)(a1 + 16) = v10;
      v9 = v6;
      goto LABEL_8;
    }
    v8 = (char *)malloc_type_realloc(v4, size, 0xA4107331uLL);
    *(_QWORD *)(a1 + 16) = v8;
    v9 = v5 - a2;
    if (v5 > a2)
    {
      v10 = &v8[a2];
LABEL_8:
      bzero(v10, v9);
    }
  }
  else
  {
    free(v4);
    *(_QWORD *)(a1 + 16) = 0;
  }
}

void sub_1B19D5174(uint64_t a1)
{
  free(*(void **)(a1 + 16));
}

CFStringRef sub_1B19D517C(unsigned int *a1)
{
  const __CFAllocator *v2;

  v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<CFXArray %p:, %d objects>"), a1, a1[6]);
}

CFStringRef sub_1B19D51BC(unsigned int *a1)
{
  const __CFAllocator *v2;

  v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<CFXArray %p:, %d objects>"), a1, a1[6]);
}

void sub_1B19D5840(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = objc_msgSend_geometryRef(*(void **)(a1 + 32), a2, a3, a4);
  sub_1B19DDAA0(v5, *(unsigned __int8 *)(a1 + 40), v6, v7, v8, v9, v10, v11);
}

void sub_1B19D5984(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = objc_msgSend_geometryRef(*(void **)(a1 + 32), a2, a3, a4);
  sub_1B19DD294(v5, *(float *)(a1 + 40), v6, v7, v8, v9, v10, v11, v12);
}

void sub_1B19D5AC0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = objc_msgSend_geometryRef(*(void **)(a1 + 32), a2, a3, a4);
  sub_1B19DD358(v5, *(float *)(a1 + 40), v6, v7, v8, v9, v10, v11, v12);
}

void sub_1B19D5C04(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = objc_msgSend_geometryRef(*(void **)(a1 + 32), a2, a3, a4);
  sub_1B19DD41C(v5, *(float *)(a1 + 40), v6, v7, v8, v9, v10, v11, v12);
}

void sub_1B19D5D3C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = objc_msgSend_geometryRef(*(void **)(a1 + 32), a2, a3, a4);
  sub_1B19DD6B0(v5, *(float *)(a1 + 40), v6, v7, v8, v9, v10, v11, v12);
}

void sub_1B19D5E68(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = objc_msgSend_geometryRef(*(void **)(a1 + 32), a2, a3, a4);
  sub_1B19DD4E0(v5, *(_BYTE *)(a1 + 40), v6, v7, v8, v9, v10, v11);
}

void sub_1B19D5FA8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;

  v5 = objc_msgSend_geometryRef(*(void **)(a1 + 32), a2, a3, a4);
  sub_1B19DD7EC(v5, *(void **)(*(_QWORD *)(a1 + 32) + 208));
}

void sub_1B19D60EC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = objc_msgSend_geometryRef(*(void **)(a1 + 32), a2, a3, a4);
  sub_1B19DD92C(v5, *(unsigned __int8 *)(a1 + 40), v6, v7, v8, v9, v10, v11);
}

void sub_1B19D62E0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;

  v5 = objc_msgSend_geometryRef(*(void **)(a1 + 32), a2, a3, a4);
  sub_1B19DD844(v5, *(void **)(a1 + 40));
}

void sub_1B19D64CC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v5 = objc_msgSend_geometryRef(*(void **)(a1 + 32), a2, a3, a4);
  sub_1B19DD974(v5, 1, v6, v7, v8, v9, v10, v11);
  v15 = objc_msgSend_geometryRef(*(void **)(a1 + 32), v12, v13, v14);
  sub_1B19DD990(v15, *(CGFloat *)(*(_QWORD *)(a1 + 32) + 240), *(CGFloat *)(*(_QWORD *)(a1 + 32) + 248), *(CGFloat *)(*(_QWORD *)(a1 + 32) + 256), *(CGFloat *)(*(_QWORD *)(a1 + 32) + 264));
}

uint64_t sub_1B19D6584(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v8;
  uint64_t result;
  uint64_t vars0;

  switch(a1)
  {
    case 0:
      v8 = (uint64_t *)MEMORY[0x1E0CD31A0];
      goto LABEL_7;
    case 1:
      v8 = (uint64_t *)MEMORY[0x1E0CD31A8];
      goto LABEL_7;
    case 2:
      v8 = (uint64_t *)MEMORY[0x1E0CD3190];
      goto LABEL_7;
    case 3:
      v8 = (uint64_t *)MEMORY[0x1E0CD3198];
LABEL_7:
      result = *v8;
      break;
    default:
      sub_1B17C4408(16, (uint64_t)CFSTR("Unreachable code: CATextAlignmentModeFromCFXTextAlignmentMode unknown mode"), a3, a4, a5, a6, a7, a8, vars0);
      result = 0;
      break;
  }
  return result;
}

void sub_1B19D6734(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = objc_msgSend_geometryRef(*(void **)(a1 + 32), a2, a3, a4);
  sub_1B19DD8E4(v5, *(_DWORD *)(a1 + 40), v6, v7, v8, v9, v10, v11);
}

uint64_t sub_1B19D67C8(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v8;
  uint64_t result;
  uint64_t vars0;

  switch(a1)
  {
    case 0:
      v8 = (uint64_t *)MEMORY[0x1E0CD2908];
      goto LABEL_8;
    case 1:
      v8 = (uint64_t *)MEMORY[0x1E0CD2900];
      goto LABEL_8;
    case 2:
      v8 = (uint64_t *)MEMORY[0x1E0CD2910];
      goto LABEL_8;
    case 3:
      v8 = (uint64_t *)MEMORY[0x1E0CD28F0];
      goto LABEL_8;
    case 4:
      v8 = (uint64_t *)MEMORY[0x1E0CD28F8];
LABEL_8:
      result = *v8;
      break;
    default:
      sub_1B17C4408(16, (uint64_t)CFSTR("Unreachable code: CATextAlignmentModeFromCFXTextAlignmentMode unknown mode"), a3, a4, a5, a6, a7, a8, vars0);
      result = 0;
      break;
  }
  return result;
}

void sub_1B19D69A4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = objc_msgSend_geometryRef(*(void **)(a1 + 32), a2, a3, a4);
  sub_1B19DD89C(v5, *(_DWORD *)(a1 + 40), v6, v7, v8, v9, v10, v11);
}

void sub_1B19D6ADC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;

  v5 = objc_msgSend_geometryRef(*(void **)(a1 + 32), a2, a3, a4);
  sub_1B19DD638(v5, *(void **)(a1 + 40));
}

uint64_t sub_1B19D74B4(uint64_t a1, uint64_t a2, const void *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v18;

  if (!a3)
    return 0;
  v18 = xmmword_1E63DAD58;
  v4 = sub_1B181F420();
  sub_1B181F5B0(v4, &v18, v5, v6, v7, v8, v9, v10);
  sub_1B181F530(v4, a3, v11, v12, v13, v14, v15, v16);
  return v4;
}

uint64_t sub_1B19D7514()
{
  return 1;
}

uint64_t sub_1B19D751C()
{
  return 1;
}

uint64_t sub_1B19D75D0(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  _QWORD v5[5];
  _QWORD v6[5];
  _QWORD v7[5];

  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = sub_1B19D77E8;
  v7[3] = &unk_1E63DAD70;
  v7[4] = a4;
  v5[4] = a4;
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = sub_1B19D785C;
  v6[3] = &unk_1E63DAD98;
  v6[4] = a4;
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = sub_1B19D78C4;
  v5[3] = &unk_1E63DADC0;
  return objc_msgSend_renderToTexture_computeCommandHandler_blitCommandHandler_completionHandler_helper_(a1, a2, (uint64_t)a2, (uint64_t)v7, v6, v5, a3);
}

uint64_t sub_1B19D77E8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void **v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t EncoderAndResetCache;

  if (a2)
  {
    v5 = (void **)objc_msgSend_resourceComputeEncoder(*(void **)(result + 32), (const char *)a2, a3, a4);
    if ((objc_msgSend_isEncoding(*v5, v6, v7, v8) & 1) == 0)
      sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. We should have a compute command encoder open at this point"), v10, v11, v12, v13, v14, v15, (uint64_t)"vfxComputeEncoder->isEncoding()");
    EncoderAndResetCache = objc_msgSend_getEncoderAndResetCache(*v5, v9, v10, v11);
    return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a2, EncoderAndResetCache);
  }
  return result;
}

uint64_t sub_1B19D785C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a2)
  {
    if (!*(_QWORD *)objc_msgSend_resourceBlitEncoder(*(void **)(result + 32), (const char *)a2, a3, a4))
      sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. We should have a blit command encoder open at this point"), v5, v6, v7, v8, v9, v10, (uint64_t)"vfxBlitEncoder->isEncoding()");
    return (*(uint64_t (**)(uint64_t))(a2 + 16))(a2);
  }
  return result;
}

uint64_t sub_1B19D78C4(uint64_t result, const char *a2, uint64_t a3, uint64_t a4)
{
  void **v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (a2)
  {
    v5 = (void **)objc_msgSend_resourceComputeEncoder(*(void **)(result + 32), a2, a3, a4);
    if ((objc_msgSend_isEncoding(*v5, v6, v7, v8) & 1) == 0)
      sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. We should have a compute command encoder open at this point"), v10, v11, v12, v13, v14, v15, (uint64_t)"vfxComputeEncoder->isEncoding()");
    return objc_msgSend_addCompletedHandler_(v5[1], v9, (uint64_t)a2, v11);
  }
  return result;
}

uint64_t sub_1B19D792C(uint64_t a1)
{
  _QWORD *i;
  uint64_t v3;
  _QWORD *j;
  _QWORD *k;
  uint64_t v6;
  _QWORD *m;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;

  for (i = *(_QWORD **)(a1 + 160); i; i = (_QWORD *)*i)
  {
    v3 = i[3];
    if (v3)
      MEMORY[0x1B5E22E18](v3, 0x1020C4055CCDE27);
  }
  for (j = *(_QWORD **)(a1 + 120); j; j = (_QWORD *)*j)
    sub_1B19D7A8C((uint64_t *)a1, j[2], 0);
  for (k = *(_QWORD **)(a1 + 200); k; k = (_QWORD *)*k)
  {
    v6 = k[3];
    if (v6)
      MEMORY[0x1B5E22E18](v6, 0x20C40A4A59CD2);
  }
  for (m = *(_QWORD **)(a1 + 80); m; m = (_QWORD *)*m)
    sub_1B19D7BE8((uint64_t *)a1, m[2], 0);
  sub_1B19DA5AC((_QWORD *)(a1 + 144));
  sub_1B19DA5AC((_QWORD *)(a1 + 104));
  sub_1B19DA5AC((_QWORD *)(a1 + 184));
  sub_1B19DA5AC((_QWORD *)(a1 + 224));
  *(_QWORD *)(a1 + 272) = *(_QWORD *)(a1 + 264);
  *(_QWORD *)(a1 + 296) = *(_QWORD *)(a1 + 288);
  *(_QWORD *)(a1 + 320) = *(_QWORD *)(a1 + 312);
  *(_QWORD *)(a1 + 344) = *(_QWORD *)(a1 + 336);
  sub_1B19DA5AC((_QWORD *)(a1 + 64));

  objc_msgSend_removeAllObjects(*(void **)(a1 + 384), v8, v9, v10);
  result = objc_msgSend_removeAllObjects(*(void **)(a1 + 392), v11, v12, v13);
  *(_QWORD *)(a1 + 440) = 0;
  *(_QWORD *)(a1 + 360) = 0;
  *(_QWORD *)(a1 + 368) = 0;
  *(_QWORD *)(a1 + 416) = 0;
  *(_QWORD *)(a1 + 424) = 0;
  *(_QWORD *)(a1 + 408) = 0;
  return result;
}

uint64_t *sub_1B19D7A8C(uint64_t *result, uint64_t a2, int a3)
{
  uint64_t *v4;
  _QWORD *v5;
  const char *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  _QWORD *v16;
  unint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v21 = a2;
  if (a2)
  {
    v4 = result;
    v5 = result + 13;
    result = sub_1B179C868(result + 13, &v21);
    if (result)
    {
      v8 = result;
      v9 = result[3];
      v10 = *(_DWORD *)(v9 + 12) - 1;
      *(_DWORD *)(v9 + 12) = v10;
      if (!v10)
      {
        v11 = *(_QWORD *)(v9 + 24);
        if (v11)
          objc_msgSend_removeObject_((void *)v4[48], v6, v11, v7);
        v12 = *(_QWORD *)(v9 + 32);
        if (v12)
          objc_msgSend_removeObject_((void *)v4[48], v6, v12, v7);
        v13 = *(_QWORD *)(v9 + 40);
        if (v13)
          objc_msgSend_removeObject_((void *)v4[48], v6, v13, v7);
        v14 = *(void **)(v9 + 48);
        if (v14)
        {
          objc_msgSend_removeObject_((void *)v4[48], v6, *(_QWORD *)(v9 + 48), v7);

        }
        v15 = *(void **)(v9 + 56);
        if (v15)
        {
          objc_msgSend_removeObject_((void *)v4[48], v6, *(_QWORD *)(v9 + 56), v7);

        }
        v16 = *(_QWORD **)(v9 + 72);
        if (v16 != *(_QWORD **)(v9 + 64))
        {
          v17 = 0;
          v18 = 1;
          v16 = *(_QWORD **)(v9 + 64);
          do
          {
            v19 = v16[v17];
            v20 = *(_QWORD *)(v19 + 8);
            if (v20)
              objc_msgSend_removeObject_((void *)v4[48], v6, v20, v7);
            sub_1B19D7BE8(v4, *(_QWORD *)(v19 + 16), 1);
            v17 = v18;
            v16 = *(_QWORD **)(v9 + 64);
            ++v18;
          }
          while (v17 < (uint64_t)(*(_QWORD *)(v9 + 72) - (_QWORD)v16) >> 3);
        }
        if (v16)
        {
          *(_QWORD *)(v9 + 72) = v16;
          operator delete(v16);
        }
        result = (uint64_t *)MEMORY[0x1B5E22E18](v9, 0x10A0C40E64107A1);
        if (a3)
          return (uint64_t *)sub_1B179C954(v5, v8);
      }
    }
  }
  return result;
}

uint64_t *sub_1B19D7BE8(uint64_t *result, uint64_t a2, int a3)
{
  uint64_t *v4;
  _QWORD *v5;
  const char *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;
  void *v11;
  uint64_t i;
  uint64_t v13;
  uint64_t v14;

  v14 = a2;
  if (a2)
  {
    v4 = result;
    v5 = result + 8;
    result = sub_1B179C868(result + 8, &v14);
    if (result)
    {
      v8 = result;
      v9 = result[3];
      v10 = *(_DWORD *)(v9 + 8) - 1;
      *(_DWORD *)(v9 + 8) = v10;
      if (!v10)
      {
        v11 = *(void **)(v9 + 208);
        if (v11)
        {
          objc_msgSend_removeObject_((void *)v4[48], v6, *(_QWORD *)(v9 + 208), v7);

        }
        for (i = 48; i != 240; i += 48)
        {
          v13 = *(_QWORD *)(v9 + i);
          if (v13)
            objc_msgSend_removeObject_((void *)v4[48], v6, v13, v7);
        }
        result = (uint64_t *)MEMORY[0x1B5E22E18](v9, 0x10A0C403610E37CLL);
        if (a3)
          return (uint64_t *)sub_1B179C954(v5, v8);
      }
    }
  }
  return result;
}

uint64_t sub_1B19D7CB4(uint64_t *a1)
{
  uint64_t result;

  result = sub_1B179CB60(a1);
  *a1 = result;
  return result;
}

uint64_t sub_1B19D7CE0()
{
  uint64_t v0;

  if (qword_1EEF66EE8 != -1)
    dispatch_once_f(&qword_1EEF66EE8, &qword_1EEF66EE0, (dispatch_function_t)sub_1B19D7CB4);
  v0 = sub_1B179CB90(qword_1EEF66EE0, 0x1D0uLL);
  *(_OWORD *)(v0 + 64) = 0u;
  *(_OWORD *)(v0 + 80) = 0u;
  *(_DWORD *)(v0 + 96) = 1065353216;
  *(_OWORD *)(v0 + 104) = 0u;
  *(_OWORD *)(v0 + 120) = 0u;
  *(_DWORD *)(v0 + 136) = 1065353216;
  *(_OWORD *)(v0 + 144) = 0u;
  *(_OWORD *)(v0 + 160) = 0u;
  *(_DWORD *)(v0 + 176) = 1065353216;
  *(_OWORD *)(v0 + 184) = 0u;
  *(_OWORD *)(v0 + 200) = 0u;
  *(_DWORD *)(v0 + 216) = 1065353216;
  *(_OWORD *)(v0 + 224) = 0u;
  *(_OWORD *)(v0 + 240) = 0u;
  *(_DWORD *)(v0 + 256) = 1065353216;
  *(_QWORD *)(v0 + 464) = 0;
  *(_QWORD *)(v0 + 472) = 0;
  *(_QWORD *)(v0 + 456) = 0;
  *(_BYTE *)(v0 + 48) = 0;
  *(_OWORD *)(v0 + 16) = 0u;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 264) = 0u;
  *(_OWORD *)(v0 + 280) = 0u;
  *(_OWORD *)(v0 + 296) = 0u;
  *(_OWORD *)(v0 + 312) = 0u;
  *(_OWORD *)(v0 + 328) = 0u;
  *(_OWORD *)(v0 + 344) = 0u;
  *(_QWORD *)(v0 + 56) = 0xBFF0000000000000;
  *(_QWORD *)(v0 + 360) = 0;
  *(_QWORD *)(v0 + 368) = 0;
  *(_OWORD *)(v0 + 384) = 0u;
  *(_OWORD *)(v0 + 400) = 0u;
  *(_OWORD *)(v0 + 416) = 0u;
  *(_OWORD *)(v0 + 432) = 0u;
  *(_DWORD *)(v0 + 448) = 16843009;
  *(_DWORD *)(v0 + 451) = 16843009;
  *(_QWORD *)(v0 + 384) = objc_opt_new();
  *(_QWORD *)(v0 + 392) = objc_opt_new();
  return v0;
}

uint64_t sub_1B19D7DD8(uint64_t result, unsigned int a2)
{
  uint64_t v2;

  v2 = 0;
  *(int16x4_t *)(result + 40) = vadd_s16(*(int16x4_t *)(result + 40), (int16x4_t)vand_s8((int8x8_t)vmovn_s32((int32x4_t)vshlq_u32((uint32x4_t)vdupq_n_s32(a2), (uint32x4_t)xmmword_1B2268FB0)), (int8x8_t)0x1000100010001));
  *(_BYTE *)(result + 48) = 0;
  while (!*(_WORD *)(result + 40 + v2))
  {
    v2 += 2;
    if (v2 == 8)
      goto LABEL_6;
  }
  *(_BYTE *)(result + 448) = 1;
  *(_BYTE *)(result + 48) = 1;
LABEL_6:
  *(_WORD *)(result + 449) = 257;
  *(_BYTE *)(result + 451) = 1;
  *(_BYTE *)(result + 453) = 1;
  return result;
}

int16x4_t *sub_1B19D7E4C(int16x4_t *result, unsigned int a2)
{
  uint64_t v2;

  v2 = 0;
  result[5] = vadd_s16(result[5], vmovn_s32(vcltzq_s32((int32x4_t)vshlq_u32((uint32x4_t)vdupq_n_s32(a2), (uint32x4_t)xmmword_1B2268FC0))));
  result[6].i8[0] = 0;
  while (!result[5].i16[v2])
  {
    if (++v2 == 4)
      return result;
  }
  result[56].i8[0] = 1;
  result[6].i8[0] = 1;
  return result;
}

uint64_t sub_1B19D7EA4(uint64_t result, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  void *v5;
  const char *v6;
  uint64_t v7;
  const char *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;

  if (!*(_QWORD *)(result + 432))
  {
    v4 = result;
    v5 = (void *)objc_msgSend_arrayWithCapacity_(MEMORY[0x1E0C99DE8], a2, 1, a4);
    v7 = objc_msgSend_newFunctionWithName_constants_library_(*(void **)(v4 + 32), v6, (uint64_t)CFSTR("sphereIntersectionFunction"), 0, 0);
    objc_msgSend_setObject_atIndexedSubscript_(v5, v8, v7, 0);
    result = objc_msgSend_copy(v5, v9, v10, v11);
    *(_QWORD *)(v4 + 432) = result;
  }
  return result;
}

void sub_1B19D7F10(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  char *v4;
  char *v5;
  unsigned int v6;
  uint64_t v8;
  unsigned int v9;
  char *v10;
  unsigned int v11;
  char *v12;
  char *v13;
  int64_t v14;

  v4 = *(char **)(a1 + 456);
  v5 = *(char **)(a1 + 464);
  if (v5 != v4)
  {
    v6 = a2;
    v8 = 0;
    v9 = 0;
    do
    {
      v10 = &v4[16 * v8];
      v11 = *((_DWORD *)v10 + 2) + 1;
      *((_DWORD *)v10 + 2) = v11;
      if (v11 <= v6)
      {
        ++v9;
      }
      else
      {
        objc_msgSend_setPurgeableState_(*(void **)&v4[16 * v8], a2, 4, a4);

        v4 = *(char **)(a1 + 456);
        v12 = *(char **)(a1 + 464);
        v13 = &v4[16 * v8];
        *(_QWORD *)v13 = 0;
        a2 = v13 + 16;
        v14 = v12 - (v13 + 16);
        if (v12 != v13 + 16)
        {
          memmove(v13, a2, v14 - 4);
          v4 = *(char **)(a1 + 456);
        }
        v5 = &v13[v14];
        *(_QWORD *)(a1 + 464) = &v13[v14];
      }
      v8 = v9;
    }
    while (v9 < (unint64_t)((v5 - v4) >> 4));
  }
}

uint64_t sub_1B19D7FD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const __CFDictionary *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const __CFDictionary *v26;
  _QWORD *v27;
  const __CFDictionary *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  const __CFDictionary *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  const char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  const void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t *v81;

  v80 = a2;
  result = sub_1B186C6D8(a2, a2, a3, a4, a5, a6, a7, a8);
  if ((result & 1) == 0)
  {
    result = sub_1B186E064(a2);
    if ((int)result <= 0)
    {
      v18 = sub_1B1868FE8(a2, v11, v12, v13, v14, v15, v16, v17);
      if (v18)
      {
        v26 = v18;
        if (sub_1B186064C((uint64_t)v18, v19, v20, v21, v22, v23, v24, v25) - 1 <= 2
          && !sub_1B179C868((_QWORD *)(a1 + 184), &v80))
        {
          v27 = (_QWORD *)operator new();
          *v27 = v80;
          v27[1] = v26;
          v81 = &v80;
          sub_1B19DA610(a1 + 184, &v80, (uint64_t)&unk_1B22458B0, &v81)[3] = v27;
          *(_BYTE *)(a1 + 451) = 1;
        }
      }
      v28 = sub_1B1869D88(v80, v19, v20, v21, v22, v23, v24, v25);
      if (v28)
      {
        v36 = v28;
        if (!sub_1B179C868((_QWORD *)(a1 + 224), &v80))
        {
          v37 = operator new();
          *(_DWORD *)v37 = 0;
          *(_QWORD *)(v37 + 8) = v80;
          *(_QWORD *)(v37 + 16) = v36;
          v81 = &v80;
          sub_1B19DA864(a1 + 224, &v80, (uint64_t)&unk_1B22458B0, &v81)[3] = v37;
          if (!sub_1B179C868((_QWORD *)(a1 + 144), &v80))
          {
            v38 = operator new();
            *(_QWORD *)v38 = v80;
            *(_QWORD *)(v38 + 8) = 0;
            *(_QWORD *)(v38 + 16) = v37;
            v45 = (void *)sub_1B18F4794(v36, 1, v39, v40, v41, v42, v43, v44);
            *(_DWORD *)(v38 + 24) = objc_msgSend_isLocal(v45, v46, v47, v48) ^ 1;
            *(_QWORD *)(v38 + 8) = 0;
            v81 = &v80;
            sub_1B19DAAB8(a1 + 144, &v80, (uint64_t)&unk_1B22458B0, &v81)[3] = v38;
          }
          *(_BYTE *)(a1 + 452) = 1;
          *(_BYTE *)(a1 + 449) = 1;
        }
      }
      result = sub_1B1868FA0(v80, v29, v30, v31, v32, v33, v34, v35);
      v79 = result;
      if (result)
      {
        v56 = result;
        v57 = sub_1B17A0848(result, v49, v50, v51, v52, v53, v54, v55);
        v62 = sub_1B1875540(v57, 0, 0, 1, v58, v59, v60, v61);
        LODWORD(v57) = sub_1B1874BE0(v57, v63, v64, v65, v66, v67, v68, v69);
        result = (uint64_t)sub_1B17A08A0(v56, v70, v71, v72, v73, v74, v75, v76);
        if ((_DWORD)v57)
        {
          if ((_DWORD)result && v62)
          {
            if (!sub_1B179C868((_QWORD *)(a1 + 104), &v79))
              sub_1B19D82D0(a1, v79);
            result = (uint64_t)sub_1B179C868((_QWORD *)(a1 + 144), &v80);
            if (!result)
            {
              v77 = (_QWORD *)operator new();
              v77[1] = 0;
              v77[2] = 0;
              *v77 = v80;
              v81 = &v79;
              v78 = sub_1B19DAD0C(a1 + 104, &v79, (uint64_t)&unk_1B22458B0, &v81)[3];
              v77[1] = v78;
              ++*(_DWORD *)(v78 + 12);
              v81 = &v80;
              result = (uint64_t)sub_1B19DAAB8(a1 + 144, &v80, (uint64_t)&unk_1B22458B0, &v81);
              *(_QWORD *)(result + 24) = v77;
            }
            *(_WORD *)(a1 + 449) = 257;
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_1B19D82D0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  uint64_t v26;
  uint64_t *v27;

  v26 = a2;
  v2 = a1 + 104;
  v3 = sub_1B179C868((_QWORD *)(a1 + 104), &v26);
  if (v3)
  {
    v4 = v3[3];
    ++*(_DWORD *)(v4 + 12);
  }
  else
  {
    v4 = operator new();
    *(_QWORD *)(v4 + 16) = 0;
    *(_BYTE *)(v4 + 16) = 1;
    *(_OWORD *)(v4 + 24) = 0u;
    *(_OWORD *)(v4 + 40) = 0u;
    *(_OWORD *)(v4 + 56) = 0u;
    *(_OWORD *)(v4 + 72) = 0u;
    v5 = v26;
    *(_QWORD *)v4 = v26;
    *(_QWORD *)(v4 + 8) = 0;
    *(_DWORD *)(v4 + 12) = 1;
    v13 = sub_1B17A0848(v5, v6, v7, v8, v9, v10, v11, v12);
    v21 = sub_1B1874BE0(v13, v14, v15, v16, v17, v18, v19, v20);
    sub_1B17F8000(v4 + 64, v21);
    if (v21)
    {
      v22 = 0;
      v23 = 8 * v21;
      do
      {
        v24 = (_OWORD *)operator new();
        *v24 = 0u;
        v24[1] = 0u;
        *(_QWORD *)(*(_QWORD *)(v4 + 64) + v22) = v24;
        v22 += 8;
      }
      while (v23 != v22);
    }
    v27 = &v26;
    sub_1B19DAD0C(v2, &v26, (uint64_t)&unk_1B22458B0, &v27)[3] = v4;
  }
  return v4;
}

uint64_t sub_1B19D83FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  int v11;
  unsigned int i;
  uint64_t v13;

  sub_1B19D7FD0(a1, a2, a3, a4, a5, a6, a7, a8);
  result = sub_1B186AF90(a2);
  if ((_DWORD)result)
  {
    v11 = result;
    for (i = 0; i != v11; ++i)
    {
      v13 = sub_1B186B18C(a2, i);
      result = sub_1B19D83FC(a1, v13);
    }
  }
  return result;
}

void sub_1B19D8460(uint64_t a1)
{
  char *v2;
  _QWORD *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  _QWORD *v16;
  _QWORD *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  char *v50;
  char *v51;
  char *v52;
  uint64_t v53;

  if (*(_BYTE *)(a1 + 450))
  {
    v2 = *(char **)(a1 + 288);
    *(_QWORD *)(a1 + 296) = v2;
    v3 = *(_QWORD **)(a1 + 120);
    if (v3)
    {
      v4 = (_QWORD *)(a1 + 304);
      v5 = v2;
      do
      {
        if ((unint64_t)v5 >= *v4)
        {
          v6 = (v5 - v2) >> 3;
          if ((unint64_t)(v6 + 1) >> 61)
LABEL_82:
            abort();
          v7 = *v4 - (_QWORD)v2;
          v8 = v7 >> 2;
          if (v7 >> 2 <= (unint64_t)(v6 + 1))
            v8 = v6 + 1;
          if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF8)
            v9 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v9 = v8;
          if (v9)
            v10 = (char *)sub_1B17F812C(a1 + 304, v9);
          else
            v10 = 0;
          v11 = &v10[8 * v6];
          *(_QWORD *)v11 = v3[3];
          v5 = v11 + 8;
          v13 = *(char **)(a1 + 288);
          v12 = *(char **)(a1 + 296);
          if (v12 != v13)
          {
            do
            {
              v14 = *((_QWORD *)v12 - 1);
              v12 -= 8;
              *((_QWORD *)v11 - 1) = v14;
              v11 -= 8;
            }
            while (v12 != v13);
            v12 = *(char **)(a1 + 288);
          }
          *(_QWORD *)(a1 + 288) = v11;
          *(_QWORD *)(a1 + 296) = v5;
          *(_QWORD *)(a1 + 304) = &v10[8 * v9];
          if (v12)
            operator delete(v12);
        }
        else
        {
          *(_QWORD *)v5 = v3[3];
          v5 += 8;
        }
        *(_QWORD *)(a1 + 296) = v5;
        v2 = *(char **)(a1 + 288);
        *(_DWORD *)(*((_QWORD *)v5 - 1) + 8) = ((unint64_t)(v5 - v2) >> 3) - 1;
        v3 = (_QWORD *)*v3;
      }
      while (v3);
    }
  }
  if (*(_BYTE *)(a1 + 452))
  {
    v15 = *(char **)(a1 + 336);
    *(_QWORD *)(a1 + 344) = v15;
    v16 = *(_QWORD **)(a1 + 240);
    if (v16)
    {
      v17 = (_QWORD *)(a1 + 352);
      v18 = v15;
      do
      {
        if ((unint64_t)v18 >= *v17)
        {
          v19 = (v18 - v15) >> 3;
          if ((unint64_t)(v19 + 1) >> 61)
            goto LABEL_82;
          v20 = *v17 - (_QWORD)v15;
          v21 = v20 >> 2;
          if (v20 >> 2 <= (unint64_t)(v19 + 1))
            v21 = v19 + 1;
          if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8)
            v22 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v22 = v21;
          if (v22)
            v23 = (char *)sub_1B17F812C(a1 + 352, v22);
          else
            v23 = 0;
          v24 = &v23[8 * v19];
          *(_QWORD *)v24 = v16[3];
          v18 = v24 + 8;
          v26 = *(char **)(a1 + 336);
          v25 = *(char **)(a1 + 344);
          if (v25 != v26)
          {
            do
            {
              v27 = *((_QWORD *)v25 - 1);
              v25 -= 8;
              *((_QWORD *)v24 - 1) = v27;
              v24 -= 8;
            }
            while (v25 != v26);
            v25 = *(char **)(a1 + 336);
          }
          *(_QWORD *)(a1 + 336) = v24;
          *(_QWORD *)(a1 + 344) = v18;
          *(_QWORD *)(a1 + 352) = &v23[8 * v22];
          if (v25)
            operator delete(v25);
        }
        else
        {
          *(_QWORD *)v18 = v16[3];
          v18 += 8;
        }
        *(_QWORD *)(a1 + 344) = v18;
        v15 = *(char **)(a1 + 336);
        **((_DWORD **)v18 - 1) = ((unint64_t)(v18 - v15) >> 3) - 1;
        v16 = (_QWORD *)*v16;
      }
      while (v16);
    }
  }
  if (*(_BYTE *)(a1 + 449))
  {
    v28 = *(_QWORD **)(a1 + 264);
    *(_QWORD *)(a1 + 272) = v28;
    v29 = *(_QWORD **)(a1 + 160);
    if (v29)
    {
      v30 = (_QWORD *)(a1 + 280);
      do
      {
        if ((unint64_t)v28 >= *v30)
        {
          v31 = *(_QWORD *)(a1 + 264);
          v32 = ((uint64_t)v28 - v31) >> 3;
          if ((unint64_t)(v32 + 1) >> 61)
            goto LABEL_82;
          v33 = *v30 - v31;
          v34 = v33 >> 2;
          if (v33 >> 2 <= (unint64_t)(v32 + 1))
            v34 = v32 + 1;
          if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8)
            v35 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v35 = v34;
          if (v35)
            v36 = (char *)sub_1B17F812C(a1 + 280, v35);
          else
            v36 = 0;
          v37 = &v36[8 * v32];
          *(_QWORD *)v37 = v29[3];
          v28 = v37 + 8;
          v39 = *(char **)(a1 + 264);
          v38 = *(char **)(a1 + 272);
          if (v38 != v39)
          {
            do
            {
              v40 = *((_QWORD *)v38 - 1);
              v38 -= 8;
              *((_QWORD *)v37 - 1) = v40;
              v37 -= 8;
            }
            while (v38 != v39);
            v38 = *(char **)(a1 + 264);
          }
          *(_QWORD *)(a1 + 264) = v37;
          *(_QWORD *)(a1 + 272) = v28;
          *(_QWORD *)(a1 + 280) = &v36[8 * v35];
          if (v38)
            operator delete(v38);
        }
        else
        {
          *v28++ = v29[3];
        }
        *(_QWORD *)(a1 + 272) = v28;
        v29 = (_QWORD *)*v29;
      }
      while (v29);
    }
  }
  if (*(_BYTE *)(a1 + 451))
  {
    v41 = *(_QWORD **)(a1 + 312);
    *(_QWORD *)(a1 + 320) = v41;
    v42 = *(_QWORD **)(a1 + 200);
    if (v42)
    {
      v43 = (_QWORD *)(a1 + 328);
      do
      {
        if ((unint64_t)v41 >= *v43)
        {
          v44 = *(_QWORD *)(a1 + 312);
          v45 = ((uint64_t)v41 - v44) >> 3;
          if ((unint64_t)(v45 + 1) >> 61)
            goto LABEL_82;
          v46 = *v43 - v44;
          v47 = v46 >> 2;
          if (v46 >> 2 <= (unint64_t)(v45 + 1))
            v47 = v45 + 1;
          if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFF8)
            v48 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v48 = v47;
          if (v48)
            v49 = (char *)sub_1B17F812C(a1 + 328, v48);
          else
            v49 = 0;
          v50 = &v49[8 * v45];
          *(_QWORD *)v50 = v42[3];
          v41 = v50 + 8;
          v52 = *(char **)(a1 + 312);
          v51 = *(char **)(a1 + 320);
          if (v51 != v52)
          {
            do
            {
              v53 = *((_QWORD *)v51 - 1);
              v51 -= 8;
              *((_QWORD *)v50 - 1) = v53;
              v50 -= 8;
            }
            while (v51 != v52);
            v51 = *(char **)(a1 + 312);
          }
          *(_QWORD *)(a1 + 312) = v50;
          *(_QWORD *)(a1 + 320) = v41;
          *(_QWORD *)(a1 + 328) = &v49[8 * v48];
          if (v51)
            operator delete(v51);
        }
        else
        {
          *v41++ = v42[3];
        }
        *(_QWORD *)(a1 + 320) = v41;
        v42 = (_QWORD *)*v42;
      }
      while (v42);
    }
  }
}

__n128 sub_1B19D8810(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  __n128 result;
  __int128 v15;
  __int128 v16;
  __int128 v17;

  v10 = *(_QWORD *)(a2 + 8);
  if (v10)
  {
    v11 = objc_msgSend_gpuAddress(*(void **)(v10 + 48), (const char *)a2, a3, a4);
    v12 = 0uLL;
  }
  else
  {
    v11 = 0;
    v12 = *(_OWORD *)(a3 + 16 * **(unsigned int **)(a2 + 16));
  }
  *(_QWORD *)a1 = v11;
  *(_OWORD *)(a1 + 8) = v12;
  v13 = sub_1B1869AC8(*(_QWORD *)a2, a2, a3, a4, a5, a6, a7, a8);
  result = *(__n128 *)(v13 + 32);
  v15 = *(_OWORD *)(v13 + 48);
  v17 = *(_OWORD *)v13;
  v16 = *(_OWORD *)(v13 + 16);
  *(__n128 *)(a1 + 64) = result;
  *(_OWORD *)(a1 + 80) = v15;
  *(_OWORD *)(a1 + 32) = v17;
  *(_OWORD *)(a1 + 48) = v16;
  return result;
}

void sub_1B19D8878(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  float32x4_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  int32x4_t v29;
  float32x2_t v30;
  float32x2_t v31;
  float32x4_t v32;
  float32x2_t v33;
  float32x2_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  float v43;
  int v44;

  v9 = (float32x4_t *)a2[1];
  v10 = sub_1B1869AC8(*a2, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  v18 = sub_1B186064C((uint64_t)v9, v11, v12, v13, v14, v15, v16, v17);
  switch(v18)
  {
    case 3:
      *(_DWORD *)a1 = 2;
      *(_OWORD *)(a1 + 16) = *(_OWORD *)(v10 + 48);
      v28 = *(float32x4_t *)(v10 + 32);
      v29 = (int32x4_t)vmulq_f32(v28, v28);
      v29.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v29, 2), vadd_f32(*(float32x2_t *)v29.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v29.i8, 1))).u32[0];
      v30 = vrsqrte_f32((float32x2_t)v29.u32[0]);
      v31 = vmul_f32(v30, vrsqrts_f32((float32x2_t)v29.u32[0], vmul_f32(v30, v30)));
      *(float32x4_t *)(a1 + 32) = vmulq_n_f32(v28, vmul_f32(v31, vrsqrts_f32((float32x2_t)v29.u32[0], vmul_f32(v31, v31))).f32[0]);
      sub_1B185FB00((uint64_t)v9);
      *(_QWORD *)(a1 + 64) = v26.i64[0];
      break;
    case 2:
      *(_DWORD *)a1 = 0;
      v32 = *(float32x4_t *)(v10 + 32);
      v27 = vmulq_f32(v32, v32);
      v27.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32((int32x4_t)v27, 2), vadd_f32(*(float32x2_t *)v27.f32, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v27.f32, 1))).u32[0];
      v33 = vrsqrte_f32((float32x2_t)v27.u32[0]);
      v34 = vmul_f32(v33, vrsqrts_f32((float32x2_t)v27.u32[0], vmul_f32(v33, v33)));
      *(float32x2_t *)v27.f32 = vmul_f32(v34, vrsqrts_f32((float32x2_t)v27.u32[0], vmul_f32(v34, v34)));
      v26 = vmulq_n_f32(v32, v27.f32[0]);
      *(float32x4_t *)(a1 + 32) = v26;
      break;
    case 1:
      *(_DWORD *)a1 = 1;
      v26 = *(float32x4_t *)(v10 + 48);
      *(float32x4_t *)(a1 + 16) = v26;
      break;
  }
  sub_1B1861194(v9, v19, v20, v21, v22, v23, v24, v25, v26, v27);
  *(_QWORD *)(a1 + 48) = v35;
  *(_QWORD *)(a1 + 56) = v36;
  v43 = sub_1B185F578((uint64_t)v9, v36, v37, v38, v39, v40, v41, v42) * 0.015;
  *(float *)(a1 + 72) = v43;
  sub_1B185FA80((uint64_t)v9, 1, 1.0);
  *(_DWORD *)(a1 + 76) = v44;
}

uint64_t sub_1B19D89C4(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  uint64_t result;
  const char *v26;
  uint64_t v27;
  void *v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v10 = (void *)sub_1B18F4794(*(_QWORD **)(a2 + 16), 1, a3, a4, a5, a6, a7, a8);
  v14 = (void *)objc_msgSend_particleHeaderBuffer(v10, v11, v12, v13);
  if (v14)
  {
    v18 = (uint64_t)v14;
    v19 = objc_msgSend_gpuAddress(v14, v15, v16, v17);
    *a1 = objc_msgSend_particleHeaderBufferOffset(v10, v20, v21, v22) + v19;
    objc_msgSend_addObject_(*(void **)(a3 + 392), v23, v18, v24);
  }
  else
  {
    *a1 = 0;
  }
  result = objc_msgSend_particleDataBuffer(v10, v15, v16, v17);
  if (result)
  {
    v28 = (void *)result;
    objc_msgSend_addObject_(*(void **)(a3 + 392), v26, result, v27);
    v32 = objc_msgSend_gpuAddress(v28, v29, v30, v31);
    result = objc_msgSend_particleDataBufferOffset(v10, v33, v34, v35);
    v36 = result + v32;
  }
  else
  {
    v36 = 0;
  }
  a1[1] = v36;
  return result;
}

uint64_t sub_1B19D8A7C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v9;
  uint64_t *v10;

  v9 = a2;
  v2 = a1 + 64;
  v3 = sub_1B179C868((_QWORD *)(a1 + 64), &v9);
  if (v3)
  {
    v4 = v3[3];
    ++*(_DWORD *)(v4 + 8);
  }
  else
  {
    v5 = operator new();
    v4 = v5;
    *(_OWORD *)v5 = 0u;
    *(_OWORD *)(v5 + 16) = 0u;
    *(_OWORD *)(v5 + 32) = 0u;
    *(_OWORD *)(v5 + 48) = 0u;
    *(_OWORD *)(v5 + 64) = 0u;
    *(_OWORD *)(v5 + 80) = 0u;
    *(_OWORD *)(v5 + 96) = 0u;
    *(_OWORD *)(v5 + 112) = 0u;
    *(_OWORD *)(v5 + 128) = 0u;
    *(_OWORD *)(v5 + 144) = 0u;
    *(_OWORD *)(v5 + 160) = 0u;
    *(_OWORD *)(v5 + 176) = 0u;
    *(_OWORD *)(v5 + 208) = 0u;
    *(_BYTE *)(v5 + 12) = 1;
    v6 = 16;
    *(_OWORD *)(v5 + 192) = 0u;
    do
    {
      v7 = (_QWORD *)(v5 + v6);
      *v7 = 0;
      v7[4] = 0;
      v6 += 48;
    }
    while (v7 + 6 != (_QWORD *)(v5 + 208));
    *(_QWORD *)(v5 + 208) = 0;
    *(_QWORD *)v5 = v9;
    *(_DWORD *)(v5 + 8) = 1;
    v10 = &v9;
    sub_1B19DAF60(v2, &v9, (uint64_t)&unk_1B22458B0, &v10)[3] = v5;
  }
  return v4;
}

uint64_t sub_1B19D8B74(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t i;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _OWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  const char *v39;
  float v40;
  uint64_t v41;
  uint64_t v42;
  const char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t j;
  uint64_t v48;

  if (*(_WORD *)(result + 44))
  {
    v9 = result;
    if (!*(_QWORD *)(a2 + 208))
    {
      v10 = (void *)sub_1B18FC078(*(_QWORD *)(result + 32), (const char *)0xC0, 0);
      objc_msgSend_setLabel_(v10, v11, (uint64_t)CFSTR("MaterialBuffer"), v12);
      objc_msgSend_addObject_(*(void **)(v9 + 384), v13, (uint64_t)v10, v14);
      *(_QWORD *)(a2 + 208) = v10;
    }
    v15 = (uint64_t *)(a2 + 48);
    v21 = sub_1B187813C(*(_QWORD *)a2, a2, a3, a4, a5, a6, a7, a8);
    for (i = 0; i != 4; ++i)
    {
      v23 = sub_1B1840E70(v21, asc_1B2327A9E[i], 1, v16, v17, v18, v19, v20);
      v31 = (_OWORD *)sub_1B1841910(v23, v24, v25, v26, v27, v28, v29, v30);
      v40 = sub_1B1841E14(v23, v32, v33, v34, v35, v36, v37, v38);
      v41 = *v15;
      if (*v15)
        objc_msgSend_removeObject_(*(void **)(v9 + 384), v39, v41, v16);
      if (v31)
      {
        *((_BYTE *)v15 - 24) = 0;
        *((_OWORD *)v15 - 1) = *v31;
        *v15 = 0;
      }
      else
      {
        *((_BYTE *)v15 - 24) = 1;
        v42 = objc_msgSend_textureForMaterialProperty_(*(void **)(v9 + 24), v39, v23, v16);
        *v15 = v42;
        if (v42)
          objc_msgSend_addObject_(*(void **)(v9 + 384), v39, v42, v16);
      }
      *((float *)v15 - 1) = v40;
      v15 += 6;
    }
    v46 = objc_msgSend_contents(*(void **)(a2 + 208), v39, v41, v16);
    for (j = 0; j != 192; j += 48)
    {
      v48 = v46 + j;
      *(_OWORD *)(v48 + 16) = *(_OWORD *)(a2 + j + 32);
      *(_BYTE *)v48 = *(_BYTE *)(a2 + j + 24);
      result = objc_msgSend_gpuResourceID(*(void **)(a2 + j + 48), v43, v44, v45);
      *(_QWORD *)(v48 + 32) = result;
    }
    *(_BYTE *)(a2 + 12) = 0;
  }
  return result;
}

uint64_t sub_1B19D8CE8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  void *v22;
  const char *v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  void *v27;
  const char *v28;
  uint64_t v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  const void *v47;
  const char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  const char *v57;
  uint64_t v58;
  uint64_t v59;
  const char *v60;
  uint64_t v61;
  uint64_t v62;
  const void *v63;
  const char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  const char *v73;
  uint64_t v74;
  uint64_t v75;
  const char *v76;
  uint64_t v77;
  uint64_t v78;
  const void *v79;
  const char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  void *v89;
  const char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  CFIndex v95;
  uint64_t v96;
  const void *v97;
  VFXMTLMeshElement *v98;
  BOOL *v99;
  const char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  const char *v104;
  uint64_t v105;
  uint64_t v106;
  void *v107;
  const char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  const char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unsigned int v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  const __CFArray *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  const char *v134;
  uint64_t v135;
  uint64_t v136;
  const char *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;

  if (*(_WORD *)(result + 42))
  {
    v9 = result;
    v141 = *(_QWORD *)a2;
    v10 = sub_1B17A0848(*(_QWORD *)a2, a2, a3, a4, a5, a6, a7, a8);
    v21 = sub_1B1874BE0(v10, v11, v12, v13, v14, v15, v16, v17);
    v22 = *(void **)(a2 + 48);
    if (!v22)
    {
      v22 = (void *)sub_1B18FC078(*(_QWORD *)(v9 + 32), (const char *)0x28, 0);
      objc_msgSend_setLabel_(v22, v23, (uint64_t)CFSTR("MeshBuffer"), v24);
      objc_msgSend_addObject_(*(void **)(v9 + 384), v25, (uint64_t)v22, v26);
      *(_QWORD *)(a2 + 48) = v22;
    }
    if (!*(_QWORD *)(a2 + 56))
    {
      v27 = (void *)sub_1B18FC078(*(_QWORD *)(v9 + 32), (const char *)(24 * v21), 0);
      objc_msgSend_setLabel_(v27, v28, (uint64_t)CFSTR("MeshElementBuffer"), v29);
      objc_msgSend_addObject_(*(void **)(v9 + 384), v30, (uint64_t)v27, v31);
      *(_QWORD *)(a2 + 56) = v27;
      v22 = *(void **)(a2 + 48);
    }
    v32 = objc_msgSend_contents(v22, v18, v19, v20);
    if (sub_1B17B2240(v10, v33, v34, v35, v36, v37, v38, v39))
      v10 = sub_1B17B2278(v10, v40, v41, v42, v43, v44, v45, v46);
    v47 = sub_1B1875540(v10, 0, 0, 1, v43, v44, v45, v46);
    if (v47)
    {
      v54 = (uint64_t)v47;
      v55 = *(_QWORD *)(a2 + 24);
      if (v55)
        objc_msgSend_removeObject_(*(void **)(v9 + 384), v48, v55, v49);
      v56 = sub_1B18FA92C(*(_QWORD *)(v9 + 32), v54);
      *(_QWORD *)(a2 + 24) = v56;
      *(_QWORD *)v32 = objc_msgSend_gpuAddress(v56, v57, v58, v59);
      v62 = *(_QWORD *)(a2 + 24);
      if (v62)
        objc_msgSend_addObject_(*(void **)(v9 + 384), v60, v62, v61);
    }
    v63 = sub_1B1875540(v10, 1, 0, 1, v50, v51, v52, v53);
    if (v63)
    {
      v70 = (uint64_t)v63;
      v71 = *(_QWORD *)(a2 + 32);
      if (v71)
        objc_msgSend_removeObject_(*(void **)(v9 + 384), v64, v71, v65);
      v72 = sub_1B18FA92C(*(_QWORD *)(v9 + 32), v70);
      *(_QWORD *)(a2 + 32) = v72;
      *(_QWORD *)(v32 + 8) = objc_msgSend_gpuAddress(v72, v73, v74, v75);
      v78 = *(_QWORD *)(a2 + 32);
      if (v78)
        objc_msgSend_addObject_(*(void **)(v9 + 384), v76, v78, v77);
    }
    v79 = sub_1B1875540(v10, 3, 0, 1, v66, v67, v68, v69);
    if (v79)
    {
      v87 = (uint64_t)v79;
      v88 = *(_QWORD *)(a2 + 40);
      if (v88)
        objc_msgSend_removeObject_(*(void **)(v9 + 384), v80, v88, v82);
      v89 = sub_1B18FA92C(*(_QWORD *)(v9 + 32), v87);
      *(_QWORD *)(a2 + 40) = v89;
      *(_QWORD *)(v32 + 16) = objc_msgSend_gpuAddress(v89, v90, v91, v92);
      v81 = *(_QWORD *)(a2 + 40);
      if (v81)
        objc_msgSend_addObject_(*(void **)(v9 + 384), v80, v81, v82);
    }
    v93 = *(_QWORD *)(a2 + 40);
    *(_BYTE *)(v32 + 24) = *(_QWORD *)(a2 + 32) != 0;
    *(_BYTE *)(v32 + 25) = v93 != 0;
    v94 = v21;
    if (v21)
    {
      v95 = 0;
      v96 = 8;
      do
      {
        v97 = sub_1B1874C3C(v10, v95, 1, v82, v83, v84, v85, v86);
        v98 = sub_1B18FAA70(*(_QWORD *)(v9 + 32), (uint64_t)v97);
        v99 = *(BOOL **)(*(_QWORD *)(a2 + 64) + 8 * v95);
        v103 = objc_msgSend_contents(*(void **)(a2 + 56), v100, v101, v102);
        *v99 = sub_1B1955D00((uint64_t)v98) != 1;
        v106 = *((_QWORD *)v99 + 1);
        if (v106)
          objc_msgSend_removeObject_(*(void **)(v9 + 384), v104, v106, v105);
        v107 = (void *)sub_1B1956188((uint64_t)v98);
        v111 = objc_msgSend_buffer(v107, v108, v109, v110);
        *((_QWORD *)v99 + 1) = v111;
        if (v111)
          objc_msgSend_addObject_(*(void **)(v9 + 384), v112, v111, v114);
        v119 = sub_1B17A08A0(v141, (uint64_t)v112, v113, v114, v115, v116, v117, v118);
        v126 = sub_1B17A08FC(v141, (uint64_t)fmin((double)(v119 - 1), (double)v95), v120, v121, v122, v123, v124, v125);
        v127 = sub_1B19D8A7C(v9, (uint64_t)v126);
        *((_QWORD *)v99 + 2) = v126;
        *((_QWORD *)v99 + 3) = v127;
        sub_1B19D8B74(v9, v127, v128, v129, v130, v131, v132, v133);
        *(_DWORD *)(v103 + v96 - 8) = *v99;
        *(_QWORD *)(v103 + v96) = objc_msgSend_gpuAddress(*((void **)v99 + 1), v134, v135, v136);
        *(_QWORD *)(v103 + v96 + 8) = objc_msgSend_gpuAddress(*(void **)(*((_QWORD *)v99 + 3) + 208), v137, v138, v139);
        ++v95;
        v96 += 24;
      }
      while (v94 != v95);
    }
    result = objc_msgSend_gpuAddress(*(void **)(a2 + 56), v80, v81, v82, v32);
    *(_QWORD *)(v140 + 32) = result;
    *(_BYTE *)(a2 + 16) = 0;
  }
  return result;
}

void sub_1B19D9034(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  unint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v4 = *(_QWORD *)(a1 + 272) - *(_QWORD *)(a1 + 264);
  if (v4)
  {
    v6 = 0;
    v7 = v4 >> 3;
    v8 = 1;
    do
    {
      v9 = *(_QWORD *)(*(_QWORD *)(a1 + 264) + 8 * v6);
      v10 = objc_msgSend_contents(*(void **)(a1 + 368), a2, a3, a4) + 96 * v6;
      v14 = objc_msgSend_contents(*(void **)(a1 + 376), v11, v12, v13);
      sub_1B19D8810(v10, v9, v14, v15, v16, v17, v18, v19);
      v6 = v8;
    }
    while (v7 > v8++);
  }
}

void sub_1B19D90B8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  void *v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;

  if (*(_WORD *)(a1 + 42))
  {
    v5 = *(void **)(a1 + 368);
    if (v5)
    {
      objc_msgSend_removeObject_(*(void **)(a1 + 384), a2, (uint64_t)v5, a4);

    }
    *(_QWORD *)(a1 + 368) = 0;
    v6 = *(_QWORD *)(a1 + 272) - *(_QWORD *)(a1 + 264);
    if (v6)
    {
      v7 = (void *)sub_1B18FC078(*(_QWORD *)(a1 + 32), (const char *)(32 * ((v6 >> 2) + (v6 >> 3))), 0);
      objc_msgSend_setLabel_(v7, v8, (uint64_t)CFSTR("InstanceBuffer"), v9);
      objc_msgSend_addObject_(*(void **)(a1 + 384), v10, (uint64_t)v7, v11);
      *(_QWORD *)(a1 + 368) = v7;
      sub_1B19D9034(a1, v12, v13, v14);
    }
  }
}

uint64_t sub_1B19D914C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unsigned int v12;
  uint64_t v13;

  if (*(_WORD *)(result + 42))
  {
    v8 = result;
    v10 = *(_QWORD *)(result + 288);
    v9 = *(_QWORD *)(result + 296);
    if (v9 != v10)
    {
      v11 = 0;
      v12 = 1;
      do
      {
        v13 = *(_QWORD *)(v10 + 8 * v11);
        if (*(_BYTE *)(v13 + 16))
        {
          result = sub_1B19D8CE8(v8, v13, a3, a4, a5, a6, a7, a8);
          v10 = *(_QWORD *)(v8 + 288);
          v9 = *(_QWORD *)(v8 + 296);
        }
        v11 = v12++;
      }
      while (v11 < (v9 - v10) >> 3);
    }
  }
  return result;
}

uint64_t sub_1B19D91B0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _QWORD *i;
  uint64_t v10;

  if (*(_WORD *)(result + 44))
  {
    v8 = result;
    for (i = *(_QWORD **)(result + 80); i; i = (_QWORD *)*i)
    {
      v10 = i[3];
      if (*(_BYTE *)(v10 + 12))
        result = sub_1B19D8B74(v8, v10, a3, a4, a5, a6, a7, a8);
    }
  }
  return result;
}

void sub_1B19D91F8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  void *v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unsigned int v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  if (*(_WORD *)(a1 + 46))
  {
    v5 = *(void **)(a1 + 360);
    if (v5)
    {
      objc_msgSend_removeObject_(*(void **)(a1 + 384), a2, (uint64_t)v5, a4);

    }
    *(_QWORD *)(a1 + 360) = 0;
    v6 = *(_QWORD *)(a1 + 320) - *(_QWORD *)(a1 + 312);
    if (v6)
    {
      v7 = (void *)sub_1B18FC078(*(_QWORD *)(a1 + 32), (const char *)(16 * ((v6 >> 1) + (v6 >> 3))), 0);
      objc_msgSend_setLabel_(v7, v8, (uint64_t)CFSTR("LightBuffer"), v9);
      objc_msgSend_addObject_(*(void **)(a1 + 384), v10, (uint64_t)v7, v11);
      *(_QWORD *)(a1 + 360) = v7;
      v15 = *(_QWORD *)(a1 + 312);
      if (*(_QWORD *)(a1 + 320) != v15)
      {
        v16 = 0;
        v17 = 1;
        do
        {
          v18 = *(uint64_t **)(v15 + 8 * v16);
          v19 = objc_msgSend_contents(*(void **)(a1 + 360), v12, v13, v14);
          sub_1B19D8878(v19 + 80 * v16, v18, v20, v21, v22, v23, v24, v25);
          v16 = v17;
          v15 = *(_QWORD *)(a1 + 312);
          ++v17;
        }
        while (v16 < (*(_QWORD *)(a1 + 320) - v15) >> 3);
      }
    }
  }
}

uint64_t sub_1B19D92D4(uint64_t result, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;

  v4 = *(_QWORD *)(result + 344) - *(_QWORD *)(result + 336);
  if (v4)
  {
    v5 = result;
    v6 = v4 >> 3;
    v12 = objc_msgSend_contents(*(void **)(result + 376), a2, a3, a4);
    v13 = 0;
    v14 = 1;
    do
    {
      result = sub_1B19D89C4((_QWORD *)(v12 + 16 * v13), *(_QWORD *)(*(_QWORD *)(v5 + 336) + 8 * v13), v5, v7, v8, v9, v10, v11);
      v13 = v14;
    }
    while (v6 > v14++);
  }
  return result;
}

void sub_1B19D9340(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  void *v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;

  v5 = *(void **)(a1 + 376);
  if (v5)
  {
    objc_msgSend_removeObject_(*(void **)(a1 + 384), a2, (uint64_t)v5, a4);

  }
  *(_QWORD *)(a1 + 376) = 0;
  v6 = *(_QWORD *)(a1 + 344) - *(_QWORD *)(a1 + 336);
  if (v6)
  {
    v7 = (void *)sub_1B18FC078(*(_QWORD *)(a1 + 32), (const char *)(2 * v6), 0);
    objc_msgSend_setLabel_(v7, v8, (uint64_t)CFSTR("EmitterBuffer"), v9);
    objc_msgSend_addObject_(*(void **)(a1 + 384), v10, (uint64_t)v7, v11);
    *(_QWORD *)(a1 + 376) = v7;
    sub_1B19D92D4(a1, v12, v13, v14);
  }
}

void sub_1B19D93C4(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const void *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  uint64_t v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  CFIndex i;
  const void *v46;
  VFXMTLMeshElement *v47;
  const char *v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  const char *v52;
  uint64_t v53;
  const char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  const char *v64;
  uint64_t v65;
  void *v66;
  const char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  const char *v71;
  uint64_t v72;
  void *v73;
  const char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  const char *v78;
  uint64_t v79;
  uint64_t v80;
  const char *v81;
  uint64_t v82;
  uint64_t v83;
  const char *v84;
  uint64_t v85;
  const char *v86;
  uint64_t v87;
  void *v88;
  const char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  const char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  int v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  void *v113;
  const char *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  const char *v121;
  uint64_t v122;
  uint64_t v123;
  void *v124;
  const char *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  void *v134;
  const char *v135;
  uint64_t v136;
  uint64_t v137;
  const char *v138;
  const char *v139;
  uint64_t v140;
  uint64_t v141;
  void *v142;
  unint64_t v143;
  id v144;
  const char *v145;
  uint64_t v146;
  void *v147;
  unint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t v152;
  unint64_t v153;
  char *v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  uint64_t v158;
  char *v159;
  char *v160;
  char *v161;
  _DWORD *v162;
  _DWORD *v163;
  uint64_t v164;
  int v165;
  _QWORD *v166;
  BOOL v167;
  void *v168;
  void **v169;
  void *v170;
  const char *v171;
  uint64_t v172;
  uint64_t v173;
  const char *v174;
  uint64_t v175;
  void *v176;
  uint64_t v177;
  void *v178;
  const char *v179;
  uint64_t v180;
  uint64_t v181;
  void *v182;
  const char *v183;
  uint64_t v184;
  uint64_t v185;
  void *v186;
  const char *v187;
  uint64_t v188;
  uint64_t v189;
  const char *v190;
  uint64_t v191;
  uint64_t v192;
  void *v193;
  uint64_t *v194;
  uint64_t *v195;
  uint64_t v196;
  void *v197;
  const char *v198;
  uint64_t v199;
  uint64_t v200;
  const char *v201;
  uint64_t v202;
  uint64_t v203;
  const char *v204;
  const char *v205;
  uint64_t v206;
  const char *v207;
  const char *v208;
  uint64_t v209;
  uint64_t v210;
  id v211;
  uint64_t v212;
  unint64_t v213;
  uint64_t *v214;
  unint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  unint64_t v223;
  uint64_t v224;
  uint64_t v225;

  v225 = *MEMORY[0x1E0C80C00];
  if (*(_WORD *)(a1 + 40))
  {
    v214 = &v212;
    v2 = *(_QWORD *)(a1 + 296) - *(_QWORD *)(a1 + 288);
    v4 = *(_QWORD *)(a1 + 336);
    v3 = *(_QWORD *)(a1 + 344);
    v221 = a1;
    v213 = v3 - v4;
    v215 = (unint64_t)(v3 - v4) >> 3;
    v217 = v215 + (v2 >> 3);
    MEMORY[0x1E0C80A78](a1, a2);
    v14 = (uint64_t *)((char *)&v212 - v13);
    v15 = 0x1E0CC6000;
    v219 = (uint64_t *)((char *)&v212 - v13);
    v216 = v16;
    if ((_DWORD)v16)
    {
      v17 = 0;
      v218 = (v12 >> 3);
      v18 = v221;
      do
      {
        v19 = *(_QWORD *)(v18 + 288);
        v220 = v17;
        v20 = sub_1B17A1754(**(_QWORD **)(v19 + 8 * v17), v5, v6, v7, v8, v9, v10, v11);
        v25 = sub_1B1875540(v20, 0, 0, 1, v21, v22, v23, v24);
        v26 = sub_1B18FA92C(*(_QWORD *)(v18 + 32), (uint64_t)v25);
        v34 = sub_1B1874BE0(v20, v27, v28, v29, v30, v31, v32, v33);
        v44 = (void *)objc_msgSend_arrayWithCapacity_(MEMORY[0x1E0C99DE8], v35, v34, v36);
        if (v34)
        {
          for (i = 0; i != v34; ++i)
          {
            v46 = sub_1B1874C3C(v20, i, 1, v39, v40, v41, v42, v43);
            v47 = sub_1B18FAA70(*(_QWORD *)(v18 + 32), (uint64_t)v46);
            v51 = (void *)objc_msgSend_descriptor(MEMORY[0x1E0CC6A18], v48, v49, v50);
            objc_msgSend_setVertexBuffer_(v51, v52, (uint64_t)v26, v53);
            objc_msgSend_setVertexBufferOffset_(v51, v54, 0, v55);
            v63 = sub_1B17EE3B8((uint64_t)v25, v56, v57, v58, v59, v60, v61, v62);
            objc_msgSend_setVertexStride_(v51, v64, v63, v65);
            v66 = (void *)sub_1B1956188((uint64_t)v47);
            v70 = objc_msgSend_buffer(v66, v67, v68, v69);
            objc_msgSend_setIndexBuffer_(v51, v71, v70, v72);
            v73 = (void *)sub_1B1956188((uint64_t)v47);
            v77 = objc_msgSend_offset(v73, v74, v75, v76);
            objc_msgSend_setIndexBufferOffset_(v51, v78, v77, v79);
            v80 = sub_1B1955D00((uint64_t)v47);
            objc_msgSend_setIndexType_(v51, v81, v80, v82);
            v83 = sub_1B195606C((uint64_t)v47);
            objc_msgSend_setTriangleCount_(v51, v84, v83, v85);
            objc_msgSend_addObject_(v44, v86, (uint64_t)v51, v87);
          }
        }
        v15 = 0x1E0CC6000uLL;
        v88 = (void *)objc_msgSend_descriptor(MEMORY[0x1E0CC6B30], v37, v38, v39);
        objc_msgSend_setGeometryDescriptors_(v88, v89, (uint64_t)v44, v90);
        v14 = v219;
        v91 = v220;
        v219[v220] = (uint64_t)v88;
        v17 = v91 + 1;
      }
      while (v17 != v218);
    }
    v92 = v221;
    v93 = sub_1B1813884(*(_QWORD *)(v221 + 16), v5, v6, v7, v8, v9, v10, v11);
    v101 = sub_1B187AA20(v93, v94, v95, v96, v97, v98, v99, v100);
    v109 = v216;
    if ((_DWORD)v215)
    {
      v110 = v101;
      v111 = 0;
      v112 = (v213 >> 3);
      do
      {
        v113 = (void *)sub_1B18F4794(*(_QWORD **)(*(_QWORD *)(*(_QWORD *)(v92 + 336) + 8 * v111) + 16), 1, v103, v104, v105, v106, v107, v108);
        v117 = objc_msgSend_objectID(v113, v114, v115, v116);
        v120 = sub_1B18D2BAC(v110, v117, v118, v119);
        v124 = (void *)objc_msgSend_descriptor(*(void **)(v15 + 2864), v121, v122, v123);
        objc_msgSend_setGeometryDescriptors_(v124, v125, v120, v126);
        v14[(v109 + v111++)] = (uint64_t)v124;
      }
      while (v112 != v111);
    }
    v127 = v217;
    v128 = 8 * v217;
    if ((_DWORD)v217)
    {
      v129 = 0;
      v130 = 0;
      v131 = 8 * v217;
      do
      {
        v132 = *v14;
        v133 = v221;
        v134 = (void *)objc_msgSend_device(*(void **)(v221 + 24), v102, v103, v104);
        v137 = objc_msgSend_heapAccelerationStructureSizeAndAlignWithDescriptor_(v134, v135, v132, v136);
        v139 = v138;
        v222 = 0;
        v223 = 0;
        v224 = 0;
        v142 = (void *)objc_msgSend_device(*(void **)(v133 + 24), v138, v140, v141);
        if (v142)
        {
          objc_msgSend_accelerationStructureSizesWithDescriptor_(v142, v102, v132, v104);
          v143 = v223;
        }
        else
        {
          v143 = 0;
        }
        v129 += (unint64_t)&v139[v137];
        if (v143 > v130)
          v130 = v143;
        ++v14;
        v131 -= 8;
      }
      while (v131);
    }
    else
    {
      v130 = 0;
      v129 = 0;
    }
    v144 = objc_alloc_init(MEMORY[0x1E0CC6B00]);
    v147 = v144;
    if (v129 <= 1)
      objc_msgSend_setSize_(v144, v145, 1, v146);
    else
      objc_msgSend_setSize_(v144, v145, v129, v146);
    v151 = *(_QWORD *)(v221 + 408);
    v153 = *(_QWORD *)(v221 + 464);
    v152 = *(_QWORD *)(v221 + 472);
    if (v153 >= v152)
    {
      v155 = *(_QWORD *)(v221 + 456);
      v156 = (uint64_t)(v153 - v155) >> 4;
      v157 = v156 + 1;
      if ((unint64_t)(v156 + 1) >> 60)
        abort();
      v158 = v152 - v155;
      if (v158 >> 3 > v157)
        v157 = v158 >> 3;
      if ((unint64_t)v158 >= 0x7FFFFFFFFFFFFFF0)
        v148 = 0xFFFFFFFFFFFFFFFLL;
      else
        v148 = v157;
      if (v148)
        v159 = (char *)sub_1B17F7824(v221 + 472, v148);
      else
        v159 = 0;
      v160 = &v159[16 * v156];
      v161 = &v159[16 * v148];
      *(_QWORD *)v160 = v151;
      *((_DWORD *)v160 + 2) = 0;
      v154 = v160 + 16;
      v163 = *(_DWORD **)(v221 + 456);
      v162 = *(_DWORD **)(v221 + 464);
      if (v162 == v163)
      {
        v166 = (_QWORD *)v221;
      }
      else
      {
        do
        {
          v164 = *((_QWORD *)v162 - 2);
          v162 -= 4;
          v165 = v162[2];
          *((_QWORD *)v160 - 2) = v164;
          v160 -= 16;
          *((_DWORD *)v160 + 2) = v165;
        }
        while (v162 != v163);
        v166 = (_QWORD *)v221;
        v162 = *(_DWORD **)(v221 + 456);
      }
      v166[57] = v160;
      v166[58] = v154;
      v166[59] = v161;
      if (v162)
        operator delete(v162);
    }
    else
    {
      *(_QWORD *)v153 = v151;
      *(_DWORD *)(v153 + 8) = 0;
      v154 = (char *)(v153 + 16);
    }
    v167 = (_DWORD)v127 == 0;
    v169 = (void **)(v221 + 24);
    v168 = *(void **)(v221 + 24);
    *(_QWORD *)(v221 + 464) = v154;
    v170 = (void *)objc_msgSend_device(v168, (const char *)v148, v149, v150);
    v173 = objc_msgSend_newHeapWithDescriptor_(v170, v171, (uint64_t)v147, v172);
    *(_QWORD *)(v221 + 408) = v173;
    v176 = (void *)objc_msgSend_arrayWithCapacity_(MEMORY[0x1E0C99DE8], v174, v127, v175);
    if (v130 <= 1)
      v177 = 1;
    else
      v177 = v130;
    v178 = (void *)sub_1B18FC078(*(_QWORD *)(v221 + 32), (const char *)v177, 32);
    v182 = (void *)objc_msgSend_commandQueue(*v169, v179, v180, v181);
    v186 = (void *)objc_msgSend_commandBuffer(v182, v183, v184, v185);
    v193 = (void *)objc_msgSend_accelerationStructureCommandEncoder(v186, v187, v188, v189);
    v194 = v219;
    if (!v167)
    {
      do
      {
        v195 = v194;
        v196 = *v194;
        v197 = (void *)objc_msgSend_device(*(void **)(v221 + 24), v190, v191, v192);
        v200 = objc_msgSend_heapAccelerationStructureSizeAndAlignWithDescriptor_(v197, v198, v196, v199);
        v203 = objc_msgSend_newAccelerationStructureWithSize_(*(void **)(v221 + 408), v201, v200, v202);
        objc_msgSend_buildAccelerationStructure_descriptor_scratchBuffer_scratchBufferOffset_(v193, v204, v203, v196, v178, 0);
        objc_msgSend_addObject_(v176, v205, v203, v206);
        v194 = v195 + 1;
        v128 -= 8;
      }
      while (v128);
    }
    objc_msgSend_endEncoding(v193, v190, v191, v192);
    objc_msgSend_encodeSignalEvent_value_(v186, v207, *(_QWORD *)(v221 + 440), 1);
    objc_msgSend_commit(v186, v208, v209, v210);

    v211 = v176;
    *(_QWORD *)(v221 + 416) = v211;

  }
}

void sub_1B19D9938(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  int v40;
  float v41;
  int v42;
  __int128 v43;
  __int128 v44;
  int v45;
  uint64_t v46;
  const char *v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  const char *v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  const char *v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  void *v59;
  const char *v60;
  uint64_t v61;
  void *v62;
  const char *v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  const char *v67;
  uint64_t v68;
  const char *v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  const char *v73;
  const char *v74;
  uint64_t v75;
  uint64_t v76;
  const char *v77;
  const char *v78;
  uint64_t v79;
  uint64_t v80;
  __int128 v81;
  __int128 v82;

  if (*(_WORD *)(a1 + 40))
  {
    v9 = (void *)sub_1B1813BC4(*(_QWORD *)(a1 + 16), a2, a3, a4, a5, a6, a7, a8);
    v13 = (void *)objc_msgSend_descriptor(MEMORY[0x1E0CC6B10], v10, v11, v12);
    objc_msgSend_setInstancedAccelerationStructures_(v13, v14, *(_QWORD *)(a1 + 416), v15);
    objc_msgSend_setInstanceCount_(v13, v16, (uint64_t)(*(_QWORD *)(a1 + 272) - *(_QWORD *)(a1 + 264)) >> 3, v17);
    v18 = *(_QWORD *)(a1 + 264);
    if ((unint64_t)(8 * (*(_QWORD *)(a1 + 272) - v18)) <= 1)
      v19 = 1;
    else
      v19 = 8 * (*(_QWORD *)(a1 + 272) - v18);
    v20 = (void *)sub_1B18FC078(*(_QWORD *)(a1 + 32), (const char *)v19, 0);
    v24 = objc_msgSend_contents(v20, v21, v22, v23);
    v32 = *(_QWORD *)(a1 + 264);
    if (*(_QWORD *)(a1 + 272) != v32)
    {
      v33 = v24;
      v34 = 0;
      v35 = 1;
      v82 = xmmword_1B2244DD0;
      v81 = xmmword_1B2244E20;
      do
      {
        v36 = *(_QWORD *)(v32 + 8 * v34);
        v37 = *(_QWORD *)(v36 + 8);
        if (v37)
        {
          LODWORD(v38) = *(_DWORD *)(v37 + 8);
          LODWORD(v37) = 4;
        }
        else
        {
          v38 = **(unsigned int **)(v36 + 16) + ((uint64_t)(*(_QWORD *)(a1 + 296) - *(_QWORD *)(a1 + 288)) >> 3);
        }
        v39 = v33 + (v34 << 6);
        *(_DWORD *)(v39 + 60) = v38;
        *(_QWORD *)(v39 + 52) = 255;
        *(_DWORD *)(v39 + 48) = v37;
        if (*(_DWORD *)(v36 + 24))
        {
          v40 = 0;
          v41 = 1.0;
          v42 = 0;
          v43 = xmmword_1B2244E20;
          v44 = xmmword_1B2244DD0;
          v45 = 0;
        }
        else
        {
          v46 = sub_1B1869AC8(*(_QWORD *)v36, (uint64_t)v25, v26, v27, v28, v29, v30, v31);
          v41 = *(float *)v46;
          *(_QWORD *)&v43 = *(_QWORD *)(v46 + 4);
          v40 = *(_DWORD *)(v46 + 24);
          v42 = *(_DWORD *)(v46 + 32);
          *(_QWORD *)&v44 = *(_QWORD *)(v46 + 36);
          v45 = *(_QWORD *)(v46 + 56);
          *((_QWORD *)&v43 + 1) = *(_QWORD *)(v46 + 16);
          *((_QWORD *)&v44 + 1) = *(_QWORD *)(v46 + 48);
        }
        *(float *)v39 = v41;
        *(_OWORD *)(v39 + 4) = v43;
        *(_DWORD *)(v39 + 20) = v40;
        *(_DWORD *)(v39 + 24) = v42;
        *(_OWORD *)(v39 + 28) = v44;
        *(_DWORD *)(v39 + 44) = v45;
        v34 = v35;
        v32 = *(_QWORD *)(a1 + 264);
        ++v35;
      }
      while (v34 < (*(_QWORD *)(a1 + 272) - v32) >> 3);
    }
    objc_msgSend_setInstanceDescriptorBuffer_(v13, v25, (uint64_t)v20, v27, v81, v82);
    v50 = (void *)objc_msgSend_commandQueue(v9, v47, v48, v49);
    v54 = (void *)objc_msgSend_commandBuffer(v50, v51, v52, v53);
    v58 = v54;
    if (*(_BYTE *)(a1 + 450))
      objc_msgSend_encodeWaitForEvent_value_(v54, v55, *(_QWORD *)(a1 + 440), 1);
    v59 = (void *)objc_msgSend_device(v9, v55, v56, v57);
    if (v59)
      objc_msgSend_accelerationStructureSizesWithDescriptor_(v59, v60, (uint64_t)v13, v61);
    v62 = (void *)sub_1B18FC078(*(_QWORD *)(a1 + 32), 0, 32);

    v66 = (void *)objc_msgSend_device(v9, v63, v64, v65);
    *(_QWORD *)(a1 + 424) = objc_msgSend_newAccelerationStructureWithSize_(v66, v67, 0, v68);
    v72 = (void *)objc_msgSend_accelerationStructureCommandEncoder(v58, v69, v70, v71);
    objc_msgSend_buildAccelerationStructure_descriptor_scratchBuffer_scratchBufferOffset_(v72, v73, *(_QWORD *)(a1 + 424), (uint64_t)v13, v62, 0);
    objc_msgSend_endEncoding(v72, v74, v75, v76);
    objc_msgSend_encodeSignalEvent_value_(v58, v77, *(_QWORD *)(a1 + 440), 2);
    objc_msgSend_commit(v58, v78, v79, v80);

  }
}

uint64_t sub_1B19D9BAC(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (*(_BYTE *)(result + 48))
  {
    v3 = result;
    sub_1B19D792C(result);
    v11 = sub_1B187A934(a2, v4, v5, v6, v7, v8, v9, v10);
    result = sub_1B19D83FC(v3, v11, v12, v13, v14, v15, v16, v17);
    *(_DWORD *)(v3 + 449) = 16843009;
  }
  return result;
}

uint64_t sub_1B19D9BF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*(_BYTE *)(a1 + 48))
    return sub_1B19D7FD0(a1, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

uint64_t sub_1B19D9C08(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  int v10;
  unsigned int i;
  uint64_t v12;
  uint64_t v13;

  v13 = a2;
  if (*(_BYTE *)(result + 48))
  {
    v9 = result;
    result = sub_1B186C6D8(a2, a2, a3, a4, a5, a6, a7, a8);
    if ((result & 1) == 0)
    {
      result = sub_1B186E064(a2);
      if ((int)result <= 0)
      {
        if (sub_1B179C868((_QWORD *)(v9 + 144), &v13))
          *(_BYTE *)(v9 + 449) = 1;
        if (sub_1B179C868((_QWORD *)(v9 + 184), &v13))
          *(_BYTE *)(v9 + 451) = 1;
        if (sub_1B179C868((_QWORD *)(v9 + 224), &v13))
          *(_BYTE *)(v9 + 452) = 1;
        result = sub_1B186AF90(v13);
        if ((_DWORD)result)
        {
          v10 = result;
          for (i = 0; i != v10; ++i)
          {
            v12 = sub_1B186B18C(v13, i);
            result = sub_1B19D9C08(v9, v12);
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_1B19D9CE0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  const __CFArray *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  const __CFArray *v46;

  if (*(_BYTE *)(result + 48))
  {
    v8 = result;
    result = sub_1B1868FA0(a2, a2, a3, a4, a5, a6, a7, a8);
    v45 = result;
    if (result)
    {
      v16 = sub_1B17A0848(result, v9, v10, v11, v12, v13, v14, v15);
      result = (uint64_t)sub_1B179C868((_QWORD *)(v8 + 104), &v45);
      if (result)
      {
        v24 = *(_QWORD *)(result + 24);
        result = (uint64_t)sub_1B1874BE0(v16, v17, v18, v19, v20, v21, v22, v23);
        v32 = result;
        if ((_DWORD)result)
        {
          v33 = 0;
          do
          {
            v34 = sub_1B17A08A0(v45, v25, v26, v27, v28, v29, v30, v31);
            v41 = sub_1B17A08FC(v45, (uint64_t)fmin((double)(v34 - 1), (double)v33), v35, v36, v37, v38, v39, v40);
            v42 = (uint64_t)v41;
            v43 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v24 + 64) + 8 * v33) + 16);
            if (v41 == (const __CFArray *)v43)
            {
              v46 = v41;
              result = (uint64_t)sub_1B179C868((_QWORD *)(v8 + 64), &v46);
              *(_BYTE *)(*(_QWORD *)(result + 24) + 12) = 1;
            }
            else
            {
              sub_1B19D7BE8((uint64_t *)v8, v43, 1);
              result = sub_1B19D8A7C(v8, v42);
              v44 = *(_QWORD *)(v24 + 64);
              *(_QWORD *)(*(_QWORD *)(v44 + 8 * v33) + 24) = result;
              *(_QWORD *)(*(_QWORD *)(v44 + 8 * v33) + 16) = v42;
            }
            ++v33;
          }
          while (v32 != v33);
        }
        *(_BYTE *)(v8 + 453) = 1;
      }
    }
  }
  return result;
}

uint64_t sub_1B19D9E04(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;

  v11 = a2;
  if (*(_BYTE *)(result + 48))
  {
    v2 = result;
    v3 = (_QWORD *)(result + 144);
    v4 = sub_1B179C868((_QWORD *)(result + 144), &v11);
    if (v4)
    {
      v5 = v4;
      v6 = v4[3];
      v7 = *(uint64_t **)(v6 + 8);
      if (v7)
        sub_1B19D7A8C((uint64_t *)v2, *v7, 1);
      MEMORY[0x1B5E22E18](v6, 0x1020C4055CCDE27);
      sub_1B179C954(v3, v5);
      *(_WORD *)(v2 + 449) = 257;
    }
    v8 = sub_1B179C868((_QWORD *)(v2 + 184), &v11);
    if (v8)
    {
      v9 = v8;
      v10 = v8[3];
      if (v10)
        MEMORY[0x1B5E22E18](v10, 0x20C40A4A59CD2);
      sub_1B179C954((_QWORD *)(v2 + 184), v9);
      *(_BYTE *)(v2 + 451) = 1;
    }
    result = (uint64_t)sub_1B179C868((_QWORD *)(v2 + 224), &v11);
    if (result)
    {
      result = sub_1B179C954((_QWORD *)(v2 + 224), (uint64_t *)result);
      *(_BYTE *)(v2 + 452) = 1;
      *(_BYTE *)(v2 + 449) = 1;
    }
  }
  return result;
}

uint64_t sub_1B19D9F14(uint64_t result)
{
  if (*(_BYTE *)(result + 48))
    *(_BYTE *)(result + 451) = 1;
  return result;
}

void sub_1B19D9F28(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  const char *v49;
  uint64_t v50;
  const char *v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  int v57;
  void *v58;
  uint64_t v59;
  const char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t i;
  uint64_t v64;
  uint64_t v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  _BYTE v74[128];
  _BYTE v75[128];
  uint64_t v76;

  v76 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 16) = a2;
  if (*(double *)(a1 + 56) == sub_1B1815810(a2))
    return;
  if (*(_QWORD *)(a1 + 16) != a2)
    *(_DWORD *)(a1 + 449) = 16843009;
  if (*(_QWORD *)(a1 + 336) != *(_QWORD *)(a1 + 344))
  {
    *(_BYTE *)(a1 + 452) = 1;
    *(_BYTE *)(a1 + 449) = 1;
  }
  v11 = (void *)sub_1B1813BC4(a2, v4, v5, v6, v7, v8, v9, v10);
  *(_QWORD *)(a1 + 24) = v11;
  *(_QWORD *)(a1 + 32) = objc_msgSend_resourceManager(v11, v12, v13, v14);
  sub_1B19D7EA4(a1, v15, v16, v17);
  if (*(_BYTE *)(a1 + 448))
  {
    v25 = sub_1B1813884(*(_QWORD *)(a1 + 16), (uint64_t)v18, v19, v20, v21, v22, v23, v24);
    sub_1B19D9BAC(a1, v25);
  }
  if (*(_BYTE *)(a1 + 449)
    || *(_BYTE *)(a1 + 450)
    || *(_BYTE *)(a1 + 451)
    || *(_BYTE *)(a1 + 452)
    || *(_BYTE *)(a1 + 453))
  {
    *(_BYTE *)(a1 + 454) = 1;
LABEL_14:
    sub_1B19D8460(a1);

    v29 = (void *)objc_msgSend_device(*(void **)(a1 + 24), v26, v27, v28);
    *(_QWORD *)(a1 + 440) = objc_msgSend_newEvent(v29, v30, v31, v32);
    if (*(_BYTE *)(a1 + 451))
      sub_1B19D91F8(a1, v18, v19, v20);
    if (*(_BYTE *)(a1 + 452))
      sub_1B19D9340(a1, v18, v19, v20);
    if (*(_BYTE *)(a1 + 450) && (sub_1B19D914C(a1, (uint64_t)v18, v19, v20, v33, v34, v35, v36), *(_BYTE *)(a1 + 450))
      || *(_BYTE *)(a1 + 452))
    {
      sub_1B19D93C4(a1, (uint64_t)v18);
    }
    if (*(_BYTE *)(a1 + 449))
    {
      sub_1B19D90B8(a1, v18, v19, v20);
      sub_1B19D9938(a1, v37, v38, v39, v40, v41, v42, v43);
    }
    if (*(_BYTE *)(a1 + 453))
      sub_1B19D91B0(a1, (uint64_t)v18, v19, v20, v33, v34, v35, v36);
    goto LABEL_26;
  }
  v64 = *(_QWORD *)(a1 + 336);
  v65 = *(_QWORD *)(a1 + 344);
  *(_BYTE *)(a1 + 454) = v64 != v65;
  if (v64 != v65)
    goto LABEL_14;
LABEL_26:
  v44 = *(_QWORD *)(a1 + 400);
  if (v44)
    MEMORY[0x1B5E22E00](v44, 0x80C80B8603338);
  objc_msgSend_count(*(void **)(a1 + 384), v18, v19, v20);
  objc_msgSend_count(*(void **)(a1 + 392), v45, v46, v47);
  *(_QWORD *)(a1 + 400) = operator new[]();
  v70 = 0u;
  v71 = 0u;
  v72 = 0u;
  v73 = 0u;
  v48 = *(void **)(a1 + 384);
  v50 = objc_msgSend_countByEnumeratingWithState_objects_count_(v48, v49, (uint64_t)&v70, (uint64_t)v75, 16);
  if (v50)
  {
    v52 = v50;
    v53 = 0;
    v54 = *(_QWORD *)v71;
    do
    {
      v55 = 0;
      v56 = v53;
      do
      {
        if (*(_QWORD *)v71 != v54)
          objc_enumerationMutation(v48);
        *(_QWORD *)(*(_QWORD *)(a1 + 400) + 8 * (v56 + v55)) = *(_QWORD *)(*((_QWORD *)&v70 + 1)
                                                                                         + 8 * v55);
        ++v55;
      }
      while (v52 != v55);
      v52 = objc_msgSend_countByEnumeratingWithState_objects_count_(v48, v51, (uint64_t)&v70, (uint64_t)v75, 16);
      v53 = v56 + v55;
    }
    while (v52);
    v57 = v56 + v55;
  }
  else
  {
    v57 = 0;
  }
  v68 = 0u;
  v69 = 0u;
  v66 = 0u;
  v67 = 0u;
  v58 = *(void **)(a1 + 392);
  v59 = objc_msgSend_countByEnumeratingWithState_objects_count_(v58, v51, (uint64_t)&v66, (uint64_t)v74, 16);
  if (v59)
  {
    v61 = v59;
    v62 = *(_QWORD *)v67;
    do
    {
      for (i = 0; i != v61; ++i)
      {
        if (*(_QWORD *)v67 != v62)
          objc_enumerationMutation(v58);
        *(_QWORD *)(*(_QWORD *)(a1 + 400) + 8 * (v57 + i)) = *(_QWORD *)(*((_QWORD *)&v66 + 1) + 8 * i);
      }
      v61 = objc_msgSend_countByEnumeratingWithState_objects_count_(v58, v60, (uint64_t)&v66, (uint64_t)v74, 16);
      v57 += i;
    }
    while (v61);
  }
  *(_WORD *)(a1 + 452) = 0;
  *(_DWORD *)(a1 + 448) = 0;
}

uint64_t sub_1B19DA288(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 454);
}

void sub_1B19DA290(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  double v4;

  v4 = sub_1B1815810(*(_QWORD *)(a1 + 16));
  if (*(double *)(a1 + 56) != v4)
  {
    sub_1B19D7F10(a1, (const char *)3, v2, v3);
    *(double *)(a1 + 56) = v4;
  }
}

uint64_t sub_1B19DA2DC(uint64_t a1)
{
  return *(_QWORD *)(a1 + 408);
}

uint64_t sub_1B19DA2E4(uint64_t a1)
{
  return *(_QWORD *)(a1 + 424);
}

uint64_t sub_1B19DA2EC(uint64_t a1)
{
  return *(_QWORD *)(a1 + 368);
}

uint64_t sub_1B19DA2F4(uint64_t a1)
{
  return *(_QWORD *)(a1 + 360);
}

uint64_t sub_1B19DA2FC(uint64_t a1)
{
  return *(_QWORD *)(a1 + 400);
}

uint64_t sub_1B19DA304(uint64_t a1)
{
  return *(_QWORD *)(a1 + 432);
}

void *sub_1B19DA30C(uint64_t a1, void *a2)
{
  void *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;

  v4 = (void *)objc_opt_new();
  v8 = objc_msgSend_count(*(void **)(a1 + 432), v5, v6, v7);
  objc_msgSend_setFunctionCount_(v4, v9, v8, v10);
  v13 = (void *)objc_msgSend_newIntersectionFunctionTableWithDescriptor_(a2, v11, (uint64_t)v4, v12);

  if (objc_msgSend_count(*(void **)(a1 + 432), v14, v15, v16))
  {
    v19 = 0;
    do
    {
      v20 = objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 432), v17, v19, v18);
      v23 = objc_msgSend_functionHandleWithFunction_(a2, v21, v20, v22);
      objc_msgSend_setFunction_atIndex_(v13, v24, v23, v19++);
    }
    while (v19 < objc_msgSend_count(*(void **)(a1 + 432), v25, v26, v27));
  }
  objc_msgSend_setBuffer_offset_atIndex_(v13, v17, *(_QWORD *)(a1 + 376), 0, 0);
  return v13;
}

uint64_t sub_1B19DA3D0(uint64_t a1)
{
  return (*(_QWORD *)(a1 + 320) - *(_QWORD *)(a1 + 312)) >> 3;
}

uint64_t sub_1B19DA3E0(uint64_t a1)
{
  return (*(_QWORD *)(a1 + 344) - *(_QWORD *)(a1 + 336)) >> 3;
}

uint64_t sub_1B19DA3F0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  int v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;

  v5 = objc_msgSend_count(*(void **)(a1 + 384), a2, a3, a4);
  return objc_msgSend_count(*(void **)(a1 + 392), v6, v7, v8) + v5;
}

_QWORD *sub_1B19DA428(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_1B19D792C(a1);
  sub_1B19D7F10(a1, 0, v2, v3);

  *(_QWORD *)(a1 + 384) = 0;
  *(_QWORD *)(a1 + 392) = 0;
  v4 = *(_QWORD *)(a1 + 400);
  if (v4)
  {
    MEMORY[0x1B5E22E00](v4, 0x80C80B8603338);
    *(_QWORD *)(a1 + 400) = 0;
  }

  *(_QWORD *)(a1 + 432) = 0;
  return sub_1B19DA514((_QWORD *)a1);
}

CFStringRef sub_1B19DA49C(const void *a1)
{
  const __CFAllocator *v2;

  v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<CFXRaytracingSystem %p>"), a1);
}

CFStringRef sub_1B19DA4D8(const void *a1)
{
  const __CFAllocator *v2;

  v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<CFXRaytracingSystem %p>"), a1);
}

_QWORD *sub_1B19DA514(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v2 = (void *)a1[57];
  if (v2)
  {
    a1[58] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[42];
  if (v3)
  {
    a1[43] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[39];
  if (v4)
  {
    a1[40] = v4;
    operator delete(v4);
  }
  v5 = (void *)a1[36];
  if (v5)
  {
    a1[37] = v5;
    operator delete(v5);
  }
  v6 = (void *)a1[33];
  if (v6)
  {
    a1[34] = v6;
    operator delete(v6);
  }
  sub_1B185B888((uint64_t)(a1 + 28));
  sub_1B185B888((uint64_t)(a1 + 23));
  sub_1B185B888((uint64_t)(a1 + 18));
  sub_1B185B888((uint64_t)(a1 + 13));
  sub_1B185B888((uint64_t)(a1 + 8));
  return a1;
}

_QWORD *sub_1B19DA5AC(_QWORD *result)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t i;

  if (result[3])
  {
    v1 = result;
    result = (_QWORD *)result[2];
    if (result)
    {
      do
      {
        v2 = (_QWORD *)*result;
        operator delete(result);
        result = v2;
      }
      while (v2);
    }
    v1[2] = 0;
    v3 = v1[1];
    if (v3)
    {
      for (i = 0; i != v3; ++i)
        *(_QWORD *)(*v1 + 8 * i) = 0;
    }
    v1[3] = 0;
  }
  return result;
}

_QWORD *sub_1B19DA610(uint64_t a1, _QWORD *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  _QWORD **v12;
  _QWORD *i;
  unint64_t v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;

  v7 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  v8 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v7 >> 47) ^ v7);
  v9 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v4 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
      if (v9 >= v10)
        v4 = v9 % v10;
    }
    else
    {
      v4 = v9 & (v10 - 1);
    }
    v12 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v12)
    {
      for (i = *v12; i; i = (_QWORD *)*i)
      {
        v14 = i[1];
        if (v14 == v9)
        {
          if (i[2] == *a2)
            return i;
        }
        else
        {
          if (v11.u32[0] > 1uLL)
          {
            if (v14 >= v10)
              v14 %= v10;
          }
          else
          {
            v14 &= v10 - 1;
          }
          if (v14 != v4)
            break;
        }
      }
    }
  }
  i = operator new(0x20uLL);
  *i = 0;
  i[1] = v9;
  i[2] = **a4;
  i[3] = 0;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v10 || (float)(v16 * (float)v10) < v15)
  {
    v17 = 1;
    if (v10 >= 3)
      v17 = (v10 & (v10 - 1)) != 0;
    v18 = v17 | (2 * v10);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    sub_1B179C4B4(a1, v20);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v4 = v9 % v10;
      else
        v4 = v9;
    }
    else
    {
      v4 = (v10 - 1) & v9;
    }
  }
  v21 = *(_QWORD *)a1;
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v22)
  {
    *i = *v22;
LABEL_38:
    *v22 = i;
    goto LABEL_39;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v21 + 8 * v4) = a1 + 16;
  if (*i)
  {
    v23 = *(_QWORD *)(*i + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v23 >= v10)
        v23 %= v10;
    }
    else
    {
      v23 &= v10 - 1;
    }
    v22 = (_QWORD *)(*(_QWORD *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_1B19DA850(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1B19DA864(uint64_t a1, _QWORD *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  _QWORD **v12;
  _QWORD *i;
  unint64_t v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;

  v7 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  v8 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v7 >> 47) ^ v7);
  v9 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v4 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
      if (v9 >= v10)
        v4 = v9 % v10;
    }
    else
    {
      v4 = v9 & (v10 - 1);
    }
    v12 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v12)
    {
      for (i = *v12; i; i = (_QWORD *)*i)
      {
        v14 = i[1];
        if (v14 == v9)
        {
          if (i[2] == *a2)
            return i;
        }
        else
        {
          if (v11.u32[0] > 1uLL)
          {
            if (v14 >= v10)
              v14 %= v10;
          }
          else
          {
            v14 &= v10 - 1;
          }
          if (v14 != v4)
            break;
        }
      }
    }
  }
  i = operator new(0x20uLL);
  *i = 0;
  i[1] = v9;
  i[2] = **a4;
  i[3] = 0;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v10 || (float)(v16 * (float)v10) < v15)
  {
    v17 = 1;
    if (v10 >= 3)
      v17 = (v10 & (v10 - 1)) != 0;
    v18 = v17 | (2 * v10);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    sub_1B179C4B4(a1, v20);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v4 = v9 % v10;
      else
        v4 = v9;
    }
    else
    {
      v4 = (v10 - 1) & v9;
    }
  }
  v21 = *(_QWORD *)a1;
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v22)
  {
    *i = *v22;
LABEL_38:
    *v22 = i;
    goto LABEL_39;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v21 + 8 * v4) = a1 + 16;
  if (*i)
  {
    v23 = *(_QWORD *)(*i + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v23 >= v10)
        v23 %= v10;
    }
    else
    {
      v23 &= v10 - 1;
    }
    v22 = (_QWORD *)(*(_QWORD *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_1B19DAAA4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1B19DAAB8(uint64_t a1, _QWORD *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  _QWORD **v12;
  _QWORD *i;
  unint64_t v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;

  v7 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  v8 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v7 >> 47) ^ v7);
  v9 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v4 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
      if (v9 >= v10)
        v4 = v9 % v10;
    }
    else
    {
      v4 = v9 & (v10 - 1);
    }
    v12 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v12)
    {
      for (i = *v12; i; i = (_QWORD *)*i)
      {
        v14 = i[1];
        if (v14 == v9)
        {
          if (i[2] == *a2)
            return i;
        }
        else
        {
          if (v11.u32[0] > 1uLL)
          {
            if (v14 >= v10)
              v14 %= v10;
          }
          else
          {
            v14 &= v10 - 1;
          }
          if (v14 != v4)
            break;
        }
      }
    }
  }
  i = operator new(0x20uLL);
  *i = 0;
  i[1] = v9;
  i[2] = **a4;
  i[3] = 0;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v10 || (float)(v16 * (float)v10) < v15)
  {
    v17 = 1;
    if (v10 >= 3)
      v17 = (v10 & (v10 - 1)) != 0;
    v18 = v17 | (2 * v10);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    sub_1B179C4B4(a1, v20);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v4 = v9 % v10;
      else
        v4 = v9;
    }
    else
    {
      v4 = (v10 - 1) & v9;
    }
  }
  v21 = *(_QWORD *)a1;
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v22)
  {
    *i = *v22;
LABEL_38:
    *v22 = i;
    goto LABEL_39;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v21 + 8 * v4) = a1 + 16;
  if (*i)
  {
    v23 = *(_QWORD *)(*i + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v23 >= v10)
        v23 %= v10;
    }
    else
    {
      v23 &= v10 - 1;
    }
    v22 = (_QWORD *)(*(_QWORD *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_1B19DACF8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1B19DAD0C(uint64_t a1, _QWORD *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  _QWORD **v12;
  _QWORD *i;
  unint64_t v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;

  v7 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  v8 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v7 >> 47) ^ v7);
  v9 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v4 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
      if (v9 >= v10)
        v4 = v9 % v10;
    }
    else
    {
      v4 = v9 & (v10 - 1);
    }
    v12 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v12)
    {
      for (i = *v12; i; i = (_QWORD *)*i)
      {
        v14 = i[1];
        if (v14 == v9)
        {
          if (i[2] == *a2)
            return i;
        }
        else
        {
          if (v11.u32[0] > 1uLL)
          {
            if (v14 >= v10)
              v14 %= v10;
          }
          else
          {
            v14 &= v10 - 1;
          }
          if (v14 != v4)
            break;
        }
      }
    }
  }
  i = operator new(0x20uLL);
  *i = 0;
  i[1] = v9;
  i[2] = **a4;
  i[3] = 0;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v10 || (float)(v16 * (float)v10) < v15)
  {
    v17 = 1;
    if (v10 >= 3)
      v17 = (v10 & (v10 - 1)) != 0;
    v18 = v17 | (2 * v10);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    sub_1B179C4B4(a1, v20);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v4 = v9 % v10;
      else
        v4 = v9;
    }
    else
    {
      v4 = (v10 - 1) & v9;
    }
  }
  v21 = *(_QWORD *)a1;
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v22)
  {
    *i = *v22;
LABEL_38:
    *v22 = i;
    goto LABEL_39;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v21 + 8 * v4) = a1 + 16;
  if (*i)
  {
    v23 = *(_QWORD *)(*i + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v23 >= v10)
        v23 %= v10;
    }
    else
    {
      v23 &= v10 - 1;
    }
    v22 = (_QWORD *)(*(_QWORD *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_1B19DAF4C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1B19DAF60(uint64_t a1, _QWORD *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  _QWORD **v12;
  _QWORD *i;
  unint64_t v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;

  v7 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  v8 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v7 >> 47) ^ v7);
  v9 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v4 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
      if (v9 >= v10)
        v4 = v9 % v10;
    }
    else
    {
      v4 = v9 & (v10 - 1);
    }
    v12 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v12)
    {
      for (i = *v12; i; i = (_QWORD *)*i)
      {
        v14 = i[1];
        if (v14 == v9)
        {
          if (i[2] == *a2)
            return i;
        }
        else
        {
          if (v11.u32[0] > 1uLL)
          {
            if (v14 >= v10)
              v14 %= v10;
          }
          else
          {
            v14 &= v10 - 1;
          }
          if (v14 != v4)
            break;
        }
      }
    }
  }
  i = operator new(0x20uLL);
  *i = 0;
  i[1] = v9;
  i[2] = **a4;
  i[3] = 0;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v10 || (float)(v16 * (float)v10) < v15)
  {
    v17 = 1;
    if (v10 >= 3)
      v17 = (v10 & (v10 - 1)) != 0;
    v18 = v17 | (2 * v10);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    sub_1B179C4B4(a1, v20);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v4 = v9 % v10;
      else
        v4 = v9;
    }
    else
    {
      v4 = (v10 - 1) & v9;
    }
  }
  v21 = *(_QWORD *)a1;
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v22)
  {
    *i = *v22;
LABEL_38:
    *v22 = i;
    goto LABEL_39;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v21 + 8 * v4) = a1 + 16;
  if (*i)
  {
    v23 = *(_QWORD *)(*i + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v23 >= v10)
        v23 %= v10;
    }
    else
    {
      v23 &= v10 - 1;
    }
    v22 = (_QWORD *)(*(_QWORD *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_1B19DB1A0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B19DB654(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = objc_msgSend_geometryRef(*(void **)(a1 + 32), a2, a3, a4);
  sub_1B19DD1DC(v5, *(_DWORD *)(a1 + 40), v6, v7, v8, v9, v10, v11);
}

void sub_1B19DB794(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = objc_msgSend_geometryRef(*(void **)(a1 + 32), a2, a3, a4);
  sub_1B19DD294(v5, *(float *)(a1 + 40), v6, v7, v8, v9, v10, v11, v12);
}

void sub_1B19DB8CC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = objc_msgSend_geometryRef(*(void **)(a1 + 32), a2, a3, a4);
  sub_1B19DD358(v5, *(float *)(a1 + 40), v6, v7, v8, v9, v10, v11, v12);
}

void sub_1B19DBA0C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = objc_msgSend_geometryRef(*(void **)(a1 + 32), a2, a3, a4);
  sub_1B19DD41C(v5, *(float *)(a1 + 40), v6, v7, v8, v9, v10, v11, v12);
}

void sub_1B19DBB38(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = objc_msgSend_geometryRef(*(void **)(a1 + 32), a2, a3, a4);
  sub_1B19DD4E0(v5, *(_BYTE *)(a1 + 40), v6, v7, v8, v9, v10, v11);
}

void sub_1B19DBC70(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;

  v5 = objc_msgSend_geometryRef(*(void **)(a1 + 32), a2, a3, a4);
  sub_1B19DD5B8(v5, *(void **)(*(_QWORD *)(a1 + 32) + 216));
}

void sub_1B19DBDB4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;

  v5 = objc_msgSend_geometryRef(*(void **)(a1 + 32), a2, a3, a4);
  sub_1B19DD638(v5, *(void **)(*(_QWORD *)(a1 + 32) + 192));
}

uint64_t sub_1B19DC360(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  __CFString *v17;
  __CFString *v18;

  if (sub_1B180A64C(a1, a2, a3, a4, a5, a6, a7, a8))
    return 1;
  v17 = sub_1B18090EC(a1, v9, v10, v11, v12, v13, v14, v15);
  if (!v17)
    return 0;
  v18 = v17;
  v16 = CFEqual(v17, CFSTR("pvr")) || CFEqual(v18, CFSTR("pvrtc"));
  CFRelease(v18);
  return v16;
}

uint64_t sub_1B19DC3E0(uint64_t a1)
{
  NSObject *v2;
  os_signpost_id_t v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  NSObject *v13;
  const __CFData *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const __CFData *v22;
  const UInt8 *BytePtr;
  const UInt8 *v24;
  int v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  NSObject *v35;
  unsigned int v37;
  unsigned int v38;
  char v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  int v44;
  unsigned int v45;
  unsigned int v46;
  CFIndex v47;
  CFDataRef v48;
  unint64_t v49;
  os_signpost_id_t v50;
  uint32x2_t v51;
  const UInt8 *v52;
  uint8_t buf[4];
  uint64_t v54;
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  v2 = sub_1B17C439C();
  v3 = os_signpost_id_generate(v2);
  v4 = sub_1B17C439C();
  v12 = v3 - 1;
  if (v3 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v13 = v4;
    if (os_signpost_enabled(v4))
    {
      *(_DWORD *)buf = 138412290;
      v54 = sub_1B1809180(a1, v5, v6, v7, v8, v9, v10, v11);
      _os_signpost_emit_with_name_impl(&dword_1B178D000, v13, OS_SIGNPOST_INTERVAL_BEGIN, v3, "LoadImage (PVRTC)", "url=%@", buf, 0xCu);
    }
  }
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), v6, v7, v8, v9, v10, v11, (uint64_t)"image");
  v14 = (const __CFData *)sub_1B180A64C(a1, v5, v6, v7, v8, v9, v10, v11);
  if (v14)
  {
    v22 = v14;
    CFRetain(v14);
  }
  else
  {
    v33 = sub_1B1809180(a1, v15, v16, v17, v18, v19, v20, v21);
    if (!v33 || (v22 = (const __CFData *)sub_1B19AA5B0(v33)) == 0)
    {
      v32 = 0;
      goto LABEL_22;
    }
  }
  if (CFDataGetLength(v22) >= 52)
  {
    BytePtr = CFDataGetBytePtr(v22);
    if (*((_DWORD *)BytePtr + 11) == 559044176)
    {
      v24 = BytePtr;
      v25 = *((_DWORD *)BytePtr + 4);
      if ((v25 & 0xFE) == 0x18)
      {
        v26 = *((_DWORD *)BytePtr + 4);
        sub_1B180AEF8(a1);
        v27 = v25 & 0x8000 | (*((_DWORD *)v24 + 10) != 0);
        v51 = *(uint32x2_t *)(v24 + 4);
        sub_1B1809348(a1, 1, v27 != 0, COERCE_DOUBLE(vrev64_s32((int32x2_t)vcvt_f32_u32(v51))));
        v28 = sub_1B1809424(a1);
        v29 = v28;
        if (v26 == 24)
        {
          if (v27)
            v30 = 164;
          else
            v30 = 160;
          v31 = 8;
        }
        else
        {
          if (v26 != 25)
            goto LABEL_31;
          if (v27)
            v30 = 166;
          else
            v30 = 162;
          v31 = 4;
        }
        *(_DWORD *)(v28 + 24) = v30;
        *(_BYTE *)(v28 + 7) = v31;
        *(_BYTE *)(v28 + 8) = 4;
LABEL_31:
        *(_BYTE *)(v28 + 4) = *((_DWORD *)v24 + 6);
        v37 = *((_DWORD *)v24 + 5);
        v32 = 1;
        if (v37)
        {
          v49 = v3 - 1;
          v50 = v3;
          v38 = 0;
          v52 = v24 + 52;
          if (v26 == 25)
            v39 = 2;
          else
            v39 = 1;
          v40 = v51.i32[0];
          v41 = v51.u32[1];
          do
          {
            v42 = *(unsigned __int8 *)(v29 + 7);
            v43 = *(unsigned __int8 *)(v29 + 8);
            v44 = v43 * v42;
            v45 = v40 / v43;
            v46 = v41 / v42;
            if (v46 <= 2)
              v46 = 2;
            if (v45 <= 2)
              v45 = 2;
            v47 = v46 * v45 * ((v44 << v39) >> 3);
            v48 = CFDataCreate(0, &v52[v38], v47);
            CFArrayAppendValue(*(CFMutableArrayRef *)(v29 + 32), v48);
            CFRelease(v48);
            v38 += v47;
            if (v41 <= 1)
              v41 = 1;
            else
              v41 >>= 1;
            if (v40 <= 1)
              v40 = 1;
            else
              v40 >>= 1;
          }
          while (v38 < v37);
          v32 = 1;
          v12 = v49;
          v3 = v50;
        }
        goto LABEL_18;
      }
    }
  }
  v32 = 0;
LABEL_18:
  CFRelease(v22);
LABEL_22:
  v34 = sub_1B17C439C();
  if (v12 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v35 = v34;
    if (os_signpost_enabled(v34))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_1B178D000, v35, OS_SIGNPOST_INTERVAL_END, v3, "LoadImage (PVRTC)", "", buf, 2u);
    }
  }
  return v32;
}

uint64_t sub_1B19DC71C(uint64_t *a1)
{
  uint64_t result;

  result = sub_1B179CB60(a1);
  *a1 = result;
  return result;
}

uint64_t sub_1B19DC748(uint64_t a1)
{
  uint64_t v2;
  __int128 v3;
  _OWORD v5[3];
  uint64_t v6;

  if (qword_1EEF66EF8 != -1)
    dispatch_once_f(&qword_1EEF66EF8, &qword_1EEF66EF0, (dispatch_function_t)sub_1B19DC71C);
  v2 = sub_1B179CB90(qword_1EEF66EF0, 0x28uLL);
  v3 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v3;
  v5[2] = *(_OWORD *)(a1 + 32);
  v6 = *(_QWORD *)(a1 + 48);
  sub_1B19DC7D4(v2, (uint64_t)v5);
  return v2;
}

void sub_1B19DC7D4(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  _OWORD v5[3];
  uint64_t v6;

  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = CGPathRetain(*(CGPathRef *)(a2 + 24));
  v4 = *(_OWORD *)(a2 + 16);
  v5[0] = *(_OWORD *)a2;
  v5[1] = v4;
  v5[2] = *(_OWORD *)(a2 + 32);
  v6 = *(_QWORD *)(a2 + 48);
  sub_1B1992AE4(a1, (uint64_t)v5);
  sub_1B19931CC(a1);
}

void sub_1B19DC83C(uint64_t a1)
{
  void *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  if (a1)
  {
    v2 = *(void **)(a1 + 32);
    if (v2)
      free(v2);
    if (*(_DWORD *)(a1 + 48))
    {
      v3 = 0;
      do
      {
        v4 = *(_QWORD *)(a1 + 40) + 32 * v3;
        if (*(_DWORD *)(v4 + 8))
        {
          v5 = 0;
          v6 = 0;
          do
          {
            free(*(void **)(*(_QWORD *)v4 + v5));
            ++v6;
            v4 = *(_QWORD *)(a1 + 40) + 32 * v3;
            v5 += 40;
          }
          while (v6 < *(unsigned int *)(v4 + 8));
        }
        free(*(void **)v4);
        free(*(void **)(*(_QWORD *)(a1 + 40) + 32 * v3++ + 16));
      }
      while (v3 < *(unsigned int *)(a1 + 48));
    }
    free(*(void **)(a1 + 40));
    CGPathRelease(*(CGPathRef *)(a1 + 16));
  }
}

CFStringRef sub_1B19DC8FC(_QWORD *a1)
{
  const __CFAllocator *v2;

  v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<CFXShape '%@'>"), a1[2]);
}

CFStringRef sub_1B19DC93C(_QWORD *a1)
{
  const __CFAllocator *v2;

  v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<CFXShape '%@'>"), a1[2]);
}

const void *sub_1B19DC97C(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  const void *result;
  BOOL v8;
  BOOL v9;
  BOOL v10;
  __int128 v14;

  result = *(const void **)(a1 + 64);
  if (!result
    || (*(_QWORD *)a2 == *a3 ? (v8 = *(_QWORD *)(a2 + 8) == a3[1]) : (v8 = 0),
        v8 ? (v9 = *(_QWORD *)(a2 + 16) == a3[2]) : (v9 = 0),
        v9 ? (v10 = *(_QWORD *)(a2 + 24) == a3[3]) : (v10 = 0),
        !v10))
  {
    result = *(const void **)(a1 + 264);
    if (*(_QWORD *)a2 != *(_QWORD *)(a1 + 272)
      || *(_QWORD *)(a2 + 8) != *(_QWORD *)(a1 + 280)
      || *(_QWORD *)(a2 + 16) != *(_QWORD *)(a1 + 288)
      || *(_QWORD *)(a2 + 24) != *(_QWORD *)(a1 + 296))
    {
      if (result)
        CFRelease(result);
      v14 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)(a1 + 272) = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 288) = v14;
      result = (const void *)(*(uint64_t (**)(uint64_t))(a4 + 16))(a4);
      *(_QWORD *)(a1 + 264) = result;
    }
  }
  return result;
}

double sub_1B19DCA20(_QWORD *a1, _QWORD *a2)
{
  const void *v3;
  double result;

  if (!a1[8])
  {
    v3 = (const void *)a1[33];
    if (v3)
    {
      if (*a2 == a1[34] && a2[1] == a1[35] && a2[2] == a1[36] && a2[3] == a1[37])
      {
        a1[8] = CFRetain(v3);
        v3 = (const void *)a1[33];
      }
      CFRelease(v3);
      a1[33] = 0;
      result = 0.0;
      *((_OWORD *)a1 + 17) = 0u;
      *((_OWORD *)a1 + 18) = 0u;
    }
  }
  return result;
}

void sub_1B19DCA90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  float v10;
  float v11;
  __int128 v12;
  double v13;
  BOOL v14;
  float v15;
  float v16;
  __int128 v17;
  const void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  _BYTE data[40];
  _OWORD md[2];
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  memset(md, 0, sizeof(md));
  sub_1B19DCC00(a1, a3, a4, a5, a6, a7, a8, (uint64_t)data);
  CC_SHA256(data, 0x28u, (unsigned __int8 *)md);
  sub_1B19DCA20((_QWORD *)a1, md);
  if (!*(_QWORD *)(a1 + 64))
  {
    v9 = *(_QWORD *)(a1 + 208);
    v11 = *(float *)(a1 + 216);
    v10 = *(float *)(a1 + 220);
    v12 = *(_OWORD *)(a1 + 240);
    v37 = *(_OWORD *)(a1 + 224);
    v38 = v12;
    v39 = *(_QWORD *)(a1 + 256);
    v13 = v11 * 0.5;
    v14 = v13 <= v10;
    v15 = v13;
    if (v14)
      v16 = v15;
    else
      v16 = v10;
    *(_QWORD *)&v33 = v9;
    *((_QWORD *)&v33 + 1) = __PAIR64__(LODWORD(v16), LODWORD(v11));
    v17 = *(_OWORD *)(a1 + 240);
    v34 = *(_OWORD *)(a1 + 224);
    v35 = v17;
    v36 = *(_QWORD *)(a1 + 256);
    v18 = (const void *)sub_1B19DC748((uint64_t)&v33);
    *(_QWORD *)&v33 = v9;
    *((_QWORD *)&v33 + 1) = __PAIR64__(LODWORD(v16), LODWORD(v11));
    v34 = v37;
    v35 = v38;
    v36 = v39;
    v19 = sub_1B19981C0((uint64_t)v18, &v33);
    if (v19)
    {
      v26 = (const void *)v19;
      sub_1B17A14D4(a1, v19, v20, v21, v22, v23, v24, v25);
      CFRelease(v26);
      if (!v18)
        return;
    }
    else
    {
      sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), v20, v21, v22, v23, v24, v25, (uint64_t)"newMesh");
      sub_1B17A14D4(a1, 0, v27, v28, v29, v30, v31, v32);
      if (!v18)
        return;
    }
    CFRelease(v18);
  }
}

float sub_1B19DCC00@<S0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  float result;
  uint64_t v11;

  *(_QWORD *)(a8 + 32) = 0;
  *(_OWORD *)a8 = 0u;
  *(_OWORD *)(a8 + 16) = 0u;
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a2, a3, a4, a5, a6, a7, (uint64_t)"shapeGeometry");
  *(_BYTE *)a8 = *(_BYTE *)(a1 + 208);
  *(_QWORD *)(a8 + 4) = *(_QWORD *)(a1 + 216);
  result = *(float *)(a1 + 228);
  *(float *)(a8 + 16) = result;
  v11 = *(_QWORD *)(a1 + 256);
  *(_QWORD *)(a8 + 24) = *(_QWORD *)(a1 + 240);
  *(_QWORD *)(a8 + 32) = v11;
  return result;
}

void sub_1B19DCC78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _OWORD *v9;
  __int128 v10;
  double *v11;
  double *v12;
  float64_t v13;
  float64_t v14;
  uint64_t v15;
  float v16;
  float v17;
  __int128 v18;
  double v19;
  BOOL v20;
  float v21;
  float v22;
  const void *v23;
  __int128 v24;
  const void *v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  const void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  __int128 v52[3];
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  _OWORD data[7];
  unsigned __int8 md[16];
  __int128 v59;
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  v9 = (_OWORD *)(a1 + 312);
  *(_OWORD *)md = 0u;
  v59 = 0u;
  memset(data, 0, sizeof(data));
  sub_1B19DCC00(a1, a3, a4, a5, a6, a7, a8, (uint64_t)data);
  *(_OWORD *)((char *)&data[2] + 8) = *v9;
  *((_QWORD *)&data[3] + 1) = *(_QWORD *)(a1 + 328);
  v10 = v9[2];
  LOWORD(data[4]) = *(_WORD *)(a1 + 336);
  *(_OWORD *)((char *)&data[4] + 8) = v10;
  *(_OWORD *)((char *)&data[5] + 8) = v9[3];
  DWORD2(data[6]) = *(_DWORD *)(a1 + 212);
  CC_SHA256(data, 0x70u, md);
  sub_1B19DCA20((_QWORD *)a1, md);
  if (!*(_QWORD *)(a1 + 64))
  {
    sub_1B19DCF20(a1);
    v11 = (double *)MEMORY[0x1E0C9D538];
    v12 = (double *)(a1 + 352);
    if (*(_BYTE *)(a1 + 337))
      v11 = (double *)(v9 + 2);
    else
      v12 = (double *)(MEMORY[0x1E0C9D538] + 8);
    v13 = *v12;
    v14 = *v11;
    v15 = *(_QWORD *)(a1 + 208);
    v17 = *(float *)(a1 + 216);
    v16 = *(float *)(a1 + 220);
    v18 = *(_OWORD *)(a1 + 240);
    v54 = *(_OWORD *)(a1 + 224);
    v55 = v18;
    v56 = *(_QWORD *)(a1 + 256);
    v19 = v17 * 0.5;
    v20 = v19 <= v16;
    v21 = v19;
    if (v20)
      v22 = v21;
    else
      v22 = v16;
    v23 = *(const void **)(a1 + 304);
    *(_QWORD *)&v47 = v15;
    *((_QWORD *)&v47 + 1) = __PAIR64__(LODWORD(v22), LODWORD(v17));
    v24 = *(_OWORD *)(a1 + 240);
    v48 = *(_OWORD *)(a1 + 224);
    v49 = v24;
    *(_QWORD *)&v50 = *(_QWORD *)(a1 + 256);
    v25 = (const void *)sub_1B19966A8(v23, (uint64_t)&v47);
    *((_QWORD *)&v52[0] + 1) = __PAIR64__(LODWORD(v22), LODWORD(v17));
    v52[1] = v54;
    v52[2] = v55;
    v53 = v56;
    v26 = *(_OWORD *)(a1 + 352);
    v49 = *(_OWORD *)(a1 + 336);
    v50 = v26;
    v51 = *(_QWORD *)(a1 + 368);
    *(_QWORD *)&v52[0] = v15;
    v27 = *(_OWORD *)(a1 + 320);
    v47 = *(_OWORD *)(a1 + 304);
    v48 = v27;
    v33 = sub_1B1998320((uint64_t)v25, v52, (uint64_t)&v47, v28, v29, v30, v31, v32, v14, v13);
    if (v33)
    {
      v40 = (const void *)v33;
      sub_1B17A14D4(a1, v33, v34, v35, v36, v37, v38, v39);
      CFRelease(v40);
      if (!v25)
        return;
    }
    else
    {
      sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), v34, v35, v36, v37, v38, v39, (uint64_t)"newMesh");
      sub_1B17A14D4(a1, 0, v41, v42, v43, v44, v45, v46);
      if (!v25)
        return;
    }
    CFRelease(v25);
  }
}

float sub_1B19DCE90@<S0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  _OWORD *v10;
  __int128 v11;
  __int128 v12;
  float result;
  _OWORD v14[2];
  uint64_t v15;

  *(_OWORD *)(a8 + 80) = 0u;
  *(_OWORD *)(a8 + 96) = 0u;
  v10 = (_OWORD *)(a1 + 312);
  *(_OWORD *)(a8 + 48) = 0u;
  *(_OWORD *)(a8 + 64) = 0u;
  *(_OWORD *)(a8 + 16) = 0u;
  *(_OWORD *)(a8 + 32) = 0u;
  *(_OWORD *)a8 = 0u;
  sub_1B19DCC00(a1, a2, a3, a4, a5, a6, a7, (uint64_t)v14);
  v11 = v14[1];
  *(_OWORD *)a8 = v14[0];
  *(_OWORD *)(a8 + 16) = v11;
  *(_OWORD *)(a8 + 40) = *v10;
  *(_QWORD *)(a8 + 56) = *(_QWORD *)(a1 + 328);
  v12 = v10[3];
  *(_OWORD *)(a8 + 72) = v10[2];
  *(_QWORD *)(a8 + 32) = v15;
  *(_WORD *)(a8 + 64) = *(_WORD *)(a1 + 336);
  *(_OWORD *)(a8 + 88) = v12;
  result = *(float *)(a1 + 212);
  *(float *)(a8 + 104) = result;
  return result;
}

void sub_1B19DCF20(uint64_t a1)
{
  const __CFAttributedString *v2;
  id v3;
  const char *v4;
  uint64_t v5;
  id v6;
  int v7;
  uint64_t v8;
  char isKindOfClass;
  const char *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  const char *v17;
  void *v18;
  const __CTFramesetter *v19;
  CGSize v20;
  CGFloat width;
  CGFloat height;
  CGPath *Mutable;
  const CGPath *v24;
  uint64_t v25;
  uint64_t v26;
  CGFloat v27;
  CGFloat v28;
  CTFrameRef Frame;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  CFRange v36;
  CFRange v37;
  CGSize v38;

  if (*(_QWORD *)(a1 + 304))
    return;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    v3 = objc_alloc_init(MEMORY[0x1E0DC33B0]);
    v6 = v3;
    if (*(_BYTE *)(a1 + 336))
    {
      if (*(_BYTE *)(a1 + 337) && (v7 = *(_DWORD *)(a1 + 328) - 1, v7 <= 3))
        objc_msgSend_setAlignment_(v3, v4, qword_1B2268FD8[v7], v5);
      else
        objc_msgSend_setAlignment_(v3, v4, 4, v5);
    }
    else if (*(_BYTE *)(a1 + 337) && (v8 = (*(_DWORD *)(a1 + 332) - 1), v8 < 3))
    {
      objc_msgSend_setLineBreakMode_(v3, v4, v8 + 3, v5);
    }
    else
    {
      objc_msgSend_setLineBreakMode_(v3, v4, 2, v5);
    }
    objc_opt_class();
    isKindOfClass = objc_opt_isKindOfClass();
    v12 = (_QWORD *)MEMORY[0x1E0DC32A0];
    if ((isKindOfClass & 1) != 0)
    {
      v13 = objc_msgSend_attribute_atIndex_effectiveRange_(*(void **)(a1 + 312), v10, *MEMORY[0x1E0DC32A0], 0, 0);
    }
    else
    {
      v14 = *(_QWORD *)(a1 + 320);
      if (v14)
      {
LABEL_19:
        v15 = objc_msgSend_dictionaryWithObjectsAndKeys_(MEMORY[0x1E0C99D80], v10, v14, v11, *v12, v6, *MEMORY[0x1E0DC32C0], 0);
        v16 = objc_alloc(MEMORY[0x1E0CB3498]);
        if (*(_QWORD *)(a1 + 312))
          v18 = (void *)objc_msgSend_initWithString_attributes_(v16, v17, *(_QWORD *)(a1 + 312), v15);
        else
          v18 = (void *)objc_msgSend_initWithString_attributes_(v16, v17, (uint64_t)&stru_1E63FD500, v15);
        v2 = v18;
        goto LABEL_23;
      }
      v13 = objc_msgSend_fontWithName_size_(MEMORY[0x1E0DC37E8], v10, (uint64_t)CFSTR("Helvetica"), v11, 12.0);
    }
    v14 = v13;
    goto LABEL_19;
  }
  v2 = *(const __CFAttributedString **)(a1 + 312);
LABEL_23:
  v19 = CTFramesetterCreateWithAttributedString(v2);
  v38.width = 1.79769313e308;
  v36.location = 0;
  v36.length = 0;
  v38.height = 1.79769313e308;
  v20 = CTFramesetterSuggestFrameSizeWithConstraints(v19, v36, 0, v38, 0);
  width = v20.width;
  height = v20.height;
  Mutable = CGPathCreateMutable();
  v24 = Mutable;
  if (*(_BYTE *)(a1 + 337))
  {
    v25 = *(_QWORD *)(a1 + 344);
    v26 = *(_QWORD *)(a1 + 352);
    width = *(double *)(a1 + 360);
    height = *(double *)(a1 + 368);
  }
  else
  {
    v25 = 0;
    v26 = 0;
  }
  v27 = width;
  v28 = height;
  CGPathAddRect(Mutable, 0, *(CGRect *)&v25);
  v37.location = 0;
  v37.length = 0;
  Frame = CTFramesetterCreateFrame(v19, v37, v24, 0);
  sub_1B19DDA1C(a1, Frame, v30, v31, v32, v33, v34, v35);
  CFRelease(v19);
  CFRelease(Frame);
  CFRelease(v24);
}

uint64_t sub_1B19DD180(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 337);
}

double sub_1B19DD188(uint64_t a1)
{
  return *(double *)(a1 + 344);
}

uint64_t sub_1B19DD194(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"shapeGeometry");
  return *(unsigned int *)(a1 + 224);
}

void sub_1B19DD1DC(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"shapeGeometry");
  if (*(_DWORD *)(a1 + 224) != a2)
  {
    *(_DWORD *)(a1 + 224) = a2;
    sub_1B17A14D4(a1, 0, a3, a4, a5, a6, a7, a8);
  }
}

float sub_1B19DD24C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"shapeGeometry");
  return *(float *)(a1 + 220);
}

void sub_1B19DD294(uint64_t a1, float a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a4, a5, a6, a7, a8, a9, (uint64_t)"shapeGeometry");
  if (*(float *)(a1 + 220) != a2)
  {
    *(float *)(a1 + 220) = a2;
    sub_1B17A14D4(a1, 0, a4, a5, a6, a7, a8, a9);
  }
}

float sub_1B19DD310(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"shapeGeometry");
  return *(float *)(a1 + 228);
}

void sub_1B19DD358(uint64_t a1, float a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a4, a5, a6, a7, a8, a9, (uint64_t)"shapeGeometry");
  if (*(float *)(a1 + 228) != a2)
  {
    *(float *)(a1 + 228) = a2;
    sub_1B17A14D4(a1, 0, a4, a5, a6, a7, a8, a9);
  }
}

float sub_1B19DD3D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"shapeGeometry");
  return *(float *)(a1 + 216);
}

void sub_1B19DD41C(uint64_t a1, float a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a4, a5, a6, a7, a8, a9, (uint64_t)"shapeGeometry");
  if (*(float *)(a1 + 216) != a2)
  {
    *(float *)(a1 + 216) = a2;
    sub_1B17A14D4(a1, 0, a4, a5, a6, a7, a8, a9);
  }
}

uint64_t sub_1B19DD498(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"shapeGeometry");
  return *(char *)(a1 + 208);
}

void sub_1B19DD4E0(uint64_t a1, unsigned __int8 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"shapeGeometry");
  if (*(unsigned __int8 *)(a1 + 208) != a2)
  {
    *(_BYTE *)(a1 + 208) = a2;
    sub_1B17A14D4(a1, 0, a3, a4, a5, a6, a7, a8);
  }
}

uint64_t sub_1B19DD550(uint64_t a1)
{
  return *(_QWORD *)(a1 + 256);
}

void sub_1B19DD558(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  sub_1B19DD4E0(a1, *(_BYTE *)a2, a3, a4, a5, a6, a7, a8);
  sub_1B19DD41C(a1, *(float *)(a2 + 4), v10, v11, v12, v13, v14, v15, v16);
  sub_1B19DD294(a1, *(float *)(a2 + 8), v17, v18, v19, v20, v21, v22, v23);
  sub_1B19DD358(a1, *(float *)(a2 + 16), v24, v25, v26, v27, v28, v29, v30);
  sub_1B19DD5B8(a1, *(void **)(a2 + 24));
  sub_1B19DD638(a1, *(void **)(a2 + 32));
}

void sub_1B19DD5B8(uint64_t a1, void *a2)
{
  void *v2;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const void *v16;
  CFTypeRef v17;

  v2 = *(void **)(a1 + 240);
  if (v2 != a2)
  {

    *(_QWORD *)(a1 + 240) = a2;
    objc_msgSend_flatness(a2, v5, v6, v7);
    *(float *)&v8 = v8;
    *(_DWORD *)(a1 + 212) = LODWORD(v8);
    CGPathRelease(*(CGPathRef *)(a1 + 232));
    if (a2)
    {
      v16 = (const void *)objc_msgSend_CGPath(a2, v9, v10, v11);
      v17 = CFRetain(v16);
    }
    else
    {
      v17 = 0;
    }
    *(_QWORD *)(a1 + 232) = v17;
    sub_1B17A14D4(a1, 0, v10, v11, v12, v13, v14, v15);
  }
}

void sub_1B19DD638(uint64_t a1, void *a2)
{
  void *v2;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const void *v12;
  CFTypeRef v13;

  v2 = *(void **)(a1 + 256);
  if (v2 != a2)
  {

    *(_QWORD *)(a1 + 256) = a2;
    CGPathRelease(*(CGPathRef *)(a1 + 248));
    if (a2)
    {
      v12 = (const void *)objc_msgSend_CGPath(a2, v5, v6, v7);
      v13 = CFRetain(v12);
    }
    else
    {
      v13 = 0;
    }
    *(_QWORD *)(a1 + 248) = v13;
    sub_1B17A14D4(a1, 0, v6, v7, v8, v9, v10, v11);
  }
}

float sub_1B19DD6A8(uint64_t a1)
{
  return *(float *)(a1 + 212);
}

void sub_1B19DD6B0(uint64_t a1, float a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a2 <= 0.0)
    a2 = 0.001;
  if (*(float *)(a1 + 212) != a2)
  {
    *(float *)(a1 + 212) = a2;
    sub_1B17A14D4(a1, 0, a4, a5, a6, a7, a8, a9);
  }
}

uint64_t sub_1B19DD6DC(uint64_t a1)
{
  return *(_QWORD *)(a1 + 312);
}

uint64_t sub_1B19DD6E4(uint64_t a1)
{
  return *(_QWORD *)(a1 + 320);
}

uint64_t sub_1B19DD6EC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 328);
}

uint64_t sub_1B19DD6F4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 332);
}

uint64_t sub_1B19DD6FC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 336);
}

void sub_1B19DD704(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  float v42;
  _OWORD v43[2];
  uint64_t v44;

  v10 = *(_OWORD *)(a2 + 16);
  v43[0] = *(_OWORD *)a2;
  v43[1] = v10;
  v44 = *(_QWORD *)(a2 + 32);
  sub_1B19DD558(a1, (uint64_t)v43, a3, a4, a5, a6, a7, a8);
  sub_1B19DD7EC(a1, *(void **)(a2 + 40));
  sub_1B19DD844(a1, *(void **)(a2 + 48));
  sub_1B19DD89C(a1, *(_DWORD *)(a2 + 56), v11, v12, v13, v14, v15, v16);
  sub_1B19DD8E4(a1, *(_DWORD *)(a2 + 60), v17, v18, v19, v20, v21, v22);
  sub_1B19DD92C(a1, *(unsigned __int8 *)(a2 + 64), v23, v24, v25, v26, v27, v28);
  v35 = *(unsigned __int8 *)(a2 + 65);
  if (*(unsigned __int8 *)(a1 + 337) != v35)
  {
    *(_BYTE *)(a1 + 337) = v35;
    sub_1B17A14D4(a1, 0, v29, v30, v31, v32, v33, v34);
  }
  sub_1B19DD990(a1, *(CGFloat *)(a2 + 72), *(CGFloat *)(a2 + 80), *(CGFloat *)(a2 + 88), *(CGFloat *)(a2 + 96));
  v42 = *(float *)(a2 + 104);
  if (v42 <= 0.0)
    v42 = 0.001;
  if (*(float *)(a1 + 212) != v42)
  {
    *(float *)(a1 + 212) = v42;
    sub_1B17A14D4(a1, 0, v36, v37, v38, v39, v40, v41);
  }
}

void sub_1B19DD7EC(uint64_t a1, void *a2)
{
  void *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *(void **)(a1 + 312);
  if (v2 != a2)
  {

    *(_QWORD *)(a1 + 312) = a2;
    sub_1B19DDA1C(a1, 0, v5, v6, v7, v8, v9, v10);
    sub_1B17A14D4(a1, 0, v11, v12, v13, v14, v15, v16);
  }
}

void sub_1B19DD844(uint64_t a1, void *a2)
{
  void *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *(void **)(a1 + 320);
  if (v2 != a2)
  {

    *(_QWORD *)(a1 + 320) = a2;
    sub_1B19DDA1C(a1, 0, v5, v6, v7, v8, v9, v10);
    sub_1B17A14D4(a1, 0, v11, v12, v13, v14, v15, v16);
  }
}

void sub_1B19DD89C(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (*(_DWORD *)(a1 + 328) != a2)
  {
    *(_DWORD *)(a1 + 328) = a2;
    sub_1B19DDA1C(a1, 0, a3, a4, a5, a6, a7, a8);
    sub_1B17A14D4(a1, 0, v9, v10, v11, v12, v13, v14);
  }
}

void sub_1B19DD8E4(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (*(_DWORD *)(a1 + 332) != a2)
  {
    *(_DWORD *)(a1 + 332) = a2;
    sub_1B19DDA1C(a1, 0, a3, a4, a5, a6, a7, a8);
    sub_1B17A14D4(a1, 0, v9, v10, v11, v12, v13, v14);
  }
}

void sub_1B19DD92C(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (*(unsigned __int8 *)(a1 + 336) != a2)
  {
    *(_BYTE *)(a1 + 336) = a2;
    sub_1B19DDA1C(a1, 0, a3, a4, a5, a6, a7, a8);
    sub_1B17A14D4(a1, 0, v9, v10, v11, v12, v13, v14);
  }
}

void sub_1B19DD974(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*(unsigned __int8 *)(a1 + 337) != a2)
  {
    *(_BYTE *)(a1 + 337) = a2;
    sub_1B17A14D4(a1, 0, a3, a4, a5, a6, a7, a8);
  }
}

void sub_1B19DD990(uint64_t a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  CGRect v22;

  v22.origin.x = a2;
  v22.origin.y = a3;
  v22.size.width = a4;
  v22.size.height = a5;
  if (!CGRectEqualToRect(*(CGRect *)(a1 + 344), v22))
  {
    *(CGFloat *)(a1 + 344) = a2;
    *(CGFloat *)(a1 + 352) = a3;
    *(CGFloat *)(a1 + 360) = a4;
    *(CGFloat *)(a1 + 368) = a5;
    sub_1B19DDA1C(a1, 0, v10, v11, v12, v13, v14, v15);
    sub_1B17A14D4(a1, 0, v16, v17, v18, v19, v20, v21);
  }
}

void sub_1B19DDA1C(uint64_t a1, CFTypeRef cf, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  CFTypeRef v9;
  CFTypeRef v11;

  v9 = *(CFTypeRef *)(a1 + 304);
  if (v9 != cf)
  {
    if (v9)
    {
      CFRelease(v9);
      *(_QWORD *)(a1 + 304) = 0;
    }
    if (cf)
      v11 = CFRetain(cf);
    else
      v11 = 0;
    *(_QWORD *)(a1 + 304) = v11;
    sub_1B17A14D4(a1, 0, a3, a4, a5, a6, a7, a8);
  }
}

uint64_t sub_1B19DDA80(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend_fontWithName_size_(MEMORY[0x1E0DC37E8], a2, (uint64_t)CFSTR("Helvetica"), a4, 12.0);
}

uint64_t sub_1B19DDA98(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 338);
}

void sub_1B19DDAA0(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*(unsigned __int8 *)(a1 + 338) != a2)
  {
    *(_BYTE *)(a1 + 338) = a2;
    sub_1B17A14D4(a1, 0, a3, a4, a5, a6, a7, a8);
  }
}

uint64_t sub_1B19DDABC()
{
  if (qword_1ED4CEE50 != -1)
    dispatch_once(&qword_1ED4CEE50, &unk_1E63D14D0);
  return qword_1ED4CEE58;
}

double sub_1B19DDAFC()
{
  void *v0;
  const void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double result;

  if (!qword_1ED4CEE58)
  {
    v0 = (void *)sub_1B179CB60(&qword_1ED4CEE58);
    qword_1ED4CEE58 = (uint64_t)v0;
    v1 = (const void *)sub_1B17A12B4();
    sub_1B19C3200(v0, v1);
    sub_1B19C326C(CFSTR("chamferRadius"), 0xDCu, 1, 0, 0, 0, v2, v3);
    sub_1B19C326C(CFSTR("extrusionDepth"), 0xD8u, 1, 0, 0, 0, v4, v5);
    sub_1B19C3258();
    unk_1ED4BBBE8 = xmmword_1E63D3158;
    xmmword_1ED4BBBD0 = xmmword_1E63D3148;
    *(_QWORD *)&result = 0x1B19DE588;
    unk_1ED4BBBF8 = xmmword_1E63D3168;
    unk_1ED4BBC08 = unk_1E63D3178;
    qword_1ED4BBC18 = 0;
    qword_1ED4BBC28 = (uint64_t)sub_1B19DE58C;
  }
  return result;
}

uint64_t sub_1B19DDBE8()
{
  if (qword_1ED4CEE88 != -1)
    dispatch_once(&qword_1ED4CEE88, &unk_1E63D1530);
  return qword_1ED4CEE90;
}

double sub_1B19DDC28()
{
  void *v0;
  double result;

  if (!qword_1ED4CEE90)
  {
    v0 = (void *)sub_1B179CB60(&qword_1ED4CEE90);
    qword_1ED4CEE90 = (uint64_t)v0;
    if (qword_1ED4CEE50 != -1)
      dispatch_once(&qword_1ED4CEE50, &unk_1E63D14D0);
    sub_1B19C3200(v0, (const void *)qword_1ED4CEE58);
    sub_1B19C3258();
    unk_1ED4BEDF8 = xmmword_1E63D31F0;
    xmmword_1ED4BEDE0 = xmmword_1E63D31E0;
    *(_QWORD *)&result = 0x1B19DE68CLL;
    unk_1ED4BEE08 = xmmword_1E63D3200;
    unk_1ED4BEE18 = *(_OWORD *)algn_1E63D3210;
    qword_1ED4BEE28 = 0;
    qword_1ED4BEE38 = (uint64_t)sub_1B19DE690;
  }
  return result;
}

uint64_t sub_1B19DDCF8(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  sub_1B17A13B4(a1);
  v2 = (void *)sub_1B1878138();
  sub_1B17A1B04(a1, v2, v3, v4, v5, v6, v7, v8);
  CFRelease(v2);
  *(_BYTE *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 212) = 1065353216;
  *(_DWORD *)(a1 + 220) = 0;
  *(_DWORD *)(a1 + 228) = 2139095039;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  return sub_1B17A1BF4(a1, (uint64_t)sub_1B19DCA90);
}

void sub_1B19DDDC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  float v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  sub_1B17A15D0(a1, a2, a3, a4, a5, a6, a7, a8);
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), v10, v11, v12, v13, v14, v15, (uint64_t)"shapeGeometry");
  sub_1B19DD4E0(a2, *(_BYTE *)(a1 + 208), v10, v11, v12, v13, v14, v15);
  v23 = *(float *)(a1 + 212);
  if (v23 <= 0.0)
    v23 = 0.001;
  if (*(float *)(a2 + 212) != v23)
  {
    *(float *)(a2 + 212) = v23;
    sub_1B17A14D4(a2, 0, v17, v18, v19, v20, v21, v22);
  }
  sub_1B19DD41C(a2, *(float *)(a1 + 216), v16, v17, v18, v19, v20, v21, v22);
  sub_1B19DD294(a2, *(float *)(a1 + 220), v24, v25, v26, v27, v28, v29, v30);
  sub_1B19DD358(a2, *(float *)(a1 + 228), v31, v32, v33, v34, v35, v36, v37);
  sub_1B19DD5B8(a2, *(void **)(a1 + 240));
  sub_1B19DD638(a2, *(void **)(a1 + 256));
}

void sub_1B19DDE84(uint64_t a1)
{
  const void *v2;

  sub_1B19DD5B8(a1, 0);
  sub_1B19DD638(a1, 0);
  v2 = *(const void **)(a1 + 264);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(a1 + 264) = 0;
  }
}

void sub_1B19DDF58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;

  sub_1B19DDDC4(a1, a2, a3, a4, a5, a6, a7, a8);
  sub_1B19DDA1C(a2, *(CFTypeRef *)(a1 + 304), v10, v11, v12, v13, v14, v15);
  sub_1B19DD7EC(a2, *(void **)(a1 + 312));
  sub_1B19DD844(a2, *(void **)(a1 + 320));
  sub_1B19DD89C(a2, *(_DWORD *)(a1 + 328), v16, v17, v18, v19, v20, v21);
  sub_1B19DD8E4(a2, *(_DWORD *)(a1 + 332), v22, v23, v24, v25, v26, v27);
  sub_1B19DD92C(a2, *(unsigned __int8 *)(a1 + 336), v28, v29, v30, v31, v32, v33);
  v40 = *(unsigned __int8 *)(a1 + 337);
  if (*(unsigned __int8 *)(a2 + 337) != v40)
  {
    *(_BYTE *)(a2 + 337) = v40;
    sub_1B17A14D4(a2, 0, v34, v35, v36, v37, v38, v39);
  }
  sub_1B19DD990(a2, *(CGFloat *)(a1 + 344), *(CGFloat *)(a1 + 352), *(CGFloat *)(a1 + 360), *(CGFloat *)(a1 + 368));
}

void sub_1B19DDFF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1B19DDA1C(a1, 0, a3, a4, a5, a6, a7, a8);
  sub_1B19DD7EC(a1, 0);
  sub_1B19DD844(a1, 0);
  sub_1B19DDE84(a1);
}

const void *sub_1B19DE030(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __int128 v10;
  __int128 v11;
  _QWORD v13[4];
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  _OWORD v17[2];
  uint64_t v18;
  _BYTE data[40];
  _OWORD v20[2];
  _OWORD md[2];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  memset(md, 0, sizeof(md));
  memset(v20, 0, sizeof(v20));
  sub_1B19DCC00(a1, a3, a4, a5, a6, a7, a8, (uint64_t)data);
  CC_SHA256(data, 0x28u, (unsigned __int8 *)md);
  v10 = a2[1];
  v17[0] = *a2;
  v17[1] = v10;
  v18 = *((_QWORD *)a2 + 4);
  CC_SHA256(v17, 0x28u, (unsigned __int8 *)v20);
  v13[0] = MEMORY[0x1E0C809B0];
  v13[1] = 3221225472;
  v13[2] = sub_1B19DE128;
  v13[3] = &unk_1E63DADE0;
  v11 = a2[1];
  v14 = *a2;
  v15 = v11;
  v16 = *((_QWORD *)a2 + 4);
  return sub_1B19DC97C(a1, (uint64_t)v20, md, (uint64_t)v13);
}

const void *sub_1B19DE128(uint64_t a1)
{
  const void *v2;
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const void *v17;
  _OWORD v19[2];
  uint64_t v20;

  v2 = (const void *)-[VFXShape __createCFObject]_0();
  v3 = *(_OWORD *)(a1 + 48);
  v19[0] = *(_OWORD *)(a1 + 32);
  v19[1] = v3;
  v20 = *(_QWORD *)(a1 + 64);
  sub_1B19DD558((uint64_t)v2, (uint64_t)v19, v4, v5, v6, v7, v8, v9);
  v17 = (const void *)sub_1B17A0848((uint64_t)v2, v10, v11, v12, v13, v14, v15, v16);
  CFRetain(v17);
  CFRelease(v2);
  return v17;
}

uint64_t sub_1B19DE188(uint64_t a1, _OWORD *a2, _OWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __int128 v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v18[2];
  uint64_t v19;

  v10 = *(_OWORD *)(a4 + 16);
  v18[0] = *(_OWORD *)a4;
  v18[1] = v10;
  v19 = *(_QWORD *)(a4 + 32);
  v11 = sub_1B19DE030(a1, v18, (uint64_t)a3, a4, a5, a6, a7, a8);
  return sub_1B1874504((uint64_t)v11, a2, a3, v12, v13, v14, v15, v16);
}

uint64_t sub_1B19DE1D0(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __int128 v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v18[2];
  uint64_t v19;

  v9 = *(_OWORD *)(a3 + 16);
  v18[0] = *(_OWORD *)a3;
  v18[1] = v9;
  v19 = *(_QWORD *)(a3 + 32);
  v10 = sub_1B19DE030(a1, v18, a3, a4, a5, a6, a7, a8);
  return sub_1B1874680((uint64_t)v10, a2, v11, v12, v13, v14, v15, v16);
}

const void *sub_1B19DE210(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _OWORD *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _QWORD v19[4];
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _OWORD v27[7];
  _OWORD data[7];
  unsigned __int8 v29[16];
  __int128 v30;
  unsigned __int8 md[16];
  __int128 v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)md = 0u;
  v32 = 0u;
  v10 = (_OWORD *)(a1 + 312);
  *(_OWORD *)v29 = 0u;
  v30 = 0u;
  memset(data, 0, sizeof(data));
  sub_1B19DCC00(a1, a3, a4, a5, a6, a7, a8, (uint64_t)data);
  *(_OWORD *)((char *)&data[2] + 8) = *v10;
  *((_QWORD *)&data[3] + 1) = *(_QWORD *)(a1 + 328);
  LOWORD(data[4]) = *(_WORD *)(a1 + 336);
  v11 = v10[3];
  *(_OWORD *)((char *)&data[4] + 8) = v10[2];
  *(_OWORD *)((char *)&data[5] + 8) = v11;
  DWORD2(data[6]) = *(_DWORD *)(a1 + 212);
  CC_SHA256(data, 0x70u, md);
  v12 = a2[5];
  v27[4] = a2[4];
  v27[5] = v12;
  v27[6] = a2[6];
  v13 = a2[1];
  v27[0] = *a2;
  v27[1] = v13;
  v14 = a2[3];
  v27[2] = a2[2];
  v27[3] = v14;
  CC_SHA256(v27, 0x70u, v29);
  v19[0] = MEMORY[0x1E0C809B0];
  v19[1] = 3221225472;
  v19[2] = sub_1B19DE36C;
  v19[3] = &unk_1E63DAE00;
  v15 = a2[5];
  v24 = a2[4];
  v25 = v15;
  v26 = a2[6];
  v16 = a2[1];
  v20 = *a2;
  v21 = v16;
  v17 = a2[3];
  v22 = a2[2];
  v23 = v17;
  return sub_1B19DC97C(a1, (uint64_t)v29, md, (uint64_t)v19);
}

const void *sub_1B19DE36C(_OWORD *a1)
{
  const void *v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const void *v19;
  _OWORD v21[7];

  v2 = (const void *)-[VFXText __createCFObject]_0();
  v3 = a1[7];
  v21[4] = a1[6];
  v21[5] = v3;
  v21[6] = a1[8];
  v4 = a1[3];
  v21[0] = a1[2];
  v21[1] = v4;
  v5 = a1[5];
  v21[2] = a1[4];
  v21[3] = v5;
  sub_1B19DD704((uint64_t)v2, (uint64_t)v21, v6, v7, v8, v9, v10, v11);
  v19 = (const void *)sub_1B17A0848((uint64_t)v2, v12, v13, v14, v15, v16, v17, v18);
  CFRetain(v19);
  CFRelease(v2);
  return v19;
}

uint64_t sub_1B19DE3DC(uint64_t a1, _OWORD *a2, _OWORD *a3, _OWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __int128 v10;
  __int128 v11;
  __int128 v12;
  const void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _OWORD v20[7];

  v10 = a4[5];
  v20[4] = a4[4];
  v20[5] = v10;
  v20[6] = a4[6];
  v11 = a4[1];
  v20[0] = *a4;
  v20[1] = v11;
  v12 = a4[3];
  v20[2] = a4[2];
  v20[3] = v12;
  v13 = sub_1B19DE210(a1, v20, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
  return sub_1B1874504((uint64_t)v13, a2, a3, v14, v15, v16, v17, v18);
}

uint64_t sub_1B19DE434(uint64_t a1, _OWORD *a2, _OWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __int128 v9;
  __int128 v10;
  __int128 v11;
  const void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _OWORD v20[7];

  v9 = a3[5];
  v20[4] = a3[4];
  v20[5] = v9;
  v20[6] = a3[6];
  v10 = a3[1];
  v20[0] = *a3;
  v20[1] = v10;
  v11 = a3[3];
  v20[2] = a3[2];
  v20[3] = v11;
  v12 = sub_1B19DE210(a1, v20, (uint64_t)a3, a4, a5, a6, a7, a8);
  return sub_1B1874680((uint64_t)v12, a2, v13, v14, v15, v16, v17, v18);
}

id sub_1B19DE488(_QWORD *a1)
{
  sub_1B19DDE84((uint64_t)a1);
  return sub_1B17A0620(a1);
}

id sub_1B19DE4B8(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1B19DDFF0((uint64_t)a1, a2, a3, a4, a5, a6, a7, a8);
  return sub_1B17A0620(a1);
}

uint64_t sub_1B19DE4E4(uint64_t a1, uint64_t a2, _OWORD *a3, _OWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  result = sub_1B17A0848(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
  if (result)
    return sub_1B1874504(result, a3, a4, v11, v12, v13, v14, v15);
  return result;
}

uint64_t sub_1B19DE520(uint64_t a1, uint64_t a2, _OWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  result = sub_1B17A0848(a1, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  if (result)
    return sub_1B1874680(result, a3, v10, v11, v12, v13, v14, v15);
  return result;
}

void sub_1B19DE554(uint64_t a1, void *__dst, void *__src, size_t __n)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  memcpy(__dst, __src, __n);
  sub_1B17A14D4(a1, 0, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_1B19DE58C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"src");
  v9 = -[VFXShape __createCFObject]_0();
  sub_1B19DDDC4(a1, v9, v10, v11, v12, v13, v14, v15);
  return v9;
}

uint64_t sub_1B19DE5E8(uint64_t a1, uint64_t a2, _OWORD *a3, _OWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  result = sub_1B17A0848(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
  if (result)
    return sub_1B1874504(result, a3, a4, v11, v12, v13, v14, v15);
  return result;
}

uint64_t sub_1B19DE624(uint64_t a1, uint64_t a2, _OWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  result = sub_1B17A0848(a1, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  if (result)
    return sub_1B1874680(result, a3, v10, v11, v12, v13, v14, v15);
  return result;
}

void sub_1B19DE658(uint64_t a1, void *__dst, void *__src, size_t __n)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  memcpy(__dst, __src, __n);
  sub_1B17A14D4(a1, 0, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_1B19DE690(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"src");
  v9 = -[VFXText __createCFObject]_0();
  sub_1B19DDF58(a1, v9, v10, v11, v12, v13, v14, v15);
  return v9;
}

_QWORD *VFXNodeGetBoundingSphere(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *result;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  void *Object;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  const char *v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t i;
  void *v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t j;
  void *v52;
  uint64_t *v53;
  _QWORD *v54;
  unsigned int v55;
  char v56;
  CFTypeRef *v57;
  uint64_t v58;
  CFTypeRef v59;
  uint64_t v60;
  uint64_t v61;
  float32x4_t *v62;
  float32x4_t v63;
  float32x4_t v64;
  float v65;
  float32_t v66;
  float32x4_t v67;
  float32x4_t *v68;
  float32x4_t v69;
  float v70;
  uint64_t v72;
  float32x4_t *v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float v77;
  float32_t v78;
  BOOL v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  float32x4_t v88;
  __n128 v89;
  float32x4_t v90;
  uint64_t v91;
  float32x4_t *v92;
  _BYTE v93[160];
  _QWORD v94[4];
  _QWORD v95[6];
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  uint64_t v100;
  void *v101;
  _BYTE v102[80];
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  _OWORD v107[2];
  int v108;
  _QWORD v109[2];
  uint64_t (*v110)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  void *v111;
  _QWORD *v112;
  _BYTE v113[128];
  _BYTE v114[128];
  uint64_t v115;

  v115 = *MEMORY[0x1E0C80C00];
  result = (_QWORD *)objc_msgSend_count(a1, a2, a3, a4);
  if (result)
  {
    Object = (void *)objc_msgSend_firstObject(a1, v7, v8, v9, 0.0);
    result = (_QWORD *)objc_msgSend_nodeRef(Object, v11, v12, v13);
    if (result)
    {
      result = (_QWORD *)sub_1B17C6244(result, v14, v15, v16, v17, v18, v19, v20);
      if (result)
      {
        v28 = result;
        sub_1B187973C((uint64_t)result, v21, v22, v23, v24, v25, v26, v27);
        v29 = MEMORY[0x1E0C809B0];
        v109[0] = MEMORY[0x1E0C809B0];
        v109[1] = 3221225472;
        v110 = sub_1B19DECBC;
        v111 = &unk_1E63D8F10;
        v112 = v28;
        memset(v107, 0, sizeof(v107));
        v108 = 1065353216;
        v33 = objc_msgSend_count(a1, v30, v31, v32);
        sub_1B179C4B4((uint64_t)v107, vcvtps_u32_f32((float)(unint64_t)v33 / 1.0));
        v105 = 0u;
        v106 = 0u;
        v103 = 0u;
        v104 = 0u;
        v38 = objc_msgSend_countByEnumeratingWithState_objects_count_(a1, v34, (uint64_t)&v103, (uint64_t)v114, 16);
        if (v38)
        {
          v39 = *(_QWORD *)v104;
          do
          {
            for (i = 0; i != v38; ++i)
            {
              if (*(_QWORD *)v104 != v39)
                objc_enumerationMutation(a1);
              v41 = *(void **)(*((_QWORD *)&v103 + 1) + 8 * i);
              v100 = objc_msgSend_nodeRef(v41, v35, v36, v37);
              v91 = (uint64_t)&v100;
              sub_1B19DED84((uint64_t)v107, &v100, (uint64_t)&unk_1B22458B0, (_QWORD **)&v91)[3] = v41;
            }
            v38 = objc_msgSend_countByEnumeratingWithState_objects_count_(a1, v35, (uint64_t)&v103, (uint64_t)v114, 16);
          }
          while (v38);
        }
        v100 = 0xA00000000;
        v101 = v102;
        v96 = 0u;
        v97 = 0u;
        v98 = 0u;
        v99 = 0u;
        v49 = objc_msgSend_countByEnumeratingWithState_objects_count_(a1, v35, (uint64_t)&v96, (uint64_t)v113, 16, a2);
        if (v49)
        {
          v50 = *(_QWORD *)v97;
          do
          {
            for (j = 0; j != v49; ++j)
            {
              if (*(_QWORD *)v97 != v50)
                objc_enumerationMutation(a1);
              v52 = *(void **)(*((_QWORD *)&v96 + 1) + 8 * j);
              v91 = 0;
              v91 = objc_msgSend_nodeRef(v52, v42, v43, v44);
              v53 = sub_1B179C868(v107, &v91);
              sub_1B179C954(v107, v53);
              v54 = (_QWORD *)v91;
              v94[0] = v29;
              v94[1] = 3321888768;
              v94[2] = sub_1B19DECC4;
              v94[3] = &unk_1E63D08E8;
              sub_1B19DF0C4((uint64_t)v95, (uint64_t)v107);
              v95[5] = &v100;
              sub_1B186B104((uint64_t)v54, (uint64_t)v94);
              sub_1B185B888((uint64_t)v95);
            }
            v49 = objc_msgSend_countByEnumeratingWithState_objects_count_(a1, v42, (uint64_t)&v96, (uint64_t)v113, 16);
          }
          while (v49);
        }
        v91 = 0xA00000000;
        v92 = (float32x4_t *)v93;
        v55 = v100;
        if ((_DWORD)v100)
        {
          v56 = 0;
          v57 = (CFTypeRef *)v101;
          v58 = 8 * v100;
          v88 = 0u;
          do
          {
            v59 = *v57;
            if ((sub_1B17C5D30(*v57, 0, (uint64_t)&v90, v44, v45, v46, v47, v48) & 1) != 0)
            {
              v62 = (float32x4_t *)sub_1B1869AC8((uint64_t)v59, v60, v61, v44, v45, v46, v47, v48);
              sub_1B17D4478(&v90, v62, &v90);
              if ((v56 & 1) != 0
                && (v63 = vsubq_f32(v88, v90),
                    v64 = vmulq_f32(v63, v63),
                    v65 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v64, 2), vaddq_f32(v64, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v64.f32, 1))).f32[0]), (float)(v88.f32[3] + v65) >= v90.f32[3]))
              {
                if ((float)(v90.f32[3] + v65) > v88.f32[3])
                {
                  v66 = (float)((float)(v88.f32[3] + v90.f32[3]) + v65) * 0.5;
                  v67 = vmlaq_n_f32(v88, v63, (float)(v88.f32[3] - v66) / v65);
                  v67.f32[3] = v66;
                  v88 = v67;
                }
                v56 = 1;
              }
              else
              {
                v56 = 1;
                v88 = v90;
              }
            }
            else if ((v87 & 1) != 0 && (sub_1B186D018((uint64_t)v59) & 1) != 0
                   || (v87 & 0x100) != 0 && (sub_1B186CDDC((uint64_t)v59, v60, v61, v44, v45, v46, v47, v48) & 1) != 0
                   || (v87 & 0x1000000) != 0 && !sub_1B1842B54((uint64_t)v59))
            {
              v89.n128_u32[2] = 0;
              v89.n128_u64[0] = 0;
              sub_1B186B5BC((uint64_t)v59, &v89, v61, v44, v45, v46, v47, v48);
              sub_1B19DED28((uint64_t)&v91, &v89);
            }
            ++v57;
            v58 -= 8;
          }
          while (v58);
          v68 = v92;
          v55 = v91;
          v69 = v88;
        }
        else
        {
          v56 = 0;
          v69 = 0uLL;
          v68 = (float32x4_t *)v93;
        }
        v70 = v69.f32[3];
        if (v69.f32[3] >= 1.0 || v69.f32[3] <= 0.0)
          v70 = 1.0;
        if (v55)
        {
          v72 = 16 * v55;
          v73 = v68;
          do
          {
            v74 = *v73;
            v74.f32[3] = v70;
            if ((v56 & 1) != 0)
            {
              v75 = vsubq_f32(v69, *v73);
              v76 = vmulq_f32(v75, v75);
              v77 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v76, 2), vaddq_f32(v76, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v76.f32, 1))).f32[0]);
              if ((float)(v69.f32[3] + v77) >= v70)
              {
                if ((float)(v70 + v77) > v69.f32[3])
                {
                  v78 = (float)((float)(v70 + v69.f32[3]) + v77) * 0.5;
                  v69 = vmlaq_n_f32(v69, v75, (float)(v69.f32[3] - v78) / v77);
                  v69.f32[3] = v78;
                }
                v74 = v69;
              }
            }
            ++v73;
            v56 = 1;
            v69 = v74;
            v72 -= 16;
          }
          while (v72);
        }
        if (HIDWORD(v91))
          v79 = v68 == (float32x4_t *)v93;
        else
          v79 = 1;
        if (!v79)
          free(v68);
        if (HIDWORD(v100))
        {
          if (v101 != v102)
            free(v101);
        }
        sub_1B185B888((uint64_t)v107);
        return (_QWORD *)v110((uint64_t)v109, v80, v81, v82, v83, v84, v85, v86);
      }
    }
  }
  return result;
}

void sub_1B19DEC28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,int a57,int a58,void *a59)
{
  if (a58)
  {
    if (a59 != (void *)a10)
      free(a59);
  }
  sub_1B185B888((uint64_t)&STACK[0x220]);
  ((void (*)(unint64_t *))STACK[0x258])(&STACK[0x248]);
  _Unwind_Resume(a1);
}

uint64_t sub_1B19DECBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_1B18797B4(*(_QWORD *)(a1 + 32), a2, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_1B19DECC4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = a2;
  if (sub_1B19DEFD8((_QWORD *)(a1 + 32), &v4))
    return 1;
  sub_1B17A7C40(*(_QWORD *)(a1 + 72), &v4);
  return 0;
}

uint64_t sub_1B19DED14(uint64_t a1, uint64_t a2)
{
  return sub_1B19DF0C4(a1 + 32, a2 + 32);
}

uint64_t sub_1B19DED20(uint64_t a1)
{
  return sub_1B185B888(a1 + 32);
}

__n128 sub_1B19DED28(uint64_t a1, __n128 *a2)
{
  unsigned int v4;
  __n128 result;

  v4 = *(_DWORD *)a1;
  if ((*(_DWORD *)a1 + 1) > *(_DWORD *)(a1 + 4))
  {
    sub_1B19DF388((unsigned int *)a1, 1, 0);
    v4 = *(_DWORD *)a1;
  }
  result = *a2;
  *(__n128 *)(*(_QWORD *)(a1 + 8) + 16 * v4) = *a2;
  ++*(_DWORD *)a1;
  return result;
}

_QWORD *sub_1B19DED84(uint64_t a1, _QWORD *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  _QWORD **v12;
  _QWORD *i;
  unint64_t v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;

  v7 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  v8 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v7 >> 47) ^ v7);
  v9 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v4 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
      if (v9 >= v10)
        v4 = v9 % v10;
    }
    else
    {
      v4 = v9 & (v10 - 1);
    }
    v12 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v12)
    {
      for (i = *v12; i; i = (_QWORD *)*i)
      {
        v14 = i[1];
        if (v14 == v9)
        {
          if (i[2] == *a2)
            return i;
        }
        else
        {
          if (v11.u32[0] > 1uLL)
          {
            if (v14 >= v10)
              v14 %= v10;
          }
          else
          {
            v14 &= v10 - 1;
          }
          if (v14 != v4)
            break;
        }
      }
    }
  }
  i = operator new(0x20uLL);
  *i = 0;
  i[1] = v9;
  i[2] = **a4;
  i[3] = 0;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v10 || (float)(v16 * (float)v10) < v15)
  {
    v17 = 1;
    if (v10 >= 3)
      v17 = (v10 & (v10 - 1)) != 0;
    v18 = v17 | (2 * v10);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    sub_1B179C4B4(a1, v20);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v4 = v9 % v10;
      else
        v4 = v9;
    }
    else
    {
      v4 = (v10 - 1) & v9;
    }
  }
  v21 = *(_QWORD *)a1;
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v22)
  {
    *i = *v22;
LABEL_38:
    *v22 = i;
    goto LABEL_39;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v21 + 8 * v4) = a1 + 16;
  if (*i)
  {
    v23 = *(_QWORD *)(*i + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v23 >= v10)
        v23 %= v10;
    }
    else
    {
      v23 &= v10 - 1;
    }
    v22 = (_QWORD *)(*(_QWORD *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_1B19DEFC4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1B19DEFD8(_QWORD *a1, _QWORD *a2)
{
  int8x8_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint8x8_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *result;
  unint64_t v10;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  v4 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v3 >> 47) ^ v3);
  v5 = 0x9DDFEA08EB382D69 * (v4 ^ (v4 >> 47));
  v6 = (uint8x8_t)vcnt_s8(v2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = v5;
    if (v5 >= *(_QWORD *)&v2)
      v7 = v5 % *(_QWORD *)&v2;
  }
  else
  {
    v7 = v5 & (*(_QWORD *)&v2 - 1);
  }
  v8 = *(_QWORD **)(*a1 + 8 * v7);
  if (!v8)
    return 0;
  result = (_QWORD *)*v8;
  if (*v8)
  {
    do
    {
      v10 = result[1];
      if (v5 == v10)
      {
        if (result[2] == *a2)
          return result;
      }
      else
      {
        if (v6.u32[0] > 1uLL)
        {
          if (v10 >= *(_QWORD *)&v2)
            v10 %= *(_QWORD *)&v2;
        }
        else
        {
          v10 &= *(_QWORD *)&v2 - 1;
        }
        if (v10 != v7)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

uint64_t sub_1B19DF0C4(uint64_t a1, uint64_t a2)
{
  _QWORD *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  sub_1B179C4B4(a1, *(_QWORD *)(a2 + 8));
  for (i = *(_QWORD **)(a2 + 16); i; i = (_QWORD *)*i)
    sub_1B19DF138(a1, i + 2, (_OWORD *)i + 1);
  return a1;
}

void sub_1B19DF120(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1B185B888(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1B19DF138(uint64_t a1, _QWORD *a2, _OWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD **v11;
  _QWORD *i;
  unint64_t v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;

  v6 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  v7 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v6 >> 47) ^ v6);
  v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9)
        v3 = v8 % v9;
    }
    else
    {
      v3 = v8 & (v9 - 1);
    }
    v11 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v11)
    {
      for (i = *v11; i; i = (_QWORD *)*i)
      {
        v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == *a2)
            return i;
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9)
              v13 %= v9;
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v3)
            break;
        }
      }
    }
  }
  i = operator new(0x20uLL);
  *i = 0;
  i[1] = v8;
  *((_OWORD *)i + 1) = *a3;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v9 || (float)(v15 * (float)v9) < v14)
  {
    v16 = 1;
    if (v9 >= 3)
      v16 = (v9 & (v9 - 1)) != 0;
    v17 = v16 | (2 * v9);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      v19 = v18;
    else
      v19 = v17;
    sub_1B179C4B4(a1, v19);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v20 = *(_QWORD *)a1;
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v21)
  {
    *i = *v21;
LABEL_38:
    *v21 = i;
    goto LABEL_39;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v20 + 8 * v3) = a1 + 16;
  if (*i)
  {
    v22 = *(_QWORD *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v22 >= v9)
        v22 %= v9;
    }
    else
    {
      v22 &= v9 - 1;
    }
    v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_1B19DF374(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B19DF388(unsigned int *a1, int a2, int a3)
{
  unsigned int *v4;
  unsigned int *v5;
  double v6;
  unsigned int v7;
  void *v8;

  v4 = (unsigned int *)*((_QWORD *)a1 + 1);
  v5 = a1 + 4;
  v6 = 1.5;
  if (a3)
    v6 = 1.0;
  v7 = (v6 * (double)(a1[1] + a2));
  v8 = malloc_type_malloc(16 * v7, 0xD5346062uLL);
  memset(v8, 255, 16 * v7);
  memcpy(v8, v4, 16 * *a1);
  *((_QWORD *)a1 + 1) = v8;
  a1[1] = v7;
  if (v4 != v5)
    free(v4);
}

double sub_1B19DF6C8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  double result;
  unsigned int v7;
  float32x4_t v8;

  v5 = objc_msgSend__hingeHandle(*(void **)(a1 + 48), a2, a3, a4);
  if (v5)
  {
    v7 = *(_DWORD *)(a1 + 40);
    v8.i64[0] = *(_QWORD *)(a1 + 32);
    v8.i64[1] = v7;
    *(_QWORD *)&result = sub_1B19DF714(v5, &v8).u64[0];
  }
  return result;
}

float32x4_t sub_1B19DF714(uint64_t a1, float32x4_t *a2)
{
  float v2;
  float v3;
  float v4;
  float v5;
  __int32 v6;
  unsigned int v7;
  float v8;
  int8x16_t v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float32x4_t v14;
  float32x4_t *v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  int8x16_t v19;
  int8x16_t v20;
  float32x4_t v21;
  int8x16_t v22;
  int8x8_t v23;
  int8x8_t v24;
  float32x4_t v25;
  float32x4_t v26;
  int8x16_t v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float32x4_t v37;
  float32x4_t v38;
  int8x16_t v39;
  float32x4_t v40;
  int32x4_t v41;
  float32x4_t v42;
  int32x2_t v43;
  float32x2_t v44;
  float32x2_t v45;
  float32x2_t v46;
  float32x2_t v47;
  float32x4_t v48;
  int8x16_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x2_t v52;
  int32x2_t v53;
  float32x2_t v54;
  float32x2_t v55;
  float32x2_t v56;
  float32x4_t v57;
  float32x2_t v58;
  float32x4_t v59;
  float32x4_t v60;
  uint64_t v61;
  float32x4_t v62;
  int32x4_t v63;
  int8x16_t v64;
  float32x4_t v65;
  int32x2_t v66;
  unsigned __int32 v67;
  float32x4_t v69;
  float32x4_t v73;
  int8x16_t v74;
  int8x16_t v75;
  float32x4_t v76;
  int8x16_t v77;
  int8x16_t v79;
  float v82;
  float32x4_t v84;
  float32x4_t v85;
  float32x4_t result;
  float32x4_t v87;
  int8x16_t v88;
  float32x4_t v93;
  float32x4_t v94;

  v2 = a2->f32[2];
  v3 = a2->f32[1];
  if (fabsf(v2) <= 0.70711)
  {
    v12 = (float)(v3 * v3) + (float)(a2->f32[0] * a2->f32[0]);
    v13 = 1.0 / sqrtf(v12);
    v9.i64[1] = 0;
    *(float *)v9.i32 = -(float)(v3 * v13);
    *(float *)&v9.i32[1] = a2->f32[0] * v13;
    v8 = -(float)(v2 * *(float *)&v9.i32[1]);
    v10 = v2 * *(float *)v9.i32;
    v11 = v12 * v13;
  }
  else
  {
    v4 = (float)(v2 * v2) + (float)(v3 * v3);
    v5 = 1.0 / sqrtf(v4);
    *(float *)&v6 = -(float)(v2 * v5);
    *(float *)&v7 = v3 * v5;
    v8 = v4 * v5;
    v9.i32[0] = 0;
    v9.i32[1] = v6;
    v9.i64[1] = v7;
    v10 = -(float)(a2->f32[0] * *(float *)&v7);
    v11 = a2->f32[0] * *(float *)&v6;
  }
  v14 = *(float32x4_t *)(a1 + 704);
  *(_DWORD *)(a1 + 656) = v9.i32[0];
  *(float *)(a1 + 660) = v8;
  *(_DWORD *)(a1 + 664) = a2->i32[0];
  *(_DWORD *)(a1 + 668) = 0;
  *(_DWORD *)(a1 + 672) = v9.i32[1];
  *(float *)(a1 + 676) = v10;
  *(_DWORD *)(a1 + 680) = a2->i32[1];
  *(_DWORD *)(a1 + 684) = 0;
  *(_DWORD *)(a1 + 688) = v9.i32[2];
  *(float *)(a1 + 692) = v11;
  *(_DWORD *)(a1 + 696) = a2->i32[2];
  *(_DWORD *)(a1 + 700) = 0;
  v15 = *(float32x4_t **)(a1 + 40);
  v16 = *a2;
  v17 = v15[1];
  v18 = v15[2];
  v19 = (int8x16_t)vmulq_f32(v17, *a2);
  v20 = (int8x16_t)vmulq_f32(*a2, v18);
  v21 = v15[3];
  v22 = (int8x16_t)vmulq_f32(*a2, v21);
  v22.i32[3] = 0;
  v23 = (int8x8_t)vadd_f32(vpadd_f32(*(float32x2_t *)v19.i8, *(float32x2_t *)v20.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v19, v19, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v20, v20, 8uLL)));
  v24 = (int8x8_t)vpadd_f32(vpadd_f32(*(float32x2_t *)v22.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v22, v22, 8uLL)), 0);
  *(int8x8_t *)v25.f32 = vext_s8(v23, v24, 4uLL);
  *(int8x8_t *)&v25.u32[2] = v23;
  *(int8x8_t *)v26.f32 = v23;
  *(int8x8_t *)&v26.u32[2] = v24;
  v27 = (int8x16_t)vmulq_f32(*a2, v26);
  v28 = vadd_f32(vpadd_f32(*(float32x2_t *)v27.i8, *(float32x2_t *)v27.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v27, v27, 8uLL)).f32[0];
  if (v28 >= -1.0)
  {
    v38.i64[0] = vextq_s8((int8x16_t)v16, (int8x16_t)v16, 4uLL).u64[0];
    v38.i64[1] = a2->i64[0];
    v39 = (int8x16_t)vsubq_f32(vmulq_f32(v16, v25), vmulq_f32(v38, v26));
    v40 = (float32x4_t)vextq_s8(vextq_s8(v39, v39, 0xCuLL), v39, 8uLL);
    v40.i32[3] = sqrtf((float)(v28 + 1.0) + (float)(v28 + 1.0));
    v41.i32[1] = 1056964608;
    v41.i64[1] = 0x3F0000003F000000;
    *(float *)v41.i32 = 1.0 / v40.f32[3];
    v42 = (float32x4_t)vzip1q_s32(v41, v41);
    v42.f32[2] = 1.0 / v40.f32[3];
    v37 = vmulq_f32(v40, v42);
  }
  else
  {
    LODWORD(v29) = HIDWORD(a2->i64[0]);
    v30 = fabsf(v16.f32[2]);
    v31 = 1.0 / sqrtf((float)(v29 * v29) + (float)(v16.f32[0] * v16.f32[0]));
    v32 = -(float)(v16.f32[1] * v31);
    v33 = v16.f32[0] * v31;
    v34 = v32;
    v16.f32[0] = 1.0 / sqrtf((float)(v16.f32[2] * v16.f32[2]) + (float)(v29 * v29));
    v35 = v16.f32[1] * v16.f32[0];
    if (v30 <= 0.70711)
    {
      v36 = v33;
    }
    else
    {
      v34 = 0.0;
      v36 = -(float)(v16.f32[2] * v16.f32[0]);
    }
    if (v30 <= 0.70711)
      v35 = 0.0;
    v37.i64[0] = __PAIR64__(LODWORD(v36), LODWORD(v34));
    v37.i64[1] = LODWORD(v35);
  }
  v43 = (int32x2_t)vextq_s8((int8x16_t)v37, (int8x16_t)v37, 8uLL).u64[0];
  v44 = (float32x2_t)vext_s8((int8x8_t)v43, *(int8x8_t *)v37.f32, 4uLL);
  v45 = (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v9, v9, 8uLL), *(int32x2_t *)v9.i8);
  v46 = (float32x2_t)vzip1_s32(v43, *(int32x2_t *)v37.f32);
  v47 = (float32x2_t)vext_s8(*(int8x8_t *)v37.f32, (int8x8_t)v43, 4uLL);
  *(float32x2_t *)v48.f32 = vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8(v9, v9, 4uLL), v46);
  *(float32x2_t *)&v48.u32[2] = vmul_f32((float32x2_t)vrev64_s32((int32x2_t)v45), v47);
  *(float32x2_t *)v49.i8 = vadd_f32(vmul_laneq_f32(*(float32x2_t *)v9.i8, v37, 3), vmul_f32(v45, v47));
  v49.u64[1] = (unint64_t)vadd_f32(vmul_lane_f32(*(float32x2_t *)v37.f32, *(float32x2_t *)v9.i8, 1), vmul_f32(v45, v44));
  v50 = vsubq_f32((float32x4_t)veorq_s8(v49, (int8x16_t)xmmword_1B2269000), v48);
  v51 = (float32x4_t)veorq_s8((int8x16_t)v37, (int8x16_t)xmmword_1B2269010);
  v52 = (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v50, (int8x16_t)v50, 8uLL), *(int32x2_t *)v50.f32);
  v53 = (int32x2_t)vextq_s8((int8x16_t)v51, (int8x16_t)v51, 8uLL).u64[0];
  *(int32x2_t *)v48.f32 = vzip1_s32(v53, *(int32x2_t *)v51.f32);
  v54 = (float32x2_t)vextq_s8((int8x16_t)v50, (int8x16_t)v50, 4uLL).u64[0];
  v55 = vmul_laneq_f32(*(float32x2_t *)v50.f32, v51, 3);
  v56 = vmul_f32((float32x2_t)vext_s8((int8x8_t)v53, *(int8x8_t *)v51.f32, 4uLL), v52);
  *(float32x2_t *)v57.f32 = vmul_f32((float32x2_t)vext_s8(*(int8x8_t *)v51.f32, (int8x8_t)v53, 4uLL), v52);
  *(float32x2_t *)&v57.u32[2] = vmul_f32((float32x2_t)vrev64_s32(*(int32x2_t *)v48.f32), v54);
  v58 = vmul_lane_f32(*(float32x2_t *)v50.f32, *(float32x2_t *)v51.f32, 1);
  v59 = vmulq_laneq_f32(v51, v50, 3);
  *(float32x2_t *)v50.f32 = vadd_f32(v55, vmul_f32(*(float32x2_t *)v48.f32, v54));
  *(float32x2_t *)&v50.u32[2] = vadd_f32(v58, v56);
  v60 = vaddq_f32(vsubq_f32(v59, v57), (float32x4_t)veorq_s8((int8x16_t)v50, (int8x16_t)xmmword_1B2269000));
  v59.i64[0] = vextq_s8((int8x16_t)v60, (int8x16_t)v60, 8uLL).u64[0];
  v60.i32[3] = 0;
  *(int8x8_t *)v59.f32 = vext_s8(*(int8x8_t *)v60.f32, *(int8x8_t *)v59.f32, 4uLL);
  v59.i64[1] = v60.i64[0];
  v61 = *(_QWORD *)(a1 + 48);
  v62 = *(float32x4_t *)(v61 + 16);
  v63 = *(int32x4_t *)(v61 + 32);
  v64 = *(int8x16_t *)(v61 + 48);
  v65 = (float32x4_t)vtrn1q_s32((int32x4_t)v62, v63);
  v66 = vzip2_s32(*(int32x2_t *)v64.i8, 0);
  v67 = vextq_s8(v64, v64, 8uLL).u32[0];
  _Q25.i64[0] = vextq_s8((int8x16_t)v65, (int8x16_t)v65, 8uLL).u64[0];
  v65.i64[1] = v64.u32[0];
  v64.i64[0] = 0x8000000080000000;
  v64.i64[1] = 0x8000000080000000;
  v69 = (float32x4_t)veorq_s8(*(int8x16_t *)(v61 + 64), v64);
  _Q21 = (int8x16_t)vmulq_f32(v65, v69);
  *(int32x2_t *)v62.f32 = vzip2_s32(*(int32x2_t *)v62.f32, *(int32x2_t *)v63.i8);
  *(int32x2_t *)&v62.u32[2] = v66;
  _Q19 = (int8x16_t)vmulq_f32(v62, v69);
  _Q25.i64[1] = v67;
  _Q20 = (int8x16_t)vmulq_f32(_Q25, v69);
  _Q20.i32[3] = 0;
  v73 = vmulq_f32(v14, v17);
  v74 = (int8x16_t)vmulq_f32(v14, v18);
  v75 = (int8x16_t)vmulq_f32(v14, v21);
  v75.i32[3] = 0;
  *(float32x2_t *)v73.f32 = vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v73, (int8x16_t)v73, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v74, v74, 8uLL)), vpadd_f32(*(float32x2_t *)v73.f32, *(float32x2_t *)v74.i8));
  *(float32x2_t *)&v73.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v75.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v75, v75, 8uLL)), 0);
  v76 = vaddq_f32(v73, v15[4]);
  v77 = (int8x16_t)vmulq_f32(v65, v76);
  _Q4 = (int8x16_t)vmulq_f32(v62, v76);
  v79 = (int8x16_t)vmulq_f32(_Q25, v76);
  v79.i32[3] = 0;
  *(float32x2_t *)v77.i8 = vadd_f32(vadd_f32(vpadd_f32(*(float32x2_t *)_Q21.i8, *(float32x2_t *)_Q19.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(_Q21, _Q21, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(_Q19, _Q19, 8uLL))), vadd_f32(vpadd_f32(*(float32x2_t *)v77.i8, *(float32x2_t *)_Q4.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v77, v77, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(_Q4, _Q4, 8uLL))));
  v77.u64[1] = (unint64_t)vadd_f32(vpadd_f32(vpadd_f32(*(float32x2_t *)_Q20.i8, (float32x2_t)*(_OWORD *)&vextq_s8(_Q20, _Q20, 8uLL)), 0), vpadd_f32(vpadd_f32(*(float32x2_t *)v79.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v79, v79, 8uLL)), 0));
  _Q2 = (int32x4_t)vsubq_f32(vmulq_f32(v26, v59), vmulq_f32(v25, v60));
  *(int8x16_t *)(a1 + 768) = v77;
  *(int8x8_t *)v77.i8 = vext_s8(*(int8x8_t *)v60.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)_Q2, (int8x16_t)_Q2, 8uLL), 4uLL);
  _Q4.i64[0] = vzip2q_s32((int32x4_t)v60, vuzp1q_s32((int32x4_t)v60, _Q2)).u64[0];
  v60.i32[1] = _Q2.i32[1];
  *(_QWORD *)(a1 + 720) = v60.i64[0];
  *(_DWORD *)(a1 + 728) = v23.i32[0];
  *(_DWORD *)(a1 + 732) = 0;
  *(_QWORD *)(a1 + 736) = v77.i64[0];
  *(_DWORD *)(a1 + 744) = v23.i32[1];
  *(_DWORD *)(a1 + 748) = 0;
  *(_QWORD *)(a1 + 752) = _Q4.i64[0];
  *(_DWORD *)(a1 + 760) = v24.i32[0];
  *(_DWORD *)(a1 + 764) = 0;
  _S1 = *(float *)(v61 + 52);
  _Q2.i32[0] = *(_DWORD *)(v61 + 56);
  v82 = *(float *)(v61 + 36);
  _Q4.i32[0] = *(_DWORD *)(v61 + 40);
  _Q19.i32[0] = *(_DWORD *)(v61 + 48);
  _Q20.i32[0] = *(_DWORD *)(v61 + 32);
  _Q5 = *(float32x4_t *)(v61 + 16);
  v85 = *(float32x4_t *)(a1 + 720);
  v84 = *(float32x4_t *)(a1 + 736);
  result = *(float32x4_t *)(a1 + 752);
  result.i32[3] = 0;
  v62.f32[0] = (float)(v82 * *(float *)_Q2.i32) - (float)(*(float *)_Q4.i32 * _S1);
  v87.i32[3] = 0;
  v87.f32[0] = v62.f32[0];
  v87.f32[1] = (float)(*(float *)_Q4.i32 * *(float *)_Q19.i32) - (float)(*(float *)_Q20.i32 * *(float *)_Q2.i32);
  v87.f32[2] = (float)(*(float *)_Q20.i32 * _S1) - (float)(v82 * *(float *)_Q19.i32);
  v88 = (int8x16_t)vmulq_f32(_Q5, v87);
  *(float *)v88.i32 = 1.0
                    / vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v88, v88, 8uLL), vpadd_f32(*(float32x2_t *)v88.i8, *(float32x2_t *)v88.i8)).f32[0];
  v84.i32[3] = 0;
  __asm { FMLA            S25, S19, V5.S[1] }
  v85.i32[3] = 0;
  v93 = vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v85, (float)((float)(*(float *)_Q20.i32 * _S1) - (float)(v82 * *(float *)_Q19.i32)) * *(float *)v88.i32), v84, _Q25.f32[0] * *(float *)v88.i32), result, vmlas_n_f32(-(float)(COERCE_FLOAT(HIDWORD(*(_QWORD *)(v61 + 16))) * *(float *)_Q20.i32), v82, _Q5.f32[0])* *(float *)v88.i32);
  __asm { FMLA            S21, S20, V5.S[2] }
  v94 = vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v85, (float)((float)(*(float *)_Q4.i32 * *(float *)_Q19.i32) - (float)(*(float *)_Q20.i32 * *(float *)_Q2.i32))* *(float *)v88.i32), v84, vmlas_n_f32(-(float)(COERCE_FLOAT(*(_QWORD *)(v61 + 24)) * *(float *)_Q19.i32), *(float *)_Q2.i32, _Q5.f32[0])* *(float *)v88.i32), result, *(float *)_Q21.i32 * *(float *)v88.i32);
  __asm
  {
    FMLA            S16, S4, V5.S[1]
    FMLA            S2, S1, V5.S[2]
  }
  *(float32x4_t *)(a1 + 720) = vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v85, v62.f32[0] * *(float *)v88.i32), v84, *(float *)_Q2.i32 * *(float *)v88.i32), result, _S16 * *(float *)v88.i32);
  *(float32x4_t *)(a1 + 736) = v94;
  *(float32x4_t *)(a1 + 752) = v93;
  return result;
}

double sub_1B19DFC94(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  double result;
  unsigned int v7;
  float32x4_t v8;

  v5 = objc_msgSend__hingeHandle(*(void **)(a1 + 48), a2, a3, a4);
  if (v5)
  {
    v7 = *(_DWORD *)(a1 + 40);
    v8.i64[0] = *(_QWORD *)(a1 + 32);
    v8.i64[1] = v7;
    *(_QWORD *)&result = sub_1B19DF714(v5, &v8).u64[0];
  }
  return result;
}

_OWORD *sub_1B19DFD68(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  _OWORD *result;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _OWORD v11[4];
  _OWORD v12[4];

  result = (_OWORD *)objc_msgSend__hingeHandle(*(void **)(a1 + 48), a2, a3, a4);
  if (result)
  {
    v6 = result[42];
    v12[0] = result[41];
    v12[1] = v6;
    v7 = result[43];
    v8 = result[46];
    v11[0] = result[45];
    v11[1] = v8;
    v9 = result[48];
    v11[2] = result[47];
    v11[3] = v9;
    v10 = *(_OWORD *)(a1 + 32);
    HIDWORD(v10) = 0;
    v12[2] = v7;
    v12[3] = v10;
    return (_OWORD *)sub_1B21F4F78(result, v12, v11);
  }
  return result;
}

_OWORD *sub_1B19DFE5C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  _OWORD *result;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _OWORD v10[4];
  _OWORD v11[4];

  result = (_OWORD *)objc_msgSend__hingeHandle(*(void **)(a1 + 48), a2, a3, a4);
  if (result)
  {
    v6 = result[42];
    v11[0] = result[41];
    v11[1] = v6;
    v7 = result[44];
    v11[2] = result[43];
    v11[3] = v7;
    v8 = result[46];
    v10[0] = result[45];
    v10[1] = v8;
    v9 = *(_OWORD *)(a1 + 32);
    HIDWORD(v9) = 0;
    v10[2] = result[47];
    v10[3] = v9;
    return (_OWORD *)sub_1B21F4F78(result, v11, v10);
  }
  return result;
}

void sub_1B19E0008(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1B21FF5FC(v1);
  _Unwind_Resume(a1);
}

void sub_1B19E08D4(const __CFDictionary *a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;

  if (CFDictionaryGetValue(a1, a2))
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. uniform %@ already set"), v10, v11, v12, v13, v14, v15, (uint64_t)"CFDictionaryGetValue(dic, uniformName) == NULL");
  v16 = sub_1B179E238(0x18uLL);
  v16[1] = a4;
  v16[2] = a5;
  *v16 = a3;
  CFDictionarySetValue(a1, a2, v16);
}

uint64_t sub_1B19E0958()
{
  if (qword_1EEF66F08 != -1)
    dispatch_once(&qword_1EEF66F08, &unk_1E63D14F0);
  return qword_1EEF66F00;
}

void sub_1B19E0998()
{
  qword_1EEF66F00 = (uint64_t)CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 20, MEMORY[0x1E0C9B390], 0);
  sub_1B19E08D4((const __CFDictionary *)qword_1EEF66F00, CFSTR("vfx_frame.time"), (uint64_t)CFSTR("float"), 0, 0);
  sub_1B19E08D4((const __CFDictionary *)qword_1EEF66F00, CFSTR("vfx_frame.invScreenPixelSize"), (uint64_t)CFSTR("float2"), 1, 0);
  sub_1B19E08D4((const __CFDictionary *)qword_1EEF66F00, CFSTR("vfx_node.modelTransform"), (uint64_t)CFSTR("float4x4"), 2, 0);
  sub_1B19E08D4((const __CFDictionary *)qword_1EEF66F00, CFSTR("vfx_node.inverseModelTransform"), (uint64_t)CFSTR("float4x4"), 3, 0);
  sub_1B19E08D4((const __CFDictionary *)qword_1EEF66F00, CFSTR("vfx_node.modelViewTransform"), (uint64_t)CFSTR("float4x4"), 4, 0);
  sub_1B19E08D4((const __CFDictionary *)qword_1EEF66F00, CFSTR("vfx_node.inverseModelViewTransform"), (uint64_t)CFSTR("float4x4"), 5, 0);
  sub_1B19E08D4((const __CFDictionary *)qword_1EEF66F00, CFSTR("vfx_node.normalTransform"), (uint64_t)CFSTR("float4x4"), 6, 0);
  sub_1B19E08D4((const __CFDictionary *)qword_1EEF66F00, CFSTR("vfx_node.modelViewProjectionTransform"), (uint64_t)CFSTR("float4x4"), 7, 0);
  sub_1B19E08D4((const __CFDictionary *)qword_1EEF66F00, CFSTR("vfx_node.inverseModelViewProjectionTransform"), (uint64_t)CFSTR("float4x4"), 8, 0);
  sub_1B19E08D4((const __CFDictionary *)qword_1EEF66F00, CFSTR("vfx_node.boundingBox"), (uint64_t)CFSTR("float2x3"), 10, 0);
  sub_1B19E08D4((const __CFDictionary *)qword_1EEF66F00, CFSTR("vfx_node.worldBoundingBox"), (uint64_t)CFSTR("float2x3"), 11, 0);
  sub_1B19E08D4((const __CFDictionary *)qword_1EEF66F00, CFSTR("vfx_frame.viewTransform"), (uint64_t)CFSTR("float4x4"), 12, 0);
  sub_1B19E08D4((const __CFDictionary *)qword_1EEF66F00, CFSTR("vfx_frame.inverseViewTransform"), (uint64_t)CFSTR("float4x4"), 13, 0);
  sub_1B19E08D4((const __CFDictionary *)qword_1EEF66F00, CFSTR("vfx_frame.projectionTransform"), (uint64_t)CFSTR("float4x4"), 14, 0);
  sub_1B19E08D4((const __CFDictionary *)qword_1EEF66F00, CFSTR("vfx_frame.inverseProjectionTransform"), (uint64_t)CFSTR("float4x4"), 15, 0);
  sub_1B19E08D4((const __CFDictionary *)qword_1EEF66F00, CFSTR("vfx_frame.cameraPosition"), (uint64_t)CFSTR("float3"), 17, 0);
  sub_1B19E08D4((const __CFDictionary *)qword_1EEF66F00, CFSTR("vfx_frame.viewToCubeWorld"), (uint64_t)CFSTR("float4x4"), 16, 0);
}

uint64_t sub_1B19E0BD0(uint64_t *a1)
{
  uint64_t result;

  result = sub_1B179CB60(a1);
  *a1 = result;
  return result;
}

uint64_t sub_1B19E0BFC()
{
  if (qword_1EEF66F18[0] != -1)
    dispatch_once_f(qword_1EEF66F18, &qword_1EEF66F10, (dispatch_function_t)sub_1B19E0BD0);
  return sub_1B179CB90(qword_1EEF66F10, 0x90uLL);
}

uint64_t sub_1B19E0C48(uint64_t a1)
{
  return (*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 4;
}

uint64_t sub_1B19E0C58(uint64_t a1)
{
  return ((int)((*(_QWORD *)(a1 + 48) - *(_QWORD *)(a1 + 40)) >> 2) / 2);
}

void sub_1B19E0C74(_QWORD *a1, uint64_t a2, int a3, uint64_t a4, int a5)
{
  char **v9;
  uint64_t v10;
  _QWORD *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  __int128 v21;
  void **v22;
  uint64_t v23;
  char **v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  char *v34;
  int v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  int v44;

  v9 = (char **)(a1 + 2);
  sub_1B17F76F8((uint64_t)(a1 + 2), 0);
  if (a3 >= 1)
  {
    v10 = 0;
    v11 = a1 + 4;
    v12 = (char *)a1[3];
    do
    {
      if ((unint64_t)v12 >= *v11)
      {
        v13 = (v12 - *v9) >> 4;
        if ((unint64_t)(v13 + 1) >> 60)
LABEL_56:
          abort();
        v14 = *v11 - (_QWORD)*v9;
        v15 = v14 >> 3;
        if (v14 >> 3 <= (unint64_t)(v13 + 1))
          v15 = v13 + 1;
        if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0)
          v16 = 0xFFFFFFFFFFFFFFFLL;
        else
          v16 = v15;
        if (v16)
          v17 = (char *)sub_1B17F7824((uint64_t)(a1 + 4), v16);
        else
          v17 = 0;
        v18 = &v17[16 * v13];
        *(_OWORD *)v18 = *(_OWORD *)(a2 + 16 * v10);
        v12 = v18 + 16;
        v20 = (char *)a1[2];
        v19 = (char *)a1[3];
        if (v19 != v20)
        {
          do
          {
            v21 = *((_OWORD *)v19 - 1);
            v19 -= 16;
            *((_OWORD *)v18 - 1) = v21;
            v18 -= 16;
          }
          while (v19 != v20);
          v19 = *v9;
        }
        a1[2] = v18;
        a1[3] = v12;
        a1[4] = &v17[16 * v16];
        if (v19)
          operator delete(v19);
      }
      else
      {
        *(_OWORD *)v12 = *(_OWORD *)(a2 + 16 * v10);
        v12 += 16;
      }
      a1[3] = v12;
      ++v10;
    }
    while (v10 != a3);
  }
  v22 = (void **)(a1 + 5);
  sub_1B17F8190((uint64_t)(a1 + 5), 0);
  if (a5 >= 1)
  {
    v23 = 0;
    v24 = (char **)(a1 + 7);
    v25 = (char *)a1[6];
    do
    {
      v26 = *v24;
      if (v25 >= *v24)
      {
        v28 = (char *)*v22;
        v29 = (v25 - (_BYTE *)*v22) >> 2;
        v30 = v29 + 1;
        if ((unint64_t)(v29 + 1) >> 62)
          goto LABEL_56;
        v31 = v26 - v28;
        if (v31 >> 1 > v30)
          v30 = v31 >> 1;
        if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFFCLL)
          v32 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v32 = v30;
        if (v32)
        {
          v33 = (char *)sub_1B17F7E58((uint64_t)(a1 + 7), v32);
          v28 = (char *)a1[5];
          v25 = (char *)a1[6];
        }
        else
        {
          v33 = 0;
        }
        v34 = &v33[4 * v29];
        *(_DWORD *)v34 = *(_DWORD *)(a4 + 8 * v23);
        v27 = v34 + 4;
        while (v25 != v28)
        {
          v35 = *((_DWORD *)v25 - 1);
          v25 -= 4;
          *((_DWORD *)v34 - 1) = v35;
          v34 -= 4;
        }
        v26 = &v33[4 * v32];
        a1[5] = v34;
        a1[6] = v27;
        a1[7] = v26;
        if (v28)
        {
          operator delete(v28);
          v26 = *v24;
        }
      }
      else
      {
        *(_DWORD *)v25 = *(_DWORD *)(a4 + 8 * v23);
        v27 = v25 + 4;
      }
      a1[6] = v27;
      v36 = (2 * v23) | 1;
      if (v27 >= v26)
      {
        v37 = (char *)*v22;
        v38 = (v27 - (_BYTE *)*v22) >> 2;
        v39 = v38 + 1;
        if ((unint64_t)(v38 + 1) >> 62)
          goto LABEL_56;
        v40 = v26 - v37;
        if (v40 >> 1 > v39)
          v39 = v40 >> 1;
        if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFFCLL)
          v41 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v41 = v39;
        if (v41)
        {
          v42 = (char *)sub_1B17F7E58((uint64_t)(a1 + 7), v41);
          v37 = (char *)a1[5];
          v27 = (char *)a1[6];
        }
        else
        {
          v42 = 0;
        }
        v43 = &v42[4 * v38];
        *(_DWORD *)v43 = *(_DWORD *)(a4 + 4 * v36);
        v25 = v43 + 4;
        while (v27 != v37)
        {
          v44 = *((_DWORD *)v27 - 1);
          v27 -= 4;
          *((_DWORD *)v43 - 1) = v44;
          v43 -= 4;
        }
        a1[5] = v43;
        a1[6] = v25;
        a1[7] = &v42[4 * v41];
        if (v37)
          operator delete(v37);
      }
      else
      {
        *(_DWORD *)v27 = *(_DWORD *)(a4 + 4 * v36);
        v25 = v27 + 4;
      }
      a1[6] = v25;
      ++v23;
    }
    while (v23 != a5);
  }
}

__n128 sub_1B19E0F44(_QWORD *a1, float32x4_t a2, float32x4_t a3)
{
  float32x4_t v3;
  int32x4_t v4;
  float32x4_t v5;
  int8x16_t v6;
  float32x4_t v7;
  __n128 result;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v3 = vsubq_f32(a2, a3);
  v4 = (int32x4_t)vaddq_f32(a3, a3);
  v5 = (float32x4_t)vdupq_laneq_s32(v4, 3);
  v5.i32[0] = v4.i32[0];
  v9 = v3;
  v10 = vaddq_f32(v3, v5);
  v11 = vaddq_f32(v3, (float32x4_t)vextq_s8((int8x16_t)v4, (int8x16_t)vuzp2q_s32(v4, v4), 0xCuLL));
  v12 = vaddq_f32(v5, v11);
  v6 = (int8x16_t)vzip2q_s32(v4, v4);
  v7 = (float32x4_t)vextq_s8(v6, v6, 8uLL);
  v13 = vaddq_f32(v3, v7);
  v14 = vaddq_f32(v7, v10);
  v15 = vaddq_f32(v7, v11);
  v16 = vaddq_f32(v7, v12);
  sub_1B19E0C74(a1, (uint64_t)&v9, 8, (uint64_t)&unk_1B2269030, 12);
  return result;
}

void sub_1B19E0FEC(_QWORD *a1, uint64_t a2)
{
  float32x4_t v2;
  int32x4_t v3;
  int32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  int32x2_t v11;
  float32x4_t v12;
  int32x4_t v13;
  int32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  int32x4_t v17;
  int32x4_t v18;
  int32x4_t v19;
  int32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  int32x4_t v23;
  int32x4_t v24;
  float32x4_t v25;
  int32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  int32x2_t v31;
  float v32;
  float32x4_t v33;
  int32x4_t v34;
  int32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  int32x4_t v38;
  int32x4_t v39;
  int32x4_t v40;
  int32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  int32x4_t v44;
  int32x4_t v45;
  float32x4_t v46;
  int32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  int32x2_t v52;
  float32x4_t v53;
  int32x4_t v54;
  int32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  int32x4_t v58;
  int32x4_t v59;
  int32x4_t v60;
  int32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  int32x4_t v64;
  int32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  int32x2_t v69;
  float32x4_t v70;
  int32x4_t v71;
  int32x4_t v72;
  int32x4_t v73;
  float32x4_t v74;
  int32x4_t v75;
  int32x4_t v76;
  int32x4_t v77;
  float32x4_t v78;
  int32x4_t v79;
  int32x4_t v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x4_t v83;
  int32x2_t v84;
  float32x4_t v85;
  int32x4_t v86;
  int32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  int32x4_t v90;
  int32x4_t v91;
  int32x4_t v92;
  int32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  int32x4_t v96;
  int32x4_t v97;
  float32x4_t v98;
  float32x4_t v99;
  float32x4_t v100;
  int32x2_t v101;
  float32x4_t v102;
  int32x4_t v103;
  int32x4_t v104;
  int32x4_t v105;
  float32x4_t v106;
  int32x4_t v107;
  int32x4_t v108;
  int32x4_t v109;
  float32x4_t v110;
  int32x4_t v111;
  float32x4_t v112;
  float32x4_t v113;
  float32x4_t v114;
  int32x2_t v115;
  float32x4_t v116;
  int32x4_t v117;
  int32x4_t v118;
  int32x4_t v119;
  float32x4_t v120;
  int32x4_t v121;
  int32x4_t v122;
  int32x4_t v123;
  float32x4_t v124;
  int32x4_t v125;
  float32x4_t v126;
  float32x4_t v127;
  int32x2_t v128;
  float32x4_t v129;
  int32x4_t v130;
  __int32 v131;
  int32x4_t v132;
  float32x4_t v133;
  float32x4_t v134;
  int32x4_t v135;
  int32x4_t v136;
  int32x4_t v137;
  int32x4_t v138;
  float32x4_t v139;
  float32x4_t v140;
  _OWORD v141[8];
  uint64_t v142;

  v142 = *MEMORY[0x1E0C80C00];
  v2 = *(float32x4_t *)(a2 + 80);
  v3 = *(int32x4_t *)(a2 + 16);
  v4 = *(int32x4_t *)(a2 + 32);
  v5 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v4, (int8x16_t)v4, 0xCuLL), (int8x16_t)v4, 8uLL);
  v6 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v3, v3), (int8x16_t)v3, 0xCuLL);
  v7 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v4, v4), (int8x16_t)v4, 0xCuLL);
  v8 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v3, (int8x16_t)v3, 0xCuLL), (int8x16_t)v3, 8uLL);
  v9 = vmlaq_f32(vmulq_f32(v8, vnegq_f32(v7)), v6, v5);
  v10 = vmulq_f32(v2, v9);
  v11 = (int32x2_t)vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v10, 2), vaddq_f32(v10, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v10.f32, 1))).u64[0];
  if (*(float *)v11.i32 != 0.0)
  {
    v12 = *(float32x4_t *)(a2 + 80);
    v12.f32[0] = -v2.f32[3];
    v13 = *(int32x4_t *)(a2 + 32);
    *(float *)v13.i32 = -*(float *)&v4.i32[3];
    v14 = *(int32x4_t *)(a2 + 16);
    *(float *)v14.i32 = -*(float *)&v3.i32[3];
    v15 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v14, (int8x16_t)v14, 0xCuLL), (int8x16_t)v14, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v13, v13), (int8x16_t)v13, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v14, v14), (int8x16_t)v14, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v13, (int8x16_t)v13, 0xCuLL), (int8x16_t)v13, 8uLL));
    v16 = *(float32x4_t *)(a2 + 80);
    v16.f32[1] = -v2.f32[3];
    v17 = *(int32x4_t *)(a2 + 32);
    *(float *)&v17.i32[1] = -*(float *)&v4.i32[3];
    v18 = (int32x4_t)vmulq_f32(v12, v15);
    v19 = *(int32x4_t *)(a2 + 16);
    *(float *)&v19.i32[1] = -*(float *)&v3.i32[3];
    v20 = (int32x4_t)vmulq_f32(v16, vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v19, (int8x16_t)v19, 0xCuLL), (int8x16_t)v19, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v17, v17), (int8x16_t)v17, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v19, v19), (int8x16_t)v19, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v17, (int8x16_t)v17, 0xCuLL), (int8x16_t)v17, 8uLL)));
    *(float32x2_t *)v16.f32 = vadd_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v18.i8, *(int32x2_t *)v20.i8), (float32x2_t)vzip2_s32(*(int32x2_t *)v18.i8, *(int32x2_t *)v20.i8));
    v21 = (float32x4_t)vzip2q_s32(v18, v20);
    *(float32x2_t *)v21.f32 = vadd_f32(*(float32x2_t *)v21.f32, *(float32x2_t *)v16.f32);
    v22 = *(float32x4_t *)(a2 + 80);
    v22.f32[2] = -v2.f32[3];
    v23 = *(int32x4_t *)(a2 + 32);
    *(float *)&v23.i32[2] = -*(float *)&v4.i32[3];
    v24 = *(int32x4_t *)(a2 + 16);
    *(float *)&v24.i32[2] = -*(float *)&v3.i32[3];
    v25 = vmulq_f32(v22, vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v24, (int8x16_t)v24, 0xCuLL), (int8x16_t)v24, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v23, v23), (int8x16_t)v23, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v24, v24), (int8x16_t)v24, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v23, (int8x16_t)v23, 0xCuLL), (int8x16_t)v23, 8uLL)));
    v21.i32[2] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v25, 2), vaddq_f32(v25, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v25.f32, 1))).u32[0];
    v141[0] = vdivq_f32(v21, (float32x4_t)vdupq_lane_s32(v11, 0));
  }
  v26 = *(int32x4_t *)a2;
  v27 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v26, (int8x16_t)v26, 0xCuLL), *(int8x16_t *)a2, 8uLL);
  v28 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v26, v26), *(int8x16_t *)a2, 0xCuLL);
  v29 = vmlaq_f32(vmulq_f32(v5, vnegq_f32(v28)), v7, v27);
  v30 = vmulq_f32(v2, v29);
  v31 = (int32x2_t)vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v30, 2), vaddq_f32(v30, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v30.f32, 1))).u64[0];
  LODWORD(v32) = HIDWORD(*(_OWORD *)a2);
  if (*(float *)v31.i32 != 0.0)
  {
    v33 = v2;
    v33.f32[0] = -v2.f32[3];
    v34 = *(int32x4_t *)a2;
    *(float *)v34.i32 = -v32;
    v35 = v4;
    *(float *)v35.i32 = -*(float *)&v4.i32[3];
    v36 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v35, (int8x16_t)v35, 0xCuLL), (int8x16_t)v35, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v34, v34), (int8x16_t)v34, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v35, v35), (int8x16_t)v35, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v34, (int8x16_t)v34, 0xCuLL), (int8x16_t)v34, 8uLL));
    v37 = v2;
    v37.f32[1] = -v2.f32[3];
    v38 = *(int32x4_t *)a2;
    *(float *)&v38.i32[1] = -v32;
    v39 = (int32x4_t)vmulq_f32(v33, v36);
    v40 = v4;
    *(float *)&v40.i32[1] = -*(float *)&v4.i32[3];
    v41 = (int32x4_t)vmulq_f32(v37, vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v40, (int8x16_t)v40, 0xCuLL), (int8x16_t)v40, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v38, v38), (int8x16_t)v38, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v40, v40), (int8x16_t)v40, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v38, (int8x16_t)v38, 0xCuLL), (int8x16_t)v38, 8uLL)));
    *(float32x2_t *)v37.f32 = vadd_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v39.i8, *(int32x2_t *)v41.i8), (float32x2_t)vzip2_s32(*(int32x2_t *)v39.i8, *(int32x2_t *)v41.i8));
    v42 = (float32x4_t)vzip2q_s32(v39, v41);
    *(float32x2_t *)v42.f32 = vadd_f32(*(float32x2_t *)v42.f32, *(float32x2_t *)v37.f32);
    v43 = v2;
    v43.f32[2] = -v2.f32[3];
    v44 = *(int32x4_t *)a2;
    *(float *)&v44.i32[2] = -v32;
    v45 = v4;
    *(float *)&v45.i32[2] = -*(float *)&v4.i32[3];
    v46 = vmulq_f32(v43, vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v45, (int8x16_t)v45, 0xCuLL), (int8x16_t)v45, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v44, v44), (int8x16_t)v44, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v45, v45), (int8x16_t)v45, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v44, (int8x16_t)v44, 0xCuLL), (int8x16_t)v44, 8uLL)));
    v42.i32[2] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v46, 2), vaddq_f32(v46, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v46.f32, 1))).u32[0];
    v141[1] = vdivq_f32(v42, (float32x4_t)vdupq_lane_s32(v31, 0));
  }
  v47 = *(int32x4_t *)(a2 + 48);
  v48 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v47, v47), (int8x16_t)v47, 0xCuLL);
  v49 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v47, (int8x16_t)v47, 0xCuLL), (int8x16_t)v47, 8uLL);
  v50 = vmlaq_f32(vmulq_f32(v49, vnegq_f32(v6)), v48, v8);
  v51 = vmulq_f32(v2, v50);
  v52 = (int32x2_t)vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v51, 2), vaddq_f32(v51, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v51.f32, 1))).u64[0];
  if (*(float *)v52.i32 != 0.0)
  {
    v53 = v2;
    v53.f32[0] = -v2.f32[3];
    v54 = v3;
    *(float *)v54.i32 = -*(float *)&v3.i32[3];
    v55 = *(int32x4_t *)(a2 + 48);
    *(float *)v55.i32 = -*(float *)&v47.i32[3];
    v56 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v55, (int8x16_t)v55, 0xCuLL), (int8x16_t)v55, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v54, v54), (int8x16_t)v54, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v55, v55), (int8x16_t)v55, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v54, (int8x16_t)v54, 0xCuLL), (int8x16_t)v54, 8uLL));
    v57 = v2;
    v57.f32[1] = -v2.f32[3];
    v58 = v3;
    *(float *)&v58.i32[1] = -*(float *)&v3.i32[3];
    v59 = (int32x4_t)vmulq_f32(v53, v56);
    v60 = *(int32x4_t *)(a2 + 48);
    *(float *)&v60.i32[1] = -*(float *)&v47.i32[3];
    v61 = (int32x4_t)vmulq_f32(v57, vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v60, (int8x16_t)v60, 0xCuLL), (int8x16_t)v60, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v58, v58), (int8x16_t)v58, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v60, v60), (int8x16_t)v60, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v58, (int8x16_t)v58, 0xCuLL), (int8x16_t)v58, 8uLL)));
    *(float32x2_t *)v57.f32 = vadd_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v59.i8, *(int32x2_t *)v61.i8), (float32x2_t)vzip2_s32(*(int32x2_t *)v59.i8, *(int32x2_t *)v61.i8));
    v62 = (float32x4_t)vzip2q_s32(v59, v61);
    *(float32x2_t *)v62.f32 = vadd_f32(*(float32x2_t *)v62.f32, *(float32x2_t *)v57.f32);
    v63 = v2;
    v63.f32[2] = -v2.f32[3];
    v64 = v3;
    *(float *)&v64.i32[2] = -*(float *)&v3.i32[3];
    v65 = *(int32x4_t *)(a2 + 48);
    *(float *)&v65.i32[2] = -*(float *)&v47.i32[3];
    v66 = vmulq_f32(v63, vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v65, (int8x16_t)v65, 0xCuLL), (int8x16_t)v65, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v64, v64), (int8x16_t)v64, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v65, v65), (int8x16_t)v65, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v64, (int8x16_t)v64, 0xCuLL), (int8x16_t)v64, 8uLL)));
    v62.i32[2] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v66, 2), vaddq_f32(v66, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v66.f32, 1))).u32[0];
    v141[2] = vdivq_f32(v62, (float32x4_t)vdupq_lane_s32(v52, 0));
  }
  v67 = vmlaq_f32(vmulq_f32(v27, vnegq_f32(v48)), v28, v49);
  v68 = vmulq_f32(v2, v67);
  v69 = (int32x2_t)vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v68, 2), vaddq_f32(v68, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v68.f32, 1))).u64[0];
  if (*(float *)v69.i32 != 0.0)
  {
    v70 = v2;
    v70.f32[0] = -v2.f32[3];
    v71 = v47;
    *(float *)v71.i32 = -*(float *)&v47.i32[3];
    v72 = v26;
    *(float *)v72.i32 = -v32;
    v73 = (int32x4_t)vmulq_f32(v70, vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v72, (int8x16_t)v72, 0xCuLL), (int8x16_t)v72, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v71, v71), (int8x16_t)v71, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v72, v72), (int8x16_t)v72, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v71, (int8x16_t)v71, 0xCuLL), (int8x16_t)v71, 8uLL)));
    v74 = v2;
    v74.f32[1] = -v2.f32[3];
    v75 = v47;
    *(float *)&v75.i32[1] = -*(float *)&v47.i32[3];
    v76 = v26;
    *(float *)&v76.i32[1] = -v32;
    v77 = (int32x4_t)vmulq_f32(v74, vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v76, (int8x16_t)v76, 0xCuLL), (int8x16_t)v76, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v75, v75), (int8x16_t)v75, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v76, v76), (int8x16_t)v76, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v75, (int8x16_t)v75, 0xCuLL), (int8x16_t)v75, 8uLL)));
    *(float32x2_t *)v75.i8 = vadd_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v73.i8, *(int32x2_t *)v77.i8), (float32x2_t)vzip2_s32(*(int32x2_t *)v73.i8, *(int32x2_t *)v77.i8));
    v78 = (float32x4_t)vzip2q_s32(v73, v77);
    *(float32x2_t *)v78.f32 = vadd_f32(*(float32x2_t *)v78.f32, *(float32x2_t *)v75.i8);
    v2.f32[2] = -v2.f32[3];
    v79 = v47;
    *(float *)&v79.i32[2] = -*(float *)&v47.i32[3];
    v80 = v26;
    *(float *)&v80.i32[2] = -v32;
    v81 = vmulq_f32(v2, vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v80, (int8x16_t)v80, 0xCuLL), (int8x16_t)v80, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v79, v79), (int8x16_t)v79, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v80, v80), (int8x16_t)v80, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v79, (int8x16_t)v79, 0xCuLL), (int8x16_t)v79, 8uLL)));
    v78.i32[2] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v81, 2), vaddq_f32(v81, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v81.f32, 1))).u32[0];
    v141[3] = vdivq_f32(v78, (float32x4_t)vdupq_lane_s32(v69, 0));
  }
  v82 = *(float32x4_t *)(a2 + 64);
  v83 = vmulq_f32(v9, v82);
  v84 = (int32x2_t)vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v83, 2), vaddq_f32(v83, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v83.f32, 1))).u64[0];
  if (*(float *)v84.i32 != 0.0)
  {
    v85 = *(float32x4_t *)(a2 + 64);
    v85.f32[0] = -v82.f32[3];
    v86 = v4;
    *(float *)v86.i32 = -*(float *)&v4.i32[3];
    v87 = v3;
    *(float *)v87.i32 = -*(float *)&v3.i32[3];
    v88 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v87, (int8x16_t)v87, 0xCuLL), (int8x16_t)v87, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v86, v86), (int8x16_t)v86, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v87, v87), (int8x16_t)v87, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v86, (int8x16_t)v86, 0xCuLL), (int8x16_t)v86, 8uLL));
    v89 = *(float32x4_t *)(a2 + 64);
    v89.f32[1] = -v82.f32[3];
    v90 = v4;
    *(float *)&v90.i32[1] = -*(float *)&v4.i32[3];
    v91 = (int32x4_t)vmulq_f32(v88, v85);
    v92 = v3;
    *(float *)&v92.i32[1] = -*(float *)&v3.i32[3];
    v93 = (int32x4_t)vmulq_f32(vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v92, (int8x16_t)v92, 0xCuLL), (int8x16_t)v92, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v90, v90), (int8x16_t)v90, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v92, v92), (int8x16_t)v92, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v90, (int8x16_t)v90, 0xCuLL), (int8x16_t)v90, 8uLL)), v89);
    *(float32x2_t *)v89.f32 = vadd_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v91.i8, *(int32x2_t *)v93.i8), (float32x2_t)vzip2_s32(*(int32x2_t *)v91.i8, *(int32x2_t *)v93.i8));
    v94 = (float32x4_t)vzip2q_s32(v91, v93);
    *(float32x2_t *)v94.f32 = vadd_f32(*(float32x2_t *)v94.f32, *(float32x2_t *)v89.f32);
    v95 = *(float32x4_t *)(a2 + 64);
    v95.f32[2] = -v82.f32[3];
    v96 = v4;
    *(float *)&v96.i32[2] = -*(float *)&v4.i32[3];
    v97 = v3;
    *(float *)&v97.i32[2] = -*(float *)&v3.i32[3];
    v98 = vmulq_f32(vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v97, (int8x16_t)v97, 0xCuLL), (int8x16_t)v97, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v96, v96), (int8x16_t)v96, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v97, v97), (int8x16_t)v97, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v96, (int8x16_t)v96, 0xCuLL), (int8x16_t)v96, 8uLL)), v95);
    v94.i32[2] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v98, 2), vaddq_f32(v98, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v98.f32, 1))).u32[0];
    v141[4] = vdivq_f32(v94, (float32x4_t)vdupq_lane_s32(v84, 0));
  }
  v99 = vmulq_f32(v29, v82);
  v100 = vaddq_f32(v99, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v99.f32, 1));
  v101 = (int32x2_t)vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v99, 2), v100).u64[0];
  if (*(float *)v101.i32 != 0.0)
  {
    v102 = v82;
    v102.f32[0] = -v82.f32[3];
    v103 = v26;
    *(float *)v103.i32 = -v32;
    v104 = v4;
    *(float *)v104.i32 = -*(float *)&v4.i32[3];
    v105 = (int32x4_t)vmulq_f32(vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v104, (int8x16_t)v104, 0xCuLL), (int8x16_t)v104, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v103, v103), (int8x16_t)v103, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v104, v104), (int8x16_t)v104, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v103, (int8x16_t)v103, 0xCuLL), (int8x16_t)v103, 8uLL)), v102);
    v106 = v82;
    v106.f32[1] = -v82.f32[3];
    v107 = v26;
    *(float *)&v107.i32[1] = -v32;
    v108 = v4;
    *(float *)&v108.i32[1] = -*(float *)&v4.i32[3];
    v109 = (int32x4_t)vmulq_f32(vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v108, (int8x16_t)v108, 0xCuLL), (int8x16_t)v108, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v107, v107), (int8x16_t)v107, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v108, v108), (int8x16_t)v108, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v107, (int8x16_t)v107, 0xCuLL), (int8x16_t)v107, 8uLL)), v106);
    *(float32x2_t *)v107.i8 = vadd_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v105.i8, *(int32x2_t *)v109.i8), (float32x2_t)vzip2_s32(*(int32x2_t *)v105.i8, *(int32x2_t *)v109.i8));
    v105.i64[0] = vzip2q_s32(v105, v109).u64[0];
    v110 = v82;
    v110.f32[2] = -v82.f32[3];
    *(float32x2_t *)v100.f32 = vadd_f32(*(float32x2_t *)v105.i8, *(float32x2_t *)v107.i8);
    v111 = v26;
    *(float *)&v111.i32[2] = -v32;
    *(float *)&v4.i32[2] = -*(float *)&v4.i32[3];
    v112 = vmulq_f32(vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v4, (int8x16_t)v4, 0xCuLL), (int8x16_t)v4, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v111, v111), (int8x16_t)v111, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v4, v4), (int8x16_t)v4, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v111, (int8x16_t)v111, 0xCuLL), (int8x16_t)v111, 8uLL)), v110);
    v100.i32[2] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v112, 2), vaddq_f32(v112, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v112.f32, 1))).u32[0];
    v141[5] = vdivq_f32(v100, (float32x4_t)vdupq_lane_s32(v101, 0));
  }
  v113 = vmulq_f32(v50, v82);
  v114 = vaddq_f32(v113, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v113.f32, 1));
  v115 = (int32x2_t)vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v113, 2), v114).u64[0];
  if (*(float *)v115.i32 != 0.0)
  {
    v116 = v82;
    v116.f32[0] = -v82.f32[3];
    v117 = v3;
    *(float *)v117.i32 = -*(float *)&v3.i32[3];
    v118 = v47;
    *(float *)v118.i32 = -*(float *)&v47.i32[3];
    v119 = (int32x4_t)vmulq_f32(vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v118, (int8x16_t)v118, 0xCuLL), (int8x16_t)v118, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v117, v117), (int8x16_t)v117, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v118, v118), (int8x16_t)v118, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v117, (int8x16_t)v117, 0xCuLL), (int8x16_t)v117, 8uLL)), v116);
    v120 = v82;
    v120.f32[1] = -v82.f32[3];
    v121 = v3;
    *(float *)&v121.i32[1] = -*(float *)&v3.i32[3];
    v122 = v47;
    *(float *)&v122.i32[1] = -*(float *)&v47.i32[3];
    v123 = (int32x4_t)vmulq_f32(vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v122, (int8x16_t)v122, 0xCuLL), (int8x16_t)v122, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v121, v121), (int8x16_t)v121, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v122, v122), (int8x16_t)v122, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v121, (int8x16_t)v121, 0xCuLL), (int8x16_t)v121, 8uLL)), v120);
    *(float32x2_t *)v121.i8 = vadd_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v119.i8, *(int32x2_t *)v123.i8), (float32x2_t)vzip2_s32(*(int32x2_t *)v119.i8, *(int32x2_t *)v123.i8));
    v119.i64[0] = vzip2q_s32(v119, v123).u64[0];
    v124 = v82;
    v124.f32[2] = -v82.f32[3];
    *(float32x2_t *)v114.f32 = vadd_f32(*(float32x2_t *)v119.i8, *(float32x2_t *)v121.i8);
    *(float *)&v3.i32[2] = -*(float *)&v3.i32[3];
    v125 = v47;
    *(float *)&v125.i32[2] = -*(float *)&v47.i32[3];
    v126 = vmulq_f32(vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v125, (int8x16_t)v125, 0xCuLL), (int8x16_t)v125, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v3, v3), (int8x16_t)v3, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v125, v125), (int8x16_t)v125, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v3, (int8x16_t)v3, 0xCuLL), (int8x16_t)v3, 8uLL)), v124);
    v114.i32[2] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v126, 2), vaddq_f32(v126, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v126.f32, 1))).u32[0];
    v141[6] = vdivq_f32(v114, (float32x4_t)vdupq_lane_s32(v115, 0));
  }
  v127 = vmulq_f32(v67, v82);
  v128 = (int32x2_t)vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v127, 2), vaddq_f32(v127, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v127.f32, 1))).u64[0];
  if (*(float *)v128.i32 != 0.0)
  {
    v129 = v82;
    v129.f32[0] = -v82.f32[3];
    v130 = v47;
    *(float *)v130.i32 = -*(float *)&v47.i32[3];
    *(float *)&v131 = -v32;
    v132 = v26;
    v132.i32[0] = v131;
    v133 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v132, (int8x16_t)v132, 0xCuLL), (int8x16_t)v132, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v130, v130), (int8x16_t)v130, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v132, v132), (int8x16_t)v132, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v130, (int8x16_t)v130, 0xCuLL), (int8x16_t)v130, 8uLL));
    v134 = v82;
    v134.f32[1] = -v82.f32[3];
    v135 = v47;
    *(float *)&v135.i32[1] = -*(float *)&v47.i32[3];
    v136 = v26;
    v136.i32[1] = v131;
    v137 = (int32x4_t)vmulq_f32(v133, v129);
    v138 = (int32x4_t)vmulq_f32(vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v136, (int8x16_t)v136, 0xCuLL), (int8x16_t)v136, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v135, v135), (int8x16_t)v135, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v136, v136), (int8x16_t)v136, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v135, (int8x16_t)v135, 0xCuLL), (int8x16_t)v135, 8uLL)), v134);
    *(float32x2_t *)v134.f32 = vadd_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v137.i8, *(int32x2_t *)v138.i8), (float32x2_t)vzip2_s32(*(int32x2_t *)v137.i8, *(int32x2_t *)v138.i8));
    v139 = (float32x4_t)vzip2q_s32(v137, v138);
    *(float32x2_t *)v139.f32 = vadd_f32(*(float32x2_t *)v139.f32, *(float32x2_t *)v134.f32);
    v82.f32[2] = -v82.f32[3];
    *(float *)&v47.i32[2] = -*(float *)&v47.i32[3];
    v26.i32[2] = v131;
    v140 = vmulq_f32(vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v26, (int8x16_t)v26, 0xCuLL), (int8x16_t)v26, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v47, v47), (int8x16_t)v47, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v26, v26), (int8x16_t)v26, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v47, (int8x16_t)v47, 0xCuLL), (int8x16_t)v47, 8uLL)), v82);
    v139.i32[2] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v140, 2), vaddq_f32(v140, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v140.f32, 1))).u32[0];
    v141[7] = vdivq_f32(v139, (float32x4_t)vdupq_lane_s32(v128, 0));
  }
  sub_1B19E0C74(a1, (uint64_t)v141, 8, (uint64_t)&unk_1B2269030, 12);
}

void sub_1B19E1A7C(_QWORD *a1, float32x4_t a2)
{
  int32x4_t v3;
  float32x2_t v4;
  float32x2_t v5;
  void **v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float v19;
  float32x4_t v20;
  float v21;
  int v22;
  unint64_t v23;
  float32x4_t *v24;
  _OWORD *v25;
  unint64_t v26;
  float32x4_t *v27;
  _OWORD *v28;
  int v29;
  unint64_t v30;
  float32x4_t *v31;
  _OWORD *f32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  float32x4_t *v45;
  float32x4_t *v46;
  float32x4_t *v47;
  float32x4_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  _DWORD *v52;
  char *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char *v58;
  char *v59;
  int v60;
  unint64_t v61;
  _QWORD *v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  char *v68;
  char *v69;
  char *v70;
  char *v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  unint64_t v75;
  _OWORD *v76;
  _OWORD *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  char *v83;
  float32x4_t *v84;
  float32x4_t *v85;
  float32x4_t *v86;
  float32x4_t v87;
  unint64_t v88;
  char *v89;
  char *v90;
  _BYTE *v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  char *v96;
  char *v97;
  int v98;
  int v99;
  uint64_t v100;
  unint64_t v101;
  _OWORD *v102;
  _OWORD *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  char *v109;
  char *v110;
  char *v111;
  char *v112;
  __int128 v113;
  _DWORD *v114;
  char *v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  unint64_t v119;
  char *v120;
  char *v121;
  int v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  char *v128;
  char *v129;
  char *v130;
  char *v131;
  __int128 v132;
  unint64_t v133;
  char *v134;
  _DWORD *v135;
  char *v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  unint64_t v140;
  char *v141;
  char *v142;
  int v143;
  char *v144;
  char *v145;
  char *v146;
  __int128 v147;
  unint64_t v148;
  char *v149;
  _DWORD *v150;
  char *v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t v154;
  unint64_t v155;
  char *v156;
  char *v157;
  int v158;
  unint64_t v159;
  float32x4_t *v160;
  _OWORD *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  unint64_t v166;
  char *v167;
  float32x4_t *v168;
  float32x4_t *v169;
  float32x4_t *v170;
  float32x4_t v171;
  uint64_t v172;
  unint64_t v173;
  char *v174;
  _DWORD *v175;
  char *v176;
  uint64_t v177;
  unint64_t v178;
  uint64_t v179;
  unint64_t v180;
  char *v181;
  char *v182;
  int v183;
  unint64_t v184;
  _QWORD *v185;
  _QWORD *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  unint64_t v190;
  char *v191;
  char *v192;
  char *v193;
  char *v194;
  uint64_t v195;
  float *v196;
  uint64_t v197;
  unint64_t v198;
  uint64_t v199;
  float32x4_t v200;
  uint64_t v201;
  int *v202;
  uint64_t v203;
  uint64_t v204;
  unint64_t v205;
  float32x4_t v206;
  float32x4_t v207;
  float32x4_t v208;
  float32x4_t v209;
  float32x4_t v210;
  float32x4_t v211;
  int32x4_t v212;
  float32x4_t v213;
  float32x4_t v214;
  float32x4_t v215;
  int32x4_t v216;
  float32x2_t v217;
  float32x2_t v218;
  int32x4_t v219;
  int8x16_t v220;
  float *v221;
  float32x4_t v222;
  float32x4_t v223;
  float32x4_t v224;
  unint64_t v225;
  uint64_t v226;
  uint64_t v227;
  char **v228;
  char *v229;
  _DWORD *v230;
  char *v231;
  char *v232;
  _BYTE *v233;
  uint64_t v234;
  unint64_t v235;
  uint64_t v236;
  unint64_t v237;
  char *v238;
  char *v239;
  int v240;
  _DWORD *v241;
  _BYTE *v242;
  uint64_t v243;
  unint64_t v244;
  uint64_t v245;
  unint64_t v246;
  char *v247;
  char *v248;
  int v249;
  _OWORD *v250;
  __int128 v251;
  __int128 v252;
  __int128 v253;
  __int128 v254;
  __int128 v255;
  __int128 v256;
  uint64_t v257;
  float32x4_t v258;
  float32x4_t v259;
  uint64_t v260;
  float32x4_t v261;
  float32x4_t v262;
  float32x4_t v263;
  float32x4_t v264;
  float32x4_t v265;
  float32x4_t v266;
  float v267;
  char **v268;
  int8x16_t v270;
  float32x4_t v271;
  char v272;

  v3 = (int32x4_t)vmulq_f32(a2, a2);
  v3.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v3, 2), vadd_f32(*(float32x2_t *)v3.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v3.i8, 1))).u32[0];
  v4 = vrsqrte_f32((float32x2_t)v3.u32[0]);
  v5 = vmul_f32(v4, vrsqrts_f32((float32x2_t)v3.u32[0], vmul_f32(v4, v4)));
  LODWORD(v267) = vmul_f32(v5, vrsqrts_f32((float32x2_t)v3.u32[0], vmul_f32(v5, v5))).u32[0];
  v6 = (void **)(a1 + 14);
  sub_1B17F8190((uint64_t)(a1 + 14), (uint64_t)(a1[3] - a1[2]) >> 4);
  v7 = a1[3] - a1[2];
  if ((int)(v7 >> 4) >= 1)
    memset(*v6, 255, (v7 >> 2) & 0x3FFFFFFFCLL);
  v270 = (int8x16_t)vmulq_n_f32(a2, v267);
  v268 = (char **)(a1 + 17);
  sub_1B17F8000((uint64_t)(a1 + 17), 0);
  v8 = a1[6] - a1[5];
  if ((int)(v8 >> 2) > 1)
  {
    v9 = 0;
    v260 = (uint64_t)(a1 + 10);
    v10 = a1 + 13;
    v257 = (uint64_t)(a1 + 19);
    v11 = (v8 >> 3) & 0x7FFFFFFF;
    do
    {
      v12 = (int *)(a1[5] + 8 * v9);
      v13 = *v12;
      v14 = v12[1];
      v15 = a1[2];
      v16 = *(float32x4_t *)(v15 + 16 * v13);
      v17 = *(float32x4_t *)(v15 + 16 * v14);
      v18 = vmulq_f32((float32x4_t)v270, v16);
      v19 = *(float *)&v270.i32[3]
          + vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v18, 2), vaddq_f32(v18, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v18.f32, 1))).f32[0];
      v20 = vmulq_f32((float32x4_t)v270, v17);
      v21 = *(float *)&v270.i32[3]
          + vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v20, 2), vaddq_f32(v20, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v20.f32, 1))).f32[0];
      if (v19 > 0.0 || v21 > 0.0)
      {
        if (v19 <= 0.0 || v21 > 0.0)
        {
          if (v19 <= 0.0 && v21 > 0.0)
          {
            v29 = *((_DWORD *)*v6 + v13);
            if (v29 == -1)
            {
              v31 = (float32x4_t *)a1[9];
              v30 = a1[10];
              if ((unint64_t)v31 >= v30)
              {
                v123 = a1[8];
                v124 = ((uint64_t)v31 - v123) >> 4;
                if ((unint64_t)(v124 + 1) >> 60)
                  goto LABEL_301;
                v258 = *(float32x4_t *)(v15 + 16 * v14);
                v125 = v30 - v123;
                v126 = v125 >> 3;
                if (v125 >> 3 <= (unint64_t)(v124 + 1))
                  v126 = v124 + 1;
                if ((unint64_t)v125 >= 0x7FFFFFFFFFFFFFF0)
                  v127 = 0xFFFFFFFFFFFFFFFLL;
                else
                  v127 = v126;
                v263 = *(float32x4_t *)(v15 + 16 * v13);
                if (v127)
                {
                  v128 = (char *)sub_1B17F7824(v260, v127);
                  v16 = v263;
                }
                else
                {
                  v128 = 0;
                }
                v144 = &v128[16 * v124];
                *(_OWORD *)v144 = *(_OWORD *)(v15 + 16 * v13);
                f32 = v144 + 16;
                v146 = (char *)a1[8];
                v145 = (char *)a1[9];
                if (v145 != v146)
                {
                  do
                  {
                    v147 = *((_OWORD *)v145 - 1);
                    v145 -= 16;
                    *((_OWORD *)v144 - 1) = v147;
                    v144 -= 16;
                  }
                  while (v145 != v146);
                  v145 = (char *)a1[8];
                }
                a1[8] = v144;
                a1[9] = f32;
                a1[10] = &v128[16 * v127];
                if (v145)
                {
                  operator delete(v145);
                  v16 = v263;
                }
                v17 = v258;
              }
              else
              {
                *v31 = v16;
                f32 = (_OWORD *)v31[1].f32;
              }
              a1[9] = f32;
              v29 = (((unint64_t)f32 - a1[8]) >> 4) - 1;
              *(_DWORD *)(a1[14] + 4 * v13) = v29;
            }
            v149 = (char *)a1[12];
            v148 = a1[13];
            if ((unint64_t)v149 >= v148)
            {
              v151 = (char *)a1[11];
              v152 = (v149 - v151) >> 2;
              v153 = v152 + 1;
              if ((unint64_t)(v152 + 1) >> 62)
                goto LABEL_301;
              v259 = v17;
              v264 = v16;
              v154 = v148 - (_QWORD)v151;
              if (v154 >> 1 > v153)
                v153 = v154 >> 1;
              if ((unint64_t)v154 >= 0x7FFFFFFFFFFFFFFCLL)
                v155 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v155 = v153;
              if (v155)
              {
                v156 = (char *)sub_1B17F7E58((uint64_t)(a1 + 13), v155);
                v151 = (char *)a1[11];
                v149 = (char *)a1[12];
              }
              else
              {
                v156 = 0;
              }
              v157 = &v156[4 * v152];
              *(_DWORD *)v157 = v29;
              v150 = v157 + 4;
              while (v149 != v151)
              {
                v158 = *((_DWORD *)v149 - 1);
                v149 -= 4;
                *((_DWORD *)v157 - 1) = v158;
                v157 -= 4;
              }
              a1[11] = v157;
              a1[12] = v150;
              a1[13] = &v156[4 * v155];
              if (v151)
                operator delete(v151);
              v16 = v264;
              v17 = v259;
            }
            else
            {
              *(_DWORD *)v149 = v29;
              v150 = v149 + 4;
            }
            a1[12] = v150;
            if ((float)(v21 - v19) != 0.0)
              v16 = vmlaq_n_f32(v16, vsubq_f32(v17, v16), (float)-v19 / (float)(v21 - v19));
            v160 = (float32x4_t *)a1[9];
            v159 = a1[10];
            if ((unint64_t)v160 >= v159)
            {
              v162 = a1[8];
              v163 = ((uint64_t)v160 - v162) >> 4;
              if ((unint64_t)(v163 + 1) >> 60)
                goto LABEL_301;
              v164 = v159 - v162;
              v165 = v164 >> 3;
              if (v164 >> 3 <= (unint64_t)(v163 + 1))
                v165 = v163 + 1;
              if ((unint64_t)v164 >= 0x7FFFFFFFFFFFFFF0)
                v166 = 0xFFFFFFFFFFFFFFFLL;
              else
                v166 = v165;
              if (v166)
              {
                v265 = v16;
                v167 = (char *)sub_1B17F7824(v260, v166);
                v16 = v265;
              }
              else
              {
                v167 = 0;
              }
              v168 = (float32x4_t *)&v167[16 * v163];
              *v168 = v16;
              v161 = (_OWORD *)v168[1].f32;
              v170 = (float32x4_t *)a1[8];
              v169 = (float32x4_t *)a1[9];
              if (v169 != v170)
              {
                do
                {
                  v171 = v169[-1];
                  --v169;
                  v168[-1] = v171;
                  --v168;
                }
                while (v169 != v170);
                v169 = (float32x4_t *)a1[8];
              }
              a1[8] = v168;
              a1[9] = v161;
              a1[10] = &v167[16 * v166];
              if (v169)
                operator delete(v169);
            }
            else
            {
              *v160 = v16;
              v161 = (_OWORD *)v160[1].f32;
            }
            a1[9] = v161;
            v172 = (((unint64_t)v161 - a1[8]) >> 4) - 1;
            v174 = (char *)a1[12];
            v173 = a1[13];
            if ((unint64_t)v174 >= v173)
            {
              v176 = (char *)a1[11];
              v177 = (v174 - v176) >> 2;
              v178 = v177 + 1;
              if ((unint64_t)(v177 + 1) >> 62)
                goto LABEL_301;
              v179 = v173 - (_QWORD)v176;
              if (v179 >> 1 > v178)
                v178 = v179 >> 1;
              if ((unint64_t)v179 >= 0x7FFFFFFFFFFFFFFCLL)
                v180 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v180 = v178;
              if (v180)
              {
                v181 = (char *)sub_1B17F7E58((uint64_t)(a1 + 13), v180);
                v176 = (char *)a1[11];
                v174 = (char *)a1[12];
              }
              else
              {
                v181 = 0;
              }
              v182 = &v181[4 * v177];
              *(_DWORD *)v182 = v172;
              v175 = v182 + 4;
              while (v174 != v176)
              {
                v183 = *((_DWORD *)v174 - 1);
                v174 -= 4;
                *((_DWORD *)v182 - 1) = v183;
                v182 -= 4;
              }
              a1[11] = v182;
              a1[12] = v175;
              a1[13] = &v181[4 * v180];
              if (v176)
                operator delete(v176);
            }
            else
            {
              *(_DWORD *)v174 = v172;
              v175 = v174 + 4;
            }
            a1[12] = v175;
            v185 = (_QWORD *)a1[18];
            v184 = a1[19];
            if ((unint64_t)v185 >= v184)
            {
              v187 = ((char *)v185 - *v268) >> 3;
              if ((unint64_t)(v187 + 1) >> 61)
LABEL_301:
                abort();
              v188 = v184 - (_QWORD)*v268;
              v189 = v188 >> 2;
              if (v188 >> 2 <= (unint64_t)(v187 + 1))
                v189 = v187 + 1;
              if ((unint64_t)v188 >= 0x7FFFFFFFFFFFFFF8)
                v190 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v190 = v189;
              if (v190)
                v191 = (char *)sub_1B17F812C(v257, v190);
              else
                v191 = 0;
              v192 = &v191[8 * v187];
              *(_QWORD *)v192 = v172 << 32;
              v186 = v192 + 8;
              v194 = (char *)a1[17];
              v193 = (char *)a1[18];
              if (v193 != v194)
              {
                do
                {
                  v195 = *((_QWORD *)v193 - 1);
                  v193 -= 8;
                  *((_QWORD *)v192 - 1) = v195;
                  v192 -= 8;
                }
                while (v193 != v194);
                v193 = *v268;
              }
              a1[17] = v192;
              a1[18] = v186;
              a1[19] = &v191[8 * v190];
              if (v193)
                operator delete(v193);
            }
            else
            {
              *v185 = v172 << 32;
              v186 = v185 + 1;
            }
            a1[18] = v186;
          }
        }
        else
        {
          if ((float)(v21 - v19) != 0.0)
            v16 = vmlaq_n_f32(v16, vsubq_f32(v17, v16), (float)-v19 / (float)(v21 - v19));
          v27 = (float32x4_t *)a1[9];
          v26 = a1[10];
          if ((unint64_t)v27 >= v26)
          {
            v33 = a1[8];
            v34 = ((uint64_t)v27 - v33) >> 4;
            if ((unint64_t)(v34 + 1) >> 60)
              goto LABEL_301;
            v35 = v26 - v33;
            v36 = v35 >> 3;
            if (v35 >> 3 <= (unint64_t)(v34 + 1))
              v36 = v34 + 1;
            if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF0)
              v37 = 0xFFFFFFFFFFFFFFFLL;
            else
              v37 = v36;
            if (v37)
            {
              v262 = v16;
              v38 = (char *)sub_1B17F7824(v260, v37);
              v16 = v262;
            }
            else
            {
              v38 = 0;
            }
            v45 = (float32x4_t *)&v38[16 * v34];
            *v45 = v16;
            v28 = (_OWORD *)v45[1].f32;
            v47 = (float32x4_t *)a1[8];
            v46 = (float32x4_t *)a1[9];
            if (v46 != v47)
            {
              do
              {
                v48 = v46[-1];
                --v46;
                v45[-1] = v48;
                --v45;
              }
              while (v46 != v47);
              v46 = (float32x4_t *)a1[8];
            }
            a1[8] = v45;
            a1[9] = v28;
            a1[10] = &v38[16 * v37];
            if (v46)
              operator delete(v46);
          }
          else
          {
            *v27 = v16;
            v28 = (_OWORD *)v27[1].f32;
          }
          a1[9] = v28;
          v49 = (((unint64_t)v28 - a1[8]) >> 4) - 1;
          v51 = (char *)a1[12];
          v50 = a1[13];
          if ((unint64_t)v51 >= v50)
          {
            v53 = (char *)a1[11];
            v54 = (v51 - v53) >> 2;
            v55 = v54 + 1;
            if ((unint64_t)(v54 + 1) >> 62)
              goto LABEL_301;
            v56 = v50 - (_QWORD)v53;
            if (v56 >> 1 > v55)
              v55 = v56 >> 1;
            if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFFCLL)
              v57 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v57 = v55;
            if (v57)
            {
              v58 = (char *)sub_1B17F7E58((uint64_t)(a1 + 13), v57);
              v53 = (char *)a1[11];
              v51 = (char *)a1[12];
            }
            else
            {
              v58 = 0;
            }
            v59 = &v58[4 * v54];
            *(_DWORD *)v59 = v49;
            v52 = v59 + 4;
            while (v51 != v53)
            {
              v60 = *((_DWORD *)v51 - 1);
              v51 -= 4;
              *((_DWORD *)v59 - 1) = v60;
              v59 -= 4;
            }
            a1[11] = v59;
            a1[12] = v52;
            a1[13] = &v58[4 * v57];
            if (v53)
              operator delete(v53);
          }
          else
          {
            *(_DWORD *)v51 = v49;
            v52 = v51 + 4;
          }
          a1[12] = v52;
          v62 = (_QWORD *)a1[18];
          v61 = a1[19];
          if ((unint64_t)v62 >= v61)
          {
            v64 = ((char *)v62 - *v268) >> 3;
            if ((unint64_t)(v64 + 1) >> 61)
              goto LABEL_301;
            v65 = v61 - (_QWORD)*v268;
            v66 = v65 >> 2;
            if (v65 >> 2 <= (unint64_t)(v64 + 1))
              v66 = v64 + 1;
            if ((unint64_t)v65 >= 0x7FFFFFFFFFFFFFF8)
              v67 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v67 = v66;
            if (v67)
              v68 = (char *)sub_1B17F812C(v257, v67);
            else
              v68 = 0;
            v69 = &v68[8 * v64];
            *(_QWORD *)v69 = v49 << 32;
            v63 = v69 + 8;
            v71 = (char *)a1[17];
            v70 = (char *)a1[18];
            if (v70 != v71)
            {
              do
              {
                v72 = *((_QWORD *)v70 - 1);
                v70 -= 8;
                *((_QWORD *)v69 - 1) = v72;
                v69 -= 8;
              }
              while (v70 != v71);
              v70 = *v268;
            }
            a1[17] = v69;
            a1[18] = v63;
            a1[19] = &v68[8 * v67];
            if (v70)
              operator delete(v70);
          }
          else
          {
            *v62 = v49 << 32;
            v63 = v62 + 1;
          }
          a1[18] = v63;
          v73 = *(_DWORD *)(a1[14] + 4 * v14);
          if (v73 == -1)
          {
            v74 = a1[2];
            v76 = (_OWORD *)a1[9];
            v75 = a1[10];
            if ((unint64_t)v76 >= v75)
            {
              v78 = a1[8];
              v79 = ((uint64_t)v76 - v78) >> 4;
              if ((unint64_t)(v79 + 1) >> 60)
                goto LABEL_301;
              v80 = v75 - v78;
              v81 = v80 >> 3;
              if (v80 >> 3 <= (unint64_t)(v79 + 1))
                v81 = v79 + 1;
              if ((unint64_t)v80 >= 0x7FFFFFFFFFFFFFF0)
                v82 = 0xFFFFFFFFFFFFFFFLL;
              else
                v82 = v81;
              if (v82)
                v83 = (char *)sub_1B17F7824(v260, v82);
              else
                v83 = 0;
              v129 = &v83[16 * v79];
              *(_OWORD *)v129 = *(_OWORD *)(v74 + 16 * v14);
              v77 = v129 + 16;
              v131 = (char *)a1[8];
              v130 = (char *)a1[9];
              if (v130 != v131)
              {
                do
                {
                  v132 = *((_OWORD *)v130 - 1);
                  v130 -= 16;
                  *((_OWORD *)v129 - 1) = v132;
                  v129 -= 16;
                }
                while (v130 != v131);
                v130 = (char *)a1[8];
              }
              a1[8] = v129;
              a1[9] = v77;
              a1[10] = &v83[16 * v82];
              if (v130)
                operator delete(v130);
            }
            else
            {
              *v76 = *(_OWORD *)(v74 + 16 * v14);
              v77 = v76 + 1;
            }
            a1[9] = v77;
            v73 = (((unint64_t)v77 - a1[8]) >> 4) - 1;
            *(_DWORD *)(a1[14] + 4 * v14) = v73;
          }
          v134 = (char *)a1[12];
          v133 = a1[13];
          if ((unint64_t)v134 >= v133)
          {
            v136 = (char *)a1[11];
            v137 = (v134 - v136) >> 2;
            v138 = v137 + 1;
            if ((unint64_t)(v137 + 1) >> 62)
              goto LABEL_301;
            v139 = v133 - (_QWORD)v136;
            if (v139 >> 1 > v138)
              v138 = v139 >> 1;
            if ((unint64_t)v139 >= 0x7FFFFFFFFFFFFFFCLL)
              v140 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v140 = v138;
            if (v140)
            {
              v141 = (char *)sub_1B17F7E58((uint64_t)(a1 + 13), v140);
              v136 = (char *)a1[11];
              v134 = (char *)a1[12];
            }
            else
            {
              v141 = 0;
            }
            v142 = &v141[4 * v137];
            *(_DWORD *)v142 = v73;
            v135 = v142 + 4;
            while (v134 != v136)
            {
              v143 = *((_DWORD *)v134 - 1);
              v134 -= 4;
              *((_DWORD *)v142 - 1) = v143;
              v142 -= 4;
            }
            a1[11] = v142;
            a1[12] = v135;
            a1[13] = &v141[4 * v140];
            if (v136)
              operator delete(v136);
          }
          else
          {
            *(_DWORD *)v134 = v73;
            v135 = v134 + 4;
          }
          a1[12] = v135;
        }
      }
      else
      {
        v22 = *((_DWORD *)*v6 + v13);
        if (v22 == -1)
        {
          v24 = (float32x4_t *)a1[9];
          v23 = a1[10];
          if ((unint64_t)v24 >= v23)
          {
            v39 = a1[8];
            v40 = ((uint64_t)v24 - v39) >> 4;
            if ((unint64_t)(v40 + 1) >> 60)
              goto LABEL_301;
            v41 = v23 - v39;
            v42 = v41 >> 3;
            if (v41 >> 3 <= (unint64_t)(v40 + 1))
              v42 = v40 + 1;
            if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFF0)
              v43 = 0xFFFFFFFFFFFFFFFLL;
            else
              v43 = v42;
            if (v43)
            {
              v44 = (char *)sub_1B17F7824(v260, v43);
              v16 = *(float32x4_t *)(v15 + 16 * v13);
            }
            else
            {
              v44 = 0;
            }
            v84 = (float32x4_t *)&v44[16 * v40];
            *v84 = v16;
            v25 = (_OWORD *)v84[1].f32;
            v86 = (float32x4_t *)a1[8];
            v85 = (float32x4_t *)a1[9];
            if (v85 != v86)
            {
              do
              {
                v87 = v85[-1];
                --v85;
                v84[-1] = v87;
                --v84;
              }
              while (v85 != v86);
              v85 = (float32x4_t *)a1[8];
            }
            a1[8] = v84;
            a1[9] = v25;
            a1[10] = &v44[16 * v43];
            if (v85)
              operator delete(v85);
          }
          else
          {
            *v24 = v16;
            v25 = (_OWORD *)v24[1].f32;
          }
          a1[9] = v25;
          v22 = (((unint64_t)v25 - a1[8]) >> 4) - 1;
          *(_DWORD *)(a1[14] + 4 * v13) = v22;
        }
        v89 = (char *)a1[12];
        v88 = a1[13];
        if ((unint64_t)v89 >= v88)
        {
          v91 = (_BYTE *)a1[11];
          v92 = (v89 - v91) >> 2;
          v93 = v92 + 1;
          if ((unint64_t)(v92 + 1) >> 62)
            goto LABEL_301;
          v94 = v88 - (_QWORD)v91;
          if (v94 >> 1 > v93)
            v93 = v94 >> 1;
          if ((unint64_t)v94 >= 0x7FFFFFFFFFFFFFFCLL)
            v95 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v95 = v93;
          if (v95)
          {
            v96 = (char *)sub_1B17F7E58((uint64_t)(a1 + 13), v95);
            v91 = (_BYTE *)a1[11];
            v89 = (char *)a1[12];
          }
          else
          {
            v96 = 0;
          }
          v97 = &v96[4 * v92];
          *(_DWORD *)v97 = v22;
          v90 = v97 + 4;
          while (v89 != v91)
          {
            v98 = *((_DWORD *)v89 - 1);
            v89 -= 4;
            *((_DWORD *)v97 - 1) = v98;
            v97 -= 4;
          }
          a1[11] = v97;
          a1[12] = v90;
          a1[13] = &v96[4 * v95];
          if (v91)
            operator delete(v91);
        }
        else
        {
          *(_DWORD *)v89 = v22;
          v90 = v89 + 4;
        }
        a1[12] = v90;
        v99 = *(_DWORD *)(a1[14] + 4 * v14);
        if (v99 == -1)
        {
          v100 = a1[2];
          v102 = (_OWORD *)a1[9];
          v101 = a1[10];
          if ((unint64_t)v102 >= v101)
          {
            v104 = a1[8];
            v105 = ((uint64_t)v102 - v104) >> 4;
            if ((unint64_t)(v105 + 1) >> 60)
              goto LABEL_301;
            v106 = v101 - v104;
            v107 = v106 >> 3;
            if (v106 >> 3 <= (unint64_t)(v105 + 1))
              v107 = v105 + 1;
            if ((unint64_t)v106 >= 0x7FFFFFFFFFFFFFF0)
              v108 = 0xFFFFFFFFFFFFFFFLL;
            else
              v108 = v107;
            if (v108)
              v109 = (char *)sub_1B17F7824(v260, v108);
            else
              v109 = 0;
            v110 = &v109[16 * v105];
            *(_OWORD *)v110 = *(_OWORD *)(v100 + 16 * v14);
            v103 = v110 + 16;
            v112 = (char *)a1[8];
            v111 = (char *)a1[9];
            if (v111 != v112)
            {
              do
              {
                v113 = *((_OWORD *)v111 - 1);
                v111 -= 16;
                *((_OWORD *)v110 - 1) = v113;
                v110 -= 16;
              }
              while (v111 != v112);
              v111 = (char *)a1[8];
            }
            a1[8] = v110;
            a1[9] = v103;
            a1[10] = &v109[16 * v108];
            if (v111)
              operator delete(v111);
          }
          else
          {
            *v102 = *(_OWORD *)(v100 + 16 * v14);
            v103 = v102 + 1;
          }
          a1[9] = v103;
          v99 = (((unint64_t)v103 - a1[8]) >> 4) - 1;
          *(_DWORD *)(a1[14] + 4 * v14) = v99;
          v90 = (char *)a1[12];
        }
        if ((unint64_t)v90 >= *v10)
        {
          v115 = (char *)a1[11];
          v116 = (v90 - v115) >> 2;
          v117 = v116 + 1;
          if ((unint64_t)(v116 + 1) >> 62)
            goto LABEL_301;
          v118 = *v10 - (_QWORD)v115;
          if (v118 >> 1 > v117)
            v117 = v118 >> 1;
          if ((unint64_t)v118 >= 0x7FFFFFFFFFFFFFFCLL)
            v119 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v119 = v117;
          if (v119)
          {
            v120 = (char *)sub_1B17F7E58((uint64_t)(a1 + 13), v119);
            v115 = (char *)a1[11];
            v90 = (char *)a1[12];
          }
          else
          {
            v120 = 0;
          }
          v121 = &v120[4 * v116];
          *(_DWORD *)v121 = v99;
          v114 = v121 + 4;
          while (v90 != v115)
          {
            v122 = *((_DWORD *)v90 - 1);
            v90 -= 4;
            *((_DWORD *)v121 - 1) = v122;
            v121 -= 4;
          }
          a1[11] = v121;
          a1[12] = v114;
          a1[13] = &v120[4 * v119];
          if (v115)
            operator delete(v115);
        }
        else
        {
          *(_DWORD *)v90 = v99;
          v114 = v90 + 4;
        }
        a1[12] = v114;
      }
      ++v9;
    }
    while (v9 != v11);
  }
  v197 = a1[17];
  v196 = (float *)a1[18];
  v198 = (unint64_t)v196 - v197;
  if ((unint64_t)v196 - v197 > 0x10)
  {
    if (v198 >= 0x19)
    {
      v199 = a1[8];
      v200 = *(float32x4_t *)(v199 + 16 * *(int *)(v197 + 4));
      v201 = (v198 >> 3);
      if ((int)(v198 >> 3) > 1)
      {
        v202 = (int *)(v197 + 12);
        v203 = v201 - 1;
        do
        {
          v204 = *v202;
          v202 += 2;
          v200 = vaddq_f32(v200, *(float32x4_t *)(v199 + 16 * v204));
          --v203;
        }
        while (v203);
      }
      v205 = (uint64_t)v198 >> 3;
      if ((int)(v198 >> 3) >= 1)
      {
        v206 = vmulq_f32((float32x4_t)v270, (float32x4_t)xmmword_1B2244D90);
        v207 = vaddq_f32(v206, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v206.f32, 1));
        v208 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v206, 2), v207);
        v208.f32[0] = fabsf(v208.f32[0]);
        v207.i32[0] = 1064514355;
        v209 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(v208, v207), 0), (int8x16_t)xmmword_1B2244DD0, (int8x16_t)xmmword_1B2244D90);
        v210 = vnegq_f32((float32x4_t)v270);
        v211 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v270, (int32x4_t)v270), v270, 0xCuLL);
        v212 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v209, (int32x4_t)v209), (int8x16_t)v209, 0xCuLL), v210), v209, v211);
        v213 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v212, v212), (int8x16_t)v212, 0xCuLL);
        v214 = vmulq_f32((float32x4_t)v270, v213);
        v215 = vmlsq_lane_f32(v213, (float32x4_t)v270, (float32x2_t)*(_OWORD *)&vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v214, 2), vaddq_f32(v214, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v214.f32, 1))), 0);
        v216 = (int32x4_t)vmulq_f32(v215, v215);
        v216.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v216, 2), vadd_f32(*(float32x2_t *)v216.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v216.i8, 1))).u32[0];
        v217 = vrsqrte_f32((float32x2_t)v216.u32[0]);
        v218 = vmul_f32(v217, vrsqrts_f32((float32x2_t)v216.u32[0], vmul_f32(v217, v217)));
        v271 = vmulq_n_f32(v215, vmul_f32(v218, vrsqrts_f32((float32x2_t)v216.u32[0], vmul_f32(v218, v218))).f32[0]);
        v219 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v271, (int32x4_t)v271), (int8x16_t)v271, 0xCuLL), v210), v271, v211);
        v220 = vextq_s8((int8x16_t)vuzp1q_s32(v219, v219), (int8x16_t)v219, 0xCuLL);
        *(float *)v219.i32 = (float)v205;
        v261 = vdivq_f32(v200, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v219.i8, 0));
        v266 = (float32x4_t)v220;
        v221 = (float *)(v197 + 4);
        do
        {
          v222 = vsubq_f32(*(float32x4_t *)(v199 + 16 * *(int *)v221), v261);
          v223 = vmulq_f32(v271, v222);
          v224 = vmulq_f32(v266, v222);
          *(v221 - 1) = atan2f(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v223, 2), vaddq_f32(v223, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v223.f32, 1))).f32[0], vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v224, 2), vaddq_f32(v224, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v224.f32, 1))).f32[0]);
          v221 += 2;
          --v201;
        }
        while (v201);
      }
      v225 = 126 - 2 * __clz(v205);
      if (v196 == (float *)v197)
        v226 = 0;
      else
        v226 = v225;
      sub_1B19E2D70(v197, v196, (uint64_t)&v272, v226, 1);
      v197 = a1[17];
      v198 = a1[18] - v197;
    }
    if ((int)(v198 >> 3) >= 1)
    {
      v227 = 0;
      v228 = (char **)(a1 + 13);
      v229 = (char *)a1[12];
      do
      {
        v230 = (_DWORD *)(v197 + 8 * v227 + 4);
        v231 = *v228;
        if (v229 >= *v228)
        {
          v233 = (_BYTE *)a1[11];
          v234 = (v229 - v233) >> 2;
          v235 = v234 + 1;
          if ((unint64_t)(v234 + 1) >> 62)
            goto LABEL_301;
          v236 = v231 - v233;
          if (v236 >> 1 > v235)
            v235 = v236 >> 1;
          if ((unint64_t)v236 >= 0x7FFFFFFFFFFFFFFCLL)
            v237 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v237 = v235;
          if (v237)
          {
            v238 = (char *)sub_1B17F7E58((uint64_t)(a1 + 13), v237);
            v233 = (_BYTE *)a1[11];
            v229 = (char *)a1[12];
          }
          else
          {
            v238 = 0;
          }
          v239 = &v238[4 * v234];
          *(_DWORD *)v239 = *v230;
          v232 = v239 + 4;
          while (v229 != v233)
          {
            v240 = *((_DWORD *)v229 - 1);
            v229 -= 4;
            *((_DWORD *)v239 - 1) = v240;
            v239 -= 4;
          }
          v231 = &v238[4 * v237];
          a1[11] = v239;
          a1[12] = v232;
          a1[13] = v231;
          if (v233)
          {
            operator delete(v233);
            v231 = *v228;
          }
        }
        else
        {
          *(_DWORD *)v229 = *v230;
          v232 = v229 + 4;
        }
        a1[12] = v232;
        v241 = (_DWORD *)(a1[17] + 8 * (++v227 % (unint64_t)((uint64_t)(a1[18] - a1[17]) >> 3)) + 4);
        if (v232 >= v231)
        {
          v242 = (_BYTE *)a1[11];
          v243 = (v232 - v242) >> 2;
          v244 = v243 + 1;
          if ((unint64_t)(v243 + 1) >> 62)
            goto LABEL_301;
          v245 = v231 - v242;
          if (v245 >> 1 > v244)
            v244 = v245 >> 1;
          if ((unint64_t)v245 >= 0x7FFFFFFFFFFFFFFCLL)
            v246 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v246 = v244;
          if (v246)
          {
            v247 = (char *)sub_1B17F7E58((uint64_t)(a1 + 13), v246);
            v242 = (_BYTE *)a1[11];
            v232 = (char *)a1[12];
          }
          else
          {
            v247 = 0;
          }
          v248 = &v247[4 * v243];
          *(_DWORD *)v248 = *v241;
          v229 = v248 + 4;
          while (v232 != v242)
          {
            v249 = *((_DWORD *)v232 - 1);
            v232 -= 4;
            *((_DWORD *)v248 - 1) = v249;
            v248 -= 4;
          }
          a1[11] = v248;
          a1[12] = v229;
          a1[13] = &v247[4 * v246];
          if (v242)
            operator delete(v242);
        }
        else
        {
          *(_DWORD *)v232 = *v241;
          v229 = v232 + 4;
        }
        a1[12] = v229;
        v197 = a1[17];
      }
      while (v227 < (int)((unint64_t)(a1[18] - v197) >> 3));
    }
  }
  v251 = *((_OWORD *)a1 + 4);
  v250 = a1 + 8;
  v252 = *(v250 - 1);
  v253 = v250[1];
  v254 = v250[2];
  v255 = *(v250 - 3);
  v256 = *(v250 - 2);
  *(v250 - 3) = v251;
  *(v250 - 2) = v253;
  *(v250 - 1) = v254;
  *v250 = v255;
  v250[1] = v256;
  v250[2] = v252;
  sub_1B17F8190((uint64_t)v250 + 24, 0);
  sub_1B17F76F8((uint64_t)v250, 0);
  sub_1B17F8190((uint64_t)v6, 0);
  sub_1B17F8000((uint64_t)v268, 0);
}

BOOL sub_1B19E2A64(_QWORD *a1, float32x4_t a2, float32x4_t a3)
{
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v13;
  float32x4_t v14;

  v14 = vaddq_f32(a2, a3);
  v4.i64[0] = 0;
  v4.i32[2] = 1.0;
  v4.f32[3] = -v14.f32[2];
  sub_1B19E1A7C(a1, v4);
  if (a1[5] == a1[6])
    return 0;
  v5.i64[0] = COERCE_UNSIGNED_INT(1.0);
  v5.i32[2] = 0;
  v5.f32[3] = -v14.f32[0];
  sub_1B19E1A7C(a1, v5);
  if (a1[5] == a1[6])
    return 0;
  v6 = (float32x4_t)xmmword_1B2244DC0;
  v13 = vsubq_f32(a2, a3);
  v6.i32[3] = v13.i32[0];
  sub_1B19E1A7C(a1, v6);
  if (a1[5] == a1[6])
    return 0;
  v7.i32[0] = 0;
  v7.i32[1] = 1.0;
  v7.i32[2] = 0;
  v7.f32[3] = -v14.f32[1];
  sub_1B19E1A7C(a1, v7);
  if (a1[5] == a1[6])
    return 0;
  v8 = (float32x4_t)xmmword_1B2244DE0;
  v8.i32[3] = v13.i32[1];
  sub_1B19E1A7C(a1, v8);
  if (a1[5] == a1[6])
    return 0;
  v9 = (float32x4_t)xmmword_1B2244DF0;
  v9.i32[3] = v13.i32[2];
  sub_1B19E1A7C(a1, v9);
  return a1[5] != a1[6];
}

__n128 sub_1B19E2B9C(uint64_t a1, float32x4_t *a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __n128 result;

  v2 = *(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16);
  if ((int)(v2 >> 4) >= 1)
  {
    v3 = 0;
    v4 = v2 & 0xFFFFFFFF0;
    do
    {
      result = *(__n128 *)a2;
      *(float32x4_t *)(*(_QWORD *)(a1 + 16) + v3) = vmlaq_n_f32(vmlaq_lane_f32(vmlaq_laneq_f32(a2[3], a2[2], *(float32x4_t *)(*(_QWORD *)(a1 + 16) + v3), 2), a2[1], *(float32x2_t *)(*(_QWORD *)(a1 + 16) + v3), 1), *a2, COERCE_FLOAT(*(_OWORD *)(*(_QWORD *)(a1 + 16) + v3)));
      v3 += 16;
    }
    while (v4 != v3);
  }
  return result;
}

double sub_1B19E2BE8(uint64_t a1, float32x4_t a2, float32x4_t a3, float32x4_t a4, float32x4_t a5)
{
  float32x4_t *v5;
  unint64_t v6;
  float32x4_t v7;
  float32x4_t v8;
  uint64_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;

  v5 = *(float32x4_t **)(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24) - (_QWORD)v5;
  if ((int)(v6 >> 4) < 1)
  {
    v7.i64[0] = 0;
  }
  else
  {
    v7 = (float32x4_t)xmmword_1B2244E20;
    v8 = (float32x4_t)xmmword_1B2246ED0;
    v9 = (v6 >> 4);
    v10.i64[0] = 0x3F0000003F000000;
    v10.i64[1] = 0x3F0000003F000000;
    do
    {
      v11 = *v5++;
      v12 = vmlaq_n_f32(vmlaq_lane_f32(vmlaq_laneq_f32(a5, a4, v11, 2), a3, *(float32x2_t *)v11.f32, 1), a2, v11.f32[0]);
      v12.i32[3] = 1.0;
      v13 = vminnmq_f32(vsubq_f32(v7, v8), v12);
      v14 = vmaxnmq_f32(vaddq_f32(v7, v8), v12);
      v7 = vmulq_f32(vaddq_f32(v13, v14), v10);
      v8 = vmulq_f32(vsubq_f32(v14, v13), v10);
      --v9;
    }
    while (v9);
  }
  return *(double *)v7.i64;
}

void sub_1B19E2C74(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  v2 = (void *)a1[17];
  if (v2)
  {
    a1[18] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[14];
  if (v3)
  {
    a1[15] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[11];
  if (v4)
  {
    a1[12] = v4;
    operator delete(v4);
  }
  v5 = (void *)a1[8];
  if (v5)
  {
    a1[9] = v5;
    operator delete(v5);
  }
  v6 = (void *)a1[5];
  if (v6)
  {
    a1[6] = v6;
    operator delete(v6);
  }
  v7 = (void *)a1[2];
  if (v7)
  {
    a1[3] = v7;
    operator delete(v7);
  }
}

CFStringRef sub_1B19E2CF8(const void *a1)
{
  const __CFAllocator *v2;

  v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<CFXConvexPolyhedron %p>"), a1);
}

CFStringRef sub_1B19E2D34(const void *a1)
{
  const __CFAllocator *v2;

  v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<CFXConvexPolyhedron %p>"), a1);
}

uint64_t sub_1B19E2D70(uint64_t result, float *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  float *v15;
  uint64_t v16;
  float *v17;
  char v18;
  BOOL v19;
  uint64_t v20;
  float *v21;
  float *v22;
  float v23;
  int v24;
  float *v25;
  float *v26;
  uint64_t v27;

  v8 = result;
LABEL_2:
  v9 = v8;
LABEL_3:
  v10 = 1 - a4;
  while (2)
  {
    v8 = v9;
    v11 = v10;
    v12 = (uint64_t)a2 - v9;
    v13 = ((uint64_t)a2 - v9) >> 3;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        if (*(a2 - 2) < *(float *)v9)
        {
          v20 = *(_QWORD *)v9;
          *(_QWORD *)v9 = *((_QWORD *)a2 - 1);
          *((_QWORD *)a2 - 1) = v20;
        }
        return result;
      case 3uLL:
        return sub_1B19E3170((float *)v9, (float *)(v9 + 8), a2 - 2);
      case 4uLL:
        return sub_1B19E3504((float *)v9, (float *)(v9 + 8), (float *)(v9 + 16), (_QWORD *)a2 - 1);
      case 5uLL:
        return sub_1B19E359C((float *)v9, (float *)(v9 + 8), (float *)(v9 + 16), (uint64_t *)(v9 + 24), (uint64_t *)a2 - 1);
      default:
        if (v12 > 191)
        {
          if (v11 == 1)
          {
            if ((float *)v9 != a2)
              return (uint64_t)sub_1B19E3660((float *)v9, a2, a2, a3);
            return result;
          }
          v14 = v13 >> 1;
          v15 = (float *)(v9 + 8 * (v13 >> 1));
          if ((unint64_t)v12 < 0x401)
          {
            sub_1B19E3170((float *)(v9 + 8 * (v13 >> 1)), (float *)v9, a2 - 2);
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          else
          {
            sub_1B19E3170((float *)v9, (float *)(v9 + 8 * (v13 >> 1)), a2 - 2);
            sub_1B19E3170((float *)(v9 + 8), v15 - 2, a2 - 4);
            sub_1B19E3170((float *)(v9 + 16), (float *)(v9 + 8 + 8 * v14), a2 - 6);
            sub_1B19E3170(v15 - 2, v15, (float *)(v9 + 8 + 8 * v14));
            v16 = *(_QWORD *)v9;
            *(_QWORD *)v9 = *(_QWORD *)v15;
            *(_QWORD *)v15 = v16;
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          if (*(float *)(v9 - 8) >= *(float *)v9)
          {
            result = (uint64_t)sub_1B19E321C((float *)v9, a2);
            v9 = result;
            goto LABEL_17;
          }
LABEL_12:
          v17 = sub_1B19E32C8((float *)v9, a2);
          if ((v18 & 1) == 0)
            goto LABEL_15;
          v19 = sub_1B19E3380(v9, (uint64_t)v17);
          v9 = (uint64_t)(v17 + 2);
          result = sub_1B19E3380((uint64_t)(v17 + 2), (uint64_t)a2);
          if (!(_DWORD)result)
          {
            v10 = v11 + 1;
            if (v19)
              continue;
LABEL_15:
            result = sub_1B19E2D70(v8, v17, a3, -v11, a5 & 1);
            v9 = (uint64_t)(v17 + 2);
LABEL_17:
            a5 = 0;
            a4 = -v11;
            goto LABEL_3;
          }
          a4 = -v11;
          a2 = v17;
          if (v19)
            return result;
          goto LABEL_2;
        }
        if ((a5 & 1) != 0)
          return sub_1B19E30E8(v9, (uint64_t)a2);
        if ((float *)v9 != a2)
        {
          v21 = (float *)(v9 + 8);
          while (v21 != a2)
          {
            v22 = v21;
            v23 = *(float *)(v8 + 8);
            if (v23 < *(float *)v8)
            {
              v24 = *(_DWORD *)(v8 + 12);
              v25 = v22;
              do
              {
                v26 = v25;
                v27 = *((_QWORD *)v25 - 1);
                v25 -= 2;
                *(_QWORD *)v26 = v27;
              }
              while (*(v26 - 4) > v23);
              *v25 = v23;
              *((_DWORD *)v25 + 1) = v24;
            }
            v21 = v22 + 2;
            v8 = (uint64_t)v22;
          }
        }
        return result;
    }
  }
}

uint64_t sub_1B19E30E8(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  float v6;
  int v7;
  uint64_t v8;
  float v9;
  uint64_t v10;

  if (result != a2)
  {
    v2 = result + 8;
    if (result + 8 != a2)
    {
      v3 = 0;
      v4 = result;
      do
      {
        v5 = v2;
        v6 = *(float *)(v4 + 8);
        if (v6 < *(float *)v4)
        {
          v7 = *(_DWORD *)(v4 + 12);
          v8 = v3;
          while (1)
          {
            *(_QWORD *)(result + v8 + 8) = *(_QWORD *)(result + v8);
            if (!v8)
              break;
            v9 = *(float *)(result + v8 - 8);
            v8 -= 8;
            if (v9 <= v6)
            {
              v10 = result + v8 + 8;
              goto LABEL_10;
            }
          }
          v10 = result;
LABEL_10:
          *(float *)v10 = v6;
          *(_DWORD *)(v10 + 4) = v7;
        }
        v2 = v5 + 8;
        v3 += 8;
        v4 = v5;
      }
      while (v5 + 8 != a2);
    }
  }
  return result;
}

uint64_t sub_1B19E3170(float *a1, float *a2, float *a3)
{
  float v3;
  float v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *a2;
  v4 = *a3;
  if (*a2 < *a1)
  {
    v5 = *(_QWORD *)a1;
    if (v4 < v3)
    {
      *(_QWORD *)a1 = *(_QWORD *)a3;
      *(_QWORD *)a3 = v5;
      return 1;
    }
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)a2 = v5;
    if (*a3 >= *(float *)&v5)
      return 1;
    *(_QWORD *)a2 = *(_QWORD *)a3;
    *(_QWORD *)a3 = v5;
    return 2;
  }
  if (v4 < v3)
  {
    v6 = *(_QWORD *)a2;
    *(_QWORD *)a2 = *(_QWORD *)a3;
    *(_QWORD *)a3 = v6;
    if (*a2 >= *a1)
      return 1;
    v7 = *(_QWORD *)a1;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)a2 = v7;
    return 2;
  }
  return 0;
}

float *sub_1B19E321C(float *a1, float *a2)
{
  uint64_t v2;
  float *v3;
  float v4;
  float *v5;
  float v6;
  uint64_t v7;
  float v8;
  float v9;

  v2 = *(_QWORD *)a1;
  if (*(a2 - 2) <= COERCE_FLOAT(*(_QWORD *)a1))
  {
    v5 = a1 + 2;
    do
    {
      v3 = v5;
      if (v5 >= a2)
        break;
      v5 += 2;
    }
    while (*v3 <= *(float *)&v2);
  }
  else
  {
    v3 = a1;
    do
    {
      v4 = v3[2];
      v3 += 2;
    }
    while (v4 <= *(float *)&v2);
  }
  if (v3 < a2)
  {
    do
    {
      v6 = *(a2 - 2);
      a2 -= 2;
    }
    while (v6 > *(float *)&v2);
  }
  while (v3 < a2)
  {
    v7 = *(_QWORD *)v3;
    *(_QWORD *)v3 = *(_QWORD *)a2;
    *(_QWORD *)a2 = v7;
    do
    {
      v8 = v3[2];
      v3 += 2;
    }
    while (v8 <= *(float *)&v2);
    do
    {
      v9 = *(a2 - 2);
      a2 -= 2;
    }
    while (v9 > *(float *)&v2);
  }
  if (v3 - 2 != a1)
    *(_QWORD *)a1 = *((_QWORD *)v3 - 1);
  *((_QWORD *)v3 - 1) = v2;
  return v3;
}

float *sub_1B19E32C8(float *a1, float *a2)
{
  uint64_t v2;
  uint64_t v3;
  float v4;
  float *v5;
  float *v6;
  float v7;
  float v8;
  float *v9;
  float *v10;
  uint64_t v11;
  float v12;
  float v13;

  v2 = 0;
  v3 = *(_QWORD *)a1;
  do
  {
    v4 = a1[v2 + 2];
    v2 += 2;
  }
  while (v4 < *(float *)&v3);
  v5 = &a1[v2];
  v6 = &a1[v2 - 2];
  if (v2 == 2)
  {
    do
    {
      if (v5 >= a2)
        break;
      v8 = *(a2 - 2);
      a2 -= 2;
    }
    while (v8 >= *(float *)&v3);
  }
  else
  {
    do
    {
      v7 = *(a2 - 2);
      a2 -= 2;
    }
    while (v7 >= *(float *)&v3);
  }
  if (v5 < a2)
  {
    v9 = &a1[v2];
    v10 = a2;
    do
    {
      v11 = *(_QWORD *)v9;
      *(_QWORD *)v9 = *(_QWORD *)v10;
      *(_QWORD *)v10 = v11;
      do
      {
        v12 = v9[2];
        v9 += 2;
      }
      while (v12 < *(float *)&v3);
      do
      {
        v13 = *(v10 - 2);
        v10 -= 2;
      }
      while (v13 >= *(float *)&v3);
    }
    while (v9 < v10);
    v6 = v9 - 2;
  }
  if (v6 != a1)
    *(_QWORD *)a1 = *(_QWORD *)v6;
  *(_QWORD *)v6 = v3;
  return v6;
}

BOOL sub_1B19E3380(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  float *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  float v11;
  int v12;
  uint64_t v13;
  float v14;
  uint64_t v15;

  v4 = (a2 - a1) >> 3;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (*(float *)(a2 - 8) < *(float *)a1)
      {
        v6 = *(_QWORD *)a1;
        *(_QWORD *)a1 = *(_QWORD *)(a2 - 8);
        *(_QWORD *)(a2 - 8) = v6;
      }
      return result;
    case 3:
      sub_1B19E3170((float *)a1, (float *)(a1 + 8), (float *)(a2 - 8));
      return 1;
    case 4:
      sub_1B19E3504((float *)a1, (float *)(a1 + 8), (float *)(a1 + 16), (_QWORD *)(a2 - 8));
      return 1;
    case 5:
      sub_1B19E359C((float *)a1, (float *)(a1 + 8), (float *)(a1 + 16), (uint64_t *)(a1 + 24), (uint64_t *)(a2 - 8));
      return 1;
    default:
      v7 = (float *)(a1 + 16);
      sub_1B19E3170((float *)a1, (float *)(a1 + 8), (float *)(a1 + 16));
      v8 = a1 + 24;
      if (a1 + 24 == a2)
        return 1;
      v9 = 0;
      v10 = 0;
      break;
  }
  while (1)
  {
    v11 = *(float *)v8;
    if (*(float *)v8 < *v7)
    {
      v12 = *(_DWORD *)(v8 + 4);
      v13 = v9;
      while (1)
      {
        *(_QWORD *)(a1 + v13 + 24) = *(_QWORD *)(a1 + v13 + 16);
        if (v13 == -16)
          break;
        v14 = *(float *)(a1 + v13 + 8);
        v13 -= 8;
        if (v14 <= v11)
        {
          v15 = a1 + v13 + 24;
          goto LABEL_12;
        }
      }
      v15 = a1;
LABEL_12:
      *(float *)v15 = v11;
      *(_DWORD *)(v15 + 4) = v12;
      if (++v10 == 8)
        return v8 + 8 == a2;
    }
    v7 = (float *)v8;
    v9 += 8;
    v8 += 8;
    if (v8 == a2)
      return 1;
  }
}

uint64_t sub_1B19E3504(float *a1, float *a2, float *a3, _QWORD *a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = sub_1B19E3170(a1, a2, a3);
  if (*(float *)a4 < *a3)
  {
    v9 = *(_QWORD *)a3;
    *(_QWORD *)a3 = *a4;
    *a4 = v9;
    if (*a3 < *a2)
    {
      v10 = *(_QWORD *)a2;
      *(_QWORD *)a2 = *(_QWORD *)a3;
      *(_QWORD *)a3 = v10;
      if (*a2 < *a1)
      {
        v11 = *(_QWORD *)a1;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_QWORD *)a2 = v11;
      }
    }
  }
  return result;
}

uint64_t sub_1B19E359C(float *a1, float *a2, float *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  result = sub_1B19E3504(a1, a2, a3, a4);
  if (*(float *)a5 < *(float *)a4)
  {
    v11 = *a4;
    *a4 = *a5;
    *a5 = v11;
    if (*(float *)a4 < *a3)
    {
      v12 = *(_QWORD *)a3;
      *(_QWORD *)a3 = *a4;
      *a4 = v12;
      if (*a3 < *a2)
      {
        v13 = *(_QWORD *)a2;
        *(_QWORD *)a2 = *(_QWORD *)a3;
        *(_QWORD *)a3 = v13;
        if (*a2 < *a1)
        {
          v14 = *(_QWORD *)a1;
          *(_QWORD *)a1 = *(_QWORD *)a2;
          *(_QWORD *)a2 = v14;
        }
      }
    }
  }
  return result;
}

float *sub_1B19E3660(float *a1, float *a2, float *a3, uint64_t a4)
{
  float *v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  float *v12;
  float *v13;
  float *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  float *v19;
  float *v20;
  uint64_t v21;
  uint64_t v22;

  if (a1 != a2)
  {
    v6 = a2;
    v8 = (char *)a2 - (char *)a1;
    v9 = ((char *)a2 - (char *)a1) >> 3;
    if ((char *)a2 - (char *)a1 >= 9)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = &a1[2 * v10];
      do
      {
        sub_1B19E37FC((uint64_t)a1, a4, v9, v12);
        v12 -= 2;
        --v11;
      }
      while (v11);
    }
    v13 = v6;
    if (v6 != a3)
    {
      v14 = v6;
      do
      {
        if (*v14 < *a1)
        {
          v15 = *(_QWORD *)v14;
          *(_QWORD *)v14 = *(_QWORD *)a1;
          *(_QWORD *)a1 = v15;
          sub_1B19E37FC((uint64_t)a1, a4, v9, a1);
        }
        v14 += 2;
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 9)
    {
      v16 = (unint64_t)v8 >> 3;
      do
      {
        v17 = 0;
        v18 = *(_QWORD *)a1;
        v19 = a1;
        do
        {
          v20 = v19;
          v19 += 2 * v17 + 2;
          v21 = 2 * v17;
          v17 = (2 * v17) | 1;
          v22 = v21 + 2;
          if (v22 < v16 && *v19 < v19[2])
          {
            v19 += 2;
            v17 = v22;
          }
          *(_QWORD *)v20 = *(_QWORD *)v19;
        }
        while (v17 <= (uint64_t)((unint64_t)(v16 - 2) >> 1));
        v6 -= 2;
        if (v19 == v6)
        {
          *(_QWORD *)v19 = v18;
        }
        else
        {
          *(_QWORD *)v19 = *(_QWORD *)v6;
          *(_QWORD *)v6 = v18;
          sub_1B19E38C8((uint64_t)a1, (uint64_t)(v19 + 2), a4, ((char *)(v19 + 2) - (char *)a1) >> 3);
        }
      }
      while (v16-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t sub_1B19E37FC(uint64_t result, uint64_t a2, uint64_t a3, float *a4)
{
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  float *v8;
  uint64_t v9;
  float v10;
  int v11;
  float *v12;
  uint64_t v13;
  uint64_t v14;

  if (a3 >= 2)
  {
    v4 = (uint64_t)a4 - result;
    v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 3)
    {
      v6 = v4 >> 2;
      v7 = (v4 >> 2) + 1;
      v8 = (float *)(result + 8 * v7);
      v9 = v6 + 2;
      if (v9 < a3 && *v8 < v8[2])
      {
        v8 += 2;
        v7 = v9;
      }
      v10 = *a4;
      if (*v8 >= *a4)
      {
        v11 = *((_DWORD *)a4 + 1);
        do
        {
          v12 = a4;
          a4 = v8;
          *(_QWORD *)v12 = *(_QWORD *)v8;
          if (v5 < v7)
            break;
          v13 = 2 * v7;
          v7 = (2 * v7) | 1;
          v8 = (float *)(result + 8 * v7);
          v14 = v13 + 2;
          if (v14 < a3 && *v8 < v8[2])
          {
            v8 += 2;
            v7 = v14;
          }
        }
        while (*v8 >= v10);
        *a4 = v10;
        *((_DWORD *)a4 + 1) = v11;
      }
    }
  }
  return result;
}

uint64_t sub_1B19E38C8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  float v8;
  int v9;
  _QWORD *v10;

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v5 = v4 >> 1;
    v6 = (_QWORD *)(result + 8 * (v4 >> 1));
    v7 = (_QWORD *)(a2 - 8);
    v8 = *(float *)(a2 - 8);
    if (*(float *)v6 < v8)
    {
      v9 = *(_DWORD *)(a2 - 4);
      do
      {
        v10 = v7;
        v7 = v6;
        *v10 = *v6;
        if (!v5)
          break;
        v5 = (v5 - 1) >> 1;
        v6 = (_QWORD *)(result + 8 * v5);
      }
      while (*(float *)v6 < v8);
      *(float *)v7 = v8;
      *((_DWORD *)v7 + 1) = v9;
    }
  }
  return result;
}

BOOL sub_1B19E3928(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

uint64_t sub_1B19E3938()
{
  return sub_1B222A078();
}

uint64_t sub_1B19E395C()
{
  sub_1B222A06C();
  sub_1B222A078();
  return sub_1B222A0C0();
}

BOOL sub_1B19E39A0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1B19E3928(*a1, *a2);
}

uint64_t sub_1B19E39AC()
{
  return sub_1B19E395C();
}

uint64_t sub_1B19E39B4()
{
  return sub_1B19E3938();
}

uint64_t sub_1B19E39BC()
{
  sub_1B222A06C();
  sub_1B19E3938();
  return sub_1B222A0C0();
}

uint64_t sub_1B19E39F8()
{
  uint64_t v0;

  sub_1B19E3A28();
  sub_1B19E5A18(*(_QWORD *)(v0 + 40));

  return v0;
}

void sub_1B19E3A28()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(v0 + 40);
  *(_QWORD *)(v0 + 40) = 0;
  *(_QWORD *)(v0 + 48) = 0;
  sub_1B19E5A18(v1);
  objc_msgSend(*(id *)(v0 + 64), sel_invalidate);
  v2 = *(void **)(v0 + 64);
  *(_QWORD *)(v0 + 64) = 0;

}

uint64_t sub_1B19E3A5C()
{
  sub_1B19E39F8();
  return swift_deallocClassInstance();
}

BOOL sub_1B19E3A7C()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 64) == 0;
}

BOOL sub_1B19E3A8C()
{
  return sub_1B19E3A7C();
}

void sub_1B19E3AB0()
{
  sub_1B19E3A28();
}

uint64_t sub_1B19E3AD4()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for TimeThrottledInvocation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B19E5E34(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TimeThrottledInvocation);
}

void type metadata accessor for MTLColorWriteMask(uint64_t a1)
{
  sub_1B19E8474(a1, &qword_1EEF57B20);
}

void type metadata accessor for MTLPrimitiveTopologyClass(uint64_t a1)
{
  sub_1B19E8474(a1, &qword_1EEF57B28);
}

_QWORD *initializeBufferWithCopyOfBuffer for CommandQueue(_QWORD *result, _QWORD *a2)
{
  *result = *a2;
  return result;
}

void type metadata accessor for RGTextureReferenceDescriptor(uint64_t a1)
{
  sub_1B19E8474(a1, &qword_1EEF57B30);
}

void type metadata accessor for MTLVertexFormat(uint64_t a1)
{
  sub_1B19E8474(a1, (unint64_t *)&unk_1EEF57B38);
}

void type metadata accessor for OSLogType(uint64_t a1)
{
  sub_1B19E8474(a1, &qword_1ED4BF280);
}

void type metadata accessor for CFRunLoopSource(uint64_t a1)
{
  sub_1B19E8474(a1, &qword_1EEF57B48);
}

void type metadata accessor for CFRunLoop(uint64_t a1)
{
  sub_1B19E8474(a1, &qword_1EEF57B50);
}

void *sub_1B19E3BF4(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x2000uLL);
}

uint64_t sub_1B19E3BFC(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 0x2000))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_1B19E3C20(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 8184) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 4344) = 0u;
    *(_OWORD *)(result + 4328) = 0u;
    *(_OWORD *)(result + 4312) = 0u;
    *(_OWORD *)(result + 4296) = 0u;
    *(_OWORD *)(result + 4280) = 0u;
    *(_OWORD *)(result + 4264) = 0u;
    *(_OWORD *)(result + 4248) = 0u;
    *(_OWORD *)(result + 4232) = 0u;
    *(_OWORD *)(result + 4216) = 0u;
    *(_OWORD *)(result + 4200) = 0u;
    *(_OWORD *)(result + 4184) = 0u;
    *(_OWORD *)(result + 4168) = 0u;
    *(_OWORD *)(result + 4152) = 0u;
    *(_OWORD *)(result + 4136) = 0u;
    *(_OWORD *)(result + 4120) = 0u;
    *(_OWORD *)(result + 4104) = 0u;
    *(_OWORD *)(result + 4088) = 0u;
    *(_OWORD *)(result + 4072) = 0u;
    *(_OWORD *)(result + 4056) = 0u;
    *(_OWORD *)(result + 4040) = 0u;
    *(_OWORD *)(result + 4024) = 0u;
    *(_OWORD *)(result + 4008) = 0u;
    *(_OWORD *)(result + 3992) = 0u;
    *(_OWORD *)(result + 3976) = 0u;
    *(_OWORD *)(result + 3960) = 0u;
    *(_OWORD *)(result + 3944) = 0u;
    *(_OWORD *)(result + 3928) = 0u;
    *(_OWORD *)(result + 3912) = 0u;
    *(_OWORD *)(result + 3896) = 0u;
    *(_OWORD *)(result + 3880) = 0u;
    *(_OWORD *)(result + 3864) = 0u;
    *(_OWORD *)(result + 3848) = 0u;
    *(_OWORD *)(result + 3832) = 0u;
    *(_OWORD *)(result + 3816) = 0u;
    *(_OWORD *)(result + 3800) = 0u;
    *(_OWORD *)(result + 3784) = 0u;
    *(_OWORD *)(result + 3768) = 0u;
    *(_OWORD *)(result + 3752) = 0u;
    *(_OWORD *)(result + 3736) = 0u;
    *(_OWORD *)(result + 3720) = 0u;
    *(_OWORD *)(result + 3704) = 0u;
    *(_OWORD *)(result + 3688) = 0u;
    *(_OWORD *)(result + 3672) = 0u;
    *(_OWORD *)(result + 3656) = 0u;
    *(_OWORD *)(result + 3640) = 0u;
    *(_OWORD *)(result + 3624) = 0u;
    *(_OWORD *)(result + 3608) = 0u;
    *(_OWORD *)(result + 3592) = 0u;
    *(_OWORD *)(result + 3576) = 0u;
    *(_OWORD *)(result + 3560) = 0u;
    *(_OWORD *)(result + 3544) = 0u;
    *(_OWORD *)(result + 3528) = 0u;
    *(_OWORD *)(result + 3512) = 0u;
    *(_OWORD *)(result + 3496) = 0u;
    *(_OWORD *)(result + 3480) = 0u;
    *(_OWORD *)(result + 3464) = 0u;
    *(_OWORD *)(result + 3448) = 0u;
    *(_OWORD *)(result + 3432) = 0u;
    *(_OWORD *)(result + 3416) = 0u;
    *(_OWORD *)(result + 3400) = 0u;
    *(_OWORD *)(result + 3384) = 0u;
    *(_OWORD *)(result + 3368) = 0u;
    *(_OWORD *)(result + 3352) = 0u;
    *(_OWORD *)(result + 3336) = 0u;
    *(_OWORD *)(result + 3320) = 0u;
    *(_OWORD *)(result + 3304) = 0u;
    *(_OWORD *)(result + 3288) = 0u;
    *(_OWORD *)(result + 3272) = 0u;
    *(_OWORD *)(result + 3256) = 0u;
    *(_OWORD *)(result + 3240) = 0u;
    *(_OWORD *)(result + 3224) = 0u;
    *(_OWORD *)(result + 3208) = 0u;
    *(_OWORD *)(result + 3192) = 0u;
    *(_OWORD *)(result + 3176) = 0u;
    *(_OWORD *)(result + 3160) = 0u;
    *(_OWORD *)(result + 3144) = 0u;
    *(_OWORD *)(result + 3128) = 0u;
    *(_OWORD *)(result + 3112) = 0u;
    *(_OWORD *)(result + 3096) = 0u;
    *(_OWORD *)(result + 3080) = 0u;
    *(_OWORD *)(result + 3064) = 0u;
    *(_OWORD *)(result + 3048) = 0u;
    *(_OWORD *)(result + 3032) = 0u;
    *(_OWORD *)(result + 3016) = 0u;
    *(_OWORD *)(result + 3000) = 0u;
    *(_OWORD *)(result + 2984) = 0u;
    *(_OWORD *)(result + 2968) = 0u;
    *(_OWORD *)(result + 2952) = 0u;
    *(_OWORD *)(result + 2936) = 0u;
    *(_OWORD *)(result + 2920) = 0u;
    *(_OWORD *)(result + 2904) = 0u;
    *(_OWORD *)(result + 2888) = 0u;
    *(_OWORD *)(result + 2872) = 0u;
    *(_OWORD *)(result + 2856) = 0u;
    *(_OWORD *)(result + 2840) = 0u;
    *(_OWORD *)(result + 2824) = 0u;
    *(_OWORD *)(result + 2808) = 0u;
    *(_OWORD *)(result + 2792) = 0u;
    *(_OWORD *)(result + 2776) = 0u;
    *(_OWORD *)(result + 2760) = 0u;
    *(_OWORD *)(result + 2744) = 0u;
    *(_OWORD *)(result + 2728) = 0u;
    *(_OWORD *)(result + 2712) = 0u;
    *(_OWORD *)(result + 2696) = 0u;
    *(_OWORD *)(result + 2680) = 0u;
    *(_OWORD *)(result + 2664) = 0u;
    *(_OWORD *)(result + 2648) = 0u;
    *(_OWORD *)(result + 2632) = 0u;
    *(_OWORD *)(result + 2616) = 0u;
    *(_OWORD *)(result + 2600) = 0u;
    *(_OWORD *)(result + 2584) = 0u;
    *(_OWORD *)(result + 2568) = 0u;
    *(_OWORD *)(result + 2552) = 0u;
    *(_OWORD *)(result + 2536) = 0u;
    *(_OWORD *)(result + 2520) = 0u;
    *(_OWORD *)(result + 2504) = 0u;
    *(_OWORD *)(result + 2488) = 0u;
    *(_OWORD *)(result + 2472) = 0u;
    *(_OWORD *)(result + 2456) = 0u;
    *(_OWORD *)(result + 2440) = 0u;
    *(_OWORD *)(result + 2424) = 0u;
    *(_OWORD *)(result + 2408) = 0u;
    *(_OWORD *)(result + 2392) = 0u;
    *(_OWORD *)(result + 2376) = 0u;
    *(_OWORD *)(result + 2360) = 0u;
    *(_OWORD *)(result + 2344) = 0u;
    *(_OWORD *)(result + 2328) = 0u;
    *(_OWORD *)(result + 2312) = 0u;
    *(_OWORD *)(result + 2296) = 0u;
    *(_OWORD *)(result + 2280) = 0u;
    *(_OWORD *)(result + 2264) = 0u;
    *(_OWORD *)(result + 2248) = 0u;
    *(_OWORD *)(result + 2232) = 0u;
    *(_OWORD *)(result + 2216) = 0u;
    *(_OWORD *)(result + 2200) = 0u;
    *(_OWORD *)(result + 2184) = 0u;
    *(_OWORD *)(result + 2168) = 0u;
    *(_OWORD *)(result + 2152) = 0u;
    *(_OWORD *)(result + 2136) = 0u;
    *(_OWORD *)(result + 2120) = 0u;
    *(_OWORD *)(result + 2104) = 0u;
    *(_OWORD *)(result + 2088) = 0u;
    *(_OWORD *)(result + 2072) = 0u;
    *(_OWORD *)(result + 2056) = 0u;
    *(_OWORD *)(result + 2040) = 0u;
    *(_OWORD *)(result + 2024) = 0u;
    *(_OWORD *)(result + 2008) = 0u;
    *(_OWORD *)(result + 1992) = 0u;
    *(_OWORD *)(result + 1976) = 0u;
    *(_OWORD *)(result + 1960) = 0u;
    *(_OWORD *)(result + 1944) = 0u;
    *(_OWORD *)(result + 1928) = 0u;
    *(_OWORD *)(result + 1912) = 0u;
    *(_OWORD *)(result + 1896) = 0u;
    *(_OWORD *)(result + 1880) = 0u;
    *(_OWORD *)(result + 1864) = 0u;
    *(_OWORD *)(result + 1848) = 0u;
    *(_OWORD *)(result + 1832) = 0u;
    *(_OWORD *)(result + 1816) = 0u;
    *(_OWORD *)(result + 1800) = 0u;
    *(_OWORD *)(result + 1784) = 0u;
    *(_OWORD *)(result + 1768) = 0u;
    *(_OWORD *)(result + 1752) = 0u;
    *(_OWORD *)(result + 1736) = 0u;
    *(_OWORD *)(result + 1720) = 0u;
    *(_OWORD *)(result + 1704) = 0u;
    *(_OWORD *)(result + 1688) = 0u;
    *(_OWORD *)(result + 1672) = 0u;
    *(_OWORD *)(result + 1656) = 0u;
    *(_OWORD *)(result + 1640) = 0u;
    *(_OWORD *)(result + 1624) = 0u;
    *(_OWORD *)(result + 1608) = 0u;
    *(_OWORD *)(result + 1592) = 0u;
    *(_OWORD *)(result + 1576) = 0u;
    *(_OWORD *)(result + 1560) = 0u;
    *(_OWORD *)(result + 1544) = 0u;
    *(_OWORD *)(result + 1528) = 0u;
    *(_OWORD *)(result + 1512) = 0u;
    *(_OWORD *)(result + 1496) = 0u;
    *(_OWORD *)(result + 1480) = 0u;
    *(_OWORD *)(result + 1464) = 0u;
    *(_OWORD *)(result + 1448) = 0u;
    *(_OWORD *)(result + 1432) = 0u;
    *(_OWORD *)(result + 1416) = 0u;
    *(_OWORD *)(result + 1400) = 0u;
    *(_OWORD *)(result + 1384) = 0u;
    *(_OWORD *)(result + 1368) = 0u;
    *(_OWORD *)(result + 1352) = 0u;
    *(_OWORD *)(result + 1336) = 0u;
    *(_OWORD *)(result + 1320) = 0u;
    *(_OWORD *)(result + 1304) = 0u;
    *(_OWORD *)(result + 1288) = 0u;
    *(_OWORD *)(result + 1272) = 0u;
    *(_OWORD *)(result + 1256) = 0u;
    *(_OWORD *)(result + 1240) = 0u;
    *(_OWORD *)(result + 1224) = 0u;
    *(_OWORD *)(result + 1208) = 0u;
    *(_OWORD *)(result + 1192) = 0u;
    *(_OWORD *)(result + 1176) = 0u;
    *(_OWORD *)(result + 1160) = 0u;
    *(_OWORD *)(result + 1144) = 0u;
    *(_OWORD *)(result + 1128) = 0u;
    *(_OWORD *)(result + 1112) = 0u;
    *(_OWORD *)(result + 1096) = 0u;
    *(_OWORD *)(result + 1080) = 0u;
    *(_OWORD *)(result + 1064) = 0u;
    *(_OWORD *)(result + 1048) = 0u;
    *(_OWORD *)(result + 1032) = 0u;
    *(_OWORD *)(result + 1016) = 0u;
    *(_OWORD *)(result + 1000) = 0u;
    *(_OWORD *)(result + 984) = 0u;
    *(_OWORD *)(result + 968) = 0u;
    *(_OWORD *)(result + 952) = 0u;
    *(_OWORD *)(result + 936) = 0u;
    *(_OWORD *)(result + 920) = 0u;
    *(_OWORD *)(result + 904) = 0u;
    *(_OWORD *)(result + 888) = 0u;
    *(_OWORD *)(result + 872) = 0u;
    *(_OWORD *)(result + 856) = 0u;
    *(_OWORD *)(result + 840) = 0u;
    *(_OWORD *)(result + 824) = 0u;
    *(_OWORD *)(result + 808) = 0u;
    *(_OWORD *)(result + 792) = 0u;
    *(_OWORD *)(result + 776) = 0u;
    *(_OWORD *)(result + 760) = 0u;
    *(_OWORD *)(result + 744) = 0u;
    *(_OWORD *)(result + 728) = 0u;
    *(_OWORD *)(result + 712) = 0u;
    *(_OWORD *)(result + 696) = 0u;
    *(_OWORD *)(result + 680) = 0u;
    *(_OWORD *)(result + 664) = 0u;
    *(_OWORD *)(result + 648) = 0u;
    *(_OWORD *)(result + 536) = 0u;
    *(_OWORD *)(result + 632) = 0u;
    *(_OWORD *)(result + 616) = 0u;
    *(_OWORD *)(result + 600) = 0u;
    *(_OWORD *)(result + 584) = 0u;
    *(_OWORD *)(result + 568) = 0u;
    *(_OWORD *)(result + 552) = 0u;
    *(_OWORD *)(result + 520) = 0u;
    *(_OWORD *)(result + 504) = 0u;
    *(_OWORD *)(result + 488) = 0u;
    *(_OWORD *)(result + 472) = 0u;
    *(_OWORD *)(result + 456) = 0u;
    *(_OWORD *)(result + 440) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_OWORD *)(result + 8168) = 0u;
    *(_OWORD *)(result + 8152) = 0u;
    *(_OWORD *)(result + 8136) = 0u;
    *(_OWORD *)(result + 8120) = 0u;
    *(_OWORD *)(result + 8104) = 0u;
    *(_OWORD *)(result + 8088) = 0u;
    *(_OWORD *)(result + 8072) = 0u;
    *(_OWORD *)(result + 8056) = 0u;
    *(_OWORD *)(result + 8040) = 0u;
    *(_OWORD *)(result + 8024) = 0u;
    *(_OWORD *)(result + 8008) = 0u;
    *(_OWORD *)(result + 7992) = 0u;
    *(_OWORD *)(result + 7976) = 0u;
    *(_OWORD *)(result + 7960) = 0u;
    *(_OWORD *)(result + 7944) = 0u;
    *(_OWORD *)(result + 7928) = 0u;
    *(_OWORD *)(result + 7912) = 0u;
    *(_OWORD *)(result + 7896) = 0u;
    *(_OWORD *)(result + 7880) = 0u;
    *(_OWORD *)(result + 7864) = 0u;
    *(_OWORD *)(result + 7848) = 0u;
    *(_OWORD *)(result + 7832) = 0u;
    *(_OWORD *)(result + 7816) = 0u;
    *(_OWORD *)(result + 7800) = 0u;
    *(_OWORD *)(result + 7784) = 0u;
    *(_OWORD *)(result + 7768) = 0u;
    *(_OWORD *)(result + 7752) = 0u;
    *(_OWORD *)(result + 7736) = 0u;
    *(_OWORD *)(result + 7720) = 0u;
    *(_OWORD *)(result + 7704) = 0u;
    *(_OWORD *)(result + 7688) = 0u;
    *(_OWORD *)(result + 7672) = 0u;
    *(_OWORD *)(result + 7656) = 0u;
    *(_OWORD *)(result + 7640) = 0u;
    *(_OWORD *)(result + 7624) = 0u;
    *(_OWORD *)(result + 7608) = 0u;
    *(_OWORD *)(result + 7592) = 0u;
    *(_OWORD *)(result + 7576) = 0u;
    *(_OWORD *)(result + 7560) = 0u;
    *(_OWORD *)(result + 7544) = 0u;
    *(_OWORD *)(result + 7528) = 0u;
    *(_OWORD *)(result + 7512) = 0u;
    *(_OWORD *)(result + 7496) = 0u;
    *(_OWORD *)(result + 7480) = 0u;
    *(_OWORD *)(result + 7464) = 0u;
    *(_OWORD *)(result + 7448) = 0u;
    *(_OWORD *)(result + 7432) = 0u;
    *(_OWORD *)(result + 7416) = 0u;
    *(_OWORD *)(result + 7400) = 0u;
    *(_OWORD *)(result + 7384) = 0u;
    *(_OWORD *)(result + 7368) = 0u;
    *(_OWORD *)(result + 7352) = 0u;
    *(_OWORD *)(result + 7336) = 0u;
    *(_OWORD *)(result + 7320) = 0u;
    *(_OWORD *)(result + 7304) = 0u;
    *(_OWORD *)(result + 7288) = 0u;
    *(_OWORD *)(result + 7272) = 0u;
    *(_OWORD *)(result + 7256) = 0u;
    *(_OWORD *)(result + 7240) = 0u;
    *(_OWORD *)(result + 7224) = 0u;
    *(_OWORD *)(result + 7208) = 0u;
    *(_OWORD *)(result + 7192) = 0u;
    *(_OWORD *)(result + 7176) = 0u;
    *(_OWORD *)(result + 7160) = 0u;
    *(_OWORD *)(result + 7144) = 0u;
    *(_OWORD *)(result + 7128) = 0u;
    *(_OWORD *)(result + 7112) = 0u;
    *(_OWORD *)(result + 7096) = 0u;
    *(_OWORD *)(result + 7080) = 0u;
    *(_OWORD *)(result + 7064) = 0u;
    *(_OWORD *)(result + 7048) = 0u;
    *(_OWORD *)(result + 7032) = 0u;
    *(_OWORD *)(result + 7016) = 0u;
    *(_OWORD *)(result + 7000) = 0u;
    *(_OWORD *)(result + 6984) = 0u;
    *(_OWORD *)(result + 6968) = 0u;
    *(_OWORD *)(result + 6952) = 0u;
    *(_OWORD *)(result + 6936) = 0u;
    *(_OWORD *)(result + 6920) = 0u;
    *(_OWORD *)(result + 6904) = 0u;
    *(_OWORD *)(result + 6888) = 0u;
    *(_OWORD *)(result + 6872) = 0u;
    *(_OWORD *)(result + 6856) = 0u;
    *(_OWORD *)(result + 6840) = 0u;
    *(_OWORD *)(result + 6824) = 0u;
    *(_OWORD *)(result + 6808) = 0u;
    *(_OWORD *)(result + 6792) = 0u;
    *(_OWORD *)(result + 6776) = 0u;
    *(_OWORD *)(result + 6760) = 0u;
    *(_OWORD *)(result + 6744) = 0u;
    *(_OWORD *)(result + 6728) = 0u;
    *(_OWORD *)(result + 6712) = 0u;
    *(_OWORD *)(result + 6696) = 0u;
    *(_OWORD *)(result + 6680) = 0u;
    *(_OWORD *)(result + 6664) = 0u;
    *(_OWORD *)(result + 6648) = 0u;
    *(_OWORD *)(result + 6632) = 0u;
    *(_OWORD *)(result + 6616) = 0u;
    *(_OWORD *)(result + 6600) = 0u;
    *(_OWORD *)(result + 6584) = 0u;
    *(_OWORD *)(result + 6568) = 0u;
    *(_OWORD *)(result + 6552) = 0u;
    *(_OWORD *)(result + 6536) = 0u;
    *(_OWORD *)(result + 6520) = 0u;
    *(_OWORD *)(result + 6504) = 0u;
    *(_OWORD *)(result + 6488) = 0u;
    *(_OWORD *)(result + 6472) = 0u;
    *(_OWORD *)(result + 6456) = 0u;
    *(_OWORD *)(result + 6440) = 0u;
    *(_OWORD *)(result + 6424) = 0u;
    *(_OWORD *)(result + 6408) = 0u;
    *(_OWORD *)(result + 6392) = 0u;
    *(_OWORD *)(result + 6376) = 0u;
    *(_OWORD *)(result + 6360) = 0u;
    *(_OWORD *)(result + 6344) = 0u;
    *(_OWORD *)(result + 6328) = 0u;
    *(_OWORD *)(result + 6312) = 0u;
    *(_OWORD *)(result + 6296) = 0u;
    *(_OWORD *)(result + 6280) = 0u;
    *(_OWORD *)(result + 6264) = 0u;
    *(_OWORD *)(result + 6248) = 0u;
    *(_OWORD *)(result + 6232) = 0u;
    *(_OWORD *)(result + 6216) = 0u;
    *(_OWORD *)(result + 6200) = 0u;
    *(_OWORD *)(result + 6184) = 0u;
    *(_OWORD *)(result + 6168) = 0u;
    *(_OWORD *)(result + 6152) = 0u;
    *(_OWORD *)(result + 6136) = 0u;
    *(_OWORD *)(result + 6120) = 0u;
    *(_OWORD *)(result + 6104) = 0u;
    *(_OWORD *)(result + 6088) = 0u;
    *(_OWORD *)(result + 6072) = 0u;
    *(_OWORD *)(result + 6056) = 0u;
    *(_OWORD *)(result + 6040) = 0u;
    *(_OWORD *)(result + 6024) = 0u;
    *(_OWORD *)(result + 6008) = 0u;
    *(_OWORD *)(result + 5992) = 0u;
    *(_OWORD *)(result + 5976) = 0u;
    *(_OWORD *)(result + 5960) = 0u;
    *(_OWORD *)(result + 5944) = 0u;
    *(_OWORD *)(result + 5928) = 0u;
    *(_OWORD *)(result + 5912) = 0u;
    *(_OWORD *)(result + 5896) = 0u;
    *(_OWORD *)(result + 5880) = 0u;
    *(_OWORD *)(result + 5864) = 0u;
    *(_OWORD *)(result + 5848) = 0u;
    *(_OWORD *)(result + 5832) = 0u;
    *(_OWORD *)(result + 5816) = 0u;
    *(_OWORD *)(result + 5800) = 0u;
    *(_OWORD *)(result + 5784) = 0u;
    *(_OWORD *)(result + 5768) = 0u;
    *(_OWORD *)(result + 5752) = 0u;
    *(_OWORD *)(result + 5736) = 0u;
    *(_OWORD *)(result + 5720) = 0u;
    *(_OWORD *)(result + 5704) = 0u;
    *(_OWORD *)(result + 5688) = 0u;
    *(_OWORD *)(result + 5672) = 0u;
    *(_OWORD *)(result + 5656) = 0u;
    *(_OWORD *)(result + 5640) = 0u;
    *(_OWORD *)(result + 5624) = 0u;
    *(_OWORD *)(result + 5608) = 0u;
    *(_OWORD *)(result + 5592) = 0u;
    *(_OWORD *)(result + 5576) = 0u;
    *(_OWORD *)(result + 5560) = 0u;
    *(_OWORD *)(result + 5544) = 0u;
    *(_OWORD *)(result + 5528) = 0u;
    *(_OWORD *)(result + 5512) = 0u;
    *(_OWORD *)(result + 5496) = 0u;
    *(_OWORD *)(result + 5480) = 0u;
    *(_OWORD *)(result + 5464) = 0u;
    *(_OWORD *)(result + 5448) = 0u;
    *(_OWORD *)(result + 5432) = 0u;
    *(_OWORD *)(result + 5416) = 0u;
    *(_OWORD *)(result + 5400) = 0u;
    *(_OWORD *)(result + 5384) = 0u;
    *(_OWORD *)(result + 5368) = 0u;
    *(_OWORD *)(result + 5352) = 0u;
    *(_OWORD *)(result + 5336) = 0u;
    *(_OWORD *)(result + 5320) = 0u;
    *(_OWORD *)(result + 5304) = 0u;
    *(_OWORD *)(result + 5288) = 0u;
    *(_OWORD *)(result + 5272) = 0u;
    *(_OWORD *)(result + 5256) = 0u;
    *(_OWORD *)(result + 5240) = 0u;
    *(_OWORD *)(result + 5224) = 0u;
    *(_OWORD *)(result + 5208) = 0u;
    *(_OWORD *)(result + 5192) = 0u;
    *(_OWORD *)(result + 5176) = 0u;
    *(_OWORD *)(result + 5160) = 0u;
    *(_OWORD *)(result + 5144) = 0u;
    *(_OWORD *)(result + 5128) = 0u;
    *(_OWORD *)(result + 5112) = 0u;
    *(_OWORD *)(result + 5096) = 0u;
    *(_OWORD *)(result + 5080) = 0u;
    *(_OWORD *)(result + 5064) = 0u;
    *(_OWORD *)(result + 5048) = 0u;
    *(_OWORD *)(result + 5032) = 0u;
    *(_OWORD *)(result + 5016) = 0u;
    *(_OWORD *)(result + 5000) = 0u;
    *(_OWORD *)(result + 4984) = 0u;
    *(_OWORD *)(result + 4968) = 0u;
    *(_OWORD *)(result + 4952) = 0u;
    *(_OWORD *)(result + 4936) = 0u;
    *(_OWORD *)(result + 4920) = 0u;
    *(_OWORD *)(result + 4904) = 0u;
    *(_OWORD *)(result + 4888) = 0u;
    *(_OWORD *)(result + 4872) = 0u;
    *(_OWORD *)(result + 4856) = 0u;
    *(_OWORD *)(result + 4840) = 0u;
    *(_OWORD *)(result + 4824) = 0u;
    *(_OWORD *)(result + 4808) = 0u;
    *(_OWORD *)(result + 4792) = 0u;
    *(_OWORD *)(result + 4776) = 0u;
    *(_OWORD *)(result + 4760) = 0u;
    *(_OWORD *)(result + 4744) = 0u;
    *(_OWORD *)(result + 4728) = 0u;
    *(_OWORD *)(result + 4712) = 0u;
    *(_OWORD *)(result + 4696) = 0u;
    *(_OWORD *)(result + 4680) = 0u;
    *(_OWORD *)(result + 4664) = 0u;
    *(_OWORD *)(result + 4648) = 0u;
    *(_OWORD *)(result + 4632) = 0u;
    *(_OWORD *)(result + 4616) = 0u;
    *(_OWORD *)(result + 4600) = 0u;
    *(_OWORD *)(result + 4584) = 0u;
    *(_OWORD *)(result + 4568) = 0u;
    *(_OWORD *)(result + 4552) = 0u;
    *(_OWORD *)(result + 4536) = 0u;
    *(_OWORD *)(result + 4520) = 0u;
    *(_OWORD *)(result + 4504) = 0u;
    *(_OWORD *)(result + 4488) = 0u;
    *(_OWORD *)(result + 4472) = 0u;
    *(_OWORD *)(result + 4456) = 0u;
    *(_OWORD *)(result + 4440) = 0u;
    *(_OWORD *)(result + 4424) = 0u;
    *(_OWORD *)(result + 4408) = 0u;
    *(_OWORD *)(result + 4392) = 0u;
    *(_OWORD *)(result + 4376) = 0u;
    *(_OWORD *)(result + 4360) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 0x2000) = v3;
  return result;
}

void type metadata accessor for _opaque_pthread_t(uint64_t a1)
{
  sub_1B19E8474(a1, (unint64_t *)&unk_1EEF57B58);
}

__n128 initializeWithCopy for WorldTransform(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

void type metadata accessor for simd_float4x4(uint64_t a1)
{
  sub_1B19E8474(a1, (unint64_t *)&unk_1ED4BA6D0);
}

void type metadata accessor for MTLDepthClipMode(uint64_t a1)
{
  sub_1B19E8474(a1, &qword_1EEF57B68);
}

void type metadata accessor for MTLTriangleFillMode(uint64_t a1)
{
  sub_1B19E8474(a1, &qword_1EEF57B70);
}

void type metadata accessor for MTLIndexType(uint64_t a1)
{
  sub_1B19E8474(a1, &qword_1EEF57B78);
}

void type metadata accessor for MTLPrimitiveType(uint64_t a1)
{
  sub_1B19E8474(a1, &qword_1EEF57B80);
}

void type metadata accessor for RGBuilder(uint64_t a1)
{
  sub_1B19E8474(a1, &qword_1EEF57B88);
}

void type metadata accessor for RGContext(uint64_t a1)
{
  sub_1B19E8474(a1, &qword_1EEF57B90);
}

void type metadata accessor for vfx_counters(uint64_t a1)
{
  sub_1B19E8474(a1, &qword_1EEF57B98);
}

__n128 initializeWithCopy for TextureCPURuntime.Slice(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t storeEnumTagSinglePayload for TextureCPURuntime.Slice(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 64) = v3;
  return result;
}

void type metadata accessor for _opaque_pthread_mutex_t(uint64_t a1)
{
  sub_1B19E8474(a1, &qword_1EEF57BA0);
}

void type metadata accessor for CFXWorld(uint64_t a1)
{
  sub_1B19E8474(a1, &qword_1EEF57BA8);
}

void type metadata accessor for IOSurfaceRef(uint64_t a1)
{
  sub_1B19E8474(a1, &qword_1EEF57BB0);
}

void type metadata accessor for CMSampleBuffer(uint64_t a1)
{
  sub_1B19E8474(a1, &qword_1EEF57BB8);
}

void type metadata accessor for CVMetalTextureCache(uint64_t a1)
{
  sub_1B19E8474(a1, &qword_1EEF57BC0);
}

__n128 initializeBufferWithCopyOfBuffer for RenderGraph.Features(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

void type metadata accessor for CMTime(uint64_t a1)
{
  sub_1B19E8474(a1, &qword_1EEF57BC8);
}

__n128 initializeBufferWithCopyOfBuffer for UnsafeFixedBitSet(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

void type metadata accessor for CGSize(uint64_t a1)
{
  sub_1B19E8474(a1, &qword_1EEF57BD0);
}

void type metadata accessor for MTLLoadAction(uint64_t a1)
{
  sub_1B19E8474(a1, qword_1EEF57BD8);
}

__n128 _s15RelationStorageVwtk(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t sub_1B19E46F4(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 24))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 20);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t sub_1B19E4748(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 24) = 0;
    if (a2)
      *(_BYTE *)(result + 20) = a2 + 1;
  }
  return result;
}

void type metadata accessor for vfx_memory_entry_t(uint64_t a1)
{
  sub_1B19E8474(a1, &qword_1ED4BA7A0);
}

void type metadata accessor for simd_quatf(uint64_t a1)
{
  sub_1B19E8474(a1, &qword_1ED4BA618);
}

uint64_t sub_1B19E47B4()
{
  return swift_allocateGenericValueMetadata();
}

_BYTE *initializeBufferWithCopyOfBuffer for DirtyReadPolicy(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for TextureCache.StorageKind(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = v6 - 2;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t sub_1B19E4858(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1B19E48A4 + 4 * byte_1B2269095[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1B19E48D8 + 4 * byte_1B2269090[v4]))();
}

uint64_t sub_1B19E48D8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B19E48E0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B19E48E8);
  return result;
}

uint64_t sub_1B19E48F4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B19E48FCLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1B19E4900(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B19E4908(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B19E4914(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_1B19E491C(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

uint64_t type metadata accessor for TimeThrottledInvocation.Variant(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B19E5E34(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TimeThrottledInvocation.Variant);
}

_DWORD *initializeBufferWithCopyOfBuffer for AudioAnalyzer(_DWORD *result, _DWORD *a2)
{
  *result = *a2;
  return result;
}

uint64_t storeEnumTagSinglePayload for QueryHeader.Field(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_DWORD *)result = a2 - 1;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 4) = v3;
  return result;
}

void type metadata accessor for MTLTextureSwizzleChannels(uint64_t a1)
{
  sub_1B19E8474(a1, &qword_1EEF57C60);
}

void type metadata accessor for MTLHazardTrackingMode(uint64_t a1)
{
  sub_1B19E8474(a1, (unint64_t *)&unk_1EEF57C68);
}

void type metadata accessor for MTLWinding(uint64_t a1)
{
  sub_1B19E8474(a1, &qword_1ED4BA610);
}

void type metadata accessor for MTLCPUCacheMode(uint64_t a1)
{
  sub_1B19E8474(a1, &qword_1EEF57C78);
}

void type metadata accessor for MTLTextureUsage(uint64_t a1)
{
  sub_1B19E8474(a1, (unint64_t *)&unk_1EEF57C80);
}

void type metadata accessor for MTLStorageMode(uint64_t a1)
{
  sub_1B19E8474(a1, (unint64_t *)&unk_1ED4BA708);
}

void type metadata accessor for MTLResourceOptions(uint64_t a1)
{
  sub_1B19E8474(a1, (unint64_t *)&unk_1EEF57C90);
}

void type metadata accessor for MTLTextureType(uint64_t a1)
{
  sub_1B19E8474(a1, (unint64_t *)&unk_1ED4BA728);
}

__n128 _s17CodeSourceSnippetC9ParameterVwtk(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for RotateAction(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for RotateAction(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 32) = v3;
  return result;
}

void type metadata accessor for MTLClearColor(uint64_t a1)
{
  sub_1B19E8474(a1, (unint64_t *)&unk_1EEF57CA0);
}

void type metadata accessor for MTLDataType(uint64_t a1)
{
  sub_1B19E8474(a1, &qword_1ED4BA648);
}

__n128 initializeWithCopy for Float3x3Coder(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

void type metadata accessor for external_entity_constants(uint64_t a1)
{
  sub_1B19E8474(a1, &qword_1EEF57CB0);
}

void type metadata accessor for external_scene_buffers(uint64_t a1)
{
  sub_1B19E8474(a1, &qword_1EEF57CB8);
}

void type metadata accessor for external_scene_constants(uint64_t a1)
{
  sub_1B19E8474(a1, &qword_1EEF57CC0);
}

_QWORD *initializeBufferWithCopyOfBuffer for Entity(_QWORD *result, _QWORD *a2)
{
  *result = *a2;
  return result;
}

void type metadata accessor for global_constants(uint64_t a1)
{
  sub_1B19E8474(a1, &qword_1EEF57CC8);
}

void type metadata accessor for VFXTriggerType(uint64_t a1)
{
  sub_1B19E8474(a1, (unint64_t *)&unk_1EEF57CD0);
}

void type metadata accessor for VFXCameraToneMappingMode(uint64_t a1)
{
  sub_1B19E8474(a1, &qword_1ED4BB418);
}

void type metadata accessor for VFXCameraLensBlurFilterQuality(uint64_t a1)
{
  sub_1B19E8474(a1, &qword_1EEF57CE0);
}

void type metadata accessor for VFXCameraFillMode(uint64_t a1)
{
  sub_1B19E8474(a1, &qword_1EEF57CE8);
}

void type metadata accessor for VFXCameraProjectionDirection(uint64_t a1)
{
  sub_1B19E8474(a1, &qword_1ED4BB460);
}

void type metadata accessor for VFXForceFieldType(uint64_t a1)
{
  sub_1B19E8474(a1, &qword_1ED4BA788);
}

void type metadata accessor for MTLCompareFunction(uint64_t a1)
{
  sub_1B19E8474(a1, (unint64_t *)&unk_1ED4BA790);
}

void type metadata accessor for MTLCullMode(uint64_t a1)
{
  sub_1B19E8474(a1, &qword_1ED4BA628);
}

void type metadata accessor for ForceFieldCullMode(uint64_t a1)
{
  sub_1B19E8474(a1, &qword_1EEF57CF0);
}

void type metadata accessor for ForceFieldShape(uint64_t a1)
{
  sub_1B19E8474(a1, &qword_1EEF57CF8);
}

void type metadata accessor for ForceFieldScope(uint64_t a1)
{
  sub_1B19E8474(a1, &qword_1EEF57D00);
}

void type metadata accessor for ForceFieldType(uint64_t a1)
{
  sub_1B19E8474(a1, (unint64_t *)&unk_1EEF57D08);
}

void type metadata accessor for MTLPixelFormat(uint64_t a1)
{
  sub_1B19E8474(a1, &qword_1ED4BA700);
}

__n128 initializeWithTake for BufferPool.PaddedConstantBuffer(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v4;
  return result;
}

uint64_t sub_1B19E4C18(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 96))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 72);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t sub_1B19E4C74(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 96) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 96) = 0;
    if (a2)
      *(_QWORD *)(result + 72) = a2;
  }
  return result;
}

void type metadata accessor for __vfx_sampler3d(uint64_t a1)
{
  sub_1B19E8474(a1, (unint64_t *)&unk_1ED4BA768);
}

__n128 initializeWithTake for ComputePipelineDescriptor(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t sub_1B19E4D10(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 56))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 40);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t sub_1B19E4D6C(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 56) = 0;
    if (a2)
      *(_QWORD *)(result + 40) = a2;
  }
  return result;
}

void type metadata accessor for __vfx_sampler2d(uint64_t a1)
{
  sub_1B19E8474(a1, &qword_1ED4BA760);
}

void type metadata accessor for MTLTextureSwizzle(uint64_t a1)
{
  sub_1B19E8474(a1, &qword_1EEF57D18);
}

uint64_t sub_1B19E4DF4()
{
  return sub_1B19E52CC(&qword_1EEF57EA0, (uint64_t (*)(uint64_t))type metadata accessor for MTLPixelFormat, (uint64_t)&unk_1B226976C);
}

uint64_t sub_1B19E4E20(uint64_t a1, uint64_t a2)
{
  return sub_1B19E7B60(a1, a2, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1940]);
}

uint64_t sub_1B19E4E38(uint64_t a1, uint64_t a2)
{
  return sub_1B19E7B60(a1, a2, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEA950]);
}

void sub_1B19E4E4C(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t sub_1B19E4E54()
{
  return sub_1B2229358();
}

uint64_t sub_1B19E4E6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x1B5E23E74](&unk_1B226C544, a3);
  return sub_1B2228290();
}

uint64_t sub_1B19E4EBC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = sub_1B222874C();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_1B19E4EE4()
{
  sub_1B19E52CC(&qword_1EEF584F8, (uint64_t (*)(uint64_t))type metadata accessor for MTLLibraryError, (uint64_t)&unk_1B226B730);
  return sub_1B2229FDC();
}

uint64_t sub_1B19E4F24()
{
  sub_1B19E52CC(&qword_1EEF584F8, (uint64_t (*)(uint64_t))type metadata accessor for MTLLibraryError, (uint64_t)&unk_1B226B730);
  return sub_1B2229FD0();
}

uint64_t sub_1B19E4F68()
{
  sub_1B19E52CC((unint64_t *)&qword_1EEF58530, (uint64_t (*)(uint64_t))type metadata accessor for MTLLibraryError, (uint64_t)&unk_1B226C5B0);
  return sub_1B2227F54();
}

id sub_1B19E4FA8()
{
  id *v0;

  return *v0;
}

uint64_t sub_1B19E4FB0@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

_QWORD *sub_1B19E4FB8@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 | *result;
  return result;
}

_QWORD *sub_1B19E4FCC@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 & *result;
  return result;
}

_QWORD *sub_1B19E4FE0@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 ^ *result;
  return result;
}

BOOL sub_1B19E4FF4(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = *v2 & *a2;
  if (v4 != *a2)
    *v2 |= v3;
  *a1 = v3;
  return v4 != v3;
}

_QWORD *sub_1B19E5024@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;

  v3 = *v2 & *result;
  if (v3)
    *v2 &= ~*result;
  *(_QWORD *)a2 = v3;
  *(_BYTE *)(a2 + 8) = v3 == 0;
  return result;
}

uint64_t *sub_1B19E5050@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *result;
  v4 = *v2;
  *v2 |= *result;
  v5 = v4 & v3;
  *(_QWORD *)a2 = v5;
  *(_BYTE *)(a2 + 8) = v5 == 0;
  return result;
}

_QWORD *sub_1B19E5074(_QWORD *result)
{
  _QWORD *v1;

  *v1 |= *result;
  return result;
}

_QWORD *sub_1B19E5088(_QWORD *result)
{
  _QWORD *v1;

  *v1 &= *result;
  return result;
}

_QWORD *sub_1B19E509C(_QWORD *result)
{
  _QWORD *v1;

  *v1 ^= *result;
  return result;
}

_QWORD *sub_1B19E50B0@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 & ~*result;
  return result;
}

BOOL sub_1B19E50C4(_QWORD *a1)
{
  _QWORD *v1;

  return (*v1 & ~*a1) == 0;
}

BOOL sub_1B19E50D8(_QWORD *a1)
{
  _QWORD *v1;

  return (*v1 & *a1) == 0;
}

BOOL sub_1B19E50EC(_QWORD *a1)
{
  _QWORD *v1;

  return (*a1 & ~*v1) == 0;
}

BOOL sub_1B19E5100()
{
  _QWORD *v0;

  return *v0 == 0;
}

_QWORD *sub_1B19E5110(_QWORD *result)
{
  _QWORD *v1;

  *v1 &= ~*result;
  return result;
}

_QWORD *sub_1B19E5124@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

BOOL sub_1B19E5130(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void sub_1B19E5144(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

BOOL sub_1B19E5150(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

uint64_t sub_1B19E5170(uint64_t a1, id *a2)
{
  uint64_t result;

  result = sub_1B2228734();
  *a2 = 0;
  return result;
}

uint64_t sub_1B19E51E4(uint64_t a1, id *a2)
{
  char v3;

  v3 = sub_1B2228740();
  *a2 = 0;
  return v3 & 1;
}

uint64_t sub_1B19E5260@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  sub_1B222874C();
  v2 = sub_1B2228728();
  result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_1B19E52A0()
{
  return sub_1B19E52CC(&qword_1EEF57EA8, (uint64_t (*)(uint64_t))type metadata accessor for MTLCompareFunction, (uint64_t)&unk_1B22699B0);
}

uint64_t sub_1B19E52CC(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = MEMORY[0x1B5E23E74](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1B19E530C()
{
  return sub_1B222A078();
}

_QWORD *sub_1B19E5334@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *result;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

void sub_1B19E5344(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
}

uint64_t sub_1B19E5350()
{
  sub_1B222A06C();
  sub_1B222A078();
  return sub_1B222A0C0();
}

uint64_t sub_1B19E5394()
{
  sub_1B222A06C();
  sub_1B222A078();
  return sub_1B222A0C0();
}

uint64_t sub_1B19E53D8()
{
  return sub_1B222874C();
}

uint64_t sub_1B19E53E8()
{
  sub_1B19E52CC((unint64_t *)&qword_1EEF58530, (uint64_t (*)(uint64_t))type metadata accessor for MTLLibraryError, (uint64_t)&unk_1B226C5B0);
  return sub_1B2227F9C();
}

uint64_t sub_1B19E5428()
{
  sub_1B19E52CC((unint64_t *)&qword_1EEF58530, (uint64_t (*)(uint64_t))type metadata accessor for MTLLibraryError, (uint64_t)&unk_1B226C5B0);
  return sub_1B2227F6C();
}

uint64_t sub_1B19E5468(void *a1)
{
  id v2;

  sub_1B19E52CC((unint64_t *)&qword_1EEF58530, (uint64_t (*)(uint64_t))type metadata accessor for MTLLibraryError, (uint64_t)&unk_1B226C5B0);
  v2 = a1;
  return sub_1B2227F60();
}

uint64_t sub_1B19E54CC()
{
  id *v0;
  id v1;
  uint64_t v2;

  v1 = *v0;
  v2 = sub_1B2229034();

  return v2;
}

uint64_t sub_1B19E5500()
{
  sub_1B19E52CC((unint64_t *)&qword_1EEF58530, (uint64_t (*)(uint64_t))type metadata accessor for MTLLibraryError, (uint64_t)&unk_1B226C5B0);
  return sub_1B2227F90();
}

uint64_t sub_1B19E5550()
{
  sub_1B222A06C();
  sub_1B22285E4();
  return sub_1B222A0C0();
}

uint64_t sub_1B19E55AC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    v4 = 0;
    v5 = (uint64_t *)(a1 + 32);
    do
    {
      v7 = *v5++;
      v6 = v7;
      if ((v7 & ~v4) == 0)
        v6 = 0;
      v4 |= v6;
      --v3;
    }
    while (v3);
  }
  else
  {
    v4 = 0;
  }
  result = swift_bridgeObjectRelease();
  *a2 = v4;
  return result;
}

unsigned __int8 *sub_1B19E5600@<X0>(unsigned __int8 *result@<X0>, _WORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void sub_1B19E5610(_DWORD *a1@<X8>)
{
  _DWORD *v1;

  *a1 = *v1;
}

_DWORD *sub_1B19E561C@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = *result;
  *(_BYTE *)(a2 + 4) = 0;
  return result;
}

BOOL sub_1B19E562C(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

uint64_t sub_1B19E5640()
{
  sub_1B19E52CC(&qword_1EEF58070, (uint64_t (*)(uint64_t))type metadata accessor for VFXTriggerType, (uint64_t)&unk_1B2269BC0);
  sub_1B19E52CC(&qword_1EEF58078, (uint64_t (*)(uint64_t))type metadata accessor for VFXTriggerType, (uint64_t)&unk_1B2269B68);
  return sub_1B2229718();
}

uint64_t sub_1B19E56C4()
{
  return sub_1B19E52CC(&qword_1EEF57EB0, (uint64_t (*)(uint64_t))type metadata accessor for VFXTriggerType, (uint64_t)&unk_1B2269B30);
}

uint64_t sub_1B19E56F0()
{
  return sub_1B19E52CC(&qword_1EEF57EB8, (uint64_t (*)(uint64_t))type metadata accessor for VFXTriggerType, (uint64_t)&unk_1B2269B08);
}

uint64_t sub_1B19E571C()
{
  return sub_1B19E52CC(&qword_1EEF57EC0, (uint64_t (*)(uint64_t))type metadata accessor for VFXTriggerType, (uint64_t)&unk_1B2269B98);
}

uint64_t sub_1B19E5748()
{
  return sub_1B19E52CC(&qword_1EEF57EC8, (uint64_t (*)(uint64_t))type metadata accessor for MTLDataType, (uint64_t)&unk_1B2269C8C);
}

uint64_t sub_1B19E5774()
{
  return sub_1B19E52CC(&qword_1EEF57ED0, (uint64_t (*)(uint64_t))type metadata accessor for MTLTextureType, (uint64_t)&unk_1B2269D38);
}

uint64_t sub_1B19E57A0()
{
  return sub_1B19E52CC(&qword_1EEF57ED8, (uint64_t (*)(uint64_t))type metadata accessor for MTLResourceOptions, (uint64_t)&unk_1B2269DD4);
}

uint64_t sub_1B19E57CC()
{
  return sub_1B19E52CC(&qword_1EEF57EE0, (uint64_t (*)(uint64_t))type metadata accessor for MTLResourceOptions, (uint64_t)&unk_1B2269DA0);
}

uint64_t sub_1B19E57F8()
{
  return sub_1B19E52CC(&qword_1EEF57EE8, (uint64_t (*)(uint64_t))type metadata accessor for MTLResourceOptions, (uint64_t)&unk_1B2269E00);
}

uint64_t sub_1B19E5824()
{
  return sub_1B19E52CC(&qword_1EEF57EF0, (uint64_t (*)(uint64_t))type metadata accessor for MTLResourceOptions, (uint64_t)&unk_1B2269E3C);
}

uint64_t sub_1B19E5850()
{
  return sub_1B19E52CC(&qword_1EEF57EF8, (uint64_t (*)(uint64_t))type metadata accessor for MTLTextureUsage, (uint64_t)&unk_1B2269FE0);
}

uint64_t sub_1B19E587C()
{
  return sub_1B19E52CC(&qword_1EEF57F00, (uint64_t (*)(uint64_t))type metadata accessor for MTLTextureUsage, (uint64_t)&unk_1B2269FAC);
}

uint64_t sub_1B19E58A8()
{
  return sub_1B19E52CC(&qword_1EEF57F08, (uint64_t (*)(uint64_t))type metadata accessor for MTLTextureUsage, (uint64_t)&unk_1B226A00C);
}

uint64_t sub_1B19E58D4()
{
  return sub_1B19E52CC(&qword_1EEF57F10, (uint64_t (*)(uint64_t))type metadata accessor for MTLTextureUsage, (uint64_t)&unk_1B226A048);
}

uint64_t sub_1B19E5900()
{
  return sub_1B19E52CC(&qword_1EEF57F18, (uint64_t (*)(uint64_t))type metadata accessor for MTLWinding, (uint64_t)&unk_1B226A194);
}

void sub_1B19E592C()
{
  JUMPOUT(0x1B5E23E74);
}

uint64_t sub_1B19E593C()
{
  return sub_1B19E52CC(&qword_1EEF57F20, (uint64_t (*)(uint64_t))type metadata accessor for MTLPrimitiveTopologyClass, (uint64_t)&unk_1B226A3C4);
}

uint64_t sub_1B19E5968()
{
  return sub_1B19E52CC(&qword_1EEF57F28, (uint64_t (*)(uint64_t))type metadata accessor for MTLColorWriteMask, (uint64_t)&unk_1B226A460);
}

uint64_t sub_1B19E5994()
{
  return sub_1B19E52CC(&qword_1EEF57F30, (uint64_t (*)(uint64_t))type metadata accessor for MTLColorWriteMask, (uint64_t)&unk_1B226A42C);
}

uint64_t sub_1B19E59C0()
{
  return sub_1B19E52CC(&qword_1EEF57F38, (uint64_t (*)(uint64_t))type metadata accessor for MTLColorWriteMask, (uint64_t)&unk_1B226A48C);
}

uint64_t sub_1B19E59EC()
{
  return sub_1B19E52CC((unint64_t *)&unk_1EEF57F40, (uint64_t (*)(uint64_t))type metadata accessor for MTLColorWriteMask, (uint64_t)&unk_1B226A4C8);
}

uint64_t sub_1B19E5A18(uint64_t result)
{
  if (result)
    return swift_release();
  return result;
}

uint64_t sub_1B19E5A28(uint64_t a1)
{
  MEMORY[0x1B5E23E74](&unk_1B226C544, a1);
  return sub_1B22282A8();
}

uint64_t sub_1B19E5A64()
{
  MEMORY[0x1B5E23E74](&unk_1B226C544);
  return sub_1B222829C();
}

uint64_t sub_1B19E5AAC(uint64_t a1, uint64_t a2)
{
  sub_1B222A06C();
  MEMORY[0x1B5E23E74](&unk_1B226C544, a2);
  sub_1B222829C();
  return sub_1B222A0C0();
}

uint64_t sub_1B19E5B04()
{
  sub_1B19E52CC((unint64_t *)&qword_1EEF58530, (uint64_t (*)(uint64_t))type metadata accessor for MTLLibraryError, (uint64_t)&unk_1B226C5B0);
  return sub_1B2227F78();
}

uint64_t sub_1B19E5B5C()
{
  sub_1B19E52CC(&qword_1EEF58558, (uint64_t (*)(uint64_t))type metadata accessor for URLResourceKey, (uint64_t)&unk_1B226C3F0);
  sub_1B19E52CC(&qword_1EEF58560, (uint64_t (*)(uint64_t))type metadata accessor for URLResourceKey, (uint64_t)&unk_1B226BFA8);
  return sub_1B2229718();
}

uint64_t sub_1B19E5BE0()
{
  sub_1B19E52CC((unint64_t *)&qword_1EEF5B560, (uint64_t (*)(uint64_t))type metadata accessor for VFXWorldLoaderOption, (uint64_t)&unk_1B226C478);
  sub_1B19E52CC(&qword_1EEF58580, (uint64_t (*)(uint64_t))type metadata accessor for VFXWorldLoaderOption, (uint64_t)&unk_1B226BD68);
  return sub_1B2229718();
}

uint64_t sub_1B19E5C64()
{
  sub_1B19E52CC(&qword_1EEF58588, (uint64_t (*)(uint64_t))type metadata accessor for VFXMeshSourceSemantic, (uint64_t)&unk_1B226BA7C);
  sub_1B19E52CC(&qword_1EEF58590, (uint64_t (*)(uint64_t))type metadata accessor for VFXMeshSourceSemantic, (uint64_t)&unk_1B226BA1C);
  return sub_1B2229718();
}

uint64_t sub_1B19E5CE8()
{
  sub_1B19E52CC((unint64_t *)&qword_1EEF61520, (uint64_t (*)(uint64_t))type metadata accessor for NSKeyValueChangeKey, (uint64_t)&unk_1B226C368);
  sub_1B19E52CC((unint64_t *)&unk_1EEF58540, (uint64_t (*)(uint64_t))type metadata accessor for NSKeyValueChangeKey, (uint64_t)&unk_1B226C1DC);
  return sub_1B2229718();
}

uint64_t sub_1B19E5D6C()
{
  sub_1B19E52CC(&qword_1EEF58568, (uint64_t (*)(uint64_t))type metadata accessor for LoadingOption, (uint64_t)&unk_1B226C434);
  sub_1B19E52CC((unint64_t *)&unk_1EEF58570, (uint64_t (*)(uint64_t))type metadata accessor for LoadingOption, (uint64_t)&unk_1B226BE88);
  return sub_1B2229718();
}

uint64_t sub_1B19E5DF0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = sub_1B2228728();
  result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_1B19E5E34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[3];

  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return MEMORY[0x1B5E23DD8](a1, v6, a5);
}

void type metadata accessor for RGResource(uint64_t a1)
{
  sub_1B19E8474(a1, &qword_1EEF58140);
}

uint64_t getEnumTagSinglePayload for FairRecursiveLock(uint64_t a1, int a2)
{
  int v3;

  if (!a2)
    return 0;
  if (a2 != 1 && *(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 2);
  if (*(_QWORD *)a1)
    v3 = -1;
  else
    v3 = 0;
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for FairRecursiveLock(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 1)
  {
    *(_QWORD *)result = a2 - 2;
    if (a3 >= 2)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 2)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_QWORD *)result = 0;
  }
  return result;
}

void type metadata accessor for RGPass(uint64_t a1)
{
  sub_1B19E8474(a1, &qword_1EEF58148);
}

void type metadata accessor for RGExecutionPhase(uint64_t a1)
{
  sub_1B19E8474(a1, &qword_1EEF58150);
}

void type metadata accessor for CGColor(uint64_t a1)
{
  sub_1B19E8474(a1, &qword_1EEF58158);
}

void type metadata accessor for VFXLightProbeType(uint64_t a1)
{
  sub_1B19E8474(a1, &qword_1EEF58160);
}

void type metadata accessor for VFXColorMask(uint64_t a1)
{
  sub_1B19E8474(a1, &qword_1EEF58168);
}

void type metadata accessor for VFXShadingModel(uint64_t a1)
{
  sub_1B19E8474(a1, &qword_1EEF58170);
}

void type metadata accessor for NSKeyValueChangeKey(uint64_t a1)
{
  sub_1B19E8474(a1, &qword_1EEF58178);
}

__n128 initializeWithTake for RenderGraph.RenderTargetDesc(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 32) = v3;
  return result;
}

void type metadata accessor for particle_primitive_material_constants(uint64_t a1)
{
  sub_1B19E8474(a1, (unint64_t *)&unk_1EEF58180);
}

__n128 initializeWithCopy for ParticleBoxCollider.OBBFeature(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v2 = *(_OWORD *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  result = *(__n128 *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v7;
  *(__n128 *)(a1 + 80) = result;
  *(_OWORD *)(a1 + 96) = v6;
  return result;
}

uint64_t sub_1B19E5FDC(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 144))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 136);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t sub_1B19E6030(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 136) = 0;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 144) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 144) = 0;
    if (a2)
      *(_BYTE *)(result + 136) = a2 + 1;
  }
  return result;
}

void type metadata accessor for particle_quad_material_constants(uint64_t a1)
{
  sub_1B19E8474(a1, &qword_1ED4BA7D8);
}

__n128 initializeWithCopy for _StructContextDescriptor(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 12) = *(_OWORD *)(a2 + 12);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for _StructContextDescriptor(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 28))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for _StructContextDescriptor(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_DWORD *)(result + 24) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 28) = v3;
  return result;
}

void type metadata accessor for particle_set_size_uniforms(uint64_t a1)
{
  sub_1B19E8474(a1, (unint64_t *)&unk_1EEF58190);
}

void type metadata accessor for Option(uint64_t a1)
{
  sub_1B19E8474(a1, &qword_1ED4BF408);
}

uint64_t initializeBufferWithCopyOfBuffer for EntityManager.EntityEntry(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_DWORD *)(result + 8) = *((_DWORD *)a2 + 2);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for EntityManager.EntityEntry(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 12))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for EntityManager.EntityEntry(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_DWORD *)(result + 8) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 12) = v3;
  return result;
}

void type metadata accessor for particle_orientation_over_velocity_uniforms(uint64_t a1)
{
  sub_1B19E8474(a1, &qword_1EEF581A0);
}

uint64_t getEnumTagSinglePayload for PerspectiveCamera(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 48))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 32);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for PerspectiveCamera(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 48) = 0;
    if (a2)
      *(_BYTE *)(result + 32) = a2 + 1;
  }
  return result;
}

void type metadata accessor for particle_set_color_uniforms(uint64_t a1)
{
  sub_1B19E8474(a1, &qword_1EEF581A8);
}

__n128 sub_1B19E6264(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __n128 result;
  __int128 v9;
  __int128 v10;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v2 = *(_OWORD *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  v5 = *(_OWORD *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v7;
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 96) = v6;
  result = *(__n128 *)(a2 + 144);
  v9 = *(_OWORD *)(a2 + 160);
  v10 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 192) = v10;
  *(__n128 *)(a1 + 144) = result;
  *(_OWORD *)(a1 + 160) = v9;
  return result;
}

uint64_t sub_1B19E62A0(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 208))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_1B19E62C0(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 200) = 0;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 208) = v3;
  return result;
}

void type metadata accessor for pbr_material_constants(uint64_t a1)
{
  sub_1B19E8474(a1, &qword_1EEF581B0);
}

void type metadata accessor for URLResourceKey(uint64_t a1)
{
  sub_1B19E8474(a1, &qword_1EEF581B8);
}

__n128 initializeWithTake for ParticleFlockingSolverData.Grid(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;
  __int128 v5;
  __int128 v6;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  result = (__n128)a2[3];
  v5 = a2[4];
  v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(__n128 *)(a1 + 48) = result;
  *(_OWORD *)(a1 + 64) = v5;
  return result;
}

void type metadata accessor for pointcache_spawner_uniforms(uint64_t a1)
{
  sub_1B19E8474(a1, &qword_1EEF581C0);
}

uint64_t sub_1B19E6380(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 112))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_1B19E63A0(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 112) = v3;
  return result;
}

void type metadata accessor for emitter_pointcache_uniforms(uint64_t a1)
{
  sub_1B19E8474(a1, &qword_1EEF581C8);
}

__n128 sub_1B19E63FC(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __n128 result;
  __int128 v9;
  __int128 v10;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  v5 = a2[4];
  v6 = a2[5];
  v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  result = (__n128)a2[8];
  v9 = a2[9];
  v10 = a2[11];
  *(_OWORD *)(a1 + 160) = a2[10];
  *(_OWORD *)(a1 + 176) = v10;
  *(__n128 *)(a1 + 128) = result;
  *(_OWORD *)(a1 + 144) = v9;
  return result;
}

void type metadata accessor for particle_wrap_around_camera_perspective_uniforms(uint64_t a1)
{
  sub_1B19E8474(a1, &qword_1EEF581D0);
}

__n128 initializeWithTake for MeshPart(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  result = (__n128)a2[4];
  v6 = a2[5];
  v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 64) = result;
  *(_OWORD *)(a1 + 80) = v6;
  return result;
}

void type metadata accessor for particle_wrap_around_camera_orthographic_uniforms(uint64_t a1)
{
  sub_1B19E8474(a1, &qword_1EEF581D8);
}

void type metadata accessor for LoadingOption(uint64_t a1)
{
  sub_1B19E8474(a1, &qword_1EEF581E0);
}

void type metadata accessor for particle_set_angular_velocity_uniforms(uint64_t a1)
{
  sub_1B19E8474(a1, &qword_1EEF581E8);
}

void type metadata accessor for particle_set_velocity_uniforms(uint64_t a1)
{
  sub_1B19E8474(a1, &qword_1EEF581F0);
}

uint64_t sub_1B19E64B8(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 192))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_1B19E64D8(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 184) = 0;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 192) = v3;
  return result;
}

void type metadata accessor for particle_plane_collider_uniforms(uint64_t a1)
{
  sub_1B19E8474(a1, &qword_1EEF581F8);
}

uint64_t sub_1B19E6548(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 64))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 52);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t sub_1B19E659C(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 64) = 0;
    if (a2)
      *(_BYTE *)(result + 52) = a2 + 1;
  }
  return result;
}

void type metadata accessor for particle_sphere_collider_uniforms(uint64_t a1)
{
  sub_1B19E8474(a1, &qword_1EEF58200);
}

uint64_t getEnumTagSinglePayload for MeshBatch(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 80))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 64);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for MeshBatch(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 80) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 80) = 0;
    if (a2)
      *(_BYTE *)(result + 64) = a2 + 1;
  }
  return result;
}

void type metadata accessor for particle_aabb_collider_uniforms(uint64_t a1)
{
  sub_1B19E8474(a1, &qword_1EEF58208);
}

uint64_t sub_1B19E66C4(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 192))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 180);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t sub_1B19E6718(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 184) = 0;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 192) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 192) = 0;
    if (a2)
      *(_BYTE *)(result + 180) = a2 + 1;
  }
  return result;
}

void type metadata accessor for particle_obb_collider_uniforms(uint64_t a1)
{
  sub_1B19E8474(a1, &qword_1EEF58210);
}

__n128 sub_1B19E67A0(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __n128 result;
  __int128 v8;
  __int128 v9;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  v4 = a2[3];
  v5 = a2[4];
  v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  result = (__n128)a2[7];
  v8 = a2[8];
  v9 = a2[10];
  *(_OWORD *)(a1 + 144) = a2[9];
  *(_OWORD *)(a1 + 160) = v9;
  *(__n128 *)(a1 + 112) = result;
  *(_OWORD *)(a1 + 128) = v8;
  return result;
}

void type metadata accessor for particle_cylinder_collider_uniforms(uint64_t a1)
{
  sub_1B19E8474(a1, &qword_1EEF58218);
}

uint64_t sub_1B19E67E8(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 176))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_1B19E6808(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 168) = 0;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 176) = v3;
  return result;
}

void type metadata accessor for particle_sdf_collider_uniforms(uint64_t a1)
{
  sub_1B19E8474(a1, &qword_1EEF58220);
}

void type metadata accessor for particle_drag_uniforms(uint64_t a1)
{
  sub_1B19E8474(a1, &qword_1EEF58228);
}

void type metadata accessor for VFXWorldLoaderOption(uint64_t a1)
{
  sub_1B19E8474(a1, &qword_1EEF58230);
}

void type metadata accessor for VFXFilterMode(uint64_t a1)
{
  sub_1B19E8474(a1, &qword_1EEF58238);
}

void type metadata accessor for VFXWrapMode(uint64_t a1)
{
  sub_1B19E8474(a1, (unint64_t *)&unk_1EEF58240);
}

void type metadata accessor for CGColorSpace(uint64_t a1)
{
  sub_1B19E8474(a1, &qword_1ED4B79D8);
}

uint64_t storeEnumTagSinglePayload for _Metadata._Struct(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 24) = v3;
  return result;
}

void type metadata accessor for particle_set_pivot_uniforms(uint64_t a1)
{
  sub_1B19E8474(a1, &qword_1EEF58250);
}

void type metadata accessor for VFXForceFieldCullMode(uint64_t a1)
{
  sub_1B19E8474(a1, &qword_1EEF58258);
}

void type metadata accessor for VFXForceFieldScope(uint64_t a1)
{
  sub_1B19E8474(a1, &qword_1EEF58260);
}

void type metadata accessor for VFXForceFieldShape(uint64_t a1)
{
  sub_1B19E8474(a1, &qword_1EEF58268);
}

void type metadata accessor for VFXParametricModelType(uint64_t a1)
{
  sub_1B19E8474(a1, &qword_1EEF58270);
}

void type metadata accessor for VFXLightType(uint64_t a1)
{
  sub_1B19E8474(a1, &qword_1EEF58278);
}

__n128 initializeWithCopy for RotateAction(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

void type metadata accessor for particle_integrate_uniforms(uint64_t a1)
{
  sub_1B19E8474(a1, &qword_1EEF58280);
}

void type metadata accessor for particle_force_uniforms(uint64_t a1)
{
  sub_1B19E8474(a1, &qword_1EEF58288);
}

void type metadata accessor for particle_set_life_uniforms(uint64_t a1)
{
  sub_1B19E8474(a1, &qword_1EEF58290);
}

void type metadata accessor for particle_textureframe_evolution_uniforms(uint64_t a1)
{
  sub_1B19E8474(a1, &qword_1EEF58298);
}

void type metadata accessor for VFXMeshSourceSemantic(uint64_t a1)
{
  sub_1B19E8474(a1, &qword_1EEF582A0);
}

void type metadata accessor for VFXMeshPrimitiveType(uint64_t a1)
{
  sub_1B19E8474(a1, &qword_1EEF582A8);
}

void type metadata accessor for particle_set_angle_uniforms(uint64_t a1)
{
  sub_1B19E8474(a1, &qword_1EEF582B0);
}

void type metadata accessor for particle_set_angle_velocity_uniforms(uint64_t a1)
{
  sub_1B19E8474(a1, &qword_1EEF582B8);
}

void type metadata accessor for vfx_vertex_attribute(uint64_t a1)
{
  sub_1B19E8474(a1, &qword_1EEF582C0);
}

void type metadata accessor for particle_noise_uniforms(uint64_t a1)
{
  sub_1B19E8474(a1, &qword_1EEF582C8);
}

void type metadata accessor for particle_set_texture_frame_uniforms(uint64_t a1)
{
  sub_1B19E8474(a1, &qword_1EEF582D0);
}

void *sub_1B19E6A64(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x190uLL);
}

uint64_t sub_1B19E6A6C(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 400))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 388);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t sub_1B19E6AC0(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 392) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 400) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 400) = 0;
    if (a2)
      *(_BYTE *)(result + 388) = a2 + 1;
  }
  return result;
}

void type metadata accessor for emitter_shape_uniforms(uint64_t a1)
{
  sub_1B19E8474(a1, &qword_1EEF582D8);
}

uint64_t getEnumTagSinglePayload for PointCacheSpawner(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 12))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 8);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for PointCacheSpawner(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_DWORD *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 12) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 12) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = a2 + 1;
  }
  return result;
}

void type metadata accessor for particle_color_over_life_uniforms(uint64_t a1)
{
  sub_1B19E8474(a1, (unint64_t *)&unk_1EEF582E0);
}

void *sub_1B19E6C2C(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x480uLL);
}

uint64_t sub_1B19E6C34(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 1152))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_1B19E6C54(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 1144) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 1128) = 0u;
    *(_OWORD *)(result + 1112) = 0u;
    *(_OWORD *)(result + 1096) = 0u;
    *(_OWORD *)(result + 1080) = 0u;
    *(_OWORD *)(result + 1064) = 0u;
    *(_OWORD *)(result + 1048) = 0u;
    *(_OWORD *)(result + 1032) = 0u;
    *(_OWORD *)(result + 1016) = 0u;
    *(_OWORD *)(result + 1000) = 0u;
    *(_OWORD *)(result + 984) = 0u;
    *(_OWORD *)(result + 968) = 0u;
    *(_OWORD *)(result + 952) = 0u;
    *(_OWORD *)(result + 936) = 0u;
    *(_OWORD *)(result + 920) = 0u;
    *(_OWORD *)(result + 904) = 0u;
    *(_OWORD *)(result + 888) = 0u;
    *(_OWORD *)(result + 872) = 0u;
    *(_OWORD *)(result + 856) = 0u;
    *(_OWORD *)(result + 840) = 0u;
    *(_OWORD *)(result + 824) = 0u;
    *(_OWORD *)(result + 808) = 0u;
    *(_OWORD *)(result + 792) = 0u;
    *(_OWORD *)(result + 776) = 0u;
    *(_OWORD *)(result + 760) = 0u;
    *(_OWORD *)(result + 744) = 0u;
    *(_OWORD *)(result + 728) = 0u;
    *(_OWORD *)(result + 712) = 0u;
    *(_OWORD *)(result + 696) = 0u;
    *(_OWORD *)(result + 680) = 0u;
    *(_OWORD *)(result + 664) = 0u;
    *(_OWORD *)(result + 648) = 0u;
    *(_OWORD *)(result + 632) = 0u;
    *(_OWORD *)(result + 616) = 0u;
    *(_OWORD *)(result + 600) = 0u;
    *(_OWORD *)(result + 584) = 0u;
    *(_OWORD *)(result + 568) = 0u;
    *(_OWORD *)(result + 552) = 0u;
    *(_OWORD *)(result + 536) = 0u;
    *(_OWORD *)(result + 520) = 0u;
    *(_OWORD *)(result + 504) = 0u;
    *(_OWORD *)(result + 488) = 0u;
    *(_OWORD *)(result + 472) = 0u;
    *(_OWORD *)(result + 456) = 0u;
    *(_OWORD *)(result + 440) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 1152) = v3;
  return result;
}

void type metadata accessor for view_constants(uint64_t a1)
{
  sub_1B19E8474(a1, (unint64_t *)&unk_1ED4BA738);
}

void type metadata accessor for MTLRenderStages(uint64_t a1)
{
  sub_1B19E8474(a1, &qword_1EEF582F0);
}

__n128 initializeBufferWithCopyOfBuffer for RelationPair(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t storeEnumTagSinglePayload for ShaderCache.Stats(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 16) = v3;
  return result;
}

void type metadata accessor for indirect_draw_arguments_uniforms(uint64_t a1)
{
  sub_1B19E8474(a1, &qword_1EEF582F8);
}

void type metadata accessor for indirect_draw_mesh_arguments_uniforms(uint64_t a1)
{
  sub_1B19E8474(a1, &qword_1EEF58300);
}

uint64_t storeEnumTagSinglePayload for SkinnedMeshBinding(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 80) = v3;
  return result;
}

void type metadata accessor for particle_attach_uniforms(uint64_t a1)
{
  sub_1B19E8474(a1, &qword_1EEF58308);
}

void type metadata accessor for simd_double3x3(uint64_t a1)
{
  sub_1B19E8474(a1, &qword_1EEF58310);
}

uint64_t getEnumTagSinglePayload for WorldFromScene(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 128))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for WorldFromScene(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 120) = 0;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 128) = v3;
  return result;
}

void type metadata accessor for simd_double4x4(uint64_t a1)
{
  sub_1B19E8474(a1, &qword_1EEF58318);
}

void type metadata accessor for pbr_lighting_parameters(uint64_t a1)
{
  sub_1B19E8474(a1, &qword_1EEF58320);
}

void type metadata accessor for MTLLibraryError(uint64_t a1)
{
  sub_1B19E8474(a1, &qword_1EEF58328);
}

void type metadata accessor for particle_set_float3_generic_uniforms(uint64_t a1)
{
  sub_1B19E8474(a1, &qword_1EEF58330);
}

void type metadata accessor for particle_set_orientation_uniforms(uint64_t a1)
{
  sub_1B19E8474(a1, &qword_1EEF58338);
}

void type metadata accessor for particle_set_mass_uniforms(uint64_t a1)
{
  sub_1B19E8474(a1, &qword_1EEF58340);
}

uint64_t sub_1B19E6F80(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 80))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 65);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t sub_1B19E6FD4(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 80) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 80) = 0;
    if (a2)
      *(_BYTE *)(result + 65) = a2 + 1;
  }
  return result;
}

void type metadata accessor for emitter_killshape_uniforms(uint64_t a1)
{
  sub_1B19E8474(a1, &qword_1EEF58348);
}

void type metadata accessor for MTLBlendOperation(uint64_t a1)
{
  sub_1B19E8474(a1, &qword_1EEF58350);
}

void type metadata accessor for MTLBlendFactor(uint64_t a1)
{
  sub_1B19E8474(a1, &qword_1EEF58358);
}

void type metadata accessor for particle_size_over_life_uniforms(uint64_t a1)
{
  sub_1B19E8474(a1, &qword_1EEF58360);
}

uint64_t initializeBufferWithCopyOfBuffer for Query(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain();
  return v3;
}

__n128 initializeWithCopy for TesselationDescriptor(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for Float3x3Coder(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 48))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for Float3x3Coder(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 48) = v3;
  return result;
}

void type metadata accessor for MTLViewport(uint64_t a1)
{
  sub_1B19E8474(a1, &qword_1EEF58368);
}

uint64_t sub_1B19E712C(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 176))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 160);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t sub_1B19E7180(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 168) = 0;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 176) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 176) = 0;
    if (a2)
      *(_BYTE *)(result + 160) = a2 + 1;
  }
  return result;
}

void type metadata accessor for particle_force_field_uniforms(uint64_t a1)
{
  sub_1B19E8474(a1, &qword_1EEF58370);
}

uint64_t sub_1B19E7204(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 8);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t sub_1B19E7258(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = a2 + 1;
  }
  return result;
}

void type metadata accessor for frame_constants(uint64_t a1)
{
  sub_1B19E8474(a1, (unint64_t *)&unk_1ED4BA778);
}

__n128 initializeWithTake for Query(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for CommandQueue.IterationContext(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 40))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 24);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for CommandQueue.IterationContext(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 40) = 0;
    if (a2)
      *(_QWORD *)(result + 24) = a2;
  }
  return result;
}

void type metadata accessor for __vfx_sampler1d(uint64_t a1)
{
  sub_1B19E8474(a1, (unint64_t *)&unk_1ED4BA750);
}

uint64_t getEnumTagSinglePayload for ShaderCache.Stats(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

void type metadata accessor for simd_float2x2(uint64_t a1)
{
  sub_1B19E8474(a1, &qword_1ED4BA688);
}

void type metadata accessor for simd_float2x3(uint64_t a1)
{
  sub_1B19E8474(a1, &qword_1ED4BA690);
}

void type metadata accessor for simd_float2x4(uint64_t a1)
{
  sub_1B19E8474(a1, &qword_1ED4BA698);
}

uint64_t getEnumTagSinglePayload for _Metadata._Struct(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 24))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

void type metadata accessor for simd_float3x2(uint64_t a1)
{
  sub_1B19E8474(a1, &qword_1ED4BA6A0);
}

void type metadata accessor for simd_float3x3(uint64_t a1)
{
  sub_1B19E8474(a1, &qword_1ED4BA6A8);
}

void type metadata accessor for simd_float3x4(uint64_t a1)
{
  sub_1B19E8474(a1, &qword_1ED4BA6B0);
}

void type metadata accessor for simd_float4x2(uint64_t a1)
{
  sub_1B19E8474(a1, &qword_1ED4BA6B8);
}

uint64_t getEnumTagSinglePayload for TextureCPURuntime.Slice(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 64))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

void type metadata accessor for simd_float4x3(uint64_t a1)
{
  sub_1B19E8474(a1, (unint64_t *)&unk_1ED4BA6C0);
}

void type metadata accessor for CGImage(uint64_t a1)
{
  sub_1B19E8474(a1, &qword_1EEF58378);
}

void type metadata accessor for MTLTessellationFactorStepFunction(uint64_t a1)
{
  sub_1B19E8474(a1, &qword_1EEF58380);
}

void type metadata accessor for MTLTessellationControlPointIndexType(uint64_t a1)
{
  sub_1B19E8474(a1, &qword_1EEF58388);
}

void type metadata accessor for MTLTessellationPartitionMode(uint64_t a1)
{
  sub_1B19E8474(a1, &qword_1EEF58390);
}

uint64_t sub_1B19E74DC(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 24))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t sub_1B19E7538(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 24) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

void type metadata accessor for __darwin_pthread_handler_rec(uint64_t a1)
{
  sub_1B19E8474(a1, (unint64_t *)&unk_1EEF58398);
}

__n128 initializeWithTake for Renderer.Options(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 32) = v3;
  return result;
}

uint64_t _s3VFX19TextureRenderTargetVwet_0(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 80))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 10);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t _s3VFX19TextureRenderTargetVwst_0(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 80) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 80) = 0;
    if (a2)
      *(_BYTE *)(result + 10) = a2 + 1;
  }
  return result;
}

void type metadata accessor for TextureDescriptor(uint64_t a1)
{
  sub_1B19E8474(a1, &qword_1ED4BA7C0);
}

void type metadata accessor for os_unfair_recursive_lock_s(uint64_t a1)
{
  sub_1B19E8474(a1, &qword_1EEF583A8);
}

void type metadata accessor for CVBuffer(uint64_t a1)
{
  sub_1B19E8474(a1, &qword_1EEF583B0);
}

void type metadata accessor for CMTimeFlags(uint64_t a1)
{
  sub_1B19E8474(a1, &qword_1EEF583B8);
}

uint64_t getEnumTagSinglePayload for RenderVariantDescriptor(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 96))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for RenderVariantDescriptor(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 96) = v3;
  return result;
}

void type metadata accessor for vfx_frustum(uint64_t a1)
{
  sub_1B19E8474(a1, &qword_1EEF583C0);
}

uint64_t sub_1B19E7730(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 128))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 8);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t sub_1B19E7784(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 120) = 0;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 128) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 128) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = a2 + 1;
  }
  return result;
}

void type metadata accessor for ForceFieldSettings(uint64_t a1)
{
  sub_1B19E8474(a1, &qword_1EEF583C8);
}

__n128 sub_1B19E77FC(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 32) = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for SkinnedMeshBinding(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 80))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

void type metadata accessor for ShaderStatistics(uint64_t a1)
{
  sub_1B19E8474(a1, &qword_1EEF583D0);
}

void type metadata accessor for os_unfair_lock_s(uint64_t a1)
{
  sub_1B19E8474(a1, &qword_1EEF583D8);
}

_DWORD *initializeBufferWithCopyOfBuffer for QueryHeader.Field(_DWORD *result, _DWORD *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for QueryHeader.Field(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 4))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

void type metadata accessor for REVFXClippingIndexSlice(uint64_t a1)
{
  sub_1B19E8474(a1, &qword_1EEF583E0);
}

uint64_t sub_1B19E78A0()
{
  return sub_1B19E52CC(&qword_1EEF583E8, (uint64_t (*)(uint64_t))type metadata accessor for MTLTessellationPartitionMode, (uint64_t)&unk_1B226B330);
}

uint64_t sub_1B19E78CC()
{
  return sub_1B19E52CC(&qword_1EEF583F0, (uint64_t (*)(uint64_t))type metadata accessor for MTLTessellationControlPointIndexType, (uint64_t)&unk_1B226B3DC);
}

uint64_t sub_1B19E78F8()
{
  return sub_1B19E52CC(&qword_1EEF583F8, (uint64_t (*)(uint64_t))type metadata accessor for MTLTessellationFactorStepFunction, (uint64_t)&unk_1B226B488);
}

uint64_t sub_1B19E7924()
{
  return sub_1B19E52CC(&qword_1EEF58400, (uint64_t (*)(uint64_t))type metadata accessor for MTLBlendFactor, (uint64_t)&unk_1B226B534);
}

uint64_t sub_1B19E7950()
{
  return sub_1B19E52CC(&qword_1EEF58408, (uint64_t (*)(uint64_t))type metadata accessor for MTLBlendOperation, (uint64_t)&unk_1B226B5E0);
}

uint64_t sub_1B19E797C()
{
  return sub_1B19E52CC(&qword_1EEF58410, (uint64_t (*)(uint64_t))type metadata accessor for MTLLibraryError, (uint64_t)&unk_1B226B648);
}

uint64_t sub_1B19E79A8()
{
  return sub_1B19E52CC(&qword_1EEF58418, (uint64_t (*)(uint64_t))type metadata accessor for MTLLibraryError, (uint64_t)&unk_1B226B674);
}

uint64_t sub_1B19E79D4()
{
  return sub_1B19E52CC(&qword_1EEF58420, (uint64_t (*)(uint64_t))type metadata accessor for MTLRenderStages, (uint64_t)&unk_1B226B7A8);
}

uint64_t sub_1B19E7A00()
{
  return sub_1B19E52CC(&qword_1EEF58428, (uint64_t (*)(uint64_t))type metadata accessor for MTLRenderStages, (uint64_t)&unk_1B226B774);
}

uint64_t sub_1B19E7A2C()
{
  return sub_1B19E52CC(&qword_1EEF58430, (uint64_t (*)(uint64_t))type metadata accessor for MTLRenderStages, (uint64_t)&unk_1B226B7D4);
}

uint64_t sub_1B19E7A58()
{
  return sub_1B19E52CC(&qword_1EEF58438, (uint64_t (*)(uint64_t))type metadata accessor for MTLRenderStages, (uint64_t)&unk_1B226B810);
}

uint64_t sub_1B19E7A84()
{
  return sub_1B19E52CC(&qword_1EEF58440, (uint64_t (*)(uint64_t))type metadata accessor for VFXMeshSourceSemantic, (uint64_t)&unk_1B226B9E0);
}

uint64_t sub_1B19E7AB0()
{
  return sub_1B19E52CC(&qword_1EEF58448, (uint64_t (*)(uint64_t))type metadata accessor for VFXMeshSourceSemantic, (uint64_t)&unk_1B226B9B4);
}

uint64_t sub_1B19E7ADC()
{
  sub_1B19E52CC((unint64_t *)&qword_1EEF5BD00, (uint64_t (*)(uint64_t))type metadata accessor for Option, (uint64_t)&unk_1B226C3AC);
  sub_1B19E52CC(&qword_1EEF58550, (uint64_t (*)(uint64_t))type metadata accessor for Option, (uint64_t)&unk_1B226C0C8);
  return sub_1B2229718();
}

uint64_t sub_1B19E7B60(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;

  v4 = sub_1B222874C();
  v5 = a3(v4);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_1B19E7B9C()
{
  sub_1B222874C();
  sub_1B2228824();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B19E7BDC()
{
  uint64_t v0;

  sub_1B222874C();
  sub_1B222A06C();
  sub_1B2228824();
  v0 = sub_1B222A0C0();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_1B19E7C4C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;

  v0 = sub_1B222874C();
  v2 = v1;
  if (v0 == sub_1B222874C() && v2 == v3)
    v5 = 1;
  else
    v5 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

uint64_t sub_1B19E7CD4()
{
  return sub_1B19E52CC((unint64_t *)&unk_1EEF58450, (uint64_t (*)(uint64_t))type metadata accessor for VFXMeshSourceSemantic, (uint64_t)&unk_1B226BA50);
}

uint64_t sub_1B19E7D00()
{
  return sub_1B19E52CC((unint64_t *)&unk_1ED4B79C8, (uint64_t (*)(uint64_t))type metadata accessor for CGColorSpace, (uint64_t)&unk_1B226BBC0);
}

uint64_t sub_1B19E7D2C()
{
  return sub_1B19E52CC(&qword_1EEF58460, (uint64_t (*)(uint64_t))type metadata accessor for VFXWorldLoaderOption, (uint64_t)&unk_1B226BD2C);
}

uint64_t sub_1B19E7D58()
{
  return sub_1B19E52CC(&qword_1EEF58468, (uint64_t (*)(uint64_t))type metadata accessor for VFXWorldLoaderOption, (uint64_t)&unk_1B226BD00);
}

uint64_t sub_1B19E7D84()
{
  return sub_1B19E52CC(&qword_1EEF58470, (uint64_t (*)(uint64_t))type metadata accessor for LoadingOption, (uint64_t)&unk_1B226BE4C);
}

uint64_t sub_1B19E7DB0()
{
  return sub_1B19E52CC(&qword_1EEF58478, (uint64_t (*)(uint64_t))type metadata accessor for LoadingOption, (uint64_t)&unk_1B226BE20);
}

uint64_t sub_1B19E7DDC()
{
  return sub_1B19E52CC(&qword_1EEF58480, (uint64_t (*)(uint64_t))type metadata accessor for URLResourceKey, (uint64_t)&unk_1B226BF6C);
}

uint64_t sub_1B19E7E08()
{
  return sub_1B19E52CC(&qword_1EEF58488, (uint64_t (*)(uint64_t))type metadata accessor for URLResourceKey, (uint64_t)&unk_1B226BF40);
}

uint64_t sub_1B19E7E34()
{
  return sub_1B19E52CC(&qword_1EEF58490, (uint64_t (*)(uint64_t))type metadata accessor for Option, (uint64_t)&unk_1B226C08C);
}

uint64_t sub_1B19E7E60()
{
  return sub_1B19E52CC(&qword_1EEF58498, (uint64_t (*)(uint64_t))type metadata accessor for Option, (uint64_t)&unk_1B226C060);
}

uint64_t sub_1B19E7E8C()
{
  return sub_1B19E52CC(&qword_1EEF584A0, (uint64_t (*)(uint64_t))type metadata accessor for NSKeyValueChangeKey, (uint64_t)&unk_1B226C1A0);
}

uint64_t sub_1B19E7EB8()
{
  return sub_1B19E52CC(&qword_1EEF584A8, (uint64_t (*)(uint64_t))type metadata accessor for NSKeyValueChangeKey, (uint64_t)&unk_1B226C174);
}

uint64_t sub_1B19E7EE4()
{
  return sub_1B19E52CC((unint64_t *)&unk_1EEF584B0, (uint64_t (*)(uint64_t))type metadata accessor for NSKeyValueChangeKey, (uint64_t)&unk_1B226C210);
}

uint64_t sub_1B19E7F10()
{
  return sub_1B19E52CC(&qword_1ED4BF708, (uint64_t (*)(uint64_t))type metadata accessor for Option, (uint64_t)&unk_1B226C0FC);
}

uint64_t sub_1B19E7F3C()
{
  return sub_1B19E52CC(&qword_1EEF584C0, (uint64_t (*)(uint64_t))type metadata accessor for URLResourceKey, (uint64_t)&unk_1B226BFDC);
}

uint64_t sub_1B19E7F68()
{
  return sub_1B19E52CC(&qword_1EEF584C8, (uint64_t (*)(uint64_t))type metadata accessor for LoadingOption, (uint64_t)&unk_1B226BEBC);
}

uint64_t sub_1B19E7F94()
{
  return sub_1B19E52CC(&qword_1EEF584D0, (uint64_t (*)(uint64_t))type metadata accessor for VFXWorldLoaderOption, (uint64_t)&unk_1B226BD9C);
}

uint64_t sub_1B19E7FC0()
{
  return sub_1B19E52CC(&qword_1EEF584D8, (uint64_t (*)(uint64_t))type metadata accessor for VFXFilterMode, (uint64_t)&unk_1B226BC98);
}

uint64_t sub_1B19E7FEC()
{
  return sub_1B19E52CC((unint64_t *)&unk_1EEF584E0, (uint64_t (*)(uint64_t))type metadata accessor for VFXWrapMode, (uint64_t)&unk_1B226BC30);
}

uint64_t sub_1B19E8018()
{
  return sub_1B19E52CC(&qword_1ED4BA748, (uint64_t (*)(uint64_t))type metadata accessor for CGColorSpace, (uint64_t)&unk_1B226BBEC);
}

uint64_t sub_1B19E8044()
{
  return sub_1B19E52CC(&qword_1EEF584F0, (uint64_t (*)(uint64_t))type metadata accessor for vfx_vertex_attribute, (uint64_t)&unk_1B226B918);
}

uint64_t sub_1B19E8070()
{
  return sub_1B19E52CC(&qword_1EEF584F8, (uint64_t (*)(uint64_t))type metadata accessor for MTLLibraryError, (uint64_t)&unk_1B226B730);
}

uint64_t sub_1B19E809C()
{
  return sub_1B19E52CC(&qword_1EEF58500, (uint64_t (*)(uint64_t))type metadata accessor for MTLLibraryError, (uint64_t)&unk_1B226B6FC);
}

uint64_t sub_1B19E80C8()
{
  return sub_1B19E52CC(&qword_1EEF58508, (uint64_t (*)(uint64_t))type metadata accessor for MTLLibraryError, (uint64_t)&unk_1B226B6B8);
}

uint64_t sub_1B19E80F4()
{
  return sub_1B19E52CC(&qword_1EEF58510, (uint64_t (*)(uint64_t))type metadata accessor for Code, (uint64_t)&unk_1B226C658);
}

void type metadata accessor for Code(uint64_t a1)
{
  sub_1B19E8474(a1, &qword_1EEF585C0);
}

uint64_t sub_1B19E8134()
{
  return sub_1B19E52CC(&qword_1EEF58518, (uint64_t (*)(uint64_t))type metadata accessor for Code, (uint64_t)&unk_1B226C61C);
}

unint64_t sub_1B19E8164()
{
  unint64_t result;

  result = qword_1EEF58520;
  if (!qword_1EEF58520)
  {
    result = MEMORY[0x1B5E23E74](MEMORY[0x1E0DEBBE0], MEMORY[0x1E0DEBB98]);
    atomic_store(result, (unint64_t *)&qword_1EEF58520);
  }
  return result;
}

uint64_t sub_1B19E81A8()
{
  return sub_1B19E52CC(&qword_1EEF58528, (uint64_t (*)(uint64_t))type metadata accessor for Code, (uint64_t)&unk_1B226C694);
}

uint64_t sub_1B19E81D4()
{
  return sub_1B19E52CC((unint64_t *)&qword_1EEF58530, (uint64_t (*)(uint64_t))type metadata accessor for MTLLibraryError, (uint64_t)&unk_1B226C5B0);
}

void type metadata accessor for particle_ribbon_material_constants(uint64_t a1)
{
  sub_1B19E8474(a1, &qword_1EEF58598);
}

void type metadata accessor for particle_line_material_constants(uint64_t a1)
{
  sub_1B19E8474(a1, &qword_1EEF585A0);
}

void type metadata accessor for particle_box_material_constants(uint64_t a1)
{
  sub_1B19E8474(a1, &qword_1EEF585A8);
}

void type metadata accessor for particle_point_material_constants(uint64_t a1)
{
  sub_1B19E8474(a1, &qword_1EEF585B0);
}

void type metadata accessor for particle_decal_material_constants(uint64_t a1)
{
  sub_1B19E8474(a1, &qword_1EEF585B8);
}

__n128 sub_1B19E8264(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v2 = *(_OWORD *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  result = *(__n128 *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 80) = result;
  return result;
}

uint64_t sub_1B19E8298(uint64_t a1, int a2)
{
  int v3;

  if (!a2)
    return 0;
  if (a2 != 1 && *(_BYTE *)(a1 + 136))
    return (*(_DWORD *)a1 + 2);
  if (*(_QWORD *)a1)
    v3 = -1;
  else
    v3 = 0;
  return (v3 + 1);
}

uint64_t sub_1B19E82DC(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 1)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_QWORD *)result = a2 - 2;
    if (a3 >= 2)
      *(_BYTE *)(result + 136) = 1;
  }
  else
  {
    if (a3 >= 2)
      *(_BYTE *)(result + 136) = 0;
    if (a2)
      *(_QWORD *)result = 0;
  }
  return result;
}

void type metadata accessor for RGPassAndOutputs(uint64_t a1)
{
  sub_1B19E8474(a1, &qword_1EEF585C8);
}

void type metadata accessor for PBR1(uint64_t a1)
{
  sub_1B19E8474(a1, &qword_1EEF585D0);
}

void type metadata accessor for PBR4(uint64_t a1)
{
  sub_1B19E8474(a1, &qword_1EEF585D8);
}

void type metadata accessor for vfx_scale_bias(uint64_t a1)
{
  sub_1B19E8474(a1, &qword_1EEF585E0);
}

void type metadata accessor for vfx_float_range(uint64_t a1)
{
  sub_1B19E8474(a1, &qword_1EEF585E8);
}

uint64_t getEnumTagSinglePayload for Entity(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for Entity(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 8) = v3;
  return result;
}

void type metadata accessor for composition_t(uint64_t a1)
{
  sub_1B19E8474(a1, &qword_1EEF585F0);
}

void type metadata accessor for argument_buffer_index(uint64_t a1)
{
  sub_1B19E8474(a1, &qword_1EEF585F8);
}

void type metadata accessor for MTLSize(uint64_t a1)
{
  sub_1B19E8474(a1, &qword_1EEF58600);
}

void type metadata accessor for MTLStencilOperation(uint64_t a1)
{
  sub_1B19E8474(a1, &qword_1EEF58608);
}

void type metadata accessor for MTLBindingType(uint64_t a1)
{
  sub_1B19E8474(a1, &qword_1EEF58610);
}

void type metadata accessor for MTLTextureCompressionType(uint64_t a1)
{
  sub_1B19E8474(a1, &qword_1EEF58618);
}

void type metadata accessor for vfx_plane(uint64_t a1)
{
  sub_1B19E8474(a1, &qword_1EEF58620);
}

void sub_1B19E8474(uint64_t a1, unint64_t *a2)
{
  unint64_t ForeignTypeMetadata;
  uint64_t v4;

  if (!*a2)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4)
      atomic_store(ForeignTypeMetadata, a2);
  }
}

uint64_t sub_1B19E84B8()
{
  return sub_1B19E52CC(&qword_1EEF58628, (uint64_t (*)(uint64_t))type metadata accessor for MTLStencilOperation, (uint64_t)&unk_1B226C958);
}

uint64_t sub_1B19E85B8()
{
  return swift_initClassMetadata2();
}

uint64_t sub_1B19E8608()
{
  uint64_t v0;

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for EventGuard(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B19E5E34(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for EventGuard);
}

unint64_t VFXSceneLightType.init(rawValue:)(unint64_t a1)
{
  return sub_1B19EC8FC(a1);
}

unint64_t sub_1B19E8654@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result;
  char v4;

  result = sub_1B19EC8FC(*a1);
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = v4 & 1;
  return result;
}

uint64_t sub_1B19E8684()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_type);
}

uint64_t sub_1B19E8694(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_type) = result;
  return result;
}

uint64_t (*sub_1B19E86A4())(_QWORD)
{
  return nullsub_16;
}

float sub_1B19E86BC()
{
  uint64_t v0;

  return *(float *)(v0 + OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_intensity);
}

void sub_1B19E86CC(float a1)
{
  uint64_t v1;

  *(float *)(v1 + OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_intensity) = a1;
}

uint64_t (*sub_1B19E86DC())(_QWORD)
{
  return nullsub_16;
}

uint64_t sub_1B19E86F4()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_color);
}

uint64_t sub_1B19E870C(uint64_t result, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v4;

  v4 = v3 + OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_color;
  *(_QWORD *)v4 = result;
  *(_QWORD *)(v4 + 8) = a2;
  *(_BYTE *)(v4 + 16) = a3 & 1;
  return result;
}

uint64_t (*sub_1B19E8728())(_QWORD)
{
  return nullsub_16;
}

uint64_t sub_1B19E8740()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_orientation);
}

uint64_t sub_1B19E8758(uint64_t result, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v4;

  v4 = v3 + OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_orientation;
  *(_QWORD *)v4 = result;
  *(_QWORD *)(v4 + 8) = a2;
  *(_BYTE *)(v4 + 16) = a3 & 1;
  return result;
}

uint64_t (*sub_1B19E8774())(_QWORD)
{
  return nullsub_16;
}

uint64_t sub_1B19E878C()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_position);
}

uint64_t sub_1B19E87A4(uint64_t result, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v4;

  v4 = v3 + OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_position;
  *(_QWORD *)v4 = result;
  *(_QWORD *)(v4 + 8) = a2;
  *(_BYTE *)(v4 + 16) = a3 & 1;
  return result;
}

uint64_t (*sub_1B19E87C0())(_QWORD)
{
  return nullsub_16;
}

unint64_t sub_1B19E87D8()
{
  return sub_1B19E8924(&OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_attenuationRadius);
}

uint64_t sub_1B19E87E4(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  v2 = v1 + OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_attenuationRadius;
  *(_DWORD *)v2 = result;
  *(_BYTE *)(v2 + 4) = BYTE4(result) & 1;
  return result;
}

uint64_t (*sub_1B19E8800())(_QWORD)
{
  return nullsub_16;
}

unint64_t sub_1B19E8818()
{
  return sub_1B19E8924(&OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_zNear);
}

uint64_t sub_1B19E8824(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  v2 = v1 + OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_zNear;
  *(_DWORD *)v2 = result;
  *(_BYTE *)(v2 + 4) = BYTE4(result) & 1;
  return result;
}

uint64_t (*sub_1B19E8840())(_QWORD)
{
  return nullsub_16;
}

unint64_t sub_1B19E8858()
{
  return sub_1B19E8924(&OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_zFar);
}

uint64_t sub_1B19E8864(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  v2 = v1 + OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_zFar;
  *(_DWORD *)v2 = result;
  *(_BYTE *)(v2 + 4) = BYTE4(result) & 1;
  return result;
}

uint64_t (*sub_1B19E8880())(_QWORD)
{
  return nullsub_16;
}

unint64_t sub_1B19E8898()
{
  return sub_1B19E8924(&OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_orthoScale);
}

uint64_t sub_1B19E88A4(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  v2 = v1 + OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_orthoScale;
  *(_DWORD *)v2 = result;
  *(_BYTE *)(v2 + 4) = BYTE4(result) & 1;
  return result;
}

uint64_t (*sub_1B19E88C0())(_QWORD)
{
  return nullsub_16;
}

unint64_t sub_1B19E88D8()
{
  return sub_1B19E8924(&OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_outerAngle);
}

uint64_t sub_1B19E88E4(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  v2 = v1 + OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_outerAngle;
  *(_DWORD *)v2 = result;
  *(_BYTE *)(v2 + 4) = BYTE4(result) & 1;
  return result;
}

uint64_t (*sub_1B19E8900())(_QWORD)
{
  return nullsub_16;
}

unint64_t sub_1B19E8918()
{
  return sub_1B19E8924(&OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_innerAngle);
}

unint64_t sub_1B19E8924(_QWORD *a1)
{
  uint64_t v1;

  return *(unsigned int *)(v1 + *a1) | ((unint64_t)*(unsigned __int8 *)(v1 + *a1 + 4) << 32);
}

uint64_t sub_1B19E894C(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  v2 = v1 + OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_innerAngle;
  *(_DWORD *)v2 = result;
  *(_BYTE *)(v2 + 4) = BYTE4(result) & 1;
  return result;
}

uint64_t (*sub_1B19E8968())(_QWORD)
{
  return nullsub_16;
}

uint64_t sub_1B19E8980()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_extents);
}

uint64_t sub_1B19E8998(uint64_t result, char a2)
{
  uint64_t v2;
  uint64_t v3;

  v3 = v2 + OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_extents;
  *(_QWORD *)v3 = result;
  *(_BYTE *)(v3 + 8) = a2 & 1;
  return result;
}

uint64_t (*sub_1B19E89B4())(_QWORD)
{
  return nullsub_16;
}

uint64_t sub_1B19E89CC()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_doubleSided);
}

uint64_t sub_1B19E89DC(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_doubleSided) = result;
  return result;
}

uint64_t (*sub_1B19E89EC())(_QWORD)
{
  return nullsub_16;
}

uint64_t sub_1B19E8A04(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v9;

  sub_1B1791524(0, (unint64_t *)&qword_1ED4BF720, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v9 - v6;
  sub_1B19EC90C(a1, (uint64_t)&v9 - v6);
  return sub_1B17927B4((uint64_t)v7, *a2 + OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_url);
}

uint64_t sub_1B19E8A9C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1B19EC90C(v1 + OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_url, a1);
}

uint64_t sub_1B19E8AB0(uint64_t a1)
{
  uint64_t v1;

  return sub_1B17927B4(a1, v1 + OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_url);
}

uint64_t (*sub_1B19E8AC0())(_QWORD)
{
  return nullsub_16;
}

uint64_t sub_1B19E8AD8()
{
  return swift_unknownObjectRetain();
}

uint64_t sub_1B19E8AE8(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_texture) = a1;
  return swift_unknownObjectRelease();
}

uint64_t (*sub_1B19E8B00())(_QWORD)
{
  return nullsub_16;
}

id VFXSceneLightParameters.__allocating_init(type:)(uint64_t a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return VFXSceneLightParameters.init(type:)(a1);
}

id VFXSceneLightParameters.init(type:)(uint64_t a1)
{
  _BYTE *v1;
  char *v3;
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  _QWORD *v16;
  objc_super v18;

  *(_DWORD *)&v1[OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_intensity] = 1065353216;
  v3 = &v1[OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_color];
  *(_QWORD *)v3 = 0;
  *((_QWORD *)v3 + 1) = 0;
  v3[16] = 1;
  v4 = &v1[OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_orientation];
  *(_QWORD *)v4 = 0;
  *((_QWORD *)v4 + 1) = 0;
  v4[16] = 1;
  v5 = &v1[OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_position];
  *(_QWORD *)v5 = 0;
  *((_QWORD *)v5 + 1) = 0;
  v5[16] = 1;
  v6 = &v1[OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_attenuationRadius];
  *(_DWORD *)v6 = 0;
  v6[4] = 1;
  v7 = &v1[OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_zNear];
  *(_DWORD *)v7 = 0;
  v7[4] = 1;
  v8 = &v1[OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_zFar];
  *(_DWORD *)v8 = 0;
  v8[4] = 1;
  v9 = &v1[OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_orthoScale];
  *(_DWORD *)v9 = 0;
  v9[4] = 1;
  v10 = &v1[OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_outerAngle];
  *(_DWORD *)v10 = 0;
  v10[4] = 1;
  v11 = &v1[OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_innerAngle];
  *(_DWORD *)v11 = 0;
  v11[4] = 1;
  v12 = &v1[OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_extents];
  *(_QWORD *)v12 = 0;
  v12[8] = 1;
  v1[OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_doubleSided] = 2;
  v13 = &v1[OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_url];
  v14 = sub_1B2228110();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v13, 1, 1, v14);
  *(_QWORD *)&v1[OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_texture] = 0;
  v15 = &v1[OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_ibl];
  *(_QWORD *)v15 = 0;
  v15[8] = 1;
  v16 = &v1[OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_textureTag];
  *v16 = 0;
  v16[1] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_type] = a1;
  v18.receiver = v1;
  v18.super_class = (Class)type metadata accessor for VFXSceneLightParameters();
  return objc_msgSendSuper2(&v18, sel_init);
}

id VFXSceneLightParameters.__allocating_init(type:intensity:color:)(uint64_t a1, float a2, __n128 a3)
{
  objc_class *v3;
  id v6;

  v6 = objc_allocWithZone(v3);
  return VFXSceneLightParameters.init(type:intensity:color:)(a1, a2, a3);
}

id VFXSceneLightParameters.init(type:intensity:color:)(uint64_t a1, float a2, __n128 a3)
{
  _BYTE *v3;
  uint64_t v6;
  __n128 *v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  _QWORD *v20;
  objc_super v23;

  v6 = OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_intensity;
  v7 = (__n128 *)&v3[OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_color];
  v8 = &v3[OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_orientation];
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = 0;
  v8[16] = 1;
  v9 = &v3[OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_position];
  *(_QWORD *)v9 = 0;
  *((_QWORD *)v9 + 1) = 0;
  v9[16] = 1;
  v10 = &v3[OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_attenuationRadius];
  *(_DWORD *)v10 = 0;
  v10[4] = 1;
  v11 = &v3[OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_zNear];
  *(_DWORD *)v11 = 0;
  v11[4] = 1;
  v12 = &v3[OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_zFar];
  *(_DWORD *)v12 = 0;
  v12[4] = 1;
  v13 = &v3[OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_orthoScale];
  *(_DWORD *)v13 = 0;
  v13[4] = 1;
  v14 = &v3[OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_outerAngle];
  *(_DWORD *)v14 = 0;
  v14[4] = 1;
  v15 = &v3[OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_innerAngle];
  *(_DWORD *)v15 = 0;
  v15[4] = 1;
  v16 = &v3[OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_extents];
  *(_QWORD *)v16 = 0;
  v16[8] = 1;
  v3[OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_doubleSided] = 2;
  v17 = &v3[OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_url];
  v18 = sub_1B2228110();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v17, 1, 1, v18);
  *(_QWORD *)&v3[OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_texture] = 0;
  v19 = &v3[OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_ibl];
  *(_QWORD *)v19 = 0;
  v19[8] = 1;
  v20 = &v3[OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_textureTag];
  *v20 = 0;
  v20[1] = 0;
  *(_QWORD *)&v3[OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_type] = a1;
  *(float *)&v3[v6] = a2;
  *v7 = a3;
  v7[1].n128_u8[0] = 0;
  v23.receiver = v3;
  v23.super_class = (Class)type metadata accessor for VFXSceneLightParameters();
  return objc_msgSendSuper2(&v23, sel_init);
}

void sub_1B19E8F48(__n128 a1)
{
  uint64_t v1;
  __n128 *v2;

  v2 = (__n128 *)(v1 + OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_orientation);
  *v2 = a1;
  v2[1].n128_u8[0] = 0;
}

void sub_1B19E8F78(__n128 a1)
{
  uint64_t v1;
  __n128 *v2;

  v2 = (__n128 *)(v1 + OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_position);
  *v2 = a1;
  v2[1].n128_u8[0] = 0;
}

void sub_1B19E8FA8(float a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = v1 + OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_attenuationRadius;
  *(float *)v2 = a1;
  *(_BYTE *)(v2 + 4) = 0;
}

void sub_1B19E8FD8(float a1, float a2, float a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = v3 + OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_orthoScale;
  *(float *)v4 = a1;
  *(_BYTE *)(v4 + 4) = 0;
  v5 = v3 + OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_zNear;
  *(float *)v5 = a2;
  *(_BYTE *)(v5 + 4) = 0;
  v6 = v3 + OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_zFar;
  *(float *)v6 = a3;
  *(_BYTE *)(v6 + 4) = 0;
}

void sub_1B19E9058(float a1, float a2, float a3, float a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = v4 + OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_outerAngle;
  *(float *)v5 = a1;
  *(_BYTE *)(v5 + 4) = 0;
  v6 = v4 + OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_innerAngle;
  *(float *)v6 = a2;
  *(_BYTE *)(v6 + 4) = 0;
  v7 = v4 + OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_zNear;
  *(float *)v7 = a3;
  *(_BYTE *)(v7 + 4) = 0;
  v8 = v4 + OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_zFar;
  *(float *)v8 = a4;
  *(_BYTE *)(v8 + 4) = 0;
}

void sub_1B19E9100(float a1, float a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = v2 + OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_zNear;
  *(float *)v3 = a1;
  *(_BYTE *)(v3 + 4) = 0;
  v4 = v2 + OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_zFar;
  *(float *)v4 = a2;
  *(_BYTE *)(v4 + 4) = 0;
}

uint64_t sub_1B19E9158(uint64_t result, double a2)
{
  uint64_t v2;
  uint64_t v3;

  v3 = v2 + OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_extents;
  *(double *)v3 = a2;
  *(_BYTE *)(v3 + 8) = 0;
  *(_BYTE *)(v2 + OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_doubleSided) = result;
  return result;
}

uint64_t sub_1B19E91A0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;

  v5 = v2 + OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_url;
  sub_1B19EC9A4(v2 + OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_url);
  sub_1B19EC90C(a1, v5);
  *(_QWORD *)(v2 + OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_texture) = a2;
  swift_unknownObjectRetain();
  return swift_unknownObjectRelease();
}

uint64_t sub_1B19E9324(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = 0xFFFFFFFFLL;
  if (result)
    v2 = result;
  v3 = v1 + OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_ibl;
  *(_QWORD *)v3 = v2;
  *(_BYTE *)(v3 + 8) = 0;
  return result;
}

uint64_t sub_1B19E936C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3 = (_QWORD *)(v2 + OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_textureTag);
  *v3 = a1;
  v3[1] = a2;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

id VFXSceneLightParameters.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void VFXSceneLightParameters.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id VFXSceneLightParameters.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for VFXSceneLightParameters();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t VFXScene.addLight(type:)(unint64_t a1)
{
  char *v1;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)&v1[OBJC_IVAR____TtC3VFX8VFXScene_entityManager];
  v4 = v1;
  sub_1B1DAD144(v3, a1, v4);
  v6 = v5;

  return v6;
}

unint64_t sub_1B19E954C@<X0>(unint64_t result@<X0>, unint64_t *a2@<X8>)
{
  unint64_t v3;

  v3 = 0;
  switch(result)
  {
    case 0uLL:
      result = sub_1B19EAD80(0, 1, (float32x4_t)xmmword_1B226CAC0);
      goto LABEL_7;
    case 1uLL:
      result = sub_1B19EB2FC(0, 1, (float32x4_t)xmmword_1B226CAC0);
      goto LABEL_7;
    case 2uLL:
      result = sub_1B19EB880(0, 1, (float32x4_t)xmmword_1B226CAC0);
      goto LABEL_7;
    case 3uLL:
      result = sub_1B19EBDFC(0, 1, (float32x4_t)xmmword_1B226CAC0);
      goto LABEL_7;
    case 4uLL:
      result = sub_1B19EC380(0, 1, (float32x4_t)xmmword_1B226CAC0);
LABEL_7:
      if (result == 0xFFFFFFFF)
        v3 = 0;
      else
        v3 = result;
      goto LABEL_10;
    case 5uLL:
LABEL_10:
      *a2 = v3;
      break;
    default:
      result = sub_1B2229F70();
      __break(1u);
      break;
  }
  return result;
}

Swift::Void __swiftcall VFXScene.removeLight(id:)(Swift::Int64 id)
{
  char *v1;

  sub_1B1D9D9A0(*(_QWORD *)&v1[OBJC_IVAR____TtC3VFX8VFXScene_entityManager], id, v1);
}

uint64_t sub_1B19E974C(uint64_t a1)
{
  if (!a1)
    a1 = 0xFFFFFFFFLL;
  return sub_1B1DA4B24(a1);
}

uint64_t sub_1B19E97EC(uint64_t a1)
{
  if (sub_1B1FD568C((uint64_t)&type metadata for DirectionalLight, (uint64_t)&off_1E6387110, a1))
    sub_1B1FE1E1C((uint64_t)&type metadata for DirectionalLight, (uint64_t)&off_1E6387098, a1, 0);
  if (sub_1B1FD568C((uint64_t)&type metadata for PointLight, (uint64_t)&off_1E636EBB8, a1))
    sub_1B1FE1E1C((uint64_t)&type metadata for PointLight, (uint64_t)&off_1E636EB40, a1, 0);
  if (sub_1B1FD568C((uint64_t)&type metadata for AmbientLight, (uint64_t)&off_1E63743F8, a1))
    sub_1B1FE1E1C((uint64_t)&type metadata for AmbientLight, (uint64_t)&off_1E6374380, a1, 0);
  if (sub_1B1FD568C((uint64_t)&type metadata for SpotLight, (uint64_t)&off_1E63C5208, a1))
    sub_1B1FE1E1C((uint64_t)&type metadata for SpotLight, (uint64_t)&off_1E63C5190, a1, 0);
  if (sub_1B1FD568C((uint64_t)&type metadata for RectAreaLight, (uint64_t)&off_1E637CB98, a1))
    sub_1B1FE1E1C((uint64_t)&type metadata for RectAreaLight, (uint64_t)&off_1E637CB68, a1, 0);
  return sub_1B1FE16DC((uint64_t)&type metadata for RectAreaLight, (uint64_t)&off_1E637CB68, a1);
}

uint64_t sub_1B19E9934(uint64_t a1)
{
  if (sub_1B1FD568C((uint64_t)&type metadata for DirectionalLight, (uint64_t)&off_1E6387110, a1))
    sub_1B1FE1E1C((uint64_t)&type metadata for DirectionalLight, (uint64_t)&off_1E6387098, a1, 0);
  if (sub_1B1FD568C((uint64_t)&type metadata for PointLight, (uint64_t)&off_1E636EBB8, a1))
    sub_1B1FE1E1C((uint64_t)&type metadata for PointLight, (uint64_t)&off_1E636EB40, a1, 0);
  if (sub_1B1FD568C((uint64_t)&type metadata for AmbientLight, (uint64_t)&off_1E63743F8, a1))
    sub_1B1FE1E1C((uint64_t)&type metadata for AmbientLight, (uint64_t)&off_1E6374380, a1, 0);
  if (sub_1B1FD568C((uint64_t)&type metadata for SpotLight, (uint64_t)&off_1E63C5208, a1))
    sub_1B1FE1E1C((uint64_t)&type metadata for SpotLight, (uint64_t)&off_1E63C5190, a1, 0);
  if (sub_1B1FD568C((uint64_t)&type metadata for RectAreaLight, (uint64_t)&off_1E637CB98, a1))
    sub_1B1FE1E1C((uint64_t)&type metadata for RectAreaLight, (uint64_t)&off_1E637CB68, a1, 0);
  return sub_1B1FE16DC((uint64_t)&type metadata for SpotLight, (uint64_t)&off_1E63C5190, a1);
}

uint64_t sub_1B19E9A7C(uint64_t a1)
{
  if (sub_1B1FD568C((uint64_t)&type metadata for DirectionalLight, (uint64_t)&off_1E6387110, a1))
    sub_1B1FE1E1C((uint64_t)&type metadata for DirectionalLight, (uint64_t)&off_1E6387098, a1, 0);
  if (sub_1B1FD568C((uint64_t)&type metadata for PointLight, (uint64_t)&off_1E636EBB8, a1))
    sub_1B1FE1E1C((uint64_t)&type metadata for PointLight, (uint64_t)&off_1E636EB40, a1, 0);
  if (sub_1B1FD568C((uint64_t)&type metadata for AmbientLight, (uint64_t)&off_1E63743F8, a1))
    sub_1B1FE1E1C((uint64_t)&type metadata for AmbientLight, (uint64_t)&off_1E6374380, a1, 0);
  if (sub_1B1FD568C((uint64_t)&type metadata for SpotLight, (uint64_t)&off_1E63C5208, a1))
    sub_1B1FE1E1C((uint64_t)&type metadata for SpotLight, (uint64_t)&off_1E63C5190, a1, 0);
  if (sub_1B1FD568C((uint64_t)&type metadata for RectAreaLight, (uint64_t)&off_1E637CB98, a1))
    sub_1B1FE1E1C((uint64_t)&type metadata for RectAreaLight, (uint64_t)&off_1E637CB68, a1, 0);
  return sub_1B1FE16DC((uint64_t)&type metadata for AmbientLight, (uint64_t)&off_1E6374380, a1);
}

uint64_t sub_1B19E9BC4(uint64_t a1)
{
  if (sub_1B1FD568C((uint64_t)&type metadata for DirectionalLight, (uint64_t)&off_1E6387110, a1))
    sub_1B1FE1E1C((uint64_t)&type metadata for DirectionalLight, (uint64_t)&off_1E6387098, a1, 0);
  if (sub_1B1FD568C((uint64_t)&type metadata for PointLight, (uint64_t)&off_1E636EBB8, a1))
    sub_1B1FE1E1C((uint64_t)&type metadata for PointLight, (uint64_t)&off_1E636EB40, a1, 0);
  if (sub_1B1FD568C((uint64_t)&type metadata for AmbientLight, (uint64_t)&off_1E63743F8, a1))
    sub_1B1FE1E1C((uint64_t)&type metadata for AmbientLight, (uint64_t)&off_1E6374380, a1, 0);
  if (sub_1B1FD568C((uint64_t)&type metadata for SpotLight, (uint64_t)&off_1E63C5208, a1))
    sub_1B1FE1E1C((uint64_t)&type metadata for SpotLight, (uint64_t)&off_1E63C5190, a1, 0);
  if (sub_1B1FD568C((uint64_t)&type metadata for RectAreaLight, (uint64_t)&off_1E637CB98, a1))
    sub_1B1FE1E1C((uint64_t)&type metadata for RectAreaLight, (uint64_t)&off_1E637CB68, a1, 0);
  return sub_1B1FE16DC((uint64_t)&type metadata for PointLight, (uint64_t)&off_1E636EB40, a1);
}

uint64_t sub_1B19E9D0C(uint64_t a1)
{
  if (sub_1B1FD568C((uint64_t)&type metadata for DirectionalLight, (uint64_t)&off_1E6387110, a1))
    sub_1B1FE1E1C((uint64_t)&type metadata for DirectionalLight, (uint64_t)&off_1E6387098, a1, 0);
  if (sub_1B1FD568C((uint64_t)&type metadata for PointLight, (uint64_t)&off_1E636EBB8, a1))
    sub_1B1FE1E1C((uint64_t)&type metadata for PointLight, (uint64_t)&off_1E636EB40, a1, 0);
  if (sub_1B1FD568C((uint64_t)&type metadata for AmbientLight, (uint64_t)&off_1E63743F8, a1))
    sub_1B1FE1E1C((uint64_t)&type metadata for AmbientLight, (uint64_t)&off_1E6374380, a1, 0);
  if (sub_1B1FD568C((uint64_t)&type metadata for SpotLight, (uint64_t)&off_1E63C5208, a1))
    sub_1B1FE1E1C((uint64_t)&type metadata for SpotLight, (uint64_t)&off_1E63C5190, a1, 0);
  if (sub_1B1FD568C((uint64_t)&type metadata for RectAreaLight, (uint64_t)&off_1E637CB98, a1))
    sub_1B1FE1E1C((uint64_t)&type metadata for RectAreaLight, (uint64_t)&off_1E637CB68, a1, 0);
  return sub_1B1FE16DC((uint64_t)&type metadata for DirectionalLight, (uint64_t)&off_1E6387098, a1);
}

void VFXScene.setLightParameters(on:parameters:)(unint64_t a1, void *a2)
{
  char *v2;

  sub_1B1D9DB34(*(_QWORD *)&v2[OBJC_IVAR____TtC3VFX8VFXScene_entityManager], a1, a2, v2);
}

void sub_1B19E9EB4(unint64_t a1, char *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  float32x2_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32_t v13;
  float32x2_t v14;
  float32x4_t v15;
  float32x4_t v16;
  simd_float4x4 v17;
  BOOL v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  simd_float4 v24;
  simd_float4 v25;
  simd_float4 v26;
  simd_float4 v27;

  if (a1)
    v4 = a1;
  else
    v4 = 0xFFFFFFFFLL;
  switch(*(_QWORD *)&a2[OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_type])
  {
    case 0:
      v6 = *(_QWORD *)(a3 + OBJC_IVAR____TtC3VFX8VFXScene_entityManager);
      if (!sub_1B1FD568C((uint64_t)&type metadata for DirectionalLight, (uint64_t)&off_1E6387110, a1 & 0xFFFFFFFF00000000 | v4))sub_1B19E9D0C(a1 & 0xFFFFFFFF00000000 | v4);
      sub_1B1FE59BC(a1 & 0xFFFFFFFF00000000 | v4, v6, a2);
      goto LABEL_21;
    case 1:
      v6 = *(_QWORD *)(a3 + OBJC_IVAR____TtC3VFX8VFXScene_entityManager);
      if (!sub_1B1FD568C((uint64_t)&type metadata for PointLight, (uint64_t)&off_1E636EBB8, a1 & 0xFFFFFFFF00000000 | v4))sub_1B19E9BC4(a1 & 0xFFFFFFFF00000000 | v4);
      sub_1B1FE5ACC(a1 & 0xFFFFFFFF00000000 | v4, v6, a2);
      goto LABEL_21;
    case 2:
      v6 = *(_QWORD *)(a3 + OBJC_IVAR____TtC3VFX8VFXScene_entityManager);
      if (!sub_1B1FD568C((uint64_t)&type metadata for AmbientLight, (uint64_t)&off_1E63743F8, a1 & 0xFFFFFFFF00000000 | v4))sub_1B19E9A7C(a1 & 0xFFFFFFFF00000000 | v4);
      sub_1B1FE5B04(a1 & 0xFFFFFFFF00000000 | v4, v6, a2);
      goto LABEL_21;
    case 3:
      v6 = *(_QWORD *)(a3 + OBJC_IVAR____TtC3VFX8VFXScene_entityManager);
      if (!sub_1B1FD568C((uint64_t)&type metadata for SpotLight, (uint64_t)&off_1E63C5208, a1 & 0xFFFFFFFF00000000 | v4))sub_1B19E9934(a1 & 0xFFFFFFFF00000000 | v4);
      sub_1B1FE5D74(a1 & 0xFFFFFFFF00000000 | v4, v6, a2);
      goto LABEL_21;
    case 4:
      v6 = *(_QWORD *)(a3 + OBJC_IVAR____TtC3VFX8VFXScene_entityManager);
      if (!sub_1B1FD568C((uint64_t)&type metadata for RectAreaLight, (uint64_t)&off_1E637CB98, a1 & 0xFFFFFFFF00000000 | v4))sub_1B19E97EC(a1 & 0xFFFFFFFF00000000 | v4);
      sub_1B1FE5E64(a1 & 0xFFFFFFFF00000000 | v4, v6, a2);
      goto LABEL_21;
    case 5:
      v6 = *(_QWORD *)(a3 + OBJC_IVAR____TtC3VFX8VFXScene_entityManager);
      sub_1B1FE6054(a1 & 0xFFFFFFFF00000000 | v4, v6, a2);
LABEL_21:

      if ((a2[OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_color + 16] & 1) == 0)
        sub_1B1FD5764(a1 & 0xFFFFFFFF00000000 | v4, v6, *(__n128 *)&a2[OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_color]);
      if ((a2[OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_orientation + 16] & 1) == 0)
      {
        v7 = (uint64_t *)&a2[OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_position];
        if ((a2[OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_position + 16] & 1) == 0)
        {
          v8 = HIDWORD(a1);
          v9 = *(float32x2_t *)&a2[OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_orientation];
          *(float32x2_t *)v10.f32 = v9;
          v10.i64[1] = *(_QWORD *)&a2[OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_orientation + 8];
          v17.columns[3].i64[0] = *v7;
          v17.columns[3].i64[1] = v7[1];
          v17.columns[3].i32[3] = 1.0;
          v11 = vmulq_f32(v10, v10);
          v12 = vmulq_laneq_f32(v10, v10, 3);
          v17.columns[0].f32[0] = vmuls_lane_f32(v9.f32[0], v9, 1);
          v13 = v17.columns[0].f32[0] - v12.f32[2];
          v11.f32[0] = 0.5 - v11.f32[0];
          v14 = vmul_n_f32(v9, v10.f32[2]);
          v15.i32[3] = 0;
          v16.i32[3] = 0;
          v16.f32[0] = (float)(0.5 - v11.f32[1]) - v11.f32[2];
          v16.f32[1] = v17.columns[0].f32[0] + v12.f32[2];
          v16.f32[2] = v14.f32[0] - v12.f32[1];
          v17.columns[0] = (simd_float4)vaddq_f32(v16, v16);
          v15.f32[0] = v13;
          v15.f32[1] = v11.f32[0] - v11.f32[2];
          v15.f32[2] = v14.f32[1] + v12.f32[0];
          v17.columns[1] = (simd_float4)vaddq_f32(v15, v15);
          *(int32x2_t *)v12.f32 = vrev64_s32(*(int32x2_t *)v12.f32);
          v17.columns[2].i32[0] = vadd_f32(v14, *(float32x2_t *)v12.f32).u32[0];
          v17.columns[2].i32[1] = vsub_f32(v14, *(float32x2_t *)&v12).i32[1];
          v17.columns[2].i64[1] = COERCE_UNSIGNED_INT(v11.f32[0] - v11.f32[1]);
          v17.columns[2] = (simd_float4)vaddq_f32((float32x4_t)v17.columns[2], (float32x4_t)v17.columns[2]);
          v18 = (_DWORD)v4 == -1 && (_DWORD)v8 == 0;
          v19 = v18;
          if (!v18)
          {
            v26 = v17.columns[0];
            v27 = v17.columns[3];
            v24 = v17.columns[2];
            v25 = v17.columns[1];
            v20 = swift_retain();
            MEMORY[0x1E0C80A78](v20, v21);
            sub_1B1D198D0(0, (void (*)(_BYTE *))sub_1B19ED814);
            swift_release();
            v17.columns[2] = v24;
            v17.columns[1] = v25;
            v17.columns[0] = v26;
            v17.columns[3] = v27;
          }
          __invert_f4(v17);
          if (!v19)
          {
            v22 = swift_retain();
            MEMORY[0x1E0C80A78](v22, v23);
            sub_1B1D198D0(0, (void (*)(_BYTE *))sub_1B19ED830);
            swift_release();
          }
        }
      }
      break;
    default:
      sub_1B2229F70();
      __break(1u);
      break;
  }
}

float sub_1B19EA350(uint64_t a1, uint64_t a2)
{
  float result;
  int v3;
  int v4;
  int v5;
  int v6;

  if ((*(_BYTE *)(a2 + OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_attenuationRadius + 4) & 1) == 0
    && (*(_BYTE *)(a2 + OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_innerAngle + 4) & 1) == 0
    && (*(_BYTE *)(a2 + OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_outerAngle + 4) & 1) == 0
    && (*(_BYTE *)(a2 + OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_zNear + 4) & 1) == 0
    && (*(_BYTE *)(a2 + OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_zFar + 4) & 1) == 0)
  {
    result = *(float *)(a2 + OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_attenuationRadius);
    v3 = *(_DWORD *)(a2 + OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_innerAngle);
    v4 = *(_DWORD *)(a2 + OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_outerAngle);
    v5 = *(_DWORD *)(a2 + OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_zFar);
    v6 = *(_DWORD *)(a2 + OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_zNear);
    *(_DWORD *)a1 = *(_DWORD *)(a2 + OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_intensity);
    *(float *)(a1 + 4) = result;
    *(_DWORD *)(a1 + 8) = v4;
    *(_DWORD *)(a1 + 12) = v3;
    *(_DWORD *)(a1 + 16) = v6;
    *(_DWORD *)(a1 + 20) = v5;
  }
  return result;
}

void VFXScene.setShadowParameters(on:castsShadows:tiles:count:depthBias:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4, float a5)
{
  char *v5;

  sub_1B1D9DD54(*(_QWORD *)&v5[OBJC_IVAR____TtC3VFX8VFXScene_entityManager], a1, v5, a2, a4, a3, a5);
}

uint64_t sub_1B19EA4E8(uint64_t a1, uint64_t a2, char a3, uint64_t a4, float a5)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = a1 & 0xFFFFFFFF00000000;
  v6 = a1;
  if (!a1)
    v6 = 0xFFFFFFFFLL;
  v7 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX8VFXScene_entityManager);
  v8 = v6 | v5;
  if ((a3 & 1) == 0)
    return sub_1B1FE1E1C((uint64_t)&type metadata for Shadow, (uint64_t)&off_1E63BCD78, v6 | v5, 0);
  sub_1B1FE16DC((uint64_t)&type metadata for Shadow, (uint64_t)&off_1E63BCD78, v6 | v5);
  return sub_1B1FD5A28(v8, v7, a4, a5);
}

uint64_t sub_1B19EA5AC(uint64_t a1, uint64_t a2, float a3)
{
  char *v6;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  uint64_t result;

  v6 = *(char **)(a1 + 8);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || a2 > *((_QWORD *)v6 + 3) >> 1)
  {
    if (*((_QWORD *)v6 + 2) <= a2)
      v8 = a2;
    else
      v8 = *((_QWORD *)v6 + 2);
    v6 = sub_1B1791058(isUniquelyReferenced_nonNull_native, v8, 0, v6);
  }
  sub_1B19ED7D0();
  result = sub_1B2227DB0();
  *(_QWORD *)(a1 + 8) = v6;
  *(float *)a1 = a3;
  return result;
}

void VFXScene.setDirectionalLightUniformOverrides(on:world:proj:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v3;

  sub_1B1D9DF6C(*(_QWORD *)&v3[OBJC_IVAR____TtC3VFX8VFXScene_entityManager], a1, a2, a3, v3);
}

uint64_t *sub_1B19EA77C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  v4 = 0xFFFFFFFFLL;
  if (a1)
    v4 = a1;
  return sub_1B1D8F348(*(_QWORD *)(a4 + OBJC_IVAR____TtC3VFX8VFXScene_entityManager), v4);
}

uint64_t VFXScene.createSkybox(parameters:)(void *a1)
{
  char *v1;
  uint64_t v2;
  id v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD *)&v1[OBJC_IVAR____TtC3VFX8VFXScene_entityManager];
  v3 = a1;
  v4 = v1;
  sub_1B1DAD330(v2, v3, v4);
  v6 = v5;

  return v6;
}

void sub_1B19EA8B0(uint64_t a1@<X0>, void *a2@<X1>, unint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;

  sub_1B1791524(0, (unint64_t *)&qword_1ED4BF720, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v22 - v8;
  v10 = sub_1B2228110();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v12);
  v14 = (char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1B19EC90C(a1 + OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_url, (uint64_t)v9);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    sub_1B19EC9A4((uint64_t)v9);
    if (*(_QWORD *)(a1 + OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_texture))
    {
LABEL_3:
      v15 = 0;
      goto LABEL_7;
    }
    if ((*(_BYTE *)(a1 + OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_ibl + 8) & 1) != 0)
    {
      if (!*(_QWORD *)(a1 + OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_textureTag + 8))
        goto LABEL_3;
      swift_bridgeObjectRetain();
      v17 = (void *)sub_1B2228728();
      swift_bridgeObjectRelease();
      v18 = (unint64_t)objc_msgSend(a2, sel_entityWithTag_, v17);

      v19 = v18 ? v18 : 0xFFFFFFFFLL;
      if (!HIDWORD(v18) && (_DWORD)v19 == -1)
        goto LABEL_3;
      v20 = v18 & 0xFFFFFFFF00000000 | v19;
    }
    else
    {
      v20 = *(_QWORD *)(a1 + OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_ibl);
    }
    v21 = sub_1B1BD7430(v20, 1, 1, 1.0, 0.0);
    if (v21 == 0xFFFFFFFF)
      v15 = 0;
    else
      v15 = v21;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v14, v9, v10);
    v16 = sub_1B1BD7198((uint64_t)v14, 1, 1, 1.0, 0.0);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
    if (v16 == 0xFFFFFFFFLL)
      v15 = 0;
    else
      v15 = v16;
  }
LABEL_7:
  *a3 = v15;
}

Swift::Void __swiftcall VFXScene.removeSkyboxes()()
{
  char *v0;

  sub_1B1D9E14C(*(_QWORD *)&v0[OBJC_IVAR____TtC3VFX8VFXScene_entityManager], v0);
}

uint64_t *sub_1B19EABB8(uint64_t a1)
{
  uint64_t v1;
  _OWORD v3[2];
  uint64_t v4;
  uint64_t v5[8];
  _OWORD v6[12];
  _OWORD v7[2];
  uint64_t v8;
  uint64_t v9;
  int v10;
  char v11;
  uint64_t v12;
  char v13;
  uint64_t v14;

  v1 = *(_QWORD *)(a1 + OBJC_IVAR____TtC3VFX8VFXScene_entityManager);
  if (qword_1ED4B7DB8 != -1)
    swift_once();
  v9 = qword_1ED4D09F8;
  v10 = 0;
  v11 = 2;
  v12 = 0;
  v13 = 2;
  v14 = 0;
  swift_retain();
  sub_1B1E386B8(1, (uint64_t)v3);
  swift_release();
  v7[0] = v3[0];
  v7[1] = v3[1];
  v8 = v4;
  sub_1B1E8FCE4(v1, (uint64_t)v7, 0x200000000, v5);
  sub_1B19ED688((uint64_t)v5, (uint64_t)v6);
  if (!*(_QWORD *)&v6[0])
    return (uint64_t *)sub_1B19ED720((uint64_t)v3);
  v6[8] = v6[2];
  v6[9] = v6[3];
  v6[10] = v6[4];
  v6[11] = v6[5];
  v6[6] = v6[0];
  v6[7] = v6[1];
  sub_1B19ED720((uint64_t)v3);
  swift_retain();
  swift_retain();
  swift_retain();
  sub_1B1BEAAFC(0);
  sub_1B19ED748(v5);
  return sub_1B19ED748(v5);
}

unint64_t sub_1B19EAD80(char a1, char a2, float32x4_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  os_unfair_lock_s *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  unint64_t v29;
  int v30;
  uint64_t v31;
  os_unfair_lock_s *v32;
  uint64_t KeyPath;
  uint64_t v34;
  signed int v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  simd_float4 v41;
  simd_float4 v42;
  int32x4_t v43;
  int8x16_t v44;
  uint64_t v45;
  uint64_t v46;
  int8x16_t v49;
  int v50;

  v4 = v3;
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAD80, (uint64_t (*)(uint64_t))sub_1B19ED84C, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_1B226CAD0;
  *(_QWORD *)(v7 + 32) = &type metadata for DirectionalLight;
  *(_QWORD *)(v7 + 40) = &off_1E6387098;
  *(_QWORD *)(v7 + 48) = &type metadata for Name;
  *(_QWORD *)(v7 + 56) = &off_1E63B9AE8;
  *(_QWORD *)(v7 + 64) = &type metadata for WorldTransform;
  *(_QWORD *)(v7 + 72) = &off_1E6382C00;
  *(_QWORD *)(v7 + 80) = &type metadata for Color;
  *(_QWORD *)(v7 + 88) = &off_1E63BA190;
  *(_QWORD *)(v7 + 96) = type metadata accessor for VFXObjectTag();
  *(_QWORD *)(v7 + 104) = &off_1E63786A0;
  if ((a2 & 1) != 0)
  {
    v8 = sub_1B1C62F18(1, 6, 1, (char *)v7);
    *((_QWORD *)v8 + 2) = 6;
    *((_QWORD *)v8 + 14) = &type metadata for Beamed;
    *((_QWORD *)v8 + 15) = &off_1E63BB000;
    if ((a1 & 1) == 0)
      goto LABEL_12;
    goto LABEL_9;
  }
  v8 = sub_1B1C62F18(1, 7, 1, (char *)v7);
  v10 = *((_QWORD *)v8 + 2);
  v9 = *((_QWORD *)v8 + 3);
  v11 = v9 >> 1;
  v12 = v10 + 1;
  if (v9 >> 1 <= v10)
  {
    v8 = sub_1B1C62F18(v9 > 1, v10 + 1, 1, v8);
    v9 = *((_QWORD *)v8 + 3);
    v11 = v9 >> 1;
  }
  *((_QWORD *)v8 + 2) = v12;
  v13 = &v8[16 * v10];
  *((_QWORD *)v13 + 4) = &type metadata for Position;
  *((_QWORD *)v13 + 5) = &off_1E63C2398;
  v14 = v10 + 2;
  if (v11 < v14)
    v8 = sub_1B1C62F18(v9 > 1, v14, 1, v8);
  *((_QWORD *)v8 + 2) = v14;
  v15 = &v8[16 * v12];
  *((_QWORD *)v15 + 4) = &type metadata for Orientation;
  *((_QWORD *)v15 + 5) = &off_1E6371540;
  if ((a1 & 1) != 0)
  {
LABEL_9:
    v17 = *((_QWORD *)v8 + 2);
    v16 = *((_QWORD *)v8 + 3);
    if (v17 >= v16 >> 1)
      v8 = sub_1B1C62F18(v16 > 1, v17 + 1, 1, v8);
    *((_QWORD *)v8 + 2) = v17 + 1;
    v18 = &v8[16 * v17];
    *((_QWORD *)v18 + 4) = &type metadata for Shadow;
    *((_QWORD *)v18 + 5) = &off_1E63BCD78;
  }
LABEL_12:
  v19 = **(_QWORD **)(v4 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues);
  v20 = *(_QWORD *)(v19 + 16);
  v21 = v20 + OBJC_IVAR____TtC3VFX13EntityManager_lock;
  v22 = *(os_unfair_lock_s **)(v20 + OBJC_IVAR____TtC3VFX13EntityManager_lock + 24);
  swift_retain();
  os_unfair_lock_lock(v22);
  v23 = swift_bridgeObjectRetain();
  v24 = sub_1B1DAD000(v23, MEMORY[0x1E0DEE9D8]);
  v26 = v25;
  swift_bridgeObjectRelease();
  v27 = sub_1B1DA8760(v24);
  if ((v28 & 1) != 0 || (v29 = sub_1B1DA87D4(v26, v27), v30 = v29, (v29 & 0x100000000) != 0))
  {
    swift_bridgeObjectRetain();
    v30 = sub_1B1DA8838(v24, v26, (uint64_t)v8, MEMORY[0x1E0DEE9D8]);
    swift_bridgeObjectRelease();
  }
  v31 = *(_QWORD *)(*(_QWORD *)(v20 + 80) + 8 * v30 + 32);
  v32 = *(os_unfair_lock_s **)(v21 + 24);
  swift_retain();
  os_unfair_lock_unlock(v32);
  swift_release();
  swift_retain();
  KeyPath = swift_getKeyPath();
  sub_1B1DAC77C(KeyPath, 1);
  swift_release();
  swift_release();
  swift_retain();
  v34 = swift_getKeyPath();
  sub_1B1DAC77C(v34, 1);
  swift_release();
  swift_release();
  v35 = *(_DWORD *)(v31 + 204);
  if ((*(_BYTE *)(v31 + 208) & 1) != 0)
  {
    v36 = 0;
    LODWORD(v37) = -1;
  }
  else
  {
    swift_retain();
    v37 = sub_1B1DA8E54();
    swift_release();
    v36 = HIDWORD(v37);
  }
  v50 = -1;
  v38 = *(_QWORD *)(v19 + 16);
  swift_retain();
  swift_retain();
  v49.i8[0] = 1;
  sub_1B1C92338(v35, 0x100000000uLL, 1, v38, v49.i64, v37, &v50, v31, v19, v35, SHIWORD(v35), 1);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release_n();
  v49.i64[0] = 0xD000000000000014;
  v49.i64[1] = 0x80000001B232B710;
  if ((_DWORD)v37 != -1 || (_DWORD)v36)
  {
    v39 = swift_retain();
    MEMORY[0x1E0C80A78](v39, v40);
    sub_1B1D198D0(0, (void (*)(_BYTE *))sub_1B19ED8D8);
    swift_release();
    v41 = (simd_float4)vdivq_f32(vaddq_f32(a3, (float32x4_t)vdupq_n_s32(0x3D6147AEu)), (float32x4_t)vdupq_n_s32(0x3F870A3Du));
    v41.i32[3] = 0;
    v42 = _simd_pow_f4(v41, (simd_float4)xmmword_1B2268F30);
    v43 = vcgeq_f32((float32x4_t)vdupq_n_s32(0x3D25AEE6u), a3);
    v43.i32[3] = 0;
    v44 = vbslq_s8((int8x16_t)vcltzq_s32(v43), (int8x16_t)vdivq_f32(a3, (float32x4_t)vdupq_n_s32(0x414EB852u)), (int8x16_t)v42);
    v44.i32[3] = 1.0;
    v49 = v44;
    v45 = swift_retain();
    MEMORY[0x1E0C80A78](v45, v46);
    sub_1B1D198D0(0, (void (*)(_BYTE *))sub_1B19ED8F4);
    swift_release();
  }
  return v37 | (v36 << 32);
}

unint64_t sub_1B19EB2FC(char a1, char a2, float32x4_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  os_unfair_lock_s *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  unint64_t v29;
  int v30;
  uint64_t v31;
  os_unfair_lock_s *v32;
  uint64_t KeyPath;
  uint64_t v34;
  signed int v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  simd_float4 v41;
  simd_float4 v42;
  int32x4_t v43;
  int8x16_t v44;
  uint64_t v45;
  uint64_t v46;
  int8x16_t v49;
  int v50;

  v4 = v3;
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAD80, (uint64_t (*)(uint64_t))sub_1B19ED84C, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_1B226CAD0;
  *(_QWORD *)(v7 + 32) = &type metadata for PointLight;
  *(_QWORD *)(v7 + 40) = &off_1E636EB40;
  *(_QWORD *)(v7 + 48) = &type metadata for Name;
  *(_QWORD *)(v7 + 56) = &off_1E63B9AE8;
  *(_QWORD *)(v7 + 64) = &type metadata for WorldTransform;
  *(_QWORD *)(v7 + 72) = &off_1E6382C00;
  *(_QWORD *)(v7 + 80) = &type metadata for Color;
  *(_QWORD *)(v7 + 88) = &off_1E63BA190;
  *(_QWORD *)(v7 + 96) = type metadata accessor for VFXObjectTag();
  *(_QWORD *)(v7 + 104) = &off_1E63786A0;
  if ((a2 & 1) != 0)
  {
    v8 = sub_1B1C62F18(1, 6, 1, (char *)v7);
    *((_QWORD *)v8 + 2) = 6;
    *((_QWORD *)v8 + 14) = &type metadata for Beamed;
    *((_QWORD *)v8 + 15) = &off_1E63BB000;
    if ((a1 & 1) == 0)
      goto LABEL_12;
    goto LABEL_9;
  }
  v8 = sub_1B1C62F18(1, 7, 1, (char *)v7);
  v10 = *((_QWORD *)v8 + 2);
  v9 = *((_QWORD *)v8 + 3);
  v11 = v9 >> 1;
  v12 = v10 + 1;
  if (v9 >> 1 <= v10)
  {
    v8 = sub_1B1C62F18(v9 > 1, v10 + 1, 1, v8);
    v9 = *((_QWORD *)v8 + 3);
    v11 = v9 >> 1;
  }
  *((_QWORD *)v8 + 2) = v12;
  v13 = &v8[16 * v10];
  *((_QWORD *)v13 + 4) = &type metadata for Position;
  *((_QWORD *)v13 + 5) = &off_1E63C2398;
  v14 = v10 + 2;
  if (v11 < v14)
    v8 = sub_1B1C62F18(v9 > 1, v14, 1, v8);
  *((_QWORD *)v8 + 2) = v14;
  v15 = &v8[16 * v12];
  *((_QWORD *)v15 + 4) = &type metadata for Orientation;
  *((_QWORD *)v15 + 5) = &off_1E6371540;
  if ((a1 & 1) != 0)
  {
LABEL_9:
    v17 = *((_QWORD *)v8 + 2);
    v16 = *((_QWORD *)v8 + 3);
    if (v17 >= v16 >> 1)
      v8 = sub_1B1C62F18(v16 > 1, v17 + 1, 1, v8);
    *((_QWORD *)v8 + 2) = v17 + 1;
    v18 = &v8[16 * v17];
    *((_QWORD *)v18 + 4) = &type metadata for Shadow;
    *((_QWORD *)v18 + 5) = &off_1E63BCD78;
  }
LABEL_12:
  v19 = **(_QWORD **)(v4 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues);
  v20 = *(_QWORD *)(v19 + 16);
  v21 = v20 + OBJC_IVAR____TtC3VFX13EntityManager_lock;
  v22 = *(os_unfair_lock_s **)(v20 + OBJC_IVAR____TtC3VFX13EntityManager_lock + 24);
  swift_retain();
  os_unfair_lock_lock(v22);
  v23 = swift_bridgeObjectRetain();
  v24 = sub_1B1DAD000(v23, MEMORY[0x1E0DEE9D8]);
  v26 = v25;
  swift_bridgeObjectRelease();
  v27 = sub_1B1DA8760(v24);
  if ((v28 & 1) != 0 || (v29 = sub_1B1DA87D4(v26, v27), v30 = v29, (v29 & 0x100000000) != 0))
  {
    swift_bridgeObjectRetain();
    v30 = sub_1B1DA8838(v24, v26, (uint64_t)v8, MEMORY[0x1E0DEE9D8]);
    swift_bridgeObjectRelease();
  }
  v31 = *(_QWORD *)(*(_QWORD *)(v20 + 80) + 8 * v30 + 32);
  v32 = *(os_unfair_lock_s **)(v21 + 24);
  swift_retain();
  os_unfair_lock_unlock(v32);
  swift_release();
  swift_retain();
  KeyPath = swift_getKeyPath();
  sub_1B1DAC77C(KeyPath, 1);
  swift_release();
  swift_release();
  swift_retain();
  v34 = swift_getKeyPath();
  sub_1B1DAC77C(v34, 1);
  swift_release();
  swift_release();
  v35 = *(_DWORD *)(v31 + 204);
  if ((*(_BYTE *)(v31 + 208) & 1) != 0)
  {
    v36 = 0;
    LODWORD(v37) = -1;
  }
  else
  {
    swift_retain();
    v37 = sub_1B1DA8E54();
    swift_release();
    v36 = HIDWORD(v37);
  }
  v50 = -1;
  v38 = *(_QWORD *)(v19 + 16);
  swift_retain();
  swift_retain();
  v49.i8[0] = 1;
  sub_1B1C92338(v35, 0x100000000uLL, 1, v38, v49.i64, v37, &v50, v31, v19, v35, SHIWORD(v35), 1);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release_n();
  strcpy(v49.i8, "VFX.PointLight");
  v49.i8[15] = -18;
  if ((_DWORD)v37 != -1 || (_DWORD)v36)
  {
    v39 = swift_retain();
    MEMORY[0x1E0C80A78](v39, v40);
    sub_1B1D198D0(0, (void (*)(_BYTE *))sub_1B19ED93C);
    swift_release();
    v41 = (simd_float4)vdivq_f32(vaddq_f32(a3, (float32x4_t)vdupq_n_s32(0x3D6147AEu)), (float32x4_t)vdupq_n_s32(0x3F870A3Du));
    v41.i32[3] = 0;
    v42 = _simd_pow_f4(v41, (simd_float4)xmmword_1B2268F30);
    v43 = vcgeq_f32((float32x4_t)vdupq_n_s32(0x3D25AEE6u), a3);
    v43.i32[3] = 0;
    v44 = vbslq_s8((int8x16_t)vcltzq_s32(v43), (int8x16_t)vdivq_f32(a3, (float32x4_t)vdupq_n_s32(0x414EB852u)), (int8x16_t)v42);
    v44.i32[3] = 1.0;
    v49 = v44;
    v45 = swift_retain();
    MEMORY[0x1E0C80A78](v45, v46);
    sub_1B1D198D0(0, (void (*)(_BYTE *))sub_1B19ED8F4);
    swift_release();
  }
  return v37 | (v36 << 32);
}

unint64_t sub_1B19EB880(char a1, char a2, float32x4_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  os_unfair_lock_s *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  unint64_t v29;
  int v30;
  uint64_t v31;
  os_unfair_lock_s *v32;
  uint64_t KeyPath;
  uint64_t v34;
  signed int v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  simd_float4 v41;
  simd_float4 v42;
  int32x4_t v43;
  int8x16_t v44;
  uint64_t v45;
  uint64_t v46;
  int8x16_t v49;
  int v50;

  v4 = v3;
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAD80, (uint64_t (*)(uint64_t))sub_1B19ED84C, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_1B226CAD0;
  *(_QWORD *)(v7 + 32) = &type metadata for AmbientLight;
  *(_QWORD *)(v7 + 40) = &off_1E6374380;
  *(_QWORD *)(v7 + 48) = &type metadata for Name;
  *(_QWORD *)(v7 + 56) = &off_1E63B9AE8;
  *(_QWORD *)(v7 + 64) = &type metadata for WorldTransform;
  *(_QWORD *)(v7 + 72) = &off_1E6382C00;
  *(_QWORD *)(v7 + 80) = &type metadata for Color;
  *(_QWORD *)(v7 + 88) = &off_1E63BA190;
  *(_QWORD *)(v7 + 96) = type metadata accessor for VFXObjectTag();
  *(_QWORD *)(v7 + 104) = &off_1E63786A0;
  if ((a2 & 1) != 0)
  {
    v8 = sub_1B1C62F18(1, 6, 1, (char *)v7);
    *((_QWORD *)v8 + 2) = 6;
    *((_QWORD *)v8 + 14) = &type metadata for Beamed;
    *((_QWORD *)v8 + 15) = &off_1E63BB000;
    if ((a1 & 1) == 0)
      goto LABEL_12;
    goto LABEL_9;
  }
  v8 = sub_1B1C62F18(1, 7, 1, (char *)v7);
  v10 = *((_QWORD *)v8 + 2);
  v9 = *((_QWORD *)v8 + 3);
  v11 = v9 >> 1;
  v12 = v10 + 1;
  if (v9 >> 1 <= v10)
  {
    v8 = sub_1B1C62F18(v9 > 1, v10 + 1, 1, v8);
    v9 = *((_QWORD *)v8 + 3);
    v11 = v9 >> 1;
  }
  *((_QWORD *)v8 + 2) = v12;
  v13 = &v8[16 * v10];
  *((_QWORD *)v13 + 4) = &type metadata for Position;
  *((_QWORD *)v13 + 5) = &off_1E63C2398;
  v14 = v10 + 2;
  if (v11 < v14)
    v8 = sub_1B1C62F18(v9 > 1, v14, 1, v8);
  *((_QWORD *)v8 + 2) = v14;
  v15 = &v8[16 * v12];
  *((_QWORD *)v15 + 4) = &type metadata for Orientation;
  *((_QWORD *)v15 + 5) = &off_1E6371540;
  if ((a1 & 1) != 0)
  {
LABEL_9:
    v17 = *((_QWORD *)v8 + 2);
    v16 = *((_QWORD *)v8 + 3);
    if (v17 >= v16 >> 1)
      v8 = sub_1B1C62F18(v16 > 1, v17 + 1, 1, v8);
    *((_QWORD *)v8 + 2) = v17 + 1;
    v18 = &v8[16 * v17];
    *((_QWORD *)v18 + 4) = &type metadata for Shadow;
    *((_QWORD *)v18 + 5) = &off_1E63BCD78;
  }
LABEL_12:
  v19 = **(_QWORD **)(v4 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues);
  v20 = *(_QWORD *)(v19 + 16);
  v21 = v20 + OBJC_IVAR____TtC3VFX13EntityManager_lock;
  v22 = *(os_unfair_lock_s **)(v20 + OBJC_IVAR____TtC3VFX13EntityManager_lock + 24);
  swift_retain();
  os_unfair_lock_lock(v22);
  v23 = swift_bridgeObjectRetain();
  v24 = sub_1B1DAD000(v23, MEMORY[0x1E0DEE9D8]);
  v26 = v25;
  swift_bridgeObjectRelease();
  v27 = sub_1B1DA8760(v24);
  if ((v28 & 1) != 0 || (v29 = sub_1B1DA87D4(v26, v27), v30 = v29, (v29 & 0x100000000) != 0))
  {
    swift_bridgeObjectRetain();
    v30 = sub_1B1DA8838(v24, v26, (uint64_t)v8, MEMORY[0x1E0DEE9D8]);
    swift_bridgeObjectRelease();
  }
  v31 = *(_QWORD *)(*(_QWORD *)(v20 + 80) + 8 * v30 + 32);
  v32 = *(os_unfair_lock_s **)(v21 + 24);
  swift_retain();
  os_unfair_lock_unlock(v32);
  swift_release();
  swift_retain();
  KeyPath = swift_getKeyPath();
  sub_1B1DAC77C(KeyPath, 1);
  swift_release();
  swift_release();
  swift_retain();
  v34 = swift_getKeyPath();
  sub_1B1DAC77C(v34, 1);
  swift_release();
  swift_release();
  v35 = *(_DWORD *)(v31 + 204);
  if ((*(_BYTE *)(v31 + 208) & 1) != 0)
  {
    v36 = 0;
    LODWORD(v37) = -1;
  }
  else
  {
    swift_retain();
    v37 = sub_1B1DA8E54();
    swift_release();
    v36 = HIDWORD(v37);
  }
  v50 = -1;
  v38 = *(_QWORD *)(v19 + 16);
  swift_retain();
  swift_retain();
  v49.i8[0] = 1;
  sub_1B1C92338(v35, 0x100000000uLL, 1, v38, v49.i64, v37, &v50, v31, v19, v35, SHIWORD(v35), 1);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release_n();
  v49.i64[0] = 0xD000000000000010;
  v49.i64[1] = 0x80000001B232B730;
  if ((_DWORD)v37 != -1 || (_DWORD)v36)
  {
    v39 = swift_retain();
    MEMORY[0x1E0C80A78](v39, v40);
    sub_1B1D198D0(0, (void (*)(_BYTE *))sub_1B19ED93C);
    swift_release();
    v41 = (simd_float4)vdivq_f32(vaddq_f32(a3, (float32x4_t)vdupq_n_s32(0x3D6147AEu)), (float32x4_t)vdupq_n_s32(0x3F870A3Du));
    v41.i32[3] = 0;
    v42 = _simd_pow_f4(v41, (simd_float4)xmmword_1B2268F30);
    v43 = vcgeq_f32((float32x4_t)vdupq_n_s32(0x3D25AEE6u), a3);
    v43.i32[3] = 0;
    v44 = vbslq_s8((int8x16_t)vcltzq_s32(v43), (int8x16_t)vdivq_f32(a3, (float32x4_t)vdupq_n_s32(0x414EB852u)), (int8x16_t)v42);
    v44.i32[3] = 1.0;
    v49 = v44;
    v45 = swift_retain();
    MEMORY[0x1E0C80A78](v45, v46);
    sub_1B1D198D0(0, (void (*)(_BYTE *))sub_1B19ED8F4);
    swift_release();
  }
  return v37 | (v36 << 32);
}

unint64_t sub_1B19EBDFC(char a1, char a2, float32x4_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  os_unfair_lock_s *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  unint64_t v29;
  int v30;
  uint64_t v31;
  os_unfair_lock_s *v32;
  uint64_t KeyPath;
  uint64_t v34;
  signed int v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  simd_float4 v41;
  simd_float4 v42;
  int32x4_t v43;
  int8x16_t v44;
  uint64_t v45;
  uint64_t v46;
  int8x16_t v49;
  int v50;

  v4 = v3;
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAD80, (uint64_t (*)(uint64_t))sub_1B19ED84C, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_1B226CAD0;
  *(_QWORD *)(v7 + 32) = &type metadata for SpotLight;
  *(_QWORD *)(v7 + 40) = &off_1E63C5190;
  *(_QWORD *)(v7 + 48) = &type metadata for Name;
  *(_QWORD *)(v7 + 56) = &off_1E63B9AE8;
  *(_QWORD *)(v7 + 64) = &type metadata for WorldTransform;
  *(_QWORD *)(v7 + 72) = &off_1E6382C00;
  *(_QWORD *)(v7 + 80) = &type metadata for Color;
  *(_QWORD *)(v7 + 88) = &off_1E63BA190;
  *(_QWORD *)(v7 + 96) = type metadata accessor for VFXObjectTag();
  *(_QWORD *)(v7 + 104) = &off_1E63786A0;
  if ((a2 & 1) != 0)
  {
    v8 = sub_1B1C62F18(1, 6, 1, (char *)v7);
    *((_QWORD *)v8 + 2) = 6;
    *((_QWORD *)v8 + 14) = &type metadata for Beamed;
    *((_QWORD *)v8 + 15) = &off_1E63BB000;
    if ((a1 & 1) == 0)
      goto LABEL_12;
    goto LABEL_9;
  }
  v8 = sub_1B1C62F18(1, 7, 1, (char *)v7);
  v10 = *((_QWORD *)v8 + 2);
  v9 = *((_QWORD *)v8 + 3);
  v11 = v9 >> 1;
  v12 = v10 + 1;
  if (v9 >> 1 <= v10)
  {
    v8 = sub_1B1C62F18(v9 > 1, v10 + 1, 1, v8);
    v9 = *((_QWORD *)v8 + 3);
    v11 = v9 >> 1;
  }
  *((_QWORD *)v8 + 2) = v12;
  v13 = &v8[16 * v10];
  *((_QWORD *)v13 + 4) = &type metadata for Position;
  *((_QWORD *)v13 + 5) = &off_1E63C2398;
  v14 = v10 + 2;
  if (v11 < v14)
    v8 = sub_1B1C62F18(v9 > 1, v14, 1, v8);
  *((_QWORD *)v8 + 2) = v14;
  v15 = &v8[16 * v12];
  *((_QWORD *)v15 + 4) = &type metadata for Orientation;
  *((_QWORD *)v15 + 5) = &off_1E6371540;
  if ((a1 & 1) != 0)
  {
LABEL_9:
    v17 = *((_QWORD *)v8 + 2);
    v16 = *((_QWORD *)v8 + 3);
    if (v17 >= v16 >> 1)
      v8 = sub_1B1C62F18(v16 > 1, v17 + 1, 1, v8);
    *((_QWORD *)v8 + 2) = v17 + 1;
    v18 = &v8[16 * v17];
    *((_QWORD *)v18 + 4) = &type metadata for Shadow;
    *((_QWORD *)v18 + 5) = &off_1E63BCD78;
  }
LABEL_12:
  v19 = **(_QWORD **)(v4 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues);
  v20 = *(_QWORD *)(v19 + 16);
  v21 = v20 + OBJC_IVAR____TtC3VFX13EntityManager_lock;
  v22 = *(os_unfair_lock_s **)(v20 + OBJC_IVAR____TtC3VFX13EntityManager_lock + 24);
  swift_retain();
  os_unfair_lock_lock(v22);
  v23 = swift_bridgeObjectRetain();
  v24 = sub_1B1DAD000(v23, MEMORY[0x1E0DEE9D8]);
  v26 = v25;
  swift_bridgeObjectRelease();
  v27 = sub_1B1DA8760(v24);
  if ((v28 & 1) != 0 || (v29 = sub_1B1DA87D4(v26, v27), v30 = v29, (v29 & 0x100000000) != 0))
  {
    swift_bridgeObjectRetain();
    v30 = sub_1B1DA8838(v24, v26, (uint64_t)v8, MEMORY[0x1E0DEE9D8]);
    swift_bridgeObjectRelease();
  }
  v31 = *(_QWORD *)(*(_QWORD *)(v20 + 80) + 8 * v30 + 32);
  v32 = *(os_unfair_lock_s **)(v21 + 24);
  swift_retain();
  os_unfair_lock_unlock(v32);
  swift_release();
  swift_retain();
  KeyPath = swift_getKeyPath();
  sub_1B1DAC77C(KeyPath, 1);
  swift_release();
  swift_release();
  swift_retain();
  v34 = swift_getKeyPath();
  sub_1B1DAC77C(v34, 1);
  swift_release();
  swift_release();
  v35 = *(_DWORD *)(v31 + 204);
  if ((*(_BYTE *)(v31 + 208) & 1) != 0)
  {
    v36 = 0;
    LODWORD(v37) = -1;
  }
  else
  {
    swift_retain();
    v37 = sub_1B1DA8E54();
    swift_release();
    v36 = HIDWORD(v37);
  }
  v50 = -1;
  v38 = *(_QWORD *)(v19 + 16);
  swift_retain();
  swift_retain();
  v49.i8[0] = 1;
  sub_1B1C92338(v35, 0x100000000uLL, 1, v38, v49.i64, v37, &v50, v31, v19, v35, SHIWORD(v35), 1);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release_n();
  strcpy(v49.i8, "VFX.SpotLight");
  v49.i16[7] = -4864;
  if ((_DWORD)v37 != -1 || (_DWORD)v36)
  {
    v39 = swift_retain();
    MEMORY[0x1E0C80A78](v39, v40);
    sub_1B1D198D0(0, (void (*)(_BYTE *))sub_1B19ED93C);
    swift_release();
    v41 = (simd_float4)vdivq_f32(vaddq_f32(a3, (float32x4_t)vdupq_n_s32(0x3D6147AEu)), (float32x4_t)vdupq_n_s32(0x3F870A3Du));
    v41.i32[3] = 0;
    v42 = _simd_pow_f4(v41, (simd_float4)xmmword_1B2268F30);
    v43 = vcgeq_f32((float32x4_t)vdupq_n_s32(0x3D25AEE6u), a3);
    v43.i32[3] = 0;
    v44 = vbslq_s8((int8x16_t)vcltzq_s32(v43), (int8x16_t)vdivq_f32(a3, (float32x4_t)vdupq_n_s32(0x414EB852u)), (int8x16_t)v42);
    v44.i32[3] = 1.0;
    v49 = v44;
    v45 = swift_retain();
    MEMORY[0x1E0C80A78](v45, v46);
    sub_1B1D198D0(0, (void (*)(_BYTE *))sub_1B19ED8F4);
    swift_release();
  }
  return v37 | (v36 << 32);
}

unint64_t sub_1B19EC380(char a1, char a2, float32x4_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  os_unfair_lock_s *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  unint64_t v29;
  int v30;
  uint64_t v31;
  os_unfair_lock_s *v32;
  uint64_t KeyPath;
  uint64_t v34;
  signed int v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  simd_float4 v41;
  simd_float4 v42;
  int32x4_t v43;
  int8x16_t v44;
  uint64_t v45;
  uint64_t v46;
  int8x16_t v49;
  int v50;

  v4 = v3;
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAD80, (uint64_t (*)(uint64_t))sub_1B19ED84C, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_1B226CAD0;
  *(_QWORD *)(v7 + 32) = &type metadata for RectAreaLight;
  *(_QWORD *)(v7 + 40) = &off_1E637CB68;
  *(_QWORD *)(v7 + 48) = &type metadata for Name;
  *(_QWORD *)(v7 + 56) = &off_1E63B9AE8;
  *(_QWORD *)(v7 + 64) = &type metadata for WorldTransform;
  *(_QWORD *)(v7 + 72) = &off_1E6382C00;
  *(_QWORD *)(v7 + 80) = &type metadata for Color;
  *(_QWORD *)(v7 + 88) = &off_1E63BA190;
  *(_QWORD *)(v7 + 96) = type metadata accessor for VFXObjectTag();
  *(_QWORD *)(v7 + 104) = &off_1E63786A0;
  if ((a2 & 1) != 0)
  {
    v8 = sub_1B1C62F18(1, 6, 1, (char *)v7);
    *((_QWORD *)v8 + 2) = 6;
    *((_QWORD *)v8 + 14) = &type metadata for Beamed;
    *((_QWORD *)v8 + 15) = &off_1E63BB000;
    if ((a1 & 1) == 0)
      goto LABEL_12;
    goto LABEL_9;
  }
  v8 = sub_1B1C62F18(1, 7, 1, (char *)v7);
  v10 = *((_QWORD *)v8 + 2);
  v9 = *((_QWORD *)v8 + 3);
  v11 = v9 >> 1;
  v12 = v10 + 1;
  if (v9 >> 1 <= v10)
  {
    v8 = sub_1B1C62F18(v9 > 1, v10 + 1, 1, v8);
    v9 = *((_QWORD *)v8 + 3);
    v11 = v9 >> 1;
  }
  *((_QWORD *)v8 + 2) = v12;
  v13 = &v8[16 * v10];
  *((_QWORD *)v13 + 4) = &type metadata for Position;
  *((_QWORD *)v13 + 5) = &off_1E63C2398;
  v14 = v10 + 2;
  if (v11 < v14)
    v8 = sub_1B1C62F18(v9 > 1, v14, 1, v8);
  *((_QWORD *)v8 + 2) = v14;
  v15 = &v8[16 * v12];
  *((_QWORD *)v15 + 4) = &type metadata for Orientation;
  *((_QWORD *)v15 + 5) = &off_1E6371540;
  if ((a1 & 1) != 0)
  {
LABEL_9:
    v17 = *((_QWORD *)v8 + 2);
    v16 = *((_QWORD *)v8 + 3);
    if (v17 >= v16 >> 1)
      v8 = sub_1B1C62F18(v16 > 1, v17 + 1, 1, v8);
    *((_QWORD *)v8 + 2) = v17 + 1;
    v18 = &v8[16 * v17];
    *((_QWORD *)v18 + 4) = &type metadata for Shadow;
    *((_QWORD *)v18 + 5) = &off_1E63BCD78;
  }
LABEL_12:
  v19 = **(_QWORD **)(v4 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues);
  v20 = *(_QWORD *)(v19 + 16);
  v21 = v20 + OBJC_IVAR____TtC3VFX13EntityManager_lock;
  v22 = *(os_unfair_lock_s **)(v20 + OBJC_IVAR____TtC3VFX13EntityManager_lock + 24);
  swift_retain();
  os_unfair_lock_lock(v22);
  v23 = swift_bridgeObjectRetain();
  v24 = sub_1B1DAD000(v23, MEMORY[0x1E0DEE9D8]);
  v26 = v25;
  swift_bridgeObjectRelease();
  v27 = sub_1B1DA8760(v24);
  if ((v28 & 1) != 0 || (v29 = sub_1B1DA87D4(v26, v27), v30 = v29, (v29 & 0x100000000) != 0))
  {
    swift_bridgeObjectRetain();
    v30 = sub_1B1DA8838(v24, v26, (uint64_t)v8, MEMORY[0x1E0DEE9D8]);
    swift_bridgeObjectRelease();
  }
  v31 = *(_QWORD *)(*(_QWORD *)(v20 + 80) + 8 * v30 + 32);
  v32 = *(os_unfair_lock_s **)(v21 + 24);
  swift_retain();
  os_unfair_lock_unlock(v32);
  swift_release();
  swift_retain();
  KeyPath = swift_getKeyPath();
  sub_1B1DAC77C(KeyPath, 1);
  swift_release();
  swift_release();
  swift_retain();
  v34 = swift_getKeyPath();
  sub_1B1DAC77C(v34, 1);
  swift_release();
  swift_release();
  v35 = *(_DWORD *)(v31 + 204);
  if ((*(_BYTE *)(v31 + 208) & 1) != 0)
  {
    v36 = 0;
    LODWORD(v37) = -1;
  }
  else
  {
    swift_retain();
    v37 = sub_1B1DA8E54();
    swift_release();
    v36 = HIDWORD(v37);
  }
  v50 = -1;
  v38 = *(_QWORD *)(v19 + 16);
  swift_retain();
  swift_retain();
  v49.i8[0] = 1;
  sub_1B1C92338(v35, 0x100000000uLL, 1, v38, v49.i64, v37, &v50, v31, v19, v35, SHIWORD(v35), 1);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release_n();
  v49.i64[0] = 0xD000000000000011;
  v49.i64[1] = 0x80000001B232B750;
  if ((_DWORD)v37 != -1 || (_DWORD)v36)
  {
    v39 = swift_retain();
    MEMORY[0x1E0C80A78](v39, v40);
    sub_1B1D198D0(0, (void (*)(_BYTE *))sub_1B19ED93C);
    swift_release();
    v41 = (simd_float4)vdivq_f32(vaddq_f32(a3, (float32x4_t)vdupq_n_s32(0x3D6147AEu)), (float32x4_t)vdupq_n_s32(0x3F870A3Du));
    v41.i32[3] = 0;
    v42 = _simd_pow_f4(v41, (simd_float4)xmmword_1B2268F30);
    v43 = vcgeq_f32((float32x4_t)vdupq_n_s32(0x3D25AEE6u), a3);
    v43.i32[3] = 0;
    v44 = vbslq_s8((int8x16_t)vcltzq_s32(v43), (int8x16_t)vdivq_f32(a3, (float32x4_t)vdupq_n_s32(0x414EB852u)), (int8x16_t)v42);
    v44.i32[3] = 1.0;
    v49 = v44;
    v45 = swift_retain();
    MEMORY[0x1E0C80A78](v45, v46);
    sub_1B1D198D0(0, (void (*)(_BYTE *))sub_1B19ED8F4);
    swift_release();
  }
  return v37 | (v36 << 32);
}

unint64_t sub_1B19EC8FC(unint64_t result)
{
  if (result > 5)
    return 0;
  return result;
}

uint64_t sub_1B19EC90C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1B1791524(0, (unint64_t *)&qword_1ED4BF720, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for VFXSceneLightParameters()
{
  uint64_t result;

  result = qword_1EEF587F0;
  if (!qword_1EEF587F0)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_1B19EC9A4(uint64_t a1)
{
  uint64_t v2;

  sub_1B1791524(0, (unint64_t *)&qword_1ED4BF720, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1B19EC9FC()
{
  unint64_t result;

  result = qword_1EEF587E0;
  if (!qword_1EEF587E0)
  {
    result = MEMORY[0x1B5E23E74](&protocol conformance descriptor for VFXSceneLightType, &type metadata for VFXSceneLightType);
    atomic_store(result, (unint64_t *)&qword_1EEF587E0);
  }
  return result;
}

_QWORD *sub_1B19ECA40@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *(_QWORD *)(*result + OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_type);
  return result;
}

_QWORD *sub_1B19ECA58(_QWORD *result, _QWORD *a2)
{
  *(_QWORD *)(*a2 + OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_type) = *result;
  return result;
}

float sub_1B19ECA70@<S0>(_QWORD *a1@<X0>, float *a2@<X8>)
{
  float result;

  result = *(float *)(*a1 + OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_intensity);
  *a2 = result;
  return result;
}

float sub_1B19ECA88(float *a1, _QWORD *a2)
{
  float result;

  result = *a1;
  *(float *)(*a2 + OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_intensity) = *a1;
  return result;
}

__n128 sub_1B19ECAA0@<Q0>(_QWORD *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 *v2;
  unsigned __int8 v3;
  __n128 result;

  v2 = (__n128 *)(*a1 + OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_color);
  v3 = v2[1].n128_u8[0];
  result = *v2;
  *a2 = *v2;
  a2[1].n128_u8[0] = v3;
  return result;
}

double sub_1B19ECAC4(__n128 *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  double result;

  *(_QWORD *)&result = sub_1B19ECB30(a1, a2, a3, a4, &OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_color).n128_u64[0];
  return result;
}

__n128 sub_1B19ECAD0@<Q0>(_QWORD *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 *v2;
  unsigned __int8 v3;
  __n128 result;

  v2 = (__n128 *)(*a1 + OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_orientation);
  v3 = v2[1].n128_u8[0];
  result = *v2;
  *a2 = *v2;
  a2[1].n128_u8[0] = v3;
  return result;
}

double sub_1B19ECAF4(__n128 *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  double result;

  *(_QWORD *)&result = sub_1B19ECB30(a1, a2, a3, a4, &OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_orientation).n128_u64[0];
  return result;
}

__n128 sub_1B19ECB00@<Q0>(_QWORD *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 *v2;
  unsigned __int8 v3;
  __n128 result;

  v2 = (__n128 *)(*a1 + OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_position);
  v3 = v2[1].n128_u8[0];
  result = *v2;
  *a2 = *v2;
  a2[1].n128_u8[0] = v3;
  return result;
}

double sub_1B19ECB24(__n128 *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  double result;

  *(_QWORD *)&result = sub_1B19ECB30(a1, a2, a3, a4, &OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_position).n128_u64[0];
  return result;
}

__n128 sub_1B19ECB30(__n128 *a1, _QWORD *a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  unsigned __int8 v5;
  __n128 *v6;
  __n128 result;

  v5 = a1[1].n128_u8[0];
  v6 = (__n128 *)(*a2 + *a5);
  result = *a1;
  *v6 = *a1;
  v6[1].n128_u8[0] = v5;
  return result;
}

_QWORD *sub_1B19ECB50@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  int v3;

  v2 = *result + OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_attenuationRadius;
  v3 = *(_DWORD *)v2;
  LOBYTE(v2) = *(_BYTE *)(v2 + 4);
  *(_DWORD *)a2 = v3;
  *(_BYTE *)(a2 + 4) = v2;
  return result;
}

uint64_t sub_1B19ECB74(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return sub_1B19ECC70(a1, a2, a3, a4, &OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_attenuationRadius);
}

_QWORD *sub_1B19ECB80@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  int v3;

  v2 = *result + OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_zNear;
  v3 = *(_DWORD *)v2;
  LOBYTE(v2) = *(_BYTE *)(v2 + 4);
  *(_DWORD *)a2 = v3;
  *(_BYTE *)(a2 + 4) = v2;
  return result;
}

uint64_t sub_1B19ECBA4(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return sub_1B19ECC70(a1, a2, a3, a4, &OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_zNear);
}

_QWORD *sub_1B19ECBB0@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  int v3;

  v2 = *result + OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_zFar;
  v3 = *(_DWORD *)v2;
  LOBYTE(v2) = *(_BYTE *)(v2 + 4);
  *(_DWORD *)a2 = v3;
  *(_BYTE *)(a2 + 4) = v2;
  return result;
}

uint64_t sub_1B19ECBD4(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return sub_1B19ECC70(a1, a2, a3, a4, &OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_zFar);
}

_QWORD *sub_1B19ECBE0@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  int v3;

  v2 = *result + OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_orthoScale;
  v3 = *(_DWORD *)v2;
  LOBYTE(v2) = *(_BYTE *)(v2 + 4);
  *(_DWORD *)a2 = v3;
  *(_BYTE *)(a2 + 4) = v2;
  return result;
}

uint64_t sub_1B19ECC04(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return sub_1B19ECC70(a1, a2, a3, a4, &OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_orthoScale);
}

_QWORD *sub_1B19ECC10@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  int v3;

  v2 = *result + OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_outerAngle;
  v3 = *(_DWORD *)v2;
  LOBYTE(v2) = *(_BYTE *)(v2 + 4);
  *(_DWORD *)a2 = v3;
  *(_BYTE *)(a2 + 4) = v2;
  return result;
}

uint64_t sub_1B19ECC34(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return sub_1B19ECC70(a1, a2, a3, a4, &OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_outerAngle);
}

_QWORD *sub_1B19ECC40@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  int v3;

  v2 = *result + OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_innerAngle;
  v3 = *(_DWORD *)v2;
  LOBYTE(v2) = *(_BYTE *)(v2 + 4);
  *(_DWORD *)a2 = v3;
  *(_BYTE *)(a2 + 4) = v2;
  return result;
}

uint64_t sub_1B19ECC64(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return sub_1B19ECC70(a1, a2, a3, a4, &OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_innerAngle);
}

uint64_t sub_1B19ECC70(uint64_t result, _QWORD *a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  char v5;
  uint64_t v6;

  v5 = *(_BYTE *)(result + 4);
  v6 = *a2 + *a5;
  *(_DWORD *)v6 = *(_DWORD *)result;
  *(_BYTE *)(v6 + 4) = v5;
  return result;
}

_QWORD *sub_1B19ECC90@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *result + OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_extents;
  v3 = *(_QWORD *)v2;
  LOBYTE(v2) = *(_BYTE *)(v2 + 8);
  *(_QWORD *)a2 = v3;
  *(_BYTE *)(a2 + 8) = v2;
  return result;
}

uint64_t sub_1B19ECCB4(uint64_t result, _QWORD *a2)
{
  char v2;
  uint64_t v3;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2 + OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_extents;
  *(_QWORD *)v3 = *(_QWORD *)result;
  *(_BYTE *)(v3 + 8) = v2;
  return result;
}

_QWORD *sub_1B19ECCD8@<X0>(_QWORD *result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *(_BYTE *)(*result + OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_doubleSided);
  return result;
}

_BYTE *sub_1B19ECCF0(_BYTE *result, _QWORD *a2)
{
  *(_BYTE *)(*a2 + OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_doubleSided) = *result;
  return result;
}

uint64_t sub_1B19ECD08@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1B19EC90C(*a1 + OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_url, a2);
}

uint64_t sub_1B19ECD24@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *(_QWORD *)(*a1 + OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_texture);
  return swift_unknownObjectRetain();
}

uint64_t sub_1B19ECD3C(_QWORD *a1, _QWORD *a2)
{
  *(_QWORD *)(*a2 + OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_texture) = *a1;
  swift_unknownObjectRetain();
  return swift_unknownObjectRelease();
}

ValueMetadata *type metadata accessor for VFXSceneLightType()
{
  return &type metadata for VFXSceneLightType;
}

uint64_t sub_1B19ECD84()
{
  return type metadata accessor for VFXSceneLightParameters();
}

void sub_1B19ECD8C()
{
  unint64_t v0;

  sub_1B1791524(319, (unint64_t *)&qword_1ED4BF720, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t method lookup function for VFXSceneLightParameters()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of VFXSceneLightParameters.type.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xD8))();
}

uint64_t dispatch thunk of VFXSceneLightParameters.type.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xE0))();
}

uint64_t dispatch thunk of VFXSceneLightParameters.type.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xE8))();
}

uint64_t dispatch thunk of VFXSceneLightParameters.intensity.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xF0))();
}

uint64_t dispatch thunk of VFXSceneLightParameters.intensity.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xF8))();
}

uint64_t dispatch thunk of VFXSceneLightParameters.intensity.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x100))();
}

uint64_t dispatch thunk of VFXSceneLightParameters.color.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x108))();
}

uint64_t dispatch thunk of VFXSceneLightParameters.color.setter(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))((*MEMORY[0x1E0DEEDD8] & *v3) + 0x110))(a1, a2, a3 & 1);
}

uint64_t dispatch thunk of VFXSceneLightParameters.color.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x118))();
}

uint64_t dispatch thunk of VFXSceneLightParameters.orientation.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x120))();
}

uint64_t dispatch thunk of VFXSceneLightParameters.orientation.setter(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))((*MEMORY[0x1E0DEEDD8] & *v3) + 0x128))(a1, a2, a3 & 1);
}

uint64_t dispatch thunk of VFXSceneLightParameters.orientation.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x130))();
}

uint64_t dispatch thunk of VFXSceneLightParameters.position.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x138))();
}

uint64_t dispatch thunk of VFXSceneLightParameters.position.setter(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))((*MEMORY[0x1E0DEEDD8] & *v3) + 0x140))(a1, a2, a3 & 1);
}

uint64_t dispatch thunk of VFXSceneLightParameters.position.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x148))();
}

uint64_t dispatch thunk of VFXSceneLightParameters.attenuationRadius.getter()
{
  _QWORD *v0;
  unint64_t v1;

  v1 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x150))();
  return v1 | ((HIDWORD(v1) & 1) << 32);
}

uint64_t dispatch thunk of VFXSceneLightParameters.attenuationRadius.setter(unint64_t a1)
{
  _QWORD *v1;

  return (*(uint64_t (**)(unint64_t))((*MEMORY[0x1E0DEEDD8] & *v1) + 0x158))(a1 | ((HIDWORD(a1) & 1) << 32));
}

uint64_t dispatch thunk of VFXSceneLightParameters.attenuationRadius.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x160))();
}

uint64_t dispatch thunk of VFXSceneLightParameters.zNear.getter()
{
  _QWORD *v0;
  unint64_t v1;

  v1 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x168))();
  return v1 | ((HIDWORD(v1) & 1) << 32);
}

uint64_t dispatch thunk of VFXSceneLightParameters.zNear.setter(unint64_t a1)
{
  _QWORD *v1;

  return (*(uint64_t (**)(unint64_t))((*MEMORY[0x1E0DEEDD8] & *v1) + 0x170))(a1 | ((HIDWORD(a1) & 1) << 32));
}

uint64_t dispatch thunk of VFXSceneLightParameters.zNear.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x178))();
}

uint64_t dispatch thunk of VFXSceneLightParameters.zFar.getter()
{
  _QWORD *v0;
  unint64_t v1;

  v1 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x180))();
  return v1 | ((HIDWORD(v1) & 1) << 32);
}

uint64_t dispatch thunk of VFXSceneLightParameters.zFar.setter(unint64_t a1)
{
  _QWORD *v1;

  return (*(uint64_t (**)(unint64_t))((*MEMORY[0x1E0DEEDD8] & *v1) + 0x188))(a1 | ((HIDWORD(a1) & 1) << 32));
}

uint64_t dispatch thunk of VFXSceneLightParameters.zFar.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x190))();
}

uint64_t dispatch thunk of VFXSceneLightParameters.orthoScale.getter()
{
  _QWORD *v0;
  unint64_t v1;

  v1 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x198))();
  return v1 | ((HIDWORD(v1) & 1) << 32);
}

uint64_t dispatch thunk of VFXSceneLightParameters.orthoScale.setter(unint64_t a1)
{
  _QWORD *v1;

  return (*(uint64_t (**)(unint64_t))((*MEMORY[0x1E0DEEDD8] & *v1) + 0x1A0))(a1 | ((HIDWORD(a1) & 1) << 32));
}

uint64_t dispatch thunk of VFXSceneLightParameters.orthoScale.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1A8))();
}

uint64_t dispatch thunk of VFXSceneLightParameters.outerAngle.getter()
{
  _QWORD *v0;
  unint64_t v1;

  v1 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1B0))();
  return v1 | ((HIDWORD(v1) & 1) << 32);
}

uint64_t dispatch thunk of VFXSceneLightParameters.outerAngle.setter(unint64_t a1)
{
  _QWORD *v1;

  return (*(uint64_t (**)(unint64_t))((*MEMORY[0x1E0DEEDD8] & *v1) + 0x1B8))(a1 | ((HIDWORD(a1) & 1) << 32));
}

uint64_t dispatch thunk of VFXSceneLightParameters.outerAngle.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1C0))();
}

uint64_t dispatch thunk of VFXSceneLightParameters.innerAngle.getter()
{
  _QWORD *v0;
  unint64_t v1;

  v1 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1C8))();
  return v1 | ((HIDWORD(v1) & 1) << 32);
}

uint64_t dispatch thunk of VFXSceneLightParameters.innerAngle.setter(unint64_t a1)
{
  _QWORD *v1;

  return (*(uint64_t (**)(unint64_t))((*MEMORY[0x1E0DEEDD8] & *v1) + 0x1D0))(a1 | ((HIDWORD(a1) & 1) << 32));
}

uint64_t dispatch thunk of VFXSceneLightParameters.innerAngle.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1D8))();
}

uint64_t dispatch thunk of VFXSceneLightParameters.extents.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1E0))();
}

uint64_t dispatch thunk of VFXSceneLightParameters.extents.setter(uint64_t a1, char a2)
{
  _QWORD *v2;

  return (*(uint64_t (**)(uint64_t, _QWORD))((*MEMORY[0x1E0DEEDD8] & *v2) + 0x1E8))(a1, a2 & 1);
}

uint64_t dispatch thunk of VFXSceneLightParameters.extents.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1F0))();
}

uint64_t dispatch thunk of VFXSceneLightParameters.doubleSided.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1F8))();
}

uint64_t dispatch thunk of VFXSceneLightParameters.doubleSided.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x200))();
}

uint64_t dispatch thunk of VFXSceneLightParameters.doubleSided.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x208))();
}

uint64_t dispatch thunk of VFXSceneLightParameters.url.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x210))();
}

uint64_t dispatch thunk of VFXSceneLightParameters.url.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x218))();
}

uint64_t dispatch thunk of VFXSceneLightParameters.url.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x220))();
}

uint64_t dispatch thunk of VFXSceneLightParameters.texture.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x228))();
}

uint64_t dispatch thunk of VFXSceneLightParameters.texture.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x230))();
}

uint64_t dispatch thunk of VFXSceneLightParameters.texture.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x238))();
}

uint64_t dispatch thunk of VFXSceneLightParameters.__allocating_init(type:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 624))();
}

uint64_t dispatch thunk of VFXSceneLightParameters.__allocating_init(type:intensity:color:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 632))();
}

uint64_t dispatch thunk of VFXSceneLightParameters.setIntensity(_:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x280))();
}

uint64_t dispatch thunk of VFXSceneLightParameters.setOrientation(_:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x288))();
}

uint64_t dispatch thunk of VFXSceneLightParameters.setPosition(_:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x290))();
}

uint64_t dispatch thunk of VFXSceneLightParameters.setAttenuationRadius(_:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x298))();
}

uint64_t dispatch thunk of VFXSceneLightParameters.setDirectionalParameters(scale:zNear:zFar:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x2A0))();
}

uint64_t dispatch thunk of VFXSceneLightParameters.setSpotLightParameters(outerAngle:innerAngle:zNear:zFar:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x2A8))();
}

uint64_t dispatch thunk of VFXSceneLightParameters.setPointLightParameters(zNear:zFar:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x2B0))();
}

uint64_t dispatch thunk of VFXSceneLightParameters.setAreaLightParameters(extents:doubleSided:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x2B8))();
}

uint64_t dispatch thunk of VFXSceneLightParameters.setIBLParameters(url:texture:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x2C0))();
}

uint64_t dispatch thunk of VFXSceneLightParameters.setIBLParameters(entity:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x2C8))();
}

uint64_t dispatch thunk of VFXSceneLightParameters.setIBLParameters(tag:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x2D0))();
}

uint64_t sub_1B19ED688(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1B19ED6CC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_1B19ED6CC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED4B7DE0)
  {
    v0 = sub_1B2229124();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED4B7DE0);
  }
}

uint64_t sub_1B19ED720(uint64_t a1)
{
  swift_release();
  return a1;
}

uint64_t *sub_1B19ED748(uint64_t *a1)
{
  sub_1B19ED798(*a1);
  return a1;
}

uint64_t sub_1B19ED798(uint64_t result)
{
  if (result)
  {
    swift_release();
    swift_release();
    return swift_release();
  }
  return result;
}

unint64_t sub_1B19ED7D0()
{
  unint64_t result;

  result = qword_1EEF58808;
  if (!qword_1EEF58808)
  {
    result = MEMORY[0x1B5E23E74](MEMORY[0x1E0CB1AA0], MEMORY[0x1E0DEAC20]);
    atomic_store(result, (unint64_t *)&qword_1EEF58808);
  }
  return result;
}

_QWORD *sub_1B19ED814(_QWORD *a1)
{
  uint64_t v1;

  return sub_1B1DC9CAC(a1, *(__n128 **)(v1 + 16), *(_QWORD *)(v1 + 24));
}

_QWORD *sub_1B19ED830(_QWORD *a1)
{
  uint64_t v1;

  return sub_1B1DC9CD0(a1, *(__n128 **)(v1 + 16), *(_QWORD *)(v1 + 24));
}

unint64_t sub_1B19ED84C()
{
  unint64_t result;

  result = qword_1ED4B8C90;
  if (!qword_1ED4B8C90)
  {
    sub_1B19ED884();
    result = swift_getExistentialMetatypeMetadata();
    atomic_store(result, (unint64_t *)&qword_1ED4B8C90);
  }
  return result;
}

unint64_t sub_1B19ED884()
{
  unint64_t result;

  result = qword_1ED4B8C70;
  if (!qword_1ED4B8C70)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&qword_1ED4B8C70);
  }
  return result;
}

uint64_t sub_1B19ED8D8(uint64_t a1)
{
  uint64_t v1;

  return sub_1B1F53EE4(a1, *(uint64_t **)(v1 + 16), *(_QWORD *)(v1 + 24));
}

unint64_t sub_1B19ED8F4()
{
  return sub_1B19ED908();
}

unint64_t sub_1B19ED908()
{
  uint64_t v0;

  return sub_1B1BF92A0(*(_QWORD *)(v0 + 24), *(__n128 *)*(_QWORD *)(v0 + 16));
}

uint64_t sub_1B19ED93C(uint64_t a1)
{
  return sub_1B19ED8D8(a1);
}

uint64_t sub_1B19ED950@<X0>(uint64_t a1@<X8>)
{
  unsigned __int16 **v1;
  unsigned __int16 **v2;
  unsigned __int16 *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t inited;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  int v18;
  char v19;
  unsigned __int16 *v20;
  unsigned __int16 *v21;
  char v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  __int16 v26;
  char v27;

  v2 = v1;
  v4 = *v1;
  v5 = (uint64_t)*v1 + 41;
  v6 = (*v1)[8];
  v7 = v4[9];
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAE50, (uint64_t (*)(uint64_t))sub_1B19F66EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226CD10;
  *(_QWORD *)(inited + 32) = &type metadata for RotateAction;
  *(_QWORD *)(inited + 40) = &off_1E6376718;
  *(_QWORD *)(inited + 48) = &type metadata for Orientation;
  *(_QWORD *)(inited + 56) = &off_1E63715B8;
  if (v7 > 0xF)
  {
    v25 = sub_1B1DC8944((char *)(v5 + v6), v7 >> 4);
    sub_1B19F4A48(inited);
    inited = v25;
  }
  v9 = v4[10];
  v10 = v4[11];
  v11 = 2;
  v12 = sub_1B2228B0C();
  *(_QWORD *)(v12 + 16) = 2;
  *(_WORD *)(v12 + 32) = 771;
  if (v10)
  {
    v25 = sub_1B1DC8810((char *)(v5 + v9), v10);
    sub_1B19F499C(v12);
    v12 = v25;
    v11 = *(_QWORD *)(v25 + 16);
  }
  v13 = (uint64_t)*v2 + 41;
  v14 = (char *)(v13 + (*v2)[12]);
  v15 = (unint64_t)(*v2)[13] >> 4;
  v16 = (char *)(v13 + (*v2)[14]);
  v17 = (*v2)[15] / 0x18u;
  v18 = *((_DWORD *)v2 + 2);
  v19 = *((_BYTE *)v2 + 12);
  v20 = v2[4];
  v21 = v2[2];
  v22 = *((_BYTE *)v2 + 24);
  v23 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v12 + 32), v11, v14, v15, v16, v17);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a1 = v23;
  *(_DWORD *)(a1 + 8) = v18;
  *(_BYTE *)(a1 + 12) = v19;
  *(_WORD *)(a1 + 13) = v26;
  *(_BYTE *)(a1 + 15) = v27;
  *(_QWORD *)(a1 + 16) = v21;
  *(_BYTE *)(a1 + 24) = v22;
  *(_DWORD *)(a1 + 25) = v25;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)((char *)&v25 + 3);
  *(_QWORD *)(a1 + 32) = v20;
  return result;
}

uint64_t sub_1B19EDB54@<X0>(uint64_t a1@<X8>)
{
  unsigned __int16 **v1;
  unsigned __int16 **v2;
  unsigned __int16 *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t inited;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  int v18;
  char v19;
  unsigned __int16 *v20;
  unsigned __int16 *v21;
  char v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  __int16 v26;
  char v27;

  v2 = v1;
  v4 = *v1;
  v5 = (uint64_t)*v1 + 41;
  v6 = (*v1)[8];
  v7 = v4[9];
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAE50, (uint64_t (*)(uint64_t))sub_1B19F66EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226CD10;
  *(_QWORD *)(inited + 32) = &type metadata for Position;
  *(_QWORD *)(inited + 40) = &off_1E63C2410;
  *(_QWORD *)(inited + 48) = &type metadata for SineMoveAction;
  *(_QWORD *)(inited + 56) = &off_1E6381B28;
  if (v7 > 0xF)
  {
    v25 = sub_1B1DC8944((char *)(v5 + v6), v7 >> 4);
    sub_1B19F4A48(inited);
    inited = v25;
  }
  v9 = v4[10];
  v10 = v4[11];
  v11 = 2;
  v12 = sub_1B2228B0C();
  *(_QWORD *)(v12 + 16) = 2;
  *(_WORD *)(v12 + 32) = 771;
  if (v10)
  {
    v25 = sub_1B1DC8810((char *)(v5 + v9), v10);
    sub_1B19F499C(v12);
    v12 = v25;
    v11 = *(_QWORD *)(v25 + 16);
  }
  v13 = (uint64_t)*v2 + 41;
  v14 = (char *)(v13 + (*v2)[12]);
  v15 = (unint64_t)(*v2)[13] >> 4;
  v16 = (char *)(v13 + (*v2)[14]);
  v17 = (*v2)[15] / 0x18u;
  v18 = *((_DWORD *)v2 + 2);
  v19 = *((_BYTE *)v2 + 12);
  v20 = v2[4];
  v21 = v2[2];
  v22 = *((_BYTE *)v2 + 24);
  v23 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v12 + 32), v11, v14, v15, v16, v17);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a1 = v23;
  *(_DWORD *)(a1 + 8) = v18;
  *(_BYTE *)(a1 + 12) = v19;
  *(_WORD *)(a1 + 13) = v26;
  *(_BYTE *)(a1 + 15) = v27;
  *(_QWORD *)(a1 + 16) = v21;
  *(_BYTE *)(a1 + 24) = v22;
  *(_DWORD *)(a1 + 25) = v25;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)((char *)&v25 + 3);
  *(_QWORD *)(a1 + 32) = v20;
  return result;
}

uint64_t sub_1B19EDD58@<X0>(uint64_t a1@<X8>)
{
  unsigned __int16 **v1;
  unsigned __int16 **v2;
  unsigned __int16 *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t inited;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  int v18;
  char v19;
  unsigned __int16 *v20;
  unsigned __int16 *v21;
  char v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  __int16 v26;
  char v27;

  v2 = v1;
  v4 = *v1;
  v5 = (uint64_t)*v1 + 41;
  v6 = (*v1)[8];
  v7 = v4[9];
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAE50, (uint64_t (*)(uint64_t))sub_1B19F66EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226CD10;
  *(_QWORD *)(inited + 32) = &type metadata for Position;
  *(_QWORD *)(inited + 40) = &off_1E63C2410;
  *(_QWORD *)(inited + 48) = &type metadata for Color;
  *(_QWORD *)(inited + 56) = &off_1E63BA208;
  if (v7 > 0xF)
  {
    v25 = sub_1B1DC8944((char *)(v5 + v6), v7 >> 4);
    sub_1B19F4A48(inited);
    inited = v25;
  }
  v9 = v4[10];
  v10 = v4[11];
  v11 = 2;
  v12 = sub_1B2228B0C();
  *(_QWORD *)(v12 + 16) = 2;
  *(_WORD *)(v12 + 32) = 771;
  if (v10)
  {
    v25 = sub_1B1DC8810((char *)(v5 + v9), v10);
    sub_1B19F499C(v12);
    v12 = v25;
    v11 = *(_QWORD *)(v25 + 16);
  }
  v13 = (uint64_t)*v2 + 41;
  v14 = (char *)(v13 + (*v2)[12]);
  v15 = (unint64_t)(*v2)[13] >> 4;
  v16 = (char *)(v13 + (*v2)[14]);
  v17 = (*v2)[15] / 0x18u;
  v18 = *((_DWORD *)v2 + 2);
  v19 = *((_BYTE *)v2 + 12);
  v20 = v2[4];
  v21 = v2[2];
  v22 = *((_BYTE *)v2 + 24);
  v23 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v12 + 32), v11, v14, v15, v16, v17);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a1 = v23;
  *(_DWORD *)(a1 + 8) = v18;
  *(_BYTE *)(a1 + 12) = v19;
  *(_WORD *)(a1 + 13) = v26;
  *(_BYTE *)(a1 + 15) = v27;
  *(_QWORD *)(a1 + 16) = v21;
  *(_BYTE *)(a1 + 24) = v22;
  *(_DWORD *)(a1 + 25) = v25;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)((char *)&v25 + 3);
  *(_QWORD *)(a1 + 32) = v20;
  return result;
}

uint64_t sub_1B19EDF5C@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t inited;
  uint64_t v10;
  int64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  int v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  __int16 v27;
  char v28;

  v2 = v1;
  v4 = type metadata accessor for SceneKitRenderer(0);
  v5 = *v2;
  v6 = *v2 + 41;
  v7 = *(unsigned __int16 *)(*v2 + 16);
  v8 = *(unsigned __int16 *)(*v2 + 18);
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAE50, (uint64_t (*)(uint64_t))sub_1B19F66EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226CD10;
  *(_QWORD *)(inited + 32) = v4;
  *(_QWORD *)(inited + 40) = &off_1E638A8C0;
  *(_QWORD *)(inited + 48) = &type metadata for WorldTransform;
  *(_QWORD *)(inited + 56) = &off_1E6382C78;
  if (v8 > 0xF)
  {
    v26 = sub_1B1DC8944((char *)(v6 + v7), v8 >> 4);
    sub_1B19F4A48(inited);
    inited = v26;
  }
  v10 = *(unsigned __int16 *)(v5 + 20);
  v11 = *(unsigned __int16 *)(v5 + 22);
  v12 = 2;
  v13 = sub_1B2228B0C();
  *(_QWORD *)(v13 + 16) = 2;
  *(_WORD *)(v13 + 32) = 771;
  if (v11)
  {
    v26 = sub_1B1DC8810((char *)(v6 + v10), v11);
    sub_1B19F499C(v13);
    v13 = v26;
    v12 = *(_QWORD *)(v26 + 16);
  }
  v14 = *v2 + 41;
  v15 = (char *)(v14 + *(unsigned __int16 *)(*v2 + 24));
  v16 = (unint64_t)*(unsigned __int16 *)(*v2 + 26) >> 4;
  v17 = (char *)(v14 + *(unsigned __int16 *)(*v2 + 28));
  v18 = *(unsigned __int16 *)(*v2 + 30) / 0x18u;
  v19 = *((_DWORD *)v2 + 2);
  v20 = *((_BYTE *)v2 + 12);
  v21 = v2[4];
  v22 = v2[2];
  v23 = *((_BYTE *)v2 + 24);
  v24 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v13 + 32), v12, v15, v16, v17, v18);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a1 = v24;
  *(_DWORD *)(a1 + 8) = v19;
  *(_BYTE *)(a1 + 12) = v20;
  *(_WORD *)(a1 + 13) = v27;
  *(_BYTE *)(a1 + 15) = v28;
  *(_QWORD *)(a1 + 16) = v22;
  *(_BYTE *)(a1 + 24) = v23;
  *(_DWORD *)(a1 + 25) = v26;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)((char *)&v26 + 3);
  *(_QWORD *)(a1 + 32) = v21;
  return result;
}

uint64_t sub_1B19EE164@<X0>(uint64_t a1@<X8>)
{
  unsigned __int16 **v1;
  unsigned __int16 **v2;
  unsigned __int16 *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t inited;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  int v18;
  char v19;
  unsigned __int16 *v20;
  unsigned __int16 *v21;
  char v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  __int16 v26;
  char v27;

  v2 = v1;
  v4 = *v1;
  v5 = (uint64_t)*v1 + 41;
  v6 = (*v1)[8];
  v7 = v4[9];
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAE50, (uint64_t (*)(uint64_t))sub_1B19F66EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226CD10;
  *(_QWORD *)(inited + 32) = &type metadata for AmbientLight;
  *(_QWORD *)(inited + 40) = &off_1E63743F8;
  *(_QWORD *)(inited + 48) = &type metadata for Color;
  *(_QWORD *)(inited + 56) = &off_1E63BA208;
  if (v7 > 0xF)
  {
    v25 = sub_1B1DC8944((char *)(v5 + v6), v7 >> 4);
    sub_1B19F4A48(inited);
    inited = v25;
  }
  v9 = v4[10];
  v10 = v4[11];
  v11 = 2;
  v12 = sub_1B2228B0C();
  *(_QWORD *)(v12 + 16) = 2;
  *(_WORD *)(v12 + 32) = 771;
  if (v10)
  {
    v25 = sub_1B1DC8810((char *)(v5 + v9), v10);
    sub_1B19F499C(v12);
    v12 = v25;
    v11 = *(_QWORD *)(v25 + 16);
  }
  v13 = (uint64_t)*v2 + 41;
  v14 = (char *)(v13 + (*v2)[12]);
  v15 = (unint64_t)(*v2)[13] >> 4;
  v16 = (char *)(v13 + (*v2)[14]);
  v17 = (*v2)[15] / 0x18u;
  v18 = *((_DWORD *)v2 + 2);
  v19 = *((_BYTE *)v2 + 12);
  v20 = v2[4];
  v21 = v2[2];
  v22 = *((_BYTE *)v2 + 24);
  v23 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v12 + 32), v11, v14, v15, v16, v17);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a1 = v23;
  *(_DWORD *)(a1 + 8) = v18;
  *(_BYTE *)(a1 + 12) = v19;
  *(_WORD *)(a1 + 13) = v26;
  *(_BYTE *)(a1 + 15) = v27;
  *(_QWORD *)(a1 + 16) = v21;
  *(_BYTE *)(a1 + 24) = v22;
  *(_DWORD *)(a1 + 25) = v25;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)((char *)&v25 + 3);
  *(_QWORD *)(a1 + 32) = v20;
  return result;
}

uint64_t sub_1B19EE368@<X0>(uint64_t a1@<X8>)
{
  unsigned __int16 **v1;
  unsigned __int16 **v2;
  unsigned __int16 *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t inited;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  int v18;
  char v19;
  unsigned __int16 *v20;
  unsigned __int16 *v21;
  char v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  __int16 v26;
  char v27;

  v2 = v1;
  v4 = *v1;
  v5 = (uint64_t)*v1 + 41;
  v6 = (*v1)[8];
  v7 = v4[9];
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAE50, (uint64_t (*)(uint64_t))sub_1B19F66EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226CD10;
  *(_QWORD *)(inited + 32) = &type metadata for Rect2D;
  *(_QWORD *)(inited + 40) = &off_1E63BC198;
  *(_QWORD *)(inited + 48) = &type metadata for Color;
  *(_QWORD *)(inited + 56) = &off_1E63BA208;
  if (v7 > 0xF)
  {
    v25 = sub_1B1DC8944((char *)(v5 + v6), v7 >> 4);
    sub_1B19F4A48(inited);
    inited = v25;
  }
  v9 = v4[10];
  v10 = v4[11];
  v11 = 2;
  v12 = sub_1B2228B0C();
  *(_QWORD *)(v12 + 16) = 2;
  *(_WORD *)(v12 + 32) = 771;
  if (v10)
  {
    v25 = sub_1B1DC8810((char *)(v5 + v9), v10);
    sub_1B19F499C(v12);
    v12 = v25;
    v11 = *(_QWORD *)(v25 + 16);
  }
  v13 = (uint64_t)*v2 + 41;
  v14 = (char *)(v13 + (*v2)[12]);
  v15 = (unint64_t)(*v2)[13] >> 4;
  v16 = (char *)(v13 + (*v2)[14]);
  v17 = (*v2)[15] / 0x18u;
  v18 = *((_DWORD *)v2 + 2);
  v19 = *((_BYTE *)v2 + 12);
  v20 = v2[4];
  v21 = v2[2];
  v22 = *((_BYTE *)v2 + 24);
  v23 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v12 + 32), v11, v14, v15, v16, v17);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a1 = v23;
  *(_DWORD *)(a1 + 8) = v18;
  *(_BYTE *)(a1 + 12) = v19;
  *(_WORD *)(a1 + 13) = v26;
  *(_BYTE *)(a1 + 15) = v27;
  *(_QWORD *)(a1 + 16) = v21;
  *(_BYTE *)(a1 + 24) = v22;
  *(_DWORD *)(a1 + 25) = v25;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)((char *)&v25 + 3);
  *(_QWORD *)(a1 + 32) = v20;
  return result;
}

uint64_t sub_1B19EE56C@<X0>(uint64_t a1@<X8>)
{
  unsigned __int16 **v1;
  unsigned __int16 **v2;
  unsigned __int16 *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t inited;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  int v18;
  char v19;
  unsigned __int16 *v20;
  unsigned __int16 *v21;
  char v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  __int16 v26;
  char v27;

  v2 = v1;
  v4 = *v1;
  v5 = (uint64_t)*v1 + 41;
  v6 = (*v1)[8];
  v7 = v4[9];
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAE50, (uint64_t (*)(uint64_t))sub_1B19F66EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226CD10;
  *(_QWORD *)(inited + 32) = &type metadata for Color;
  *(_QWORD *)(inited + 40) = &off_1E63BA208;
  *(_QWORD *)(inited + 48) = &type metadata for TransientOriginColor;
  *(_QWORD *)(inited + 56) = &off_1E639F7D8;
  if (v7 > 0xF)
  {
    v25 = sub_1B1DC8944((char *)(v5 + v6), v7 >> 4);
    sub_1B19F4A48(inited);
    inited = v25;
  }
  v9 = v4[10];
  v10 = v4[11];
  v11 = 2;
  v12 = sub_1B2228B0C();
  *(_QWORD *)(v12 + 16) = 2;
  *(_WORD *)(v12 + 32) = 771;
  if (v10)
  {
    v25 = sub_1B1DC8810((char *)(v5 + v9), v10);
    sub_1B19F499C(v12);
    v12 = v25;
    v11 = *(_QWORD *)(v25 + 16);
  }
  v13 = (uint64_t)*v2 + 41;
  v14 = (char *)(v13 + (*v2)[12]);
  v15 = (unint64_t)(*v2)[13] >> 4;
  v16 = (char *)(v13 + (*v2)[14]);
  v17 = (*v2)[15] / 0x18u;
  v18 = *((_DWORD *)v2 + 2);
  v19 = *((_BYTE *)v2 + 12);
  v20 = v2[4];
  v21 = v2[2];
  v22 = *((_BYTE *)v2 + 24);
  v23 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v12 + 32), v11, v14, v15, v16, v17);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a1 = v23;
  *(_DWORD *)(a1 + 8) = v18;
  *(_BYTE *)(a1 + 12) = v19;
  *(_WORD *)(a1 + 13) = v26;
  *(_BYTE *)(a1 + 15) = v27;
  *(_QWORD *)(a1 + 16) = v21;
  *(_BYTE *)(a1 + 24) = v22;
  *(_DWORD *)(a1 + 25) = v25;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)((char *)&v25 + 3);
  *(_QWORD *)(a1 + 32) = v20;
  return result;
}

uint64_t sub_1B19EE770@<X0>(uint64_t a1@<X8>)
{
  unsigned __int16 **v1;
  unsigned __int16 **v2;
  unsigned __int16 *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t inited;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  int v18;
  char v19;
  unsigned __int16 *v20;
  unsigned __int16 *v21;
  char v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  __int16 v26;
  char v27;

  v2 = v1;
  v4 = *v1;
  v5 = (uint64_t)*v1 + 41;
  v6 = (*v1)[8];
  v7 = v4[9];
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAE50, (uint64_t (*)(uint64_t))sub_1B19F66EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226CD10;
  *(_QWORD *)(inited + 32) = &type metadata for Scale;
  *(_QWORD *)(inited + 40) = &off_1E63BAA30;
  *(_QWORD *)(inited + 48) = &type metadata for TransientOriginScale;
  *(_QWORD *)(inited + 56) = &off_1E639F8B0;
  if (v7 > 0xF)
  {
    v25 = sub_1B1DC8944((char *)(v5 + v6), v7 >> 4);
    sub_1B19F4A48(inited);
    inited = v25;
  }
  v9 = v4[10];
  v10 = v4[11];
  v11 = 2;
  v12 = sub_1B2228B0C();
  *(_QWORD *)(v12 + 16) = 2;
  *(_WORD *)(v12 + 32) = 771;
  if (v10)
  {
    v25 = sub_1B1DC8810((char *)(v5 + v9), v10);
    sub_1B19F499C(v12);
    v12 = v25;
    v11 = *(_QWORD *)(v25 + 16);
  }
  v13 = (uint64_t)*v2 + 41;
  v14 = (char *)(v13 + (*v2)[12]);
  v15 = (unint64_t)(*v2)[13] >> 4;
  v16 = (char *)(v13 + (*v2)[14]);
  v17 = (*v2)[15] / 0x18u;
  v18 = *((_DWORD *)v2 + 2);
  v19 = *((_BYTE *)v2 + 12);
  v20 = v2[4];
  v21 = v2[2];
  v22 = *((_BYTE *)v2 + 24);
  v23 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v12 + 32), v11, v14, v15, v16, v17);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a1 = v23;
  *(_DWORD *)(a1 + 8) = v18;
  *(_BYTE *)(a1 + 12) = v19;
  *(_WORD *)(a1 + 13) = v26;
  *(_BYTE *)(a1 + 15) = v27;
  *(_QWORD *)(a1 + 16) = v21;
  *(_BYTE *)(a1 + 24) = v22;
  *(_DWORD *)(a1 + 25) = v25;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)((char *)&v25 + 3);
  *(_QWORD *)(a1 + 32) = v20;
  return result;
}

uint64_t sub_1B19EE974@<X0>(uint64_t a1@<X8>)
{
  unsigned __int16 **v1;
  unsigned __int16 **v2;
  unsigned __int16 *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t inited;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  int v18;
  char v19;
  unsigned __int16 *v20;
  unsigned __int16 *v21;
  char v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  __int16 v26;
  char v27;

  v2 = v1;
  v4 = *v1;
  v5 = (uint64_t)*v1 + 41;
  v6 = (*v1)[8];
  v7 = v4[9];
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAE50, (uint64_t (*)(uint64_t))sub_1B19F66EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226CD10;
  *(_QWORD *)(inited + 32) = &type metadata for Scale1;
  *(_QWORD *)(inited + 40) = &off_1E63BC300;
  *(_QWORD *)(inited + 48) = &type metadata for TransientOriginScale;
  *(_QWORD *)(inited + 56) = &off_1E639F8B0;
  if (v7 > 0xF)
  {
    v25 = sub_1B1DC8944((char *)(v5 + v6), v7 >> 4);
    sub_1B19F4A48(inited);
    inited = v25;
  }
  v9 = v4[10];
  v10 = v4[11];
  v11 = 2;
  v12 = sub_1B2228B0C();
  *(_QWORD *)(v12 + 16) = 2;
  *(_WORD *)(v12 + 32) = 771;
  if (v10)
  {
    v25 = sub_1B1DC8810((char *)(v5 + v9), v10);
    sub_1B19F499C(v12);
    v12 = v25;
    v11 = *(_QWORD *)(v25 + 16);
  }
  v13 = (uint64_t)*v2 + 41;
  v14 = (char *)(v13 + (*v2)[12]);
  v15 = (unint64_t)(*v2)[13] >> 4;
  v16 = (char *)(v13 + (*v2)[14]);
  v17 = (*v2)[15] / 0x18u;
  v18 = *((_DWORD *)v2 + 2);
  v19 = *((_BYTE *)v2 + 12);
  v20 = v2[4];
  v21 = v2[2];
  v22 = *((_BYTE *)v2 + 24);
  v23 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v12 + 32), v11, v14, v15, v16, v17);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a1 = v23;
  *(_DWORD *)(a1 + 8) = v18;
  *(_BYTE *)(a1 + 12) = v19;
  *(_WORD *)(a1 + 13) = v26;
  *(_BYTE *)(a1 + 15) = v27;
  *(_QWORD *)(a1 + 16) = v21;
  *(_BYTE *)(a1 + 24) = v22;
  *(_DWORD *)(a1 + 25) = v25;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)((char *)&v25 + 3);
  *(_QWORD *)(a1 + 32) = v20;
  return result;
}

uint64_t sub_1B19EEB78@<X0>(uint64_t a1@<X8>)
{
  unsigned __int16 **v1;
  unsigned __int16 **v2;
  unsigned __int16 *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t inited;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  int v18;
  char v19;
  unsigned __int16 *v20;
  unsigned __int16 *v21;
  char v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  __int16 v26;
  char v27;

  v2 = v1;
  v4 = *v1;
  v5 = (uint64_t)*v1 + 41;
  v6 = (*v1)[8];
  v7 = v4[9];
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAE50, (uint64_t (*)(uint64_t))sub_1B19F66EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226CD10;
  *(_QWORD *)(inited + 32) = &type metadata for Scale2;
  *(_QWORD *)(inited + 40) = &off_1E63BC468;
  *(_QWORD *)(inited + 48) = &type metadata for TransientOriginScale;
  *(_QWORD *)(inited + 56) = &off_1E639F8B0;
  if (v7 > 0xF)
  {
    v25 = sub_1B1DC8944((char *)(v5 + v6), v7 >> 4);
    sub_1B19F4A48(inited);
    inited = v25;
  }
  v9 = v4[10];
  v10 = v4[11];
  v11 = 2;
  v12 = sub_1B2228B0C();
  *(_QWORD *)(v12 + 16) = 2;
  *(_WORD *)(v12 + 32) = 771;
  if (v10)
  {
    v25 = sub_1B1DC8810((char *)(v5 + v9), v10);
    sub_1B19F499C(v12);
    v12 = v25;
    v11 = *(_QWORD *)(v25 + 16);
  }
  v13 = (uint64_t)*v2 + 41;
  v14 = (char *)(v13 + (*v2)[12]);
  v15 = (unint64_t)(*v2)[13] >> 4;
  v16 = (char *)(v13 + (*v2)[14]);
  v17 = (*v2)[15] / 0x18u;
  v18 = *((_DWORD *)v2 + 2);
  v19 = *((_BYTE *)v2 + 12);
  v20 = v2[4];
  v21 = v2[2];
  v22 = *((_BYTE *)v2 + 24);
  v23 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v12 + 32), v11, v14, v15, v16, v17);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a1 = v23;
  *(_DWORD *)(a1 + 8) = v18;
  *(_BYTE *)(a1 + 12) = v19;
  *(_WORD *)(a1 + 13) = v26;
  *(_BYTE *)(a1 + 15) = v27;
  *(_QWORD *)(a1 + 16) = v21;
  *(_BYTE *)(a1 + 24) = v22;
  *(_DWORD *)(a1 + 25) = v25;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)((char *)&v25 + 3);
  *(_QWORD *)(a1 + 32) = v20;
  return result;
}

uint64_t sub_1B19EED7C@<X0>(uint64_t a1@<X8>)
{
  unsigned __int16 **v1;
  unsigned __int16 **v2;
  unsigned __int16 *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t inited;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  int v18;
  char v19;
  unsigned __int16 *v20;
  unsigned __int16 *v21;
  char v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  __int16 v26;
  char v27;

  v2 = v1;
  v4 = *v1;
  v5 = (uint64_t)*v1 + 41;
  v6 = (*v1)[8];
  v7 = v4[9];
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAE50, (uint64_t (*)(uint64_t))sub_1B19F66EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226CD10;
  *(_QWORD *)(inited + 32) = &type metadata for Scale3;
  *(_QWORD *)(inited + 40) = &off_1E63BC5D0;
  *(_QWORD *)(inited + 48) = &type metadata for TransientOriginScale;
  *(_QWORD *)(inited + 56) = &off_1E639F8B0;
  if (v7 > 0xF)
  {
    v25 = sub_1B1DC8944((char *)(v5 + v6), v7 >> 4);
    sub_1B19F4A48(inited);
    inited = v25;
  }
  v9 = v4[10];
  v10 = v4[11];
  v11 = 2;
  v12 = sub_1B2228B0C();
  *(_QWORD *)(v12 + 16) = 2;
  *(_WORD *)(v12 + 32) = 771;
  if (v10)
  {
    v25 = sub_1B1DC8810((char *)(v5 + v9), v10);
    sub_1B19F499C(v12);
    v12 = v25;
    v11 = *(_QWORD *)(v25 + 16);
  }
  v13 = (uint64_t)*v2 + 41;
  v14 = (char *)(v13 + (*v2)[12]);
  v15 = (unint64_t)(*v2)[13] >> 4;
  v16 = (char *)(v13 + (*v2)[14]);
  v17 = (*v2)[15] / 0x18u;
  v18 = *((_DWORD *)v2 + 2);
  v19 = *((_BYTE *)v2 + 12);
  v20 = v2[4];
  v21 = v2[2];
  v22 = *((_BYTE *)v2 + 24);
  v23 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v12 + 32), v11, v14, v15, v16, v17);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a1 = v23;
  *(_DWORD *)(a1 + 8) = v18;
  *(_BYTE *)(a1 + 12) = v19;
  *(_WORD *)(a1 + 13) = v26;
  *(_BYTE *)(a1 + 15) = v27;
  *(_QWORD *)(a1 + 16) = v21;
  *(_BYTE *)(a1 + 24) = v22;
  *(_DWORD *)(a1 + 25) = v25;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)((char *)&v25 + 3);
  *(_QWORD *)(a1 + 32) = v20;
  return result;
}

uint64_t sub_1B19EEF80@<X0>(uint64_t a1@<X8>)
{
  unsigned __int16 **v1;
  unsigned __int16 **v2;
  unsigned __int16 *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t inited;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  int v18;
  char v19;
  unsigned __int16 *v20;
  unsigned __int16 *v21;
  char v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  __int16 v26;
  char v27;

  v2 = v1;
  v4 = *v1;
  v5 = (uint64_t)*v1 + 41;
  v6 = (*v1)[8];
  v7 = v4[9];
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAE50, (uint64_t (*)(uint64_t))sub_1B19F66EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226CD10;
  *(_QWORD *)(inited + 32) = &type metadata for LocalAABB;
  *(_QWORD *)(inited + 40) = &off_1E63C41A0;
  *(_QWORD *)(inited + 48) = &type metadata for WorldTransform;
  *(_QWORD *)(inited + 56) = &off_1E6382C78;
  if (v7 > 0xF)
  {
    v25 = sub_1B1DC8944((char *)(v5 + v6), v7 >> 4);
    sub_1B19F4A48(inited);
    inited = v25;
  }
  v9 = v4[10];
  v10 = v4[11];
  v11 = 2;
  v12 = sub_1B2228B0C();
  *(_QWORD *)(v12 + 16) = 2;
  *(_WORD *)(v12 + 32) = 771;
  if (v10)
  {
    v25 = sub_1B1DC8810((char *)(v5 + v9), v10);
    sub_1B19F499C(v12);
    v12 = v25;
    v11 = *(_QWORD *)(v25 + 16);
  }
  v13 = (uint64_t)*v2 + 41;
  v14 = (char *)(v13 + (*v2)[12]);
  v15 = (unint64_t)(*v2)[13] >> 4;
  v16 = (char *)(v13 + (*v2)[14]);
  v17 = (*v2)[15] / 0x18u;
  v18 = *((_DWORD *)v2 + 2);
  v19 = *((_BYTE *)v2 + 12);
  v20 = v2[4];
  v21 = v2[2];
  v22 = *((_BYTE *)v2 + 24);
  v23 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v12 + 32), v11, v14, v15, v16, v17);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a1 = v23;
  *(_DWORD *)(a1 + 8) = v18;
  *(_BYTE *)(a1 + 12) = v19;
  *(_WORD *)(a1 + 13) = v26;
  *(_BYTE *)(a1 + 15) = v27;
  *(_QWORD *)(a1 + 16) = v21;
  *(_BYTE *)(a1 + 24) = v22;
  *(_DWORD *)(a1 + 25) = v25;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)((char *)&v25 + 3);
  *(_QWORD *)(a1 + 32) = v20;
  return result;
}

uint64_t sub_1B19EF184@<X0>(uint64_t a1@<X8>)
{
  unsigned __int16 **v1;
  unsigned __int16 **v2;
  unsigned __int16 *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t inited;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  int v18;
  char v19;
  unsigned __int16 *v20;
  unsigned __int16 *v21;
  char v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  __int16 v26;
  char v27;

  v2 = v1;
  v4 = *v1;
  v5 = (uint64_t)*v1 + 41;
  v6 = (*v1)[8];
  v7 = v4[9];
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAE50, (uint64_t (*)(uint64_t))sub_1B19F66EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226CD10;
  *(_QWORD *)(inited + 32) = &type metadata for WorldTransform;
  *(_QWORD *)(inited + 40) = &off_1E6382C78;
  *(_QWORD *)(inited + 48) = &type metadata for LastFrameWorldTransform;
  *(_QWORD *)(inited + 56) = &off_1E63AA9D8;
  if (v7 > 0xF)
  {
    v25 = sub_1B1DC8944((char *)(v5 + v6), v7 >> 4);
    sub_1B19F4A48(inited);
    inited = v25;
  }
  v9 = v4[10];
  v10 = v4[11];
  v11 = 2;
  v12 = sub_1B2228B0C();
  *(_QWORD *)(v12 + 16) = 2;
  *(_WORD *)(v12 + 32) = 771;
  if (v10)
  {
    v25 = sub_1B1DC8810((char *)(v5 + v9), v10);
    sub_1B19F499C(v12);
    v12 = v25;
    v11 = *(_QWORD *)(v25 + 16);
  }
  v13 = (uint64_t)*v2 + 41;
  v14 = (char *)(v13 + (*v2)[12]);
  v15 = (unint64_t)(*v2)[13] >> 4;
  v16 = (char *)(v13 + (*v2)[14]);
  v17 = (*v2)[15] / 0x18u;
  v18 = *((_DWORD *)v2 + 2);
  v19 = *((_BYTE *)v2 + 12);
  v20 = v2[4];
  v21 = v2[2];
  v22 = *((_BYTE *)v2 + 24);
  v23 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v12 + 32), v11, v14, v15, v16, v17);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a1 = v23;
  *(_DWORD *)(a1 + 8) = v18;
  *(_BYTE *)(a1 + 12) = v19;
  *(_WORD *)(a1 + 13) = v26;
  *(_BYTE *)(a1 + 15) = v27;
  *(_QWORD *)(a1 + 16) = v21;
  *(_BYTE *)(a1 + 24) = v22;
  *(_DWORD *)(a1 + 25) = v25;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)((char *)&v25 + 3);
  *(_QWORD *)(a1 + 32) = v20;
  return result;
}

uint64_t sub_1B19EF388@<X0>(uint64_t a1@<X8>)
{
  unsigned __int16 **v1;
  unsigned __int16 **v2;
  unsigned __int16 *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t inited;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  int v18;
  char v19;
  unsigned __int16 *v20;
  unsigned __int16 *v21;
  char v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  __int16 v26;
  char v27;

  v2 = v1;
  v4 = *v1;
  v5 = (uint64_t)*v1 + 41;
  v6 = (*v1)[8];
  v7 = v4[9];
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAE50, (uint64_t (*)(uint64_t))sub_1B19F66EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226CD10;
  *(_QWORD *)(inited + 32) = &type metadata for ParticleFluidSolver2DSolver;
  *(_QWORD *)(inited + 40) = &off_1E63B3270;
  *(_QWORD *)(inited + 48) = &type metadata for WorldTransform;
  *(_QWORD *)(inited + 56) = &off_1E6382C78;
  if (v7 > 0xF)
  {
    v25 = sub_1B1DC8944((char *)(v5 + v6), v7 >> 4);
    sub_1B19F4A48(inited);
    inited = v25;
  }
  v9 = v4[10];
  v10 = v4[11];
  v11 = 2;
  v12 = sub_1B2228B0C();
  *(_QWORD *)(v12 + 16) = 2;
  *(_WORD *)(v12 + 32) = 771;
  if (v10)
  {
    v25 = sub_1B1DC8810((char *)(v5 + v9), v10);
    sub_1B19F499C(v12);
    v12 = v25;
    v11 = *(_QWORD *)(v25 + 16);
  }
  v13 = (uint64_t)*v2 + 41;
  v14 = (char *)(v13 + (*v2)[12]);
  v15 = (unint64_t)(*v2)[13] >> 4;
  v16 = (char *)(v13 + (*v2)[14]);
  v17 = (*v2)[15] / 0x18u;
  v18 = *((_DWORD *)v2 + 2);
  v19 = *((_BYTE *)v2 + 12);
  v20 = v2[4];
  v21 = v2[2];
  v22 = *((_BYTE *)v2 + 24);
  v23 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v12 + 32), v11, v14, v15, v16, v17);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a1 = v23;
  *(_DWORD *)(a1 + 8) = v18;
  *(_BYTE *)(a1 + 12) = v19;
  *(_WORD *)(a1 + 13) = v26;
  *(_BYTE *)(a1 + 15) = v27;
  *(_QWORD *)(a1 + 16) = v21;
  *(_BYTE *)(a1 + 24) = v22;
  *(_DWORD *)(a1 + 25) = v25;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)((char *)&v25 + 3);
  *(_QWORD *)(a1 + 32) = v20;
  return result;
}

uint64_t sub_1B19EF58C@<X0>(uint64_t a1@<X8>)
{
  unsigned __int16 **v1;
  unsigned __int16 **v2;
  unsigned __int16 *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t inited;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  int v18;
  char v19;
  unsigned __int16 *v20;
  unsigned __int16 *v21;
  char v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  __int16 v26;
  char v27;

  v2 = v1;
  v4 = *v1;
  v5 = (uint64_t)*v1 + 41;
  v6 = (*v1)[8];
  v7 = v4[9];
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAE50, (uint64_t (*)(uint64_t))sub_1B19F66EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226CD10;
  *(_QWORD *)(inited + 32) = &type metadata for Velocity;
  *(_QWORD *)(inited + 40) = &off_1E63C3148;
  *(_QWORD *)(inited + 48) = &type metadata for ParticleAffectedByGlobalFluidSolver2DSolver;
  *(_QWORD *)(inited + 56) = &off_1E63B9438;
  if (v7 > 0xF)
  {
    v25 = sub_1B1DC8944((char *)(v5 + v6), v7 >> 4);
    sub_1B19F4A48(inited);
    inited = v25;
  }
  v9 = v4[10];
  v10 = v4[11];
  v11 = 2;
  v12 = sub_1B2228B0C();
  *(_QWORD *)(v12 + 16) = 2;
  *(_WORD *)(v12 + 32) = 771;
  if (v10)
  {
    v25 = sub_1B1DC8810((char *)(v5 + v9), v10);
    sub_1B19F499C(v12);
    v12 = v25;
    v11 = *(_QWORD *)(v25 + 16);
  }
  v13 = (uint64_t)*v2 + 41;
  v14 = (char *)(v13 + (*v2)[12]);
  v15 = (unint64_t)(*v2)[13] >> 4;
  v16 = (char *)(v13 + (*v2)[14]);
  v17 = (*v2)[15] / 0x18u;
  v18 = *((_DWORD *)v2 + 2);
  v19 = *((_BYTE *)v2 + 12);
  v20 = v2[4];
  v21 = v2[2];
  v22 = *((_BYTE *)v2 + 24);
  v23 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v12 + 32), v11, v14, v15, v16, v17);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a1 = v23;
  *(_DWORD *)(a1 + 8) = v18;
  *(_BYTE *)(a1 + 12) = v19;
  *(_WORD *)(a1 + 13) = v26;
  *(_BYTE *)(a1 + 15) = v27;
  *(_QWORD *)(a1 + 16) = v21;
  *(_BYTE *)(a1 + 24) = v22;
  *(_DWORD *)(a1 + 25) = v25;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)((char *)&v25 + 3);
  *(_QWORD *)(a1 + 32) = v20;
  return result;
}

uint64_t sub_1B19EF790@<X0>(uint64_t a1@<X8>)
{
  unsigned __int16 **v1;
  unsigned __int16 **v2;
  unsigned __int16 *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t inited;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  int v18;
  char v19;
  unsigned __int16 *v20;
  unsigned __int16 *v21;
  char v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  __int16 v26;
  char v27;

  v2 = v1;
  v4 = *v1;
  v5 = (uint64_t)*v1 + 41;
  v6 = (*v1)[8];
  v7 = v4[9];
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAE50, (uint64_t (*)(uint64_t))sub_1B19F66EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226CD10;
  *(_QWORD *)(inited + 32) = &type metadata for PointOfCulling;
  *(_QWORD *)(inited + 40) = &off_1E6380438;
  *(_QWORD *)(inited + 48) = &type metadata for Position;
  *(_QWORD *)(inited + 56) = &off_1E63C2410;
  if (v7 > 0xF)
  {
    v25 = sub_1B1DC8944((char *)(v5 + v6), v7 >> 4);
    sub_1B19F4A48(inited);
    inited = v25;
  }
  v9 = v4[10];
  v10 = v4[11];
  v11 = 2;
  v12 = sub_1B2228B0C();
  *(_QWORD *)(v12 + 16) = 2;
  *(_WORD *)(v12 + 32) = 771;
  if (v10)
  {
    v25 = sub_1B1DC8810((char *)(v5 + v9), v10);
    sub_1B19F499C(v12);
    v12 = v25;
    v11 = *(_QWORD *)(v25 + 16);
  }
  v13 = (uint64_t)*v2 + 41;
  v14 = (char *)(v13 + (*v2)[12]);
  v15 = (unint64_t)(*v2)[13] >> 4;
  v16 = (char *)(v13 + (*v2)[14]);
  v17 = (*v2)[15] / 0x18u;
  v18 = *((_DWORD *)v2 + 2);
  v19 = *((_BYTE *)v2 + 12);
  v20 = v2[4];
  v21 = v2[2];
  v22 = *((_BYTE *)v2 + 24);
  v23 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v12 + 32), v11, v14, v15, v16, v17);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a1 = v23;
  *(_DWORD *)(a1 + 8) = v18;
  *(_BYTE *)(a1 + 12) = v19;
  *(_WORD *)(a1 + 13) = v26;
  *(_BYTE *)(a1 + 15) = v27;
  *(_QWORD *)(a1 + 16) = v21;
  *(_BYTE *)(a1 + 24) = v22;
  *(_DWORD *)(a1 + 25) = v25;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)((char *)&v25 + 3);
  *(_QWORD *)(a1 + 32) = v20;
  return result;
}

uint64_t sub_1B19EF994@<X0>(uint64_t a1@<X8>)
{
  unsigned __int16 **v1;
  unsigned __int16 **v2;
  unsigned __int16 *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t inited;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  int v18;
  char v19;
  unsigned __int16 *v20;
  unsigned __int16 *v21;
  char v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  __int16 v26;
  char v27;

  v2 = v1;
  v4 = *v1;
  v5 = (uint64_t)*v1 + 41;
  v6 = (*v1)[8];
  v7 = v4[9];
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAE50, (uint64_t (*)(uint64_t))sub_1B19F66EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226CD10;
  *(_QWORD *)(inited + 32) = &type metadata for Orientation;
  *(_QWORD *)(inited + 40) = &off_1E63715B8;
  *(_QWORD *)(inited + 48) = &type metadata for AngularVelocity;
  *(_QWORD *)(inited + 56) = &off_1E6383238;
  if (v7 > 0xF)
  {
    v25 = sub_1B1DC8944((char *)(v5 + v6), v7 >> 4);
    sub_1B19F4A48(inited);
    inited = v25;
  }
  v9 = v4[10];
  v10 = v4[11];
  v11 = 2;
  v12 = sub_1B2228B0C();
  *(_QWORD *)(v12 + 16) = 2;
  *(_WORD *)(v12 + 32) = 771;
  if (v10)
  {
    v25 = sub_1B1DC8810((char *)(v5 + v9), v10);
    sub_1B19F499C(v12);
    v12 = v25;
    v11 = *(_QWORD *)(v25 + 16);
  }
  v13 = (uint64_t)*v2 + 41;
  v14 = (char *)(v13 + (*v2)[12]);
  v15 = (unint64_t)(*v2)[13] >> 4;
  v16 = (char *)(v13 + (*v2)[14]);
  v17 = (*v2)[15] / 0x18u;
  v18 = *((_DWORD *)v2 + 2);
  v19 = *((_BYTE *)v2 + 12);
  v20 = v2[4];
  v21 = v2[2];
  v22 = *((_BYTE *)v2 + 24);
  v23 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v12 + 32), v11, v14, v15, v16, v17);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a1 = v23;
  *(_DWORD *)(a1 + 8) = v18;
  *(_BYTE *)(a1 + 12) = v19;
  *(_WORD *)(a1 + 13) = v26;
  *(_BYTE *)(a1 + 15) = v27;
  *(_QWORD *)(a1 + 16) = v21;
  *(_BYTE *)(a1 + 24) = v22;
  *(_DWORD *)(a1 + 25) = v25;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)((char *)&v25 + 3);
  *(_QWORD *)(a1 + 32) = v20;
  return result;
}

uint64_t sub_1B19EFB98@<X0>(uint64_t a1@<X8>)
{
  unsigned __int16 **v1;
  unsigned __int16 **v2;
  unsigned __int16 *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t inited;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  int v18;
  char v19;
  unsigned __int16 *v20;
  unsigned __int16 *v21;
  char v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  __int16 v26;
  char v27;

  v2 = v1;
  v4 = *v1;
  v5 = (uint64_t)*v1 + 41;
  v6 = (*v1)[8];
  v7 = v4[9];
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAE50, (uint64_t (*)(uint64_t))sub_1B19F66EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226CD10;
  *(_QWORD *)(inited + 32) = &type metadata for Position;
  *(_QWORD *)(inited + 40) = &off_1E63C2410;
  *(_QWORD *)(inited + 48) = &type metadata for Velocity;
  *(_QWORD *)(inited + 56) = &off_1E63C3148;
  if (v7 > 0xF)
  {
    v25 = sub_1B1DC8944((char *)(v5 + v6), v7 >> 4);
    sub_1B19F4A48(inited);
    inited = v25;
  }
  v9 = v4[10];
  v10 = v4[11];
  v11 = 2;
  v12 = sub_1B2228B0C();
  *(_QWORD *)(v12 + 16) = 2;
  *(_WORD *)(v12 + 32) = 771;
  if (v10)
  {
    v25 = sub_1B1DC8810((char *)(v5 + v9), v10);
    sub_1B19F499C(v12);
    v12 = v25;
    v11 = *(_QWORD *)(v25 + 16);
  }
  v13 = (uint64_t)*v2 + 41;
  v14 = (char *)(v13 + (*v2)[12]);
  v15 = (unint64_t)(*v2)[13] >> 4;
  v16 = (char *)(v13 + (*v2)[14]);
  v17 = (*v2)[15] / 0x18u;
  v18 = *((_DWORD *)v2 + 2);
  v19 = *((_BYTE *)v2 + 12);
  v20 = v2[4];
  v21 = v2[2];
  v22 = *((_BYTE *)v2 + 24);
  v23 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v12 + 32), v11, v14, v15, v16, v17);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a1 = v23;
  *(_DWORD *)(a1 + 8) = v18;
  *(_BYTE *)(a1 + 12) = v19;
  *(_WORD *)(a1 + 13) = v26;
  *(_BYTE *)(a1 + 15) = v27;
  *(_QWORD *)(a1 + 16) = v21;
  *(_BYTE *)(a1 + 24) = v22;
  *(_DWORD *)(a1 + 25) = v25;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)((char *)&v25 + 3);
  *(_QWORD *)(a1 + 32) = v20;
  return result;
}

uint64_t sub_1B19EFD9C@<X0>(uint64_t a1@<X8>)
{
  unsigned __int16 **v1;
  unsigned __int16 **v2;
  unsigned __int16 *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t inited;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  int v18;
  char v19;
  unsigned __int16 *v20;
  unsigned __int16 *v21;
  char v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  __int16 v26;
  char v27;

  v2 = v1;
  v4 = *v1;
  v5 = (uint64_t)*v1 + 41;
  v6 = (*v1)[8];
  v7 = v4[9];
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAE50, (uint64_t (*)(uint64_t))sub_1B19F66EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226CD10;
  *(_QWORD *)(inited + 32) = &type metadata for Position;
  *(_QWORD *)(inited + 40) = &off_1E63C2410;
  *(_QWORD *)(inited + 48) = &type metadata for Scale;
  *(_QWORD *)(inited + 56) = &off_1E63BAA30;
  if (v7 > 0xF)
  {
    v25 = sub_1B1DC8944((char *)(v5 + v6), v7 >> 4);
    sub_1B19F4A48(inited);
    inited = v25;
  }
  v9 = v4[10];
  v10 = v4[11];
  v11 = 2;
  v12 = sub_1B2228B0C();
  *(_QWORD *)(v12 + 16) = 2;
  *(_WORD *)(v12 + 32) = 771;
  if (v10)
  {
    v25 = sub_1B1DC8810((char *)(v5 + v9), v10);
    sub_1B19F499C(v12);
    v12 = v25;
    v11 = *(_QWORD *)(v25 + 16);
  }
  v13 = (uint64_t)*v2 + 41;
  v14 = (char *)(v13 + (*v2)[12]);
  v15 = (unint64_t)(*v2)[13] >> 4;
  v16 = (char *)(v13 + (*v2)[14]);
  v17 = (*v2)[15] / 0x18u;
  v18 = *((_DWORD *)v2 + 2);
  v19 = *((_BYTE *)v2 + 12);
  v20 = v2[4];
  v21 = v2[2];
  v22 = *((_BYTE *)v2 + 24);
  v23 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v12 + 32), v11, v14, v15, v16, v17);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a1 = v23;
  *(_DWORD *)(a1 + 8) = v18;
  *(_BYTE *)(a1 + 12) = v19;
  *(_WORD *)(a1 + 13) = v26;
  *(_BYTE *)(a1 + 15) = v27;
  *(_QWORD *)(a1 + 16) = v21;
  *(_BYTE *)(a1 + 24) = v22;
  *(_DWORD *)(a1 + 25) = v25;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)((char *)&v25 + 3);
  *(_QWORD *)(a1 + 32) = v20;
  return result;
}

uint64_t sub_1B19EFFA0@<X0>(uint64_t a1@<X8>)
{
  unsigned __int16 **v1;
  unsigned __int16 **v2;
  unsigned __int16 *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t inited;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  int v18;
  char v19;
  unsigned __int16 *v20;
  unsigned __int16 *v21;
  char v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  __int16 v26;
  char v27;

  v2 = v1;
  v4 = *v1;
  v5 = (uint64_t)*v1 + 41;
  v6 = (*v1)[8];
  v7 = v4[9];
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAE50, (uint64_t (*)(uint64_t))sub_1B19F66EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226CD10;
  *(_QWORD *)(inited + 32) = &type metadata for Position;
  *(_QWORD *)(inited + 40) = &off_1E63C2410;
  *(_QWORD *)(inited + 48) = &type metadata for ParticleCustomEmitter;
  *(_QWORD *)(inited + 56) = &off_1E63A4590;
  if (v7 > 0xF)
  {
    v25 = sub_1B1DC8944((char *)(v5 + v6), v7 >> 4);
    sub_1B19F4A48(inited);
    inited = v25;
  }
  v9 = v4[10];
  v10 = v4[11];
  v11 = 2;
  v12 = sub_1B2228B0C();
  *(_QWORD *)(v12 + 16) = 2;
  *(_WORD *)(v12 + 32) = 771;
  if (v10)
  {
    v25 = sub_1B1DC8810((char *)(v5 + v9), v10);
    sub_1B19F499C(v12);
    v12 = v25;
    v11 = *(_QWORD *)(v25 + 16);
  }
  v13 = (uint64_t)*v2 + 41;
  v14 = (char *)(v13 + (*v2)[12]);
  v15 = (unint64_t)(*v2)[13] >> 4;
  v16 = (char *)(v13 + (*v2)[14]);
  v17 = (*v2)[15] / 0x18u;
  v18 = *((_DWORD *)v2 + 2);
  v19 = *((_BYTE *)v2 + 12);
  v20 = v2[4];
  v21 = v2[2];
  v22 = *((_BYTE *)v2 + 24);
  v23 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v12 + 32), v11, v14, v15, v16, v17);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a1 = v23;
  *(_DWORD *)(a1 + 8) = v18;
  *(_BYTE *)(a1 + 12) = v19;
  *(_WORD *)(a1 + 13) = v26;
  *(_BYTE *)(a1 + 15) = v27;
  *(_QWORD *)(a1 + 16) = v21;
  *(_BYTE *)(a1 + 24) = v22;
  *(_DWORD *)(a1 + 25) = v25;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)((char *)&v25 + 3);
  *(_QWORD *)(a1 + 32) = v20;
  return result;
}

uint64_t sub_1B19F01A4@<X0>(uint64_t a1@<X8>)
{
  unsigned __int16 **v1;
  unsigned __int16 **v2;
  unsigned __int16 *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t inited;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  int v18;
  char v19;
  unsigned __int16 *v20;
  unsigned __int16 *v21;
  char v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  __int16 v26;
  char v27;

  v2 = v1;
  v4 = *v1;
  v5 = (uint64_t)*v1 + 41;
  v6 = (*v1)[8];
  v7 = v4[9];
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAE50, (uint64_t (*)(uint64_t))sub_1B19F66EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226CD10;
  *(_QWORD *)(inited + 32) = &type metadata for Scale1;
  *(_QWORD *)(inited + 40) = &off_1E63BC300;
  *(_QWORD *)(inited + 48) = &type metadata for ParticleAge;
  *(_QWORD *)(inited + 56) = &off_1E6371840;
  if (v7 > 0xF)
  {
    v25 = sub_1B1DC8944((char *)(v5 + v6), v7 >> 4);
    sub_1B19F4A48(inited);
    inited = v25;
  }
  v9 = v4[10];
  v10 = v4[11];
  v11 = 2;
  v12 = sub_1B2228B0C();
  *(_QWORD *)(v12 + 16) = 2;
  *(_WORD *)(v12 + 32) = 771;
  if (v10)
  {
    v25 = sub_1B1DC8810((char *)(v5 + v9), v10);
    sub_1B19F499C(v12);
    v12 = v25;
    v11 = *(_QWORD *)(v25 + 16);
  }
  v13 = (uint64_t)*v2 + 41;
  v14 = (char *)(v13 + (*v2)[12]);
  v15 = (unint64_t)(*v2)[13] >> 4;
  v16 = (char *)(v13 + (*v2)[14]);
  v17 = (*v2)[15] / 0x18u;
  v18 = *((_DWORD *)v2 + 2);
  v19 = *((_BYTE *)v2 + 12);
  v20 = v2[4];
  v21 = v2[2];
  v22 = *((_BYTE *)v2 + 24);
  v23 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v12 + 32), v11, v14, v15, v16, v17);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a1 = v23;
  *(_DWORD *)(a1 + 8) = v18;
  *(_BYTE *)(a1 + 12) = v19;
  *(_WORD *)(a1 + 13) = v26;
  *(_BYTE *)(a1 + 15) = v27;
  *(_QWORD *)(a1 + 16) = v21;
  *(_BYTE *)(a1 + 24) = v22;
  *(_DWORD *)(a1 + 25) = v25;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)((char *)&v25 + 3);
  *(_QWORD *)(a1 + 32) = v20;
  return result;
}

uint64_t sub_1B19F03A8@<X0>(uint64_t a1@<X8>)
{
  unsigned __int16 **v1;
  unsigned __int16 **v2;
  unsigned __int16 *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t inited;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  int v18;
  char v19;
  unsigned __int16 *v20;
  unsigned __int16 *v21;
  char v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  __int16 v26;
  char v27;

  v2 = v1;
  v4 = *v1;
  v5 = (uint64_t)*v1 + 41;
  v6 = (*v1)[8];
  v7 = v4[9];
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAE50, (uint64_t (*)(uint64_t))sub_1B19F66EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226CD10;
  *(_QWORD *)(inited + 32) = &type metadata for Scale2;
  *(_QWORD *)(inited + 40) = &off_1E63BC468;
  *(_QWORD *)(inited + 48) = &type metadata for ParticleAge;
  *(_QWORD *)(inited + 56) = &off_1E6371840;
  if (v7 > 0xF)
  {
    v25 = sub_1B1DC8944((char *)(v5 + v6), v7 >> 4);
    sub_1B19F4A48(inited);
    inited = v25;
  }
  v9 = v4[10];
  v10 = v4[11];
  v11 = 2;
  v12 = sub_1B2228B0C();
  *(_QWORD *)(v12 + 16) = 2;
  *(_WORD *)(v12 + 32) = 771;
  if (v10)
  {
    v25 = sub_1B1DC8810((char *)(v5 + v9), v10);
    sub_1B19F499C(v12);
    v12 = v25;
    v11 = *(_QWORD *)(v25 + 16);
  }
  v13 = (uint64_t)*v2 + 41;
  v14 = (char *)(v13 + (*v2)[12]);
  v15 = (unint64_t)(*v2)[13] >> 4;
  v16 = (char *)(v13 + (*v2)[14]);
  v17 = (*v2)[15] / 0x18u;
  v18 = *((_DWORD *)v2 + 2);
  v19 = *((_BYTE *)v2 + 12);
  v20 = v2[4];
  v21 = v2[2];
  v22 = *((_BYTE *)v2 + 24);
  v23 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v12 + 32), v11, v14, v15, v16, v17);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a1 = v23;
  *(_DWORD *)(a1 + 8) = v18;
  *(_BYTE *)(a1 + 12) = v19;
  *(_WORD *)(a1 + 13) = v26;
  *(_BYTE *)(a1 + 15) = v27;
  *(_QWORD *)(a1 + 16) = v21;
  *(_BYTE *)(a1 + 24) = v22;
  *(_DWORD *)(a1 + 25) = v25;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)((char *)&v25 + 3);
  *(_QWORD *)(a1 + 32) = v20;
  return result;
}

uint64_t sub_1B19F05AC@<X0>(uint64_t a1@<X8>)
{
  unsigned __int16 **v1;
  unsigned __int16 **v2;
  unsigned __int16 *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t inited;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  int v18;
  char v19;
  unsigned __int16 *v20;
  unsigned __int16 *v21;
  char v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  __int16 v26;
  char v27;

  v2 = v1;
  v4 = *v1;
  v5 = (uint64_t)*v1 + 41;
  v6 = (*v1)[8];
  v7 = v4[9];
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAE50, (uint64_t (*)(uint64_t))sub_1B19F66EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226CD10;
  *(_QWORD *)(inited + 32) = &type metadata for Scale;
  *(_QWORD *)(inited + 40) = &off_1E63BAA30;
  *(_QWORD *)(inited + 48) = &type metadata for ParticleAge;
  *(_QWORD *)(inited + 56) = &off_1E6371840;
  if (v7 > 0xF)
  {
    v25 = sub_1B1DC8944((char *)(v5 + v6), v7 >> 4);
    sub_1B19F4A48(inited);
    inited = v25;
  }
  v9 = v4[10];
  v10 = v4[11];
  v11 = 2;
  v12 = sub_1B2228B0C();
  *(_QWORD *)(v12 + 16) = 2;
  *(_WORD *)(v12 + 32) = 771;
  if (v10)
  {
    v25 = sub_1B1DC8810((char *)(v5 + v9), v10);
    sub_1B19F499C(v12);
    v12 = v25;
    v11 = *(_QWORD *)(v25 + 16);
  }
  v13 = (uint64_t)*v2 + 41;
  v14 = (char *)(v13 + (*v2)[12]);
  v15 = (unint64_t)(*v2)[13] >> 4;
  v16 = (char *)(v13 + (*v2)[14]);
  v17 = (*v2)[15] / 0x18u;
  v18 = *((_DWORD *)v2 + 2);
  v19 = *((_BYTE *)v2 + 12);
  v20 = v2[4];
  v21 = v2[2];
  v22 = *((_BYTE *)v2 + 24);
  v23 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v12 + 32), v11, v14, v15, v16, v17);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a1 = v23;
  *(_DWORD *)(a1 + 8) = v18;
  *(_BYTE *)(a1 + 12) = v19;
  *(_WORD *)(a1 + 13) = v26;
  *(_BYTE *)(a1 + 15) = v27;
  *(_QWORD *)(a1 + 16) = v21;
  *(_BYTE *)(a1 + 24) = v22;
  *(_DWORD *)(a1 + 25) = v25;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)((char *)&v25 + 3);
  *(_QWORD *)(a1 + 32) = v20;
  return result;
}

uint64_t sub_1B19F07B0@<X0>(uint64_t a1@<X8>)
{
  unsigned __int16 **v1;
  unsigned __int16 **v2;
  unsigned __int16 *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t inited;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  int v18;
  char v19;
  unsigned __int16 *v20;
  unsigned __int16 *v21;
  char v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  __int16 v26;
  char v27;

  v2 = v1;
  v4 = *v1;
  v5 = (uint64_t)*v1 + 41;
  v6 = (*v1)[8];
  v7 = v4[9];
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAE50, (uint64_t (*)(uint64_t))sub_1B19F66EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226CD10;
  *(_QWORD *)(inited + 32) = &type metadata for Orientation;
  *(_QWORD *)(inited + 40) = &off_1E63715B8;
  *(_QWORD *)(inited + 48) = &type metadata for Position;
  *(_QWORD *)(inited + 56) = &off_1E63C2410;
  if (v7 > 0xF)
  {
    v25 = sub_1B1DC8944((char *)(v5 + v6), v7 >> 4);
    sub_1B19F4A48(inited);
    inited = v25;
  }
  v9 = v4[10];
  v10 = v4[11];
  v11 = 2;
  v12 = sub_1B2228B0C();
  *(_QWORD *)(v12 + 16) = 2;
  *(_WORD *)(v12 + 32) = 771;
  if (v10)
  {
    v25 = sub_1B1DC8810((char *)(v5 + v9), v10);
    sub_1B19F499C(v12);
    v12 = v25;
    v11 = *(_QWORD *)(v25 + 16);
  }
  v13 = (uint64_t)*v2 + 41;
  v14 = (char *)(v13 + (*v2)[12]);
  v15 = (unint64_t)(*v2)[13] >> 4;
  v16 = (char *)(v13 + (*v2)[14]);
  v17 = (*v2)[15] / 0x18u;
  v18 = *((_DWORD *)v2 + 2);
  v19 = *((_BYTE *)v2 + 12);
  v20 = v2[4];
  v21 = v2[2];
  v22 = *((_BYTE *)v2 + 24);
  v23 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v12 + 32), v11, v14, v15, v16, v17);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a1 = v23;
  *(_DWORD *)(a1 + 8) = v18;
  *(_BYTE *)(a1 + 12) = v19;
  *(_WORD *)(a1 + 13) = v26;
  *(_BYTE *)(a1 + 15) = v27;
  *(_QWORD *)(a1 + 16) = v21;
  *(_BYTE *)(a1 + 24) = v22;
  *(_DWORD *)(a1 + 25) = v25;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)((char *)&v25 + 3);
  *(_QWORD *)(a1 + 32) = v20;
  return result;
}

uint64_t sub_1B19F09B4@<X0>(uint64_t a1@<X8>)
{
  unsigned __int16 **v1;
  unsigned __int16 **v2;
  unsigned __int16 *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t inited;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  int v18;
  char v19;
  unsigned __int16 *v20;
  unsigned __int16 *v21;
  char v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  __int16 v26;
  char v27;

  v2 = v1;
  v4 = *v1;
  v5 = (uint64_t)*v1 + 41;
  v6 = (*v1)[8];
  v7 = v4[9];
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAE50, (uint64_t (*)(uint64_t))sub_1B19F66EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226CD10;
  *(_QWORD *)(inited + 32) = &type metadata for KillShape;
  *(_QWORD *)(inited + 40) = &off_1E63C3EA0;
  *(_QWORD *)(inited + 48) = &type metadata for WorldTransform;
  *(_QWORD *)(inited + 56) = &off_1E6382C78;
  if (v7 > 0xF)
  {
    v25 = sub_1B1DC8944((char *)(v5 + v6), v7 >> 4);
    sub_1B19F4A48(inited);
    inited = v25;
  }
  v9 = v4[10];
  v10 = v4[11];
  v11 = 2;
  v12 = sub_1B2228B0C();
  *(_QWORD *)(v12 + 16) = 2;
  *(_WORD *)(v12 + 32) = 771;
  if (v10)
  {
    v25 = sub_1B1DC8810((char *)(v5 + v9), v10);
    sub_1B19F499C(v12);
    v12 = v25;
    v11 = *(_QWORD *)(v25 + 16);
  }
  v13 = (uint64_t)*v2 + 41;
  v14 = (char *)(v13 + (*v2)[12]);
  v15 = (unint64_t)(*v2)[13] >> 4;
  v16 = (char *)(v13 + (*v2)[14]);
  v17 = (*v2)[15] / 0x18u;
  v18 = *((_DWORD *)v2 + 2);
  v19 = *((_BYTE *)v2 + 12);
  v20 = v2[4];
  v21 = v2[2];
  v22 = *((_BYTE *)v2 + 24);
  v23 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v12 + 32), v11, v14, v15, v16, v17);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a1 = v23;
  *(_DWORD *)(a1 + 8) = v18;
  *(_BYTE *)(a1 + 12) = v19;
  *(_WORD *)(a1 + 13) = v26;
  *(_BYTE *)(a1 + 15) = v27;
  *(_QWORD *)(a1 + 16) = v21;
  *(_BYTE *)(a1 + 24) = v22;
  *(_DWORD *)(a1 + 25) = v25;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)((char *)&v25 + 3);
  *(_QWORD *)(a1 + 32) = v20;
  return result;
}

uint64_t sub_1B19F0BB8@<X0>(uint64_t a1@<X8>)
{
  unsigned __int16 **v1;
  unsigned __int16 **v2;
  unsigned __int16 *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t inited;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  int v18;
  char v19;
  unsigned __int16 *v20;
  unsigned __int16 *v21;
  char v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  __int16 v26;
  char v27;

  v2 = v1;
  v4 = *v1;
  v5 = (uint64_t)*v1 + 41;
  v6 = (*v1)[8];
  v7 = v4[9];
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAE50, (uint64_t (*)(uint64_t))sub_1B19F66EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226CD10;
  *(_QWORD *)(inited + 32) = &type metadata for ParticleCollisionEvent;
  *(_QWORD *)(inited + 40) = &off_1E63A8050;
  *(_QWORD *)(inited + 48) = &type metadata for OldEvent;
  *(_QWORD *)(inited + 56) = &off_1E63C20C0;
  if (v7 > 0xF)
  {
    v25 = sub_1B1DC8944((char *)(v5 + v6), v7 >> 4);
    sub_1B19F4A48(inited);
    inited = v25;
  }
  v9 = v4[10];
  v10 = v4[11];
  v11 = 2;
  v12 = sub_1B2228B0C();
  *(_QWORD *)(v12 + 16) = 2;
  *(_WORD *)(v12 + 32) = 771;
  if (v10)
  {
    v25 = sub_1B1DC8810((char *)(v5 + v9), v10);
    sub_1B19F499C(v12);
    v12 = v25;
    v11 = *(_QWORD *)(v25 + 16);
  }
  v13 = (uint64_t)*v2 + 41;
  v14 = (char *)(v13 + (*v2)[12]);
  v15 = (unint64_t)(*v2)[13] >> 4;
  v16 = (char *)(v13 + (*v2)[14]);
  v17 = (*v2)[15] / 0x18u;
  v18 = *((_DWORD *)v2 + 2);
  v19 = *((_BYTE *)v2 + 12);
  v20 = v2[4];
  v21 = v2[2];
  v22 = *((_BYTE *)v2 + 24);
  v23 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v12 + 32), v11, v14, v15, v16, v17);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a1 = v23;
  *(_DWORD *)(a1 + 8) = v18;
  *(_BYTE *)(a1 + 12) = v19;
  *(_WORD *)(a1 + 13) = v26;
  *(_BYTE *)(a1 + 15) = v27;
  *(_QWORD *)(a1 + 16) = v21;
  *(_BYTE *)(a1 + 24) = v22;
  *(_DWORD *)(a1 + 25) = v25;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)((char *)&v25 + 3);
  *(_QWORD *)(a1 + 32) = v20;
  return result;
}

uint64_t sub_1B19F0DBC@<X0>(uint64_t a1@<X8>)
{
  unsigned __int16 **v1;
  unsigned __int16 **v2;
  unsigned __int16 *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t inited;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  int v18;
  char v19;
  unsigned __int16 *v20;
  unsigned __int16 *v21;
  char v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  __int16 v26;
  char v27;

  v2 = v1;
  v4 = *v1;
  v5 = (uint64_t)*v1 + 41;
  v6 = (*v1)[8];
  v7 = v4[9];
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAE50, (uint64_t (*)(uint64_t))sub_1B19F66EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226CD10;
  *(_QWORD *)(inited + 32) = &type metadata for ParticleLifetime;
  *(_QWORD *)(inited + 40) = &off_1E6389198;
  *(_QWORD *)(inited + 48) = &type metadata for ParticleAge;
  *(_QWORD *)(inited + 56) = &off_1E6371840;
  if (v7 > 0xF)
  {
    v25 = sub_1B1DC8944((char *)(v5 + v6), v7 >> 4);
    sub_1B19F4A48(inited);
    inited = v25;
  }
  v9 = v4[10];
  v10 = v4[11];
  v11 = 2;
  v12 = sub_1B2228B0C();
  *(_QWORD *)(v12 + 16) = 2;
  *(_WORD *)(v12 + 32) = 771;
  if (v10)
  {
    v25 = sub_1B1DC8810((char *)(v5 + v9), v10);
    sub_1B19F499C(v12);
    v12 = v25;
    v11 = *(_QWORD *)(v25 + 16);
  }
  v13 = (uint64_t)*v2 + 41;
  v14 = (char *)(v13 + (*v2)[12]);
  v15 = (unint64_t)(*v2)[13] >> 4;
  v16 = (char *)(v13 + (*v2)[14]);
  v17 = (*v2)[15] / 0x18u;
  v18 = *((_DWORD *)v2 + 2);
  v19 = *((_BYTE *)v2 + 12);
  v20 = v2[4];
  v21 = v2[2];
  v22 = *((_BYTE *)v2 + 24);
  v23 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v12 + 32), v11, v14, v15, v16, v17);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a1 = v23;
  *(_DWORD *)(a1 + 8) = v18;
  *(_BYTE *)(a1 + 12) = v19;
  *(_WORD *)(a1 + 13) = v26;
  *(_BYTE *)(a1 + 15) = v27;
  *(_QWORD *)(a1 + 16) = v21;
  *(_BYTE *)(a1 + 24) = v22;
  *(_DWORD *)(a1 + 25) = v25;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)((char *)&v25 + 3);
  *(_QWORD *)(a1 + 32) = v20;
  return result;
}

uint64_t sub_1B19F0FC0@<X0>(uint64_t a1@<X8>)
{
  unsigned __int16 **v1;
  unsigned __int16 **v2;
  unsigned __int16 *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t inited;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  int v18;
  char v19;
  unsigned __int16 *v20;
  unsigned __int16 *v21;
  char v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  __int16 v26;
  char v27;

  v2 = v1;
  v4 = *v1;
  v5 = (uint64_t)*v1 + 41;
  v6 = (*v1)[8];
  v7 = v4[9];
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAE50, (uint64_t (*)(uint64_t))sub_1B19F66EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226CD10;
  *(_QWORD *)(inited + 32) = &type metadata for ParticleAge;
  *(_QWORD *)(inited + 40) = &off_1E6371840;
  *(_QWORD *)(inited + 48) = &type metadata for ParticleLifetime;
  *(_QWORD *)(inited + 56) = &off_1E6389198;
  if (v7 > 0xF)
  {
    v25 = sub_1B1DC8944((char *)(v5 + v6), v7 >> 4);
    sub_1B19F4A48(inited);
    inited = v25;
  }
  v9 = v4[10];
  v10 = v4[11];
  v11 = 2;
  v12 = sub_1B2228B0C();
  *(_QWORD *)(v12 + 16) = 2;
  *(_WORD *)(v12 + 32) = 771;
  if (v10)
  {
    v25 = sub_1B1DC8810((char *)(v5 + v9), v10);
    sub_1B19F499C(v12);
    v12 = v25;
    v11 = *(_QWORD *)(v25 + 16);
  }
  v13 = (uint64_t)*v2 + 41;
  v14 = (char *)(v13 + (*v2)[12]);
  v15 = (unint64_t)(*v2)[13] >> 4;
  v16 = (char *)(v13 + (*v2)[14]);
  v17 = (*v2)[15] / 0x18u;
  v18 = *((_DWORD *)v2 + 2);
  v19 = *((_BYTE *)v2 + 12);
  v20 = v2[4];
  v21 = v2[2];
  v22 = *((_BYTE *)v2 + 24);
  v23 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v12 + 32), v11, v14, v15, v16, v17);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a1 = v23;
  *(_DWORD *)(a1 + 8) = v18;
  *(_BYTE *)(a1 + 12) = v19;
  *(_WORD *)(a1 + 13) = v26;
  *(_BYTE *)(a1 + 15) = v27;
  *(_QWORD *)(a1 + 16) = v21;
  *(_BYTE *)(a1 + 24) = v22;
  *(_DWORD *)(a1 + 25) = v25;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)((char *)&v25 + 3);
  *(_QWORD *)(a1 + 32) = v20;
  return result;
}

uint64_t sub_1B19F11C4@<X0>(uint64_t a1@<X8>)
{
  unsigned __int16 **v1;
  unsigned __int16 **v2;
  unsigned __int16 *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t inited;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  int v18;
  char v19;
  unsigned __int16 *v20;
  unsigned __int16 *v21;
  char v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  __int16 v26;
  char v27;

  v2 = v1;
  v4 = *v1;
  v5 = (uint64_t)*v1 + 41;
  v6 = (*v1)[8];
  v7 = v4[9];
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAE50, (uint64_t (*)(uint64_t))sub_1B19F66EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226CD10;
  *(_QWORD *)(inited + 32) = &type metadata for Color;
  *(_QWORD *)(inited + 40) = &off_1E63BA208;
  *(_QWORD *)(inited + 48) = &type metadata for ParticleAge;
  *(_QWORD *)(inited + 56) = &off_1E6371840;
  if (v7 > 0xF)
  {
    v25 = sub_1B1DC8944((char *)(v5 + v6), v7 >> 4);
    sub_1B19F4A48(inited);
    inited = v25;
  }
  v9 = v4[10];
  v10 = v4[11];
  v11 = 2;
  v12 = sub_1B2228B0C();
  *(_QWORD *)(v12 + 16) = 2;
  *(_WORD *)(v12 + 32) = 771;
  if (v10)
  {
    v25 = sub_1B1DC8810((char *)(v5 + v9), v10);
    sub_1B19F499C(v12);
    v12 = v25;
    v11 = *(_QWORD *)(v25 + 16);
  }
  v13 = (uint64_t)*v2 + 41;
  v14 = (char *)(v13 + (*v2)[12]);
  v15 = (unint64_t)(*v2)[13] >> 4;
  v16 = (char *)(v13 + (*v2)[14]);
  v17 = (*v2)[15] / 0x18u;
  v18 = *((_DWORD *)v2 + 2);
  v19 = *((_BYTE *)v2 + 12);
  v20 = v2[4];
  v21 = v2[2];
  v22 = *((_BYTE *)v2 + 24);
  v23 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v12 + 32), v11, v14, v15, v16, v17);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a1 = v23;
  *(_DWORD *)(a1 + 8) = v18;
  *(_BYTE *)(a1 + 12) = v19;
  *(_WORD *)(a1 + 13) = v26;
  *(_BYTE *)(a1 + 15) = v27;
  *(_QWORD *)(a1 + 16) = v21;
  *(_BYTE *)(a1 + 24) = v22;
  *(_DWORD *)(a1 + 25) = v25;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)((char *)&v25 + 3);
  *(_QWORD *)(a1 + 32) = v20;
  return result;
}

uint64_t sub_1B19F13C8@<X0>(uint64_t a1@<X8>)
{
  unsigned __int16 **v1;
  unsigned __int16 **v2;
  unsigned __int16 *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t inited;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  int v18;
  char v19;
  unsigned __int16 *v20;
  unsigned __int16 *v21;
  char v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  __int16 v26;
  char v27;

  v2 = v1;
  v4 = *v1;
  v5 = (uint64_t)*v1 + 41;
  v6 = (*v1)[8];
  v7 = v4[9];
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAE50, (uint64_t (*)(uint64_t))sub_1B19F66EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226CD10;
  *(_QWORD *)(inited + 32) = &type metadata for ParticleAngle;
  *(_QWORD *)(inited + 40) = &off_1E637BE00;
  *(_QWORD *)(inited + 48) = &type metadata for ParticleAngleVelocity;
  *(_QWORD *)(inited + 56) = &off_1E63A3EA8;
  if (v7 > 0xF)
  {
    v25 = sub_1B1DC8944((char *)(v5 + v6), v7 >> 4);
    sub_1B19F4A48(inited);
    inited = v25;
  }
  v9 = v4[10];
  v10 = v4[11];
  v11 = 2;
  v12 = sub_1B2228B0C();
  *(_QWORD *)(v12 + 16) = 2;
  *(_WORD *)(v12 + 32) = 771;
  if (v10)
  {
    v25 = sub_1B1DC8810((char *)(v5 + v9), v10);
    sub_1B19F499C(v12);
    v12 = v25;
    v11 = *(_QWORD *)(v25 + 16);
  }
  v13 = (uint64_t)*v2 + 41;
  v14 = (char *)(v13 + (*v2)[12]);
  v15 = (unint64_t)(*v2)[13] >> 4;
  v16 = (char *)(v13 + (*v2)[14]);
  v17 = (*v2)[15] / 0x18u;
  v18 = *((_DWORD *)v2 + 2);
  v19 = *((_BYTE *)v2 + 12);
  v20 = v2[4];
  v21 = v2[2];
  v22 = *((_BYTE *)v2 + 24);
  v23 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v12 + 32), v11, v14, v15, v16, v17);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a1 = v23;
  *(_DWORD *)(a1 + 8) = v18;
  *(_BYTE *)(a1 + 12) = v19;
  *(_WORD *)(a1 + 13) = v26;
  *(_BYTE *)(a1 + 15) = v27;
  *(_QWORD *)(a1 + 16) = v21;
  *(_BYTE *)(a1 + 24) = v22;
  *(_DWORD *)(a1 + 25) = v25;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)((char *)&v25 + 3);
  *(_QWORD *)(a1 + 32) = v20;
  return result;
}

uint64_t sub_1B19F15CC@<X0>(uint64_t a1@<X8>)
{
  unsigned __int16 **v1;
  unsigned __int16 **v2;
  unsigned __int16 *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t inited;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  int v18;
  char v19;
  unsigned __int16 *v20;
  unsigned __int16 *v21;
  char v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  __int16 v26;
  char v27;

  v2 = v1;
  v4 = *v1;
  v5 = (uint64_t)*v1 + 41;
  v6 = (*v1)[8];
  v7 = v4[9];
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAE50, (uint64_t (*)(uint64_t))sub_1B19F66EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226CD10;
  *(_QWORD *)(inited + 32) = &type metadata for ParticleTextureFrame;
  *(_QWORD *)(inited + 40) = &off_1E639E0F8;
  *(_QWORD *)(inited + 48) = &type metadata for ParticleAge;
  *(_QWORD *)(inited + 56) = &off_1E6371840;
  if (v7 > 0xF)
  {
    v25 = sub_1B1DC8944((char *)(v5 + v6), v7 >> 4);
    sub_1B19F4A48(inited);
    inited = v25;
  }
  v9 = v4[10];
  v10 = v4[11];
  v11 = 2;
  v12 = sub_1B2228B0C();
  *(_QWORD *)(v12 + 16) = 2;
  *(_WORD *)(v12 + 32) = 771;
  if (v10)
  {
    v25 = sub_1B1DC8810((char *)(v5 + v9), v10);
    sub_1B19F499C(v12);
    v12 = v25;
    v11 = *(_QWORD *)(v25 + 16);
  }
  v13 = (uint64_t)*v2 + 41;
  v14 = (char *)(v13 + (*v2)[12]);
  v15 = (unint64_t)(*v2)[13] >> 4;
  v16 = (char *)(v13 + (*v2)[14]);
  v17 = (*v2)[15] / 0x18u;
  v18 = *((_DWORD *)v2 + 2);
  v19 = *((_BYTE *)v2 + 12);
  v20 = v2[4];
  v21 = v2[2];
  v22 = *((_BYTE *)v2 + 24);
  v23 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v12 + 32), v11, v14, v15, v16, v17);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a1 = v23;
  *(_DWORD *)(a1 + 8) = v18;
  *(_BYTE *)(a1 + 12) = v19;
  *(_WORD *)(a1 + 13) = v26;
  *(_BYTE *)(a1 + 15) = v27;
  *(_QWORD *)(a1 + 16) = v21;
  *(_BYTE *)(a1 + 24) = v22;
  *(_DWORD *)(a1 + 25) = v25;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)((char *)&v25 + 3);
  *(_QWORD *)(a1 + 32) = v20;
  return result;
}

uint64_t sub_1B19F17D0@<X0>(uint64_t a1@<X8>)
{
  unsigned __int16 **v1;
  unsigned __int16 **v2;
  unsigned __int16 *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t inited;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  int v18;
  char v19;
  unsigned __int16 *v20;
  unsigned __int16 *v21;
  char v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  __int16 v26;
  char v27;

  v2 = v1;
  v4 = *v1;
  v5 = (uint64_t)*v1 + 41;
  v6 = (*v1)[8];
  v7 = v4[9];
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAE50, (uint64_t (*)(uint64_t))sub_1B19F66EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226CD10;
  *(_QWORD *)(inited + 32) = &type metadata for Velocity;
  *(_QWORD *)(inited + 40) = &off_1E63C3148;
  *(_QWORD *)(inited + 48) = &type metadata for Orientation;
  *(_QWORD *)(inited + 56) = &off_1E63715B8;
  if (v7 > 0xF)
  {
    v25 = sub_1B1DC8944((char *)(v5 + v6), v7 >> 4);
    sub_1B19F4A48(inited);
    inited = v25;
  }
  v9 = v4[10];
  v10 = v4[11];
  v11 = 2;
  v12 = sub_1B2228B0C();
  *(_QWORD *)(v12 + 16) = 2;
  *(_WORD *)(v12 + 32) = 771;
  if (v10)
  {
    v25 = sub_1B1DC8810((char *)(v5 + v9), v10);
    sub_1B19F499C(v12);
    v12 = v25;
    v11 = *(_QWORD *)(v25 + 16);
  }
  v13 = (uint64_t)*v2 + 41;
  v14 = (char *)(v13 + (*v2)[12]);
  v15 = (unint64_t)(*v2)[13] >> 4;
  v16 = (char *)(v13 + (*v2)[14]);
  v17 = (*v2)[15] / 0x18u;
  v18 = *((_DWORD *)v2 + 2);
  v19 = *((_BYTE *)v2 + 12);
  v20 = v2[4];
  v21 = v2[2];
  v22 = *((_BYTE *)v2 + 24);
  v23 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v12 + 32), v11, v14, v15, v16, v17);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a1 = v23;
  *(_DWORD *)(a1 + 8) = v18;
  *(_BYTE *)(a1 + 12) = v19;
  *(_WORD *)(a1 + 13) = v26;
  *(_BYTE *)(a1 + 15) = v27;
  *(_QWORD *)(a1 + 16) = v21;
  *(_BYTE *)(a1 + 24) = v22;
  *(_DWORD *)(a1 + 25) = v25;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)((char *)&v25 + 3);
  *(_QWORD *)(a1 + 32) = v20;
  return result;
}

uint64_t sub_1B19F19D4@<X0>(uint64_t a1@<X8>)
{
  unsigned __int16 **v1;
  unsigned __int16 **v2;
  unsigned __int16 *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t inited;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  int v18;
  char v19;
  unsigned __int16 *v20;
  unsigned __int16 *v21;
  char v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  __int16 v26;
  char v27;

  v2 = v1;
  v4 = *v1;
  v5 = (uint64_t)*v1 + 41;
  v6 = (*v1)[8];
  v7 = v4[9];
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAE50, (uint64_t (*)(uint64_t))sub_1B19F66EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226CD10;
  *(_QWORD *)(inited + 32) = &type metadata for ParticleMeshCollider;
  *(_QWORD *)(inited + 40) = &off_1E639CA88;
  *(_QWORD *)(inited + 48) = &type metadata for WorldTransform;
  *(_QWORD *)(inited + 56) = &off_1E6382C78;
  if (v7 > 0xF)
  {
    v25 = sub_1B1DC8944((char *)(v5 + v6), v7 >> 4);
    sub_1B19F4A48(inited);
    inited = v25;
  }
  v9 = v4[10];
  v10 = v4[11];
  v11 = 2;
  v12 = sub_1B2228B0C();
  *(_QWORD *)(v12 + 16) = 2;
  *(_WORD *)(v12 + 32) = 771;
  if (v10)
  {
    v25 = sub_1B1DC8810((char *)(v5 + v9), v10);
    sub_1B19F499C(v12);
    v12 = v25;
    v11 = *(_QWORD *)(v25 + 16);
  }
  v13 = (uint64_t)*v2 + 41;
  v14 = (char *)(v13 + (*v2)[12]);
  v15 = (unint64_t)(*v2)[13] >> 4;
  v16 = (char *)(v13 + (*v2)[14]);
  v17 = (*v2)[15] / 0x18u;
  v18 = *((_DWORD *)v2 + 2);
  v19 = *((_BYTE *)v2 + 12);
  v20 = v2[4];
  v21 = v2[2];
  v22 = *((_BYTE *)v2 + 24);
  v23 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v12 + 32), v11, v14, v15, v16, v17);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a1 = v23;
  *(_DWORD *)(a1 + 8) = v18;
  *(_BYTE *)(a1 + 12) = v19;
  *(_WORD *)(a1 + 13) = v26;
  *(_BYTE *)(a1 + 15) = v27;
  *(_QWORD *)(a1 + 16) = v21;
  *(_BYTE *)(a1 + 24) = v22;
  *(_DWORD *)(a1 + 25) = v25;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)((char *)&v25 + 3);
  *(_QWORD *)(a1 + 32) = v20;
  return result;
}

uint64_t sub_1B19F1BD8@<X0>(uint64_t a1@<X8>)
{
  unsigned __int16 **v1;
  unsigned __int16 **v2;
  unsigned __int16 *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t inited;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  int v18;
  char v19;
  unsigned __int16 *v20;
  unsigned __int16 *v21;
  char v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  __int16 v26;
  char v27;

  v2 = v1;
  v4 = *v1;
  v5 = (uint64_t)*v1 + 41;
  v6 = (*v1)[8];
  v7 = v4[9];
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAE50, (uint64_t (*)(uint64_t))sub_1B19F66EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226CD10;
  *(_QWORD *)(inited + 32) = &type metadata for Orientation;
  *(_QWORD *)(inited + 40) = &off_1E63715B8;
  *(_QWORD *)(inited + 48) = &type metadata for Velocity;
  *(_QWORD *)(inited + 56) = &off_1E63C3148;
  if (v7 > 0xF)
  {
    v25 = sub_1B1DC8944((char *)(v5 + v6), v7 >> 4);
    sub_1B19F4A48(inited);
    inited = v25;
  }
  v9 = v4[10];
  v10 = v4[11];
  v11 = 2;
  v12 = sub_1B2228B0C();
  *(_QWORD *)(v12 + 16) = 2;
  *(_WORD *)(v12 + 32) = 771;
  if (v10)
  {
    v25 = sub_1B1DC8810((char *)(v5 + v9), v10);
    sub_1B19F499C(v12);
    v12 = v25;
    v11 = *(_QWORD *)(v25 + 16);
  }
  v13 = (uint64_t)*v2 + 41;
  v14 = (char *)(v13 + (*v2)[12]);
  v15 = (unint64_t)(*v2)[13] >> 4;
  v16 = (char *)(v13 + (*v2)[14]);
  v17 = (*v2)[15] / 0x18u;
  v18 = *((_DWORD *)v2 + 2);
  v19 = *((_BYTE *)v2 + 12);
  v20 = v2[4];
  v21 = v2[2];
  v22 = *((_BYTE *)v2 + 24);
  v23 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v12 + 32), v11, v14, v15, v16, v17);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a1 = v23;
  *(_DWORD *)(a1 + 8) = v18;
  *(_BYTE *)(a1 + 12) = v19;
  *(_WORD *)(a1 + 13) = v26;
  *(_BYTE *)(a1 + 15) = v27;
  *(_QWORD *)(a1 + 16) = v21;
  *(_BYTE *)(a1 + 24) = v22;
  *(_DWORD *)(a1 + 25) = v25;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)((char *)&v25 + 3);
  *(_QWORD *)(a1 + 32) = v20;
  return result;
}

uint64_t sub_1B19F1DDC@<X0>(uint64_t a1@<X8>)
{
  unsigned __int16 **v1;
  unsigned __int16 **v2;
  unsigned __int16 *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t inited;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  int v18;
  char v19;
  unsigned __int16 *v20;
  unsigned __int16 *v21;
  char v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  __int16 v26;
  char v27;

  v2 = v1;
  v4 = *v1;
  v5 = (uint64_t)*v1 + 41;
  v6 = (*v1)[8];
  v7 = v4[9];
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAE50, (uint64_t (*)(uint64_t))sub_1B19F66EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226CD10;
  *(_QWORD *)(inited + 32) = &type metadata for Color;
  *(_QWORD *)(inited + 40) = &off_1E63BA208;
  *(_QWORD *)(inited + 48) = &type metadata for Position;
  *(_QWORD *)(inited + 56) = &off_1E63C2410;
  if (v7 > 0xF)
  {
    v25 = sub_1B1DC8944((char *)(v5 + v6), v7 >> 4);
    sub_1B19F4A48(inited);
    inited = v25;
  }
  v9 = v4[10];
  v10 = v4[11];
  v11 = 2;
  v12 = sub_1B2228B0C();
  *(_QWORD *)(v12 + 16) = 2;
  *(_WORD *)(v12 + 32) = 771;
  if (v10)
  {
    v25 = sub_1B1DC8810((char *)(v5 + v9), v10);
    sub_1B19F499C(v12);
    v12 = v25;
    v11 = *(_QWORD *)(v25 + 16);
  }
  v13 = (uint64_t)*v2 + 41;
  v14 = (char *)(v13 + (*v2)[12]);
  v15 = (unint64_t)(*v2)[13] >> 4;
  v16 = (char *)(v13 + (*v2)[14]);
  v17 = (*v2)[15] / 0x18u;
  v18 = *((_DWORD *)v2 + 2);
  v19 = *((_BYTE *)v2 + 12);
  v20 = v2[4];
  v21 = v2[2];
  v22 = *((_BYTE *)v2 + 24);
  v23 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v12 + 32), v11, v14, v15, v16, v17);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a1 = v23;
  *(_DWORD *)(a1 + 8) = v18;
  *(_BYTE *)(a1 + 12) = v19;
  *(_WORD *)(a1 + 13) = v26;
  *(_BYTE *)(a1 + 15) = v27;
  *(_QWORD *)(a1 + 16) = v21;
  *(_BYTE *)(a1 + 24) = v22;
  *(_DWORD *)(a1 + 25) = v25;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)((char *)&v25 + 3);
  *(_QWORD *)(a1 + 32) = v20;
  return result;
}

uint64_t sub_1B19F1FE0@<X0>(uint64_t a1@<X8>)
{
  unsigned __int16 **v1;
  unsigned __int16 **v2;
  unsigned __int16 *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t inited;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  int v18;
  char v19;
  unsigned __int16 *v20;
  unsigned __int16 *v21;
  char v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  __int16 v26;
  char v27;

  v2 = v1;
  v4 = *v1;
  v5 = (uint64_t)*v1 + 41;
  v6 = (*v1)[8];
  v7 = v4[9];
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAE50, (uint64_t (*)(uint64_t))sub_1B19F66EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226CD10;
  *(_QWORD *)(inited + 32) = &type metadata for Scale;
  *(_QWORD *)(inited + 40) = &off_1E63BAA30;
  *(_QWORD *)(inited + 48) = &type metadata for Velocity;
  *(_QWORD *)(inited + 56) = &off_1E63C3148;
  if (v7 > 0xF)
  {
    v25 = sub_1B1DC8944((char *)(v5 + v6), v7 >> 4);
    sub_1B19F4A48(inited);
    inited = v25;
  }
  v9 = v4[10];
  v10 = v4[11];
  v11 = 2;
  v12 = sub_1B2228B0C();
  *(_QWORD *)(v12 + 16) = 2;
  *(_WORD *)(v12 + 32) = 771;
  if (v10)
  {
    v25 = sub_1B1DC8810((char *)(v5 + v9), v10);
    sub_1B19F499C(v12);
    v12 = v25;
    v11 = *(_QWORD *)(v25 + 16);
  }
  v13 = (uint64_t)*v2 + 41;
  v14 = (char *)(v13 + (*v2)[12]);
  v15 = (unint64_t)(*v2)[13] >> 4;
  v16 = (char *)(v13 + (*v2)[14]);
  v17 = (*v2)[15] / 0x18u;
  v18 = *((_DWORD *)v2 + 2);
  v19 = *((_BYTE *)v2 + 12);
  v20 = v2[4];
  v21 = v2[2];
  v22 = *((_BYTE *)v2 + 24);
  v23 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v12 + 32), v11, v14, v15, v16, v17);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a1 = v23;
  *(_DWORD *)(a1 + 8) = v18;
  *(_BYTE *)(a1 + 12) = v19;
  *(_WORD *)(a1 + 13) = v26;
  *(_BYTE *)(a1 + 15) = v27;
  *(_QWORD *)(a1 + 16) = v21;
  *(_BYTE *)(a1 + 24) = v22;
  *(_DWORD *)(a1 + 25) = v25;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)((char *)&v25 + 3);
  *(_QWORD *)(a1 + 32) = v20;
  return result;
}

uint64_t sub_1B19F21E4@<X0>(uint64_t a1@<X8>)
{
  unsigned __int16 **v1;
  unsigned __int16 **v2;
  unsigned __int16 *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t inited;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  int v18;
  char v19;
  unsigned __int16 *v20;
  unsigned __int16 *v21;
  char v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  __int16 v26;
  char v27;

  v2 = v1;
  v4 = *v1;
  v5 = (uint64_t)*v1 + 41;
  v6 = (*v1)[8];
  v7 = v4[9];
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAE50, (uint64_t (*)(uint64_t))sub_1B19F66EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226CD10;
  *(_QWORD *)(inited + 32) = &type metadata for Scale1;
  *(_QWORD *)(inited + 40) = &off_1E63BC300;
  *(_QWORD *)(inited + 48) = &type metadata for Velocity;
  *(_QWORD *)(inited + 56) = &off_1E63C3148;
  if (v7 > 0xF)
  {
    v25 = sub_1B1DC8944((char *)(v5 + v6), v7 >> 4);
    sub_1B19F4A48(inited);
    inited = v25;
  }
  v9 = v4[10];
  v10 = v4[11];
  v11 = 2;
  v12 = sub_1B2228B0C();
  *(_QWORD *)(v12 + 16) = 2;
  *(_WORD *)(v12 + 32) = 771;
  if (v10)
  {
    v25 = sub_1B1DC8810((char *)(v5 + v9), v10);
    sub_1B19F499C(v12);
    v12 = v25;
    v11 = *(_QWORD *)(v25 + 16);
  }
  v13 = (uint64_t)*v2 + 41;
  v14 = (char *)(v13 + (*v2)[12]);
  v15 = (unint64_t)(*v2)[13] >> 4;
  v16 = (char *)(v13 + (*v2)[14]);
  v17 = (*v2)[15] / 0x18u;
  v18 = *((_DWORD *)v2 + 2);
  v19 = *((_BYTE *)v2 + 12);
  v20 = v2[4];
  v21 = v2[2];
  v22 = *((_BYTE *)v2 + 24);
  v23 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v12 + 32), v11, v14, v15, v16, v17);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a1 = v23;
  *(_DWORD *)(a1 + 8) = v18;
  *(_BYTE *)(a1 + 12) = v19;
  *(_WORD *)(a1 + 13) = v26;
  *(_BYTE *)(a1 + 15) = v27;
  *(_QWORD *)(a1 + 16) = v21;
  *(_BYTE *)(a1 + 24) = v22;
  *(_DWORD *)(a1 + 25) = v25;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)((char *)&v25 + 3);
  *(_QWORD *)(a1 + 32) = v20;
  return result;
}

uint64_t sub_1B19F23E8@<X0>(uint64_t a1@<X8>)
{
  unsigned __int16 **v1;
  unsigned __int16 **v2;
  unsigned __int16 *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t inited;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  int v18;
  char v19;
  unsigned __int16 *v20;
  unsigned __int16 *v21;
  char v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  __int16 v26;
  char v27;

  v2 = v1;
  v4 = *v1;
  v5 = (uint64_t)*v1 + 41;
  v6 = (*v1)[8];
  v7 = v4[9];
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAE50, (uint64_t (*)(uint64_t))sub_1B19F66EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226CD10;
  *(_QWORD *)(inited + 32) = &type metadata for Color;
  *(_QWORD *)(inited + 40) = &off_1E63BA208;
  *(_QWORD *)(inited + 48) = &type metadata for Velocity;
  *(_QWORD *)(inited + 56) = &off_1E63C3148;
  if (v7 > 0xF)
  {
    v25 = sub_1B1DC8944((char *)(v5 + v6), v7 >> 4);
    sub_1B19F4A48(inited);
    inited = v25;
  }
  v9 = v4[10];
  v10 = v4[11];
  v11 = 2;
  v12 = sub_1B2228B0C();
  *(_QWORD *)(v12 + 16) = 2;
  *(_WORD *)(v12 + 32) = 771;
  if (v10)
  {
    v25 = sub_1B1DC8810((char *)(v5 + v9), v10);
    sub_1B19F499C(v12);
    v12 = v25;
    v11 = *(_QWORD *)(v25 + 16);
  }
  v13 = (uint64_t)*v2 + 41;
  v14 = (char *)(v13 + (*v2)[12]);
  v15 = (unint64_t)(*v2)[13] >> 4;
  v16 = (char *)(v13 + (*v2)[14]);
  v17 = (*v2)[15] / 0x18u;
  v18 = *((_DWORD *)v2 + 2);
  v19 = *((_BYTE *)v2 + 12);
  v20 = v2[4];
  v21 = v2[2];
  v22 = *((_BYTE *)v2 + 24);
  v23 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v12 + 32), v11, v14, v15, v16, v17);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a1 = v23;
  *(_DWORD *)(a1 + 8) = v18;
  *(_BYTE *)(a1 + 12) = v19;
  *(_WORD *)(a1 + 13) = v26;
  *(_BYTE *)(a1 + 15) = v27;
  *(_QWORD *)(a1 + 16) = v21;
  *(_BYTE *)(a1 + 24) = v22;
  *(_DWORD *)(a1 + 25) = v25;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)((char *)&v25 + 3);
  *(_QWORD *)(a1 + 32) = v20;
  return result;
}

uint64_t sub_1B19F25EC@<X0>(uint64_t a1@<X8>)
{
  unsigned __int16 **v1;
  unsigned __int16 **v2;
  unsigned __int16 *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t inited;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  int v18;
  char v19;
  unsigned __int16 *v20;
  unsigned __int16 *v21;
  char v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  __int16 v26;
  char v27;

  v2 = v1;
  v4 = *v1;
  v5 = (uint64_t)*v1 + 41;
  v6 = (*v1)[8];
  v7 = v4[9];
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAE50, (uint64_t (*)(uint64_t))sub_1B19F66EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226CD10;
  *(_QWORD *)(inited + 32) = &type metadata for Position;
  *(_QWORD *)(inited + 40) = &off_1E63C2410;
  *(_QWORD *)(inited + 48) = &type metadata for ParticleTarget;
  *(_QWORD *)(inited + 56) = &off_1E6380340;
  if (v7 > 0xF)
  {
    v25 = sub_1B1DC8944((char *)(v5 + v6), v7 >> 4);
    sub_1B19F4A48(inited);
    inited = v25;
  }
  v9 = v4[10];
  v10 = v4[11];
  v11 = 2;
  v12 = sub_1B2228B0C();
  *(_QWORD *)(v12 + 16) = 2;
  *(_WORD *)(v12 + 32) = 771;
  if (v10)
  {
    v25 = sub_1B1DC8810((char *)(v5 + v9), v10);
    sub_1B19F499C(v12);
    v12 = v25;
    v11 = *(_QWORD *)(v25 + 16);
  }
  v13 = (uint64_t)*v2 + 41;
  v14 = (char *)(v13 + (*v2)[12]);
  v15 = (unint64_t)(*v2)[13] >> 4;
  v16 = (char *)(v13 + (*v2)[14]);
  v17 = (*v2)[15] / 0x18u;
  v18 = *((_DWORD *)v2 + 2);
  v19 = *((_BYTE *)v2 + 12);
  v20 = v2[4];
  v21 = v2[2];
  v22 = *((_BYTE *)v2 + 24);
  v23 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v12 + 32), v11, v14, v15, v16, v17);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a1 = v23;
  *(_DWORD *)(a1 + 8) = v18;
  *(_BYTE *)(a1 + 12) = v19;
  *(_WORD *)(a1 + 13) = v26;
  *(_BYTE *)(a1 + 15) = v27;
  *(_QWORD *)(a1 + 16) = v21;
  *(_BYTE *)(a1 + 24) = v22;
  *(_DWORD *)(a1 + 25) = v25;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)((char *)&v25 + 3);
  *(_QWORD *)(a1 + 32) = v20;
  return result;
}

uint64_t sub_1B19F27F0@<X0>(uint64_t a1@<X8>)
{
  unsigned __int16 **v1;
  unsigned __int16 **v2;
  unsigned __int16 *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t inited;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  int v18;
  char v19;
  unsigned __int16 *v20;
  unsigned __int16 *v21;
  char v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  __int16 v26;
  char v27;

  v2 = v1;
  v4 = *v1;
  v5 = (uint64_t)*v1 + 41;
  v6 = (*v1)[8];
  v7 = v4[9];
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAE50, (uint64_t (*)(uint64_t))sub_1B19F66EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226CD10;
  *(_QWORD *)(inited + 32) = &type metadata for ParticleAngle;
  *(_QWORD *)(inited + 40) = &off_1E637BE00;
  *(_QWORD *)(inited + 48) = &type metadata for ParticleAge;
  *(_QWORD *)(inited + 56) = &off_1E6371840;
  if (v7 > 0xF)
  {
    v25 = sub_1B1DC8944((char *)(v5 + v6), v7 >> 4);
    sub_1B19F4A48(inited);
    inited = v25;
  }
  v9 = v4[10];
  v10 = v4[11];
  v11 = 2;
  v12 = sub_1B2228B0C();
  *(_QWORD *)(v12 + 16) = 2;
  *(_WORD *)(v12 + 32) = 771;
  if (v10)
  {
    v25 = sub_1B1DC8810((char *)(v5 + v9), v10);
    sub_1B19F499C(v12);
    v12 = v25;
    v11 = *(_QWORD *)(v25 + 16);
  }
  v13 = (uint64_t)*v2 + 41;
  v14 = (char *)(v13 + (*v2)[12]);
  v15 = (unint64_t)(*v2)[13] >> 4;
  v16 = (char *)(v13 + (*v2)[14]);
  v17 = (*v2)[15] / 0x18u;
  v18 = *((_DWORD *)v2 + 2);
  v19 = *((_BYTE *)v2 + 12);
  v20 = v2[4];
  v21 = v2[2];
  v22 = *((_BYTE *)v2 + 24);
  v23 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v12 + 32), v11, v14, v15, v16, v17);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a1 = v23;
  *(_DWORD *)(a1 + 8) = v18;
  *(_BYTE *)(a1 + 12) = v19;
  *(_WORD *)(a1 + 13) = v26;
  *(_BYTE *)(a1 + 15) = v27;
  *(_QWORD *)(a1 + 16) = v21;
  *(_BYTE *)(a1 + 24) = v22;
  *(_DWORD *)(a1 + 25) = v25;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)((char *)&v25 + 3);
  *(_QWORD *)(a1 + 32) = v20;
  return result;
}

uint64_t sub_1B19F29F4@<X0>(uint64_t a1@<X8>)
{
  unsigned __int16 **v1;
  unsigned __int16 **v2;
  unsigned __int16 *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t inited;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  int v18;
  char v19;
  unsigned __int16 *v20;
  unsigned __int16 *v21;
  char v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  __int16 v26;
  char v27;

  v2 = v1;
  v4 = *v1;
  v5 = (uint64_t)*v1 + 41;
  v6 = (*v1)[8];
  v7 = v4[9];
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAE50, (uint64_t (*)(uint64_t))sub_1B19F66EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226CD10;
  *(_QWORD *)(inited + 32) = &type metadata for Position;
  *(_QWORD *)(inited + 40) = &off_1E63C2410;
  *(_QWORD *)(inited + 48) = &type metadata for Particle;
  *(_QWORD *)(inited + 56) = &off_1E63C21B0;
  if (v7 > 0xF)
  {
    v25 = sub_1B1DC8944((char *)(v5 + v6), v7 >> 4);
    sub_1B19F4A48(inited);
    inited = v25;
  }
  v9 = v4[10];
  v10 = v4[11];
  v11 = 2;
  v12 = sub_1B2228B0C();
  *(_QWORD *)(v12 + 16) = 2;
  *(_WORD *)(v12 + 32) = 771;
  if (v10)
  {
    v25 = sub_1B1DC8810((char *)(v5 + v9), v10);
    sub_1B19F499C(v12);
    v12 = v25;
    v11 = *(_QWORD *)(v25 + 16);
  }
  v13 = (uint64_t)*v2 + 41;
  v14 = (char *)(v13 + (*v2)[12]);
  v15 = (unint64_t)(*v2)[13] >> 4;
  v16 = (char *)(v13 + (*v2)[14]);
  v17 = (*v2)[15] / 0x18u;
  v18 = *((_DWORD *)v2 + 2);
  v19 = *((_BYTE *)v2 + 12);
  v20 = v2[4];
  v21 = v2[2];
  v22 = *((_BYTE *)v2 + 24);
  v23 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v12 + 32), v11, v14, v15, v16, v17);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a1 = v23;
  *(_DWORD *)(a1 + 8) = v18;
  *(_BYTE *)(a1 + 12) = v19;
  *(_WORD *)(a1 + 13) = v26;
  *(_BYTE *)(a1 + 15) = v27;
  *(_QWORD *)(a1 + 16) = v21;
  *(_BYTE *)(a1 + 24) = v22;
  *(_DWORD *)(a1 + 25) = v25;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)((char *)&v25 + 3);
  *(_QWORD *)(a1 + 32) = v20;
  return result;
}

uint64_t sub_1B19F2BF8@<X0>(uint64_t a1@<X8>)
{
  unsigned __int16 **v1;
  unsigned __int16 **v2;
  unsigned __int16 *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t inited;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  int v18;
  char v19;
  unsigned __int16 *v20;
  unsigned __int16 *v21;
  char v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  __int16 v26;
  char v27;

  v2 = v1;
  v4 = *v1;
  v5 = (uint64_t)*v1 + 41;
  v6 = (*v1)[8];
  v7 = v4[9];
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAE50, (uint64_t (*)(uint64_t))sub_1B19F66EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226CD10;
  *(_QWORD *)(inited + 32) = &type metadata for Position;
  *(_QWORD *)(inited + 40) = &off_1E63C2410;
  *(_QWORD *)(inited + 48) = &type metadata for Orientation;
  *(_QWORD *)(inited + 56) = &off_1E63715B8;
  if (v7 > 0xF)
  {
    v25 = sub_1B1DC8944((char *)(v5 + v6), v7 >> 4);
    sub_1B19F4A48(inited);
    inited = v25;
  }
  v9 = v4[10];
  v10 = v4[11];
  v11 = 2;
  v12 = sub_1B2228B0C();
  *(_QWORD *)(v12 + 16) = 2;
  *(_WORD *)(v12 + 32) = 771;
  if (v10)
  {
    v25 = sub_1B1DC8810((char *)(v5 + v9), v10);
    sub_1B19F499C(v12);
    v12 = v25;
    v11 = *(_QWORD *)(v25 + 16);
  }
  v13 = (uint64_t)*v2 + 41;
  v14 = (char *)(v13 + (*v2)[12]);
  v15 = (unint64_t)(*v2)[13] >> 4;
  v16 = (char *)(v13 + (*v2)[14]);
  v17 = (*v2)[15] / 0x18u;
  v18 = *((_DWORD *)v2 + 2);
  v19 = *((_BYTE *)v2 + 12);
  v20 = v2[4];
  v21 = v2[2];
  v22 = *((_BYTE *)v2 + 24);
  v23 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v12 + 32), v11, v14, v15, v16, v17);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a1 = v23;
  *(_DWORD *)(a1 + 8) = v18;
  *(_BYTE *)(a1 + 12) = v19;
  *(_WORD *)(a1 + 13) = v26;
  *(_BYTE *)(a1 + 15) = v27;
  *(_QWORD *)(a1 + 16) = v21;
  *(_BYTE *)(a1 + 24) = v22;
  *(_DWORD *)(a1 + 25) = v25;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)((char *)&v25 + 3);
  *(_QWORD *)(a1 + 32) = v20;
  return result;
}

uint64_t sub_1B19F2DFC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  os_unfair_lock_s *v6;

  v3 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_queryManager);
  swift_getObjectType();
  v5 = sub_1B204D6E4();
  v6 = *(os_unfair_lock_s **)(v4 + 40);
  swift_retain_n();
  os_unfair_lock_lock(v6);
  sub_1B1E8F784(a1, v3);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B1E8FAC0(a1, v5, v3);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v4 + 40));
  return swift_release_n();
}

uint64_t *sub_1B19F2EC4(uint64_t a1)
{
  uint64_t v1;
  float v2;
  __int128 v3;
  uint64_t *result;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  os_unfair_lock_s *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  float32x4_t *v19;
  uint64_t v20;
  float32x2_t *v21;
  float v22;
  float32x4_t v23;
  __float2 v24;
  float32x4_t v25;
  int32x4_t v26;
  int8x16_t v27;
  float32x4_t v28;
  float32x4_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38[8];
  _OWORD v39[2];
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  _OWORD v46[2];
  uint64_t v47;
  _BYTE v48[40];
  _OWORD v49[2];
  uint64_t v50;

  v2 = *(float *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_clock + 64);
  v3 = *(_OWORD *)(v1 + 32);
  v49[0] = *(_OWORD *)(v1 + 16);
  v49[1] = v3;
  v50 = *(_QWORD *)(v1 + 48);
  sub_1B1E8FCE4(a1, (uint64_t)v49, 0x200000000, v38);
  result = (uint64_t *)sub_1B19F66A0((uint64_t)v38, (uint64_t)v39, (unint64_t *)&qword_1ED4B7DE0);
  if (*(_QWORD *)&v39[0])
  {
    if (v45 >= 1)
    {
      v33 = v42;
      if (v42)
      {
        v5 = v44;
        v36 = v44[4];
        v35 = *(unsigned __int8 *)(v43 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
        v46[0] = v39[0];
        v46[1] = v39[1];
        v47 = v40;
        v31 = (uint64_t)(v44 + 6);
        v32 = v41;
        v30 = v44 + 8;
        swift_retain();
        swift_retain();
        swift_retain();
        v6 = 0;
        v7 = 0;
        do
        {
          v8 = (unsigned int *)(v32 + 48 * v6);
          v9 = *v8;
          v10 = (uint64_t *)*((_QWORD *)v8 + 2);
          v11 = *((_QWORD *)v8 + 3);
          v13 = *((_QWORD *)v8 + 4);
          v12 = *((_QWORD *)v8 + 5);
          v34 = v7;
          v37 = v8[1];
          if (v35)
          {
            v14 = *(os_unfair_lock_s **)(v12 + 376);
            swift_retain_n();
            os_unfair_lock_lock(v14);
            os_unfair_lock_lock(*(os_unfair_lock_t *)(v12 + 344));
            swift_release();
          }
          else
          {
            swift_retain();
          }
          ecs_stack_allocator_push_snapshot(v36);
          sub_1B19F66A0(v31, (uint64_t)v48, &qword_1ED4B7FB0);
          v15 = v5[4];
          v16 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v12 + 40) + 16) + 32) + 16) + 1;
          swift_retain();
          v5[6] = ecs_stack_allocator_allocate(v15, 48 * v16, 8);
          v5[7] = v16;
          v30[1] = 0;
          v30[2] = 0;
          *v30 = 0;
          swift_release();
          v17 = sub_1B1A12038((uint64_t)&type metadata for RotateAction, (uint64_t)&off_1E63766E8, v10, v11, v13, (uint64_t)v5);
          v18 = sub_1B1A12038((uint64_t)&type metadata for Orientation, (uint64_t)&off_1E6371540, v10, v11, v13, (uint64_t)v5);
          if ((_DWORD)v9 == (_DWORD)v37)
          {
            v7 = v34;
          }
          else
          {
            v19 = (float32x4_t *)(v17 + 32 * v9 + 16);
            v20 = v37 - v9;
            v21 = (float32x2_t *)(v18 + 16 * v9);
            v7 = v34;
            do
            {
              v22 = v2 * v19[-1].f32[0];
              v23 = *v19;
              v19 += 2;
              v24 = __sincosf_stret(v22 * 0.5);
              v25 = vmulq_n_f32(v23, v24.__sinval);
              v25.i32[3] = LODWORD(v24.__cosval);
              v26 = (int32x4_t)vnegq_f32(v25);
              v27 = (int8x16_t)vtrn2q_s32((int32x4_t)v25, vtrn1q_s32((int32x4_t)v25, v26));
              v28 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v25, (int8x16_t)v26, 8uLL), *v21, 1), (float32x4_t)vextq_s8(v27, v27, 8uLL), COERCE_FLOAT(*(_OWORD *)v21->f32));
              v29 = (float32x4_t)vrev64q_s32((int32x4_t)v25);
              v29.i32[0] = v26.i32[1];
              v29.i32[3] = v26.i32[2];
              *(float32x4_t *)v21->f32 = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v25, *(float32x4_t *)v21->f32, 3), v29, *(float32x4_t *)v21->f32, 2), v28);
              v21 += 2;
              --v20;
            }
            while (v20);
          }
          sub_1B1F05D48(v5, (unsigned __int16 **)v46, (uint64_t)v48);
          sub_1B1F03804((char *)v12);
          ecs_stack_allocator_pop_snapshot(v36);
          if ((v35 & 1) != 0)
          {
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v12 + 344));
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v12 + 376));
          }
          swift_release();
          ++v6;
        }
        while (v6 != v33);
        sub_1B19ED748(v38);
      }
    }
    return sub_1B19ED748(v38);
  }
  return result;
}

uint64_t type metadata accessor for RotateActionSystem()
{
  return objc_opt_self();
}

uint64_t sub_1B19F3248(uint64_t a1, uint64_t a2)
{
  return sub_1B19F3B70(a1, a2, (void (*)(_OWORD *__return_ptr, uint64_t))sub_1B19ED950);
}

const char *sub_1B19F3254()
{
  return "RotateActionSystem";
}

uint64_t sub_1B19F326C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  os_unfair_lock_s *v6;

  v3 = *(_QWORD *)(v1 + 24);
  v4 = *(_QWORD *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_queryManager);
  swift_getObjectType();
  v5 = sub_1B204D6E4();
  v6 = *(os_unfair_lock_s **)(v4 + 40);
  swift_retain_n();
  os_unfair_lock_lock(v6);
  sub_1B1E8F784(a1, v3);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B1E8FAC0(a1, v5, v3);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v4 + 40));
  return swift_release_n();
}

uint64_t *sub_1B19F3334(uint64_t a1)
{
  uint64_t v1;
  float v2;
  __int128 v3;
  uint64_t *result;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  os_unfair_lock_s *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  float v20;
  float32x4_t v21;
  uint64_t v22;
  float32x4_t *v23;
  uint64_t v24;
  __int32 v25;
  float32x4_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  float32x4_t v35;
  uint64_t v36;
  __int32 v37;
  uint64_t v38[8];
  _OWORD v39[2];
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  _OWORD v46[2];
  uint64_t v47;
  _BYTE v48[40];
  _OWORD v49[2];
  uint64_t v50;

  v2 = *(float *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_clock + 64);
  v3 = *(_OWORD *)(v1 + 40);
  v49[0] = *(_OWORD *)(v1 + 24);
  v49[1] = v3;
  v50 = *(_QWORD *)(v1 + 56);
  sub_1B1E8FCE4(a1, (uint64_t)v49, 0x200000000, v38);
  result = (uint64_t *)sub_1B19F66A0((uint64_t)v38, (uint64_t)v39, (unint64_t *)&qword_1ED4B7DE0);
  if (*(_QWORD *)&v39[0])
  {
    if (v45 >= 1)
    {
      v31 = v42;
      if (v42)
      {
        v5 = v44;
        v6 = v44[4];
        v34 = *(unsigned __int8 *)(v43 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
        v46[0] = v39[0];
        v46[1] = v39[1];
        v47 = v40;
        v28 = (uint64_t)(v44 + 6);
        v29 = v41;
        v27 = v44 + 8;
        swift_retain();
        swift_retain();
        swift_retain();
        v7 = 0;
        v8 = 0;
        v30 = v6;
        do
        {
          v9 = (unsigned int *)(v29 + 48 * v7);
          v10 = *v9;
          v12 = (uint64_t *)*((_QWORD *)v9 + 2);
          v11 = *((_QWORD *)v9 + 3);
          v13 = *((_QWORD *)v9 + 4);
          v14 = *((_QWORD *)v9 + 5);
          v33 = v8;
          v36 = v9[1];
          if (v34)
          {
            v15 = *(os_unfair_lock_s **)(v14 + 376);
            swift_retain_n();
            os_unfair_lock_lock(v15);
            os_unfair_lock_lock(*(os_unfair_lock_t *)(v14 + 344));
            swift_release();
          }
          else
          {
            swift_retain();
          }
          ecs_stack_allocator_push_snapshot(v6);
          sub_1B19F66A0(v28, (uint64_t)v48, &qword_1ED4B7FB0);
          v16 = v5[4];
          v17 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v14 + 40) + 16) + 32) + 16) + 1;
          swift_retain();
          v5[6] = ecs_stack_allocator_allocate(v16, 48 * v17, 8);
          v5[7] = v17;
          v27[1] = 0;
          v27[2] = 0;
          *v27 = 0;
          swift_release();
          v18 = sub_1B1A12038((uint64_t)&type metadata for Position, (uint64_t)&off_1E63C2398, v12, v11, v13, (uint64_t)v5);
          v19 = sub_1B1A12038((uint64_t)&type metadata for SineMoveAction, (uint64_t)&off_1E6381AB0, v12, v11, v13, (uint64_t)v5);
          v20 = v2 + *(float *)(v32 + 16);
          *(float *)(v32 + 16) = v20;
          if ((_DWORD)v10 == (_DWORD)v36)
          {
            v21 = v35;
          }
          else
          {
            v22 = v19 + 32 * v10 + 8;
            v23 = (float32x4_t *)(v18 + 16 * v10);
            v24 = v36 - v10;
            v25 = v35.i32[3];
            do
            {
              v37 = v25;
              v21 = vmulq_n_f32(*(float32x4_t *)(v22 + 8), *(float *)(v22 - 8) * sinf((float)(v20 * *(float *)(v22 - 4)) + *(float *)v22));
              v21.i32[3] = v37;
              v26 = v21;
              v26.i32[3] = 1.0;
              *v23++ = v26;
              v22 += 32;
              v25 = v37;
              --v24;
            }
            while (v24);
          }
          v35 = v21;
          v8 = v33;
          sub_1B1F05D48(v5, (unsigned __int16 **)v46, (uint64_t)v48);
          sub_1B1F03804((char *)v14);
          v6 = v30;
          ecs_stack_allocator_pop_snapshot(v30);
          if ((v34 & 1) != 0)
          {
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v14 + 344));
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v14 + 376));
          }
          swift_release();
          ++v7;
        }
        while (v7 != v31);
        sub_1B19ED748(v38);
      }
    }
    return sub_1B19ED748(v38);
  }
  return result;
}

uint64_t sub_1B19F36A4()
{
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for SineMoveSystem()
{
  return objc_opt_self();
}

uint64_t sub_1B19F36EC()
{
  uint64_t v0;
  __int128 v1;
  _OWORD v3[2];
  uint64_t v4;
  uint64_t v5;
  int v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;

  v0 = swift_allocObject();
  *(_DWORD *)(v0 + 16) = 0;
  if (qword_1ED4B7DB8 != -1)
    swift_once();
  v5 = qword_1ED4D09F8;
  v6 = 0;
  v7 = 2;
  v8 = 0;
  v9 = 2;
  v10 = 0;
  swift_retain();
  sub_1B19EDB54((uint64_t)v3);
  swift_release();
  v1 = v3[1];
  *(_OWORD *)(v0 + 24) = v3[0];
  *(_OWORD *)(v0 + 40) = v1;
  *(_QWORD *)(v0 + 56) = v4;
  return v0;
}

const char *sub_1B19F37AC()
{
  return "SineMove";
}

uint64_t sub_1B19F37C0()
{
  return qword_1EEF5DE08;
}

uint64_t *sub_1B19F37D0(uint64_t a1)
{
  uint64_t v1;
  double v2;
  __int128 v3;
  uint64_t *result;
  _QWORD *v5;
  float v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  os_unfair_lock_s *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  float *v21;
  uint64_t v22;
  __int128 *v23;
  int v24;
  float v25;
  float v26;
  float v27;
  float v28;
  __int128 v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40[8];
  _OWORD v41[2];
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  _OWORD v48[2];
  uint64_t v49;
  _BYTE v50[40];
  _OWORD v51[2];
  uint64_t v52;

  v2 = *(double *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_clock + 48);
  v3 = *(_OWORD *)(v1 + 32);
  v51[0] = *(_OWORD *)(v1 + 16);
  v51[1] = v3;
  v52 = *(_QWORD *)(v1 + 48);
  sub_1B1E8FCE4(a1, (uint64_t)v51, 0x200000000, v40);
  result = (uint64_t *)sub_1B19F66A0((uint64_t)v40, (uint64_t)v41, (unint64_t *)&qword_1ED4B7DE0);
  if (*(_QWORD *)&v41[0])
  {
    if (v47 >= 1)
    {
      v33 = v44;
      if (v44)
      {
        v5 = v46;
        v37 = v46[4];
        v36 = *(unsigned __int8 *)(v45 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
        v6 = v2;
        v48[0] = v41[0];
        v48[1] = v41[1];
        v49 = v42;
        v31 = (uint64_t)(v46 + 6);
        v32 = v43;
        v30 = v46 + 8;
        swift_retain();
        swift_retain();
        swift_retain();
        v7 = 0;
        v8 = 0;
        do
        {
          v9 = (unsigned int *)(v32 + 48 * v7);
          v10 = *v9;
          v11 = (uint64_t *)*((_QWORD *)v9 + 2);
          v12 = *((_QWORD *)v9 + 3);
          v14 = *((_QWORD *)v9 + 4);
          v13 = *((_QWORD *)v9 + 5);
          v35 = v8;
          v38 = v9[1];
          if (v36)
          {
            v15 = *(os_unfair_lock_s **)(v13 + 376);
            swift_retain_n();
            os_unfair_lock_lock(v15);
            os_unfair_lock_lock(*(os_unfair_lock_t *)(v13 + 344));
            swift_release();
          }
          else
          {
            swift_retain();
          }
          ecs_stack_allocator_push_snapshot(v37);
          sub_1B19F66A0(v31, (uint64_t)v50, &qword_1ED4B7FB0);
          v16 = v5[4];
          v17 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v13 + 40) + 16) + 32) + 16) + 1;
          swift_retain();
          v5[6] = ecs_stack_allocator_allocate(v16, 48 * v17, 8);
          v5[7] = v17;
          v30[1] = 0;
          v30[2] = 0;
          *v30 = 0;
          swift_release();
          v18 = sub_1B1A12038((uint64_t)&type metadata for Position, (uint64_t)&off_1E63C2398, v11, v12, v14, (uint64_t)v5);
          v19 = sub_1B1A12038((uint64_t)&type metadata for SineYAction, (uint64_t)&off_1E6373A68, v11, v12, v14, (uint64_t)v5);
          if ((_DWORD)v10 == (_DWORD)v38)
          {
            v8 = v35;
            v20 = v34;
          }
          else
          {
            v21 = (float *)(v19 + 12 * v10 + 8);
            v22 = v38 - v10;
            v23 = (__int128 *)(v18 + 16 * v10);
            v24 = HIDWORD(v34);
            v8 = v35;
            do
            {
              v39 = v24;
              v25 = *(v21 - 2);
              v26 = *(v21 - 1) * v6;
              v27 = *v21;
              v21 += 3;
              v28 = sinf(v26 + v27);
              v20 = *v23;
              HIDWORD(v20) = v39;
              v29 = v20;
              *((float *)&v29 + 1) = v25 * v28;
              HIDWORD(v29) = 1.0;
              *v23++ = v29;
              v24 = v39;
              --v22;
            }
            while (v22);
          }
          v34 = v20;
          sub_1B1F05D48(v5, (unsigned __int16 **)v48, (uint64_t)v50);
          sub_1B1F03804((char *)v13);
          ecs_stack_allocator_pop_snapshot(v37);
          if ((v36 & 1) != 0)
          {
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v13 + 344));
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v13 + 376));
          }
          swift_release();
          ++v7;
        }
        while (v7 != v33);
        sub_1B19ED748(v40);
      }
    }
    return sub_1B19ED748(v40);
  }
  return result;
}

uint64_t sub_1B19F3B1C()
{
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for SineYWaveSystem()
{
  return objc_opt_self();
}

uint64_t sub_1B19F3B64(uint64_t a1, uint64_t a2)
{
  return sub_1B19F3B70(a1, a2, (void (*)(_OWORD *__return_ptr, uint64_t))sub_1B19EDB54);
}

uint64_t sub_1B19F3B70(uint64_t a1, uint64_t a2, void (*a3)(_OWORD *__return_ptr, uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  _OWORD v8[2];
  uint64_t v9;
  uint64_t v10;
  int v11;
  char v12;
  uint64_t v13;
  char v14;
  uint64_t v15;

  v4 = swift_allocObject();
  if (qword_1ED4B7DB8 != -1)
    swift_once();
  v10 = qword_1ED4D09F8;
  v11 = 0;
  v12 = 2;
  v13 = 0;
  v14 = 2;
  v15 = 0;
  v5 = swift_retain();
  a3(v8, v5);
  swift_release();
  v6 = v8[1];
  *(_OWORD *)(v4 + 16) = v8[0];
  *(_OWORD *)(v4 + 32) = v6;
  *(_QWORD *)(v4 + 48) = v9;
  return v4;
}

const char *sub_1B19F3C2C()
{
  return "SineY.Regular";
}

uint64_t sub_1B19F3C40(int a1, size_t a2)
{
  return sub_1B19F45D4(a1, a2);
}

uint64_t sub_1B19F3C4C(unint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t *v7;
  uint64_t result;

  if (a2 < 0)
  {
    result = sub_1B222967C();
    __break(1u);
  }
  else
  {
    if (a2)
    {
      v4 = (_QWORD *)sub_1B2228B0C();
      v5 = v4;
      v4[2] = a2;
      v4[4] = a1;
      if (a2 != 1)
      {
        v4[5] = a1;
        v6 = a2 - 2;
        if (v6)
        {
          v7 = v4 + 6;
          do
          {
            sub_1B19F8CD0(a1);
            *v7++ = a1;
            --v6;
          }
          while (v6);
        }
        sub_1B19F8CD0(a1);
      }
    }
    else
    {
      sub_1B19F8D00(a1);
      return MEMORY[0x1E0DEE9D8];
    }
    return (uint64_t)v5;
  }
  return result;
}

uint64_t sub_1B19F3D34(unint64_t a1, unint64_t a2)
{
  uint64_t result;
  unint64_t *v5;
  unint64_t v6;
  int64x2_t v7;
  int64x2_t *v8;
  unint64_t v9;
  unint64_t v10;

  if ((a2 & 0x8000000000000000) != 0)
  {
    result = sub_1B222967C();
    __break(1u);
    return result;
  }
  if (!a2)
    return MEMORY[0x1E0DEE9D8];
  result = sub_1B2228B0C();
  *(_QWORD *)(result + 16) = a2;
  v5 = (unint64_t *)(result + 32);
  if (a2 < 4)
  {
    v6 = 0;
LABEL_9:
    v10 = a2 - v6;
    do
    {
      *v5++ = a1;
      --v10;
    }
    while (v10);
    return result;
  }
  v6 = a2 & 0xFFFFFFFFFFFFFFFCLL;
  v5 += a2 & 0xFFFFFFFFFFFFFFFCLL;
  v7 = vdupq_n_s64(a1);
  v8 = (int64x2_t *)(result + 48);
  v9 = a2 & 0xFFFFFFFFFFFFFFFCLL;
  do
  {
    v8[-1] = v7;
    *v8 = v7;
    v8 += 2;
    v9 -= 4;
  }
  while (v9);
  if (v6 != a2)
    goto LABEL_9;
  return result;
}

uint64_t sub_1B19F3E1C(unint64_t a1, int32x2_t a2)
{
  uint64_t result;
  __int32 *v4;
  unint64_t v5;
  __int32 v6;
  int32x4_t v7;
  int32x4_t *v8;
  unint64_t v9;
  unint64_t v10;

  if ((a1 & 0x8000000000000000) != 0)
  {
    result = sub_1B222967C();
    __break(1u);
    return result;
  }
  if (!a1)
    return MEMORY[0x1E0DEE9D8];
  result = sub_1B2228B0C();
  *(_QWORD *)(result + 16) = a1;
  v4 = (__int32 *)(result + 32);
  if (a1 < 8)
  {
    v5 = 0;
    v6 = a2.i32[0];
LABEL_9:
    v10 = a1 - v5;
    do
    {
      *v4++ = v6;
      --v10;
    }
    while (v10);
    return result;
  }
  v5 = a1 & 0xFFFFFFFFFFFFFFF8;
  v4 += a1 & 0xFFFFFFFFFFFFFFF8;
  v6 = a2.i32[0];
  v7 = vdupq_lane_s32(a2, 0);
  v8 = (int32x4_t *)(result + 48);
  v9 = a1 & 0xFFFFFFFFFFFFFFF8;
  do
  {
    v8[-1] = v7;
    *v8 = v7;
    v8 += 2;
    v9 -= 8;
  }
  while (v9);
  if (v5 != a1)
    goto LABEL_9;
  return result;
}

uint64_t sub_1B19F3F0C(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t, unsigned __int8);
  uint64_t v7;
  uint64_t result;

  if ((a2 & 0x8000000000000000) == 0)
  {
    if (a2)
    {
      sub_1B19F900C(0, &qword_1ED4B97E0);
      v4 = sub_1B2228B0C();
      *(_QWORD *)(v4 + 16) = a2;
      sub_1B19F66A0((uint64_t)a1, v4 + 32, &qword_1ED4B97E0);
      if (a2 == 1)
        return v4;
      sub_1B19F66A0((uint64_t)a1, v4 + 72, &qword_1ED4B97E0);
      v5 = a2 - 2;
      if (a2 == 2)
      {
        v6 = sub_1B19F8C04;
      }
      else
      {
        v7 = v4 + 112;
        v6 = sub_1B19F8C04;
        do
        {
          sub_1B19F8C58(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19F8C04);
          sub_1B19F66A0((uint64_t)a1, v7, &qword_1ED4B97E0);
          v7 += 40;
          --v5;
        }
        while (v5);
      }
    }
    else
    {
      v4 = MEMORY[0x1E0DEE9D8];
      v6 = sub_1B19F8C8C;
    }
    sub_1B19F8C58(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))v6);
    return v4;
  }
  result = sub_1B222967C();
  __break(1u);
  return result;
}

uint64_t sub_1B19F4080(unsigned int a1, unint64_t a2)
{
  uint64_t result;
  unsigned int *v5;
  unint64_t v6;
  int32x4_t v7;
  int32x4_t *v8;
  unint64_t v9;
  unint64_t v10;

  if ((a2 & 0x8000000000000000) != 0)
  {
    result = sub_1B222967C();
    __break(1u);
    return result;
  }
  if (!a2)
    return MEMORY[0x1E0DEE9D8];
  result = sub_1B2228B0C();
  *(_QWORD *)(result + 16) = a2;
  v5 = (unsigned int *)(result + 32);
  if (a2 < 8)
  {
    v6 = 0;
LABEL_9:
    v10 = a2 - v6;
    do
    {
      *v5++ = a1;
      --v10;
    }
    while (v10);
    return result;
  }
  v6 = a2 & 0xFFFFFFFFFFFFFFF8;
  v5 += a2 & 0xFFFFFFFFFFFFFFF8;
  v7 = vdupq_n_s32(a1);
  v8 = (int32x4_t *)(result + 48);
  v9 = a2 & 0xFFFFFFFFFFFFFFF8;
  do
  {
    v8[-1] = v7;
    *v8 = v7;
    v8 += 2;
    v9 -= 8;
  }
  while (v9);
  if (v6 != a2)
    goto LABEL_9;
  return result;
}

uint64_t sub_1B19F4168(unsigned int a1, unint64_t a2)
{
  uint64_t result;
  _WORD *v5;
  unint64_t v6;
  int16x8_t v7;
  int16x8_t *v8;
  unint64_t v9;
  unint64_t v10;

  if ((a2 & 0x8000000000000000) != 0)
  {
    result = sub_1B222967C();
    __break(1u);
    return result;
  }
  if (!a2)
    return MEMORY[0x1E0DEE9D8];
  result = sub_1B2228B0C();
  *(_QWORD *)(result + 16) = a2;
  v5 = (_WORD *)(result + 32);
  if (a2 < 0x10)
  {
    v6 = 0;
LABEL_9:
    v10 = a2 - v6;
    do
    {
      *v5++ = a1;
      --v10;
    }
    while (v10);
    return result;
  }
  v6 = a2 & 0xFFFFFFFFFFFFFFF0;
  v5 += a2 & 0xFFFFFFFFFFFFFFF0;
  v7 = vdupq_n_s16(a1);
  v8 = (int16x8_t *)(result + 48);
  v9 = a2 & 0xFFFFFFFFFFFFFFF0;
  do
  {
    v8[-1] = v7;
    *v8 = v7;
    v8 += 2;
    v9 -= 16;
  }
  while (v9);
  if (v6 != a2)
    goto LABEL_9;
  return result;
}

uint64_t sub_1B19F4250(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t result;

  if (a3 < 0)
  {
    result = sub_1B222967C();
    __break(1u);
  }
  else
  {
    if (a3)
    {
      v6 = (_QWORD *)sub_1B2228B0C();
      v7 = v6;
      v6[2] = a3;
      v6[4] = a1;
      v6[5] = a2;
      if (a3 != 1)
      {
        v6[6] = a1;
        v6[7] = a2;
        v8 = a3 - 2;
        if (v8)
        {
          v9 = v6 + 9;
          do
          {
            *(v9 - 1) = a1;
            *v9 = a2;
            swift_bridgeObjectRetain();
            v9 += 2;
            --v8;
          }
          while (v8);
        }
        swift_bridgeObjectRetain();
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      return MEMORY[0x1E0DEE9D8];
    }
    return (uint64_t)v7;
  }
  return result;
}

uint64_t sub_1B19F4348(uint64_t a1, __n128 a2)
{
  return sub_1B19F469C(a1, (unint64_t *)&qword_1ED4BB0A0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50], a2);
}

uint64_t sub_1B19F435C(uint64_t a1, __n128 a2, __n128 a3, __n128 a4, __n128 a5)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  __n128 *v8;

  if (a1 < 0)
  {
    result = sub_1B222967C();
    __break(1u);
  }
  else
  {
    v5 = a1;
    if (a1)
    {
      type metadata accessor for simd_float4x4(0);
      result = sub_1B2228B0C();
      *(_QWORD *)(result + 16) = v5;
      v7 = 32;
      do
      {
        v8 = (__n128 *)(result + v7);
        *v8 = a2;
        v8[1] = a3;
        v8[2] = a4;
        v8[3] = a5;
        v7 += 64;
        --v5;
      }
      while (v5);
    }
    else
    {
      return MEMORY[0x1E0DEE9D8];
    }
  }
  return result;
}

uint64_t sub_1B19F4420(uint64_t a1, double a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  if (a1 < 0)
  {
    result = sub_1B222967C();
    __break(1u);
  }
  else if (a1)
  {
    sub_1B19F8E54(0, &qword_1ED4BB080, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], MEMORY[0x1E0DEDD20]);
    result = sub_1B2228B0C();
    v5 = 0;
    *(_QWORD *)(result + 16) = a1;
    do
    {
      v6 = result + 8 * v5++;
      *(double *)(v6 + 32) = a2;
    }
    while (a1 != v5);
  }
  else
  {
    return MEMORY[0x1E0DEE9D8];
  }
  return result;
}

uint64_t sub_1B19F44FC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;

  if (a2 < 0)
  {
    result = sub_1B222967C();
    __break(1u);
  }
  else
  {
    v2 = a2;
    if (a2)
    {
      result = sub_1B2228B0C();
      *(_QWORD *)(result + 16) = v2;
      v5 = 32;
      do
      {
        v6 = result + v5;
        v7 = *(_OWORD *)(a1 + 80);
        *(_OWORD *)(v6 + 64) = *(_OWORD *)(a1 + 64);
        *(_OWORD *)(v6 + 80) = v7;
        *(_QWORD *)(v6 + 96) = *(_QWORD *)(a1 + 96);
        v8 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)v6 = *(_OWORD *)a1;
        *(_OWORD *)(v6 + 16) = v8;
        v9 = *(_OWORD *)(a1 + 48);
        v5 += 112;
        *(_OWORD *)(v6 + 32) = *(_OWORD *)(a1 + 32);
        *(_OWORD *)(v6 + 48) = v9;
        --v2;
      }
      while (v2);
    }
    else
    {
      return MEMORY[0x1E0DEE9D8];
    }
  }
  return result;
}

uint64_t sub_1B19F45C8(int a1, size_t a2)
{
  return sub_1B19F45D4(a1, a2);
}

uint64_t sub_1B19F45D4(int a1, size_t a2)
{
  uint64_t v4;
  uint64_t result;

  if ((a2 & 0x8000000000000000) != 0)
  {
    result = sub_1B222967C();
    __break(1u);
  }
  else
  {
    if (!a2)
      return MEMORY[0x1E0DEE9D8];
    v4 = sub_1B2228B0C();
    *(_QWORD *)(v4 + 16) = a2;
    memset((void *)(v4 + 32), a1, a2);
    return v4;
  }
  return result;
}

uint64_t sub_1B19F4688(uint64_t a1, __n128 a2)
{
  return sub_1B19F469C(a1, (unint64_t *)&qword_1ED4BB0E0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDDA8], a2);
}

uint64_t sub_1B19F469C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t), __n128 a4)
{
  uint64_t result;
  uint64_t v6;
  __n128 *v7;

  if (a1 < 0)
  {
    result = sub_1B222967C();
    __break(1u);
  }
  else if (a1)
  {
    sub_1B19F8E54(0, a2, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], a3);
    result = sub_1B2228B0C();
    v6 = 0;
    *(_QWORD *)(result + 16) = a1;
    do
    {
      v7 = (__n128 *)(result + 16 * v6++);
      v7[2] = a4;
    }
    while (a1 != v6);
  }
  else
  {
    return MEMORY[0x1E0DEE9D8];
  }
  return result;
}

uint64_t sub_1B19F4768(uint64_t a1, double a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  if (a1 < 0)
  {
    result = sub_1B222967C();
    __break(1u);
  }
  else if (a1)
  {
    sub_1B19F8E54(0, &qword_1ED4BB0F0, (uint64_t (*)(void))sub_1B19F8E10, MEMORY[0x1E0DEDB58], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDDA8]);
    result = sub_1B2228B0C();
    v5 = 0;
    *(_QWORD *)(result + 16) = a1;
    do
    {
      v6 = result + 8 * v5++;
      *(double *)(v6 + 32) = a2;
    }
    while (a1 != v5);
  }
  else
  {
    return MEMORY[0x1E0DEE9D8];
  }
  return result;
}

uint64_t sub_1B19F4844(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  v3 = *(_QWORD **)v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v5 = v4 + *(_QWORD *)(a1 + 16);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || (v7 = v3[3] >> 1, v7 < v5))
  {
    if (v4 <= v5)
      v8 = v5;
    else
      v8 = v4;
    v3 = sub_1B1C62F3C(isUniquelyReferenced_nonNull_native, v8, 1, v3);
    v7 = v3[3] >> 1;
  }
  sub_1B19F7AAC((unint64_t)&v3[4 * v3[2] + 4], v7 - v3[2], a1);
  if (v9 >= 1)
    v3[2] += v9;
  result = swift_bridgeObjectRelease();
  *(_QWORD *)v1 = v3;
  return result;
}

uint64_t sub_1B19F48F0(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  v3 = *(_QWORD **)v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v5 = v4 + *(_QWORD *)(a1 + 16);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || (v7 = v3[3] >> 1, v7 < v5))
  {
    if (v4 <= v5)
      v8 = v5;
    else
      v8 = v4;
    v3 = sub_1B1C63044(isUniquelyReferenced_nonNull_native, v8, 1, v3);
    v7 = v3[3] >> 1;
  }
  sub_1B19F7B58((unint64_t)&v3[2 * v3[2] + 4], v7 - v3[2], a1);
  if (v9 >= 1)
    v3[2] += v9;
  result = swift_bridgeObjectRelease();
  *(_QWORD *)v1 = v3;
  return result;
}

uint64_t sub_1B19F499C(uint64_t a1)
{
  char **v1;
  char *v3;
  int64_t v4;
  int64_t v5;
  int isUniquelyReferenced_nonNull_native;
  int64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t result;

  v3 = *v1;
  v4 = *((_QWORD *)*v1 + 2);
  v5 = v4 + *(_QWORD *)(a1 + 16);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || (v7 = *((_QWORD *)v3 + 3) >> 1, v7 < v5))
  {
    if (v4 <= v5)
      v8 = v5;
    else
      v8 = v4;
    v3 = sub_1B1C6314C(isUniquelyReferenced_nonNull_native, v8, 1, v3);
    v7 = *((_QWORD *)v3 + 3) >> 1;
  }
  sub_1B19F7C04(&v3[*((_QWORD *)v3 + 2) + 32], v7 - *((_QWORD *)v3 + 2), a1);
  if (v9 >= 1)
    *((_QWORD *)v3 + 2) += v9;
  result = swift_bridgeObjectRelease();
  *v1 = v3;
  return result;
}

uint64_t sub_1B19F4A48(uint64_t a1)
{
  char **v1;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  v3 = *v1;
  v4 = *((_QWORD *)*v1 + 2);
  v5 = v4 + *(_QWORD *)(a1 + 16);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || (v7 = *((_QWORD *)v3 + 3) >> 1, v7 < v5))
  {
    if (v4 <= v5)
      v8 = v5;
    else
      v8 = v4;
    v3 = sub_1B1C63160(isUniquelyReferenced_nonNull_native, v8, 1, v3);
    v7 = *((_QWORD *)v3 + 3) >> 1;
  }
  sub_1B19F7A0C(&v3[16 * *((_QWORD *)v3 + 2) + 32], v7 - *((_QWORD *)v3 + 2), a1);
  if (v9 >= 1)
    *((_QWORD *)v3 + 2) += v9;
  result = swift_bridgeObjectRelease();
  *v1 = v3;
  return result;
}

uint64_t sub_1B19F4AF4(unint64_t a1)
{
  return sub_1B19F52B0(a1, &qword_1EEF58848, (uint64_t (*)(uint64_t))type metadata accessor for AuthoringNode, (unint64_t *)&unk_1EEF58850, (uint64_t (*)(_BYTE *, uint64_t, unint64_t, uint64_t, uint64_t))sub_1B1C6BB70);
}

uint64_t sub_1B19F4B18(unint64_t a1)
{
  return sub_1B19F52B0(a1, &qword_1EEF58830, (uint64_t (*)(uint64_t))type metadata accessor for Node, (unint64_t *)&unk_1EEF58838, (uint64_t (*)(_BYTE *, uint64_t, unint64_t, uint64_t, uint64_t))sub_1B1C6BB70);
}

uint64_t sub_1B19F4B3C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  v3 = *(_QWORD **)v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v5 = v4 + *(_QWORD *)(a1 + 16);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || (v7 = v3[3] >> 1, v7 < v5))
  {
    if (v4 <= v5)
      v8 = v5;
    else
      v8 = v4;
    v3 = sub_1B1C63C78(isUniquelyReferenced_nonNull_native, v8, 1, v3);
    v7 = v3[3] >> 1;
  }
  sub_1B19F7EC8((unint64_t)&v3[6 * v3[2] + 4], v7 - v3[2], a1);
  if (v9 >= 1)
    v3[2] += v9;
  result = swift_bridgeObjectRelease();
  *(_QWORD *)v1 = v3;
  return result;
}

uint64_t sub_1B19F4BEC(unint64_t a1)
{
  return sub_1B19F52B0(a1, &qword_1EEF58810, (uint64_t (*)(uint64_t))type metadata accessor for PropertyDescription, &qword_1EEF58818, (uint64_t (*)(_BYTE *, uint64_t, unint64_t, uint64_t, uint64_t))sub_1B1C6BB70);
}

uint64_t sub_1B19F4C10(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  v3 = *(_QWORD **)v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v5 = v4 + *(_QWORD *)(a1 + 16);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || (v7 = v3[3] >> 1, v7 < v5))
  {
    if (v4 <= v5)
      v8 = v5;
    else
      v8 = v4;
    v3 = sub_1B1C6422C(isUniquelyReferenced_nonNull_native, v8, 1, v3);
    v7 = v3[3] >> 1;
  }
  sub_1B19F7F9C((unint64_t)&v3[4 * v3[2] + 4], v7 - v3[2], a1);
  if (v9 >= 1)
    v3[2] += v9;
  result = swift_bridgeObjectRelease();
  *(_QWORD *)v1 = v3;
  return result;
}

uint64_t sub_1B19F4CBC(uint64_t a1)
{
  char **v1;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  v3 = *v1;
  v4 = *((_QWORD *)*v1 + 2);
  v5 = v4 + *(_QWORD *)(a1 + 16);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || (v7 = *((_QWORD *)v3 + 3) >> 1, v7 < v5))
  {
    if (v4 <= v5)
      v8 = v5;
    else
      v8 = v4;
    v3 = sub_1B1C64644(isUniquelyReferenced_nonNull_native, v8, 1, v3);
    v7 = *((_QWORD *)v3 + 3) >> 1;
  }
  sub_1B19F8060(&v3[24 * *((_QWORD *)v3 + 2) + 32], v7 - *((_QWORD *)v3 + 2), a1);
  if (v9 >= 1)
    *((_QWORD *)v3 + 2) += v9;
  result = swift_bridgeObjectRelease();
  *v1 = v3;
  return result;
}

uint64_t sub_1B19F4D6C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  v3 = *(_QWORD **)v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v5 = v4 + *(_QWORD *)(a1 + 16);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || (v7 = v3[3] >> 1, v7 < v5))
  {
    if (v4 <= v5)
      v8 = v5;
    else
      v8 = v4;
    v3 = sub_1B1C65008(isUniquelyReferenced_nonNull_native, v8, 1, v3);
    v7 = v3[3] >> 1;
  }
  sub_1B19F81B4((unint64_t)&v3[3 * v3[2] + 4], v7 - v3[2], a1);
  if (v9 >= 1)
    v3[2] += v9;
  result = swift_bridgeObjectRelease();
  *(_QWORD *)v1 = v3;
  return result;
}

uint64_t sub_1B19F4E1C(uint64_t a1)
{
  return sub_1B19F553C(a1, (uint64_t (*)(void))sub_1B1C65360, (unint64_t *)&qword_1ED4BA2B0);
}

uint64_t sub_1B19F4E38(uint64_t a1)
{
  return sub_1B19F511C(a1, (uint64_t (*)(void))sub_1B1C6534C);
}

uint64_t sub_1B19F4E4C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  int isUniquelyReferenced_nonNull_native;
  int64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t result;

  v3 = *(_QWORD **)v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v5 = v4 + *(_QWORD *)(a1 + 16);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || (v7 = v3[3] >> 1, v7 < v5))
  {
    if (v4 <= v5)
      v8 = v5;
    else
      v8 = v4;
    v3 = sub_1B1C638E4(isUniquelyReferenced_nonNull_native, v8, 1, v3);
    v7 = v3[3] >> 1;
  }
  sub_1B19F8264((unint64_t)&v3[4 * v3[2] + 4], v7 - v3[2], a1);
  if (v9 >= 1)
    v3[2] += v9;
  result = swift_bridgeObjectRelease();
  *(_QWORD *)v1 = v3;
  return result;
}

uint64_t sub_1B19F4EF8(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  v3 = *(_QWORD **)v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v5 = v4 + *(_QWORD *)(a1 + 16);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || (v7 = v3[3] >> 1, v7 < v5))
  {
    if (v4 <= v5)
      v8 = v5;
    else
      v8 = v4;
    v3 = sub_1B1C65C54(isUniquelyReferenced_nonNull_native, v8, 1, v3);
    v7 = v3[3] >> 1;
  }
  sub_1B19F8310((unint64_t)&v3[5 * v3[2] + 4], v7 - v3[2], a1);
  if (v9 >= 1)
    v3[2] += v9;
  result = swift_bridgeObjectRelease();
  *(_QWORD *)v1 = v3;
  return result;
}

uint64_t sub_1B19F4FA8(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  v3 = *(_QWORD **)v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v5 = v4 + *(_QWORD *)(a1 + 16);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || (v7 = v3[3] >> 1, v7 < v5))
  {
    if (v4 <= v5)
      v8 = v5;
    else
      v8 = v4;
    v3 = sub_1B1C6607C(isUniquelyReferenced_nonNull_native, v8, 1, v3);
    v7 = v3[3] >> 1;
  }
  sub_1B19F83C0((unint64_t)&v3[6 * v3[2] + 4], v7 - v3[2], a1);
  if (v9 >= 1)
    v3[2] += v9;
  result = swift_bridgeObjectRelease();
  *(_QWORD *)v1 = v3;
  return result;
}

uint64_t sub_1B19F5058(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  int isUniquelyReferenced_nonNull_native;
  int64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t result;

  v3 = *(_QWORD **)v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v5 = v4 + *(_QWORD *)(a1 + 16);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || (v7 = v3[3] >> 1, v7 < v5))
  {
    if (v4 <= v5)
      v8 = v5;
    else
      v8 = v4;
    v3 = sub_1B1C64EC0(isUniquelyReferenced_nonNull_native, v8, 1, v3);
    v7 = v3[3] >> 1;
  }
  sub_1B19F8104((unint64_t)&v3[14 * v3[2] + 4], v7 - v3[2], a1);
  if (v9 >= 1)
    v3[2] += v9;
  result = swift_bridgeObjectRelease();
  *(_QWORD *)v1 = v3;
  return result;
}

uint64_t sub_1B19F5108(uint64_t a1)
{
  return sub_1B19F511C(a1, (uint64_t (*)(void))sub_1B1C66940);
}

uint64_t sub_1B19F511C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  v5 = *v2;
  v6 = *(_QWORD *)(*v2 + 16) + *(_QWORD *)(a1 + 16);
  if (!swift_isUniquelyReferenced_nonNull_native() || (v7 = *(_QWORD *)(v5 + 24) >> 1, v7 < v6))
  {
    v5 = a2();
    v7 = *(_QWORD *)(v5 + 24) >> 1;
  }
  sub_1B19F8470(v5 + 8 * *(_QWORD *)(v5 + 16) + 32, v7 - *(_QWORD *)(v5 + 16), a1);
  if (v8 >= 1)
    *(_QWORD *)(v5 + 16) += v8;
  result = swift_bridgeObjectRelease();
  *v2 = v5;
  return result;
}

uint64_t sub_1B19F51DC(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  v3 = *(_QWORD **)v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v5 = v4 + *(_QWORD *)(a1 + 16);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || (v7 = v3[3] >> 1, v7 < v5))
  {
    if (v4 <= v5)
      v8 = v5;
    else
      v8 = v4;
    v3 = sub_1B1C66B7C(isUniquelyReferenced_nonNull_native, v8, 1, v3);
    v7 = v3[3] >> 1;
  }
  sub_1B19F8514((unint64_t)&v3[7 * v3[2] + 4], v7 - v3[2], a1);
  if (v9 >= 1)
    v3[2] += v9;
  result = swift_bridgeObjectRelease();
  *(_QWORD *)v1 = v3;
  return result;
}

uint64_t sub_1B19F528C(unint64_t a1)
{
  return sub_1B19F52B0(a1, &qword_1EEF58860, (uint64_t (*)(uint64_t))_s13ParameterBaseCMa, (unint64_t *)&unk_1EEF58868, (uint64_t (*)(_BYTE *, uint64_t, unint64_t, uint64_t, uint64_t))sub_1B1C6BB70);
}

uint64_t sub_1B19F52B0(unint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), unint64_t *a4, uint64_t (*a5)(_BYTE *, uint64_t, unint64_t, uint64_t, uint64_t))
{
  uint64_t *v5;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v11 = sub_1B22296AC();
    swift_bridgeObjectRelease();
  }
  else
  {
    v11 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v12 = *v5;
  if ((unint64_t)*v5 >> 62)
  {
    swift_bridgeObjectRetain();
    v13 = sub_1B22296AC();
    swift_bridgeObjectRelease();
    v12 = *v5;
  }
  else
  {
    v13 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v14 = v13 + v11;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *v5 = v12;
  v16 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject
    && (v12 & 0x8000000000000000) == 0
    && (v12 & 0x4000000000000000) == 0)
  {
    v17 = v12 & 0xFFFFFFFFFFFFFF8;
    if (v14 <= *(_QWORD *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_15;
    v16 = 1;
  }
  if (v12 >> 62)
  {
    swift_bridgeObjectRetain();
    v18 = sub_1B22296AC();
    swift_bridgeObjectRelease();
  }
  else
  {
    v18 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if (v18 <= v14)
    v18 = v14;
  swift_bridgeObjectRetain();
  v19 = MEMORY[0x1B5E21024](v16, v18, 1, v12);
  swift_bridgeObjectRelease();
  *v5 = v19;
  v17 = v19 & 0xFFFFFFFFFFFFFF8;
LABEL_15:
  sub_1B19F7CEC(v17 + 8 * *(_QWORD *)(v17 + 16) + 32, (*(_QWORD *)(v17 + 24) >> 1) - *(_QWORD *)(v17 + 16), a1, a2, a3, a4, a5);
  if (v20 >= 1)
    *(_QWORD *)((*v5 & 0xFFFFFFFFFFFFFF8) + 0x10) += v20;
  swift_bridgeObjectRelease();
  return sub_1B2228AD0();
}

uint64_t sub_1B19F5470(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  v3 = *(_QWORD **)v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v5 = v4 + *(_QWORD *)(a1 + 16);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || (v7 = v3[3] >> 1, v7 < v5))
  {
    if (v4 <= v5)
      v8 = v5;
    else
      v8 = v4;
    v3 = sub_1B1C66EB0(isUniquelyReferenced_nonNull_native, v8, 1, v3);
    v7 = v3[3] >> 1;
  }
  sub_1B19F85C4((unint64_t)&v3[12 * v3[2] + 4], v7 - v3[2], a1);
  if (v9 >= 1)
    v3[2] += v9;
  result = swift_bridgeObjectRelease();
  *(_QWORD *)v1 = v3;
  return result;
}

uint64_t sub_1B19F5520(uint64_t a1)
{
  return sub_1B19F553C(a1, (uint64_t (*)(void))sub_1B1C6681C, (unint64_t *)&qword_1EEF5CE10);
}

uint64_t sub_1B19F553C(uint64_t a1, uint64_t (*a2)(void), unint64_t *a3)
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;

  v7 = *v3;
  v8 = *(_QWORD *)(*v3 + 16) + *(_QWORD *)(a1 + 16);
  if (!swift_isUniquelyReferenced_nonNull_native() || (v9 = *(_QWORD *)(v7 + 24) >> 1, v9 < v8))
  {
    v7 = a2();
    v9 = *(_QWORD *)(v7 + 24) >> 1;
  }
  sub_1B19F8674(v7 + 16 * *(_QWORD *)(v7 + 16) + 32, v9 - *(_QWORD *)(v7 + 16), a1, a3);
  if (v10 >= 1)
    *(_QWORD *)(v7 + 16) += v10;
  result = swift_bridgeObjectRelease();
  *v3 = v7;
  return result;
}

uint64_t sub_1B19F5604(uint64_t a1, int32x2_t a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  uint64_t v11;
  __int32 v12;
  uint64_t v13;
  _DWORD *v14;
  uint64_t v16;
  uint64_t v17;
  int32x4_t v18;
  unint64_t v19;
  int64_t v20;
  int64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int32x4_t *v26;
  _DWORD *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  int32x4_t v35;
  int32x4_t *v36;
  int64_t v37;
  int32x4_t v38;

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 16);
  v6 = v5 + a1;
  result = swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)result || (v8 = *(_QWORD *)(v4 + 24) >> 1, v8 < v6))
  {
    if (v5 <= v6)
      v9 = v6;
    else
      v9 = v5;
    result = (uint64_t)sub_1B1C635D8(result, v9, 1, (char *)v4);
    v4 = result;
    v8 = *(_QWORD *)(result + 24) >> 1;
  }
  v10 = *(_QWORD *)(v4 + 16);
  v11 = v8 - v10;
  v12 = a2.i32[0];
  if (v8 == v10)
  {
    if (!a1)
      goto LABEL_64;
    v16 = 0;
    goto LABEL_17;
  }
  if (!a1)
    goto LABEL_64;
  v13 = v4 + 4 * v10;
  *(_DWORD *)(v13 + 32) = a2.i32[0];
  v14 = (_DWORD *)(v13 + 32);
  if (v11 == 1 || a1 == 1)
  {
    v16 = 1;
LABEL_62:
    v10 += v16;
    *(_QWORD *)(v4 + 16) = v10;
    goto LABEL_63;
  }
  v14[1] = a2.i32[0];
  if (v11 == 2 || a1 == 2)
  {
    v16 = 2;
    goto LABEL_62;
  }
  v14[2] = a2.i32[0];
  if (v11 == 3 || a1 == 3)
  {
    v16 = 3;
    goto LABEL_62;
  }
  v29 = v14 + 3;
  v30 = a1 - 4;
  if (a1 - 4 >= (unint64_t)(v11 - 4))
    v30 = v11 - 4;
  v31 = v30 + 1;
  if (v31 >= 9)
  {
    v33 = v31 & 7;
    if ((v31 & 7) == 0)
      v33 = 8;
    v34 = v31 - v33;
    v29 += v34;
    v32 = v34 + 3;
    v35 = vdupq_lane_s32(a2, 0);
    v36 = (int32x4_t *)(v4 + 4 * v10 + 60);
    do
    {
      v36[-1] = v35;
      *v36 = v35;
      v36 += 2;
      v34 -= 8;
    }
    while (v34);
  }
  else
  {
    v32 = 3;
  }
  v37 = ~v10 + v8;
  while (1)
  {
    *v29 = a2.i32[0];
    if (v37 == v32)
      break;
    ++v32;
    ++v29;
    if (a1 == v32)
    {
      v16 = a1;
      goto LABEL_61;
    }
  }
  v16 = v11;
LABEL_61:
  if (v16 > 0)
    goto LABEL_62;
LABEL_63:
  if (v16 == v11 && v16 != a1)
  {
LABEL_17:
    v17 = v16 + 1;
    v18 = vdupq_lane_s32(a2, 0);
    while (1)
    {
      v19 = *(_QWORD *)(v4 + 24);
      v20 = v19 >> 1;
      v21 = v10 + 1;
      if ((uint64_t)(v19 >> 1) < v10 + 1)
      {
        v38 = v18;
        result = (uint64_t)sub_1B1C635D8(v19 > 1, v10 + 1, 1, (char *)v4);
        v18 = v38;
        v12 = a2.i32[0];
        v4 = result;
        v20 = *(_QWORD *)(result + 24) >> 1;
        if (v10 >= v20)
          goto LABEL_18;
LABEL_21:
        *(_DWORD *)(v4 + 32 + 4 * v10) = v12;
        if (v17 == a1)
        {
LABEL_35:
          *(_QWORD *)(v4 + 16) = v21;
          break;
        }
        v22 = a1 + ~v17;
        if (v22 >= v20 + ~v10)
          v22 = v20 + ~v10;
        v23 = v22 + 1;
        if (v23 > 8)
        {
          v24 = v23 & 7;
          if ((v23 & 7) == 0)
            v24 = 8;
          v25 = v23 - v24;
          v17 += v25;
          v21 += v25;
          v26 = (int32x4_t *)(v4 + 4 * v10 + 52);
          do
          {
            v26[-1] = v18;
            *v26 = v18;
            v26 += 2;
            v25 -= 8;
          }
          while (v25);
        }
        while (1)
        {
          ++v17;
          if (v20 == v21)
            break;
          *(_DWORD *)(v4 + 32 + 4 * v21++) = v12;
          if (a1 == v17)
            goto LABEL_35;
        }
        v10 = v20;
        *(_QWORD *)(v4 + 16) = v20;
      }
      else
      {
        if (v10 < v20)
          goto LABEL_21;
LABEL_18:
        *(_QWORD *)(v4 + 16) = v10;
      }
    }
  }
LABEL_64:
  *v2 = v4;
  return result;
}

uint64_t sub_1B19F58A8(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  int64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;

  v3 = *(_QWORD **)v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v5 = v4 + *(_QWORD *)(a1 + 16);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || (v7 = v3[3] >> 1, v7 < v5))
  {
    if (v4 <= v5)
      v8 = v5;
    else
      v8 = v4;
    v3 = sub_1B1C63044(isUniquelyReferenced_nonNull_native, v8, 1, v3);
    v7 = v3[3] >> 1;
  }
  v9 = v3[2];
  v10 = v7 - v9;
  v11 = sub_1B19F762C(&v35, &v3[2 * v9 + 4], v7 - v9, a1);
  if (v11 >= 1)
    v3[2] += v11;
  if (v11 != v10)
    goto LABEL_10;
  v13 = v3[2];
  v14 = v35;
  v34 = v36;
  v15 = v38;
  if (v39)
  {
    v16 = (v39 - 1) & v39;
    v17 = __clz(__rbit64(v39)) | (v38 << 6);
    v33 = (unint64_t)(v37 + 64) >> 6;
  }
  else
  {
    v30 = v38 + 1;
    v33 = (unint64_t)(v37 + 64) >> 6;
    if (v38 + 1 >= v33)
      goto LABEL_10;
    v31 = *(_QWORD *)(v36 + 8 * v30);
    if (!v31)
    {
      v30 = v38 + 2;
      if (v38 + 2 >= v33)
        goto LABEL_10;
      v31 = *(_QWORD *)(v36 + 8 * v30);
      if (!v31)
      {
        v30 = v38 + 3;
        if (v38 + 3 >= v33)
          goto LABEL_10;
        v31 = *(_QWORD *)(v36 + 8 * v30);
        if (!v31)
        {
          v30 = v38 + 4;
          if (v38 + 4 >= v33)
            goto LABEL_10;
          v31 = *(_QWORD *)(v36 + 8 * v30);
          if (!v31)
          {
            v30 = v38 + 5;
            if (v38 + 5 >= v33)
              goto LABEL_10;
            v31 = *(_QWORD *)(v36 + 8 * v30);
            if (!v31)
            {
              v32 = v38 + 6;
              do
              {
                if (v33 == v32)
                  goto LABEL_10;
                v31 = *(_QWORD *)(v36 + 8 * v32++);
              }
              while (!v31);
              v30 = v32 - 1;
            }
          }
        }
      }
    }
    v16 = (v31 - 1) & v31;
    v17 = __clz(__rbit64(v31)) + (v30 << 6);
    v15 = v30;
  }
  v18 = (uint64_t *)(*(_QWORD *)(v35 + 48) + 16 * v17);
  v20 = *v18;
  v19 = v18[1];
  swift_bridgeObjectRetain();
  while (1)
  {
    v21 = v3[3];
    v22 = v21 >> 1;
    if ((uint64_t)(v21 >> 1) < v13 + 1)
      break;
    if (v13 < v22)
      goto LABEL_18;
LABEL_15:
    v3[2] = v13;
  }
  v3 = sub_1B1C63044(v21 > 1, v13 + 1, 1, v3);
  v22 = v3[3] >> 1;
  if (v13 >= v22)
    goto LABEL_15;
  while (1)
  {
LABEL_18:
    v23 = &v3[2 * v13 + 4];
    *v23 = v20;
    v23[1] = v19;
    ++v13;
    if (v16)
    {
      v24 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v25 = v24 | (v15 << 6);
      goto LABEL_35;
    }
    v26 = v15 + 1;
    if (v15 + 1 >= v33)
      goto LABEL_39;
    v27 = *(_QWORD *)(v34 + 8 * v26);
    if (!v27)
    {
      v26 = v15 + 2;
      if (v15 + 2 >= v33)
        goto LABEL_39;
      v27 = *(_QWORD *)(v34 + 8 * v26);
      if (!v27)
      {
        v26 = v15 + 3;
        if (v15 + 3 >= v33)
          goto LABEL_39;
        v27 = *(_QWORD *)(v34 + 8 * v26);
        if (!v27)
        {
          v26 = v15 + 4;
          if (v15 + 4 >= v33)
            goto LABEL_39;
          v27 = *(_QWORD *)(v34 + 8 * v26);
          if (!v27)
          {
            v26 = v15 + 5;
            if (v15 + 5 >= v33)
              goto LABEL_39;
            v27 = *(_QWORD *)(v34 + 8 * v26);
            if (!v27)
              break;
          }
        }
      }
    }
LABEL_34:
    v16 = (v27 - 1) & v27;
    v25 = __clz(__rbit64(v27)) + (v26 << 6);
    v15 = v26;
LABEL_35:
    v29 = (uint64_t *)(*(_QWORD *)(v14 + 48) + 16 * v25);
    v20 = *v29;
    v19 = v29[1];
    if (v13 >= v22)
    {
      swift_bridgeObjectRetain();
      goto LABEL_15;
    }
    swift_bridgeObjectRetain();
  }
  v28 = v15 + 6;
  while (v33 != v28)
  {
    v27 = *(_QWORD *)(v34 + 8 * v28++);
    if (v27)
    {
      v26 = v28 - 1;
      goto LABEL_34;
    }
  }
LABEL_39:
  v3[2] = v13;
LABEL_10:
  result = sub_1B19F8D30();
  *(_QWORD *)v1 = v3;
  return result;
}

uint64_t sub_1B19F5C40(uint64_t a1)
{
  char **v1;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unsigned int *v28;
  char *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  unint64_t v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;

  v3 = *v1;
  v4 = *((_QWORD *)*v1 + 2);
  v5 = v4 + *(_QWORD *)(a1 + 16);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || (v7 = *((_QWORD *)v3 + 3) >> 1, v7 < v5))
  {
    if (v4 <= v5)
      v8 = v5;
    else
      v8 = v4;
    v3 = sub_1B1C63D98(isUniquelyReferenced_nonNull_native, v8, 1, v3);
    v7 = *((_QWORD *)v3 + 3) >> 1;
  }
  v9 = *((_QWORD *)v3 + 2);
  v10 = v7 - v9;
  v11 = sub_1B19F7100(&v44, &v3[8 * v9 + 32], v7 - v9, a1);
  if (v11 >= 1)
    *((_QWORD *)v3 + 2) += v11;
  if (v11 != v10)
    goto LABEL_10;
  v13 = *((_QWORD *)v3 + 2);
  v14 = v44;
  v15 = v45;
  v16 = v46;
  v17 = v47;
  if (v48)
  {
    v18 = (v48 - 1) & v48;
    v19 = __clz(__rbit64(v48)) | (v47 << 6);
    v20 = (unint64_t)(v46 + 64) >> 6;
  }
  else
  {
    v20 = (unint64_t)(v46 + 64) >> 6;
    v37 = v47 + 1;
    if (v47 + 1 >= v20)
      goto LABEL_10;
    v38 = *(_QWORD *)(v45 + 8 * v37);
    if (!v38)
    {
      v37 = v47 + 2;
      if (v47 + 2 >= v20)
        goto LABEL_10;
      v38 = *(_QWORD *)(v45 + 8 * v37);
      if (!v38)
      {
        v37 = v47 + 3;
        if (v47 + 3 >= v20)
          goto LABEL_10;
        v15 = v45;
        v38 = *(_QWORD *)(v45 + 8 * v37);
        v16 = v46;
        v14 = v44;
        if (!v38)
        {
          v37 = v47 + 4;
          if (v47 + 4 >= v20)
            goto LABEL_10;
          v15 = v45;
          v38 = *(_QWORD *)(v45 + 8 * v37);
          v16 = v46;
          v14 = v44;
          if (!v38)
          {
            v37 = v47 + 5;
            if (v47 + 5 >= v20)
              goto LABEL_10;
            v15 = v45;
            v38 = *(_QWORD *)(v45 + 8 * v37);
            v16 = v46;
            v14 = v44;
            if (!v38)
            {
              v39 = v47 + 6;
              do
              {
                if (v20 == v39)
                  goto LABEL_10;
                v38 = *(_QWORD *)(v45 + 8 * v39++);
              }
              while (!v38);
              v37 = v39 - 1;
              v16 = v46;
              v15 = v45;
              v14 = v44;
            }
          }
        }
      }
    }
    v18 = (v38 - 1) & v38;
    v19 = __clz(__rbit64(v38)) + (v37 << 6);
    v17 = v37;
  }
  v21 = *(_QWORD *)(*(_QWORD *)(v14 + 56) + 8 * v19);
  while (1)
  {
    v22 = *((_QWORD *)v3 + 3);
    v23 = v22 >> 1;
    if ((uint64_t)(v22 >> 1) < v13 + 1)
      break;
    if (v13 < v23)
      goto LABEL_18;
LABEL_15:
    *((_QWORD *)v3 + 2) = v13;
  }
  v42 = v15;
  v43 = v14;
  v40 = v17;
  v41 = v16;
  v34 = v3;
  v35 = v18;
  v36 = sub_1B1C63D98(v22 > 1, v13 + 1, 1, v34);
  v18 = v35;
  v17 = v40;
  v16 = v41;
  v3 = v36;
  v15 = v42;
  v14 = v43;
  v23 = *((_QWORD *)v3 + 3) >> 1;
  if (v13 >= v23)
    goto LABEL_15;
LABEL_18:
  v24 = HIDWORD(v21);
  LODWORD(v25) = v21;
  while (1)
  {
    v29 = &v3[8 * v13 + 32];
    *(_DWORD *)v29 = v25;
    *((_DWORD *)v29 + 1) = v24;
    ++v13;
    if (!v18)
      break;
    v26 = __clz(__rbit64(v18));
    v18 &= v18 - 1;
    v27 = v26 | (v17 << 6);
LABEL_20:
    v28 = (unsigned int *)(*(_QWORD *)(v14 + 56) + 8 * v27);
    v25 = *v28;
    v24 = v28[1];
    if (v13 >= v23)
    {
      v21 = v25 | (v24 << 32);
      goto LABEL_15;
    }
  }
  v30 = v17 + 1;
  if (v17 + 1 >= v20)
    goto LABEL_39;
  v31 = *(_QWORD *)(v15 + 8 * v30);
  if (v31)
    goto LABEL_36;
  v30 = v17 + 2;
  if (v17 + 2 >= v20)
    goto LABEL_39;
  v31 = *(_QWORD *)(v15 + 8 * v30);
  if (v31)
    goto LABEL_36;
  v30 = v17 + 3;
  if (v17 + 3 >= v20)
    goto LABEL_39;
  v31 = *(_QWORD *)(v15 + 8 * v30);
  if (v31)
    goto LABEL_36;
  v30 = v17 + 4;
  if (v17 + 4 >= v20)
    goto LABEL_39;
  v31 = *(_QWORD *)(v15 + 8 * v30);
  if (v31)
    goto LABEL_36;
  v30 = v17 + 5;
  if (v17 + 5 >= v20)
    goto LABEL_39;
  v31 = *(_QWORD *)(v15 + 8 * v30);
  if (v31)
  {
LABEL_36:
    v33 = __clz(__rbit64(v31));
    v18 = (v31 - 1) & v31;
    v27 = v33 + (v30 << 6);
    v17 = v30;
    goto LABEL_20;
  }
  v32 = v17 + 6;
  while (v20 != v32)
  {
    v31 = *(_QWORD *)(v15 + 8 * v32++);
    if (v31)
    {
      v30 = v32 - 1;
      goto LABEL_36;
    }
  }
LABEL_39:
  *((_QWORD *)v3 + 2) = v13;
LABEL_10:
  result = sub_1B19F8D30();
  *v1 = v3;
  return result;
}

uint64_t sub_1B19F5FC4(unint64_t a1)
{
  return sub_1B19F5FDC(a1, (void (*)(uint64_t, _QWORD, unint64_t))sub_1B19F8740);
}

uint64_t sub_1B19F5FD0(unint64_t a1)
{
  return sub_1B19F5FDC(a1, (void (*)(uint64_t, _QWORD, unint64_t))sub_1B19F8938);
}

uint64_t sub_1B19F5FDC(unint64_t a1, void (*a2)(uint64_t, _QWORD, unint64_t))
{
  uint64_t *v2;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v5 = sub_1B22296AC();
    swift_bridgeObjectRelease();
  }
  else
  {
    v5 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v6 = *v2;
  if ((unint64_t)*v2 >> 62)
  {
    swift_bridgeObjectRetain();
    v7 = sub_1B22296AC();
    swift_bridgeObjectRelease();
    v6 = *v2;
  }
  else
  {
    v7 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v8 = v7 + v5;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *v2 = v6;
  v10 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v6 & 0x8000000000000000) == 0 && (v6 & 0x4000000000000000) == 0)
  {
    v11 = v6 & 0xFFFFFFFFFFFFFF8;
    if (v8 <= *(_QWORD *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_15;
    v10 = 1;
  }
  if (v6 >> 62)
  {
    swift_bridgeObjectRetain();
    v12 = sub_1B22296AC();
    swift_bridgeObjectRelease();
  }
  else
  {
    v12 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if (v12 <= v8)
    v12 = v8;
  swift_bridgeObjectRetain();
  v13 = MEMORY[0x1B5E21024](v10, v12, 1, v6);
  swift_bridgeObjectRelease();
  *v2 = v13;
  v11 = v13 & 0xFFFFFFFFFFFFFF8;
LABEL_15:
  a2(v11 + 8 * *(_QWORD *)(v11 + 16) + 32, (*(_QWORD *)(v11 + 24) >> 1) - *(_QWORD *)(v11 + 16), a1);
  if (v14 >= 1)
    *(_QWORD *)((*v2 & 0xFFFFFFFFFFFFFF8) + 0x10) += v14;
  swift_bridgeObjectRelease();
  return sub_1B2228AD0();
}

uint64_t sub_1B19F6178(uint64_t a1)
{
  unint64_t *v1;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + *(_QWORD *)(a1 + 16);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v5 > *(_QWORD *)(v3 + 24) >> 1)
  {
    if (v4 <= v5)
      v7 = v5;
    else
      v7 = v4;
    v3 = sub_1B1C69DB0(isUniquelyReferenced_nonNull_native, v7, 1, v3);
  }
  v8 = *(_QWORD *)(v3 + 16);
  v9 = type metadata accessor for EdgeCoder(0);
  sub_1B19F8B30(v3+ ((*(unsigned __int8 *)(*(_QWORD *)(v9 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v9 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * v8, (*(_QWORD *)(v3 + 24) >> 1) - v8, a1);
  if (v10 >= 1)
    *(_QWORD *)(v3 + 16) += v10;
  result = swift_bridgeObjectRelease();
  *v1 = v3;
  return result;
}

uint64_t sub_1B19F623C(uint64_t a1, uint64_t a2)
{
  return sub_1B1A12038((uint64_t)&type metadata for Orientation, (uint64_t)&off_1E6371540, *(uint64_t **)(a2 + 88), *(_QWORD *)(a2 + 96), *(_QWORD *)(a2 + 104), *(_QWORD *)(a2 + 16));
}

uint64_t sub_1B19F629C(uint64_t a1, uint64_t a2)
{
  return sub_1B1A12038((uint64_t)&type metadata for Position, (uint64_t)&off_1E63C2398, *(uint64_t **)(a2 + 88), *(_QWORD *)(a2 + 96), *(_QWORD *)(a2 + 104), *(_QWORD *)(a2 + 16));
}

uint64_t sub_1B19F62FC(uint64_t a1, uint64_t a2)
{
  return sub_1B19F6354(a1, a2, (unint64_t *)&unk_1ED4B88D0, type metadata accessor for SimpleScript, (uint64_t)&off_1ED4BC1D8);
}

uint64_t sub_1B19F6328(uint64_t a1, uint64_t a2)
{
  return sub_1B19F6354(a1, a2, (unint64_t *)&unk_1ED4B88B0, type metadata accessor for GraphScript, (uint64_t)&off_1ED4BBD80);
}

uint64_t sub_1B19F6354(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t), uint64_t a5)
{
  uint64_t v6;

  sub_1B19F8EB0(0, a3, a4, a5);
  return sub_1B1A12038(v6, (uint64_t)&off_1E637D0A8, *(uint64_t **)(a2 + 88), *(_QWORD *)(a2 + 96), *(_QWORD *)(a2 + 104), *(_QWORD *)(a2 + 16));
}

uint64_t sub_1B19F63D4(uint64_t a1, uint64_t a2)
{
  return sub_1B19F6354(a1, a2, &qword_1ED4BB250, type metadata accessor for TriggerScript, (uint64_t)&off_1ED4BEFD8);
}

uint64_t sub_1B19F6400(uint64_t a1, uint64_t a2)
{
  return sub_1B1A12038((uint64_t)&type metadata for Velocity, (uint64_t)&off_1E63C30D0, *(uint64_t **)(a2 + 88), *(_QWORD *)(a2 + 96), *(_QWORD *)(a2 + 104), *(_QWORD *)(a2 + 16));
}

uint64_t sub_1B19F6460(uint64_t a1, uint64_t a2)
{
  return sub_1B19F6484(a1, a2, type metadata accessor for ShaderScript, (uint64_t)&off_1E63774F8);
}

uint64_t sub_1B19F6484(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD), uint64_t a4)
{
  uint64_t v6;

  v6 = a3(0);
  return sub_1B1A12038(v6, a4, *(uint64_t **)(a2 + 88), *(_QWORD *)(a2 + 96), *(_QWORD *)(a2 + 104), *(_QWORD *)(a2 + 16));
}

uint64_t sub_1B19F6500(uint64_t a1, uint64_t a2)
{
  return sub_1B1A12038((uint64_t)&type metadata for Scale, (uint64_t)&off_1E63BA9B8, *(uint64_t **)(a2 + 88), *(_QWORD *)(a2 + 96), *(_QWORD *)(a2 + 104), *(_QWORD *)(a2 + 16));
}

uint64_t sub_1B19F6560(uint64_t a1, uint64_t a2)
{
  return sub_1B19F6484(a1, a2, type metadata accessor for MovieRuntime, (uint64_t)&off_1E6375E38);
}

uint64_t sub_1B19F6584(uint64_t a1, uint64_t a2)
{
  return sub_1B19F6484(a1, a2, type metadata accessor for AudioPlayerComponent, (uint64_t)&off_1E639B140);
}

uint64_t sub_1B19F65A8(uint64_t a1, uint64_t a2)
{
  return sub_1B19F6354(a1, a2, &qword_1ED4B88A0, type metadata accessor for ParticleUpdateScript, (uint64_t)&off_1ED4BD280);
}

uint64_t sub_1B19F65D4(uint64_t a1, uint64_t a2)
{
  return sub_1B19F6354(a1, a2, &qword_1ED4B8890, type metadata accessor for ParticleInitScript, (uint64_t)&off_1ED4BCD90);
}

uint64_t sub_1B19F6600(uint64_t a1, uint64_t a2)
{
  return sub_1B19F6354(a1, a2, (unint64_t *)&unk_1ED4B88E0, type metadata accessor for EmitterScript, (uint64_t)&off_1ED4BC418);
}

uint64_t sub_1B19F662C(uint64_t a1, uint64_t a2)
{
  return sub_1B19F6354(a1, a2, (unint64_t *)&qword_1ED4BB240, type metadata accessor for MetalFunctionScript, (uint64_t)&off_1ED4BF0F8);
}

uint64_t sub_1B19F6658(uint64_t a1, uint64_t a2)
{
  return sub_1B19F6484(a1, a2, (uint64_t (*)(_QWORD))type metadata accessor for SDFFileAsset, (uint64_t)&off_1E63768E0);
}

uint64_t sub_1B19F667C(uint64_t a1, uint64_t a2)
{
  return sub_1B19F6484(a1, a2, type metadata accessor for SceneKitRenderer, (uint64_t)&off_1E638A890);
}

uint64_t sub_1B19F66A0(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  uint64_t v5;

  sub_1B19F900C(0, a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

unint64_t sub_1B19F66EC()
{
  unint64_t result;

  result = qword_1ED4BA1A0;
  if (!qword_1ED4BA1A0)
  {
    sub_1B19F6724();
    result = swift_getExistentialMetatypeMetadata();
    atomic_store(result, (unint64_t *)&qword_1ED4BA1A0);
  }
  return result;
}

unint64_t sub_1B19F6724()
{
  unint64_t result;

  result = qword_1ED4BA190;
  if (!qword_1ED4BA190)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&qword_1ED4BA190);
  }
  return result;
}

uint64_t sub_1B19F6778(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 16) = a2;
  *(_QWORD *)(result + 24) = 2 * a2;
  return result;
}

uint64_t sub_1B19F6788(_QWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (!a2)
    goto LABEL_9;
  if (!a3)
  {
LABEL_8:
    v5 = a3;
    goto LABEL_10;
  }
  if (!a4)
  {
LABEL_9:
    v5 = 0;
    goto LABEL_10;
  }
  v4 = -a4 & a4;
  a4 ^= v4;
  *a2 = v4;
  if (a3 == 1)
    goto LABEL_8;
  v5 = 1;
  while (a4)
  {
    v6 = a4 & -a4;
    a2[v5] = v6;
    a4 ^= v6;
    if (a3 == ++v5)
      goto LABEL_8;
  }
LABEL_10:
  *a1 = a4;
  return v5;
}

uint64_t sub_1B19F67EC(_QWORD *a1, int64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  uint64_t v7;
  char v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;

  if (!a2)
  {
    a3 = 0;
    goto LABEL_20;
  }
  if (!a3)
  {
LABEL_20:
    v6 = -1;
    goto LABEL_21;
  }
  v4 = *(_QWORD *)(v3 + 24);
  if (v4 < 1)
  {
    v6 = 0;
    a3 = 0;
  }
  else
  {
    v5 = 0;
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v9 = *(_QWORD **)(v3 + 32);
    v10 = 1;
    v11 = v9;
    while (1)
    {
      v12 = *v11 >> v8;
      if (v12)
      {
        v6 += __clz(__rbit64(v12));
      }
      else
      {
        v13 = v7 + 1;
        if (v7 + 1 >= v4)
          goto LABEL_23;
        v14 = v9[v13];
        if (!v14)
        {
          v13 = v7 + 2;
          if (v7 + 2 >= v4)
            goto LABEL_23;
          v14 = v9[v13];
          if (!v14)
          {
            v15 = v7 + 3;
            while (v4 != v15)
            {
              v14 = v9[v15++];
              if (v14)
              {
                v13 = v15 - 1;
                goto LABEL_15;
              }
            }
LABEL_23:
            a3 = v5;
            goto LABEL_21;
          }
        }
LABEL_15:
        v6 = __clz(__rbit64(v14)) + (v13 << 6);
      }
      *a2 = v6;
      if (v10 == a3)
        goto LABEL_21;
      v7 = ++v6 >> 6;
      v4 = *(_QWORD *)(v3 + 24);
      if (v6 >> 6 >= v4)
        break;
      v8 = v6 & 0x3F;
      v9 = *(_QWORD **)(v3 + 32);
      v11 = &v9[v7];
      ++a2;
      v5 = v10++;
    }
    a3 = v10;
  }
LABEL_21:
  *a1 = v3;
  a1[1] = v6;
  return a3;
}

uint64_t sub_1B19F68F8(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  int64_t v31;
  uint64_t v32;
  __int128 v33;
  _OWORD v34[3];
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;

  v32 = a4 + 64;
  v5 = -1 << *(_BYTE *)(a4 + 32);
  if (-v5 < 64)
    v6 = ~(-1 << -(char)v5);
  else
    v6 = -1;
  v7 = v6 & *(_QWORD *)(a4 + 64);
  if (!a2)
  {
    v11 = 0;
    v10 = 0;
    goto LABEL_33;
  }
  if (!a3)
  {
    v11 = 0;
    v10 = 0;
    goto LABEL_33;
  }
  v9 = a2;
  v29 = -1 << *(_BYTE *)(a4 + 32);
  v30 = a1;
  v10 = 0;
  v11 = 0;
  v12 = (unint64_t)(63 - v5) >> 6;
  v31 = v12;
  v28 = v12 - 6;
  v26 = v12 - 1;
  v27 = a4 + 112;
  if (!v7)
    goto LABEL_8;
LABEL_7:
  v13 = __clz(__rbit64(v7));
  v7 &= v7 - 1;
  v14 = v13 | (v11 << 6);
  while (1)
  {
    ++v10;
    v18 = (uint64_t *)(*(_QWORD *)(a4 + 48) + 16 * v14);
    v20 = *v18;
    v19 = v18[1];
    sub_1B19F8F0C(*(_QWORD *)(a4 + 56) + 88 * v14, (uint64_t)v34);
    *(_QWORD *)&v33 = v20;
    *((_QWORD *)&v33 + 1) = v19;
    v42 = v35;
    v43 = v36;
    v21 = v37;
    v44 = v37;
    v40 = v34[1];
    v41 = v34[2];
    v38 = v33;
    v39 = v34[0];
    v22 = v36;
    *(_OWORD *)(v9 + 64) = v35;
    *(_OWORD *)(v9 + 80) = v22;
    *(_QWORD *)(v9 + 96) = v21;
    v23 = v39;
    *(_OWORD *)v9 = v38;
    *(_OWORD *)(v9 + 16) = v23;
    v24 = v41;
    *(_OWORD *)(v9 + 32) = v40;
    *(_OWORD *)(v9 + 48) = v24;
    if (v10 == a3)
    {
      swift_bridgeObjectRetain();
      v10 = a3;
      goto LABEL_32;
    }
    v9 += 104;
    swift_bridgeObjectRetain();
    if (v7)
      goto LABEL_7;
LABEL_8:
    v15 = v11 + 1;
    if ((uint64_t)(v11 + 1) >= v31)
    {
      v15 = v11;
      goto LABEL_31;
    }
    v16 = *(_QWORD *)(v32 + 8 * v15);
    if (!v16)
    {
      v17 = v11 + 2;
      if ((uint64_t)(v11 + 2) >= v31)
        goto LABEL_31;
      v16 = *(_QWORD *)(v32 + 8 * v17);
      if (v16)
        goto LABEL_12;
      v15 = v11 + 2;
      if ((uint64_t)(v11 + 3) >= v31)
        goto LABEL_31;
      v16 = *(_QWORD *)(v32 + 8 * (v11 + 3));
      if (v16)
      {
        v15 = v11 + 3;
        goto LABEL_16;
      }
      v17 = v11 + 4;
      v15 = v11 + 3;
      if ((uint64_t)(v11 + 4) >= v31)
        goto LABEL_31;
      v16 = *(_QWORD *)(v32 + 8 * v17);
      if (v16)
      {
LABEL_12:
        v15 = v17;
        goto LABEL_16;
      }
      v15 = v11 + 4;
      if ((uint64_t)(v11 + 5) >= v31)
        goto LABEL_31;
      v16 = *(_QWORD *)(v32 + 8 * (v11 + 5));
      v15 = v11 + 5;
      if (!v16)
        break;
    }
LABEL_16:
    v7 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v15 << 6);
    v11 = v15;
  }
  while (v28 != v11)
  {
    v16 = *(_QWORD *)(v27 + 8 * v11++);
    if (v16)
    {
      v15 = v11 + 5;
      goto LABEL_16;
    }
  }
  v15 = v26;
LABEL_31:
  v7 = 0;
  v11 = v15;
LABEL_32:
  v5 = v29;
  a1 = v30;
LABEL_33:
  *a1 = a4;
  a1[1] = v32;
  a1[2] = ~v5;
  a1[3] = v11;
  a1[4] = v7;
  return v10;
}

uint64_t sub_1B19F6B94(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  int64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  void *v20;
  id v21;
  id v22;
  uint64_t v24;

  v6 = a4 + 64;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 64);
  if (!a2)
  {
    v13 = 0;
    v10 = 0;
    goto LABEL_34;
  }
  v10 = a3;
  if (!a3)
  {
    v13 = 0;
    goto LABEL_34;
  }
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  v24 = a4 + 112;
  if (!v9)
    goto LABEL_8;
LABEL_7:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v13 << 6);
  while (1)
  {
    ++v12;
    v20 = *(void **)(*(_QWORD *)(a4 + 56) + 8 * v16);
    *v11 = v20;
    if (v12 == v10)
    {
      v22 = v20;
      goto LABEL_34;
    }
    ++v11;
    v21 = v20;
    if (v9)
      goto LABEL_7;
LABEL_8:
    v17 = v13 + 1;
    if (v13 + 1 >= v14)
    {
      v9 = 0;
      goto LABEL_33;
    }
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
    {
      v19 = v13 + 2;
      if (v13 + 2 >= v14)
        goto LABEL_30;
      v18 = *(_QWORD *)(v6 + 8 * v19);
      if (v18)
        goto LABEL_12;
      v17 = v13 + 3;
      if (v13 + 3 >= v14)
        goto LABEL_31;
      v18 = *(_QWORD *)(v6 + 8 * v17);
      if (!v18)
      {
        v19 = v13 + 4;
        if (v13 + 4 >= v14)
        {
LABEL_30:
          v9 = 0;
          v13 = v17;
          goto LABEL_33;
        }
        v18 = *(_QWORD *)(v6 + 8 * v19);
        if (v18)
        {
LABEL_12:
          v17 = v19;
          goto LABEL_15;
        }
        v17 = v13 + 5;
        if (v13 + 5 >= v14)
        {
LABEL_31:
          v9 = 0;
          v13 = v19;
          goto LABEL_33;
        }
        v18 = *(_QWORD *)(v6 + 8 * v17);
        if (!v18)
          break;
      }
    }
LABEL_15:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v13 = v17;
  }
  while (v14 - 6 != v13)
  {
    v18 = *(_QWORD *)(v24 + 8 * v13++);
    if (v18)
    {
      v17 = v13 + 5;
      goto LABEL_15;
    }
  }
  v9 = 0;
  v13 = v14 - 1;
LABEL_33:
  v10 = v12;
LABEL_34:
  *a1 = a4;
  a1[1] = v6;
  a1[2] = ~v7;
  a1[3] = v13;
  a1[4] = v9;
  return v10;
}

uint64_t sub_1B19F6D80(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  int64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v21;

  v6 = a4 + 64;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 64);
  if (!a2)
  {
    v13 = 0;
    v10 = 0;
    goto LABEL_34;
  }
  v10 = a3;
  if (!a3)
  {
    v13 = 0;
    goto LABEL_34;
  }
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  v21 = a4 + 112;
  if (!v9)
    goto LABEL_8;
LABEL_7:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v13 << 6);
  while (1)
  {
    ++v12;
    *v11 = *(_QWORD *)(*(_QWORD *)(a4 + 56) + 8 * v16);
    if (v12 == v10)
    {
      swift_retain();
      goto LABEL_34;
    }
    ++v11;
    swift_retain();
    if (v9)
      goto LABEL_7;
LABEL_8:
    v17 = v13 + 1;
    if (v13 + 1 >= v14)
    {
      v9 = 0;
      goto LABEL_33;
    }
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
    {
      v19 = v13 + 2;
      if (v13 + 2 >= v14)
        goto LABEL_30;
      v18 = *(_QWORD *)(v6 + 8 * v19);
      if (v18)
        goto LABEL_12;
      v17 = v13 + 3;
      if (v13 + 3 >= v14)
        goto LABEL_31;
      v18 = *(_QWORD *)(v6 + 8 * v17);
      if (!v18)
      {
        v19 = v13 + 4;
        if (v13 + 4 >= v14)
        {
LABEL_30:
          v9 = 0;
          v13 = v17;
          goto LABEL_33;
        }
        v18 = *(_QWORD *)(v6 + 8 * v19);
        if (v18)
        {
LABEL_12:
          v17 = v19;
          goto LABEL_15;
        }
        v17 = v13 + 5;
        if (v13 + 5 >= v14)
        {
LABEL_31:
          v9 = 0;
          v13 = v19;
          goto LABEL_33;
        }
        v18 = *(_QWORD *)(v6 + 8 * v17);
        if (!v18)
          break;
      }
    }
LABEL_15:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v13 = v17;
  }
  while (v14 - 6 != v13)
  {
    v18 = *(_QWORD *)(v21 + 8 * v13++);
    if (v18)
    {
      v17 = v13 + 5;
      goto LABEL_15;
    }
  }
  v9 = 0;
  v13 = v14 - 1;
LABEL_33:
  v10 = v12;
LABEL_34:
  *a1 = a4;
  a1[1] = v6;
  a1[2] = ~v7;
  a1[3] = v13;
  a1[4] = v9;
  return v10;
}

uint64_t sub_1B19F6F6C(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;

  v4 = a4 + 64;
  v5 = -1;
  v6 = -1 << *(_BYTE *)(a4 + 32);
  if (-v6 < 64)
    v5 = ~(-1 << -(char)v6);
  v7 = v5 & *(_QWORD *)(a4 + 64);
  if (!a2)
  {
    v9 = 0;
    a3 = 0;
    goto LABEL_31;
  }
  if (!a3)
  {
    v9 = 0;
    goto LABEL_31;
  }
  v8 = 0;
  v9 = 0;
  v10 = (unint64_t)(63 - v6) >> 6;
  while (v7)
  {
    v11 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    v12 = v11 | (v9 << 6);
LABEL_7:
    ++v8;
    v13 = *(_QWORD *)(a4 + 48) + 8 * v12;
    v14 = *(_DWORD *)v13;
    LOBYTE(v13) = *(_BYTE *)(v13 + 4);
    *(_DWORD *)a2 = v14;
    *(_BYTE *)(a2 + 4) = v13;
    a2 += 8;
    if (v8 == a3)
      goto LABEL_31;
  }
  v15 = v9 + 1;
  if (v9 + 1 >= v10)
  {
    v7 = 0;
    goto LABEL_30;
  }
  v16 = *(_QWORD *)(v4 + 8 * v15);
  if (v16)
  {
LABEL_16:
    v18 = __clz(__rbit64(v16));
    v7 = (v16 - 1) & v16;
    v12 = v18 + (v15 << 6);
    v9 = v15;
    goto LABEL_7;
  }
  v17 = v9 + 2;
  if (v9 + 2 >= v10)
    goto LABEL_27;
  v16 = *(_QWORD *)(v4 + 8 * v17);
  if (v16)
    goto LABEL_13;
  v15 = v9 + 3;
  if (v9 + 3 >= v10)
    goto LABEL_28;
  v16 = *(_QWORD *)(v4 + 8 * v15);
  if (v16)
    goto LABEL_16;
  v17 = v9 + 4;
  if (v9 + 4 >= v10)
  {
LABEL_27:
    v7 = 0;
    v9 = v15;
    goto LABEL_30;
  }
  v16 = *(_QWORD *)(v4 + 8 * v17);
  if (v16)
  {
LABEL_13:
    v15 = v17;
    goto LABEL_16;
  }
  v15 = v9 + 5;
  if (v9 + 5 >= v10)
  {
LABEL_28:
    v7 = 0;
    v9 = v17;
    goto LABEL_30;
  }
  v16 = *(_QWORD *)(v4 + 8 * v15);
  if (v16)
    goto LABEL_16;
  while (v10 - 6 != v9)
  {
    v16 = *(_QWORD *)(a4 + 112 + 8 * v9++);
    if (v16)
    {
      v15 = v9 + 5;
      goto LABEL_16;
    }
  }
  v7 = 0;
  v9 = v10 - 1;
LABEL_30:
  a3 = v8;
LABEL_31:
  *a1 = a4;
  a1[1] = v4;
  a1[2] = ~v6;
  a1[3] = v9;
  a1[4] = v7;
  return a3;
}

uint64_t sub_1B19F7100(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;

  v4 = a4 + 64;
  v5 = -1;
  v6 = -1 << *(_BYTE *)(a4 + 32);
  if (-v6 < 64)
    v5 = ~(-1 << -(char)v6);
  v7 = v5 & *(_QWORD *)(a4 + 64);
  if (!a2)
  {
    v9 = 0;
    a3 = 0;
    goto LABEL_31;
  }
  if (!a3)
  {
    v9 = 0;
    goto LABEL_31;
  }
  v8 = 0;
  v9 = 0;
  v10 = (unint64_t)(63 - v6) >> 6;
  while (v7)
  {
    v11 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    v12 = v11 | (v9 << 6);
LABEL_7:
    ++v8;
    *a2++ = *(_QWORD *)(*(_QWORD *)(a4 + 56) + 8 * v12);
    if (v8 == a3)
      goto LABEL_31;
  }
  v13 = v9 + 1;
  if (v9 + 1 >= v10)
  {
    v7 = 0;
    goto LABEL_30;
  }
  v14 = *(_QWORD *)(v4 + 8 * v13);
  if (v14)
  {
LABEL_16:
    v16 = __clz(__rbit64(v14));
    v7 = (v14 - 1) & v14;
    v12 = v16 + (v13 << 6);
    v9 = v13;
    goto LABEL_7;
  }
  v15 = v9 + 2;
  if (v9 + 2 >= v10)
    goto LABEL_27;
  v14 = *(_QWORD *)(v4 + 8 * v15);
  if (v14)
    goto LABEL_13;
  v13 = v9 + 3;
  if (v9 + 3 >= v10)
    goto LABEL_28;
  v14 = *(_QWORD *)(v4 + 8 * v13);
  if (v14)
    goto LABEL_16;
  v15 = v9 + 4;
  if (v9 + 4 >= v10)
  {
LABEL_27:
    v7 = 0;
    v9 = v13;
    goto LABEL_30;
  }
  v14 = *(_QWORD *)(v4 + 8 * v15);
  if (v14)
  {
LABEL_13:
    v13 = v15;
    goto LABEL_16;
  }
  v13 = v9 + 5;
  if (v9 + 5 >= v10)
  {
LABEL_28:
    v7 = 0;
    v9 = v15;
    goto LABEL_30;
  }
  v14 = *(_QWORD *)(v4 + 8 * v13);
  if (v14)
    goto LABEL_16;
  while (v10 - 6 != v9)
  {
    v14 = *(_QWORD *)(a4 + 112 + 8 * v9++);
    if (v14)
    {
      v13 = v9 + 5;
      goto LABEL_16;
    }
  }
  v7 = 0;
  v9 = v10 - 1;
LABEL_30:
  a3 = v8;
LABEL_31:
  *a1 = a4;
  a1[1] = v4;
  a1[2] = ~v6;
  a1[3] = v9;
  a1[4] = v7;
  return a3;
}

uint64_t sub_1B19F7280(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;

  v4 = a4 + 64;
  v5 = -1;
  v6 = -1 << *(_BYTE *)(a4 + 32);
  if (-v6 < 64)
    v5 = ~(-1 << -(char)v6);
  v7 = v5 & *(_QWORD *)(a4 + 64);
  if (!a2)
  {
    v9 = 0;
    a3 = 0;
    goto LABEL_31;
  }
  if (!a3)
  {
    v9 = 0;
    goto LABEL_31;
  }
  v8 = 0;
  v9 = 0;
  v10 = (unint64_t)(63 - v6) >> 6;
  while (v7)
  {
    v11 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    v12 = v11 | (v9 << 6);
LABEL_7:
    ++v8;
    *a2++ = *(_QWORD *)(*(_QWORD *)(a4 + 48) + 8 * v12);
    if (v8 == a3)
      goto LABEL_31;
  }
  v13 = v9 + 1;
  if (v9 + 1 >= v10)
  {
    v7 = 0;
    goto LABEL_30;
  }
  v14 = *(_QWORD *)(v4 + 8 * v13);
  if (v14)
  {
LABEL_16:
    v16 = __clz(__rbit64(v14));
    v7 = (v14 - 1) & v14;
    v12 = v16 + (v13 << 6);
    v9 = v13;
    goto LABEL_7;
  }
  v15 = v9 + 2;
  if (v9 + 2 >= v10)
    goto LABEL_27;
  v14 = *(_QWORD *)(v4 + 8 * v15);
  if (v14)
    goto LABEL_13;
  v13 = v9 + 3;
  if (v9 + 3 >= v10)
    goto LABEL_28;
  v14 = *(_QWORD *)(v4 + 8 * v13);
  if (v14)
    goto LABEL_16;
  v15 = v9 + 4;
  if (v9 + 4 >= v10)
  {
LABEL_27:
    v7 = 0;
    v9 = v13;
    goto LABEL_30;
  }
  v14 = *(_QWORD *)(v4 + 8 * v15);
  if (v14)
  {
LABEL_13:
    v13 = v15;
    goto LABEL_16;
  }
  v13 = v9 + 5;
  if (v9 + 5 >= v10)
  {
LABEL_28:
    v7 = 0;
    v9 = v15;
    goto LABEL_30;
  }
  v14 = *(_QWORD *)(v4 + 8 * v13);
  if (v14)
    goto LABEL_16;
  while (v10 - 6 != v9)
  {
    v14 = *(_QWORD *)(a4 + 112 + 8 * v9++);
    if (v14)
    {
      v13 = v9 + 5;
      goto LABEL_16;
    }
  }
  v7 = 0;
  v9 = v10 - 1;
LABEL_30:
  a3 = v8;
LABEL_31:
  *a1 = a4;
  a1[1] = v4;
  a1[2] = ~v6;
  a1[3] = v9;
  a1[4] = v7;
  return a3;
}

uint64_t sub_1B19F7400(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  int64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;

  v5 = a4 + 64;
  v6 = -1 << *(_BYTE *)(a4 + 32);
  if (-v6 < 64)
    v7 = ~(-1 << -(char)v6);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(a4 + 64);
  if (!a2)
  {
    v12 = 0;
    v9 = 0;
    goto LABEL_35;
  }
  v9 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_35;
  }
  v10 = a2;
  v28 = -1 << *(_BYTE *)(a4 + 32);
  v29 = a1;
  v11 = 0;
  v12 = 0;
  v13 = (unint64_t)(63 - v6) >> 6;
  v27 = a4 + 112;
  if (!v8)
    goto LABEL_8;
LABEL_7:
  v14 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  v15 = v14 | (v12 << 6);
  while (1)
  {
    ++v11;
    v19 = (uint64_t *)(*(_QWORD *)(a4 + 48) + 16 * v15);
    v20 = *v19;
    v21 = v19[1];
    v22 = (uint64_t *)(*(_QWORD *)(a4 + 56) + 24 * v15);
    v23 = *v22;
    v24 = v22[1];
    v25 = v22[2];
    *v10 = v20;
    v10[1] = v21;
    v10[2] = v23;
    v10[3] = v24;
    v10[4] = v25;
    if (v11 == v9)
    {
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_34;
    }
    v10 += 5;
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v8)
      goto LABEL_7;
LABEL_8:
    v16 = v12 + 1;
    if (v12 + 1 >= v13)
    {
      v8 = 0;
      goto LABEL_33;
    }
    v17 = *(_QWORD *)(v5 + 8 * v16);
    if (!v17)
    {
      v18 = v12 + 2;
      if (v12 + 2 >= v13)
        goto LABEL_30;
      v17 = *(_QWORD *)(v5 + 8 * v18);
      if (v17)
        goto LABEL_12;
      v16 = v12 + 3;
      if (v12 + 3 >= v13)
        goto LABEL_31;
      v17 = *(_QWORD *)(v5 + 8 * v16);
      if (!v17)
      {
        v18 = v12 + 4;
        if (v12 + 4 >= v13)
        {
LABEL_30:
          v8 = 0;
          v12 = v16;
          goto LABEL_33;
        }
        v17 = *(_QWORD *)(v5 + 8 * v18);
        if (v17)
        {
LABEL_12:
          v16 = v18;
          goto LABEL_15;
        }
        v16 = v12 + 5;
        if (v12 + 5 >= v13)
        {
LABEL_31:
          v8 = 0;
          v12 = v18;
          goto LABEL_33;
        }
        v17 = *(_QWORD *)(v5 + 8 * v16);
        if (!v17)
          break;
      }
    }
LABEL_15:
    v8 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v16 << 6);
    v12 = v16;
  }
  while (v13 - 6 != v12)
  {
    v17 = *(_QWORD *)(v27 + 8 * v12++);
    if (v17)
    {
      v16 = v12 + 5;
      goto LABEL_15;
    }
  }
  v8 = 0;
  v12 = v13 - 1;
LABEL_33:
  v9 = v11;
LABEL_34:
  v6 = v28;
  a1 = v29;
LABEL_35:
  *a1 = a4;
  a1[1] = v5;
  a1[2] = ~v6;
  a1[3] = v12;
  a1[4] = v8;
  return v9;
}

uint64_t sub_1B19F762C(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  int64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v23;

  v6 = a4 + 64;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 64);
  if (!a2)
  {
    v13 = 0;
    v10 = 0;
    goto LABEL_34;
  }
  v10 = a3;
  if (!a3)
  {
    v13 = 0;
    goto LABEL_34;
  }
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  v23 = a4 + 112;
  if (!v9)
    goto LABEL_8;
LABEL_7:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v13 << 6);
  while (1)
  {
    ++v12;
    v20 = (_QWORD *)(*(_QWORD *)(a4 + 48) + 16 * v16);
    v21 = v20[1];
    *v11 = *v20;
    v11[1] = v21;
    if (v12 == v10)
    {
      swift_bridgeObjectRetain();
      goto LABEL_34;
    }
    v11 += 2;
    swift_bridgeObjectRetain();
    if (v9)
      goto LABEL_7;
LABEL_8:
    v17 = v13 + 1;
    if (v13 + 1 >= v14)
    {
      v9 = 0;
      goto LABEL_33;
    }
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
    {
      v19 = v13 + 2;
      if (v13 + 2 >= v14)
        goto LABEL_30;
      v18 = *(_QWORD *)(v6 + 8 * v19);
      if (v18)
        goto LABEL_12;
      v17 = v13 + 3;
      if (v13 + 3 >= v14)
        goto LABEL_31;
      v18 = *(_QWORD *)(v6 + 8 * v17);
      if (!v18)
      {
        v19 = v13 + 4;
        if (v13 + 4 >= v14)
        {
LABEL_30:
          v9 = 0;
          v13 = v17;
          goto LABEL_33;
        }
        v18 = *(_QWORD *)(v6 + 8 * v19);
        if (v18)
        {
LABEL_12:
          v17 = v19;
          goto LABEL_15;
        }
        v17 = v13 + 5;
        if (v13 + 5 >= v14)
        {
LABEL_31:
          v9 = 0;
          v13 = v19;
          goto LABEL_33;
        }
        v18 = *(_QWORD *)(v6 + 8 * v17);
        if (!v18)
          break;
      }
    }
LABEL_15:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v13 = v17;
  }
  while (v14 - 6 != v13)
  {
    v18 = *(_QWORD *)(v23 + 8 * v13++);
    if (v18)
    {
      v17 = v13 + 5;
      goto LABEL_15;
    }
  }
  v9 = 0;
  v13 = v14 - 1;
LABEL_33:
  v10 = v12;
LABEL_34:
  *a1 = a4;
  a1[1] = v6;
  a1[2] = ~v7;
  a1[3] = v13;
  a1[4] = v9;
  return v10;
}

uint64_t sub_1B19F781C(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  int64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v23;

  v6 = a4 + 56;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 56);
  if (!a2)
  {
    v13 = 0;
    v10 = 0;
    goto LABEL_34;
  }
  v10 = a3;
  if (!a3)
  {
    v13 = 0;
    goto LABEL_34;
  }
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  v23 = a4 + 104;
  if (!v9)
    goto LABEL_8;
LABEL_7:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v13 << 6);
  while (1)
  {
    ++v12;
    v20 = (_QWORD *)(*(_QWORD *)(a4 + 48) + 16 * v16);
    v21 = v20[1];
    *v11 = *v20;
    v11[1] = v21;
    if (v12 == v10)
    {
      swift_retain();
      goto LABEL_34;
    }
    v11 += 2;
    swift_retain();
    if (v9)
      goto LABEL_7;
LABEL_8:
    v17 = v13 + 1;
    if (v13 + 1 >= v14)
    {
      v9 = 0;
      goto LABEL_33;
    }
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
    {
      v19 = v13 + 2;
      if (v13 + 2 >= v14)
        goto LABEL_30;
      v18 = *(_QWORD *)(v6 + 8 * v19);
      if (v18)
        goto LABEL_12;
      v17 = v13 + 3;
      if (v13 + 3 >= v14)
        goto LABEL_31;
      v18 = *(_QWORD *)(v6 + 8 * v17);
      if (!v18)
      {
        v19 = v13 + 4;
        if (v13 + 4 >= v14)
        {
LABEL_30:
          v9 = 0;
          v13 = v17;
          goto LABEL_33;
        }
        v18 = *(_QWORD *)(v6 + 8 * v19);
        if (v18)
        {
LABEL_12:
          v17 = v19;
          goto LABEL_15;
        }
        v17 = v13 + 5;
        if (v13 + 5 >= v14)
        {
LABEL_31:
          v9 = 0;
          v13 = v19;
          goto LABEL_33;
        }
        v18 = *(_QWORD *)(v6 + 8 * v17);
        if (!v18)
          break;
      }
    }
LABEL_15:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v13 = v17;
  }
  while (v14 - 6 != v13)
  {
    v18 = *(_QWORD *)(v23 + 8 * v13++);
    if (v18)
    {
      v17 = v13 + 5;
      goto LABEL_15;
    }
  }
  v9 = 0;
  v13 = v14 - 1;
LABEL_33:
  v10 = v12;
LABEL_34:
  *a1 = a4;
  a1[1] = v6;
  a1[2] = ~v7;
  a1[3] = v13;
  a1[4] = v9;
  return v10;
}

uint64_t sub_1B19F7A0C(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t result;

  v4 = *(_QWORD *)(a3 + 16);
  if (!v4)
    return a3;
  if (a3 + 32 >= (unint64_t)a1 + 16 * v4 || a3 + 32 + 16 * v4 <= (unint64_t)a1)
  {
    memcpy(a1, (const void *)(a3 + 32), 16 * v4);
    return a3;
  }
  result = sub_1B2229700();
  __break(1u);
  return result;
}

uint64_t sub_1B19F7AAC(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t result;

  v4 = *(_QWORD *)(a3 + 16);
  if (!v4)
    return a3;
  if (a3 + 32 >= a1 + 32 * v4 || a3 + 32 + 32 * v4 <= a1)
  {
    swift_arrayInitWithCopy();
    return a3;
  }
  result = sub_1B2229700();
  __break(1u);
  return result;
}

uint64_t sub_1B19F7B58(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t result;

  v4 = *(_QWORD *)(a3 + 16);
  if (!v4)
    return a3;
  if (a3 + 32 >= a1 + 16 * v4 || a3 + 32 + 16 * v4 <= a1)
  {
    swift_arrayInitWithCopy();
    return a3;
  }
  result = sub_1B2229700();
  __break(1u);
  return result;
}

uint64_t sub_1B19F7C04(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t result;

  v4 = *(_QWORD *)(a3 + 16);
  if (!v4)
    return a3;
  if (a3 + 32 >= (unint64_t)a1 + v4 || a3 + 32 + v4 <= (unint64_t)a1)
  {
    memcpy(a1, (const void *)(a3 + 32), *(_QWORD *)(a3 + 16));
    return a3;
  }
  result = sub_1B2229700();
  __break(1u);
  return result;
}

uint64_t sub_1B19F7CA4(unint64_t a1, uint64_t a2, unint64_t a3)
{
  return sub_1B19F7CEC(a1, a2, a3, &qword_1EEF58848, (uint64_t (*)(uint64_t))type metadata accessor for AuthoringNode, (unint64_t *)&unk_1EEF58850, (uint64_t (*)(_BYTE *, uint64_t, unint64_t, uint64_t, uint64_t))sub_1B1C6BB70);
}

uint64_t sub_1B19F7CC8(unint64_t a1, uint64_t a2, unint64_t a3)
{
  return sub_1B19F7CEC(a1, a2, a3, &qword_1EEF58830, (uint64_t (*)(uint64_t))type metadata accessor for Node, (unint64_t *)&unk_1EEF58838, (uint64_t (*)(_BYTE *, uint64_t, unint64_t, uint64_t, uint64_t))sub_1B1C6BB70);
}

uint64_t sub_1B19F7CEC(unint64_t a1, uint64_t a2, unint64_t a3, unint64_t *a4, uint64_t (*a5)(uint64_t), unint64_t *a6, uint64_t (*a7)(_BYTE *, uint64_t, unint64_t, uint64_t, uint64_t))
{
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t i;
  void (*v23)(_BYTE *, _QWORD);
  uint64_t *v24;
  uint64_t v25;
  uint64_t result;
  _BYTE v27[32];

  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    v18 = sub_1B22296AC();
    swift_bridgeObjectRelease();
    if (v18)
    {
      swift_bridgeObjectRetain();
      sub_1B22296AC();
      swift_bridgeObjectRelease();
      sub_1B1791524(0, a4, a5, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
      v20 = v19;
      v21 = sub_1B19F9050(a6, a4, a5);
      swift_bridgeObjectRetain();
      for (i = 0; i != v18; ++i)
      {
        v23 = (void (*)(_BYTE *, _QWORD))a7(v27, i, a3, v20, v21);
        v25 = *v24;
        swift_retain();
        v23(v27, 0);
        *(_QWORD *)(a1 + 8 * i) = v25;
      }
      swift_bridgeObjectRelease();
    }
    return a3;
  }
  v10 = a3 & 0xFFFFFFFFFFFFFF8;
  v11 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v11)
    return a3;
  v12 = v10 + 32;
  v13 = v10 + 32 + 8 * v11;
  if (v12 >= a1 + 8 * v11 || v13 <= a1)
  {
    a5(0);
    swift_arrayInitWithCopy();
    return a3;
  }
  result = sub_1B2229700();
  __break(1u);
  return result;
}

uint64_t sub_1B19F7EC8(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t result;

  v4 = *(_QWORD *)(a3 + 16);
  if (!v4)
    return a3;
  if (a3 + 32 >= a1 + 48 * v4 || a3 + 32 + 48 * v4 <= a1)
  {
    swift_arrayInitWithCopy();
    return a3;
  }
  result = sub_1B2229700();
  __break(1u);
  return result;
}

uint64_t sub_1B19F7F78(unint64_t a1, uint64_t a2, unint64_t a3)
{
  return sub_1B19F7CEC(a1, a2, a3, &qword_1EEF58890, (uint64_t (*)(uint64_t))type metadata accessor for EntityFamily, &qword_1EEF58898, (uint64_t (*)(_BYTE *, uint64_t, unint64_t, uint64_t, uint64_t))sub_1B1C6BBC8);
}

uint64_t sub_1B19F7F9C(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t result;

  v4 = *(_QWORD *)(a3 + 16);
  if (!v4)
    return a3;
  if (a3 + 32 >= a1 + 32 * v4 || a3 + 32 + 32 * v4 <= a1)
  {
    sub_1B19F8F98();
    swift_arrayInitWithCopy();
    return a3;
  }
  result = sub_1B2229700();
  __break(1u);
  return result;
}

uint64_t sub_1B19F8060(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t result;

  v4 = *(_QWORD *)(a3 + 16);
  if (!v4)
    return a3;
  if (a3 + 32 >= (unint64_t)a1 + 24 * v4 || a3 + 32 + 24 * v4 <= (unint64_t)a1)
  {
    memcpy(a1, (const void *)(a3 + 32), 24 * v4);
    return a3;
  }
  result = sub_1B2229700();
  __break(1u);
  return result;
}

uint64_t sub_1B19F8104(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t result;

  v4 = *(_QWORD *)(a3 + 16);
  if (!v4)
    return a3;
  if (a3 + 32 >= a1 + 112 * v4 || a3 + 32 + 112 * v4 <= a1)
  {
    swift_arrayInitWithCopy();
    return a3;
  }
  result = sub_1B2229700();
  __break(1u);
  return result;
}

uint64_t sub_1B19F81B4(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t result;

  v4 = *(_QWORD *)(a3 + 16);
  if (!v4)
    return a3;
  if (a3 + 32 >= a1 + 24 * v4 || a3 + 32 + 24 * v4 <= a1)
  {
    swift_arrayInitWithCopy();
    return a3;
  }
  result = sub_1B2229700();
  __break(1u);
  return result;
}

uint64_t sub_1B19F8264(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t result;

  v4 = *(_QWORD *)(a3 + 16);
  if (!v4)
    return a3;
  if (a3 + 32 >= a1 + 32 * v4 || a3 + 32 + 32 * v4 <= a1)
  {
    swift_arrayInitWithCopy();
    return a3;
  }
  result = sub_1B2229700();
  __break(1u);
  return result;
}

uint64_t sub_1B19F8310(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t result;

  v4 = *(_QWORD *)(a3 + 16);
  if (!v4)
    return a3;
  if (a3 + 32 >= a1 + 40 * v4 || a3 + 32 + 40 * v4 <= a1)
  {
    swift_arrayInitWithCopy();
    return a3;
  }
  result = sub_1B2229700();
  __break(1u);
  return result;
}

uint64_t sub_1B19F83C0(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t result;

  v4 = *(_QWORD *)(a3 + 16);
  if (!v4)
    return a3;
  if (a3 + 32 >= a1 + 48 * v4 || a3 + 32 + 48 * v4 <= a1)
  {
    swift_arrayInitWithCopy();
    return a3;
  }
  result = sub_1B2229700();
  __break(1u);
  return result;
}

uint64_t sub_1B19F8470(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t result;

  v4 = *(_QWORD *)(a3 + 16);
  if (!v4)
    return a3;
  if (a3 + 32 >= a1 + 8 * v4 || a3 + 32 + 8 * v4 <= a1)
  {
    swift_arrayInitWithCopy();
    return a3;
  }
  result = sub_1B2229700();
  __break(1u);
  return result;
}

uint64_t sub_1B19F8514(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t result;

  v4 = *(_QWORD *)(a3 + 16);
  if (!v4)
    return a3;
  if (a3 + 32 >= a1 + 56 * v4 || a3 + 32 + 56 * v4 <= a1)
  {
    swift_arrayInitWithCopy();
    return a3;
  }
  result = sub_1B2229700();
  __break(1u);
  return result;
}

uint64_t sub_1B19F85C4(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t result;

  v4 = *(_QWORD *)(a3 + 16);
  if (!v4)
    return a3;
  if (a3 + 32 >= a1 + 96 * v4 || a3 + 32 + 96 * v4 <= a1)
  {
    swift_arrayInitWithCopy();
    return a3;
  }
  result = sub_1B2229700();
  __break(1u);
  return result;
}

uint64_t sub_1B19F8674(unint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  uint64_t v5;
  uint64_t result;

  v5 = *(_QWORD *)(a3 + 16);
  if (!v5)
    return a3;
  if (a3 + 32 >= a1 + 16 * v5 || a3 + 32 + 16 * v5 <= a1)
  {
    sub_1B19F900C(0, a4);
    swift_arrayInitWithCopy();
    return a3;
  }
  result = sub_1B2229700();
  __break(1u);
  return result;
}

uint64_t sub_1B19F8740(unint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v10;
  uint64_t i;
  uint64_t (*v12)();
  uint64_t *v13;
  uint64_t v14;
  uint64_t result;
  uint64_t *v16[4];

  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    v10 = sub_1B22296AC();
    swift_bridgeObjectRelease();
    if (v10)
    {
      swift_bridgeObjectRetain();
      sub_1B22296AC();
      swift_bridgeObjectRelease();
      sub_1B19F8D38(0, &qword_1EEF58878, (unint64_t *)&qword_1ED4B7A00);
      sub_1B19F8D8C((unint64_t *)&unk_1EEF58880, &qword_1EEF58878, (unint64_t *)&qword_1ED4B7A00);
      swift_bridgeObjectRetain();
      for (i = 0; i != v10; ++i)
      {
        v12 = sub_1B1C6BC1C(v16, i, a3);
        v14 = *v13;
        swift_unknownObjectRetain();
        ((void (*)(uint64_t **, _QWORD))v12)(v16, 0);
        *(_QWORD *)(a1 + 8 * i) = v14;
      }
      swift_bridgeObjectRelease();
    }
    return a3;
  }
  v5 = a3 & 0xFFFFFFFFFFFFFF8;
  v6 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v6)
    return a3;
  v7 = v5 + 32;
  v8 = v5 + 32 + 8 * v6;
  if (v7 >= a1 + 8 * v6 || v8 <= a1)
  {
    sub_1B19F8F48(0, (unint64_t *)&qword_1ED4B7A00);
    swift_arrayInitWithCopy();
    return a3;
  }
  result = sub_1B2229700();
  __break(1u);
  return result;
}

uint64_t sub_1B19F8938(unint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v10;
  uint64_t i;
  uint64_t (*v12)();
  uint64_t *v13;
  uint64_t v14;
  uint64_t result;
  uint64_t *v16[4];

  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    v10 = sub_1B22296AC();
    swift_bridgeObjectRelease();
    if (v10)
    {
      swift_bridgeObjectRetain();
      sub_1B22296AC();
      swift_bridgeObjectRelease();
      sub_1B19F8D38(0, &qword_1EEF58820, (unint64_t *)&qword_1ED4BA670);
      sub_1B19F8D8C(&qword_1EEF58828, &qword_1EEF58820, (unint64_t *)&qword_1ED4BA670);
      swift_bridgeObjectRetain();
      for (i = 0; i != v10; ++i)
      {
        v12 = sub_1B1C6BC70(v16, i, a3);
        v14 = *v13;
        swift_unknownObjectRetain();
        ((void (*)(uint64_t **, _QWORD))v12)(v16, 0);
        *(_QWORD *)(a1 + 8 * i) = v14;
      }
      swift_bridgeObjectRelease();
    }
    return a3;
  }
  v5 = a3 & 0xFFFFFFFFFFFFFF8;
  v6 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v6)
    return a3;
  v7 = v5 + 32;
  v8 = v5 + 32 + 8 * v6;
  if (v7 >= a1 + 8 * v6 || v8 <= a1)
  {
    sub_1B19F8F48(0, (unint64_t *)&qword_1ED4BA670);
    swift_arrayInitWithCopy();
    return a3;
  }
  result = sub_1B2229700();
  __break(1u);
  return result;
}

uint64_t sub_1B19F8B30(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t result;

  v4 = *(_QWORD *)(a3 + 16);
  if (!v4)
    return a3;
  v6 = *(_QWORD *)(type metadata accessor for EdgeCoder(0) - 8);
  v7 = a3 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  v8 = *(_QWORD *)(v6 + 72) * v4;
  v9 = a1 + v8;
  v10 = v7 + v8;
  if (v7 >= v9 || v10 <= a1)
  {
    swift_arrayInitWithCopy();
    return a3;
  }
  result = sub_1B2229700();
  __break(1u);
  return result;
}

uint64_t sub_1B19F8C04(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  if ((~a4 & 0xFC) != 0)
    return sub_1B19F8C18(a1, a2, a3, a4);
  return a1;
}

uint64_t sub_1B19F8C18(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  unsigned int v4;
  uint64_t result;

  v4 = a4 >> 6;
  if (v4 == 2)
    return swift_retain();
  if (v4 <= 1)
    return sub_1B19F8C48(a2);
  return result;
}

uint64_t sub_1B19F8C48(uint64_t result)
{
  if (result)
    return swift_retain();
  return result;
}

_QWORD *sub_1B19F8C58(_QWORD *a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  a2(*a1, a1[1], a1[2], a1[3], a1[4]);
  return a1;
}

uint64_t sub_1B19F8C8C(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  if ((~a4 & 0xFC) != 0)
    return sub_1B19F8CA0(a1, a2, a3, a4);
  return a1;
}

uint64_t sub_1B19F8CA0(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  unsigned int v4;
  uint64_t result;

  v4 = a4 >> 6;
  if (v4 == 2)
    return swift_release();
  if (v4 <= 1)
    return sub_1B19E5A18(a2);
  return result;
}

unint64_t sub_1B19F8CD0(unint64_t result)
{
  switch(result >> 61)
  {
    case 0uLL:
    case 1uLL:
    case 2uLL:
    case 3uLL:
      result = swift_retain();
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_1B19F8D00(unint64_t result)
{
  switch(result >> 61)
  {
    case 0uLL:
    case 1uLL:
    case 2uLL:
    case 3uLL:
      result = swift_release();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1B19F8D30()
{
  return swift_release();
}

void sub_1B19F8D38(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    sub_1B19F8F48(255, a3);
    v4 = sub_1B2228B6C();
    if (!v5)
      atomic_store(v4, a2);
  }
}

uint64_t sub_1B19F8D8C(unint64_t *a1, unint64_t *a2, unint64_t *a3)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    sub_1B19F8D38(255, a2, a3);
    result = MEMORY[0x1B5E23E74](MEMORY[0x1E0DEAF50], v5);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1B19F8DCC()
{
  unint64_t result;

  result = qword_1ED4B7B00;
  if (!qword_1ED4B7B00)
  {
    result = MEMORY[0x1B5E23E74](MEMORY[0x1E0DEB1D0], MEMORY[0x1E0DEB188]);
    atomic_store(result, (unint64_t *)&qword_1ED4B7B00);
  }
  return result;
}

unint64_t sub_1B19F8E10()
{
  unint64_t result;

  result = qword_1ED4BB038;
  if (!qword_1ED4BB038)
  {
    result = MEMORY[0x1B5E23E74](MEMORY[0x1E0DEDB88], MEMORY[0x1E0DEDB58]);
    atomic_store(result, (unint64_t *)&qword_1ED4BB038);
  }
  return result;
}

void sub_1B19F8E54(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  if (!*a2)
  {
    v9 = a3();
    v10 = a5(a1, a4, v9);
    if (!v11)
      atomic_store(v10, a2);
  }
}

void sub_1B19F8EB0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    v7 = a3(255);
    v9 = type metadata accessor for ScriptRuntime(a1, v7, a4, v8);
    if (!v10)
      atomic_store(v9, a2);
  }
}

uint64_t sub_1B19F8F0C(uint64_t a1, uint64_t a2)
{
  _s8MetadataVwcp(a2, a1);
  return a2;
}

uint64_t sub_1B19F8F48(uint64_t a1, unint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, a2);
  }
  return result;
}

void sub_1B19F8F98()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_1ED4BA588)
  {
    sub_1B19F900C(255, &qword_1ED4BA580);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1ED4BA588);
  }
}

void sub_1B19F900C(uint64_t a1, unint64_t *a2)
{
  unint64_t v3;
  uint64_t v4;

  if (!*a2)
  {
    v3 = sub_1B2229124();
    if (!v4)
      atomic_store(v3, a2);
  }
}

uint64_t sub_1B19F9050(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    sub_1B1791524(255, a2, a3, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
    result = MEMORY[0x1B5E23E74](MEMORY[0x1E0DEAF50], v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1B19F90A0()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v14;
  char v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  char v27;
  char v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v38;
  uint64_t v39[2];
  uint64_t v40;
  unint64_t v41;
  _QWORD v42[5];
  _QWORD v43[5];
  _QWORD v44[5];
  _QWORD v45[5];
  char v46[8];
  unint64_t v47;
  uint64_t v48;
  char v49[8];
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;

  v1 = v0;
  v2 = *(_QWORD *)(v0 + 56);
  if (!(v2 >> 62))
  {
    v3 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    v38 = v0;
    if (v3)
      goto LABEL_3;
LABEL_12:
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
  swift_bridgeObjectRetain();
  v3 = sub_1B22296AC();
  v38 = v0;
  if (!v3)
    goto LABEL_12;
LABEL_3:
  v55 = MEMORY[0x1E0DEE9D8];
  sub_1B2029FFC(0, v3 & ~(v3 >> 63), 0);
  v4 = 0;
  v5 = v55;
  do
  {
    if ((v2 & 0xC000000000000001) != 0)
    {
      v6 = MEMORY[0x1B5E21018](v4, v2);
    }
    else
    {
      v6 = *(_QWORD *)(v2 + 8 * v4 + 32);
      swift_retain();
    }
    v8 = *(_QWORD *)(v6 + 24);
    v7 = *(_QWORD *)(v6 + 32);
    swift_bridgeObjectRetain();
    swift_release();
    v55 = v5;
    v10 = *(_QWORD *)(v5 + 16);
    v9 = *(_QWORD *)(v5 + 24);
    if (v10 >= v9 >> 1)
    {
      sub_1B2029FFC(v9 > 1, v10 + 1, 1);
      v5 = v55;
    }
    ++v4;
    *(_QWORD *)(v5 + 16) = v10 + 1;
    v11 = v5 + 16 * v10;
    *(_QWORD *)(v11 + 32) = v8;
    *(_QWORD *)(v11 + 40) = v7;
  }
  while (v3 != v4);
  swift_bridgeObjectRelease();
  v1 = v38;
LABEL_13:
  sub_1B19FA1DC();
  sub_1B19FA230();
  sub_1B2228644();
  swift_bridgeObjectRelease();
  v55 = 0x5B203D2074756FLL;
  v56 = 0xE700000000000000;
  sub_1B2228890();
  sub_1B2228890();
  v12 = *(_QWORD *)(v1 + 136);
  swift_retain();
  swift_bridgeObjectRetain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v55 = *(_QWORD *)(v12 + 216);
  *(_QWORD *)(v12 + 216) = 0x8000000000000000;
  sub_1B1B84788(0x5B203D2074756FLL, 0xE700000000000000, 0x7466697773, 0xE500000000000000, isUniquelyReferenced_nonNull_native);
  *(_QWORD *)(v12 + 216) = v55;
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  v14 = v1 + 144;
  sub_1B19FA278(v1 + 144, (uint64_t)v45);
  sub_1B19FA278((uint64_t)v45, (uint64_t)v46);
  if (v47 >= 0x3B)
  {
    if (!*(_QWORD *)(v48 + 16))
      goto LABEL_30;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1B1DC3C04(1u);
    v15 = v16;
  }
  else
  {
    sub_1B19F8C58(v45, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19FA2B4);
    v15 = sub_1B1C46718((uint64_t)v45);
  }
  sub_1B19F8C58(v45, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19F9FEC);
  if ((v15 & 1) != 0)
  {
    v55 = 0;
    v56 = 0xE000000000000000;
    sub_1B2229430();
    swift_bridgeObjectRelease();
    v55 = 0x20646165726874;
    v56 = 0xE700000000000000;
    sub_1B19FA278(v1 + 144, (uint64_t)v44);
    sub_1B19FA278((uint64_t)v44, (uint64_t)v49);
    if (v50 >= 0x3B)
    {
      v18 = *(_QWORD *)(v51 + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v18 && (sub_1B1DC3C04(1u), (v19 & 1) != 0))
      {
        swift_bridgeObjectRetain();
        sub_1B19F8C58(v44, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19F9FEC);
      }
      else
      {
        if (qword_1ED4BF430 != -1)
          swift_once();
        v52 = 0;
        v53 = 0xE000000000000000;
        swift_retain();
        sub_1B2229430();
        swift_bridgeObjectRelease();
        v52 = 0xD00000000000001BLL;
        v53 = 0x80000001B232B900;
        swift_bridgeObjectRetain();
        sub_1B2228890();
        swift_bridgeObjectRelease();
        sub_1B2228890();
        sub_1B2228890();
        v20 = v52;
        v21 = v53;
        v22 = sub_1B2228E9C();
        if (qword_1ED4BF658 != -1)
          swift_once();
        v52 = 0;
        swift_retain();
        sub_1B1F1AD70(v22, &v52, v20, v21);
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        sub_1B19F8C58(v44, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19F9FEC);
      }
      v17 = v38;
    }
    else
    {
      sub_1B19F8C58(v44, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19FA2B4);
      sub_1B1C45B38((uint64_t)v44);
      sub_1B19F8C58(v44, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19F9FEC);
      v17 = v38;
    }
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    sub_1B2228890();
    sub_1B2228890();
    v23 = v55;
    v24 = v56;
    v25 = *(_QWORD *)(v17 + 136);
    swift_retain();
    swift_bridgeObjectRetain();
    v26 = swift_isUniquelyReferenced_nonNull_native();
    v55 = *(_QWORD *)(v25 + 216);
    *(_QWORD *)(v25 + 216) = 0x8000000000000000;
    sub_1B1B84788(v23, v24, 0x6C6174656DLL, 0xE500000000000000, v26);
    *(_QWORD *)(v25 + 216) = v55;
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
  }
LABEL_30:
  sub_1B19FA278(v14, (uint64_t)v43);
  sub_1B19FA278((uint64_t)v43, (uint64_t)&v52);
  if (v53 >= 0x3B)
  {
    if (!*(_QWORD *)(v54 + 16))
      return swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1B1DC3C04(0);
    v27 = v28;
  }
  else
  {
    sub_1B19F8C58(v43, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19FA2B4);
    v27 = sub_1B1C46734((uint64_t)v43);
  }
  sub_1B19F8C58(v43, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19F9FEC);
  if ((v27 & 1) == 0)
    return swift_bridgeObjectRelease();
  v55 = 0;
  v56 = 0xE000000000000000;
  sub_1B2229430();
  v40 = v55;
  v41 = v56;
  sub_1B19FA278(v14, (uint64_t)v42);
  sub_1B19FA278((uint64_t)v42, (uint64_t)&v55);
  if (v56 >= 0x3B)
  {
    v29 = *(_QWORD *)(v57 + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (!v29 || (sub_1B1DC3C04(1u), (v30 & 1) == 0))
    {
      v31 = v38;
      if (qword_1ED4BF430 != -1)
        swift_once();
      swift_retain();
      sub_1B2229430();
      swift_bridgeObjectRelease();
      v39[1] = 0x80000001B232B900;
      swift_bridgeObjectRetain();
      sub_1B2228890();
      swift_bridgeObjectRelease();
      sub_1B2228890();
      sub_1B2228890();
      v32 = sub_1B2228E9C();
      if (qword_1ED4BF658 != -1)
        swift_once();
      v39[0] = 0;
      swift_retain();
      sub_1B1F1AD70(v32, v39, 0xD00000000000001BLL, 0x80000001B232B900);
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      sub_1B19F8C58(v42, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19F9FEC);
      goto LABEL_47;
    }
    swift_bridgeObjectRetain();
  }
  else
  {
    sub_1B19F8C58(v42, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19FA2B4);
    sub_1B1C45B38((uint64_t)v42);
  }
  sub_1B19F8C58(v42, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19F9FEC);
  v31 = v38;
LABEL_47:
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  v33 = v40;
  v34 = v41;
  v35 = *(_QWORD *)(v31 + 136);
  swift_retain();
  swift_bridgeObjectRetain();
  v36 = swift_isUniquelyReferenced_nonNull_native();
  v40 = *(_QWORD *)(v35 + 216);
  *(_QWORD *)(v35 + 216) = 0x8000000000000000;
  sub_1B1B84788(v33, v34, 99, 0xE100000000000000, v36);
  *(_QWORD *)(v35 + 216) = v40;
  swift_bridgeObjectRelease();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B19F9A54()
{
  sub_1B222A06C();
  sub_1B2228824();
  return sub_1B222A0C0();
}

uint64_t sub_1B19F9A9C()
{
  return sub_1B2228824();
}

uint64_t sub_1B19F9AAC()
{
  sub_1B222A06C();
  sub_1B2228824();
  return sub_1B222A0C0();
}

uint64_t sub_1B19F9AF0@<X0>(BOOL *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = sub_1B2229730();
  result = swift_bridgeObjectRelease();
  *a1 = v2 != 0;
  return result;
}

void sub_1B19F9B40(_QWORD *a1@<X8>)
{
  *a1 = 1701869940;
  a1[1] = 0xE400000000000000;
}

uint64_t sub_1B19F9B54()
{
  return 1701869940;
}

uint64_t sub_1B19F9B64@<X0>(BOOL *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = sub_1B2229730();
  result = swift_bridgeObjectRelease();
  *a1 = v2 != 0;
  return result;
}

uint64_t sub_1B19F9BB8()
{
  return 0;
}

void sub_1B19F9BC4(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_1B19F9BD0()
{
  sub_1B19FA02C();
  return sub_1B222A1D4();
}

uint64_t sub_1B19F9BF8()
{
  sub_1B19FA02C();
  return sub_1B222A1E0();
}

_QWORD *sub_1B19F9C20(_QWORD *a1)
{
  swift_allocObject();
  return sub_1B19F9C68(a1);
}

_QWORD *sub_1B19F9C68(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  _QWORD *v11;
  uint64_t v13;
  __int128 v14;
  _OWORD v15[2];
  uint64_t v16;

  v3 = v1;
  sub_1B19FA0D8(0, &qword_1EEF588B8, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED048]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = (char *)v15 - v9;
  v11 = sub_1B19FA070(a1, a1[3]);
  sub_1B19FA02C();
  swift_retain();
  sub_1B222A150();
  if (v2)
  {
    swift_release();
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
    _s17TypedArraySnippetCMa();
    swift_deallocPartialClassInstance();
  }
  else
  {
    sub_1B19FA154();
    sub_1B2229814();
    v13 = v16;
    v14 = v15[1];
    *(_OWORD *)(v3 + 144) = v15[0];
    *(_OWORD *)(v3 + 160) = v14;
    *(_QWORD *)(v3 + 176) = v13;
    swift_release();
    sub_1B19FA198((uint64_t)a1, (uint64_t)v15);
    v11 = sub_1B1BB6354(v15);
    swift_retain();
    sub_1B1FB69EC();
    sub_1B19F90A0();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
    swift_release();
  }
  return v11;
}

uint64_t sub_1B19F9E50(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t result;
  uint64_t v11;
  __int128 v12;
  _OWORD v13[2];
  uint64_t v14;

  sub_1B19FA0D8(0, &qword_1EEF588A0, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED170]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v7);
  v9 = (char *)v13 - v8;
  result = sub_1B1BB65DC(a1);
  if (!v2)
  {
    sub_1B19FA070(a1, a1[3]);
    sub_1B19FA02C();
    sub_1B222A180();
    v11 = *(_QWORD *)(v1 + 176);
    v12 = *(_OWORD *)(v1 + 160);
    v13[0] = *(_OWORD *)(v1 + 144);
    v13[1] = v12;
    v14 = v11;
    sub_1B19FA094();
    sub_1B2229958();
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  }
  return result;
}

uint64_t sub_1B19F9F78()
{
  uint64_t v0;

  return sub_1B19F9FEC(*(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 152));
}

uint64_t sub_1B19F9F88()
{
  uint64_t v0;

  v0 = sub_1B1FBAA08();
  swift_release();
  sub_1B19F9FEC(*(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 152));
  return swift_deallocClassInstance();
}

uint64_t _s17TypedArraySnippetCMa()
{
  return objc_opt_self();
}

uint64_t sub_1B19F9FEC(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >= 0x3B)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

unint64_t sub_1B19FA02C()
{
  unint64_t result;

  result = qword_1EEF588A8;
  if (!qword_1EEF588A8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B226CF10, &_s17TypedArraySnippetC10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EEF588A8);
  }
  return result;
}

_QWORD *sub_1B19FA070(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

unint64_t sub_1B19FA094()
{
  unint64_t result;

  result = qword_1EEF588B0;
  if (!qword_1EEF588B0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22961FC, &_s12MetadataTypeON);
    atomic_store(result, (unint64_t *)&qword_1EEF588B0);
  }
  return result;
}

void sub_1B19FA0D8(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_1B19FA02C();
    v7 = a3(a1, &_s17TypedArraySnippetC10CodingKeysON, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 24) - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release();
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

unint64_t sub_1B19FA154()
{
  unint64_t result;

  result = qword_1ED4BB390;
  if (!qword_1ED4BB390)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2296224, &_s12MetadataTypeON);
    atomic_store(result, (unint64_t *)&qword_1ED4BB390);
  }
  return result;
}

uint64_t sub_1B19FA198(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

void sub_1B19FA1DC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED4BA490)
  {
    v0 = sub_1B2228B6C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED4BA490);
  }
}

unint64_t sub_1B19FA230()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1ED4BA4A0;
  if (!qword_1ED4BA4A0)
  {
    sub_1B19FA1DC();
    result = MEMORY[0x1B5E23E74](MEMORY[0x1E0DEAF20], v1);
    atomic_store(result, (unint64_t *)&qword_1ED4BA4A0);
  }
  return result;
}

uint64_t sub_1B19FA278(uint64_t a1, uint64_t a2)
{
  initializeWithTake for Query(a2, a1);
  return a2;
}

uint64_t sub_1B19FA2B4(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >= 0x3B)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t _s17TypedArraySnippetC10CodingKeysOwet(unsigned int *a1, int a2)
{
  int v2;
  int v3;

  if (!a2)
    return 0;
  if ((a2 + 1) >= 0x10000)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) < 0x100)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
    return *a1;
  if (v3 == 2)
    return *(unsigned __int16 *)a1;
  return *(unsigned __int8 *)a1;
}

uint64_t _s17TypedArraySnippetC10CodingKeysOwst(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1B19FA388 + 4 * byte_1B226CDE0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1B19FA3A8 + 4 * byte_1B226CDE5[v4]))();
}

_BYTE *sub_1B19FA388(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1B19FA3A8(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1B19FA3B0(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1B19FA3B8(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1B19FA3C0(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1B19FA3C8(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *_s17TypedArraySnippetC10CodingKeysOMa()
{
  return &_s17TypedArraySnippetC10CodingKeysON;
}

unint64_t sub_1B19FA3E8()
{
  unint64_t result;

  result = qword_1EEF588C0;
  if (!qword_1EEF588C0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B226CEE8, &_s17TypedArraySnippetC10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EEF588C0);
  }
  return result;
}

unint64_t sub_1B19FA430()
{
  unint64_t result;

  result = qword_1EEF588C8;
  if (!qword_1EEF588C8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B226CE20, &_s17TypedArraySnippetC10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EEF588C8);
  }
  return result;
}

unint64_t sub_1B19FA478()
{
  unint64_t result;

  result = qword_1EEF588D0;
  if (!qword_1EEF588D0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B226CE48, &_s17TypedArraySnippetC10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EEF588D0);
  }
  return result;
}

uint64_t sub_1B19FA4BC(uint64_t result, uint64_t a2, uint64_t a3)
{
  char v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (a2 != result)
  {
    v4 = a2;
    v5 = result;
    v6 = result >> 6;
    v7 = a2 >> 6;
    if (a2 >> 6 == result >> 6)
    {
      v8 = (-1 << a2) ^ (-1 << result);
      v7 = result >> 6;
    }
    else
    {
      if ((a2 >> 6) - (result >> 6) >= 2)
        result = (uint64_t)memset((void *)(a3 + 8 * v6 + 8), 255, 8 * (v7 + ~v6));
      v8 = ~(-1 << v4);
      *(_QWORD *)(a3 + 8 * v6) |= -1 << v5;
    }
    *(_QWORD *)(a3 + 8 * v7) |= v8;
  }
  return result;
}

uint64_t sub_1B19FA574(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (a2 != result)
  {
    v3 = *(_QWORD *)(a3 + (((unint64_t)(a2 - 1) >> 3) & 0xFFFFFFFFFFFFF8)) & (1 << (a2 - 1));
    if (result + 1 != a2)
    {
      v4 = a2 - 2;
      do
      {
        v7 = 1 << (v4 + 1);
        v8 = 8 * ((uint64_t)(v4 + 1) >> 6);
        if (((*(_QWORD *)(a3 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
          v5 = *(_QWORD *)(a3 + v8) | v7;
        else
          v5 = *(_QWORD *)(a3 + v8) & ~v7;
        *(_QWORD *)(a3 + v8) = v5;
        v6 = v4-- + 1;
      }
      while (v6 != result + 1);
    }
    v9 = result >> 6;
    v10 = 1 << result;
    if (v3)
    {
      v11 = 8 * v9;
      v12 = *(_QWORD *)(a3 + 8 * v9) | v10;
    }
    else
    {
      v11 = 8 * v9;
      v12 = *(_QWORD *)(a3 + 8 * v9) & ~v10;
    }
    *(_QWORD *)(a3 + v11) = v12;
  }
  return result;
}

uint64_t sub_1B19FA630(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (result != a2)
  {
    v3 = result >> 6;
    v4 = 8 * (a2 >> 6);
    v5 = *(_QWORD *)(a3 + v4);
    v6 = 1 << result;
    if ((*(_QWORD *)(a3 + 8 * (result >> 6)) & (1 << result)) != 0)
      v7 = v5 | (1 << a2);
    else
      v7 = v5 & ~(1 << a2);
    *(_QWORD *)(a3 + v4) = v7;
    if ((v5 & (1 << a2)) != 0)
      v8 = *(_QWORD *)(a3 + 8 * v3) | v6;
    else
      v8 = *(_QWORD *)(a3 + 8 * v3) & ~v6;
    *(_QWORD *)(a3 + 8 * v3) = v8;
  }
  return result;
}

BOOL sub_1B19FA690(_QWORD *a1, uint64_t a2)
{
  _BOOL8 result;
  unint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;

  if (a2 + 63 <= 127)
  {
    if (*a1)
      return 0;
    v3 = 1;
  }
  else
  {
    if (*a1)
      return 0;
    v3 = (unint64_t)(a2 + 63) >> 6;
  }
  v4 = a1 + 1;
  v5 = v3 - 1;
  do
  {
    result = v5 == 0;
    if (!v5)
      break;
    v6 = *v4++;
    --v5;
  }
  while (!v6);
  return result;
}

void sub_1B19FA6EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (a2 != a1)
  {
    v4 = a1 >> 6;
    v5 = a2 >> 6;
    v6 = ~(-1 << a1);
    v7 = -1 << a2;
    if (a2 >> 6 == a1 >> 6)
    {
      v7 ^= v6;
      v5 = a1 >> 6;
    }
    else
    {
      if ((a2 >> 6) - (a1 >> 6) >= 2)
        bzero((void *)(a3 + 8 * v4 + 8), 8 * (v5 + ~v4));
      *(_QWORD *)(a3 + 8 * v4) &= v6;
    }
    *(_QWORD *)(a3 + 8 * v5) &= v7;
  }
}

unint64_t sub_1B19FA78C(unint64_t result, uint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  int8x16_t *v7;
  int8x16_t *v8;
  unint64_t v9;
  int8x16_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;

  if (a4 + 63 <= 127)
    v4 = 1;
  else
    v4 = (a4 + 63) >> 6;
  if (v4 < 4 || (result + 8 * v4 > a3 ? (v5 = a3 + 8 * v4 > result) : (v5 = 0), v5))
  {
    v6 = 0;
  }
  else
  {
    v6 = v4 & 0xFFFFFFFFFFFFFFFCLL;
    v7 = (int8x16_t *)(a3 + 16);
    v8 = (int8x16_t *)(result + 16);
    v9 = v4 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v10 = vbicq_s8(*v7, *v8);
      v7[-1] = vbicq_s8(v7[-1], v8[-1]);
      *v7 = v10;
      v7 += 2;
      v8 += 2;
      v9 -= 4;
    }
    while (v9);
    if (v4 == v6)
      goto LABEL_16;
  }
  v11 = v4 - v6;
  v12 = 8 * v6;
  v13 = (uint64_t *)(result + 8 * v6);
  v14 = (_QWORD *)(a3 + v12);
  do
  {
    v15 = *v13++;
    *v14++ &= ~v15;
    --v11;
  }
  while (v11);
LABEL_16:
  if (a4 + 63 <= 127)
    v16 = 0;
  else
    v16 = ((a4 + 63) >> 6) - 1;
  *(_QWORD *)(a3 + 8 * v16) &= ~(-1 << a4);
  return result;
}

_BYTE *sub_1B19FA854(_BYTE *result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *v2;
  v4 = 1 << *a2;
  v5 = 8 * (*a2 >> 6);
  if (*result == 1)
    *(_QWORD *)(v3 + v5) |= v4;
  else
    *(_QWORD *)(v3 + v5) &= ~v4;
  return result;
}

uint64_t (*sub_1B19FA898(uint64_t a1, unint64_t *a2))(uint64_t result)
{
  _QWORD *v2;
  unint64_t v3;

  v3 = *a2;
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = (*(_QWORD *)(*v2 + ((v3 >> 3) & 0xFFFFFFFFFFFFF8)) >> v3) & 1;
  return sub_1B19FA8D0;
}

uint64_t sub_1B19FA8D0(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;

  v1 = *(_QWORD *)(result + 8);
  v2 = 1 << v1;
  v3 = (uint64_t *)(**(_QWORD **)result + 8 * (v1 >> 6));
  if (*(_BYTE *)(result + 16))
    v4 = v2 | *v3;
  else
    v4 = *v3 & ~v2;
  *v3 = v4;
  return result;
}

uint64_t *sub_1B19FA910(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;

  return sub_1B19FB584(v2, *a2, a2[1], *(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
}

void (*sub_1B19FA928(_QWORD *a1, uint64_t *a2))(uint64_t *a1)
{
  uint64_t *v2;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*result)(uint64_t *);

  v5 = malloc(0x38uLL);
  *a1 = v5;
  v6 = *a2;
  v7 = a2[1];
  v5[4] = v2;
  v5[5] = v6;
  v5[6] = v7;
  v8 = *v2;
  v9 = v2[1];
  *v5 = v6;
  v5[1] = v7;
  result = sub_1B19FA980;
  v5[2] = v8;
  v5[3] = v9;
  return result;
}

void sub_1B19FA980(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  sub_1B19FB584(*(uint64_t **)(*a1 + 32), *(_QWORD *)(*a1 + 40), *(_QWORD *)(*a1 + 48), *(_QWORD *)v1, *(_QWORD *)(v1 + 8), *(_QWORD *)(v1 + 16));
  free((void *)v1);
}

uint64_t sub_1B19FA9B4@<X0>(uint64_t (*a1)(char *)@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = sub_1B19FB460(a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t sub_1B19FA9DC(uint64_t *a1, uint64_t *a2)
{
  return sub_1B1C8DB1C(*a1, *a2);
}

uint64_t sub_1B19FA9E8()
{
  return sub_1B22286A4();
}

uint64_t sub_1B19FAA08()
{
  return sub_1B2228698();
}

_QWORD *sub_1B19FAA28@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *result - 1;
  return result;
}

_QWORD *sub_1B19FAA38(_QWORD *result)
{
  --*result;
  return result;
}

_QWORD *sub_1B19FAA48@<X0>(_QWORD *result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = *result + a2;
  return result;
}

uint64_t sub_1B19FAA58(_QWORD *a1, _QWORD *a2)
{
  return *a2 - *a1;
}

void sub_1B19FAA68(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 8);
}

void (*sub_1B19FAA74(_QWORD *a1))(_QWORD *a1)
{
  _BYTE *v2;
  uint64_t (*v3)(_QWORD);
  char v4;

  v2 = malloc(0x30uLL);
  *a1 = v2;
  v3 = sub_1B19FAAFC();
  v2[40] = v4 & 1;
  *((_QWORD *)v2 + 4) = v3;
  return sub_1B19FAAD0;
}

void sub_1B19FAAD0(_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD))(*a1 + 32))(*a1);
  free(v1);
}

uint64_t (*sub_1B19FAAFC())(_QWORD)
{
  return nullsub_16;
}

__n128 sub_1B19FAB1C@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  unint64_t *v2;
  unint64_t v3;
  unint64_t v4;
  __n128 result;

  v3 = *v2;
  v4 = v2[1];
  result = *a1;
  *a2 = *a1;
  a2[1].n128_u64[0] = v3;
  a2[1].n128_u64[1] = v4;
  return result;
}

void sub_1B19FAB30(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 8);
  *a1 = 0;
  a1[1] = v2;
}

BOOL sub_1B19FAB3C()
{
  uint64_t v0;

  return sub_1B19FA690(*(_QWORD **)v0, *(_QWORD *)(v0 + 8));
}

void sub_1B19FAB44(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_WORD *)(a1 + 8) = 256;
}

_QWORD *sub_1B19FAB54@<X0>(_QWORD *result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char v6;

  v4 = *a3 - *result;
  if (a2 < 1)
  {
    if (v4 <= 0 && v4 > a2)
      goto LABEL_4;
LABEL_10:
    v6 = 0;
    v5 = *result + a2;
    goto LABEL_11;
  }
  if (v4 < 0 || v4 >= (unint64_t)a2)
    goto LABEL_10;
LABEL_4:
  v5 = 0;
  v6 = 1;
LABEL_11:
  *(_QWORD *)a4 = v5;
  *(_BYTE *)(a4 + 8) = v6;
  return result;
}

_QWORD *sub_1B19FABA0@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *result + 1;
  return result;
}

_QWORD *sub_1B19FABB0(_QWORD *result)
{
  ++*result;
  return result;
}

void sub_1B19FABC0(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;

  v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  a1[2] = 0;
}

uint64_t sub_1B19FABD0()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t sub_1B19FABD8()
{
  return 2;
}

uint64_t sub_1B19FABE0()
{
  uint64_t v0;

  return sub_1B1DC8738(*(_BYTE **)v0, *(_QWORD *)(v0 + 8));
}

uint64_t sub_1B19FABE8(_QWORD *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1F7A8B4(a1, a2, a3, *(_BYTE **)v3, *(_QWORD *)(v3 + 8));
}

uint64_t sub_1B19FABF0()
{
  return sub_1B222898C();
}

uint64_t sub_1B19FAC10(uint64_t a1, uint64_t a2)
{
  uint64_t i;

  if (a2)
  {
    for (i = 1; ; ++i)
    {
      sub_1B2229A0C();
      sub_1B2228890();
      sub_1B2228890();
      swift_bridgeObjectRelease();
      sub_1B2228890();
      swift_bridgeObjectRetain();
      sub_1B2228890();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (a2 == i)
        break;
    }
  }
  return 0;
}

uint64_t sub_1B19FAD5C()
{
  uint64_t *v0;

  return sub_1B19FAC10(*v0, v0[1]);
}

uint64_t sub_1B19FAD64(int8x16_t *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int8x16_t *v7;
  int64x2_t v8;
  unint64_t v9;
  int64x2_t v10;
  unint64_t v11;
  int8x8_t *v12;
  int8x8_t v13;
  uint8x8_t v14;

  sub_1B2229430();
  swift_bridgeObjectRelease();
  sub_1B2229A0C();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  v4 = 0;
  v5 = 0;
  if (a2 + 63 <= 127)
    v6 = 1;
  else
    v6 = (a2 + 63) >> 6;
  if (v6 < 4)
    goto LABEL_8;
  v5 = v6 & 0xFFFFFFFFFFFFFFFCLL;
  v7 = a1 + 1;
  v8 = 0uLL;
  v9 = v6 & 0xFFFFFFFFFFFFFFFCLL;
  v10 = 0uLL;
  do
  {
    v8 = (int64x2_t)vpadalq_u32((uint64x2_t)v8, vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(v7[-1]))));
    v10 = (int64x2_t)vpadalq_u32((uint64x2_t)v10, vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(*v7))));
    v7 += 2;
    v9 -= 4;
  }
  while (v9);
  v4 = vaddvq_s64(vaddq_s64(v10, v8));
  if (v6 != v5)
  {
LABEL_8:
    v11 = v6 - v5;
    v12 = (int8x8_t *)a1 + v5;
    do
    {
      v13 = *v12++;
      v14 = (uint8x8_t)vcnt_s8(v13);
      v14.i16[0] = vaddlv_u8(v14);
      v4 += v14.u32[0];
      --v11;
    }
    while (v11);
  }
  sub_1B2229A0C();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  return 0x203A746E756F63;
}

uint64_t sub_1B19FAEEC()
{
  uint64_t v0;

  return sub_1B19FAD64(*(int8x16_t **)v0, *(_QWORD *)(v0 + 8));
}

uint64_t getEnumTagSinglePayload for UnsafeFixedBitSet(uint64_t a1, int a2)
{
  int v3;

  if (!a2)
    return 0;
  if (a2 != 1 && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 2);
  if (*(_QWORD *)a1)
    v3 = -1;
  else
    v3 = 0;
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for UnsafeFixedBitSet(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 1)
  {
    *(_QWORD *)result = a2 - 2;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 2)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 2)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)result = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for UnsafeFixedBitSet()
{
  return &type metadata for UnsafeFixedBitSet;
}

uint64_t sub_1B19FAF84()
{
  return sub_1B19FB148(&qword_1EEF588D8, &qword_1EEF588E0, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DEC8F8], MEMORY[0x1E0DEC908]);
}

unint64_t sub_1B19FAFB8()
{
  unint64_t result;

  result = qword_1EEF588E8;
  if (!qword_1EEF588E8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B226D02C, &type metadata for UnsafeFixedBitSet);
    atomic_store(result, (unint64_t *)&qword_1EEF588E8);
  }
  return result;
}

unint64_t sub_1B19FB000()
{
  unint64_t result;

  result = qword_1EEF588F0;
  if (!qword_1EEF588F0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B226CFC4, &type metadata for UnsafeFixedBitSet);
    atomic_store(result, (unint64_t *)&qword_1EEF588F0);
  }
  return result;
}

uint64_t sub_1B19FB044()
{
  return MEMORY[0x1E0DEB430];
}

uint64_t sub_1B19FB050()
{
  return sub_1B19FB388(&qword_1EEF588F8, MEMORY[0x1E0DEB8C0]);
}

void sub_1B19FB074()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED4BA5B8)
  {
    v0 = sub_1B2228E48();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED4BA5B8);
  }
}

unint64_t sub_1B19FB0D0()
{
  unint64_t result;

  result = qword_1EEF5E1D0;
  if (!qword_1EEF5E1D0)
  {
    result = MEMORY[0x1B5E23E74](MEMORY[0x1E0DEB440], MEMORY[0x1E0DEB418]);
    atomic_store(result, (unint64_t *)&qword_1EEF5E1D0);
  }
  return result;
}

uint64_t sub_1B19FB114()
{
  return sub_1B19FB148(&qword_1EEF58900, &qword_1EEF58908, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DEDE10], MEMORY[0x1E0DEDE48]);
}

uint64_t sub_1B19FB148(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    sub_1B19FB188(255, a2, a3);
    result = MEMORY[0x1B5E23E74](a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

void sub_1B19FB188(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_1B19FAFB8();
    v7 = a3(a1, &type metadata for UnsafeFixedBitSet, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t sub_1B19FB1E8()
{
  return sub_1B19FB388(&qword_1EEF58910, MEMORY[0x1E0DEB890]);
}

uint64_t sub_1B19FB20C()
{
  return sub_1B19FB2A8(&qword_1EEF58918, (uint64_t (*)(void))sub_1B19FB238, MEMORY[0x1E0DEDE28]);
}

unint64_t sub_1B19FB238()
{
  unint64_t result;

  result = qword_1EEF58920;
  if (!qword_1EEF58920)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B226D10C, &type metadata for UnsafeFixedBitSet);
    atomic_store(result, (unint64_t *)&qword_1EEF58920);
  }
  return result;
}

uint64_t sub_1B19FB27C()
{
  return sub_1B19FB2A8(&qword_1EEF58928, (uint64_t (*)(void))sub_1B19FB31C, MEMORY[0x1E0DEDE30]);
}

uint64_t sub_1B19FB2A8(unint64_t *a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = *a1;
  if (!result)
  {
    sub_1B19FB188(255, &qword_1EEF58908, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DEDE10]);
    v8 = v7;
    v9 = a2();
    result = MEMORY[0x1B5E23E74](a3, v8, &v9);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1B19FB31C()
{
  unint64_t result;

  result = qword_1EEF58930;
  if (!qword_1EEF58930)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B226D16C, &type metadata for UnsafeFixedBitSet);
    atomic_store(result, (unint64_t *)&qword_1EEF58930);
  }
  return result;
}

uint64_t sub_1B19FB364()
{
  return sub_1B19FB388(&qword_1EEF58938, MEMORY[0x1E0DEB8B8]);
}

uint64_t sub_1B19FB388(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[2];

  result = *a1;
  if (!result)
  {
    sub_1B19FB074();
    v6 = v5;
    v7 = sub_1B19FB0D0();
    v8[0] = MEMORY[0x1E0DEB458];
    v8[1] = v7;
    result = MEMORY[0x1B5E23E74](a2, v6, v8);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1B19FB3F0()
{
  return sub_1B19FB2A8(&qword_1EEF58940, (uint64_t (*)(void))sub_1B19FB41C, MEMORY[0x1E0DEDE40]);
}

unint64_t sub_1B19FB41C()
{
  unint64_t result;

  result = qword_1EEF58948;
  if (!qword_1EEF58948)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B226D1DC, &type metadata for UnsafeFixedBitSet);
    atomic_store(result, (unint64_t *)&qword_1EEF58948);
  }
  return result;
}

uint64_t sub_1B19FB460(uint64_t (*a1)(char *))
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v6;
  char v7;
  char v9;
  char v10;

  v4 = v1[1];
  if (v4 < 1)
    return 0;
  v6 = (_BYTE *)*v1;
  v10 = *(_BYTE *)*v1 & 1;
  v7 = a1(&v10);
  if (!v2)
  {
    v3 = 0;
    while ((v7 & 1) == 0)
    {
LABEL_11:
      if (++v3 >= v4)
        return v3;
      v10 = (*(_QWORD *)&v6[((unint64_t)v3 >> 3) & 0xFFFFFFFFFFFFF8] >> v3) & 1;
      v7 = a1(&v10);
    }
    while (v3 < --v4)
    {
      v9 = (*(_QWORD *)&v6[((unint64_t)v4 >> 3) & 0xFFFFFFFFFFFFF8] >> v4) & 1;
      if ((a1(&v9) & 1) == 0)
      {
        sub_1B1C8DB1C(v3, v4);
        goto LABEL_11;
      }
    }
  }
  return v3;
}

uint64_t *sub_1B19FB584(uint64_t *result, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (a2 != a3 && a4 != a5)
  {
    v6 = *result;
    do
    {
      v7 = 1 << a2;
      v8 = 8 * (a2 >> 6);
      if (((*(_QWORD *)(a6 + ((a4 >> 3) & 0xFFFFFFFFFFFFF8)) >> a4) & 1) != 0)
        v9 = *(_QWORD *)(v6 + v8) | v7;
      else
        v9 = *(_QWORD *)(v6 + v8) & ~v7;
      *(_QWORD *)(v6 + v8) = v9;
      if (a3 - 1 == a2)
        break;
      ++a2;
    }
    while (a5 - 1 != a4++);
  }
  return result;
}

uint64_t sub_1B19FB60C(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  __int128 v16;
  __int128 v19;
  id v20;
  __int128 v21;
  id v22;

  v5 = v4;
  swift_getObjectType();
  v9 = sub_1B1F9A54C();
  v10 = (_QWORD)objc_msgSend(a3, sel_height) * v9;
  if (a4)
    v11 = a4;
  else
    v11 = objc_msgSend(objc_msgSend(*(id *)(v5 + OBJC_IVAR____TtC3VFX9GPUHelper_commandQueue), sel_commandBuffer), sel_blitCommandEncoder);
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  v12 = objc_msgSend(a3, sel_width);
  v13 = objc_msgSend(a3, sel_height);
  v14 = objc_msgSend(a3, sel_depth);
  sub_1B19FB884(&v21);
  v15 = v22;
  v16 = v21;
  *(_QWORD *)&v21 = v12;
  *((_QWORD *)&v21 + 1) = v13;
  v22 = v14;
  v19 = v16;
  v20 = v15;
  objc_msgSend(v11, sel_copyFromBuffer_sourceOffset_sourceBytesPerRow_sourceBytesPerImage_sourceSize_toTexture_destinationSlice_destinationLevel_destinationOrigin_, a1, a2, v9, v10, &v21, a3, 0, 0, &v19);
  swift_unknownObjectRelease();
  if (!a4)
  {
    objc_msgSend(v11, sel_endEncoding);
    objc_msgSend((id)swift_unknownObjectRetain(), sel_commit);
    swift_unknownObjectRelease();
  }
  swift_unknownObjectRelease();
  return swift_unknownObjectRelease();
}

id sub_1B19FB7EC()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for GPUHelper();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for GPUHelper()
{
  return objc_opt_self();
}

void sub_1B19FB884(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

uint64_t sub_1B19FB890@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t inited;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t updated;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t (*v24)(uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  char isUniquelyReferenced_nonNull_native;
  unint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;

  v3 = v2;
  inited = type metadata accessor for ParticleInitScript(0);
  v74 = *(_QWORD *)(inited - 8);
  v75 = inited;
  MEMORY[0x1E0C80A78](inited, v7);
  v69 = (uint64_t)&v65 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1B1791524(0, &qword_1EEF58988, v9, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for VFXObjectScriptsDiff.Diff);
  MEMORY[0x1E0C80A78](v10, v11);
  v73 = (uint64_t)&v65 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13, v14);
  v77 = (char *)&v65 - v15;
  MEMORY[0x1E0C80A78](v16, v17);
  v76 = (uint64_t)&v65 - v18;
  updated = type metadata accessor for ParticleUpdateScript(0);
  v20 = *(_QWORD *)(updated - 8);
  MEMORY[0x1E0C80A78](updated, v21);
  v23 = (char *)&v65 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1B1791524(0, &qword_1EEF58980, v24, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for VFXObjectScriptsDiff.Diff);
  MEMORY[0x1E0C80A78](v25, v26);
  v28 = (char *)&v65 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v29, v30);
  v32 = (char *)&v65 - v31;
  MEMORY[0x1E0C80A78](v33, v34);
  v36 = (char *)&v65 - v35;
  sub_1B1792810((uint64_t)v3, (uint64_t)a2, (uint64_t (*)(_QWORD))type metadata accessor for VFXObjectScriptsDiff);
  v37 = *v3;
  swift_unknownObjectRetain();
  v38 = sub_1B1A00790(v37, a1);
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  *a2 = v38;
  v39 = updated;
  v71 = type metadata accessor for VFXObjectScriptsDiff();
  v72 = a2;
  v70 = (uint64_t)a2 + *(int *)(v71 + 20);
  sub_1B1A024C0(v70, (uint64_t)v32, &qword_1EEF58980, type metadata accessor for ParticleUpdateScript);
  v40 = v20;
  sub_1B1A024C0((uint64_t)v32, (uint64_t)v28, &qword_1EEF58980, type metadata accessor for ParticleUpdateScript);
  v41 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v20 + 48))(v28, 2, updated);
  v68 = a1;
  if (v41)
  {
    sub_1B1A024C0((uint64_t)v32, (uint64_t)v36, &qword_1EEF58980, type metadata accessor for ParticleUpdateScript);
    v42 = (uint64_t)v77;
    v43 = v75;
  }
  else
  {
    sub_1B1A025EC((uint64_t)v28, (uint64_t)v23, type metadata accessor for ParticleUpdateScript);
    sub_1B1792810((uint64_t)v23, (uint64_t)v36, type metadata accessor for ParticleUpdateScript);
    v44 = sub_1B1E33D20();
    v45 = (_QWORD *)*((_QWORD *)v36 + 4);
    v46 = v45[2];
    if (v46)
    {
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v66 = v40;
      v67 = updated;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        v45 = sub_1B1FFED40(v45);
      v48 = v45 + 4;
      do
      {
        v49 = *v48;
        sub_1B1A00374(v44, *v48);
        v51 = v50;
        swift_retain();
        sub_1B1A05610(v49);
        *v48 = v51;
        v48[2] = 0;
        *((_BYTE *)v48 + 24) = 1;
        swift_release();
        v48 += 4;
        --v46;
      }
      while (v46);
      swift_release();
      *((_QWORD *)v36 + 4) = v45;
      v43 = v75;
      v42 = (uint64_t)v77;
      v40 = v66;
      v39 = v67;
    }
    else
    {
      swift_release();
      v42 = (uint64_t)v77;
      v43 = v75;
    }
    sub_1B1A04628((uint64_t)v23, type metadata accessor for ParticleUpdateScript);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v40 + 56))(v36, 0, 2, v39);
  }
  sub_1B1A057EC((uint64_t)v32, (uint64_t)&qword_1EEF58980, (uint64_t)type metadata accessor for ParticleUpdateScript, (uint64_t)type metadata accessor for VFXObjectScriptsDiff.Diff, (uint64_t (*)(_QWORD))sub_1B1791524);
  sub_1B1A05828((uint64_t)v36, v70, &qword_1EEF58980, type metadata accessor for ParticleUpdateScript, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for VFXObjectScriptsDiff.Diff);
  v52 = (uint64_t)v72 + *(int *)(v71 + 24);
  sub_1B1A024C0(v52, v42, &qword_1EEF58988, type metadata accessor for ParticleInitScript);
  v53 = v73;
  sub_1B1A024C0(v42, v73, &qword_1EEF58988, type metadata accessor for ParticleInitScript);
  v54 = v74;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v74 + 48))(v53, 2, v43))
  {
    v55 = v76;
    sub_1B1A024C0(v42, v76, &qword_1EEF58988, type metadata accessor for ParticleInitScript);
  }
  else
  {
    v56 = v69;
    sub_1B1A025EC(v53, v69, type metadata accessor for ParticleInitScript);
    v55 = v76;
    sub_1B1792810(v56, v76, type metadata accessor for ParticleInitScript);
    v57 = sub_1B1E33D20();
    v58 = *(_QWORD **)(v55 + 32);
    v59 = v58[2];
    if (v59)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v58 = sub_1B1FFED40(v58);
      v60 = v58 + 4;
      do
      {
        v61 = *v60;
        sub_1B1A00374(v57, *v60);
        v63 = v62;
        swift_retain();
        sub_1B1A05610(v61);
        *v60 = v63;
        v60[2] = 0;
        *((_BYTE *)v60 + 24) = 1;
        swift_release();
        v60 += 4;
        --v59;
      }
      while (v59);
      swift_release();
      v55 = v76;
      v42 = (uint64_t)v77;
      *(_QWORD *)(v76 + 32) = v58;
    }
    else
    {
      swift_release();
    }
    sub_1B1A04628(v69, type metadata accessor for ParticleInitScript);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v54 + 56))(v55, 0, 2, v43);
  }
  sub_1B1A057EC(v42, (uint64_t)&qword_1EEF58988, (uint64_t)type metadata accessor for ParticleInitScript, (uint64_t)type metadata accessor for VFXObjectScriptsDiff.Diff, (uint64_t (*)(_QWORD))sub_1B1791524);
  return sub_1B1A05828(v55, v52, &qword_1EEF58988, type metadata accessor for ParticleInitScript, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for VFXObjectScriptsDiff.Diff);
}

_QWORD *sub_1B19FBE64@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *result;
  _QWORD v5[4];

  swift_unknownObjectWeakInit();
  v5[1] = 0;
  swift_unknownObjectWeakAssign();
  v5[2] = 0x3E6C6C756E3CLL;
  v5[3] = 0xE600000000000000;
  sub_1B19FC2D0((uint64_t)v5, a1);
  type metadata accessor for AuthoringGraph();
  v2 = (_QWORD *)swift_allocObject();
  v3 = MEMORY[0x1E0DEE9D8];
  v2[2] = 0;
  v2[3] = v3;
  v2[4] = 0;
  v2[5] = 0;
  result = sub_1B1B7DC90(v3);
  v2[6] = result;
  *(_QWORD *)(a1 + 32) = v2;
  return result;
}

uint64_t sub_1B19FBEFC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t ObjectType;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t result;
  _QWORD v11[6];

  v3 = v2;
  ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(a2 + 16))(v2, ObjectType, a2);
  v11[2] = a1;
  v11[3] = a2;
  v7 = MEMORY[0x1E0DEE9D8];
  sub_1B1C5A714((uint64_t)sub_1B1A055F8, (uint64_t)v11, 0, 0x1000000000000000uLL, 1, MEMORY[0x1E0DEE9D8]);
  v8 = sub_1B1C6A11C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  type metadata accessor for AuthoringGraph();
  v9 = (_QWORD *)swift_allocObject();
  v9[2] = 0;
  v9[3] = v7;
  v9[4] = 0;
  v9[5] = 0;
  v9[6] = sub_1B1B7DC90(v7);
  v9[3] = v8;
  result = swift_release();
  *(_QWORD *)(v3 + 32) = v9;
  return result;
}

uint64_t sub_1B19FBFF8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _QWORD v6[4];
  _BYTE v7[24];
  uint64_t v8;
  _QWORD v9[5];

  sub_1B19FA070(a1, a1[3]);
  sub_1B222A12C();
  if (v2)
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  sub_1B19FC264((uint64_t)v7, v8);
  sub_1B19FC28C();
  sub_1B2229AA8();
  sub_1B19FC2D0((uint64_t)v6, (uint64_t)v9);
  sub_1B19FC264((uint64_t)v7, v8);
  sub_1B19FC30C();
  sub_1B2229AA8();
  v9[4] = v6[0];
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v7);
  sub_1B19FC384(v9, a2);
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  return sub_1B19FC3B8((uint64_t)v9);
}

uint64_t sub_1B19FC154(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  _BYTE v4[24];
  uint64_t v5;
  uint64_t v6;

  sub_1B19FA070(a1, a1[3]);
  sub_1B222A15C();
  sub_1B19FC264((uint64_t)v4, v5);
  sub_1B19FC3E4();
  sub_1B2229BA4();
  if (!v2)
  {
    v6 = *(_QWORD *)(v1 + 32);
    sub_1B19FC264((uint64_t)v4, v5);
    sub_1B19FC428();
    sub_1B2229BA4();
  }
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v4);
}

uint64_t sub_1B19FC23C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1B19FBFF8(a1, a2);
}

uint64_t sub_1B19FC250(_QWORD *a1)
{
  return sub_1B19FC154(a1);
}

uint64_t sub_1B19FC264(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

unint64_t sub_1B19FC28C()
{
  unint64_t result;

  result = qword_1EEF61510;
  if (!qword_1EEF61510)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22A3688, &type metadata for VFXBridgeableReference);
    atomic_store(result, (unint64_t *)&qword_1EEF61510);
  }
  return result;
}

uint64_t sub_1B19FC2D0(uint64_t a1, uint64_t a2)
{
  initializeWithTake for VFXBridgeableReference(a2, a1);
  return a2;
}

unint64_t sub_1B19FC30C()
{
  unint64_t result;

  result = qword_1EEF5CEB0;
  if (!qword_1EEF5CEB0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C08FC, &type metadata for AuthoringGraphCoder);
    atomic_store(result, (unint64_t *)&qword_1EEF5CEB0);
  }
  return result;
}

uint64_t sub_1B19FC350(uint64_t a1)
{
  destroy for VFXBridgeableReference();
  return a1;
}

uint64_t sub_1B19FC384(_QWORD *a1, uint64_t a2)
{
  initializeWithCopy for GraphComponent(a2, a1);
  return a2;
}

uint64_t sub_1B19FC3B8(uint64_t a1)
{
  destroy for GraphComponent();
  return a1;
}

unint64_t sub_1B19FC3E4()
{
  unint64_t result;

  result = qword_1EEF58968;
  if (!qword_1EEF58968)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22A3660, &type metadata for VFXBridgeableReference);
    atomic_store(result, (unint64_t *)&qword_1EEF58968);
  }
  return result;
}

unint64_t sub_1B19FC428()
{
  unint64_t result;

  result = qword_1EEF58970;
  if (!qword_1EEF58970)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C08D4, &type metadata for AuthoringGraphCoder);
    atomic_store(result, (unint64_t *)&qword_1EEF58970);
  }
  return result;
}

uint64_t sub_1B19FC46C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t result;
  uint64_t v48;
  void *v49;
  double v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t *v54;
  int *v55;
  void (*v56)(void);
  void (*v57)(void);
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  void *v76;
  uint64_t v77;
  unint64_t v78;
  BOOL v79;
  uint64_t v80;
  unint64_t v81;
  char v82;
  uint64_t v83;
  char v84;
  char v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  BOOL v101;
  int v102;
  uint64_t v103;
  uint64_t *v104;
  int v105;
  uint64_t v106;
  unint64_t v107;
  char v108;
  char v109;
  uint64_t v110;
  unint64_t v111;
  char v112;
  uint64_t v113;
  int *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  void *v122;
  void *v123;
  id v124;
  id v125;
  uint64_t v126;
  uint64_t *v127;
  uint64_t v128;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v130;
  unint64_t v131;
  char v132;
  char v133;
  uint64_t v134;
  unint64_t v135;
  char v136;
  uint64_t v137;
  uint64_t *v138;
  int v139;
  uint64_t v140;
  unint64_t v141;
  char v142;
  char v143;
  uint64_t v144;
  unint64_t v145;
  char v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t *v157;
  int v158;
  uint64_t v159;
  unint64_t v160;
  char v161;
  char v162;
  uint64_t v163;
  unint64_t v164;
  char v165;
  _QWORD *v166;
  uint64_t v167;
  uint64_t *v168;
  _QWORD *v169;
  void *v170;
  _QWORD *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t *p_updated;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  char *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  char *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  _QWORD v198[3];
  uint64_t v199;
  int64_t v200;
  void (*v201)(void);
  uint64_t v202;
  id v203;
  id v204;
  uint64_t v205;
  __int128 v206;
  void (*v207)(void);
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  void *v212;
  uint64_t v213;
  uint64_t v214;
  int64_t v215;
  uint64_t v216;
  _BOOL4 v217;
  uint64_t v218;
  char *v219;
  char *v220;
  uint64_t v221;
  char *v222;
  char *v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t inited;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t updated;
  uint64_t v240;
  uint64_t v241;
  uint64_t *v242;
  uint64_t v243;
  _QWORD *v244;
  unint64_t v245;
  int v246;
  char v247;
  uint64_t v248;
  uint64_t v249;
  unint64_t v250;
  void *v251;
  uint64_t v252;
  uint64_t v253;

  v221 = a5;
  v251 = a4;
  v242 = a6;
  sub_1B1791524(0, (unint64_t *)&unk_1EEF601C0, type metadata accessor for TriggerScript, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for VFXObjectScriptsDiff.Diff);
  v228 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v12);
  v234 = (uint64_t)v198 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14, v15);
  v227 = (uint64_t)v198 - v16;
  v226 = type metadata accessor for TriggerScript(0);
  v225 = *(_QWORD *)(v226 - 8);
  MEMORY[0x1E0C80A78](v226, v17);
  v230 = (uint64_t)v198 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  updated = type metadata accessor for ParticleUpdateScript(0);
  v19 = *(_QWORD *)(updated - 8);
  MEMORY[0x1E0C80A78](updated, v20);
  v220 = (char *)v198 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  inited = type metadata accessor for ParticleInitScript(0);
  v22 = *(_QWORD *)(inited - 8);
  MEMORY[0x1E0C80A78](inited, v23);
  v219 = (char *)v198 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v238 = type metadata accessor for GraphScript(0);
  v236 = *(_QWORD *)(v238 - 8);
  MEMORY[0x1E0C80A78](v238, v25);
  v229 = (uint64_t)v198 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1B1791524(0, (unint64_t *)&unk_1EEF5B930, v27, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for VFXObjectScriptsDiff.Diff);
  v237 = *(_QWORD *)(v28 - 8);
  MEMORY[0x1E0C80A78](v28, v29);
  v233 = (uint64_t)v198 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v31, v32);
  v224 = (uint64_t)v198 - v33;
  MEMORY[0x1E0C80A78](v34, v35);
  v232 = (uint64_t)v198 - v36;
  MEMORY[0x1E0C80A78](v37, v38);
  v223 = (char *)v198 - v39;
  MEMORY[0x1E0C80A78](v40, v41);
  v231 = (uint64_t)v198 - v42;
  MEMORY[0x1E0C80A78](v43, v44);
  v222 = (char *)v198 - v45;
  if (a2)
  {
    swift_getObjectType();
    v46 = sub_1B1F56278();
  }
  else
  {
    v46 = 0;
  }
  result = sub_1B1D50364(a1, v46, a2 == 0);
  if (v7)
    return result;
  v48 = sub_1B20386D4(1, v251);
  v49 = v251;
  sub_1B1FA20EC(a2, a3, (uint64_t)v251);
  v51 = sub_1B1FA222C(a2, v50, a3, v6, (uint64_t)v49);
  v198[2] = 0;
  sub_1B1FA23AC(v51, v52);
  v53 = sub_1B1B96514(MEMORY[0x1E0DEE9D8]);
  v54 = v242;
  *v242 = (uint64_t)v53;
  v55 = (int *)type metadata accessor for VFXObjectScriptsDiff();
  v56 = *(void (**)(void))(v19 + 56);
  v208 = (uint64_t)v54 + v55[5];
  v207 = v56;
  v56();
  v57 = *(void (**)(void))(v22 + 56);
  v202 = (uint64_t)v54 + v55[6];
  v201 = v57;
  v57();
  v58 = v55[7];
  v59 = sub_1B1B96538(MEMORY[0x1E0DEE9D8]);
  v205 = v58;
  *(uint64_t *)((char *)v54 + v58) = (uint64_t)v59;
  v198[1] = v48;
  v60 = sub_1B1A017D4();
  v217 = a2
      && v46 != 0xFFFFFFFFLL
      && (swift_retain(), sub_1B1D154D4(v46, (uint64_t)&v244), swift_release(), v244)
      && (v61 = v248, sub_1B1A027DC((uint64_t)v244), (v61 & 0x10000000000) != 0);
  v62 = sub_1B1F4E79C((uint64_t)&unk_1E637A590);
  swift_arrayDestroy();
  v63 = swift_bridgeObjectRetain();
  v64 = sub_1B19FDC5C(v63, v62);
  v65 = 0;
  v66 = *(_QWORD *)(v64 + 56);
  v214 = v64 + 56;
  v67 = 1 << *(_BYTE *)(v64 + 32);
  v68 = -1;
  if (v67 < 64)
    v68 = ~(-1 << v67);
  v69 = v68 & v66;
  v215 = (unint64_t)(v67 + 63) >> 6;
  v200 = v215 - 5;
  v218 = v64;
  v199 = v64 + 96;
  v206 = xmmword_1B226D240;
  v216 = v60;
  while (1)
  {
    if (v69)
    {
      v240 = (v69 - 1) & v69;
      v72 = __clz(__rbit64(v69)) | (v65 << 6);
    }
    else
    {
      v73 = v65 + 1;
      if (v65 + 1 >= v215)
        goto LABEL_113;
      v74 = *(_QWORD *)(v214 + 8 * v73);
      if (!v74)
      {
        v73 = v65 + 2;
        if (v65 + 2 >= v215)
          goto LABEL_113;
        v74 = *(_QWORD *)(v214 + 8 * v73);
        if (!v74)
        {
          v73 = v65 + 3;
          if (v65 + 3 >= v215)
            goto LABEL_113;
          v74 = *(_QWORD *)(v214 + 8 * v73);
          if (!v74)
          {
            v73 = v65 + 4;
            if (v65 + 4 >= v215)
              goto LABEL_113;
            v74 = *(_QWORD *)(v214 + 8 * v73);
            if (!v74)
            {
              while (v200 != v65)
              {
                v74 = *(_QWORD *)(v199 + 8 * v65++);
                if (v74)
                {
                  v73 = v65 + 4;
                  goto LABEL_33;
                }
              }
LABEL_113:
              swift_release();
              swift_release();
              return swift_bridgeObjectRelease();
            }
          }
        }
      }
LABEL_33:
      v240 = (v74 - 1) & v74;
      v72 = __clz(__rbit64(v74)) + (v73 << 6);
      v65 = v73;
    }
    v75 = *(_QWORD *)(v218 + 48) + 24 * v72;
    v77 = *(_QWORD *)v75;
    v76 = *(void **)(v75 + 8);
    v78 = *(unsigned int *)(v75 + 16) | ((unint64_t)*(unsigned __int8 *)(v75 + 20) << 32);
    if (*(unsigned __int8 *)(v75 + 20) >> 6)
      v79 = 0;
    else
      v79 = v217;
    if (!v79)
      sub_1B1A026F0((id)v77, v76, v78);
    v80 = *(_QWORD *)(v60 + 16);
    v241 = v65;
    v243 = (uint64_t)v76;
    if (!v80)
      goto LABEL_46;
    sub_1B1A026F0((id)v77, v76, v78);
    v81 = sub_1B1DC3D88((void *)v77, v76, v78);
    if ((v82 & 1) == 0)
    {
      sub_1B1A02724((void *)v77, v76, v78);
LABEL_46:
      v92 = 0;
      v97 = 0;
      v98 = 0;
      v99 = 0;
      v88 = 1;
      v100 = v78 >> 38;
      if (v78 >> 38)
        goto LABEL_50;
      goto LABEL_98;
    }
    v83 = *(_QWORD *)(*(_QWORD *)(v60 + 56) + 8 * v81);
    swift_retain();
    sub_1B1A02724((void *)v77, v76, v78);
    swift_retain();
    v84 = sub_1B20CBBDC((uint64_t)v49);
    type metadata accessor for ScopeChecker();
    swift_allocObject();
    swift_retain();
    sub_1B20CC420(v83, v49);
    v85 = sub_1B20CCE7C();
    swift_release();
    if ((v84 & 1) != 0 && (v85 & 1) != 0)
      break;
    swift_release_n();
    v92 = 0;
    v88 = 0;
    v97 = 0;
    v98 = 0;
    v99 = 0;
LABEL_49:
    v49 = v251;
    v60 = v216;
    v100 = v78 >> 38;
    if (v78 >> 38)
      goto LABEL_50;
LABEL_98:
    if (v77 == 3)
    {
      if (!v88)
      {
        v179 = v202;
        sub_1B1A057EC(v202, (uint64_t)&qword_1EEF58988, (uint64_t)type metadata accessor for ParticleInitScript, (uint64_t)type metadata accessor for VFXObjectScriptsDiff.Diff, (uint64_t (*)(_QWORD))sub_1B1791524);
        v173 = v179;
        v174 = 2;
LABEL_109:
        v177 = inited;
        p_updated = &v231;
LABEL_110:
        ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))*(p_updated - 32))(v173, v174, 2, v177);
        goto LABEL_19;
      }
      if (v88 == 1)
      {
        v172 = v202;
        sub_1B1A057EC(v202, (uint64_t)&qword_1EEF58988, (uint64_t)type metadata accessor for ParticleInitScript, (uint64_t)type metadata accessor for VFXObjectScriptsDiff.Diff, (uint64_t (*)(_QWORD))sub_1B1791524);
        v173 = v172;
        v174 = 1;
        goto LABEL_109;
      }
      v180 = (uint64_t)v219;
      v181 = v92;
      v182 = &v219[*(int *)(inited + 36)];
      v183 = v97;
      v184 = v98;
      v185 = v99;
      v186 = type metadata accessor for ScriptIndex();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v186 - 8) + 56))(v182, 1, 1, v186);
      *(_BYTE *)(v180 + 40) = 1;
      *(_BYTE *)v180 = v79;
      sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAE70, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
      v187 = swift_allocObject();
      *(_OWORD *)(v187 + 16) = v206;
      *(_QWORD *)(v187 + 32) = v181;
      *(_QWORD *)(v187 + 40) = v88;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1B1A0279C(v181, v88);
      *(_QWORD *)(v180 + 24) = v187;
      *(_QWORD *)(v180 + 32) = v185;
      *(_QWORD *)(v180 + 8) = v183;
      *(_QWORD *)(v180 + 16) = v184;
      v49 = v251;
      v188 = v202;
      sub_1B1A057EC(v202, (uint64_t)&qword_1EEF58988, (uint64_t)type metadata accessor for ParticleInitScript, (uint64_t)type metadata accessor for VFXObjectScriptsDiff.Diff, (uint64_t (*)(_QWORD))sub_1B1791524);
      sub_1B1792810(v180, v188, type metadata accessor for ParticleInitScript);
      ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v201)(v188, 0, 2, inited);
      sub_1B1A04628(v180, type metadata accessor for ParticleInitScript);
    }
    else
    {
      if (v77 != 5)
        goto LABEL_116;
      if (!v88)
        goto LABEL_106;
      if (v88 == 1)
        goto LABEL_105;
      v189 = (uint64_t)v220;
      v190 = v92;
      v191 = &v220[*(int *)(updated + 36)];
      v192 = v98;
      v193 = v97;
      v194 = v99;
      v195 = type metadata accessor for ScriptIndex();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v195 - 8) + 56))(v191, 1, 1, v195);
      *(_BYTE *)(v189 + 40) = 1;
      *(_BYTE *)(v189 + 24) = v79;
      sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAE70, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
      v196 = swift_allocObject();
      *(_OWORD *)(v196 + 16) = v206;
      *(_QWORD *)(v196 + 32) = v190;
      *(_QWORD *)(v196 + 40) = v88;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1B1A0279C(v190, v88);
      *(_QWORD *)(v189 + 8) = v192;
      *(_QWORD *)(v189 + 16) = v196;
      *(_QWORD *)(v189 + 32) = v194;
      *(_QWORD *)v189 = v193;
      v49 = v251;
      v197 = v208;
      sub_1B1A057EC(v208, (uint64_t)&qword_1EEF58980, (uint64_t)type metadata accessor for ParticleUpdateScript, (uint64_t)type metadata accessor for VFXObjectScriptsDiff.Diff, (uint64_t (*)(_QWORD))sub_1B1791524);
      sub_1B1792810(v189, v197, type metadata accessor for ParticleUpdateScript);
      ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v207)(v197, 0, 2, updated);
      sub_1B1A04628(v189, type metadata accessor for ParticleUpdateScript);
    }
LABEL_19:
    v69 = v240;
    v65 = v241;
  }
  v86 = sub_1B1A01D60(v77, v243, v78);
  v88 = v87;
  swift_release();
  type metadata accessor for GraphCodeGen();
  v89 = swift_allocObject();
  *(_QWORD *)(v89 + 16) = MEMORY[0x1E0DEE9E8];
  v90 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v89 + 40) = MEMORY[0x1E0DEE9D8];
  swift_retain_n();
  *(_QWORD *)(v89 + 48) = sub_1B1B7DDE0(v90);
  *(_QWORD *)(v89 + 56) = sub_1B1B969A8(v90);
  v91 = v90;
  v92 = v86;
  *(_QWORD *)(v89 + 64) = sub_1B1B7DF14(v91);
  *(_BYTE *)(v89 + 32) = v79;
  *(_BYTE *)(v89 + 33) = 0;
  *(_QWORD *)(v89 + 16) = v221;
  *(_QWORD *)(v89 + 24) = v83;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v213 = sub_1B1BCA880(v86, v88);
  v94 = v93;
  v211 = v95;
  LOBYTE(v86) = v96;
  swift_release();
  swift_release_n();
  if ((v86 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v92 = 0;
    v97 = 0;
    v98 = 0;
    v99 = 0;
    v88 = 1;
    goto LABEL_49;
  }
  v49 = v251;
  v60 = v216;
  v98 = v94;
  v99 = v211;
  v97 = v213;
  v100 = v78 >> 38;
  if (!(v78 >> 38))
    goto LABEL_98;
LABEL_50:
  if ((_DWORD)v100 == 1)
  {
    if (v88)
    {
      if (v88 != 1)
      {
        v212 = (void *)v77;
        v113 = v97;
        v114 = (int *)v226;
        v115 = v92;
        v116 = v230;
        v117 = v230 + *(int *)(v226 + 40);
        v118 = v98;
        v211 = v99;
        v119 = type metadata accessor for ScriptIndex();
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v119 - 8) + 56))(v117, 1, 1, v119);
        *(_BYTE *)(v116 + 41) = 1;
        v120 = v116 + v114[13];
        v209 = v114[12];
        v210 = v114[11];
        *(_BYTE *)(v116 + 24) = v79;
        sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAE70, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
        v121 = swift_allocObject();
        *(_OWORD *)(v121 + 16) = v206;
        *(_QWORD *)(v116 + 32) = v121;
        *(_QWORD *)v116 = v211;
        *(_QWORD *)(v116 + 8) = v113;
        v213 = v113;
        v122 = v212;
        *(_QWORD *)(v116 + 16) = v118;
        *(_BYTE *)(v116 + 40) = 0;
        *(_QWORD *)(v116 + v210) = v122;
        v210 = v115;
        *(_QWORD *)(v121 + 32) = v115;
        *(_QWORD *)(v121 + 40) = v88;
        v123 = (void *)v243;
        *(_QWORD *)(v116 + v209) = v243;
        *(_DWORD *)v120 = v78;
        *(_BYTE *)(v120 + 4) = BYTE4(v78) & 1;
        v124 = v123;
        v125 = v122;
        v204 = v124;
        swift_bridgeObjectRetain();
        v209 = v118;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v203 = v125;
        v77 = sub_1B20EFAB8();
        v126 = v227;
        sub_1B1792810(v116, v227, type metadata accessor for TriggerScript);
        (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v225 + 56))(v126, 0, 2, v114);
        sub_1B1A000F0(v126, v234, (uint64_t)&unk_1EEF601C0, (uint64_t)type metadata accessor for TriggerScript, (uint64_t)type metadata accessor for VFXObjectScriptsDiff.Diff, (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))sub_1B1791524);
        v127 = v242;
        v128 = v205;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v244 = *(_QWORD **)((char *)v127 + v128);
        v130 = (uint64_t)v244;
        *(uint64_t *)((char *)v127 + v128) = 0x8000000000000000;
        v131 = sub_1B1DC3CCC(v77);
        v133 = v132;
        v134 = *(_QWORD *)(v130 + 16) + ((v132 & 1) == 0);
        if (*(_QWORD *)(v130 + 24) >= v134)
        {
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            sub_1B1EA9ED0();
        }
        else
        {
          sub_1B1E9469C(v134, isUniquelyReferenced_nonNull_native);
          v135 = sub_1B1DC3CCC(v77);
          if ((v133 & 1) != (v136 & 1))
            goto LABEL_115;
          v131 = v135;
        }
        v169 = v244;
        if ((v133 & 1) != 0)
        {
          sub_1B1A05828(v234, v244[7] + *(_QWORD *)(v228 + 72) * v131, (unint64_t *)&unk_1EEF601C0, type metadata accessor for TriggerScript, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for VFXObjectScriptsDiff.Diff);
        }
        else
        {
          v244[(v131 >> 6) + 8] |= 1 << v131;
          *(_BYTE *)(v169[6] + v131) = v77;
          sub_1B1A000F0(v234, v169[7] + *(_QWORD *)(v228 + 72) * v131, (uint64_t)&unk_1EEF601C0, (uint64_t)type metadata accessor for TriggerScript, (uint64_t)type metadata accessor for VFXObjectScriptsDiff.Diff, (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))sub_1B1791524);
          ++v169[2];
        }
        *(uint64_t *)((char *)v242 + v205) = (uint64_t)v169;

        swift_bridgeObjectRelease();
        sub_1B1A0279C(v210, v88);
        sub_1B1A02724(v212, (void *)v243, v78);
        sub_1B1A04628(v230, type metadata accessor for TriggerScript);
        v49 = v251;
        goto LABEL_18;
      }
      sub_1B1A02724((void *)v77, (void *)v243, v78);
LABEL_105:
      v175 = v208;
      sub_1B1A057EC(v208, (uint64_t)&qword_1EEF58980, (uint64_t)type metadata accessor for ParticleUpdateScript, (uint64_t)type metadata accessor for VFXObjectScriptsDiff.Diff, (uint64_t (*)(_QWORD))sub_1B1791524);
      v173 = v175;
      v174 = 1;
    }
    else
    {
      sub_1B1A02724((void *)v77, (void *)v243, v78);
LABEL_106:
      v176 = v208;
      sub_1B1A057EC(v208, (uint64_t)&qword_1EEF58980, (uint64_t)type metadata accessor for ParticleUpdateScript, (uint64_t)type metadata accessor for VFXObjectScriptsDiff.Diff, (uint64_t (*)(_QWORD))sub_1B1791524);
      v173 = v176;
      v174 = 2;
    }
    v177 = updated;
    p_updated = &updated;
    goto LABEL_110;
  }
  if (v243 | v77)
    v101 = 0;
  else
    v101 = v78 == 0x8000000000;
  v102 = !v101;
  if (!v88)
  {
    v137 = (uint64_t)v223;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v236 + 56))(v223, 2, 2, v238);
    sub_1B1A000F0(v137, v232, (uint64_t)&unk_1EEF5B930, (uint64_t)type metadata accessor for GraphScript, (uint64_t)type metadata accessor for VFXObjectScriptsDiff.Diff, (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))sub_1B1791524);
    v138 = v242;
    v139 = swift_isUniquelyReferenced_nonNull_native();
    v244 = (_QWORD *)*v138;
    v140 = (uint64_t)v244;
    *v138 = 0x8000000000000000;
    v141 = sub_1B1DC3CCC(v102);
    v143 = v142;
    v144 = *(_QWORD *)(v140 + 16) + ((v142 & 1) == 0);
    if (*(_QWORD *)(v140 + 24) >= v144)
    {
      if ((v139 & 1) == 0)
        sub_1B1EA9EF4();
    }
    else
    {
      sub_1B1E946C0(v144, v139);
      v145 = sub_1B1DC3CCC(v102);
      if ((v143 & 1) != (v146 & 1))
        goto LABEL_115;
      v141 = v145;
    }
    v49 = v251;
    v166 = v244;
    if ((v143 & 1) == 0)
    {
      v244[(v141 >> 6) + 8] |= 1 << v141;
      *(_BYTE *)(v166[6] + v141) = v102;
      v70 = v166[7] + *(_QWORD *)(v237 + 72) * v141;
      v71 = &v253;
      goto LABEL_16;
    }
    v167 = v244[7] + *(_QWORD *)(v237 + 72) * v141;
    v168 = &v253;
LABEL_87:
    sub_1B1A05828(*(v168 - 32), v167, (unint64_t *)&unk_1EEF5B930, type metadata accessor for GraphScript, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for VFXObjectScriptsDiff.Diff);
LABEL_17:
    *v242 = (uint64_t)v166;
    swift_bridgeObjectRelease();
    sub_1B1A02724((void *)v77, (void *)v243, v78);
    goto LABEL_18;
  }
  if (v88 == 1)
  {
    v103 = (uint64_t)v222;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v236 + 56))(v222, 1, 2, v238);
    sub_1B1A000F0(v103, v231, (uint64_t)&unk_1EEF5B930, (uint64_t)type metadata accessor for GraphScript, (uint64_t)type metadata accessor for VFXObjectScriptsDiff.Diff, (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))sub_1B1791524);
    v104 = v242;
    v105 = swift_isUniquelyReferenced_nonNull_native();
    v244 = (_QWORD *)*v104;
    v106 = (uint64_t)v244;
    *v104 = 0x8000000000000000;
    v107 = sub_1B1DC3CCC(v102);
    v109 = v108;
    v110 = *(_QWORD *)(v106 + 16) + ((v108 & 1) == 0);
    if (*(_QWORD *)(v106 + 24) >= v110)
    {
      if ((v105 & 1) == 0)
        sub_1B1EA9EF4();
    }
    else
    {
      sub_1B1E946C0(v110, v105);
      v111 = sub_1B1DC3CCC(v102);
      if ((v109 & 1) != (v112 & 1))
        goto LABEL_115;
      v107 = v111;
    }
    v49 = v251;
    v166 = v244;
    if ((v109 & 1) != 0)
    {
      v167 = v244[7] + *(_QWORD *)(v237 + 72) * v107;
      v168 = &v252;
      goto LABEL_87;
    }
    v244[(v107 >> 6) + 8] |= 1 << v107;
    *(_BYTE *)(v166[6] + v107) = v102;
    v70 = v166[7] + *(_QWORD *)(v237 + 72) * v107;
    v71 = &v252;
LABEL_16:
    sub_1B1A000F0(*(v71 - 32), v70, (uint64_t)&unk_1EEF5B930, (uint64_t)type metadata accessor for GraphScript, (uint64_t)type metadata accessor for VFXObjectScriptsDiff.Diff, (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))sub_1B1791524);
    ++v166[2];
    goto LABEL_17;
  }
  v212 = (void *)v77;
  v147 = v92;
  v148 = v229;
  v149 = v229 + *(int *)(v238 + 40);
  v150 = v97;
  LODWORD(v211) = v102;
  v151 = v98;
  v152 = v99;
  v153 = type metadata accessor for ScriptIndex();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v153 - 8) + 56))(v149, 1, 1, v153);
  *(_BYTE *)(v148 + 41) = 1;
  *(_BYTE *)(v148 + 24) = v79;
  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAE70, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v154 = swift_allocObject();
  *(_OWORD *)(v154 + 16) = v206;
  v210 = v147;
  *(_QWORD *)(v154 + 32) = v147;
  *(_QWORD *)(v154 + 40) = v88;
  *(_QWORD *)(v148 + 32) = v154;
  *(_QWORD *)v148 = v152;
  *(_QWORD *)(v148 + 8) = v150;
  v213 = v150;
  *(_QWORD *)(v148 + 16) = v151;
  *(_BYTE *)(v148 + 40) = 0;
  v155 = v224;
  sub_1B1792810(v148, v224, type metadata accessor for GraphScript);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v236 + 56))(v155, 0, 2, v238);
  sub_1B1A000F0(v155, v233, (uint64_t)&unk_1EEF5B930, (uint64_t)type metadata accessor for GraphScript, (uint64_t)type metadata accessor for VFXObjectScriptsDiff.Diff, (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))sub_1B1791524);
  swift_bridgeObjectRetain();
  v209 = v151;
  swift_bridgeObjectRetain();
  v156 = v211;
  swift_bridgeObjectRetain();
  v157 = v242;
  v158 = swift_isUniquelyReferenced_nonNull_native();
  v244 = (_QWORD *)*v157;
  v159 = (uint64_t)v244;
  *v157 = 0x8000000000000000;
  v160 = sub_1B1DC3CCC(v156);
  v162 = v161;
  v163 = *(_QWORD *)(v159 + 16) + ((v161 & 1) == 0);
  if (*(_QWORD *)(v159 + 24) >= v163)
  {
    LOBYTE(v77) = v156;
    if ((v158 & 1) == 0)
      sub_1B1EA9EF4();
LABEL_93:
    v49 = v251;
    v170 = v212;
    v171 = v244;
    if ((v162 & 1) != 0)
    {
      sub_1B1A05828(v233, v244[7] + *(_QWORD *)(v237 + 72) * v160, (unint64_t *)&unk_1EEF5B930, type metadata accessor for GraphScript, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for VFXObjectScriptsDiff.Diff);
    }
    else
    {
      v244[(v160 >> 6) + 8] |= 1 << v160;
      *(_BYTE *)(v171[6] + v160) = v77;
      sub_1B1A000F0(v233, v171[7] + *(_QWORD *)(v237 + 72) * v160, (uint64_t)&unk_1EEF5B930, (uint64_t)type metadata accessor for GraphScript, (uint64_t)type metadata accessor for VFXObjectScriptsDiff.Diff, (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))sub_1B1791524);
      ++v171[2];
    }
    *v242 = (uint64_t)v171;
    swift_bridgeObjectRelease();
    sub_1B1A0279C(v210, v88);
    sub_1B1A02724(v170, (void *)v243, v78);
    sub_1B1A04628(v229, type metadata accessor for GraphScript);
LABEL_18:
    v60 = v216;
    goto LABEL_19;
  }
  sub_1B1E946C0(v163, v158);
  v77 = v156;
  v164 = sub_1B1DC3CCC(v156);
  if ((v162 & 1) == (v165 & 1))
  {
    v160 = v164;
    goto LABEL_93;
  }
LABEL_115:
  sub_1B2229FC4();
  __break(1u);
LABEL_116:
  v244 = 0;
  v245 = 0xE000000000000000;
  sub_1B2229430();
  v249 = (uint64_t)v244;
  v250 = v245;
  sub_1B2228890();
  v244 = (_QWORD *)v77;
  v245 = v243;
  v247 = BYTE4(v78);
  v246 = v78;
  sub_1B22295EC();
  result = sub_1B2229688();
  __break(1u);
  return result;
}

uint64_t sub_1B19FDC5C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  id v12;
  void *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v18;
  void *v19[2];
  unsigned int v20;
  unsigned __int8 v21;
  uint64_t v22;

  v3 = 0;
  v22 = a2;
  v4 = a1 + 64;
  v5 = 1 << *(_BYTE *)(a1 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(a1 + 64);
  v8 = (unint64_t)(v5 + 63) >> 6;
  v18 = a1 + 112;
  while (1)
  {
    if (v7)
    {
      v9 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v10 = v9 | (v3 << 6);
      goto LABEL_5;
    }
    v15 = v3 + 1;
    if (v3 + 1 >= v8)
      goto LABEL_21;
    v16 = *(_QWORD *)(v4 + 8 * v15);
    if (!v16)
    {
      v15 = v3 + 2;
      if (v3 + 2 >= v8)
        goto LABEL_21;
      v16 = *(_QWORD *)(v4 + 8 * v15);
      if (!v16)
      {
        v15 = v3 + 3;
        if (v3 + 3 >= v8)
          goto LABEL_21;
        v16 = *(_QWORD *)(v4 + 8 * v15);
        if (!v16)
        {
          v15 = v3 + 4;
          if (v3 + 4 >= v8)
            goto LABEL_21;
          v16 = *(_QWORD *)(v4 + 8 * v15);
          if (!v16)
          {
            v15 = v3 + 5;
            if (v3 + 5 >= v8)
              goto LABEL_21;
            v16 = *(_QWORD *)(v4 + 8 * v15);
            if (!v16)
              break;
          }
        }
      }
    }
LABEL_20:
    v7 = (v16 - 1) & v16;
    v10 = __clz(__rbit64(v16)) + (v15 << 6);
    v3 = v15;
LABEL_5:
    v11 = *(_QWORD *)(a1 + 48) + 24 * v10;
    v12 = *(id *)v11;
    v13 = *(void **)(v11 + 8);
    v14 = *(unsigned int *)(v11 + 16) | ((unint64_t)*(unsigned __int8 *)(v11 + 20) << 32);
    sub_1B1A026F0(*(id *)v11, v13, v14);
    sub_1B1B8AB6C((uint64_t)v19, (unint64_t)v12, (unint64_t)v13, v14);
    sub_1B1A02724(v19[0], v19[1], v20 | ((unint64_t)v21 << 32));
  }
  while (v8 - 6 != v3)
  {
    v16 = *(_QWORD *)(v18 + 8 * v3++);
    if (v16)
    {
      v15 = v3 + 5;
      goto LABEL_20;
    }
  }
LABEL_21:
  swift_release();
  return v22;
}

uint64_t sub_1B19FDE04(unint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t (*v15)(uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  BOOL v20;
  int v21;
  uint64_t v22;
  int v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unsigned int *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unsigned int *v31;
  unint64_t v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char v43;
  unint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  unint64_t v56;
  uint64_t v57;

  v5 = v4;
  v54 = a2;
  v9 = HIDWORD(a1);
  v10 = type metadata accessor for GraphScript(0);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v12);
  v14 = (char *)&v51 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53 = 0;
  sub_1B1791524(0, (unint64_t *)&unk_1EEF5B930, v15, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for VFXObjectScriptsDiff.Diff);
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = (char *)&v51 - v18;
  v56 = a1;
  v52 = v9;
  v20 = (_DWORD)a1 == -1 && (_DWORD)v9 == 0;
  v21 = v20;
  v55 = v21;
  if (v20 || (swift_retain(), v22 = sub_1B1D155B8(v56), swift_release(), !v22))
  {
    v22 = (uint64_t)sub_1B1B95524(MEMORY[0x1E0DEE9D8]);
    swift_bridgeObjectRelease();
  }
  sub_1B1A024C0(a4, (uint64_t)v19, (unint64_t *)&unk_1EEF5B930, type metadata accessor for GraphScript);
  v23 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48))(v19, 2, v10);
  if (!v23)
  {
    v29 = sub_1B1A025EC((uint64_t)v19, (uint64_t)v14, type metadata accessor for GraphScript);
    if (*(_QWORD *)(v22 + 16) && (v29 = sub_1B1DC3CCC(a3), (v30 & 1) != 0))
    {
      v31 = (unsigned int *)(*(_QWORD *)(v22 + 56) + 8 * v29);
      v33 = *v31;
      v32 = v31[1];
    }
    else
    {
      MEMORY[0x1E0C80A78](v29, v30);
      *(&v51 - 2) = (uint64_t)v14;
      LOBYTE(v57) = 1;
      v34 = v53;
      v36 = sub_1B19FE774(0x100000000uLL, (void (*)(uint64_t))sub_1B1A02630, (uint64_t)(&v51 - 4), v35);
      v33 = v36;
      v53 = v34;
      v32 = HIDWORD(v36);
      sub_1B201FF60(v36, (uint64_t)&type metadata for IsSubEntityOf, (uint64_t)&off_1E637B1B0, v56);
    }
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v57 = v22;
    v38 = v33 | (v32 << 32);
    sub_1B1B85800(v38, a3, isUniquelyReferenced_nonNull_native);
    v22 = v57;
    swift_bridgeObjectRelease();
    sub_1B1BF78F4((uint64_t)v14, v38);
    sub_1B1A04628((uint64_t)v14, type metadata accessor for GraphScript);
    goto LABEL_28;
  }
  if (v23 != 1)
    goto LABEL_28;
  v24 = *(_QWORD *)(v22 + 16);
  if (!v24)
    goto LABEL_21;
  v25 = sub_1B1DC3CCC(a3);
  if ((v26 & 1) == 0)
  {
    v24 = 0;
LABEL_21:
    v28 = 0xFFFFFFFFLL;
    goto LABEL_22;
  }
  v27 = (unsigned int *)(*(_QWORD *)(v22 + 56) + 8 * v25);
  v28 = *v27;
  v24 = (unint64_t)v27[1] << 32;
LABEL_22:
  v39 = v24 | v28;
  v40 = sub_1B1D1559C(v24 | v28);
  if (v40)
  {
    sub_1B1CDBFEC(v5, v40, v41);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  sub_1B1DA4B24(v39);
  v42 = sub_1B1DC3CCC(a3);
  if ((v43 & 1) != 0)
  {
    v44 = v42;
    v45 = swift_isUniquelyReferenced_nonNull_native();
    v57 = v22;
    if ((v45 & 1) == 0)
    {
      sub_1B1EAA678();
      v22 = v57;
    }
    sub_1B1EA57F0(v44, v22);
    swift_bridgeObjectRelease();
  }
LABEL_28:
  if (!v55)
  {
    v57 = v22;
    v46 = v54;
    v47 = swift_retain();
    MEMORY[0x1E0C80A78](v47, v48);
    *(&v51 - 4) = (uint64_t)&v57;
    v49 = v52;
    *((_DWORD *)&v51 - 6) = v56;
    *((_DWORD *)&v51 - 5) = v49;
    *(&v51 - 2) = v46;
    swift_bridgeObjectRetain_n();
    sub_1B1D198D0(0, (void (*)(_BYTE *))sub_1B1A02680);
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B19FE1F8(unint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t (*v15)(uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  BOOL v20;
  int v21;
  uint64_t v22;
  int v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unsigned int *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unsigned int *v31;
  unint64_t v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char v43;
  unint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  unint64_t v56;
  uint64_t v57;

  v5 = v4;
  v54 = a2;
  v9 = HIDWORD(a1);
  v10 = type metadata accessor for TriggerScript(0);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v12);
  v14 = (char *)&v51 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53 = 0;
  sub_1B1791524(0, (unint64_t *)&unk_1EEF601C0, v15, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for VFXObjectScriptsDiff.Diff);
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = (char *)&v51 - v18;
  v56 = a1;
  v52 = v9;
  v20 = (_DWORD)a1 == -1 && (_DWORD)v9 == 0;
  v21 = v20;
  v55 = v21;
  if (v20 || (swift_retain(), v22 = sub_1B1D155B8(v56), swift_release(), !v22))
  {
    v22 = (uint64_t)sub_1B1B95524(MEMORY[0x1E0DEE9D8]);
    swift_bridgeObjectRelease();
  }
  sub_1B1A024C0(a4, (uint64_t)v19, (unint64_t *)&unk_1EEF601C0, type metadata accessor for TriggerScript);
  v23 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48))(v19, 2, v10);
  if (!v23)
  {
    v29 = sub_1B1A025EC((uint64_t)v19, (uint64_t)v14, type metadata accessor for TriggerScript);
    if (*(_QWORD *)(v22 + 16) && (v29 = sub_1B1DC3CCC(a3), (v30 & 1) != 0))
    {
      v31 = (unsigned int *)(*(_QWORD *)(v22 + 56) + 8 * v29);
      v33 = *v31;
      v32 = v31[1];
    }
    else
    {
      MEMORY[0x1E0C80A78](v29, v30);
      *(&v51 - 2) = (uint64_t)v14;
      LOBYTE(v57) = 1;
      v34 = v53;
      v36 = sub_1B19FE5EC(0x100000000uLL, (void (*)(uint64_t))sub_1B1A026A0, (uint64_t)(&v51 - 4), v35);
      v33 = v36;
      v53 = v34;
      v32 = HIDWORD(v36);
      sub_1B201FF60(v36, (uint64_t)&type metadata for IsSubEntityOf, (uint64_t)&off_1E637B1B0, v56);
    }
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v57 = v22;
    v38 = v33 | (v32 << 32);
    sub_1B1B85800(v38, a3, isUniquelyReferenced_nonNull_native);
    v22 = v57;
    swift_bridgeObjectRelease();
    sub_1B1BF78E8((uint64_t)v14, v38);
    sub_1B1A04628((uint64_t)v14, type metadata accessor for TriggerScript);
    goto LABEL_28;
  }
  if (v23 != 1)
    goto LABEL_28;
  v24 = *(_QWORD *)(v22 + 16);
  if (!v24)
    goto LABEL_21;
  v25 = sub_1B1DC3CCC(a3);
  if ((v26 & 1) == 0)
  {
    v24 = 0;
LABEL_21:
    v28 = 0xFFFFFFFFLL;
    goto LABEL_22;
  }
  v27 = (unsigned int *)(*(_QWORD *)(v22 + 56) + 8 * v25);
  v28 = *v27;
  v24 = (unint64_t)v27[1] << 32;
LABEL_22:
  v39 = v24 | v28;
  v40 = sub_1B1D1559C(v24 | v28);
  if (v40)
  {
    sub_1B1CDBFEC(v5, v40, v41);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  sub_1B1DA4B24(v39);
  v42 = sub_1B1DC3CCC(a3);
  if ((v43 & 1) != 0)
  {
    v44 = v42;
    v45 = swift_isUniquelyReferenced_nonNull_native();
    v57 = v22;
    if ((v45 & 1) == 0)
    {
      sub_1B1EAA678();
      v22 = v57;
    }
    sub_1B1EA57F0(v44, v22);
    swift_bridgeObjectRelease();
  }
LABEL_28:
  if (!v55)
  {
    v57 = v22;
    v46 = v54;
    v47 = swift_retain();
    MEMORY[0x1E0C80A78](v47, v48);
    *(&v51 - 4) = (uint64_t)&v57;
    v49 = v52;
    *((_DWORD *)&v51 - 6) = v56;
    *((_DWORD *)&v51 - 5) = v49;
    *(&v51 - 2) = v46;
    swift_bridgeObjectRetain_n();
    sub_1B1D198D0(0, (void (*)(_BYTE *))sub_1B1A05878);
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B19FE5EC(unint64_t a1, void (*a2)(uint64_t), uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  os_unfair_lock_s *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  os_unfair_lock_s *v21;
  uint64_t v22;

  v7 = *(_QWORD *)(a4 + 32);
  ecs_stack_allocator_push_snapshot(v7);
  v8 = ecs_stack_allocator_allocate(v7, 16, 8);
  *v8 = type metadata accessor for TriggerScript(0);
  v8[1] = &off_1E637DA80;
  v9 = *(_QWORD *)(a4 + 16);
  v10 = v9 + OBJC_IVAR____TtC3VFX13EntityManager_lock;
  v11 = *(os_unfair_lock_s **)(v9 + OBJC_IVAR____TtC3VFX13EntityManager_lock + 24);
  swift_retain();
  os_unfair_lock_lock(v11);
  v12 = sub_1B1DAD870((uint64_t)v8, 1, MEMORY[0x1E0DEE9D8]);
  v14 = v13;
  v15 = sub_1B1DA8760(v12);
  if ((v16 & 1) != 0 || (v17 = sub_1B1DA87D4(v14, v15), v18 = v17, (v17 & 0x100000000) != 0))
  {
    v19 = sub_1B1DC9E90(v8, 1);
    v18 = sub_1B1DA8838(v12, v14, v19, MEMORY[0x1E0DEE9D8]);
    swift_release();
  }
  v20 = *(_QWORD *)(*(_QWORD *)(v9 + 80) + 8 * v18 + 32);
  v21 = *(os_unfair_lock_s **)(v10 + 24);
  swift_retain();
  os_unfair_lock_unlock(v21);
  swift_release();
  v22 = sub_1B1F0A7F4(v20, 1, 1, a1 | ((HIDWORD(a1) & 1) << 32), a4, a2, a3);
  swift_release();
  ecs_stack_allocator_pop_snapshot(*(_QWORD *)(a4 + 32));
  return v22;
}

uint64_t sub_1B19FE774(unint64_t a1, void (*a2)(uint64_t), uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  os_unfair_lock_s *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  os_unfair_lock_s *v21;
  uint64_t v22;

  v7 = *(_QWORD *)(a4 + 32);
  ecs_stack_allocator_push_snapshot(v7);
  v8 = ecs_stack_allocator_allocate(v7, 16, 8);
  *v8 = type metadata accessor for GraphScript(0);
  v8[1] = &off_1E6370AB0;
  v9 = *(_QWORD *)(a4 + 16);
  v10 = v9 + OBJC_IVAR____TtC3VFX13EntityManager_lock;
  v11 = *(os_unfair_lock_s **)(v9 + OBJC_IVAR____TtC3VFX13EntityManager_lock + 24);
  swift_retain();
  os_unfair_lock_lock(v11);
  v12 = sub_1B1DAD870((uint64_t)v8, 1, MEMORY[0x1E0DEE9D8]);
  v14 = v13;
  v15 = sub_1B1DA8760(v12);
  if ((v16 & 1) != 0 || (v17 = sub_1B1DA87D4(v14, v15), v18 = v17, (v17 & 0x100000000) != 0))
  {
    v19 = sub_1B1DC9E90(v8, 1);
    v18 = sub_1B1DA8838(v12, v14, v19, MEMORY[0x1E0DEE9D8]);
    swift_release();
  }
  v20 = *(_QWORD *)(*(_QWORD *)(v9 + 80) + 8 * v18 + 32);
  v21 = *(os_unfair_lock_s **)(v10 + 24);
  swift_retain();
  os_unfair_lock_unlock(v21);
  swift_release();
  v22 = sub_1B1F0A7D8(v20, 1, 1, a1 | ((HIDWORD(a1) & 1) << 32), a4, a2, a3);
  swift_release();
  ecs_stack_allocator_pop_snapshot(*(_QWORD *)(a4 + 32));
  return v22;
}

uint64_t sub_1B19FE8FC(unint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t updated;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t inited;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t (*v31)(uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  BOOL v36;
  int v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int *v66;
  unsigned int v68;
  unsigned int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  char v76;
  ValueMetadata *v77;
  uint64_t *v78;
  unsigned __int8 v79;
  char v80;
  int v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  void *v87;
  uint64_t (*v88)(uint64_t);
  uint64_t result;
  char v90;
  unsigned int v91;
  uint64_t v92;
  unint64_t v93;
  char v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  char v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t *v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  __int128 v120;
  ValueMetadata *v121;
  _UNKNOWN **v122;
  _QWORD v123[5];
  unint64_t v124;
  uint64_t v125;
  uint64_t v126[3];

  v116 = a3;
  v118 = a2;
  v4 = HIDWORD(a1);
  sub_1B1791524(0, (unint64_t *)&unk_1EEF601C0, type metadata accessor for TriggerScript, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for VFXObjectScriptsDiff.Diff);
  v113 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v6);
  v112 = (uint64_t)&v107 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8, v9);
  v115 = (uint64_t)&v107 - v10;
  sub_1B1791524(0, (unint64_t *)&unk_1EEF5B930, type metadata accessor for GraphScript, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for VFXObjectScriptsDiff.Diff);
  v111 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v12);
  v110 = (uint64_t)&v107 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14, v15);
  v114 = (uint64_t)&v107 - v16;
  updated = type metadata accessor for ParticleUpdateScript(0);
  v18 = *(_QWORD *)(updated - 8);
  MEMORY[0x1E0C80A78](updated, v19);
  v109 = (uint64_t)&v107 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1B1791524(0, &qword_1EEF58980, v21, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for VFXObjectScriptsDiff.Diff);
  MEMORY[0x1E0C80A78](v22, v23);
  v25 = (char *)&v107 - v24;
  inited = type metadata accessor for ParticleInitScript(0);
  v27 = *(_QWORD *)(inited - 8);
  MEMORY[0x1E0C80A78](inited, v28);
  v30 = (char *)&v107 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1B1791524(0, &qword_1EEF58988, v31, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for VFXObjectScriptsDiff.Diff);
  MEMORY[0x1E0C80A78](v32, v33);
  v35 = (char *)&v107 - v34;
  v119 = a1;
  v107 = v4;
  v36 = (_DWORD)a1 == -1 && (_DWORD)v4 == 0;
  v37 = v36;
  v108 = v37;
  if (!v36)
  {
    swift_retain();
    v38 = sub_1B1FD568C((uint64_t)&type metadata for EmitterDescription, (uint64_t)&off_1E6391B38, v119);
    swift_release();
    if (v38)
    {
      v125 = 0;
      v126[0] = 0;
      v124 = MEMORY[0x1E0DEE9D8];
      v40 = v118;
      v39 = v119;
      sub_1B20C84A8(inited, (uint64_t)&off_1E6394B78, 5u, v119, v118, v126);
      sub_1B20C84B4(updated, (uint64_t)&off_1E639E488, 5u, v39, v40, &v125);
      v41 = type metadata accessor for VFXObjectScriptsDiff();
      sub_1B1A024C0((uint64_t)v116 + *(int *)(v41 + 24), (uint64_t)v35, &qword_1EEF58988, type metadata accessor for ParticleInitScript);
      v42 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v27 + 48))(v35, 2, inited);
      if (v42)
      {
        if (v42 == 1 && v126[0])
        {
          v43 = swift_retain_n();
          MEMORY[0x1B5E2064C](v43);
          if (*(_QWORD *)((v124 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v124 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
            sub_1B2228AF4();
          sub_1B2228B30();
          sub_1B2228AD0();
          swift_release();
        }
      }
      else
      {
        sub_1B1A025EC((uint64_t)v35, (uint64_t)v30, type metadata accessor for ParticleInitScript);
        if (v126[0])
        {
          v44 = *(_QWORD *)(v126[0] + 24);
          swift_retain();
          sub_1B1BF78D0((uint64_t)v30, v44);
        }
        else
        {
          v45 = v118;
          swift_retain();
          v46 = sub_1B1A01F04(inited, (uint64_t)&off_1E6394B78, 2, v119, v45);
          sub_1B1BF78D0((uint64_t)v30, *(_QWORD *)(v46 + 24));
          swift_release();
        }
        swift_release();
        sub_1B1A04628((uint64_t)v30, type metadata accessor for ParticleInitScript);
      }
      sub_1B1A024C0((uint64_t)v116 + *(int *)(v41 + 20), (uint64_t)v25, &qword_1EEF58980, type metadata accessor for ParticleUpdateScript);
      v47 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48))(v25, 2, updated);
      if (v47)
      {
        if (v47 == 1 && v125)
        {
          v48 = swift_retain_n();
          MEMORY[0x1B5E2064C](v48);
          if (*(_QWORD *)((v124 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v124 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
            sub_1B2228AF4();
          sub_1B2228B30();
          sub_1B2228AD0();
          swift_release();
        }
      }
      else
      {
        v49 = v109;
        sub_1B1A025EC((uint64_t)v25, v109, type metadata accessor for ParticleUpdateScript);
        if (v125)
        {
          v50 = *(_QWORD *)(v125 + 24);
          swift_retain();
          sub_1B1BF78DC(v49, v50);
        }
        else
        {
          v51 = v118;
          swift_retain();
          v52 = sub_1B1A01F04(updated, (uint64_t)&off_1E639E488, 3, v119, v51);
          sub_1B1BF78DC(v49, *(_QWORD *)(v52 + 24));
          swift_release();
        }
        swift_release();
        sub_1B1A04628(v49, type metadata accessor for ParticleUpdateScript);
      }
      v53 = v124;
      if (v124 >> 62)
      {
        swift_bridgeObjectRetain();
        v54 = sub_1B22296AC();
        swift_bridgeObjectRelease();
        if (v54)
          goto LABEL_31;
      }
      else
      {
        v54 = *(_QWORD *)((v124 & 0xFFFFFFFFFFFFF8) + 0x10);
        if (v54)
        {
LABEL_31:
          v55 = 0;
          v109 = v53 + 32;
          do
          {
            if ((v53 & 0xC000000000000001) != 0)
            {
              v56 = MEMORY[0x1B5E21018](v55, v53);
            }
            else
            {
              v56 = *(_QWORD *)(v109 + 8 * v55);
              swift_retain();
            }
            v57 = *(_QWORD *)(v56 + 16);
            swift_unownedRetainStrong();
            v58 = *(_DWORD *)(v56 + 24);
            v59 = *(_DWORD *)(v56 + 28);
            swift_release();
            v60 = *(_QWORD *)(v57 + 208);
            v61 = *(_QWORD *)(v60 + 16);
            swift_retain();
            if (v61)
            {
              v62 = sub_1B1DC3AC8((uint64_t)&type metadata for IsSubEntityOf);
              if ((v63 & 1) != 0)
              {
                v64 = *(_QWORD *)(*(_QWORD *)(v60 + 56) + 24 * v62);
                v65 = *(_QWORD *)(v64 + 16);
                swift_bridgeObjectRetain();
                if (!v65)
                {
LABEL_48:
                  swift_release();
                  swift_bridgeObjectRelease();
                  goto LABEL_35;
                }
                v66 = (unsigned int *)(v64 + 44);
                while (*(v66 - 3) != v58 || *(v66 - 2) != v59)
                {
                  v66 += 4;
                  if (!--v65)
                    goto LABEL_48;
                }
                v69 = *(v66 - 1);
                v68 = *v66;
                swift_release();
                swift_bridgeObjectRelease();
                v70 = *(_QWORD *)(v56 + 16);
                swift_unownedRetainStrong();
                swift_release();
                if (v69 == -1)
                {
                  if (!v68)
                    goto LABEL_35;
                  swift_retain();
                }
                else
                {
                  v71 = OBJC_IVAR____TtC3VFX13EntityManager__entries;
                  swift_retain();
                  if ((v69 & 0x80000000) == 0 && *(_QWORD *)(v70 + v71 + 8) > (int)v69)
                  {
                    v72 = *(_QWORD *)(v70 + v71);
                    if (v68 == -1 || *(_DWORD *)(v72 + 12 * (int)v69 + 8) == v68)
                    {
                      v73 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v70 + 80)
                                                  + 8 * *(__int16 *)(v72 + 12 * (int)v69 + 6)
                                                  + 32)
                                      + 16);
                      v74 = *(_QWORD *)(v73 + 128);
                      if (*(_QWORD *)(v74 + 16))
                      {
                        v75 = sub_1B1DC3AC8((uint64_t)&type metadata for EmitterDescription);
                        if ((v76 & 1) != 0)
                        {
                          v77 = *(ValueMetadata **)(*(_QWORD *)(v73 + 24)
                                                  + 16 * *(_QWORD *)(*(_QWORD *)(v74 + 56) + 8 * v75)
                                                  + 32);
                          swift_release();
                          if (v77 == &type metadata for EmitterDescription)
                          {
                            v122 = &off_1E636F320;
                            *(_QWORD *)&v120 = __PAIR64__(v68, v69);
                            v121 = &type metadata for VFXEmitter;
                            *((_QWORD *)&v120 + 1) = v70;
                            sub_1B1A02518(&v120, (uint64_t)v123);
                            v78 = sub_1B19FA070(v123, v123[3]);
                            sub_1B19FFB38(v56, *v78, v78[1]);
                            v80 = v79;
                            v81 = v79;
                            _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v123);
                            if (v81 != 5)
                              sub_1B19FFCBC(v56, v80, v119, v118);
                          }
                          goto LABEL_35;
                        }
                      }
                    }
                  }
                }
              }
            }
            swift_release();
LABEL_35:
            swift_release();
            ++v55;
          }
          while (v55 != v54);
        }
      }
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
    }
  }
  v82 = 9;
  v83 = &byte_1E638AB70;
  do
  {
    v91 = *v83++;
    v90 = v91;
    if (v91 > 1)
    {
      v98 = *(uint64_t *)((char *)v116 + *(int *)(type metadata accessor for VFXObjectScriptsDiff() + 28));
      if (*(_QWORD *)(v98 + 16) && (v99 = sub_1B1DC3CCC(v90), (v100 & 1) != 0))
      {
        v101 = *(_QWORD *)(v98 + 56) + *(_QWORD *)(v113 + 72) * v99;
        v102 = v112;
        sub_1B1A024C0(v101, v112, (unint64_t *)&unk_1EEF601C0, type metadata accessor for TriggerScript);
        v103 = v102;
        v104 = v115;
        sub_1B1A000F0(v103, v115, (uint64_t)&unk_1EEF601C0, (uint64_t)type metadata accessor for TriggerScript, (uint64_t)type metadata accessor for VFXObjectScriptsDiff.Diff, (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))sub_1B1791524);
      }
      else
      {
        v105 = type metadata accessor for TriggerScript(0);
        v104 = v115;
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v105 - 8) + 56))(v115, 1, 2, v105);
      }
      sub_1B19FE1F8(v119, v118, v90, v104);
      v86 = v115;
      v87 = &unk_1EEF601C0;
      v88 = type metadata accessor for TriggerScript;
    }
    else
    {
      v92 = *v116;
      if (*(_QWORD *)(*v116 + 16) && (v93 = sub_1B1DC3CCC(v90), (v94 & 1) != 0))
      {
        v95 = *(_QWORD *)(v92 + 56) + *(_QWORD *)(v111 + 72) * v93;
        v96 = v110;
        sub_1B1A024C0(v95, v110, (unint64_t *)&unk_1EEF5B930, type metadata accessor for GraphScript);
        v97 = v96;
        v85 = v114;
        sub_1B1A000F0(v97, v114, (uint64_t)&unk_1EEF5B930, (uint64_t)type metadata accessor for GraphScript, (uint64_t)type metadata accessor for VFXObjectScriptsDiff.Diff, (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))sub_1B1791524);
      }
      else
      {
        v84 = type metadata accessor for GraphScript(0);
        v85 = v114;
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v84 - 8) + 56))(v114, 1, 2, v84);
      }
      sub_1B19FDE04(v119, v118, v90, v85);
      v86 = v114;
      v87 = &unk_1EEF5B930;
      v88 = type metadata accessor for GraphScript;
    }
    result = sub_1B1A057EC(v86, (uint64_t)v87, (uint64_t)v88, (uint64_t)type metadata accessor for VFXObjectScriptsDiff.Diff, (uint64_t (*)(_QWORD))sub_1B1791524);
    --v82;
  }
  while (v82);
  if (!v108
    && (uint64_t)(v119 << 32) >= (uint64_t)0xFFFFFFFF00000001
    && (int)v119 < *(_QWORD *)(v117 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8))
  {
    v106 = *(_QWORD *)(v117 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
    if ((_DWORD)v107 == -1 || *(_DWORD *)(v106 + 12 * (int)v119 + 8) == (_DWORD)v107)
      return sub_1B2094EFC(*(uint64_t **)(*(_QWORD *)(v117 + 136) + 8 * *(int *)(v106 + 12 * (int)v119) + 32));
  }
  return result;
}

uint64_t *sub_1B19FF3C0()
{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  int *v18;
  int v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  _QWORD *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  unint64_t v34;
  id v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  os_unfair_lock_s *v50;
  int v51;
  id v53;
  _QWORD *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t *v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD v65[5];
  _QWORD v66[6];
  _BYTE v67[32];
  uint64_t v68;
  _OWORD v69[2];
  uint64_t v70;
  uint64_t v71[12];
  uint64_t v72[12];
  _QWORD v73[7];
  uint64_t v74;
  uint64_t v75;
  _OWORD v76[12];
  _OWORD v77[2];
  uint64_t v78;
  uint64_t v79;
  int v80;
  char v81;
  uint64_t v82;
  char v83;
  uint64_t v84;
  id v85;

  v2 = v1;
  v3 = v0;
  v4 = type metadata accessor for VFXObjectScriptsDiff();
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (uint64_t *)((char *)&v54 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (uint64_t *)((char *)&v54 - v10);
  if (qword_1ED4B7DB8 != -1)
    swift_once();
  v79 = qword_1ED4D09F8;
  v80 = 0;
  v81 = 2;
  v82 = 0;
  v83 = 2;
  v84 = 0;
  swift_retain();
  sub_1B1E38AA8(3, (uint64_t)v69);
  swift_release();
  v77[0] = v69[0];
  v77[1] = v69[1];
  v78 = v70;
  v12 = *(_QWORD *)(v0 + OBJC_IVAR____TtC3VFX13EntityManager_queryManager);
  sub_1B1E8FCE4(v0, (uint64_t)v77, 0x200000000, v71);
  sub_1B1A000F0((uint64_t)v71, (uint64_t)v76, (uint64_t)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult, (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))sub_1B1A02758);
  if (*(_QWORD *)&v76[0])
  {
    v76[8] = v76[2];
    v76[9] = v76[3];
    v76[10] = v76[4];
    v76[11] = v76[5];
    v76[6] = v76[0];
    v76[7] = v76[1];
    v13 = sub_1B1BEA85C();
    sub_1B19ED748(v71);
    v14 = *(_QWORD *)(v13 + 16);
    if (v14)
    {
LABEL_5:
      v62 = v12;
      v58 = v11;
      v59 = v7;
      v15 = 0;
      v16 = (_QWORD *)(v3 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
      v17 = v13 + 32;
      v56 = 0x80000001B232B9B0;
      v57 = OBJC_IVAR____TtC3VFX13EntityManager_logger;
      v63 = v13;
      v64 = v3;
      do
      {
        v18 = (int *)(v17 + 8 * v15);
        v19 = v18[1];
        v20 = *v18;
        v21 = (_DWORD)v20 == -1 && v19 == 0;
        if (!v21 && (v20 & 0x80000000) == 0 && v16[1] > v20)
        {
          v22 = *v16 + 12 * (int)v20;
          if (v19 == -1 || *(_DWORD *)(v22 + 8) == v19)
          {
            v24 = *(_QWORD *)(*(_QWORD *)(v3 + 136) + 8 * *(int *)(*v16 + 12 * (int)v20) + 32);
            v25 = *(_QWORD *)(v24 + 48);
            v26 = *(_QWORD *)(v25 + 16);
            if (v26)
            {
              v27 = *(__int16 *)(v22 + 4);
              v28 = (_QWORD *)(v25 + 56);
              while ((ValueMetadata *)*(v28 - 3) != &type metadata for GraphComponent)
              {
                v28 += 5;
                if (!--v26)
                  goto LABEL_9;
              }
              v29 = v2;
              sub_1B19FC384((_QWORD *)(*(_QWORD *)(v24 + 128) + *v28 + 40 * v27), (uint64_t)v67);
              sub_1B1A00060((uint64_t)v67, (uint64_t)v66);
              v30 = MEMORY[0x1B5E240CC](v66);
              v31 = v66[1];
              sub_1B19FC350((uint64_t)v66);
              if (v30)
              {
                v85 = v29;
                v61 = (char *)objc_msgSend(objc_allocWithZone((Class)type metadata accessor for GraphDiagnostics()), sel_init);
                swift_getObjectType();
                v60 = v30;
                v32 = sub_1B1F56278();
                if (v32 == 0xFFFFFFFFLL)
                {
                  v33 = v85;
                  v3 = v64;
                }
                else
                {
                  v34 = v32;
                  v55 = v31;
                  v3 = v64;
                  sub_1B1D155C4(v32, (uint64_t)v65);
                  if (v65[0] || v65[1] != 1)
                  {
                    sub_1B1A0009C((uint64_t)v65, (uint64_t)v66);
                    swift_retain();
                    v54 = sub_1B2147E80(1);
                    swift_release();
                    v35 = v85;
                    sub_1B19FC46C((uint64_t)v54, v60, v55, v61, MEMORY[0x1E0DEE9E8], v59);
                    v85 = v35;
                    if (v35)
                    {
                      if (*(_QWORD *)(*(_QWORD *)&v61[OBJC_IVAR____TtC3VFX16GraphDiagnostics_diagnostics] + 16))
                      {
                        sub_1B19FC3B8((uint64_t)v66);
                        swift_release();

                      }
                      else
                      {
                        v37 = *(_QWORD *)(v3 + v57);
                        swift_retain();
                        v38 = sub_1B2228E90();
                        v65[0] = 0;
                        (*(void (**)(uint64_t, _QWORD *, unint64_t, unint64_t))(*(_QWORD *)v37 + 88))(v38, v65, 0xD00000000000003ELL, v56);
                        swift_release();
                        swift_release();

                        sub_1B19FC3B8((uint64_t)v66);
                      }
                      v33 = 0;
                    }
                    else
                    {
                      v36 = v58;
                      sub_1B1A025EC((uint64_t)v59, (uint64_t)v58, (uint64_t (*)(_QWORD))type metadata accessor for VFXObjectScriptsDiff);
                      sub_1B19FE8FC(v34, v3, v36);
                      swift_release();
                      sub_1B19FC3B8((uint64_t)v66);
                      sub_1B1A04628((uint64_t)v36, (uint64_t (*)(_QWORD))type metadata accessor for VFXObjectScriptsDiff);
                      v33 = v85;
                    }
                  }
                  else
                  {
                    sub_1B1A057EC((uint64_t)v65, (uint64_t)&unk_1EEF58978, (uint64_t)&type metadata for GraphComponent, (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD))sub_1B1A02758);
                    v33 = v85;
                  }
                }
                v39 = v61;
                v40 = *(_QWORD *)&v61[OBJC_IVAR____TtC3VFX16GraphDiagnostics_diagnostics];
                if (*(_QWORD *)(v40 + 16))
                {
                  v53 = *(id *)(v40 + 32);
                  swift_willThrow();

                  swift_unknownObjectRelease();
                  sub_1B19ED720((uint64_t)v69);
                  sub_1B19FC3B8((uint64_t)v67);
                  return (uint64_t *)swift_bridgeObjectRelease();
                }
                sub_1B19FC3B8((uint64_t)v67);

                swift_unknownObjectRelease();
                v2 = v33;
              }
              else
              {
                sub_1B19FC3B8((uint64_t)v67);
                v2 = v29;
                v3 = v64;
              }
            }
          }
        }
LABEL_9:
        ++v15;
      }
      while (v15 != v14);
    }
  }
  else
  {
    v13 = MEMORY[0x1E0DEE9D8];
    v14 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
    if (v14)
      goto LABEL_5;
  }
  swift_bridgeObjectRelease();
  sub_1B1E8FCE4(v3, (uint64_t)v77, 0x200000000, v72);
  sub_1B1A000F0((uint64_t)v72, (uint64_t)v73, (uint64_t)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult, (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))sub_1B1A02758);
  if (!v73[0])
    return (uint64_t *)sub_1B19ED720((uint64_t)v69);
  if (v75 >= 1 && (v41 = v74) != 0)
  {
    v85 = v2;
    v42 = v73[5];
    swift_retain();
    swift_retain();
    swift_retain();
    v43 = 48 * v41;
    v44 = (uint64_t *)(v42 + 40);
    do
    {
      v49 = *v44;
      v50 = *(os_unfair_lock_s **)(*v44 + 376);
      swift_retain();
      os_unfair_lock_lock(v50);
      os_unfair_lock_lock(*(os_unfair_lock_t *)(v49 + 344));
      LODWORD(v50) = *(_DWORD *)(v49 + 24);
      swift_retain();
      v68 = 0;
      memset(v67, 0, sizeof(v67));
      memset(v66, 0, 40);
      v51 = sub_1B1DA4ED8((int)v50, 0, 0, (uint64_t)&type metadata for GraphComponent, (uint64_t)&off_1E637F718, (uint64_t)v67, (uint64_t)v66);
      swift_release();
      sub_1B1A04628((uint64_t)v66, (uint64_t (*)(_QWORD))sub_1B19FFFFC);
      sub_1B1A04628((uint64_t)v67, (uint64_t (*)(_QWORD))sub_1B19FFFFC);
      if (sub_1B1A10B20(v51))
      {
        sub_1B1A10BB0(v51);
      }
      else
      {
        v45 = *(_QWORD *)(v49 + 232);
        v46 = *(_QWORD *)(v49 + 240);
        v47 = *(unsigned __int8 *)(v49 + 120);
        v48 = *(unsigned int *)(v49 + 28);
        v67[0] = *(_BYTE *)(v49 + 32);
        sub_1B1FD8C68(v45, v46, v51, v47, v48 | ((unint64_t)v67[0] << 32), 0, 0, 0);
      }
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v49 + 344));
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v49 + 376));
      swift_release();
      v44 += 6;
      v43 -= 48;
    }
    while (v43);
    sub_1B19ED748(v72);
    sub_1B19ED720((uint64_t)v69);
    return sub_1B19ED748(v72);
  }
  else
  {
    sub_1B19ED720((uint64_t)v69);
    return sub_1B19ED748(v72);
  }
}

uint64_t sub_1B19FFB38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;

  v6 = sub_1B201BF04(1, a2, a3);
  v7 = *(_QWORD *)(v6 + 16);
  if (v7)
  {
    v8 = 0;
    v9 = (_DWORD *)(v6 + 36);
    while (*(v9 - 1) != *(_DWORD *)(a1 + 24) || *v9 != *(_DWORD *)(a1 + 28))
    {
      v9 += 4;
      if (v7 == ++v8)
        goto LABEL_8;
    }
    goto LABEL_30;
  }
LABEL_8:
  swift_bridgeObjectRelease();
  v11 = sub_1B201BF04(2, a2, a3);
  v12 = *(_QWORD *)(v11 + 16);
  if (v12)
  {
    v8 = 0;
    v13 = (_DWORD *)(v11 + 36);
    while (*(v13 - 1) != *(_DWORD *)(a1 + 24) || *v13 != *(_DWORD *)(a1 + 28))
    {
      v13 += 4;
      if (v12 == ++v8)
        goto LABEL_15;
    }
    goto LABEL_30;
  }
LABEL_15:
  swift_bridgeObjectRelease();
  v15 = sub_1B201BF04(3, a2, a3);
  v16 = *(_QWORD *)(v15 + 16);
  if (v16)
  {
    v8 = 0;
    v17 = (_DWORD *)(v15 + 36);
    while (*(v17 - 1) != *(_DWORD *)(a1 + 24) || *v17 != *(_DWORD *)(a1 + 28))
    {
      v17 += 4;
      if (v16 == ++v8)
        goto LABEL_22;
    }
    goto LABEL_30;
  }
LABEL_22:
  swift_bridgeObjectRelease();
  v19 = sub_1B201BF04(4, a2, a3);
  v20 = *(_QWORD *)(v19 + 16);
  if (v20)
  {
    v8 = 0;
    v21 = (_DWORD *)(v19 + 36);
    while (*(v21 - 1) != *(_DWORD *)(a1 + 24) || *v21 != *(_DWORD *)(a1 + 28))
    {
      v21 += 4;
      if (v20 == ++v8)
        goto LABEL_29;
    }
LABEL_30:
    swift_bridgeObjectRelease();
    return v8;
  }
LABEL_29:
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_1B19FFCBC(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v20;
  char v21;
  char *v22;
  char *v23;
  int v24;
  int v25;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  unint64_t v32;
  _QWORD v33[3];
  char v34;
  _BYTE v35[32];
  uint64_t v36;

  v8 = *(_QWORD *)(a1 + 32);
  v9 = swift_conformsToProtocol2();
  if (v9)
    v10 = v9;
  else
    v10 = 0;
  if (!v9)
    v8 = 0;
  swift_retain();
  if (v8 && (v11 = *((_QWORD *)sub_1B1A22E2C(v8, v10) + 2), swift_bridgeObjectRelease(), v11))
  {
    v31 = a2;
    v32 = a3;
    v12 = sub_1B201BF04(a2, a3, a4);
    v36 = v12;
    v13 = *(_QWORD *)(v12 + 16);
    if (v13)
    {
      v14 = (char *)v12;
      v15 = 0;
      v16 = 0;
      while (1)
      {
        v17 = v16 + 1;
        if (*(_DWORD *)(v12 + v15 + 32) == *(_DWORD *)(a1 + 24) && *(_DWORD *)(v12 + v15 + 36) == *(_DWORD *)(a1 + 28))
          break;
        v15 += 16;
        ++v16;
        if (v13 == v17)
        {
          v16 = *(_QWORD *)(v12 + 16);
          goto LABEL_19;
        }
      }
      if (v13 - 1 != v16)
      {
        v13 = v16 + 1;
        do
        {
          v24 = *(_DWORD *)&v14[v15 + 48];
          v25 = *(_DWORD *)&v14[v15 + 52];
          if (v24 != *(_DWORD *)(a1 + 24) || v25 != *(_DWORD *)(a1 + 28))
          {
            if (v13 != v16)
            {
              v27 = &v14[16 * v16 + 32];
              v28 = *(_QWORD *)v27;
              v29 = *((_QWORD *)v27 + 1);
              v30 = *(_QWORD *)&v14[v15 + 56];
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                v14 = sub_1B1FFEDCC((uint64_t)v14);
              v22 = &v14[16 * v16];
              *((_DWORD *)v22 + 8) = v24;
              *((_DWORD *)v22 + 9) = v25;
              *((_QWORD *)v22 + 5) = v30;
              v23 = &v14[v15];
              *((_QWORD *)v23 + 6) = v28;
              *((_QWORD *)v23 + 7) = v29;
              v36 = (uint64_t)v14;
            }
            ++v16;
          }
          ++v13;
          v15 += 16;
        }
        while (v13 != *((_QWORD *)v14 + 2));
      }
    }
    else
    {
      v16 = 0;
    }
LABEL_19:
    sub_1B1C93304(v16, v13);
    v20 = *(_QWORD *)(a4 + OBJC_IVAR____TtC3VFX13EntityManager_replicationStream);
    swift_retain();
    if (v20)
    {
      v21 = *(_BYTE *)(v20 + 80);
      MEMORY[0x1B5E240CC](v20 + 48);
      v20 = *(_QWORD *)(v20 + 56);
    }
    else
    {
      v21 = 0;
    }
    swift_unknownObjectUnownedInit();
    v33[0] = a4;
    v33[2] = v20;
    swift_unknownObjectUnownedAssign();
    swift_bridgeObjectRetain();
    swift_unownedRetain();
    swift_unknownObjectRelease();
    v34 = v21;
    sub_1B1A02530((uint64_t)v33, (uint64_t)v35);
    sub_1B201C61C((uint64_t)v35, v31);
    sub_1B1A0256C((uint64_t)v35);
    sub_1B1E31340(1);
    swift_bridgeObjectRelease();
    swift_release();
    sub_1B1E87898(*(_QWORD *)(a1 + 24), v32);
    swift_retain();
    sub_1B1E2C1BC(0, a4, a1);
    swift_bridgeObjectRelease();
    return swift_release();
  }
  else
  {
    swift_retain();
    sub_1B1E2C08C(0, a4, a1);
    return swift_release();
  }
}

uint64_t type metadata accessor for VFXObjectScriptsDiff()
{
  uint64_t result;

  result = qword_1EEF58A18;
  if (!qword_1EEF58A18)
    return swift_getSingletonMetadata();
  return result;
}

void sub_1B19FFFFC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED4B89E0)
  {
    sub_1B1A025A0(255, (unint64_t *)&qword_1ED4B89D0);
    v0 = sub_1B2229124();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED4B89E0);
  }
}

uint64_t sub_1B1A00060(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for VFXBridgeableReference(a2, a1);
  return a2;
}

uint64_t sub_1B1A0009C(uint64_t a1, uint64_t a2)
{
  swift_unknownObjectWeakTakeInit();
  *(_QWORD *)(a2 + 8) = *(_QWORD *)(a1 + 8);
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  return a2;
}

uint64_t type metadata accessor for VFXObjectScriptsDiff.Diff(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B19E5E34(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for VFXObjectScriptsDiff.Diff);
}

uint64_t sub_1B1A000F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(_QWORD, uint64_t, uint64_t, uint64_t))
{
  uint64_t v8;

  v8 = a6(0, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a2, a1, v8);
  return a2;
}

_QWORD *sub_1B1A00140(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  uint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;

  sub_1B1A028D4();
  v2 = sub_1B22296B8();
  v3 = 0;
  v26 = a1;
  v27 = (_QWORD *)v2;
  v6 = *(_QWORD *)(a1 + 64);
  v5 = a1 + 64;
  v4 = v6;
  v7 = 1 << *(_BYTE *)(v5 - 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & v4;
  v24 = (unint64_t)(v7 + 63) >> 6;
  v25 = v2 + 64;
  v23 = v5;
  v22 = v5 + 40;
  while (1)
  {
    if (v9)
    {
      v28 = (v9 - 1) & v9;
      v29 = v3;
      v10 = __clz(__rbit64(v9)) | (v3 << 6);
      goto LABEL_5;
    }
    v19 = v3 + 1;
    if (v3 + 1 >= v24)
      return v27;
    v20 = *(_QWORD *)(v23 + 8 * v19);
    if (!v20)
    {
      v19 = v3 + 2;
      if (v3 + 2 >= v24)
        return v27;
      v20 = *(_QWORD *)(v23 + 8 * v19);
      if (!v20)
      {
        v19 = v3 + 3;
        if (v3 + 3 >= v24)
          return v27;
        v20 = *(_QWORD *)(v23 + 8 * v19);
        if (!v20)
        {
          v19 = v3 + 4;
          if (v3 + 4 >= v24)
            return v27;
          v20 = *(_QWORD *)(v23 + 8 * v19);
          if (!v20)
            break;
        }
      }
    }
LABEL_18:
    v28 = (v20 - 1) & v20;
    v10 = __clz(__rbit64(v20)) + (v19 << 6);
    v29 = v19;
LABEL_5:
    v11 = *(_QWORD *)(v26 + 48) + 24 * v10;
    v12 = *(void **)v11;
    v13 = *(void **)(v11 + 8);
    v14 = *(unsigned __int8 *)(v11 + 20);
    v15 = *(unsigned int *)(v11 + 16);
    v16 = *(_QWORD *)(*(_QWORD *)(v26 + 56) + 8 * v10);
    type metadata accessor for Graph();
    v17 = swift_allocObject();
    *(_QWORD *)(v17 + 16) = v16;
    *(_QWORD *)(v25 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v10;
    v18 = v27[6] + 24 * v10;
    *(_QWORD *)v18 = v12;
    *(_QWORD *)(v18 + 8) = v13;
    *(_BYTE *)(v18 + 20) = v14;
    *(_DWORD *)(v18 + 16) = v15;
    *(_QWORD *)(v27[7] + 8 * v10) = v17;
    ++v27[2];
    sub_1B1A026F0(v12, v13, v15 | (v14 << 32));
    swift_bridgeObjectRetain();
    v3 = v29;
    v9 = v28;
  }
  while (v24 - 5 != v3)
  {
    v20 = *(_QWORD *)(v22 + 8 * v3++);
    if (v20)
    {
      v19 = v3 + 4;
      goto LABEL_18;
    }
  }
  return v27;
}

void sub_1B1A00374(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1B1A003B0()
{
  uint64_t v0;

  swift_retain();
  return v0;
}

uint64_t sub_1B1A00790(uint64_t a1, uint64_t a2)
{
  uint64_t (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  int v64;
  unint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t Strong;
  uint64_t v72;
  int v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t inited;
  _QWORD *v78;
  _QWORD *v79;
  uint64_t v80;
  unint64_t *v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void (*v92)(char *, uint64_t, uint64_t, uint64_t);
  unsigned int (*v93)(uint64_t, uint64_t, uint64_t);
  uint64_t v94;
  char *v95;
  uint64_t v96;
  void (*v97)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v98;
  uint64_t v99;
  char v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  char v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  void (*v112)(uint64_t, char *, uint64_t);
  uint64_t v113;
  char *v114;
  uint64_t v115;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v117;
  char v118;
  unint64_t v119;
  char v120;
  uint64_t v121;
  uint64_t v122;
  char v123;
  char v124;
  char v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  _QWORD *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  char v136;
  char v137;
  uint64_t v138;
  char v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  unint64_t v143;
  void (*v144)(unint64_t, uint64_t);
  uint64_t v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  uint64_t v150;
  void (*v151)(uint64_t, char *, uint64_t);
  uint64_t v152;
  char v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  char *v158;
  void (*v159)(char *, char *, uint64_t);
  uint64_t result;
  uint64_t v161;
  char *v162;
  char *v163;
  char *v164;
  char *v165;
  char *v166;
  unsigned int (*v167)(uint64_t, uint64_t, uint64_t);
  void (*v168)(char *, uint64_t, uint64_t);
  void (*v169)(char *, uint64_t, uint64_t, uint64_t);
  char *v170;
  char *v171;
  unint64_t v172;
  char *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  int64_t v178;
  char *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  int64_t v187;
  uint64_t v188;
  uint64_t v189;
  char *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  _QWORD *v194;
  uint64_t v195;
  uint64_t v196;
  int v197;
  unint64_t v198;
  uint64_t v199;
  uint64_t v200;

  v185 = a2;
  v3 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
  sub_1B1791524(0, qword_1ED4B7E00, (uint64_t (*)(uint64_t))type metadata accessor for ScriptIndex, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v4, v5);
  v171 = (char *)&v161 - v6;
  v181 = type metadata accessor for ScriptIndex();
  v180 = *(_QWORD *)(v181 - 8);
  MEMORY[0x1E0C80A78](v181, v7);
  v174 = (uint64_t)&v161 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9, v10);
  v176 = (uint64_t)&v161 - v11;
  sub_1B1791524(0, (unint64_t *)&qword_1ED4B7B50, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], v3);
  MEMORY[0x1E0C80A78](v12, v13);
  v164 = (char *)&v161 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15, v16);
  v165 = (char *)&v161 - v17;
  MEMORY[0x1E0C80A78](v18, v19);
  v166 = (char *)&v161 - v20;
  MEMORY[0x1E0C80A78](v21, v22);
  v179 = (char *)&v161 - v23;
  v182 = sub_1B222826C();
  v183 = *(_QWORD *)(v182 - 8);
  MEMORY[0x1E0C80A78](v182, v24);
  v163 = (char *)&v161 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v26, v27);
  v172 = (unint64_t)&v161 - v28;
  MEMORY[0x1E0C80A78](v29, v30);
  v170 = (char *)&v161 - v31;
  MEMORY[0x1E0C80A78](v32, v33);
  v162 = (char *)&v161 - v34;
  MEMORY[0x1E0C80A78](v35, v36);
  v173 = (char *)&v161 - v37;
  v38 = type metadata accessor for GraphScript(0);
  v39 = *(_QWORD *)(v38 - 8);
  MEMORY[0x1E0C80A78](v38, v40);
  v188 = (uint64_t)&v161 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1B1791524(0, (unint64_t *)&unk_1EEF5B930, type metadata accessor for GraphScript, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for VFXObjectScriptsDiff.Diff);
  v191 = *(_QWORD *)(v42 - 8);
  MEMORY[0x1E0C80A78](v42, v43);
  v45 = (char *)&v161 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v46, v47);
  v194 = (uint64_t *)((char *)&v161 - v48);
  MEMORY[0x1E0C80A78](v49, v50);
  v195 = (uint64_t)&v161 - v51;
  sub_1B1A05728();
  v52 = sub_1B22296B8();
  v53 = 0;
  v54 = 1 << *(_BYTE *)(a1 + 32);
  v55 = -1;
  if (v54 < 64)
    v55 = ~(-1 << v54);
  v56 = v55 & *(_QWORD *)(a1 + 64);
  v193 = v52;
  v189 = v52 + 64;
  v187 = (unint64_t)(v54 + 63) >> 6;
  v178 = v187 - 5;
  v186 = a1 + 64;
  v177 = a1 + 104;
  v192 = a1;
  v196 = v38;
  v190 = v45;
  v184 = v39;
  while (1)
  {
    if (v56)
    {
      v199 = (v56 - 1) & v56;
      v61 = __clz(__rbit64(v56)) | (v53 << 6);
    }
    else
    {
      v62 = v53 + 1;
      if (v53 + 1 >= v187)
        return v193;
      v63 = *(_QWORD *)(v186 + 8 * v62);
      if (!v63)
      {
        v62 = v53 + 2;
        if (v53 + 2 >= v187)
          return v193;
        v63 = *(_QWORD *)(v186 + 8 * v62);
        if (!v63)
        {
          v62 = v53 + 3;
          if (v53 + 3 >= v187)
            return v193;
          v63 = *(_QWORD *)(v186 + 8 * v62);
          if (!v63)
          {
            v62 = v53 + 4;
            if (v53 + 4 >= v187)
              return v193;
            v63 = *(_QWORD *)(v186 + 8 * v62);
            if (!v63)
            {
              while (v178 != v53)
              {
                v63 = *(_QWORD *)(v177 + 8 * v53++);
                if (v63)
                {
                  v62 = v53 + 4;
                  goto LABEL_19;
                }
              }
              return v193;
            }
          }
        }
      }
LABEL_19:
      v199 = (v63 - 1) & v63;
      v61 = __clz(__rbit64(v63)) + (v62 << 6);
      v53 = v62;
    }
    v64 = *(unsigned __int8 *)(*(_QWORD *)(v192 + 48) + v61);
    v65 = *(_QWORD *)(v191 + 72) * v61;
    v66 = v195;
    sub_1B1A024C0(*(_QWORD *)(v192 + 56) + v65, v195, (unint64_t *)&unk_1EEF5B930, type metadata accessor for GraphScript);
    sub_1B1A024C0(v66, (uint64_t)v45, (unint64_t *)&unk_1EEF5B930, type metadata accessor for GraphScript);
    v67 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v39 + 48))(v45, 2, v196);
    v198 = v65;
    v197 = v64;
    if (v67)
    {
      v57 = v53;
      v58 = v194;
      sub_1B1A024C0(v66, (uint64_t)v194, (unint64_t *)&unk_1EEF5B930, type metadata accessor for GraphScript);
      v59 = v66;
      goto LABEL_5;
    }
    v68 = v188;
    sub_1B1A025EC((uint64_t)v45, v188, type metadata accessor for GraphScript);
    v69 = v194;
    sub_1B1792810(v68, (uint64_t)v194, type metadata accessor for GraphScript);
    v70 = v185;
    Strong = swift_weakLoadStrong();
    if (Strong)
    {
      v72 = Strong;
      v73 = *(unsigned __int8 *)(v70 + OBJC_IVAR____TtC3VFX15DefaultRemapper_isReversed);
      v74 = *(void **)(Strong + 16);
      objc_msgSend(v74, sel_lock);
      v75 = 24;
      if (v73)
        v75 = 32;
      v76 = *(_QWORD *)(v72 + v75);
      swift_bridgeObjectRetain();
      objc_msgSend(v74, sel_unlock);
      swift_release();
    }
    else
    {
      v76 = MEMORY[0x1E0DEE9E0];
    }
    type metadata accessor for RemapContext();
    inited = swift_initStackObject();
    v78 = sub_1B1B7DC84(MEMORY[0x1E0DEE9D8]);
    *(_QWORD *)(inited + 24) = v76;
    *(_QWORD *)(inited + 32) = v78;
    *(_BYTE *)(inited + 16) = 0;
    v79 = (_QWORD *)*v69;
    v80 = *(_QWORD *)(*v69 + 16);
    if (v80)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v79 = sub_1B1FFED40(v79);
      v81 = v79 + 4;
      do
      {
        v82 = *v81;
        sub_1B1A00374(inited, *v81);
        v84 = v83;
        swift_retain();
        sub_1B1A05610(v82);
        *v81 = v84;
        v81[2] = 0;
        *((_BYTE *)v81 + 24) = 1;
        swift_release();
        v81 += 4;
        --v80;
      }
      while (v80);
      v69 = v194;
      *v194 = v79;
      if (*(_BYTE *)(inited + 16) == 1)
        break;
    }
LABEL_39:
    v57 = v53;
    swift_release();
    sub_1B1A04628(v188, type metadata accessor for GraphScript);
    v39 = v184;
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v184 + 56))(v69, 0, 2, v196);
    v58 = v69;
    v59 = v195;
LABEL_5:
    sub_1B1A057EC(v59, (uint64_t)&unk_1EEF5B930, (uint64_t)type metadata accessor for GraphScript, (uint64_t)type metadata accessor for VFXObjectScriptsDiff.Diff, (uint64_t (*)(_QWORD))sub_1B1791524);
    *(_QWORD *)(v189 + ((v61 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v61;
    v60 = v193;
    *(_BYTE *)(*(_QWORD *)(v193 + 48) + v61) = v197;
    sub_1B1A000F0((uint64_t)v58, *(_QWORD *)(v60 + 56) + v198, (uint64_t)&unk_1EEF5B930, (uint64_t)type metadata accessor for GraphScript, (uint64_t)type metadata accessor for VFXObjectScriptsDiff.Diff, (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))sub_1B1791524);
    ++*(_QWORD *)(v60 + 16);
    v45 = v190;
    v53 = v57;
    v56 = v199;
  }
  v85 = (uint64_t)v69 + *(int *)(v196 + 40);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v180 + 48))(v85, 1, v181))
  {
    v86 = (uint64_t)v179;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v183 + 56))(v179, 1, 1, v182);
LABEL_38:
    sub_1B1A057EC(v86, (uint64_t)&qword_1ED4B7B50, (uint64_t)MEMORY[0x1E0CB0998], (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD))sub_1B1791524);
    goto LABEL_39;
  }
  v175 = v85;
  v87 = v176;
  sub_1B1792810(v85, v176, (uint64_t (*)(_QWORD))type metadata accessor for ScriptIndex);
  v88 = v87;
  v89 = v174;
  sub_1B1792810(v88, v174, (uint64_t (*)(_QWORD))type metadata accessor for ScriptIndex);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v90 = v183;
    v86 = (uint64_t)v179;
    v91 = v182;
    (*(void (**)(char *, uint64_t, uint64_t))(v183 + 32))(v179, v89, v182);
    v92 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v90 + 56);
    v92((char *)v86, 0, 1, v91);
  }
  else
  {
    v90 = v183;
    v92 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v183 + 56);
    v86 = (uint64_t)v179;
    v91 = v182;
    v92(v179, 1, 1, v182);
  }
  sub_1B1A04628(v176, (uint64_t (*)(_QWORD))type metadata accessor for ScriptIndex);
  v93 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v90 + 48);
  if (v93(v86, 1, v91) == 1)
    goto LABEL_38;
  v167 = v93;
  v169 = v92;
  v94 = v183;
  v95 = v173;
  v168 = *(void (**)(char *, uint64_t, uint64_t))(v183 + 32);
  v168(v173, v86, v91);
  if (*(_BYTE *)(inited + 16) != 1)
  {
    v108 = (uint64_t)v171;
    (*(void (**)(char *, char *, uint64_t))(v94 + 16))(v171, v95, v91);
    v109 = v91;
    v110 = v181;
LABEL_69:
    (*(void (**)(char *, uint64_t))(v94 + 8))(v95, v109);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v180 + 56))(v108, 0, 1, v110);
    sub_1B1A05828(v108, v175, qword_1ED4B7E00, (uint64_t (*)(uint64_t))type metadata accessor for ScriptIndex, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    goto LABEL_39;
  }
  v96 = *(_QWORD *)(inited + 32);
  v97 = v169;
  if (!*(_QWORD *)(v96 + 16))
  {
LABEL_48:
    v105 = (uint64_t)v166;
    v106 = v182;
    v97(v166, 1, 1, v182);
    goto LABEL_49;
  }
  v98 = (uint64_t)v95;
  swift_bridgeObjectRetain();
  v99 = sub_1B1DC3B00(0x6E49747069726353, 0xEB00000000786564);
  if ((v100 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_48;
  }
  v101 = *(_QWORD *)(*(_QWORD *)(v96 + 56) + 8 * v99);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v102 = *(_QWORD *)(v101 + 16);
  v161 = v101;
  if (v102 && (v103 = sub_1B1DC3CA8(v98), (v104 & 1) != 0))
  {
    v105 = (uint64_t)v166;
    v106 = v182;
    (*(void (**)(char *, unint64_t, uint64_t))(v183 + 16))(v166, *(_QWORD *)(v101 + 56) + *(_QWORD *)(v183 + 72) * v103, v182);
    v107 = 0;
  }
  else
  {
    v107 = 1;
    v105 = (uint64_t)v166;
    v106 = v182;
  }
  v97((char *)v105, v107, 1, v106);
  swift_bridgeObjectRelease();
  if (v167(v105, 1, v106) != 1)
  {
    v158 = v162;
    v159 = (void (*)(char *, char *, uint64_t))v168;
    v168(v162, v105, v106);
    v108 = (uint64_t)v171;
    v159(v171, v158, v106);
    v109 = v106;
    v110 = v181;
    v95 = v173;
    v94 = v183;
    goto LABEL_69;
  }
LABEL_49:
  sub_1B1A057EC(v105, (uint64_t)&qword_1ED4B7B50, (uint64_t)MEMORY[0x1E0CB0998], (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD))sub_1B1791524);
  v111 = v170;
  sub_1B2228260();
  v112 = *(void (**)(uint64_t, char *, uint64_t))(v183 + 16);
  v112(v172, v173, v106);
  v113 = v106;
  v114 = v165;
  v112((uint64_t)v165, v111, v113);
  v115 = (uint64_t)v114;
  v97(v114, 0, 1, v113);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v200 = *(_QWORD *)(inited + 32);
  v117 = v200;
  *(_QWORD *)(inited + 32) = 0x8000000000000000;
  v119 = sub_1B1DC3B00(0x6E49747069726353, 0xEB00000000786564);
  v120 = v118;
  v121 = *(_QWORD *)(v117 + 16) + ((v118 & 1) == 0);
  if (*(_QWORD *)(v117 + 24) >= v121)
  {
    v125 = isUniquelyReferenced_nonNull_native;
    v124 = v118;
    if ((v125 & 1) == 0)
    {
      sub_1B1EA8AAC();
      v117 = v200;
    }
    goto LABEL_54;
  }
  sub_1B1E91F80(v121, isUniquelyReferenced_nonNull_native);
  v117 = v200;
  v122 = sub_1B1DC3B00(0x6E49747069726353, 0xEB00000000786564);
  if ((v120 & 1) == (v123 & 1))
  {
    v119 = v122;
    v124 = v120;
LABEL_54:
    v126 = v115;
    *(_QWORD *)(inited + 32) = v117;
    swift_bridgeObjectRelease();
    if ((v124 & 1) != 0)
    {
      v127 = v119;
      v128 = swift_bridgeObjectRetain();
    }
    else
    {
      v129 = swift_bridgeObjectRetain();
      sub_1B1F03670(&v200);
      v128 = v129;
      v130 = v200;
      *(_QWORD *)(v129 + 8 * (v119 >> 6) + 64) |= 1 << v119;
      v131 = (_QWORD *)(*(_QWORD *)(v129 + 48) + 16 * v119);
      *v131 = 0x6E49747069726353;
      v131[1] = 0xEB00000000786564;
      v132 = *(_QWORD *)(v129 + 56);
      v127 = v119;
      *(_QWORD *)(v132 + 8 * v119) = v130;
      ++*(_QWORD *)(v128 + 16);
    }
    v133 = v182;
    v134 = *(_QWORD *)(v128 + 56);
    swift_bridgeObjectRelease();
    if (v167(v126, 1, v133) == 1)
    {
      sub_1B1A057EC(v126, (uint64_t)&qword_1ED4B7B50, (uint64_t)MEMORY[0x1E0CB0998], (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD))sub_1B1791524);
      swift_bridgeObjectRetain();
      v135 = sub_1B1DC3CA8(v172);
      v137 = v136;
      swift_bridgeObjectRelease();
      if ((v137 & 1) != 0)
      {
        v138 = 8 * v127;
        v139 = swift_isUniquelyReferenced_nonNull_native();
        v140 = *(_QWORD *)(v134 + 8 * v127);
        v200 = v140;
        *(_QWORD *)(v134 + 8 * v127) = 0x8000000000000000;
        v141 = v182;
        if ((v139 & 1) == 0)
        {
          sub_1B1EA8838();
          v141 = v182;
          v140 = v200;
        }
        v142 = *(_QWORD *)(v183 + 72) * v135;
        v143 = *(_QWORD *)(v140 + 48) + v142;
        v167 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v135;
        v144 = *(void (**)(unint64_t, uint64_t))(v183 + 8);
        v144(v143, v141);
        v145 = v200;
        v146 = *(_QWORD *)(v200 + 56) + v142;
        v147 = (uint64_t)v164;
        v168(v164, v146, v182);
        sub_1B1EA4CB8((int64_t)v167, v145);
        *(_QWORD *)(v134 + v138) = v145;
        v148 = v182;
        swift_bridgeObjectRelease();
        v169((char *)v147, 0, 1, v148);
      }
      else
      {
        v147 = (uint64_t)v164;
        v148 = v182;
        v169(v164, 1, 1, v182);
        v144 = *(void (**)(unint64_t, uint64_t))(v183 + 8);
      }
      v144(v172, v148);
      sub_1B1A057EC(v147, (uint64_t)&qword_1ED4B7B50, (uint64_t)MEMORY[0x1E0CB0998], (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD))sub_1B1791524);
      v108 = (uint64_t)v171;
      v157 = v148;
      v110 = v181;
      v69 = v194;
      v151 = (void (*)(uint64_t, char *, uint64_t))v168;
    }
    else
    {
      v149 = v163;
      v150 = v126;
      v151 = (void (*)(uint64_t, char *, uint64_t))v168;
      v168(v163, v150, v133);
      v152 = 8 * v127;
      v153 = swift_isUniquelyReferenced_nonNull_native();
      v200 = *(_QWORD *)(v134 + v152);
      *(_QWORD *)(v134 + v152) = 0x8000000000000000;
      v154 = (uint64_t)v149;
      v155 = v172;
      sub_1B1B848BC(v154, v172, v153);
      *(_QWORD *)(v134 + v152) = v200;
      swift_bridgeObjectRelease();
      v156 = v155;
      v157 = v182;
      (*(void (**)(uint64_t, uint64_t))(v183 + 8))(v156, v182);
      v108 = (uint64_t)v171;
      v110 = v181;
      v69 = v194;
    }
    v151(v108, v170, v157);
    v109 = v157;
    v94 = v183;
    v95 = v173;
    goto LABEL_69;
  }
  result = sub_1B2229FC4();
  __break(1u);
  return result;
}

uint64_t sub_1B1A017D4()
{
  _QWORD *v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  __objc2_class **v13;
  unsigned int v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  unint64_t v23;
  char isUniquelyReferenced_nonNull_native;
  char v25;
  unint64_t v26;
  char v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t result;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  _QWORD *v39;

  v0 = sub_1B1B7DCAC(MEMORY[0x1E0DEE9D8]);
  v1 = sub_1B1F4C910();
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain();
    v2 = sub_1B22296AC();
    swift_bridgeObjectRelease();
    if (v2)
      goto LABEL_3;
LABEL_49:
    swift_bridgeObjectRelease();
    v32 = sub_1B1A00140((uint64_t)v0);
    swift_bridgeObjectRelease();
    return (uint64_t)v32;
  }
  v2 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v2)
    goto LABEL_49;
LABEL_3:
  v3 = 0;
  v34 = v1 & 0xC000000000000001;
  v35 = v2;
  v36 = v1;
  while (1)
  {
    if (v34)
      MEMORY[0x1B5E21018](v3, v1);
    else
      swift_retain();
    type metadata accessor for DoNode(0);
    if (swift_dynamicCastClass())
    {
      type metadata accessor for OnTriggerNode(0);
      v5 = swift_dynamicCastClass();
      if (!v5)
        goto LABEL_17;
      v6 = v5;
      if (*(_QWORD *)(*(_QWORD *)(v5 + 16) + 16) >= 2uLL
        && (type metadata accessor for WorldReferenceNode(0), (v7 = swift_dynamicCastClass()) != 0))
      {
        sub_1B1A00060(v7 + OBJC_IVAR____TtC3VFX18WorldReferenceNode_reference, (uint64_t)&v37);
        v8 = MEMORY[0x1B5E240CC](&v37);
        swift_retain();
        swift_retain();
        sub_1B19FC350((uint64_t)&v37);
        if (v8)
        {
          objc_opt_self();
          v9 = (void *)swift_dynamicCastObjCClass();
          if (!v9)
            swift_unknownObjectRelease();
          goto LABEL_20;
        }
      }
      else
      {
        swift_retain();
        swift_retain();
      }
      v9 = 0;
LABEL_20:
      type metadata accessor for OnTickTriggerNode(0);
      v12 = swift_dynamicCastClass();
      if (v12
        && (v13 = *(__objc2_class ***)(*(_QWORD *)(v12 + 16) + 48),
            swift_retain(),
            swift_release(),
            *v13 == _TtC3VFX20ImplicitConstantNode))
      {
        sub_1B1A02828((unint64_t *)((char *)v13 + OBJC_IVAR____TtC3VFX12ConstantNode_holder), &v37);
        swift_release();
        sub_1B1A02864((uint64_t)&v38, (uint64_t)&v39);
        sub_1B1A028A0(&v37);
        v17 = swift_dynamicCast();
        if (v17)
          v14 = v37;
        else
          v14 = 0;
        v15 = v17 ^ 1;
      }
      else
      {
        swift_release();
        v14 = 0;
        v15 = 1;
      }
      v10 = *(id *)(v6 + OBJC_IVAR____TtC3VFX13OnTriggerNode_eventType);
      swift_release();
      v18 = 0x100000000;
      if (!v15)
        v18 = 0;
      v11 = v18 | v14 | 0x4000000000;
      goto LABEL_32;
    }
    type metadata accessor for OnUpdateNode(0);
    if (swift_dynamicCastClass()
      || (type metadata accessor for OnParticleStageNode(0), (v16 = swift_dynamicCastClass()) == 0))
    {
LABEL_17:
      v10 = 0;
      v9 = 0;
      v11 = 0x8000000000;
      goto LABEL_32;
    }
    v9 = 0;
    v11 = 0;
    v10 = (id)*(unsigned __int8 *)(v16 + OBJC_IVAR____TtC3VFX19OnParticleStageNode_stage);
LABEL_32:
    if (v0[2])
    {
      sub_1B1A026F0(v10, v9, v11);
      v19 = sub_1B1DC3D88(v10, v9, v11);
      v20 = MEMORY[0x1E0DEE9D8];
      if ((v21 & 1) != 0)
      {
        v20 = *(_QWORD *)(v0[7] + 8 * v19);
        swift_bridgeObjectRetain();
      }
      sub_1B1A02724(v10, v9, v11);
    }
    else
    {
      v20 = MEMORY[0x1E0DEE9D8];
    }
    v37 = v20;
    v22 = swift_retain();
    MEMORY[0x1B5E2064C](v22);
    if (*(_QWORD *)((v37 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v37 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      sub_1B2228AF4();
    sub_1B2228B30();
    sub_1B2228AD0();
    v23 = v37;
    sub_1B1A026F0(v10, v9, v11);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v39 = v0;
    v26 = sub_1B1DC3D88(v10, v9, v11);
    v27 = v25;
    v28 = v0[2] + ((v25 & 1) == 0);
    if (v0[3] < v28)
      break;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      v0 = v39;
      if ((v25 & 1) != 0)
        goto LABEL_45;
    }
    else
    {
      sub_1B1EA8E64();
      v0 = v39;
      if ((v27 & 1) != 0)
      {
LABEL_45:
        v31 = v0[7];
        swift_bridgeObjectRelease();
        *(_QWORD *)(v31 + 8 * v26) = v23;
        goto LABEL_5;
      }
    }
LABEL_4:
    v0[(v26 >> 6) + 8] |= 1 << v26;
    v4 = v0[6] + 24 * v26;
    *(_QWORD *)v4 = v10;
    *(_QWORD *)(v4 + 8) = v9;
    *(_BYTE *)(v4 + 20) = BYTE4(v11);
    *(_DWORD *)(v4 + 16) = v11;
    *(_QWORD *)(v0[7] + 8 * v26) = v23;
    ++v0[2];
    sub_1B1A026F0(v10, v9, v11);
LABEL_5:
    ++v3;
    swift_bridgeObjectRelease();
    sub_1B1A02724(v10, v9, v11);
    sub_1B1A02724(v10, v9, v11);
    swift_release();
    v1 = v36;
    if (v35 == v3)
      goto LABEL_49;
  }
  sub_1B1E92768(v28, isUniquelyReferenced_nonNull_native);
  v29 = sub_1B1DC3D88(v10, v9, v11);
  if ((v27 & 1) == (v30 & 1))
  {
    v26 = v29;
    v0 = v39;
    if ((v27 & 1) != 0)
      goto LABEL_45;
    goto LABEL_4;
  }
  result = sub_1B2229FC4();
  __break(1u);
  return result;
}

uint64_t sub_1B1A01D60(uint64_t a1, uint64_t a2, unint64_t a3)
{
  char v3;
  uint64_t v4;
  uint64_t result;

  v3 = a1;
  v4 = (a3 >> 38) & 3;
  if ((_DWORD)v4)
  {
    if ((_DWORD)v4 == 1)
    {
      return 0x67676972745F6E6FLL;
    }
    else if ((a2 | a1) == 0 && (a3 & 0xFFFFFFFFFFLL) == 0x8000000000)
    {
      return 0x74616470755F6E6FLL;
    }
    else
    {
      return 0x74737269665F6E6FLL;
    }
  }
  else
  {
    result = 0xD000000000000010;
    if (v3 != 3)
    {
      if (v3 == 5)
      {
        return 0xD000000000000012;
      }
      else
      {
        sub_1B2229430();
        sub_1B2228890();
        sub_1B22295EC();
        result = sub_1B2229688();
        __break(1u);
      }
    }
  }
  return result;
}

uint64_t sub_1B1A01F04(uint64_t a1, uint64_t a2, char a3, unint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(uint64_t, uint64_t);
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  int64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  int64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  int v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v56;
  _QWORD v57[3];
  char v58;
  _BYTE v59[40];
  uint64_t v60;

  swift_retain();
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAD80, (uint64_t (*)(uint64_t))sub_1B19ED84C, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_1B226D240;
  *(_QWORD *)(v9 + 32) = a1;
  *(_QWORD *)(v9 + 40) = a2;
  v56 = a2;
  v60 = v9;
  v10 = swift_conformsToProtocol2();
  if (v10)
    v11 = v10;
  else
    v11 = 0;
  if (v10)
    v12 = a1;
  else
    v12 = 0;
  if (v12)
  {
    v13 = *(unsigned int (**)(uint64_t, uint64_t))(v11 + 64);
    if ((~v13(v12, v11) & 0x2F00000) == 0)
    {
      v15 = *(_QWORD *)(v9 + 16);
      v14 = *(_QWORD *)(v9 + 24);
      v16 = v14 >> 1;
      v17 = v15 + 1;
      if (v14 >> 1 <= v15)
      {
        v9 = (uint64_t)sub_1B1C62F18(v14 > 1, v15 + 1, 1, (char *)v9);
        v14 = *(_QWORD *)(v9 + 24);
        v16 = v14 >> 1;
      }
      *(_QWORD *)(v9 + 16) = v17;
      v18 = v9 + 16 * v15;
      *(_QWORD *)(v18 + 32) = &type metadata for Position;
      *(_QWORD *)(v18 + 40) = &off_1E63C2398;
      v19 = v15 + 2;
      if (v16 < v19)
        v9 = (uint64_t)sub_1B1C62F18(v14 > 1, v19, 1, (char *)v9);
      *(_QWORD *)(v9 + 16) = v19;
      v20 = v9 + 16 * v17;
      *(_QWORD *)(v20 + 32) = &type metadata for Orientation;
      *(_QWORD *)(v20 + 40) = &off_1E6371540;
      v22 = *(_QWORD *)(v9 + 16);
      v21 = *(_QWORD *)(v9 + 24);
      v23 = v21 >> 1;
      v24 = v22 + 1;
      if (v21 >> 1 <= v22)
      {
        v9 = (uint64_t)sub_1B1C62F18(v21 > 1, v22 + 1, 1, (char *)v9);
        v21 = *(_QWORD *)(v9 + 24);
        v23 = v21 >> 1;
      }
      *(_QWORD *)(v9 + 16) = v24;
      v25 = v9 + 16 * v22;
      *(_QWORD *)(v25 + 32) = &type metadata for Scale3;
      *(_QWORD *)(v25 + 40) = &off_1E63BC558;
      v26 = v22 + 2;
      if (v23 < v26)
        v9 = (uint64_t)sub_1B1C62F18(v21 > 1, v26, 1, (char *)v9);
      *(_QWORD *)(v9 + 16) = v26;
      v27 = v9 + 16 * v24;
      *(_QWORD *)(v27 + 32) = &type metadata for WorldTransform;
      *(_QWORD *)(v27 + 40) = &off_1E6382C00;
      v29 = *(_QWORD *)(v9 + 16);
      v28 = *(_QWORD *)(v9 + 24);
      if (v29 >= v28 >> 1)
        v9 = (uint64_t)sub_1B1C62F18(v28 > 1, v29 + 1, 1, (char *)v9);
      *(_QWORD *)(v9 + 16) = v29 + 1;
      v30 = v9 + 16 * v29;
      *(_QWORD *)(v30 + 32) = &type metadata for Parent;
      *(_QWORD *)(v30 + 40) = &off_1E63BB8E8;
      v60 = v9;
    }
    if ((~v13(v12, v11) & 0x1700000) == 0)
    {
      v32 = *(_QWORD *)(v9 + 16);
      v31 = *(_QWORD *)(v9 + 24);
      v33 = v31 >> 1;
      v34 = v32 + 1;
      if (v31 >> 1 <= v32)
      {
        v9 = (uint64_t)sub_1B1C62F18(v31 > 1, v32 + 1, 1, (char *)v9);
        v31 = *(_QWORD *)(v9 + 24);
        v33 = v31 >> 1;
      }
      *(_QWORD *)(v9 + 16) = v34;
      v35 = v9 + 16 * v32;
      *(_QWORD *)(v35 + 32) = &type metadata for Position;
      *(_QWORD *)(v35 + 40) = &off_1E63C2398;
      if (v33 < (uint64_t)(v32 + 2))
        v9 = (uint64_t)sub_1B1C62F18(v31 > 1, v32 + 2, 1, (char *)v9);
      *(_QWORD *)(v9 + 16) = v32 + 2;
      v36 = v9 + 16 * v34;
      *(_QWORD *)(v36 + 32) = &type metadata for Orientation;
      *(_QWORD *)(v36 + 40) = &off_1E6371540;
      v38 = *(_QWORD *)(v9 + 16);
      v37 = *(_QWORD *)(v9 + 24);
      v39 = v37 >> 1;
      v40 = v38 + 1;
      if (v37 >> 1 <= v38)
      {
        v9 = (uint64_t)sub_1B1C62F18(v37 > 1, v38 + 1, 1, (char *)v9);
        v37 = *(_QWORD *)(v9 + 24);
        v39 = v37 >> 1;
      }
      *(_QWORD *)(v9 + 16) = v40;
      v41 = v9 + 16 * v38;
      *(_QWORD *)(v41 + 32) = &type metadata for Scale3;
      *(_QWORD *)(v41 + 40) = &off_1E63BC558;
      if (v39 < (uint64_t)(v38 + 2))
        v9 = (uint64_t)sub_1B1C62F18(v37 > 1, v38 + 2, 1, (char *)v9);
      *(_QWORD *)(v9 + 16) = v38 + 2;
      v42 = v9 + 16 * v40;
      *(_QWORD *)(v42 + 32) = &type metadata for NotInHierarchy;
      *(_QWORD *)(v42 + 40) = &off_1E6380040;
      v60 = v9;
    }
  }
  v43 = sub_1B1E2CD8C(0, a5, (uint64_t)&v60, a4);
  v44 = v43;
  v45 = HIDWORD(v43);
  sub_1B1E87D28(v43, a4);
  v46 = sub_1B201BF04(a3, a4, a5);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v46 = (uint64_t)sub_1B1C6443C(0, *(_QWORD *)(v46 + 16) + 1, 1, (char *)v46);
  v48 = *(_QWORD *)(v46 + 16);
  v47 = *(_QWORD *)(v46 + 24);
  if (v48 >= v47 >> 1)
    v46 = (uint64_t)sub_1B1C6443C(v47 > 1, v48 + 1, 1, (char *)v46);
  *(_QWORD *)(v46 + 16) = v48 + 1;
  v49 = v46 + 16 * v48;
  *(_DWORD *)(v49 + 32) = v44;
  *(_DWORD *)(v49 + 36) = v45;
  *(_QWORD *)(v49 + 40) = a5;
  v50 = *(_QWORD *)(a5 + OBJC_IVAR____TtC3VFX13EntityManager_replicationStream);
  swift_retain();
  if (v50)
  {
    v51 = *(_BYTE *)(v50 + 80);
    MEMORY[0x1B5E240CC](v50 + 48);
    v50 = *(_QWORD *)(v50 + 56);
  }
  else
  {
    v51 = 0;
  }
  swift_unknownObjectUnownedInit();
  v57[0] = a5;
  v57[2] = v50;
  swift_unknownObjectUnownedAssign();
  swift_unownedRetain();
  swift_unknownObjectRelease();
  v58 = v51;
  sub_1B1A02530((uint64_t)v57, (uint64_t)v59);
  sub_1B201C61C((uint64_t)v59, a3);
  sub_1B1A0256C((uint64_t)v59);
  sub_1B1E31340(1);
  swift_bridgeObjectRelease();
  swift_release();
  v52 = *(_QWORD *)(v56 + 8);
  type metadata accessor for VFXAttribute();
  v53 = swift_allocObject();
  *(_QWORD *)(v53 + 16) = a5;
  swift_unownedRetain();
  swift_release();
  *(_DWORD *)(v53 + 24) = v44;
  *(_DWORD *)(v53 + 28) = v45;
  *(_QWORD *)(v53 + 32) = a1;
  *(_QWORD *)(v53 + 40) = v52;
  swift_bridgeObjectRelease();
  return v53;
}

uint64_t sub_1B1A024C0(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t))
{
  uint64_t v6;

  sub_1B1791524(0, a3, a4, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for VFXObjectScriptsDiff.Diff);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

uint64_t sub_1B1A02518(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_QWORD *)(a2 + 32) = *((_QWORD *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t sub_1B1A02530(uint64_t a1, uint64_t a2)
{
  initializeWithTake for ReplicationStreamBuilder(a2, a1);
  return a2;
}

uint64_t sub_1B1A0256C(uint64_t a1)
{
  destroy for ReplicationStreamBuilder();
  return a1;
}

uint64_t sub_1B1A025A0(uint64_t a1, unint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t sub_1B1A025EC(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1B1A02630(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 16);
  sub_1B1A04628(a1, type metadata accessor for GraphScript);
  return sub_1B1792810(v3, a1, type metadata accessor for GraphScript);
}

_QWORD *sub_1B1A02680(_QWORD *a1)
{
  uint64_t v1;

  return sub_1B21674DC(a1, **(_QWORD **)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_1B1A026A0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 16);
  sub_1B1A04628(a1, type metadata accessor for TriggerScript);
  return sub_1B1792810(v3, a1, type metadata accessor for TriggerScript);
}

id sub_1B1A026F0(id result, void *a2, unint64_t a3)
{
  id v3;
  id v4;

  if (((a3 >> 38) & 3) == 1)
  {
    v4 = result;
    v3 = a2;
    return v4;
  }
  return result;
}

void sub_1B1A02724(void *a1, void *a2, unint64_t a3)
{
  if (((a3 >> 38) & 3) == 1)
  {

  }
}

void sub_1B1A02758(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(_QWORD, uint64_t))
{
  unint64_t v5;
  uint64_t v6;

  if (!*a2)
  {
    v5 = a4(0, a3);
    if (!v6)
      atomic_store(v5, a2);
  }
}

uint64_t sub_1B1A0279C(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >= 2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1B1A027DC(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

unint64_t *sub_1B1A02828(unint64_t *a1, unint64_t *a2)
{
  initializeWithCopy for AnyValue(a2, a1);
  return a2;
}

uint64_t sub_1B1A02864(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

unint64_t *sub_1B1A028A0(unint64_t *a1)
{
  destroy for AnyValue(a1);
  return a1;
}

void sub_1B1A028D4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF58990[0])
  {
    type metadata accessor for Graph();
    sub_1B1A0293C();
    v0 = sub_1B22296E8();
    if (!v1)
      atomic_store(v0, qword_1EEF58990);
  }
}

unint64_t sub_1B1A0293C()
{
  unint64_t result;

  result = qword_1EEF601D0;
  if (!qword_1EEF601D0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B9810, &type metadata for GraphScheduling);
    atomic_store(result, (unint64_t *)&qword_1EEF601D0);
  }
  return result;
}

uint64_t sub_1B1A02980()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload();
    return 0;
  }
  return result;
}

uint64_t *sub_1B1A029D8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  _BOOL8 v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  _BOOL8 v20;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = v8;
  if (v7 <= 1)
  {
    if (v8 <= 3)
    {
      v11 = (~(-1 << (8 * v8)) - v7 + 2) >> (8 * v8);
      if (v11 > 0xFFFE)
      {
        v10 = 4;
      }
      else
      {
        v12 = v11 != 0;
        v13 = v11 >= 0xFF;
        v10 = 2;
        if (!v13)
          v10 = v12;
      }
    }
    else
    {
      v10 = 1;
    }
    v9 = v10 + v8;
  }
  v14 = *(_DWORD *)(v6 + 80);
  if (v14 <= 7 && v9 <= 0x18 && (*(_DWORD *)(v6 + 80) & 0x100000) == 0)
  {
    if ((*(unsigned int (**)(uint64_t *, uint64_t, _QWORD))(v6 + 48))(a2, 2, *(_QWORD *)(a3 + 16)))
    {
      if (v7 <= 1)
      {
        if (v8 <= 3)
        {
          v19 = (~(-1 << (8 * v8)) - v7 + 2) >> (8 * v8);
          if (v19 > 0xFFFE)
          {
            v18 = 4;
          }
          else
          {
            v20 = v19 != 0;
            v13 = v19 >= 0xFF;
            v18 = 2;
            if (!v13)
              v18 = v20;
          }
        }
        else
        {
          v18 = 1;
        }
        v8 += v18;
      }
      memcpy(a1, a2, v8);
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(a1, a2, v5);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 2, v5);
    }
  }
  else
  {
    v17 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v17 + ((v14 + 16) & ~v14));
    swift_retain();
  }
  return a1;
}

uint64_t sub_1B1A02B70(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(a1, 2, v3);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  return result;
}

void *sub_1B1A02BCC(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  uint64_t v9;
  unsigned int v10;
  _BOOL8 v11;
  BOOL v12;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(a2, 2, v5))
  {
    v7 = *(_DWORD *)(v6 + 84);
    v8 = *(_QWORD *)(v6 + 64);
    if (v7 <= 1)
    {
      if (v8 <= 3)
      {
        v10 = (~(-1 << (8 * v8)) - v7 + 2) >> (8 * v8);
        if (v10 > 0xFFFE)
        {
          v9 = 4;
        }
        else
        {
          v11 = v10 != 0;
          v12 = v10 >= 0xFF;
          v9 = 2;
          if (!v12)
            v9 = v11;
        }
      }
      else
      {
        v9 = 1;
      }
      v8 += v9;
    }
    memcpy(a1, a2, v8);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(a1, a2, v5);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 2, v5);
  }
  return a1;
}

void *sub_1B1A02CBC(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void *, uint64_t, uint64_t);
  int v8;
  int v9;
  unsigned int v10;
  size_t v11;
  uint64_t v12;
  unsigned int v13;
  _BOOL8 v14;
  BOOL v15;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  v8 = v7(a1, 2, v5);
  v9 = v7(a2, 2, v5);
  if (v8)
  {
    if (v9)
    {
      v10 = *(_DWORD *)(v6 + 84);
      v11 = *(_QWORD *)(v6 + 64);
      if (v10 <= 1)
      {
        if (v11 > 3)
        {
LABEL_5:
          v12 = 1;
LABEL_16:
          v11 += v12;
          goto LABEL_17;
        }
LABEL_9:
        v13 = (~(-1 << (8 * v11)) - v10 + 2) >> (8 * v11);
        if (v13 > 0xFFFE)
        {
          v12 = 4;
        }
        else
        {
          v14 = v13 != 0;
          v15 = v13 >= 0xFF;
          v12 = 2;
          if (!v15)
            v12 = v14;
        }
        goto LABEL_16;
      }
      goto LABEL_17;
    }
    (*(void (**)(void *, void *, uint64_t))(v6 + 16))(a1, a2, v5);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 2, v5);
  }
  else
  {
    if (v9)
    {
      (*(void (**)(void *, uint64_t))(v6 + 8))(a1, v5);
      v10 = *(_DWORD *)(v6 + 84);
      v11 = *(_QWORD *)(v6 + 64);
      if (v10 <= 1)
      {
        if (v11 > 3)
          goto LABEL_5;
        goto LABEL_9;
      }
LABEL_17:
      memcpy(a1, a2, v11);
      return a1;
    }
    (*(void (**)(void *, void *, uint64_t))(v6 + 24))(a1, a2, v5);
  }
  return a1;
}

void *sub_1B1A02E0C(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  uint64_t v9;
  unsigned int v10;
  _BOOL8 v11;
  BOOL v12;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(a2, 2, v5))
  {
    v7 = *(_DWORD *)(v6 + 84);
    v8 = *(_QWORD *)(v6 + 64);
    if (v7 <= 1)
    {
      if (v8 <= 3)
      {
        v10 = (~(-1 << (8 * v8)) - v7 + 2) >> (8 * v8);
        if (v10 > 0xFFFE)
        {
          v9 = 4;
        }
        else
        {
          v11 = v10 != 0;
          v12 = v10 >= 0xFF;
          v9 = 2;
          if (!v12)
            v9 = v11;
        }
      }
      else
      {
        v9 = 1;
      }
      v8 += v9;
    }
    memcpy(a1, a2, v8);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 32))(a1, a2, v5);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 2, v5);
  }
  return a1;
}

void *sub_1B1A02EFC(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void *, uint64_t, uint64_t);
  int v8;
  int v9;
  unsigned int v10;
  size_t v11;
  uint64_t v12;
  unsigned int v13;
  _BOOL8 v14;
  BOOL v15;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  v8 = v7(a1, 2, v5);
  v9 = v7(a2, 2, v5);
  if (v8)
  {
    if (v9)
    {
      v10 = *(_DWORD *)(v6 + 84);
      v11 = *(_QWORD *)(v6 + 64);
      if (v10 <= 1)
      {
        if (v11 > 3)
        {
LABEL_5:
          v12 = 1;
LABEL_16:
          v11 += v12;
          goto LABEL_17;
        }
LABEL_9:
        v13 = (~(-1 << (8 * v11)) - v10 + 2) >> (8 * v11);
        if (v13 > 0xFFFE)
        {
          v12 = 4;
        }
        else
        {
          v14 = v13 != 0;
          v15 = v13 >= 0xFF;
          v12 = 2;
          if (!v15)
            v12 = v14;
        }
        goto LABEL_16;
      }
      goto LABEL_17;
    }
    (*(void (**)(void *, void *, uint64_t))(v6 + 32))(a1, a2, v5);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 2, v5);
  }
  else
  {
    if (v9)
    {
      (*(void (**)(void *, uint64_t))(v6 + 8))(a1, v5);
      v10 = *(_DWORD *)(v6 + 84);
      v11 = *(_QWORD *)(v6 + 64);
      if (v10 <= 1)
      {
        if (v11 > 3)
          goto LABEL_5;
        goto LABEL_9;
      }
LABEL_17:
      memcpy(a1, a2, v11);
      return a1;
    }
    (*(void (**)(void *, void *, uint64_t))(v6 + 40))(a1, a2, v5);
  }
  return a1;
}

uint64_t sub_1B1A0304C(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  _BOOL8 v10;
  BOOL v11;
  int v12;
  char v13;
  int v14;
  unsigned int v15;
  int v16;
  int v17;
  unsigned int v18;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = v5 - 2;
  v7 = *(_QWORD *)(v4 + 64);
  if (v5 <= 1)
  {
    v6 = 0;
    if (v7 <= 3)
    {
      v9 = (~(-1 << (8 * v7)) - v5 + 2) >> (8 * v7);
      if (v9 > 0xFFFE)
      {
        v8 = 4;
      }
      else
      {
        v10 = v9 != 0;
        v11 = v9 >= 0xFF;
        v8 = 2;
        if (!v11)
          v8 = v10;
      }
    }
    else
    {
      v8 = 1;
    }
    v7 += v8;
  }
  if (!a2)
    return 0;
  v12 = a2 - v6;
  if (a2 <= v6)
    goto LABEL_29;
  v13 = 8 * v7;
  if (v7 <= 3)
  {
    v15 = ((v12 + ~(-1 << v13)) >> v13) + 1;
    if (HIWORD(v15))
    {
      v14 = *(_DWORD *)(a1 + v7);
      if (!v14)
        goto LABEL_29;
      goto LABEL_20;
    }
    if (v15 > 0xFF)
    {
      v14 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_29;
      goto LABEL_20;
    }
    if (v15 < 2)
    {
LABEL_29:
      if (v6)
      {
        v18 = (*(uint64_t (**)(void))(v4 + 48))();
        if (v18 >= 3)
          return v18 - 2;
        else
          return 0;
      }
      return 0;
    }
  }
  v14 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_29;
LABEL_20:
  v16 = (v14 - 1) << v13;
  if (v7 > 3)
    v16 = 0;
  if ((_DWORD)v7)
  {
    if (v7 <= 3)
      v17 = v7;
    else
      v17 = 4;
    __asm { BR              X12 }
  }
  return v6 + v16 + 1;
}

void sub_1B1A031E0(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  size_t v9;
  uint64_t v10;
  unsigned int v11;
  _BOOL8 v12;
  BOOL v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  int v18;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = v7 - 2;
  v9 = *(_QWORD *)(v6 + 64);
  if (v7 <= 1)
  {
    v8 = 0;
    if (v9 <= 3)
    {
      v11 = (~(-1 << (8 * v9)) - v7 + 2) >> (8 * v9);
      if (v11 > 0xFFFE)
      {
        v10 = 4;
      }
      else
      {
        v12 = v11 != 0;
        v13 = v11 >= 0xFF;
        v10 = 2;
        if (!v13)
          v10 = v12;
      }
    }
    else
    {
      v10 = 1;
    }
    v9 += v10;
  }
  v13 = a3 >= v8;
  v14 = a3 - v8;
  if (v14 != 0 && v13)
  {
    if (v9 <= 3)
    {
      v17 = ((v14 + ~(-1 << (8 * v9))) >> (8 * v9)) + 1;
      if (HIWORD(v17))
      {
        v15 = 4u;
      }
      else if (v17 >= 0x100)
      {
        v15 = 2;
      }
      else
      {
        v15 = v17 > 1;
      }
    }
    else
    {
      v15 = 1u;
    }
  }
  else
  {
    v15 = 0u;
  }
  if (v8 < a2)
  {
    v16 = ~v8 + a2;
    if (v9 < 4)
    {
      if ((_DWORD)v9)
      {
        v18 = v16 & ~(-1 << (8 * v9));
        bzero(a1, v9);
        if ((_DWORD)v9 == 3)
        {
          *a1 = v18;
          *((_BYTE *)a1 + 2) = BYTE2(v18);
        }
        else if ((_DWORD)v9 == 2)
        {
          *a1 = v18;
        }
        else
        {
          *(_BYTE *)a1 = v18;
        }
      }
    }
    else
    {
      bzero(a1, v9);
      *(_DWORD *)a1 = v16;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t sub_1B1A033FC(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 48))(a1, 2);
}

uint64_t sub_1B1A03410(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 56))(a1, a2, 2);
}

uint64_t *sub_1B1A03424(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v3;
  uint64_t v4;
  uint64_t *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t updated;
  uint64_t v12;
  unsigned int (*v13)(_QWORD *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  unsigned int (*v19)(const void *, uint64_t, uint64_t);
  const void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  _BYTE *v27;
  uint64_t inited;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE *v34;
  uint64_t v35;
  unsigned int (*v36)(const void *, uint64_t, uint64_t);
  const void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  char *__dst;
  _BYTE *__dsta;
  uint64_t v47;
  uint64_t v48;

  v3 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    v7 = a1;
    v8 = a3[5];
    v9 = (uint64_t *)((char *)a1 + v8);
    v10 = (uint64_t *)((char *)a2 + v8);
    updated = type metadata accessor for ParticleUpdateScript(0);
    v12 = *(_QWORD *)(updated - 8);
    v13 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v12 + 48);
    swift_bridgeObjectRetain();
    if (v13(v10, 2, updated))
    {
      sub_1B1791524(0, &qword_1EEF58980, type metadata accessor for ParticleUpdateScript, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for VFXObjectScriptsDiff.Diff);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      v47 = v12;
      v15 = v10[1];
      *v9 = *v10;
      v9[1] = v15;
      v9[2] = v10[2];
      *((_BYTE *)v9 + 24) = *((_BYTE *)v10 + 24);
      v9[4] = v10[4];
      *((_BYTE *)v9 + 40) = *((_BYTE *)v10 + 40);
      v16 = *(int *)(updated + 36);
      __dst = (char *)v9 + v16;
      v17 = (char *)v10 + v16;
      v18 = type metadata accessor for ScriptIndex();
      v43 = *(_QWORD *)(v18 - 8);
      v19 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v43 + 48);
      v20 = v17;
      v21 = v18;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v19(v20, 1, v21))
      {
        sub_1B1791524(0, qword_1ED4B7E00, (uint64_t (*)(uint64_t))type metadata accessor for ScriptIndex, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
        memcpy(__dst, v20, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
        v23 = v47;
      }
      else
      {
        v23 = v47;
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          v24 = sub_1B222826C();
          (*(void (**)(char *, const void *, uint64_t))(*(_QWORD *)(v24 - 8) + 16))(__dst, v20, v24);
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(__dst, v20, *(_QWORD *)(v43 + 64));
        }
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v43 + 56))(__dst, 0, 1, v21);
      }
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v9, 0, 2, updated);
    }
    v25 = a3[6];
    v26 = (char *)v7 + v25;
    v27 = (char *)a2 + v25;
    inited = type metadata accessor for ParticleInitScript(0);
    v29 = *(_QWORD *)(inited - 8);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v29 + 48))(v27, 2, inited))
    {
      sub_1B1791524(0, &qword_1EEF58988, type metadata accessor for ParticleInitScript, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for VFXObjectScriptsDiff.Diff);
      memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
    }
    else
    {
      v48 = v29;
      *v26 = *v27;
      v31 = *((_QWORD *)v27 + 2);
      *((_QWORD *)v26 + 1) = *((_QWORD *)v27 + 1);
      *((_QWORD *)v26 + 2) = v31;
      v32 = *((_QWORD *)v27 + 4);
      *((_QWORD *)v26 + 3) = *((_QWORD *)v27 + 3);
      *((_QWORD *)v26 + 4) = v32;
      v26[40] = v27[40];
      v33 = *(int *)(inited + 36);
      __dsta = &v26[v33];
      v34 = &v27[v33];
      v35 = type metadata accessor for ScriptIndex();
      v44 = *(_QWORD *)(v35 - 8);
      v36 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v44 + 48);
      v37 = v34;
      v38 = v35;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v36(v37, 1, v38))
      {
        sub_1B1791524(0, qword_1ED4B7E00, (uint64_t (*)(uint64_t))type metadata accessor for ScriptIndex, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
        memcpy(__dsta, v37, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
        v40 = v48;
      }
      else
      {
        v40 = v48;
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          v41 = sub_1B222826C();
          (*(void (**)(_BYTE *, const void *, uint64_t))(*(_QWORD *)(v41 - 8) + 16))(__dsta, v37, v41);
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(__dsta, v37, *(_QWORD *)(v44 + 64));
        }
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v44 + 56))(__dsta, 0, 1, v38);
      }
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v40 + 56))(v26, 0, 2, inited);
    }
    *(uint64_t *)((char *)v7 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
    swift_bridgeObjectRetain();
  }
  return v7;
}

uint64_t sub_1B1A03834(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t updated;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t inited;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 20);
  updated = type metadata accessor for ParticleUpdateScript(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(updated - 8) + 48))(v4, 2, updated))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v6 = v4 + *(int *)(updated + 36);
    v7 = type metadata accessor for ScriptIndex();
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7)
      && swift_getEnumCaseMultiPayload() == 1)
    {
      v8 = sub_1B222826C();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v6, v8);
    }
  }
  v9 = a1 + *(int *)(a2 + 24);
  inited = type metadata accessor for ParticleInitScript(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(inited - 8) + 48))(v9, 2, inited))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v11 = v9 + *(int *)(inited + 36);
    v12 = type metadata accessor for ScriptIndex();
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 48))(v11, 1, v12)
      && swift_getEnumCaseMultiPayload() == 1)
    {
      v13 = sub_1B222826C();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v11, v13);
    }
  }
  return swift_bridgeObjectRelease();
}

_QWORD *sub_1B1A039BC(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t updated;
  uint64_t v10;
  unsigned int (*v11)(_QWORD *, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int (*v18)(char *, uint64_t, uint64_t);
  const void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  uint64_t inited;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int (*v34)(_BYTE *, uint64_t, uint64_t);
  const void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *__dst;
  _BYTE *__dsta;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v3 = a3;
  v4 = a2;
  v5 = a1;
  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (_QWORD *)((char *)a1 + v6);
  v8 = (_QWORD *)((char *)a2 + v6);
  updated = type metadata accessor for ParticleUpdateScript(0);
  v10 = *(_QWORD *)(updated - 8);
  v11 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v10 + 48);
  swift_bridgeObjectRetain();
  if (v11(v8, 2, updated))
  {
    sub_1B1791524(0, &qword_1EEF58980, type metadata accessor for ParticleUpdateScript, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for VFXObjectScriptsDiff.Diff);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    v42 = v10;
    v44 = v4;
    v46 = v3;
    v13 = v8[1];
    *v7 = *v8;
    v7[1] = v13;
    v7[2] = v8[2];
    *((_BYTE *)v7 + 24) = *((_BYTE *)v8 + 24);
    v7[4] = v8[4];
    *((_BYTE *)v7 + 40) = *((_BYTE *)v8 + 40);
    v14 = *(int *)(updated + 36);
    __dst = (char *)v7 + v14;
    v15 = (char *)v8 + v14;
    v16 = type metadata accessor for ScriptIndex();
    v17 = *(_QWORD *)(v16 - 8);
    v18 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48);
    swift_bridgeObjectRetain();
    v19 = v15;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v18(v15, 1, v16))
    {
      sub_1B1791524(0, qword_1ED4B7E00, (uint64_t (*)(uint64_t))type metadata accessor for ScriptIndex, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
      memcpy(__dst, v15, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
      v4 = v44;
      v3 = v46;
    }
    else
    {
      v4 = v44;
      v3 = v46;
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        v21 = sub_1B222826C();
        (*(void (**)(char *, const void *, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(__dst, v19, v21);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(__dst, v19, *(_QWORD *)(v17 + 64));
      }
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(__dst, 0, 1, v16);
    }
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v42 + 56))(v7, 0, 2, updated);
  }
  v22 = *(int *)(v3 + 24);
  v23 = (char *)v5 + v22;
  v24 = (char *)v4 + v22;
  inited = type metadata accessor for ParticleInitScript(0);
  v26 = *(_QWORD *)(inited - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v26 + 48))(v24, 2, inited))
  {
    sub_1B1791524(0, &qword_1EEF58988, type metadata accessor for ParticleInitScript, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for VFXObjectScriptsDiff.Diff);
    memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
  }
  else
  {
    v43 = v5;
    v45 = v26;
    v47 = v3;
    *v23 = *v24;
    v28 = *((_QWORD *)v24 + 2);
    *((_QWORD *)v23 + 1) = *((_QWORD *)v24 + 1);
    *((_QWORD *)v23 + 2) = v28;
    v29 = *((_QWORD *)v24 + 4);
    *((_QWORD *)v23 + 3) = *((_QWORD *)v24 + 3);
    *((_QWORD *)v23 + 4) = v29;
    v23[40] = v24[40];
    v30 = *(int *)(inited + 36);
    __dsta = &v23[v30];
    v31 = &v24[v30];
    v32 = type metadata accessor for ScriptIndex();
    v33 = *(_QWORD *)(v32 - 8);
    v34 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v33 + 48);
    swift_bridgeObjectRetain();
    v35 = v31;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v34(v31, 1, v32))
    {
      sub_1B1791524(0, qword_1ED4B7E00, (uint64_t (*)(uint64_t))type metadata accessor for ScriptIndex, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
      memcpy(__dsta, v31, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
      v37 = v45;
      v3 = v47;
      v5 = v43;
    }
    else
    {
      v37 = v45;
      v3 = v47;
      v5 = v43;
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        v38 = sub_1B222826C();
        (*(void (**)(_BYTE *, const void *, uint64_t))(*(_QWORD *)(v38 - 8) + 16))(__dsta, v35, v38);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(__dsta, v35, *(_QWORD *)(v33 + 64));
      }
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v33 + 56))(__dsta, 0, 1, v32);
    }
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v37 + 56))(v23, 0, 2, inited);
  }
  *(_QWORD *)((char *)v5 + *(int *)(v3 + 28)) = *(_QWORD *)((char *)v4 + *(int *)(v3 + 28));
  swift_bridgeObjectRetain();
  return v5;
}

_QWORD *sub_1B1A03DA4(_QWORD *a1, _QWORD *a2, int *a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t updated;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t v14;
  size_t v15;
  void *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int (*v22)(char *, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  void *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(void *, uint64_t, uint64_t);
  int v30;
  int v31;
  uint64_t (*v32)(uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _BYTE *v37;
  uint64_t inited;
  uint64_t v39;
  uint64_t (*v40)(uint64_t, uint64_t, uint64_t);
  int v41;
  int v42;
  uint64_t v43;
  size_t v44;
  void *v45;
  const void *v46;
  uint64_t v47;
  _BYTE *v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int (*v51)(_BYTE *, uint64_t, uint64_t);
  uint64_t v52;
  uint64_t v53;
  void *v54;
  _BYTE *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t (*v58)(void *, uint64_t, uint64_t);
  int v59;
  int v60;
  uint64_t (*v61)(uint64_t, uint64_t);
  uint64_t v62;
  uint64_t v63;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void *__dst;
  void *__dsta;
  _QWORD *v71;
  _QWORD *v72;

  v5 = a1;
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a3[5];
  v7 = (uint64_t)v5 + v6;
  v8 = (char *)a2 + v6;
  updated = type metadata accessor for ParticleUpdateScript(0);
  v10 = *(_QWORD *)(updated - 8);
  v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v7, 2, updated);
  v13 = v11((uint64_t)v8, 2, updated);
  if (!v12)
  {
    if (v13)
    {
      sub_1B1A04628(v7, type metadata accessor for ParticleUpdateScript);
LABEL_6:
      sub_1B1791524(0, &qword_1EEF58980, type metadata accessor for ParticleUpdateScript, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for VFXObjectScriptsDiff.Diff);
      v15 = *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64);
      v16 = (void *)v7;
      v17 = v8;
LABEL_7:
      memcpy(v16, v17, v15);
      goto LABEL_22;
    }
    *(_QWORD *)v7 = *(_QWORD *)v8;
    *(_QWORD *)(v7 + 8) = *((_QWORD *)v8 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)(v7 + 16) = *((_QWORD *)v8 + 2);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_BYTE *)(v7 + 24) = v8[24];
    *(_QWORD *)(v7 + 32) = *((_QWORD *)v8 + 4);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_BYTE *)(v7 + 40) = v8[40];
    v24 = *(int *)(updated + 36);
    v25 = (void *)(v7 + v24);
    v26 = &v8[v24];
    v27 = type metadata accessor for ScriptIndex();
    v28 = *(_QWORD *)(v27 - 8);
    v29 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v28 + 48);
    v30 = v29(v25, 1, v27);
    v31 = v29(v26, 1, v27);
    if (v30)
    {
      if (!v31)
      {
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          v65 = sub_1B222826C();
          (*(void (**)(void *, char *, uint64_t))(*(_QWORD *)(v65 - 8) + 16))(v25, v26, v65);
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(v25, v26, *(_QWORD *)(v28 + 64));
        }
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
        goto LABEL_22;
      }
      v32 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
    }
    else
    {
      if (!v31)
      {
        if (v5 == a2)
          goto LABEL_22;
        sub_1B1A04628((uint64_t)v25, (uint64_t (*)(_QWORD))type metadata accessor for ScriptIndex);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          v67 = sub_1B222826C();
          (*(void (**)(void *, char *, uint64_t))(*(_QWORD *)(v67 - 8) + 16))(v25, v26, v67);
          swift_storeEnumTagMultiPayload();
          goto LABEL_22;
        }
        v15 = *(_QWORD *)(v28 + 64);
LABEL_18:
        v16 = v25;
        v17 = v26;
        goto LABEL_7;
      }
      sub_1B1A04628((uint64_t)v25, (uint64_t (*)(_QWORD))type metadata accessor for ScriptIndex);
      v32 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
    }
    sub_1B1791524(0, qword_1ED4B7E00, (uint64_t (*)(uint64_t))type metadata accessor for ScriptIndex, v32);
    v15 = *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64);
    goto LABEL_18;
  }
  if (v13)
    goto LABEL_6;
  v71 = v5;
  *(_QWORD *)v7 = *(_QWORD *)v8;
  *(_QWORD *)(v7 + 8) = *((_QWORD *)v8 + 1);
  *(_QWORD *)(v7 + 16) = *((_QWORD *)v8 + 2);
  *(_BYTE *)(v7 + 24) = v8[24];
  *(_QWORD *)(v7 + 32) = *((_QWORD *)v8 + 4);
  *(_BYTE *)(v7 + 40) = v8[40];
  v18 = *(int *)(updated + 36);
  __dst = (void *)(v7 + v18);
  v19 = &v8[v18];
  v20 = type metadata accessor for ScriptIndex();
  v21 = *(_QWORD *)(v20 - 8);
  v22 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v22(v19, 1, v20))
  {
    sub_1B1791524(0, qword_1ED4B7E00, (uint64_t (*)(uint64_t))type metadata accessor for ScriptIndex, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(__dst, v19, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    v5 = v71;
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v33 = sub_1B222826C();
      (*(void (**)(void *, char *, uint64_t))(*(_QWORD *)(v33 - 8) + 16))(__dst, v19, v33);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(__dst, v19, *(_QWORD *)(v21 + 64));
    }
    v5 = v71;
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v21 + 56))(__dst, 0, 1, v20);
  }
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 2, updated);
LABEL_22:
  v35 = a3[6];
  v36 = (uint64_t)v5 + v35;
  v37 = (char *)a2 + v35;
  inited = type metadata accessor for ParticleInitScript(0);
  v39 = *(_QWORD *)(inited - 8);
  v40 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v39 + 48);
  v41 = v40(v36, 2, inited);
  v42 = v40((uint64_t)v37, 2, inited);
  if (!v41)
  {
    if (v42)
    {
      sub_1B1A04628(v36, type metadata accessor for ParticleInitScript);
LABEL_27:
      sub_1B1791524(0, &qword_1EEF58988, type metadata accessor for ParticleInitScript, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for VFXObjectScriptsDiff.Diff);
      v44 = *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64);
      v45 = (void *)v36;
      v46 = v37;
LABEL_28:
      memcpy(v45, v46, v44);
      goto LABEL_43;
    }
    *(_BYTE *)v36 = *v37;
    *(_QWORD *)(v36 + 8) = *((_QWORD *)v37 + 1);
    *(_QWORD *)(v36 + 16) = *((_QWORD *)v37 + 2);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)(v36 + 24) = *((_QWORD *)v37 + 3);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)(v36 + 32) = *((_QWORD *)v37 + 4);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_BYTE *)(v36 + 40) = v37[40];
    v53 = *(int *)(inited + 36);
    v54 = (void *)(v36 + v53);
    v55 = &v37[v53];
    v56 = type metadata accessor for ScriptIndex();
    v57 = *(_QWORD *)(v56 - 8);
    v58 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v57 + 48);
    v59 = v58(v54, 1, v56);
    v60 = v58(v55, 1, v56);
    if (v59)
    {
      if (!v60)
      {
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          v66 = sub_1B222826C();
          (*(void (**)(void *, _BYTE *, uint64_t))(*(_QWORD *)(v66 - 8) + 16))(v54, v55, v66);
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(v54, v55, *(_QWORD *)(v57 + 64));
        }
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v57 + 56))(v54, 0, 1, v56);
        goto LABEL_43;
      }
      v61 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
    }
    else
    {
      if (!v60)
      {
        if (v5 == a2)
          goto LABEL_43;
        sub_1B1A04628((uint64_t)v54, (uint64_t (*)(_QWORD))type metadata accessor for ScriptIndex);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          v68 = sub_1B222826C();
          (*(void (**)(void *, _BYTE *, uint64_t))(*(_QWORD *)(v68 - 8) + 16))(v54, v55, v68);
          swift_storeEnumTagMultiPayload();
          goto LABEL_43;
        }
        v44 = *(_QWORD *)(v57 + 64);
        goto LABEL_39;
      }
      sub_1B1A04628((uint64_t)v54, (uint64_t (*)(_QWORD))type metadata accessor for ScriptIndex);
      v61 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
    }
    sub_1B1791524(0, qword_1ED4B7E00, (uint64_t (*)(uint64_t))type metadata accessor for ScriptIndex, v61);
    v44 = *(_QWORD *)(*(_QWORD *)(v63 - 8) + 64);
LABEL_39:
    v45 = v54;
    v46 = v55;
    goto LABEL_28;
  }
  if (v42)
    goto LABEL_27;
  v72 = v5;
  *(_BYTE *)v36 = *v37;
  *(_QWORD *)(v36 + 8) = *((_QWORD *)v37 + 1);
  *(_QWORD *)(v36 + 16) = *((_QWORD *)v37 + 2);
  *(_QWORD *)(v36 + 24) = *((_QWORD *)v37 + 3);
  *(_QWORD *)(v36 + 32) = *((_QWORD *)v37 + 4);
  *(_BYTE *)(v36 + 40) = v37[40];
  v47 = *(int *)(inited + 36);
  __dsta = (void *)(v36 + v47);
  v48 = &v37[v47];
  v49 = type metadata accessor for ScriptIndex();
  v50 = *(_QWORD *)(v49 - 8);
  v51 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v50 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v51(v48, 1, v49))
  {
    sub_1B1791524(0, qword_1ED4B7E00, (uint64_t (*)(uint64_t))type metadata accessor for ScriptIndex, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(__dsta, v48, *(_QWORD *)(*(_QWORD *)(v52 - 8) + 64));
    v5 = v72;
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v62 = sub_1B222826C();
      (*(void (**)(void *, _BYTE *, uint64_t))(*(_QWORD *)(v62 - 8) + 16))(__dsta, v48, v62);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(__dsta, v48, *(_QWORD *)(v50 + 64));
    }
    v5 = v72;
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v50 + 56))(__dsta, 0, 1, v49);
  }
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v39 + 56))(v36, 0, 2, inited);
LABEL_43:
  *(_QWORD *)((char *)v5 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_1B1A04628(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v3;

  v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

_QWORD *sub_1B1A04664(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  _OWORD *v7;
  _OWORD *v8;
  uint64_t updated;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  _BYTE *v21;
  uint64_t inited;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  _BYTE *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (_OWORD *)((char *)a1 + v6);
  v8 = (_OWORD *)((char *)a2 + v6);
  updated = type metadata accessor for ParticleUpdateScript(0);
  v10 = *(_QWORD *)(updated - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v10 + 48))(v8, 2, updated))
  {
    sub_1B1791524(0, &qword_1EEF58980, type metadata accessor for ParticleUpdateScript, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for VFXObjectScriptsDiff.Diff);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    *v7 = *v8;
    *((_QWORD *)v7 + 2) = *((_QWORD *)v8 + 2);
    *((_BYTE *)v7 + 24) = *((_BYTE *)v8 + 24);
    *((_QWORD *)v7 + 4) = *((_QWORD *)v8 + 4);
    *((_BYTE *)v7 + 40) = *((_BYTE *)v8 + 40);
    v12 = *(int *)(updated + 36);
    v13 = (char *)v7 + v12;
    v14 = (char *)v8 + v12;
    v15 = type metadata accessor for ScriptIndex();
    v16 = *(_QWORD *)(v15 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
    {
      sub_1B1791524(0, qword_1ED4B7E00, (uint64_t (*)(uint64_t))type metadata accessor for ScriptIndex, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
    else
    {
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        v18 = sub_1B222826C();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v13, v14, v18);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v13, v14, *(_QWORD *)(v16 + 64));
      }
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
    }
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 2, updated);
  }
  v19 = a3[6];
  v20 = (char *)a1 + v19;
  v21 = (char *)a2 + v19;
  inited = type metadata accessor for ParticleInitScript(0);
  v23 = *(_QWORD *)(inited - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v23 + 48))(v21, 2, inited))
  {
    sub_1B1791524(0, &qword_1EEF58988, type metadata accessor for ParticleInitScript, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for VFXObjectScriptsDiff.Diff);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
  }
  else
  {
    *v20 = *v21;
    *(_OWORD *)(v20 + 8) = *(_OWORD *)(v21 + 8);
    *(_OWORD *)(v20 + 24) = *(_OWORD *)(v21 + 24);
    v20[40] = v21[40];
    v25 = *(int *)(inited + 36);
    v26 = &v20[v25];
    v27 = &v21[v25];
    v28 = type metadata accessor for ScriptIndex();
    v29 = *(_QWORD *)(v28 - 8);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v29 + 48))(v27, 1, v28))
    {
      sub_1B1791524(0, qword_1ED4B7E00, (uint64_t (*)(uint64_t))type metadata accessor for ScriptIndex, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
      memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
    }
    else
    {
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        v31 = sub_1B222826C();
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v31 - 8) + 32))(v26, v27, v31);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v26, v27, *(_QWORD *)(v29 + 64));
      }
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
    }
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 2, inited);
  }
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  return a1;
}

_QWORD *sub_1B1A049C8(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t updated;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t v14;
  size_t v15;
  void *v16;
  char *v17;
  uint64_t v18;
  void *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)(void *, uint64_t, uint64_t);
  int v31;
  int v32;
  uint64_t (*v33)(uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _BYTE *v38;
  uint64_t inited;
  uint64_t v40;
  uint64_t (*v41)(uint64_t, uint64_t, uint64_t);
  int v42;
  int v43;
  uint64_t v44;
  size_t v45;
  void *v46;
  const void *v47;
  uint64_t v48;
  void *v49;
  _BYTE *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  _BYTE *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t (*v60)(void *, uint64_t, uint64_t);
  int v61;
  int v62;
  uint64_t (*v63)(uint64_t, uint64_t);
  uint64_t v64;
  uint64_t v65;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;

  *a1 = *a2;
  swift_bridgeObjectRelease();
  v6 = a3[5];
  v7 = (uint64_t)a1 + v6;
  v8 = (char *)a2 + v6;
  updated = type metadata accessor for ParticleUpdateScript(0);
  v10 = *(_QWORD *)(updated - 8);
  v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v7, 2, updated);
  v13 = v11((uint64_t)v8, 2, updated);
  if (!v12)
  {
    if (v13)
    {
      sub_1B1A04628(v7, type metadata accessor for ParticleUpdateScript);
LABEL_6:
      sub_1B1791524(0, &qword_1EEF58980, type metadata accessor for ParticleUpdateScript, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for VFXObjectScriptsDiff.Diff);
      v15 = *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64);
      v16 = (void *)v7;
      v17 = v8;
LABEL_7:
      memcpy(v16, v17, v15);
      goto LABEL_22;
    }
    v24 = *((_QWORD *)v8 + 1);
    *(_QWORD *)v7 = *(_QWORD *)v8;
    *(_QWORD *)(v7 + 8) = v24;
    swift_bridgeObjectRelease();
    *(_QWORD *)(v7 + 16) = *((_QWORD *)v8 + 2);
    swift_bridgeObjectRelease();
    *(_BYTE *)(v7 + 24) = v8[24];
    *(_QWORD *)(v7 + 32) = *((_QWORD *)v8 + 4);
    swift_bridgeObjectRelease();
    *(_BYTE *)(v7 + 40) = v8[40];
    v25 = *(int *)(updated + 36);
    v26 = (void *)(v7 + v25);
    v27 = &v8[v25];
    v28 = type metadata accessor for ScriptIndex();
    v29 = *(_QWORD *)(v28 - 8);
    v30 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v29 + 48);
    v31 = v30(v26, 1, v28);
    v32 = v30(v27, 1, v28);
    if (v31)
    {
      if (!v32)
      {
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          v67 = sub_1B222826C();
          (*(void (**)(void *, char *, uint64_t))(*(_QWORD *)(v67 - 8) + 32))(v26, v27, v67);
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(v26, v27, *(_QWORD *)(v29 + 64));
        }
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
        goto LABEL_22;
      }
      v33 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
    }
    else
    {
      if (!v32)
      {
        if (a1 == a2)
          goto LABEL_22;
        sub_1B1A04628((uint64_t)v26, (uint64_t (*)(_QWORD))type metadata accessor for ScriptIndex);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          v69 = sub_1B222826C();
          (*(void (**)(void *, char *, uint64_t))(*(_QWORD *)(v69 - 8) + 32))(v26, v27, v69);
          swift_storeEnumTagMultiPayload();
          goto LABEL_22;
        }
        v15 = *(_QWORD *)(v29 + 64);
LABEL_18:
        v16 = v26;
        v17 = v27;
        goto LABEL_7;
      }
      sub_1B1A04628((uint64_t)v26, (uint64_t (*)(_QWORD))type metadata accessor for ScriptIndex);
      v33 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
    }
    sub_1B1791524(0, qword_1ED4B7E00, (uint64_t (*)(uint64_t))type metadata accessor for ScriptIndex, v33);
    v15 = *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64);
    goto LABEL_18;
  }
  if (v13)
    goto LABEL_6;
  *(_OWORD *)v7 = *(_OWORD *)v8;
  *(_QWORD *)(v7 + 16) = *((_QWORD *)v8 + 2);
  *(_BYTE *)(v7 + 24) = v8[24];
  *(_QWORD *)(v7 + 32) = *((_QWORD *)v8 + 4);
  *(_BYTE *)(v7 + 40) = v8[40];
  v18 = *(int *)(updated + 36);
  v19 = (void *)(v7 + v18);
  v20 = &v8[v18];
  v21 = type metadata accessor for ScriptIndex();
  v22 = *(_QWORD *)(v21 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
  {
    sub_1B1791524(0, qword_1ED4B7E00, (uint64_t (*)(uint64_t))type metadata accessor for ScriptIndex, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v34 = sub_1B222826C();
      (*(void (**)(void *, char *, uint64_t))(*(_QWORD *)(v34 - 8) + 32))(v19, v20, v34);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v19, v20, *(_QWORD *)(v22 + 64));
    }
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
  }
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 2, updated);
LABEL_22:
  v36 = a3[6];
  v37 = (uint64_t)a1 + v36;
  v38 = (char *)a2 + v36;
  inited = type metadata accessor for ParticleInitScript(0);
  v40 = *(_QWORD *)(inited - 8);
  v41 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v40 + 48);
  v42 = v41(v37, 2, inited);
  v43 = v41((uint64_t)v38, 2, inited);
  if (!v42)
  {
    if (v43)
    {
      sub_1B1A04628(v37, type metadata accessor for ParticleInitScript);
LABEL_27:
      sub_1B1791524(0, &qword_1EEF58988, type metadata accessor for ParticleInitScript, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for VFXObjectScriptsDiff.Diff);
      v45 = *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64);
      v46 = (void *)v37;
      v47 = v38;
LABEL_28:
      memcpy(v46, v47, v45);
      goto LABEL_43;
    }
    *(_BYTE *)v37 = *v38;
    v54 = *((_QWORD *)v38 + 2);
    *(_QWORD *)(v37 + 8) = *((_QWORD *)v38 + 1);
    *(_QWORD *)(v37 + 16) = v54;
    swift_bridgeObjectRelease();
    *(_QWORD *)(v37 + 24) = *((_QWORD *)v38 + 3);
    swift_bridgeObjectRelease();
    *(_QWORD *)(v37 + 32) = *((_QWORD *)v38 + 4);
    swift_bridgeObjectRelease();
    *(_BYTE *)(v37 + 40) = v38[40];
    v55 = *(int *)(inited + 36);
    v56 = (void *)(v37 + v55);
    v57 = &v38[v55];
    v58 = type metadata accessor for ScriptIndex();
    v59 = *(_QWORD *)(v58 - 8);
    v60 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v59 + 48);
    v61 = v60(v56, 1, v58);
    v62 = v60(v57, 1, v58);
    if (v61)
    {
      if (!v62)
      {
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          v68 = sub_1B222826C();
          (*(void (**)(void *, _BYTE *, uint64_t))(*(_QWORD *)(v68 - 8) + 32))(v56, v57, v68);
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(v56, v57, *(_QWORD *)(v59 + 64));
        }
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v59 + 56))(v56, 0, 1, v58);
        goto LABEL_43;
      }
      v63 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
    }
    else
    {
      if (!v62)
      {
        if (a1 == a2)
          goto LABEL_43;
        sub_1B1A04628((uint64_t)v56, (uint64_t (*)(_QWORD))type metadata accessor for ScriptIndex);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          v70 = sub_1B222826C();
          (*(void (**)(void *, _BYTE *, uint64_t))(*(_QWORD *)(v70 - 8) + 32))(v56, v57, v70);
          swift_storeEnumTagMultiPayload();
          goto LABEL_43;
        }
        v45 = *(_QWORD *)(v59 + 64);
        goto LABEL_39;
      }
      sub_1B1A04628((uint64_t)v56, (uint64_t (*)(_QWORD))type metadata accessor for ScriptIndex);
      v63 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
    }
    sub_1B1791524(0, qword_1ED4B7E00, (uint64_t (*)(uint64_t))type metadata accessor for ScriptIndex, v63);
    v45 = *(_QWORD *)(*(_QWORD *)(v65 - 8) + 64);
LABEL_39:
    v46 = v56;
    v47 = v57;
    goto LABEL_28;
  }
  if (v43)
    goto LABEL_27;
  *(_BYTE *)v37 = *v38;
  *(_OWORD *)(v37 + 8) = *(_OWORD *)(v38 + 8);
  *(_OWORD *)(v37 + 24) = *(_OWORD *)(v38 + 24);
  *(_BYTE *)(v37 + 40) = v38[40];
  v48 = *(int *)(inited + 36);
  v49 = (void *)(v37 + v48);
  v50 = &v38[v48];
  v51 = type metadata accessor for ScriptIndex();
  v52 = *(_QWORD *)(v51 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v52 + 48))(v50, 1, v51))
  {
    sub_1B1791524(0, qword_1ED4B7E00, (uint64_t (*)(uint64_t))type metadata accessor for ScriptIndex, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v49, v50, *(_QWORD *)(*(_QWORD *)(v53 - 8) + 64));
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v64 = sub_1B222826C();
      (*(void (**)(void *, _BYTE *, uint64_t))(*(_QWORD *)(v64 - 8) + 32))(v49, v50, v64);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v49, v50, *(_QWORD *)(v52 + 64));
    }
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v52 + 56))(v49, 0, 1, v51);
  }
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v40 + 56))(v37, 0, 2, inited);
LABEL_43:
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1B1A0516C()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1B1A05178(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    sub_1B1791524(0, &qword_1EEF58980, type metadata accessor for ParticleUpdateScript, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for VFXObjectScriptsDiff.Diff);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 20);
    }
    else
    {
      sub_1B1791524(0, &qword_1EEF58988, type metadata accessor for ParticleInitScript, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for VFXObjectScriptsDiff.Diff);
      v10 = v12;
      v9 = *(_QWORD *)(v12 - 8);
      v11 = *(int *)(a3 + 24);
    }
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(&a1[v11], a2, v10);
  }
}

uint64_t sub_1B1A05248()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_1B1A05254(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    sub_1B1791524(0, &qword_1EEF58980, type metadata accessor for ParticleUpdateScript, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for VFXObjectScriptsDiff.Diff);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 20);
    }
    else
    {
      sub_1B1791524(0, &qword_1EEF58988, type metadata accessor for ParticleInitScript, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for VFXObjectScriptsDiff.Diff);
      v10 = v12;
      v9 = *(_QWORD *)(v12 - 8);
      v11 = *(int *)(a4 + 24);
    }
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(&v5[v11], a2, a2, v10);
  }
  return result;
}

void sub_1B1A05320()
{
  unint64_t v0;
  unint64_t v1;

  sub_1B1791524(319, &qword_1EEF58980, type metadata accessor for ParticleUpdateScript, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for VFXObjectScriptsDiff.Diff);
  if (v0 <= 0x3F)
  {
    sub_1B1791524(319, &qword_1EEF58988, type metadata accessor for ParticleInitScript, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for VFXObjectScriptsDiff.Diff);
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

uint64_t destroy for GraphComponent()
{
  swift_unknownObjectWeakDestroy();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t initializeWithCopy for GraphComponent(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = swift_unknownObjectWeakCopyInit();
  v5 = a2[2];
  *(_QWORD *)(v4 + 8) = a2[1];
  *(_QWORD *)(v4 + 16) = v5;
  v6 = a2[3];
  v7 = a2[4];
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for GraphComponent(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;

  v4 = swift_unknownObjectWeakCopyAssign();
  *(_QWORD *)(v4 + 8) = a2[1];
  *(_QWORD *)(v4 + 16) = a2[2];
  *(_QWORD *)(a1 + 24) = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = a2[4];
  swift_retain();
  swift_release();
  return a1;
}

__n128 initializeWithTake for GraphComponent(uint64_t a1, __n128 *a2)
{
  __n128 *v3;
  __n128 result;

  v3 = (__n128 *)swift_unknownObjectWeakTakeInit();
  v3->n128_u64[1] = a2->n128_u64[1];
  result = a2[1];
  v3[1] = result;
  v3[2].n128_u64[0] = a2[2].n128_u64[0];
  return result;
}

uint64_t assignWithTake for GraphComponent(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(swift_unknownObjectWeakTakeAssign() + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for GraphComponent(uint64_t a1, int a2)
{
  int v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  if ((*(_QWORD *)(a1 + 8) & 0xF000000000000007) != 0)
    v2 = *(_DWORD *)a1 & 0x7FFFFFFF;
  else
    v2 = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for GraphComponent(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      *(_QWORD *)(result + 8) = 1;
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for GraphComponent()
{
  return &type metadata for GraphComponent;
}

uint64_t sub_1B1A055F8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_1B1D88654(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a2);
}

unint64_t sub_1B1A05610(unint64_t result)
{
  switch(result >> 60)
  {
    case 0uLL:
    case 1uLL:
    case 2uLL:
    case 3uLL:
    case 4uLL:
    case 5uLL:
    case 6uLL:
    case 7uLL:
    case 8uLL:
    case 9uLL:
    case 0xAuLL:
    case 0xBuLL:
    case 0xCuLL:
    case 0xDuLL:
    case 0xEuLL:
      result = swift_release();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1B1A05640()
{
  return sub_1B1791240();
}

uint64_t sub_1B1A05648(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if (a3 == 1)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t sub_1B1A05660()
{
  return swift_deallocObject();
}

uint64_t sub_1B1A05670()
{
  return sub_1B1791240();
}

uint64_t sub_1B1A05678()
{
  return sub_1B1A05688();
}

uint64_t sub_1B1A05680()
{
  return sub_1B1A05688();
}

uint64_t sub_1B1A05688()
{
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1B1A056C0()
{
  swift_unknownObjectWeakDestroy();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1B1A056EC()
{
  swift_unknownObjectWeakDestroy();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

void sub_1B1A05728()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF58A28)
  {
    sub_1B1791524(255, (unint64_t *)&unk_1EEF5B930, type metadata accessor for GraphScript, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for VFXObjectScriptsDiff.Diff);
    sub_1B1A057A8();
    v0 = sub_1B22296E8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF58A28);
  }
}

unint64_t sub_1B1A057A8()
{
  unint64_t result;

  result = qword_1EEF5B8A0;
  if (!qword_1EEF5B8A0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22BB468, &type metadata for ScriptScheduling);
    atomic_store(result, (unint64_t *)&qword_1EEF5B8A0);
  }
  return result;
}

uint64_t sub_1B1A057EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v6;

  v6 = a5(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a1, v6);
  return a1;
}

uint64_t sub_1B1A05828(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t), uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t v7;

  sub_1B1791524(0, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 40))(a2, a1, v7);
  return a2;
}

_QWORD *sub_1B1A05878(_QWORD *a1)
{
  return sub_1B1A02680(a1);
}

char *sub_1B1A0588C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  char *v22;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = v1 + 64;
  v3 = 1 << *(_BYTE *)(v1 + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(v1 + 64);
  v6 = (unint64_t)(v3 + 63) >> 6;
  swift_bridgeObjectRetain_n();
  v7 = 0;
  v22 = (char *)MEMORY[0x1E0DEE9D8];
  if (!v5)
    goto LABEL_13;
LABEL_4:
  v8 = __clz(__rbit64(v5));
  v5 &= v5 - 1;
  v9 = v8 | (v7 << 6);
  while (1)
  {
    v10 = *(_QWORD *)(*(_QWORD *)(v1 + 56) + 24 * v9);
    v11 = swift_conformsToProtocol2();
    v12 = v11 ? v11 : 0;
    v13 = v11 ? v10 : 0;
    if (v13)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v22 = sub_1B1C63160(0, *((_QWORD *)v22 + 2) + 1, 1, v22);
      v17 = *((_QWORD *)v22 + 2);
      v16 = *((_QWORD *)v22 + 3);
      v18 = v17 + 1;
      if (v17 >= v16 >> 1)
      {
        v20 = sub_1B1C63160(v16 > 1, v17 + 1, 1, v22);
        v18 = v17 + 1;
        v22 = v20;
      }
      *((_QWORD *)v22 + 2) = v18;
      v19 = &v22[16 * v17];
      *((_QWORD *)v19 + 4) = v13;
      *((_QWORD *)v19 + 5) = v12;
      if (v5)
        goto LABEL_4;
    }
    else if (v5)
    {
      goto LABEL_4;
    }
LABEL_13:
    v14 = v7 + 1;
    if (v7 + 1 >= v6)
      goto LABEL_35;
    v15 = *(_QWORD *)(v2 + 8 * v14);
    if (!v15)
    {
      v14 = v7 + 2;
      if (v7 + 2 >= v6)
        goto LABEL_35;
      v15 = *(_QWORD *)(v2 + 8 * v14);
      if (!v15)
      {
        v14 = v7 + 3;
        if (v7 + 3 >= v6)
          goto LABEL_35;
        v15 = *(_QWORD *)(v2 + 8 * v14);
        if (!v15)
        {
          v14 = v7 + 4;
          if (v7 + 4 >= v6)
            goto LABEL_35;
          v15 = *(_QWORD *)(v2 + 8 * v14);
          if (!v15)
          {
            v14 = v7 + 5;
            if (v7 + 5 >= v6)
              goto LABEL_35;
            v15 = *(_QWORD *)(v2 + 8 * v14);
            if (!v15)
            {
              v14 = v7 + 6;
              if (v7 + 6 >= v6)
                goto LABEL_35;
              v15 = *(_QWORD *)(v2 + 8 * v14);
              if (!v15)
                break;
            }
          }
        }
      }
    }
LABEL_28:
    v5 = (v15 - 1) & v15;
    v9 = __clz(__rbit64(v15)) + (v14 << 6);
    v7 = v14;
  }
  while (v6 - 7 != v7)
  {
    v15 = *(_QWORD *)(v1 + 120 + 8 * v7++);
    if (v15)
    {
      v14 = v7 + 6;
      goto LABEL_28;
    }
  }
LABEL_35:
  swift_release();
  swift_bridgeObjectRelease();
  return v22;
}

char *sub_1B1A05AC0()
{
  char *v0;
  uint64_t v1;
  uint64_t *v2;
  char *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v0 = sub_1B1A0588C();
  v1 = *((_QWORD *)v0 + 2);
  if (v1)
  {
    v2 = (uint64_t *)(v0 + 32);
    v3 = (char *)MEMORY[0x1E0DEE9D8];
    do
    {
      v5 = *v2;
      v6 = swift_conformsToProtocol2();
      if (v6)
        v7 = v6;
      else
        v7 = 0;
      if (v6)
        v8 = v5;
      else
        v8 = 0;
      if (v8)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v3 = sub_1B1C64208(0, *((_QWORD *)v3 + 2) + 1, 1, v3);
        v10 = *((_QWORD *)v3 + 2);
        v9 = *((_QWORD *)v3 + 3);
        if (v10 >= v9 >> 1)
          v3 = sub_1B1C64208(v9 > 1, v10 + 1, 1, v3);
        *((_QWORD *)v3 + 2) = v10 + 1;
        v4 = &v3[16 * v10];
        *((_QWORD *)v4 + 4) = v8;
        *((_QWORD *)v4 + 5) = v7;
      }
      v2 += 2;
      --v1;
    }
    while (v1);
  }
  else
  {
    v3 = (char *)MEMORY[0x1E0DEE9D8];
  }
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t sub_1B1A05BC8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t result;
  char isUniquelyReferenced_nonNull_native;
  uint64_t inited;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char v29;
  _QWORD *v30;
  char v31;
  unint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v47;
  uint64_t v48;

  v3 = v2;
  v5 = sub_1B207A300();
  v7 = v6;
  if (*(_QWORD *)(*(_QWORD *)(v2 + 16) + 16))
  {
    swift_bridgeObjectRetain();
    sub_1B1DC3B00(v5, v7);
    if ((v8 & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v48 = *(_QWORD *)(v2 + 16);
  *(_QWORD *)(v2 + 16) = 0x8000000000000000;
  sub_1B1B855B8(a1, 0, 1, v5, v7, isUniquelyReferenced_nonNull_native);
  *(_QWORD *)(v2 + 16) = v48;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B1A06548();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = 0;
  *(_BYTE *)(inited + 40) = 1;
  *(_QWORD *)(inited + 48) = v5;
  *(_QWORD *)(inited + 56) = v7;
  v12 = sub_1B1C51140(a2);
  sub_1B19F4C10(v12);
  v44 = *(_QWORD *)(inited + 16);
  if (!v44)
    return swift_bridgeObjectRelease();
  v43 = inited + 32;
  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAE70, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v13 = 0;
  while (1)
  {
    v14 = v43 + 32 * v13;
    v47 = *(_QWORD *)v14;
    v15 = *(_BYTE *)(v14 + 8);
    v16 = *(_QWORD *)(v14 + 16);
    v17 = *(_QWORD *)(v14 + 24);
    v18 = swift_initStackObject();
    *(_OWORD *)(v18 + 16) = xmmword_1B226D240;
    *(_QWORD *)(v18 + 32) = v16;
    *(_QWORD *)(v18 + 40) = v17;
    swift_bridgeObjectRetain_n();
    v19 = sub_1B1A0659C();
    swift_bridgeObjectRelease();
    v20 = v19[2];
    if (v20)
    {
      v39 = sub_1B1C63044(1, v20 + 1, 1, (_QWORD *)v18);
      v18 = (uint64_t)v39;
      v40 = v19[2];
      if (v40)
        break;
    }
LABEL_10:
    swift_bridgeObjectRelease();
    v21 = *(_QWORD *)(v18 + 16);
    if (v21)
    {
      v45 = v13;
      v22 = (uint64_t *)(v18 + 40);
      while (1)
      {
        v26 = *(v22 - 1);
        v25 = *v22;
        v27 = *(_QWORD *)(*(_QWORD *)(v3 + 24) + 16);
        swift_bridgeObjectRetain();
        if (v27)
        {
          swift_bridgeObjectRetain();
          sub_1B1DC3B00(v26, v25);
          if ((v28 & 1) != 0)
            goto LABEL_14;
          swift_bridgeObjectRelease();
        }
        v29 = swift_isUniquelyReferenced_nonNull_native();
        v30 = *(_QWORD **)(v3 + 24);
        *(_QWORD *)(v3 + 24) = 0x8000000000000000;
        v32 = sub_1B1DC3B00(v26, v25);
        v33 = v31;
        v34 = v30[2] + ((v31 & 1) == 0);
        if (v30[3] >= v34)
        {
          if ((v29 & 1) != 0)
          {
            v37 = v30;
            if ((v31 & 1) != 0)
              goto LABEL_24;
          }
          else
          {
            sub_1B1EAA140();
            v37 = v30;
            if ((v33 & 1) != 0)
              goto LABEL_24;
          }
        }
        else
        {
          sub_1B1E94A04(v34, v29);
          v35 = sub_1B1DC3B00(v26, v25);
          if ((v33 & 1) != (v36 & 1))
          {
            sub_1B2229FC4();
            __break(1u);
            goto LABEL_37;
          }
          v32 = v35;
          v37 = v30;
          if ((v33 & 1) != 0)
          {
LABEL_24:
            v38 = v37[7] + 24 * v32;
            *(_QWORD *)v38 = a1;
            *(_QWORD *)(v38 + 8) = v47;
            *(_BYTE *)(v38 + 16) = v15;
            goto LABEL_13;
          }
        }
        v37[(v32 >> 6) + 8] |= 1 << v32;
        v23 = (uint64_t *)(v37[6] + 16 * v32);
        *v23 = v26;
        v23[1] = v25;
        v24 = v37[7] + 24 * v32;
        *(_QWORD *)v24 = a1;
        *(_QWORD *)(v24 + 8) = v47;
        *(_BYTE *)(v24 + 16) = v15;
        ++v37[2];
        swift_bridgeObjectRetain();
LABEL_13:
        *(_QWORD *)(v3 + 24) = v37;
LABEL_14:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v22 += 2;
        if (!--v21)
        {
          swift_bridgeObjectRelease();
          v13 = v45;
          goto LABEL_8;
        }
      }
    }
    swift_bridgeObjectRelease();
LABEL_8:
    if (++v13 == v44)
      return swift_bridgeObjectRelease();
  }
  v41 = (unint64_t)&v39[2 * v39[2] + 4];
  if ((unint64_t)(v19 + 4) >= v41 + 16 * v40 || v41 >= (unint64_t)&v19[2 * v40 + 4])
  {
    swift_arrayInitWithCopy();
    *(_QWORD *)(v18 + 16) += v40;
    goto LABEL_10;
  }
LABEL_37:
  result = sub_1B2229700();
  __break(1u);
  return result;
}

uint64_t sub_1B1A0608C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;

  v7 = *(_QWORD *)(v4 + 24);
  if (!*(_QWORD *)(v7 + 16))
  {
LABEL_9:
    sub_1B1A06460();
    if ((sub_1B2229274() & 1) == 0)
      return 0;
    sub_1B2229280();
    sub_1B1A02758(0, (unint64_t *)&qword_1EEF58A30, MEMORY[0x1E0DEBAF0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEBF30]);
    sub_1B1A064A4();
    sub_1B1A06504();
    v16 = sub_1B22289BC();
    v18 = v17;
    swift_bridgeObjectRelease();
    v13 = sub_1B1A0608C(v16, v18, 0, 1);
    swift_bridgeObjectRelease();
    if (v13 && !swift_conformsToProtocol2())
      return 0;
    return v13;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v10 = sub_1B1DC3B00(a1, a2);
  if ((v11 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_9;
  }
  v12 = *(_QWORD *)(v7 + 56) + 24 * v10;
  v13 = *(_QWORD *)v12;
  v14 = *(_QWORD *)(v12 + 8);
  v15 = *(_BYTE *)(v12 + 16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v15 & 1) != 0)
    return v13;
  if ((a4 & 1) == 0)
  {
    if (v14 <= a3)
      return 0;
    return v13;
  }
  if (v14 <= 2048)
    return v13;
  sub_1B2229430();
  sub_1B2228890();
  sub_1B2228890();
  sub_1B2228890();
  sub_1B2229A0C();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  result = sub_1B2229688();
  __break(1u);
  return result;
}

uint64_t sub_1B1A06360()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for TypeRegistry()
{
  return objc_opt_self();
}

__n128 initializeWithTake for FunctionConstant.Key(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for TypeRegistry.TypeInfo(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 17))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TypeRegistry.TypeInfo(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 17) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for TypeRegistry.TypeInfo()
{
  return &type metadata for TypeRegistry.TypeInfo;
}

unint64_t sub_1B1A06460()
{
  unint64_t result;

  result = qword_1ED4B72A0;
  if (!qword_1ED4B72A0)
  {
    result = MEMORY[0x1B5E23E74](MEMORY[0x1E0DEA9B8], MEMORY[0x1E0DEA968]);
    atomic_store(result, (unint64_t *)&qword_1ED4B72A0);
  }
  return result;
}

unint64_t sub_1B1A064A4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EEF58A38;
  if (!qword_1EEF58A38)
  {
    sub_1B1A02758(255, (unint64_t *)&qword_1EEF58A30, MEMORY[0x1E0DEBAF0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEBF30]);
    result = MEMORY[0x1B5E23E74](MEMORY[0x1E0DEBF78], v1);
    atomic_store(result, (unint64_t *)&qword_1EEF58A38);
  }
  return result;
}

unint64_t sub_1B1A06504()
{
  unint64_t result;

  result = qword_1EEF61000[0];
  if (!qword_1EEF61000[0])
  {
    result = MEMORY[0x1B5E23E74](MEMORY[0x1E0DEBB28], MEMORY[0x1E0DEBAF0]);
    atomic_store(result, qword_1EEF61000);
  }
  return result;
}

void sub_1B1A06548()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED4BAF30)
  {
    sub_1B19F8F98();
    v0 = sub_1B2229A18();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED4BAF30);
  }
}

_QWORD *sub_1B1A0659C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  _QWORD *v56;

  if ((sub_1B2228914() & 1) != 0)
  {
    sub_1B1A06460();
    v0 = sub_1B222922C();
    v2 = v1;
    v3 = sub_1B1C63044(0, 1, 1, MEMORY[0x1E0DEE9D8]);
    v5 = v3[2];
    v4 = v3[3];
    if (v5 >= v4 >> 1)
      v3 = sub_1B1C63044(v4 > 1, v5 + 1, 1, v3);
    v3[2] = v5 + 1;
    v6 = &v3[2 * v5];
    v6[4] = v0;
    v6[5] = v2;
    v7 = sub_1B222922C();
    v9 = v8;
    v11 = v3[2];
    v10 = v3[3];
    if (v11 >= v10 >> 1)
      v3 = sub_1B1C63044(v10 > 1, v11 + 1, 1, v3);
    v3[2] = v11 + 1;
    v12 = &v3[2 * v11];
    v12[4] = v7;
    v12[5] = v9;
    v13 = sub_1B222922C();
    v15 = v14;
    v17 = v3[2];
    v16 = v3[3];
    if (v17 >= v16 >> 1)
      v3 = sub_1B1C63044(v16 > 1, v17 + 1, 1, v3);
    v3[2] = v17 + 1;
    v18 = &v3[2 * v17];
    v18[4] = v13;
    v18[5] = v15;
  }
  else
  {
    v3 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  if ((sub_1B2228914() & 1) != 0)
  {
    sub_1B1A06460();
    v19 = sub_1B222922C();
    v21 = v20;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v3 = sub_1B1C63044(0, v3[2] + 1, 1, v3);
    v23 = v3[2];
    v22 = v3[3];
    if (v23 >= v22 >> 1)
      v3 = sub_1B1C63044(v22 > 1, v23 + 1, 1, v3);
    v3[2] = v23 + 1;
    v24 = &v3[2 * v23];
    v24[4] = v19;
    v24[5] = v21;
    v25 = sub_1B222922C();
    v27 = v26;
    v29 = v3[2];
    v28 = v3[3];
    if (v29 >= v28 >> 1)
      v3 = sub_1B1C63044(v28 > 1, v29 + 1, 1, v3);
    v3[2] = v29 + 1;
    v30 = &v3[2 * v29];
    v30[4] = v25;
    v30[5] = v27;
  }
  if ((sub_1B2228914() & 1) != 0)
  {
    sub_1B1A06460();
    v31 = sub_1B222922C();
    v33 = v32;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v3 = sub_1B1C63044(0, v3[2] + 1, 1, v3);
    v35 = v3[2];
    v34 = v3[3];
    if (v35 >= v34 >> 1)
      v3 = sub_1B1C63044(v34 > 1, v35 + 1, 1, v3);
    v3[2] = v35 + 1;
    v36 = &v3[2 * v35];
    v36[4] = v31;
    v36[5] = v33;
    v37 = sub_1B222922C();
    v39 = v38;
    v41 = v3[2];
    v40 = v3[3];
    if (v41 >= v40 >> 1)
      v3 = sub_1B1C63044(v40 > 1, v41 + 1, 1, v3);
    v3[2] = v41 + 1;
    v42 = &v3[2 * v41];
    v42[4] = v37;
    v42[5] = v39;
    v43 = sub_1B222922C();
    v45 = v44;
    v47 = v3[2];
    v46 = v3[3];
    if (v47 >= v46 >> 1)
      v3 = sub_1B1C63044(v46 > 1, v47 + 1, 1, v3);
    v3[2] = v47 + 1;
    v48 = &v3[2 * v47];
    v48[4] = v43;
    v48[5] = v45;
  }
  sub_1B1A06460();
  if ((sub_1B2229274() & 1) != 0)
  {
    v49 = sub_1B2229214();
    v50 = *(_QWORD *)(v49 + 16);
    if (v50)
    {
      v51 = v49 + 16 * v50;
      v53 = *(_QWORD *)(v51 + 16);
      v52 = *(_QWORD *)(v51 + 24);
      swift_bridgeObjectRetain();
    }
    else
    {
      v53 = 0;
      v52 = 0;
    }
    swift_bridgeObjectRelease();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v3 = sub_1B1C63044(0, v3[2] + 1, 1, v3);
    v55 = v3[2];
    v54 = v3[3];
    if (v55 >= v54 >> 1)
      v3 = sub_1B1C63044(v54 > 1, v55 + 1, 1, v3);
    v3[2] = v55 + 1;
    v56 = &v3[2 * v55];
    v56[4] = v53;
    v56[5] = v52;
  }
  return v3;
}

uint64_t sub_1B1A06CA4(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v12;
  char v13;

  v3 = v1;
  sub_1B1A088BC(0, &qword_1EEF58A58, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED170]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = (char *)&v12 - v9;
  sub_1B19FA070(a1, a1[3]);
  sub_1B1A087F0();
  sub_1B222A180();
  LODWORD(v12) = *(_DWORD *)v3;
  v13 = 0;
  sub_1B1A08918();
  sub_1B2229958();
  if (!v2)
  {
    LODWORD(v12) = *(_DWORD *)(v3 + 4);
    v13 = 1;
    sub_1B2229958();
    LOBYTE(v12) = 2;
    sub_1B2229934();
    LOBYTE(v12) = 3;
    sub_1B222991C();
    LOBYTE(v12) = 4;
    sub_1B2229934();
    LOBYTE(v12) = 5;
    sub_1B2229934();
    LOBYTE(v12) = 6;
    sub_1B2229934();
    v12 = *(_QWORD *)(v3 + 28);
    v13 = 7;
    sub_1B1A0895C();
    sub_1B2229958();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
}

void sub_1B1A06EF8(char *a1)
{
  sub_1B1F94308(*a1);
}

uint64_t sub_1B1A06F04()
{
  sub_1B222A06C();
  sub_1B222A078();
  return sub_1B222A0C0();
}

uint64_t sub_1B1A06F48()
{
  return sub_1B222A078();
}

uint64_t sub_1B1A06F70()
{
  sub_1B222A06C();
  sub_1B222A078();
  return sub_1B222A0C0();
}

uint64_t sub_1B1A06FB0()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1B1A06FE4
                                                            + 4 * asc_1B226D3A0[*v0]))(0x676E4172656E6E69, 0xEA0000000000656CLL);
}

uint64_t sub_1B1A06FE4()
{
  return 0x676E41726574756FLL;
}

uint64_t sub_1B1A06FF8()
{
  return 0x6152746365707361;
}

uint64_t sub_1B1A07018()
{
  return 0x75676E6174636572;
}

uint64_t sub_1B1A07038()
{
  return 1918985582;
}

uint64_t sub_1B1A07048()
{
  return 7496038;
}

uint64_t sub_1B1A07058()
{
  return 0x7469736E65746E69;
}

uint64_t sub_1B1A07074()
{
  return 0x65727574786574;
}

uint64_t sub_1B1A0708C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1B1A07254(a1, a2);
  *a3 = result;
  return result;
}

void sub_1B1A070B0(_BYTE *a1@<X8>)
{
  *a1 = 8;
}

uint64_t sub_1B1A070BC()
{
  sub_1B1A087F0();
  return sub_1B222A1D4();
}

uint64_t sub_1B1A070E4()
{
  sub_1B1A087F0();
  return sub_1B222A1E0();
}

double sub_1B1A0710C@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  int v7;

  sub_1B1A075D0(a1, (uint64_t)v6);
  if (!v2)
  {
    result = *(double *)v6;
    v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    *(_DWORD *)(a2 + 32) = v7;
  }
  return result;
}

uint64_t sub_1B1A07150(_QWORD *a1)
{
  return sub_1B1A06CA4(a1);
}

uint64_t sub_1B1A07164()
{
  return type metadata accessor for ProjectorSystem();
}

uint64_t sub_1B1A07180(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t ObjectType;

  ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(a2 + 8))(v2 + 28, 0, ObjectType, a2);
}

double sub_1B1A071C8@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)a1 = 0x3FC90FDA3F9C61A9;
  *(_DWORD *)(a1 + 8) = 1065353216;
  *(_BYTE *)(a1 + 12) = 0;
  *(_QWORD *)(a1 + 16) = 0x3F8000003DCCCCCDLL;
  *(_DWORD *)(a1 + 24) = 1065353216;
  *(_QWORD *)&result = 0xFFFFFFFFLL;
  *(_QWORD *)(a1 + 28) = 0xFFFFFFFFLL;
  return result;
}

uint64_t sub_1B1A071FC()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ProjectorSystem()
{
  return objc_opt_self();
}

uint64_t sub_1B1A07230()
{
  return swift_allocObject();
}

const char *sub_1B1A07240()
{
  return "Projector";
}

uint64_t sub_1B1A07254(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x676E4172656E6E69 && a2 == 0xEA0000000000656CLL;
  if (v2 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x676E41726574756FLL && a2 == 0xEA0000000000656CLL || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6152746365707361 && a2 == 0xEB000000006F6974 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x75676E6174636572 && a2 == 0xEB0000000072616CLL || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 1918985582 && a2 == 0xE400000000000000 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 7496038 && a2 == 0xE300000000000000 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x7469736E65746E69 && a2 == 0xE900000000000079 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x65727574786574 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else
  {
    v6 = sub_1B2229D24();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 7;
    else
      return 8;
  }
}

uint64_t sub_1B1A075D0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int v11;
  int v12;
  int v13;
  int v14;
  char v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  char v25;

  sub_1B1A088BC(0, &qword_1EEF58A40, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED048]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = (char *)&v24 - v9;
  sub_1B19FA070(a1, a1[3]);
  sub_1B1A087F0();
  sub_1B222A150();
  if (v2)
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  v25 = 0;
  sub_1B1A08834();
  sub_1B2229814();
  v11 = v24;
  v25 = 1;
  sub_1B2229814();
  v12 = v24;
  LOBYTE(v24) = 2;
  sub_1B22297F0();
  v14 = v13;
  LOBYTE(v24) = 3;
  v15 = sub_1B22297D8();
  LOBYTE(v24) = 4;
  sub_1B22297F0();
  v17 = v16;
  LOBYTE(v24) = 5;
  sub_1B22297F0();
  v19 = v18;
  LOBYTE(v24) = 6;
  sub_1B22297F0();
  v21 = v20;
  v25 = 7;
  sub_1B1A08878();
  sub_1B2229814();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  v22 = v24;
  result = _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  *(_DWORD *)a2 = v11;
  *(_DWORD *)(a2 + 4) = v12;
  *(_DWORD *)(a2 + 8) = v14;
  *(_BYTE *)(a2 + 12) = v15 & 1;
  *(_DWORD *)(a2 + 16) = v17;
  *(_DWORD *)(a2 + 20) = v19;
  *(_DWORD *)(a2 + 24) = v21;
  *(_QWORD *)(a2 + 28) = v22;
  return result;
}

void sub_1B1A0789C(float32x2_t *a1, float32x4_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, float32x4_t a7, float32x4_t a8, float32x4_t a9, float32x4_t a10)
{
  int32x4_t v10;
  float v11;
  float32x4_t v12;
  int32x4_t v18;
  int v19;
  float32x4_t v24;
  float v25;
  float32x4_t v26;

  v10 = (int32x4_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a7, COERCE_FLOAT(*(_OWORD *)a1->f32)), a8, *a1, 1), a9, *(float32x4_t *)a1->f32, 2), a10, *(float32x4_t *)a1->f32, 3);
  v11 = *(float *)&v10.i32[2] / *(float *)&v10.i32[3];
  if ((float)(*(float *)&v10.i32[2] / *(float *)&v10.i32[3]) > 0.0)
  {
    *(float32x2_t *)a9.f32 = vdiv_f32(*(float32x2_t *)v10.i8, (float32x2_t)vdup_laneq_s32(v10, 3));
    v12 = a9;
    v12.f32[2] = v11;
    __asm { FMOV            V1.4S, #1.0 }
    v18 = vcgtq_f32(_Q1, vabsq_f32(v12));
    v19 = v18.i32[1];
    if (v18.i32[1] <= v18.i32[0])
      v19 = v18.i32[0];
    if (v18.i32[2] > v19)
      v19 = v18.i32[2];
    if (v19 < 0)
    {
      *(double *)v24.i64 = (*(double (**)(uint64_t, double))(a3 + 40))(a3, COERCE_DOUBLE(vadd_f32(vmul_f32(*(float32x2_t *)a9.f32, (float32x2_t)0x3F0000003F000000), (float32x2_t)0x3F0000003F000000)));
      v26 = v24;
      sub_1B1D58664(a5, a6 & 0xFFFFFFFFFFLL);
      *a2 = vaddq_f32(*a2, vmulq_n_f32(vsubq_f32(vmulq_n_f32(v26, COERCE_FLOAT(*(_QWORD *)(a4 + 24))), *a2), v25));
    }
  }
}

float32x4_t sub_1B1A079D0(float32x2_t *a1, float32x4_t *a2, float32x4_t result, float32x4_t a4, float32x4_t a5, float32x4_t a6, double a7, double a8, float32x4_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  int32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  int32x4_t v20;
  int v21;
  float v23;

  v12 = (int32x4_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(result, COERCE_FLOAT(*(_OWORD *)a1->f32)), a4, *a1, 1), a5, *(float32x4_t *)a1->f32, 2), a6, *(float32x4_t *)a1->f32, 3);
  result.i32[0] = v12.i32[3];
  if ((float)(*(float *)&v12.i32[2] / *(float *)&v12.i32[3]) > 0.0)
  {
    *(float32x2_t *)a4.f32 = vdiv_f32(*(float32x2_t *)v12.i8, (float32x2_t)vdup_laneq_s32(v12, 3));
    v13 = a4;
    v13.f32[2] = *(float *)&v12.i32[2] / *(float *)&v12.i32[3];
    v14 = vabsq_f32(v13);
    __asm { FMOV            V3.4S, #1.0 }
    v20 = vcgtq_f32(_Q3, v14);
    v21 = v20.i32[1];
    if (v20.i32[1] <= v20.i32[0])
      v21 = v20.i32[0];
    if (v20.i32[2] > v21)
      v21 = v20.i32[2];
    if (v21 < 0)
    {
      sub_1B1D58664(a11, a12 & 0xFFFFFFFFFFLL);
      result = vaddq_f32(*a2, vmulq_n_f32(vsubq_f32(a9, *a2), v23));
      *a2 = result;
    }
  }
  return result;
}

_QWORD *sub_1B1A07AAC(uint64_t a1)
{
  unint64_t v1;
  unint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  int32x2_t v6;
  unint64_t v7;
  uint64_t v8;
  unsigned int v9;
  float v10;
  unsigned __int32 v11;
  float v12;
  float v13;
  float v14;
  float32x4_t v15;
  float v16;
  float v17;
  float v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float v23;
  float v24;
  __int128 v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  os_unfair_lock_s *v35;
  uint64_t v36;
  uint64_t v37;
  float32x2_t *v38;
  uint64_t v39;
  double v40;
  double v41;
  float32x4_t *v42;
  uint64_t v43;
  uint64_t v44;
  float32x4_t *v45;
  float32x2_t *v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t i;
  unsigned int *v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  os_unfair_lock_s *v56;
  uint64_t v57;
  uint64_t v58;
  float32x2_t *v59;
  uint64_t v60;
  float32x4_t *v61;
  uint64_t v62;
  float32x4_t *v63;
  float32x2_t *v64;
  _OWORD *v66;
  char v67;
  uint64_t v68;
  _QWORD *v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  int32x2_t v88;
  float32x4_t v89;
  _QWORD *v90;
  float32x4_t v91;
  float32x4_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  float32x4_t v96;
  float32x4_t v97;
  float32x4_t v98;
  __int128 v99;
  __int128 v100;
  uint64_t v101;
  _OWORD v102[2];
  uint64_t v103;
  _OWORD v104[2];
  uint64_t v105;
  __int128 v106;
  __int128 v107;
  uint64_t v108;
  _DWORD v109[3];
  char v110;
  float v111;
  float v112;
  __int32 v113;
  unsigned int v114;
  int v115;
  _OWORD v116[3];
  uint64_t v117;
  _BYTE v118[80];
  int64x2_t v119[7];
  _BYTE v120[56];
  _OWORD v121[2];
  uint64_t v122;
  __int128 v123;
  __int128 v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  _QWORD *v129;
  uint64_t v130;
  _OWORD v131[2];
  __int128 v132;
  uint64_t v133;
  _OWORD v134[7];
  uint64_t v135;
  __n128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  uint64_t v143;
  float32x4_t v144;
  char v145;
  _BYTE v146[40];
  uint64_t v147;
  simd_float4x4 v148;
  simd_float4x4 v149;

  v147 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)a1;
  swift_retain();
  v5 = *(_QWORD **)(a1 + 8);
  swift_retain();
  sub_1B1D15770((uint64_t)v5, &v136);
  swift_release();
  if ((v136.n128_u64[1] & 0xFF00000000) == 0x200000000)
  {
    LOBYTE(v7) = 0;
    v8 = 0;
    v9 = -1;
    v10 = 1.0;
    v11 = 1067213225;
    v12 = 0.1;
    v13 = 1.5708;
    v14 = 1.0;
    v6.i32[0] = 1.0;
  }
  else
  {
    v8 = v138;
    v9 = HIDWORD(v137);
    v11 = v136.n128_u32[0];
    v10 = v136.n128_f32[2];
    v7 = HIDWORD(v136.n128_u64[1]) & 1;
    v13 = v136.n128_f32[1];
    v14 = *((float *)&v137 + 1);
    v12 = *(float *)&v137;
    v6.i32[0] = DWORD2(v137);
  }
  v109[0] = v11;
  *(float *)&v109[1] = v13;
  *(float *)&v109[2] = v10;
  v110 = v7;
  v111 = v12;
  v112 = v14;
  v88 = v6;
  v113 = v6.i32[0];
  v114 = v9;
  v115 = v8;
  sub_1B1D15764(v5, (uint64_t)v118);
  sub_1B19F66A0((uint64_t)v118, (uint64_t)&v144, qword_1ED4B8BB0);
  if ((v145 & 1) != 0)
    v15 = (float32x4_t)xmmword_1B2244DB0;
  else
    v15 = v144;
  *(double *)v148.columns[0].i64 = sub_1B1C2F8B8((float32x4_t)xmmword_1B2246860, v15);
  v149 = __invert_f4(v148);
  v95 = (float32x4_t)v149.columns[1];
  v97 = (float32x4_t)v149.columns[0];
  v91 = (float32x4_t)v149.columns[3];
  v93 = (float32x4_t)v149.columns[2];
  if (v14 >= v12)
    v16 = v12;
  else
    v16 = v14;
  if (v12 > v14)
    v17 = v12;
  else
    v17 = v14;
  v18 = fmaxf(v13, 0.0);
  if (v18 > 3.1416)
    v18 = 3.1416;
  sub_1B1C31954(0, 1, fmaxf(v18, 0.0), fmaxf(v10, 0.00000011921), v16, v17, 0, 0, 1);
  v98 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v19, v97.f32[0]), v20, *(float32x2_t *)v97.f32, 1), v21, v97, 2), v22, v97, 3);
  v96 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v19, v95.f32[0]), v20, *(float32x2_t *)v95.f32, 1), v21, v95, 2), v22, v95, 3);
  v94 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v19, v93.f32[0]), v20, *(float32x2_t *)v93.f32, 1), v21, v93, 2), v22, v93, 3);
  v92 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v19, v91.f32[0]), v20, *(float32x2_t *)v91.f32, 1), v21, v91, 2), v22, v91, 3);
  v23 = -1.0 / (float)(v14 - v12);
  v24 = 1.0 - (float)(v12 * v23);
  v25 = *(_OWORD *)(a1 + 104);
  v106 = *(_OWORD *)(a1 + 88);
  v107 = v25;
  v108 = *(_QWORD *)(a1 + 120);
  sub_1B19EDD58((uint64_t)&v99);
  if (v9 != -1 || (_DWORD)v8)
  {
    sub_1B20F03D8(v9 | (unint64_t)(v8 << 32), v119);
    sub_1B19F66A0((uint64_t)v119, (uint64_t)v134, (unint64_t *)&unk_1ED4B9160);
    if (v135)
    {
      v140 = v134[4];
      v141 = v134[5];
      v142 = v134[6];
      v143 = v135;
      v136 = (__n128)v134[0];
      v137 = v134[1];
      v138 = v134[2];
      v139 = v134[3];
      sub_1B1EDFCF8((uint64_t)&v136, 0, 1, (uint64_t)v120);
      sub_1B1A0857C((uint64_t)v120, (uint64_t)v131);
      if (*((_QWORD *)&v132 + 1) != 1)
      {
        v116[0] = v131[0];
        v116[1] = v131[1];
        v116[2] = v132;
        v117 = v133;
        v104[0] = v99;
        v104[1] = v100;
        v105 = v101;
        sub_1B1E8FCE4(v4, (uint64_t)v104, 0x200000000, v121);
        sub_1B19F66A0((uint64_t)v121, (uint64_t)&v123, (unint64_t *)&qword_1ED4B7DE0);
        if ((_QWORD)v123)
        {
          if (v130 > 0 && (v79 = v127) != 0)
          {
            v47 = v129[4];
            v48 = *(_BYTE *)(v128 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
            v102[0] = v123;
            v102[1] = v124;
            v103 = v125;
            v71 = (uint64_t)(v129 + 6);
            v73 = v126;
            v90 = v129;
            v69 = v129 + 8;
            swift_retain();
            swift_retain();
            swift_retain();
            v49 = 0;
            i = 0;
            v75 = v48;
            v77 = v47;
            do
            {
              v85 = i;
              v87 = v49;
              v51 = (unsigned int *)(v73 + 48 * v49);
              v83 = *v51;
              v81 = v51[1];
              v53 = (uint64_t *)*((_QWORD *)v51 + 2);
              v52 = *((_QWORD *)v51 + 3);
              v55 = *((_QWORD *)v51 + 4);
              v54 = *((_QWORD *)v51 + 5);
              if ((v48 & 1) != 0)
              {
                v56 = *(os_unfair_lock_s **)(v54 + 376);
                swift_retain_n();
                os_unfair_lock_lock(v56);
                os_unfair_lock_lock(*(os_unfair_lock_t *)(v54 + 344));
                swift_release();
              }
              else
              {
                swift_retain();
              }
              ecs_stack_allocator_push_snapshot(v47);
              sub_1B19F66A0(v71, (uint64_t)v146, &qword_1ED4B7FB0);
              v57 = v90[4];
              v58 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v54 + 40) + 16) + 32) + 16) + 1;
              swift_retain();
              v90[6] = ecs_stack_allocator_allocate(v57, 48 * v58, 8);
              v90[7] = v58;
              v69[1] = 0;
              v69[2] = 0;
              *v69 = 0;
              swift_release();
              v59 = (float32x2_t *)sub_1B1A12038((uint64_t)&type metadata for Position, (uint64_t)&off_1E63C2398, v53, v52, v55, (uint64_t)v90);
              v60 = sub_1B1A12038((uint64_t)&type metadata for Color, (uint64_t)&off_1E63BA190, v53, v52, v55, (uint64_t)v90);
              v61 = (float32x4_t *)v60;
              if (v53)
              {
                v47 = v77;
                for (i = v85; v55; --v55)
                {
                  v1 = v1 & 0xFFFFFF0000000000 | 0x700000000;
                  sub_1B1A0789C(v59, v61++, (uint64_t)v116, (uint64_t)v109, 0, v1, v98, v96, v94, v92);
                  v59 += 2;
                }
              }
              else
              {
                v47 = v77;
                i = v85;
                if ((_DWORD)v83 != (_DWORD)v81)
                {
                  v62 = v81 - v83;
                  v63 = (float32x4_t *)(v60 + 16 * v83);
                  v64 = &v59[2 * v83];
                  do
                  {
                    v2 = v2 & 0xFFFFFF0000000000 | 0x700000000;
                    sub_1B1A0789C(v64, v63++, (uint64_t)v116, (uint64_t)v109, 0, v2, v98, v96, v94, v92);
                    v64 += 2;
                    --v62;
                  }
                  while (v62);
                }
              }
              v48 = v75;
              sub_1B1F05D48(v90, (unsigned __int16 **)v102, (uint64_t)v146);
              sub_1B1F03804((char *)v54);
              ecs_stack_allocator_pop_snapshot(v47);
              if ((v75 & 1) != 0)
              {
                os_unfair_lock_unlock(*(os_unfair_lock_t *)(v54 + 344));
                os_unfair_lock_unlock(*(os_unfair_lock_t *)(v54 + 376));
              }
              swift_release();
              v49 = v87 + 1;
            }
            while (v87 + 1 != v79);
            sub_1B1A08614(v119[0].i64);
            sub_1B19ED720((uint64_t)&v99);
          }
          else
          {
            sub_1B1A086DC(v121, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1A086A4);
            sub_1B1A08614(v119[0].i64);
            sub_1B19ED720((uint64_t)&v99);
          }
          swift_release();
          sub_1B1A086DC(v121, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
          v66 = v121;
          return sub_1B1A086DC(v66, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
        }
      }
      sub_1B1A08614(v119[0].i64);
    }
    goto LABEL_57;
  }
  v123 = v99;
  v124 = v100;
  v125 = v101;
  sub_1B1E8FCE4(v4, (uint64_t)&v123, 0x200000000, v134);
  sub_1B19F66A0((uint64_t)v134, (uint64_t)&v136, (unint64_t *)&qword_1ED4B7DE0);
  if (!v136.n128_u64[0])
  {
LABEL_57:
    sub_1B19ED720((uint64_t)&v99);
    return (_QWORD *)swift_release();
  }
  if ((uint64_t)v141 <= 0 || (v76 = *((_QWORD *)&v139 + 1)) == 0)
  {
    swift_retain();
    swift_retain();
    swift_retain();
    sub_1B19ED720((uint64_t)&v99);
    goto LABEL_60;
  }
  v89 = (float32x4_t)vdupq_lane_s32(v88, 0);
  v26 = *(_QWORD *)(*((_QWORD *)&v140 + 1) + 32);
  v27 = *(_BYTE *)(v140 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
  v121[0] = v136;
  v121[1] = v137;
  v122 = v138;
  v72 = *((_QWORD *)&v140 + 1) + 48;
  v74 = *((_QWORD *)&v138 + 1);
  v86 = (_QWORD *)*((_QWORD *)&v140 + 1);
  v70 = (_QWORD *)(*((_QWORD *)&v140 + 1) + 64);
  swift_retain();
  swift_retain();
  swift_retain();
  v28 = 0;
  v29 = 0;
  v67 = v27;
  v68 = v26;
  do
  {
    v82 = v29;
    v84 = v28;
    v30 = (unsigned int *)(v74 + 48 * v28);
    v80 = *v30;
    v78 = v30[1];
    v31 = (uint64_t *)*((_QWORD *)v30 + 2);
    v32 = *((_QWORD *)v30 + 3);
    v34 = *((_QWORD *)v30 + 4);
    v33 = *((_QWORD *)v30 + 5);
    if ((v27 & 1) != 0)
    {
      v35 = *(os_unfair_lock_s **)(v33 + 376);
      swift_retain_n();
      os_unfair_lock_lock(v35);
      os_unfair_lock_lock(*(os_unfair_lock_t *)(v33 + 344));
      swift_release();
    }
    else
    {
      swift_retain();
    }
    ecs_stack_allocator_push_snapshot(v26);
    sub_1B19F66A0(v72, (uint64_t)v119, &qword_1ED4B7FB0);
    v36 = v86[4];
    v37 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v33 + 40) + 16) + 32) + 16) + 1;
    swift_retain();
    v86[6] = ecs_stack_allocator_allocate(v36, 48 * v37, 8);
    v86[7] = v37;
    v70[1] = 0;
    v70[2] = 0;
    *v70 = 0;
    swift_release();
    v38 = (float32x2_t *)sub_1B1A12038((uint64_t)&type metadata for Position, (uint64_t)&off_1E63C2398, v31, v32, v34, (uint64_t)v86);
    v39 = sub_1B1A12038((uint64_t)&type metadata for Color, (uint64_t)&off_1E63BA190, v31, v32, v34, (uint64_t)v86);
    v42 = (float32x4_t *)v39;
    if (v31)
    {
      v29 = v82;
      if (v34)
      {
        v26 = v68;
        v43 = v84;
        do
        {
          v2 = v2 & 0xFFFFFF0000000000 | 0x700000000;
          *(float *)&v40 = v23;
          *(float *)&v41 = v24;
          sub_1B1A079D0(v38, v42++, v98, v96, v94, v92, v40, v41, v89, (uint64_t)v109, 0, v2);
          v38 += 2;
          --v34;
        }
        while (v34);
        v27 = v67;
        goto LABEL_35;
      }
    }
    else
    {
      v29 = v82;
      if ((_DWORD)v80 != (_DWORD)v78)
      {
        v44 = v78 - v80;
        v45 = (float32x4_t *)(v39 + 16 * v80);
        v46 = &v38[2 * v80];
        v26 = v68;
        do
        {
          v1 = v1 & 0xFFFFFF0000000000 | 0x700000000;
          *(float *)&v40 = v23;
          *(float *)&v41 = v24;
          sub_1B1A079D0(v46, v45++, v98, v96, v94, v92, v40, v41, v89, (uint64_t)v109, 0, v1);
          v46 += 2;
          --v44;
        }
        while (v44);
        goto LABEL_34;
      }
    }
    v26 = v68;
LABEL_34:
    v27 = v67;
    v43 = v84;
LABEL_35:
    sub_1B1F05D48(v86, (unsigned __int16 **)v121, (uint64_t)v119);
    sub_1B1F03804((char *)v33);
    ecs_stack_allocator_pop_snapshot(v26);
    if ((v27 & 1) != 0)
    {
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v33 + 344));
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v33 + 376));
    }
    swift_release();
    v28 = v43 + 1;
  }
  while (v28 != v76);
  sub_1B19ED720((uint64_t)&v99);
LABEL_60:
  swift_release();
  sub_1B1A086DC(v134, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
  v66 = v134;
  return sub_1B1A086DC(v66, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
}

uint64_t sub_1B1A0857C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1B1A085C0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_1B1A085C0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF61C50)
  {
    type metadata accessor for __vfx_sampler2d(255);
    v0 = sub_1B2229124();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF61C50);
  }
}

uint64_t *sub_1B1A08614(uint64_t *a1)
{
  sub_1B1A0866C(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11], a1[12], a1[13], a1[14]);
  return a1;
}

uint64_t sub_1B1A0866C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t result;

  result = a15;
  if (a15)
  {
    swift_bridgeObjectRelease();
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t sub_1B1A086A4(uint64_t result)
{
  if (result)
  {
    swift_retain();
    swift_retain();
    return swift_retain();
  }
  return result;
}

_QWORD *sub_1B1A086DC(_QWORD *a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  a2(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11]);
  return a1;
}

__n128 initializeWithCopy for ProjectorParameters(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for ProjectorParameters(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 36))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 12);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for ProjectorParameters(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_DWORD *)(result + 32) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 36) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 36) = 0;
    if (a2)
      *(_BYTE *)(result + 12) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for ProjectorParameters()
{
  return &type metadata for ProjectorParameters;
}

unint64_t sub_1B1A087F0()
{
  unint64_t result;

  result = qword_1EEF58A48;
  if (!qword_1EEF58A48)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B226D568, &type metadata for ProjectorParameters.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF58A48);
  }
  return result;
}

unint64_t sub_1B1A08834()
{
  unint64_t result;

  result = qword_1EEF58A50;
  if (!qword_1EEF58A50)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2282868, &type metadata for AngleF);
    atomic_store(result, (unint64_t *)&qword_1EEF58A50);
  }
  return result;
}

unint64_t sub_1B1A08878()
{
  unint64_t result;

  result = qword_1ED4B9F60;
  if (!qword_1ED4B9F60)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22805D4, &type metadata for Entity);
    atomic_store(result, (unint64_t *)&qword_1ED4B9F60);
  }
  return result;
}

void sub_1B1A088BC(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_1B1A087F0();
    v7 = a3(a1, &type metadata for ProjectorParameters.CodingKeys, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

unint64_t sub_1B1A08918()
{
  unint64_t result;

  result = qword_1EEF58A60;
  if (!qword_1EEF58A60)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2282840, &type metadata for AngleF);
    atomic_store(result, (unint64_t *)&qword_1EEF58A60);
  }
  return result;
}

unint64_t sub_1B1A0895C()
{
  unint64_t result;

  result = qword_1EEF5D830;
  if (!qword_1EEF5D830)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22805AC, &type metadata for Entity);
    atomic_store(result, (unint64_t *)&qword_1EEF5D830);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for ShaderScriptParameter.VertexProperty(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF9)
    goto LABEL_17;
  if (a2 + 7 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 7) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 7;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 7;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 7;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 8;
  v8 = v6 - 8;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ProjectorParameters.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_1B1A08A7C + 4 * byte_1B226D3AD[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_1B1A08AB0 + 4 * byte_1B226D3A8[v4]))();
}

uint64_t sub_1B1A08AB0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1A08AB8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B1A08AC0);
  return result;
}

uint64_t sub_1B1A08ACC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B1A08AD4);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_1B1A08AD8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1A08AE0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *sub_1B1A08AEC(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for ProjectorParameters.CodingKeys()
{
  return &type metadata for ProjectorParameters.CodingKeys;
}

unint64_t sub_1B1A08B08()
{
  unint64_t result;

  result = qword_1EEF58A68;
  if (!qword_1EEF58A68)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B226D540, &type metadata for ProjectorParameters.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF58A68);
  }
  return result;
}

unint64_t sub_1B1A08B50()
{
  unint64_t result;

  result = qword_1EEF58A70;
  if (!qword_1EEF58A70)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B226D4B0, &type metadata for ProjectorParameters.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF58A70);
  }
  return result;
}

unint64_t sub_1B1A08B98()
{
  unint64_t result;

  result = qword_1EEF58A78;
  if (!qword_1EEF58A78)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B226D4D8, &type metadata for ProjectorParameters.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF58A78);
  }
  return result;
}

ValueMetadata *type metadata accessor for Position()
{
  return &type metadata for Position;
}

uint64_t sub_1B1A08BEC@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  __int128 v5;

  result = sub_1B1A09240(a1);
  if (!v2)
    *a2 = v5;
  return result;
}

uint64_t sub_1B1A08C14(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  _BYTE v4[24];
  uint64_t v5;

  sub_1B19FA070(a1, a1[3]);
  v1 = sub_1B222A168();
  nullsub_16(v1);
  sub_1B19FC264((uint64_t)v4, v5);
  v2 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50];
  sub_1B19F8E54(0, (unint64_t *)&qword_1ED4BB0A0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50]);
  sub_1B1A09538((unint64_t *)&qword_1ED4B72F8, (unint64_t *)&qword_1ED4BB0A0, v2, MEMORY[0x1E0DEDD60]);
  sub_1B2229DF0();
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v4);
}

double sub_1B1A08D14@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.0;
  *a1 = xmmword_1B2244E20;
  return result;
}

uint64_t sub_1B1A08D24(_QWORD *a1, __n128 a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  _OWORD v11[2];

  v11[0] = a2;
  sub_1B19F8E54(0, &qword_1EEF58A98, (uint64_t (*)(void))sub_1B1A0982C, (uint64_t)&type metadata for Normal.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v6);
  v8 = (char *)v11 - v7;
  sub_1B19FA070(a1, a1[3]);
  sub_1B1A0982C();
  sub_1B222A180();
  v11[1] = v11[0];
  v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDDA8];
  sub_1B19F8E54(0, (unint64_t *)&qword_1ED4BB0E0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDDA8]);
  sub_1B1A09538((unint64_t *)&qword_1ED4B7318, (unint64_t *)&qword_1ED4BB0E0, v9, MEMORY[0x1E0DEDDB8]);
  sub_1B2229958();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
}

uint64_t sub_1B1A08E80()
{
  sub_1B222A06C();
  sub_1B222A078();
  return sub_1B222A0C0();
}

uint64_t sub_1B1A08EC0()
{
  return sub_1B222A078();
}

uint64_t sub_1B1A08EE4()
{
  sub_1B222A06C();
  sub_1B222A078();
  return sub_1B222A0C0();
}

uint64_t sub_1B1A08F20()
{
  return 0x30775F65756C6176;
}

uint64_t sub_1B1A08F38@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x30775F65756C6176 && a2 == 0xE800000000000000)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_1B2229D24();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_1B1A08FCC()
{
  sub_1B1A0982C();
  return sub_1B222A1D4();
}

uint64_t sub_1B1A08FF4()
{
  sub_1B1A0982C();
  return sub_1B222A1E0();
}

uint64_t sub_1B1A0901C@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  __int128 v5;

  result = sub_1B1A0968C(a1);
  if (!v2)
    *a2 = v5;
  return result;
}

uint64_t sub_1B1A09044(_QWORD *a1)
{
  __n128 *v1;

  return sub_1B1A08D24(a1, *v1);
}

void sub_1B1A0905C(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t sub_1B1A09064()
{
  sub_1B222A06C();
  sub_1B2228824();
  return sub_1B222A0C0();
}

uint64_t sub_1B1A090B4()
{
  return sub_1B2228824();
}

uint64_t sub_1B1A090CC()
{
  sub_1B222A06C();
  sub_1B2228824();
  return sub_1B222A0C0();
}

uint64_t sub_1B1A09118@<X0>(BOOL *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = sub_1B2229730();
  result = swift_bridgeObjectRelease();
  *a1 = v2 != 0;
  return result;
}

void sub_1B1A09168(_QWORD *a1@<X8>)
{
  *a1 = 0x31775F65756C6176;
  a1[1] = 0xE800000000000000;
}

uint64_t sub_1B1A09184()
{
  return 0x31775F65756C6176;
}

uint64_t sub_1B1A0919C@<X0>(BOOL *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = sub_1B2229730();
  result = swift_bridgeObjectRelease();
  *a1 = v2 != 0;
  return result;
}

uint64_t sub_1B1A091F0()
{
  sub_1B1A094F4();
  return sub_1B222A1D4();
}

uint64_t sub_1B1A09218()
{
  sub_1B1A094F4();
  return sub_1B222A1E0();
}

uint64_t sub_1B1A09240(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t);
  __int128 v14;
  __int128 v15;
  _OWORD v16[2];
  __int128 v17;
  uint64_t v18;

  sub_1B19F8E54(0, &qword_1ED4BAC88, (uint64_t (*)(void))sub_1B1A094F4, (uint64_t)&type metadata for Position.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v6);
  v8 = (char *)v16 - v7;
  v9 = a1[3];
  v10 = a1[4];
  sub_1B19FA070(a1, v9);
  if (sub_1B2067B64(1018, v9, v10))
  {
    sub_1B19FA070(a1, a1[3]);
    sub_1B1A094F4();
    sub_1B222A150();
    if (!v1)
    {
      v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDDA8];
      sub_1B19F8E54(0, (unint64_t *)&qword_1ED4BB0E0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDDA8]);
      sub_1B1A09538((unint64_t *)&qword_1ED4B7330, (unint64_t *)&qword_1ED4BB0E0, v11, MEMORY[0x1E0DEDDC8]);
      sub_1B2229814();
      v16[0] = v17;
      (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
      v14 = v16[0];
      HIDWORD(v14) = 1.0;
      v16[0] = v14;
    }
  }
  else
  {
    sub_1B19FA070(a1, a1[3]);
    sub_1B222A138();
    if (!v1)
    {
      sub_1B19FA070(&v17, v18);
      v12 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50];
      sub_1B19F8E54(0, (unint64_t *)&qword_1ED4BB0A0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50]);
      sub_1B1A09538((unint64_t *)&qword_1ED4B7310, (unint64_t *)&qword_1ED4BB0A0, v12, MEMORY[0x1E0DEDD70]);
      sub_1B2229D6C();
      v15 = v16[1];
      HIDWORD(v15) = 1.0;
      v16[0] = v15;
      _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v17);
    }
  }
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
}

unint64_t sub_1B1A094F4()
{
  unint64_t result;

  result = qword_1ED4BA100;
  if (!qword_1ED4BA100)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B226D7C0, &type metadata for Position.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED4BA100);
  }
  return result;
}

uint64_t sub_1B1A09538(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    sub_1B19F8E54(255, a2, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], a3);
    result = MEMORY[0x1B5E23E74](a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

ValueMetadata *type metadata accessor for Position.CodingKeys()
{
  return &type metadata for Position.CodingKeys;
}

ValueMetadata *type metadata accessor for Normal()
{
  return &type metadata for Normal;
}

unint64_t sub_1B1A095B8()
{
  unint64_t result;

  result = qword_1EEF58A80;
  if (!qword_1EEF58A80)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B226D798, &type metadata for Position.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF58A80);
  }
  return result;
}

unint64_t sub_1B1A09600()
{
  unint64_t result;

  result = qword_1ED4BA110;
  if (!qword_1ED4BA110)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B226D6D0, &type metadata for Position.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED4BA110);
  }
  return result;
}

unint64_t sub_1B1A09648()
{
  unint64_t result;

  result = qword_1ED4BA108;
  if (!qword_1ED4BA108)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B226D6F8, &type metadata for Position.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED4BA108);
  }
  return result;
}

uint64_t sub_1B1A0968C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  _OWORD v11[2];

  sub_1B19F8E54(0, &qword_1EEF58A88, (uint64_t (*)(void))sub_1B1A0982C, (uint64_t)&type metadata for Normal.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v6);
  v8 = (char *)v11 - v7;
  sub_1B19FA070(a1, a1[3]);
  sub_1B1A0982C();
  sub_1B222A150();
  if (!v1)
  {
    v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDDA8];
    sub_1B19F8E54(0, (unint64_t *)&qword_1ED4BB0E0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDDA8]);
    sub_1B1A09538((unint64_t *)&qword_1ED4B7330, (unint64_t *)&qword_1ED4BB0E0, v9, MEMORY[0x1E0DEDDC8]);
    sub_1B2229814();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    v11[0] = v11[1];
  }
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
}

unint64_t sub_1B1A0982C()
{
  unint64_t result;

  result = qword_1EEF58A90;
  if (!qword_1EEF58A90)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B226D8E8, &type metadata for Normal.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF58A90);
  }
  return result;
}

uint64_t _s3VFX8PositionV10CodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1B1A098B0 + 4 * byte_1B226D5C8[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1B1A098D0 + 4 * byte_1B226D5CD[v4]))();
}

_BYTE *sub_1B1A098B0(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1B1A098D0(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1B1A098D8(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1B1A098E0(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1B1A098E8(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1B1A098F0(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for Normal.CodingKeys()
{
  return &type metadata for Normal.CodingKeys;
}

unint64_t sub_1B1A09910()
{
  unint64_t result;

  result = qword_1EEF58AA0;
  if (!qword_1EEF58AA0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B226D8C0, &type metadata for Normal.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF58AA0);
  }
  return result;
}

unint64_t sub_1B1A09958()
{
  unint64_t result;

  result = qword_1EEF58AA8;
  if (!qword_1EEF58AA8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B226D830, &type metadata for Normal.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF58AA8);
  }
  return result;
}

unint64_t sub_1B1A099A0()
{
  unint64_t result;

  result = qword_1EEF58AB0;
  if (!qword_1EEF58AB0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B226D858, &type metadata for Normal.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF58AB0);
  }
  return result;
}

uint64_t sub_1B1A09D8C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _OWORD v10[2];
  _OWORD v11[2];

  v1 = v0;
  v2 = sub_1B2229304();
  result = swift_conformsToProtocol2();
  if (!result)
  {
    __break(1u);
    goto LABEL_9;
  }
  result = swift_conformsToProtocol2();
  if (!result)
  {
LABEL_9:
    __break(1u);
    return result;
  }
  v4 = result;
  result = swift_weakLoadStrong();
  if (result)
  {
    v5 = result;
    swift_retain();
    swift_retain();
    sub_1B1DA4200(v5, v5, v1, v2, v4, v11);
    sub_1B1A0DCD4((uint64_t)v11, (uint64_t)&v8);
    if (v9)
    {
      sub_1B1A0DDAC(&v8, v10);
      v6 = sub_1B1A0A1A0((uint64_t)v10, *(void **)(v1 + 96));
      *(_QWORD *)&v8 = sub_1B20D7F58(v6);
      *((_QWORD *)&v8 + 1) = v7;
      MEMORY[0x1E0C80A78](v8, v7);
      sub_1B1A0CE6C();
      swift_release();
      sub_1B1A0DD70((uint64_t)v11);
      _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v10);
      return v8;
    }
    else
    {
      sub_1B1A0DD70((uint64_t)v11);
      swift_release();
      sub_1B1A0DD70((uint64_t)&v8);
      return 0;
    }
  }
  return result;
}

uint64_t sub_1B1A09F5C(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t Strong;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD *v10;
  uint64_t v11;
  _QWORD v12[9];
  __int128 v13;
  uint64_t v14;
  _OWORD v15[2];
  _BYTE v16[32];
  uint64_t v17;
  unint64_t v18;

  if (a2 >> 60 != 15)
  {
    v3 = v2;
    v5 = result;
    v17 = result;
    v18 = a2;
    Strong = swift_weakLoadStrong();
    if (!Strong)
      return sub_1B1A0DAC8(v5, a2);
    v7 = Strong;
    sub_1B1A0DC90(v5, a2);
    v8 = sub_1B2229304();
    result = swift_conformsToProtocol2();
    if (result)
    {
      result = swift_conformsToProtocol2();
      if (result)
      {
        v9 = result;
        swift_retain();
        sub_1B1A0D134((uint64_t)&v17);
        sub_1B1A0DCD4((uint64_t)v16, (uint64_t)&v13);
        if (v14)
        {
          v10 = sub_1B1A0DDAC(&v13, v15);
          MEMORY[0x1E0C80A78](v10, v11);
          v12[2] = v7;
          v12[3] = v15;
          v12[4] = v3;
          v12[5] = v8;
          v12[6] = v9;
          sub_1B1C276DC((void (*)(void))sub_1B1A0DDBC, (uint64_t)v12);
          sub_1B1A0DAC8(v5, a2);
          sub_1B1A0DD70((uint64_t)v16);
          sub_1B1A0DADC(v17, v18);
          swift_release();
          return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v15);
        }
        else
        {
          swift_release();
          sub_1B1A0DAC8(v5, a2);
          sub_1B1A0DD70((uint64_t)v16);
          sub_1B1A0DADC(v17, v18);
          return sub_1B1A0DD70((uint64_t)&v13);
        }
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_1B1A0A11C@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;

  if (*(_QWORD *)(a1 + 40))
    v5 = *(_QWORD *)(a1 + 40);
  else
    v5 = 0xFFFFFFFFLL;
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 160) + 32);
  swift_retain();
  sub_1B1E1A57C(v5, a2, v6, a3);
  return swift_release();
}

uint64_t sub_1B1A0A1A0(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  id v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t result;
  id v14;
  _QWORD v15[4];

  v4 = sub_1B22287A0();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = 1;
  switch((unint64_t)a2)
  {
    case 0uLL:
      sub_1B1A02864(a1, (uint64_t)v15);
      swift_dynamicCast();
      sub_1B2228788();
      sub_1B2228758();
      v12 = v11;
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
      if (v12 >> 60 != 15)
        __asm { BR              X10 }
      v9 = 1;
      goto LABEL_16;
    case 1uLL:
    case 2uLL:
    case 7uLL:
      goto LABEL_16;
    case 3uLL:
    case 8uLL:
      v9 = 2;
      goto LABEL_16;
    case 4uLL:
    case 9uLL:
    case 0xCuLL:
      v9 = 4;
      goto LABEL_16;
    case 5uLL:
    case 6uLL:
    case 0xAuLL:
    case 0xBuLL:
    case 0xDuLL:
      v9 = 8;
      goto LABEL_16;
    case 0xEuLL:
    case 0xFuLL:
    case 0x12uLL:
      v9 = 16;
      goto LABEL_16;
    case 0x10uLL:
      v9 = 48;
      goto LABEL_16;
    case 0x11uLL:
      v9 = 64;
      goto LABEL_16;
    case 0x13uLL:
    case 0x14uLL:
      v9 = 32;
      goto LABEL_16;
    case 0x15uLL:
      v9 = 96;
      goto LABEL_16;
    case 0x16uLL:
      v9 = 128;
      goto LABEL_16;
    case 0x17uLL:
      v9 = 0;
      goto LABEL_16;
    case 0x18uLL:
    case 0x19uLL:
      sub_1B1A02864(a1, (uint64_t)v15);
      sub_1B1A0DDDC();
      swift_dynamicCast();
      v10 = v14;
      v9 = (uint64_t)objc_msgSend(v14, sel_serializedVFXBindingSize);

LABEL_16:
      result = v9;
      break;
    default:
      v15[0] = 0;
      v15[1] = 0xE000000000000000;
      sub_1B2228890();
      v14 = a2;
      sub_1B22295EC();
      result = sub_1B2229688();
      __break(1u);
      break;
  }
  return result;
}

double sub_1B1A0A464(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  unint64_t (*v9)();
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t);
  double result;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  unint64_t *v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, uint64_t, uint64_t);
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  _OWORD v42[2];
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  switch(a3)
  {
    case 0:
      sub_1B1A02864(a1, (uint64_t)&v34);
      swift_dynamicCast();
      _s3VFX22VFXMemorySerializationC11writeString_2toySS_SvtFZ_0();
      swift_bridgeObjectRelease();
      return result;
    case 1:
    case 2:
    case 7:
      sub_1B1A02864(a1, (uint64_t)&v34);
      swift_dynamicCast();
      *(_BYTE *)a2 = v42[0];
      return result;
    case 3:
    case 8:
      sub_1B1A02864(a1, (uint64_t)&v34);
      swift_dynamicCast();
      *(_WORD *)a2 = v42[0];
      return result;
    case 4:
    case 9:
      sub_1B1A02864(a1, (uint64_t)&v34);
      swift_dynamicCast();
      *(_DWORD *)a2 = v42[0];
      return result;
    case 5:
    case 6:
    case 10:
      sub_1B1A02864(a1, (uint64_t)&v34);
      swift_dynamicCast();
      *(_QWORD *)a2 = *(_QWORD *)&v42[0];
      return result;
    case 11:
      sub_1B1A02864(a1, (uint64_t)&v34);
      goto LABEL_7;
    case 12:
      sub_1B1A02864(a1, (uint64_t)&v34);
      swift_dynamicCast();
      LODWORD(result) = v42[0];
      *(_DWORD *)a2 = v42[0];
      return result;
    case 13:
      sub_1B1A02864(a1, (uint64_t)&v34);
      sub_1B19F8E54(0, &qword_1ED4BB080, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], MEMORY[0x1E0DEDD20]);
LABEL_7:
      swift_dynamicCast();
      result = *(double *)v42;
      *(_QWORD *)a2 = *(_QWORD *)&v42[0];
      return result;
    case 14:
      sub_1B1A02864(a1, (uint64_t)&v34);
      v8 = &qword_1ED4BB0A0;
      v9 = sub_1B19F8DCC;
      v10 = MEMORY[0x1E0DEB188];
      v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50];
      goto LABEL_21;
    case 15:
      sub_1B1A02864(a1, (uint64_t)&v34);
      v8 = &qword_1ED4BB0E0;
      v9 = sub_1B19F8DCC;
      v10 = MEMORY[0x1E0DEB188];
      v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDDA8];
      goto LABEL_21;
    case 16:
      sub_1B1A02864(a1, (uint64_t)v42);
      type metadata accessor for simd_float3x3(0);
      swift_dynamicCast();
      result = *(double *)&v34;
      v13 = v35;
      v14 = v36;
      *(_OWORD *)a2 = v34;
      *(_OWORD *)(a2 + 16) = v13;
      *(_OWORD *)(a2 + 32) = v14;
      return result;
    case 17:
      sub_1B1A02864(a1, (uint64_t)v42);
      type metadata accessor for simd_float4x4(0);
      swift_dynamicCast();
      result = *(double *)&v34;
      v15 = v35;
      v16 = v36;
      v17 = v37;
      *(_OWORD *)a2 = v34;
      *(_OWORD *)(a2 + 16) = v15;
      *(_OWORD *)(a2 + 32) = v16;
      *(_OWORD *)(a2 + 48) = v17;
      return result;
    case 18:
      sub_1B1A02864(a1, (uint64_t)&v34);
      v8 = (uint64_t *)&unk_1EEF58AE0;
      v9 = sub_1B1A0DC4C;
      v10 = MEMORY[0x1E0DEB070];
      v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD20];
LABEL_21:
      sub_1B19F8E54(0, (unint64_t *)v8, (uint64_t (*)(void))v9, v10, v11);
      swift_dynamicCast();
      result = *(double *)v42;
      *(_OWORD *)a2 = v42[0];
      return result;
    case 19:
      sub_1B1A02864(a1, (uint64_t)&v34);
      v18 = (unint64_t *)&unk_1EEF58AD8;
      v19 = MEMORY[0x1E0DEB070];
      v20 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50];
      goto LABEL_18;
    case 20:
      sub_1B1A02864(a1, (uint64_t)&v34);
      v18 = (unint64_t *)&unk_1EEF58AC8;
      v19 = MEMORY[0x1E0DEB070];
      v20 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDDA8];
LABEL_18:
      sub_1B19F8E54(0, v18, (uint64_t (*)(void))sub_1B1A0DC4C, v19, v20);
      swift_dynamicCast();
      result = *(double *)v42;
      v21 = v42[1];
      *(_OWORD *)a2 = v42[0];
      *(_OWORD *)(a2 + 16) = v21;
      break;
    case 21:
      sub_1B1A02864(a1, (uint64_t)v42);
      type metadata accessor for simd_double3x3(0);
      swift_dynamicCast();
      result = *(double *)&v34;
      v22 = v35;
      v23 = v36;
      v24 = v37;
      v25 = v38;
      v26 = v39;
      *(_OWORD *)a2 = v34;
      *(_OWORD *)(a2 + 16) = v22;
      *(_OWORD *)(a2 + 32) = v23;
      *(_OWORD *)(a2 + 48) = v24;
      *(_OWORD *)(a2 + 64) = v25;
      *(_OWORD *)(a2 + 80) = v26;
      break;
    case 22:
      sub_1B1A02864(a1, (uint64_t)v42);
      type metadata accessor for simd_double4x4(0);
      swift_dynamicCast();
      result = *(double *)&v34;
      v27 = v35;
      v28 = v36;
      v29 = v37;
      v30 = v38;
      v31 = v39;
      v32 = v40;
      v33 = v41;
      *(_OWORD *)a2 = v34;
      *(_OWORD *)(a2 + 16) = v27;
      *(_OWORD *)(a2 + 32) = v28;
      *(_OWORD *)(a2 + 48) = v29;
      *(_OWORD *)(a2 + 64) = v30;
      *(_OWORD *)(a2 + 80) = v31;
      *(_OWORD *)(a2 + 96) = v32;
      *(_OWORD *)(a2 + 112) = v33;
      break;
    case 23:
      return result;
    case 24:
    case 25:
      sub_1B1A02864(a1, (uint64_t)&v34);
      sub_1B1A0DDDC();
      swift_dynamicCast();
      v5 = objc_msgSend(*(id *)&v42[0], sel_serializedVFXBindingData);
      sub_1B222817C();
      v7 = v6;

      __asm { BR              X10 }
      return result;
    default:
      *(_QWORD *)&v34 = 0;
      *((_QWORD *)&v34 + 1) = 0xE000000000000000;
      sub_1B2228890();
      *(_QWORD *)&v42[0] = a3;
      sub_1B22295EC();
      sub_1B2229688();
      __break(1u);
      JUMPOUT(0x1B1A0AB18);
  }
  return result;
}

void sub_1B1A0AB90(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  id v4;
  uint64_t *v5;
  unint64_t (*v6)();
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  _OWORD *v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  __int16 v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _OWORD *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t *v31;
  uint64_t v32;
  uint64_t (*v33)(uint64_t, uint64_t, uint64_t);
  uint64_t v34;
  _OWORD *v35;
  uint64_t v36;
  _OWORD *v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;

  switch(a2)
  {
    case 0:
      v19 = sub_1B222871C();
      if (v20)
        v21 = v19;
      else
        v21 = 0;
      v22 = 0xE000000000000000;
      *(_QWORD *)(a3 + 24) = MEMORY[0x1E0DEA968];
      if (v20)
        v22 = v20;
      *(_QWORD *)a3 = v21;
      *(_QWORD *)(a3 + 8) = v22;
      return;
    case 1:
      v12 = *a1 & 1;
      v13 = MEMORY[0x1E0DEAFA0];
      goto LABEL_21;
    case 2:
      v12 = *a1;
      v13 = MEMORY[0x1E0DEDE70];
      goto LABEL_21;
    case 3:
      v14 = *(_WORD *)a1;
      v15 = MEMORY[0x1E0DEE068];
      goto LABEL_25;
    case 4:
      v16 = *(_DWORD *)a1;
      v17 = MEMORY[0x1E0DEE0F8];
      goto LABEL_11;
    case 5:
      v23 = *(_QWORD *)a1;
      v24 = MEMORY[0x1E0DEE190];
      goto LABEL_27;
    case 6:
      v23 = *(_QWORD *)a1;
      v24 = MEMORY[0x1E0DEB418];
      goto LABEL_27;
    case 7:
      v12 = *a1;
      v13 = MEMORY[0x1E0DEDA70];
LABEL_21:
      *(_QWORD *)(a3 + 24) = v13;
      *(_BYTE *)a3 = v12;
      return;
    case 8:
      v14 = *(_WORD *)a1;
      v15 = MEMORY[0x1E0DEDB58];
LABEL_25:
      *(_QWORD *)(a3 + 24) = v15;
      *(_WORD *)a3 = v14;
      return;
    case 9:
      v16 = *(_DWORD *)a1;
      v17 = MEMORY[0x1E0DEDBC8];
LABEL_11:
      *(_QWORD *)(a3 + 24) = v17;
      *(_DWORD *)a3 = v16;
      return;
    case 10:
      v23 = *(_QWORD *)a1;
      v24 = MEMORY[0x1E0DEDC60];
LABEL_27:
      *(_QWORD *)(a3 + 24) = v24;
      *(_QWORD *)a3 = v23;
      return;
    case 11:
      v11 = *(_QWORD *)a1;
      *(_QWORD *)(a3 + 24) = MEMORY[0x1E0DEB070];
      *(_QWORD *)a3 = v11;
      return;
    case 12:
      v18 = *(_DWORD *)a1;
      *(_QWORD *)(a3 + 24) = MEMORY[0x1E0DEB188];
      *(_DWORD *)a3 = v18;
      return;
    case 13:
      v25 = *(_QWORD *)a1;
      sub_1B19F8E54(0, &qword_1ED4BB080, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], MEMORY[0x1E0DEDD20]);
      *(_QWORD *)(a3 + 24) = v26;
      *(_QWORD *)a3 = v25;
      return;
    case 14:
      v57 = *(_OWORD *)a1;
      v5 = &qword_1ED4BB0A0;
      v6 = sub_1B19F8DCC;
      v7 = MEMORY[0x1E0DEB188];
      v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50];
      goto LABEL_31;
    case 15:
      v57 = *(_OWORD *)a1;
      v5 = &qword_1ED4BB0E0;
      v6 = sub_1B19F8DCC;
      v7 = MEMORY[0x1E0DEB188];
      v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDDA8];
      goto LABEL_31;
    case 16:
      v52 = *((_OWORD *)a1 + 1);
      v58 = *(_OWORD *)a1;
      v48 = *((_OWORD *)a1 + 2);
      type metadata accessor for simd_float3x3(0);
      *(_QWORD *)(a3 + 24) = v9;
      v10 = (_OWORD *)swift_allocObject();
      *(_QWORD *)a3 = v10;
      v10[1] = v58;
      v10[2] = v52;
      v10[3] = v48;
      return;
    case 17:
      v53 = *((_OWORD *)a1 + 1);
      v59 = *(_OWORD *)a1;
      v45 = *((_OWORD *)a1 + 3);
      v49 = *((_OWORD *)a1 + 2);
      type metadata accessor for simd_float4x4(0);
      *(_QWORD *)(a3 + 24) = v27;
      v28 = (_OWORD *)swift_allocObject();
      *(_QWORD *)a3 = v28;
      v28[1] = v59;
      v28[2] = v53;
      v28[3] = v49;
      v28[4] = v45;
      return;
    case 18:
      v57 = *(_OWORD *)a1;
      v5 = (uint64_t *)&unk_1EEF58AE0;
      v6 = sub_1B1A0DC4C;
      v7 = MEMORY[0x1E0DEB070];
      v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD20];
LABEL_31:
      sub_1B19F8E54(0, (unint64_t *)v5, (uint64_t (*)(void))v6, v7, v8);
      *(_QWORD *)(a3 + 24) = v29;
      v30 = swift_allocObject();
      *(_QWORD *)a3 = v30;
      goto LABEL_37;
    case 19:
      v54 = *((_OWORD *)a1 + 1);
      v57 = *(_OWORD *)a1;
      v31 = (unint64_t *)&unk_1EEF58AD8;
      v32 = MEMORY[0x1E0DEB070];
      v33 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50];
      goto LABEL_36;
    case 20:
      v54 = *((_OWORD *)a1 + 1);
      v57 = *(_OWORD *)a1;
      v31 = (unint64_t *)&unk_1EEF58AC8;
      v32 = MEMORY[0x1E0DEB070];
      v33 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDDA8];
LABEL_36:
      sub_1B19F8E54(0, v31, (uint64_t (*)(void))sub_1B1A0DC4C, v32, v33);
      *(_QWORD *)(a3 + 24) = v38;
      v30 = swift_allocObject();
      *(_QWORD *)a3 = v30;
      *(_OWORD *)(v30 + 32) = v54;
LABEL_37:
      *(_OWORD *)(v30 + 16) = v57;
      break;
    case 21:
      v60 = *(_OWORD *)a1;
      v46 = *((_OWORD *)a1 + 1);
      v55 = *((_OWORD *)a1 + 2);
      v50 = *((_OWORD *)a1 + 4);
      v41 = *((_OWORD *)a1 + 5);
      v43 = *((_OWORD *)a1 + 3);
      type metadata accessor for simd_double3x3(0);
      *(_QWORD *)(a3 + 24) = v34;
      v35 = (_OWORD *)swift_allocObject();
      *(_QWORD *)a3 = v35;
      v35[1] = v60;
      v35[2] = v46;
      v35[3] = v55;
      v35[4] = v43;
      v35[5] = v50;
      v35[6] = v41;
      break;
    case 22:
      v61 = *(_OWORD *)a1;
      v44 = *((_OWORD *)a1 + 1);
      v56 = *((_OWORD *)a1 + 2);
      v40 = *((_OWORD *)a1 + 5);
      v42 = *((_OWORD *)a1 + 3);
      v47 = *((_OWORD *)a1 + 6);
      v51 = *((_OWORD *)a1 + 4);
      v39 = *((_OWORD *)a1 + 7);
      type metadata accessor for simd_double4x4(0);
      *(_QWORD *)(a3 + 24) = v36;
      v37 = (_OWORD *)swift_allocObject();
      *(_QWORD *)a3 = v37;
      v37[1] = v61;
      v37[2] = v44;
      v37[3] = v56;
      v37[4] = v42;
      v37[5] = v51;
      v37[6] = v40;
      v37[7] = v47;
      v37[8] = v39;
      break;
    case 23:
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      break;
    case 24:
    case 25:
      v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CD2798]), sel_initWithSerializedVFXBindingDataPointer_, a1);
      *(_QWORD *)(a3 + 24) = sub_1B1A0DDDC();
      *(_QWORD *)a3 = v4;
      break;
    default:
      sub_1B2228890();
      sub_1B22295EC();
      sub_1B2229688();
      __break(1u);
      break;
  }
}

uint64_t sub_1B1A0B120(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;

  if (*(_QWORD *)(a3 + 40))
    v8 = *(_QWORD *)(a3 + 40);
  else
    v8 = 0xFFFFFFFFLL;
  v9 = *(_QWORD *)(*(_QWORD *)(a3 + 160) + 32);
  swift_retain();
  sub_1B1E1A668(a2, v8, a4, a5, v9);
  return swift_release();
}

uint64_t sub_1B1A0B1A4()
{
  uint64_t v0;

  swift_weakDestroy();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return v0;
}

uint64_t sub_1B1A0B1F8()
{
  sub_1B1A0B1A4();
  return swift_deallocClassInstance();
}

unint64_t VFXBindingType.init(rawValue:)(unint64_t a1)
{
  return sub_1B1A0D9D8(a1);
}

unint64_t sub_1B1A0B234@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result;
  char v4;

  result = sub_1B1A0D9D8(*a1);
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = v4 & 1;
  return result;
}

uint64_t sub_1B1A0B264()
{
  sub_1B1A0DEA8();
  return sub_1B2228A58();
}

uint64_t sub_1B1A0B2C0()
{
  sub_1B1A0DEA8();
  return sub_1B22289E0();
}

void sub_1B1A0B30C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t *v4;
  unint64_t (*v5)();
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t);

  switch(a1)
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 23:
    case 24:
      return;
    case 13:
      v4 = &qword_1ED4BB080;
      v5 = sub_1B19F8DCC;
      v6 = MEMORY[0x1E0DEB188];
      goto LABEL_9;
    case 14:
      v4 = (unint64_t *)&qword_1ED4BB0A0;
      v5 = sub_1B19F8DCC;
      v6 = MEMORY[0x1E0DEB188];
      goto LABEL_15;
    case 15:
      v4 = (unint64_t *)&qword_1ED4BB0E0;
      v5 = sub_1B19F8DCC;
      v6 = MEMORY[0x1E0DEB188];
      goto LABEL_11;
    case 16:
      type metadata accessor for simd_float3x3(0);
      return;
    case 17:
      type metadata accessor for simd_float4x4(0);
      return;
    case 18:
      v4 = (unint64_t *)&unk_1EEF58AE0;
      v5 = sub_1B1A0DC4C;
      v6 = MEMORY[0x1E0DEB070];
LABEL_9:
      v7 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD20];
      goto LABEL_16;
    case 19:
      v4 = (unint64_t *)&unk_1EEF58AD8;
      v5 = sub_1B1A0DC4C;
      v6 = MEMORY[0x1E0DEB070];
LABEL_15:
      v7 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50];
      goto LABEL_16;
    case 20:
      v4 = (unint64_t *)&unk_1EEF58AC8;
      v5 = sub_1B1A0DC4C;
      v6 = MEMORY[0x1E0DEB070];
LABEL_11:
      v7 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDDA8];
LABEL_16:
      sub_1B19F8E54(0, v4, (uint64_t (*)(void))v5, v6, v7);
      break;
    case 21:
      type metadata accessor for simd_double3x3(0);
      break;
    case 22:
      type metadata accessor for simd_double4x4(0);
      break;
    case 25:
      sub_1B1A0DBF0(0, a2, a3, a4);
      break;
    default:
      sub_1B2229F70();
      __break(1u);
      break;
  }
}

uint64_t static VFXMemorySerialization.readString(_:)()
{
  uint64_t result;
  uint64_t v1;

  result = sub_1B222871C();
  if (!v1)
    return 0;
  return result;
}

id static VFXMemorySerialization.readKeyframeAnimation(_:)(uint64_t a1)
{
  return objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CD2798]), sel_initWithSerializedVFXBindingDataPointer_, a1);
}

id VFXMemorySerialization.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

id VFXMemorySerialization.init()()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for VFXMemorySerialization();
  return objc_msgSendSuper2(&v2, sel_init);
}

id VFXMemorySerialization.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for VFXMemorySerialization();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

unint64_t VFXBindingSemantic.init(rawValue:)(unint64_t a1)
{
  return sub_1B1A0DAB8(a1);
}

unint64_t sub_1B1A0B744@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result;
  char v4;

  result = sub_1B1A0DAB8(*a1);
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = v4 & 1;
  return result;
}

uint64_t static VFXMemorySerialization.readBool(_:)(_BYTE *a1)
{
  return *a1 & 1;
}

uint64_t static VFXMemorySerialization.writeBool(_:to:)(uint64_t result, _BYTE *a2)
{
  *a2 = result;
  return result;
}

uint64_t static VFXMemorySerialization.writeUInt8(_:to:)(uint64_t result, _BYTE *a2)
{
  *a2 = result;
  return result;
}

uint64_t static VFXMemorySerialization.readUInt16(_:)(unsigned __int16 *a1)
{
  return *a1;
}

uint64_t static VFXMemorySerialization.readUInt32(_:)(unsigned int *a1)
{
  return *a1;
}

uint64_t static VFXMemorySerialization.readUInt64(_:)(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t static VFXMemorySerialization.readInt8(_:)(unsigned __int8 *a1)
{
  return *a1;
}

uint64_t static VFXMemorySerialization.writeInt16(_:to:)(uint64_t result, _WORD *a2)
{
  *a2 = result;
  return result;
}

uint64_t static VFXMemorySerialization.writeInt32(_:to:)(uint64_t result, _DWORD *a2)
{
  *a2 = result;
  return result;
}

uint64_t static VFXMemorySerialization.writeInt64(_:to:)(uint64_t result, _QWORD *a2)
{
  *a2 = result;
  return result;
}

double static VFXMemorySerialization.readDouble(_:)(uint64_t a1)
{
  return *(double *)a1;
}

double *static VFXMemorySerialization.writeDouble(_:to:)(double *result, double a2)
{
  *result = a2;
  return result;
}

float static VFXMemorySerialization.readFloat(_:)(uint64_t a1)
{
  return *(float *)a1;
}

float *static VFXMemorySerialization.writeFloat(_:to:)(float *result, float a2)
{
  *result = a2;
  return result;
}

double static VFXMemorySerialization.readSIMD2F(_:)(uint64_t a1)
{
  return *(double *)a1;
}

double *static VFXMemorySerialization.writeSIMD2F(_:to:)(double *result, double a2)
{
  *result = a2;
  return result;
}

__n128 static VFXMemorySerialization.readSIMD3F(_:)(uint64_t a1)
{
  return *(__n128 *)a1;
}

__n128 *static VFXMemorySerialization.writeSIMD3F(_:to:)(__n128 *result, __n128 a2)
{
  *result = a2;
  return result;
}

__n128 static VFXMemorySerialization.readSIMD4F(_:)(uint64_t a1)
{
  return *(__n128 *)a1;
}

__n128 static VFXMemorySerialization.readSIMD3x3F(_:)@<Q0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  v4 = *(_OWORD *)(a1 + 32);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  a2[2] = v4;
  return result;
}

__n128 static VFXMemorySerialization.writeSIMD3x3F(_:to:)(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;

  v2 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v2;
  result = *(__n128 *)(a1 + 32);
  *(__n128 *)(a2 + 32) = result;
  return result;
}

__n128 static VFXMemorySerialization.readSIMD4x4F(_:)(uint64_t a1)
{
  return *(__n128 *)a1;
}

__n128 *static VFXMemorySerialization.writeSIMD4x4F(_:to:)(__n128 *result, __n128 a2, __n128 a3, __n128 a4, __n128 a5)
{
  *result = a2;
  result[1] = a3;
  result[2] = a4;
  result[3] = a5;
  return result;
}

__n128 static VFXMemorySerialization.readSIMD2D(_:)(uint64_t a1)
{
  return *(__n128 *)a1;
}

__n128 *static VFXMemorySerialization.writeSIMD2D(_:to:)(__n128 *result, __n128 a2)
{
  *result = a2;
  return result;
}

__n128 static VFXMemorySerialization.readSIMD3D(_:)(uint64_t a1)
{
  return *(__n128 *)a1;
}

__n128 *static VFXMemorySerialization.writeSIMD3D(_:to:)(__n128 *result, __n128 a2, __n128 a3)
{
  return sub_1B1A0C8BC(result, a2, a3);
}

__n128 static VFXMemorySerialization.readSIMD4D(_:)(uint64_t a1)
{
  return *(__n128 *)a1;
}

__n128 *static VFXMemorySerialization.writeSIMD4D(_:to:)(__n128 *result, __n128 a2, __n128 a3)
{
  return sub_1B1A0C8BC(result, a2, a3);
}

__n128 *sub_1B1A0C8BC(__n128 *result, __n128 a2, __n128 a3)
{
  *result = a2;
  result[1] = a3;
  return result;
}

__n128 static VFXMemorySerialization.readSIMD3x3D(_:)@<Q0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  __n128 result;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  v4 = *(_OWORD *)(a1 + 32);
  v5 = *(_OWORD *)(a1 + 48);
  v6 = *(_OWORD *)(a1 + 64);
  v7 = *(_OWORD *)(a1 + 80);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  a2[2] = v4;
  a2[3] = v5;
  a2[4] = v6;
  a2[5] = v7;
  return result;
}

__n128 static VFXMemorySerialization.writeSIMD3x3D(_:to:)(uint64_t a1, _OWORD *a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;
  __int128 v5;

  v2 = *(_OWORD *)(a1 + 48);
  a2[2] = *(_OWORD *)(a1 + 32);
  a2[3] = v2;
  v3 = *(_OWORD *)(a1 + 80);
  a2[4] = *(_OWORD *)(a1 + 64);
  a2[5] = v3;
  result = *(__n128 *)a1;
  v5 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v5;
  return result;
}

__n128 static VFXMemorySerialization.readSIMD4x4D(_:)@<Q0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  __n128 result;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  v4 = *(_OWORD *)(a1 + 32);
  v5 = *(_OWORD *)(a1 + 48);
  v6 = *(_OWORD *)(a1 + 64);
  v7 = *(_OWORD *)(a1 + 80);
  v8 = *(_OWORD *)(a1 + 96);
  v9 = *(_OWORD *)(a1 + 112);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  a2[2] = v4;
  a2[3] = v5;
  a2[4] = v6;
  a2[5] = v7;
  a2[6] = v8;
  a2[7] = v9;
  return result;
}

__n128 static VFXMemorySerialization.writeSIMD4x4D(_:to:)(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;

  v2 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(a2 + 80) = v2;
  v3 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(a2 + 96) = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(a2 + 112) = v3;
  v4 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v4;
  result = *(__n128 *)(a1 + 32);
  v6 = *(_OWORD *)(a1 + 48);
  *(__n128 *)(a2 + 32) = result;
  *(_OWORD *)(a2 + 48) = v6;
  return result;
}

uint64_t static VFXMemorySerialization.VFXSerializedBufferSize(_:type:)(void *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  char *v9;
  uint64_t result;
  unint64_t v11;
  unint64_t v12;
  _WORD v13[8];

  v4 = sub_1B22287A0();
  v5 = *(_QWORD *)(v4 - 8);
  v7 = MEMORY[0x1E0C80A78](v4, v6);
  v9 = (char *)v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = 1;
  switch(a2)
  {
    case 0:
      swift_bridgeObjectRetain();
      sub_1B2228788();
      sub_1B2228758();
      v12 = v11;
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v5 + 8))(v9, v4);
      if (v12 >> 60 != 15)
        __asm { BR              X10 }
      result = 1;
      break;
    case 1:
    case 2:
    case 7:
      return result;
    case 3:
    case 8:
      result = 2;
      break;
    case 4:
    case 9:
    case 12:
      result = 4;
      break;
    case 5:
    case 6:
    case 10:
    case 11:
    case 13:
      result = 8;
      break;
    case 14:
    case 15:
    case 18:
      result = 16;
      break;
    case 16:
      result = 48;
      break;
    case 17:
      result = 64;
      break;
    case 19:
    case 20:
      result = 32;
      break;
    case 21:
      result = 96;
      break;
    case 22:
      result = 128;
      break;
    case 23:
      result = 0;
      break;
    case 24:
    case 25:
      result = (uint64_t)objc_msgSend(a1, sel_serializedVFXBindingSize, v7);
      break;
    default:
      strcpy((char *)v13, "Unknown type ");
      v13[7] = -4864;
      sub_1B222A210();
      sub_1B2228890();
      swift_bridgeObjectRelease();
      result = sub_1B2229688();
      __break(1u);
      break;
  }
  return result;
}

void sub_1B1A0CE6C()
{
  __asm { BR              X11 }
}

uint64_t sub_1B1A0CECC@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t result;
  unint64_t v4;
  uint64_t (*v5)(uint64_t *, char *);
  uint64_t v6;
  unsigned int v7;
  unsigned __int8 v8;
  unsigned __int8 v9;
  unsigned __int8 v10;

  v6 = v2;
  LOWORD(v7) = a1;
  BYTE2(v7) = BYTE2(a1);
  HIBYTE(v7) = BYTE3(a1);
  v8 = BYTE4(a1);
  v9 = BYTE5(a1);
  v10 = BYTE6(a1);
  result = v5(&v6, (char *)&v6 + BYTE6(a1));
  v4 = v7 | ((unint64_t)v8 << 32) | ((unint64_t)v9 << 40) | ((unint64_t)v10 << 48);
  *v1 = v6;
  v1[1] = v4;
  return result;
}

void sub_1B1A0D134(uint64_t a1)
{
  __asm { BR              X11 }
}

uint64_t sub_1B1A0D194@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  unint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned __int8 v9;
  unsigned __int8 v10;
  unsigned __int8 v11;

  v7 = v4;
  LOWORD(v8) = a1;
  BYTE2(v8) = BYTE2(a1);
  HIBYTE(v8) = BYTE3(a1);
  v9 = BYTE4(a1);
  v10 = BYTE5(a1);
  v11 = BYTE6(a1);
  sub_1B1A0AB90((char *)&v7, *(_QWORD *)(v2 + 96), v3);
  result = swift_release();
  v6 = v8 | ((unint64_t)v9 << 32) | ((unint64_t)v10 << 40) | ((unint64_t)v11 << 48);
  *v1 = v7;
  v1[1] = v6;
  return result;
}

uint64_t sub_1B1A0D3D0()
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if (swift_dynamicCastMetatype())
    return 0;
  if (swift_dynamicCastMetatype())
    return 1;
  if (swift_dynamicCastMetatype())
    return 2;
  if (swift_dynamicCastMetatype())
    return 3;
  if (swift_dynamicCastMetatype())
    return 4;
  if (swift_dynamicCastMetatype())
    return 5;
  if (swift_dynamicCastMetatype())
    return 6;
  if (swift_dynamicCastMetatype())
    return 7;
  if (swift_dynamicCastMetatype())
    return 8;
  if (swift_dynamicCastMetatype())
    return 9;
  if (swift_dynamicCastMetatype())
    return 10;
  if (swift_dynamicCastMetatype())
    return 11;
  if (swift_dynamicCastMetatype())
    return 12;
  sub_1B19F8E54(0, &qword_1ED4BB080, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], MEMORY[0x1E0DEDD20]);
  if (swift_dynamicCastMetatype())
    return 13;
  sub_1B19F8E54(0, (unint64_t *)&qword_1ED4BB0A0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50]);
  if (swift_dynamicCastMetatype())
    return 14;
  sub_1B19F8E54(0, (unint64_t *)&qword_1ED4BB0E0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDDA8]);
  if (swift_dynamicCastMetatype())
    return 15;
  type metadata accessor for simd_float3x3(0);
  if (swift_dynamicCastMetatype())
    return 16;
  type metadata accessor for simd_float4x4(0);
  if (swift_dynamicCastMetatype())
    return 17;
  sub_1B19F8E54(0, &qword_1EEF58AE0, (uint64_t (*)(void))sub_1B1A0DC4C, MEMORY[0x1E0DEB070], MEMORY[0x1E0DEDD20]);
  if (swift_dynamicCastMetatype())
    return 18;
  sub_1B19F8E54(0, &qword_1EEF58AD8, (uint64_t (*)(void))sub_1B1A0DC4C, MEMORY[0x1E0DEB070], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50]);
  if (swift_dynamicCastMetatype())
    return 19;
  sub_1B19F8E54(0, &qword_1EEF58AC8, (uint64_t (*)(void))sub_1B1A0DC4C, MEMORY[0x1E0DEB070], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDDA8]);
  if (swift_dynamicCastMetatype())
    return 20;
  type metadata accessor for simd_double3x3(0);
  if (swift_dynamicCastMetatype())
    return 21;
  type metadata accessor for simd_double4x4(0);
  if (swift_dynamicCastMetatype())
    return 22;
  if (swift_dynamicCastMetatype())
    return 24;
  sub_1B1A0DBF0(0, v1, v2, v3);
  if (swift_dynamicCastMetatype())
    return 25;
  else
    return 23;
}

uint64_t sub_1B1A0D768(uint64_t a1)
{
  if ((unint64_t)(a1 - 2) > 0x13)
    return 0;
  else
    return qword_1B226DC48[a1 - 2];
}

uint64_t sub_1B1A0D78C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, double a10, __int128 a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t v17;

  swift_weakInit();
  *(_QWORD *)(v17 + 144) = a15;
  *(_QWORD *)(v17 + 152) = 0;
  *(_QWORD *)(v17 + 24) = a1;
  *(_QWORD *)(v17 + 32) = a2;
  *(_QWORD *)(v17 + 40) = a3;
  *(_QWORD *)(v17 + 48) = a4;
  *(_QWORD *)(v17 + 56) = a5;
  *(_QWORD *)(v17 + 64) = a6;
  *(_QWORD *)(v17 + 72) = a7;
  *(_QWORD *)(v17 + 80) = a8;
  *(_OWORD *)(v17 + 88) = a11;
  *(_QWORD *)(v17 + 104) = a12;
  *(double *)(v17 + 112) = a9;
  *(double *)(v17 + 120) = a10;
  *(_BYTE *)(v17 + 128) = a13;
  *(_QWORD *)(v17 + 136) = a14;
  swift_bridgeObjectRelease();
  *(_QWORD *)(v17 + 152) = a16;
  swift_bridgeObjectRelease();
  *(_QWORD *)(v17 + 160) = a17;
  swift_weakAssign();
  return v17;
}

uint64_t _s3VFX22VFXMemorySerializationC11writeString_2toySS_SvtFZ_0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;
  uint64_t v8;

  v0 = sub_1B22287A0();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0, v2);
  v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1B2228788();
  sub_1B2228758();
  v6 = v5;
  result = (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v4, v0);
  if (v6 >> 60 != 15)
    __asm { BR              X10 }
  return result;
}

unint64_t sub_1B1A0D9D8(unint64_t result)
{
  if (result > 0x19)
    return 0;
  return result;
}

void _s3VFX22VFXMemorySerializationC22writeKeyframeAnimation_2toySo010CAKeyframeF0C_SvtFZ_0(void *a1)
{
  id v1;
  uint64_t v2;
  uint64_t v3;

  v1 = objc_msgSend(a1, sel_serializedVFXBindingData);
  sub_1B222817C();
  v3 = v2;

  __asm { BR              X10 }
}

uint64_t sub_1B1A0DA44()
{
  unint64_t v0;
  uint64_t v1;

  sub_1B22281D0();
  return sub_1B1A0DADC(v1, v0);
}

uint64_t type metadata accessor for VFXMemorySerialization()
{
  return objc_opt_self();
}

unint64_t sub_1B1A0DAB8(unint64_t result)
{
  if (result > 0xB)
    return 0;
  return result;
}

uint64_t sub_1B1A0DAC8(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return sub_1B1A0DADC(a1, a2);
  return a1;
}

uint64_t sub_1B1A0DADC(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_release();
  }
  return swift_release();
}

unint64_t sub_1B1A0DB24()
{
  unint64_t result;

  result = qword_1EEF58AB8;
  if (!qword_1EEF58AB8)
  {
    result = MEMORY[0x1B5E23E74](&protocol conformance descriptor for VFXBindingType, &type metadata for VFXBindingType);
    atomic_store(result, (unint64_t *)&qword_1EEF58AB8);
  }
  return result;
}

unint64_t sub_1B1A0DB6C()
{
  unint64_t result;

  result = qword_1EEF58AC0;
  if (!qword_1EEF58AC0)
  {
    result = MEMORY[0x1B5E23E74](&protocol conformance descriptor for VFXBindingSemantic, &type metadata for VFXBindingSemantic);
    atomic_store(result, (unint64_t *)&qword_1EEF58AC0);
  }
  return result;
}

uint64_t type metadata accessor for BindingImpl()
{
  return objc_opt_self();
}

ValueMetadata *type metadata accessor for VFXBindingType()
{
  return &type metadata for VFXBindingType;
}

ValueMetadata *type metadata accessor for VFXBindingSemantic()
{
  return &type metadata for VFXBindingSemantic;
}

void sub_1B1A0DBF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;

  if (!qword_1ED4B9F38)
  {
    v4 = type metadata accessor for Curve(0, MEMORY[0x1E0DEB188], (uint64_t)&off_1E63C66D8, a4);
    if (!v5)
      atomic_store(v4, (unint64_t *)&qword_1ED4B9F38);
  }
}

unint64_t sub_1B1A0DC4C()
{
  unint64_t result;

  result = qword_1EEF58AD0;
  if (!qword_1EEF58AD0)
  {
    result = MEMORY[0x1B5E23E74](MEMORY[0x1E0DEB0C0], MEMORY[0x1E0DEB070]);
    atomic_store(result, (unint64_t *)&qword_1EEF58AD0);
  }
  return result;
}

uint64_t sub_1B1A0DC90(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_retain();
  }
  return swift_retain();
}

uint64_t sub_1B1A0DCD4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1B1A0DD18();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_1B1A0DD18()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED4BB150)
  {
    v0 = sub_1B2229124();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED4BB150);
  }
}

uint64_t sub_1B1A0DD70(uint64_t a1)
{
  uint64_t v2;

  sub_1B1A0DD18();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

_OWORD *sub_1B1A0DDAC(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t sub_1B1A0DDBC()
{
  uint64_t *v0;

  return sub_1B1A0B120(v0[2], v0[3], v0[4], v0[5], v0[6]);
}

unint64_t sub_1B1A0DDDC()
{
  unint64_t result;

  result = qword_1ED4BA7A8;
  if (!qword_1ED4BA7A8)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1ED4BA7A8);
  }
  return result;
}

uint64_t sub_1B1A0DE18()
{
  return swift_deallocObject();
}

uint64_t sub_1B1A0DE28()
{
  return swift_deallocObject();
}

uint64_t sub_1B1A0DE38()
{
  return swift_deallocObject();
}

uint64_t sub_1B1A0DE48()
{
  return swift_deallocObject();
}

uint64_t sub_1B1A0DE58()
{
  return swift_deallocObject();
}

uint64_t sub_1B1A0DE68()
{
  return swift_deallocObject();
}

double sub_1B1A0DE78(uint64_t a1)
{
  uint64_t v1;

  return sub_1B1A0A464(*(_QWORD *)(v1 + 24), a1, *(_QWORD *)(*(_QWORD *)(v1 + 16) + 96));
}

unint64_t sub_1B1A0DEA8()
{
  unint64_t result;

  result = qword_1EEF58AE8;
  if (!qword_1EEF58AE8)
  {
    result = MEMORY[0x1B5E23E74](&protocol conformance descriptor for VFXBindingType, &type metadata for VFXBindingType);
    atomic_store(result, (unint64_t *)&qword_1EEF58AE8);
  }
  return result;
}

uint64_t static VFXMemorySerialization.readInt(_:)(uint64_t a1)
{
  return static VFXMemorySerialization.readUInt64(_:)(a1);
}

uint64_t static VFXMemorySerialization.readUInt8(_:)(unsigned __int8 *a1)
{
  return static VFXMemorySerialization.readInt8(_:)(a1);
}

uint64_t static VFXMemorySerialization.readInt16(_:)(unsigned __int16 *a1)
{
  return static VFXMemorySerialization.readUInt16(_:)(a1);
}

uint64_t static VFXMemorySerialization.readInt32(_:)(unsigned int *a1)
{
  return static VFXMemorySerialization.readUInt32(_:)(a1);
}

uint64_t static VFXMemorySerialization.readInt64(_:)(uint64_t a1)
{
  return static VFXMemorySerialization.readUInt64(_:)(a1);
}

uint64_t static VFXMemorySerialization.writeInt(_:to:)(uint64_t result, _QWORD *a2)
{
  return static VFXMemorySerialization.writeInt64(_:to:)(result, a2);
}

uint64_t static VFXMemorySerialization.writeInt8(_:to:)(uint64_t result, _BYTE *a2)
{
  return static VFXMemorySerialization.writeUInt8(_:to:)(result, a2);
}

uint64_t static VFXMemorySerialization.writeUInt16(_:to:)(uint64_t result, _WORD *a2)
{
  return static VFXMemorySerialization.writeInt16(_:to:)(result, a2);
}

uint64_t static VFXMemorySerialization.writeUInt32(_:to:)(uint64_t result, _DWORD *a2)
{
  return static VFXMemorySerialization.writeInt32(_:to:)(result, a2);
}

uint64_t static VFXMemorySerialization.writeUInt64(_:to:)(uint64_t result, _QWORD *a2)
{
  return static VFXMemorySerialization.writeInt64(_:to:)(result, a2);
}

__n128 *static VFXMemorySerialization.writeSIMD4F(_:to:)(__n128 *result, __n128 a2)
{
  return static VFXMemorySerialization.writeSIMD3F(_:to:)(result, a2);
}

void sub_1B1A0E3FC()
{
  void *v0;
  id v1;

  v0 = (void *)sub_1B2228728();
  v1 = objc_msgSend((id)objc_opt_self(), sel_bundleWithIdentifier_, v0);

  qword_1EEF58AF0 = (uint64_t)v1;
}

uint64_t static VFXScene.vfxAssetsFrameworkBundle.getter()
{
  uint64_t v0;
  id v1;

  if (qword_1EEF56DC0 != -1)
    swift_once();
  v0 = qword_1EEF58AF0;
  v1 = (id)qword_1EEF58AF0;
  return v0;
}

_QWORD *sub_1B1A0E4F8()
{
  _QWORD *result;

  result = sub_1B1A0E514();
  qword_1EEF58AF8 = (uint64_t)result;
  return result;
}

_QWORD *sub_1B1A0E514()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void *v12;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  void (*v20)(char *, uint64_t, uint64_t, uint64_t);
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t);
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  _QWORD v30[2];
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  void (*v35)(char *, uint64_t, uint64_t);
  char *v36;

  v0 = sub_1B2228110();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0, v2);
  v36 = (char *)v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)v30 - v6;
  sub_1B17928A0();
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1EEF56DC0 != -1)
    swift_once();
  v12 = (void *)qword_1EEF58AF0;
  if (!qword_1EEF58AF0)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  v13 = (void *)sub_1B2228728();
  v14 = objc_msgSend(v12, sel_URLsForResourcesWithExtension_subdirectory_, v13, 0);

  if (!v14)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  v15 = sub_1B2228AB8();

  v16 = *(_QWORD *)(v15 + 16);
  if (v16)
  {
    v17 = *(unsigned __int8 *)(v1 + 80);
    v30[1] = v15;
    v18 = v15 + ((v17 + 32) & ~v17);
    v31 = *(_QWORD *)(v1 + 72);
    v35 = *(void (**)(char *, uint64_t, uint64_t))(v1 + 16);
    v19 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    v33 = v11;
    v34 = v1;
    v32 = v7;
    while (1)
    {
      v35(v11, v18, v0);
      v20 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v1 + 56);
      v20(v11, 0, 1, v0);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v1 + 48))(v11, 1, v0) == 1)
        break;
      (*(void (**)(char *, char *, uint64_t))(v1 + 32))(v7, v11, v0);
      v21 = v36;
      sub_1B222808C();
      v22 = sub_1B222805C();
      v24 = v23;
      v25 = *(void (**)(char *, uint64_t))(v1 + 8);
      v25(v21, v0);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v19 = sub_1B1C63044(0, v19[2] + 1, 1, v19);
      v27 = v19[2];
      v26 = v19[3];
      if (v27 >= v26 >> 1)
        v19 = sub_1B1C63044(v26 > 1, v27 + 1, 1, v19);
      v19[2] = v27 + 1;
      v28 = &v19[2 * v27];
      v28[4] = v22;
      v28[5] = v24;
      v7 = v32;
      v25(v32, v0);
      v18 += v31;
      --v16;
      v11 = v33;
      v1 = v34;
      if (!v16)
      {
        v20(v33, 1, 1, v0);
        break;
      }
    }
  }
  else
  {
    v19 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v1 + 56))(v11, 1, 1, v0);
  }
  swift_bridgeObjectRelease();
  return v19;
}

uint64_t static VFXScene.builtinEffectIdentifiers.getter()
{
  if (qword_1EEF56DC8 != -1)
    swift_once();
  return swift_bridgeObjectRetain();
}

uint64_t static VFXScene.builtinEffectIdentifiers.setter(uint64_t a1)
{
  if (qword_1EEF56DC8 != -1)
    swift_once();
  qword_1EEF58AF8 = a1;
  return swift_bridgeObjectRelease();
}

double (*static VFXScene.builtinEffectIdentifiers.modify())(_QWORD)
{
  if (qword_1EEF56DC8 != -1)
    swift_once();
  return nullsub_16;
}

id VFXScene.__allocating_init(identifier:)()
{
  objc_class *v0;
  id v1;
  void *v2;
  id v3;
  id v4;
  id v5;
  id v7[2];

  v7[1] = *(id *)MEMORY[0x1E0C80C00];
  v1 = objc_allocWithZone(v0);
  v2 = (void *)sub_1B2228728();
  swift_bridgeObjectRelease();
  v7[0] = 0;
  v3 = objc_msgSend(v1, sel_initWithIdentifier_error_, v2, v7);

  if (v3)
  {
    v4 = v7[0];
  }
  else
  {
    v5 = v7[0];
    sub_1B2227FB4();

    swift_willThrow();
  }
  return v3;
}

id VFXScene.init(identifier:)(uint64_t a1, unint64_t a2)
{
  void *v2;
  id v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  id v15;
  unint64_t v16;
  uint64_t v17;
  void *v18;
  void (*v19)(char *, uint64_t);
  id v20;
  uint64_t v22;
  id v23;
  unint64_t v24;
  uint64_t v25;

  v3 = v2;
  v25 = *MEMORY[0x1E0C80C00];
  sub_1B17928A0();
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1B2228110();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v12);
  v14 = (char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for VFXScene(0);
  sub_1B1A0ED08(a1, a2, (uint64_t)v9);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    sub_1B19EC9A4((uint64_t)v9);
    v23 = 0;
    v24 = 0xE000000000000000;
    sub_1B2229430();
    swift_bridgeObjectRelease();
    v23 = (id)0xD00000000000001FLL;
    v24 = 0x80000001B232BED0;
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    v15 = v23;
    v16 = v24;
    sub_1B1A0EF9C();
    swift_allocError();
    *(_QWORD *)v17 = v15;
    *(_QWORD *)(v17 + 8) = v16;
    *(_BYTE *)(v17 + 16) = 0;
    swift_willThrow();
    swift_getObjectType();
    swift_deallocPartialClassInstance();
  }
  else
  {
    swift_bridgeObjectRelease();
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v14, v9, v10);
    v18 = (void *)sub_1B2228074();
    v23 = 0;
    v3 = objc_msgSend(v3, sel_initWithContentsOf_error_, v18, &v23);

    if (v3)
    {
      v19 = *(void (**)(char *, uint64_t))(v11 + 8);
      v20 = v23;
      v19(v14, v10);
    }
    else
    {
      v3 = v23;
      sub_1B2227FB4();

      swift_willThrow();
      (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
    }
  }
  return v3;
}

uint64_t sub_1B1A0ED08@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  id v14;
  void *v15;
  void *v16;
  void *v17;
  id v18;
  uint64_t v19;
  void *v20;
  id v21;
  void *v22;
  void *v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;

  sub_1B17928A0();
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v31 - v12;
  v14 = sub_1B1A0F290(a1, a2);
  if (v14)
  {
    v15 = v14;
    v16 = (void *)sub_1B2228728();
    v17 = (void *)sub_1B2228728();
    v18 = objc_msgSend(v15, sel_URLForResource_withExtension_, v16, v17);

    if (v18)
    {
      sub_1B22280C8();

      v19 = sub_1B2228110();
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v13, 0, 1, v19);
    }
    else
    {

      v26 = sub_1B2228110();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v13, 1, 1, v26);
    }
    v27 = (uint64_t)v13;
  }
  else
  {
    v20 = (void *)sub_1B2228728();
    v21 = objc_msgSend((id)objc_opt_self(), sel_bundleWithIdentifier_, v20);

    if (!v21)
    {
      v28 = sub_1B2228110();
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(a3, 1, 1, v28);
    }
    v22 = (void *)sub_1B2228728();
    v23 = (void *)sub_1B2228728();
    v24 = objc_msgSend(v21, sel_URLForResource_withExtension_, v22, v23);

    if (v24)
    {
      sub_1B22280C8();

      v25 = sub_1B2228110();
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v9, 0, 1, v25);
    }
    else
    {
      v30 = sub_1B2228110();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v9, 1, 1, v30);
    }
    v27 = (uint64_t)v9;
  }
  return sub_1B1A0F584(v27, a3);
}

unint64_t sub_1B1A0EF9C()
{
  unint64_t result;

  result = qword_1EEF58B00;
  if (!qword_1EEF58B00)
  {
    result = MEMORY[0x1B5E23E74](&protocol conformance descriptor for VFXError, &type metadata for VFXError);
    atomic_store(result, (unint64_t *)&qword_1EEF58B00);
  }
  return result;
}

uint64_t static VFXScene.vfxLibraryURL(for:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;

  sub_1B17928A0();
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1B1A0F290(a1, a2);
  if (v10)
  {
    v11 = v10;
    v12 = (void *)sub_1B2228728();
    v13 = (void *)sub_1B2228728();
    v14 = objc_msgSend(v11, sel_URLForResource_withExtension_, v12, v13);

    if (v14)
    {
      sub_1B22280C8();

      v15 = sub_1B2228110();
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v9, 0, 1, v15);
    }
    else
    {

      v18 = sub_1B2228110();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v9, 1, 1, v18);
    }
    return sub_1B1A0F584((uint64_t)v9, a3);
  }
  else
  {
    v16 = sub_1B2228110();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(a3, 1, 1, v16);
  }
}

id sub_1B1A0F290(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  id v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  id v26;
  void *v27;
  void (*v28)(char *, uint64_t);
  uint64_t v30;
  unint64_t v31;
  __int128 v32;

  v4 = sub_1B2228110();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v30 - v11;
  v30 = a1;
  v31 = a2;
  sub_1B1A06460();
  v13 = sub_1B2229280();
  if (*(_QWORD *)(v13 + 16) >= 4uLL)
  {
    v30 = v13;
    v31 = v13 + 32;
    v32 = xmmword_1B226DD00;
    sub_1B1A0F5C8();
    sub_1B1A064A4();
    sub_1B1A06504();
    v15 = sub_1B22289BC();
    v17 = v16;
    swift_bridgeObjectRelease();
    v30 = v15;
    v31 = v17;
    swift_bridgeObjectRetain();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    v18 = objc_msgSend((id)objc_opt_self(), sel_processInfo);
    v19 = objc_msgSend(v18, sel_environment);

    v20 = sub_1B2228530();
    if (*(_QWORD *)(v20 + 16) && (v21 = sub_1B1DC3B00(0x4F54414C554D4953, 0xEE00544F4F525F52), (v22 & 1) != 0))
    {
      v23 = (uint64_t *)(*(_QWORD *)(v20 + 56) + 16 * v21);
      v25 = *v23;
      v24 = v23[1];
      swift_bridgeObjectRetain();
    }
    else
    {
      v25 = 0;
      v24 = 0xE000000000000000;
    }
    swift_bridgeObjectRelease();
    v30 = v25;
    v31 = v24;
    swift_bridgeObjectRetain();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228050();
    swift_bridgeObjectRelease();
    sub_1B22280A4();
    swift_bridgeObjectRelease();
    v26 = objc_allocWithZone(MEMORY[0x1E0CB34D0]);
    v27 = (void *)sub_1B2228074();
    v14 = objc_msgSend(v26, sel_initWithURL_, v27);

    v28 = *(void (**)(char *, uint64_t))(v5 + 8);
    v28(v8, v4);
    v28(v12, v4);
  }
  else
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  return v14;
}

uint64_t sub_1B1A0F584(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1B17928A0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_1B1A0F5C8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF58A30)
  {
    v0 = sub_1B2229334();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF58A30);
  }
}

uint64_t sub_1B1A0F61C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;

  v1 = v0;
  v2 = *(_QWORD **)(v0 + 16);
  v3 = v2[2];
  if (v3)
  {
    v4 = 0;
    do
    {
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)(v1 + 16) = v2;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        v2 = sub_1B1FFEDE0(v2);
        *(_QWORD *)(v1 + 16) = v2;
      }
      v6 = v2[v4 + 7];
      v7 = v2[v4 + 8];
      sub_1B19FC264((uint64_t)&v2[v4 + 4], v6);
      (*(void (**)(uint64_t, uint64_t))(v7 + 16))(v6, v7);
      v2 = *(_QWORD **)(v1 + 16);
      v4 += 5;
      --v3;
    }
    while (v3);
  }
  *(_QWORD *)(v1 + 16) = MEMORY[0x1E0DEE9D8];
  return swift_bridgeObjectRelease();
}

void sub_1B1A0F6C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(char *, char *, uint64_t);
  unint64_t v40;
  unint64_t v41;
  unsigned int (*v42)(char *, uint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;
  void (*v45)(void);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t (**v53)();
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  int64_t v60;
  char *v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  void (*v68)(char *, uint64_t, uint64_t, uint64_t);
  __int128 v69;

  sub_1B1A0FC44();
  v2 = v1;
  v3 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1, v4);
  v63 = (char *)&v55 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1B222826C();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v65 = (char *)&v55 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1B1A0FCF4();
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v55 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14, v15);
  v66 = (char *)&v55 - v16;
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)&v55 - v19;
  if ((*(_BYTE *)(v0 + 33) & 1) == 0)
  {
    if ((*(_BYTE *)(v0 + 32) & 1) != 0)
    {
      v21 = *(char **)(v0 + 24);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)(v0 + 24) = v21;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        v21 = sub_1B1C64780(0, *((_QWORD *)v21 + 2) + 1, 1, v21);
        *(_QWORD *)(v0 + 24) = v21;
      }
      v24 = *((_QWORD *)v21 + 2);
      v23 = *((_QWORD *)v21 + 3);
      v25 = v24 + 1;
      if (v24 >= v23 >> 1)
        v21 = sub_1B1C64780(v23 > 1, v24 + 1, 1, v21);
      *((_QWORD *)v21 + 2) = v25;
      *(_QWORD *)(v0 + 24) = v21;
    }
    else
    {
      v26 = *(_QWORD *)(v0 + 16);
      v27 = *(_QWORD *)(v26 + 64);
      v59 = v26 + 64;
      v28 = 1 << *(_BYTE *)(v26 + 32);
      v29 = -1;
      if (v28 < 64)
        v29 = ~(-1 << v28);
      v30 = v29 & v27;
      v31 = (unint64_t)(v28 + 63) >> 6;
      v56 = v31 - 1;
      v32 = swift_bridgeObjectRetain();
      v33 = 0;
      v60 = v31;
      v61 = v20;
      v64 = v32;
      v57 = v32 + 104;
      v58 = v31 - 5;
      v62 = v3;
      if (!v30)
        goto LABEL_13;
LABEL_11:
      v67 = (v30 - 1) & v30;
      v34 = __clz(__rbit64(v30)) | (v33 << 6);
LABEL_12:
      v35 = v64;
      v36 = v65;
      (*(void (**)(char *, unint64_t, uint64_t))(v7 + 16))(v65, *(_QWORD *)(v64 + 48) + *(_QWORD *)(v7 + 72) * v34, v6);
      v37 = *(_QWORD *)(v35 + 56);
      v38 = *(int *)(v2 + 48);
      v39 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
      v69 = *(_OWORD *)(v37 + 16 * v34);
      v39(v13, v36, v6);
      *(_OWORD *)&v13[v38] = v69;
      v68 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56);
      v68(v13, 0, 1, v2);
      swift_retain();
      while (1)
      {
        v42 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48);
        v43 = 1;
        if (v42(v13, 1, v2) != 1)
        {
          v44 = *(int *)(v2 + 48);
          v45 = *(void (**)(void))(v7 + 32);
          ((void (*)(char *, char *, uint64_t))v45)(v63, v13, v6);
          v46 = swift_allocObject();
          *(_QWORD *)&v69 = v33;
          v47 = v46;
          *(_OWORD *)(v46 + 16) = *(_OWORD *)&v13[v44];
          v48 = *(int *)(v2 + 48);
          v49 = v13;
          v50 = v7;
          v51 = v2;
          v52 = v6;
          v53 = (uint64_t (**)())&v66[v48];
          v45();
          v43 = 0;
          *v53 = sub_1B1A0FDB0;
          v53[1] = (uint64_t (*)())v47;
          v33 = v69;
          v6 = v52;
          v2 = v51;
          v7 = v50;
          v13 = v49;
          v20 = v61;
          v3 = v62;
        }
        v54 = (uint64_t)v66;
        v68(v66, v43, 1, v2);
        sub_1B1A0FD48(v54, (uint64_t)v20);
        if (v42(v20, 1, v2) == 1)
          break;
        (*(void (**)(void))&v20[*(int *)(v2 + 48)])();
        swift_release();
        (*(void (**)(char *, uint64_t))(v7 + 8))(v20, v6);
        v30 = v67;
        if (v67)
          goto LABEL_11;
LABEL_13:
        v40 = v33 + 1;
        if ((uint64_t)(v33 + 1) >= v60)
        {
          v40 = v33;
        }
        else
        {
          v41 = *(_QWORD *)(v59 + 8 * v40);
          if (v41)
            goto LABEL_15;
          if ((uint64_t)(v33 + 2) < v60)
          {
            v41 = *(_QWORD *)(v59 + 8 * (v33 + 2));
            if (v41)
            {
              v40 = v33 + 2;
LABEL_15:
              v67 = (v41 - 1) & v41;
              v34 = __clz(__rbit64(v41)) + (v40 << 6);
              v33 = v40;
              goto LABEL_12;
            }
            v40 = v33 + 2;
            if ((uint64_t)(v33 + 3) < v60)
            {
              v41 = *(_QWORD *)(v59 + 8 * (v33 + 3));
              if (v41)
              {
                v40 = v33 + 3;
                goto LABEL_15;
              }
              v40 = v33 + 3;
              if ((uint64_t)(v33 + 4) < v60)
              {
                v41 = *(_QWORD *)(v59 + 8 * (v33 + 4));
                v40 = v33 + 4;
                if (v41)
                  goto LABEL_15;
                while (v58 != v33)
                {
                  v41 = *(_QWORD *)(v57 + 8 * v33++);
                  if (v41)
                  {
                    v40 = v33 + 4;
                    goto LABEL_15;
                  }
                }
                v40 = v56;
              }
            }
          }
        }
        v68 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56);
        v68(v13, 1, 1, v2);
        v67 = 0;
        v33 = v40;
      }
      swift_release();
    }
  }
}

uint64_t sub_1B1A0FB90()
{
  sub_1B1A0F61C();
  swift_retain();
  sub_1B1A0F6C8();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ScopeLevel()
{
  return objc_opt_self();
}

BOOL sub_1B1A0FC0C()
{
  uint64_t v0;

  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v0 + 16) + 16) == 0;
}

uint64_t sub_1B1A0FC24()
{
  return sub_1B1A0F61C();
}

void sub_1B1A0FC44()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_1EEF58B08)
  {
    sub_1B222826C();
    sub_1B1A0FCB4();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1EEF58B08);
  }
}

unint64_t sub_1B1A0FCB4()
{
  unint64_t result;

  result = qword_1ED4BB190;
  if (!qword_1ED4BB190)
  {
    result = swift_getFunctionTypeMetadata0();
    atomic_store(result, (unint64_t *)&qword_1ED4BB190);
  }
  return result;
}

void sub_1B1A0FCF4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF58B10)
  {
    sub_1B1A0FC44();
    v0 = sub_1B2229124();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF58B10);
  }
}

uint64_t sub_1B1A0FD48(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1B1A0FCF4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1B1A0FD8C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1B1A0FDB0()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_1B1A0FDD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  result = sub_1B1F24A98(a8);
  if (result >= 1 && a7 != 0)
  {
    v12 = 0;
    v13 = -1;
    v14 = -1;
    do
    {
      v16 = *a5++;
      v15 = v16;
      if (v16 != v13)
      {
        v17 = v13 - v14;
        if (v13 > v14)
        {
          result = sub_1B1F24AA8();
          v12 += v17;
        }
        v14 = v15;
      }
      v13 = v15 + 1;
      --a7;
    }
    while (a7);
    if (v13 > v14)
      return sub_1B1F24AA8();
  }
  return result;
}

uint64_t sub_1B1A0FEC8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  result = sub_1B1F24A98(a8);
  if (result >= 1 && a3 != 0)
  {
    v12 = 0;
    v13 = -1;
    v14 = -1;
    do
    {
      v16 = *a1++;
      v15 = v16;
      if (v16 != v13)
      {
        v17 = v13 - v14;
        if (v13 > v14)
        {
          result = sub_1B1F24AA8();
          v12 += v17;
        }
        v14 = v15;
      }
      v13 = v15 + 1;
      --a3;
    }
    while (a3);
    if (v13 > v14)
      return sub_1B1F24AA8();
  }
  return result;
}

uint64_t sub_1B1A0FFC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  result = sub_1B1F24A98(a8);
  if (result >= 1 && a7 != 0)
  {
    v15 = 0;
    v16 = -1;
    v17 = -1;
    do
    {
      v19 = *a5++;
      v18 = v19;
      if (v19 != v16)
      {
        v20 = v16 - v17;
        if (v16 > v17)
        {
          result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a9 + 32))(a1, a2, v15, a3, a4);
          v15 += v20;
        }
        v17 = v18;
      }
      v16 = v18 + 1;
      --a7;
    }
    while (a7);
    if (v16 > v17)
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a9 + 32))(a1, a2, v15, a3, a4);
  }
  return result;
}

uint64_t sub_1B1A100D8(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  result = sub_1B1F24A98(a8);
  if (result >= 1 && a5 != 0)
  {
    v15 = 0;
    v16 = -1;
    v17 = -1;
    do
    {
      v19 = *a3++;
      v18 = v19;
      if (v19 != v16)
      {
        v20 = v16 - v17;
        if (v16 > v17)
        {
          result = (*(uint64_t (**)(uint64_t, uint64_t))(a9 + 40))(a1, a2);
          v15 += v20;
        }
        v17 = v18;
      }
      v16 = v18 + 1;
      --a5;
    }
    while (a5);
    if (v16 > v17)
      return (*(uint64_t (**)(uint64_t, uint64_t))(a9 + 40))(a1, a2);
  }
  return result;
}

uint64_t sub_1B1A101F0(uint64_t a1)
{
  uint64_t v1;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v3 = *(_BYTE *)(v1 + 184);
  v4 = swift_retain();
  if ((v3 & 1) != 0)
  {
    result = sub_1B2229688();
    __break(1u);
  }
  else
  {
    v5 = *(unsigned int *)(*(_QWORD *)(v1 + 168) + 4 * a1);
    v6 = *(unsigned int *)(*(_QWORD *)(v4 + OBJC_IVAR____TtC3VFX13EntityManager__entries) + 12 * (int)v5 + 8);
    swift_release();
    return v5 | (v6 << 32);
  }
  return result;
}

uint64_t sub_1B1A102A0(uint64_t a1, uint64_t a2, int a3, char a4, int a5)
{
  uint64_t v5;
  uint64_t v6;
  _DWORD *v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  size_t v20;
  int v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  size_t v31;
  void *v32;
  void *v33;
  uint64_t v34;
  Swift::Int v35;
  uint64_t v36;
  task_t v38;
  _QWORD v39[2];
  int v40;
  char v41;

  v6 = v5;
  *(_DWORD *)(v5 + 116) = 0;
  *(_QWORD *)(v5 + 168) = 0;
  *(_QWORD *)(v5 + 176) = 0;
  *(_BYTE *)(v5 + 184) = 1;
  *(_OWORD *)(v5 + 192) = 0u;
  *(_OWORD *)(v5 + 208) = 0u;
  *(_QWORD *)(v5 + 224) = -1;
  *(_OWORD *)(v5 + 232) = 0u;
  *(_OWORD *)(v5 + 248) = 0u;
  *(_OWORD *)(v5 + 272) = xmmword_1B2244E20;
  *(_OWORD *)(v5 + 288) = xmmword_1B226DDC0;
  *(_QWORD *)(v5 + 304) = 0x7F800000FFFFFFFFLL;
  *(_DWORD *)(v5 + 312) = -1;
  v12 = (_DWORD *)swift_slowAlloc();
  *v12 = 0;
  *(_QWORD *)(v5 + 320) = "lock short chunk";
  *(_QWORD *)(v5 + 328) = 16;
  *(_BYTE *)(v5 + 336) = 2;
  *(_QWORD *)(v5 + 344) = v12;
  v13 = (_DWORD *)swift_slowAlloc();
  *v13 = 0;
  *(_QWORD *)(v5 + 352) = "lock ownership chunk";
  *(_QWORD *)(v5 + 360) = 20;
  *(_BYTE *)(v5 + 368) = 2;
  *(_QWORD *)(v5 + 376) = v13;
  *(_BYTE *)(v5 + 120) = a4;
  *(_QWORD *)(v5 + 16) = a1;
  *(_DWORD *)(v5 + 24) = a3;
  v14 = *(_QWORD *)(a1 + 80) + 8 * a3;
  *(_QWORD *)(v5 + 40) = *(_QWORD *)(v14 + 32);
  *(_DWORD *)(v5 + 188) = a5;
  *(_DWORD *)(v5 + 28) = a2;
  *(_BYTE *)(v5 + 32) = BYTE4(a2) & 1;
  v15 = *(_QWORD *)(v14 + 32);
  v16 = *(_QWORD *)(v15 + 64);
  LODWORD(v14) = *(unsigned __int8 *)(v15 + 211);
  *(_BYTE *)(v5 + 121) = v14;
  v17 = *(_QWORD *)(v15 + 32);
  v18 = *(_QWORD *)(v15 + 40);
  v20 = *(_QWORD *)(v15 + 72);
  v19 = *(_QWORD *)(v15 + 80);
  v21 = *(unsigned __int8 *)(v15 + 88);
  v22 = *(_OWORD *)(v15 + 48);
  *(_QWORD *)(v6 + 48) = *(_QWORD *)(v15 + 24);
  *(_QWORD *)(v6 + 56) = v17;
  *(_QWORD *)(v6 + 64) = v18;
  *(_OWORD *)(v6 + 72) = v22;
  *(_QWORD *)(v6 + 88) = v16;
  *(_QWORD *)(v6 + 96) = v20;
  *(_QWORD *)(v6 + 104) = v19;
  *(_BYTE *)(v6 + 112) = v21;
  if ((_DWORD)v14 == 1)
  {
    v38 = *(_DWORD *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_peerTaskIdentity);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    vfx_allocate_memory_entry(v20, 0x40uLL, v38, (uint64_t)v39);
    v23 = v39[0];
    v24 = v39[1];
    LODWORD(v25) = v40;
    LOBYTE(v26) = v41;
  }
  else
  {
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    v23 = sub_1B1C8DCA4(v20);
    v26 = HIDWORD(v25) & 1;
  }
  *(_QWORD *)(v6 + 144) = v23;
  *(_QWORD *)(v6 + 152) = v24;
  *(_DWORD *)(v6 + 160) = v25;
  *(_BYTE *)(v6 + 164) = v26;
  v27 = v23 + v24;
  if (!v23)
    v27 = 0;
  *(_QWORD *)(v6 + 128) = v23;
  *(_QWORD *)(v6 + 136) = v27;
  v28 = v23 + v19;
  if (v21)
  {
    v28 = 0;
    v29 = 0;
  }
  else
  {
    v29 = v16;
  }
  *(_QWORD *)(v6 + 168) = v28;
  *(_QWORD *)(v6 + 176) = v29;
  *(_BYTE *)(v6 + 184) = v21;
  if (*(_BYTE *)(v15 + 212) == 1)
  {
    v30 = (v16 + 63) >> 6;
    if (v30 <= 1)
      v30 = 1;
    v31 = 8 * v30;
    v32 = aligned_alloc(8uLL, 8 * v30);
    bzero(v32, v31);
    v33 = aligned_alloc(8uLL, v31);
    bzero(v33, v31);
    *(_QWORD *)(v6 + 192) = v32;
    *(_QWORD *)(v6 + 200) = v16;
    *(_QWORD *)(v6 + 208) = v33;
    *(_QWORD *)(v6 + 216) = v16;
  }
  v34 = *(_QWORD *)(v6 + 128);
  if (v34)
    v35 = *(_QWORD *)(v6 + 136) - v34;
  else
    v35 = 0;
  if (*(_QWORD *)(*(_QWORD *)(v6 + 16) + OBJC_IVAR____TtC3VFX13EntityManager_counters))
    vfx_counters.add(_:_:)(*(_DWORD *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_counters + 56), v35);
  v36 = *(_QWORD *)(v6 + 16) + OBJC_IVAR____TtC3VFX13EntityManager_counters;
  if (*(_QWORD *)v36)
    vfx_counters.add(_:_:)(*(_DWORD *)(v36 + 52), 1);
  swift_release();
  swift_release();
  return v6;
}

void sub_1B1A1059C(char *a1, char *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  os_unfair_lock_s *v11;
  os_unfair_lock_s *v12;
  uint64_t v13;
  uint64_t v14;

  v3 = v2;
  if (a2 != a1)
  {
    v6 = *(_QWORD *)(v2 + 56);
    v7 = *(_QWORD *)(v6 + 16);
    if (v7)
    {
      swift_retain();
      swift_retain_n();
      swift_retain();
      v8 = v6 + 56;
      do
      {
        sub_1B1F24B64();
        v8 += 40;
        --v7;
      }
      while (v7);
      swift_release();
      swift_release();
      swift_release_n();
    }
  }
  if ((*(_BYTE *)(v2 + 184) & 1) == 0)
  {
    v9 = *(_QWORD *)(v2 + 168);
    v10 = *(_QWORD *)(v2 + 16);
    v11 = *(os_unfair_lock_s **)(v10 + OBJC_IVAR____TtC3VFX13EntityManager_lock + 24);
    swift_retain();
    os_unfair_lock_lock(v11);
    swift_release();
    swift_retain();
    sub_1B1A107FC(a1, a2, v9);
    swift_release();
    v12 = *(os_unfair_lock_s **)(v10 + OBJC_IVAR____TtC3VFX13EntityManager_lock + 24);
    swift_retain();
    os_unfair_lock_unlock(v12);
    swift_release();
  }
  v13 = *(_QWORD *)(v3 + 192);
  if (v13)
  {
    v14 = *(_QWORD *)(v3 + 208);
    sub_1B19FA6EC((uint64_t)a1, (uint64_t)a2, v13);
    sub_1B19FA6EC((uint64_t)a1, (uint64_t)a2, v14);
  }
}

uint64_t sub_1B1A1073C(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (a2 != result)
  {
    v3 = *(_QWORD *)(v2 + 56);
    v4 = *(_QWORD *)(v3 + 16);
    if (v4)
    {
      swift_retain();
      swift_retain_n();
      swift_retain();
      v5 = v3 + 56;
      do
      {
        sub_1B1F24B64();
        v5 += 40;
        --v4;
      }
      while (v4);
      swift_release();
      swift_release();
      return swift_release_n();
    }
  }
  return result;
}

char *sub_1B1A107FC(char *result, char *a2, uint64_t a3)
{
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int v9;
  int *v10;
  int v11;

  v4 = a2 - result;
  if (a2 != result)
  {
    v5 = OBJC_IVAR____TtC3VFX13EntityManager_firstFreeIndex;
    v6 = OBJC_IVAR____TtC3VFX13EntityManager_entityCount;
    v7 = *(_QWORD *)(v3 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
    v8 = &result[*(_QWORD *)(v3 + OBJC_IVAR____TtC3VFX13EntityManager_entityCount)];
    v9 = *(_DWORD *)(v3 + OBJC_IVAR____TtC3VFX13EntityManager_firstFreeIndex);
    v10 = (int *)(a3 + 4 * (_QWORD)result);
    do
    {
      v11 = *v10++;
      result = (char *)(v7 + 12 * v11);
      *(_DWORD *)result = v9;
      *((_DWORD *)result + 1) = -1;
      ++*((_DWORD *)result + 2);
      *(_DWORD *)(v3 + v5) = v11;
      v9 = v11;
      --v4;
    }
    while (v4);
    *(_QWORD *)(v3 + v6) = v8 - a2;
  }
  return result;
}

uint64_t sub_1B1A10870()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  Swift::Int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  char v7;
  char *v8;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  void *v13;
  void *v14;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 128);
  if (v2)
    v3 = v2 - *(_QWORD *)(v0 + 136);
  else
    v3 = 0;
  if (*(_QWORD *)(v1 + OBJC_IVAR____TtC3VFX13EntityManager_counters))
    vfx_counters.add(_:_:)(*(_DWORD *)(v1 + OBJC_IVAR____TtC3VFX13EntityManager_counters + 56), v3);
  if (*(_QWORD *)(v1 + OBJC_IVAR____TtC3VFX13EntityManager_counters))
    vfx_counters.add(_:_:)(*(_DWORD *)(v1 + OBJC_IVAR____TtC3VFX13EntityManager_counters + 52), -1);
  if (*(_QWORD *)(v1 + OBJC_IVAR____TtC3VFX13EntityManager_counters))
    vfx_counters.add(_:_:)(*(_DWORD *)(v1 + OBJC_IVAR____TtC3VFX13EntityManager_counters + 44), *(_QWORD *)(v0 + 240) - *(_QWORD *)(v0 + 232));
  if (*(_QWORD *)(v1 + OBJC_IVAR____TtC3VFX13EntityManager_counters))
    vfx_counters.add(_:_:)(*(_DWORD *)(v1 + OBJC_IVAR____TtC3VFX13EntityManager_counters + 48), *(_QWORD *)(v0 + 232) - *(_QWORD *)(v0 + 240));
  sub_1B1A1073C(*(_QWORD *)(v0 + 256), *(_QWORD *)(v0 + 240));
  v4 = *(_QWORD *)(v0 + 144);
  v5 = *(_QWORD *)(v0 + 152);
  v6 = *(_DWORD *)(v0 + 160);
  v7 = *(_BYTE *)(v0 + 164);
  v8 = *(char **)(v1 + 152);
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v1 + 152) = v8;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v8 = sub_1B1C62A3C(0, *((_QWORD *)v8 + 2) + 1, 1, v8);
    *(_QWORD *)(v1 + 152) = v8;
  }
  v11 = *((_QWORD *)v8 + 2);
  v10 = *((_QWORD *)v8 + 3);
  if (v11 >= v10 >> 1)
    v8 = sub_1B1C62A3C(v10 > 1, v11 + 1, 1, v8);
  *((_QWORD *)v8 + 2) = v11 + 1;
  v12 = &v8[24 * v11];
  *((_QWORD *)v12 + 4) = v4;
  *((_QWORD *)v12 + 5) = v5;
  *((_DWORD *)v12 + 12) = v6;
  v12[52] = v7;
  *(_QWORD *)(v1 + 152) = v8;
  swift_release();
  v13 = *(void **)(v0 + 192);
  if (v13)
  {
    v14 = *(void **)(v0 + 208);
    free(v13);
    free(v14);
  }
  MEMORY[0x1B5E23F88](*(_QWORD *)(v0 + 344), -1, -1);
  MEMORY[0x1B5E23F88](*(_QWORD *)(v0 + 376), -1, -1);
  swift_release();
  swift_release();
  swift_release();
  return v0;
}

uint64_t sub_1B1A10A48()
{
  sub_1B1A10870();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ComponentsDataChunk()
{
  return objc_opt_self();
}

void sub_1B1A10A88()
{
  uint64_t v0;

  os_unfair_lock_lock(*(os_unfair_lock_t *)(v0 + 376));
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v0 + 344));
}

unint64_t sub_1B1A10AA4@<X0>(unint64_t result@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v8;

  v4 = *(_QWORD *)(result + 16);
  v5 = *(_QWORD *)(v4 + 128);
  v6 = *(_QWORD *)(v5 + 16);
  if (v6)
  {
    result = sub_1B1DC3AC8(a2);
    LOBYTE(v6) = (v8 & 1) != 0
              && *(_QWORD *)(*(_QWORD *)(v4 + 24) + 16 * *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * result) + 32) == a2;
  }
  *a3 = v6;
  return result;
}

BOOL sub_1B1A10B20(int a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;

  v2 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(v1 + 16) + 80) + 8 * a1 + 32);
  v3 = *(_QWORD **)(v1 + 40);
  v4 = v2[4];
  v5 = v2[8];
  v6 = v3[4];
  v7 = v3[8];
  swift_retain();
  v8 = v5 == v7 && sub_1B216BFB8(v2[5], v3[5]) && sub_1B216BFB8(v4, v6);
  swift_release();
  return v8;
}

uint64_t sub_1B1A10BB0(int a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  size_t v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  BOOL v27;
  int v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  int *v32;
  int v33;
  int v35;
  unsigned int v36;

  v2 = v1;
  v4 = *(_QWORD *)(v1 + 40);
  v5 = *(_DWORD *)(v1 + 24);
  v6 = *(_QWORD *)(v1 + 16);
  v7 = 8 * a1;
  v8 = *(_QWORD *)(*(_QWORD *)(v6 + 80) + v7 + 32);
  v35 = *(unsigned __int8 *)(v4 + 212);
  v36 = v5;
  swift_retain();
  swift_retain();
  v9 = *(unsigned __int8 *)(v8 + 212);
  *(_DWORD *)(v2 + 24) = a1;
  *(_QWORD *)(v2 + 40) = *(_QWORD *)(*(_QWORD *)(v6 + 80) + v7 + 32);
  v10 = *(_QWORD *)(v8 + 32);
  v11 = *(_QWORD *)(v8 + 40);
  v12 = *(_QWORD *)(v8 + 80);
  v13 = *(_BYTE *)(v8 + 88);
  v14 = *(_OWORD *)(v8 + 48);
  v15 = *(_OWORD *)(v8 + 64);
  *(_QWORD *)(v2 + 48) = *(_QWORD *)(v8 + 24);
  *(_QWORD *)(v2 + 56) = v10;
  *(_QWORD *)(v2 + 64) = v11;
  *(_OWORD *)(v2 + 72) = v14;
  *(_OWORD *)(v2 + 88) = v15;
  *(_QWORD *)(v2 + 104) = v12;
  *(_BYTE *)(v2 + 112) = v13;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_release();
  swift_release();
  swift_release();
  if ((v35 & 1) != 0 || !v9)
  {
    if (((v35 ^ 1 | v9) & 1) == 0)
    {
      v25 = *(void **)(v2 + 192);
      if (v25)
      {
        v26 = *(void **)(v2 + 208);
        free(v25);
        free(v26);
      }
      *(_OWORD *)(v2 + 192) = 0u;
      *(_OWORD *)(v2 + 208) = 0u;
    }
  }
  else
  {
    v16 = *(_QWORD *)(v2 + 88);
    v17 = (v16 + 63) >> 6;
    if (v17 <= 1)
      v17 = 1;
    v18 = 8 * v17;
    v19 = aligned_alloc(8uLL, 8 * v17);
    bzero(v19, v18);
    v20 = aligned_alloc(8uLL, v18);
    bzero(v20, v18);
    *(_QWORD *)(v2 + 192) = v19;
    *(_QWORD *)(v2 + 200) = v16;
    *(_QWORD *)(v2 + 208) = v20;
    *(_QWORD *)(v2 + 216) = v16;
    v21 = *(_QWORD *)(v2 + 232);
    v22 = *(_QWORD *)(v2 + 240);
    if (v22 != v21)
    {
      v23 = *(_QWORD *)(v2 + 192);
      if (v23)
      {
        v24 = *(_QWORD *)(v2 + 208);
        sub_1B19FA4BC(*(_QWORD *)(v2 + 232), *(_QWORD *)(v2 + 240), v23);
        sub_1B19FA6EC(v21, v22, v24);
      }
      sub_1B1FE2814(*(_QWORD *)(v2 + 40), v2, v21, v22);
    }
  }
  swift_retain();
  v27 = sub_1B1C8DD58(a1);
  swift_release();
  v28 = *(_DWORD *)(v2 + 188);
  v29 = *(_BYTE *)(v2 + 120);
  swift_retain();
  sub_1B1C8DDAC(v28, v36, a1, v29);
  swift_release();
  if (!v27)
  {
    swift_retain();
    sub_1B1E8DD00(a1);
    swift_release();
  }
  if (*(_BYTE *)(v2 + 184) != 1)
  {
    v30 = *(_QWORD *)(v2 + 232);
    v31 = *(_QWORD *)(v2 + 240) - v30;
    if (v31)
    {
      v32 = (int *)(*(_QWORD *)(v2 + 168) + 4 * v30);
      do
      {
        v33 = *v32++;
        *(_WORD *)(*(_QWORD *)(v6 + OBJC_IVAR____TtC3VFX13EntityManager__entries) + 12 * v33 + 6) = a1;
        --v31;
      }
      while (v31);
    }
  }
  swift_release();
  return swift_release();
}

void sub_1B1A10E3C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  os_unfair_lock_s *v9;
  int v10;
  int32x2_t *v11;
  int32x2_t v12;
  uint64_t v13;
  int v14;
  __int32 v15;
  uint64_t v16;
  int v17;
  os_unfair_lock_s *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int32 v23;

  if (a2 != a1)
  {
    v3 = v2;
    v5 = a1;
    v6 = a1 + 1;
    sub_1B216BAFC(*(_QWORD *)(v2 + 128), a2, a1 + 1);
    v7 = *(_QWORD *)(v2 + 16);
    if (*(_QWORD *)(v7 + OBJC_IVAR____TtC3VFX13EntityManager_counters))
      vfx_counters.add(_:_:)(*(_DWORD *)(v7 + OBJC_IVAR____TtC3VFX13EntityManager_counters + 64), *(_QWORD *)(v3 + 72) * (v6 - a2));
    if ((*(_BYTE *)(v3 + 184) & 1) == 0)
    {
      v22 = v6;
      v8 = *(_QWORD *)(v3 + 168);
      v9 = *(os_unfair_lock_s **)(v7 + OBJC_IVAR____TtC3VFX13EntityManager_lock + 24);
      swift_retain();
      os_unfair_lock_lock(v9);
      swift_release();
      v21 = v3;
      v10 = *(_DWORD *)(v3 + 188);
      v11 = (int32x2_t *)(v8 + 4 * v5 - 4);
      do
      {
        v12 = *v11;
        *v11 = vrev64_s32(*v11);
        v13 = *(_QWORD *)(v7 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
        v23 = v12.i32[0];
        v14 = *(_DWORD *)(v13 + 12 * v12.i32[0]);
        swift_retain();
        if (v14 == v10)
          *(_WORD *)(v13 + 12 * v23 + 4) = v5;
        --v5;
        swift_release();
        v15 = v11->i32[0];
        v16 = *(_QWORD *)(v7 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
        v17 = *(_DWORD *)(v16 + 12 * v11->i32[0]);
        swift_retain();
        if (v17 == v10)
          *(_WORD *)(v16 + 12 * v15 + 4) = v5;
        swift_release();
        v11 = (int32x2_t *)((char *)v11 - 4);
      }
      while (a2 != v5);
      v18 = *(os_unfair_lock_s **)(v7 + OBJC_IVAR____TtC3VFX13EntityManager_lock + 24);
      swift_retain();
      os_unfair_lock_unlock(v18);
      swift_release();
      v3 = v21;
      v6 = v22;
    }
    v19 = *(_QWORD *)(v3 + 192);
    if (v19)
    {
      v20 = *(_QWORD *)(v3 + 208);
      sub_1B19FA574(a2, v6, v19);
      sub_1B19FA574(a2, v6, v20);
    }
  }
}

uint64_t sub_1B1A11064(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;

  v8 = *(_QWORD *)(a3 + 192);
  if (v8)
  {
    v9 = *(_QWORD *)(a3 + 208);
    sub_1B19FA630(a1, a2, v8);
    sub_1B19FA630(a1, a2, v9);
  }
  if (a1 != a2)
  {
    v10 = *(_DWORD *)(a4 + 4 * a1);
    *(_DWORD *)(a4 + 4 * a1) = *(_DWORD *)(a4 + 4 * a2);
    *(_DWORD *)(a4 + 4 * a2) = v10;
  }
  v11 = *(_QWORD *)(a3 + 16);
  v12 = *(_DWORD *)(a4 + 4 * a2);
  v13 = *(_DWORD *)(a3 + 188);
  v14 = *(_QWORD *)(v11 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
  v15 = *(_DWORD *)(v14 + 12 * v12);
  swift_retain();
  if (v15 == v13)
    *(_WORD *)(v14 + 12 * v12 + 4) = a2;
  swift_release();
  v16 = *(_DWORD *)(a4 + 4 * a1);
  v17 = *(_QWORD *)(v11 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
  v18 = *(_DWORD *)(v17 + 12 * v16);
  swift_retain();
  if (v18 == v13)
    *(_WORD *)(v17 + 12 * v16 + 4) = a1;
  return swift_release();
}

void sub_1B1A1117C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL4 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (a3 < a1 || a3 >= a2)
  {
    sub_1B1FD6E48(v3[5], a1, a2, 1, (uint64_t)v3);
    return;
  }
  v4 = a2 - a1;
  v5 = v3[29];
  v6 = v5 + a2 - a1;
  v7 = v3[30] - v5;
  v8 = v6;
  if (a2 - a1 < 1)
  {
    if (v7 <= 0)
    {
      v9 = v4 < v7;
LABEL_9:
      if (v9)
        v8 = v3[30];
      else
        v8 = v5 + a2 - a1;
    }
  }
  else if ((v7 & 0x8000000000000000) == 0)
  {
    v9 = v7 < (unint64_t)v4;
    goto LABEL_9;
  }
  v3[29] = v8;
  v10 = v3[31];
  if (v8 > v10)
    v10 = v8;
  v3[31] = v10;
  v11 = v3[24];
  if (v11)
  {
    v12 = v3[26];
    sub_1B19FA6EC(v5, v6, v11);
    sub_1B19FA6EC(v5, v6, v12);
  }
}

void sub_1B1A1127C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  size_t v11;
  uint64_t v12;
  const void *v13;
  void *v14;
  uint64_t v15;

  v4 = *(_QWORD *)(v3[5] + 24);
  v5 = *(_QWORD *)(v4 + 16);
  if (v5)
  {
    v8 = v3[16];
    v9 = *(_QWORD *)(a3 + 128);
    swift_retain();
    v10 = (_BYTE *)(v4 + 64);
    do
    {
      v11 = *((_QWORD *)v10 - 2);
      v12 = *((_QWORD *)v10 - 1);
      v13 = (const void *)(v8 + v12 + v11 * a1);
      v14 = (void *)(v9 + v12 + v11 * a2);
      if (*v10 == 1)
        memmove(v14, v13, v11);
      else
        sub_1B1F24B10();
      v10 += 40;
      --v5;
    }
    while (v5);
    swift_release();
  }
  v15 = v3[2] + OBJC_IVAR____TtC3VFX13EntityManager_counters;
  if (*(_QWORD *)v15)
    vfx_counters.add(_:_:)(*(_DWORD *)(v15 + 60), v3[9]);
}

void sub_1B1A11380(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t i;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  _QWORD *v19;

  v3 = *(_QWORD *)(v2[5] + 24);
  v4 = *(_QWORD *)(v3 + 16);
  if (v4)
  {
    v6 = v2[16];
    v7 = *(_QWORD *)(a1 + 96);
    v8 = v3 + 32;
    v9 = *(_QWORD *)(a1 + 16);
    v10 = *(_QWORD *)(v9 + 16);
    v11 = (uint64_t *)(v9 + 56);
    swift_retain();
    for (i = 0; i != v4; ++i)
    {
      v13 = v8 + 40 * i;
      v14 = v11;
      v15 = v10;
      if (v10)
      {
        while (*(v14 - 3) != *(_QWORD *)v13)
        {
          v14 += 5;
          if (!--v15)
            goto LABEL_8;
        }
        v16 = *v14;
      }
      else
      {
LABEL_8:
        v16 = 0;
      }
      v17 = (void *)(v7 + v16);
      if ((*(_BYTE *)(v13 + 32) & 1) != 0)
        memcpy(v17, (const void *)(v6 + *(_QWORD *)(v13 + 24) + *(_QWORD *)(v13 + 16) * a2), *(_QWORD *)(v13 + 16));
      else
        sub_1B1F24B20();
    }
    swift_release();
    v2 = v19;
  }
  v18 = v2[2] + OBJC_IVAR____TtC3VFX13EntityManager_counters;
  if (*(_QWORD *)v18)
    vfx_counters.add(_:_:)(*(_DWORD *)(v18 + 72), v2[9]);
}

void sub_1B1A114D4(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t i;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;

  v4 = *(_QWORD *)(v2[5] + 24);
  v5 = *(_QWORD *)(v4 + 16);
  if (v5)
  {
    v6 = *(_QWORD *)(a2 + 96);
    v7 = v2[16];
    v8 = v4 + 32;
    v9 = *(_QWORD *)(a2 + 16);
    v10 = *(_QWORD *)(v9 + 16);
    v11 = (uint64_t *)(v9 + 56);
    swift_retain();
    for (i = 0; i != v5; ++i)
    {
      v13 = v8 + 40 * i;
      v14 = v11;
      v15 = v10;
      if (v10)
      {
        while (*(v14 - 3) != *(_QWORD *)v13)
        {
          v14 += 5;
          if (!--v15)
            goto LABEL_8;
        }
        v16 = *v14;
      }
      else
      {
LABEL_8:
        v16 = 0;
      }
      if ((*(_BYTE *)(v13 + 32) & 1) != 0)
        memcpy((void *)(v7 + *(_QWORD *)(v13 + 24) + *(_QWORD *)(v13 + 16) * a1), (const void *)(v6 + v16), *(_QWORD *)(v13 + 16));
      else
        sub_1B1F24B10();
    }
    swift_release();
    v2 = v18;
  }
  v17 = v2[2] + OBJC_IVAR____TtC3VFX13EntityManager_counters;
  if (*(_QWORD *)v17)
    vfx_counters.add(_:_:)(*(_DWORD *)(v17 + 60), v2[9]);
}

void sub_1B1A11624(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  Swift::Int v7;

  v5 = *(_QWORD *)(v2 + 40);
  if (*(_BYTE *)(v5 + 200) == 1)
  {
    *(_BYTE *)(*(_QWORD *)(v2 + 16) + OBJC_IVAR____TtC3VFX13EntityManager_shouldNotifyEntityEvent) = 1;
    v5 = *(_QWORD *)(v2 + 40);
  }
  sub_1B1FE2814(v5, v2, a1, a2);
  sub_1B1A1117C(a1, a2, *(_QWORD *)(v2 + 232));
  v6 = *(_QWORD *)(v2 + 16);
  v7 = a2 - a1;
  if (*(_QWORD *)(v6 + OBJC_IVAR____TtC3VFX13EntityManager_counters))
    vfx_counters.add(_:_:)(*(_DWORD *)(v6 + OBJC_IVAR____TtC3VFX13EntityManager_counters + 44), v7);
  if (*(_QWORD *)(v6 + OBJC_IVAR____TtC3VFX13EntityManager_counters))
    vfx_counters.add(_:_:)(*(_DWORD *)(v6 + OBJC_IVAR____TtC3VFX13EntityManager_counters + 48), -v7);
  ++*(_DWORD *)(v2 + 116);
}

uint64_t sub_1B1A116FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t *a11, uint64_t a12, _QWORD *a13, int a14, __int16 a15, __int16 a16, char a17)
{
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t i;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  _QWORD *v36;
  uint64_t v37;
  Swift::Int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _BYTE *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int16 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v65;
  uint64_t v66;
  _QWORD v67[4];

  v21 = a1;
  v22 = a17;
  v66 = *(_QWORD *)(a1 + 128);
  swift_retain();
  v23 = a3 - a2;
  if (a3 != a2)
  {
    v24 = *(_QWORD *)(a5[5] + 24);
    v25 = *(_QWORD *)(v24 + 16);
    v65 = a5;
    if (v25)
    {
      v61 = a6;
      v62 = a3;
      v63 = v21;
      v26 = v24 + 32;
      v27 = *(_QWORD *)(a6 + 24);
      v28 = *(_QWORD *)(v27 + 16);
      v29 = (_QWORD *)(v27 + 56);
      swift_retain();
      for (i = 0; i != v25; ++i)
      {
        if (v28)
        {
          v31 = (uint64_t *)(v26 + 40 * i);
          v32 = *v31;
          v34 = v31[2];
          v33 = v31[3];
          v35 = *((unsigned __int8 *)v31 + 32);
          v36 = v29;
          v37 = v28;
          while (*(v36 - 3) != v32)
          {
            v36 += 5;
            if (!--v37)
              goto LABEL_4;
          }
          if (!a9 || v32 != a9)
          {
            v38 = v34 * v23;
            if (v35)
            {
              memmove((void *)(v66 + *v36 + v34 * a2), (const void *)(a12 + v33 + *a11 * v34), v34 * v23);
            }
            else
            {
              sub_1B1F24B74();
              a5 = v65;
            }
            v39 = a5[2] + OBJC_IVAR____TtC3VFX13EntityManager_counters;
            if (*(_QWORD *)v39)
              vfx_counters.add(_:_:)(*(_DWORD *)(v39 + 64), v38);
          }
        }
LABEL_4:
        ;
      }
      swift_release();
      a3 = v62;
      v21 = v63;
      a6 = v61;
      v22 = a17;
    }
    if (a9)
    {
      v40 = *(_QWORD *)(a6 + 24);
      v41 = *(_QWORD *)(v40 + 16);
      if (v41)
      {
        v42 = (_BYTE *)(v40 + 64);
        while (*((_QWORD *)v42 - 4) != a9)
        {
          v42 += 40;
          if (!--v41)
            goto LABEL_23;
        }
      }
      else
      {
LABEL_23:
        v67[0] = 0;
        v67[1] = 0xE000000000000000;
        a5 = v67;
        sub_1B2229430();
        sub_1B2228890();
        sub_1B222A210();
        v21 = v43;
        sub_1B2228890();
        swift_bridgeObjectRelease();
        sub_1B2228890();
        type metadata accessor for EntityClass();
        sub_1B22295EC();
        sub_1B2229688();
        __break(1u);
      }
      if (*v42 == 1)
      {
        memmove((void *)(v66 + *((_QWORD *)v42 - 1) + *((_QWORD *)v42 - 2) * a2), (const void *)(a7 + *a13 * *((_QWORD *)v42 - 2)), *((_QWORD *)v42 - 2) * v23);
      }
      else
      {
        sub_1B1F24B74();
        a5 = v65;
      }
    }
    if ((a5[23] & 1) == 0)
    {
      v44 = 0;
      v45 = a5[21];
      v46 = a5[2];
      do
      {
        v47 = a2 + v44;
        v48 = v44 + 1;
        v49 = *(_QWORD *)(v46 + OBJC_IVAR____TtC3VFX13EntityManager__entries) + 12 * *(int *)(v45 + 4 * (v44 + *a11));
        *(_DWORD *)v49 = *(_DWORD *)(v21 + 188);
        *(_WORD *)(v49 + 4) = v47;
        *(_WORD *)(v49 + 6) = a15;
        v44 = v48;
      }
      while (v23 != v48);
    }
    *a13 += v23;
    v50 = *a11;
    *a11 += v23;
    if ((v22 & 1) != 0)
    {
      v51 = *(_QWORD *)(v21 + 192);
      if (v51)
        sub_1B1FE243C(a2, a3, 0, 0, 1, v51, *(_QWORD *)(v21 + 200), *(_QWORD *)(v21 + 208));
      sub_1B1FE2814(*(_QWORD *)(v21 + 40), v21, a2, a3);
    }
    else if (*(_BYTE *)(a6 + 212) == 1)
    {
      v52 = a5[24];
      v53 = a5[26];
      v54 = *(_QWORD *)(v21 + 192);
      v55 = a2;
      v56 = v50;
      v57 = *(_QWORD *)(v21 + 208);
      do
      {
        v58 = *(_QWORD *)(v52 + 8 * (v56 >> 6));
        if (((1 << v56) & v58) != 0)
        {
          *(_QWORD *)(v52 + 8 * (v56 >> 6)) = v58 & ~(1 << v56);
          *(_QWORD *)(v54 + 8 * (v55 >> 6)) |= 1 << v55;
        }
        ++v55;
        ++v56;
      }
      while (a3 != v55);
      do
      {
        v59 = *(_QWORD *)(v53 + 8 * (v50 >> 6));
        if (((1 << v50) & v59) != 0)
        {
          *(_QWORD *)(v53 + 8 * (v50 >> 6)) = v59 & ~(1 << v50);
          *(_QWORD *)(v57 + 8 * (a2 >> 6)) |= 1 << a2;
        }
        ++a2;
        ++v50;
      }
      while (a3 != a2);
    }
  }
  return swift_release();
}

uint64_t sub_1B1A11BB8(uint64_t *a1, uint64_t a2, uint64_t a3, signed int a4)
{
  uint64_t v4;

  if (a1 && *(_QWORD *)(v4 + 240) - *(_QWORD *)(v4 + 232) > a3)
    return sub_1B1FD891C(a1, a2, a3, a4, *(unsigned __int8 *)(v4 + 120), *(unsigned int *)(v4 + 28) | ((unint64_t)*(unsigned __int8 *)(v4 + 32) << 32), 0, 0);
  if (sub_1B1A10B20(a4))
    return sub_1B1A10BB0(a4);
  return sub_1B1FD8C68(*(_QWORD *)(v4 + 232), *(_QWORD *)(v4 + 240), a4, *(unsigned __int8 *)(v4 + 120), *(unsigned int *)(v4 + 28) | ((unint64_t)*(unsigned __int8 *)(v4 + 32) << 32), 0, 0, 0);
}

uint64_t sub_1B1A11C8C(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  int v11;
  signed int v12;
  _OWORD v14[2];
  uint64_t v15;
  _OWORD v16[2];
  uint64_t v17;

  if (((*(uint64_t (**)(void))(*(_QWORD *)(a2 + 8) + 48))() & 1) != 0)
    sub_1B1FD9680(a3, a4, a5, a1, a2, 1);
  v11 = *(_DWORD *)(v5 + 24);
  swift_retain();
  v17 = 0;
  memset(v16, 0, sizeof(v16));
  v15 = 0;
  memset(v14, 0, sizeof(v14));
  v12 = sub_1B1DA4ED8(v11, a1, a2, 0, 0, (uint64_t)v16, (uint64_t)v14);
  swift_release();
  sub_1B1A12E98((uint64_t)v14);
  sub_1B1A12E98((uint64_t)v16);
  return sub_1B1A11BB8(a3, a4, a5, v12);
}

uint64_t sub_1B1A11D9C(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  uint64_t v7;
  int v14;
  signed int v15;
  _OWORD v17[2];
  uint64_t v18;
  _OWORD v19[2];
  uint64_t v20;

  if (((*(uint64_t (**)(void))(*(_QWORD *)(a2 + 8) + 48))() & 1) != 0 && (a7 & 1) == 0)
    sub_1B1FD9680(a3, a4, a5, a1, a2, 1);
  v14 = *(_DWORD *)(v7 + 24);
  swift_retain();
  v20 = 0;
  memset(v19, 0, sizeof(v19));
  v18 = 0;
  memset(v17, 0, sizeof(v17));
  v15 = sub_1B1DA4ED8(v14, 0, 0, a1, a2, (uint64_t)v19, (uint64_t)v17);
  swift_release();
  sub_1B1A12E98((uint64_t)v17);
  sub_1B1A12E98((uint64_t)v19);
  return sub_1B1A11BB8(a3, a4, a5, v15);
}

uint64_t sub_1B1A11EB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v21[10];

  v6 = v5;
  v12 = *(_QWORD *)(v6 + 48);
  v13 = *(_QWORD *)(v12 + 16);
  if (v13)
  {
    v14 = (uint64_t *)(v12 + 56);
    while (*(v14 - 3) != a4)
    {
      v14 += 5;
      if (!--v13)
        goto LABEL_7;
    }
    v13 = *v14;
  }
LABEL_7:
  v15 = *(_QWORD *)(a4 - 8);
  v16 = *(_QWORD *)(v6 + 128) + v13 + *(_QWORD *)(v15 + 72) * a1;
  v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a5 + 8) + 48))(a4);
  if ((v17 & 1) != 0)
  {
    MEMORY[0x1E0C80A78](v17, v18);
    v21[2] = a4;
    v21[3] = a5;
    v21[4] = v6;
    v21[5] = a1;
    v21[6] = v16;
    v21[7] = a3;
    sub_1B1EFFA50(a2, (uint64_t)sub_1B1A12F28, (uint64_t)v21, a4, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEE9C0] + 8, MEMORY[0x1E0DEDD18], v19);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 24))(v16, a2, a4);
}

uint64_t sub_1B1A11FDC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *i;

  v2 = *(_QWORD *)(v1 + 48);
  v3 = *(_QWORD *)(v2 + 16);
  if (!v3)
    return 0;
  for (i = (_QWORD *)(v2 + 56); *(i - 3) != a1; i += 5)
  {
    if (!--v3)
      return 0;
  }
  return *(_QWORD *)(v1 + 128) + *i;
}

uint64_t sub_1B1A12038(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  char v20;
  uint64_t v21;
  _QWORD v22[2];

  v12 = a1;
  v13 = *(_QWORD *)(a2 + 8);
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v13 + 16))(a1, v13) & 1) != 0)
  {
    v14 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 40) + 16) + 48);
    sub_1B2163078(v14 + 32, *(_QWORD *)(v14 + 16), a1, v22);
    v12 = v22[0];
    if (!v22[0])
      return 0;
    v13 = v22[1];
  }
  if (!a3)
  {
    if (v12 == a1)
      return sub_1B1A11FDC(v12);
    v21 = sub_1B1F24A98(a1);
    if (v21 == sub_1B1F24A98(v12))
      return sub_1B1A11FDC(v12);
  }
  v15 = sub_1B1F24AF8(a1);
  v16 = sub_1B1F24B84(a1);
  if (v12 == a1)
    v17 = 0;
  else
    v17 = v12;
  if (v12 == a1)
    v18 = 0;
  else
    v18 = v13;
  result = sub_1B1E68344(v12, v13, a1, v15, v16, v17, v18, a3, a4, a5, a6);
  if (v20 == 2)
    return 0;
  return result;
}

uint64_t sub_1B1A121B4()
{
  sub_1B2229430();
  sub_1B2228890();
  sub_1B2229A0C();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  sub_1B2229A0C();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  sub_1B22295EC();
  sub_1B2228890();
  sub_1B22295EC();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  sub_1B2229A0C();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  sub_1B2229A0C();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  swift_retain();
  sub_1B1E36294();
  swift_release();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  return 0;
}

uint64_t sub_1B1A12454()
{
  return sub_1B1A121B4();
}

unint64_t sub_1B1A12478()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EEF58B18;
  if (!qword_1EEF58B18)
  {
    v1 = type metadata accessor for ComponentsDataChunk();
    result = MEMORY[0x1B5E23E74](&unk_1B226DEDC, v1);
    atomic_store(result, (unint64_t *)&qword_1EEF58B18);
  }
  return result;
}

void *sub_1B1A124BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *(_QWORD *)(v0 + 8);
  v1 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD **)v0;
  v4 = v2 - v1;
  if (v2 != v1)
  {
    v6 = 0;
    v7 = 0;
    v8 = *(_QWORD *)(v0 + 16);
    do
    {
      if (v7 < v1 && v3[v7] == v6)
      {
        v10 = v1 + v6 - v7;
        while (v1 - 1 != v7)
        {
          ++v6;
          v9 = v7 + 1;
          v11 = v3[++v7];
          if (v6 != v11)
            goto LABEL_5;
        }
        v6 = v10;
        v9 = v1;
      }
      else
      {
        v9 = v7;
      }
LABEL_5:
      v3[v8] = v6++;
      v7 = v9;
      ++v8;
    }
    while (v8 != v2);
  }
  *(_QWORD *)(v0 + 16) = v4;
  return memmove(v3, &v3[v1], 8 * v4);
}

uint64_t sub_1B1A12560(_QWORD *a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  int v40;
  int v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  int v54;
  int v55;
  uint64_t v56;
  int v57;
  uint64_t v59;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;

  v6 = 256;
  if ((a3 & 1) != 0)
    v6 = 232;
  v7 = *(_QWORD *)(a4 + v6);
  if (v7 == *a1)
  {
    v8 = v7 + 1;
    if (a2 >= 2)
    {
      if (v8 == a1[1])
      {
        v8 = v7 + 2;
        if ((unint64_t)a2 >= 3 && v8 == a1[2])
        {
          if ((unint64_t)a2 < 4)
          {
            v8 = v7 + 3;
            v9 = 3;
          }
          else
          {
            v8 = v7 + a2;
            v9 = 3;
            while (v7 + v9 == a1[v9])
            {
              if (a2 == ++v9)
              {
                v9 = a2;
                goto LABEL_19;
              }
            }
            v8 = v7 + v9;
          }
        }
        else
        {
          v9 = 2;
        }
      }
      else
      {
        v9 = 1;
      }
      goto LABEL_19;
    }
    v9 = 1;
    if (!a2)
      return 0;
  }
  else
  {
    v9 = 0;
    v8 = v7;
    if (!a2)
      return 0;
  }
LABEL_19:
  v10 = 0;
  v59 = a2 + 1;
  v11 = *(_QWORD *)(a4 + 240);
  v12 = a2;
  v62 = a5;
  v63 = a1;
  do
  {
    while (1)
    {
      while (1)
      {
        v13 = a1[--v12];
        if (v13 < *(_QWORD *)(a4 + 248))
          break;
        if (v13 >= --v11)
        {
LABEL_20:
          if (!v12)
            return v10;
        }
        else
        {
          v23 = *(_QWORD *)(a5 + 192);
          if (v23)
          {
            v24 = *(_QWORD *)(a5 + 208);
            v25 = 8 * (v11 >> 6);
            v26 = *(_QWORD *)(v23 + v25);
            v27 = 1 << v11;
            v28 = v13 >> 6;
            v29 = 1 << v13;
            if ((*(_QWORD *)(v23 + 8 * (v13 >> 6)) & (1 << v13)) != 0)
              v30 = v26 | (1 << v11);
            else
              v30 = v26 & ~(1 << v11);
            *(_QWORD *)(v23 + v25) = v30;
            if ((v26 & v27) != 0)
              v31 = *(_QWORD *)(v23 + 8 * v28) | v29;
            else
              v31 = *(_QWORD *)(v23 + 8 * v28) & ~v29;
            *(_QWORD *)(v23 + 8 * v28) = v31;
            v46 = *(_QWORD *)(v24 + v25);
            v47 = v46 & ~v27;
            if ((*(_QWORD *)(v24 + 8 * v28) & v29) != 0)
              v47 = v46 | v27;
            *(_QWORD *)(v24 + v25) = v47;
            if ((v46 & v27) != 0)
              v48 = *(_QWORD *)(v24 + 8 * v28) | v29;
            else
              v48 = *(_QWORD *)(v24 + 8 * v28) & ~v29;
            *(_QWORD *)(v24 + 8 * v28) = v48;
          }
          v61 = v8;
          v49 = v11;
          v50 = *(_DWORD *)(a6 + 4 * v13);
          if (v13 != v11)
          {
            *(_DWORD *)(a6 + 4 * v13) = *(_DWORD *)(a6 + 4 * v11);
            *(_DWORD *)(a6 + 4 * v11) = v50;
          }
          v51 = *(_QWORD *)(a5 + 16);
          v52 = *(_DWORD *)(a5 + 188);
          v53 = *(_QWORD *)(v51 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
          v54 = *(_DWORD *)(v53 + 12 * v50);
          swift_retain();
          if (v54 == v52)
            *(_WORD *)(v53 + 12 * v50 + 4) = v49;
          swift_release();
          v55 = *(_DWORD *)(a6 + 4 * v13);
          v56 = *(_QWORD *)(v51 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
          v57 = *(_DWORD *)(v56 + 12 * v55);
          swift_retain();
          if (v57 == v52)
            *(_WORD *)(v56 + 12 * v55 + 4) = v13;
          swift_release();
          ++v10;
          a5 = v62;
          a1 = v63;
          v11 = v49;
          v8 = v61;
          if (!v12)
            return v10;
        }
      }
      if (v8 >= v13)
        return v10;
      v14 = *(_QWORD *)(a5 + 192);
      if (v14)
      {
        v15 = *(_QWORD *)(a5 + 208);
        v16 = 8 * (v8 >> 6);
        v17 = *(_QWORD *)(v14 + v16);
        v18 = 1 << v8;
        v19 = v13 >> 6;
        v20 = 1 << v13;
        if ((*(_QWORD *)(v14 + 8 * (v13 >> 6)) & (1 << v13)) != 0)
          v21 = v17 | (1 << v8);
        else
          v21 = v17 & ~(1 << v8);
        *(_QWORD *)(v14 + v16) = v21;
        if ((v17 & v18) != 0)
          v22 = *(_QWORD *)(v14 + 8 * v19) | v20;
        else
          v22 = *(_QWORD *)(v14 + 8 * v19) & ~v20;
        *(_QWORD *)(v14 + 8 * v19) = v22;
        v32 = *(_QWORD *)(v15 + v16);
        v33 = v32 & ~v18;
        if ((*(_QWORD *)(v15 + 8 * v19) & v20) != 0)
          v33 = v32 | v18;
        *(_QWORD *)(v15 + v16) = v33;
        if ((v32 & v18) != 0)
          v34 = *(_QWORD *)(v15 + 8 * v19) | v20;
        else
          v34 = *(_QWORD *)(v15 + 8 * v19) & ~v20;
        *(_QWORD *)(v15 + 8 * v19) = v34;
      }
      v64 = v11;
      v35 = v8;
      if (v13 == v8)
      {
        v36 = *(_DWORD *)(a6 + 4 * v8);
      }
      else
      {
        v36 = *(_DWORD *)(a6 + 4 * v13);
        *(_DWORD *)(a6 + 4 * v13) = *(_DWORD *)(a6 + 4 * v8);
        *(_DWORD *)(a6 + 4 * v8) = v36;
      }
      v37 = *(_QWORD *)(a5 + 16);
      v38 = *(_DWORD *)(a5 + 188);
      v39 = *(_QWORD *)(v37 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
      v40 = *(_DWORD *)(v39 + 12 * v36);
      swift_retain();
      if (v40 == v38)
        *(_WORD *)(v39 + 12 * v36 + 4) = v35;
      swift_release();
      v41 = *(_DWORD *)(a6 + 4 * v13);
      v42 = *(_QWORD *)(v37 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
      v43 = *(_DWORD *)(v42 + 12 * v41);
      swift_retain();
      if (v43 == v38)
        *(_WORD *)(v42 + 12 * v41 + 4) = v13;
      swift_release();
      ++v10;
      a1 = v63;
      if (v35 + 1 == v63[v9])
        break;
      v8 = v35 + 1;
      a5 = v62;
      v11 = v64;
      if (!v12)
        return v10;
    }
    v44 = v35 + 2;
    v45 = v9 + 1;
    a5 = v62;
    v11 = v64;
    if (v9 + 1 < a2 && v44 == v63[v45])
    {
      v44 = v35 + 3;
      v45 = v9 + 2;
      if (v9 + 2 < a2)
      {
        v8 = v59 + v35 - v9;
        while (v44 == v63[v45])
        {
          ++v44;
          if (a2 == ++v45)
          {
            v9 = a2;
            goto LABEL_20;
          }
        }
      }
    }
    v8 = v44;
    v9 = v45;
  }
  while (v12);
  return v10;
}

uint64_t sub_1B1A12A48(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  int v42;
  int v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  int v55;
  int v56;
  uint64_t v57;
  int v58;
  uint64_t v60;
  uint64_t v62;
  uint64_t v63;

  v6 = 256;
  if ((a3 & 1) != 0)
    v6 = 232;
  v7 = *(_QWORD *)(a4 + v6);
  v8 = a1 + 2;
  if (a1 + 2 <= a2)
    v8 = a2;
  if (a1 + 1 >= a2)
    v9 = a1 + 1;
  else
    v9 = v8;
  if (v7 == a1)
    v10 = v9;
  else
    v10 = v7;
  if (v7 == a1)
    v11 = v9;
  else
    v11 = a1;
  if (a2 != a1)
  {
    v12 = 0;
    v60 = a2 + 1;
    v13 = *(_QWORD *)(a4 + 240);
    v14 = a2;
    v62 = a5;
    v63 = a4;
    while (1)
    {
      v15 = v14--;
      if (v14 >= *(_QWORD *)(a4 + 248))
      {
        v25 = v13 - 1;
        if (v14 < v13 - 1)
        {
          v26 = *(_QWORD *)(a5 + 192);
          if (v26 && v15 != v13)
          {
            v27 = *(_QWORD *)(a5 + 208);
            v28 = 8 * (v25 >> 6);
            v29 = *(_QWORD *)(v26 + v28);
            v30 = 1 << v25;
            v31 = v14 >> 6;
            v32 = 1 << v14;
            if ((*(_QWORD *)(v26 + 8 * (v14 >> 6)) & (1 << v14)) != 0)
              v33 = v29 | (1 << v25);
            else
              v33 = v29 & ~(1 << v25);
            *(_QWORD *)(v26 + v28) = v33;
            if ((v29 & v30) != 0)
              v34 = *(_QWORD *)(v26 + 8 * v31) | v32;
            else
              v34 = *(_QWORD *)(v26 + 8 * v31) & ~v32;
            *(_QWORD *)(v26 + 8 * v31) = v34;
            v48 = *(_QWORD *)(v27 + v28);
            v49 = v48 & ~v30;
            if ((*(_QWORD *)(v27 + 8 * v31) & v32) != 0)
              v49 = v48 | v30;
            *(_QWORD *)(v27 + v28) = v49;
            if ((v48 & v30) != 0)
              v50 = *(_QWORD *)(v27 + 8 * v31) | v32;
            else
              v50 = *(_QWORD *)(v27 + 8 * v31) & ~v32;
            *(_QWORD *)(v27 + 8 * v31) = v50;
          }
          if (v15 == v13)
          {
            v51 = *(_DWORD *)(a6 + 4 * v25);
          }
          else
          {
            v51 = *(_DWORD *)(a6 + 4 * v14);
            *(_DWORD *)(a6 + 4 * v14) = *(_DWORD *)(a6 + 4 * v25);
            *(_DWORD *)(a6 + 4 * v25) = v51;
          }
          v52 = *(_QWORD *)(a5 + 16);
          v53 = *(_DWORD *)(a5 + 188);
          v54 = *(_QWORD *)(v52 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
          v55 = *(_DWORD *)(v54 + 12 * v51);
          swift_retain();
          if (v55 == v53)
            *(_WORD *)(v54 + 12 * v51 + 4) = v25;
          swift_release();
          v56 = *(_DWORD *)(a6 + 4 * v14);
          v57 = *(_QWORD *)(v52 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
          v58 = *(_DWORD *)(v57 + 12 * v56);
          swift_retain();
          if (v58 == v53)
            *(_WORD *)(v57 + 12 * v56 + 4) = v14;
          swift_release();
          ++v12;
          a5 = v62;
          a4 = v63;
        }
      }
      else
      {
        if (v10 >= v14)
          return v12;
        v16 = *(_QWORD *)(a5 + 192);
        if (v16)
        {
          v17 = *(_QWORD *)(a5 + 208);
          v18 = 8 * (v10 >> 6);
          v19 = *(_QWORD *)(v16 + v18);
          v20 = 1 << v10;
          v21 = v14 >> 6;
          v22 = 1 << v14;
          if ((*(_QWORD *)(v16 + 8 * (v14 >> 6)) & (1 << v14)) != 0)
            v23 = v19 | (1 << v10);
          else
            v23 = v19 & ~(1 << v10);
          *(_QWORD *)(v16 + v18) = v23;
          if ((v19 & v20) != 0)
            v24 = *(_QWORD *)(v16 + 8 * v21) | v22;
          else
            v24 = *(_QWORD *)(v16 + 8 * v21) & ~v22;
          *(_QWORD *)(v16 + 8 * v21) = v24;
          v35 = *(_QWORD *)(v17 + v18);
          v36 = v35 & ~v20;
          if ((*(_QWORD *)(v17 + 8 * v21) & v22) != 0)
            v36 = v35 | v20;
          *(_QWORD *)(v17 + v18) = v36;
          if ((v35 & v20) != 0)
            v37 = *(_QWORD *)(v17 + 8 * v21) | v22;
          else
            v37 = *(_QWORD *)(v17 + 8 * v21) & ~v22;
          *(_QWORD *)(v17 + 8 * v21) = v37;
        }
        if (v14 == v10)
        {
          v38 = *(_DWORD *)(a6 + 4 * v10);
        }
        else
        {
          v38 = *(_DWORD *)(a6 + 4 * v14);
          *(_DWORD *)(a6 + 4 * v14) = *(_DWORD *)(a6 + 4 * v10);
          *(_DWORD *)(a6 + 4 * v10) = v38;
        }
        v39 = *(_QWORD *)(a5 + 16);
        v40 = *(_DWORD *)(a5 + 188);
        v41 = *(_QWORD *)(v39 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
        v42 = *(_DWORD *)(v41 + 12 * v38);
        swift_retain();
        if (v42 == v40)
          *(_WORD *)(v41 + 12 * v38 + 4) = v10;
        swift_release();
        v43 = *(_DWORD *)(a6 + 4 * v14);
        v44 = *(_QWORD *)(v39 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
        v45 = *(_DWORD *)(v44 + 12 * v43);
        swift_retain();
        if (v45 == v40)
          *(_WORD *)(v44 + 12 * v43 + 4) = v14;
        swift_release();
        ++v12;
        if (v10 + 1 == v11)
        {
          a5 = v62;
          a4 = v63;
          if (v11 + 1 < a2 && v10 + 2 == v11 + 1)
          {
            v46 = v10 + 3;
            v47 = v11 + 2;
            if (v11 + 2 < a2)
            {
              v10 = v60 + v10 - v11;
              while (v46 == v47)
              {
                v47 = ++v46;
                if (a2 == v46)
                {
                  v25 = v13;
                  v11 = a2;
                  goto LABEL_17;
                }
              }
            }
            v10 = v46;
            v25 = v13;
            v11 = v47;
          }
          else
          {
            v10 += 2;
            v25 = v13;
            ++v11;
          }
        }
        else
        {
          ++v10;
          v25 = v13;
          a5 = v62;
          a4 = v63;
        }
      }
LABEL_17:
      v13 = v25;
      if (v14 == a1)
        return v12;
    }
  }
  return 0;
}

uint64_t sub_1B1A12E98(uint64_t a1)
{
  uint64_t v2;

  sub_1B19FFFFC();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1B1A12ED4()
{
  unint64_t result;

  result = qword_1ED4B89D0;
  if (!qword_1ED4B89D0)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&qword_1ED4B89D0);
  }
  return result;
}

uint64_t sub_1B1A12F28(uint64_t a1)
{
  uint64_t *v1;

  return sub_1B1D3B018(v1[5], v1[6], a1, v1[2], v1[7], v1[2], v1[3]);
}

uint64_t sub_1B1A12F64(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (*(_QWORD *)(a3 + 248) <= a1)
  {
    v7 = *(_QWORD *)(a3 + 240) - 1;
    if (v7 <= a1)
      return 0;
  }
  else
  {
    v5 = 256;
    if ((a2 & 1) != 0)
      v5 = 232;
    v6 = *(_QWORD *)(a3 + v5);
    if (v6 == a1)
      v7 = v6 + 1;
    else
      v7 = v6;
    if (v7 >= a1)
      return 0;
  }
  sub_1B1A11064(a1, v7, a4, a5);
  return 1;
}

uint64_t getEnumTagSinglePayload for JobQueue(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for JobQueue(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for PackedRewriter()
{
  return &type metadata for PackedRewriter;
}

uint64_t sub_1B1A13068(_QWORD *a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  int v43;
  int v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  int v56;
  int v57;
  uint64_t v58;
  int v59;
  unint64_t v61;
  int64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;

  v6 = 256;
  if ((a2 & 1) != 0)
    v6 = 232;
  v7 = *(_QWORD *)(a3 + v6);
  v8 = a1 + 4;
  if (v7 == a1[4])
  {
    v9 = v7 + 1;
    v10 = a1[2];
    if (v10 >= 2)
    {
      if (v9 == a1[5])
      {
        v9 = v7 + 2;
        if (v10 < 3)
        {
          v13 = 2;
          v10 = 2;
        }
        else if (v9 == a1[6])
        {
          v11 = v7 + 3;
          if (v10 < 4)
          {
            v13 = 3;
            v9 = v7 + 3;
            v10 = 3;
          }
          else
          {
            v12 = 0;
            v9 = v7 + v10;
            while (v11 + v12 == a1[v12 + 7])
            {
              if (v10 - 3 == ++v12)
              {
                v13 = a1[2];
                goto LABEL_22;
              }
            }
            v13 = v12 + 3;
            v9 = v11 + v12;
          }
        }
        else
        {
          v13 = 2;
        }
      }
      else
      {
        v13 = 1;
      }
      goto LABEL_22;
    }
    v13 = 1;
    if (!v10)
      return 0;
  }
  else
  {
    v13 = 0;
    v10 = a1[2];
    v9 = v7;
    if (!v10)
      return 0;
  }
LABEL_22:
  v14 = *(_QWORD *)(a3 + 240);
  v61 = v10 + 1;
  v15 = 0;
  v62 = v10;
  v63 = v10 - 2;
  v65 = swift_bridgeObjectRetain() + 48;
  v66 = v8;
  v67 = a4;
  while (1)
  {
    v16 = v8[--v10];
    if (v16 < *(_QWORD *)(a3 + 248))
      break;
    if (v16 < --v14)
    {
      v26 = *(_QWORD *)(a4 + 192);
      if (v26)
      {
        v27 = *(_QWORD *)(a4 + 208);
        v28 = 8 * (v14 >> 6);
        v29 = *(_QWORD *)(v26 + v28);
        v30 = 1 << v14;
        v31 = v16 >> 6;
        v32 = 1 << v16;
        if ((*(_QWORD *)(v26 + 8 * (v16 >> 6)) & (1 << v16)) != 0)
          v33 = v29 | (1 << v14);
        else
          v33 = v29 & ~(1 << v14);
        *(_QWORD *)(v26 + v28) = v33;
        if ((v29 & v30) != 0)
          v34 = *(_QWORD *)(v26 + 8 * v31) | v32;
        else
          v34 = *(_QWORD *)(v26 + 8 * v31) & ~v32;
        *(_QWORD *)(v26 + 8 * v31) = v34;
        v48 = *(_QWORD *)(v27 + v28);
        v49 = v48 & ~v30;
        if ((*(_QWORD *)(v27 + 8 * v31) & v32) != 0)
          v49 = v48 | v30;
        *(_QWORD *)(v27 + v28) = v49;
        if ((v48 & v30) != 0)
          v50 = *(_QWORD *)(v27 + 8 * v31) | v32;
        else
          v50 = *(_QWORD *)(v27 + 8 * v31) & ~v32;
        *(_QWORD *)(v27 + 8 * v31) = v50;
      }
      v64 = v9;
      v51 = v14;
      v52 = *(_DWORD *)(a5 + 4 * v16);
      if (v16 != v14)
      {
        *(_DWORD *)(a5 + 4 * v16) = *(_DWORD *)(a5 + 4 * v14);
        *(_DWORD *)(a5 + 4 * v14) = v52;
      }
      v53 = *(_QWORD *)(a4 + 16);
      v54 = *(_DWORD *)(a4 + 188);
      v55 = *(_QWORD *)(v53 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
      v56 = *(_DWORD *)(v55 + 12 * v52);
      swift_retain();
      if (v56 == v54)
        *(_WORD *)(v55 + 12 * v52 + 4) = v51;
      swift_release();
      v57 = *(_DWORD *)(a5 + 4 * v16);
      v58 = *(_QWORD *)(v53 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
      v59 = *(_DWORD *)(v58 + 12 * v57);
      swift_retain();
      if (v59 == v54)
        *(_WORD *)(v58 + 12 * v57 + 4) = v16;
      swift_release();
      ++v15;
      v8 = v66;
      a4 = v67;
      v14 = v51;
      v9 = v64;
    }
LABEL_24:
    if (!v10)
      goto LABEL_79;
  }
  if (v9 < v16)
  {
    v17 = *(_QWORD *)(a4 + 192);
    if (v17)
    {
      v18 = *(_QWORD *)(a4 + 208);
      v19 = 8 * (v9 >> 6);
      v20 = *(_QWORD *)(v17 + v19);
      v21 = 1 << v9;
      v22 = v16 >> 6;
      v23 = 1 << v16;
      if ((*(_QWORD *)(v17 + 8 * (v16 >> 6)) & (1 << v16)) != 0)
        v24 = v20 | (1 << v9);
      else
        v24 = v20 & ~(1 << v9);
      *(_QWORD *)(v17 + v19) = v24;
      if ((v20 & v21) != 0)
        v25 = *(_QWORD *)(v17 + 8 * v22) | v23;
      else
        v25 = *(_QWORD *)(v17 + 8 * v22) & ~v23;
      *(_QWORD *)(v17 + 8 * v22) = v25;
      v35 = *(_QWORD *)(v18 + v19);
      v36 = v35 & ~v21;
      if ((*(_QWORD *)(v18 + 8 * v22) & v23) != 0)
        v36 = v35 | v21;
      *(_QWORD *)(v18 + v19) = v36;
      if ((v35 & v21) != 0)
        v37 = *(_QWORD *)(v18 + 8 * v22) | v23;
      else
        v37 = *(_QWORD *)(v18 + 8 * v22) & ~v23;
      *(_QWORD *)(v18 + 8 * v22) = v37;
    }
    v68 = v14;
    v38 = v9;
    if (v16 == v9)
    {
      v39 = *(_DWORD *)(a5 + 4 * v9);
    }
    else
    {
      v39 = *(_DWORD *)(a5 + 4 * v16);
      *(_DWORD *)(a5 + 4 * v16) = *(_DWORD *)(a5 + 4 * v9);
      *(_DWORD *)(a5 + 4 * v9) = v39;
    }
    v40 = *(_QWORD *)(a4 + 16);
    v41 = *(_DWORD *)(a4 + 188);
    v42 = *(_QWORD *)(v40 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
    v43 = *(_DWORD *)(v42 + 12 * v39);
    swift_retain();
    if (v43 == v41)
      *(_WORD *)(v42 + 12 * v39 + 4) = v38;
    swift_release();
    v44 = *(_DWORD *)(a5 + 4 * v16);
    v45 = *(_QWORD *)(v40 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
    v46 = *(_DWORD *)(v45 + 12 * v44);
    swift_retain();
    if (v46 == v41)
      *(_WORD *)(v45 + 12 * v44 + 4) = v16;
    swift_release();
    ++v15;
    v8 = v66;
    if (v38 + 1 == v66[v13])
    {
      a4 = v67;
      v14 = v68;
      if (v13 + 1 < v62 && v38 + 2 == v66[v13 + 1])
      {
        v47 = v38 + 3;
        if (v13 + 2 >= v62)
        {
          v9 = v38 + 3;
          v13 += 2;
        }
        else
        {
          v9 = v61 + v38 - v13;
          while (v47 == *(_QWORD *)(v65 + 8 * v13))
          {
            ++v47;
            if (v63 == ++v13)
            {
              v13 = v62;
              goto LABEL_24;
            }
          }
          v13 += 2;
          v9 = v47;
        }
      }
      else
      {
        v9 = v38 + 2;
        ++v13;
      }
    }
    else
    {
      v9 = v38 + 1;
      a4 = v67;
      v14 = v68;
    }
    goto LABEL_24;
  }
LABEL_79:
  swift_bridgeObjectRelease();
  return v15;
}

double sub_1B1A135B4@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  double result;
  _QWORD v11[3];
  uint64_t v12;
  uint64_t v13;

  v3 = *(_QWORD *)(v1 + 32);
  v4 = swift_conformsToProtocol2();
  if (v4)
    v5 = v4;
  else
    v5 = 0;
  if (!v4)
    v3 = 0;
  if (v3)
  {
    swift_unownedRetainStrong();
    sub_1B1FDE8CC(v3, v5, *(_QWORD *)(v1 + 24), (uint64_t)v11);
    swift_release();
    v6 = v12;
    if (v12)
    {
      v7 = v13;
      v8 = sub_1B19FA070(v11, v12);
      *(_QWORD *)(a1 + 24) = v6;
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(v7 + 8);
      v9 = sub_1B1A137F4((uint64_t *)a1);
      (*(void (**)(uint64_t *, _QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(v9, v8, v6);
      _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v11);
      return result;
    }
    sub_1B1A13764((uint64_t)v11);
  }
  *(_QWORD *)(a1 + 32) = 0;
  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t sub_1B1A1369C()
{
  swift_unownedRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for VFXAttribute()
{
  return objc_opt_self();
}

BOOL sub_1B1A136E0(uint64_t *a1, uint64_t *a2)
{
  return sub_1B1A136EC(*a1, *a2);
}

BOOL sub_1B1A136EC(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_DWORD *)(a1 + 24) == *(_DWORD *)(a2 + 24) && *(_DWORD *)(a1 + 28) == *(_DWORD *)(a2 + 28);
  if (!v2 || *(_QWORD *)(a1 + 32) != *(_QWORD *)(a2 + 32))
    return 0;
  v5 = *(_QWORD *)(a1 + 16);
  swift_unownedRetainStrong();
  v6 = *(_QWORD *)(a2 + 16);
  swift_unownedRetainStrong();
  swift_release();
  swift_release();
  return v5 == v6;
}

uint64_t sub_1B1A13764(uint64_t a1)
{
  uint64_t v2;

  sub_1B1A137A0();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_1B1A137A0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED4B8C80)
  {
    sub_1B19ED884();
    v0 = sub_1B2229124();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED4B8C80);
  }
}

uint64_t *sub_1B1A137F4(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;

  v1 = a1;
  if ((*(_BYTE *)(*(_QWORD *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

uint64_t sub_1B1A13830(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  os_unfair_lock_s *v6;

  v3 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_queryManager);
  swift_getObjectType();
  v5 = sub_1B204D6E4();
  v6 = *(os_unfair_lock_s **)(v4 + 40);
  swift_retain_n();
  os_unfair_lock_lock(v6);
  sub_1B1E8F784(a1, v3);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B1E8FAC0(a1, v5, v3);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v4 + 40));
  return swift_release_n();
}

uint64_t *sub_1B1A138F8(uint64_t a1)
{
  uint64_t v1;
  double v2;
  __int128 v3;
  uint64_t *result;
  float v5;
  _QWORD *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  os_unfair_lock_s *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  float v21;
  uint64_t v22;
  uint64_t v23;
  float v24;
  int v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32[8];
  _OWORD v33[2];
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  _OWORD v40[2];
  uint64_t v41;
  _BYTE v42[40];
  _OWORD v43[2];
  uint64_t v44;

  v2 = *(double *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_clock + 48);
  v3 = *(_OWORD *)(v1 + 32);
  v43[0] = *(_OWORD *)(v1 + 16);
  v43[1] = v3;
  v44 = *(_QWORD *)(v1 + 48);
  sub_1B1E8FCE4(a1, (uint64_t)v43, 0x200000000, v32);
  result = (uint64_t *)sub_1B1A18378((uint64_t)v32, (uint64_t)v33, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (*(_QWORD *)&v33[0])
  {
    if (v39 >= 1)
    {
      v29 = v36;
      if (v36)
      {
        v5 = v2;
        v6 = v38;
        v7 = v38[4];
        v8 = *(unsigned __int8 *)(v37 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
        v40[0] = v33[0];
        v40[1] = v33[1];
        v41 = v34;
        v27 = (uint64_t)(v38 + 6);
        v28 = v35;
        v26 = v38 + 8;
        swift_retain();
        swift_retain();
        swift_retain();
        v9 = 0;
        v25 = v8;
        while (1)
        {
          v10 = (unsigned int *)(v28 + 48 * v9);
          v11 = *v10;
          v30 = v10[1];
          v13 = (uint64_t *)*((_QWORD *)v10 + 2);
          v12 = *((_QWORD *)v10 + 3);
          v14 = *((_QWORD *)v10 + 4);
          v15 = *((_QWORD *)v10 + 5);
          if (v8)
          {
            v16 = *(os_unfair_lock_s **)(v15 + 376);
            swift_retain_n();
            os_unfair_lock_lock(v16);
            os_unfair_lock_lock(*(os_unfair_lock_t *)(v15 + 344));
            swift_release();
          }
          else
          {
            swift_retain();
          }
          ecs_stack_allocator_push_snapshot(v7);
          sub_1B1A18378(v27, (uint64_t)v42, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
          v17 = v6[4];
          v31 = v15;
          v18 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v15 + 40) + 16) + 32) + 16) + 1;
          swift_retain();
          v6[6] = ecs_stack_allocator_allocate(v17, 48 * v18, 8);
          v6[7] = v18;
          v26[1] = 0;
          v26[2] = 0;
          *v26 = 0;
          swift_release();
          v19 = sub_1B1A12038((uint64_t)&type metadata for AnimationTimeSource, (uint64_t)&off_1E6397740, v13, v12, v14, (uint64_t)v6);
          if (v13)
          {
            if (v14)
            {
              v20 = v19 + 57;
              v8 = v25;
              do
              {
                if (*(float *)(v20 - 9) != v5)
                {
                  *(float *)(v20 - 9) = v5;
                  v21 = (float)((float)(v5 - *(float *)(v20 - 49)) * *(float *)(v20 - 53)) / *(float *)(v20 - 57);
                  *(float *)(v20 - 5) = v21;
                  if (v21 > 1.0 && v21 < (float)(*(float *)(v20 - 41) + 1.0))
                  {
                    v21 = v21 - floorf(v21);
                    *(float *)(v20 - 5) = v21;
                  }
                  if (v21 <= 1.0)
                  {
                    *(_WORD *)(v20 - 1) = 1;
                    __asm { BR              X11 }
                  }
                  *(_WORD *)(v20 - 1) = 256;
                }
                v20 += 60;
                --v14;
              }
              while (v14);
              goto LABEL_22;
            }
          }
          else if ((_DWORD)v11 != (_DWORD)v30)
          {
            v22 = v30 - v11;
            v23 = v19 + 60 * v11 + 57;
            v8 = v25;
            do
            {
              if (*(float *)(v23 - 9) != v5)
              {
                *(float *)(v23 - 9) = v5;
                v24 = (float)((float)(v5 - *(float *)(v23 - 49)) * *(float *)(v23 - 53)) / *(float *)(v23 - 57);
                *(float *)(v23 - 5) = v24;
                if (v24 > 1.0 && v24 < (float)(*(float *)(v23 - 41) + 1.0))
                {
                  v24 = v24 - floorf(v24);
                  *(float *)(v23 - 5) = v24;
                }
                if (v24 <= 1.0)
                {
                  *(_WORD *)(v23 - 1) = 1;
                  __asm { BR              X11 }
                }
                *(_WORD *)(v23 - 1) = 256;
              }
              v23 += 60;
              --v22;
            }
            while (v22);
            goto LABEL_22;
          }
          v8 = v25;
LABEL_22:
          sub_1B1F05D48(v6, (unsigned __int16 **)v40, (uint64_t)v42);
          sub_1B1F03804((char *)v31);
          ecs_stack_allocator_pop_snapshot(v7);
          if ((v8 & 1) != 0)
          {
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v31 + 344));
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v31 + 376));
          }
          swift_release();
          if (++v9 == v29)
          {
            sub_1B19ED748(v32);
            return sub_1B19ED748(v32);
          }
        }
      }
    }
    return sub_1B19ED748(v32);
  }
  return result;
}

uint64_t type metadata accessor for AnimationComputeLocalTimeSystem()
{
  return objc_opt_self();
}

uint64_t sub_1B1A14668()
{
  uint64_t v0;
  __int128 v1;
  _OWORD v3[2];
  uint64_t v4;
  uint64_t v5;
  int v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;

  v0 = swift_allocObject();
  if (qword_1ED4B7DB8 != -1)
    swift_once();
  v5 = qword_1ED4D09F8;
  v6 = 0;
  v7 = 2;
  v8 = 0;
  v9 = 2;
  v10 = 0;
  swift_retain();
  sub_1B1E3FBD4(2, (uint64_t)v3);
  swift_release();
  v1 = v3[1];
  *(_OWORD *)(v0 + 16) = v3[0];
  *(_OWORD *)(v0 + 32) = v1;
  *(_QWORD *)(v0 + 48) = v4;
  return v0;
}

const char *sub_1B1A14724()
{
  return "AnimationComputeLocalTime";
}

uint64_t sub_1B1A1473C@<X0>(char a1@<W0>, char a2@<W1>, char a3@<W2>, uint64_t a4@<X8>)
{
  unsigned __int16 **v4;
  unsigned __int16 **v5;
  unsigned __int16 *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t inited;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  int v24;
  char v25;
  unsigned __int16 *v26;
  unsigned __int16 *v27;
  char v28;
  uint64_t v29;
  uint64_t result;
  uint64_t v31;
  __int16 v32;
  char v33;

  v5 = v4;
  v10 = *v4;
  v11 = (uint64_t)*v4 + 41;
  v12 = (*v4)[8];
  v13 = v10[9];
  sub_1B1A19B14();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226E100;
  *(_QWORD *)(inited + 32) = &type metadata for SkinnedMeshBinding;
  *(_QWORD *)(inited + 40) = &off_1E6395D98;
  *(_QWORD *)(inited + 48) = &type metadata for MeshModel;
  *(_QWORD *)(inited + 56) = &off_1E63C44F8;
  *(_QWORD *)(inited + 64) = &type metadata for WorldTransform;
  *(_QWORD *)(inited + 72) = &off_1E6382C78;
  if (v13 > 0xF)
  {
    v31 = sub_1B1DC8944((char *)(v11 + v12), v13 >> 4);
    sub_1B19F4A48(inited);
    inited = v31;
  }
  v15 = v10[10];
  v16 = v10[11];
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v17 = swift_initStackObject();
  *(_OWORD *)(v17 + 16) = xmmword_1B226E100;
  *(_BYTE *)(v17 + 32) = a1;
  *(_BYTE *)(v17 + 33) = a2;
  *(_BYTE *)(v17 + 34) = a3;
  if (v16)
  {
    v31 = sub_1B1DC8810((char *)(v11 + v15), v16);
    sub_1B19F499C(v17);
    v17 = v31;
    v18 = *(_QWORD *)(v31 + 16);
  }
  else
  {
    v18 = 3;
  }
  v19 = (uint64_t)*v5 + 41;
  v20 = (char *)(v19 + (*v5)[12]);
  v21 = (unint64_t)(*v5)[13] >> 4;
  v22 = (char *)(v19 + (*v5)[14]);
  v23 = (*v5)[15] / 0x18u;
  v24 = *((_DWORD *)v5 + 2);
  v25 = *((_BYTE *)v5 + 12);
  v26 = v5[4];
  v27 = v5[2];
  v28 = *((_BYTE *)v5 + 24);
  v29 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v17 + 32), v18, v20, v21, v22, v23);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a4 = v29;
  *(_DWORD *)(a4 + 8) = v24;
  *(_BYTE *)(a4 + 12) = v25;
  *(_WORD *)(a4 + 13) = v32;
  *(_BYTE *)(a4 + 15) = v33;
  *(_QWORD *)(a4 + 16) = v27;
  *(_BYTE *)(a4 + 24) = v28;
  *(_DWORD *)(a4 + 25) = v31;
  *(_DWORD *)(a4 + 28) = *(_DWORD *)((char *)&v31 + 3);
  *(_QWORD *)(a4 + 32) = v26;
  return result;
}

uint64_t sub_1B1A1496C@<X0>(char a1@<W0>, char a2@<W1>, char a3@<W2>, uint64_t a4@<X8>)
{
  unsigned __int16 **v4;
  unsigned __int16 **v5;
  unsigned __int16 *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t inited;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  int v24;
  char v25;
  unsigned __int16 *v26;
  unsigned __int16 *v27;
  char v28;
  uint64_t v29;
  uint64_t result;
  uint64_t v31;
  __int16 v32;
  char v33;

  v5 = v4;
  v10 = *v4;
  v11 = (uint64_t)*v4 + 41;
  v12 = (*v4)[8];
  v13 = v10[9];
  sub_1B1A19B14();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226E100;
  *(_QWORD *)(inited + 32) = &type metadata for WorldTransform;
  *(_QWORD *)(inited + 40) = &off_1E6382C78;
  *(_QWORD *)(inited + 48) = &type metadata for LastFrameWorldTransform;
  *(_QWORD *)(inited + 56) = &off_1E63AA9D8;
  *(_QWORD *)(inited + 64) = &type metadata for SmoothMotion;
  *(_QWORD *)(inited + 72) = &off_1E6377A40;
  if (v13 > 0xF)
  {
    v31 = sub_1B1DC8944((char *)(v11 + v12), v13 >> 4);
    sub_1B19F4A48(inited);
    inited = v31;
  }
  v15 = v10[10];
  v16 = v10[11];
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v17 = swift_initStackObject();
  *(_OWORD *)(v17 + 16) = xmmword_1B226E100;
  *(_BYTE *)(v17 + 32) = a1;
  *(_BYTE *)(v17 + 33) = a2;
  *(_BYTE *)(v17 + 34) = a3;
  if (v16)
  {
    v31 = sub_1B1DC8810((char *)(v11 + v15), v16);
    sub_1B19F499C(v17);
    v17 = v31;
    v18 = *(_QWORD *)(v31 + 16);
  }
  else
  {
    v18 = 3;
  }
  v19 = (uint64_t)*v5 + 41;
  v20 = (char *)(v19 + (*v5)[12]);
  v21 = (unint64_t)(*v5)[13] >> 4;
  v22 = (char *)(v19 + (*v5)[14]);
  v23 = (*v5)[15] / 0x18u;
  v24 = *((_DWORD *)v5 + 2);
  v25 = *((_BYTE *)v5 + 12);
  v26 = v5[4];
  v27 = v5[2];
  v28 = *((_BYTE *)v5 + 24);
  v29 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v17 + 32), v18, v20, v21, v22, v23);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a4 = v29;
  *(_DWORD *)(a4 + 8) = v24;
  *(_BYTE *)(a4 + 12) = v25;
  *(_WORD *)(a4 + 13) = v32;
  *(_BYTE *)(a4 + 15) = v33;
  *(_QWORD *)(a4 + 16) = v27;
  *(_BYTE *)(a4 + 24) = v28;
  *(_DWORD *)(a4 + 25) = v31;
  *(_DWORD *)(a4 + 28) = *(_DWORD *)((char *)&v31 + 3);
  *(_QWORD *)(a4 + 32) = v26;
  return result;
}

uint64_t sub_1B1A14B9C@<X0>(char a1@<W0>, char a2@<W1>, char a3@<W2>, uint64_t a4@<X8>)
{
  unsigned __int16 **v4;
  unsigned __int16 **v5;
  unsigned __int16 *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t inited;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  int v24;
  char v25;
  unsigned __int16 *v26;
  unsigned __int16 *v27;
  char v28;
  uint64_t v29;
  uint64_t result;
  uint64_t v31;
  __int16 v32;
  char v33;

  v5 = v4;
  v10 = *v4;
  v11 = (uint64_t)*v4 + 41;
  v12 = (*v4)[8];
  v13 = v10[9];
  sub_1B1A19B14();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226E100;
  *(_QWORD *)(inited + 32) = &type metadata for ProjectionMatrix;
  *(_QWORD *)(inited + 40) = &off_1E638A420;
  *(_QWORD *)(inited + 48) = &type metadata for PointOfView;
  *(_QWORD *)(inited + 56) = &off_1E6371AA8;
  *(_QWORD *)(inited + 64) = &type metadata for WorldTransform;
  *(_QWORD *)(inited + 72) = &off_1E6382C78;
  if (v13 > 0xF)
  {
    v31 = sub_1B1DC8944((char *)(v11 + v12), v13 >> 4);
    sub_1B19F4A48(inited);
    inited = v31;
  }
  v15 = v10[10];
  v16 = v10[11];
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v17 = swift_initStackObject();
  *(_OWORD *)(v17 + 16) = xmmword_1B226E100;
  *(_BYTE *)(v17 + 32) = a1;
  *(_BYTE *)(v17 + 33) = a2;
  *(_BYTE *)(v17 + 34) = a3;
  if (v16)
  {
    v31 = sub_1B1DC8810((char *)(v11 + v15), v16);
    sub_1B19F499C(v17);
    v17 = v31;
    v18 = *(_QWORD *)(v31 + 16);
  }
  else
  {
    v18 = 3;
  }
  v19 = (uint64_t)*v5 + 41;
  v20 = (char *)(v19 + (*v5)[12]);
  v21 = (unint64_t)(*v5)[13] >> 4;
  v22 = (char *)(v19 + (*v5)[14]);
  v23 = (*v5)[15] / 0x18u;
  v24 = *((_DWORD *)v5 + 2);
  v25 = *((_BYTE *)v5 + 12);
  v26 = v5[4];
  v27 = v5[2];
  v28 = *((_BYTE *)v5 + 24);
  v29 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v17 + 32), v18, v20, v21, v22, v23);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a4 = v29;
  *(_DWORD *)(a4 + 8) = v24;
  *(_BYTE *)(a4 + 12) = v25;
  *(_WORD *)(a4 + 13) = v32;
  *(_BYTE *)(a4 + 15) = v33;
  *(_QWORD *)(a4 + 16) = v27;
  *(_BYTE *)(a4 + 24) = v28;
  *(_DWORD *)(a4 + 25) = v31;
  *(_DWORD *)(a4 + 28) = *(_DWORD *)((char *)&v31 + 3);
  *(_QWORD *)(a4 + 32) = v26;
  return result;
}

uint64_t sub_1B1A14DCC@<X0>(char a1@<W0>, char a2@<W1>, char a3@<W2>, uint64_t a4@<X8>)
{
  unsigned __int16 **v4;
  unsigned __int16 **v5;
  unsigned __int16 *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t inited;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  int v24;
  char v25;
  unsigned __int16 *v26;
  unsigned __int16 *v27;
  char v28;
  uint64_t v29;
  uint64_t result;
  uint64_t v31;
  __int16 v32;
  char v33;

  v5 = v4;
  v10 = *v4;
  v11 = (uint64_t)*v4 + 41;
  v12 = (*v4)[8];
  v13 = v10[9];
  sub_1B1A19B14();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226E100;
  *(_QWORD *)(inited + 32) = &type metadata for EmitterDescription;
  *(_QWORD *)(inited + 40) = &off_1E6391B38;
  *(_QWORD *)(inited + 48) = &type metadata for EmitterRuntime;
  *(_QWORD *)(inited + 56) = &off_1E637F470;
  *(_QWORD *)(inited + 64) = &type metadata for WorldAABB;
  *(_QWORD *)(inited + 72) = &off_1E63C6040;
  if (v13 > 0xF)
  {
    v31 = sub_1B1DC8944((char *)(v11 + v12), v13 >> 4);
    sub_1B19F4A48(inited);
    inited = v31;
  }
  v15 = v10[10];
  v16 = v10[11];
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v17 = swift_initStackObject();
  *(_OWORD *)(v17 + 16) = xmmword_1B226E100;
  *(_BYTE *)(v17 + 32) = a1;
  *(_BYTE *)(v17 + 33) = a2;
  *(_BYTE *)(v17 + 34) = a3;
  if (v16)
  {
    v31 = sub_1B1DC8810((char *)(v11 + v15), v16);
    sub_1B19F499C(v17);
    v17 = v31;
    v18 = *(_QWORD *)(v31 + 16);
  }
  else
  {
    v18 = 3;
  }
  v19 = (uint64_t)*v5 + 41;
  v20 = (char *)(v19 + (*v5)[12]);
  v21 = (unint64_t)(*v5)[13] >> 4;
  v22 = (char *)(v19 + (*v5)[14]);
  v23 = (*v5)[15] / 0x18u;
  v24 = *((_DWORD *)v5 + 2);
  v25 = *((_BYTE *)v5 + 12);
  v26 = v5[4];
  v27 = v5[2];
  v28 = *((_BYTE *)v5 + 24);
  v29 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v17 + 32), v18, v20, v21, v22, v23);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a4 = v29;
  *(_DWORD *)(a4 + 8) = v24;
  *(_BYTE *)(a4 + 12) = v25;
  *(_WORD *)(a4 + 13) = v32;
  *(_BYTE *)(a4 + 15) = v33;
  *(_QWORD *)(a4 + 16) = v27;
  *(_BYTE *)(a4 + 24) = v28;
  *(_DWORD *)(a4 + 25) = v31;
  *(_DWORD *)(a4 + 28) = *(_DWORD *)((char *)&v31 + 3);
  *(_QWORD *)(a4 + 32) = v26;
  return result;
}

uint64_t sub_1B1A14FFC@<X0>(char a1@<W0>, char a2@<W1>, char a3@<W2>, uint64_t a4@<X8>)
{
  unsigned __int16 **v4;
  unsigned __int16 **v5;
  unsigned __int16 *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t inited;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  int v24;
  char v25;
  unsigned __int16 *v26;
  unsigned __int16 *v27;
  char v28;
  uint64_t v29;
  uint64_t result;
  uint64_t v31;
  __int16 v32;
  char v33;

  v5 = v4;
  v10 = *v4;
  v11 = (uint64_t)*v4 + 41;
  v12 = (*v4)[8];
  v13 = v10[9];
  sub_1B1A19B14();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226E100;
  *(_QWORD *)(inited + 32) = &type metadata for LocalAABB;
  *(_QWORD *)(inited + 40) = &off_1E63C41A0;
  *(_QWORD *)(inited + 48) = &type metadata for WorldTransform;
  *(_QWORD *)(inited + 56) = &off_1E6382C78;
  *(_QWORD *)(inited + 64) = &type metadata for WorldAABB;
  *(_QWORD *)(inited + 72) = &off_1E63C6040;
  if (v13 > 0xF)
  {
    v31 = sub_1B1DC8944((char *)(v11 + v12), v13 >> 4);
    sub_1B19F4A48(inited);
    inited = v31;
  }
  v15 = v10[10];
  v16 = v10[11];
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v17 = swift_initStackObject();
  *(_OWORD *)(v17 + 16) = xmmword_1B226E100;
  *(_BYTE *)(v17 + 32) = a1;
  *(_BYTE *)(v17 + 33) = a2;
  *(_BYTE *)(v17 + 34) = a3;
  if (v16)
  {
    v31 = sub_1B1DC8810((char *)(v11 + v15), v16);
    sub_1B19F499C(v17);
    v17 = v31;
    v18 = *(_QWORD *)(v31 + 16);
  }
  else
  {
    v18 = 3;
  }
  v19 = (uint64_t)*v5 + 41;
  v20 = (char *)(v19 + (*v5)[12]);
  v21 = (unint64_t)(*v5)[13] >> 4;
  v22 = (char *)(v19 + (*v5)[14]);
  v23 = (*v5)[15] / 0x18u;
  v24 = *((_DWORD *)v5 + 2);
  v25 = *((_BYTE *)v5 + 12);
  v26 = v5[4];
  v27 = v5[2];
  v28 = *((_BYTE *)v5 + 24);
  v29 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v17 + 32), v18, v20, v21, v22, v23);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a4 = v29;
  *(_DWORD *)(a4 + 8) = v24;
  *(_BYTE *)(a4 + 12) = v25;
  *(_WORD *)(a4 + 13) = v32;
  *(_BYTE *)(a4 + 15) = v33;
  *(_QWORD *)(a4 + 16) = v27;
  *(_BYTE *)(a4 + 24) = v28;
  *(_DWORD *)(a4 + 25) = v31;
  *(_DWORD *)(a4 + 28) = *(_DWORD *)((char *)&v31 + 3);
  *(_QWORD *)(a4 + 32) = v26;
  return result;
}

uint64_t sub_1B1A1522C@<X0>(char a1@<W0>, char a2@<W1>, char a3@<W2>, uint64_t (*a4)(_QWORD)@<X3>, uint64_t (*a5)(_QWORD)@<X4>, uint64_t a6@<X8>)
{
  uint64_t *v6;
  uint64_t *v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t inited;
  uint64_t v18;
  int64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char *v23;
  unint64_t v24;
  char *v25;
  uint64_t v26;
  int v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t result;
  uint64_t v36;
  __int16 v37;
  char v38;

  v8 = v6;
  v11 = a4(0);
  v12 = a5(0);
  v13 = *v8;
  v14 = *v8 + 41;
  v15 = *(unsigned __int16 *)(*v8 + 16);
  v16 = *(unsigned __int16 *)(*v8 + 18);
  sub_1B1A19B14();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226E100;
  *(_QWORD *)(inited + 32) = v11;
  *(_QWORD *)(inited + 40) = &off_1E637E188;
  *(_QWORD *)(inited + 48) = v12;
  *(_QWORD *)(inited + 56) = &off_1E639FC70;
  *(_QWORD *)(inited + 64) = &type metadata for AnimationTimeSource;
  *(_QWORD *)(inited + 72) = &off_1E63977B8;
  if (v16 > 0xF)
  {
    v36 = sub_1B1DC8944((char *)(v14 + v15), v16 >> 4);
    sub_1B19F4A48(inited);
    inited = v36;
  }
  v18 = *(unsigned __int16 *)(v13 + 20);
  v19 = *(unsigned __int16 *)(v13 + 22);
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v20 = swift_initStackObject();
  *(_OWORD *)(v20 + 16) = xmmword_1B226E100;
  *(_BYTE *)(v20 + 32) = a1;
  *(_BYTE *)(v20 + 33) = a2;
  *(_BYTE *)(v20 + 34) = a3;
  if (v19)
  {
    v36 = sub_1B1DC8810((char *)(v14 + v18), v19);
    sub_1B19F499C(v20);
    v20 = v36;
    v21 = *(_QWORD *)(v36 + 16);
  }
  else
  {
    v21 = 3;
  }
  v22 = *v8 + 41;
  v23 = (char *)(v22 + *(unsigned __int16 *)(*v8 + 24));
  v24 = (unint64_t)*(unsigned __int16 *)(*v8 + 26) >> 4;
  v25 = (char *)(v22 + *(unsigned __int16 *)(*v8 + 28));
  v26 = *(unsigned __int16 *)(*v8 + 30) / 0x18u;
  v27 = *((_DWORD *)v8 + 2);
  v28 = *((_BYTE *)v8 + 12);
  v29 = v8[4];
  v30 = v8[2];
  v31 = *((_BYTE *)v8 + 24);
  v32 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v20 + 32), v21, v23, v24, v25, v26);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a6 = v32;
  *(_DWORD *)(a6 + 8) = v27;
  *(_BYTE *)(a6 + 12) = v28;
  *(_WORD *)(a6 + 13) = v37;
  *(_BYTE *)(a6 + 15) = v38;
  *(_QWORD *)(a6 + 16) = v30;
  *(_BYTE *)(a6 + 24) = v31;
  *(_DWORD *)(a6 + 25) = v36;
  *(_DWORD *)(a6 + 28) = *(_DWORD *)((char *)&v36 + 3);
  *(_QWORD *)(a6 + 32) = v29;
  return result;
}

uint64_t sub_1B1A1546C@<X0>(char a1@<W0>, char a2@<W1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t inited;
  uint64_t v17;
  int64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char *v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  int v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t result;
  uint64_t v35;
  __int16 v36;
  char v37;

  v5 = v4;
  sub_1B1A1B4F8(0, (unint64_t *)&unk_1ED4B8980, (uint64_t (*)(_QWORD, _QWORD, _UNKNOWN **))type metadata accessor for BasicAnimation);
  v9 = v8;
  sub_1B1A1B4F8(0, &qword_1ED4B9728, (uint64_t (*)(_QWORD, _QWORD, _UNKNOWN **))type metadata accessor for BasicAnimationRuntime);
  v11 = v10;
  v12 = *v5;
  v13 = *v5 + 41;
  v14 = *(unsigned __int16 *)(*v5 + 16);
  v15 = *(unsigned __int16 *)(*v5 + 18);
  sub_1B1A19B14();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226E100;
  *(_QWORD *)(inited + 32) = v9;
  *(_QWORD *)(inited + 40) = &off_1E637E188;
  *(_QWORD *)(inited + 48) = v11;
  *(_QWORD *)(inited + 56) = &off_1E639FC70;
  *(_QWORD *)(inited + 64) = &type metadata for AnimationTimeSource;
  *(_QWORD *)(inited + 72) = &off_1E63977B8;
  if (v15 > 0xF)
  {
    v35 = sub_1B1DC8944((char *)(v13 + v14), v15 >> 4);
    sub_1B19F4A48(inited);
    inited = v35;
  }
  v17 = *(unsigned __int16 *)(v12 + 20);
  v18 = *(unsigned __int16 *)(v12 + 22);
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v19 = swift_initStackObject();
  *(_OWORD *)(v19 + 16) = xmmword_1B226E100;
  *(_BYTE *)(v19 + 32) = a1;
  *(_BYTE *)(v19 + 33) = a2;
  *(_BYTE *)(v19 + 34) = a3;
  if (v18)
  {
    v35 = sub_1B1DC8810((char *)(v13 + v17), v18);
    sub_1B19F499C(v19);
    v19 = v35;
    v20 = *(_QWORD *)(v35 + 16);
  }
  else
  {
    v20 = 3;
  }
  v21 = *v5 + 41;
  v22 = (char *)(v21 + *(unsigned __int16 *)(*v5 + 24));
  v23 = (unint64_t)*(unsigned __int16 *)(*v5 + 26) >> 4;
  v24 = (char *)(v21 + *(unsigned __int16 *)(*v5 + 28));
  v25 = *(unsigned __int16 *)(*v5 + 30) / 0x18u;
  v26 = *((_DWORD *)v5 + 2);
  v27 = *((_BYTE *)v5 + 12);
  v28 = v5[4];
  v29 = v5[2];
  v30 = *((_BYTE *)v5 + 24);
  v31 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v19 + 32), v20, v22, v23, v24, v25);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a4 = v31;
  *(_DWORD *)(a4 + 8) = v26;
  *(_BYTE *)(a4 + 12) = v27;
  *(_WORD *)(a4 + 13) = v36;
  *(_BYTE *)(a4 + 15) = v37;
  *(_QWORD *)(a4 + 16) = v29;
  *(_BYTE *)(a4 + 24) = v30;
  *(_DWORD *)(a4 + 25) = v35;
  *(_DWORD *)(a4 + 28) = *(_DWORD *)((char *)&v35 + 3);
  *(_QWORD *)(a4 + 32) = v28;
  return result;
}

uint64_t sub_1B1A156C8@<X0>(char a1@<W0>, char a2@<W1>, char a3@<W2>, uint64_t a4@<X8>)
{
  unsigned __int16 **v4;
  unsigned __int16 **v5;
  unsigned __int16 *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t inited;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  int v24;
  char v25;
  unsigned __int16 *v26;
  unsigned __int16 *v27;
  char v28;
  uint64_t v29;
  uint64_t result;
  uint64_t v31;
  __int16 v32;
  char v33;

  v5 = v4;
  v10 = *v4;
  v11 = (uint64_t)*v4 + 41;
  v12 = (*v4)[8];
  v13 = v10[9];
  sub_1B1A19B14();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226E100;
  *(_QWORD *)(inited + 32) = &type metadata for Position;
  *(_QWORD *)(inited + 40) = &off_1E63C2410;
  *(_QWORD *)(inited + 48) = &type metadata for Scale1;
  *(_QWORD *)(inited + 56) = &off_1E63BC300;
  *(_QWORD *)(inited + 64) = &type metadata for Velocity;
  *(_QWORD *)(inited + 72) = &off_1E63C3148;
  if (v13 > 0xF)
  {
    v31 = sub_1B1DC8944((char *)(v11 + v12), v13 >> 4);
    sub_1B19F4A48(inited);
    inited = v31;
  }
  v15 = v10[10];
  v16 = v10[11];
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v17 = swift_initStackObject();
  *(_OWORD *)(v17 + 16) = xmmword_1B226E100;
  *(_BYTE *)(v17 + 32) = a1;
  *(_BYTE *)(v17 + 33) = a2;
  *(_BYTE *)(v17 + 34) = a3;
  if (v16)
  {
    v31 = sub_1B1DC8810((char *)(v11 + v15), v16);
    sub_1B19F499C(v17);
    v17 = v31;
    v18 = *(_QWORD *)(v31 + 16);
  }
  else
  {
    v18 = 3;
  }
  v19 = (uint64_t)*v5 + 41;
  v20 = (char *)(v19 + (*v5)[12]);
  v21 = (unint64_t)(*v5)[13] >> 4;
  v22 = (char *)(v19 + (*v5)[14]);
  v23 = (*v5)[15] / 0x18u;
  v24 = *((_DWORD *)v5 + 2);
  v25 = *((_BYTE *)v5 + 12);
  v26 = v5[4];
  v27 = v5[2];
  v28 = *((_BYTE *)v5 + 24);
  v29 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v17 + 32), v18, v20, v21, v22, v23);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a4 = v29;
  *(_DWORD *)(a4 + 8) = v24;
  *(_BYTE *)(a4 + 12) = v25;
  *(_WORD *)(a4 + 13) = v32;
  *(_BYTE *)(a4 + 15) = v33;
  *(_QWORD *)(a4 + 16) = v27;
  *(_BYTE *)(a4 + 24) = v28;
  *(_DWORD *)(a4 + 25) = v31;
  *(_DWORD *)(a4 + 28) = *(_DWORD *)((char *)&v31 + 3);
  *(_QWORD *)(a4 + 32) = v26;
  return result;
}

uint64_t sub_1B1A158F8@<X0>(char a1@<W0>, char a2@<W1>, char a3@<W2>, uint64_t a4@<X8>)
{
  unsigned __int16 **v4;
  unsigned __int16 **v5;
  unsigned __int16 *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t inited;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  int v24;
  char v25;
  unsigned __int16 *v26;
  unsigned __int16 *v27;
  char v28;
  uint64_t v29;
  uint64_t result;
  uint64_t v31;
  __int16 v32;
  char v33;

  v5 = v4;
  v10 = *v4;
  v11 = (uint64_t)*v4 + 41;
  v12 = (*v4)[8];
  v13 = v10[9];
  sub_1B1A19B14();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226E100;
  *(_QWORD *)(inited + 32) = &type metadata for ProjectionMatrix;
  *(_QWORD *)(inited + 40) = &off_1E638A420;
  *(_QWORD *)(inited + 48) = &type metadata for PointOfCulling;
  *(_QWORD *)(inited + 56) = &off_1E6380438;
  *(_QWORD *)(inited + 64) = &type metadata for WorldTransform;
  *(_QWORD *)(inited + 72) = &off_1E6382C78;
  if (v13 > 0xF)
  {
    v31 = sub_1B1DC8944((char *)(v11 + v12), v13 >> 4);
    sub_1B19F4A48(inited);
    inited = v31;
  }
  v15 = v10[10];
  v16 = v10[11];
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v17 = swift_initStackObject();
  *(_OWORD *)(v17 + 16) = xmmword_1B226E100;
  *(_BYTE *)(v17 + 32) = a1;
  *(_BYTE *)(v17 + 33) = a2;
  *(_BYTE *)(v17 + 34) = a3;
  if (v16)
  {
    v31 = sub_1B1DC8810((char *)(v11 + v15), v16);
    sub_1B19F499C(v17);
    v17 = v31;
    v18 = *(_QWORD *)(v31 + 16);
  }
  else
  {
    v18 = 3;
  }
  v19 = (uint64_t)*v5 + 41;
  v20 = (char *)(v19 + (*v5)[12]);
  v21 = (unint64_t)(*v5)[13] >> 4;
  v22 = (char *)(v19 + (*v5)[14]);
  v23 = (*v5)[15] / 0x18u;
  v24 = *((_DWORD *)v5 + 2);
  v25 = *((_BYTE *)v5 + 12);
  v26 = v5[4];
  v27 = v5[2];
  v28 = *((_BYTE *)v5 + 24);
  v29 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v17 + 32), v18, v20, v21, v22, v23);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a4 = v29;
  *(_DWORD *)(a4 + 8) = v24;
  *(_BYTE *)(a4 + 12) = v25;
  *(_WORD *)(a4 + 13) = v32;
  *(_BYTE *)(a4 + 15) = v33;
  *(_QWORD *)(a4 + 16) = v27;
  *(_BYTE *)(a4 + 24) = v28;
  *(_DWORD *)(a4 + 25) = v31;
  *(_DWORD *)(a4 + 28) = *(_DWORD *)((char *)&v31 + 3);
  *(_QWORD *)(a4 + 32) = v26;
  return result;
}

uint64_t sub_1B1A15B28@<X0>(char a1@<W0>, char a2@<W1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t inited;
  uint64_t v17;
  int64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char *v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  int v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t result;
  uint64_t v36;
  __int16 v37;
  char v38;

  v5 = v4;
  v7 = type metadata accessor for TriggerScript(0);
  sub_1B1A1B6FC(0, &qword_1ED4BB250, type metadata accessor for TriggerScript, (uint64_t)&off_1ED4BEFD8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptRuntime);
  v9 = v8;
  sub_1B1A1B6FC(0, &qword_1ED4BB350, type metadata accessor for TriggerScript, (uint64_t)&off_1ED4BEFD8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptCompileAttempt);
  v11 = v10;
  v12 = *v5;
  v13 = *v5 + 41;
  v14 = *(unsigned __int16 *)(*v5 + 16);
  v15 = *(unsigned __int16 *)(*v5 + 18);
  sub_1B1A19B14();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226E100;
  *(_QWORD *)(inited + 32) = v7;
  *(_QWORD *)(inited + 40) = &off_1E637DAB0;
  *(_QWORD *)(inited + 48) = v9;
  *(_QWORD *)(inited + 56) = &off_1E637D0D8;
  *(_QWORD *)(inited + 64) = v11;
  *(_QWORD *)(inited + 72) = &off_1E639EBC8;
  if (v15 > 0xF)
  {
    v36 = sub_1B1DC8944((char *)(v13 + v14), v15 >> 4);
    sub_1B19F4A48(inited);
    inited = v36;
  }
  v17 = *(unsigned __int16 *)(v12 + 20);
  v18 = *(unsigned __int16 *)(v12 + 22);
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v19 = swift_initStackObject();
  *(_OWORD *)(v19 + 16) = xmmword_1B226E100;
  *(_BYTE *)(v19 + 32) = a1;
  *(_BYTE *)(v19 + 33) = a2;
  *(_BYTE *)(v19 + 34) = a3;
  if (v18)
  {
    v36 = sub_1B1DC8810((char *)(v13 + v17), v18);
    sub_1B19F499C(v19);
    v19 = v36;
    v20 = *(_QWORD *)(v36 + 16);
  }
  else
  {
    v20 = 3;
  }
  v21 = *v5 + 41;
  v22 = (char *)(v21 + *(unsigned __int16 *)(*v5 + 24));
  v23 = (unint64_t)*(unsigned __int16 *)(*v5 + 26) >> 4;
  v24 = (char *)(v21 + *(unsigned __int16 *)(*v5 + 28));
  v25 = *(unsigned __int16 *)(*v5 + 30) / 0x18u;
  v26 = *((_DWORD *)v5 + 2);
  v27 = *((_BYTE *)v5 + 12);
  v28 = v5[4];
  v29 = v5[2];
  v30 = *((_BYTE *)v5 + 24);
  v31 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v19 + 32), v20, v22, v23, v24, v25);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a4 = v31;
  *(_DWORD *)(a4 + 8) = v26;
  *(_BYTE *)(a4 + 12) = v27;
  *(_WORD *)(a4 + 13) = v37;
  *(_BYTE *)(a4 + 15) = v38;
  *(_QWORD *)(a4 + 16) = v29;
  *(_BYTE *)(a4 + 24) = v30;
  *(_DWORD *)(a4 + 25) = v36;
  *(_DWORD *)(a4 + 28) = *(_DWORD *)((char *)&v36 + 3);
  *(_QWORD *)(a4 + 32) = v28;
  return result;
}

uint64_t sub_1B1A15DAC@<X0>(char a1@<W0>, char a2@<W1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t updated;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t inited;
  uint64_t v17;
  int64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char *v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  int v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t result;
  uint64_t v36;
  __int16 v37;
  char v38;

  v5 = v4;
  updated = type metadata accessor for ParticleUpdateScript(0);
  sub_1B1A1B6FC(0, &qword_1ED4B88A0, type metadata accessor for ParticleUpdateScript, (uint64_t)&off_1ED4BD280, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptRuntime);
  v9 = v8;
  sub_1B1A1B6FC(0, &qword_1ED4B9640, type metadata accessor for ParticleUpdateScript, (uint64_t)&off_1ED4BD280, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptCompileAttempt);
  v11 = v10;
  v12 = *v5;
  v13 = *v5 + 41;
  v14 = *(unsigned __int16 *)(*v5 + 16);
  v15 = *(unsigned __int16 *)(*v5 + 18);
  sub_1B1A19B14();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226E100;
  *(_QWORD *)(inited + 32) = updated;
  *(_QWORD *)(inited + 40) = &off_1E639E500;
  *(_QWORD *)(inited + 48) = v9;
  *(_QWORD *)(inited + 56) = &off_1E637D0D8;
  *(_QWORD *)(inited + 64) = v11;
  *(_QWORD *)(inited + 72) = &off_1E639EBC8;
  if (v15 > 0xF)
  {
    v36 = sub_1B1DC8944((char *)(v13 + v14), v15 >> 4);
    sub_1B19F4A48(inited);
    inited = v36;
  }
  v17 = *(unsigned __int16 *)(v12 + 20);
  v18 = *(unsigned __int16 *)(v12 + 22);
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v19 = swift_initStackObject();
  *(_OWORD *)(v19 + 16) = xmmword_1B226E100;
  *(_BYTE *)(v19 + 32) = a1;
  *(_BYTE *)(v19 + 33) = a2;
  *(_BYTE *)(v19 + 34) = a3;
  if (v18)
  {
    v36 = sub_1B1DC8810((char *)(v13 + v17), v18);
    sub_1B19F499C(v19);
    v19 = v36;
    v20 = *(_QWORD *)(v36 + 16);
  }
  else
  {
    v20 = 3;
  }
  v21 = *v5 + 41;
  v22 = (char *)(v21 + *(unsigned __int16 *)(*v5 + 24));
  v23 = (unint64_t)*(unsigned __int16 *)(*v5 + 26) >> 4;
  v24 = (char *)(v21 + *(unsigned __int16 *)(*v5 + 28));
  v25 = *(unsigned __int16 *)(*v5 + 30) / 0x18u;
  v26 = *((_DWORD *)v5 + 2);
  v27 = *((_BYTE *)v5 + 12);
  v28 = v5[4];
  v29 = v5[2];
  v30 = *((_BYTE *)v5 + 24);
  v31 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v19 + 32), v20, v22, v23, v24, v25);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a4 = v31;
  *(_DWORD *)(a4 + 8) = v26;
  *(_BYTE *)(a4 + 12) = v27;
  *(_WORD *)(a4 + 13) = v37;
  *(_BYTE *)(a4 + 15) = v38;
  *(_QWORD *)(a4 + 16) = v29;
  *(_BYTE *)(a4 + 24) = v30;
  *(_DWORD *)(a4 + 25) = v36;
  *(_DWORD *)(a4 + 28) = *(_DWORD *)((char *)&v36 + 3);
  *(_QWORD *)(a4 + 32) = v28;
  return result;
}

uint64_t sub_1B1A16030@<X0>(char a1@<W0>, char a2@<W1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t inited;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char *v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  int v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t result;
  uint64_t v36;
  __int16 v37;
  char v38;

  v5 = v4;
  inited = type metadata accessor for ParticleInitScript(0);
  sub_1B1A1B6FC(0, &qword_1ED4B8890, type metadata accessor for ParticleInitScript, (uint64_t)&off_1ED4BCD90, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptRuntime);
  v9 = v8;
  sub_1B1A1B6FC(0, (unint64_t *)&unk_1ED4B9630, type metadata accessor for ParticleInitScript, (uint64_t)&off_1ED4BCD90, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptCompileAttempt);
  v11 = v10;
  v12 = *v5;
  v13 = *v5 + 41;
  v14 = *(unsigned __int16 *)(*v5 + 16);
  v15 = *(unsigned __int16 *)(*v5 + 18);
  sub_1B1A19B14();
  v16 = swift_initStackObject();
  *(_OWORD *)(v16 + 16) = xmmword_1B226E100;
  *(_QWORD *)(v16 + 32) = inited;
  *(_QWORD *)(v16 + 40) = &off_1E6394BF0;
  *(_QWORD *)(v16 + 48) = v9;
  *(_QWORD *)(v16 + 56) = &off_1E637D0D8;
  *(_QWORD *)(v16 + 64) = v11;
  *(_QWORD *)(v16 + 72) = &off_1E639EBC8;
  if (v15 > 0xF)
  {
    v36 = sub_1B1DC8944((char *)(v13 + v14), v15 >> 4);
    sub_1B19F4A48(v16);
    v16 = v36;
  }
  v17 = *(unsigned __int16 *)(v12 + 20);
  v18 = *(unsigned __int16 *)(v12 + 22);
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v19 = swift_initStackObject();
  *(_OWORD *)(v19 + 16) = xmmword_1B226E100;
  *(_BYTE *)(v19 + 32) = a1;
  *(_BYTE *)(v19 + 33) = a2;
  *(_BYTE *)(v19 + 34) = a3;
  if (v18)
  {
    v36 = sub_1B1DC8810((char *)(v13 + v17), v18);
    sub_1B19F499C(v19);
    v19 = v36;
    v20 = *(_QWORD *)(v36 + 16);
  }
  else
  {
    v20 = 3;
  }
  v21 = *v5 + 41;
  v22 = (char *)(v21 + *(unsigned __int16 *)(*v5 + 24));
  v23 = (unint64_t)*(unsigned __int16 *)(*v5 + 26) >> 4;
  v24 = (char *)(v21 + *(unsigned __int16 *)(*v5 + 28));
  v25 = *(unsigned __int16 *)(*v5 + 30) / 0x18u;
  v26 = *((_DWORD *)v5 + 2);
  v27 = *((_BYTE *)v5 + 12);
  v28 = v5[4];
  v29 = v5[2];
  v30 = *((_BYTE *)v5 + 24);
  v31 = sub_1B1CC8DA4((char *)(v16 + 32), *(_QWORD *)(v16 + 16), (char *)(v19 + 32), v20, v22, v23, v24, v25);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a4 = v31;
  *(_DWORD *)(a4 + 8) = v26;
  *(_BYTE *)(a4 + 12) = v27;
  *(_WORD *)(a4 + 13) = v37;
  *(_BYTE *)(a4 + 15) = v38;
  *(_QWORD *)(a4 + 16) = v29;
  *(_BYTE *)(a4 + 24) = v30;
  *(_DWORD *)(a4 + 25) = v36;
  *(_DWORD *)(a4 + 28) = *(_DWORD *)((char *)&v36 + 3);
  *(_QWORD *)(a4 + 32) = v28;
  return result;
}

uint64_t sub_1B1A162B4@<X0>(char a1@<W0>, char a2@<W1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t inited;
  uint64_t v17;
  int64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char *v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  int v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t result;
  uint64_t v36;
  __int16 v37;
  char v38;

  v5 = v4;
  v7 = type metadata accessor for EmitterScript(0);
  sub_1B1A1B6FC(0, (unint64_t *)&unk_1ED4B88E0, type metadata accessor for EmitterScript, (uint64_t)&off_1ED4BC418, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptRuntime);
  v9 = v8;
  sub_1B1A1B6FC(0, &qword_1ED4B9670, type metadata accessor for EmitterScript, (uint64_t)&off_1ED4BC418, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptCompileAttempt);
  v11 = v10;
  v12 = *v5;
  v13 = *v5 + 41;
  v14 = *(unsigned __int16 *)(*v5 + 16);
  v15 = *(unsigned __int16 *)(*v5 + 18);
  sub_1B1A19B14();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226E100;
  *(_QWORD *)(inited + 32) = v7;
  *(_QWORD *)(inited + 40) = &off_1E637A168;
  *(_QWORD *)(inited + 48) = v9;
  *(_QWORD *)(inited + 56) = &off_1E637D0D8;
  *(_QWORD *)(inited + 64) = v11;
  *(_QWORD *)(inited + 72) = &off_1E639EBC8;
  if (v15 > 0xF)
  {
    v36 = sub_1B1DC8944((char *)(v13 + v14), v15 >> 4);
    sub_1B19F4A48(inited);
    inited = v36;
  }
  v17 = *(unsigned __int16 *)(v12 + 20);
  v18 = *(unsigned __int16 *)(v12 + 22);
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v19 = swift_initStackObject();
  *(_OWORD *)(v19 + 16) = xmmword_1B226E100;
  *(_BYTE *)(v19 + 32) = a1;
  *(_BYTE *)(v19 + 33) = a2;
  *(_BYTE *)(v19 + 34) = a3;
  if (v18)
  {
    v36 = sub_1B1DC8810((char *)(v13 + v17), v18);
    sub_1B19F499C(v19);
    v19 = v36;
    v20 = *(_QWORD *)(v36 + 16);
  }
  else
  {
    v20 = 3;
  }
  v21 = *v5 + 41;
  v22 = (char *)(v21 + *(unsigned __int16 *)(*v5 + 24));
  v23 = (unint64_t)*(unsigned __int16 *)(*v5 + 26) >> 4;
  v24 = (char *)(v21 + *(unsigned __int16 *)(*v5 + 28));
  v25 = *(unsigned __int16 *)(*v5 + 30) / 0x18u;
  v26 = *((_DWORD *)v5 + 2);
  v27 = *((_BYTE *)v5 + 12);
  v28 = v5[4];
  v29 = v5[2];
  v30 = *((_BYTE *)v5 + 24);
  v31 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v19 + 32), v20, v22, v23, v24, v25);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a4 = v31;
  *(_DWORD *)(a4 + 8) = v26;
  *(_BYTE *)(a4 + 12) = v27;
  *(_WORD *)(a4 + 13) = v37;
  *(_BYTE *)(a4 + 15) = v38;
  *(_QWORD *)(a4 + 16) = v29;
  *(_BYTE *)(a4 + 24) = v30;
  *(_DWORD *)(a4 + 25) = v36;
  *(_DWORD *)(a4 + 28) = *(_DWORD *)((char *)&v36 + 3);
  *(_QWORD *)(a4 + 32) = v28;
  return result;
}

uint64_t sub_1B1A16538@<X0>(char a1@<W0>, char a2@<W1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t inited;
  uint64_t v17;
  int64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char *v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  int v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t result;
  uint64_t v36;
  __int16 v37;
  char v38;

  v5 = v4;
  v7 = type metadata accessor for ShaderScript(0);
  sub_1B1A1B6FC(0, (unint64_t *)&qword_1ED4B88C0, type metadata accessor for ShaderScript, (uint64_t)&off_1ED4BC090, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptRuntime);
  v9 = v8;
  sub_1B1A1B6FC(0, (unint64_t *)&unk_1ED4B9650, type metadata accessor for ShaderScript, (uint64_t)&off_1ED4BC090, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptCompileAttempt);
  v11 = v10;
  v12 = *v5;
  v13 = *v5 + 41;
  v14 = *(unsigned __int16 *)(*v5 + 16);
  v15 = *(unsigned __int16 *)(*v5 + 18);
  sub_1B1A19B14();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226E100;
  *(_QWORD *)(inited + 32) = v7;
  *(_QWORD *)(inited + 40) = &off_1E6377528;
  *(_QWORD *)(inited + 48) = v9;
  *(_QWORD *)(inited + 56) = &off_1E637D0D8;
  *(_QWORD *)(inited + 64) = v11;
  *(_QWORD *)(inited + 72) = &off_1E639EBC8;
  if (v15 > 0xF)
  {
    v36 = sub_1B1DC8944((char *)(v13 + v14), v15 >> 4);
    sub_1B19F4A48(inited);
    inited = v36;
  }
  v17 = *(unsigned __int16 *)(v12 + 20);
  v18 = *(unsigned __int16 *)(v12 + 22);
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v19 = swift_initStackObject();
  *(_OWORD *)(v19 + 16) = xmmword_1B226E100;
  *(_BYTE *)(v19 + 32) = a1;
  *(_BYTE *)(v19 + 33) = a2;
  *(_BYTE *)(v19 + 34) = a3;
  if (v18)
  {
    v36 = sub_1B1DC8810((char *)(v13 + v17), v18);
    sub_1B19F499C(v19);
    v19 = v36;
    v20 = *(_QWORD *)(v36 + 16);
  }
  else
  {
    v20 = 3;
  }
  v21 = *v5 + 41;
  v22 = (char *)(v21 + *(unsigned __int16 *)(*v5 + 24));
  v23 = (unint64_t)*(unsigned __int16 *)(*v5 + 26) >> 4;
  v24 = (char *)(v21 + *(unsigned __int16 *)(*v5 + 28));
  v25 = *(unsigned __int16 *)(*v5 + 30) / 0x18u;
  v26 = *((_DWORD *)v5 + 2);
  v27 = *((_BYTE *)v5 + 12);
  v28 = v5[4];
  v29 = v5[2];
  v30 = *((_BYTE *)v5 + 24);
  v31 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v19 + 32), v20, v22, v23, v24, v25);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a4 = v31;
  *(_DWORD *)(a4 + 8) = v26;
  *(_BYTE *)(a4 + 12) = v27;
  *(_WORD *)(a4 + 13) = v37;
  *(_BYTE *)(a4 + 15) = v38;
  *(_QWORD *)(a4 + 16) = v29;
  *(_BYTE *)(a4 + 24) = v30;
  *(_DWORD *)(a4 + 25) = v36;
  *(_DWORD *)(a4 + 28) = *(_DWORD *)((char *)&v36 + 3);
  *(_QWORD *)(a4 + 32) = v28;
  return result;
}

uint64_t sub_1B1A167BC@<X0>(char a1@<W0>, char a2@<W1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t inited;
  uint64_t v17;
  int64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char *v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  int v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t result;
  uint64_t v36;
  __int16 v37;
  char v38;

  v5 = v4;
  v7 = type metadata accessor for MetalFunctionScript(0);
  sub_1B1A1B6FC(0, (unint64_t *)&qword_1ED4BB240, type metadata accessor for MetalFunctionScript, (uint64_t)&off_1ED4BF0F8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptRuntime);
  v9 = v8;
  sub_1B1A1B6FC(0, (unint64_t *)&unk_1ED4BB270, type metadata accessor for MetalFunctionScript, (uint64_t)&off_1ED4BF0F8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptCompileAttempt);
  v11 = v10;
  v12 = *v5;
  v13 = *v5 + 41;
  v14 = *(unsigned __int16 *)(*v5 + 16);
  v15 = *(unsigned __int16 *)(*v5 + 18);
  sub_1B1A19B14();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226E100;
  *(_QWORD *)(inited + 32) = v7;
  *(_QWORD *)(inited + 40) = &off_1E6398318;
  *(_QWORD *)(inited + 48) = v9;
  *(_QWORD *)(inited + 56) = &off_1E637D0D8;
  *(_QWORD *)(inited + 64) = v11;
  *(_QWORD *)(inited + 72) = &off_1E639EBC8;
  if (v15 > 0xF)
  {
    v36 = sub_1B1DC8944((char *)(v13 + v14), v15 >> 4);
    sub_1B19F4A48(inited);
    inited = v36;
  }
  v17 = *(unsigned __int16 *)(v12 + 20);
  v18 = *(unsigned __int16 *)(v12 + 22);
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v19 = swift_initStackObject();
  *(_OWORD *)(v19 + 16) = xmmword_1B226E100;
  *(_BYTE *)(v19 + 32) = a1;
  *(_BYTE *)(v19 + 33) = a2;
  *(_BYTE *)(v19 + 34) = a3;
  if (v18)
  {
    v36 = sub_1B1DC8810((char *)(v13 + v17), v18);
    sub_1B19F499C(v19);
    v19 = v36;
    v20 = *(_QWORD *)(v36 + 16);
  }
  else
  {
    v20 = 3;
  }
  v21 = *v5 + 41;
  v22 = (char *)(v21 + *(unsigned __int16 *)(*v5 + 24));
  v23 = (unint64_t)*(unsigned __int16 *)(*v5 + 26) >> 4;
  v24 = (char *)(v21 + *(unsigned __int16 *)(*v5 + 28));
  v25 = *(unsigned __int16 *)(*v5 + 30) / 0x18u;
  v26 = *((_DWORD *)v5 + 2);
  v27 = *((_BYTE *)v5 + 12);
  v28 = v5[4];
  v29 = v5[2];
  v30 = *((_BYTE *)v5 + 24);
  v31 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v19 + 32), v20, v22, v23, v24, v25);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a4 = v31;
  *(_DWORD *)(a4 + 8) = v26;
  *(_BYTE *)(a4 + 12) = v27;
  *(_WORD *)(a4 + 13) = v37;
  *(_BYTE *)(a4 + 15) = v38;
  *(_QWORD *)(a4 + 16) = v29;
  *(_BYTE *)(a4 + 24) = v30;
  *(_DWORD *)(a4 + 25) = v36;
  *(_DWORD *)(a4 + 28) = *(_DWORD *)((char *)&v36 + 3);
  *(_QWORD *)(a4 + 32) = v28;
  return result;
}

uint64_t sub_1B1A16A40@<X0>(char a1@<W0>, char a2@<W1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t inited;
  uint64_t v17;
  int64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char *v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  int v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t result;
  uint64_t v36;
  __int16 v37;
  char v38;

  v5 = v4;
  v7 = type metadata accessor for SimpleScript(0);
  sub_1B1A1B6FC(0, (unint64_t *)&unk_1ED4B88D0, type metadata accessor for SimpleScript, (uint64_t)&off_1ED4BC1D8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptRuntime);
  v9 = v8;
  sub_1B1A1B6FC(0, (unint64_t *)&unk_1ED4B9660, type metadata accessor for SimpleScript, (uint64_t)&off_1ED4BC1D8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptCompileAttempt);
  v11 = v10;
  v12 = *v5;
  v13 = *v5 + 41;
  v14 = *(unsigned __int16 *)(*v5 + 16);
  v15 = *(unsigned __int16 *)(*v5 + 18);
  sub_1B1A19B14();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226E100;
  *(_QWORD *)(inited + 32) = v7;
  *(_QWORD *)(inited + 40) = &off_1E63777E8;
  *(_QWORD *)(inited + 48) = v9;
  *(_QWORD *)(inited + 56) = &off_1E637D0D8;
  *(_QWORD *)(inited + 64) = v11;
  *(_QWORD *)(inited + 72) = &off_1E639EBC8;
  if (v15 > 0xF)
  {
    v36 = sub_1B1DC8944((char *)(v13 + v14), v15 >> 4);
    sub_1B19F4A48(inited);
    inited = v36;
  }
  v17 = *(unsigned __int16 *)(v12 + 20);
  v18 = *(unsigned __int16 *)(v12 + 22);
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v19 = swift_initStackObject();
  *(_OWORD *)(v19 + 16) = xmmword_1B226E100;
  *(_BYTE *)(v19 + 32) = a1;
  *(_BYTE *)(v19 + 33) = a2;
  *(_BYTE *)(v19 + 34) = a3;
  if (v18)
  {
    v36 = sub_1B1DC8810((char *)(v13 + v17), v18);
    sub_1B19F499C(v19);
    v19 = v36;
    v20 = *(_QWORD *)(v36 + 16);
  }
  else
  {
    v20 = 3;
  }
  v21 = *v5 + 41;
  v22 = (char *)(v21 + *(unsigned __int16 *)(*v5 + 24));
  v23 = (unint64_t)*(unsigned __int16 *)(*v5 + 26) >> 4;
  v24 = (char *)(v21 + *(unsigned __int16 *)(*v5 + 28));
  v25 = *(unsigned __int16 *)(*v5 + 30) / 0x18u;
  v26 = *((_DWORD *)v5 + 2);
  v27 = *((_BYTE *)v5 + 12);
  v28 = v5[4];
  v29 = v5[2];
  v30 = *((_BYTE *)v5 + 24);
  v31 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v19 + 32), v20, v22, v23, v24, v25);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a4 = v31;
  *(_DWORD *)(a4 + 8) = v26;
  *(_BYTE *)(a4 + 12) = v27;
  *(_WORD *)(a4 + 13) = v37;
  *(_BYTE *)(a4 + 15) = v38;
  *(_QWORD *)(a4 + 16) = v29;
  *(_BYTE *)(a4 + 24) = v30;
  *(_DWORD *)(a4 + 25) = v36;
  *(_DWORD *)(a4 + 28) = *(_DWORD *)((char *)&v36 + 3);
  *(_QWORD *)(a4 + 32) = v28;
  return result;
}

uint64_t sub_1B1A16CC4@<X0>(char a1@<W0>, char a2@<W1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t inited;
  uint64_t v17;
  int64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char *v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  int v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t result;
  uint64_t v36;
  __int16 v37;
  char v38;

  v5 = v4;
  v7 = type metadata accessor for GraphScript(0);
  sub_1B1A1B6FC(0, (unint64_t *)&unk_1ED4B88B0, type metadata accessor for GraphScript, (uint64_t)&off_1ED4BBD80, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptRuntime);
  v9 = v8;
  sub_1B1A1B6FC(0, &qword_1ED4B9648, type metadata accessor for GraphScript, (uint64_t)&off_1ED4BBD80, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptCompileAttempt);
  v11 = v10;
  v12 = *v5;
  v13 = *v5 + 41;
  v14 = *(unsigned __int16 *)(*v5 + 16);
  v15 = *(unsigned __int16 *)(*v5 + 18);
  sub_1B1A19B14();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226E100;
  *(_QWORD *)(inited + 32) = v7;
  *(_QWORD *)(inited + 40) = &off_1E6370B28;
  *(_QWORD *)(inited + 48) = v9;
  *(_QWORD *)(inited + 56) = &off_1E637D0D8;
  *(_QWORD *)(inited + 64) = v11;
  *(_QWORD *)(inited + 72) = &off_1E639EBC8;
  if (v15 > 0xF)
  {
    v36 = sub_1B1DC8944((char *)(v13 + v14), v15 >> 4);
    sub_1B19F4A48(inited);
    inited = v36;
  }
  v17 = *(unsigned __int16 *)(v12 + 20);
  v18 = *(unsigned __int16 *)(v12 + 22);
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v19 = swift_initStackObject();
  *(_OWORD *)(v19 + 16) = xmmword_1B226E100;
  *(_BYTE *)(v19 + 32) = a1;
  *(_BYTE *)(v19 + 33) = a2;
  *(_BYTE *)(v19 + 34) = a3;
  if (v18)
  {
    v36 = sub_1B1DC8810((char *)(v13 + v17), v18);
    sub_1B19F499C(v19);
    v19 = v36;
    v20 = *(_QWORD *)(v36 + 16);
  }
  else
  {
    v20 = 3;
  }
  v21 = *v5 + 41;
  v22 = (char *)(v21 + *(unsigned __int16 *)(*v5 + 24));
  v23 = (unint64_t)*(unsigned __int16 *)(*v5 + 26) >> 4;
  v24 = (char *)(v21 + *(unsigned __int16 *)(*v5 + 28));
  v25 = *(unsigned __int16 *)(*v5 + 30) / 0x18u;
  v26 = *((_DWORD *)v5 + 2);
  v27 = *((_BYTE *)v5 + 12);
  v28 = v5[4];
  v29 = v5[2];
  v30 = *((_BYTE *)v5 + 24);
  v31 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v19 + 32), v20, v22, v23, v24, v25);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a4 = v31;
  *(_DWORD *)(a4 + 8) = v26;
  *(_BYTE *)(a4 + 12) = v27;
  *(_WORD *)(a4 + 13) = v37;
  *(_BYTE *)(a4 + 15) = v38;
  *(_QWORD *)(a4 + 16) = v29;
  *(_BYTE *)(a4 + 24) = v30;
  *(_DWORD *)(a4 + 25) = v36;
  *(_DWORD *)(a4 + 28) = *(_DWORD *)((char *)&v36 + 3);
  *(_QWORD *)(a4 + 32) = v28;
  return result;
}

uint64_t sub_1B1A16F48@<X0>(char a1@<W0>, char a2@<W1>, char a3@<W2>, uint64_t a4@<X8>)
{
  unsigned __int16 **v4;
  unsigned __int16 **v5;
  unsigned __int16 *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t inited;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  int v24;
  char v25;
  unsigned __int16 *v26;
  unsigned __int16 *v27;
  char v28;
  uint64_t v29;
  uint64_t result;
  uint64_t v31;
  __int16 v32;
  char v33;

  v5 = v4;
  v10 = *v4;
  v11 = (uint64_t)*v4 + 41;
  v12 = (*v4)[8];
  v13 = v10[9];
  sub_1B1A19B14();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226E100;
  *(_QWORD *)(inited + 32) = &type metadata for ParticleSphereCollider;
  *(_QWORD *)(inited + 40) = &off_1E63A8E48;
  *(_QWORD *)(inited + 48) = &type metadata for WorldTransform;
  *(_QWORD *)(inited + 56) = &off_1E6382C78;
  *(_QWORD *)(inited + 64) = &type metadata for LastFrameWorldTransform;
  *(_QWORD *)(inited + 72) = &off_1E63AA9D8;
  if (v13 > 0xF)
  {
    v31 = sub_1B1DC8944((char *)(v11 + v12), v13 >> 4);
    sub_1B19F4A48(inited);
    inited = v31;
  }
  v15 = v10[10];
  v16 = v10[11];
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v17 = swift_initStackObject();
  *(_OWORD *)(v17 + 16) = xmmword_1B226E100;
  *(_BYTE *)(v17 + 32) = a1;
  *(_BYTE *)(v17 + 33) = a2;
  *(_BYTE *)(v17 + 34) = a3;
  if (v16)
  {
    v31 = sub_1B1DC8810((char *)(v11 + v15), v16);
    sub_1B19F499C(v17);
    v17 = v31;
    v18 = *(_QWORD *)(v31 + 16);
  }
  else
  {
    v18 = 3;
  }
  v19 = (uint64_t)*v5 + 41;
  v20 = (char *)(v19 + (*v5)[12]);
  v21 = (unint64_t)(*v5)[13] >> 4;
  v22 = (char *)(v19 + (*v5)[14]);
  v23 = (*v5)[15] / 0x18u;
  v24 = *((_DWORD *)v5 + 2);
  v25 = *((_BYTE *)v5 + 12);
  v26 = v5[4];
  v27 = v5[2];
  v28 = *((_BYTE *)v5 + 24);
  v29 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v17 + 32), v18, v20, v21, v22, v23);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a4 = v29;
  *(_DWORD *)(a4 + 8) = v24;
  *(_BYTE *)(a4 + 12) = v25;
  *(_WORD *)(a4 + 13) = v32;
  *(_BYTE *)(a4 + 15) = v33;
  *(_QWORD *)(a4 + 16) = v27;
  *(_BYTE *)(a4 + 24) = v28;
  *(_DWORD *)(a4 + 25) = v31;
  *(_DWORD *)(a4 + 28) = *(_DWORD *)((char *)&v31 + 3);
  *(_QWORD *)(a4 + 32) = v26;
  return result;
}

uint64_t sub_1B1A17178@<X0>(char a1@<W0>, char a2@<W1>, char a3@<W2>, uint64_t a4@<X8>)
{
  unsigned __int16 **v4;
  unsigned __int16 **v5;
  unsigned __int16 *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t inited;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  int v24;
  char v25;
  unsigned __int16 *v26;
  unsigned __int16 *v27;
  char v28;
  uint64_t v29;
  uint64_t result;
  uint64_t v31;
  __int16 v32;
  char v33;

  v5 = v4;
  v10 = *v4;
  v11 = (uint64_t)*v4 + 41;
  v12 = (*v4)[8];
  v13 = v10[9];
  sub_1B1A19B14();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226E100;
  *(_QWORD *)(inited + 32) = &type metadata for Velocity;
  *(_QWORD *)(inited + 40) = &off_1E63C3148;
  *(_QWORD *)(inited + 48) = &type metadata for Position;
  *(_QWORD *)(inited + 56) = &off_1E63C2410;
  *(_QWORD *)(inited + 64) = &type metadata for ParticleTarget;
  *(_QWORD *)(inited + 72) = &off_1E6380340;
  if (v13 > 0xF)
  {
    v31 = sub_1B1DC8944((char *)(v11 + v12), v13 >> 4);
    sub_1B19F4A48(inited);
    inited = v31;
  }
  v15 = v10[10];
  v16 = v10[11];
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v17 = swift_initStackObject();
  *(_OWORD *)(v17 + 16) = xmmword_1B226E100;
  *(_BYTE *)(v17 + 32) = a1;
  *(_BYTE *)(v17 + 33) = a2;
  *(_BYTE *)(v17 + 34) = a3;
  if (v16)
  {
    v31 = sub_1B1DC8810((char *)(v11 + v15), v16);
    sub_1B19F499C(v17);
    v17 = v31;
    v18 = *(_QWORD *)(v31 + 16);
  }
  else
  {
    v18 = 3;
  }
  v19 = (uint64_t)*v5 + 41;
  v20 = (char *)(v19 + (*v5)[12]);
  v21 = (unint64_t)(*v5)[13] >> 4;
  v22 = (char *)(v19 + (*v5)[14]);
  v23 = (*v5)[15] / 0x18u;
  v24 = *((_DWORD *)v5 + 2);
  v25 = *((_BYTE *)v5 + 12);
  v26 = v5[4];
  v27 = v5[2];
  v28 = *((_BYTE *)v5 + 24);
  v29 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v17 + 32), v18, v20, v21, v22, v23);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a4 = v29;
  *(_DWORD *)(a4 + 8) = v24;
  *(_BYTE *)(a4 + 12) = v25;
  *(_WORD *)(a4 + 13) = v32;
  *(_BYTE *)(a4 + 15) = v33;
  *(_QWORD *)(a4 + 16) = v27;
  *(_BYTE *)(a4 + 24) = v28;
  *(_DWORD *)(a4 + 25) = v31;
  *(_DWORD *)(a4 + 28) = *(_DWORD *)((char *)&v31 + 3);
  *(_QWORD *)(a4 + 32) = v26;
  return result;
}

uint64_t sub_1B1A173A8@<X0>(char a1@<W0>, char a2@<W1>, char a3@<W2>, uint64_t a4@<X8>)
{
  unsigned __int16 **v4;
  unsigned __int16 **v5;
  unsigned __int16 *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t inited;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  int v24;
  char v25;
  unsigned __int16 *v26;
  unsigned __int16 *v27;
  char v28;
  uint64_t v29;
  uint64_t result;
  uint64_t v31;
  __int16 v32;
  char v33;

  v5 = v4;
  v10 = *v4;
  v11 = (uint64_t)*v4 + 41;
  v12 = (*v4)[8];
  v13 = v10[9];
  sub_1B1A19B14();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226E100;
  *(_QWORD *)(inited + 32) = &type metadata for DrawCallComponent;
  *(_QWORD *)(inited + 40) = &off_1E638BED8;
  *(_QWORD *)(inited + 48) = &type metadata for WorldAABB;
  *(_QWORD *)(inited + 56) = &off_1E63C6040;
  *(_QWORD *)(inited + 64) = &type metadata for VFXDrawCallHandler;
  *(_QWORD *)(inited + 72) = &off_1E63969E0;
  if (v13 > 0xF)
  {
    v31 = sub_1B1DC8944((char *)(v11 + v12), v13 >> 4);
    sub_1B19F4A48(inited);
    inited = v31;
  }
  v15 = v10[10];
  v16 = v10[11];
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v17 = swift_initStackObject();
  *(_OWORD *)(v17 + 16) = xmmword_1B226E100;
  *(_BYTE *)(v17 + 32) = a1;
  *(_BYTE *)(v17 + 33) = a2;
  *(_BYTE *)(v17 + 34) = a3;
  if (v16)
  {
    v31 = sub_1B1DC8810((char *)(v11 + v15), v16);
    sub_1B19F499C(v17);
    v17 = v31;
    v18 = *(_QWORD *)(v31 + 16);
  }
  else
  {
    v18 = 3;
  }
  v19 = (uint64_t)*v5 + 41;
  v20 = (char *)(v19 + (*v5)[12]);
  v21 = (unint64_t)(*v5)[13] >> 4;
  v22 = (char *)(v19 + (*v5)[14]);
  v23 = (*v5)[15] / 0x18u;
  v24 = *((_DWORD *)v5 + 2);
  v25 = *((_BYTE *)v5 + 12);
  v26 = v5[4];
  v27 = v5[2];
  v28 = *((_BYTE *)v5 + 24);
  v29 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v17 + 32), v18, v20, v21, v22, v23);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a4 = v29;
  *(_DWORD *)(a4 + 8) = v24;
  *(_BYTE *)(a4 + 12) = v25;
  *(_WORD *)(a4 + 13) = v32;
  *(_BYTE *)(a4 + 15) = v33;
  *(_QWORD *)(a4 + 16) = v27;
  *(_BYTE *)(a4 + 24) = v28;
  *(_DWORD *)(a4 + 25) = v31;
  *(_DWORD *)(a4 + 28) = *(_DWORD *)((char *)&v31 + 3);
  *(_QWORD *)(a4 + 32) = v26;
  return result;
}

uint64_t sub_1B1A175D8@<X0>(char a1@<W0>, char a2@<W1>, char a3@<W2>, uint64_t a4@<X8>)
{
  unsigned __int16 **v4;
  unsigned __int16 **v5;
  unsigned __int16 *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t inited;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  int v24;
  char v25;
  unsigned __int16 *v26;
  unsigned __int16 *v27;
  char v28;
  uint64_t v29;
  uint64_t result;
  uint64_t v31;
  __int16 v32;
  char v33;

  v5 = v4;
  v10 = *v4;
  v11 = (uint64_t)*v4 + 41;
  v12 = (*v4)[8];
  v13 = v10[9];
  sub_1B1A19B14();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226E100;
  *(_QWORD *)(inited + 32) = &type metadata for CodeGenerationInitialized;
  *(_QWORD *)(inited + 40) = &off_1E63AF818;
  *(_QWORD *)(inited + 48) = &type metadata for GraphEntityComponentPropertyReferences;
  *(_QWORD *)(inited + 56) = &off_1E63B8E58;
  *(_QWORD *)(inited + 64) = &type metadata for CodeGenerationComponent;
  *(_QWORD *)(inited + 72) = &off_1E63AA1B0;
  if (v13 > 0xF)
  {
    v31 = sub_1B1DC8944((char *)(v11 + v12), v13 >> 4);
    sub_1B19F4A48(inited);
    inited = v31;
  }
  v15 = v10[10];
  v16 = v10[11];
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v17 = swift_initStackObject();
  *(_OWORD *)(v17 + 16) = xmmword_1B226E100;
  *(_BYTE *)(v17 + 32) = a1;
  *(_BYTE *)(v17 + 33) = a2;
  *(_BYTE *)(v17 + 34) = a3;
  if (v16)
  {
    v31 = sub_1B1DC8810((char *)(v11 + v15), v16);
    sub_1B19F499C(v17);
    v17 = v31;
    v18 = *(_QWORD *)(v31 + 16);
  }
  else
  {
    v18 = 3;
  }
  v19 = (uint64_t)*v5 + 41;
  v20 = (char *)(v19 + (*v5)[12]);
  v21 = (unint64_t)(*v5)[13] >> 4;
  v22 = (char *)(v19 + (*v5)[14]);
  v23 = (*v5)[15] / 0x18u;
  v24 = *((_DWORD *)v5 + 2);
  v25 = *((_BYTE *)v5 + 12);
  v26 = v5[4];
  v27 = v5[2];
  v28 = *((_BYTE *)v5 + 24);
  v29 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v17 + 32), v18, v20, v21, v22, v23);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a4 = v29;
  *(_DWORD *)(a4 + 8) = v24;
  *(_BYTE *)(a4 + 12) = v25;
  *(_WORD *)(a4 + 13) = v32;
  *(_BYTE *)(a4 + 15) = v33;
  *(_QWORD *)(a4 + 16) = v27;
  *(_BYTE *)(a4 + 24) = v28;
  *(_DWORD *)(a4 + 25) = v31;
  *(_DWORD *)(a4 + 28) = *(_DWORD *)((char *)&v31 + 3);
  *(_QWORD *)(a4 + 32) = v26;
  return result;
}

uint64_t sub_1B1A17808(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  os_unfair_lock_s *v5;
  uint64_t v6;
  uint64_t v7;
  os_unfair_lock_s *v8;
  uint64_t v9;
  uint64_t v10;
  os_unfair_lock_s *v11;
  uint64_t v12;
  uint64_t v13;
  os_unfair_lock_s *v14;
  _QWORD v16[5];
  _QWORD v17[5];
  _QWORD v18[5];
  _QWORD v19[6];
  int v20;
  char v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  char v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  char v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  char v39;
  uint64_t v40;
  char v41;
  uint64_t v42;

  if (qword_1ED4B7DB8 != -1)
    swift_once();
  v37 = qword_1ED4D09F8;
  v38 = 0;
  v39 = 2;
  v40 = 0;
  v41 = 2;
  v42 = 0;
  swift_retain();
  sub_1B1A1546C(1, 1, 1, (uint64_t)v16);
  swift_release();
  v2 = *(_QWORD *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_queryManager);
  swift_getObjectType();
  v3 = sub_1B204D6E4();
  v4 = v16[0];
  v5 = *(os_unfair_lock_s **)(v2 + 40);
  swift_retain();
  os_unfair_lock_lock(v5);
  sub_1B1E8F784(a1, v4);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B1E8FAC0(a1, v3, v4);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v2 + 40));
  sub_1B19ED720((uint64_t)v16);
  sub_1B19ED720((uint64_t)v16);
  v31 = qword_1ED4D09F8;
  v32 = 0;
  v33 = 2;
  v34 = 0;
  v35 = 2;
  v36 = 0;
  swift_retain();
  sub_1B1A1522C(1, 1, 1, (uint64_t (*)(_QWORD))sub_1B1A19CD8, (uint64_t (*)(_QWORD))sub_1B1A19DCC, (uint64_t)v17);
  swift_release();
  swift_getObjectType();
  v6 = sub_1B204D6E4();
  v7 = v17[0];
  v8 = *(os_unfair_lock_s **)(v2 + 40);
  swift_retain();
  os_unfair_lock_lock(v8);
  sub_1B1E8F784(a1, v7);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B1E8FAC0(a1, v6, v7);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v2 + 40));
  sub_1B19ED720((uint64_t)v17);
  sub_1B19ED720((uint64_t)v17);
  v25 = qword_1ED4D09F8;
  v26 = 0;
  v27 = 2;
  v28 = 0;
  v29 = 2;
  v30 = 0;
  swift_retain();
  sub_1B1A1522C(1, 1, 1, (uint64_t (*)(_QWORD))sub_1B1A19B68, (uint64_t (*)(_QWORD))sub_1B1A19C40, (uint64_t)v18);
  swift_release();
  swift_getObjectType();
  v9 = sub_1B204D6E4();
  v10 = v18[0];
  v11 = *(os_unfair_lock_s **)(v2 + 40);
  swift_retain();
  os_unfair_lock_lock(v11);
  sub_1B1E8F784(a1, v10);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B1E8FAC0(a1, v9, v10);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v2 + 40));
  sub_1B19ED720((uint64_t)v18);
  sub_1B19ED720((uint64_t)v18);
  v19[5] = qword_1ED4D09F8;
  v20 = 0;
  v21 = 2;
  v22 = 0;
  v23 = 2;
  v24 = 0;
  swift_retain();
  sub_1B1A1522C(1, 1, 1, (uint64_t (*)(_QWORD))sub_1B1A199D4, (uint64_t (*)(_QWORD))sub_1B1A19A6C, (uint64_t)v19);
  swift_release();
  swift_getObjectType();
  v12 = sub_1B204D6E4();
  v13 = v19[0];
  v14 = *(os_unfair_lock_s **)(v2 + 40);
  swift_retain();
  os_unfair_lock_lock(v14);
  sub_1B1E8F784(a1, v13);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B1E8FAC0(a1, v12, v13);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v2 + 40));
  sub_1B19ED720((uint64_t)v19);
  return sub_1B19ED720((uint64_t)v19);
}

uint64_t type metadata accessor for BasicAnimationSystem()
{
  return objc_opt_self();
}

uint64_t *sub_1B1A17C18(uint64_t a1)
{
  sub_1B1A185F8(a1);
  sub_1B1A18EA0(a1, (void (*)(uint64_t *__return_ptr, uint64_t))sub_1B1E3FE74, (void (*)(uint64_t *, uint64_t))sub_1B21926F0, (uint64_t (*)(_QWORD))sub_1B1A19CD8, (uint64_t (*)(_QWORD))sub_1B1A19DCC, (void (*)(_OWORD *))sub_1B1A1B75C, (void (*)(uint64_t *))sub_1B1A1B75C, (void (*)(_QWORD *, uint64_t))sub_1B1A18C74);
  sub_1B1A18EA0(a1, (void (*)(uint64_t *__return_ptr, uint64_t))sub_1B1E3FE20, (void (*)(uint64_t *, uint64_t))sub_1B21931AC, (uint64_t (*)(_QWORD))sub_1B1A19B68, (uint64_t (*)(_QWORD))sub_1B1A19C40, (void (*)(_OWORD *))sub_1B1A1B75C, (void (*)(uint64_t *))sub_1B1A1B75C, (void (*)(_QWORD *, uint64_t))sub_1B1A1954C);
  return sub_1B1A18EA0(a1, (void (*)(uint64_t *__return_ptr, uint64_t))sub_1B1E3FDCC, (void (*)(uint64_t *, uint64_t))sub_1B2193D6C, (uint64_t (*)(_QWORD))sub_1B1A199D4, (uint64_t (*)(_QWORD))sub_1B1A19A6C, (void (*)(_OWORD *))sub_1B1A1B75C, (void (*)(uint64_t *))sub_1B1A1B75C, (void (*)(_QWORD *, uint64_t))sub_1B1A19798);
}

const char *sub_1B1A17CF8()
{
  return "BasicAnimations";
}

uint64_t sub_1B1A17D10(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  os_unfair_lock_s *v7;
  uint64_t v8;
  uint64_t v9;
  os_unfair_lock_s *v10;
  uint64_t v11;
  uint64_t v12;
  os_unfair_lock_s *v13;
  uint64_t v14;
  uint64_t v15;
  os_unfair_lock_s *v16;

  v2 = v1;
  v4 = v1[2];
  v5 = *(_QWORD *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_queryManager);
  swift_getObjectType();
  v6 = sub_1B204D6E4();
  v7 = *(os_unfair_lock_s **)(v5 + 40);
  swift_retain_n();
  os_unfair_lock_lock(v7);
  sub_1B1E8F784(a1, v4);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B1E8FAC0(a1, v6, v4);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v5 + 40));
  swift_release_n();
  v8 = v2[7];
  swift_getObjectType();
  v9 = sub_1B204D6E4();
  v10 = *(os_unfair_lock_s **)(v5 + 40);
  swift_retain_n();
  os_unfair_lock_lock(v10);
  sub_1B1E8F784(a1, v8);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B1E8FAC0(a1, v9, v8);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v5 + 40));
  swift_release_n();
  v11 = v2[12];
  swift_getObjectType();
  v12 = sub_1B204D6E4();
  v13 = *(os_unfair_lock_s **)(v5 + 40);
  swift_retain_n();
  os_unfair_lock_lock(v13);
  sub_1B1E8F784(a1, v11);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B1E8FAC0(a1, v12, v11);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v5 + 40));
  swift_release_n();
  v14 = v2[17];
  swift_getObjectType();
  v15 = sub_1B204D6E4();
  v16 = *(os_unfair_lock_s **)(v5 + 40);
  swift_retain_n();
  os_unfair_lock_lock(v16);
  sub_1B1E8F784(a1, v14);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B1E8FAC0(a1, v15, v14);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v5 + 40));
  return swift_release_n();
}

uint64_t sub_1B1A17F80()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for KeyframeAnimationSystem()
{
  return objc_opt_self();
}

uint64_t sub_1B1A17FDC()
{
  uint64_t v0;
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[2];
  uint64_t v7;
  _OWORD v8[2];
  uint64_t v9;
  _OWORD v10[2];
  uint64_t v11;
  _OWORD v12[2];
  uint64_t v13;
  uint64_t v14;
  int v15;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  char v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  char v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  char v34;
  uint64_t v35;
  char v36;
  uint64_t v37;

  if (qword_1ED4B7DB8 != -1)
    swift_once();
  v32 = qword_1ED4D09F8;
  v33 = 0;
  v34 = 2;
  v35 = 0;
  v36 = 2;
  v37 = 0;
  swift_retain();
  sub_1B1E3EABC(1, (uint64_t)v6);
  swift_release();
  v1 = v6[1];
  *(_OWORD *)(v0 + 16) = v6[0];
  *(_OWORD *)(v0 + 32) = v1;
  *(_QWORD *)(v0 + 48) = v7;
  v26 = qword_1ED4D09F8;
  v27 = 0;
  v28 = 2;
  v29 = 0;
  v30 = 2;
  v31 = 0;
  swift_retain();
  sub_1B1E3ED10(1, (uint64_t)v8);
  swift_release();
  v2 = v8[1];
  *(_OWORD *)(v0 + 56) = v8[0];
  *(_OWORD *)(v0 + 72) = v2;
  *(_QWORD *)(v0 + 88) = v9;
  v20 = qword_1ED4D09F8;
  v21 = 0;
  v22 = 2;
  v23 = 0;
  v24 = 2;
  v25 = 0;
  swift_retain();
  sub_1B1E3ED64(1, (uint64_t)v10);
  swift_release();
  v3 = v10[1];
  *(_OWORD *)(v0 + 96) = v10[0];
  *(_OWORD *)(v0 + 112) = v3;
  *(_QWORD *)(v0 + 128) = v11;
  v14 = qword_1ED4D09F8;
  v15 = 0;
  v16 = 2;
  v17 = 0;
  v18 = 2;
  v19 = 0;
  swift_retain();
  sub_1B1E3EDB8(1, (uint64_t)v12);
  swift_release();
  v4 = v12[1];
  *(_OWORD *)(v0 + 136) = v12[0];
  *(_OWORD *)(v0 + 152) = v4;
  *(_QWORD *)(v0 + 168) = v13;
  return v0;
}

uint64_t *sub_1B1A18184(uint64_t a1)
{
  uint64_t v1;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  _OWORD v8[2];
  uint64_t v9;
  _OWORD v10[2];
  uint64_t v11;
  _OWORD v12[2];
  uint64_t v13;
  _OWORD v14[2];
  uint64_t v15;

  v3 = *(_OWORD *)(v1 + 32);
  v14[0] = *(_OWORD *)(v1 + 16);
  v14[1] = v3;
  v15 = *(_QWORD *)(v1 + 48);
  sub_1B1A1A35C((uint64_t)v14, a1, (void (*)(uint64_t *, uint64_t))sub_1B21967A8, sub_1B1A1B75C, (void (*)(_QWORD *, uint64_t))sub_1B1A19E64);
  v4 = *(_OWORD *)(v1 + 72);
  v12[0] = *(_OWORD *)(v1 + 56);
  v12[1] = v4;
  v13 = *(_QWORD *)(v1 + 88);
  sub_1B1A1A35C((uint64_t)v12, a1, (void (*)(uint64_t *, uint64_t))sub_1B2195D90, sub_1B1A1B75C, (void (*)(_QWORD *, uint64_t))sub_1B1A1A0E8);
  v5 = *(_OWORD *)(v1 + 112);
  v10[0] = *(_OWORD *)(v1 + 96);
  v10[1] = v5;
  v11 = *(_QWORD *)(v1 + 128);
  sub_1B1A1AB9C((uint64_t)v10, a1, (void (*)(uint64_t *, uint64_t))sub_1B2195280, sub_1B1A1B75C, (uint64_t (*)(_QWORD))sub_1B1A1B298, (uint64_t (*)(_QWORD))sub_1B1A1B330, (unint64_t *)&qword_1ED4BB0A0, (uint64_t (*)(uint64_t, _QWORD, unint64_t))MEMORY[0x1E0DEDD50]);
  v6 = *(_OWORD *)(v1 + 152);
  v8[0] = *(_OWORD *)(v1 + 136);
  v8[1] = v6;
  v9 = *(_QWORD *)(v1 + 168);
  return sub_1B1A1AB9C((uint64_t)v8, a1, (void (*)(uint64_t *, uint64_t))sub_1B21948A4, sub_1B1A1B75C, (uint64_t (*)(_QWORD))sub_1B1A1B168, (uint64_t (*)(_QWORD))sub_1B1A1B200, (unint64_t *)&qword_1ED4BB0E0, (uint64_t (*)(uint64_t, _QWORD, unint64_t))MEMORY[0x1E0DEDDA8]);
}

uint64_t sub_1B1A182B0()
{
  uint64_t v0;

  v0 = swift_allocObject();
  sub_1B1A17FDC();
  return v0;
}

const char *sub_1B1A182E4()
{
  return "KeyframeAnimations";
}

uint64_t sub_1B1A182FC(uint64_t a1)
{
  unsigned __int16 **v1;
  unsigned __int16 *v2;
  unint64_t v3;
  char *v5;
  _QWORD *v6;
  unint64_t v7;
  unsigned int v8;

  v2 = *v1;
  if (!(*v1)[11])
    return 1;
  v3 = v2[9];
  if (v3 < 0x10)
    return 0;
  v5 = (char *)v2 + 41;
  v6 = (_QWORD *)((char *)v2 + v2[8] + 41);
  v7 = v3 >> 4;
  while (*v6 != a1)
  {
    ++v5;
    v6 += 2;
    if (!--v7)
      return 0;
  }
  v8 = v5[v2[10]];
  if (v8 < 6)
    return (0x1Cu >> v8) & 1;
  else
    return 1;
}

uint64_t sub_1B1A18378(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  uint64_t v6;

  sub_1B1A02758(0, a3, a4, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a2, a1, v6);
  return a2;
}

_QWORD *sub_1B1A183D0(_QWORD *a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *result;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  float v22;
  uint64_t v23;
  float v24;
  void (*v25)(uint64_t, uint64_t, float *, uint64_t, uint64_t);
  _QWORD *v26;
  uint64_t v27;
  uint64_t ObjectType;
  float v30[6];
  uint64_t v31;

  sub_1B1A1B4F8(0, (unint64_t *)&unk_1ED4B8980, (uint64_t (*)(_QWORD, _QWORD, _UNKNOWN **))type metadata accessor for BasicAnimation);
  v3 = (uint64_t *)a1[11];
  v4 = a1[12];
  v5 = a1[13];
  v6 = a1[2];
  v8 = sub_1B1A12038(v7, (uint64_t)&off_1E637E158, v3, v4, v5, v6);
  sub_1B1A1B4F8(0, &qword_1ED4B9728, (uint64_t (*)(_QWORD, _QWORD, _UNKNOWN **))type metadata accessor for BasicAnimationRuntime);
  v10 = sub_1B1A12038(v9, (uint64_t)&off_1E639FC40, v3, v4, v5, v6);
  v11 = sub_1B1A12038((uint64_t)&type metadata for AnimationTimeSource, (uint64_t)&off_1E6397740, v3, v4, v5, v6);
  v12 = a1[6];
  v13 = a1[7];
  result = ecs_stack_allocator_allocate(*(_QWORD *)(v6 + 32), 8 * (v13 - v12), 8);
  if (v13 != v12)
  {
    v15 = 0;
    v16 = (_BYTE *)(v11 + 60 * v12 + 57);
    v17 = v10 + 32 * v12 + 16;
    v18 = v8 + 40 * v12 + 8;
    v26 = result;
    v27 = v13;
    do
    {
      if (*(v16 - 1) == 1)
      {
        v20 = *(unsigned int *)(v17 + 8);
        v19 = *(unsigned int *)(v17 + 12);
        v21 = (_DWORD)v20 == -1 && (_DWORD)v19 == 0;
        if (!v21 && *(_QWORD *)(v17 - 8))
        {
          v22 = *(float *)(v16 - 5);
          v23 = *(_QWORD *)v17;
          ObjectType = swift_getObjectType();
          v24 = v22 * *(float *)(v17 - 12);
          v31 = MEMORY[0x1E0DEB188];
          v30[0] = v24 + *(float *)(v17 - 16);
          v25 = *(void (**)(uint64_t, uint64_t, float *, uint64_t, uint64_t))(v23 + 16);
          swift_retain();
          swift_unknownObjectRetain();
          v25(v20 | (v19 << 32), a2, v30, ObjectType, v23);
          v13 = v27;
          swift_unknownObjectRelease();
          _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v30);
          swift_release();
          result = v26;
        }
      }
      if (*v16 == 1)
        result[v15++] = v12;
      ++v12;
      v16 += 60;
      v17 += 32;
      v18 += 40;
    }
    while (v13 != v12);
  }
  return result;
}

uint64_t *sub_1B1A185F8(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  os_unfair_lock_s *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t i;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  void (*v22)(uint64_t);
  uint64_t v23;
  BOOL v24;
  unint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  uint64_t v30;
  unsigned int v31;
  BOOL v32;
  int v33;
  uint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  uint64_t v38;
  unsigned int v39;
  int v40;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unsigned __int16 *v63;
  uint64_t v64;
  int v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69[12];
  _OWORD v70[2];
  uint64_t v71;
  uint64_t v72[8];
  _QWORD v73[7];
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  char v80;
  uint64_t v81;
  char v82;
  uint64_t v83;
  uint64_t v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;
  uint64_t v88;
  _OWORD v89[2];
  uint64_t v90;
  _QWORD v91[10];
  char v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  char v98;
  uint64_t v99;
  char v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  char v104;
  uint64_t v105;
  char v106;
  uint64_t v107;
  uint64_t v108;
  __int128 v109;
  __int128 v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  int v114;
  char v115;
  uint64_t v116;
  char v117;
  uint64_t v118;
  uint64_t v119;
  int v120;
  char v121;
  uint64_t v122;
  char v123;
  uint64_t v124;

  if (qword_1ED4B7DB8 != -1)
    swift_once();
  v119 = qword_1ED4D09F8;
  v120 = 0;
  v121 = 2;
  v122 = 0;
  v123 = 2;
  v124 = 0;
  swift_retain();
  sub_1B1E3FEC8(1, (uint64_t)&v64);
  swift_release();
  v113 = v64;
  v114 = v65;
  v115 = v66;
  v116 = v67 | 4;
  v117 = 2;
  v118 = v68;
  sub_1B1E8FCE4(a1, (uint64_t)&v113, 0x200000000, v69);
  sub_1B1A18378((uint64_t)v69, (uint64_t)&v78, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (v78)
  {
    v102 = v78;
    v103 = v79;
    v104 = v80;
    v105 = v81;
    v106 = v82;
    v107 = v83;
    v108 = v84;
    v109 = v85;
    v110 = v86;
    v111 = v87;
    v112 = v88;
    swift_retain();
    sub_1B2191C84((uint64_t)&v102, a1);
    swift_release();
    sub_1B19ED748(v69);
  }
  v96 = qword_1ED4D09F8;
  v97 = 0;
  v98 = 2;
  v99 = 0;
  v100 = 2;
  v101 = 0;
  swift_retain();
  sub_1B1A1546C(1, 1, 1, (uint64_t)v70);
  swift_release();
  v89[0] = v70[0];
  v89[1] = v70[1];
  v90 = v71;
  v53 = a1;
  sub_1B1E8FCE4(a1, (uint64_t)v89, 0x200000000, v72);
  sub_1B1A18378((uint64_t)v72, (uint64_t)v73, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (v73[0])
  {
    v52 = v77;
    if (v77 > 0)
    {
      v51 = v74;
      if (v74)
      {
        v50 = v73[5];
        v2 = v76;
        v3 = v76[4];
        v49 = v75;
        v4 = *(unsigned __int8 *)(v75 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
        v46 = v76 + 8;
        v62 = v73[0] + 41;
        v63 = (unsigned __int16 *)v73[0];
        swift_retain();
        swift_retain();
        swift_retain();
        v5 = 0;
        v47 = v4;
        v48 = v3;
        while (1)
        {
          v61 = v5;
          v6 = (unsigned int *)(v50 + 48 * v5);
          v7 = *v6;
          v8 = v6[1];
          v9 = v6[2];
          v10 = *((_QWORD *)v6 + 3);
          v57 = *((_QWORD *)v6 + 2);
          v12 = *((_QWORD *)v6 + 4);
          v11 = *((_QWORD *)v6 + 5);
          if (v4)
          {
            v13 = *(os_unfair_lock_s **)(v11 + 376);
            swift_retain_n();
            os_unfair_lock_lock(v13);
            os_unfair_lock_lock(*(os_unfair_lock_t *)(v11 + 344));
            swift_release();
          }
          else
          {
            swift_retain();
          }
          ecs_stack_allocator_push_snapshot(v3);
          v54 = v2[7];
          v55 = v2[6];
          v59 = v2[9];
          v60 = v2[8];
          v58 = v2[10];
          v14 = v2[4];
          v15 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v11 + 40) + 16) + 32) + 16) + 1;
          swift_retain();
          v2[6] = ecs_stack_allocator_allocate(v14, 48 * v15, 8);
          v2[7] = v15;
          v46[1] = 0;
          v46[2] = 0;
          *v46 = 0;
          swift_release();
          v91[0] = v49;
          v56 = v11;
          v91[1] = v11;
          v91[2] = v2;
          v91[3] = v9;
          v91[4] = (v8 - v7 + v9);
          v91[5] = v52;
          v91[6] = v7;
          v91[7] = v8;
          v91[8] = 0;
          v91[9] = 0;
          v92 = 1;
          v93 = v57;
          v94 = v10;
          v95 = v12;
          sub_1B1A183D0(v91, v53);
          v16 = v2[6];
          v17 = v2[8];
          if (!v17)
          {
            v43 = v2[7];
            v44 = (_QWORD *)v2[4];
            goto LABEL_50;
          }
          for (i = 0; i != v17; ++i)
          {
            v20 = (uint64_t *)(v16 + 48 * i);
            v21 = *v20;
            v22 = (void (*)(uint64_t))v20[4];
            v23 = v2[9];
            if (v23)
              v24 = v21 == v23;
            else
              v24 = 0;
            if (v24 || !v63[11])
              goto LABEL_15;
            v25 = v63[9];
            v26 = (_QWORD *)(v62 + v63[8]);
            v27 = v20[2];
            v28 = v26;
            v29 = v25 >> 4;
            v30 = v62;
            if (v25 >= 0x10)
            {
              while (*v28 != v21)
              {
                ++v30;
                v28 += 2;
                if (!--v29)
                  goto LABEL_30;
              }
              v31 = *(unsigned __int8 *)(v30 + v63[10]);
              v32 = v31 > 5;
              v33 = (1 << v31) & 0x23;
              if (v32 || v33 == 0)
              {
LABEL_15:
                v19 = swift_retain();
                v22(v19);
                swift_release();
                continue;
              }
            }
LABEL_30:
            if (swift_conformsToProtocol2())
              v35 = v27;
            else
              v35 = 0;
            if (v35)
            {
              if (v25 < 0x10)
                goto LABEL_15;
              v36 = v26;
              v37 = v25 >> 4;
              v38 = v62;
              while (*v36 != v35)
              {
                ++v38;
                v36 += 2;
                if (!--v37)
                  goto LABEL_43;
              }
              v39 = *(unsigned __int8 *)(v38 + v63[10]);
              v32 = v39 > 5;
              v40 = (1 << v39) & 0x23;
              if (v32 || v40 == 0)
                goto LABEL_15;
LABEL_43:
              v42 = 16 * (v25 >> 4);
              while (*v26 != v35)
              {
                v26 += 2;
                v42 -= 16;
                if (!v42)
                  goto LABEL_15;
              }
            }
          }
          v43 = v2[7];
          v16 = v2[6];
          v44 = (_QWORD *)v2[4];
          if ((uint64_t)v2[8] >= 1)
            swift_arrayDestroy();
LABEL_50:
          ecs_stack_allocator_deallocate(v44, v16, 48 * v43);
          v2[6] = v55;
          v2[7] = v54;
          v2[8] = v60;
          v2[9] = v59;
          v2[10] = v58;
          sub_1B1F03804((char *)v56);
          v3 = v48;
          ecs_stack_allocator_pop_snapshot(v48);
          v4 = v47;
          if ((v47 & 1) != 0)
          {
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v56 + 344));
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v56 + 376));
          }
          swift_release();
          v5 = v61 + 1;
          if (v61 + 1 == v51)
            goto LABEL_53;
        }
      }
    }
    swift_retain();
    swift_retain();
    swift_retain();
LABEL_53:
    sub_1B19ED720((uint64_t)v70);
    sub_1B19ED720((uint64_t)&v64);
    sub_1B19ED748(v72);
    return sub_1B19ED748(v72);
  }
  else
  {
    sub_1B19ED720((uint64_t)v70);
    return (uint64_t *)sub_1B19ED720((uint64_t)&v64);
  }
}

_QWORD *sub_1B1A18C74(_QWORD *a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  float32x2_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, uint64_t, _QWORD *, uint64_t, uint64_t);
  _QWORD *v28;
  uint64_t v29;
  float v31;
  uint64_t ObjectType;
  _QWORD v33[4];

  sub_1B1A19CD8(0);
  v3 = (uint64_t *)a1[11];
  v4 = a1[12];
  v5 = a1[13];
  v6 = a1[2];
  v8 = sub_1B1A12038(v7, (uint64_t)&off_1E637E158, v3, v4, v5, v6);
  sub_1B1A19DCC(0);
  v10 = sub_1B1A12038(v9, (uint64_t)&off_1E639FC40, v3, v4, v5, v6);
  v11 = sub_1B1A12038((uint64_t)&type metadata for AnimationTimeSource, (uint64_t)&off_1E6397740, v3, v4, v5, v6);
  v13 = a1[6];
  v12 = a1[7];
  result = ecs_stack_allocator_allocate(*(_QWORD *)(v6 + 32), 8 * (v12 - v13), 8);
  if (v12 != v13)
  {
    v15 = v8;
    v16 = 0;
    v17 = v10;
    v18 = (_BYTE *)(v11 + 60 * v13 + 57);
    v19 = v17 + 40 * v13 + 24;
    v20 = v15 + 56 * v13 + 8;
    v28 = result;
    v29 = v12;
    do
    {
      if (*(v18 - 1) == 1)
      {
        v22 = *(unsigned int *)(v19 + 8);
        v21 = *(unsigned int *)(v19 + 12);
        v23 = (_DWORD)v22 == -1 && (_DWORD)v21 == 0;
        if (!v23 && *(_QWORD *)(v19 - 8))
        {
          v31 = *(float *)(v18 - 5);
          v24 = *(_QWORD *)v19;
          ObjectType = swift_getObjectType();
          v25 = vmul_n_f32(*(float32x2_t *)(v19 - 16), v31);
          sub_1B1A19D70(0, &qword_1ED4BB080, MEMORY[0x1E0DEDD20]);
          v33[3] = v26;
          v33[0] = vadd_f32(v25, *(float32x2_t *)(v19 - 24));
          v27 = *(void (**)(uint64_t, uint64_t, _QWORD *, uint64_t, uint64_t))(v24 + 16);
          swift_retain();
          swift_unknownObjectRetain();
          v27(v22 | (v21 << 32), a2, v33, ObjectType, v24);
          v12 = v29;
          swift_unknownObjectRelease();
          _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v33);
          swift_release();
          result = v28;
        }
      }
      if (*v18 == 1)
        result[v16++] = v13;
      ++v13;
      v18 += 60;
      v19 += 40;
      v20 += 56;
    }
    while (v12 != v13);
  }
  return result;
}

uint64_t *sub_1B1A18EA0(uint64_t a1, void (*a2)(uint64_t *__return_ptr, uint64_t), void (*a3)(uint64_t *, uint64_t), uint64_t (*a4)(_QWORD), uint64_t (*a5)(_QWORD), void (*a6)(_OWORD *), void (*a7)(uint64_t *), void (*a8)(_QWORD *, uint64_t))
{
  _QWORD *v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  os_unfair_lock_s *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t i;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  void (*v31)(uint64_t);
  uint64_t v32;
  BOOL v33;
  unint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  uint64_t v39;
  unsigned int v40;
  BOOL v41;
  int v42;
  uint64_t v44;
  _QWORD *v45;
  unint64_t v46;
  uint64_t v47;
  unsigned int v48;
  int v49;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  unsigned __int16 *v75;
  uint64_t v76;
  int v77;
  char v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81[12];
  _OWORD v82[2];
  uint64_t v83;
  uint64_t v84[8];
  _QWORD v85[7];
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  char v92;
  uint64_t v93;
  char v94;
  uint64_t v95;
  uint64_t v96;
  __int128 v97;
  __int128 v98;
  uint64_t v99;
  uint64_t v100;
  _OWORD v101[2];
  uint64_t v102;
  _QWORD v103[10];
  char v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  int v109;
  char v110;
  uint64_t v111;
  char v112;
  uint64_t v113;
  uint64_t v114;
  int v115;
  char v116;
  uint64_t v117;
  char v118;
  uint64_t v119;
  uint64_t v120;
  __int128 v121;
  __int128 v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  int v126;
  char v127;
  uint64_t v128;
  char v129;
  uint64_t v130;
  uint64_t v131;
  int v132;
  char v133;
  uint64_t v134;
  char v135;
  uint64_t v136;

  if (qword_1ED4B7DB8 != -1)
    swift_once();
  v131 = qword_1ED4D09F8;
  v132 = 0;
  v133 = 2;
  v134 = 0;
  v135 = 2;
  v136 = 0;
  swift_retain();
  a2(&v76, 1);
  swift_release();
  v125 = v76;
  v126 = v77;
  v127 = v78;
  v128 = v79 | 4;
  v129 = 2;
  v130 = v80;
  sub_1B1E8FCE4(a1, (uint64_t)&v125, 0x200000000, v81);
  sub_1B1A18378((uint64_t)v81, (uint64_t)&v90, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (v90)
  {
    v114 = v90;
    v115 = v91;
    v116 = v92;
    v117 = v93;
    v118 = v94;
    v119 = v95;
    v120 = v96;
    v121 = v97;
    v122 = v98;
    v123 = v99;
    v124 = v100;
    swift_retain();
    a3(&v114, a1);
    swift_release();
    sub_1B19ED748(v81);
  }
  v108 = qword_1ED4D09F8;
  v109 = 0;
  v110 = 2;
  v111 = 0;
  v112 = 2;
  v113 = 0;
  swift_retain();
  sub_1B1A1522C(1, 1, 1, a4, a5, (uint64_t)v82);
  swift_release();
  v101[0] = v82[0];
  v101[1] = v82[1];
  v102 = v83;
  v62 = a1;
  sub_1B1E8FCE4(a1, (uint64_t)v101, 0x200000000, v84);
  sub_1B1A18378((uint64_t)v84, (uint64_t)v85, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (v85[0])
  {
    v61 = v89;
    if (v89 > 0)
    {
      v60 = v86;
      if (v86)
      {
        v59 = v85[5];
        v13 = v88;
        v73 = v88[4];
        v72 = *(unsigned __int8 *)(v87 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
        v57 = v88 + 8;
        v58 = v87;
        v74 = v85[0] + 41;
        v75 = (unsigned __int16 *)v85[0];
        swift_retain();
        swift_retain();
        swift_retain();
        v14 = 0;
        while (1)
        {
          v71 = v14;
          v15 = (unsigned int *)(v59 + 48 * v14);
          v16 = *v15;
          v17 = v15[1];
          v18 = v15[2];
          v19 = *((_QWORD *)v15 + 3);
          v69 = *((_QWORD *)v15 + 2);
          v21 = *((_QWORD *)v15 + 4);
          v20 = *((_QWORD *)v15 + 5);
          if (v72)
          {
            v22 = *(os_unfair_lock_s **)(v20 + 376);
            swift_retain_n();
            os_unfair_lock_lock(v22);
            os_unfair_lock_lock(*(os_unfair_lock_t *)(v20 + 344));
            swift_release();
          }
          else
          {
            swift_retain();
          }
          ecs_stack_allocator_push_snapshot(v73);
          v67 = v13[7];
          v68 = v13[6];
          v65 = v13[9];
          v66 = v13[8];
          v64 = v13[10];
          v23 = v13[4];
          v24 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v20 + 40) + 16) + 32) + 16) + 1;
          swift_retain();
          v13[6] = ecs_stack_allocator_allocate(v23, 48 * v24, 8);
          v13[7] = v24;
          v57[1] = 0;
          v57[2] = 0;
          *v57 = 0;
          swift_release();
          v103[0] = v58;
          v70 = v20;
          v103[1] = v20;
          v103[2] = v13;
          v103[3] = v18;
          v103[4] = (v17 - v16 + v18);
          v103[5] = v61;
          v103[6] = v16;
          v103[7] = v17;
          v103[8] = 0;
          v103[9] = 0;
          v104 = 1;
          v105 = v69;
          v106 = v19;
          v107 = v21;
          a8(v103, v62);
          v25 = v13[6];
          v26 = v13[8];
          if (!v26)
          {
            v52 = v13[7];
            v53 = (_QWORD *)v13[4];
            goto LABEL_50;
          }
          for (i = 0; i != v26; ++i)
          {
            v29 = (uint64_t *)(v25 + 48 * i);
            v30 = *v29;
            v31 = (void (*)(uint64_t))v29[4];
            v32 = v13[9];
            if (v32)
              v33 = v30 == v32;
            else
              v33 = 0;
            if (v33 || !v75[11])
              goto LABEL_15;
            v34 = v75[9];
            v35 = (_QWORD *)(v74 + v75[8]);
            v36 = v29[2];
            v37 = v35;
            v38 = v34 >> 4;
            v39 = v74;
            if (v34 >= 0x10)
            {
              while (*v37 != v30)
              {
                ++v39;
                v37 += 2;
                if (!--v38)
                  goto LABEL_30;
              }
              v40 = *(unsigned __int8 *)(v39 + v75[10]);
              v41 = v40 > 5;
              v42 = (1 << v40) & 0x23;
              if (v41 || v42 == 0)
              {
LABEL_15:
                v28 = swift_retain();
                v31(v28);
                swift_release();
                continue;
              }
            }
LABEL_30:
            if (swift_conformsToProtocol2())
              v44 = v36;
            else
              v44 = 0;
            if (v44)
            {
              if (v34 < 0x10)
                goto LABEL_15;
              v45 = v35;
              v46 = v34 >> 4;
              v47 = v74;
              while (*v45 != v44)
              {
                ++v47;
                v45 += 2;
                if (!--v46)
                  goto LABEL_43;
              }
              v48 = *(unsigned __int8 *)(v47 + v75[10]);
              v41 = v48 > 5;
              v49 = (1 << v48) & 0x23;
              if (v41 || v49 == 0)
                goto LABEL_15;
LABEL_43:
              v51 = 16 * (v34 >> 4);
              while (*v35 != v44)
              {
                v35 += 2;
                v51 -= 16;
                if (!v51)
                  goto LABEL_15;
              }
            }
          }
          v52 = v13[7];
          v25 = v13[6];
          v53 = (_QWORD *)v13[4];
          if ((uint64_t)v13[8] >= 1)
            swift_arrayDestroy();
LABEL_50:
          ecs_stack_allocator_deallocate(v53, v25, 48 * v52);
          v13[6] = v68;
          v13[7] = v67;
          v13[8] = v66;
          v13[9] = v65;
          v13[10] = v64;
          sub_1B1F03804((char *)v70);
          ecs_stack_allocator_pop_snapshot(v73);
          if ((v72 & 1) != 0)
          {
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v70 + 344));
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v70 + 376));
          }
          swift_release();
          v14 = v71 + 1;
          if (v71 + 1 == v60)
            goto LABEL_53;
        }
      }
    }
    swift_retain();
    swift_retain();
    swift_retain();
LABEL_53:
    a6(v82);
    a7(&v76);
    sub_1B19ED748(v84);
    return sub_1B19ED748(v84);
  }
  else
  {
    a6(v82);
    return (uint64_t *)((uint64_t (*)(uint64_t *))a7)(&v76);
  }
}

_QWORD *sub_1B1A1954C(_QWORD *a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *result;
  uint64_t v15;
  float32x4_t *v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  float32x4_t v24;
  void (*v25)(uint64_t, uint64_t, _QWORD *, uint64_t, uint64_t);
  uint64_t v26;
  _QWORD *v27;
  float v29;
  float32x4_t v30;
  uint64_t ObjectType;
  __int32 v32;
  _QWORD v33[4];

  sub_1B1A19B68(0);
  v3 = (uint64_t *)a1[11];
  v4 = a1[12];
  v5 = a1[13];
  v6 = a1[2];
  v8 = sub_1B1A12038(v7, (uint64_t)&off_1E637E158, v3, v4, v5, v6);
  sub_1B1A19C40(0);
  v10 = sub_1B1A12038(v9, (uint64_t)&off_1E639FC40, v3, v4, v5, v6);
  v11 = sub_1B1A12038((uint64_t)&type metadata for AnimationTimeSource, (uint64_t)&off_1E6397740, v3, v4, v5, v6);
  v13 = a1[6];
  v12 = a1[7];
  result = ecs_stack_allocator_allocate(*(_QWORD *)(v6 + 32), 8 * (v12 - v13), 8);
  if (v12 != v13)
  {
    v15 = 0;
    v16 = (float32x4_t *)(v10 + (v13 << 6));
    v17 = (_BYTE *)(v11 + 60 * v13 + 57);
    v18 = v8 + 96 * v13 + 8;
    v26 = v12;
    v27 = result;
    do
    {
      if (*(v17 - 1) == 1)
      {
        v20 = v16[3].u32[0];
        v19 = v16[3].u32[1];
        v21 = (_DWORD)v20 == -1 && (_DWORD)v19 == 0;
        if (!v21 && v16[2].i64[0])
        {
          v29 = *(float *)(v17 - 5);
          v22 = v16[2].i64[1];
          ObjectType = swift_getObjectType();
          v30 = vmulq_n_f32(v16[1], v29);
          sub_1B1A19D70(0, (unint64_t *)&qword_1ED4BB0A0, (uint64_t (*)(uint64_t, _QWORD, unint64_t))MEMORY[0x1E0DEDD50]);
          v33[3] = v23;
          v33[0] = swift_allocObject();
          v24 = vaddq_f32(v30, *v16);
          v24.i32[3] = v32;
          *(float32x4_t *)(v33[0] + 16) = v24;
          v25 = *(void (**)(uint64_t, uint64_t, _QWORD *, uint64_t, uint64_t))(v22 + 16);
          swift_retain();
          swift_unknownObjectRetain();
          v25(v20 | (v19 << 32), a2, v33, ObjectType, v22);
          v12 = v26;
          swift_unknownObjectRelease();
          _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v33);
          swift_release();
          result = v27;
        }
      }
      if (*v17 == 1)
        result[v15++] = v13;
      ++v13;
      v16 += 4;
      v17 += 60;
      v18 += 96;
    }
    while (v12 != v13);
  }
  return result;
}

_QWORD *sub_1B1A19798(_QWORD *a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *result;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  unsigned int *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, uint64_t, _QWORD *, uint64_t, uint64_t);
  uint64_t v26;
  _QWORD *v27;
  float v29;
  float32x4_t v30;
  uint64_t ObjectType;
  _QWORD v32[4];

  sub_1B1A199D4(0);
  v3 = (uint64_t *)a1[11];
  v4 = a1[12];
  v5 = a1[13];
  v6 = a1[2];
  v8 = sub_1B1A12038(v7, (uint64_t)&off_1E637E158, v3, v4, v5, v6);
  sub_1B1A19A6C(0);
  v10 = sub_1B1A12038(v9, (uint64_t)&off_1E639FC40, v3, v4, v5, v6);
  v11 = sub_1B1A12038((uint64_t)&type metadata for AnimationTimeSource, (uint64_t)&off_1E6397740, v3, v4, v5, v6);
  v13 = a1[6];
  v12 = a1[7];
  result = ecs_stack_allocator_allocate(*(_QWORD *)(v6 + 32), 8 * (v12 - v13), 8);
  if (v12 != v13)
  {
    v15 = v8;
    v16 = 0;
    v17 = (_BYTE *)(v11 + 60 * v13 + 57);
    v18 = (unsigned int *)(v10 + (v13 << 6) + 52);
    v19 = v15 + 96 * v13 + 8;
    v26 = v12;
    v27 = result;
    do
    {
      if (*(v17 - 1) == 1)
      {
        v21 = *(v18 - 1);
        v20 = *v18;
        v22 = (_DWORD)v21 == -1 && (_DWORD)v20 == 0;
        if (!v22 && *(_QWORD *)(v18 - 5))
        {
          v29 = *(float *)(v17 - 5);
          v23 = *(_QWORD *)(v18 - 3);
          ObjectType = swift_getObjectType();
          v30 = vmulq_n_f32(*(float32x4_t *)(v18 - 9), v29);
          sub_1B1A19D70(0, (unint64_t *)&qword_1ED4BB0E0, (uint64_t (*)(uint64_t, _QWORD, unint64_t))MEMORY[0x1E0DEDDA8]);
          v32[3] = v24;
          v32[0] = swift_allocObject();
          *(float32x4_t *)(v32[0] + 16) = vaddq_f32(v30, *(float32x4_t *)(v18 - 13));
          v25 = *(void (**)(uint64_t, uint64_t, _QWORD *, uint64_t, uint64_t))(v23 + 16);
          swift_retain();
          swift_unknownObjectRetain();
          v25(v21 | (v20 << 32), a2, v32, ObjectType, v23);
          v12 = v26;
          swift_unknownObjectRelease();
          _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v32);
          swift_release();
          result = v27;
        }
      }
      if (*v17 == 1)
        result[v16++] = v13;
      ++v13;
      v17 += 60;
      v18 += 16;
      v19 += 96;
    }
    while (v12 != v13);
  }
  return result;
}

void sub_1B1A199D4(uint64_t a1)
{
  uint64_t (*v2)(void);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!qword_1ED4B89A8)
  {
    v2 = MEMORY[0x1E0DEDDA8];
    sub_1B1A19D70(255, (unint64_t *)&qword_1ED4BB0E0, (uint64_t (*)(uint64_t, _QWORD, unint64_t))MEMORY[0x1E0DEDDA8]);
    v4 = v3;
    v5 = sub_1B1A19C00((unint64_t *)&unk_1ED4BB0D0, (unint64_t *)&qword_1ED4BB0E0, (uint64_t (*)(uint64_t, _QWORD, unint64_t))v2, (uint64_t)&unk_1B22B9A78);
    v7 = type metadata accessor for BasicAnimation(a1, v4, v5, v6);
    if (!v8)
      atomic_store(v7, (unint64_t *)&qword_1ED4B89A8);
  }
}

void sub_1B1A19A6C(uint64_t a1)
{
  uint64_t (*v2)(void);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!qword_1ED4B9740[0])
  {
    v2 = MEMORY[0x1E0DEDDA8];
    sub_1B1A19D70(255, (unint64_t *)&qword_1ED4BB0E0, (uint64_t (*)(uint64_t, _QWORD, unint64_t))MEMORY[0x1E0DEDDA8]);
    v4 = v3;
    v5 = sub_1B1A19C00((unint64_t *)&unk_1ED4BB0D0, (unint64_t *)&qword_1ED4BB0E0, (uint64_t (*)(uint64_t, _QWORD, unint64_t))v2, (uint64_t)&unk_1B22B9A78);
    v7 = type metadata accessor for BasicAnimationRuntime(a1, v4, v5, v6);
    if (!v8)
      atomic_store(v7, qword_1ED4B9740);
  }
}

uint64_t sub_1B1A19B04()
{
  return swift_deallocObject();
}

void sub_1B1A19B14()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED4BAE50)
  {
    sub_1B19F66EC();
    v0 = sub_1B2229A18();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED4BAE50);
  }
}

void sub_1B1A19B68(uint64_t a1)
{
  uint64_t (*v2)(void);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!qword_1ED4B89A0)
  {
    v2 = MEMORY[0x1E0DEDD50];
    sub_1B1A19D70(255, (unint64_t *)&qword_1ED4BB0A0, (uint64_t (*)(uint64_t, _QWORD, unint64_t))MEMORY[0x1E0DEDD50]);
    v4 = v3;
    v5 = sub_1B1A19C00(&qword_1ED4BB098, (unint64_t *)&qword_1ED4BB0A0, (uint64_t (*)(uint64_t, _QWORD, unint64_t))v2, (uint64_t)&unk_1B22B9A50);
    v7 = type metadata accessor for BasicAnimation(a1, v4, v5, v6);
    if (!v8)
      atomic_store(v7, (unint64_t *)&qword_1ED4B89A0);
  }
}

uint64_t sub_1B1A19C00(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t, _QWORD, unint64_t), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    sub_1B1A19D70(255, a2, a3);
    result = MEMORY[0x1B5E23E74](a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

void sub_1B1A19C40(uint64_t a1)
{
  uint64_t (*v2)(void);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!qword_1ED4B9738)
  {
    v2 = MEMORY[0x1E0DEDD50];
    sub_1B1A19D70(255, (unint64_t *)&qword_1ED4BB0A0, (uint64_t (*)(uint64_t, _QWORD, unint64_t))MEMORY[0x1E0DEDD50]);
    v4 = v3;
    v5 = sub_1B1A19C00(&qword_1ED4BB098, (unint64_t *)&qword_1ED4BB0A0, (uint64_t (*)(uint64_t, _QWORD, unint64_t))v2, (uint64_t)&unk_1B22B9A50);
    v7 = type metadata accessor for BasicAnimationRuntime(a1, v4, v5, v6);
    if (!v8)
      atomic_store(v7, (unint64_t *)&qword_1ED4B9738);
  }
}

void sub_1B1A19CD8(uint64_t a1)
{
  uint64_t (*v2)(uint64_t, _QWORD, unint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!qword_1ED4B8990)
  {
    v2 = (uint64_t (*)(uint64_t, _QWORD, unint64_t))MEMORY[0x1E0DEDD20];
    sub_1B1A19D70(255, &qword_1ED4BB080, MEMORY[0x1E0DEDD20]);
    v4 = v3;
    v5 = sub_1B1A19C00((unint64_t *)&unk_1ED4BB070, &qword_1ED4BB080, v2, (uint64_t)&unk_1B22B9A28);
    v7 = type metadata accessor for BasicAnimation(a1, v4, v5, v6);
    if (!v8)
      atomic_store(v7, (unint64_t *)&qword_1ED4B8990);
  }
}

void sub_1B1A19D70(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, _QWORD, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_1B19F8DCC();
    v7 = a3(a1, MEMORY[0x1E0DEB188], v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

void sub_1B1A19DCC(uint64_t a1)
{
  uint64_t (*v2)(uint64_t, _QWORD, unint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!qword_1ED4B9730)
  {
    v2 = (uint64_t (*)(uint64_t, _QWORD, unint64_t))MEMORY[0x1E0DEDD20];
    sub_1B1A19D70(255, &qword_1ED4BB080, MEMORY[0x1E0DEDD20]);
    v4 = v3;
    v5 = sub_1B1A19C00((unint64_t *)&unk_1ED4BB070, &qword_1ED4BB080, v2, (uint64_t)&unk_1B22B9A28);
    v7 = type metadata accessor for BasicAnimationRuntime(a1, v4, v5, v6);
    if (!v8)
      atomic_store(v7, (unint64_t *)&qword_1ED4B9730);
  }
}

_QWORD *sub_1B1A19E64(_QWORD *a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *result;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  float v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v32;
  uint64_t v33;
  void (*v34)(uint64_t, uint64_t, _DWORD *, uint64_t, uint64_t);
  uint64_t ObjectType;
  _DWORD v36[6];
  uint64_t v37;
  _OWORD v38[9];
  char v39;

  sub_1B1A1B4F8(0, &qword_1ED4B9088, (uint64_t (*)(_QWORD, _QWORD, _UNKNOWN **))type metadata accessor for KeyframeAnimation);
  v3 = (uint64_t *)a1[11];
  v4 = a1[12];
  v5 = a1[13];
  v6 = a1[2];
  v8 = sub_1B1A12038(v7, (uint64_t)&off_1E638CEA0, v3, v4, v5, v6);
  sub_1B1A1B4F8(0, &qword_1ED4B9AB0, (uint64_t (*)(_QWORD, _QWORD, _UNKNOWN **))type metadata accessor for KeyframeAnimationRuntime);
  v10 = sub_1B1A12038(v9, (uint64_t)&off_1E63AD5B0, v3, v4, v5, v6);
  v11 = sub_1B1A12038((uint64_t)&type metadata for AnimationTimeSource, (uint64_t)&off_1E6397740, v3, v4, v5, v6);
  v13 = a1[6];
  v12 = a1[7];
  result = ecs_stack_allocator_allocate(*(_QWORD *)(v6 + 32), 8 * (v12 - v13), 8);
  if (v12 != v13)
  {
    v15 = v12;
    v16 = 0;
    v17 = (_BYTE *)(v11 + 60 * v13 + 57);
    v18 = v10 + 48 * v13 + 24;
    v19 = v8 + 152 * v13;
    v32 = result;
    v33 = v15;
    do
    {
      if (*(v17 - 1) == 1)
      {
        v20 = *(_OWORD *)(v19 + 16);
        v38[0] = *(_OWORD *)v19;
        v38[1] = v20;
        v21 = *(_OWORD *)(v19 + 32);
        v22 = *(_OWORD *)(v19 + 48);
        v23 = *(_OWORD *)(v19 + 80);
        v38[4] = *(_OWORD *)(v19 + 64);
        v38[5] = v23;
        v38[2] = v21;
        v38[3] = v22;
        v24 = *(_OWORD *)(v19 + 96);
        v25 = *(_OWORD *)(v19 + 112);
        v26 = *(_OWORD *)(v19 + 128);
        v39 = *(_BYTE *)(v19 + 144);
        v38[7] = v25;
        v38[8] = v26;
        v38[6] = v24;
        if (*(_QWORD *)(v18 - 24))
        {
          v27 = *(float *)(v17 - 5);
          v28 = *(unsigned int *)(v18 + 16);
          v29 = *(unsigned int *)(v18 + 20);
          if (__PAIR64__(v29, v28) != 0xFFFFFFFF)
          {
            swift_retain();
            sub_1B1A1B54C((uint64_t)v38);
            sub_1B1F33350((uint64_t *)(v18 - 16), (void *)(v18 - 8), v27);
            if (*(_QWORD *)v18)
            {
              v30 = *(_QWORD *)(v18 + 8);
              ObjectType = swift_getObjectType();
              v37 = MEMORY[0x1E0DEB188];
              v36[0] = *(_DWORD *)(v18 - 8);
              v34 = *(void (**)(uint64_t, uint64_t, _DWORD *, uint64_t, uint64_t))(v30 + 16);
              swift_unknownObjectRetain();
              v34(v28 | (v29 << 32), a2, v36, ObjectType, v30);
              swift_release();
              swift_unknownObjectRelease();
              _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v36);
            }
            else
            {
              swift_release();
            }
            sub_1B1A1B624((uint64_t)v38);
            result = v32;
            v15 = v33;
          }
        }
      }
      if (*v17 == 1)
        result[v16++] = v13;
      ++v13;
      v17 += 60;
      v18 += 48;
      v19 += 152;
    }
    while (v15 != v13);
  }
  return result;
}

_QWORD *sub_1B1A1A0E8(_QWORD *a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *result;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  float v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v33;
  uint64_t v34;
  void (*v35)(uint64_t, uint64_t, _QWORD *, uint64_t, uint64_t);
  uint64_t ObjectType;
  _QWORD v37[4];
  _OWORD v38[9];
  char v39;

  sub_1B1A1B3C8(0);
  v3 = (uint64_t *)a1[11];
  v4 = a1[12];
  v5 = a1[13];
  v6 = a1[2];
  v8 = sub_1B1A12038(v7, (uint64_t)&off_1E638CEA0, v3, v4, v5, v6);
  sub_1B1A1B460(0);
  v10 = sub_1B1A12038(v9, (uint64_t)&off_1E63AD5B0, v3, v4, v5, v6);
  v11 = sub_1B1A12038((uint64_t)&type metadata for AnimationTimeSource, (uint64_t)&off_1E6397740, v3, v4, v5, v6);
  v13 = a1[6];
  v12 = a1[7];
  result = ecs_stack_allocator_allocate(*(_QWORD *)(v6 + 32), 8 * (v12 - v13), 8);
  if (v12 != v13)
  {
    v15 = v10;
    v16 = 0;
    v17 = (_BYTE *)(v11 + 60 * v13 + 57);
    v18 = v15 + 48 * v13 + 24;
    v19 = v8 + 152 * v13;
    v33 = result;
    v34 = v12;
    do
    {
      if (*(v17 - 1) == 1)
      {
        v20 = *(_OWORD *)(v19 + 16);
        v38[0] = *(_OWORD *)v19;
        v38[1] = v20;
        v21 = *(_OWORD *)(v19 + 32);
        v22 = *(_OWORD *)(v19 + 48);
        v23 = *(_OWORD *)(v19 + 80);
        v38[4] = *(_OWORD *)(v19 + 64);
        v38[5] = v23;
        v38[2] = v21;
        v38[3] = v22;
        v24 = *(_OWORD *)(v19 + 96);
        v25 = *(_OWORD *)(v19 + 112);
        v26 = *(_OWORD *)(v19 + 128);
        v39 = *(_BYTE *)(v19 + 144);
        v38[7] = v25;
        v38[8] = v26;
        v38[6] = v24;
        if (*(_QWORD *)(v18 - 24))
        {
          v27 = *(float *)(v17 - 5);
          v29 = *(unsigned int *)(v18 + 16);
          v28 = *(unsigned int *)(v18 + 20);
          if (__PAIR64__(v28, v29) != 0xFFFFFFFF)
          {
            swift_retain();
            sub_1B1A1B54C((uint64_t)v38);
            sub_1B1F33350((uint64_t *)(v18 - 16), (void *)(v18 - 8), v27);
            if (*(_QWORD *)v18)
            {
              v30 = *(_QWORD *)(v18 + 8);
              ObjectType = swift_getObjectType();
              sub_1B1A19D70(0, &qword_1ED4BB080, MEMORY[0x1E0DEDD20]);
              v37[3] = v31;
              v37[0] = *(_QWORD *)(v18 - 8);
              v35 = *(void (**)(uint64_t, uint64_t, _QWORD *, uint64_t, uint64_t))(v30 + 16);
              swift_unknownObjectRetain();
              v35(v29 | (v28 << 32), a2, v37, ObjectType, v30);
              swift_release();
              swift_unknownObjectRelease();
              _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v37);
            }
            else
            {
              swift_release();
            }
            sub_1B1A1B624((uint64_t)v38);
            result = v33;
            v12 = v34;
          }
        }
      }
      if (*v17 == 1)
        result[v16++] = v13;
      ++v13;
      v17 += 60;
      v18 += 48;
      v19 += 152;
    }
    while (v12 != v13);
  }
  return result;
}

uint64_t *sub_1B1A1A35C(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *, uint64_t), uint64_t (*a4)(uint64_t), void (*a5)(_QWORD *, uint64_t))
{
  __int128 v9;
  _QWORD *v10;
  int v11;
  uint64_t v12;
  unsigned int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  os_unfair_lock_s *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t i;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  void (*v29)(uint64_t);
  uint64_t v30;
  BOOL v31;
  unint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  uint64_t v37;
  unsigned int v38;
  BOOL v39;
  int v40;
  uint64_t v42;
  _QWORD *v43;
  unint64_t v44;
  uint64_t v45;
  unsigned int v46;
  int v47;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v54;
  void (*v55)(uint64_t);
  int v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unsigned __int16 *v74;
  uint64_t v75[12];
  uint64_t v76[8];
  _QWORD v77[7];
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  char v84;
  uint64_t v85;
  char v86;
  uint64_t v87;
  uint64_t v88;
  __int128 v89;
  __int128 v90;
  uint64_t v91;
  uint64_t v92;
  _OWORD v93[2];
  uint64_t v94;
  _QWORD v95[10];
  char v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  char v102;
  uint64_t v103;
  char v104;
  uint64_t v105;
  uint64_t v106;
  __int128 v107;
  __int128 v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  int v112;
  char v113;
  uint64_t v114;
  char v115;
  uint64_t v116;

  v9 = *(_OWORD *)(a1 + 16);
  v93[0] = *(_OWORD *)a1;
  v93[1] = v9;
  v94 = *(_QWORD *)(a1 + 32);
  v111 = *(_QWORD *)&v93[0];
  v112 = DWORD2(v93[0]);
  v113 = BYTE12(v93[0]);
  v114 = v9 | 4;
  v115 = 2;
  v116 = v94;
  swift_retain();
  sub_1B1E8FCE4(a2, (uint64_t)&v111, 0x200000000, v75);
  sub_1B1A18378((uint64_t)v75, (uint64_t)&v82, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (v82)
  {
    v100 = v82;
    v101 = v83;
    v102 = v84;
    v103 = v85;
    v104 = v86;
    v105 = v87;
    v106 = v88;
    v107 = v89;
    v108 = v90;
    v109 = v91;
    v110 = v92;
    swift_retain();
    a3(&v100, a2);
    swift_release();
    sub_1B19ED748(v75);
  }
  sub_1B1E8FCE4(a2, (uint64_t)v93, 0x200000000, v76);
  sub_1B1A18378((uint64_t)v76, (uint64_t)v77, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (!v77[0])
    return (uint64_t *)a4(a1);
  v62 = v81;
  if (v81 <= 0)
  {
    a4(a1);
  }
  else
  {
    v54 = a1;
    v55 = (void (*)(uint64_t))a4;
    v61 = v78;
    if (v78)
    {
      v59 = v77[5];
      v60 = a2;
      v10 = v80;
      v72 = v80[4];
      v11 = *(unsigned __int8 *)(v79 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
      v57 = v80 + 8;
      v58 = v79;
      v73 = v77[0] + 41;
      v74 = (unsigned __int16 *)v77[0];
      swift_retain();
      swift_retain();
      swift_retain();
      v12 = 0;
      v56 = v11;
      while (1)
      {
        v13 = (unsigned int *)(v59 + 48 * v12);
        v14 = *v13;
        v15 = v13[1];
        v16 = v13[2];
        v17 = *((_QWORD *)v13 + 3);
        v68 = v12;
        v69 = *((_QWORD *)v13 + 2);
        v19 = *((_QWORD *)v13 + 4);
        v18 = *((_QWORD *)v13 + 5);
        if (v11)
        {
          v20 = *(os_unfair_lock_s **)(v18 + 376);
          swift_retain_n();
          os_unfair_lock_lock(v20);
          os_unfair_lock_lock(*(os_unfair_lock_t *)(v18 + 344));
          swift_release();
        }
        else
        {
          swift_retain();
        }
        ecs_stack_allocator_push_snapshot(v72);
        v65 = v10[7];
        v66 = v10[6];
        v64 = v10[8];
        v70 = v10[10];
        v71 = v10[9];
        v21 = v10[4];
        v22 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v18 + 40) + 16) + 32) + 16) + 1;
        swift_retain();
        v10[6] = ecs_stack_allocator_allocate(v21, 48 * v22, 8);
        v10[7] = v22;
        v57[1] = 0;
        v57[2] = 0;
        *v57 = 0;
        swift_release();
        v95[0] = v58;
        v67 = v18;
        v95[1] = v18;
        v95[2] = v10;
        v95[3] = v16;
        v95[4] = (v15 - v14 + v16);
        v95[5] = v62;
        v95[6] = v14;
        v95[7] = v15;
        v95[8] = 0;
        v95[9] = 0;
        v96 = 1;
        v97 = v69;
        v98 = v17;
        v99 = v19;
        a5(v95, v60);
        v23 = v10[6];
        v24 = v10[8];
        if (!v24)
        {
          v50 = v10[7];
          v51 = (_QWORD *)v10[4];
          v11 = v56;
          v52 = v68;
          goto LABEL_48;
        }
        for (i = 0; i != v24; ++i)
        {
          v27 = (uint64_t *)(v23 + 48 * i);
          v28 = *v27;
          v29 = (void (*)(uint64_t))v27[4];
          v30 = v10[9];
          if (v30)
            v31 = v28 == v30;
          else
            v31 = 0;
          if (v31 || !v74[11])
            goto LABEL_13;
          v32 = v74[9];
          v33 = (_QWORD *)(v73 + v74[8]);
          v34 = v27[2];
          v35 = v33;
          v36 = v32 >> 4;
          v37 = v73;
          if (v32 >= 0x10)
          {
            while (*v35 != v28)
            {
              ++v37;
              v35 += 2;
              if (!--v36)
                goto LABEL_28;
            }
            v38 = *(unsigned __int8 *)(v37 + v74[10]);
            v39 = v38 > 5;
            v40 = (1 << v38) & 0x23;
            if (v39 || v40 == 0)
            {
LABEL_13:
              v26 = swift_retain();
              v29(v26);
              swift_release();
              continue;
            }
          }
LABEL_28:
          if (swift_conformsToProtocol2())
            v42 = v34;
          else
            v42 = 0;
          if (v42)
          {
            if (v32 < 0x10)
              goto LABEL_13;
            v43 = v33;
            v44 = v32 >> 4;
            v45 = v73;
            while (*v43 != v42)
            {
              ++v45;
              v43 += 2;
              if (!--v44)
                goto LABEL_41;
            }
            v46 = *(unsigned __int8 *)(v45 + v74[10]);
            v39 = v46 > 5;
            v47 = (1 << v46) & 0x23;
            if (v39 || v47 == 0)
              goto LABEL_13;
LABEL_41:
            v49 = 16 * (v32 >> 4);
            while (*v33 != v42)
            {
              v33 += 2;
              v49 -= 16;
              if (!v49)
                goto LABEL_13;
            }
          }
        }
        v50 = v10[7];
        v23 = v10[6];
        v51 = (_QWORD *)v10[4];
        v11 = v56;
        v52 = v68;
        if ((uint64_t)v10[8] >= 1)
          swift_arrayDestroy();
LABEL_48:
        ecs_stack_allocator_deallocate(v51, v23, 48 * v50);
        v10[6] = v66;
        v10[7] = v65;
        v10[8] = v64;
        v10[9] = v71;
        v10[10] = v70;
        sub_1B1F03804((char *)v67);
        ecs_stack_allocator_pop_snapshot(v72);
        if ((v11 & 1) != 0)
        {
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v67 + 344));
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v67 + 376));
        }
        swift_release();
        v12 = v52 + 1;
        if (v12 == v61)
          goto LABEL_53;
      }
    }
    swift_retain();
    swift_retain();
    swift_retain();
LABEL_53:
    v55(v54);
    sub_1B19ED748(v76);
  }
  return sub_1B19ED748(v76);
}

_QWORD *sub_1B1A1A918(_QWORD *a1, uint64_t a2, uint64_t (*a3)(_QWORD), uint64_t (*a4)(_QWORD), unint64_t *a5, uint64_t (*a6)(uint64_t, _QWORD, unint64_t))
{
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *result;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  unsigned int *v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  float v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v40;
  uint64_t v41;
  void (*v42)(uint64_t, uint64_t, _QWORD *, uint64_t, uint64_t);
  uint64_t ObjectType;
  _QWORD v44[4];
  _OWORD v45[9];
  char v46;

  v8 = a3(0);
  v9 = (uint64_t *)a1[11];
  v10 = a1[12];
  v11 = a1[13];
  v12 = a1[2];
  v13 = sub_1B1A12038(v8, (uint64_t)&off_1E638CEA0, v9, v10, v11, v12);
  v14 = a4(0);
  v15 = sub_1B1A12038(v14, (uint64_t)&off_1E63AD5B0, v9, v10, v11, v12);
  v16 = sub_1B1A12038((uint64_t)&type metadata for AnimationTimeSource, (uint64_t)&off_1E6397740, v9, v10, v11, v12);
  v18 = a1[6];
  v17 = a1[7];
  result = ecs_stack_allocator_allocate(*(_QWORD *)(v12 + 32), 8 * (v17 - v18), 8);
  if (v17 != v18)
  {
    v20 = v13;
    v21 = 0;
    v22 = (_BYTE *)(v16 + 60 * v18 + 57);
    v23 = (unsigned int *)(v15 + (v18 << 6) + 52);
    v24 = v20 + 152 * v18;
    v40 = result;
    v41 = v17;
    do
    {
      if (*(v22 - 1) == 1)
      {
        v25 = *(_OWORD *)(v24 + 16);
        v45[0] = *(_OWORD *)v24;
        v45[1] = v25;
        v26 = *(_OWORD *)(v24 + 32);
        v27 = *(_OWORD *)(v24 + 48);
        v28 = *(_OWORD *)(v24 + 80);
        v45[4] = *(_OWORD *)(v24 + 64);
        v45[5] = v28;
        v45[2] = v26;
        v45[3] = v27;
        v29 = *(_OWORD *)(v24 + 96);
        v30 = *(_OWORD *)(v24 + 112);
        v31 = *(_OWORD *)(v24 + 128);
        v46 = *(_BYTE *)(v24 + 144);
        v45[7] = v30;
        v45[8] = v31;
        v45[6] = v29;
        if (*(_QWORD *)(v23 - 13))
        {
          v32 = *(float *)(v22 - 5);
          v33 = *(v23 - 1);
          v34 = *v23;
          if (__PAIR64__(v34, v33) != 0xFFFFFFFF)
          {
            swift_retain();
            sub_1B1A1B54C((uint64_t)v45);
            sub_1B1F33350((uint64_t *)(v23 - 11), v23 - 9, v32);
            if (*(_QWORD *)(v23 - 5))
            {
              v35 = *(_QWORD *)(v23 - 3);
              ObjectType = swift_getObjectType();
              sub_1B1A19D70(0, a5, a6);
              v44[3] = v36;
              v44[0] = swift_allocObject();
              *(_OWORD *)(v44[0] + 16) = *(_OWORD *)(v23 - 9);
              v42 = *(void (**)(uint64_t, uint64_t, _QWORD *, uint64_t, uint64_t))(v35 + 16);
              swift_unknownObjectRetain();
              v42(v33 | (v34 << 32), a2, v44, ObjectType, v35);
              swift_release();
              swift_unknownObjectRelease();
              _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v44);
            }
            else
            {
              swift_release();
            }
            sub_1B1A1B624((uint64_t)v45);
            result = v40;
            v17 = v41;
          }
        }
      }
      if (*v22 == 1)
        result[v21++] = v18;
      ++v18;
      v22 += 60;
      v23 += 16;
      v24 += 152;
    }
    while (v17 != v18);
  }
  return result;
}

uint64_t *sub_1B1A1AB9C(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *, uint64_t), uint64_t (*a4)(uint64_t), uint64_t (*a5)(_QWORD), uint64_t (*a6)(_QWORD), unint64_t *a7, uint64_t (*a8)(uint64_t, _QWORD, unint64_t))
{
  __int128 v12;
  _QWORD *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unsigned int *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  os_unfair_lock_s *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t i;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  void (*v33)(uint64_t);
  uint64_t v34;
  BOOL v35;
  unint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  unint64_t v40;
  uint64_t v41;
  unsigned int v42;
  BOOL v43;
  int v44;
  uint64_t v46;
  _QWORD *v47;
  unint64_t v48;
  uint64_t v49;
  unsigned int v50;
  int v51;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v59;
  void (*v60)(uint64_t);
  int v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unsigned __int16 *v82;
  uint64_t v83[12];
  uint64_t v84[8];
  _QWORD v85[7];
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  char v92;
  uint64_t v93;
  char v94;
  uint64_t v95;
  uint64_t v96;
  __int128 v97;
  __int128 v98;
  uint64_t v99;
  uint64_t v100;
  _OWORD v101[2];
  uint64_t v102;
  _QWORD v103[10];
  char v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  int v109;
  char v110;
  uint64_t v111;
  char v112;
  uint64_t v113;
  uint64_t v114;
  __int128 v115;
  __int128 v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  int v120;
  char v121;
  uint64_t v122;
  char v123;
  uint64_t v124;

  v12 = *(_OWORD *)(a1 + 16);
  v101[0] = *(_OWORD *)a1;
  v101[1] = v12;
  v102 = *(_QWORD *)(a1 + 32);
  v119 = *(_QWORD *)&v101[0];
  v120 = DWORD2(v101[0]);
  v121 = BYTE12(v101[0]);
  v122 = v12 | 4;
  v123 = 2;
  v124 = v102;
  swift_retain();
  sub_1B1E8FCE4(a2, (uint64_t)&v119, 0x200000000, v83);
  sub_1B1A18378((uint64_t)v83, (uint64_t)&v90, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (v90)
  {
    v108 = v90;
    v109 = v91;
    v110 = v92;
    v111 = v93;
    v112 = v94;
    v113 = v95;
    v114 = v96;
    v115 = v97;
    v116 = v98;
    v117 = v99;
    v118 = v100;
    swift_retain();
    a3(&v108, a2);
    swift_release();
    sub_1B19ED748(v83);
  }
  sub_1B1E8FCE4(a2, (uint64_t)v101, 0x200000000, v84);
  sub_1B1A18378((uint64_t)v84, (uint64_t)v85, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (!v85[0])
    return (uint64_t *)a4(a1);
  v68 = v89;
  if (v89 <= 0)
  {
    a4(a1);
  }
  else
  {
    v59 = a1;
    v60 = (void (*)(uint64_t))a4;
    v67 = v86;
    if (v86)
    {
      v65 = v85[5];
      v66 = a2;
      v13 = v88;
      v14 = v88[4];
      v64 = v87;
      v15 = *(unsigned __int8 *)(v87 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
      v62 = v88 + 8;
      v81 = v85[0] + 41;
      v82 = (unsigned __int16 *)v85[0];
      swift_retain();
      swift_retain();
      swift_retain();
      v16 = 0;
      v61 = v15;
      v63 = v14;
      while (1)
      {
        v17 = (unsigned int *)(v65 + 48 * v16);
        v18 = *v17;
        v19 = v17[1];
        v20 = v17[2];
        v77 = v16;
        v78 = *((_QWORD *)v17 + 2);
        v21 = *((_QWORD *)v17 + 3);
        v22 = *((_QWORD *)v17 + 4);
        v23 = *((_QWORD *)v17 + 5);
        if (v15)
        {
          v24 = *(os_unfair_lock_s **)(v23 + 376);
          swift_retain_n();
          os_unfair_lock_lock(v24);
          os_unfair_lock_lock(*(os_unfair_lock_t *)(v23 + 344));
          swift_release();
        }
        else
        {
          swift_retain();
        }
        ecs_stack_allocator_push_snapshot(v14);
        v73 = v13[7];
        v74 = v13[6];
        v76 = v13[8];
        v79 = v13[10];
        v80 = v13[9];
        v25 = v13[4];
        v26 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v23 + 40) + 16) + 32) + 16) + 1;
        swift_retain();
        v13[6] = ecs_stack_allocator_allocate(v25, 48 * v26, 8);
        v13[7] = v26;
        v62[1] = 0;
        v62[2] = 0;
        *v62 = 0;
        swift_release();
        v103[0] = v64;
        v75 = v23;
        v103[1] = v23;
        v103[2] = v13;
        v103[3] = v20;
        v103[4] = (v19 - v18 + v20);
        v103[5] = v68;
        v103[6] = v18;
        v103[7] = v19;
        v103[8] = 0;
        v103[9] = 0;
        v104 = 1;
        v105 = v78;
        v106 = v21;
        v107 = v22;
        sub_1B1A1A918(v103, v66, a5, a6, a7, a8);
        v27 = v13[6];
        v28 = v13[8];
        if (!v28)
        {
          v54 = v13[7];
          v55 = (_QWORD *)v13[4];
          v15 = v61;
          v57 = v76;
          v56 = v77;
          goto LABEL_48;
        }
        for (i = 0; i != v28; ++i)
        {
          v31 = (uint64_t *)(v27 + 48 * i);
          v32 = *v31;
          v33 = (void (*)(uint64_t))v31[4];
          v34 = v13[9];
          if (v34)
            v35 = v32 == v34;
          else
            v35 = 0;
          if (v35 || !v82[11])
            goto LABEL_13;
          v36 = v82[9];
          v37 = (_QWORD *)(v81 + v82[8]);
          v38 = v31[2];
          v39 = v37;
          v40 = v36 >> 4;
          v41 = v81;
          if (v36 >= 0x10)
          {
            while (*v39 != v32)
            {
              ++v41;
              v39 += 2;
              if (!--v40)
                goto LABEL_28;
            }
            v42 = *(unsigned __int8 *)(v41 + v82[10]);
            v43 = v42 > 5;
            v44 = (1 << v42) & 0x23;
            if (v43 || v44 == 0)
            {
LABEL_13:
              v30 = swift_retain();
              v33(v30);
              swift_release();
              continue;
            }
          }
LABEL_28:
          if (swift_conformsToProtocol2())
            v46 = v38;
          else
            v46 = 0;
          if (v46)
          {
            if (v36 < 0x10)
              goto LABEL_13;
            v47 = v37;
            v48 = v36 >> 4;
            v49 = v81;
            while (*v47 != v46)
            {
              ++v49;
              v47 += 2;
              if (!--v48)
                goto LABEL_41;
            }
            v50 = *(unsigned __int8 *)(v49 + v82[10]);
            v43 = v50 > 5;
            v51 = (1 << v50) & 0x23;
            if (v43 || v51 == 0)
              goto LABEL_13;
LABEL_41:
            v53 = 16 * (v36 >> 4);
            while (*v37 != v46)
            {
              v37 += 2;
              v53 -= 16;
              if (!v53)
                goto LABEL_13;
            }
          }
        }
        v54 = v13[7];
        v27 = v13[6];
        v55 = (_QWORD *)v13[4];
        v15 = v61;
        v57 = v76;
        v56 = v77;
        if ((uint64_t)v13[8] >= 1)
          swift_arrayDestroy();
LABEL_48:
        ecs_stack_allocator_deallocate(v55, v27, 48 * v54);
        v13[6] = v74;
        v13[7] = v73;
        v13[8] = v57;
        v13[9] = v80;
        v13[10] = v79;
        sub_1B1F03804((char *)v75);
        v14 = v63;
        ecs_stack_allocator_pop_snapshot(v63);
        if ((v15 & 1) != 0)
        {
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v75 + 344));
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v75 + 376));
        }
        swift_release();
        v16 = v56 + 1;
        if (v16 == v67)
          goto LABEL_53;
      }
    }
    swift_retain();
    swift_retain();
    swift_retain();
LABEL_53:
    v60(v59);
    sub_1B19ED748(v84);
  }
  return sub_1B19ED748(v84);
}

void sub_1B1A1B168(uint64_t a1)
{
  uint64_t (*v2)(void);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!qword_1ED4B90A0)
  {
    v2 = MEMORY[0x1E0DEDDA8];
    sub_1B1A19D70(255, (unint64_t *)&qword_1ED4BB0E0, (uint64_t (*)(uint64_t, _QWORD, unint64_t))MEMORY[0x1E0DEDDA8]);
    v4 = v3;
    v5 = sub_1B1A19C00((unint64_t *)&unk_1ED4BB0D0, (unint64_t *)&qword_1ED4BB0E0, (uint64_t (*)(uint64_t, _QWORD, unint64_t))v2, (uint64_t)&unk_1B22B9A78);
    v7 = type metadata accessor for KeyframeAnimation(a1, v4, v5, v6);
    if (!v8)
      atomic_store(v7, (unint64_t *)&qword_1ED4B90A0);
  }
}

void sub_1B1A1B200(uint64_t a1)
{
  uint64_t (*v2)(void);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!qword_1EEF58B20[0])
  {
    v2 = MEMORY[0x1E0DEDDA8];
    sub_1B1A19D70(255, (unint64_t *)&qword_1ED4BB0E0, (uint64_t (*)(uint64_t, _QWORD, unint64_t))MEMORY[0x1E0DEDDA8]);
    v4 = v3;
    v5 = sub_1B1A19C00((unint64_t *)&unk_1ED4BB0D0, (unint64_t *)&qword_1ED4BB0E0, (uint64_t (*)(uint64_t, _QWORD, unint64_t))v2, (uint64_t)&unk_1B22B9A78);
    v7 = type metadata accessor for KeyframeAnimationRuntime(a1, v4, v5, v6);
    if (!v8)
      atomic_store(v7, qword_1EEF58B20);
  }
}

void sub_1B1A1B298(uint64_t a1)
{
  uint64_t (*v2)(void);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!qword_1ED4B9098)
  {
    v2 = MEMORY[0x1E0DEDD50];
    sub_1B1A19D70(255, (unint64_t *)&qword_1ED4BB0A0, (uint64_t (*)(uint64_t, _QWORD, unint64_t))MEMORY[0x1E0DEDD50]);
    v4 = v3;
    v5 = sub_1B1A19C00(&qword_1ED4BB098, (unint64_t *)&qword_1ED4BB0A0, (uint64_t (*)(uint64_t, _QWORD, unint64_t))v2, (uint64_t)&unk_1B22B9A50);
    v7 = type metadata accessor for KeyframeAnimation(a1, v4, v5, v6);
    if (!v8)
      atomic_store(v7, (unint64_t *)&qword_1ED4B9098);
  }
}

void sub_1B1A1B330(uint64_t a1)
{
  uint64_t (*v2)(void);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!qword_1EEF652C0)
  {
    v2 = MEMORY[0x1E0DEDD50];
    sub_1B1A19D70(255, (unint64_t *)&qword_1ED4BB0A0, (uint64_t (*)(uint64_t, _QWORD, unint64_t))MEMORY[0x1E0DEDD50]);
    v4 = v3;
    v5 = sub_1B1A19C00(&qword_1ED4BB098, (unint64_t *)&qword_1ED4BB0A0, (uint64_t (*)(uint64_t, _QWORD, unint64_t))v2, (uint64_t)&unk_1B22B9A50);
    v7 = type metadata accessor for KeyframeAnimationRuntime(a1, v4, v5, v6);
    if (!v8)
      atomic_store(v7, (unint64_t *)&qword_1EEF652C0);
  }
}

void sub_1B1A1B3C8(uint64_t a1)
{
  uint64_t (*v2)(uint64_t, _QWORD, unint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!qword_1ED4B9090)
  {
    v2 = (uint64_t (*)(uint64_t, _QWORD, unint64_t))MEMORY[0x1E0DEDD20];
    sub_1B1A19D70(255, &qword_1ED4BB080, MEMORY[0x1E0DEDD20]);
    v4 = v3;
    v5 = sub_1B1A19C00((unint64_t *)&unk_1ED4BB070, &qword_1ED4BB080, v2, (uint64_t)&unk_1B22B9A28);
    v7 = type metadata accessor for KeyframeAnimation(a1, v4, v5, v6);
    if (!v8)
      atomic_store(v7, (unint64_t *)&qword_1ED4B9090);
  }
}

void sub_1B1A1B460(uint64_t a1)
{
  uint64_t (*v2)(uint64_t, _QWORD, unint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!qword_1EEF652D0)
  {
    v2 = (uint64_t (*)(uint64_t, _QWORD, unint64_t))MEMORY[0x1E0DEDD20];
    sub_1B1A19D70(255, &qword_1ED4BB080, MEMORY[0x1E0DEDD20]);
    v4 = v3;
    v5 = sub_1B1A19C00((unint64_t *)&unk_1ED4BB070, &qword_1ED4BB080, v2, (uint64_t)&unk_1B22B9A28);
    v7 = type metadata accessor for KeyframeAnimationRuntime(a1, v4, v5, v6);
    if (!v8)
      atomic_store(v7, (unint64_t *)&qword_1EEF652D0);
  }
}

void sub_1B1A1B4F8(uint64_t a1, unint64_t *a2, uint64_t (*a3)(_QWORD, _QWORD, _UNKNOWN **))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    v4 = a3(0, MEMORY[0x1E0DEB188], &off_1E63C66D8);
    if (!v5)
      atomic_store(v4, a2);
  }
}

uint64_t sub_1B1A1B54C(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1B1A1B624(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

void sub_1B1A1B6FC(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  if (!*a2)
  {
    v9 = a3(255);
    v10 = a5(a1, v9, a4);
    if (!v11)
      atomic_store(v10, a2);
  }
}

__n128 initializeWithCopy for _ClassContextDescriptor(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 28) = *(_OWORD *)(a2 + 28);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for _ClassContextDescriptor(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 44))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for _ClassContextDescriptor(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 40) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 44) = v3;
  return result;
}

ValueMetadata *type metadata accessor for _ClassContextDescriptor()
{
  return &type metadata for _ClassContextDescriptor;
}

ValueMetadata *type metadata accessor for _StructContextDescriptor()
{
  return &type metadata for _StructContextDescriptor;
}

uint64_t sub_1B1A1B7EC()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t type metadata accessor for ContextDescriptor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B19E5E34(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ContextDescriptor);
}

uint64_t sub_1B1A1B800(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v9;

  v5 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1, a1);
  v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v5 + 16))(v7);
  LODWORD(a3) = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 16))(a2, a3);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, a2);
  return (int)a3;
}

uint64_t sub_1B1A1B894(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v9;

  v5 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1, a1);
  v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v5 + 16))(v7);
  LODWORD(a3) = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 24))(a2, a3);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, a2);
  return (int)a3;
}

uint64_t sub_1B1A1B928(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v9;

  v5 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1, a1);
  v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v5 + 16))(v7);
  LODWORD(a3) = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 40))(a2, a3);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, a2);
  return (int)a3;
}

uint64_t sub_1B1A1B9BC(uint64_t a1)
{
  uint64_t *v1;

  return sub_1B1A1B800(*v1, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
}

uint64_t sub_1B1A1B9CC(uint64_t a1)
{
  uint64_t *v1;

  return sub_1B1A1B894(*v1, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
}

uint64_t sub_1B1A1B9DC(uint64_t a1)
{
  uint64_t *v1;

  return sub_1B1A1B928(*v1, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
}

uint64_t sub_1B1A1B9EC()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

BOOL sub_1B1A1B9F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = MEMORY[0x1B5E23E74](&unk_1B226E208, a3);
  return sub_1B1EE41B0(a1, a2, a3, v6);
}

uint64_t sub_1B1A1BA40(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x1B5E23E74](&unk_1B226E1E0);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1B1A1BA6C()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 20);
}

uint64_t sub_1B1A1BA74()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 24);
}

uint64_t sub_1B1A1BA7C()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 16);
}

uint64_t sub_1B1A1BA84()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 36);
}

uint64_t sub_1B1A1BA8C()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 40);
}

uint64_t sub_1B1A1BA94()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t type metadata accessor for WeakReference(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B19E5E34(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for WeakReference);
}

uint64_t sub_1B1A1BABC(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;

  v2 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x1E0DEE9D8];
  if (v2)
  {
    v11 = MEMORY[0x1E0DEE9D8];
    sub_1B2229550();
    v4 = sub_1B1C0754C(a1);
    v5 = 0;
    v6 = a1 + 64;
    while (1)
    {
      swift_retain();
      sub_1B2229520();
      sub_1B2229568();
      sub_1B2229574();
      sub_1B2229538();
      v7 = v4 >> 6;
      if ((*(_QWORD *)(v6 + 8 * (v4 >> 6)) & (-2 << v4)) != 0)
      {
        v4 = __clz(__rbit64(*(_QWORD *)(v6 + 8 * (v4 >> 6)) & (-2 << v4))) | v4 & 0xFFFFFFFFFFFFFFC0;
      }
      else
      {
        v4 = 1 << *(_BYTE *)(a1 + 32);
        v8 = v7 + 1;
        v9 = (v4 + 63) >> 6;
        if (v7 + 1 < v9)
        {
          v10 = *(_QWORD *)(v6 + 8 * v8);
          if (!v10)
          {
            v8 = v7 + 2;
            if (v7 + 2 >= v9)
              goto LABEL_4;
            v10 = *(_QWORD *)(v6 + 8 * v8);
            if (!v10)
            {
              while (v9 - 3 != v7)
              {
                v10 = *(_QWORD *)(a1 + 88 + 8 * v7++);
                if (v10)
                {
                  v8 = v7 + 2;
                  goto LABEL_8;
                }
              }
              goto LABEL_4;
            }
          }
LABEL_8:
          v4 = __clz(__rbit64(v10)) + (v8 << 6);
        }
      }
LABEL_4:
      if (++v5 == v2)
        return v11;
    }
  }
  return result;
}

_QWORD *sub_1B1A1BC34(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v5;

  v2[2] = 0;
  v2[3] = 0;
  v5 = MEMORY[0x1E0DEE9D8];
  v2[4] = &unk_1E63A2DF0;
  v2[5] = v5;
  v2[6] = sub_1B1B7DF20(v5);
  v2[7] = 0;
  v2[2] = a1;
  v2[3] = a2;
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t sub_1B1A1BC8C(_QWORD *a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, uint64_t *a6, _BYTE *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v14;
  double v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t result;
  unint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  int64_t v31;
  unint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t *v53;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v55;
  char v56;
  unint64_t v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t *v64;
  uint64_t *v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  char v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  uint64_t v82;
  uint64_t v83;
  char v84;
  _QWORD v85[2];
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  _BYTE *v89;
  uint64_t *v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t *v93;
  unint64_t v94;
  uint64_t v95;
  _QWORD v96[2];
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;

  v89 = a7;
  v90 = a8;
  v93 = a6;
  v101 = sub_1B2227DA4();
  v95 = *(_QWORD *)(v101 - 8);
  v15 = MEMORY[0x1E0C80A78](v101, v14);
  v17 = (char *)v85 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x1B5E20388](*a1, a1[1], a1[2], a1[3], v15);
  v20 = v19;
  v99 = v18;
  v100 = v19;
  v91 = a2;
  v92 = a3;
  v97 = a2;
  v98 = a3;
  sub_1B1A2044C();
  sub_1B1A20490();
  swift_bridgeObjectRetain();
  if ((sub_1B222862C() & 1) == 0)
  {
    v99 = v18;
    v100 = v20;
    v97 = 12079;
    v98 = 0xE200000000000000;
    if ((sub_1B222862C() & 1) != 0)
      return swift_bridgeObjectRelease_n();
  }
  v88 = v8;
  v99 = v18;
  v100 = v20;
  v97 = v91;
  v98 = v92;
  if ((sub_1B222862C() & 1) == 0)
  {
    v87 = v20;
    v47 = v93[1];
    if (!v47)
      return swift_bridgeObjectRelease_n();
    v48 = *v93;
    v49 = v87;
    v99 = v18;
    v100 = v87;
    v97 = 8995;
    v98 = 0xE200000000000000;
    sub_1B1A06460();
    swift_bridgeObjectRetain();
    *v89 = (*v89 | sub_1B2229274()) & 1;
    v99 = v18;
    v100 = v49;
    v97 = 8995;
    v98 = 0xE200000000000000;
    strcpy((char *)v96, "_%SCRIPT_ID%");
    BYTE5(v96[1]) = 0;
    HIWORD(v96[1]) = -5120;
    v50 = sub_1B222922C();
    v52 = v51;
    swift_bridgeObjectRelease();
    v99 = v50;
    v100 = v52;
    sub_1B2228890();
    swift_bridgeObjectRetain();
    v53 = v90;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v97 = *v53;
    v55 = v97;
    *v53 = 0x8000000000000000;
    swift_bridgeObjectRetain();
    v57 = sub_1B1DC3B00(v48, v47);
    v58 = v56;
    v59 = *(_QWORD *)(v55 + 16) + ((v56 & 1) == 0);
    if (*(_QWORD *)(v55 + 24) < v59)
    {
      sub_1B1E91634(v59, isUniquelyReferenced_nonNull_native);
      v60 = sub_1B1DC3B00(v48, v47);
      if ((v58 & 1) != (v61 & 1))
      {
LABEL_39:
        result = sub_1B2229FC4();
        __break(1u);
        return result;
      }
      v57 = v60;
      if ((v58 & 1) == 0)
        goto LABEL_18;
LABEL_23:
      v64 = (uint64_t *)(*(_QWORD *)(v97 + 56) + 16 * v57);
      v62 = *v64;
      v63 = v64[1];
      goto LABEL_24;
    }
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      if ((v56 & 1) != 0)
        goto LABEL_23;
    }
    else
    {
      sub_1B1EA8664();
      if ((v58 & 1) != 0)
        goto LABEL_23;
    }
LABEL_18:
    v62 = 0;
    v63 = 0;
LABEL_24:
    v99 = v62;
    v100 = v63;
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B1C070D0(&v99, v58 & 1, &v97, v57, v48, v47);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *v90 = v97;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  v99 = v18;
  v100 = v20;
  v97 = a4;
  v98 = a5;
  v22 = sub_1B1A06460();
  if ((sub_1B2229274() & 1) != 0)
  {
    v99 = v18;
    v100 = v20;
    v97 = a4;
    v98 = a5;
    v23 = (_QWORD *)sub_1B2229214();
    swift_bridgeObjectRelease();
    v24 = v23[5];
    v99 = v23[4];
    v100 = v24;
    swift_bridgeObjectRetain();
    v86 = sub_1B2228968();
    v26 = v25;
    swift_bridgeObjectRelease();
    v87 = v26;
    v28 = v23[6];
    v27 = v23[7];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v99 = v28;
    v100 = v27;
    v99 = sub_1B2228968();
    v100 = v29;
    v30 = sub_1B2229280();
    swift_bridgeObjectRelease();
    v31 = *(_QWORD *)(v30 + 16);
    v32 = v22;
    if (v31)
    {
      v97 = MEMORY[0x1E0DEE9D8];
      sub_1B2029FFC(0, v31, 0);
      v85[1] = v30;
      v33 = (uint64_t *)(v30 + 56);
      v94 = v32;
      do
      {
        v35 = *(v33 - 3);
        v34 = *(v33 - 2);
        v36 = *(v33 - 1);
        v37 = *v33;
        swift_bridgeObjectRetain();
        v99 = MEMORY[0x1B5E20388](v35, v34, v36, v37);
        v100 = v38;
        v96[0] = &unk_1E63A2CE0;
        sub_1B1A1F838(&qword_1EEF58C00, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAE4B8], MEMORY[0x1E0CAE4D0]);
        sub_1B1A02758(0, &qword_1EEF58C08, MEMORY[0x1E0DEE720], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
        sub_1B1A204D4();
        v39 = v101;
        sub_1B2229364();
        v40 = sub_1B2229220();
        v42 = v41;
        (*(void (**)(char *, uint64_t))(v95 + 8))(v17, v39);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v43 = v97;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1B2029FFC(0, *(_QWORD *)(v43 + 16) + 1, 1);
          v43 = v97;
        }
        v45 = *(_QWORD *)(v43 + 16);
        v44 = *(_QWORD *)(v43 + 24);
        if (v45 >= v44 >> 1)
        {
          sub_1B2029FFC(v44 > 1, v45 + 1, 1);
          v43 = v97;
        }
        *(_QWORD *)(v43 + 16) = v45 + 1;
        v46 = v43 + 16 * v45;
        *(_QWORD *)(v46 + 32) = v40;
        *(_QWORD *)(v46 + 40) = v42;
        v33 += 4;
        --v31;
      }
      while (v31);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      v43 = MEMORY[0x1E0DEE9D8];
    }
    v20 = v87;
  }
  else
  {
    v86 = v18;
    swift_bridgeObjectRelease();
    v43 = 0;
  }
  v65 = v90;
  if (v93[1] && (*v89 & 1) == 0)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v99 = 0;
    v100 = 0xE000000000000000;
    sub_1B2229430();
    sub_1B2228890();
    sub_1B2228890();
    sub_1B2228890();
LABEL_38:
    sub_1B2229688();
    __break(1u);
    goto LABEL_39;
  }
  v99 = v86;
  v100 = v20;
  v97 = v91;
  v98 = v92;
  v66 = sub_1B2229214();
  v68 = *(_QWORD *)(v66 + 48);
  v67 = *(_QWORD *)(v66 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v99 = v68;
  v100 = v67;
  v99 = sub_1B2228968();
  v100 = v69;
  v97 = (uint64_t)&unk_1E63A2CB8;
  sub_1B1A1F838(&qword_1EEF58C00, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAE4B8], MEMORY[0x1E0CAE4D0]);
  sub_1B1A02758(0, &qword_1EEF58C08, MEMORY[0x1E0DEE720], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
  sub_1B1A204D4();
  v70 = v101;
  sub_1B2229364();
  v71 = sub_1B2229220();
  v73 = v72;
  (*(void (**)(char *, uint64_t))(v95 + 8))(v17, v70);
  swift_bridgeObjectRelease();
  v74 = v93;
  *v93 = v71;
  v74[1] = v73;
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(*v65 + 16))
  {
    v76 = *v74;
    v75 = v74[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1B1DC3B00(v76, v75);
    v78 = v77;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v78 & 1) != 0)
    {
      swift_bridgeObjectRelease();
      v99 = 0;
      v100 = 0xE000000000000000;
      sub_1B2229430();
      swift_bridgeObjectRelease();
      v99 = 0xD000000000000020;
      v100 = 0x80000001B232C590;
      swift_bridgeObjectRetain();
      sub_1B2228890();
      swift_bridgeObjectRelease();
      goto LABEL_38;
    }
  }
  v79 = *v74;
  v80 = v74[1];
  swift_bridgeObjectRetain();
  v81 = swift_isUniquelyReferenced_nonNull_native();
  v99 = *v65;
  *v65 = 0x8000000000000000;
  sub_1B1B84788(0, 0xE000000000000000, v79, v80, v81);
  *v65 = v99;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v43)
  {
    v82 = *v74;
    v83 = v74[1];
    swift_bridgeObjectRetain();
    v84 = swift_isUniquelyReferenced_nonNull_native();
    v99 = v65[1];
    v65[1] = 0x8000000000000000;
    sub_1B1B85904(v43, v82, v83, v84);
    v65[1] = v99;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  result = swift_bridgeObjectRelease();
  *v89 = 0;
  return result;
}

uint64_t sub_1B1A1C6D8(char *a1, char *a2)
{
  return sub_1B1F95D48(*a1, *a2);
}

uint64_t sub_1B1A1C6E4()
{
  _BYTE *v0;

  if (*v0)
    return 0x7374657070696E73;
  else
    return 0x726F6C6F63;
}

uint64_t sub_1B1A1C71C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1B1A1FEF0(a1, a2);
  *a3 = result;
  return result;
}

void sub_1B1A1C740(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_1B1A1C74C()
{
  sub_1B1A1F64C();
  return sub_1B222A1D4();
}

uint64_t sub_1B1A1C774()
{
  sub_1B1A1F64C();
  return sub_1B222A1E0();
}

_QWORD *sub_1B1A1C79C(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t);
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t);
  _QWORD v21[8];

  v2 = v1;
  v4 = sub_1B22287A0();
  MEMORY[0x1E0C80A78](v4, v5);
  v6 = sub_1B2228110();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v1[2] = 0;
  v1[3] = 0;
  v11 = MEMORY[0x1E0DEE9D8];
  v1[4] = &unk_1E63A2D90;
  v1[5] = v11;
  v1[6] = sub_1B1B7DF20(v11);
  v1[7] = 0;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, a1, v6);
  sub_1B2228080();
  v21[6] = sub_1B222805C();
  v21[7] = v12;
  v21[4] = 1600285036;
  v21[5] = 0xE400000000000000;
  v21[2] = 0;
  v21[3] = 0xE000000000000000;
  sub_1B1A06460();
  v13 = sub_1B222922C();
  v15 = v14;
  swift_bridgeObjectRelease();
  v2[2] = v13;
  v2[3] = v15;
  swift_bridgeObjectRelease();
  sub_1B2228788();
  sub_1B2228704();
  v16 = sub_1B1A1F878();
  swift_bridgeObjectRelease();
  if (v16)
  {
    v17 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
    v17(a1, v6);
    v17((uint64_t)v10, v6);
    v2[4] = *(_QWORD *)(v16 + 32);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v18 = *(_QWORD *)(v16 + 40);
    swift_bridgeObjectRetain();
    swift_release();
    v2[5] = v18;
  }
  else
  {
    v19 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
    v19(a1, v6);
    v19((uint64_t)v10, v6);
    *((_OWORD *)v2 + 1) = xmmword_1B226E280;
  }
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t sub_1B1A1CB20()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t i;
  unint64_t v4;
  uint64_t v5;
  uint64_t j;
  unint64_t v7;
  uint64_t v8;
  uint64_t k;
  unint64_t v10;
  uint64_t v11;
  uint64_t m;

  sub_1B1A1CDE0();
  v1 = *(_QWORD *)(v0 + 40);
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain();
    v2 = sub_1B22296AC();
    if (!v2)
      goto LABEL_9;
  }
  else
  {
    v2 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v2)
      goto LABEL_9;
  }
  for (i = 0; i != v2; ++i)
  {
    if ((v1 & 0xC000000000000001) != 0)
      MEMORY[0x1B5E21018](i, v1);
    else
      swift_retain();
    sub_1B1ED4ACC();
    swift_release();
  }
LABEL_9:
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(v0 + 40);
  if (v4 >> 62)
  {
    swift_bridgeObjectRetain_n();
    v5 = sub_1B22296AC();
    if (!v5)
      goto LABEL_17;
  }
  else
  {
    v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain_n();
    if (!v5)
      goto LABEL_17;
  }
  for (j = 0; j != v5; ++j)
  {
    if ((v4 & 0xC000000000000001) != 0)
      MEMORY[0x1B5E21018](j, v4);
    else
      swift_retain();
    sub_1B1ED65AC();
    swift_release();
  }
LABEL_17:
  swift_bridgeObjectRelease_n();
  sub_1B1A1CF1C();
  sub_1B1A1D2A4();
  v7 = *(_QWORD *)(v0 + 40);
  if (v7 >> 62)
  {
    swift_bridgeObjectRetain_n();
    v8 = sub_1B22296AC();
    if (!v8)
      goto LABEL_25;
  }
  else
  {
    v8 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain_n();
    if (!v8)
      goto LABEL_25;
  }
  for (k = 0; k != v8; ++k)
  {
    if ((v7 & 0xC000000000000001) != 0)
      MEMORY[0x1B5E21018](k, v7);
    else
      swift_retain();
    sub_1B1ED3EC4();
    swift_release();
  }
LABEL_25:
  swift_bridgeObjectRelease_n();
  v10 = *(_QWORD *)(v0 + 40);
  if (v10 >> 62)
  {
    swift_bridgeObjectRetain_n();
    v11 = sub_1B22296AC();
    if (!v11)
      return swift_bridgeObjectRelease_n();
  }
  else
  {
    v11 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain_n();
    if (!v11)
      return swift_bridgeObjectRelease_n();
  }
  for (m = 0; m != v11; ++m)
  {
    if ((v10 & 0xC000000000000001) != 0)
      MEMORY[0x1B5E21018](m, v10);
    else
      swift_retain();
    sub_1B1ED5694();
    swift_release();
  }
  return swift_bridgeObjectRelease_n();
}

uint64_t sub_1B1A1CDE0()
{
  _QWORD *v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v1 = v0[5];
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain();
    v2 = sub_1B22296AC();
    if (!v2)
      return swift_bridgeObjectRelease();
  }
  else
  {
    v2 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v2)
      return swift_bridgeObjectRelease();
  }
  if ((v1 & 0xC000000000000001) != 0)
  {
    v3 = 0;
    do
    {
      v4 = (_QWORD *)MEMORY[0x1B5E21018](v3++, v1);
      v5 = v0[3];
      v4[42] = v0[2];
      v4[43] = v5;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v4[44] = v0[4];
      swift_bridgeObjectRetain();
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
    }
    while (v2 != v3);
  }
  else
  {
    v6 = 0;
    do
    {
      v7 = *(_QWORD **)(v1 + 8 * v6++ + 32);
      v8 = v0[3];
      v7[42] = v0[2];
      v7[43] = v8;
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v7[44] = v0[4];
      swift_bridgeObjectRetain();
      swift_release();
      swift_bridgeObjectRelease();
    }
    while (v2 != v6);
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B1A1CF1C()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t i;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v23;
  _QWORD v24[2];

  v1 = v0;
  _s7ContextCMa();
  swift_allocObject();
  v2 = sub_1B1DE8210(0);
  v3 = v0[5];
  v4 = MEMORY[0x1E0DEE9D8];
  v24[0] = MEMORY[0x1E0DEE9D8];
  if (v3 >> 62)
  {
    swift_bridgeObjectRetain();
    v5 = sub_1B22296AC();
    if (v5)
      goto LABEL_3;
  }
  else
  {
    v5 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v5)
    {
LABEL_3:
      v6 = 0;
      while (1)
      {
        if ((v3 & 0xC000000000000001) != 0)
        {
          if (!*(_QWORD *)(MEMORY[0x1B5E21018](v6, v3) + 144))
            goto LABEL_10;
        }
        else
        {
          v7 = *(_QWORD *)(v3 + 8 * v6 + 32);
          swift_retain();
          if (!*(_QWORD *)(v7 + 144))
          {
LABEL_10:
            swift_release();
            goto LABEL_5;
          }
        }
        sub_1B2229520();
        sub_1B2229568();
        sub_1B2229574();
        sub_1B2229538();
LABEL_5:
        if (v5 == ++v6)
        {
          swift_bridgeObjectRelease();
          v8 = v24[0];
          v4 = MEMORY[0x1E0DEE9D8];
          goto LABEL_14;
        }
      }
    }
  }
  swift_bridgeObjectRelease();
  v8 = MEMORY[0x1E0DEE9D8];
LABEL_14:
  v9 = v0[5];
  v24[0] = v4;
  if (v9 >> 62)
  {
    swift_bridgeObjectRetain();
    v10 = sub_1B22296AC();
    if (v10)
      goto LABEL_16;
LABEL_26:
    swift_bridgeObjectRelease();
    v13 = MEMORY[0x1E0DEE9D8];
    goto LABEL_27;
  }
  v10 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v10)
    goto LABEL_26;
LABEL_16:
  for (i = 0; i != v10; ++i)
  {
    if ((v9 & 0xC000000000000001) != 0)
    {
      if (!*(_QWORD *)(MEMORY[0x1B5E21018](i, v9) + 144))
        goto LABEL_17;
    }
    else
    {
      v12 = *(_QWORD *)(v9 + 8 * i + 32);
      swift_retain();
      if (!*(_QWORD *)(v12 + 144))
      {
LABEL_17:
        sub_1B2229520();
        sub_1B2229568();
        sub_1B2229574();
        sub_1B2229538();
        continue;
      }
    }
    swift_release();
  }
  swift_bridgeObjectRelease();
  v13 = v24[0];
LABEL_27:
  v0[5] = v13;
  swift_bridgeObjectRelease();
  if (v8 < 0 || (v8 & 0x4000000000000000) != 0)
  {
    swift_retain();
    v14 = sub_1B22296AC();
    if (!v14)
      goto LABEL_42;
LABEL_30:
    v15 = 0;
    v16 = v8 & 0xC000000000000001;
    v23 = v14;
    while (1)
    {
      if (v16)
      {
        v17 = MEMORY[0x1B5E21018](v15, v8);
        v18 = *(_QWORD *)(v17 + 144);
        if (!v18)
          goto LABEL_31;
      }
      else
      {
        v17 = *(_QWORD *)(v8 + 32 + 8 * v15);
        swift_retain();
        v18 = *(_QWORD *)(v17 + 144);
        if (!v18)
          goto LABEL_31;
      }
      v19 = *(_QWORD *)(v18 + 16);
      if (v19)
      {
        swift_bridgeObjectRetain();
        v20 = (uint64_t *)(v18 + 40);
        do
        {
          v21 = *v20;
          v24[0] = *(v20 - 1);
          v24[1] = v21;
          swift_bridgeObjectRetain();
          sub_1B1A1DA14((uint64_t)v24, v17, (uint64_t)v2, v1);
          swift_bridgeObjectRelease();
          v20 += 2;
          --v19;
        }
        while (v19);
        swift_release();
        swift_bridgeObjectRelease();
        v16 = v8 & 0xC000000000000001;
        v14 = v23;
        goto LABEL_32;
      }
LABEL_31:
      swift_release();
LABEL_32:
      if (++v15 == v14)
        goto LABEL_42;
    }
  }
  v14 = *(_QWORD *)(v8 + 16);
  swift_retain();
  if (v14)
    goto LABEL_30;
LABEL_42:
  swift_release();
  return swift_release_n();
}

uint64_t sub_1B1A1D2A4()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t *v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v1 = *(_QWORD *)(v0 + 40);
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain_n();
    v2 = sub_1B22296AC();
    if (v2)
      goto LABEL_3;
LABEL_21:
    swift_bridgeObjectRelease_n();
    v17 = swift_bridgeObjectRetain();
    v18 = sub_1B1A1BABC(v17);
    swift_bridgeObjectRelease();
    *(_QWORD *)(v20 + 40) = v18;
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  v2 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain_n();
  if (!v2)
    goto LABEL_21;
LABEL_3:
  v3 = 0;
  v22 = v1 & 0xC000000000000001;
  v4 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  v21 = v1;
  while (1)
  {
    if (v22)
    {
      v6 = MEMORY[0x1B5E21018](v3, v1);
    }
    else
    {
      v6 = *(_QWORD *)(v1 + 8 * v3 + 32);
      swift_retain();
    }
    v23 = *(_QWORD *)(v6 + 16);
    v24 = *(_QWORD *)(v6 + 24);
    swift_bridgeObjectRetain();
    sub_1B2228890();
    sub_1B1ED4440();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    if (!v4[2])
      break;
    sub_1B1DC3B00(v23, v24);
    if ((v7 & 1) == 0)
      break;
    swift_retain();
    swift_bridgeObjectRelease();
    sub_1B1ED49D4(v6);
    swift_release();
    swift_release();
LABEL_6:
    if (v2 == ++v3)
      goto LABEL_21;
  }
  v8 = v2;
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v10 = sub_1B1DC3B00(v23, v24);
  v12 = v11;
  v13 = v4[2] + ((v11 & 1) == 0);
  if (v4[3] >= v13)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      sub_1B1EAA808();
    goto LABEL_18;
  }
  sub_1B1E95558(v13, isUniquelyReferenced_nonNull_native);
  v14 = sub_1B1DC3B00(v23, v24);
  if ((v12 & 1) == (v15 & 1))
  {
    v10 = v14;
LABEL_18:
    v2 = v8;
    v1 = v21;
    if ((v12 & 1) != 0)
    {
      v16 = v4[7];
      swift_release();
      *(_QWORD *)(v16 + 8 * v10) = v6;
    }
    else
    {
      v4[(v10 >> 6) + 8] |= 1 << v10;
      v5 = (uint64_t *)(v4[6] + 16 * v10);
      *v5 = v23;
      v5[1] = v24;
      *(_QWORD *)(v4[7] + 8 * v10) = v6;
      ++v4[2];
      swift_bridgeObjectRetain();
    }
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_6;
  }
  result = sub_1B2229FC4();
  __break(1u);
  return result;
}

uint64_t sub_1B1A1D588(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  swift_bridgeObjectRetain();
  v9 = sub_1B207EC88();
  v11 = v10;
  v13 = v12;
  result = swift_bridgeObjectRelease();
  if (v13)
  {
    v15 = *a8;
    v16 = a8[1];
    v17 = a8[2];
    *a8 = v9;
    a8[1] = v11;
    a8[2] = v13;
    return sub_1B1A2027C(v15, v16, v17);
  }
  return result;
}

uint64_t sub_1B1A1D634(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  _QWORD *v6;

  v6 = sub_1B1B7E38C(MEMORY[0x1E0DEE9D8]);
  v4 = swift_bridgeObjectRetain();
  sub_1B1A1FB40(v4, (void (*)(uint64_t, uint64_t, uint64_t))sub_1B1A202AC);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a3 + 40) = v6;
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B1A1D6E0(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD **a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9)
{
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;

  v13 = *(_QWORD *)(a3 + 24);
  v12 = *(_QWORD *)(a3 + 32);
  v14 = HIBYTE(v12) & 0xF;
  if ((v12 & 0x2000000000000000) == 0)
    v14 = v13 & 0xFFFFFFFFFFFFLL;
  if (v14 && (sub_1B1DB8EB4(v13, v12, *a4) & 1) == 0)
  {
    swift_bridgeObjectRetain();
    sub_1B1E8E23C(v13, v12);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    swift_retain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v19 = *a9;
    *a9 = 0x8000000000000000;
    sub_1B1B85920(a3, a1, a2, isUniquelyReferenced_nonNull_native);
    *a9 = v19;
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    if (qword_1ED4BF430 != -1)
      swift_once();
    v19 = 0;
    v20 = 0xE000000000000000;
    swift_retain();
    sub_1B2229430();
    sub_1B2228890();
    swift_bridgeObjectRetain();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    sub_1B2228890();
    sub_1B2228890();
    sub_1B2228890();
    sub_1B2228890();
    swift_bridgeObjectRetain();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    v17 = v19;
    v18 = sub_1B2228EA8();
    if (qword_1ED4BF658 != -1)
      swift_once();
    v19 = 0;
    swift_retain();
    sub_1B1F1AD70(v18, &v19, v17, v20);
    swift_release();
    swift_bridgeObjectRelease();
    return swift_release();
  }
}

uint64_t sub_1B1A1DA14(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  int64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  char v74;
  char v75;
  char v76;
  char v77;
  char v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;

  v5 = MEMORY[0x1E0DEE9D8];
  v94 = sub_1B1B7DF34(MEMORY[0x1E0DEE9D8]);
  v91 = sub_1B1B7DF34(v5);
  v6 = swift_bridgeObjectRetain();
  sub_1B1DF60EC(v6, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A202DC);
  v7 = a2;
  v8 = swift_bridgeObjectRelease();
  if (*(_QWORD *)(a2 + 224))
  {
    MEMORY[0x1E0C80A78](v8, v9);
    v10 = swift_bridgeObjectRetain();
    sub_1B1DF60EC(v10, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A202E8);
    swift_bridgeObjectRelease();
  }
  v11 = *(_QWORD *)(a2 + 24);
  v92 = *(_QWORD *)(a2 + 16);
  v93 = v11;
  sub_1B1A06460();
  v83 = sub_1B222922C();
  v84 = v12;
  v13 = *(_QWORD *)(a2 + 32);
  v14 = *(_QWORD *)(a2 + 40);
  if (v14)
  {
    v92 = *(_QWORD *)(a2 + 32);
    v93 = v14;
    v13 = sub_1B222922C();
    v81 = v15;
  }
  else
  {
    v81 = 0;
  }
  v82 = v13;
  v80 = *(_QWORD *)(a2 + 64);
  v78 = *(_BYTE *)(a2 + 105);
  v77 = *(_BYTE *)(a2 + 106);
  v76 = *(_BYTE *)(a2 + 107);
  v75 = *(_BYTE *)(a2 + 108);
  v74 = *(_BYTE *)(a2 + 109);
  v73 = *(_BYTE *)(a2 + 110);
  v72 = *(_QWORD *)(a2 + 112);
  v16 = *(_QWORD *)(a2 + 136);
  v79 = *(_QWORD *)(a2 + 72);
  v71 = *(_QWORD *)(a2 + 120);
  if (v16)
  {
    v92 = *(_QWORD *)(a2 + 128);
    v93 = v16;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v70 = sub_1B222922C();
    v69 = v17;
  }
  else
  {
    v70 = *(_QWORD *)(a2 + 128);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v69 = 0;
  }
  v18 = *(_QWORD *)(a2 + 168);
  v68 = *(_QWORD *)(a2 + 184);
  v66 = *(_QWORD *)(a2 + 192);
  v86 = a2;
  v67 = *(_QWORD *)(a2 + 152);
  v65 = *(_QWORD *)(a2 + 160);
  if (v18)
  {
    v19 = *(_QWORD *)(v18 + 16);
    if (v19)
    {
      v88 = MEMORY[0x1E0DEE9D8];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1B2029FFC(0, v19, 0);
      v20 = v18;
      v18 = v88;
      v21 = (uint64_t *)(v20 + 40);
      do
      {
        v22 = *v21;
        v92 = *(v21 - 1);
        v93 = v22;
        v23 = sub_1B222922C();
        v25 = v24;
        v27 = *(_QWORD *)(v88 + 16);
        v26 = *(_QWORD *)(v88 + 24);
        if (v27 >= v26 >> 1)
          sub_1B2029FFC(v26 > 1, v27 + 1, 1);
        v21 += 2;
        *(_QWORD *)(v88 + 16) = v27 + 1;
        v28 = v88 + 16 * v27;
        *(_QWORD *)(v28 + 32) = v23;
        *(_QWORD *)(v28 + 40) = v25;
        --v19;
      }
      while (v19);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v7 = v86;
    }
    else
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v18 = MEMORY[0x1E0DEE9D8];
    }
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  v29 = *(_QWORD *)(v7 + 208);
  v64 = v18;
  v63 = *(_QWORD *)(v7 + 200);
  if (v29)
  {
    v30 = v7;
    v31 = *(_QWORD *)(v29 + 16);
    if (v31)
    {
      v89 = MEMORY[0x1E0DEE9D8];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1B2029FFC(0, v31, 0);
      v32 = (uint64_t *)(v29 + 40);
      do
      {
        v33 = *v32;
        v92 = *(v32 - 1);
        v93 = v33;
        v34 = sub_1B222922C();
        v36 = v35;
        v38 = *(_QWORD *)(v89 + 16);
        v37 = *(_QWORD *)(v89 + 24);
        if (v38 >= v37 >> 1)
          sub_1B2029FFC(v37 > 1, v38 + 1, 1);
        v32 += 2;
        *(_QWORD *)(v89 + 16) = v38 + 1;
        v39 = v89 + 16 * v38;
        *(_QWORD *)(v39 + 32) = v34;
        *(_QWORD *)(v39 + 40) = v36;
        --v31;
      }
      while (v31);
      v61 = v89;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v7 = v86;
    }
    else
    {
      swift_bridgeObjectRetain();
      v61 = MEMORY[0x1E0DEE9D8];
      v7 = v30;
    }
  }
  else
  {
    swift_bridgeObjectRetain();
    v61 = 0;
  }
  v87 = v94;
  if (v91[2])
    v62 = swift_bridgeObjectRetain();
  else
    v62 = 0;
  v40 = *(_QWORD *)(v7 + 88);
  if (v40)
  {
    v41 = *(_QWORD *)(v40 + 16);
    if (v41)
    {
      v90 = MEMORY[0x1E0DEE9D8];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1B2029FFC(0, v41, 0);
      v42 = v90;
      v43 = (uint64_t *)(v40 + 40);
      do
      {
        v44 = *v43;
        v92 = *(v43 - 1);
        v93 = v44;
        v45 = sub_1B222922C();
        v47 = v46;
        v49 = *(_QWORD *)(v90 + 16);
        v48 = *(_QWORD *)(v90 + 24);
        if (v49 >= v48 >> 1)
          sub_1B2029FFC(v48 > 1, v49 + 1, 1);
        v43 += 2;
        *(_QWORD *)(v90 + 16) = v49 + 1;
        v50 = v90 + 16 * v49;
        *(_QWORD *)(v50 + 32) = v45;
        *(_QWORD *)(v50 + 40) = v47;
        --v41;
      }
      while (v41);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v7 = v86;
      v51 = (uint64_t)v87;
    }
    else
    {
      v51 = (uint64_t)v94;
      swift_bridgeObjectRetain();
      v42 = MEMORY[0x1E0DEE9D8];
    }
  }
  else
  {
    v51 = (uint64_t)v94;
    swift_bridgeObjectRetain();
    v42 = 0;
  }
  v52 = *(_QWORD *)(v7 + 96);
  sub_1B1A202F4(v7 + 248, (uint64_t)&v92);
  v54 = *(_QWORD *)(v7 + 288);
  v53 = *(_QWORD *)(v7 + 296);
  v55 = *(_BYTE *)(v7 + 304);
  _s17CodeSourceSnippetCMa();
  swift_allocObject();
  swift_bridgeObjectRetain();
  sub_1B19F8C58(&v92, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1A20350);
  swift_bridgeObjectRetain();
  HIBYTE(v60) = v73;
  BYTE2(v60) = v74;
  BYTE1(v60) = v75;
  LOBYTE(v60) = v76;
  v56 = (_QWORD *)sub_1B1ED7370(v83, v84, v82, v81, v80, v79, v78, v77, v60, v72, v71, v70, v69, v67, v68, v66, v65, v64, v63,
                    v61,
                    v51,
                    v62,
                    v42,
                    v52,
                    (uint64_t)&v92,
                    v54,
                    v53,
                    v55);
  v56[22] = *(_QWORD *)(v7 + 176);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v57 = a4[3];
  v56[42] = a4[2];
  v56[43] = v57;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v56[44] = a4[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v58 = swift_retain();
  MEMORY[0x1B5E2064C](v58);
  if (*(_QWORD *)((a4[5] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((a4[5] & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
    sub_1B2228AF4();
  sub_1B2228B30();
  sub_1B2228AD0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_release();
}

_QWORD *sub_1B1A1E438(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t a8)
{
  _QWORD *result;
  unint64_t v17;
  char v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  char v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  _OWORD v64[5];
  uint64_t v65;
  _OWORD v66[5];
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70[5];
  char v71[8];
  uint64_t v72;
  _QWORD v73[5];
  char v74[8];
  unint64_t v75;
  uint64_t v76;

  swift_bridgeObjectRetain();
  sub_1B1E0E85C(a5, a6, v70);
  result = (_QWORD *)sub_1B1A202F4((uint64_t)v70, (uint64_t)v71);
  if (v72 == 59)
    return result;
  v63 = a7;
  sub_1B19FA278((uint64_t)v71, (uint64_t)v73);
  swift_bridgeObjectRetain();
  v62 = a1;
  v17 = sub_1B2229730();
  swift_bridgeObjectRelease();
  if (v17 >= 3)
    return sub_1B19F8C58(v70, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1A20360);
  sub_1B19FA278((uint64_t)v73, (uint64_t)v74);
  if (v75 >= 0x3B)
  {
    if (!*(_QWORD *)(v76 + 16))
      return sub_1B19F8C58(v70, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1A20360);
    sub_1B1DC3C04(v17);
    if ((v18 & 1) == 0)
      return sub_1B19F8C58(v70, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1A20360);
    goto LABEL_14;
  }
  if (!(_BYTE)v17)
  {
    if ((sub_1B1C46734((uint64_t)v73) & 1) == 0)
      return sub_1B19F8C58(v70, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1A20360);
    goto LABEL_14;
  }
  if (v17 == 1)
  {
    if ((sub_1B1C46718((uint64_t)v73) & 1) == 0)
      return sub_1B19F8C58(v70, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1A20360);
    goto LABEL_14;
  }
  if ((sub_1B1C46B30((uint64_t)v73) & 1) == 0)
    return sub_1B19F8C58(v70, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1A20360);
LABEL_14:
  v60 = a8;
  v19 = sub_1B1C39C20((uint64_t)v73, v17);
  v21 = v20;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1B2228890();
  v61 = a4;
  sub_1B1A06460();
  sub_1B222922C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_1B2228890();
  v22 = sub_1B222922C();
  v24 = v23;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_QWORD *)&v66[0] = v22;
  *((_QWORD *)&v66[0] + 1) = v24;
  *(_QWORD *)&v64[0] = 0x254550595425;
  *((_QWORD *)&v64[0] + 1) = 0xE600000000000000;
  v68 = v19;
  v69 = v21;
  v25 = sub_1B222922C();
  v27 = v26;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)&v66[0] = *v63;
  *v63 = 0x8000000000000000;
  sub_1B1B84788(v25, v27, v62, a2, isUniquelyReferenced_nonNull_native);
  *v63 = *(_QWORD *)&v66[0];
  v29 = a4;
  swift_bridgeObjectRelease();
  v30 = a3;
  swift_bridgeObjectRelease();
  *(_QWORD *)&v66[0] = a3;
  *((_QWORD *)&v66[0] + 1) = a4;
  *(_QWORD *)&v64[0] = 0xD000000000000014;
  *((_QWORD *)&v64[0] + 1) = 0x80000001B232C480;
  if ((sub_1B2229274() & 1) != 0)
  {
    sub_1B1E02E1C(v73, 1, (uint64_t)v64);
    if (*((_QWORD *)&v64[0] + 1))
    {
      v66[2] = v64[2];
      v66[3] = v64[3];
      v66[4] = v64[4];
      v67 = v65;
      v66[0] = v64[0];
      v66[1] = v64[1];
      swift_retain();
      v31 = sub_1B1B7DF34(MEMORY[0x1E0DEE9D8]);
      _s7ContextC14GenerationDataCMa();
      swift_allocObject();
      v32 = sub_1B1DEAF28(v60, v17, 0, 0xE000000000000000, (uint64_t)v31, 0, 1);
      v33 = *v63;
      if (*(_QWORD *)(*v63 + 16))
      {
        swift_bridgeObjectRetain();
        v34 = sub_1B1DC3B00(v62, a2);
        if ((v35 & 1) != 0)
        {
          v36 = (uint64_t *)(*(_QWORD *)(v33 + 56) + 16 * v34);
          v37 = *v36;
          v38 = v36[1];
          swift_bridgeObjectRetain();
        }
        else
        {
          v37 = 0;
          v38 = 0;
        }
        swift_bridgeObjectRelease();
      }
      else
      {
        v37 = 0;
        v38 = 0;
      }
      *(_QWORD *)&v64[0] = v37;
      *((_QWORD *)&v64[0] + 1) = v38;
      v68 = 0xD000000000000014;
      v69 = 0x80000001B232C480;
      v39 = v17;
      if ((_BYTE)v17)
      {
        v41 = v62;
        v40 = v63;
        if (v39 == 1)
          sub_1B1C46B4C((uint64_t)v66, v32);
        else
          sub_1B1C3B344(v66, v32, 0, 0, 2);
      }
      else
      {
        sub_1B1C3F84C(v66, v32, 0, 0, 0);
        v41 = v62;
        v40 = v63;
      }
      swift_bridgeObjectRelease();
      v42 = sub_1B222922C();
      v44 = v43;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      v45 = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)&v64[0] = *v40;
      *v40 = 0x8000000000000000;
      sub_1B1B84788(v42, v44, v41, a2, v45);
      *v40 = *(_QWORD *)&v64[0];
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1B1A203C4((uint64_t)v66);
      v29 = v61;
    }
    else
    {
      sub_1B1A20370((uint64_t)v64);
    }
    v30 = a3;
  }
  *(_QWORD *)&v66[0] = v30;
  *((_QWORD *)&v66[0] + 1) = v29;
  strcpy((char *)v64, "%TYPE_INDEX%");
  BYTE13(v64[0]) = 0;
  HIWORD(v64[0]) = -5120;
  if ((sub_1B2229274() & 1) == 0)
    return sub_1B19F8C58(v70, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1A20360);
  v46 = sub_1B1E03728();
  v48 = v47;
  result = sub_1B19F8C58(v70, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1A20360);
  if ((v48 & 1) == 0)
  {
    v49 = *v63;
    if (*(_QWORD *)(*v63 + 16))
    {
      swift_bridgeObjectRetain();
      v50 = sub_1B1DC3B00(v62, a2);
      if ((v51 & 1) != 0)
      {
        v52 = (uint64_t *)(*(_QWORD *)(v49 + 56) + 16 * v50);
        v53 = *v52;
        v54 = v52[1];
        swift_bridgeObjectRetain();
      }
      else
      {
        v53 = 0;
        v54 = 0;
      }
      swift_bridgeObjectRelease();
    }
    else
    {
      v53 = 0;
      v54 = 0;
    }
    *(_QWORD *)&v66[0] = v53;
    *((_QWORD *)&v66[0] + 1) = v54;
    strcpy((char *)v64, "%TYPE_INDEX%");
    BYTE13(v64[0]) = 0;
    HIWORD(v64[0]) = -5120;
    v68 = v46;
    v68 = sub_1B2229A0C();
    v69 = v55;
    v56 = sub_1B222922C();
    v58 = v57;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v59 = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)&v66[0] = *v63;
    *v63 = 0x8000000000000000;
    sub_1B1B84788(v56, v58, v62, a2, v59);
    *v63 = *(_QWORD *)&v66[0];
    swift_bridgeObjectRelease();
    return (_QWORD *)swift_bridgeObjectRelease();
  }
  return result;
}

_QWORD *sub_1B1A1EBA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  _QWORD *result;
  unint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v19;
  uint64_t v20[5];
  _BYTE v21[8];
  uint64_t v22;
  _BYTE v23[40];
  _BYTE v24[8];
  unint64_t v25;
  uint64_t v26;

  swift_bridgeObjectRetain();
  sub_1B1E0E85C(a5, a6, v20);
  result = (_QWORD *)sub_1B1A202F4((uint64_t)v20, (uint64_t)v21);
  if (v22 != 59)
  {
    sub_1B19FA278((uint64_t)v21, (uint64_t)v23);
    swift_bridgeObjectRetain();
    v13 = sub_1B2229730();
    swift_bridgeObjectRelease();
    if (v13 < 3)
    {
      sub_1B19FA278((uint64_t)v23, (uint64_t)v24);
      if (v25 >= 0x3B)
      {
        if (!*(_QWORD *)(v26 + 16))
          return sub_1B19F8C58(v20, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1A20360);
        sub_1B1DC3C04(v13);
        if ((v14 & 1) == 0)
          return sub_1B19F8C58(v20, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1A20360);
        goto LABEL_10;
      }
      if ((_BYTE)v13)
      {
        if (v13 == 1)
        {
          if ((sub_1B1C46718((uint64_t)v23) & 1) == 0)
            return sub_1B19F8C58(v20, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1A20360);
        }
        else if ((sub_1B1C46B30((uint64_t)v23) & 1) == 0)
        {
          return sub_1B19F8C58(v20, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1A20360);
        }
LABEL_10:
        sub_1B1C39C20((uint64_t)v23, v13);
        sub_1B19F8C58(v20, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1A20360);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_1B2228890();
        sub_1B1A06460();
        sub_1B222922C();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        sub_1B2228890();
        sub_1B222922C();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v15 = sub_1B222922C();
        v17 = v16;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v19 = *a7;
        *a7 = 0x8000000000000000;
        sub_1B1B84788(v15, v17, a1, a2, isUniquelyReferenced_nonNull_native);
        *a7 = v19;
        swift_bridgeObjectRelease();
        return (_QWORD *)swift_bridgeObjectRelease();
      }
      if ((sub_1B1C46734((uint64_t)v23) & 1) != 0)
        goto LABEL_10;
    }
    return sub_1B19F8C58(v20, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1A20360);
  }
  return result;
}

uint64_t sub_1B1A1EEE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v9;
  uint64_t v10;
  char v11;
  unint64_t v13;
  char v14;
  char v15;

  if (a4)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v9 = swift_bridgeObjectRetain();
    v10 = sub_1B1A200FC(v9, a1, a2, a3, a4);
    LOBYTE(a3) = v11;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((a3 & 1) == 0)
      goto LABEL_3;
    return 0;
  }
  swift_bridgeObjectRetain();
  v13 = swift_bridgeObjectRetain();
  v10 = sub_1B1A1FFD8(v13, a1, a2);
  v15 = v14;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v15 & 1) != 0)
    return 0;
LABEL_3:
  if ((*(_QWORD *)(v4 + 40) & 0xC000000000000001) != 0)
    return MEMORY[0x1B5E21018](v10);
  else
    return swift_retain();
}

uint64_t sub_1B1A1EFEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  BOOL v7;
  char v8;
  uint64_t v9;

  v7 = *(_QWORD *)(*(_QWORD *)a1 + 16) == a2 && *(_QWORD *)(*(_QWORD *)a1 + 24) == a3;
  if (v7 || (v8 = 0, (sub_1B2229D24() & 1) != 0))
  {
    if (sub_1B1ED4440() == a4 && v9 == a5)
      v8 = 1;
    else
      v8 = sub_1B2229D24();
    swift_bridgeObjectRelease();
  }
  return v8 & 1;
}

uint64_t sub_1B1A1F090()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t _s7LibraryCMa()
{
  return objc_opt_self();
}

uint64_t destroy for Node.Typing()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *_s3VFX4NodeC6TypingVwCP_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for Node.Typing(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *assignWithTake for Node.Typing(_OWORD *a1, _OWORD *a2)
{
  swift_bridgeObjectRelease();
  *a1 = *a2;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *_s7LibraryC11FunctionSetVMa()
{
  return &_s7LibraryC11FunctionSetVN;
}

uint64_t sub_1B1A1F1FC(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v12;
  uint64_t v13;

  v3 = v1;
  sub_1B1A1F6E4(0, &qword_1EEF58BD0, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED170]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = (char *)&v12 - v9;
  sub_1B19FA070(a1, a1[3]);
  sub_1B1A1F64C();
  sub_1B222A180();
  v13 = *(_QWORD *)(v3 + 32);
  HIBYTE(v12) = 0;
  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BA4C0, MEMORY[0x1E0DEB188], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
  sub_1B1A1F740((unint64_t *)&qword_1EEF58BD8, MEMORY[0x1E0DEB198], MEMORY[0x1E0DEAF10]);
  sub_1B2229958();
  if (!v2)
  {
    v13 = *(_QWORD *)(v3 + 40);
    HIBYTE(v12) = 1;
    sub_1B1A1F690();
    sub_1B1A1F7B4(&qword_1EEF58BE0, &qword_1EEF58BE8, (uint64_t)&unk_1B229DF14, MEMORY[0x1E0DEAF10]);
    sub_1B2229958();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
}

_QWORD *sub_1B1A1F3A8(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v12;
  char v13;
  uint64_t v14;

  sub_1B1A1F6E4(0, &qword_1EEF58BA8, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED048]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v7);
  v9 = (char *)&v12 - v8;
  v1[2] = 0;
  v1[3] = 0;
  v10 = MEMORY[0x1E0DEE9D8];
  v1[4] = &unk_1E63A2DC0;
  v1[5] = v10;
  v1[6] = sub_1B1B7DF20(v10);
  v1[7] = 0;
  sub_1B19FA070(a1, a1[3]);
  sub_1B1A1F64C();
  sub_1B222A150();
  if (v2)
  {
    swift_release();
  }
  else
  {
    sub_1B1A02758(0, (unint64_t *)&qword_1ED4BA4C0, MEMORY[0x1E0DEB188], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    v13 = 0;
    sub_1B1A1F740((unint64_t *)&qword_1ED4BA4C8, MEMORY[0x1E0DEB1C0], MEMORY[0x1E0DEAF40]);
    sub_1B2229814();
    v1[4] = v14;
    swift_bridgeObjectRelease();
    sub_1B1A1F690();
    v13 = 1;
    sub_1B1A1F7B4(&qword_1EEF58BC0, &qword_1EEF58BC8, (uint64_t)&unk_1B229DF3C, MEMORY[0x1E0DEAF40]);
    sub_1B2229814();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    v1[5] = v14;
    swift_bridgeObjectRelease();
  }
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  return v1;
}

_QWORD *sub_1B1A1F5D8@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  _QWORD *result;

  v5 = swift_allocObject();
  result = sub_1B1A1F3A8(a1);
  if (!v2)
    *a2 = v5;
  return result;
}

uint64_t sub_1B1A1F62C(_QWORD *a1)
{
  return sub_1B1A1F1FC(a1);
}

unint64_t sub_1B1A1F64C()
{
  unint64_t result;

  result = qword_1EEF58BB0;
  if (!qword_1EEF58BB0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B226E3F0, &_s7LibraryC10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EEF58BB0);
  }
  return result;
}

void sub_1B1A1F690()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF58BB8)
  {
    _s17CodeSourceSnippetCMa();
    v0 = sub_1B2228B6C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF58BB8);
  }
}

void sub_1B1A1F6E4(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_1B1A1F64C();
    v7 = a3(a1, &_s7LibraryC10CodingKeysON, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t sub_1B1A1F740(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    sub_1B1A02758(255, (unint64_t *)&qword_1ED4BA4C0, MEMORY[0x1E0DEB188], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    v8 = a2;
    result = MEMORY[0x1B5E23E74](a3, v7, &v8);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1B1A1F7B4(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = *a1;
  if (!result)
  {
    sub_1B1A1F690();
    v10 = v9;
    v11 = sub_1B1A1F838(a2, 255, (uint64_t (*)(uint64_t))_s17CodeSourceSnippetCMa, a3);
    result = MEMORY[0x1B5E23E74](a4, v10, &v11);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1B1A1F838(unint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    v7 = a3(a2);
    result = MEMORY[0x1B5E23E74](a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1B1A1F878()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD v10[2];

  v0 = sub_1B22287A0();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0, v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1B2228788();
  v5 = sub_1B2228758();
  v7 = v6;
  (*(void (**)(char *, uint64_t))(v1 + 8))(v4, v0);
  sub_1B2227CB4();
  swift_allocObject();
  sub_1B2227CA8();
  if (v7 >> 60 == 15)
  {
    swift_release();
    return 0;
  }
  else
  {
    _s7LibraryCMa();
    sub_1B1A0DC90(v5, v7);
    sub_1B1A1F838(&qword_1EEF58BF8, v8, (uint64_t (*)(uint64_t))_s7LibraryCMa, (uint64_t)&unk_1B226E304);
    sub_1B2227C84();
    sub_1B1A0DAC8(v5, v7);
    sub_1B1A0DAC8(v5, v7);
    swift_release();
    return v10[1];
  }
}

uint64_t sub_1B1A1FB40(uint64_t a1, void (*a2)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v19;

  v4 = a1 + 64;
  v5 = 1 << *(_BYTE *)(a1 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(a1 + 64);
  v8 = (unint64_t)(v5 + 63) >> 6;
  v9 = 0;
  v19 = swift_bridgeObjectRetain() + 112;
  while (1)
  {
    if (v7)
    {
      v10 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v11 = v10 | (v9 << 6);
      goto LABEL_5;
    }
    v16 = v9 + 1;
    if (v9 + 1 >= v8)
      return swift_release();
    v17 = *(_QWORD *)(v4 + 8 * v16);
    if (!v17)
    {
      v16 = v9 + 2;
      if (v9 + 2 >= v8)
        return swift_release();
      v17 = *(_QWORD *)(v4 + 8 * v16);
      if (!v17)
      {
        v16 = v9 + 3;
        if (v9 + 3 >= v8)
          return swift_release();
        v17 = *(_QWORD *)(v4 + 8 * v16);
        if (!v17)
        {
          v16 = v9 + 4;
          if (v9 + 4 >= v8)
            return swift_release();
          v17 = *(_QWORD *)(v4 + 8 * v16);
          if (!v17)
          {
            v16 = v9 + 5;
            if (v9 + 5 >= v8)
              return swift_release();
            v17 = *(_QWORD *)(v4 + 8 * v16);
            if (!v17)
              break;
          }
        }
      }
    }
LABEL_20:
    v7 = (v17 - 1) & v17;
    v11 = __clz(__rbit64(v17)) + (v16 << 6);
    v9 = v16;
LABEL_5:
    v12 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v11);
    v13 = *v12;
    v14 = v12[1];
    v15 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v11);
    swift_bridgeObjectRetain();
    swift_retain();
    a2(v13, v14, v15);
    swift_release();
    swift_bridgeObjectRelease();
  }
  while (v8 - 6 != v9)
  {
    v17 = *(_QWORD *)(v19 + 8 * v9++);
    if (v17)
    {
      v16 = v9 + 5;
      goto LABEL_20;
    }
  }
  return swift_release();
}

uint64_t sub_1B1A1FCE0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17[2];

  v4 = MEMORY[0x1E0DEE9D8];
  v17[0] = (uint64_t)sub_1B1B7DF34(MEMORY[0x1E0DEE9D8]);
  v17[1] = (uint64_t)sub_1B1B7E040(v4);
  v15 = 0;
  v16 = 0;
  v14 = 1;
  *(_QWORD *)&v11 = a1;
  *((_QWORD *)&v11 + 1) = a2;
  sub_1B1A06460();
  v5 = sub_1B2229280();
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(v5 + 16);
  if (!v6)
    goto LABEL_6;
  swift_bridgeObjectRetain();
  v7 = (uint64_t *)(v5 + 56);
  do
  {
    v8 = *(v7 - 1);
    v9 = *v7;
    v11 = *(_OWORD *)(v7 - 3);
    v12 = v8;
    v13 = v9;
    swift_bridgeObjectRetain();
    sub_1B1A1BC8C(&v11, 0xD000000000000014, 0x80000001B232C500, 0x65646E6570656420, 0xEF203A736569636ELL, &v15, &v14, v17);
    swift_bridgeObjectRelease();
    v7 += 4;
    --v6;
  }
  while (v6);
  swift_bridgeObjectRelease_n();
  if (!v16)
    return v17[0];
  if ((v14 & 1) != 0)
  {
LABEL_6:
    swift_bridgeObjectRelease();
    return v17[0];
  }
  *(_QWORD *)&v11 = 0;
  *((_QWORD *)&v11 + 1) = 0xE000000000000000;
  swift_bridgeObjectRetain();
  sub_1B2229430();
  sub_1B2228890();
  sub_1B2228890();
  sub_1B2228890();
  result = sub_1B2229688();
  __break(1u);
  return result;
}

uint64_t sub_1B1A1FEF0(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x726F6C6F63 && a2 == 0xE500000000000000;
  if (v2 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7374657070696E73 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_1B2229D24();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_1B1A1FFD8(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v10;

  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v6 = sub_1B22296AC();
    swift_bridgeObjectRelease();
    v7 = 0;
    if (v6)
    {
      while (1)
      {
LABEL_3:
        if ((a1 & 0xC000000000000001) != 0)
        {
          v8 = MEMORY[0x1B5E21018](v7, a1);
        }
        else
        {
          v8 = *(_QWORD *)(a1 + 8 * v7 + 32);
          swift_retain();
        }
        if (*(_QWORD *)(v8 + 16) == a2 && *(_QWORD *)(v8 + 24) == a3)
          break;
        v10 = sub_1B2229D24();
        swift_release();
        if ((v10 & 1) != 0)
          return v7;
        if (v6 == ++v7)
          return 0;
      }
      swift_release();
    }
  }
  else
  {
    v6 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    v7 = 0;
    if (v6)
      goto LABEL_3;
  }
  return v7;
}

uint64_t sub_1B1A200FC(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v9 = sub_1B22296AC();
    swift_bridgeObjectRelease();
    if (v9)
      goto LABEL_3;
    return 0;
  }
  v9 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v9)
    return 0;
LABEL_3:
  v10 = 0;
  while (1)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      v12 = MEMORY[0x1B5E21018](v10, a1);
    }
    else
    {
      v12 = *(_QWORD *)(a1 + 8 * v10 + 32);
      swift_retain();
    }
    v13 = *(_QWORD *)(v12 + 16) == a2 && *(_QWORD *)(v12 + 24) == a3;
    if (v13 || (sub_1B2229D24() & 1) != 0)
      break;
    swift_release();
LABEL_5:
    if (v9 == ++v10)
      return 0;
  }
  if (sub_1B1ED4440() != a4 || v14 != a5)
  {
    v11 = sub_1B2229D24();
    swift_release();
    swift_bridgeObjectRelease();
    if ((v11 & 1) != 0)
      return v10;
    goto LABEL_5;
  }
  swift_release();
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_1B1A2027C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  if (a3)
  {
    swift_bridgeObjectRelease();
    return swift_release();
  }
  return result;
}

uint64_t sub_1B1A202AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1A1D6E0(a1, a2, a3, *(_QWORD ***)(v3 + 16), *(_QWORD *)(v3 + 24), *(unsigned __int8 *)(v3 + 32), *(_QWORD *)(v3 + 40), *(_QWORD *)(v3 + 48), *(uint64_t **)(v3 + 56));
}

_QWORD *sub_1B1A202DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return sub_1B1A1E438(a1, a2, a3, a4, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), *(_QWORD **)(v4 + 32), *(_QWORD *)(v4 + 40));
}

_QWORD *sub_1B1A202E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return sub_1B1A1EBA4(a1, a2, a3, a4, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), *(uint64_t **)(v4 + 32));
}

uint64_t sub_1B1A202F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1B1A02758(0, &qword_1EEF58BF0, (uint64_t)&_s12MetadataTypeON, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1B1A20350(uint64_t a1, unint64_t a2)
{
  if (a2 != 59)
    return sub_1B19FA2B4(a1, a2);
  return a1;
}

uint64_t sub_1B1A20360(uint64_t a1, unint64_t a2)
{
  if (a2 != 59)
    return sub_1B19F9FEC(a1, a2);
  return a1;
}

uint64_t sub_1B1A20370(uint64_t a1)
{
  uint64_t v2;

  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BB3A0, (uint64_t)&_s8MetadataVN, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1B1A203C4(uint64_t a1)
{
  _s8MetadataVwxx(a1);
  return a1;
}

unint64_t sub_1B1A203F8()
{
  unint64_t result;

  result = qword_1ED4BB030;
  if (!qword_1ED4BB030)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&qword_1ED4BB030);
  }
  return result;
}

unint64_t sub_1B1A2044C()
{
  unint64_t result;

  result = qword_1ED4BA240;
  if (!qword_1ED4BA240)
  {
    result = MEMORY[0x1B5E23E74](MEMORY[0x1E0DEA980], MEMORY[0x1E0DEA968]);
    atomic_store(result, (unint64_t *)&qword_1ED4BA240);
  }
  return result;
}

unint64_t sub_1B1A20490()
{
  unint64_t result;

  result = qword_1ED4B7970;
  if (!qword_1ED4B7970)
  {
    result = MEMORY[0x1B5E23E74](MEMORY[0x1E0DEFF48], MEMORY[0x1E0DEA968]);
    atomic_store(result, (unint64_t *)&qword_1ED4B7970);
  }
  return result;
}

unint64_t sub_1B1A204D4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EEF58C10;
  if (!qword_1EEF58C10)
  {
    sub_1B1A02758(255, &qword_1EEF58C08, MEMORY[0x1E0DEE720], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    result = MEMORY[0x1B5E23E74](MEMORY[0x1E0DEAF38], v1);
    atomic_store(result, (unint64_t *)&qword_1EEF58C10);
  }
  return result;
}

uint64_t _s7LibraryC10CodingKeysOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1B1A20580 + 4 * byte_1B226E295[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1B1A205B4 + 4 * byte_1B226E290[v4]))();
}

uint64_t sub_1B1A205B4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1A205BC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B1A205C4);
  return result;
}

uint64_t sub_1B1A205D0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B1A205D8);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1B1A205DC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1A205E4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s7LibraryC10CodingKeysOMa()
{
  return &_s7LibraryC10CodingKeysON;
}

unint64_t sub_1B1A20604()
{
  unint64_t result;

  result = qword_1EEF58C18;
  if (!qword_1EEF58C18)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B226E3C8, &_s7LibraryC10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EEF58C18);
  }
  return result;
}

unint64_t sub_1B1A2064C()
{
  unint64_t result;

  result = qword_1EEF58C20;
  if (!qword_1EEF58C20)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B226E338, &_s7LibraryC10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EEF58C20);
  }
  return result;
}

unint64_t sub_1B1A20694()
{
  unint64_t result;

  result = qword_1EEF58C28;
  if (!qword_1EEF58C28)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B226E360, &_s7LibraryC10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EEF58C28);
  }
  return result;
}

uint64_t sub_1B1A206D8(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x1E0DEE9D8];
  if (v1)
  {
    v9 = MEMORY[0x1E0DEE9D8];
    sub_1B2029FFC(0, v1, 0);
    v2 = v9;
    v4 = a1 + 40;
    do
    {
      swift_bridgeObjectRetain();
      sub_1B2228890();
      swift_bridgeObjectRelease();
      v6 = *(_QWORD *)(v9 + 16);
      v5 = *(_QWORD *)(v9 + 24);
      if (v6 >= v5 >> 1)
        sub_1B2029FFC(v5 > 1, v6 + 1, 1);
      v4 += 16;
      *(_QWORD *)(v9 + 16) = v6 + 1;
      v7 = v9 + 16 * v6;
      *(_QWORD *)(v7 + 32) = 2109231;
      *(_QWORD *)(v7 + 40) = 0xE300000000000000;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t sub_1B1A207E0(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v12;
  _BYTE v13[15];
  uint64_t v14;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x1E0DEE9D8];
  if (v1)
  {
    v14 = MEMORY[0x1E0DEE9D8];
    sub_1B202ACD8(0, v1, 0);
    v2 = v14;
    v4 = (_BYTE *)(a1 + 56);
    do
    {
      v6 = *((_QWORD *)v4 - 3);
      v5 = *((_QWORD *)v4 - 2);
      v12 = *((_QWORD *)v4 - 1);
      v7 = *v4;
      v9 = *(_QWORD *)(v14 + 16);
      v8 = *(_QWORD *)(v14 + 24);
      swift_bridgeObjectRetain();
      if (v9 >= v8 >> 1)
        sub_1B202ACD8(v8 > 1, v9 + 1, 1);
      v4 += 32;
      *(_QWORD *)(v14 + 16) = v9 + 1;
      v10 = v14 + 48 * v9;
      *(_QWORD *)(v10 + 32) = v6;
      *(_QWORD *)(v10 + 40) = v5;
      *(_QWORD *)(v10 + 48) = v12;
      *(_BYTE *)(v10 + 56) = v7;
      *(_QWORD *)(v10 + 57) = *(_QWORD *)v13;
      *(_QWORD *)(v10 + 64) = *(_QWORD *)&v13[7];
      *(_QWORD *)(v10 + 72) = &type metadata for EvolutionMode;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t sub_1B1A208F8(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int v12;
  uint64_t v13;
  _BYTE v14[11];
  uint64_t v15;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x1E0DEE9D8];
  if (v1)
  {
    v15 = MEMORY[0x1E0DEE9D8];
    sub_1B202ACD8(0, v1, 0);
    v2 = v15;
    v4 = (_BYTE *)(a1 + 60);
    do
    {
      v5 = *(_QWORD *)(v4 - 28);
      v6 = *(_QWORD *)(v4 - 20);
      v13 = *(_QWORD *)(v4 - 12);
      v12 = *((_DWORD *)v4 - 1);
      v7 = *v4;
      v8 = *(_QWORD *)(v15 + 16);
      v9 = *(_QWORD *)(v15 + 24);
      swift_bridgeObjectRetain();
      if (v8 >= v9 >> 1)
        sub_1B202ACD8(v9 > 1, v8 + 1, 1);
      v4 += 32;
      *(_QWORD *)(v15 + 16) = v8 + 1;
      v10 = v15 + 48 * v8;
      *(_QWORD *)(v10 + 32) = v5;
      *(_QWORD *)(v10 + 40) = v6;
      *(_QWORD *)(v10 + 48) = v13;
      *(_DWORD *)(v10 + 56) = v12;
      *(_BYTE *)(v10 + 60) = v7;
      *(_QWORD *)(v10 + 61) = *(_QWORD *)v14;
      *(_DWORD *)(v10 + 68) = *(_DWORD *)&v14[7];
      *(_QWORD *)(v10 + 72) = &type metadata for EasingFunction;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t sub_1B1A20A24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int64_t v3;
  uint64_t v4;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  __int128 v18;
  uint64_t v19;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = MEMORY[0x1E0DEE9D8];
  if (v3)
  {
    v19 = MEMORY[0x1E0DEE9D8];
    sub_1B202ACD8(0, v3, 0);
    v4 = v19;
    v6 = (_BYTE *)(a1 + 64);
    do
    {
      v7 = *((_QWORD *)v6 - 4);
      v8 = *((_QWORD *)v6 - 3);
      v9 = *((_QWORD *)v6 - 2);
      v10 = *((_QWORD *)v6 - 1);
      v11 = *v6;
      v12 = swift_allocObject();
      *(_QWORD *)(v12 + 16) = v9;
      *(_QWORD *)(v12 + 24) = v10;
      *(_BYTE *)(v12 + 32) = v11;
      v14 = *(_QWORD *)(v19 + 16);
      v13 = *(_QWORD *)(v19 + 24);
      swift_bridgeObjectRetain();
      if (v14 >= v13 >> 1)
        sub_1B202ACD8(v13 > 1, v14 + 1, 1);
      v6 += 48;
      *(_QWORD *)(v19 + 16) = v14 + 1;
      v15 = v19 + 48 * v14;
      *(_QWORD *)(v15 + 32) = v7;
      *(_QWORD *)(v15 + 40) = v8;
      *(_QWORD *)(v15 + 48) = v12;
      *(_OWORD *)(v15 + 56) = v18;
      *(_QWORD *)(v15 + 72) = a3;
      --v3;
    }
    while (v3);
  }
  return v4;
}

uint64_t sub_1B1A20B44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int64_t v3;
  uint64_t v4;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _BYTE v16[23];
  uint64_t v17;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = MEMORY[0x1E0DEE9D8];
  if (v3)
  {
    v17 = MEMORY[0x1E0DEE9D8];
    sub_1B202ACD8(0, v3, 0);
    v4 = v17;
    v6 = (_BYTE *)(a1 + 48);
    v7 = a3;
    do
    {
      v9 = *((_QWORD *)v6 - 2);
      v8 = *((_QWORD *)v6 - 1);
      v10 = *v6;
      v12 = *(_QWORD *)(v17 + 16);
      v11 = *(_QWORD *)(v17 + 24);
      swift_bridgeObjectRetain();
      if (v12 >= v11 >> 1)
      {
        sub_1B202ACD8(v11 > 1, v12 + 1, 1);
        v7 = a3;
      }
      v6 += 24;
      *(_QWORD *)(v17 + 16) = v12 + 1;
      v13 = v17 + 48 * v12;
      *(_QWORD *)(v13 + 32) = v9;
      *(_QWORD *)(v13 + 40) = v8;
      *(_BYTE *)(v13 + 48) = v10;
      *(_QWORD *)(v13 + 64) = *(_QWORD *)&v16[15];
      *(_QWORD *)(v13 + 72) = v7;
      *(_OWORD *)(v13 + 49) = *(_OWORD *)v16;
      --v3;
    }
    while (v3);
  }
  return v4;
}

uint64_t sub_1B1A20C48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int64_t v3;
  uint64_t v4;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _BYTE v16[19];
  char v17;
  uint64_t v18;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = MEMORY[0x1E0DEE9D8];
  if (v3)
  {
    v18 = MEMORY[0x1E0DEE9D8];
    sub_1B202ACD8(0, v3, 0);
    v4 = v18;
    v6 = (_BYTE *)(a1 + 52);
    v7 = a3;
    do
    {
      v8 = *(_QWORD *)(v6 - 20);
      v9 = *(_QWORD *)(v6 - 12);
      v10 = *((_DWORD *)v6 - 1);
      v17 = *v6;
      v12 = *(_QWORD *)(v18 + 16);
      v11 = *(_QWORD *)(v18 + 24);
      swift_bridgeObjectRetain();
      if (v12 >= v11 >> 1)
      {
        sub_1B202ACD8(v11 > 1, v12 + 1, 1);
        v7 = a3;
      }
      *(_QWORD *)(v18 + 16) = v12 + 1;
      v13 = v18 + 48 * v12;
      *(_QWORD *)(v13 + 32) = v8;
      *(_QWORD *)(v13 + 40) = v9;
      *(_DWORD *)(v13 + 48) = v10;
      *(_BYTE *)(v13 + 52) = v17;
      *(_DWORD *)(v13 + 68) = *(_DWORD *)&v16[15];
      *(_OWORD *)(v13 + 53) = *(_OWORD *)v16;
      *(_QWORD *)(v13 + 72) = v7;
      v6 += 24;
      --v3;
    }
    while (v3);
  }
  return v4;
}

uint64_t sub_1B1A20D64(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  int64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  __int128 v16;
  uint64_t v17;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = MEMORY[0x1E0DEE9D8];
  if (v3)
  {
    v17 = MEMORY[0x1E0DEE9D8];
    sub_1B202ACD8(0, v3, 0);
    v4 = v17;
    v7 = a3(0);
    v8 = (uint64_t *)(a1 + 48);
    do
    {
      v10 = *(v8 - 2);
      v9 = *(v8 - 1);
      v11 = *v8;
      v13 = *(_QWORD *)(v17 + 16);
      v12 = *(_QWORD *)(v17 + 24);
      swift_bridgeObjectRetain();
      if (v13 >= v12 >> 1)
        sub_1B202ACD8(v12 > 1, v13 + 1, 1);
      v8 += 3;
      *(_QWORD *)(v17 + 16) = v13 + 1;
      v14 = v17 + 48 * v13;
      *(_QWORD *)(v14 + 32) = v10;
      *(_QWORD *)(v14 + 40) = v9;
      *(_QWORD *)(v14 + 48) = v11;
      *(_OWORD *)(v14 + 56) = v16;
      *(_QWORD *)(v14 + 72) = v7;
      --v3;
    }
    while (v3);
  }
  return v4;
}

uint64_t sub_1B1A20E68(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x1E0DEE9D8];
  if (v1)
  {
    v14 = MEMORY[0x1E0DEE9D8];
    sub_1B2029FFC(0, v1, 0);
    v2 = v14;
    v4 = *(_QWORD *)(sub_1B2228110() - 8);
    v5 = a1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    v6 = *(_QWORD *)(v4 + 72);
    do
    {
      v7 = sub_1B222802C();
      v9 = v8;
      v11 = *(_QWORD *)(v14 + 16);
      v10 = *(_QWORD *)(v14 + 24);
      if (v11 >= v10 >> 1)
        sub_1B2029FFC(v10 > 1, v11 + 1, 1);
      *(_QWORD *)(v14 + 16) = v11 + 1;
      v12 = v14 + 16 * v11;
      *(_QWORD *)(v12 + 32) = v7;
      *(_QWORD *)(v12 + 40) = v9;
      v5 += v6;
      --v1;
    }
    while (v1);
  }
  return v2;
}

unint64_t sub_1B1A20F64(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  void (*v18)(char *, char *, uint64_t);
  char *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD v24[3];
  char *v25;
  char *v26;

  sub_1B1791524(0, (unint64_t *)&qword_1ED4BF720, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (char *)v24 - v5;
  v7 = sub_1B2228110();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (char *)v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12, v13);
  v26 = (char *)v24 - v14;
  v15 = *(_QWORD *)(a1 + 16);
  if (!v15)
    return MEMORY[0x1E0DEE9D8];
  v24[2] = v1;
  swift_bridgeObjectRetain();
  v24[1] = a1;
  v16 = a1 + 40;
  v17 = MEMORY[0x1E0DEE9D8];
  v25 = v11;
  do
  {
    swift_bridgeObjectRetain();
    sub_1B22280EC();
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
    {
      sub_1B1AEA224((uint64_t)v6, (uint64_t)&qword_1ED4BF720, (uint64_t)MEMORY[0x1E0CAFFF8], (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))sub_1B1791524);
    }
    else
    {
      v18 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
      v19 = v26;
      v18(v26, v6, v7);
      v18(v11, v19, v7);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v17 = sub_1B1C64A88(0, *(_QWORD *)(v17 + 16) + 1, 1, v17);
      v21 = *(_QWORD *)(v17 + 16);
      v20 = *(_QWORD *)(v17 + 24);
      if (v21 >= v20 >> 1)
        v17 = sub_1B1C64A88(v20 > 1, v21 + 1, 1, v17);
      *(_QWORD *)(v17 + 16) = v21 + 1;
      v22 = v17
          + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))
          + *(_QWORD *)(v8 + 72) * v21;
      v11 = v25;
      v18((char *)v22, v25, v7);
    }
    v16 += 16;
    --v15;
  }
  while (v15);
  swift_bridgeObjectRelease();
  return v17;
}

uint64_t sub_1B1A211B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12[5];

  v12[3] = a1;
  v12[4] = a2;
  sub_1B1A137F4(v12);
  v8 = *(_QWORD *)(a2 + 8);
  sub_1B1E2854C(a1, v8);
  v9 = sub_1B1E28574(a3, a4, a1, v8);
  if (v9)
  {
    v10 = v9;
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v12);
    return v10;
  }
  else
  {
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v12);
    v12[0] = 0;
    v12[1] = 0xE000000000000000;
    sub_1B2229430();
    swift_bridgeObjectRelease();
    strcpy((char *)v12, "new property ");
    HIWORD(v12[1]) = -4864;
    sub_1B2228890();
    sub_1B2228890();
    sub_1B222A210();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    result = sub_1B2229688();
    __break(1u);
  }
  return result;
}

uint64_t sub_1B1A21328(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, char a6, uint64_t a7, char a8, uint64_t *a9, uint64_t *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, _OWORD *a15, __int16 a16, uint64_t a17)
{
  char v18;
  char v19;
  char v20;
  _OWORD *v21;
  __int128 v22;

  v18 = a4 & 1;
  v19 = a6 & 1;
  v20 = a8 & 1;
  v21 = (_OWORD *)swift_allocObject();
  v22 = a15[1];
  v21[14] = *a15;
  v21[15] = v22;
  v21[16] = a15[2];
  return sub_1B1BF499C(a1, a2, a3, v18, a5, v19, a7, v20, a9, a10, a11, a12, a13, a14, a16, a17);
}

uint64_t sub_1B1A213F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 248);
  v2 = *(_QWORD *)(v0 + 256);
  swift_bridgeObjectRelease();
  return sub_1B1B0BC78(v1, v2);
}

uint64_t sub_1B1A21434()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = sub_1B1BF4AEC();
  v1 = *(_QWORD *)(v0 + 248);
  v2 = *(_QWORD *)(v0 + 256);
  swift_bridgeObjectRelease();
  sub_1B1B0BC78(v1, v2);
  return swift_deallocClassInstance();
}

uint64_t sub_1B1A21488(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  BOOL v20;
  BOOL v21;
  BOOL v22;

  v8 = sub_1B1F6D49C();
  if (v8 >> 62)
  {
    v9 = sub_1B22296AC();
    if (!v9)
      goto LABEL_7;
LABEL_3:
    v10 = v8 & 0xC000000000000001;
    if ((v8 & 0xC000000000000001) != 0)
    {
      v11 = MEMORY[0x1B5E21018](0, v8);
    }
    else
    {
      v11 = *(_QWORD *)(v8 + 32);
      swift_retain();
    }
    if ((sub_1B1ADE3D8(*(_QWORD *)(v11 + 16), *(_QWORD *)(v11 + 24), a1, a2, a3, a4) & 1) == 0)
    {
      swift_release();
      if (v9 == 1)
        goto LABEL_7;
      if (v10)
      {
        v11 = MEMORY[0x1B5E21018](1, v8);
      }
      else
      {
        v11 = *(_QWORD *)(v8 + 40);
        swift_retain();
      }
      if ((sub_1B1ADE3D8(*(_QWORD *)(v11 + 16), *(_QWORD *)(v11 + 24), a1, a2, a3, a4) & 1) == 0)
      {
        swift_release();
        v13 = v9 - 2;
        if (!v13)
          goto LABEL_7;
        v14 = 0;
        v15 = a1 >> 16;
        v16 = a2 >> 16;
        while (1)
        {
          if (v10)
          {
            v11 = MEMORY[0x1B5E21018](v14 + 2, v8);
          }
          else
          {
            v11 = *(_QWORD *)(v8 + 8 * v14 + 48);
            swift_retain();
          }
          v17 = *(_QWORD *)(v11 + 16);
          v18 = *(_QWORD *)(v11 + 24);
          v19 = (v18 & 0x2000000000000000) != 0 ? HIBYTE(v18) & 0xF : v17 & 0xFFFFFFFFFFFFLL;
          v20 = v17 == a3 && v18 == a4;
          v21 = v20 && v15 == 0;
          v22 = v21 && v19 == v16;
          if (v22 || (sub_1B22299F4() & 1) != 0)
            break;
          swift_release();
          if (v13 == ++v14)
            goto LABEL_7;
        }
      }
    }
    swift_bridgeObjectRelease();
    return v11;
  }
  v9 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v9)
    goto LABEL_3;
LABEL_7:
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_1B1A21664(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, __int16 a6)
{
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  BOOL v22;
  BOOL v23;
  BOOL v24;

  v10 = sub_1B1A30078(a1, a6 & 0x101);
  if (v10 >> 62)
  {
    v11 = sub_1B22296AC();
    if (!v11)
      goto LABEL_7;
LABEL_3:
    v12 = v10 & 0xC000000000000001;
    if ((v10 & 0xC000000000000001) != 0)
    {
      v13 = MEMORY[0x1B5E21018](0, v10);
    }
    else
    {
      v13 = *(_QWORD *)(v10 + 32);
      swift_retain();
    }
    if ((sub_1B1ADE3D8(*(_QWORD *)(v13 + 16), *(_QWORD *)(v13 + 24), a1, a2, a3, a4) & 1) == 0)
    {
      swift_release();
      if (v11 == 1)
        goto LABEL_7;
      if (v12)
      {
        v13 = MEMORY[0x1B5E21018](1, v10);
      }
      else
      {
        v13 = *(_QWORD *)(v10 + 40);
        swift_retain();
      }
      if ((sub_1B1ADE3D8(*(_QWORD *)(v13 + 16), *(_QWORD *)(v13 + 24), a1, a2, a3, a4) & 1) == 0)
      {
        swift_release();
        v15 = v11 - 2;
        if (!v15)
          goto LABEL_7;
        v16 = 0;
        v17 = a1 >> 16;
        v18 = a2 >> 16;
        while (1)
        {
          if (v12)
          {
            v13 = MEMORY[0x1B5E21018](v16 + 2, v10);
          }
          else
          {
            v13 = *(_QWORD *)(v10 + 8 * v16 + 48);
            swift_retain();
          }
          v19 = *(_QWORD *)(v13 + 16);
          v20 = *(_QWORD *)(v13 + 24);
          v21 = (v20 & 0x2000000000000000) != 0 ? HIBYTE(v20) & 0xF : v19 & 0xFFFFFFFFFFFFLL;
          v22 = v19 == a3 && v20 == a4;
          v23 = v22 && v17 == 0;
          v24 = v23 && v21 == v18;
          if (v24 || (sub_1B22299F4() & 1) != 0)
            break;
          swift_release();
          if (v15 == ++v16)
            goto LABEL_7;
        }
      }
    }
    swift_bridgeObjectRelease();
    return v13;
  }
  v11 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v11)
    goto LABEL_3;
LABEL_7:
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_1B1A21848(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  BOOL v20;
  BOOL v21;
  BOOL v22;

  v8 = sub_1B1F706E0();
  if (v8 >> 62)
  {
    v9 = sub_1B22296AC();
    if (!v9)
      goto LABEL_7;
LABEL_3:
    v10 = v8 & 0xC000000000000001;
    if ((v8 & 0xC000000000000001) != 0)
    {
      v11 = MEMORY[0x1B5E21018](0, v8);
    }
    else
    {
      v11 = *(_QWORD *)(v8 + 32);
      swift_retain();
    }
    if ((sub_1B1ADE3D8(*(_QWORD *)(v11 + 16), *(_QWORD *)(v11 + 24), a1, a2, a3, a4) & 1) == 0)
    {
      swift_release();
      if (v9 == 1)
        goto LABEL_7;
      if (v10)
      {
        v11 = MEMORY[0x1B5E21018](1, v8);
      }
      else
      {
        v11 = *(_QWORD *)(v8 + 40);
        swift_retain();
      }
      if ((sub_1B1ADE3D8(*(_QWORD *)(v11 + 16), *(_QWORD *)(v11 + 24), a1, a2, a3, a4) & 1) == 0)
      {
        swift_release();
        v13 = v9 - 2;
        if (!v13)
          goto LABEL_7;
        v14 = 0;
        v15 = a1 >> 16;
        v16 = a2 >> 16;
        while (1)
        {
          if (v10)
          {
            v11 = MEMORY[0x1B5E21018](v14 + 2, v8);
          }
          else
          {
            v11 = *(_QWORD *)(v8 + 8 * v14 + 48);
            swift_retain();
          }
          v17 = *(_QWORD *)(v11 + 16);
          v18 = *(_QWORD *)(v11 + 24);
          v19 = (v18 & 0x2000000000000000) != 0 ? HIBYTE(v18) & 0xF : v17 & 0xFFFFFFFFFFFFLL;
          v20 = v17 == a3 && v18 == a4;
          v21 = v20 && v15 == 0;
          v22 = v21 && v19 == v16;
          if (v22 || (sub_1B22299F4() & 1) != 0)
            break;
          swift_release();
          if (v13 == ++v14)
            goto LABEL_7;
        }
      }
    }
    swift_bridgeObjectRelease();
    return v11;
  }
  v9 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v9)
    goto LABEL_3;
LABEL_7:
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_1B1A21A24(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  BOOL v20;
  BOOL v21;
  BOOL v22;

  v8 = sub_1B1F6C3FC();
  if (v8 >> 62)
  {
    v9 = sub_1B22296AC();
    if (!v9)
      goto LABEL_7;
LABEL_3:
    v10 = v8 & 0xC000000000000001;
    if ((v8 & 0xC000000000000001) != 0)
    {
      v11 = MEMORY[0x1B5E21018](0, v8);
    }
    else
    {
      v11 = *(_QWORD *)(v8 + 32);
      swift_retain();
    }
    if ((sub_1B1ADE3D8(*(_QWORD *)(v11 + 16), *(_QWORD *)(v11 + 24), a1, a2, a3, a4) & 1) == 0)
    {
      swift_release();
      if (v9 == 1)
        goto LABEL_7;
      if (v10)
      {
        v11 = MEMORY[0x1B5E21018](1, v8);
      }
      else
      {
        v11 = *(_QWORD *)(v8 + 40);
        swift_retain();
      }
      if ((sub_1B1ADE3D8(*(_QWORD *)(v11 + 16), *(_QWORD *)(v11 + 24), a1, a2, a3, a4) & 1) == 0)
      {
        swift_release();
        v13 = v9 - 2;
        if (!v13)
          goto LABEL_7;
        v14 = 0;
        v15 = a1 >> 16;
        v16 = a2 >> 16;
        while (1)
        {
          if (v10)
          {
            v11 = MEMORY[0x1B5E21018](v14 + 2, v8);
          }
          else
          {
            v11 = *(_QWORD *)(v8 + 8 * v14 + 48);
            swift_retain();
          }
          v17 = *(_QWORD *)(v11 + 16);
          v18 = *(_QWORD *)(v11 + 24);
          v19 = (v18 & 0x2000000000000000) != 0 ? HIBYTE(v18) & 0xF : v17 & 0xFFFFFFFFFFFFLL;
          v20 = v17 == a3 && v18 == a4;
          v21 = v20 && v15 == 0;
          v22 = v21 && v19 == v16;
          if (v22 || (sub_1B22299F4() & 1) != 0)
            break;
          swift_release();
          if (v13 == ++v14)
            goto LABEL_7;
        }
      }
    }
    swift_bridgeObjectRelease();
    return v11;
  }
  v9 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v9)
    goto LABEL_3;
LABEL_7:
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_1B1A21C00(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  BOOL v20;
  BOOL v21;
  BOOL v22;

  if (qword_1EEF56F18 != -1)
    swift_once();
  v8 = qword_1EEFD4FB0;
  if ((unint64_t)qword_1EEFD4FB0 >> 62)
  {
    swift_bridgeObjectRetain();
    v9 = sub_1B22296AC();
    if (!v9)
      goto LABEL_9;
LABEL_5:
    v10 = v8 & 0xC000000000000001;
    if ((v8 & 0xC000000000000001) != 0)
    {
      v11 = MEMORY[0x1B5E21018](0, v8);
    }
    else
    {
      v11 = *(_QWORD *)(v8 + 32);
      swift_retain();
    }
    if ((sub_1B1ADE3D8(*(_QWORD *)(v11 + 16), *(_QWORD *)(v11 + 24), a1, a2, a3, a4) & 1) == 0)
    {
      swift_release();
      if (v9 == 1)
        goto LABEL_9;
      if (v10)
      {
        v11 = MEMORY[0x1B5E21018](1, v8);
      }
      else
      {
        v11 = *(_QWORD *)(v8 + 40);
        swift_retain();
      }
      if ((sub_1B1ADE3D8(*(_QWORD *)(v11 + 16), *(_QWORD *)(v11 + 24), a1, a2, a3, a4) & 1) == 0)
      {
        swift_release();
        v13 = v9 - 2;
        if (!v13)
          goto LABEL_9;
        v14 = 0;
        v15 = a1 >> 16;
        v16 = a2 >> 16;
        while (1)
        {
          if (v10)
          {
            v11 = MEMORY[0x1B5E21018](v14 + 2, v8);
          }
          else
          {
            v11 = *(_QWORD *)(v8 + 8 * v14 + 48);
            swift_retain();
          }
          v17 = *(_QWORD *)(v11 + 16);
          v18 = *(_QWORD *)(v11 + 24);
          v19 = (v18 & 0x2000000000000000) != 0 ? HIBYTE(v18) & 0xF : v17 & 0xFFFFFFFFFFFFLL;
          v20 = v17 == a3 && v18 == a4;
          v21 = v20 && v15 == 0;
          v22 = v21 && v19 == v16;
          if (v22 || (sub_1B22299F4() & 1) != 0)
            break;
          swift_release();
          if (v13 == ++v14)
            goto LABEL_9;
        }
      }
    }
    swift_bridgeObjectRelease();
    return v11;
  }
  v9 = *(_QWORD *)((qword_1EEFD4FB0 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (v9)
    goto LABEL_5;
LABEL_9:
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_1B1A21E18(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, unint64_t *a6)
{
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  BOOL v23;
  BOOL v24;
  BOOL v25;

  if (*a5 != -1)
    swift_once();
  v11 = *a6;
  if (v11 >> 62)
  {
    swift_bridgeObjectRetain();
    v12 = sub_1B22296AC();
    if (!v12)
      goto LABEL_9;
LABEL_5:
    v13 = v11 & 0xC000000000000001;
    if ((v11 & 0xC000000000000001) != 0)
    {
      v14 = MEMORY[0x1B5E21018](0, v11);
    }
    else
    {
      v14 = *(_QWORD *)(v11 + 32);
      swift_retain();
    }
    if ((sub_1B1ADE3D8(*(_QWORD *)(v14 + 16), *(_QWORD *)(v14 + 24), a1, a2, a3, a4) & 1) == 0)
    {
      swift_release();
      if (v12 == 1)
        goto LABEL_9;
      if (v13)
      {
        v14 = MEMORY[0x1B5E21018](1, v11);
      }
      else
      {
        v14 = *(_QWORD *)(v11 + 40);
        swift_retain();
      }
      if ((sub_1B1ADE3D8(*(_QWORD *)(v14 + 16), *(_QWORD *)(v14 + 24), a1, a2, a3, a4) & 1) == 0)
      {
        swift_release();
        v16 = v12 - 2;
        if (!v16)
          goto LABEL_9;
        v17 = 0;
        v18 = a1 >> 16;
        v19 = a2 >> 16;
        while (1)
        {
          if (v13)
          {
            v14 = MEMORY[0x1B5E21018](v17 + 2, v11);
          }
          else
          {
            v14 = *(_QWORD *)(v11 + 8 * v17 + 48);
            swift_retain();
          }
          v20 = *(_QWORD *)(v14 + 16);
          v21 = *(_QWORD *)(v14 + 24);
          v22 = (v21 & 0x2000000000000000) != 0 ? HIBYTE(v21) & 0xF : v20 & 0xFFFFFFFFFFFFLL;
          v23 = v20 == a3 && v21 == a4;
          v24 = v23 && v18 == 0;
          v25 = v24 && v22 == v19;
          if (v25 || (sub_1B22299F4() & 1) != 0)
            break;
          swift_release();
          if (v16 == ++v17)
            goto LABEL_9;
        }
      }
    }
    swift_bridgeObjectRelease();
    return v14;
  }
  v12 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (v12)
    goto LABEL_5;
LABEL_9:
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_1B1A22024(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  BOOL v20;
  BOOL v21;
  BOOL v22;

  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a6 + 8) + 24))(a5);
  if (v10 >> 62)
  {
    v11 = sub_1B22296AC();
    if (!v11)
      goto LABEL_27;
  }
  else
  {
    v11 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v11)
      goto LABEL_27;
  }
  if ((v10 & 0xC000000000000001) != 0)
  {
    v12 = MEMORY[0x1B5E21018](0, v10);
  }
  else
  {
    v12 = *(_QWORD *)(v10 + 32);
    swift_retain();
  }
  if ((sub_1B1ADE3D8(*(_QWORD *)(v12 + 16), *(_QWORD *)(v12 + 24), a1, a2, a3, a4) & 1) == 0)
  {
    swift_release();
    v13 = v11 - 1;
    if (v13)
    {
      v14 = 0;
      v15 = a1 >> 16;
      v16 = a2 >> 16;
      do
      {
        if ((v10 & 0xC000000000000001) != 0)
        {
          v12 = MEMORY[0x1B5E21018](v14 + 1, v10);
        }
        else
        {
          v12 = *(_QWORD *)(v10 + 8 * v14 + 40);
          swift_retain();
        }
        v17 = *(_QWORD *)(v12 + 16);
        v18 = *(_QWORD *)(v12 + 24);
        v19 = (v18 & 0x2000000000000000) != 0 ? HIBYTE(v18) & 0xF : v17 & 0xFFFFFFFFFFFFLL;
        v20 = v17 == a3 && v18 == a4;
        v21 = v20 && v15 == 0;
        v22 = v21 && v19 == v16;
        if (v22 || (sub_1B22299F4() & 1) != 0)
          goto LABEL_6;
        swift_release();
      }
      while (v13 != ++v14);
    }
LABEL_27:
    swift_bridgeObjectRelease();
    return 0;
  }
LABEL_6:
  swift_bridgeObjectRelease();
  return v12;
}

uint64_t sub_1B1A221B8(uint64_t a1, uint64_t a2, __int16 a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  v3 = sub_1B1A30078(a1, a3 & 0x101);
  if (!(v3 >> 62))
  {
    v4 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v4)
      goto LABEL_3;
LABEL_9:
    swift_bridgeObjectRelease();
    return 0;
  }
  v4 = sub_1B22296AC();
  if (!v4)
    goto LABEL_9;
LABEL_3:
  sub_1B2229328();
  v5 = 0;
  while (1)
  {
    if ((v3 & 0xC000000000000001) != 0)
    {
      v6 = MEMORY[0x1B5E21018](v5, v3);
    }
    else
    {
      v6 = *(_QWORD *)(v3 + 8 * v5 + 32);
      swift_retain();
    }
    swift_retain_n();
    v7 = sub_1B22286E0();
    swift_release();
    swift_release();
    if ((v7 & 1) != 0)
      break;
    swift_release();
    if (v4 == ++v5)
      goto LABEL_9;
  }
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t sub_1B1A222F0()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  if (qword_1EEF56F08 != -1)
    swift_once();
  v1 = qword_1EEFD4FA0;
  v3 = *(_QWORD *)(v0 + 88);
  v2 = *(_QWORD *)(v0 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v4 = sub_1B1C6A62C(v3, v2, (void (*)(uint64_t *__return_ptr, uint64_t *))sub_1B1AB293C);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_1B19F4BEC((unint64_t)v4);
  if (!(v1 >> 62))
  {
    v5 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v5)
      goto LABEL_5;
LABEL_11:
    swift_bridgeObjectRelease();
    return 0;
  }
  swift_bridgeObjectRetain();
  v5 = sub_1B22296AC();
  swift_bridgeObjectRelease();
  if (!v5)
    goto LABEL_11;
LABEL_5:
  sub_1B2229328();
  v6 = 0;
  while (1)
  {
    if ((v1 & 0xC000000000000001) != 0)
    {
      v7 = MEMORY[0x1B5E21018](v6, v1);
    }
    else
    {
      v7 = *(_QWORD *)(v1 + 8 * v6 + 32);
      swift_retain();
    }
    swift_retain_n();
    v8 = sub_1B22286E0();
    swift_release();
    swift_release();
    if ((v8 & 1) != 0)
      break;
    swift_release();
    if (v5 == ++v6)
      goto LABEL_11;
  }
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t sub_1B1A224C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;

  if (qword_1EEF56F18 != -1)
    swift_once();
  v0 = qword_1EEFD4FB0;
  if (!((unint64_t)qword_1EEFD4FB0 >> 62))
  {
    v1 = *(_QWORD *)((qword_1EEFD4FB0 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v1)
      goto LABEL_5;
LABEL_11:
    swift_bridgeObjectRelease();
    return 0;
  }
  swift_bridgeObjectRetain();
  v1 = sub_1B22296AC();
  if (!v1)
    goto LABEL_11;
LABEL_5:
  sub_1B2229328();
  v2 = 0;
  while (1)
  {
    if ((v0 & 0xC000000000000001) != 0)
    {
      v3 = MEMORY[0x1B5E21018](v2, v0);
    }
    else
    {
      v3 = *(_QWORD *)(v0 + 8 * v2 + 32);
      swift_retain();
    }
    swift_retain_n();
    v4 = sub_1B22286E0();
    swift_release();
    swift_release();
    if ((v4 & 1) != 0)
      break;
    swift_release();
    if (v1 == ++v2)
      goto LABEL_11;
  }
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t sub_1B1A2262C(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  if (*a2 != -1)
    swift_once();
  v4 = *a3;
  if (!((unint64_t)*a3 >> 62))
  {
    v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v5)
      goto LABEL_5;
LABEL_11:
    swift_bridgeObjectRelease();
    return 0;
  }
  swift_bridgeObjectRetain();
  v5 = sub_1B22296AC();
  if (!v5)
    goto LABEL_11;
LABEL_5:
  sub_1B2229328();
  v6 = 0;
  while (1)
  {
    if ((v4 & 0xC000000000000001) != 0)
    {
      v7 = MEMORY[0x1B5E21018](v6, v4);
    }
    else
    {
      v7 = *(_QWORD *)(v4 + 8 * v6 + 32);
      swift_retain();
    }
    swift_retain_n();
    v8 = sub_1B22286E0();
    swift_release();
    swift_release();
    if ((v8 & 1) != 0)
      break;
    swift_release();
    if (v5 == ++v6)
      goto LABEL_11;
  }
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t sub_1B1A2278C()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;

  v0 = sub_1B1F6D49C();
  if (!(v0 >> 62))
  {
    v1 = *(_QWORD *)((v0 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v1)
      goto LABEL_3;
LABEL_9:
    swift_bridgeObjectRelease();
    return 0;
  }
  v1 = sub_1B22296AC();
  if (!v1)
    goto LABEL_9;
LABEL_3:
  sub_1B2229328();
  v2 = 0;
  while (1)
  {
    if ((v0 & 0xC000000000000001) != 0)
    {
      v3 = MEMORY[0x1B5E21018](v2, v0);
    }
    else
    {
      v3 = *(_QWORD *)(v0 + 8 * v2 + 32);
      swift_retain();
    }
    swift_retain_n();
    v4 = sub_1B22286E0();
    swift_release();
    swift_release();
    if ((v4 & 1) != 0)
      break;
    swift_release();
    if (v1 == ++v2)
      goto LABEL_9;
  }
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t sub_1B1A228BC()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;

  v0 = sub_1B1F706E0();
  if (!(v0 >> 62))
  {
    v1 = *(_QWORD *)((v0 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v1)
      goto LABEL_3;
LABEL_9:
    swift_bridgeObjectRelease();
    return 0;
  }
  v1 = sub_1B22296AC();
  if (!v1)
    goto LABEL_9;
LABEL_3:
  sub_1B2229328();
  v2 = 0;
  while (1)
  {
    if ((v0 & 0xC000000000000001) != 0)
    {
      v3 = MEMORY[0x1B5E21018](v2, v0);
    }
    else
    {
      v3 = *(_QWORD *)(v0 + 8 * v2 + 32);
      swift_retain();
    }
    swift_retain_n();
    v4 = sub_1B22286E0();
    swift_release();
    swift_release();
    if ((v4 & 1) != 0)
      break;
    swift_release();
    if (v1 == ++v2)
      goto LABEL_9;
  }
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t sub_1B1A229EC()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;

  v0 = sub_1B1F6C3FC();
  if (!(v0 >> 62))
  {
    v1 = *(_QWORD *)((v0 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v1)
      goto LABEL_3;
LABEL_9:
    swift_bridgeObjectRelease();
    return 0;
  }
  v1 = sub_1B22296AC();
  if (!v1)
    goto LABEL_9;
LABEL_3:
  sub_1B2229328();
  v2 = 0;
  while (1)
  {
    if ((v0 & 0xC000000000000001) != 0)
    {
      v3 = MEMORY[0x1B5E21018](v2, v0);
    }
    else
    {
      v3 = *(_QWORD *)(v0 + 8 * v2 + 32);
      swift_retain();
    }
    swift_retain_n();
    v4 = sub_1B22286E0();
    swift_release();
    swift_release();
    if ((v4 & 1) != 0)
      break;
    swift_release();
    if (v1 == ++v2)
      goto LABEL_9;
  }
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t sub_1B1A22B1C()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  if (qword_1EEF57550 != -1)
    swift_once();
  v1 = qword_1EEFD58C8;
  v3 = *(_QWORD *)(v0 + 152);
  v2 = *(_QWORD *)(v0 + 160);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v4 = sub_1B1C6A62C(v3, v2, (void (*)(uint64_t *__return_ptr, uint64_t *))sub_1B1AB293C);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_1B19F4BEC((unint64_t)v4);
  if (!(v1 >> 62))
  {
    v5 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v5)
      goto LABEL_5;
LABEL_11:
    swift_bridgeObjectRelease();
    return 0;
  }
  swift_bridgeObjectRetain();
  v5 = sub_1B22296AC();
  swift_bridgeObjectRelease();
  if (!v5)
    goto LABEL_11;
LABEL_5:
  sub_1B2229328();
  v6 = 0;
  while (1)
  {
    if ((v1 & 0xC000000000000001) != 0)
    {
      v7 = MEMORY[0x1B5E21018](v6, v1);
    }
    else
    {
      v7 = *(_QWORD *)(v1 + 8 * v6 + 32);
      swift_retain();
    }
    swift_retain_n();
    v8 = sub_1B22286E0();
    swift_release();
    swift_release();
    if ((v8 & 1) != 0)
      break;
    swift_release();
    if (v5 == ++v6)
      goto LABEL_11;
  }
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t sub_1B1A22CEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a3 + 8) + 24))(a2);
  if (!(v3 >> 62))
  {
    v4 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v4)
      goto LABEL_3;
LABEL_9:
    swift_bridgeObjectRelease();
    return 0;
  }
  v4 = sub_1B22296AC();
  if (!v4)
    goto LABEL_9;
LABEL_3:
  sub_1B2229328();
  v5 = 0;
  while (1)
  {
    if ((v3 & 0xC000000000000001) != 0)
    {
      v6 = MEMORY[0x1B5E21018](v5, v3);
    }
    else
    {
      v6 = *(_QWORD *)(v3 + 8 * v5 + 32);
      swift_retain();
    }
    swift_retain_n();
    v7 = sub_1B22286E0();
    swift_release();
    swift_release();
    if ((v7 & 1) != 0)
      break;
    swift_release();
    if (v4 == ++v5)
      goto LABEL_9;
  }
  swift_bridgeObjectRelease();
  return v6;
}

char *sub_1B1A22E2C(uint64_t a1, uint64_t a2)
{
  uint64_t (*v4)(void);
  char *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;

  v4 = *(uint64_t (**)(void))(a2 + 64);
  if ((v4() & 0x20) != 0)
  {
    v5 = sub_1B1C64544(0, 1, 1, MEMORY[0x1E0DEE9D8]);
    v7 = *((_QWORD *)v5 + 2);
    v6 = *((_QWORD *)v5 + 3);
    if (v7 >= v6 >> 1)
      v5 = sub_1B1C64544(v6 > 1, v7 + 1, 1, v5);
    *((_QWORD *)v5 + 2) = v7 + 1;
    v5[v7 + 32] = 2;
  }
  else
  {
    v5 = (char *)MEMORY[0x1E0DEE9D8];
  }
  if ((((uint64_t (*)(uint64_t, uint64_t))v4)(a1, a2) & 0x10) != 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v5 = sub_1B1C64544(0, *((_QWORD *)v5 + 2) + 1, 1, v5);
    v9 = *((_QWORD *)v5 + 2);
    v8 = *((_QWORD *)v5 + 3);
    if (v9 >= v8 >> 1)
      v5 = sub_1B1C64544(v8 > 1, v9 + 1, 1, v5);
    *((_QWORD *)v5 + 2) = v9 + 1;
    v5[v9 + 32] = 1;
  }
  if ((((uint64_t (*)(uint64_t, uint64_t))v4)(a1, a2) & 0x40) != 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v5 = sub_1B1C64544(0, *((_QWORD *)v5 + 2) + 1, 1, v5);
    v11 = *((_QWORD *)v5 + 2);
    v10 = *((_QWORD *)v5 + 3);
    if (v11 >= v10 >> 1)
      v5 = sub_1B1C64544(v10 > 1, v11 + 1, 1, v5);
    *((_QWORD *)v5 + 2) = v11 + 1;
    v5[v11 + 32] = 3;
  }
  if ((((uint64_t (*)(uint64_t, uint64_t))v4)(a1, a2) & 0x80) != 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v5 = sub_1B1C64544(0, *((_QWORD *)v5 + 2) + 1, 1, v5);
    v13 = *((_QWORD *)v5 + 2);
    v12 = *((_QWORD *)v5 + 3);
    if (v13 >= v12 >> 1)
      v5 = sub_1B1C64544(v12 > 1, v13 + 1, 1, v5);
    *((_QWORD *)v5 + 2) = v13 + 1;
    v5[v13 + 32] = 4;
  }
  return v5;
}

BOOL sub_1B1A23050(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  _BOOL8 result;

  v6 = sub_1B1E28574(a1, a2, a4, *(_QWORD *)(a5 + 8));
  result = 0;
  if (v6)
  {
    v7 = *(_QWORD *)(v6 + 40);
    swift_release();
    if (v7 == a3 || a3 == MEMORY[0x1E0DEE9B8] + 8)
      return 1;
  }
  return result;
}

uint64_t sub_1B1A230AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8, char a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, __int16 a15, uint64_t a16, uint64_t a17)
{
  return sub_1B1A23334(a3, a14, a1, a2, a6, a7 & 1, a8, a9 & 1, a10, a11 & 1, a4, a5, a12, a13, a15, a16, a3, a17);
}

_QWORD *sub_1B1A23130(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;

  v7 = *a2;
  type metadata accessor for EntityGetSet(0, a3, a3, a4);
  v10 = sub_1B1BF4B58(a2, *(_QWORD *)(a4 + 16), v8, v9);
  v11 = (_QWORD *)swift_allocObject();
  v12 = *(_QWORD *)(v7 + *MEMORY[0x1E0DEC880]);
  v11[2] = v12;
  v11[3] = a3;
  v11[4] = a4;
  v11[5] = v10;
  v13 = (_QWORD *)swift_allocObject();
  v13[2] = v12;
  v13[3] = a3;
  v13[4] = a4;
  v13[5] = v10;
  v14 = sub_1B1BF4C30((uint64_t)sub_1B1AE834C, (uint64_t)v11, (uint64_t)sub_1B1AE8358, (uint64_t)v13, v10[6]);
  swift_retain();
  return v14;
}

uint64_t sub_1B1A23204@<X0>(uint64_t a1@<X2>, uint64_t a2@<X4>, uint64_t a3@<X8>)
{
  uint64_t v5;
  int v6;
  uint64_t v8;
  _QWORD v9[4];

  (*(void (**)(_QWORD *__return_ptr))(a1 + 32))(v9);
  v5 = MEMORY[0x1E0DEE9B8] + 8;
  sub_1B1A18378((uint64_t)v9, (uint64_t)&v8, (unint64_t *)&qword_1ED4BB150, MEMORY[0x1E0DEE9B8] + 8);
  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BB150, v5, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  v6 = swift_dynamicCast();
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 56))(a3, v6 ^ 1u, 1, a2);
}

uint64_t sub_1B1A232B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t *v11;
  uint64_t v13[4];

  v13[3] = a6;
  v11 = sub_1B1A137F4(v13);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a6 - 8) + 16))(v11, a3, a6);
  (*(void (**)(uint64_t, uint64_t, uint64_t *))(a4 + 16))(a1, a2, v13);
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v13);
}

uint64_t sub_1B1A23334(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, char a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, __int16 a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t *KeyPath;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  _OWORD *v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t v36;
  char v38;
  char v39;
  char v40;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  _BYTE v46[32];
  _OWORD v47[2];

  v38 = a6 & 1;
  v39 = a8 & 1;
  v40 = a10 & 1;
  sub_1B1A0DCD4(a2, (uint64_t)&v43);
  if (*((_QWORD *)&v44 + 1))
  {
    sub_1B1A0DDAC(&v43, v47);
    v20 = type metadata accessor for BindingPropertyDescription();
    MEMORY[0x1E0C80A78](v20, v21);
    KeyPath = (uint64_t *)swift_getKeyPath();
    MEMORY[0x1E0C80A78](KeyPath, v23);
    v24 = (uint64_t *)swift_getKeyPath();
    swift_bridgeObjectRetain_n();
    v25 = sub_1B1A23130(a17, v24, a17, a18);
    swift_release();
    sub_1B1A02864((uint64_t)v47, (uint64_t)v46);
    swift_bridgeObjectRetain();
    swift_dynamicCast();
    v26 = *(_QWORD *)(a18 + 16);
    v27 = (_OWORD *)swift_allocObject();
    v28 = v44;
    v27[14] = v43;
    v27[15] = v28;
    v27[16] = v45;
    v29 = sub_1B1BF499C(a3, a4, a5, v38, a7, v39, a9, v40, KeyPath, v25, a11, a12, a13, a14, a15, v26);
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v47);
  }
  else
  {
    sub_1B1AEA224((uint64_t)&v43, (uint64_t)&qword_1ED4BB150, MEMORY[0x1E0DEE9B8] + 8, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))sub_1B1A02758);
    v30 = type metadata accessor for PropertyDescription();
    MEMORY[0x1E0C80A78](v30, v31);
    v32 = (uint64_t *)swift_getKeyPath();
    MEMORY[0x1E0C80A78](v32, v33);
    v34 = (uint64_t *)swift_getKeyPath();
    swift_bridgeObjectRetain_n();
    v35 = sub_1B1A23130(a17, v34, a17, a18);
    swift_release();
    v36 = *(_QWORD *)(a18 + 16);
    swift_bridgeObjectRetain();
    return sub_1B1BF4C88(a3, a4, a5, v38, a7, v39, a9, v40, v32, v35, a11, a12, a13, a14, a15, v36);
  }
  return v29;
}

uint64_t sub_1B1A236B4(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = a2[1];
  if (v3 == *a1 && v4 == a1[1])
    return 1;
  else
    return sub_1B2229D24();
}

uint64_t sub_1B1A236DC()
{
  return sub_1B222892C();
}

uint64_t sub_1B1A236E8(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)((char *)a2 + a3 - 8) + 24))(*a2, a2[1], *(_QWORD *)((char *)a2 + a3 - 24));
}

uint64_t sub_1B1A2371C(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(_BYTE *, uint64_t, uint64_t, uint64_t, uint64_t);
  _BYTE v10[32];

  v4 = *(uint64_t *)((char *)a3 + a4 - 24);
  v5 = *(uint64_t *)((char *)a3 + a4 - 8);
  v6 = *a3;
  v7 = a3[1];
  sub_1B1A02864(a1, (uint64_t)v10);
  v8 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 32);
  swift_bridgeObjectRetain();
  return v8(v10, v6, v7, v4, v5);
}

uint64_t sub_1B1A2378C()
{
  return 0x4520746F4E206F44;
}

uint64_t sub_1B1A237B0()
{
  return MEMORY[0x1E0DEE9D8];
}

void sub_1B1A237BC()
{
  sub_1B1A6D988();
}

uint64_t sub_1B1A237F8()
{
  uint64_t v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E440;
  KeyPath = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B8100, MEMORY[0x1E0DEB418], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = sub_1B1ADEED8;
  v2[5] = KeyPath;
  v2[2] = sub_1B1ADEF08;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v3 = sub_1B1AD6CCC(0x726564726FLL, 0xE500000000000000, 0xC059000000000000, 0, 0x4059000000000000, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v2, KeyPath, 0xD000000000000011, 0x80000001B232C710,
         0,
         MEMORY[0x1E0DEE9D8],
         0,
         (uint64_t)sub_1B1ADEF28);
  swift_release();
  *(_QWORD *)(v0 + 32) = v3;
  result = sub_1B2228AD0();
  qword_1EEFD4E98 = v0;
  return result;
}

uint64_t sub_1B1A23990()
{
  return 0x696C756465686353;
}

uint64_t sub_1B1A239AC()
{
  return 8;
}

uint64_t sub_1B1A239B4(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, qword_1EEF56DD0);
}

uint64_t sub_1B1A239D0(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, qword_1EEF56DD0, (unint64_t *)&qword_1EEFD4E98);
}

uint64_t sub_1B1A239FC(uint64_t a1)
{
  return sub_1B1A2262C(a1, qword_1EEF56DD0, &qword_1EEFD4E98);
}

uint64_t sub_1B1A23A28()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E450;
  KeyPath = swift_getKeyPath();
  v2 = swift_getKeyPath();
  sub_1B1ADF51C();
  v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_1B226D240;
  *(_QWORD *)(v3 + 32) = 0;
  *(_QWORD *)(v3 + 40) = 0xE000000000000000;
  v4 = MEMORY[0x1E0DEE0F8];
  *(_QWORD *)(v3 + 72) = MEMORY[0x1E0DEE0F8];
  *(_DWORD *)(v3 + 48) = 0;
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4B8178, v4, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v5 = (_QWORD *)swift_allocObject();
  v5[4] = sub_1B1ADF584;
  v5[5] = KeyPath;
  v5[2] = sub_1B1ADF5B4;
  v5[3] = KeyPath;
  v5[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  v6 = sub_1B1AD7CEC(0x65756C6176, 0xE500000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v2, 1, 0, (uint64_t)v5, KeyPath, 0, 0,
         0,
         v3,
         0,
         (uint64_t)sub_1B1ADF704);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + 32) = v6;
  v7 = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F0, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v8 = (_QWORD *)swift_allocObject();
  v8[4] = sub_1B1ADF5D4;
  v8[5] = v7;
  v8[2] = sub_1B1ADF604;
  v8[3] = v7;
  v8[6] = v7;
  swift_allocObject();
  swift_retain_n();
  v9 = sub_1B1ADE580(0x7A696D6F646E6172, 0xE900000000000065, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v8, v7, 0xD000000000000027, 0x80000001B232C7B0,
         32,
         MEMORY[0x1E0DEE9D8],
         0,
         (uint64_t)sub_1B1ADF624);
  swift_release();
  *(_QWORD *)(v0 + 40) = v9;
  result = sub_1B2228AD0();
  qword_1ED4D0DE8 = v0;
  return result;
}

BOOL sub_1B1A23D3C(uint64_t a1)
{
  return (a1 & 0x100000000) == 0;
}

uint64_t sub_1B1A23D48()
{
  return 0x53206D6F646E6152;
}

uint64_t sub_1B1A23D68(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, qword_1ED4B9E08);
}

uint64_t sub_1B1A23D84(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, qword_1ED4B9E08, (unint64_t *)&qword_1ED4D0DE8);
}

uint64_t sub_1B1A23DB0(uint64_t a1)
{
  return sub_1B1A2262C(a1, qword_1ED4B9E08, &qword_1ED4D0DE8);
}

uint64_t sub_1B1A23DDC()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t KeyPath;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E460;
  v1 = (_QWORD *)v0;
  KeyPath = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F0, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v3 = (_QWORD *)swift_allocObject();
  v3[4] = sub_1B1ADF81C;
  v3[5] = KeyPath;
  v3[2] = sub_1B1ADF84C;
  v3[3] = KeyPath;
  v3[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v4 = MEMORY[0x1E0DEE9D8];
  v5 = sub_1B1ADE580(0x2073657461647055, 0xEE00555047206E4FLL, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 19, 0, (uint64_t)v3, KeyPath, 0xD000000000000036, 0x80000001B232C7E0,
         32,
         MEMORY[0x1E0DEE9D8],
         0,
         (uint64_t)sub_1B1ADFF60);
  swift_release();
  v1[4] = v5;
  v6 = swift_getKeyPath();
  v7 = (_QWORD *)swift_allocObject();
  v7[4] = sub_1B1ADF81C;
  v7[5] = v6;
  v7[2] = sub_1B1ADF84C;
  v7[3] = v6;
  v7[6] = v6;
  swift_allocObject();
  swift_retain_n();
  v8 = sub_1B1ADE580(0x206E6F20736E7552, 0xEB00000000555047, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 19, 0, (uint64_t)v7, v6, 0, 0,
         4,
         v4,
         0,
         (uint64_t)sub_1B1ADFF60);
  swift_release();
  v1[5] = v8;
  v1[6] = sub_1B1ABF400(1087, 1684366675, 0xE400000000000000, (uint64_t)&type metadata for Seed, (uint64_t)&off_1E63B9F00, 0x65756C6176, 0xE500000000000000);
  v1[7] = sub_1B1ABF400(1087, 0xD000000000000014, 0x80000001B232C820, (uint64_t)&type metadata for Seed, (uint64_t)&off_1E63B9F00, 0x7A696D6F646E6172, 0xE900000000000065);
  v9 = swift_getKeyPath();
  v10 = swift_getKeyPath();
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4B8140, MEMORY[0x1E0DEDC60], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v11 = (_QWORD *)swift_allocObject();
  v11[4] = sub_1B1ADF88C;
  v11[5] = v10;
  v11[2] = sub_1B1ADF8BC;
  v11[3] = v10;
  v11[6] = v10;
  swift_allocObject();
  swift_retain_n();
  v12 = MEMORY[0x1E0DEE9D8];
  v13 = sub_1B1ADBDA8(0x6974616C756D6973, 0xEF7865646E496E6FLL, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v11, v10, 0, 0,
          0,
          MEMORY[0x1E0DEE9D8],
          0,
          (uint64_t)sub_1B1ADFE38);
  swift_release();
  sub_1B1A02758(0, &qword_1EEF58F10, (uint64_t)&type metadata for EmitterDescription.PhysicsSimulation, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v14 = (_QWORD *)swift_allocObject();
  v14[4] = sub_1B1ADF8DC;
  v14[5] = v9;
  v14[2] = sub_1B1ADF90C;
  v14[3] = v9;
  v14[6] = v9;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v15 = sub_1B1AC1BE4(0x73636973796850, 0xE700000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v14, v9, 0, 0,
          32,
          v12,
          v13);
  swift_release();
  swift_release();
  v1[8] = v15;
  v16 = swift_getKeyPath();
  v17 = (_QWORD *)swift_allocObject();
  v17[4] = sub_1B1ADF81C;
  v17[5] = v16;
  v17[2] = sub_1B1ADF84C;
  v17[3] = v16;
  v17[6] = v16;
  swift_allocObject();
  swift_retain_n();
  v18 = sub_1B1ADE580(0x6C61636F4C7369, 0xE700000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v17, v16, 0, 0,
          0,
          v12,
          0,
          (uint64_t)sub_1B1ADFF60);
  swift_release();
  v1[9] = v18;
  v19 = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F8, MEMORY[0x1E0DEB188], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v20 = (_QWORD *)swift_allocObject();
  v20[4] = sub_1B1ADF92C;
  v20[5] = v19;
  v20[2] = sub_1B1ADF95C;
  v20[3] = v19;
  v20[6] = v19;
  swift_allocObject();
  swift_retain_n();
  v21 = sub_1B1ADC904(0x754470756D726157, 0xEE006E6F69746172, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v20, v19, 0, 0,
          32,
          v12,
          0,
          (uint64_t)sub_1B1ADFC54);
  swift_release();
  v1[10] = v21;
  v22 = swift_getKeyPath();
  v23 = (_QWORD *)swift_allocObject();
  v23[4] = sub_1B1ADF92C;
  v23[5] = v22;
  v23[2] = sub_1B1ADF95C;
  v23[3] = v22;
  v23[6] = v22;
  swift_allocObject();
  swift_retain_n();
  v24 = sub_1B1ADC904(0x6974616C756D6953, 0xEE00657461526E6FLL, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v23, v22, 0, 0,
          0,
          v12,
          0,
          (uint64_t)sub_1B1ADFC54);
  swift_release();
  v1[11] = v24;
  v25 = swift_getKeyPath();
  sub_1B1ADF51C();
  v26 = swift_allocObject();
  *(_OWORD *)(v26 + 16) = xmmword_1B226D240;
  *(_QWORD *)(v26 + 32) = 0;
  *(_QWORD *)(v26 + 40) = 0xE000000000000000;
  v27 = MEMORY[0x1E0DEB418];
  *(_QWORD *)(v26 + 72) = MEMORY[0x1E0DEB418];
  *(_QWORD *)(v26 + 48) = 10;
  sub_1B1ADF9C4(0);
  v28 = (_QWORD *)swift_allocObject();
  v28[4] = sub_1B1ADF97C;
  v28[5] = v25;
  v28[2] = sub_1B1ADF9A4;
  v28[3] = v25;
  v28[6] = v25;
  swift_allocObject();
  swift_retain_n();
  swift_bridgeObjectRetain();
  v29 = sub_1B1ABD450(0xD000000000000010, 0x80000001B232C840, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v28, v25, 0, 0,
          32,
          v26,
          0,
          &qword_1ED4BA580,
          v27,
          (uint64_t)sub_1B1ADFA6C);
  swift_release();
  swift_bridgeObjectRelease();
  v1[12] = v29;
  v30 = swift_getKeyPath();
  v31 = (_QWORD *)swift_allocObject();
  v31[4] = sub_1B1ADF81C;
  v31[5] = v30;
  v31[2] = sub_1B1ADF84C;
  v31[3] = v30;
  v31[6] = v30;
  swift_allocObject();
  swift_retain_n();
  v32 = MEMORY[0x1E0DEE9D8];
  v33 = sub_1B1ADE580(0x6E756F426576694CLL, 0xEF786F42676E6964, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v31, v30, 0, 0,
          32,
          MEMORY[0x1E0DEE9D8],
          0,
          (uint64_t)sub_1B1ADFF60);
  swift_release();
  v1[13] = v33;
  v34 = swift_getKeyPath();
  v35 = (_QWORD *)swift_allocObject();
  v35[4] = sub_1B1ADF81C;
  v35[5] = v34;
  v35[2] = sub_1B1ADF84C;
  v35[3] = v34;
  v35[6] = v34;
  swift_allocObject();
  swift_retain_n();
  v36 = sub_1B1ADE580(0xD000000000000011, 0x80000001B232C860, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v35, v34, 0, 0,
          32,
          v32,
          0,
          (uint64_t)sub_1B1ADFF60);
  swift_release();
  v1[14] = v36;
  v37 = swift_getKeyPath();
  v38 = (_QWORD *)swift_allocObject();
  v38[4] = sub_1B1ADF81C;
  v38[5] = v37;
  v38[2] = sub_1B1ADF84C;
  v38[3] = v37;
  v38[6] = v37;
  swift_allocObject();
  swift_retain_n();
  v39 = sub_1B1ADE580(0x6E756F42776F6853, 0xEF786F42676E6964, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v38, v37, 0, 0,
          32,
          v32,
          0,
          (uint64_t)sub_1B1ADFF60);
  swift_release();
  v1[15] = v39;
  v40 = swift_getKeyPath();
  v41 = (_QWORD *)swift_allocObject();
  v41[4] = sub_1B1ADF81C;
  v41[5] = v40;
  v41[2] = sub_1B1ADF84C;
  v41[3] = v40;
  v41[6] = v40;
  swift_allocObject();
  swift_retain_n();
  v42 = v32;
  v43 = sub_1B1ADE580(0xD000000000000011, 0x80000001B2328DB0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v41, v40, 0, 0,
          0,
          v32,
          0,
          (uint64_t)sub_1B1ADFF60);
  swift_release();
  v1[16] = v43;
  v44 = swift_getKeyPath();
  v45 = swift_getKeyPath();
  v46 = (_QWORD *)swift_allocObject();
  v46[4] = sub_1B1ADF92C;
  v46[5] = v44;
  v46[2] = sub_1B1ADF95C;
  v46[3] = v44;
  v46[6] = v44;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v47 = sub_1B1ADC904(0xD000000000000017, 0x80000001B2328DD0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v45, 1, 0, (uint64_t)v46, v44, 0, 0,
          0,
          v42,
          0,
          (uint64_t)sub_1B1ADFC54);
  swift_release();
  swift_release();
  v1[17] = v47;
  v48 = swift_getKeyPath();
  v49 = swift_getKeyPath();
  v50 = (_QWORD *)swift_allocObject();
  v50[4] = sub_1B1ADF81C;
  v50[5] = v48;
  v50[2] = sub_1B1ADF84C;
  v50[3] = v48;
  v50[6] = v48;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v51 = MEMORY[0x1E0DEE9D8];
  v52 = sub_1B1ADE580(0xD000000000000015, 0x80000001B232C880, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v49, 1, 0, (uint64_t)v50, v48, 0, 0,
          32,
          MEMORY[0x1E0DEE9D8],
          0,
          (uint64_t)sub_1B1ADFF60);
  swift_release();
  swift_release();
  v1[18] = v52;
  v53 = swift_getKeyPath();
  v54 = (_QWORD *)swift_allocObject();
  v54[4] = sub_1B1ADF81C;
  v54[5] = v53;
  v54[2] = sub_1B1ADF84C;
  v54[3] = v53;
  v54[6] = v53;
  swift_allocObject();
  swift_retain_n();
  v55 = sub_1B1ADE580(0xD000000000000014, 0x80000001B232C8A0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v54, v53, 0xD000000000000045, 0x80000001B232C8C0,
          32,
          v51,
          0,
          (uint64_t)sub_1B1ADFF60);
  swift_release();
  v1[19] = v55;
  v56 = swift_getKeyPath();
  v57 = (_QWORD *)swift_allocObject();
  v57[4] = sub_1B1ADF81C;
  v57[5] = v56;
  v57[2] = sub_1B1ADF84C;
  v57[3] = v56;
  v57[6] = v56;
  swift_allocObject();
  swift_retain_n();
  v58 = sub_1B1ADE580(0x6E7568436F6E6F4DLL, 0xE90000000000006BLL, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v57, v56, 0xD000000000000034, 0x80000001B232C910,
          32,
          v51,
          0,
          (uint64_t)sub_1B1ADFF60);
  swift_release();
  v1[20] = v58;
  result = sub_1B2228AD0();
  qword_1EEFD4EA0 = (uint64_t)v1;
  return result;
}

uint64_t sub_1B1A24EB4()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 76);
}

uint64_t sub_1B1A24EBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  void (*v39)(char *, char *, uint64_t);
  uint64_t v40;
  void (*v41)(char *, uint64_t);
  char *v42;
  char *v43;
  char *v44;
  char v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  char *v49;
  char v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  char *v54;
  char *v55;
  char *v56;
  uint64_t v57;
  char *v59;
  char v60;
  char *v61;
  char *v62;
  char *v63;
  char *v64;
  uint64_t v65;
  char *v66;
  uint64_t AssociatedTypeWitness;
  uint64_t v68;
  char *v69;
  char *v70;
  char *v71;
  uint64_t v72;
  unint64_t v73;

  v4 = *(_QWORD *)(*(_QWORD *)(a4 + 24) + 16);
  swift_getAssociatedTypeWitness();
  v68 = v4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v5);
  v7 = (char *)&v62 - v6;
  v8 = swift_checkMetadataState();
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v62 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12, v13);
  v64 = (char *)&v62 - v14;
  MEMORY[0x1E0C80A78](v15, v16);
  v69 = (char *)&v62 - v17;
  MEMORY[0x1E0C80A78](v18, v19);
  v70 = (char *)&v62 - v20;
  MEMORY[0x1E0C80A78](v21, v22);
  v66 = (char *)&v62 - v23;
  MEMORY[0x1E0C80A78](v24, v25);
  v27 = (char *)&v62 - v26;
  MEMORY[0x1E0C80A78](v28, v29);
  v31 = (char *)&v62 - v30;
  MEMORY[0x1E0C80A78](v32, v33);
  v35 = (char *)&v62 - v34;
  v37 = v36;
  sub_1B22289C8();
  v38 = sub_1B22292C8();
  v39 = *(void (**)(char *, char *, uint64_t))(v37 + 16);
  v71 = v35;
  v39(v31, v35, v8);
  v65 = v37;
  if ((v38 & 1) == 0)
  {
    v41 = *(void (**)(char *, uint64_t))(v37 + 8);
    v41(v31, v8);
    goto LABEL_7;
  }
  v62 = v7;
  v63 = v11;
  v40 = sub_1B22292BC();
  v41 = *(void (**)(char *, uint64_t))(v37 + 8);
  v41(v31, v8);
  if (v40 <= 64)
  {
LABEL_7:
    v44 = v70;
    v43 = v71;
    goto LABEL_17;
  }
  v42 = v27;
  v39(v27, v71, v8);
  v73 = 0x8000000000000000;
  if ((sub_1B22292C8() & 1) != 0)
  {
    if (sub_1B22292BC() < 64)
      goto LABEL_13;
LABEL_10:
    sub_1B1AE8EC8();
    v47 = v66;
    sub_1B222928C();
    sub_1B222865C();
    v41(v47, v8);
LABEL_14:
    v44 = v70;
    goto LABEL_15;
  }
  v45 = sub_1B22292C8();
  v46 = sub_1B22292BC();
  if ((v45 & 1) != 0)
  {
    if (v46 <= 64)
    {
      swift_getAssociatedConformanceWitness();
      sub_1B2229F88();
      v59 = v66;
      sub_1B2229CC4();
      v60 = sub_1B222865C();
      v41(v59, v8);
      v61 = v63;
      (*(void (**)(char *, char *, uint64_t))(v65 + 32))(v63, v27, v8);
      v44 = v70;
      v43 = v71;
      if ((v60 & 1) == 0)
        sub_1B22292B0();
      v42 = v61;
      goto LABEL_16;
    }
    goto LABEL_10;
  }
  if (v46 < 64)
  {
LABEL_13:
    sub_1B22292B0();
    goto LABEL_14;
  }
  v44 = v70;
LABEL_15:
  v43 = v71;
LABEL_16:
  v41(v42, v8);
LABEL_17:
  v48 = sub_1B22292BC();
  v39(v44, v43, v8);
  if (v48 >= 65)
  {
    v41(v44, v8);
    goto LABEL_19;
  }
  v53 = sub_1B22292BC();
  v41(v44, v8);
  if (v53 == 64 && (sub_1B22292C8() & 1) == 0)
  {
LABEL_19:
    v49 = v69;
    v39(v69, v43, v8);
    v73 = 0x7FFFFFFFFFFFFFFFLL;
    v50 = sub_1B22292C8();
    v51 = sub_1B22292BC();
    if ((v50 & 1) != 0)
    {
      if (v51 >= 65)
      {
        sub_1B1AE8EC8();
        v52 = v66;
        sub_1B222928C();
        sub_1B222865C();
        v41(v52, v8);
LABEL_27:
        v54 = v49;
LABEL_29:
        v41(v54, v8);
        goto LABEL_30;
      }
    }
    else if (v51 > 63)
    {
      v72 = 0x7FFFFFFFFFFFFFFFLL;
      v55 = v66;
      (*(void (**)(char *, char *, uint64_t))(v65 + 32))(v66, v49, v8);
      sub_1B1AE8EC8();
      v56 = v64;
      sub_1B222928C();
      sub_1B222865C();
      v41(v56, v8);
      v54 = v55;
      goto LABEL_29;
    }
    sub_1B22292B0();
    goto LABEL_27;
  }
LABEL_30:
  v57 = sub_1B22292B0();
  v41(v43, v8);
  return v57;
}

uint64_t sub_1B1A25528(uint64_t result)
{
  char *v1;
  char v2;

  v2 = result;
  if (result >= 5u)
    v2 = 5;
  *v1 = v2;
  return result;
}

unint64_t sub_1B1A25540(unint64_t result)
{
  char *v1;
  char v2;

  v2 = 3;
  if (result < 3)
    v2 = result;
  *v1 = v2;
  return result;
}

unint64_t sub_1B1A25554(unint64_t result)
{
  char *v1;
  char v2;

  v2 = 4;
  if (result < 4)
    v2 = result;
  *v1 = v2;
  return result;
}

uint64_t sub_1B1A25568(uint64_t result)
{
  char *v1;
  char v2;

  v2 = result;
  if (result >= 3u)
    v2 = 3;
  *v1 = v2;
  return result;
}

uint64_t sub_1B1A25580(uint64_t result)
{
  char *v1;
  char v2;

  v2 = result;
  if ((result & 0xFC) != 0)
    v2 = 4;
  *v1 = v2;
  return result;
}

uint64_t sub_1B1A25598(uint64_t result)
{
  char *v1;
  char v2;

  v2 = result;
  if (result >= 6u)
    v2 = 6;
  *v1 = v2;
  return result;
}

uint64_t sub_1B1A255B0(uint64_t result)
{
  char *v1;
  char v2;

  v2 = result;
  if (result >= 7u)
    v2 = 7;
  *v1 = v2;
  return result;
}

uint64_t sub_1B1A255C8()
{
  return 0x73676E6974746553;
}

uint64_t sub_1B1A255E0()
{
  return 49283080;
}

uint64_t sub_1B1A255EC()
{
  if (qword_1EEF56DE0 != -1)
    swift_once();
  return swift_bridgeObjectRetain();
}

uint64_t sub_1B1A2562C(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, &qword_1EEF56DE0);
}

uint64_t sub_1B1A25648(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, &qword_1EEF56DE0, (unint64_t *)&qword_1EEFD4EA0);
}

uint64_t sub_1B1A25674(uint64_t a1)
{
  return sub_1B1A2262C(a1, &qword_1EEF56DE0, &qword_1EEFD4EA0);
}

uint64_t sub_1B1A256A0()
{
  uint64_t v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E470;
  KeyPath = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1EEF58F78, (uint64_t)&type metadata for AABB, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = sub_1B1AE006C;
  v2[5] = KeyPath;
  v2[2] = sub_1B1AE0094;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v3 = MEMORY[0x1E0DEE9D8];
  v4 = sub_1B1ADDC38(0x65756C6176, 0xE500000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v2, KeyPath, 0, 0,
         4,
         MEMORY[0x1E0DEE9D8],
         0,
         (uint64_t)sub_1B1AE0444);
  swift_release();
  *(_QWORD *)(v0 + 32) = v4;
  v5 = swift_getKeyPath();
  sub_1B1AE015C(0);
  v6 = (_QWORD *)swift_allocObject();
  v6[4] = sub_1B1AE0104;
  v6[5] = v5;
  v6[2] = sub_1B1AE013C;
  v6[3] = v5;
  v6[6] = v5;
  swift_allocObject();
  swift_retain_n();
  v7 = sub_1B1ADC528(7235949, 0xE300000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 0, (uint64_t)v6, v5, 0, 0,
         0,
         v3,
         0);
  swift_release();
  *(_QWORD *)(v0 + 40) = v7;
  v8 = swift_getKeyPath();
  v9 = (_QWORD *)swift_allocObject();
  v9[4] = sub_1B1AE0104;
  v9[5] = v8;
  v9[2] = sub_1B1AE013C;
  v9[3] = v8;
  v9[6] = v8;
  swift_allocObject();
  swift_retain_n();
  v10 = sub_1B1ADC528(7889261, 0xE300000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 0, (uint64_t)v9, v8, 0, 0,
          0,
          v3,
          0);
  swift_release();
  *(_QWORD *)(v0 + 48) = v10;
  result = sub_1B2228AD0();
  qword_1EEFD4EA8 = v0;
  return result;
}

__n128 sub_1B1A259D0@<Q0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

__n128 sub_1B1A259DC(uint64_t a1, _OWORD *a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

void sub_1B1A259E8(float32x4_t *a1@<X0>, _OWORD *a2@<X8>)
{
  __int128 v3;

  *(double *)&v3 = sub_1B1AE0244(*a1, a1[1]);
  *a2 = v3;
}

void sub_1B1A25A10(float32x4_t *a1, float32x4_t *a2)
{
  float32x4_t v3;
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;

  v6 = *a1;
  *(double *)v3.i64 = sub_1B1AE0274(*a2, a2[1]);
  *(double *)v4.i64 = sub_1B1AE024C(v6, v3);
  *a2 = v4;
  a2[1] = v5;
}

void sub_1B1A25A54(float32x4_t *a1@<X0>, _OWORD *a2@<X8>)
{
  __int128 v3;

  *(double *)&v3 = sub_1B1AE0274(*a1, a1[1]);
  *a2 = v3;
}

void sub_1B1A25A7C(float32x4_t *a1, float32x4_t *a2)
{
  float32x4_t v3;
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;

  v6 = *a1;
  *(double *)v3.i64 = sub_1B1AE0244(*a2, a2[1]);
  *(double *)v4.i64 = sub_1B1AE024C(v3, v6);
  *a2 = v4;
  a2[1] = v5;
}

uint64_t sub_1B1A25ABC()
{
  return 0x676E69646E756F42;
}

uint64_t sub_1B1A25ADC(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, &qword_1EEF56DE8);
}

uint64_t sub_1B1A25AF8(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, &qword_1EEF56DE8, (unint64_t *)&qword_1EEFD4EA8);
}

uint64_t sub_1B1A25B24(uint64_t a1)
{
  return sub_1B1A2262C(a1, &qword_1EEF56DE8, &qword_1EEFD4EA8);
}

uint64_t sub_1B1A25B50()
{
  uint64_t v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E470;
  KeyPath = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1EEF58F78, (uint64_t)&type metadata for AABB, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = sub_1B1AE057C;
  v2[5] = KeyPath;
  v2[2] = sub_1B1AE05A4;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v3 = MEMORY[0x1E0DEE9D8];
  v4 = sub_1B1ADDC38(0x65756C6176, 0xE500000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v2, KeyPath, 0, 0,
         4,
         MEMORY[0x1E0DEE9D8],
         0,
         (uint64_t)sub_1B1AE0708);
  swift_release();
  *(_QWORD *)(v0 + 32) = v4;
  v5 = swift_getKeyPath();
  sub_1B1AE015C(0);
  v6 = (_QWORD *)swift_allocObject();
  v6[4] = sub_1B1AE05C4;
  v6[5] = v5;
  v6[2] = sub_1B1AE05FC;
  v6[3] = v5;
  v6[6] = v5;
  swift_allocObject();
  swift_retain_n();
  v7 = sub_1B1ADDFFC(7235949, 0xE300000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 0, (uint64_t)v6, v5, 0, 0,
         0,
         v3,
         0);
  swift_release();
  *(_QWORD *)(v0 + 40) = v7;
  v8 = swift_getKeyPath();
  v9 = (_QWORD *)swift_allocObject();
  v9[4] = sub_1B1AE05C4;
  v9[5] = v8;
  v9[2] = sub_1B1AE05FC;
  v9[3] = v8;
  v9[6] = v8;
  swift_allocObject();
  swift_retain_n();
  v10 = sub_1B1ADDFFC(7889261, 0xE300000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 0, (uint64_t)v9, v8, 0, 0,
          0,
          v3,
          0);
  swift_release();
  *(_QWORD *)(v0 + 48) = v10;
  result = sub_1B2228AD0();
  qword_1EEFD4EB0 = v0;
  return result;
}

unint64_t sub_1B1A25E80()
{
  return 0xD000000000000010;
}

uint64_t sub_1B1A25E9C(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, &qword_1EEF56DF0);
}

uint64_t sub_1B1A25EB8(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, &qword_1EEF56DF0, (unint64_t *)&qword_1EEFD4EB0);
}

uint64_t sub_1B1A25EE4(uint64_t a1)
{
  return sub_1B1A2262C(a1, &qword_1EEF56DF0, &qword_1EEFD4EB0);
}

uint64_t sub_1B1A25F10()
{
  uint64_t v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E450;
  KeyPath = swift_getKeyPath();
  sub_1B1791524(0, (unint64_t *)&unk_1ED4B8130, (uint64_t (*)(uint64_t))type metadata accessor for simd_float4x4, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for EntityGetSet);
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = sub_1B1AE083C;
  v2[5] = KeyPath;
  v2[2] = sub_1B1AE0864;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v3 = MEMORY[0x1E0DEE9D8];
  v4 = sub_1B1AB67D0(0x65756C6176, 0xE500000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v2, KeyPath, 0, 0,
         24,
         MEMORY[0x1E0DEE9D8],
         0,
         (uint64_t (*)(_QWORD))type metadata accessor for simd_float4x4,
         (uint64_t)sub_1B1AE088C);
  swift_release();
  *(_QWORD *)(v0 + 32) = v4;
  v5 = swift_getKeyPath();
  v6 = (_QWORD *)swift_allocObject();
  v6[4] = sub_1B1AE083C;
  v6[5] = v5;
  v6[2] = sub_1B1AE0864;
  v6[3] = v5;
  v6[6] = v5;
  swift_allocObject();
  swift_retain_n();
  v7 = sub_1B1AB67D0(0x65737265766E69, 0xE700000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v6, v5, 0, 0,
         152,
         v3,
         0,
         (uint64_t (*)(_QWORD))type metadata accessor for simd_float4x4,
         (uint64_t)sub_1B1AE088C);
  swift_release();
  *(_QWORD *)(v0 + 40) = v7;
  result = sub_1B2228AD0();
  qword_1EEFD4EB8 = v0;
  return result;
}

uint64_t sub_1B1A26190()
{
  return 0x617254646C726F57;
}

uint64_t sub_1B1A261B4(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, &qword_1EEF56DF8);
}

uint64_t sub_1B1A261D0(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, &qword_1EEF56DF8, (unint64_t *)&qword_1EEFD4EB8);
}

uint64_t sub_1B1A261FC(uint64_t a1)
{
  return sub_1B1A2262C(a1, &qword_1EEF56DF8, &qword_1EEFD4EB8);
}

uint64_t sub_1B1A26228()
{
  uint64_t v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E450;
  KeyPath = swift_getKeyPath();
  sub_1B1AE015C(0);
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = sub_1B1AE0A5C;
  v2[5] = KeyPath;
  v2[2] = sub_1B1AE0A94;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v3 = MEMORY[0x1E0DEE9D8];
  v4 = sub_1B1ACB74C(0x6E6F697469736F70, 0xE800000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 0, (uint64_t)v2, KeyPath, 0, 0,
         16,
         MEMORY[0x1E0DEE9D8],
         0);
  swift_release();
  *(_QWORD *)(v0 + 32) = v4;
  v5 = swift_getKeyPath();
  sub_1B1791524(0, (unint64_t *)&unk_1ED4B8130, (uint64_t (*)(uint64_t))type metadata accessor for simd_float4x4, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for EntityGetSet);
  v6 = (_QWORD *)swift_allocObject();
  v6[4] = sub_1B1AE0AB4;
  v6[5] = v5;
  v6[2] = sub_1B1AE0ADC;
  v6[3] = v5;
  v6[6] = v5;
  swift_allocObject();
  swift_retain_n();
  v7 = sub_1B1AB67D0(0x65756C6176, 0xE500000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v6, v5, 0, 0,
         16,
         v3,
         0,
         (uint64_t (*)(_QWORD))type metadata accessor for simd_float4x4,
         (uint64_t)sub_1B1AE0AFC);
  swift_release();
  *(_QWORD *)(v0 + 40) = v7;
  result = sub_1B2228AD0();
  qword_1EEFD4EC0 = v0;
  return result;
}

unint64_t sub_1B1A26498()
{
  return 0xD000000000000017;
}

uint64_t sub_1B1A264B4(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, qword_1EEF56E00);
}

uint64_t sub_1B1A264D0(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, qword_1EEF56E00, (unint64_t *)&qword_1EEFD4EC0);
}

uint64_t sub_1B1A264FC(uint64_t a1)
{
  return sub_1B1A2262C(a1, qword_1EEF56E00, &qword_1EEFD4EC0);
}

uint64_t sub_1B1A26528()
{
  uint64_t v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E440;
  KeyPath = swift_getKeyPath();
  sub_1B1AE015C(0);
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = sub_1B1AE0CD0;
  v2[5] = KeyPath;
  v2[2] = sub_1B1AE0D08;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v3 = sub_1B1ADB5F0(0x6E6F697469736F70, 0xE800000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 0, (uint64_t)v2, KeyPath, 0, 0,
         1,
         MEMORY[0x1E0DEE9D8],
         0);
  swift_release();
  *(_QWORD *)(v0 + 32) = v3;
  result = sub_1B2228AD0();
  qword_1ED4D0E60 = v0;
  return result;
}

void sub_1B1A2668C(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  __int128 v3;

  *(double *)&v3 = nullsub_16(a1);
  *a2 = v3;
}

void sub_1B1A266B4(uint64_t a1, _OWORD *a2)
{
  __int128 v3;

  sub_1B1AE0C74();
  *a2 = v3;
}

uint64_t sub_1B1A266E0()
{
  return 0x6E6F697469736F50;
}

uint64_t sub_1B1A266F8(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, &qword_1ED4BA0F8);
}

uint64_t sub_1B1A26714(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, &qword_1ED4BA0F8, (unint64_t *)&qword_1ED4D0E60);
}

uint64_t sub_1B1A26740(uint64_t a1)
{
  return sub_1B1A2262C(a1, &qword_1ED4BA0F8, &qword_1ED4D0E60);
}

uint64_t sub_1B1A2676C()
{
  uint64_t v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E440;
  KeyPath = swift_getKeyPath();
  sub_1B1AE015C(0);
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = sub_1B1AE0E64;
  v2[5] = KeyPath;
  v2[2] = sub_1B1AE0E9C;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v3 = sub_1B1AD8868(0x6C616D726F6ELL, 0xE600000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v2, KeyPath, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0);
  swift_release();
  *(_QWORD *)(v0 + 32) = v3;
  result = sub_1B2228AD0();
  qword_1EEFD4EC8 = v0;
  return result;
}

uint64_t sub_1B1A268C8()
{
  return 0x6C616D726F4ELL;
}

uint64_t sub_1B1A268DC(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, qword_1EEF56E10);
}

uint64_t sub_1B1A268F8(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, qword_1EEF56E10, (unint64_t *)&qword_1EEFD4EC8);
}

uint64_t sub_1B1A26924(uint64_t a1)
{
  return sub_1B1A2262C(a1, qword_1EEF56E10, &qword_1EEFD4EC8);
}

uint64_t sub_1B1A26950()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E470;
  KeyPath = swift_getKeyPath();
  sub_1B1ADF51C();
  v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_1B226D240;
  *(_QWORD *)(v2 + 32) = 0x797469746E656469;
  *(_QWORD *)(v2 + 40) = 0xE800000000000000;
  type metadata accessor for simd_quatf(0);
  *(_QWORD *)(v2 + 72) = v3;
  v4 = swift_allocObject();
  *(_QWORD *)(v2 + 48) = v4;
  *(_OWORD *)(v4 + 16) = xmmword_1B2244E20;
  sub_1B1791524(0, &qword_1ED4B8118, (uint64_t (*)(uint64_t))type metadata accessor for simd_quatf, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for EntityGetSet);
  v5 = (_QWORD *)swift_allocObject();
  v5[4] = sub_1B1AE0F94;
  v5[5] = KeyPath;
  v5[2] = sub_1B1AE0FC4;
  v5[3] = KeyPath;
  v5[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  swift_bridgeObjectRetain();
  v6 = sub_1B1AB67D0(0x7461746E6569726FLL, 0xEB000000006E6F69, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 3, 0, (uint64_t)v5, KeyPath, 0, 0,
         0,
         v2,
         0,
         (uint64_t (*)(_QWORD))type metadata accessor for simd_quatf,
         (uint64_t)sub_1B1AE15DC);
  swift_release();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + 32) = v6;
  v7 = swift_getKeyPath();
  v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_1B226D240;
  *(_QWORD *)(v8 + 32) = 0x797469746E656469;
  *(_QWORD *)(v8 + 40) = 0xE800000000000000;
  sub_1B19F8E54(0, (unint64_t *)&qword_1ED4BB0A0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50]);
  *(_QWORD *)(v8 + 72) = v9;
  v10 = swift_allocObject();
  *(_QWORD *)(v8 + 48) = v10;
  *(_QWORD *)(v10 + 16) = 0;
  *(_QWORD *)(v10 + 24) = 0;
  sub_1B1AE015C(0);
  v11 = (_QWORD *)swift_allocObject();
  v11[4] = sub_1B1AE101C;
  v11[5] = v7;
  v11[2] = sub_1B1AE1054;
  v11[3] = v7;
  v11[6] = v7;
  swift_allocObject();
  swift_retain_n();
  swift_bridgeObjectRetain();
  v12 = sub_1B1AB7348(0x72656C7565, 0xE500000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 3, 0, (uint64_t)v11, v7, 0, 0,
          4,
          v8,
          0);
  swift_release();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + 40) = v12;
  v13 = swift_getKeyPath();
  sub_1B1AE10E4(0);
  v14 = (_QWORD *)swift_allocObject();
  v14[4] = sub_1B1AE108C;
  v14[5] = v13;
  v14[2] = sub_1B1AE10C4;
  v14[3] = v13;
  v14[6] = v13;
  swift_allocObject();
  swift_retain_n();
  v15 = sub_1B1AB7724(0x696E726574617571, 0xEA00000000006E6FLL, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 3, 0, (uint64_t)v14, v13, 0, 0,
          4,
          MEMORY[0x1E0DEE9D8],
          0);
  swift_release();
  *(_QWORD *)(v0 + 48) = v15;
  result = sub_1B2228AD0();
  qword_1ED4D09E8 = v0;
  return result;
}

void sub_1B1A26DB4(float32x4_t *a1@<X0>, _OWORD *a2@<X8>)
{
  __int128 v3;

  *(double *)&v3 = sub_1B1AE1490(*a1);
  *a2 = v3;
}

void sub_1B1A26DDC(float32x4_t *a1, _OWORD *a2)
{
  __int128 v3;

  *(double *)&v3 = sub_1B1AE1400(*a1);
  *a2 = v3;
}

__n128 sub_1B1A26E04@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

__n128 sub_1B1A26E10(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1B1A26E1C()
{
  return 0x7461746E6569724FLL;
}

uint64_t sub_1B1A26E3C(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, &qword_1ED4B7DA8);
}

uint64_t sub_1B1A26E58(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, &qword_1ED4B7DA8, (unint64_t *)&qword_1ED4D09E8);
}

uint64_t sub_1B1A26E84(uint64_t a1)
{
  return sub_1B1A2262C(a1, &qword_1ED4B7DA8, &qword_1ED4D09E8);
}

uint64_t sub_1B1A26EB0()
{
  uint64_t v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E440;
  KeyPath = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B8040, (uint64_t)&type metadata for Entity, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = sub_1B1AE1644;
  v2[5] = KeyPath;
  v2[2] = sub_1B1AE1674;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v3 = sub_1B1AD9F50(0x746E65726170, 0xE600000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v2, KeyPath, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0,
         (uint64_t)sub_1B1AE1694);
  swift_release();
  *(_QWORD *)(v0 + 32) = v3;
  result = sub_1B2228AD0();
  qword_1EEFD4ED0 = v0;
  return result;
}

uint64_t sub_1B1A27030()
{
  return 0x746E65726150;
}

uint64_t sub_1B1A27044()
{
  return 49283072;
}

uint64_t sub_1B1A2704C(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, &qword_1EEF56E20);
}

uint64_t sub_1B1A27068(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, &qword_1EEF56E20, (unint64_t *)&qword_1EEFD4ED0);
}

uint64_t sub_1B1A27094(uint64_t a1)
{
  return sub_1B1A2262C(a1, &qword_1EEF56E20, &qword_1EEFD4ED0);
}

uint64_t sub_1B1A270C0()
{
  uint64_t v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E440;
  KeyPath = swift_getKeyPath();
  sub_1B1AE17C8(0);
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = sub_1B1AE1770;
  v2[5] = KeyPath;
  v2[2] = sub_1B1AE17A8;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v3 = sub_1B1AB7B00(0x6E6572646C696863, 0xE800000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v2, KeyPath, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0,
         &qword_1ED4BA460,
         (uint64_t)&type metadata for Entity,
         (uint64_t)sub_1B1AE1834);
  swift_release();
  *(_QWORD *)(v0 + 32) = v3;
  result = sub_1B2228AD0();
  qword_1EEFD4ED8 = v0;
  return result;
}

uint64_t sub_1B1A27240()
{
  uint64_t v0;

  v0 = *(_QWORD *)aChildren_5;
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t sub_1B1A27274(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, &qword_1EEF56E28);
}

uint64_t sub_1B1A27290(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, &qword_1EEF56E28, (unint64_t *)&qword_1EEFD4ED8);
}

uint64_t sub_1B1A272BC(uint64_t a1)
{
  return sub_1B1A2262C(a1, &qword_1EEF56E28, &qword_1EEFD4ED8);
}

uint64_t sub_1B1A272E8()
{
  uint64_t v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E440;
  KeyPath = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B8040, (uint64_t)&type metadata for Entity, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = sub_1B1AE19F8;
  v2[5] = KeyPath;
  v2[2] = sub_1B1AE1A28;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v3 = sub_1B1AD9F50(0x746567726174, 0xE600000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v2, KeyPath, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0,
         (uint64_t)sub_1B1AE1A48);
  swift_release();
  *(_QWORD *)(v0 + 32) = v3;
  result = sub_1B2228AD0();
  qword_1EEFD4EE0 = v0;
  return result;
}

uint64_t sub_1B1A27468()
{
  return 0x74416B6F6F4CLL;
}

uint64_t sub_1B1A2747C(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, &qword_1EEF56E30);
}

uint64_t sub_1B1A27498(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, &qword_1EEF56E30, (unint64_t *)&qword_1EEFD4EE0);
}

uint64_t sub_1B1A274C4(uint64_t a1)
{
  return sub_1B1A2262C(a1, &qword_1EEF56E30, &qword_1EEFD4EE0);
}

uint64_t sub_1B1A274F0()
{
  uint64_t v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E440;
  KeyPath = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F8, MEMORY[0x1E0DEB188], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = sub_1B1AE1B10;
  v2[5] = KeyPath;
  v2[2] = sub_1B1AE1B40;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v3 = sub_1B1ADC904(0x726F74636166, 0xE600000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v2, KeyPath, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0,
         (uint64_t)sub_1B1AE1B60);
  swift_release();
  *(_QWORD *)(v0 + 32) = v3;
  result = sub_1B2228AD0();
  qword_1EEFD4EE8 = v0;
  return result;
}

uint64_t sub_1B1A27670()
{
  return 0x6F4D68746F6F6D53;
}

uint64_t sub_1B1A27690(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, &qword_1EEF56E38);
}

uint64_t sub_1B1A276AC(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, &qword_1EEF56E38, (unint64_t *)&qword_1EEFD4EE8);
}

uint64_t sub_1B1A276D8(uint64_t a1)
{
  return sub_1B1A2262C(a1, &qword_1EEF56E38, &qword_1EEFD4EE8);
}

uint64_t sub_1B1A27704()
{
  uint64_t v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E440;
  KeyPath = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1EEF59058, MEMORY[0x1E0DEDBC8], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = sub_1B1AE1C3C;
  v2[5] = KeyPath;
  v2[2] = sub_1B1AE1C6C;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v3 = sub_1B1ABBF5C(0x726564726FLL, 0xE500000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v2, KeyPath, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0);
  swift_release();
  *(_QWORD *)(v0 + 32) = v3;
  result = sub_1B2228AD0();
  qword_1EEFD4EF0 = v0;
  return result;
}

uint64_t sub_1B1A27878()
{
  return 0x6E697265646E6552;
}

uint64_t sub_1B1A2789C(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, qword_1EEF56E40);
}

uint64_t sub_1B1A278B8(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, qword_1EEF56E40, (unint64_t *)&qword_1EEFD4EF0);
}

uint64_t sub_1B1A278E4(uint64_t a1)
{
  return sub_1B1A2262C(a1, qword_1EEF56E40, &qword_1EEFD4EF0);
}

uint64_t sub_1B1A27910()
{
  uint64_t v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E440;
  KeyPath = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F8, MEMORY[0x1E0DEB188], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = sub_1B1AE1DAC;
  v2[5] = KeyPath;
  v2[2] = sub_1B1AE1DDC;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v3 = sub_1B1ADC904(0x656C616373, 0xE500000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v2, KeyPath, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0,
         (uint64_t)sub_1B1AE1DFC);
  swift_release();
  *(_QWORD *)(v0 + 32) = v3;
  result = sub_1B2228AD0();
  qword_1ED4D0DF8 = v0;
  return result;
}

uint64_t sub_1B1A27A90()
{
  return 0x443120656C616353;
}

uint64_t sub_1B1A27AA8(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, &qword_1ED4B9F78);
}

uint64_t sub_1B1A27AC4(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, &qword_1ED4B9F78, (unint64_t *)&qword_1ED4D0DF8);
}

uint64_t sub_1B1A27AF0(uint64_t a1)
{
  return sub_1B1A2262C(a1, &qword_1ED4B9F78, &qword_1ED4D0DF8);
}

uint64_t sub_1B1A27B1C()
{
  uint64_t v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E440;
  KeyPath = swift_getKeyPath();
  sub_1B1AE1F14(0);
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = sub_1B1AE1EC4;
  v2[5] = KeyPath;
  v2[2] = sub_1B1AE1EF4;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v3 = sub_1B1AD9020(0x656C616373, 0xE500000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v2, KeyPath, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0);
  swift_release();
  *(_QWORD *)(v0 + 32) = v3;
  result = sub_1B2228AD0();
  qword_1ED4D0E00 = v0;
  return result;
}

uint64_t sub_1B1A27C78()
{
  return 0x443220656C616353;
}

uint64_t sub_1B1A27C90(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, &qword_1ED4B9F80);
}

uint64_t sub_1B1A27CAC(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, &qword_1ED4B9F80, (unint64_t *)&qword_1ED4D0E00);
}

uint64_t sub_1B1A27CD8(uint64_t a1)
{
  return sub_1B1A2262C(a1, &qword_1ED4B9F80, &qword_1ED4D0E00);
}

uint64_t sub_1B1A27D04()
{
  uint64_t v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E440;
  KeyPath = swift_getKeyPath();
  sub_1B1AE015C(0);
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = sub_1B1AE2188;
  v2[5] = KeyPath;
  v2[2] = sub_1B1AE21C0;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v3 = sub_1B1AD93FC(0x656C616373, 0xE500000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v2, KeyPath, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0);
  swift_release();
  *(_QWORD *)(v0 + 32) = v3;
  result = sub_1B2228AD0();
  qword_1ED4D0E08 = v0;
  return result;
}

uint64_t sub_1B1A27E60()
{
  return 0x443320656C616353;
}

uint64_t sub_1B1A27E78(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, &qword_1ED4B9F88);
}

uint64_t sub_1B1A27E94(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, &qword_1ED4B9F88, (unint64_t *)&qword_1ED4D0E08);
}

uint64_t sub_1B1A27EC0(uint64_t a1)
{
  return sub_1B1A2262C(a1, &qword_1ED4B9F88, &qword_1ED4D0E08);
}

uint64_t sub_1B1A27EEC()
{
  uint64_t v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E440;
  KeyPath = swift_getKeyPath();
  sub_1B1AE015C(0);
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = sub_1B1AE22A8;
  v2[5] = KeyPath;
  v2[2] = sub_1B1AE22E0;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v3 = sub_1B1AD848C(0x656C616373, 0xE500000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v2, KeyPath, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0);
  swift_release();
  *(_QWORD *)(v0 + 32) = v3;
  result = sub_1B2228AD0();
  qword_1EEFD4EF8 = v0;
  return result;
}

uint64_t sub_1B1A28048()
{
  return 0x656C616353;
}

uint64_t sub_1B1A2805C(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, &qword_1EEF56E50);
}

uint64_t sub_1B1A28078(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, &qword_1EEF56E50, (unint64_t *)&qword_1EEFD4EF8);
}

uint64_t sub_1B1A280A4(uint64_t a1)
{
  return sub_1B1A2262C(a1, &qword_1EEF56E50, &qword_1EEFD4EF8);
}

uint64_t sub_1B1A280D0()
{
  uint64_t v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E440;
  KeyPath = swift_getKeyPath();
  sub_1B1AE015C(0);
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = sub_1B1AE23C8;
  v2[5] = KeyPath;
  v2[2] = sub_1B1AE2400;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v3 = sub_1B1ADB9CC(0x797469636F6C6576, 0xE800000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v2, KeyPath, 0, 0,
         2,
         MEMORY[0x1E0DEE9D8],
         0);
  swift_release();
  *(_QWORD *)(v0 + 32) = v3;
  result = sub_1B2228AD0();
  qword_1ED4D0E78 = v0;
  return result;
}

uint64_t sub_1B1A28234()
{
  return 0x797469636F6C6556;
}

uint64_t sub_1B1A2824C(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, &qword_1ED4BA138);
}

uint64_t sub_1B1A28268(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, &qword_1ED4BA138, (unint64_t *)&qword_1ED4D0E78);
}

uint64_t sub_1B1A28294(uint64_t a1)
{
  return sub_1B1A2262C(a1, &qword_1ED4BA138, &qword_1ED4D0E78);
}

uint64_t sub_1B1A282C0()
{
  uint64_t v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E440;
  KeyPath = swift_getKeyPath();
  sub_1B1AE10E4(0);
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = sub_1B1AE24E8;
  v2[5] = KeyPath;
  v2[2] = sub_1B1AE2520;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v3 = sub_1B1ABC6F4(0x5672616C75676E61, 0xEF797469636F6C65, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 3, 0, (uint64_t)v2, KeyPath, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0);
  swift_release();
  *(_QWORD *)(v0 + 32) = v3;
  result = sub_1B2228AD0();
  qword_1ED4D0BF8 = v0;
  return result;
}

uint64_t sub_1B1A28438()
{
  return 0x5672616C75676E41;
}

uint64_t sub_1B1A2845C(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, qword_1ED4B8C50);
}

uint64_t sub_1B1A28478(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, qword_1ED4B8C50, (unint64_t *)&qword_1ED4D0BF8);
}

uint64_t sub_1B1A284A4(uint64_t a1)
{
  return sub_1B1A2262C(a1, qword_1ED4B8C50, &qword_1ED4D0BF8);
}

unint64_t sub_1B1A284D0()
{
  return 0xD000000000000014;
}

uint64_t sub_1B1A284EC()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E440;
  KeyPath = swift_getKeyPath();
  v2 = swift_getKeyPath();
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4B8140, MEMORY[0x1E0DEDC60], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v3 = (_QWORD *)swift_allocObject();
  v3[4] = sub_1B1AE2638;
  v3[5] = v2;
  v3[2] = sub_1B1AE2668;
  v3[3] = v2;
  v3[6] = v2;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v4 = MEMORY[0x1E0DEE9D8];
  v5 = sub_1B1ADBDA8(0x646E496563617073, 0xEA00000000007865, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v3, v2, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0,
         (uint64_t)sub_1B1AE27C8);
  swift_release();
  sub_1B1A02758(0, &qword_1EEF590A8, (uint64_t)&type metadata for EntitySpace, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v6 = (_QWORD *)swift_allocObject();
  v6[4] = sub_1B1AE2688;
  v6[5] = KeyPath;
  v6[2] = sub_1B1AE26B8;
  v6[3] = KeyPath;
  v6[6] = KeyPath;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v7 = sub_1B1ABB024(0x6563617073, 0xE500000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v6, KeyPath, 0, 0,
         0,
         v4,
         v5,
         (uint64_t)sub_1B1AE26D8);
  swift_release();
  swift_release();
  *(_QWORD *)(v0 + 32) = v7;
  result = sub_1B2228AD0();
  qword_1EEFD4F00 = v0;
  return result;
}

uint64_t sub_1B1A2878C(uint64_t result)
{
  return result;
}

uint64_t sub_1B1A28794()
{
  return 0x65764F6563617053;
}

uint64_t sub_1B1A287B8(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, &qword_1EEF56E58);
}

uint64_t sub_1B1A287D4(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, &qword_1EEF56E58, (unint64_t *)&qword_1EEFD4F00);
}

uint64_t sub_1B1A28800(uint64_t a1)
{
  return sub_1B1A2262C(a1, &qword_1EEF56E58, &qword_1EEFD4F00);
}

uint64_t sub_1B1A2882C()
{
  uint64_t v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E440;
  KeyPath = swift_getKeyPath();
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4B80E0, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = sub_1B1AE2888;
  v2[5] = KeyPath;
  v2[2] = sub_1B1AE28B0;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v3 = sub_1B1AD7928(1701667182, 0xE400000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v2, KeyPath, 0, 0,
         32,
         MEMORY[0x1E0DEE9D8],
         0,
         (uint64_t)sub_1B1AE28D0);
  swift_release();
  *(_QWORD *)(v0 + 32) = v3;
  result = sub_1B2228AD0();
  qword_1EEFD4F08 = v0;
  return result;
}

uint64_t sub_1B1A289AC()
{
  return 1701667150;
}

uint64_t sub_1B1A289BC(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, qword_1EEF56E60);
}

uint64_t sub_1B1A289D8(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, qword_1EEF56E60, (unint64_t *)&qword_1EEFD4F08);
}

uint64_t sub_1B1A28A04(uint64_t a1)
{
  return sub_1B1A2262C(a1, qword_1EEF56E60, &qword_1EEFD4F08);
}

uint64_t sub_1B1A28A30()
{
  uint64_t v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E440;
  KeyPath = swift_getKeyPath();
  sub_1B1AE10E4(0);
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = sub_1B1AE29C8;
  v2[5] = KeyPath;
  v2[2] = sub_1B1AE2A00;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v3 = sub_1B1AD80B0(0x726F6C6F63, 0xE500000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 6, 0, (uint64_t)v2, KeyPath, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0);
  swift_release();
  *(_QWORD *)(v0 + 32) = v3;
  result = sub_1B2228AD0();
  qword_1ED4D0DF0 = v0;
  return result;
}

uint64_t sub_1B1A28B90()
{
  return 0x726F6C6F43;
}

uint64_t sub_1B1A28BA4(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, qword_1ED4B9E18);
}

uint64_t sub_1B1A28BC0(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, qword_1ED4B9E18, (unint64_t *)&qword_1ED4D0DF0);
}

uint64_t sub_1B1A28BEC(uint64_t a1)
{
  return sub_1B1A2262C(a1, qword_1ED4B9E18, &qword_1ED4D0DF0);
}

uint64_t sub_1B1A28C18()
{
  uint64_t v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E440;
  KeyPath = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F8, MEMORY[0x1E0DEB188], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = sub_1B1AE2B00;
  v2[5] = KeyPath;
  v2[2] = sub_1B1AE2B30;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v3 = sub_1B1ADC904(0x73656E6867756F72, 0xE900000000000073, 0, 0, 0x3FF0000000000000, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v2, KeyPath, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0,
         (uint64_t)sub_1B1AE2B50);
  swift_release();
  *(_QWORD *)(v0 + 32) = v3;
  result = sub_1B2228AD0();
  qword_1ED4D0F08 = v0;
  return result;
}

uint64_t sub_1B1A28DA0()
{
  return 0x73656E6867756F52;
}

uint64_t sub_1B1A28DBC(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, qword_1ED4BB330);
}

uint64_t sub_1B1A28DD8(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, qword_1ED4BB330, (unint64_t *)&qword_1ED4D0F08);
}

uint64_t sub_1B1A28E04(uint64_t a1)
{
  return sub_1B1A2262C(a1, qword_1ED4BB330, &qword_1ED4D0F08);
}

uint64_t sub_1B1A28E30()
{
  uint64_t v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E440;
  KeyPath = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F8, MEMORY[0x1E0DEB188], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = sub_1B1AE2C18;
  v2[5] = KeyPath;
  v2[2] = sub_1B1AE2C48;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v3 = sub_1B1ADC904(0x73656E6C6174656DLL, 0xE900000000000073, 0, 0, 0x3FF0000000000000, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v2, KeyPath, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0,
         (uint64_t)sub_1B1AE2C68);
  swift_release();
  *(_QWORD *)(v0 + 32) = v3;
  result = sub_1B2228AD0();
  qword_1ED4D0F00 = v0;
  return result;
}

uint64_t sub_1B1A28FB8()
{
  return 0x73656E6C6174654DLL;
}

uint64_t sub_1B1A28FD4(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, &qword_1ED4BB328);
}

uint64_t sub_1B1A28FF0(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, &qword_1ED4BB328, (unint64_t *)&qword_1ED4D0F00);
}

uint64_t sub_1B1A2901C(uint64_t a1)
{
  return sub_1B1A2262C(a1, &qword_1ED4BB328, &qword_1ED4D0F00);
}

uint64_t sub_1B1A29048()
{
  uint64_t v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E440;
  KeyPath = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F8, MEMORY[0x1E0DEB188], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = sub_1B1AE2D30;
  v2[5] = KeyPath;
  v2[2] = sub_1B1AE2D60;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v3 = sub_1B1ADC904(0x6E6F697373696D65, 0xE800000000000000, 0, 0, 0x3FF0000000000000, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v2, KeyPath, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0,
         (uint64_t)sub_1B1AE2D80);
  swift_release();
  *(_QWORD *)(v0 + 32) = v3;
  result = sub_1B2228AD0();
  qword_1ED4D0EF8 = v0;
  return result;
}

uint64_t sub_1B1A291CC()
{
  return 0x6E6F697373696D45;
}

uint64_t sub_1B1A291E4(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, &qword_1ED4BB2D0);
}

uint64_t sub_1B1A29200(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, &qword_1ED4BB2D0, (unint64_t *)&qword_1ED4D0EF8);
}

uint64_t sub_1B1A2922C(uint64_t a1)
{
  return sub_1B1A2262C(a1, &qword_1ED4BB2D0, &qword_1ED4D0EF8);
}

uint64_t sub_1B1A29258()
{
  uint64_t v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E440;
  KeyPath = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F8, MEMORY[0x1E0DEB188], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = sub_1B1AE2E48;
  v2[5] = KeyPath;
  v2[2] = sub_1B1AE2E78;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v3 = sub_1B1ADC904(0x656C676E61, 0xE500000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v2, KeyPath, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0,
         (uint64_t)sub_1B1AE2E98);
  swift_release();
  *(_QWORD *)(v0 + 32) = v3;
  result = sub_1B2228AD0();
  qword_1ED4D0BC0 = v0;
  return result;
}

uint64_t sub_1B1A293D8()
{
  return 0x656C636974726150;
}

uint64_t sub_1B1A293FC(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, &qword_1ED4B8828);
}

uint64_t sub_1B1A29418(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, &qword_1ED4B8828, (unint64_t *)&qword_1ED4D0BC0);
}

uint64_t sub_1B1A29444(uint64_t a1)
{
  return sub_1B1A2262C(a1, &qword_1ED4B8828, &qword_1ED4D0BC0);
}

uint64_t sub_1B1A29470()
{
  uint64_t v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E440;
  KeyPath = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F8, MEMORY[0x1E0DEB188], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = sub_1B1AE2F60;
  v2[5] = KeyPath;
  v2[2] = sub_1B1AE2F90;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v3 = sub_1B1ADC904(0x6C6556656C676E61, 0xED0000797469636FLL, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v2, KeyPath, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0,
         (uint64_t)sub_1B1AE2FB0);
  swift_release();
  *(_QWORD *)(v0 + 32) = v3;
  result = sub_1B2228AD0();
  qword_1ED4D0D90 = v0;
  return result;
}

unint64_t sub_1B1A29600()
{
  return 0xD000000000000015;
}

uint64_t sub_1B1A2961C(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, &qword_1ED4B9810);
}

uint64_t sub_1B1A29638(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, &qword_1ED4B9810, (unint64_t *)&qword_1ED4D0D90);
}

uint64_t sub_1B1A29664(uint64_t a1)
{
  return sub_1B1A2262C(a1, &qword_1ED4B9810, &qword_1ED4D0D90);
}

uint64_t sub_1B1A29690()
{
  uint64_t v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E440;
  KeyPath = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F8, MEMORY[0x1E0DEB188], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = sub_1B1AE3078;
  v2[5] = KeyPath;
  v2[2] = sub_1B1AE30A8;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v3 = sub_1B1ADC904(0x4665727574786574, 0xEC000000656D6172, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v2, KeyPath, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0,
         (uint64_t)sub_1B1AE30C8);
  swift_release();
  *(_QWORD *)(v0 + 32) = v3;
  result = sub_1B2228AD0();
  qword_1ED4D0D88 = v0;
  return result;
}

unint64_t sub_1B1A2981C()
{
  return 0xD000000000000014;
}

uint64_t sub_1B1A29838(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, &qword_1ED4B9608);
}

uint64_t sub_1B1A29854(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, &qword_1ED4B9608, (unint64_t *)&qword_1ED4D0D88);
}

uint64_t sub_1B1A29880(uint64_t a1)
{
  return sub_1B1A2262C(a1, &qword_1ED4B9608, &qword_1ED4D0D88);
}

uint64_t sub_1B1A298AC()
{
  uint64_t v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E440;
  KeyPath = swift_getKeyPath();
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4B8178, MEMORY[0x1E0DEE0F8], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = sub_1B1AE3190;
  v2[5] = KeyPath;
  v2[2] = sub_1B1AE31C0;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v3 = sub_1B1AD7CEC(25705, 0xE200000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v2, KeyPath, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0,
         (uint64_t)sub_1B1AE31E0);
  swift_release();
  *(_QWORD *)(v0 + 32) = v3;
  result = sub_1B2228AD0();
  qword_1ED4D09C8 = v0;
  return result;
}

uint64_t sub_1B1A29A24()
{
  return 0x656C636974726150;
}

uint64_t sub_1B1A29A40(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, &qword_1ED4B7BE0);
}

uint64_t sub_1B1A29A5C(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, &qword_1ED4B7BE0, (unint64_t *)&qword_1ED4D09C8);
}

uint64_t sub_1B1A29A88(uint64_t a1)
{
  return sub_1B1A2262C(a1, &qword_1ED4B7BE0, &qword_1ED4D09C8);
}

uint64_t sub_1B1A29AB4()
{
  uint64_t v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E440;
  KeyPath = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F8, MEMORY[0x1E0DEB188], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = sub_1B1AE3330;
  v2[5] = KeyPath;
  v2[2] = sub_1B1AE3360;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v3 = sub_1B1ADC904(1936941421, 0xE400000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v2, KeyPath, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0,
         (uint64_t)sub_1B1AE3380);
  swift_release();
  *(_QWORD *)(v0 + 32) = v3;
  result = sub_1B2228AD0();
  qword_1ED4D0DE0 = v0;
  return result;
}

uint64_t sub_1B1A29C30()
{
  return 1936941389;
}

uint64_t sub_1B1A29C40(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, qword_1ED4B9DD8);
}

uint64_t sub_1B1A29C5C(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, qword_1ED4B9DD8, (unint64_t *)&qword_1ED4D0DE0);
}

uint64_t sub_1B1A29C88(uint64_t a1)
{
  return sub_1B1A2262C(a1, qword_1ED4B9DD8, &qword_1ED4D0DE0);
}

uint64_t sub_1B1A29CB4()
{
  uint64_t v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E440;
  KeyPath = swift_getKeyPath();
  sub_1B1AE015C(0);
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = sub_1B1AE3448;
  v2[5] = KeyPath;
  v2[2] = sub_1B1AE3480;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v3 = sub_1B1AB995C(0x61467261656E696CLL, 0xEC000000726F7463, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v2, KeyPath, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0);
  swift_release();
  *(_QWORD *)(v0 + 32) = v3;
  result = sub_1B2228AD0();
  qword_1EEFD4F10 = v0;
  return result;
}

uint64_t sub_1B1A29E1C()
{
  return 0x61467261656E694CLL;
}

uint64_t sub_1B1A29E3C(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, &qword_1EEF56E70);
}

uint64_t sub_1B1A29E58(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, &qword_1EEF56E70, (unint64_t *)&qword_1EEFD4F10);
}

uint64_t sub_1B1A29E84(uint64_t a1)
{
  return sub_1B1A2262C(a1, &qword_1EEF56E70, &qword_1EEFD4F10);
}

uint64_t sub_1B1A29EB0()
{
  uint64_t v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E440;
  KeyPath = swift_getKeyPath();
  sub_1B1AE015C(0);
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = sub_1B1AE3568;
  v2[5] = KeyPath;
  v2[2] = sub_1B1AE35A0;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v3 = sub_1B1ABA0F4(0x4672616C75676E61, 0xED0000726F746361, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v2, KeyPath, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0);
  swift_release();
  *(_QWORD *)(v0 + 32) = v3;
  result = sub_1B2228AD0();
  qword_1EEFD4F18 = v0;
  return result;
}

uint64_t sub_1B1A2A01C()
{
  return 0x4672616C75676E41;
}

uint64_t sub_1B1A2A040(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, &qword_1EEF56E78);
}

uint64_t sub_1B1A2A05C(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, &qword_1EEF56E78, (unint64_t *)&qword_1EEFD4F18);
}

uint64_t sub_1B1A2A088(uint64_t a1)
{
  return sub_1B1A2262C(a1, &qword_1EEF56E78, &qword_1EEFD4F18);
}

uint64_t sub_1B1A2A0B4()
{
  uint64_t v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E440;
  KeyPath = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F8, MEMORY[0x1E0DEB188], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = sub_1B1AE3688;
  v2[5] = KeyPath;
  v2[2] = sub_1B1AE36B8;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v3 = sub_1B1ADC904(0x7A696C616D726F6ELL, 0xED00006567416465, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v2, KeyPath, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0,
         (uint64_t)sub_1B1AE36D8);
  swift_release();
  *(_QWORD *)(v0 + 32) = v3;
  result = sub_1B2228AD0();
  qword_1ED4D09F0 = v0;
  return result;
}

uint64_t sub_1B1A2A244()
{
  return 0x656C636974726150;
}

uint64_t sub_1B1A2A264(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, &qword_1ED4B7DB0);
}

uint64_t sub_1B1A2A280(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, &qword_1ED4B7DB0, (unint64_t *)&qword_1ED4D09F0);
}

uint64_t sub_1B1A2A2AC(uint64_t a1)
{
  return sub_1B1A2262C(a1, &qword_1ED4B7DB0, &qword_1ED4D09F0);
}

uint64_t sub_1B1A2A2D8()
{
  uint64_t v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E440;
  KeyPath = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F8, MEMORY[0x1E0DEB188], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = sub_1B1AE37A0;
  v2[5] = KeyPath;
  v2[2] = sub_1B1AE37D0;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v3 = sub_1B1ADC904(0x656D69746566696CLL, 0xE800000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v2, KeyPath, 0, 0,
         128,
         MEMORY[0x1E0DEE9D8],
         0,
         (uint64_t)sub_1B1AE37F0);
  swift_release();
  *(_QWORD *)(v0 + 32) = v3;
  result = sub_1B2228AD0();
  qword_1ED4D0CA8 = v0;
  return result;
}

unint64_t sub_1B1A2A460()
{
  return 0xD000000000000010;
}

uint64_t sub_1B1A2A47C(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, qword_1ED4B8E18);
}

uint64_t sub_1B1A2A498(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, qword_1ED4B8E18, (unint64_t *)&qword_1ED4D0CA8);
}

uint64_t sub_1B1A2A4C4(uint64_t a1)
{
  return sub_1B1A2262C(a1, qword_1ED4B8E18, &qword_1ED4D0CA8);
}

uint64_t sub_1B1A2A4F0()
{
  uint64_t v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E440;
  KeyPath = swift_getKeyPath();
  sub_1B1AE015C(0);
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = sub_1B1AE38B8;
  v2[5] = KeyPath;
  v2[2] = sub_1B1AE38F0;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v3 = sub_1B1ABBB80(0x746567726174, 0xE600000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v2, KeyPath, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0);
  swift_release();
  *(_QWORD *)(v0 + 32) = v3;
  result = sub_1B2228AD0();
  qword_1ED4D0BF0 = v0;
  return result;
}

uint64_t sub_1B1A2A64C()
{
  return 0x746567726154;
}

uint64_t sub_1B1A2A660(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, &qword_1ED4B8AB0);
}

uint64_t sub_1B1A2A67C(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, &qword_1ED4B8AB0, (unint64_t *)&qword_1ED4D0BF0);
}

uint64_t sub_1B1A2A6A8(uint64_t a1)
{
  return sub_1B1A2262C(a1, &qword_1ED4B8AB0, &qword_1ED4D0BF0);
}

uint64_t sub_1B1A2A6D4()
{
  uint64_t v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E440;
  KeyPath = swift_getKeyPath();
  sub_1B1AE10E4(0);
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = sub_1B1AE39D8;
  v2[5] = KeyPath;
  v2[2] = sub_1B1AE3A10;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v3 = sub_1B1ADCCC8(0x6174614472657375, 0xE900000000000031, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v2, KeyPath, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0);
  swift_release();
  *(_QWORD *)(v0 + 32) = v3;
  result = sub_1B2228AD0();
  qword_1ED4D0E88 = v0;
  return result;
}

uint64_t sub_1B1A2A838()
{
  return 0x6174614472657355;
}

uint64_t sub_1B1A2A854(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, &qword_1ED4BA1E8);
}

uint64_t sub_1B1A2A870(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, &qword_1ED4BA1E8, (unint64_t *)&qword_1ED4D0E88);
}

uint64_t sub_1B1A2A89C(uint64_t a1)
{
  return sub_1B1A2262C(a1, &qword_1ED4BA1E8, &qword_1ED4D0E88);
}

uint64_t sub_1B1A2A8C8()
{
  uint64_t v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E440;
  KeyPath = swift_getKeyPath();
  sub_1B1AE10E4(0);
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = sub_1B1AE3AF8;
  v2[5] = KeyPath;
  v2[2] = sub_1B1AE3B30;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v3 = sub_1B1ADD0A4(0x6174614472657375, 0xE900000000000032, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v2, KeyPath, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0);
  swift_release();
  *(_QWORD *)(v0 + 32) = v3;
  result = sub_1B2228AD0();
  qword_1ED4D0E90 = v0;
  return result;
}

uint64_t sub_1B1A2AA2C()
{
  return 0x6174614472657355;
}

uint64_t sub_1B1A2AA48(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, &qword_1ED4BA1F0);
}

uint64_t sub_1B1A2AA64(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, &qword_1ED4BA1F0, (unint64_t *)&qword_1ED4D0E90);
}

uint64_t sub_1B1A2AA90(uint64_t a1)
{
  return sub_1B1A2262C(a1, &qword_1ED4BA1F0, &qword_1ED4D0E90);
}

uint64_t sub_1B1A2AABC()
{
  uint64_t v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E440;
  KeyPath = swift_getKeyPath();
  sub_1B1AE10E4(0);
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = sub_1B1AE3C18;
  v2[5] = KeyPath;
  v2[2] = sub_1B1AE3C50;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v3 = sub_1B1ADD480(0x6174614472657375, 0xE900000000000033, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v2, KeyPath, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0);
  swift_release();
  *(_QWORD *)(v0 + 32) = v3;
  result = sub_1B2228AD0();
  qword_1ED4D0E98 = v0;
  return result;
}

uint64_t sub_1B1A2AC20()
{
  return 0x6174614472657355;
}

uint64_t sub_1B1A2AC3C(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, &qword_1ED4BA1F8);
}

uint64_t sub_1B1A2AC58(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, &qword_1ED4BA1F8, (unint64_t *)&qword_1ED4D0E98);
}

uint64_t sub_1B1A2AC84(uint64_t a1)
{
  return sub_1B1A2262C(a1, &qword_1ED4BA1F8, &qword_1ED4D0E98);
}

uint64_t sub_1B1A2ACB0()
{
  uint64_t v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E440;
  KeyPath = swift_getKeyPath();
  sub_1B1AE10E4(0);
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = sub_1B1AE3D38;
  v2[5] = KeyPath;
  v2[2] = sub_1B1AE3D70;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v3 = sub_1B1ADD85C(0x6174614472657375, 0xE900000000000034, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v2, KeyPath, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0);
  swift_release();
  *(_QWORD *)(v0 + 32) = v3;
  result = sub_1B2228AD0();
  qword_1ED4D0EA0 = v0;
  return result;
}

uint64_t sub_1B1A2AE14()
{
  return 0x6174614472657355;
}

uint64_t sub_1B1A2AE30(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, &qword_1ED4BA200);
}

uint64_t sub_1B1A2AE4C(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, &qword_1ED4BA200, (unint64_t *)&qword_1ED4D0EA0);
}

uint64_t sub_1B1A2AE78(uint64_t a1)
{
  return sub_1B1A2262C(a1, &qword_1ED4BA200, &qword_1ED4D0EA0);
}

uint64_t sub_1B1A2AEA4()
{
  uint64_t v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E440;
  KeyPath = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F8, MEMORY[0x1E0DEB188], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = sub_1B1AE3E58;
  v2[5] = KeyPath;
  v2[2] = sub_1B1AE3E88;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v3 = sub_1B1ADC904(0x726F62686769656ELL, 0xED0000746E756F43, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v2, KeyPath, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0,
         (uint64_t)sub_1B1AE3EA8);
  swift_release();
  *(_QWORD *)(v0 + 32) = v3;
  result = sub_1B2228AD0();
  qword_1ED4D0BB8 = v0;
  return result;
}

uint64_t sub_1B1A2B034()
{
  return 0x726F62686769654ELL;
}

uint64_t sub_1B1A2B058(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, qword_1ED4B8758);
}

uint64_t sub_1B1A2B074(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, qword_1ED4B8758, (unint64_t *)&qword_1ED4D0BB8);
}

uint64_t sub_1B1A2B0A0(uint64_t a1)
{
  return sub_1B1A2262C(a1, qword_1ED4B8758, &qword_1ED4D0BB8);
}

uint64_t sub_1B1A2B0CC()
{
  uint64_t v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E440;
  KeyPath = swift_getKeyPath();
  sub_1B1AE015C(0);
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = sub_1B1AE3FCC;
  v2[5] = KeyPath;
  v2[2] = sub_1B1AE4004;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v3 = sub_1B1ABAC48(0x746F766970, 0xE500000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v2, KeyPath, 0, 0,
         128,
         MEMORY[0x1E0DEE9D8],
         0);
  swift_release();
  *(_QWORD *)(v0 + 32) = v3;
  result = sub_1B2228AD0();
  qword_1ED4D0BD0 = v0;
  return result;
}

uint64_t sub_1B1A2B22C()
{
  return 0x656C636974726150;
}

uint64_t sub_1B1A2B250(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, &qword_1ED4B8860);
}

uint64_t sub_1B1A2B26C(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, &qword_1ED4B8860, (unint64_t *)&qword_1ED4D0BD0);
}

uint64_t sub_1B1A2B298(uint64_t a1)
{
  return sub_1B1A2262C(a1, &qword_1ED4B8860, &qword_1ED4D0BD0);
}

uint64_t sub_1B1A2B2C4()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E440;
  KeyPath = swift_getKeyPath();
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  *(_QWORD *)(v0 + 32) = sub_1B1A80674(0x44496E77617073, 0xE700000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, KeyPath, 0, 1, 0, 0, 0, 0,
                           MEMORY[0x1E0DEE9D8],
                           MEMORY[0x1E0DEB418]);
  result = sub_1B2228AD0();
  qword_1ED4D0D78 = v0;
  return result;
}

unint64_t sub_1B1A2B3D4()
{
  return 0xD000000000000014;
}

uint64_t sub_1B1A2B3F0(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, qword_1ED4B95C8);
}

uint64_t sub_1B1A2B40C(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, qword_1ED4B95C8, (unint64_t *)&qword_1ED4D0D78);
}

uint64_t sub_1B1A2B438(uint64_t a1)
{
  return sub_1B1A2262C(a1, qword_1ED4B95C8, &qword_1ED4D0D78);
}

uint64_t sub_1B1A2B464()
{
  return 0x666F20746E696F50;
}

uint64_t sub_1B1A2B488()
{
  return 49283328;
}

uint64_t sub_1B1A2B494()
{
  uint64_t v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E470;
  KeyPath = swift_getKeyPath();
  sub_1B1791524(0, (unint64_t *)&unk_1ED4B8130, (uint64_t (*)(uint64_t))type metadata accessor for simd_float4x4, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for EntityGetSet);
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = sub_1B1AE4168;
  v2[5] = KeyPath;
  v2[2] = sub_1B1AE4190;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v3 = MEMORY[0x1E0DEE9D8];
  v4 = sub_1B1AB67D0(0x65756C6176, 0xE500000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v2, KeyPath, 0, 0,
         8,
         MEMORY[0x1E0DEE9D8],
         0,
         (uint64_t (*)(_QWORD))type metadata accessor for simd_float4x4,
         (uint64_t)sub_1B1AE41E8);
  swift_release();
  *(_QWORD *)(v0 + 32) = v4;
  *(_QWORD *)(v0 + 40) = sub_1B1ABF400(1058, 0x78697274616DLL, 0xE600000000000000, (uint64_t)&type metadata for ProjectionMatrix, (uint64_t)&off_1E638A420, 0x65756C6176, 0xE500000000000000);
  v5 = swift_getKeyPath();
  v6 = (_QWORD *)swift_allocObject();
  v6[4] = sub_1B1AE4168;
  v6[5] = v5;
  v6[2] = sub_1B1AE4190;
  v6[3] = v5;
  v6[6] = v5;
  swift_allocObject();
  swift_retain_n();
  v7 = sub_1B1AB67D0(0x65737265766E69, 0xE700000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v6, v5, 0, 0,
         152,
         v3,
         0,
         (uint64_t (*)(_QWORD))type metadata accessor for simd_float4x4,
         (uint64_t)sub_1B1AE41E8);
  swift_release();
  *(_QWORD *)(v0 + 48) = v7;
  result = sub_1B2228AD0();
  qword_1ED4D0CB8 = v0;
  return result;
}

unint64_t sub_1B1A2B750()
{
  return 0xD000000000000010;
}

uint64_t sub_1B1A2B76C(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, qword_1ED4B8E70);
}

uint64_t sub_1B1A2B788(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, qword_1ED4B8E70, (unint64_t *)&qword_1ED4D0CB8);
}

uint64_t sub_1B1A2B7B4(uint64_t a1)
{
  return sub_1B1A2262C(a1, qword_1ED4B8E70, &qword_1ED4D0CB8);
}

uint64_t sub_1B1A2B7E0()
{
  uint64_t v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E480;
  KeyPath = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F8, MEMORY[0x1E0DEB188], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = sub_1B1AE42C4;
  v2[5] = KeyPath;
  v2[2] = sub_1B1AE42F4;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v3 = MEMORY[0x1E0DEE9D8];
  v4 = sub_1B1ADC904(0x6E654C6C61636F46, 0xEB00000000687467, 0x3F847AE147AE147BLL, 0, 0x408F400000000000, 0, 0x3FB999999999999ALL, 0, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v2, KeyPath, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0,
         (uint64_t)sub_1B1AE49FC);
  swift_release();
  *(_QWORD *)(v0 + 32) = v4;
  v5 = swift_getKeyPath();
  v6 = (_QWORD *)swift_allocObject();
  v6[4] = sub_1B1AE42C4;
  v6[5] = v5;
  v6[2] = sub_1B1AE42F4;
  v6[3] = v5;
  v6[6] = v5;
  swift_allocObject();
  swift_retain_n();
  v7 = sub_1B1ADC904(0x7369447375636F46, 0xED000065636E6174, 0x3F847AE147AE147BLL, 0, 0, 1, 0x3FB999999999999ALL, 0, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v6, v5, 0, 0,
         0,
         v3,
         0,
         (uint64_t)sub_1B1AE49FC);
  swift_release();
  *(_QWORD *)(v0 + 40) = v7;
  v8 = swift_getKeyPath();
  v9 = (_QWORD *)swift_allocObject();
  v9[4] = sub_1B1AE42C4;
  v9[5] = v8;
  v9[2] = sub_1B1AE42F4;
  v9[3] = v8;
  v9[6] = v8;
  swift_allocObject();
  swift_retain_n();
  v10 = sub_1B1ADC904(0x6953726F736E6553, 0xEA0000000000657ALL, 0x3F847AE147AE147BLL, 0, 0x408F400000000000, 0, 0x3F847AE147AE147BLL, 0, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v9, v8, 0, 0,
          0,
          v3,
          0,
          (uint64_t)sub_1B1AE49FC);
  swift_release();
  *(_QWORD *)(v0 + 48) = v10;
  v11 = swift_getKeyPath();
  v12 = (_QWORD *)swift_allocObject();
  v12[4] = sub_1B1AE42C4;
  v12[5] = v11;
  v12[2] = sub_1B1AE42F4;
  v12[3] = v11;
  v12[6] = v11;
  swift_allocObject();
  swift_retain_n();
  v13 = sub_1B1ADC904(0x706F745346, 0xE500000000000000, 0, 0, 0x4059000000000000, 0, 0x3F847AE147AE147BLL, 0, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v12, v11, 0, 0,
          0,
          v3,
          0,
          (uint64_t)sub_1B1AE49FC);
  swift_release();
  *(_QWORD *)(v0 + 56) = v13;
  v14 = swift_getKeyPath();
  v15 = (_QWORD *)swift_allocObject();
  v15[4] = sub_1B1AE42C4;
  v15[5] = v14;
  v15[2] = sub_1B1AE42F4;
  v15[3] = v14;
  v15[6] = v14;
  swift_allocObject();
  swift_retain_n();
  v16 = sub_1B1ADC904(0x657275736F707845, 0xE800000000000000, 0, 0, 0x4059000000000000, 0, 0x3F847AE147AE147BLL, 0, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v15, v14, 0, 0,
          0,
          v3,
          0,
          (uint64_t)sub_1B1AE49FC);
  swift_release();
  *(_QWORD *)(v0 + 64) = v16;
  v17 = swift_getKeyPath();
  v18 = (_QWORD *)swift_allocObject();
  v18[4] = sub_1B1AE42C4;
  v18[5] = v17;
  v18[2] = sub_1B1AE42F4;
  v18[3] = v17;
  v18[6] = v17;
  swift_allocObject();
  swift_retain_n();
  v19 = sub_1B1ADC904(0x6572757472657041, 0xE800000000000000, 0, 0, 0x4059000000000000, 0, 0x3F847AE147AE147BLL, 0, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v18, v17, 0, 0,
          0,
          v3,
          0,
          (uint64_t)sub_1B1AE49FC);
  swift_release();
  *(_QWORD *)(v0 + 72) = v19;
  v20 = swift_getKeyPath();
  sub_1B1AE43E4(0);
  v21 = (_QWORD *)swift_allocObject();
  v21[4] = sub_1B1AE4394;
  v21[5] = v20;
  v21[2] = sub_1B1AE43C4;
  v21[3] = v20;
  v21[6] = v20;
  swift_allocObject();
  swift_retain_n();
  v22 = sub_1B1AC08B0(0x65676E61525ALL, 0xE600000000000000, 0x3F50624DD2F1A9FCLL, 0, 0, 1, 0x3F847AE147AE147BLL, 0, 0, 1, 3uLL, 0, 0, 1, 0, (uint64_t)v21, v20, 0, 0,
          0,
          v3,
          0);
  swift_release();
  *(_QWORD *)(v0 + 80) = v22;
  v23 = swift_getKeyPath();
  v24 = swift_getKeyPath();
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4B8140, MEMORY[0x1E0DEDC60], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v25 = (_QWORD *)swift_allocObject();
  v25[4] = sub_1B1AE4478;
  v25[5] = v24;
  v25[2] = sub_1B1AE44A8;
  v25[3] = v24;
  v25[6] = v24;
  swift_allocObject();
  swift_retain_n();
  v26 = sub_1B1ADBDA8(0xD000000000000018, 0x80000001B232CAC0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v25, v24, 0, 0,
          0,
          v3,
          0,
          (uint64_t)sub_1B1AE476C);
  swift_release();
  sub_1B1A02758(0, &qword_1ED4B8098, (uint64_t)&type metadata for ProjectionDirection, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v27 = (_QWORD *)swift_allocObject();
  v27[4] = sub_1B1AE44C8;
  v27[5] = v23;
  v27[2] = sub_1B1AE44F8;
  v27[3] = v23;
  v27[6] = v23;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v28 = sub_1B1AC23EC(0xD000000000000013, 0x80000001B2328C20, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v27, v23, 0, 0,
          0,
          v3,
          v26,
          (uint64_t)sub_1B1AE4678);
  swift_release();
  swift_release();
  *(_QWORD *)(v0 + 88) = v28;
  v29 = swift_getKeyPath();
  sub_1B1AE1F14(0);
  v30 = (_QWORD *)swift_allocObject();
  v30[4] = sub_1B1AE4518;
  v30[5] = v29;
  v30[2] = sub_1B1AE4548;
  v30[3] = v29;
  v30[6] = v29;
  swift_allocObject();
  swift_retain_n();
  v31 = sub_1B1AC0C8C(0x7366664F6D6C6966, 0xEA00000000007465, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v30, v29, 0, 0,
          0,
          v3,
          0);
  swift_release();
  *(_QWORD *)(v0 + 96) = v31;
  result = sub_1B2228AD0();
  qword_1ED4D0CD0 = v0;
  return result;
}

uint64_t sub_1B1A2C1D0()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 33);
}

uint64_t sub_1B1A2C1D8()
{
  return 0x7463657073726550;
}

uint64_t sub_1B1A2C1F8(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, &qword_1ED4B9138);
}

uint64_t sub_1B1A2C214(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, &qword_1ED4B9138, (unint64_t *)&qword_1ED4D0CD0);
}

uint64_t sub_1B1A2C240(uint64_t a1)
{
  return sub_1B1A2262C(a1, &qword_1ED4B9138, &qword_1ED4D0CD0);
}

uint64_t sub_1B1A2C26C()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E470;
  KeyPath = swift_getKeyPath();
  v2 = swift_getKeyPath();
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4B8140, MEMORY[0x1E0DEDC60], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v3 = (_QWORD *)swift_allocObject();
  v3[4] = sub_1B1AE4AE4;
  v3[5] = v2;
  v3[2] = sub_1B1AE4B14;
  v3[3] = v2;
  v3[6] = v2;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v4 = MEMORY[0x1E0DEE9D8];
  v5 = sub_1B1ADBDA8(0xD000000000000018, 0x80000001B232CAC0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v3, v2, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0,
         (uint64_t)sub_1B1AE4E7C);
  swift_release();
  sub_1B1A02758(0, &qword_1ED4B8098, (uint64_t)&type metadata for ProjectionDirection, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v6 = (_QWORD *)swift_allocObject();
  v6[4] = sub_1B1AE4B34;
  v6[5] = KeyPath;
  v6[2] = sub_1B1AE4B64;
  v6[3] = KeyPath;
  v6[6] = KeyPath;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v7 = sub_1B1AC23EC(0xD000000000000013, 0x80000001B2328C20, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v6, KeyPath, 0, 0,
         0,
         v4,
         v5,
         (uint64_t)sub_1B1AE4DBC);
  swift_release();
  swift_release();
  *(_QWORD *)(v0 + 32) = v7;
  v8 = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F8, MEMORY[0x1E0DEB188], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v9 = (_QWORD *)swift_allocObject();
  v9[4] = sub_1B1AE4B84;
  v9[5] = v8;
  v9[2] = sub_1B1AE4BB4;
  v9[3] = v8;
  v9[6] = v8;
  swift_allocObject();
  swift_retain_n();
  v10 = sub_1B1ADC904(0x656C616373, 0xE500000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v9, v8, 0, 0,
          0,
          v4,
          0,
          (uint64_t)sub_1B1AE4CFC);
  swift_release();
  *(_QWORD *)(v0 + 40) = v10;
  v11 = swift_getKeyPath();
  sub_1B1AE43E4(0);
  v12 = (_QWORD *)swift_allocObject();
  v12[4] = sub_1B1AE4BD4;
  v12[5] = v11;
  v12[2] = sub_1B1AE4C04;
  v12[3] = v11;
  v12[6] = v11;
  swift_allocObject();
  swift_retain_n();
  v13 = sub_1B1AC27B0(0x65676E61527ALL, 0xE600000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v12, v11, 0, 0,
          0,
          v4,
          0);
  swift_release();
  *(_QWORD *)(v0 + 48) = v13;
  result = sub_1B2228AD0();
  qword_1EEFD4F20 = v0;
  return result;
}

uint64_t sub_1B1A2C6D0()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 4);
}

uint64_t sub_1B1A2C6D8()
{
  return 0x6172676F6874724FLL;
}

uint64_t sub_1B1A2C6F8(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, &qword_1EEF56E80);
}

uint64_t sub_1B1A2C714(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, &qword_1EEF56E80, (unint64_t *)&qword_1EEFD4F20);
}

uint64_t sub_1B1A2C740(uint64_t a1)
{
  return sub_1B1A2262C(a1, &qword_1EEF56E80, &qword_1EEFD4F20);
}

uint64_t sub_1B1A2C76C()
{
  uint64_t v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E450;
  KeyPath = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F8, MEMORY[0x1E0DEB188], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = sub_1B1AE4F3C;
  v2[5] = KeyPath;
  v2[2] = sub_1B1AE4F6C;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v3 = MEMORY[0x1E0DEE9D8];
  v4 = sub_1B1ADC904(0x696F507375636F66, 0xEA0000000000746ELL, 0, 1, 0, 1, 0x3F847AE147AE147BLL, 0, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v2, KeyPath, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0,
         (uint64_t)sub_1B1AE4F8C);
  swift_release();
  *(_QWORD *)(v0 + 32) = v4;
  v5 = swift_getKeyPath();
  v6 = (_QWORD *)swift_allocObject();
  v6[4] = sub_1B1AE4F3C;
  v6[5] = v5;
  v6[2] = sub_1B1AE4F6C;
  v6[3] = v5;
  v6[6] = v5;
  swift_allocObject();
  swift_retain_n();
  v7 = sub_1B1ADC904(0x6163537375636F66, 0xEA0000000000656CLL, 0, 0, 0x4059000000000000, 0, 0x3F847AE147AE147BLL, 0, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v6, v5, 0, 0,
         0,
         v3,
         0,
         (uint64_t)sub_1B1AE4F8C);
  swift_release();
  *(_QWORD *)(v0 + 40) = v7;
  result = sub_1B2228AD0();
  qword_1EEFD4F28 = v0;
  return result;
}

uint64_t sub_1B1A2CA04()
{
  return 0x666F206874706544;
}

uint64_t sub_1B1A2CA28(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, qword_1EEF56E88);
}

uint64_t sub_1B1A2CA44(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, qword_1EEF56E88, (unint64_t *)&qword_1EEFD4F28);
}

uint64_t sub_1B1A2CA70(uint64_t a1)
{
  return sub_1B1A2262C(a1, qword_1EEF56E88, &qword_1EEFD4F28);
}

uint64_t sub_1B1A2CA9C()
{
  uint64_t v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E490;
  KeyPath = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F8, MEMORY[0x1E0DEB188], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = sub_1B1AE5054;
  v2[5] = KeyPath;
  v2[2] = sub_1B1AE5084;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v3 = MEMORY[0x1E0DEE9D8];
  v4 = sub_1B1ADC904(0x7469736E65746E69, 0xE900000000000079, 0, 0, 0x4059000000000000, 0, 0x3F847AE147AE147BLL, 0, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v2, KeyPath, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0,
         (uint64_t)sub_1B1AE5418);
  swift_release();
  *(_QWORD *)(v0 + 32) = v4;
  v5 = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B8100, MEMORY[0x1E0DEB418], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v6 = (_QWORD *)swift_allocObject();
  v6[4] = sub_1B1AE50A4;
  v6[5] = v5;
  v6[2] = sub_1B1AE50D4;
  v6[3] = v5;
  v6[6] = v5;
  swift_allocObject();
  swift_retain_n();
  v7 = sub_1B1AD6CCC(0x617265744978616DLL, 0xEC0000006E6F6974, 0, 0, 0x4059000000000000, 0, 0x3FF0000000000000, 0, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v6, v5, 0, 0,
         0,
         v3,
         0,
         (uint64_t)sub_1B1AE5350);
  swift_release();
  *(_QWORD *)(v0 + 40) = v7;
  v8 = swift_getKeyPath();
  v9 = (_QWORD *)swift_allocObject();
  v9[4] = sub_1B1AE5054;
  v9[5] = v8;
  v9[2] = sub_1B1AE5084;
  v9[3] = v8;
  v9[6] = v8;
  swift_allocObject();
  swift_retain_n();
  v10 = sub_1B1ADC904(0x6C6F687365726874, 0xE900000000000064, 0, 0, 0x4059000000000000, 0, 0x3F847AE147AE147BLL, 0, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v9, v8, 0, 0,
          0,
          v3,
          0,
          (uint64_t)sub_1B1AE5418);
  swift_release();
  *(_QWORD *)(v0 + 48) = v10;
  v11 = swift_getKeyPath();
  v12 = (_QWORD *)swift_allocObject();
  v12[4] = sub_1B1AE5054;
  v12[5] = v11;
  v12[2] = sub_1B1AE5084;
  v12[3] = v11;
  v12[6] = v11;
  swift_allocObject();
  swift_retain_n();
  v13 = sub_1B1ADC904(0xD000000000000013, 0x80000001B2328240, 0, 0, 0x4024000000000000, 0, 0x3F847AE147AE147BLL, 0, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v12, v11, 0, 0,
          0,
          v3,
          0,
          (uint64_t)sub_1B1AE5418);
  swift_release();
  *(_QWORD *)(v0 + 56) = v13;
  v14 = swift_getKeyPath();
  sub_1B1AE10E4(0);
  v15 = (_QWORD *)swift_allocObject();
  v15[4] = sub_1B1AE50F4;
  v15[5] = v14;
  v15[2] = sub_1B1AE512C;
  v15[3] = v14;
  v15[6] = v14;
  swift_allocObject();
  swift_retain_n();
  v16 = sub_1B1AB6F6C(0x6C6946726F6C6F63, 0xEB00000000726574, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 6, 0, (uint64_t)v15, v14, 0, 0,
          0,
          v3,
          0);
  swift_release();
  *(_QWORD *)(v0 + 64) = v16;
  v17 = swift_getKeyPath();
  v18 = (_QWORD *)swift_allocObject();
  v18[4] = sub_1B1AE5054;
  v18[5] = v17;
  v18[2] = sub_1B1AE5084;
  v18[3] = v17;
  v18[6] = v17;
  swift_allocObject();
  swift_retain_n();
  v19 = sub_1B1ADC904(0x74736172746E6F63, 0xE800000000000000, 0, 0, 0x4000000000000000, 0, 0x3F847AE147AE147BLL, 0, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v18, v17, 0, 0,
          0,
          v3,
          0,
          (uint64_t)sub_1B1AE5418);
  swift_release();
  *(_QWORD *)(v0 + 72) = v19;
  v20 = swift_getKeyPath();
  v21 = (_QWORD *)swift_allocObject();
  v21[4] = sub_1B1AE5054;
  v21[5] = v20;
  v21[2] = sub_1B1AE5084;
  v21[3] = v20;
  v21[6] = v20;
  swift_allocObject();
  swift_retain_n();
  v22 = sub_1B1ADC904(0x6974617275746173, 0xEA00000000006E6FLL, 0, 0, 0x4000000000000000, 0, 0x3F847AE147AE147BLL, 0, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v21, v20, 0, 0,
          0,
          v3,
          0,
          (uint64_t)sub_1B1AE5418);
  swift_release();
  *(_QWORD *)(v0 + 80) = v22;
  v23 = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F0, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v24 = (_QWORD *)swift_allocObject();
  v24[4] = sub_1B1AE514C;
  v24[5] = v23;
  v24[2] = sub_1B1AE517C;
  v24[3] = v23;
  v24[6] = v23;
  swift_allocObject();
  swift_retain_n();
  v25 = sub_1B1ADE580(0x5168676948657375, 0xEE007974696C6175, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 19, 0, (uint64_t)v24, v23, 0xD00000000000001ELL, 0x80000001B232CAE0,
          0,
          v3,
          0,
          (uint64_t)sub_1B1AE519C);
  swift_release();
  *(_QWORD *)(v0 + 88) = v25;
  result = sub_1B2228AD0();
  qword_1ED4D09D8 = v0;
  return result;
}

uint64_t sub_1B1A2D2C4()
{
  return 0x6D6F6F6C42;
}

uint64_t sub_1B1A2D2D8(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, qword_1ED4B7C60);
}

uint64_t sub_1B1A2D2F4(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, qword_1ED4B7C60, (unint64_t *)&qword_1ED4D09D8);
}

uint64_t sub_1B1A2D320(uint64_t a1)
{
  return sub_1B1A2262C(a1, qword_1ED4B7C60, &qword_1ED4D09D8);
}

uint64_t sub_1B1A2D34C()
{
  uint64_t v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E470;
  KeyPath = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F8, MEMORY[0x1E0DEB188], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = sub_1B1AE54E0;
  v2[5] = KeyPath;
  v2[2] = sub_1B1AE5510;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v3 = MEMORY[0x1E0DEE9D8];
  v4 = sub_1B1ADC904(0x737569646172, 0xE600000000000000, 0, 0, 0x4034000000000000, 0, 0x3F847AE147AE147BLL, 0, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v2, KeyPath, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0,
         (uint64_t)sub_1B1AE58D8);
  swift_release();
  *(_QWORD *)(v0 + 32) = v4;
  v5 = swift_getKeyPath();
  v6 = swift_getKeyPath();
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4B8140, MEMORY[0x1E0DEDC60], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v7 = (_QWORD *)swift_allocObject();
  v7[4] = sub_1B1AE5560;
  v7[5] = v6;
  v7[2] = sub_1B1AE5590;
  v7[3] = v6;
  v7[6] = v6;
  swift_allocObject();
  swift_retain_n();
  v8 = sub_1B1ADBDA8(0xD000000000000012, 0x80000001B232CB00, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v7, v6, 0, 0,
         0,
         v3,
         0,
         (uint64_t)sub_1B1AE5810);
  swift_release();
  sub_1B1A02758(0, &qword_1EEF59218, (uint64_t)&type metadata for LensBlurQuality, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v9 = (_QWORD *)swift_allocObject();
  v9[4] = sub_1B1AE55B0;
  v9[5] = v5;
  v9[2] = sub_1B1AE55E0;
  v9[3] = v5;
  v9[6] = v5;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v10 = sub_1B1ABB3E8(0x75517265746C6966, 0xED00007974696C61, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v9, v5, 0, 0,
          0,
          v3,
          v8);
  swift_release();
  swift_release();
  *(_QWORD *)(v0 + 40) = v10;
  v11 = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B8100, MEMORY[0x1E0DEB418], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v12 = (_QWORD *)swift_allocObject();
  v12[4] = sub_1B1AE5600;
  v12[5] = v11;
  v12[2] = sub_1B1AE5630;
  v12[3] = v11;
  v12[6] = v11;
  swift_allocObject();
  swift_retain_n();
  v13 = sub_1B1AD6CCC(0x656E72654B78616DLL, 0xEF7375696461526CLL, 0x4020000000000000, 0, 0x404F800000000000, 0, 0x3FF0000000000000, 0, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v12, v11, 0, 0,
          0,
          v3,
          0,
          (uint64_t)sub_1B1AE5650);
  swift_release();
  *(_QWORD *)(v0 + 48) = v13;
  result = sub_1B2228AD0();
  qword_1EEFD4F30 = v0;
  return result;
}

unint64_t sub_1B1A2D7E8(unint64_t result)
{
  uint64_t v1;
  char v2;

  v2 = 3;
  if (result < 3)
    v2 = result;
  *(_BYTE *)(v1 + 4) = v2;
  return result;
}

uint64_t sub_1B1A2D7FC()
{
  return 0x756C4220736E654CLL;
}

uint64_t sub_1B1A2D818(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, &qword_1EEF56E98);
}

uint64_t sub_1B1A2D834(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, &qword_1EEF56E98, (unint64_t *)&qword_1EEFD4F30);
}

uint64_t sub_1B1A2D860(uint64_t a1)
{
  return sub_1B1A2262C(a1, &qword_1EEF56E98, &qword_1EEFD4F30);
}

uint64_t sub_1B1A2D88C()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E440;
  KeyPath = swift_getKeyPath();
  v2 = swift_getKeyPath();
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4B8140, MEMORY[0x1E0DEDC60], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v3 = (_QWORD *)swift_allocObject();
  v3[4] = sub_1B1AE59D0;
  v3[5] = v2;
  v3[2] = sub_1B1AE5A00;
  v3[3] = v2;
  v3[6] = v2;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v4 = MEMORY[0x1E0DEE9D8];
  v5 = sub_1B1ADBDA8(0x726F74617265706FLL, 0xED00007865646E49, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v3, v2, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0,
         (uint64_t)sub_1B1AE5B68);
  swift_release();
  sub_1B1A02758(0, &qword_1EEF59250, (uint64_t)&type metadata for ToneMappingOperator, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v6 = (_QWORD *)swift_allocObject();
  v6[4] = sub_1B1AE5A20;
  v6[5] = KeyPath;
  v6[2] = sub_1B1AE5A50;
  v6[3] = KeyPath;
  v6[6] = KeyPath;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v7 = sub_1B1ABF5A4(0x726F74617265706FLL, 0xE800000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v6, KeyPath, 0, 0,
         0,
         v4,
         v5);
  swift_release();
  swift_release();
  *(_QWORD *)(v0 + 32) = v7;
  result = sub_1B2228AD0();
  qword_1EEFD4F38 = v0;
  return result;
}

uint64_t sub_1B1A2DB2C()
{
  return 0x7070614D656E6F54;
}

uint64_t sub_1B1A2DB4C(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, &qword_1EEF56EA0);
}

uint64_t sub_1B1A2DB68(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, &qword_1EEF56EA0, (unint64_t *)&qword_1EEFD4F38);
}

uint64_t sub_1B1A2DB94(uint64_t a1)
{
  return sub_1B1A2262C(a1, &qword_1EEF56EA0, &qword_1EEFD4F38);
}

uint64_t sub_1B1A2DBC0()
{
  uint64_t v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E4A0;
  KeyPath = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F8, MEMORY[0x1E0DEB188], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = sub_1B1AE5C30;
  v2[5] = KeyPath;
  v2[2] = sub_1B1AE5C60;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v3 = MEMORY[0x1E0DEE9D8];
  v4 = sub_1B1ADC904(0x7469736E65746E69, 0xE900000000000079, 0, 0, 0x3FF0000000000000, 0, 0x3F847AE147AE147BLL, 0, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v2, KeyPath, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0,
         (uint64_t)sub_1B1AE5C80);
  swift_release();
  *(_QWORD *)(v0 + 32) = v4;
  v5 = swift_getKeyPath();
  v6 = (_QWORD *)swift_allocObject();
  v6[4] = sub_1B1AE5C30;
  v6[5] = v5;
  v6[2] = sub_1B1AE5C60;
  v6[3] = v5;
  v6[6] = v5;
  swift_allocObject();
  swift_retain_n();
  v7 = sub_1B1ADC904(0x6870726F6D616E61, 0xEA00000000006369, 0, 0, 0x3FF0000000000000, 0, 0x3F847AE147AE147BLL, 0, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v6, v5, 0, 0,
         0,
         v3,
         0,
         (uint64_t)sub_1B1AE5C80);
  swift_release();
  *(_QWORD *)(v0 + 40) = v7;
  v8 = swift_getKeyPath();
  v9 = (_QWORD *)swift_allocObject();
  v9[4] = sub_1B1AE5C30;
  v9[5] = v8;
  v9[2] = sub_1B1AE5C60;
  v9[3] = v8;
  v9[6] = v8;
  swift_allocObject();
  swift_retain_n();
  v10 = sub_1B1ADC904(0x7373656E74666F73, 0xE800000000000000, 0, 0, 0x3FF0000000000000, 0, 0x3F847AE147AE147BLL, 0, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v9, v8, 0, 0,
          0,
          v3,
          0,
          (uint64_t)sub_1B1AE5C80);
  swift_release();
  *(_QWORD *)(v0 + 48) = v10;
  v11 = swift_getKeyPath();
  v12 = (_QWORD *)swift_allocObject();
  v12[4] = sub_1B1AE5C30;
  v12[5] = v11;
  v12[2] = sub_1B1AE5C60;
  v12[3] = v11;
  v12[6] = v11;
  swift_allocObject();
  swift_retain_n();
  v13 = sub_1B1ADC904(0x737569646172, 0xE600000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v12, v11, 0, 0,
          0,
          v3,
          0,
          (uint64_t)sub_1B1AE5C80);
  swift_release();
  *(_QWORD *)(v0 + 56) = v13;
  result = sub_1B2228AD0();
  qword_1EEFD4F40 = v0;
  return result;
}

uint64_t sub_1B1A2DFFC()
{
  return 0x697474656E676956;
}

uint64_t sub_1B1A2E018(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, &qword_1EEF56EA8);
}

uint64_t sub_1B1A2E034(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, &qword_1EEF56EA8, (unint64_t *)&qword_1EEFD4F40);
}

uint64_t sub_1B1A2E060(uint64_t a1)
{
  return sub_1B1A2262C(a1, &qword_1EEF56EA8, &qword_1EEFD4F40);
}

uint64_t sub_1B1A2E08C()
{
  uint64_t v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E4B0;
  KeyPath = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F8, MEMORY[0x1E0DEB188], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = sub_1B1AE5D48;
  v2[5] = KeyPath;
  v2[2] = sub_1B1AE5D78;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v3 = MEMORY[0x1E0DEE9D8];
  v4 = sub_1B1ADC904(0x657275736F707865, 0xE800000000000000, 0xC014000000000000, 0, 0x4014000000000000, 0, 0x3F847AE147AE147BLL, 0, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v2, KeyPath, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0,
         (uint64_t)sub_1B1AE5EF4);
  swift_release();
  *(_QWORD *)(v0 + 32) = v4;
  v5 = swift_getKeyPath();
  v6 = (_QWORD *)swift_allocObject();
  v6[4] = sub_1B1AE5D48;
  v6[5] = v5;
  v6[2] = sub_1B1AE5D78;
  v6[3] = v5;
  v6[6] = v5;
  swift_allocObject();
  swift_retain_n();
  v7 = sub_1B1ADC904(0x74617265706D6574, 0xEB00000000657275, 0xBFF0000000000000, 0, 0x3FF0000000000000, 0, 0x3F847AE147AE147BLL, 0, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v6, v5, 0, 0,
         0,
         v3,
         0,
         (uint64_t)sub_1B1AE5EF4);
  swift_release();
  *(_QWORD *)(v0 + 40) = v7;
  v8 = swift_getKeyPath();
  v9 = (_QWORD *)swift_allocObject();
  v9[4] = sub_1B1AE5D48;
  v9[5] = v8;
  v9[2] = sub_1B1AE5D78;
  v9[3] = v8;
  v9[6] = v8;
  swift_allocObject();
  swift_retain_n();
  v10 = sub_1B1ADC904(1953393012, 0xE400000000000000, 0xBFF0000000000000, 0, 0x3FF0000000000000, 0, 0x3F847AE147AE147BLL, 0, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v9, v8, 0, 0,
          0,
          v3,
          0,
          (uint64_t)sub_1B1AE5EF4);
  swift_release();
  *(_QWORD *)(v0 + 48) = v10;
  v11 = swift_getKeyPath();
  sub_1B1AE10E4(0);
  v12 = (_QWORD *)swift_allocObject();
  v12[4] = sub_1B1AE5D98;
  v12[5] = v11;
  v12[2] = sub_1B1AE5DD0;
  v12[3] = v11;
  v12[6] = v11;
  swift_allocObject();
  swift_retain_n();
  v13 = sub_1B1AC1808(0x6F6C6F437466696CLL, 0xE900000000000072, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 6, 0, (uint64_t)v12, v11, 0, 0,
          0,
          v3,
          0);
  swift_release();
  *(_QWORD *)(v0 + 56) = v13;
  v14 = swift_getKeyPath();
  v15 = (_QWORD *)swift_allocObject();
  v15[4] = sub_1B1AE5D48;
  v15[5] = v14;
  v15[2] = sub_1B1AE5D78;
  v15[3] = v14;
  v15[6] = v14;
  swift_allocObject();
  swift_retain_n();
  v16 = sub_1B1ADC904(0x7366664F7466696CLL, 0xEA00000000007465, 0xBFF0000000000000, 0, 0x3FF0000000000000, 0, 0x3F50624DD2F1A9FCLL, 0, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v15, v14, 0, 0,
          0,
          v3,
          0,
          (uint64_t)sub_1B1AE5EF4);
  swift_release();
  *(_QWORD *)(v0 + 64) = v16;
  v17 = swift_getKeyPath();
  v18 = (_QWORD *)swift_allocObject();
  v18[4] = sub_1B1AE5D98;
  v18[5] = v17;
  v18[2] = sub_1B1AE5DD0;
  v18[3] = v17;
  v18[6] = v17;
  swift_allocObject();
  swift_retain_n();
  v19 = sub_1B1AC1808(0x6C6F43616D6D6167, 0xEA0000000000726FLL, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 6, 0, (uint64_t)v18, v17, 0, 0,
          0,
          v3,
          0);
  swift_release();
  *(_QWORD *)(v0 + 72) = v19;
  v20 = swift_getKeyPath();
  v21 = (_QWORD *)swift_allocObject();
  v21[4] = sub_1B1AE5D48;
  v21[5] = v20;
  v21[2] = sub_1B1AE5D78;
  v21[3] = v20;
  v21[6] = v20;
  swift_allocObject();
  swift_retain_n();
  v22 = sub_1B1ADC904(0x66664F616D6D6167, 0xEB00000000746573, 0xBFF0000000000000, 0, 0x3FF0000000000000, 0, 0x3F50624DD2F1A9FCLL, 0, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v21, v20, 0, 0,
          0,
          v3,
          0,
          (uint64_t)sub_1B1AE5EF4);
  swift_release();
  *(_QWORD *)(v0 + 80) = v22;
  v23 = swift_getKeyPath();
  v24 = (_QWORD *)swift_allocObject();
  v24[4] = sub_1B1AE5D98;
  v24[5] = v23;
  v24[2] = sub_1B1AE5DD0;
  v24[3] = v23;
  v24[6] = v23;
  swift_allocObject();
  swift_retain_n();
  v25 = sub_1B1AC1808(0x6F6C6F436E696167, 0xE900000000000072, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 6, 0, (uint64_t)v24, v23, 0, 0,
          0,
          v3,
          0);
  swift_release();
  *(_QWORD *)(v0 + 88) = v25;
  v26 = swift_getKeyPath();
  v27 = (_QWORD *)swift_allocObject();
  v27[4] = sub_1B1AE5D48;
  v27[5] = v26;
  v27[2] = sub_1B1AE5D78;
  v27[3] = v26;
  v27[6] = v26;
  swift_allocObject();
  swift_retain_n();
  v28 = sub_1B1ADC904(0x7366664F6E696167, 0xEA00000000007465, 0xBFF0000000000000, 0, 0x3FF0000000000000, 0, 0x3F50624DD2F1A9FCLL, 0, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v27, v26, 0, 0,
          0,
          v3,
          0,
          (uint64_t)sub_1B1AE5EF4);
  swift_release();
  *(_QWORD *)(v0 + 96) = v28;
  v29 = swift_getKeyPath();
  v30 = (_QWORD *)swift_allocObject();
  v30[4] = sub_1B1AE5D48;
  v30[5] = v29;
  v30[2] = sub_1B1AE5D78;
  v30[3] = v29;
  v30[6] = v29;
  swift_allocObject();
  swift_retain_n();
  v31 = sub_1B1ADC904(0x74736172746E6F63, 0xE800000000000000, 0, 0, 0x4000000000000000, 0, 0x3F847AE147AE147BLL, 0, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v30, v29, 0, 0,
          0,
          v3,
          0,
          (uint64_t)sub_1B1AE5EF4);
  swift_release();
  *(_QWORD *)(v0 + 104) = v31;
  v32 = swift_getKeyPath();
  v33 = (_QWORD *)swift_allocObject();
  v33[4] = sub_1B1AE5D48;
  v33[5] = v32;
  v33[2] = sub_1B1AE5D78;
  v33[3] = v32;
  v33[6] = v32;
  swift_allocObject();
  swift_retain_n();
  v34 = sub_1B1ADC904(0x6974617275746173, 0xEA00000000006E6FLL, 0, 0, 0x4000000000000000, 0, 0x3F847AE147AE147BLL, 0, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v33, v32, 0, 0,
          0,
          v3,
          0,
          (uint64_t)sub_1B1AE5EF4);
  swift_release();
  *(_QWORD *)(v0 + 112) = v34;
  result = sub_1B2228AD0();
  qword_1EEFD4F48 = v0;
  return result;
}

uint64_t sub_1B1A2EAF8()
{
  return 0x724720726F6C6F43;
}

uint64_t sub_1B1A2EB1C()
{
  if (qword_1EEF56EB0 != -1)
    swift_once();
  return swift_bridgeObjectRetain();
}

uint64_t sub_1B1A2EB5C(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, &qword_1EEF56EB0);
}

uint64_t sub_1B1A2EB78(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, &qword_1EEF56EB0, (unint64_t *)&qword_1EEFD4F48);
}

uint64_t sub_1B1A2EBA4(uint64_t a1)
{
  return sub_1B1A2262C(a1, &qword_1EEF56EB0, &qword_1EEFD4F48);
}

uint64_t sub_1B1A2EBD0()
{
  uint64_t v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E4A0;
  KeyPath = swift_getKeyPath();
  sub_1B1791524(0, &qword_1EEF59290, (uint64_t (*)(uint64_t))type metadata accessor for MTLPixelFormat, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for EntityGetSet);
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = sub_1B1AE5FB4;
  v2[5] = KeyPath;
  v2[2] = sub_1B1AE5FE4;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v3 = MEMORY[0x1E0DEE9D8];
  v4 = sub_1B1AB67D0(0x74616D726F66, 0xE600000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v2, KeyPath, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0,
         (uint64_t (*)(_QWORD))type metadata accessor for MTLPixelFormat,
         (uint64_t)sub_1B1AE6200);
  swift_release();
  *(_QWORD *)(v0 + 32) = v4;
  v5 = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F8, MEMORY[0x1E0DEB188], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v6 = (_QWORD *)swift_allocObject();
  v6[4] = sub_1B1AE6004;
  v6[5] = v5;
  v6[2] = sub_1B1AE6034;
  v6[3] = v5;
  v6[6] = v5;
  swift_allocObject();
  swift_retain_n();
  v7 = sub_1B1ADC904(0x615265757161706FLL, 0xEB000000006F6974, 0x3FC0000000000000, 0, 0x3FF0000000000000, 0, 0x3FC0000000000000, 0, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v6, v5, 0, 0,
         0,
         v3,
         0,
         (uint64_t)sub_1B1AE6138);
  swift_release();
  *(_QWORD *)(v0 + 40) = v7;
  v8 = swift_getKeyPath();
  v9 = (_QWORD *)swift_allocObject();
  v9[4] = sub_1B1AE6004;
  v9[5] = v8;
  v9[2] = sub_1B1AE6034;
  v9[3] = v8;
  v9[6] = v8;
  swift_allocObject();
  swift_retain_n();
  v10 = sub_1B1ADC904(0xD000000000000010, 0x80000001B232CB20, 0x3FC0000000000000, 0, 0x3FF0000000000000, 0, 0x3FC0000000000000, 0, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v9, v8, 0, 0,
          0,
          v3,
          0,
          (uint64_t)sub_1B1AE6138);
  swift_release();
  *(_QWORD *)(v0 + 48) = v10;
  v11 = swift_getKeyPath();
  sub_1B1791524(0, &qword_1EEF59298, (uint64_t (*)(uint64_t))type metadata accessor for CGSize, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for EntityGetSet);
  v12 = (_QWORD *)swift_allocObject();
  v12[4] = sub_1B1AE6054;
  v12[5] = v11;
  v12[2] = sub_1B1AE6084;
  v12[3] = v11;
  v12[6] = v11;
  swift_allocObject();
  swift_retain_n();
  v13 = sub_1B1AB67D0(0x6F69736E656D6964, 0xEA0000000000736ELL, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v12, v11, 0, 0,
          0,
          v3,
          0,
          (uint64_t (*)(_QWORD))type metadata accessor for CGSize,
          (uint64_t)sub_1B1AE608C);
  swift_release();
  *(_QWORD *)(v0 + 56) = v13;
  result = sub_1B2228AD0();
  qword_1EEFD4F50 = v0;
  return result;
}

uint64_t sub_1B1A2F03C()
{
  return 0x53207265646E6552;
}

uint64_t sub_1B1A2F060(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, &qword_1EEF56EB8);
}

uint64_t sub_1B1A2F07C(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, &qword_1EEF56EB8, (unint64_t *)&qword_1EEFD4F50);
}

uint64_t sub_1B1A2F0A8(uint64_t a1)
{
  return sub_1B1A2262C(a1, &qword_1EEF56EB8, &qword_1EEFD4F50);
}

uint64_t sub_1B1A2F0D4()
{
  uint64_t v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E4C0;
  KeyPath = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B8040, (uint64_t)&type metadata for Entity, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = sub_1B1AE629C;
  v2[5] = KeyPath;
  v2[2] = sub_1B1AE62CC;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v3 = MEMORY[0x1E0DEE9D8];
  v4 = sub_1B1AD9F50(0x65727574786574, 0xE700000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 8, 0, (uint64_t)v2, KeyPath, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0,
         (uint64_t)sub_1B1AE683C);
  swift_release();
  *(_QWORD *)(v0 + 32) = v4;
  v5 = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F8, MEMORY[0x1E0DEB188], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v6 = (_QWORD *)swift_allocObject();
  v6[4] = sub_1B1AE62EC;
  v6[5] = v5;
  v6[2] = sub_1B1AE631C;
  v6[3] = v5;
  v6[6] = v5;
  swift_allocObject();
  swift_retain_n();
  v7 = sub_1B1ADC904(0x7469736E65746E69, 0xE900000000000079, 0, 0, 0x4024000000000000, 0, 0x3F847AE147AE147BLL, 0, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v6, v5, 0, 0,
         0,
         v3,
         0,
         (uint64_t)sub_1B1AE6774);
  swift_release();
  *(_QWORD *)(v0 + 40) = v7;
  v8 = swift_getKeyPath();
  v9 = (_QWORD *)swift_allocObject();
  v9[4] = sub_1B1AE62EC;
  v9[5] = v8;
  v9[2] = sub_1B1AE631C;
  v9[3] = v8;
  v9[6] = v8;
  swift_allocObject();
  swift_retain_n();
  v10 = sub_1B1ADC904(0x6576654C72756C62, 0xE90000000000006CLL, 0, 0, 0x4028000000000000, 0, 0x3FB999999999999ALL, 0, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v9, v8, 0xD000000000000037, 0x80000001B232CB40,
          0,
          v3,
          0,
          (uint64_t)sub_1B1AE6774);
  swift_release();
  *(_QWORD *)(v0 + 48) = v10;
  v11 = swift_getKeyPath();
  v12 = swift_getKeyPath();
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4B8140, MEMORY[0x1E0DEDC60], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v13 = (_QWORD *)swift_allocObject();
  v13[4] = sub_1B1AE6384;
  v13[5] = v12;
  v13[2] = sub_1B1AE63B4;
  v13[3] = v12;
  v13[6] = v12;
  swift_allocObject();
  swift_retain_n();
  v14 = sub_1B1ADBDA8(0x646F4D646E656C62, 0xEE007865646E4965, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v13, v12, 0, 0,
          0,
          v3,
          0,
          (uint64_t)sub_1B1AE6670);
  swift_release();
  sub_1B1A02758(0, &qword_1ED4B80C0, (uint64_t)&type metadata for BlendMode, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v15 = (_QWORD *)swift_allocObject();
  v15[4] = sub_1B1AE63D4;
  v15[5] = v11;
  v15[2] = sub_1B1AE6404;
  v15[3] = v11;
  v15[6] = v11;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v16 = sub_1B1ADA314(0x646F4D646E656C62, 0xE900000000000065, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v15, v11, 0, 0,
          0,
          v3,
          v14,
          (uint64_t)sub_1B1AE6568);
  swift_release();
  swift_release();
  *(_QWORD *)(v0 + 56) = v16;
  *(_QWORD *)(v0 + 64) = sub_1B1ABF400(2047, 0x6F7475436B73616DLL, 0xEA00000000006666, (uint64_t)&type metadata for Skybox, (uint64_t)&off_1E63BD0F0, 0x66666F747563, 0xE600000000000000);
  v17 = swift_getKeyPath();
  v18 = (_QWORD *)swift_allocObject();
  v18[4] = sub_1B1AE62EC;
  v18[5] = v17;
  v18[2] = sub_1B1AE631C;
  v18[3] = v17;
  v18[6] = v17;
  swift_allocObject();
  swift_retain_n();
  v19 = sub_1B1ADC904(0x66666F747563, 0xE600000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v18, v17, 0, 0,
          0,
          v3,
          0,
          (uint64_t)sub_1B1AE6774);
  swift_release();
  *(_QWORD *)(v0 + 72) = v19;
  v20 = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1EEF592D8, (uint64_t)&type metadata for ImageResizingMode, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v21 = (_QWORD *)swift_allocObject();
  v21[4] = sub_1B1AE6424;
  v21[5] = v20;
  v21[2] = sub_1B1AE6454;
  v21[3] = v20;
  v21[6] = v20;
  swift_allocObject();
  swift_retain_n();
  v22 = sub_1B1AD97D8(0x676E697A69736572, 0xEC00000065646F4DLL, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v21, v20, 0xD00000000000001BLL, 0x80000001B232CB80,
          0,
          v3,
          0);
  swift_release();
  *(_QWORD *)(v0 + 80) = v22;
  result = sub_1B2228AD0();
  qword_1EEFD4F58 = v0;
  return result;
}

uint64_t sub_1B1A2F898()
{
  uint64_t v0;
  int v2;
  unsigned int v3;
  char v4;

  sub_1B1AE6738((int *)(v0 + 16), (uint64_t)&v2);
  sub_1B1AE6738(&v2, (uint64_t)&v3);
  if (v4)
    return v3;
  else
    return 3;
}

uint64_t sub_1B1A2F8DC(uint64_t result)
{
  uint64_t v1;

  if (result == 3)
  {
    if ((*(_BYTE *)(v1 + 20) & 1) != 0)
    {
      *(_DWORD *)(v1 + 16) = 1056964608;
      *(_BYTE *)(v1 + 20) = 0;
    }
  }
  else
  {
    if (result == 2)
      *(_DWORD *)(v1 + 16) = 2;
    else
      *(_DWORD *)(v1 + 16) = result == 1;
    *(_BYTE *)(v1 + 20) = 1;
  }
  return result;
}

uint64_t sub_1B1A2F934()
{
  return 0x786F62796B53;
}

uint64_t sub_1B1A2F948()
{
  return 49283584;
}

uint64_t sub_1B1A2F954()
{
  if (qword_1EEF56EC0 != -1)
    swift_once();
  return swift_bridgeObjectRetain();
}

uint64_t sub_1B1A2F994(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, &qword_1EEF56EC0);
}

uint64_t sub_1B1A2F9B0(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, &qword_1EEF56EC0, (unint64_t *)&qword_1EEFD4F58);
}

uint64_t sub_1B1A2F9DC(uint64_t a1)
{
  return sub_1B1A2262C(a1, &qword_1EEF56EC0, &qword_1EEFD4F58);
}

uint64_t sub_1B1A2FA08()
{
  return 4997705;
}

uint64_t sub_1B1A2FA18()
{
  return 512;
}

uint64_t sub_1B1A2FA20()
{
  uint64_t v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E440;
  KeyPath = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F8, MEMORY[0x1E0DEB188], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = sub_1B1AE6904;
  v2[5] = KeyPath;
  v2[2] = sub_1B1AE6934;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v3 = sub_1B1ADC904(0x7469736E65746E69, 0xE900000000000079, 0, 0, 0x4024000000000000, 0, 0x3F847AE147AE147BLL, 0, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v2, KeyPath, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0,
         (uint64_t)sub_1B1AE6954);
  swift_release();
  *(_QWORD *)(v0 + 32) = v3;
  result = sub_1B2228AD0();
  qword_1EEFD4F60 = v0;
  return result;
}

uint64_t sub_1B1A2FBB4()
{
  return 0x656E6547204C4249;
}

uint64_t sub_1B1A2FBD8(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, &qword_1EEF56EC8);
}

uint64_t sub_1B1A2FBF4(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, &qword_1EEF56EC8, (unint64_t *)&qword_1EEFD4F60);
}

uint64_t sub_1B1A2FC20(uint64_t a1)
{
  return sub_1B1A2262C(a1, &qword_1EEF56EC8, &qword_1EEFD4F60);
}

uint64_t sub_1B1A2FC4C()
{
  return 1819047246;
}

uint64_t sub_1B1A2FC5C()
{
  return 0x6F7420706D616C43;
}

uint64_t sub_1B1A2FC7C()
{
  uint64_t v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E440;
  KeyPath = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80C8, (uint64_t)&type metadata for ColorRamp, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = sub_1B1AE6A1C;
  v2[5] = KeyPath;
  v2[2] = sub_1B1AE6A44;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v3 = sub_1B1AD06E4(0x65756C6176, 0xE500000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v2, KeyPath, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0,
         (uint64_t)sub_1B1AE6A64);
  swift_release();
  *(_QWORD *)(v0 + 32) = v3;
  result = sub_1B2228AD0();
  qword_1ED4D0CE0 = v0;
  return result;
}

uint64_t sub_1B1A2FDFC()
{
  return 0x6D6152726F6C6F43;
}

uint64_t sub_1B1A2FE18()
{
  return 1024;
}

uint64_t sub_1B1A2FE20(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, qword_1ED4B91D0);
}

uint64_t sub_1B1A2FE3C(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, qword_1ED4B91D0, (unint64_t *)&qword_1ED4D0CE0);
}

uint64_t sub_1B1A2FE68(uint64_t a1)
{
  return sub_1B1A2262C(a1, qword_1ED4B91D0, &qword_1ED4D0CE0);
}

uint64_t sub_1B1A2FE94()
{
  uint64_t v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E440;
  KeyPath = swift_getKeyPath();
  sub_1B1AE6B80(0);
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = sub_1B1AE6B30;
  v2[5] = KeyPath;
  v2[2] = sub_1B1AE6B60;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v3 = sub_1B1ABB7A4(0x65756C6176, 0xE500000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v2, KeyPath, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0);
  swift_release();
  *(_QWORD *)(v0 + 32) = v3;
  result = sub_1B2228AD0();
  qword_1ED4D0BE0 = v0;
  return result;
}

uint64_t sub_1B1A2FFF0()
{
  return 0x6576727543;
}

uint64_t sub_1B1A30004(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, &qword_1ED4B8A68);
}

uint64_t sub_1B1A30020(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, &qword_1ED4B8A68, (unint64_t *)&qword_1ED4D0BE0);
}

uint64_t sub_1B1A3004C(uint64_t a1)
{
  return sub_1B1A2262C(a1, &qword_1ED4B8A68, &qword_1ED4D0BE0);
}

uint64_t sub_1B1A30078(uint64_t a1, unsigned int a2)
{
  uint64_t v3;
  uint64_t KeyPath;
  int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_1B226E470;
  KeyPath = swift_getKeyPath();
  v5 = (a2 >> 4) & 0x10;
  sub_1B1A02758(0, &qword_1ED4B80F0, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v6 = (_QWORD *)swift_allocObject();
  v6[4] = sub_1B1AE6E4C;
  v6[5] = KeyPath;
  v6[2] = sub_1B1AE6E7C;
  v6[3] = KeyPath;
  v6[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v7 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v3 + 32) = sub_1B1ADE580(0xD000000000000011, 0x80000001B2328BB0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v6, KeyPath, 0, 0,
                           v5,
                           MEMORY[0x1E0DEE9D8],
                           0,
                           (uint64_t)sub_1B1AE701C);
  v8 = swift_getKeyPath();
  v9 = (_QWORD *)swift_allocObject();
  v9[4] = sub_1B1AE6E4C;
  v9[5] = v8;
  v9[2] = sub_1B1AE6E7C;
  v9[3] = v8;
  v9[6] = v8;
  swift_allocObject();
  swift_retain_n();
  *(_QWORD *)(v3 + 40) = sub_1B1ADE580(0x7A696C616D726F6ELL, 0xE900000000000065, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v9, v8, 0, 0,
                           v5,
                           v7,
                           0,
                           (uint64_t)sub_1B1AE701C);
  v10 = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1EEF59360, (uint64_t)&type metadata for MeshImportOptions.Loader, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v11 = (_QWORD *)swift_allocObject();
  v11[4] = sub_1B1AE6ED8;
  v11[5] = v10;
  v11[2] = sub_1B1AE6F08;
  v11[3] = v10;
  v11[6] = v10;
  swift_allocObject();
  swift_retain_n();
  *(_QWORD *)(v3 + 48) = sub_1B1ADE944(0x726564616F6CLL, 0xE600000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v11, v10, 0, 0,
                           v5,
                           v7,
                           0);
  sub_1B2228AD0();
  return v3;
}

uint64_t sub_1B1A303B8()
{
  return 0x74704F206873654DLL;
}

uint64_t sub_1B1A303D8(uint64_t a1)
{
  uint64_t v1;
  int v2;

  if (*(_BYTE *)(v1 + 9))
    v2 = 256;
  else
    v2 = 0;
  return sub_1B1A30078(a1, v2 | *(unsigned __int8 *)(v1 + 8));
}

uint64_t sub_1B1A303F4(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  __int16 v5;

  if (*(_BYTE *)(v4 + 9))
    v5 = 256;
  else
    v5 = 0;
  return sub_1B1A21664(a1, a2, a3, a4, *(_QWORD *)v4, v5 | *(unsigned __int8 *)(v4 + 8));
}

uint64_t sub_1B1A30414(uint64_t a1)
{
  uint64_t v1;
  __int16 v2;

  if (*(_BYTE *)(v1 + 9))
    v2 = 256;
  else
    v2 = 0;
  return sub_1B1A221B8(a1, *(_QWORD *)v1, v2 | *(unsigned __int8 *)(v1 + 8));
}

uint64_t sub_1B1A30434()
{
  uint64_t v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E450;
  KeyPath = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1EEF59388, (uint64_t)&type metadata for Asset, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = sub_1B1AE70E4;
  v2[5] = KeyPath;
  v2[2] = sub_1B1AE710C;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v3 = MEMORY[0x1E0DEE9D8];
  v4 = sub_1B1AC5AF8(0x7465737361, 0xE500000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v2, KeyPath, 0, 0,
         4,
         MEMORY[0x1E0DEE9D8],
         0,
         (uint64_t)sub_1B1AE72A8);
  swift_release();
  *(_QWORD *)(v0 + 32) = v4;
  v5 = swift_getKeyPath();
  sub_1B1791524(0, &qword_1EEF59390, (uint64_t (*)(uint64_t))sub_1B1AE717C, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for EntityGetSet);
  v6 = (_QWORD *)swift_allocObject();
  v6[4] = sub_1B1AE712C;
  v6[5] = v5;
  v6[2] = sub_1B1AE715C;
  v6[3] = v5;
  v6[6] = v5;
  swift_allocObject();
  swift_retain_n();
  v7 = sub_1B1ABA4D0(0x6874615065646F6ELL, 0xE800000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v6, v5, 0, 0,
         4,
         v3,
         0,
         (uint64_t (*)(_QWORD))sub_1B1AE717C,
         (uint64_t)sub_1B1AE71E8);
  swift_release();
  *(_QWORD *)(v0 + 40) = v7;
  result = sub_1B2228AD0();
  qword_1EEFD4F68 = v0;
  return result;
}

uint64_t sub_1B1A306CC()
{
  return 0x6C6946206873654DLL;
}

uint64_t sub_1B1A306F0(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, &qword_1EEF56ED0);
}

uint64_t sub_1B1A3070C(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, &qword_1EEF56ED0, (unint64_t *)&qword_1EEFD4F68);
}

uint64_t sub_1B1A30738(uint64_t a1)
{
  return sub_1B1A2262C(a1, &qword_1EEF56ED0, &qword_1EEFD4F68);
}

uint64_t sub_1B1A30764()
{
  uint64_t v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E450;
  KeyPath = swift_getKeyPath();
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4B80E0, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = sub_1B1AE7458;
  v2[5] = KeyPath;
  v2[2] = sub_1B1AE7480;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v3 = MEMORY[0x1E0DEE9D8];
  v4 = sub_1B1AD7928(0x656E656373, 0xE500000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v2, KeyPath, 0, 0,
         4,
         MEMORY[0x1E0DEE9D8],
         0,
         (uint64_t)sub_1B1AE74A0);
  swift_release();
  *(_QWORD *)(v0 + 32) = v4;
  v5 = swift_getKeyPath();
  v6 = (_QWORD *)swift_allocObject();
  v6[4] = sub_1B1AE7458;
  v6[5] = v5;
  v6[2] = sub_1B1AE7480;
  v6[3] = v5;
  v6[6] = v5;
  swift_allocObject();
  swift_retain_n();
  v7 = sub_1B1AD7928(1752393069, 0xE400000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v6, v5, 0, 0,
         4,
         v3,
         0,
         (uint64_t)sub_1B1AE74A0);
  swift_release();
  *(_QWORD *)(v0 + 40) = v7;
  result = sub_1B2228AD0();
  qword_1EEFD4F70 = v0;
  return result;
}

uint64_t sub_1B1A309D0()
{
  return 0x666552206873654DLL;
}

uint64_t sub_1B1A309F4(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, &qword_1EEF56ED8);
}

uint64_t sub_1B1A30A10(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, &qword_1EEF56ED8, (unint64_t *)&qword_1EEFD4F70);
}

uint64_t sub_1B1A30A3C(uint64_t a1)
{
  return sub_1B1A2262C(a1, &qword_1EEF56ED8, &qword_1EEFD4F70);
}

uint64_t sub_1B1A30A68()
{
  uint64_t v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E440;
  KeyPath = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1EEF59388, (uint64_t)&type metadata for Asset, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = sub_1B1AE75B4;
  v2[5] = KeyPath;
  v2[2] = sub_1B1AE75DC;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v3 = sub_1B1AC5AF8(0x7465737361, 0xE500000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v2, KeyPath, 0, 0,
         4,
         MEMORY[0x1E0DEE9D8],
         0,
         (uint64_t)sub_1B1AE75FC);
  swift_release();
  *(_QWORD *)(v0 + 32) = v3;
  result = sub_1B2228AD0();
  qword_1EEFD4F78 = v0;
  return result;
}

unint64_t sub_1B1A30BEC()
{
  return 0xD000000000000011;
}

uint64_t sub_1B1A30C08()
{
  return 0x10000;
}

uint64_t sub_1B1A30C10(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, &qword_1EEF56EE0);
}

uint64_t sub_1B1A30C2C(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, &qword_1EEF56EE0, (unint64_t *)&qword_1EEFD4F78);
}

uint64_t sub_1B1A30C58(uint64_t a1)
{
  return sub_1B1A2262C(a1, &qword_1EEF56EE0, &qword_1EEFD4F78);
}

uint64_t sub_1B1A30C84()
{
  uint64_t v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E4A0;
  KeyPath = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F0, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = sub_1B1AE7754;
  v2[5] = KeyPath;
  v2[2] = sub_1B1AE7784;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v3 = MEMORY[0x1E0DEE9D8];
  v4 = sub_1B1ADE580(0x65727574706163, 0xE700000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 19, 0, (uint64_t)v2, KeyPath, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0,
         (uint64_t)sub_1B1AE7B78);
  swift_release();
  *(_QWORD *)(v0 + 32) = v4;
  v5 = swift_getKeyPath();
  v6 = (_QWORD *)swift_allocObject();
  v6[4] = sub_1B1AE7754;
  v6[5] = v5;
  v6[2] = sub_1B1AE7784;
  v6[3] = v5;
  v6[6] = v5;
  swift_allocObject();
  swift_retain_n();
  v7 = sub_1B1ADE580(0x6465726F7272696DLL, 0xE800000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v6, v5, 0, 0,
         0,
         v3,
         0,
         (uint64_t)sub_1B1AE7B78);
  swift_release();
  *(_QWORD *)(v0 + 40) = v7;
  v8 = swift_getKeyPath();
  v9 = swift_getKeyPath();
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4B8140, MEMORY[0x1E0DEDC60], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v10 = (_QWORD *)swift_allocObject();
  v10[4] = sub_1B1AE77D4;
  v10[5] = v9;
  v10[2] = sub_1B1AE7804;
  v10[3] = v9;
  v10[6] = v9;
  swift_allocObject();
  swift_retain_n();
  v11 = sub_1B1ADBDA8(0xD000000000000010, 0x80000001B232CBC0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v10, v9, 0, 0,
          0,
          v3,
          0,
          (uint64_t)sub_1B1AE7AB0);
  swift_release();
  sub_1B1A02758(0, &qword_1EEF593E8, (uint64_t)&type metadata for VideoCapture.OrientationMode, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v12 = (_QWORD *)swift_allocObject();
  v12[4] = sub_1B1AE7824;
  v12[5] = v8;
  v12[2] = sub_1B1AE7854;
  v12[3] = v8;
  v12[6] = v8;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v13 = sub_1B1AB9D38(0x7461746E6569726FLL, 0xEB000000006E6F69, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v12, v8, 0, 0,
          0,
          v3,
          v11);
  swift_release();
  swift_release();
  *(_QWORD *)(v0 + 48) = v13;
  v14 = swift_getKeyPath();
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4B80E0, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v15 = (_QWORD *)swift_allocObject();
  v15[4] = sub_1B1AE7874;
  v15[5] = v14;
  v15[2] = sub_1B1AE789C;
  v15[3] = v14;
  v15[6] = v14;
  swift_allocObject();
  swift_retain_n();
  v16 = sub_1B1AD7928(0x696669746E656469, 0xEA00000000007265, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v15, v14, 0, 0,
          4,
          v3,
          0,
          (uint64_t)sub_1B1AE78BC);
  swift_release();
  *(_QWORD *)(v0 + 56) = v16;
  result = sub_1B2228AD0();
  qword_1EEFD4F80 = v0;
  return result;
}

uint64_t sub_1B1A311E4(__int16 a1)
{
  return HIBYTE(a1);
}

unint64_t sub_1B1A311EC(unint64_t result)
{
  uint64_t v1;
  char v2;

  v2 = 4;
  if (result < 4)
    v2 = result;
  *(_BYTE *)(v1 + 1) = v2;
  return result;
}

uint64_t sub_1B1A31200()
{
  return 0x6143206F65646956;
}

uint64_t sub_1B1A31224(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, &qword_1EEF56EE8);
}

uint64_t sub_1B1A31240(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, &qword_1EEF56EE8, (unint64_t *)&qword_1EEFD4F80);
}

uint64_t sub_1B1A3126C(uint64_t a1)
{
  return sub_1B1A2262C(a1, &qword_1EEF56EE8, &qword_1EEFD4F80);
}

uint64_t sub_1B1A31298()
{
  uint64_t v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E450;
  KeyPath = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B8040, (uint64_t)&type metadata for Entity, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = sub_1B1AE7C40;
  v2[5] = KeyPath;
  v2[2] = sub_1B1AE7C70;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v3 = MEMORY[0x1E0DEE9D8];
  v4 = sub_1B1AD9F50(0x6C65646F6DLL, 0xE500000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 9, 0, (uint64_t)v2, KeyPath, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0,
         (uint64_t)sub_1B1AE7C90);
  swift_release();
  *(_QWORD *)(v0 + 32) = v4;
  v5 = swift_getKeyPath();
  v6 = (_QWORD *)swift_allocObject();
  v6[4] = sub_1B1AE7C40;
  v6[5] = v5;
  v6[2] = sub_1B1AE7C70;
  v6[3] = v5;
  v6[6] = v5;
  swift_allocObject();
  swift_retain_n();
  v7 = sub_1B1AD9F50(0xD000000000000010, 0x80000001B2328850, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 17, 0, (uint64_t)v6, v5, 0, 0,
         0,
         v3,
         0,
         (uint64_t)sub_1B1AE7C90);
  swift_release();
  *(_QWORD *)(v0 + 40) = v7;
  result = sub_1B2228AD0();
  qword_1EEFD4F88 = v0;
  return result;
}

uint64_t sub_1B1A31514()
{
  return 0x6552206C65646F4DLL;
}

uint64_t sub_1B1A31538()
{
  return 49287168;
}

uint64_t sub_1B1A31544(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, &qword_1EEF56EF0);
}

uint64_t sub_1B1A31560(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, &qword_1EEF56EF0, (unint64_t *)&qword_1EEFD4F88);
}

uint64_t sub_1B1A3158C(uint64_t a1)
{
  return sub_1B1A2262C(a1, &qword_1EEF56EF0, &qword_1EEFD4F88);
}

uint64_t sub_1B1A315B8()
{
  uint64_t v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E470;
  KeyPath = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B8040, (uint64_t)&type metadata for Entity, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = sub_1B1AE7D58;
  v2[5] = KeyPath;
  v2[2] = sub_1B1AE7D88;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v3 = MEMORY[0x1E0DEE9D8];
  v4 = sub_1B1AD9F50(0x656372756F73, 0xE600000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v2, KeyPath, 0, 0,
         4,
         MEMORY[0x1E0DEE9D8],
         0,
         (uint64_t)sub_1B1AE7EFC);
  swift_release();
  *(_QWORD *)(v0 + 32) = v4;
  v5 = swift_getKeyPath();
  v6 = (_QWORD *)swift_allocObject();
  v6[4] = sub_1B1AE7D58;
  v6[5] = v5;
  v6[2] = sub_1B1AE7D88;
  v6[3] = v5;
  v6[6] = v5;
  swift_allocObject();
  swift_retain_n();
  v7 = sub_1B1AD9F50(1953460082, 0xE400000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v6, v5, 0, 0,
         4,
         v3,
         0,
         (uint64_t)sub_1B1AE7EFC);
  swift_release();
  *(_QWORD *)(v0 + 40) = v7;
  v8 = swift_getKeyPath();
  sub_1B1AE17C8(0);
  v9 = (_QWORD *)swift_allocObject();
  v9[4] = sub_1B1AE7DA8;
  v9[5] = v8;
  v9[2] = sub_1B1AE7DE0;
  v9[3] = v8;
  v9[6] = v8;
  swift_allocObject();
  swift_retain_n();
  v10 = sub_1B1AB7B00(0x6C6576654C706F74, 0xEF737463656A624FLL, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v9, v8, 0, 0,
          4,
          v3,
          0,
          &qword_1ED4BA460,
          (uint64_t)&type metadata for Entity,
          (uint64_t)sub_1B1AE7E00);
  swift_release();
  *(_QWORD *)(v0 + 48) = v10;
  result = sub_1B2228AD0();
  qword_1EEFD4F90 = v0;
  return result;
}

uint64_t sub_1B1A31920()
{
  return 0x73626166657250;
}

uint64_t sub_1B1A31938(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, &qword_1EEF56EF8);
}

uint64_t sub_1B1A31954(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, &qword_1EEF56EF8, (unint64_t *)&qword_1EEFD4F90);
}

uint64_t sub_1B1A31980(uint64_t a1)
{
  return sub_1B1A2262C(a1, &qword_1EEF56EF8, &qword_1EEFD4F90);
}

uint64_t sub_1B1A319AC()
{
  uint64_t v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E450;
  KeyPath = swift_getKeyPath();
  sub_1B1791524(0, &qword_1EEF59438, (uint64_t (*)(uint64_t))sub_1B1AE8014, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for EntityGetSet);
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = sub_1B1AE7FC4;
  v2[5] = KeyPath;
  v2[2] = sub_1B1AE7FF4;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v3 = MEMORY[0x1E0DEE9D8];
  v4 = sub_1B1ABA4D0(1752393069, 0xE400000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v2, KeyPath, 0, 0,
         4,
         MEMORY[0x1E0DEE9D8],
         0,
         (uint64_t (*)(_QWORD))sub_1B1AE8014,
         (uint64_t)sub_1B1AE8160);
  swift_release();
  *(_QWORD *)(v0 + 32) = v4;
  v5 = swift_getKeyPath();
  sub_1B1AE17C8(0);
  v6 = (_QWORD *)swift_allocObject();
  v6[4] = sub_1B1AE8030;
  v6[5] = v5;
  v6[2] = sub_1B1AE8068;
  v6[3] = v5;
  v6[6] = v5;
  swift_allocObject();
  swift_retain_n();
  v7 = sub_1B1AB7B00(0x6C6169726574616DLL, 0xE900000000000073, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 18, 0, (uint64_t)v6, v5, 0, 0,
         0,
         v3,
         0,
         &qword_1ED4BA460,
         (uint64_t)&type metadata for Entity,
         (uint64_t)sub_1B1AE8088);
  swift_release();
  *(_QWORD *)(v0 + 40) = v7;
  result = sub_1B2228AD0();
  qword_1EEFD4F98 = v0;
  return result;
}

uint64_t sub_1B1A31C3C()
{
  return 0x6C65646F4DLL;
}

uint64_t sub_1B1A31C50(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, &qword_1EEF56F00);
}

uint64_t sub_1B1A31C6C(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, &qword_1EEF56F00, (unint64_t *)&qword_1EEFD4F98);
}

uint64_t sub_1B1A31C98(uint64_t a1)
{
  return sub_1B1A2262C(a1, &qword_1EEF56F00, &qword_1EEFD4F98);
}

uint64_t sub_1B1A31CC4(unint64_t a1)
{
  return (a1 >> 8) & 1;
}

uint64_t sub_1B1A31CCC(char a1)
{
  return a1 & 1;
}

uint64_t sub_1B1A31CD4(int a1)
{
  return BYTE2(a1);
}

unint64_t sub_1B1A31CDC(unint64_t result)
{
  uint64_t v1;
  char v2;

  if ((result & 0x8000000000000000) != 0 || result >= 0x100)
  {
    result = sub_1B222967C();
    __break(1u);
  }
  else
  {
    if (result == 2)
      v2 = 2;
    else
      v2 = result == 1;
    *(_BYTE *)(v1 + 2) = v2;
  }
  return result;
}

uint64_t sub_1B1A31D9C(int a1)
{
  return (uint64_t)a1 >> 24;
}

uint64_t sub_1B1A31DA4(uint64_t result)
{
  uint64_t v1;
  char v2;

  if ((result & 0xFC) != 0)
    v2 = 1;
  else
    v2 = result;
  *(_BYTE *)(v1 + 3) = v2;
  return result;
}

uint64_t sub_1B1A31DB4(uint64_t a1)
{
  return a1 << 24 >> 56;
}

uint64_t sub_1B1A31DBC(uint64_t result)
{
  uint64_t v1;
  char v2;

  if ((result & 0xFC) != 0)
    v2 = 1;
  else
    v2 = result;
  *(_BYTE *)(v1 + 4) = v2;
  return result;
}

uint64_t sub_1B1A31DCC()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t KeyPath;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  uint64_t v107;
  _QWORD *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  _QWORD *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  _QWORD *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  _QWORD *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  _QWORD *v125;
  uint64_t v126;
  _QWORD *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  _QWORD *v133;
  uint64_t v134;
  _QWORD *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  _QWORD *v140;
  uint64_t v141;
  _QWORD *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  _QWORD *v148;
  uint64_t v149;
  _QWORD *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  _QWORD *v156;
  uint64_t v157;
  _QWORD *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  _QWORD *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  _QWORD *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  _QWORD *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  _QWORD *v176;
  uint64_t v177;
  _QWORD *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  _QWORD *v183;
  uint64_t v184;
  _QWORD *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  _QWORD *v190;
  uint64_t v191;
  _QWORD *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  _QWORD *v198;
  uint64_t v199;
  _QWORD *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  _QWORD *v206;
  uint64_t v207;
  _QWORD *v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  _QWORD *v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  _QWORD *v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  _QWORD *v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  _QWORD *v225;
  uint64_t v226;
  _QWORD *v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  _QWORD *v232;
  uint64_t v233;
  uint64_t v234;
  _QWORD *v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  _QWORD *v240;
  uint64_t v241;
  _QWORD *v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  _QWORD *v247;
  uint64_t v248;
  _QWORD *v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  _QWORD *v254;
  uint64_t v255;
  uint64_t v256;
  _QWORD *v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  _QWORD *v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  _QWORD *v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  _QWORD *v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  _QWORD *v274;
  uint64_t v275;
  _QWORD *v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  _QWORD *v281;
  uint64_t v282;
  uint64_t v283;
  _QWORD *v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  _QWORD *v289;
  uint64_t v290;
  _QWORD *v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  _QWORD *v296;
  uint64_t v297;
  _QWORD *v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  _QWORD *v303;
  uint64_t v304;
  _QWORD *v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  _QWORD *v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  _QWORD *v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  _QWORD *v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  _QWORD *v324;
  uint64_t v325;
  _QWORD *v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  _QWORD *v331;
  uint64_t v332;
  uint64_t v333;
  _QWORD *v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  _QWORD *v339;
  uint64_t v340;
  _QWORD *v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  _QWORD *v346;
  uint64_t v347;
  _QWORD *v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  _QWORD *v353;
  uint64_t v354;
  uint64_t v355;
  _QWORD *v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  _QWORD *v360;
  uint64_t v361;
  uint64_t result;
  _QWORD *v363;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E4D0;
  v1 = (_QWORD *)v0;
  KeyPath = swift_getKeyPath();
  v3 = swift_getKeyPath();
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4B8140, MEMORY[0x1E0DEDC60], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v4 = (_QWORD *)swift_allocObject();
  v4[4] = sub_1B1AE8394;
  v4[5] = v3;
  v4[2] = sub_1B1AE83C4;
  v4[3] = v3;
  v4[6] = v3;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v5 = MEMORY[0x1E0DEE9D8];
  v6 = sub_1B1ADBDA8(0x65646E4965707974, 0xE900000000000078, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v4, v3, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0,
         (uint64_t)sub_1B1AE9404);
  swift_release();
  sub_1B1A02758(0, &qword_1EEF59468, (uint64_t)&type metadata for Material.Kind, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v7 = (_QWORD *)swift_allocObject();
  v7[4] = sub_1B1AE83E4;
  v7[5] = KeyPath;
  v7[2] = sub_1B1AE8414;
  v7[3] = KeyPath;
  v7[6] = KeyPath;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v8 = sub_1B1AD9B94(1701869940, 0xE400000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v7, KeyPath, 0, 0,
         0,
         v5,
         v6);
  swift_release();
  swift_release();
  v1[4] = v8;
  v9 = swift_getKeyPath();
  v10 = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B8040, (uint64_t)&type metadata for Entity, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v11 = (_QWORD *)swift_allocObject();
  v11[4] = sub_1B1AE8448;
  v11[5] = v9;
  v11[2] = sub_1B1AE8478;
  v11[3] = v9;
  v11[6] = v9;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v12 = sub_1B1AD9F50(0x726564616873, 0xE600000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v10, 16, 0, (uint64_t)v11, v9, 0, 0,
          0,
          v5,
          0,
          (uint64_t)sub_1B1AE9258);
  swift_release();
  swift_release();
  v1[5] = v12;
  v13 = swift_getKeyPath();
  v14 = swift_getKeyPath();
  v15 = (_QWORD *)swift_allocObject();
  v15[4] = sub_1B1AE8394;
  v15[5] = v14;
  v15[2] = sub_1B1AE83C4;
  v15[3] = v14;
  v15[6] = v14;
  swift_allocObject();
  swift_retain_n();
  v16 = sub_1B1ADBDA8(0x646F4D646E656C62, 0xEE007865646E4965, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v15, v14, 0, 0,
          0,
          v5,
          0,
          (uint64_t)sub_1B1AE9404);
  swift_release();
  sub_1B1A02758(0, &qword_1ED4B80C0, (uint64_t)&type metadata for BlendMode, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v17 = (_QWORD *)swift_allocObject();
  v17[4] = sub_1B1AE84E0;
  v17[5] = v13;
  v17[2] = sub_1B1AE8510;
  v17[3] = v13;
  v17[6] = v13;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v18 = sub_1B1ADA314(0x646F4D646E656C62, 0xE900000000000065, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v17, v13, 0, 0,
          0,
          v5,
          v16,
          (uint64_t)sub_1B1AE9198);
  swift_release();
  swift_release();
  v1[6] = v18;
  v19 = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F8, MEMORY[0x1E0DEB188], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v20 = (_QWORD *)swift_allocObject();
  v20[4] = sub_1B1AE8530;
  v20[5] = v19;
  v20[2] = sub_1B1AE8560;
  v20[3] = v19;
  v20[6] = v19;
  swift_allocObject();
  swift_retain_n();
  v21 = sub_1B1ADC904(0x685466666F747563, 0xEF646C6F68736572, 0xBFF0000000000000, 0, 0x3FF0000000000000, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v20, v19, 0, 0,
          0,
          v5,
          0,
          (uint64_t)sub_1B1AE90D8);
  swift_release();
  v1[7] = v21;
  v363 = v1;
  v22 = swift_getKeyPath();
  v23 = swift_getKeyPath();
  v24 = (_QWORD *)swift_allocObject();
  v24[4] = sub_1B1AE8394;
  v24[5] = v23;
  v24[2] = sub_1B1AE83C4;
  v24[3] = v23;
  v24[6] = v23;
  swift_allocObject();
  swift_retain_n();
  v25 = sub_1B1ADBDA8(0x676E69646E6977, 0xE700000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v24, v23, 0, 0,
          0,
          v5,
          0,
          (uint64_t)sub_1B1AE9404);
  swift_release();
  sub_1B1791524(0, &qword_1EEF59470, (uint64_t (*)(uint64_t))type metadata accessor for MTLWinding, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for EntityGetSet);
  v26 = (_QWORD *)swift_allocObject();
  v26[4] = sub_1B1AE8590;
  v26[5] = v22;
  v26[2] = sub_1B1AE85C0;
  v26[3] = v22;
  v26[6] = v22;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v27 = sub_1B1AB67D0(0x676E69646E6977, 0xE700000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v26, v22, 0, 0,
          0,
          v5,
          v25,
          (uint64_t (*)(_QWORD))type metadata accessor for MTLWinding,
          (uint64_t)sub_1B1AE903C);
  swift_release();
  swift_release();
  v1[8] = v27;
  v28 = swift_getKeyPath();
  v29 = swift_getKeyPath();
  v30 = (_QWORD *)swift_allocObject();
  v30[4] = sub_1B1AE8394;
  v30[5] = v29;
  v30[2] = sub_1B1AE83C4;
  v30[3] = v29;
  v30[6] = v29;
  swift_allocObject();
  swift_retain_n();
  v31 = sub_1B1ADBDA8(0x65646F4D6C6C7563, 0xE800000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v30, v29, 0, 0,
          0,
          v5,
          0,
          (uint64_t)sub_1B1AE9404);
  swift_release();
  sub_1B1791524(0, (unint64_t *)&unk_1ED4B8120, (uint64_t (*)(uint64_t))type metadata accessor for MTLCullMode, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for EntityGetSet);
  v32 = (_QWORD *)swift_allocObject();
  v32[4] = sub_1B1AE85F0;
  v32[5] = v28;
  v32[2] = sub_1B1AE8620;
  v32[3] = v28;
  v32[6] = v28;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v33 = sub_1B1AB67D0(0x65646F4D6C6C7563, 0xE800000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v32, v28, 0, 0,
          0,
          v5,
          v31,
          (uint64_t (*)(_QWORD))type metadata accessor for MTLCullMode,
          (uint64_t)sub_1B1AE8FCC);
  swift_release();
  swift_release();
  v1[9] = v33;
  v34 = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F0, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v35 = (_QWORD *)swift_allocObject();
  v35[4] = sub_1B1AE8640;
  v35[5] = v34;
  v35[2] = sub_1B1AE8670;
  v35[3] = v34;
  v35[6] = v34;
  swift_allocObject();
  swift_retain_n();
  v36 = sub_1B1ADE580(0xD000000000000014, 0x80000001B2329FE0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v35, v34, 0, 0,
          0,
          v5,
          0,
          (uint64_t)sub_1B1AE8F0C);
  swift_release();
  v1[10] = v36;
  v37 = swift_getKeyPath();
  v38 = swift_getKeyPath();
  v39 = swift_getKeyPath();
  v40 = (_QWORD *)swift_allocObject();
  v40[4] = sub_1B1AE8394;
  v40[5] = v39;
  v40[2] = sub_1B1AE83C4;
  v40[3] = v39;
  v40[6] = v39;
  swift_allocObject();
  swift_retain_n();
  v41 = sub_1B1ADBDA8(0xD000000000000011, 0x80000001B232CBE0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v40, v39, 0, 0,
          0,
          v5,
          0,
          (uint64_t)sub_1B1AE9404);
  swift_release();
  sub_1B1791524(0, &qword_1EEF59478, (uint64_t (*)(uint64_t))type metadata accessor for MTLCompareFunction, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for EntityGetSet);
  v42 = (_QWORD *)swift_allocObject();
  v42[4] = sub_1B1AE869C;
  v42[5] = v37;
  v42[2] = sub_1B1AE86CC;
  v42[3] = v37;
  v42[6] = v37;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  swift_retain();
  v43 = sub_1B1AB67D0(0x6D6F436874706564, 0xEC00000065726170, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v38, 1, 0, (uint64_t)v42, v37, 0, 0,
          0,
          v5,
          v41,
          (uint64_t (*)(_QWORD))type metadata accessor for MTLCompareFunction,
          (uint64_t)sub_1B1AE8E08);
  swift_release();
  swift_release();
  swift_release();
  v363[11] = v43;
  v44 = swift_getKeyPath();
  v45 = swift_getKeyPath();
  v46 = (_QWORD *)swift_allocObject();
  v46[4] = sub_1B1AE8640;
  v46[5] = v44;
  v46[2] = sub_1B1AE8670;
  v46[3] = v44;
  v46[6] = v44;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v47 = sub_1B1ADE580(0x6972576874706564, 0xEA00000000006574, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v45, 1, 0, (uint64_t)v46, v44, 0, 0,
          0,
          v5,
          0,
          (uint64_t)sub_1B1AE8F0C);
  swift_release();
  swift_release();
  v363[12] = v47;
  v48 = swift_getKeyPath();
  v49 = swift_getKeyPath();
  v50 = (_QWORD *)swift_allocObject();
  v50[4] = sub_1B1AE8448;
  v50[5] = v48;
  v50[2] = sub_1B1AE8478;
  v50[3] = v48;
  v50[6] = v48;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v51 = MEMORY[0x1E0DEE9D8];
  v52 = sub_1B1AD9F50(0x70614D726F6C6F63, 0xE800000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v49, 8, 0, (uint64_t)v50, v48, 0, 0,
          0,
          MEMORY[0x1E0DEE9D8],
          0,
          (uint64_t)sub_1B1AE9258);
  swift_release();
  swift_release();
  v363[13] = v52;
  v53 = swift_getKeyPath();
  v54 = swift_getKeyPath();
  v55 = (_QWORD *)swift_allocObject();
  v55[4] = sub_1B1AE8640;
  v55[5] = v53;
  v55[2] = sub_1B1AE8670;
  v55[3] = v53;
  v55[6] = v53;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v56 = sub_1B1ADE580(0xD000000000000010, 0x80000001B2328A40, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v54, 1, 0, (uint64_t)v55, v53, 0, 0,
          0,
          v51,
          0,
          (uint64_t)sub_1B1AE8F0C);
  swift_release();
  swift_release();
  v363[14] = v56;
  v57 = swift_getKeyPath();
  v58 = swift_getKeyPath();
  v59 = (_QWORD *)swift_allocObject();
  v59[4] = sub_1B1AE8640;
  v59[5] = v57;
  v59[2] = sub_1B1AE8670;
  v59[3] = v57;
  v59[6] = v57;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v60 = sub_1B1ADE580(0x6953656C62756F64, 0xEB00000000646564, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v58, 1, 0, (uint64_t)v59, v57, 0, 0,
          0,
          MEMORY[0x1E0DEE9D8],
          0,
          (uint64_t)sub_1B1AE8F0C);
  swift_release();
  swift_release();
  v363[15] = v60;
  v61 = swift_getKeyPath();
  v62 = swift_getKeyPath();
  v63 = (_QWORD *)swift_allocObject();
  v63[4] = sub_1B1AE8640;
  v63[5] = v61;
  v63[2] = sub_1B1AE8670;
  v63[3] = v61;
  v63[6] = v61;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v64 = MEMORY[0x1E0DEE9D8];
  v65 = sub_1B1ADE580(0xD000000000000010, 0x80000001B232CC00, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v62, 1, 0, (uint64_t)v63, v61, 0xD000000000000042, 0x80000001B232CC20,
          0,
          MEMORY[0x1E0DEE9D8],
          0,
          (uint64_t)sub_1B1AE8F0C);
  swift_release();
  swift_release();
  v363[16] = v65;
  v66 = swift_getKeyPath();
  v67 = swift_getKeyPath();
  v68 = (_QWORD *)swift_allocObject();
  v68[4] = sub_1B1AE8448;
  v68[5] = v66;
  v68[2] = sub_1B1AE8478;
  v68[3] = v66;
  v68[6] = v66;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v69 = sub_1B1AD9F50(0x65546F6465626C61, 0xED00006572757478, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v67, 8, 0, (uint64_t)v68, v66, 0, 0,
          256,
          v64,
          0,
          (uint64_t)sub_1B1AE9258);
  swift_release();
  swift_release();
  v363[17] = v69;
  v70 = swift_getKeyPath();
  v71 = swift_getKeyPath();
  sub_1B1AE10E4(0);
  v72 = (_QWORD *)swift_allocObject();
  v72[4] = sub_1B1AE871C;
  v72[5] = v70;
  v72[2] = sub_1B1AE8754;
  v72[3] = v70;
  v72[6] = v70;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v73 = sub_1B1ADA6D8(0x6F436F6465626C61, 0xEB00000000726F6CLL, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v71, 6, 0, (uint64_t)v72, v70, 0, 0,
          0,
          v64,
          0);
  swift_release();
  swift_release();
  v363[18] = v73;
  v74 = swift_getKeyPath();
  v75 = swift_getKeyPath();
  v76 = swift_getKeyPath();
  v77 = (_QWORD *)swift_allocObject();
  v77[4] = sub_1B1AE8394;
  v77[5] = v76;
  v77[2] = sub_1B1AE83C4;
  v77[3] = v76;
  v77[6] = v76;
  swift_allocObject();
  swift_retain_n();
  v78 = sub_1B1ADBDA8(0x694D6F6465626C61, 0xEF7265746C69466ELL, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v77, v76, 0, 0,
          0,
          v64,
          0,
          (uint64_t)sub_1B1AE9404);
  swift_release();
  sub_1B1A02758(0, &qword_1EEF59480, (uint64_t)&type metadata for FilterMode, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v79 = (_QWORD *)swift_allocObject();
  v79[4] = sub_1B1AE87C0;
  v79[5] = v74;
  v79[2] = sub_1B1AE87F0;
  v79[3] = v74;
  v79[6] = v74;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  swift_retain();
  v80 = sub_1B1ADAAB4(0x694D6F6465626C61, 0xEF7265746C69466ELL, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v75, 1, 0, (uint64_t)v79, v74, 0, 0,
          0,
          MEMORY[0x1E0DEE9D8],
          v78);
  swift_release();
  swift_release();
  swift_release();
  v363[19] = v80;
  v81 = swift_getKeyPath();
  v82 = swift_getKeyPath();
  v83 = swift_getKeyPath();
  v84 = (_QWORD *)swift_allocObject();
  v84[4] = sub_1B1AE8394;
  v84[5] = v83;
  v84[2] = sub_1B1AE83C4;
  v84[3] = v83;
  v84[6] = v83;
  swift_allocObject();
  swift_retain_n();
  v85 = MEMORY[0x1E0DEE9D8];
  v86 = sub_1B1ADBDA8(0x614D6F6465626C61, 0xEF7265746C694667, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v84, v83, 0, 0,
          0,
          MEMORY[0x1E0DEE9D8],
          0,
          (uint64_t)sub_1B1AE9404);
  swift_release();
  v87 = (_QWORD *)swift_allocObject();
  v87[4] = sub_1B1AE87C0;
  v87[5] = v81;
  v87[2] = sub_1B1AE87F0;
  v87[3] = v81;
  v87[6] = v81;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  swift_retain();
  v88 = sub_1B1ADAAB4(0x614D6F6465626C61, 0xEF7265746C694667, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v82, 1, 0, (uint64_t)v87, v81, 0, 0,
          0,
          v85,
          v86);
  swift_release();
  swift_release();
  swift_release();
  v363[20] = v88;
  v89 = swift_getKeyPath();
  v90 = swift_getKeyPath();
  v91 = swift_getKeyPath();
  v92 = (_QWORD *)swift_allocObject();
  v92[4] = sub_1B1AE8394;
  v92[5] = v91;
  v92[2] = sub_1B1AE83C4;
  v92[3] = v91;
  v92[6] = v91;
  swift_allocObject();
  swift_retain_n();
  v93 = sub_1B1ADBDA8(0x694D6F6465626C61, 0xEF7265746C694670, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v92, v91, 0, 0,
          0,
          v85,
          0,
          (uint64_t)sub_1B1AE9404);
  swift_release();
  sub_1B1A02758(0, &qword_1EEF59488, (uint64_t)&type metadata for TextureMipFilterMode, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v94 = (_QWORD *)swift_allocObject();
  v94[4] = sub_1B1AE8860;
  v94[5] = v89;
  v94[2] = sub_1B1AE8890;
  v94[3] = v89;
  v94[6] = v89;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  swift_retain();
  v95 = sub_1B1ADAE70(0x694D6F6465626C61, 0xEF7265746C694670, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v90, 1, 0, (uint64_t)v94, v89, 0, 0,
          0,
          v85,
          v93);
  swift_release();
  swift_release();
  swift_release();
  v363[21] = v95;
  v96 = swift_getKeyPath();
  v97 = swift_getKeyPath();
  v98 = swift_getKeyPath();
  v99 = (_QWORD *)swift_allocObject();
  v99[4] = sub_1B1AE8394;
  v99[5] = v98;
  v99[2] = sub_1B1AE83C4;
  v99[3] = v98;
  v99[6] = v98;
  swift_allocObject();
  swift_retain_n();
  v100 = sub_1B1ADBDA8(0x72576F6465626C61, 0xEB00000000537061, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v99, v98, 0, 0,
           0,
           v85,
           0,
           (uint64_t)sub_1B1AE9404);
  swift_release();
  sub_1B1A02758(0, &qword_1ED4B8048, (uint64_t)&type metadata for AddressMode, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v101 = (_QWORD *)swift_allocObject();
  v101[4] = sub_1B1AE88E0;
  v101[5] = v96;
  v101[2] = sub_1B1AE8910;
  v101[3] = v96;
  v101[6] = v96;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  swift_retain();
  v102 = sub_1B1ADB22C(0x72576F6465626C61, 0xEB00000000537061, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v97, 1, 0, (uint64_t)v101, v96, 0, 0,
           0,
           v85,
           v100,
           (uint64_t)sub_1B1AE8A64);
  swift_release();
  swift_release();
  swift_release();
  v363[22] = v102;
  v103 = swift_getKeyPath();
  v104 = swift_getKeyPath();
  v105 = swift_getKeyPath();
  v106 = (_QWORD *)swift_allocObject();
  v106[4] = sub_1B1AE8394;
  v106[5] = v105;
  v106[2] = sub_1B1AE83C4;
  v106[3] = v105;
  v106[6] = v105;
  swift_allocObject();
  swift_retain_n();
  v107 = sub_1B1ADBDA8(0x72576F6465626C61, 0xEB00000000547061, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v106, v105, 0, 0,
           0,
           v85,
           0,
           (uint64_t)sub_1B1AE9404);
  swift_release();
  v108 = (_QWORD *)swift_allocObject();
  v108[4] = sub_1B1AE88E0;
  v108[5] = v103;
  v108[2] = sub_1B1AE8910;
  v108[3] = v103;
  v108[6] = v103;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  swift_retain();
  v109 = sub_1B1ADB22C(0x72576F6465626C61, 0xEB00000000547061, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v104, 1, 0, (uint64_t)v108, v103, 0, 0,
           0,
           v85,
           v107,
           (uint64_t)sub_1B1AE8A64);
  swift_release();
  swift_release();
  swift_release();
  v363[23] = v109;
  v110 = swift_getKeyPath();
  v111 = swift_getKeyPath();
  v112 = (_QWORD *)swift_allocObject();
  v112[4] = sub_1B1AE871C;
  v112[5] = v110;
  v112[2] = sub_1B1AE8754;
  v112[3] = v110;
  v112[6] = v110;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v113 = sub_1B1ADA6D8(0x63536F6465626C61, 0xEF73616942656C61, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v111, 1, 0, (uint64_t)v112, v110, 0, 0,
           0,
           v85,
           0);
  swift_release();
  swift_release();
  v363[24] = v113;
  v114 = swift_getKeyPath();
  v115 = swift_getKeyPath();
  v116 = (_QWORD *)swift_allocObject();
  v116[4] = sub_1B1AE8448;
  v116[5] = v114;
  v116[2] = sub_1B1AE8478;
  v116[3] = v114;
  v116[6] = v114;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v117 = sub_1B1AD9F50(0x6576697373696D65, 0xEF65727574786554, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v115, 8, 0, (uint64_t)v116, v114, 0, 0,
           256,
           v85,
           0,
           (uint64_t)sub_1B1AE9258);
  swift_release();
  swift_release();
  v363[25] = v117;
  v118 = swift_getKeyPath();
  v119 = swift_getKeyPath();
  v120 = (_QWORD *)swift_allocObject();
  v120[4] = sub_1B1AE871C;
  v120[5] = v118;
  v120[2] = sub_1B1AE8754;
  v120[3] = v118;
  v120[6] = v118;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v121 = sub_1B1ADA6D8(0x6576697373696D65, 0xED0000726F6C6F43, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v119, 6, 0, (uint64_t)v120, v118, 0, 0,
           0,
           v85,
           0);
  swift_release();
  swift_release();
  v363[26] = v121;
  v122 = swift_getKeyPath();
  v123 = swift_getKeyPath();
  v124 = swift_getKeyPath();
  v125 = (_QWORD *)swift_allocObject();
  v125[4] = sub_1B1AE8394;
  v125[5] = v124;
  v125[2] = sub_1B1AE83C4;
  v125[3] = v124;
  v125[6] = v124;
  swift_allocObject();
  swift_retain_n();
  v126 = sub_1B1ADBDA8(0xD000000000000011, 0x80000001B232CC70, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v125, v124, 0, 0,
           0,
           v85,
           0,
           (uint64_t)sub_1B1AE9404);
  swift_release();
  v127 = (_QWORD *)swift_allocObject();
  v127[4] = sub_1B1AE87C0;
  v127[5] = v122;
  v127[2] = sub_1B1AE87F0;
  v127[3] = v122;
  v127[6] = v122;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  swift_retain();
  v128 = MEMORY[0x1E0DEE9D8];
  v129 = sub_1B1ADAAB4(0xD000000000000011, 0x80000001B232CC70, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v123, 1, 0, (uint64_t)v127, v122, 0, 0,
           0,
           MEMORY[0x1E0DEE9D8],
           v126);
  swift_release();
  swift_release();
  swift_release();
  v363[27] = v129;
  v130 = swift_getKeyPath();
  v131 = swift_getKeyPath();
  v132 = swift_getKeyPath();
  v133 = (_QWORD *)swift_allocObject();
  v133[4] = sub_1B1AE8394;
  v133[5] = v132;
  v133[2] = sub_1B1AE83C4;
  v133[3] = v132;
  v133[6] = v132;
  swift_allocObject();
  swift_retain_n();
  v134 = sub_1B1ADBDA8(0xD000000000000011, 0x80000001B232CC90, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v133, v132, 0, 0,
           0,
           v128,
           0,
           (uint64_t)sub_1B1AE9404);
  swift_release();
  v135 = (_QWORD *)swift_allocObject();
  v135[4] = sub_1B1AE87C0;
  v135[5] = v130;
  v135[2] = sub_1B1AE87F0;
  v135[3] = v130;
  v135[6] = v130;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  swift_retain();
  v136 = sub_1B1ADAAB4(0xD000000000000011, 0x80000001B232CC90, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v131, 1, 0, (uint64_t)v135, v130, 0, 0,
           0,
           MEMORY[0x1E0DEE9D8],
           v134);
  swift_release();
  swift_release();
  swift_release();
  v363[28] = v136;
  v137 = swift_getKeyPath();
  v138 = swift_getKeyPath();
  v139 = swift_getKeyPath();
  v140 = (_QWORD *)swift_allocObject();
  v140[4] = sub_1B1AE8394;
  v140[5] = v139;
  v140[2] = sub_1B1AE83C4;
  v140[3] = v139;
  v140[6] = v139;
  swift_allocObject();
  swift_retain_n();
  v141 = sub_1B1ADBDA8(0xD000000000000011, 0x80000001B232CCB0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v140, v139, 0, 0,
           0,
           MEMORY[0x1E0DEE9D8],
           0,
           (uint64_t)sub_1B1AE9404);
  swift_release();
  v142 = (_QWORD *)swift_allocObject();
  v142[4] = sub_1B1AE8860;
  v142[5] = v137;
  v142[2] = sub_1B1AE8890;
  v142[3] = v137;
  v142[6] = v137;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  swift_retain();
  v143 = MEMORY[0x1E0DEE9D8];
  v144 = sub_1B1ADAE70(0xD000000000000011, 0x80000001B232CCB0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v138, 1, 0, (uint64_t)v142, v137, 0, 0,
           0,
           MEMORY[0x1E0DEE9D8],
           v141);
  swift_release();
  swift_release();
  swift_release();
  v363[29] = v144;
  v145 = swift_getKeyPath();
  v146 = swift_getKeyPath();
  v147 = swift_getKeyPath();
  v148 = (_QWORD *)swift_allocObject();
  v148[4] = sub_1B1AE8394;
  v148[5] = v147;
  v148[2] = sub_1B1AE83C4;
  v148[3] = v147;
  v148[6] = v147;
  swift_allocObject();
  swift_retain_n();
  v149 = sub_1B1ADBDA8(0x6576697373696D65, 0xED00005370617257, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v148, v147, 0, 0,
           0,
           v143,
           0,
           (uint64_t)sub_1B1AE9404);
  swift_release();
  v150 = (_QWORD *)swift_allocObject();
  v150[4] = sub_1B1AE88E0;
  v150[5] = v145;
  v150[2] = sub_1B1AE8910;
  v150[3] = v145;
  v150[6] = v145;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  swift_retain();
  v151 = MEMORY[0x1E0DEE9D8];
  v152 = sub_1B1ADB22C(0x6576697373696D65, 0xED00005370617257, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v146, 1, 0, (uint64_t)v150, v145, 0, 0,
           0,
           MEMORY[0x1E0DEE9D8],
           v149,
           (uint64_t)sub_1B1AE8A64);
  swift_release();
  swift_release();
  swift_release();
  v363[30] = v152;
  v153 = swift_getKeyPath();
  v154 = swift_getKeyPath();
  v155 = swift_getKeyPath();
  v156 = (_QWORD *)swift_allocObject();
  v156[4] = sub_1B1AE8394;
  v156[5] = v155;
  v156[2] = sub_1B1AE83C4;
  v156[3] = v155;
  v156[6] = v155;
  swift_allocObject();
  swift_retain_n();
  v157 = sub_1B1ADBDA8(0x6576697373696D65, 0xED00005470617257, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v156, v155, 0, 0,
           0,
           v151,
           0,
           (uint64_t)sub_1B1AE9404);
  swift_release();
  v158 = (_QWORD *)swift_allocObject();
  v158[4] = sub_1B1AE88E0;
  v158[5] = v153;
  v158[2] = sub_1B1AE8910;
  v158[3] = v153;
  v158[6] = v153;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  swift_retain();
  v159 = MEMORY[0x1E0DEE9D8];
  v160 = sub_1B1ADB22C(0x6576697373696D65, 0xED00005470617257, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v154, 1, 0, (uint64_t)v158, v153, 0, 0,
           0,
           MEMORY[0x1E0DEE9D8],
           v157,
           (uint64_t)sub_1B1AE8A64);
  swift_release();
  swift_release();
  swift_release();
  v363[31] = v160;
  v161 = swift_getKeyPath();
  v162 = swift_getKeyPath();
  v163 = (_QWORD *)swift_allocObject();
  v163[4] = sub_1B1AE871C;
  v163[5] = v161;
  v163[2] = sub_1B1AE8754;
  v163[3] = v161;
  v163[6] = v161;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v164 = sub_1B1ADA6D8(0xD000000000000011, 0x80000001B232CCD0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v162, 1, 0, (uint64_t)v163, v161, 0, 0,
           0,
           v159,
           0);
  swift_release();
  swift_release();
  v363[32] = v164;
  v165 = swift_getKeyPath();
  v166 = swift_getKeyPath();
  v167 = (_QWORD *)swift_allocObject();
  v167[4] = sub_1B1AE8448;
  v167[5] = v165;
  v167[2] = sub_1B1AE8478;
  v167[3] = v165;
  v167[6] = v165;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v168 = sub_1B1AD9F50(0xD000000000000010, 0x80000001B232CCF0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v166, 8, 0, (uint64_t)v167, v165, 0, 0,
           256,
           v159,
           0,
           (uint64_t)sub_1B1AE9258);
  swift_release();
  swift_release();
  v363[33] = v168;
  v169 = swift_getKeyPath();
  v170 = swift_getKeyPath();
  v171 = (_QWORD *)swift_allocObject();
  v171[4] = sub_1B1AE8530;
  v171[5] = v169;
  v171[2] = sub_1B1AE8560;
  v171[3] = v169;
  v171[6] = v169;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v172 = sub_1B1ADC904(0xD000000000000012, 0x80000001B232CD10, 0, 0, 0x3FF0000000000000, 0, 0x3F847AE147AE147BLL, 0, 0, 1, 0, 1, v170, 1, 0, (uint64_t)v171, v169, 0, 0,
           0,
           v159,
           0,
           (uint64_t)sub_1B1AE90D8);
  swift_release();
  swift_release();
  v363[34] = v172;
  v173 = swift_getKeyPath();
  v174 = swift_getKeyPath();
  v175 = swift_getKeyPath();
  v176 = (_QWORD *)swift_allocObject();
  v176[4] = sub_1B1AE8394;
  v176[5] = v175;
  v176[2] = sub_1B1AE83C4;
  v176[3] = v175;
  v176[6] = v175;
  swift_allocObject();
  swift_retain_n();
  v177 = sub_1B1ADBDA8(0xD000000000000012, 0x80000001B232CD30, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v176, v175, 0, 0,
           0,
           v159,
           0,
           (uint64_t)sub_1B1AE9404);
  swift_release();
  v178 = (_QWORD *)swift_allocObject();
  v178[4] = sub_1B1AE87C0;
  v178[5] = v173;
  v178[2] = sub_1B1AE87F0;
  v178[3] = v173;
  v178[6] = v173;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  swift_retain();
  v179 = sub_1B1ADAAB4(0xD000000000000012, 0x80000001B232CD30, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v174, 1, 0, (uint64_t)v178, v173, 0, 0,
           0,
           MEMORY[0x1E0DEE9D8],
           v177);
  swift_release();
  swift_release();
  swift_release();
  v363[35] = v179;
  v180 = swift_getKeyPath();
  v181 = swift_getKeyPath();
  v182 = swift_getKeyPath();
  v183 = (_QWORD *)swift_allocObject();
  v183[4] = sub_1B1AE8394;
  v183[5] = v182;
  v183[2] = sub_1B1AE83C4;
  v183[3] = v182;
  v183[6] = v182;
  swift_allocObject();
  swift_retain_n();
  v184 = sub_1B1ADBDA8(0xD000000000000012, 0x80000001B232CD50, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v183, v182, 0, 0,
           0,
           MEMORY[0x1E0DEE9D8],
           0,
           (uint64_t)sub_1B1AE9404);
  swift_release();
  v185 = (_QWORD *)swift_allocObject();
  v185[4] = sub_1B1AE87C0;
  v185[5] = v180;
  v185[2] = sub_1B1AE87F0;
  v185[3] = v180;
  v185[6] = v180;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  swift_retain();
  v186 = sub_1B1ADAAB4(0xD000000000000012, 0x80000001B232CD50, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v181, 1, 0, (uint64_t)v185, v180, 0, 0,
           0,
           MEMORY[0x1E0DEE9D8],
           v184);
  swift_release();
  swift_release();
  swift_release();
  v363[36] = v186;
  v187 = swift_getKeyPath();
  v188 = swift_getKeyPath();
  v189 = swift_getKeyPath();
  v190 = (_QWORD *)swift_allocObject();
  v190[4] = sub_1B1AE8394;
  v190[5] = v189;
  v190[2] = sub_1B1AE83C4;
  v190[3] = v189;
  v190[6] = v189;
  swift_allocObject();
  swift_retain_n();
  v191 = sub_1B1ADBDA8(0xD000000000000012, 0x80000001B232CD70, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v190, v189, 0, 0,
           0,
           MEMORY[0x1E0DEE9D8],
           0,
           (uint64_t)sub_1B1AE9404);
  swift_release();
  v192 = (_QWORD *)swift_allocObject();
  v192[4] = sub_1B1AE8860;
  v192[5] = v187;
  v192[2] = sub_1B1AE8890;
  v192[3] = v187;
  v192[6] = v187;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  swift_retain();
  v193 = MEMORY[0x1E0DEE9D8];
  v194 = sub_1B1ADAE70(0xD000000000000012, 0x80000001B232CD70, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v188, 1, 0, (uint64_t)v192, v187, 0, 0,
           0,
           MEMORY[0x1E0DEE9D8],
           v191);
  swift_release();
  swift_release();
  swift_release();
  v363[37] = v194;
  v195 = swift_getKeyPath();
  v196 = swift_getKeyPath();
  v197 = swift_getKeyPath();
  v198 = (_QWORD *)swift_allocObject();
  v198[4] = sub_1B1AE8394;
  v198[5] = v197;
  v198[2] = sub_1B1AE83C4;
  v198[3] = v197;
  v198[6] = v197;
  swift_allocObject();
  swift_retain_n();
  v199 = sub_1B1ADBDA8(0x73656E6867756F72, 0xEE00537061725773, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v198, v197, 0, 0,
           0,
           v193,
           0,
           (uint64_t)sub_1B1AE9404);
  swift_release();
  v200 = (_QWORD *)swift_allocObject();
  v200[4] = sub_1B1AE88E0;
  v200[5] = v195;
  v200[2] = sub_1B1AE8910;
  v200[3] = v195;
  v200[6] = v195;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  swift_retain();
  v201 = MEMORY[0x1E0DEE9D8];
  v202 = sub_1B1ADB22C(0x73656E6867756F72, 0xEE00537061725773, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v196, 1, 0, (uint64_t)v200, v195, 0, 0,
           0,
           MEMORY[0x1E0DEE9D8],
           v199,
           (uint64_t)sub_1B1AE8A64);
  swift_release();
  swift_release();
  swift_release();
  v363[38] = v202;
  v203 = swift_getKeyPath();
  v204 = swift_getKeyPath();
  v205 = swift_getKeyPath();
  v206 = (_QWORD *)swift_allocObject();
  v206[4] = sub_1B1AE8394;
  v206[5] = v205;
  v206[2] = sub_1B1AE83C4;
  v206[3] = v205;
  v206[6] = v205;
  swift_allocObject();
  swift_retain_n();
  v207 = sub_1B1ADBDA8(0x73656E6867756F72, 0xEE00547061725773, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v206, v205, 0, 0,
           0,
           v201,
           0,
           (uint64_t)sub_1B1AE9404);
  swift_release();
  v208 = (_QWORD *)swift_allocObject();
  v208[4] = sub_1B1AE88E0;
  v208[5] = v203;
  v208[2] = sub_1B1AE8910;
  v208[3] = v203;
  v208[6] = v203;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  swift_retain();
  v209 = sub_1B1ADB22C(0x73656E6867756F72, 0xEE00547061725773, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v204, 1, 0, (uint64_t)v208, v203, 0, 0,
           0,
           v201,
           v207,
           (uint64_t)sub_1B1AE8A64);
  swift_release();
  swift_release();
  swift_release();
  v363[39] = v209;
  v210 = swift_getKeyPath();
  v211 = swift_getKeyPath();
  v212 = (_QWORD *)swift_allocObject();
  v212[4] = sub_1B1AE871C;
  v212[5] = v210;
  v212[2] = sub_1B1AE8754;
  v212[3] = v210;
  v212[6] = v210;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v213 = sub_1B1ADA6D8(0xD000000000000012, 0x80000001B232CD90, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v211, 1, 0, (uint64_t)v212, v210, 0, 0,
           0,
           v201,
           0);
  swift_release();
  swift_release();
  v363[40] = v213;
  v214 = swift_getKeyPath();
  v215 = swift_getKeyPath();
  v216 = (_QWORD *)swift_allocObject();
  v216[4] = sub_1B1AE8448;
  v216[5] = v214;
  v216[2] = sub_1B1AE8478;
  v216[3] = v214;
  v216[6] = v214;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v217 = sub_1B1AD9F50(0xD000000000000010, 0x80000001B232CDB0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v215, 8, 0, (uint64_t)v216, v214, 0, 0,
           256,
           v201,
           0,
           (uint64_t)sub_1B1AE9258);
  swift_release();
  swift_release();
  v363[41] = v217;
  v218 = swift_getKeyPath();
  v219 = swift_getKeyPath();
  v220 = (_QWORD *)swift_allocObject();
  v220[4] = sub_1B1AE8530;
  v220[5] = v218;
  v220[2] = sub_1B1AE8560;
  v220[3] = v218;
  v220[6] = v218;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v221 = sub_1B1ADC904(0xD000000000000012, 0x80000001B232CDD0, 0, 0, 0x3FF0000000000000, 0, 0x3F847AE147AE147BLL, 0, 0, 1, 0, 1, v219, 1, 0, (uint64_t)v220, v218, 0, 0,
           0,
           v201,
           0,
           (uint64_t)sub_1B1AE90D8);
  swift_release();
  swift_release();
  v363[42] = v221;
  v222 = swift_getKeyPath();
  v223 = swift_getKeyPath();
  v224 = swift_getKeyPath();
  v225 = (_QWORD *)swift_allocObject();
  v225[4] = sub_1B1AE8394;
  v225[5] = v224;
  v225[2] = sub_1B1AE83C4;
  v225[3] = v224;
  v225[6] = v224;
  swift_allocObject();
  swift_retain_n();
  v226 = sub_1B1ADBDA8(0xD000000000000012, 0x80000001B232CDF0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v225, v224, 0, 0,
           0,
           MEMORY[0x1E0DEE9D8],
           0,
           (uint64_t)sub_1B1AE9404);
  swift_release();
  v227 = (_QWORD *)swift_allocObject();
  v227[4] = sub_1B1AE87C0;
  v227[5] = v222;
  v227[2] = sub_1B1AE87F0;
  v227[3] = v222;
  v227[6] = v222;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  swift_retain();
  v228 = sub_1B1ADAAB4(0xD000000000000012, 0x80000001B232CDF0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v223, 1, 0, (uint64_t)v227, v222, 0, 0,
           0,
           MEMORY[0x1E0DEE9D8],
           v226);
  swift_release();
  swift_release();
  swift_release();
  v363[43] = v228;
  v229 = swift_getKeyPath();
  v230 = swift_getKeyPath();
  v231 = swift_getKeyPath();
  v232 = (_QWORD *)swift_allocObject();
  v232[4] = sub_1B1AE8394;
  v232[5] = v231;
  v232[2] = sub_1B1AE83C4;
  v232[3] = v231;
  v232[6] = v231;
  swift_allocObject();
  swift_retain_n();
  v233 = MEMORY[0x1E0DEE9D8];
  v234 = sub_1B1ADBDA8(0xD000000000000012, 0x80000001B232CE10, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v232, v231, 0, 0,
           0,
           MEMORY[0x1E0DEE9D8],
           0,
           (uint64_t)sub_1B1AE9404);
  swift_release();
  v235 = (_QWORD *)swift_allocObject();
  v235[4] = sub_1B1AE87C0;
  v235[5] = v229;
  v235[2] = sub_1B1AE87F0;
  v235[3] = v229;
  v235[6] = v229;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  swift_retain();
  v236 = sub_1B1ADAAB4(0xD000000000000012, 0x80000001B232CE10, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v230, 1, 0, (uint64_t)v235, v229, 0, 0,
           0,
           v233,
           v234);
  swift_release();
  swift_release();
  swift_release();
  v363[44] = v236;
  v237 = swift_getKeyPath();
  v238 = swift_getKeyPath();
  v239 = swift_getKeyPath();
  v240 = (_QWORD *)swift_allocObject();
  v240[4] = sub_1B1AE8394;
  v240[5] = v239;
  v240[2] = sub_1B1AE83C4;
  v240[3] = v239;
  v240[6] = v239;
  swift_allocObject();
  swift_retain_n();
  v241 = sub_1B1ADBDA8(0xD000000000000012, 0x80000001B232CE30, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v240, v239, 0, 0,
           0,
           MEMORY[0x1E0DEE9D8],
           0,
           (uint64_t)sub_1B1AE9404);
  swift_release();
  v242 = (_QWORD *)swift_allocObject();
  v242[4] = sub_1B1AE8860;
  v242[5] = v237;
  v242[2] = sub_1B1AE8890;
  v242[3] = v237;
  v242[6] = v237;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  swift_retain();
  v243 = sub_1B1ADAE70(0xD000000000000012, 0x80000001B232CE30, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v238, 1, 0, (uint64_t)v242, v237, 0, 0,
           0,
           MEMORY[0x1E0DEE9D8],
           v241);
  swift_release();
  swift_release();
  swift_release();
  v363[45] = v243;
  v244 = swift_getKeyPath();
  v245 = swift_getKeyPath();
  v246 = swift_getKeyPath();
  v247 = (_QWORD *)swift_allocObject();
  v247[4] = sub_1B1AE8394;
  v247[5] = v246;
  v247[2] = sub_1B1AE83C4;
  v247[3] = v246;
  v247[6] = v246;
  swift_allocObject();
  swift_retain_n();
  v248 = sub_1B1ADBDA8(0x73656E6C6174656DLL, 0xEE00537061725773, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v247, v246, 0, 0,
           0,
           MEMORY[0x1E0DEE9D8],
           0,
           (uint64_t)sub_1B1AE9404);
  swift_release();
  v249 = (_QWORD *)swift_allocObject();
  v249[4] = sub_1B1AE88E0;
  v249[5] = v244;
  v249[2] = sub_1B1AE8910;
  v249[3] = v244;
  v249[6] = v244;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  swift_retain();
  v250 = sub_1B1ADB22C(0x73656E6C6174656DLL, 0xEE00537061725773, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v245, 1, 0, (uint64_t)v249, v244, 0, 0,
           0,
           MEMORY[0x1E0DEE9D8],
           v248,
           (uint64_t)sub_1B1AE8A64);
  swift_release();
  swift_release();
  swift_release();
  v363[46] = v250;
  v251 = swift_getKeyPath();
  v252 = swift_getKeyPath();
  v253 = swift_getKeyPath();
  v254 = (_QWORD *)swift_allocObject();
  v254[4] = sub_1B1AE8394;
  v254[5] = v253;
  v254[2] = sub_1B1AE83C4;
  v254[3] = v253;
  v254[6] = v253;
  swift_allocObject();
  swift_retain_n();
  v255 = MEMORY[0x1E0DEE9D8];
  v256 = sub_1B1ADBDA8(0x73656E6C6174656DLL, 0xEE00547061725773, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v254, v253, 0, 0,
           0,
           MEMORY[0x1E0DEE9D8],
           0,
           (uint64_t)sub_1B1AE9404);
  swift_release();
  v257 = (_QWORD *)swift_allocObject();
  v257[4] = sub_1B1AE88E0;
  v257[5] = v251;
  v257[2] = sub_1B1AE8910;
  v257[3] = v251;
  v257[6] = v251;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  swift_retain();
  v258 = sub_1B1ADB22C(0x73656E6C6174656DLL, 0xEE00547061725773, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v252, 1, 0, (uint64_t)v257, v251, 0, 0,
           0,
           v255,
           v256,
           (uint64_t)sub_1B1AE8A64);
  swift_release();
  swift_release();
  swift_release();
  v363[47] = v258;
  v259 = swift_getKeyPath();
  v260 = swift_getKeyPath();
  v261 = (_QWORD *)swift_allocObject();
  v261[4] = sub_1B1AE871C;
  v261[5] = v259;
  v261[2] = sub_1B1AE8754;
  v261[3] = v259;
  v261[6] = v259;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v262 = sub_1B1ADA6D8(0xD000000000000012, 0x80000001B232CE50, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v260, 1, 0, (uint64_t)v261, v259, 0, 0,
           0,
           v255,
           0);
  swift_release();
  swift_release();
  v363[48] = v262;
  v263 = swift_getKeyPath();
  v264 = swift_getKeyPath();
  v265 = (_QWORD *)swift_allocObject();
  v265[4] = sub_1B1AE8448;
  v265[5] = v263;
  v265[2] = sub_1B1AE8478;
  v265[3] = v263;
  v265[6] = v263;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v266 = sub_1B1AD9F50(0x65546C616D726F6ELL, 0xED00006572757478, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v264, 8, 0, (uint64_t)v265, v263, 0, 0,
           256,
           v255,
           0,
           (uint64_t)sub_1B1AE9258);
  swift_release();
  swift_release();
  v363[49] = v266;
  v267 = swift_getKeyPath();
  v268 = swift_getKeyPath();
  v269 = (_QWORD *)swift_allocObject();
  v269[4] = sub_1B1AE8530;
  v269[5] = v267;
  v269[2] = sub_1B1AE8560;
  v269[3] = v267;
  v269[6] = v267;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v270 = sub_1B1ADC904(0x6E496C616D726F6ELL, 0xEF797469736E6574, 0, 0, 0x3FF0000000000000, 0, 0x3F847AE147AE147BLL, 0, 0, 1, 0, 1, v268, 1, 0, (uint64_t)v269, v267, 0, 0,
           0,
           v255,
           0,
           (uint64_t)sub_1B1AE90D8);
  swift_release();
  swift_release();
  v363[50] = v270;
  v271 = swift_getKeyPath();
  v272 = swift_getKeyPath();
  v273 = swift_getKeyPath();
  v274 = (_QWORD *)swift_allocObject();
  v274[4] = sub_1B1AE8394;
  v274[5] = v273;
  v274[2] = sub_1B1AE83C4;
  v274[3] = v273;
  v274[6] = v273;
  swift_allocObject();
  swift_retain_n();
  v275 = sub_1B1ADBDA8(0x694D6C616D726F6ELL, 0xEF7265746C69466ELL, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v274, v273, 0, 0,
           0,
           v255,
           0,
           (uint64_t)sub_1B1AE9404);
  swift_release();
  v276 = (_QWORD *)swift_allocObject();
  v276[4] = sub_1B1AE87C0;
  v276[5] = v271;
  v276[2] = sub_1B1AE87F0;
  v276[3] = v271;
  v276[6] = v271;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  swift_retain();
  v277 = sub_1B1ADAAB4(0x694D6C616D726F6ELL, 0xEF7265746C69466ELL, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v272, 1, 0, (uint64_t)v276, v271, 0, 0,
           0,
           MEMORY[0x1E0DEE9D8],
           v275);
  swift_release();
  swift_release();
  swift_release();
  v363[51] = v277;
  v278 = swift_getKeyPath();
  v279 = swift_getKeyPath();
  v280 = swift_getKeyPath();
  v281 = (_QWORD *)swift_allocObject();
  v281[4] = sub_1B1AE8394;
  v281[5] = v280;
  v281[2] = sub_1B1AE83C4;
  v281[3] = v280;
  v281[6] = v280;
  swift_allocObject();
  swift_retain_n();
  v282 = MEMORY[0x1E0DEE9D8];
  v283 = sub_1B1ADBDA8(0x614D6C616D726F6ELL, 0xEF7265746C694667, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v281, v280, 0, 0,
           0,
           MEMORY[0x1E0DEE9D8],
           0,
           (uint64_t)sub_1B1AE9404);
  swift_release();
  v284 = (_QWORD *)swift_allocObject();
  v284[4] = sub_1B1AE87C0;
  v284[5] = v278;
  v284[2] = sub_1B1AE87F0;
  v284[3] = v278;
  v284[6] = v278;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  swift_retain();
  v285 = sub_1B1ADAAB4(0x614D6C616D726F6ELL, 0xEF7265746C694667, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v279, 1, 0, (uint64_t)v284, v278, 0, 0,
           0,
           v282,
           v283);
  swift_release();
  swift_release();
  swift_release();
  v363[52] = v285;
  v286 = swift_getKeyPath();
  v287 = swift_getKeyPath();
  v288 = swift_getKeyPath();
  v289 = (_QWORD *)swift_allocObject();
  v289[4] = sub_1B1AE8394;
  v289[5] = v288;
  v289[2] = sub_1B1AE83C4;
  v289[3] = v288;
  v289[6] = v288;
  swift_allocObject();
  swift_retain_n();
  v290 = sub_1B1ADBDA8(0x694D6C616D726F6ELL, 0xEF7265746C694670, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v289, v288, 0, 0,
           0,
           v282,
           0,
           (uint64_t)sub_1B1AE9404);
  swift_release();
  v291 = (_QWORD *)swift_allocObject();
  v291[4] = sub_1B1AE8860;
  v291[5] = v286;
  v291[2] = sub_1B1AE8890;
  v291[3] = v286;
  v291[6] = v286;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  swift_retain();
  v292 = sub_1B1ADAE70(0x694D6C616D726F6ELL, 0xEF7265746C694670, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v287, 1, 0, (uint64_t)v291, v286, 0, 0,
           0,
           MEMORY[0x1E0DEE9D8],
           v290);
  swift_release();
  swift_release();
  swift_release();
  v363[53] = v292;
  v293 = swift_getKeyPath();
  v294 = swift_getKeyPath();
  v295 = swift_getKeyPath();
  v296 = (_QWORD *)swift_allocObject();
  v296[4] = sub_1B1AE8394;
  v296[5] = v295;
  v296[2] = sub_1B1AE83C4;
  v296[3] = v295;
  v296[6] = v295;
  swift_allocObject();
  swift_retain_n();
  v297 = sub_1B1ADBDA8(0x72576C616D726F6ELL, 0xEB00000000537061, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v296, v295, 0, 0,
           0,
           MEMORY[0x1E0DEE9D8],
           0,
           (uint64_t)sub_1B1AE9404);
  swift_release();
  v298 = (_QWORD *)swift_allocObject();
  v298[4] = sub_1B1AE88E0;
  v298[5] = v293;
  v298[2] = sub_1B1AE8910;
  v298[3] = v293;
  v298[6] = v293;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  swift_retain();
  v299 = sub_1B1ADB22C(0x72576C616D726F6ELL, 0xEB00000000537061, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v294, 1, 0, (uint64_t)v298, v293, 0, 0,
           0,
           MEMORY[0x1E0DEE9D8],
           v297,
           (uint64_t)sub_1B1AE8A64);
  swift_release();
  swift_release();
  swift_release();
  v363[54] = v299;
  v300 = swift_getKeyPath();
  v301 = swift_getKeyPath();
  v302 = swift_getKeyPath();
  v303 = (_QWORD *)swift_allocObject();
  v303[4] = sub_1B1AE8394;
  v303[5] = v302;
  v303[2] = sub_1B1AE83C4;
  v303[3] = v302;
  v303[6] = v302;
  swift_allocObject();
  swift_retain_n();
  v304 = sub_1B1ADBDA8(0x72576C616D726F6ELL, 0xEB00000000547061, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v303, v302, 0, 0,
           0,
           MEMORY[0x1E0DEE9D8],
           0,
           (uint64_t)sub_1B1AE9404);
  swift_release();
  v305 = (_QWORD *)swift_allocObject();
  v305[4] = sub_1B1AE88E0;
  v305[5] = v300;
  v305[2] = sub_1B1AE8910;
  v305[3] = v300;
  v305[6] = v300;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  swift_retain();
  v306 = MEMORY[0x1E0DEE9D8];
  v307 = sub_1B1ADB22C(0x72576C616D726F6ELL, 0xEB00000000547061, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v301, 1, 0, (uint64_t)v305, v300, 0, 0,
           0,
           MEMORY[0x1E0DEE9D8],
           v304,
           (uint64_t)sub_1B1AE8A64);
  swift_release();
  swift_release();
  swift_release();
  v363[55] = v307;
  v308 = swift_getKeyPath();
  v309 = swift_getKeyPath();
  v310 = (_QWORD *)swift_allocObject();
  v310[4] = sub_1B1AE871C;
  v310[5] = v308;
  v310[2] = sub_1B1AE8754;
  v310[3] = v308;
  v310[6] = v308;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v311 = sub_1B1ADA6D8(0x63536C616D726F6ELL, 0xEF73616942656C61, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v309, 1, 0, (uint64_t)v310, v308, 0, 0,
           0,
           v306,
           0);
  swift_release();
  swift_release();
  v363[56] = v311;
  v312 = swift_getKeyPath();
  v313 = swift_getKeyPath();
  v314 = (_QWORD *)swift_allocObject();
  v314[4] = sub_1B1AE8448;
  v314[5] = v312;
  v314[2] = sub_1B1AE8478;
  v314[3] = v312;
  v314[6] = v312;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v315 = sub_1B1AD9F50(0xD000000000000010, 0x80000001B232CE70, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v313, 8, 0, (uint64_t)v314, v312, 0, 0,
           256,
           v306,
           0,
           (uint64_t)sub_1B1AE9258);
  swift_release();
  swift_release();
  v363[57] = v315;
  v316 = swift_getKeyPath();
  v317 = swift_getKeyPath();
  v318 = (_QWORD *)swift_allocObject();
  v318[4] = sub_1B1AE8530;
  v318[5] = v316;
  v318[2] = sub_1B1AE8560;
  v318[3] = v316;
  v318[6] = v316;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v319 = v306;
  v320 = sub_1B1ADC904(0xD000000000000012, 0x80000001B232CE90, 0, 0, 0x3FF0000000000000, 0, 0x3F847AE147AE147BLL, 0, 0, 1, 0, 1, v317, 1, 0, (uint64_t)v318, v316, 0, 0,
           0,
           v306,
           0,
           (uint64_t)sub_1B1AE90D8);
  swift_release();
  swift_release();
  v363[58] = v320;
  v321 = swift_getKeyPath();
  v322 = swift_getKeyPath();
  v323 = swift_getKeyPath();
  v324 = (_QWORD *)swift_allocObject();
  v324[4] = sub_1B1AE8394;
  v324[5] = v323;
  v324[2] = sub_1B1AE83C4;
  v324[3] = v323;
  v324[6] = v323;
  swift_allocObject();
  swift_retain_n();
  v325 = sub_1B1ADBDA8(0xD000000000000012, 0x80000001B232CEB0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v324, v323, 0, 0,
           0,
           v319,
           0,
           (uint64_t)sub_1B1AE9404);
  swift_release();
  v326 = (_QWORD *)swift_allocObject();
  v326[4] = sub_1B1AE87C0;
  v326[5] = v321;
  v326[2] = sub_1B1AE87F0;
  v326[3] = v321;
  v326[6] = v321;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  swift_retain();
  v327 = sub_1B1ADAAB4(0xD000000000000012, 0x80000001B232CEB0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v322, 1, 0, (uint64_t)v326, v321, 0, 0,
           0,
           MEMORY[0x1E0DEE9D8],
           v325);
  swift_release();
  swift_release();
  swift_release();
  v363[59] = v327;
  v328 = swift_getKeyPath();
  v329 = swift_getKeyPath();
  v330 = swift_getKeyPath();
  v331 = (_QWORD *)swift_allocObject();
  v331[4] = sub_1B1AE8394;
  v331[5] = v330;
  v331[2] = sub_1B1AE83C4;
  v331[3] = v330;
  v331[6] = v330;
  swift_allocObject();
  swift_retain_n();
  v332 = MEMORY[0x1E0DEE9D8];
  v333 = sub_1B1ADBDA8(0xD000000000000012, 0x80000001B232CED0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v331, v330, 0, 0,
           0,
           MEMORY[0x1E0DEE9D8],
           0,
           (uint64_t)sub_1B1AE9404);
  swift_release();
  v334 = (_QWORD *)swift_allocObject();
  v334[4] = sub_1B1AE87C0;
  v334[5] = v328;
  v334[2] = sub_1B1AE87F0;
  v334[3] = v328;
  v334[6] = v328;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  swift_retain();
  v335 = sub_1B1ADAAB4(0xD000000000000012, 0x80000001B232CED0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v329, 1, 0, (uint64_t)v334, v328, 0, 0,
           0,
           v332,
           v333);
  swift_release();
  swift_release();
  swift_release();
  v363[60] = v335;
  v336 = swift_getKeyPath();
  v337 = swift_getKeyPath();
  v338 = swift_getKeyPath();
  v339 = (_QWORD *)swift_allocObject();
  v339[4] = sub_1B1AE8394;
  v339[5] = v338;
  v339[2] = sub_1B1AE83C4;
  v339[3] = v338;
  v339[6] = v338;
  swift_allocObject();
  swift_retain_n();
  v340 = sub_1B1ADBDA8(0xD000000000000012, 0x80000001B232CEF0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v339, v338, 0, 0,
           0,
           MEMORY[0x1E0DEE9D8],
           0,
           (uint64_t)sub_1B1AE9404);
  swift_release();
  v341 = (_QWORD *)swift_allocObject();
  v341[4] = sub_1B1AE8860;
  v341[5] = v336;
  v341[2] = sub_1B1AE8890;
  v341[3] = v336;
  v341[6] = v336;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  swift_retain();
  v342 = sub_1B1ADAE70(0xD000000000000012, 0x80000001B232CEF0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v337, 1, 0, (uint64_t)v341, v336, 0, 0,
           0,
           MEMORY[0x1E0DEE9D8],
           v340);
  swift_release();
  swift_release();
  swift_release();
  v363[61] = v342;
  v343 = swift_getKeyPath();
  v344 = swift_getKeyPath();
  v345 = swift_getKeyPath();
  v346 = (_QWORD *)swift_allocObject();
  v346[4] = sub_1B1AE8394;
  v346[5] = v345;
  v346[2] = sub_1B1AE83C4;
  v346[3] = v345;
  v346[6] = v345;
  swift_allocObject();
  swift_retain_n();
  v347 = sub_1B1ADBDA8(0x6F6973756C63636FLL, 0xEE0053706172576ELL, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v346, v345, 0, 0,
           0,
           MEMORY[0x1E0DEE9D8],
           0,
           (uint64_t)sub_1B1AE9404);
  swift_release();
  v348 = (_QWORD *)swift_allocObject();
  v348[4] = sub_1B1AE88E0;
  v348[5] = v343;
  v348[2] = sub_1B1AE8910;
  v348[3] = v343;
  v348[6] = v343;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  swift_retain();
  v349 = sub_1B1ADB22C(0x6F6973756C63636FLL, 0xEE0053706172576ELL, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v344, 1, 0, (uint64_t)v348, v343, 0, 0,
           0,
           MEMORY[0x1E0DEE9D8],
           v347,
           (uint64_t)sub_1B1AE8A64);
  swift_release();
  swift_release();
  swift_release();
  v363[62] = v349;
  v350 = swift_getKeyPath();
  v351 = swift_getKeyPath();
  v352 = swift_getKeyPath();
  v353 = (_QWORD *)swift_allocObject();
  v353[4] = sub_1B1AE8394;
  v353[5] = v352;
  v353[2] = sub_1B1AE83C4;
  v353[3] = v352;
  v353[6] = v352;
  swift_allocObject();
  swift_retain_n();
  v354 = MEMORY[0x1E0DEE9D8];
  v355 = sub_1B1ADBDA8(0x6F6973756C63636FLL, 0xEE0054706172576ELL, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v353, v352, 0, 0,
           0,
           MEMORY[0x1E0DEE9D8],
           0,
           (uint64_t)sub_1B1AE9404);
  swift_release();
  v356 = (_QWORD *)swift_allocObject();
  v356[4] = sub_1B1AE88E0;
  v356[5] = v350;
  v356[2] = sub_1B1AE8910;
  v356[3] = v350;
  v356[6] = v350;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  swift_retain();
  v357 = sub_1B1ADB22C(0x6F6973756C63636FLL, 0xEE0054706172576ELL, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v351, 1, 0, (uint64_t)v356, v350, 0, 0,
           0,
           v354,
           v355,
           (uint64_t)sub_1B1AE8A64);
  swift_release();
  swift_release();
  swift_release();
  v363[63] = v357;
  v358 = swift_getKeyPath();
  v359 = swift_getKeyPath();
  v360 = (_QWORD *)swift_allocObject();
  v360[4] = sub_1B1AE871C;
  v360[5] = v358;
  v360[2] = sub_1B1AE8754;
  v360[3] = v358;
  v360[6] = v358;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v361 = sub_1B1ADA6D8(0xD000000000000012, 0x80000001B232CF10, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v359, 1, 0, (uint64_t)v360, v358, 0, 0,
           0,
           v354,
           0);
  swift_release();
  swift_release();
  v363[64] = v361;
  result = sub_1B2228AD0();
  qword_1EEFD4FA0 = (uint64_t)v363;
  return result;
}

uint64_t sub_1B1A37E50()
{
  unsigned __int8 *v0;

  return *v0;
}

BOOL sub_1B1A37E58()
{
  unsigned __int8 *v0;

  return *v0 == 2;
}

uint64_t sub_1B1A37E68()
{
  uint64_t v0;
  int v2;
  unsigned int v3;
  char v4;

  sub_1B1AE6738((int *)(v0 + 40), (uint64_t)&v2);
  sub_1B1AE6738(&v2, (uint64_t)&v3);
  if (v4)
    return v3;
  else
    return 3;
}

uint64_t sub_1B1A37EAC(uint64_t result)
{
  uint64_t v1;

  if (result == 3)
  {
    if ((*(_BYTE *)(v1 + 44) & 1) != 0)
    {
      *(_DWORD *)(v1 + 40) = 1056964608;
      *(_BYTE *)(v1 + 44) = 0;
    }
  }
  else
  {
    if (result == 2)
      *(_DWORD *)(v1 + 40) = 2;
    else
      *(_DWORD *)(v1 + 40) = result == 1;
    *(_BYTE *)(v1 + 44) = 1;
  }
  return result;
}

uint64_t sub_1B1A37F04()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 72);
}

_QWORD *sub_1B1A37F0C(_QWORD *result, uint64_t a2)
{
  if ((*result & 0x8000000000000000) != 0)
  {
    result = (_QWORD *)sub_1B222967C();
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 72) = *result;
  }
  return result;
}

uint64_t sub_1B1A37F78()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 80);
}

_QWORD *sub_1B1A37F80(_QWORD *result, uint64_t a2)
{
  if ((*result & 0x8000000000000000) != 0)
  {
    result = (_QWORD *)sub_1B222967C();
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 80) = *result;
  }
  return result;
}

uint64_t sub_1B1A37FEC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  __int128 v5;

  v3 = *(_QWORD *)(a1 + 24);
  if (v3 && object_getClass(*(id *)(a1 + 24)) == (Class)_TtC3VFX16PrelitParameters)
  {
    result = swift_unknownObjectRetain();
  }
  else
  {
    type metadata accessor for PrelitParameters();
    result = swift_allocObject();
    v3 = result;
    *(_QWORD *)&v5 = 0xFFFFFFFFLL;
    *((_QWORD *)&v5 + 1) = 0xFFFFFFFFLL;
    *(_OWORD *)(result + 16) = v5;
    *(_BYTE *)(result + 32) = 0;
  }
  *a2 = v3;
  return result;
}

uint64_t sub_1B1A3805C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  if (v1 && object_getClass(*(id *)(v0 + 24)) == (Class)_TtC3VFX13PBRParameters)
  {
    swift_unknownObjectRetain();
  }
  else
  {
    type metadata accessor for PBRParameters();
    v1 = swift_allocObject();
    *(_OWORD *)(v1 + 16) = xmmword_1B226E4E0;
    *(_QWORD *)(v1 + 32) = 0xFFFFFFFFLL;
    *(_DWORD *)(v1 + 40) = 16777473;
    *(_BYTE *)(v1 + 44) = 1;
    *(_OWORD *)(v1 + 48) = xmmword_1B2244EC0;
    *(_QWORD *)(v1 + 64) = 0;
    *(_QWORD *)(v1 + 72) = 0;
    *(_QWORD *)(v1 + 80) = 0xFFFFFFFFLL;
    *(_DWORD *)(v1 + 88) = 16777473;
    *(_BYTE *)(v1 + 92) = 1;
    *(_OWORD *)(v1 + 96) = xmmword_1B2244EC0;
    *(_QWORD *)(v1 + 112) = 0xFFFFFFFFLL;
    *(_DWORD *)(v1 + 120) = 16777473;
    *(_BYTE *)(v1 + 124) = 1;
    *(_DWORD *)(v1 + 128) = 1056964608;
    *(_OWORD *)(v1 + 144) = xmmword_1B2244EC0;
    *(_QWORD *)(v1 + 160) = 0xFFFFFFFFLL;
    *(_DWORD *)(v1 + 168) = 16777473;
    *(_BYTE *)(v1 + 172) = 1;
    *(_DWORD *)(v1 + 176) = 0;
    *(_OWORD *)(v1 + 192) = xmmword_1B2244EC0;
    *(_QWORD *)(v1 + 208) = 0xFFFFFFFFLL;
    *(_DWORD *)(v1 + 216) = 16777473;
    *(_BYTE *)(v1 + 220) = 1;
    *(_DWORD *)(v1 + 224) = 1065353216;
    *(_OWORD *)(v1 + 240) = xmmword_1B2244EC0;
    *(_QWORD *)(v1 + 256) = 0xFFFFFFFFLL;
    *(_DWORD *)(v1 + 264) = 16777473;
    *(_BYTE *)(v1 + 268) = 1;
    *(_DWORD *)(v1 + 272) = 1065353216;
    *(_OWORD *)(v1 + 288) = xmmword_1B2244EC0;
    *(_WORD *)(v1 + 304) = 0;
  }
  return v1;
}

uint64_t sub_1B1A38160@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 24);
  if (v3 && object_getClass(*(id *)(a1 + 24)) == (Class)_TtC3VFX13PBRParameters)
  {
    result = swift_unknownObjectRetain();
  }
  else
  {
    type metadata accessor for PBRParameters();
    result = swift_allocObject();
    v3 = result;
    *(_OWORD *)(result + 16) = xmmword_1B226E4E0;
    *(_QWORD *)(result + 32) = 0xFFFFFFFFLL;
    *(_DWORD *)(result + 40) = 16777473;
    *(_BYTE *)(result + 44) = 1;
    *(_OWORD *)(result + 48) = xmmword_1B2244EC0;
    *(_QWORD *)(result + 64) = 0;
    *(_QWORD *)(result + 72) = 0;
    *(_QWORD *)(result + 80) = 0xFFFFFFFFLL;
    *(_DWORD *)(result + 88) = 16777473;
    *(_BYTE *)(result + 92) = 1;
    *(_OWORD *)(result + 96) = xmmword_1B2244EC0;
    *(_QWORD *)(result + 112) = 0xFFFFFFFFLL;
    *(_DWORD *)(result + 120) = 16777473;
    *(_BYTE *)(result + 124) = 1;
    *(_DWORD *)(result + 128) = 1056964608;
    *(_OWORD *)(result + 144) = xmmword_1B2244EC0;
    *(_QWORD *)(result + 160) = 0xFFFFFFFFLL;
    *(_DWORD *)(result + 168) = 16777473;
    *(_BYTE *)(result + 172) = 1;
    *(_DWORD *)(result + 176) = 0;
    *(_OWORD *)(result + 192) = xmmword_1B2244EC0;
    *(_QWORD *)(result + 208) = 0xFFFFFFFFLL;
    *(_DWORD *)(result + 216) = 16777473;
    *(_BYTE *)(result + 220) = 1;
    *(_DWORD *)(result + 224) = 1065353216;
    *(_OWORD *)(result + 240) = xmmword_1B2244EC0;
    *(_QWORD *)(result + 256) = 0xFFFFFFFFLL;
    *(_DWORD *)(result + 264) = 16777473;
    *(_BYTE *)(result + 268) = 1;
    *(_DWORD *)(result + 272) = 1065353216;
    *(_OWORD *)(result + 288) = xmmword_1B2244EC0;
    *(_WORD *)(result + 304) = 0;
  }
  *a2 = v3;
  return result;
}

BOOL sub_1B1A38268()
{
  _BYTE *v0;

  return *v0 == 0;
}

BOOL sub_1B1A38278()
{
  uint64_t v0;
  uint64_t v2;
  int v3;
  int v4;

  if (*(_BYTE *)v0)
    return 0;
  v2 = *(_QWORD *)(v0 + 24);
  if (v2 && object_getClass(*(id *)(v0 + 24)) == (Class)_TtC3VFX13PBRParameters)
  {
    swift_unknownObjectRetain();
  }
  else
  {
    type metadata accessor for PBRParameters();
    v2 = swift_allocObject();
    *(_OWORD *)(v2 + 16) = xmmword_1B226E4E0;
    *(_QWORD *)(v2 + 32) = 0xFFFFFFFFLL;
    *(_DWORD *)(v2 + 40) = 16777473;
    *(_BYTE *)(v2 + 44) = 1;
    *(_OWORD *)(v2 + 48) = xmmword_1B2244EC0;
    *(_QWORD *)(v2 + 64) = 0;
    *(_QWORD *)(v2 + 72) = 0;
    *(_QWORD *)(v2 + 80) = 0xFFFFFFFFLL;
    *(_DWORD *)(v2 + 88) = 16777473;
    *(_BYTE *)(v2 + 92) = 1;
    *(_OWORD *)(v2 + 96) = xmmword_1B2244EC0;
    *(_QWORD *)(v2 + 112) = 0xFFFFFFFFLL;
    *(_DWORD *)(v2 + 120) = 16777473;
    *(_BYTE *)(v2 + 124) = 1;
    *(_DWORD *)(v2 + 128) = 1056964608;
    *(_OWORD *)(v2 + 144) = xmmword_1B2244EC0;
    *(_QWORD *)(v2 + 160) = 0xFFFFFFFFLL;
    *(_DWORD *)(v2 + 168) = 16777473;
    *(_BYTE *)(v2 + 172) = 1;
    *(_DWORD *)(v2 + 176) = 0;
    *(_OWORD *)(v2 + 192) = xmmword_1B2244EC0;
    *(_QWORD *)(v2 + 208) = 0xFFFFFFFFLL;
    *(_DWORD *)(v2 + 216) = 16777473;
    *(_BYTE *)(v2 + 220) = 1;
    *(_DWORD *)(v2 + 224) = 1065353216;
    *(_OWORD *)(v2 + 240) = xmmword_1B2244EC0;
    *(_QWORD *)(v2 + 256) = 0xFFFFFFFFLL;
    *(_DWORD *)(v2 + 264) = 16777473;
    *(_BYTE *)(v2 + 268) = 1;
    *(_DWORD *)(v2 + 272) = 1065353216;
    *(_OWORD *)(v2 + 288) = xmmword_1B2244EC0;
    *(_WORD *)(v2 + 304) = 0;
  }
  v3 = *(_DWORD *)(v2 + 32);
  v4 = *(_DWORD *)(v2 + 36);
  swift_release();
  return v3 != -1 || v4 != 0;
}

uint64_t sub_1B1A383A8@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *(unsigned __int8 *)(result + 1);
  return result;
}

_BYTE *sub_1B1A383B4(_BYTE *result, uint64_t a2)
{
  *(_BYTE *)(a2 + 1) = *result == 1;
  return result;
}

unsigned __int8 *sub_1B1A383C8@<X0>(unsigned __int8 *result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

_BYTE *sub_1B1A383D4(_BYTE *result, BOOL *a2)
{
  *a2 = *result == 1;
  return result;
}

uint64_t sub_1B1A383E8@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *(unsigned __int8 *)(result + 2);
  return result;
}

unint64_t sub_1B1A383F4(unint64_t *a1)
{
  return sub_1B1A31CDC(*a1);
}

uint64_t sub_1B1A38418@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *(char *)(result + 3);
  return result;
}

uint64_t sub_1B1A38424(uint64_t *a1)
{
  return sub_1B1A31DA4(*a1);
}

uint64_t sub_1B1A38448@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *(char *)(result + 4);
  return result;
}

uint64_t sub_1B1A38454(uint64_t *a1)
{
  return sub_1B1A31DBC(*a1);
}

BOOL sub_1B1A38478()
{
  uint64_t v0;
  _BOOL8 v1;
  uint64_t v2;
  uint64_t v3;

  if (*(_BYTE *)v0)
    return 0;
  v2 = *(_QWORD *)(v0 + 24);
  if (v2 && object_getClass(*(id *)(v0 + 24)) == (Class)_TtC3VFX13PBRParameters)
  {
    v1 = *(_DWORD *)(v2 + 80) != -1 || *(_DWORD *)(v2 + 84) != 0;
    swift_unknownObjectRetain();
  }
  else
  {
    type metadata accessor for PBRParameters();
    v3 = swift_allocObject();
    v1 = 0;
    *(_OWORD *)(v3 + 16) = xmmword_1B226E4E0;
    *(_QWORD *)(v3 + 32) = 0xFFFFFFFFLL;
    *(_DWORD *)(v3 + 40) = 16777473;
    *(_DWORD *)(v3 + 128) = 1056964608;
    *(_BYTE *)(v3 + 44) = 1;
    *(_OWORD *)(v3 + 48) = xmmword_1B2244EC0;
    *(_QWORD *)(v3 + 64) = 0;
    *(_QWORD *)(v3 + 72) = 0;
    *(_QWORD *)(v3 + 80) = 0xFFFFFFFFLL;
    *(_DWORD *)(v3 + 88) = 16777473;
    *(_BYTE *)(v3 + 92) = 1;
    *(_OWORD *)(v3 + 96) = xmmword_1B2244EC0;
    *(_QWORD *)(v3 + 112) = 0xFFFFFFFFLL;
    *(_DWORD *)(v3 + 120) = 16777473;
    *(_BYTE *)(v3 + 124) = 1;
    *(_OWORD *)(v3 + 144) = xmmword_1B2244EC0;
    *(_QWORD *)(v3 + 160) = 0xFFFFFFFFLL;
    *(_DWORD *)(v3 + 168) = 16777473;
    *(_BYTE *)(v3 + 172) = 1;
    *(_DWORD *)(v3 + 176) = 0;
    *(_OWORD *)(v3 + 192) = xmmword_1B2244EC0;
    *(_QWORD *)(v3 + 208) = 0xFFFFFFFFLL;
    *(_DWORD *)(v3 + 216) = 16777473;
    *(_BYTE *)(v3 + 220) = 1;
    *(_BYTE *)(v3 + 268) = 1;
    *(_DWORD *)(v3 + 224) = 1065353216;
    *(_OWORD *)(v3 + 240) = xmmword_1B2244EC0;
    *(_QWORD *)(v3 + 256) = 0xFFFFFFFFLL;
    *(_DWORD *)(v3 + 264) = 16777473;
    *(_DWORD *)(v3 + 272) = 1065353216;
    *(_OWORD *)(v3 + 288) = xmmword_1B2244EC0;
    *(_WORD *)(v3 + 304) = 0;
  }
  swift_release();
  return v1;
}

BOOL sub_1B1A385A8()
{
  uint64_t v0;
  _BOOL8 v1;
  uint64_t v2;
  uint64_t v3;

  if (*(_BYTE *)v0)
    return 0;
  v2 = *(_QWORD *)(v0 + 24);
  if (v2 && object_getClass(*(id *)(v0 + 24)) == (Class)_TtC3VFX13PBRParameters)
  {
    v1 = *(_DWORD *)(v2 + 112) != -1 || *(_DWORD *)(v2 + 116) != 0;
    swift_unknownObjectRetain();
  }
  else
  {
    type metadata accessor for PBRParameters();
    v3 = swift_allocObject();
    v1 = 0;
    *(_OWORD *)(v3 + 16) = xmmword_1B226E4E0;
    *(_QWORD *)(v3 + 32) = 0xFFFFFFFFLL;
    *(_DWORD *)(v3 + 40) = 16777473;
    *(_DWORD *)(v3 + 128) = 1056964608;
    *(_BYTE *)(v3 + 44) = 1;
    *(_OWORD *)(v3 + 48) = xmmword_1B2244EC0;
    *(_QWORD *)(v3 + 64) = 0;
    *(_QWORD *)(v3 + 72) = 0;
    *(_QWORD *)(v3 + 80) = 0xFFFFFFFFLL;
    *(_DWORD *)(v3 + 88) = 16777473;
    *(_BYTE *)(v3 + 92) = 1;
    *(_OWORD *)(v3 + 96) = xmmword_1B2244EC0;
    *(_QWORD *)(v3 + 112) = 0xFFFFFFFFLL;
    *(_DWORD *)(v3 + 120) = 16777473;
    *(_BYTE *)(v3 + 124) = 1;
    *(_OWORD *)(v3 + 144) = xmmword_1B2244EC0;
    *(_QWORD *)(v3 + 160) = 0xFFFFFFFFLL;
    *(_DWORD *)(v3 + 168) = 16777473;
    *(_BYTE *)(v3 + 172) = 1;
    *(_DWORD *)(v3 + 176) = 0;
    *(_OWORD *)(v3 + 192) = xmmword_1B2244EC0;
    *(_QWORD *)(v3 + 208) = 0xFFFFFFFFLL;
    *(_DWORD *)(v3 + 216) = 16777473;
    *(_BYTE *)(v3 + 220) = 1;
    *(_BYTE *)(v3 + 268) = 1;
    *(_DWORD *)(v3 + 224) = 1065353216;
    *(_OWORD *)(v3 + 240) = xmmword_1B2244EC0;
    *(_QWORD *)(v3 + 256) = 0xFFFFFFFFLL;
    *(_DWORD *)(v3 + 264) = 16777473;
    *(_DWORD *)(v3 + 272) = 1065353216;
    *(_OWORD *)(v3 + 288) = xmmword_1B2244EC0;
    *(_WORD *)(v3 + 304) = 0;
  }
  swift_release();
  return v1;
}

BOOL sub_1B1A386DC()
{
  uint64_t v0;
  _BOOL8 v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (*(_BYTE *)v0)
    return 0;
  v2 = *(_QWORD *)(v0 + 24);
  if (!v2 || object_getClass((id)v2) != (Class)_TtC3VFX13PBRParameters)
  {
    type metadata accessor for PBRParameters();
    v3 = swift_allocObject();
    *(_OWORD *)(v3 + 16) = xmmword_1B226E4E0;
    *(_QWORD *)(v3 + 32) = 0xFFFFFFFFLL;
    *(_DWORD *)(v3 + 40) = 16777473;
    *(_BYTE *)(v3 + 44) = 1;
    *(_OWORD *)(v3 + 48) = xmmword_1B2244EC0;
    *(_QWORD *)(v3 + 64) = 0;
    *(_QWORD *)(v3 + 72) = 0;
    *(_QWORD *)(v3 + 80) = 0xFFFFFFFFLL;
    *(_DWORD *)(v3 + 88) = 16777473;
    *(_BYTE *)(v3 + 92) = 1;
    *(_OWORD *)(v3 + 96) = xmmword_1B2244EC0;
    *(_QWORD *)(v3 + 112) = 0xFFFFFFFFLL;
    *(_DWORD *)(v3 + 120) = 16777473;
    *(_BYTE *)(v3 + 124) = 1;
    *(_DWORD *)(v3 + 128) = 1056964608;
    *(_OWORD *)(v3 + 144) = xmmword_1B2244EC0;
    *(_QWORD *)(v3 + 160) = 0xFFFFFFFFLL;
    *(_DWORD *)(v3 + 168) = 16777473;
    *(_BYTE *)(v3 + 172) = 1;
    *(_DWORD *)(v3 + 176) = 0;
    *(_OWORD *)(v3 + 192) = xmmword_1B2244EC0;
    *(_QWORD *)(v3 + 208) = 0xFFFFFFFFLL;
    *(_DWORD *)(v3 + 216) = 16777473;
    *(_BYTE *)(v3 + 220) = 1;
    *(_DWORD *)(v3 + 224) = 1065353216;
    *(_OWORD *)(v3 + 240) = xmmword_1B2244EC0;
    *(_QWORD *)(v3 + 256) = 0xFFFFFFFFLL;
    *(_DWORD *)(v3 + 264) = 16777473;
    *(_BYTE *)(v3 + 268) = 1;
    *(_DWORD *)(v3 + 272) = 1065353216;
    *(_OWORD *)(v3 + 288) = xmmword_1B2244EC0;
    *(_WORD *)(v3 + 304) = 0;
    swift_release();
    if (!v2)
      goto LABEL_9;
    goto LABEL_8;
  }
  if ((*(_BYTE *)(v2 + 304) & 1) == 0)
  {
LABEL_8:
    if (object_getClass((id)v2) == (Class)_TtC3VFX13PBRParameters)
    {
      v1 = *(_DWORD *)(v2 + 160) != -1 || *(_DWORD *)(v2 + 164) != 0;
      swift_unknownObjectRetain();
      goto LABEL_17;
    }
LABEL_9:
    type metadata accessor for PBRParameters();
    v4 = swift_allocObject();
    v1 = 0;
    *(_OWORD *)(v4 + 16) = xmmword_1B226E4E0;
    *(_QWORD *)(v4 + 32) = 0xFFFFFFFFLL;
    *(_DWORD *)(v4 + 40) = 16777473;
    *(_BYTE *)(v4 + 44) = 1;
    *(_OWORD *)(v4 + 48) = xmmword_1B2244EC0;
    *(_QWORD *)(v4 + 64) = 0;
    *(_QWORD *)(v4 + 72) = 0;
    *(_QWORD *)(v4 + 80) = 0xFFFFFFFFLL;
    *(_DWORD *)(v4 + 88) = 16777473;
    *(_BYTE *)(v4 + 92) = 1;
    *(_OWORD *)(v4 + 96) = xmmword_1B2244EC0;
    *(_QWORD *)(v4 + 112) = 0xFFFFFFFFLL;
    *(_DWORD *)(v4 + 120) = 16777473;
    *(_BYTE *)(v4 + 124) = 1;
    *(_DWORD *)(v4 + 128) = 1056964608;
    *(_OWORD *)(v4 + 144) = xmmword_1B2244EC0;
    *(_QWORD *)(v4 + 160) = 0xFFFFFFFFLL;
    *(_DWORD *)(v4 + 168) = 16777473;
    *(_BYTE *)(v4 + 172) = 1;
    *(_DWORD *)(v4 + 176) = 0;
    *(_OWORD *)(v4 + 192) = xmmword_1B2244EC0;
    *(_QWORD *)(v4 + 208) = 0xFFFFFFFFLL;
    *(_DWORD *)(v4 + 216) = 16777473;
    *(_BYTE *)(v4 + 220) = 1;
    *(_DWORD *)(v4 + 224) = 1065353216;
    *(_OWORD *)(v4 + 240) = xmmword_1B2244EC0;
    *(_QWORD *)(v4 + 256) = 0xFFFFFFFFLL;
    *(_DWORD *)(v4 + 264) = 16777473;
    *(_BYTE *)(v4 + 268) = 1;
    *(_DWORD *)(v4 + 272) = 1065353216;
    *(_OWORD *)(v4 + 288) = xmmword_1B2244EC0;
    *(_WORD *)(v4 + 304) = 0;
LABEL_17:
    swift_release();
    return v1;
  }
  return 0;
}

BOOL sub_1B1A388EC()
{
  uint64_t v0;
  _BOOL8 v1;
  uint64_t v2;
  uint64_t v3;

  if (*(_BYTE *)v0)
    return 0;
  v2 = *(_QWORD *)(v0 + 24);
  if (v2 && object_getClass(*(id *)(v0 + 24)) == (Class)_TtC3VFX13PBRParameters)
  {
    v1 = *(_DWORD *)(v2 + 256) != -1 || *(_DWORD *)(v2 + 260) != 0;
    swift_unknownObjectRetain();
  }
  else
  {
    type metadata accessor for PBRParameters();
    v3 = swift_allocObject();
    v1 = 0;
    *(_OWORD *)(v3 + 16) = xmmword_1B226E4E0;
    *(_QWORD *)(v3 + 32) = 0xFFFFFFFFLL;
    *(_DWORD *)(v3 + 40) = 16777473;
    *(_DWORD *)(v3 + 128) = 1056964608;
    *(_BYTE *)(v3 + 44) = 1;
    *(_OWORD *)(v3 + 48) = xmmword_1B2244EC0;
    *(_QWORD *)(v3 + 64) = 0;
    *(_QWORD *)(v3 + 72) = 0;
    *(_QWORD *)(v3 + 80) = 0xFFFFFFFFLL;
    *(_DWORD *)(v3 + 88) = 16777473;
    *(_BYTE *)(v3 + 92) = 1;
    *(_OWORD *)(v3 + 96) = xmmword_1B2244EC0;
    *(_QWORD *)(v3 + 112) = 0xFFFFFFFFLL;
    *(_DWORD *)(v3 + 120) = 16777473;
    *(_BYTE *)(v3 + 124) = 1;
    *(_OWORD *)(v3 + 144) = xmmword_1B2244EC0;
    *(_QWORD *)(v3 + 160) = 0xFFFFFFFFLL;
    *(_DWORD *)(v3 + 168) = 16777473;
    *(_BYTE *)(v3 + 172) = 1;
    *(_DWORD *)(v3 + 176) = 0;
    *(_OWORD *)(v3 + 192) = xmmword_1B2244EC0;
    *(_QWORD *)(v3 + 208) = 0xFFFFFFFFLL;
    *(_DWORD *)(v3 + 216) = 16777473;
    *(_BYTE *)(v3 + 220) = 1;
    *(_BYTE *)(v3 + 268) = 1;
    *(_DWORD *)(v3 + 224) = 1065353216;
    *(_OWORD *)(v3 + 240) = xmmword_1B2244EC0;
    *(_QWORD *)(v3 + 256) = 0xFFFFFFFFLL;
    *(_DWORD *)(v3 + 264) = 16777473;
    *(_DWORD *)(v3 + 272) = 1065353216;
    *(_OWORD *)(v3 + 288) = xmmword_1B2244EC0;
    *(_WORD *)(v3 + 304) = 0;
  }
  swift_release();
  return v1;
}

uint64_t sub_1B1A38A20()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;

  if (*(_BYTE *)v0)
  {
    v1 = 0;
  }
  else
  {
    v2 = *(_QWORD *)(v0 + 24);
    if (v2 && object_getClass(*(id *)(v0 + 24)) == (Class)_TtC3VFX13PBRParameters)
    {
      v1 = *(_BYTE *)(v2 + 304) ^ 1;
      swift_unknownObjectRetain();
    }
    else
    {
      type metadata accessor for PBRParameters();
      v3 = swift_allocObject();
      *(_OWORD *)(v3 + 16) = xmmword_1B226E4E0;
      *(_QWORD *)(v3 + 32) = 0xFFFFFFFFLL;
      *(_DWORD *)(v3 + 40) = 16777473;
      v1 = 1;
      *(_BYTE *)(v3 + 44) = 1;
      *(_OWORD *)(v3 + 48) = xmmword_1B2244EC0;
      *(_QWORD *)(v3 + 64) = 0;
      *(_QWORD *)(v3 + 72) = 0;
      *(_QWORD *)(v3 + 80) = 0xFFFFFFFFLL;
      *(_DWORD *)(v3 + 88) = 16777473;
      *(_BYTE *)(v3 + 92) = 1;
      *(_OWORD *)(v3 + 96) = xmmword_1B2244EC0;
      *(_QWORD *)(v3 + 112) = 0xFFFFFFFFLL;
      *(_DWORD *)(v3 + 120) = 16777473;
      *(_BYTE *)(v3 + 124) = 1;
      *(_DWORD *)(v3 + 128) = 1056964608;
      *(_OWORD *)(v3 + 144) = xmmword_1B2244EC0;
      *(_QWORD *)(v3 + 160) = 0xFFFFFFFFLL;
      *(_DWORD *)(v3 + 168) = 16777473;
      *(_BYTE *)(v3 + 172) = 1;
      *(_DWORD *)(v3 + 176) = 0;
      *(_OWORD *)(v3 + 192) = xmmword_1B2244EC0;
      *(_QWORD *)(v3 + 208) = 0xFFFFFFFFLL;
      *(_DWORD *)(v3 + 216) = 16777473;
      *(_BYTE *)(v3 + 220) = 1;
      *(_DWORD *)(v3 + 224) = 1065353216;
      *(_OWORD *)(v3 + 240) = xmmword_1B2244EC0;
      *(_QWORD *)(v3 + 256) = 0xFFFFFFFFLL;
      *(_DWORD *)(v3 + 264) = 16777473;
      *(_BYTE *)(v3 + 268) = 1;
      *(_DWORD *)(v3 + 272) = 1065353216;
      *(_OWORD *)(v3 + 288) = xmmword_1B2244EC0;
      *(_WORD *)(v3 + 304) = 0;
    }
    swift_release();
  }
  return v1 & 1;
}

uint64_t sub_1B1A38B44@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  char v3;
  uint64_t v4;
  uint64_t v5;

  if (*(_BYTE *)result)
  {
    v3 = 0;
  }
  else
  {
    v4 = *(_QWORD *)(result + 24);
    if (v4 && object_getClass(*(id *)(result + 24)) == (Class)_TtC3VFX13PBRParameters)
    {
      v3 = *(_BYTE *)(v4 + 304) ^ 1;
      swift_unknownObjectRetain();
    }
    else
    {
      type metadata accessor for PBRParameters();
      v5 = swift_allocObject();
      *(_OWORD *)(v5 + 16) = xmmword_1B226E4E0;
      *(_QWORD *)(v5 + 32) = 0xFFFFFFFFLL;
      *(_DWORD *)(v5 + 40) = 16777473;
      v3 = 1;
      *(_BYTE *)(v5 + 44) = 1;
      *(_OWORD *)(v5 + 48) = xmmword_1B2244EC0;
      *(_QWORD *)(v5 + 64) = 0;
      *(_QWORD *)(v5 + 72) = 0;
      *(_QWORD *)(v5 + 80) = 0xFFFFFFFFLL;
      *(_DWORD *)(v5 + 88) = 16777473;
      *(_BYTE *)(v5 + 92) = 1;
      *(_OWORD *)(v5 + 96) = xmmword_1B2244EC0;
      *(_QWORD *)(v5 + 112) = 0xFFFFFFFFLL;
      *(_DWORD *)(v5 + 120) = 16777473;
      *(_BYTE *)(v5 + 124) = 1;
      *(_DWORD *)(v5 + 128) = 1056964608;
      *(_OWORD *)(v5 + 144) = xmmword_1B2244EC0;
      *(_QWORD *)(v5 + 160) = 0xFFFFFFFFLL;
      *(_DWORD *)(v5 + 168) = 16777473;
      *(_BYTE *)(v5 + 172) = 1;
      *(_DWORD *)(v5 + 176) = 0;
      *(_OWORD *)(v5 + 192) = xmmword_1B2244EC0;
      *(_QWORD *)(v5 + 208) = 0xFFFFFFFFLL;
      *(_DWORD *)(v5 + 216) = 16777473;
      *(_BYTE *)(v5 + 220) = 1;
      *(_DWORD *)(v5 + 224) = 1065353216;
      *(_OWORD *)(v5 + 240) = xmmword_1B2244EC0;
      *(_QWORD *)(v5 + 256) = 0xFFFFFFFFLL;
      *(_DWORD *)(v5 + 264) = 16777473;
      *(_BYTE *)(v5 + 268) = 1;
      *(_DWORD *)(v5 + 272) = 1065353216;
      *(_OWORD *)(v5 + 288) = xmmword_1B2244EC0;
      *(_WORD *)(v5 + 304) = 0;
    }
    result = swift_release();
  }
  *a2 = v3 & 1;
  return result;
}

BOOL sub_1B1A38C78()
{
  uint64_t v0;
  _BOOL8 v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (*(_BYTE *)v0)
    return 0;
  v2 = *(_QWORD *)(v0 + 24);
  if (!v2 || object_getClass((id)v2) != (Class)_TtC3VFX13PBRParameters)
  {
    type metadata accessor for PBRParameters();
    v3 = swift_allocObject();
    *(_OWORD *)(v3 + 16) = xmmword_1B226E4E0;
    *(_QWORD *)(v3 + 32) = 0xFFFFFFFFLL;
    *(_DWORD *)(v3 + 40) = 16777473;
    *(_BYTE *)(v3 + 44) = 1;
    *(_OWORD *)(v3 + 48) = xmmword_1B2244EC0;
    *(_QWORD *)(v3 + 64) = 0;
    *(_QWORD *)(v3 + 72) = 0;
    *(_QWORD *)(v3 + 80) = 0xFFFFFFFFLL;
    *(_DWORD *)(v3 + 88) = 16777473;
    *(_BYTE *)(v3 + 92) = 1;
    *(_OWORD *)(v3 + 96) = xmmword_1B2244EC0;
    *(_QWORD *)(v3 + 112) = 0xFFFFFFFFLL;
    *(_DWORD *)(v3 + 120) = 16777473;
    *(_BYTE *)(v3 + 124) = 1;
    *(_DWORD *)(v3 + 128) = 1056964608;
    *(_OWORD *)(v3 + 144) = xmmword_1B2244EC0;
    *(_QWORD *)(v3 + 160) = 0xFFFFFFFFLL;
    *(_DWORD *)(v3 + 168) = 16777473;
    *(_BYTE *)(v3 + 172) = 1;
    *(_DWORD *)(v3 + 176) = 0;
    *(_OWORD *)(v3 + 192) = xmmword_1B2244EC0;
    *(_QWORD *)(v3 + 208) = 0xFFFFFFFFLL;
    *(_DWORD *)(v3 + 216) = 16777473;
    *(_BYTE *)(v3 + 220) = 1;
    *(_DWORD *)(v3 + 224) = 1065353216;
    *(_OWORD *)(v3 + 240) = xmmword_1B2244EC0;
    *(_QWORD *)(v3 + 256) = 0xFFFFFFFFLL;
    *(_DWORD *)(v3 + 264) = 16777473;
    *(_BYTE *)(v3 + 268) = 1;
    *(_DWORD *)(v3 + 272) = 1065353216;
    *(_OWORD *)(v3 + 288) = xmmword_1B2244EC0;
    *(_WORD *)(v3 + 304) = 0;
    swift_release();
    if (!v2)
      goto LABEL_9;
    goto LABEL_8;
  }
  if ((*(_BYTE *)(v2 + 304) & 1) == 0)
  {
LABEL_8:
    if (object_getClass((id)v2) == (Class)_TtC3VFX13PBRParameters)
    {
      v1 = *(_DWORD *)(v2 + 208) != -1 || *(_DWORD *)(v2 + 212) != 0;
      swift_unknownObjectRetain();
      goto LABEL_17;
    }
LABEL_9:
    type metadata accessor for PBRParameters();
    v4 = swift_allocObject();
    v1 = 0;
    *(_OWORD *)(v4 + 16) = xmmword_1B226E4E0;
    *(_QWORD *)(v4 + 32) = 0xFFFFFFFFLL;
    *(_DWORD *)(v4 + 40) = 16777473;
    *(_BYTE *)(v4 + 44) = 1;
    *(_OWORD *)(v4 + 48) = xmmword_1B2244EC0;
    *(_QWORD *)(v4 + 64) = 0;
    *(_QWORD *)(v4 + 72) = 0;
    *(_QWORD *)(v4 + 80) = 0xFFFFFFFFLL;
    *(_DWORD *)(v4 + 88) = 16777473;
    *(_BYTE *)(v4 + 92) = 1;
    *(_OWORD *)(v4 + 96) = xmmword_1B2244EC0;
    *(_QWORD *)(v4 + 112) = 0xFFFFFFFFLL;
    *(_DWORD *)(v4 + 120) = 16777473;
    *(_BYTE *)(v4 + 124) = 1;
    *(_DWORD *)(v4 + 128) = 1056964608;
    *(_OWORD *)(v4 + 144) = xmmword_1B2244EC0;
    *(_QWORD *)(v4 + 160) = 0xFFFFFFFFLL;
    *(_DWORD *)(v4 + 168) = 16777473;
    *(_BYTE *)(v4 + 172) = 1;
    *(_DWORD *)(v4 + 176) = 0;
    *(_OWORD *)(v4 + 192) = xmmword_1B2244EC0;
    *(_QWORD *)(v4 + 208) = 0xFFFFFFFFLL;
    *(_DWORD *)(v4 + 216) = 16777473;
    *(_BYTE *)(v4 + 220) = 1;
    *(_DWORD *)(v4 + 224) = 1065353216;
    *(_OWORD *)(v4 + 240) = xmmword_1B2244EC0;
    *(_QWORD *)(v4 + 256) = 0xFFFFFFFFLL;
    *(_DWORD *)(v4 + 264) = 16777473;
    *(_BYTE *)(v4 + 268) = 1;
    *(_DWORD *)(v4 + 272) = 1065353216;
    *(_OWORD *)(v4 + 288) = xmmword_1B2244EC0;
    *(_WORD *)(v4 + 304) = 0;
LABEL_17:
    swift_release();
    return v1;
  }
  return 0;
}

uint64_t sub_1B1A38E88()
{
  return 0x6C6169726574614DLL;
}

uint64_t sub_1B1A38EA0()
{
  return 0x8000;
}

uint64_t sub_1B1A38EA8(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, &qword_1EEF56F08);
}

uint64_t sub_1B1A38EC4()
{
  return sub_1B1A222F0();
}

uint64_t sub_1B1A38F0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8, char a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, __int16 a15, uint64_t a16, uint64_t a17)
{
  return sub_1B1AB0AE8(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, (uint64_t)&off_1E63C1AD0);
}

uint64_t sub_1B1A38F6C()
{
  uint64_t v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E440;
  KeyPath = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1EEF59388, (uint64_t)&type metadata for Asset, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = sub_1B1AE94C4;
  v2[5] = KeyPath;
  v2[2] = sub_1B1AE94EC;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v3 = sub_1B1AC5AF8(0x7465737361, 0xE500000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v2, KeyPath, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0,
         (uint64_t)sub_1B1AE950C);
  swift_release();
  *(_QWORD *)(v0 + 32) = v3;
  result = sub_1B2228AD0();
  qword_1EEFD4FA8 = v0;
  return result;
}

unint64_t sub_1B1A390EC()
{
  return 0xD000000000000013;
}

uint64_t sub_1B1A39108(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, &qword_1EEF56F10);
}

uint64_t sub_1B1A39124(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, &qword_1EEF56F10, (unint64_t *)&qword_1EEFD4FA8);
}

uint64_t sub_1B1A39150(uint64_t a1)
{
  return sub_1B1A2262C(a1, &qword_1EEF56F10, &qword_1EEFD4FA8);
}

uint64_t sub_1B1A3917C()
{
  uint64_t v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E440;
  KeyPath = swift_getKeyPath();
  sub_1B1791524(0, &qword_1EEF59570, (uint64_t (*)(uint64_t))sub_1B1AE9640, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for EntityGetSet);
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = sub_1B1AE95F0;
  v2[5] = KeyPath;
  v2[2] = sub_1B1AE9620;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v3 = sub_1B1ABA4D0(0x7463656A626FLL, 0xE600000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v2, KeyPath, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0,
         (uint64_t (*)(_QWORD))sub_1B1AE9640,
         (uint64_t)sub_1B1AE9698);
  swift_release();
  *(_QWORD *)(v0 + 32) = v3;
  result = sub_1B2228AD0();
  qword_1EEFD4FB0 = v0;
  return result;
}

uint64_t sub_1B1A39308@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  _BYTE v5[32];

  sub_1B1A00060(a1, (uint64_t)v5);
  v3 = MEMORY[0x1B5E240CC](v5);
  sub_1B19FC350((uint64_t)v5);
  if (!v3)
    goto LABEL_4;
  objc_opt_self();
  result = swift_dynamicCastObjCClass();
  if (!result)
  {
    swift_unknownObjectRelease();
LABEL_4:
    result = 0;
  }
  *a2 = result;
  return result;
}

unint64_t sub_1B1A39378()
{
  return 0xD000000000000014;
}

uint64_t sub_1B1A39394()
{
  if (qword_1EEF56F18 != -1)
    swift_once();
  return swift_bridgeObjectRetain();
}

uint64_t sub_1B1A393D4(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, &qword_1EEF56F18);
}

uint64_t sub_1B1A393F8()
{
  uint64_t v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E440;
  KeyPath = swift_getKeyPath();
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4B80E0, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = sub_1B1AE97B4;
  v2[5] = KeyPath;
  v2[2] = sub_1B1AE97DC;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v3 = sub_1B1AD7928(0x7461507465737361, 0xE900000000000068, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v2, KeyPath, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0,
         (uint64_t)sub_1B1AE97FC);
  swift_release();
  *(_QWORD *)(v0 + 32) = v3;
  result = sub_1B2228AD0();
  qword_1EEFD4FB8 = v0;
  return result;
}

unint64_t sub_1B1A39580()
{
  return 0xD000000000000015;
}

uint64_t sub_1B1A3959C(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, &qword_1EEF56F20);
}

uint64_t sub_1B1A395B8(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, &qword_1EEF56F20, (unint64_t *)&qword_1EEFD4FB8);
}

uint64_t sub_1B1A395E4(uint64_t a1)
{
  return sub_1B1A2262C(a1, &qword_1EEF56F20, &qword_1EEFD4FB8);
}

uint64_t sub_1B1A39610()
{
  uint64_t v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E4F0;
  KeyPath = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B8040, (uint64_t)&type metadata for Entity, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = sub_1B1AE98C4;
  v2[5] = KeyPath;
  v2[2] = sub_1B1AE98F4;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v3 = MEMORY[0x1E0DEE9D8];
  v4 = sub_1B1AD9F50(1752393069, 0xE400000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 9, 0, (uint64_t)v2, KeyPath, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0,
         (uint64_t)sub_1B1AEA050);
  swift_release();
  *(_QWORD *)(v0 + 32) = v4;
  v5 = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B8100, MEMORY[0x1E0DEB418], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v6 = (_QWORD *)swift_allocObject();
  v6[4] = sub_1B1AE9914;
  v6[5] = v5;
  v6[2] = sub_1B1AE9944;
  v6[3] = v5;
  v6[6] = v5;
  swift_allocObject();
  swift_retain_n();
  v7 = sub_1B1AD6CCC(0x746E756F63, 0xE500000000000000, 0x3FF0000000000000, 0, 0x412E848000000000, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v6, v5, 0, 0,
         0,
         v3,
         0,
         (uint64_t)sub_1B1AE9F88);
  swift_release();
  *(_QWORD *)(v0 + 40) = v7;
  v8 = swift_getKeyPath();
  v9 = swift_getKeyPath();
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4B8140, MEMORY[0x1E0DEDC60], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v10 = (_QWORD *)swift_allocObject();
  v10[4] = sub_1B1AE9994;
  v10[5] = v9;
  v10[2] = sub_1B1AE99C4;
  v10[3] = v9;
  v10[6] = v9;
  swift_allocObject();
  swift_retain_n();
  v11 = sub_1B1ADBDA8(0xD000000000000011, 0x80000001B232CFB0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v10, v9, 0, 0,
          0,
          v3,
          0,
          (uint64_t)sub_1B1AE9EC0);
  swift_release();
  sub_1B1A02758(0, &qword_1EEF595A0, (uint64_t)&type metadata for PointCache.Distribution, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v12 = (_QWORD *)swift_allocObject();
  v12[4] = sub_1B1AE99E4;
  v12[5] = v8;
  v12[2] = sub_1B1AE9A14;
  v12[3] = v8;
  v12[6] = v8;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v13 = sub_1B1AC5EBC(0x7562697274736964, 0xEC0000006E6F6974, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v12, v8, 0, 0,
          0,
          v3,
          v11);
  swift_release();
  swift_release();
  *(_QWORD *)(v0 + 48) = v13;
  v14 = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F0, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v15 = (_QWORD *)swift_allocObject();
  v15[4] = sub_1B1AE9A70;
  v15[5] = v14;
  v15[2] = sub_1B1AE9AA0;
  v15[3] = v14;
  v15[6] = v14;
  swift_allocObject();
  swift_retain_n();
  v16 = sub_1B1ADE580(0x6E6F697469736F50, 0xE900000000000073, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v15, v14, 0, 0,
          0,
          v3,
          0,
          (uint64_t)sub_1B1AE9D04);
  swift_release();
  *(_QWORD *)(v0 + 56) = v16;
  v17 = swift_getKeyPath();
  v18 = (_QWORD *)swift_allocObject();
  v18[4] = sub_1B1AE9A70;
  v18[5] = v17;
  v18[2] = sub_1B1AE9AA0;
  v18[3] = v17;
  v18[6] = v17;
  swift_allocObject();
  swift_retain_n();
  v19 = sub_1B1ADE580(0x736C616D726F4ELL, 0xE700000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v18, v17, 0, 0,
          0,
          v3,
          0,
          (uint64_t)sub_1B1AE9D04);
  swift_release();
  *(_QWORD *)(v0 + 64) = v19;
  v20 = swift_getKeyPath();
  v21 = (_QWORD *)swift_allocObject();
  v21[4] = sub_1B1AE9A70;
  v21[5] = v20;
  v21[2] = sub_1B1AE9AA0;
  v21[3] = v20;
  v21[6] = v20;
  swift_allocObject();
  swift_retain_n();
  v22 = sub_1B1ADE580(0x73726F6C6F43, 0xE600000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v21, v20, 0, 0,
          0,
          v3,
          0,
          (uint64_t)sub_1B1AE9D04);
  swift_release();
  *(_QWORD *)(v0 + 72) = v22;
  v23 = swift_getKeyPath();
  v24 = (_QWORD *)swift_allocObject();
  v24[4] = sub_1B1AE9A70;
  v24[5] = v23;
  v24[2] = sub_1B1AE9AA0;
  v24[3] = v23;
  v24[6] = v23;
  swift_allocObject();
  swift_retain_n();
  v25 = sub_1B1ADE580(7558741, 0xE300000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v24, v23, 0, 0,
          0,
          v3,
          0,
          (uint64_t)sub_1B1AE9D04);
  swift_release();
  *(_QWORD *)(v0 + 80) = v25;
  v26 = swift_getKeyPath();
  v27 = (_QWORD *)swift_allocObject();
  v27[4] = sub_1B1AE9A70;
  v27[5] = v26;
  v27[2] = sub_1B1AE9AA0;
  v27[3] = v26;
  v27[6] = v26;
  swift_allocObject();
  swift_retain_n();
  v28 = sub_1B1ADE580(0x73746E696F4ALL, 0xE600000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v27, v26, 0, 0,
          0,
          v3,
          0,
          (uint64_t)sub_1B1AE9D04);
  swift_release();
  *(_QWORD *)(v0 + 88) = v28;
  v29 = swift_getKeyPath();
  v30 = (_QWORD *)swift_allocObject();
  v30[4] = sub_1B1AE9A70;
  v30[5] = v29;
  v30[2] = sub_1B1AE9AA0;
  v30[3] = v29;
  v30[6] = v29;
  swift_allocObject();
  swift_retain_n();
  v31 = sub_1B1ADE580(0x656C676E61697254, 0xE900000000000073, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v30, v29, 0, 0,
          0,
          v3,
          0,
          (uint64_t)sub_1B1AE9D04);
  swift_release();
  *(_QWORD *)(v0 + 96) = v31;
  v32 = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1EEF595A8, MEMORY[0x1E0DEE190], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v33 = (_QWORD *)swift_allocObject();
  v33[4] = sub_1B1AE9BEC;
  v33[5] = v32;
  v33[2] = sub_1B1AE9C1C;
  v33[3] = v32;
  v33[6] = v32;
  swift_allocObject();
  swift_retain_n();
  v34 = sub_1B1AC885C(1684366675, 0xE400000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v33, v32, 0, 0,
          0,
          v3,
          0,
          (uint64_t)sub_1B1AE9C3C);
  swift_release();
  *(_QWORD *)(v0 + 104) = v34;
  result = sub_1B2228AD0();
  qword_1EEFD4FC0 = v0;
  return result;
}

uint64_t sub_1B1A3A070(uint64_t a1, uint64_t a2, char a3)
{
  return a3;
}

uint64_t sub_1B1A3A078(uint64_t result)
{
  uint64_t v1;
  char v2;

  v2 = result;
  if (result >= 3u)
    v2 = 3;
  *(_BYTE *)(v1 + 16) = v2;
  return result;
}

uint64_t sub_1B1A3A090(uint64_t a1, uint64_t a2, unsigned int a3)
{
  return HIWORD(a3) & 1;
}

uint64_t sub_1B1A3A098(uint64_t a1, uint64_t a2, unsigned int a3)
{
  return (a3 >> 17) & 1;
}

uint64_t sub_1B1A3A0A0(uint64_t a1, uint64_t a2, unsigned int a3)
{
  return (a3 >> 18) & 1;
}

uint64_t sub_1B1A3A0A8(uint64_t a1, uint64_t a2, unsigned int a3)
{
  return (a3 >> 19) & 1;
}

uint64_t sub_1B1A3A0B0(uint64_t a1, uint64_t a2, unsigned int a3)
{
  return (a3 >> 20) & 1;
}

uint64_t sub_1B1A3A0B8(uint64_t a1, uint64_t a2, unsigned int a3)
{
  return (a3 >> 26) & 1;
}

unint64_t sub_1B1A3A0C0()
{
  return 0xD000000000000015;
}

uint64_t sub_1B1A3A0DC(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, qword_1EEF56F28);
}

uint64_t sub_1B1A3A0F8(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, qword_1EEF56F28, (unint64_t *)&qword_1EEFD4FC0);
}

uint64_t sub_1B1A3A124(uint64_t a1)
{
  return sub_1B1A2262C(a1, qword_1EEF56F28, &qword_1EEFD4FC0);
}

uint64_t sub_1B1A3A150()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E440;
  KeyPath = swift_getKeyPath();
  v2 = swift_getKeyPath();
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4B80E0, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v3 = (_QWORD *)swift_allocObject();
  v3[4] = sub_1B1AEA164;
  v3[5] = v2;
  v3[2] = sub_1B1AEA18C;
  v3[3] = v2;
  v3[6] = v2;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v4 = MEMORY[0x1E0DEE9D8];
  v5 = sub_1B1AD7928(0x7461507465737361, 0xE900000000000068, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v3, v2, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0,
         (uint64_t)sub_1B1AEA2D8);
  swift_release();
  v6 = MEMORY[0x1E0CAFFF8];
  sub_1B1791524(0, &qword_1ED4B8038, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for EntityGetSet);
  v7 = (_QWORD *)swift_allocObject();
  v7[4] = sub_1B1AEA1AC;
  v7[5] = KeyPath;
  v7[2] = sub_1B1AEA1D4;
  v7[3] = KeyPath;
  v7[6] = KeyPath;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v8 = sub_1B1AB67D0(0x7465737361, 0xE500000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v7, KeyPath, 0, 0,
         4,
         v4,
         v5,
         (uint64_t (*)(_QWORD))v6,
         (uint64_t)sub_1B1AEA1F4);
  swift_release();
  swift_release();
  *(_QWORD *)(v0 + 32) = v8;
  result = sub_1B2228AD0();
  qword_1ED4D0CC0 = v0;
  return result;
}

uint64_t sub_1B1A3A3F8()
{
  return sub_1B20F080C();
}

uint64_t sub_1B1A3A430(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  double v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  v2 = sub_1B2228110();
  v4 = MEMORY[0x1E0C80A78](v2, v3);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, double))(v7 + 16))(v6, a1, v4);
  return sub_1B20F09EC((uint64_t)v6);
}

uint64_t sub_1B1A3A4AC@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  v3 = a1[1];
  *a2 = v2;
  a2[1] = v3;
  return swift_bridgeObjectRetain();
}

uint64_t sub_1B1A3A4B8(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *a1;
  v2 = a1[1];
  swift_bridgeObjectRetain();
  return sub_1B20F74BC(v1, v2);
}

unint64_t sub_1B1A3A4F4()
{
  return 0xD000000000000010;
}

uint64_t sub_1B1A3A510(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, &qword_1ED4B8EC0);
}

uint64_t sub_1B1A3A52C(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, &qword_1ED4B8EC0, (unint64_t *)&qword_1ED4D0CC0);
}

uint64_t sub_1B1A3A558(uint64_t a1)
{
  return sub_1B1A2262C(a1, &qword_1ED4B8EC0, &qword_1ED4D0CC0);
}

uint64_t sub_1B1A3A584()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E4A0;
  KeyPath = swift_getKeyPath();
  v2 = swift_getKeyPath();
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4B80E0, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v3 = (_QWORD *)swift_allocObject();
  v3[4] = sub_1B1AEA3E8;
  v3[5] = v2;
  v3[2] = sub_1B1AEA410;
  v3[3] = v2;
  v3[6] = v2;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v4 = MEMORY[0x1E0DEE9D8];
  v5 = sub_1B1AD7928(0x7461507465737361, 0xE900000000000068, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v3, v2, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0,
         (uint64_t)sub_1B1AEA644);
  swift_release();
  v6 = MEMORY[0x1E0CAFFF8];
  sub_1B1791524(0, &qword_1ED4B8038, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for EntityGetSet);
  v7 = (_QWORD *)swift_allocObject();
  v7[4] = sub_1B1AEA430;
  v7[5] = KeyPath;
  v7[2] = sub_1B1AEA458;
  v7[3] = KeyPath;
  v7[6] = KeyPath;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v8 = sub_1B1AB67D0(0x7465737361, 0xE500000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v7, KeyPath, 0, 0,
         4,
         v4,
         v5,
         (uint64_t (*)(_QWORD))v6,
         (uint64_t)sub_1B1AEA590);
  swift_release();
  swift_release();
  *(_QWORD *)(v0 + 32) = v8;
  v9 = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F0, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v10 = (_QWORD *)swift_allocObject();
  v10[4] = sub_1B1AEA478;
  v10[5] = v9;
  v10[2] = sub_1B1AEA4A8;
  v10[3] = v9;
  v10[6] = v9;
  swift_allocObject();
  swift_retain_n();
  v11 = sub_1B1ADE580(2036427888, 0xE400000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 19, 0, (uint64_t)v10, v9, 0, 0,
          0,
          v4,
          0,
          (uint64_t)sub_1B1AEA4C8);
  swift_release();
  *(_QWORD *)(v0 + 40) = v11;
  v12 = swift_getKeyPath();
  v13 = (_QWORD *)swift_allocObject();
  v13[4] = sub_1B1AEA478;
  v13[5] = v12;
  v13[2] = sub_1B1AEA4A8;
  v13[3] = v12;
  v13[6] = v12;
  swift_allocObject();
  swift_retain_n();
  v14 = sub_1B1ADE580(0x73706F6F6CLL, 0xE500000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v13, v12, 0, 0,
          0,
          v4,
          0,
          (uint64_t)sub_1B1AEA4C8);
  swift_release();
  *(_QWORD *)(v0 + 48) = v14;
  v15 = swift_getKeyPath();
  v16 = (_QWORD *)swift_allocObject();
  v16[4] = sub_1B1AEA478;
  v16[5] = v15;
  v16[2] = sub_1B1AEA4A8;
  v16[3] = v15;
  v16[6] = v15;
  swift_allocObject();
  swift_retain_n();
  v17 = sub_1B1ADE580(1702131053, 0xE400000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v16, v15, 0, 0,
          0,
          v4,
          0,
          (uint64_t)sub_1B1AEA4C8);
  swift_release();
  *(_QWORD *)(v0 + 56) = v17;
  result = sub_1B2228AD0();
  qword_1EEFD4FC8 = v0;
  return result;
}

uint64_t sub_1B1A3AAB0()
{
  return 0x6C69466569766F4DLL;
}

uint64_t sub_1B1A3AAD4()
{
  if (qword_1EEF56F38 != -1)
    swift_once();
  return swift_bridgeObjectRetain();
}

uint64_t sub_1B1A3AB14(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, &qword_1EEF56F38);
}

uint64_t sub_1B1A3AB30(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, &qword_1EEF56F38, (unint64_t *)&qword_1EEFD4FC8);
}

uint64_t sub_1B1A3AB5C(uint64_t a1)
{
  return sub_1B1A2262C(a1, &qword_1EEF56F38, &qword_1EEFD4FC8);
}

uint64_t sub_1B1A3AB88()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E440;
  KeyPath = swift_getKeyPath();
  v2 = swift_getKeyPath();
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4B80E0, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v3 = (_QWORD *)swift_allocObject();
  v3[4] = sub_1B1AEA710;
  v3[5] = v2;
  v3[2] = sub_1B1AEA738;
  v3[3] = v2;
  v3[6] = v2;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v4 = MEMORY[0x1E0DEE9D8];
  v5 = sub_1B1AD7928(0x7461507465737361, 0xE900000000000068, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v3, v2, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0,
         (uint64_t)sub_1B1AEA874);
  swift_release();
  v6 = MEMORY[0x1E0CAFFF8];
  sub_1B1791524(0, &qword_1ED4B8038, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for EntityGetSet);
  v7 = (_QWORD *)swift_allocObject();
  v7[4] = sub_1B1AEA758;
  v7[5] = KeyPath;
  v7[2] = sub_1B1AEA780;
  v7[3] = KeyPath;
  v7[6] = KeyPath;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v8 = sub_1B1AB67D0(0x7465737361, 0xE500000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v7, KeyPath, 0, 0,
         4,
         v4,
         v5,
         (uint64_t (*)(_QWORD))v6,
         (uint64_t)sub_1B1AEA7A0);
  swift_release();
  swift_release();
  *(_QWORD *)(v0 + 32) = v8;
  result = sub_1B2228AD0();
  qword_1EEFD4FD0 = v0;
  return result;
}

uint64_t sub_1B1A3AE30()
{
  return 0x6C69466F69647541;
}

uint64_t sub_1B1A3AE54(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, &qword_1EEF56F40);
}

uint64_t sub_1B1A3AE70(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, &qword_1EEF56F40, (unint64_t *)&qword_1EEFD4FD0);
}

uint64_t sub_1B1A3AE9C(uint64_t a1)
{
  return sub_1B1A2262C(a1, &qword_1EEF56F40, &qword_1EEFD4FD0);
}

uint64_t sub_1B1A3AEC8()
{
  uint64_t v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E470;
  KeyPath = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F0, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = sub_1B1AEA93C;
  v2[5] = KeyPath;
  v2[2] = sub_1B1AEA96C;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v3 = MEMORY[0x1E0DEE9D8];
  v4 = sub_1B1ADE580(2036427888, 0xE400000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 19, 0, (uint64_t)v2, KeyPath, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0,
         (uint64_t)sub_1B1AEA98C);
  swift_release();
  *(_QWORD *)(v0 + 32) = v4;
  v5 = swift_getKeyPath();
  v6 = (_QWORD *)swift_allocObject();
  v6[4] = sub_1B1AEA93C;
  v6[5] = v5;
  v6[2] = sub_1B1AEA96C;
  v6[3] = v5;
  v6[6] = v5;
  swift_allocObject();
  swift_retain_n();
  v7 = sub_1B1ADE580(0x73706F6F6CLL, 0xE500000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v6, v5, 0, 0,
         0,
         v3,
         0,
         (uint64_t)sub_1B1AEA98C);
  swift_release();
  *(_QWORD *)(v0 + 40) = v7;
  v8 = swift_getKeyPath();
  v9 = (_QWORD *)swift_allocObject();
  v9[4] = sub_1B1AEA93C;
  v9[5] = v8;
  v9[2] = sub_1B1AEA96C;
  v9[3] = v8;
  v9[6] = v8;
  swift_allocObject();
  swift_retain_n();
  v10 = sub_1B1ADE580(1702131053, 0xE400000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v9, v8, 0, 0,
          0,
          v3,
          0,
          (uint64_t)sub_1B1AEA98C);
  swift_release();
  *(_QWORD *)(v0 + 48) = v10;
  result = sub_1B2228AD0();
  qword_1EEFD4FD8 = v0;
  return result;
}

uint64_t sub_1B1A3B1FC()
{
  return 0x6E6F436F69647541;
}

uint64_t sub_1B1A3B220()
{
  if (qword_1EEF56F48 != -1)
    swift_once();
  return swift_bridgeObjectRetain();
}

uint64_t sub_1B1A3B260(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, &qword_1EEF56F48);
}

uint64_t sub_1B1A3B27C(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, &qword_1EEF56F48, (unint64_t *)&qword_1EEFD4FD8);
}

uint64_t sub_1B1A3B2A8(uint64_t a1)
{
  return sub_1B1A2262C(a1, &qword_1EEF56F48, &qword_1EEFD4FD8);
}

uint64_t sub_1B1A3B2D4()
{
  uint64_t v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E4A0;
  KeyPath = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F0, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = sub_1B1AEAA4C;
  v2[5] = KeyPath;
  v2[2] = sub_1B1AEAA7C;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v3 = MEMORY[0x1E0DEE9D8];
  v4 = sub_1B1ADE580(0x6D726F6665766177, 0xE800000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v2, KeyPath, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0,
         (uint64_t)sub_1B1AEAA9C);
  swift_release();
  *(_QWORD *)(v0 + 32) = v4;
  v5 = swift_getKeyPath();
  v6 = (_QWORD *)swift_allocObject();
  v6[4] = sub_1B1AEAA4C;
  v6[5] = v5;
  v6[2] = sub_1B1AEAA7C;
  v6[3] = v5;
  v6[6] = v5;
  swift_allocObject();
  swift_retain_n();
  v7 = sub_1B1ADE580(0x6D75727463657073, 0xE800000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v6, v5, 0, 0,
         0,
         v3,
         0,
         (uint64_t)sub_1B1AEAA9C);
  swift_release();
  *(_QWORD *)(v0 + 40) = v7;
  v8 = swift_getKeyPath();
  v9 = (_QWORD *)swift_allocObject();
  v9[4] = sub_1B1AEAA4C;
  v9[5] = v8;
  v9[2] = sub_1B1AEAA7C;
  v9[3] = v8;
  v9[6] = v8;
  swift_allocObject();
  swift_retain_n();
  v10 = sub_1B1ADE580(0x6D75727463657073, 0xEE00736552776F4CLL, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v9, v8, 0, 0,
          0,
          v3,
          0,
          (uint64_t)sub_1B1AEAA9C);
  swift_release();
  *(_QWORD *)(v0 + 48) = v10;
  v11 = swift_getKeyPath();
  v12 = (_QWORD *)swift_allocObject();
  v12[4] = sub_1B1AEAA4C;
  v12[5] = v11;
  v12[2] = sub_1B1AEAA7C;
  v12[3] = v11;
  v12[6] = v11;
  swift_allocObject();
  swift_retain_n();
  v13 = sub_1B1ADE580(7564658, 0xE300000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v12, v11, 0, 0,
          0,
          v3,
          0,
          (uint64_t)sub_1B1AEAA9C);
  swift_release();
  *(_QWORD *)(v0 + 56) = v13;
  result = sub_1B2228AD0();
  qword_1EEFD4FE0 = v0;
  return result;
}

uint64_t sub_1B1A3B6EC()
{
  return 0x616E416F69647541;
}

uint64_t sub_1B1A3B710(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, &qword_1EEF56F50);
}

uint64_t sub_1B1A3B72C(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, &qword_1EEF56F50, (unint64_t *)&qword_1EEFD4FE0);
}

uint64_t sub_1B1A3B758(uint64_t a1)
{
  return sub_1B1A2262C(a1, &qword_1EEF56F50, &qword_1EEFD4FE0);
}

uint64_t sub_1B1A3B784()
{
  uint64_t v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E4A0;
  KeyPath = swift_getKeyPath();
  sub_1B1AEABCC(0);
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = sub_1B1AEAB74;
  v2[5] = KeyPath;
  v2[2] = sub_1B1AEABAC;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v3 = MEMORY[0x1E0DEB188];
  v4 = MEMORY[0x1E0DEE9D8];
  v5 = sub_1B1AB7B00(0x6D726F6665766177, 0xE800000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v2, KeyPath, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0,
         (unint64_t *)&qword_1ED4BA4C0,
         MEMORY[0x1E0DEB188],
         (uint64_t)sub_1B1AEAD80);
  swift_release();
  *(_QWORD *)(v0 + 32) = v5;
  v6 = swift_getKeyPath();
  v7 = (_QWORD *)swift_allocObject();
  v7[4] = sub_1B1AEAB74;
  v7[5] = v6;
  v7[2] = sub_1B1AEABAC;
  v7[3] = v6;
  v7[6] = v6;
  swift_allocObject();
  swift_retain_n();
  v8 = sub_1B1AB7B00(0x647574696E67616DLL, 0xEA00000000007365, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v7, v6, 0, 0,
         0,
         v4,
         0,
         (unint64_t *)&qword_1ED4BA4C0,
         v3,
         (uint64_t)sub_1B1AEAD80);
  swift_release();
  *(_QWORD *)(v0 + 40) = v8;
  v9 = swift_getKeyPath();
  v10 = (_QWORD *)swift_allocObject();
  v10[4] = sub_1B1AEAB74;
  v10[5] = v9;
  v10[2] = sub_1B1AEABAC;
  v10[3] = v9;
  v10[6] = v9;
  swift_allocObject();
  swift_retain_n();
  v11 = sub_1B1AB7B00(0xD000000000000010, 0x80000001B2328820, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v10, v9, 0, 0,
          0,
          v4,
          0,
          (unint64_t *)&qword_1ED4BA4C0,
          v3,
          (uint64_t)sub_1B1AEAD80);
  swift_release();
  *(_QWORD *)(v0 + 48) = v11;
  v12 = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F8, v3, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v13 = (_QWORD *)swift_allocObject();
  v13[4] = sub_1B1AEAC68;
  v13[5] = v12;
  v13[2] = sub_1B1AEAC98;
  v13[3] = v12;
  v13[6] = v12;
  swift_allocObject();
  swift_retain_n();
  v14 = sub_1B1ADC904(7564658, 0xE300000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v13, v12, 0, 0,
          0,
          v4,
          0,
          (uint64_t)sub_1B1AEACB8);
  swift_release();
  *(_QWORD *)(v0 + 56) = v14;
  result = sub_1B2228AD0();
  qword_1EEFD4FE8 = v0;
  return result;
}

uint64_t sub_1B1A3BBD4()
{
  return 0x6570536F69647541;
}

uint64_t sub_1B1A3BBF8(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, &qword_1EEF56F58);
}

uint64_t sub_1B1A3BC14(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  if (*a3 != -1)
    swift_once();
  return swift_bridgeObjectRetain();
}

uint64_t sub_1B1A3BC50(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, &qword_1EEF56F58, (unint64_t *)&qword_1EEFD4FE8);
}

uint64_t sub_1B1A3BC7C(uint64_t a1)
{
  return sub_1B1A2262C(a1, &qword_1EEF56F58, &qword_1EEFD4FE8);
}

uint64_t sub_1B1A3BCA8()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E440;
  KeyPath = swift_getKeyPath();
  v2 = swift_getKeyPath();
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4B80E0, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v3 = (_QWORD *)swift_allocObject();
  v3[4] = sub_1B1AEAF34;
  v3[5] = v2;
  v3[2] = sub_1B1AEAF5C;
  v3[3] = v2;
  v3[6] = v2;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v4 = MEMORY[0x1E0DEE9D8];
  v5 = sub_1B1AD7928(0x7461507465737361, 0xE900000000000068, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v3, v2, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0,
         (uint64_t)sub_1B1AEB060);
  swift_release();
  v6 = MEMORY[0x1E0CAFFF8];
  sub_1B1791524(0, &qword_1ED4B8038, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for EntityGetSet);
  v7 = (_QWORD *)swift_allocObject();
  v7[4] = sub_1B1AEAF7C;
  v7[5] = KeyPath;
  v7[2] = sub_1B1AEAFA4;
  v7[3] = KeyPath;
  v7[6] = KeyPath;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v8 = sub_1B1AB67D0(0x7465737361, 0xE500000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v7, KeyPath, 0, 0,
         4,
         v4,
         v5,
         (uint64_t (*)(_QWORD))v6,
         (uint64_t)sub_1B1AEAFC4);
  swift_release();
  swift_release();
  *(_QWORD *)(v0 + 32) = v8;
  result = sub_1B2228AD0();
  qword_1EEFD4FF0 = v0;
  return result;
}

uint64_t sub_1B1A3BF50()
{
  return 0x726579614C4143;
}

uint64_t sub_1B1A3BF68(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, &qword_1EEF56F60);
}

uint64_t sub_1B1A3BF84(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, &qword_1EEF56F60, (unint64_t *)&qword_1EEFD4FF0);
}

uint64_t sub_1B1A3BFB0(uint64_t a1)
{
  return sub_1B1A2262C(a1, &qword_1EEF56F60, &qword_1EEFD4FF0);
}

uint64_t sub_1B1A3BFDC()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E440;
  KeyPath = swift_getKeyPath();
  v2 = swift_getKeyPath();
  sub_1B1AEB188(0);
  v3 = (_QWORD *)swift_allocObject();
  v3[4] = sub_1B1AEB130;
  v3[5] = v2;
  v3[2] = sub_1B1AEB168;
  v3[3] = v2;
  v3[6] = v2;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v4 = MEMORY[0x1E0DEE9D8];
  v5 = sub_1B1AB7B00(0x7461507465737361, 0xEA00000000007368, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v3, v2, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0,
         (unint64_t *)&qword_1ED4BA490,
         MEMORY[0x1E0DEA968],
         (uint64_t)sub_1B1AEB314);
  swift_release();
  sub_1B1791524(0, &qword_1EEF59698, (uint64_t (*)(uint64_t))sub_1B1AEB244, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for EntityGetSet);
  v6 = (_QWORD *)swift_allocObject();
  v6[4] = sub_1B1AEB1F4;
  v6[5] = KeyPath;
  v6[2] = sub_1B1AEB224;
  v6[3] = KeyPath;
  v6[6] = KeyPath;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v7 = sub_1B1AB67D0(0x737465737361, 0xE600000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v6, KeyPath, 0, 0,
         0,
         v4,
         v5,
         (uint64_t (*)(_QWORD))sub_1B1AEB244,
         (uint64_t)sub_1B1AEB260);
  swift_release();
  swift_release();
  *(_QWORD *)(v0 + 32) = v7;
  result = sub_1B2228AD0();
  qword_1EEFD4FF8 = v0;
  return result;
}

uint64_t sub_1B1A3C274@<X0>(unint64_t *a1@<X8>)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t result;

  v2 = swift_bridgeObjectRetain();
  v3 = sub_1B1A20F64(v2);
  result = swift_bridgeObjectRelease();
  *a1 = v3;
  return result;
}

uint64_t sub_1B1A3C2C4(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v3 = swift_bridgeObjectRetain();
  v4 = sub_1B1A20E68(v3);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *a2 = v4;
  return result;
}

unint64_t sub_1B1A3C320()
{
  return 0xD000000000000015;
}

uint64_t sub_1B1A3C33C(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, &qword_1EEF56F68);
}

uint64_t sub_1B1A3C358(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, &qword_1EEF56F68, (unint64_t *)&qword_1EEFD4FF8);
}

uint64_t sub_1B1A3C384(uint64_t a1)
{
  return sub_1B1A2262C(a1, &qword_1EEF56F68, &qword_1EEFD4FF8);
}

uint64_t sub_1B1A3C3B0()
{
  uint64_t v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E440;
  KeyPath = swift_getKeyPath();
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4B80E0, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = sub_1B1AEB4E8;
  v2[5] = KeyPath;
  v2[2] = sub_1B1AEB510;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v3 = sub_1B1AD7928(1701667182, 0xE400000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v2, KeyPath, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0,
         (uint64_t)sub_1B1AEB530);
  swift_release();
  *(_QWORD *)(v0 + 32) = v3;
  result = sub_1B2228AD0();
  qword_1EEFD5000 = v0;
  return result;
}

unint64_t sub_1B1A3C52C()
{
  return 0xD000000000000011;
}

uint64_t sub_1B1A3C548(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, &qword_1EEF56F70);
}

uint64_t sub_1B1A3C564(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, &qword_1EEF56F70, (unint64_t *)&qword_1EEFD5000);
}

uint64_t sub_1B1A3C590(uint64_t a1)
{
  return sub_1B1A2262C(a1, &qword_1EEF56F70, &qword_1EEFD5000);
}

uint64_t sub_1B1A3C5BC()
{
  uint64_t v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E440;
  KeyPath = swift_getKeyPath();
  sub_1B1AEB608(0);
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = sub_1B1AEB5F8;
  v2[5] = KeyPath;
  v2[2] = sub_1B1AEB600;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v3 = sub_1B1ABD450(1635017060, 0xE400000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v2, KeyPath, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0,
         &qword_1EEF596E0,
         MEMORY[0x1E0CB0338],
         (uint64_t)sub_1B1AEB674);
  swift_release();
  *(_QWORD *)(v0 + 32) = v3;
  result = sub_1B2228AD0();
  qword_1EEFD5008 = v0;
  return result;
}

uint64_t sub_1B1A3C734()
{
  return 0x4665727574786554;
}

uint64_t sub_1B1A3C758(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, &qword_1EEF56F78);
}

uint64_t sub_1B1A3C774(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, &qword_1EEF56F78, (unint64_t *)&qword_1EEFD5008);
}

uint64_t sub_1B1A3C7A0(uint64_t a1)
{
  return sub_1B1A2262C(a1, &qword_1EEF56F78, &qword_1EEFD5008);
}

uint64_t sub_1B1A3C7CC()
{
  uint64_t v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E440;
  KeyPath = swift_getKeyPath();
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4B80E0, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = sub_1B1AEB8A0;
  v2[5] = KeyPath;
  v2[2] = sub_1B1AEB8C8;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v3 = sub_1B1AD7928(0x696669746E656469, 0xEA00000000007265, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v2, KeyPath, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0,
         (uint64_t)sub_1B1AEB8E8);
  swift_release();
  *(_QWORD *)(v0 + 32) = v3;
  result = sub_1B2228AD0();
  qword_1EEFD5010 = v0;
  return result;
}

uint64_t sub_1B1A3C954()
{
  return 0x4365727574786554;
}

uint64_t sub_1B1A3C978(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, &qword_1EEF56F80);
}

uint64_t sub_1B1A3C994(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, &qword_1EEF56F80, (unint64_t *)&qword_1EEFD5010);
}

uint64_t sub_1B1A3C9C0(uint64_t a1)
{
  return sub_1B1A2262C(a1, &qword_1EEF56F80, &qword_1EEFD5010);
}

uint64_t sub_1B1A3C9EC()
{
  uint64_t v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E440;
  KeyPath = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B8040, (uint64_t)&type metadata for Entity, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = sub_1B1AEB9F8;
  v2[5] = KeyPath;
  v2[2] = sub_1B1AEBA28;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v3 = sub_1B1AD9F50(0x65727574786574, 0xE700000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 8, 0, (uint64_t)v2, KeyPath, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0,
         (uint64_t)sub_1B1AEBA48);
  swift_release();
  *(_QWORD *)(v0 + 32) = v3;
  result = sub_1B2228AD0();
  qword_1EEFD5018 = v0;
  return result;
}

uint64_t sub_1B1A3CB74()
{
  return 0x6C6F686563616C50;
}

uint64_t sub_1B1A3CB94(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, &qword_1EEF56F88);
}

uint64_t sub_1B1A3CBB0(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, &qword_1EEF56F88, (unint64_t *)&qword_1EEFD5018);
}

uint64_t sub_1B1A3CBDC(uint64_t a1)
{
  return sub_1B1A2262C(a1, &qword_1EEF56F88, &qword_1EEFD5018);
}

uint64_t sub_1B1A3CC08()
{
  uint64_t v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E470;
  KeyPath = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B8100, MEMORY[0x1E0DEB418], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = sub_1B1AEBB10;
  v2[5] = KeyPath;
  v2[2] = sub_1B1AEBB40;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v3 = MEMORY[0x1E0DEE9D8];
  v4 = sub_1B1AD6CCC(0x687464695778616DLL, 0xE800000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v2, KeyPath, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0,
         (uint64_t)sub_1B1AEBC78);
  swift_release();
  *(_QWORD *)(v0 + 32) = v4;
  v5 = swift_getKeyPath();
  v6 = (_QWORD *)swift_allocObject();
  v6[4] = sub_1B1AEBB10;
  v6[5] = v5;
  v6[2] = sub_1B1AEBB40;
  v6[3] = v5;
  v6[6] = v5;
  swift_allocObject();
  swift_retain_n();
  v7 = sub_1B1AD6CCC(0x686769654878616DLL, 0xE900000000000074, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v6, v5, 0, 0,
         0,
         v3,
         0,
         (uint64_t)sub_1B1AEBC78);
  swift_release();
  *(_QWORD *)(v0 + 40) = v7;
  v8 = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F0, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v9 = (_QWORD *)swift_allocObject();
  v9[4] = sub_1B1AEBB60;
  v9[5] = v8;
  v9[2] = sub_1B1AEBB90;
  v9[3] = v8;
  v9[6] = v8;
  swift_allocObject();
  swift_retain_n();
  v10 = sub_1B1ADE580(0x657073417065656BLL, 0xEF6F697461527463, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v9, v8, 0, 0,
          0,
          v3,
          0,
          (uint64_t)sub_1B1AEBBB0);
  swift_release();
  *(_QWORD *)(v0 + 48) = v10;
  result = sub_1B2228AD0();
  qword_1EEFD5020 = v0;
  return result;
}

unint64_t sub_1B1A3CF80()
{
  return 0xD000000000000010;
}

uint64_t sub_1B1A3CF9C(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, &qword_1EEF56F90);
}

uint64_t sub_1B1A3CFB8(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, &qword_1EEF56F90, (unint64_t *)&qword_1EEFD5020);
}

uint64_t sub_1B1A3CFE4(uint64_t a1)
{
  return sub_1B1A2262C(a1, &qword_1EEF56F90, &qword_1EEFD5020);
}

uint64_t sub_1B1A3D010()
{
  uint64_t v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E440;
  KeyPath = swift_getKeyPath();
  sub_1B1ADF9C4(0);
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = sub_1B1AEBD40;
  v2[5] = KeyPath;
  v2[2] = sub_1B1AEBD68;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v3 = sub_1B1ABD450(0x6F4370616D70696DLL, 0xEB00000000746E75, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v2, KeyPath, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0,
         &qword_1ED4BA580,
         MEMORY[0x1E0DEB418],
         (uint64_t)sub_1B1AEBD88);
  swift_release();
  *(_QWORD *)(v0 + 32) = v3;
  result = sub_1B2228AD0();
  qword_1EEFD5028 = v0;
  return result;
}

unint64_t sub_1B1A3D198()
{
  return 0xD000000000000017;
}

uint64_t sub_1B1A3D1B4(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, &qword_1EEF56F98);
}

uint64_t sub_1B1A3D1D0(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, &qword_1EEF56F98, (unint64_t *)&qword_1EEFD5028);
}

uint64_t sub_1B1A3D1FC(uint64_t a1)
{
  return sub_1B1A2262C(a1, &qword_1EEF56F98, &qword_1EEFD5028);
}

uint64_t sub_1B1A3D228()
{
  uint64_t v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E440;
  KeyPath = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1EEF59728, (uint64_t)&type metadata for TextureFallback, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = sub_1B1AEBE60;
  v2[5] = KeyPath;
  v2[2] = sub_1B1AEBE90;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v3 = sub_1B1ACF300(0x6B6361626C6C6166, 0xE800000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v2, KeyPath, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0,
         (uint64_t)sub_1B1AEBEB0);
  swift_release();
  *(_QWORD *)(v0 + 32) = v3;
  result = sub_1B2228AD0();
  qword_1EEFD5030 = v0;
  return result;
}

uint64_t sub_1B1A3D3AC()
{
  return 0x54207265646E6552;
}

uint64_t sub_1B1A3D3D0(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, &qword_1EEF56FA0);
}

uint64_t sub_1B1A3D3EC(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, &qword_1EEF56FA0, (unint64_t *)&qword_1EEFD5030);
}

uint64_t sub_1B1A3D418(uint64_t a1)
{
  return sub_1B1A2262C(a1, &qword_1EEF56FA0, &qword_1EEFD5030);
}

uint64_t sub_1B1A3D444()
{
  uint64_t v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E4C0;
  KeyPath = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F0, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = sub_1B1AEBFD8;
  v2[5] = KeyPath;
  v2[2] = sub_1B1AEC008;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v3 = MEMORY[0x1E0DEE9D8];
  v4 = sub_1B1ADE580(0x65746172656E6567, 0xEF7370616D70694DLL, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v2, KeyPath, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0,
         (uint64_t)sub_1B1AEC1A0);
  swift_release();
  *(_QWORD *)(v0 + 32) = v4;
  v5 = swift_getKeyPath();
  v6 = (_QWORD *)swift_allocObject();
  v6[4] = sub_1B1AEBFD8;
  v6[5] = v5;
  v6[2] = sub_1B1AEC008;
  v6[3] = v5;
  v6[6] = v5;
  swift_allocObject();
  swift_retain_n();
  v7 = sub_1B1ADE580(0x70616D65627563, 0xE700000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v6, v5, 0, 0,
         0,
         v3,
         0,
         (uint64_t)sub_1B1AEC1A0);
  swift_release();
  *(_QWORD *)(v0 + 40) = v7;
  v8 = swift_getKeyPath();
  v9 = (_QWORD *)swift_allocObject();
  v9[4] = sub_1B1AEBFD8;
  v9[5] = v8;
  v9[2] = sub_1B1AEC008;
  v9[3] = v8;
  v9[6] = v8;
  swift_allocObject();
  swift_retain_n();
  v10 = sub_1B1ADE580(1111970419, 0xE400000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v9, v8, 0, 0,
          0,
          v3,
          0,
          (uint64_t)sub_1B1AEC1A0);
  swift_release();
  *(_QWORD *)(v0 + 48) = v10;
  v11 = swift_getKeyPath();
  v12 = (_QWORD *)swift_allocObject();
  v12[4] = sub_1B1AEBFD8;
  v12[5] = v11;
  v12[2] = sub_1B1AEC008;
  v12[3] = v11;
  v12[6] = v11;
  swift_allocObject();
  swift_retain_n();
  v13 = sub_1B1ADE580(0x6C756D6572706E75, 0xED0000796C706974, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v12, v11, 0, 0,
          0,
          v3,
          0,
          (uint64_t)sub_1B1AEC1A0);
  swift_release();
  *(_QWORD *)(v0 + 56) = v13;
  v14 = swift_getKeyPath();
  v15 = (_QWORD *)swift_allocObject();
  v15[4] = sub_1B1AEBFD8;
  v15[5] = v14;
  v15[2] = sub_1B1AEC008;
  v15[3] = v14;
  v15[6] = v14;
  swift_allocObject();
  swift_retain_n();
  v16 = sub_1B1ADE580(0x6C417261656E696CLL, 0xEB00000000616870, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v15, v14, 0, 0,
          0,
          v3,
          0,
          (uint64_t)sub_1B1AEC1A0);
  swift_release();
  *(_QWORD *)(v0 + 64) = v16;
  v17 = swift_getKeyPath();
  swift_allocObject();
  v18 = sub_1B1A80674(0x706D617320555043, 0xEC000000676E696CLL, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v17, 0, 1, 0, 0, 0, 4,
          v3,
          MEMORY[0x1E0DEDCE8]);
  *(_QWORD *)(v18 + 104) = 2040;
  *(_BYTE *)(v18 + 112) = 0;
  *(_QWORD *)(v0 + 72) = v18;
  v19 = swift_getKeyPath();
  v20 = (_QWORD *)swift_allocObject();
  v20[4] = sub_1B1AEBFD8;
  v20[5] = v19;
  v20[2] = sub_1B1AEC008;
  v20[3] = v19;
  v20[6] = v19;
  swift_allocObject();
  swift_retain_n();
  v21 = sub_1B1ADE580(0x6361667275534F49, 0xE900000000000065, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v20, v19, 0, 0,
          0,
          v3,
          0,
          (uint64_t)sub_1B1AEC1A0);
  swift_release();
  *(_QWORD *)(v0 + 80) = v21;
  result = sub_1B2228AD0();
  qword_1EEFD5038 = v0;
  return result;
}

uint64_t sub_1B1A3DAB4()
{
  unsigned __int8 *v0;

  return (*v0 >> 6) & 1;
}

uint64_t sub_1B1A3DAC0(uint64_t result)
{
  unint64_t *v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v2 = *v1;
  v3 = *v1 & 0x60;
  if ((result & 1) != 0)
  {
    if (v3 == 96)
      return result;
    v4 = v2 | 0x60;
  }
  else
  {
    if (!v3)
      return result;
    v4 = v2 & 0xFFFFFFFFFFFFFF9FLL;
  }
  *v1 = v4;
  return result;
}

uint64_t sub_1B1A3DAEC()
{
  unsigned __int8 *v0;

  return (*v0 >> 4) & 1;
}

BOOL sub_1B1A3DAF8()
{
  _BYTE *v0;

  return (*v0 & 4) == 0;
}

uint64_t sub_1B1A3DB08()
{
  unsigned __int8 *v0;

  return (*v0 >> 3) & 1;
}

uint64_t sub_1B1A3DB14()
{
  unsigned __int8 *v0;

  return *v0 >> 7;
}

uint64_t sub_1B1A3DB20()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + 1) & 1;
}

uint64_t sub_1B1A3DB2C()
{
  return 0x4F65727574786554;
}

uint64_t sub_1B1A3DB50(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, &qword_1EEF56FA8);
}

uint64_t sub_1B1A3DB6C(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, &qword_1EEF56FA8, (unint64_t *)&qword_1EEFD5038);
}

uint64_t sub_1B1A3DB98(uint64_t a1)
{
  return sub_1B1A2262C(a1, &qword_1EEF56FA8, &qword_1EEFD5038);
}

uint64_t sub_1B1A3DBC4(_QWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;
  _BYTE v8[24];
  uint64_t v9;
  uint64_t v10;

  sub_1B19FA070(a1, a1[3]);
  sub_1B222A15C();
  sub_1B19FC264((uint64_t)v8, v9);
  if ((a4 & 1) != 0)
  {
    sub_1B2229B98();
    if (!v4)
    {
      v10 = a2;
      sub_1B19FC264((uint64_t)v8, v9);
      sub_1B1A0895C();
      sub_1B2229BA4();
    }
  }
  else
  {
    sub_1B2229B98();
    if (!v4)
    {
      sub_1B19FC264((uint64_t)v8, v9);
      sub_1B2229B68();
    }
  }
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v8);
}

uint64_t sub_1B1A3DCF8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  char v6;

  result = sub_1B1ADF340(a1);
  if (!v2)
  {
    *(_QWORD *)a2 = result;
    *(_QWORD *)(a2 + 8) = v5;
    *(_BYTE *)(a2 + 16) = v6 & 1;
  }
  return result;
}

uint64_t sub_1B1A3DD28(_QWORD *a1)
{
  uint64_t v1;

  return sub_1B1A3DBC4(a1, *(_QWORD *)v1, *(_QWORD *)(v1 + 8), *(_BYTE *)(v1 + 16));
}

uint64_t sub_1B1A3DD44@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  int v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t result;
  uint64_t v8[5];
  _QWORD v9[6];

  v3 = *v1;
  v4 = *((unsigned __int8 *)v1 + 16);
  if (v4 == 1)
  {
    v9[3] = &type metadata for Entity;
    v9[4] = &off_1E63BB108;
    v9[0] = v3;
    v5 = sub_1B19FA070(v9, (uint64_t)&type metadata for Entity);
    v8[3] = (uint64_t)&type metadata for Entity;
    v8[4] = (uint64_t)&off_1E63BB108;
    v6 = sub_1B1A137F4(v8);
    *v6 = sub_1B1E33C2C(*v5);
    sub_1B1AEC268(0, (unint64_t *)&qword_1EEF5AB10);
    swift_dynamicCast();
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v9);
    result = 0;
    v3 = v9[5];
  }
  else
  {
    result = swift_bridgeObjectRetain();
  }
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = result;
  *(_BYTE *)(a1 + 16) = v4;
  return result;
}

uint64_t sub_1B1A3DE38()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E500;
  KeyPath = swift_getKeyPath();
  v2 = MEMORY[0x1E0DEB418];
  sub_1B1A02758(0, &qword_1ED4B8100, MEMORY[0x1E0DEB418], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v3 = (_QWORD *)swift_allocObject();
  v3[4] = sub_1B1AEC2B4;
  v3[5] = KeyPath;
  v3[2] = sub_1B1AEC2E4;
  v3[3] = KeyPath;
  v3[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v4 = MEMORY[0x1E0DEE9D8];
  v5 = sub_1B1AD6CCC(0x726550656D617266, 0xEB00000000776F52, 0x3FF0000000000000, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v3, KeyPath, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0,
         (uint64_t)sub_1B1AEC588);
  swift_release();
  *(_QWORD *)(v0 + 32) = v5;
  v6 = swift_getKeyPath();
  v7 = (_QWORD *)swift_allocObject();
  v7[4] = sub_1B1AEC2B4;
  v7[5] = v6;
  v7[2] = sub_1B1AEC2E4;
  v7[3] = v6;
  v7[6] = v6;
  swift_allocObject();
  swift_retain_n();
  v8 = sub_1B1AD6CCC(0x726550656D617266, 0xEE006E6D756C6F43, 0x3FF0000000000000, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v7, v6, 0, 0,
         0,
         v4,
         0,
         (uint64_t)sub_1B1AEC588);
  swift_release();
  *(_QWORD *)(v0 + 40) = v8;
  v9 = swift_getKeyPath();
  sub_1B1ADF51C();
  v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_1B226D240;
  *(_QWORD *)(v10 + 32) = 13366;
  *(_QWORD *)(v10 + 40) = 0xE200000000000000;
  *(_QWORD *)(v10 + 72) = v2;
  *(_QWORD *)(v10 + 48) = 64;
  sub_1B1ADF9C4(0);
  v11 = (_QWORD *)swift_allocObject();
  v11[4] = sub_1B1AEC304;
  v11[5] = v9;
  v11[2] = sub_1B1AEC32C;
  v11[3] = v9;
  v11[6] = v9;
  swift_allocObject();
  swift_retain_n();
  swift_bridgeObjectRetain();
  v12 = sub_1B1ABD450(0x756F43656D617266, 0xEA0000000000746ELL, 0x3FF0000000000000, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v11, v9, 0, 0,
          0,
          v10,
          0,
          &qword_1ED4BA580,
          v2,
          (uint64_t)sub_1B1AEC4B0);
  swift_release();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + 48) = v12;
  v13 = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F0, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v14 = (_QWORD *)swift_allocObject();
  v14[4] = sub_1B1AEC36C;
  v14[5] = v13;
  v14[2] = sub_1B1AEC39C;
  v14[3] = v13;
  v14[6] = v13;
  swift_allocObject();
  swift_retain_n();
  v15 = sub_1B1ADE580(0x7574786554657375, 0xEC00000044336572, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v14, v13, 0, 0,
          0,
          v4,
          0,
          (uint64_t)sub_1B1AEC3E8);
  swift_release();
  *(_QWORD *)(v0 + 56) = v15;
  v16 = swift_getKeyPath();
  v17 = (_QWORD *)swift_allocObject();
  v17[4] = sub_1B1AEC36C;
  v17[5] = v16;
  v17[2] = sub_1B1AEC39C;
  v17[3] = v16;
  v17[6] = v16;
  swift_allocObject();
  swift_retain_n();
  v18 = sub_1B1ADE580(0x7574786554657375, 0xEF79617272416572, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v17, v16, 0, 0,
          0,
          v4,
          0,
          (uint64_t)sub_1B1AEC3E8);
  swift_release();
  *(_QWORD *)(v0 + 64) = v18;
  result = sub_1B2228AD0();
  qword_1EEFD5040 = v0;
  return result;
}

unint64_t sub_1B1A3E3D8()
{
  return 0xD000000000000010;
}

uint64_t sub_1B1A3E3F4(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, &qword_1EEF56FB0);
}

uint64_t sub_1B1A3E410(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, &qword_1EEF56FB0, (unint64_t *)&qword_1EEFD5040);
}

uint64_t sub_1B1A3E43C(uint64_t a1)
{
  return sub_1B1A2262C(a1, &qword_1EEF56FB0, &qword_1EEFD5040);
}

uint64_t sub_1B1A3E468()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E450;
  KeyPath = swift_getKeyPath();
  v2 = swift_getKeyPath();
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4B8140, MEMORY[0x1E0DEDC60], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v3 = (_QWORD *)swift_allocObject();
  v3[4] = sub_1B1AEC680;
  v3[5] = v2;
  v3[2] = sub_1B1AEC6B0;
  v3[3] = v2;
  v3[6] = v2;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v4 = MEMORY[0x1E0DEE9D8];
  v5 = sub_1B1ADBDA8(0x496C656E6E616863, 0xEC0000007865646ELL, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v3, v2, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0,
         (uint64_t)sub_1B1AEC900);
  swift_release();
  sub_1B1A02758(0, &qword_1ED4B8078, (uint64_t)&type metadata for TextureChannel, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v6 = (_QWORD *)swift_allocObject();
  v6[4] = sub_1B1AEC6D0;
  v6[5] = KeyPath;
  v6[2] = sub_1B1AEC700;
  v6[3] = KeyPath;
  v6[6] = KeyPath;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v7 = sub_1B1AD3C60(0x6C656E6E616863, 0xE700000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v6, KeyPath, 0, 0,
         0,
         v4,
         v5,
         (uint64_t)sub_1B1AEC838);
  swift_release();
  swift_release();
  *(_QWORD *)(v0 + 32) = v7;
  v8 = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F8, MEMORY[0x1E0DEB188], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v9 = (_QWORD *)swift_allocObject();
  v9[4] = sub_1B1AEC720;
  v9[5] = v8;
  v9[2] = sub_1B1AEC750;
  v9[3] = v8;
  v9[6] = v8;
  swift_allocObject();
  swift_retain_n();
  v10 = sub_1B1ADC904(0x6C6F687365726874, 0xE900000000000064, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v9, v8, 0, 0,
          0,
          v4,
          0,
          (uint64_t)sub_1B1AEC770);
  swift_release();
  *(_QWORD *)(v0 + 40) = v10;
  result = sub_1B2228AD0();
  qword_1EEFD5048 = v0;
  return result;
}

uint64_t sub_1B1A3E804(uint64_t result)
{
  return (char)result;
}

uint64_t sub_1B1A3E80C()
{
  return 0x4D65726975716552;
}

uint64_t sub_1B1A3E82C(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, &qword_1EEF56FB8);
}

uint64_t sub_1B1A3E848(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, &qword_1EEF56FB8, (unint64_t *)&qword_1EEFD5048);
}

uint64_t sub_1B1A3E874(uint64_t a1)
{
  return sub_1B1A2262C(a1, &qword_1EEF56FB8, &qword_1EEFD5048);
}

unint64_t sub_1B1A3E8A0()
{
  return 0xD000000000000010;
}

uint64_t sub_1B1A3E8BC()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E500;
  KeyPath = swift_getKeyPath();
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  v2 = MEMORY[0x1E0DEE9D8];
  v3 = sub_1B1A80674(1701080941, 0xE400000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, KeyPath, 0, 1, 0, 0, 0, 4,
         MEMORY[0x1E0DEE9D8],
         MEMORY[0x1E0DEDCE8]);
  *(_QWORD *)(v3 + 104) = 2040;
  *(_BYTE *)(v3 + 112) = 0;
  *(_QWORD *)(v0 + 32) = v3;
  v4 = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F0, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v5 = (_QWORD *)swift_allocObject();
  v5[4] = sub_1B1AEC9F0;
  v5[5] = v4;
  v5[2] = sub_1B1AECA20;
  v5[3] = v4;
  v5[6] = v4;
  swift_allocObject();
  swift_retain_n();
  v6 = sub_1B1ADE580(0x2064616F6C657270, 0xEB00000000555043, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v5, v4, 0, 0,
         0,
         v2,
         0,
         (uint64_t)sub_1B1AECB80);
  swift_release();
  *(_QWORD *)(v0 + 40) = v6;
  v7 = swift_getKeyPath();
  v8 = (_QWORD *)swift_allocObject();
  v8[4] = sub_1B1AEC9F0;
  v8[5] = v7;
  v8[2] = sub_1B1AECA20;
  v8[3] = v7;
  v8[6] = v7;
  swift_allocObject();
  swift_retain_n();
  v9 = sub_1B1ADE580(0x2064616F6C657270, 0xEB00000000555047, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v8, v7, 0, 0,
         0,
         v2,
         0,
         (uint64_t)sub_1B1AECB80);
  swift_release();
  *(_QWORD *)(v0 + 48) = v9;
  v10 = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1EEF59728, (uint64_t)&type metadata for TextureFallback, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v11 = (_QWORD *)swift_allocObject();
  v11[4] = sub_1B1AECA68;
  v11[5] = v10;
  v11[2] = sub_1B1AECA98;
  v11[3] = v10;
  v11[6] = v10;
  swift_allocObject();
  swift_retain_n();
  v12 = sub_1B1ACF300(0x6B6361626C6C6166, 0xE800000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v11, v10, 0, 0,
          0,
          v2,
          0,
          (uint64_t)sub_1B1AECAB8);
  swift_release();
  *(_QWORD *)(v0 + 56) = v12;
  v13 = swift_getKeyPath();
  v14 = (_QWORD *)swift_allocObject();
  v14[4] = sub_1B1AEC9F0;
  v14[5] = v13;
  v14[2] = sub_1B1AECA20;
  v14[3] = v13;
  v14[6] = v13;
  swift_allocObject();
  swift_retain_n();
  v15 = sub_1B1ADE580(0x6F7268636E797361, 0xEC00000073756F6ELL, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v14, v13, 0, 0,
          4,
          v2,
          0,
          (uint64_t)sub_1B1AECB80);
  swift_release();
  *(_QWORD *)(v0 + 64) = v15;
  result = sub_1B2228AD0();
  qword_1EEFD5050 = v0;
  return result;
}

BOOL sub_1B1A3EDA8(char a1)
{
  return a1 == 0;
}

BOOL sub_1B1A3EDB4(__int16 a1)
{
  return (a1 & 0xFF00) == 0;
}

uint64_t sub_1B1A3EDC0()
{
  return 0x696C6F5064616F4CLL;
}

uint64_t sub_1B1A3EDDC(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, &qword_1EEF56FC0);
}

uint64_t sub_1B1A3EDF8(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, &qword_1EEF56FC0, (unint64_t *)&qword_1EEFD5050);
}

uint64_t sub_1B1A3EE24(uint64_t a1)
{
  return sub_1B1A2262C(a1, &qword_1EEF56FC0, &qword_1EEFD5050);
}

uint64_t sub_1B1A3EE50()
{
  uint64_t v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E470;
  KeyPath = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B8040, (uint64_t)&type metadata for Entity, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = sub_1B1AECC48;
  v2[5] = KeyPath;
  v2[2] = sub_1B1AECC78;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v3 = MEMORY[0x1E0DEE9D8];
  v4 = sub_1B1AD9F50(0x656372756F73, 0xE600000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 8, 0, (uint64_t)v2, KeyPath, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0,
         (uint64_t)sub_1B1AECEC8);
  swift_release();
  *(_QWORD *)(v0 + 32) = v4;
  v5 = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F8, MEMORY[0x1E0DEB188], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v6 = (_QWORD *)swift_allocObject();
  v6[4] = sub_1B1AECC98;
  v6[5] = v5;
  v6[2] = sub_1B1AECCC8;
  v6[3] = v5;
  v6[6] = v5;
  swift_allocObject();
  swift_retain_n();
  v7 = sub_1B1ADC904(0x6C6F687365726874, 0xE900000000000064, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v6, v5, 0, 0,
         0,
         v3,
         0,
         (uint64_t)sub_1B1AECE00);
  swift_release();
  *(_QWORD *)(v0 + 40) = v7;
  v8 = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B8100, MEMORY[0x1E0DEB418], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v9 = (_QWORD *)swift_allocObject();
  v9[4] = sub_1B1AECCE8;
  v9[5] = v8;
  v9[2] = sub_1B1AECD18;
  v9[3] = v8;
  v9[6] = v8;
  swift_allocObject();
  swift_retain_n();
  v10 = sub_1B1AD6CCC(0x706D61736E776F64, 0xEC000000676E696CLL, 0x3FF0000000000000, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v9, v8, 0, 0,
          0,
          v3,
          0,
          (uint64_t)sub_1B1AECD38);
  swift_release();
  *(_QWORD *)(v0 + 48) = v10;
  result = sub_1B2228AD0();
  qword_1EEFD5058 = v0;
  return result;
}

unint64_t sub_1B1A3F1D8()
{
  return 0xD000000000000013;
}

uint64_t sub_1B1A3F1F4(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, &qword_1EEF56FC8);
}

uint64_t sub_1B1A3F210(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, &qword_1EEF56FC8, (unint64_t *)&qword_1EEFD5058);
}

uint64_t sub_1B1A3F23C(uint64_t a1)
{
  return sub_1B1A2262C(a1, &qword_1EEF56FC8, &qword_1EEFD5058);
}

uint64_t sub_1B1A3F268()
{
  uint64_t v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E440;
  KeyPath = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B8100, MEMORY[0x1E0DEB418], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = sub_1B1AECF90;
  v2[5] = KeyPath;
  v2[2] = sub_1B1AECFC0;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v3 = sub_1B1AD6CCC(0x44496E77617073, 0xE700000000000000, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v2, KeyPath, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0,
         (uint64_t)sub_1B1AECFE0);
  swift_release();
  *(_QWORD *)(v0 + 32) = v3;
  result = sub_1B2228AD0();
  qword_1ED4D0C08 = v0;
  return result;
}

uint64_t sub_1B1A3F3EC()
{
  return 0x4449206E77617053;
}

uint64_t sub_1B1A3F404(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, qword_1ED4B8CE0);
}

uint64_t sub_1B1A3F420(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, qword_1ED4B8CE0, (unint64_t *)&qword_1ED4D0C08);
}

uint64_t sub_1B1A3F44C(uint64_t a1)
{
  return sub_1B1A2262C(a1, qword_1ED4B8CE0, &qword_1ED4D0C08);
}

uint64_t sub_1B1A3F478()
{
  uint64_t v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E450;
  KeyPath = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F8, MEMORY[0x1E0DEB188], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = sub_1B1AED0A8;
  v2[5] = KeyPath;
  v2[2] = sub_1B1AED0D8;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v3 = sub_1B1ADC904(0x7265764F65746172, 0xEC000000656D6954, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v2, KeyPath, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0,
         (uint64_t)sub_1B1AED0F8);
  swift_release();
  *(_QWORD *)(v0 + 32) = v3;
  *(_QWORD *)(v0 + 40) = sub_1B1ABF400(1016, 0x6E6F697461727564, 0xE800000000000000, (uint64_t)&type metadata for ParticleSpawnDuration, (uint64_t)&off_1E63A5250, 0x6E6F697461727564, 0xE800000000000000);
  result = sub_1B2228AD0();
  qword_1ED4D0DA8 = v0;
  return result;
}

uint64_t sub_1B1A3F648()
{
  return 0x6F756E69746E6F43;
}

uint64_t sub_1B1A3F664()
{
  return 16;
}

uint64_t sub_1B1A3F66C(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, &qword_1ED4B99C8);
}

uint64_t sub_1B1A3F688(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, &qword_1ED4B99C8, (unint64_t *)&qword_1ED4D0DA8);
}

uint64_t sub_1B1A3F6B4(uint64_t a1)
{
  return sub_1B1A2262C(a1, &qword_1ED4B99C8, &qword_1ED4D0DA8);
}

uint64_t sub_1B1A3F6E0()
{
  uint64_t v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E4A0;
  KeyPath = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F8, MEMORY[0x1E0DEB188], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = sub_1B1AED1C0;
  v2[5] = KeyPath;
  v2[2] = sub_1B1AED1F0;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v3 = MEMORY[0x1E0DEE9D8];
  v4 = sub_1B1ADC904(0xD000000000000010, 0x80000001B2329930, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v2, KeyPath, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0,
         (uint64_t)sub_1B1AED328);
  swift_release();
  *(_QWORD *)(v0 + 32) = v4;
  v5 = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F0, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v6 = (_QWORD *)swift_allocObject();
  v6[4] = sub_1B1AED210;
  v6[5] = v5;
  v6[2] = sub_1B1AED240;
  v6[3] = v5;
  v6[6] = v5;
  swift_allocObject();
  swift_retain_n();
  v7 = sub_1B1ADE580(0x776F6C6C6F66, 0xE600000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v6, v5, 0, 0,
         0,
         v3,
         0,
         (uint64_t)sub_1B1AED260);
  swift_release();
  *(_QWORD *)(v0 + 40) = v7;
  v8 = swift_getKeyPath();
  v9 = (_QWORD *)swift_allocObject();
  v9[4] = sub_1B1AED210;
  v9[5] = v8;
  v9[2] = sub_1B1AED240;
  v9[3] = v8;
  v9[6] = v8;
  swift_allocObject();
  swift_retain_n();
  v10 = sub_1B1ADE580(0x7261656E696CLL, 0xE600000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v9, v8, 0, 0,
          0,
          v3,
          0,
          (uint64_t)sub_1B1AED260);
  swift_release();
  *(_QWORD *)(v0 + 48) = v10;
  *(_QWORD *)(v0 + 56) = sub_1B1ABF400(1016, 0x6E6F697461727564, 0xE800000000000000, (uint64_t)&type metadata for ParticleSpawnDuration, (uint64_t)&off_1E63A5250, 0x6E6F697461727564, 0xE800000000000000);
  result = sub_1B2228AD0();
  qword_1EEFD5060 = v0;
  return result;
}

unint64_t sub_1B1A3FA88()
{
  return 0xD000000000000018;
}

uint64_t sub_1B1A3FAA4()
{
  if (qword_1EEF56FD0 != -1)
    swift_once();
  return swift_bridgeObjectRetain();
}

uint64_t sub_1B1A3FAE4(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, &qword_1EEF56FD0);
}

uint64_t sub_1B1A3FB00(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, &qword_1EEF56FD0, (unint64_t *)&qword_1EEFD5060);
}

uint64_t sub_1B1A3FB2C(uint64_t a1)
{
  return sub_1B1A2262C(a1, &qword_1EEF56FD0, &qword_1EEFD5060);
}

uint64_t sub_1B1A3FB58()
{
  uint64_t v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E470;
  KeyPath = swift_getKeyPath();
  sub_1B1AE43E4(0);
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = sub_1B1AED3F0;
  v2[5] = KeyPath;
  v2[2] = sub_1B1AED420;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v3 = MEMORY[0x1E0DEE9D8];
  v4 = sub_1B1AC93B8(0x7265764F65746172, 0xEC000000656D6954, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v2, KeyPath, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0);
  swift_release();
  *(_QWORD *)(v0 + 32) = v4;
  v5 = swift_getKeyPath();
  v6 = (_QWORD *)swift_allocObject();
  v6[4] = sub_1B1AED3F0;
  v6[5] = v5;
  v6[2] = sub_1B1AED420;
  v6[3] = v5;
  v6[6] = v5;
  swift_allocObject();
  swift_retain_n();
  v7 = sub_1B1AC93B8(0x7544746165706572, 0xEE006E6F69746172, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v6, v5, 0, 0,
         0,
         v3,
         0);
  swift_release();
  *(_QWORD *)(v0 + 40) = v7;
  v8 = swift_getKeyPath();
  v9 = (_QWORD *)swift_allocObject();
  v9[4] = sub_1B1AED3F0;
  v9[5] = v8;
  v9[2] = sub_1B1AED420;
  v9[3] = v8;
  v9[6] = v8;
  swift_allocObject();
  swift_retain_n();
  v10 = sub_1B1AC93B8(0x6954746165706572, 0xEA0000000000656DLL, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v9, v8, 0, 0,
          0,
          v3,
          0);
  swift_release();
  *(_QWORD *)(v0 + 48) = v10;
  result = sub_1B2228AD0();
  qword_1EEFD5068 = v0;
  return result;
}

uint64_t sub_1B1A3FE80()
{
  return 0x656C626169726156;
}

uint64_t sub_1B1A3FE98(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, &qword_1EEF56FD8);
}

uint64_t sub_1B1A3FEB4(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, &qword_1EEF56FD8, (unint64_t *)&qword_1EEFD5068);
}

uint64_t sub_1B1A3FEE0(uint64_t a1)
{
  return sub_1B1A2262C(a1, &qword_1EEF56FD8, &qword_1EEFD5068);
}

uint64_t sub_1B1A3FF0C()
{
  uint64_t v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E440;
  KeyPath = swift_getKeyPath();
  sub_1B1AED570(0);
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = sub_1B1AED520;
  v2[5] = KeyPath;
  v2[2] = sub_1B1AED550;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v3 = sub_1B1AC2B8C(0x746E756F63, 0xE500000000000000, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v2, KeyPath, 0, 0,
         512,
         MEMORY[0x1E0DEE9D8],
         0);
  swift_release();
  *(_QWORD *)(v0 + 32) = v3;
  result = sub_1B2228AD0();
  qword_1ED4D0CE8 = v0;
  return result;
}

uint64_t sub_1B1A4006C()
{
  return 0x7473727542;
}

uint64_t sub_1B1A40080(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, qword_1ED4B9280);
}

uint64_t sub_1B1A4009C(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, qword_1ED4B9280, (unint64_t *)&qword_1ED4D0CE8);
}

uint64_t sub_1B1A400C8(uint64_t a1)
{
  return sub_1B1A2262C(a1, qword_1ED4B9280, &qword_1ED4D0CE8);
}

uint64_t sub_1B1A400F4()
{
  uint64_t v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E450;
  KeyPath = swift_getKeyPath();
  sub_1B1AED570(0);
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = sub_1B1AED814;
  v2[5] = KeyPath;
  v2[2] = sub_1B1AED844;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v3 = MEMORY[0x1E0DEE9D8];
  v4 = sub_1B1AD17B4(0x746E756F63, 0xE500000000000000, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v2, KeyPath, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0);
  swift_release();
  *(_QWORD *)(v0 + 32) = v4;
  v5 = swift_getKeyPath();
  sub_1B1AE43E4(0);
  v6 = (_QWORD *)swift_allocObject();
  v6[4] = sub_1B1AED864;
  v6[5] = v5;
  v6[2] = sub_1B1AED894;
  v6[3] = v5;
  v6[6] = v5;
  swift_allocObject();
  swift_retain_n();
  v7 = sub_1B1AD1B90(0x6954746165706572, 0xEA0000000000656DLL, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v6, v5, 0, 0,
         0,
         v3,
         0);
  swift_release();
  *(_QWORD *)(v0 + 40) = v7;
  result = sub_1B2228AD0();
  qword_1ED4D0DD8 = v0;
  return result;
}

unint64_t sub_1B1A40338()
{
  return 0xD000000000000012;
}

uint64_t sub_1B1A40354(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, qword_1ED4B9B78);
}

uint64_t sub_1B1A40370(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, qword_1ED4B9B78, (unint64_t *)&qword_1ED4D0DD8);
}

uint64_t sub_1B1A4039C(uint64_t a1)
{
  return sub_1B1A2262C(a1, qword_1ED4B9B78, &qword_1ED4D0DD8);
}

uint64_t sub_1B1A403C8()
{
  uint64_t v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E440;
  KeyPath = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F8, MEMORY[0x1E0DEB188], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = sub_1B1AEDAB0;
  v2[5] = KeyPath;
  v2[2] = sub_1B1AEDAE0;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v3 = sub_1B1ADC904(0x6E6F697461727564, 0xE800000000000000, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v2, KeyPath, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0,
         (uint64_t)sub_1B1AEDB00);
  swift_release();
  *(_QWORD *)(v0 + 32) = v3;
  result = sub_1B2228AD0();
  qword_1EEFD5070 = v0;
  return result;
}

uint64_t sub_1B1A4054C()
{
  return 0x7544206E77617053;
}

uint64_t sub_1B1A40570(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, &qword_1EEF56FE0);
}

uint64_t sub_1B1A4058C(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, &qword_1EEF56FE0, (unint64_t *)&qword_1EEFD5070);
}

uint64_t sub_1B1A405B8(uint64_t a1)
{
  return sub_1B1A2262C(a1, &qword_1EEF56FE0, &qword_1EEFD5070);
}

uint64_t sub_1B1A405E4()
{
  uint64_t v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E440;
  KeyPath = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F8, MEMORY[0x1E0DEB188], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = sub_1B1AEDBC8;
  v2[5] = KeyPath;
  v2[2] = sub_1B1AEDBF8;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v3 = sub_1B1ADC904(0x79616C6564, 0xE500000000000000, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v2, KeyPath, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0,
         (uint64_t)sub_1B1AEDC18);
  swift_release();
  *(_QWORD *)(v0 + 32) = v3;
  result = sub_1B2228AD0();
  qword_1EEFD5078 = v0;
  return result;
}

uint64_t sub_1B1A40764()
{
  return 0x6544206E77617053;
}

uint64_t sub_1B1A40784(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, qword_1EEF56FE8);
}

uint64_t sub_1B1A407A0(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, qword_1EEF56FE8, (unint64_t *)&qword_1EEFD5078);
}

uint64_t sub_1B1A407CC(uint64_t a1)
{
  return sub_1B1A2262C(a1, qword_1EEF56FE8, &qword_1EEFD5078);
}

uint64_t sub_1B1A407F8()
{
  uint64_t v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E440;
  KeyPath = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B8100, MEMORY[0x1E0DEB418], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = sub_1B1AEDCE0;
  v2[5] = KeyPath;
  v2[2] = sub_1B1AEDD10;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v3 = sub_1B1AD6CCC(0x65756C6176, 0xE500000000000000, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v2, KeyPath, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0,
         (uint64_t)sub_1B1AEDD30);
  swift_release();
  *(_QWORD *)(v0 + 32) = v3;
  result = sub_1B2228AD0();
  qword_1ED4D0C00 = v0;
  return result;
}

unint64_t sub_1B1A40978()
{
  return 0xD000000000000016;
}

uint64_t sub_1B1A40994(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, qword_1ED4B8CD0);
}

uint64_t sub_1B1A409B0(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, qword_1ED4B8CD0, (unint64_t *)&qword_1ED4D0C00);
}

uint64_t sub_1B1A409DC(uint64_t a1)
{
  return sub_1B1A2262C(a1, qword_1ED4B8CD0, &qword_1ED4D0C00);
}

uint64_t sub_1B1A40A08()
{
  uint64_t v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E490;
  KeyPath = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B8040, (uint64_t)&type metadata for Entity, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = sub_1B1AEDDF8;
  v2[5] = KeyPath;
  v2[2] = sub_1B1AEDE28;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v3 = MEMORY[0x1E0DEE9D8];
  v4 = sub_1B1AD9F50(0x746E65726170, 0xE600000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 11, 0, (uint64_t)v2, KeyPath, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0,
         (uint64_t)sub_1B1AEE304);
  swift_release();
  *(_QWORD *)(v0 + 32) = v4;
  v5 = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F8, MEMORY[0x1E0DEB188], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v6 = (_QWORD *)swift_allocObject();
  v6[4] = sub_1B1AEDE48;
  v6[5] = v5;
  v6[2] = sub_1B1AEDE78;
  v6[3] = v5;
  v6[6] = v5;
  swift_allocObject();
  swift_retain_n();
  v7 = sub_1B1ADC904(0x6C696261626F7270, 0xEB00000000797469, 0, 0, 0x3FF0000000000000, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v6, v5, 0, 0,
         0,
         v3,
         0,
         (uint64_t)sub_1B1AEE23C);
  swift_release();
  *(_QWORD *)(v0 + 40) = v7;
  v8 = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F0, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v9 = (_QWORD *)swift_allocObject();
  v9[4] = sub_1B1AEDE98;
  v9[5] = v8;
  v9[2] = sub_1B1AEDEC8;
  v9[3] = v8;
  v9[6] = v8;
  swift_allocObject();
  swift_retain_n();
  v10 = sub_1B1ADE580(0x4374697265686E69, 0xEC000000726F6C6FLL, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v9, v8, 0, 0,
          0,
          v3,
          0,
          (uint64_t)sub_1B1AEE174);
  swift_release();
  *(_QWORD *)(v0 + 48) = v10;
  v11 = swift_getKeyPath();
  v12 = (_QWORD *)swift_allocObject();
  v12[4] = sub_1B1AEDE98;
  v12[5] = v11;
  v12[2] = sub_1B1AEDEC8;
  v12[3] = v11;
  v12[6] = v11;
  swift_allocObject();
  swift_retain_n();
  v13 = sub_1B1ADE580(0x5674697265686E69, 0xEF797469636F6C65, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v12, v11, 0, 0,
          0,
          v3,
          0,
          (uint64_t)sub_1B1AEE174);
  swift_release();
  *(_QWORD *)(v0 + 56) = v13;
  v14 = swift_getKeyPath();
  v15 = (_QWORD *)swift_allocObject();
  v15[4] = sub_1B1AEDE98;
  v15[5] = v14;
  v15[2] = sub_1B1AEDEC8;
  v15[3] = v14;
  v15[6] = v14;
  swift_allocObject();
  swift_retain_n();
  v16 = sub_1B1ADE580(0xD000000000000012, 0x80000001B23289F0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v15, v14, 0, 0,
          0,
          v3,
          0,
          (uint64_t)sub_1B1AEE174);
  swift_release();
  *(_QWORD *)(v0 + 64) = v16;
  v17 = swift_getKeyPath();
  v18 = (_QWORD *)swift_allocObject();
  v18[4] = sub_1B1AEDE98;
  v18[5] = v17;
  v18[2] = sub_1B1AEDEC8;
  v18[3] = v17;
  v18[6] = v17;
  swift_allocObject();
  swift_retain_n();
  v19 = sub_1B1ADE580(0x5374697265686E69, 0xEC000000656C6163, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v18, v17, 0, 0,
          0,
          v3,
          0,
          (uint64_t)sub_1B1AEE174);
  swift_release();
  *(_QWORD *)(v0 + 72) = v19;
  v20 = swift_getKeyPath();
  v21 = (_QWORD *)swift_allocObject();
  v21[4] = sub_1B1AEDE48;
  v21[5] = v20;
  v21[2] = sub_1B1AEDE78;
  v21[3] = v20;
  v21[6] = v20;
  swift_allocObject();
  swift_retain_n();
  v22 = sub_1B1ADC904(0x797469636F6C6576, 0xEE00726F74636146, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v21, v20, 0, 0,
          0,
          v3,
          0,
          (uint64_t)sub_1B1AEE23C);
  swift_release();
  *(_QWORD *)(v0 + 80) = v22;
  v23 = swift_getKeyPath();
  v24 = swift_getKeyPath();
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4B8140, MEMORY[0x1E0DEDC60], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v25 = (_QWORD *)swift_allocObject();
  v25[4] = sub_1B1AEDF18;
  v25[5] = v24;
  v25[2] = sub_1B1AEDF48;
  v25[3] = v24;
  v25[6] = v24;
  swift_allocObject();
  swift_retain_n();
  v26 = sub_1B1ADBDA8(0x65646E4965646F6DLL, 0xE900000000000078, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v25, v24, 0, 0,
          0,
          v3,
          0,
          (uint64_t)sub_1B1AEE0AC);
  swift_release();
  sub_1B1A02758(0, &qword_1EEF59818, (uint64_t)&type metadata for ParticleSubSpawn.Mode, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v27 = (_QWORD *)swift_allocObject();
  v27[4] = sub_1B1AEDF68;
  v27[5] = v23;
  v27[2] = sub_1B1AEDF98;
  v27[3] = v23;
  v27[6] = v23;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v28 = sub_1B1ABF044(1701080941, 0xE400000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v27, v23, 0, 0,
          0,
          v3,
          v26);
  swift_release();
  swift_release();
  *(_QWORD *)(v0 + 88) = v28;
  result = sub_1B2228AD0();
  qword_1EEFD5080 = v0;
  return result;
}

uint64_t sub_1B1A412F4()
{
  uint64_t v0;

  return *(char *)(v0 + 20);
}

uint64_t sub_1B1A412FC(uint64_t result)
{
  uint64_t v1;
  char v2;

  v2 = result;
  if ((result & 0xFC) != 0)
    v2 = 4;
  *(_BYTE *)(v1 + 20) = v2;
  return result;
}

uint64_t sub_1B1A41314()
{
  return 0x4520746E65726150;
}

uint64_t sub_1B1A41338()
{
  if (qword_1EEF56FF8 != -1)
    swift_once();
  return swift_bridgeObjectRetain();
}

uint64_t sub_1B1A41378(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, &qword_1EEF56FF8);
}

uint64_t sub_1B1A41394(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, &qword_1EEF56FF8, (unint64_t *)&qword_1EEFD5080);
}

uint64_t sub_1B1A413C0(uint64_t a1)
{
  return sub_1B1A2262C(a1, &qword_1EEF56FF8, &qword_1EEFD5080);
}

uint64_t sub_1B1A413EC()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E4C0;
  KeyPath = swift_getKeyPath();
  v2 = swift_getKeyPath();
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4B8140, MEMORY[0x1E0DEDC60], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v3 = (_QWORD *)swift_allocObject();
  v3[4] = sub_1B1AEE3FC;
  v3[5] = v2;
  v3[2] = sub_1B1AEE42C;
  v3[3] = v2;
  v3[6] = v2;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v4 = MEMORY[0x1E0DEE9D8];
  v5 = sub_1B1ADBDA8(0x646E496573696F6ELL, 0xEA00000000007865, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v3, v2, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0,
         (uint64_t)sub_1B1AEE8B4);
  swift_release();
  sub_1B1A02758(0, &qword_1ED4B80D0, (uint64_t)&type metadata for NoiseKind, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v6 = (_QWORD *)swift_allocObject();
  v6[4] = sub_1B1AEE44C;
  v6[5] = KeyPath;
  v6[2] = sub_1B1AEE47C;
  v6[3] = KeyPath;
  v6[6] = KeyPath;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v7 = sub_1B1AC5358(0x6573696F6ELL, 0xE500000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v6, KeyPath, 0, 0,
         0,
         v4,
         v5,
         (uint64_t)sub_1B1AEE7EC);
  swift_release();
  swift_release();
  *(_QWORD *)(v0 + 32) = v7;
  v8 = swift_getKeyPath();
  sub_1B1AE015C(0);
  v9 = (_QWORD *)swift_allocObject();
  v9[4] = sub_1B1AEE49C;
  v9[5] = v8;
  v9[2] = sub_1B1AEE4D4;
  v9[3] = v8;
  v9[6] = v8;
  swift_allocObject();
  swift_retain_n();
  v10 = sub_1B1AC571C(0x7269446E69616DLL, 0xE700000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v9, v8, 0, 0,
          0,
          v4,
          0);
  swift_release();
  *(_QWORD *)(v0 + 40) = v10;
  v11 = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F8, MEMORY[0x1E0DEB188], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v12 = (_QWORD *)swift_allocObject();
  v12[4] = sub_1B1AEE4F4;
  v12[5] = v11;
  v12[2] = sub_1B1AEE524;
  v12[3] = v11;
  v12[6] = v11;
  swift_allocObject();
  swift_retain_n();
  v13 = sub_1B1ADC904(0x537269446E69616DLL, 0xED00006461657270, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v12, v11, 0, 0,
          0,
          v4,
          0,
          (uint64_t)sub_1B1AEE65C);
  swift_release();
  *(_QWORD *)(v0 + 48) = v13;
  v14 = swift_getKeyPath();
  v15 = (_QWORD *)swift_allocObject();
  v15[4] = sub_1B1AEE4F4;
  v15[5] = v14;
  v15[2] = sub_1B1AEE524;
  v15[3] = v14;
  v15[6] = v14;
  swift_allocObject();
  swift_retain_n();
  v16 = sub_1B1ADC904(0x746E496573696F6ELL, 0xEE00797469736E65, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v15, v14, 0, 0,
          0,
          v4,
          0,
          (uint64_t)sub_1B1AEE65C);
  swift_release();
  *(_QWORD *)(v0 + 56) = v16;
  v17 = swift_getKeyPath();
  v18 = (_QWORD *)swift_allocObject();
  v18[4] = sub_1B1AEE4F4;
  v18[5] = v17;
  v18[2] = sub_1B1AEE524;
  v18[3] = v17;
  v18[6] = v17;
  swift_allocObject();
  swift_retain_n();
  v19 = sub_1B1ADC904(0x6163536573696F6ELL, 0xEA0000000000656CLL, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v18, v17, 0, 0,
          0,
          v4,
          0,
          (uint64_t)sub_1B1AEE65C);
  swift_release();
  *(_QWORD *)(v0 + 64) = v19;
  v20 = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B8100, MEMORY[0x1E0DEB418], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v21 = (_QWORD *)swift_allocObject();
  v21[4] = sub_1B1AEE544;
  v21[5] = v20;
  v21[2] = sub_1B1AEE574;
  v21[3] = v20;
  v21[6] = v20;
  swift_allocObject();
  swift_retain_n();
  v22 = sub_1B1AD6CCC(0xD000000000000010, 0x80000001B232D150, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v21, v20, 0, 0,
          0,
          v4,
          0,
          (uint64_t)sub_1B1AEE594);
  swift_release();
  *(_QWORD *)(v0 + 72) = v22;
  v23 = swift_getKeyPath();
  v24 = (_QWORD *)swift_allocObject();
  v24[4] = sub_1B1AEE4F4;
  v24[5] = v23;
  v24[2] = sub_1B1AEE524;
  v24[3] = v23;
  v24[6] = v23;
  swift_allocObject();
  swift_retain_n();
  v25 = sub_1B1ADC904(0x676E654C70657473, 0xEA00000000006874, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v24, v23, 0, 0,
          0,
          v4,
          0,
          (uint64_t)sub_1B1AEE65C);
  swift_release();
  *(_QWORD *)(v0 + 80) = v25;
  result = sub_1B2228AD0();
  qword_1EEFD5088 = v0;
  return result;
}

uint64_t sub_1B1A41BD8()
{
  char *v0;

  return *v0;
}

uint64_t sub_1B1A41BE0()
{
  return 0x20676E69776F7247;
}

uint64_t sub_1B1A41C04()
{
  return 32;
}

uint64_t sub_1B1A41C0C()
{
  if (qword_1EEF57000 != -1)
    swift_once();
  return swift_bridgeObjectRetain();
}

uint64_t sub_1B1A41C4C(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, &qword_1EEF57000);
}

uint64_t sub_1B1A41C68(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, &qword_1EEF57000, (unint64_t *)&qword_1EEFD5088);
}

uint64_t sub_1B1A41C94(uint64_t a1)
{
  return sub_1B1A2262C(a1, &qword_1EEF57000, &qword_1EEFD5088);
}

uint64_t sub_1B1A41CC0()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E440;
  KeyPath = swift_getKeyPath();
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  v2 = sub_1B1A80674(0x6D6F646E6172, 0xE600000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, KeyPath, 0, 1, 0, 0, 0, 4,
         MEMORY[0x1E0DEE9D8],
         MEMORY[0x1E0DEDCE8]);
  *(_QWORD *)(v2 + 104) = 1101;
  *(_BYTE *)(v2 + 112) = 0;
  *(_QWORD *)(v0 + 32) = v2;
  result = sub_1B2228AD0();
  qword_1EEFD5090 = v0;
  return result;
}

uint64_t sub_1B1A41DDC()
{
  return 0x4449746553;
}

uint64_t sub_1B1A41DF0()
{
  if (qword_1EEF57008 != -1)
    swift_once();
  return swift_bridgeObjectRetain();
}

uint64_t sub_1B1A41E30(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, &qword_1EEF57008);
}

uint64_t sub_1B1A41E4C(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, &qword_1EEF57008, (unint64_t *)&qword_1EEFD5090);
}

uint64_t sub_1B1A41E78(uint64_t a1)
{
  return sub_1B1A2262C(a1, &qword_1EEF57008, &qword_1EEFD5090);
}

uint64_t sub_1B1A41EA4()
{
  uint64_t v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E440;
  KeyPath = swift_getKeyPath();
  sub_1B1AE43E4(0);
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = sub_1B1AEE97C;
  v2[5] = KeyPath;
  v2[2] = sub_1B1AEE9AC;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v3 = sub_1B1ABE88C(0x65676E6172, 0xE500000000000000, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v2, KeyPath, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0);
  swift_release();
  *(_QWORD *)(v0 + 32) = v3;
  result = sub_1B2228AD0();
  qword_1EEFD5098 = v0;
  return result;
}

uint64_t sub_1B1A42000()
{
  return 0x7373614D746553;
}

uint64_t sub_1B1A42018(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, qword_1EEF57010);
}

uint64_t sub_1B1A42034(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, qword_1EEF57010, (unint64_t *)&qword_1EEFD5098);
}

uint64_t sub_1B1A42060(uint64_t a1)
{
  return sub_1B1A2262C(a1, qword_1EEF57010, &qword_1EEFD5098);
}

uint64_t sub_1B1A4208C()
{
  uint64_t v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E450;
  KeyPath = swift_getKeyPath();
  sub_1B1AE43E4(0);
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = sub_1B1AEEAAC;
  v2[5] = KeyPath;
  v2[2] = sub_1B1AEEADC;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v3 = MEMORY[0x1E0DEE9D8];
  v4 = sub_1B1ABE4B0(0x65676E6172, 0xE500000000000000, 0, 0, 0, 1, 0x3F847AE147AE147BLL, 0, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v2, KeyPath, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0);
  swift_release();
  *(_QWORD *)(v0 + 32) = v4;
  v5 = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F0, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v6 = (_QWORD *)swift_allocObject();
  v6[4] = sub_1B1AEEAFC;
  v6[5] = v5;
  v6[2] = sub_1B1AEEB2C;
  v6[3] = v5;
  v6[6] = v5;
  swift_allocObject();
  swift_retain_n();
  v7 = sub_1B1ADE580(0xD000000000000011, 0x80000001B2328980, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v6, v5, 0, 0,
         0,
         v3,
         0,
         (uint64_t)sub_1B1AEEB4C);
  swift_release();
  *(_QWORD *)(v0 + 40) = v7;
  result = sub_1B2228AD0();
  qword_1ED4D0CA0 = v0;
  return result;
}

uint64_t sub_1B1A42300()
{
  return 0x6566694C746553;
}

uint64_t sub_1B1A42318(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, qword_1ED4B8E08);
}

uint64_t sub_1B1A42334(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, qword_1ED4B8E08, (unint64_t *)&qword_1ED4D0CA0);
}

uint64_t sub_1B1A42360(uint64_t a1)
{
  return sub_1B1A2262C(a1, qword_1ED4B8E08, &qword_1ED4D0CA0);
}

uint64_t sub_1B1A4238C()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E4A0;
  KeyPath = swift_getKeyPath();
  v2 = swift_getKeyPath();
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4B8140, MEMORY[0x1E0DEDC60], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v3 = (_QWORD *)swift_allocObject();
  v3[4] = sub_1B1AEED24;
  v3[5] = v2;
  v3[2] = sub_1B1AEED54;
  v3[3] = v2;
  v3[6] = v2;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v4 = MEMORY[0x1E0DEE9D8];
  v5 = sub_1B1ADBDA8(0x6F6974617265706FLL, 0xEE007865646E496ELL, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v3, v2, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0,
         (uint64_t)sub_1B1AEF0D4);
  swift_release();
  sub_1B1A02758(0, &qword_1ED4B8050, (uint64_t)&type metadata for Composition.Operation, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v6 = (_QWORD *)swift_allocObject();
  v6[4] = sub_1B1AEED74;
  v6[5] = KeyPath;
  v6[2] = sub_1B1AEEDA4;
  v6[3] = KeyPath;
  v6[6] = KeyPath;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v7 = sub_1B1ACFF44(0x6F6974617265706FLL, 0xE90000000000006ELL, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v6, KeyPath, 0, 0,
         0,
         v4,
         v5,
         (uint64_t)sub_1B1AEF00C);
  swift_release();
  swift_release();
  *(_QWORD *)(v0 + 32) = v7;
  v8 = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F8, MEMORY[0x1E0DEB188], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v9 = (_QWORD *)swift_allocObject();
  v9[4] = sub_1B1AEEDC4;
  v9[5] = v8;
  v9[2] = sub_1B1AEEDF4;
  v9[3] = v8;
  v9[6] = v8;
  swift_allocObject();
  swift_retain_n();
  v10 = sub_1B1ADC904(0x726F74636166, 0xE600000000000000, 0, 0, 0, 1, 0x3F847AE147AE147BLL, 0, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v9, v8, 0, 0,
          0,
          v4,
          0,
          (uint64_t)sub_1B1AEEF44);
  swift_release();
  *(_QWORD *)(v0 + 40) = v10;
  v11 = swift_getKeyPath();
  sub_1B1AE43E4(0);
  v12 = (_QWORD *)swift_allocObject();
  v12[4] = sub_1B1AEEE14;
  v12[5] = v11;
  v12[2] = sub_1B1AEEE44;
  v12[3] = v11;
  v12[6] = v11;
  swift_allocObject();
  swift_retain_n();
  v13 = sub_1B1AC7D04(0x65676E6172, 0xE500000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v12, v11, 0, 0,
          0,
          v4,
          0);
  swift_release();
  *(_QWORD *)(v0 + 48) = v13;
  v14 = swift_getKeyPath();
  v15 = (_QWORD *)swift_allocObject();
  v15[4] = sub_1B1AEEE14;
  v15[5] = v14;
  v15[2] = sub_1B1AEEE44;
  v15[3] = v14;
  v15[6] = v14;
  swift_allocObject();
  swift_retain_n();
  v16 = sub_1B1AC7D04(0x6E69646165727073, 0xE900000000000067, 0, 0, 0x400921FB54442D18, 0, 0, 1, 0, 1, 0, 1, 0, 3, 0, (uint64_t)v15, v14, 0, 0,
          0,
          v4,
          0);
  swift_release();
  *(_QWORD *)(v0 + 56) = v16;
  result = sub_1B2228AD0();
  qword_1EEFD50A0 = v0;
  return result;
}

uint64_t sub_1B1A428E8()
{
  uint64_t v0;

  return *(char *)(v0 + 16);
}

uint64_t sub_1B1A428F0(uint64_t result)
{
  uint64_t v1;
  char v2;

  v2 = result;
  if ((result & 0xFC) != 0)
    v2 = 4;
  *(_BYTE *)(v1 + 16) = v2;
  return result;
}

uint64_t sub_1B1A42908()
{
  return 0x636F6C6556746553;
}

uint64_t sub_1B1A42928(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, &qword_1EEF57020);
}

uint64_t sub_1B1A42944(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, &qword_1EEF57020, (unint64_t *)&qword_1EEFD50A0);
}

uint64_t sub_1B1A42970(uint64_t a1)
{
  return sub_1B1A2262C(a1, &qword_1EEF57020, &qword_1EEFD50A0);
}

uint64_t sub_1B1A4299C()
{
  uint64_t v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E470;
  KeyPath = swift_getKeyPath();
  sub_1B1AE43E4(0);
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = sub_1B1AEF19C;
  v2[5] = KeyPath;
  v2[2] = sub_1B1AEF1CC;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v3 = MEMORY[0x1E0DEE9D8];
  v4 = sub_1B1ACC78C(120, 0xE100000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 3, 0, (uint64_t)v2, KeyPath, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0);
  swift_release();
  *(_QWORD *)(v0 + 32) = v4;
  v5 = swift_getKeyPath();
  v6 = (_QWORD *)swift_allocObject();
  v6[4] = sub_1B1AEF19C;
  v6[5] = v5;
  v6[2] = sub_1B1AEF1CC;
  v6[3] = v5;
  v6[6] = v5;
  swift_allocObject();
  swift_retain_n();
  v7 = sub_1B1ACC78C(121, 0xE100000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 3, 0, (uint64_t)v6, v5, 0, 0,
         0,
         v3,
         0);
  swift_release();
  *(_QWORD *)(v0 + 40) = v7;
  v8 = swift_getKeyPath();
  v9 = (_QWORD *)swift_allocObject();
  v9[4] = sub_1B1AEF19C;
  v9[5] = v8;
  v9[2] = sub_1B1AEF1CC;
  v9[3] = v8;
  v9[6] = v8;
  swift_allocObject();
  swift_retain_n();
  v10 = sub_1B1ACC78C(122, 0xE100000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 3, 0, (uint64_t)v9, v8, 0, 0,
          0,
          v3,
          0);
  swift_release();
  *(_QWORD *)(v0 + 48) = v10;
  result = sub_1B2228AD0();
  qword_1EEFD50A8 = v0;
  return result;
}

uint64_t sub_1B1A42C94()
{
  return 0x6E6569724F746553;
}

uint64_t sub_1B1A42CB8(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, &qword_1EEF57028);
}

uint64_t sub_1B1A42CD4(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, &qword_1EEF57028, (unint64_t *)&qword_1EEFD50A8);
}

uint64_t sub_1B1A42D00(uint64_t a1)
{
  return sub_1B1A2262C(a1, &qword_1EEF57028, &qword_1EEFD50A8);
}

uint64_t sub_1B1A42D2C()
{
  uint64_t v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E470;
  KeyPath = swift_getKeyPath();
  sub_1B1AE43E4(0);
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = sub_1B1AEF2CC;
  v2[5] = KeyPath;
  v2[2] = sub_1B1AEF2FC;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v3 = MEMORY[0x1E0DEE9D8];
  v4 = sub_1B1AD2578(120, 0xE100000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 3, 0, (uint64_t)v2, KeyPath, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0);
  swift_release();
  *(_QWORD *)(v0 + 32) = v4;
  v5 = swift_getKeyPath();
  v6 = (_QWORD *)swift_allocObject();
  v6[4] = sub_1B1AEF2CC;
  v6[5] = v5;
  v6[2] = sub_1B1AEF2FC;
  v6[3] = v5;
  v6[6] = v5;
  swift_allocObject();
  swift_retain_n();
  v7 = sub_1B1AD2578(121, 0xE100000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 3, 0, (uint64_t)v6, v5, 0, 0,
         0,
         v3,
         0);
  swift_release();
  *(_QWORD *)(v0 + 40) = v7;
  v8 = swift_getKeyPath();
  v9 = (_QWORD *)swift_allocObject();
  v9[4] = sub_1B1AEF2CC;
  v9[5] = v8;
  v9[2] = sub_1B1AEF2FC;
  v9[3] = v8;
  v9[6] = v8;
  swift_allocObject();
  swift_retain_n();
  v10 = sub_1B1AD2578(122, 0xE100000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 3, 0, (uint64_t)v9, v8, 0, 0,
          0,
          v3,
          0);
  swift_release();
  *(_QWORD *)(v0 + 48) = v10;
  result = sub_1B2228AD0();
  qword_1EEFD50B0 = v0;
  return result;
}

unint64_t sub_1B1A43024()
{
  return 0xD000000000000012;
}

uint64_t sub_1B1A43040(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, qword_1EEF57030);
}

uint64_t sub_1B1A4305C(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, qword_1EEF57030, (unint64_t *)&qword_1EEFD50B0);
}

uint64_t sub_1B1A43088(uint64_t a1)
{
  return sub_1B1A2262C(a1, qword_1EEF57030, &qword_1EEFD50B0);
}

uint64_t sub_1B1A430B4()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E4A0;
  KeyPath = swift_getKeyPath();
  v2 = swift_getKeyPath();
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4B8140, MEMORY[0x1E0DEDC60], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v3 = (_QWORD *)swift_allocObject();
  v3[4] = sub_1B1AEF42C;
  v3[5] = v2;
  v3[2] = sub_1B1AEF45C;
  v3[3] = v2;
  v3[6] = v2;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v4 = MEMORY[0x1E0DEE9D8];
  v5 = sub_1B1ADBDA8(0x65646E4965646F6DLL, 0xE900000000000078, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v3, v2, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0,
         (uint64_t)sub_1B1AEF718);
  swift_release();
  sub_1B1A02758(0, &qword_1ED4B80D8, (uint64_t)&type metadata for ScaleMode, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v6 = (_QWORD *)swift_allocObject();
  v6[4] = sub_1B1AEF47C;
  v6[5] = KeyPath;
  v6[2] = sub_1B1AEF4AC;
  v6[3] = KeyPath;
  v6[6] = KeyPath;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v7 = sub_1B1ACE784(1701080941, 0xE400000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v6, KeyPath, 0, 0,
         0,
         v4,
         v5,
         (uint64_t)sub_1B1AEF624);
  swift_release();
  swift_release();
  *(_QWORD *)(v0 + 32) = v7;
  v8 = swift_getKeyPath();
  sub_1B1AE43E4(0);
  v9 = (_QWORD *)swift_allocObject();
  v9[4] = sub_1B1AEF4CC;
  v9[5] = v8;
  v9[2] = sub_1B1AEF4FC;
  v9[3] = v8;
  v9[6] = v8;
  swift_allocObject();
  swift_retain_n();
  v10 = sub_1B1ABEC68(120, 0xE100000000000000, 0, 0, 0, 1, 0x3F847AE147AE147BLL, 0, 0, 1, 3uLL, 0, 0, 4, 0, (uint64_t)v9, v8, 0, 0,
          512,
          v4,
          0);
  swift_release();
  *(_QWORD *)(v0 + 40) = v10;
  v11 = swift_getKeyPath();
  v12 = swift_getKeyPath();
  v13 = (_QWORD *)swift_allocObject();
  v13[4] = sub_1B1AEF4CC;
  v13[5] = v11;
  v13[2] = sub_1B1AEF4FC;
  v13[3] = v11;
  v13[6] = v11;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v14 = sub_1B1ABEC68(121, 0xE100000000000000, 0, 0, 0, 1, 0x3F847AE147AE147BLL, 0, 0, 1, 3uLL, 0, v12, 4, 0, (uint64_t)v13, v11, 0, 0,
          512,
          v4,
          0);
  swift_release();
  swift_release();
  *(_QWORD *)(v0 + 48) = v14;
  v15 = swift_getKeyPath();
  v16 = swift_getKeyPath();
  v17 = (_QWORD *)swift_allocObject();
  v17[4] = sub_1B1AEF4CC;
  v17[5] = v15;
  v17[2] = sub_1B1AEF4FC;
  v17[3] = v15;
  v17[6] = v15;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v18 = sub_1B1ABEC68(122, 0xE100000000000000, 0, 0, 0, 1, 0x3F847AE147AE147BLL, 0, 0, 1, 3uLL, 0, v16, 4, 0, (uint64_t)v17, v15, 0, 0,
          512,
          v4,
          0);
  swift_release();
  swift_release();
  *(_QWORD *)(v0 + 56) = v18;
  result = sub_1B2228AD0();
  qword_1ED4D0CB0 = v0;
  return result;
}

_BYTE *sub_1B1A4361C@<X0>(_BYTE *result@<X0>, BOOL *a2@<X8>)
{
  *a2 = *result != 0;
  return result;
}

_BYTE *sub_1B1A43630@<X0>(_BYTE *result@<X0>, BOOL *a2@<X8>)
{
  *a2 = *result == 2;
  return result;
}

uint64_t sub_1B1A43644()
{
  return 0x657A6953746553;
}

uint64_t sub_1B1A4365C(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, &qword_1ED4B8E28);
}

uint64_t sub_1B1A43678(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, &qword_1ED4B8E28, (unint64_t *)&qword_1ED4D0CB0);
}

uint64_t sub_1B1A436A4(uint64_t a1)
{
  return sub_1B1A2262C(a1, &qword_1ED4B8E28, &qword_1ED4D0CB0);
}

uint64_t sub_1B1A436D0()
{
  uint64_t v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E470;
  KeyPath = swift_getKeyPath();
  sub_1B1AE43E4(0);
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = sub_1B1AEF7E0;
  v2[5] = KeyPath;
  v2[2] = sub_1B1AEF810;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v3 = MEMORY[0x1E0DEE9D8];
  v4 = sub_1B1AC04D4(120, 0xE100000000000000, 0, 0, 0x3FF0000000000000, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v2, KeyPath, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0);
  swift_release();
  *(_QWORD *)(v0 + 32) = v4;
  v5 = swift_getKeyPath();
  v6 = (_QWORD *)swift_allocObject();
  v6[4] = sub_1B1AEF7E0;
  v6[5] = v5;
  v6[2] = sub_1B1AEF810;
  v6[3] = v5;
  v6[6] = v5;
  swift_allocObject();
  swift_retain_n();
  v7 = sub_1B1AC04D4(121, 0xE100000000000000, 0, 0, 0x3FF0000000000000, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v6, v5, 0, 0,
         0,
         v3,
         0);
  swift_release();
  *(_QWORD *)(v0 + 40) = v7;
  v8 = swift_getKeyPath();
  v9 = (_QWORD *)swift_allocObject();
  v9[4] = sub_1B1AEF7E0;
  v9[5] = v8;
  v9[2] = sub_1B1AEF810;
  v9[3] = v8;
  v9[6] = v8;
  swift_allocObject();
  swift_retain_n();
  v10 = sub_1B1AC04D4(122, 0xE100000000000000, 0, 0, 0x3FF0000000000000, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v9, v8, 0, 0,
          0,
          v3,
          0);
  swift_release();
  *(_QWORD *)(v0 + 48) = v10;
  result = sub_1B2228AD0();
  qword_1EEFD50B8 = v0;
  return result;
}

uint64_t sub_1B1A439BC()
{
  return 0x746F766950746553;
}

uint64_t sub_1B1A439D4(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, &qword_1EEF57040);
}

uint64_t sub_1B1A439F0(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, &qword_1EEF57040, (unint64_t *)&qword_1EEFD50B8);
}

uint64_t sub_1B1A43A1C(uint64_t a1)
{
  return sub_1B1A2262C(a1, &qword_1EEF57040, &qword_1EEFD50B8);
}

uint64_t sub_1B1A43A48()
{
  uint64_t v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E440;
  KeyPath = swift_getKeyPath();
  sub_1B1AE43E4(0);
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = sub_1B1AEF910;
  v2[5] = KeyPath;
  v2[2] = sub_1B1AEF940;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v3 = sub_1B1ABF960(0x65676E6172, 0xE500000000000000, 0xC00921FB54442D18, 0, 0x400921FB54442D18, 0, 0, 1, 0, 1, 0, 1, 0, 3, 0, (uint64_t)v2, KeyPath, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0);
  swift_release();
  *(_QWORD *)(v0 + 32) = v3;
  result = sub_1B2228AD0();
  qword_1ED4D0CC8 = v0;
  return result;
}

uint64_t sub_1B1A43BC8()
{
  return 0x656C676E41746553;
}

uint64_t sub_1B1A43BE0(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, qword_1ED4B90C8);
}

uint64_t sub_1B1A43BFC(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, qword_1ED4B90C8, (unint64_t *)&qword_1ED4D0CC8);
}

uint64_t sub_1B1A43C28(uint64_t a1)
{
  return sub_1B1A2262C(a1, qword_1ED4B90C8, &qword_1ED4D0CC8);
}

uint64_t sub_1B1A43C54()
{
  uint64_t v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E440;
  KeyPath = swift_getKeyPath();
  sub_1B1AE43E4(0);
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = sub_1B1AEFA40;
  v2[5] = KeyPath;
  v2[2] = sub_1B1AEFA70;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v3 = sub_1B1ACF7AC(0x65676E6172, 0xE500000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 3, 0, (uint64_t)v2, KeyPath, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0);
  swift_release();
  *(_QWORD *)(v0 + 32) = v3;
  result = sub_1B2228AD0();
  qword_1ED4D0DD0 = v0;
  return result;
}

unint64_t sub_1B1A43DBC()
{
  return 0xD000000000000010;
}

uint64_t sub_1B1A43DD8(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, &qword_1ED4B9B40);
}

uint64_t sub_1B1A43DF4(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, &qword_1ED4B9B40, (unint64_t *)&qword_1ED4D0DD0);
}

uint64_t sub_1B1A43E20(uint64_t a1)
{
  return sub_1B1A2262C(a1, &qword_1ED4B9B40, &qword_1ED4D0DD0);
}

uint64_t sub_1B1A43E4C()
{
  uint64_t v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E440;
  KeyPath = swift_getKeyPath();
  sub_1B1AE43E4(0);
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = sub_1B1AEFB70;
  v2[5] = KeyPath;
  v2[2] = sub_1B1AEFBA0;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v3 = sub_1B1ACEF24(0x65676E6172, 0xE500000000000000, 0, 0, 0x3FF0000000000000, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v2, KeyPath, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0);
  swift_release();
  *(_QWORD *)(v0 + 32) = v3;
  result = sub_1B2228AD0();
  qword_1EEFD50C0 = v0;
  return result;
}

uint64_t sub_1B1A43FA8()
{
  return 0x7574786554746553;
}

uint64_t sub_1B1A43FCC(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, &qword_1EEF57048);
}

uint64_t sub_1B1A43FE8(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, &qword_1EEF57048, (unint64_t *)&qword_1EEFD50C0);
}

uint64_t sub_1B1A44014(uint64_t a1)
{
  return sub_1B1A2262C(a1, &qword_1EEF57048, &qword_1EEFD50C0);
}

uint64_t sub_1B1A44040()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E490;
  KeyPath = swift_getKeyPath();
  v2 = swift_getKeyPath();
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4B8140, MEMORY[0x1E0DEDC60], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v3 = (_QWORD *)swift_allocObject();
  v3[4] = sub_1B1AEFCD0;
  v3[5] = v2;
  v3[2] = sub_1B1AEFD00;
  v3[3] = v2;
  v3[6] = v2;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v4 = MEMORY[0x1E0DEE9D8];
  v5 = sub_1B1ADBDA8(0x6F6974617265706FLL, 0xEE007865646E496ELL, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v3, v2, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0,
         (uint64_t)sub_1B1AF056C);
  swift_release();
  sub_1B1A02758(0, &qword_1ED4B8050, (uint64_t)&type metadata for Composition.Operation, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v6 = (_QWORD *)swift_allocObject();
  v6[4] = sub_1B1AEFD20;
  v6[5] = KeyPath;
  v6[2] = sub_1B1AEFD50;
  v6[3] = KeyPath;
  v6[6] = KeyPath;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v7 = sub_1B1ACFF44(0x6F6974617265706FLL, 0xE90000000000006ELL, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v6, KeyPath, 0, 0,
         0,
         v4,
         v5,
         (uint64_t)sub_1B1AF0480);
  swift_release();
  swift_release();
  *(_QWORD *)(v0 + 32) = v7;
  v8 = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F8, MEMORY[0x1E0DEB188], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v9 = (_QWORD *)swift_allocObject();
  v9[4] = sub_1B1AEFD70;
  v9[5] = v8;
  v9[2] = sub_1B1AEFDA0;
  v9[3] = v8;
  v9[6] = v8;
  swift_allocObject();
  swift_retain_n();
  v10 = sub_1B1ADC904(0x726F74636166, 0xE600000000000000, 0, 0, 0, 1, 0x3F847AE147AE147BLL, 0, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v9, v8, 0, 0,
          0,
          v4,
          0,
          (uint64_t)sub_1B1AF03C0);
  swift_release();
  *(_QWORD *)(v0 + 40) = v10;
  v11 = swift_getKeyPath();
  v12 = swift_getKeyPath();
  v13 = (_QWORD *)swift_allocObject();
  v13[4] = sub_1B1AEFCD0;
  v13[5] = v12;
  v13[2] = sub_1B1AEFD00;
  v13[3] = v12;
  v13[6] = v12;
  swift_allocObject();
  swift_retain_n();
  v14 = sub_1B1ADBDA8(0x65646E4965646F6DLL, 0xE900000000000078, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v13, v12, 0, 0,
          0,
          v4,
          0,
          (uint64_t)sub_1B1AF056C);
  swift_release();
  sub_1B1A02758(0, &qword_1EEF59930, (uint64_t)&type metadata for ParticleColorInit.Mode, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v15 = (_QWORD *)swift_allocObject();
  v15[4] = sub_1B1AEFE08;
  v15[5] = v11;
  v15[2] = sub_1B1AEFE38;
  v15[3] = v11;
  v15[6] = v11;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v16 = sub_1B1ABFD3C(1701080941, 0xE400000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v15, v11, 0, 0,
          0,
          v4,
          v14);
  swift_release();
  swift_release();
  *(_QWORD *)(v0 + 48) = v16;
  v17 = swift_getKeyPath();
  v18 = swift_getKeyPath();
  v19 = (_QWORD *)swift_allocObject();
  v19[4] = sub_1B1AEFD70;
  v19[5] = v17;
  v19[2] = sub_1B1AEFDA0;
  v19[3] = v17;
  v19[6] = v17;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v20 = sub_1B1ADC904(0x6C616353656D6974, 0xE900000000000065, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v18, 1, 0, (uint64_t)v19, v17, 0, 0,
          0,
          v4,
          0,
          (uint64_t)sub_1B1AF03C0);
  swift_release();
  swift_release();
  *(_QWORD *)(v0 + 56) = v20;
  v21 = swift_getKeyPath();
  v22 = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80C8, (uint64_t)&type metadata for ColorRamp, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v23 = (_QWORD *)swift_allocObject();
  v23[4] = sub_1B1AEFEB8;
  v23[5] = v21;
  v23[2] = sub_1B1AEFEE0;
  v23[3] = v21;
  v23[6] = v21;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v24 = sub_1B1AD06E4(1886216562, 0xE400000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v22, 1, 0, (uint64_t)v23, v21, 0, 0,
          0,
          v4,
          0,
          (uint64_t)sub_1B1AF0160);
  swift_release();
  swift_release();
  *(_QWORD *)(v0 + 64) = v24;
  v25 = swift_getKeyPath();
  v26 = swift_getKeyPath();
  sub_1B1AE10E4(0);
  v27 = (_QWORD *)swift_allocObject();
  v27[4] = sub_1B1AEFF18;
  v27[5] = v25;
  v27[2] = sub_1B1AEFF50;
  v27[3] = v25;
  v27[6] = v25;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v28 = sub_1B1AC00F8(0x726F6C6F63, 0xE500000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v26, 6, 0, (uint64_t)v27, v25, 0, 0,
          0,
          v4,
          0);
  swift_release();
  swift_release();
  *(_QWORD *)(v0 + 72) = v28;
  v29 = swift_getKeyPath();
  v30 = (_QWORD *)swift_allocObject();
  v30[4] = sub_1B1AEFD70;
  v30[5] = v29;
  v30[2] = sub_1B1AEFDA0;
  v30[3] = v29;
  v30[6] = v29;
  swift_allocObject();
  swift_retain_n();
  v31 = sub_1B1ADC904(0x7469736E65746E69, 0xE900000000000079, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v30, v29, 0, 0,
          0,
          v4,
          0,
          (uint64_t)sub_1B1AF03C0);
  swift_release();
  *(_QWORD *)(v0 + 80) = v31;
  v32 = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F0, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v33 = (_QWORD *)swift_allocObject();
  v33[4] = sub_1B1AEFF70;
  v33[5] = v32;
  v33[2] = sub_1B1AEFFA0;
  v33[3] = v32;
  v33[6] = v32;
  swift_allocObject();
  swift_retain_n();
  v34 = sub_1B1ADE580(0x4173746365666661, 0xEC0000006168706CLL, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v33, v32, 0, 0,
          0,
          v4,
          0,
          (uint64_t)sub_1B1AEFFC0);
  swift_release();
  *(_QWORD *)(v0 + 88) = v34;
  result = sub_1B2228AD0();
  qword_1EEFD50C8 = v0;
  return result;
}

uint64_t sub_1B1A44A88()
{
  uint64_t v0;

  if (*(_BYTE *)(v0 + 12) == 1)
    return *(unsigned int *)(v0 + 8);
  else
    return 3;
}

uint64_t sub_1B1A44AA4(uint64_t result)
{
  uint64_t v1;

  if (result == 3)
  {
    if ((*(_BYTE *)(v1 + 12) & 1) != 0)
    {
      *(_DWORD *)(v1 + 8) = 1065353216;
      *(_BYTE *)(v1 + 12) = 0;
    }
  }
  else
  {
    if (result == 2)
      *(_DWORD *)(v1 + 8) = 2;
    else
      *(_DWORD *)(v1 + 8) = result == 1;
    *(_BYTE *)(v1 + 12) = 1;
  }
  return result;
}

float sub_1B1A44AFC()
{
  uint64_t v0;
  float result;
  int v2;
  float v3;
  char v4;

  sub_1B1AF0254((int *)(v0 + 8), (uint64_t)&v2);
  sub_1B1AF0254(&v2, (uint64_t)&v3);
  result = v3;
  if (v4)
    return 0.0;
  return result;
}

BOOL sub_1B1A44B40()
{
  uint64_t v0;

  return (*(_BYTE *)(v0 + 12) & 1) == 0;
}

uint64_t sub_1B1A44B50()
{
  uint64_t v0;

  return (*(_DWORD *)(v0 + 8) != 0) | ((*(_BYTE *)(v0 + 12) & 1) == 0);
}

uint64_t sub_1B1A44B6C()
{
  uint64_t v0;

  if (*(_DWORD *)(v0 + 8))
    return 0;
  else
    return *(unsigned __int8 *)(v0 + 12);
}

uint64_t sub_1B1A44B80(uint64_t result, int a2)
{
  uint64_t v2;

  if (result == 3)
  {
    if (*(_BYTE *)(v2 + 4) == 1)
    {
      *(_DWORD *)v2 = a2;
      *(_BYTE *)(v2 + 4) = 0;
    }
  }
  else
  {
    if (result == 2)
      *(_DWORD *)v2 = 2;
    else
      *(_DWORD *)v2 = result == 1;
    *(_BYTE *)(v2 + 4) = 1;
  }
  return result;
}

uint64_t sub_1B1A44BD8()
{
  return 0x726F6C6F43746553;
}

uint64_t sub_1B1A44BF0()
{
  if (qword_1EEF57050 != -1)
    swift_once();
  return swift_bridgeObjectRetain();
}

uint64_t sub_1B1A44C30(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, &qword_1EEF57050);
}

uint64_t sub_1B1A44C4C(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, &qword_1EEF57050, (unint64_t *)&qword_1EEFD50C8);
}

uint64_t sub_1B1A44C78(uint64_t a1)
{
  return sub_1B1A2262C(a1, &qword_1EEF57050, &qword_1EEFD50C8);
}

uint64_t sub_1B1A44CA4()
{
  uint64_t v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E470;
  KeyPath = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F8, MEMORY[0x1E0DEB188], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = sub_1B1AF062C;
  v2[5] = KeyPath;
  v2[2] = sub_1B1AF065C;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v3 = MEMORY[0x1E0DEE9D8];
  v4 = sub_1B1ADC904(0x5464657370616C65, 0xEB00000000656D69, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v2, KeyPath, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0,
         (uint64_t)sub_1B1AF078C);
  swift_release();
  *(_QWORD *)(v0 + 32) = v4;
  v5 = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B8100, MEMORY[0x1E0DEB418], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v6 = (_QWORD *)swift_allocObject();
  v6[4] = sub_1B1AF067C;
  v6[5] = v5;
  v6[2] = sub_1B1AF06AC;
  v6[3] = v5;
  v6[6] = v5;
  swift_allocObject();
  swift_retain_n();
  v7 = sub_1B1AD6CCC(0x65746172656E6567, 0xEE00746E756F4364, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v6, v5, 0, 0,
         0,
         v3,
         0,
         (uint64_t)sub_1B1AF06CC);
  swift_release();
  *(_QWORD *)(v0 + 40) = v7;
  v8 = swift_getKeyPath();
  v9 = (_QWORD *)swift_allocObject();
  v9[4] = sub_1B1AF067C;
  v9[5] = v8;
  v9[2] = sub_1B1AF06AC;
  v9[3] = v8;
  v9[6] = v8;
  swift_allocObject();
  swift_retain_n();
  v10 = sub_1B1AD6CCC(0xD000000000000013, 0x80000001B232D1B0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v9, v8, 0, 0,
          0,
          v3,
          0,
          (uint64_t)sub_1B1AF06CC);
  swift_release();
  *(_QWORD *)(v0 + 48) = v10;
  result = sub_1B2228AD0();
  qword_1ED4D0BE8 = v0;
  return result;
}

uint64_t sub_1B1A45024()
{
  return 0x2072657474696D45;
}

uint64_t sub_1B1A45048()
{
  if (qword_1ED4B8A78 != -1)
    swift_once();
  return swift_bridgeObjectRetain();
}

uint64_t sub_1B1A45088(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, &qword_1ED4B8A78);
}

uint64_t sub_1B1A450A4(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, &qword_1ED4B8A78, (unint64_t *)&qword_1ED4D0BE8);
}

uint64_t sub_1B1A450D0(uint64_t a1)
{
  return sub_1B1A2262C(a1, &qword_1ED4B8A78, &qword_1ED4D0BE8);
}

uint64_t sub_1B1A450FC()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t KeyPath;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  _QWORD *v111;
  uint64_t v112;
  uint64_t result;
  _QWORD *v114;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E510;
  v1 = (_QWORD *)v0;
  KeyPath = swift_getKeyPath();
  v3 = swift_getKeyPath();
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4B8140, MEMORY[0x1E0DEDC60], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v4 = (_QWORD *)swift_allocObject();
  v4[4] = sub_1B1AF08A0;
  v4[5] = v3;
  v4[2] = sub_1B1AF08D0;
  v4[3] = v3;
  v4[6] = v3;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v5 = MEMORY[0x1E0DEE9D8];
  v6 = sub_1B1ADBDA8(0x646E496570616873, 0xEA00000000007865, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v4, v3, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0,
         (uint64_t)sub_1B1AF22B0);
  swift_release();
  sub_1B1A02758(0, &qword_1ED4B8058, (uint64_t)&type metadata for EmitterShape.Shape, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v7 = (_QWORD *)swift_allocObject();
  v7[4] = sub_1B1AF08F0;
  v7[5] = KeyPath;
  v7[2] = sub_1B1AF0920;
  v7[3] = KeyPath;
  v7[6] = KeyPath;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v8 = sub_1B1AB7ED8(0x6570616873, 0xE500000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v7, KeyPath, 0, 0,
         0,
         v5,
         v6);
  swift_release();
  swift_release();
  v1[4] = v8;
  v9 = swift_getKeyPath();
  v10 = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F8, MEMORY[0x1E0DEB188], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v11 = (_QWORD *)swift_allocObject();
  v11[4] = sub_1B1AF0988;
  v11[5] = v9;
  v11[2] = sub_1B1AF09B8;
  v11[3] = v9;
  v11[6] = v9;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v12 = sub_1B1ADC904(0xD000000000000010, 0x80000001B232D1D0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v10, 1, 0, (uint64_t)v11, v9, 0, 0,
          0,
          v5,
          0,
          (uint64_t)sub_1B1AF20C8);
  swift_release();
  swift_release();
  v114 = v1;
  v1[5] = v12;
  v13 = swift_getKeyPath();
  v14 = swift_getKeyPath();
  sub_1B1AE43E4(0);
  v15 = (_QWORD *)swift_allocObject();
  v15[4] = sub_1B1AF0A00;
  v15[5] = v13;
  v15[2] = sub_1B1AF0A30;
  v15[3] = v13;
  v15[6] = v13;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v16 = sub_1B1AB8294(0x4C72616C75676E61, 0xED00007374696D69, 0xC01921FB54442D18, 0, 0x401921FB54442D18, 0, 0, 1, 0, 1, 0, 1, v14, 3, 0, (uint64_t)v15, v13, 0, 0,
          0,
          v5,
          0);
  swift_release();
  swift_release();
  v1[6] = v16;
  v17 = swift_getKeyPath();
  v18 = swift_getKeyPath();
  v19 = swift_getKeyPath();
  v20 = (_QWORD *)swift_allocObject();
  v20[4] = sub_1B1AF08A0;
  v20[5] = v19;
  v20[2] = sub_1B1AF08D0;
  v20[3] = v19;
  v20[6] = v19;
  swift_allocObject();
  swift_retain_n();
  v21 = MEMORY[0x1E0DEE9D8];
  v22 = sub_1B1ADBDA8(0xD000000000000011, 0x80000001B232CFB0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v20, v19, 0, 0,
          0,
          MEMORY[0x1E0DEE9D8],
          0,
          (uint64_t)sub_1B1AF22B0);
  swift_release();
  sub_1B1A02758(0, &qword_1ED4B8088, (uint64_t)&type metadata for ShapeDistribution, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v23 = (_QWORD *)swift_allocObject();
  v23[4] = sub_1B1AF0AF8;
  v23[5] = v17;
  v23[2] = sub_1B1AF0B18;
  v23[3] = v17;
  v23[6] = v17;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  swift_retain();
  v24 = sub_1B1AB8670(0x7562697274736964, 0xEC0000006E6F6974, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v18, 1, 0, (uint64_t)v23, v17, 0, 0,
          0,
          v21,
          v22);
  swift_release();
  swift_release();
  swift_release();
  v114[7] = v24;
  v25 = swift_getKeyPath();
  v26 = swift_getKeyPath();
  v27 = swift_getKeyPath();
  v28 = (_QWORD *)swift_allocObject();
  v28[4] = sub_1B1AF08A0;
  v28[5] = v27;
  v28[2] = sub_1B1AF08D0;
  v28[3] = v27;
  v28[6] = v27;
  swift_allocObject();
  swift_retain_n();
  v29 = MEMORY[0x1E0DEE9D8];
  v30 = sub_1B1ADBDA8(0xD000000000000012, 0x80000001B232D1F0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v28, v27, 0, 0,
          0,
          MEMORY[0x1E0DEE9D8],
          0,
          (uint64_t)sub_1B1AF22B0);
  swift_release();
  sub_1B1A02758(0, &qword_1ED4B8070, (uint64_t)&type metadata for EmissionOrder, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v31 = (_QWORD *)swift_allocObject();
  v31[4] = sub_1B1AF0B88;
  v31[5] = v25;
  v31[2] = sub_1B1AF0BB8;
  v31[3] = v25;
  v31[6] = v25;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  swift_retain();
  v32 = sub_1B1AB8A2C(0x6E6F697373696D65, 0xED0000726564724FLL, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v26, 1, 0, (uint64_t)v31, v25, 0, 0,
          0,
          v29,
          v30);
  swift_release();
  swift_release();
  swift_release();
  v114[8] = v32;
  v33 = swift_getKeyPath();
  v34 = swift_getKeyPath();
  sub_1B1AF0C94(0);
  v35 = (_QWORD *)swift_allocObject();
  v35[4] = sub_1B1AF0C5C;
  v35[5] = v33;
  v35[2] = sub_1B1AF0C8C;
  v35[3] = v33;
  v35[6] = v33;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v36 = sub_1B1AB8DE8(0x656D694464697267, 0xEE00736E6F69736ELL, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v34, 1, 0, (uint64_t)v35, v33, 0, 0,
          0,
          v29,
          0);
  swift_release();
  swift_release();
  v114[9] = v36;
  v37 = swift_getKeyPath();
  v38 = swift_getKeyPath();
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4B8178, MEMORY[0x1E0DEE0F8], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v39 = (_QWORD *)swift_allocObject();
  v39[4] = sub_1B1AF0DA8;
  v39[5] = v37;
  v39[2] = sub_1B1AF0DD8;
  v39[3] = v37;
  v39[6] = v37;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v40 = sub_1B1AD7CEC(0x436D726F66696E75, 0xEC000000746E756FLL, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v38, 1, 0, (uint64_t)v39, v37, 0, 0,
          0,
          v29,
          0,
          (uint64_t)sub_1B1AF1A68);
  swift_release();
  swift_release();
  v114[10] = v40;
  v41 = swift_getKeyPath();
  v42 = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F0, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v43 = (_QWORD *)swift_allocObject();
  v43[4] = sub_1B1AF0DF8;
  v43[5] = v41;
  v43[2] = sub_1B1AF0E28;
  v43[3] = v41;
  v43[6] = v41;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v44 = sub_1B1ADE580(0x75536E4F74696D65, 0xED00006563616672, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v42, 1, 0, (uint64_t)v43, v41, 0, 0,
          0,
          v29,
          0,
          (uint64_t)sub_1B1AF19A8);
  swift_release();
  swift_release();
  v114[11] = v44;
  v45 = swift_getKeyPath();
  v46 = swift_getKeyPath();
  v47 = (_QWORD *)swift_allocObject();
  v47[4] = sub_1B1AF08A0;
  v47[5] = v46;
  v47[2] = sub_1B1AF08D0;
  v47[3] = v46;
  v47[6] = v46;
  swift_allocObject();
  swift_retain_n();
  v48 = sub_1B1ADBDA8(0x6F69746365726964, 0xEE007865646E496ELL, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v47, v46, 0, 0,
          0,
          v29,
          0,
          (uint64_t)sub_1B1AF22B0);
  swift_release();
  sub_1B1A02758(0, &qword_1ED4B8060, (uint64_t)&type metadata for EmitterShape.Direction, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v49 = (_QWORD *)swift_allocObject();
  v49[4] = sub_1B1AF0E70;
  v49[5] = v45;
  v49[2] = sub_1B1AF0E90;
  v49[3] = v45;
  v49[6] = v45;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v50 = sub_1B1AB91C4(0x6F69746365726964, 0xE90000000000006ELL, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v49, v45, 0, 0,
          0,
          v29,
          v48);
  swift_release();
  swift_release();
  v114[12] = v50;
  v51 = swift_getKeyPath();
  v52 = swift_getKeyPath();
  sub_1B1AE015C(0);
  v53 = (_QWORD *)swift_allocObject();
  v53[4] = sub_1B1AF0F08;
  v53[5] = v51;
  v53[2] = sub_1B1AF0F40;
  v53[3] = v51;
  v53[6] = v51;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v54 = sub_1B1AB9580(0x6E6F43646C726F77, 0xED0000746E617473, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v52, 1, 0, (uint64_t)v53, v51, 0, 0,
          0,
          v29,
          0);
  swift_release();
  swift_release();
  v114[13] = v54;
  v55 = swift_getKeyPath();
  v56 = swift_getKeyPath();
  v57 = (_QWORD *)swift_allocObject();
  v57[4] = sub_1B1AF0F08;
  v57[5] = v55;
  v57[2] = sub_1B1AF0F40;
  v57[3] = v55;
  v57[6] = v55;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v58 = sub_1B1AB9580(0x6E6F436C61636F6CLL, 0xED0000746E617473, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v56, 1, 0, (uint64_t)v57, v55, 0, 0,
          0,
          v29,
          0);
  swift_release();
  swift_release();
  v114[14] = v58;
  v59 = swift_getKeyPath();
  sub_1B1AF0FE0(0);
  v60 = (_QWORD *)swift_allocObject();
  v60[4] = sub_1B1AF0FB8;
  v60[5] = v59;
  v60[2] = sub_1B1AF0FD8;
  v60[3] = v59;
  v60[6] = v59;
  swift_allocObject();
  swift_retain_n();
  v61 = sub_1B1ABD450(0x7461746E6569726FLL, 0xEB000000006E6F69, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v60, v59, 0, 0,
          0,
          v29,
          0,
          &qword_1ED4B8010,
          (uint64_t)&type metadata for EmitterShape.Direction,
          (uint64_t)sub_1B1AF1554);
  swift_release();
  v114[15] = v61;
  v62 = swift_getKeyPath();
  v63 = swift_getKeyPath();
  v64 = (_QWORD *)swift_allocObject();
  v64[4] = sub_1B1AF0F08;
  v64[5] = v62;
  v64[2] = sub_1B1AF0F40;
  v64[3] = v62;
  v64[6] = v62;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v65 = sub_1B1AB9580(0x6E6F43646C726F77, 0xED0000746E617473, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v63, 1, 0, (uint64_t)v64, v62, 0, 0,
          0,
          v29,
          0);
  swift_release();
  swift_release();
  v114[16] = v65;
  v66 = swift_getKeyPath();
  v67 = swift_getKeyPath();
  v68 = (_QWORD *)swift_allocObject();
  v68[4] = sub_1B1AF0F08;
  v68[5] = v66;
  v68[2] = sub_1B1AF0F40;
  v68[3] = v66;
  v68[6] = v66;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v69 = sub_1B1AB9580(0x6E6F436C61636F6CLL, 0xED0000746E617473, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v67, 1, 0, (uint64_t)v68, v66, 0, 0,
          0,
          v29,
          0);
  swift_release();
  swift_release();
  v114[17] = v69;
  v70 = swift_getKeyPath();
  v71 = swift_getKeyPath();
  v72 = (_QWORD *)swift_allocObject();
  v72[4] = sub_1B1AF08A0;
  v72[5] = v71;
  v72[2] = sub_1B1AF08D0;
  v72[3] = v71;
  v72[6] = v71;
  swift_allocObject();
  swift_retain_n();
  v73 = sub_1B1ADBDA8(0xD000000000000017, 0x80000001B232D210, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v72, v71, 0, 0,
          0,
          v29,
          0,
          (uint64_t)sub_1B1AF22B0);
  swift_release();
  sub_1B1A02758(0, &qword_1ED4B8090, (uint64_t)&type metadata for MotionDistribution, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v74 = (_QWORD *)swift_allocObject();
  v74[4] = sub_1B1AF1134;
  v74[5] = v70;
  v74[2] = sub_1B1AF1164;
  v74[3] = v70;
  v74[6] = v70;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v75 = sub_1B1AC1444(0xD000000000000012, 0x80000001B2328760, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v74, v70, 0, 0,
          0,
          v29,
          v73,
          (uint64_t)sub_1B1AF142C);
  swift_release();
  swift_release();
  v114[18] = v75;
  v76 = swift_getKeyPath();
  v77 = (_QWORD *)swift_allocObject();
  v77[4] = sub_1B1AF0A00;
  v77[5] = v76;
  v77[2] = sub_1B1AF0A30;
  v77[3] = v76;
  v77[6] = v76;
  swift_allocObject();
  swift_retain_n();
  v78 = v29;
  v79 = sub_1B1AB8294(0x797469636F6C6576, 0xE800000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v77, v76, 0, 0,
          0,
          v29,
          0);
  swift_release();
  v114[19] = v79;
  v80 = swift_getKeyPath();
  v81 = (_QWORD *)swift_allocObject();
  v81[4] = sub_1B1AF0A00;
  v81[5] = v80;
  v81[2] = sub_1B1AF0A30;
  v81[3] = v80;
  v81[6] = v80;
  swift_allocObject();
  swift_retain_n();
  v82 = sub_1B1AB8294(0x6E69646165727073, 0xE900000000000067, 0, 0, 0x400921FB54442D18, 0, 0, 1, 0, 1, 0, 1, 0, 3, 0, (uint64_t)v81, v80, 0, 0,
          0,
          v29,
          0);
  swift_release();
  v114[20] = v82;
  v83 = swift_getKeyPath();
  v84 = (_QWORD *)swift_allocObject();
  v84[4] = sub_1B1AF0F08;
  v84[5] = v83;
  v84[2] = sub_1B1AF0F40;
  v84[3] = v83;
  v84[6] = v83;
  swift_allocObject();
  swift_retain_n();
  v85 = sub_1B1AB9580(0x41746E65676E6174, 0xEB00000000736978, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v84, v83, 0, 0,
          0,
          v29,
          0);
  swift_release();
  v114[21] = v85;
  v86 = swift_getKeyPath();
  v87 = (_QWORD *)swift_allocObject();
  v87[4] = sub_1B1AF0A00;
  v87[5] = v86;
  v87[2] = sub_1B1AF0A30;
  v87[3] = v86;
  v87[6] = v86;
  swift_allocObject();
  swift_retain_n();
  v88 = sub_1B1AB8294(0x46746E65676E6174, 0xEC0000006563726FLL, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v87, v86, 0, 0,
          0,
          v29,
          0);
  swift_release();
  v114[22] = v88;
  v89 = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B8040, (uint64_t)&type metadata for Entity, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v90 = (_QWORD *)swift_allocObject();
  v90[4] = sub_1B1AF1184;
  v90[5] = v89;
  v90[2] = sub_1B1AF11B4;
  v90[3] = v89;
  v90[6] = v89;
  swift_allocObject();
  swift_retain_n();
  v91 = v78;
  v92 = sub_1B1AD9F50(0x65727574786574, 0xE700000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 8, 0, (uint64_t)v90, v89, 0, 0,
          0,
          v78,
          0,
          (uint64_t)sub_1B1AF136C);
  swift_release();
  v114[23] = v92;
  v93 = swift_getKeyPath();
  v94 = swift_getKeyPath();
  v95 = swift_getKeyPath();
  v96 = (_QWORD *)swift_allocObject();
  v96[4] = sub_1B1AF08A0;
  v96[5] = v95;
  v96[2] = sub_1B1AF08D0;
  v96[3] = v95;
  v96[6] = v95;
  swift_allocObject();
  swift_retain_n();
  v97 = v91;
  v98 = sub_1B1ADBDA8(0xD000000000000010, 0x80000001B232D230, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v96, v95, 0, 0,
          0,
          v91,
          0,
          (uint64_t)sub_1B1AF22B0);
  swift_release();
  sub_1B1A02758(0, &qword_1ED4B8048, (uint64_t)&type metadata for AddressMode, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v99 = (_QWORD *)swift_allocObject();
  v99[4] = sub_1B1AF1230;
  v99[5] = v93;
  v99[2] = sub_1B1AF1260;
  v99[3] = v93;
  v99[6] = v93;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  swift_retain();
  v100 = sub_1B1ADB22C(0x4D73736572646461, 0xEB0000000065646FLL, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v94, 1, 0, (uint64_t)v99, v93, 0, 0,
           0,
           v97,
           v98,
           (uint64_t)sub_1B1AF1280);
  swift_release();
  swift_release();
  swift_release();
  v114[24] = v100;
  v101 = swift_getKeyPath();
  v102 = swift_getKeyPath();
  v103 = (_QWORD *)swift_allocObject();
  v103[4] = sub_1B1AF0F08;
  v103[5] = v101;
  v103[2] = sub_1B1AF0F40;
  v103[3] = v101;
  v103[6] = v101;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v104 = sub_1B1AB9580(0x5365727574786574, 0xEC000000656C6163, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v102, 1, 0, (uint64_t)v103, v101, 0, 0,
           0,
           v97,
           0);
  swift_release();
  swift_release();
  v114[25] = v104;
  v105 = swift_getKeyPath();
  v106 = swift_getKeyPath();
  v107 = (_QWORD *)swift_allocObject();
  v107[4] = sub_1B1AF0F08;
  v107[5] = v105;
  v107[2] = sub_1B1AF0F40;
  v107[3] = v105;
  v107[6] = v105;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v108 = sub_1B1AB9580(0x4265727574786574, 0xEB00000000736169, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v106, 1, 0, (uint64_t)v107, v105, 0, 0,
           0,
           v97,
           0);
  swift_release();
  swift_release();
  v114[26] = v108;
  v109 = swift_getKeyPath();
  v110 = swift_getKeyPath();
  v111 = (_QWORD *)swift_allocObject();
  v111[4] = sub_1B1AF0DF8;
  v111[5] = v109;
  v111[2] = sub_1B1AF0E28;
  v111[3] = v109;
  v111[6] = v109;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v112 = sub_1B1ADE580(0x4374697265686E69, 0xEC000000726F6C6FLL, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v110, 1, 0, (uint64_t)v111, v109, 0, 0,
           0,
           v97,
           0,
           (uint64_t)sub_1B1AF19A8);
  swift_release();
  swift_release();
  v114[27] = v112;
  result = sub_1B2228AD0();
  qword_1ED4D0A28 = (uint64_t)v114;
  return result;
}

uint64_t sub_1B1A46F10()
{
  int *v0;

  if (*((_BYTE *)v0 + 4) == 1)
    return qword_1B2279D50[*v0];
  else
    return 5;
}

uint64_t sub_1B1A46F38(uint64_t result)
{
  uint64_t v1;
  char v2;
  int v3;

  v2 = 1;
  v3 = 2;
  switch(result)
  {
    case 1:
      v3 = 1;
      break;
    case 2:
      break;
    case 3:
      v3 = 3;
      break;
    case 4:
      v3 = 4;
      break;
    case 5:
      v2 = 0;
      v3 = 1036831949;
      break;
    case 6:
      v3 = 5;
      break;
    default:
      v3 = 0;
      v2 = 1;
      break;
  }
  *(_DWORD *)v1 = v3;
  *(_BYTE *)(v1 + 4) = v2;
  return result;
}

float sub_1B1A46FA8()
{
  int *v0;
  float result;
  int v2;
  float v3;
  char v4;

  sub_1B1AF2188(v0, (uint64_t)&v2);
  sub_1B1AF2188(&v2, (uint64_t)&v3);
  result = v3;
  if (v4)
    return 0.0;
  return result;
}

BOOL sub_1B1A46FEC()
{
  uint64_t v0;

  return (*(_BYTE *)(v0 + 4) & 1) == 0;
}

uint64_t sub_1B1A46FFC()
{
  uint64_t v0;

  return (*(_DWORD *)v0 != 0) | ((*(_BYTE *)(v0 + 4) & 1) == 0);
}

uint64_t sub_1B1A47018()
{
  uint64_t v0;

  return qword_1B2279D80[*(char *)(v0 + 32)];
}

BOOL sub_1B1A4702C()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + 32) != 2 || *(_OWORD *)(v0 + 16) != 0;
}

uint64_t sub_1B1A47048()
{
  uint64_t v0;

  return *(char *)(v0 + 33);
}

uint64_t sub_1B1A47050(uint64_t result)
{
  uint64_t v1;
  char v2;

  v2 = result;
  if ((result & 0xFC) != 0)
    v2 = 4;
  *(_BYTE *)(v1 + 33) = v2;
  return result;
}

BOOL sub_1B1A47068()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + 32) == 0;
}

BOOL sub_1B1A47078()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + 32) == 1;
}

uint64_t sub_1B1A47088()
{
  uint64_t v0;
  uint64_t result;

  result = *(unsigned __int8 *)(v0 + 64);
  if (*(_BYTE *)(v0 + 64))
  {
    if ((_DWORD)result == 1)
      return 1;
    else
      return *(_QWORD *)(v0 + 48) + 2;
  }
  return result;
}

uint64_t sub_1B1A470AC@<X0>(uint64_t result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  v2 = *(unsigned __int8 *)(result + 64);
  if (!*(_BYTE *)(result + 64))
    goto LABEL_4;
  if ((_DWORD)v2 == 1)
  {
    v2 = 1;
LABEL_4:
    *a2 = v2;
    return result;
  }
  *a2 = *(_QWORD *)(result + 48) + 2;
  return result;
}

uint64_t sub_1B1A470D8(uint64_t result)
{
  uint64_t v1;
  __int128 v2;

  switch(result)
  {
    case 0:
      *(_OWORD *)(v1 + 48) = xmmword_1B2244DD0;
      *(_BYTE *)(v1 + 64) = 0;
      return result;
    case 1:
      *(_OWORD *)(v1 + 48) = xmmword_1B2244DD0;
      *(_BYTE *)(v1 + 64) = 1;
      return result;
    case 2:
      *(_QWORD *)(v1 + 48) = 0;
      *(_QWORD *)(v1 + 56) = 0;
      goto LABEL_8;
    case 3:
      v2 = xmmword_1B2246910;
      goto LABEL_7;
    default:
      v2 = xmmword_1B226E520;
LABEL_7:
      *(_OWORD *)(v1 + 48) = v2;
LABEL_8:
      *(_BYTE *)(v1 + 64) = 2;
      return result;
  }
}

double sub_1B1A47154()
{
  __n128 *v0;
  int8x16_t v1;
  int8x16_t v2;
  double result;
  __n128 v4[2];
  int8x16_t v5;
  __int8 v6;

  sub_1B1AF1518(v0 + 3, v4);
  sub_1B1AF1518(v4, (__n128 *)&v5);
  v1.i32[0] = 0;
  v2.i8[0] = v6;
  *(_QWORD *)&result = vandq_s8(v5, vdupq_lane_s8((int8x8_t)*(_OWORD *)&vceqq_s8(v2, v1), 0)).u64[0];
  return result;
}

BOOL sub_1B1A4719C()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + 64) == 0;
}

double sub_1B1A471AC()
{
  __n128 *v0;
  int8x16_t v1;
  int8x16_t v2;
  double result;
  __n128 v4[2];
  int8x16_t v5;
  __int8 v6;

  sub_1B1AF1518(v0 + 3, v4);
  sub_1B1AF1518(v4, (__n128 *)&v5);
  v1.i8[0] = v6;
  v2.i32[0] = 1;
  *(_QWORD *)&result = vandq_s8(v5, vdupq_lane_s8((int8x8_t)*(_OWORD *)&vceqq_s8(v1, v2), 0)).u64[0];
  return result;
}

BOOL sub_1B1A471F8()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + 64) == 1;
}

double sub_1B1A47208()
{
  uint64_t v0;
  int8x16_t v1;
  int8x16_t v2;
  double result;
  _BYTE v4[32];
  __n128 v5;
  unsigned __int8 v6;
  __n128 v7[2];
  int8x16_t v8;
  __int8 v9;

  sub_1B1A18378(v0 + 80, (uint64_t)v4, &qword_1ED4B8010, (uint64_t)&type metadata for EmitterShape.Direction);
  sub_1B1A18378((uint64_t)v4, (uint64_t)&v5, &qword_1ED4B8010, (uint64_t)&type metadata for EmitterShape.Direction);
  if (v6 == 255)
    return 0.0;
  sub_1B1AF1518(&v5, v7);
  sub_1B1AF1518(v7, (__n128 *)&v8);
  v1.i32[0] = 0;
  v2.i8[0] = v9;
  *(_QWORD *)&result = vandq_s8(v8, vdupq_lane_s8((int8x8_t)*(_OWORD *)&vceqq_s8(v2, v1), 0)).u64[0];
  return result;
}

BOOL sub_1B1A472A4()
{
  uint64_t v0;
  _BYTE v2[32];
  _BYTE v3[32];

  sub_1B1A18378(v0 + 80, (uint64_t)v2, &qword_1ED4B8010, (uint64_t)&type metadata for EmitterShape.Direction);
  sub_1B1A18378((uint64_t)v2, (uint64_t)v3, &qword_1ED4B8010, (uint64_t)&type metadata for EmitterShape.Direction);
  return v3[16] == 0;
}

double sub_1B1A47308()
{
  uint64_t v0;
  int8x16_t v1;
  int8x16_t v2;
  double result;
  _BYTE v4[32];
  __n128 v5;
  unsigned __int8 v6;
  __n128 v7[2];
  int8x16_t v8;
  __int8 v9;

  sub_1B1A18378(v0 + 80, (uint64_t)v4, &qword_1ED4B8010, (uint64_t)&type metadata for EmitterShape.Direction);
  sub_1B1A18378((uint64_t)v4, (uint64_t)&v5, &qword_1ED4B8010, (uint64_t)&type metadata for EmitterShape.Direction);
  if (v6 == 255)
    return 0.0;
  sub_1B1AF1518(&v5, v7);
  sub_1B1AF1518(v7, (__n128 *)&v8);
  v1.i8[0] = v9;
  v2.i32[0] = 1;
  *(_QWORD *)&result = vandq_s8(v8, vdupq_lane_s8((int8x8_t)*(_OWORD *)&vceqq_s8(v1, v2), 0)).u64[0];
  return result;
}

BOOL sub_1B1A473A8()
{
  uint64_t v0;
  _BYTE v2[32];
  _BYTE v3[32];

  sub_1B1A18378(v0 + 80, (uint64_t)v2, &qword_1ED4B8010, (uint64_t)&type metadata for EmitterShape.Direction);
  sub_1B1A18378((uint64_t)v2, (uint64_t)v3, &qword_1ED4B8010, (uint64_t)&type metadata for EmitterShape.Direction);
  return v3[16] == 1;
}

uint64_t sub_1B1A4740C()
{
  uint64_t v0;

  return *(char *)(v0 + 97);
}

uint64_t sub_1B1A47414(uint64_t result)
{
  uint64_t v1;
  char v2;

  v2 = result;
  if (result >= 3u)
    v2 = 3;
  *(_BYTE *)(v1 + 97) = v2;
  return result;
}

uint64_t sub_1B1A4742C()
{
  uint64_t v0;

  return *(char *)(v0 + 160);
}

uint64_t sub_1B1A47434(uint64_t result)
{
  uint64_t v1;
  char v2;

  v2 = result;
  if ((result & 0xFC) != 0)
    v2 = 4;
  *(_BYTE *)(v1 + 160) = v2;
  return result;
}

uint64_t sub_1B1A4744C(uint64_t result)
{
  uint64_t v1;
  int v2;
  char v3;

  v2 = 1;
  v3 = 1;
  switch(result)
  {
    case 1:
      break;
    case 2:
      v2 = 2;
      break;
    case 3:
      v2 = 3;
      break;
    case 4:
      v2 = 4;
      break;
    case 5:
      v3 = 0;
      v2 = 1036831949;
      break;
    case 6:
      v2 = 5;
      break;
    default:
      v2 = 0;
      v3 = 1;
      break;
  }
  *(_DWORD *)v1 = v2;
  *(_BYTE *)(v1 + 4) = v3;
  return result;
}

uint64_t sub_1B1A474BC(uint64_t result)
{
  uint64_t v1;
  __int128 v2;

  switch(result)
  {
    case 0:
      *(_OWORD *)v1 = xmmword_1B2244DD0;
      *(_BYTE *)(v1 + 16) = 0;
      return result;
    case 1:
      *(_OWORD *)v1 = xmmword_1B2244DD0;
      *(_BYTE *)(v1 + 16) = 1;
      return result;
    case 2:
      *(_QWORD *)v1 = 0;
      *(_QWORD *)(v1 + 8) = 0;
      goto LABEL_8;
    case 3:
      v2 = xmmword_1B2246910;
      goto LABEL_7;
    default:
      v2 = xmmword_1B226E520;
LABEL_7:
      *(_OWORD *)v1 = v2;
LABEL_8:
      *(_BYTE *)(v1 + 16) = 2;
      return result;
  }
}

uint64_t sub_1B1A47534()
{
  return 0x2072657474696D45;
}

uint64_t sub_1B1A47558()
{
  return 49283104;
}

uint64_t sub_1B1A47564()
{
  if (qword_1ED4B7FF0 != -1)
    swift_once();
  return swift_bridgeObjectRetain();
}

uint64_t sub_1B1A475A4(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, &qword_1ED4B7FF0);
}

uint64_t sub_1B1A475C0(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, &qword_1ED4B7FF0, (unint64_t *)&qword_1ED4D0A28);
}

uint64_t sub_1B1A475EC(uint64_t a1)
{
  return sub_1B1A2262C(a1, &qword_1ED4B7FF0, &qword_1ED4D0A28);
}

uint64_t sub_1B1A47618()
{
  uint64_t v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E480;
  KeyPath = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B8040, (uint64_t)&type metadata for Entity, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = sub_1B1AF2370;
  v2[5] = KeyPath;
  v2[2] = sub_1B1AF23A0;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v3 = MEMORY[0x1E0DEE9D8];
  v4 = sub_1B1AD9F50(0x636143746E696F70, 0xEA00000000006568, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 10, 0, (uint64_t)v2, KeyPath, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0,
         (uint64_t)sub_1B1AF2980);
  swift_release();
  *(_QWORD *)(v0 + 32) = v4;
  v5 = swift_getKeyPath();
  sub_1B1AE43E4(0);
  v6 = (_QWORD *)swift_allocObject();
  v6[4] = sub_1B1AF23C0;
  v6[5] = v5;
  v6[2] = sub_1B1AF23F0;
  v6[3] = v5;
  v6[6] = v5;
  swift_allocObject();
  swift_retain_n();
  v7 = sub_1B1AC1068(0x797469636F6C6576, 0xED000065676E6152, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v6, v5, 0, 0,
         0,
         v3,
         0);
  swift_release();
  *(_QWORD *)(v0 + 40) = v7;
  v8 = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F0, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v9 = (_QWORD *)swift_allocObject();
  v9[4] = sub_1B1AF2410;
  v9[5] = v8;
  v9[2] = sub_1B1AF2440;
  v9[3] = v8;
  v9[6] = v8;
  swift_allocObject();
  swift_retain_n();
  v10 = sub_1B1ADE580(0x5074697265686E69, 0xEF6E6F697469736FLL, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v9, v8, 0, 0,
          0,
          v3,
          0,
          (uint64_t)sub_1B1AF27D8);
  swift_release();
  *(_QWORD *)(v0 + 48) = v10;
  v11 = swift_getKeyPath();
  v12 = (_QWORD *)swift_allocObject();
  v12[4] = sub_1B1AF2410;
  v12[5] = v11;
  v12[2] = sub_1B1AF2440;
  v12[3] = v11;
  v12[6] = v11;
  swift_allocObject();
  swift_retain_n();
  v13 = sub_1B1ADE580(0x4374697265686E69, 0xEC000000726F6C6FLL, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v12, v11, 0, 0,
          0,
          v3,
          0,
          (uint64_t)sub_1B1AF27D8);
  swift_release();
  *(_QWORD *)(v0 + 56) = v13;
  v14 = swift_getKeyPath();
  v15 = (_QWORD *)swift_allocObject();
  v15[4] = sub_1B1AF2410;
  v15[5] = v14;
  v15[2] = sub_1B1AF2440;
  v15[3] = v14;
  v15[6] = v14;
  swift_allocObject();
  swift_retain_n();
  v16 = sub_1B1ADE580(0x5674697265686E69, 0xEF797469636F6C65, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v15, v14, 0, 0,
          0,
          v3,
          0,
          (uint64_t)sub_1B1AF27D8);
  swift_release();
  *(_QWORD *)(v0 + 64) = v16;
  v17 = swift_getKeyPath();
  v18 = (_QWORD *)swift_allocObject();
  v18[4] = sub_1B1AF2410;
  v18[5] = v17;
  v18[2] = sub_1B1AF2440;
  v18[3] = v17;
  v18[6] = v17;
  swift_allocObject();
  swift_retain_n();
  v19 = sub_1B1ADE580(0xD000000000000012, 0x80000001B23289F0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v18, v17, 0, 0,
          0,
          v3,
          0,
          (uint64_t)sub_1B1AF27D8);
  swift_release();
  *(_QWORD *)(v0 + 72) = v19;
  v20 = swift_getKeyPath();
  v21 = (_QWORD *)swift_allocObject();
  v21[4] = sub_1B1AF2410;
  v21[5] = v20;
  v21[2] = sub_1B1AF2440;
  v21[3] = v20;
  v21[6] = v20;
  swift_allocObject();
  swift_retain_n();
  v22 = sub_1B1ADE580(0x5374697265686E69, 0xEB00000000657A69, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v21, v20, 0, 0,
          0,
          v3,
          0,
          (uint64_t)sub_1B1AF27D8);
  swift_release();
  *(_QWORD *)(v0 + 80) = v22;
  v23 = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F8, MEMORY[0x1E0DEB188], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v24 = (_QWORD *)swift_allocObject();
  v24[4] = sub_1B1AF2460;
  v24[5] = v23;
  v24[2] = sub_1B1AF2490;
  v24[3] = v23;
  v24[6] = v23;
  swift_allocObject();
  swift_retain_n();
  v25 = sub_1B1ADC904(0x72546E6F69746F6DLL, 0xEF74726566736E61, 0, 0, 0x4000000000000000, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v24, v23, 0, 0,
          0,
          v3,
          0,
          (uint64_t)sub_1B1AF2710);
  swift_release();
  *(_QWORD *)(v0 + 88) = v25;
  v26 = swift_getKeyPath();
  v27 = swift_getKeyPath();
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4B8140, MEMORY[0x1E0DEDC60], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v28 = (_QWORD *)swift_allocObject();
  v28[4] = sub_1B1AF24E0;
  v28[5] = v27;
  v28[2] = sub_1B1AF2510;
  v28[3] = v27;
  v28[6] = v27;
  swift_allocObject();
  swift_retain_n();
  v29 = sub_1B1ADBDA8(0xD000000000000017, 0x80000001B232D210, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v28, v27, 0, 0,
          0,
          v3,
          0,
          (uint64_t)sub_1B1AF2648);
  swift_release();
  sub_1B1A02758(0, &qword_1ED4B8090, (uint64_t)&type metadata for MotionDistribution, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v30 = (_QWORD *)swift_allocObject();
  v30[4] = sub_1B1AF2530;
  v30[5] = v26;
  v30[2] = sub_1B1AF2560;
  v30[3] = v26;
  v30[6] = v26;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v31 = sub_1B1AC1444(0xD000000000000012, 0x80000001B2328760, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v30, v26, 0, 0,
          0,
          v3,
          v29,
          (uint64_t)sub_1B1AF2580);
  swift_release();
  swift_release();
  *(_QWORD *)(v0 + 96) = v31;
  result = sub_1B2228AD0();
  qword_1EEFD50D0 = v0;
  return result;
}

uint64_t sub_1B1A47FF8()
{
  uint64_t v0;

  return *(char *)(v0 + 29);
}

uint64_t sub_1B1A48000(uint64_t result)
{
  uint64_t v1;
  char v2;

  v2 = result;
  if (result >= 3u)
    v2 = 3;
  *(_BYTE *)(v1 + 29) = v2;
  return result;
}

unint64_t sub_1B1A48018()
{
  return 0xD000000000000011;
}

uint64_t sub_1B1A48034(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, &qword_1EEF57058);
}

uint64_t sub_1B1A48050(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, &qword_1EEF57058, (unint64_t *)&qword_1EEFD50D0);
}

uint64_t sub_1B1A4807C(uint64_t a1)
{
  return sub_1B1A2262C(a1, &qword_1EEF57058, &qword_1EEFD50D0);
}

uint64_t sub_1B1A480A8()
{
  uint64_t v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E500;
  KeyPath = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B8040, (uint64_t)&type metadata for Entity, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = sub_1B1AF2A48;
  v2[5] = KeyPath;
  v2[2] = sub_1B1AF2A78;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v3 = MEMORY[0x1E0DEE9D8];
  v4 = sub_1B1AD9F50(0x636143746E696F70, 0xEA00000000006568, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 10, 0, (uint64_t)v2, KeyPath, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0,
         (uint64_t)sub_1B1AF2BB0);
  swift_release();
  *(_QWORD *)(v0 + 32) = v4;
  v5 = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F0, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v6 = (_QWORD *)swift_allocObject();
  v6[4] = sub_1B1AF2A98;
  v6[5] = v5;
  v6[2] = sub_1B1AF2AC8;
  v6[3] = v5;
  v6[6] = v5;
  swift_allocObject();
  swift_retain_n();
  v7 = sub_1B1ADE580(0xD000000000000013, 0x80000001B232D290, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v6, v5, 0, 0,
         0,
         v3,
         0,
         (uint64_t)sub_1B1AF2AE8);
  swift_release();
  *(_QWORD *)(v0 + 40) = v7;
  v8 = swift_getKeyPath();
  v9 = (_QWORD *)swift_allocObject();
  v9[4] = sub_1B1AF2A98;
  v9[5] = v8;
  v9[2] = sub_1B1AF2AC8;
  v9[3] = v8;
  v9[6] = v8;
  swift_allocObject();
  swift_retain_n();
  v10 = sub_1B1ADE580(0x4374697265686E69, 0xEC000000726F6C6FLL, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v9, v8, 0, 0,
          0,
          v3,
          0,
          (uint64_t)sub_1B1AF2AE8);
  swift_release();
  *(_QWORD *)(v0 + 48) = v10;
  v11 = swift_getKeyPath();
  v12 = (_QWORD *)swift_allocObject();
  v12[4] = sub_1B1AF2A98;
  v12[5] = v11;
  v12[2] = sub_1B1AF2AC8;
  v12[3] = v11;
  v12[6] = v11;
  swift_allocObject();
  swift_retain_n();
  v13 = sub_1B1ADE580(0xD000000000000012, 0x80000001B23289F0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v12, v11, 0, 0,
          0,
          v3,
          0,
          (uint64_t)sub_1B1AF2AE8);
  swift_release();
  *(_QWORD *)(v0 + 56) = v13;
  v14 = swift_getKeyPath();
  v15 = (_QWORD *)swift_allocObject();
  v15[4] = sub_1B1AF2A98;
  v15[5] = v14;
  v15[2] = sub_1B1AF2AC8;
  v15[3] = v14;
  v15[6] = v14;
  swift_allocObject();
  swift_retain_n();
  v16 = sub_1B1ADE580(0x5374697265686E69, 0xEB00000000657A69, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v15, v14, 0, 0,
          0,
          v3,
          0,
          (uint64_t)sub_1B1AF2AE8);
  swift_release();
  *(_QWORD *)(v0 + 64) = v16;
  result = sub_1B2228AD0();
  qword_1EEFD50D8 = v0;
  return result;
}

unint64_t sub_1B1A485D4()
{
  return 0xD000000000000011;
}

uint64_t sub_1B1A485F0()
{
  return 49283088;
}

uint64_t sub_1B1A485FC(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, &qword_1EEF57060);
}

uint64_t sub_1B1A48618(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, &qword_1EEF57060, (unint64_t *)&qword_1EEFD50D8);
}

uint64_t sub_1B1A48644(uint64_t a1)
{
  return sub_1B1A2262C(a1, &qword_1EEF57060, &qword_1EEFD50D8);
}

uint64_t sub_1B1A48670()
{
  uint64_t v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E470;
  KeyPath = swift_getKeyPath();
  sub_1B1AE43E4(0);
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = sub_1B1AF2C78;
  v2[5] = KeyPath;
  v2[2] = sub_1B1AF2CA8;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v3 = MEMORY[0x1E0DEE9D8];
  v4 = sub_1B1AD4D78(0x74657366664F78, 0xE700000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v2, KeyPath, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0);
  swift_release();
  *(_QWORD *)(v0 + 32) = v4;
  v5 = swift_getKeyPath();
  v6 = (_QWORD *)swift_allocObject();
  v6[4] = sub_1B1AF2C78;
  v6[5] = v5;
  v6[2] = sub_1B1AF2CA8;
  v6[3] = v5;
  v6[6] = v5;
  swift_allocObject();
  swift_retain_n();
  v7 = sub_1B1AD4D78(0x74657366664F79, 0xE700000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v6, v5, 0, 0,
         0,
         v3,
         0);
  swift_release();
  *(_QWORD *)(v0 + 40) = v7;
  v8 = swift_getKeyPath();
  v9 = (_QWORD *)swift_allocObject();
  v9[4] = sub_1B1AF2C78;
  v9[5] = v8;
  v9[2] = sub_1B1AF2CA8;
  v9[3] = v8;
  v9[6] = v8;
  swift_allocObject();
  swift_retain_n();
  v10 = sub_1B1AD4D78(0x74657366664F7ALL, 0xE700000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v9, v8, 0, 0,
          0,
          v3,
          0);
  swift_release();
  *(_QWORD *)(v0 + 48) = v10;
  result = sub_1B2228AD0();
  qword_1EEFD50E0 = v0;
  return result;
}

unint64_t sub_1B1A48980()
{
  return 0xD000000000000015;
}

uint64_t sub_1B1A4899C(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, qword_1EEF57068);
}

uint64_t sub_1B1A489B8(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, qword_1EEF57068, (unint64_t *)&qword_1EEFD50E0);
}

uint64_t sub_1B1A489E4(uint64_t a1)
{
  return sub_1B1A2262C(a1, qword_1EEF57068, &qword_1EEFD50E0);
}

uint64_t sub_1B1A48A10()
{
  unint64_t v0;
  uint64_t result;

  if (swift_dynamicCastMetatype())
    return 0x61656E694C746553;
  v0 = 0xD000000000000010;
  if (swift_dynamicCastMetatype())
    return v0;
  if (swift_dynamicCastMetatype())
    return 0xD000000000000011;
  result = sub_1B2229688();
  __break(1u);
  return result;
}

uint64_t sub_1B1A48B04(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *KeyPath;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1B226E470;
  type metadata accessor for PropertyDescription();
  KeyPath = (uint64_t *)swift_getKeyPath();
  type metadata accessor for ParticleFloat3Init(0, a1, a2, v6);
  sub_1B1AED5E4(0, (unint64_t *)&qword_1ED4BA5A8, MEMORY[0x1E0DEB188], MEMORY[0x1E0DEB1B0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEB848]);
  v8 = v7;
  v9 = MEMORY[0x1E0DEE9D8];
  v10 = sub_1B1BF4D50(120, 0xE100000000000000, KeyPath, v7, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0,
          0,
          MEMORY[0x1E0DEE9D8],
          0,
          (uint64_t)&off_1E63942E0);
  swift_release();
  *(_QWORD *)(v4 + 32) = v10;
  v11 = (uint64_t *)swift_getKeyPath();
  v12 = sub_1B1BF4D50(121, 0xE100000000000000, v11, v8, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0,
          0,
          v9,
          0,
          (uint64_t)&off_1E63942E0);
  swift_release();
  *(_QWORD *)(v4 + 40) = v12;
  v13 = (uint64_t *)swift_getKeyPath();
  v14 = sub_1B1BF4D50(122, 0xE100000000000000, v13, v8, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0,
          0,
          v9,
          0,
          (uint64_t)&off_1E63942E0);
  swift_release();
  *(_QWORD *)(v4 + 48) = v14;
  sub_1B2228AD0();
  return v4;
}

uint64_t sub_1B1A48D78()
{
  return sub_1B1A48A10();
}

uint64_t sub_1B1A48D80(uint64_t a1)
{
  return sub_1B1ADE558(a1, (uint64_t)&off_1E6394298);
}

uint64_t sub_1B1A48D8C(uint64_t a1)
{
  return sub_1B1A48B04(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
}

uint64_t sub_1B1A48D98(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1B1A22024(a1, a2, a3, a4, a5, (uint64_t)&off_1E6394298);
}

uint64_t sub_1B1A48DA4(uint64_t a1, uint64_t a2)
{
  return sub_1B1A22CEC(a1, a2, (uint64_t)&off_1E6394298);
}

uint64_t sub_1B1A48DB0()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E4A0;
  KeyPath = swift_getKeyPath();
  v2 = swift_getKeyPath();
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4B8140, MEMORY[0x1E0DEDC60], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v3 = (_QWORD *)swift_allocObject();
  v3[4] = sub_1B1AF2DD8;
  v3[5] = v2;
  v3[2] = sub_1B1AF2E08;
  v3[3] = v2;
  v3[6] = v2;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v4 = MEMORY[0x1E0DEE9D8];
  v5 = sub_1B1ADBDA8(0x6F6974617265706FLL, 0xEE007865646E496ELL, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v3, v2, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0,
         (uint64_t)sub_1B1AF3284);
  swift_release();
  sub_1B1A02758(0, &qword_1ED4B8050, (uint64_t)&type metadata for Composition.Operation, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v6 = (_QWORD *)swift_allocObject();
  v6[4] = sub_1B1AF2E28;
  v6[5] = KeyPath;
  v6[2] = sub_1B1AF2E58;
  v6[3] = KeyPath;
  v6[6] = KeyPath;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v7 = sub_1B1ACFF44(0x6F6974617265706FLL, 0xE90000000000006ELL, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v6, KeyPath, 0, 0,
         0,
         v4,
         v5,
         (uint64_t)sub_1B1AF31BC);
  swift_release();
  swift_release();
  *(_QWORD *)(v0 + 32) = v7;
  v8 = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F8, MEMORY[0x1E0DEB188], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v9 = (_QWORD *)swift_allocObject();
  v9[4] = sub_1B1AF2E78;
  v9[5] = v8;
  v9[2] = sub_1B1AF2EA8;
  v9[3] = v8;
  v9[6] = v8;
  swift_allocObject();
  swift_retain_n();
  v10 = sub_1B1ADC904(0x726F74636166, 0xE600000000000000, 0, 0, 0, 1, 0x3F847AE147AE147BLL, 0, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v9, v8, 0, 0,
          0,
          v4,
          0,
          (uint64_t)sub_1B1AF30F4);
  swift_release();
  *(_QWORD *)(v0 + 40) = v10;
  v11 = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80C8, (uint64_t)&type metadata for ColorRamp, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v12 = (_QWORD *)swift_allocObject();
  v12[4] = sub_1B1AF2EC8;
  v12[5] = v11;
  v12[2] = sub_1B1AF2EF0;
  v12[3] = v11;
  v12[6] = v11;
  swift_allocObject();
  swift_retain_n();
  v13 = sub_1B1AD06E4(1886216562, 0xE400000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v12, v11, 0, 0,
          0,
          v4,
          0,
          (uint64_t)sub_1B1AF3028);
  swift_release();
  *(_QWORD *)(v0 + 48) = v13;
  v14 = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F0, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v15 = (_QWORD *)swift_allocObject();
  v15[4] = sub_1B1AF2F10;
  v15[5] = v14;
  v15[2] = sub_1B1AF2F40;
  v15[3] = v14;
  v15[6] = v14;
  swift_allocObject();
  swift_retain_n();
  v16 = sub_1B1ADE580(0x4173746365666661, 0xEC0000006168706CLL, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v15, v14, 0, 0,
          0,
          v4,
          0,
          (uint64_t)sub_1B1AF2F60);
  swift_release();
  *(_QWORD *)(v0 + 56) = v16;
  result = sub_1B2228AD0();
  qword_1ED4D0D98 = v0;
  return result;
}

uint64_t sub_1B1A49338()
{
  return 0x65764F726F6C6F43;
}

uint64_t sub_1B1A4935C()
{
  return 64;
}

uint64_t sub_1B1A49364(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, &qword_1ED4B9840);
}

uint64_t sub_1B1A49380(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, &qword_1ED4B9840, (unint64_t *)&qword_1ED4D0D98);
}

uint64_t sub_1B1A493AC(uint64_t a1)
{
  return sub_1B1A2262C(a1, &qword_1ED4B9840, &qword_1ED4D0D98);
}

uint64_t sub_1B1A493D8()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E530;
  KeyPath = swift_getKeyPath();
  v2 = swift_getKeyPath();
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4B8140, MEMORY[0x1E0DEDC60], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v3 = (_QWORD *)swift_allocObject();
  v3[4] = sub_1B1AF337C;
  v3[5] = v2;
  v3[2] = sub_1B1AF33AC;
  v3[3] = v2;
  v3[6] = v2;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v4 = MEMORY[0x1E0DEE9D8];
  v5 = sub_1B1ADBDA8(0x6F6974617265706FLL, 0xEE007865646E496ELL, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v3, v2, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0,
         (uint64_t)sub_1B1AF3880);
  swift_release();
  sub_1B1A02758(0, &qword_1ED4B8050, (uint64_t)&type metadata for Composition.Operation, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v6 = (_QWORD *)swift_allocObject();
  v6[4] = sub_1B1AF33CC;
  v6[5] = KeyPath;
  v6[2] = sub_1B1AF33FC;
  v6[3] = KeyPath;
  v6[6] = KeyPath;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v7 = sub_1B1ACFF44(0x6F6974617265706FLL, 0xE90000000000006ELL, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v6, KeyPath, 0, 0,
         0,
         v4,
         v5,
         (uint64_t)sub_1B1AF3798);
  swift_release();
  swift_release();
  *(_QWORD *)(v0 + 32) = v7;
  v8 = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F8, MEMORY[0x1E0DEB188], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v9 = (_QWORD *)swift_allocObject();
  v9[4] = sub_1B1AF341C;
  v9[5] = v8;
  v9[2] = sub_1B1AF344C;
  v9[3] = v8;
  v9[6] = v8;
  swift_allocObject();
  swift_retain_n();
  v10 = sub_1B1ADC904(0x726F74636166, 0xE600000000000000, 0, 0, 0, 1, 0x3F847AE147AE147BLL, 0, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v9, v8, 0, 0,
          0,
          v4,
          0,
          (uint64_t)sub_1B1AF36D0);
  swift_release();
  *(_QWORD *)(v0 + 40) = v10;
  v11 = swift_getKeyPath();
  v12 = swift_getKeyPath();
  v13 = (_QWORD *)swift_allocObject();
  v13[4] = sub_1B1AF337C;
  v13[5] = v12;
  v13[2] = sub_1B1AF33AC;
  v13[3] = v12;
  v13[6] = v12;
  swift_allocObject();
  swift_retain_n();
  v14 = sub_1B1ADBDA8(0x65646E4965646F6DLL, 0xE900000000000078, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v13, v12, 0, 0,
          0,
          v4,
          0,
          (uint64_t)sub_1B1AF3880);
  swift_release();
  sub_1B1A02758(0, &qword_1ED4B80D8, (uint64_t)&type metadata for ScaleMode, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v15 = (_QWORD *)swift_allocObject();
  v15[4] = sub_1B1AF349C;
  v15[5] = v11;
  v15[2] = sub_1B1AF34CC;
  v15[3] = v11;
  v15[6] = v11;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v16 = sub_1B1ACE784(1701080941, 0xE400000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v15, v11, 0, 0,
          0,
          v4,
          v14,
          (uint64_t)sub_1B1AF3608);
  swift_release();
  swift_release();
  *(_QWORD *)(v0 + 48) = v16;
  v17 = swift_getKeyPath();
  sub_1B1AE6B80(0);
  v18 = (_QWORD *)swift_allocObject();
  v18[4] = sub_1B1AF34EC;
  v18[5] = v17;
  v18[2] = sub_1B1AF351C;
  v18[3] = v17;
  v18[6] = v17;
  swift_allocObject();
  swift_retain_n();
  v19 = sub_1B1AC7564(120, 0xE100000000000000, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v18, v17, 0, 0,
          0,
          v4,
          0);
  swift_release();
  *(_QWORD *)(v0 + 56) = v19;
  v20 = swift_getKeyPath();
  v21 = swift_getKeyPath();
  v22 = (_QWORD *)swift_allocObject();
  v22[4] = sub_1B1AF34EC;
  v22[5] = v20;
  v22[2] = sub_1B1AF351C;
  v22[3] = v20;
  v22[6] = v20;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v23 = sub_1B1AC7564(121, 0xE100000000000000, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, v21, 1, 0, (uint64_t)v22, v20, 0, 0,
          0,
          v4,
          0);
  swift_release();
  swift_release();
  *(_QWORD *)(v0 + 64) = v23;
  v24 = swift_getKeyPath();
  v25 = swift_getKeyPath();
  v26 = (_QWORD *)swift_allocObject();
  v26[4] = sub_1B1AF34EC;
  v26[5] = v24;
  v26[2] = sub_1B1AF351C;
  v26[3] = v24;
  v26[6] = v24;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v27 = sub_1B1AC7564(122, 0xE100000000000000, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, v25, 1, 0, (uint64_t)v26, v24, 0, 0,
          0,
          v4,
          0);
  swift_release();
  swift_release();
  *(_QWORD *)(v0 + 72) = v27;
  result = sub_1B2228AD0();
  qword_1EEFD50E8 = v0;
  return result;
}

uint64_t sub_1B1A49BE0()
{
  uint64_t v0;

  return *(char *)(v0 + 8);
}

uint64_t sub_1B1A49BE8(uint64_t result)
{
  uint64_t v1;
  char v2;

  v2 = result;
  if (result >= 3u)
    v2 = 3;
  *(_BYTE *)(v1 + 8) = v2;
  return result;
}

uint64_t sub_1B1A49C00()
{
  return 0x7265764F657A6953;
}

uint64_t sub_1B1A49C20(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, &qword_1EEF57078);
}

uint64_t sub_1B1A49C3C(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, &qword_1EEF57078, (unint64_t *)&qword_1EEFD50E8);
}

uint64_t sub_1B1A49C68(uint64_t a1)
{
  return sub_1B1A2262C(a1, &qword_1EEF57078, &qword_1EEFD50E8);
}

uint64_t sub_1B1A49C94()
{
  uint64_t v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E440;
  KeyPath = swift_getKeyPath();
  sub_1B1AE6B80(0);
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = sub_1B1AF3948;
  v2[5] = KeyPath;
  v2[2] = sub_1B1AF3978;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v3 = sub_1B1ACC3B0(0x7974696361706FLL, 0xE700000000000000, 0, 0, 0x3FF0000000000000, 0, 0x3F847AE147AE147BLL, 0, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v2, KeyPath, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0);
  swift_release();
  *(_QWORD *)(v0 + 32) = v3;
  result = sub_1B2228AD0();
  qword_1EEFD50F0 = v0;
  return result;
}

uint64_t sub_1B1A49E00()
{
  return 0x4F7974696361704FLL;
}

uint64_t sub_1B1A49E24(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, &qword_1EEF57080);
}

uint64_t sub_1B1A49E40(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, &qword_1EEF57080, (unint64_t *)&qword_1EEFD50F0);
}

uint64_t sub_1B1A49E6C(uint64_t a1)
{
  return sub_1B1A2262C(a1, &qword_1EEF57080, &qword_1EEFD50F0);
}

uint64_t sub_1B1A49E98()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E4A0;
  KeyPath = swift_getKeyPath();
  v2 = swift_getKeyPath();
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4B8140, MEMORY[0x1E0DEDC60], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v3 = (_QWORD *)swift_allocObject();
  v3[4] = sub_1B1AF3B08;
  v3[5] = v2;
  v3[2] = sub_1B1AF3B38;
  v3[3] = v2;
  v3[6] = v2;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v4 = MEMORY[0x1E0DEE9D8];
  v5 = sub_1B1ADBDA8(0x6F6974617265706FLL, 0xEE007865646E496ELL, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v3, v2, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0,
         (uint64_t)sub_1B1AF3FCC);
  swift_release();
  sub_1B1A02758(0, &qword_1ED4B8050, (uint64_t)&type metadata for Composition.Operation, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v6 = (_QWORD *)swift_allocObject();
  v6[4] = sub_1B1AF3B58;
  v6[5] = KeyPath;
  v6[2] = sub_1B1AF3B88;
  v6[3] = KeyPath;
  v6[6] = KeyPath;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v7 = sub_1B1ACFF44(0x6F6974617265706FLL, 0xE90000000000006ELL, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v6, KeyPath, 0, 0,
         0,
         v4,
         v5,
         (uint64_t)sub_1B1AF3F04);
  swift_release();
  swift_release();
  *(_QWORD *)(v0 + 32) = v7;
  v8 = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F8, MEMORY[0x1E0DEB188], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v9 = (_QWORD *)swift_allocObject();
  v9[4] = sub_1B1AF3BA8;
  v9[5] = v8;
  v9[2] = sub_1B1AF3BD8;
  v9[3] = v8;
  v9[6] = v8;
  swift_allocObject();
  swift_retain_n();
  v10 = sub_1B1ADC904(0x726F74636166, 0xE600000000000000, 0, 0, 0, 1, 0x3F847AE147AE147BLL, 0, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v9, v8, 0, 0,
          0,
          v4,
          0,
          (uint64_t)sub_1B1AF3E3C);
  swift_release();
  *(_QWORD *)(v0 + 40) = v10;
  v11 = swift_getKeyPath();
  sub_1B1AE43E4(0);
  v12 = (_QWORD *)swift_allocObject();
  v12[4] = sub_1B1AF3BF8;
  v12[5] = v11;
  v12[2] = sub_1B1AF3C28;
  v12[3] = v11;
  v12[6] = v11;
  swift_allocObject();
  swift_retain_n();
  v13 = sub_1B1AD0308(0x65676E6172, 0xE500000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v12, v11, 0, 0,
          0,
          v4,
          0);
  swift_release();
  *(_QWORD *)(v0 + 48) = v13;
  v14 = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80C8, (uint64_t)&type metadata for ColorRamp, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v15 = (_QWORD *)swift_allocObject();
  v15[4] = sub_1B1AF3C48;
  v15[5] = v14;
  v15[2] = sub_1B1AF3C70;
  v15[3] = v14;
  v15[6] = v14;
  swift_allocObject();
  swift_retain_n();
  v16 = sub_1B1AD06E4(1886216562, 0xE400000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v15, v14, 0, 0,
          0,
          v4,
          0,
          (uint64_t)sub_1B1AF3C90);
  swift_release();
  *(_QWORD *)(v0 + 56) = v16;
  result = sub_1B2228AD0();
  qword_1EEFD50F8 = v0;
  return result;
}

unint64_t sub_1B1A4A3F4()
{
  return 0xD000000000000011;
}

uint64_t sub_1B1A4A410(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, &qword_1EEF57088);
}

uint64_t sub_1B1A4A42C(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, &qword_1EEF57088, (unint64_t *)&qword_1EEFD50F8);
}

uint64_t sub_1B1A4A458(uint64_t a1)
{
  return sub_1B1A2262C(a1, &qword_1EEF57088, &qword_1EEFD50F8);
}

uint64_t sub_1B1A4A484()
{
  uint64_t v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E450;
  KeyPath = swift_getKeyPath();
  sub_1B1AE43E4(0);
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = sub_1B1AF4094;
  v2[5] = KeyPath;
  v2[2] = sub_1B1AF40C4;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v3 = MEMORY[0x1E0DEE9D8];
  v4 = sub_1B1AD34A8(0x65676E6172, 0xE500000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v2, KeyPath, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0);
  swift_release();
  *(_QWORD *)(v0 + 32) = v4;
  v5 = swift_getKeyPath();
  sub_1B1AE6B80(0);
  v6 = (_QWORD *)swift_allocObject();
  v6[4] = sub_1B1AF40E4;
  v6[5] = v5;
  v6[2] = sub_1B1AF4114;
  v6[3] = v5;
  v6[6] = v5;
  swift_allocObject();
  swift_retain_n();
  v7 = sub_1B1AD3884(0x6576727563, 0xE500000000000000, 0, 0, 0x3FF0000000000000, 0, 0x3F847AE147AE147BLL, 0, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v6, v5, 0, 0,
         0,
         v3,
         0);
  swift_release();
  *(_QWORD *)(v0 + 40) = v7;
  result = sub_1B2228AD0();
  qword_1EEFD5100 = v0;
  return result;
}

unint64_t sub_1B1A4A6CC()
{
  return 0xD000000000000013;
}

uint64_t sub_1B1A4A6E8(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, &qword_1EEF57090);
}

uint64_t sub_1B1A4A704(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, &qword_1EEF57090, (unint64_t *)&qword_1EEFD5100);
}

uint64_t sub_1B1A4A730(uint64_t a1)
{
  return sub_1B1A2262C(a1, &qword_1EEF57090, &qword_1EEFD5100);
}

uint64_t sub_1B1A4A75C()
{
  uint64_t v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E450;
  KeyPath = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F8, MEMORY[0x1E0DEB188], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = sub_1B1AF42E0;
  v2[5] = KeyPath;
  v2[2] = sub_1B1AF4310;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v3 = MEMORY[0x1E0DEE9D8];
  v4 = sub_1B1ADC904(0x726F74636166, 0xE600000000000000, 0, 0, 0x3FF0000000000000, 0, 0x3F847AE147AE147BLL, 0, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v2, KeyPath, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0,
         (uint64_t)sub_1B1AF45AC);
  swift_release();
  *(_QWORD *)(v0 + 32) = v4;
  v5 = swift_getKeyPath();
  v6 = swift_getKeyPath();
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4B8140, MEMORY[0x1E0DEDC60], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v7 = (_QWORD *)swift_allocObject();
  v7[4] = sub_1B1AF4350;
  v7[5] = v6;
  v7[2] = sub_1B1AF4380;
  v7[3] = v6;
  v7[6] = v6;
  swift_allocObject();
  swift_retain_n();
  v8 = sub_1B1ADBDA8(0xD000000000000012, 0x80000001B232D3A0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v7, v6, 0, 0,
         0,
         v3,
         0,
         (uint64_t)sub_1B1AF44E4);
  swift_release();
  sub_1B1A02758(0, &qword_1EEF59B38, (uint64_t)&type metadata for OrientationOverVelocity.DirectionAxis, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v9 = (_QWORD *)swift_allocObject();
  v9[4] = sub_1B1AF43A0;
  v9[5] = v5;
  v9[2] = sub_1B1AF43D0;
  v9[3] = v5;
  v9[6] = v5;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v10 = sub_1B1ACBFF4(0x6F69746365726964, 0xED0000736978416ELL, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v9, v5, 0, 0,
          0,
          v3,
          v8);
  swift_release();
  swift_release();
  *(_QWORD *)(v0 + 40) = v10;
  result = sub_1B2228AD0();
  qword_1EEFD5108 = v0;
  return result;
}

unint64_t sub_1B1A4AAF8()
{
  return 0xD000000000000017;
}

uint64_t sub_1B1A4AB14(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, &qword_1EEF57098);
}

uint64_t sub_1B1A4AB30(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, &qword_1EEF57098, (unint64_t *)&qword_1EEFD5108);
}

uint64_t sub_1B1A4AB5C(uint64_t a1)
{
  return sub_1B1A2262C(a1, &qword_1EEF57098, &qword_1EEFD5108);
}

uint64_t sub_1B1A4AB88()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E4C0;
  KeyPath = swift_getKeyPath();
  v2 = swift_getKeyPath();
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4B8140, MEMORY[0x1E0DEDC60], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v3 = (_QWORD *)swift_allocObject();
  v3[4] = sub_1B1AF46A4;
  v3[5] = v2;
  v3[2] = sub_1B1AF46D4;
  v3[3] = v2;
  v3[6] = v2;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v4 = MEMORY[0x1E0DEE9D8];
  v5 = sub_1B1ADBDA8(0x6F6974617265706FLL, 0xEE007865646E496ELL, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v3, v2, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0,
         (uint64_t)sub_1B1AF4B9C);
  swift_release();
  sub_1B1A02758(0, &qword_1ED4B8050, (uint64_t)&type metadata for Composition.Operation, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v6 = (_QWORD *)swift_allocObject();
  v6[4] = sub_1B1AF46F4;
  v6[5] = KeyPath;
  v6[2] = sub_1B1AF4724;
  v6[3] = KeyPath;
  v6[6] = KeyPath;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v7 = sub_1B1ACFF44(0x6F6974617265706FLL, 0xE90000000000006ELL, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v6, KeyPath, 0, 0,
         0,
         v4,
         v5,
         (uint64_t)sub_1B1AF4AD4);
  swift_release();
  swift_release();
  *(_QWORD *)(v0 + 32) = v7;
  v8 = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F8, MEMORY[0x1E0DEB188], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v9 = (_QWORD *)swift_allocObject();
  v9[4] = sub_1B1AF4744;
  v9[5] = v8;
  v9[2] = sub_1B1AF4774;
  v9[3] = v8;
  v9[6] = v8;
  swift_allocObject();
  swift_retain_n();
  v10 = sub_1B1ADC904(0x726F74636166, 0xE600000000000000, 0, 0, 0, 1, 0x3F847AE147AE147BLL, 0, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v9, v8, 0, 0,
          0,
          v4,
          0,
          (uint64_t)sub_1B1AF4A0C);
  swift_release();
  *(_QWORD *)(v0 + 40) = v10;
  v11 = swift_getKeyPath();
  v12 = swift_getKeyPath();
  v13 = (_QWORD *)swift_allocObject();
  v13[4] = sub_1B1AF46A4;
  v13[5] = v12;
  v13[2] = sub_1B1AF46D4;
  v13[3] = v12;
  v13[6] = v12;
  swift_allocObject();
  swift_retain_n();
  v14 = sub_1B1ADBDA8(0x65646E4965646F6DLL, 0xE900000000000078, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v13, v12, 0, 0,
          0,
          v4,
          0,
          (uint64_t)sub_1B1AF4B9C);
  swift_release();
  sub_1B1A02758(0, &qword_1ED4B80D8, (uint64_t)&type metadata for ScaleMode, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v15 = (_QWORD *)swift_allocObject();
  v15[4] = sub_1B1AF47C4;
  v15[5] = v11;
  v15[2] = sub_1B1AF47F4;
  v15[3] = v11;
  v15[6] = v11;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v16 = sub_1B1ACE784(1701080941, 0xE400000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v15, v11, 0, 0,
          0,
          v4,
          v14,
          (uint64_t)sub_1B1AF4944);
  swift_release();
  swift_release();
  *(_QWORD *)(v0 + 48) = v16;
  v17 = swift_getKeyPath();
  sub_1B1AE43E4(0);
  v18 = (_QWORD *)swift_allocObject();
  v18[4] = sub_1B1AF4814;
  v18[5] = v17;
  v18[2] = sub_1B1AF4844;
  v18[3] = v17;
  v18[6] = v17;
  swift_allocObject();
  swift_retain_n();
  v19 = sub_1B1ACEB48(0x797469636F6C6576, 0xED000065676E6152, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v18, v17, 0, 0,
          0,
          v4,
          0);
  swift_release();
  *(_QWORD *)(v0 + 56) = v19;
  v20 = swift_getKeyPath();
  v21 = (_QWORD *)swift_allocObject();
  v21[4] = sub_1B1AF4814;
  v21[5] = v20;
  v21[2] = sub_1B1AF4844;
  v21[3] = v20;
  v21[6] = v20;
  swift_allocObject();
  swift_retain_n();
  v22 = sub_1B1ACEB48(120, 0xE100000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v21, v20, 0, 0,
          0,
          v4,
          0);
  swift_release();
  *(_QWORD *)(v0 + 64) = v22;
  v23 = swift_getKeyPath();
  v24 = swift_getKeyPath();
  v25 = (_QWORD *)swift_allocObject();
  v25[4] = sub_1B1AF4814;
  v25[5] = v23;
  v25[2] = sub_1B1AF4844;
  v25[3] = v23;
  v25[6] = v23;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v26 = sub_1B1ACEB48(121, 0xE100000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v24, 1, 0, (uint64_t)v25, v23, 0, 0,
          0,
          v4,
          0);
  swift_release();
  swift_release();
  *(_QWORD *)(v0 + 72) = v26;
  v27 = swift_getKeyPath();
  v28 = swift_getKeyPath();
  v29 = (_QWORD *)swift_allocObject();
  v29[4] = sub_1B1AF4814;
  v29[5] = v27;
  v29[2] = sub_1B1AF4844;
  v29[3] = v27;
  v29[6] = v27;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v30 = sub_1B1ACEB48(122, 0xE100000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v28, 1, 0, (uint64_t)v29, v27, 0, 0,
          0,
          v4,
          0);
  swift_release();
  swift_release();
  *(_QWORD *)(v0 + 80) = v30;
  result = sub_1B2228AD0();
  qword_1EEFD5110 = v0;
  return result;
}

unint64_t sub_1B1A4B468()
{
  return 0xD000000000000010;
}

uint64_t sub_1B1A4B484(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, &qword_1EEF570A0);
}

uint64_t sub_1B1A4B4A0(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, &qword_1EEF570A0, (unint64_t *)&qword_1EEFD5110);
}

uint64_t sub_1B1A4B4CC(uint64_t a1)
{
  return sub_1B1A2262C(a1, &qword_1EEF570A0, &qword_1EEFD5110);
}

uint64_t sub_1B1A4B4F8()
{
  uint64_t v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E490;
  KeyPath = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F8, MEMORY[0x1E0DEB188], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = sub_1B1AF4C64;
  v2[5] = KeyPath;
  v2[2] = sub_1B1AF4C94;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v3 = MEMORY[0x1E0DEE9D8];
  v4 = sub_1B1ADC904(0x7366664F7466656CLL, 0xEA00000000007465, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v2, KeyPath, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0,
         (uint64_t)sub_1B1AF4DCC);
  swift_release();
  *(_QWORD *)(v0 + 32) = v4;
  v5 = swift_getKeyPath();
  v6 = (_QWORD *)swift_allocObject();
  v6[4] = sub_1B1AF4C64;
  v6[5] = v5;
  v6[2] = sub_1B1AF4C94;
  v6[3] = v5;
  v6[6] = v5;
  swift_allocObject();
  swift_retain_n();
  v7 = sub_1B1ADC904(0x66664F7468676972, 0xEB00000000746573, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v6, v5, 0, 0,
         0,
         v3,
         0,
         (uint64_t)sub_1B1AF4DCC);
  swift_release();
  *(_QWORD *)(v0 + 40) = v7;
  v8 = swift_getKeyPath();
  v9 = (_QWORD *)swift_allocObject();
  v9[4] = sub_1B1AF4C64;
  v9[5] = v8;
  v9[2] = sub_1B1AF4C94;
  v9[3] = v8;
  v9[6] = v8;
  swift_allocObject();
  swift_retain_n();
  v10 = sub_1B1ADC904(0x657366664F706F74, 0xE900000000000074, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v9, v8, 0, 0,
          0,
          v3,
          0,
          (uint64_t)sub_1B1AF4DCC);
  swift_release();
  *(_QWORD *)(v0 + 48) = v10;
  v11 = swift_getKeyPath();
  v12 = (_QWORD *)swift_allocObject();
  v12[4] = sub_1B1AF4C64;
  v12[5] = v11;
  v12[2] = sub_1B1AF4C94;
  v12[3] = v11;
  v12[6] = v11;
  swift_allocObject();
  swift_retain_n();
  v13 = sub_1B1ADC904(0x664F6D6F74746F62, 0xEC00000074657366, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v12, v11, 0, 0,
          0,
          v3,
          0,
          (uint64_t)sub_1B1AF4DCC);
  swift_release();
  *(_QWORD *)(v0 + 56) = v13;
  v14 = swift_getKeyPath();
  v15 = (_QWORD *)swift_allocObject();
  v15[4] = sub_1B1AF4C64;
  v15[5] = v14;
  v15[2] = sub_1B1AF4C94;
  v15[3] = v14;
  v15[6] = v14;
  swift_allocObject();
  swift_retain_n();
  v16 = sub_1B1ADC904(1918985582, 0xE400000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v15, v14, 0, 0,
          0,
          v3,
          0,
          (uint64_t)sub_1B1AF4DCC);
  swift_release();
  *(_QWORD *)(v0 + 64) = v16;
  v17 = swift_getKeyPath();
  v18 = (_QWORD *)swift_allocObject();
  v18[4] = sub_1B1AF4C64;
  v18[5] = v17;
  v18[2] = sub_1B1AF4C94;
  v18[3] = v17;
  v18[6] = v17;
  swift_allocObject();
  swift_retain_n();
  v19 = sub_1B1ADC904(7496038, 0xE300000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v18, v17, 0, 0,
          0,
          v3,
          0,
          (uint64_t)sub_1B1AF4DCC);
  swift_release();
  *(_QWORD *)(v0 + 72) = v19;
  v20 = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F0, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v21 = (_QWORD *)swift_allocObject();
  v21[4] = sub_1B1AF4CB4;
  v21[5] = v20;
  v21[2] = sub_1B1AF4CE4;
  v21[3] = v20;
  v21[6] = v20;
  swift_allocObject();
  swift_retain_n();
  v22 = sub_1B1ADE580(0x7073726550657375, 0xEE00657669746365, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v21, v20, 0, 0,
          0,
          v3,
          0,
          (uint64_t)sub_1B1AF4D04);
  swift_release();
  *(_QWORD *)(v0 + 80) = v22;
  v23 = swift_getKeyPath();
  v24 = (_QWORD *)swift_allocObject();
  v24[4] = sub_1B1AF4CB4;
  v24[5] = v23;
  v24[2] = sub_1B1AF4CE4;
  v24[3] = v23;
  v24[6] = v23;
  swift_allocObject();
  swift_retain_n();
  v25 = sub_1B1ADE580(0x756C6F56776F6873, 0xEA0000000000656DLL, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v24, v23, 0, 0,
          0,
          v3,
          0,
          (uint64_t)sub_1B1AF4D04);
  swift_release();
  *(_QWORD *)(v0 + 88) = v25;
  result = sub_1B2228AD0();
  qword_1EEFD5118 = v0;
  return result;
}

unint64_t sub_1B1A4BC90()
{
  return 0xD000000000000010;
}

uint64_t sub_1B1A4BCAC(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, &qword_1EEF570A8);
}

uint64_t sub_1B1A4BCC8(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, &qword_1EEF570A8, (unint64_t *)&qword_1EEFD5118);
}

uint64_t sub_1B1A4BCF4(uint64_t a1)
{
  return sub_1B1A2262C(a1, &qword_1EEF570A8, &qword_1EEFD5118);
}

uint64_t sub_1B1A4BD20()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E4C0;
  KeyPath = swift_getKeyPath();
  v2 = swift_getKeyPath();
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4B8140, MEMORY[0x1E0DEDC60], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v3 = (_QWORD *)swift_allocObject();
  v3[4] = sub_1B1AF4EC4;
  v3[5] = v2;
  v3[2] = sub_1B1AF4EF4;
  v3[3] = v2;
  v3[6] = v2;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v4 = MEMORY[0x1E0DEE9D8];
  v5 = sub_1B1ADBDA8(0x6F6974617265706FLL, 0xEE007865646E496ELL, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v3, v2, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0,
         (uint64_t)sub_1B1AF54D4);
  swift_release();
  sub_1B1A02758(0, &qword_1ED4B8050, (uint64_t)&type metadata for Composition.Operation, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v6 = (_QWORD *)swift_allocObject();
  v6[4] = sub_1B1AF4F14;
  v6[5] = KeyPath;
  v6[2] = sub_1B1AF4F44;
  v6[3] = KeyPath;
  v6[6] = KeyPath;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v7 = sub_1B1ACFF44(0x6F6974617265706FLL, 0xE90000000000006ELL, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v6, KeyPath, 0, 0,
         0,
         v4,
         v5,
         (uint64_t)sub_1B1AF540C);
  swift_release();
  swift_release();
  *(_QWORD *)(v0 + 32) = v7;
  v8 = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F8, MEMORY[0x1E0DEB188], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v9 = (_QWORD *)swift_allocObject();
  v9[4] = sub_1B1AF4F64;
  v9[5] = v8;
  v9[2] = sub_1B1AF4F94;
  v9[3] = v8;
  v9[6] = v8;
  swift_allocObject();
  swift_retain_n();
  v10 = sub_1B1ADC904(0x726F74636166, 0xE600000000000000, 0, 0, 0, 1, 0x3F847AE147AE147BLL, 0, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v9, v8, 0, 0,
          0,
          v4,
          0,
          (uint64_t)sub_1B1AF5344);
  swift_release();
  *(_QWORD *)(v0 + 40) = v10;
  v11 = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B8040, (uint64_t)&type metadata for Entity, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v12 = (_QWORD *)swift_allocObject();
  v12[4] = sub_1B1AF4FB4;
  v12[5] = v11;
  v12[2] = sub_1B1AF4FE4;
  v12[3] = v11;
  v12[6] = v11;
  swift_allocObject();
  swift_retain_n();
  v13 = sub_1B1AD9F50(0x65727574786574, 0xE700000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 8, 0, (uint64_t)v12, v11, 0, 0,
          0,
          v4,
          0,
          (uint64_t)sub_1B1AF527C);
  swift_release();
  *(_QWORD *)(v0 + 48) = v13;
  v14 = swift_getKeyPath();
  v15 = swift_getKeyPath();
  v16 = (_QWORD *)swift_allocObject();
  v16[4] = sub_1B1AF4EC4;
  v16[5] = v15;
  v16[2] = sub_1B1AF4EF4;
  v16[3] = v15;
  v16[6] = v15;
  swift_allocObject();
  swift_retain_n();
  v17 = sub_1B1ADBDA8(0xD000000000000010, 0x80000001B232D230, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v16, v15, 0, 0,
          0,
          v4,
          0,
          (uint64_t)sub_1B1AF54D4);
  swift_release();
  sub_1B1A02758(0, &qword_1ED4B8048, (uint64_t)&type metadata for AddressMode, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v18 = (_QWORD *)swift_allocObject();
  v18[4] = sub_1B1AF5034;
  v18[5] = v14;
  v18[2] = sub_1B1AF5064;
  v18[3] = v14;
  v18[6] = v14;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v19 = sub_1B1ADB22C(0x4D73736572646461, 0xEB0000000065646FLL, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v18, v14, 0, 0,
          0,
          v4,
          v17,
          (uint64_t)sub_1B1AF51B4);
  swift_release();
  swift_release();
  *(_QWORD *)(v0 + 56) = v19;
  v20 = swift_getKeyPath();
  sub_1B1AE1F14(0);
  v21 = (_QWORD *)swift_allocObject();
  v21[4] = sub_1B1AF5084;
  v21[5] = v20;
  v21[2] = sub_1B1AF50B4;
  v21[3] = v20;
  v21[6] = v20;
  swift_allocObject();
  swift_retain_n();
  v22 = sub_1B1ACD470(0x656C616373, 0xE500000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v21, v20, 0, 0,
          0,
          v4,
          0);
  swift_release();
  *(_QWORD *)(v0 + 64) = v22;
  v23 = swift_getKeyPath();
  v24 = (_QWORD *)swift_allocObject();
  v24[4] = sub_1B1AF5084;
  v24[5] = v23;
  v24[2] = sub_1B1AF50B4;
  v24[3] = v23;
  v24[6] = v23;
  swift_allocObject();
  swift_retain_n();
  v25 = sub_1B1ACD470(1935763810, 0xE400000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v24, v23, 0, 0,
          0,
          v4,
          0);
  swift_release();
  *(_QWORD *)(v0 + 72) = v25;
  v26 = swift_getKeyPath();
  v27 = (_QWORD *)swift_allocObject();
  v27[4] = sub_1B1AF4F64;
  v27[5] = v26;
  v27[2] = sub_1B1AF4F94;
  v27[3] = v26;
  v27[6] = v26;
  swift_allocObject();
  swift_retain_n();
  v28 = sub_1B1ADC904(0x656C676E61, 0xE500000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v27, v26, 0, 0,
          0,
          v4,
          0,
          (uint64_t)sub_1B1AF5344);
  swift_release();
  *(_QWORD *)(v0 + 80) = v28;
  result = sub_1B2228AD0();
  qword_1EEFD5120 = v0;
  return result;
}

unint64_t sub_1B1A4C60C()
{
  return 0xD000000000000010;
}

uint64_t sub_1B1A4C628(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, &qword_1EEF570B0);
}

uint64_t sub_1B1A4C644(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, &qword_1EEF570B0, (unint64_t *)&qword_1EEFD5120);
}

uint64_t sub_1B1A4C670(uint64_t a1)
{
  return sub_1B1A2262C(a1, &qword_1EEF570B0, &qword_1EEFD5120);
}

uint64_t sub_1B1A4C69C()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E540;
  KeyPath = swift_getKeyPath();
  v2 = swift_getKeyPath();
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4B8140, MEMORY[0x1E0DEDC60], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v3 = (_QWORD *)swift_allocObject();
  v3[4] = sub_1B1AF55CC;
  v3[5] = v2;
  v3[2] = sub_1B1AF55FC;
  v3[3] = v2;
  v3[6] = v2;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v4 = MEMORY[0x1E0DEE9D8];
  v5 = sub_1B1ADBDA8(0x6F6974617265706FLL, 0xEE007865646E496ELL, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v3, v2, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0,
         (uint64_t)sub_1B1AF5FE0);
  swift_release();
  sub_1B1A02758(0, &qword_1ED4B8050, (uint64_t)&type metadata for Composition.Operation, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v6 = (_QWORD *)swift_allocObject();
  v6[4] = sub_1B1AF561C;
  v6[5] = KeyPath;
  v6[2] = sub_1B1AF564C;
  v6[3] = KeyPath;
  v6[6] = KeyPath;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v7 = sub_1B1ACFF44(0x6F6974617265706FLL, 0xE90000000000006ELL, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v6, KeyPath, 0, 0,
         0,
         v4,
         v5,
         (uint64_t)sub_1B1AF5F20);
  swift_release();
  swift_release();
  *(_QWORD *)(v0 + 32) = v7;
  v8 = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F8, MEMORY[0x1E0DEB188], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v9 = (_QWORD *)swift_allocObject();
  v9[4] = sub_1B1AF566C;
  v9[5] = v8;
  v9[2] = sub_1B1AF569C;
  v9[3] = v8;
  v9[6] = v8;
  swift_allocObject();
  swift_retain_n();
  v10 = v4;
  v11 = sub_1B1ADC904(0x726F74636166, 0xE600000000000000, 0, 0, 0, 1, 0x3F847AE147AE147BLL, 0, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v9, v8, 0, 0,
          0,
          v4,
          0,
          (uint64_t)sub_1B1AF5E60);
  swift_release();
  *(_QWORD *)(v0 + 40) = v11;
  v12 = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B8040, (uint64_t)&type metadata for Entity, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v13 = (_QWORD *)swift_allocObject();
  v13[4] = sub_1B1AF56BC;
  v13[5] = v12;
  v13[2] = sub_1B1AF56EC;
  v13[3] = v12;
  v13[6] = v12;
  swift_allocObject();
  swift_retain_n();
  v14 = sub_1B1AD9F50(0x65727574786574, 0xE700000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 8, 0, (uint64_t)v13, v12, 0, 0,
          0,
          v4,
          0,
          (uint64_t)sub_1B1AF5DA0);
  swift_release();
  *(_QWORD *)(v0 + 48) = v14;
  v15 = swift_getKeyPath();
  v16 = swift_getKeyPath();
  v17 = (_QWORD *)swift_allocObject();
  v17[4] = sub_1B1AF55CC;
  v17[5] = v16;
  v17[2] = sub_1B1AF55FC;
  v17[3] = v16;
  v17[6] = v16;
  swift_allocObject();
  swift_retain_n();
  v18 = sub_1B1ADBDA8(0x496C656E6E616863, 0xEC0000007865646ELL, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v17, v16, 0, 0,
          0,
          v4,
          0,
          (uint64_t)sub_1B1AF5FE0);
  swift_release();
  sub_1B1A02758(0, &qword_1ED4B8078, (uint64_t)&type metadata for TextureChannel, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v19 = (_QWORD *)swift_allocObject();
  v19[4] = sub_1B1AF573C;
  v19[5] = v15;
  v19[2] = sub_1B1AF576C;
  v19[3] = v15;
  v19[6] = v15;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v20 = sub_1B1AD3C60(0x6C656E6E616863, 0xE700000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v19, v15, 0, 0,
          0,
          v4,
          v18,
          (uint64_t)sub_1B1AF5CB4);
  swift_release();
  swift_release();
  *(_QWORD *)(v0 + 56) = v20;
  v21 = swift_getKeyPath();
  v22 = swift_getKeyPath();
  v23 = (_QWORD *)swift_allocObject();
  v23[4] = sub_1B1AF55CC;
  v23[5] = v22;
  v23[2] = sub_1B1AF55FC;
  v23[3] = v22;
  v23[6] = v22;
  swift_allocObject();
  swift_retain_n();
  v24 = sub_1B1ADBDA8(0xD000000000000010, 0x80000001B232D230, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v23, v22, 0, 0,
          0,
          v4,
          0,
          (uint64_t)sub_1B1AF5FE0);
  swift_release();
  sub_1B1A02758(0, &qword_1ED4B8048, (uint64_t)&type metadata for AddressMode, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v25 = (_QWORD *)swift_allocObject();
  v25[4] = sub_1B1AF57BC;
  v25[5] = v21;
  v25[2] = sub_1B1AF57EC;
  v25[3] = v21;
  v25[6] = v21;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v26 = sub_1B1ADB22C(0x4D73736572646461, 0xEB0000000065646FLL, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v25, v21, 0, 0,
          0,
          v4,
          v24,
          (uint64_t)sub_1B1AF5BF4);
  swift_release();
  swift_release();
  *(_QWORD *)(v0 + 64) = v26;
  v27 = swift_getKeyPath();
  v28 = swift_getKeyPath();
  v29 = (_QWORD *)swift_allocObject();
  v29[4] = sub_1B1AF55CC;
  v29[5] = v28;
  v29[2] = sub_1B1AF55FC;
  v29[3] = v28;
  v29[6] = v28;
  swift_allocObject();
  swift_retain_n();
  v30 = sub_1B1ADBDA8(0x65646E4965646F6DLL, 0xE900000000000078, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v29, v28, 0, 0,
          0,
          v4,
          0,
          (uint64_t)sub_1B1AF5FE0);
  swift_release();
  sub_1B1A02758(0, &qword_1ED4B80D8, (uint64_t)&type metadata for ScaleMode, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v31 = (_QWORD *)swift_allocObject();
  v31[4] = sub_1B1AF583C;
  v31[5] = v27;
  v31[2] = sub_1B1AF586C;
  v31[3] = v27;
  v31[6] = v27;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v32 = sub_1B1ACE784(1701080941, 0xE400000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v31, v27, 0, 0,
          0,
          v4,
          v30,
          (uint64_t)sub_1B1AF5B34);
  swift_release();
  swift_release();
  *(_QWORD *)(v0 + 72) = v32;
  v33 = swift_getKeyPath();
  sub_1B1AE43E4(0);
  v34 = (_QWORD *)swift_allocObject();
  v34[4] = sub_1B1AF588C;
  v34[5] = v33;
  v34[2] = sub_1B1AF58BC;
  v34[3] = v33;
  v34[6] = v33;
  swift_allocObject();
  swift_retain_n();
  v35 = sub_1B1ACCB68(120, 0xE100000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v34, v33, 0, 0,
          0,
          v4,
          0);
  swift_release();
  *(_QWORD *)(v0 + 80) = v35;
  v36 = swift_getKeyPath();
  v37 = swift_getKeyPath();
  v38 = (_QWORD *)swift_allocObject();
  v38[4] = sub_1B1AF588C;
  v38[5] = v36;
  v38[2] = sub_1B1AF58BC;
  v38[3] = v36;
  v38[6] = v36;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v39 = sub_1B1ACCB68(121, 0xE100000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v37, 1, 0, (uint64_t)v38, v36, 0, 0,
          0,
          v4,
          0);
  swift_release();
  swift_release();
  *(_QWORD *)(v0 + 88) = v39;
  v40 = swift_getKeyPath();
  v41 = swift_getKeyPath();
  v42 = (_QWORD *)swift_allocObject();
  v42[4] = sub_1B1AF588C;
  v42[5] = v40;
  v42[2] = sub_1B1AF58BC;
  v42[3] = v40;
  v42[6] = v40;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v43 = sub_1B1ACCB68(122, 0xE100000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v41, 1, 0, (uint64_t)v42, v40, 0, 0,
          0,
          v4,
          0);
  swift_release();
  swift_release();
  *(_QWORD *)(v0 + 96) = v43;
  v44 = swift_getKeyPath();
  sub_1B1AE1F14(0);
  v45 = (_QWORD *)swift_allocObject();
  v45[4] = sub_1B1AF58DC;
  v45[5] = v44;
  v45[2] = sub_1B1AF590C;
  v45[3] = v44;
  v45[6] = v44;
  swift_allocObject();
  swift_retain_n();
  v46 = sub_1B1ACCF44(0x656C616373, 0xE500000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v45, v44, 0, 0,
          0,
          v4,
          0);
  swift_release();
  *(_QWORD *)(v0 + 104) = v46;
  v47 = swift_getKeyPath();
  v48 = (_QWORD *)swift_allocObject();
  v48[4] = sub_1B1AF58DC;
  v48[5] = v47;
  v48[2] = sub_1B1AF590C;
  v48[3] = v47;
  v48[6] = v47;
  swift_allocObject();
  swift_retain_n();
  v49 = sub_1B1ACCF44(1935763810, 0xE400000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v48, v47, 0, 0,
          0,
          v4,
          0);
  swift_release();
  *(_QWORD *)(v0 + 112) = v49;
  v50 = swift_getKeyPath();
  v51 = (_QWORD *)swift_allocObject();
  v51[4] = sub_1B1AF566C;
  v51[5] = v50;
  v51[2] = sub_1B1AF569C;
  v51[3] = v50;
  v51[6] = v50;
  swift_allocObject();
  swift_retain_n();
  v52 = sub_1B1ADC904(0x656C676E61, 0xE500000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v51, v50, 0, 0,
          0,
          v10,
          0,
          (uint64_t)sub_1B1AF5E60);
  swift_release();
  *(_QWORD *)(v0 + 120) = v52;
  result = sub_1B2228AD0();
  qword_1EEFD5128 = v0;
  return result;
}

uint64_t sub_1B1A4D5C4()
{
  uint64_t v0;

  return *(char *)(v0 + 12);
}

uint64_t sub_1B1A4D5CC(uint64_t result)
{
  uint64_t v1;
  char v2;

  v2 = result;
  if ((result & 0xFC) != 0)
    v2 = 4;
  *(_BYTE *)(v1 + 12) = v2;
  return result;
}

uint64_t sub_1B1A4D5E4(uint64_t result)
{
  uint64_t v1;
  char v2;

  v2 = result;
  if (result >= 5u)
    v2 = 5;
  *(_BYTE *)(v1 + 8) = v2;
  return result;
}

uint64_t sub_1B1A4D5FC()
{
  uint64_t v0;

  return *(char *)(v0 + 9);
}

uint64_t sub_1B1A4D604(uint64_t result)
{
  uint64_t v1;
  char v2;

  v2 = result;
  if ((result & 0xFC) != 0)
    v2 = 4;
  *(_BYTE *)(v1 + 9) = v2;
  return result;
}

uint64_t sub_1B1A4D61C(uint64_t result)
{
  uint64_t v1;
  char v2;

  v2 = result;
  if (result >= 3u)
    v2 = 3;
  *(_BYTE *)(v1 + 20) = v2;
  return result;
}

uint64_t sub_1B1A4D634()
{
  return 0x7265764F657A6953;
}

uint64_t sub_1B1A4D658()
{
  if (qword_1EEF570B8 != -1)
    swift_once();
  return swift_bridgeObjectRetain();
}

uint64_t sub_1B1A4D698(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, &qword_1EEF570B8);
}

uint64_t sub_1B1A4D6B4(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, &qword_1EEF570B8, (unint64_t *)&qword_1EEFD5128);
}

uint64_t sub_1B1A4D6E0(uint64_t a1)
{
  return sub_1B1A2262C(a1, &qword_1EEF570B8, &qword_1EEFD5128);
}

uint64_t sub_1B1A4D70C()
{
  uint64_t v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E4C0;
  KeyPath = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B8040, (uint64_t)&type metadata for Entity, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = sub_1B1AF60A0;
  v2[5] = KeyPath;
  v2[2] = sub_1B1AF60D0;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v3 = MEMORY[0x1E0DEE9D8];
  v4 = sub_1B1AD9F50(0x65727574786574, 0xE700000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 8, 0, (uint64_t)v2, KeyPath, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0,
         (uint64_t)sub_1B1AF6810);
  swift_release();
  *(_QWORD *)(v0 + 32) = v4;
  v5 = swift_getKeyPath();
  v6 = swift_getKeyPath();
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4B8140, MEMORY[0x1E0DEDC60], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v7 = (_QWORD *)swift_allocObject();
  v7[4] = sub_1B1AF6120;
  v7[5] = v6;
  v7[2] = sub_1B1AF6150;
  v7[3] = v6;
  v7[6] = v6;
  swift_allocObject();
  swift_retain_n();
  v8 = sub_1B1ADBDA8(0x496C656E6E616863, 0xEC0000007865646ELL, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v7, v6, 0, 0,
         0,
         v3,
         0,
         (uint64_t)sub_1B1AF6748);
  swift_release();
  sub_1B1A02758(0, &qword_1ED4B8078, (uint64_t)&type metadata for TextureChannel, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v9 = (_QWORD *)swift_allocObject();
  v9[4] = sub_1B1AF6170;
  v9[5] = v5;
  v9[2] = sub_1B1AF61A0;
  v9[3] = v5;
  v9[6] = v5;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v10 = sub_1B1AD3C60(0x6C656E6E616863, 0xE700000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v9, v5, 0, 0,
          0,
          v3,
          v8,
          (uint64_t)sub_1B1AF6680);
  swift_release();
  swift_release();
  *(_QWORD *)(v0 + 40) = v10;
  v11 = swift_getKeyPath();
  v12 = swift_getKeyPath();
  v13 = (_QWORD *)swift_allocObject();
  v13[4] = sub_1B1AF6120;
  v13[5] = v12;
  v13[2] = sub_1B1AF6150;
  v13[3] = v12;
  v13[6] = v12;
  swift_allocObject();
  swift_retain_n();
  v14 = sub_1B1ADBDA8(0xD000000000000010, 0x80000001B232D230, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v13, v12, 0, 0,
          0,
          v3,
          0,
          (uint64_t)sub_1B1AF6748);
  swift_release();
  sub_1B1A02758(0, &qword_1ED4B8048, (uint64_t)&type metadata for AddressMode, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v15 = (_QWORD *)swift_allocObject();
  v15[4] = sub_1B1AF61F0;
  v15[5] = v11;
  v15[2] = sub_1B1AF6220;
  v15[3] = v11;
  v15[6] = v11;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v16 = sub_1B1ADB22C(0x4D73736572646461, 0xEB0000000065646FLL, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v15, v11, 0, 0,
          0,
          v3,
          v14,
          (uint64_t)sub_1B1AF65B8);
  swift_release();
  swift_release();
  *(_QWORD *)(v0 + 48) = v16;
  v17 = swift_getKeyPath();
  sub_1B1AE43E4(0);
  v18 = (_QWORD *)swift_allocObject();
  v18[4] = sub_1B1AF6240;
  v18[5] = v17;
  v18[2] = sub_1B1AF6270;
  v18[3] = v17;
  v18[6] = v17;
  swift_allocObject();
  swift_retain_n();
  v19 = sub_1B1AD4024(0x65676E6172, 0xE500000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v18, v17, 0, 0,
          0,
          v3,
          0);
  swift_release();
  *(_QWORD *)(v0 + 56) = v19;
  v20 = swift_getKeyPath();
  sub_1B1AE1F14(0);
  v21 = (_QWORD *)swift_allocObject();
  v21[4] = sub_1B1AF6290;
  v21[5] = v20;
  v21[2] = sub_1B1AF62C0;
  v21[3] = v20;
  v21[6] = v20;
  swift_allocObject();
  swift_retain_n();
  v22 = sub_1B1AD4400(0x656C616373, 0xE500000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v21, v20, 0, 0,
          0,
          v3,
          0);
  swift_release();
  *(_QWORD *)(v0 + 64) = v22;
  v23 = swift_getKeyPath();
  v24 = (_QWORD *)swift_allocObject();
  v24[4] = sub_1B1AF6290;
  v24[5] = v23;
  v24[2] = sub_1B1AF62C0;
  v24[3] = v23;
  v24[6] = v23;
  swift_allocObject();
  swift_retain_n();
  v25 = sub_1B1AD4400(1935763810, 0xE400000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v24, v23, 0, 0,
          0,
          v3,
          0);
  swift_release();
  *(_QWORD *)(v0 + 72) = v25;
  v26 = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F8, MEMORY[0x1E0DEB188], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v27 = (_QWORD *)swift_allocObject();
  v27[4] = sub_1B1AF62E0;
  v27[5] = v26;
  v27[2] = sub_1B1AF6310;
  v27[3] = v26;
  v27[6] = v26;
  swift_allocObject();
  swift_retain_n();
  v28 = sub_1B1ADC904(0x656C676E61, 0xE500000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v27, v26, 0, 0,
          0,
          v3,
          0,
          (uint64_t)sub_1B1AF6330);
  swift_release();
  *(_QWORD *)(v0 + 80) = v28;
  result = sub_1B2228AD0();
  qword_1EEFD5130 = v0;
  return result;
}

unint64_t sub_1B1A4DFD8()
{
  return 0xD000000000000013;
}

uint64_t sub_1B1A4DFF4(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, &qword_1EEF570C0);
}

uint64_t sub_1B1A4E010(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, &qword_1EEF570C0, (unint64_t *)&qword_1EEFD5130);
}

uint64_t sub_1B1A4E03C(uint64_t a1)
{
  return sub_1B1A2262C(a1, &qword_1EEF570C0, &qword_1EEFD5130);
}

uint64_t sub_1B1A4E068()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E500;
  KeyPath = swift_getKeyPath();
  v2 = swift_getKeyPath();
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4B8140, MEMORY[0x1E0DEDC60], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v3 = (_QWORD *)swift_allocObject();
  v3[4] = sub_1B1AF6908;
  v3[5] = v2;
  v3[2] = sub_1B1AF6938;
  v3[3] = v2;
  v3[6] = v2;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v4 = MEMORY[0x1E0DEE9D8];
  v5 = sub_1B1ADBDA8(0x6F6974617265706FLL, 0xEE007865646E496ELL, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v3, v2, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0,
         (uint64_t)sub_1B1AF704C);
  swift_release();
  sub_1B1A02758(0, &qword_1ED4B8050, (uint64_t)&type metadata for Composition.Operation, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v6 = (_QWORD *)swift_allocObject();
  v6[4] = sub_1B1AF6958;
  v6[5] = KeyPath;
  v6[2] = sub_1B1AF6988;
  v6[3] = KeyPath;
  v6[6] = KeyPath;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v7 = sub_1B1ACFF44(0x6F6974617265706FLL, 0xE90000000000006ELL, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v6, KeyPath, 0, 0,
         0,
         v4,
         v5,
         (uint64_t)sub_1B1AF6F84);
  swift_release();
  swift_release();
  *(_QWORD *)(v0 + 32) = v7;
  v8 = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F8, MEMORY[0x1E0DEB188], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v9 = (_QWORD *)swift_allocObject();
  v9[4] = sub_1B1AF69A8;
  v9[5] = v8;
  v9[2] = sub_1B1AF69D8;
  v9[3] = v8;
  v9[6] = v8;
  swift_allocObject();
  swift_retain_n();
  v10 = sub_1B1ADC904(0x726F74636166, 0xE600000000000000, 0, 0, 0, 1, 0x3F847AE147AE147BLL, 0, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v9, v8, 0, 0,
          0,
          v4,
          0,
          (uint64_t)sub_1B1AF6EBC);
  swift_release();
  *(_QWORD *)(v0 + 40) = v10;
  v11 = swift_getKeyPath();
  v12 = swift_getKeyPath();
  v13 = (_QWORD *)swift_allocObject();
  v13[4] = sub_1B1AF6A28;
  v13[5] = v12;
  v13[2] = sub_1B1AF6938;
  v13[3] = v12;
  v13[6] = v12;
  swift_allocObject();
  swift_retain_n();
  v14 = sub_1B1ADBDA8(0x65646E4965646F6DLL, 0xE900000000000078, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v13, v12, 0, 0,
          0,
          v4,
          0,
          (uint64_t)sub_1B1AF704C);
  swift_release();
  sub_1B1A02758(0, &qword_1EEF59C50, (uint64_t)&type metadata for ParticleColorOverPosition.GradientMode, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v15 = (_QWORD *)swift_allocObject();
  v15[4] = sub_1B1AF6A58;
  v15[5] = v11;
  v15[2] = sub_1B1AF6A88;
  v15[3] = v11;
  v15[6] = v11;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v16 = sub_1B1ACFB88(1701080941, 0xE400000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v15, v11, 0, 0,
          0,
          v4,
          v14);
  swift_release();
  swift_release();
  *(_QWORD *)(v0 + 48) = v16;
  v17 = swift_getKeyPath();
  v18 = swift_getKeyPath();
  v19 = (_QWORD *)swift_allocObject();
  v19[4] = sub_1B1AF6A28;
  v19[5] = v18;
  v19[2] = sub_1B1AF6938;
  v19[3] = v18;
  v19[6] = v18;
  swift_allocObject();
  swift_retain_n();
  v20 = sub_1B1ADBDA8(0xD000000000000010, 0x80000001B232D230, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v19, v18, 0, 0,
          0,
          v4,
          0,
          (uint64_t)sub_1B1AF704C);
  swift_release();
  sub_1B1A02758(0, &qword_1ED4B8048, (uint64_t)&type metadata for AddressMode, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v21 = (_QWORD *)swift_allocObject();
  v21[4] = sub_1B1AF6AD8;
  v21[5] = v17;
  v21[2] = sub_1B1AF6B08;
  v21[3] = v17;
  v21[6] = v17;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v22 = sub_1B1ADB22C(0x4D73736572646461, 0xEB0000000065646FLL, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v21, v17, 0, 0,
          0,
          v4,
          v20,
          (uint64_t)sub_1B1AF6D00);
  swift_release();
  swift_release();
  *(_QWORD *)(v0 + 56) = v22;
  v23 = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80C8, (uint64_t)&type metadata for ColorRamp, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v24 = (_QWORD *)swift_allocObject();
  v24[4] = sub_1B1AF6B28;
  v24[5] = v23;
  v24[2] = sub_1B1AF6B50;
  v24[3] = v23;
  v24[6] = v23;
  swift_allocObject();
  swift_retain_n();
  v25 = sub_1B1AD06E4(1886216562, 0xE400000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v24, v23, 0, 0,
          0,
          v4,
          0,
          (uint64_t)sub_1B1AF6B70);
  swift_release();
  *(_QWORD *)(v0 + 64) = v25;
  result = sub_1B2228AD0();
  qword_1EEFD5138 = v0;
  return result;
}

uint64_t sub_1B1A4E8B4()
{
  uint64_t v0;

  return *(char *)(v0 + 4);
}

uint64_t sub_1B1A4E8BC(uint64_t result)
{
  uint64_t v1;
  char v2;

  v2 = result;
  if ((result & 0xFC) != 0)
    v2 = 4;
  *(_BYTE *)(v1 + 4) = v2;
  return result;
}

uint64_t sub_1B1A4E8D4()
{
  uint64_t v0;

  return *(char *)(v0 + 1);
}

uint64_t sub_1B1A4E8DC(uint64_t result)
{
  uint64_t v1;
  char v2;

  v2 = result;
  if ((result & 0xFC) != 0)
    v2 = 4;
  *(_BYTE *)(v1 + 1) = v2;
  return result;
}

unint64_t sub_1B1A4E8F4()
{
  return 0xD000000000000011;
}

uint64_t sub_1B1A4E910()
{
  return 49283136;
}

uint64_t sub_1B1A4E91C(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, &qword_1EEF570C8);
}

uint64_t sub_1B1A4E938(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, &qword_1EEF570C8, (unint64_t *)&qword_1EEFD5138);
}

uint64_t sub_1B1A4E964(uint64_t a1)
{
  return sub_1B1A2262C(a1, &qword_1EEF570C8, &qword_1EEFD5138);
}

uint64_t sub_1B1A4E990()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E450;
  KeyPath = swift_getKeyPath();
  v2 = swift_getKeyPath();
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4B8140, MEMORY[0x1E0DEDC60], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v3 = (_QWORD *)swift_allocObject();
  v3[4] = sub_1B1AF7134;
  v3[5] = v2;
  v3[2] = sub_1B1AF7164;
  v3[3] = v2;
  v3[6] = v2;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v4 = MEMORY[0x1E0DEE9D8];
  v5 = sub_1B1ADBDA8(0x65646E4965646F6DLL, 0xE900000000000078, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v3, v2, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0,
         (uint64_t)sub_1B1AF741C);
  swift_release();
  sub_1B1A02758(0, &qword_1EEF59C98, (uint64_t)&type metadata for OrientationConstraint.Mode, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v6 = (_QWORD *)swift_allocObject();
  v6[4] = sub_1B1AF7184;
  v6[5] = KeyPath;
  v6[2] = sub_1B1AF71B4;
  v6[3] = KeyPath;
  v6[6] = KeyPath;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v7 = sub_1B1AC8C20(1701080941, 0xE400000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v6, KeyPath, 0, 0,
         0,
         v4,
         v5);
  swift_release();
  swift_release();
  *(_QWORD *)(v0 + 32) = v7;
  v8 = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F8, MEMORY[0x1E0DEB188], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v9 = (_QWORD *)swift_allocObject();
  v9[4] = sub_1B1AF71D4;
  v9[5] = v8;
  v9[2] = sub_1B1AF7204;
  v9[3] = v8;
  v9[6] = v8;
  swift_allocObject();
  swift_retain_n();
  v10 = sub_1B1ADC904(0x726F74636166, 0xE600000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v9, v8, 0, 0,
          0,
          v4,
          0,
          (uint64_t)sub_1B1AF7224);
  swift_release();
  *(_QWORD *)(v0 + 40) = v10;
  result = sub_1B2228AD0();
  qword_1EEFD5140 = v0;
  return result;
}

unint64_t sub_1B1A4ED0C()
{
  return 0xD000000000000015;
}

uint64_t sub_1B1A4ED28(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, &qword_1EEF570D0);
}

uint64_t sub_1B1A4ED44(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, &qword_1EEF570D0, (unint64_t *)&qword_1EEFD5140);
}

uint64_t sub_1B1A4ED70(uint64_t a1)
{
  return sub_1B1A2262C(a1, &qword_1EEF570D0, &qword_1EEFD5140);
}

uint64_t sub_1B1A4ED9C()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E450;
  KeyPath = swift_getKeyPath();
  v2 = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F8, MEMORY[0x1E0DEB188], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v3 = (_QWORD *)swift_allocObject();
  v3[4] = sub_1B1AF74F8;
  v3[5] = KeyPath;
  v3[2] = sub_1B1AF7528;
  v3[3] = KeyPath;
  v3[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v4 = sub_1B1ADC904(0x797469636F6C6576, 0xE800000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v2, 1, 0, (uint64_t)v3, KeyPath, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0,
         (uint64_t)sub_1B1AF77F0);
  swift_release();
  swift_release();
  *(_QWORD *)(v0 + 32) = v4;
  v5 = swift_getKeyPath();
  if (qword_1EEF570E0 != -1)
    swift_once();
  v6 = sub_1B1C50FC0(qword_1EEFD5150);
  sub_1B1791524(0, &qword_1EEF59CC8, (uint64_t (*)(uint64_t))sub_1B1AF7598, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for EntityGetSet);
  v7 = (_QWORD *)swift_allocObject();
  v7[4] = sub_1B1AF7548;
  v7[5] = v5;
  v7[2] = sub_1B1AF7578;
  v7[3] = v5;
  v7[6] = v5;
  swift_allocObject();
  swift_retain_n();
  swift_bridgeObjectRetain();
  v8 = sub_1B1ABA4D0(0x6576727563, 0xE500000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v7, v5, 0, 0,
         0,
         v6,
         0,
         (uint64_t (*)(_QWORD))sub_1B1AF7598,
         (uint64_t)sub_1B1AF760C);
  swift_release();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + 40) = v8;
  result = sub_1B2228AD0();
  qword_1EEFD5148 = v0;
  return result;
}

BOOL sub_1B1A4F090()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8) == 0;
}

uint64_t sub_1B1A4F0A0()
{
  return 0x6E41657461647055;
}

uint64_t sub_1B1A4F0C0(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, &qword_1EEF570D8);
}

uint64_t sub_1B1A4F0DC(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, &qword_1EEF570D8, (unint64_t *)&qword_1EEFD5148);
}

uint64_t sub_1B1A4F108(uint64_t a1)
{
  return sub_1B1A2262C(a1, &qword_1EEF570D8, &qword_1EEFD5148);
}

char *sub_1B1A4F134()
{
  uint64_t v0;
  uint64_t v1;
  char *result;
  uint64_t v3;

  sub_1B1791524(0, &qword_1EEF59CE8, (uint64_t (*)(uint64_t))sub_1B1AF776C, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226CD10;
  *(_QWORD *)(v0 + 32) = 0x75207261656E694CLL;
  *(_QWORD *)(v0 + 40) = 0xE900000000000070;
  *(_QWORD *)(v0 + 48) = sub_1B21451EC((uint64_t)&unk_1E6391390);
  *(_QWORD *)(v0 + 56) = v1;
  *(_QWORD *)(v0 + 64) = 0;
  *(_BYTE *)(v0 + 72) = 1;
  *(_QWORD *)(v0 + 80) = 0x64207261656E694CLL;
  *(_QWORD *)(v0 + 88) = 0xEB000000006E776FLL;
  result = sub_1B21451EC((uint64_t)&unk_1E6391360);
  *(_QWORD *)(v0 + 96) = result;
  *(_QWORD *)(v0 + 104) = v3;
  *(_QWORD *)(v0 + 112) = 0;
  *(_BYTE *)(v0 + 120) = 1;
  qword_1EEFD5150 = v0;
  return result;
}

uint64_t sub_1B1A4F200()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E450;
  KeyPath = swift_getKeyPath();
  v2 = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F8, MEMORY[0x1E0DEB188], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v3 = (_QWORD *)swift_allocObject();
  v3[4] = sub_1B1AF78B8;
  v3[5] = KeyPath;
  v3[2] = sub_1B1AF78E8;
  v3[3] = KeyPath;
  v3[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v4 = sub_1B1ADC904(0x6E6F697461727564, 0xE800000000000000, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, v2, 1, 0, (uint64_t)v3, KeyPath, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0,
         (uint64_t)sub_1B1AF7A80);
  swift_release();
  swift_release();
  *(_QWORD *)(v0 + 32) = v4;
  v5 = swift_getKeyPath();
  if (qword_1EEF570E0 != -1)
    swift_once();
  v6 = sub_1B1C50FC0(qword_1EEFD5150);
  sub_1B1791524(0, &qword_1EEF59CC8, (uint64_t (*)(uint64_t))sub_1B1AF7598, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for EntityGetSet);
  v7 = (_QWORD *)swift_allocObject();
  v7[4] = sub_1B1AF7908;
  v7[5] = v5;
  v7[2] = sub_1B1AF7938;
  v7[3] = v5;
  v7[6] = v5;
  swift_allocObject();
  swift_retain_n();
  swift_bridgeObjectRetain();
  v8 = sub_1B1ABA4D0(0x6576727563, 0xE500000000000000, 0, 0, 0x3FF0000000000000, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v7, v5, 0, 0,
         0,
         v6,
         0,
         (uint64_t (*)(_QWORD))sub_1B1AF7598,
         (uint64_t)sub_1B1AF7958);
  swift_release();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + 40) = v8;
  result = sub_1B2228AD0();
  qword_1EEFD5158 = v0;
  return result;
}

uint64_t sub_1B1A4F4F4()
{
  return 0x6B6F6F6270696C46;
}

uint64_t sub_1B1A4F50C(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, &qword_1EEF570E8);
}

uint64_t sub_1B1A4F528(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, &qword_1EEF570E8, (unint64_t *)&qword_1EEFD5158);
}

uint64_t sub_1B1A4F554(uint64_t a1)
{
  return sub_1B1A2262C(a1, &qword_1EEF570E8, &qword_1EEFD5158);
}

uint64_t sub_1B1A4F580()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E550;
  KeyPath = swift_getKeyPath();
  v2 = swift_getKeyPath();
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4B8140, MEMORY[0x1E0DEDC60], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v3 = (_QWORD *)swift_allocObject();
  v3[4] = sub_1B1AF7B48;
  v3[5] = v2;
  v3[2] = sub_1B1AF7B78;
  v3[3] = v2;
  v3[6] = v2;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v4 = MEMORY[0x1E0DEE9D8];
  v5 = sub_1B1ADBDA8(0x65646E49646E696BLL, 0xE900000000000078, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v3, v2, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0,
         (uint64_t)sub_1B1AF8608);
  swift_release();
  sub_1B1791524(0, &qword_1EEF59D08, (uint64_t (*)(uint64_t))type metadata accessor for ForceFieldType, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for EntityGetSet);
  v6 = (_QWORD *)swift_allocObject();
  v6[4] = sub_1B1AF7B98;
  v6[5] = KeyPath;
  v6[2] = sub_1B1AF7BC8;
  v6[3] = KeyPath;
  v6[6] = KeyPath;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v7 = sub_1B1AB67D0(1684957547, 0xE400000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v6, KeyPath, 0, 0,
         0,
         v4,
         v5,
         (uint64_t (*)(_QWORD))type metadata accessor for ForceFieldType,
         (uint64_t)sub_1B1AF856C);
  swift_release();
  swift_release();
  *(_QWORD *)(v0 + 32) = v7;
  v8 = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F0, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v9 = (_QWORD *)swift_allocObject();
  v9[4] = sub_1B1AF7BE8;
  v9[5] = v8;
  v9[2] = sub_1B1AF7C18;
  v9[3] = v8;
  v9[6] = v8;
  swift_allocObject();
  swift_retain_n();
  v10 = sub_1B1ADE580(0x657669746361, 0xE600000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v9, v8, 0, 0,
          0,
          v4,
          0,
          (uint64_t)sub_1B1AF84AC);
  swift_release();
  *(_QWORD *)(v0 + 40) = v10;
  v11 = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F8, MEMORY[0x1E0DEB188], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v12 = (_QWORD *)swift_allocObject();
  v12[4] = sub_1B1AF7C38;
  v12[5] = v11;
  v12[2] = sub_1B1AF7C68;
  v12[3] = v11;
  v12[6] = v11;
  swift_allocObject();
  swift_retain_n();
  v13 = sub_1B1ADC904(0x6874676E65727473, 0xE800000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v12, v11, 0, 0,
          0,
          v4,
          0,
          (uint64_t)sub_1B1AF83C0);
  swift_release();
  *(_QWORD *)(v0 + 48) = v13;
  v14 = swift_getKeyPath();
  v15 = swift_getKeyPath();
  v16 = (_QWORD *)swift_allocObject();
  v16[4] = sub_1B1AF7C38;
  v16[5] = v14;
  v16[2] = sub_1B1AF7C68;
  v16[3] = v14;
  v16[6] = v14;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v17 = sub_1B1ADC904(0x6E696E65706D6164, 0xE900000000000067, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v15, 1, 0, (uint64_t)v16, v14, 0, 0,
          0,
          v4,
          0,
          (uint64_t)sub_1B1AF83C0);
  swift_release();
  swift_release();
  *(_QWORD *)(v0 + 56) = v17;
  v18 = swift_getKeyPath();
  v19 = swift_getKeyPath();
  v20 = (_QWORD *)swift_allocObject();
  v20[4] = sub_1B1AF7C38;
  v20[5] = v18;
  v20[2] = sub_1B1AF7C68;
  v20[3] = v18;
  v20[6] = v18;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v21 = sub_1B1ADC904(0x6F6D416573696F6ELL, 0xEB00000000746E75, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v19, 1, 0, (uint64_t)v20, v18, 0, 0,
          0,
          v4,
          0,
          (uint64_t)sub_1B1AF83C0);
  swift_release();
  swift_release();
  *(_QWORD *)(v0 + 64) = v21;
  v22 = swift_getKeyPath();
  v23 = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1EEF595A8, MEMORY[0x1E0DEE190], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v24 = (_QWORD *)swift_allocObject();
  v24[4] = sub_1B1AF7CB8;
  v24[5] = v22;
  v24[2] = sub_1B1AF7CE8;
  v24[3] = v22;
  v24[6] = v22;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v25 = v4;
  v26 = sub_1B1AC885C(0x6565536573696F6ELL, 0xE900000000000064, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v23, 1, 0, (uint64_t)v24, v22, 0, 0,
          0,
          v4,
          0,
          (uint64_t)sub_1B1AF82D4);
  swift_release();
  swift_release();
  *(_QWORD *)(v0 + 72) = v26;
  v27 = swift_getKeyPath();
  v28 = swift_getKeyPath();
  v29 = (_QWORD *)swift_allocObject();
  v29[4] = sub_1B1AF7B48;
  v29[5] = v28;
  v29[2] = sub_1B1AF7B78;
  v29[3] = v28;
  v29[6] = v28;
  swift_allocObject();
  swift_retain_n();
  v30 = sub_1B1ADBDA8(0x6570616873, 0xE500000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v29, v28, 0, 0,
          0,
          v4,
          0,
          (uint64_t)sub_1B1AF8608);
  swift_release();
  sub_1B1791524(0, &qword_1EEF59D10, (uint64_t (*)(uint64_t))type metadata accessor for ForceFieldShape, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for EntityGetSet);
  v31 = (_QWORD *)swift_allocObject();
  v31[4] = sub_1B1AF7D08;
  v31[5] = v27;
  v31[2] = sub_1B1AF7D38;
  v31[3] = v27;
  v31[6] = v27;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v32 = sub_1B1AB67D0(0x6570616873, 0xE500000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v31, v27, 0, 0,
          0,
          v4,
          v30,
          (uint64_t (*)(_QWORD))type metadata accessor for ForceFieldShape,
          (uint64_t)sub_1B1AF8238);
  swift_release();
  swift_release();
  *(_QWORD *)(v0 + 80) = v32;
  v33 = swift_getKeyPath();
  v34 = swift_getKeyPath();
  v35 = (_QWORD *)swift_allocObject();
  v35[4] = sub_1B1AF7B48;
  v35[5] = v34;
  v35[2] = sub_1B1AF7B78;
  v35[3] = v34;
  v35[6] = v34;
  swift_allocObject();
  swift_retain_n();
  v36 = sub_1B1ADBDA8(0x65646F4D6C6C7563, 0xE800000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v35, v34, 0, 0,
          0,
          v4,
          0,
          (uint64_t)sub_1B1AF8608);
  swift_release();
  sub_1B1791524(0, &qword_1EEF59D18, (uint64_t (*)(uint64_t))type metadata accessor for ForceFieldCullMode, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for EntityGetSet);
  v37 = (_QWORD *)swift_allocObject();
  v37[4] = sub_1B1AF7D58;
  v37[5] = v33;
  v37[2] = sub_1B1AF7D88;
  v37[3] = v33;
  v37[6] = v33;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v38 = sub_1B1AB67D0(0x65646F4D6C6C7563, 0xE800000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v37, v33, 0, 0,
          0,
          v25,
          v36,
          (uint64_t (*)(_QWORD))type metadata accessor for ForceFieldCullMode,
          (uint64_t)sub_1B1AF819C);
  swift_release();
  swift_release();
  *(_QWORD *)(v0 + 88) = v38;
  v39 = swift_getKeyPath();
  v40 = swift_getKeyPath();
  v41 = (_QWORD *)swift_allocObject();
  v41[4] = sub_1B1AF7C38;
  v41[5] = v39;
  v41[2] = sub_1B1AF7C68;
  v41[3] = v39;
  v41[6] = v39;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v42 = sub_1B1ADC904(0x4566664F6C6C6166, 0xEF746E656E6F7078, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v40, 1, 0, (uint64_t)v41, v39, 0, 0,
          0,
          v25,
          0,
          (uint64_t)sub_1B1AF83C0);
  swift_release();
  swift_release();
  *(_QWORD *)(v0 + 96) = v42;
  v43 = swift_getKeyPath();
  v44 = swift_getKeyPath();
  sub_1B1AE015C(0);
  v45 = (_QWORD *)swift_allocObject();
  v45[4] = sub_1B1AF7DBC;
  v45[5] = v43;
  v45[2] = sub_1B1AF7DF4;
  v45[3] = v43;
  v45[6] = v43;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v46 = sub_1B1AB6B90(0x65747845666C6168, 0xEB0000000073746ELL, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, v44, 1, 0, (uint64_t)v45, v43, 0, 0,
          0,
          MEMORY[0x1E0DEE9D8],
          0);
  swift_release();
  swift_release();
  *(_QWORD *)(v0 + 104) = v46;
  v47 = swift_getKeyPath();
  v48 = swift_getKeyPath();
  v49 = (_QWORD *)swift_allocObject();
  v49[4] = sub_1B1AF7DBC;
  v49[5] = v47;
  v49[2] = sub_1B1AF7DF4;
  v49[3] = v47;
  v49[6] = v47;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v50 = MEMORY[0x1E0DEE9D8];
  v51 = sub_1B1AB6B90(0x74657366666FLL, 0xE600000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v48, 1, 0, (uint64_t)v49, v47, 0, 0,
          0,
          MEMORY[0x1E0DEE9D8],
          0);
  swift_release();
  swift_release();
  *(_QWORD *)(v0 + 112) = v51;
  v52 = swift_getKeyPath();
  v53 = swift_getKeyPath();
  v54 = (_QWORD *)swift_allocObject();
  v54[4] = sub_1B1AF7C38;
  v54[5] = v52;
  v54[2] = sub_1B1AF7C68;
  v54[3] = v52;
  v54[6] = v52;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v55 = sub_1B1ADC904(0x656E68746F6F6D73, 0xEA00000000007373, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, v53, 1, 0, (uint64_t)v54, v52, 0, 0,
          0,
          v50,
          0,
          (uint64_t)sub_1B1AF83C0);
  swift_release();
  swift_release();
  *(_QWORD *)(v0 + 120) = v55;
  v56 = swift_getKeyPath();
  v57 = swift_getKeyPath();
  v58 = (_QWORD *)swift_allocObject();
  v58[4] = sub_1B1AF7C38;
  v58[5] = v56;
  v58[2] = sub_1B1AF7C68;
  v58[3] = v56;
  v58[6] = v56;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v59 = MEMORY[0x1E0DEE9D8];
  v60 = sub_1B1ADC904(0x6465657073, 0xE500000000000000, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, v57, 1, 0, (uint64_t)v58, v56, 0, 0,
          0,
          MEMORY[0x1E0DEE9D8],
          0,
          (uint64_t)sub_1B1AF83C0);
  swift_release();
  swift_release();
  *(_QWORD *)(v0 + 128) = v60;
  v61 = swift_getKeyPath();
  v62 = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B8040, (uint64_t)&type metadata for Entity, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v63 = (_QWORD *)swift_allocObject();
  v63[4] = sub_1B1AF7E40;
  v63[5] = v61;
  v63[2] = sub_1B1AF7E70;
  v63[3] = v61;
  v63[6] = v61;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v64 = sub_1B1AD9F50(0x65727574786574, 0xE700000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v62, 8, 0, (uint64_t)v63, v61, 0, 0,
          0,
          v59,
          0,
          (uint64_t)sub_1B1AF7FD8);
  swift_release();
  swift_release();
  *(_QWORD *)(v0 + 136) = v64;
  v65 = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1EEF59D20, (uint64_t)&type metadata for CollisionLayerSet, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v66 = (_QWORD *)swift_allocObject();
  v66[4] = sub_1B1AF7EA8;
  v66[5] = v65;
  v66[2] = sub_1B1AF7ED8;
  v66[3] = v65;
  v66[6] = v65;
  swift_allocObject();
  swift_retain_n();
  v67 = sub_1B1ACD84C(0x73726579616CLL, 0xE600000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v66, v65, 0, 0,
          0,
          v59,
          0,
          (uint64_t)sub_1B1AF7EF8);
  swift_release();
  *(_QWORD *)(v0 + 144) = v67;
  v68 = swift_getKeyPath();
  swift_allocObject();
  v69 = MEMORY[0x1E0DEDCE8];
  v70 = sub_1B1A80674(0xD000000000000011, 0x80000001B2328B60, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v68, 0, 1, 0, 0, 0, 4,
          v59,
          MEMORY[0x1E0DEDCE8]);
  *(_QWORD *)(v70 + 104) = 2025;
  *(_BYTE *)(v70 + 112) = 0;
  *(_QWORD *)(v0 + 152) = v70;
  v71 = swift_getKeyPath();
  swift_allocObject();
  v72 = sub_1B1A80674(0x5366664F6C6C6166, 0xEC00000065706168, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v71, 0, 1, 0, 0, 0, 4,
          v59,
          v69);
  *(_QWORD *)(v72 + 104) = 2025;
  *(_BYTE *)(v72 + 112) = 0;
  *(_QWORD *)(v0 + 160) = v72;
  v73 = swift_getKeyPath();
  swift_allocObject();
  v74 = sub_1B1A80674(0xD000000000000010, 0x80000001B232D480, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v73, 0, 1, 0, 0, 0, 4,
          v59,
          v69);
  *(_QWORD *)(v74 + 104) = 2025;
  *(_BYTE *)(v74 + 112) = 0;
  *(_QWORD *)(v0 + 168) = v74;
  v75 = swift_getKeyPath();
  swift_allocObject();
  v76 = sub_1B1A80674(0x5266664F6C6C6166, 0xED00007375696461, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v75, 0, 1, 0, 0, 0, 4,
          v59,
          v69);
  *(_QWORD *)(v76 + 104) = 2025;
  *(_BYTE *)(v76 + 112) = 0;
  *(_QWORD *)(v0 + 176) = v76;
  v77 = swift_getKeyPath();
  swift_allocObject();
  v78 = sub_1B1A80674(0xD000000000000012, 0x80000001B2328B10, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v77, 0, 1, 0, 0, 0, 4,
          v59,
          v69);
  *(_QWORD *)(v78 + 104) = 2025;
  *(_BYTE *)(v78 + 112) = 0;
  *(_QWORD *)(v0 + 184) = v78;
  v79 = swift_getKeyPath();
  swift_allocObject();
  v80 = sub_1B1A80674(0x5266664F6C6C6166, 0xEC00000065676E61, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v79, 0, 1, 0, 0, 0, 4,
          v59,
          v69);
  *(_QWORD *)(v80 + 104) = 2025;
  *(_BYTE *)(v80 + 112) = 0;
  *(_QWORD *)(v0 + 192) = v80;
  v81 = swift_getKeyPath();
  swift_allocObject();
  v82 = sub_1B1A80674(0x5066664F6C6C6166, 0xEC0000007265776FLL, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v81, 0, 1, 0, 0, 0, 4,
          v59,
          v69);
  *(_QWORD *)(v82 + 104) = 2025;
  *(_BYTE *)(v82 + 112) = 0;
  *(_QWORD *)(v0 + 200) = v82;
  v83 = swift_getKeyPath();
  swift_allocObject();
  v84 = sub_1B1A80674(0x5073746365666661, 0xEF6E6F697469736FLL, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v83, 0, 1, 0, 0, 0, 4,
          v59,
          v69);
  *(_QWORD *)(v84 + 104) = 2025;
  *(_BYTE *)(v84 + 112) = 0;
  *(_QWORD *)(v0 + 208) = v84;
  result = sub_1B2228AD0();
  qword_1EEFD5160 = v0;
  return result;
}

BOOL sub_1B1A50C50()
{
  _QWORD *v0;

  return (unint64_t)(*v0 - 7) < 2;
}

BOOL sub_1B1A50C64()
{
  _QWORD *v0;

  return (unint64_t)(*v0 - 5) < 0xFFFFFFFFFFFFFFFELL;
}

BOOL sub_1B1A50C78()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 40) != 0;
}

BOOL sub_1B1A50C88()
{
  _QWORD *v0;

  return (unint64_t)(*v0 - 3) < 2;
}

BOOL sub_1B1A50C9C()
{
  _QWORD *v0;

  return *v0 == 9;
}

uint64_t sub_1B1A50CAC()
{
  return 0x6569466563726F46;
}

uint64_t sub_1B1A50CC8()
{
  return 116400128;
}

uint64_t sub_1B1A50CD4()
{
  if (qword_1EEF570F0 != -1)
    swift_once();
  return swift_bridgeObjectRetain();
}

uint64_t sub_1B1A50D14(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, &qword_1EEF570F0);
}

uint64_t sub_1B1A50D30(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, &qword_1EEF570F0, (unint64_t *)&qword_1EEFD5160);
}

uint64_t sub_1B1A50D5C(uint64_t a1)
{
  return sub_1B1A2262C(a1, &qword_1EEF570F0, &qword_1EEFD5160);
}

uint64_t sub_1B1A50D88()
{
  uint64_t v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E4B0;
  KeyPath = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F8, MEMORY[0x1E0DEB188], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = sub_1B1AF86F4;
  v2[5] = KeyPath;
  v2[2] = sub_1B1AF8724;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v3 = MEMORY[0x1E0DEE9D8];
  v4 = sub_1B1ADC904(0x6C6169646172, 0xE600000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v2, KeyPath, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0,
         (uint64_t)sub_1B1AF8874);
  swift_release();
  *(_QWORD *)(v0 + 32) = v4;
  v5 = swift_getKeyPath();
  v6 = (_QWORD *)swift_allocObject();
  v6[4] = sub_1B1AF86F4;
  v6[5] = v5;
  v6[2] = sub_1B1AF8724;
  v6[3] = v5;
  v6[6] = v5;
  swift_allocObject();
  swift_retain_n();
  v7 = sub_1B1ADC904(0x7261656E696CLL, 0xE600000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v6, v5, 0, 0,
         0,
         v3,
         0,
         (uint64_t)sub_1B1AF8874);
  swift_release();
  *(_QWORD *)(v0 + 40) = v7;
  *(_QWORD *)(v0 + 48) = sub_1B1ABF400(2025, 1684957559, 0xE400000000000000, (uint64_t)&type metadata for ParticleForceField, (uint64_t)&off_1E6394750, 0x7261656E696CLL, 0xE600000000000000);
  v8 = swift_getKeyPath();
  v9 = (_QWORD *)swift_allocObject();
  v9[4] = sub_1B1AF86F4;
  v9[5] = v8;
  v9[2] = sub_1B1AF8724;
  v9[3] = v8;
  v9[6] = v8;
  swift_allocObject();
  swift_retain_n();
  v10 = sub_1B1ADC904(0x786574726F76, 0xE600000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v9, v8, 0, 0,
          0,
          v3,
          0,
          (uint64_t)sub_1B1AF8874);
  swift_release();
  *(_QWORD *)(v0 + 56) = v10;
  v11 = swift_getKeyPath();
  v12 = (_QWORD *)swift_allocObject();
  v12[4] = sub_1B1AF86F4;
  v12[5] = v11;
  v12[2] = sub_1B1AF8724;
  v12[3] = v11;
  v12[6] = v11;
  swift_allocObject();
  swift_retain_n();
  v13 = sub_1B1ADC904(0x636974656E67616DLL, 0xE800000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v12, v11, 0, 0,
          0,
          v3,
          0,
          (uint64_t)sub_1B1AF8874);
  swift_release();
  *(_QWORD *)(v0 + 64) = v13;
  v14 = swift_getKeyPath();
  v15 = (_QWORD *)swift_allocObject();
  v15[4] = sub_1B1AF86F4;
  v15[5] = v14;
  v15[2] = sub_1B1AF8724;
  v15[3] = v14;
  v15[6] = v14;
  swift_allocObject();
  swift_retain_n();
  v16 = sub_1B1ADC904(0x63696E6F6D726168, 0xE800000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v15, v14, 0, 0,
          0,
          v3,
          0,
          (uint64_t)sub_1B1AF8874);
  swift_release();
  *(_QWORD *)(v0 + 72) = v16;
  v17 = swift_getKeyPath();
  v18 = (_QWORD *)swift_allocObject();
  v18[4] = sub_1B1AF86F4;
  v18[5] = v17;
  v18[2] = sub_1B1AF8724;
  v18[3] = v17;
  v18[6] = v17;
  swift_allocObject();
  swift_retain_n();
  v19 = sub_1B1ADC904(1734439524, 0xE400000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v18, v17, 0, 0,
          0,
          v3,
          0,
          (uint64_t)sub_1B1AF8874);
  swift_release();
  *(_QWORD *)(v0 + 80) = v19;
  v20 = swift_getKeyPath();
  v21 = (_QWORD *)swift_allocObject();
  v21[4] = sub_1B1AF86F4;
  v21[5] = v20;
  v21[2] = sub_1B1AF8724;
  v21[3] = v20;
  v21[6] = v20;
  swift_allocObject();
  swift_retain_n();
  v22 = sub_1B1ADC904(0x6573696F6ELL, 0xE500000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v21, v20, 0, 0,
          0,
          v3,
          0,
          (uint64_t)sub_1B1AF8874);
  swift_release();
  *(_QWORD *)(v0 + 88) = v22;
  v23 = swift_getKeyPath();
  v24 = (_QWORD *)swift_allocObject();
  v24[4] = sub_1B1AF86F4;
  v24[5] = v23;
  v24[2] = sub_1B1AF8724;
  v24[3] = v23;
  v24[6] = v23;
  swift_allocObject();
  swift_retain_n();
  v25 = sub_1B1ADC904(0x6E656C7562727574, 0xEA00000000006563, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v24, v23, 0, 0,
          0,
          v3,
          0,
          (uint64_t)sub_1B1AF8874);
  swift_release();
  *(_QWORD *)(v0 + 96) = v25;
  v26 = swift_getKeyPath();
  v27 = (_QWORD *)swift_allocObject();
  v27[4] = sub_1B1AF86F4;
  v27[5] = v26;
  v27[2] = sub_1B1AF8724;
  v27[3] = v26;
  v27[6] = v26;
  swift_allocObject();
  swift_retain_n();
  v28 = sub_1B1ADC904(0x676E69727073, 0xE600000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v27, v26, 0, 0,
          0,
          v3,
          0,
          (uint64_t)sub_1B1AF8874);
  swift_release();
  *(_QWORD *)(v0 + 104) = v28;
  v29 = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1EEF59D20, (uint64_t)&type metadata for CollisionLayerSet, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v30 = (_QWORD *)swift_allocObject();
  v30[4] = sub_1B1AF8744;
  v30[5] = v29;
  v30[2] = sub_1B1AF8774;
  v30[3] = v29;
  v30[6] = v29;
  swift_allocObject();
  swift_retain_n();
  v31 = sub_1B1ACD84C(0x73726579616CLL, 0xE600000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v30, v29, 0, 0,
          0,
          v3,
          0,
          (uint64_t)sub_1B1AF8794);
  swift_release();
  *(_QWORD *)(v0 + 112) = v31;
  result = sub_1B2228AD0();
  qword_1EEFD5168 = v0;
  return result;
}

unint64_t sub_1B1A516BC()
{
  return 0xD000000000000014;
}

uint64_t sub_1B1A516D8(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, &qword_1EEF570F8);
}

uint64_t sub_1B1A516F4(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, &qword_1EEF570F8, (unint64_t *)&qword_1EEFD5168);
}

uint64_t sub_1B1A51720(uint64_t a1)
{
  return sub_1B1A2262C(a1, &qword_1EEF570F8, &qword_1EEFD5168);
}

uint64_t sub_1B1A5174C()
{
  uint64_t v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E4A0;
  KeyPath = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F8, MEMORY[0x1E0DEB188], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = sub_1B1AF893C;
  v2[5] = KeyPath;
  v2[2] = sub_1B1AF896C;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v3 = MEMORY[0x1E0DEE9D8];
  v4 = sub_1B1ADC904(0x737569646172, 0xE600000000000000, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v2, KeyPath, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0,
         (uint64_t)sub_1B1AF898C);
  swift_release();
  *(_QWORD *)(v0 + 32) = v4;
  v5 = swift_getKeyPath();
  v6 = (_QWORD *)swift_allocObject();
  v6[4] = sub_1B1AF893C;
  v6[5] = v5;
  v6[2] = sub_1B1AF896C;
  v6[3] = v5;
  v6[6] = v5;
  swift_allocObject();
  swift_retain_n();
  v7 = sub_1B1ADC904(0x7053646E756F7261, 0xEB00000000646565, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v6, v5, 0, 0,
         0,
         v3,
         0,
         (uint64_t)sub_1B1AF898C);
  swift_release();
  *(_QWORD *)(v0 + 40) = v7;
  v8 = swift_getKeyPath();
  v9 = (_QWORD *)swift_allocObject();
  v9[4] = sub_1B1AF893C;
  v9[5] = v8;
  v9[2] = sub_1B1AF896C;
  v9[3] = v8;
  v9[6] = v8;
  swift_allocObject();
  swift_retain_n();
  v10 = sub_1B1ADC904(0x64656570536E69, 0xE700000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v9, v8, 0, 0,
          0,
          v3,
          0,
          (uint64_t)sub_1B1AF898C);
  swift_release();
  *(_QWORD *)(v0 + 48) = v10;
  v11 = swift_getKeyPath();
  v12 = (_QWORD *)swift_allocObject();
  v12[4] = sub_1B1AF893C;
  v12[5] = v11;
  v12[2] = sub_1B1AF896C;
  v12[3] = v11;
  v12[6] = v11;
  swift_allocObject();
  swift_retain_n();
  v13 = sub_1B1ADC904(0x73656E7468676974, 0xE900000000000073, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v12, v11, 0, 0,
          0,
          v3,
          0,
          (uint64_t)sub_1B1AF898C);
  swift_release();
  *(_QWORD *)(v0 + 56) = v13;
  result = sub_1B2228AD0();
  qword_1EEFD5170 = v0;
  return result;
}

uint64_t sub_1B1A51B68()
{
  return 0x786574726F56;
}

uint64_t sub_1B1A51B7C(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, &qword_1EEF57100);
}

uint64_t sub_1B1A51B98(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, &qword_1EEF57100, (unint64_t *)&qword_1EEFD5170);
}

uint64_t sub_1B1A51BC4(uint64_t a1)
{
  return sub_1B1A2262C(a1, &qword_1EEF57100, &qword_1EEFD5170);
}

unint64_t sub_1B1A51BF0()
{
  return 0xD000000000000011;
}

uint64_t sub_1B1A51C0C()
{
  return 0x6465726F68636E41;
}

unint64_t sub_1B1A51C24()
{
  return 0xD000000000000016;
}

uint64_t sub_1B1A51C40()
{
  uint64_t v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E450;
  KeyPath = swift_getKeyPath();
  sub_1B1AE015C(0);
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = sub_1B1AF8A54;
  v2[5] = KeyPath;
  v2[2] = sub_1B1AF8A8C;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v3 = MEMORY[0x1E0DEE9D8];
  v4 = sub_1B1ABA86C(0x6563726F66, 0xE500000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v2, KeyPath, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0);
  swift_release();
  *(_QWORD *)(v0 + 32) = v4;
  v5 = swift_getKeyPath();
  v6 = swift_getKeyPath();
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4B8140, MEMORY[0x1E0DEDC60], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v7 = (_QWORD *)swift_allocObject();
  v7[4] = sub_1B1AF8ADC;
  v7[5] = v6;
  v7[2] = sub_1B1AF8B0C;
  v7[3] = v6;
  v7[6] = v6;
  swift_allocObject();
  swift_retain_n();
  v8 = sub_1B1ADBDA8(0x646E496563617073, 0xEA00000000007865, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v7, v6, 0, 0,
         0,
         v3,
         0,
         (uint64_t)sub_1B1AF8C44);
  swift_release();
  sub_1B1A02758(0, &qword_1EEF590A8, (uint64_t)&type metadata for EntitySpace, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v9 = (_QWORD *)swift_allocObject();
  v9[4] = sub_1B1AF8B2C;
  v9[5] = v5;
  v9[2] = sub_1B1AF8B5C;
  v9[3] = v5;
  v9[6] = v5;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v10 = sub_1B1ABB024(0x6563617073, 0xE500000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v9, v5, 0, 0,
          0,
          v3,
          v8,
          (uint64_t)sub_1B1AF8B7C);
  swift_release();
  swift_release();
  *(_QWORD *)(v0 + 40) = v10;
  result = sub_1B2228AD0();
  qword_1EEFD5178 = v0;
  return result;
}

uint64_t sub_1B1A51FAC(uint64_t result)
{
  uint64_t v1;
  char v2;

  v2 = result;
  if (result >= 5u)
    v2 = 5;
  *(_BYTE *)(v1 + 16) = v2;
  return result;
}

uint64_t sub_1B1A51FC4()
{
  return 0x6563726F46;
}

uint64_t sub_1B1A51FD8(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, &qword_1EEF57108);
}

uint64_t sub_1B1A51FF4(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, &qword_1EEF57108, (unint64_t *)&qword_1EEFD5178);
}

uint64_t sub_1B1A52020(uint64_t a1)
{
  return sub_1B1A2262C(a1, &qword_1EEF57108, &qword_1EEFD5178);
}

uint64_t sub_1B1A5204C()
{
  uint64_t v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E4C0;
  KeyPath = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B8040, (uint64_t)&type metadata for Entity, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = sub_1B1AF8DD4;
  v2[5] = KeyPath;
  v2[2] = sub_1B1AF8E04;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v3 = MEMORY[0x1E0DEE9D8];
  v4 = sub_1B1AD9F50(0x656372756F73, 0xE600000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 11, 0, (uint64_t)v2, KeyPath, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0,
         (uint64_t)sub_1B1AF9174);
  swift_release();
  *(_QWORD *)(v0 + 32) = v4;
  v5 = swift_getKeyPath();
  sub_1B1ADF51C();
  v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_1B226D240;
  *(_QWORD *)(v6 + 32) = 0;
  *(_QWORD *)(v6 + 40) = 0xE000000000000000;
  v7 = MEMORY[0x1E0DEB418];
  *(_QWORD *)(v6 + 72) = MEMORY[0x1E0DEB418];
  *(_QWORD *)(v6 + 48) = 10;
  sub_1B1ADF9C4(0);
  v8 = (_QWORD *)swift_allocObject();
  v8[4] = sub_1B1AF8E24;
  v8[5] = v5;
  v8[2] = sub_1B1AF8E4C;
  v8[3] = v5;
  v8[6] = v5;
  swift_allocObject();
  swift_retain_n();
  swift_bridgeObjectRetain();
  v9 = sub_1B1ABD450(0xD000000000000012, 0x80000001B2329120, 0x4000000000000000, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v8, v5, 0, 0,
         0,
         v6,
         0,
         &qword_1ED4BA580,
         v7,
         (uint64_t)sub_1B1AF909C);
  swift_release();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + 40) = v9;
  v10 = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F8, MEMORY[0x1E0DEB188], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v11 = (_QWORD *)swift_allocObject();
  v11[4] = sub_1B1AF8E6C;
  v11[5] = v10;
  v11[2] = sub_1B1AF8E9C;
  v11[3] = v10;
  v11[6] = v10;
  swift_allocObject();
  swift_retain_n();
  v12 = sub_1B1ADC904(0x654C6E6F62626972, 0xEC0000006874676ELL, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v11, v10, 0, 0,
          0,
          v3,
          0,
          (uint64_t)sub_1B1AF8FD4);
  swift_release();
  *(_QWORD *)(v0 + 48) = v12;
  v13 = swift_getKeyPath();
  v14 = (_QWORD *)swift_allocObject();
  v14[4] = sub_1B1AF8E6C;
  v14[5] = v13;
  v14[2] = sub_1B1AF8E9C;
  v14[3] = v13;
  v14[6] = v13;
  swift_allocObject();
  swift_retain_n();
  v15 = sub_1B1ADC904(0x6963697473616C65, 0xEA00000000007974, 0, 0, 0x3FF0000000000000, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v14, v13, 0, 0,
          0,
          v3,
          0,
          (uint64_t)sub_1B1AF8FD4);
  swift_release();
  *(_QWORD *)(v0 + 56) = v15;
  v16 = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F0, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v17 = (_QWORD *)swift_allocObject();
  v17[4] = sub_1B1AF8EBC;
  v17[5] = v16;
  v17[2] = sub_1B1AF8EEC;
  v17[3] = v16;
  v17[6] = v16;
  swift_allocObject();
  swift_retain_n();
  v18 = sub_1B1ADE580(0xD000000000000012, 0x80000001B2329140, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v17, v16, 0, 0,
          0,
          v3,
          0,
          (uint64_t)sub_1B1AF8F0C);
  swift_release();
  *(_QWORD *)(v0 + 64) = v18;
  v19 = swift_getKeyPath();
  v20 = (_QWORD *)swift_allocObject();
  v20[4] = sub_1B1AF8EBC;
  v20[5] = v19;
  v20[2] = sub_1B1AF8EEC;
  v20[3] = v19;
  v20[6] = v19;
  swift_allocObject();
  swift_retain_n();
  v21 = sub_1B1ADE580(0xD000000000000014, 0x80000001B2329160, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v20, v19, 0, 0,
          0,
          v3,
          0,
          (uint64_t)sub_1B1AF8F0C);
  swift_release();
  *(_QWORD *)(v0 + 72) = v21;
  v22 = swift_getKeyPath();
  v23 = (_QWORD *)swift_allocObject();
  v23[4] = sub_1B1AF8EBC;
  v23[5] = v22;
  v23[2] = sub_1B1AF8EEC;
  v23[3] = v22;
  v23[6] = v22;
  swift_allocObject();
  swift_retain_n();
  v24 = sub_1B1ADE580(0x6F666E49676F6CLL, 0xE700000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v23, v22, 0, 0,
          0,
          v3,
          0,
          (uint64_t)sub_1B1AF8F0C);
  swift_release();
  *(_QWORD *)(v0 + 80) = v24;
  result = sub_1B2228AD0();
  qword_1EEFD5180 = v0;
  return result;
}

uint64_t sub_1B1A5279C()
{
  return 0x54206E6F62626952;
}

uint64_t sub_1B1A527C0(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, &qword_1EEF57110);
}

uint64_t sub_1B1A527DC(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, &qword_1EEF57110, (unint64_t *)&qword_1EEFD5180);
}

uint64_t sub_1B1A52808(uint64_t a1)
{
  return sub_1B1A2262C(a1, &qword_1EEF57110, &qword_1EEFD5180);
}

uint64_t sub_1B1A52834()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E530;
  KeyPath = swift_getKeyPath();
  v2 = swift_getKeyPath();
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4B8140, MEMORY[0x1E0DEDC60], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v3 = (_QWORD *)swift_allocObject();
  v3[4] = sub_1B1AF926C;
  v3[5] = v2;
  v3[2] = sub_1B1AF929C;
  v3[3] = v2;
  v3[6] = v2;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v4 = MEMORY[0x1E0DEE9D8];
  v5 = sub_1B1ADBDA8(0x6F69746365726964, 0xEE007865646E496ELL, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v3, v2, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0,
         (uint64_t)sub_1B1AF9758);
  swift_release();
  sub_1B1A02758(0, &qword_1EEF59E08, (uint64_t)&type metadata for FlockingLocalAxis, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v6 = (_QWORD *)swift_allocObject();
  v6[4] = sub_1B1AF92BC;
  v6[5] = KeyPath;
  v6[2] = sub_1B1AF92EC;
  v6[3] = KeyPath;
  v6[6] = KeyPath;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v7 = sub_1B1AD5610(0x6F69746365726964, 0xE90000000000006ELL, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v6, KeyPath, 0, 0,
         0,
         v4,
         v5,
         (uint64_t)sub_1B1AF968C);
  swift_release();
  swift_release();
  *(_QWORD *)(v0 + 32) = v7;
  v8 = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F8, MEMORY[0x1E0DEB188], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v9 = (_QWORD *)swift_allocObject();
  v9[4] = sub_1B1AF930C;
  v9[5] = v8;
  v9[2] = sub_1B1AF933C;
  v9[3] = v8;
  v9[6] = v8;
  swift_allocObject();
  swift_retain_n();
  v10 = v4;
  v11 = sub_1B1ADC904(0x6556746F5278616DLL, 0xEC0000007269446CLL, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v9, v8, 0, 0,
          0,
          v4,
          0,
          (uint64_t)sub_1B1AF95C4);
  swift_release();
  *(_QWORD *)(v0 + 40) = v11;
  v12 = swift_getKeyPath();
  v13 = swift_getKeyPath();
  v14 = (_QWORD *)swift_allocObject();
  v14[4] = sub_1B1AF926C;
  v14[5] = v13;
  v14[2] = sub_1B1AF929C;
  v14[3] = v13;
  v14[6] = v13;
  swift_allocObject();
  swift_retain_n();
  v15 = sub_1B1ADBDA8(0x726F746365567075, 0xED00007865646E49, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v14, v13, 0, 0,
          0,
          v4,
          0,
          (uint64_t)sub_1B1AF9758);
  swift_release();
  v16 = (_QWORD *)swift_allocObject();
  v16[4] = sub_1B1AF92BC;
  v16[5] = v12;
  v16[2] = sub_1B1AF92EC;
  v16[3] = v12;
  v16[6] = v12;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v17 = sub_1B1AD5610(0x726F746365567075, 0xE800000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v16, v12, 0, 0,
          0,
          v10,
          v15,
          (uint64_t)sub_1B1AF968C);
  swift_release();
  swift_release();
  *(_QWORD *)(v0 + 48) = v17;
  v18 = swift_getKeyPath();
  sub_1B1AE015C(0);
  v19 = (_QWORD *)swift_allocObject();
  v19[4] = sub_1B1AF938C;
  v19[5] = v18;
  v19[2] = sub_1B1AF93C4;
  v19[3] = v18;
  v19[6] = v18;
  swift_allocObject();
  swift_retain_n();
  v20 = v10;
  v21 = sub_1B1AD59D4(0x7441746E696F70, 0xE700000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v19, v18, 0, 0,
          0,
          v10,
          0);
  swift_release();
  *(_QWORD *)(v0 + 56) = v21;
  v22 = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F0, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v23 = (_QWORD *)swift_allocObject();
  v23[4] = sub_1B1AF93E4;
  v23[5] = v22;
  v23[2] = sub_1B1AF9414;
  v23[3] = v22;
  v23[6] = v22;
  swift_allocObject();
  swift_retain_n();
  v24 = sub_1B1ADE580(0x6C46656375646572, 0xEE00676E69707069, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v23, v22, 0, 0,
          0,
          v10,
          0,
          (uint64_t)sub_1B1AF9434);
  swift_release();
  *(_QWORD *)(v0 + 64) = v24;
  v25 = swift_getKeyPath();
  v26 = (_QWORD *)swift_allocObject();
  v26[4] = sub_1B1AF930C;
  v26[5] = v25;
  v26[2] = sub_1B1AF933C;
  v26[3] = v25;
  v26[6] = v25;
  swift_allocObject();
  swift_retain_n();
  v27 = sub_1B1ADC904(0x6556746F5278616DLL, 0xEE0063655670556CLL, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v26, v25, 0, 0,
          0,
          v20,
          0,
          (uint64_t)sub_1B1AF95C4);
  swift_release();
  *(_QWORD *)(v0 + 72) = v27;
  result = sub_1B2228AD0();
  qword_1EEFD5188 = v0;
  return result;
}

uint64_t sub_1B1A5306C(uint64_t result)
{
  uint64_t v1;
  char v2;

  v2 = result;
  if (result >= 6u)
    v2 = 6;
  *(_BYTE *)(v1 + 8) = v2;
  return result;
}

unint64_t sub_1B1A53084()
{
  return 0xD00000000000001CLL;
}

uint64_t sub_1B1A530A0(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, &qword_1EEF57118);
}

uint64_t sub_1B1A530BC(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, &qword_1EEF57118, (unint64_t *)&qword_1EEFD5188);
}

uint64_t sub_1B1A530E8(uint64_t a1)
{
  return sub_1B1A2262C(a1, &qword_1EEF57118, &qword_1EEFD5188);
}

uint64_t sub_1B1A53114()
{
  uint64_t v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E450;
  KeyPath = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F8, MEMORY[0x1E0DEB188], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = sub_1B1AF9820;
  v2[5] = KeyPath;
  v2[2] = sub_1B1AF9850;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v3 = MEMORY[0x1E0DEE9D8];
  v4 = sub_1B1ADC904(0x636E65756C666E69, 0xE900000000000065, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v2, KeyPath, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0,
         (uint64_t)sub_1B1AF9990);
  swift_release();
  *(_QWORD *)(v0 + 32) = v4;
  v5 = swift_getKeyPath();
  sub_1B1AE015C(0);
  v6 = (_QWORD *)swift_allocObject();
  v6[4] = sub_1B1AF9870;
  v6[5] = v5;
  v6[2] = sub_1B1AF98A8;
  v6[3] = v5;
  v6[6] = v5;
  swift_allocObject();
  swift_retain_n();
  v7 = sub_1B1AD68F0(0x726F4E656E616C70, 0xEB000000006C616DLL, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v6, v5, 0, 0,
         0,
         v3,
         0);
  swift_release();
  *(_QWORD *)(v0 + 40) = v7;
  result = sub_1B2228AD0();
  qword_1EEFD5190 = v0;
  return result;
}

unint64_t sub_1B1A53388()
{
  return 0xD000000000000022;
}

uint64_t sub_1B1A533A4(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, &qword_1EEF57120);
}

uint64_t sub_1B1A533C0(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, &qword_1EEF57120, (unint64_t *)&qword_1EEFD5190);
}

uint64_t sub_1B1A533EC(uint64_t a1)
{
  return sub_1B1A2262C(a1, &qword_1EEF57120, &qword_1EEFD5190);
}

uint64_t sub_1B1A53418()
{
  uint64_t v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E4A0;
  KeyPath = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F8, MEMORY[0x1E0DEB188], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = sub_1B1AF9A58;
  v2[5] = KeyPath;
  v2[2] = sub_1B1AF9A88;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v3 = MEMORY[0x1E0DEE9D8];
  v4 = sub_1B1ADC904(0x6854726564726F62, 0xEF7373656E6B6369, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v2, KeyPath, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0,
         (uint64_t)sub_1B1AF9CE0);
  swift_release();
  *(_QWORD *)(v0 + 32) = v4;
  v5 = swift_getKeyPath();
  sub_1B1AE015C(0);
  v6 = (_QWORD *)swift_allocObject();
  v6[4] = sub_1B1AF9AA8;
  v6[5] = v5;
  v6[2] = sub_1B1AF9AE0;
  v6[3] = v5;
  v6[6] = v5;
  swift_allocObject();
  swift_retain_n();
  v7 = sub_1B1AD5154(0x3172656E726F63, 0xE700000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v6, v5, 0, 0,
         0,
         v3,
         0);
  swift_release();
  *(_QWORD *)(v0 + 40) = v7;
  v8 = swift_getKeyPath();
  v9 = (_QWORD *)swift_allocObject();
  v9[4] = sub_1B1AF9AA8;
  v9[5] = v8;
  v9[2] = sub_1B1AF9AE0;
  v9[3] = v8;
  v9[6] = v8;
  swift_allocObject();
  swift_retain_n();
  v10 = sub_1B1AD5154(0x3272656E726F63, 0xE700000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v9, v8, 0, 0,
          0,
          v3,
          0);
  swift_release();
  *(_QWORD *)(v0 + 48) = v10;
  v11 = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F0, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v12 = (_QWORD *)swift_allocObject();
  v12[4] = sub_1B1AF9B00;
  v12[5] = v11;
  v12[2] = sub_1B1AF9B30;
  v12[3] = v11;
  v12[6] = v11;
  swift_allocObject();
  swift_retain_n();
  v13 = sub_1B1ADE580(0x61657241776F6873, 0xE800000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v12, v11, 0, 0,
          0,
          v3,
          0,
          (uint64_t)sub_1B1AF9B50);
  swift_release();
  *(_QWORD *)(v0 + 56) = v13;
  result = sub_1B2228AD0();
  qword_1EEFD5198 = v0;
  return result;
}

unint64_t sub_1B1A53858()
{
  return 0xD00000000000001CLL;
}

uint64_t sub_1B1A53874()
{
  return 13631552;
}

uint64_t sub_1B1A53880(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, &qword_1EEF57128);
}

uint64_t sub_1B1A5389C(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, &qword_1EEF57128, (unint64_t *)&qword_1EEFD5198);
}

uint64_t sub_1B1A538C8(uint64_t a1)
{
  return sub_1B1A2262C(a1, &qword_1EEF57128, &qword_1EEFD5198);
}

uint64_t sub_1B1A538F4()
{
  uint64_t v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E4A0;
  KeyPath = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F8, MEMORY[0x1E0DEB188], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = sub_1B1AF9DA8;
  v2[5] = KeyPath;
  v2[2] = sub_1B1AF9DD8;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v3 = MEMORY[0x1E0DEE9D8];
  v4 = sub_1B1ADC904(0x636E65756C666E69, 0xE900000000000065, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v2, KeyPath, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0,
         (uint64_t)sub_1B1AFA030);
  swift_release();
  *(_QWORD *)(v0 + 32) = v4;
  v5 = swift_getKeyPath();
  sub_1B1AE015C(0);
  v6 = (_QWORD *)swift_allocObject();
  v6[4] = sub_1B1AF9DF8;
  v6[5] = v5;
  v6[2] = sub_1B1AF9E30;
  v6[3] = v5;
  v6[6] = v5;
  swift_allocObject();
  swift_retain_n();
  v7 = sub_1B1AD5DB0(0x6E6543656E616C70, 0xEB00000000726574, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v6, v5, 0, 0,
         0,
         v3,
         0);
  swift_release();
  *(_QWORD *)(v0 + 40) = v7;
  v8 = swift_getKeyPath();
  v9 = (_QWORD *)swift_allocObject();
  v9[4] = sub_1B1AF9DF8;
  v9[5] = v8;
  v9[2] = sub_1B1AF9E30;
  v9[3] = v8;
  v9[6] = v8;
  swift_allocObject();
  swift_retain_n();
  v10 = sub_1B1AD5DB0(0x726F4E656E616C70, 0xEB000000006C616DLL, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v9, v8, 0, 0,
          0,
          v3,
          0);
  swift_release();
  *(_QWORD *)(v0 + 48) = v10;
  v11 = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F0, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v12 = (_QWORD *)swift_allocObject();
  v12[4] = sub_1B1AF9E50;
  v12[5] = v11;
  v12[2] = sub_1B1AF9E80;
  v12[3] = v11;
  v12[6] = v11;
  swift_allocObject();
  swift_retain_n();
  v13 = sub_1B1ADE580(0x6E616C50776F6873, 0xE900000000000065, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v12, v11, 0, 0,
          0,
          v3,
          0,
          (uint64_t)sub_1B1AF9EA0);
  swift_release();
  *(_QWORD *)(v0 + 56) = v13;
  result = sub_1B2228AD0();
  qword_1EEFD51A0 = v0;
  return result;
}

unint64_t sub_1B1A53D40()
{
  return 0xD00000000000001DLL;
}

uint64_t sub_1B1A53D5C(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, &qword_1EEF57130);
}

uint64_t sub_1B1A53D78(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, &qword_1EEF57130, (unint64_t *)&qword_1EEFD51A0);
}

uint64_t sub_1B1A53DA4(uint64_t a1)
{
  return sub_1B1A2262C(a1, &qword_1EEF57130, &qword_1EEFD51A0);
}

uint64_t sub_1B1A53DD0()
{
  uint64_t v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E4C0;
  KeyPath = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F8, MEMORY[0x1E0DEB188], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = sub_1B1AFA0F8;
  v2[5] = KeyPath;
  v2[2] = sub_1B1AFA128;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v3 = MEMORY[0x1E0DEE9D8];
  v4 = sub_1B1ADC904(0x636E65756C666E69, 0xE900000000000065, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v2, KeyPath, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0,
         (uint64_t)sub_1B1AFA258);
  swift_release();
  *(_QWORD *)(v0 + 32) = v4;
  v5 = swift_getKeyPath();
  v6 = (_QWORD *)swift_allocObject();
  v6[4] = sub_1B1AFA0F8;
  v6[5] = v5;
  v6[2] = sub_1B1AFA128;
  v6[3] = v5;
  v6[6] = v5;
  swift_allocObject();
  swift_retain_n();
  v7 = sub_1B1ADC904(0x737569646172, 0xE600000000000000, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v6, v5, 0, 0,
         0,
         v3,
         0,
         (uint64_t)sub_1B1AFA258);
  swift_release();
  *(_QWORD *)(v0 + 40) = v7;
  v8 = swift_getKeyPath();
  v9 = (_QWORD *)swift_allocObject();
  v9[4] = sub_1B1AFA0F8;
  v9[5] = v8;
  v9[2] = sub_1B1AFA128;
  v9[3] = v8;
  v9[6] = v8;
  swift_allocObject();
  swift_retain_n();
  v10 = sub_1B1ADC904(0x65636E6174736964, 0xEF66666F6C6C6146, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v9, v8, 0, 0,
          0,
          v3,
          0,
          (uint64_t)sub_1B1AFA258);
  swift_release();
  *(_QWORD *)(v0 + 48) = v10;
  v11 = swift_getKeyPath();
  v12 = (_QWORD *)swift_allocObject();
  v12[4] = sub_1B1AFA0F8;
  v12[5] = v11;
  v12[2] = sub_1B1AFA128;
  v12[3] = v11;
  v12[6] = v11;
  swift_allocObject();
  swift_retain_n();
  v13 = sub_1B1ADC904(0x6C676E4177656976, 0xE900000000000065, 0, 0, 0x4076800000000000, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v12, v11, 0, 0,
          0,
          v3,
          0,
          (uint64_t)sub_1B1AFA258);
  swift_release();
  *(_QWORD *)(v0 + 56) = v13;
  v14 = swift_getKeyPath();
  v15 = (_QWORD *)swift_allocObject();
  v15[4] = sub_1B1AFA0F8;
  v15[5] = v14;
  v15[2] = sub_1B1AFA128;
  v15[3] = v14;
  v15[6] = v14;
  swift_allocObject();
  swift_retain_n();
  v16 = sub_1B1ADC904(0xD000000000000010, 0x80000001B2329710, 0, 0, 0x4066800000000000, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v15, v14, 0, 0,
          0,
          v3,
          0,
          (uint64_t)sub_1B1AFA258);
  swift_release();
  *(_QWORD *)(v0 + 64) = v16;
  v17 = swift_getKeyPath();
  v18 = (_QWORD *)swift_allocObject();
  v18[4] = sub_1B1AFA0F8;
  v18[5] = v17;
  v18[2] = sub_1B1AFA128;
  v18[3] = v17;
  v18[6] = v17;
  swift_allocObject();
  swift_retain_n();
  v19 = sub_1B1ADC904(0x6556746F5278616DLL, 0xE90000000000006CLL, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v18, v17, 0, 0,
          0,
          v3,
          0,
          (uint64_t)sub_1B1AFA258);
  swift_release();
  *(_QWORD *)(v0 + 72) = v19;
  v20 = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F0, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v21 = (_QWORD *)swift_allocObject();
  v21[4] = sub_1B1AFA148;
  v21[5] = v20;
  v21[2] = sub_1B1AFA178;
  v21[3] = v20;
  v21[6] = v20;
  swift_allocObject();
  swift_retain_n();
  v22 = sub_1B1ADE580(0x61657241776F6873, 0xE800000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v21, v20, 0, 0,
          0,
          v3,
          0,
          (uint64_t)sub_1B1AFA198);
  swift_release();
  *(_QWORD *)(v0 + 80) = v22;
  result = sub_1B2228AD0();
  qword_1EEFD51A8 = v0;
  return result;
}

unint64_t sub_1B1A5449C()
{
  return 0xD00000000000001BLL;
}

uint64_t sub_1B1A544B8(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, &qword_1EEF57138);
}

uint64_t sub_1B1A544D4(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, &qword_1EEF57138, (unint64_t *)&qword_1EEFD51A8);
}

uint64_t sub_1B1A54500(uint64_t a1)
{
  return sub_1B1A2262C(a1, &qword_1EEF57138, &qword_1EEFD51A8);
}

uint64_t sub_1B1A5452C()
{
  uint64_t v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E460;
  KeyPath = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F8, MEMORY[0x1E0DEB188], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = sub_1B1AFA318;
  v2[5] = KeyPath;
  v2[2] = sub_1B1AFA348;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v3 = MEMORY[0x1E0DEE9D8];
  v4 = sub_1B1ADC904(0x636E65756C666E69, 0xE900000000000065, 0, 0, 0x3FF0000000000000, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v2, KeyPath, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0,
         (uint64_t)sub_1B1AFA964);
  swift_release();
  *(_QWORD *)(v0 + 32) = v4;
  v5 = swift_getKeyPath();
  v6 = (_QWORD *)swift_allocObject();
  v6[4] = sub_1B1AFA318;
  v6[5] = v5;
  v6[2] = sub_1B1AFA348;
  v6[3] = v5;
  v6[6] = v5;
  swift_allocObject();
  swift_retain_n();
  v7 = sub_1B1ADC904(0x7473694477656976, 0xEC00000065636E61, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v6, v5, 0, 0,
         0,
         v3,
         0,
         (uint64_t)sub_1B1AFA964);
  swift_release();
  *(_QWORD *)(v0 + 40) = v7;
  v8 = swift_getKeyPath();
  v9 = (_QWORD *)swift_allocObject();
  v9[4] = sub_1B1AFA318;
  v9[5] = v8;
  v9[2] = sub_1B1AFA348;
  v9[3] = v8;
  v9[6] = v8;
  swift_allocObject();
  swift_retain_n();
  v10 = sub_1B1ADC904(0x6C676E4177656976, 0xE900000000000065, 0, 0, 0x4076800000000000, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v9, v8, 0, 0,
          0,
          v3,
          0,
          (uint64_t)sub_1B1AFA964);
  swift_release();
  *(_QWORD *)(v0 + 48) = v10;
  v11 = swift_getKeyPath();
  v12 = (_QWORD *)swift_allocObject();
  v12[4] = sub_1B1AFA318;
  v12[5] = v11;
  v12[2] = sub_1B1AFA348;
  v12[3] = v11;
  v12[6] = v11;
  swift_allocObject();
  swift_retain_n();
  v13 = sub_1B1ADC904(0xD000000000000010, 0x80000001B2329710, 0, 0, 0x4066800000000000, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v12, v11, 0, 0,
          0,
          v3,
          0,
          (uint64_t)sub_1B1AFA964);
  swift_release();
  *(_QWORD *)(v0 + 56) = v13;
  v14 = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B8100, MEMORY[0x1E0DEB418], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v15 = (_QWORD *)swift_allocObject();
  v15[4] = sub_1B1AFA368;
  v15[5] = v14;
  v15[2] = sub_1B1AFA398;
  v15[3] = v14;
  v15[6] = v14;
  swift_allocObject();
  swift_retain_n();
  v16 = sub_1B1AD6CCC(0xD000000000000010, 0x80000001B2329730, 0x4000000000000000, 0, 0x4030000000000000, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v15, v14, 0, 0,
          0,
          v3,
          0,
          (uint64_t)sub_1B1AFA89C);
  swift_release();
  *(_QWORD *)(v0 + 64) = v16;
  v17 = swift_getKeyPath();
  v18 = swift_getKeyPath();
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4B8140, MEMORY[0x1E0DEDC60], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v19 = (_QWORD *)swift_allocObject();
  v19[4] = sub_1B1AFA3E8;
  v19[5] = v18;
  v19[2] = sub_1B1AFA418;
  v19[3] = v18;
  v19[6] = v18;
  swift_allocObject();
  swift_retain_n();
  v20 = sub_1B1ADBDA8(0x65646F4D657A6973, 0xED00007865646E49, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v19, v18, 0, 0,
          0,
          v3,
          0,
          (uint64_t)sub_1B1AFA7D4);
  swift_release();
  sub_1B1A02758(0, &qword_1EEF59E98, (uint64_t)&type metadata for FlockingSizeMode, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v21 = (_QWORD *)swift_allocObject();
  v21[4] = sub_1B1AFA438;
  v21[5] = v17;
  v21[2] = sub_1B1AFA468;
  v21[3] = v17;
  v21[6] = v17;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v22 = sub_1B1ACA02C(0x65646F4D657A6973, 0xE800000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v21, v17, 0, 0,
          0,
          v3,
          v20);
  swift_release();
  swift_release();
  *(_QWORD *)(v0 + 72) = v22;
  v23 = swift_getKeyPath();
  sub_1B1ADF51C();
  v24 = swift_allocObject();
  *(_OWORD *)(v24 + 16) = xmmword_1B226D240;
  *(_QWORD *)(v24 + 32) = 0;
  *(_QWORD *)(v24 + 40) = 0xE000000000000000;
  sub_1B19F8E54(0, (unint64_t *)&qword_1ED4BB0A0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50]);
  *(_QWORD *)(v24 + 72) = v25;
  v26 = swift_allocObject();
  *(_QWORD *)(v24 + 48) = v26;
  *(_OWORD *)(v26 + 16) = xmmword_1B2244F70;
  sub_1B1791524(0, &qword_1EEF59EA0, (uint64_t (*)(uint64_t))sub_1B1AFA498, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for EntityGetSet);
  v27 = (_QWORD *)swift_allocObject();
  v27[4] = sub_1B1AFA488;
  v27[5] = v23;
  v27[2] = sub_1B1AFA490;
  v27[3] = v23;
  v27[6] = v23;
  swift_allocObject();
  swift_retain_n();
  swift_bridgeObjectRetain();
  v28 = sub_1B1ABA4D0(0xD000000000000010, 0x80000001B2329750, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v27, v23, 0, 0,
          0,
          v24,
          0,
          (uint64_t (*)(_QWORD))sub_1B1AFA498,
          (uint64_t)sub_1B1AFA624);
  swift_release();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + 80) = v28;
  v29 = swift_getKeyPath();
  v30 = (_QWORD *)swift_allocObject();
  v30[4] = sub_1B1AFA318;
  v30[5] = v29;
  v30[2] = sub_1B1AFA348;
  v30[3] = v29;
  v30[6] = v29;
  swift_allocObject();
  swift_retain_n();
  v31 = sub_1B1ADC904(0x756C6F56646E696DLL, 0xEF6F69746152656DLL, 0, 0, 0x3FF0000000000000, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v30, v29, 0, 0,
          0,
          v3,
          0,
          (uint64_t)sub_1B1AFA964);
  swift_release();
  *(_QWORD *)(v0 + 88) = v31;
  v32 = swift_getKeyPath();
  v33 = (_QWORD *)swift_allocObject();
  v33[4] = sub_1B1AFA318;
  v33[5] = v32;
  v33[2] = sub_1B1AFA348;
  v33[3] = v32;
  v33[6] = v32;
  swift_allocObject();
  swift_retain_n();
  v34 = sub_1B1ADC904(0x4464657269736564, 0xEF65636E61747369, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v33, v32, 0, 0,
          0,
          v3,
          0,
          (uint64_t)sub_1B1AFA964);
  swift_release();
  *(_QWORD *)(v0 + 96) = v34;
  v35 = swift_getKeyPath();
  v36 = (_QWORD *)swift_allocObject();
  v36[4] = sub_1B1AFA318;
  v36[5] = v35;
  v36[2] = sub_1B1AFA348;
  v36[3] = v35;
  v36[6] = v35;
  swift_allocObject();
  swift_retain_n();
  v37 = sub_1B1ADC904(0xD000000000000012, 0x80000001B2329790, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v36, v35, 0, 0,
          0,
          v3,
          0,
          (uint64_t)sub_1B1AFA964);
  swift_release();
  *(_QWORD *)(v0 + 104) = v37;
  v38 = swift_getKeyPath();
  v39 = (_QWORD *)swift_allocObject();
  v39[4] = sub_1B1AFA318;
  v39[5] = v38;
  v39[2] = sub_1B1AFA348;
  v39[3] = v38;
  v39[6] = v38;
  swift_allocObject();
  swift_retain_n();
  v40 = sub_1B1ADC904(0xD000000000000011, 0x80000001B23297B0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v39, v38, 0, 0,
          0,
          v3,
          0,
          (uint64_t)sub_1B1AFA964);
  swift_release();
  *(_QWORD *)(v0 + 112) = v40;
  v41 = swift_getKeyPath();
  v42 = (_QWORD *)swift_allocObject();
  v42[4] = sub_1B1AFA318;
  v42[5] = v41;
  v42[2] = sub_1B1AFA348;
  v42[3] = v41;
  v42[6] = v41;
  swift_allocObject();
  swift_retain_n();
  v43 = sub_1B1ADC904(0xD000000000000010, 0x80000001B23297D0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v42, v41, 0, 0,
          0,
          v3,
          0,
          (uint64_t)sub_1B1AFA964);
  swift_release();
  *(_QWORD *)(v0 + 120) = v43;
  v44 = swift_getKeyPath();
  v45 = (_QWORD *)swift_allocObject();
  v45[4] = sub_1B1AFA318;
  v45[5] = v44;
  v45[2] = sub_1B1AFA348;
  v45[3] = v44;
  v45[6] = v44;
  swift_allocObject();
  swift_retain_n();
  v46 = sub_1B1ADC904(0xD000000000000011, 0x80000001B23297F0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v45, v44, 0, 0,
          0,
          v3,
          0,
          (uint64_t)sub_1B1AFA964);
  swift_release();
  *(_QWORD *)(v0 + 128) = v46;
  v47 = swift_getKeyPath();
  v48 = (_QWORD *)swift_allocObject();
  v48[4] = sub_1B1AFA318;
  v48[5] = v47;
  v48[2] = sub_1B1AFA348;
  v48[3] = v47;
  v48[6] = v47;
  swift_allocObject();
  swift_retain_n();
  v49 = sub_1B1ADC904(0xD000000000000012, 0x80000001B2329810, 0x3F50624DD2F1A9FCLL, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v48, v47, 0, 0,
          0,
          v3,
          0,
          (uint64_t)sub_1B1AFA964);
  swift_release();
  *(_QWORD *)(v0 + 136) = v49;
  v50 = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F0, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v51 = (_QWORD *)swift_allocObject();
  v51[4] = sub_1B1AFA50C;
  v51[5] = v50;
  v51[2] = sub_1B1AFA53C;
  v51[3] = v50;
  v51[6] = v50;
  swift_allocObject();
  swift_retain_n();
  v52 = sub_1B1ADE580(0x64697247776F6873, 0xE800000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v51, v50, 0, 0,
          0,
          v3,
          0,
          (uint64_t)sub_1B1AFA55C);
  swift_release();
  *(_QWORD *)(v0 + 144) = v52;
  v53 = swift_getKeyPath();
  v54 = (_QWORD *)swift_allocObject();
  v54[4] = sub_1B1AFA50C;
  v54[5] = v53;
  v54[2] = sub_1B1AFA53C;
  v54[3] = v53;
  v54[6] = v53;
  swift_allocObject();
  swift_retain_n();
  v55 = sub_1B1ADE580(0x6C6C6543776F6873, 0xE900000000000073, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v54, v53, 0, 0,
          0,
          v3,
          0,
          (uint64_t)sub_1B1AFA55C);
  swift_release();
  *(_QWORD *)(v0 + 152) = v55;
  v56 = swift_getKeyPath();
  v57 = (_QWORD *)swift_allocObject();
  v57[4] = sub_1B1AFA50C;
  v57[5] = v56;
  v57[2] = sub_1B1AFA53C;
  v57[3] = v56;
  v57[6] = v56;
  swift_allocObject();
  swift_retain_n();
  v58 = sub_1B1ADE580(0x6F666E49676F6CLL, 0xE700000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v57, v56, 0, 0,
          0,
          v3,
          0,
          (uint64_t)sub_1B1AFA55C);
  swift_release();
  *(_QWORD *)(v0 + 160) = v58;
  result = sub_1B2228AD0();
  qword_1EEFD51B0 = v0;
  return result;
}

uint64_t sub_1B1A5566C()
{
  uint64_t v0;

  return *(char *)(v0 + 32);
}

uint64_t sub_1B1A55674(uint64_t result)
{
  uint64_t v1;
  char v2;

  v2 = result;
  if ((result & 0xFC) != 0)
    v2 = 4;
  *(_BYTE *)(v1 + 32) = v2;
  return result;
}

unint64_t sub_1B1A5568C()
{
  return 0xD000000000000011;
}

uint64_t sub_1B1A556A8()
{
  if (qword_1EEF57140 != -1)
    swift_once();
  return swift_bridgeObjectRetain();
}

uint64_t sub_1B1A556E8(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, &qword_1EEF57140);
}

uint64_t sub_1B1A55704(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, &qword_1EEF57140, (unint64_t *)&qword_1EEFD51B0);
}

uint64_t sub_1B1A55730(uint64_t a1)
{
  return sub_1B1A2262C(a1, &qword_1EEF57140, &qword_1EEFD51B0);
}

uint64_t sub_1B1A5575C()
{
  uint64_t v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E530;
  KeyPath = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F8, MEMORY[0x1E0DEB188], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = sub_1B1AFAA2C;
  v2[5] = KeyPath;
  v2[2] = sub_1B1AFAA5C;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v3 = MEMORY[0x1E0DEE9D8];
  v4 = sub_1B1ADC904(0xD000000000000010, 0x80000001B2329AC0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v2, KeyPath, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0,
         (uint64_t)sub_1B1AFAE78);
  swift_release();
  *(_QWORD *)(v0 + 32) = v4;
  v5 = swift_getKeyPath();
  v6 = (_QWORD *)swift_allocObject();
  v6[4] = sub_1B1AFAA2C;
  v6[5] = v5;
  v6[2] = sub_1B1AFAA5C;
  v6[3] = v5;
  v6[6] = v5;
  swift_allocObject();
  swift_retain_n();
  v7 = sub_1B1ADC904(0x676E697369757263, 0xED00006465657053, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v6, v5, 0, 0,
         0,
         v3,
         0,
         (uint64_t)sub_1B1AFAE78);
  swift_release();
  *(_QWORD *)(v0 + 40) = v7;
  v8 = swift_getKeyPath();
  sub_1B1AE1F14(0);
  v9 = (_QWORD *)swift_allocObject();
  v9[4] = sub_1B1AFAA7C;
  v9[5] = v8;
  v9[2] = sub_1B1AFAAAC;
  v9[3] = v8;
  v9[6] = v8;
  swift_allocObject();
  swift_retain_n();
  v10 = sub_1B1AD47DC(0x657053706D616C63, 0xEA00000000006465, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v9, v8, 0, 0,
          0,
          v3,
          0);
  swift_release();
  *(_QWORD *)(v0 + 48) = v10;
  v11 = swift_getKeyPath();
  v12 = (_QWORD *)swift_allocObject();
  v12[4] = sub_1B1AFAA2C;
  v12[5] = v11;
  v12[2] = sub_1B1AFAA5C;
  v12[3] = v11;
  v12[6] = v11;
  swift_allocObject();
  swift_retain_n();
  v13 = sub_1B1ADC904(0x7244656C706D6973, 0xEF6563726F466761, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v12, v11, 0, 0,
          0,
          v3,
          0,
          (uint64_t)sub_1B1AFAE78);
  swift_release();
  *(_QWORD *)(v0 + 56) = v13;
  v14 = swift_getKeyPath();
  v15 = (_QWORD *)swift_allocObject();
  v15[4] = sub_1B1AFAA2C;
  v15[5] = v14;
  v15[2] = sub_1B1AFAA5C;
  v15[3] = v14;
  v15[6] = v14;
  swift_allocObject();
  swift_retain_n();
  v16 = sub_1B1ADC904(0xD000000000000012, 0x80000001B2329B00, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v15, v14, 0, 0,
          0,
          v3,
          0,
          (uint64_t)sub_1B1AFAE78);
  swift_release();
  *(_QWORD *)(v0 + 64) = v16;
  v17 = swift_getKeyPath();
  v18 = swift_getKeyPath();
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4B8140, MEMORY[0x1E0DEDC60], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v19 = (_QWORD *)swift_allocObject();
  v19[4] = sub_1B1AFAAFC;
  v19[5] = v18;
  v19[2] = sub_1B1AFAB2C;
  v19[3] = v18;
  v19[6] = v18;
  swift_allocObject();
  swift_retain_n();
  v20 = sub_1B1ADBDA8(0xD000000000000017, 0x80000001B232D5F0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v19, v18, 0, 0,
          0,
          v3,
          0,
          (uint64_t)sub_1B1AFACD0);
  swift_release();
  sub_1B1A02758(0, &qword_1EEF59E08, (uint64_t)&type metadata for FlockingLocalAxis, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v21 = (_QWORD *)swift_allocObject();
  v21[4] = sub_1B1AFAB4C;
  v21[5] = v17;
  v21[2] = sub_1B1AFAB7C;
  v21[3] = v17;
  v21[6] = v17;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v22 = sub_1B1AD5610(0xD000000000000012, 0x80000001B2329B20, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v21, v17, 0, 0,
          0,
          v3,
          v20,
          (uint64_t)sub_1B1AFAB9C);
  swift_release();
  swift_release();
  *(_QWORD *)(v0 + 72) = v22;
  result = sub_1B2228AD0();
  qword_1EEFD51B8 = v0;
  return result;
}

uint64_t sub_1B1A55E68()
{
  uint64_t v0;

  return *(char *)(v0 + 24);
}

uint64_t sub_1B1A55E70(uint64_t result)
{
  uint64_t v1;
  char v2;

  v2 = result;
  if (result >= 6u)
    v2 = 6;
  *(_BYTE *)(v1 + 24) = v2;
  return result;
}

unint64_t sub_1B1A55E88()
{
  return 0xD000000000000018;
}

uint64_t sub_1B1A55EA4(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, &qword_1EEF57148);
}

uint64_t sub_1B1A55EC0(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, &qword_1EEF57148, (unint64_t *)&qword_1EEFD51B8);
}

uint64_t sub_1B1A55EEC(uint64_t a1)
{
  return sub_1B1A2262C(a1, &qword_1EEF57148, &qword_1EEFD51B8);
}

uint64_t sub_1B1A55F18()
{
  uint64_t v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E4C0;
  KeyPath = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F0, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = sub_1B1AFAF40;
  v2[5] = KeyPath;
  v2[2] = sub_1B1AFAF70;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v3 = MEMORY[0x1E0DEE9D8];
  v4 = sub_1B1ADE580(1953066341, 0xE400000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v2, KeyPath, 0xD000000000000040, 0x80000001B232D630,
         0,
         MEMORY[0x1E0DEE9D8],
         0,
         (uint64_t)sub_1B1AFB1C0);
  swift_release();
  *(_QWORD *)(v0 + 32) = v4;
  v5 = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B8040, (uint64_t)&type metadata for Entity, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v6 = (_QWORD *)swift_allocObject();
  v6[4] = sub_1B1AFAF90;
  v6[5] = v5;
  v6[2] = sub_1B1AFAFC0;
  v6[3] = v5;
  v6[6] = v5;
  swift_allocObject();
  swift_retain_n();
  v7 = sub_1B1AD9F50(0x656372756F73, 0xE600000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 11, 0, (uint64_t)v6, v5, 0xD0000000000000B5, 0x80000001B232D680,
         0,
         v3,
         0,
         (uint64_t)sub_1B1AFB0F8);
  swift_release();
  *(_QWORD *)(v0 + 40) = v7;
  v8 = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F8, MEMORY[0x1E0DEB188], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v9 = (_QWORD *)swift_allocObject();
  v9[4] = sub_1B1AFAFE0;
  v9[5] = v8;
  v9[2] = sub_1B1AFB010;
  v9[3] = v8;
  v9[6] = v8;
  swift_allocObject();
  swift_retain_n();
  v10 = sub_1B1ADC904(0x737569646172, 0xE600000000000000, 0x3F847AE147AE147BLL, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v9, v8, 0xD000000000000019, 0x80000001B232D740,
          0,
          v3,
          0,
          (uint64_t)sub_1B1AFB030);
  swift_release();
  *(_QWORD *)(v0 + 48) = v10;
  v11 = swift_getKeyPath();
  v12 = (_QWORD *)swift_allocObject();
  v12[4] = sub_1B1AFAFE0;
  v12[5] = v11;
  v12[2] = sub_1B1AFB010;
  v12[3] = v11;
  v12[6] = v11;
  swift_allocObject();
  swift_retain_n();
  v13 = sub_1B1ADC904(0x797469736E6564, 0xE700000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v12, v11, 0xD000000000000030, 0x80000001B232D760,
          0,
          v3,
          0,
          (uint64_t)sub_1B1AFB030);
  swift_release();
  *(_QWORD *)(v0 + 56) = v13;
  v14 = swift_getKeyPath();
  v15 = (_QWORD *)swift_allocObject();
  v15[4] = sub_1B1AFAFE0;
  v15[5] = v14;
  v15[2] = sub_1B1AFB010;
  v15[3] = v14;
  v15[6] = v14;
  swift_allocObject();
  swift_retain_n();
  v16 = sub_1B1ADC904(0x797469636F6C6576, 0xE800000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v15, v14, 0xD0000000000000C6, 0x80000001B232D7A0,
          0,
          v3,
          0,
          (uint64_t)sub_1B1AFB030);
  swift_release();
  *(_QWORD *)(v0 + 64) = v16;
  v17 = swift_getKeyPath();
  v18 = (_QWORD *)swift_allocObject();
  v18[4] = sub_1B1AFAF40;
  v18[5] = v17;
  v18[2] = sub_1B1AFAF70;
  v18[3] = v17;
  v18[6] = v17;
  swift_allocObject();
  swift_retain_n();
  v19 = sub_1B1ADE580(0x74696D45776F6873, 0xEB00000000726574, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v18, v17, 0xD000000000000042, 0x80000001B232D870,
          0,
          v3,
          0,
          (uint64_t)sub_1B1AFB1C0);
  swift_release();
  *(_QWORD *)(v0 + 72) = v19;
  v20 = swift_getKeyPath();
  v21 = (_QWORD *)swift_allocObject();
  v21[4] = sub_1B1AFAF40;
  v21[5] = v20;
  v21[2] = sub_1B1AFAF70;
  v21[3] = v20;
  v21[6] = v20;
  swift_allocObject();
  swift_retain_n();
  v22 = sub_1B1ADE580(0x6F6C6556776F6873, 0xEC00000079746963, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v21, v20, 0xD000000000000021, 0x80000001B232D8C0,
          0,
          v3,
          0,
          (uint64_t)sub_1B1AFB1C0);
  swift_release();
  *(_QWORD *)(v0 + 80) = v22;
  result = sub_1B2228AD0();
  qword_1EEFD51C0 = v0;
  return result;
}

unint64_t sub_1B1A56690()
{
  return 0xD000000000000019;
}

uint64_t sub_1B1A566AC()
{
  return 11534400;
}

uint64_t sub_1B1A566B8(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, &qword_1EEF57150);
}

uint64_t sub_1B1A566D4(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, &qword_1EEF57150, (unint64_t *)&qword_1EEFD51C0);
}

uint64_t sub_1B1A56700(uint64_t a1)
{
  return sub_1B1A2262C(a1, &qword_1EEF57150, &qword_1EEFD51C0);
}

uint64_t sub_1B1A5672C()
{
  uint64_t v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E460;
  KeyPath = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F0, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = sub_1B1AFB288;
  v2[5] = KeyPath;
  v2[2] = sub_1B1AFB2B8;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v3 = MEMORY[0x1E0DEE9D8];
  v4 = sub_1B1ADE580(0x766C6F5370657473, 0xEA00000000007265, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v2, KeyPath, 0xD00000000000002ELL, 0x80000001B232D910,
         0,
         MEMORY[0x1E0DEE9D8],
         0,
         (uint64_t)sub_1B1AFBB84);
  swift_release();
  *(_QWORD *)(v0 + 32) = v4;
  v5 = swift_getKeyPath();
  v6 = (_QWORD *)swift_allocObject();
  v6[4] = sub_1B1AFB288;
  v6[5] = v5;
  v6[2] = sub_1B1AFB2B8;
  v6[3] = v5;
  v6[6] = v5;
  swift_allocObject();
  swift_retain_n();
  v7 = sub_1B1ADE580(0x6150746365766461, 0xEF73656C63697472, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v6, v5, 0xD00000000000005DLL, 0x80000001B232D940,
         0,
         v3,
         0,
         (uint64_t)sub_1B1AFBB84);
  swift_release();
  *(_QWORD *)(v0 + 40) = v7;
  v8 = swift_getKeyPath();
  v9 = swift_getKeyPath();
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4B8140, MEMORY[0x1E0DEDC60], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v10 = (_QWORD *)swift_allocObject();
  v10[4] = sub_1B1AFB30C;
  v10[5] = v9;
  v10[2] = sub_1B1AFB33C;
  v10[3] = v9;
  v10[6] = v9;
  swift_allocObject();
  swift_retain_n();
  v11 = sub_1B1ADBDA8(0x646E497075746573, 0xEA00000000007865, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v10, v9, 0, 0,
          0,
          v3,
          0,
          (uint64_t)sub_1B1AFBAC4);
  swift_release();
  sub_1B1A02758(0, &qword_1EEF59F38, (uint64_t)&type metadata for FluidSolver2DSolverSetupType, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v12 = (_QWORD *)swift_allocObject();
  v12[4] = sub_1B1AFB35C;
  v12[5] = v8;
  v12[2] = sub_1B1AFB38C;
  v12[3] = v8;
  v12[6] = v8;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v13 = sub_1B1AD2954(0x7075746573, 0xE500000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v12, v8, 0, 0,
          0,
          v3,
          v11);
  swift_release();
  swift_release();
  *(_QWORD *)(v0 + 48) = v13;
  v14 = swift_getKeyPath();
  v15 = swift_getKeyPath();
  v16 = (_QWORD *)swift_allocObject();
  v16[4] = sub_1B1AFB30C;
  v16[5] = v15;
  v16[2] = sub_1B1AFB33C;
  v16[3] = v15;
  v16[6] = v15;
  swift_allocObject();
  swift_retain_n();
  v17 = sub_1B1ADBDA8(0x6E49726564726F62, 0xEB00000000786564, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v16, v15, 0, 0,
          0,
          v3,
          0,
          (uint64_t)sub_1B1AFBAC4);
  swift_release();
  sub_1B1A02758(0, &qword_1EEF59F40, (uint64_t)&type metadata for FluidSolver2DSolverBorderType, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v18 = (_QWORD *)swift_allocObject();
  v18[4] = sub_1B1AFB3DC;
  v18[5] = v14;
  v18[2] = sub_1B1AFB40C;
  v18[3] = v14;
  v18[6] = v14;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v19 = sub_1B1AD2D10(0x726564726F62, 0xE600000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v18, v14, 0, 0,
          0,
          v3,
          v17);
  swift_release();
  swift_release();
  *(_QWORD *)(v0 + 56) = v19;
  v20 = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F8, MEMORY[0x1E0DEB188], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v21 = (_QWORD *)swift_allocObject();
  v21[4] = sub_1B1AFB42C;
  v21[5] = v20;
  v21[2] = sub_1B1AFB45C;
  v21[3] = v20;
  v21[6] = v20;
  swift_allocObject();
  swift_retain_n();
  v22 = MEMORY[0x1E0DEE9D8];
  v23 = sub_1B1ADC904(0x636E65756C666E69, 0xE900000000000065, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v21, v20, 0xD00000000000004CLL, 0x80000001B232D9A0,
          0,
          MEMORY[0x1E0DEE9D8],
          0,
          (uint64_t)sub_1B1AFB824);
  swift_release();
  *(_QWORD *)(v0 + 64) = v23;
  v24 = swift_getKeyPath();
  v25 = (_QWORD *)swift_allocObject();
  v25[4] = sub_1B1AFB42C;
  v25[5] = v24;
  v25[2] = sub_1B1AFB45C;
  v25[3] = v24;
  v25[6] = v24;
  swift_allocObject();
  swift_retain_n();
  v26 = sub_1B1ADC904(0x70537265766C6F73, 0xEB00000000646565, 0, 0, 0x4008000000000000, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v25, v24, 0xD00000000000003DLL, 0x80000001B232D9F0,
          0,
          v22,
          0,
          (uint64_t)sub_1B1AFB824);
  swift_release();
  *(_QWORD *)(v0 + 72) = v26;
  v27 = swift_getKeyPath();
  v28 = (_QWORD *)swift_allocObject();
  v28[4] = sub_1B1AFB42C;
  v28[5] = v27;
  v28[2] = sub_1B1AFB45C;
  v28[3] = v27;
  v28[6] = v27;
  swift_allocObject();
  swift_retain_n();
  v29 = sub_1B1ADC904(0x66666F6C6C6166, 0xE700000000000000, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v28, v27, 0, 0,
          0,
          v22,
          0,
          (uint64_t)sub_1B1AFB824);
  swift_release();
  *(_QWORD *)(v0 + 80) = v29;
  v30 = swift_getKeyPath();
  sub_1B1AE015C(0);
  v31 = (_QWORD *)swift_allocObject();
  v31[4] = sub_1B1AFB47C;
  v31[5] = v30;
  v31[2] = sub_1B1AFB4B4;
  v31[3] = v30;
  v31[6] = v30;
  swift_allocObject();
  swift_retain_n();
  v32 = sub_1B1AD30CC(0x746E65747865, 0xE600000000000000, 0x3FB999999999999ALL, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v31, v30, 0xD000000000000021, 0x80000001B232DA30,
          0,
          v22,
          0);
  swift_release();
  *(_QWORD *)(v0 + 88) = v32;
  v33 = swift_getKeyPath();
  v34 = (_QWORD *)swift_allocObject();
  v34[4] = sub_1B1AFB42C;
  v34[5] = v33;
  v34[2] = sub_1B1AFB45C;
  v34[3] = v33;
  v34[6] = v33;
  swift_allocObject();
  swift_retain_n();
  v35 = sub_1B1ADC904(0x657A69536C6C6563, 0xE800000000000000, 0x3FA999999999999ALL, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v34, v33, 0xD000000000000054, 0x80000001B232DA60,
          0,
          v22,
          0,
          (uint64_t)sub_1B1AFB824);
  swift_release();
  *(_QWORD *)(v0 + 96) = v35;
  v36 = swift_getKeyPath();
  v37 = (_QWORD *)swift_allocObject();
  v37[4] = sub_1B1AFB42C;
  v37[5] = v36;
  v37[2] = sub_1B1AFB45C;
  v37[3] = v36;
  v37[6] = v36;
  swift_allocObject();
  swift_retain_n();
  v38 = sub_1B1ADC904(0x7469736F63736976, 0xE900000000000079, 0, 0, 0x3FF0000000000000, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v37, v36, 0xD00000000000001ALL, 0x80000001B232DAC0,
          0,
          v22,
          0,
          (uint64_t)sub_1B1AFB824);
  swift_release();
  *(_QWORD *)(v0 + 104) = v38;
  v39 = swift_getKeyPath();
  v40 = (_QWORD *)swift_allocObject();
  v40[4] = sub_1B1AFB42C;
  v40[5] = v39;
  v40[2] = sub_1B1AFB45C;
  v40[3] = v39;
  v40[6] = v39;
  swift_allocObject();
  swift_retain_n();
  v41 = sub_1B1ADC904(0x7469636974726F76, 0xE900000000000079, 0, 0, 0x3FF0000000000000, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v40, v39, 0xD000000000000021, 0x80000001B232DAE0,
          0,
          v22,
          0,
          (uint64_t)sub_1B1AFB824);
  swift_release();
  *(_QWORD *)(v0 + 112) = v41;
  v42 = swift_getKeyPath();
  v43 = (_QWORD *)swift_allocObject();
  v43[4] = sub_1B1AFB42C;
  v43[5] = v42;
  v43[2] = sub_1B1AFB45C;
  v43[3] = v42;
  v43[6] = v42;
  swift_allocObject();
  swift_retain_n();
  v44 = sub_1B1ADC904(0x797469636F6C6576, 0xEF676E69706D6144, 0, 0, 0x3FF0000000000000, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v43, v42, 0xD00000000000001CLL, 0x80000001B232DB10,
          0,
          v22,
          0,
          (uint64_t)sub_1B1AFB824);
  swift_release();
  *(_QWORD *)(v0 + 120) = v44;
  v45 = swift_getKeyPath();
  v46 = (_QWORD *)swift_allocObject();
  v46[4] = sub_1B1AFB288;
  v46[5] = v45;
  v46[2] = sub_1B1AFB2B8;
  v46[3] = v45;
  v46[6] = v45;
  swift_allocObject();
  swift_retain_n();
  v47 = sub_1B1ADE580(0x64697247776F6873, 0xE900000000000073, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v46, v45, 0xD000000000000025, 0x80000001B232DB30,
          0,
          v22,
          0,
          (uint64_t)sub_1B1AFBB84);
  swift_release();
  *(_QWORD *)(v0 + 128) = v47;
  v48 = swift_getKeyPath();
  v49 = (_QWORD *)swift_allocObject();
  v49[4] = sub_1B1AFB288;
  v49[5] = v48;
  v49[2] = sub_1B1AFB2B8;
  v49[3] = v48;
  v49[6] = v48;
  swift_allocObject();
  swift_retain_n();
  v50 = sub_1B1ADE580(0x6F6C6556776F6873, 0xEE00736569746963, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v49, v48, 0xD00000000000002FLL, 0x80000001B232DB60,
          0,
          v22,
          0,
          (uint64_t)sub_1B1AFBB84);
  swift_release();
  *(_QWORD *)(v0 + 136) = v50;
  v51 = swift_getKeyPath();
  v52 = (_QWORD *)swift_allocObject();
  v52[4] = sub_1B1AFB288;
  v52[5] = v51;
  v52[2] = sub_1B1AFB2B8;
  v52[3] = v51;
  v52[6] = v51;
  swift_allocObject();
  swift_retain_n();
  v53 = sub_1B1ADE580(0x736E6544776F6873, 0xED00007365697469, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v52, v51, 0xD00000000000002ELL, 0x80000001B232DB90,
          0,
          v22,
          0,
          (uint64_t)sub_1B1AFBB84);
  swift_release();
  *(_QWORD *)(v0 + 144) = v53;
  v54 = swift_getKeyPath();
  sub_1B1ADF51C();
  v55 = swift_allocObject();
  *(_OWORD *)(v55 + 16) = xmmword_1B226D240;
  *(_QWORD *)(v55 + 32) = 0;
  *(_QWORD *)(v55 + 40) = 0xE000000000000000;
  v56 = MEMORY[0x1E0DEB188];
  *(_QWORD *)(v55 + 72) = MEMORY[0x1E0DEB188];
  *(_DWORD *)(v55 + 48) = 1065353216;
  sub_1B1AFB524(0);
  v57 = (_QWORD *)swift_allocObject();
  v57[4] = sub_1B1AFB4D4;
  v57[5] = v54;
  v57[2] = sub_1B1AFB504;
  v57[3] = v54;
  v57[6] = v54;
  swift_allocObject();
  swift_retain_n();
  swift_bridgeObjectRetain();
  v58 = sub_1B1ABD450(0xD000000000000010, 0x80000001B23299E0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v57, v54, 0, 0,
          0,
          v55,
          0,
          &qword_1EEF59F50,
          v56,
          (uint64_t)sub_1B1AFB590);
  swift_release();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + 152) = v58;
  v59 = swift_getKeyPath();
  v60 = swift_allocObject();
  *(_OWORD *)(v60 + 16) = xmmword_1B226D240;
  *(_QWORD *)(v60 + 32) = 0;
  *(_QWORD *)(v60 + 40) = 0xE000000000000000;
  v61 = MEMORY[0x1E0DEB188];
  *(_QWORD *)(v60 + 72) = MEMORY[0x1E0DEB188];
  *(_DWORD *)(v60 + 48) = 1065353216;
  v62 = (_QWORD *)swift_allocObject();
  v62[4] = sub_1B1AFB4D4;
  v62[5] = v59;
  v62[2] = sub_1B1AFB504;
  v62[3] = v59;
  v62[6] = v59;
  swift_allocObject();
  swift_retain_n();
  swift_bridgeObjectRetain();
  v63 = sub_1B1ABD450(0x49797469736E6564, 0xEF65756C61566F73, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v62, v59, 0, 0,
          0,
          v60,
          0,
          &qword_1EEF59F50,
          v61,
          (uint64_t)sub_1B1AFB590);
  swift_release();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + 160) = v63;
  result = sub_1B2228AD0();
  qword_1EEFD51C8 = v0;
  return result;
}

uint64_t sub_1B1A57A7C()
{
  uint64_t v0;

  return *(char *)(v0 + 10);
}

uint64_t sub_1B1A57A84()
{
  uint64_t v0;

  return *(char *)(v0 + 11);
}

uint64_t sub_1B1A57A8C(uint64_t result)
{
  uint64_t v1;
  char v2;

  v2 = result;
  if (result >= 7u)
    v2 = 7;
  *(_BYTE *)(v1 + 11) = v2;
  return result;
}

unint64_t sub_1B1A57AA4()
{
  return 0xD000000000000018;
}

uint64_t sub_1B1A57AC0()
{
  if (qword_1EEF57158 != -1)
    swift_once();
  return swift_bridgeObjectRetain();
}

uint64_t sub_1B1A57B00(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, &qword_1EEF57158);
}

uint64_t sub_1B1A57B1C(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, &qword_1EEF57158, (unint64_t *)&qword_1EEFD51C8);
}

uint64_t sub_1B1A57B48(uint64_t a1)
{
  return sub_1B1A2262C(a1, &qword_1EEF57158, &qword_1EEFD51C8);
}

uint64_t sub_1B1A57B74()
{
  uint64_t v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E450;
  KeyPath = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F8, MEMORY[0x1E0DEB188], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = sub_1B1AFBC44;
  v2[5] = KeyPath;
  v2[2] = sub_1B1AFBC74;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v3 = MEMORY[0x1E0DEE9D8];
  v4 = sub_1B1ADC904(1734439524, 0xE400000000000000, 0, 0, 0x4059000000000000, 0, 0x3F847AE147AE147BLL, 0, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v2, KeyPath, 0xD000000000000029, 0x80000001B232DBC0,
         0,
         MEMORY[0x1E0DEE9D8],
         0,
         (uint64_t)sub_1B1AFBDAC);
  swift_release();
  *(_QWORD *)(v0 + 32) = v4;
  v5 = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F0, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v6 = (_QWORD *)swift_allocObject();
  v6[4] = sub_1B1AFBC94;
  v6[5] = v5;
  v6[2] = sub_1B1AFBCC4;
  v6[3] = v5;
  v6[6] = v5;
  swift_allocObject();
  swift_retain_n();
  v7 = sub_1B1ADE580(0xD000000000000010, 0x80000001B232DBF0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v6, v5, 0xD000000000000031, 0x80000001B232DC10,
         0,
         v3,
         0,
         (uint64_t)sub_1B1AFBCE4);
  swift_release();
  *(_QWORD *)(v0 + 40) = v7;
  result = sub_1B2228AD0();
  qword_1EEFD51D0 = v0;
  return result;
}

uint64_t sub_1B1A57E44()
{
  return 1734439492;
}

uint64_t sub_1B1A57E54(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, &qword_1EEF57160);
}

uint64_t sub_1B1A57E70(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, &qword_1EEF57160, (unint64_t *)&qword_1EEFD51D0);
}

uint64_t sub_1B1A57E9C(uint64_t a1)
{
  return sub_1B1A2262C(a1, &qword_1EEF57160, &qword_1EEFD51D0);
}

uint64_t sub_1B1A57EC8()
{
  uint64_t v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E4A0;
  KeyPath = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B8040, (uint64_t)&type metadata for Entity, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = sub_1B1AFBE74;
  v2[5] = KeyPath;
  v2[2] = sub_1B1AFBEA4;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v3 = MEMORY[0x1E0DEE9D8];
  v4 = sub_1B1AD9F50(0x6D45656372756F73, 0xED00007265747469, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 11, 0, (uint64_t)v2, KeyPath, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0,
         (uint64_t)sub_1B1AFC370);
  swift_release();
  *(_QWORD *)(v0 + 32) = v4;
  v5 = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1EEF59FD0, (uint64_t)&type metadata for SourceDataKind, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v6 = (_QWORD *)swift_allocObject();
  v6[4] = sub_1B1AFBEC4;
  v6[5] = v5;
  v6[2] = sub_1B1AFBEF4;
  v6[3] = v5;
  v6[6] = v5;
  swift_allocObject();
  swift_retain_n();
  v7 = sub_1B1ABDD38(0x6144656372756F73, 0xEA00000000006174, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v6, v5, 0, 0,
         0,
         v3,
         0);
  swift_release();
  *(_QWORD *)(v0 + 40) = v7;
  v8 = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1EEF59FD8, (uint64_t)&type metadata for TargetDataKind, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v9 = (_QWORD *)swift_allocObject();
  v9[4] = sub_1B1AFBF14;
  v9[5] = v8;
  v9[2] = sub_1B1AFBF44;
  v9[3] = v8;
  v9[6] = v8;
  swift_allocObject();
  swift_retain_n();
  v10 = sub_1B1ABE0F4(0x6144746567726174, 0xEA00000000006174, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v9, v8, 0, 0,
          0,
          v3,
          0);
  swift_release();
  *(_QWORD *)(v0 + 48) = v10;
  v11 = swift_getKeyPath();
  sub_1B1ADF51C();
  v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_1B226D240;
  *(_QWORD *)(v12 + 32) = 0;
  *(_QWORD *)(v12 + 40) = 0xE000000000000000;
  v13 = MEMORY[0x1E0DEB418];
  *(_QWORD *)(v12 + 72) = MEMORY[0x1E0DEB418];
  *(_QWORD *)(v12 + 48) = 1;
  sub_1B1ADF9C4(0);
  v14 = (_QWORD *)swift_allocObject();
  v14[4] = sub_1B1AFBF64;
  v14[5] = v11;
  v14[2] = sub_1B1AFBF8C;
  v14[3] = v11;
  v14[6] = v11;
  swift_allocObject();
  swift_retain_n();
  swift_bridgeObjectRetain();
  v15 = sub_1B1ABD450(0xD000000000000011, 0x80000001B2328960, 0x3FF0000000000000, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v14, v11, 0, 0,
          0,
          v12,
          0,
          &qword_1ED4BA580,
          v13,
          (uint64_t)sub_1B1AFBFAC);
  swift_release();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + 56) = v15;
  result = sub_1B2228AD0();
  qword_1EEFD51D8 = v0;
  return result;
}

uint64_t sub_1B1A5837C()
{
  return 0x6174614479706F43;
}

uint64_t sub_1B1A58394(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, qword_1EEF57168);
}

uint64_t sub_1B1A583B0(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, qword_1EEF57168, (unint64_t *)&qword_1EEFD51D8);
}

uint64_t sub_1B1A583DC(uint64_t a1)
{
  return sub_1B1A2262C(a1, qword_1EEF57168, &qword_1EEFD51D8);
}

uint64_t sub_1B1A58408()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E500;
  KeyPath = swift_getKeyPath();
  v2 = swift_getKeyPath();
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4B8140, MEMORY[0x1E0DEDC60], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v3 = (_QWORD *)swift_allocObject();
  v3[4] = sub_1B1AFC468;
  v3[5] = v2;
  v3[2] = sub_1B1AFC498;
  v3[3] = v2;
  v3[6] = v2;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v4 = MEMORY[0x1E0DEE9D8];
  v5 = sub_1B1ADBDA8(0x65646E49646E696BLL, 0xE900000000000078, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v3, v2, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0,
         (uint64_t)sub_1B1AFC944);
  swift_release();
  sub_1B1A02758(0, &qword_1ED4B80D0, (uint64_t)&type metadata for NoiseKind, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v6 = (_QWORD *)swift_allocObject();
  v6[4] = sub_1B1AFC4B8;
  v6[5] = KeyPath;
  v6[2] = sub_1B1AFC4E8;
  v6[3] = KeyPath;
  v6[6] = KeyPath;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v7 = sub_1B1AC5358(1684957547, 0xE400000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v6, KeyPath, 0, 0,
         0,
         v4,
         v5,
         (uint64_t)sub_1B1AFC850);
  swift_release();
  swift_release();
  *(_QWORD *)(v0 + 32) = v7;
  v8 = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F8, MEMORY[0x1E0DEB188], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v9 = (_QWORD *)swift_allocObject();
  v9[4] = sub_1B1AFC508;
  v9[5] = v8;
  v9[2] = sub_1B1AFC538;
  v9[3] = v8;
  v9[6] = v8;
  swift_allocObject();
  swift_retain_n();
  v10 = sub_1B1ADC904(0x7469736E65746E69, 0xE900000000000079, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v9, v8, 0, 0,
          0,
          v4,
          0,
          (uint64_t)sub_1B1AFC788);
  swift_release();
  *(_QWORD *)(v0 + 40) = v10;
  v11 = swift_getKeyPath();
  v12 = (_QWORD *)swift_allocObject();
  v12[4] = sub_1B1AFC508;
  v12[5] = v11;
  v12[2] = sub_1B1AFC538;
  v12[3] = v11;
  v12[6] = v11;
  swift_allocObject();
  swift_retain_n();
  v13 = sub_1B1ADC904(0x656C616373, 0xE500000000000000, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v12, v11, 0, 0,
          0,
          v4,
          0,
          (uint64_t)sub_1B1AFC788);
  swift_release();
  *(_QWORD *)(v0 + 48) = v13;
  v14 = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F0, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v15 = (_QWORD *)swift_allocObject();
  v15[4] = sub_1B1AFC558;
  v15[5] = v14;
  v15[2] = sub_1B1AFC588;
  v15[3] = v14;
  v15[6] = v14;
  swift_allocObject();
  swift_retain_n();
  v16 = sub_1B1ADE580(0x657A6974726F6D61, 0xE900000000000064, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v15, v14, 0, 0,
          0,
          v4,
          0,
          (uint64_t)sub_1B1AFC6C0);
  swift_release();
  *(_QWORD *)(v0 + 56) = v16;
  v17 = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B8100, MEMORY[0x1E0DEB418], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v18 = (_QWORD *)swift_allocObject();
  v18[4] = sub_1B1AFC5A8;
  v18[5] = v17;
  v18[2] = sub_1B1AFC5D8;
  v18[3] = v17;
  v18[6] = v17;
  swift_allocObject();
  swift_retain_n();
  v19 = sub_1B1AD6CCC(0x6F69736E656D6964, 0xEA0000000000736ELL, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v18, v17, 0, 0,
          0,
          v4,
          0,
          (uint64_t)sub_1B1AFC5F8);
  swift_release();
  *(_QWORD *)(v0 + 64) = v19;
  result = sub_1B2228AD0();
  qword_1ED4D0BC8 = v0;
  return result;
}

uint64_t sub_1B1A58A50()
{
  uint64_t v0;

  return *(char *)(v0 + 36);
}

uint64_t sub_1B1A58A58(uint64_t result)
{
  uint64_t v1;
  char v2;

  v2 = result;
  if (result >= 3u)
    v2 = 3;
  *(_BYTE *)(v1 + 36) = v2;
  return result;
}

uint64_t sub_1B1A58A70()
{
  return 0x6573696F4ELL;
}

uint64_t sub_1B1A58A84()
{
  return 24117312;
}

uint64_t sub_1B1A58A90(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, qword_1ED4B8850);
}

uint64_t sub_1B1A58AAC(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, qword_1ED4B8850, (unint64_t *)&qword_1ED4D0BC8);
}

uint64_t sub_1B1A58AD8(uint64_t a1)
{
  return sub_1B1A2262C(a1, qword_1ED4B8850, &qword_1ED4D0BC8);
}

uint64_t sub_1B1A58B04()
{
  uint64_t v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E490;
  KeyPath = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1EEF5A048, (uint64_t)&type metadata for AngleF, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = sub_1B1AFCA0C;
  v2[5] = KeyPath;
  v2[2] = sub_1B1AFCA3C;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v3 = MEMORY[0x1E0DEE9D8];
  v4 = sub_1B1AC6278(0x676E4172656E6E69, 0xEA0000000000656CLL, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 3, 0, (uint64_t)v2, KeyPath, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0);
  swift_release();
  *(_QWORD *)(v0 + 32) = v4;
  v5 = swift_getKeyPath();
  v6 = (_QWORD *)swift_allocObject();
  v6[4] = sub_1B1AFCA0C;
  v6[5] = v5;
  v6[2] = sub_1B1AFCA3C;
  v6[3] = v5;
  v6[6] = v5;
  swift_allocObject();
  swift_retain_n();
  v7 = sub_1B1AC6278(0x676E41726574756FLL, 0xEA0000000000656CLL, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 3, 0, (uint64_t)v6, v5, 0, 0,
         0,
         v3,
         0);
  swift_release();
  *(_QWORD *)(v0 + 40) = v7;
  v8 = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F8, MEMORY[0x1E0DEB188], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v9 = (_QWORD *)swift_allocObject();
  v9[4] = sub_1B1AFCA44;
  v9[5] = v8;
  v9[2] = sub_1B1AFCA74;
  v9[3] = v8;
  v9[6] = v8;
  swift_allocObject();
  swift_retain_n();
  v10 = sub_1B1ADC904(0x6152746365707361, 0xEB000000006F6974, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v9, v8, 0, 0,
          0,
          v3,
          0,
          (uint64_t)sub_1B1AFCCC4);
  swift_release();
  *(_QWORD *)(v0 + 48) = v10;
  v11 = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F0, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v12 = (_QWORD *)swift_allocObject();
  v12[4] = sub_1B1AFCA94;
  v12[5] = v11;
  v12[2] = sub_1B1AFCAC4;
  v12[3] = v11;
  v12[6] = v11;
  swift_allocObject();
  swift_retain_n();
  v13 = sub_1B1ADE580(0x75676E6174636572, 0xEB0000000072616CLL, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v12, v11, 0, 0,
          0,
          v3,
          0,
          (uint64_t)sub_1B1AFCBFC);
  swift_release();
  *(_QWORD *)(v0 + 56) = v13;
  v14 = swift_getKeyPath();
  v15 = (_QWORD *)swift_allocObject();
  v15[4] = sub_1B1AFCA44;
  v15[5] = v14;
  v15[2] = sub_1B1AFCA74;
  v15[3] = v14;
  v15[6] = v14;
  swift_allocObject();
  swift_retain_n();
  v16 = sub_1B1ADC904(1918985582, 0xE400000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v15, v14, 0, 0,
          0,
          v3,
          0,
          (uint64_t)sub_1B1AFCCC4);
  swift_release();
  *(_QWORD *)(v0 + 64) = v16;
  v17 = swift_getKeyPath();
  v18 = (_QWORD *)swift_allocObject();
  v18[4] = sub_1B1AFCA44;
  v18[5] = v17;
  v18[2] = sub_1B1AFCA74;
  v18[3] = v17;
  v18[6] = v17;
  swift_allocObject();
  swift_retain_n();
  v19 = sub_1B1ADC904(7496038, 0xE300000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v18, v17, 0, 0,
          0,
          v3,
          0,
          (uint64_t)sub_1B1AFCCC4);
  swift_release();
  *(_QWORD *)(v0 + 72) = v19;
  v20 = swift_getKeyPath();
  v21 = (_QWORD *)swift_allocObject();
  v21[4] = sub_1B1AFCA44;
  v21[5] = v20;
  v21[2] = sub_1B1AFCA74;
  v21[3] = v20;
  v21[6] = v20;
  swift_allocObject();
  swift_retain_n();
  v22 = sub_1B1ADC904(0x7469736E65746E69, 0xE900000000000079, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v21, v20, 0, 0,
          0,
          v3,
          0,
          (uint64_t)sub_1B1AFCCC4);
  swift_release();
  *(_QWORD *)(v0 + 80) = v22;
  v23 = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B8040, (uint64_t)&type metadata for Entity, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v24 = (_QWORD *)swift_allocObject();
  v24[4] = sub_1B1AFCAE4;
  v24[5] = v23;
  v24[2] = sub_1B1AFCB14;
  v24[3] = v23;
  v24[6] = v23;
  swift_allocObject();
  swift_retain_n();
  v25 = sub_1B1AD9F50(0x65727574786574, 0xE700000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 8, 0, (uint64_t)v24, v23, 0, 0,
          0,
          v3,
          0,
          (uint64_t)sub_1B1AFCB34);
  swift_release();
  *(_QWORD *)(v0 + 88) = v25;
  result = sub_1B2228AD0();
  qword_1EEFD51E0 = v0;
  return result;
}

uint64_t sub_1B1A592C4()
{
  return 0x6F7463656A6F7250;
}

uint64_t sub_1B1A592E0(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, &qword_1EEF57178);
}

uint64_t sub_1B1A592FC(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, &qword_1EEF57178, (unint64_t *)&qword_1EEFD51E0);
}

uint64_t sub_1B1A59328(uint64_t a1)
{
  return sub_1B1A2262C(a1, &qword_1EEF57178, &qword_1EEFD51E0);
}

uint64_t sub_1B1A59354()
{
  uint64_t v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E440;
  KeyPath = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F8, MEMORY[0x1E0DEB188], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = sub_1B1AFCEBC;
  v2[5] = KeyPath;
  v2[2] = sub_1B1AFCEEC;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v3 = sub_1B1ADC904(0x6874676E656CLL, 0xE600000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v2, KeyPath, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0,
         (uint64_t)sub_1B1AFCF0C);
  swift_release();
  *(_QWORD *)(v0 + 32) = v3;
  result = sub_1B2228AD0();
  qword_1EEFD51E8 = v0;
  return result;
}

unint64_t sub_1B1A594D4()
{
  return 0xD000000000000012;
}

uint64_t sub_1B1A594F0(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, &qword_1EEF57180);
}

uint64_t sub_1B1A5950C(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, &qword_1EEF57180, (unint64_t *)&qword_1EEFD51E8);
}

uint64_t sub_1B1A59538(uint64_t a1)
{
  return sub_1B1A2262C(a1, &qword_1EEF57180, &qword_1EEFD51E8);
}

uint64_t sub_1B1A59564()
{
  uint64_t v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E450;
  KeyPath = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F8, MEMORY[0x1E0DEB188], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = sub_1B1AFCFD4;
  v2[5] = KeyPath;
  v2[2] = sub_1B1AFD004;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v3 = MEMORY[0x1E0DEE9D8];
  v4 = sub_1B1ADC904(0x726F74636166, 0xE600000000000000, 0, 0, 0x3FF0000000000000, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v2, KeyPath, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0,
         (uint64_t)sub_1B1AFD13C);
  swift_release();
  *(_QWORD *)(v0 + 32) = v4;
  v5 = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F0, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v6 = (_QWORD *)swift_allocObject();
  v6[4] = sub_1B1AFD024;
  v6[5] = v5;
  v6[2] = sub_1B1AFD054;
  v6[3] = v5;
  v6[6] = v5;
  swift_allocObject();
  swift_retain_n();
  v7 = sub_1B1ADE580(0x6566694C7265766FLL, 0xE800000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v6, v5, 0, 0,
         0,
         v3,
         0,
         (uint64_t)sub_1B1AFD074);
  swift_release();
  *(_QWORD *)(v0 + 40) = v7;
  result = sub_1B2228AD0();
  qword_1EEFD51F0 = v0;
  return result;
}

uint64_t sub_1B1A597EC()
{
  return 0x686361747441;
}

uint64_t sub_1B1A59800(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, qword_1EEF57188);
}

uint64_t sub_1B1A5981C(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, qword_1EEF57188, (unint64_t *)&qword_1EEFD51F0);
}

uint64_t sub_1B1A59848(uint64_t a1)
{
  return sub_1B1A2262C(a1, qword_1EEF57188, &qword_1EEFD51F0);
}

uint64_t sub_1B1A59874()
{
  uint64_t v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E450;
  KeyPath = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F8, MEMORY[0x1E0DEB188], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = sub_1B1AFD204;
  v2[5] = KeyPath;
  v2[2] = sub_1B1AFD234;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v3 = MEMORY[0x1E0DEE9D8];
  v4 = sub_1B1ADC904(0x7469736E65746E69, 0xE900000000000079, 0, 0, 0, 1, 0x4024000000000000, 0, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v2, KeyPath, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0,
         (uint64_t)sub_1B1AFD254);
  swift_release();
  *(_QWORD *)(v0 + 32) = v4;
  v5 = swift_getKeyPath();
  v6 = (_QWORD *)swift_allocObject();
  v6[4] = sub_1B1AFD204;
  v6[5] = v5;
  v6[2] = sub_1B1AFD234;
  v6[3] = v5;
  v6[6] = v5;
  swift_allocObject();
  swift_retain_n();
  v7 = sub_1B1ADC904(0x6152776F64616873, 0xEC00000073756964, 0x3FB999999999999ALL, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v6, v5, 0, 0,
         0,
         v3,
         0,
         (uint64_t)sub_1B1AFD254);
  swift_release();
  *(_QWORD *)(v0 + 40) = v7;
  result = sub_1B2228AD0();
  qword_1ED4D0C48 = v0;
  return result;
}

unint64_t sub_1B1A59AFC()
{
  return 0xD000000000000010;
}

uint64_t sub_1B1A59B18(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, &qword_1ED4B8DB0);
}

uint64_t sub_1B1A59B34(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, &qword_1ED4B8DB0, (unint64_t *)&qword_1ED4D0C48);
}

uint64_t sub_1B1A59B60(uint64_t a1)
{
  return sub_1B1A2262C(a1, &qword_1ED4B8DB0, &qword_1ED4D0C48);
}

uint64_t sub_1B1A59B8C()
{
  uint64_t v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E450;
  KeyPath = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F8, MEMORY[0x1E0DEB188], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = sub_1B1AFD31C;
  v2[5] = KeyPath;
  v2[2] = sub_1B1AFD34C;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v3 = MEMORY[0x1E0DEE9D8];
  v4 = sub_1B1ADC904(0x7469736E65746E69, 0xE900000000000079, 0, 0, 0, 1, 0x4024000000000000, 0, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v2, KeyPath, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0,
         (uint64_t)sub_1B1AFD36C);
  swift_release();
  *(_QWORD *)(v0 + 32) = v4;
  v5 = swift_getKeyPath();
  v6 = (_QWORD *)swift_allocObject();
  v6[4] = sub_1B1AFD31C;
  v6[5] = v5;
  v6[2] = sub_1B1AFD34C;
  v6[3] = v5;
  v6[6] = v5;
  swift_allocObject();
  swift_retain_n();
  v7 = sub_1B1ADC904(0xD000000000000011, 0x80000001B2328200, 0x3FB999999999999ALL, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v6, v5, 0, 0,
         0,
         v3,
         0,
         (uint64_t)sub_1B1AFD36C);
  swift_release();
  *(_QWORD *)(v0 + 40) = v7;
  result = sub_1B2228AD0();
  qword_1ED4D09D0 = v0;
  return result;
}

uint64_t sub_1B1A59E10()
{
  return 0x67694C746E696F50;
}

uint64_t sub_1B1A59E2C(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, &qword_1ED4B7C08);
}

uint64_t sub_1B1A59E48(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, &qword_1ED4B7C08, (unint64_t *)&qword_1ED4D09D0);
}

uint64_t sub_1B1A59E74(uint64_t a1)
{
  return sub_1B1A2262C(a1, &qword_1ED4B7C08, &qword_1ED4D09D0);
}

uint64_t sub_1B1A59EA0()
{
  uint64_t v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E440;
  KeyPath = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F8, MEMORY[0x1E0DEB188], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = sub_1B1AFD434;
  v2[5] = KeyPath;
  v2[2] = sub_1B1AFD464;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v3 = sub_1B1ADC904(0x7469736E65746E69, 0xE900000000000079, 0, 0, 0, 1, 0x3F847AE147AE147BLL, 0, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v2, KeyPath, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0,
         (uint64_t)sub_1B1AFD484);
  swift_release();
  *(_QWORD *)(v0 + 32) = v3;
  result = sub_1B2228AD0();
  qword_1ED4D0A10 = v0;
  return result;
}

uint64_t sub_1B1A5A034()
{
  return 0x4C746E6569626D41;
}

uint64_t sub_1B1A5A054(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, &qword_1ED4B7F80);
}

uint64_t sub_1B1A5A070(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, &qword_1ED4B7F80, (unint64_t *)&qword_1ED4D0A10);
}

uint64_t sub_1B1A5A09C(uint64_t a1)
{
  return sub_1B1A2262C(a1, &qword_1ED4B7F80, &qword_1ED4D0A10);
}

uint64_t sub_1B1A5A0C8()
{
  uint64_t v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E4A0;
  KeyPath = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F8, MEMORY[0x1E0DEB188], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = sub_1B1AFD54C;
  v2[5] = KeyPath;
  v2[2] = sub_1B1AFD57C;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v3 = MEMORY[0x1E0DEE9D8];
  v4 = sub_1B1ADC904(0x7469736E65746E69, 0xE900000000000079, 0, 0, 0, 1, 0x4024000000000000, 0, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v2, KeyPath, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0,
         (uint64_t)sub_1B1AFD59C);
  swift_release();
  *(_QWORD *)(v0 + 32) = v4;
  v5 = swift_getKeyPath();
  v6 = (_QWORD *)swift_allocObject();
  v6[4] = sub_1B1AFD54C;
  v6[5] = v5;
  v6[2] = sub_1B1AFD57C;
  v6[3] = v5;
  v6[6] = v5;
  swift_allocObject();
  swift_retain_n();
  v7 = sub_1B1ADC904(0xD000000000000011, 0x80000001B2328200, 0x3FB999999999999ALL, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v6, v5, 0, 0,
         0,
         v3,
         0,
         (uint64_t)sub_1B1AFD59C);
  swift_release();
  *(_QWORD *)(v0 + 40) = v7;
  v8 = swift_getKeyPath();
  v9 = (_QWORD *)swift_allocObject();
  v9[4] = sub_1B1AFD54C;
  v9[5] = v8;
  v9[2] = sub_1B1AFD57C;
  v9[3] = v8;
  v9[6] = v8;
  swift_allocObject();
  swift_retain_n();
  v10 = sub_1B1ADC904(0x676E4172656E6E69, 0xEA0000000000656CLL, 0, 0, 0x400921C6E67E56DFLL, 0, 0, 1, 0, 1, 0, 1, 0, 3, 0, (uint64_t)v9, v8, 0, 0,
          0,
          v3,
          0,
          (uint64_t)sub_1B1AFD59C);
  swift_release();
  *(_QWORD *)(v0 + 48) = v10;
  v11 = swift_getKeyPath();
  v12 = (_QWORD *)swift_allocObject();
  v12[4] = sub_1B1AFD54C;
  v12[5] = v11;
  v12[2] = sub_1B1AFD57C;
  v12[3] = v11;
  v12[6] = v11;
  swift_allocObject();
  swift_retain_n();
  v13 = sub_1B1ADC904(0x676E41726574756FLL, 0xEA0000000000656CLL, 0, 0, 0x400921C6E67E56DFLL, 0, 0, 1, 0, 1, 0, 1, 0, 3, 0, (uint64_t)v12, v11, 0, 0,
          0,
          v3,
          0,
          (uint64_t)sub_1B1AFD59C);
  swift_release();
  *(_QWORD *)(v0 + 56) = v13;
  result = sub_1B2228AD0();
  qword_1EEFD51F8 = v0;
  return result;
}

uint64_t sub_1B1A5A510()
{
  return 0x6867694C746F7053;
}

uint64_t sub_1B1A5A52C(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, &qword_1EEF57198);
}

uint64_t sub_1B1A5A548(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, &qword_1EEF57198, (unint64_t *)&qword_1EEFD51F8);
}

uint64_t sub_1B1A5A574(uint64_t a1)
{
  return sub_1B1A2262C(a1, &qword_1EEF57198, &qword_1EEFD51F8);
}

uint64_t sub_1B1A5A5A0()
{
  uint64_t v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E440;
  KeyPath = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F8, MEMORY[0x1E0DEB188], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = sub_1B1AFD664;
  v2[5] = KeyPath;
  v2[2] = sub_1B1AFD694;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v3 = sub_1B1ADC904(0x6169426874706564, 0xE900000000000073, 0, 0, 0, 1, 0x3F847AE147AE147BLL, 0, 0, 1, 3uLL, 0, 0, 1, 0, (uint64_t)v2, KeyPath, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0,
         (uint64_t)sub_1B1AFD6B4);
  swift_release();
  *(_QWORD *)(v0 + 32) = v3;
  result = sub_1B2228AD0();
  qword_1EEFD5200 = v0;
  return result;
}

uint64_t sub_1B1A5A740()
{
  return 0x776F64616853;
}

uint64_t sub_1B1A5A754(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, &qword_1EEF571A0);
}

uint64_t sub_1B1A5A770(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, &qword_1EEF571A0, (unint64_t *)&qword_1EEFD5200);
}

uint64_t sub_1B1A5A79C(uint64_t a1)
{
  return sub_1B1A2262C(a1, &qword_1EEF571A0, &qword_1EEFD5200);
}

uint64_t sub_1B1A5A7C8()
{
  uint64_t v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E500;
  KeyPath = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F8, MEMORY[0x1E0DEB188], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = sub_1B1AFE3C8;
  v2[5] = KeyPath;
  v2[2] = sub_1B1AFE3F8;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  *(_QWORD *)(v0 + 32) = sub_1B1ADC904(0x6963697473616C65, 0xEA00000000007974, 0xBFF0000000000000, 0, 0, 1, 0x3F847AE147AE147BLL, 0, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v2, KeyPath, 0, 0,
                           0,
                           MEMORY[0x1E0DEE9D8],
                           0,
                           (uint64_t)sub_1B1AFE548);
  v3 = swift_getKeyPath();
  v4 = (_QWORD *)swift_allocObject();
  v4[4] = sub_1B1AFE3C8;
  v4[5] = v3;
  v4[2] = sub_1B1AFE3F8;
  v4[3] = v3;
  v4[6] = v3;
  swift_allocObject();
  swift_retain_n();
  *(_QWORD *)(v0 + 40) = sub_1B1ADC904(0x6E6F697463697266, 0xE800000000000000, 0xBFF0000000000000, 0, 0x3FF0000000000000, 0, 0x3F847AE147AE147BLL, 0, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v4, v3, 0, 0,
                           0,
                           MEMORY[0x1E0DEE9D8],
                           0,
                           (uint64_t)sub_1B1AFE548);
  v5 = swift_getKeyPath();
  v6 = (_QWORD *)swift_allocObject();
  v6[4] = sub_1B1AFE3C8;
  v6[5] = v5;
  v6[2] = sub_1B1AFE3F8;
  v6[3] = v5;
  v6[6] = v5;
  swift_allocObject();
  swift_retain_n();
  v7 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v0 + 48) = sub_1B1ADC904(0xD000000000000019, 0x80000001B2329A30, 0, 0, 0x3FF0000000000000, 0, 0x3F847AE147AE147BLL, 0, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v6, v5, 0, 0,
                           0,
                           MEMORY[0x1E0DEE9D8],
                           0,
                           (uint64_t)sub_1B1AFE548);
  v8 = swift_getKeyPath();
  v9 = (_QWORD *)swift_allocObject();
  v9[4] = sub_1B1AFE3C8;
  v9[5] = v8;
  v9[2] = sub_1B1AFE3F8;
  v9[3] = v8;
  v9[6] = v8;
  swift_allocObject();
  swift_retain_n();
  *(_QWORD *)(v0 + 56) = sub_1B1ADC904(0xD000000000000015, 0x80000001B2329A10, 0, 0, 0x3FF0000000000000, 0, 0x3F847AE147AE147BLL, 0, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v9, v8, 0, 0,
                           0,
                           v7,
                           0,
                           (uint64_t)sub_1B1AFE548);
  v10 = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1EEF59D20, (uint64_t)&type metadata for CollisionLayerSet, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v11 = (_QWORD *)swift_allocObject();
  v11[4] = sub_1B1AFE418;
  v11[5] = v10;
  v11[2] = sub_1B1AFE448;
  v11[3] = v10;
  v11[6] = v10;
  swift_allocObject();
  swift_retain_n();
  *(_QWORD *)(v0 + 64) = sub_1B1ACD84C(0x73726579616CLL, 0xE600000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v11, v10, 0, 0,
                           0,
                           v7,
                           0,
                           (uint64_t)sub_1B1AFE468);
  sub_1B2228AD0();
  return v0;
}

uint64_t sub_1B1A5AD60()
{
  uint64_t v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E500;
  KeyPath = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F8, MEMORY[0x1E0DEB188], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = sub_1B1AFE970;
  v2[5] = KeyPath;
  v2[2] = sub_1B1AFE9A0;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  *(_QWORD *)(v0 + 32) = sub_1B1ADC904(0x6963697473616C65, 0xEA00000000007974, 0xBFF0000000000000, 0, 0, 1, 0x3F847AE147AE147BLL, 0, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v2, KeyPath, 0, 0,
                           0,
                           MEMORY[0x1E0DEE9D8],
                           0,
                           (uint64_t)sub_1B1AFEAF0);
  v3 = swift_getKeyPath();
  v4 = (_QWORD *)swift_allocObject();
  v4[4] = sub_1B1AFE970;
  v4[5] = v3;
  v4[2] = sub_1B1AFE9A0;
  v4[3] = v3;
  v4[6] = v3;
  swift_allocObject();
  swift_retain_n();
  *(_QWORD *)(v0 + 40) = sub_1B1ADC904(0x6E6F697463697266, 0xE800000000000000, 0xBFF0000000000000, 0, 0x3FF0000000000000, 0, 0x3F847AE147AE147BLL, 0, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v4, v3, 0, 0,
                           0,
                           MEMORY[0x1E0DEE9D8],
                           0,
                           (uint64_t)sub_1B1AFEAF0);
  v5 = swift_getKeyPath();
  v6 = (_QWORD *)swift_allocObject();
  v6[4] = sub_1B1AFE970;
  v6[5] = v5;
  v6[2] = sub_1B1AFE9A0;
  v6[3] = v5;
  v6[6] = v5;
  swift_allocObject();
  swift_retain_n();
  v7 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v0 + 48) = sub_1B1ADC904(0xD000000000000019, 0x80000001B2329A30, 0, 0, 0x3FF0000000000000, 0, 0x3F847AE147AE147BLL, 0, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v6, v5, 0, 0,
                           0,
                           MEMORY[0x1E0DEE9D8],
                           0,
                           (uint64_t)sub_1B1AFEAF0);
  v8 = swift_getKeyPath();
  v9 = (_QWORD *)swift_allocObject();
  v9[4] = sub_1B1AFE970;
  v9[5] = v8;
  v9[2] = sub_1B1AFE9A0;
  v9[3] = v8;
  v9[6] = v8;
  swift_allocObject();
  swift_retain_n();
  *(_QWORD *)(v0 + 56) = sub_1B1ADC904(0xD000000000000015, 0x80000001B2329A10, 0, 0, 0x3FF0000000000000, 0, 0x3F847AE147AE147BLL, 0, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v9, v8, 0, 0,
                           0,
                           v7,
                           0,
                           (uint64_t)sub_1B1AFEAF0);
  v10 = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1EEF59D20, (uint64_t)&type metadata for CollisionLayerSet, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v11 = (_QWORD *)swift_allocObject();
  v11[4] = sub_1B1AFE9C0;
  v11[5] = v10;
  v11[2] = sub_1B1AFE9F0;
  v11[3] = v10;
  v11[6] = v10;
  swift_allocObject();
  swift_retain_n();
  *(_QWORD *)(v0 + 64) = sub_1B1ACD84C(0x73726579616CLL, 0xE600000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v11, v10, 0, 0,
                           0,
                           v7,
                           0,
                           (uint64_t)sub_1B1AFEA10);
  sub_1B2228AD0();
  return v0;
}

uint64_t sub_1B1A5B2F8()
{
  uint64_t v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E500;
  KeyPath = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F8, MEMORY[0x1E0DEB188], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = sub_1B1AFECD0;
  v2[5] = KeyPath;
  v2[2] = sub_1B1AFED00;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  *(_QWORD *)(v0 + 32) = sub_1B1ADC904(0x6963697473616C65, 0xEA00000000007974, 0xBFF0000000000000, 0, 0, 1, 0x3F847AE147AE147BLL, 0, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v2, KeyPath, 0, 0,
                           0,
                           MEMORY[0x1E0DEE9D8],
                           0,
                           (uint64_t)sub_1B1AFEEA0);
  v3 = swift_getKeyPath();
  v4 = (_QWORD *)swift_allocObject();
  v4[4] = sub_1B1AFECD0;
  v4[5] = v3;
  v4[2] = sub_1B1AFED00;
  v4[3] = v3;
  v4[6] = v3;
  swift_allocObject();
  swift_retain_n();
  *(_QWORD *)(v0 + 40) = sub_1B1ADC904(0x6E6F697463697266, 0xE800000000000000, 0xBFF0000000000000, 0, 0x3FF0000000000000, 0, 0x3F847AE147AE147BLL, 0, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v4, v3, 0, 0,
                           0,
                           MEMORY[0x1E0DEE9D8],
                           0,
                           (uint64_t)sub_1B1AFEEA0);
  v5 = swift_getKeyPath();
  v6 = (_QWORD *)swift_allocObject();
  v6[4] = sub_1B1AFECD0;
  v6[5] = v5;
  v6[2] = sub_1B1AFED00;
  v6[3] = v5;
  v6[6] = v5;
  swift_allocObject();
  swift_retain_n();
  v7 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v0 + 48) = sub_1B1ADC904(0xD000000000000019, 0x80000001B2329A30, 0, 0, 0x3FF0000000000000, 0, 0x3F847AE147AE147BLL, 0, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v6, v5, 0, 0,
                           0,
                           MEMORY[0x1E0DEE9D8],
                           0,
                           (uint64_t)sub_1B1AFEEA0);
  v8 = swift_getKeyPath();
  v9 = (_QWORD *)swift_allocObject();
  v9[4] = sub_1B1AFECD0;
  v9[5] = v8;
  v9[2] = sub_1B1AFED00;
  v9[3] = v8;
  v9[6] = v8;
  swift_allocObject();
  swift_retain_n();
  *(_QWORD *)(v0 + 56) = sub_1B1ADC904(0xD000000000000015, 0x80000001B2329A10, 0, 0, 0x3FF0000000000000, 0, 0x3F847AE147AE147BLL, 0, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v9, v8, 0, 0,
                           0,
                           v7,
                           0,
                           (uint64_t)sub_1B1AFEEA0);
  v10 = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1EEF59D20, (uint64_t)&type metadata for CollisionLayerSet, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v11 = (_QWORD *)swift_allocObject();
  v11[4] = sub_1B1AFED20;
  v11[5] = v10;
  v11[2] = sub_1B1AFED50;
  v11[3] = v10;
  v11[6] = v10;
  swift_allocObject();
  swift_retain_n();
  *(_QWORD *)(v0 + 64) = sub_1B1ACD84C(0x73726579616CLL, 0xE600000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v11, v10, 0, 0,
                           0,
                           v7,
                           0,
                           (uint64_t)sub_1B1AFED70);
  sub_1B2228AD0();
  return v0;
}

uint64_t sub_1B1A5B890()
{
  uint64_t v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E500;
  KeyPath = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F8, MEMORY[0x1E0DEB188], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = sub_1B1AFDAAC;
  v2[5] = KeyPath;
  v2[2] = sub_1B1AFDADC;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  *(_QWORD *)(v0 + 32) = sub_1B1ADC904(0x6963697473616C65, 0xEA00000000007974, 0xBFF0000000000000, 0, 0, 1, 0x3F847AE147AE147BLL, 0, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v2, KeyPath, 0, 0,
                           0,
                           MEMORY[0x1E0DEE9D8],
                           0,
                           (uint64_t)sub_1B1AFDE88);
  v3 = swift_getKeyPath();
  v4 = (_QWORD *)swift_allocObject();
  v4[4] = sub_1B1AFDAAC;
  v4[5] = v3;
  v4[2] = sub_1B1AFDADC;
  v4[3] = v3;
  v4[6] = v3;
  swift_allocObject();
  swift_retain_n();
  *(_QWORD *)(v0 + 40) = sub_1B1ADC904(0x6E6F697463697266, 0xE800000000000000, 0xBFF0000000000000, 0, 0x3FF0000000000000, 0, 0x3F847AE147AE147BLL, 0, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v4, v3, 0, 0,
                           0,
                           MEMORY[0x1E0DEE9D8],
                           0,
                           (uint64_t)sub_1B1AFDE88);
  v5 = swift_getKeyPath();
  v6 = (_QWORD *)swift_allocObject();
  v6[4] = sub_1B1AFDAAC;
  v6[5] = v5;
  v6[2] = sub_1B1AFDADC;
  v6[3] = v5;
  v6[6] = v5;
  swift_allocObject();
  swift_retain_n();
  v7 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v0 + 48) = sub_1B1ADC904(0xD000000000000019, 0x80000001B2329A30, 0, 0, 0x3FF0000000000000, 0, 0x3F847AE147AE147BLL, 0, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v6, v5, 0, 0,
                           0,
                           MEMORY[0x1E0DEE9D8],
                           0,
                           (uint64_t)sub_1B1AFDE88);
  v8 = swift_getKeyPath();
  v9 = (_QWORD *)swift_allocObject();
  v9[4] = sub_1B1AFDAAC;
  v9[5] = v8;
  v9[2] = sub_1B1AFDADC;
  v9[3] = v8;
  v9[6] = v8;
  swift_allocObject();
  swift_retain_n();
  *(_QWORD *)(v0 + 56) = sub_1B1ADC904(0xD000000000000015, 0x80000001B2329A10, 0, 0, 0x3FF0000000000000, 0, 0x3F847AE147AE147BLL, 0, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v9, v8, 0, 0,
                           0,
                           v7,
                           0,
                           (uint64_t)sub_1B1AFDE88);
  v10 = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1EEF59D20, (uint64_t)&type metadata for CollisionLayerSet, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v11 = (_QWORD *)swift_allocObject();
  v11[4] = sub_1B1AFDD58;
  v11[5] = v10;
  v11[2] = sub_1B1AFDD88;
  v11[3] = v10;
  v11[6] = v10;
  swift_allocObject();
  swift_retain_n();
  *(_QWORD *)(v0 + 64) = sub_1B1ACD84C(0x73726579616CLL, 0xE600000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v11, v10, 0, 0,
                           0,
                           v7,
                           0,
                           (uint64_t)sub_1B1AFDDA8);
  sub_1B2228AD0();
  return v0;
}

uint64_t sub_1B1A5BE28()
{
  uint64_t v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E500;
  KeyPath = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F8, MEMORY[0x1E0DEB188], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = sub_1B1AFE068;
  v2[5] = KeyPath;
  v2[2] = sub_1B1AFE098;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  *(_QWORD *)(v0 + 32) = sub_1B1ADC904(0x6963697473616C65, 0xEA00000000007974, 0xBFF0000000000000, 0, 0, 1, 0x3F847AE147AE147BLL, 0, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v2, KeyPath, 0, 0,
                           0,
                           MEMORY[0x1E0DEE9D8],
                           0,
                           (uint64_t)sub_1B1AFE1E8);
  v3 = swift_getKeyPath();
  v4 = (_QWORD *)swift_allocObject();
  v4[4] = sub_1B1AFE068;
  v4[5] = v3;
  v4[2] = sub_1B1AFE098;
  v4[3] = v3;
  v4[6] = v3;
  swift_allocObject();
  swift_retain_n();
  *(_QWORD *)(v0 + 40) = sub_1B1ADC904(0x6E6F697463697266, 0xE800000000000000, 0xBFF0000000000000, 0, 0x3FF0000000000000, 0, 0x3F847AE147AE147BLL, 0, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v4, v3, 0, 0,
                           0,
                           MEMORY[0x1E0DEE9D8],
                           0,
                           (uint64_t)sub_1B1AFE1E8);
  v5 = swift_getKeyPath();
  v6 = (_QWORD *)swift_allocObject();
  v6[4] = sub_1B1AFE068;
  v6[5] = v5;
  v6[2] = sub_1B1AFE098;
  v6[3] = v5;
  v6[6] = v5;
  swift_allocObject();
  swift_retain_n();
  v7 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v0 + 48) = sub_1B1ADC904(0xD000000000000019, 0x80000001B2329A30, 0, 0, 0x3FF0000000000000, 0, 0x3F847AE147AE147BLL, 0, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v6, v5, 0, 0,
                           0,
                           MEMORY[0x1E0DEE9D8],
                           0,
                           (uint64_t)sub_1B1AFE1E8);
  v8 = swift_getKeyPath();
  v9 = (_QWORD *)swift_allocObject();
  v9[4] = sub_1B1AFE068;
  v9[5] = v8;
  v9[2] = sub_1B1AFE098;
  v9[3] = v8;
  v9[6] = v8;
  swift_allocObject();
  swift_retain_n();
  *(_QWORD *)(v0 + 56) = sub_1B1ADC904(0xD000000000000015, 0x80000001B2329A10, 0, 0, 0x3FF0000000000000, 0, 0x3F847AE147AE147BLL, 0, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v9, v8, 0, 0,
                           0,
                           v7,
                           0,
                           (uint64_t)sub_1B1AFE1E8);
  v10 = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1EEF59D20, (uint64_t)&type metadata for CollisionLayerSet, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v11 = (_QWORD *)swift_allocObject();
  v11[4] = sub_1B1AFE0B8;
  v11[5] = v10;
  v11[2] = sub_1B1AFE0E8;
  v11[3] = v10;
  v11[6] = v10;
  swift_allocObject();
  swift_retain_n();
  *(_QWORD *)(v0 + 64) = sub_1B1ACD84C(0x73726579616CLL, 0xE600000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v11, v10, 0, 0,
                           0,
                           v7,
                           0,
                           (uint64_t)sub_1B1AFE108);
  sub_1B2228AD0();
  return v0;
}

uint64_t sub_1B1A5C3C0()
{
  uint64_t v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E500;
  KeyPath = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F8, MEMORY[0x1E0DEB188], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = sub_1B1AFE6D8;
  v2[5] = KeyPath;
  v2[2] = sub_1B1AFE708;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  *(_QWORD *)(v0 + 32) = sub_1B1ADC904(0x6963697473616C65, 0xEA00000000007974, 0xBFF0000000000000, 0, 0, 1, 0x3F847AE147AE147BLL, 0, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v2, KeyPath, 0, 0,
                           0,
                           MEMORY[0x1E0DEE9D8],
                           0,
                           (uint64_t)sub_1B1AFE858);
  v3 = swift_getKeyPath();
  v4 = (_QWORD *)swift_allocObject();
  v4[4] = sub_1B1AFE6D8;
  v4[5] = v3;
  v4[2] = sub_1B1AFE708;
  v4[3] = v3;
  v4[6] = v3;
  swift_allocObject();
  swift_retain_n();
  *(_QWORD *)(v0 + 40) = sub_1B1ADC904(0x6E6F697463697266, 0xE800000000000000, 0xBFF0000000000000, 0, 0x3FF0000000000000, 0, 0x3F847AE147AE147BLL, 0, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v4, v3, 0, 0,
                           0,
                           MEMORY[0x1E0DEE9D8],
                           0,
                           (uint64_t)sub_1B1AFE858);
  v5 = swift_getKeyPath();
  v6 = (_QWORD *)swift_allocObject();
  v6[4] = sub_1B1AFE6D8;
  v6[5] = v5;
  v6[2] = sub_1B1AFE708;
  v6[3] = v5;
  v6[6] = v5;
  swift_allocObject();
  swift_retain_n();
  v7 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v0 + 48) = sub_1B1ADC904(0xD000000000000019, 0x80000001B2329A30, 0, 0, 0x3FF0000000000000, 0, 0x3F847AE147AE147BLL, 0, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v6, v5, 0, 0,
                           0,
                           MEMORY[0x1E0DEE9D8],
                           0,
                           (uint64_t)sub_1B1AFE858);
  v8 = swift_getKeyPath();
  v9 = (_QWORD *)swift_allocObject();
  v9[4] = sub_1B1AFE6D8;
  v9[5] = v8;
  v9[2] = sub_1B1AFE708;
  v9[3] = v8;
  v9[6] = v8;
  swift_allocObject();
  swift_retain_n();
  *(_QWORD *)(v0 + 56) = sub_1B1ADC904(0xD000000000000015, 0x80000001B2329A10, 0, 0, 0x3FF0000000000000, 0, 0x3F847AE147AE147BLL, 0, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v9, v8, 0, 0,
                           0,
                           v7,
                           0,
                           (uint64_t)sub_1B1AFE858);
  v10 = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1EEF59D20, (uint64_t)&type metadata for CollisionLayerSet, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v11 = (_QWORD *)swift_allocObject();
  v11[4] = sub_1B1AFE728;
  v11[5] = v10;
  v11[2] = sub_1B1AFE758;
  v11[3] = v10;
  v11[6] = v10;
  swift_allocObject();
  swift_retain_n();
  *(_QWORD *)(v0 + 64) = sub_1B1ACD84C(0x73726579616CLL, 0xE600000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v11, v10, 0, 0,
                           0,
                           v7,
                           0,
                           (uint64_t)sub_1B1AFE778);
  sub_1B2228AD0();
  return v0;
}

uint64_t sub_1B1A5C958()
{
  uint64_t v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E530;
  KeyPath = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F8, MEMORY[0x1E0DEB188], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = sub_1B1AFD77C;
  v2[5] = KeyPath;
  v2[2] = sub_1B1AFD7AC;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v3 = MEMORY[0x1E0DEE9D8];
  v4 = sub_1B1ADC904(0x6963697473616C65, 0xEE00736169427974, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v2, KeyPath, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0,
         (uint64_t)sub_1B1AFD8FC);
  swift_release();
  *(_QWORD *)(v0 + 32) = v4;
  v5 = swift_getKeyPath();
  v6 = (_QWORD *)swift_allocObject();
  v6[4] = sub_1B1AFD77C;
  v6[5] = v5;
  v6[2] = sub_1B1AFD7AC;
  v6[3] = v5;
  v6[6] = v5;
  swift_allocObject();
  swift_retain_n();
  v7 = sub_1B1ADC904(0x6E6F697463697266, 0xEC00000073616942, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v6, v5, 0, 0,
         0,
         v3,
         0,
         (uint64_t)sub_1B1AFD8FC);
  swift_release();
  *(_QWORD *)(v0 + 40) = v7;
  v8 = swift_getKeyPath();
  v9 = (_QWORD *)swift_allocObject();
  v9[4] = sub_1B1AFD77C;
  v9[5] = v8;
  v9[2] = sub_1B1AFD7AC;
  v9[3] = v8;
  v9[6] = v8;
  swift_allocObject();
  swift_retain_n();
  v10 = sub_1B1ADC904(0xD00000000000001DLL, 0x80000001B232DC90, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v9, v8, 0, 0,
          0,
          v3,
          0,
          (uint64_t)sub_1B1AFD8FC);
  swift_release();
  *(_QWORD *)(v0 + 48) = v10;
  v11 = swift_getKeyPath();
  v12 = (_QWORD *)swift_allocObject();
  v12[4] = sub_1B1AFD77C;
  v12[5] = v11;
  v12[2] = sub_1B1AFD7AC;
  v12[3] = v11;
  v12[6] = v11;
  swift_allocObject();
  swift_retain_n();
  v13 = sub_1B1ADC904(0xD000000000000019, 0x80000001B232DCB0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v12, v11, 0, 0,
          0,
          v3,
          0,
          (uint64_t)sub_1B1AFD8FC);
  swift_release();
  *(_QWORD *)(v0 + 56) = v13;
  v14 = swift_getKeyPath();
  v15 = (_QWORD *)swift_allocObject();
  v15[4] = sub_1B1AFD77C;
  v15[5] = v14;
  v15[2] = sub_1B1AFD7AC;
  v15[3] = v14;
  v15[6] = v14;
  swift_allocObject();
  swift_retain_n();
  v16 = sub_1B1ADC904(0xD000000000000010, 0x80000001B2329A60, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v15, v14, 0, 0,
          0,
          v3,
          0,
          (uint64_t)sub_1B1AFD8FC);
  swift_release();
  *(_QWORD *)(v0 + 64) = v16;
  v17 = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1EEF59D20, (uint64_t)&type metadata for CollisionLayerSet, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v18 = (_QWORD *)swift_allocObject();
  v18[4] = sub_1B1AFD7CC;
  v18[5] = v17;
  v18[2] = sub_1B1AFD7FC;
  v18[3] = v17;
  v18[6] = v17;
  swift_allocObject();
  swift_retain_n();
  v19 = sub_1B1ACD84C(0x73726579616CLL, 0xE600000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v18, v17, 0, 0,
          0,
          v3,
          0,
          (uint64_t)sub_1B1AFD81C);
  swift_release();
  *(_QWORD *)(v0 + 72) = v19;
  result = sub_1B2228AD0();
  qword_1EEFD5208 = v0;
  return result;
}

uint64_t sub_1B1A5CF54()
{
  return 0x6564696C6C6F43;
}

uint64_t sub_1B1A5CF6C(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, &qword_1EEF571A8);
}

uint64_t sub_1B1A5CF88(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, &qword_1EEF571A8, (unint64_t *)&qword_1EEFD5208);
}

uint64_t sub_1B1A5CFB4(uint64_t a1)
{
  return sub_1B1A2262C(a1, &qword_1EEF571A8, &qword_1EEFD5208);
}

uint64_t sub_1B1A5CFE0()
{
  uint64_t v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E470;
  KeyPath = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F0, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = sub_1B1AFD9C4;
  v2[5] = KeyPath;
  v2[2] = sub_1B1AFD9F4;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v3 = MEMORY[0x1E0DEE9D8];
  v4 = sub_1B1ADE580(0x6574696E69666E49, 0xE800000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v2, KeyPath, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0,
         (uint64_t)sub_1B1AFDF50);
  swift_release();
  *(_QWORD *)(v0 + 32) = v4;
  v5 = swift_getKeyPath();
  v6 = (_QWORD *)swift_allocObject();
  v6[4] = sub_1B1AFD9C4;
  v6[5] = v5;
  v6[2] = sub_1B1AFD9F4;
  v6[3] = v5;
  v6[6] = v5;
  swift_allocObject();
  swift_retain_n();
  v7 = sub_1B1ADE580(0x7320656C62756F44, 0xEC00000064656469, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v6, v5, 0, 0,
         0,
         v3,
         0,
         (uint64_t)sub_1B1AFDF50);
  swift_release();
  *(_QWORD *)(v0 + 40) = v7;
  *(_QWORD *)(v0 + 48) = sub_1B1ABF400(1039, 0x65747845666C6168, 0xEB0000000073746ELL, (uint64_t)&type metadata for Scale2, (uint64_t)&off_1E63BC468, 0x656C616373, 0xE500000000000000);
  sub_1B2228AD0();
  sub_1B1A5B890();
  swift_bridgeObjectRetain();
  v8 = swift_bridgeObjectRetain();
  sub_1B19F4BEC(v8);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  qword_1EEFD5210 = v0;
  return result;
}

uint64_t sub_1B1A5D2D8()
{
  return 0x6F4320656E616C50;
}

uint64_t sub_1B1A5D2FC()
{
  return 49285120;
}

uint64_t sub_1B1A5D308()
{
  if (qword_1EEF571B0 != -1)
    swift_once();
  return swift_bridgeObjectRetain();
}

uint64_t sub_1B1A5D348(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, &qword_1EEF571B0);
}

uint64_t sub_1B1A5D364(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, &qword_1EEF571B0, (unint64_t *)&qword_1EEFD5210);
}

uint64_t sub_1B1A5D390(uint64_t a1)
{
  return sub_1B1A2262C(a1, &qword_1EEF571B0, &qword_1EEFD5210);
}

uint64_t sub_1B1A5D3BC()
{
  uint64_t v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E440;
  KeyPath = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F0, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = sub_1B1AFE018;
  v2[5] = KeyPath;
  v2[2] = sub_1B1AFE048;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v3 = sub_1B1ADE580(0x656469736E69, 0xE600000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v2, KeyPath, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0,
         (uint64_t)sub_1B1AFE2B0);
  swift_release();
  *(_QWORD *)(v0 + 32) = v3;
  sub_1B2228AD0();
  sub_1B1A5BE28();
  swift_bridgeObjectRetain();
  v4 = swift_bridgeObjectRetain();
  sub_1B19F4BEC(v4);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  qword_1EEFD5218 = v0;
  return result;
}

uint64_t sub_1B1A5D570()
{
  return 0x4320657265687053;
}

uint64_t sub_1B1A5D594(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, &qword_1EEF571B8);
}

uint64_t sub_1B1A5D5B0(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, &qword_1EEF571B8, (unint64_t *)&qword_1EEFD5218);
}

uint64_t sub_1B1A5D5DC(uint64_t a1)
{
  return sub_1B1A2262C(a1, &qword_1EEF571B8, &qword_1EEFD5218);
}

uint64_t sub_1B1A5D608()
{
  uint64_t v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E450;
  KeyPath = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F0, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = sub_1B1AFE378;
  v2[5] = KeyPath;
  v2[2] = sub_1B1AFE3A8;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v3 = MEMORY[0x1E0DEE9D8];
  v4 = sub_1B1ADE580(0x656469736E69, 0xE600000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v2, KeyPath, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0,
         (uint64_t)sub_1B1AFE610);
  swift_release();
  *(_QWORD *)(v0 + 32) = v4;
  v5 = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F8, MEMORY[0x1E0DEB188], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v6 = (_QWORD *)swift_allocObject();
  v6[4] = sub_1B1AFE3C8;
  v6[5] = v5;
  v6[2] = sub_1B1AFE3F8;
  v6[3] = v5;
  v6[6] = v5;
  swift_allocObject();
  swift_retain_n();
  v7 = sub_1B1ADC904(0x615272656E726F63, 0xEC00000073756964, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v6, v5, 0, 0,
         0,
         v3,
         0,
         (uint64_t)sub_1B1AFE548);
  swift_release();
  *(_QWORD *)(v0 + 40) = v7;
  sub_1B2228AD0();
  sub_1B1A5A7C8();
  swift_bridgeObjectRetain();
  v8 = swift_bridgeObjectRetain();
  sub_1B19F4BEC(v8);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  qword_1EEFD5220 = v0;
  return result;
}

uint64_t sub_1B1A5D8CC()
{
  return 0x6C6C6F4320786F42;
}

uint64_t sub_1B1A5D8EC(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, &qword_1EEF571C0);
}

uint64_t sub_1B1A5D908(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, &qword_1EEF571C0, (unint64_t *)&qword_1EEFD5220);
}

uint64_t sub_1B1A5D934(uint64_t a1)
{
  return sub_1B1A2262C(a1, &qword_1EEF571C0, &qword_1EEFD5220);
}

uint64_t sub_1B1A5D960()
{
  uint64_t result;

  result = sub_1B1A5C3C0();
  qword_1EEFD5228 = result;
  return result;
}

unint64_t sub_1B1A5D97C()
{
  return 0xD000000000000011;
}

uint64_t sub_1B1A5D998(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, &qword_1EEF571C8);
}

uint64_t sub_1B1A5D9B4(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, &qword_1EEF571C8, (unint64_t *)&qword_1EEFD5228);
}

uint64_t sub_1B1A5D9E0(uint64_t a1)
{
  return sub_1B1A2262C(a1, &qword_1EEF571C8, &qword_1EEFD5228);
}

uint64_t sub_1B1A5DA0C()
{
  uint64_t v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E440;
  KeyPath = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B8040, (uint64_t)&type metadata for Entity, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = sub_1B1AFE920;
  v2[5] = KeyPath;
  v2[2] = sub_1B1AFE950;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v3 = sub_1B1AD9F50(6710387, 0xE300000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 8, 0, (uint64_t)v2, KeyPath, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0,
         (uint64_t)sub_1B1AFEBB8);
  swift_release();
  *(_QWORD *)(v0 + 32) = v3;
  sub_1B2228AD0();
  sub_1B1A5AD60();
  swift_bridgeObjectRetain();
  v4 = swift_bridgeObjectRetain();
  sub_1B19F4BEC(v4);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  qword_1EEFD5230 = v0;
  return result;
}

unint64_t sub_1B1A5DBC0()
{
  return 0xD00000000000001ELL;
}

uint64_t sub_1B1A5DBDC(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, &qword_1EEF571D0);
}

uint64_t sub_1B1A5DBF8(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, &qword_1EEF571D0, (unint64_t *)&qword_1EEFD5230);
}

uint64_t sub_1B1A5DC24(uint64_t a1)
{
  return sub_1B1A2262C(a1, &qword_1EEF571D0, &qword_1EEFD5230);
}

uint64_t sub_1B1A5DC50()
{
  uint64_t v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E440;
  KeyPath = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B8040, (uint64_t)&type metadata for Entity, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = sub_1B1AFEC80;
  v2[5] = KeyPath;
  v2[2] = sub_1B1AFECB0;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v3 = sub_1B1AD9F50(1752393069, 0xE400000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 9, 0, (uint64_t)v2, KeyPath, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0,
         (uint64_t)sub_1B1AFEF68);
  swift_release();
  *(_QWORD *)(v0 + 32) = v3;
  sub_1B2228AD0();
  sub_1B1A5B2F8();
  swift_bridgeObjectRetain();
  v4 = swift_bridgeObjectRetain();
  sub_1B19F4BEC(v4);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  qword_1EEFD5238 = v0;
  return result;
}

uint64_t sub_1B1A5DE04()
{
  return 0x6C6F43206873654DLL;
}

uint64_t sub_1B1A5DE28(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, &qword_1EEF571D8);
}

uint64_t sub_1B1A5DE44(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, &qword_1EEF571D8, (unint64_t *)&qword_1EEFD5238);
}

uint64_t sub_1B1A5DE70(uint64_t a1)
{
  return sub_1B1A2262C(a1, &qword_1EEF571D8, &qword_1EEFD5238);
}

uint64_t sub_1B1A5DE9C()
{
  uint64_t v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E4A0;
  KeyPath = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1EEF58F78, (uint64_t)&type metadata for AABB, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = sub_1B1AFF030;
  v2[5] = KeyPath;
  v2[2] = sub_1B1AFF058;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v3 = MEMORY[0x1E0DEE9D8];
  v4 = sub_1B1ADDC38(7892834, 0xE300000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v2, KeyPath, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0,
         (uint64_t)sub_1B1AFF2A8);
  swift_release();
  *(_QWORD *)(v0 + 32) = v4;
  v5 = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F0, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v6 = (_QWORD *)swift_allocObject();
  v6[4] = sub_1B1AFF078;
  v6[5] = v5;
  v6[2] = sub_1B1AFF0A8;
  v6[3] = v5;
  v6[6] = v5;
  swift_allocObject();
  swift_retain_n();
  v7 = sub_1B1ADE580(0x6F4E647261776E69, 0xEC0000006C616D72, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v6, v5, 0, 0,
         0,
         v3,
         0,
         (uint64_t)sub_1B1AFF1E0);
  swift_release();
  *(_QWORD *)(v0 + 40) = v7;
  v8 = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F8, MEMORY[0x1E0DEB188], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v9 = (_QWORD *)swift_allocObject();
  v9[4] = sub_1B1AFF0C8;
  v9[5] = v8;
  v9[2] = sub_1B1AFF0F8;
  v9[3] = v8;
  v9[6] = v8;
  swift_allocObject();
  swift_retain_n();
  v10 = sub_1B1ADC904(0x6963697473616C65, 0xEA00000000007974, 0xBFF0000000000000, 0, 0, 1, 0x3F847AE147AE147BLL, 0, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v9, v8, 0, 0,
          0,
          v3,
          0,
          (uint64_t)sub_1B1AFF118);
  swift_release();
  *(_QWORD *)(v0 + 48) = v10;
  v11 = swift_getKeyPath();
  v12 = (_QWORD *)swift_allocObject();
  v12[4] = sub_1B1AFF0C8;
  v12[5] = v11;
  v12[2] = sub_1B1AFF0F8;
  v12[3] = v11;
  v12[6] = v11;
  swift_allocObject();
  swift_retain_n();
  v13 = sub_1B1ADC904(0x6E6F697463697266, 0xE800000000000000, 0xBFF0000000000000, 0, 0x3FF0000000000000, 0, 0x3F847AE147AE147BLL, 0, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v12, v11, 0, 0,
          0,
          v3,
          0,
          (uint64_t)sub_1B1AFF118);
  swift_release();
  *(_QWORD *)(v0 + 56) = v13;
  result = sub_1B2228AD0();
  qword_1EEFD5240 = v0;
  return result;
}

unint64_t sub_1B1A5E310()
{
  return 0xD000000000000019;
}

uint64_t sub_1B1A5E32C(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, &qword_1EEF571E0);
}

uint64_t sub_1B1A5E348(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, &qword_1EEF571E0, (unint64_t *)&qword_1EEFD5240);
}

uint64_t sub_1B1A5E374(uint64_t a1)
{
  return sub_1B1A2262C(a1, &qword_1EEF571E0, &qword_1EEFD5240);
}

uint64_t sub_1B1A5E3A0()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E450;
  KeyPath = swift_getKeyPath();
  v2 = swift_getKeyPath();
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4B8140, MEMORY[0x1E0DEDC60], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v3 = (_QWORD *)swift_allocObject();
  v3[4] = sub_1B1AFF38C;
  v3[5] = v2;
  v3[2] = sub_1B1AFF3BC;
  v3[3] = v2;
  v3[6] = v2;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v4 = MEMORY[0x1E0DEE9D8];
  v5 = sub_1B1ADBDA8(0x646E496570616873, 0xEA00000000007865, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v3, v2, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0,
         (uint64_t)sub_1B1AFF628);
  swift_release();
  sub_1B1A02758(0, &qword_1EEF5A170, (uint64_t)&type metadata for KillShape.Shape, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v6 = (_QWORD *)swift_allocObject();
  v6[4] = sub_1B1AFF3DC;
  v6[5] = KeyPath;
  v6[2] = sub_1B1AFF40C;
  v6[3] = KeyPath;
  v6[6] = KeyPath;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v7 = sub_1B1ADC16C(0x6570616873, 0xE500000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v6, KeyPath, 0, 0,
         0,
         v4,
         v5);
  swift_release();
  swift_release();
  *(_QWORD *)(v0 + 32) = v7;
  v8 = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F0, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v9 = (_QWORD *)swift_allocObject();
  v9[4] = sub_1B1AFF42C;
  v9[5] = v8;
  v9[2] = sub_1B1AFF45C;
  v9[3] = v8;
  v9[6] = v8;
  swift_allocObject();
  swift_retain_n();
  v10 = sub_1B1ADE580(0x6564697374756FLL, 0xE700000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v9, v8, 0, 0,
          0,
          v4,
          0,
          (uint64_t)sub_1B1AFF47C);
  swift_release();
  *(_QWORD *)(v0 + 40) = v10;
  result = sub_1B2228AD0();
  qword_1EEFD5248 = v0;
  return result;
}

uint64_t sub_1B1A5E724()
{
  return 0x706168536C6C694BLL;
}

uint64_t sub_1B1A5E740()
{
  return 49299456;
}

uint64_t sub_1B1A5E74C()
{
  if (qword_1EEF571E8 != -1)
    swift_once();
  return swift_bridgeObjectRetain();
}

uint64_t sub_1B1A5E78C(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, &qword_1EEF571E8);
}

uint64_t sub_1B1A5E7A8(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, &qword_1EEF571E8, (unint64_t *)&qword_1EEFD5248);
}

uint64_t sub_1B1A5E7D4(uint64_t a1)
{
  return sub_1B1A2262C(a1, &qword_1EEF571E8, &qword_1EEFD5248);
}

uint64_t sub_1B1A5E800()
{
  return 0x656C62616C6C694BLL;
}

unint64_t sub_1B1A5E818()
{
  return 0xD000000000000010;
}

uint64_t sub_1B1A5E834()
{
  return 0x7274744120464453;
}

uint64_t sub_1B1A5E858()
{
  uint64_t v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E450;
  KeyPath = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1EEF5A1A0, (uint64_t)&type metadata for Language, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = sub_1B1AFF728;
  v2[5] = KeyPath;
  v2[2] = sub_1B1AFF750;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v3 = MEMORY[0x1E0DEE9D8];
  v4 = sub_1B1AC7940(0x65676175676E616CLL, 0xE800000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v2, KeyPath, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0,
         (uint64_t)sub_1B1AFF80C);
  swift_release();
  *(_QWORD *)(v0 + 32) = v4;
  v5 = swift_getKeyPath();
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4B80E0, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v6 = (_QWORD *)swift_allocObject();
  v6[4] = sub_1B1AFF778;
  v6[5] = v5;
  v6[2] = sub_1B1AFF7A0;
  v6[3] = v5;
  v6[6] = v5;
  swift_allocObject();
  swift_retain_n();
  v7 = sub_1B1AD7928(1701080931, 0xE400000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)&type metadata for EmitterScript.Info, (uint64_t)&off_1E6379F98, (uint64_t)v6, v5, 0, 0,
         0,
         v3,
         0,
         (uint64_t)sub_1B1AFF7C0);
  swift_release();
  *(_QWORD *)(v0 + 40) = v7;
  result = sub_1B2228AD0();
  qword_1EEFD5250 = v0;
  return result;
}

unint64_t sub_1B1A5EAEC()
{
  return 0xD000000000000010;
}

uint64_t sub_1B1A5EB08(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, &qword_1EEF571F0);
}

uint64_t sub_1B1A5EB24(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, &qword_1EEF571F0, (unint64_t *)&qword_1EEFD5250);
}

uint64_t sub_1B1A5EB50(uint64_t a1)
{
  return sub_1B1A2262C(a1, &qword_1EEF571F0, &qword_1EEFD5250);
}

uint64_t sub_1B1A5EB7C()
{
  uint64_t v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E450;
  KeyPath = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1EEF5A1A0, (uint64_t)&type metadata for Language, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = sub_1B1AFF8B0;
  v2[5] = KeyPath;
  v2[2] = sub_1B1AFF8D8;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v3 = MEMORY[0x1E0DEE9D8];
  v4 = sub_1B1AC7940(0x65676175676E616CLL, 0xE800000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v2, KeyPath, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0,
         (uint64_t)sub_1B1AFF9E0);
  swift_release();
  *(_QWORD *)(v0 + 32) = v4;
  v5 = swift_getKeyPath();
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4B80E0, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v6 = (_QWORD *)swift_allocObject();
  v6[4] = sub_1B1AFF94C;
  v6[5] = v5;
  v6[2] = sub_1B1AFF974;
  v6[3] = v5;
  v6[6] = v5;
  swift_allocObject();
  swift_retain_n();
  v7 = sub_1B1AD7928(1701080931, 0xE400000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)&type metadata for ParticleInitScript.Info, (uint64_t)&off_1E63949B8, (uint64_t)v6, v5, 0, 0,
         0,
         v3,
         0,
         (uint64_t)sub_1B1AFF994);
  swift_release();
  *(_QWORD *)(v0 + 40) = v7;
  result = sub_1B2228AD0();
  qword_1EEFD5258 = v0;
  return result;
}

unint64_t sub_1B1A5EE10()
{
  return 0xD000000000000011;
}

uint64_t sub_1B1A5EE2C(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, &qword_1EEF571F8);
}

uint64_t sub_1B1A5EE48(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, &qword_1EEF571F8, (unint64_t *)&qword_1EEFD5258);
}

uint64_t sub_1B1A5EE74(uint64_t a1)
{
  return sub_1B1A2262C(a1, &qword_1EEF571F8, &qword_1EEFD5258);
}

uint64_t sub_1B1A5EEA0()
{
  uint64_t v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E450;
  KeyPath = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1EEF5A1A0, (uint64_t)&type metadata for Language, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = sub_1B1AFFA64;
  v2[5] = KeyPath;
  v2[2] = sub_1B1AFFA8C;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v3 = MEMORY[0x1E0DEE9D8];
  v4 = sub_1B1AC7940(0x65676175676E616CLL, 0xE800000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v2, KeyPath, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0,
         (uint64_t)sub_1B1AFFB48);
  swift_release();
  *(_QWORD *)(v0 + 32) = v4;
  v5 = swift_getKeyPath();
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4B80E0, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v6 = (_QWORD *)swift_allocObject();
  v6[4] = sub_1B1AFFAB4;
  v6[5] = v5;
  v6[2] = sub_1B1AFFADC;
  v6[3] = v5;
  v6[6] = v5;
  swift_allocObject();
  swift_retain_n();
  v7 = sub_1B1AD7928(1701080931, 0xE400000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)&type metadata for ParticleUpdateScript.Info, (uint64_t)&off_1E639E2E8, (uint64_t)v6, v5, 0, 0,
         0,
         v3,
         0,
         (uint64_t)sub_1B1AFFAFC);
  swift_release();
  *(_QWORD *)(v0 + 40) = v7;
  result = sub_1B2228AD0();
  qword_1EEFD5260 = v0;
  return result;
}

uint64_t sub_1B1A5F134(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, &qword_1EEF57200);
}

uint64_t sub_1B1A5F150(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, &qword_1EEF57200, (unint64_t *)&qword_1EEFD5260);
}

uint64_t sub_1B1A5F17C(uint64_t a1)
{
  return sub_1B1A2262C(a1, &qword_1EEF57200, &qword_1EEFD5260);
}

uint64_t sub_1B1A5F1A8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  char v11;
  uint64_t v13;

  v5 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1B1D2480C(v9, *(_QWORD *)(v8 + 8));
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v2, a1);
  if (v10)
    v11 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 56))(a1, a2);
  else
    v11 = 0;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, a1);
  return v11 & 1;
}

_QWORD *sub_1B1A5F260()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v47;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E4B0;
  KeyPath = swift_getKeyPath();
  v2 = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B8040, (uint64_t)&type metadata for Entity, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v3 = (_QWORD *)swift_allocObject();
  v3[4] = sub_1B1B02788;
  v3[5] = KeyPath;
  v3[2] = sub_1B1B027B8;
  v3[3] = KeyPath;
  v3[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v4 = MEMORY[0x1E0DEE9D8];
  v47 = (_QWORD *)v0;
  *(_QWORD *)(v0 + 32) = sub_1B1AD9F50(0xD000000000000010, 0x80000001B2328850, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v2, 17, 0, (uint64_t)v3, KeyPath, 0, 0,
                           0,
                           MEMORY[0x1E0DEE9D8],
                           0,
                           (uint64_t)sub_1B1B03030);
  v5 = swift_getKeyPath();
  v6 = swift_getKeyPath();
  v7 = (_QWORD *)swift_allocObject();
  v7[4] = sub_1B1B02788;
  v7[5] = v5;
  v7[2] = sub_1B1B027B8;
  v7[3] = v5;
  v7[6] = v5;
  swift_allocObject();
  swift_retain_n();
  *(_QWORD *)(v0 + 40) = sub_1B1AD9F50(0x65727574786574, 0xE700000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v6, 8, 0, (uint64_t)v7, v5, 0, 0,
                           0,
                           v4,
                           0,
                           (uint64_t)sub_1B1B03030);
  v8 = swift_getKeyPath();
  v9 = swift_getKeyPath();
  v10 = swift_getKeyPath();
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4B8140, MEMORY[0x1E0DEDC60], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v11 = (_QWORD *)swift_allocObject();
  v11[4] = sub_1B1B027D8;
  v11[5] = v10;
  v11[2] = sub_1B1B02808;
  v11[3] = v10;
  v11[6] = v10;
  swift_allocObject();
  swift_retain_n();
  v12 = MEMORY[0x1E0DEE9D8];
  v13 = sub_1B1ADBDA8(0x646F4D646E656C62, 0xEE007865646E4965, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v11, v10, 0, 0,
          0,
          MEMORY[0x1E0DEE9D8],
          0,
          (uint64_t)sub_1B1B02F68);
  sub_1B1A02758(0, &qword_1ED4B80C0, (uint64_t)&type metadata for BlendMode, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v14 = (_QWORD *)swift_allocObject();
  v14[4] = sub_1B1B02828;
  v14[5] = v8;
  v14[2] = sub_1B1B02858;
  v14[3] = v8;
  v14[6] = v8;
  swift_allocObject();
  swift_retain_n();
  v15 = sub_1B1ADA314(0x646F4D646E656C62, 0xE900000000000065, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v9, 1, 0, (uint64_t)v14, v8, 0, 0,
          0,
          v12,
          v13,
          (uint64_t)sub_1B1B02E60);
  v16 = (_QWORD *)v0;
  *(_QWORD *)(v0 + 48) = v15;
  v17 = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F8, MEMORY[0x1E0DEB188], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v18 = (_QWORD *)swift_allocObject();
  v18[4] = sub_1B1B02878;
  v18[5] = v17;
  v18[2] = sub_1B1B028A8;
  v18[3] = v17;
  v18[6] = v17;
  swift_allocObject();
  swift_retain_n();
  *(_QWORD *)(v0 + 56) = sub_1B1ADC904(0x685466666F747563, 0xEF646C6F68736572, 0xBFF0000000000000, 0, 0x3FF0000000000000, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v18, v17, 0, 0,
                           0,
                           v12,
                           0,
                           (uint64_t)sub_1B1B02D98);
  v19 = swift_getKeyPath();
  v20 = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F0, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v21 = (_QWORD *)swift_allocObject();
  v21[4] = sub_1B1B028C8;
  v21[5] = v19;
  v21[2] = sub_1B1B028F8;
  v21[3] = v19;
  v21[6] = v19;
  swift_allocObject();
  swift_retain_n();
  v16[8] = sub_1B1ADE580(0x676E69746867696CLL, 0xE800000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v20, 1, 0, (uint64_t)v21, v19, 0, 0,
             0,
             MEMORY[0x1E0DEE9D8],
             0,
             (uint64_t)sub_1B1B02CD0);
  v22 = swift_getKeyPath();
  v23 = swift_getKeyPath();
  v24 = (_QWORD *)swift_allocObject();
  v24[4] = sub_1B1B028C8;
  v24[5] = v22;
  v24[2] = sub_1B1B028F8;
  v24[3] = v22;
  v24[6] = v22;
  swift_allocObject();
  swift_retain_n();
  v25 = MEMORY[0x1E0DEE9D8];
  v16[9] = sub_1B1ADE580(0x72616C7563657073, 0xE800000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v23, 1, 0, (uint64_t)v24, v22, 0, 0,
             0,
             MEMORY[0x1E0DEE9D8],
             0,
             (uint64_t)sub_1B1B02CD0);
  v26 = swift_getKeyPath();
  v27 = swift_getKeyPath();
  v28 = (_QWORD *)swift_allocObject();
  v28[4] = sub_1B1B027D8;
  v28[5] = v27;
  v28[2] = sub_1B1B02808;
  v28[3] = v27;
  v28[6] = v27;
  swift_allocObject();
  swift_retain_n();
  v29 = sub_1B1ADBDA8(0x65646F4D74726F73, 0xED00007865646E49, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v28, v27, 0, 0,
          0,
          v25,
          0,
          (uint64_t)sub_1B1B02F68);
  sub_1B1A02758(0, &qword_1ED4B8080, (uint64_t)&type metadata for ParticleSortMode, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v30 = (_QWORD *)swift_allocObject();
  v30[4] = sub_1B1B02918;
  v30[5] = v26;
  v30[2] = sub_1B1B02948;
  v30[3] = v26;
  v30[6] = v26;
  swift_allocObject();
  swift_retain_n();
  v16[10] = sub_1B1AD0AA8(0x65646F4D74726F73, 0xE800000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v30, v26, 0, 0,
              0,
              v25,
              v29,
              (uint64_t)sub_1B1B02BDC);
  v31 = swift_getKeyPath();
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4B8178, MEMORY[0x1E0DEE0F8], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v32 = (_QWORD *)swift_allocObject();
  v32[4] = sub_1B1B02968;
  v32[5] = v31;
  v32[2] = sub_1B1B02998;
  v32[3] = v31;
  v32[6] = v31;
  swift_allocObject();
  swift_retain_n();
  v33 = MEMORY[0x1E0DEE9D8];
  v16[11] = sub_1B1AD7CEC(0x647265764F78616DLL, 0xEB00000000776172, 0x3FF0000000000000, 0, 0x4070000000000000, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v32, v31, 0, 0,
              4,
              MEMORY[0x1E0DEE9D8],
              0,
              (uint64_t)sub_1B1B02AFC);
  v34 = swift_getKeyPath();
  v35 = swift_getKeyPath();
  v36 = swift_getKeyPath();
  v37 = (_QWORD *)swift_allocObject();
  v37[4] = sub_1B1B027D8;
  v37[5] = v36;
  v37[2] = sub_1B1B02808;
  v37[3] = v36;
  v37[6] = v36;
  swift_allocObject();
  swift_retain_n();
  v38 = sub_1B1ADBDA8(0xD000000000000012, 0x80000001B232E1F0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v37, v36, 0, 0,
          0,
          v33,
          0,
          (uint64_t)sub_1B1B02F68);
  sub_1B1A02758(0, &qword_1ED4B80A8, (uint64_t)&type metadata for ParticleAnimationMode, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v39 = (_QWORD *)swift_allocObject();
  v39[4] = sub_1B1B029B8;
  v39[5] = v34;
  v39[2] = sub_1B1B029E8;
  v39[3] = v34;
  v39[6] = v34;
  swift_allocObject();
  swift_retain_n();
  v47[12] = sub_1B1AD0E6C(0x6F6974616D696E61, 0xED000065646F4D6ELL, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v35, 1, 0, (uint64_t)v39, v34, 0, 0,
              0,
              v33,
              v38,
              (uint64_t)sub_1B1B02A08);
  v40 = swift_getKeyPath();
  v41 = swift_getKeyPath();
  v42 = (_QWORD *)swift_allocObject();
  v42[4] = sub_1B1B028C8;
  v42[5] = v40;
  v42[2] = sub_1B1B028F8;
  v42[3] = v40;
  v42[6] = v40;
  swift_allocObject();
  swift_retain_n();
  v47[13] = sub_1B1ADE580(0xD000000000000017, 0x80000001B2329C50, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v41, 1, 0, (uint64_t)v42, v40, 0, 0,
              0,
              v33,
              0,
              (uint64_t)sub_1B1B02CD0);
  v43 = swift_getKeyPath();
  v44 = swift_getKeyPath();
  v45 = (_QWORD *)swift_allocObject();
  v45[4] = sub_1B1B02878;
  v45[5] = v43;
  v45[2] = sub_1B1B028A8;
  v45[3] = v43;
  v45[6] = v43;
  swift_allocObject();
  swift_retain_n();
  v47[14] = sub_1B1ADC904(0x7473694474666F73, 0xEC00000065636E61, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, v44, 1, 0, (uint64_t)v45, v43, 0, 0,
              0,
              v33,
              0,
              (uint64_t)sub_1B1B02D98);
  sub_1B2228AD0();
  return v47;
}

_QWORD *sub_1B1A60160()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v47;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E4B0;
  KeyPath = swift_getKeyPath();
  v2 = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B8040, (uint64_t)&type metadata for Entity, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v3 = (_QWORD *)swift_allocObject();
  v3[4] = sub_1B1B00F14;
  v3[5] = KeyPath;
  v3[2] = sub_1B1B00F44;
  v3[3] = KeyPath;
  v3[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v4 = MEMORY[0x1E0DEE9D8];
  v47 = (_QWORD *)v0;
  *(_QWORD *)(v0 + 32) = sub_1B1AD9F50(0xD000000000000010, 0x80000001B2328850, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v2, 17, 0, (uint64_t)v3, KeyPath, 0, 0,
                           0,
                           MEMORY[0x1E0DEE9D8],
                           0,
                           (uint64_t)sub_1B1B0160C);
  v5 = swift_getKeyPath();
  v6 = swift_getKeyPath();
  v7 = (_QWORD *)swift_allocObject();
  v7[4] = sub_1B1B00F14;
  v7[5] = v5;
  v7[2] = sub_1B1B00F44;
  v7[3] = v5;
  v7[6] = v5;
  swift_allocObject();
  swift_retain_n();
  *(_QWORD *)(v0 + 40) = sub_1B1AD9F50(0x65727574786574, 0xE700000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v6, 8, 0, (uint64_t)v7, v5, 0, 0,
                           0,
                           v4,
                           0,
                           (uint64_t)sub_1B1B0160C);
  v8 = swift_getKeyPath();
  v9 = swift_getKeyPath();
  v10 = swift_getKeyPath();
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4B8140, MEMORY[0x1E0DEDC60], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v11 = (_QWORD *)swift_allocObject();
  v11[4] = sub_1B1B00F64;
  v11[5] = v10;
  v11[2] = sub_1B1B00F94;
  v11[3] = v10;
  v11[6] = v10;
  swift_allocObject();
  swift_retain_n();
  v12 = MEMORY[0x1E0DEE9D8];
  v13 = sub_1B1ADBDA8(0x646F4D646E656C62, 0xEE007865646E4965, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v11, v10, 0, 0,
          0,
          MEMORY[0x1E0DEE9D8],
          0,
          (uint64_t)sub_1B1B01544);
  sub_1B1A02758(0, &qword_1ED4B80C0, (uint64_t)&type metadata for BlendMode, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v14 = (_QWORD *)swift_allocObject();
  v14[4] = sub_1B1B00FB4;
  v14[5] = v8;
  v14[2] = sub_1B1B00FE4;
  v14[3] = v8;
  v14[6] = v8;
  swift_allocObject();
  swift_retain_n();
  v15 = sub_1B1ADA314(0x646F4D646E656C62, 0xE900000000000065, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v9, 1, 0, (uint64_t)v14, v8, 0, 0,
          0,
          v12,
          v13,
          (uint64_t)sub_1B1B0147C);
  v16 = (_QWORD *)v0;
  *(_QWORD *)(v0 + 48) = v15;
  v17 = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F8, MEMORY[0x1E0DEB188], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v18 = (_QWORD *)swift_allocObject();
  v18[4] = sub_1B1B00DFC;
  v18[5] = v17;
  v18[2] = sub_1B1B00E2C;
  v18[3] = v17;
  v18[6] = v17;
  swift_allocObject();
  swift_retain_n();
  *(_QWORD *)(v0 + 56) = sub_1B1ADC904(0x685466666F747563, 0xEF646C6F68736572, 0xBFF0000000000000, 0, 0x3FF0000000000000, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v18, v17, 0, 0,
                           0,
                           v12,
                           0,
                           (uint64_t)sub_1B1B00E4C);
  v19 = swift_getKeyPath();
  v20 = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F0, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v21 = (_QWORD *)swift_allocObject();
  v21[4] = sub_1B1B01004;
  v21[5] = v19;
  v21[2] = sub_1B1B01034;
  v21[3] = v19;
  v21[6] = v19;
  swift_allocObject();
  swift_retain_n();
  v16[8] = sub_1B1ADE580(0x676E69746867696CLL, 0xE800000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v20, 1, 0, (uint64_t)v21, v19, 0, 0,
             0,
             MEMORY[0x1E0DEE9D8],
             0,
             (uint64_t)sub_1B1B013B4);
  v22 = swift_getKeyPath();
  v23 = swift_getKeyPath();
  v24 = (_QWORD *)swift_allocObject();
  v24[4] = sub_1B1B01004;
  v24[5] = v22;
  v24[2] = sub_1B1B01034;
  v24[3] = v22;
  v24[6] = v22;
  swift_allocObject();
  swift_retain_n();
  v25 = MEMORY[0x1E0DEE9D8];
  v16[9] = sub_1B1ADE580(0x72616C7563657073, 0xE800000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v23, 1, 0, (uint64_t)v24, v22, 0, 0,
             0,
             MEMORY[0x1E0DEE9D8],
             0,
             (uint64_t)sub_1B1B013B4);
  v26 = swift_getKeyPath();
  v27 = swift_getKeyPath();
  v28 = (_QWORD *)swift_allocObject();
  v28[4] = sub_1B1B00F64;
  v28[5] = v27;
  v28[2] = sub_1B1B00F94;
  v28[3] = v27;
  v28[6] = v27;
  swift_allocObject();
  swift_retain_n();
  v29 = sub_1B1ADBDA8(0x65646F4D74726F73, 0xED00007865646E49, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v28, v27, 0, 0,
          0,
          v25,
          0,
          (uint64_t)sub_1B1B01544);
  sub_1B1A02758(0, &qword_1ED4B8080, (uint64_t)&type metadata for ParticleSortMode, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v30 = (_QWORD *)swift_allocObject();
  v30[4] = sub_1B1B01054;
  v30[5] = v26;
  v30[2] = sub_1B1B01084;
  v30[3] = v26;
  v30[6] = v26;
  swift_allocObject();
  swift_retain_n();
  v16[10] = sub_1B1AD0AA8(0x65646F4D74726F73, 0xE800000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v30, v26, 0, 0,
              0,
              v25,
              v29,
              (uint64_t)sub_1B1B012EC);
  v31 = swift_getKeyPath();
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4B8178, MEMORY[0x1E0DEE0F8], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v32 = (_QWORD *)swift_allocObject();
  v32[4] = sub_1B1B010A4;
  v32[5] = v31;
  v32[2] = sub_1B1B010D4;
  v32[3] = v31;
  v32[6] = v31;
  swift_allocObject();
  swift_retain_n();
  v33 = MEMORY[0x1E0DEE9D8];
  v16[11] = sub_1B1AD7CEC(0x647265764F78616DLL, 0xEB00000000776172, 0x3FF0000000000000, 0, 0x4070000000000000, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v32, v31, 0, 0,
              4,
              MEMORY[0x1E0DEE9D8],
              0,
              (uint64_t)sub_1B1B0120C);
  v34 = swift_getKeyPath();
  v35 = swift_getKeyPath();
  v36 = swift_getKeyPath();
  v37 = (_QWORD *)swift_allocObject();
  v37[4] = sub_1B1B00F64;
  v37[5] = v36;
  v37[2] = sub_1B1B00F94;
  v37[3] = v36;
  v37[6] = v36;
  swift_allocObject();
  swift_retain_n();
  v38 = sub_1B1ADBDA8(0xD000000000000012, 0x80000001B232E1F0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v37, v36, 0, 0,
          0,
          v33,
          0,
          (uint64_t)sub_1B1B01544);
  sub_1B1A02758(0, &qword_1ED4B80A8, (uint64_t)&type metadata for ParticleAnimationMode, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v39 = (_QWORD *)swift_allocObject();
  v39[4] = sub_1B1B010F4;
  v39[5] = v34;
  v39[2] = sub_1B1B01124;
  v39[3] = v34;
  v39[6] = v34;
  swift_allocObject();
  swift_retain_n();
  v47[12] = sub_1B1AD0E6C(0x6F6974616D696E61, 0xED000065646F4D6ELL, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v35, 1, 0, (uint64_t)v39, v34, 0, 0,
              0,
              v33,
              v38,
              (uint64_t)sub_1B1B01144);
  v40 = swift_getKeyPath();
  v41 = swift_getKeyPath();
  v42 = (_QWORD *)swift_allocObject();
  v42[4] = sub_1B1B01004;
  v42[5] = v40;
  v42[2] = sub_1B1B01034;
  v42[3] = v40;
  v42[6] = v40;
  swift_allocObject();
  swift_retain_n();
  v47[13] = sub_1B1ADE580(0xD000000000000017, 0x80000001B2329C50, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v41, 1, 0, (uint64_t)v42, v40, 0, 0,
              0,
              v33,
              0,
              (uint64_t)sub_1B1B013B4);
  v43 = swift_getKeyPath();
  v44 = swift_getKeyPath();
  v45 = (_QWORD *)swift_allocObject();
  v45[4] = sub_1B1B00DFC;
  v45[5] = v43;
  v45[2] = sub_1B1B00E2C;
  v45[3] = v43;
  v45[6] = v43;
  swift_allocObject();
  swift_retain_n();
  v47[14] = sub_1B1ADC904(0x7473694474666F73, 0xEC00000065636E61, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, v44, 1, 0, (uint64_t)v45, v43, 0, 0,
              0,
              v33,
              0,
              (uint64_t)sub_1B1B00E4C);
  sub_1B2228AD0();
  return v47;
}

_QWORD *sub_1B1A61060()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v47;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E4B0;
  KeyPath = swift_getKeyPath();
  v2 = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B8040, (uint64_t)&type metadata for Entity, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v3 = (_QWORD *)swift_allocObject();
  v3[4] = sub_1B1B01A08;
  v3[5] = KeyPath;
  v3[2] = sub_1B1B01A38;
  v3[3] = KeyPath;
  v3[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v4 = MEMORY[0x1E0DEE9D8];
  v47 = (_QWORD *)v0;
  *(_QWORD *)(v0 + 32) = sub_1B1AD9F50(0xD000000000000010, 0x80000001B2328850, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v2, 17, 0, (uint64_t)v3, KeyPath, 0, 0,
                           0,
                           MEMORY[0x1E0DEE9D8],
                           0,
                           (uint64_t)sub_1B1B01B98);
  v5 = swift_getKeyPath();
  v6 = swift_getKeyPath();
  v7 = (_QWORD *)swift_allocObject();
  v7[4] = sub_1B1B01A08;
  v7[5] = v5;
  v7[2] = sub_1B1B01A38;
  v7[3] = v5;
  v7[6] = v5;
  swift_allocObject();
  swift_retain_n();
  *(_QWORD *)(v0 + 40) = sub_1B1AD9F50(0x65727574786574, 0xE700000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v6, 8, 0, (uint64_t)v7, v5, 0, 0,
                           0,
                           v4,
                           0,
                           (uint64_t)sub_1B1B01B98);
  v8 = swift_getKeyPath();
  v9 = swift_getKeyPath();
  v10 = swift_getKeyPath();
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4B8140, MEMORY[0x1E0DEDC60], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v11 = (_QWORD *)swift_allocObject();
  v11[4] = sub_1B1B0170C;
  v11[5] = v10;
  v11[2] = sub_1B1B0173C;
  v11[3] = v10;
  v11[6] = v10;
  swift_allocObject();
  swift_retain_n();
  v12 = MEMORY[0x1E0DEE9D8];
  v13 = sub_1B1ADBDA8(0x646F4D646E656C62, 0xEE007865646E4965, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v11, v10, 0, 0,
          0,
          MEMORY[0x1E0DEE9D8],
          0,
          (uint64_t)sub_1B1B0225C);
  sub_1B1A02758(0, &qword_1ED4B80C0, (uint64_t)&type metadata for BlendMode, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v14 = (_QWORD *)swift_allocObject();
  v14[4] = sub_1B1B0231C;
  v14[5] = v8;
  v14[2] = sub_1B1B0234C;
  v14[3] = v8;
  v14[6] = v8;
  swift_allocObject();
  swift_retain_n();
  v15 = sub_1B1ADA314(0x646F4D646E656C62, 0xE900000000000065, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v9, 1, 0, (uint64_t)v14, v8, 0, 0,
          0,
          v12,
          v13,
          (uint64_t)sub_1B1B026C8);
  v16 = (_QWORD *)v0;
  *(_QWORD *)(v0 + 48) = v15;
  v17 = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F8, MEMORY[0x1E0DEB188], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v18 = (_QWORD *)swift_allocObject();
  v18[4] = sub_1B1B01968;
  v18[5] = v17;
  v18[2] = sub_1B1B01998;
  v18[3] = v17;
  v18[6] = v17;
  swift_allocObject();
  swift_retain_n();
  *(_QWORD *)(v0 + 56) = sub_1B1ADC904(0x685466666F747563, 0xEF646C6F68736572, 0xBFF0000000000000, 0, 0x3FF0000000000000, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v18, v17, 0, 0,
                           0,
                           v12,
                           0,
                           (uint64_t)sub_1B1B01D5C);
  v19 = swift_getKeyPath();
  v20 = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F0, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v21 = (_QWORD *)swift_allocObject();
  v21[4] = sub_1B1B01918;
  v21[5] = v19;
  v21[2] = sub_1B1B01948;
  v21[3] = v19;
  v21[6] = v19;
  swift_allocObject();
  swift_retain_n();
  v16[8] = sub_1B1ADE580(0x676E69746867696CLL, 0xE800000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v20, 1, 0, (uint64_t)v21, v19, 0, 0,
             0,
             MEMORY[0x1E0DEE9D8],
             0,
             (uint64_t)sub_1B1B01E1C);
  v22 = swift_getKeyPath();
  v23 = swift_getKeyPath();
  v24 = (_QWORD *)swift_allocObject();
  v24[4] = sub_1B1B01918;
  v24[5] = v22;
  v24[2] = sub_1B1B01948;
  v24[3] = v22;
  v24[6] = v22;
  swift_allocObject();
  swift_retain_n();
  v25 = MEMORY[0x1E0DEE9D8];
  v16[9] = sub_1B1ADE580(0x72616C7563657073, 0xE800000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v23, 1, 0, (uint64_t)v24, v22, 0, 0,
             0,
             MEMORY[0x1E0DEE9D8],
             0,
             (uint64_t)sub_1B1B01E1C);
  v26 = swift_getKeyPath();
  v27 = swift_getKeyPath();
  v28 = (_QWORD *)swift_allocObject();
  v28[4] = sub_1B1B0170C;
  v28[5] = v27;
  v28[2] = sub_1B1B0173C;
  v28[3] = v27;
  v28[6] = v27;
  swift_allocObject();
  swift_retain_n();
  v29 = sub_1B1ADBDA8(0x65646F4D74726F73, 0xED00007865646E49, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v28, v27, 0, 0,
          0,
          v25,
          0,
          (uint64_t)sub_1B1B0225C);
  sub_1B1A02758(0, &qword_1ED4B8080, (uint64_t)&type metadata for ParticleSortMode, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v30 = (_QWORD *)swift_allocObject();
  v30[4] = sub_1B1B0236C;
  v30[5] = v26;
  v30[2] = sub_1B1B0239C;
  v30[3] = v26;
  v30[6] = v26;
  swift_allocObject();
  swift_retain_n();
  v16[10] = sub_1B1AD0AA8(0x65646F4D74726F73, 0xE800000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v30, v26, 0, 0,
              0,
              v25,
              v29,
              (uint64_t)sub_1B1B02608);
  v31 = swift_getKeyPath();
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4B8178, MEMORY[0x1E0DEE0F8], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v32 = (_QWORD *)swift_allocObject();
  v32[4] = sub_1B1B023BC;
  v32[5] = v31;
  v32[2] = sub_1B1B023EC;
  v32[3] = v31;
  v32[6] = v31;
  swift_allocObject();
  swift_retain_n();
  v33 = MEMORY[0x1E0DEE9D8];
  v16[11] = sub_1B1AD7CEC(0x647265764F78616DLL, 0xEB00000000776172, 0x3FF0000000000000, 0, 0x4070000000000000, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v32, v31, 0, 0,
              4,
              MEMORY[0x1E0DEE9D8],
              0,
              (uint64_t)sub_1B1B0251C);
  v34 = swift_getKeyPath();
  v35 = swift_getKeyPath();
  v36 = swift_getKeyPath();
  v37 = (_QWORD *)swift_allocObject();
  v37[4] = sub_1B1B0170C;
  v37[5] = v36;
  v37[2] = sub_1B1B0173C;
  v37[3] = v36;
  v37[6] = v36;
  swift_allocObject();
  swift_retain_n();
  v38 = sub_1B1ADBDA8(0xD000000000000012, 0x80000001B232E1F0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v37, v36, 0, 0,
          0,
          v33,
          0,
          (uint64_t)sub_1B1B0225C);
  sub_1B1A02758(0, &qword_1ED4B80A8, (uint64_t)&type metadata for ParticleAnimationMode, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v39 = (_QWORD *)swift_allocObject();
  v39[4] = sub_1B1B0240C;
  v39[5] = v34;
  v39[2] = sub_1B1B0243C;
  v39[3] = v34;
  v39[6] = v34;
  swift_allocObject();
  swift_retain_n();
  v47[12] = sub_1B1AD0E6C(0x6F6974616D696E61, 0xED000065646F4D6ELL, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v35, 1, 0, (uint64_t)v39, v34, 0, 0,
              0,
              v33,
              v38,
              (uint64_t)sub_1B1B0245C);
  v40 = swift_getKeyPath();
  v41 = swift_getKeyPath();
  v42 = (_QWORD *)swift_allocObject();
  v42[4] = sub_1B1B01918;
  v42[5] = v40;
  v42[2] = sub_1B1B01948;
  v42[3] = v40;
  v42[6] = v40;
  swift_allocObject();
  swift_retain_n();
  v47[13] = sub_1B1ADE580(0xD000000000000017, 0x80000001B2329C50, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v41, 1, 0, (uint64_t)v42, v40, 0, 0,
              0,
              v33,
              0,
              (uint64_t)sub_1B1B01E1C);
  v43 = swift_getKeyPath();
  v44 = swift_getKeyPath();
  v45 = (_QWORD *)swift_allocObject();
  v45[4] = sub_1B1B01968;
  v45[5] = v43;
  v45[2] = sub_1B1B01998;
  v45[3] = v43;
  v45[6] = v43;
  swift_allocObject();
  swift_retain_n();
  v47[14] = sub_1B1ADC904(0x7473694474666F73, 0xEC00000065636E61, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, v44, 1, 0, (uint64_t)v45, v43, 0, 0,
              0,
              v33,
              0,
              (uint64_t)sub_1B1B01D5C);
  sub_1B2228AD0();
  return v47;
}

_QWORD *sub_1B1A61F60()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v47;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E4B0;
  KeyPath = swift_getKeyPath();
  v2 = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B8040, (uint64_t)&type metadata for Entity, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v3 = (_QWORD *)swift_allocObject();
  v3[4] = sub_1B1AFFEAC;
  v3[5] = KeyPath;
  v3[2] = sub_1B1AFFEDC;
  v3[3] = KeyPath;
  v3[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v4 = MEMORY[0x1E0DEE9D8];
  v47 = (_QWORD *)v0;
  *(_QWORD *)(v0 + 32) = sub_1B1AD9F50(0xD000000000000010, 0x80000001B2328850, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v2, 17, 0, (uint64_t)v3, KeyPath, 0, 0,
                           0,
                           MEMORY[0x1E0DEE9D8],
                           0,
                           (uint64_t)sub_1B1B00D34);
  v5 = swift_getKeyPath();
  v6 = swift_getKeyPath();
  v7 = (_QWORD *)swift_allocObject();
  v7[4] = sub_1B1AFFEAC;
  v7[5] = v5;
  v7[2] = sub_1B1AFFEDC;
  v7[3] = v5;
  v7[6] = v5;
  swift_allocObject();
  swift_retain_n();
  *(_QWORD *)(v0 + 40) = sub_1B1AD9F50(0x65727574786574, 0xE700000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v6, 8, 0, (uint64_t)v7, v5, 0, 0,
                           0,
                           v4,
                           0,
                           (uint64_t)sub_1B1B00D34);
  v8 = swift_getKeyPath();
  v9 = swift_getKeyPath();
  v10 = swift_getKeyPath();
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4B8140, MEMORY[0x1E0DEDC60], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v11 = (_QWORD *)swift_allocObject();
  v11[4] = sub_1B1B000C0;
  v11[5] = v10;
  v11[2] = sub_1B1B000F0;
  v11[3] = v10;
  v11[6] = v10;
  swift_allocObject();
  swift_retain_n();
  v12 = MEMORY[0x1E0DEE9D8];
  v13 = sub_1B1ADBDA8(0x646F4D646E656C62, 0xEE007865646E4965, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v11, v10, 0, 0,
          0,
          MEMORY[0x1E0DEE9D8],
          0,
          (uint64_t)sub_1B1B00C6C);
  sub_1B1A02758(0, &qword_1ED4B80C0, (uint64_t)&type metadata for BlendMode, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v14 = (_QWORD *)swift_allocObject();
  v14[4] = sub_1B1B00110;
  v14[5] = v8;
  v14[2] = sub_1B1B00140;
  v14[3] = v8;
  v14[6] = v8;
  swift_allocObject();
  swift_retain_n();
  v15 = sub_1B1ADA314(0x646F4D646E656C62, 0xE900000000000065, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v9, 1, 0, (uint64_t)v14, v8, 0, 0,
          0,
          v12,
          v13,
          (uint64_t)sub_1B1B00BA4);
  v16 = (_QWORD *)v0;
  *(_QWORD *)(v0 + 48) = v15;
  v17 = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F8, MEMORY[0x1E0DEB188], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v18 = (_QWORD *)swift_allocObject();
  v18[4] = sub_1B1AFFBB8;
  v18[5] = v17;
  v18[2] = sub_1B1AFFBE8;
  v18[3] = v17;
  v18[6] = v17;
  swift_allocObject();
  swift_retain_n();
  *(_QWORD *)(v0 + 56) = sub_1B1ADC904(0x685466666F747563, 0xEF646C6F68736572, 0xBFF0000000000000, 0, 0x3FF0000000000000, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v18, v17, 0, 0,
                           0,
                           v12,
                           0,
                           (uint64_t)sub_1B1AFFD38);
  v19 = swift_getKeyPath();
  v20 = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F0, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v21 = (_QWORD *)swift_allocObject();
  v21[4] = sub_1B1B00274;
  v21[5] = v19;
  v21[2] = sub_1B1B002A4;
  v21[3] = v19;
  v21[6] = v19;
  swift_allocObject();
  swift_retain_n();
  v16[8] = sub_1B1ADE580(0x676E69746867696CLL, 0xE800000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v20, 1, 0, (uint64_t)v21, v19, 0, 0,
             0,
             MEMORY[0x1E0DEE9D8],
             0,
             (uint64_t)sub_1B1B00ADC);
  v22 = swift_getKeyPath();
  v23 = swift_getKeyPath();
  v24 = (_QWORD *)swift_allocObject();
  v24[4] = sub_1B1B00274;
  v24[5] = v22;
  v24[2] = sub_1B1B002A4;
  v24[3] = v22;
  v24[6] = v22;
  swift_allocObject();
  swift_retain_n();
  v25 = MEMORY[0x1E0DEE9D8];
  v16[9] = sub_1B1ADE580(0x72616C7563657073, 0xE800000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v23, 1, 0, (uint64_t)v24, v22, 0, 0,
             0,
             MEMORY[0x1E0DEE9D8],
             0,
             (uint64_t)sub_1B1B00ADC);
  v26 = swift_getKeyPath();
  v27 = swift_getKeyPath();
  v28 = (_QWORD *)swift_allocObject();
  v28[4] = sub_1B1B000C0;
  v28[5] = v27;
  v28[2] = sub_1B1B000F0;
  v28[3] = v27;
  v28[6] = v27;
  swift_allocObject();
  swift_retain_n();
  v29 = sub_1B1ADBDA8(0x65646F4D74726F73, 0xED00007865646E49, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v28, v27, 0, 0,
          0,
          v25,
          0,
          (uint64_t)sub_1B1B00C6C);
  sub_1B1A02758(0, &qword_1ED4B8080, (uint64_t)&type metadata for ParticleSortMode, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v30 = (_QWORD *)swift_allocObject();
  v30[4] = sub_1B1B00494;
  v30[5] = v26;
  v30[2] = sub_1B1B004C4;
  v30[3] = v26;
  v30[6] = v26;
  swift_allocObject();
  swift_retain_n();
  v16[10] = sub_1B1AD0AA8(0x65646F4D74726F73, 0xE800000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v30, v26, 0, 0,
              0,
              v25,
              v29,
              (uint64_t)sub_1B1B00A14);
  v31 = swift_getKeyPath();
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4B8178, MEMORY[0x1E0DEE0F8], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v32 = (_QWORD *)swift_allocObject();
  v32[4] = sub_1B1B00568;
  v32[5] = v31;
  v32[2] = sub_1B1B00598;
  v32[3] = v31;
  v32[6] = v31;
  swift_allocObject();
  swift_retain_n();
  v33 = MEMORY[0x1E0DEE9D8];
  v16[11] = sub_1B1AD7CEC(0x647265764F78616DLL, 0xEB00000000776172, 0x3FF0000000000000, 0, 0x4070000000000000, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v32, v31, 0, 0,
              4,
              MEMORY[0x1E0DEE9D8],
              0,
              (uint64_t)sub_1B1B00934);
  v34 = swift_getKeyPath();
  v35 = swift_getKeyPath();
  v36 = swift_getKeyPath();
  v37 = (_QWORD *)swift_allocObject();
  v37[4] = sub_1B1B000C0;
  v37[5] = v36;
  v37[2] = sub_1B1B000F0;
  v37[3] = v36;
  v37[6] = v36;
  swift_allocObject();
  swift_retain_n();
  v38 = sub_1B1ADBDA8(0xD000000000000012, 0x80000001B232E1F0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v37, v36, 0, 0,
          0,
          v33,
          0,
          (uint64_t)sub_1B1B00C6C);
  sub_1B1A02758(0, &qword_1ED4B80A8, (uint64_t)&type metadata for ParticleAnimationMode, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v39 = (_QWORD *)swift_allocObject();
  v39[4] = sub_1B1B006B0;
  v39[5] = v34;
  v39[2] = sub_1B1B006E0;
  v39[3] = v34;
  v39[6] = v34;
  swift_allocObject();
  swift_retain_n();
  v47[12] = sub_1B1AD0E6C(0x6F6974616D696E61, 0xED000065646F4D6ELL, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v35, 1, 0, (uint64_t)v39, v34, 0, 0,
              0,
              v33,
              v38,
              (uint64_t)sub_1B1B0086C);
  v40 = swift_getKeyPath();
  v41 = swift_getKeyPath();
  v42 = (_QWORD *)swift_allocObject();
  v42[4] = sub_1B1B00274;
  v42[5] = v40;
  v42[2] = sub_1B1B002A4;
  v42[3] = v40;
  v42[6] = v40;
  swift_allocObject();
  swift_retain_n();
  v47[13] = sub_1B1ADE580(0xD000000000000017, 0x80000001B2329C50, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v41, 1, 0, (uint64_t)v42, v40, 0, 0,
              0,
              v33,
              0,
              (uint64_t)sub_1B1B00ADC);
  v43 = swift_getKeyPath();
  v44 = swift_getKeyPath();
  v45 = (_QWORD *)swift_allocObject();
  v45[4] = sub_1B1AFFBB8;
  v45[5] = v43;
  v45[2] = sub_1B1AFFBE8;
  v45[3] = v43;
  v45[6] = v43;
  swift_allocObject();
  swift_retain_n();
  v47[14] = sub_1B1ADC904(0x7473694474666F73, 0xEC00000065636E61, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, v44, 1, 0, (uint64_t)v45, v43, 0, 0,
              0,
              v33,
              0,
              (uint64_t)sub_1B1AFFD38);
  sub_1B2228AD0();
  return v47;
}

_QWORD *sub_1B1A62E60()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v47;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E4B0;
  KeyPath = swift_getKeyPath();
  v2 = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B8040, (uint64_t)&type metadata for Entity, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v3 = (_QWORD *)swift_allocObject();
  v3[4] = sub_1B1B030F8;
  v3[5] = KeyPath;
  v3[2] = sub_1B1B03128;
  v3[3] = KeyPath;
  v3[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v4 = MEMORY[0x1E0DEE9D8];
  v47 = (_QWORD *)v0;
  *(_QWORD *)(v0 + 32) = sub_1B1AD9F50(0xD000000000000010, 0x80000001B2328850, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v2, 17, 0, (uint64_t)v3, KeyPath, 0, 0,
                           0,
                           MEMORY[0x1E0DEE9D8],
                           0,
                           (uint64_t)sub_1B1B03938);
  v5 = swift_getKeyPath();
  v6 = swift_getKeyPath();
  v7 = (_QWORD *)swift_allocObject();
  v7[4] = sub_1B1B030F8;
  v7[5] = v5;
  v7[2] = sub_1B1B03128;
  v7[3] = v5;
  v7[6] = v5;
  swift_allocObject();
  swift_retain_n();
  *(_QWORD *)(v0 + 40) = sub_1B1AD9F50(0x65727574786574, 0xE700000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v6, 8, 0, (uint64_t)v7, v5, 0, 0,
                           0,
                           v4,
                           0,
                           (uint64_t)sub_1B1B03938);
  v8 = swift_getKeyPath();
  v9 = swift_getKeyPath();
  v10 = swift_getKeyPath();
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4B8140, MEMORY[0x1E0DEDC60], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v11 = (_QWORD *)swift_allocObject();
  v11[4] = sub_1B1B03148;
  v11[5] = v10;
  v11[2] = sub_1B1B03178;
  v11[3] = v10;
  v11[6] = v10;
  swift_allocObject();
  swift_retain_n();
  v12 = MEMORY[0x1E0DEE9D8];
  v13 = sub_1B1ADBDA8(0x646F4D646E656C62, 0xEE007865646E4965, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v11, v10, 0, 0,
          0,
          MEMORY[0x1E0DEE9D8],
          0,
          (uint64_t)sub_1B1B03870);
  sub_1B1A02758(0, &qword_1ED4B80C0, (uint64_t)&type metadata for BlendMode, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v14 = (_QWORD *)swift_allocObject();
  v14[4] = sub_1B1B03198;
  v14[5] = v8;
  v14[2] = sub_1B1B031C8;
  v14[3] = v8;
  v14[6] = v8;
  swift_allocObject();
  swift_retain_n();
  v15 = sub_1B1ADA314(0x646F4D646E656C62, 0xE900000000000065, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v9, 1, 0, (uint64_t)v14, v8, 0, 0,
          0,
          v12,
          v13,
          (uint64_t)sub_1B1B03778);
  v16 = (_QWORD *)v0;
  *(_QWORD *)(v0 + 48) = v15;
  v17 = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F8, MEMORY[0x1E0DEB188], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v18 = (_QWORD *)swift_allocObject();
  v18[4] = sub_1B1B031E8;
  v18[5] = v17;
  v18[2] = sub_1B1B03218;
  v18[3] = v17;
  v18[6] = v17;
  swift_allocObject();
  swift_retain_n();
  *(_QWORD *)(v0 + 56) = sub_1B1ADC904(0x685466666F747563, 0xEF646C6F68736572, 0xBFF0000000000000, 0, 0x3FF0000000000000, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v18, v17, 0, 0,
                           0,
                           v12,
                           0,
                           (uint64_t)sub_1B1B036B0);
  v19 = swift_getKeyPath();
  v20 = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F0, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v21 = (_QWORD *)swift_allocObject();
  v21[4] = sub_1B1B03238;
  v21[5] = v19;
  v21[2] = sub_1B1B03268;
  v21[3] = v19;
  v21[6] = v19;
  swift_allocObject();
  swift_retain_n();
  v16[8] = sub_1B1ADE580(0x676E69746867696CLL, 0xE800000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v20, 1, 0, (uint64_t)v21, v19, 0, 0,
             0,
             MEMORY[0x1E0DEE9D8],
             0,
             (uint64_t)sub_1B1B035E8);
  v22 = swift_getKeyPath();
  v23 = swift_getKeyPath();
  v24 = (_QWORD *)swift_allocObject();
  v24[4] = sub_1B1B03238;
  v24[5] = v22;
  v24[2] = sub_1B1B03268;
  v24[3] = v22;
  v24[6] = v22;
  swift_allocObject();
  swift_retain_n();
  v25 = MEMORY[0x1E0DEE9D8];
  v16[9] = sub_1B1ADE580(0x72616C7563657073, 0xE800000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v23, 1, 0, (uint64_t)v24, v22, 0, 0,
             0,
             MEMORY[0x1E0DEE9D8],
             0,
             (uint64_t)sub_1B1B035E8);
  v26 = swift_getKeyPath();
  v27 = swift_getKeyPath();
  v28 = (_QWORD *)swift_allocObject();
  v28[4] = sub_1B1B03148;
  v28[5] = v27;
  v28[2] = sub_1B1B03178;
  v28[3] = v27;
  v28[6] = v27;
  swift_allocObject();
  swift_retain_n();
  v29 = sub_1B1ADBDA8(0x65646F4D74726F73, 0xED00007865646E49, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v28, v27, 0, 0,
          0,
          v25,
          0,
          (uint64_t)sub_1B1B03870);
  sub_1B1A02758(0, &qword_1ED4B8080, (uint64_t)&type metadata for ParticleSortMode, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v30 = (_QWORD *)swift_allocObject();
  v30[4] = sub_1B1B03288;
  v30[5] = v26;
  v30[2] = sub_1B1B032B8;
  v30[3] = v26;
  v30[6] = v26;
  swift_allocObject();
  swift_retain_n();
  v16[10] = sub_1B1AD0AA8(0x65646F4D74726F73, 0xE800000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v30, v26, 0, 0,
              0,
              v25,
              v29,
              (uint64_t)sub_1B1B03520);
  v31 = swift_getKeyPath();
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4B8178, MEMORY[0x1E0DEE0F8], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v32 = (_QWORD *)swift_allocObject();
  v32[4] = sub_1B1B032D8;
  v32[5] = v31;
  v32[2] = sub_1B1B03308;
  v32[3] = v31;
  v32[6] = v31;
  swift_allocObject();
  swift_retain_n();
  v33 = MEMORY[0x1E0DEE9D8];
  v16[11] = sub_1B1AD7CEC(0x647265764F78616DLL, 0xEB00000000776172, 0x3FF0000000000000, 0, 0x4070000000000000, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v32, v31, 0, 0,
              4,
              MEMORY[0x1E0DEE9D8],
              0,
              (uint64_t)sub_1B1B03440);
  v34 = swift_getKeyPath();
  v35 = swift_getKeyPath();
  v36 = swift_getKeyPath();
  v37 = (_QWORD *)swift_allocObject();
  v37[4] = sub_1B1B03148;
  v37[5] = v36;
  v37[2] = sub_1B1B03178;
  v37[3] = v36;
  v37[6] = v36;
  swift_allocObject();
  swift_retain_n();
  v38 = sub_1B1ADBDA8(0xD000000000000012, 0x80000001B232E1F0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v37, v36, 0, 0,
          0,
          v33,
          0,
          (uint64_t)sub_1B1B03870);
  sub_1B1A02758(0, &qword_1ED4B80A8, (uint64_t)&type metadata for ParticleAnimationMode, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v39 = (_QWORD *)swift_allocObject();
  v39[4] = sub_1B1B03328;
  v39[5] = v34;
  v39[2] = sub_1B1B03358;
  v39[3] = v34;
  v39[6] = v34;
  swift_allocObject();
  swift_retain_n();
  v47[12] = sub_1B1AD0E6C(0x6F6974616D696E61, 0xED000065646F4D6ELL, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v35, 1, 0, (uint64_t)v39, v34, 0, 0,
              0,
              v33,
              v38,
              (uint64_t)sub_1B1B03378);
  v40 = swift_getKeyPath();
  v41 = swift_getKeyPath();
  v42 = (_QWORD *)swift_allocObject();
  v42[4] = sub_1B1B03238;
  v42[5] = v40;
  v42[2] = sub_1B1B03268;
  v42[3] = v40;
  v42[6] = v40;
  swift_allocObject();
  swift_retain_n();
  v47[13] = sub_1B1ADE580(0xD000000000000017, 0x80000001B2329C50, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v41, 1, 0, (uint64_t)v42, v40, 0, 0,
              0,
              v33,
              0,
              (uint64_t)sub_1B1B035E8);
  v43 = swift_getKeyPath();
  v44 = swift_getKeyPath();
  v45 = (_QWORD *)swift_allocObject();
  v45[4] = sub_1B1B031E8;
  v45[5] = v43;
  v45[2] = sub_1B1B03218;
  v45[3] = v43;
  v45[6] = v43;
  swift_allocObject();
  swift_retain_n();
  v47[14] = sub_1B1ADC904(0x7473694474666F73, 0xEC00000065636E61, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, v44, 1, 0, (uint64_t)v45, v43, 0, 0,
              0,
              v33,
              0,
              (uint64_t)sub_1B1B036B0);
  sub_1B2228AD0();
  return v47;
}

_QWORD *sub_1B1A63D60()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v47;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E4B0;
  KeyPath = swift_getKeyPath();
  v2 = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B8040, (uint64_t)&type metadata for Entity, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v3 = (_QWORD *)swift_allocObject();
  v3[4] = sub_1B1B03EBC;
  v3[5] = KeyPath;
  v3[2] = sub_1B1B03EEC;
  v3[3] = KeyPath;
  v3[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v4 = MEMORY[0x1E0DEE9D8];
  v47 = (_QWORD *)v0;
  *(_QWORD *)(v0 + 32) = sub_1B1AD9F50(0xD000000000000010, 0x80000001B2328850, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v2, 17, 0, (uint64_t)v3, KeyPath, 0, 0,
                           0,
                           MEMORY[0x1E0DEE9D8],
                           0,
                           (uint64_t)sub_1B1B045B4);
  v5 = swift_getKeyPath();
  v6 = swift_getKeyPath();
  v7 = (_QWORD *)swift_allocObject();
  v7[4] = sub_1B1B03EBC;
  v7[5] = v5;
  v7[2] = sub_1B1B03EEC;
  v7[3] = v5;
  v7[6] = v5;
  swift_allocObject();
  swift_retain_n();
  *(_QWORD *)(v0 + 40) = sub_1B1AD9F50(0x65727574786574, 0xE700000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v6, 8, 0, (uint64_t)v7, v5, 0, 0,
                           0,
                           v4,
                           0,
                           (uint64_t)sub_1B1B045B4);
  v8 = swift_getKeyPath();
  v9 = swift_getKeyPath();
  v10 = swift_getKeyPath();
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4B8140, MEMORY[0x1E0DEDC60], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v11 = (_QWORD *)swift_allocObject();
  v11[4] = sub_1B1B03C60;
  v11[5] = v10;
  v11[2] = sub_1B1B03C90;
  v11[3] = v10;
  v11[6] = v10;
  swift_allocObject();
  swift_retain_n();
  v12 = MEMORY[0x1E0DEE9D8];
  v13 = sub_1B1ADBDA8(0x646F4D646E656C62, 0xEE007865646E4965, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v11, v10, 0, 0,
          0,
          MEMORY[0x1E0DEE9D8],
          0,
          (uint64_t)sub_1B1B03DF4);
  sub_1B1A02758(0, &qword_1ED4B80C0, (uint64_t)&type metadata for BlendMode, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v14 = (_QWORD *)swift_allocObject();
  v14[4] = sub_1B1B03F0C;
  v14[5] = v8;
  v14[2] = sub_1B1B03F3C;
  v14[3] = v8;
  v14[6] = v8;
  swift_allocObject();
  swift_retain_n();
  v15 = sub_1B1ADA314(0x646F4D646E656C62, 0xE900000000000065, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v9, 1, 0, (uint64_t)v14, v8, 0, 0,
          0,
          v12,
          v13,
          (uint64_t)sub_1B1B044EC);
  v16 = (_QWORD *)v0;
  *(_QWORD *)(v0 + 48) = v15;
  v17 = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F8, MEMORY[0x1E0DEB188], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v18 = (_QWORD *)swift_allocObject();
  v18[4] = sub_1B1B03F5C;
  v18[5] = v17;
  v18[2] = sub_1B1B03F8C;
  v18[3] = v17;
  v18[6] = v17;
  swift_allocObject();
  swift_retain_n();
  *(_QWORD *)(v0 + 56) = sub_1B1ADC904(0x685466666F747563, 0xEF646C6F68736572, 0xBFF0000000000000, 0, 0x3FF0000000000000, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v18, v17, 0, 0,
                           0,
                           v12,
                           0,
                           (uint64_t)sub_1B1B04424);
  v19 = swift_getKeyPath();
  v20 = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F0, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v21 = (_QWORD *)swift_allocObject();
  v21[4] = sub_1B1B03FAC;
  v21[5] = v19;
  v21[2] = sub_1B1B03FDC;
  v21[3] = v19;
  v21[6] = v19;
  swift_allocObject();
  swift_retain_n();
  v16[8] = sub_1B1ADE580(0x676E69746867696CLL, 0xE800000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v20, 1, 0, (uint64_t)v21, v19, 0, 0,
             0,
             MEMORY[0x1E0DEE9D8],
             0,
             (uint64_t)sub_1B1B0435C);
  v22 = swift_getKeyPath();
  v23 = swift_getKeyPath();
  v24 = (_QWORD *)swift_allocObject();
  v24[4] = sub_1B1B03FAC;
  v24[5] = v22;
  v24[2] = sub_1B1B03FDC;
  v24[3] = v22;
  v24[6] = v22;
  swift_allocObject();
  swift_retain_n();
  v25 = MEMORY[0x1E0DEE9D8];
  v16[9] = sub_1B1ADE580(0x72616C7563657073, 0xE800000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v23, 1, 0, (uint64_t)v24, v22, 0, 0,
             0,
             MEMORY[0x1E0DEE9D8],
             0,
             (uint64_t)sub_1B1B0435C);
  v26 = swift_getKeyPath();
  v27 = swift_getKeyPath();
  v28 = (_QWORD *)swift_allocObject();
  v28[4] = sub_1B1B03C60;
  v28[5] = v27;
  v28[2] = sub_1B1B03C90;
  v28[3] = v27;
  v28[6] = v27;
  swift_allocObject();
  swift_retain_n();
  v29 = sub_1B1ADBDA8(0x65646F4D74726F73, 0xED00007865646E49, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v28, v27, 0, 0,
          0,
          v25,
          0,
          (uint64_t)sub_1B1B03DF4);
  sub_1B1A02758(0, &qword_1ED4B8080, (uint64_t)&type metadata for ParticleSortMode, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v30 = (_QWORD *)swift_allocObject();
  v30[4] = sub_1B1B03FFC;
  v30[5] = v26;
  v30[2] = sub_1B1B0402C;
  v30[3] = v26;
  v30[6] = v26;
  swift_allocObject();
  swift_retain_n();
  v16[10] = sub_1B1AD0AA8(0x65646F4D74726F73, 0xE800000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v30, v26, 0, 0,
              0,
              v25,
              v29,
              (uint64_t)sub_1B1B04294);
  v31 = swift_getKeyPath();
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4B8178, MEMORY[0x1E0DEE0F8], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v32 = (_QWORD *)swift_allocObject();
  v32[4] = sub_1B1B0404C;
  v32[5] = v31;
  v32[2] = sub_1B1B0407C;
  v32[3] = v31;
  v32[6] = v31;
  swift_allocObject();
  swift_retain_n();
  v33 = MEMORY[0x1E0DEE9D8];
  v16[11] = sub_1B1AD7CEC(0x647265764F78616DLL, 0xEB00000000776172, 0x3FF0000000000000, 0, 0x4070000000000000, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v32, v31, 0, 0,
              4,
              MEMORY[0x1E0DEE9D8],
              0,
              (uint64_t)sub_1B1B041B4);
  v34 = swift_getKeyPath();
  v35 = swift_getKeyPath();
  v36 = swift_getKeyPath();
  v37 = (_QWORD *)swift_allocObject();
  v37[4] = sub_1B1B03C60;
  v37[5] = v36;
  v37[2] = sub_1B1B03C90;
  v37[3] = v36;
  v37[6] = v36;
  swift_allocObject();
  swift_retain_n();
  v38 = sub_1B1ADBDA8(0xD000000000000012, 0x80000001B232E1F0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v37, v36, 0, 0,
          0,
          v33,
          0,
          (uint64_t)sub_1B1B03DF4);
  sub_1B1A02758(0, &qword_1ED4B80A8, (uint64_t)&type metadata for ParticleAnimationMode, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v39 = (_QWORD *)swift_allocObject();
  v39[4] = sub_1B1B0409C;
  v39[5] = v34;
  v39[2] = sub_1B1B040CC;
  v39[3] = v34;
  v39[6] = v34;
  swift_allocObject();
  swift_retain_n();
  v47[12] = sub_1B1AD0E6C(0x6F6974616D696E61, 0xED000065646F4D6ELL, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v35, 1, 0, (uint64_t)v39, v34, 0, 0,
              0,
              v33,
              v38,
              (uint64_t)sub_1B1B040EC);
  v40 = swift_getKeyPath();
  v41 = swift_getKeyPath();
  v42 = (_QWORD *)swift_allocObject();
  v42[4] = sub_1B1B03FAC;
  v42[5] = v40;
  v42[2] = sub_1B1B03FDC;
  v42[3] = v40;
  v42[6] = v40;
  swift_allocObject();
  swift_retain_n();
  v47[13] = sub_1B1ADE580(0xD000000000000017, 0x80000001B2329C50, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v41, 1, 0, (uint64_t)v42, v40, 0, 0,
              0,
              v33,
              0,
              (uint64_t)sub_1B1B0435C);
  v43 = swift_getKeyPath();
  v44 = swift_getKeyPath();
  v45 = (_QWORD *)swift_allocObject();
  v45[4] = sub_1B1B03F5C;
  v45[5] = v43;
  v45[2] = sub_1B1B03F8C;
  v45[3] = v43;
  v45[6] = v43;
  swift_allocObject();
  swift_retain_n();
  v47[14] = sub_1B1ADC904(0x7473694474666F73, 0xEC00000065636E61, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, v44, 1, 0, (uint64_t)v45, v43, 0, 0,
              0,
              v33,
              0,
              (uint64_t)sub_1B1B04424);
  sub_1B2228AD0();
  return v47;
}

uint64_t sub_1B1A64C60(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(*(_QWORD *)(a2 + 8) + 32))();
  if ((result & 0x100000000) != 0)
    return result;
  else
    return 3;
}

uint64_t sub_1B1A64C8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t (*v5)(_BYTE *, _QWORD);
  _BYTE v7[32];

  v5 = (uint64_t (*)(_BYTE *, _QWORD))(*(uint64_t (**)(_BYTE *))(a3 + 112))(v7);
  if (a1 == 3)
  {
    if ((*(_BYTE *)(v4 + 4) & 1) != 0)
    {
      *(_DWORD *)v4 = 1056964608;
      *(_BYTE *)(v4 + 4) = 0;
    }
  }
  else
  {
    if (a1 == 2)
      *(_DWORD *)v4 = 2;
    else
      *(_DWORD *)v4 = a1 == 1;
    *(_BYTE *)(v4 + 4) = 1;
  }
  return v5(v7, 0);
}

uint64_t sub_1B1A64D20(uint64_t a1, uint64_t a2)
{
  return (*(char (**)(void))(*(_QWORD *)(a2 + 8) + 64))();
}

uint64_t sub_1B1A64D40(uint64_t result)
{
  uint64_t v1;
  char v2;

  v2 = result;
  if (result >= 7u)
    v2 = 7;
  *(_BYTE *)(v1 + 20) = v2;
  return result;
}

uint64_t sub_1B1A64D58(unsigned __int8 a1, uint64_t a2, uint64_t a3)
{
  char *v4;
  uint64_t (*v5)(_BYTE *, _QWORD);
  char v6;
  _BYTE v8[32];

  v5 = (uint64_t (*)(_BYTE *, _QWORD))(*(uint64_t (**)(_BYTE *))(a3 + 144))(v8);
  v6 = a1;
  if (a1 >= 7u)
    v6 = 7;
  *v4 = v6;
  return v5(v8, 0);
}

uint64_t sub_1B1A64DAC(uint64_t a1, uint64_t a2)
{
  return (*(char (**)(void))(a2 + 176))();
}

uint64_t sub_1B1A64DC8(unsigned __int8 a1, uint64_t a2, uint64_t a3)
{
  char *v4;
  uint64_t (*v5)(_BYTE *, _QWORD);
  char v6;
  _BYTE v8[32];

  v5 = (uint64_t (*)(_BYTE *, _QWORD))(*(uint64_t (**)(_BYTE *))(a3 + 192))(v8);
  v6 = a1;
  if (a1 >= 3u)
    v6 = 3;
  *v4 = v6;
  return v5(v8, 0);
}

uint64_t sub_1B1A64E1C()
{
  unint64_t v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  v0 = (unint64_t)sub_1B1A61F60();
  KeyPath = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F8, MEMORY[0x1E0DEB188], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = sub_1B1AFFBB8;
  v2[5] = KeyPath;
  v2[2] = sub_1B1AFFBE8;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v3 = MEMORY[0x1E0DEE9D8];
  sub_1B1ADC904(0x616353746E696F70, 0xEA0000000000656CLL, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v2, KeyPath, 0, 0,
    0,
    MEMORY[0x1E0DEE9D8],
    0,
    (uint64_t)sub_1B1AFFD38);
  swift_release();
  v4 = swift_getKeyPath();
  sub_1B1AE43E4(0);
  v5 = (_QWORD *)swift_allocObject();
  v5[4] = sub_1B1AFFC08;
  v5[5] = v4;
  v5[2] = sub_1B1AFFC38;
  v5[3] = v4;
  v5[6] = v4;
  swift_allocObject();
  swift_retain_n();
  sub_1B1AC8FDC(0x69536E6565726373, 0xEF65676E6152657ALL, 0, 0, 0, 1, 0x3FB999999999999ALL, 0, 0, 1, 1uLL, 0, 0, 1, 0, (uint64_t)v5, v4, 0, 0,
    0,
    v3,
    0);
  swift_release();
  if (v0 >> 62)
  {
    swift_bridgeObjectRetain_n();
    v6 = sub_1B22296AC();
    swift_bridgeObjectRelease();
  }
  else
  {
    v6 = *(_QWORD *)((v0 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
  }
  sub_1B1AB0B5C(v6 + 2, 1);
  sub_1B2228AD0();
  v7 = swift_retain();
  MEMORY[0x1B5E2064C](v7);
  if (*(_QWORD *)((v0 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v0 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
    sub_1B2228AF4();
  sub_1B2228B30();
  sub_1B2228AD0();
  v8 = swift_retain();
  MEMORY[0x1B5E2064C](v8);
  if (*(_QWORD *)((v0 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v0 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
    sub_1B2228AF4();
  sub_1B2228B30();
  sub_1B2228AD0();
  swift_bridgeObjectRelease();
  swift_release();
  result = swift_release();
  qword_1EEFD5268 = v0;
  return result;
}

uint64_t sub_1B1A65158()
{
  return 0x746E696F50;
}

uint64_t sub_1B1A6516C()
{
  return 128;
}

uint64_t sub_1B1A65174(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, &qword_1EEF57208);
}

uint64_t sub_1B1A65190(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, &qword_1EEF57208, (unint64_t *)&qword_1EEFD5268);
}

uint64_t sub_1B1A651BC(uint64_t a1)
{
  return sub_1B1A2262C(a1, &qword_1EEF57208, &qword_1EEFD5268);
}

uint64_t sub_1B1A651E8()
{
  uint64_t v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  uint64_t result;

  v0 = (uint64_t)sub_1B1A60160();
  KeyPath = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F8, MEMORY[0x1E0DEB188], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = sub_1B1B00DFC;
  v2[5] = KeyPath;
  v2[2] = sub_1B1B00E2C;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  sub_1B1ADC904(0x73656E6B63696874, 0xE900000000000073, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v2, KeyPath, 0, 0,
    0,
    MEMORY[0x1E0DEE9D8],
    0,
    (uint64_t)sub_1B1B00E4C);
  swift_release();
  swift_bridgeObjectRetain();
  v3 = swift_retain();
  MEMORY[0x1B5E2064C](v3);
  if (*(_QWORD *)((v0 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v0 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
    sub_1B2228AF4();
  sub_1B2228B30();
  sub_1B2228AD0();
  swift_bridgeObjectRelease();
  result = swift_release();
  qword_1EEFD5270 = v0;
  return result;
}

uint64_t sub_1B1A65390()
{
  return 1701734732;
}

uint64_t sub_1B1A653A0(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, qword_1EEF57210);
}

uint64_t sub_1B1A653BC(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, qword_1EEF57210, (unint64_t *)&qword_1EEFD5270);
}

uint64_t sub_1B1A653E8(uint64_t a1)
{
  return sub_1B1A2262C(a1, qword_1EEF57210, &qword_1EEFD5270);
}

BOOL sub_1B1A65414()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + 76) == 2;
}

uint64_t sub_1B1A65424()
{
  uint64_t inited;
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t result;
  _QWORD *v80;
  _QWORD *v81;

  v81 = sub_1B1A61060();
  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226E460;
  v1 = inited;
  v80 = (_QWORD *)inited;
  KeyPath = swift_getKeyPath();
  v3 = swift_getKeyPath();
  v4 = swift_getKeyPath();
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4B8140, MEMORY[0x1E0DEDC60], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v5 = (_QWORD *)swift_allocObject();
  v5[4] = sub_1B1B0170C;
  v5[5] = v4;
  v5[2] = sub_1B1B0173C;
  v5[3] = v4;
  v5[6] = v4;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v6 = MEMORY[0x1E0DEE9D8];
  v7 = sub_1B1ADBDA8(0x65646F4D6C6C7563, 0xED00007865646E49, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v5, v4, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0,
         (uint64_t)sub_1B1B0225C);
  swift_release();
  sub_1B1791524(0, (unint64_t *)&unk_1ED4B8120, (uint64_t (*)(uint64_t))type metadata accessor for MTLCullMode, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for EntityGetSet);
  v8 = (_QWORD *)swift_allocObject();
  v8[4] = sub_1B1B0175C;
  v8[5] = KeyPath;
  v8[2] = sub_1B1B0178C;
  v8[3] = KeyPath;
  v8[6] = KeyPath;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  swift_retain();
  v9 = sub_1B1AB67D0(0x65646F4D6C6C7563, 0xE800000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v3, 1, 0, (uint64_t)v8, KeyPath, 0, 0,
         0,
         v6,
         v7,
         (uint64_t (*)(_QWORD))type metadata accessor for MTLCullMode,
         (uint64_t)sub_1B1B021C0);
  swift_release();
  swift_release();
  swift_release();
  *(_QWORD *)(v1 + 32) = v9;
  v10 = swift_getKeyPath();
  v11 = swift_getKeyPath();
  v12 = (_QWORD *)swift_allocObject();
  v12[4] = sub_1B1B0170C;
  v12[5] = v11;
  v12[2] = sub_1B1B0173C;
  v12[3] = v11;
  v12[6] = v11;
  swift_allocObject();
  swift_retain_n();
  v13 = MEMORY[0x1E0DEE9D8];
  v14 = sub_1B1ADBDA8(0x646E496570616873, 0xEA00000000007865, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v12, v11, 0, 0,
          0,
          MEMORY[0x1E0DEE9D8],
          0,
          (uint64_t)sub_1B1B0225C);
  swift_release();
  sub_1B1A02758(0, &qword_1ED4B80A0, (uint64_t)&type metadata for ParticleQuadRenderer.Shape, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v15 = (_QWORD *)swift_allocObject();
  v15[4] = sub_1B1B017DC;
  v15[5] = v10;
  v15[2] = sub_1B1B0180C;
  v15[3] = v10;
  v15[6] = v10;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v16 = sub_1B1AC69F0(0x6570616873, 0xE500000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v15, v10, 0, 0,
          0,
          v13,
          v14);
  swift_release();
  swift_release();
  v80[5] = v16;
  v17 = swift_getKeyPath();
  v18 = swift_getKeyPath();
  v19 = (_QWORD *)swift_allocObject();
  v19[4] = sub_1B1B0170C;
  v19[5] = v18;
  v19[2] = sub_1B1B0173C;
  v19[3] = v18;
  v19[6] = v18;
  swift_allocObject();
  swift_retain_n();
  v20 = sub_1B1ADBDA8(0xD000000000000010, 0x80000001B232CBC0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v19, v18, 0, 0,
          0,
          v13,
          0,
          (uint64_t)sub_1B1B0225C);
  swift_release();
  sub_1B1A02758(0, &qword_1ED4B80B0, (uint64_t)&type metadata for ParticleOrientationMode, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v21 = (_QWORD *)swift_allocObject();
  v21[4] = sub_1B1B0185C;
  v21[5] = v17;
  v21[2] = sub_1B1B0188C;
  v21[3] = v17;
  v21[6] = v17;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v22 = sub_1B1ACA3E8(0x7461746E6569726FLL, 0xEB000000006E6F69, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v21, v17, 0, 0,
          0,
          v13,
          v20,
          (uint64_t)sub_1B1B01FE8);
  swift_release();
  swift_release();
  v80[6] = v22;
  v23 = swift_getKeyPath();
  v24 = swift_getKeyPath();
  sub_1B1AE015C(0);
  v25 = (_QWORD *)swift_allocObject();
  v25[4] = sub_1B1B018C0;
  v25[5] = v23;
  v25[2] = sub_1B1B018F8;
  v25[3] = v23;
  v25[6] = v23;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v26 = sub_1B1AC6DAC(0x736978417075, 0xE600000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v24, 1, 0, (uint64_t)v25, v23, 0, 0,
          0,
          v13,
          0);
  swift_release();
  swift_release();
  v80[7] = v26;
  v27 = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F0, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v28 = (_QWORD *)swift_allocObject();
  v28[4] = sub_1B1B01918;
  v28[5] = v27;
  v28[2] = sub_1B1B01948;
  v28[3] = v27;
  v28[6] = v27;
  swift_allocObject();
  swift_retain_n();
  v29 = MEMORY[0x1E0DEE9D8];
  v30 = sub_1B1ADE580(0xD00000000000001DLL, 0x80000001B232E210, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v28, v27, 0, 0,
          0,
          MEMORY[0x1E0DEE9D8],
          0,
          (uint64_t)sub_1B1B01E1C);
  swift_release();
  v80[8] = v30;
  v31 = swift_getKeyPath();
  v32 = (_QWORD *)swift_allocObject();
  v32[4] = sub_1B1B01918;
  v32[5] = v31;
  v32[2] = sub_1B1B01948;
  v32[3] = v31;
  v32[6] = v31;
  swift_allocObject();
  swift_retain_n();
  v33 = sub_1B1ADE580(0xD000000000000013, 0x80000001B2329D50, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v32, v31, 0, 0,
          0,
          v29,
          0,
          (uint64_t)sub_1B1B01E1C);
  swift_release();
  v80[9] = v33;
  v34 = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F8, MEMORY[0x1E0DEB188], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v35 = (_QWORD *)swift_allocObject();
  v35[4] = sub_1B1B01968;
  v35[5] = v34;
  v35[2] = sub_1B1B01998;
  v35[3] = v34;
  v35[6] = v34;
  swift_allocObject();
  swift_retain_n();
  v36 = sub_1B1ADC904(0x4668637465727473, 0xED0000726F746361, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v35, v34, 0, 0,
          0,
          v29,
          0,
          (uint64_t)sub_1B1B01D5C);
  swift_release();
  v80[10] = v36;
  v37 = swift_getKeyPath();
  v38 = (_QWORD *)swift_allocObject();
  v38[4] = sub_1B1B01968;
  v38[5] = v37;
  v38[2] = sub_1B1B01998;
  v38[3] = v37;
  v38[6] = v37;
  swift_allocObject();
  swift_retain_n();
  v39 = sub_1B1ADC904(0x7275746176727563, 0xE900000000000065, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v38, v37, 0, 0,
          0,
          v29,
          0,
          (uint64_t)sub_1B1B01D5C);
  swift_release();
  v80[11] = v39;
  v40 = swift_getKeyPath();
  v41 = swift_getKeyPath();
  v42 = (_QWORD *)swift_allocObject();
  v42[4] = sub_1B1B01968;
  v42[5] = v40;
  v42[2] = sub_1B1B01998;
  v42[3] = v40;
  v42[6] = v40;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v43 = sub_1B1ADC904(0x73656E6B63696874, 0xE900000000000073, 0, 0, 0x3FF0000000000000, 0, 0, 1, 0, 1, 0, 1, v41, 1, 0, (uint64_t)v42, v40, 0, 0,
          0,
          v29,
          0,
          (uint64_t)sub_1B1B01D5C);
  swift_release();
  swift_release();
  v80[12] = v43;
  v44 = swift_getKeyPath();
  sub_1B1AE1F14(0);
  v45 = (_QWORD *)swift_allocObject();
  v45[4] = sub_1B1B019B8;
  v45[5] = v44;
  v45[2] = sub_1B1B019E8;
  v45[3] = v44;
  v45[6] = v44;
  swift_allocObject();
  swift_retain_n();
  v46 = sub_1B1AC7188(0x5365727574786574, 0xEC000000656C6163, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v45, v44, 0, 0,
          0,
          v29,
          0);
  swift_release();
  v80[13] = v46;
  v47 = swift_getKeyPath();
  v48 = (_QWORD *)swift_allocObject();
  v48[4] = sub_1B1B019B8;
  v48[5] = v47;
  v48[2] = sub_1B1B019E8;
  v48[3] = v47;
  v48[6] = v47;
  swift_allocObject();
  swift_retain_n();
  v49 = sub_1B1AC7188(0x4265727574786574, 0xEB00000000736169, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v48, v47, 0, 0,
          0,
          v29,
          0);
  swift_release();
  v80[14] = v49;
  v50 = swift_getKeyPath();
  v51 = swift_getKeyPath();
  v52 = (_QWORD *)swift_allocObject();
  v52[4] = sub_1B1B01918;
  v52[5] = v50;
  v52[2] = sub_1B1B01948;
  v52[3] = v50;
  v52[6] = v50;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v53 = sub_1B1ADE580(0xD000000000000018, 0x80000001B2329CA0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v51, 1, 0, (uint64_t)v52, v50, 0, 0,
          0,
          v29,
          0,
          (uint64_t)sub_1B1B01E1C);
  swift_release();
  swift_release();
  v80[15] = v53;
  v54 = swift_getKeyPath();
  v55 = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B8040, (uint64_t)&type metadata for Entity, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v56 = (_QWORD *)swift_allocObject();
  v56[4] = sub_1B1B01A08;
  v56[5] = v54;
  v56[2] = sub_1B1B01A38;
  v56[3] = v54;
  v56[6] = v54;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v57 = sub_1B1AD9F50(0xD000000000000014, 0x80000001B232E230, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v55, 8, 0, (uint64_t)v56, v54, 0, 0,
          0,
          v29,
          0,
          (uint64_t)sub_1B1B01B98);
  swift_release();
  swift_release();
  v80[16] = v57;
  v58 = swift_getKeyPath();
  v59 = swift_getKeyPath();
  v60 = (_QWORD *)swift_allocObject();
  v60[4] = sub_1B1B01A08;
  v60[5] = v58;
  v60[2] = sub_1B1B01A38;
  v60[3] = v58;
  v60[6] = v58;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v61 = sub_1B1AD9F50(0xD000000000000014, 0x80000001B232E250, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v59, 8, 0, (uint64_t)v60, v58, 0, 0,
          0,
          v29,
          0,
          (uint64_t)sub_1B1B01B98);
  swift_release();
  swift_release();
  v80[17] = v61;
  v62 = swift_getKeyPath();
  v63 = swift_getKeyPath();
  v64 = (_QWORD *)swift_allocObject();
  v64[4] = sub_1B1B01918;
  v64[5] = v62;
  v64[2] = sub_1B1B01948;
  v64[3] = v62;
  v64[6] = v62;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v65 = MEMORY[0x1E0DEE9D8];
  v66 = sub_1B1ADE580(0xD000000000000015, 0x80000001B2329D00, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v63, 1, 0, (uint64_t)v64, v62, 0, 0,
          0,
          MEMORY[0x1E0DEE9D8],
          0,
          (uint64_t)sub_1B1B01E1C);
  swift_release();
  swift_release();
  v80[18] = v66;
  v67 = swift_getKeyPath();
  v68 = swift_getKeyPath();
  v69 = (_QWORD *)swift_allocObject();
  v69[4] = sub_1B1B01918;
  v69[5] = v67;
  v69[2] = sub_1B1B01948;
  v69[3] = v67;
  v69[6] = v67;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v70 = sub_1B1ADE580(0xD000000000000019, 0x80000001B2329D20, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v68, 1, 0, (uint64_t)v69, v67, 0, 0,
          0,
          v65,
          0,
          (uint64_t)sub_1B1B01E1C);
  swift_release();
  swift_release();
  v80[19] = v70;
  v71 = swift_getKeyPath();
  v72 = swift_getKeyPath();
  v73 = swift_getKeyPath();
  v74 = (_QWORD *)swift_allocObject();
  v74[4] = sub_1B1B0170C;
  v74[5] = v73;
  v74[2] = sub_1B1B0173C;
  v74[3] = v73;
  v74[6] = v73;
  swift_allocObject();
  swift_retain_n();
  v75 = sub_1B1ADBDA8(0x496C656E6E616863, 0xEC0000007865646ELL, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v74, v73, 0, 0,
          0,
          v65,
          0,
          (uint64_t)sub_1B1B0225C);
  swift_release();
  sub_1B1A02758(0, &qword_1ED4B8078, (uint64_t)&type metadata for TextureChannel, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v76 = (_QWORD *)swift_allocObject();
  v76[4] = sub_1B1B01A88;
  v76[5] = v71;
  v76[2] = sub_1B1B01AB8;
  v76[3] = v71;
  v76[6] = v71;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  swift_retain();
  v77 = sub_1B1AD3C60(0x6C656E6E616863, 0xE700000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v72, 1, 0, (uint64_t)v76, v71, 0, 0,
          0,
          v65,
          v75,
          (uint64_t)sub_1B1B01AD8);
  swift_release();
  swift_release();
  swift_release();
  v80[20] = v77;
  sub_1B2228AD0();
  swift_bridgeObjectRetain();
  v78 = swift_bridgeObjectRetain();
  sub_1B19F4BEC(v78);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  qword_1ED4D0D80 = (uint64_t)v81;
  return result;
}

uint64_t sub_1B1A66964()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

_QWORD *sub_1B1A6696C(_QWORD *result, uint64_t a2)
{
  if ((*result & 0x8000000000000000) != 0)
  {
    result = (_QWORD *)sub_1B222967C();
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = *result;
  }
  return result;
}

uint64_t sub_1B1A669D8()
{
  uint64_t v0;

  return *(char *)(v0 + 96);
}

uint64_t sub_1B1A669E0(uint64_t result)
{
  uint64_t v1;
  char v2;

  v2 = result;
  if (result >= 3u)
    v2 = 3;
  *(_BYTE *)(v1 + 96) = v2;
  return result;
}

uint64_t sub_1B1A669F8()
{
  uint64_t v0;

  return *(char *)(v0 + 76);
}

uint64_t sub_1B1A66A00(uint64_t result)
{
  uint64_t v1;
  char v2;

  v2 = result;
  if (result >= 5u)
    v2 = 5;
  *(_BYTE *)(v1 + 76) = v2;
  return result;
}

uint64_t sub_1B1A66A18()
{
  uint64_t v0;

  return *(char *)(v0 + 138);
}

uint64_t sub_1B1A66A20(uint64_t result)
{
  uint64_t v1;
  char v2;

  v2 = result;
  if (result >= 5u)
    v2 = 5;
  *(_BYTE *)(v1 + 138) = v2;
  return result;
}

uint64_t sub_1B1A66A38()
{
  return 1684108625;
}

uint64_t sub_1B1A66A48()
{
  if (qword_1ED4B95D8 != -1)
    swift_once();
  return swift_bridgeObjectRetain();
}

uint64_t sub_1B1A66A88(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, &qword_1ED4B95D8);
}

uint64_t sub_1B1A66AA4(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, &qword_1ED4B95D8, (unint64_t *)&qword_1ED4D0D80);
}

uint64_t sub_1B1A66AD0(uint64_t a1)
{
  return sub_1B1A2262C(a1, &qword_1ED4B95D8, &qword_1ED4D0D80);
}

_QWORD *sub_1B1A66AFC()
{
  _QWORD *result;

  result = sub_1B1A5F260();
  qword_1EEFD5278 = (uint64_t)result;
  return result;
}

uint64_t sub_1B1A66B18()
{
  return 7892802;
}

uint64_t sub_1B1A66B28(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, &qword_1EEF57220);
}

uint64_t sub_1B1A66B44(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, &qword_1EEF57220, (unint64_t *)&qword_1EEFD5278);
}

uint64_t sub_1B1A66B70(uint64_t a1)
{
  return sub_1B1A2262C(a1, &qword_1EEF57220, &qword_1EEFD5278);
}

_QWORD *sub_1B1A66B9C()
{
  _QWORD *result;

  result = sub_1B1A62E60();
  qword_1EEFD5280 = (uint64_t)result;
  return result;
}

uint64_t sub_1B1A66BB8()
{
  return 0x657265687053;
}

uint64_t sub_1B1A66BCC(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, &qword_1EEF57228);
}

uint64_t sub_1B1A66BE8(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, &qword_1EEF57228, (unint64_t *)&qword_1EEFD5280);
}

uint64_t sub_1B1A66C14(uint64_t a1)
{
  return sub_1B1A2262C(a1, &qword_1EEF57228, &qword_1EEFD5280);
}

uint64_t sub_1B1A66C40()
{
  uint64_t v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E530;
  KeyPath = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F8, MEMORY[0x1E0DEB188], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = sub_1B1B03A00;
  v2[5] = KeyPath;
  v2[2] = sub_1B1B03A30;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v3 = MEMORY[0x1E0DEE9D8];
  v4 = sub_1B1ADC904(0x656E68746F6F6D73, 0xEA00000000007373, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v2, KeyPath, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0,
         (uint64_t)sub_1B1B03A50);
  swift_release();
  *(_QWORD *)(v0 + 32) = v4;
  v5 = swift_getKeyPath();
  v6 = (_QWORD *)swift_allocObject();
  v6[4] = sub_1B1B03A00;
  v6[5] = v5;
  v6[2] = sub_1B1B03A30;
  v6[3] = v5;
  v6[6] = v5;
  swift_allocObject();
  swift_retain_n();
  v7 = sub_1B1ADC904(0xD000000000000012, 0x80000001B232CE90, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v6, v5, 0, 0,
         0,
         v3,
         0,
         (uint64_t)sub_1B1B03A50);
  swift_release();
  *(_QWORD *)(v0 + 40) = v7;
  v8 = swift_getKeyPath();
  v9 = (_QWORD *)swift_allocObject();
  v9[4] = sub_1B1B03A00;
  v9[5] = v8;
  v9[2] = sub_1B1B03A30;
  v9[3] = v8;
  v9[6] = v8;
  swift_allocObject();
  swift_retain_n();
  v10 = sub_1B1ADC904(0xD000000000000011, 0x80000001B232E270, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v9, v8, 0, 0,
          0,
          v3,
          0,
          (uint64_t)sub_1B1B03A50);
  swift_release();
  *(_QWORD *)(v0 + 48) = v10;
  v11 = swift_getKeyPath();
  v12 = (_QWORD *)swift_allocObject();
  v12[4] = sub_1B1B03A00;
  v12[5] = v11;
  v12[2] = sub_1B1B03A30;
  v12[3] = v11;
  v12[6] = v11;
  swift_allocObject();
  swift_retain_n();
  v13 = sub_1B1ADC904(0xD000000000000010, 0x80000001B232E290, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v12, v11, 0, 0,
          0,
          v3,
          0,
          (uint64_t)sub_1B1B03A50);
  swift_release();
  *(_QWORD *)(v0 + 56) = v13;
  v14 = swift_getKeyPath();
  v15 = (_QWORD *)swift_allocObject();
  v15[4] = sub_1B1B03A00;
  v15[5] = v14;
  v15[2] = sub_1B1B03A30;
  v15[3] = v14;
  v15[6] = v14;
  swift_allocObject();
  swift_retain_n();
  v16 = sub_1B1ADC904(0xD000000000000015, 0x80000001B232E2B0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v15, v14, 0, 0,
          0,
          v3,
          0,
          (uint64_t)sub_1B1B03A50);
  swift_release();
  *(_QWORD *)(v0 + 64) = v16;
  v17 = swift_getKeyPath();
  v18 = (_QWORD *)swift_allocObject();
  v18[4] = sub_1B1B03A00;
  v18[5] = v17;
  v18[2] = sub_1B1B03A30;
  v18[3] = v17;
  v18[6] = v17;
  swift_allocObject();
  swift_retain_n();
  v19 = sub_1B1ADC904(0xD000000000000011, 0x80000001B232E2D0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v18, v17, 0, 0,
          0,
          v3,
          0,
          (uint64_t)sub_1B1B03A50);
  swift_release();
  *(_QWORD *)(v0 + 72) = v19;
  result = sub_1B2228AD0();
  qword_1EEFD5288 = v0;
  return result;
}

uint64_t sub_1B1A67208()
{
  return 0x65636166727553;
}

uint64_t sub_1B1A67220(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, &qword_1EEF57230);
}

uint64_t sub_1B1A6723C(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, &qword_1EEF57230, (unint64_t *)&qword_1EEFD5288);
}

uint64_t sub_1B1A67268(uint64_t a1)
{
  return sub_1B1A2262C(a1, &qword_1EEF57230, &qword_1EEFD5288);
}

uint64_t sub_1B1A67294()
{
  uint64_t v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E470;
  KeyPath = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F8, MEMORY[0x1E0DEB188], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = sub_1B1B03B18;
  v2[5] = KeyPath;
  v2[2] = sub_1B1B03B48;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v3 = MEMORY[0x1E0DEE9D8];
  v4 = sub_1B1ADC904(0x656E68746F6F6D73, 0xEA00000000007373, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v2, KeyPath, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0,
         (uint64_t)sub_1B1B03B68);
  swift_release();
  *(_QWORD *)(v0 + 32) = v4;
  v5 = swift_getKeyPath();
  v6 = (_QWORD *)swift_allocObject();
  v6[4] = sub_1B1B03B18;
  v6[5] = v5;
  v6[2] = sub_1B1B03B48;
  v6[3] = v5;
  v6[6] = v5;
  swift_allocObject();
  swift_retain_n();
  v7 = sub_1B1ADC904(0xD000000000000015, 0x80000001B232E2B0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v6, v5, 0, 0,
         0,
         v3,
         0,
         (uint64_t)sub_1B1B03B68);
  swift_release();
  *(_QWORD *)(v0 + 40) = v7;
  v8 = swift_getKeyPath();
  v9 = (_QWORD *)swift_allocObject();
  v9[4] = sub_1B1B03B18;
  v9[5] = v8;
  v9[2] = sub_1B1B03B48;
  v9[3] = v8;
  v9[6] = v8;
  swift_allocObject();
  swift_retain_n();
  v10 = sub_1B1ADC904(0xD000000000000011, 0x80000001B232E2D0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v9, v8, 0, 0,
          0,
          v3,
          0,
          (uint64_t)sub_1B1B03B68);
  swift_release();
  *(_QWORD *)(v0 + 48) = v10;
  result = sub_1B2228AD0();
  qword_1EEFD5290 = v0;
  return result;
}

uint64_t sub_1B1A675E8()
{
  return 0x7274656D756C6F56;
}

uint64_t sub_1B1A67604(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, &qword_1EEF57238);
}

uint64_t sub_1B1A67620(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, &qword_1EEF57238, (unint64_t *)&qword_1EEFD5290);
}

uint64_t sub_1B1A6764C(uint64_t a1)
{
  return sub_1B1A2262C(a1, &qword_1EEF57238, &qword_1EEFD5290);
}

uint64_t sub_1B1A67678()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t result;

  v0 = (uint64_t)sub_1B1A63D60();
  KeyPath = swift_getKeyPath();
  v2 = swift_getKeyPath();
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4B8140, MEMORY[0x1E0DEDC60], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v3 = (_QWORD *)swift_allocObject();
  v3[4] = sub_1B1B03C60;
  v3[5] = v2;
  v3[2] = sub_1B1B03C90;
  v3[3] = v2;
  v3[6] = v2;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v4 = MEMORY[0x1E0DEE9D8];
  v5 = sub_1B1ADBDA8(0x646E496570616873, 0xEA00000000007865, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v3, v2, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0,
         (uint64_t)sub_1B1B03DF4);
  swift_release();
  sub_1B1A02758(0, &qword_1EEF5A3B0, (uint64_t)&type metadata for ParticlePrimitiveRenderer.Shape, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v6 = (_QWORD *)swift_allocObject();
  v6[4] = sub_1B1B03CB0;
  v6[5] = KeyPath;
  v6[2] = sub_1B1B03CE0;
  v6[3] = KeyPath;
  v6[6] = KeyPath;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  sub_1B1AD1230(0x6570616873, 0xE500000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v6, KeyPath, 0, 0,
    0,
    v4,
    v5);
  swift_release();
  swift_release();
  swift_bridgeObjectRetain();
  v7 = swift_retain();
  MEMORY[0x1B5E2064C](v7);
  if (*(_QWORD *)((v0 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v0 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
    sub_1B2228AF4();
  sub_1B2228B30();
  sub_1B2228AD0();
  swift_bridgeObjectRelease();
  result = swift_release();
  qword_1EEFD5298 = v0;
  return result;
}

uint64_t sub_1B1A6792C(uint64_t result)
{
  uint64_t v1;
  char v2;

  v2 = result;
  if (result >= 5u)
    v2 = 5;
  *(_BYTE *)(v1 + 36) = v2;
  return result;
}

uint64_t sub_1B1A67944()
{
  return 0x766974696D697250;
}

uint64_t sub_1B1A67960(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, &qword_1EEF57240);
}

uint64_t sub_1B1A6797C(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, &qword_1EEF57240, (unint64_t *)&qword_1EEFD5298);
}

uint64_t sub_1B1A679A8(uint64_t a1)
{
  return sub_1B1A2262C(a1, &qword_1EEF57240, &qword_1EEFD5298);
}

uint64_t sub_1B1A679D4()
{
  uint64_t v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E450;
  KeyPath = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F8, MEMORY[0x1E0DEB188], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = sub_1B1B0467C;
  v2[5] = KeyPath;
  v2[2] = sub_1B1B046AC;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v3 = MEMORY[0x1E0DEE9D8];
  v4 = sub_1B1ADC904(0x656C616373, 0xE500000000000000, 0, 0, 0, 1, 0x3F847AE147AE147BLL, 0, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v2, KeyPath, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0,
         (uint64_t)sub_1B1B046CC);
  swift_release();
  *(_QWORD *)(v0 + 32) = v4;
  v5 = swift_getKeyPath();
  v6 = (_QWORD *)swift_allocObject();
  v6[4] = sub_1B1B0467C;
  v6[5] = v5;
  v6[2] = sub_1B1B046AC;
  v6[3] = v5;
  v6[6] = v5;
  swift_allocObject();
  swift_retain_n();
  v7 = sub_1B1ADC904(0x7469736E65746E69, 0xE900000000000079, 0, 0, 0, 1, 0x3F847AE147AE147BLL, 0, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v6, v5, 0, 0,
         0,
         v3,
         0,
         (uint64_t)sub_1B1B046CC);
  swift_release();
  *(_QWORD *)(v0 + 40) = v7;
  result = sub_1B2228AD0();
  qword_1EEFD52A0 = v0;
  return result;
}

unint64_t sub_1B1A67C60()
{
  return 0xD000000000000018;
}

uint64_t sub_1B1A67C7C(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, &qword_1EEF57248);
}

uint64_t sub_1B1A67C98(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, &qword_1EEF57248, (unint64_t *)&qword_1EEFD52A0);
}

uint64_t sub_1B1A67CC4(uint64_t a1)
{
  return sub_1B1A2262C(a1, &qword_1EEF57248, &qword_1EEFD52A0);
}

uint64_t sub_1B1A67CF0()
{
  uint64_t v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E450;
  KeyPath = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F8, MEMORY[0x1E0DEB188], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = sub_1B1B04794;
  v2[5] = KeyPath;
  v2[2] = sub_1B1B047C4;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v3 = MEMORY[0x1E0DEE9D8];
  v4 = sub_1B1ADC904(0x656C616373, 0xE500000000000000, 0, 0, 0, 1, 0x3F847AE147AE147BLL, 0, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v2, KeyPath, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0,
         (uint64_t)sub_1B1B047E4);
  swift_release();
  *(_QWORD *)(v0 + 32) = v4;
  v5 = swift_getKeyPath();
  v6 = (_QWORD *)swift_allocObject();
  v6[4] = sub_1B1B04794;
  v6[5] = v5;
  v6[2] = sub_1B1B047C4;
  v6[3] = v5;
  v6[6] = v5;
  swift_allocObject();
  swift_retain_n();
  v7 = sub_1B1ADC904(0x7469736E65746E69, 0xE900000000000079, 0, 0, 0, 1, 0x3F847AE147AE147BLL, 0, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v6, v5, 0, 0,
         0,
         v3,
         0,
         (uint64_t)sub_1B1B047E4);
  swift_release();
  *(_QWORD *)(v0 + 40) = v7;
  result = sub_1B2228AD0();
  qword_1EEFD52A8 = v0;
  return result;
}

unint64_t sub_1B1A67F7C()
{
  return 0xD000000000000015;
}

uint64_t sub_1B1A67F98(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, &qword_1EEF57250);
}

uint64_t sub_1B1A67FB4(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, &qword_1EEF57250, (unint64_t *)&qword_1EEFD52A8);
}

uint64_t sub_1B1A67FE0(uint64_t a1)
{
  return sub_1B1A2262C(a1, &qword_1EEF57250, &qword_1EEFD52A8);
}

uint64_t sub_1B1A6800C()
{
  uint64_t v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E440;
  KeyPath = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B8040, (uint64_t)&type metadata for Entity, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = sub_1B1B048AC;
  v2[5] = KeyPath;
  v2[2] = sub_1B1B048DC;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v3 = sub_1B1AD9F50(0x65727574786574, 0xE700000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 8, 0, (uint64_t)v2, KeyPath, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0,
         (uint64_t)sub_1B1B048FC);
  swift_release();
  *(_QWORD *)(v0 + 32) = v3;
  result = sub_1B2228AD0();
  qword_1EEFD52B0 = v0;
  return result;
}

uint64_t sub_1B1A68194()
{
  return 0x6C61636544;
}

uint64_t sub_1B1A681A8(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, &qword_1EEF57258);
}

uint64_t sub_1B1A681C4(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, &qword_1EEF57258, (unint64_t *)&qword_1EEFD52B0);
}

uint64_t sub_1B1A681F0(uint64_t a1)
{
  return sub_1B1A2262C(a1, &qword_1EEF57258, &qword_1EEFD52B0);
}

uint64_t sub_1B1A6821C()
{
  uint64_t v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E560;
  KeyPath = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B8040, (uint64_t)&type metadata for Entity, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = sub_1B1B049C4;
  v2[5] = KeyPath;
  v2[2] = sub_1B1B049F4;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v3 = MEMORY[0x1E0DEE9D8];
  v4 = sub_1B1AD9F50(0x65727574786574, 0xE700000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 8, 0, (uint64_t)v2, KeyPath, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0,
         (uint64_t)sub_1B1B05A88);
  swift_release();
  *(_QWORD *)(v0 + 32) = v4;
  v5 = swift_getKeyPath();
  v6 = swift_getKeyPath();
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4B8140, MEMORY[0x1E0DEDC60], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v7 = (_QWORD *)swift_allocObject();
  v7[4] = sub_1B1B04A44;
  v7[5] = v6;
  v7[2] = sub_1B1B04A74;
  v7[3] = v6;
  v7[6] = v6;
  swift_allocObject();
  swift_retain_n();
  v8 = sub_1B1ADBDA8(0xD000000000000010, 0x80000001B232CBC0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v7, v6, 0, 0,
         0,
         v3,
         0,
         (uint64_t)sub_1B1B059C0);
  swift_release();
  sub_1B1A02758(0, &qword_1ED4B80B0, (uint64_t)&type metadata for ParticleOrientationMode, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v9 = (_QWORD *)swift_allocObject();
  v9[4] = sub_1B1B04A94;
  v9[5] = v5;
  v9[2] = sub_1B1B04AC4;
  v9[3] = v5;
  v9[6] = v5;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v10 = MEMORY[0x1E0DEE9D8];
  v11 = sub_1B1ACA3E8(0x7461746E6569726FLL, 0xEB000000006E6F69, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v9, v5, 0, 0,
          0,
          MEMORY[0x1E0DEE9D8],
          v8,
          (uint64_t)sub_1B1B058A8);
  swift_release();
  swift_release();
  *(_QWORD *)(v0 + 40) = v11;
  v12 = swift_getKeyPath();
  v13 = swift_getKeyPath();
  v14 = (_QWORD *)swift_allocObject();
  v14[4] = sub_1B1B04A44;
  v14[5] = v13;
  v14[2] = sub_1B1B04A74;
  v14[3] = v13;
  v14[6] = v13;
  swift_allocObject();
  swift_retain_n();
  v15 = sub_1B1ADBDA8(0x646F4D646E656C62, 0xEE007865646E4965, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v14, v13, 0, 0,
          0,
          v10,
          0,
          (uint64_t)sub_1B1B059C0);
  swift_release();
  sub_1B1A02758(0, &qword_1ED4B80C0, (uint64_t)&type metadata for BlendMode, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v16 = (_QWORD *)swift_allocObject();
  v16[4] = sub_1B1B04B2C;
  v16[5] = v12;
  v16[2] = sub_1B1B04B5C;
  v16[3] = v12;
  v16[6] = v12;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v17 = sub_1B1ADA314(0x646F4D646E656C62, 0xE900000000000065, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v16, v12, 0, 0,
          0,
          v10,
          v15,
          (uint64_t)sub_1B1B0573C);
  swift_release();
  swift_release();
  *(_QWORD *)(v0 + 48) = v17;
  v18 = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F8, MEMORY[0x1E0DEB188], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v19 = (_QWORD *)swift_allocObject();
  v19[4] = sub_1B1B04B7C;
  v19[5] = v18;
  v19[2] = sub_1B1B04BAC;
  v19[3] = v18;
  v19[6] = v18;
  swift_allocObject();
  swift_retain_n();
  v20 = sub_1B1ADC904(0x685466666F747563, 0xEF646C6F68736572, 0xBFF0000000000000, 0, 0x3FF0000000000000, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v19, v18, 0, 0,
          0,
          v10,
          0,
          (uint64_t)sub_1B1B05674);
  swift_release();
  *(_QWORD *)(v0 + 56) = v20;
  v21 = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F0, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v22 = (_QWORD *)swift_allocObject();
  v22[4] = sub_1B1B04BCC;
  v22[5] = v21;
  v22[2] = sub_1B1B04BFC;
  v22[3] = v21;
  v22[6] = v21;
  swift_allocObject();
  swift_retain_n();
  v23 = sub_1B1ADE580(0x676E69746867696CLL, 0xE800000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v22, v21, 0, 0,
          0,
          v10,
          0,
          (uint64_t)sub_1B1B055AC);
  swift_release();
  *(_QWORD *)(v0 + 64) = v23;
  v24 = swift_getKeyPath();
  v25 = (_QWORD *)swift_allocObject();
  v25[4] = sub_1B1B04BCC;
  v25[5] = v24;
  v25[2] = sub_1B1B04BFC;
  v25[3] = v24;
  v25[6] = v24;
  swift_allocObject();
  swift_retain_n();
  v26 = sub_1B1ADE580(0x72616C7563657073, 0xE800000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v25, v24, 0, 0,
          0,
          v10,
          0,
          (uint64_t)sub_1B1B055AC);
  swift_release();
  *(_QWORD *)(v0 + 72) = v26;
  v27 = swift_getKeyPath();
  v28 = swift_getKeyPath();
  v29 = (_QWORD *)swift_allocObject();
  v29[4] = sub_1B1B04A44;
  v29[5] = v28;
  v29[2] = sub_1B1B04A74;
  v29[3] = v28;
  v29[6] = v28;
  swift_allocObject();
  swift_retain_n();
  v30 = sub_1B1ADBDA8(0x65646F4D74726F73, 0xED00007865646E49, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v29, v28, 0, 0,
          0,
          v10,
          0,
          (uint64_t)sub_1B1B059C0);
  swift_release();
  sub_1B1A02758(0, &qword_1ED4B8080, (uint64_t)&type metadata for ParticleSortMode, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v31 = (_QWORD *)swift_allocObject();
  v31[4] = sub_1B1B04C94;
  v31[5] = v27;
  v31[2] = sub_1B1B04CC4;
  v31[3] = v27;
  v31[6] = v27;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v32 = sub_1B1AD0AA8(0x65646F4D74726F73, 0xE800000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v31, v27, 0, 0,
          0,
          v10,
          v30,
          (uint64_t)sub_1B1B054E4);
  swift_release();
  swift_release();
  *(_QWORD *)(v0 + 80) = v32;
  v33 = swift_getKeyPath();
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4B8178, MEMORY[0x1E0DEE0F8], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v34 = (_QWORD *)swift_allocObject();
  v34[4] = sub_1B1B04CE4;
  v34[5] = v33;
  v34[2] = sub_1B1B04D14;
  v34[3] = v33;
  v34[6] = v33;
  swift_allocObject();
  swift_retain_n();
  v35 = sub_1B1AD7CEC(0x647265764F78616DLL, 0xEB00000000776172, 0x3FF0000000000000, 0, 0x4070000000000000, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v34, v33, 0, 0,
          0,
          v10,
          0,
          (uint64_t)sub_1B1B05404);
  swift_release();
  *(_QWORD *)(v0 + 88) = v35;
  v36 = swift_getKeyPath();
  v37 = swift_getKeyPath();
  v38 = (_QWORD *)swift_allocObject();
  v38[4] = sub_1B1B04A44;
  v38[5] = v37;
  v38[2] = sub_1B1B04A74;
  v38[3] = v37;
  v38[6] = v37;
  swift_allocObject();
  swift_retain_n();
  v39 = sub_1B1ADBDA8(0xD000000000000012, 0x80000001B232E1F0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v38, v37, 0, 0,
          0,
          v10,
          0,
          (uint64_t)sub_1B1B059C0);
  swift_release();
  sub_1B1A02758(0, &qword_1ED4B80A8, (uint64_t)&type metadata for ParticleAnimationMode, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v40 = (_QWORD *)swift_allocObject();
  v40[4] = sub_1B1B04D64;
  v40[5] = v36;
  v40[2] = sub_1B1B04D94;
  v40[3] = v36;
  v40[6] = v36;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v41 = sub_1B1AD0E6C(0x6F6974616D696E61, 0xED000065646F4D6ELL, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v40, v36, 0, 0,
          0,
          v10,
          v39,
          (uint64_t)sub_1B1B052EC);
  swift_release();
  swift_release();
  *(_QWORD *)(v0 + 96) = v41;
  v42 = swift_getKeyPath();
  v43 = (_QWORD *)swift_allocObject();
  v43[4] = sub_1B1B04B7C;
  v43[5] = v42;
  v43[2] = sub_1B1B04BAC;
  v43[3] = v42;
  v43[6] = v42;
  swift_allocObject();
  swift_retain_n();
  v44 = sub_1B1ADC904(0x7473694474666F73, 0xEC00000065636E61, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v43, v42, 0, 0,
          0,
          v10,
          0,
          (uint64_t)sub_1B1B05674);
  swift_release();
  *(_QWORD *)(v0 + 104) = v44;
  v45 = (_QWORD *)v0;
  v46 = swift_getKeyPath();
  sub_1B1ADF51C();
  v47 = swift_allocObject();
  *(_OWORD *)(v47 + 16) = xmmword_1B226D240;
  *(_QWORD *)(v47 + 32) = 0;
  *(_QWORD *)(v47 + 40) = 0xE000000000000000;
  v48 = MEMORY[0x1E0DEB418];
  *(_QWORD *)(v47 + 72) = MEMORY[0x1E0DEB418];
  *(_QWORD *)(v47 + 48) = 16;
  sub_1B1A02758(0, &qword_1ED4B8100, v48, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v49 = (_QWORD *)swift_allocObject();
  v49[4] = sub_1B1B04DB4;
  v49[5] = v46;
  v49[2] = sub_1B1B04DE4;
  v49[3] = v46;
  v49[6] = v46;
  swift_allocObject();
  swift_retain_n();
  swift_bridgeObjectRetain();
  v50 = sub_1B1AD6CCC(0xD000000000000011, 0x80000001B2329D90, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v49, v46, 0, 0,
          0,
          v47,
          0,
          (uint64_t)sub_1B1B05224);
  swift_release();
  swift_bridgeObjectRelease();
  v45[14] = v50;
  v51 = swift_getKeyPath();
  v52 = swift_allocObject();
  *(_OWORD *)(v52 + 16) = xmmword_1B226D240;
  *(_QWORD *)(v52 + 32) = 0;
  *(_QWORD *)(v52 + 40) = 0xE000000000000000;
  *(_QWORD *)(v52 + 72) = v48;
  *(_QWORD *)(v52 + 48) = 2;
  v53 = (_QWORD *)swift_allocObject();
  v53[4] = sub_1B1B04DB4;
  v53[5] = v51;
  v53[2] = sub_1B1B04DE4;
  v53[3] = v51;
  v53[6] = v51;
  swift_allocObject();
  swift_retain_n();
  swift_bridgeObjectRetain();
  v54 = sub_1B1AD6CCC(0x6F436E6F62626972, 0xEB00000000746E75, 0x3FF0000000000000, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v53, v51, 0, 0,
          0,
          v52,
          0,
          (uint64_t)sub_1B1B05224);
  swift_release();
  swift_bridgeObjectRelease();
  v45[15] = v54;
  v55 = swift_getKeyPath();
  v56 = (_QWORD *)swift_allocObject();
  v56[4] = sub_1B1B04DB4;
  v56[5] = v55;
  v56[2] = sub_1B1B04DE4;
  v56[3] = v55;
  v56[6] = v55;
  swift_allocObject();
  swift_retain_n();
  v57 = MEMORY[0x1E0DEE9D8];
  v58 = sub_1B1AD6CCC(0xD000000000000010, 0x80000001B2329DB0, 0, 0, 0x4040000000000000, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v56, v55, 0, 0,
          0,
          MEMORY[0x1E0DEE9D8],
          0,
          (uint64_t)sub_1B1B05224);
  swift_release();
  v45[16] = v58;
  v59 = swift_getKeyPath();
  v60 = swift_getKeyPath();
  v61 = (_QWORD *)swift_allocObject();
  v61[4] = sub_1B1B04A44;
  v61[5] = v60;
  v61[2] = sub_1B1B04A74;
  v61[3] = v60;
  v61[6] = v60;
  swift_allocObject();
  swift_retain_n();
  v62 = sub_1B1ADBDA8(0x49656C69666F7270, 0xEC0000007865646ELL, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v61, v60, 0, 0,
          0,
          v57,
          0,
          (uint64_t)sub_1B1B059C0);
  swift_release();
  sub_1B1A02758(0, &qword_1EEF5A428, (uint64_t)&type metadata for ParticleRibbonProfile, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v63 = (_QWORD *)swift_allocObject();
  v63[4] = sub_1B1B04E34;
  v63[5] = v59;
  v63[2] = sub_1B1B04E64;
  v63[3] = v59;
  v63[6] = v59;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v64 = sub_1B1ACA7AC(0x656C69666F7270, 0xE700000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v63, v59, 0, 0,
          0,
          v57,
          v62);
  swift_release();
  swift_release();
  v45[17] = v64;
  v65 = swift_getKeyPath();
  v66 = swift_getKeyPath();
  v67 = (_QWORD *)swift_allocObject();
  v67[4] = sub_1B1B049C4;
  v67[5] = v65;
  v67[2] = sub_1B1B049F4;
  v67[3] = v65;
  v67[6] = v65;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v68 = MEMORY[0x1E0DEE9D8];
  v69 = sub_1B1AD9F50(0x7061436E69676562, 0xEF65727574786554, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v66, 8, 0, (uint64_t)v67, v65, 0, 0,
          0,
          MEMORY[0x1E0DEE9D8],
          0,
          (uint64_t)sub_1B1B05A88);
  swift_release();
  swift_release();
  v45[18] = v69;
  v70 = swift_getKeyPath();
  v71 = swift_getKeyPath();
  v72 = (_QWORD *)swift_allocObject();
  v72[4] = sub_1B1B049C4;
  v72[5] = v70;
  v72[2] = sub_1B1B049F4;
  v72[3] = v70;
  v72[6] = v70;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v73 = sub_1B1AD9F50(0x6554706143646E65, 0xED00006572757478, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v71, 8, 0, (uint64_t)v72, v70, 0, 0,
          0,
          v68,
          0,
          (uint64_t)sub_1B1B05A88);
  swift_release();
  swift_release();
  v45[19] = v73;
  v74 = swift_getKeyPath();
  v75 = swift_getKeyPath();
  v76 = (_QWORD *)swift_allocObject();
  v76[4] = sub_1B1B04A44;
  v76[5] = v75;
  v76[2] = sub_1B1B04A74;
  v76[3] = v75;
  v76[6] = v75;
  swift_allocObject();
  swift_retain_n();
  v77 = sub_1B1ADBDA8(0xD000000000000010, 0x80000001B232E330, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v76, v75, 0, 0,
          0,
          v68,
          0,
          (uint64_t)sub_1B1B059C0);
  swift_release();
  sub_1B1A02758(0, &qword_1EEF5A430, (uint64_t)&type metadata for ParticleRibbonTextureMode, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v78 = (_QWORD *)swift_allocObject();
  v78[4] = sub_1B1B04EBC;
  v78[5] = v74;
  v78[2] = sub_1B1B04EEC;
  v78[3] = v74;
  v78[6] = v74;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v79 = sub_1B1ACAB68(0x4D65727574786574, 0xEB0000000065646FLL, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v78, v74, 0, 0,
          0,
          v68,
          v77);
  swift_release();
  swift_release();
  v45[20] = v79;
  v80 = swift_getKeyPath();
  sub_1B1AE1F14(0);
  v81 = (_QWORD *)swift_allocObject();
  v81[4] = sub_1B1B04F0C;
  v81[5] = v80;
  v81[2] = sub_1B1B04F3C;
  v81[3] = v80;
  v81[6] = v80;
  swift_allocObject();
  swift_retain_n();
  v82 = sub_1B1ACAF24(0x5365727574786574, 0xEC000000656C6163, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v81, v80, 0, 0,
          0,
          v68,
          0);
  swift_release();
  v45[21] = v82;
  v83 = swift_getKeyPath();
  v84 = (_QWORD *)swift_allocObject();
  v84[4] = sub_1B1B04F0C;
  v84[5] = v83;
  v84[2] = sub_1B1B04F3C;
  v84[3] = v83;
  v84[6] = v83;
  swift_allocObject();
  swift_retain_n();
  v85 = sub_1B1ACAF24(0x4265727574786574, 0xEB00000000736169, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v84, v83, 0, 0,
          0,
          v68,
          0);
  swift_release();
  v45[22] = v85;
  v86 = swift_getKeyPath();
  v87 = (_QWORD *)swift_allocObject();
  v87[4] = sub_1B1B04BCC;
  v87[5] = v86;
  v87[2] = sub_1B1B04BFC;
  v87[3] = v86;
  v87[6] = v86;
  swift_allocObject();
  swift_retain_n();
  v88 = sub_1B1ADE580(0x65764F64696F7661, 0xED00007761726472, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v87, v86, 0, 0,
          0,
          v68,
          0,
          (uint64_t)sub_1B1B055AC);
  swift_release();
  v45[23] = v88;
  result = sub_1B2228AD0();
  qword_1EEFD52B8 = (uint64_t)v45;
  return result;
}

uint64_t sub_1B1A69BFC()
{
  uint64_t v0;
  int v2;
  unsigned int v3;
  char v4;

  sub_1B1AE6738((int *)(v0 + 8), (uint64_t)&v2);
  sub_1B1AE6738(&v2, (uint64_t)&v3);
  if (v4)
    return v3;
  else
    return 3;
}

uint64_t sub_1B1A69C40(uint64_t result)
{
  uint64_t v1;

  if (result == 3)
  {
    if ((*(_BYTE *)(v1 + 12) & 1) != 0)
    {
      *(_DWORD *)(v1 + 8) = 1056964608;
      *(_BYTE *)(v1 + 12) = 0;
    }
  }
  else
  {
    if (result == 2)
      *(_DWORD *)(v1 + 8) = 2;
    else
      *(_DWORD *)(v1 + 8) = result == 1;
    *(_BYTE *)(v1 + 12) = 1;
  }
  return result;
}

uint64_t sub_1B1A69C98()
{
  uint64_t v0;

  return *(char *)(v0 + 28);
}

uint64_t sub_1B1A69CA0(uint64_t result)
{
  uint64_t v1;
  char v2;

  v2 = result;
  if (result >= 3u)
    v2 = 3;
  *(_BYTE *)(v1 + 28) = v2;
  return result;
}

uint64_t sub_1B1A69CB8()
{
  return 0x6E6F62626952;
}

uint64_t sub_1B1A69CCC(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, &qword_1EEF57260);
}

uint64_t sub_1B1A69CE8(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, &qword_1EEF57260, (unint64_t *)&qword_1EEFD52B8);
}

uint64_t sub_1B1A69D14(uint64_t a1)
{
  return sub_1B1A2262C(a1, &qword_1EEF57260, &qword_1EEFD52B8);
}

uint64_t sub_1B1A69D40()
{
  uint64_t v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E500;
  KeyPath = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B8040, (uint64_t)&type metadata for Entity, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = sub_1B1B05B50;
  v2[5] = KeyPath;
  v2[2] = sub_1B1B05B80;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v3 = MEMORY[0x1E0DEE9D8];
  v4 = sub_1B1AD9F50(1752393069, 0xE400000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 9, 0, (uint64_t)v2, KeyPath, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0,
         (uint64_t)sub_1B1B05F18);
  swift_release();
  *(_QWORD *)(v0 + 32) = v4;
  v5 = swift_getKeyPath();
  v6 = (_QWORD *)swift_allocObject();
  v6[4] = sub_1B1B05B50;
  v6[5] = v5;
  v6[2] = sub_1B1B05B80;
  v6[3] = v5;
  v6[6] = v5;
  swift_allocObject();
  swift_retain_n();
  v7 = sub_1B1AD9F50(0xD000000000000010, 0x80000001B2328850, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 17, 0, (uint64_t)v6, v5, 0, 0,
         0,
         v3,
         0,
         (uint64_t)sub_1B1B05F18);
  swift_release();
  *(_QWORD *)(v0 + 40) = v7;
  v8 = swift_getKeyPath();
  v9 = swift_getKeyPath();
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4B8140, MEMORY[0x1E0DEDC60], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v10 = (_QWORD *)swift_allocObject();
  v10[4] = sub_1B1B05BD0;
  v10[5] = v9;
  v10[2] = sub_1B1B05C00;
  v10[3] = v9;
  v10[6] = v9;
  swift_allocObject();
  swift_retain_n();
  v11 = sub_1B1ADBDA8(0x65646F4D74726F73, 0xED00007865646E49, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v10, v9, 0, 0,
          0,
          v3,
          0,
          (uint64_t)sub_1B1B05E50);
  swift_release();
  sub_1B1A02758(0, &qword_1ED4B8080, (uint64_t)&type metadata for ParticleSortMode, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v12 = (_QWORD *)swift_allocObject();
  v12[4] = sub_1B1B05C20;
  v12[5] = v8;
  v12[2] = sub_1B1B05C50;
  v12[3] = v8;
  v12[6] = v8;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v13 = sub_1B1AD0AA8(0x65646F4D74726F73, 0xE800000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v12, v8, 0, 0,
          0,
          v3,
          v11,
          (uint64_t)sub_1B1B05D88);
  swift_release();
  swift_release();
  *(_QWORD *)(v0 + 48) = v13;
  v14 = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B8100, MEMORY[0x1E0DEB418], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v15 = (_QWORD *)swift_allocObject();
  v15[4] = sub_1B1B05C70;
  v15[5] = v14;
  v15[2] = sub_1B1B05CA0;
  v15[3] = v14;
  v15[6] = v14;
  swift_allocObject();
  swift_retain_n();
  v16 = sub_1B1AD6CCC(0x65646E4974726170, 0xE900000000000078, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v15, v14, 0, 0,
          0,
          v3,
          0,
          (uint64_t)sub_1B1B05CC0);
  swift_release();
  *(_QWORD *)(v0 + 56) = v16;
  v17 = swift_getKeyPath();
  v18 = (_QWORD *)swift_allocObject();
  v18[4] = sub_1B1B05C70;
  v18[5] = v17;
  v18[2] = sub_1B1B05CA0;
  v18[3] = v17;
  v18[6] = v17;
  swift_allocObject();
  swift_retain_n();
  v19 = sub_1B1AD6CCC(0x7865646E49646F6CLL, 0xE800000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v18, v17, 0, 0,
          0,
          v3,
          0,
          (uint64_t)sub_1B1B05CC0);
  swift_release();
  *(_QWORD *)(v0 + 64) = v19;
  result = sub_1B2228AD0();
  qword_1EEFD52C0 = v0;
  return result;
}

uint64_t sub_1B1A6A37C(uint64_t result)
{
  uint64_t v1;
  char v2;

  v2 = result;
  if (result >= 7u)
    v2 = 7;
  *(_BYTE *)(v1 + 16) = v2;
  return result;
}

uint64_t sub_1B1A6A394()
{
  return 1752393037;
}

uint64_t sub_1B1A6A3A4(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, &qword_1EEF57268);
}

uint64_t sub_1B1A6A3C0(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, &qword_1EEF57268, (unint64_t *)&qword_1EEFD52C0);
}

uint64_t sub_1B1A6A3EC(uint64_t a1)
{
  return sub_1B1A2262C(a1, &qword_1EEF57268, &qword_1EEFD52C0);
}

uint64_t sub_1B1A6A418()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E500;
  KeyPath = swift_getKeyPath();
  v2 = swift_getKeyPath();
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4B8140, MEMORY[0x1E0DEDC60], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v3 = (_QWORD *)swift_allocObject();
  v3[4] = sub_1B1B06010;
  v3[5] = v2;
  v3[2] = sub_1B1B06040;
  v3[3] = v2;
  v3[6] = v2;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v4 = MEMORY[0x1E0DEE9D8];
  v5 = sub_1B1ADBDA8(0x65646F4D74726F73, 0xED00007865646E49, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v3, v2, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0,
         (uint64_t)sub_1B1B063E4);
  swift_release();
  sub_1B1A02758(0, &qword_1ED4B8080, (uint64_t)&type metadata for ParticleSortMode, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v6 = (_QWORD *)swift_allocObject();
  v6[4] = sub_1B1B06060;
  v6[5] = KeyPath;
  v6[2] = sub_1B1B06090;
  v6[3] = KeyPath;
  v6[6] = KeyPath;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v7 = sub_1B1AD0AA8(0x65646F4D74726F73, 0xE800000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v6, KeyPath, 0, 0,
         0,
         v4,
         v5,
         (uint64_t)sub_1B1B062E0);
  swift_release();
  swift_release();
  *(_QWORD *)(v0 + 32) = v7;
  v8 = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F8, MEMORY[0x1E0DEB188], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v9 = (_QWORD *)swift_allocObject();
  v9[4] = sub_1B1B060B0;
  v9[5] = v8;
  v9[2] = sub_1B1B060E0;
  v9[3] = v8;
  v9[6] = v8;
  swift_allocObject();
  swift_retain_n();
  v10 = sub_1B1ADC904(0x656C676E61697274, 0xED0000656C616353, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v9, v8, 0, 0,
          0,
          v4,
          0,
          (uint64_t)sub_1B1B06218);
  swift_release();
  *(_QWORD *)(v0 + 40) = v10;
  v11 = swift_getKeyPath();
  v12 = (_QWORD *)swift_allocObject();
  v12[4] = sub_1B1B060B0;
  v12[5] = v11;
  v12[2] = sub_1B1B060E0;
  v12[3] = v11;
  v12[6] = v11;
  swift_allocObject();
  swift_retain_n();
  v13 = sub_1B1ADC904(0x6168706C61, 0xE500000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v12, v11, 0, 0,
          0,
          v4,
          0,
          (uint64_t)sub_1B1B06218);
  swift_release();
  *(_QWORD *)(v0 + 48) = v13;
  v14 = swift_getKeyPath();
  v15 = (_QWORD *)swift_allocObject();
  v15[4] = sub_1B1B060B0;
  v15[5] = v14;
  v15[2] = sub_1B1B060E0;
  v15[3] = v14;
  v15[6] = v14;
  swift_allocObject();
  swift_retain_n();
  v16 = sub_1B1ADC904(0x7265776F70, 0xE500000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v15, v14, 0, 0,
          0,
          v4,
          0,
          (uint64_t)sub_1B1B06218);
  swift_release();
  *(_QWORD *)(v0 + 56) = v16;
  v17 = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F0, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v18 = (_QWORD *)swift_allocObject();
  v18[4] = sub_1B1B06100;
  v18[5] = v17;
  v18[2] = sub_1B1B06130;
  v18[3] = v17;
  v18[6] = v17;
  swift_allocObject();
  swift_retain_n();
  v19 = sub_1B1ADE580(0x536873654D657375, 0xED00007265646168, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v18, v17, 0, 0,
          0,
          v4,
          0,
          (uint64_t)sub_1B1B06150);
  swift_release();
  *(_QWORD *)(v0 + 64) = v19;
  result = sub_1B2228AD0();
  qword_1EEFD52C8 = v0;
  return result;
}

uint64_t sub_1B1A6AA58(uint64_t result)
{
  uint64_t v1;
  char v2;

  v2 = result;
  if (result >= 7u)
    v2 = 7;
  *(_BYTE *)(v1 + 8) = v2;
  return result;
}

uint64_t sub_1B1A6AA70()
{
  return 0x6E61697373756147;
}

uint64_t sub_1B1A6AA88(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, &qword_1EEF57270);
}

uint64_t sub_1B1A6AAA4(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, &qword_1EEF57270, (unint64_t *)&qword_1EEFD52C8);
}

uint64_t sub_1B1A6AAD0(uint64_t a1)
{
  return sub_1B1A2262C(a1, &qword_1EEF57270, &qword_1EEFD52C8);
}

uint64_t sub_1B1A6AAFC()
{
  return 0x6469756C46;
}

uint64_t sub_1B1A6AB10()
{
  return 0x6C65786F56;
}

uint64_t sub_1B1A6AB24()
{
  uint64_t v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E450;
  KeyPath = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B8040, (uint64_t)&type metadata for Entity, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = sub_1B1B064AC;
  v2[5] = KeyPath;
  v2[2] = sub_1B1B064DC;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v3 = MEMORY[0x1E0DEE9D8];
  v4 = sub_1B1AD9F50(0x656E656373, 0xE500000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 12, 0, (uint64_t)v2, KeyPath, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0,
         (uint64_t)sub_1B1B06640);
  swift_release();
  *(_QWORD *)(v0 + 32) = v4;
  v5 = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F0, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v6 = (_QWORD *)swift_allocObject();
  v6[4] = sub_1B1B064FC;
  v6[5] = v5;
  v6[2] = sub_1B1B0652C;
  v6[3] = v5;
  v6[6] = v5;
  swift_allocObject();
  swift_retain_n();
  v7 = sub_1B1ADE580(2036427888, 0xE400000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 19, 0, (uint64_t)v6, v5, 0, 0,
         0,
         v3,
         0,
         (uint64_t)sub_1B1B0654C);
  swift_release();
  *(_QWORD *)(v0 + 40) = v7;
  result = sub_1B2228AD0();
  qword_1EEFD52D0 = v0;
  return result;
}

uint64_t sub_1B1A6ADAC()
{
  return 0x74694B656E656353;
}

uint64_t sub_1B1A6ADD0(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, &qword_1EEF57278);
}

uint64_t sub_1B1A6ADEC(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, &qword_1EEF57278, (unint64_t *)&qword_1EEFD52D0);
}

uint64_t sub_1B1A6AE18(uint64_t a1)
{
  return sub_1B1A2262C(a1, &qword_1EEF57278, &qword_1EEFD52D0);
}

uint64_t sub_1B1A6AE44()
{
  uint64_t v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E440;
  KeyPath = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1EEF59388, (uint64_t)&type metadata for Asset, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = sub_1B1B067B0;
  v2[5] = KeyPath;
  v2[2] = sub_1B1B067D8;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v3 = sub_1B1AC5AF8(0x7465737361, 0xE500000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v2, KeyPath, 0, 0,
         4,
         MEMORY[0x1E0DEE9D8],
         0,
         (uint64_t)sub_1B1B067F8);
  swift_release();
  *(_QWORD *)(v0 + 32) = v3;
  result = sub_1B2228AD0();
  qword_1EEFD52D8 = v0;
  return result;
}

uint64_t sub_1B1A6AFC8()
{
  return 0x734120656E656353;
}

uint64_t sub_1B1A6AFE8(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, &qword_1EEF57280);
}

uint64_t sub_1B1A6B004(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, &qword_1EEF57280, (unint64_t *)&qword_1EEFD52D8);
}

uint64_t sub_1B1A6B030(uint64_t a1)
{
  return sub_1B1A2262C(a1, &qword_1EEF57280, &qword_1EEFD52D8);
}

uint64_t sub_1B1A6B05C()
{
  uint64_t v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E450;
  KeyPath = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1EEF59388, (uint64_t)&type metadata for Asset, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = sub_1B1B068B4;
  v2[5] = KeyPath;
  v2[2] = sub_1B1B068DC;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v3 = MEMORY[0x1E0DEE9D8];
  v4 = sub_1B1AC5AF8(0x7465737361, 0xE500000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v2, KeyPath, 0, 0,
         4,
         MEMORY[0x1E0DEE9D8],
         0,
         (uint64_t)sub_1B1B06A98);
  swift_release();
  *(_QWORD *)(v0 + 32) = v4;
  v5 = swift_getKeyPath();
  sub_1B1AEABCC(0);
  v6 = (_QWORD *)swift_allocObject();
  v6[4] = sub_1B1B068FC;
  v6[5] = v5;
  v6[2] = sub_1B1B06934;
  v6[3] = v5;
  v6[6] = v5;
  swift_allocObject();
  swift_retain_n();
  v7 = sub_1B1AB7B00(0x72724174616F6C66, 0xEA00000000007961, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v6, v5, 0, 0,
         0,
         v3,
         0,
         (unint64_t *)&qword_1ED4BA4C0,
         MEMORY[0x1E0DEB188],
         (uint64_t)sub_1B1B06954);
  swift_release();
  *(_QWORD *)(v0 + 40) = v7;
  result = sub_1B2228AD0();
  qword_1EEFD52E0 = v0;
  return result;
}

uint64_t sub_1B1A6B2E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  id v6;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)a2 = *(_QWORD *)a1;
  *(_QWORD *)(a2 + 8) = v2;
  *(_QWORD *)(a2 + 16) = v3;
  *(_QWORD *)(a2 + 24) = v4;
  v5 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 32) = v5;
  v6 = (id)v5;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t sub_1B1A6B32C(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  id v9;
  id v10;
  uint64_t v12;

  v3 = a1[1];
  v12 = *a1;
  v5 = a1[2];
  v4 = a1[3];
  v6 = (void *)a1[4];
  v7 = a1[5];
  v8 = (void *)a2[4];
  v9 = v6;
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  v10 = v9;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  *a2 = v12;
  a2[1] = v3;
  a2[2] = v5;
  a2[3] = v4;
  a2[4] = v6;
  a2[5] = v7;
  sub_1B2054C68();

  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B1A6B3E8()
{
  return 0x6573734120565343;
}

uint64_t sub_1B1A6B404(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, &qword_1EEF57288);
}

uint64_t sub_1B1A6B420(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, &qword_1EEF57288, (unint64_t *)&qword_1EEFD52E0);
}

uint64_t sub_1B1A6B44C(uint64_t a1)
{
  return sub_1B1A2262C(a1, &qword_1EEF57288, &qword_1EEFD52E0);
}

uint64_t sub_1B1A6B478()
{
  uint64_t v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E440;
  KeyPath = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F0, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = sub_1B1B06B88;
  v2[5] = KeyPath;
  v2[2] = sub_1B1B06BB8;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v3 = sub_1B1ADE580(0x64656C62616E65, 0xE700000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v2, KeyPath, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0,
         (uint64_t)sub_1B1B06BD8);
  swift_release();
  *(_QWORD *)(v0 + 32) = v3;
  result = sub_1B2228AD0();
  qword_1EEFD52E8 = v0;
  return result;
}

uint64_t sub_1B1A6B5FC()
{
  return 0x442F656C62616E45;
}

uint64_t sub_1B1A6B620(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, &qword_1EEF57290);
}

uint64_t sub_1B1A6B63C(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, &qword_1EEF57290, (unint64_t *)&qword_1EEFD52E8);
}

uint64_t sub_1B1A6B668(uint64_t a1)
{
  return sub_1B1A2262C(a1, &qword_1EEF57290, &qword_1EEFD52E8);
}

uint64_t sub_1B1A6B694()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E4A0;
  KeyPath = swift_getKeyPath();
  v2 = swift_getKeyPath();
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4B8140, MEMORY[0x1E0DEDC60], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v3 = (_QWORD *)swift_allocObject();
  v3[4] = sub_1B1B06D4C;
  v3[5] = v2;
  v3[2] = sub_1B1B06D7C;
  v3[3] = v2;
  v3[6] = v2;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v4 = MEMORY[0x1E0DEE9D8];
  v5 = sub_1B1ADBDA8(0x65646E4965646F6DLL, 0xE900000000000078, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v3, v2, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0,
         (uint64_t)sub_1B1B073BC);
  swift_release();
  sub_1B1A02758(0, &qword_1EEF5A530, (uint64_t)&type metadata for EvolutionMode, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v6 = (_QWORD *)swift_allocObject();
  v6[4] = sub_1B1B06D9C;
  v6[5] = KeyPath;
  v6[2] = sub_1B1B06DA4;
  v6[3] = KeyPath;
  v6[6] = KeyPath;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v7 = sub_1B1ACDC10(1701080941, 0xE400000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v6, KeyPath, 0, 0,
         0,
         v4,
         v5);
  swift_release();
  swift_release();
  *(_QWORD *)(v0 + 32) = v7;
  v8 = swift_getKeyPath();
  v9 = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F8, MEMORY[0x1E0DEB188], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v10 = (_QWORD *)swift_allocObject();
  v10[4] = sub_1B1B06DF8;
  v10[5] = v8;
  v10[2] = sub_1B1B06E28;
  v10[3] = v8;
  v10[6] = v8;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v11 = sub_1B1ADC904(0x6C616353656D6974, 0xE900000000000065, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v9, 1, 0, (uint64_t)v10, v8, 0, 0,
          0,
          v4,
          0,
          (uint64_t)sub_1B1B071D8);
  swift_release();
  swift_release();
  *(_QWORD *)(v0 + 40) = v11;
  v12 = swift_getKeyPath();
  v13 = swift_getKeyPath();
  sub_1B1AE43E4(0);
  v14 = (_QWORD *)swift_allocObject();
  v14[4] = sub_1B1B06EA0;
  v14[5] = v12;
  v14[2] = sub_1B1B06ED0;
  v14[3] = v12;
  v14[6] = v12;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v15 = sub_1B1ACDFCC(0x797469636F6C6576, 0xED000065676E6152, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v13, 1, 0, (uint64_t)v14, v12, 0, 0,
          0,
          v4,
          0);
  swift_release();
  swift_release();
  *(_QWORD *)(v0 + 48) = v15;
  v16 = swift_getKeyPath();
  sub_1B1AE6B80(0);
  v17 = (_QWORD *)swift_allocObject();
  v17[4] = sub_1B1B06EF0;
  v17[5] = v16;
  v17[2] = sub_1B1B06F20;
  v17[3] = v16;
  v17[6] = v16;
  swift_allocObject();
  swift_retain_n();
  v18 = sub_1B1ACE3A8(0x6576727563, 0xE500000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v17, v16, 0, 0,
          0,
          v4,
          0);
  swift_release();
  *(_QWORD *)(v0 + 56) = v18;
  result = sub_1B2228AD0();
  qword_1EEFD52F0 = v0;
  return result;
}

uint64_t sub_1B1A6BC04()
{
  uint64_t v0;

  return qword_1B2279D80[*(char *)(v0 + 8)];
}

float sub_1B1A6BC18()
{
  uint64_t *v0;
  float result;
  uint64_t v2;
  float v3[2];
  char v4;

  sub_1B1B0719C(v0, (uint64_t)&v2);
  sub_1B1B0719C(&v2, (uint64_t)v3);
  result = v3[0];
  if (v4)
    return 0.0;
  return result;
}

BOOL sub_1B1A6BC5C()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + 8) == 0;
}

float sub_1B1A6BC6C()
{
  uint64_t *v0;
  float result;
  uint64_t v2;
  float v3;
  char v4;

  sub_1B1B0719C(v0, (uint64_t)&v2);
  sub_1B1B0719C(&v2, (uint64_t)&v3);
  result = v3;
  if (v4 != 1)
    return 0.0;
  return result;
}

BOOL sub_1B1A6BCB8()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + 8) == 1;
}

unint64_t sub_1B1A6BCC8()
{
  return 0xD000000000000010;
}

uint64_t sub_1B1A6BCE4(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, &qword_1EEF57298);
}

uint64_t sub_1B1A6BD00(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, &qword_1EEF57298, (unint64_t *)&qword_1EEFD52F0);
}

uint64_t sub_1B1A6BD2C(uint64_t a1)
{
  return sub_1B1A2262C(a1, &qword_1EEF57298, &qword_1EEFD52F0);
}

unint64_t sub_1B1A6BD58()
{
  return 0xD00000000000001BLL;
}

uint64_t sub_1B1A6BD74()
{
  uint64_t v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E4A0;
  KeyPath = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F8, MEMORY[0x1E0DEB188], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = sub_1B1B074C0;
  v2[5] = KeyPath;
  v2[2] = sub_1B1B074F0;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v3 = MEMORY[0x1E0DEE9D8];
  v4 = sub_1B1ADC904(0x647574696C706D61, 0xE900000000000065, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v2, KeyPath, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0,
         (uint64_t)sub_1B1B07630);
  swift_release();
  *(_QWORD *)(v0 + 32) = v4;
  v5 = swift_getKeyPath();
  v6 = (_QWORD *)swift_allocObject();
  v6[4] = sub_1B1B074C0;
  v6[5] = v5;
  v6[2] = sub_1B1B074F0;
  v6[3] = v5;
  v6[6] = v5;
  swift_allocObject();
  swift_retain_n();
  v7 = sub_1B1ADC904(0x636E657571657266, 0xE900000000000079, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v6, v5, 0, 0,
         0,
         v3,
         0,
         (uint64_t)sub_1B1B07630);
  swift_release();
  *(_QWORD *)(v0 + 40) = v7;
  v8 = swift_getKeyPath();
  v9 = (_QWORD *)swift_allocObject();
  v9[4] = sub_1B1B074C0;
  v9[5] = v8;
  v9[2] = sub_1B1B074F0;
  v9[3] = v8;
  v9[6] = v8;
  swift_allocObject();
  swift_retain_n();
  v10 = sub_1B1ADC904(0x6968536573616870, 0xEA00000000007466, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v9, v8, 0, 0,
          0,
          v3,
          0,
          (uint64_t)sub_1B1B07630);
  swift_release();
  *(_QWORD *)(v0 + 48) = v10;
  v11 = swift_getKeyPath();
  sub_1B1AE015C(0);
  v12 = (_QWORD *)swift_allocObject();
  v12[4] = sub_1B1B07510;
  v12[5] = v11;
  v12[2] = sub_1B1B07548;
  v12[3] = v11;
  v12[6] = v11;
  swift_allocObject();
  swift_retain_n();
  v13 = sub_1B1ABC318(0x61746C6564, 0xE500000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v12, v11, 0, 0,
          0,
          v3,
          0);
  swift_release();
  *(_QWORD *)(v0 + 56) = v13;
  result = sub_1B2228AD0();
  qword_1EEFD52F8 = v0;
  return result;
}

unint64_t sub_1B1A6C194()
{
  return 0xD000000000000010;
}

uint64_t sub_1B1A6C1B0(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, &qword_1EEF572A0);
}

uint64_t sub_1B1A6C1CC(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, &qword_1EEF572A0, (unint64_t *)&qword_1EEFD52F8);
}

uint64_t sub_1B1A6C1F8(uint64_t a1)
{
  return sub_1B1A2262C(a1, &qword_1EEF572A0, &qword_1EEFD52F8);
}

double sub_1B1A6C224(uint64_t a1)
{
  uint64_t v2;
  double result;

  sub_1B1ADF51C();
  v2 = swift_allocObject();
  *(_QWORD *)&result = 1;
  *(_OWORD *)(v2 + 16) = xmmword_1B226D240;
  *(_QWORD *)(v2 + 32) = 48;
  *(_QWORD *)(v2 + 40) = 0xE100000000000000;
  *(_QWORD *)(v2 + 72) = a1;
  *(_QWORD *)(v2 + 48) = 0;
  return result;
}

uint64_t sub_1B1A6C274()
{
  uint64_t v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E540;
  KeyPath = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F8, MEMORY[0x1E0DEB188], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = sub_1B1B076F8;
  v2[5] = KeyPath;
  v2[2] = sub_1B1B07728;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v3 = MEMORY[0x1E0DEE9D8];
  v4 = sub_1B1ADC904(0x6D69546E69676562, 0xE900000000000065, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v2, KeyPath, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0,
         (uint64_t)sub_1B1B07FE8);
  swift_release();
  *(_QWORD *)(v0 + 32) = v4;
  v5 = swift_getKeyPath();
  v6 = (_QWORD *)swift_allocObject();
  v6[4] = sub_1B1B076F8;
  v6[5] = v5;
  v6[2] = sub_1B1B07728;
  v6[3] = v5;
  v6[6] = v5;
  swift_allocObject();
  swift_retain_n();
  v7 = sub_1B1ADC904(0x6E6F697461727564, 0xE800000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v6, v5, 0, 0,
         0,
         v3,
         0,
         (uint64_t)sub_1B1B07FE8);
  swift_release();
  *(_QWORD *)(v0 + 40) = v7;
  v8 = swift_getKeyPath();
  v9 = swift_getKeyPath();
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4B8140, MEMORY[0x1E0DEDC60], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v10 = (_QWORD *)swift_allocObject();
  v10[4] = sub_1B1B07770;
  v10[5] = v9;
  v10[2] = sub_1B1B077A0;
  v10[3] = v9;
  v10[6] = v9;
  swift_allocObject();
  swift_retain_n();
  v11 = sub_1B1ADBDA8(0x6E49676E69736165, 0xEB00000000786564, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v10, v9, 0, 0,
          0,
          v3,
          0,
          (uint64_t)sub_1B1B07EFC);
  swift_release();
  sub_1B1A02758(0, &qword_1EEF5A580, (uint64_t)&type metadata for EasingFunction, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v12 = (_QWORD *)swift_allocObject();
  v12[4] = sub_1B1B077C0;
  v12[5] = v8;
  v12[2] = sub_1B1B077C8;
  v12[3] = v8;
  v12[6] = v8;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v13 = sub_1B1AC4804(0x676E69736165, 0xE600000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v12, v8, 0, 0,
          0,
          v3,
          v11);
  swift_release();
  swift_release();
  *(_QWORD *)(v0 + 48) = v13;
  v14 = swift_getKeyPath();
  v15 = swift_getKeyPath();
  v16 = (_QWORD *)swift_allocObject();
  v16[4] = sub_1B1B076F8;
  v16[5] = v14;
  v16[2] = sub_1B1B07728;
  v16[3] = v14;
  v16[6] = v14;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v17 = sub_1B1ADC904(0x6C706D416B636162, 0xED00006564757469, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v15, 1, 0, (uint64_t)v16, v14, 0, 0,
          0,
          v3,
          0,
          (uint64_t)sub_1B1B07FE8);
  swift_release();
  swift_release();
  *(_QWORD *)(v0 + 56) = v17;
  v18 = swift_getKeyPath();
  v19 = swift_getKeyPath();
  sub_1B1AE1F14(0);
  v20 = (_QWORD *)swift_allocObject();
  v20[4] = sub_1B1B07894;
  v20[5] = v18;
  v20[2] = sub_1B1B078C4;
  v20[3] = v18;
  v20[6] = v18;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v21 = sub_1B1AC4BC0(0x615065636E756F62, 0xEC000000736D6172, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v19, 1, 0, (uint64_t)v20, v18, 0, 0,
          0,
          v3,
          0);
  swift_release();
  swift_release();
  *(_QWORD *)(v0 + 64) = v21;
  v22 = swift_getKeyPath();
  v23 = swift_getKeyPath();
  v24 = (_QWORD *)swift_allocObject();
  v24[4] = sub_1B1B07894;
  v24[5] = v22;
  v24[2] = sub_1B1B078C4;
  v24[3] = v22;
  v24[6] = v22;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v25 = sub_1B1AC4BC0(0x5063697473616C65, 0xED0000736D617261, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v23, 1, 0, (uint64_t)v24, v22, 0, 0,
          0,
          v3,
          0);
  swift_release();
  swift_release();
  *(_QWORD *)(v0 + 72) = v25;
  v26 = swift_getKeyPath();
  v27 = swift_getKeyPath();
  v28 = (_QWORD *)swift_allocObject();
  v28[4] = sub_1B1B076F8;
  v28[5] = v26;
  v28[2] = sub_1B1B07728;
  v28[3] = v26;
  v28[6] = v26;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v29 = sub_1B1ADC904(0xD000000000000013, 0x80000001B232E3D0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v27, 1, 0, (uint64_t)v28, v26, 0, 0,
          0,
          v3,
          0,
          (uint64_t)sub_1B1B07FE8);
  swift_release();
  swift_release();
  *(_QWORD *)(v0 + 80) = v29;
  v30 = swift_getKeyPath();
  v31 = swift_getKeyPath();
  v32 = (_QWORD *)swift_allocObject();
  v32[4] = sub_1B1B076F8;
  v32[5] = v30;
  v32[2] = sub_1B1B07728;
  v32[3] = v30;
  v32[6] = v30;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v33 = sub_1B1ADC904(0x6874697261676F6CLL, 0xEF6573614263696DLL, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v31, 1, 0, (uint64_t)v32, v30, 0, 0,
          0,
          v3,
          0,
          (uint64_t)sub_1B1B07FE8);
  swift_release();
  swift_release();
  *(_QWORD *)(v0 + 88) = v33;
  v34 = swift_getKeyPath();
  v35 = swift_getKeyPath();
  v36 = (_QWORD *)swift_allocObject();
  v36[4] = sub_1B1B076F8;
  v36[5] = v34;
  v36[2] = sub_1B1B07728;
  v36[3] = v34;
  v36[6] = v34;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v37 = sub_1B1ADC904(0x6C61567265776F70, 0xEA00000000006575, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v35, 1, 0, (uint64_t)v36, v34, 0, 0,
          0,
          v3,
          0,
          (uint64_t)sub_1B1B07FE8);
  swift_release();
  swift_release();
  *(_QWORD *)(v0 + 96) = v37;
  v38 = swift_getKeyPath();
  v39 = (_QWORD *)swift_allocObject();
  v39[4] = sub_1B1B076F8;
  v39[5] = v38;
  v39[2] = sub_1B1B07728;
  v39[3] = v38;
  v39[6] = v38;
  swift_allocObject();
  swift_retain_n();
  v40 = sub_1B1ADC904(0x6F43746165706572, 0xEB00000000746E75, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v39, v38, 0, 0,
          0,
          v3,
          0,
          (uint64_t)sub_1B1B07FE8);
  swift_release();
  *(_QWORD *)(v0 + 104) = v40;
  v41 = swift_getKeyPath();
  v42 = swift_getKeyPath();
  v43 = (_QWORD *)swift_allocObject();
  v43[4] = sub_1B1B07770;
  v43[5] = v42;
  v43[2] = sub_1B1B077A0;
  v43[3] = v42;
  v43[6] = v42;
  swift_allocObject();
  swift_retain_n();
  v44 = sub_1B1ADBDA8(0xD000000000000010, 0x80000001B232E3F0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v43, v42, 0, 0,
          0,
          v3,
          0,
          (uint64_t)sub_1B1B07EFC);
  swift_release();
  sub_1B1A02758(0, &qword_1EEF5A588, (uint64_t)&type metadata for FillMode, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v45 = (_QWORD *)swift_allocObject();
  v45[4] = sub_1B1B07A84;
  v45[5] = v41;
  v45[2] = sub_1B1B07AB4;
  v45[3] = v41;
  v45[6] = v41;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v46 = sub_1B1AC4F9C(0x77726F466C6C6966, 0xEB00000000647261, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v45, v41, 0, 0,
          0,
          v3,
          v44);
  swift_release();
  swift_release();
  *(_QWORD *)(v0 + 112) = v46;
  v47 = swift_getKeyPath();
  v48 = swift_getKeyPath();
  v49 = (_QWORD *)swift_allocObject();
  v49[4] = sub_1B1B07770;
  v49[5] = v48;
  v49[2] = sub_1B1B077A0;
  v49[3] = v48;
  v49[6] = v48;
  swift_allocObject();
  swift_retain_n();
  v50 = sub_1B1ADBDA8(0xD000000000000011, 0x80000001B232E410, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v49, v48, 0, 0,
          0,
          v3,
          0,
          (uint64_t)sub_1B1B07EFC);
  swift_release();
  v51 = (_QWORD *)swift_allocObject();
  v51[4] = sub_1B1B07A84;
  v51[5] = v47;
  v51[2] = sub_1B1B07AB4;
  v51[3] = v47;
  v51[6] = v47;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v52 = sub_1B1AC4F9C(0x6B6361426C6C6966, 0xEC00000064726177, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v51, v47, 0, 0,
          0,
          v3,
          v50);
  swift_release();
  swift_release();
  *(_QWORD *)(v0 + 120) = v52;
  result = sub_1B2228AD0();
  qword_1EEFD5300 = v0;
  return result;
}

uint64_t sub_1B1A6D150()
{
  uint64_t v0;

  return ((uint64_t (*)(uint64_t))((char *)sub_1B1A6D170 + 4 * byte_1B226E5C4[*(unsigned __int8 *)(v0 + 36)]))(16);
}

uint64_t sub_1B1A6D170()
{
  return 17;
}

uint64_t sub_1B1A6D178()
{
  return 18;
}

uint64_t sub_1B1A6D180()
{
  return 19;
}

uint64_t sub_1B1A6D188()
{
  return 20;
}

uint64_t sub_1B1A6D190()
{
  return 21;
}

uint64_t sub_1B1A6D198()
{
  return 22;
}

uint64_t sub_1B1A6D1A0()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24);
}

uint64_t sub_1B1A6D1A8(uint64_t a1)
{
  return ((uint64_t (*)(void))((char *)sub_1B1A6D1C8 + 4 * byte_1B226E5CC[*(unsigned __int8 *)(a1 + 36)]))();
}

void sub_1B1A6D1C8(_QWORD *a1@<X8>)
{
  *a1 = 17;
}

void sub_1B1A6D1D4(_QWORD *a1@<X8>)
{
  *a1 = 18;
}

void sub_1B1A6D1E0(_QWORD *a1@<X8>)
{
  *a1 = 19;
}

void sub_1B1A6D1EC(_QWORD *a1@<X8>)
{
  *a1 = 20;
}

void sub_1B1A6D1F8(_QWORD *a1@<X8>)
{
  *a1 = 21;
}

void sub_1B1A6D204(_QWORD *a1@<X8>)
{
  *a1 = 22;
}

uint64_t sub_1B1A6D210@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *(_QWORD *)(result + 24);
  return result;
}

float sub_1B1A6D21C()
{
  uint64_t v0;
  float result;
  uint64_t v2[2];
  float v3[3];
  char v4;

  sub_1B1B07C6C((uint64_t *)(v0 + 24), v2);
  sub_1B1B07C6C(v2, v3);
  result = v3[0];
  if (v4)
    return 0.0;
  return result;
}

BOOL sub_1B1A6D260()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + 36) == 0;
}

__n64 sub_1B1A6D270()
{
  uint64_t v0;
  __n64 result;
  uint64_t v2[2];
  uint64_t v3;
  char v4;

  sub_1B1B07C6C((uint64_t *)(v0 + 24), v2);
  sub_1B1B07C6C(v2, &v3);
  result.n64_u64[0] = 0;
  if (v4 == 1)
  {
    result.n64_f32[0] = (float)(int)v3;
    result.n64_u32[1] = HIDWORD(v3);
  }
  return result;
}

BOOL sub_1B1A6D2CC()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + 36) == 1;
}

__n64 sub_1B1A6D2DC()
{
  uint64_t v0;
  __n64 result;
  uint64_t v2[2];
  uint64_t v3;
  char v4;

  sub_1B1B07C6C((uint64_t *)(v0 + 24), v2);
  sub_1B1B07C6C(v2, &v3);
  result.n64_u64[0] = 0;
  if (v4 == 2)
  {
    result.n64_f32[0] = (float)(int)v3;
    result.n64_u32[1] = HIDWORD(v3);
  }
  return result;
}

BOOL sub_1B1A6D338()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + 36) == 2;
}

float sub_1B1A6D348()
{
  uint64_t v0;
  float result;
  uint64_t v2[2];
  float v3[3];
  char v4;

  sub_1B1B07C6C((uint64_t *)(v0 + 24), v2);
  sub_1B1B07C6C(v2, v3);
  result = v3[0];
  if (v4 != 3)
    return 0.0;
  return result;
}

BOOL sub_1B1A6D38C()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + 36) == 3;
}

float sub_1B1A6D39C()
{
  uint64_t v0;
  float result;
  uint64_t v2[2];
  float v3[3];
  char v4;

  sub_1B1B07C6C((uint64_t *)(v0 + 24), v2);
  sub_1B1B07C6C(v2, v3);
  result = v3[0];
  if (v4 != 4)
    return 0.0;
  return result;
}

BOOL sub_1B1A6D3E0()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + 36) == 4;
}

float sub_1B1A6D3F0()
{
  uint64_t v0;
  float result;
  uint64_t v2[2];
  float v3[3];
  char v4;

  sub_1B1B07C6C((uint64_t *)(v0 + 24), v2);
  sub_1B1B07C6C(v2, v3);
  result = v3[0];
  if (v4 != 5)
    return 0.0;
  return result;
}

BOOL sub_1B1A6D434()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + 36) == 5;
}

uint64_t sub_1B1A6D444()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 21);
}

unint64_t sub_1B1A6D44C(unint64_t result)
{
  uint64_t v1;
  char v2;

  v2 = 4;
  if (result < 4)
    v2 = result;
  *(_BYTE *)(v1 + 21) = v2;
  return result;
}

uint64_t sub_1B1A6D460()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 22);
}

unint64_t sub_1B1A6D468(unint64_t result)
{
  uint64_t v1;
  char v2;

  v2 = 4;
  if (result < 4)
    v2 = result;
  *(_BYTE *)(v1 + 22) = v2;
  return result;
}

uint64_t sub_1B1A6D47C(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  char v5;

  v2 = result - 1;
  if ((unint64_t)(result - 1) > 0x15)
  {
    v3 = 0;
    v4 = 0;
    v5 = 7;
  }
  else
  {
    v3 = qword_1B2279C30[v2];
    v4 = dword_1B2279CE0[v2];
    v5 = asc_1B2279D38[v2];
  }
  *(_QWORD *)v1 = v3;
  *(_DWORD *)(v1 + 8) = v4;
  *(_BYTE *)(v1 + 12) = v5;
  return result;
}

unint64_t sub_1B1A6D4CC()
{
  return 0xD000000000000015;
}

uint64_t sub_1B1A6D4E8(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, &qword_1EEF572A8);
}

uint64_t sub_1B1A6D504(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, &qword_1EEF572A8, (unint64_t *)&qword_1EEFD5300);
}

uint64_t sub_1B1A6D530(uint64_t a1)
{
  return sub_1B1A2262C(a1, &qword_1EEF572A8, &qword_1EEFD5300);
}

unint64_t sub_1B1A6D55C()
{
  return 0xD000000000000012;
}

uint64_t sub_1B1A6D578(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *KeyPath;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1B226E500;
  type metadata accessor for PropertyDescription();
  KeyPath = (uint64_t *)swift_getKeyPath();
  type metadata accessor for KeyframeAnimation(0, a1, a2, v6);
  v7 = MEMORY[0x1E0DEE9D8];
  v8 = sub_1B1BF4D50(0x656E696C656D6974, 0xE900000000000058, KeyPath, (uint64_t)&type metadata for KeyframeTimeline, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0,
         (uint64_t)&off_1E638CEA0);
  swift_release();
  *(_QWORD *)(v4 + 32) = v8;
  v9 = (uint64_t *)swift_getKeyPath();
  v10 = sub_1B1BF4D50(0x656E696C656D6974, 0xE900000000000059, v9, (uint64_t)&type metadata for KeyframeTimeline, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0,
          0,
          v7,
          0,
          (uint64_t)&off_1E638CEA0);
  swift_release();
  *(_QWORD *)(v4 + 40) = v10;
  v11 = (uint64_t *)swift_getKeyPath();
  v12 = sub_1B1BF4D50(0x656E696C656D6974, 0xE90000000000005ALL, v11, (uint64_t)&type metadata for KeyframeTimeline, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0,
          0,
          v7,
          0,
          (uint64_t)&off_1E638CEA0);
  swift_release();
  *(_QWORD *)(v4 + 48) = v12;
  v13 = (uint64_t *)swift_getKeyPath();
  v14 = sub_1B1BF4D50(0x656E696C656D6974, 0xE900000000000057, v13, (uint64_t)&type metadata for KeyframeTimeline, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0,
          0,
          v7,
          0,
          (uint64_t)&off_1E638CEA0);
  swift_release();
  *(_QWORD *)(v4 + 56) = v14;
  v15 = (uint64_t *)swift_getKeyPath();
  sub_1B1A02758(0, &qword_1EEF5A5D8, (uint64_t)&type metadata for EntityComponentProperty, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  v17 = sub_1B1BF4D50(0x746567726174, 0xE600000000000000, v15, v16, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0,
          0,
          v7,
          0,
          (uint64_t)&off_1E638CEA0);
  swift_release();
  *(_QWORD *)(v4 + 64) = v17;
  sub_1B2228AD0();
  return v4;
}

unint64_t sub_1B1A6D93C()
{
  sub_1B1A6D55C();
  return 0xD000000000000012;
}

uint64_t sub_1B1A6D958(uint64_t a1)
{
  return sub_1B1ADE558(a1, (uint64_t)&off_1E638CE58);
}

uint64_t sub_1B1A6D964(uint64_t a1)
{
  return sub_1B1A6D578(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
}

uint64_t sub_1B1A6D970(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1B1A22024(a1, a2, a3, a4, a5, (uint64_t)&off_1E638CE58);
}

uint64_t sub_1B1A6D97C(uint64_t a1, uint64_t a2)
{
  return sub_1B1A22CEC(a1, a2, (uint64_t)&off_1E638CE58);
}

void sub_1B1A6D988()
{
  sub_1B2229688();
  __break(1u);
}

uint64_t sub_1B1A6D9E0()
{
  uint64_t v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E500;
  KeyPath = swift_getKeyPath();
  sub_1B1AE10E4(0);
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = sub_1B1B080D4;
  v2[5] = KeyPath;
  v2[2] = sub_1B1B0810C;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v3 = MEMORY[0x1E0DEE9D8];
  v4 = sub_1B1AD8C44(0x65756C6176, 0xE500000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v2, KeyPath, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0);
  swift_release();
  *(_QWORD *)(v0 + 32) = v4;
  v5 = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F8, MEMORY[0x1E0DEB188], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v6 = (_QWORD *)swift_allocObject();
  v6[4] = sub_1B1B08148;
  v6[5] = v5;
  v6[2] = sub_1B1B08178;
  v6[3] = v5;
  v6[6] = v5;
  swift_allocObject();
  swift_retain_n();
  v7 = sub_1B1ADC904(0x782E65756C6176, 0xE700000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v6, v5, 0, 0,
         0,
         v3,
         0,
         (uint64_t)sub_1B1B081E0);
  swift_release();
  *(_QWORD *)(v0 + 40) = v7;
  v8 = swift_getKeyPath();
  v9 = (_QWORD *)swift_allocObject();
  v9[4] = sub_1B1B08148;
  v9[5] = v8;
  v9[2] = sub_1B1B08178;
  v9[3] = v8;
  v9[6] = v8;
  swift_allocObject();
  swift_retain_n();
  v10 = sub_1B1ADC904(0x792E65756C6176, 0xE700000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v9, v8, 0, 0,
          0,
          v3,
          0,
          (uint64_t)sub_1B1B081E0);
  swift_release();
  *(_QWORD *)(v0 + 48) = v10;
  v11 = swift_getKeyPath();
  v12 = (_QWORD *)swift_allocObject();
  v12[4] = sub_1B1B08148;
  v12[5] = v11;
  v12[2] = sub_1B1B08178;
  v12[3] = v11;
  v12[6] = v11;
  swift_allocObject();
  swift_retain_n();
  v13 = sub_1B1ADC904(0x7A2E65756C6176, 0xE700000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v12, v11, 0, 0,
          0,
          v3,
          0,
          (uint64_t)sub_1B1B081E0);
  swift_release();
  *(_QWORD *)(v0 + 56) = v13;
  v14 = swift_getKeyPath();
  v15 = (_QWORD *)swift_allocObject();
  v15[4] = sub_1B1B08148;
  v15[5] = v14;
  v15[2] = sub_1B1B08178;
  v15[3] = v14;
  v15[6] = v14;
  swift_allocObject();
  swift_retain_n();
  v16 = sub_1B1ADC904(0x772E65756C6176, 0xE700000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v15, v14, 0, 0,
          0,
          v3,
          0,
          (uint64_t)sub_1B1B081E0);
  swift_release();
  *(_QWORD *)(v0 + 64) = v16;
  result = sub_1B2228AD0();
  qword_1EEFD5308 = v0;
  return result;
}

uint64_t sub_1B1A6DEC0()
{
  return 0x443274636552;
}

uint64_t sub_1B1A6DED4(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, &qword_1EEF572B0);
}

uint64_t sub_1B1A6DEF0(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, &qword_1EEF572B0, (unint64_t *)&qword_1EEFD5308);
}

uint64_t sub_1B1A6DF1C(uint64_t a1)
{
  return sub_1B1A2262C(a1, &qword_1EEF572B0, &qword_1EEFD5308);
}

uint64_t sub_1B1A6DF48()
{
  uint64_t v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E440;
  KeyPath = swift_getKeyPath();
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4B80E0, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = sub_1B1B083E8;
  v2[5] = KeyPath;
  v2[2] = sub_1B1B08410;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v3 = sub_1B1AD7928(1701080931, 0xE400000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)&type metadata for MetalFunctionScript.Info, (uint64_t)&off_1E6398188, (uint64_t)v2, KeyPath, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0,
         (uint64_t)sub_1B1B08430);
  swift_release();
  *(_QWORD *)(v0 + 32) = v3;
  result = sub_1B2228AD0();
  qword_1EEFD5310 = v0;
  return result;
}

uint64_t sub_1B1A6E0D4()
{
  return 0x53206C656E72654BLL;
}

uint64_t sub_1B1A6E0F8(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, qword_1EEF572B8);
}

uint64_t sub_1B1A6E114(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A21E18(a1, a2, a3, a4, qword_1EEF572B8, (unint64_t *)&qword_1EEFD5310);
}

uint64_t sub_1B1A6E140(uint64_t a1)
{
  return sub_1B1A2262C(a1, qword_1EEF572B8, &qword_1EEFD5310);
}

unint64_t sub_1B1A6E16C()
{
  return 0xD000000000000011;
}

uint64_t sub_1B1A6E188()
{
  uint64_t v0;

  return qword_1B2279D80[*(char *)(v0 + 16)];
}

unint64_t sub_1B1A6E19C(unint64_t result)
{
  uint64_t v1;
  __int128 v2;
  char v3;

  if (result == 2)
  {
    *(_OWORD *)v1 = xmmword_1B226E570;
    v3 = 1;
  }
  else
  {
    if (result == 1)
    {
      result = sub_1B1BF3ED8(0xAuLL, 0xAuLL, 0xAuLL);
      *(_OWORD *)v1 = v2;
      *(_BYTE *)(v1 + 16) = 0;
      return result;
    }
    *(_QWORD *)v1 = 0;
    *(_QWORD *)(v1 + 8) = 0;
    v3 = 2;
  }
  *(_BYTE *)(v1 + 16) = v3;
  return result;
}

uint64_t sub_1B1A6E1FC(uint64_t a1, uint64_t a2)
{
  return sub_1B1A6E278(a1, a2, (void (*)(void))sub_1B1AB4154, (uint64_t)&type metadata for ShapeDistribution, (uint64_t (*)(void))sub_1B1A20A24);
}

unint64_t sub_1B1A6E218()
{
  return 0xD000000000000016;
}

uint64_t sub_1B1A6E234()
{
  uint64_t v0;
  uint64_t result;

  result = *(unsigned __int8 *)(v0 + 16);
  if (*(_BYTE *)(v0 + 16))
  {
    if ((_DWORD)result == 1)
      return 1;
    else
      return *(_QWORD *)v0 + 2;
  }
  return result;
}

uint64_t sub_1B1A6E25C(uint64_t a1, uint64_t a2)
{
  return sub_1B1A6E278(a1, a2, (void (*)(void))sub_1B1AB2E98, (uint64_t)&type metadata for EmitterShape.Direction, (uint64_t (*)(void))sub_1B1A20A24);
}

uint64_t sub_1B1A6E278(uint64_t a1, uint64_t a2, void (*a3)(void), uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v6;

  a3();
  v6 = a5();
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t sub_1B1A6E2D0()
{
  return 0x646F4D646E656C42;
}

uint64_t sub_1B1A6E2EC(uint64_t a1)
{
  return sub_1B1A44B80(a1, 1056964608);
}

uint64_t sub_1B1A6E304()
{
  uint64_t v0;
  uint64_t v2;

  v0 = sub_1B1A20C48((uint64_t)&unk_1E63BF290, (uint64_t)&v2, (uint64_t)&type metadata for BlendMode);
  sub_1B1B0BFC8(0, &qword_1ED4BA330);
  swift_arrayDestroy();
  return v0;
}

uint64_t sub_1B1A6E37C()
{
  return 0x7546676E69736145;
}

uint64_t sub_1B1A6E3A0()
{
  uint64_t v0;

  return ((uint64_t (*)(uint64_t))((char *)sub_1B1A6E3C0 + 4 * byte_1B226E5D4[*(unsigned __int8 *)(v0 + 12)]))(16);
}

uint64_t sub_1B1A6E3C0()
{
  return 17;
}

uint64_t sub_1B1A6E3C8()
{
  return 18;
}

uint64_t sub_1B1A6E3D0()
{
  return 19;
}

uint64_t sub_1B1A6E3D8()
{
  return 20;
}

uint64_t sub_1B1A6E3E0()
{
  return 21;
}

uint64_t sub_1B1A6E3E8()
{
  return 22;
}

uint64_t sub_1B1A6E3F0()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t sub_1B1A6E3FC(uint64_t a1, uint64_t a2)
{
  return sub_1B1A6E410(a1, a2, (void (*)(void))sub_1B1AB3520, (uint64_t (*)(void))sub_1B1A208F8);
}

uint64_t sub_1B1A6E410(uint64_t a1, uint64_t a2, void (*a3)(void), uint64_t (*a4)(void))
{
  uint64_t v5;

  a3();
  v5 = a4();
  swift_bridgeObjectRelease();
  return v5;
}

unint64_t sub_1B1A6E460()
{
  return 0xD000000000000016;
}

uint64_t sub_1B1A6E47C()
{
  _BYTE *v0;

  if (v0[4] == 1)
    return *(unsigned int *)v0;
  else
    return 3;
}

uint64_t sub_1B1A6E498(uint64_t a1)
{
  return sub_1B1A44B80(a1, 1065353216);
}

uint64_t sub_1B1A6E4B0(uint64_t a1, uint64_t a2)
{
  return sub_1B1A6E278(a1, a2, (void (*)(void))sub_1B1AB3F94, (uint64_t)&type metadata for ParticleColorInit.Mode, (uint64_t (*)(void))sub_1B1A20C48);
}

unint64_t sub_1B1A6E4CC()
{
  return 0xD000000000000012;
}

uint64_t sub_1B1A6E4EC(uint64_t a1, uint64_t a2)
{
  return sub_1B1A6E278(a1, a2, (void (*)(void))sub_1B1AB2CD8, (uint64_t)&type metadata for EmitterShape.Shape, (uint64_t (*)(void))sub_1B1A20C48);
}

uint64_t sub_1B1A6E508()
{
  return 0x6F6974756C6F7645;
}

uint64_t sub_1B1A6E52C(uint64_t result)
{
  uint64_t v1;

  if (result == 2)
  {
    if (*(_BYTE *)(v1 + 8) != 1)
    {
      *(_QWORD *)v1 = 0x3F80000000000000;
      *(_BYTE *)(v1 + 8) = 1;
    }
  }
  else if (result == 1)
  {
    if (*(_BYTE *)(v1 + 8))
    {
      *(_QWORD *)v1 = 1065353216;
      *(_BYTE *)(v1 + 8) = 0;
    }
  }
  else
  {
    *(_QWORD *)v1 = 0;
    *(_BYTE *)(v1 + 8) = 2;
  }
  return result;
}

uint64_t sub_1B1A6E588(uint64_t a1, uint64_t a2)
{
  return sub_1B1A6E410(a1, a2, (void (*)(void))sub_1B1AB335C, (uint64_t (*)(void))sub_1B1A207E0);
}

uint64_t sub_1B1A6E59C()
{
  return 0x6563617053;
}

uint64_t sub_1B1A6E5B4()
{
  uint64_t v0;
  uint64_t v2;

  v0 = sub_1B1A20B44((uint64_t)&unk_1E63BF170, (uint64_t)&v2, (uint64_t)&type metadata for EntitySpace);
  sub_1B1B0BFC8(0, &qword_1EEF5A5F8);
  swift_arrayDestroy();
  return v0;
}

uint64_t sub_1B1A6E62C()
{
  return 0x4D73736572646441;
}

uint64_t sub_1B1A6E650()
{
  uint64_t v1;

  return sub_1B1A20B44((uint64_t)&unk_1E636F668, (uint64_t)&v1, (uint64_t)&type metadata for AddressMode);
}

uint64_t sub_1B1A6E68C()
{
  return 0x6F4D7265746C6946;
}

uint64_t sub_1B1A6E6A8(uint64_t result)
{
  BOOL *v1;

  *v1 = result == 1;
  return result;
}

uint64_t sub_1B1A6E6BC()
{
  uint64_t v0;
  uint64_t v2;

  v0 = sub_1B1A20B44((uint64_t)&unk_1E63BF120, (uint64_t)&v2, (uint64_t)&type metadata for FilterMode);
  sub_1B1B0BFC8(0, &qword_1ED4BA2C0);
  swift_arrayDestroy();
  return v0;
}

uint64_t sub_1B1A6E738()
{
  uint64_t v0;
  uint64_t v2;

  v0 = sub_1B1A20B44((uint64_t)&unk_1E63BF228, (uint64_t)&v2, (uint64_t)&type metadata for TextureMipFilterMode);
  sub_1B1B0BFC8(0, &qword_1EEF5A600);
  swift_arrayDestroy();
  return v0;
}

uint64_t sub_1B1A6E7B0()
{
  return 0x6E6564646948;
}

uint64_t sub_1B1A6E7C4()
{
  return 0x65646F4D6C6C6946;
}

uint64_t sub_1B1A6E7E0(uint64_t a1, uint64_t a2)
{
  return sub_1B1A6E278(a1, a2, (void (*)(void))sub_1B1AB56F8, (uint64_t)&type metadata for FillMode, (uint64_t (*)(void))sub_1B1A20B44);
}

uint64_t sub_1B1A6E7FC()
{
  return 0x646F4D656C616353;
}

uint64_t sub_1B1A6E818(uint64_t a1, uint64_t a2)
{
  return sub_1B1A6E278(a1, a2, (void (*)(void))sub_1B1AB5CD8, (uint64_t)&type metadata for ScaleMode, (uint64_t (*)(void))sub_1B1A20B44);
}

unint64_t sub_1B1A6E834()
{
  return 0xD000000000000025;
}

uint64_t sub_1B1A6E850()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  v0 = sub_1B1AB4BF8((void (*)(BOOL, uint64_t, uint64_t))sub_1B202A934, byte_1E63BF6C8, (uint64_t)&type metadata for OrientationOverVelocity.DirectionAxis, &byte_1E63BF6C8[1]);
  v1 = sub_1B1A20B44(v0, (uint64_t)&v3, (uint64_t)&type metadata for OrientationOverVelocity.DirectionAxis);
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t sub_1B1A6E8C0()
{
  sub_1B19E52CC(&qword_1EEF5AA00, (uint64_t (*)(uint64_t))type metadata accessor for ForceFieldType, (uint64_t)&unk_1B22697D4);
  return sub_1B2228A58();
}

uint64_t sub_1B1A6E934()
{
  sub_1B19E52CC(&qword_1EEF5AA00, (uint64_t (*)(uint64_t))type metadata accessor for ForceFieldType, (uint64_t)&unk_1B22697D4);
  return sub_1B22289E0();
}

uint64_t sub_1B1A6E998()
{
  return 0x6569466563726F46;
}

uint64_t sub_1B1A6E9BC()
{
  uint64_t v1;

  return sub_1B1A20D64((uint64_t)&unk_1E63C7318, (uint64_t)&v1, (uint64_t (*)(_QWORD))type metadata accessor for ForceFieldType);
}

uint64_t sub_1B1A6E9F8()
{
  sub_1B19E52CC(&qword_1EEF5A9F8, (uint64_t (*)(uint64_t))type metadata accessor for ForceFieldScope, (uint64_t)&unk_1B226980C);
  return sub_1B2228A58();
}

uint64_t sub_1B1A6EA6C()
{
  sub_1B19E52CC(&qword_1EEF5A9F8, (uint64_t (*)(uint64_t))type metadata accessor for ForceFieldScope, (uint64_t)&unk_1B226980C);
  return sub_1B22289E0();
}

unint64_t sub_1B1A6EAD0()
{
  return 0xD000000000000010;
}

uint64_t sub_1B1A6EAEC()
{
  uint64_t v0;
  uint64_t v2;

  v0 = sub_1B1A20D64((uint64_t)&unk_1E63BF2F8, (uint64_t)&v2, (uint64_t (*)(_QWORD))type metadata accessor for ForceFieldScope);
  sub_1B1B0BCA8(0, &qword_1EEF5A9F0, type metadata accessor for ForceFieldScope);
  swift_arrayDestroy();
  return v0;
}

uint64_t sub_1B1A6EB64()
{
  sub_1B19E52CC(&qword_1EEF5A9E8, (uint64_t (*)(uint64_t))type metadata accessor for ForceFieldShape, (uint64_t)&unk_1B226986C);
  return sub_1B2228A58();
}

uint64_t sub_1B1A6EBD8()
{
  sub_1B19E52CC(&qword_1EEF5A9E8, (uint64_t (*)(uint64_t))type metadata accessor for ForceFieldShape, (uint64_t)&unk_1B226986C);
  return sub_1B22289E0();
}

unint64_t sub_1B1A6EC3C()
{
  return 0xD000000000000010;
}

uint64_t sub_1B1A6EC58()
{
  uint64_t v1;

  return sub_1B1A20D64((uint64_t)&unk_1E63C77B8, (uint64_t)&v1, (uint64_t (*)(_QWORD))type metadata accessor for ForceFieldShape);
}

uint64_t sub_1B1A6EC94()
{
  sub_1B19E52CC(&qword_1EEF5A9E0, (uint64_t (*)(uint64_t))type metadata accessor for ForceFieldCullMode, (uint64_t)&unk_1B22698CC);
  return sub_1B2228A58();
}

uint64_t sub_1B1A6ED08()
{
  sub_1B19E52CC(&qword_1EEF5A9E0, (uint64_t (*)(uint64_t))type metadata accessor for ForceFieldCullMode, (uint64_t)&unk_1B22698CC);
  return sub_1B22289E0();
}

unint64_t sub_1B1A6ED6C()
{
  return 0xD000000000000013;
}

uint64_t sub_1B1A6ED88()
{
  uint64_t v0;
  uint64_t v2;

  v0 = sub_1B1A20D64((uint64_t)&unk_1E63BF350, (uint64_t)&v2, (uint64_t (*)(_QWORD))type metadata accessor for ForceFieldCullMode);
  sub_1B1B0BCA8(0, &qword_1EEF5A9D8, type metadata accessor for ForceFieldCullMode);
  swift_arrayDestroy();
  return v0;
}

unint64_t sub_1B1A6EE00()
{
  return 0xD000000000000010;
}

uint64_t sub_1B1A6EE20(uint64_t a1, uint64_t a2)
{
  return sub_1B1A6E278(a1, a2, (void (*)(void))sub_1B1AB3B2C, (uint64_t)&type metadata for ParticleSortMode, (uint64_t (*)(void))sub_1B1A20B44);
}

uint64_t sub_1B1A6EE3C()
{
  return 0x6E6F697373696D45;
}

uint64_t sub_1B1A6EE60(uint64_t a1, uint64_t a2)
{
  return sub_1B1A6E278(a1, a2, (void (*)(void))sub_1B1AB31E4, (uint64_t)&type metadata for EmissionOrder, (uint64_t (*)(void))sub_1B1A20B44);
}

unint64_t sub_1B1A6EE7C()
{
  return 0xD000000000000012;
}

uint64_t sub_1B1A6EE98(uint64_t a1, uint64_t a2)
{
  return sub_1B1A6E278(a1, a2, (void (*)(void))sub_1B1AB4328, (uint64_t)&type metadata for MotionDistribution, (uint64_t (*)(void))sub_1B1A20B44);
}

unint64_t sub_1B1A6EEB4()
{
  return 0xD00000000000001ALL;
}

uint64_t sub_1B1A6EED0(uint64_t a1, uint64_t a2)
{
  return sub_1B1A6E278(a1, a2, (void (*)(void))sub_1B1AB4790, (uint64_t)&type metadata for ParticleQuadRenderer.Shape, (uint64_t (*)(void))sub_1B1A20B44);
}

unint64_t sub_1B1A6EEEC()
{
  return 0xD00000000000001FLL;
}

uint64_t sub_1B1A6EF08(uint64_t a1, uint64_t a2)
{
  return sub_1B1A6E278(a1, a2, (void (*)(void))sub_1B1AB5118, (uint64_t)&type metadata for ParticlePrimitiveRenderer.Shape, (uint64_t (*)(void))sub_1B1A20B44);
}

unint64_t sub_1B1A6EF24()
{
  return 0xD000000000000015;
}

uint64_t sub_1B1A6EF40(uint64_t a1, uint64_t a2)
{
  return sub_1B1A6E278(a1, a2, (void (*)(void))sub_1B1AB4908, (uint64_t)&type metadata for ParticleAnimationMode, (uint64_t (*)(void))sub_1B1A20B44);
}

unint64_t sub_1B1A6EF5C()
{
  return 0xD000000000000017;
}

uint64_t sub_1B1A6EF78(uint64_t a1, uint64_t a2)
{
  return sub_1B1A6E278(a1, a2, (void (*)(void))sub_1B1AB4E28, (uint64_t)&type metadata for ParticleOrientationMode, (uint64_t (*)(void))sub_1B1A20B44);
}

unint64_t sub_1B1A6EF94()
{
  return 0xD000000000000015;
}

uint64_t sub_1B1A6EFB0(uint64_t a1, uint64_t a2)
{
  return sub_1B1A6E278(a1, a2, (void (*)(void))sub_1B1AB4A80, (uint64_t)&type metadata for ParticleRibbonProfile, (uint64_t (*)(void))sub_1B1A20B44);
}

unint64_t sub_1B1A6EFCC()
{
  return 0xD000000000000019;
}

uint64_t sub_1B1A6EFE8(uint64_t a1, uint64_t a2)
{
  return sub_1B1A6E278(a1, a2, (void (*)(void))sub_1B1AB5290, (uint64_t)&type metadata for ParticleRibbonTextureMode, (uint64_t (*)(void))sub_1B1A20B44);
}

uint64_t sub_1B1A6F004()
{
  return 0x6E694B6573696F4ELL;
}

uint64_t sub_1B1A6F020(uint64_t a1, uint64_t a2)
{
  return sub_1B1A6E278(a1, a2, (void (*)(void))sub_1B1AB5B60, (uint64_t)&type metadata for NoiseKind, (uint64_t (*)(void))sub_1B1A20B44);
}

unint64_t sub_1B1A6F03C()
{
  return 0xD000000000000011;
}

uint64_t sub_1B1A6F05C(uint64_t a1, uint64_t a2)
{
  return sub_1B1A6E278(a1, a2, (void (*)(void))sub_1B1AB3E1C, (uint64_t)&type metadata for FlockingLocalAxis, (uint64_t (*)(void))sub_1B1A20B44);
}

unint64_t sub_1B1A6F078()
{
  return 0xD000000000000010;
}

uint64_t sub_1B1A6F094(uint64_t a1, uint64_t a2)
{
  return sub_1B1A6E278(a1, a2, (void (*)(void))sub_1B1AB39B4, (uint64_t)&type metadata for FlockingSizeMode, (uint64_t (*)(void))sub_1B1A20B44);
}

unint64_t sub_1B1A6F0B0()
{
  return 0xD00000000000001CLL;
}

uint64_t sub_1B1A6F0CC()
{
  _BYTE *v0;
  uint64_t result;

  result = sub_1B1F1DDD8();
  *v0 = result;
  return result;
}

uint64_t sub_1B1A6F0E4(uint64_t a1, uint64_t a2)
{
  return sub_1B1A6E278(a1, a2, (void (*)(void))sub_1B1AB5408, (uint64_t)&type metadata for FluidSolver2DSolverSetupType, (uint64_t (*)(void))sub_1B1A20B44);
}

unint64_t sub_1B1A6F100()
{
  return 0xD00000000000001DLL;
}

uint64_t sub_1B1A6F11C(uint64_t a1, uint64_t a2)
{
  return sub_1B1A6E278(a1, a2, (void (*)(void))sub_1B1AB5580, (uint64_t)&type metadata for FluidSolver2DSolverBorderType, (uint64_t (*)(void))sub_1B1A20B44);
}

uint64_t sub_1B1A6F138()
{
  return 0x72756C42736E654CLL;
}

uint64_t sub_1B1A6F160(uint64_t a1, uint64_t a2)
{
  return sub_1B1A6E278(a1, a2, (void (*)(void))sub_1B1AB383C, (uint64_t)&type metadata for LensBlurQuality, (uint64_t (*)(void))sub_1B1A20B44);
}

unint64_t sub_1B1A6F17C()
{
  return 0xD000000000000013;
}

uint64_t sub_1B1A6F198(uint64_t a1, uint64_t a2)
{
  return sub_1B1A6E278(a1, a2, (void (*)(void))sub_1B1AB4618, (uint64_t)&type metadata for ToneMappingOperator, (uint64_t (*)(void))sub_1B1A20B44);
}

unint64_t sub_1B1A6F1B4()
{
  return 0xD000000000000015;
}

uint64_t sub_1B1A6F1D0(uint64_t a1, uint64_t a2)
{
  return sub_1B1A6E278(a1, a2, (void (*)(void))sub_1B1AB3CA4, (uint64_t)&type metadata for ParticleSubSpawn.Mode, (uint64_t (*)(void))sub_1B1A20B44);
}

unint64_t sub_1B1A6F1EC()
{
  return 0xD000000000000026;
}

uint64_t sub_1B1A6F208(uint64_t a1, uint64_t a2)
{
  return sub_1B1A6E278(a1, a2, (void (*)(void))sub_1B1AB4FA0, (uint64_t)&type metadata for ParticleColorOverPosition.GradientMode, (uint64_t (*)(void))sub_1B1A20B44);
}

uint64_t sub_1B1A6F224()
{
  return 0x4365727574786554;
}

uint64_t sub_1B1A6F248(uint64_t a1, uint64_t a2)
{
  return sub_1B1A6E278(a1, a2, (void (*)(void))sub_1B1AB36C4, (uint64_t)&type metadata for TextureChannel, (uint64_t (*)(void))sub_1B1A20B44);
}

unint64_t sub_1B1A6F264()
{
  return 0xD000000000000017;
}

uint64_t sub_1B1A6F280(uint64_t a1, uint64_t a2)
{
  return sub_1B1A6E278(a1, a2, (void (*)(void))sub_1B1AB29E8, (uint64_t)&type metadata for PointCache.Distribution, (uint64_t (*)(void))sub_1B1A20B44);
}

unint64_t sub_1B1A6F29C()
{
  return 0xD000000000000013;
}

uint64_t sub_1B1A6F2B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  v0 = sub_1B1AB4BF8((void (*)(BOOL, uint64_t, uint64_t))sub_1B202A7FC, byte_1E63BF5D0, (uint64_t)&type metadata for ProjectionDirection, &byte_1E63BF5D0[1]);
  v1 = sub_1B1A20B44(v0, (uint64_t)&v3, (uint64_t)&type metadata for ProjectionDirection);
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t sub_1B1A6F328()
{
  return 0x6C6169726574614DLL;
}

uint64_t sub_1B1A6F34C(uint64_t a1, uint64_t a2)
{
  return sub_1B1A6E278(a1, a2, (void (*)(void))sub_1B1AB5870, (uint64_t)&type metadata for Material.Kind, (uint64_t (*)(void))sub_1B1A20B44);
}

unint64_t sub_1B1A6F368()
{
  return 0xD00000000000001ALL;
}

uint64_t sub_1B1A6F384()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  v0 = sub_1B1AB4BF8((void (*)(BOOL, uint64_t, uint64_t))sub_1B202A898, byte_1E63BF650, (uint64_t)&type metadata for OrientationConstraint.Mode, &byte_1E63BF650[1]);
  v1 = sub_1B1A20B44(v0, (uint64_t)&v3, (uint64_t)&type metadata for OrientationConstraint.Mode);
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t sub_1B1A6F3F4()
{
  return 0x706168536C6C694BLL;
}

uint64_t sub_1B1A6F418(uint64_t a1, uint64_t a2)
{
  return sub_1B1A6E278(a1, a2, (void (*)(void))sub_1B1AB59E8, (uint64_t)&type metadata for KillShape.Shape, (uint64_t (*)(void))sub_1B1A20B44);
}

unint64_t sub_1B1A6F434()
{
  return 0xD00000000000001CLL;
}

uint64_t sub_1B1A6F450(uint64_t a1, uint64_t a2)
{
  return sub_1B1A6E278(a1, a2, (void (*)(void))sub_1B1AB306C, (uint64_t)&type metadata for VideoCapture.OrientationMode, (uint64_t (*)(void))sub_1B1A20B44);
}

unint64_t sub_1B1A6F46C()
{
  return 0xD000000000000015;
}

uint64_t sub_1B1A6F488(uint64_t a1, uint64_t a2)
{
  return sub_1B1A6E278(a1, a2, (void (*)(void))sub_1B1AB2B60, (uint64_t)&type metadata for Composition.Operation, (uint64_t (*)(void))sub_1B1A20B44);
}

uint64_t sub_1B1A6F4A4()
{
  return 0x65646F4D6C6C7543;
}

uint64_t sub_1B1A6F4BC(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t sub_1B1A6F4C4(uint64_t a1, uint64_t a2)
{
  return sub_1B1A6E278(a1, a2, (void (*)(void))sub_1B1AB5E50, (uint64_t)type metadata accessor for MTLCullMode, (uint64_t (*)(void))sub_1B1A20D64);
}

uint64_t sub_1B1A6F4E0()
{
  return 0x46657261706D6F43;
}

uint64_t sub_1B1A6F504(uint64_t a1, uint64_t a2)
{
  return sub_1B1A6E278(a1, a2, (void (*)(void))sub_1B1AB62AC, (uint64_t)type metadata accessor for MTLCompareFunction, (uint64_t (*)(void))sub_1B1A20D64);
}

unint64_t static VFXForceFieldType.displayName.getter()
{
  return 0xD000000000000010;
}

void *static VFXForceFieldType.allCases.getter()
{
  return &unk_1E63C7FF8;
}

uint64_t VFXForceFieldType.stringValue.getter(uint64_t a1)
{
  uint64_t result;

  result = 0x7261656E694CLL;
  switch(a1)
  {
    case 0:
      return result;
    case 1:
      result = 0x6C6169646152;
      break;
    case 2:
      result = 0x786574726F56;
      break;
    case 3:
      result = 0x6573696F4ELL;
      break;
    case 4:
      result = 0x6E656C7562727554;
      break;
    case 5:
      result = 0x676E69727053;
      break;
    case 6:
      result = 0x636974656E67614DLL;
      break;
    case 7:
      result = 0x63696E6F6D726148;
      break;
    case 8:
      result = 1734439492;
      break;
    default:
      result = 0x6E776F6E6B6E75;
      break;
  }
  return result;
}

uint64_t VFXForceFieldType.description.getter(uint64_t a1)
{
  uint64_t result;

  result = 0x7261656E694CLL;
  switch(a1)
  {
    case 0:
      return result;
    case 1:
      result = 0x6C6169646152;
      break;
    case 2:
      result = 0x786574726F56;
      break;
    case 3:
      result = 0x6573696F4ELL;
      break;
    case 4:
      result = 0x6E656C7562727554;
      break;
    case 5:
      result = 0x676E69727053;
      break;
    case 6:
      result = 0x636974656E67614DLL;
      break;
    case 7:
      result = 0x63696E6F6D726148;
      break;
    case 8:
      result = 1734439492;
      break;
    default:
      result = 0x6E776F6E6B6E75;
      break;
  }
  return result;
}

void sub_1B1A6F720(_QWORD *a1@<X8>)
{
  *a1 = &unk_1E63C7FF8;
}

uint64_t sub_1B1A6F730()
{
  uint64_t *v0;

  return VFXForceFieldType.description.getter(*v0);
}

unint64_t sub_1B1A6F738()
{
  return 0xD000000000000010;
}

uint64_t sub_1B1A6F754(uint64_t a1, uint64_t a2)
{
  return sub_1B1A6E278(a1, a2, (void (*)(void))sub_1B1AB6138, (uint64_t)type metadata accessor for VFXForceFieldType, (uint64_t (*)(void))sub_1B1A20D64);
}

uint64_t sub_1B1A6F770()
{
  sub_1B19E52CC(&qword_1EEF5A9D0, (uint64_t (*)(uint64_t))type metadata accessor for VFXForceFieldType, (uint64_t)&unk_1B22699DC);
  return sub_1B2228A58();
}

uint64_t sub_1B1A6F7E4()
{
  sub_1B19E52CC(&qword_1EEF5A9D0, (uint64_t (*)(uint64_t))type metadata accessor for VFXForceFieldType, (uint64_t)&unk_1B22699DC);
  return sub_1B22289E0();
}

unint64_t static VFXCameraProjectionDirection.displayName.getter()
{
  return 0xD000000000000014;
}

void *static VFXCameraProjectionDirection.allCases.getter()
{
  return &unk_1E63C99A8;
}

uint64_t VFXCameraProjectionDirection.description.getter(uint64_t a1)
{
  uint64_t v1;

  v1 = 0x6E776F6E6B6E55;
  if (!a1)
    v1 = 0x6C61636974726556;
  if (a1 == 1)
    return 0x746E6F7A69726F48;
  else
    return v1;
}

void sub_1B1A6F8CC(_QWORD *a1@<X8>)
{
  *a1 = &unk_1E63C99F8;
}

uint64_t sub_1B1A6F8DC()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = 0x6E776F6E6B6E55;
  if (!*v0)
    v1 = 0x6C61636974726556;
  if (*v0 == 1)
    return 0x746E6F7A69726F48;
  else
    return v1;
}

unint64_t sub_1B1A6F93C()
{
  return 0xD000000000000014;
}

uint64_t sub_1B1A6F958(uint64_t a1, uint64_t a2)
{
  return sub_1B1A6F978(a1, a2, (void (*)(BOOL, uint64_t, uint64_t))sub_1B202AC80, type metadata accessor for VFXCameraProjectionDirection, &qword_1E63BF918, &qword_1E63BF920);
}

uint64_t sub_1B1A6F978(uint64_t a1, uint64_t a2, void (*a3)(BOOL, uint64_t, uint64_t), void (*a4)(_QWORD), uint64_t *a5, uint64_t *a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v7 = sub_1B1AB6420(a3, a4, a5, a6);
  v8 = sub_1B1A20D64(v7, (uint64_t)&v10, (uint64_t (*)(_QWORD))a4);
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t sub_1B1A6F9DC()
{
  sub_1B19E52CC(&qword_1EEF5A9C8, (uint64_t (*)(uint64_t))type metadata accessor for VFXCameraProjectionDirection, (uint64_t)&unk_1B2269A18);
  return sub_1B2228A58();
}

uint64_t sub_1B1A6FA50()
{
  sub_1B19E52CC(&qword_1EEF5A9C8, (uint64_t (*)(uint64_t))type metadata accessor for VFXCameraProjectionDirection, (uint64_t)&unk_1B2269A18);
  return sub_1B22289E0();
}

uint64_t static VFXCameraFillMode.displayName.getter()
{
  return 0x646F4D206C6C6946;
}

void *static VFXCameraFillMode.allCases.getter()
{
  return &unk_1E63C7ED8;
}

unint64_t VFXCameraFillMode.description.getter(uint64_t a1)
{
  unint64_t result;

  result = 7629126;
  switch(a1)
  {
    case 0:
      return result;
    case 1:
      result = 1819044166;
      break;
    case 2:
      result = 0x7472655620746946;
      break;
    case 3:
      result = 0xD000000000000010;
      break;
    case 4:
      result = 0x68637465727453;
      break;
    default:
      result = 0x6E776F6E6B6E55;
      break;
  }
  return result;
}

void sub_1B1A6FB8C(_QWORD *a1@<X8>)
{
  *a1 = &unk_1E63C7F50;
}

unint64_t sub_1B1A6FB9C()
{
  _QWORD *v0;
  unint64_t result;

  result = 7629126;
  switch(*v0)
  {
    case 0:
      return result;
    case 1:
      result = 1819044166;
      break;
    case 2:
      result = 0x7472655620746946;
      break;
    case 3:
      result = 0xD000000000000010;
      break;
    case 4:
      result = 0x68637465727453;
      break;
    default:
      result = 0x6E776F6E6B6E55;
      break;
  }
  return result;
}

uint64_t sub_1B1A6FC4C()
{
  return 0x646F4D206C6C6946;
}

uint64_t sub_1B1A6FC68(uint64_t a1, uint64_t a2)
{
  return sub_1B1A6E278(a1, a2, (void (*)(void))sub_1B1AB5FC4, (uint64_t)type metadata accessor for VFXCameraFillMode, (uint64_t (*)(void))sub_1B1A20D64);
}

uint64_t sub_1B1A6FC84()
{
  sub_1B19E52CC(&qword_1EEF5A9C0, (uint64_t (*)(uint64_t))type metadata accessor for VFXCameraFillMode, (uint64_t)&unk_1B2269A54);
  return sub_1B2228A58();
}

uint64_t sub_1B1A6FCF8()
{
  sub_1B19E52CC(&qword_1EEF5A9C0, (uint64_t (*)(uint64_t))type metadata accessor for VFXCameraFillMode, (uint64_t)&unk_1B2269A54);
  return sub_1B22289E0();
}

unint64_t static VFXCameraLensBlurFilterQuality.displayName.getter()
{
  return 0xD000000000000018;
}

void *static VFXCameraLensBlurFilterQuality.allCases.getter()
{
  return &unk_1E63C9BD8;
}

uint64_t VFXCameraLensBlurFilterQuality.description.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = 1751607624;
  v2 = 0x6E776F6E6B6E55;
  if (a1 == 1)
    v2 = 0x6D756964654DLL;
  if (a1 != 2)
    v1 = v2;
  if (a1)
    return v1;
  else
    return 7827276;
}

void sub_1B1A6FDE8(_QWORD *a1@<X8>)
{
  *a1 = &unk_1E63C9C40;
}

uint64_t sub_1B1A6FDF8()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *v0;
  v2 = 1751607624;
  v3 = 0x6E776F6E6B6E55;
  if (*v0 == 1)
    v3 = 0x6D756964654DLL;
  if (v1 != 2)
    v2 = v3;
  if (v1)
    return v2;
  else
    return 7827276;
}

unint64_t sub_1B1A6FE60()
{
  return 0xD000000000000018;
}

uint64_t sub_1B1A6FE7C(uint64_t a1, uint64_t a2)
{
  return sub_1B1A6E278(a1, a2, (void (*)(void))sub_1B1AB665C, (uint64_t)type metadata accessor for VFXCameraLensBlurFilterQuality, (uint64_t (*)(void))sub_1B1A20D64);
}

uint64_t sub_1B1A6FE98()
{
  sub_1B19E52CC(&qword_1EEF5A9B8, (uint64_t (*)(uint64_t))type metadata accessor for VFXCameraLensBlurFilterQuality, (uint64_t)&unk_1B2269A90);
  return sub_1B2228A58();
}

uint64_t sub_1B1A6FF0C()
{
  sub_1B19E52CC(&qword_1EEF5A9B8, (uint64_t (*)(uint64_t))type metadata accessor for VFXCameraLensBlurFilterQuality, (uint64_t)&unk_1B2269A90);
  return sub_1B22289E0();
}

unint64_t static VFXCameraToneMappingMode.displayName.getter()
{
  return 0xD000000000000011;
}

void *static VFXCameraToneMappingMode.allCases.getter()
{
  return &unk_1E63C8CA8;
}

uint64_t VFXCameraToneMappingMode.description.getter(uint64_t a1)
{
  uint64_t v1;

  v1 = 0x6E776F6E6B6E55;
  if (a1 == 1)
    v1 = 1936024385;
  if (a1)
    return v1;
  else
    return 0x632063696D6C6946;
}

uint64_t sub_1B1A6FFF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B1A70054(a1, a2, a3, sub_1B1A70008, sub_1B1A70024);
}

uint64_t sub_1B1A70008()
{
  return sub_1B19E52CC(&qword_1EEF58C40, (uint64_t (*)(uint64_t))type metadata accessor for ForceFieldType, (uint64_t)&protocol conformance descriptor for ForceFieldType);
}

uint64_t sub_1B1A70024()
{
  return sub_1B19E52CC(&qword_1EEF58C48, (uint64_t (*)(uint64_t))type metadata accessor for ForceFieldType, (uint64_t)&protocol conformance descriptor for ForceFieldType);
}

uint64_t sub_1B1A70040(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B1A70054(a1, a2, a3, sub_1B1A70084, sub_1B1A700A0);
}

uint64_t sub_1B1A70054(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), uint64_t (*a5)(void))
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = a4();
  result = a5();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t sub_1B1A70084()
{
  return sub_1B19E52CC(&qword_1EEF58C50, (uint64_t (*)(uint64_t))type metadata accessor for ForceFieldScope, (uint64_t)&protocol conformance descriptor for ForceFieldScope);
}

uint64_t sub_1B1A700A0()
{
  return sub_1B19E52CC(&qword_1EEF58C58, (uint64_t (*)(uint64_t))type metadata accessor for ForceFieldScope, (uint64_t)&protocol conformance descriptor for ForceFieldScope);
}

uint64_t sub_1B1A700BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B1A70054(a1, a2, a3, sub_1B1A700D0, sub_1B1A700EC);
}

uint64_t sub_1B1A700D0()
{
  return sub_1B19E52CC(&qword_1EEF58C60, (uint64_t (*)(uint64_t))type metadata accessor for ForceFieldShape, (uint64_t)&protocol conformance descriptor for ForceFieldShape);
}

uint64_t sub_1B1A700EC()
{
  return sub_1B19E52CC(&qword_1EEF58C68, (uint64_t (*)(uint64_t))type metadata accessor for ForceFieldShape, (uint64_t)&protocol conformance descriptor for ForceFieldShape);
}

uint64_t sub_1B1A70108(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B1A70054(a1, a2, a3, sub_1B1A7011C, sub_1B1A70138);
}

uint64_t sub_1B1A7011C()
{
  return sub_1B19E52CC(&qword_1EEF58C70, (uint64_t (*)(uint64_t))type metadata accessor for ForceFieldCullMode, (uint64_t)&protocol conformance descriptor for ForceFieldCullMode);
}

uint64_t sub_1B1A70138()
{
  return sub_1B19E52CC(&qword_1EEF58C78, (uint64_t (*)(uint64_t))type metadata accessor for ForceFieldCullMode, (uint64_t)&protocol conformance descriptor for ForceFieldCullMode);
}

uint64_t sub_1B1A70154(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B1A70054(a1, a2, a3, sub_1B1A70168, sub_1B1A70184);
}

uint64_t sub_1B1A70168()
{
  return sub_1B19E52CC(&qword_1ED4BA620, (uint64_t (*)(uint64_t))type metadata accessor for MTLCullMode, (uint64_t)&protocol conformance descriptor for MTLCullMode);
}

uint64_t sub_1B1A70184()
{
  return sub_1B19E52CC(&qword_1EEF58C80, (uint64_t (*)(uint64_t))type metadata accessor for MTLCullMode, (uint64_t)&protocol conformance descriptor for MTLCullMode);
}

uint64_t sub_1B1A701A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B1A70054(a1, a2, a3, sub_1B1A701B4, sub_1B1A701D0);
}

uint64_t sub_1B1A701B4()
{
  return sub_1B19E52CC(&qword_1EEF58C88, (uint64_t (*)(uint64_t))type metadata accessor for MTLCompareFunction, (uint64_t)&protocol conformance descriptor for MTLCompareFunction);
}

uint64_t sub_1B1A701D0()
{
  return sub_1B19E52CC(&qword_1EEF58C90, (uint64_t (*)(uint64_t))type metadata accessor for MTLCompareFunction, (uint64_t)&protocol conformance descriptor for MTLCompareFunction);
}

unint64_t sub_1B1A701F0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EEF58C98;
  if (!qword_1EEF58C98)
  {
    sub_1B1791524(255, &qword_1EEF58CA0, (uint64_t (*)(uint64_t))type metadata accessor for VFXForceFieldType, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
    result = MEMORY[0x1B5E23E74](MEMORY[0x1E0DEAF50], v1);
    atomic_store(result, (unint64_t *)&qword_1EEF58C98);
  }
  return result;
}

uint64_t sub_1B1A70250(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B1A70054(a1, a2, a3, sub_1B1A70264, sub_1B1A70280);
}

uint64_t sub_1B1A70264()
{
  return sub_1B19E52CC(&qword_1EEF58CA8, (uint64_t (*)(uint64_t))type metadata accessor for VFXForceFieldType, (uint64_t)&protocol conformance descriptor for VFXForceFieldType);
}

uint64_t sub_1B1A70280()
{
  return sub_1B19E52CC(&qword_1EEF58CB0, (uint64_t (*)(uint64_t))type metadata accessor for VFXForceFieldType, (uint64_t)&protocol conformance descriptor for VFXForceFieldType);
}

unint64_t sub_1B1A702A0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EEF58CB8;
  if (!qword_1EEF58CB8)
  {
    sub_1B1791524(255, &qword_1EEF58CC0, (uint64_t (*)(uint64_t))type metadata accessor for VFXCameraProjectionDirection, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
    result = MEMORY[0x1B5E23E74](MEMORY[0x1E0DEAF50], v1);
    atomic_store(result, (unint64_t *)&qword_1EEF58CB8);
  }
  return result;
}

uint64_t sub_1B1A70300(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B1A70054(a1, a2, a3, sub_1B1A70314, sub_1B1A70330);
}

uint64_t sub_1B1A70314()
{
  return sub_1B19E52CC(&qword_1EEF58CC8, (uint64_t (*)(uint64_t))type metadata accessor for VFXCameraProjectionDirection, (uint64_t)&protocol conformance descriptor for VFXCameraProjectionDirection);
}

uint64_t sub_1B1A70330()
{
  return sub_1B19E52CC(&qword_1EEF58CD0, (uint64_t (*)(uint64_t))type metadata accessor for VFXCameraProjectionDirection, (uint64_t)&protocol conformance descriptor for VFXCameraProjectionDirection);
}

unint64_t sub_1B1A70350()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EEF58CD8;
  if (!qword_1EEF58CD8)
  {
    sub_1B1791524(255, &qword_1EEF58CE0, (uint64_t (*)(uint64_t))type metadata accessor for VFXCameraFillMode, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
    result = MEMORY[0x1B5E23E74](MEMORY[0x1E0DEAF50], v1);
    atomic_store(result, (unint64_t *)&qword_1EEF58CD8);
  }
  return result;
}

uint64_t sub_1B1A703B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B1A70054(a1, a2, a3, sub_1B1A703C4, sub_1B1A703E0);
}

uint64_t sub_1B1A703C4()
{
  return sub_1B19E52CC(&qword_1EEF58CE8, (uint64_t (*)(uint64_t))type metadata accessor for VFXCameraFillMode, (uint64_t)&protocol conformance descriptor for VFXCameraFillMode);
}

uint64_t sub_1B1A703E0()
{
  return sub_1B19E52CC(&qword_1EEF58CF0, (uint64_t (*)(uint64_t))type metadata accessor for VFXCameraFillMode, (uint64_t)&protocol conformance descriptor for VFXCameraFillMode);
}

unint64_t sub_1B1A70400()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EEF58CF8;
  if (!qword_1EEF58CF8)
  {
    sub_1B1791524(255, &qword_1EEF58D00, (uint64_t (*)(uint64_t))type metadata accessor for VFXCameraLensBlurFilterQuality, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
    result = MEMORY[0x1B5E23E74](MEMORY[0x1E0DEAF50], v1);
    atomic_store(result, (unint64_t *)&qword_1EEF58CF8);
  }
  return result;
}

uint64_t sub_1B1A70460(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B1A70054(a1, a2, a3, sub_1B1A70474, sub_1B1A70490);
}

uint64_t sub_1B1A70474()
{
  return sub_1B19E52CC(&qword_1EEF58D08, (uint64_t (*)(uint64_t))type metadata accessor for VFXCameraLensBlurFilterQuality, (uint64_t)&protocol conformance descriptor for VFXCameraLensBlurFilterQuality);
}

uint64_t sub_1B1A70490()
{
  return sub_1B19E52CC(&qword_1EEF58D10, (uint64_t (*)(uint64_t))type metadata accessor for VFXCameraLensBlurFilterQuality, (uint64_t)&protocol conformance descriptor for VFXCameraLensBlurFilterQuality);
}

unint64_t sub_1B1A704B0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EEF58D18;
  if (!qword_1EEF58D18)
  {
    sub_1B1791524(255, &qword_1EEF58D20, (uint64_t (*)(uint64_t))type metadata accessor for VFXCameraToneMappingMode, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
    result = MEMORY[0x1B5E23E74](MEMORY[0x1E0DEAF50], v1);
    atomic_store(result, (unint64_t *)&qword_1EEF58D18);
  }
  return result;
}

void sub_1B1A70510(_QWORD *a1@<X8>)
{
  *a1 = &unk_1E63C8CF8;
}

uint64_t sub_1B1A70520()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = 0x6E776F6E6B6E55;
  if (*v0 == 1)
    v1 = 1936024385;
  if (*v0)
    return v1;
  else
    return 0x632063696D6C6946;
}

unint64_t sub_1B1A70580()
{
  return 0xD000000000000011;
}

uint64_t sub_1B1A7059C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B1A70054(a1, a2, a3, sub_1B1A705B0, sub_1B1A705CC);
}

uint64_t sub_1B1A705B0()
{
  return sub_1B19E52CC(&qword_1EEF58D28, (uint64_t (*)(uint64_t))type metadata accessor for VFXCameraToneMappingMode, (uint64_t)&protocol conformance descriptor for VFXCameraToneMappingMode);
}

uint64_t sub_1B1A705CC()
{
  return sub_1B19E52CC(&qword_1EEF58D30, (uint64_t (*)(uint64_t))type metadata accessor for VFXCameraToneMappingMode, (uint64_t)&protocol conformance descriptor for VFXCameraToneMappingMode);
}

uint64_t sub_1B1A705E8(uint64_t a1, uint64_t a2)
{
  return sub_1B1A6F978(a1, a2, (void (*)(BOOL, uint64_t, uint64_t))sub_1B202AC54, type metadata accessor for VFXCameraToneMappingMode, qword_1E63BF8E8, &qword_1E63BF8E8[1]);
}

uint64_t sub_1B1A70608()
{
  sub_1B19E52CC(&qword_1EEF5A9B0, (uint64_t (*)(uint64_t))type metadata accessor for VFXCameraToneMappingMode, (uint64_t)&unk_1B2269ACC);
  return sub_1B2228A58();
}

uint64_t sub_1B1A7067C()
{
  sub_1B19E52CC(&qword_1EEF5A9B0, (uint64_t (*)(uint64_t))type metadata accessor for VFXCameraToneMappingMode, (uint64_t)&unk_1B2269ACC);
  return sub_1B22289E0();
}

uint64_t type metadata accessor for BindingPropertyDescription()
{
  return objc_opt_self();
}

uint64_t destroy for BindingPropertyDescription.BindingInfo(uint64_t a1)
{
  uint64_t result;

  swift_bridgeObjectRelease();
  result = *(_QWORD *)(a1 + 32);
  if (result)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for BindingPropertyDescription.BindingInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  if (v5)
  {
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 32) = v5;
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  }
  return a1;
}

